theory tar_1000071a0
imports "../../../isabelle/X86_Semantics/X86_Parse_Hoare_Triples"


begin


context semantics
begin

(*
#####################################
## Entry = 1000071a0, blockId == 0 ##
#####################################
*)

htriple "ht_1000071a0"
 Separations "((RSP_0 -64 8),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 8),8) SEP (0x10000c000,8); ((RSP_0 -64 8),8) SEP (0x10000c008,8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = [(RSP_0 -64 8),8]_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = [(RSP_0 -64 584),8]_0 ; [(RSP_0 -64 592),8] = [(RSP_0 -64 592),8]_0 ; [(RSP_0 -64 600),8] = [(RSP_0 -64 600),8]_0 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = [(RSP_0 -64 624),8]_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 648),16] = [(RSP_0 -64 648),16]_0 ; [(RSP_0 -64 664),16] = [(RSP_0 -64 664),16]_0 ; [(RSP_0 -64 680),16] = [(RSP_0 -64 680),16]_0 ; [(RSP_0 -64 696),16] = [(RSP_0 -64 696),16]_0 ; [(RSP_0 -64 712),16] = [(RSP_0 -64 712),16]_0 ; [(RSP_0 -64 728),16] = [(RSP_0 -64 728),16]_0 ; [(RSP_0 -64 744),16] = [(RSP_0 -64 744),16]_0 ; [(RSP_0 -64 760),16] = [(RSP_0 -64 760),16]_0 ; [(RSP_0 -64 768),8] = [(RSP_0 -64 768),8]_0 ; [(RSP_0 -64 776),8] = [(RSP_0 -64 776),8]_0 ; [(RSP_0 -64 784),8] = [(RSP_0 -64 784),8]_0 ; [(RSP_0 -64 792),8] = [(RSP_0 -64 792),8]_0"
 Instruction "1000071a0: PUSH RBP 1"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = [(RSP_0 -64 584),8]_0 ; [(RSP_0 -64 592),8] = [(RSP_0 -64 592),8]_0 ; [(RSP_0 -64 600),8] = [(RSP_0 -64 600),8]_0 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = [(RSP_0 -64 624),8]_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 648),16] = [(RSP_0 -64 648),16]_0 ; [(RSP_0 -64 664),16] = [(RSP_0 -64 664),16]_0 ; [(RSP_0 -64 680),16] = [(RSP_0 -64 680),16]_0 ; [(RSP_0 -64 696),16] = [(RSP_0 -64 696),16]_0 ; [(RSP_0 -64 712),16] = [(RSP_0 -64 712),16]_0 ; [(RSP_0 -64 728),16] = [(RSP_0 -64 728),16]_0 ; [(RSP_0 -64 744),16] = [(RSP_0 -64 744),16]_0 ; [(RSP_0 -64 760),16] = [(RSP_0 -64 760),16]_0 ; [(RSP_0 -64 768),8] = [(RSP_0 -64 768),8]_0 ; [(RSP_0 -64 776),8] = [(RSP_0 -64 776),8]_0 ; [(RSP_0 -64 784),8] = [(RSP_0 -64 784),8]_0 ; [(RSP_0 -64 792),8] = [(RSP_0 -64 792),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000071a1"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = [(RSP_0 -64 584),8]_0 ; [(RSP_0 -64 592),8] = [(RSP_0 -64 592),8]_0 ; [(RSP_0 -64 600),8] = [(RSP_0 -64 600),8]_0 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = [(RSP_0 -64 624),8]_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 648),16] = [(RSP_0 -64 648),16]_0 ; [(RSP_0 -64 664),16] = [(RSP_0 -64 664),16]_0 ; [(RSP_0 -64 680),16] = [(RSP_0 -64 680),16]_0 ; [(RSP_0 -64 696),16] = [(RSP_0 -64 696),16]_0 ; [(RSP_0 -64 712),16] = [(RSP_0 -64 712),16]_0 ; [(RSP_0 -64 728),16] = [(RSP_0 -64 728),16]_0 ; [(RSP_0 -64 744),16] = [(RSP_0 -64 744),16]_0 ; [(RSP_0 -64 760),16] = [(RSP_0 -64 760),16]_0 ; [(RSP_0 -64 768),8] = [(RSP_0 -64 768),8]_0 ; [(RSP_0 -64 776),8] = [(RSP_0 -64 776),8]_0 ; [(RSP_0 -64 784),8] = [(RSP_0 -64 784),8]_0 ; [(RSP_0 -64 792),8] = [(RSP_0 -64 792),8]_0"
 Instruction "1000071a1: MOV RBP, RSP 3"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = [(RSP_0 -64 584),8]_0 ; [(RSP_0 -64 592),8] = [(RSP_0 -64 592),8]_0 ; [(RSP_0 -64 600),8] = [(RSP_0 -64 600),8]_0 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = [(RSP_0 -64 624),8]_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 648),16] = [(RSP_0 -64 648),16]_0 ; [(RSP_0 -64 664),16] = [(RSP_0 -64 664),16]_0 ; [(RSP_0 -64 680),16] = [(RSP_0 -64 680),16]_0 ; [(RSP_0 -64 696),16] = [(RSP_0 -64 696),16]_0 ; [(RSP_0 -64 712),16] = [(RSP_0 -64 712),16]_0 ; [(RSP_0 -64 728),16] = [(RSP_0 -64 728),16]_0 ; [(RSP_0 -64 744),16] = [(RSP_0 -64 744),16]_0 ; [(RSP_0 -64 760),16] = [(RSP_0 -64 760),16]_0 ; [(RSP_0 -64 768),8] = [(RSP_0 -64 768),8]_0 ; [(RSP_0 -64 776),8] = [(RSP_0 -64 776),8]_0 ; [(RSP_0 -64 784),8] = [(RSP_0 -64 784),8]_0 ; [(RSP_0 -64 792),8] = [(RSP_0 -64 792),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000071a4"
 Separations "((RSP_0 -64 16),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 16),8) SEP (0x10000c000,8); ((RSP_0 -64 16),8) SEP (0x10000c008,8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = [(RSP_0 -64 584),8]_0 ; [(RSP_0 -64 592),8] = [(RSP_0 -64 592),8]_0 ; [(RSP_0 -64 600),8] = [(RSP_0 -64 600),8]_0 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = [(RSP_0 -64 624),8]_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 648),16] = [(RSP_0 -64 648),16]_0 ; [(RSP_0 -64 664),16] = [(RSP_0 -64 664),16]_0 ; [(RSP_0 -64 680),16] = [(RSP_0 -64 680),16]_0 ; [(RSP_0 -64 696),16] = [(RSP_0 -64 696),16]_0 ; [(RSP_0 -64 712),16] = [(RSP_0 -64 712),16]_0 ; [(RSP_0 -64 728),16] = [(RSP_0 -64 728),16]_0 ; [(RSP_0 -64 744),16] = [(RSP_0 -64 744),16]_0 ; [(RSP_0 -64 760),16] = [(RSP_0 -64 760),16]_0 ; [(RSP_0 -64 768),8] = [(RSP_0 -64 768),8]_0 ; [(RSP_0 -64 776),8] = [(RSP_0 -64 776),8]_0 ; [(RSP_0 -64 784),8] = [(RSP_0 -64 784),8]_0 ; [(RSP_0 -64 792),8] = [(RSP_0 -64 792),8]_0"
 Instruction "1000071a4: PUSH R15 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = [(RSP_0 -64 584),8]_0 ; [(RSP_0 -64 592),8] = [(RSP_0 -64 592),8]_0 ; [(RSP_0 -64 600),8] = [(RSP_0 -64 600),8]_0 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = [(RSP_0 -64 624),8]_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 648),16] = [(RSP_0 -64 648),16]_0 ; [(RSP_0 -64 664),16] = [(RSP_0 -64 664),16]_0 ; [(RSP_0 -64 680),16] = [(RSP_0 -64 680),16]_0 ; [(RSP_0 -64 696),16] = [(RSP_0 -64 696),16]_0 ; [(RSP_0 -64 712),16] = [(RSP_0 -64 712),16]_0 ; [(RSP_0 -64 728),16] = [(RSP_0 -64 728),16]_0 ; [(RSP_0 -64 744),16] = [(RSP_0 -64 744),16]_0 ; [(RSP_0 -64 760),16] = [(RSP_0 -64 760),16]_0 ; [(RSP_0 -64 768),8] = [(RSP_0 -64 768),8]_0 ; [(RSP_0 -64 776),8] = [(RSP_0 -64 776),8]_0 ; [(RSP_0 -64 784),8] = [(RSP_0 -64 784),8]_0 ; [(RSP_0 -64 792),8] = [(RSP_0 -64 792),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000071a6"
 Separations "((RSP_0 -64 24),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 24),8) SEP (0x10000c000,8); ((RSP_0 -64 24),8) SEP (0x10000c008,8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = [(RSP_0 -64 584),8]_0 ; [(RSP_0 -64 592),8] = [(RSP_0 -64 592),8]_0 ; [(RSP_0 -64 600),8] = [(RSP_0 -64 600),8]_0 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = [(RSP_0 -64 624),8]_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 648),16] = [(RSP_0 -64 648),16]_0 ; [(RSP_0 -64 664),16] = [(RSP_0 -64 664),16]_0 ; [(RSP_0 -64 680),16] = [(RSP_0 -64 680),16]_0 ; [(RSP_0 -64 696),16] = [(RSP_0 -64 696),16]_0 ; [(RSP_0 -64 712),16] = [(RSP_0 -64 712),16]_0 ; [(RSP_0 -64 728),16] = [(RSP_0 -64 728),16]_0 ; [(RSP_0 -64 744),16] = [(RSP_0 -64 744),16]_0 ; [(RSP_0 -64 760),16] = [(RSP_0 -64 760),16]_0 ; [(RSP_0 -64 768),8] = [(RSP_0 -64 768),8]_0 ; [(RSP_0 -64 776),8] = [(RSP_0 -64 776),8]_0 ; [(RSP_0 -64 784),8] = [(RSP_0 -64 784),8]_0 ; [(RSP_0 -64 792),8] = [(RSP_0 -64 792),8]_0"
 Instruction "1000071a6: PUSH R14 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = [(RSP_0 -64 584),8]_0 ; [(RSP_0 -64 592),8] = [(RSP_0 -64 592),8]_0 ; [(RSP_0 -64 600),8] = [(RSP_0 -64 600),8]_0 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = [(RSP_0 -64 624),8]_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 648),16] = [(RSP_0 -64 648),16]_0 ; [(RSP_0 -64 664),16] = [(RSP_0 -64 664),16]_0 ; [(RSP_0 -64 680),16] = [(RSP_0 -64 680),16]_0 ; [(RSP_0 -64 696),16] = [(RSP_0 -64 696),16]_0 ; [(RSP_0 -64 712),16] = [(RSP_0 -64 712),16]_0 ; [(RSP_0 -64 728),16] = [(RSP_0 -64 728),16]_0 ; [(RSP_0 -64 744),16] = [(RSP_0 -64 744),16]_0 ; [(RSP_0 -64 760),16] = [(RSP_0 -64 760),16]_0 ; [(RSP_0 -64 768),8] = [(RSP_0 -64 768),8]_0 ; [(RSP_0 -64 776),8] = [(RSP_0 -64 776),8]_0 ; [(RSP_0 -64 784),8] = [(RSP_0 -64 784),8]_0 ; [(RSP_0 -64 792),8] = [(RSP_0 -64 792),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000071a8"
 Separations "((RSP_0 -64 32),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 32),8) SEP (0x10000c000,8); ((RSP_0 -64 32),8) SEP (0x10000c008,8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = [(RSP_0 -64 584),8]_0 ; [(RSP_0 -64 592),8] = [(RSP_0 -64 592),8]_0 ; [(RSP_0 -64 600),8] = [(RSP_0 -64 600),8]_0 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = [(RSP_0 -64 624),8]_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 648),16] = [(RSP_0 -64 648),16]_0 ; [(RSP_0 -64 664),16] = [(RSP_0 -64 664),16]_0 ; [(RSP_0 -64 680),16] = [(RSP_0 -64 680),16]_0 ; [(RSP_0 -64 696),16] = [(RSP_0 -64 696),16]_0 ; [(RSP_0 -64 712),16] = [(RSP_0 -64 712),16]_0 ; [(RSP_0 -64 728),16] = [(RSP_0 -64 728),16]_0 ; [(RSP_0 -64 744),16] = [(RSP_0 -64 744),16]_0 ; [(RSP_0 -64 760),16] = [(RSP_0 -64 760),16]_0 ; [(RSP_0 -64 768),8] = [(RSP_0 -64 768),8]_0 ; [(RSP_0 -64 776),8] = [(RSP_0 -64 776),8]_0 ; [(RSP_0 -64 784),8] = [(RSP_0 -64 784),8]_0 ; [(RSP_0 -64 792),8] = [(RSP_0 -64 792),8]_0"
 Instruction "1000071a8: PUSH R13 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = [(RSP_0 -64 584),8]_0 ; [(RSP_0 -64 592),8] = [(RSP_0 -64 592),8]_0 ; [(RSP_0 -64 600),8] = [(RSP_0 -64 600),8]_0 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = [(RSP_0 -64 624),8]_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 648),16] = [(RSP_0 -64 648),16]_0 ; [(RSP_0 -64 664),16] = [(RSP_0 -64 664),16]_0 ; [(RSP_0 -64 680),16] = [(RSP_0 -64 680),16]_0 ; [(RSP_0 -64 696),16] = [(RSP_0 -64 696),16]_0 ; [(RSP_0 -64 712),16] = [(RSP_0 -64 712),16]_0 ; [(RSP_0 -64 728),16] = [(RSP_0 -64 728),16]_0 ; [(RSP_0 -64 744),16] = [(RSP_0 -64 744),16]_0 ; [(RSP_0 -64 760),16] = [(RSP_0 -64 760),16]_0 ; [(RSP_0 -64 768),8] = [(RSP_0 -64 768),8]_0 ; [(RSP_0 -64 776),8] = [(RSP_0 -64 776),8]_0 ; [(RSP_0 -64 784),8] = [(RSP_0 -64 784),8]_0 ; [(RSP_0 -64 792),8] = [(RSP_0 -64 792),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000071aa"
 Separations "((RSP_0 -64 40),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 40),8) SEP (0x10000c000,8); ((RSP_0 -64 40),8) SEP (0x10000c008,8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = [(RSP_0 -64 584),8]_0 ; [(RSP_0 -64 592),8] = [(RSP_0 -64 592),8]_0 ; [(RSP_0 -64 600),8] = [(RSP_0 -64 600),8]_0 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = [(RSP_0 -64 624),8]_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 648),16] = [(RSP_0 -64 648),16]_0 ; [(RSP_0 -64 664),16] = [(RSP_0 -64 664),16]_0 ; [(RSP_0 -64 680),16] = [(RSP_0 -64 680),16]_0 ; [(RSP_0 -64 696),16] = [(RSP_0 -64 696),16]_0 ; [(RSP_0 -64 712),16] = [(RSP_0 -64 712),16]_0 ; [(RSP_0 -64 728),16] = [(RSP_0 -64 728),16]_0 ; [(RSP_0 -64 744),16] = [(RSP_0 -64 744),16]_0 ; [(RSP_0 -64 760),16] = [(RSP_0 -64 760),16]_0 ; [(RSP_0 -64 768),8] = [(RSP_0 -64 768),8]_0 ; [(RSP_0 -64 776),8] = [(RSP_0 -64 776),8]_0 ; [(RSP_0 -64 784),8] = [(RSP_0 -64 784),8]_0 ; [(RSP_0 -64 792),8] = [(RSP_0 -64 792),8]_0"
 Instruction "1000071aa: PUSH R12 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = [(RSP_0 -64 584),8]_0 ; [(RSP_0 -64 592),8] = [(RSP_0 -64 592),8]_0 ; [(RSP_0 -64 600),8] = [(RSP_0 -64 600),8]_0 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = [(RSP_0 -64 624),8]_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 648),16] = [(RSP_0 -64 648),16]_0 ; [(RSP_0 -64 664),16] = [(RSP_0 -64 664),16]_0 ; [(RSP_0 -64 680),16] = [(RSP_0 -64 680),16]_0 ; [(RSP_0 -64 696),16] = [(RSP_0 -64 696),16]_0 ; [(RSP_0 -64 712),16] = [(RSP_0 -64 712),16]_0 ; [(RSP_0 -64 728),16] = [(RSP_0 -64 728),16]_0 ; [(RSP_0 -64 744),16] = [(RSP_0 -64 744),16]_0 ; [(RSP_0 -64 760),16] = [(RSP_0 -64 760),16]_0 ; [(RSP_0 -64 768),8] = [(RSP_0 -64 768),8]_0 ; [(RSP_0 -64 776),8] = [(RSP_0 -64 776),8]_0 ; [(RSP_0 -64 784),8] = [(RSP_0 -64 784),8]_0 ; [(RSP_0 -64 792),8] = [(RSP_0 -64 792),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000071ac"
 Separations "((RSP_0 -64 48),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 48),8) SEP (0x10000c000,8); ((RSP_0 -64 48),8) SEP (0x10000c008,8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = [(RSP_0 -64 584),8]_0 ; [(RSP_0 -64 592),8] = [(RSP_0 -64 592),8]_0 ; [(RSP_0 -64 600),8] = [(RSP_0 -64 600),8]_0 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = [(RSP_0 -64 624),8]_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 648),16] = [(RSP_0 -64 648),16]_0 ; [(RSP_0 -64 664),16] = [(RSP_0 -64 664),16]_0 ; [(RSP_0 -64 680),16] = [(RSP_0 -64 680),16]_0 ; [(RSP_0 -64 696),16] = [(RSP_0 -64 696),16]_0 ; [(RSP_0 -64 712),16] = [(RSP_0 -64 712),16]_0 ; [(RSP_0 -64 728),16] = [(RSP_0 -64 728),16]_0 ; [(RSP_0 -64 744),16] = [(RSP_0 -64 744),16]_0 ; [(RSP_0 -64 760),16] = [(RSP_0 -64 760),16]_0 ; [(RSP_0 -64 768),8] = [(RSP_0 -64 768),8]_0 ; [(RSP_0 -64 776),8] = [(RSP_0 -64 776),8]_0 ; [(RSP_0 -64 784),8] = [(RSP_0 -64 784),8]_0 ; [(RSP_0 -64 792),8] = [(RSP_0 -64 792),8]_0"
 Instruction "1000071ac: PUSH RBX 1"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = [(RSP_0 -64 584),8]_0 ; [(RSP_0 -64 592),8] = [(RSP_0 -64 592),8]_0 ; [(RSP_0 -64 600),8] = [(RSP_0 -64 600),8]_0 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = [(RSP_0 -64 624),8]_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 648),16] = [(RSP_0 -64 648),16]_0 ; [(RSP_0 -64 664),16] = [(RSP_0 -64 664),16]_0 ; [(RSP_0 -64 680),16] = [(RSP_0 -64 680),16]_0 ; [(RSP_0 -64 696),16] = [(RSP_0 -64 696),16]_0 ; [(RSP_0 -64 712),16] = [(RSP_0 -64 712),16]_0 ; [(RSP_0 -64 728),16] = [(RSP_0 -64 728),16]_0 ; [(RSP_0 -64 744),16] = [(RSP_0 -64 744),16]_0 ; [(RSP_0 -64 760),16] = [(RSP_0 -64 760),16]_0 ; [(RSP_0 -64 768),8] = [(RSP_0 -64 768),8]_0 ; [(RSP_0 -64 776),8] = [(RSP_0 -64 776),8]_0 ; [(RSP_0 -64 784),8] = [(RSP_0 -64 784),8]_0 ; [(RSP_0 -64 792),8] = [(RSP_0 -64 792),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000071ad"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = [(RSP_0 -64 584),8]_0 ; [(RSP_0 -64 592),8] = [(RSP_0 -64 592),8]_0 ; [(RSP_0 -64 600),8] = [(RSP_0 -64 600),8]_0 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = [(RSP_0 -64 624),8]_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 648),16] = [(RSP_0 -64 648),16]_0 ; [(RSP_0 -64 664),16] = [(RSP_0 -64 664),16]_0 ; [(RSP_0 -64 680),16] = [(RSP_0 -64 680),16]_0 ; [(RSP_0 -64 696),16] = [(RSP_0 -64 696),16]_0 ; [(RSP_0 -64 712),16] = [(RSP_0 -64 712),16]_0 ; [(RSP_0 -64 728),16] = [(RSP_0 -64 728),16]_0 ; [(RSP_0 -64 744),16] = [(RSP_0 -64 744),16]_0 ; [(RSP_0 -64 760),16] = [(RSP_0 -64 760),16]_0 ; [(RSP_0 -64 768),8] = [(RSP_0 -64 768),8]_0 ; [(RSP_0 -64 776),8] = [(RSP_0 -64 776),8]_0 ; [(RSP_0 -64 784),8] = [(RSP_0 -64 784),8]_0 ; [(RSP_0 -64 792),8] = [(RSP_0 -64 792),8]_0"
 Instruction "1000071ad: SUB RSP, 760 7"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = [(RSP_0 -64 584),8]_0 ; [(RSP_0 -64 592),8] = [(RSP_0 -64 592),8]_0 ; [(RSP_0 -64 600),8] = [(RSP_0 -64 600),8]_0 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = [(RSP_0 -64 624),8]_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 648),16] = [(RSP_0 -64 648),16]_0 ; [(RSP_0 -64 664),16] = [(RSP_0 -64 664),16]_0 ; [(RSP_0 -64 680),16] = [(RSP_0 -64 680),16]_0 ; [(RSP_0 -64 696),16] = [(RSP_0 -64 696),16]_0 ; [(RSP_0 -64 712),16] = [(RSP_0 -64 712),16]_0 ; [(RSP_0 -64 728),16] = [(RSP_0 -64 728),16]_0 ; [(RSP_0 -64 744),16] = [(RSP_0 -64 744),16]_0 ; [(RSP_0 -64 760),16] = [(RSP_0 -64 760),16]_0 ; [(RSP_0 -64 768),8] = [(RSP_0 -64 768),8]_0 ; [(RSP_0 -64 776),8] = [(RSP_0 -64 776),8]_0 ; [(RSP_0 -64 784),8] = [(RSP_0 -64 784),8]_0 ; [(RSP_0 -64 792),8] = [(RSP_0 -64 792),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000071b4"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = [(RSP_0 -64 584),8]_0 ; [(RSP_0 -64 592),8] = [(RSP_0 -64 592),8]_0 ; [(RSP_0 -64 600),8] = [(RSP_0 -64 600),8]_0 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = [(RSP_0 -64 624),8]_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 648),16] = [(RSP_0 -64 648),16]_0 ; [(RSP_0 -64 664),16] = [(RSP_0 -64 664),16]_0 ; [(RSP_0 -64 680),16] = [(RSP_0 -64 680),16]_0 ; [(RSP_0 -64 696),16] = [(RSP_0 -64 696),16]_0 ; [(RSP_0 -64 712),16] = [(RSP_0 -64 712),16]_0 ; [(RSP_0 -64 728),16] = [(RSP_0 -64 728),16]_0 ; [(RSP_0 -64 744),16] = [(RSP_0 -64 744),16]_0 ; [(RSP_0 -64 760),16] = [(RSP_0 -64 760),16]_0 ; [(RSP_0 -64 768),8] = [(RSP_0 -64 768),8]_0 ; [(RSP_0 -64 776),8] = [(RSP_0 -64 776),8]_0 ; [(RSP_0 -64 784),8] = [(RSP_0 -64 784),8]_0 ; [(RSP_0 -64 792),8] = [(RSP_0 -64 792),8]_0"
 Instruction "1000071b4: MOV R14, RSI 3"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = [(RSP_0 -64 584),8]_0 ; [(RSP_0 -64 592),8] = [(RSP_0 -64 592),8]_0 ; [(RSP_0 -64 600),8] = [(RSP_0 -64 600),8]_0 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = [(RSP_0 -64 624),8]_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 648),16] = [(RSP_0 -64 648),16]_0 ; [(RSP_0 -64 664),16] = [(RSP_0 -64 664),16]_0 ; [(RSP_0 -64 680),16] = [(RSP_0 -64 680),16]_0 ; [(RSP_0 -64 696),16] = [(RSP_0 -64 696),16]_0 ; [(RSP_0 -64 712),16] = [(RSP_0 -64 712),16]_0 ; [(RSP_0 -64 728),16] = [(RSP_0 -64 728),16]_0 ; [(RSP_0 -64 744),16] = [(RSP_0 -64 744),16]_0 ; [(RSP_0 -64 760),16] = [(RSP_0 -64 760),16]_0 ; [(RSP_0 -64 768),8] = [(RSP_0 -64 768),8]_0 ; [(RSP_0 -64 776),8] = [(RSP_0 -64 776),8]_0 ; [(RSP_0 -64 784),8] = [(RSP_0 -64 784),8]_0 ; [(RSP_0 -64 792),8] = [(RSP_0 -64 792),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000071b7"
 Separations "((RSP_0 -64 624),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 624),8) SEP (0x10000c000,8); ((RSP_0 -64 624),8) SEP (0x10000c008,8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = [(RSP_0 -64 584),8]_0 ; [(RSP_0 -64 592),8] = [(RSP_0 -64 592),8]_0 ; [(RSP_0 -64 600),8] = [(RSP_0 -64 600),8]_0 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = [(RSP_0 -64 624),8]_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 648),16] = [(RSP_0 -64 648),16]_0 ; [(RSP_0 -64 664),16] = [(RSP_0 -64 664),16]_0 ; [(RSP_0 -64 680),16] = [(RSP_0 -64 680),16]_0 ; [(RSP_0 -64 696),16] = [(RSP_0 -64 696),16]_0 ; [(RSP_0 -64 712),16] = [(RSP_0 -64 712),16]_0 ; [(RSP_0 -64 728),16] = [(RSP_0 -64 728),16]_0 ; [(RSP_0 -64 744),16] = [(RSP_0 -64 744),16]_0 ; [(RSP_0 -64 760),16] = [(RSP_0 -64 760),16]_0 ; [(RSP_0 -64 768),8] = [(RSP_0 -64 768),8]_0 ; [(RSP_0 -64 776),8] = [(RSP_0 -64 776),8]_0 ; [(RSP_0 -64 784),8] = [(RSP_0 -64 784),8]_0 ; [(RSP_0 -64 792),8] = [(RSP_0 -64 792),8]_0"
 Instruction "1000071b7: MOV QWORD PTR [RBP - 616], RDI 7"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = [(RSP_0 -64 584),8]_0 ; [(RSP_0 -64 592),8] = [(RSP_0 -64 592),8]_0 ; [(RSP_0 -64 600),8] = [(RSP_0 -64 600),8]_0 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 648),16] = [(RSP_0 -64 648),16]_0 ; [(RSP_0 -64 664),16] = [(RSP_0 -64 664),16]_0 ; [(RSP_0 -64 680),16] = [(RSP_0 -64 680),16]_0 ; [(RSP_0 -64 696),16] = [(RSP_0 -64 696),16]_0 ; [(RSP_0 -64 712),16] = [(RSP_0 -64 712),16]_0 ; [(RSP_0 -64 728),16] = [(RSP_0 -64 728),16]_0 ; [(RSP_0 -64 744),16] = [(RSP_0 -64 744),16]_0 ; [(RSP_0 -64 760),16] = [(RSP_0 -64 760),16]_0 ; [(RSP_0 -64 768),8] = [(RSP_0 -64 768),8]_0 ; [(RSP_0 -64 776),8] = [(RSP_0 -64 776),8]_0 ; [(RSP_0 -64 784),8] = [(RSP_0 -64 784),8]_0 ; [(RSP_0 -64 792),8] = [(RSP_0 -64 792),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000071be"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = [(RSP_0 -64 584),8]_0 ; [(RSP_0 -64 592),8] = [(RSP_0 -64 592),8]_0 ; [(RSP_0 -64 600),8] = [(RSP_0 -64 600),8]_0 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 648),16] = [(RSP_0 -64 648),16]_0 ; [(RSP_0 -64 664),16] = [(RSP_0 -64 664),16]_0 ; [(RSP_0 -64 680),16] = [(RSP_0 -64 680),16]_0 ; [(RSP_0 -64 696),16] = [(RSP_0 -64 696),16]_0 ; [(RSP_0 -64 712),16] = [(RSP_0 -64 712),16]_0 ; [(RSP_0 -64 728),16] = [(RSP_0 -64 728),16]_0 ; [(RSP_0 -64 744),16] = [(RSP_0 -64 744),16]_0 ; [(RSP_0 -64 760),16] = [(RSP_0 -64 760),16]_0 ; [(RSP_0 -64 768),8] = [(RSP_0 -64 768),8]_0 ; [(RSP_0 -64 776),8] = [(RSP_0 -64 776),8]_0 ; [(RSP_0 -64 784),8] = [(RSP_0 -64 784),8]_0 ; [(RSP_0 -64 792),8] = [(RSP_0 -64 792),8]_0"
 Instruction "1000071be: TEST AL, AL 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = [(RSP_0 -64 584),8]_0 ; [(RSP_0 -64 592),8] = [(RSP_0 -64 592),8]_0 ; [(RSP_0 -64 600),8] = [(RSP_0 -64 600),8]_0 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 648),16] = [(RSP_0 -64 648),16]_0 ; [(RSP_0 -64 664),16] = [(RSP_0 -64 664),16]_0 ; [(RSP_0 -64 680),16] = [(RSP_0 -64 680),16]_0 ; [(RSP_0 -64 696),16] = [(RSP_0 -64 696),16]_0 ; [(RSP_0 -64 712),16] = [(RSP_0 -64 712),16]_0 ; [(RSP_0 -64 728),16] = [(RSP_0 -64 728),16]_0 ; [(RSP_0 -64 744),16] = [(RSP_0 -64 744),16]_0 ; [(RSP_0 -64 760),16] = [(RSP_0 -64 760),16]_0 ; [(RSP_0 -64 768),8] = [(RSP_0 -64 768),8]_0 ; [(RSP_0 -64 776),8] = [(RSP_0 -64 776),8]_0 ; [(RSP_0 -64 784),8] = [(RSP_0 -64 784),8]_0 ; [(RSP_0 -64 792),8] = [(RSP_0 -64 792),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000071c0"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = [(RSP_0 -64 584),8]_0 ; [(RSP_0 -64 592),8] = [(RSP_0 -64 592),8]_0 ; [(RSP_0 -64 600),8] = [(RSP_0 -64 600),8]_0 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 648),16] = [(RSP_0 -64 648),16]_0 ; [(RSP_0 -64 664),16] = [(RSP_0 -64 664),16]_0 ; [(RSP_0 -64 680),16] = [(RSP_0 -64 680),16]_0 ; [(RSP_0 -64 696),16] = [(RSP_0 -64 696),16]_0 ; [(RSP_0 -64 712),16] = [(RSP_0 -64 712),16]_0 ; [(RSP_0 -64 728),16] = [(RSP_0 -64 728),16]_0 ; [(RSP_0 -64 744),16] = [(RSP_0 -64 744),16]_0 ; [(RSP_0 -64 760),16] = [(RSP_0 -64 760),16]_0 ; [(RSP_0 -64 768),8] = [(RSP_0 -64 768),8]_0 ; [(RSP_0 -64 776),8] = [(RSP_0 -64 776),8]_0 ; [(RSP_0 -64 784),8] = [(RSP_0 -64 784),8]_0 ; [(RSP_0 -64 792),8] = [(RSP_0 -64 792),8]_0"
 Instruction "1000071c0: JE 4294996474 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = [(RSP_0 -64 584),8]_0 ; [(RSP_0 -64 592),8] = [(RSP_0 -64 592),8]_0 ; [(RSP_0 -64 600),8] = [(RSP_0 -64 600),8]_0 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 648),16] = [(RSP_0 -64 648),16]_0 ; [(RSP_0 -64 664),16] = [(RSP_0 -64 664),16]_0 ; [(RSP_0 -64 680),16] = [(RSP_0 -64 680),16]_0 ; [(RSP_0 -64 696),16] = [(RSP_0 -64 696),16]_0 ; [(RSP_0 -64 712),16] = [(RSP_0 -64 712),16]_0 ; [(RSP_0 -64 728),16] = [(RSP_0 -64 728),16]_0 ; [(RSP_0 -64 744),16] = [(RSP_0 -64 744),16]_0 ; [(RSP_0 -64 760),16] = [(RSP_0 -64 760),16]_0 ; [(RSP_0 -64 768),8] = [(RSP_0 -64 768),8]_0 ; [(RSP_0 -64 776),8] = [(RSP_0 -64 776),8]_0 ; [(RSP_0 -64 784),8] = [(RSP_0 -64 784),8]_0 ; [(RSP_0 -64 792),8] = [(RSP_0 -64 792),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 1000071a0, blockId == 1 ##
#####################################
*)

htriple "ht_1000071c2"
 Separations "((RSP_0 -64 760),16) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 760),16) SEP (0x10000c000,8); ((RSP_0 -64 760),16) SEP (0x10000c008,8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = [(RSP_0 -64 584),8]_0 ; [(RSP_0 -64 592),8] = [(RSP_0 -64 592),8]_0 ; [(RSP_0 -64 600),8] = [(RSP_0 -64 600),8]_0 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 648),16] = [(RSP_0 -64 648),16]_0 ; [(RSP_0 -64 664),16] = [(RSP_0 -64 664),16]_0 ; [(RSP_0 -64 680),16] = [(RSP_0 -64 680),16]_0 ; [(RSP_0 -64 696),16] = [(RSP_0 -64 696),16]_0 ; [(RSP_0 -64 712),16] = [(RSP_0 -64 712),16]_0 ; [(RSP_0 -64 728),16] = [(RSP_0 -64 728),16]_0 ; [(RSP_0 -64 744),16] = [(RSP_0 -64 744),16]_0 ; [(RSP_0 -64 760),16] = [(RSP_0 -64 760),16]_0 ; [(RSP_0 -64 768),8] = [(RSP_0 -64 768),8]_0 ; [(RSP_0 -64 776),8] = [(RSP_0 -64 776),8]_0 ; [(RSP_0 -64 784),8] = [(RSP_0 -64 784),8]_0 ; [(RSP_0 -64 792),8] = [(RSP_0 -64 792),8]_0"
 Instruction "1000071c2: MOVAPS XMMWORD PTR [RBP - 752], XMM0 7"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = [(RSP_0 -64 584),8]_0 ; [(RSP_0 -64 592),8] = [(RSP_0 -64 592),8]_0 ; [(RSP_0 -64 600),8] = [(RSP_0 -64 600),8]_0 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 648),16] = [(RSP_0 -64 648),16]_0 ; [(RSP_0 -64 664),16] = [(RSP_0 -64 664),16]_0 ; [(RSP_0 -64 680),16] = [(RSP_0 -64 680),16]_0 ; [(RSP_0 -64 696),16] = [(RSP_0 -64 696),16]_0 ; [(RSP_0 -64 712),16] = [(RSP_0 -64 712),16]_0 ; [(RSP_0 -64 728),16] = [(RSP_0 -64 728),16]_0 ; [(RSP_0 -64 744),16] = [(RSP_0 -64 744),16]_0 ; [(RSP_0 -64 768),8] = [(RSP_0 -64 768),8]_0 ; [(RSP_0 -64 776),8] = [(RSP_0 -64 776),8]_0 ; [(RSP_0 -64 784),8] = [(RSP_0 -64 784),8]_0 ; [(RSP_0 -64 792),8] = [(RSP_0 -64 792),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000071c9"
 Separations "((RSP_0 -64 744),16) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 744),16) SEP (0x10000c000,8); ((RSP_0 -64 744),16) SEP (0x10000c008,8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = [(RSP_0 -64 584),8]_0 ; [(RSP_0 -64 592),8] = [(RSP_0 -64 592),8]_0 ; [(RSP_0 -64 600),8] = [(RSP_0 -64 600),8]_0 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 648),16] = [(RSP_0 -64 648),16]_0 ; [(RSP_0 -64 664),16] = [(RSP_0 -64 664),16]_0 ; [(RSP_0 -64 680),16] = [(RSP_0 -64 680),16]_0 ; [(RSP_0 -64 696),16] = [(RSP_0 -64 696),16]_0 ; [(RSP_0 -64 712),16] = [(RSP_0 -64 712),16]_0 ; [(RSP_0 -64 728),16] = [(RSP_0 -64 728),16]_0 ; [(RSP_0 -64 744),16] = [(RSP_0 -64 744),16]_0 ; [(RSP_0 -64 768),8] = [(RSP_0 -64 768),8]_0 ; [(RSP_0 -64 776),8] = [(RSP_0 -64 776),8]_0 ; [(RSP_0 -64 784),8] = [(RSP_0 -64 784),8]_0 ; [(RSP_0 -64 792),8] = [(RSP_0 -64 792),8]_0"
 Instruction "1000071c9: MOVAPS XMMWORD PTR [RBP - 736], XMM1 7"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = [(RSP_0 -64 584),8]_0 ; [(RSP_0 -64 592),8] = [(RSP_0 -64 592),8]_0 ; [(RSP_0 -64 600),8] = [(RSP_0 -64 600),8]_0 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 648),16] = [(RSP_0 -64 648),16]_0 ; [(RSP_0 -64 664),16] = [(RSP_0 -64 664),16]_0 ; [(RSP_0 -64 680),16] = [(RSP_0 -64 680),16]_0 ; [(RSP_0 -64 696),16] = [(RSP_0 -64 696),16]_0 ; [(RSP_0 -64 712),16] = [(RSP_0 -64 712),16]_0 ; [(RSP_0 -64 728),16] = [(RSP_0 -64 728),16]_0 ; [(RSP_0 -64 768),8] = [(RSP_0 -64 768),8]_0 ; [(RSP_0 -64 776),8] = [(RSP_0 -64 776),8]_0 ; [(RSP_0 -64 784),8] = [(RSP_0 -64 784),8]_0 ; [(RSP_0 -64 792),8] = [(RSP_0 -64 792),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000071d0"
 Separations "((RSP_0 -64 728),16) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 728),16) SEP (0x10000c000,8); ((RSP_0 -64 728),16) SEP (0x10000c008,8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = [(RSP_0 -64 584),8]_0 ; [(RSP_0 -64 592),8] = [(RSP_0 -64 592),8]_0 ; [(RSP_0 -64 600),8] = [(RSP_0 -64 600),8]_0 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 648),16] = [(RSP_0 -64 648),16]_0 ; [(RSP_0 -64 664),16] = [(RSP_0 -64 664),16]_0 ; [(RSP_0 -64 680),16] = [(RSP_0 -64 680),16]_0 ; [(RSP_0 -64 696),16] = [(RSP_0 -64 696),16]_0 ; [(RSP_0 -64 712),16] = [(RSP_0 -64 712),16]_0 ; [(RSP_0 -64 728),16] = [(RSP_0 -64 728),16]_0 ; [(RSP_0 -64 768),8] = [(RSP_0 -64 768),8]_0 ; [(RSP_0 -64 776),8] = [(RSP_0 -64 776),8]_0 ; [(RSP_0 -64 784),8] = [(RSP_0 -64 784),8]_0 ; [(RSP_0 -64 792),8] = [(RSP_0 -64 792),8]_0"
 Instruction "1000071d0: MOVAPS XMMWORD PTR [RBP - 720], XMM2 7"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = [(RSP_0 -64 584),8]_0 ; [(RSP_0 -64 592),8] = [(RSP_0 -64 592),8]_0 ; [(RSP_0 -64 600),8] = [(RSP_0 -64 600),8]_0 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 648),16] = [(RSP_0 -64 648),16]_0 ; [(RSP_0 -64 664),16] = [(RSP_0 -64 664),16]_0 ; [(RSP_0 -64 680),16] = [(RSP_0 -64 680),16]_0 ; [(RSP_0 -64 696),16] = [(RSP_0 -64 696),16]_0 ; [(RSP_0 -64 712),16] = [(RSP_0 -64 712),16]_0 ; [(RSP_0 -64 768),8] = [(RSP_0 -64 768),8]_0 ; [(RSP_0 -64 776),8] = [(RSP_0 -64 776),8]_0 ; [(RSP_0 -64 784),8] = [(RSP_0 -64 784),8]_0 ; [(RSP_0 -64 792),8] = [(RSP_0 -64 792),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000071d7"
 Separations "((RSP_0 -64 712),16) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 712),16) SEP (0x10000c000,8); ((RSP_0 -64 712),16) SEP (0x10000c008,8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = [(RSP_0 -64 584),8]_0 ; [(RSP_0 -64 592),8] = [(RSP_0 -64 592),8]_0 ; [(RSP_0 -64 600),8] = [(RSP_0 -64 600),8]_0 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 648),16] = [(RSP_0 -64 648),16]_0 ; [(RSP_0 -64 664),16] = [(RSP_0 -64 664),16]_0 ; [(RSP_0 -64 680),16] = [(RSP_0 -64 680),16]_0 ; [(RSP_0 -64 696),16] = [(RSP_0 -64 696),16]_0 ; [(RSP_0 -64 712),16] = [(RSP_0 -64 712),16]_0 ; [(RSP_0 -64 768),8] = [(RSP_0 -64 768),8]_0 ; [(RSP_0 -64 776),8] = [(RSP_0 -64 776),8]_0 ; [(RSP_0 -64 784),8] = [(RSP_0 -64 784),8]_0 ; [(RSP_0 -64 792),8] = [(RSP_0 -64 792),8]_0"
 Instruction "1000071d7: MOVAPS XMMWORD PTR [RBP - 704], XMM3 7"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = [(RSP_0 -64 584),8]_0 ; [(RSP_0 -64 592),8] = [(RSP_0 -64 592),8]_0 ; [(RSP_0 -64 600),8] = [(RSP_0 -64 600),8]_0 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 648),16] = [(RSP_0 -64 648),16]_0 ; [(RSP_0 -64 664),16] = [(RSP_0 -64 664),16]_0 ; [(RSP_0 -64 680),16] = [(RSP_0 -64 680),16]_0 ; [(RSP_0 -64 696),16] = [(RSP_0 -64 696),16]_0 ; [(RSP_0 -64 768),8] = [(RSP_0 -64 768),8]_0 ; [(RSP_0 -64 776),8] = [(RSP_0 -64 776),8]_0 ; [(RSP_0 -64 784),8] = [(RSP_0 -64 784),8]_0 ; [(RSP_0 -64 792),8] = [(RSP_0 -64 792),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000071de"
 Separations "((RSP_0 -64 696),16) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 696),16) SEP (0x10000c000,8); ((RSP_0 -64 696),16) SEP (0x10000c008,8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = [(RSP_0 -64 584),8]_0 ; [(RSP_0 -64 592),8] = [(RSP_0 -64 592),8]_0 ; [(RSP_0 -64 600),8] = [(RSP_0 -64 600),8]_0 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 648),16] = [(RSP_0 -64 648),16]_0 ; [(RSP_0 -64 664),16] = [(RSP_0 -64 664),16]_0 ; [(RSP_0 -64 680),16] = [(RSP_0 -64 680),16]_0 ; [(RSP_0 -64 696),16] = [(RSP_0 -64 696),16]_0 ; [(RSP_0 -64 768),8] = [(RSP_0 -64 768),8]_0 ; [(RSP_0 -64 776),8] = [(RSP_0 -64 776),8]_0 ; [(RSP_0 -64 784),8] = [(RSP_0 -64 784),8]_0 ; [(RSP_0 -64 792),8] = [(RSP_0 -64 792),8]_0"
 Instruction "1000071de: MOVAPS XMMWORD PTR [RBP - 688], XMM4 7"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = [(RSP_0 -64 584),8]_0 ; [(RSP_0 -64 592),8] = [(RSP_0 -64 592),8]_0 ; [(RSP_0 -64 600),8] = [(RSP_0 -64 600),8]_0 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 648),16] = [(RSP_0 -64 648),16]_0 ; [(RSP_0 -64 664),16] = [(RSP_0 -64 664),16]_0 ; [(RSP_0 -64 680),16] = [(RSP_0 -64 680),16]_0 ; [(RSP_0 -64 768),8] = [(RSP_0 -64 768),8]_0 ; [(RSP_0 -64 776),8] = [(RSP_0 -64 776),8]_0 ; [(RSP_0 -64 784),8] = [(RSP_0 -64 784),8]_0 ; [(RSP_0 -64 792),8] = [(RSP_0 -64 792),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000071e5"
 Separations "((RSP_0 -64 680),16) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 680),16) SEP (0x10000c000,8); ((RSP_0 -64 680),16) SEP (0x10000c008,8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = [(RSP_0 -64 584),8]_0 ; [(RSP_0 -64 592),8] = [(RSP_0 -64 592),8]_0 ; [(RSP_0 -64 600),8] = [(RSP_0 -64 600),8]_0 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 648),16] = [(RSP_0 -64 648),16]_0 ; [(RSP_0 -64 664),16] = [(RSP_0 -64 664),16]_0 ; [(RSP_0 -64 680),16] = [(RSP_0 -64 680),16]_0 ; [(RSP_0 -64 768),8] = [(RSP_0 -64 768),8]_0 ; [(RSP_0 -64 776),8] = [(RSP_0 -64 776),8]_0 ; [(RSP_0 -64 784),8] = [(RSP_0 -64 784),8]_0 ; [(RSP_0 -64 792),8] = [(RSP_0 -64 792),8]_0"
 Instruction "1000071e5: MOVAPS XMMWORD PTR [RBP - 672], XMM5 7"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = [(RSP_0 -64 584),8]_0 ; [(RSP_0 -64 592),8] = [(RSP_0 -64 592),8]_0 ; [(RSP_0 -64 600),8] = [(RSP_0 -64 600),8]_0 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 648),16] = [(RSP_0 -64 648),16]_0 ; [(RSP_0 -64 664),16] = [(RSP_0 -64 664),16]_0 ; [(RSP_0 -64 768),8] = [(RSP_0 -64 768),8]_0 ; [(RSP_0 -64 776),8] = [(RSP_0 -64 776),8]_0 ; [(RSP_0 -64 784),8] = [(RSP_0 -64 784),8]_0 ; [(RSP_0 -64 792),8] = [(RSP_0 -64 792),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000071ec"
 Separations "((RSP_0 -64 664),16) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 664),16) SEP (0x10000c000,8); ((RSP_0 -64 664),16) SEP (0x10000c008,8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = [(RSP_0 -64 584),8]_0 ; [(RSP_0 -64 592),8] = [(RSP_0 -64 592),8]_0 ; [(RSP_0 -64 600),8] = [(RSP_0 -64 600),8]_0 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 648),16] = [(RSP_0 -64 648),16]_0 ; [(RSP_0 -64 664),16] = [(RSP_0 -64 664),16]_0 ; [(RSP_0 -64 768),8] = [(RSP_0 -64 768),8]_0 ; [(RSP_0 -64 776),8] = [(RSP_0 -64 776),8]_0 ; [(RSP_0 -64 784),8] = [(RSP_0 -64 784),8]_0 ; [(RSP_0 -64 792),8] = [(RSP_0 -64 792),8]_0"
 Instruction "1000071ec: MOVAPS XMMWORD PTR [RBP - 656], XMM6 7"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = [(RSP_0 -64 584),8]_0 ; [(RSP_0 -64 592),8] = [(RSP_0 -64 592),8]_0 ; [(RSP_0 -64 600),8] = [(RSP_0 -64 600),8]_0 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 648),16] = [(RSP_0 -64 648),16]_0 ; [(RSP_0 -64 768),8] = [(RSP_0 -64 768),8]_0 ; [(RSP_0 -64 776),8] = [(RSP_0 -64 776),8]_0 ; [(RSP_0 -64 784),8] = [(RSP_0 -64 784),8]_0 ; [(RSP_0 -64 792),8] = [(RSP_0 -64 792),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000071f3"
 Separations "((RSP_0 -64 648),16) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 648),16) SEP (0x10000c000,8); ((RSP_0 -64 648),16) SEP (0x10000c008,8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = [(RSP_0 -64 584),8]_0 ; [(RSP_0 -64 592),8] = [(RSP_0 -64 592),8]_0 ; [(RSP_0 -64 600),8] = [(RSP_0 -64 600),8]_0 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 648),16] = [(RSP_0 -64 648),16]_0 ; [(RSP_0 -64 768),8] = [(RSP_0 -64 768),8]_0 ; [(RSP_0 -64 776),8] = [(RSP_0 -64 776),8]_0 ; [(RSP_0 -64 784),8] = [(RSP_0 -64 784),8]_0 ; [(RSP_0 -64 792),8] = [(RSP_0 -64 792),8]_0"
 Instruction "1000071f3: MOVAPS XMMWORD PTR [RBP - 640], XMM7 7"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = [(RSP_0 -64 584),8]_0 ; [(RSP_0 -64 592),8] = [(RSP_0 -64 592),8]_0 ; [(RSP_0 -64 600),8] = [(RSP_0 -64 600),8]_0 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = [(RSP_0 -64 768),8]_0 ; [(RSP_0 -64 776),8] = [(RSP_0 -64 776),8]_0 ; [(RSP_0 -64 784),8] = [(RSP_0 -64 784),8]_0 ; [(RSP_0 -64 792),8] = [(RSP_0 -64 792),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 1000071a0, blockId == 2 ##
#####################################
*)

htriple "ht_1000071fa"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = [(RSP_0 -64 584),8]_0 ; [(RSP_0 -64 592),8] = [(RSP_0 -64 592),8]_0 ; [(RSP_0 -64 600),8] = [(RSP_0 -64 600),8]_0 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = [(RSP_0 -64 768),8]_0 ; [(RSP_0 -64 776),8] = [(RSP_0 -64 776),8]_0 ; [(RSP_0 -64 784),8] = [(RSP_0 -64 784),8]_0 ; [(RSP_0 -64 792),8] = [(RSP_0 -64 792),8]_0"
 Instruction "1000071fa: LEA RSI, [RBP - 800] 7"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = (RSP_0 -64 808) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = [(RSP_0 -64 584),8]_0 ; [(RSP_0 -64 592),8] = [(RSP_0 -64 592),8]_0 ; [(RSP_0 -64 600),8] = [(RSP_0 -64 600),8]_0 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = [(RSP_0 -64 768),8]_0 ; [(RSP_0 -64 776),8] = [(RSP_0 -64 776),8]_0 ; [(RSP_0 -64 784),8] = [(RSP_0 -64 784),8]_0 ; [(RSP_0 -64 792),8] = [(RSP_0 -64 792),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007201"
 Separations "((RSP_0 -64 792),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 792),8) SEP (0x10000c000,8); ((RSP_0 -64 792),8) SEP (0x10000c008,8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = (RSP_0 -64 808) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = [(RSP_0 -64 584),8]_0 ; [(RSP_0 -64 592),8] = [(RSP_0 -64 592),8]_0 ; [(RSP_0 -64 600),8] = [(RSP_0 -64 600),8]_0 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = [(RSP_0 -64 768),8]_0 ; [(RSP_0 -64 776),8] = [(RSP_0 -64 776),8]_0 ; [(RSP_0 -64 784),8] = [(RSP_0 -64 784),8]_0 ; [(RSP_0 -64 792),8] = [(RSP_0 -64 792),8]_0"
 Instruction "100007201: MOV QWORD PTR [RSI + 16], RDX 4"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = (RSP_0 -64 808) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = [(RSP_0 -64 584),8]_0 ; [(RSP_0 -64 592),8] = [(RSP_0 -64 592),8]_0 ; [(RSP_0 -64 600),8] = [(RSP_0 -64 600),8]_0 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = [(RSP_0 -64 768),8]_0 ; [(RSP_0 -64 776),8] = [(RSP_0 -64 776),8]_0 ; [(RSP_0 -64 784),8] = [(RSP_0 -64 784),8]_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007205"
 Separations "((RSP_0 -64 784),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 784),8) SEP (0x10000c000,8); ((RSP_0 -64 784),8) SEP (0x10000c008,8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = (RSP_0 -64 808) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = [(RSP_0 -64 584),8]_0 ; [(RSP_0 -64 592),8] = [(RSP_0 -64 592),8]_0 ; [(RSP_0 -64 600),8] = [(RSP_0 -64 600),8]_0 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = [(RSP_0 -64 768),8]_0 ; [(RSP_0 -64 776),8] = [(RSP_0 -64 776),8]_0 ; [(RSP_0 -64 784),8] = [(RSP_0 -64 784),8]_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "100007205: MOV QWORD PTR [RSI + 24], RCX 4"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = (RSP_0 -64 808) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = [(RSP_0 -64 584),8]_0 ; [(RSP_0 -64 592),8] = [(RSP_0 -64 592),8]_0 ; [(RSP_0 -64 600),8] = [(RSP_0 -64 600),8]_0 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = [(RSP_0 -64 768),8]_0 ; [(RSP_0 -64 776),8] = [(RSP_0 -64 776),8]_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007209"
 Separations "((RSP_0 -64 776),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 776),8) SEP (0x10000c000,8); ((RSP_0 -64 776),8) SEP (0x10000c008,8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = (RSP_0 -64 808) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = [(RSP_0 -64 584),8]_0 ; [(RSP_0 -64 592),8] = [(RSP_0 -64 592),8]_0 ; [(RSP_0 -64 600),8] = [(RSP_0 -64 600),8]_0 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = [(RSP_0 -64 768),8]_0 ; [(RSP_0 -64 776),8] = [(RSP_0 -64 776),8]_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "100007209: MOV QWORD PTR [RSI + 32], R8 4"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = (RSP_0 -64 808) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = [(RSP_0 -64 584),8]_0 ; [(RSP_0 -64 592),8] = [(RSP_0 -64 592),8]_0 ; [(RSP_0 -64 600),8] = [(RSP_0 -64 600),8]_0 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = [(RSP_0 -64 768),8]_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000720d"
 Separations "((RSP_0 -64 768),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 768),8) SEP (0x10000c000,8); ((RSP_0 -64 768),8) SEP (0x10000c008,8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = (RSP_0 -64 808) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = [(RSP_0 -64 584),8]_0 ; [(RSP_0 -64 592),8] = [(RSP_0 -64 592),8]_0 ; [(RSP_0 -64 600),8] = [(RSP_0 -64 600),8]_0 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = [(RSP_0 -64 768),8]_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "10000720d: MOV QWORD PTR [RSI + 40], R9 4"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = (RSP_0 -64 808) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = [(RSP_0 -64 584),8]_0 ; [(RSP_0 -64 592),8] = [(RSP_0 -64 592),8]_0 ; [(RSP_0 -64 600),8] = [(RSP_0 -64 600),8]_0 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007211"
 Separations "(0x10000c008,8) SEP (RSP_0,8); (0x10000c008,8) SEP ([0x10000c008,8]_0,8); (0x10000c008,8) SEP ((RSP_0 -64 8),8); (0x10000c008,8) SEP ((RSP_0 -64 16),8); (0x10000c008,8) SEP ((RSP_0 -64 24),8); (0x10000c008,8) SEP ((RSP_0 -64 32),8); (0x10000c008,8) SEP ((RSP_0 -64 40),8); (0x10000c008,8) SEP ((RSP_0 -64 48),8); (0x10000c008,8) SEP ((RSP_0 -64 56),8); (0x10000c008,8) SEP ((RSP_0 -64 568),1); (0x10000c008,8) SEP ((RSP_0 -64 584),8); (0x10000c008,8) SEP ((RSP_0 -64 592),8); (0x10000c008,8) SEP ((RSP_0 -64 600),8); (0x10000c008,8) SEP ((RSP_0 -64 604),4); (0x10000c008,8) SEP ((RSP_0 -64 612),4); (0x10000c008,8) SEP ((RSP_0 -64 624),8); (0x10000c008,8) SEP ((RSP_0 -64 632),8); (0x10000c008,8) SEP ((RSP_0 -64 648),16); (0x10000c008,8) SEP ((RSP_0 -64 664),16); (0x10000c008,8) SEP ((RSP_0 -64 680),16); (0x10000c008,8) SEP ((RSP_0 -64 696),16); (0x10000c008,8) SEP ((RSP_0 -64 712),16); (0x10000c008,8) SEP ((RSP_0 -64 728),16); (0x10000c008,8) SEP ((RSP_0 -64 744),16); (0x10000c008,8) SEP ((RSP_0 -64 760),16); (0x10000c008,8) SEP ((RSP_0 -64 768),8); (0x10000c008,8) SEP ((RSP_0 -64 776),8); (0x10000c008,8) SEP ((RSP_0 -64 784),8); (0x10000c008,8) SEP ((RSP_0 -64 792),8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = (RSP_0 -64 808) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = [(RSP_0 -64 584),8]_0 ; [(RSP_0 -64 592),8] = [(RSP_0 -64 592),8]_0 ; [(RSP_0 -64 600),8] = [(RSP_0 -64 600),8]_0 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "100007211: MOV RAX, QWORD PTR [RIP + 19952] 7"
 Post  "RAX = [0x10000c008,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = (RSP_0 -64 808) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = [(RSP_0 -64 584),8]_0 ; [(RSP_0 -64 592),8] = [(RSP_0 -64 592),8]_0 ; [(RSP_0 -64 600),8] = [(RSP_0 -64 600),8]_0 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007218"
 Separations "([0x10000c008,8]_0,8) SEP (RSP_0,8); ([0x10000c008,8]_0,8) SEP (0x10000c000,8); ([0x10000c008,8]_0,8) SEP (0x10000c008,8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 8),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 16),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 24),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 32),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 40),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 48),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 56),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 568),1); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 584),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 592),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 600),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 604),4); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 608),4); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 612),4); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 624),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 632),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 648),16); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 664),16); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 680),16); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 696),16); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 712),16); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 728),16); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 744),16); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 760),16); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 768),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 776),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 784),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 792),8)"
 Assertions  ""
 Pre   "RAX = [0x10000c008,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = (RSP_0 -64 808) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = [(RSP_0 -64 584),8]_0 ; [(RSP_0 -64 592),8] = [(RSP_0 -64 592),8]_0 ; [(RSP_0 -64 600),8] = [(RSP_0 -64 600),8]_0 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "100007218: MOV RAX, QWORD PTR [RAX] 3"
 Post  "RAX = [[0x10000c008,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = (RSP_0 -64 808) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = [(RSP_0 -64 584),8]_0 ; [(RSP_0 -64 592),8] = [(RSP_0 -64 592),8]_0 ; [(RSP_0 -64 600),8] = [(RSP_0 -64 600),8]_0 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000721b"
 Separations "((RSP_0 -64 56),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 56),8) SEP (0x10000c000,8); ((RSP_0 -64 56),8) SEP (0x10000c008,8)"
 Assertions  ""
 Pre   "RAX = [[0x10000c008,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = (RSP_0 -64 808) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = [(RSP_0 -64 584),8]_0 ; [(RSP_0 -64 592),8] = [(RSP_0 -64 592),8]_0 ; [(RSP_0 -64 600),8] = [(RSP_0 -64 600),8]_0 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "10000721b: MOV QWORD PTR [RBP - 48], RAX 4"
 Post  "RAX = [[0x10000c008,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = (RSP_0 -64 808) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = [(RSP_0 -64 584),8]_0 ; [(RSP_0 -64 592),8] = [(RSP_0 -64 592),8]_0 ; [(RSP_0 -64 600),8] = [(RSP_0 -64 600),8]_0 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000721f"
 Separations ""
 Assertions  ""
 Pre   "RAX = [[0x10000c008,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = (RSP_0 -64 808) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = [(RSP_0 -64 584),8]_0 ; [(RSP_0 -64 592),8] = [(RSP_0 -64 592),8]_0 ; [(RSP_0 -64 600),8] = [(RSP_0 -64 600),8]_0 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "10000721f: LEA RBX, [RBP - 304] 7"
 Post  "RAX = [[0x10000c008,8]_0,8]_0 ; RBX = (RSP_0 -64 312) ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = (RSP_0 -64 808) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = [(RSP_0 -64 584),8]_0 ; [(RSP_0 -64 592),8] = [(RSP_0 -64 592),8]_0 ; [(RSP_0 -64 600),8] = [(RSP_0 -64 600),8]_0 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007226"
 Separations ""
 Assertions  ""
 Pre   "RAX = [[0x10000c008,8]_0,8]_0 ; RBX = (RSP_0 -64 312) ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = (RSP_0 -64 808) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = [(RSP_0 -64 584),8]_0 ; [(RSP_0 -64 592),8] = [(RSP_0 -64 592),8]_0 ; [(RSP_0 -64 600),8] = [(RSP_0 -64 600),8]_0 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "100007226: MOVABS RAX, 206158430224 10"
 Post  "RAX = 0x3000000010 ; RBX = (RSP_0 -64 312) ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = (RSP_0 -64 808) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = [(RSP_0 -64 584),8]_0 ; [(RSP_0 -64 592),8] = [(RSP_0 -64 592),8]_0 ; [(RSP_0 -64 600),8] = [(RSP_0 -64 600),8]_0 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007230"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x3000000010 ; RBX = (RSP_0 -64 312) ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = (RSP_0 -64 808) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = [(RSP_0 -64 584),8]_0 ; [(RSP_0 -64 592),8] = [(RSP_0 -64 592),8]_0 ; [(RSP_0 -64 600),8] = [(RSP_0 -64 600),8]_0 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "100007230: LEA RCX, [RBP - 592] 7"
 Post  "RAX = 0x3000000010 ; RBX = (RSP_0 -64 312) ; RCX = (RSP_0 -64 600) ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = (RSP_0 -64 808) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = [(RSP_0 -64 584),8]_0 ; [(RSP_0 -64 592),8] = [(RSP_0 -64 592),8]_0 ; [(RSP_0 -64 600),8] = [(RSP_0 -64 600),8]_0 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007237"
 Separations "((RSP_0 -64 600),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 600),8) SEP (0x10000c000,8); ((RSP_0 -64 600),8) SEP (0x10000c008,8)"
 Assertions  ""
 Pre   "RAX = 0x3000000010 ; RBX = (RSP_0 -64 312) ; RCX = (RSP_0 -64 600) ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = (RSP_0 -64 808) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = [(RSP_0 -64 584),8]_0 ; [(RSP_0 -64 592),8] = [(RSP_0 -64 592),8]_0 ; [(RSP_0 -64 600),8] = [(RSP_0 -64 600),8]_0 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "100007237: MOV QWORD PTR [RCX], RAX 3"
 Post  "RAX = 0x3000000010 ; RBX = (RSP_0 -64 312) ; RCX = (RSP_0 -64 600) ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = (RSP_0 -64 808) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = [(RSP_0 -64 584),8]_0 ; [(RSP_0 -64 592),8] = [(RSP_0 -64 592),8]_0 ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000723a"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x3000000010 ; RBX = (RSP_0 -64 312) ; RCX = (RSP_0 -64 600) ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = (RSP_0 -64 808) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = [(RSP_0 -64 584),8]_0 ; [(RSP_0 -64 592),8] = [(RSP_0 -64 592),8]_0 ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "10000723a: LEA RAX, [RBP + 16] 4"
 Post  "RAX = (RSP_0 +64 8) ; RBX = (RSP_0 -64 312) ; RCX = (RSP_0 -64 600) ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = (RSP_0 -64 808) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = [(RSP_0 -64 584),8]_0 ; [(RSP_0 -64 592),8] = [(RSP_0 -64 592),8]_0 ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000723e"
 Separations "((RSP_0 -64 592),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 592),8) SEP (0x10000c000,8); ((RSP_0 -64 592),8) SEP (0x10000c008,8)"
 Assertions  ""
 Pre   "RAX = (RSP_0 +64 0x8) ; RBX = (RSP_0 -64 312) ; RCX = (RSP_0 -64 600) ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = (RSP_0 -64 808) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = [(RSP_0 -64 584),8]_0 ; [(RSP_0 -64 592),8] = [(RSP_0 -64 592),8]_0 ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "10000723e: MOV QWORD PTR [RCX + 8], RAX 4"
 Post  "RAX = (RSP_0 +64 0x8) ; RBX = (RSP_0 -64 312) ; RCX = (RSP_0 -64 600) ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = (RSP_0 -64 808) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = [(RSP_0 -64 584),8]_0 ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007242"
 Separations "((RSP_0 -64 584),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 584),8) SEP (0x10000c000,8); ((RSP_0 -64 584),8) SEP (0x10000c008,8)"
 Assertions  ""
 Pre   "RAX = (RSP_0 +64 0x8) ; RBX = (RSP_0 -64 312) ; RCX = (RSP_0 -64 600) ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = (RSP_0 -64 808) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = [(RSP_0 -64 584),8]_0 ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "100007242: MOV QWORD PTR [RCX + 16], RSI 4"
 Post  "RAX = (RSP_0 +64 0x8) ; RBX = (RSP_0 -64 312) ; RCX = (RSP_0 -64 600) ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = (RSP_0 -64 808) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007246"
 Separations ""
 Assertions  ""
 Pre   "RAX = (RSP_0 +64 0x8) ; RBX = (RSP_0 -64 312) ; RCX = (RSP_0 -64 600) ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = (RSP_0 -64 808) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "100007246: MOV ESI, 256 5"
 Post  "RAX = (RSP_0 +64 0x8) ; RBX = (RSP_0 -64 312) ; RCX = (RSP_0 -64 600) ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = 256 ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000724b"
 Separations ""
 Assertions  ""
 Pre   "RAX = (RSP_0 +64 0x8) ; RBX = (RSP_0 -64 312) ; RCX = (RSP_0 -64 600) ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = 256 ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "10000724b: MOV RDI, RBX 3"
 Post  "RAX = (RSP_0 +64 0x8) ; RBX = (RSP_0 -64 312) ; RCX = (RSP_0 -64 600) ; RDX = RDX_0 ; RDI = (RSP_0 -64 312) ; RSI = 256 ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000724e"
 Separations ""
 Assertions  ""
 Pre   "RAX = (RSP_0 +64 0x8) ; RBX = (RSP_0 -64 312) ; RCX = (RSP_0 -64 600) ; RDX = RDX_0 ; RDI = (RSP_0 -64 312) ; RSI = 256 ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "10000724e: MOV RDX, R14 3"
 Post  "RAX = (RSP_0 +64 0x8) ; RBX = (RSP_0 -64 312) ; RCX = (RSP_0 -64 600) ; RDX = RSI_0 ; RDI = (RSP_0 -64 312) ; RSI = 256 ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007251"
 Separations ""
 Assertions  ""
 Pre   "RAX = (RSP_0 +64 0x8) ; RBX = (RSP_0 -64 312) ; RCX = (RSP_0 -64 600) ; RDX = RSI_0 ; RDI = (RSP_0 -64 312) ; RSI = 256 ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "100007251: ExternalCall fun__vsnprintf 5"
 Post  "RAX = bot(fun__vsnprintf) ; RBX = (RSP_0 -64 312) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 FunctionConstraints "PRESERVES fun__vsnprintf {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c000,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 568),1];[(RSP_0 -64 584),8];[(RSP_0 -64 592),8];[(RSP_0 -64 600),8];[(RSP_0 -64 604),4];[(RSP_0 -64 612),4];[(RSP_0 -64 624),8];[(RSP_0 -64 632),8];[(RSP_0 -64 648),16];[(RSP_0 -64 664),16];[(RSP_0 -64 680),16];[(RSP_0 -64 696),16];[(RSP_0 -64 712),16];[(RSP_0 -64 728),16];[(RSP_0 -64 744),16];[(RSP_0 -64 760),16];[(RSP_0 -64 768),8];[(RSP_0 -64 776),8];[(RSP_0 -64 784),8];[(RSP_0 -64 792),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007256"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__vsnprintf) ; RBX = (RSP_0 -64 312) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "100007256: MOV R12D, EAX 3"
 Post  "RAX = bot(fun__vsnprintf) ; RBX = (RSP_0 -64 312) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = b32(bot(fun__vsnprintf)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007259"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__vsnprintf) ; RBX = (RSP_0 -64 312) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = b32(bot(fun__vsnprintf)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "100007259: CMP EAX, 256 5"
 Post  "RAX = bot(fun__vsnprintf) ; RBX = (RSP_0 -64 312) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = b32(bot(fun__vsnprintf)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000725e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__vsnprintf) ; RBX = (RSP_0 -64 312) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = b32(bot(fun__vsnprintf)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "10000725e: JB 4294996775 6"
 Post  "RAX = bot(fun__vsnprintf) ; RBX = (RSP_0 -64 312) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = b32(bot(fun__vsnprintf)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 1000071a0, blockId == 3 ##
#####################################
*)

htriple "ht_100007264"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__vsnprintf) ; RBX = (RSP_0 -64 312) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = b32(bot(fun__vsnprintf)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "100007264: LEA RBX, [RBP - 304] 7"
 Post  "RAX = bot(fun__vsnprintf) ; RBX = (RSP_0 -64 312) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = b32(bot(fun__vsnprintf)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000726b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__vsnprintf) ; RBX = (RSP_0 -64 312) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = b32(bot(fun__vsnprintf)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "10000726b: CMP R12D, 255 7"
 Post  "RAX = bot(fun__vsnprintf) ; RBX = (RSP_0 -64 312) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = b32(bot(fun__vsnprintf)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007272"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__vsnprintf) ; RBX = (RSP_0 -64 312) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = b32(bot(fun__vsnprintf)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "100007272: SETG AL 3"
 Post  "RBX = (RSP_0 -64 312) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = b32(bot(fun__vsnprintf)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007275"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 312) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = b32(bot(fun__vsnprintf)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "100007275: MOV R15D, 256 6"
 Post  "RBX = (RSP_0 -64 312) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = 256 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = b32(bot(fun__vsnprintf)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000727b"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 312) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = 256 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = b32(bot(fun__vsnprintf)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "10000727b: XOR EDI, EDI 2"
 Post  "RBX = (RSP_0 -64 312) ; RDI = 0 ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = 256 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = b32(bot(fun__vsnprintf)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 1000071a0, blockId == 4 ##
#####################################
*)

htriple "ht_100007327"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__vsnprintf) ; RBX = (RSP_0 -64 312) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = b32(bot(fun__vsnprintf)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "100007327: XOR EDI, EDI 2"
 Post  "RAX = bot(fun__vsnprintf) ; RBX = (RSP_0 -64 312) ; RDI = 0 ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = b32(bot(fun__vsnprintf)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007329"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__vsnprintf) ; RBX = (RSP_0 -64 312) ; RDI = 0 ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = b32(bot(fun__vsnprintf)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "100007329: JMP 4294996807 2"
 Post  "RAX = bot(fun__vsnprintf) ; RBX = (RSP_0 -64 312) ; RDI = 0 ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = b32(bot(fun__vsnprintf)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 1000071a0, blockId == 5 ##
#####################################
*)

htriple "ht_100007281"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = b32(bot(fun__vsnprintf)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "100007281: INC R12D 3"
 Post  "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = (b32(bot(fun__vsnprintf)) +32 1) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007284"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = (b32(bot(fun__vsnprintf)) +32 1) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "100007284: MOV R15D, R12D 3"
 Post  "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = (b32(bot(fun__vsnprintf)) +32 1) ; R14 = RSI_0 ; R12 = (b32(bot(fun__vsnprintf)) +32 1) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007287"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = (b32(bot(fun__vsnprintf)) +32 1) ; R14 = RSI_0 ; R12 = (b32(bot(fun__vsnprintf)) +32 1) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "100007287: JMP 4294996653 2"
 Post  "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = (b32(bot(fun__vsnprintf)) +32 1) ; R14 = RSI_0 ; R12 = (b32(bot(fun__vsnprintf)) +32 1) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 1000071a0, blockId == 6 ##
#####################################
*)

htriple "ht_100007289"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = b32(bot(fun__vsnprintf)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "100007289: CMP R15D, 8191 7"
 Post  "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = b32(bot(fun__vsnprintf)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007290"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = b32(bot(fun__vsnprintf)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "100007290: JG 4294996631 2"
 Post  "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = b32(bot(fun__vsnprintf)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 1000071a0, blockId == 7 ##
#####################################
*)

htriple "ht_100007292"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = b32(bot(fun__vsnprintf)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "100007292: ADD R15D, R15D 3"
 Post  "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = b32(bot(fun__vsnprintf)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007295"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = b32(bot(fun__vsnprintf)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "100007295: JMP 4294996653 2"
 Post  "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = b32(bot(fun__vsnprintf)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 1000071a0, blockId == 8 ##
#####################################
*)

htriple "ht_100007297"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = b32(bot(fun__vsnprintf)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "100007297: CMP R15D, 999999 7"
 Post  "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = b32(bot(fun__vsnprintf)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000729e"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = b32(bot(fun__vsnprintf)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "10000729e: JG 4294996796 6"
 Post  "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = b32(bot(fun__vsnprintf)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 1000071a0, blockId == 9 ##
#####################################
*)

htriple "ht_1000072ad"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "1000072ad: ExternalCall fun__free 5"
 Post  "RAX = bot(fun__free) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 FunctionConstraints "PRESERVES fun__free {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c000,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 568),1];[(RSP_0 -64 584),8];[(RSP_0 -64 592),8];[(RSP_0 -64 600),8];[(RSP_0 -64 604),4];[(RSP_0 -64 612),4];[(RSP_0 -64 624),8];[(RSP_0 -64 632),8];[(RSP_0 -64 648),16];[(RSP_0 -64 664),16];[(RSP_0 -64 680),16];[(RSP_0 -64 696),16];[(RSP_0 -64 712),16];[(RSP_0 -64 728),16];[(RSP_0 -64 744),16];[(RSP_0 -64 760),16];[(RSP_0 -64 768),8];[(RSP_0 -64 776),8];[(RSP_0 -64 784),8];[(RSP_0 -64 792),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000072b2"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__free) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "1000072b2: MOVSXD R13, R15D 3"
 Post  "RAX = bot(fun__free) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000072b5"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__free) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "1000072b5: MOV RDI, R13 3"
 Post  "RAX = bot(fun__free) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000072b8"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__free) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "1000072b8: ExternalCall fun__malloc 5"
 Post  "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 FunctionConstraints "PRESERVES fun__malloc {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c000,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 568),1];[(RSP_0 -64 584),8];[(RSP_0 -64 592),8];[(RSP_0 -64 600),8];[(RSP_0 -64 604),4];[(RSP_0 -64 612),4];[(RSP_0 -64 624),8];[(RSP_0 -64 632),8];[(RSP_0 -64 648),16];[(RSP_0 -64 664),16];[(RSP_0 -64 680),16];[(RSP_0 -64 696),16];[(RSP_0 -64 712),16];[(RSP_0 -64 728),16];[(RSP_0 -64 744),16];[(RSP_0 -64 760),16];[(RSP_0 -64 768),8];[(RSP_0 -64 776),8];[(RSP_0 -64 784),8];[(RSP_0 -64 792),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000072bd"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "1000072bd: TEST RAX, RAX 3"
 Post  "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000072c0"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "1000072c0: JE 4294996779 2"
 Post  "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000071a0, blockId == 10 ##
######################################
*)

htriple "ht_1000072a4"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = b32(bot(fun__vsnprintf)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "1000072a4: MOV EAX, R15D 3"
 Post  "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = b32(bot(fun__vsnprintf)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000072a7"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = b32(bot(fun__vsnprintf)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "1000072a7: SHR EAX, 2 3"
 Post  "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = b32(bot(fun__vsnprintf)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000072aa"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = b32(bot(fun__vsnprintf)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "1000072aa: ADD R15D, EAX 3"
 Post  "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = b32(bot(fun__vsnprintf)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000071a0, blockId == 11 ##
######################################
*)

htriple "ht_10000733c"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = b32(bot(fun__vsnprintf)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "10000733c: LEA EAX, [R15 - 1] 4"
 Post  "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = b32(bot(fun__vsnprintf)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007340"
 Separations ""
 Assertions  "((RDI +64 RAX),1) SEP (RSP_0,8); ((RDI +64 RAX),1) SEP ((RSP_0 -64 8),8); ((RDI +64 RAX),1) SEP ((RSP_0 -64 16),8); ((RDI +64 RAX),1) SEP ((RSP_0 -64 24),8); ((RDI +64 RAX),1) SEP ((RSP_0 -64 32),8); ((RDI +64 RAX),1) SEP ((RSP_0 -64 40),8); ((RDI +64 RAX),1) SEP ((RSP_0 -64 48),8); ((RDI +64 RAX),1) SEP ((RSP_0 -64 56),8); ((RDI +64 RAX),1) SEP ((RSP_0 -64 568),1); ((RDI +64 RAX),1) SEP ((RSP_0 -64 584),8); ((RDI +64 RAX),1) SEP ((RSP_0 -64 592),8); ((RDI +64 RAX),1) SEP ((RSP_0 -64 600),8); ((RDI +64 RAX),1) SEP ((RSP_0 -64 604),4); ((RDI +64 RAX),1) SEP ((RSP_0 -64 612),4); ((RDI +64 RAX),1) SEP ((RSP_0 -64 624),8); ((RDI +64 RAX),1) SEP ((RSP_0 -64 632),8); ((RDI +64 RAX),1) SEP ((RSP_0 -64 648),16); ((RDI +64 RAX),1) SEP ((RSP_0 -64 664),16); ((RDI +64 RAX),1) SEP ((RSP_0 -64 680),16); ((RDI +64 RAX),1) SEP ((RSP_0 -64 696),16); ((RDI +64 RAX),1) SEP ((RSP_0 -64 712),16); ((RDI +64 RAX),1) SEP ((RSP_0 -64 728),16); ((RDI +64 RAX),1) SEP ((RSP_0 -64 744),16); ((RDI +64 RAX),1) SEP ((RSP_0 -64 760),16); ((RDI +64 RAX),1) SEP ((RSP_0 -64 768),8); ((RDI +64 RAX),1) SEP ((RSP_0 -64 776),8); ((RDI +64 RAX),1) SEP ((RSP_0 -64 784),8); ((RDI +64 RAX),1) SEP ((RSP_0 -64 792),8)"
 Pre   "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = b32(bot(fun__vsnprintf)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "100007340: MOV BYTE PTR [RDI + RAX], 0 4"
 Post  "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = b32(bot(fun__vsnprintf)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007344"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = b32(bot(fun__vsnprintf)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "100007344: MOV R12D, R15D 3"
 Post  "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000071a0, blockId == 12 ##
######################################
*)

htriple "ht_1000072c2"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = (b32(bot(fun__vsnprintf)) +32 1) ; R14 = RSI_0 ; R13 = signextend(32,64, (b32(bot(fun__vsnprintf)) +32 1)) ; R12 = (b32(bot(fun__vsnprintf)) +32 1) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "1000072c2: MOV RBX, RAX 3"
 Post  "RAX = bot(fun__malloc) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = (b32(bot(fun__vsnprintf)) +32 1) ; R14 = RSI_0 ; R13 = signextend(32,64, (b32(bot(fun__vsnprintf)) +32 1)) ; R12 = (b32(bot(fun__vsnprintf)) +32 1) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000072c5"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = (b32(bot(fun__vsnprintf)) +32 1) ; R14 = RSI_0 ; R13 = signextend(32,64, (b32(bot(fun__vsnprintf)) +32 1)) ; R12 = (b32(bot(fun__vsnprintf)) +32 1) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "1000072c5: LEA RAX, [RBP - 800] 7"
 Post  "RAX = (RSP_0 -64 808) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = (b32(bot(fun__vsnprintf)) +32 1) ; R14 = RSI_0 ; R13 = signextend(32,64, (b32(bot(fun__vsnprintf)) +32 1)) ; R12 = (b32(bot(fun__vsnprintf)) +32 1) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000072cc"
 Separations "((RSP_0 -64 584),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 584),8) SEP (0x10000c000,8); ((RSP_0 -64 584),8) SEP (0x10000c008,8)"
 Assertions  ""
 Pre   "RAX = (RSP_0 -64 808) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = (b32(bot(fun__vsnprintf)) +32 1) ; R14 = RSI_0 ; R13 = signextend(32,64, (b32(bot(fun__vsnprintf)) +32 1)) ; R12 = (b32(bot(fun__vsnprintf)) +32 1) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "1000072cc: MOV QWORD PTR [RBP - 576], RAX 7"
 Post  "RAX = (RSP_0 -64 808) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = (b32(bot(fun__vsnprintf)) +32 1) ; R14 = RSI_0 ; R13 = signextend(32,64, (b32(bot(fun__vsnprintf)) +32 1)) ; R12 = (b32(bot(fun__vsnprintf)) +32 1) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000072d3"
 Separations ""
 Assertions  ""
 Pre   "RAX = (RSP_0 -64 808) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = (b32(bot(fun__vsnprintf)) +32 1) ; R14 = RSI_0 ; R13 = signextend(32,64, (b32(bot(fun__vsnprintf)) +32 1)) ; R12 = (b32(bot(fun__vsnprintf)) +32 1) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "1000072d3: LEA RAX, [RBP + 16] 4"
 Post  "RAX = (RSP_0 +64 0x8) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = (b32(bot(fun__vsnprintf)) +32 1) ; R14 = RSI_0 ; R13 = signextend(32,64, (b32(bot(fun__vsnprintf)) +32 1)) ; R12 = (b32(bot(fun__vsnprintf)) +32 1) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000072d7"
 Separations "((RSP_0 -64 592),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 592),8) SEP (0x10000c000,8); ((RSP_0 -64 592),8) SEP (0x10000c008,8)"
 Assertions  ""
 Pre   "RAX = (RSP_0 +64 0x8) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = (b32(bot(fun__vsnprintf)) +32 1) ; R14 = RSI_0 ; R13 = signextend(32,64, (b32(bot(fun__vsnprintf)) +32 1)) ; R12 = (b32(bot(fun__vsnprintf)) +32 1) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "1000072d7: MOV QWORD PTR [RBP - 584], RAX 7"
 Post  "RAX = (RSP_0 +64 0x8) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = (b32(bot(fun__vsnprintf)) +32 1) ; R14 = RSI_0 ; R13 = signextend(32,64, (b32(bot(fun__vsnprintf)) +32 1)) ; R12 = (b32(bot(fun__vsnprintf)) +32 1) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000072de"
 Separations ""
 Assertions  ""
 Pre   "RAX = (RSP_0 +64 0x8) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = (b32(bot(fun__vsnprintf)) +32 1) ; R14 = RSI_0 ; R13 = signextend(32,64, (b32(bot(fun__vsnprintf)) +32 1)) ; R12 = (b32(bot(fun__vsnprintf)) +32 1) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "1000072de: MOVABS RAX, 206158430224 10"
 Post  "RAX = 0x3000000010 ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = (b32(bot(fun__vsnprintf)) +32 1) ; R14 = RSI_0 ; R13 = signextend(32,64, (b32(bot(fun__vsnprintf)) +32 1)) ; R12 = (b32(bot(fun__vsnprintf)) +32 1) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000072e8"
 Separations "((RSP_0 -64 600),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 600),8) SEP (0x10000c000,8); ((RSP_0 -64 600),8) SEP (0x10000c008,8)"
 Assertions  ""
 Pre   "RAX = 0x3000000010 ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = (b32(bot(fun__vsnprintf)) +32 1) ; R14 = RSI_0 ; R13 = signextend(32,64, (b32(bot(fun__vsnprintf)) +32 1)) ; R12 = (b32(bot(fun__vsnprintf)) +32 1) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "1000072e8: MOV QWORD PTR [RBP - 592], RAX 7"
 Post  "RAX = 0x3000000010 ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = (b32(bot(fun__vsnprintf)) +32 1) ; R14 = RSI_0 ; R13 = signextend(32,64, (b32(bot(fun__vsnprintf)) +32 1)) ; R12 = (b32(bot(fun__vsnprintf)) +32 1) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000072ef"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x3000000010 ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = (b32(bot(fun__vsnprintf)) +32 1) ; R14 = RSI_0 ; R13 = signextend(32,64, (b32(bot(fun__vsnprintf)) +32 1)) ; R12 = (b32(bot(fun__vsnprintf)) +32 1) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "1000072ef: MOV RDI, RBX 3"
 Post  "RAX = 0x3000000010 ; RBX = bot(fun__malloc) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = (b32(bot(fun__vsnprintf)) +32 1) ; R14 = RSI_0 ; R13 = signextend(32,64, (b32(bot(fun__vsnprintf)) +32 1)) ; R12 = (b32(bot(fun__vsnprintf)) +32 1) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000072f2"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x3000000010 ; RBX = bot(fun__malloc) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = (b32(bot(fun__vsnprintf)) +32 1) ; R14 = RSI_0 ; R13 = signextend(32,64, (b32(bot(fun__vsnprintf)) +32 1)) ; R12 = (b32(bot(fun__vsnprintf)) +32 1) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "1000072f2: MOV RSI, R13 3"
 Post  "RAX = 0x3000000010 ; RBX = bot(fun__malloc) ; RDI = bot(fun__malloc) ; RSI = signextend(32,64, (b32(bot(fun__vsnprintf)) +32 1)) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = (b32(bot(fun__vsnprintf)) +32 1) ; R14 = RSI_0 ; R13 = signextend(32,64, (b32(bot(fun__vsnprintf)) +32 1)) ; R12 = (b32(bot(fun__vsnprintf)) +32 1) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000072f5"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x3000000010 ; RBX = bot(fun__malloc) ; RDI = bot(fun__malloc) ; RSI = signextend(32,64, (b32(bot(fun__vsnprintf)) +32 1)) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = (b32(bot(fun__vsnprintf)) +32 1) ; R14 = RSI_0 ; R13 = signextend(32,64, (b32(bot(fun__vsnprintf)) +32 1)) ; R12 = (b32(bot(fun__vsnprintf)) +32 1) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "1000072f5: MOV RDX, R14 3"
 Post  "RAX = 0x3000000010 ; RBX = bot(fun__malloc) ; RDX = RSI_0 ; RDI = bot(fun__malloc) ; RSI = signextend(32,64, (b32(bot(fun__vsnprintf)) +32 1)) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = (b32(bot(fun__vsnprintf)) +32 1) ; R14 = RSI_0 ; R13 = signextend(32,64, (b32(bot(fun__vsnprintf)) +32 1)) ; R12 = (b32(bot(fun__vsnprintf)) +32 1) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000072f8"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x3000000010 ; RBX = bot(fun__malloc) ; RDX = RSI_0 ; RDI = bot(fun__malloc) ; RSI = signextend(32,64, (b32(bot(fun__vsnprintf)) +32 1)) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = (b32(bot(fun__vsnprintf)) +32 1) ; R14 = RSI_0 ; R13 = signextend(32,64, (b32(bot(fun__vsnprintf)) +32 1)) ; R12 = (b32(bot(fun__vsnprintf)) +32 1) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "1000072f8: LEA RCX, [RBP - 592] 7"
 Post  "RAX = 0x3000000010 ; RBX = bot(fun__malloc) ; RCX = (RSP_0 -64 600) ; RDX = RSI_0 ; RDI = bot(fun__malloc) ; RSI = signextend(32,64, (b32(bot(fun__vsnprintf)) +32 1)) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = (b32(bot(fun__vsnprintf)) +32 1) ; R14 = RSI_0 ; R13 = signextend(32,64, (b32(bot(fun__vsnprintf)) +32 1)) ; R12 = (b32(bot(fun__vsnprintf)) +32 1) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000072ff"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x3000000010 ; RBX = bot(fun__malloc) ; RCX = (RSP_0 -64 600) ; RDX = RSI_0 ; RDI = bot(fun__malloc) ; RSI = signextend(32,64, (b32(bot(fun__vsnprintf)) +32 1)) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = (b32(bot(fun__vsnprintf)) +32 1) ; R14 = RSI_0 ; R13 = signextend(32,64, (b32(bot(fun__vsnprintf)) +32 1)) ; R12 = (b32(bot(fun__vsnprintf)) +32 1) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "1000072ff: ExternalCall fun__vsnprintf 5"
 Post  "RAX = bot(fun__vsnprintf) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = (b32(bot(fun__vsnprintf)) +32 1) ; R14 = RSI_0 ; R13 = signextend(32,64, (b32(bot(fun__vsnprintf)) +32 1)) ; R12 = (b32(bot(fun__vsnprintf)) +32 1) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 FunctionConstraints "PRESERVES fun__vsnprintf {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c000,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 568),1];[(RSP_0 -64 584),8];[(RSP_0 -64 592),8];[(RSP_0 -64 600),8];[(RSP_0 -64 604),4];[(RSP_0 -64 612),4];[(RSP_0 -64 624),8];[(RSP_0 -64 632),8];[(RSP_0 -64 648),16];[(RSP_0 -64 664),16];[(RSP_0 -64 680),16];[(RSP_0 -64 696),16];[(RSP_0 -64 712),16];[(RSP_0 -64 728),16];[(RSP_0 -64 744),16];[(RSP_0 -64 760),16];[(RSP_0 -64 768),8];[(RSP_0 -64 776),8];[(RSP_0 -64 784),8];[(RSP_0 -64 792),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007304"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__vsnprintf) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = (b32(bot(fun__vsnprintf)) +32 1) ; R14 = RSI_0 ; R13 = signextend(32,64, (b32(bot(fun__vsnprintf)) +32 1)) ; R12 = (b32(bot(fun__vsnprintf)) +32 1) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "100007304: MOV R12D, EAX 3"
 Post  "RAX = bot(fun__vsnprintf) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = (b32(bot(fun__vsnprintf)) +32 1) ; R14 = RSI_0 ; R13 = signextend(32,64, (b32(bot(fun__vsnprintf)) +32 1)) ; R12 = b32(bot(fun__vsnprintf)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007307"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__vsnprintf) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = (b32(bot(fun__vsnprintf)) +32 1) ; R14 = RSI_0 ; R13 = signextend(32,64, (b32(bot(fun__vsnprintf)) +32 1)) ; R12 = b32(bot(fun__vsnprintf)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "100007307: CMP EAX, R13D 3"
 Post  "RAX = bot(fun__vsnprintf) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = (b32(bot(fun__vsnprintf)) +32 1) ; R14 = RSI_0 ; R13 = signextend(32,64, (b32(bot(fun__vsnprintf)) +32 1)) ; R12 = b32(bot(fun__vsnprintf)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000730a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__vsnprintf) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = (b32(bot(fun__vsnprintf)) +32 1) ; R14 = RSI_0 ; R13 = signextend(32,64, (b32(bot(fun__vsnprintf)) +32 1)) ; R12 = b32(bot(fun__vsnprintf)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "10000730a: SETGE AL 3"
 Post  "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = (b32(bot(fun__vsnprintf)) +32 1) ; R14 = RSI_0 ; R13 = signextend(32,64, (b32(bot(fun__vsnprintf)) +32 1)) ; R12 = b32(bot(fun__vsnprintf)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000730d"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = (b32(bot(fun__vsnprintf)) +32 1) ; R14 = RSI_0 ; R13 = signextend(32,64, (b32(bot(fun__vsnprintf)) +32 1)) ; R12 = b32(bot(fun__vsnprintf)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "10000730d: MOV RDI, RBX 3"
 Post  "RBX = bot(fun__malloc) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = (b32(bot(fun__vsnprintf)) +32 1) ; R14 = RSI_0 ; R13 = signextend(32,64, (b32(bot(fun__vsnprintf)) +32 1)) ; R12 = b32(bot(fun__vsnprintf)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007310"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__malloc) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = (b32(bot(fun__vsnprintf)) +32 1) ; R14 = RSI_0 ; R13 = signextend(32,64, (b32(bot(fun__vsnprintf)) +32 1)) ; R12 = b32(bot(fun__vsnprintf)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "100007310: TEST R12D, R12D 3"
 Post  "RBX = bot(fun__malloc) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = (b32(bot(fun__vsnprintf)) +32 1) ; R14 = RSI_0 ; R13 = signextend(32,64, (b32(bot(fun__vsnprintf)) +32 1)) ; R12 = b32(bot(fun__vsnprintf)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007313"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__malloc) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = (b32(bot(fun__vsnprintf)) +32 1) ; R14 = RSI_0 ; R13 = signextend(32,64, (b32(bot(fun__vsnprintf)) +32 1)) ; R12 = b32(bot(fun__vsnprintf)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "100007313: JS 4294996605 6"
 Post  "RBX = bot(fun__malloc) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = (b32(bot(fun__vsnprintf)) +32 1) ; R14 = RSI_0 ; R13 = signextend(32,64, (b32(bot(fun__vsnprintf)) +32 1)) ; R12 = b32(bot(fun__vsnprintf)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000071a0, blockId == 13 ##
######################################
*)

htriple "ht_10000732b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = (b32(bot(fun__vsnprintf)) +32 1) ; R14 = RSI_0 ; R13 = signextend(32,64, (b32(bot(fun__vsnprintf)) +32 1)) ; R12 = (b32(bot(fun__vsnprintf)) +32 1) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "10000732b: MOV R12D, 255 6"
 Post  "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = (b32(bot(fun__vsnprintf)) +32 1) ; R14 = RSI_0 ; R13 = signextend(32,64, (b32(bot(fun__vsnprintf)) +32 1)) ; R12 = 255 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007331"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = (b32(bot(fun__vsnprintf)) +32 1) ; R14 = RSI_0 ; R13 = signextend(32,64, (b32(bot(fun__vsnprintf)) +32 1)) ; R12 = 255 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "100007331: XOR EDI, EDI 2"
 Post  "RAX = bot(fun__malloc) ; RDI = 0 ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = (b32(bot(fun__vsnprintf)) +32 1) ; R14 = RSI_0 ; R13 = signextend(32,64, (b32(bot(fun__vsnprintf)) +32 1)) ; R12 = 255 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007333"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RDI = 0 ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = (b32(bot(fun__vsnprintf)) +32 1) ; R14 = RSI_0 ; R13 = signextend(32,64, (b32(bot(fun__vsnprintf)) +32 1)) ; R12 = 255 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "100007333: LEA RBX, [RBP - 304] 7"
 Post  "RAX = bot(fun__malloc) ; RBX = (RSP_0 -64 312) ; RDI = 0 ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = (b32(bot(fun__vsnprintf)) +32 1) ; R14 = RSI_0 ; R13 = signextend(32,64, (b32(bot(fun__vsnprintf)) +32 1)) ; R12 = 255 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000733a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RBX = (RSP_0 -64 312) ; RDI = 0 ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = (b32(bot(fun__vsnprintf)) +32 1) ; R14 = RSI_0 ; R13 = signextend(32,64, (b32(bot(fun__vsnprintf)) +32 1)) ; R12 = 255 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "10000733a: JMP 4294996807 2"
 Post  "RAX = bot(fun__malloc) ; RBX = (RSP_0 -64 312) ; RDI = 0 ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = (b32(bot(fun__vsnprintf)) +32 1) ; R14 = RSI_0 ; R13 = signextend(32,64, (b32(bot(fun__vsnprintf)) +32 1)) ; R12 = 255 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000071a0, blockId == 14 ##
######################################
*)

htriple "ht_10000727d"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = b32(bot(fun__vsnprintf)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "10000727d: TEST AL, 1 2"
 Post  "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = b32(bot(fun__vsnprintf)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000727f"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = b32(bot(fun__vsnprintf)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "10000727f: JE 4294996617 2"
 Post  "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = b32(bot(fun__vsnprintf)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000071a0, blockId == 15 ##
######################################
*)

htriple "ht_100007319"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__malloc) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = (b32(bot(fun__vsnprintf)) +32 1) ; R14 = RSI_0 ; R13 = signextend(32,64, (b32(bot(fun__vsnprintf)) +32 1)) ; R12 = b32(bot(fun__vsnprintf)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "100007319: MOV RDI, RBX 3"
 Post  "RBX = bot(fun__malloc) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = (b32(bot(fun__vsnprintf)) +32 1) ; R14 = RSI_0 ; R13 = signextend(32,64, (b32(bot(fun__vsnprintf)) +32 1)) ; R12 = b32(bot(fun__vsnprintf)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000731c"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__malloc) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = (b32(bot(fun__vsnprintf)) +32 1) ; R14 = RSI_0 ; R13 = signextend(32,64, (b32(bot(fun__vsnprintf)) +32 1)) ; R12 = b32(bot(fun__vsnprintf)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "10000731c: CMP R12D, R15D 3"
 Post  "RBX = bot(fun__malloc) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = (b32(bot(fun__vsnprintf)) +32 1) ; R14 = RSI_0 ; R13 = signextend(32,64, (b32(bot(fun__vsnprintf)) +32 1)) ; R12 = b32(bot(fun__vsnprintf)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000731f"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__malloc) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = (b32(bot(fun__vsnprintf)) +32 1) ; R14 = RSI_0 ; R13 = signextend(32,64, (b32(bot(fun__vsnprintf)) +32 1)) ; R12 = b32(bot(fun__vsnprintf)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "10000731f: JGE 4294996605 6"
 Post  "RBX = bot(fun__malloc) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = (b32(bot(fun__vsnprintf)) +32 1) ; R14 = RSI_0 ; R13 = signextend(32,64, (b32(bot(fun__vsnprintf)) +32 1)) ; R12 = b32(bot(fun__vsnprintf)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000071a0, blockId == 16 ##
######################################
*)

htriple "ht_100007325"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__malloc) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = (b32(bot(fun__vsnprintf)) +32 1) ; R14 = RSI_0 ; R13 = signextend(32,64, (b32(bot(fun__vsnprintf)) +32 1)) ; R12 = b32(bot(fun__vsnprintf)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "100007325: JMP 4294996807 2"
 Post  "RBX = bot(fun__malloc) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = (b32(bot(fun__vsnprintf)) +32 1) ; R14 = RSI_0 ; R13 = signextend(32,64, (b32(bot(fun__vsnprintf)) +32 1)) ; R12 = b32(bot(fun__vsnprintf)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000071a0, blockId == 17 ##
######################################
*)

htriple "ht_100007347"
 Separations "((RSP_0 -64 632),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 632),8) SEP (0x10000c000,8); ((RSP_0 -64 632),8) SEP (0x10000c008,8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 632),8] = [(RSP_0 -64 632),8]_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "100007347: MOV QWORD PTR [RBP - 624], RDI 7"
 Post  "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000734e"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "10000734e: XOR R14D, R14D 3"
 Post  "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007351"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "100007351: MOV EDX, 1 5"
 Post  "RDX = 1 ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007356"
 Separations ""
 Assertions  ""
 Pre   "RDX = 1 ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "100007356: XOR EDI, EDI 2"
 Post  "RDX = 1 ; RDI = 0 ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007358"
 Separations ""
 Assertions  ""
 Pre   "RDX = 1 ; RDI = 0 ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "100007358: XOR ESI, ESI 2"
 Post  "RDX = 1 ; RDI = 0 ; RSI = 0 ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000735a"
 Separations ""
 Assertions  ""
 Pre   "RDX = 1 ; RDI = 0 ; RSI = 0 ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "10000735a: ExternalCall fun__mbtowc 5"
 Post  "RAX = bot(fun__mbtowc) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 FunctionConstraints "PRESERVES fun__mbtowc {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c000,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 568),1];[(RSP_0 -64 584),8];[(RSP_0 -64 592),8];[(RSP_0 -64 600),8];[(RSP_0 -64 604),4];[(RSP_0 -64 612),4];[(RSP_0 -64 624),8];[(RSP_0 -64 632),8];[(RSP_0 -64 648),16];[(RSP_0 -64 664),16];[(RSP_0 -64 680),16];[(RSP_0 -64 696),16];[(RSP_0 -64 712),16];[(RSP_0 -64 728),16];[(RSP_0 -64 744),16];[(RSP_0 -64 760),16];[(RSP_0 -64 768),8];[(RSP_0 -64 776),8];[(RSP_0 -64 784),8];[(RSP_0 -64 792),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000735f"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__mbtowc) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "10000735f: CMP EAX, 18446744073709551615 3"
 Post  "RAX = bot(fun__mbtowc) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007362"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__mbtowc) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "100007362: JE 4294997192 6"
 Post  "RAX = bot(fun__mbtowc) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000071a0, blockId == 18 ##
######################################
*)

htriple "ht_100007368"
 Separations ""
 Assertions  "(RBX,1) SEP (RSP_0,8); (RBX,1) SEP ((RSP_0 -64 8),8); (RBX,1) SEP ((RSP_0 -64 16),8); (RBX,1) SEP ((RSP_0 -64 24),8); (RBX,1) SEP ((RSP_0 -64 32),8); (RBX,1) SEP ((RSP_0 -64 40),8); (RBX,1) SEP ((RSP_0 -64 48),8); (RBX,1) SEP ((RSP_0 -64 56),8); (RBX,1) SEP ((RSP_0 -64 568),1); (RBX,1) SEP ((RSP_0 -64 584),8); (RBX,1) SEP ((RSP_0 -64 592),8); (RBX,1) SEP ((RSP_0 -64 600),8); (RBX,1) SEP ((RSP_0 -64 604),4); (RBX,1) SEP ((RSP_0 -64 612),4); (RBX,1) SEP ((RSP_0 -64 624),8); (RBX,1) SEP ((RSP_0 -64 632),8); (RBX,1) SEP ((RSP_0 -64 648),16); (RBX,1) SEP ((RSP_0 -64 664),16); (RBX,1) SEP ((RSP_0 -64 680),16); (RBX,1) SEP ((RSP_0 -64 696),16); (RBX,1) SEP ((RSP_0 -64 712),16); (RBX,1) SEP ((RSP_0 -64 728),16); (RBX,1) SEP ((RSP_0 -64 744),16); (RBX,1) SEP ((RSP_0 -64 760),16); (RBX,1) SEP ((RSP_0 -64 768),8); (RBX,1) SEP ((RSP_0 -64 776),8); (RBX,1) SEP ((RSP_0 -64 784),8); (RBX,1) SEP ((RSP_0 -64 792),8)"
 Pre   "RAX = bot(fun__mbtowc) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "100007368: MOV AL, BYTE PTR [RBX] 2"
 Post  "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000736a"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "10000736a: TEST AL, AL 2"
 Post  "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000736c"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "10000736c: JE 4294997162 6"
 Post  "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000071a0, blockId == 19 ##
######################################
*)

htriple "ht_1000074c8"
 Separations "((RSP_0 -64 632),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 632),8) SEP (0x10000c000,8); ((RSP_0 -64 632),8) SEP (0x10000c008,8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "1000074c8: MOV RDI, QWORD PTR [RBP - 624] 7"
 Post  "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000074cf"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "1000074cf: ExternalCall fun__free 5"
 Post  "RAX = bot(fun__free) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 FunctionConstraints "PRESERVES fun__free {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c000,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 568),1];[(RSP_0 -64 584),8];[(RSP_0 -64 592),8];[(RSP_0 -64 600),8];[(RSP_0 -64 604),4];[(RSP_0 -64 612),4];[(RSP_0 -64 624),8];[(RSP_0 -64 632),8];[(RSP_0 -64 648),16];[(RSP_0 -64 664),16];[(RSP_0 -64 680),16];[(RSP_0 -64 696),16];[(RSP_0 -64 712),16];[(RSP_0 -64 728),16];[(RSP_0 -64 744),16];[(RSP_0 -64 760),16];[(RSP_0 -64 768),8];[(RSP_0 -64 776),8];[(RSP_0 -64 784),8];[(RSP_0 -64 792),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000074d4"
 Separations "(0x10000c008,8) SEP (RSP_0,8); (0x10000c008,8) SEP ([0x10000c008,8]_0,8); (0x10000c008,8) SEP ((RSP_0 -64 8),8); (0x10000c008,8) SEP ((RSP_0 -64 16),8); (0x10000c008,8) SEP ((RSP_0 -64 24),8); (0x10000c008,8) SEP ((RSP_0 -64 32),8); (0x10000c008,8) SEP ((RSP_0 -64 40),8); (0x10000c008,8) SEP ((RSP_0 -64 48),8); (0x10000c008,8) SEP ((RSP_0 -64 56),8); (0x10000c008,8) SEP ((RSP_0 -64 568),1); (0x10000c008,8) SEP ((RSP_0 -64 584),8); (0x10000c008,8) SEP ((RSP_0 -64 592),8); (0x10000c008,8) SEP ((RSP_0 -64 600),8); (0x10000c008,8) SEP ((RSP_0 -64 604),4); (0x10000c008,8) SEP ((RSP_0 -64 612),4); (0x10000c008,8) SEP ((RSP_0 -64 624),8); (0x10000c008,8) SEP ((RSP_0 -64 632),8); (0x10000c008,8) SEP ((RSP_0 -64 648),16); (0x10000c008,8) SEP ((RSP_0 -64 664),16); (0x10000c008,8) SEP ((RSP_0 -64 680),16); (0x10000c008,8) SEP ((RSP_0 -64 696),16); (0x10000c008,8) SEP ((RSP_0 -64 712),16); (0x10000c008,8) SEP ((RSP_0 -64 728),16); (0x10000c008,8) SEP ((RSP_0 -64 744),16); (0x10000c008,8) SEP ((RSP_0 -64 760),16); (0x10000c008,8) SEP ((RSP_0 -64 768),8); (0x10000c008,8) SEP ((RSP_0 -64 776),8); (0x10000c008,8) SEP ((RSP_0 -64 784),8); (0x10000c008,8) SEP ((RSP_0 -64 792),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__free) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "1000074d4: MOV RAX, QWORD PTR [RIP + 19245] 7"
 Post  "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000074db"
 Separations ""
 Assertions  "(RAX,8) SEP (RSP_0,8); (RAX,8) SEP ((RSP_0 -64 8),8); (RAX,8) SEP ((RSP_0 -64 16),8); (RAX,8) SEP ((RSP_0 -64 24),8); (RAX,8) SEP ((RSP_0 -64 32),8); (RAX,8) SEP ((RSP_0 -64 40),8); (RAX,8) SEP ((RSP_0 -64 48),8); (RAX,8) SEP ((RSP_0 -64 56),8); (RAX,8) SEP ((RSP_0 -64 568),1); (RAX,8) SEP ((RSP_0 -64 584),8); (RAX,8) SEP ((RSP_0 -64 592),8); (RAX,8) SEP ((RSP_0 -64 600),8); (RAX,8) SEP ((RSP_0 -64 604),4); (RAX,8) SEP ((RSP_0 -64 612),4); (RAX,8) SEP ((RSP_0 -64 624),8); (RAX,8) SEP ((RSP_0 -64 632),8); (RAX,8) SEP ((RSP_0 -64 648),16); (RAX,8) SEP ((RSP_0 -64 664),16); (RAX,8) SEP ((RSP_0 -64 680),16); (RAX,8) SEP ((RSP_0 -64 696),16); (RAX,8) SEP ((RSP_0 -64 712),16); (RAX,8) SEP ((RSP_0 -64 728),16); (RAX,8) SEP ((RSP_0 -64 744),16); (RAX,8) SEP ((RSP_0 -64 760),16); (RAX,8) SEP ((RSP_0 -64 768),8); (RAX,8) SEP ((RSP_0 -64 776),8); (RAX,8) SEP ((RSP_0 -64 784),8); (RAX,8) SEP ((RSP_0 -64 792),8)"
 Pre   "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "1000074db: MOV RAX, QWORD PTR [RAX] 3"
 Post  "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000074de"
 Separations "((RSP_0 -64 56),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 56),8) SEP (0x10000c000,8); ((RSP_0 -64 56),8) SEP (0x10000c008,8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "1000074de: CMP RAX, QWORD PTR [RBP - 48] 4"
 Post  "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000074e2"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "1000074e2: JNE 4294997238 2"
 Post  "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000071a0, blockId == 20 ##
######################################
*)

htriple "ht_100007372"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "100007372: XOR R14D, R14D 3"
 Post  "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007375"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "100007375: MOV R15B, 1 3"
 Post  "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007378"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "100007378: LEA R13, [RBP - 560] 7"
 Post  "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 568),1] = [(RSP_0 -64 568),1]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 604),4] = [(RSP_0 -64 604),4]_0 ; [(RSP_0 -64 612),4] = [(RSP_0 -64 612),4]_0 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000071a0, blockId == 21 ##
######################################
*)

htriple "ht_1000074aa"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "1000074aa: MOV EAX, R14D 3"
 Post  "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000074ad"
 Separations ""
 Assertions  "((RSP_0 -64 (568 -64 RAX)),1) SEP (RSP_0,8); ((RSP_0 -64 (568 -64 RAX)),1) SEP ((RSP_0 -64 8),8); ((RSP_0 -64 (568 -64 RAX)),1) SEP ((RSP_0 -64 16),8); ((RSP_0 -64 (568 -64 RAX)),1) SEP ((RSP_0 -64 24),8); ((RSP_0 -64 (568 -64 RAX)),1) SEP ((RSP_0 -64 32),8); ((RSP_0 -64 (568 -64 RAX)),1) SEP ((RSP_0 -64 40),8); ((RSP_0 -64 (568 -64 RAX)),1) SEP ((RSP_0 -64 48),8); ((RSP_0 -64 (568 -64 RAX)),1) SEP ((RSP_0 -64 56),8); ((RSP_0 -64 (568 -64 RAX)),1) SEP ((RSP_0 -64 568),1); ((RSP_0 -64 (568 -64 RAX)),1) SEP ((RSP_0 -64 584),8); ((RSP_0 -64 (568 -64 RAX)),1) SEP ((RSP_0 -64 592),8); ((RSP_0 -64 (568 -64 RAX)),1) SEP ((RSP_0 -64 600),8); ((RSP_0 -64 (568 -64 RAX)),1) SEP ((RSP_0 -64 604),4); ((RSP_0 -64 (568 -64 RAX)),1) SEP ((RSP_0 -64 612),4); ((RSP_0 -64 (568 -64 RAX)),1) SEP ((RSP_0 -64 624),8); ((RSP_0 -64 (568 -64 RAX)),1) SEP ((RSP_0 -64 632),8); ((RSP_0 -64 (568 -64 RAX)),1) SEP ((RSP_0 -64 648),16); ((RSP_0 -64 (568 -64 RAX)),1) SEP ((RSP_0 -64 664),16); ((RSP_0 -64 (568 -64 RAX)),1) SEP ((RSP_0 -64 680),16); ((RSP_0 -64 (568 -64 RAX)),1) SEP ((RSP_0 -64 696),16); ((RSP_0 -64 (568 -64 RAX)),1) SEP ((RSP_0 -64 712),16); ((RSP_0 -64 (568 -64 RAX)),1) SEP ((RSP_0 -64 728),16); ((RSP_0 -64 (568 -64 RAX)),1) SEP ((RSP_0 -64 744),16); ((RSP_0 -64 (568 -64 RAX)),1) SEP ((RSP_0 -64 760),16); ((RSP_0 -64 (568 -64 RAX)),1) SEP ((RSP_0 -64 768),8); ((RSP_0 -64 (568 -64 RAX)),1) SEP ((RSP_0 -64 776),8); ((RSP_0 -64 (568 -64 RAX)),1) SEP ((RSP_0 -64 784),8); ((RSP_0 -64 (568 -64 RAX)),1) SEP ((RSP_0 -64 792),8)"
 Pre   "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "1000074ad: MOV BYTE PTR [RBP + RAX - 560], 0 8"
 Post  "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000074b5"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "1000074b5: LEA RDI, [RBP - 560] 7"
 Post  "RDI = (RSP_0 -64 568) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000074bc"
 Separations "((RSP_0 -64 624),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 624),8) SEP (0x10000c000,8); ((RSP_0 -64 624),8) SEP (0x10000c008,8)"
 Assertions  ""
 Pre   "RDI = (RSP_0 -64 568) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "1000074bc: MOV RSI, QWORD PTR [RBP - 616] 7"
 Post  "RDI = (RSP_0 -64 568) ; RSI = RDI_0 ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000074c3"
 Separations ""
 Assertions  ""
 Pre   "RDI = (RSP_0 -64 568) ; RSI = RDI_0 ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "1000074c3: ExternalCall fun__fputs 5"
 Post  "RAX = bot(fun__fputs) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 FunctionConstraints "PRESERVES fun__fputs {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c000,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 568),1];[(RSP_0 -64 584),8];[(RSP_0 -64 592),8];[(RSP_0 -64 600),8];[(RSP_0 -64 604),4];[(RSP_0 -64 612),4];[(RSP_0 -64 624),8];[(RSP_0 -64 632),8];[(RSP_0 -64 648),16];[(RSP_0 -64 664),16];[(RSP_0 -64 680),16];[(RSP_0 -64 696),16];[(RSP_0 -64 712),16];[(RSP_0 -64 728),16];[(RSP_0 -64 744),16];[(RSP_0 -64 760),16];[(RSP_0 -64 768),8];[(RSP_0 -64 776),8];[(RSP_0 -64 784),8];[(RSP_0 -64 792),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000071a0, blockId == 22 ##
######################################
*)

htriple "ht_100007384"
 Separations "((RSP_0 -64 604),4) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 604),4) SEP (0x10000c000,8); ((RSP_0 -64 604),4) SEP (0x10000c008,8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "100007384: MOV DWORD PTR [RBP - 596], R15D 7"
 Post  "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000738b"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "10000738b: MOVSXD RDX, R12D 3"
 Post  "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000738e"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "10000738e: LEA RDI, [RBP - 600] 7"
 Post  "RDI = (RSP_0 -64 608) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007395"
 Separations ""
 Assertions  ""
 Pre   "RDI = (RSP_0 -64 608) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "100007395: MOV RSI, RBX 3"
 Post  "RDI = (RSP_0 -64 608) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007398"
 Separations ""
 Assertions  ""
 Pre   "RDI = (RSP_0 -64 608) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "100007398: ExternalCall fun__mbtowc 5"
 Post  "RAX = bot(fun__mbtowc) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 FunctionConstraints "PRESERVES fun__mbtowc {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c000,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 568),1];[(RSP_0 -64 584),8];[(RSP_0 -64 592),8];[(RSP_0 -64 600),8];[(RSP_0 -64 604),4];[(RSP_0 -64 612),4];[(RSP_0 -64 624),8];[(RSP_0 -64 632),8];[(RSP_0 -64 648),16];[(RSP_0 -64 664),16];[(RSP_0 -64 680),16];[(RSP_0 -64 696),16];[(RSP_0 -64 712),16];[(RSP_0 -64 728),16];[(RSP_0 -64 744),16];[(RSP_0 -64 760),16];[(RSP_0 -64 768),8];[(RSP_0 -64 776),8];[(RSP_0 -64 784),8];[(RSP_0 -64 792),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000739d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__mbtowc) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "10000739d: CMP EAX, 18446744073709551615 3"
 Post  "RAX = bot(fun__mbtowc) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000073a0"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__mbtowc) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "1000073a0: JE 4294996933 2"
 Post  "RAX = bot(fun__mbtowc) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000071a0, blockId == 23 ##
######################################
*)

htriple "ht_1000073c7"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "1000073c7: MOV ESI, R14D 3"
 Post  "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000073ca"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "1000073ca: INC RBX 3"
 Post  "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000073cd"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "1000073cd: MOVSX EDX, AL 3"
 Post  "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000073d0"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "1000073d0: MOV RDI, R13 3"
 Post  "RDI = (RSP_0 -64 568) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000073d3"
 Separations ""
 Assertions  ""
 Pre   "RDI = (RSP_0 -64 568) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "1000073d3: ExternalCall fun_0x1000074fb 5"
 Post  "RAX = bot(fun_0x1000074fb) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 FunctionConstraints "PRESERVES fun_0x1000074fb {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c000,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 568),1];[(RSP_0 -64 584),8];[(RSP_0 -64 592),8];[(RSP_0 -64 600),8];[(RSP_0 -64 604),4];[(RSP_0 -64 612),4];[(RSP_0 -64 624),8];[(RSP_0 -64 632),8];[(RSP_0 -64 648),16];[(RSP_0 -64 664),16];[(RSP_0 -64 680),16];[(RSP_0 -64 696),16];[(RSP_0 -64 712),16];[(RSP_0 -64 728),16];[(RSP_0 -64 744),16];[(RSP_0 -64 760),16];[(RSP_0 -64 768),8];[(RSP_0 -64 776),8];[(RSP_0 -64 784),8];[(RSP_0 -64 792),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000073d8"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000074fb) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "1000073d8: ADD EAX, R14D 3"
 Post  "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000073db"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "1000073db: XOR R15D, R15D 3"
 Post  "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000073de"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "1000073de: MOV R14D, EAX 3"
 Post  "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000073e1"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "1000073e1: JMP 4294997105 5"
 Post  "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000071a0, blockId == 24 ##
######################################
*)

htriple "ht_1000073a2"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__mbtowc) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "1000073a2: MOV R15D, EAX 3"
 Post  "RAX = bot(fun__mbtowc) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__mbtowc)) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000073a5"
 Separations "((RSP_0 -64 608),4) SEP ([0x10000c008,8]_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun__mbtowc) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__mbtowc)) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "1000073a5: MOV EDI, DWORD PTR [RBP - 600] 6"
 Post  "RAX = bot(fun__mbtowc) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__mbtowc)) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000073ab"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__mbtowc) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__mbtowc)) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "1000073ab: CMP RDI, 127 4"
 Post  "RAX = bot(fun__mbtowc) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__mbtowc)) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000073af"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__mbtowc) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__mbtowc)) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "1000073af: JA 4294996966 2"
 Post  "RAX = bot(fun__mbtowc) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__mbtowc)) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000071a0, blockId == 25 ##
######################################
*)

htriple "ht_1000073c5"
 Separations ""
 Assertions  "(RBX,1) SEP (RSP_0,8); (RBX,1) SEP ((RSP_0 -64 8),8); (RBX,1) SEP ((RSP_0 -64 16),8); (RBX,1) SEP ((RSP_0 -64 24),8); (RBX,1) SEP ((RSP_0 -64 32),8); (RBX,1) SEP ((RSP_0 -64 40),8); (RBX,1) SEP ((RSP_0 -64 48),8); (RBX,1) SEP ((RSP_0 -64 56),8); (RBX,1) SEP ((RSP_0 -64 568),1); (RBX,1) SEP ((RSP_0 -64 584),8); (RBX,1) SEP ((RSP_0 -64 592),8); (RBX,1) SEP ((RSP_0 -64 600),8); (RBX,1) SEP ((RSP_0 -64 604),4); (RBX,1) SEP ((RSP_0 -64 612),4); (RBX,1) SEP ((RSP_0 -64 624),8); (RBX,1) SEP ((RSP_0 -64 632),8); (RBX,1) SEP ((RSP_0 -64 648),16); (RBX,1) SEP ((RSP_0 -64 664),16); (RBX,1) SEP ((RSP_0 -64 680),16); (RBX,1) SEP ((RSP_0 -64 696),16); (RBX,1) SEP ((RSP_0 -64 712),16); (RBX,1) SEP ((RSP_0 -64 728),16); (RBX,1) SEP ((RSP_0 -64 744),16); (RBX,1) SEP ((RSP_0 -64 760),16); (RBX,1) SEP ((RSP_0 -64 768),8); (RBX,1) SEP ((RSP_0 -64 776),8); (RBX,1) SEP ((RSP_0 -64 784),8); (RBX,1) SEP ((RSP_0 -64 792),8)"
 Pre   "RAX = bot(fun__mbtowc) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "1000073c5: MOV AL, BYTE PTR [RBX] 2"
 Post  "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000071a0, blockId == 26 ##
######################################
*)

htriple "ht_1000073b1"
 Separations "(0x10000c000,8) SEP (RSP_0,8); (0x10000c000,8) SEP ([0x10000c008,8]_0,8); (0x10000c000,8) SEP ((RSP_0 -64 8),8); (0x10000c000,8) SEP ((RSP_0 -64 16),8); (0x10000c000,8) SEP ((RSP_0 -64 24),8); (0x10000c000,8) SEP ((RSP_0 -64 32),8); (0x10000c000,8) SEP ((RSP_0 -64 40),8); (0x10000c000,8) SEP ((RSP_0 -64 48),8); (0x10000c000,8) SEP ((RSP_0 -64 56),8); (0x10000c000,8) SEP ((RSP_0 -64 568),1); (0x10000c000,8) SEP ((RSP_0 -64 584),8); (0x10000c000,8) SEP ((RSP_0 -64 592),8); (0x10000c000,8) SEP ((RSP_0 -64 600),8); (0x10000c000,8) SEP ((RSP_0 -64 604),4); (0x10000c000,8) SEP ((RSP_0 -64 612),4); (0x10000c000,8) SEP ((RSP_0 -64 624),8); (0x10000c000,8) SEP ((RSP_0 -64 632),8); (0x10000c000,8) SEP ((RSP_0 -64 648),16); (0x10000c000,8) SEP ((RSP_0 -64 664),16); (0x10000c000,8) SEP ((RSP_0 -64 680),16); (0x10000c000,8) SEP ((RSP_0 -64 696),16); (0x10000c000,8) SEP ((RSP_0 -64 712),16); (0x10000c000,8) SEP ((RSP_0 -64 728),16); (0x10000c000,8) SEP ((RSP_0 -64 744),16); (0x10000c000,8) SEP ((RSP_0 -64 760),16); (0x10000c000,8) SEP ((RSP_0 -64 768),8); (0x10000c000,8) SEP ((RSP_0 -64 776),8); (0x10000c000,8) SEP ((RSP_0 -64 784),8); (0x10000c000,8) SEP ((RSP_0 -64 792),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__mbtowc) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__mbtowc)) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "1000073b1: MOV RAX, QWORD PTR [RIP + 19528] 7"
 Post  "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__mbtowc)) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000073b8"
 Separations ""
 Assertions  "((RAX +64 ((RDI *64 4) +64 60)),4) SEP (RSP_0,8); ((RAX +64 ((RDI *64 4) +64 60)),4) SEP ((RSP_0 -64 8),8); ((RAX +64 ((RDI *64 4) +64 60)),4) SEP ((RSP_0 -64 16),8); ((RAX +64 ((RDI *64 4) +64 60)),4) SEP ((RSP_0 -64 24),8); ((RAX +64 ((RDI *64 4) +64 60)),4) SEP ((RSP_0 -64 32),8); ((RAX +64 ((RDI *64 4) +64 60)),4) SEP ((RSP_0 -64 40),8); ((RAX +64 ((RDI *64 4) +64 60)),4) SEP ((RSP_0 -64 48),8); ((RAX +64 ((RDI *64 4) +64 60)),4) SEP ((RSP_0 -64 56),8); ((RAX +64 ((RDI *64 4) +64 60)),4) SEP ((RSP_0 -64 568),1); ((RAX +64 ((RDI *64 4) +64 60)),4) SEP ((RSP_0 -64 584),8); ((RAX +64 ((RDI *64 4) +64 60)),4) SEP ((RSP_0 -64 592),8); ((RAX +64 ((RDI *64 4) +64 60)),4) SEP ((RSP_0 -64 600),8); ((RAX +64 ((RDI *64 4) +64 60)),4) SEP ((RSP_0 -64 604),4); ((RAX +64 ((RDI *64 4) +64 60)),4) SEP ((RSP_0 -64 612),4); ((RAX +64 ((RDI *64 4) +64 60)),4) SEP ((RSP_0 -64 624),8); ((RAX +64 ((RDI *64 4) +64 60)),4) SEP ((RSP_0 -64 632),8); ((RAX +64 ((RDI *64 4) +64 60)),4) SEP ((RSP_0 -64 648),16); ((RAX +64 ((RDI *64 4) +64 60)),4) SEP ((RSP_0 -64 664),16); ((RAX +64 ((RDI *64 4) +64 60)),4) SEP ((RSP_0 -64 680),16); ((RAX +64 ((RDI *64 4) +64 60)),4) SEP ((RSP_0 -64 696),16); ((RAX +64 ((RDI *64 4) +64 60)),4) SEP ((RSP_0 -64 712),16); ((RAX +64 ((RDI *64 4) +64 60)),4) SEP ((RSP_0 -64 728),16); ((RAX +64 ((RDI *64 4) +64 60)),4) SEP ((RSP_0 -64 744),16); ((RAX +64 ((RDI *64 4) +64 60)),4) SEP ((RSP_0 -64 760),16); ((RAX +64 ((RDI *64 4) +64 60)),4) SEP ((RSP_0 -64 768),8); ((RAX +64 ((RDI *64 4) +64 60)),4) SEP ((RSP_0 -64 776),8); ((RAX +64 ((RDI *64 4) +64 60)),4) SEP ((RSP_0 -64 784),8); ((RAX +64 ((RDI *64 4) +64 60)),4) SEP ((RSP_0 -64 792),8)"
 Pre   "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__mbtowc)) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "1000073b8: MOV EAX, DWORD PTR [RAX + RDI * 4 + 60] 4"
 Post  "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__mbtowc)) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000073bc"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__mbtowc)) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "1000073bc: MOV ECX, 262144 5"
 Post  "RCX = 0x40000 ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__mbtowc)) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000073c1"
 Separations ""
 Assertions  ""
 Pre   "RCX = 0x40000 ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__mbtowc)) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "1000073c1: AND EAX, ECX 2"
 Post  "RCX = 0x40000 ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__mbtowc)) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000073c3"
 Separations ""
 Assertions  ""
 Pre   "RCX = 0x40000 ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__mbtowc)) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "1000073c3: JMP 4294996982 2"
 Post  "RCX = 0x40000 ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__mbtowc)) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000071a0, blockId == 27 ##
######################################
*)

htriple "ht_1000073e6"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__mbtowc) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__mbtowc)) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "1000073e6: MOV ESI, 262144 5"
 Post  "RAX = bot(fun__mbtowc) ; RSI = 0x40000 ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__mbtowc)) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000073eb"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__mbtowc) ; RSI = 0x40000 ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__mbtowc)) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "1000073eb: ExternalCall fun____maskrune 5"
 Post  "RAX = bot(fun____maskrune) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__mbtowc)) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 FunctionConstraints "PRESERVES fun____maskrune {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c000,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 568),1];[(RSP_0 -64 584),8];[(RSP_0 -64 592),8];[(RSP_0 -64 600),8];[(RSP_0 -64 604),4];[(RSP_0 -64 612),4];[(RSP_0 -64 624),8];[(RSP_0 -64 632),8];[(RSP_0 -64 648),16];[(RSP_0 -64 664),16];[(RSP_0 -64 680),16];[(RSP_0 -64 696),16];[(RSP_0 -64 712),16];[(RSP_0 -64 728),16];[(RSP_0 -64 744),16];[(RSP_0 -64 760),16];[(RSP_0 -64 768),8];[(RSP_0 -64 776),8];[(RSP_0 -64 784),8];[(RSP_0 -64 792),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000073f0"
 Separations "((RSP_0 -64 608),4) SEP ([0x10000c008,8]_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun____maskrune) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__mbtowc)) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "1000073f0: MOV EDI, DWORD PTR [RBP - 600] 6"
 Post  "RAX = bot(fun____maskrune) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__mbtowc)) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000071a0, blockId == 28 ##
######################################
*)

htriple "ht_1000073f6"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__mbtowc)) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "1000073f6: SUB R12D, R15D 3"
 Post  "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__mbtowc)) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000073f9"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__mbtowc)) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "1000073f9: TEST EAX, EAX 2"
 Post  "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__mbtowc)) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000073fb"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__mbtowc)) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "1000073fb: JE 4294997035 2"
 Post  "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__mbtowc)) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000071a0, blockId == 29 ##
######################################
*)

htriple "ht_1000073fd"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__mbtowc)) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "1000073fd: CMP EDI, 92 3"
 Post  "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__mbtowc)) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007400"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__mbtowc)) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "100007400: JE 4294997035 2"
 Post  "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__mbtowc)) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000071a0, blockId == 30 ##
######################################
*)

htriple "ht_10000742b"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__mbtowc)) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "10000742b: TEST R15D, R15D 3"
 Post  "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__mbtowc)) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000742e"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__mbtowc)) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "10000742e: JLE 4294997145 2"
 Post  "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__mbtowc)) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000071a0, blockId == 31 ##
######################################
*)

htriple "ht_100007402"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__mbtowc)) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "100007402: TEST R15D, R15D 3"
 Post  "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__mbtowc)) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007405"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__mbtowc)) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "100007405: JLE 4294997145 6"
 Post  "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__mbtowc)) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000071a0, blockId == 32 ##
######################################
*)

htriple "ht_10000740b"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__mbtowc)) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "10000740b: INC R15D 3"
 Post  "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = (b32(bot(fun__mbtowc)) +32 1) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000071a0, blockId == 33 ##
######################################
*)

htriple "ht_100007499"
 Separations "((RSP_0 -64 604),4) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 604),4) SEP (0x10000c000,8); ((RSP_0 -64 604),4) SEP (0x10000c008,8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__mbtowc)) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "100007499: MOV R15D, DWORD PTR [RBP - 596] 7"
 Post  "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000071a0, blockId == 34 ##
######################################
*)

htriple "ht_10000740e"
 Separations ""
 Assertions  "(RBX,1) SEP (RSP_0,8); (RBX,1) SEP ((RSP_0 -64 8),8); (RBX,1) SEP ((RSP_0 -64 16),8); (RBX,1) SEP ((RSP_0 -64 24),8); (RBX,1) SEP ((RSP_0 -64 32),8); (RBX,1) SEP ((RSP_0 -64 40),8); (RBX,1) SEP ((RSP_0 -64 48),8); (RBX,1) SEP ((RSP_0 -64 56),8); (RBX,1) SEP ((RSP_0 -64 568),1); (RBX,1) SEP ((RSP_0 -64 584),8); (RBX,1) SEP ((RSP_0 -64 592),8); (RBX,1) SEP ((RSP_0 -64 600),8); (RBX,1) SEP ((RSP_0 -64 604),4); (RBX,1) SEP ((RSP_0 -64 612),4); (RBX,1) SEP ((RSP_0 -64 624),8); (RBX,1) SEP ((RSP_0 -64 632),8); (RBX,1) SEP ((RSP_0 -64 648),16); (RBX,1) SEP ((RSP_0 -64 664),16); (RBX,1) SEP ((RSP_0 -64 680),16); (RBX,1) SEP ((RSP_0 -64 696),16); (RBX,1) SEP ((RSP_0 -64 712),16); (RBX,1) SEP ((RSP_0 -64 728),16); (RBX,1) SEP ((RSP_0 -64 744),16); (RBX,1) SEP ((RSP_0 -64 760),16); (RBX,1) SEP ((RSP_0 -64 768),8); (RBX,1) SEP ((RSP_0 -64 776),8); (RBX,1) SEP ((RSP_0 -64 784),8); (RBX,1) SEP ((RSP_0 -64 792),8)"
 Pre   "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "10000740e: MOV AL, BYTE PTR [RBX] 2"
 Post  "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007410"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "100007410: INC RBX 3"
 Post  "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007413"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "100007413: MOV ECX, R14D 3"
 Post  "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007416"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "100007416: INC R14D 3"
 Post  "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007419"
 Separations ""
 Assertions  "((RSP_0 -64 (568 -64 RCX)),1) SEP (RSP_0,8); ((RSP_0 -64 (568 -64 RCX)),1) SEP ((RSP_0 -64 8),8); ((RSP_0 -64 (568 -64 RCX)),1) SEP ((RSP_0 -64 16),8); ((RSP_0 -64 (568 -64 RCX)),1) SEP ((RSP_0 -64 24),8); ((RSP_0 -64 (568 -64 RCX)),1) SEP ((RSP_0 -64 32),8); ((RSP_0 -64 (568 -64 RCX)),1) SEP ((RSP_0 -64 40),8); ((RSP_0 -64 (568 -64 RCX)),1) SEP ((RSP_0 -64 48),8); ((RSP_0 -64 (568 -64 RCX)),1) SEP ((RSP_0 -64 56),8); ((RSP_0 -64 (568 -64 RCX)),1) SEP ((RSP_0 -64 568),1); ((RSP_0 -64 (568 -64 RCX)),1) SEP ((RSP_0 -64 584),8); ((RSP_0 -64 (568 -64 RCX)),1) SEP ((RSP_0 -64 592),8); ((RSP_0 -64 (568 -64 RCX)),1) SEP ((RSP_0 -64 600),8); ((RSP_0 -64 (568 -64 RCX)),1) SEP ((RSP_0 -64 604),4); ((RSP_0 -64 (568 -64 RCX)),1) SEP ((RSP_0 -64 612),4); ((RSP_0 -64 (568 -64 RCX)),1) SEP ((RSP_0 -64 624),8); ((RSP_0 -64 (568 -64 RCX)),1) SEP ((RSP_0 -64 632),8); ((RSP_0 -64 (568 -64 RCX)),1) SEP ((RSP_0 -64 648),16); ((RSP_0 -64 (568 -64 RCX)),1) SEP ((RSP_0 -64 664),16); ((RSP_0 -64 (568 -64 RCX)),1) SEP ((RSP_0 -64 680),16); ((RSP_0 -64 (568 -64 RCX)),1) SEP ((RSP_0 -64 696),16); ((RSP_0 -64 (568 -64 RCX)),1) SEP ((RSP_0 -64 712),16); ((RSP_0 -64 (568 -64 RCX)),1) SEP ((RSP_0 -64 728),16); ((RSP_0 -64 (568 -64 RCX)),1) SEP ((RSP_0 -64 744),16); ((RSP_0 -64 (568 -64 RCX)),1) SEP ((RSP_0 -64 760),16); ((RSP_0 -64 (568 -64 RCX)),1) SEP ((RSP_0 -64 768),8); ((RSP_0 -64 (568 -64 RCX)),1) SEP ((RSP_0 -64 776),8); ((RSP_0 -64 (568 -64 RCX)),1) SEP ((RSP_0 -64 784),8); ((RSP_0 -64 (568 -64 RCX)),1) SEP ((RSP_0 -64 792),8)"
 Pre   "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "100007419: MOV BYTE PTR [RBP + RCX - 560], AL 7"
 Post  "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007420"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "100007420: DEC R15D 3"
 Post  "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007423"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "100007423: CMP R15D, 1 4"
 Post  "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007427"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "100007427: JG 4294997006 2"
 Post  "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000071a0, blockId == 35 ##
######################################
*)

htriple "ht_100007429"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "100007429: JMP 4294997098 2"
 Post  "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000071a0, blockId == 36 ##
######################################
*)

htriple "ht_100007430"
 Separations "((RSP_0 -64 612),4) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 612),4) SEP (0x10000c000,8); ((RSP_0 -64 612),4) SEP (0x10000c008,8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__mbtowc)) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "100007430: MOV DWORD PTR [RBP - 604], R12D 7"
 Post  "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__mbtowc)) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007437"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__mbtowc)) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "100007437: INC R15D 3"
 Post  "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = (b32(bot(fun__mbtowc)) +32 1) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000743a"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = (b32(bot(fun__mbtowc)) +32 1) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "10000743a: MOV R12, R13 3"
 Post  "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R15 = (b32(bot(fun__mbtowc)) +32 1) ; R13 = (RSP_0 -64 568) ; R12 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000071a0, blockId == 37 ##
######################################
*)

htriple "ht_10000743d"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R12 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "10000743d: MOV R13D, R14D 3"
 Post  "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R12 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007440"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R12 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "100007440: MOV ESI, R14D 3"
 Post  "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R12 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007443"
 Separations ""
 Assertions  "(RBX,1) SEP (RSP_0,8); (RBX,1) SEP ((RSP_0 -64 8),8); (RBX,1) SEP ((RSP_0 -64 16),8); (RBX,1) SEP ((RSP_0 -64 24),8); (RBX,1) SEP ((RSP_0 -64 32),8); (RBX,1) SEP ((RSP_0 -64 40),8); (RBX,1) SEP ((RSP_0 -64 48),8); (RBX,1) SEP ((RSP_0 -64 56),8); (RBX,1) SEP ((RSP_0 -64 568),1); (RBX,1) SEP ((RSP_0 -64 584),8); (RBX,1) SEP ((RSP_0 -64 592),8); (RBX,1) SEP ((RSP_0 -64 600),8); (RBX,1) SEP ((RSP_0 -64 604),4); (RBX,1) SEP ((RSP_0 -64 612),4); (RBX,1) SEP ((RSP_0 -64 624),8); (RBX,1) SEP ((RSP_0 -64 632),8); (RBX,1) SEP ((RSP_0 -64 648),16); (RBX,1) SEP ((RSP_0 -64 664),16); (RBX,1) SEP ((RSP_0 -64 680),16); (RBX,1) SEP ((RSP_0 -64 696),16); (RBX,1) SEP ((RSP_0 -64 712),16); (RBX,1) SEP ((RSP_0 -64 728),16); (RBX,1) SEP ((RSP_0 -64 744),16); (RBX,1) SEP ((RSP_0 -64 760),16); (RBX,1) SEP ((RSP_0 -64 768),8); (RBX,1) SEP ((RSP_0 -64 776),8); (RBX,1) SEP ((RSP_0 -64 784),8); (RBX,1) SEP ((RSP_0 -64 792),8)"
 Pre   "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R12 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "100007443: MOVSX EDX, BYTE PTR [RBX] 3"
 Post  "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R12 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007446"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R12 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "100007446: INC RBX 3"
 Post  "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R12 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007449"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R12 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "100007449: MOV RDI, R12 3"
 Post  "RDI = (RSP_0 -64 568) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R12 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000744c"
 Separations ""
 Assertions  ""
 Pre   "RDI = (RSP_0 -64 568) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R12 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "10000744c: ExternalCall fun_0x1000074fb 5"
 Post  "RAX = bot(fun_0x1000074fb) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R12 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 FunctionConstraints "PRESERVES fun_0x1000074fb {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c000,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 568),1];[(RSP_0 -64 584),8];[(RSP_0 -64 592),8];[(RSP_0 -64 600),8];[(RSP_0 -64 604),4];[(RSP_0 -64 612),4];[(RSP_0 -64 624),8];[(RSP_0 -64 632),8];[(RSP_0 -64 648),16];[(RSP_0 -64 664),16];[(RSP_0 -64 680),16];[(RSP_0 -64 696),16];[(RSP_0 -64 712),16];[(RSP_0 -64 728),16];[(RSP_0 -64 744),16];[(RSP_0 -64 760),16];[(RSP_0 -64 768),8];[(RSP_0 -64 776),8];[(RSP_0 -64 784),8];[(RSP_0 -64 792),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007451"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000074fb) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R12 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "100007451: MOV R14, RAX 3"
 Post  "RAX = bot(fun_0x1000074fb) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun_0x1000074fb) ; R12 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007454"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000074fb) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun_0x1000074fb) ; R12 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "100007454: ADD R14D, R13D 3"
 Post  "RAX = bot(fun_0x1000074fb) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R12 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007457"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000074fb) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R12 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "100007457: DEC R15D 3"
 Post  "RAX = bot(fun_0x1000074fb) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R12 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000745a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000074fb) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R12 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "10000745a: CMP R15D, 1 4"
 Post  "RAX = bot(fun_0x1000074fb) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R12 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000745e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000074fb) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R12 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "10000745e: JG 4294997053 2"
 Post  "RAX = bot(fun_0x1000074fb) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R12 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000071a0, blockId == 38 ##
######################################
*)

htriple "ht_100007460"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000074fb) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R12 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "100007460: MOV R13, R12 3"
 Post  "RAX = bot(fun_0x1000074fb) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 568) ; R12 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007463"
 Separations "((RSP_0 -64 612),4) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 612),4) SEP (0x10000c000,8); ((RSP_0 -64 612),4) SEP (0x10000c008,8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000074fb) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 568) ; R12 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "100007463: MOV R12D, DWORD PTR [RBP - 604] 7"
 Post  "RAX = bot(fun_0x1000074fb) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000071a0, blockId == 39 ##
######################################
*)

htriple "ht_10000746a"
 Separations "((RSP_0 -64 604),4) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 604),4) SEP (0x10000c000,8); ((RSP_0 -64 604),4) SEP (0x10000c008,8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "10000746a: MOV R15D, DWORD PTR [RBP - 596] 7"
 Post  "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000071a0, blockId == 40 ##
######################################
*)

htriple "ht_100007471"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "100007471: CMP R14D, 129 7"
 Post  "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007478"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "100007478: JB 4294997152 2"
 Post  "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000071a0, blockId == 41 ##
######################################
*)

htriple "ht_10000747a"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "10000747a: MOV EAX, R14D 3"
 Post  "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000747d"
 Separations ""
 Assertions  "((RSP_0 -64 (568 -64 RAX)),1) SEP (RSP_0,8); ((RSP_0 -64 (568 -64 RAX)),1) SEP ((RSP_0 -64 8),8); ((RSP_0 -64 (568 -64 RAX)),1) SEP ((RSP_0 -64 16),8); ((RSP_0 -64 (568 -64 RAX)),1) SEP ((RSP_0 -64 24),8); ((RSP_0 -64 (568 -64 RAX)),1) SEP ((RSP_0 -64 32),8); ((RSP_0 -64 (568 -64 RAX)),1) SEP ((RSP_0 -64 40),8); ((RSP_0 -64 (568 -64 RAX)),1) SEP ((RSP_0 -64 48),8); ((RSP_0 -64 (568 -64 RAX)),1) SEP ((RSP_0 -64 56),8); ((RSP_0 -64 (568 -64 RAX)),1) SEP ((RSP_0 -64 568),1); ((RSP_0 -64 (568 -64 RAX)),1) SEP ((RSP_0 -64 584),8); ((RSP_0 -64 (568 -64 RAX)),1) SEP ((RSP_0 -64 592),8); ((RSP_0 -64 (568 -64 RAX)),1) SEP ((RSP_0 -64 600),8); ((RSP_0 -64 (568 -64 RAX)),1) SEP ((RSP_0 -64 604),4); ((RSP_0 -64 (568 -64 RAX)),1) SEP ((RSP_0 -64 612),4); ((RSP_0 -64 (568 -64 RAX)),1) SEP ((RSP_0 -64 624),8); ((RSP_0 -64 (568 -64 RAX)),1) SEP ((RSP_0 -64 632),8); ((RSP_0 -64 (568 -64 RAX)),1) SEP ((RSP_0 -64 648),16); ((RSP_0 -64 (568 -64 RAX)),1) SEP ((RSP_0 -64 664),16); ((RSP_0 -64 (568 -64 RAX)),1) SEP ((RSP_0 -64 680),16); ((RSP_0 -64 (568 -64 RAX)),1) SEP ((RSP_0 -64 696),16); ((RSP_0 -64 (568 -64 RAX)),1) SEP ((RSP_0 -64 712),16); ((RSP_0 -64 (568 -64 RAX)),1) SEP ((RSP_0 -64 728),16); ((RSP_0 -64 (568 -64 RAX)),1) SEP ((RSP_0 -64 744),16); ((RSP_0 -64 (568 -64 RAX)),1) SEP ((RSP_0 -64 760),16); ((RSP_0 -64 (568 -64 RAX)),1) SEP ((RSP_0 -64 768),8); ((RSP_0 -64 (568 -64 RAX)),1) SEP ((RSP_0 -64 776),8); ((RSP_0 -64 (568 -64 RAX)),1) SEP ((RSP_0 -64 784),8); ((RSP_0 -64 (568 -64 RAX)),1) SEP ((RSP_0 -64 792),8)"
 Pre   "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "10000747d: MOV BYTE PTR [RBP + RAX - 560], 0 8"
 Post  "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007485"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "100007485: MOV RDI, R13 3"
 Post  "RDI = (RSP_0 -64 568) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007488"
 Separations "((RSP_0 -64 624),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 624),8) SEP (0x10000c000,8); ((RSP_0 -64 624),8) SEP (0x10000c008,8)"
 Assertions  ""
 Pre   "RDI = (RSP_0 -64 568) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "100007488: MOV RSI, QWORD PTR [RBP - 616] 7"
 Post  "RDI = (RSP_0 -64 568) ; RSI = RDI_0 ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000748f"
 Separations ""
 Assertions  ""
 Pre   "RDI = (RSP_0 -64 568) ; RSI = RDI_0 ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "10000748f: ExternalCall fun__fputs 5"
 Post  "RAX = bot(fun__fputs) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 FunctionConstraints "PRESERVES fun__fputs {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c000,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 568),1];[(RSP_0 -64 584),8];[(RSP_0 -64 592),8];[(RSP_0 -64 600),8];[(RSP_0 -64 604),4];[(RSP_0 -64 612),4];[(RSP_0 -64 624),8];[(RSP_0 -64 632),8];[(RSP_0 -64 648),16];[(RSP_0 -64 664),16];[(RSP_0 -64 680),16];[(RSP_0 -64 696),16];[(RSP_0 -64 712),16];[(RSP_0 -64 728),16];[(RSP_0 -64 744),16];[(RSP_0 -64 760),16];[(RSP_0 -64 768),8];[(RSP_0 -64 776),8];[(RSP_0 -64 784),8];[(RSP_0 -64 792),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007494"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fputs) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "100007494: XOR R14D, R14D 3"
 Post  "RAX = bot(fun__fputs) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007497"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fputs) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "100007497: JMP 4294997152 2"
 Post  "RAX = bot(fun__fputs) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000071a0, blockId == 42 ##
######################################
*)

htriple "ht_1000074a0"
 Separations ""
 Assertions  "(RBX,1) SEP (RSP_0,8); (RBX,1) SEP ((RSP_0 -64 8),8); (RBX,1) SEP ((RSP_0 -64 16),8); (RBX,1) SEP ((RSP_0 -64 24),8); (RBX,1) SEP ((RSP_0 -64 32),8); (RBX,1) SEP ((RSP_0 -64 40),8); (RBX,1) SEP ((RSP_0 -64 48),8); (RBX,1) SEP ((RSP_0 -64 56),8); (RBX,1) SEP ((RSP_0 -64 568),1); (RBX,1) SEP ((RSP_0 -64 584),8); (RBX,1) SEP ((RSP_0 -64 592),8); (RBX,1) SEP ((RSP_0 -64 600),8); (RBX,1) SEP ((RSP_0 -64 604),4); (RBX,1) SEP ((RSP_0 -64 612),4); (RBX,1) SEP ((RSP_0 -64 624),8); (RBX,1) SEP ((RSP_0 -64 632),8); (RBX,1) SEP ((RSP_0 -64 648),16); (RBX,1) SEP ((RSP_0 -64 664),16); (RBX,1) SEP ((RSP_0 -64 680),16); (RBX,1) SEP ((RSP_0 -64 696),16); (RBX,1) SEP ((RSP_0 -64 712),16); (RBX,1) SEP ((RSP_0 -64 728),16); (RBX,1) SEP ((RSP_0 -64 744),16); (RBX,1) SEP ((RSP_0 -64 760),16); (RBX,1) SEP ((RSP_0 -64 768),8); (RBX,1) SEP ((RSP_0 -64 776),8); (RBX,1) SEP ((RSP_0 -64 784),8); (RBX,1) SEP ((RSP_0 -64 792),8)"
 Pre   "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "1000074a0: MOV AL, BYTE PTR [RBX] 2"
 Post  "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000074a2"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "1000074a2: TEST AL, AL 2"
 Post  "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000074a4"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "1000074a4: JNE 4294996863 6"
 Post  "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000071a0, blockId == 43 ##
######################################
*)

htriple "ht_10000737f"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "10000737f: TEST R15B, R15B 3"
 Post  "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007382"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "100007382: JE 4294996935 2"
 Post  "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 568) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000071a0, blockId == 44 ##
######################################
*)

htriple "ht_1000074e4"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "1000074e4: ADD RSP, 760 7"
 Post  "RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000074eb"
 Separations "((RSP_0 -64 40),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 40),8) SEP (0x10000c000,8); ((RSP_0 -64 40),8) SEP (0x10000c008,8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "1000074eb: POP RBX 1"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000074ec"
 Separations "((RSP_0 -64 32),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 32),8) SEP (0x10000c000,8); ((RSP_0 -64 32),8) SEP (0x10000c008,8)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "1000074ec: POP R12 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000074ee"
 Separations "((RSP_0 -64 24),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 24),8) SEP (0x10000c000,8); ((RSP_0 -64 24),8) SEP (0x10000c008,8)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "1000074ee: POP R13 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000074f0"
 Separations "((RSP_0 -64 16),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 16),8) SEP (0x10000c000,8); ((RSP_0 -64 16),8) SEP (0x10000c008,8)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "1000074f0: POP R14 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000074f2"
 Separations "((RSP_0 -64 8),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 8),8) SEP (0x10000c000,8); ((RSP_0 -64 8),8) SEP (0x10000c008,8)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "1000074f2: POP R15 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000074f4"
 Separations ""
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "1000074f4: POP RBP 1"
 Post  "RBX = RBX_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000074f5"
 Separations ""
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "1000074f5: RET  1"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 +64 8) ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000071a0, blockId == 45 ##
######################################
*)

htriple "ht_1000074f6"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 Instruction "1000074f6: ExternalCall fun____stack_chk_fail 5"
 Post  "RAX = bot(fun____stack_chk_fail) ; RSP = (RSP_0 -64 808) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 584),8] = (RSP_0 -64 808) ; [(RSP_0 -64 592),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 600),8] = 0x3000000010 ; [(RSP_0 -64 624),8] = RDI_0 ; [(RSP_0 -64 768),8] = R9_0 ; [(RSP_0 -64 776),8] = R8_0 ; [(RSP_0 -64 784),8] = RCX_0 ; [(RSP_0 -64 792),8] = RDX_0"
 FunctionConstraints "PRESERVES fun____stack_chk_fail {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c000,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 568),1];[(RSP_0 -64 584),8];[(RSP_0 -64 592),8];[(RSP_0 -64 600),8];[(RSP_0 -64 604),4];[(RSP_0 -64 612),4];[(RSP_0 -64 624),8];[(RSP_0 -64 632),8];[(RSP_0 -64 648),16];[(RSP_0 -64 664),16];[(RSP_0 -64 680),16];[(RSP_0 -64 696),16];[(RSP_0 -64 712),16];[(RSP_0 -64 728),16];[(RSP_0 -64 744),16];[(RSP_0 -64 760),16];[(RSP_0 -64 768),8];[(RSP_0 -64 776),8];[(RSP_0 -64 784),8];[(RSP_0 -64 792),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




end
end
