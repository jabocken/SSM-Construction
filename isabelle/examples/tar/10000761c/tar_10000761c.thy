theory tar_10000761c
imports "../../../isabelle/X86_Semantics/X86_Parse_Hoare_Triples"


begin


context semantics
begin

(*
#####################################
## Entry = 10000761c, blockId == 0 ##
#####################################
*)

htriple "ht_10000761c"
 Separations "((RSP_0 -64 8),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 8),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 8),8) SEP (0x10000c000,8); ((RSP_0 -64 8),8) SEP (0x10000c008,8); ((RSP_0 -64 8),8) SEP (0x10000c010,8); ((RSP_0 -64 8),8) SEP ((RSP_0 -64 (88 -64 bot(fun__read))),1)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[0x10000c010,8]_0,8] = [[0x10000c010,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = [(RSP_0 -64 8),8]_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 248),16] = [(RSP_0 -64 248),16]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0"
 Instruction "10000761c: PUSH RBP 1"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[0x10000c010,8]_0,8] = [[0x10000c010,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 248),16] = [(RSP_0 -64 248),16]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000761d"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[0x10000c010,8]_0,8] = [[0x10000c010,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 248),16] = [(RSP_0 -64 248),16]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0"
 Instruction "10000761d: MOV RBP, RSP 3"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[0x10000c010,8]_0,8] = [[0x10000c010,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 248),16] = [(RSP_0 -64 248),16]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007620"
 Separations "((RSP_0 -64 16),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 16),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 16),8) SEP (0x10000c000,8); ((RSP_0 -64 16),8) SEP (0x10000c008,8); ((RSP_0 -64 16),8) SEP (0x10000c010,8); ((RSP_0 -64 16),8) SEP ((RSP_0 -64 (88 -64 bot(fun__read))),1)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[0x10000c010,8]_0,8] = [[0x10000c010,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 248),16] = [(RSP_0 -64 248),16]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0"
 Instruction "100007620: PUSH R15 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[0x10000c010,8]_0,8] = [[0x10000c010,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 248),16] = [(RSP_0 -64 248),16]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007622"
 Separations "((RSP_0 -64 24),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 24),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 24),8) SEP (0x10000c000,8); ((RSP_0 -64 24),8) SEP (0x10000c008,8); ((RSP_0 -64 24),8) SEP (0x10000c010,8); ((RSP_0 -64 24),8) SEP ((RSP_0 -64 (88 -64 bot(fun__read))),1)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[0x10000c010,8]_0,8] = [[0x10000c010,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 248),16] = [(RSP_0 -64 248),16]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0"
 Instruction "100007622: PUSH R14 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[0x10000c010,8]_0,8] = [[0x10000c010,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 248),16] = [(RSP_0 -64 248),16]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007624"
 Separations "((RSP_0 -64 32),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 32),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 32),8) SEP (0x10000c000,8); ((RSP_0 -64 32),8) SEP (0x10000c008,8); ((RSP_0 -64 32),8) SEP (0x10000c010,8); ((RSP_0 -64 32),8) SEP ((RSP_0 -64 (88 -64 bot(fun__read))),1)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[0x10000c010,8]_0,8] = [[0x10000c010,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 248),16] = [(RSP_0 -64 248),16]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0"
 Instruction "100007624: PUSH R13 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[0x10000c010,8]_0,8] = [[0x10000c010,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 248),16] = [(RSP_0 -64 248),16]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007626"
 Separations "((RSP_0 -64 40),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 40),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 40),8) SEP (0x10000c000,8); ((RSP_0 -64 40),8) SEP (0x10000c008,8); ((RSP_0 -64 40),8) SEP (0x10000c010,8); ((RSP_0 -64 40),8) SEP ((RSP_0 -64 (88 -64 bot(fun__read))),1)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[0x10000c010,8]_0,8] = [[0x10000c010,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 248),16] = [(RSP_0 -64 248),16]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0"
 Instruction "100007626: PUSH R12 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[0x10000c010,8]_0,8] = [[0x10000c010,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 248),16] = [(RSP_0 -64 248),16]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007628"
 Separations "((RSP_0 -64 48),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 48),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 48),8) SEP (0x10000c000,8); ((RSP_0 -64 48),8) SEP (0x10000c008,8); ((RSP_0 -64 48),8) SEP (0x10000c010,8); ((RSP_0 -64 48),8) SEP ((RSP_0 -64 (88 -64 bot(fun__read))),1)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[0x10000c010,8]_0,8] = [[0x10000c010,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 248),16] = [(RSP_0 -64 248),16]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0"
 Instruction "100007628: PUSH RBX 1"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[0x10000c010,8]_0,8] = [[0x10000c010,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 248),16] = [(RSP_0 -64 248),16]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007629"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[0x10000c010,8]_0,8] = [[0x10000c010,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 248),16] = [(RSP_0 -64 248),16]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0"
 Instruction "100007629: SUB RSP, 248 7"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[0x10000c010,8]_0,8] = [[0x10000c010,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 248),16] = [(RSP_0 -64 248),16]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007630"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[0x10000c010,8]_0,8] = [[0x10000c010,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 248),16] = [(RSP_0 -64 248),16]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0"
 Instruction "100007630: MOV RBX, RDI 3"
 Post  "RAX = RAX_0 ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[0x10000c010,8]_0,8] = [[0x10000c010,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 248),16] = [(RSP_0 -64 248),16]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007633"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[0x10000c010,8]_0,8] = [[0x10000c010,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 248),16] = [(RSP_0 -64 248),16]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0"
 Instruction "100007633: TEST AL, AL 2"
 Post  "RAX = RAX_0 ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[0x10000c010,8]_0,8] = [[0x10000c010,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 248),16] = [(RSP_0 -64 248),16]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007635"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[0x10000c010,8]_0,8] = [[0x10000c010,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 248),16] = [(RSP_0 -64 248),16]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0"
 Instruction "100007635: JE 4294997612 2"
 Post  "RAX = RAX_0 ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[0x10000c010,8]_0,8] = [[0x10000c010,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 248),16] = [(RSP_0 -64 248),16]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 10000761c, blockId == 1 ##
#####################################
*)

htriple "ht_100007637"
 Separations "((RSP_0 -64 248),16) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 248),16) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 248),16) SEP (0x10000c000,8); ((RSP_0 -64 248),16) SEP (0x10000c008,8); ((RSP_0 -64 248),16) SEP (0x10000c010,8); ((RSP_0 -64 248),16) SEP ((RSP_0 -64 (88 -64 bot(fun__read))),1)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[0x10000c010,8]_0,8] = [[0x10000c010,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 248),16] = [(RSP_0 -64 248),16]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0"
 Instruction "100007637: MOVAPS XMMWORD PTR [RBP - 240], XMM0 7"
 Post  "RAX = RAX_0 ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[0x10000c010,8]_0,8] = [[0x10000c010,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000763e"
 Separations "((RSP_0 -64 232),16) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 232),16) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 232),16) SEP (0x10000c000,8); ((RSP_0 -64 232),16) SEP (0x10000c008,8); ((RSP_0 -64 232),16) SEP (0x10000c010,8); ((RSP_0 -64 232),16) SEP ((RSP_0 -64 (88 -64 bot(fun__read))),1)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[0x10000c010,8]_0,8] = [[0x10000c010,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0"
 Instruction "10000763e: MOVAPS XMMWORD PTR [RBP - 224], XMM1 7"
 Post  "RAX = RAX_0 ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[0x10000c010,8]_0,8] = [[0x10000c010,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007645"
 Separations "((RSP_0 -64 216),16) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 216),16) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 216),16) SEP (0x10000c000,8); ((RSP_0 -64 216),16) SEP (0x10000c008,8); ((RSP_0 -64 216),16) SEP (0x10000c010,8); ((RSP_0 -64 216),16) SEP ((RSP_0 -64 (88 -64 bot(fun__read))),1)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[0x10000c010,8]_0,8] = [[0x10000c010,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0"
 Instruction "100007645: MOVAPS XMMWORD PTR [RBP - 208], XMM2 7"
 Post  "RAX = RAX_0 ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[0x10000c010,8]_0,8] = [[0x10000c010,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000764c"
 Separations "((RSP_0 -64 200),16) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 200),16) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 200),16) SEP (0x10000c000,8); ((RSP_0 -64 200),16) SEP (0x10000c008,8); ((RSP_0 -64 200),16) SEP (0x10000c010,8); ((RSP_0 -64 200),16) SEP ((RSP_0 -64 (88 -64 bot(fun__read))),1)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[0x10000c010,8]_0,8] = [[0x10000c010,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0"
 Instruction "10000764c: MOVAPS XMMWORD PTR [RBP - 192], XMM3 7"
 Post  "RAX = RAX_0 ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[0x10000c010,8]_0,8] = [[0x10000c010,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007653"
 Separations "((RSP_0 -64 184),16) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 184),16) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 184),16) SEP (0x10000c000,8); ((RSP_0 -64 184),16) SEP (0x10000c008,8); ((RSP_0 -64 184),16) SEP (0x10000c010,8); ((RSP_0 -64 184),16) SEP ((RSP_0 -64 (88 -64 bot(fun__read))),1)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[0x10000c010,8]_0,8] = [[0x10000c010,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0"
 Instruction "100007653: MOVAPS XMMWORD PTR [RBP - 176], XMM4 7"
 Post  "RAX = RAX_0 ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[0x10000c010,8]_0,8] = [[0x10000c010,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000765a"
 Separations "((RSP_0 -64 168),16) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 168),16) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 168),16) SEP (0x10000c000,8); ((RSP_0 -64 168),16) SEP (0x10000c008,8); ((RSP_0 -64 168),16) SEP (0x10000c010,8); ((RSP_0 -64 168),16) SEP ((RSP_0 -64 (88 -64 bot(fun__read))),1)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[0x10000c010,8]_0,8] = [[0x10000c010,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0"
 Instruction "10000765a: MOVAPS XMMWORD PTR [RBP - 160], XMM5 7"
 Post  "RAX = RAX_0 ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[0x10000c010,8]_0,8] = [[0x10000c010,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007661"
 Separations "((RSP_0 -64 152),16) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 152),16) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 152),16) SEP (0x10000c000,8); ((RSP_0 -64 152),16) SEP (0x10000c008,8); ((RSP_0 -64 152),16) SEP (0x10000c010,8); ((RSP_0 -64 152),16) SEP ((RSP_0 -64 (88 -64 bot(fun__read))),1)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[0x10000c010,8]_0,8] = [[0x10000c010,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0"
 Instruction "100007661: MOVAPS XMMWORD PTR [RBP - 144], XMM6 7"
 Post  "RAX = RAX_0 ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[0x10000c010,8]_0,8] = [[0x10000c010,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007668"
 Separations "((RSP_0 -64 136),16) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 136),16) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 136),16) SEP (0x10000c000,8); ((RSP_0 -64 136),16) SEP (0x10000c008,8); ((RSP_0 -64 136),16) SEP (0x10000c010,8); ((RSP_0 -64 136),16) SEP ((RSP_0 -64 (88 -64 bot(fun__read))),1)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[0x10000c010,8]_0,8] = [[0x10000c010,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0"
 Instruction "100007668: MOVAPS XMMWORD PTR [RBP - 128], XMM7 4"
 Post  "RAX = RAX_0 ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[0x10000c010,8]_0,8] = [[0x10000c010,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 10000761c, blockId == 2 ##
#####################################
*)

htriple "ht_10000766c"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[0x10000c010,8]_0,8] = [[0x10000c010,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0"
 Instruction "10000766c: LEA RAX, [RBP - 288] 7"
 Post  "RAX = (RSP_0 -64 296) ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[0x10000c010,8]_0,8] = [[0x10000c010,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007673"
 Separations "((RSP_0 -64 288),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 288),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 288),8) SEP (0x10000c000,8); ((RSP_0 -64 288),8) SEP (0x10000c008,8); ((RSP_0 -64 288),8) SEP (0x10000c010,8); ((RSP_0 -64 288),8) SEP ((RSP_0 -64 (88 -64 bot(fun__read))),1)"
 Assertions  ""
 Pre   "RAX = (RSP_0 -64 296) ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[0x10000c010,8]_0,8] = [[0x10000c010,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0"
 Instruction "100007673: MOV QWORD PTR [RAX + 8], RSI 4"
 Post  "RAX = (RSP_0 -64 296) ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[0x10000c010,8]_0,8] = [[0x10000c010,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0 ; [(RSP_0 -64 288),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007677"
 Separations "((RSP_0 -64 280),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 280),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 280),8) SEP (0x10000c000,8); ((RSP_0 -64 280),8) SEP (0x10000c008,8); ((RSP_0 -64 280),8) SEP (0x10000c010,8); ((RSP_0 -64 280),8) SEP ((RSP_0 -64 (88 -64 bot(fun__read))),1)"
 Assertions  ""
 Pre   "RAX = (RSP_0 -64 296) ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[0x10000c010,8]_0,8] = [[0x10000c010,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0 ; [(RSP_0 -64 288),8] = RSI_0"
 Instruction "100007677: MOV QWORD PTR [RAX + 16], RDX 4"
 Post  "RAX = (RSP_0 -64 296) ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[0x10000c010,8]_0,8] = [[0x10000c010,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000767b"
 Separations "((RSP_0 -64 272),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 272),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 272),8) SEP (0x10000c000,8); ((RSP_0 -64 272),8) SEP (0x10000c008,8); ((RSP_0 -64 272),8) SEP (0x10000c010,8); ((RSP_0 -64 272),8) SEP ((RSP_0 -64 (88 -64 bot(fun__read))),1)"
 Assertions  ""
 Pre   "RAX = (RSP_0 -64 296) ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[0x10000c010,8]_0,8] = [[0x10000c010,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 Instruction "10000767b: MOV QWORD PTR [RAX + 24], RCX 4"
 Post  "RAX = (RSP_0 -64 296) ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[0x10000c010,8]_0,8] = [[0x10000c010,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000767f"
 Separations "((RSP_0 -64 264),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 264),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 264),8) SEP (0x10000c000,8); ((RSP_0 -64 264),8) SEP (0x10000c008,8); ((RSP_0 -64 264),8) SEP (0x10000c010,8); ((RSP_0 -64 264),8) SEP ((RSP_0 -64 (88 -64 bot(fun__read))),1)"
 Assertions  ""
 Pre   "RAX = (RSP_0 -64 296) ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[0x10000c010,8]_0,8] = [[0x10000c010,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 Instruction "10000767f: MOV QWORD PTR [RAX + 32], R8 4"
 Post  "RAX = (RSP_0 -64 296) ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[0x10000c010,8]_0,8] = [[0x10000c010,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007683"
 Separations "((RSP_0 -64 256),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 256),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 256),8) SEP (0x10000c000,8); ((RSP_0 -64 256),8) SEP (0x10000c008,8); ((RSP_0 -64 256),8) SEP (0x10000c010,8); ((RSP_0 -64 256),8) SEP ((RSP_0 -64 (88 -64 bot(fun__read))),1)"
 Assertions  ""
 Pre   "RAX = (RSP_0 -64 296) ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[0x10000c010,8]_0,8] = [[0x10000c010,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 Instruction "100007683: MOV QWORD PTR [RAX + 40], R9 4"
 Post  "RAX = (RSP_0 -64 296) ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[0x10000c010,8]_0,8] = [[0x10000c010,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007687"
 Separations "(0x10000c008,8) SEP (RSP_0,8); (0x10000c008,8) SEP ([0x10000c008,8]_0,8); (0x10000c008,8) SEP ([0x10000c010,8]_0,8); (0x10000c008,8) SEP ((RSP_0 -64 8),8); (0x10000c008,8) SEP ((RSP_0 -64 16),8); (0x10000c008,8) SEP ((RSP_0 -64 24),8); (0x10000c008,8) SEP ((RSP_0 -64 32),8); (0x10000c008,8) SEP ((RSP_0 -64 40),8); (0x10000c008,8) SEP ((RSP_0 -64 48),8); (0x10000c008,8) SEP ((RSP_0 -64 56),8); (0x10000c008,8) SEP ((RSP_0 -64 104),8); (0x10000c008,8) SEP ((RSP_0 -64 112),8); (0x10000c008,8) SEP ((RSP_0 -64 120),8); (0x10000c008,8) SEP ((RSP_0 -64 136),16); (0x10000c008,8) SEP ((RSP_0 -64 152),16); (0x10000c008,8) SEP ((RSP_0 -64 168),16); (0x10000c008,8) SEP ((RSP_0 -64 184),16); (0x10000c008,8) SEP ((RSP_0 -64 200),16); (0x10000c008,8) SEP ((RSP_0 -64 216),16); (0x10000c008,8) SEP ((RSP_0 -64 232),16); (0x10000c008,8) SEP ((RSP_0 -64 248),16); (0x10000c008,8) SEP ((RSP_0 -64 256),8); (0x10000c008,8) SEP ((RSP_0 -64 264),8); (0x10000c008,8) SEP ((RSP_0 -64 272),8); (0x10000c008,8) SEP ((RSP_0 -64 280),8); (0x10000c008,8) SEP ((RSP_0 -64 288),8); (0x10000c008,8) SEP ((RSP_0 -64 (88 -64 bot(fun__read))),1)"
 Assertions  ""
 Pre   "RAX = (RSP_0 -64 296) ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[0x10000c010,8]_0,8] = [[0x10000c010,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 Instruction "100007687: MOV RCX, QWORD PTR [RIP + 18810] 7"
 Post  "RAX = (RSP_0 -64 296) ; RBX = RDI_0 ; RCX = [0x10000c008,8]_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[0x10000c010,8]_0,8] = [[0x10000c010,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000768e"
 Separations "([0x10000c008,8]_0,8) SEP (RSP_0,8); ([0x10000c008,8]_0,8) SEP ([0x10000c010,8]_0,8); ([0x10000c008,8]_0,8) SEP (0x10000c000,8); ([0x10000c008,8]_0,8) SEP (0x10000c008,8); ([0x10000c008,8]_0,8) SEP (0x10000c010,8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 8),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 16),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 24),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 32),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 40),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 48),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 56),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 87),1); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 88),1); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 104),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 112),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 120),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 136),16); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 152),16); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 168),16); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 184),16); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 200),16); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 216),16); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 232),16); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 248),16); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 256),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 264),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 272),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 280),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 288),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 (88 -64 bot(fun__read))),1)"
 Assertions  ""
 Pre   "RAX = (RSP_0 -64 296) ; RBX = RDI_0 ; RCX = [0x10000c008,8]_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[0x10000c010,8]_0,8] = [[0x10000c010,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 Instruction "10000768e: MOV RCX, QWORD PTR [RCX] 3"
 Post  "RAX = (RSP_0 -64 296) ; RBX = RDI_0 ; RCX = [[0x10000c008,8]_0,8]_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[0x10000c010,8]_0,8] = [[0x10000c010,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007691"
 Separations "((RSP_0 -64 56),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 56),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 56),8) SEP (0x10000c000,8); ((RSP_0 -64 56),8) SEP (0x10000c008,8); ((RSP_0 -64 56),8) SEP (0x10000c010,8); ((RSP_0 -64 56),8) SEP ((RSP_0 -64 (88 -64 bot(fun__read))),1)"
 Assertions  ""
 Pre   "RAX = (RSP_0 -64 296) ; RBX = RDI_0 ; RCX = [[0x10000c008,8]_0,8]_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[0x10000c010,8]_0,8] = [[0x10000c010,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 Instruction "100007691: MOV QWORD PTR [RBP - 48], RCX 4"
 Post  "RAX = (RSP_0 -64 296) ; RBX = RDI_0 ; RCX = [[0x10000c008,8]_0,8]_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[0x10000c010,8]_0,8] = [[0x10000c010,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007695"
 Separations ""
 Assertions  ""
 Pre   "RAX = (RSP_0 -64 296) ; RBX = RDI_0 ; RCX = [[0x10000c008,8]_0,8]_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[0x10000c010,8]_0,8] = [[0x10000c010,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 Instruction "100007695: LEA RDX, [RBP - 112] 4"
 Post  "RAX = (RSP_0 -64 296) ; RBX = RDI_0 ; RCX = [[0x10000c008,8]_0,8]_0 ; RDX = (RSP_0 -64 120) ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[0x10000c010,8]_0,8] = [[0x10000c010,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007699"
 Separations "((RSP_0 -64 104),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 104),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 104),8) SEP (0x10000c000,8); ((RSP_0 -64 104),8) SEP (0x10000c008,8); ((RSP_0 -64 104),8) SEP (0x10000c010,8); ((RSP_0 -64 104),8) SEP ((RSP_0 -64 (88 -64 bot(fun__read))),1)"
 Assertions  ""
 Pre   "RAX = (RSP_0 -64 296) ; RBX = RDI_0 ; RCX = [[0x10000c008,8]_0,8]_0 ; RDX = (RSP_0 -64 120) ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[0x10000c010,8]_0,8] = [[0x10000c010,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 Instruction "100007699: MOV QWORD PTR [RDX + 16], RAX 4"
 Post  "RAX = (RSP_0 -64 296) ; RBX = RDI_0 ; RCX = [[0x10000c008,8]_0,8]_0 ; RDX = (RSP_0 -64 120) ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[0x10000c010,8]_0,8] = [[0x10000c010,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000769d"
 Separations ""
 Assertions  ""
 Pre   "RAX = (RSP_0 -64 296) ; RBX = RDI_0 ; RCX = [[0x10000c008,8]_0,8]_0 ; RDX = (RSP_0 -64 120) ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[0x10000c010,8]_0,8] = [[0x10000c010,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 Instruction "10000769d: LEA RAX, [RBP + 16] 4"
 Post  "RAX = (RSP_0 +64 0x8) ; RBX = RDI_0 ; RCX = [[0x10000c008,8]_0,8]_0 ; RDX = (RSP_0 -64 120) ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[0x10000c010,8]_0,8] = [[0x10000c010,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000076a1"
 Separations "((RSP_0 -64 112),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 112),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 112),8) SEP (0x10000c000,8); ((RSP_0 -64 112),8) SEP (0x10000c008,8); ((RSP_0 -64 112),8) SEP (0x10000c010,8); ((RSP_0 -64 112),8) SEP ((RSP_0 -64 (88 -64 bot(fun__read))),1)"
 Assertions  ""
 Pre   "RAX = (RSP_0 +64 0x8) ; RBX = RDI_0 ; RCX = [[0x10000c008,8]_0,8]_0 ; RDX = (RSP_0 -64 120) ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[0x10000c010,8]_0,8] = [[0x10000c010,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 Instruction "1000076a1: MOV QWORD PTR [RDX + 8], RAX 4"
 Post  "RAX = (RSP_0 +64 0x8) ; RBX = RDI_0 ; RCX = [[0x10000c008,8]_0,8]_0 ; RDX = (RSP_0 -64 120) ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[0x10000c010,8]_0,8] = [[0x10000c010,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000076a5"
 Separations ""
 Assertions  ""
 Pre   "RAX = (RSP_0 +64 0x8) ; RBX = RDI_0 ; RCX = [[0x10000c008,8]_0,8]_0 ; RDX = (RSP_0 -64 120) ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[0x10000c010,8]_0,8] = [[0x10000c010,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 Instruction "1000076a5: MOVABS RAX, 206158430216 10"
 Post  "RAX = 0x3000000008 ; RBX = RDI_0 ; RCX = [[0x10000c008,8]_0,8]_0 ; RDX = (RSP_0 -64 120) ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[0x10000c010,8]_0,8] = [[0x10000c010,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000076af"
 Separations "((RSP_0 -64 120),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 120),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 120),8) SEP (0x10000c000,8); ((RSP_0 -64 120),8) SEP (0x10000c008,8); ((RSP_0 -64 120),8) SEP (0x10000c010,8); ((RSP_0 -64 120),8) SEP ((RSP_0 -64 (88 -64 bot(fun__read))),1)"
 Assertions  ""
 Pre   "RAX = 0x3000000008 ; RBX = RDI_0 ; RCX = [[0x10000c008,8]_0,8]_0 ; RDX = (RSP_0 -64 120) ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[0x10000c010,8]_0,8] = [[0x10000c010,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 Instruction "1000076af: MOV QWORD PTR [RDX], RAX 3"
 Post  "RAX = 0x3000000008 ; RBX = RDI_0 ; RCX = [[0x10000c008,8]_0,8]_0 ; RDX = (RSP_0 -64 120) ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[0x10000c010,8]_0,8] = [[0x10000c010,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000076b2"
 Separations "(0x10000c010,8) SEP (RSP_0,8); (0x10000c010,8) SEP ([0x10000c008,8]_0,8); (0x10000c010,8) SEP ([0x10000c010,8]_0,8); (0x10000c010,8) SEP ((RSP_0 -64 8),8); (0x10000c010,8) SEP ((RSP_0 -64 16),8); (0x10000c010,8) SEP ((RSP_0 -64 24),8); (0x10000c010,8) SEP ((RSP_0 -64 32),8); (0x10000c010,8) SEP ((RSP_0 -64 40),8); (0x10000c010,8) SEP ((RSP_0 -64 48),8); (0x10000c010,8) SEP ((RSP_0 -64 56),8); (0x10000c010,8) SEP ((RSP_0 -64 104),8); (0x10000c010,8) SEP ((RSP_0 -64 112),8); (0x10000c010,8) SEP ((RSP_0 -64 120),8); (0x10000c010,8) SEP ((RSP_0 -64 136),16); (0x10000c010,8) SEP ((RSP_0 -64 152),16); (0x10000c010,8) SEP ((RSP_0 -64 168),16); (0x10000c010,8) SEP ((RSP_0 -64 184),16); (0x10000c010,8) SEP ((RSP_0 -64 200),16); (0x10000c010,8) SEP ((RSP_0 -64 216),16); (0x10000c010,8) SEP ((RSP_0 -64 232),16); (0x10000c010,8) SEP ((RSP_0 -64 248),16); (0x10000c010,8) SEP ((RSP_0 -64 256),8); (0x10000c010,8) SEP ((RSP_0 -64 264),8); (0x10000c010,8) SEP ((RSP_0 -64 272),8); (0x10000c010,8) SEP ((RSP_0 -64 280),8); (0x10000c010,8) SEP ((RSP_0 -64 288),8); (0x10000c010,8) SEP ((RSP_0 -64 (88 -64 bot(fun__read))),1)"
 Assertions  ""
 Pre   "RAX = 0x3000000008 ; RBX = RDI_0 ; RCX = [[0x10000c008,8]_0,8]_0 ; RDX = (RSP_0 -64 120) ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[0x10000c010,8]_0,8] = [[0x10000c010,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 Instruction "1000076b2: MOV R14, QWORD PTR [RIP + 18775] 7"
 Post  "RAX = 0x3000000008 ; RBX = RDI_0 ; RCX = [[0x10000c008,8]_0,8]_0 ; RDX = (RSP_0 -64 120) ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = [0x10000c010,8]_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[0x10000c010,8]_0,8] = [[0x10000c010,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000076b9"
 Separations "([0x10000c010,8]_0,8) SEP (RSP_0,8); ([0x10000c010,8]_0,8) SEP ([0x10000c008,8]_0,8); ([0x10000c010,8]_0,8) SEP (0x10000c000,8); ([0x10000c010,8]_0,8) SEP (0x10000c008,8); ([0x10000c010,8]_0,8) SEP (0x10000c010,8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 8),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 16),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 24),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 32),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 40),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 48),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 56),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 87),1); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 88),1); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 104),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 112),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 120),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 136),16); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 152),16); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 168),16); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 184),16); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 200),16); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 216),16); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 232),16); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 248),16); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 256),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 264),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 272),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 280),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 288),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 (88 -64 bot(fun__read))),1)"
 Assertions  ""
 Pre   "RAX = 0x3000000008 ; RBX = RDI_0 ; RCX = [[0x10000c008,8]_0,8]_0 ; RDX = (RSP_0 -64 120) ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = [0x10000c010,8]_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[0x10000c010,8]_0,8] = [[0x10000c010,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 Instruction "1000076b9: MOV RDI, QWORD PTR [R14] 3"
 Post  "RAX = 0x3000000008 ; RBX = RDI_0 ; RCX = [[0x10000c008,8]_0,8]_0 ; RDX = (RSP_0 -64 120) ; RDI = [[0x10000c010,8]_0,8]_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = [0x10000c010,8]_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[0x10000c010,8]_0,8] = [[0x10000c010,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000076bc"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x3000000008 ; RBX = RDI_0 ; RCX = [[0x10000c008,8]_0,8]_0 ; RDX = (RSP_0 -64 120) ; RDI = [[0x10000c010,8]_0,8]_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = [0x10000c010,8]_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[0x10000c010,8]_0,8] = [[0x10000c010,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 Instruction "1000076bc: MOV RSI, RBX 3"
 Post  "RAX = 0x3000000008 ; RBX = RDI_0 ; RCX = [[0x10000c008,8]_0,8]_0 ; RDX = (RSP_0 -64 120) ; RDI = [[0x10000c010,8]_0,8]_0 ; RSI = RDI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = [0x10000c010,8]_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[0x10000c010,8]_0,8] = [[0x10000c010,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000076bf"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x3000000008 ; RBX = RDI_0 ; RCX = [[0x10000c008,8]_0,8]_0 ; RDX = (RSP_0 -64 120) ; RDI = [[0x10000c010,8]_0,8]_0 ; RSI = RDI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = [0x10000c010,8]_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[0x10000c010,8]_0,8] = [[0x10000c010,8]_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 Instruction "1000076bf: ExternalCall fun__vfprintf 5"
 Post  "RAX = bot(fun__vfprintf) ; RBX = RDI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = [0x10000c010,8]_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 FunctionConstraints "PRESERVES fun__vfprintf {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c000,8];[0x10000c008,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 104),8];[(RSP_0 -64 112),8];[(RSP_0 -64 120),8];[(RSP_0 -64 136),16];[(RSP_0 -64 152),16];[(RSP_0 -64 168),16];[(RSP_0 -64 184),16];[(RSP_0 -64 200),16];[(RSP_0 -64 216),16];[(RSP_0 -64 232),16];[(RSP_0 -64 248),16];[(RSP_0 -64 256),8];[(RSP_0 -64 264),8];[(RSP_0 -64 272),8];[(RSP_0 -64 280),8];[(RSP_0 -64 288),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000076c4"
 Separations "([0x10000c010,8]_0,8) SEP (RSP_0,8); ([0x10000c010,8]_0,8) SEP ([0x10000c008,8]_0,8); ([0x10000c010,8]_0,8) SEP (0x10000c000,8); ([0x10000c010,8]_0,8) SEP (0x10000c008,8); ([0x10000c010,8]_0,8) SEP (0x10000c010,8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 8),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 16),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 24),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 32),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 40),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 48),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 56),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 87),1); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 88),1); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 104),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 112),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 120),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 136),16); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 152),16); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 168),16); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 184),16); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 200),16); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 216),16); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 232),16); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 248),16); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 256),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 264),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 272),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 280),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 288),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 (88 -64 bot(fun__read))),1)"
 Assertions  ""
 Pre   "RAX = bot(fun__vfprintf) ; RBX = RDI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = [0x10000c010,8]_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 Instruction "1000076c4: MOV RCX, QWORD PTR [R14] 3"
 Post  "RAX = bot(fun__vfprintf) ; RBX = RDI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = [0x10000c010,8]_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000076c7"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__vfprintf) ; RBX = RDI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = [0x10000c010,8]_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 Instruction "1000076c7: LEA RDI, [RIP + 17230] 7"
 Post  "RAX = bot(fun__vfprintf) ; RBX = RDI_0 ; RDI = 0x10000ba1c ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = [0x10000c010,8]_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000076ce"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__vfprintf) ; RBX = RDI_0 ; RDI = 0x10000ba1c ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = [0x10000c010,8]_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 Instruction "1000076ce: MOV ESI, 8 5"
 Post  "RAX = bot(fun__vfprintf) ; RBX = RDI_0 ; RDI = 0x10000ba1c ; RSI = 8 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = [0x10000c010,8]_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000076d3"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__vfprintf) ; RBX = RDI_0 ; RDI = 0x10000ba1c ; RSI = 8 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = [0x10000c010,8]_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 Instruction "1000076d3: MOV EDX, 1 5"
 Post  "RAX = bot(fun__vfprintf) ; RBX = RDI_0 ; RDX = 1 ; RDI = 0x10000ba1c ; RSI = 8 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = [0x10000c010,8]_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000076d8"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__vfprintf) ; RBX = RDI_0 ; RDX = 1 ; RDI = 0x10000ba1c ; RSI = 8 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = [0x10000c010,8]_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 Instruction "1000076d8: ExternalCall fun__fwrite 5"
 Post  "RAX = bot(fun__fwrite) ; RBX = RDI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = [0x10000c010,8]_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 FunctionConstraints "PRESERVES fun__fwrite {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c000,8];[0x10000c008,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 104),8];[(RSP_0 -64 112),8];[(RSP_0 -64 120),8];[(RSP_0 -64 136),16];[(RSP_0 -64 152),16];[(RSP_0 -64 168),16];[(RSP_0 -64 184),16];[(RSP_0 -64 200),16];[(RSP_0 -64 216),16];[(RSP_0 -64 232),16];[(RSP_0 -64 248),16];[(RSP_0 -64 256),8];[(RSP_0 -64 264),8];[(RSP_0 -64 272),8];[(RSP_0 -64 280),8];[(RSP_0 -64 288),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000076dd"
 Separations "([0x10000c010,8]_0,8) SEP (RSP_0,8); ([0x10000c010,8]_0,8) SEP ([0x10000c008,8]_0,8); ([0x10000c010,8]_0,8) SEP (0x10000c000,8); ([0x10000c010,8]_0,8) SEP (0x10000c008,8); ([0x10000c010,8]_0,8) SEP (0x10000c010,8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 8),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 16),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 24),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 32),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 40),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 48),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 56),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 87),1); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 88),1); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 104),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 112),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 120),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 136),16); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 152),16); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 168),16); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 184),16); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 200),16); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 216),16); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 232),16); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 248),16); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 256),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 264),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 272),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 280),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 288),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 (88 -64 bot(fun__read))),1)"
 Assertions  ""
 Pre   "RAX = bot(fun__fwrite) ; RBX = RDI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = [0x10000c010,8]_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 Instruction "1000076dd: MOV RDI, QWORD PTR [R14] 3"
 Post  "RAX = bot(fun__fwrite) ; RBX = RDI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = [0x10000c010,8]_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000076e0"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fwrite) ; RBX = RDI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = [0x10000c010,8]_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 Instruction "1000076e0: ExternalCall fun__fflush 5"
 Post  "RAX = bot(fun__fflush) ; RBX = RDI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = [0x10000c010,8]_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 FunctionConstraints "PRESERVES fun__fflush {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c000,8];[0x10000c008,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 104),8];[(RSP_0 -64 112),8];[(RSP_0 -64 120),8];[(RSP_0 -64 136),16];[(RSP_0 -64 152),16];[(RSP_0 -64 168),16];[(RSP_0 -64 184),16];[(RSP_0 -64 200),16];[(RSP_0 -64 216),16];[(RSP_0 -64 232),16];[(RSP_0 -64 248),16];[(RSP_0 -64 256),8];[(RSP_0 -64 264),8];[(RSP_0 -64 272),8];[(RSP_0 -64 280),8];[(RSP_0 -64 288),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000076e5"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fflush) ; RBX = RDI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = [0x10000c010,8]_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 Instruction "1000076e5: LEA RSI, [RBP - 80] 4"
 Post  "RAX = bot(fun__fflush) ; RBX = RDI_0 ; RSI = (RSP_0 -64 88) ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = [0x10000c010,8]_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000076e9"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fflush) ; RBX = RDI_0 ; RSI = (RSP_0 -64 88) ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = [0x10000c010,8]_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 Instruction "1000076e9: MOV EDX, 31 5"
 Post  "RAX = bot(fun__fflush) ; RBX = RDI_0 ; RDX = 31 ; RSI = (RSP_0 -64 88) ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = [0x10000c010,8]_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000076ee"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fflush) ; RBX = RDI_0 ; RDX = 31 ; RSI = (RSP_0 -64 88) ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = [0x10000c010,8]_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 Instruction "1000076ee: MOV EDI, 2 5"
 Post  "RAX = bot(fun__fflush) ; RBX = RDI_0 ; RDX = 31 ; RDI = 2 ; RSI = (RSP_0 -64 88) ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = [0x10000c010,8]_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000076f3"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fflush) ; RBX = RDI_0 ; RDX = 31 ; RDI = 2 ; RSI = (RSP_0 -64 88) ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = [0x10000c010,8]_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 Instruction "1000076f3: ExternalCall fun__read 5"
 Post  "RAX = bot(fun__read) ; RBX = RDI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = [0x10000c010,8]_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 FunctionConstraints "PRESERVES fun__read {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c000,8];[0x10000c008,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 104),8];[(RSP_0 -64 112),8];[(RSP_0 -64 120),8];[(RSP_0 -64 136),16];[(RSP_0 -64 152),16];[(RSP_0 -64 168),16];[(RSP_0 -64 184),16];[(RSP_0 -64 200),16];[(RSP_0 -64 216),16];[(RSP_0 -64 232),16];[(RSP_0 -64 248),16];[(RSP_0 -64 256),8];[(RSP_0 -64 264),8];[(RSP_0 -64 272),8];[(RSP_0 -64 280),8];[(RSP_0 -64 288),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000076f8"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RBX = RDI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = [0x10000c010,8]_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 Instruction "1000076f8: TEST RAX, RAX 3"
 Post  "RAX = bot(fun__read) ; RBX = RDI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = [0x10000c010,8]_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000076fb"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RBX = RDI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = [0x10000c010,8]_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 Instruction "1000076fb: JS 4294997930 6"
 Post  "RAX = bot(fun__read) ; RBX = RDI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = [0x10000c010,8]_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 10000761c, blockId == 3 ##
#####################################
*)

htriple "ht_100007701"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RBX = RDI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = [0x10000c010,8]_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 Instruction "100007701: XOR R14D, R14D 3"
 Post  "RAX = bot(fun__read) ; RBX = RDI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = 0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007704"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RBX = RDI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = 0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 Instruction "100007704: TEST RAX, RAX 3"
 Post  "RAX = bot(fun__read) ; RBX = RDI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = 0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007707"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RBX = RDI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = 0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 Instruction "100007707: JE 4294997888 2"
 Post  "RAX = bot(fun__read) ; RBX = RDI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = 0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 10000761c, blockId == 4 ##
#####################################
*)

htriple "ht_1000077aa"
 Separations "([0x10000c010,8]_0,8) SEP (RSP_0,8); ([0x10000c010,8]_0,8) SEP ([0x10000c008,8]_0,8); ([0x10000c010,8]_0,8) SEP (0x10000c000,8); ([0x10000c010,8]_0,8) SEP (0x10000c008,8); ([0x10000c010,8]_0,8) SEP (0x10000c010,8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 8),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 16),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 24),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 32),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 40),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 48),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 56),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 87),1); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 88),1); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 104),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 112),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 120),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 136),16); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 152),16); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 168),16); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 184),16); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 200),16); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 216),16); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 232),16); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 248),16); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 256),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 264),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 272),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 280),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 288),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 (88 -64 bot(fun__read))),1)"
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RBX = RDI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = [0x10000c010,8]_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 Instruction "1000077aa: MOV RCX, QWORD PTR [R14] 3"
 Post  "RAX = bot(fun__read) ; RBX = RDI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = [0x10000c010,8]_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000077ad"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RBX = RDI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = [0x10000c010,8]_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 Instruction "1000077ad: LEA RDI, [RIP + 17009] 7"
 Post  "RAX = bot(fun__read) ; RBX = RDI_0 ; RDI = 0x10000ba25 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = [0x10000c010,8]_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000077b4"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RBX = RDI_0 ; RDI = 0x10000ba25 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = [0x10000c010,8]_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 Instruction "1000077b4: MOV ESI, 21 5"
 Post  "RAX = bot(fun__read) ; RBX = RDI_0 ; RDI = 0x10000ba25 ; RSI = 21 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = [0x10000c010,8]_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000077b9"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RBX = RDI_0 ; RDI = 0x10000ba25 ; RSI = 21 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = [0x10000c010,8]_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 Instruction "1000077b9: MOV EDX, 1 5"
 Post  "RAX = bot(fun__read) ; RBX = RDI_0 ; RDX = 1 ; RDI = 0x10000ba25 ; RSI = 21 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = [0x10000c010,8]_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000077be"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RBX = RDI_0 ; RDX = 1 ; RDI = 0x10000ba25 ; RSI = 21 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = [0x10000c010,8]_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 Instruction "1000077be: ExternalCall fun__fwrite 5"
 Post  "RAX = bot(fun__fwrite) ; RBX = RDI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = [0x10000c010,8]_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 FunctionConstraints "PRESERVES fun__fwrite {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c000,8];[0x10000c008,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 104),8];[(RSP_0 -64 112),8];[(RSP_0 -64 120),8];[(RSP_0 -64 136),16];[(RSP_0 -64 152),16];[(RSP_0 -64 168),16];[(RSP_0 -64 184),16];[(RSP_0 -64 200),16];[(RSP_0 -64 216),16];[(RSP_0 -64 232),16];[(RSP_0 -64 248),16];[(RSP_0 -64 256),8];[(RSP_0 -64 264),8];[(RSP_0 -64 272),8];[(RSP_0 -64 280),8];[(RSP_0 -64 288),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000077c3"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fwrite) ; RBX = RDI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = [0x10000c010,8]_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 Instruction "1000077c3: MOV EDI, 1 5"
 Post  "RAX = bot(fun__fwrite) ; RBX = RDI_0 ; RDI = 1 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = [0x10000c010,8]_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000077c8"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fwrite) ; RBX = RDI_0 ; RDI = 1 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = [0x10000c010,8]_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 Instruction "1000077c8: ExternalCall fun__exit 5"
 Post  "RAX = bot(fun__exit) ; RBX = RDI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = [0x10000c010,8]_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 FunctionConstraints "PRESERVES fun__exit {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c000,8];[0x10000c008,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 104),8];[(RSP_0 -64 112),8];[(RSP_0 -64 120),8];[(RSP_0 -64 136),16];[(RSP_0 -64 152),16];[(RSP_0 -64 168),16];[(RSP_0 -64 184),16];[(RSP_0 -64 200),16];[(RSP_0 -64 216),16];[(RSP_0 -64 232),16];[(RSP_0 -64 248),16];[(RSP_0 -64 256),8];[(RSP_0 -64 264),8];[(RSP_0 -64 272),8];[(RSP_0 -64 280),8];[(RSP_0 -64 288),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 10000761c, blockId == 5 ##
#####################################
*)

htriple "ht_100007709"
 Separations "((RSP_0 -64 (88 -64 bot(fun__read))),1) SEP (RSP_0,8); ((RSP_0 -64 (88 -64 bot(fun__read))),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 (88 -64 bot(fun__read))),1) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 (88 -64 bot(fun__read))),1) SEP (0x10000c000,8); ((RSP_0 -64 (88 -64 bot(fun__read))),1) SEP (0x10000c008,8); ((RSP_0 -64 (88 -64 bot(fun__read))),1) SEP (0x10000c010,8); ((RSP_0 -64 (88 -64 bot(fun__read))),1) SEP ((RSP_0 -64 8),8); ((RSP_0 -64 (88 -64 bot(fun__read))),1) SEP ((RSP_0 -64 16),8); ((RSP_0 -64 (88 -64 bot(fun__read))),1) SEP ((RSP_0 -64 24),8); ((RSP_0 -64 (88 -64 bot(fun__read))),1) SEP ((RSP_0 -64 32),8); ((RSP_0 -64 (88 -64 bot(fun__read))),1) SEP ((RSP_0 -64 40),8); ((RSP_0 -64 (88 -64 bot(fun__read))),1) SEP ((RSP_0 -64 48),8); ((RSP_0 -64 (88 -64 bot(fun__read))),1) SEP ((RSP_0 -64 56),8); ((RSP_0 -64 (88 -64 bot(fun__read))),1) SEP ((RSP_0 -64 87),1); ((RSP_0 -64 (88 -64 bot(fun__read))),1) SEP ((RSP_0 -64 88),1); ((RSP_0 -64 (88 -64 bot(fun__read))),1) SEP ((RSP_0 -64 104),8); ((RSP_0 -64 (88 -64 bot(fun__read))),1) SEP ((RSP_0 -64 112),8); ((RSP_0 -64 (88 -64 bot(fun__read))),1) SEP ((RSP_0 -64 120),8); ((RSP_0 -64 (88 -64 bot(fun__read))),1) SEP ((RSP_0 -64 136),16); ((RSP_0 -64 (88 -64 bot(fun__read))),1) SEP ((RSP_0 -64 152),16); ((RSP_0 -64 (88 -64 bot(fun__read))),1) SEP ((RSP_0 -64 168),16); ((RSP_0 -64 (88 -64 bot(fun__read))),1) SEP ((RSP_0 -64 184),16); ((RSP_0 -64 (88 -64 bot(fun__read))),1) SEP ((RSP_0 -64 200),16); ((RSP_0 -64 (88 -64 bot(fun__read))),1) SEP ((RSP_0 -64 216),16); ((RSP_0 -64 (88 -64 bot(fun__read))),1) SEP ((RSP_0 -64 232),16); ((RSP_0 -64 (88 -64 bot(fun__read))),1) SEP ((RSP_0 -64 248),16); ((RSP_0 -64 (88 -64 bot(fun__read))),1) SEP ((RSP_0 -64 256),8); ((RSP_0 -64 (88 -64 bot(fun__read))),1) SEP ((RSP_0 -64 264),8); ((RSP_0 -64 (88 -64 bot(fun__read))),1) SEP ((RSP_0 -64 272),8); ((RSP_0 -64 (88 -64 bot(fun__read))),1) SEP ((RSP_0 -64 280),8); ((RSP_0 -64 (88 -64 bot(fun__read))),1) SEP ((RSP_0 -64 288),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RBX = RDI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = 0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 Instruction "100007709: MOV BYTE PTR [RBP + RAX - 80], 0 5"
 Post  "RAX = bot(fun__read) ; RBX = RDI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = 0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000770e"
 Separations "((RSP_0 -64 88),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 88),1) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 88),1) SEP ((RSP_0 -64 (88 -64 bot(fun__read))),1)"
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RBX = RDI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = 0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 Instruction "10000770e: MOV R15B, BYTE PTR [RBP - 80] 4"
 Post  "RAX = bot(fun__read) ; RBX = RDI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007712"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RBX = RDI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 Instruction "100007712: TEST R15B, R15B 3"
 Post  "RAX = bot(fun__read) ; RBX = RDI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007715"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RBX = RDI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 Instruction "100007715: JE 4294997888 2"
 Post  "RAX = bot(fun__read) ; RBX = RDI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 10000761c, blockId == 6 ##
#####################################
*)

htriple "ht_100007780"
 Separations "(0x10000c008,8) SEP (RSP_0,8); (0x10000c008,8) SEP ([0x10000c008,8]_0,8); (0x10000c008,8) SEP ([0x10000c010,8]_0,8); (0x10000c008,8) SEP ((RSP_0 -64 8),8); (0x10000c008,8) SEP ((RSP_0 -64 16),8); (0x10000c008,8) SEP ((RSP_0 -64 24),8); (0x10000c008,8) SEP ((RSP_0 -64 32),8); (0x10000c008,8) SEP ((RSP_0 -64 40),8); (0x10000c008,8) SEP ((RSP_0 -64 48),8); (0x10000c008,8) SEP ((RSP_0 -64 56),8); (0x10000c008,8) SEP ((RSP_0 -64 104),8); (0x10000c008,8) SEP ((RSP_0 -64 112),8); (0x10000c008,8) SEP ((RSP_0 -64 120),8); (0x10000c008,8) SEP ((RSP_0 -64 136),16); (0x10000c008,8) SEP ((RSP_0 -64 152),16); (0x10000c008,8) SEP ((RSP_0 -64 168),16); (0x10000c008,8) SEP ((RSP_0 -64 184),16); (0x10000c008,8) SEP ((RSP_0 -64 200),16); (0x10000c008,8) SEP ((RSP_0 -64 216),16); (0x10000c008,8) SEP ((RSP_0 -64 232),16); (0x10000c008,8) SEP ((RSP_0 -64 248),16); (0x10000c008,8) SEP ((RSP_0 -64 256),8); (0x10000c008,8) SEP ((RSP_0 -64 264),8); (0x10000c008,8) SEP ((RSP_0 -64 272),8); (0x10000c008,8) SEP ((RSP_0 -64 280),8); (0x10000c008,8) SEP ((RSP_0 -64 288),8); (0x10000c008,8) SEP ((RSP_0 -64 (88 -64 bot(fun__read))),1)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 Instruction "100007780: MOV RAX, QWORD PTR [RIP + 18561] 7"
 Post  "RAX = [0x10000c008,8]_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007787"
 Separations "([0x10000c008,8]_0,8) SEP (RSP_0,8); ([0x10000c008,8]_0,8) SEP ([0x10000c010,8]_0,8); ([0x10000c008,8]_0,8) SEP (0x10000c000,8); ([0x10000c008,8]_0,8) SEP (0x10000c008,8); ([0x10000c008,8]_0,8) SEP (0x10000c010,8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 8),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 16),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 24),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 32),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 40),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 48),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 56),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 87),1); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 88),1); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 104),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 112),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 120),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 136),16); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 152),16); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 168),16); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 184),16); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 200),16); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 216),16); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 232),16); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 248),16); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 256),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 264),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 272),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 280),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 288),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 (88 -64 bot(fun__read))),1)"
 Assertions  ""
 Pre   "RAX = [0x10000c008,8]_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 Instruction "100007787: MOV RAX, QWORD PTR [RAX] 3"
 Post  "RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000778a"
 Separations "((RSP_0 -64 56),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 56),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 56),8) SEP (0x10000c000,8); ((RSP_0 -64 56),8) SEP (0x10000c008,8); ((RSP_0 -64 56),8) SEP (0x10000c010,8); ((RSP_0 -64 56),8) SEP ((RSP_0 -64 (88 -64 bot(fun__read))),1)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 Instruction "10000778a: CMP RAX, QWORD PTR [RBP - 48] 4"
 Post  "RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000778e"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 Instruction "10000778e: JNE 4294997925 2"
 Post  "RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 10000761c, blockId == 7 ##
#####################################
*)

htriple "ht_100007717"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RBX = RDI_0 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 Instruction "100007717: LEA RBX, [RBP - 79] 4"
 Post  "RAX = bot(fun__read) ; RBX = (RSP_0 -64 87) ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000771b"
 Separations "(0x10000c000,8) SEP (RSP_0,8); (0x10000c000,8) SEP ([0x10000c008,8]_0,8); (0x10000c000,8) SEP ([0x10000c010,8]_0,8); (0x10000c000,8) SEP ((RSP_0 -64 8),8); (0x10000c000,8) SEP ((RSP_0 -64 16),8); (0x10000c000,8) SEP ((RSP_0 -64 24),8); (0x10000c000,8) SEP ((RSP_0 -64 32),8); (0x10000c000,8) SEP ((RSP_0 -64 40),8); (0x10000c000,8) SEP ((RSP_0 -64 48),8); (0x10000c000,8) SEP ((RSP_0 -64 56),8); (0x10000c000,8) SEP ((RSP_0 -64 104),8); (0x10000c000,8) SEP ((RSP_0 -64 112),8); (0x10000c000,8) SEP ((RSP_0 -64 120),8); (0x10000c000,8) SEP ((RSP_0 -64 136),16); (0x10000c000,8) SEP ((RSP_0 -64 152),16); (0x10000c000,8) SEP ((RSP_0 -64 168),16); (0x10000c000,8) SEP ((RSP_0 -64 184),16); (0x10000c000,8) SEP ((RSP_0 -64 200),16); (0x10000c000,8) SEP ((RSP_0 -64 216),16); (0x10000c000,8) SEP ((RSP_0 -64 232),16); (0x10000c000,8) SEP ((RSP_0 -64 248),16); (0x10000c000,8) SEP ((RSP_0 -64 256),8); (0x10000c000,8) SEP ((RSP_0 -64 264),8); (0x10000c000,8) SEP ((RSP_0 -64 272),8); (0x10000c000,8) SEP ((RSP_0 -64 280),8); (0x10000c000,8) SEP ((RSP_0 -64 288),8); (0x10000c000,8) SEP ((RSP_0 -64 (88 -64 bot(fun__read))),1)"
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RBX = (RSP_0 -64 87) ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 Instruction "10000771b: MOV R12, QWORD PTR [RIP + 18654] 7"
 Post  "RAX = bot(fun__read) ; RBX = (RSP_0 -64 87) ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; R13 = R13_0 ; R12 = [0x10000c000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007722"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RBX = (RSP_0 -64 87) ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; R13 = R13_0 ; R12 = [0x10000c000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 Instruction "100007722: MOV R13D, 16384 6"
 Post  "RAX = bot(fun__read) ; RBX = (RSP_0 -64 87) ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; R13 = 0x4000 ; R12 = [0x10000c000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 10000761c, blockId == 8 ##
#####################################
*)

htriple "ht_10000772d"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; R13 = 0x4000 ; R12 = [0x10000c000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 Instruction "10000772d: MOVZX EAX, R15B 4"
 Post  "RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; R13 = 0x4000 ; R12 = [0x10000c000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007731"
 Separations ""
 Assertions  "(([0x10000c000,8]_0 +64 ((RAX *64 4) +64 60)),4) SEP (RSP_0,8); (([0x10000c000,8]_0 +64 ((RAX *64 4) +64 60)),4) SEP ((RSP_0 -64 8),8); (([0x10000c000,8]_0 +64 ((RAX *64 4) +64 60)),4) SEP ((RSP_0 -64 16),8); (([0x10000c000,8]_0 +64 ((RAX *64 4) +64 60)),4) SEP ((RSP_0 -64 24),8); (([0x10000c000,8]_0 +64 ((RAX *64 4) +64 60)),4) SEP ((RSP_0 -64 32),8); (([0x10000c000,8]_0 +64 ((RAX *64 4) +64 60)),4) SEP ((RSP_0 -64 40),8); (([0x10000c000,8]_0 +64 ((RAX *64 4) +64 60)),4) SEP ((RSP_0 -64 48),8); (([0x10000c000,8]_0 +64 ((RAX *64 4) +64 60)),4) SEP ((RSP_0 -64 56),8); (([0x10000c000,8]_0 +64 ((RAX *64 4) +64 60)),4) SEP ((RSP_0 -64 104),8); (([0x10000c000,8]_0 +64 ((RAX *64 4) +64 60)),4) SEP ((RSP_0 -64 112),8); (([0x10000c000,8]_0 +64 ((RAX *64 4) +64 60)),4) SEP ((RSP_0 -64 120),8); (([0x10000c000,8]_0 +64 ((RAX *64 4) +64 60)),4) SEP ((RSP_0 -64 136),16); (([0x10000c000,8]_0 +64 ((RAX *64 4) +64 60)),4) SEP ((RSP_0 -64 152),16); (([0x10000c000,8]_0 +64 ((RAX *64 4) +64 60)),4) SEP ((RSP_0 -64 168),16); (([0x10000c000,8]_0 +64 ((RAX *64 4) +64 60)),4) SEP ((RSP_0 -64 184),16); (([0x10000c000,8]_0 +64 ((RAX *64 4) +64 60)),4) SEP ((RSP_0 -64 200),16); (([0x10000c000,8]_0 +64 ((RAX *64 4) +64 60)),4) SEP ((RSP_0 -64 216),16); (([0x10000c000,8]_0 +64 ((RAX *64 4) +64 60)),4) SEP ((RSP_0 -64 232),16); (([0x10000c000,8]_0 +64 ((RAX *64 4) +64 60)),4) SEP ((RSP_0 -64 248),16); (([0x10000c000,8]_0 +64 ((RAX *64 4) +64 60)),4) SEP ((RSP_0 -64 256),8); (([0x10000c000,8]_0 +64 ((RAX *64 4) +64 60)),4) SEP ((RSP_0 -64 264),8); (([0x10000c000,8]_0 +64 ((RAX *64 4) +64 60)),4) SEP ((RSP_0 -64 272),8); (([0x10000c000,8]_0 +64 ((RAX *64 4) +64 60)),4) SEP ((RSP_0 -64 280),8); (([0x10000c000,8]_0 +64 ((RAX *64 4) +64 60)),4) SEP ((RSP_0 -64 288),8)"
 Pre   "RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; R13 = 0x4000 ; R12 = [0x10000c000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 Instruction "100007731: MOV EAX, DWORD PTR [R12 + RAX * 4 + 60] 5"
 Post  "RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; R13 = 0x4000 ; R12 = [0x10000c000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007736"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; R13 = 0x4000 ; R12 = [0x10000c000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 Instruction "100007736: AND EAX, R13D 3"
 Post  "RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; R13 = 0x4000 ; R12 = [0x10000c000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007739"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; R13 = 0x4000 ; R12 = [0x10000c000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 Instruction "100007739: JMP 4294997833 2"
 Post  "RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; R13 = 0x4000 ; R12 = [0x10000c000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 10000761c, blockId == 9 ##
#####################################
*)

htriple "ht_10000773b"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; R13 = 0x4000 ; R12 = [0x10000c000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 Instruction "10000773b: MOVZX EDI, R15B 4"
 Post  "RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; R13 = 0x4000 ; R12 = [0x10000c000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000773f"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; R13 = 0x4000 ; R12 = [0x10000c000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 Instruction "10000773f: MOV ESI, 16384 5"
 Post  "RSI = 0x4000 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; R13 = 0x4000 ; R12 = [0x10000c000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007744"
 Separations ""
 Assertions  ""
 Pre   "RSI = 0x4000 ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; R13 = 0x4000 ; R12 = [0x10000c000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 Instruction "100007744: ExternalCall fun____maskrune 5"
 Post  "RAX = bot(fun____maskrune) ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; R13 = 0x4000 ; R12 = [0x10000c000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 FunctionConstraints "PRESERVES fun____maskrune {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c000,8];[0x10000c008,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 104),8];[(RSP_0 -64 112),8];[(RSP_0 -64 120),8];[(RSP_0 -64 136),16];[(RSP_0 -64 152),16];[(RSP_0 -64 168),16];[(RSP_0 -64 184),16];[(RSP_0 -64 200),16];[(RSP_0 -64 216),16];[(RSP_0 -64 232),16];[(RSP_0 -64 248),16];[(RSP_0 -64 256),8];[(RSP_0 -64 264),8];[(RSP_0 -64 272),8];[(RSP_0 -64 280),8];[(RSP_0 -64 288),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000761c, blockId == 10 ##
######################################
*)

htriple "ht_100007749"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; R13 = 0x4000 ; R12 = [0x10000c000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 Instruction "100007749: TEST EAX, EAX 2"
 Post  "RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; R13 = 0x4000 ; R12 = [0x10000c000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000774b"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; R13 = 0x4000 ; R12 = [0x10000c000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 Instruction "10000774b: JE 4294997850 2"
 Post  "RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; R13 = 0x4000 ; R12 = [0x10000c000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000761c, blockId == 11 ##
######################################
*)

htriple "ht_10000774d"
 Separations ""
 Assertions  "(RBX,1) SEP (RSP_0,8); (RBX,1) SEP ((RSP_0 -64 8),8); (RBX,1) SEP ((RSP_0 -64 16),8); (RBX,1) SEP ((RSP_0 -64 24),8); (RBX,1) SEP ((RSP_0 -64 32),8); (RBX,1) SEP ((RSP_0 -64 40),8); (RBX,1) SEP ((RSP_0 -64 48),8); (RBX,1) SEP ((RSP_0 -64 56),8); (RBX,1) SEP ((RSP_0 -64 104),8); (RBX,1) SEP ((RSP_0 -64 112),8); (RBX,1) SEP ((RSP_0 -64 120),8); (RBX,1) SEP ((RSP_0 -64 136),16); (RBX,1) SEP ((RSP_0 -64 152),16); (RBX,1) SEP ((RSP_0 -64 168),16); (RBX,1) SEP ((RSP_0 -64 184),16); (RBX,1) SEP ((RSP_0 -64 200),16); (RBX,1) SEP ((RSP_0 -64 216),16); (RBX,1) SEP ((RSP_0 -64 232),16); (RBX,1) SEP ((RSP_0 -64 248),16); (RBX,1) SEP ((RSP_0 -64 256),8); (RBX,1) SEP ((RSP_0 -64 264),8); (RBX,1) SEP ((RSP_0 -64 272),8); (RBX,1) SEP ((RSP_0 -64 280),8); (RBX,1) SEP ((RSP_0 -64 288),8)"
 Pre   "RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; R13 = 0x4000 ; R12 = [0x10000c000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 Instruction "10000774d: MOV R15B, BYTE PTR [RBX] 3"
 Post  "RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; R13 = 0x4000 ; R12 = [0x10000c000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007750"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; R13 = 0x4000 ; R12 = [0x10000c000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 Instruction "100007750: INC RBX 3"
 Post  "RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; R13 = 0x4000 ; R12 = [0x10000c000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007753"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; R13 = 0x4000 ; R12 = [0x10000c000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 Instruction "100007753: TEST R15B, R15B 3"
 Post  "RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; R13 = 0x4000 ; R12 = [0x10000c000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007756"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; R13 = 0x4000 ; R12 = [0x10000c000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 Instruction "100007756: JNE 4294997800 2"
 Post  "RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; R13 = 0x4000 ; R12 = [0x10000c000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000761c, blockId == 12 ##
######################################
*)

htriple "ht_10000775a"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; R13 = 0x4000 ; R12 = [0x10000c000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 Instruction "10000775a: MOVSX EAX, R15B 4"
 Post  "RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; R13 = 0x4000 ; R12 = [0x10000c000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000775e"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; R13 = 0x4000 ; R12 = [0x10000c000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 Instruction "10000775e: MOV R14D, 1 6"
 Post  "RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R14 = 1 ; R13 = 0x4000 ; R12 = [0x10000c000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007764"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R14 = 1 ; R13 = 0x4000 ; R12 = [0x10000c000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 Instruction "100007764: CMP EAX, 109 3"
 Post  "RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R14 = 1 ; R13 = 0x4000 ; R12 = [0x10000c000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007767"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R14 = 1 ; R13 = 0x4000 ; R12 = [0x10000c000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 Instruction "100007767: JG 4294997877 2"
 Post  "RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R14 = 1 ; R13 = 0x4000 ; R12 = [0x10000c000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000761c, blockId == 13 ##
######################################
*)

htriple "ht_100007728"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; R13 = 0x4000 ; R12 = [0x10000c000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 Instruction "100007728: TEST R15B, R15B 3"
 Post  "RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; R13 = 0x4000 ; R12 = [0x10000c000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000772b"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; R13 = 0x4000 ; R12 = [0x10000c000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 Instruction "10000772b: JS 4294997819 2"
 Post  "RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; R13 = 0x4000 ; R12 = [0x10000c000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000761c, blockId == 14 ##
######################################
*)

htriple "ht_100007758"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; R13 = 0x4000 ; R12 = [0x10000c000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 Instruction "100007758: JMP 4294997888 2"
 Post  "RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; R13 = 0x4000 ; R12 = [0x10000c000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000761c, blockId == 15 ##
######################################
*)

htriple "ht_100007769"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R14 = 1 ; R13 = 0x4000 ; R12 = [0x10000c000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 Instruction "100007769: CMP EAX, 78 3"
 Post  "RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R14 = 1 ; R13 = 0x4000 ; R12 = [0x10000c000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000776c"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R14 = 1 ; R13 = 0x4000 ; R12 = [0x10000c000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 Instruction "10000776c: JE 4294997885 2"
 Post  "RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R14 = 1 ; R13 = 0x4000 ; R12 = [0x10000c000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000761c, blockId == 16 ##
######################################
*)

htriple "ht_100007775"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R14 = 1 ; R13 = 0x4000 ; R12 = [0x10000c000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 Instruction "100007775: CMP EAX, 121 3"
 Post  "RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R14 = 1 ; R13 = 0x4000 ; R12 = [0x10000c000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007778"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R14 = 1 ; R13 = 0x4000 ; R12 = [0x10000c000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 Instruction "100007778: JE 4294997888 2"
 Post  "RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R14 = 1 ; R13 = 0x4000 ; R12 = [0x10000c000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000761c, blockId == 17 ##
######################################
*)

htriple "ht_10000776e"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R14 = 1 ; R13 = 0x4000 ; R12 = [0x10000c000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 Instruction "10000776e: CMP EAX, 89 3"
 Post  "RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R14 = 1 ; R13 = 0x4000 ; R12 = [0x10000c000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007771"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R14 = 1 ; R13 = 0x4000 ; R12 = [0x10000c000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 Instruction "100007771: JE 4294997888 2"
 Post  "RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R14 = 1 ; R13 = 0x4000 ; R12 = [0x10000c000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000761c, blockId == 18 ##
######################################
*)

htriple "ht_10000777d"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R14 = 1 ; R13 = 0x4000 ; R12 = [0x10000c000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 Instruction "10000777d: XOR R14D, R14D 3"
 Post  "RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; R13 = 0x4000 ; R12 = [0x10000c000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000761c, blockId == 19 ##
######################################
*)

htriple "ht_100007773"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R14 = 1 ; R13 = 0x4000 ; R12 = [0x10000c000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 Instruction "100007773: JMP 4294997885 2"
 Post  "RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R14 = 1 ; R13 = 0x4000 ; R12 = [0x10000c000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000761c, blockId == 20 ##
######################################
*)

htriple "ht_10000777a"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R14 = 1 ; R13 = 0x4000 ; R12 = [0x10000c000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 Instruction "10000777a: CMP EAX, 110 3"
 Post  "RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; R14 = 1 ; R13 = 0x4000 ; R12 = [0x10000c000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000761c, blockId == 21 ##
######################################
*)

htriple "ht_100007790"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 Instruction "100007790: MOV EAX, R14D 3"
 Post  "RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007793"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 Instruction "100007793: ADD RSP, 248 7"
 Post  "RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000779a"
 Separations "((RSP_0 -64 40),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 40),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 40),8) SEP (0x10000c000,8); ((RSP_0 -64 40),8) SEP (0x10000c008,8); ((RSP_0 -64 40),8) SEP (0x10000c010,8); ((RSP_0 -64 40),8) SEP ((RSP_0 -64 (88 -64 bot(fun__read))),1)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 Instruction "10000779a: POP RBX 1"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000779b"
 Separations "((RSP_0 -64 32),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 32),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 32),8) SEP (0x10000c000,8); ((RSP_0 -64 32),8) SEP (0x10000c008,8); ((RSP_0 -64 32),8) SEP (0x10000c010,8); ((RSP_0 -64 32),8) SEP ((RSP_0 -64 (88 -64 bot(fun__read))),1)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 Instruction "10000779b: POP R12 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000779d"
 Separations "((RSP_0 -64 24),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 24),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 24),8) SEP (0x10000c000,8); ((RSP_0 -64 24),8) SEP (0x10000c008,8); ((RSP_0 -64 24),8) SEP (0x10000c010,8); ((RSP_0 -64 24),8) SEP ((RSP_0 -64 (88 -64 bot(fun__read))),1)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 Instruction "10000779d: POP R13 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000779f"
 Separations "((RSP_0 -64 16),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 16),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 16),8) SEP (0x10000c000,8); ((RSP_0 -64 16),8) SEP (0x10000c008,8); ((RSP_0 -64 16),8) SEP (0x10000c010,8); ((RSP_0 -64 16),8) SEP ((RSP_0 -64 (88 -64 bot(fun__read))),1)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 Instruction "10000779f: POP R14 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000077a1"
 Separations "((RSP_0 -64 8),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 8),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 8),8) SEP (0x10000c000,8); ((RSP_0 -64 8),8) SEP (0x10000c008,8); ((RSP_0 -64 8),8) SEP (0x10000c010,8); ((RSP_0 -64 8),8) SEP ((RSP_0 -64 (88 -64 bot(fun__read))),1)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 Instruction "1000077a1: POP R15 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000077a3"
 Separations ""
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 Instruction "1000077a3: POP RBP 1"
 Post  "RBX = RBX_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000077a4"
 Separations ""
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 Instruction "1000077a4: RET  1"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 +64 8) ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000761c, blockId == 22 ##
######################################
*)

htriple "ht_1000077a5"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 Instruction "1000077a5: ExternalCall fun____stack_chk_fail 5"
 Post  "RAX = bot(fun____stack_chk_fail) ; RSP = (RSP_0 -64 296) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c000,8] = [0x10000c000,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 104),8] = (RSP_0 -64 296) ; [(RSP_0 -64 112),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 120),8] = 0x3000000008 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0 ; [(RSP_0 -64 272),8] = RCX_0 ; [(RSP_0 -64 280),8] = RDX_0 ; [(RSP_0 -64 288),8] = RSI_0"
 FunctionConstraints "PRESERVES fun____stack_chk_fail {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c000,8];[0x10000c008,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 104),8];[(RSP_0 -64 112),8];[(RSP_0 -64 120),8];[(RSP_0 -64 136),16];[(RSP_0 -64 152),16];[(RSP_0 -64 168),16];[(RSP_0 -64 184),16];[(RSP_0 -64 200),16];[(RSP_0 -64 216),16];[(RSP_0 -64 232),16];[(RSP_0 -64 248),16];[(RSP_0 -64 256),8];[(RSP_0 -64 264),8];[(RSP_0 -64 272),8];[(RSP_0 -64 280),8];[(RSP_0 -64 288),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




end
end
