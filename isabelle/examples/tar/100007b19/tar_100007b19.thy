theory tar_100007b19
imports "../../../isabelle/X86_Semantics/X86_Parse_Hoare_Triples"


begin


context semantics
begin

(*
#####################################
## Entry = 100007b19, blockId == 0 ##
#####################################
*)

htriple "ht_100007b19"
 Separations "((RSP_0 -64 8),8) SEP (RSI_0,1); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 184),1); ((RSP_0 -64 8),8) SEP ((RSI_0 +64 1),1); ((RSP_0 -64 8),8) SEP ((RSI_0 +64 2),1); ((RSP_0 -64 8),8) SEP ((RSI_0 +64 3),1); ((RSP_0 -64 8),8) SEP ((RSI_0 +64 4),1); ((RSP_0 -64 8),8) SEP ((RSI_0 +64 5),1); ((RSP_0 -64 8),8) SEP ((RSI_0 +64 6),1); ((RSP_0 -64 8),8) SEP ((RSI_0 +64 7),1)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = [(RSP_0 -64 8),8]_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
 Instruction "100007b19: PUSH RBP 1"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007b1a"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
 Instruction "100007b1a: MOV RBP, RSP 3"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007b1d"
 Separations "((RSP_0 -64 16),8) SEP (RSI_0,1); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 184),1); ((RSP_0 -64 16),8) SEP ((RSI_0 +64 1),1); ((RSP_0 -64 16),8) SEP ((RSI_0 +64 2),1); ((RSP_0 -64 16),8) SEP ((RSI_0 +64 3),1); ((RSP_0 -64 16),8) SEP ((RSI_0 +64 4),1); ((RSP_0 -64 16),8) SEP ((RSI_0 +64 5),1); ((RSP_0 -64 16),8) SEP ((RSI_0 +64 6),1); ((RSP_0 -64 16),8) SEP ((RSI_0 +64 7),1)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
 Instruction "100007b1d: PUSH R15 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007b1f"
 Separations "((RSP_0 -64 24),8) SEP (RSI_0,1); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 184),1); ((RSP_0 -64 24),8) SEP ((RSI_0 +64 1),1); ((RSP_0 -64 24),8) SEP ((RSI_0 +64 2),1); ((RSP_0 -64 24),8) SEP ((RSI_0 +64 3),1); ((RSP_0 -64 24),8) SEP ((RSI_0 +64 4),1); ((RSP_0 -64 24),8) SEP ((RSI_0 +64 5),1); ((RSP_0 -64 24),8) SEP ((RSI_0 +64 6),1); ((RSP_0 -64 24),8) SEP ((RSI_0 +64 7),1)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
 Instruction "100007b1f: PUSH R14 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007b21"
 Separations "((RSP_0 -64 32),8) SEP (RSI_0,1); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 184),1); ((RSP_0 -64 32),8) SEP ((RSI_0 +64 1),1); ((RSP_0 -64 32),8) SEP ((RSI_0 +64 2),1); ((RSP_0 -64 32),8) SEP ((RSI_0 +64 3),1); ((RSP_0 -64 32),8) SEP ((RSI_0 +64 4),1); ((RSP_0 -64 32),8) SEP ((RSI_0 +64 5),1); ((RSP_0 -64 32),8) SEP ((RSI_0 +64 6),1); ((RSP_0 -64 32),8) SEP ((RSI_0 +64 7),1)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
 Instruction "100007b21: PUSH R13 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007b23"
 Separations "((RSP_0 -64 40),8) SEP (RSI_0,1); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 184),1); ((RSP_0 -64 40),8) SEP ((RSI_0 +64 1),1); ((RSP_0 -64 40),8) SEP ((RSI_0 +64 2),1); ((RSP_0 -64 40),8) SEP ((RSI_0 +64 3),1); ((RSP_0 -64 40),8) SEP ((RSI_0 +64 4),1); ((RSP_0 -64 40),8) SEP ((RSI_0 +64 5),1); ((RSP_0 -64 40),8) SEP ((RSI_0 +64 6),1); ((RSP_0 -64 40),8) SEP ((RSI_0 +64 7),1)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
 Instruction "100007b23: PUSH R12 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007b25"
 Separations "((RSP_0 -64 48),8) SEP (RSI_0,1); ((RSP_0 -64 48),8) SEP ((RDI_0 +64 184),1); ((RSP_0 -64 48),8) SEP ((RSI_0 +64 1),1); ((RSP_0 -64 48),8) SEP ((RSI_0 +64 2),1); ((RSP_0 -64 48),8) SEP ((RSI_0 +64 3),1); ((RSP_0 -64 48),8) SEP ((RSI_0 +64 4),1); ((RSP_0 -64 48),8) SEP ((RSI_0 +64 5),1); ((RSP_0 -64 48),8) SEP ((RSI_0 +64 6),1); ((RSP_0 -64 48),8) SEP ((RSI_0 +64 7),1)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
 Instruction "100007b25: PUSH RBX 1"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007b26"
 Separations "((RSP_0 -64 56),8) SEP (RSI_0,1); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 184),1); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 1),1); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 2),1); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 3),1); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 4),1); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 5),1); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 6),1); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 7),1)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
 Instruction "100007b26: PUSH RAX 1"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007b27"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007b27: MOV RBX, RSI 3"
 Post  "RAX = RAX_0 ; RBX = RSI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007b2a"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RSI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007b2a: MOV R14, RDI 3"
 Post  "RAX = RAX_0 ; RBX = RSI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007b2d"
 Separations "(RSI_0,1) SEP (RSP_0,8); (RSI_0,1) SEP ((RDI_0 +64 184),1); (RSI_0,1) SEP ((RSP_0 -64 8),8); (RSI_0,1) SEP ((RSP_0 -64 16),8); (RSI_0,1) SEP ((RSP_0 -64 24),8); (RSI_0,1) SEP ((RSP_0 -64 32),8); (RSI_0,1) SEP ((RSP_0 -64 40),8); (RSI_0,1) SEP ((RSP_0 -64 48),8); (RSI_0,1) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RSI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007b2d: MOV AL, BYTE PTR [RSI] 2"
 Post  "RAX = overwrite(8,RAX_0,b8([RSI_0,1]_0)) ; RBX = RSI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007b2f"
 Separations ""
 Assertions  ""
 Pre   "RAX = overwrite(8,RAX_0,b8([RSI_0,1]_0)) ; RBX = RSI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007b2f: CMP AL, 92 2"
 Post  "RAX = overwrite(8,RAX_0,b8([RSI_0,1]_0)) ; RBX = RSI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007b31"
 Separations ""
 Assertions  ""
 Pre   "RAX = overwrite(8,RAX_0,b8([RSI_0,1]_0)) ; RBX = RSI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007b31: JE 4294998839 2"
 Post  "RAX = overwrite(8,RAX_0,b8([RSI_0,1]_0)) ; RBX = RSI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100007b19, blockId == 1 ##
#####################################
*)

htriple "ht_100007b33"
 Separations ""
 Assertions  ""
 Pre   "RAX = overwrite(8,RAX_0,b8([RSI_0,1]_0)) ; RBX = RSI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007b33: CMP AL, 47 2"
 Post  "RAX = overwrite(8,RAX_0,b8([RSI_0,1]_0)) ; RBX = RSI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007b35"
 Separations ""
 Assertions  ""
 Pre   "RAX = overwrite(8,RAX_0,b8([RSI_0,1]_0)) ; RBX = RSI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007b35: JNE 4294998965 2"
 Post  "RAX = overwrite(8,RAX_0,b8([RSI_0,1]_0)) ; RBX = RSI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100007b19, blockId == 2 ##
#####################################
*)

htriple "ht_100007b37"
 Separations "((RSI_0 +64 1),1) SEP (RSP_0,8); ((RSI_0 +64 1),1) SEP ((RDI_0 +64 184),1); ((RSI_0 +64 1),1) SEP ((RSP_0 -64 8),8); ((RSI_0 +64 1),1) SEP ((RSP_0 -64 16),8); ((RSI_0 +64 1),1) SEP ((RSP_0 -64 24),8); ((RSI_0 +64 1),1) SEP ((RSP_0 -64 32),8); ((RSI_0 +64 1),1) SEP ((RSP_0 -64 40),8); ((RSI_0 +64 1),1) SEP ((RSP_0 -64 48),8); ((RSI_0 +64 1),1) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RAX = overwrite(8,RAX_0,b8([RSI_0,1]_0)) ; RBX = RSI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007b37: MOV AL, BYTE PTR [RBX + 1] 3"
 Post  "RAX = overwrite(8,RAX_0,b8([(RSI_0 +64 1),1]_0)) ; RBX = RSI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007b3a"
 Separations ""
 Assertions  ""
 Pre   "RAX = overwrite(8,RAX_0,b8([(RSI_0 +64 1),1]_0)) ; RBX = RSI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007b3a: CMP AL, 92 2"
 Post  "RAX = overwrite(8,RAX_0,b8([(RSI_0 +64 1),1]_0)) ; RBX = RSI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007b3c"
 Separations ""
 Assertions  ""
 Pre   "RAX = overwrite(8,RAX_0,b8([(RSI_0 +64 1),1]_0)) ; RBX = RSI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007b3c: JE 4294998850 2"
 Post  "RAX = overwrite(8,RAX_0,b8([(RSI_0 +64 1),1]_0)) ; RBX = RSI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100007b19, blockId == 3 ##
#####################################
*)

htriple "ht_100007bb5"
 Separations ""
 Assertions  "(RBX,1) SEP (RSP_0,8); (RBX,1) SEP ((RSP_0 -64 8),8); (RBX,1) SEP ((RSP_0 -64 16),8); (RBX,1) SEP ((RSP_0 -64 24),8); (RBX,1) SEP ((RSP_0 -64 32),8); (RBX,1) SEP ((RSP_0 -64 40),8); (RBX,1) SEP ((RSP_0 -64 48),8); (RBX,1) SEP ((RSP_0 -64 56),8)"
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007bb5: MOV AL, BYTE PTR [RBX] 2"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007bb7"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007bb7: LEA R12, [RIP + 16238] 7"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100007b19, blockId == 4 ##
#####################################
*)

htriple "ht_100007b3e"
 Separations ""
 Assertions  ""
 Pre   "RAX = overwrite(8,RAX_0,b8([(RSI_0 +64 1),1]_0)) ; RBX = RSI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007b3e: CMP AL, 47 2"
 Post  "RAX = overwrite(8,RAX_0,b8([(RSI_0 +64 1),1]_0)) ; RBX = RSI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007b40"
 Separations ""
 Assertions  ""
 Pre   "RAX = overwrite(8,RAX_0,b8([(RSI_0 +64 1),1]_0)) ; RBX = RSI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007b40: JNE 4294998965 2"
 Post  "RAX = overwrite(8,RAX_0,b8([(RSI_0 +64 1),1]_0)) ; RBX = RSI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100007b19, blockId == 5 ##
#####################################
*)

htriple "ht_100007b42"
 Separations "((RSI_0 +64 2),1) SEP (RSP_0,8); ((RSI_0 +64 2),1) SEP ((RDI_0 +64 184),1); ((RSI_0 +64 2),1) SEP ((RSP_0 -64 8),8); ((RSI_0 +64 2),1) SEP ((RSP_0 -64 16),8); ((RSI_0 +64 2),1) SEP ((RSP_0 -64 24),8); ((RSI_0 +64 2),1) SEP ((RSP_0 -64 32),8); ((RSI_0 +64 2),1) SEP ((RSP_0 -64 40),8); ((RSI_0 +64 2),1) SEP ((RSP_0 -64 48),8); ((RSI_0 +64 2),1) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RAX = overwrite(8,RAX_0,b8([(RSI_0 +64 1),1]_0)) ; RBX = RSI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007b42: MOV AL, BYTE PTR [RBX + 2] 3"
 Post  "RAX = overwrite(8,RAX_0,b8([(RSI_0 +64 2),1]_0)) ; RBX = RSI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007b45"
 Separations ""
 Assertions  ""
 Pre   "RAX = overwrite(8,RAX_0,b8([(RSI_0 +64 2),1]_0)) ; RBX = RSI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007b45: CMP AL, 63 2"
 Post  "RAX = overwrite(8,RAX_0,b8([(RSI_0 +64 2),1]_0)) ; RBX = RSI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007b47"
 Separations ""
 Assertions  ""
 Pre   "RAX = overwrite(8,RAX_0,b8([(RSI_0 +64 2),1]_0)) ; RBX = RSI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007b47: JE 4294998861 2"
 Post  "RAX = overwrite(8,RAX_0,b8([(RSI_0 +64 2),1]_0)) ; RBX = RSI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100007b19, blockId == 6 ##
#####################################
*)

htriple "ht_100007b49"
 Separations ""
 Assertions  ""
 Pre   "RAX = overwrite(8,RAX_0,b8([(RSI_0 +64 2),1]_0)) ; RBX = RSI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007b49: CMP AL, 46 2"
 Post  "RAX = overwrite(8,RAX_0,b8([(RSI_0 +64 2),1]_0)) ; RBX = RSI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007b4b"
 Separations ""
 Assertions  ""
 Pre   "RAX = overwrite(8,RAX_0,b8([(RSI_0 +64 2),1]_0)) ; RBX = RSI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007b4b: JNE 4294998965 2"
 Post  "RAX = overwrite(8,RAX_0,b8([(RSI_0 +64 2),1]_0)) ; RBX = RSI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100007b19, blockId == 7 ##
#####################################
*)

htriple "ht_100007b4d"
 Separations "((RSI_0 +64 3),1) SEP (RSP_0,8); ((RSI_0 +64 3),1) SEP ((RDI_0 +64 184),1); ((RSI_0 +64 3),1) SEP ((RSP_0 -64 8),8); ((RSI_0 +64 3),1) SEP ((RSP_0 -64 16),8); ((RSI_0 +64 3),1) SEP ((RSP_0 -64 24),8); ((RSI_0 +64 3),1) SEP ((RSP_0 -64 32),8); ((RSI_0 +64 3),1) SEP ((RSP_0 -64 40),8); ((RSI_0 +64 3),1) SEP ((RSP_0 -64 48),8); ((RSI_0 +64 3),1) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RAX = overwrite(8,RAX_0,b8([(RSI_0 +64 2),1]_0)) ; RBX = RSI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007b4d: MOV CL, BYTE PTR [RBX + 3] 3"
 Post  "RAX = overwrite(8,RAX_0,b8([(RSI_0 +64 2),1]_0)) ; RBX = RSI_0 ; RCX = overwrite(8,RCX_0,b8([(RSI_0 +64 3),1]_0)) ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007b50"
 Separations ""
 Assertions  ""
 Pre   "RAX = overwrite(8,RAX_0,b8([(RSI_0 +64 2),1]_0)) ; RBX = RSI_0 ; RCX = overwrite(8,RCX_0,b8([(RSI_0 +64 3),1]_0)) ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007b50: CMP CL, 92 3"
 Post  "RAX = overwrite(8,RAX_0,b8([(RSI_0 +64 2),1]_0)) ; RBX = RSI_0 ; RCX = overwrite(8,RCX_0,b8([(RSI_0 +64 3),1]_0)) ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007b53"
 Separations ""
 Assertions  ""
 Pre   "RAX = overwrite(8,RAX_0,b8([(RSI_0 +64 2),1]_0)) ; RBX = RSI_0 ; RCX = overwrite(8,RCX_0,b8([(RSI_0 +64 3),1]_0)) ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007b53: JE 4294998874 2"
 Post  "RAX = overwrite(8,RAX_0,b8([(RSI_0 +64 2),1]_0)) ; RBX = RSI_0 ; RCX = overwrite(8,RCX_0,b8([(RSI_0 +64 3),1]_0)) ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100007b19, blockId == 8 ##
#####################################
*)

htriple "ht_100007b55"
 Separations ""
 Assertions  ""
 Pre   "RAX = overwrite(8,RAX_0,b8([(RSI_0 +64 2),1]_0)) ; RBX = RSI_0 ; RCX = overwrite(8,RCX_0,b8([(RSI_0 +64 3),1]_0)) ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007b55: CMP CL, 47 3"
 Post  "RAX = overwrite(8,RAX_0,b8([(RSI_0 +64 2),1]_0)) ; RBX = RSI_0 ; RCX = overwrite(8,RCX_0,b8([(RSI_0 +64 3),1]_0)) ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007b58"
 Separations ""
 Assertions  ""
 Pre   "RAX = overwrite(8,RAX_0,b8([(RSI_0 +64 2),1]_0)) ; RBX = RSI_0 ; RCX = overwrite(8,RCX_0,b8([(RSI_0 +64 3),1]_0)) ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007b58: JNE 4294998965 2"
 Post  "RAX = overwrite(8,RAX_0,b8([(RSI_0 +64 2),1]_0)) ; RBX = RSI_0 ; RCX = overwrite(8,RCX_0,b8([(RSI_0 +64 3),1]_0)) ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100007b19, blockId == 9 ##
#####################################
*)

htriple "ht_100007b5a"
 Separations ""
 Assertions  ""
 Pre   "RAX = overwrite(8,RAX_0,b8([(RSI_0 +64 2),1]_0)) ; RBX = RSI_0 ; RCX = overwrite(8,RCX_0,b8([(RSI_0 +64 3),1]_0)) ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007b5a: CMP AL, 63 2"
 Post  "RAX = overwrite(8,RAX_0,b8([(RSI_0 +64 2),1]_0)) ; RBX = RSI_0 ; RCX = overwrite(8,RCX_0,b8([(RSI_0 +64 3),1]_0)) ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007b5c"
 Separations ""
 Assertions  ""
 Pre   "RAX = overwrite(8,RAX_0,b8([(RSI_0 +64 2),1]_0)) ; RBX = RSI_0 ; RCX = overwrite(8,RCX_0,b8([(RSI_0 +64 3),1]_0)) ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007b5c: JNE 4294998923 2"
 Post  "RAX = overwrite(8,RAX_0,b8([(RSI_0 +64 2),1]_0)) ; RBX = RSI_0 ; RCX = overwrite(8,RCX_0,b8([(RSI_0 +64 3),1]_0)) ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100007b19, blockId == 10 ##
######################################
*)

htriple "ht_100007b5e"
 Separations "((RSI_0 +64 4),1) SEP (RSP_0,8); ((RSI_0 +64 4),1) SEP ((RDI_0 +64 184),1); ((RSI_0 +64 4),1) SEP ((RSP_0 -64 8),8); ((RSI_0 +64 4),1) SEP ((RSP_0 -64 16),8); ((RSI_0 +64 4),1) SEP ((RSP_0 -64 24),8); ((RSI_0 +64 4),1) SEP ((RSP_0 -64 32),8); ((RSI_0 +64 4),1) SEP ((RSP_0 -64 40),8); ((RSI_0 +64 4),1) SEP ((RSP_0 -64 48),8); ((RSI_0 +64 4),1) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RAX = overwrite(8,RAX_0,b8([(RSI_0 +64 2),1]_0)) ; RBX = RSI_0 ; RCX = overwrite(8,RCX_0,b8([(RSI_0 +64 3),1]_0)) ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007b5e: MOV AL, BYTE PTR [RBX + 4] 3"
 Post  "RAX = overwrite(8,RAX_0,b8([(RSI_0 +64 4),1]_0)) ; RBX = RSI_0 ; RCX = overwrite(8,RCX_0,b8([(RSI_0 +64 3),1]_0)) ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007b61"
 Separations ""
 Assertions  ""
 Pre   "RAX = overwrite(8,RAX_0,b8([(RSI_0 +64 4),1]_0)) ; RBX = RSI_0 ; RCX = overwrite(8,RCX_0,b8([(RSI_0 +64 3),1]_0)) ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007b61: OR AL, 32 2"
 Post  "RAX = overwrite(8,RAX_0,(b8([(RSI_0 +64 4),1]_0) |8 32)) ; RBX = RSI_0 ; RCX = overwrite(8,RCX_0,b8([(RSI_0 +64 3),1]_0)) ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007b63"
 Separations ""
 Assertions  ""
 Pre   "RAX = overwrite(8,RAX_0,(b8([(RSI_0 +64 4),1]_0) |8 32)) ; RBX = RSI_0 ; RCX = overwrite(8,RCX_0,b8([(RSI_0 +64 3),1]_0)) ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007b63: CMP AL, 117 2"
 Post  "RAX = overwrite(8,RAX_0,(b8([(RSI_0 +64 4),1]_0) |8 32)) ; RBX = RSI_0 ; RCX = overwrite(8,RCX_0,b8([(RSI_0 +64 3),1]_0)) ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007b65"
 Separations ""
 Assertions  ""
 Pre   "RAX = overwrite(8,RAX_0,(b8([(RSI_0 +64 4),1]_0) |8 32)) ; RBX = RSI_0 ; RCX = overwrite(8,RCX_0,b8([(RSI_0 +64 3),1]_0)) ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007b65: JNE 4294998923 2"
 Post  "RAX = overwrite(8,RAX_0,(b8([(RSI_0 +64 4),1]_0) |8 32)) ; RBX = RSI_0 ; RCX = overwrite(8,RCX_0,b8([(RSI_0 +64 3),1]_0)) ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100007b19, blockId == 11 ##
######################################
*)

htriple "ht_100007b8b"
 Separations ""
 Assertions  ""
 Pre   "RBX = RSI_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007b8b: MOV EAX, 4 5"
 Post  "RAX = 4 ; RBX = RSI_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100007b19, blockId == 12 ##
######################################
*)

htriple "ht_100007b67"
 Separations "((RSI_0 +64 5),1) SEP (RSP_0,8); ((RSI_0 +64 5),1) SEP ((RDI_0 +64 184),1); ((RSI_0 +64 5),1) SEP ((RSP_0 -64 8),8); ((RSI_0 +64 5),1) SEP ((RSP_0 -64 16),8); ((RSI_0 +64 5),1) SEP ((RSP_0 -64 24),8); ((RSI_0 +64 5),1) SEP ((RSP_0 -64 32),8); ((RSI_0 +64 5),1) SEP ((RSP_0 -64 40),8); ((RSI_0 +64 5),1) SEP ((RSP_0 -64 48),8); ((RSI_0 +64 5),1) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RAX = overwrite(8,RAX_0,(b8([(RSI_0 +64 4),1]_0) |8 32)) ; RBX = RSI_0 ; RCX = overwrite(8,RCX_0,b8([(RSI_0 +64 3),1]_0)) ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007b67: MOV AL, BYTE PTR [RBX + 5] 3"
 Post  "RAX = overwrite(8,RAX_0,b8([(RSI_0 +64 5),1]_0)) ; RBX = RSI_0 ; RCX = overwrite(8,RCX_0,b8([(RSI_0 +64 3),1]_0)) ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007b6a"
 Separations ""
 Assertions  ""
 Pre   "RAX = overwrite(8,RAX_0,b8([(RSI_0 +64 5),1]_0)) ; RBX = RSI_0 ; RCX = overwrite(8,RCX_0,b8([(RSI_0 +64 3),1]_0)) ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007b6a: OR AL, 32 2"
 Post  "RAX = overwrite(8,RAX_0,(b8([(RSI_0 +64 5),1]_0) |8 32)) ; RBX = RSI_0 ; RCX = overwrite(8,RCX_0,b8([(RSI_0 +64 3),1]_0)) ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007b6c"
 Separations ""
 Assertions  ""
 Pre   "RAX = overwrite(8,RAX_0,(b8([(RSI_0 +64 5),1]_0) |8 32)) ; RBX = RSI_0 ; RCX = overwrite(8,RCX_0,b8([(RSI_0 +64 3),1]_0)) ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007b6c: CMP AL, 110 2"
 Post  "RAX = overwrite(8,RAX_0,(b8([(RSI_0 +64 5),1]_0) |8 32)) ; RBX = RSI_0 ; RCX = overwrite(8,RCX_0,b8([(RSI_0 +64 3),1]_0)) ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007b6e"
 Separations ""
 Assertions  ""
 Pre   "RAX = overwrite(8,RAX_0,(b8([(RSI_0 +64 5),1]_0) |8 32)) ; RBX = RSI_0 ; RCX = overwrite(8,RCX_0,b8([(RSI_0 +64 3),1]_0)) ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007b6e: JNE 4294998923 2"
 Post  "RAX = overwrite(8,RAX_0,(b8([(RSI_0 +64 5),1]_0) |8 32)) ; RBX = RSI_0 ; RCX = overwrite(8,RCX_0,b8([(RSI_0 +64 3),1]_0)) ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100007b19, blockId == 13 ##
######################################
*)

htriple "ht_100007b70"
 Separations "((RSI_0 +64 6),1) SEP (RSP_0,8); ((RSI_0 +64 6),1) SEP ((RDI_0 +64 184),1); ((RSI_0 +64 6),1) SEP ((RSP_0 -64 8),8); ((RSI_0 +64 6),1) SEP ((RSP_0 -64 16),8); ((RSI_0 +64 6),1) SEP ((RSP_0 -64 24),8); ((RSI_0 +64 6),1) SEP ((RSP_0 -64 32),8); ((RSI_0 +64 6),1) SEP ((RSP_0 -64 40),8); ((RSI_0 +64 6),1) SEP ((RSP_0 -64 48),8); ((RSI_0 +64 6),1) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RAX = overwrite(8,RAX_0,(b8([(RSI_0 +64 5),1]_0) |8 32)) ; RBX = RSI_0 ; RCX = overwrite(8,RCX_0,b8([(RSI_0 +64 3),1]_0)) ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007b70: MOV AL, BYTE PTR [RBX + 6] 3"
 Post  "RAX = overwrite(8,RAX_0,b8([(RSI_0 +64 6),1]_0)) ; RBX = RSI_0 ; RCX = overwrite(8,RCX_0,b8([(RSI_0 +64 3),1]_0)) ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007b73"
 Separations ""
 Assertions  ""
 Pre   "RAX = overwrite(8,RAX_0,b8([(RSI_0 +64 6),1]_0)) ; RBX = RSI_0 ; RCX = overwrite(8,RCX_0,b8([(RSI_0 +64 3),1]_0)) ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007b73: OR AL, 32 2"
 Post  "RAX = overwrite(8,RAX_0,(b8([(RSI_0 +64 6),1]_0) |8 32)) ; RBX = RSI_0 ; RCX = overwrite(8,RCX_0,b8([(RSI_0 +64 3),1]_0)) ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007b75"
 Separations ""
 Assertions  ""
 Pre   "RAX = overwrite(8,RAX_0,(b8([(RSI_0 +64 6),1]_0) |8 32)) ; RBX = RSI_0 ; RCX = overwrite(8,RCX_0,b8([(RSI_0 +64 3),1]_0)) ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007b75: CMP AL, 99 2"
 Post  "RAX = overwrite(8,RAX_0,(b8([(RSI_0 +64 6),1]_0) |8 32)) ; RBX = RSI_0 ; RCX = overwrite(8,RCX_0,b8([(RSI_0 +64 3),1]_0)) ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007b77"
 Separations ""
 Assertions  ""
 Pre   "RAX = overwrite(8,RAX_0,(b8([(RSI_0 +64 6),1]_0) |8 32)) ; RBX = RSI_0 ; RCX = overwrite(8,RCX_0,b8([(RSI_0 +64 3),1]_0)) ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007b77: JNE 4294998923 2"
 Post  "RAX = overwrite(8,RAX_0,(b8([(RSI_0 +64 6),1]_0) |8 32)) ; RBX = RSI_0 ; RCX = overwrite(8,RCX_0,b8([(RSI_0 +64 3),1]_0)) ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100007b19, blockId == 14 ##
######################################
*)

htriple "ht_100007b79"
 Separations "((RSI_0 +64 7),1) SEP (RSP_0,8); ((RSI_0 +64 7),1) SEP ((RDI_0 +64 184),1); ((RSI_0 +64 7),1) SEP ((RSP_0 -64 8),8); ((RSI_0 +64 7),1) SEP ((RSP_0 -64 16),8); ((RSI_0 +64 7),1) SEP ((RSP_0 -64 24),8); ((RSI_0 +64 7),1) SEP ((RSP_0 -64 32),8); ((RSI_0 +64 7),1) SEP ((RSP_0 -64 40),8); ((RSI_0 +64 7),1) SEP ((RSP_0 -64 48),8); ((RSI_0 +64 7),1) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RAX = overwrite(8,RAX_0,(b8([(RSI_0 +64 6),1]_0) |8 32)) ; RBX = RSI_0 ; RCX = overwrite(8,RCX_0,b8([(RSI_0 +64 3),1]_0)) ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007b79: MOV CL, BYTE PTR [RBX + 7] 3"
 Post  "RAX = overwrite(8,RAX_0,(b8([(RSI_0 +64 6),1]_0) |8 32)) ; RBX = RSI_0 ; RCX = overwrite(8,RCX_0,b8([(RSI_0 +64 7),1]_0)) ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007b7c"
 Separations ""
 Assertions  ""
 Pre   "RAX = overwrite(8,RAX_0,(b8([(RSI_0 +64 6),1]_0) |8 32)) ; RBX = RSI_0 ; RCX = overwrite(8,RCX_0,b8([(RSI_0 +64 7),1]_0)) ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007b7c: MOV EAX, 8 5"
 Post  "RAX = 8 ; RBX = RSI_0 ; RCX = overwrite(8,RCX_0,b8([(RSI_0 +64 7),1]_0)) ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007b81"
 Separations ""
 Assertions  ""
 Pre   "RAX = 8 ; RBX = RSI_0 ; RCX = overwrite(8,RCX_0,b8([(RSI_0 +64 7),1]_0)) ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007b81: CMP CL, 47 3"
 Post  "RAX = 8 ; RBX = RSI_0 ; RCX = overwrite(8,RCX_0,b8([(RSI_0 +64 7),1]_0)) ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007b84"
 Separations ""
 Assertions  ""
 Pre   "RAX = 8 ; RBX = RSI_0 ; RCX = overwrite(8,RCX_0,b8([(RSI_0 +64 7),1]_0)) ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007b84: JE 4294998928 2"
 Post  "RAX = 8 ; RBX = RSI_0 ; RCX = overwrite(8,RCX_0,b8([(RSI_0 +64 7),1]_0)) ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100007b19, blockId == 15 ##
######################################
*)

htriple "ht_100007b86"
 Separations ""
 Assertions  ""
 Pre   "RAX = 8 ; RBX = RSI_0 ; RCX = overwrite(8,RCX_0,b8([(RSI_0 +64 7),1]_0)) ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007b86: CMP CL, 92 3"
 Post  "RAX = 8 ; RBX = RSI_0 ; RCX = overwrite(8,RCX_0,b8([(RSI_0 +64 7),1]_0)) ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007b89"
 Separations ""
 Assertions  ""
 Pre   "RAX = 8 ; RBX = RSI_0 ; RCX = overwrite(8,RCX_0,b8([(RSI_0 +64 7),1]_0)) ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007b89: JE 4294998928 2"
 Post  "RAX = 8 ; RBX = RSI_0 ; RCX = overwrite(8,RCX_0,b8([(RSI_0 +64 7),1]_0)) ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100007b19, blockId == 16 ##
######################################
*)

htriple "ht_100007b90"
 Separations ""
 Assertions  ""
 Pre   "RBX = RSI_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007b90: ADD RBX, RAX 3"
 Post  "RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007b93"
 Separations "((RDI_0 +64 184),1) SEP (RSI_0,1); ((RDI_0 +64 184),1) SEP (RSP_0,8); ((RDI_0 +64 184),1) SEP ((RSI_0 +64 1),1); ((RDI_0 +64 184),1) SEP ((RSI_0 +64 2),1); ((RDI_0 +64 184),1) SEP ((RSI_0 +64 3),1); ((RDI_0 +64 184),1) SEP ((RSI_0 +64 4),1); ((RDI_0 +64 184),1) SEP ((RSI_0 +64 5),1); ((RDI_0 +64 184),1) SEP ((RSI_0 +64 6),1); ((RDI_0 +64 184),1) SEP ((RSI_0 +64 7),1); ((RDI_0 +64 184),1) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 184),1) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 184),1) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 184),1) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 184),1) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 184),1) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 184),1) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007b93: CMP BYTE PTR [R14 + 184], 0 8"
 Post  "RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007b9b"
 Separations ""
 Assertions  ""
 Pre   "RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007b9b: JNE 4294998965 2"
 Post  "RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100007b19, blockId == 17 ##
######################################
*)

htriple "ht_100007b9d"
 Separations ""
 Assertions  ""
 Pre   "RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007b9d: LEA RSI, [RIP + 16216] 7"
 Post  "RDX = RDX_0 ; RDI = RDI_0 ; RSI = 0x10000bafc ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007ba4"
 Separations ""
 Assertions  ""
 Pre   "RDX = RDX_0 ; RDI = RDI_0 ; RSI = 0x10000bafc ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007ba4: XOR EDI, EDI 2"
 Post  "RDX = RDX_0 ; RDI = 0 ; RSI = 0x10000bafc ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007ba6"
 Separations ""
 Assertions  ""
 Pre   "RDX = RDX_0 ; RDI = 0 ; RSI = 0x10000bafc ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007ba6: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RDX = RDX_0 ; RDI = 0 ; RSI = 0x10000bafc ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007ba8"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RDX = RDX_0 ; RDI = 0 ; RSI = 0x10000bafc ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = [(RDI_0 +64 184),1]_0 ; [(RSI_0 +64 1),1] = [(RSI_0 +64 1),1]_0 ; [(RSI_0 +64 2),1] = [(RSI_0 +64 2),1]_0 ; [(RSI_0 +64 3),1] = [(RSI_0 +64 3),1]_0 ; [(RSI_0 +64 4),1] = [(RSI_0 +64 4),1]_0 ; [(RSI_0 +64 5),1] = [(RSI_0 +64 5),1]_0 ; [(RSI_0 +64 6),1] = [(RSI_0 +64 6),1]_0 ; [(RSI_0 +64 7),1] = [(RSI_0 +64 7),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007ba8: ExternalCall fun_0x1000099ad 5"
 Post  "RAX = bot(fun_0x1000099ad) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 FunctionConstraints "PRESERVES fun_0x1000099ad {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007bad"
 Separations "((RDI_0 +64 184),1) SEP (RSI_0,1); ((RDI_0 +64 184),1) SEP (RSP_0,8); ((RDI_0 +64 184),1) SEP ((RSI_0 +64 1),1); ((RDI_0 +64 184),1) SEP ((RSI_0 +64 2),1); ((RDI_0 +64 184),1) SEP ((RSI_0 +64 3),1); ((RDI_0 +64 184),1) SEP ((RSI_0 +64 4),1); ((RDI_0 +64 184),1) SEP ((RSI_0 +64 5),1); ((RDI_0 +64 184),1) SEP ((RSI_0 +64 6),1); ((RDI_0 +64 184),1) SEP ((RSI_0 +64 7),1); ((RDI_0 +64 184),1) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 184),1) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 184),1) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 184),1) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 184),1) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 184),1) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 184),1) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000099ad) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007bad: MOV BYTE PTR [R14 + 184], 1 8"
 Post  "RAX = bot(fun_0x1000099ad) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100007b19, blockId == 18 ##
######################################
*)

htriple "ht_100007bcc"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007bcc: CMP BYTE PTR [R15 + 1], 58 5"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007bd1"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007bd1: MOV R13, R15 3"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007bd4"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007bd4: JNE 4294999036 2"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100007b19, blockId == 19 ##
######################################
*)

htriple "ht_100007bfc"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007bfc: MOV RBX, R13 3"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007bff"
 Separations ""
 Assertions  "(R13,1) SEP (RSP_0,8); (R13,1) SEP ((RSP_0 -64 8),8); (R13,1) SEP ((RSP_0 -64 16),8); (R13,1) SEP ((RSP_0 -64 24),8); (R13,1) SEP ((RSP_0 -64 32),8); (R13,1) SEP ((RSP_0 -64 40),8); (R13,1) SEP ((RSP_0 -64 48),8); (R13,1) SEP ((RSP_0 -64 56),8)"
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007bff: MOV AL, BYTE PTR [R13] 4"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007c03"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007c03: CMP AL, 92 2"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007c05"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007c05: JE 4294999051 2"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100007b19, blockId == 20 ##
######################################
*)

htriple "ht_100007bd6"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007bd6: LEA R13, [R15 + 2] 4"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007bda"
 Separations "((RDI_0 +64 184),1) SEP (RSI_0,1); ((RDI_0 +64 184),1) SEP (RSP_0,8); ((RDI_0 +64 184),1) SEP ((RSI_0 +64 1),1); ((RDI_0 +64 184),1) SEP ((RSI_0 +64 2),1); ((RDI_0 +64 184),1) SEP ((RSI_0 +64 3),1); ((RDI_0 +64 184),1) SEP ((RSI_0 +64 4),1); ((RDI_0 +64 184),1) SEP ((RSI_0 +64 5),1); ((RDI_0 +64 184),1) SEP ((RSI_0 +64 6),1); ((RDI_0 +64 184),1) SEP ((RSI_0 +64 7),1); ((RDI_0 +64 184),1) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 184),1) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 184),1) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 184),1) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 184),1) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 184),1) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 184),1) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007bda: CMP BYTE PTR [R14 + 184], 0 8"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007be2"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007be2: JNE 4294999036 2"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100007b19, blockId == 21 ##
######################################
*)

htriple "ht_100007be4"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007be4: XOR EDI, EDI 2"
 Post  "RDI = 0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007be6"
 Separations ""
 Assertions  ""
 Pre   "RDI = 0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007be6: LEA RSI, [RIP + 16143] 7"
 Post  "RDI = 0 ; RSI = 0x10000bafc ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007bed"
 Separations ""
 Assertions  ""
 Pre   "RDI = 0 ; RSI = 0x10000bafc ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007bed: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RDI = 0 ; RSI = 0x10000bafc ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007bef"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RDI = 0 ; RSI = 0x10000bafc ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007bef: ExternalCall fun_0x1000099ad 5"
 Post  "RAX = bot(fun_0x1000099ad) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 FunctionConstraints "PRESERVES fun_0x1000099ad {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100007b19, blockId == 22 ##
######################################
*)

htriple "ht_100007c07"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007c07: CMP AL, 47 2"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007c09"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007c09: JNE 4294999125 2"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100007b19, blockId == 23 ##
######################################
*)

htriple "ht_100007c0b"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007c0b: CMP BYTE PTR [RBX + 1], 46 4"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007c0f"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007c0f: JNE 4294999091 2"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100007b19, blockId == 24 ##
######################################
*)

htriple "ht_100007c55"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007c55: CMP R15, RBX 3"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007c58"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007c58: JNE 4294998974 6"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100007b19, blockId == 25 ##
######################################
*)

htriple "ht_100007c11"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007c11: LEA R13, [RBX + 2] 4"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007c15"
 Separations ""
 Assertions  "((RBX +64 2),1) SEP (RSP_0,8); ((RBX +64 2),1) SEP ((RSP_0 -64 8),8); ((RBX +64 2),1) SEP ((RSP_0 -64 16),8); ((RBX +64 2),1) SEP ((RSP_0 -64 24),8); ((RBX +64 2),1) SEP ((RSP_0 -64 32),8); ((RBX +64 2),1) SEP ((RSP_0 -64 40),8); ((RBX +64 2),1) SEP ((RSP_0 -64 48),8); ((RBX +64 2),1) SEP ((RSP_0 -64 56),8)"
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007c15: MOV AL, BYTE PTR [RBX + 2] 3"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007c18"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007c18: CMP AL, 92 2"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007c1a"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007c1a: JE 4294999097 2"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100007b19, blockId == 26 ##
######################################
*)

htriple "ht_100007c33"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007c33: INC RBX 3"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007c36"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007c36: MOV R13, RBX 3"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100007b19, blockId == 27 ##
######################################
*)

htriple "ht_100007c1c"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007c1c: CMP AL, 47 2"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007c1e"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007c1e: JE 4294999097 2"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100007b19, blockId == 28 ##
######################################
*)

htriple "ht_100007c39"
 Separations "((RDI_0 +64 184),1) SEP (RSI_0,1); ((RDI_0 +64 184),1) SEP (RSP_0,8); ((RDI_0 +64 184),1) SEP ((RSI_0 +64 1),1); ((RDI_0 +64 184),1) SEP ((RSI_0 +64 2),1); ((RDI_0 +64 184),1) SEP ((RSI_0 +64 3),1); ((RDI_0 +64 184),1) SEP ((RSI_0 +64 4),1); ((RDI_0 +64 184),1) SEP ((RSI_0 +64 5),1); ((RDI_0 +64 184),1) SEP ((RSI_0 +64 6),1); ((RDI_0 +64 184),1) SEP ((RSI_0 +64 7),1); ((RDI_0 +64 184),1) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 184),1) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 184),1) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 184),1) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 184),1) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 184),1) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 184),1) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007c39: CMP BYTE PTR [R14 + 184], 0 8"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007c41"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007c41: JNE 4294999036 2"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100007b19, blockId == 29 ##
######################################
*)

htriple "ht_100007c20"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007c20: CMP AL, 46 2"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007c22"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007c22: JNE 4294999091 2"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100007b19, blockId == 30 ##
######################################
*)

htriple "ht_100007c24"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007c24: LEA R13, [RBX + 3] 4"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007c28"
 Separations ""
 Assertions  "((RBX +64 3),1) SEP (RSP_0,8); ((RBX +64 3),1) SEP ((RSP_0 -64 8),8); ((RBX +64 3),1) SEP ((RSP_0 -64 16),8); ((RBX +64 3),1) SEP ((RSP_0 -64 24),8); ((RBX +64 3),1) SEP ((RSP_0 -64 32),8); ((RBX +64 3),1) SEP ((RSP_0 -64 40),8); ((RBX +64 3),1) SEP ((RSP_0 -64 48),8); ((RBX +64 3),1) SEP ((RSP_0 -64 56),8)"
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007c28: MOV AL, BYTE PTR [RBX + 3] 3"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007c2b"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007c2b: CMP AL, 47 2"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007c2d"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007c2d: JE 4294999097 2"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100007b19, blockId == 31 ##
######################################
*)

htriple "ht_100007c2f"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007c2f: CMP AL, 92 2"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007c31"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007c31: JE 4294999097 2"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100007b19, blockId == 32 ##
######################################
*)

htriple "ht_100007c43"
 Separations ""
 Assertions  "(R15,1) SEP (RSP_0,8); (R15,1) SEP ((RSP_0 -64 8),8); (R15,1) SEP ((RSP_0 -64 16),8); (R15,1) SEP ((RSP_0 -64 24),8); (R15,1) SEP ((RSP_0 -64 32),8); (R15,1) SEP ((RSP_0 -64 40),8); (R15,1) SEP ((RSP_0 -64 48),8); (R15,1) SEP ((RSP_0 -64 56),8)"
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007c43: MOVSX EDX, BYTE PTR [R15] 4"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007c47"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007c47: XOR EDI, EDI 2"
 Post  "RDI = 0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007c49"
 Separations ""
 Assertions  ""
 Pre   "RDI = 0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007c49: MOV RSI, R12 3"
 Post  "RDI = 0 ; RSI = 0x10000bb2c ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007c4c"
 Separations ""
 Assertions  ""
 Pre   "RDI = 0 ; RSI = 0x10000bb2c ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007c4c: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RDI = 0 ; RSI = 0x10000bb2c ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007c4e"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RDI = 0 ; RSI = 0x10000bb2c ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007c4e: ExternalCall fun_0x1000099ad 5"
 Post  "RAX = bot(fun_0x1000099ad) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 FunctionConstraints "PRESERVES fun_0x1000099ad {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007c53"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000099ad) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007c53: JMP 4294999028 2"
 Post  "RAX = bot(fun_0x1000099ad) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100007b19, blockId == 33 ##
######################################
*)

htriple "ht_100007bf4"
 Separations "((RDI_0 +64 184),1) SEP (RSI_0,1); ((RDI_0 +64 184),1) SEP (RSP_0,8); ((RDI_0 +64 184),1) SEP ((RSI_0 +64 1),1); ((RDI_0 +64 184),1) SEP ((RSI_0 +64 2),1); ((RDI_0 +64 184),1) SEP ((RSI_0 +64 3),1); ((RDI_0 +64 184),1) SEP ((RSI_0 +64 4),1); ((RDI_0 +64 184),1) SEP ((RSI_0 +64 5),1); ((RDI_0 +64 184),1) SEP ((RSI_0 +64 6),1); ((RDI_0 +64 184),1) SEP ((RSI_0 +64 7),1); ((RDI_0 +64 184),1) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 184),1) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 184),1) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 184),1) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 184),1) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 184),1) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 184),1) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000099ad) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007bf4: MOV BYTE PTR [R14 + 184], 1 8"
 Post  "RAX = bot(fun_0x1000099ad) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 184),1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100007b19, blockId == 34 ##
######################################
*)

htriple "ht_100007bbe"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007bbe: MOV R15, RBX 3"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007bc1"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007bc1: AND AL, 223 2"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007bc3"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007bc3: ADD AL, 191 2"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007bc5"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007bc5: MOV R13, RBX 3"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007bc8"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007bc8: CMP AL, 25 2"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007bca"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007bca: JA 4294999036 2"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100007b19, blockId == 35 ##
######################################
*)

htriple "ht_100007c5e"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007c5e: MOV RAX, R15 3"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007c61"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007c61: ADD RSP, 8 4"
 Post  "RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007c65"
 Separations "((RSP_0 -64 40),8) SEP (RSI_0,1); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 184),1); ((RSP_0 -64 40),8) SEP ((RSI_0 +64 1),1); ((RSP_0 -64 40),8) SEP ((RSI_0 +64 2),1); ((RSP_0 -64 40),8) SEP ((RSI_0 +64 3),1); ((RSP_0 -64 40),8) SEP ((RSI_0 +64 4),1); ((RSP_0 -64 40),8) SEP ((RSI_0 +64 5),1); ((RSP_0 -64 40),8) SEP ((RSI_0 +64 6),1); ((RSP_0 -64 40),8) SEP ((RSI_0 +64 7),1)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007c65: POP RBX 1"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007c66"
 Separations "((RSP_0 -64 32),8) SEP (RSI_0,1); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 184),1); ((RSP_0 -64 32),8) SEP ((RSI_0 +64 1),1); ((RSP_0 -64 32),8) SEP ((RSI_0 +64 2),1); ((RSP_0 -64 32),8) SEP ((RSI_0 +64 3),1); ((RSP_0 -64 32),8) SEP ((RSI_0 +64 4),1); ((RSP_0 -64 32),8) SEP ((RSI_0 +64 5),1); ((RSP_0 -64 32),8) SEP ((RSI_0 +64 6),1); ((RSP_0 -64 32),8) SEP ((RSI_0 +64 7),1)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x10000bb2c ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007c66: POP R12 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007c68"
 Separations "((RSP_0 -64 24),8) SEP (RSI_0,1); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 184),1); ((RSP_0 -64 24),8) SEP ((RSI_0 +64 1),1); ((RSP_0 -64 24),8) SEP ((RSI_0 +64 2),1); ((RSP_0 -64 24),8) SEP ((RSI_0 +64 3),1); ((RSP_0 -64 24),8) SEP ((RSI_0 +64 4),1); ((RSP_0 -64 24),8) SEP ((RSI_0 +64 5),1); ((RSP_0 -64 24),8) SEP ((RSI_0 +64 6),1); ((RSP_0 -64 24),8) SEP ((RSI_0 +64 7),1)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007c68: POP R13 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007c6a"
 Separations "((RSP_0 -64 16),8) SEP (RSI_0,1); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 184),1); ((RSP_0 -64 16),8) SEP ((RSI_0 +64 1),1); ((RSP_0 -64 16),8) SEP ((RSI_0 +64 2),1); ((RSP_0 -64 16),8) SEP ((RSI_0 +64 3),1); ((RSP_0 -64 16),8) SEP ((RSI_0 +64 4),1); ((RSP_0 -64 16),8) SEP ((RSI_0 +64 5),1); ((RSP_0 -64 16),8) SEP ((RSI_0 +64 6),1); ((RSP_0 -64 16),8) SEP ((RSI_0 +64 7),1)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007c6a: POP R14 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007c6c"
 Separations "((RSP_0 -64 8),8) SEP (RSI_0,1); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 184),1); ((RSP_0 -64 8),8) SEP ((RSI_0 +64 1),1); ((RSP_0 -64 8),8) SEP ((RSI_0 +64 2),1); ((RSP_0 -64 8),8) SEP ((RSI_0 +64 3),1); ((RSP_0 -64 8),8) SEP ((RSI_0 +64 4),1); ((RSP_0 -64 8),8) SEP ((RSI_0 +64 5),1); ((RSP_0 -64 8),8) SEP ((RSI_0 +64 6),1); ((RSP_0 -64 8),8) SEP ((RSI_0 +64 7),1)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007c6c: POP R15 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007c6e"
 Separations ""
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007c6e: POP RBP 1"
 Post  "RBX = RBX_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007c6f"
 Separations ""
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100007c6f: RET  1"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 +64 8) ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




end
end
