theory tar_100007d57
imports "../../../isabelle/X86_Semantics/X86_Parse_Hoare_Triples"


begin


context semantics
begin

(*
#####################################
## Entry = 100007d57, blockId == 0 ##
#####################################
*)

htriple "ht_100007d57"
 Separations "((RSP_0 -64 8),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 8),8) SEP (0x10000a9b0,16); ((RSP_0 -64 8),8) SEP (0x10000c008,8); ((RSP_0 -64 8),8) SEP (0x1000105a6,1); ((RSP_0 -64 8),8) SEP (0x1000105a7,1); ((RSP_0 -64 8),8) SEP (0x1000105a8,8); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 160),8); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 160),16); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 168),8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RDI_0 +64 160),16] = [(RDI_0 +64 160),16]_0 ; [(RSP_0 -64 8),8] = [(RSP_0 -64 8),8]_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007d57: PUSH RBP 1"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RDI_0 +64 160),16] = [(RDI_0 +64 160),16]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007d58"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RDI_0 +64 160),16] = [(RDI_0 +64 160),16]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007d58: MOV RBP, RSP 3"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RDI_0 +64 160),16] = [(RDI_0 +64 160),16]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007d5b"
 Separations "((RSP_0 -64 16),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 16),8) SEP (0x10000a9b0,16); ((RSP_0 -64 16),8) SEP (0x10000c008,8); ((RSP_0 -64 16),8) SEP (0x1000105a6,1); ((RSP_0 -64 16),8) SEP (0x1000105a7,1); ((RSP_0 -64 16),8) SEP (0x1000105a8,8); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 160),8); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 160),16); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 168),8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RDI_0 +64 160),16] = [(RDI_0 +64 160),16]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007d5b: PUSH R15 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RDI_0 +64 160),16] = [(RDI_0 +64 160),16]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007d5d"
 Separations "((RSP_0 -64 24),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 24),8) SEP (0x10000a9b0,16); ((RSP_0 -64 24),8) SEP (0x10000c008,8); ((RSP_0 -64 24),8) SEP (0x1000105a6,1); ((RSP_0 -64 24),8) SEP (0x1000105a7,1); ((RSP_0 -64 24),8) SEP (0x1000105a8,8); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 160),8); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 160),16); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 168),8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RDI_0 +64 160),16] = [(RDI_0 +64 160),16]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007d5d: PUSH R14 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RDI_0 +64 160),16] = [(RDI_0 +64 160),16]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007d5f"
 Separations "((RSP_0 -64 32),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 32),8) SEP (0x10000a9b0,16); ((RSP_0 -64 32),8) SEP (0x10000c008,8); ((RSP_0 -64 32),8) SEP (0x1000105a6,1); ((RSP_0 -64 32),8) SEP (0x1000105a7,1); ((RSP_0 -64 32),8) SEP (0x1000105a8,8); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 160),8); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 160),16); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 168),8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RDI_0 +64 160),16] = [(RDI_0 +64 160),16]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007d5f: PUSH R13 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RDI_0 +64 160),16] = [(RDI_0 +64 160),16]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007d61"
 Separations "((RSP_0 -64 40),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 40),8) SEP (0x10000a9b0,16); ((RSP_0 -64 40),8) SEP (0x10000c008,8); ((RSP_0 -64 40),8) SEP (0x1000105a6,1); ((RSP_0 -64 40),8) SEP (0x1000105a7,1); ((RSP_0 -64 40),8) SEP (0x1000105a8,8); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 160),8); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 160),16); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 168),8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RDI_0 +64 160),16] = [(RDI_0 +64 160),16]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007d61: PUSH R12 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RDI_0 +64 160),16] = [(RDI_0 +64 160),16]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007d63"
 Separations "((RSP_0 -64 48),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 48),8) SEP (0x10000a9b0,16); ((RSP_0 -64 48),8) SEP (0x10000c008,8); ((RSP_0 -64 48),8) SEP (0x1000105a6,1); ((RSP_0 -64 48),8) SEP (0x1000105a7,1); ((RSP_0 -64 48),8) SEP (0x1000105a8,8); ((RSP_0 -64 48),8) SEP ((RDI_0 +64 160),8); ((RSP_0 -64 48),8) SEP ((RDI_0 +64 160),16); ((RSP_0 -64 48),8) SEP ((RDI_0 +64 168),8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RDI_0 +64 160),16] = [(RDI_0 +64 160),16]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007d63: PUSH RBX 1"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RDI_0 +64 160),16] = [(RDI_0 +64 160),16]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007d64"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RDI_0 +64 160),16] = [(RDI_0 +64 160),16]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007d64: SUB RSP, 136 7"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RDI_0 +64 160),16] = [(RDI_0 +64 160),16]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007d6b"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RDI_0 +64 160),16] = [(RDI_0 +64 160),16]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007d6b: MOV R13, RDX 3"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = RDX_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RDI_0 +64 160),16] = [(RDI_0 +64 160),16]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007d6e"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = RDX_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RDI_0 +64 160),16] = [(RDI_0 +64 160),16]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007d6e: MOV R14, RSI 3"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RDI_0 +64 160),16] = [(RDI_0 +64 160),16]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007d71"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RDI_0 +64 160),16] = [(RDI_0 +64 160),16]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007d71: MOV R15, RDI 3"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RDI_0 +64 160),16] = [(RDI_0 +64 160),16]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007d74"
 Separations "(0x10000c008,8) SEP (RSP_0,8); (0x10000c008,8) SEP ([0x10000c008,8]_0,8); (0x10000c008,8) SEP ((RDI_0 +64 160),8); (0x10000c008,8) SEP ((RDI_0 +64 160),16); (0x10000c008,8) SEP ((RDI_0 +64 168),8); (0x10000c008,8) SEP ((RSP_0 -64 8),8); (0x10000c008,8) SEP ((RSP_0 -64 16),8); (0x10000c008,8) SEP ((RSP_0 -64 24),8); (0x10000c008,8) SEP ((RSP_0 -64 32),8); (0x10000c008,8) SEP ((RSP_0 -64 40),8); (0x10000c008,8) SEP ((RSP_0 -64 48),8); (0x10000c008,8) SEP ((RSP_0 -64 56),8); (0x10000c008,8) SEP ((RSP_0 -64 176),8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RDI_0 +64 160),16] = [(RDI_0 +64 160),16]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007d74: MOV RAX, QWORD PTR [RIP + 17037] 7"
 Post  "RAX = [0x10000c008,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RDI_0 +64 160),16] = [(RDI_0 +64 160),16]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007d7b"
 Separations "([0x10000c008,8]_0,8) SEP (RSP_0,8); ([0x10000c008,8]_0,8) SEP (0x10000a9b0,16); ([0x10000c008,8]_0,8) SEP (0x10000c008,8); ([0x10000c008,8]_0,8) SEP (0x1000105a6,1); ([0x10000c008,8]_0,8) SEP (0x1000105a7,1); ([0x10000c008,8]_0,8) SEP (0x1000105a8,8); ([0x10000c008,8]_0,8) SEP ((RDI_0 +64 160),8); ([0x10000c008,8]_0,8) SEP ((RDI_0 +64 160),16); ([0x10000c008,8]_0,8) SEP ((RDI_0 +64 168),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 8),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 16),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 24),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 32),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 40),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 48),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 56),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 176),8)"
 Assertions  ""
 Pre   "RAX = [0x10000c008,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RDI_0 +64 160),16] = [(RDI_0 +64 160),16]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007d7b: MOV RAX, QWORD PTR [RAX] 3"
 Post  "RAX = [[0x10000c008,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RDI_0 +64 160),16] = [(RDI_0 +64 160),16]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007d7e"
 Separations "((RSP_0 -64 56),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 56),8) SEP (0x10000a9b0,16); ((RSP_0 -64 56),8) SEP (0x10000c008,8); ((RSP_0 -64 56),8) SEP (0x1000105a6,1); ((RSP_0 -64 56),8) SEP (0x1000105a7,1); ((RSP_0 -64 56),8) SEP (0x1000105a8,8); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 160),8); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 160),16); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 168),8)"
 Assertions  ""
 Pre   "RAX = [[0x10000c008,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RDI_0 +64 160),16] = [(RDI_0 +64 160),16]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007d7e: MOV QWORD PTR [RBP - 48], RAX 4"
 Post  "RAX = [[0x10000c008,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RDI_0 +64 160),16] = [(RDI_0 +64 160),16]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007d82"
 Separations "((RDI_0 +64 168),8) SEP (RSP_0,8); ((RDI_0 +64 168),8) SEP ([0x10000c008,8]_0,8); ((RDI_0 +64 168),8) SEP (0x10000a9b0,16); ((RDI_0 +64 168),8) SEP (0x10000c008,8); ((RDI_0 +64 168),8) SEP (0x1000105a6,1); ((RDI_0 +64 168),8) SEP (0x1000105a7,1); ((RDI_0 +64 168),8) SEP (0x1000105a8,8); ((RDI_0 +64 168),8) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 168),8) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 168),8) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 168),8) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 168),8) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 168),8) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 168),8) SEP ((RSP_0 -64 56),8); ((RDI_0 +64 168),8) SEP ((RSP_0 -64 176),8)"
 Assertions  ""
 Pre   "RAX = [[0x10000c008,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RDI_0 +64 160),16] = [(RDI_0 +64 160),16]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007d82: CMP QWORD PTR [RDI + 168], 0 8"
 Post  "RAX = [[0x10000c008,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RDI_0 +64 160),16] = [(RDI_0 +64 160),16]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007d8a"
 Separations ""
 Assertions  ""
 Pre   "RAX = [[0x10000c008,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RDI_0 +64 160),16] = [(RDI_0 +64 160),16]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007d8a: JNE 4294999451 2"
 Post  "RAX = [[0x10000c008,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RDI_0 +64 160),16] = [(RDI_0 +64 160),16]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100007d57, blockId == 1 ##
#####################################
*)

htriple "ht_100007d8c"
 Separations "(0x10000a9b0,16) SEP (RSP_0,8); (0x10000a9b0,16) SEP ([0x10000c008,8]_0,8); (0x10000a9b0,16) SEP ((RDI_0 +64 160),8); (0x10000a9b0,16) SEP ((RDI_0 +64 160),16); (0x10000a9b0,16) SEP ((RDI_0 +64 168),8); (0x10000a9b0,16) SEP ((RSP_0 -64 8),8); (0x10000a9b0,16) SEP ((RSP_0 -64 16),8); (0x10000a9b0,16) SEP ((RSP_0 -64 24),8); (0x10000a9b0,16) SEP ((RSP_0 -64 32),8); (0x10000a9b0,16) SEP ((RSP_0 -64 40),8); (0x10000a9b0,16) SEP ((RSP_0 -64 48),8); (0x10000a9b0,16) SEP ((RSP_0 -64 56),8); (0x10000a9b0,16) SEP ((RSP_0 -64 176),8)"
 Assertions  ""
 Pre   "RAX = [[0x10000c008,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RDI_0 +64 160),16] = [(RDI_0 +64 160),16]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007d8c: MOVAPS XMM0, XMMWORD PTR [RIP + 11293] 7"
 Post  "RAX = [[0x10000c008,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RDI_0 +64 160),16] = [(RDI_0 +64 160),16]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007d93"
 Separations "((RDI_0 +64 160),8) SEP (RSP_0,8); ((RDI_0 +64 160),8) SEP ([0x10000c008,8]_0,8); ((RDI_0 +64 160),8) SEP (0x10000a9b0,16); ((RDI_0 +64 160),8) SEP (0x10000c008,8); ((RDI_0 +64 160),8) SEP (0x1000105a6,1); ((RDI_0 +64 160),8) SEP (0x1000105a7,1); ((RDI_0 +64 160),8) SEP (0x1000105a8,8); ((RDI_0 +64 160),8) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 160),8) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 160),8) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 160),8) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 160),8) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 160),8) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 160),8) SEP ((RSP_0 -64 56),8); ((RDI_0 +64 160),8) SEP ((RSP_0 -64 176),8); ((RDI_0 +64 160),16) SEP (RSP_0,8); ((RDI_0 +64 160),16) SEP ([0x10000c008,8]_0,8); ((RDI_0 +64 160),16) SEP (0x10000a9b0,16); ((RDI_0 +64 160),16) SEP (0x10000c008,8); ((RDI_0 +64 160),16) SEP (0x1000105a6,1); ((RDI_0 +64 160),16) SEP (0x1000105a7,1); ((RDI_0 +64 160),16) SEP (0x1000105a8,8); ((RDI_0 +64 160),16) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 160),16) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 160),16) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 160),16) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 160),16) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 160),16) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 160),16) SEP ((RSP_0 -64 56),8); ((RDI_0 +64 160),16) SEP ((RSP_0 -64 176),8)"
 Assertions  ""
 Pre   "RAX = [[0x10000c008,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RDI_0 +64 160),16] = [(RDI_0 +64 160),16]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007d93: MOVUPS XMMWORD PTR [R15 + 160], XMM0 8"
 Post  "RAX = [[0x10000c008,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100007d57, blockId == 2 ##
#####################################
*)

htriple "ht_100007d9b"
 Separations "(0x1000105a8,8) SEP (RSP_0,8); (0x1000105a8,8) SEP ([0x10000c008,8]_0,8); (0x1000105a8,8) SEP ((RDI_0 +64 160),8); (0x1000105a8,8) SEP ((RDI_0 +64 160),16); (0x1000105a8,8) SEP ((RDI_0 +64 168),8); (0x1000105a8,8) SEP ((RSP_0 -64 8),8); (0x1000105a8,8) SEP ((RSP_0 -64 16),8); (0x1000105a8,8) SEP ((RSP_0 -64 24),8); (0x1000105a8,8) SEP ((RSP_0 -64 32),8); (0x1000105a8,8) SEP ((RSP_0 -64 40),8); (0x1000105a8,8) SEP ((RSP_0 -64 48),8); (0x1000105a8,8) SEP ((RSP_0 -64 56),8); (0x1000105a8,8) SEP ((RSP_0 -64 176),8)"
 Assertions  ""
 Pre   "RAX = [[0x10000c008,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007d9b: CMP QWORD PTR [RIP + 34821], 0 8"
 Post  "RAX = [[0x10000c008,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007da3"
 Separations ""
 Assertions  ""
 Pre   "RAX = [[0x10000c008,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007da3: JNE 4294999473 2"
 Post  "RAX = [[0x10000c008,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100007d57, blockId == 3 ##
#####################################
*)

htriple "ht_100007da5"
 Separations ""
 Assertions  ""
 Pre   "RAX = [[0x10000c008,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007da5: LEA RDI, [RIP + 34812] 7"
 Post  "RAX = [[0x10000c008,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = 0x1000105a8 ; RSI = RSI_0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007dac"
 Separations ""
 Assertions  ""
 Pre   "RAX = [[0x10000c008,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = 0x1000105a8 ; RSI = RSI_0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007dac: ExternalCall fun__time 5"
 Post  "RAX = bot(fun__time) ; RBX = RBX_0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 FunctionConstraints "PRESERVES fun__time {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000a9b0,16];[0x10000c008,8];[0x1000105a6,1];[0x1000105a7,1];[0x1000105a8,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 176),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100007d57, blockId == 4 ##
#####################################
*)

htriple "ht_100007db1"
 Separations ""
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007db1: MOV RDI, R13 3"
 Post  "RBX = RBX_0 ; RDI = RDX_0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007db4"
 Separations ""
 Assertions  ""
 Pre   "RBX = RBX_0 ; RDI = RDX_0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007db4: ExternalCall fun__archive_entry_strmode 5"
 Post  "RAX = bot(fun__archive_entry_strmode) ; RBX = RBX_0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 FunctionConstraints "PRESERVES fun__archive_entry_strmode {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000a9b0,16];[0x10000c008,8];[0x1000105a6,1];[0x1000105a7,1];[0x1000105a8,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 176),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007db9"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_strmode) ; RBX = RBX_0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007db9: MOV RBX, RAX 3"
 Post  "RAX = bot(fun__archive_entry_strmode) ; RBX = bot(fun__archive_entry_strmode) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007dbc"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_strmode) ; RBX = bot(fun__archive_entry_strmode) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007dbc: MOV RDI, R13 3"
 Post  "RAX = bot(fun__archive_entry_strmode) ; RBX = bot(fun__archive_entry_strmode) ; RDI = RDX_0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007dbf"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_strmode) ; RBX = bot(fun__archive_entry_strmode) ; RDI = RDX_0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007dbf: ExternalCall fun__archive_entry_nlink 5"
 Post  "RAX = bot(fun__archive_entry_nlink) ; RBX = bot(fun__archive_entry_strmode) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 FunctionConstraints "PRESERVES fun__archive_entry_nlink {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000a9b0,16];[0x10000c008,8];[0x1000105a6,1];[0x1000105a7,1];[0x1000105a8,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 176),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007dc4"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_nlink) ; RBX = bot(fun__archive_entry_strmode) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007dc4: LEA RSI, [RIP + 15558] 7"
 Post  "RAX = bot(fun__archive_entry_nlink) ; RBX = bot(fun__archive_entry_strmode) ; RSI = 0x10000ba91 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007dcb"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_nlink) ; RBX = bot(fun__archive_entry_strmode) ; RSI = 0x10000ba91 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007dcb: MOV RDI, R14 3"
 Post  "RAX = bot(fun__archive_entry_nlink) ; RBX = bot(fun__archive_entry_strmode) ; RDI = RSI_0 ; RSI = 0x10000ba91 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007dce"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_nlink) ; RBX = bot(fun__archive_entry_strmode) ; RDI = RSI_0 ; RSI = 0x10000ba91 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007dce: MOV RDX, RBX 3"
 Post  "RAX = bot(fun__archive_entry_nlink) ; RBX = bot(fun__archive_entry_strmode) ; RDX = bot(fun__archive_entry_strmode) ; RDI = RSI_0 ; RSI = 0x10000ba91 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007dd1"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_nlink) ; RBX = bot(fun__archive_entry_strmode) ; RDX = bot(fun__archive_entry_strmode) ; RDI = RSI_0 ; RSI = 0x10000ba91 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007dd1: MOV ECX, EAX 2"
 Post  "RAX = bot(fun__archive_entry_nlink) ; RBX = bot(fun__archive_entry_strmode) ; RCX = b32(bot(fun__archive_entry_nlink)) ; RDX = bot(fun__archive_entry_strmode) ; RDI = RSI_0 ; RSI = 0x10000ba91 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007dd3"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_nlink) ; RBX = bot(fun__archive_entry_strmode) ; RCX = b32(bot(fun__archive_entry_nlink)) ; RDX = bot(fun__archive_entry_strmode) ; RDI = RSI_0 ; RSI = 0x10000ba91 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007dd3: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = bot(fun__archive_entry_strmode) ; RCX = b32(bot(fun__archive_entry_nlink)) ; RDX = bot(fun__archive_entry_strmode) ; RDI = RSI_0 ; RSI = 0x10000ba91 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007dd5"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = bot(fun__archive_entry_strmode) ; RCX = b32(bot(fun__archive_entry_nlink)) ; RDX = bot(fun__archive_entry_strmode) ; RDI = RSI_0 ; RSI = 0x10000ba91 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007dd5: ExternalCall fun__fprintf 5"
 Post  "RAX = bot(fun__fprintf) ; RBX = bot(fun__archive_entry_strmode) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 FunctionConstraints "PRESERVES fun__fprintf {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000a9b0,16];[0x10000c008,8];[0x1000105a6,1];[0x1000105a7,1];[0x1000105a8,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 176),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007dda"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fprintf) ; RBX = bot(fun__archive_entry_strmode) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007dda: MOV RDI, R13 3"
 Post  "RAX = bot(fun__fprintf) ; RBX = bot(fun__archive_entry_strmode) ; RDI = RDX_0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007ddd"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fprintf) ; RBX = bot(fun__archive_entry_strmode) ; RDI = RDX_0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007ddd: ExternalCall fun__archive_entry_uname 5"
 Post  "RAX = bot(fun__archive_entry_uname) ; RBX = bot(fun__archive_entry_strmode) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 FunctionConstraints "PRESERVES fun__archive_entry_uname {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000a9b0,16];[0x10000c008,8];[0x1000105a6,1];[0x1000105a7,1];[0x1000105a8,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 176),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007de2"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_uname) ; RBX = bot(fun__archive_entry_strmode) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007de2: TEST RAX, RAX 3"
 Post  "RAX = bot(fun__archive_entry_uname) ; RBX = bot(fun__archive_entry_strmode) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007de5"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_uname) ; RBX = bot(fun__archive_entry_strmode) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007de5: JE 4294999535 2"
 Post  "RAX = bot(fun__archive_entry_uname) ; RBX = bot(fun__archive_entry_strmode) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100007d57, blockId == 5 ##
#####################################
*)

htriple "ht_100007de7"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_uname) ; RBX = bot(fun__archive_entry_strmode) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007de7: MOV RBX, RAX 3"
 Post  "RAX = bot(fun__archive_entry_uname) ; RBX = bot(fun__archive_entry_uname) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007dea"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_uname) ; RBX = bot(fun__archive_entry_uname) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007dea: CMP BYTE PTR [RAX], 0 3"
 Post  "RAX = bot(fun__archive_entry_uname) ; RBX = bot(fun__archive_entry_uname) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007ded"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_uname) ; RBX = bot(fun__archive_entry_uname) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007ded: JNE 4294999580 2"
 Post  "RAX = bot(fun__archive_entry_uname) ; RBX = bot(fun__archive_entry_uname) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100007d57, blockId == 6 ##
#####################################
*)

htriple "ht_100007def"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_uname) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007def: LEA RBX, [RBP - 160] 7"
 Post  "RAX = bot(fun__archive_entry_uname) ; RBX = (RSP_0 -64 168) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007df6"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_uname) ; RBX = (RSP_0 -64 168) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007df6: MOV RDI, R13 3"
 Post  "RAX = bot(fun__archive_entry_uname) ; RBX = (RSP_0 -64 168) ; RDI = RDX_0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007df9"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_uname) ; RBX = (RSP_0 -64 168) ; RDI = RDX_0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007df9: ExternalCall fun__archive_entry_uid 5"
 Post  "RAX = bot(fun__archive_entry_uid) ; RBX = (RSP_0 -64 168) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 FunctionConstraints "PRESERVES fun__archive_entry_uid {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000a9b0,16];[0x10000c008,8];[0x1000105a6,1];[0x1000105a7,1];[0x1000105a8,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 176),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007dfe"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_uid) ; RBX = (RSP_0 -64 168) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007dfe: LEA RCX, [RIP + 15507] 7"
 Post  "RAX = bot(fun__archive_entry_uid) ; RBX = (RSP_0 -64 168) ; RCX = 0x10000ba98 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007e05"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_uid) ; RBX = (RSP_0 -64 168) ; RCX = 0x10000ba98 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007e05: MOV EDX, 100 5"
 Post  "RAX = bot(fun__archive_entry_uid) ; RBX = (RSP_0 -64 168) ; RCX = 0x10000ba98 ; RDX = 100 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007e0a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_uid) ; RBX = (RSP_0 -64 168) ; RCX = 0x10000ba98 ; RDX = 100 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007e0a: MOV RDI, RBX 3"
 Post  "RAX = bot(fun__archive_entry_uid) ; RBX = (RSP_0 -64 168) ; RCX = 0x10000ba98 ; RDX = 100 ; RDI = (RSP_0 -64 168) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007e0d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_uid) ; RBX = (RSP_0 -64 168) ; RCX = 0x10000ba98 ; RDX = 100 ; RDI = (RSP_0 -64 168) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007e0d: MOV ESI, 0 5"
 Post  "RAX = bot(fun__archive_entry_uid) ; RBX = (RSP_0 -64 168) ; RCX = 0x10000ba98 ; RDX = 100 ; RDI = (RSP_0 -64 168) ; RSI = 0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007e12"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_uid) ; RBX = (RSP_0 -64 168) ; RCX = 0x10000ba98 ; RDX = 100 ; RDI = (RSP_0 -64 168) ; RSI = 0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007e12: MOV R8, RAX 3"
 Post  "RAX = bot(fun__archive_entry_uid) ; RBX = (RSP_0 -64 168) ; RCX = 0x10000ba98 ; RDX = 100 ; RDI = (RSP_0 -64 168) ; RSI = 0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; R8 = bot(fun__archive_entry_uid) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007e15"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_uid) ; RBX = (RSP_0 -64 168) ; RCX = 0x10000ba98 ; RDX = 100 ; RDI = (RSP_0 -64 168) ; RSI = 0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; R8 = bot(fun__archive_entry_uid) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007e15: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = (RSP_0 -64 168) ; RCX = 0x10000ba98 ; RDX = 100 ; RDI = (RSP_0 -64 168) ; RSI = 0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; R8 = bot(fun__archive_entry_uid) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007e17"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = (RSP_0 -64 168) ; RCX = 0x10000ba98 ; RDX = 100 ; RDI = (RSP_0 -64 168) ; RSI = 0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; R8 = bot(fun__archive_entry_uid) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007e17: ExternalCall fun____sprintf_chk 5"
 Post  "RAX = bot(fun____sprintf_chk) ; RBX = (RSP_0 -64 168) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 FunctionConstraints "PRESERVES fun____sprintf_chk {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000a9b0,16];[0x10000c008,8];[0x1000105a6,1];[0x1000105a7,1];[0x1000105a8,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 176),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100007d57, blockId == 7 ##
#####################################
*)

htriple "ht_100007e1c"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007e1c: MOV RDI, RBX 3"
 Post  "RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007e1f"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007e1f: ExternalCall fun__strlen 5"
 Post  "RAX = bot(fun__strlen) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 FunctionConstraints "PRESERVES fun__strlen {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000a9b0,16];[0x10000c008,8];[0x1000105a6,1];[0x1000105a7,1];[0x1000105a8,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 176),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007e24"
 Separations "((RDI_0 +64 168),8) SEP (RSP_0,8); ((RDI_0 +64 168),8) SEP ([0x10000c008,8]_0,8); ((RDI_0 +64 168),8) SEP (0x10000a9b0,16); ((RDI_0 +64 168),8) SEP (0x10000c008,8); ((RDI_0 +64 168),8) SEP (0x1000105a6,1); ((RDI_0 +64 168),8) SEP (0x1000105a7,1); ((RDI_0 +64 168),8) SEP (0x1000105a8,8); ((RDI_0 +64 168),8) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 168),8) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 168),8) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 168),8) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 168),8) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 168),8) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 168),8) SEP ((RSP_0 -64 56),8); ((RDI_0 +64 168),8) SEP ((RSP_0 -64 176),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__strlen) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007e24: MOV RDX, QWORD PTR [R15 + 168] 7"
 Post  "RAX = bot(fun__strlen) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007e2b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strlen) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007e2b: CMP RAX, RDX 3"
 Post  "RAX = bot(fun__strlen) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007e2e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strlen) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007e2e: JBE 4294999610 2"
 Post  "RAX = bot(fun__strlen) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100007d57, blockId == 8 ##
#####################################
*)

htriple "ht_100007e30"
 Separations "((RDI_0 +64 168),8) SEP (RSP_0,8); ((RDI_0 +64 168),8) SEP ([0x10000c008,8]_0,8); ((RDI_0 +64 168),8) SEP (0x10000a9b0,16); ((RDI_0 +64 168),8) SEP (0x10000c008,8); ((RDI_0 +64 168),8) SEP (0x1000105a6,1); ((RDI_0 +64 168),8) SEP (0x1000105a7,1); ((RDI_0 +64 168),8) SEP (0x1000105a8,8); ((RDI_0 +64 168),8) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 168),8) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 168),8) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 168),8) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 168),8) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 168),8) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 168),8) SEP ((RSP_0 -64 56),8); ((RDI_0 +64 168),8) SEP ((RSP_0 -64 176),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__strlen) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007e30: MOV QWORD PTR [R15 + 168], RAX 7"
 Post  "RAX = bot(fun__strlen) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007e37"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strlen) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007e37: MOV RDX, RAX 3"
 Post  "RAX = bot(fun__strlen) ; RDX = bot(fun__strlen) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100007d57, blockId == 9 ##
#####################################
*)

htriple "ht_100007e3a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strlen) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007e3a: LEA RSI, [RIP + 15452] 7"
 Post  "RAX = bot(fun__strlen) ; RSI = 0x10000ba9d ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007e41"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strlen) ; RSI = 0x10000ba9d ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007e41: MOV RDI, R14 3"
 Post  "RAX = bot(fun__strlen) ; RDI = RSI_0 ; RSI = 0x10000ba9d ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007e44"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strlen) ; RDI = RSI_0 ; RSI = 0x10000ba9d ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007e44: MOV RCX, RBX 3"
 Post  "RAX = bot(fun__strlen) ; RDI = RSI_0 ; RSI = 0x10000ba9d ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007e47"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strlen) ; RDI = RSI_0 ; RSI = 0x10000ba9d ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007e47: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RDI = RSI_0 ; RSI = 0x10000ba9d ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007e49"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RDI = RSI_0 ; RSI = 0x10000ba9d ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007e49: ExternalCall fun__fprintf 5"
 Post  "RAX = bot(fun__fprintf) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 FunctionConstraints "PRESERVES fun__fprintf {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000a9b0,16];[0x10000c008,8];[0x1000105a6,1];[0x1000105a7,1];[0x1000105a8,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 176),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007e4e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fprintf) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007e4e: MOV RDI, R13 3"
 Post  "RAX = bot(fun__fprintf) ; RDI = RDX_0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007e51"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fprintf) ; RDI = RDX_0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007e51: ExternalCall fun__archive_entry_gname 5"
 Post  "RAX = bot(fun__archive_entry_gname) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 FunctionConstraints "PRESERVES fun__archive_entry_gname {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000a9b0,16];[0x10000c008,8];[0x1000105a6,1];[0x1000105a7,1];[0x1000105a8,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 176),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007e56"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_gname) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007e56: TEST RAX, RAX 3"
 Post  "RAX = bot(fun__archive_entry_gname) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007e59"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_gname) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007e59: JE 4294999675 2"
 Post  "RAX = bot(fun__archive_entry_gname) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100007d57, blockId == 10 ##
######################################
*)

htriple "ht_100007e5b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_gname) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007e5b: MOV RBX, RAX 3"
 Post  "RAX = bot(fun__archive_entry_gname) ; RBX = bot(fun__archive_entry_gname) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007e5e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_gname) ; RBX = bot(fun__archive_entry_gname) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007e5e: CMP BYTE PTR [RAX], 0 3"
 Post  "RAX = bot(fun__archive_entry_gname) ; RBX = bot(fun__archive_entry_gname) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007e61"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_gname) ; RBX = bot(fun__archive_entry_gname) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007e61: JE 4294999675 2"
 Post  "RAX = bot(fun__archive_entry_gname) ; RBX = bot(fun__archive_entry_gname) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100007d57, blockId == 11 ##
######################################
*)

htriple "ht_100007e7b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_gname) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007e7b: MOV RDI, R13 3"
 Post  "RAX = bot(fun__archive_entry_gname) ; RDI = RDX_0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007e7e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_gname) ; RDI = RDX_0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007e7e: ExternalCall fun__archive_entry_gid 5"
 Post  "RAX = bot(fun__archive_entry_gid) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 FunctionConstraints "PRESERVES fun__archive_entry_gid {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000a9b0,16];[0x10000c008,8];[0x1000105a6,1];[0x1000105a7,1];[0x1000105a8,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 176),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007e83"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_gid) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007e83: LEA RCX, [RIP + 15385] 7"
 Post  "RAX = bot(fun__archive_entry_gid) ; RCX = 0x10000baa3 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007e8a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_gid) ; RCX = 0x10000baa3 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007e8a: LEA RBX, [RBP - 160] 7"
 Post  "RAX = bot(fun__archive_entry_gid) ; RBX = (RSP_0 -64 168) ; RCX = 0x10000baa3 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007e91"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_gid) ; RBX = (RSP_0 -64 168) ; RCX = 0x10000baa3 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007e91: MOV EDX, 100 5"
 Post  "RAX = bot(fun__archive_entry_gid) ; RBX = (RSP_0 -64 168) ; RCX = 0x10000baa3 ; RDX = 100 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007e96"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_gid) ; RBX = (RSP_0 -64 168) ; RCX = 0x10000baa3 ; RDX = 100 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007e96: MOV RDI, RBX 3"
 Post  "RAX = bot(fun__archive_entry_gid) ; RBX = (RSP_0 -64 168) ; RCX = 0x10000baa3 ; RDX = 100 ; RDI = (RSP_0 -64 168) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007e99"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_gid) ; RBX = (RSP_0 -64 168) ; RCX = 0x10000baa3 ; RDX = 100 ; RDI = (RSP_0 -64 168) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007e99: MOV ESI, 0 5"
 Post  "RAX = bot(fun__archive_entry_gid) ; RBX = (RSP_0 -64 168) ; RCX = 0x10000baa3 ; RDX = 100 ; RDI = (RSP_0 -64 168) ; RSI = 0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007e9e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_gid) ; RBX = (RSP_0 -64 168) ; RCX = 0x10000baa3 ; RDX = 100 ; RDI = (RSP_0 -64 168) ; RSI = 0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007e9e: MOV R8, RAX 3"
 Post  "RAX = bot(fun__archive_entry_gid) ; RBX = (RSP_0 -64 168) ; RCX = 0x10000baa3 ; RDX = 100 ; RDI = (RSP_0 -64 168) ; RSI = 0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; R8 = bot(fun__archive_entry_gid) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007ea1"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_gid) ; RBX = (RSP_0 -64 168) ; RCX = 0x10000baa3 ; RDX = 100 ; RDI = (RSP_0 -64 168) ; RSI = 0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; R8 = bot(fun__archive_entry_gid) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007ea1: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = (RSP_0 -64 168) ; RCX = 0x10000baa3 ; RDX = 100 ; RDI = (RSP_0 -64 168) ; RSI = 0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; R8 = bot(fun__archive_entry_gid) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007ea3"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = (RSP_0 -64 168) ; RCX = 0x10000baa3 ; RDX = 100 ; RDI = (RSP_0 -64 168) ; RSI = 0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; R8 = bot(fun__archive_entry_gid) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007ea3: ExternalCall fun____sprintf_chk 5"
 Post  "RAX = bot(fun____sprintf_chk) ; RBX = (RSP_0 -64 168) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 FunctionConstraints "PRESERVES fun____sprintf_chk {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000a9b0,16];[0x10000c008,8];[0x1000105a6,1];[0x1000105a7,1];[0x1000105a8,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 176),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007ea8"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun____sprintf_chk) ; RBX = (RSP_0 -64 168) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007ea8: MOV RDI, RBX 3"
 Post  "RAX = bot(fun____sprintf_chk) ; RBX = (RSP_0 -64 168) ; RDI = (RSP_0 -64 168) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007eab"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun____sprintf_chk) ; RBX = (RSP_0 -64 168) ; RDI = (RSP_0 -64 168) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007eab: ExternalCall fun__strlen 5"
 Post  "RAX = bot(fun__strlen) ; RBX = (RSP_0 -64 168) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 FunctionConstraints "PRESERVES fun__strlen {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000a9b0,16];[0x10000c008,8];[0x1000105a6,1];[0x1000105a7,1];[0x1000105a8,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 176),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007eb0"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strlen) ; RBX = (RSP_0 -64 168) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007eb0: MOV R12, RAX 3"
 Post  "RAX = bot(fun__strlen) ; RBX = (RSP_0 -64 168) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007eb3"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strlen) ; RBX = (RSP_0 -64 168) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007eb3: MOV RDI, RBX 3"
 Post  "RAX = bot(fun__strlen) ; RBX = (RSP_0 -64 168) ; RDI = (RSP_0 -64 168) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007eb6"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strlen) ; RBX = (RSP_0 -64 168) ; RDI = (RSP_0 -64 168) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007eb6: MOV RSI, R14 3"
 Post  "RAX = bot(fun__strlen) ; RBX = (RSP_0 -64 168) ; RDI = (RSP_0 -64 168) ; RSI = RSI_0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007eb9"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strlen) ; RBX = (RSP_0 -64 168) ; RDI = (RSP_0 -64 168) ; RSI = RSI_0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007eb9: ExternalCall fun__fputs 5"
 Post  "RAX = bot(fun__fputs) ; RBX = (RSP_0 -64 168) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 FunctionConstraints "PRESERVES fun__fputs {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000a9b0,16];[0x10000c008,8];[0x1000105a6,1];[0x1000105a7,1];[0x1000105a8,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 176),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100007d57, blockId == 12 ##
######################################
*)

htriple "ht_100007e63"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_gname) ; RBX = bot(fun__archive_entry_gname) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007e63: MOV RDI, RBX 3"
 Post  "RAX = bot(fun__archive_entry_gname) ; RBX = bot(fun__archive_entry_gname) ; RDI = bot(fun__archive_entry_gname) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007e66"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_gname) ; RBX = bot(fun__archive_entry_gname) ; RDI = bot(fun__archive_entry_gname) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007e66: MOV RSI, R14 3"
 Post  "RAX = bot(fun__archive_entry_gname) ; RBX = bot(fun__archive_entry_gname) ; RDI = bot(fun__archive_entry_gname) ; RSI = RSI_0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007e69"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_gname) ; RBX = bot(fun__archive_entry_gname) ; RDI = bot(fun__archive_entry_gname) ; RSI = RSI_0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007e69: ExternalCall fun__fputs 5"
 Post  "RAX = bot(fun__fputs) ; RBX = bot(fun__archive_entry_gname) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 FunctionConstraints "PRESERVES fun__fputs {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000a9b0,16];[0x10000c008,8];[0x1000105a6,1];[0x1000105a7,1];[0x1000105a8,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 176),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007e6e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fputs) ; RBX = bot(fun__archive_entry_gname) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007e6e: MOV RDI, RBX 3"
 Post  "RAX = bot(fun__fputs) ; RBX = bot(fun__archive_entry_gname) ; RDI = bot(fun__archive_entry_gname) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007e71"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fputs) ; RBX = bot(fun__archive_entry_gname) ; RDI = bot(fun__archive_entry_gname) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007e71: ExternalCall fun__strlen 5"
 Post  "RAX = bot(fun__strlen) ; RBX = bot(fun__archive_entry_gname) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 FunctionConstraints "PRESERVES fun__strlen {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000a9b0,16];[0x10000c008,8];[0x1000105a6,1];[0x1000105a7,1];[0x1000105a8,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 176),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007e76"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strlen) ; RBX = bot(fun__archive_entry_gname) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007e76: MOV R12, RAX 3"
 Post  "RAX = bot(fun__strlen) ; RBX = bot(fun__archive_entry_gname) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007e79"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strlen) ; RBX = bot(fun__archive_entry_gname) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007e79: JMP 4294999742 2"
 Post  "RAX = bot(fun__strlen) ; RBX = bot(fun__archive_entry_gname) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100007d57, blockId == 13 ##
######################################
*)

htriple "ht_100007ebe"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007ebe: MOV RDI, R13 3"
 Post  "RDI = RDX_0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007ec1"
 Separations ""
 Assertions  ""
 Pre   "RDI = RDX_0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007ec1: ExternalCall fun__archive_entry_filetype 5"
 Post  "RAX = bot(fun__archive_entry_filetype) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 FunctionConstraints "PRESERVES fun__archive_entry_filetype {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000a9b0,16];[0x10000c008,8];[0x1000105a6,1];[0x1000105a7,1];[0x1000105a8,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 176),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007ec6"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_filetype) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007ec6: MOVZX EAX, AX 3"
 Post  "RAX = b16(bot(fun__archive_entry_filetype)) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007ec9"
 Separations ""
 Assertions  ""
 Pre   "RAX = b16(bot(fun__archive_entry_filetype)) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007ec9: CMP EAX, 8192 5"
 Post  "RAX = b16(bot(fun__archive_entry_filetype)) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007ece"
 Separations ""
 Assertions  ""
 Pre   "RAX = b16(bot(fun__archive_entry_filetype)) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007ece: JE 4294999778 2"
 Post  "RAX = b16(bot(fun__archive_entry_filetype)) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100007d57, blockId == 14 ##
######################################
*)

htriple "ht_100007ed0"
 Separations ""
 Assertions  ""
 Pre   "RAX = b16(bot(fun__archive_entry_filetype)) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007ed0: MOV RDI, R13 3"
 Post  "RAX = b16(bot(fun__archive_entry_filetype)) ; RDI = RDX_0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007ed3"
 Separations ""
 Assertions  ""
 Pre   "RAX = b16(bot(fun__archive_entry_filetype)) ; RDI = RDX_0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007ed3: ExternalCall fun__archive_entry_filetype 5"
 Post  "RAX = bot(fun__archive_entry_filetype) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 FunctionConstraints "PRESERVES fun__archive_entry_filetype {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000a9b0,16];[0x10000c008,8];[0x1000105a6,1];[0x1000105a7,1];[0x1000105a8,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 176),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007ed8"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_filetype) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007ed8: MOVZX EAX, AX 3"
 Post  "RAX = b16(bot(fun__archive_entry_filetype)) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007edb"
 Separations ""
 Assertions  ""
 Pre   "RAX = b16(bot(fun__archive_entry_filetype)) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007edb: CMP EAX, 24576 5"
 Post  "RAX = b16(bot(fun__archive_entry_filetype)) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007ee0"
 Separations ""
 Assertions  ""
 Pre   "RAX = b16(bot(fun__archive_entry_filetype)) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007ee0: JNE 4294999836 2"
 Post  "RAX = b16(bot(fun__archive_entry_filetype)) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100007d57, blockId == 15 ##
######################################
*)

htriple "ht_100007ee2"
 Separations ""
 Assertions  ""
 Pre   "RAX = b16(bot(fun__archive_entry_filetype)) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007ee2: MOV RDI, R13 3"
 Post  "RAX = b16(bot(fun__archive_entry_filetype)) ; RDI = RDX_0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007ee5"
 Separations ""
 Assertions  ""
 Pre   "RAX = b16(bot(fun__archive_entry_filetype)) ; RDI = RDX_0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007ee5: ExternalCall fun__archive_entry_rdevmajor 5"
 Post  "RAX = bot(fun__archive_entry_rdevmajor) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 FunctionConstraints "PRESERVES fun__archive_entry_rdevmajor {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000a9b0,16];[0x10000c008,8];[0x1000105a6,1];[0x1000105a7,1];[0x1000105a8,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 176),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007eea"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_rdevmajor) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007eea: MOVSXD RBX, EAX 3"
 Post  "RAX = bot(fun__archive_entry_rdevmajor) ; RBX = signextend(32,64, bot(fun__archive_entry_rdevmajor)) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007eed"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_rdevmajor) ; RBX = signextend(32,64, bot(fun__archive_entry_rdevmajor)) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007eed: MOV RDI, R13 3"
 Post  "RAX = bot(fun__archive_entry_rdevmajor) ; RBX = signextend(32,64, bot(fun__archive_entry_rdevmajor)) ; RDI = RDX_0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007ef0"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_rdevmajor) ; RBX = signextend(32,64, bot(fun__archive_entry_rdevmajor)) ; RDI = RDX_0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007ef0: ExternalCall fun__archive_entry_rdevminor 5"
 Post  "RAX = bot(fun__archive_entry_rdevminor) ; RBX = signextend(32,64, bot(fun__archive_entry_rdevmajor)) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 FunctionConstraints "PRESERVES fun__archive_entry_rdevminor {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000a9b0,16];[0x10000c008,8];[0x1000105a6,1];[0x1000105a7,1];[0x1000105a8,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 176),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007ef5"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_rdevminor) ; RBX = signextend(32,64, bot(fun__archive_entry_rdevmajor)) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007ef5: MOVSXD R9, EAX 3"
 Post  "RAX = bot(fun__archive_entry_rdevminor) ; RBX = signextend(32,64, bot(fun__archive_entry_rdevmajor)) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; R9 = signextend(32,64, bot(fun__archive_entry_rdevminor)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007ef8"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_rdevminor) ; RBX = signextend(32,64, bot(fun__archive_entry_rdevmajor)) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; R9 = signextend(32,64, bot(fun__archive_entry_rdevminor)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007ef8: LEA RCX, [RIP + 15272] 7"
 Post  "RAX = bot(fun__archive_entry_rdevminor) ; RBX = signextend(32,64, bot(fun__archive_entry_rdevmajor)) ; RCX = 0x10000baa7 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; R9 = signextend(32,64, bot(fun__archive_entry_rdevminor)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007eff"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_rdevminor) ; RBX = signextend(32,64, bot(fun__archive_entry_rdevmajor)) ; RCX = 0x10000baa7 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; R9 = signextend(32,64, bot(fun__archive_entry_rdevminor)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007eff: LEA RDI, [RBP - 160] 7"
 Post  "RAX = bot(fun__archive_entry_rdevminor) ; RBX = signextend(32,64, bot(fun__archive_entry_rdevmajor)) ; RCX = 0x10000baa7 ; RDI = (RSP_0 -64 168) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; R9 = signextend(32,64, bot(fun__archive_entry_rdevminor)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007f06"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_rdevminor) ; RBX = signextend(32,64, bot(fun__archive_entry_rdevmajor)) ; RCX = 0x10000baa7 ; RDI = (RSP_0 -64 168) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; R9 = signextend(32,64, bot(fun__archive_entry_rdevminor)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007f06: MOV EDX, 100 5"
 Post  "RAX = bot(fun__archive_entry_rdevminor) ; RBX = signextend(32,64, bot(fun__archive_entry_rdevmajor)) ; RCX = 0x10000baa7 ; RDX = 100 ; RDI = (RSP_0 -64 168) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; R9 = signextend(32,64, bot(fun__archive_entry_rdevminor)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007f0b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_rdevminor) ; RBX = signextend(32,64, bot(fun__archive_entry_rdevmajor)) ; RCX = 0x10000baa7 ; RDX = 100 ; RDI = (RSP_0 -64 168) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; R9 = signextend(32,64, bot(fun__archive_entry_rdevminor)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007f0b: MOV ESI, 0 5"
 Post  "RAX = bot(fun__archive_entry_rdevminor) ; RBX = signextend(32,64, bot(fun__archive_entry_rdevmajor)) ; RCX = 0x10000baa7 ; RDX = 100 ; RDI = (RSP_0 -64 168) ; RSI = 0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; R9 = signextend(32,64, bot(fun__archive_entry_rdevminor)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007f10"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_rdevminor) ; RBX = signextend(32,64, bot(fun__archive_entry_rdevmajor)) ; RCX = 0x10000baa7 ; RDX = 100 ; RDI = (RSP_0 -64 168) ; RSI = 0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; R9 = signextend(32,64, bot(fun__archive_entry_rdevminor)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007f10: MOV R8, RBX 3"
 Post  "RAX = bot(fun__archive_entry_rdevminor) ; RBX = signextend(32,64, bot(fun__archive_entry_rdevmajor)) ; RCX = 0x10000baa7 ; RDX = 100 ; RDI = (RSP_0 -64 168) ; RSI = 0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; R9 = signextend(32,64, bot(fun__archive_entry_rdevminor)) ; R8 = signextend(32,64, bot(fun__archive_entry_rdevmajor)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007f13"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_rdevminor) ; RBX = signextend(32,64, bot(fun__archive_entry_rdevmajor)) ; RCX = 0x10000baa7 ; RDX = 100 ; RDI = (RSP_0 -64 168) ; RSI = 0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; R9 = signextend(32,64, bot(fun__archive_entry_rdevminor)) ; R8 = signextend(32,64, bot(fun__archive_entry_rdevmajor)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007f13: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = signextend(32,64, bot(fun__archive_entry_rdevmajor)) ; RCX = 0x10000baa7 ; RDX = 100 ; RDI = (RSP_0 -64 168) ; RSI = 0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; R9 = signextend(32,64, bot(fun__archive_entry_rdevminor)) ; R8 = signextend(32,64, bot(fun__archive_entry_rdevmajor)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007f15"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = signextend(32,64, bot(fun__archive_entry_rdevmajor)) ; RCX = 0x10000baa7 ; RDX = 100 ; RDI = (RSP_0 -64 168) ; RSI = 0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; R9 = signextend(32,64, bot(fun__archive_entry_rdevminor)) ; R8 = signextend(32,64, bot(fun__archive_entry_rdevmajor)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007f15: ExternalCall fun____sprintf_chk 5"
 Post  "RAX = bot(fun____sprintf_chk) ; RBX = signextend(32,64, bot(fun__archive_entry_rdevmajor)) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 FunctionConstraints "PRESERVES fun____sprintf_chk {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000a9b0,16];[0x10000c008,8];[0x1000105a6,1];[0x1000105a7,1];[0x1000105a8,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 176),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007f1a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun____sprintf_chk) ; RBX = signextend(32,64, bot(fun__archive_entry_rdevmajor)) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007f1a: JMP 4294999948 2"
 Post  "RAX = bot(fun____sprintf_chk) ; RBX = signextend(32,64, bot(fun__archive_entry_rdevmajor)) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100007d57, blockId == 16 ##
######################################
*)

htriple "ht_100007f1c"
 Separations ""
 Assertions  ""
 Pre   "RAX = b16(bot(fun__archive_entry_filetype)) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007f1c: MOV RDI, R13 3"
 Post  "RAX = b16(bot(fun__archive_entry_filetype)) ; RDI = RDX_0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007f1f"
 Separations ""
 Assertions  ""
 Pre   "RAX = b16(bot(fun__archive_entry_filetype)) ; RDI = RDX_0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007f1f: ExternalCall fun__archive_entry_size 5"
 Post  "RAX = bot(fun__archive_entry_size) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 FunctionConstraints "PRESERVES fun__archive_entry_size {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000a9b0,16];[0x10000c008,8];[0x1000105a6,1];[0x1000105a7,1];[0x1000105a8,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 176),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007f24"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_size) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007f24: MOV R8, RAX 3"
 Post  "RAX = bot(fun__archive_entry_size) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; R8 = bot(fun__archive_entry_size) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007f27"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_size) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; R8 = bot(fun__archive_entry_size) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007f27: MOV RDI, RAX 3"
 Post  "RAX = bot(fun__archive_entry_size) ; RDI = bot(fun__archive_entry_size) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; R8 = bot(fun__archive_entry_size) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007f2a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_size) ; RDI = bot(fun__archive_entry_size) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; R8 = bot(fun__archive_entry_size) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007f2a: NEG RDI 3"
 Post  "RAX = bot(fun__archive_entry_size) ; RDI = (0 -64 bot(fun__archive_entry_size)) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; R8 = bot(fun__archive_entry_size) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007f2d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_size) ; RDI = (0 -64 bot(fun__archive_entry_size)) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; R8 = bot(fun__archive_entry_size) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007f2d: CMOVL RDI, RAX 4"
 Post  "RAX = bot(fun__archive_entry_size) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; R8 = bot(fun__archive_entry_size) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007f31"
 Separations "(0x1000105a7,1) SEP (RSP_0,8); (0x1000105a7,1) SEP ([0x10000c008,8]_0,8); (0x1000105a7,1) SEP ((RDI_0 +64 160),8); (0x1000105a7,1) SEP ((RDI_0 +64 160),16); (0x1000105a7,1) SEP ((RDI_0 +64 168),8); (0x1000105a7,1) SEP ((RSP_0 -64 8),8); (0x1000105a7,1) SEP ((RSP_0 -64 16),8); (0x1000105a7,1) SEP ((RSP_0 -64 24),8); (0x1000105a7,1) SEP ((RSP_0 -64 32),8); (0x1000105a7,1) SEP ((RSP_0 -64 40),8); (0x1000105a7,1) SEP ((RSP_0 -64 48),8); (0x1000105a7,1) SEP ((RSP_0 -64 56),8); (0x1000105a7,1) SEP ((RSP_0 -64 176),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_size) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; R8 = bot(fun__archive_entry_size) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = [0x1000105a7,1]_0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007f31: MOV BYTE PTR [RIP + 34415], 0 7"
 Post  "RAX = bot(fun__archive_entry_size) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; R8 = bot(fun__archive_entry_size) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = 0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007f38"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_size) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; R8 = bot(fun__archive_entry_size) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = 0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007f38: LEA RSI, [RIP + 34407] 7"
 Post  "RAX = bot(fun__archive_entry_size) ; RSI = 0x1000105a6 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; R8 = bot(fun__archive_entry_size) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = 0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007f3f"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_size) ; RSI = 0x1000105a6 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; R8 = bot(fun__archive_entry_size) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = 0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007f3f: MOVABS RBX, 14757395258967641293 10"
 Post  "RAX = bot(fun__archive_entry_size) ; RBX = 0xcccccccccccccccd ; RSI = 0x1000105a6 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; R8 = bot(fun__archive_entry_size) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000a9b0,16] = [0x10000a9b0,16]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x1000105a6,1] = [0x1000105a6,1]_0 ; [0x1000105a7,1] = 0 ; [0x1000105a8,8] = [0x1000105a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100007d57, blockId == 17 ##
######################################
*)

htriple "ht_100007f49"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; R8 = bot(fun__archive_entry_size) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007f49: MOV RAX, RDI 3"
 Post  "RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; R8 = bot(fun__archive_entry_size) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007f4c"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; R8 = bot(fun__archive_entry_size) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007f4c: MUL RBX 3"
 Post  "RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; R8 = bot(fun__archive_entry_size) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007f4f"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; R8 = bot(fun__archive_entry_size) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007f4f: SHR RDX, 3 4"
 Post  "RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; R8 = bot(fun__archive_entry_size) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007f53"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; R8 = bot(fun__archive_entry_size) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007f53: LEA EAX, [RDX + RDX] 3"
 Post  "RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; R8 = bot(fun__archive_entry_size) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007f56"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; R8 = bot(fun__archive_entry_size) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007f56: LEA EAX, [RAX + RAX * 4] 3"
 Post  "RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; R8 = bot(fun__archive_entry_size) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007f59"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; R8 = bot(fun__archive_entry_size) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007f59: MOV ECX, EDI 2"
 Post  "RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; R8 = bot(fun__archive_entry_size) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007f5b"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; R8 = bot(fun__archive_entry_size) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007f5b: SUB ECX, EAX 2"
 Post  "RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; R8 = bot(fun__archive_entry_size) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007f5d"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; R8 = bot(fun__archive_entry_size) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007f5d: OR CL, 48 3"
 Post  "RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; R8 = bot(fun__archive_entry_size) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007f60"
 Separations ""
 Assertions  "(RSI,1) SEP (RSP_0,8); (RSI,1) SEP ((RSP_0 -64 8),8); (RSI,1) SEP ((RSP_0 -64 16),8); (RSI,1) SEP ((RSP_0 -64 24),8); (RSI,1) SEP ((RSP_0 -64 32),8); (RSI,1) SEP ((RSP_0 -64 40),8); (RSI,1) SEP ((RSP_0 -64 48),8); (RSI,1) SEP ((RSP_0 -64 56),8); (RSI,1) SEP ((RSP_0 -64 176),8)"
 Pre   "RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; R8 = bot(fun__archive_entry_size) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007f60: MOV BYTE PTR [RSI], CL 2"
 Post  "RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; R8 = bot(fun__archive_entry_size) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007f62"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; R8 = bot(fun__archive_entry_size) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007f62: DEC RSI 3"
 Post  "RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; R8 = bot(fun__archive_entry_size) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007f65"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; R8 = bot(fun__archive_entry_size) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007f65: CMP RDI, 9 4"
 Post  "RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; R8 = bot(fun__archive_entry_size) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007f69"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; R8 = bot(fun__archive_entry_size) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007f69: MOV RDI, RDX 3"
 Post  "RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; R8 = bot(fun__archive_entry_size) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007f6c"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; R8 = bot(fun__archive_entry_size) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007f6c: JA 4294999881 2"
 Post  "RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; R8 = bot(fun__archive_entry_size) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100007d57, blockId == 18 ##
######################################
*)

htriple "ht_100007f6e"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; R8 = bot(fun__archive_entry_size) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007f6e: TEST R8, R8 3"
 Post  "RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; R8 = bot(fun__archive_entry_size) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007f71"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; R8 = bot(fun__archive_entry_size) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007f71: JS 4294999928 2"
 Post  "RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; R8 = bot(fun__archive_entry_size) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100007d57, blockId == 19 ##
######################################
*)

htriple "ht_100007f73"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; R8 = bot(fun__archive_entry_size) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007f73: INC RSI 3"
 Post  "RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; R8 = bot(fun__archive_entry_size) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007f76"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; R8 = bot(fun__archive_entry_size) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007f76: JMP 4294999931 2"
 Post  "RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; R8 = bot(fun__archive_entry_size) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100007d57, blockId == 20 ##
######################################
*)

htriple "ht_100007f78"
 Separations ""
 Assertions  "(RSI,1) SEP (RSP_0,8); (RSI,1) SEP ((RSP_0 -64 8),8); (RSI,1) SEP ((RSP_0 -64 16),8); (RSI,1) SEP ((RSP_0 -64 24),8); (RSI,1) SEP ((RSP_0 -64 32),8); (RSI,1) SEP ((RSP_0 -64 40),8); (RSI,1) SEP ((RSP_0 -64 48),8); (RSI,1) SEP ((RSP_0 -64 56),8); (RSI,1) SEP ((RSP_0 -64 176),8)"
 Pre   "RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; R8 = bot(fun__archive_entry_size) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007f78: MOV BYTE PTR [RSI], 45 3"
 Post  "RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; R8 = bot(fun__archive_entry_size) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100007d57, blockId == 21 ##
######################################
*)

htriple "ht_100007f7b"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; R8 = bot(fun__archive_entry_size) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007f7b: LEA RDI, [RBP - 160] 7"
 Post  "RDI = (RSP_0 -64 168) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; R8 = bot(fun__archive_entry_size) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007f82"
 Separations ""
 Assertions  ""
 Pre   "RDI = (RSP_0 -64 168) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; R8 = bot(fun__archive_entry_size) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007f82: MOV EDX, 100 5"
 Post  "RDX = 100 ; RDI = (RSP_0 -64 168) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; R8 = bot(fun__archive_entry_size) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007f87"
 Separations ""
 Assertions  ""
 Pre   "RDX = 100 ; RDI = (RSP_0 -64 168) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; R8 = bot(fun__archive_entry_size) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007f87: ExternalCall fun____strcpy_chk 5"
 Post  "RAX = bot(fun____strcpy_chk) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 FunctionConstraints "PRESERVES fun____strcpy_chk {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000a9b0,16];[0x10000c008,8];[0x1000105a6,1];[0x1000105a7,1];[0x1000105a8,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 176),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100007d57, blockId == 22 ##
######################################
*)

htriple "ht_100007f8c"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007f8c: LEA RDI, [RBP - 160] 7"
 Post  "RDI = (RSP_0 -64 168) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007f93"
 Separations ""
 Assertions  ""
 Pre   "RDI = (RSP_0 -64 168) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007f93: ExternalCall fun__strlen 5"
 Post  "RAX = bot(fun__strlen) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 FunctionConstraints "PRESERVES fun__strlen {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000a9b0,16];[0x10000c008,8];[0x1000105a6,1];[0x1000105a7,1];[0x1000105a8,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 176),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007f98"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strlen) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007f98: ADD RAX, R12 3"
 Post  "RAX = (bot(fun__strlen) +64 bot(fun__strlen)) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007f9b"
 Separations "((RDI_0 +64 160),8) SEP (RSP_0,8); ((RDI_0 +64 160),8) SEP ([0x10000c008,8]_0,8); ((RDI_0 +64 160),8) SEP (0x10000a9b0,16); ((RDI_0 +64 160),8) SEP (0x10000c008,8); ((RDI_0 +64 160),8) SEP (0x1000105a6,1); ((RDI_0 +64 160),8) SEP (0x1000105a7,1); ((RDI_0 +64 160),8) SEP (0x1000105a8,8); ((RDI_0 +64 160),8) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 160),8) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 160),8) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 160),8) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 160),8) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 160),8) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 160),8) SEP ((RSP_0 -64 56),8); ((RDI_0 +64 160),8) SEP ((RSP_0 -64 176),8); ((RDI_0 +64 160),16) SEP (RSP_0,8); ((RDI_0 +64 160),16) SEP ([0x10000c008,8]_0,8); ((RDI_0 +64 160),16) SEP (0x10000a9b0,16); ((RDI_0 +64 160),16) SEP (0x10000c008,8); ((RDI_0 +64 160),16) SEP (0x1000105a6,1); ((RDI_0 +64 160),16) SEP (0x1000105a7,1); ((RDI_0 +64 160),16) SEP (0x1000105a8,8); ((RDI_0 +64 160),16) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 160),16) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 160),16) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 160),16) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 160),16) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 160),16) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 160),16) SEP ((RSP_0 -64 56),8); ((RDI_0 +64 160),16) SEP ((RSP_0 -64 176),8)"
 Assertions  ""
 Pre   "RAX = (bot(fun__strlen) +64 bot(fun__strlen)) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007f9b: MOV RDX, QWORD PTR [R15 + 160] 7"
 Post  "RAX = (bot(fun__strlen) +64 bot(fun__strlen)) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007fa2"
 Separations ""
 Assertions  ""
 Pre   "RAX = (bot(fun__strlen) +64 bot(fun__strlen)) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007fa2: CMP RAX, RDX 3"
 Post  "RAX = (bot(fun__strlen) +64 bot(fun__strlen)) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007fa5"
 Separations ""
 Assertions  ""
 Pre   "RAX = (bot(fun__strlen) +64 bot(fun__strlen)) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007fa5: JB 4294999988 2"
 Post  "RAX = (bot(fun__strlen) +64 bot(fun__strlen)) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100007d57, blockId == 23 ##
######################################
*)

htriple "ht_100007fa7"
 Separations ""
 Assertions  ""
 Pre   "RAX = (bot(fun__strlen) +64 bot(fun__strlen)) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007fa7: INC RAX 3"
 Post  "RAX = (bot(fun__strlen) +64 (bot(fun__strlen) +64 1)) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007faa"
 Separations "((RDI_0 +64 160),8) SEP (RSP_0,8); ((RDI_0 +64 160),8) SEP ([0x10000c008,8]_0,8); ((RDI_0 +64 160),8) SEP (0x10000a9b0,16); ((RDI_0 +64 160),8) SEP (0x10000c008,8); ((RDI_0 +64 160),8) SEP (0x1000105a6,1); ((RDI_0 +64 160),8) SEP (0x1000105a7,1); ((RDI_0 +64 160),8) SEP (0x1000105a8,8); ((RDI_0 +64 160),8) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 160),8) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 160),8) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 160),8) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 160),8) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 160),8) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 160),8) SEP ((RSP_0 -64 56),8); ((RDI_0 +64 160),8) SEP ((RSP_0 -64 176),8); ((RDI_0 +64 160),16) SEP (RSP_0,8); ((RDI_0 +64 160),16) SEP ([0x10000c008,8]_0,8); ((RDI_0 +64 160),16) SEP (0x10000a9b0,16); ((RDI_0 +64 160),16) SEP (0x10000c008,8); ((RDI_0 +64 160),16) SEP (0x1000105a6,1); ((RDI_0 +64 160),16) SEP (0x1000105a7,1); ((RDI_0 +64 160),16) SEP (0x1000105a8,8); ((RDI_0 +64 160),16) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 160),16) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 160),16) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 160),16) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 160),16) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 160),16) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 160),16) SEP ((RSP_0 -64 56),8); ((RDI_0 +64 160),16) SEP ((RSP_0 -64 176),8)"
 Assertions  ""
 Pre   "RAX = (bot(fun__strlen) +64 (bot(fun__strlen) +64 1)) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007faa: MOV QWORD PTR [R15 + 160], RAX 7"
 Post  "RAX = (bot(fun__strlen) +64 (bot(fun__strlen) +64 1)) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007fb1"
 Separations ""
 Assertions  ""
 Pre   "RAX = (bot(fun__strlen) +64 (bot(fun__strlen) +64 1)) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007fb1: MOV RDX, RAX 3"
 Post  "RAX = (bot(fun__strlen) +64 (bot(fun__strlen) +64 1)) ; RDX = (bot(fun__strlen) +64 (bot(fun__strlen) +64 1)) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100007d57, blockId == 24 ##
######################################
*)

htriple "ht_100007fb4"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007fb4: SUB EDX, R12D 3"
 Post  "RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007fb7"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007fb7: LEA RSI, [RIP + 15089] 7"
 Post  "RSI = 0x10000baaf ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007fbe"
 Separations ""
 Assertions  ""
 Pre   "RSI = 0x10000baaf ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007fbe: LEA RCX, [RBP - 160] 7"
 Post  "RCX = (RSP_0 -64 168) ; RSI = 0x10000baaf ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007fc5"
 Separations ""
 Assertions  ""
 Pre   "RCX = (RSP_0 -64 168) ; RSI = 0x10000baaf ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007fc5: MOV RDI, R14 3"
 Post  "RCX = (RSP_0 -64 168) ; RDI = RSI_0 ; RSI = 0x10000baaf ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007fc8"
 Separations ""
 Assertions  ""
 Pre   "RCX = (RSP_0 -64 168) ; RDI = RSI_0 ; RSI = 0x10000baaf ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007fc8: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RCX = (RSP_0 -64 168) ; RDI = RSI_0 ; RSI = 0x10000baaf ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007fca"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RCX = (RSP_0 -64 168) ; RDI = RSI_0 ; RSI = 0x10000baaf ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007fca: ExternalCall fun__fprintf 5"
 Post  "RAX = bot(fun__fprintf) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 FunctionConstraints "PRESERVES fun__fprintf {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000a9b0,16];[0x10000c008,8];[0x1000105a6,1];[0x1000105a7,1];[0x1000105a8,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 176),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007fcf"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fprintf) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007fcf: MOV RDI, R13 3"
 Post  "RAX = bot(fun__fprintf) ; RDI = RDX_0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007fd2"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fprintf) ; RDI = RDX_0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007fd2: ExternalCall fun__archive_entry_mtime 5"
 Post  "RAX = bot(fun__archive_entry_mtime) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 FunctionConstraints "PRESERVES fun__archive_entry_mtime {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000a9b0,16];[0x10000c008,8];[0x1000105a6,1];[0x1000105a7,1];[0x1000105a8,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 176),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007fd7"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_mtime) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007fd7: LEA RDI, [RBP - 168] 7"
 Post  "RAX = bot(fun__archive_entry_mtime) ; RDI = (RSP_0 -64 176) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007fde"
 Separations "((RSP_0 -64 176),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 176),8) SEP (0x10000a9b0,16); ((RSP_0 -64 176),8) SEP (0x10000c008,8); ((RSP_0 -64 176),8) SEP (0x1000105a6,1); ((RSP_0 -64 176),8) SEP (0x1000105a7,1); ((RSP_0 -64 176),8) SEP (0x1000105a8,8); ((RSP_0 -64 176),8) SEP ((RDI_0 +64 160),8); ((RSP_0 -64 176),8) SEP ((RDI_0 +64 160),16); ((RSP_0 -64 176),8) SEP ((RDI_0 +64 168),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_mtime) ; RDI = (RSP_0 -64 176) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0"
 Instruction "100007fde: MOV QWORD PTR [RDI], RAX 3"
 Post  "RAX = bot(fun__archive_entry_mtime) ; RDI = (RSP_0 -64 176) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = bot(fun__archive_entry_mtime)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007fe1"
 Separations "(0x1000105a8,8) SEP (RSP_0,8); (0x1000105a8,8) SEP ([0x10000c008,8]_0,8); (0x1000105a8,8) SEP ((RDI_0 +64 160),8); (0x1000105a8,8) SEP ((RDI_0 +64 160),16); (0x1000105a8,8) SEP ((RDI_0 +64 168),8); (0x1000105a8,8) SEP ((RSP_0 -64 8),8); (0x1000105a8,8) SEP ((RSP_0 -64 16),8); (0x1000105a8,8) SEP ((RSP_0 -64 24),8); (0x1000105a8,8) SEP ((RSP_0 -64 32),8); (0x1000105a8,8) SEP ((RSP_0 -64 40),8); (0x1000105a8,8) SEP ((RSP_0 -64 48),8); (0x1000105a8,8) SEP ((RSP_0 -64 56),8); (0x1000105a8,8) SEP ((RSP_0 -64 176),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_mtime) ; RDI = (RSP_0 -64 176) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = bot(fun__archive_entry_mtime)"
 Instruction "100007fe1: MOV RCX, QWORD PTR [RIP + 34240] 7"
 Post  "RAX = bot(fun__archive_entry_mtime) ; RDI = (RSP_0 -64 176) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = bot(fun__archive_entry_mtime)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007fe8"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_mtime) ; RDI = (RSP_0 -64 176) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = bot(fun__archive_entry_mtime)"
 Instruction "100007fe8: LEA RDX, [RCX - 15768000] 7"
 Post  "RAX = bot(fun__archive_entry_mtime) ; RDI = (RSP_0 -64 176) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = bot(fun__archive_entry_mtime)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007fef"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_mtime) ; RDI = (RSP_0 -64 176) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = bot(fun__archive_entry_mtime)"
 Instruction "100007fef: ADD RCX, 15768000 7"
 Post  "RAX = bot(fun__archive_entry_mtime) ; RDI = (RSP_0 -64 176) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = bot(fun__archive_entry_mtime)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007ff6"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_mtime) ; RDI = (RSP_0 -64 176) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = bot(fun__archive_entry_mtime)"
 Instruction "100007ff6: CMP BYTE PTR [R15 + 104], 0 5"
 Post  "RAX = bot(fun__archive_entry_mtime) ; RDI = (RSP_0 -64 176) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = bot(fun__archive_entry_mtime)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007ffb"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_mtime) ; RDI = (RSP_0 -64 176) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = bot(fun__archive_entry_mtime)"
 Instruction "100007ffb: LEA RBX, [RIP + 15035] 7"
 Post  "RAX = bot(fun__archive_entry_mtime) ; RBX = 0x10000babd ; RDI = (RSP_0 -64 176) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = bot(fun__archive_entry_mtime)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008002"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_mtime) ; RBX = 0x10000babd ; RDI = (RSP_0 -64 176) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = bot(fun__archive_entry_mtime)"
 Instruction "100008002: LEA RSI, [RIP + 15018] 7"
 Post  "RAX = bot(fun__archive_entry_mtime) ; RBX = 0x10000babd ; RDI = (RSP_0 -64 176) ; RSI = 0x10000bab3 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = bot(fun__archive_entry_mtime)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008009"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_mtime) ; RBX = 0x10000babd ; RDI = (RSP_0 -64 176) ; RSI = 0x10000bab3 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = bot(fun__archive_entry_mtime)"
 Instruction "100008009: CMOVE RSI, RBX 4"
 Post  "RAX = bot(fun__archive_entry_mtime) ; RBX = 0x10000babd ; RDI = (RSP_0 -64 176) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = bot(fun__archive_entry_mtime)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000800d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_mtime) ; RBX = 0x10000babd ; RDI = (RSP_0 -64 176) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = bot(fun__archive_entry_mtime)"
 Instruction "10000800d: LEA R8, [RIP + 15039] 7"
 Post  "RAX = bot(fun__archive_entry_mtime) ; RBX = 0x10000babd ; RDI = (RSP_0 -64 176) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; R8 = 0x10000bad3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = bot(fun__archive_entry_mtime)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008014"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_mtime) ; RBX = 0x10000babd ; RDI = (RSP_0 -64 176) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; R8 = 0x10000bad3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = bot(fun__archive_entry_mtime)"
 Instruction "100008014: LEA RBX, [RIP + 15020] 7"
 Post  "RAX = bot(fun__archive_entry_mtime) ; RBX = 0x10000bac7 ; RDI = (RSP_0 -64 176) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; R8 = 0x10000bad3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = bot(fun__archive_entry_mtime)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000801b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_mtime) ; RBX = 0x10000bac7 ; RDI = (RSP_0 -64 176) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; R8 = 0x10000bad3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = bot(fun__archive_entry_mtime)"
 Instruction "10000801b: CMOVE RBX, R8 4"
 Post  "RAX = bot(fun__archive_entry_mtime) ; RDI = (RSP_0 -64 176) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; R8 = 0x10000bad3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = bot(fun__archive_entry_mtime)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000801f"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_mtime) ; RDI = (RSP_0 -64 176) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; R8 = 0x10000bad3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = bot(fun__archive_entry_mtime)"
 Instruction "10000801f: CMP RAX, RCX 3"
 Post  "RAX = bot(fun__archive_entry_mtime) ; RDI = (RSP_0 -64 176) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; R8 = 0x10000bad3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = bot(fun__archive_entry_mtime)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008022"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_mtime) ; RDI = (RSP_0 -64 176) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; R8 = 0x10000bad3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = bot(fun__archive_entry_mtime)"
 Instruction "100008022: CMOVG RBX, RSI 4"
 Post  "RAX = bot(fun__archive_entry_mtime) ; RDI = (RSP_0 -64 176) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; R8 = 0x10000bad3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = bot(fun__archive_entry_mtime)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008026"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_mtime) ; RDI = (RSP_0 -64 176) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; R8 = 0x10000bad3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = bot(fun__archive_entry_mtime)"
 Instruction "100008026: CMP RAX, RDX 3"
 Post  "RAX = bot(fun__archive_entry_mtime) ; RDI = (RSP_0 -64 176) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; R8 = 0x10000bad3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = bot(fun__archive_entry_mtime)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008029"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_mtime) ; RDI = (RSP_0 -64 176) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; R8 = 0x10000bad3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = bot(fun__archive_entry_mtime)"
 Instruction "100008029: CMOVL RBX, RSI 4"
 Post  "RAX = bot(fun__archive_entry_mtime) ; RDI = (RSP_0 -64 176) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; R8 = 0x10000bad3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = bot(fun__archive_entry_mtime)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000802d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_mtime) ; RDI = (RSP_0 -64 176) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; R8 = 0x10000bad3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = bot(fun__archive_entry_mtime)"
 Instruction "10000802d: ExternalCall fun__localtime 5"
 Post  "RAX = bot(fun__localtime) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = bot(fun__archive_entry_mtime)"
 FunctionConstraints "PRESERVES fun__localtime {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000a9b0,16];[0x10000c008,8];[0x1000105a6,1];[0x1000105a7,1];[0x1000105a8,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 176),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008032"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__localtime) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = bot(fun__archive_entry_mtime)"
 Instruction "100008032: TEST RAX, RAX 3"
 Post  "RAX = bot(fun__localtime) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = bot(fun__archive_entry_mtime)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008035"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__localtime) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = bot(fun__archive_entry_mtime)"
 Instruction "100008035: JNE 4295000138 2"
 Post  "RAX = bot(fun__localtime) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = bot(fun__archive_entry_mtime)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100007d57, blockId == 25 ##
######################################
*)

htriple "ht_100008037"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__localtime) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = bot(fun__archive_entry_mtime)"
 Instruction "100008037: LEA RDI, [RBP - 168] 7"
 Post  "RAX = bot(fun__localtime) ; RDI = (RSP_0 -64 176) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = bot(fun__archive_entry_mtime)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000803e"
 Separations "((RSP_0 -64 176),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 176),8) SEP (0x10000a9b0,16); ((RSP_0 -64 176),8) SEP (0x10000c008,8); ((RSP_0 -64 176),8) SEP (0x1000105a6,1); ((RSP_0 -64 176),8) SEP (0x1000105a7,1); ((RSP_0 -64 176),8) SEP (0x1000105a8,8); ((RSP_0 -64 176),8) SEP ((RDI_0 +64 160),8); ((RSP_0 -64 176),8) SEP ((RDI_0 +64 160),16); ((RSP_0 -64 176),8) SEP ((RDI_0 +64 168),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__localtime) ; RDI = (RSP_0 -64 176) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = bot(fun__archive_entry_mtime)"
 Instruction "10000803e: MOV QWORD PTR [RDI], 0 7"
 Post  "RAX = bot(fun__localtime) ; RDI = (RSP_0 -64 176) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008045"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__localtime) ; RDI = (RSP_0 -64 176) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = 0"
 Instruction "100008045: ExternalCall fun__localtime 5"
 Post  "RAX = bot(fun__localtime) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = 0"
 FunctionConstraints "PRESERVES fun__localtime {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000a9b0,16];[0x10000c008,8];[0x1000105a6,1];[0x1000105a7,1];[0x1000105a8,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 176),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100007d57, blockId == 26 ##
######################################
*)

htriple "ht_10000804a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__localtime) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
 Instruction "10000804a: LEA R15, [RBP - 160] 7"
 Post  "RAX = bot(fun__localtime) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008051"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__localtime) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
 Instruction "100008051: MOV ESI, 100 5"
 Post  "RAX = bot(fun__localtime) ; RSI = 100 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008056"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__localtime) ; RSI = 100 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
 Instruction "100008056: MOV RDI, R15 3"
 Post  "RAX = bot(fun__localtime) ; RDI = (RSP_0 -64 168) ; RSI = 100 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008059"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__localtime) ; RDI = (RSP_0 -64 168) ; RSI = 100 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
 Instruction "100008059: MOV RDX, RBX 3"
 Post  "RAX = bot(fun__localtime) ; RDI = (RSP_0 -64 168) ; RSI = 100 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000805c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__localtime) ; RDI = (RSP_0 -64 168) ; RSI = 100 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
 Instruction "10000805c: MOV RCX, RAX 3"
 Post  "RAX = bot(fun__localtime) ; RCX = bot(fun__localtime) ; RDI = (RSP_0 -64 168) ; RSI = 100 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000805f"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__localtime) ; RCX = bot(fun__localtime) ; RDI = (RSP_0 -64 168) ; RSI = 100 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
 Instruction "10000805f: ExternalCall fun__strftime 5"
 Post  "RAX = bot(fun__strftime) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
 FunctionConstraints "PRESERVES fun__strftime {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000a9b0,16];[0x10000c008,8];[0x1000105a6,1];[0x1000105a7,1];[0x1000105a8,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 176),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008064"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strftime) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
 Instruction "100008064: LEA RSI, [RIP + 14964] 7"
 Post  "RAX = bot(fun__strftime) ; RSI = 0x10000badf ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000806b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strftime) ; RSI = 0x10000badf ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
 Instruction "10000806b: MOV RDI, R14 3"
 Post  "RAX = bot(fun__strftime) ; RDI = RSI_0 ; RSI = 0x10000badf ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000806e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strftime) ; RDI = RSI_0 ; RSI = 0x10000badf ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
 Instruction "10000806e: MOV RDX, R15 3"
 Post  "RAX = bot(fun__strftime) ; RDX = (RSP_0 -64 168) ; RDI = RSI_0 ; RSI = 0x10000badf ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008071"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strftime) ; RDX = (RSP_0 -64 168) ; RDI = RSI_0 ; RSI = 0x10000badf ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
 Instruction "100008071: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RDX = (RSP_0 -64 168) ; RDI = RSI_0 ; RSI = 0x10000badf ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008073"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RDX = (RSP_0 -64 168) ; RDI = RSI_0 ; RSI = 0x10000badf ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
 Instruction "100008073: ExternalCall fun__fprintf 5"
 Post  "RAX = bot(fun__fprintf) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
 FunctionConstraints "PRESERVES fun__fprintf {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000a9b0,16];[0x10000c008,8];[0x1000105a6,1];[0x1000105a7,1];[0x1000105a8,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 176),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008078"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fprintf) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
 Instruction "100008078: MOV RDI, R13 3"
 Post  "RAX = bot(fun__fprintf) ; RDI = RDX_0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000807b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fprintf) ; RDI = RDX_0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
 Instruction "10000807b: ExternalCall fun__archive_entry_pathname 5"
 Post  "RAX = bot(fun__archive_entry_pathname) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
 FunctionConstraints "PRESERVES fun__archive_entry_pathname {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000a9b0,16];[0x10000c008,8];[0x1000105a6,1];[0x1000105a7,1];[0x1000105a8,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 176),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008080"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_pathname) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
 Instruction "100008080: LEA RSI, [RIP + 14314] 7"
 Post  "RAX = bot(fun__archive_entry_pathname) ; RSI = 0x10000b871 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008087"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_pathname) ; RSI = 0x10000b871 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
 Instruction "100008087: MOV RDI, R14 3"
 Post  "RAX = bot(fun__archive_entry_pathname) ; RDI = RSI_0 ; RSI = 0x10000b871 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000808a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_pathname) ; RDI = RSI_0 ; RSI = 0x10000b871 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
 Instruction "10000808a: MOV RDX, RAX 3"
 Post  "RAX = bot(fun__archive_entry_pathname) ; RDX = bot(fun__archive_entry_pathname) ; RDI = RSI_0 ; RSI = 0x10000b871 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000808d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_pathname) ; RDX = bot(fun__archive_entry_pathname) ; RDI = RSI_0 ; RSI = 0x10000b871 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
 Instruction "10000808d: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RDX = bot(fun__archive_entry_pathname) ; RDI = RSI_0 ; RSI = 0x10000b871 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000808f"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RDX = bot(fun__archive_entry_pathname) ; RDI = RSI_0 ; RSI = 0x10000b871 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
 Instruction "10000808f: ExternalCall fun_0x1000071a0 5"
 Post  "RAX = bot(fun_0x1000071a0) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
 FunctionConstraints "PRESERVES fun_0x1000071a0 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000a9b0,16];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 176),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008094"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000071a0) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
 Instruction "100008094: MOV RDI, R13 3"
 Post  "RAX = bot(fun_0x1000071a0) ; RDI = RDX_0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008097"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000071a0) ; RDI = RDX_0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
 Instruction "100008097: ExternalCall fun__archive_entry_hardlink 5"
 Post  "RAX = bot(fun__archive_entry_hardlink) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
 FunctionConstraints "PRESERVES fun__archive_entry_hardlink {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000a9b0,16];[0x10000c008,8];[0x1000105a6,1];[0x1000105a7,1];[0x1000105a8,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 176),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000809c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_hardlink) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
 Instruction "10000809c: TEST RAX, RAX 3"
 Post  "RAX = bot(fun__archive_entry_hardlink) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000809f"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_hardlink) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
 Instruction "10000809f: JE 4295000242 2"
 Post  "RAX = bot(fun__archive_entry_hardlink) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100007d57, blockId == 27 ##
######################################
*)

htriple "ht_1000080a1"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_hardlink) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
 Instruction "1000080a1: MOV RDI, R13 3"
 Post  "RAX = bot(fun__archive_entry_hardlink) ; RDI = RDX_0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000080a4"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_hardlink) ; RDI = RDX_0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
 Instruction "1000080a4: ExternalCall fun__archive_entry_hardlink 5"
 Post  "RAX = bot(fun__archive_entry_hardlink) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
 FunctionConstraints "PRESERVES fun__archive_entry_hardlink {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000a9b0,16];[0x10000c008,8];[0x1000105a6,1];[0x1000105a7,1];[0x1000105a8,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 176),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000080a9"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_hardlink) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
 Instruction "1000080a9: LEA RSI, [RIP + 14900] 7"
 Post  "RAX = bot(fun__archive_entry_hardlink) ; RSI = 0x10000bae4 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000080b0"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_hardlink) ; RSI = 0x10000bae4 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
 Instruction "1000080b0: JMP 4295000270 2"
 Post  "RAX = bot(fun__archive_entry_hardlink) ; RSI = 0x10000bae4 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100007d57, blockId == 28 ##
######################################
*)

htriple "ht_1000080b2"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_hardlink) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
 Instruction "1000080b2: MOV RDI, R13 3"
 Post  "RAX = bot(fun__archive_entry_hardlink) ; RDI = RDX_0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000080b5"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_hardlink) ; RDI = RDX_0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
 Instruction "1000080b5: ExternalCall fun__archive_entry_symlink 5"
 Post  "RAX = bot(fun__archive_entry_symlink) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
 FunctionConstraints "PRESERVES fun__archive_entry_symlink {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000a9b0,16];[0x10000c008,8];[0x1000105a6,1];[0x1000105a7,1];[0x1000105a8,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 176),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000080ba"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_symlink) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
 Instruction "1000080ba: TEST RAX, RAX 3"
 Post  "RAX = bot(fun__archive_entry_symlink) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000080bd"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_symlink) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
 Instruction "1000080bd: JE 4295000283 2"
 Post  "RAX = bot(fun__archive_entry_symlink) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100007d57, blockId == 29 ##
######################################
*)

htriple "ht_1000080bf"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_symlink) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
 Instruction "1000080bf: MOV RDI, R13 3"
 Post  "RAX = bot(fun__archive_entry_symlink) ; RDI = RDX_0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000080c2"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_symlink) ; RDI = RDX_0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
 Instruction "1000080c2: ExternalCall fun__archive_entry_symlink 5"
 Post  "RAX = bot(fun__archive_entry_symlink) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
 FunctionConstraints "PRESERVES fun__archive_entry_symlink {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000a9b0,16];[0x10000c008,8];[0x1000105a6,1];[0x1000105a7,1];[0x1000105a8,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 176),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000080c7"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_symlink) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
 Instruction "1000080c7: LEA RSI, [RIP + 14882] 7"
 Post  "RAX = bot(fun__archive_entry_symlink) ; RSI = 0x10000baf0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100007d57, blockId == 30 ##
######################################
*)

htriple "ht_1000080db"
 Separations "(0x10000c008,8) SEP (RSP_0,8); (0x10000c008,8) SEP ([0x10000c008,8]_0,8); (0x10000c008,8) SEP ((RDI_0 +64 160),8); (0x10000c008,8) SEP ((RDI_0 +64 160),16); (0x10000c008,8) SEP ((RDI_0 +64 168),8); (0x10000c008,8) SEP ((RSP_0 -64 8),8); (0x10000c008,8) SEP ((RSP_0 -64 16),8); (0x10000c008,8) SEP ((RSP_0 -64 24),8); (0x10000c008,8) SEP ((RSP_0 -64 32),8); (0x10000c008,8) SEP ((RSP_0 -64 40),8); (0x10000c008,8) SEP ((RSP_0 -64 48),8); (0x10000c008,8) SEP ((RSP_0 -64 56),8); (0x10000c008,8) SEP ((RSP_0 -64 176),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
 Instruction "1000080db: MOV RAX, QWORD PTR [RIP + 16166] 7"
 Post  "RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000080e2"
 Separations ""
 Assertions  "(RAX,8) SEP (RSP_0,8); (RAX,8) SEP ((RSP_0 -64 8),8); (RAX,8) SEP ((RSP_0 -64 16),8); (RAX,8) SEP ((RSP_0 -64 24),8); (RAX,8) SEP ((RSP_0 -64 32),8); (RAX,8) SEP ((RSP_0 -64 40),8); (RAX,8) SEP ((RSP_0 -64 48),8); (RAX,8) SEP ((RSP_0 -64 56),8); (RAX,8) SEP ((RSP_0 -64 176),8)"
 Pre   "RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
 Instruction "1000080e2: MOV RAX, QWORD PTR [RAX] 3"
 Post  "RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000080e5"
 Separations "((RSP_0 -64 56),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 56),8) SEP (0x10000a9b0,16); ((RSP_0 -64 56),8) SEP (0x10000c008,8); ((RSP_0 -64 56),8) SEP (0x1000105a6,1); ((RSP_0 -64 56),8) SEP (0x1000105a7,1); ((RSP_0 -64 56),8) SEP (0x1000105a8,8); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 160),8); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 160),16); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 168),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
 Instruction "1000080e5: CMP RAX, QWORD PTR [RBP - 48] 4"
 Post  "RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000080e9"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
 Instruction "1000080e9: JNE 4295000317 2"
 Post  "RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100007d57, blockId == 31 ##
######################################
*)

htriple "ht_1000080ce"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
 Instruction "1000080ce: MOV RDI, R14 3"
 Post  "RDI = RSI_0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000080d1"
 Separations ""
 Assertions  ""
 Pre   "RDI = RSI_0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
 Instruction "1000080d1: MOV RDX, RAX 3"
 Post  "RDI = RSI_0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000080d4"
 Separations ""
 Assertions  ""
 Pre   "RDI = RSI_0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
 Instruction "1000080d4: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RDI = RSI_0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000080d6"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RDI = RSI_0 ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
 Instruction "1000080d6: ExternalCall fun_0x1000071a0 5"
 Post  "RAX = bot(fun_0x1000071a0) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
 FunctionConstraints "PRESERVES fun_0x1000071a0 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000a9b0,16];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 176),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100007d57, blockId == 32 ##
######################################
*)

htriple "ht_1000080eb"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
 Instruction "1000080eb: ADD RSP, 136 7"
 Post  "RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000080f2"
 Separations "((RSP_0 -64 40),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 40),8) SEP (0x10000a9b0,16); ((RSP_0 -64 40),8) SEP (0x10000c008,8); ((RSP_0 -64 40),8) SEP (0x1000105a6,1); ((RSP_0 -64 40),8) SEP (0x1000105a7,1); ((RSP_0 -64 40),8) SEP (0x1000105a8,8); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 160),8); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 160),16); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 168),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
 Instruction "1000080f2: POP RBX 1"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000080f3"
 Separations "((RSP_0 -64 32),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 32),8) SEP (0x10000a9b0,16); ((RSP_0 -64 32),8) SEP (0x10000c008,8); ((RSP_0 -64 32),8) SEP (0x1000105a6,1); ((RSP_0 -64 32),8) SEP (0x1000105a7,1); ((RSP_0 -64 32),8) SEP (0x1000105a8,8); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 160),8); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 160),16); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 168),8)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
 Instruction "1000080f3: POP R12 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000080f5"
 Separations "((RSP_0 -64 24),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 24),8) SEP (0x10000a9b0,16); ((RSP_0 -64 24),8) SEP (0x10000c008,8); ((RSP_0 -64 24),8) SEP (0x1000105a6,1); ((RSP_0 -64 24),8) SEP (0x1000105a7,1); ((RSP_0 -64 24),8) SEP (0x1000105a8,8); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 160),8); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 160),16); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 168),8)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
 Instruction "1000080f5: POP R13 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000080f7"
 Separations "((RSP_0 -64 16),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 16),8) SEP (0x10000a9b0,16); ((RSP_0 -64 16),8) SEP (0x10000c008,8); ((RSP_0 -64 16),8) SEP (0x1000105a6,1); ((RSP_0 -64 16),8) SEP (0x1000105a7,1); ((RSP_0 -64 16),8) SEP (0x1000105a8,8); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 160),8); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 160),16); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 168),8)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
 Instruction "1000080f7: POP R14 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000080f9"
 Separations "((RSP_0 -64 8),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 8),8) SEP (0x10000a9b0,16); ((RSP_0 -64 8),8) SEP (0x10000c008,8); ((RSP_0 -64 8),8) SEP (0x1000105a6,1); ((RSP_0 -64 8),8) SEP (0x1000105a7,1); ((RSP_0 -64 8),8) SEP (0x1000105a8,8); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 160),8); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 160),16); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 168),8)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
 Instruction "1000080f9: POP R15 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000080fb"
 Separations ""
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
 Instruction "1000080fb: POP RBP 1"
 Post  "RBX = RBX_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000080fc"
 Separations ""
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
 Instruction "1000080fc: RET  1"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 +64 8) ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100007d57, blockId == 33 ##
######################################
*)

htriple "ht_1000080fd"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
 Instruction "1000080fd: ExternalCall fun____stack_chk_fail 5"
 Post  "RAX = bot(fun____stack_chk_fail) ; RSP = (RSP_0 -64 184) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 168) ; R14 = RSI_0 ; R13 = RDX_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0"
 FunctionConstraints "PRESERVES fun____stack_chk_fail {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000a9b0,16];[0x10000c008,8];[0x1000105a6,1];[0x1000105a7,1];[0x1000105a8,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 176),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




end
end
