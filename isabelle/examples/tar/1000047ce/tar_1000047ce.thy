theory tar_1000047ce
imports "../../../isabelle/X86_Semantics/X86_Parse_Hoare_Triples"


begin


context semantics
begin

(*
#####################################
## Entry = 1000047ce, blockId == 0 ##
#####################################
*)

htriple "ht_1000047ce"
 Separations "((RSP_0 -64 8),8) SEP (bot(fun____error),4); ((RSP_0 -64 8),8) SEP (RSI_0,8); ((RSP_0 -64 8),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 8),8) SEP (0x10000c008,8); ((RSP_0 -64 8),8) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 8),8) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = [(RSP_0 -64 8),8]_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = [(RSP_0 -64 232),4]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = [(RSP_0 -64 304),4]_0 ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = [(RSP_0 -64 316),4]_0 ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = [(RSP_0 -64 332),4]_0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "1000047ce: PUSH RBP 1"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = [(RSP_0 -64 232),4]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = [(RSP_0 -64 304),4]_0 ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = [(RSP_0 -64 316),4]_0 ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = [(RSP_0 -64 332),4]_0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000047cf"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = [(RSP_0 -64 232),4]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = [(RSP_0 -64 304),4]_0 ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = [(RSP_0 -64 316),4]_0 ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = [(RSP_0 -64 332),4]_0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "1000047cf: MOV RBP, RSP 3"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = [(RSP_0 -64 232),4]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = [(RSP_0 -64 304),4]_0 ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = [(RSP_0 -64 316),4]_0 ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = [(RSP_0 -64 332),4]_0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000047d2"
 Separations "((RSP_0 -64 16),8) SEP (bot(fun____error),4); ((RSP_0 -64 16),8) SEP (RSI_0,8); ((RSP_0 -64 16),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 16),8) SEP (0x10000c008,8); ((RSP_0 -64 16),8) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 16),8) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = [(RSP_0 -64 232),4]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = [(RSP_0 -64 304),4]_0 ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = [(RSP_0 -64 316),4]_0 ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = [(RSP_0 -64 332),4]_0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "1000047d2: PUSH R15 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = [(RSP_0 -64 232),4]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = [(RSP_0 -64 304),4]_0 ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = [(RSP_0 -64 316),4]_0 ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = [(RSP_0 -64 332),4]_0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000047d4"
 Separations "((RSP_0 -64 24),8) SEP (bot(fun____error),4); ((RSP_0 -64 24),8) SEP (RSI_0,8); ((RSP_0 -64 24),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 24),8) SEP (0x10000c008,8); ((RSP_0 -64 24),8) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 24),8) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = [(RSP_0 -64 232),4]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = [(RSP_0 -64 304),4]_0 ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = [(RSP_0 -64 316),4]_0 ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = [(RSP_0 -64 332),4]_0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "1000047d4: PUSH R14 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = [(RSP_0 -64 232),4]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = [(RSP_0 -64 304),4]_0 ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = [(RSP_0 -64 316),4]_0 ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = [(RSP_0 -64 332),4]_0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000047d6"
 Separations "((RSP_0 -64 32),8) SEP (bot(fun____error),4); ((RSP_0 -64 32),8) SEP (RSI_0,8); ((RSP_0 -64 32),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 32),8) SEP (0x10000c008,8); ((RSP_0 -64 32),8) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 32),8) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = [(RSP_0 -64 232),4]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = [(RSP_0 -64 304),4]_0 ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = [(RSP_0 -64 316),4]_0 ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = [(RSP_0 -64 332),4]_0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "1000047d6: PUSH R13 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = [(RSP_0 -64 232),4]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = [(RSP_0 -64 304),4]_0 ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = [(RSP_0 -64 316),4]_0 ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = [(RSP_0 -64 332),4]_0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000047d8"
 Separations "((RSP_0 -64 40),8) SEP (bot(fun____error),4); ((RSP_0 -64 40),8) SEP (RSI_0,8); ((RSP_0 -64 40),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 40),8) SEP (0x10000c008,8); ((RSP_0 -64 40),8) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 40),8) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = [(RSP_0 -64 232),4]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = [(RSP_0 -64 304),4]_0 ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = [(RSP_0 -64 316),4]_0 ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = [(RSP_0 -64 332),4]_0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "1000047d8: PUSH R12 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = [(RSP_0 -64 232),4]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = [(RSP_0 -64 304),4]_0 ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = [(RSP_0 -64 316),4]_0 ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = [(RSP_0 -64 332),4]_0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000047da"
 Separations "((RSP_0 -64 48),8) SEP (bot(fun____error),4); ((RSP_0 -64 48),8) SEP (RSI_0,8); ((RSP_0 -64 48),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 48),8) SEP (0x10000c008,8); ((RSP_0 -64 48),8) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 48),8) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = [(RSP_0 -64 232),4]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = [(RSP_0 -64 304),4]_0 ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = [(RSP_0 -64 316),4]_0 ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = [(RSP_0 -64 332),4]_0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "1000047da: PUSH RBX 1"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = [(RSP_0 -64 232),4]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = [(RSP_0 -64 304),4]_0 ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = [(RSP_0 -64 316),4]_0 ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = [(RSP_0 -64 332),4]_0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000047db"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = [(RSP_0 -64 232),4]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = [(RSP_0 -64 304),4]_0 ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = [(RSP_0 -64 316),4]_0 ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = [(RSP_0 -64 332),4]_0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "1000047db: SUB RSP, 344 7"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = [(RSP_0 -64 232),4]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = [(RSP_0 -64 304),4]_0 ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = [(RSP_0 -64 316),4]_0 ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = [(RSP_0 -64 332),4]_0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000047e2"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = [(RSP_0 -64 232),4]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = [(RSP_0 -64 304),4]_0 ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = [(RSP_0 -64 316),4]_0 ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = [(RSP_0 -64 332),4]_0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "1000047e2: MOV R15, RSI 3"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = [(RSP_0 -64 232),4]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = [(RSP_0 -64 304),4]_0 ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = [(RSP_0 -64 316),4]_0 ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = [(RSP_0 -64 332),4]_0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000047e5"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = [(RSP_0 -64 232),4]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = [(RSP_0 -64 304),4]_0 ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = [(RSP_0 -64 316),4]_0 ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = [(RSP_0 -64 332),4]_0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "1000047e5: MOV R14D, EDI 3"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = [(RSP_0 -64 232),4]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = [(RSP_0 -64 304),4]_0 ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = [(RSP_0 -64 316),4]_0 ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = [(RSP_0 -64 332),4]_0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000047e8"
 Separations "(0x10000c008,8) SEP (bot(fun____error),4); (0x10000c008,8) SEP (RSI_0,8); (0x10000c008,8) SEP (RSP_0,8); (0x10000c008,8) SEP ([0x10000c008,8]_0,8); (0x10000c008,8) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); (0x10000c008,8) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4); (0x10000c008,8) SEP ((RSP_0 -64 8),8); (0x10000c008,8) SEP ((RSP_0 -64 16),8); (0x10000c008,8) SEP ((RSP_0 -64 24),8); (0x10000c008,8) SEP ((RSP_0 -64 32),8); (0x10000c008,8) SEP ((RSP_0 -64 40),8); (0x10000c008,8) SEP ((RSP_0 -64 48),8); (0x10000c008,8) SEP ((RSP_0 -64 56),8); (0x10000c008,8) SEP ((RSP_0 -64 64),8); (0x10000c008,8) SEP ((RSP_0 -64 72),8); (0x10000c008,8) SEP ((RSP_0 -64 120),8); (0x10000c008,8) SEP ((RSP_0 -64 192),4); (0x10000c008,8) SEP ((RSP_0 -64 224),8); (0x10000c008,8) SEP ((RSP_0 -64 228),4); (0x10000c008,8) SEP ((RSP_0 -64 232),4); (0x10000c008,8) SEP ((RSP_0 -64 256),8); (0x10000c008,8) SEP ((RSP_0 -64 264),1); (0x10000c008,8) SEP ((RSP_0 -64 272),8); (0x10000c008,8) SEP ((RSP_0 -64 279),1); (0x10000c008,8) SEP ((RSP_0 -64 280),1); (0x10000c008,8) SEP ((RSP_0 -64 288),8); (0x10000c008,8) SEP ((RSP_0 -64 296),8); (0x10000c008,8) SEP ((RSP_0 -64 304),4); (0x10000c008,8) SEP ((RSP_0 -64 312),8); (0x10000c008,8) SEP ((RSP_0 -64 316),4); (0x10000c008,8) SEP ((RSP_0 -64 320),4); (0x10000c008,8) SEP ((RSP_0 -64 324),4); (0x10000c008,8) SEP ((RSP_0 -64 328),4); (0x10000c008,8) SEP ((RSP_0 -64 332),4); (0x10000c008,8) SEP ((RSP_0 -64 336),4); (0x10000c008,8) SEP ((RSP_0 -64 344),8); (0x10000c008,8) SEP ((RSP_0 -64 352),8); (0x10000c008,8) SEP ((RSP_0 -64 368),8); (0x10000c008,8) SEP ((RSP_0 -64 376),8); (0x10000c008,8) SEP ((RSP_0 -64 384),8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = [(RSP_0 -64 232),4]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = [(RSP_0 -64 304),4]_0 ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = [(RSP_0 -64 316),4]_0 ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = [(RSP_0 -64 332),4]_0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "1000047e8: MOV RAX, QWORD PTR [RIP + 30745] 7"
 Post  "RAX = [0x10000c008,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = [(RSP_0 -64 232),4]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = [(RSP_0 -64 304),4]_0 ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = [(RSP_0 -64 316),4]_0 ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = [(RSP_0 -64 332),4]_0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000047ef"
 Separations "([0x10000c008,8]_0,8) SEP (bot(fun____error),4); ([0x10000c008,8]_0,8) SEP (RSI_0,8); ([0x10000c008,8]_0,8) SEP (RSP_0,8); ([0x10000c008,8]_0,8) SEP (0x10000c008,8); ([0x10000c008,8]_0,8) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ([0x10000c008,8]_0,8) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 8),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 16),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 24),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 32),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 40),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 48),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 56),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 64),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 70),1); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 71),1); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 72),2); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 72),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 80),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 120),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 188),4); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 192),4); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 216),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 224),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 228),4); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 232),4); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 256),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 264),1); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 272),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 279),1); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 280),1); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 288),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 296),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 304),4); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 312),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 316),4); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 320),4); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 324),1); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 324),4); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 326),1); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 327),1); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 328),1); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 328),4); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 330),1); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 331),1); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 332),1); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 332),4); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 336),4); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 340),4); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 344),4); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 344),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 352),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 368),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 376),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 384),8)"
 Assertions  ""
 Pre   "RAX = [0x10000c008,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = [(RSP_0 -64 232),4]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = [(RSP_0 -64 304),4]_0 ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = [(RSP_0 -64 316),4]_0 ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = [(RSP_0 -64 332),4]_0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "1000047ef: MOV RAX, QWORD PTR [RAX] 3"
 Post  "RAX = [[0x10000c008,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = [(RSP_0 -64 232),4]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = [(RSP_0 -64 304),4]_0 ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = [(RSP_0 -64 316),4]_0 ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = [(RSP_0 -64 332),4]_0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000047f2"
 Separations "((RSP_0 -64 56),8) SEP (bot(fun____error),4); ((RSP_0 -64 56),8) SEP (RSI_0,8); ((RSP_0 -64 56),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 56),8) SEP (0x10000c008,8); ((RSP_0 -64 56),8) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 56),8) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = [[0x10000c008,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = [(RSP_0 -64 232),4]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = [(RSP_0 -64 304),4]_0 ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = [(RSP_0 -64 316),4]_0 ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = [(RSP_0 -64 332),4]_0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "1000047f2: MOV QWORD PTR [RBP - 48], RAX 4"
 Post  "RAX = [[0x10000c008,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = [(RSP_0 -64 232),4]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = [(RSP_0 -64 304),4]_0 ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = [(RSP_0 -64 316),4]_0 ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = [(RSP_0 -64 332),4]_0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000047f6"
 Separations ""
 Assertions  ""
 Pre   "RAX = [[0x10000c008,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = [(RSP_0 -64 232),4]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = [(RSP_0 -64 304),4]_0 ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = [(RSP_0 -64 316),4]_0 ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = [(RSP_0 -64 332),4]_0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "1000047f6: LEA RBX, [RBP - 360] 7"
 Post  "RAX = [[0x10000c008,8]_0,8]_0 ; RBX = (RSP_0 -64 368) ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = [(RSP_0 -64 232),4]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = [(RSP_0 -64 304),4]_0 ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = [(RSP_0 -64 316),4]_0 ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = [(RSP_0 -64 332),4]_0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000047fd"
 Separations ""
 Assertions  ""
 Pre   "RAX = [[0x10000c008,8]_0,8]_0 ; RBX = (RSP_0 -64 368) ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = [(RSP_0 -64 232),4]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = [(RSP_0 -64 304),4]_0 ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = [(RSP_0 -64 316),4]_0 ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = [(RSP_0 -64 332),4]_0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "1000047fd: MOV ESI, 296 5"
 Post  "RAX = [[0x10000c008,8]_0,8]_0 ; RBX = (RSP_0 -64 368) ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = 296 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = [(RSP_0 -64 232),4]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = [(RSP_0 -64 304),4]_0 ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = [(RSP_0 -64 316),4]_0 ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = [(RSP_0 -64 332),4]_0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004802"
 Separations ""
 Assertions  ""
 Pre   "RAX = [[0x10000c008,8]_0,8]_0 ; RBX = (RSP_0 -64 368) ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = 296 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = [(RSP_0 -64 232),4]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = [(RSP_0 -64 304),4]_0 ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = [(RSP_0 -64 316),4]_0 ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = [(RSP_0 -64 332),4]_0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "100004802: MOV RDI, RBX 3"
 Post  "RAX = [[0x10000c008,8]_0,8]_0 ; RBX = (RSP_0 -64 368) ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = (RSP_0 -64 368) ; RSI = 296 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = [(RSP_0 -64 232),4]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = [(RSP_0 -64 304),4]_0 ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = [(RSP_0 -64 316),4]_0 ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = [(RSP_0 -64 332),4]_0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004805"
 Separations ""
 Assertions  ""
 Pre   "RAX = [[0x10000c008,8]_0,8]_0 ; RBX = (RSP_0 -64 368) ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = (RSP_0 -64 368) ; RSI = 296 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = [(RSP_0 -64 232),4]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = [(RSP_0 -64 304),4]_0 ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = [(RSP_0 -64 316),4]_0 ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = [(RSP_0 -64 332),4]_0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "100004805: ExternalCall fun____bzero 5"
 Post  "RAX = bot(fun____bzero) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = [(RSP_0 -64 232),4]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = [(RSP_0 -64 304),4]_0 ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = [(RSP_0 -64 316),4]_0 ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = [(RSP_0 -64 332),4]_0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 FunctionConstraints "PRESERVES fun____bzero {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 120),8];[(RSP_0 -64 192),4];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 256),8];[(RSP_0 -64 264),1];[(RSP_0 -64 272),8];[(RSP_0 -64 279),1];[(RSP_0 -64 280),1];[(RSP_0 -64 288),8];[(RSP_0 -64 296),8];[(RSP_0 -64 304),4];[(RSP_0 -64 312),8];[(RSP_0 -64 316),4];[(RSP_0 -64 320),4];[(RSP_0 -64 324),4];[(RSP_0 -64 328),4];[(RSP_0 -64 332),4];[(RSP_0 -64 336),4];[(RSP_0 -64 344),8];[(RSP_0 -64 352),8];[(RSP_0 -64 368),8];[(RSP_0 -64 376),8];[(RSP_0 -64 384),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000480a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun____bzero) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = [(RSP_0 -64 232),4]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = [(RSP_0 -64 304),4]_0 ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = [(RSP_0 -64 316),4]_0 ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = [(RSP_0 -64 332),4]_0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "10000480a: MOV EAX, 4294967295 5"
 Post  "RAX = 0xffffffff ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = [(RSP_0 -64 232),4]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = [(RSP_0 -64 304),4]_0 ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = [(RSP_0 -64 316),4]_0 ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = [(RSP_0 -64 332),4]_0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000480f"
 Separations "((RSP_0 -64 232),4) SEP (bot(fun____error),4); ((RSP_0 -64 232),4) SEP (RSI_0,8); ((RSP_0 -64 232),4) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 232),4) SEP (0x10000c008,8); ((RSP_0 -64 232),4) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 232),4) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = 0xffffffff ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = [(RSP_0 -64 232),4]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = [(RSP_0 -64 304),4]_0 ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = [(RSP_0 -64 316),4]_0 ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = [(RSP_0 -64 332),4]_0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "10000480f: MOV DWORD PTR [RBX + 136], EAX 6"
 Post  "RAX = 0xffffffff ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = [(RSP_0 -64 304),4]_0 ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = [(RSP_0 -64 316),4]_0 ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = [(RSP_0 -64 332),4]_0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004815"
 Separations "((RSP_0 -64 316),4) SEP (bot(fun____error),4); ((RSP_0 -64 316),4) SEP (RSI_0,8); ((RSP_0 -64 316),4) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 316),4) SEP (0x10000c008,8); ((RSP_0 -64 316),4) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 316),4) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = 0xffffffff ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = [(RSP_0 -64 304),4]_0 ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = [(RSP_0 -64 316),4]_0 ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = [(RSP_0 -64 332),4]_0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "100004815: MOV DWORD PTR [RBX + 52], EAX 3"
 Post  "RAX = 0xffffffff ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = [(RSP_0 -64 304),4]_0 ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = [(RSP_0 -64 332),4]_0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004818"
 Separations "((RSP_0 -64 304),4) SEP (bot(fun____error),4); ((RSP_0 -64 304),4) SEP (RSI_0,8); ((RSP_0 -64 304),4) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 304),4) SEP (0x10000c008,8); ((RSP_0 -64 304),4) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 304),4) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = 0xffffffff ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = [(RSP_0 -64 304),4]_0 ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = [(RSP_0 -64 332),4]_0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "100004818: MOV DWORD PTR [RBX + 64], EAX 3"
 Post  "RAX = 0xffffffff ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = [(RSP_0 -64 332),4]_0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000481b"
 Separations "((RSP_0 -64 332),1) SEP (bot(fun____error),4); ((RSP_0 -64 332),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 332),4) SEP (bot(fun____error),4); ((RSP_0 -64 332),4) SEP (RSI_0,8); ((RSP_0 -64 332),4) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 332),4) SEP (0x10000c008,8); ((RSP_0 -64 332),4) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 332),4) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = 0xffffffff ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = [(RSP_0 -64 332),4]_0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "10000481b: MOV DWORD PTR [RBX + 36], 0 7"
 Post  "RAX = 0xffffffff ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004822"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0xffffffff ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "100004822: LEA RAX, [RIP + 4751] 7"
 Post  "RAX = 0x100005ab8 ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004829"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x100005ab8 ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "100004829: LEA RSI, [RBP - 64] 4"
 Post  "RAX = 0x100005ab8 ; RBX = (RSP_0 -64 368) ; RSI = (RSP_0 -64 72) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000482d"
 Separations "((RSP_0 -64 72),2) SEP (bot(fun____error),4); ((RSP_0 -64 72),2) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 72),8) SEP (bot(fun____error),4); ((RSP_0 -64 72),8) SEP (RSI_0,8); ((RSP_0 -64 72),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 72),8) SEP (0x10000c008,8); ((RSP_0 -64 72),8) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 72),8) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = 0x100005ab8 ; RBX = (RSP_0 -64 368) ; RSI = (RSP_0 -64 72) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "10000482d: MOV QWORD PTR [RSI], RAX 3"
 Post  "RAX = 0x100005ab8 ; RBX = (RSP_0 -64 368) ; RSI = (RSP_0 -64 72) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = 0x100005ab8 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004830"
 Separations "((RSP_0 -64 64),8) SEP (bot(fun____error),4); ((RSP_0 -64 64),8) SEP (RSI_0,8); ((RSP_0 -64 64),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 64),8) SEP (0x10000c008,8); ((RSP_0 -64 64),8) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 64),8) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = 0x100005ab8 ; RBX = (RSP_0 -64 368) ; RSI = (RSP_0 -64 72) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = 0x100005ab8 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "100004830: MOV QWORD PTR [RSI + 8], 0 8"
 Post  "RAX = 0x100005ab8 ; RBX = (RSP_0 -64 368) ; RSI = (RSP_0 -64 72) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 0x100005ab8 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004838"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x100005ab8 ; RBX = (RSP_0 -64 368) ; RSI = (RSP_0 -64 72) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 0x100005ab8 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "100004838: MOV EDI, 29 5"
 Post  "RAX = 0x100005ab8 ; RBX = (RSP_0 -64 368) ; RDI = 29 ; RSI = (RSP_0 -64 72) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 0x100005ab8 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000483d"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x100005ab8 ; RBX = (RSP_0 -64 368) ; RDI = 29 ; RSI = (RSP_0 -64 72) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 0x100005ab8 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "10000483d: XOR EDX, EDX 2"
 Post  "RAX = 0x100005ab8 ; RBX = (RSP_0 -64 368) ; RDX = 0 ; RDI = 29 ; RSI = (RSP_0 -64 72) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 0x100005ab8 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000483f"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x100005ab8 ; RBX = (RSP_0 -64 368) ; RDX = 0 ; RDI = 29 ; RSI = (RSP_0 -64 72) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 0x100005ab8 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "10000483f: ExternalCall fun__sigaction 5"
 Post  "RAX = bot(fun__sigaction) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 0x100005ab8 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 FunctionConstraints "PRESERVES fun__sigaction {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 120),8];[(RSP_0 -64 192),4];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 256),8];[(RSP_0 -64 264),1];[(RSP_0 -64 272),8];[(RSP_0 -64 279),1];[(RSP_0 -64 280),1];[(RSP_0 -64 288),8];[(RSP_0 -64 296),8];[(RSP_0 -64 304),4];[(RSP_0 -64 312),8];[(RSP_0 -64 316),4];[(RSP_0 -64 320),4];[(RSP_0 -64 324),4];[(RSP_0 -64 328),4];[(RSP_0 -64 332),4];[(RSP_0 -64 336),4];[(RSP_0 -64 344),8];[(RSP_0 -64 352),8];[(RSP_0 -64 368),8];[(RSP_0 -64 376),8];[(RSP_0 -64 384),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004844"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__sigaction) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 0x100005ab8 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "100004844: TEST EAX, EAX 2"
 Post  "RAX = bot(fun__sigaction) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 0x100005ab8 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004846"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__sigaction) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 0x100005ab8 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "100004846: JNE 4294989924 6"
 Post  "RAX = bot(fun__sigaction) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 0x100005ab8 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 1000047ce, blockId == 1 ##
#####################################
*)

htriple "ht_10000484c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__sigaction) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 0x100005ab8 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "10000484c: LEA RSI, [RBP - 64] 4"
 Post  "RAX = bot(fun__sigaction) ; RBX = (RSP_0 -64 368) ; RSI = (RSP_0 -64 72) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 0x100005ab8 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004850"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__sigaction) ; RBX = (RSP_0 -64 368) ; RSI = (RSP_0 -64 72) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 0x100005ab8 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "100004850: MOV EDI, 30 5"
 Post  "RAX = bot(fun__sigaction) ; RBX = (RSP_0 -64 368) ; RDI = 30 ; RSI = (RSP_0 -64 72) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 0x100005ab8 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004855"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__sigaction) ; RBX = (RSP_0 -64 368) ; RDI = 30 ; RSI = (RSP_0 -64 72) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 0x100005ab8 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "100004855: XOR EDX, EDX 2"
 Post  "RAX = bot(fun__sigaction) ; RBX = (RSP_0 -64 368) ; RDX = 0 ; RDI = 30 ; RSI = (RSP_0 -64 72) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 0x100005ab8 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004857"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__sigaction) ; RBX = (RSP_0 -64 368) ; RDX = 0 ; RDI = 30 ; RSI = (RSP_0 -64 72) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 0x100005ab8 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "100004857: ExternalCall fun__sigaction 5"
 Post  "RAX = bot(fun__sigaction) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 0x100005ab8 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 FunctionConstraints "PRESERVES fun__sigaction {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 120),8];[(RSP_0 -64 192),4];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 256),8];[(RSP_0 -64 264),1];[(RSP_0 -64 272),8];[(RSP_0 -64 279),1];[(RSP_0 -64 280),1];[(RSP_0 -64 288),8];[(RSP_0 -64 296),8];[(RSP_0 -64 304),4];[(RSP_0 -64 312),8];[(RSP_0 -64 316),4];[(RSP_0 -64 320),4];[(RSP_0 -64 324),4];[(RSP_0 -64 328),4];[(RSP_0 -64 332),4];[(RSP_0 -64 336),4];[(RSP_0 -64 344),8];[(RSP_0 -64 352),8];[(RSP_0 -64 368),8];[(RSP_0 -64 376),8];[(RSP_0 -64 384),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000485c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__sigaction) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 0x100005ab8 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "10000485c: TEST EAX, EAX 2"
 Post  "RAX = bot(fun__sigaction) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 0x100005ab8 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000485e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__sigaction) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 0x100005ab8 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "10000485e: JNE 4294989940 6"
 Post  "RAX = bot(fun__sigaction) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 0x100005ab8 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 1000047ce, blockId == 2 ##
#####################################
*)

htriple "ht_100005864"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__sigaction) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 0x100005ab8 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "100005864: ExternalCall fun____error 5"
 Post  "RAX = bot(fun____error) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 0x100005ab8 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 FunctionConstraints "PRESERVES fun____error {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 120),8];[(RSP_0 -64 192),4];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 256),8];[(RSP_0 -64 264),1];[(RSP_0 -64 272),8];[(RSP_0 -64 279),1];[(RSP_0 -64 280),1];[(RSP_0 -64 288),8];[(RSP_0 -64 296),8];[(RSP_0 -64 304),4];[(RSP_0 -64 312),8];[(RSP_0 -64 316),4];[(RSP_0 -64 320),4];[(RSP_0 -64 324),4];[(RSP_0 -64 328),4];[(RSP_0 -64 332),4];[(RSP_0 -64 336),4];[(RSP_0 -64 344),8];[(RSP_0 -64 352),8];[(RSP_0 -64 368),8];[(RSP_0 -64 376),8];[(RSP_0 -64 384),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005869"
 Separations "(bot(fun____error),4) SEP (RSP_0,8); (bot(fun____error),4) SEP ([0x10000c008,8]_0,8); (bot(fun____error),4) SEP (0x10000c008,8); (bot(fun____error),4) SEP ((RSP_0 -64 8),8); (bot(fun____error),4) SEP ((RSP_0 -64 16),8); (bot(fun____error),4) SEP ((RSP_0 -64 24),8); (bot(fun____error),4) SEP ((RSP_0 -64 32),8); (bot(fun____error),4) SEP ((RSP_0 -64 40),8); (bot(fun____error),4) SEP ((RSP_0 -64 48),8); (bot(fun____error),4) SEP ((RSP_0 -64 56),8); (bot(fun____error),4) SEP ((RSP_0 -64 64),8); (bot(fun____error),4) SEP ((RSP_0 -64 70),1); (bot(fun____error),4) SEP ((RSP_0 -64 71),1); (bot(fun____error),4) SEP ((RSP_0 -64 72),2); (bot(fun____error),4) SEP ((RSP_0 -64 72),8); (bot(fun____error),4) SEP ((RSP_0 -64 80),8); (bot(fun____error),4) SEP ((RSP_0 -64 120),8); (bot(fun____error),4) SEP ((RSP_0 -64 188),4); (bot(fun____error),4) SEP ((RSP_0 -64 192),4); (bot(fun____error),4) SEP ((RSP_0 -64 216),8); (bot(fun____error),4) SEP ((RSP_0 -64 224),8); (bot(fun____error),4) SEP ((RSP_0 -64 228),4); (bot(fun____error),4) SEP ((RSP_0 -64 232),4); (bot(fun____error),4) SEP ((RSP_0 -64 256),8); (bot(fun____error),4) SEP ((RSP_0 -64 264),1); (bot(fun____error),4) SEP ((RSP_0 -64 272),8); (bot(fun____error),4) SEP ((RSP_0 -64 279),1); (bot(fun____error),4) SEP ((RSP_0 -64 280),1); (bot(fun____error),4) SEP ((RSP_0 -64 288),8); (bot(fun____error),4) SEP ((RSP_0 -64 296),8); (bot(fun____error),4) SEP ((RSP_0 -64 304),4); (bot(fun____error),4) SEP ((RSP_0 -64 312),8); (bot(fun____error),4) SEP ((RSP_0 -64 316),4); (bot(fun____error),4) SEP ((RSP_0 -64 320),4); (bot(fun____error),4) SEP ((RSP_0 -64 324),1); (bot(fun____error),4) SEP ((RSP_0 -64 324),4); (bot(fun____error),4) SEP ((RSP_0 -64 326),1); (bot(fun____error),4) SEP ((RSP_0 -64 327),1); (bot(fun____error),4) SEP ((RSP_0 -64 328),1); (bot(fun____error),4) SEP ((RSP_0 -64 328),4); (bot(fun____error),4) SEP ((RSP_0 -64 330),1); (bot(fun____error),4) SEP ((RSP_0 -64 331),1); (bot(fun____error),4) SEP ((RSP_0 -64 332),1); (bot(fun____error),4) SEP ((RSP_0 -64 332),4); (bot(fun____error),4) SEP ((RSP_0 -64 336),4); (bot(fun____error),4) SEP ((RSP_0 -64 340),4); (bot(fun____error),4) SEP ((RSP_0 -64 344),4); (bot(fun____error),4) SEP ((RSP_0 -64 344),8); (bot(fun____error),4) SEP ((RSP_0 -64 352),8); (bot(fun____error),4) SEP ((RSP_0 -64 368),8); (bot(fun____error),4) SEP ((RSP_0 -64 376),8); (bot(fun____error),4) SEP ((RSP_0 -64 384),8)"
 Assertions  ""
 Pre   "RAX = bot(fun____error) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 0x100005ab8 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "100005869: MOV ESI, DWORD PTR [RAX] 2"
 Post  "RAX = bot(fun____error) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 0x100005ab8 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000586b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun____error) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 0x100005ab8 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "10000586b: LEA RDX, [RIP + 21144] 7"
 Post  "RAX = bot(fun____error) ; RBX = (RSP_0 -64 368) ; RDX = 0x10000ab0a ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 0x100005ab8 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005872"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun____error) ; RBX = (RSP_0 -64 368) ; RDX = 0x10000ab0a ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 0x100005ab8 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "100005872: JMP 4294989954 2"
 Post  "RAX = bot(fun____error) ; RBX = (RSP_0 -64 368) ; RDX = 0x10000ab0a ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 0x100005ab8 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 1000047ce, blockId == 3 ##
#####################################
*)

htriple "ht_100004864"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__sigaction) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 0x100005ab8 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "100004864: LEA RSI, [RBP - 64] 4"
 Post  "RAX = bot(fun__sigaction) ; RBX = (RSP_0 -64 368) ; RSI = (RSP_0 -64 72) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 0x100005ab8 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004868"
 Separations "((RSP_0 -64 72),2) SEP (bot(fun____error),4); ((RSP_0 -64 72),2) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 72),8) SEP (bot(fun____error),4); ((RSP_0 -64 72),8) SEP (RSI_0,8); ((RSP_0 -64 72),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 72),8) SEP (0x10000c008,8); ((RSP_0 -64 72),8) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 72),8) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun__sigaction) ; RBX = (RSP_0 -64 368) ; RSI = (RSP_0 -64 72) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 0x100005ab8 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "100004868: MOV QWORD PTR [RSI], 1 7"
 Post  "RAX = bot(fun__sigaction) ; RBX = (RSP_0 -64 368) ; RSI = (RSP_0 -64 72) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000486f"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__sigaction) ; RBX = (RSP_0 -64 368) ; RSI = (RSP_0 -64 72) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "10000486f: MOV EDI, 13 5"
 Post  "RAX = bot(fun__sigaction) ; RBX = (RSP_0 -64 368) ; RDI = 13 ; RSI = (RSP_0 -64 72) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004874"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__sigaction) ; RBX = (RSP_0 -64 368) ; RDI = 13 ; RSI = (RSP_0 -64 72) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "100004874: XOR EDX, EDX 2"
 Post  "RAX = bot(fun__sigaction) ; RBX = (RSP_0 -64 368) ; RDX = 0 ; RDI = 13 ; RSI = (RSP_0 -64 72) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004876"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__sigaction) ; RBX = (RSP_0 -64 368) ; RDX = 0 ; RDI = 13 ; RSI = (RSP_0 -64 72) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "100004876: ExternalCall fun__sigaction 5"
 Post  "RAX = bot(fun__sigaction) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 FunctionConstraints "PRESERVES fun__sigaction {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 120),8];[(RSP_0 -64 192),4];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 256),8];[(RSP_0 -64 264),1];[(RSP_0 -64 272),8];[(RSP_0 -64 279),1];[(RSP_0 -64 280),1];[(RSP_0 -64 288),8];[(RSP_0 -64 296),8];[(RSP_0 -64 304),4];[(RSP_0 -64 312),8];[(RSP_0 -64 316),4];[(RSP_0 -64 320),4];[(RSP_0 -64 324),4];[(RSP_0 -64 328),4];[(RSP_0 -64 332),4];[(RSP_0 -64 336),4];[(RSP_0 -64 344),8];[(RSP_0 -64 352),8];[(RSP_0 -64 368),8];[(RSP_0 -64 376),8];[(RSP_0 -64 384),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000487b"
 Separations "(RSI_0,8) SEP (RSP_0,8); (RSI_0,8) SEP ([0x10000c008,8]_0,8); (RSI_0,8) SEP (0x10000c008,8); (RSI_0,8) SEP ((RSP_0 -64 8),8); (RSI_0,8) SEP ((RSP_0 -64 16),8); (RSI_0,8) SEP ((RSP_0 -64 24),8); (RSI_0,8) SEP ((RSP_0 -64 32),8); (RSI_0,8) SEP ((RSP_0 -64 40),8); (RSI_0,8) SEP ((RSP_0 -64 48),8); (RSI_0,8) SEP ((RSP_0 -64 56),8); (RSI_0,8) SEP ((RSP_0 -64 64),8); (RSI_0,8) SEP ((RSP_0 -64 72),8); (RSI_0,8) SEP ((RSP_0 -64 120),8); (RSI_0,8) SEP ((RSP_0 -64 192),4); (RSI_0,8) SEP ((RSP_0 -64 224),8); (RSI_0,8) SEP ((RSP_0 -64 228),4); (RSI_0,8) SEP ((RSP_0 -64 232),4); (RSI_0,8) SEP ((RSP_0 -64 256),8); (RSI_0,8) SEP ((RSP_0 -64 264),1); (RSI_0,8) SEP ((RSP_0 -64 272),8); (RSI_0,8) SEP ((RSP_0 -64 279),1); (RSI_0,8) SEP ((RSP_0 -64 280),1); (RSI_0,8) SEP ((RSP_0 -64 288),8); (RSI_0,8) SEP ((RSP_0 -64 296),8); (RSI_0,8) SEP ((RSP_0 -64 304),4); (RSI_0,8) SEP ((RSP_0 -64 312),8); (RSI_0,8) SEP ((RSP_0 -64 316),4); (RSI_0,8) SEP ((RSP_0 -64 320),4); (RSI_0,8) SEP ((RSP_0 -64 324),4); (RSI_0,8) SEP ((RSP_0 -64 328),4); (RSI_0,8) SEP ((RSP_0 -64 332),4); (RSI_0,8) SEP ((RSP_0 -64 336),4); (RSI_0,8) SEP ((RSP_0 -64 344),8); (RSI_0,8) SEP ((RSP_0 -64 352),8); (RSI_0,8) SEP ((RSP_0 -64 368),8); (RSI_0,8) SEP ((RSP_0 -64 376),8); (RSI_0,8) SEP ((RSP_0 -64 384),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__sigaction) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "10000487b: MOV RDI, QWORD PTR [R15] 3"
 Post  "RAX = bot(fun__sigaction) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000487e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__sigaction) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "10000487e: LEA RSI, [RIP + 25273] 7"
 Post  "RAX = bot(fun__sigaction) ; RBX = (RSP_0 -64 368) ; RSI = 0x10000ab3e ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004885"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__sigaction) ; RBX = (RSP_0 -64 368) ; RSI = 0x10000ab3e ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "100004885: ExternalCall fun_0x100009977 5"
 Post  "RAX = bot(fun_0x100009977) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 FunctionConstraints "PRESERVES fun_0x100009977 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 120),8];[(RSP_0 -64 192),4];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 256),8];[(RSP_0 -64 264),1];[(RSP_0 -64 272),8];[(RSP_0 -64 279),1];[(RSP_0 -64 280),1];[(RSP_0 -64 288),8];[(RSP_0 -64 296),8];[(RSP_0 -64 304),4];[(RSP_0 -64 312),8];[(RSP_0 -64 316),4];[(RSP_0 -64 320),4];[(RSP_0 -64 324),4];[(RSP_0 -64 328),4];[(RSP_0 -64 332),4];[(RSP_0 -64 336),4];[(RSP_0 -64 344),8];[(RSP_0 -64 352),8];[(RSP_0 -64 368),8];[(RSP_0 -64 376),8];[(RSP_0 -64 384),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000488a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100009977) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "10000488a: LEA RSI, [RIP + 25268] 7"
 Post  "RAX = bot(fun_0x100009977) ; RBX = (RSP_0 -64 368) ; RSI = 0x10000ab45 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004891"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100009977) ; RBX = (RSP_0 -64 368) ; RSI = 0x10000ab45 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "100004891: XOR EDI, EDI 2"
 Post  "RAX = bot(fun_0x100009977) ; RBX = (RSP_0 -64 368) ; RDI = 0 ; RSI = 0x10000ab45 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004893"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100009977) ; RBX = (RSP_0 -64 368) ; RDI = 0 ; RSI = 0x10000ab45 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "100004893: ExternalCall fun__setlocale 5"
 Post  "RAX = bot(fun__setlocale) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 FunctionConstraints "PRESERVES fun__setlocale {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 120),8];[(RSP_0 -64 192),4];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 256),8];[(RSP_0 -64 264),1];[(RSP_0 -64 272),8];[(RSP_0 -64 279),1];[(RSP_0 -64 280),1];[(RSP_0 -64 288),8];[(RSP_0 -64 296),8];[(RSP_0 -64 304),4];[(RSP_0 -64 312),8];[(RSP_0 -64 316),4];[(RSP_0 -64 320),4];[(RSP_0 -64 324),4];[(RSP_0 -64 328),4];[(RSP_0 -64 332),4];[(RSP_0 -64 336),4];[(RSP_0 -64 344),8];[(RSP_0 -64 352),8];[(RSP_0 -64 368),8];[(RSP_0 -64 376),8];[(RSP_0 -64 384),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004898"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__setlocale) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "100004898: TEST RAX, RAX 3"
 Post  "RAX = bot(fun__setlocale) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000489b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__setlocale) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "10000489b: JNE 4294985901 2"
 Post  "RAX = bot(fun__setlocale) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 1000047ce, blockId == 4 ##
#####################################
*)

htriple "ht_100005874"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__sigaction) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 0x100005ab8 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "100005874: ExternalCall fun____error 5"
 Post  "RAX = bot(fun____error) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 0x100005ab8 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 FunctionConstraints "PRESERVES fun____error {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 120),8];[(RSP_0 -64 192),4];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 256),8];[(RSP_0 -64 264),1];[(RSP_0 -64 272),8];[(RSP_0 -64 279),1];[(RSP_0 -64 280),1];[(RSP_0 -64 288),8];[(RSP_0 -64 296),8];[(RSP_0 -64 304),4];[(RSP_0 -64 312),8];[(RSP_0 -64 316),4];[(RSP_0 -64 320),4];[(RSP_0 -64 324),4];[(RSP_0 -64 328),4];[(RSP_0 -64 332),4];[(RSP_0 -64 336),4];[(RSP_0 -64 344),8];[(RSP_0 -64 352),8];[(RSP_0 -64 368),8];[(RSP_0 -64 376),8];[(RSP_0 -64 384),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005879"
 Separations "(bot(fun____error),4) SEP (RSP_0,8); (bot(fun____error),4) SEP ([0x10000c008,8]_0,8); (bot(fun____error),4) SEP (0x10000c008,8); (bot(fun____error),4) SEP ((RSP_0 -64 8),8); (bot(fun____error),4) SEP ((RSP_0 -64 16),8); (bot(fun____error),4) SEP ((RSP_0 -64 24),8); (bot(fun____error),4) SEP ((RSP_0 -64 32),8); (bot(fun____error),4) SEP ((RSP_0 -64 40),8); (bot(fun____error),4) SEP ((RSP_0 -64 48),8); (bot(fun____error),4) SEP ((RSP_0 -64 56),8); (bot(fun____error),4) SEP ((RSP_0 -64 64),8); (bot(fun____error),4) SEP ((RSP_0 -64 70),1); (bot(fun____error),4) SEP ((RSP_0 -64 71),1); (bot(fun____error),4) SEP ((RSP_0 -64 72),2); (bot(fun____error),4) SEP ((RSP_0 -64 72),8); (bot(fun____error),4) SEP ((RSP_0 -64 80),8); (bot(fun____error),4) SEP ((RSP_0 -64 120),8); (bot(fun____error),4) SEP ((RSP_0 -64 188),4); (bot(fun____error),4) SEP ((RSP_0 -64 192),4); (bot(fun____error),4) SEP ((RSP_0 -64 216),8); (bot(fun____error),4) SEP ((RSP_0 -64 224),8); (bot(fun____error),4) SEP ((RSP_0 -64 228),4); (bot(fun____error),4) SEP ((RSP_0 -64 232),4); (bot(fun____error),4) SEP ((RSP_0 -64 256),8); (bot(fun____error),4) SEP ((RSP_0 -64 264),1); (bot(fun____error),4) SEP ((RSP_0 -64 272),8); (bot(fun____error),4) SEP ((RSP_0 -64 279),1); (bot(fun____error),4) SEP ((RSP_0 -64 280),1); (bot(fun____error),4) SEP ((RSP_0 -64 288),8); (bot(fun____error),4) SEP ((RSP_0 -64 296),8); (bot(fun____error),4) SEP ((RSP_0 -64 304),4); (bot(fun____error),4) SEP ((RSP_0 -64 312),8); (bot(fun____error),4) SEP ((RSP_0 -64 316),4); (bot(fun____error),4) SEP ((RSP_0 -64 320),4); (bot(fun____error),4) SEP ((RSP_0 -64 324),1); (bot(fun____error),4) SEP ((RSP_0 -64 324),4); (bot(fun____error),4) SEP ((RSP_0 -64 326),1); (bot(fun____error),4) SEP ((RSP_0 -64 327),1); (bot(fun____error),4) SEP ((RSP_0 -64 328),1); (bot(fun____error),4) SEP ((RSP_0 -64 328),4); (bot(fun____error),4) SEP ((RSP_0 -64 330),1); (bot(fun____error),4) SEP ((RSP_0 -64 331),1); (bot(fun____error),4) SEP ((RSP_0 -64 332),1); (bot(fun____error),4) SEP ((RSP_0 -64 332),4); (bot(fun____error),4) SEP ((RSP_0 -64 336),4); (bot(fun____error),4) SEP ((RSP_0 -64 340),4); (bot(fun____error),4) SEP ((RSP_0 -64 344),4); (bot(fun____error),4) SEP ((RSP_0 -64 344),8); (bot(fun____error),4) SEP ((RSP_0 -64 352),8); (bot(fun____error),4) SEP ((RSP_0 -64 368),8); (bot(fun____error),4) SEP ((RSP_0 -64 376),8); (bot(fun____error),4) SEP ((RSP_0 -64 384),8)"
 Assertions  ""
 Pre   "RAX = bot(fun____error) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 0x100005ab8 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "100005879: MOV ESI, DWORD PTR [RAX] 2"
 Post  "RAX = bot(fun____error) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 0x100005ab8 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000587b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun____error) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 0x100005ab8 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "10000587b: LEA RDX, [RIP + 21154] 7"
 Post  "RAX = bot(fun____error) ; RBX = (RSP_0 -64 368) ; RDX = 0x10000ab24 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 0x100005ab8 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 1000047ce, blockId == 5 ##
#####################################
*)

htriple "ht_10000489d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__setlocale) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "10000489d: LEA RSI, [RIP + 25250] 7"
 Post  "RAX = bot(fun__setlocale) ; RBX = (RSP_0 -64 368) ; RSI = 0x10000ab46 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000048a4"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__setlocale) ; RBX = (RSP_0 -64 368) ; RSI = 0x10000ab46 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "1000048a4: XOR EDI, EDI 2"
 Post  "RAX = bot(fun__setlocale) ; RBX = (RSP_0 -64 368) ; RDI = 0 ; RSI = 0x10000ab46 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000048a6"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__setlocale) ; RBX = (RSP_0 -64 368) ; RDI = 0 ; RSI = 0x10000ab46 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "1000048a6: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = (RSP_0 -64 368) ; RDI = 0 ; RSI = 0x10000ab46 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000048a8"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = (RSP_0 -64 368) ; RDI = 0 ; RSI = 0x10000ab46 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "1000048a8: ExternalCall fun_0x1000099ad 5"
 Post  "RAX = bot(fun_0x1000099ad) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 FunctionConstraints "PRESERVES fun_0x1000099ad {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 120),8];[(RSP_0 -64 192),4];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 256),8];[(RSP_0 -64 264),1];[(RSP_0 -64 272),8];[(RSP_0 -64 279),1];[(RSP_0 -64 280),1];[(RSP_0 -64 288),8];[(RSP_0 -64 296),8];[(RSP_0 -64 304),4];[(RSP_0 -64 312),8];[(RSP_0 -64 316),4];[(RSP_0 -64 320),4];[(RSP_0 -64 324),4];[(RSP_0 -64 328),4];[(RSP_0 -64 332),4];[(RSP_0 -64 336),4];[(RSP_0 -64 344),8];[(RSP_0 -64 352),8];[(RSP_0 -64 368),8];[(RSP_0 -64 376),8];[(RSP_0 -64 384),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 1000047ce, blockId == 6 ##
#####################################
*)

htriple "ht_1000048ad"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "1000048ad: MOV EDI, 57 5"
 Post  "RBX = (RSP_0 -64 368) ; RDI = 57 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000048b2"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 368) ; RDI = 57 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "1000048b2: ExternalCall fun__nl_langinfo 5"
 Post  "RAX = bot(fun__nl_langinfo) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 FunctionConstraints "PRESERVES fun__nl_langinfo {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 120),8];[(RSP_0 -64 192),4];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 256),8];[(RSP_0 -64 264),1];[(RSP_0 -64 272),8];[(RSP_0 -64 279),1];[(RSP_0 -64 280),1];[(RSP_0 -64 288),8];[(RSP_0 -64 296),8];[(RSP_0 -64 304),4];[(RSP_0 -64 312),8];[(RSP_0 -64 316),4];[(RSP_0 -64 320),4];[(RSP_0 -64 324),4];[(RSP_0 -64 328),4];[(RSP_0 -64 332),4];[(RSP_0 -64 336),4];[(RSP_0 -64 344),8];[(RSP_0 -64 352),8];[(RSP_0 -64 368),8];[(RSP_0 -64 376),8];[(RSP_0 -64 384),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000048b7"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__nl_langinfo) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "1000048b7: CMP BYTE PTR [RAX], 100 3"
 Post  "RAX = bot(fun__nl_langinfo) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000048ba"
 Separations "((RSP_0 -64 264),1) SEP (bot(fun____error),4); ((RSP_0 -64 264),1) SEP (RSI_0,8); ((RSP_0 -64 264),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 264),1) SEP (0x10000c008,8); ((RSP_0 -64 264),1) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 264),1) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun__nl_langinfo) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),1] = [(RSP_0 -64 264),1]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "1000048ba: SETE BYTE PTR [RBP - 256] 7"
 Post  "RAX = bot(fun__nl_langinfo) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000048c1"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__nl_langinfo) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "1000048c1: ExternalCall fun__geteuid 5"
 Post  "RAX = bot(fun__geteuid) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 FunctionConstraints "PRESERVES fun__geteuid {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 120),8];[(RSP_0 -64 192),4];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 256),8];[(RSP_0 -64 264),1];[(RSP_0 -64 272),8];[(RSP_0 -64 279),1];[(RSP_0 -64 280),1];[(RSP_0 -64 288),8];[(RSP_0 -64 296),8];[(RSP_0 -64 304),4];[(RSP_0 -64 312),8];[(RSP_0 -64 316),4];[(RSP_0 -64 320),4];[(RSP_0 -64 324),4];[(RSP_0 -64 328),4];[(RSP_0 -64 332),4];[(RSP_0 -64 336),4];[(RSP_0 -64 344),8];[(RSP_0 -64 352),8];[(RSP_0 -64 368),8];[(RSP_0 -64 376),8];[(RSP_0 -64 384),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000048c6"
 Separations "((RSP_0 -64 192),4) SEP (bot(fun____error),4); ((RSP_0 -64 192),4) SEP (RSI_0,8); ((RSP_0 -64 192),4) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 192),4) SEP (0x10000c008,8); ((RSP_0 -64 192),4) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 192),4) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun__geteuid) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = [(RSP_0 -64 192),4]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "1000048c6: MOV DWORD PTR [RBP - 184], EAX 6"
 Post  "RAX = bot(fun__geteuid) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000048cc"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__geteuid) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "1000048cc: MOVABS RCX, 18446744069414594560 10"
 Post  "RAX = bot(fun__geteuid) ; RBX = (RSP_0 -64 368) ; RCX = 0xffffffff00002800 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000048d6"
 Separations "((RSP_0 -64 344),4) SEP (bot(fun____error),4); ((RSP_0 -64 344),4) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 344),8) SEP (bot(fun____error),4); ((RSP_0 -64 344),8) SEP (RSI_0,8); ((RSP_0 -64 344),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 344),8) SEP (0x10000c008,8); ((RSP_0 -64 344),8) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 344),8) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun__geteuid) ; RBX = (RSP_0 -64 368) ; RCX = 0xffffffff00002800 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = [(RSP_0 -64 344),8]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "1000048d6: MOV QWORD PTR [RBP - 336], RCX 7"
 Post  "RAX = bot(fun__geteuid) ; RBX = (RSP_0 -64 368) ; RCX = 0xffffffff00002800 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000048dd"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__geteuid) ; RBX = (RSP_0 -64 368) ; RCX = 0xffffffff00002800 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "1000048dd: TEST EAX, EAX 2"
 Post  "RAX = bot(fun__geteuid) ; RBX = (RSP_0 -64 368) ; RCX = 0xffffffff00002800 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000048df"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__geteuid) ; RBX = (RSP_0 -64 368) ; RCX = 0xffffffff00002800 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "1000048df: MOV EAX, 9191 5"
 Post  "RAX = 0x23e7 ; RBX = (RSP_0 -64 368) ; RCX = 0xffffffff00002800 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000048e4"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x23e7 ; RBX = (RSP_0 -64 368) ; RCX = 0xffffffff00002800 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "1000048e4: MOV ECX, 8964 5"
 Post  "RAX = 0x23e7 ; RBX = (RSP_0 -64 368) ; RCX = 0x2304 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000048e9"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x23e7 ; RBX = (RSP_0 -64 368) ; RCX = 0x2304 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "1000048e9: CMOVE ECX, EAX 3"
 Post  "RAX = 0x23e7 ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000048ec"
 Separations "((RSP_0 -64 328),1) SEP (bot(fun____error),4); ((RSP_0 -64 328),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 328),4) SEP (bot(fun____error),4); ((RSP_0 -64 328),4) SEP (RSI_0,8); ((RSP_0 -64 328),4) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 328),4) SEP (0x10000c008,8); ((RSP_0 -64 328),4) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 328),4) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = 0x23e7 ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 328),4] = [(RSP_0 -64 328),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "1000048ec: MOV DWORD PTR [RBP - 320], ECX 6"
 Post  "RAX = 0x23e7 ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000048f2"
 Separations "((RSP_0 -64 324),1) SEP (bot(fun____error),4); ((RSP_0 -64 324),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 324),4) SEP (bot(fun____error),4); ((RSP_0 -64 324),4) SEP (RSI_0,8); ((RSP_0 -64 324),4) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 324),4) SEP (0x10000c008,8); ((RSP_0 -64 324),4) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 324),4) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = 0x23e7 ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "1000048f2: MOV R12D, DWORD PTR [RBP - 316] 7"
 Post  "RAX = 0x23e7 ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = b32([(RSP_0 -64 324),4]_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000048f9"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x23e7 ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = b32([(RSP_0 -64 324),4]_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "1000048f9: MOV EBX, R12D 3"
 Post  "RAX = 0x23e7 ; RBX = b32([(RSP_0 -64 324),4]_0) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = b32([(RSP_0 -64 324),4]_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000048fc"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x23e7 ; RBX = b32([(RSP_0 -64 324),4]_0) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = b32([(RSP_0 -64 324),4]_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "1000048fc: OR EBX, 4 3"
 Post  "RAX = 0x23e7 ; RBX = (b32([(RSP_0 -64 324),4]_0) |32 4) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = b32([(RSP_0 -64 324),4]_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)

htriple "ht_1000048ff"
 Separations "((RSP_0 -64 324),1) SEP (bot(fun____error),4); ((RSP_0 -64 324),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 324),4) SEP (bot(fun____error),4); ((RSP_0 -64 324),4) SEP (RSI_0,8); ((RSP_0 -64 324),4) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 324),4) SEP (0x10000c008,8); ((RSP_0 -64 324),4) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 324),4) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = 0x23e7 ; RBX = (b32([(RSP_0 -64 324),4]_0) |32 4) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = b32([(RSP_0 -64 324),4]_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = [(RSP_0 -64 324),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "1000048ff: MOV DWORD PTR [RBP - 316], EBX 6"
 Post  "RAX = 0x23e7 ; RBX = (b32([(RSP_0 -64 324),4]_0) |32 4) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = b32([(RSP_0 -64 324),4]_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = (b32([(RSP_0 -64 324),4]_0) |32 4) ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)

htriple "ht_100004905"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x23e7 ; RBX = (b32([(RSP_0 -64 324),4]_0) |32 4) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = b32([(RSP_0 -64 324),4]_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = (b32([(RSP_0 -64 324),4]_0) |32 4) ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "100004905: LEA RDI, [RIP + 25175] 7"
 Post  "RAX = 0x23e7 ; RBX = (b32([(RSP_0 -64 324),4]_0) |32 4) ; RDI = 0x10000ab63 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = b32([(RSP_0 -64 324),4]_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = (b32([(RSP_0 -64 324),4]_0) |32 4) ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000490c"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x23e7 ; RBX = (b32([(RSP_0 -64 324),4]_0) |32 4) ; RDI = 0x10000ab63 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = b32([(RSP_0 -64 324),4]_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = (b32([(RSP_0 -64 324),4]_0) |32 4) ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "10000490c: ExternalCall fun__getenv 5"
 Post  "RAX = bot(fun__getenv) ; RBX = (b32([(RSP_0 -64 324),4]_0) |32 4) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = b32([(RSP_0 -64 324),4]_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = (b32([(RSP_0 -64 324),4]_0) |32 4) ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 FunctionConstraints "PRESERVES fun__getenv {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 120),8];[(RSP_0 -64 192),4];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 256),8];[(RSP_0 -64 264),1];[(RSP_0 -64 272),8];[(RSP_0 -64 279),1];[(RSP_0 -64 280),1];[(RSP_0 -64 288),8];[(RSP_0 -64 296),8];[(RSP_0 -64 304),4];[(RSP_0 -64 312),8];[(RSP_0 -64 316),4];[(RSP_0 -64 320),4];[(RSP_0 -64 324),4];[(RSP_0 -64 328),4];[(RSP_0 -64 332),4];[(RSP_0 -64 336),4];[(RSP_0 -64 344),8];[(RSP_0 -64 352),8];[(RSP_0 -64 368),8];[(RSP_0 -64 376),8];[(RSP_0 -64 384),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004911"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__getenv) ; RBX = (b32([(RSP_0 -64 324),4]_0) |32 4) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = b32([(RSP_0 -64 324),4]_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = (b32([(RSP_0 -64 324),4]_0) |32 4) ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "100004911: TEST RAX, RAX 3"
 Post  "RAX = bot(fun__getenv) ; RBX = (b32([(RSP_0 -64 324),4]_0) |32 4) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = b32([(RSP_0 -64 324),4]_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = (b32([(RSP_0 -64 324),4]_0) |32 4) ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004914"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__getenv) ; RBX = (b32([(RSP_0 -64 324),4]_0) |32 4) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = b32([(RSP_0 -64 324),4]_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = (b32([(RSP_0 -64 324),4]_0) |32 4) ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "100004914: JE 4294986020 2"
 Post  "RAX = bot(fun__getenv) ; RBX = (b32([(RSP_0 -64 324),4]_0) |32 4) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = b32([(RSP_0 -64 324),4]_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = (b32([(RSP_0 -64 324),4]_0) |32 4) ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 1000047ce, blockId == 7 ##
#####################################
*)

htriple "ht_100004916"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__getenv) ; RBX = (b32([(RSP_0 -64 324),4]_0) |32 4) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = b32([(RSP_0 -64 324),4]_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = (b32([(RSP_0 -64 324),4]_0) |32 4) ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "100004916: AND R12D, 4294967291 4"
 Post  "RAX = bot(fun__getenv) ; RBX = (b32([(RSP_0 -64 324),4]_0) |32 4) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = (b32([(RSP_0 -64 324),4]_0) &32 0xfffffffb) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = (b32([(RSP_0 -64 324),4]_0) |32 4) ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000491a"
 Separations "((RSP_0 -64 324),1) SEP (bot(fun____error),4); ((RSP_0 -64 324),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 324),4) SEP (bot(fun____error),4); ((RSP_0 -64 324),4) SEP (RSI_0,8); ((RSP_0 -64 324),4) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 324),4) SEP (0x10000c008,8); ((RSP_0 -64 324),4) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 324),4) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun__getenv) ; RBX = (b32([(RSP_0 -64 324),4]_0) |32 4) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = (b32([(RSP_0 -64 324),4]_0) &32 0xfffffffb) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = (b32([(RSP_0 -64 324),4]_0) |32 4) ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "10000491a: MOV DWORD PTR [RBP - 316], R12D 7"
 Post  "RAX = bot(fun__getenv) ; RBX = (b32([(RSP_0 -64 324),4]_0) |32 4) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = (b32([(RSP_0 -64 324),4]_0) &32 0xfffffffb) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = (b32([(RSP_0 -64 324),4]_0) &32 0xfffffffb) ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004921"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__getenv) ; RBX = (b32([(RSP_0 -64 324),4]_0) |32 4) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = (b32([(RSP_0 -64 324),4]_0) &32 0xfffffffb) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = (b32([(RSP_0 -64 324),4]_0) &32 0xfffffffb) ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "100004921: MOV EBX, R12D 3"
 Post  "RAX = bot(fun__getenv) ; RBX = (b32([(RSP_0 -64 324),4]_0) &32 0xfffffffb) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; R12 = (b32([(RSP_0 -64 324),4]_0) &32 0xfffffffb) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 324),4] = (b32([(RSP_0 -64 324),4]_0) &32 0xfffffffb) ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 1000047ce, blockId == 8 ##
#####################################
*)

htriple "ht_100004924"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__getenv) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "100004924: OR EBX, 32 3"
 Post  "RAX = bot(fun__getenv) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004927"
 Separations "((RSP_0 -64 324),1) SEP (bot(fun____error),4); ((RSP_0 -64 324),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 324),4) SEP (bot(fun____error),4); ((RSP_0 -64 324),4) SEP (RSI_0,8); ((RSP_0 -64 324),4) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 324),4) SEP (0x10000c008,8); ((RSP_0 -64 324),4) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 324),4) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun__getenv) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "100004927: MOV DWORD PTR [RBP - 316], EBX 6"
 Post  "RAX = bot(fun__getenv) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000492d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__getenv) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "10000492d: ExternalCall fun__archive_match_new 5"
 Post  "RAX = bot(fun__archive_match_new) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 FunctionConstraints "PRESERVES fun__archive_match_new {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 120),8];[(RSP_0 -64 192),4];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 256),8];[(RSP_0 -64 264),1];[(RSP_0 -64 272),8];[(RSP_0 -64 279),1];[(RSP_0 -64 280),1];[(RSP_0 -64 288),8];[(RSP_0 -64 296),8];[(RSP_0 -64 304),4];[(RSP_0 -64 312),8];[(RSP_0 -64 316),4];[(RSP_0 -64 320),4];[(RSP_0 -64 324),4];[(RSP_0 -64 328),4];[(RSP_0 -64 332),4];[(RSP_0 -64 336),4];[(RSP_0 -64 344),8];[(RSP_0 -64 352),8];[(RSP_0 -64 368),8];[(RSP_0 -64 376),8];[(RSP_0 -64 384),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004932"
 Separations "((RSP_0 -64 120),8) SEP (bot(fun____error),4); ((RSP_0 -64 120),8) SEP (RSI_0,8); ((RSP_0 -64 120),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 120),8) SEP (0x10000c008,8); ((RSP_0 -64 120),8) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 120),8) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun__archive_match_new) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "100004932: MOV QWORD PTR [RBP - 112], RAX 4"
 Post  "RAX = bot(fun__archive_match_new) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004936"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_match_new) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "100004936: TEST RAX, RAX 3"
 Post  "RAX = bot(fun__archive_match_new) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004939"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_match_new) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "100004939: JE 4294989446 6"
 Post  "RAX = bot(fun__archive_match_new) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 1000047ce, blockId == 9 ##
#####################################
*)

htriple "ht_10000493f"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_match_new) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "10000493f: ExternalCall fun_0x100004559 5"
 Post  "RAX = bot(fun_0x100004559) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 FunctionConstraints "PRESERVES fun_0x100004559 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 120),8];[(RSP_0 -64 192),4];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 256),8];[(RSP_0 -64 264),1];[(RSP_0 -64 272),8];[(RSP_0 -64 279),1];[(RSP_0 -64 280),1];[(RSP_0 -64 288),8];[(RSP_0 -64 296),8];[(RSP_0 -64 304),4];[(RSP_0 -64 312),8];[(RSP_0 -64 316),4];[(RSP_0 -64 320),4];[(RSP_0 -64 324),4];[(RSP_0 -64 328),4];[(RSP_0 -64 332),4];[(RSP_0 -64 336),4];[(RSP_0 -64 344),8];[(RSP_0 -64 352),8];[(RSP_0 -64 368),8];[(RSP_0 -64 376),8];[(RSP_0 -64 384),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004944"
 Separations "((RSP_0 -64 256),8) SEP (bot(fun____error),4); ((RSP_0 -64 256),8) SEP (RSI_0,8); ((RSP_0 -64 256),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 256),8) SEP (0x10000c008,8); ((RSP_0 -64 256),8) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 256),8) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100004559) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "100004944: MOV QWORD PTR [RBP - 248], RAX 7"
 Post  "RAX = bot(fun_0x100004559) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000494b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100004559) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "10000494b: TEST RAX, RAX 3"
 Post  "RAX = bot(fun_0x100004559) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000494e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100004559) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "10000494e: JE 4294989446 6"
 Post  "RAX = bot(fun_0x100004559) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000047ce, blockId == 10 ##
######################################
*)

htriple "ht_100005686"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "100005686: ExternalCall fun____error 5"
 Post  "RAX = bot(fun____error) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 FunctionConstraints "PRESERVES fun____error {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 120),8];[(RSP_0 -64 192),4];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 256),8];[(RSP_0 -64 264),1];[(RSP_0 -64 272),8];[(RSP_0 -64 279),1];[(RSP_0 -64 280),1];[(RSP_0 -64 288),8];[(RSP_0 -64 296),8];[(RSP_0 -64 304),4];[(RSP_0 -64 312),8];[(RSP_0 -64 316),4];[(RSP_0 -64 320),4];[(RSP_0 -64 324),4];[(RSP_0 -64 328),4];[(RSP_0 -64 332),4];[(RSP_0 -64 336),4];[(RSP_0 -64 344),8];[(RSP_0 -64 352),8];[(RSP_0 -64 368),8];[(RSP_0 -64 376),8];[(RSP_0 -64 384),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000568b"
 Separations "(bot(fun____error),4) SEP (RSP_0,8); (bot(fun____error),4) SEP ([0x10000c008,8]_0,8); (bot(fun____error),4) SEP (0x10000c008,8); (bot(fun____error),4) SEP ((RSP_0 -64 8),8); (bot(fun____error),4) SEP ((RSP_0 -64 16),8); (bot(fun____error),4) SEP ((RSP_0 -64 24),8); (bot(fun____error),4) SEP ((RSP_0 -64 32),8); (bot(fun____error),4) SEP ((RSP_0 -64 40),8); (bot(fun____error),4) SEP ((RSP_0 -64 48),8); (bot(fun____error),4) SEP ((RSP_0 -64 56),8); (bot(fun____error),4) SEP ((RSP_0 -64 64),8); (bot(fun____error),4) SEP ((RSP_0 -64 70),1); (bot(fun____error),4) SEP ((RSP_0 -64 71),1); (bot(fun____error),4) SEP ((RSP_0 -64 72),2); (bot(fun____error),4) SEP ((RSP_0 -64 72),8); (bot(fun____error),4) SEP ((RSP_0 -64 80),8); (bot(fun____error),4) SEP ((RSP_0 -64 120),8); (bot(fun____error),4) SEP ((RSP_0 -64 188),4); (bot(fun____error),4) SEP ((RSP_0 -64 192),4); (bot(fun____error),4) SEP ((RSP_0 -64 216),8); (bot(fun____error),4) SEP ((RSP_0 -64 224),8); (bot(fun____error),4) SEP ((RSP_0 -64 228),4); (bot(fun____error),4) SEP ((RSP_0 -64 232),4); (bot(fun____error),4) SEP ((RSP_0 -64 256),8); (bot(fun____error),4) SEP ((RSP_0 -64 264),1); (bot(fun____error),4) SEP ((RSP_0 -64 272),8); (bot(fun____error),4) SEP ((RSP_0 -64 279),1); (bot(fun____error),4) SEP ((RSP_0 -64 280),1); (bot(fun____error),4) SEP ((RSP_0 -64 288),8); (bot(fun____error),4) SEP ((RSP_0 -64 296),8); (bot(fun____error),4) SEP ((RSP_0 -64 304),4); (bot(fun____error),4) SEP ((RSP_0 -64 312),8); (bot(fun____error),4) SEP ((RSP_0 -64 316),4); (bot(fun____error),4) SEP ((RSP_0 -64 320),4); (bot(fun____error),4) SEP ((RSP_0 -64 324),1); (bot(fun____error),4) SEP ((RSP_0 -64 324),4); (bot(fun____error),4) SEP ((RSP_0 -64 326),1); (bot(fun____error),4) SEP ((RSP_0 -64 327),1); (bot(fun____error),4) SEP ((RSP_0 -64 328),1); (bot(fun____error),4) SEP ((RSP_0 -64 328),4); (bot(fun____error),4) SEP ((RSP_0 -64 330),1); (bot(fun____error),4) SEP ((RSP_0 -64 331),1); (bot(fun____error),4) SEP ((RSP_0 -64 332),1); (bot(fun____error),4) SEP ((RSP_0 -64 332),4); (bot(fun____error),4) SEP ((RSP_0 -64 336),4); (bot(fun____error),4) SEP ((RSP_0 -64 340),4); (bot(fun____error),4) SEP ((RSP_0 -64 344),4); (bot(fun____error),4) SEP ((RSP_0 -64 344),8); (bot(fun____error),4) SEP ((RSP_0 -64 352),8); (bot(fun____error),4) SEP ((RSP_0 -64 368),8); (bot(fun____error),4) SEP ((RSP_0 -64 376),8); (bot(fun____error),4) SEP ((RSP_0 -64 384),8)"
 Assertions  ""
 Pre   "RAX = bot(fun____error) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "10000568b: MOV ESI, DWORD PTR [RAX] 2"
 Post  "RAX = bot(fun____error) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000568d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun____error) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "10000568d: LEA RDX, [RIP + 21728] 7"
 Post  "RAX = bot(fun____error) ; RDX = 0x10000ab74 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005694"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun____error) ; RDX = 0x10000ab74 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "100005694: JMP 4294989954 5"
 Post  "RAX = bot(fun____error) ; RDX = 0x10000ab74 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000047ce, blockId == 11 ##
######################################
*)

htriple "ht_100004954"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100004559) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "100004954: LEA RDI, [RBP - 360] 7"
 Post  "RAX = bot(fun_0x100004559) ; RDI = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000495b"
 Separations "((RSP_0 -64 224),8) SEP (bot(fun____error),4); ((RSP_0 -64 224),8) SEP (RSI_0,8); ((RSP_0 -64 224),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 224),8) SEP (0x10000c008,8); ((RSP_0 -64 224),8) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 224),8) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100004559) ; RDI = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "10000495b: MOV QWORD PTR [RDI + 144], R15 7"
 Post  "RAX = bot(fun_0x100004559) ; RDI = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004962"
 Separations "((RSP_0 -64 228),4) SEP (bot(fun____error),4); ((RSP_0 -64 228),4) SEP (RSI_0,8); ((RSP_0 -64 228),4) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 228),4) SEP (0x10000c008,8); ((RSP_0 -64 228),4) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 228),4) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100004559) ; RDI = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "100004962: MOV DWORD PTR [RDI + 140], R14D 7"
 Post  "RAX = bot(fun_0x100004559) ; RDI = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004969"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100004559) ; RDI = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "100004969: ExternalCall fun_0x100005c50 5"
 Post  "RAX = bot(fun_0x100005c50) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 FunctionConstraints "PRESERVES fun_0x100005c50 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 120),8];[(RSP_0 -64 192),4];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 256),8];[(RSP_0 -64 264),1];[(RSP_0 -64 272),8];[(RSP_0 -64 279),1];[(RSP_0 -64 280),1];[(RSP_0 -64 288),8];[(RSP_0 -64 296),8];[(RSP_0 -64 304),4];[(RSP_0 -64 312),8];[(RSP_0 -64 316),4];[(RSP_0 -64 320),4];[(RSP_0 -64 324),4];[(RSP_0 -64 328),4];[(RSP_0 -64 332),4];[(RSP_0 -64 336),4];[(RSP_0 -64 344),8];[(RSP_0 -64 352),8];[(RSP_0 -64 368),8];[(RSP_0 -64 376),8];[(RSP_0 -64 384),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000496e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "10000496e: CMP EAX, 18446744073709551615 3"
 Post  "RAX = bot(fun_0x100005c50) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004971"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "100004971: JE 4294987951 6"
 Post  "RAX = bot(fun_0x100005c50) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000047ce, blockId == 12 ##
######################################
*)

htriple "ht_100004977"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "100004977: XOR ECX, ECX 2"
 Post  "RAX = bot(fun_0x100005c50) ; RCX = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004979"
 Separations "((RSP_0 -64 384),8) SEP (bot(fun____error),4); ((RSP_0 -64 384),8) SEP (RSI_0,8); ((RSP_0 -64 384),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 384),8) SEP (0x10000c008,8); ((RSP_0 -64 384),8) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 384),8) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RCX = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "100004979: MOV QWORD PTR [RBP - 376], RCX 7"
 Post  "RAX = bot(fun_0x100005c50) ; RCX = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004980"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RCX = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = 0"
 Instruction "100004980: LEA RBX, [RIP + 3865] 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RCX = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004987"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RCX = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = 0"
 Instruction "100004987: XOR R15D, R15D 3"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RCX = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000498a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RCX = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = 0"
 Instruction "10000498a: XOR ECX, ECX 2"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RCX = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000498c"
 Separations "((RSP_0 -64 376),8) SEP (bot(fun____error),4); ((RSP_0 -64 376),8) SEP (RSI_0,8); ((RSP_0 -64 376),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 376),8) SEP (0x10000c008,8); ((RSP_0 -64 376),8) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 376),8) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RCX = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = 0"
 Instruction "10000498c: MOV QWORD PTR [RBP - 368], RCX 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RCX = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = 0 ; [(RSP_0 -64 384),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004993"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RCX = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = 0 ; [(RSP_0 -64 384),8] = 0"
 Instruction "100004993: XOR R13D, R13D 3"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RCX = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R14 = b32(RDI_0) ; R13 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = 0 ; [(RSP_0 -64 384),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004996"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RCX = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R14 = b32(RDI_0) ; R13 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = 0 ; [(RSP_0 -64 384),8] = 0"
 Instruction "100004996: XOR R12D, R12D 3"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RCX = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R14 = b32(RDI_0) ; R13 = 0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = 0 ; [(RSP_0 -64 384),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004999"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RCX = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R14 = b32(RDI_0) ; R13 = 0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = 0 ; [(RSP_0 -64 384),8] = 0"
 Instruction "100004999: XOR R14D, R14D 3"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RCX = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R14 = 0 ; R13 = 0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = 0 ; [(RSP_0 -64 384),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000047ce, blockId == 13 ##
######################################
*)

htriple "ht_1000050af"
 Separations "((RSP_0 -64 280),1) SEP (bot(fun____error),4); ((RSP_0 -64 280),1) SEP (RSI_0,8); ((RSP_0 -64 280),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 280),1) SEP (0x10000c008,8); ((RSP_0 -64 280),1) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 280),1) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "1000050af: MOV AL, BYTE PTR [RBP - 272] 6"
 Post  "RAX = overwrite(8,bot(fun_0x100005c50),b8([(RSP_0 -64 280),1]_0)) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000050b5"
 Separations ""
 Assertions  ""
 Pre   "RAX = overwrite(8,bot(fun_0x100005c50),b8([(RSP_0 -64 280),1]_0)) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "1000050b5: XOR R15D, R15D 3"
 Post  "RAX = overwrite(8,bot(fun_0x100005c50),b8([(RSP_0 -64 280),1]_0)) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000050b8"
 Separations ""
 Assertions  ""
 Pre   "RAX = overwrite(8,bot(fun_0x100005c50),b8([(RSP_0 -64 280),1]_0)) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "1000050b8: XOR ECX, ECX 2"
 Post  "RAX = overwrite(8,bot(fun_0x100005c50),b8([(RSP_0 -64 280),1]_0)) ; RCX = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000050ba"
 Separations "((RSP_0 -64 376),8) SEP (bot(fun____error),4); ((RSP_0 -64 376),8) SEP (RSI_0,8); ((RSP_0 -64 376),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 376),8) SEP (0x10000c008,8); ((RSP_0 -64 376),8) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 376),8) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = overwrite(8,bot(fun_0x100005c50),b8([(RSP_0 -64 280),1]_0)) ; RCX = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "1000050ba: MOV QWORD PTR [RBP - 368], RCX 7"
 Post  "RAX = overwrite(8,bot(fun_0x100005c50),b8([(RSP_0 -64 280),1]_0)) ; RCX = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = 0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000050c1"
 Separations ""
 Assertions  ""
 Pre   "RAX = overwrite(8,bot(fun_0x100005c50),b8([(RSP_0 -64 280),1]_0)) ; RCX = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = 0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "1000050c1: XOR R13D, R13D 3"
 Post  "RAX = overwrite(8,bot(fun_0x100005c50),b8([(RSP_0 -64 280),1]_0)) ; RCX = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R14 = b32(RDI_0) ; R13 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = 0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000050c4"
 Separations ""
 Assertions  ""
 Pre   "RAX = overwrite(8,bot(fun_0x100005c50),b8([(RSP_0 -64 280),1]_0)) ; RCX = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R14 = b32(RDI_0) ; R13 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = 0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "1000050c4: XOR R12D, R12D 3"
 Post  "RAX = overwrite(8,bot(fun_0x100005c50),b8([(RSP_0 -64 280),1]_0)) ; RCX = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R14 = b32(RDI_0) ; R13 = 0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = 0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000050c7"
 Separations ""
 Assertions  ""
 Pre   "RAX = overwrite(8,bot(fun_0x100005c50),b8([(RSP_0 -64 280),1]_0)) ; RCX = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R14 = b32(RDI_0) ; R13 = 0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = 0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "1000050c7: XOR R14D, R14D 3"
 Post  "RAX = overwrite(8,bot(fun_0x100005c50),b8([(RSP_0 -64 280),1]_0)) ; RCX = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R14 = 0 ; R13 = 0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 344),8] = 0xffffffff00002800 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = 0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000047ce, blockId == 14 ##
######################################
*)

htriple "ht_1000049a8"
 Separations "((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4) SEP (RSP_0,8); ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4) SEP ([0x10000c008,8]_0,8); ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4) SEP (0x10000c008,8); ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4) SEP ((RSP_0 -64 8),8); ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4) SEP ((RSP_0 -64 16),8); ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4) SEP ((RSP_0 -64 24),8); ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4) SEP ((RSP_0 -64 32),8); ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4) SEP ((RSP_0 -64 40),8); ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4) SEP ((RSP_0 -64 48),8); ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4) SEP ((RSP_0 -64 56),8); ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4) SEP ((RSP_0 -64 64),8); ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4) SEP ((RSP_0 -64 72),8); ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4) SEP ((RSP_0 -64 120),8); ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4) SEP ((RSP_0 -64 192),4); ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4) SEP ((RSP_0 -64 224),8); ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4) SEP ((RSP_0 -64 228),4); ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4) SEP ((RSP_0 -64 232),4); ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4) SEP ((RSP_0 -64 256),8); ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4) SEP ((RSP_0 -64 264),1); ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4) SEP ((RSP_0 -64 272),8); ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4) SEP ((RSP_0 -64 279),1); ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4) SEP ((RSP_0 -64 280),1); ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4) SEP ((RSP_0 -64 288),8); ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4) SEP ((RSP_0 -64 296),8); ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4) SEP ((RSP_0 -64 304),4); ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4) SEP ((RSP_0 -64 312),8); ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4) SEP ((RSP_0 -64 316),4); ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4) SEP ((RSP_0 -64 320),4); ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4) SEP ((RSP_0 -64 324),4); ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4) SEP ((RSP_0 -64 328),4); ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4) SEP ((RSP_0 -64 332),4); ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4) SEP ((RSP_0 -64 336),4); ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4) SEP ((RSP_0 -64 344),8); ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4) SEP ((RSP_0 -64 352),8); ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4) SEP ((RSP_0 -64 368),8); ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4) SEP ((RSP_0 -64 376),8); ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4) SEP ((RSP_0 -64 384),8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RCX = (b32(bot(fun_0x100005c50)) -32 1) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000049a8: MOVSXD RCX, DWORD PTR [RBX + RCX * 4] 4"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000049ac"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000049ac: ADD RCX, RBX 3"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000049af"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000049af: JMP RCX 2"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000047ce, blockId == 15 ##
######################################
*)

htriple "ht_10000565d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000565d: ExternalCall fun_0x100005b8a 5"
 Post  "RAX = bot(fun_0x100005b8a) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 FunctionConstraints "PRESERVES fun_0x100005b8a {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 120),8];[(RSP_0 -64 192),4];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 256),8];[(RSP_0 -64 264),1];[(RSP_0 -64 272),8];[(RSP_0 -64 279),1];[(RSP_0 -64 280),1];[(RSP_0 -64 288),8];[(RSP_0 -64 296),8];[(RSP_0 -64 304),4];[(RSP_0 -64 312),8];[(RSP_0 -64 316),4];[(RSP_0 -64 320),4];[(RSP_0 -64 324),4];[(RSP_0 -64 328),4];[(RSP_0 -64 332),4];[(RSP_0 -64 336),4];[(RSP_0 -64 344),8];[(RSP_0 -64 352),8];[(RSP_0 -64 368),8];[(RSP_0 -64 376),8];[(RSP_0 -64 384),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000047ce, blockId == 16 ##
######################################
*)

htriple "ht_1000049b1"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000049b1: TEST R14B, R14B 3"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000049b4"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000049b4: JNE 4294989465 6"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000047ce, blockId == 17 ##
######################################
*)

htriple "ht_1000049e5"
 Separations "((RSP_0 -64 331),1) SEP (bot(fun____error),4); ((RSP_0 -64 331),1) SEP (RSI_0,8); ((RSP_0 -64 331),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 331),1) SEP (0x10000c008,8); ((RSP_0 -64 331),1) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 331),1) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000049e5: OR BYTE PTR [RBP - 323], 64 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000049ec"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000049ec: JMP 4294987606 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000047ce, blockId == 18 ##
######################################
*)

htriple "ht_1000049f1"
 Separations "((RSP_0 -64 216),8) SEP (bot(fun____error),4); ((RSP_0 -64 216),8) SEP ([0x10000c008,8]_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000049f1: MOV RAX, QWORD PTR [RBP - 208] 7"
 Post  "RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000049f8"
 Separations "((RSP_0 -64 352),8) SEP (bot(fun____error),4); ((RSP_0 -64 352),8) SEP (RSI_0,8); ((RSP_0 -64 352),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 352),8) SEP (0x10000c008,8); ((RSP_0 -64 352),8) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 352),8) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000049f8: MOV QWORD PTR [RBP - 344], RAX 7"
 Post  "RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000049ff"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000049ff: JMP 4294987606 5"
 Post  "RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000047ce, blockId == 19 ##
######################################
*)

htriple "ht_100004a04"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004a04: TEST R14B, R14B 3"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004a07"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004a07: JNE 4294989490 6"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000047ce, blockId == 20 ##
######################################
*)

htriple "ht_100004a1c"
 Separations "((RSP_0 -64 280),1) SEP (bot(fun____error),4); ((RSP_0 -64 280),1) SEP (RSI_0,8); ((RSP_0 -64 280),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 280),1) SEP (0x10000c008,8); ((RSP_0 -64 280),1) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 280),1) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004a1c: MOVSX R8D, BYTE PTR [RBP - 272] 8"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004a24"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004a24: TEST R8D, R8D 3"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004a27"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004a27: JE 4294986291 2"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000047ce, blockId == 21 ##
######################################
*)

htriple "ht_100004a3f"
 Separations "((RSP_0 -64 216),8) SEP (bot(fun____error),4); ((RSP_0 -64 216),8) SEP ([0x10000c008,8]_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004a3f: MOV RDI, QWORD PTR [RBP - 208] 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004a46"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004a46: ExternalCall fun__atoi 5"
 Post  "RAX = bot(fun__atoi) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 FunctionConstraints "PRESERVES fun__atoi {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 120),8];[(RSP_0 -64 192),4];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 256),8];[(RSP_0 -64 264),1];[(RSP_0 -64 272),8];[(RSP_0 -64 279),1];[(RSP_0 -64 280),1];[(RSP_0 -64 288),8];[(RSP_0 -64 296),8];[(RSP_0 -64 304),4];[(RSP_0 -64 312),8];[(RSP_0 -64 316),4];[(RSP_0 -64 320),4];[(RSP_0 -64 324),4];[(RSP_0 -64 328),4];[(RSP_0 -64 332),4];[(RSP_0 -64 336),4];[(RSP_0 -64 344),8];[(RSP_0 -64 352),8];[(RSP_0 -64 368),8];[(RSP_0 -64 376),8];[(RSP_0 -64 384),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004a4b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__atoi) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004a4b: LEA ECX, [RAX - 1] 3"
 Post  "RAX = bot(fun__atoi) ; RBX = 0x1000058a0 ; RCX = (b32(bot(fun__atoi)) -32 1) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004a4e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__atoi) ; RBX = 0x1000058a0 ; RCX = (b32(bot(fun__atoi)) -32 1) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004a4e: CMP ECX, 8192 6"
 Post  "RAX = bot(fun__atoi) ; RBX = 0x1000058a0 ; RCX = (b32(bot(fun__atoi)) -32 1) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004a54"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__atoi) ; RBX = 0x1000058a0 ; RCX = (b32(bot(fun__atoi)) -32 1) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004a54: JAE 4294989548 6"
 Post  "RAX = bot(fun__atoi) ; RBX = 0x1000058a0 ; RCX = (b32(bot(fun__atoi)) -32 1) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000047ce, blockId == 22 ##
######################################
*)

htriple "ht_100004a6e"
 Separations "((RSP_0 -64 216),8) SEP (bot(fun____error),4); ((RSP_0 -64 216),8) SEP ([0x10000c008,8]_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004a6e: MOV RSI, QWORD PTR [RBP - 208] 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004a75"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004a75: CMP BYTE PTR [RSI], 0 3"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004a78"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004a78: JE 4294989560 6"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000047ce, blockId == 23 ##
######################################
*)

htriple "ht_100004a8f"
 Separations "((RSP_0 -64 328),1) SEP (bot(fun____error),4); ((RSP_0 -64 328),1) SEP (RSI_0,8); ((RSP_0 -64 328),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 328),1) SEP (0x10000c008,8); ((RSP_0 -64 328),1) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 328),1) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4); ((RSP_0 -64 328),4) SEP (bot(fun____error),4); ((RSP_0 -64 328),4) SEP ([0x10000c008,8]_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004a8f: OR BYTE PTR [RBP - 320], 8 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004a96"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004a96: JMP 4294987606 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000047ce, blockId == 24 ##
######################################
*)

htriple "ht_100004a9b"
 Separations "((RSP_0 -64 280),1) SEP (bot(fun____error),4); ((RSP_0 -64 280),1) SEP (RSI_0,8); ((RSP_0 -64 280),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 280),1) SEP (0x10000c008,8); ((RSP_0 -64 280),1) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 280),1) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004a9b: MOVSX R8D, BYTE PTR [RBP - 272] 8"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004aa3"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004aa3: TEST R8D, R8D 3"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004aa6"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004aa6: JE 4294986418 2"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000047ce, blockId == 25 ##
######################################
*)

htriple "ht_100004ab9"
 Separations "((RSP_0 -64 336),4) SEP (bot(fun____error),4); ((RSP_0 -64 336),4) SEP (RSI_0,8); ((RSP_0 -64 336),4) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 336),4) SEP (0x10000c008,8); ((RSP_0 -64 336),4) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 336),4) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004ab9: INC DWORD PTR [RBP - 328] 6"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004abf"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004abf: JMP 4294987606 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000047ce, blockId == 26 ##
######################################
*)

htriple "ht_100004ac4"
 Separations "((RSP_0 -64 328),1) SEP (bot(fun____error),4); ((RSP_0 -64 328),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 328),4) SEP (bot(fun____error),4); ((RSP_0 -64 328),4) SEP (RSI_0,8); ((RSP_0 -64 328),4) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 328),4) SEP (0x10000c008,8); ((RSP_0 -64 328),4) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 328),4) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004ac4: OR DWORD PTR [RBP - 320], 8418 10"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004ace"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004ace: JMP 4294987606 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000047ce, blockId == 27 ##
######################################
*)

htriple "ht_100004ad3"
 Separations "((RSP_0 -64 331),1) SEP (bot(fun____error),4); ((RSP_0 -64 331),1) SEP (RSI_0,8); ((RSP_0 -64 331),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 331),1) SEP (0x10000c008,8); ((RSP_0 -64 331),1) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 331),1) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004ad3: OR BYTE PTR [RBP - 323], 16 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004ada"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004ada: JMP 4294987606 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000047ce, blockId == 28 ##
######################################
*)

htriple "ht_100004adf"
 Separations "((RSP_0 -64 328),1) SEP (bot(fun____error),4); ((RSP_0 -64 328),1) SEP (RSI_0,8); ((RSP_0 -64 328),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 328),1) SEP (0x10000c008,8); ((RSP_0 -64 328),1) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 328),1) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4); ((RSP_0 -64 328),4) SEP (bot(fun____error),4); ((RSP_0 -64 328),4) SEP ([0x10000c008,8]_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004adf: AND BYTE PTR [RBP - 320], 127 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004ae6"
 Separations "((RSP_0 -64 324),1) SEP (bot(fun____error),4); ((RSP_0 -64 324),1) SEP (RSI_0,8); ((RSP_0 -64 324),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 324),1) SEP (0x10000c008,8); ((RSP_0 -64 324),1) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 324),1) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4); ((RSP_0 -64 324),4) SEP ([0x10000c008,8]_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004ae6: OR BYTE PTR [RBP - 316], 16 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004aed"
 Separations "((RSP_0 -64 331),1) SEP (bot(fun____error),4); ((RSP_0 -64 331),1) SEP (RSI_0,8); ((RSP_0 -64 331),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 331),1) SEP (0x10000c008,8); ((RSP_0 -64 331),1) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 331),1) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004aed: OR BYTE PTR [RBP - 323], 128 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004af4"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004af4: JMP 4294987606 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000047ce, blockId == 29 ##
######################################
*)

htriple "ht_100004af9"
 Separations "((RSP_0 -64 279),1) SEP (bot(fun____error),4); ((RSP_0 -64 279),1) SEP (RSI_0,8); ((RSP_0 -64 279),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 279),1) SEP (0x10000c008,8); ((RSP_0 -64 279),1) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 279),1) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004af9: MOV BYTE PTR [RBP - 271], 76 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 279),1] = 76"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004b00"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 279),1] = 76"
 Instruction "100004b00: MOV AL, 1 2"
 Post  "RAX = overwrite(8,bot(fun_0x100005c50),1) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 279),1] = 76"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004b02"
 Separations "((RSP_0 -64 384),8) SEP (bot(fun____error),4); ((RSP_0 -64 384),8) SEP (RSI_0,8); ((RSP_0 -64 384),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 384),8) SEP (0x10000c008,8); ((RSP_0 -64 384),8) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 384),8) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = overwrite(8,bot(fun_0x100005c50),1) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 279),1] = 76"
 Instruction "100004b02: MOV QWORD PTR [RBP - 376], RAX 7"
 Post  "RAX = overwrite(8,bot(fun_0x100005c50),1) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 279),1] = 76 ; [(RSP_0 -64 384),8] = overwrite(8,bot(fun_0x100005c50),1)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004b09"
 Separations ""
 Assertions  ""
 Pre   "RAX = overwrite(8,bot(fun_0x100005c50),1) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 279),1] = 76 ; [(RSP_0 -64 384),8] = overwrite(8,bot(fun_0x100005c50),1)"
 Instruction "100004b09: JMP 4294987606 5"
 Post  "RAX = overwrite(8,bot(fun_0x100005c50),1) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 279),1] = 76 ; [(RSP_0 -64 384),8] = overwrite(8,bot(fun_0x100005c50),1)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000047ce, blockId == 30 ##
######################################
*)

htriple "ht_100004b0e"
 Separations "((RSP_0 -64 328),1) SEP (bot(fun____error),4); ((RSP_0 -64 328),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 328),4) SEP (bot(fun____error),4); ((RSP_0 -64 328),4) SEP (RSI_0,8); ((RSP_0 -64 328),4) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 328),4) SEP (0x10000c008,8); ((RSP_0 -64 328),4) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 328),4) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004b0e: AND DWORD PTR [RBP - 320], 4294958877 10"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004b18"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004b18: JMP 4294987606 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000047ce, blockId == 31 ##
######################################
*)

htriple "ht_100004b1d"
 Separations "((RSP_0 -64 280),1) SEP (bot(fun____error),4); ((RSP_0 -64 280),1) SEP (RSI_0,8); ((RSP_0 -64 280),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 280),1) SEP (0x10000c008,8); ((RSP_0 -64 280),1) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 280),1) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004b1d: MOVSX R8D, BYTE PTR [RBP - 272] 8"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004b25"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004b25: TEST R8D, R8D 3"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004b28"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004b28: JE 4294986548 2"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000047ce, blockId == 32 ##
######################################
*)

htriple "ht_100004b40"
 Separations "((RSP_0 -64 256),8) SEP (bot(fun____error),4); ((RSP_0 -64 256),8) SEP (RSI_0,8); ((RSP_0 -64 256),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 256),8) SEP (0x10000c008,8); ((RSP_0 -64 256),8) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 256),8) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004b40: MOV RDI, QWORD PTR [RBP - 248] 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDI = bot(fun_0x100004559) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004b47"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDI = bot(fun_0x100004559) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004b47: LEA RSI, [RIP + 24884] 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDI = bot(fun_0x100004559) ; RSI = 0x10000ac82 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004b4e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDI = bot(fun_0x100004559) ; RSI = 0x10000ac82 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004b4e: JMP 4294987174 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDI = bot(fun_0x100004559) ; RSI = 0x10000ac82 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000047ce, blockId == 33 ##
######################################
*)

htriple "ht_100004b53"
 Separations "((RSP_0 -64 216),8) SEP (bot(fun____error),4); ((RSP_0 -64 216),8) SEP ([0x10000c008,8]_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004b53: MOV RDX, QWORD PTR [RBP - 208] 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004b5a"
 Separations "((RSP_0 -64 120),8) SEP (bot(fun____error),4); ((RSP_0 -64 120),8) SEP (RSI_0,8); ((RSP_0 -64 120),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 120),8) SEP (0x10000c008,8); ((RSP_0 -64 120),8) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 120),8) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004b5a: MOV RDI, QWORD PTR [RBP - 112] 4"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDI = bot(fun__archive_match_new) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004b5e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDI = bot(fun__archive_match_new) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004b5e: MOV ESI, 513 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDI = bot(fun__archive_match_new) ; RSI = 513 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004b63"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDI = bot(fun__archive_match_new) ; RSI = 513 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004b63: JMP 4294987481 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDI = bot(fun__archive_match_new) ; RSI = 513 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000047ce, blockId == 34 ##
######################################
*)

htriple "ht_100004b68"
 Separations "((RSP_0 -64 216),8) SEP (bot(fun____error),4); ((RSP_0 -64 216),8) SEP ([0x10000c008,8]_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004b68: MOV RDX, QWORD PTR [RBP - 208] 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004b6f"
 Separations "((RSP_0 -64 120),8) SEP (bot(fun____error),4); ((RSP_0 -64 120),8) SEP (RSI_0,8); ((RSP_0 -64 120),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 120),8) SEP (0x10000c008,8); ((RSP_0 -64 120),8) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 120),8) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004b6f: MOV RDI, QWORD PTR [RBP - 112] 4"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDI = bot(fun__archive_match_new) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004b73"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDI = bot(fun__archive_match_new) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004b73: MOV ESI, 257 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDI = bot(fun__archive_match_new) ; RSI = 257 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004b78"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDI = bot(fun__archive_match_new) ; RSI = 257 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004b78: JMP 4294987593 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDI = bot(fun__archive_match_new) ; RSI = 257 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000047ce, blockId == 35 ##
######################################
*)

htriple "ht_100004b7d"
 Separations "((RSP_0 -64 216),8) SEP (bot(fun____error),4); ((RSP_0 -64 216),8) SEP ([0x10000c008,8]_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004b7d: MOV RDI, QWORD PTR [RBP - 208] 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004b84"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004b84: ExternalCall fun__atoi 5"
 Post  "RAX = bot(fun__atoi) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 FunctionConstraints "PRESERVES fun__atoi {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 120),8];[(RSP_0 -64 192),4];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 256),8];[(RSP_0 -64 264),1];[(RSP_0 -64 272),8];[(RSP_0 -64 279),1];[(RSP_0 -64 280),1];[(RSP_0 -64 288),8];[(RSP_0 -64 296),8];[(RSP_0 -64 304),4];[(RSP_0 -64 312),8];[(RSP_0 -64 316),4];[(RSP_0 -64 320),4];[(RSP_0 -64 324),4];[(RSP_0 -64 328),4];[(RSP_0 -64 332),4];[(RSP_0 -64 336),4];[(RSP_0 -64 344),8];[(RSP_0 -64 352),8];[(RSP_0 -64 368),8];[(RSP_0 -64 376),8];[(RSP_0 -64 384),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004b89"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__atoi) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004b89: TEST EAX, EAX 2"
 Post  "RAX = bot(fun__atoi) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004b8b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__atoi) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004b8b: JS 4294989626 6"
 Post  "RAX = bot(fun__atoi) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000047ce, blockId == 36 ##
######################################
*)

htriple "ht_100004b9c"
 Separations "((RSP_0 -64 279),1) SEP (bot(fun____error),4); ((RSP_0 -64 279),1) SEP (RSI_0,8); ((RSP_0 -64 279),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 279),1) SEP (0x10000c008,8); ((RSP_0 -64 279),1) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 279),1) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004b9c: MOV BYTE PTR [RBP - 271], 76 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 279),1] = 76"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004ba3"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 279),1] = 76"
 Instruction "100004ba3: JMP 4294987606 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 279),1] = 76"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000047ce, blockId == 37 ##
######################################
*)

htriple "ht_100004ba8"
 Separations "((RSP_0 -64 332),1) SEP (bot(fun____error),4); ((RSP_0 -64 332),1) SEP (RSI_0,8); ((RSP_0 -64 332),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 332),1) SEP (0x10000c008,8); ((RSP_0 -64 332),1) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 332),1) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4); ((RSP_0 -64 332),4) SEP (bot(fun____error),4); ((RSP_0 -64 332),4) SEP ([0x10000c008,8]_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004ba8: OR BYTE PTR [RBP - 324], 32 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004baf"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004baf: JMP 4294987606 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000047ce, blockId == 38 ##
######################################
*)

htriple "ht_100004bb4"
 Separations "((RSP_0 -64 216),8) SEP (bot(fun____error),4); ((RSP_0 -64 216),8) SEP ([0x10000c008,8]_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004bb4: MOV RDX, QWORD PTR [RBP - 208] 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004bbb"
 Separations "((RSP_0 -64 120),8) SEP (bot(fun____error),4); ((RSP_0 -64 120),8) SEP (RSI_0,8); ((RSP_0 -64 120),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 120),8) SEP (0x10000c008,8); ((RSP_0 -64 120),8) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 120),8) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004bbb: MOV RDI, QWORD PTR [RBP - 112] 4"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDI = bot(fun__archive_match_new) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004bbf"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDI = bot(fun__archive_match_new) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004bbf: MOV ESI, 258 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDI = bot(fun__archive_match_new) ; RSI = 258 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004bc4"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDI = bot(fun__archive_match_new) ; RSI = 258 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004bc4: JMP 4294987481 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDI = bot(fun__archive_match_new) ; RSI = 258 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000047ce, blockId == 39 ##
######################################
*)

htriple "ht_100004bc9"
 Separations "((RSP_0 -64 280),1) SEP (bot(fun____error),4); ((RSP_0 -64 280),1) SEP (RSI_0,8); ((RSP_0 -64 280),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 280),1) SEP (0x10000c008,8); ((RSP_0 -64 280),1) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 280),1) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004bc9: MOVSX R8D, BYTE PTR [RBP - 272] 8"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004bd1"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004bd1: TEST R8D, R8D 3"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004bd4"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004bd4: JE 4294986720 2"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000047ce, blockId == 40 ##
######################################
*)

htriple "ht_100004bec"
 Separations "((RSP_0 -64 324),1) SEP (bot(fun____error),4); ((RSP_0 -64 324),1) SEP (RSI_0,8); ((RSP_0 -64 324),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 324),1) SEP (0x10000c008,8); ((RSP_0 -64 324),1) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 324),1) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4); ((RSP_0 -64 324),4) SEP ([0x10000c008,8]_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004bec: AND BYTE PTR [RBP - 316], 251 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004bf3"
 Separations "((RSP_0 -64 327),1) SEP (bot(fun____error),4); ((RSP_0 -64 327),1) SEP (RSI_0,8); ((RSP_0 -64 327),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 327),1) SEP (0x10000c008,8); ((RSP_0 -64 327),1) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 327),1) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004bf3: AND BYTE PTR [RBP - 319], 223 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004bfa"
 Separations "((RSP_0 -64 330),1) SEP (bot(fun____error),4); ((RSP_0 -64 330),1) SEP (RSI_0,8); ((RSP_0 -64 330),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 330),1) SEP (0x10000c008,8); ((RSP_0 -64 330),1) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 330),1) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004bfa: OR BYTE PTR [RBP - 322], 32 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004c01"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004c01: JMP 4294987606 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000047ce, blockId == 41 ##
######################################
*)

htriple "ht_100004c06"
 Separations "((RSP_0 -64 216),8) SEP (bot(fun____error),4); ((RSP_0 -64 216),8) SEP ([0x10000c008,8]_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004c06: MOV RAX, QWORD PTR [RBP - 208] 7"
 Post  "RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004c0d"
 Separations "((RSP_0 -64 296),8) SEP (bot(fun____error),4); ((RSP_0 -64 296),8) SEP (RSI_0,8); ((RSP_0 -64 296),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 296),8) SEP (0x10000c008,8); ((RSP_0 -64 296),8) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 296),8) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004c0d: MOV QWORD PTR [RBP - 288], RAX 7"
 Post  "RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004c14"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004c14: JMP 4294987606 5"
 Post  "RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000047ce, blockId == 42 ##
######################################
*)

htriple "ht_100004c19"
 Separations "((RSP_0 -64 327),1) SEP (bot(fun____error),4); ((RSP_0 -64 327),1) SEP (RSI_0,8); ((RSP_0 -64 327),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 327),1) SEP (0x10000c008,8); ((RSP_0 -64 327),1) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 327),1) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004c19: AND BYTE PTR [RBP - 319], 252 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004c20"
 Separations "((RSP_0 -64 332),1) SEP (bot(fun____error),4); ((RSP_0 -64 332),1) SEP (RSI_0,8); ((RSP_0 -64 332),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 332),1) SEP (0x10000c008,8); ((RSP_0 -64 332),1) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 332),1) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4); ((RSP_0 -64 332),4) SEP (bot(fun____error),4); ((RSP_0 -64 332),4) SEP ([0x10000c008,8]_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004c20: OR BYTE PTR [RBP - 324], 2 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004c27"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004c27: JMP 4294987606 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000047ce, blockId == 43 ##
######################################
*)

htriple "ht_100004c2c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004c2c: TEST R14B, R14B 3"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004c2f"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004c2f: JNE 4294989665 6"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000047ce, blockId == 44 ##
######################################
*)

htriple "ht_100004c44"
 Separations "((RSP_0 -64 328),1) SEP (bot(fun____error),4); ((RSP_0 -64 328),1) SEP (RSI_0,8); ((RSP_0 -64 328),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 328),1) SEP (0x10000c008,8); ((RSP_0 -64 328),1) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 328),1) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4); ((RSP_0 -64 328),4) SEP (bot(fun____error),4); ((RSP_0 -64 328),4) SEP ([0x10000c008,8]_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004c44: AND BYTE PTR [RBP - 320], 191 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004c4b"
 Separations "((RSP_0 -64 324),1) SEP (bot(fun____error),4); ((RSP_0 -64 324),1) SEP (RSI_0,8); ((RSP_0 -64 324),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 324),1) SEP (0x10000c008,8); ((RSP_0 -64 324),1) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 324),1) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4); ((RSP_0 -64 324),4) SEP ([0x10000c008,8]_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004c4b: OR BYTE PTR [RBP - 316], 64 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004c52"
 Separations "((RSP_0 -64 330),1) SEP (bot(fun____error),4); ((RSP_0 -64 330),1) SEP (RSI_0,8); ((RSP_0 -64 330),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 330),1) SEP (0x10000c008,8); ((RSP_0 -64 330),1) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 330),1) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004c52: OR BYTE PTR [RBP - 322], 8 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004c59"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004c59: JMP 4294987606 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000047ce, blockId == 45 ##
######################################
*)

htriple "ht_100004c5e"
 Separations "((RSP_0 -64 328),1) SEP (bot(fun____error),4); ((RSP_0 -64 328),1) SEP (RSI_0,8); ((RSP_0 -64 328),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 328),1) SEP (0x10000c008,8); ((RSP_0 -64 328),1) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 328),1) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4); ((RSP_0 -64 328),4) SEP (bot(fun____error),4); ((RSP_0 -64 328),4) SEP ([0x10000c008,8]_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004c5e: AND BYTE PTR [RBP - 320], 254 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004c65"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004c65: JMP 4294987606 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000047ce, blockId == 46 ##
######################################
*)

htriple "ht_100004c6a"
 Separations "((RSP_0 -64 332),1) SEP (bot(fun____error),4); ((RSP_0 -64 332),1) SEP (RSI_0,8); ((RSP_0 -64 332),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 332),1) SEP (0x10000c008,8); ((RSP_0 -64 332),1) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 332),1) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4); ((RSP_0 -64 332),4) SEP (bot(fun____error),4); ((RSP_0 -64 332),4) SEP ([0x10000c008,8]_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004c6a: OR BYTE PTR [RBP - 324], 16 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004c71"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004c71: JMP 4294987606 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000047ce, blockId == 47 ##
######################################
*)

htriple "ht_100004c76"
 Separations "((RSP_0 -64 216),8) SEP (bot(fun____error),4); ((RSP_0 -64 216),8) SEP ([0x10000c008,8]_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004c76: MOV RSI, QWORD PTR [RBP - 208] 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004c7d"
 Separations "((RSP_0 -64 120),8) SEP (bot(fun____error),4); ((RSP_0 -64 120),8) SEP (RSI_0,8); ((RSP_0 -64 120),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 120),8) SEP (0x10000c008,8); ((RSP_0 -64 120),8) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 120),8) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004c7d: MOV RDI, QWORD PTR [RBP - 112] 4"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDI = bot(fun__archive_match_new) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004c81"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDI = bot(fun__archive_match_new) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004c81: XOR EDX, EDX 2"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDX = 0 ; RDI = bot(fun__archive_match_new) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004c83"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDX = 0 ; RDI = bot(fun__archive_match_new) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004c83: ExternalCall fun__archive_match_exclude_pattern_from_file 5"
 Post  "RAX = bot(fun__archive_match_exclude_pattern_from_file) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 FunctionConstraints "PRESERVES fun__archive_match_exclude_pattern_from_file {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 120),8];[(RSP_0 -64 192),4];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 256),8];[(RSP_0 -64 264),1];[(RSP_0 -64 272),8];[(RSP_0 -64 279),1];[(RSP_0 -64 280),1];[(RSP_0 -64 288),8];[(RSP_0 -64 296),8];[(RSP_0 -64 304),4];[(RSP_0 -64 312),8];[(RSP_0 -64 316),4];[(RSP_0 -64 320),4];[(RSP_0 -64 324),4];[(RSP_0 -64 328),4];[(RSP_0 -64 332),4];[(RSP_0 -64 336),4];[(RSP_0 -64 344),8];[(RSP_0 -64 352),8];[(RSP_0 -64 368),8];[(RSP_0 -64 376),8];[(RSP_0 -64 384),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004c88"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_match_exclude_pattern_from_file) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004c88: JMP 4294987598 5"
 Post  "RAX = bot(fun__archive_match_exclude_pattern_from_file) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000047ce, blockId == 48 ##
######################################
*)

htriple "ht_100004c8d"
 Separations "((RSP_0 -64 332),1) SEP (bot(fun____error),4); ((RSP_0 -64 332),1) SEP (RSI_0,8); ((RSP_0 -64 332),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 332),1) SEP (0x10000c008,8); ((RSP_0 -64 332),1) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 332),1) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4); ((RSP_0 -64 332),4) SEP (bot(fun____error),4); ((RSP_0 -64 332),4) SEP ([0x10000c008,8]_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004c8d: OR BYTE PTR [RBP - 324], 4 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004c94"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004c94: JMP 4294987606 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000047ce, blockId == 49 ##
######################################
*)

htriple "ht_100004c99"
 Separations "((RSP_0 -64 216),8) SEP (bot(fun____error),4); ((RSP_0 -64 216),8) SEP ([0x10000c008,8]_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004c99: MOV RDI, QWORD PTR [RBP - 208] 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004ca0"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004ca0: ExternalCall fun__atoi 5"
 Post  "RAX = bot(fun__atoi) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 FunctionConstraints "PRESERVES fun__atoi {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 120),8];[(RSP_0 -64 192),4];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 256),8];[(RSP_0 -64 264),1];[(RSP_0 -64 272),8];[(RSP_0 -64 279),1];[(RSP_0 -64 280),1];[(RSP_0 -64 288),8];[(RSP_0 -64 296),8];[(RSP_0 -64 304),4];[(RSP_0 -64 312),8];[(RSP_0 -64 316),4];[(RSP_0 -64 320),4];[(RSP_0 -64 324),4];[(RSP_0 -64 328),4];[(RSP_0 -64 332),4];[(RSP_0 -64 336),4];[(RSP_0 -64 344),8];[(RSP_0 -64 352),8];[(RSP_0 -64 368),8];[(RSP_0 -64 376),8];[(RSP_0 -64 384),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004ca5"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__atoi) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004ca5: TEST EAX, EAX 2"
 Post  "RAX = bot(fun__atoi) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004ca7"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__atoi) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004ca7: JS 4294989696 6"
 Post  "RAX = bot(fun__atoi) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000047ce, blockId == 50 ##
######################################
*)

htriple "ht_100004cb8"
 Separations "((RSP_0 -64 326),1) SEP (bot(fun____error),4); ((RSP_0 -64 326),1) SEP (RSI_0,8); ((RSP_0 -64 326),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 326),1) SEP (0x10000c008,8); ((RSP_0 -64 326),1) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 326),1) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004cb8: OR BYTE PTR [RBP - 318], 2 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004cbf"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004cbf: JMP 4294987606 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000047ce, blockId == 51 ##
######################################
*)

htriple "ht_100004cc4"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004cc4: TEST R14B, R14B 3"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004cc7"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004cc7: JNE 4294989708 6"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000047ce, blockId == 52 ##
######################################
*)

htriple "ht_100004cdc"
 Separations "((RSP_0 -64 324),1) SEP (bot(fun____error),4); ((RSP_0 -64 324),1) SEP (RSI_0,8); ((RSP_0 -64 324),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 324),1) SEP (0x10000c008,8); ((RSP_0 -64 324),1) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 324),1) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4); ((RSP_0 -64 324),4) SEP ([0x10000c008,8]_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004cdc: OR BYTE PTR [RBP - 316], 8 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004ce3"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004ce3: JMP 4294987606 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000047ce, blockId == 53 ##
######################################
*)

htriple "ht_100004ce8"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004ce8: TEST R12B, R12B 3"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004ceb"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004ceb: JNE 4294989858 6"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000047ce, blockId == 54 ##
######################################
*)

htriple "ht_100004d07"
 Separations "((RSP_0 -64 324),1) SEP (bot(fun____error),4); ((RSP_0 -64 324),1) SEP (RSI_0,8); ((RSP_0 -64 324),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 324),1) SEP (0x10000c008,8); ((RSP_0 -64 324),1) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 324),1) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4); ((RSP_0 -64 324),4) SEP ([0x10000c008,8]_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004d07: OR BYTE PTR [RBP - 316], 4 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004d0e"
 Separations "((RSP_0 -64 327),1) SEP (bot(fun____error),4); ((RSP_0 -64 327),1) SEP (RSI_0,8); ((RSP_0 -64 327),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 327),1) SEP (0x10000c008,8); ((RSP_0 -64 327),1) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 327),1) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004d0e: OR BYTE PTR [RBP - 319], 32 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004d15"
 Separations "((RSP_0 -64 330),1) SEP (bot(fun____error),4); ((RSP_0 -64 330),1) SEP (RSI_0,8); ((RSP_0 -64 330),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 330),1) SEP (0x10000c008,8); ((RSP_0 -64 330),1) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 330),1) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004d15: OR BYTE PTR [RBP - 322], 64 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004d1c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004d1c: JMP 4294987606 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000047ce, blockId == 55 ##
######################################
*)

htriple "ht_100004d21"
 Separations "((RSP_0 -64 327),1) SEP (bot(fun____error),4); ((RSP_0 -64 327),1) SEP (RSI_0,8); ((RSP_0 -64 327),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 327),1) SEP (0x10000c008,8); ((RSP_0 -64 327),1) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 327),1) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004d21: OR BYTE PTR [RBP - 319], 16 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004d28"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004d28: JMP 4294987606 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000047ce, blockId == 56 ##
######################################
*)

htriple "ht_100004d2d"
 Separations "((RSP_0 -64 328),1) SEP (bot(fun____error),4); ((RSP_0 -64 328),1) SEP (RSI_0,8); ((RSP_0 -64 328),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 328),1) SEP (0x10000c008,8); ((RSP_0 -64 328),1) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 328),1) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4); ((RSP_0 -64 328),4) SEP (bot(fun____error),4); ((RSP_0 -64 328),4) SEP ([0x10000c008,8]_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004d2d: OR BYTE PTR [RBP - 320], 16 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004d34"
 Separations "((RSP_0 -64 331),1) SEP (bot(fun____error),4); ((RSP_0 -64 331),1) SEP (RSI_0,8); ((RSP_0 -64 331),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 331),1) SEP (0x10000c008,8); ((RSP_0 -64 331),1) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 331),1) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004d34: OR BYTE PTR [RBP - 323], 32 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004d3b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004d3b: JMP 4294987606 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000047ce, blockId == 57 ##
######################################
*)

htriple "ht_100004d40"
 Separations "((RSP_0 -64 332),1) SEP (bot(fun____error),4); ((RSP_0 -64 332),1) SEP (RSI_0,8); ((RSP_0 -64 332),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 332),1) SEP (0x10000c008,8); ((RSP_0 -64 332),1) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 332),1) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4); ((RSP_0 -64 332),4) SEP (bot(fun____error),4); ((RSP_0 -64 332),4) SEP ([0x10000c008,8]_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004d40: OR BYTE PTR [RBP - 324], 1 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004d47"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004d47: JMP 4294987606 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000047ce, blockId == 58 ##
######################################
*)

htriple "ht_100004d4c"
 Separations "((RSP_0 -64 332),1) SEP (bot(fun____error),4); ((RSP_0 -64 332),1) SEP (RSI_0,8); ((RSP_0 -64 332),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 332),1) SEP (0x10000c008,8); ((RSP_0 -64 332),1) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 332),1) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4); ((RSP_0 -64 332),4) SEP (bot(fun____error),4); ((RSP_0 -64 332),4) SEP ([0x10000c008,8]_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004d4c: OR BYTE PTR [RBP - 324], 8 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004d53"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004d53: JMP 4294987606 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000047ce, blockId == 59 ##
######################################
*)

htriple "ht_100004d58"
 Separations "((RSP_0 -64 327),1) SEP (bot(fun____error),4); ((RSP_0 -64 327),1) SEP (RSI_0,8); ((RSP_0 -64 327),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 327),1) SEP (0x10000c008,8); ((RSP_0 -64 327),1) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 327),1) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004d58: OR BYTE PTR [RBP - 319], 8 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004d5f"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004d5f: JMP 4294987606 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000047ce, blockId == 60 ##
######################################
*)

htriple "ht_100004d64"
 Separations "((RSP_0 -64 328),1) SEP (bot(fun____error),4); ((RSP_0 -64 328),1) SEP (RSI_0,8); ((RSP_0 -64 328),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 328),1) SEP (0x10000c008,8); ((RSP_0 -64 328),1) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 328),1) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4); ((RSP_0 -64 328),4) SEP (bot(fun____error),4); ((RSP_0 -64 328),4) SEP ([0x10000c008,8]_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004d64: OR BYTE PTR [RBP - 320], 32 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004d6b"
 Separations "((RSP_0 -64 324),1) SEP (bot(fun____error),4); ((RSP_0 -64 324),1) SEP (RSI_0,8); ((RSP_0 -64 324),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 324),1) SEP (0x10000c008,8); ((RSP_0 -64 324),1) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 324),1) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4); ((RSP_0 -64 324),4) SEP ([0x10000c008,8]_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004d6b: AND BYTE PTR [RBP - 316], 223 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004d72"
 Separations "((RSP_0 -64 330),1) SEP (bot(fun____error),4); ((RSP_0 -64 330),1) SEP (RSI_0,8); ((RSP_0 -64 330),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 330),1) SEP (0x10000c008,8); ((RSP_0 -64 330),1) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 330),1) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004d72: OR BYTE PTR [RBP - 322], 4 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004d79"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004d79: JMP 4294987606 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000047ce, blockId == 61 ##
######################################
*)

htriple "ht_100004d7e"
 Separations "((RSP_0 -64 328),1) SEP (bot(fun____error),4); ((RSP_0 -64 328),1) SEP (RSI_0,8); ((RSP_0 -64 328),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 328),1) SEP (0x10000c008,8); ((RSP_0 -64 328),1) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 328),1) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4); ((RSP_0 -64 328),4) SEP (bot(fun____error),4); ((RSP_0 -64 328),4) SEP ([0x10000c008,8]_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004d7e: OR BYTE PTR [RBP - 320], 64 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004d85"
 Separations "((RSP_0 -64 324),1) SEP (bot(fun____error),4); ((RSP_0 -64 324),1) SEP (RSI_0,8); ((RSP_0 -64 324),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 324),1) SEP (0x10000c008,8); ((RSP_0 -64 324),1) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 324),1) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4); ((RSP_0 -64 324),4) SEP ([0x10000c008,8]_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004d85: AND BYTE PTR [RBP - 316], 191 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004d8c"
 Separations "((RSP_0 -64 330),1) SEP (bot(fun____error),4); ((RSP_0 -64 330),1) SEP (RSI_0,8); ((RSP_0 -64 330),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 330),1) SEP (0x10000c008,8); ((RSP_0 -64 330),1) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 330),1) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004d8c: OR BYTE PTR [RBP - 322], 16 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004d93"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004d93: JMP 4294987606 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000047ce, blockId == 62 ##
######################################
*)

htriple "ht_100004d98"
 Separations "((RSP_0 -64 256),8) SEP (bot(fun____error),4); ((RSP_0 -64 256),8) SEP (RSI_0,8); ((RSP_0 -64 256),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 256),8) SEP (0x10000c008,8); ((RSP_0 -64 256),8) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 256),8) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004d98: MOV RDI, QWORD PTR [RBP - 248] 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDI = bot(fun_0x100004559) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004d9f"
 Separations "((RSP_0 -64 216),8) SEP (bot(fun____error),4); ((RSP_0 -64 216),8) SEP ([0x10000c008,8]_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDI = bot(fun_0x100004559) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004d9f: MOV RSI, QWORD PTR [RBP - 208] 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDI = bot(fun_0x100004559) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000047ce, blockId == 63 ##
######################################
*)

htriple "ht_100004db0"
 Separations "((RSP_0 -64 216),8) SEP (bot(fun____error),4); ((RSP_0 -64 216),8) SEP ([0x10000c008,8]_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004db0: MOV RDX, QWORD PTR [RBP - 208] 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004db7"
 Separations "((RSP_0 -64 120),8) SEP (bot(fun____error),4); ((RSP_0 -64 120),8) SEP (RSI_0,8); ((RSP_0 -64 120),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 120),8) SEP (0x10000c008,8); ((RSP_0 -64 120),8) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 120),8) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004db7: MOV RDI, QWORD PTR [RBP - 112] 4"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDI = bot(fun__archive_match_new) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004dbb"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDI = bot(fun__archive_match_new) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004dbb: MOV ESI, 513 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDI = bot(fun__archive_match_new) ; RSI = 513 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004dc0"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDI = bot(fun__archive_match_new) ; RSI = 513 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004dc0: JMP 4294987593 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDI = bot(fun__archive_match_new) ; RSI = 513 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000047ce, blockId == 64 ##
######################################
*)

htriple "ht_100004dc5"
 Separations "((RSP_0 -64 216),8) SEP (bot(fun____error),4); ((RSP_0 -64 216),8) SEP ([0x10000c008,8]_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004dc5: MOV RSI, QWORD PTR [RBP - 208] 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004dcc"
 Separations "((RSP_0 -64 120),8) SEP (bot(fun____error),4); ((RSP_0 -64 120),8) SEP (RSI_0,8); ((RSP_0 -64 120),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 120),8) SEP (0x10000c008,8); ((RSP_0 -64 120),8) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 120),8) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004dcc: MOV RDI, QWORD PTR [RBP - 112] 4"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDI = bot(fun__archive_match_new) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004dd0"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDI = bot(fun__archive_match_new) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004dd0: ExternalCall fun__archive_match_exclude_pattern 5"
 Post  "RAX = bot(fun__archive_match_exclude_pattern) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 FunctionConstraints "PRESERVES fun__archive_match_exclude_pattern {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 120),8];[(RSP_0 -64 192),4];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 256),8];[(RSP_0 -64 264),1];[(RSP_0 -64 272),8];[(RSP_0 -64 279),1];[(RSP_0 -64 280),1];[(RSP_0 -64 288),8];[(RSP_0 -64 296),8];[(RSP_0 -64 304),4];[(RSP_0 -64 312),8];[(RSP_0 -64 316),4];[(RSP_0 -64 320),4];[(RSP_0 -64 324),4];[(RSP_0 -64 328),4];[(RSP_0 -64 332),4];[(RSP_0 -64 336),4];[(RSP_0 -64 344),8];[(RSP_0 -64 352),8];[(RSP_0 -64 368),8];[(RSP_0 -64 376),8];[(RSP_0 -64 384),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004dd5"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_match_exclude_pattern) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004dd5: TEST EAX, EAX 2"
 Post  "RAX = bot(fun__archive_match_exclude_pattern) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004dd7"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_match_exclude_pattern) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004dd7: JE 4294987606 6"
 Post  "RAX = bot(fun__archive_match_exclude_pattern) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000047ce, blockId == 65 ##
######################################
*)

htriple "ht_100004de2"
 Separations "((RSP_0 -64 327),1) SEP (bot(fun____error),4); ((RSP_0 -64 327),1) SEP (RSI_0,8); ((RSP_0 -64 327),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 327),1) SEP (0x10000c008,8); ((RSP_0 -64 327),1) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 327),1) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004de2: OR BYTE PTR [RBP - 319], 64 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004de9"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004de9: JMP 4294987606 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000047ce, blockId == 66 ##
######################################
*)

htriple "ht_100004dee"
 Separations "((RSP_0 -64 328),1) SEP (bot(fun____error),4); ((RSP_0 -64 328),1) SEP (RSI_0,8); ((RSP_0 -64 328),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 328),1) SEP (0x10000c008,8); ((RSP_0 -64 328),1) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 328),1) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4); ((RSP_0 -64 328),4) SEP (bot(fun____error),4); ((RSP_0 -64 328),4) SEP ([0x10000c008,8]_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004dee: AND BYTE PTR [RBP - 320], 223 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004df5"
 Separations "((RSP_0 -64 324),1) SEP (bot(fun____error),4); ((RSP_0 -64 324),1) SEP (RSI_0,8); ((RSP_0 -64 324),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 324),1) SEP (0x10000c008,8); ((RSP_0 -64 324),1) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 324),1) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4); ((RSP_0 -64 324),4) SEP ([0x10000c008,8]_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004df5: OR BYTE PTR [RBP - 316], 32 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004dfc"
 Separations "((RSP_0 -64 330),1) SEP (bot(fun____error),4); ((RSP_0 -64 330),1) SEP (RSI_0,8); ((RSP_0 -64 330),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 330),1) SEP (0x10000c008,8); ((RSP_0 -64 330),1) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 330),1) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004dfc: OR BYTE PTR [RBP - 322], 2 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004e03"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004e03: JMP 4294987606 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000047ce, blockId == 67 ##
######################################
*)

htriple "ht_100004e08"
 Separations "((RSP_0 -64 328),1) SEP (bot(fun____error),4); ((RSP_0 -64 328),1) SEP (RSI_0,8); ((RSP_0 -64 328),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 328),1) SEP (0x10000c008,8); ((RSP_0 -64 328),1) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 328),1) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4); ((RSP_0 -64 328),4) SEP (bot(fun____error),4); ((RSP_0 -64 328),4) SEP ([0x10000c008,8]_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004e08: OR BYTE PTR [RBP - 320], 1 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004e0f"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004e0f: JMP 4294987606 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000047ce, blockId == 68 ##
######################################
*)

htriple "ht_100004e14"
 Separations "((RSP_0 -64 327),1) SEP (bot(fun____error),4); ((RSP_0 -64 327),1) SEP (RSI_0,8); ((RSP_0 -64 327),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 327),1) SEP (0x10000c008,8); ((RSP_0 -64 327),1) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 327),1) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004e14: OR BYTE PTR [RBP - 319], 128 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004e1b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004e1b: JMP 4294987606 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000047ce, blockId == 69 ##
######################################
*)

htriple "ht_100004e20"
 Separations "((RSP_0 -64 216),8) SEP (bot(fun____error),4); ((RSP_0 -64 216),8) SEP ([0x10000c008,8]_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004e20: MOV RDX, QWORD PTR [RBP - 208] 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004e27"
 Separations "((RSP_0 -64 120),8) SEP (bot(fun____error),4); ((RSP_0 -64 120),8) SEP (RSI_0,8); ((RSP_0 -64 120),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 120),8) SEP (0x10000c008,8); ((RSP_0 -64 120),8) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 120),8) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004e27: MOV RDI, QWORD PTR [RBP - 112] 4"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDI = bot(fun__archive_match_new) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004e2b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDI = bot(fun__archive_match_new) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004e2b: MOV ESI, 257 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDI = bot(fun__archive_match_new) ; RSI = 257 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004e30"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDI = bot(fun__archive_match_new) ; RSI = 257 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004e30: JMP 4294987481 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDI = bot(fun__archive_match_new) ; RSI = 257 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000047ce, blockId == 70 ##
######################################
*)

htriple "ht_100004e35"
 Separations "((RSP_0 -64 216),8) SEP (bot(fun____error),4); ((RSP_0 -64 216),8) SEP ([0x10000c008,8]_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004e35: MOV RDX, QWORD PTR [RBP - 208] 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004e3c"
 Separations "((RSP_0 -64 120),8) SEP (bot(fun____error),4); ((RSP_0 -64 120),8) SEP (RSI_0,8); ((RSP_0 -64 120),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 120),8) SEP (0x10000c008,8); ((RSP_0 -64 120),8) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 120),8) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004e3c: MOV RDI, QWORD PTR [RBP - 112] 4"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDI = bot(fun__archive_match_new) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004e40"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDI = bot(fun__archive_match_new) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004e40: MOV ESI, 258 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDI = bot(fun__archive_match_new) ; RSI = 258 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004e45"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDI = bot(fun__archive_match_new) ; RSI = 258 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004e45: JMP 4294987593 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDI = bot(fun__archive_match_new) ; RSI = 258 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000047ce, blockId == 71 ##
######################################
*)

htriple "ht_100004e4a"
 Separations "((RSP_0 -64 216),8) SEP (bot(fun____error),4); ((RSP_0 -64 216),8) SEP ([0x10000c008,8]_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004e4a: MOV RAX, QWORD PTR [RBP - 208] 7"
 Post  "RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004e51"
 Separations "((RSP_0 -64 272),8) SEP (bot(fun____error),4); ((RSP_0 -64 272),8) SEP (RSI_0,8); ((RSP_0 -64 272),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 272),8) SEP (0x10000c008,8); ((RSP_0 -64 272),8) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 272),8) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004e51: MOV QWORD PTR [RBP - 264], RAX 7"
 Post  "RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004e58"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004e58: JMP 4294987606 5"
 Post  "RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000047ce, blockId == 72 ##
######################################
*)

htriple "ht_100004e5d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004e5d: TEST R14B, R14B 3"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004e60"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004e60: JNE 4294989755 6"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000047ce, blockId == 73 ##
######################################
*)

htriple "ht_100004e75"
 Separations "((RSP_0 -64 331),1) SEP (bot(fun____error),4); ((RSP_0 -64 331),1) SEP (RSI_0,8); ((RSP_0 -64 331),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 331),1) SEP (0x10000c008,8); ((RSP_0 -64 331),1) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 331),1) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004e75: OR BYTE PTR [RBP - 323], 8 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004e7c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004e7c: JMP 4294987606 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000047ce, blockId == 74 ##
######################################
*)

htriple "ht_100004e99"
 Separations "((RSP_0 -64 216),8) SEP (bot(fun____error),4); ((RSP_0 -64 216),8) SEP ([0x10000c008,8]_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004e99: MOV RAX, QWORD PTR [RBP - 208] 7"
 Post  "RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004ea0"
 Separations "((RSP_0 -64 312),8) SEP (bot(fun____error),4); ((RSP_0 -64 312),8) SEP (RSI_0,8); ((RSP_0 -64 312),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 312),8) SEP (0x10000c008,8); ((RSP_0 -64 312),8) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 312),8) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004ea0: MOV QWORD PTR [RBP - 304], RAX 7"
 Post  "RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004ea7"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004ea7: JMP 4294987606 5"
 Post  "RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000047ce, blockId == 75 ##
######################################
*)

htriple "ht_100004eac"
 Separations "((RSP_0 -64 216),8) SEP (bot(fun____error),4); ((RSP_0 -64 216),8) SEP ([0x10000c008,8]_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004eac: MOV RSI, QWORD PTR [RBP - 208] 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004eb3"
 Separations "((RSP_0 -64 120),8) SEP (bot(fun____error),4); ((RSP_0 -64 120),8) SEP (RSI_0,8); ((RSP_0 -64 120),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 120),8) SEP (0x10000c008,8); ((RSP_0 -64 120),8) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 120),8) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004eb3: MOV RDI, QWORD PTR [RBP - 112] 4"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDI = bot(fun__archive_match_new) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004eb7"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDI = bot(fun__archive_match_new) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004eb7: ExternalCall fun__archive_match_include_pattern 5"
 Post  "RAX = bot(fun__archive_match_include_pattern) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 FunctionConstraints "PRESERVES fun__archive_match_include_pattern {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 120),8];[(RSP_0 -64 192),4];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 256),8];[(RSP_0 -64 264),1];[(RSP_0 -64 272),8];[(RSP_0 -64 279),1];[(RSP_0 -64 280),1];[(RSP_0 -64 288),8];[(RSP_0 -64 296),8];[(RSP_0 -64 304),4];[(RSP_0 -64 312),8];[(RSP_0 -64 316),4];[(RSP_0 -64 320),4];[(RSP_0 -64 324),4];[(RSP_0 -64 328),4];[(RSP_0 -64 332),4];[(RSP_0 -64 336),4];[(RSP_0 -64 344),8];[(RSP_0 -64 352),8];[(RSP_0 -64 368),8];[(RSP_0 -64 376),8];[(RSP_0 -64 384),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004ebc"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_match_include_pattern) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004ebc: TEST EAX, EAX 2"
 Post  "RAX = bot(fun__archive_match_include_pattern) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004ebe"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_match_include_pattern) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004ebe: JE 4294987606 6"
 Post  "RAX = bot(fun__archive_match_include_pattern) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000047ce, blockId == 76 ##
######################################
*)

htriple "ht_100004ec9"
 Separations "((RSP_0 -64 216),8) SEP (bot(fun____error),4); ((RSP_0 -64 216),8) SEP ([0x10000c008,8]_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004ec9: MOV RDX, QWORD PTR [RBP - 208] 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004ed0"
 Separations "((RSP_0 -64 120),8) SEP (bot(fun____error),4); ((RSP_0 -64 120),8) SEP (RSI_0,8); ((RSP_0 -64 120),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 120),8) SEP (0x10000c008,8); ((RSP_0 -64 120),8) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 120),8) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004ed0: MOV RDI, QWORD PTR [RBP - 112] 4"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDI = bot(fun__archive_match_new) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004ed4"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDI = bot(fun__archive_match_new) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004ed4: MOV ESI, 514 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDI = bot(fun__archive_match_new) ; RSI = 514 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000047ce, blockId == 77 ##
######################################
*)

htriple "ht_100004ee0"
 Separations "((RSP_0 -64 279),1) SEP (bot(fun____error),4); ((RSP_0 -64 279),1) SEP (RSI_0,8); ((RSP_0 -64 279),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 279),1) SEP (0x10000c008,8); ((RSP_0 -64 279),1) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 279),1) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004ee0: MOV BYTE PTR [RBP - 271], 72 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 279),1] = 72"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004ee7"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 279),1] = 72"
 Instruction "100004ee7: JMP 4294987606 2"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 279),1] = 72"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000047ce, blockId == 78 ##
######################################
*)

htriple "ht_100004ee9"
 Separations "((RSP_0 -64 324),1) SEP (bot(fun____error),4); ((RSP_0 -64 324),1) SEP (RSI_0,8); ((RSP_0 -64 324),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 324),1) SEP (0x10000c008,8); ((RSP_0 -64 324),1) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 324),1) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4); ((RSP_0 -64 324),4) SEP ([0x10000c008,8]_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004ee9: OR BYTE PTR [RBP - 316], 2 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004ef0"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004ef0: JMP 4294987606 2"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000047ce, blockId == 79 ##
######################################
*)

htriple "ht_100004ef2"
 Separations "((RSP_0 -64 328),1) SEP (bot(fun____error),4); ((RSP_0 -64 328),1) SEP (RSI_0,8); ((RSP_0 -64 328),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 328),1) SEP (0x10000c008,8); ((RSP_0 -64 328),1) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 328),1) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4); ((RSP_0 -64 328),4) SEP (bot(fun____error),4); ((RSP_0 -64 328),4) SEP ([0x10000c008,8]_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004ef2: AND BYTE PTR [RBP - 320], 251 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004ef9"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004ef9: JMP 4294987606 2"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000047ce, blockId == 80 ##
######################################
*)

htriple "ht_100004efb"
 Separations "((RSP_0 -64 331),1) SEP (bot(fun____error),4); ((RSP_0 -64 331),1) SEP (RSI_0,8); ((RSP_0 -64 331),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 331),1) SEP (0x10000c008,8); ((RSP_0 -64 331),1) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 331),1) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004efb: OR BYTE PTR [RBP - 323], 1 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004f02"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004f02: JMP 4294987606 2"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000047ce, blockId == 81 ##
######################################
*)

htriple "ht_100004f04"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004f04: LEA RAX, [RIP + 23610] 7"
 Post  "RAX = 0x10000ab45 ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004f0b"
 Separations "((RSP_0 -64 296),8) SEP (bot(fun____error),4); ((RSP_0 -64 296),8) SEP (RSI_0,8); ((RSP_0 -64 296),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 296),8) SEP (0x10000c008,8); ((RSP_0 -64 296),8) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 296),8) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = 0x10000ab45 ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004f0b: MOV QWORD PTR [RBP - 288], RAX 7"
 Post  "RAX = 0x10000ab45 ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 296),8] = 0x10000ab45"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004f12"
 Separations "((RSP_0 -64 312),8) SEP (bot(fun____error),4); ((RSP_0 -64 312),8) SEP (RSI_0,8); ((RSP_0 -64 312),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 312),8) SEP (0x10000c008,8); ((RSP_0 -64 312),8) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 312),8) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = 0x10000ab45 ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 296),8] = 0x10000ab45"
 Instruction "100004f12: MOV QWORD PTR [RBP - 304], RAX 7"
 Post  "RAX = 0x10000ab45 ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 296),8] = 0x10000ab45 ; [(RSP_0 -64 312),8] = 0x10000ab45"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004f19"
 Separations "((RSP_0 -64 331),1) SEP (bot(fun____error),4); ((RSP_0 -64 331),1) SEP (RSI_0,8); ((RSP_0 -64 331),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 331),1) SEP (0x10000c008,8); ((RSP_0 -64 331),1) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 331),1) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = 0x10000ab45 ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 296),8] = 0x10000ab45 ; [(RSP_0 -64 312),8] = 0x10000ab45"
 Instruction "100004f19: OR BYTE PTR [RBP - 323], 2 7"
 Post  "RAX = 0x10000ab45 ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 296),8] = 0x10000ab45 ; [(RSP_0 -64 312),8] = 0x10000ab45"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004f20"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x10000ab45 ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 296),8] = 0x10000ab45 ; [(RSP_0 -64 312),8] = 0x10000ab45"
 Instruction "100004f20: JMP 4294987606 2"
 Post  "RAX = 0x10000ab45 ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 296),8] = 0x10000ab45 ; [(RSP_0 -64 312),8] = 0x10000ab45"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000047ce, blockId == 82 ##
######################################
*)

htriple "ht_100004f22"
 Separations "((RSP_0 -64 328),1) SEP (bot(fun____error),4); ((RSP_0 -64 328),1) SEP (RSI_0,8); ((RSP_0 -64 328),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 328),1) SEP (0x10000c008,8); ((RSP_0 -64 328),1) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 328),1) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4); ((RSP_0 -64 328),4) SEP (bot(fun____error),4); ((RSP_0 -64 328),4) SEP ([0x10000c008,8]_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004f22: OR BYTE PTR [RBP - 320], 128 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004f29"
 Separations "((RSP_0 -64 324),1) SEP (bot(fun____error),4); ((RSP_0 -64 324),1) SEP (RSI_0,8); ((RSP_0 -64 324),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 324),1) SEP (0x10000c008,8); ((RSP_0 -64 324),1) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 324),1) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4); ((RSP_0 -64 324),4) SEP ([0x10000c008,8]_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004f29: AND BYTE PTR [RBP - 316], 239 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004f30"
 Separations "((RSP_0 -64 330),1) SEP (bot(fun____error),4); ((RSP_0 -64 330),1) SEP (RSI_0,8); ((RSP_0 -64 330),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 330),1) SEP (0x10000c008,8); ((RSP_0 -64 330),1) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 330),1) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004f30: OR BYTE PTR [RBP - 322], 1 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004f37"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004f37: JMP 4294987606 2"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000047ce, blockId == 83 ##
######################################
*)

htriple "ht_100004f39"
 Separations "((RSP_0 -64 216),8) SEP (bot(fun____error),4); ((RSP_0 -64 216),8) SEP ([0x10000c008,8]_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004f39: MOV RDX, QWORD PTR [RBP - 208] 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004f40"
 Separations "((RSP_0 -64 120),8) SEP (bot(fun____error),4); ((RSP_0 -64 120),8) SEP (RSI_0,8); ((RSP_0 -64 120),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 120),8) SEP (0x10000c008,8); ((RSP_0 -64 120),8) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 120),8) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004f40: MOV RDI, QWORD PTR [RBP - 112] 4"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDI = bot(fun__archive_match_new) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004f44"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDI = bot(fun__archive_match_new) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004f44: MOV ESI, 514 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDI = bot(fun__archive_match_new) ; RSI = 514 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000047ce, blockId == 84 ##
######################################
*)

htriple "ht_100004f56"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004f56: LEA RDI, [RBP - 360] 7"
 Post  "RBX = 0x1000058a0 ; RDI = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004f5d"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x1000058a0 ; RDI = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004f5d: ExternalCall fun_0x100005c50 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 FunctionConstraints "PRESERVES fun_0x100005c50 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 120),8];[(RSP_0 -64 192),4];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 256),8];[(RSP_0 -64 264),1];[(RSP_0 -64 272),8];[(RSP_0 -64 279),1];[(RSP_0 -64 280),1];[(RSP_0 -64 288),8];[(RSP_0 -64 296),8];[(RSP_0 -64 304),4];[(RSP_0 -64 312),8];[(RSP_0 -64 316),4];[(RSP_0 -64 320),4];[(RSP_0 -64 324),4];[(RSP_0 -64 328),4];[(RSP_0 -64 332),4];[(RSP_0 -64 336),4];[(RSP_0 -64 344),8];[(RSP_0 -64 352),8];[(RSP_0 -64 368),8];[(RSP_0 -64 376),8];[(RSP_0 -64 384),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004f62"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004f62: CMP EAX, 18446744073709551615 3"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004f65"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004f65: JNE 4294986140 6"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000047ce, blockId == 85 ##
######################################
*)

htriple "ht_100004f70"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004f70: ExternalCall fun____error 5"
 Post  "RAX = bot(fun____error) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 FunctionConstraints "PRESERVES fun____error {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 120),8];[(RSP_0 -64 192),4];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 256),8];[(RSP_0 -64 264),1];[(RSP_0 -64 272),8];[(RSP_0 -64 279),1];[(RSP_0 -64 280),1];[(RSP_0 -64 288),8];[(RSP_0 -64 296),8];[(RSP_0 -64 304),4];[(RSP_0 -64 312),8];[(RSP_0 -64 316),4];[(RSP_0 -64 320),4];[(RSP_0 -64 324),4];[(RSP_0 -64 328),4];[(RSP_0 -64 332),4];[(RSP_0 -64 336),4];[(RSP_0 -64 344),8];[(RSP_0 -64 352),8];[(RSP_0 -64 368),8];[(RSP_0 -64 376),8];[(RSP_0 -64 384),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004f75"
 Separations "(bot(fun____error),4) SEP (RSP_0,8); (bot(fun____error),4) SEP ([0x10000c008,8]_0,8); (bot(fun____error),4) SEP (0x10000c008,8); (bot(fun____error),4) SEP ((RSP_0 -64 8),8); (bot(fun____error),4) SEP ((RSP_0 -64 16),8); (bot(fun____error),4) SEP ((RSP_0 -64 24),8); (bot(fun____error),4) SEP ((RSP_0 -64 32),8); (bot(fun____error),4) SEP ((RSP_0 -64 40),8); (bot(fun____error),4) SEP ((RSP_0 -64 48),8); (bot(fun____error),4) SEP ((RSP_0 -64 56),8); (bot(fun____error),4) SEP ((RSP_0 -64 64),8); (bot(fun____error),4) SEP ((RSP_0 -64 70),1); (bot(fun____error),4) SEP ((RSP_0 -64 71),1); (bot(fun____error),4) SEP ((RSP_0 -64 72),2); (bot(fun____error),4) SEP ((RSP_0 -64 72),8); (bot(fun____error),4) SEP ((RSP_0 -64 80),8); (bot(fun____error),4) SEP ((RSP_0 -64 120),8); (bot(fun____error),4) SEP ((RSP_0 -64 188),4); (bot(fun____error),4) SEP ((RSP_0 -64 192),4); (bot(fun____error),4) SEP ((RSP_0 -64 216),8); (bot(fun____error),4) SEP ((RSP_0 -64 224),8); (bot(fun____error),4) SEP ((RSP_0 -64 228),4); (bot(fun____error),4) SEP ((RSP_0 -64 232),4); (bot(fun____error),4) SEP ((RSP_0 -64 256),8); (bot(fun____error),4) SEP ((RSP_0 -64 264),1); (bot(fun____error),4) SEP ((RSP_0 -64 272),8); (bot(fun____error),4) SEP ((RSP_0 -64 279),1); (bot(fun____error),4) SEP ((RSP_0 -64 280),1); (bot(fun____error),4) SEP ((RSP_0 -64 288),8); (bot(fun____error),4) SEP ((RSP_0 -64 296),8); (bot(fun____error),4) SEP ((RSP_0 -64 304),4); (bot(fun____error),4) SEP ((RSP_0 -64 312),8); (bot(fun____error),4) SEP ((RSP_0 -64 316),4); (bot(fun____error),4) SEP ((RSP_0 -64 320),4); (bot(fun____error),4) SEP ((RSP_0 -64 324),1); (bot(fun____error),4) SEP ((RSP_0 -64 324),4); (bot(fun____error),4) SEP ((RSP_0 -64 326),1); (bot(fun____error),4) SEP ((RSP_0 -64 327),1); (bot(fun____error),4) SEP ((RSP_0 -64 328),1); (bot(fun____error),4) SEP ((RSP_0 -64 328),4); (bot(fun____error),4) SEP ((RSP_0 -64 330),1); (bot(fun____error),4) SEP ((RSP_0 -64 331),1); (bot(fun____error),4) SEP ((RSP_0 -64 332),1); (bot(fun____error),4) SEP ((RSP_0 -64 332),4); (bot(fun____error),4) SEP ((RSP_0 -64 336),4); (bot(fun____error),4) SEP ((RSP_0 -64 340),4); (bot(fun____error),4) SEP ((RSP_0 -64 344),4); (bot(fun____error),4) SEP ((RSP_0 -64 344),8); (bot(fun____error),4) SEP ((RSP_0 -64 352),8); (bot(fun____error),4) SEP ((RSP_0 -64 368),8); (bot(fun____error),4) SEP ((RSP_0 -64 376),8); (bot(fun____error),4) SEP ((RSP_0 -64 384),8)"
 Assertions  ""
 Pre   "RAX = bot(fun____error) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004f75: MOV DWORD PTR [RAX], 0 6"
 Post  "RAX = bot(fun____error) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004f7b"
 Separations "((RSP_0 -64 216),8) SEP (bot(fun____error),4); ((RSP_0 -64 216),8) SEP ([0x10000c008,8]_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun____error) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004f7b: MOV RDI, QWORD PTR [RBP - 208] 7"
 Post  "RAX = bot(fun____error) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004f82"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun____error) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004f82: XOR ESI, ESI 2"
 Post  "RAX = bot(fun____error) ; RBX = 0x1000058a0 ; RSI = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004f84"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun____error) ; RBX = 0x1000058a0 ; RSI = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004f84: XOR EDX, EDX 2"
 Post  "RAX = bot(fun____error) ; RBX = 0x1000058a0 ; RDX = 0 ; RSI = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004f86"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun____error) ; RBX = 0x1000058a0 ; RDX = 0 ; RSI = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004f86: ExternalCall fun__strtol 5"
 Post  "RAX = bot(fun__strtol) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 FunctionConstraints "PRESERVES fun__strtol {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 120),8];[(RSP_0 -64 192),4];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 256),8];[(RSP_0 -64 264),1];[(RSP_0 -64 272),8];[(RSP_0 -64 279),1];[(RSP_0 -64 280),1];[(RSP_0 -64 288),8];[(RSP_0 -64 296),8];[(RSP_0 -64 304),4];[(RSP_0 -64 312),8];[(RSP_0 -64 316),4];[(RSP_0 -64 320),4];[(RSP_0 -64 324),4];[(RSP_0 -64 328),4];[(RSP_0 -64 332),4];[(RSP_0 -64 336),4];[(RSP_0 -64 344),8];[(RSP_0 -64 352),8];[(RSP_0 -64 368),8];[(RSP_0 -64 376),8];[(RSP_0 -64 384),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004f8b"
 Separations "((RSP_0 -64 320),4) SEP (bot(fun____error),4); ((RSP_0 -64 320),4) SEP (RSI_0,8); ((RSP_0 -64 320),4) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 320),4) SEP (0x10000c008,8); ((RSP_0 -64 320),4) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 320),4) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun__strtol) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004f8b: MOV DWORD PTR [RBP - 312], EAX 6"
 Post  "RAX = bot(fun__strtol) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 320),4] = b32(bot(fun__strtol))"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004f91"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strtol) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 320),4] = b32(bot(fun__strtol))"
 Instruction "100004f91: ExternalCall fun____error 5"
 Post  "RAX = bot(fun____error) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 320),4] = b32(bot(fun__strtol))"
 FunctionConstraints "PRESERVES fun____error {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 120),8];[(RSP_0 -64 192),4];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 256),8];[(RSP_0 -64 264),1];[(RSP_0 -64 272),8];[(RSP_0 -64 279),1];[(RSP_0 -64 280),1];[(RSP_0 -64 288),8];[(RSP_0 -64 296),8];[(RSP_0 -64 304),4];[(RSP_0 -64 312),8];[(RSP_0 -64 316),4];[(RSP_0 -64 320),4];[(RSP_0 -64 324),4];[(RSP_0 -64 328),4];[(RSP_0 -64 332),4];[(RSP_0 -64 336),4];[(RSP_0 -64 344),8];[(RSP_0 -64 352),8];[(RSP_0 -64 368),8];[(RSP_0 -64 376),8];[(RSP_0 -64 384),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004f96"
 Separations "(bot(fun____error),4) SEP (RSP_0,8); (bot(fun____error),4) SEP ([0x10000c008,8]_0,8); (bot(fun____error),4) SEP (0x10000c008,8); (bot(fun____error),4) SEP ((RSP_0 -64 8),8); (bot(fun____error),4) SEP ((RSP_0 -64 16),8); (bot(fun____error),4) SEP ((RSP_0 -64 24),8); (bot(fun____error),4) SEP ((RSP_0 -64 32),8); (bot(fun____error),4) SEP ((RSP_0 -64 40),8); (bot(fun____error),4) SEP ((RSP_0 -64 48),8); (bot(fun____error),4) SEP ((RSP_0 -64 56),8); (bot(fun____error),4) SEP ((RSP_0 -64 64),8); (bot(fun____error),4) SEP ((RSP_0 -64 70),1); (bot(fun____error),4) SEP ((RSP_0 -64 71),1); (bot(fun____error),4) SEP ((RSP_0 -64 72),2); (bot(fun____error),4) SEP ((RSP_0 -64 72),8); (bot(fun____error),4) SEP ((RSP_0 -64 80),8); (bot(fun____error),4) SEP ((RSP_0 -64 120),8); (bot(fun____error),4) SEP ((RSP_0 -64 188),4); (bot(fun____error),4) SEP ((RSP_0 -64 192),4); (bot(fun____error),4) SEP ((RSP_0 -64 216),8); (bot(fun____error),4) SEP ((RSP_0 -64 224),8); (bot(fun____error),4) SEP ((RSP_0 -64 228),4); (bot(fun____error),4) SEP ((RSP_0 -64 232),4); (bot(fun____error),4) SEP ((RSP_0 -64 256),8); (bot(fun____error),4) SEP ((RSP_0 -64 264),1); (bot(fun____error),4) SEP ((RSP_0 -64 272),8); (bot(fun____error),4) SEP ((RSP_0 -64 279),1); (bot(fun____error),4) SEP ((RSP_0 -64 280),1); (bot(fun____error),4) SEP ((RSP_0 -64 288),8); (bot(fun____error),4) SEP ((RSP_0 -64 296),8); (bot(fun____error),4) SEP ((RSP_0 -64 304),4); (bot(fun____error),4) SEP ((RSP_0 -64 312),8); (bot(fun____error),4) SEP ((RSP_0 -64 316),4); (bot(fun____error),4) SEP ((RSP_0 -64 320),4); (bot(fun____error),4) SEP ((RSP_0 -64 324),1); (bot(fun____error),4) SEP ((RSP_0 -64 324),4); (bot(fun____error),4) SEP ((RSP_0 -64 326),1); (bot(fun____error),4) SEP ((RSP_0 -64 327),1); (bot(fun____error),4) SEP ((RSP_0 -64 328),1); (bot(fun____error),4) SEP ((RSP_0 -64 328),4); (bot(fun____error),4) SEP ((RSP_0 -64 330),1); (bot(fun____error),4) SEP ((RSP_0 -64 331),1); (bot(fun____error),4) SEP ((RSP_0 -64 332),1); (bot(fun____error),4) SEP ((RSP_0 -64 332),4); (bot(fun____error),4) SEP ((RSP_0 -64 336),4); (bot(fun____error),4) SEP ((RSP_0 -64 340),4); (bot(fun____error),4) SEP ((RSP_0 -64 344),4); (bot(fun____error),4) SEP ((RSP_0 -64 344),8); (bot(fun____error),4) SEP ((RSP_0 -64 352),8); (bot(fun____error),4) SEP ((RSP_0 -64 368),8); (bot(fun____error),4) SEP ((RSP_0 -64 376),8); (bot(fun____error),4) SEP ((RSP_0 -64 384),8)"
 Assertions  ""
 Pre   "RAX = bot(fun____error) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 320),4] = b32(bot(fun__strtol))"
 Instruction "100004f96: CMP DWORD PTR [RAX], 0 3"
 Post  "RAX = bot(fun____error) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 320),4] = b32(bot(fun__strtol))"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004f99"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun____error) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 320),4] = b32(bot(fun__strtol))"
 Instruction "100004f99: JE 4294987606 2"
 Post  "RAX = bot(fun____error) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 320),4] = b32(bot(fun__strtol))"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000047ce, blockId == 86 ##
######################################
*)

htriple "ht_100004fa0"
 Separations "((RSP_0 -64 332),1) SEP (bot(fun____error),4); ((RSP_0 -64 332),1) SEP (RSI_0,8); ((RSP_0 -64 332),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 332),1) SEP (0x10000c008,8); ((RSP_0 -64 332),1) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 332),1) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4); ((RSP_0 -64 332),4) SEP (bot(fun____error),4); ((RSP_0 -64 332),4) SEP ([0x10000c008,8]_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004fa0: OR BYTE PTR [RBP - 324], 128 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004fa7"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004fa7: JMP 4294987606 2"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000047ce, blockId == 87 ##
######################################
*)

htriple "ht_100004fa9"
 Separations "((RSP_0 -64 331),1) SEP (bot(fun____error),4); ((RSP_0 -64 331),1) SEP (RSI_0,8); ((RSP_0 -64 331),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 331),1) SEP (0x10000c008,8); ((RSP_0 -64 331),1) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 331),1) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004fa9: OR BYTE PTR [RBP - 323], 4 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004fb0"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004fb0: JMP 4294987606 2"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000047ce, blockId == 88 ##
######################################
*)

htriple "ht_100004fb2"
 Separations "((RSP_0 -64 216),8) SEP (bot(fun____error),4); ((RSP_0 -64 216),8) SEP ([0x10000c008,8]_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004fb2: MOV RAX, QWORD PTR [RBP - 208] 7"
 Post  "RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004fb9"
 Separations "((RSP_0 -64 288),8) SEP (bot(fun____error),4); ((RSP_0 -64 288),8) SEP (RSI_0,8); ((RSP_0 -64 288),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 288),8) SEP (0x10000c008,8); ((RSP_0 -64 288),8) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 288),8) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004fb9: MOV QWORD PTR [RBP - 280], RAX 7"
 Post  "RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004fc0"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004fc0: JMP 4294987606 2"
 Post  "RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000047ce, blockId == 89 ##
######################################
*)

htriple "ht_100004fc2"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004fc2: LEA RDI, [RBP - 360] 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDI = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004fc9"
 Separations "((RSP_0 -64 216),8) SEP (bot(fun____error),4); ((RSP_0 -64 216),8) SEP ([0x10000c008,8]_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDI = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004fc9: MOV RSI, QWORD PTR [RDI + 152] 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDI = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004fd0"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDI = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004fd0: ExternalCall fun_0x100006aeb 5"
 Post  "RAX = bot(fun_0x100006aeb) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 FunctionConstraints "PRESERVES fun_0x100006aeb {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 120),8];[(RSP_0 -64 192),4];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 256),8];[(RSP_0 -64 264),1];[(RSP_0 -64 272),8];[(RSP_0 -64 279),1];[(RSP_0 -64 280),1];[(RSP_0 -64 288),8];[(RSP_0 -64 296),8];[(RSP_0 -64 304),4];[(RSP_0 -64 312),8];[(RSP_0 -64 316),4];[(RSP_0 -64 320),4];[(RSP_0 -64 324),4];[(RSP_0 -64 328),4];[(RSP_0 -64 332),4];[(RSP_0 -64 336),4];[(RSP_0 -64 344),8];[(RSP_0 -64 352),8];[(RSP_0 -64 368),8];[(RSP_0 -64 376),8];[(RSP_0 -64 384),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004fd5"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100006aeb) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004fd5: JMP 4294987606 5"
 Post  "RAX = bot(fun_0x100006aeb) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000047ce, blockId == 90 ##
######################################
*)

htriple "ht_100004fda"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004fda: TEST R12B, R12B 3"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004fdd"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004fdd: JNE 4294989858 6"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000047ce, blockId == 91 ##
######################################
*)

htriple "ht_100004ff9"
 Separations "((RSP_0 -64 216),8) SEP (bot(fun____error),4); ((RSP_0 -64 216),8) SEP ([0x10000c008,8]_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004ff9: MOV R15, QWORD PTR [RBP - 208] 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005000"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005000: JMP 4294987606 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000047ce, blockId == 92 ##
######################################
*)

htriple "ht_100005005"
 Separations "((RSP_0 -64 216),8) SEP (bot(fun____error),4); ((RSP_0 -64 216),8) SEP ([0x10000c008,8]_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005005: MOV RAX, QWORD PTR [RBP - 208] 7"
 Post  "RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000500c"
 Separations "((RSP_0 -64 368),8) SEP (bot(fun____error),4); ((RSP_0 -64 368),8) SEP (RSI_0,8); ((RSP_0 -64 368),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 368),8) SEP (0x10000c008,8); ((RSP_0 -64 368),8) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 368),8) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000500c: MOV QWORD PTR [RBP - 360], RAX 7"
 Post  "RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005013"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005013: JMP 4294987606 5"
 Post  "RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000047ce, blockId == 93 ##
######################################
*)

htriple "ht_100005018"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005018: TEST R14B, R14B 3"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000501b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000501b: JNE 4294989867 6"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000047ce, blockId == 94 ##
######################################
*)

htriple "ht_100005030"
 Separations "((RSP_0 -64 280),1) SEP (bot(fun____error),4); ((RSP_0 -64 280),1) SEP (RSI_0,8); ((RSP_0 -64 280),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 280),1) SEP (0x10000c008,8); ((RSP_0 -64 280),1) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 280),1) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005030: MOVSX R8D, BYTE PTR [RBP - 272] 8"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005038"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005038: TEST R8D, R8D 3"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000503b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000503b: JE 4294987847 2"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000047ce, blockId == 95 ##
######################################
*)

htriple "ht_1000050aa"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000050aa: ExternalCall fun_0x100005ac8 5"
 Post  "RAX = bot(fun_0x100005ac8) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 FunctionConstraints "PRESERVES fun_0x100005ac8 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 120),8];[(RSP_0 -64 192),4];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 256),8];[(RSP_0 -64 264),1];[(RSP_0 -64 272),8];[(RSP_0 -64 279),1];[(RSP_0 -64 280),1];[(RSP_0 -64 288),8];[(RSP_0 -64 296),8];[(RSP_0 -64 304),4];[(RSP_0 -64 312),8];[(RSP_0 -64 316),4];[(RSP_0 -64 320),4];[(RSP_0 -64 324),4];[(RSP_0 -64 328),4];[(RSP_0 -64 332),4];[(RSP_0 -64 336),4];[(RSP_0 -64 344),8];[(RSP_0 -64 352),8];[(RSP_0 -64 368),8];[(RSP_0 -64 376),8];[(RSP_0 -64 384),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000047ce, blockId == 96 ##
######################################
*)

htriple "ht_100005662"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005662: ExternalCall fun_0x100005b62 5"
 Post  "RAX = bot(fun_0x100005b62) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 FunctionConstraints "PRESERVES fun_0x100005b62 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 120),8];[(RSP_0 -64 192),4];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 256),8];[(RSP_0 -64 264),1];[(RSP_0 -64 272),8];[(RSP_0 -64 279),1];[(RSP_0 -64 280),1];[(RSP_0 -64 288),8];[(RSP_0 -64 296),8];[(RSP_0 -64 304),4];[(RSP_0 -64 312),8];[(RSP_0 -64 316),4];[(RSP_0 -64 320),4];[(RSP_0 -64 324),4];[(RSP_0 -64 328),4];[(RSP_0 -64 332),4];[(RSP_0 -64 336),4];[(RSP_0 -64 344),8];[(RSP_0 -64 352),8];[(RSP_0 -64 368),8];[(RSP_0 -64 376),8];[(RSP_0 -64 384),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000047ce, blockId == 97 ##
######################################
*)

htriple "ht_1000049ba"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000049ba: LEA ECX, [RAX - 17] 3"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RCX = (b32(bot(fun_0x100005c50)) -32 17) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000049bd"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RCX = (b32(bot(fun_0x100005c50)) -32 17) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000049bd: CMP ECX, 4 3"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RCX = (b32(bot(fun_0x100005c50)) -32 17) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000049c0"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RCX = (b32(bot(fun_0x100005c50)) -32 17) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000049c0: JA 4294987919 6"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RCX = (b32(bot(fun_0x100005c50)) -32 17) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000047ce, blockId == 98 ##
######################################
*)

htriple "ht_100005699"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005699: MOVSX R8D, R14B 4"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000569d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000569d: LEA RDX, [RIP + 21905] 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDX = 0x10000ac35 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000056a4"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDX = 0x10000ac35 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000056a4: MOV EDI, 1 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDX = 0x10000ac35 ; RDI = 1 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000056a9"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDX = 0x10000ac35 ; RDI = 1 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000056a9: XOR ESI, ESI 2"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDX = 0x10000ac35 ; RDI = 1 ; RSI = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000056ab"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDX = 0x10000ac35 ; RDI = 1 ; RSI = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000056ab: MOV ECX, EAX 2"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RCX = b32(bot(fun_0x100005c50)) ; RDX = 0x10000ac35 ; RDI = 1 ; RSI = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000056ad"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RCX = b32(bot(fun_0x100005c50)) ; RDX = 0x10000ac35 ; RDI = 1 ; RSI = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000056ad: JMP 4294989917 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RCX = b32(bot(fun_0x100005c50)) ; RDX = 0x10000ac35 ; RDI = 1 ; RSI = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000047ce, blockId == 99 ##
######################################
*)

htriple "ht_1000049c6"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RCX = (b32(bot(fun_0x100005c50)) -32 17) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000049c6: LEA RAX, [RIP + 4283] 7"
 Post  "RAX = 0x100005a88 ; RBX = 0x1000058a0 ; RCX = (b32(bot(fun_0x100005c50)) -32 17) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000049cd"
 Separations "((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4) SEP (RSP_0,8); ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4) SEP ([0x10000c008,8]_0,8); ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4) SEP (0x10000c008,8); ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4) SEP ((RSP_0 -64 8),8); ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4) SEP ((RSP_0 -64 16),8); ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4) SEP ((RSP_0 -64 24),8); ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4) SEP ((RSP_0 -64 32),8); ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4) SEP ((RSP_0 -64 40),8); ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4) SEP ((RSP_0 -64 48),8); ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4) SEP ((RSP_0 -64 56),8); ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4) SEP ((RSP_0 -64 64),8); ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4) SEP ((RSP_0 -64 72),8); ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4) SEP ((RSP_0 -64 120),8); ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4) SEP ((RSP_0 -64 192),4); ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4) SEP ((RSP_0 -64 224),8); ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4) SEP ((RSP_0 -64 228),4); ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4) SEP ((RSP_0 -64 232),4); ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4) SEP ((RSP_0 -64 256),8); ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4) SEP ((RSP_0 -64 264),1); ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4) SEP ((RSP_0 -64 272),8); ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4) SEP ((RSP_0 -64 279),1); ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4) SEP ((RSP_0 -64 280),1); ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4) SEP ((RSP_0 -64 288),8); ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4) SEP ((RSP_0 -64 296),8); ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4) SEP ((RSP_0 -64 304),4); ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4) SEP ((RSP_0 -64 312),8); ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4) SEP ((RSP_0 -64 316),4); ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4) SEP ((RSP_0 -64 320),4); ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4) SEP ((RSP_0 -64 324),4); ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4) SEP ((RSP_0 -64 328),4); ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4) SEP ((RSP_0 -64 332),4); ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4) SEP ((RSP_0 -64 336),4); ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4) SEP ((RSP_0 -64 344),8); ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4) SEP ((RSP_0 -64 352),8); ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4) SEP ((RSP_0 -64 368),8); ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4) SEP ((RSP_0 -64 376),8); ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4) SEP ((RSP_0 -64 384),8)"
 Assertions  ""
 Pre   "RAX = 0x100005a88 ; RBX = 0x1000058a0 ; RCX = (b32(bot(fun_0x100005c50)) -32 17) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000049cd: MOVSXD RCX, DWORD PTR [RAX + RCX * 4] 4"
 Post  "RAX = 0x100005a88 ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000049d1"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x100005a88 ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000049d1: ADD RCX, RAX 3"
 Post  "RAX = 0x100005a88 ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000049d4"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x100005a88 ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000049d4: JMP RCX 2"
 Post  "RAX = 0x100005a88 ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 100 ##
#######################################
*)

htriple "ht_10000508f"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RCX = (b32(bot(fun_0x100005c50)) -32 17) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000508f: MOV R14D, EAX 3"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RCX = (b32(bot(fun_0x100005c50)) -32 17) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun_0x100005c50)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005092"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RCX = (b32(bot(fun_0x100005c50)) -32 17) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun_0x100005c50)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005092: JMP 4294987606 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RCX = (b32(bot(fun_0x100005c50)) -32 17) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun_0x100005c50)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 101 ##
#######################################
*)

htriple "ht_1000049d6"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x100005a88 ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000049d6: LEA R13, [RIP + 24605] 7"
 Post  "RAX = 0x100005a88 ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R13 = 0x10000a9fa ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000049dd"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x100005a88 ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R13 = 0x10000a9fa ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000049dd: MOV R14B, 17 3"
 Post  "RAX = 0x100005a88 ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R13 = 0x10000a9fa ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000049e0"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x100005a88 ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R13 = 0x10000a9fa ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000049e0: JMP 4294987606 5"
 Post  "RAX = 0x100005a88 ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R13 = 0x10000a9fa ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 102 ##
#######################################
*)

htriple "ht_100005062"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x100005a88 ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005062: LEA R13, [RIP + 22939] 7"
 Post  "RAX = 0x100005a88 ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R13 = 0x10000aa04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005069"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x100005a88 ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R13 = 0x10000aa04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005069: MOV R14B, 19 3"
 Post  "RAX = 0x100005a88 ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R13 = 0x10000aa04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000506c"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x100005a88 ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R13 = 0x10000aa04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000506c: JMP 4294987606 5"
 Post  "RAX = 0x100005a88 ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R13 = 0x10000aa04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 103 ##
#######################################
*)

htriple "ht_100005071"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x100005a88 ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005071: LEA R13, [RIP + 22954] 7"
 Post  "RAX = 0x100005a88 ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R13 = 0x10000aa22 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005078"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x100005a88 ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R13 = 0x10000aa22 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005078: MOV R14B, 20 3"
 Post  "RAX = 0x100005a88 ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R13 = 0x10000aa22 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000507b"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x100005a88 ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R13 = 0x10000aa22 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000507b: JMP 4294987606 5"
 Post  "RAX = 0x100005a88 ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R13 = 0x10000aa22 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 104 ##
#######################################
*)

htriple "ht_100005080"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x100005a88 ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005080: LEA R13, [RIP + 22919] 7"
 Post  "RAX = 0x100005a88 ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R13 = 0x10000aa0e ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005087"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x100005a88 ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R13 = 0x10000aa0e ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005087: MOV R14B, 18 3"
 Post  "RAX = 0x100005a88 ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R13 = 0x10000aa0e ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000508a"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x100005a88 ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R13 = 0x10000aa0e ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000508a: JMP 4294987606 5"
 Post  "RAX = 0x100005a88 ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R13 = 0x10000aa0e ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 105 ##
#######################################
*)

htriple "ht_100004a0d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004a0d: LEA R13, [RIP + 24519] 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R13 = 0x10000a9db ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004a14"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R13 = 0x10000a9db ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004a14: MOV R14B, 106 3"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R13 = 0x10000a9db ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004a17"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R13 = 0x10000a9db ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004a17: JMP 4294987606 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R13 = 0x10000a9db ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 106 ##
#######################################
*)

htriple "ht_1000056b2"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000056b2: MOVSX R8D, R14B 4"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000056b6"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000056b6: LEA RDX, [RIP + 21880] 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDX = 0x10000ac35 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000056bd"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDX = 0x10000ac35 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000056bd: MOV EDI, 1 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDX = 0x10000ac35 ; RDI = 1 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000056c2"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDX = 0x10000ac35 ; RDI = 1 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000056c2: MOV ESI, 0 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDX = 0x10000ac35 ; RDI = 1 ; RSI = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000056c7"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDX = 0x10000ac35 ; RDI = 1 ; RSI = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000056c7: MOV ECX, 106 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RCX = 106 ; RDX = 0x10000ac35 ; RDI = 1 ; RSI = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000056cc"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RCX = 106 ; RDX = 0x10000ac35 ; RDI = 1 ; RSI = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000056cc: JMP 4294989917 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RCX = 106 ; RDX = 0x10000ac35 ; RDI = 1 ; RSI = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 107 ##
#######################################
*)

htriple "ht_100004a29"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004a29: CMP R8B, 114 4"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004a2d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004a2d: JNE 4294989521 6"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 108 ##
#######################################
*)

htriple "ht_100004a33"
 Separations "((RSP_0 -64 280),1) SEP (bot(fun____error),4); ((RSP_0 -64 280),1) SEP (RSI_0,8); ((RSP_0 -64 280),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 280),1) SEP (0x10000c008,8); ((RSP_0 -64 280),1) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 280),1) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004a33: MOV BYTE PTR [RBP - 272], 114 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 280),1] = 114"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004a3a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 280),1] = 114"
 Instruction "100004a3a: JMP 4294987606 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 280),1] = 114"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 109 ##
#######################################
*)

htriple "ht_1000056d1"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000056d1: LEA RDX, [RIP + 21853] 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDX = 0x10000ac35 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000056d8"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDX = 0x10000ac35 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000056d8: MOV EDI, 1 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDX = 0x10000ac35 ; RDI = 1 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000056dd"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDX = 0x10000ac35 ; RDI = 1 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000056dd: MOV ESI, 0 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDX = 0x10000ac35 ; RDI = 1 ; RSI = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000056e2"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDX = 0x10000ac35 ; RDI = 1 ; RSI = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000056e2: MOV ECX, 114 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RCX = 114 ; RDX = 0x10000ac35 ; RDI = 1 ; RSI = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000056e7"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RCX = 114 ; RDX = 0x10000ac35 ; RDI = 1 ; RSI = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000056e7: JMP 4294989917 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RCX = 114 ; RDX = 0x10000ac35 ; RDI = 1 ; RSI = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 110 ##
#######################################
*)

htriple "ht_100004a5a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__atoi) ; RBX = 0x1000058a0 ; RCX = (b32(bot(fun__atoi)) -32 1) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004a5a: SHL EAX, 9 3"
 Post  "RAX = (b32(bot(fun__atoi)) *32 512) ; RBX = 0x1000058a0 ; RCX = (b32(bot(fun__atoi)) -32 1) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004a5d"
 Separations "((RSP_0 -64 344),4) SEP (bot(fun____error),4); ((RSP_0 -64 344),4) SEP (RSI_0,8); ((RSP_0 -64 344),4) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 344),4) SEP (0x10000c008,8); ((RSP_0 -64 344),4) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 344),4) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4); ((RSP_0 -64 344),8) SEP ([0x10000c008,8]_0,8)"
 Assertions  ""
 Pre   "RAX = (b32(bot(fun__atoi)) *32 512) ; RBX = 0x1000058a0 ; RCX = (b32(bot(fun__atoi)) -32 1) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004a5d: MOV DWORD PTR [RBP - 336], EAX 6"
 Post  "RAX = (b32(bot(fun__atoi)) *32 512) ; RBX = 0x1000058a0 ; RCX = (b32(bot(fun__atoi)) -32 1) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004a63"
 Separations "((RSP_0 -64 340),4) SEP (bot(fun____error),4); ((RSP_0 -64 340),4) SEP (RSI_0,8); ((RSP_0 -64 340),4) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 340),4) SEP (0x10000c008,8); ((RSP_0 -64 340),4) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 340),4) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = (b32(bot(fun__atoi)) *32 512) ; RBX = 0x1000058a0 ; RCX = (b32(bot(fun__atoi)) -32 1) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004a63: MOV DWORD PTR [RBP - 332], EAX 6"
 Post  "RAX = (b32(bot(fun__atoi)) *32 512) ; RBX = 0x1000058a0 ; RCX = (b32(bot(fun__atoi)) -32 1) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004a69"
 Separations ""
 Assertions  ""
 Pre   "RAX = (b32(bot(fun__atoi)) *32 512) ; RBX = 0x1000058a0 ; RCX = (b32(bot(fun__atoi)) -32 1) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004a69: JMP 4294987606 5"
 Post  "RAX = (b32(bot(fun__atoi)) *32 512) ; RBX = 0x1000058a0 ; RCX = (b32(bot(fun__atoi)) -32 1) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 111 ##
#######################################
*)

htriple "ht_1000056ec"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__atoi) ; RBX = 0x1000058a0 ; RCX = (b32(bot(fun__atoi)) -32 1) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000056ec: LEA RDX, [RIP + 21647] 7"
 Post  "RAX = bot(fun__atoi) ; RBX = 0x1000058a0 ; RCX = (b32(bot(fun__atoi)) -32 1) ; RDX = 0x10000ab82 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000056f3"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__atoi) ; RBX = 0x1000058a0 ; RCX = (b32(bot(fun__atoi)) -32 1) ; RDX = 0x10000ab82 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000056f3: JMP 4294989968 5"
 Post  "RAX = bot(fun__atoi) ; RBX = 0x1000058a0 ; RCX = (b32(bot(fun__atoi)) -32 1) ; RDX = 0x10000ab82 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 112 ##
#######################################
*)

htriple "ht_100004a7e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004a7e: LEA RDI, [RBP - 360] 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDI = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004a85"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDI = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004a85: ExternalCall fun_0x1000077cd 5"
 Post  "RAX = bot(fun_0x1000077cd) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 FunctionConstraints "PRESERVES fun_0x1000077cd {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 120),8];[(RSP_0 -64 192),4];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 256),8];[(RSP_0 -64 264),1];[(RSP_0 -64 272),8];[(RSP_0 -64 279),1];[(RSP_0 -64 280),1];[(RSP_0 -64 288),8];[(RSP_0 -64 296),8];[(RSP_0 -64 304),4];[(RSP_0 -64 312),8];[(RSP_0 -64 316),4];[(RSP_0 -64 320),4];[(RSP_0 -64 324),4];[(RSP_0 -64 328),4];[(RSP_0 -64 332),4];[(RSP_0 -64 336),4];[(RSP_0 -64 344),8];[(RSP_0 -64 352),8];[(RSP_0 -64 368),8];[(RSP_0 -64 376),8];[(RSP_0 -64 384),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004a8a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000077cd) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004a8a: JMP 4294987606 5"
 Post  "RAX = bot(fun_0x1000077cd) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 113 ##
#######################################
*)

htriple "ht_1000056f8"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000056f8: LEA RDX, [RIP + 21732] 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDX = 0x10000abe3 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000056ff"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDX = 0x10000abe3 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000056ff: JMP 4294989968 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDX = 0x10000abe3 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 114 ##
#######################################
*)

htriple "ht_100004aa8"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004aa8: CMP R8B, 116 4"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004aac"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004aac: JNE 4294989572 6"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 115 ##
#######################################
*)

htriple "ht_100004ab2"
 Separations "((RSP_0 -64 280),1) SEP (bot(fun____error),4); ((RSP_0 -64 280),1) SEP (RSI_0,8); ((RSP_0 -64 280),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 280),1) SEP (0x10000c008,8); ((RSP_0 -64 280),1) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 280),1) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004ab2: MOV BYTE PTR [RBP - 272], 116 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 280),1] = 116"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 116 ##
#######################################
*)

htriple "ht_100005704"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005704: LEA RDX, [RIP + 21802] 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDX = 0x10000ac35 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000570b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDX = 0x10000ac35 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000570b: MOV EDI, 1 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDX = 0x10000ac35 ; RDI = 1 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005710"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDX = 0x10000ac35 ; RDI = 1 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005710: MOV ESI, 0 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDX = 0x10000ac35 ; RDI = 1 ; RSI = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005715"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDX = 0x10000ac35 ; RDI = 1 ; RSI = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005715: MOV ECX, 116 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RCX = 116 ; RDX = 0x10000ac35 ; RDI = 1 ; RSI = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000571a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RCX = 116 ; RDX = 0x10000ac35 ; RDI = 1 ; RSI = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000571a: JMP 4294989917 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RCX = 116 ; RDX = 0x10000ac35 ; RDI = 1 ; RSI = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 117 ##
#######################################
*)

htriple "ht_100004b2a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004b2a: CMP R8B, 99 4"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004b2e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004b2e: JNE 4294989599 6"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 118 ##
#######################################
*)

htriple "ht_100004b34"
 Separations "((RSP_0 -64 280),1) SEP (bot(fun____error),4); ((RSP_0 -64 280),1) SEP (RSI_0,8); ((RSP_0 -64 280),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 280),1) SEP (0x10000c008,8); ((RSP_0 -64 280),1) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 280),1) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004b34: MOV BYTE PTR [RBP - 272], 99 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 280),1] = 99"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004b3b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 280),1] = 99"
 Instruction "100004b3b: JMP 4294987606 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 280),1] = 99"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 119 ##
#######################################
*)

htriple "ht_10000571f"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000571f: LEA RDX, [RIP + 21775] 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDX = 0x10000ac35 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005726"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDX = 0x10000ac35 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005726: MOV EDI, 1 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDX = 0x10000ac35 ; RDI = 1 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000572b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDX = 0x10000ac35 ; RDI = 1 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000572b: MOV ESI, 0 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDX = 0x10000ac35 ; RDI = 1 ; RSI = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005730"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDX = 0x10000ac35 ; RDI = 1 ; RSI = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005730: MOV ECX, 99 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RCX = 99 ; RDX = 0x10000ac35 ; RDI = 1 ; RSI = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005735"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RCX = 99 ; RDX = 0x10000ac35 ; RDI = 1 ; RSI = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005735: JMP 4294989917 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RCX = 99 ; RDX = 0x10000ac35 ; RDI = 1 ; RSI = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 120 ##
#######################################
*)

htriple "ht_100004b91"
 Separations "((RSP_0 -64 304),4) SEP (bot(fun____error),4); ((RSP_0 -64 304),4) SEP (RSI_0,8); ((RSP_0 -64 304),4) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 304),4) SEP (0x10000c008,8); ((RSP_0 -64 304),4) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 304),4) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun__atoi) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004b91: MOV DWORD PTR [RBP - 296], EAX 6"
 Post  "RAX = bot(fun__atoi) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 304),4] = b32(bot(fun__atoi))"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004b97"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__atoi) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 304),4] = b32(bot(fun__atoi))"
 Instruction "100004b97: JMP 4294987606 5"
 Post  "RAX = bot(fun__atoi) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 304),4] = b32(bot(fun__atoi))"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 121 ##
#######################################
*)

htriple "ht_10000573a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__atoi) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000573a: LEA RDX, [RIP + 21869] 7"
 Post  "RAX = bot(fun__atoi) ; RBX = 0x1000058a0 ; RDX = 0x10000acae ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005741"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__atoi) ; RBX = 0x1000058a0 ; RDX = 0x10000acae ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005741: JMP 4294989968 5"
 Post  "RAX = bot(fun__atoi) ; RBX = 0x1000058a0 ; RDX = 0x10000acae ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 122 ##
#######################################
*)

htriple "ht_100004ed9"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDI = bot(fun__archive_match_new) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004ed9: ExternalCall fun__archive_match_include_file_time 5"
 Post  "RAX = bot(fun__archive_match_include_file_time) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 FunctionConstraints "PRESERVES fun__archive_match_include_file_time {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 120),8];[(RSP_0 -64 192),4];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 256),8];[(RSP_0 -64 264),1];[(RSP_0 -64 272),8];[(RSP_0 -64 279),1];[(RSP_0 -64 280),1];[(RSP_0 -64 288),8];[(RSP_0 -64 296),8];[(RSP_0 -64 304),4];[(RSP_0 -64 312),8];[(RSP_0 -64 316),4];[(RSP_0 -64 320),4];[(RSP_0 -64 324),4];[(RSP_0 -64 328),4];[(RSP_0 -64 332),4];[(RSP_0 -64 336),4];[(RSP_0 -64 344),8];[(RSP_0 -64 352),8];[(RSP_0 -64 368),8];[(RSP_0 -64 376),8];[(RSP_0 -64 384),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004ede"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_match_include_file_time) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004ede: JMP 4294987598 2"
 Post  "RAX = bot(fun__archive_match_include_file_time) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 123 ##
#######################################
*)

htriple "ht_100004bd6"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004bd6: CMP R8B, 117 4"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004bda"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004bda: JNE 4294989638 6"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 124 ##
#######################################
*)

htriple "ht_100004be0"
 Separations "((RSP_0 -64 280),1) SEP (bot(fun____error),4); ((RSP_0 -64 280),1) SEP (RSI_0,8); ((RSP_0 -64 280),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 280),1) SEP (0x10000c008,8); ((RSP_0 -64 280),1) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 280),1) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004be0: MOV BYTE PTR [RBP - 272], 117 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 280),1] = 117"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004be7"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 280),1] = 117"
 Instruction "100004be7: JMP 4294987606 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 280),1] = 117"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 125 ##
#######################################
*)

htriple "ht_100005746"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005746: LEA RDX, [RIP + 21736] 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDX = 0x10000ac35 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000574d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDX = 0x10000ac35 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000574d: MOV EDI, 1 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDX = 0x10000ac35 ; RDI = 1 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005752"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDX = 0x10000ac35 ; RDI = 1 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005752: MOV ESI, 0 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDX = 0x10000ac35 ; RDI = 1 ; RSI = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005757"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDX = 0x10000ac35 ; RDI = 1 ; RSI = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005757: MOV ECX, 117 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RCX = 117 ; RDX = 0x10000ac35 ; RDI = 1 ; RSI = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000575c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RCX = 117 ; RDX = 0x10000ac35 ; RDI = 1 ; RSI = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000575c: JMP 4294989917 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RCX = 117 ; RDX = 0x10000ac35 ; RDI = 1 ; RSI = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 126 ##
#######################################
*)

htriple "ht_100004c35"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004c35: LEA R13, [RIP + 23953] 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R13 = 0x10000a9cd ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004c3c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R13 = 0x10000a9cd ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004c3c: MOV R14B, 90 3"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R13 = 0x10000a9cd ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004c3f"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R13 = 0x10000a9cd ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004c3f: JMP 4294987606 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R13 = 0x10000a9cd ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 127 ##
#######################################
*)

htriple "ht_100005761"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005761: MOVSX R8D, R14B 4"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005765"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005765: LEA RDX, [RIP + 21705] 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDX = 0x10000ac35 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000576c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDX = 0x10000ac35 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000576c: MOV EDI, 1 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDX = 0x10000ac35 ; RDI = 1 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005771"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDX = 0x10000ac35 ; RDI = 1 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005771: MOV ESI, 0 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDX = 0x10000ac35 ; RDI = 1 ; RSI = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005776"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDX = 0x10000ac35 ; RDI = 1 ; RSI = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005776: MOV ECX, 90 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RCX = 90 ; RDX = 0x10000ac35 ; RDI = 1 ; RSI = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000577b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RCX = 90 ; RDX = 0x10000ac35 ; RDI = 1 ; RSI = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000577b: JMP 4294989917 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RCX = 90 ; RDX = 0x10000ac35 ; RDI = 1 ; RSI = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 128 ##
#######################################
*)

htriple "ht_100004cad"
 Separations "((RSP_0 -64 316),4) SEP (bot(fun____error),4); ((RSP_0 -64 316),4) SEP (RSI_0,8); ((RSP_0 -64 316),4) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 316),4) SEP (0x10000c008,8); ((RSP_0 -64 316),4) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 316),4) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun__atoi) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004cad: MOV DWORD PTR [RBP - 308], EAX 6"
 Post  "RAX = bot(fun__atoi) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 316),4] = b32(bot(fun__atoi))"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004cb3"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__atoi) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 316),4] = b32(bot(fun__atoi))"
 Instruction "100004cb3: JMP 4294987606 5"
 Post  "RAX = bot(fun__atoi) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 316),4] = b32(bot(fun__atoi))"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 129 ##
#######################################
*)

htriple "ht_100005780"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__atoi) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005780: LEA RDX, [RIP + 21643] 7"
 Post  "RAX = bot(fun__atoi) ; RBX = 0x1000058a0 ; RDX = 0x10000ac12 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005787"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__atoi) ; RBX = 0x1000058a0 ; RDX = 0x10000ac12 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005787: JMP 4294989968 5"
 Post  "RAX = bot(fun__atoi) ; RBX = 0x1000058a0 ; RDX = 0x10000ac12 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 130 ##
#######################################
*)

htriple "ht_100004ccd"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004ccd: LEA R13, [RIP + 23835] 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R13 = 0x10000a9ef ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004cd4"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R13 = 0x10000a9ef ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004cd4: MOV R14B, 11 3"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R13 = 0x10000a9ef ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004cd7"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R13 = 0x10000a9ef ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004cd7: JMP 4294987606 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R13 = 0x10000a9ef ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 131 ##
#######################################
*)

htriple "ht_10000578c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000578c: MOVSX R8D, R14B 4"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005790"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005790: LEA RDX, [RIP + 21662] 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDX = 0x10000ac35 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005797"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDX = 0x10000ac35 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005797: MOV EDI, 1 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDX = 0x10000ac35 ; RDI = 1 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000579c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDX = 0x10000ac35 ; RDI = 1 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000579c: MOV ESI, 0 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDX = 0x10000ac35 ; RDI = 1 ; RSI = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000057a1"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDX = 0x10000ac35 ; RDI = 1 ; RSI = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000057a1: MOV ECX, 11 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RCX = 11 ; RDX = 0x10000ac35 ; RDI = 1 ; RSI = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000057a6"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RCX = 11 ; RDX = 0x10000ac35 ; RDI = 1 ; RSI = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000057a6: JMP 4294989917 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RCX = 11 ; RDX = 0x10000ac35 ; RDI = 1 ; RSI = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 132 ##
#######################################
*)

htriple "ht_100004cf1"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004cf1: LEA RAX, [RIP + 24289] 7"
 Post  "RAX = 0x10000abd9 ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004cf8"
 Separations "((RSP_0 -64 376),8) SEP (bot(fun____error),4); ((RSP_0 -64 376),8) SEP (RSI_0,8); ((RSP_0 -64 376),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 376),8) SEP (0x10000c008,8); ((RSP_0 -64 376),8) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 376),8) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = 0x10000abd9 ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004cf8: MOV QWORD PTR [RBP - 368], RAX 7"
 Post  "RAX = 0x10000abd9 ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 376),8] = 0x10000abd9"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004cff"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x10000abd9 ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 376),8] = 0x10000abd9"
 Instruction "100004cff: MOV R12B, 2 3"
 Post  "RAX = 0x10000abd9 ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 376),8] = 0x10000abd9"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004d02"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x10000abd9 ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 376),8] = 0x10000abd9"
 Instruction "100004d02: JMP 4294987606 5"
 Post  "RAX = 0x10000abd9 ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 376),8] = 0x10000abd9"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 133 ##
#######################################
*)

htriple "ht_100005822"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005822: LEA RDX, [RIP + 21378] 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDX = 0x10000abab ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005829"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDX = 0x10000abab ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005829: JMP 4294989968 2"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDX = 0x10000abab ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 134 ##
#######################################
*)

htriple "ht_100004da6"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDI = bot(fun_0x100004559) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004da6: ExternalCall fun_0x1000044a7 5"
 Post  "RAX = bot(fun_0x1000044a7) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 FunctionConstraints "PRESERVES fun_0x1000044a7 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 120),8];[(RSP_0 -64 192),4];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 256),8];[(RSP_0 -64 264),1];[(RSP_0 -64 272),8];[(RSP_0 -64 279),1];[(RSP_0 -64 280),1];[(RSP_0 -64 288),8];[(RSP_0 -64 296),8];[(RSP_0 -64 304),4];[(RSP_0 -64 312),8];[(RSP_0 -64 316),4];[(RSP_0 -64 320),4];[(RSP_0 -64 324),4];[(RSP_0 -64 328),4];[(RSP_0 -64 332),4];[(RSP_0 -64 336),4];[(RSP_0 -64 344),8];[(RSP_0 -64 352),8];[(RSP_0 -64 368),8];[(RSP_0 -64 376),8];[(RSP_0 -64 384),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004dab"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000044a7) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004dab: JMP 4294987606 5"
 Post  "RAX = bot(fun_0x1000044a7) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 135 ##
#######################################
*)

htriple "ht_100004f49"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDI = bot(fun__archive_match_new) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004f49: ExternalCall fun__archive_match_include_date 5"
 Post  "RAX = bot(fun__archive_match_include_date) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 FunctionConstraints "PRESERVES fun__archive_match_include_date {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 120),8];[(RSP_0 -64 192),4];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 256),8];[(RSP_0 -64 264),1];[(RSP_0 -64 272),8];[(RSP_0 -64 279),1];[(RSP_0 -64 280),1];[(RSP_0 -64 288),8];[(RSP_0 -64 296),8];[(RSP_0 -64 304),4];[(RSP_0 -64 312),8];[(RSP_0 -64 316),4];[(RSP_0 -64 320),4];[(RSP_0 -64 324),4];[(RSP_0 -64 328),4];[(RSP_0 -64 332),4];[(RSP_0 -64 336),4];[(RSP_0 -64 344),8];[(RSP_0 -64 352),8];[(RSP_0 -64 368),8];[(RSP_0 -64 376),8];[(RSP_0 -64 384),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 136 ##
#######################################
*)

htriple "ht_100004ddd"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_match_exclude_pattern) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004ddd: JMP 4294989739 5"
 Post  "RAX = bot(fun__archive_match_exclude_pattern) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000057ab"
 Separations "((RSP_0 -64 216),8) SEP (bot(fun____error),4); ((RSP_0 -64 216),8) SEP ([0x10000c008,8]_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun__archive_match_exclude_pattern) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000057ab: MOV RCX, QWORD PTR [RBP - 208] 7"
 Post  "RAX = bot(fun__archive_match_exclude_pattern) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000057b2"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_match_exclude_pattern) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000057b2: LEA RDX, [RIP + 21572] 7"
 Post  "RAX = bot(fun__archive_match_exclude_pattern) ; RBX = 0x1000058a0 ; RDX = 0x10000abfd ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000057b9"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_match_exclude_pattern) ; RBX = 0x1000058a0 ; RDX = 0x10000abfd ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000057b9: JMP 4294989844 2"
 Post  "RAX = bot(fun__archive_match_exclude_pattern) ; RBX = 0x1000058a0 ; RDX = 0x10000abfd ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 137 ##
#######################################
*)

htriple "ht_100004e66"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004e66: LEA R13, [RIP + 23499] 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R13 = 0x10000aa38 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004e6d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R13 = 0x10000aa38 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004e6d: MOV R14B, 74 3"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R13 = 0x10000aa38 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004e70"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R13 = 0x10000aa38 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004e70: JMP 4294987606 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R13 = 0x10000aa38 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 138 ##
#######################################
*)

htriple "ht_1000057bb"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000057bb: MOVSX R8D, R14B 4"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000057bf"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000057bf: LEA RDX, [RIP + 21615] 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDX = 0x10000ac35 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000057c6"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDX = 0x10000ac35 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000057c6: MOV EDI, 1 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDX = 0x10000ac35 ; RDI = 1 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000057cb"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDX = 0x10000ac35 ; RDI = 1 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000057cb: MOV ESI, 0 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDX = 0x10000ac35 ; RDI = 1 ; RSI = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000057d0"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDX = 0x10000ac35 ; RDI = 1 ; RSI = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000057d0: MOV ECX, 74 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RCX = 74 ; RDX = 0x10000ac35 ; RDI = 1 ; RSI = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000057d5"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RCX = 74 ; RDX = 0x10000ac35 ; RDI = 1 ; RSI = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000057d5: JMP 4294989917 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RCX = 74 ; RDX = 0x10000ac35 ; RDI = 1 ; RSI = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 139 ##
#######################################
*)

htriple "ht_100004ec4"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_match_include_pattern) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004ec4: JMP 4294989814 5"
 Post  "RAX = bot(fun__archive_match_include_pattern) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000057f6"
 Separations "((RSP_0 -64 216),8) SEP (bot(fun____error),4); ((RSP_0 -64 216),8) SEP ([0x10000c008,8]_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun__archive_match_include_pattern) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000057f6: MOV RCX, QWORD PTR [RBP - 208] 7"
 Post  "RAX = bot(fun__archive_match_include_pattern) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000057fd"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_match_include_pattern) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000057fd: LEA RDX, [RIP + 21584] 7"
 Post  "RAX = bot(fun__archive_match_include_pattern) ; RBX = 0x1000058a0 ; RDX = 0x10000ac54 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005804"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_match_include_pattern) ; RBX = 0x1000058a0 ; RDX = 0x10000ac54 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005804: JMP 4294989844 2"
 Post  "RAX = bot(fun__archive_match_include_pattern) ; RBX = 0x1000058a0 ; RDX = 0x10000ac54 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 140 ##
#######################################
*)

htriple "ht_100004f4e"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004f4e: TEST EAX, EAX 2"
 Post  "RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004f50"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004f50: JNE 4294989415 6"
 Post  "RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 141 ##
#######################################
*)

htriple "ht_100005667"
 Separations "((RSP_0 -64 120),8) SEP (bot(fun____error),4); ((RSP_0 -64 120),8) SEP (RSI_0,8); ((RSP_0 -64 120),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 120),8) SEP (0x10000c008,8); ((RSP_0 -64 120),8) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 120),8) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005667: MOV RDI, QWORD PTR [RBP - 112] 4"
 Post  "RBX = 0x1000058a0 ; RDI = bot(fun__archive_match_new) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000566b"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x1000058a0 ; RDI = bot(fun__archive_match_new) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000566b: ExternalCall fun__archive_error_string 5"
 Post  "RAX = bot(fun__archive_error_string) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 FunctionConstraints "PRESERVES fun__archive_error_string {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 120),8];[(RSP_0 -64 192),4];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 256),8];[(RSP_0 -64 264),1];[(RSP_0 -64 272),8];[(RSP_0 -64 279),1];[(RSP_0 -64 280),1];[(RSP_0 -64 288),8];[(RSP_0 -64 296),8];[(RSP_0 -64 304),4];[(RSP_0 -64 312),8];[(RSP_0 -64 316),4];[(RSP_0 -64 320),4];[(RSP_0 -64 324),4];[(RSP_0 -64 328),4];[(RSP_0 -64 332),4];[(RSP_0 -64 336),4];[(RSP_0 -64 344),8];[(RSP_0 -64 352),8];[(RSP_0 -64 368),8];[(RSP_0 -64 376),8];[(RSP_0 -64 384),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005670"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_error_string) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005670: LEA RDX, [RIP + 22016] 7"
 Post  "RAX = bot(fun__archive_error_string) ; RBX = 0x1000058a0 ; RDX = 0x10000ac77 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005677"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_error_string) ; RBX = 0x1000058a0 ; RDX = 0x10000ac77 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005677: MOV EDI, 1 5"
 Post  "RAX = bot(fun__archive_error_string) ; RBX = 0x1000058a0 ; RDX = 0x10000ac77 ; RDI = 1 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000567c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_error_string) ; RBX = 0x1000058a0 ; RDX = 0x10000ac77 ; RDI = 1 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000567c: XOR ESI, ESI 2"
 Post  "RAX = bot(fun__archive_error_string) ; RBX = 0x1000058a0 ; RDX = 0x10000ac77 ; RDI = 1 ; RSI = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000567e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_error_string) ; RBX = 0x1000058a0 ; RDX = 0x10000ac77 ; RDI = 1 ; RSI = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000567e: MOV RCX, RAX 3"
 Post  "RAX = bot(fun__archive_error_string) ; RBX = 0x1000058a0 ; RCX = bot(fun__archive_error_string) ; RDX = 0x10000ac77 ; RDI = 1 ; RSI = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005681"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_error_string) ; RBX = 0x1000058a0 ; RCX = bot(fun__archive_error_string) ; RDX = 0x10000ac77 ; RDI = 1 ; RSI = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005681: JMP 4294989851 5"
 Post  "RAX = bot(fun__archive_error_string) ; RBX = 0x1000058a0 ; RCX = bot(fun__archive_error_string) ; RDX = 0x10000ac77 ; RDI = 1 ; RSI = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 142 ##
#######################################
*)

htriple "ht_10000499c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000499c: LEA ECX, [RAX - 1] 3"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RCX = (b32(bot(fun_0x100005c50)) -32 1) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000499f"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RCX = (b32(bot(fun_0x100005c50)) -32 1) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000499f: CMP ECX, 121 3"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RCX = (b32(bot(fun_0x100005c50)) -32 1) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000049a2"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RCX = (b32(bot(fun_0x100005c50)) -32 1) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000049a2: JA 4294989405 6"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RCX = (b32(bot(fun_0x100005c50)) -32 1) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 143 ##
#######################################
*)

htriple "ht_100004f6b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004f6b: JMP 4294987927 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005097"
 Separations "((RSP_0 -64 280),1) SEP (bot(fun____error),4); ((RSP_0 -64 280),1) SEP (RSI_0,8); ((RSP_0 -64 280),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 280),1) SEP (0x10000c008,8); ((RSP_0 -64 280),1) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 280),1) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005097: MOV AL, BYTE PTR [RBP - 272] 6"
 Post  "RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000509d"
 Separations "((RSP_0 -64 384),1) SEP (bot(fun____error),4); ((RSP_0 -64 384),1) SEP (RSI_0,8); ((RSP_0 -64 384),1) SEP (0x10000c008,8); ((RSP_0 -64 384),1) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 384),1) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4); ((RSP_0 -64 384),8) SEP (bot(fun____error),4); ((RSP_0 -64 384),8) SEP ([0x10000c008,8]_0,8)"
 Assertions  ""
 Pre   "RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000509d: CMP BYTE PTR [RBP - 376], 0 7"
 Post  "RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000050a4"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000050a4: JE 4294987978 2"
 Post  "RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 144 ##
#######################################
*)

htriple "ht_100004f9b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun____error) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 320),4] = b32(bot(fun__strtol))"
 Instruction "100004f9b: JMP 4294989830 5"
 Post  "RAX = bot(fun____error) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 320),4] = b32(bot(fun__strtol))"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005806"
 Separations "((RSP_0 -64 216),8) SEP (bot(fun____error),4); ((RSP_0 -64 216),8) SEP ([0x10000c008,8]_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun____error) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 320),4] = b32(bot(fun__strtol))"
 Instruction "100005806: MOV RCX, QWORD PTR [RBP - 208] 7"
 Post  "RAX = bot(fun____error) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 320),4] = b32(bot(fun__strtol))"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000580d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun____error) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 320),4] = b32(bot(fun__strtol))"
 Instruction "10000580d: LEA RDX, [RIP + 21618] 7"
 Post  "RAX = bot(fun____error) ; RBX = 0x1000058a0 ; RDX = 0x10000ac86 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 320),4] = b32(bot(fun__strtol))"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 145 ##
#######################################
*)

htriple "ht_100004fe3"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004fe3: LEA RAX, [RIP + 23105] 7"
 Post  "RAX = 0x10000aa2b ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004fea"
 Separations "((RSP_0 -64 376),8) SEP (bot(fun____error),4); ((RSP_0 -64 376),8) SEP (RSI_0,8); ((RSP_0 -64 376),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 376),8) SEP (0x10000c008,8); ((RSP_0 -64 376),8) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 376),8) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = 0x10000aa2b ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100004fea: MOV QWORD PTR [RBP - 368], RAX 7"
 Post  "RAX = 0x10000aa2b ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 376),8] = 0x10000aa2b"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004ff1"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x10000aa2b ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 376),8] = 0x10000aa2b"
 Instruction "100004ff1: MOV R12B, 51 3"
 Post  "RAX = 0x10000aa2b ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 376),8] = 0x10000aa2b"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004ff4"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x10000aa2b ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 376),8] = 0x10000aa2b"
 Instruction "100004ff4: JMP 4294987606 5"
 Post  "RAX = 0x10000aa2b ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 376),8] = 0x10000aa2b"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 146 ##
#######################################
*)

htriple "ht_100005021"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005021: LEA R13, [RIP + 22963] 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R13 = 0x10000a9db ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005028"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R13 = 0x10000a9db ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005028: MOV R14B, 121 3"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R13 = 0x10000a9db ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000502b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R13 = 0x10000a9db ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000502b: JMP 4294987606 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R13 = 0x10000a9db ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 147 ##
#######################################
*)

htriple "ht_10000582b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000582b: MOVSX R8D, R14B 4"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000582f"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000582f: LEA RDX, [RIP + 21503] 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDX = 0x10000ac35 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005836"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDX = 0x10000ac35 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005836: MOV EDI, 1 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDX = 0x10000ac35 ; RDI = 1 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000583b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDX = 0x10000ac35 ; RDI = 1 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000583b: MOV ESI, 0 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDX = 0x10000ac35 ; RDI = 1 ; RSI = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005840"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDX = 0x10000ac35 ; RDI = 1 ; RSI = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005840: MOV ECX, 121 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RCX = 121 ; RDX = 0x10000ac35 ; RDI = 1 ; RSI = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005845"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RCX = 121 ; RDX = 0x10000ac35 ; RDI = 1 ; RSI = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005845: JMP 4294989917 2"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RCX = 121 ; RDX = 0x10000ac35 ; RDI = 1 ; RSI = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 148 ##
#######################################
*)

htriple "ht_10000503d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000503d: CMP R8B, 120 4"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005041"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005041: JNE 4294989895 6"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 149 ##
#######################################
*)

htriple "ht_100005047"
 Separations "((RSP_0 -64 280),1) SEP (bot(fun____error),4); ((RSP_0 -64 280),1) SEP (RSI_0,8); ((RSP_0 -64 280),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 280),1) SEP (0x10000c008,8); ((RSP_0 -64 280),1) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 280),1) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005047: MOV BYTE PTR [RBP - 272], 120 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 280),1] = 120"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000504e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 280),1] = 120"
 Instruction "10000504e: JMP 4294987606 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 280),1] = 120"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 150 ##
#######################################
*)

htriple "ht_100005847"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005847: LEA RDX, [RIP + 21479] 7"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDX = 0x10000ac35 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000584e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDX = 0x10000ac35 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000584e: MOV EDI, 1 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDX = 0x10000ac35 ; RDI = 1 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005853"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDX = 0x10000ac35 ; RDI = 1 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005853: MOV ESI, 0 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDX = 0x10000ac35 ; RDI = 1 ; RSI = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005858"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDX = 0x10000ac35 ; RDI = 1 ; RSI = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005858: MOV ECX, 120 5"
 Post  "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RCX = 120 ; RDX = 0x10000ac35 ; RDI = 1 ; RSI = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 151 ##
#######################################
*)

htriple "ht_1000050a6"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000050a6: TEST AL, AL 2"
 Post  "RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000050a8"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000050a8: JNE 4294987978 2"
 Post  "RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 152 ##
#######################################
*)

htriple "ht_1000050ca"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000050ca: TEST AL, AL 2"
 Post  "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000050cc"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000050cc: JE 4294989961 6"
 Post  "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 153 ##
#######################################
*)

htriple "ht_1000050d2"
 Separations "((RSP_0 -64 332),1) SEP (bot(fun____error),4); ((RSP_0 -64 332),1) SEP (RSI_0,8); ((RSP_0 -64 332),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 332),1) SEP (0x10000c008,8); ((RSP_0 -64 332),1) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 332),1) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4); ((RSP_0 -64 332),4) SEP (bot(fun____error),4); ((RSP_0 -64 332),4) SEP ([0x10000c008,8]_0,8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000050d2: TEST BYTE PTR [RBP - 324], 1 7"
 Post  "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000050d9"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000050d9: JE 4294988021 2"
 Post  "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 154 ##
#######################################
*)

htriple "ht_100005889"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005889: LEA RDX, [RIP + 21569] 7"
 Post  "RDX = 0x10000acd1 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 155 ##
#######################################
*)

htriple "ht_1000050db"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000050db: LEA RSI, [RIP + 23574] 7"
 Post  "RSI = 0x10000acf8 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000050e2"
 Separations ""
 Assertions  ""
 Pre   "RSI = 0x10000acf8 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000050e2: LEA RDX, [RIP + 23570] 7"
 Post  "RDX = 0x10000acfb ; RSI = 0x10000acf8 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000050e9"
 Separations ""
 Assertions  ""
 Pre   "RDX = 0x10000acfb ; RSI = 0x10000acf8 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000050e9: LEA RDI, [RBP - 360] 7"
 Post  "RDX = 0x10000acfb ; RDI = (RSP_0 -64 368) ; RSI = 0x10000acf8 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000050f0"
 Separations ""
 Assertions  ""
 Pre   "RDX = 0x10000acfb ; RDI = (RSP_0 -64 368) ; RSI = 0x10000acf8 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000050f0: ExternalCall fun_0x100005c13 5"
 Post  "RAX = bot(fun_0x100005c13) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 FunctionConstraints "PRESERVES fun_0x100005c13 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 120),8];[(RSP_0 -64 192),4];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 256),8];[(RSP_0 -64 264),1];[(RSP_0 -64 272),8];[(RSP_0 -64 279),1];[(RSP_0 -64 280),1];[(RSP_0 -64 288),8];[(RSP_0 -64 296),8];[(RSP_0 -64 304),4];[(RSP_0 -64 312),8];[(RSP_0 -64 316),4];[(RSP_0 -64 320),4];[(RSP_0 -64 324),4];[(RSP_0 -64 328),4];[(RSP_0 -64 332),4];[(RSP_0 -64 336),4];[(RSP_0 -64 344),8];[(RSP_0 -64 352),8];[(RSP_0 -64 368),8];[(RSP_0 -64 376),8];[(RSP_0 -64 384),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 156 ##
#######################################
*)

htriple "ht_1000050f5"
 Separations "((RSP_0 -64 324),1) SEP (bot(fun____error),4); ((RSP_0 -64 324),1) SEP (RSI_0,8); ((RSP_0 -64 324),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 324),1) SEP (0x10000c008,8); ((RSP_0 -64 324),1) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 324),1) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4); ((RSP_0 -64 324),4) SEP ([0x10000c008,8]_0,8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000050f5: TEST BYTE PTR [RBP - 316], 8 7"
 Post  "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000050fc"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000050fc: JE 4294988056 2"
 Post  "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 157 ##
#######################################
*)

htriple "ht_1000050fe"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000050fe: LEA RSI, [RIP + 23544] 7"
 Post  "RSI = 0x10000acfd ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005105"
 Separations ""
 Assertions  ""
 Pre   "RSI = 0x10000acfd ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005105: LEA RDX, [RIP + 23555] 7"
 Post  "RDX = 0x10000ad0f ; RSI = 0x10000acfd ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000510c"
 Separations ""
 Assertions  ""
 Pre   "RDX = 0x10000ad0f ; RSI = 0x10000acfd ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000510c: LEA RDI, [RBP - 360] 7"
 Post  "RDX = 0x10000ad0f ; RDI = (RSP_0 -64 368) ; RSI = 0x10000acfd ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005113"
 Separations ""
 Assertions  ""
 Pre   "RDX = 0x10000ad0f ; RDI = (RSP_0 -64 368) ; RSI = 0x10000acfd ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005113: ExternalCall fun_0x100005c13 5"
 Post  "RAX = bot(fun_0x100005c13) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 FunctionConstraints "PRESERVES fun_0x100005c13 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 120),8];[(RSP_0 -64 192),4];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 256),8];[(RSP_0 -64 264),1];[(RSP_0 -64 272),8];[(RSP_0 -64 279),1];[(RSP_0 -64 280),1];[(RSP_0 -64 288),8];[(RSP_0 -64 296),8];[(RSP_0 -64 304),4];[(RSP_0 -64 312),8];[(RSP_0 -64 316),4];[(RSP_0 -64 320),4];[(RSP_0 -64 324),4];[(RSP_0 -64 328),4];[(RSP_0 -64 332),4];[(RSP_0 -64 336),4];[(RSP_0 -64 344),8];[(RSP_0 -64 352),8];[(RSP_0 -64 368),8];[(RSP_0 -64 376),8];[(RSP_0 -64 384),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 158 ##
#######################################
*)

htriple "ht_100005118"
 Separations "((RSP_0 -64 332),1) SEP (bot(fun____error),4); ((RSP_0 -64 332),1) SEP (RSI_0,8); ((RSP_0 -64 332),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 332),1) SEP (0x10000c008,8); ((RSP_0 -64 332),1) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 332),1) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4); ((RSP_0 -64 332),4) SEP (bot(fun____error),4); ((RSP_0 -64 332),4) SEP ([0x10000c008,8]_0,8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005118: TEST BYTE PTR [RBP - 324], 8 7"
 Post  "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000511f"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000511f: JE 4294988091 2"
 Post  "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 159 ##
#######################################
*)

htriple "ht_100005121"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005121: LEA RSI, [RIP + 23531] 7"
 Post  "RSI = 0x10000ad13 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005128"
 Separations ""
 Assertions  ""
 Pre   "RSI = 0x10000ad13 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005128: LEA RDX, [RIP + 23536] 7"
 Post  "RDX = 0x10000ad1f ; RSI = 0x10000ad13 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000512f"
 Separations ""
 Assertions  ""
 Pre   "RDX = 0x10000ad1f ; RSI = 0x10000ad13 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000512f: LEA RDI, [RBP - 360] 7"
 Post  "RDX = 0x10000ad1f ; RDI = (RSP_0 -64 368) ; RSI = 0x10000ad13 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005136"
 Separations ""
 Assertions  ""
 Pre   "RDX = 0x10000ad1f ; RDI = (RSP_0 -64 368) ; RSI = 0x10000ad13 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005136: ExternalCall fun_0x100005c13 5"
 Post  "RAX = bot(fun_0x100005c13) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 FunctionConstraints "PRESERVES fun_0x100005c13 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 120),8];[(RSP_0 -64 192),4];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 256),8];[(RSP_0 -64 264),1];[(RSP_0 -64 272),8];[(RSP_0 -64 279),1];[(RSP_0 -64 280),1];[(RSP_0 -64 288),8];[(RSP_0 -64 296),8];[(RSP_0 -64 304),4];[(RSP_0 -64 312),8];[(RSP_0 -64 316),4];[(RSP_0 -64 320),4];[(RSP_0 -64 324),4];[(RSP_0 -64 328),4];[(RSP_0 -64 332),4];[(RSP_0 -64 336),4];[(RSP_0 -64 344),8];[(RSP_0 -64 352),8];[(RSP_0 -64 368),8];[(RSP_0 -64 376),8];[(RSP_0 -64 384),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 160 ##
#######################################
*)

htriple "ht_10000513b"
 Separations "((RSP_0 -64 328),1) SEP (bot(fun____error),4); ((RSP_0 -64 328),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 328),4) SEP (bot(fun____error),4); ((RSP_0 -64 328),4) SEP (RSI_0,8); ((RSP_0 -64 328),4) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 328),4) SEP (0x10000c008,8); ((RSP_0 -64 328),4) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 328),4) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000513b: MOV EAX, DWORD PTR [RBP - 320] 6"
 Post  "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005141"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005141: TEST AX, AX 3"
 Post  "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005144"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005144: JNS 4294988134 2"
 Post  "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 161 ##
#######################################
*)

htriple "ht_100005146"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005146: LEA RSI, [RIP + 23509] 7"
 Post  "RSI = 0x10000ad22 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000514d"
 Separations ""
 Assertions  ""
 Pre   "RSI = 0x10000ad22 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000514d: LEA RDX, [RIP + 23519] 7"
 Post  "RDX = 0x10000ad33 ; RSI = 0x10000ad22 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005154"
 Separations ""
 Assertions  ""
 Pre   "RDX = 0x10000ad33 ; RSI = 0x10000ad22 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005154: LEA RBX, [RBP - 360] 7"
 Post  "RBX = (RSP_0 -64 368) ; RDX = 0x10000ad33 ; RSI = 0x10000ad22 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000515b"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 368) ; RDX = 0x10000ad33 ; RSI = 0x10000ad22 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000515b: MOV RDI, RBX 3"
 Post  "RBX = (RSP_0 -64 368) ; RDX = 0x10000ad33 ; RDI = (RSP_0 -64 368) ; RSI = 0x10000ad22 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000515e"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 368) ; RDX = 0x10000ad33 ; RDI = (RSP_0 -64 368) ; RSI = 0x10000ad22 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000515e: ExternalCall fun_0x100005c13 5"
 Post  "RAX = bot(fun_0x100005c13) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 FunctionConstraints "PRESERVES fun_0x100005c13 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 120),8];[(RSP_0 -64 192),4];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 256),8];[(RSP_0 -64 264),1];[(RSP_0 -64 272),8];[(RSP_0 -64 279),1];[(RSP_0 -64 280),1];[(RSP_0 -64 288),8];[(RSP_0 -64 296),8];[(RSP_0 -64 304),4];[(RSP_0 -64 312),8];[(RSP_0 -64 316),4];[(RSP_0 -64 320),4];[(RSP_0 -64 324),4];[(RSP_0 -64 328),4];[(RSP_0 -64 332),4];[(RSP_0 -64 336),4];[(RSP_0 -64 344),8];[(RSP_0 -64 352),8];[(RSP_0 -64 368),8];[(RSP_0 -64 376),8];[(RSP_0 -64 384),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005163"
 Separations "((RSP_0 -64 328),1) SEP (bot(fun____error),4); ((RSP_0 -64 328),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 328),4) SEP (bot(fun____error),4); ((RSP_0 -64 328),4) SEP (RSI_0,8); ((RSP_0 -64 328),4) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 328),4) SEP (0x10000c008,8); ((RSP_0 -64 328),4) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 328),4) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c13) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005163: MOV EAX, DWORD PTR [RBX + 40] 3"
 Post  "RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 162 ##
#######################################
*)

htriple "ht_100005166"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005166: BT EAX, 14 4"
 Post  "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000516a"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000516a: JAE 4294988166 2"
 Post  "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 163 ##
#######################################
*)

htriple "ht_10000516c"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000516c: LEA RSI, [RIP + 23490] 7"
 Post  "RSI = 0x10000ad35 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005173"
 Separations ""
 Assertions  ""
 Pre   "RSI = 0x10000ad35 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005173: LEA RDX, [RIP + 23481] 7"
 Post  "RDX = 0x10000ad33 ; RSI = 0x10000ad35 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000517a"
 Separations ""
 Assertions  ""
 Pre   "RDX = 0x10000ad33 ; RSI = 0x10000ad35 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000517a: LEA RDI, [RBP - 360] 7"
 Post  "RDX = 0x10000ad33 ; RDI = (RSP_0 -64 368) ; RSI = 0x10000ad35 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005181"
 Separations ""
 Assertions  ""
 Pre   "RDX = 0x10000ad33 ; RDI = (RSP_0 -64 368) ; RSI = 0x10000ad35 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005181: ExternalCall fun_0x100005c13 5"
 Post  "RAX = bot(fun_0x100005c13) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 FunctionConstraints "PRESERVES fun_0x100005c13 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 120),8];[(RSP_0 -64 192),4];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 256),8];[(RSP_0 -64 264),1];[(RSP_0 -64 272),8];[(RSP_0 -64 279),1];[(RSP_0 -64 280),1];[(RSP_0 -64 288),8];[(RSP_0 -64 296),8];[(RSP_0 -64 304),4];[(RSP_0 -64 312),8];[(RSP_0 -64 316),4];[(RSP_0 -64 320),4];[(RSP_0 -64 324),4];[(RSP_0 -64 328),4];[(RSP_0 -64 332),4];[(RSP_0 -64 336),4];[(RSP_0 -64 344),8];[(RSP_0 -64 352),8];[(RSP_0 -64 368),8];[(RSP_0 -64 376),8];[(RSP_0 -64 384),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 164 ##
#######################################
*)

htriple "ht_100005186"
 Separations "((RSP_0 -64 324),1) SEP (bot(fun____error),4); ((RSP_0 -64 324),1) SEP (RSI_0,8); ((RSP_0 -64 324),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 324),1) SEP (0x10000c008,8); ((RSP_0 -64 324),1) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 324),1) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4); ((RSP_0 -64 324),4) SEP ([0x10000c008,8]_0,8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005186: TEST BYTE PTR [RBP - 316], 2 7"
 Post  "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000518d"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000518d: JE 4294988201 2"
 Post  "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 165 ##
#######################################
*)

htriple "ht_10000518f"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000518f: LEA RSI, [RIP + 23482] 7"
 Post  "RSI = 0x10000ad50 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005196"
 Separations ""
 Assertions  ""
 Pre   "RSI = 0x10000ad50 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005196: LEA RDX, [RIP + 23410] 7"
 Post  "RDX = 0x10000ad0f ; RSI = 0x10000ad50 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000519d"
 Separations ""
 Assertions  ""
 Pre   "RDX = 0x10000ad0f ; RSI = 0x10000ad50 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000519d: LEA RDI, [RBP - 360] 7"
 Post  "RDX = 0x10000ad0f ; RDI = (RSP_0 -64 368) ; RSI = 0x10000ad50 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000051a4"
 Separations ""
 Assertions  ""
 Pre   "RDX = 0x10000ad0f ; RDI = (RSP_0 -64 368) ; RSI = 0x10000ad50 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000051a4: ExternalCall fun_0x100005c13 5"
 Post  "RAX = bot(fun_0x100005c13) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 FunctionConstraints "PRESERVES fun_0x100005c13 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 120),8];[(RSP_0 -64 192),4];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 256),8];[(RSP_0 -64 264),1];[(RSP_0 -64 272),8];[(RSP_0 -64 279),1];[(RSP_0 -64 280),1];[(RSP_0 -64 288),8];[(RSP_0 -64 296),8];[(RSP_0 -64 304),4];[(RSP_0 -64 312),8];[(RSP_0 -64 316),4];[(RSP_0 -64 320),4];[(RSP_0 -64 324),4];[(RSP_0 -64 328),4];[(RSP_0 -64 332),4];[(RSP_0 -64 336),4];[(RSP_0 -64 344),8];[(RSP_0 -64 352),8];[(RSP_0 -64 368),8];[(RSP_0 -64 376),8];[(RSP_0 -64 384),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 166 ##
#######################################
*)

htriple "ht_1000051a9"
 Separations "((RSP_0 -64 332),1) SEP (bot(fun____error),4); ((RSP_0 -64 332),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 332),4) SEP (bot(fun____error),4); ((RSP_0 -64 332),4) SEP (RSI_0,8); ((RSP_0 -64 332),4) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 332),4) SEP (0x10000c008,8); ((RSP_0 -64 332),4) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 332),4) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000051a9: MOV EAX, DWORD PTR [RBP - 324] 6"
 Post  "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000051af"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000051af: BT EAX, 18 4"
 Post  "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000051b3"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000051b3: JAE 4294988245 2"
 Post  "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 167 ##
#######################################
*)

htriple "ht_1000051b5"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000051b5: LEA RSI, [RIP + 23453] 7"
 Post  "RSI = 0x10000ad59 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000051bc"
 Separations ""
 Assertions  ""
 Pre   "RSI = 0x10000ad59 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000051bc: LEA RDX, [RIP + 23453] 7"
 Post  "RDX = 0x10000ad60 ; RSI = 0x10000ad59 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000051c3"
 Separations ""
 Assertions  ""
 Pre   "RDX = 0x10000ad60 ; RSI = 0x10000ad59 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000051c3: LEA RBX, [RBP - 360] 7"
 Post  "RBX = (RSP_0 -64 368) ; RDX = 0x10000ad60 ; RSI = 0x10000ad59 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000051ca"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 368) ; RDX = 0x10000ad60 ; RSI = 0x10000ad59 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000051ca: MOV RDI, RBX 3"
 Post  "RBX = (RSP_0 -64 368) ; RDX = 0x10000ad60 ; RDI = (RSP_0 -64 368) ; RSI = 0x10000ad59 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000051cd"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 368) ; RDX = 0x10000ad60 ; RDI = (RSP_0 -64 368) ; RSI = 0x10000ad59 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000051cd: ExternalCall fun_0x100005c13 5"
 Post  "RAX = bot(fun_0x100005c13) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 FunctionConstraints "PRESERVES fun_0x100005c13 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 120),8];[(RSP_0 -64 192),4];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 256),8];[(RSP_0 -64 264),1];[(RSP_0 -64 272),8];[(RSP_0 -64 279),1];[(RSP_0 -64 280),1];[(RSP_0 -64 288),8];[(RSP_0 -64 296),8];[(RSP_0 -64 304),4];[(RSP_0 -64 312),8];[(RSP_0 -64 316),4];[(RSP_0 -64 320),4];[(RSP_0 -64 324),4];[(RSP_0 -64 328),4];[(RSP_0 -64 332),4];[(RSP_0 -64 336),4];[(RSP_0 -64 344),8];[(RSP_0 -64 352),8];[(RSP_0 -64 368),8];[(RSP_0 -64 376),8];[(RSP_0 -64 384),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000051d2"
 Separations "((RSP_0 -64 332),1) SEP (bot(fun____error),4); ((RSP_0 -64 332),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 332),4) SEP (bot(fun____error),4); ((RSP_0 -64 332),4) SEP (RSI_0,8); ((RSP_0 -64 332),4) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 332),4) SEP (0x10000c008,8); ((RSP_0 -64 332),4) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 332),4) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c13) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000051d2: MOV EAX, DWORD PTR [RBX + 36] 3"
 Post  "RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 168 ##
#######################################
*)

htriple "ht_1000051d5"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000051d5: BT EAX, 17 4"
 Post  "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000051d9"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000051d9: JAE 4294988283 2"
 Post  "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 169 ##
#######################################
*)

htriple "ht_1000051db"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000051db: LEA RSI, [RIP + 23427] 7"
 Post  "RSI = 0x10000ad65 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000051e2"
 Separations ""
 Assertions  ""
 Pre   "RSI = 0x10000ad65 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000051e2: LEA RDX, [RIP + 23415] 7"
 Post  "RDX = 0x10000ad60 ; RSI = 0x10000ad65 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000051e9"
 Separations ""
 Assertions  ""
 Pre   "RDX = 0x10000ad60 ; RSI = 0x10000ad65 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000051e9: LEA RBX, [RBP - 360] 7"
 Post  "RBX = (RSP_0 -64 368) ; RDX = 0x10000ad60 ; RSI = 0x10000ad65 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000051f0"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 368) ; RDX = 0x10000ad60 ; RSI = 0x10000ad65 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000051f0: MOV RDI, RBX 3"
 Post  "RBX = (RSP_0 -64 368) ; RDX = 0x10000ad60 ; RDI = (RSP_0 -64 368) ; RSI = 0x10000ad65 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000051f3"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 368) ; RDX = 0x10000ad60 ; RDI = (RSP_0 -64 368) ; RSI = 0x10000ad65 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000051f3: ExternalCall fun_0x100005c13 5"
 Post  "RAX = bot(fun_0x100005c13) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 FunctionConstraints "PRESERVES fun_0x100005c13 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 120),8];[(RSP_0 -64 192),4];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 256),8];[(RSP_0 -64 264),1];[(RSP_0 -64 272),8];[(RSP_0 -64 279),1];[(RSP_0 -64 280),1];[(RSP_0 -64 288),8];[(RSP_0 -64 296),8];[(RSP_0 -64 304),4];[(RSP_0 -64 312),8];[(RSP_0 -64 316),4];[(RSP_0 -64 320),4];[(RSP_0 -64 324),4];[(RSP_0 -64 328),4];[(RSP_0 -64 332),4];[(RSP_0 -64 336),4];[(RSP_0 -64 344),8];[(RSP_0 -64 352),8];[(RSP_0 -64 368),8];[(RSP_0 -64 376),8];[(RSP_0 -64 384),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000051f8"
 Separations "((RSP_0 -64 332),1) SEP (bot(fun____error),4); ((RSP_0 -64 332),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 332),4) SEP (bot(fun____error),4); ((RSP_0 -64 332),4) SEP (RSI_0,8); ((RSP_0 -64 332),4) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 332),4) SEP (0x10000c008,8); ((RSP_0 -64 332),4) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 332),4) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c13) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000051f8: MOV EAX, DWORD PTR [RBX + 36] 3"
 Post  "RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 170 ##
#######################################
*)

htriple "ht_1000051fb"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000051fb: BT EAX, 16 4"
 Post  "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000051ff"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000051ff: JAE 4294988321 2"
 Post  "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 171 ##
#######################################
*)

htriple "ht_100005201"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005201: LEA RSI, [RIP + 23399] 7"
 Post  "RSI = 0x10000ad6f ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005208"
 Separations ""
 Assertions  ""
 Pre   "RSI = 0x10000ad6f ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005208: LEA RDX, [RIP + 23377] 7"
 Post  "RDX = 0x10000ad60 ; RSI = 0x10000ad6f ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000520f"
 Separations ""
 Assertions  ""
 Pre   "RDX = 0x10000ad60 ; RSI = 0x10000ad6f ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000520f: LEA RBX, [RBP - 360] 7"
 Post  "RBX = (RSP_0 -64 368) ; RDX = 0x10000ad60 ; RSI = 0x10000ad6f ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005216"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 368) ; RDX = 0x10000ad60 ; RSI = 0x10000ad6f ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005216: MOV RDI, RBX 3"
 Post  "RBX = (RSP_0 -64 368) ; RDX = 0x10000ad60 ; RDI = (RSP_0 -64 368) ; RSI = 0x10000ad6f ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005219"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 368) ; RDX = 0x10000ad60 ; RDI = (RSP_0 -64 368) ; RSI = 0x10000ad6f ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005219: ExternalCall fun_0x100005c13 5"
 Post  "RAX = bot(fun_0x100005c13) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 FunctionConstraints "PRESERVES fun_0x100005c13 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 120),8];[(RSP_0 -64 192),4];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 256),8];[(RSP_0 -64 264),1];[(RSP_0 -64 272),8];[(RSP_0 -64 279),1];[(RSP_0 -64 280),1];[(RSP_0 -64 288),8];[(RSP_0 -64 296),8];[(RSP_0 -64 304),4];[(RSP_0 -64 312),8];[(RSP_0 -64 316),4];[(RSP_0 -64 320),4];[(RSP_0 -64 324),4];[(RSP_0 -64 328),4];[(RSP_0 -64 332),4];[(RSP_0 -64 336),4];[(RSP_0 -64 344),8];[(RSP_0 -64 352),8];[(RSP_0 -64 368),8];[(RSP_0 -64 376),8];[(RSP_0 -64 384),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000521e"
 Separations "((RSP_0 -64 332),1) SEP (bot(fun____error),4); ((RSP_0 -64 332),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 332),4) SEP (bot(fun____error),4); ((RSP_0 -64 332),4) SEP (RSI_0,8); ((RSP_0 -64 332),4) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 332),4) SEP (0x10000c008,8); ((RSP_0 -64 332),4) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 332),4) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c13) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000521e: MOV EAX, DWORD PTR [RBX + 36] 3"
 Post  "RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 172 ##
#######################################
*)

htriple "ht_100005221"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005221: TEST AX, AX 3"
 Post  "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005224"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005224: JNS 4294988358 2"
 Post  "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 173 ##
#######################################
*)

htriple "ht_100005226"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005226: LEA RSI, [RIP + 23371] 7"
 Post  "RSI = 0x10000ad78 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000522d"
 Separations ""
 Assertions  ""
 Pre   "RSI = 0x10000ad78 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000522d: LEA RDX, [RIP + 23340] 7"
 Post  "RDX = 0x10000ad60 ; RSI = 0x10000ad78 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005234"
 Separations ""
 Assertions  ""
 Pre   "RDX = 0x10000ad60 ; RSI = 0x10000ad78 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005234: LEA RBX, [RBP - 360] 7"
 Post  "RBX = (RSP_0 -64 368) ; RDX = 0x10000ad60 ; RSI = 0x10000ad78 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000523b"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 368) ; RDX = 0x10000ad60 ; RSI = 0x10000ad78 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000523b: MOV RDI, RBX 3"
 Post  "RBX = (RSP_0 -64 368) ; RDX = 0x10000ad60 ; RDI = (RSP_0 -64 368) ; RSI = 0x10000ad78 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000523e"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 368) ; RDX = 0x10000ad60 ; RDI = (RSP_0 -64 368) ; RSI = 0x10000ad78 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000523e: ExternalCall fun_0x100005c13 5"
 Post  "RAX = bot(fun_0x100005c13) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 FunctionConstraints "PRESERVES fun_0x100005c13 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 120),8];[(RSP_0 -64 192),4];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 256),8];[(RSP_0 -64 264),1];[(RSP_0 -64 272),8];[(RSP_0 -64 279),1];[(RSP_0 -64 280),1];[(RSP_0 -64 288),8];[(RSP_0 -64 296),8];[(RSP_0 -64 304),4];[(RSP_0 -64 312),8];[(RSP_0 -64 316),4];[(RSP_0 -64 320),4];[(RSP_0 -64 324),4];[(RSP_0 -64 328),4];[(RSP_0 -64 332),4];[(RSP_0 -64 336),4];[(RSP_0 -64 344),8];[(RSP_0 -64 352),8];[(RSP_0 -64 368),8];[(RSP_0 -64 376),8];[(RSP_0 -64 384),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005243"
 Separations "((RSP_0 -64 332),1) SEP (bot(fun____error),4); ((RSP_0 -64 332),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 332),4) SEP (bot(fun____error),4); ((RSP_0 -64 332),4) SEP (RSI_0,8); ((RSP_0 -64 332),4) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 332),4) SEP (0x10000c008,8); ((RSP_0 -64 332),4) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 332),4) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c13) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005243: MOV EAX, DWORD PTR [RBX + 36] 3"
 Post  "RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 174 ##
#######################################
*)

htriple "ht_100005246"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005246: BT EAX, 20 4"
 Post  "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000524a"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000524a: JAE 4294988396 2"
 Post  "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 175 ##
#######################################
*)

htriple "ht_10000524c"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000524c: LEA RSI, [RIP + 23345] 7"
 Post  "RSI = 0x10000ad84 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005253"
 Separations ""
 Assertions  ""
 Pre   "RSI = 0x10000ad84 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005253: LEA RDX, [RIP + 23302] 7"
 Post  "RDX = 0x10000ad60 ; RSI = 0x10000ad84 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000525a"
 Separations ""
 Assertions  ""
 Pre   "RDX = 0x10000ad60 ; RSI = 0x10000ad84 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000525a: LEA RBX, [RBP - 360] 7"
 Post  "RBX = (RSP_0 -64 368) ; RDX = 0x10000ad60 ; RSI = 0x10000ad84 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005261"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 368) ; RDX = 0x10000ad60 ; RSI = 0x10000ad84 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005261: MOV RDI, RBX 3"
 Post  "RBX = (RSP_0 -64 368) ; RDX = 0x10000ad60 ; RDI = (RSP_0 -64 368) ; RSI = 0x10000ad84 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005264"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 368) ; RDX = 0x10000ad60 ; RDI = (RSP_0 -64 368) ; RSI = 0x10000ad84 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005264: ExternalCall fun_0x100005c13 5"
 Post  "RAX = bot(fun_0x100005c13) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 FunctionConstraints "PRESERVES fun_0x100005c13 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 120),8];[(RSP_0 -64 192),4];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 256),8];[(RSP_0 -64 264),1];[(RSP_0 -64 272),8];[(RSP_0 -64 279),1];[(RSP_0 -64 280),1];[(RSP_0 -64 288),8];[(RSP_0 -64 296),8];[(RSP_0 -64 304),4];[(RSP_0 -64 312),8];[(RSP_0 -64 316),4];[(RSP_0 -64 320),4];[(RSP_0 -64 324),4];[(RSP_0 -64 328),4];[(RSP_0 -64 332),4];[(RSP_0 -64 336),4];[(RSP_0 -64 344),8];[(RSP_0 -64 352),8];[(RSP_0 -64 368),8];[(RSP_0 -64 376),8];[(RSP_0 -64 384),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005269"
 Separations "((RSP_0 -64 332),1) SEP (bot(fun____error),4); ((RSP_0 -64 332),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 332),4) SEP (bot(fun____error),4); ((RSP_0 -64 332),4) SEP (RSI_0,8); ((RSP_0 -64 332),4) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 332),4) SEP (0x10000c008,8); ((RSP_0 -64 332),4) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 332),4) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c13) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005269: MOV EAX, DWORD PTR [RBX + 36] 3"
 Post  "RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 176 ##
#######################################
*)

htriple "ht_10000526c"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000526c: BT EAX, 19 4"
 Post  "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005270"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005270: JAE 4294988434 2"
 Post  "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 177 ##
#######################################
*)

htriple "ht_100005272"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005272: LEA RSI, [RIP + 23316] 7"
 Post  "RSI = 0x10000ad8d ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005279"
 Separations ""
 Assertions  ""
 Pre   "RSI = 0x10000ad8d ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005279: LEA RDX, [RIP + 23264] 7"
 Post  "RDX = 0x10000ad60 ; RSI = 0x10000ad8d ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005280"
 Separations ""
 Assertions  ""
 Pre   "RDX = 0x10000ad60 ; RSI = 0x10000ad8d ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005280: LEA RBX, [RBP - 360] 7"
 Post  "RBX = (RSP_0 -64 368) ; RDX = 0x10000ad60 ; RSI = 0x10000ad8d ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005287"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 368) ; RDX = 0x10000ad60 ; RSI = 0x10000ad8d ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005287: MOV RDI, RBX 3"
 Post  "RBX = (RSP_0 -64 368) ; RDX = 0x10000ad60 ; RDI = (RSP_0 -64 368) ; RSI = 0x10000ad8d ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000528a"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 368) ; RDX = 0x10000ad60 ; RDI = (RSP_0 -64 368) ; RSI = 0x10000ad8d ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000528a: ExternalCall fun_0x100005c13 5"
 Post  "RAX = bot(fun_0x100005c13) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 FunctionConstraints "PRESERVES fun_0x100005c13 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 120),8];[(RSP_0 -64 192),4];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 256),8];[(RSP_0 -64 264),1];[(RSP_0 -64 272),8];[(RSP_0 -64 279),1];[(RSP_0 -64 280),1];[(RSP_0 -64 288),8];[(RSP_0 -64 296),8];[(RSP_0 -64 304),4];[(RSP_0 -64 312),8];[(RSP_0 -64 316),4];[(RSP_0 -64 320),4];[(RSP_0 -64 324),4];[(RSP_0 -64 328),4];[(RSP_0 -64 332),4];[(RSP_0 -64 336),4];[(RSP_0 -64 344),8];[(RSP_0 -64 352),8];[(RSP_0 -64 368),8];[(RSP_0 -64 376),8];[(RSP_0 -64 384),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000528f"
 Separations "((RSP_0 -64 332),1) SEP (bot(fun____error),4); ((RSP_0 -64 332),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 332),4) SEP (bot(fun____error),4); ((RSP_0 -64 332),4) SEP (RSI_0,8); ((RSP_0 -64 332),4) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 332),4) SEP (0x10000c008,8); ((RSP_0 -64 332),4) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 332),4) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c13) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000528f: MOV EAX, DWORD PTR [RBX + 36] 3"
 Post  "RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 178 ##
#######################################
*)

htriple "ht_100005292"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005292: BT EAX, 22 4"
 Post  "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005296"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005296: JAE 4294988472 2"
 Post  "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 179 ##
#######################################
*)

htriple "ht_100005298"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005298: LEA RSI, [RIP + 23290] 7"
 Post  "RSI = 0x10000ad99 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000529f"
 Separations ""
 Assertions  ""
 Pre   "RSI = 0x10000ad99 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000529f: LEA RDX, [RIP + 23226] 7"
 Post  "RDX = 0x10000ad60 ; RSI = 0x10000ad99 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000052a6"
 Separations ""
 Assertions  ""
 Pre   "RDX = 0x10000ad60 ; RSI = 0x10000ad99 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000052a6: LEA RBX, [RBP - 360] 7"
 Post  "RBX = (RSP_0 -64 368) ; RDX = 0x10000ad60 ; RSI = 0x10000ad99 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000052ad"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 368) ; RDX = 0x10000ad60 ; RSI = 0x10000ad99 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000052ad: MOV RDI, RBX 3"
 Post  "RBX = (RSP_0 -64 368) ; RDX = 0x10000ad60 ; RDI = (RSP_0 -64 368) ; RSI = 0x10000ad99 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000052b0"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 368) ; RDX = 0x10000ad60 ; RDI = (RSP_0 -64 368) ; RSI = 0x10000ad99 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000052b0: ExternalCall fun_0x100005c13 5"
 Post  "RAX = bot(fun_0x100005c13) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 FunctionConstraints "PRESERVES fun_0x100005c13 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 120),8];[(RSP_0 -64 192),4];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 256),8];[(RSP_0 -64 264),1];[(RSP_0 -64 272),8];[(RSP_0 -64 279),1];[(RSP_0 -64 280),1];[(RSP_0 -64 288),8];[(RSP_0 -64 296),8];[(RSP_0 -64 304),4];[(RSP_0 -64 312),8];[(RSP_0 -64 316),4];[(RSP_0 -64 320),4];[(RSP_0 -64 324),4];[(RSP_0 -64 328),4];[(RSP_0 -64 332),4];[(RSP_0 -64 336),4];[(RSP_0 -64 344),8];[(RSP_0 -64 352),8];[(RSP_0 -64 368),8];[(RSP_0 -64 376),8];[(RSP_0 -64 384),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000052b5"
 Separations "((RSP_0 -64 332),1) SEP (bot(fun____error),4); ((RSP_0 -64 332),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 332),4) SEP (bot(fun____error),4); ((RSP_0 -64 332),4) SEP (RSI_0,8); ((RSP_0 -64 332),4) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 332),4) SEP (0x10000c008,8); ((RSP_0 -64 332),4) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 332),4) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c13) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000052b5: MOV EAX, DWORD PTR [RBX + 36] 3"
 Post  "RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 180 ##
#######################################
*)

htriple "ht_1000052b8"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000052b8: BT EAX, 21 4"
 Post  "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000052bc"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000052bc: JAE 4294988510 2"
 Post  "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 181 ##
#######################################
*)

htriple "ht_1000052be"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000052be: LEA RSI, [RIP + 23267] 7"
 Post  "RSI = 0x10000ada8 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000052c5"
 Separations ""
 Assertions  ""
 Pre   "RSI = 0x10000ada8 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000052c5: LEA RDX, [RIP + 23188] 7"
 Post  "RDX = 0x10000ad60 ; RSI = 0x10000ada8 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000052cc"
 Separations ""
 Assertions  ""
 Pre   "RDX = 0x10000ad60 ; RSI = 0x10000ada8 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000052cc: LEA RBX, [RBP - 360] 7"
 Post  "RBX = (RSP_0 -64 368) ; RDX = 0x10000ad60 ; RSI = 0x10000ada8 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000052d3"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 368) ; RDX = 0x10000ad60 ; RSI = 0x10000ada8 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000052d3: MOV RDI, RBX 3"
 Post  "RBX = (RSP_0 -64 368) ; RDX = 0x10000ad60 ; RDI = (RSP_0 -64 368) ; RSI = 0x10000ada8 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000052d6"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 368) ; RDX = 0x10000ad60 ; RDI = (RSP_0 -64 368) ; RSI = 0x10000ada8 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000052d6: ExternalCall fun_0x100005c13 5"
 Post  "RAX = bot(fun_0x100005c13) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 FunctionConstraints "PRESERVES fun_0x100005c13 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 120),8];[(RSP_0 -64 192),4];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 256),8];[(RSP_0 -64 264),1];[(RSP_0 -64 272),8];[(RSP_0 -64 279),1];[(RSP_0 -64 280),1];[(RSP_0 -64 288),8];[(RSP_0 -64 296),8];[(RSP_0 -64 304),4];[(RSP_0 -64 312),8];[(RSP_0 -64 316),4];[(RSP_0 -64 320),4];[(RSP_0 -64 324),4];[(RSP_0 -64 328),4];[(RSP_0 -64 332),4];[(RSP_0 -64 336),4];[(RSP_0 -64 344),8];[(RSP_0 -64 352),8];[(RSP_0 -64 368),8];[(RSP_0 -64 376),8];[(RSP_0 -64 384),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000052db"
 Separations "((RSP_0 -64 332),1) SEP (bot(fun____error),4); ((RSP_0 -64 332),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 332),4) SEP (bot(fun____error),4); ((RSP_0 -64 332),4) SEP (RSI_0,8); ((RSP_0 -64 332),4) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 332),4) SEP (0x10000c008,8); ((RSP_0 -64 332),4) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 332),4) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c13) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000052db: MOV EAX, DWORD PTR [RBX + 36] 3"
 Post  "RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 182 ##
#######################################
*)

htriple "ht_1000052de"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000052de: BT EAX, 10 4"
 Post  "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000052e2"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000052e2: JAE 4294988598 2"
 Post  "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 183 ##
#######################################
*)

htriple "ht_1000052e4"
 Separations "((RSP_0 -64 280),1) SEP (bot(fun____error),4); ((RSP_0 -64 280),1) SEP (RSI_0,8); ((RSP_0 -64 280),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 280),1) SEP (0x10000c008,8); ((RSP_0 -64 280),1) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 280),1) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000052e4: MOVSX ECX, BYTE PTR [RBP - 272] 7"
 Post  "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000052eb"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000052eb: CMP ECX, 120 3"
 Post  "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000052ee"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000052ee: JE 4294988554 2"
 Post  "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 184 ##
#######################################
*)

htriple "ht_100005336"
 Separations "((RSP_0 -64 332),1) SEP (bot(fun____error),4); ((RSP_0 -64 332),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 332),4) SEP (bot(fun____error),4); ((RSP_0 -64 332),4) SEP (RSI_0,8); ((RSP_0 -64 332),4) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 332),4) SEP (0x10000c008,8); ((RSP_0 -64 332),4) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 332),4) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005336: MOV EAX, DWORD PTR [RBP - 324] 6"
 Post  "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000533c"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000533c: TEST AL, AL 2"
 Post  "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000533e"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000533e: JNS 4294988640 2"
 Post  "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 185 ##
#######################################
*)

htriple "ht_1000052f0"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000052f0: CMP ECX, 99 3"
 Post  "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000052f3"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000052f3: JNE 4294988572 2"
 Post  "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 186 ##
#######################################
*)

htriple "ht_10000530a"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000530a: OR EAX, 64 3"
 Post  "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000530d"
 Separations "((RSP_0 -64 332),1) SEP (bot(fun____error),4); ((RSP_0 -64 332),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 332),4) SEP (bot(fun____error),4); ((RSP_0 -64 332),4) SEP (RSI_0,8); ((RSP_0 -64 332),4) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 332),4) SEP (0x10000c008,8); ((RSP_0 -64 332),4) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 332),4) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000530d: MOV DWORD PTR [RBP - 324], EAX 6"
 Post  "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005313"
 Separations "((RSP_0 -64 328),1) SEP (bot(fun____error),4); ((RSP_0 -64 328),1) SEP (RSI_0,8); ((RSP_0 -64 328),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 328),1) SEP (0x10000c008,8); ((RSP_0 -64 328),1) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 328),1) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4); ((RSP_0 -64 328),4) SEP (bot(fun____error),4); ((RSP_0 -64 328),4) SEP ([0x10000c008,8]_0,8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005313: AND BYTE PTR [RBP - 320], 254 7"
 Post  "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000531a"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000531a: JMP 4294988598 2"
 Post  "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 187 ##
#######################################
*)

htriple "ht_1000052f5"
 Separations "((RSP_0 -64 256),8) SEP (bot(fun____error),4); ((RSP_0 -64 256),8) SEP (RSI_0,8); ((RSP_0 -64 256),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 256),8) SEP (0x10000c008,8); ((RSP_0 -64 256),8) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 256),8) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000052f5: MOV RDI, QWORD PTR [RBP - 248] 7"
 Post  "RDI = bot(fun_0x100004559) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000052fc"
 Separations ""
 Assertions  ""
 Pre   "RDI = bot(fun_0x100004559) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000052fc: LEA RSI, [RIP + 23223] 7"
 Post  "RDI = bot(fun_0x100004559) ; RSI = 0x10000adba ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005303"
 Separations ""
 Assertions  ""
 Pre   "RDI = bot(fun_0x100004559) ; RSI = 0x10000adba ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005303: ExternalCall fun_0x1000044a7 5"
 Post  "RAX = bot(fun_0x1000044a7) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 FunctionConstraints "PRESERVES fun_0x1000044a7 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 120),8];[(RSP_0 -64 192),4];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 256),8];[(RSP_0 -64 264),1];[(RSP_0 -64 272),8];[(RSP_0 -64 279),1];[(RSP_0 -64 280),1];[(RSP_0 -64 288),8];[(RSP_0 -64 296),8];[(RSP_0 -64 304),4];[(RSP_0 -64 312),8];[(RSP_0 -64 316),4];[(RSP_0 -64 320),4];[(RSP_0 -64 324),4];[(RSP_0 -64 328),4];[(RSP_0 -64 332),4];[(RSP_0 -64 336),4];[(RSP_0 -64 344),8];[(RSP_0 -64 352),8];[(RSP_0 -64 368),8];[(RSP_0 -64 376),8];[(RSP_0 -64 384),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005308"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000044a7) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005308: JMP 4294988598 2"
 Post  "RAX = bot(fun_0x1000044a7) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 188 ##
#######################################
*)

htriple "ht_10000531c"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000531c: LEA RSI, [RIP + 23197] 7"
 Post  "RSI = 0x10000adc0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005323"
 Separations ""
 Assertions  ""
 Pre   "RSI = 0x10000adc0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005323: LEA RDX, [RIP + 23193] 7"
 Post  "RDX = 0x10000adc3 ; RSI = 0x10000adc0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000532a"
 Separations ""
 Assertions  ""
 Pre   "RDX = 0x10000adc3 ; RSI = 0x10000adc0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000532a: LEA RDI, [RBP - 360] 7"
 Post  "RDX = 0x10000adc3 ; RDI = (RSP_0 -64 368) ; RSI = 0x10000adc0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005331"
 Separations ""
 Assertions  ""
 Pre   "RDX = 0x10000adc3 ; RDI = (RSP_0 -64 368) ; RSI = 0x10000adc0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005331: ExternalCall fun_0x100005c13 5"
 Post  "RAX = bot(fun_0x100005c13) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 FunctionConstraints "PRESERVES fun_0x100005c13 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 120),8];[(RSP_0 -64 192),4];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 256),8];[(RSP_0 -64 264),1];[(RSP_0 -64 272),8];[(RSP_0 -64 279),1];[(RSP_0 -64 280),1];[(RSP_0 -64 288),8];[(RSP_0 -64 296),8];[(RSP_0 -64 304),4];[(RSP_0 -64 312),8];[(RSP_0 -64 316),4];[(RSP_0 -64 320),4];[(RSP_0 -64 324),4];[(RSP_0 -64 328),4];[(RSP_0 -64 332),4];[(RSP_0 -64 336),4];[(RSP_0 -64 344),8];[(RSP_0 -64 352),8];[(RSP_0 -64 368),8];[(RSP_0 -64 376),8];[(RSP_0 -64 384),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 189 ##
#######################################
*)

htriple "ht_100005340"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005340: LEA RSI, [RIP + 23167] 7"
 Post  "RSI = 0x10000adc6 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005347"
 Separations ""
 Assertions  ""
 Pre   "RSI = 0x10000adc6 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005347: LEA RDX, [RIP + 22977] 7"
 Post  "RDX = 0x10000ad0f ; RSI = 0x10000adc6 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000534e"
 Separations ""
 Assertions  ""
 Pre   "RDX = 0x10000ad0f ; RSI = 0x10000adc6 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000534e: LEA RBX, [RBP - 360] 7"
 Post  "RBX = (RSP_0 -64 368) ; RDX = 0x10000ad0f ; RSI = 0x10000adc6 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005355"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 368) ; RDX = 0x10000ad0f ; RSI = 0x10000adc6 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005355: MOV RDI, RBX 3"
 Post  "RBX = (RSP_0 -64 368) ; RDX = 0x10000ad0f ; RDI = (RSP_0 -64 368) ; RSI = 0x10000adc6 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005358"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 368) ; RDX = 0x10000ad0f ; RDI = (RSP_0 -64 368) ; RSI = 0x10000adc6 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005358: ExternalCall fun_0x100005c13 5"
 Post  "RAX = bot(fun_0x100005c13) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 FunctionConstraints "PRESERVES fun_0x100005c13 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 120),8];[(RSP_0 -64 192),4];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 256),8];[(RSP_0 -64 264),1];[(RSP_0 -64 272),8];[(RSP_0 -64 279),1];[(RSP_0 -64 280),1];[(RSP_0 -64 288),8];[(RSP_0 -64 296),8];[(RSP_0 -64 304),4];[(RSP_0 -64 312),8];[(RSP_0 -64 316),4];[(RSP_0 -64 320),4];[(RSP_0 -64 324),4];[(RSP_0 -64 328),4];[(RSP_0 -64 332),4];[(RSP_0 -64 336),4];[(RSP_0 -64 344),8];[(RSP_0 -64 352),8];[(RSP_0 -64 368),8];[(RSP_0 -64 376),8];[(RSP_0 -64 384),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000535d"
 Separations "((RSP_0 -64 332),1) SEP (bot(fun____error),4); ((RSP_0 -64 332),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 332),4) SEP (bot(fun____error),4); ((RSP_0 -64 332),4) SEP (RSI_0,8); ((RSP_0 -64 332),4) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 332),4) SEP (0x10000c008,8); ((RSP_0 -64 332),4) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 332),4) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c13) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000535d: MOV EAX, DWORD PTR [RBX + 36] 3"
 Post  "RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 190 ##
#######################################
*)

htriple "ht_100005360"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005360: BT EAX, 11 4"
 Post  "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005364"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005364: JAE 4294988678 2"
 Post  "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 191 ##
#######################################
*)

htriple "ht_100005366"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005366: LEA RSI, [RIP + 23132] 7"
 Post  "RSI = 0x10000adc9 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000536d"
 Separations ""
 Assertions  ""
 Pre   "RSI = 0x10000adc9 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000536d: LEA RDX, [RIP + 22955] 7"
 Post  "RDX = 0x10000ad1f ; RSI = 0x10000adc9 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005374"
 Separations ""
 Assertions  ""
 Pre   "RDX = 0x10000ad1f ; RSI = 0x10000adc9 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005374: LEA RBX, [RBP - 360] 7"
 Post  "RBX = (RSP_0 -64 368) ; RDX = 0x10000ad1f ; RSI = 0x10000adc9 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000537b"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 368) ; RDX = 0x10000ad1f ; RSI = 0x10000adc9 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000537b: MOV RDI, RBX 3"
 Post  "RBX = (RSP_0 -64 368) ; RDX = 0x10000ad1f ; RDI = (RSP_0 -64 368) ; RSI = 0x10000adc9 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000537e"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 368) ; RDX = 0x10000ad1f ; RDI = (RSP_0 -64 368) ; RSI = 0x10000adc9 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000537e: ExternalCall fun_0x100005c13 5"
 Post  "RAX = bot(fun_0x100005c13) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 FunctionConstraints "PRESERVES fun_0x100005c13 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 120),8];[(RSP_0 -64 192),4];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 256),8];[(RSP_0 -64 264),1];[(RSP_0 -64 272),8];[(RSP_0 -64 279),1];[(RSP_0 -64 280),1];[(RSP_0 -64 288),8];[(RSP_0 -64 296),8];[(RSP_0 -64 304),4];[(RSP_0 -64 312),8];[(RSP_0 -64 316),4];[(RSP_0 -64 320),4];[(RSP_0 -64 324),4];[(RSP_0 -64 328),4];[(RSP_0 -64 332),4];[(RSP_0 -64 336),4];[(RSP_0 -64 344),8];[(RSP_0 -64 352),8];[(RSP_0 -64 368),8];[(RSP_0 -64 376),8];[(RSP_0 -64 384),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005383"
 Separations "((RSP_0 -64 332),1) SEP (bot(fun____error),4); ((RSP_0 -64 332),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 332),4) SEP (bot(fun____error),4); ((RSP_0 -64 332),4) SEP (RSI_0,8); ((RSP_0 -64 332),4) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 332),4) SEP (0x10000c008,8); ((RSP_0 -64 332),4) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 332),4) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c13) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005383: MOV EAX, DWORD PTR [RBX + 36] 3"
 Post  "RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 192 ##
#######################################
*)

htriple "ht_100005386"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005386: BT EAX, 13 4"
 Post  "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000538a"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000538a: JAE 4294988716 2"
 Post  "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 193 ##
#######################################
*)

htriple "ht_10000538c"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000538c: LEA RSI, [RIP + 23097] 7"
 Post  "RSI = 0x10000adcc ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005393"
 Separations ""
 Assertions  ""
 Pre   "RSI = 0x10000adcc ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005393: LEA RDX, [RIP + 22937] 7"
 Post  "RDX = 0x10000ad33 ; RSI = 0x10000adcc ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000539a"
 Separations ""
 Assertions  ""
 Pre   "RDX = 0x10000ad33 ; RSI = 0x10000adcc ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000539a: LEA RBX, [RBP - 360] 7"
 Post  "RBX = (RSP_0 -64 368) ; RDX = 0x10000ad33 ; RSI = 0x10000adcc ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000053a1"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 368) ; RDX = 0x10000ad33 ; RSI = 0x10000adcc ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000053a1: MOV RDI, RBX 3"
 Post  "RBX = (RSP_0 -64 368) ; RDX = 0x10000ad33 ; RDI = (RSP_0 -64 368) ; RSI = 0x10000adcc ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000053a4"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 368) ; RDX = 0x10000ad33 ; RDI = (RSP_0 -64 368) ; RSI = 0x10000adcc ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000053a4: ExternalCall fun_0x100005c13 5"
 Post  "RAX = bot(fun_0x100005c13) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 FunctionConstraints "PRESERVES fun_0x100005c13 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 120),8];[(RSP_0 -64 192),4];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 256),8];[(RSP_0 -64 264),1];[(RSP_0 -64 272),8];[(RSP_0 -64 279),1];[(RSP_0 -64 280),1];[(RSP_0 -64 288),8];[(RSP_0 -64 296),8];[(RSP_0 -64 304),4];[(RSP_0 -64 312),8];[(RSP_0 -64 316),4];[(RSP_0 -64 320),4];[(RSP_0 -64 324),4];[(RSP_0 -64 328),4];[(RSP_0 -64 332),4];[(RSP_0 -64 336),4];[(RSP_0 -64 344),8];[(RSP_0 -64 352),8];[(RSP_0 -64 368),8];[(RSP_0 -64 376),8];[(RSP_0 -64 384),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000053a9"
 Separations "((RSP_0 -64 332),1) SEP (bot(fun____error),4); ((RSP_0 -64 332),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 332),4) SEP (bot(fun____error),4); ((RSP_0 -64 332),4) SEP (RSI_0,8); ((RSP_0 -64 332),4) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 332),4) SEP (0x10000c008,8); ((RSP_0 -64 332),4) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 332),4) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c13) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000053a9: MOV EAX, DWORD PTR [RBX + 36] 3"
 Post  "RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 194 ##
#######################################
*)

htriple "ht_1000053ac"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000053ac: BT EAX, 14 4"
 Post  "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000053b0"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000053b0: JAE 4294988754 2"
 Post  "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 195 ##
#######################################
*)

htriple "ht_1000053b2"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000053b2: LEA RSI, [RIP + 23062] 7"
 Post  "RSI = 0x10000adcf ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000053b9"
 Separations ""
 Assertions  ""
 Pre   "RSI = 0x10000adcf ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000053b9: LEA RDX, [RIP + 23069] 7"
 Post  "RDX = 0x10000addd ; RSI = 0x10000adcf ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000053c0"
 Separations ""
 Assertions  ""
 Pre   "RDX = 0x10000addd ; RSI = 0x10000adcf ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000053c0: LEA RBX, [RBP - 360] 7"
 Post  "RBX = (RSP_0 -64 368) ; RDX = 0x10000addd ; RSI = 0x10000adcf ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000053c7"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 368) ; RDX = 0x10000addd ; RSI = 0x10000adcf ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000053c7: MOV RDI, RBX 3"
 Post  "RBX = (RSP_0 -64 368) ; RDX = 0x10000addd ; RDI = (RSP_0 -64 368) ; RSI = 0x10000adcf ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000053ca"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 368) ; RDX = 0x10000addd ; RDI = (RSP_0 -64 368) ; RSI = 0x10000adcf ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000053ca: ExternalCall fun_0x100005c13 5"
 Post  "RAX = bot(fun_0x100005c13) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 FunctionConstraints "PRESERVES fun_0x100005c13 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 120),8];[(RSP_0 -64 192),4];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 256),8];[(RSP_0 -64 264),1];[(RSP_0 -64 272),8];[(RSP_0 -64 279),1];[(RSP_0 -64 280),1];[(RSP_0 -64 288),8];[(RSP_0 -64 296),8];[(RSP_0 -64 304),4];[(RSP_0 -64 312),8];[(RSP_0 -64 316),4];[(RSP_0 -64 320),4];[(RSP_0 -64 324),4];[(RSP_0 -64 328),4];[(RSP_0 -64 332),4];[(RSP_0 -64 336),4];[(RSP_0 -64 344),8];[(RSP_0 -64 352),8];[(RSP_0 -64 368),8];[(RSP_0 -64 376),8];[(RSP_0 -64 384),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000053cf"
 Separations "((RSP_0 -64 332),1) SEP (bot(fun____error),4); ((RSP_0 -64 332),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 332),4) SEP (bot(fun____error),4); ((RSP_0 -64 332),4) SEP (RSI_0,8); ((RSP_0 -64 332),4) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 332),4) SEP (0x10000c008,8); ((RSP_0 -64 332),4) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 332),4) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c13) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000053cf: MOV EAX, DWORD PTR [RBX + 36] 3"
 Post  "RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 196 ##
#######################################
*)

htriple "ht_1000053d2"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000053d2: TEST AL, 1 2"
 Post  "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000053d4"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000053d4: JE 4294988797 2"
 Post  "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 197 ##
#######################################
*)

htriple "ht_1000053d6"
 Separations "((RSP_0 -64 368),8) SEP (bot(fun____error),4); ((RSP_0 -64 368),8) SEP (RSI_0,8); ((RSP_0 -64 368),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 368),8) SEP (0x10000c008,8); ((RSP_0 -64 368),8) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 368),8) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000053d6: MOV RSI, QWORD PTR [RBP - 360] 7"
 Post  "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000053dd"
 Separations "((RSP_0 -64 256),8) SEP (bot(fun____error),4); ((RSP_0 -64 256),8) SEP (RSI_0,8); ((RSP_0 -64 256),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 256),8) SEP (0x10000c008,8); ((RSP_0 -64 256),8) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 256),8) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000053dd: MOV RDI, QWORD PTR [RBP - 248] 7"
 Post  "RDI = bot(fun_0x100004559) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000053e4"
 Separations ""
 Assertions  ""
 Pre   "RDI = bot(fun_0x100004559) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000053e4: ExternalCall fun_0x10000456d 5"
 Post  "RAX = bot(fun_0x10000456d) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 FunctionConstraints "PRESERVES fun_0x10000456d {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 120),8];[(RSP_0 -64 192),4];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 256),8];[(RSP_0 -64 264),1];[(RSP_0 -64 272),8];[(RSP_0 -64 279),1];[(RSP_0 -64 280),1];[(RSP_0 -64 288),8];[(RSP_0 -64 296),8];[(RSP_0 -64 304),4];[(RSP_0 -64 312),8];[(RSP_0 -64 316),4];[(RSP_0 -64 320),4];[(RSP_0 -64 324),4];[(RSP_0 -64 328),4];[(RSP_0 -64 332),4];[(RSP_0 -64 336),4];[(RSP_0 -64 344),8];[(RSP_0 -64 352),8];[(RSP_0 -64 368),8];[(RSP_0 -64 376),8];[(RSP_0 -64 384),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000053e9"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000456d) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000053e9: XOR ECX, ECX 2"
 Post  "RAX = bot(fun_0x10000456d) ; RCX = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000053eb"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000456d) ; RCX = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000053eb: TEST EAX, EAX 2"
 Post  "RAX = bot(fun_0x10000456d) ; RCX = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000053ed"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000456d) ; RCX = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000053ed: MOVZX R14D, R14B 4"
 Post  "RAX = bot(fun_0x10000456d) ; RCX = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000053f1"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000456d) ; RCX = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000053f1: CMOVNE R14D, ECX 4"
 Post  "RAX = bot(fun_0x10000456d) ; RCX = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000053f5"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000456d) ; RCX = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000053f5: MOVZX R12D, R12B 4"
 Post  "RAX = bot(fun_0x10000456d) ; RCX = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000053f9"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000456d) ; RCX = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000053f9: CMOVNE R12D, ECX 4"
 Post  "RAX = bot(fun_0x10000456d) ; RCX = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 198 ##
#######################################
*)

htriple "ht_1000053fd"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000053fd: TEST R15, R15 3"
 Post  "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005400"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005400: JE 4294988848 2"
 Post  "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 199 ##
#######################################
*)

htriple "ht_100005402"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005402: LEA RSI, [RIP + 22999] 7"
 Post  "RSI = 0x10000ade0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005409"
 Separations ""
 Assertions  ""
 Pre   "RSI = 0x10000ade0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005409: LEA RDX, [RIP + 23015] 7"
 Post  "RDX = 0x10000adf7 ; RSI = 0x10000ade0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005410"
 Separations ""
 Assertions  ""
 Pre   "RDX = 0x10000adf7 ; RSI = 0x10000ade0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005410: LEA RBX, [RBP - 360] 7"
 Post  "RBX = (RSP_0 -64 368) ; RDX = 0x10000adf7 ; RSI = 0x10000ade0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005417"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 368) ; RDX = 0x10000adf7 ; RSI = 0x10000ade0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005417: MOV RDI, RBX 3"
 Post  "RBX = (RSP_0 -64 368) ; RDX = 0x10000adf7 ; RDI = (RSP_0 -64 368) ; RSI = 0x10000ade0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000541a"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 368) ; RDX = 0x10000adf7 ; RDI = (RSP_0 -64 368) ; RSI = 0x10000ade0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000541a: ExternalCall fun_0x100005c13 5"
 Post  "RAX = bot(fun_0x100005c13) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 FunctionConstraints "PRESERVES fun_0x100005c13 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 120),8];[(RSP_0 -64 192),4];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 256),8];[(RSP_0 -64 264),1];[(RSP_0 -64 272),8];[(RSP_0 -64 279),1];[(RSP_0 -64 280),1];[(RSP_0 -64 288),8];[(RSP_0 -64 296),8];[(RSP_0 -64 304),4];[(RSP_0 -64 312),8];[(RSP_0 -64 316),4];[(RSP_0 -64 320),4];[(RSP_0 -64 324),4];[(RSP_0 -64 328),4];[(RSP_0 -64 332),4];[(RSP_0 -64 336),4];[(RSP_0 -64 344),8];[(RSP_0 -64 352),8];[(RSP_0 -64 368),8];[(RSP_0 -64 376),8];[(RSP_0 -64 384),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000541f"
 Separations "((RSP_0 -64 256),8) SEP (bot(fun____error),4); ((RSP_0 -64 256),8) SEP (RSI_0,8); ((RSP_0 -64 256),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 256),8) SEP (0x10000c008,8); ((RSP_0 -64 256),8) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 256),8) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c13) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000541f: MOV RDI, QWORD PTR [RBX + 112] 4"
 Post  "RAX = bot(fun_0x100005c13) ; RBX = (RSP_0 -64 368) ; RDI = bot(fun_0x100004559) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005423"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c13) ; RBX = (RSP_0 -64 368) ; RDI = bot(fun_0x100004559) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005423: MOV RSI, R15 3"
 Post  "RAX = bot(fun_0x100005c13) ; RBX = (RSP_0 -64 368) ; RDI = bot(fun_0x100004559) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005426"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c13) ; RBX = (RSP_0 -64 368) ; RDI = bot(fun_0x100004559) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005426: ExternalCall fun_0x1000043ab 5"
 Post  "RAX = bot(fun_0x1000043ab) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 FunctionConstraints "PRESERVES fun_0x1000043ab {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 120),8];[(RSP_0 -64 192),4];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 256),8];[(RSP_0 -64 264),1];[(RSP_0 -64 272),8];[(RSP_0 -64 279),1];[(RSP_0 -64 280),1];[(RSP_0 -64 288),8];[(RSP_0 -64 296),8];[(RSP_0 -64 304),4];[(RSP_0 -64 312),8];[(RSP_0 -64 316),4];[(RSP_0 -64 320),4];[(RSP_0 -64 324),4];[(RSP_0 -64 328),4];[(RSP_0 -64 332),4];[(RSP_0 -64 336),4];[(RSP_0 -64 344),8];[(RSP_0 -64 352),8];[(RSP_0 -64 368),8];[(RSP_0 -64 376),8];[(RSP_0 -64 384),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000542b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000043ab) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000542b: JMP 4294989021 5"
 Post  "RAX = bot(fun_0x1000043ab) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 200 ##
#######################################
*)

htriple "ht_100005430"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005430: TEST R14B, R14B 3"
 Post  "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005433"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005433: JE 4294988941 2"
 Post  "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 201 ##
#######################################
*)

htriple "ht_100005435"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005435: MOVSX EAX, R14B 4"
 Post  "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005439"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005439: ADD EAX, 18446744073709551542 3"
 Post  "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000543c"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000543c: CMP EAX, 48 3"
 Post  "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000543f"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000543f: JA 4294989369 6"
 Post  "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 202 ##
#######################################
*)

htriple "ht_10000548d"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000548d: TEST R12B, R12B 3"
 Post  "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005490"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005490: JE 4294989021 2"
 Post  "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 203 ##
#######################################
*)

htriple "ht_100005445"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005445: MOVABS RCX, 422216760098817 10"
 Post  "RCX = 0x1800100010001 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000544f"
 Separations ""
 Assertions  ""
 Pre   "RCX = 0x1800100010001 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000544f: BT RCX, RAX 4"
 Post  "RCX = 0x1800100010001 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005453"
 Separations ""
 Assertions  ""
 Pre   "RCX = 0x1800100010001 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005453: JAE 4294989369 6"
 Post  "RCX = 0x1800100010001 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 204 ##
#######################################
*)

htriple "ht_100005639"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005639: LEA RDI, [RBP - 64] 4"
 Post  "RDI = (RSP_0 -64 72) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000563d"
 Separations "((RSP_0 -64 70),1) SEP (bot(fun____error),4); ((RSP_0 -64 70),1) SEP (RSI_0,8); ((RSP_0 -64 70),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 70),1) SEP (0x10000c008,8); ((RSP_0 -64 70),1) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 70),1) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RDI = (RSP_0 -64 72) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000563d: MOV BYTE PTR [RDI + 2], 0 4"
 Post  "RDI = (RSP_0 -64 72) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005641"
 Separations "((RSP_0 -64 72),2) SEP (bot(fun____error),4); ((RSP_0 -64 72),2) SEP (RSI_0,8); ((RSP_0 -64 72),2) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 72),2) SEP (0x10000c008,8); ((RSP_0 -64 72),2) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 72),2) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4); ((RSP_0 -64 72),8) SEP ([0x10000c008,8]_0,8)"
 Assertions  ""
 Pre   "RDI = (RSP_0 -64 72) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005641: MOV WORD PTR [RDI], 11565 5"
 Post  "RDI = (RSP_0 -64 72) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005646"
 Separations ""
 Assertions  ""
 Pre   "RDI = (RSP_0 -64 72) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005646: MOV EDX, 16 5"
 Post  "RDX = 16 ; RDI = (RSP_0 -64 72) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000564b"
 Separations ""
 Assertions  ""
 Pre   "RDX = 16 ; RDI = (RSP_0 -64 72) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000564b: MOV RSI, R13 3"
 Post  "RDX = 16 ; RDI = (RSP_0 -64 72) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000564e"
 Separations ""
 Assertions  ""
 Pre   "RDX = 16 ; RDI = (RSP_0 -64 72) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000564e: ExternalCall fun____strcat_chk 5"
 Post  "RAX = bot(fun____strcat_chk) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 FunctionConstraints "PRESERVES fun____strcat_chk {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 120),8];[(RSP_0 -64 192),4];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 256),8];[(RSP_0 -64 264),1];[(RSP_0 -64 272),8];[(RSP_0 -64 279),1];[(RSP_0 -64 280),1];[(RSP_0 -64 288),8];[(RSP_0 -64 296),8];[(RSP_0 -64 304),4];[(RSP_0 -64 312),8];[(RSP_0 -64 316),4];[(RSP_0 -64 320),4];[(RSP_0 -64 324),4];[(RSP_0 -64 328),4];[(RSP_0 -64 332),4];[(RSP_0 -64 336),4];[(RSP_0 -64 344),8];[(RSP_0 -64 352),8];[(RSP_0 -64 368),8];[(RSP_0 -64 376),8];[(RSP_0 -64 384),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005653"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun____strcat_chk) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005653: JMP 4294988903 5"
 Post  "RAX = bot(fun____strcat_chk) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 205 ##
#######################################
*)

htriple "ht_100005459"
 Separations "((RSP_0 -64 72),2) SEP (bot(fun____error),4); ((RSP_0 -64 72),2) SEP (RSI_0,8); ((RSP_0 -64 72),2) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 72),2) SEP (0x10000c008,8); ((RSP_0 -64 72),2) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 72),2) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4); ((RSP_0 -64 72),8) SEP ([0x10000c008,8]_0,8)"
 Assertions  ""
 Pre   "RCX = 0x1800100010001 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005459: MOV WORD PTR [RBP - 64], 16173 6"
 Post  "RCX = 0x1800100010001 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000545f"
 Separations "((RSP_0 -64 70),1) SEP (bot(fun____error),4); ((RSP_0 -64 70),1) SEP (RSI_0,8); ((RSP_0 -64 70),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 70),1) SEP (0x10000c008,8); ((RSP_0 -64 70),1) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 70),1) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RCX = 0x1800100010001 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000545f: MOV BYTE PTR [RBP - 62], 0 4"
 Post  "RCX = 0x1800100010001 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005463"
 Separations "((RSP_0 -64 71),1) SEP (bot(fun____error),4); ((RSP_0 -64 71),1) SEP (RSI_0,8); ((RSP_0 -64 71),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 71),1) SEP (0x10000c008,8); ((RSP_0 -64 71),1) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 71),1) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RCX = 0x1800100010001 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005463: MOV BYTE PTR [RBP - 63], R14B 4"
 Post  "RCX = 0x1800100010001 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 206 ##
#######################################
*)

htriple "ht_100005492"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005492: LEA R14, [RBP - 64] 4"
 Post  "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R14 = (RSP_0 -64 72) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005496"
 Separations "((RSP_0 -64 70),1) SEP (bot(fun____error),4); ((RSP_0 -64 70),1) SEP (RSI_0,8); ((RSP_0 -64 70),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 70),1) SEP (0x10000c008,8); ((RSP_0 -64 70),1) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 70),1) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R14 = (RSP_0 -64 72) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005496: MOV BYTE PTR [R14 + 2], 0 5"
 Post  "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R14 = (RSP_0 -64 72) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000549b"
 Separations "((RSP_0 -64 72),2) SEP (bot(fun____error),4); ((RSP_0 -64 72),2) SEP (RSI_0,8); ((RSP_0 -64 72),2) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 72),2) SEP (0x10000c008,8); ((RSP_0 -64 72),2) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 72),2) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4); ((RSP_0 -64 72),8) SEP ([0x10000c008,8]_0,8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R14 = (RSP_0 -64 72) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000549b: MOV WORD PTR [R14], 11565 6"
 Post  "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R14 = (RSP_0 -64 72) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000054a1"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R14 = (RSP_0 -64 72) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000054a1: MOV EDX, 16 5"
 Post  "RDX = 16 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R14 = (RSP_0 -64 72) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000054a6"
 Separations ""
 Assertions  ""
 Pre   "RDX = 16 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R14 = (RSP_0 -64 72) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000054a6: MOV RDI, R14 3"
 Post  "RDX = 16 ; RDI = (RSP_0 -64 72) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R14 = (RSP_0 -64 72) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000054a9"
 Separations "((RSP_0 -64 376),8) SEP (bot(fun____error),4); ((RSP_0 -64 376),8) SEP (RSI_0,8); ((RSP_0 -64 376),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 376),8) SEP (0x10000c008,8); ((RSP_0 -64 376),8) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 376),8) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RDX = 16 ; RDI = (RSP_0 -64 72) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R14 = (RSP_0 -64 72) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000054a9: MOV RBX, QWORD PTR [RBP - 368] 7"
 Post  "RDX = 16 ; RDI = (RSP_0 -64 72) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R14 = (RSP_0 -64 72) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000054b0"
 Separations ""
 Assertions  ""
 Pre   "RDX = 16 ; RDI = (RSP_0 -64 72) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R14 = (RSP_0 -64 72) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000054b0: MOV RSI, RBX 3"
 Post  "RDX = 16 ; RDI = (RSP_0 -64 72) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R14 = (RSP_0 -64 72) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000054b3"
 Separations ""
 Assertions  ""
 Pre   "RDX = 16 ; RDI = (RSP_0 -64 72) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R14 = (RSP_0 -64 72) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000054b3: ExternalCall fun____strcat_chk 5"
 Post  "RAX = bot(fun____strcat_chk) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R14 = (RSP_0 -64 72) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 FunctionConstraints "PRESERVES fun____strcat_chk {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 120),8];[(RSP_0 -64 192),4];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 256),8];[(RSP_0 -64 264),1];[(RSP_0 -64 272),8];[(RSP_0 -64 279),1];[(RSP_0 -64 280),1];[(RSP_0 -64 288),8];[(RSP_0 -64 296),8];[(RSP_0 -64 304),4];[(RSP_0 -64 312),8];[(RSP_0 -64 316),4];[(RSP_0 -64 320),4];[(RSP_0 -64 324),4];[(RSP_0 -64 328),4];[(RSP_0 -64 332),4];[(RSP_0 -64 336),4];[(RSP_0 -64 344),8];[(RSP_0 -64 352),8];[(RSP_0 -64 368),8];[(RSP_0 -64 376),8];[(RSP_0 -64 384),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000054b8"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun____strcat_chk) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R14 = (RSP_0 -64 72) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000054b8: LEA RDX, [RIP + 22840] 7"
 Post  "RAX = bot(fun____strcat_chk) ; RDX = 0x10000adf7 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R14 = (RSP_0 -64 72) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000054bf"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun____strcat_chk) ; RDX = 0x10000adf7 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R14 = (RSP_0 -64 72) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000054bf: LEA R15, [RBP - 360] 7"
 Post  "RAX = bot(fun____strcat_chk) ; RDX = 0x10000adf7 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 368) ; R14 = (RSP_0 -64 72) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000054c6"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun____strcat_chk) ; RDX = 0x10000adf7 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 368) ; R14 = (RSP_0 -64 72) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000054c6: MOV RDI, R15 3"
 Post  "RAX = bot(fun____strcat_chk) ; RDX = 0x10000adf7 ; RDI = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 368) ; R14 = (RSP_0 -64 72) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000054c9"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun____strcat_chk) ; RDX = 0x10000adf7 ; RDI = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 368) ; R14 = (RSP_0 -64 72) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000054c9: MOV RSI, R14 3"
 Post  "RAX = bot(fun____strcat_chk) ; RDX = 0x10000adf7 ; RDI = (RSP_0 -64 368) ; RSI = (RSP_0 -64 72) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 368) ; R14 = (RSP_0 -64 72) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000054cc"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun____strcat_chk) ; RDX = 0x10000adf7 ; RDI = (RSP_0 -64 368) ; RSI = (RSP_0 -64 72) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 368) ; R14 = (RSP_0 -64 72) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000054cc: ExternalCall fun_0x100005c13 5"
 Post  "RAX = bot(fun_0x100005c13) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 368) ; R14 = (RSP_0 -64 72) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 FunctionConstraints "PRESERVES fun_0x100005c13 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 120),8];[(RSP_0 -64 192),4];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 256),8];[(RSP_0 -64 264),1];[(RSP_0 -64 272),8];[(RSP_0 -64 279),1];[(RSP_0 -64 280),1];[(RSP_0 -64 288),8];[(RSP_0 -64 296),8];[(RSP_0 -64 304),4];[(RSP_0 -64 312),8];[(RSP_0 -64 316),4];[(RSP_0 -64 320),4];[(RSP_0 -64 324),4];[(RSP_0 -64 328),4];[(RSP_0 -64 332),4];[(RSP_0 -64 336),4];[(RSP_0 -64 344),8];[(RSP_0 -64 352),8];[(RSP_0 -64 368),8];[(RSP_0 -64 376),8];[(RSP_0 -64 384),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000054d1"
 Separations "((RSP_0 -64 256),8) SEP (bot(fun____error),4); ((RSP_0 -64 256),8) SEP (RSI_0,8); ((RSP_0 -64 256),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 256),8) SEP (0x10000c008,8); ((RSP_0 -64 256),8) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 256),8) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c13) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 368) ; R14 = (RSP_0 -64 72) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000054d1: MOV RDI, QWORD PTR [R15 + 112] 4"
 Post  "RAX = bot(fun_0x100005c13) ; RDI = bot(fun_0x100004559) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 368) ; R14 = (RSP_0 -64 72) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000054d5"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c13) ; RDI = bot(fun_0x100004559) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 368) ; R14 = (RSP_0 -64 72) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000054d5: MOV RSI, RBX 3"
 Post  "RAX = bot(fun_0x100005c13) ; RDI = bot(fun_0x100004559) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 368) ; R14 = (RSP_0 -64 72) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000054d8"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c13) ; RDI = bot(fun_0x100004559) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 368) ; R14 = (RSP_0 -64 72) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000054d8: ExternalCall fun_0x100004324 5"
 Post  "RAX = bot(fun_0x100004324) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 368) ; R14 = (RSP_0 -64 72) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 FunctionConstraints "PRESERVES fun_0x100004324 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 120),8];[(RSP_0 -64 192),4];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 256),8];[(RSP_0 -64 264),1];[(RSP_0 -64 272),8];[(RSP_0 -64 279),1];[(RSP_0 -64 280),1];[(RSP_0 -64 288),8];[(RSP_0 -64 296),8];[(RSP_0 -64 304),4];[(RSP_0 -64 312),8];[(RSP_0 -64 316),4];[(RSP_0 -64 320),4];[(RSP_0 -64 324),4];[(RSP_0 -64 328),4];[(RSP_0 -64 332),4];[(RSP_0 -64 336),4];[(RSP_0 -64 344),8];[(RSP_0 -64 352),8];[(RSP_0 -64 368),8];[(RSP_0 -64 376),8];[(RSP_0 -64 384),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 207 ##
#######################################
*)

htriple "ht_1000054dd"
 Separations "((RSP_0 -64 256),8) SEP (bot(fun____error),4); ((RSP_0 -64 256),8) SEP (RSI_0,8); ((RSP_0 -64 256),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 256),8) SEP (0x10000c008,8); ((RSP_0 -64 256),8) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 256),8) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000054dd: MOV RDI, QWORD PTR [RBP - 248] 7"
 Post  "RDI = bot(fun_0x100004559) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000054e4"
 Separations ""
 Assertions  ""
 Pre   "RDI = bot(fun_0x100004559) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000054e4: ExternalCall fun_0x1000044e6 5"
 Post  "RAX = bot(fun_0x1000044e6) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 FunctionConstraints "PRESERVES fun_0x1000044e6 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 120),8];[(RSP_0 -64 192),4];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 256),8];[(RSP_0 -64 264),1];[(RSP_0 -64 272),8];[(RSP_0 -64 279),1];[(RSP_0 -64 280),1];[(RSP_0 -64 288),8];[(RSP_0 -64 296),8];[(RSP_0 -64 304),4];[(RSP_0 -64 312),8];[(RSP_0 -64 316),4];[(RSP_0 -64 320),4];[(RSP_0 -64 324),4];[(RSP_0 -64 328),4];[(RSP_0 -64 332),4];[(RSP_0 -64 336),4];[(RSP_0 -64 344),8];[(RSP_0 -64 352),8];[(RSP_0 -64 368),8];[(RSP_0 -64 376),8];[(RSP_0 -64 384),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000054e9"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000044e6) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000054e9: TEST RAX, RAX 3"
 Post  "RAX = bot(fun_0x1000044e6) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000054ec"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000044e6) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000054ec: JE 4294989064 2"
 Post  "RAX = bot(fun_0x1000044e6) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 208 ##
#######################################
*)

htriple "ht_1000054ee"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000044e6) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000054ee: LEA RSI, [RIP + 22793] 7"
 Post  "RAX = bot(fun_0x1000044e6) ; RSI = 0x10000adfe ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000054f5"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000044e6) ; RSI = 0x10000adfe ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000054f5: LEA RDX, [RIP + 22547] 7"
 Post  "RAX = bot(fun_0x1000044e6) ; RDX = 0x10000ad0f ; RSI = 0x10000adfe ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000054fc"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000044e6) ; RDX = 0x10000ad0f ; RSI = 0x10000adfe ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000054fc: LEA RDI, [RBP - 360] 7"
 Post  "RAX = bot(fun_0x1000044e6) ; RDX = 0x10000ad0f ; RDI = (RSP_0 -64 368) ; RSI = 0x10000adfe ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005503"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000044e6) ; RDX = 0x10000ad0f ; RDI = (RSP_0 -64 368) ; RSI = 0x10000adfe ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005503: ExternalCall fun_0x100005c13 5"
 Post  "RAX = bot(fun_0x100005c13) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 FunctionConstraints "PRESERVES fun_0x100005c13 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 120),8];[(RSP_0 -64 192),4];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 256),8];[(RSP_0 -64 264),1];[(RSP_0 -64 272),8];[(RSP_0 -64 279),1];[(RSP_0 -64 280),1];[(RSP_0 -64 288),8];[(RSP_0 -64 296),8];[(RSP_0 -64 304),4];[(RSP_0 -64 312),8];[(RSP_0 -64 316),4];[(RSP_0 -64 320),4];[(RSP_0 -64 324),4];[(RSP_0 -64 328),4];[(RSP_0 -64 332),4];[(RSP_0 -64 336),4];[(RSP_0 -64 344),8];[(RSP_0 -64 352),8];[(RSP_0 -64 368),8];[(RSP_0 -64 376),8];[(RSP_0 -64 384),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 209 ##
#######################################
*)

htriple "ht_100005508"
 Separations "((RSP_0 -64 279),1) SEP (bot(fun____error),4); ((RSP_0 -64 279),1) SEP (RSI_0,8); ((RSP_0 -64 279),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 279),1) SEP (0x10000c008,8); ((RSP_0 -64 279),1) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 279),1) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005508: MOV AL, BYTE PTR [RBP - 271] 6"
 Post  "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000550e"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000550e: TEST AL, AL 2"
 Post  "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005510"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005510: JE 4294989109 2"
 Post  "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 210 ##
#######################################
*)

htriple "ht_100005512"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005512: LEA RSI, [RBP - 64] 4"
 Post  "RSI = (RSP_0 -64 72) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005516"
 Separations "((RSP_0 -64 72),2) SEP (bot(fun____error),4); ((RSP_0 -64 72),2) SEP (RSI_0,8); ((RSP_0 -64 72),2) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 72),2) SEP (0x10000c008,8); ((RSP_0 -64 72),2) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 72),2) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4); ((RSP_0 -64 72),8) SEP ([0x10000c008,8]_0,8)"
 Assertions  ""
 Pre   "RSI = (RSP_0 -64 72) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005516: MOV WORD PTR [RSI], 16173 5"
 Post  "RSI = (RSP_0 -64 72) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000551b"
 Separations "((RSP_0 -64 70),1) SEP (bot(fun____error),4); ((RSP_0 -64 70),1) SEP (RSI_0,8); ((RSP_0 -64 70),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 70),1) SEP (0x10000c008,8); ((RSP_0 -64 70),1) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 70),1) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RSI = (RSP_0 -64 72) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000551b: MOV BYTE PTR [RSI + 2], 0 4"
 Post  "RSI = (RSP_0 -64 72) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000551f"
 Separations "((RSP_0 -64 71),1) SEP (bot(fun____error),4); ((RSP_0 -64 71),1) SEP (RSI_0,8); ((RSP_0 -64 71),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 71),1) SEP (0x10000c008,8); ((RSP_0 -64 71),1) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 71),1) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RSI = (RSP_0 -64 72) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000551f: MOV BYTE PTR [RSI + 1], AL 3"
 Post  "RSI = (RSP_0 -64 72) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005522"
 Separations ""
 Assertions  ""
 Pre   "RSI = (RSP_0 -64 72) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005522: LEA RDX, [RIP + 22502] 7"
 Post  "RDX = 0x10000ad0f ; RSI = (RSP_0 -64 72) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005529"
 Separations ""
 Assertions  ""
 Pre   "RDX = 0x10000ad0f ; RSI = (RSP_0 -64 72) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005529: LEA RDI, [RBP - 360] 7"
 Post  "RDX = 0x10000ad0f ; RDI = (RSP_0 -64 368) ; RSI = (RSP_0 -64 72) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005530"
 Separations ""
 Assertions  ""
 Pre   "RDX = 0x10000ad0f ; RDI = (RSP_0 -64 368) ; RSI = (RSP_0 -64 72) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005530: ExternalCall fun_0x100005c13 5"
 Post  "RAX = bot(fun_0x100005c13) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 FunctionConstraints "PRESERVES fun_0x100005c13 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 120),8];[(RSP_0 -64 192),4];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 256),8];[(RSP_0 -64 264),1];[(RSP_0 -64 272),8];[(RSP_0 -64 279),1];[(RSP_0 -64 280),1];[(RSP_0 -64 288),8];[(RSP_0 -64 296),8];[(RSP_0 -64 304),4];[(RSP_0 -64 312),8];[(RSP_0 -64 316),4];[(RSP_0 -64 320),4];[(RSP_0 -64 324),4];[(RSP_0 -64 328),4];[(RSP_0 -64 332),4];[(RSP_0 -64 336),4];[(RSP_0 -64 344),8];[(RSP_0 -64 352),8];[(RSP_0 -64 368),8];[(RSP_0 -64 376),8];[(RSP_0 -64 384),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 211 ##
#######################################
*)

htriple "ht_100005535"
 Separations "((RSP_0 -64 368),8) SEP (bot(fun____error),4); ((RSP_0 -64 368),8) SEP (RSI_0,8); ((RSP_0 -64 368),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 368),8) SEP (0x10000c008,8); ((RSP_0 -64 368),8) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 368),8) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005535: MOV RDI, QWORD PTR [RBP - 360] 7"
 Post  "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000553c"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000553c: TEST RDI, RDI 3"
 Post  "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000553f"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000553f: JE 4294989148 2"
 Post  "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 212 ##
#######################################
*)

htriple "ht_100005541"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005541: LEA RSI, [RIP + 22719] 7"
 Post  "RSI = 0x10000ae07 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005548"
 Separations ""
 Assertions  ""
 Pre   "RSI = 0x10000ae07 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005548: ExternalCall fun__strcmp 5"
 Post  "RAX = bot(fun__strcmp) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 FunctionConstraints "PRESERVES fun__strcmp {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 120),8];[(RSP_0 -64 192),4];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 256),8];[(RSP_0 -64 264),1];[(RSP_0 -64 272),8];[(RSP_0 -64 279),1];[(RSP_0 -64 280),1];[(RSP_0 -64 288),8];[(RSP_0 -64 296),8];[(RSP_0 -64 304),4];[(RSP_0 -64 312),8];[(RSP_0 -64 316),4];[(RSP_0 -64 320),4];[(RSP_0 -64 324),4];[(RSP_0 -64 328),4];[(RSP_0 -64 332),4];[(RSP_0 -64 336),4];[(RSP_0 -64 344),8];[(RSP_0 -64 352),8];[(RSP_0 -64 368),8];[(RSP_0 -64 376),8];[(RSP_0 -64 384),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000554d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strcmp) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000554d: TEST EAX, EAX 2"
 Post  "RAX = bot(fun__strcmp) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000554f"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strcmp) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000554f: JNE 4294989148 2"
 Post  "RAX = bot(fun__strcmp) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 213 ##
#######################################
*)

htriple "ht_10000555c"
 Separations "((RSP_0 -64 280),1) SEP (bot(fun____error),4); ((RSP_0 -64 280),1) SEP (RSI_0,8); ((RSP_0 -64 280),1) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 280),1) SEP (0x10000c008,8); ((RSP_0 -64 280),1) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 280),1) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000555c: MOVSX ECX, BYTE PTR [RBP - 272] 7"
 Post  "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005563"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005563: LEA EAX, [RCX - 114] 3"
 Post  "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005566"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005566: CMP EAX, 6 3"
 Post  "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005569"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005569: JA 4294989193 2"
 Post  "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 214 ##
#######################################
*)

htriple "ht_100005551"
 Separations "((RSP_0 -64 368),8) SEP (bot(fun____error),4); ((RSP_0 -64 368),8) SEP (RSI_0,8); ((RSP_0 -64 368),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 368),8) SEP (0x10000c008,8); ((RSP_0 -64 368),8) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 368),8) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun__strcmp) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005551: MOV QWORD PTR [RBP - 360], 0 11"
 Post  "RAX = bot(fun__strcmp) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559) ; [(RSP_0 -64 368),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 215 ##
#######################################
*)

htriple "ht_10000556b"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000556b: LEA RCX, [RIP + 1322] 7"
 Post  "RCX = 0x100005a9c ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005572"
 Separations ""
 Assertions  "((0x100005a9c +64 (RAX *64 4)),4) SEP (RSP_0,8); ((0x100005a9c +64 (RAX *64 4)),4) SEP ((RSP_0 -64 8),8); ((0x100005a9c +64 (RAX *64 4)),4) SEP ((RSP_0 -64 16),8); ((0x100005a9c +64 (RAX *64 4)),4) SEP ((RSP_0 -64 24),8); ((0x100005a9c +64 (RAX *64 4)),4) SEP ((RSP_0 -64 32),8); ((0x100005a9c +64 (RAX *64 4)),4) SEP ((RSP_0 -64 40),8); ((0x100005a9c +64 (RAX *64 4)),4) SEP ((RSP_0 -64 48),8); ((0x100005a9c +64 (RAX *64 4)),4) SEP ((RSP_0 -64 56),8); ((0x100005a9c +64 (RAX *64 4)),4) SEP ((RSP_0 -64 64),8); ((0x100005a9c +64 (RAX *64 4)),4) SEP ((RSP_0 -64 72),8); ((0x100005a9c +64 (RAX *64 4)),4) SEP ((RSP_0 -64 120),8); ((0x100005a9c +64 (RAX *64 4)),4) SEP ((RSP_0 -64 192),4); ((0x100005a9c +64 (RAX *64 4)),4) SEP ((RSP_0 -64 224),8); ((0x100005a9c +64 (RAX *64 4)),4) SEP ((RSP_0 -64 228),4); ((0x100005a9c +64 (RAX *64 4)),4) SEP ((RSP_0 -64 232),4); ((0x100005a9c +64 (RAX *64 4)),4) SEP ((RSP_0 -64 256),8); ((0x100005a9c +64 (RAX *64 4)),4) SEP ((RSP_0 -64 264),1); ((0x100005a9c +64 (RAX *64 4)),4) SEP ((RSP_0 -64 272),8); ((0x100005a9c +64 (RAX *64 4)),4) SEP ((RSP_0 -64 279),1); ((0x100005a9c +64 (RAX *64 4)),4) SEP ((RSP_0 -64 280),1); ((0x100005a9c +64 (RAX *64 4)),4) SEP ((RSP_0 -64 288),8); ((0x100005a9c +64 (RAX *64 4)),4) SEP ((RSP_0 -64 296),8); ((0x100005a9c +64 (RAX *64 4)),4) SEP ((RSP_0 -64 304),4); ((0x100005a9c +64 (RAX *64 4)),4) SEP ((RSP_0 -64 312),8); ((0x100005a9c +64 (RAX *64 4)),4) SEP ((RSP_0 -64 316),4); ((0x100005a9c +64 (RAX *64 4)),4) SEP ((RSP_0 -64 320),4); ((0x100005a9c +64 (RAX *64 4)),4) SEP ((RSP_0 -64 324),4); ((0x100005a9c +64 (RAX *64 4)),4) SEP ((RSP_0 -64 328),4); ((0x100005a9c +64 (RAX *64 4)),4) SEP ((RSP_0 -64 332),4); ((0x100005a9c +64 (RAX *64 4)),4) SEP ((RSP_0 -64 336),4); ((0x100005a9c +64 (RAX *64 4)),4) SEP ((RSP_0 -64 344),8); ((0x100005a9c +64 (RAX *64 4)),4) SEP ((RSP_0 -64 352),8); ((0x100005a9c +64 (RAX *64 4)),4) SEP ((RSP_0 -64 368),8); ((0x100005a9c +64 (RAX *64 4)),4) SEP ((RSP_0 -64 376),8); ((0x100005a9c +64 (RAX *64 4)),4) SEP ((RSP_0 -64 384),8)"
 Pre   "RCX = 0x100005a9c ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005572: MOVSXD RAX, DWORD PTR [RCX + RAX * 4] 4"
 Post  "RCX = 0x100005a9c ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005576"
 Separations ""
 Assertions  ""
 Pre   "RCX = 0x100005a9c ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005576: ADD RAX, RCX 3"
 Post  "RCX = 0x100005a9c ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005579"
 Separations ""
 Assertions  ""
 Pre   "RCX = 0x100005a9c ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005579: JMP RAX 2"
 Post  "RCX = 0x100005a9c ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 216 ##
#######################################
*)

htriple "ht_100005589"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005589: CMP ECX, 99 3"
 Post  "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000558c"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000558c: JNE 4294989252 2"
 Post  "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 217 ##
#######################################
*)

htriple "ht_10000557b"
 Separations ""
 Assertions  ""
 Pre   "RCX = 0x100005a9c ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000557b: LEA RDI, [RBP - 360] 7"
 Post  "RCX = 0x100005a9c ; RDI = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005582"
 Separations ""
 Assertions  ""
 Pre   "RCX = 0x100005a9c ; RDI = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005582: ExternalCall fun_0x100008bab 5"
 Post  "RAX = bot(fun_0x100008bab) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 FunctionConstraints "PRESERVES fun_0x100008bab {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 120),8];[(RSP_0 -64 192),4];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 256),8];[(RSP_0 -64 264),1];[(RSP_0 -64 272),8];[(RSP_0 -64 279),1];[(RSP_0 -64 280),1];[(RSP_0 -64 288),8];[(RSP_0 -64 296),8];[(RSP_0 -64 304),4];[(RSP_0 -64 312),8];[(RSP_0 -64 316),4];[(RSP_0 -64 320),4];[(RSP_0 -64 324),4];[(RSP_0 -64 328),4];[(RSP_0 -64 332),4];[(RSP_0 -64 336),4];[(RSP_0 -64 344),8];[(RSP_0 -64 352),8];[(RSP_0 -64 368),8];[(RSP_0 -64 376),8];[(RSP_0 -64 384),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005587"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100008bab) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005587: JMP 4294989252 2"
 Post  "RAX = bot(fun_0x100008bab) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 218 ##
#######################################
*)

htriple "ht_10000559c"
 Separations ""
 Assertions  ""
 Pre   "RCX = 0x100005a9c ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000559c: LEA RDI, [RBP - 360] 7"
 Post  "RCX = 0x100005a9c ; RDI = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000055a3"
 Separations ""
 Assertions  ""
 Pre   "RCX = 0x100005a9c ; RDI = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000055a3: ExternalCall fun_0x100008fab 5"
 Post  "RAX = bot(fun_0x100008fab) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 FunctionConstraints "PRESERVES fun_0x100008fab {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 120),8];[(RSP_0 -64 192),4];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 256),8];[(RSP_0 -64 264),1];[(RSP_0 -64 272),8];[(RSP_0 -64 279),1];[(RSP_0 -64 280),1];[(RSP_0 -64 288),8];[(RSP_0 -64 296),8];[(RSP_0 -64 304),4];[(RSP_0 -64 312),8];[(RSP_0 -64 316),4];[(RSP_0 -64 320),4];[(RSP_0 -64 324),4];[(RSP_0 -64 328),4];[(RSP_0 -64 332),4];[(RSP_0 -64 336),4];[(RSP_0 -64 344),8];[(RSP_0 -64 352),8];[(RSP_0 -64 368),8];[(RSP_0 -64 376),8];[(RSP_0 -64 384),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000055a8"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100008fab) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000055a8: JMP 4294989252 2"
 Post  "RAX = bot(fun_0x100008fab) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 219 ##
#######################################
*)

htriple "ht_1000055b8"
 Separations ""
 Assertions  ""
 Pre   "RCX = 0x100005a9c ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000055b8: LEA RDI, [RBP - 360] 7"
 Post  "RCX = 0x100005a9c ; RDI = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000055bf"
 Separations ""
 Assertions  ""
 Pre   "RCX = 0x100005a9c ; RDI = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000055bf: ExternalCall fun_0x100006094 5"
 Post  "RAX = bot(fun_0x100006094) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 FunctionConstraints "PRESERVES fun_0x100006094 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 120),8];[(RSP_0 -64 192),4];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 256),8];[(RSP_0 -64 264),1];[(RSP_0 -64 272),8];[(RSP_0 -64 279),1];[(RSP_0 -64 280),1];[(RSP_0 -64 288),8];[(RSP_0 -64 296),8];[(RSP_0 -64 304),4];[(RSP_0 -64 312),8];[(RSP_0 -64 316),4];[(RSP_0 -64 320),4];[(RSP_0 -64 324),4];[(RSP_0 -64 328),4];[(RSP_0 -64 332),4];[(RSP_0 -64 336),4];[(RSP_0 -64 344),8];[(RSP_0 -64 352),8];[(RSP_0 -64 368),8];[(RSP_0 -64 376),8];[(RSP_0 -64 384),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 220 ##
#######################################
*)

htriple "ht_1000055c4"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000055c4: LEA RBX, [RBP - 360] 7"
 Post  "RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000055cb"
 Separations "((RSP_0 -64 120),8) SEP (bot(fun____error),4); ((RSP_0 -64 120),8) SEP (RSI_0,8); ((RSP_0 -64 120),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 120),8) SEP (0x10000c008,8); ((RSP_0 -64 120),8) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 120),8) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000055cb: MOV RDI, QWORD PTR [RBX + 248] 7"
 Post  "RBX = (RSP_0 -64 368) ; RDI = bot(fun__archive_match_new) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000055d2"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 368) ; RDI = bot(fun__archive_match_new) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000055d2: ExternalCall fun__archive_match_free 5"
 Post  "RAX = bot(fun__archive_match_free) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 FunctionConstraints "PRESERVES fun__archive_match_free {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 120),8];[(RSP_0 -64 192),4];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 256),8];[(RSP_0 -64 264),1];[(RSP_0 -64 272),8];[(RSP_0 -64 279),1];[(RSP_0 -64 280),1];[(RSP_0 -64 288),8];[(RSP_0 -64 296),8];[(RSP_0 -64 304),4];[(RSP_0 -64 312),8];[(RSP_0 -64 316),4];[(RSP_0 -64 320),4];[(RSP_0 -64 324),4];[(RSP_0 -64 328),4];[(RSP_0 -64 332),4];[(RSP_0 -64 336),4];[(RSP_0 -64 344),8];[(RSP_0 -64 352),8];[(RSP_0 -64 368),8];[(RSP_0 -64 376),8];[(RSP_0 -64 384),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000055d7"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_match_free) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000055d7: MOV RDI, RBX 3"
 Post  "RAX = bot(fun__archive_match_free) ; RBX = (RSP_0 -64 368) ; RDI = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000055da"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_match_free) ; RBX = (RSP_0 -64 368) ; RDI = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000055da: ExternalCall fun_0x100007158 5"
 Post  "RAX = bot(fun_0x100007158) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 FunctionConstraints "PRESERVES fun_0x100007158 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 120),8];[(RSP_0 -64 192),4];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 256),8];[(RSP_0 -64 264),1];[(RSP_0 -64 272),8];[(RSP_0 -64 279),1];[(RSP_0 -64 280),1];[(RSP_0 -64 288),8];[(RSP_0 -64 296),8];[(RSP_0 -64 304),4];[(RSP_0 -64 312),8];[(RSP_0 -64 316),4];[(RSP_0 -64 320),4];[(RSP_0 -64 324),4];[(RSP_0 -64 328),4];[(RSP_0 -64 332),4];[(RSP_0 -64 336),4];[(RSP_0 -64 344),8];[(RSP_0 -64 352),8];[(RSP_0 -64 368),8];[(RSP_0 -64 376),8];[(RSP_0 -64 384),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000055df"
 Separations "((RSP_0 -64 256),8) SEP (bot(fun____error),4); ((RSP_0 -64 256),8) SEP (RSI_0,8); ((RSP_0 -64 256),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 256),8) SEP (0x10000c008,8); ((RSP_0 -64 256),8) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 256),8) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100007158) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000055df: MOV RDI, QWORD PTR [RBX + 112] 4"
 Post  "RAX = bot(fun_0x100007158) ; RBX = (RSP_0 -64 368) ; RDI = bot(fun_0x100004559) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000055e3"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100007158) ; RBX = (RSP_0 -64 368) ; RDI = bot(fun_0x100004559) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000055e3: ExternalCall fun_0x1000044ef 5"
 Post  "RAX = bot(fun_0x1000044ef) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 FunctionConstraints "PRESERVES fun_0x1000044ef {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 120),8];[(RSP_0 -64 192),4];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 256),8];[(RSP_0 -64 264),1];[(RSP_0 -64 272),8];[(RSP_0 -64 279),1];[(RSP_0 -64 280),1];[(RSP_0 -64 288),8];[(RSP_0 -64 296),8];[(RSP_0 -64 304),4];[(RSP_0 -64 312),8];[(RSP_0 -64 316),4];[(RSP_0 -64 320),4];[(RSP_0 -64 324),4];[(RSP_0 -64 328),4];[(RSP_0 -64 332),4];[(RSP_0 -64 336),4];[(RSP_0 -64 344),8];[(RSP_0 -64 352),8];[(RSP_0 -64 368),8];[(RSP_0 -64 376),8];[(RSP_0 -64 384),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000055e8"
 Separations "((RSP_0 -64 80),8) SEP (bot(fun____error),4); ((RSP_0 -64 80),8) SEP ([0x10000c008,8]_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000044ef) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000055e8: MOV RDI, QWORD PTR [RBX + 288] 7"
 Post  "RAX = bot(fun_0x1000044ef) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000055ef"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000044ef) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000055ef: ExternalCall fun_0x100007d30 5"
 Post  "RAX = bot(fun_0x100007d30) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 FunctionConstraints "PRESERVES fun_0x100007d30 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 120),8];[(RSP_0 -64 192),4];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 256),8];[(RSP_0 -64 264),1];[(RSP_0 -64 272),8];[(RSP_0 -64 279),1];[(RSP_0 -64 280),1];[(RSP_0 -64 288),8];[(RSP_0 -64 296),8];[(RSP_0 -64 304),4];[(RSP_0 -64 312),8];[(RSP_0 -64 316),4];[(RSP_0 -64 320),4];[(RSP_0 -64 324),4];[(RSP_0 -64 328),4];[(RSP_0 -64 332),4];[(RSP_0 -64 336),4];[(RSP_0 -64 344),8];[(RSP_0 -64 352),8];[(RSP_0 -64 368),8];[(RSP_0 -64 376),8];[(RSP_0 -64 384),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000055f4"
 Separations "((RSP_0 -64 188),4) SEP (bot(fun____error),4); ((RSP_0 -64 188),4) SEP ([0x10000c008,8]_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100007d30) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000055f4: CMP DWORD PTR [RBX + 180], 0 7"
 Post  "RAX = bot(fun_0x100007d30) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000055fb"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100007d30) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000055fb: JE 4294989333 2"
 Post  "RAX = bot(fun_0x100007d30) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 221 ##
#######################################
*)

htriple "ht_10000558e"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000558e: LEA RDI, [RBP - 360] 7"
 Post  "RDI = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005595"
 Separations ""
 Assertions  ""
 Pre   "RDI = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005595: ExternalCall fun_0x100008102 5"
 Post  "RAX = bot(fun_0x100008102) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 FunctionConstraints "PRESERVES fun_0x100008102 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 120),8];[(RSP_0 -64 192),4];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 256),8];[(RSP_0 -64 264),1];[(RSP_0 -64 272),8];[(RSP_0 -64 279),1];[(RSP_0 -64 280),1];[(RSP_0 -64 288),8];[(RSP_0 -64 296),8];[(RSP_0 -64 304),4];[(RSP_0 -64 312),8];[(RSP_0 -64 316),4];[(RSP_0 -64 320),4];[(RSP_0 -64 324),4];[(RSP_0 -64 328),4];[(RSP_0 -64 332),4];[(RSP_0 -64 336),4];[(RSP_0 -64 344),8];[(RSP_0 -64 352),8];[(RSP_0 -64 368),8];[(RSP_0 -64 376),8];[(RSP_0 -64 384),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000559a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100008102) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000559a: JMP 4294989252 2"
 Post  "RAX = bot(fun_0x100008102) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 222 ##
#######################################
*)

htriple "ht_1000055fd"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100007d30) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "1000055fd: LEA RSI, [RIP + 22533] 7"
 Post  "RAX = bot(fun_0x100007d30) ; RBX = (RSP_0 -64 368) ; RSI = 0x10000ae09 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005604"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100007d30) ; RBX = (RSP_0 -64 368) ; RSI = 0x10000ae09 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005604: XOR EDI, EDI 2"
 Post  "RAX = bot(fun_0x100007d30) ; RBX = (RSP_0 -64 368) ; RDI = 0 ; RSI = 0x10000ae09 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005606"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100007d30) ; RBX = (RSP_0 -64 368) ; RDI = 0 ; RSI = 0x10000ae09 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005606: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = (RSP_0 -64 368) ; RDI = 0 ; RSI = 0x10000ae09 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005608"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = (RSP_0 -64 368) ; RDI = 0 ; RSI = 0x10000ae09 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005608: ExternalCall fun_0x1000099ad 5"
 Post  "RAX = bot(fun_0x1000099ad) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 FunctionConstraints "PRESERVES fun_0x1000099ad {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 120),8];[(RSP_0 -64 192),4];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 256),8];[(RSP_0 -64 264),1];[(RSP_0 -64 272),8];[(RSP_0 -64 279),1];[(RSP_0 -64 280),1];[(RSP_0 -64 288),8];[(RSP_0 -64 296),8];[(RSP_0 -64 304),4];[(RSP_0 -64 312),8];[(RSP_0 -64 316),4];[(RSP_0 -64 320),4];[(RSP_0 -64 324),4];[(RSP_0 -64 328),4];[(RSP_0 -64 332),4];[(RSP_0 -64 336),4];[(RSP_0 -64 344),8];[(RSP_0 -64 352),8];[(RSP_0 -64 368),8];[(RSP_0 -64 376),8];[(RSP_0 -64 384),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000560d"
 Separations "((RSP_0 -64 188),4) SEP (bot(fun____error),4); ((RSP_0 -64 188),4) SEP ([0x10000c008,8]_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000099ad) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000560d: MOV EAX, DWORD PTR [RBP - 180] 6"
 Post  "RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005613"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005613: JMP 4294989335 2"
 Post  "RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 223 ##
#######################################
*)

htriple "ht_100005615"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100007d30) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005615: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 224 ##
#######################################
*)

htriple "ht_100005617"
 Separations "(0x10000c008,8) SEP (bot(fun____error),4); (0x10000c008,8) SEP (RSI_0,8); (0x10000c008,8) SEP (RSP_0,8); (0x10000c008,8) SEP ([0x10000c008,8]_0,8); (0x10000c008,8) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); (0x10000c008,8) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4); (0x10000c008,8) SEP ((RSP_0 -64 8),8); (0x10000c008,8) SEP ((RSP_0 -64 16),8); (0x10000c008,8) SEP ((RSP_0 -64 24),8); (0x10000c008,8) SEP ((RSP_0 -64 32),8); (0x10000c008,8) SEP ((RSP_0 -64 40),8); (0x10000c008,8) SEP ((RSP_0 -64 48),8); (0x10000c008,8) SEP ((RSP_0 -64 56),8); (0x10000c008,8) SEP ((RSP_0 -64 64),8); (0x10000c008,8) SEP ((RSP_0 -64 72),8); (0x10000c008,8) SEP ((RSP_0 -64 120),8); (0x10000c008,8) SEP ((RSP_0 -64 192),4); (0x10000c008,8) SEP ((RSP_0 -64 224),8); (0x10000c008,8) SEP ((RSP_0 -64 228),4); (0x10000c008,8) SEP ((RSP_0 -64 232),4); (0x10000c008,8) SEP ((RSP_0 -64 256),8); (0x10000c008,8) SEP ((RSP_0 -64 264),1); (0x10000c008,8) SEP ((RSP_0 -64 272),8); (0x10000c008,8) SEP ((RSP_0 -64 279),1); (0x10000c008,8) SEP ((RSP_0 -64 280),1); (0x10000c008,8) SEP ((RSP_0 -64 288),8); (0x10000c008,8) SEP ((RSP_0 -64 296),8); (0x10000c008,8) SEP ((RSP_0 -64 304),4); (0x10000c008,8) SEP ((RSP_0 -64 312),8); (0x10000c008,8) SEP ((RSP_0 -64 316),4); (0x10000c008,8) SEP ((RSP_0 -64 320),4); (0x10000c008,8) SEP ((RSP_0 -64 324),4); (0x10000c008,8) SEP ((RSP_0 -64 328),4); (0x10000c008,8) SEP ((RSP_0 -64 332),4); (0x10000c008,8) SEP ((RSP_0 -64 336),4); (0x10000c008,8) SEP ((RSP_0 -64 344),8); (0x10000c008,8) SEP ((RSP_0 -64 352),8); (0x10000c008,8) SEP ((RSP_0 -64 368),8); (0x10000c008,8) SEP ((RSP_0 -64 376),8); (0x10000c008,8) SEP ((RSP_0 -64 384),8)"
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005617: MOV RCX, QWORD PTR [RIP + 27114] 7"
 Post  "RBX = (RSP_0 -64 368) ; RCX = [0x10000c008,8]_0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000561e"
 Separations "([0x10000c008,8]_0,8) SEP (bot(fun____error),4); ([0x10000c008,8]_0,8) SEP (RSI_0,8); ([0x10000c008,8]_0,8) SEP (RSP_0,8); ([0x10000c008,8]_0,8) SEP (0x10000c008,8); ([0x10000c008,8]_0,8) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ([0x10000c008,8]_0,8) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 8),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 16),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 24),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 32),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 40),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 48),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 56),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 64),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 70),1); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 71),1); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 72),2); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 72),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 80),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 120),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 188),4); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 192),4); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 216),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 224),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 228),4); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 232),4); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 256),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 264),1); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 272),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 279),1); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 280),1); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 288),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 296),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 304),4); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 312),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 316),4); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 320),4); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 324),1); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 324),4); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 326),1); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 327),1); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 328),1); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 328),4); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 330),1); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 331),1); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 332),1); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 332),4); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 336),4); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 340),4); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 344),4); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 344),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 352),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 368),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 376),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 384),8)"
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 368) ; RCX = [0x10000c008,8]_0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000561e: MOV RCX, QWORD PTR [RCX] 3"
 Post  "RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005621"
 Separations "((RSP_0 -64 56),8) SEP (bot(fun____error),4); ((RSP_0 -64 56),8) SEP (RSI_0,8); ((RSP_0 -64 56),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 56),8) SEP (0x10000c008,8); ((RSP_0 -64 56),8) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 56),8) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005621: CMP RCX, QWORD PTR [RBP - 48] 4"
 Post  "RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005625"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005625: JNE 4294989400 2"
 Post  "RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 225 ##
#######################################
*)

htriple "ht_100005627"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005627: ADD RSP, 344 7"
 Post  "RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000562e"
 Separations "((RSP_0 -64 40),8) SEP (bot(fun____error),4); ((RSP_0 -64 40),8) SEP (RSI_0,8); ((RSP_0 -64 40),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 40),8) SEP (0x10000c008,8); ((RSP_0 -64 40),8) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 40),8) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000562e: POP RBX 1"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000562f"
 Separations "((RSP_0 -64 32),8) SEP (bot(fun____error),4); ((RSP_0 -64 32),8) SEP (RSI_0,8); ((RSP_0 -64 32),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 32),8) SEP (0x10000c008,8); ((RSP_0 -64 32),8) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 32),8) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000562f: POP R12 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005631"
 Separations "((RSP_0 -64 24),8) SEP (bot(fun____error),4); ((RSP_0 -64 24),8) SEP (RSI_0,8); ((RSP_0 -64 24),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 24),8) SEP (0x10000c008,8); ((RSP_0 -64 24),8) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 24),8) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005631: POP R13 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005633"
 Separations "((RSP_0 -64 16),8) SEP (bot(fun____error),4); ((RSP_0 -64 16),8) SEP (RSI_0,8); ((RSP_0 -64 16),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 16),8) SEP (0x10000c008,8); ((RSP_0 -64 16),8) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 16),8) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005633: POP R14 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005635"
 Separations "((RSP_0 -64 8),8) SEP (bot(fun____error),4); ((RSP_0 -64 8),8) SEP (RSI_0,8); ((RSP_0 -64 8),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 8),8) SEP (0x10000c008,8); ((RSP_0 -64 8),8) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 8),8) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005635: POP R15 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005637"
 Separations ""
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005637: POP RBP 1"
 Post  "RBX = RBX_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005638"
 Separations ""
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005638: RET  1"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 +64 8) ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 226 ##
#######################################
*)

htriple "ht_100005658"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005658: ExternalCall fun____stack_chk_fail 5"
 Post  "RAX = bot(fun____stack_chk_fail) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 FunctionConstraints "PRESERVES fun____stack_chk_fail {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 120),8];[(RSP_0 -64 192),4];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 256),8];[(RSP_0 -64 264),1];[(RSP_0 -64 272),8];[(RSP_0 -64 279),1];[(RSP_0 -64 280),1];[(RSP_0 -64 288),8];[(RSP_0 -64 296),8];[(RSP_0 -64 304),4];[(RSP_0 -64 312),8];[(RSP_0 -64 316),4];[(RSP_0 -64 320),4];[(RSP_0 -64 324),4];[(RSP_0 -64 328),4];[(RSP_0 -64 332),4];[(RSP_0 -64 336),4];[(RSP_0 -64 344),8];[(RSP_0 -64 352),8];[(RSP_0 -64 368),8];[(RSP_0 -64 376),8];[(RSP_0 -64 384),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 227 ##
#######################################
*)

htriple "ht_100005467"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005467: LEA RDX, [RIP + 22921] 7"
 Post  "RDX = 0x10000adf7 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000546e"
 Separations ""
 Assertions  ""
 Pre   "RDX = 0x10000adf7 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000546e: LEA RBX, [RBP - 360] 7"
 Post  "RBX = (RSP_0 -64 368) ; RDX = 0x10000adf7 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005475"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 368) ; RDX = 0x10000adf7 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005475: LEA RSI, [RBP - 64] 4"
 Post  "RBX = (RSP_0 -64 368) ; RDX = 0x10000adf7 ; RSI = (RSP_0 -64 72) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005479"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 368) ; RDX = 0x10000adf7 ; RSI = (RSP_0 -64 72) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005479: MOV RDI, RBX 3"
 Post  "RBX = (RSP_0 -64 368) ; RDX = 0x10000adf7 ; RDI = (RSP_0 -64 368) ; RSI = (RSP_0 -64 72) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000547c"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 368) ; RDX = 0x10000adf7 ; RDI = (RSP_0 -64 368) ; RSI = (RSP_0 -64 72) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000547c: ExternalCall fun_0x100005c13 5"
 Post  "RAX = bot(fun_0x100005c13) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 FunctionConstraints "PRESERVES fun_0x100005c13 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 120),8];[(RSP_0 -64 192),4];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 256),8];[(RSP_0 -64 264),1];[(RSP_0 -64 272),8];[(RSP_0 -64 279),1];[(RSP_0 -64 280),1];[(RSP_0 -64 288),8];[(RSP_0 -64 296),8];[(RSP_0 -64 304),4];[(RSP_0 -64 312),8];[(RSP_0 -64 316),4];[(RSP_0 -64 320),4];[(RSP_0 -64 324),4];[(RSP_0 -64 328),4];[(RSP_0 -64 332),4];[(RSP_0 -64 336),4];[(RSP_0 -64 344),8];[(RSP_0 -64 352),8];[(RSP_0 -64 368),8];[(RSP_0 -64 376),8];[(RSP_0 -64 384),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005481"
 Separations "((RSP_0 -64 256),8) SEP (bot(fun____error),4); ((RSP_0 -64 256),8) SEP (RSI_0,8); ((RSP_0 -64 256),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 256),8) SEP (0x10000c008,8); ((RSP_0 -64 256),8) SEP ((0x1000058a0 +64 ((b32(bot(fun_0x100005c50)) -32 1) *64 4)),4); ((RSP_0 -64 256),8) SEP ((0x100005a88 +64 ((b32(bot(fun_0x100005c50)) -32 17) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c13) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005481: MOV RDI, QWORD PTR [RBX + 112] 4"
 Post  "RAX = bot(fun_0x100005c13) ; RBX = (RSP_0 -64 368) ; RDI = bot(fun_0x100004559) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005485"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c13) ; RBX = (RSP_0 -64 368) ; RDI = bot(fun_0x100004559) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005485: MOV RSI, R13 3"
 Post  "RAX = bot(fun_0x100005c13) ; RBX = (RSP_0 -64 368) ; RDI = bot(fun_0x100004559) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005488"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c13) ; RBX = (RSP_0 -64 368) ; RDI = bot(fun_0x100004559) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005488: ExternalCall fun_0x100004324 5"
 Post  "RAX = bot(fun_0x100004324) ; RBX = (RSP_0 -64 368) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 FunctionConstraints "PRESERVES fun_0x100004324 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 120),8];[(RSP_0 -64 192),4];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 256),8];[(RSP_0 -64 264),1];[(RSP_0 -64 272),8];[(RSP_0 -64 279),1];[(RSP_0 -64 280),1];[(RSP_0 -64 288),8];[(RSP_0 -64 296),8];[(RSP_0 -64 304),4];[(RSP_0 -64 312),8];[(RSP_0 -64 316),4];[(RSP_0 -64 320),4];[(RSP_0 -64 324),4];[(RSP_0 -64 328),4];[(RSP_0 -64 332),4];[(RSP_0 -64 336),4];[(RSP_0 -64 344),8];[(RSP_0 -64 352),8];[(RSP_0 -64 368),8];[(RSP_0 -64 376),8];[(RSP_0 -64 384),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 228 ##
#######################################
*)

htriple "ht_10000585d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100005c50) ; RBX = 0x1000058a0 ; RDX = 0x10000ac35 ; RDI = 1 ; RSI = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000585d: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = 0x1000058a0 ; RDX = 0x10000ac35 ; RDI = 1 ; RSI = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000585f"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = 0x1000058a0 ; RDX = 0x10000ac35 ; RDI = 1 ; RSI = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000585f: ExternalCall fun_0x100009ac2 5"
 Post  "RAX = bot(fun_0x100009ac2) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 FunctionConstraints "PRESERVES fun_0x100009ac2 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 120),8];[(RSP_0 -64 192),4];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 256),8];[(RSP_0 -64 264),1];[(RSP_0 -64 272),8];[(RSP_0 -64 279),1];[(RSP_0 -64 280),1];[(RSP_0 -64 288),8];[(RSP_0 -64 296),8];[(RSP_0 -64 304),4];[(RSP_0 -64 312),8];[(RSP_0 -64 316),4];[(RSP_0 -64 320),4];[(RSP_0 -64 324),4];[(RSP_0 -64 328),4];[(RSP_0 -64 332),4];[(RSP_0 -64 336),4];[(RSP_0 -64 344),8];[(RSP_0 -64 352),8];[(RSP_0 -64 368),8];[(RSP_0 -64 376),8];[(RSP_0 -64 384),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 229 ##
#######################################
*)

htriple "ht_100005890"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005890: MOV EDI, 1 5"
 Post  "RDI = 1 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005895"
 Separations ""
 Assertions  ""
 Pre   "RDI = 1 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005895: XOR ESI, ESI 2"
 Post  "RDI = 1 ; RSI = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 230 ##
#######################################
*)

htriple "ht_100005814"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005814: MOV EDI, 1 5"
 Post  "RBX = 0x1000058a0 ; RDI = 1 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005819"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x1000058a0 ; RDI = 1 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "100005819: XOR ESI, ESI 2"
 Post  "RBX = 0x1000058a0 ; RDI = 1 ; RSI = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 231 ##
#######################################
*)

htriple "ht_10000581b"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x1000058a0 ; RDI = 1 ; RSI = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000581b: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = 0x1000058a0 ; RDI = 1 ; RSI = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000581d"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = 0x1000058a0 ; RDI = 1 ; RSI = 0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 Instruction "10000581d: ExternalCall fun_0x100009ac2 5"
 Post  "RAX = bot(fun_0x100009ac2) ; RBX = 0x1000058a0 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 120),8] = bot(fun__archive_match_new) ; [(RSP_0 -64 192),4] = b32(bot(fun__geteuid)) ; [(RSP_0 -64 224),8] = RSI_0 ; [(RSP_0 -64 228),4] = b32(RDI_0) ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 256),8] = bot(fun_0x100004559)"
 FunctionConstraints "PRESERVES fun_0x100009ac2 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 120),8];[(RSP_0 -64 192),4];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 256),8];[(RSP_0 -64 264),1];[(RSP_0 -64 272),8];[(RSP_0 -64 279),1];[(RSP_0 -64 280),1];[(RSP_0 -64 288),8];[(RSP_0 -64 296),8];[(RSP_0 -64 304),4];[(RSP_0 -64 312),8];[(RSP_0 -64 316),4];[(RSP_0 -64 320),4];[(RSP_0 -64 324),4];[(RSP_0 -64 328),4];[(RSP_0 -64 332),4];[(RSP_0 -64 336),4];[(RSP_0 -64 344),8];[(RSP_0 -64 352),8];[(RSP_0 -64 368),8];[(RSP_0 -64 376),8];[(RSP_0 -64 384),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 232 ##
#######################################
*)

htriple "ht_100005882"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun____error) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "100005882: MOV EDI, 1 5"
 Post  "RAX = bot(fun____error) ; RDI = 1 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005887"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun____error) ; RDI = 1 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
 Instruction "100005887: JMP 4294989975 2"
 Post  "RAX = bot(fun____error) ; RDI = 1 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = b32(RDI_0) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = 0xffffffff ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 279),1] = [(RSP_0 -64 279),1]_0 ; [(RSP_0 -64 280),1] = [(RSP_0 -64 280),1]_0 ; [(RSP_0 -64 288),8] = [(RSP_0 -64 288),8]_0 ; [(RSP_0 -64 296),8] = [(RSP_0 -64 296),8]_0 ; [(RSP_0 -64 304),4] = 0xffffffff ; [(RSP_0 -64 312),8] = [(RSP_0 -64 312),8]_0 ; [(RSP_0 -64 316),4] = 0xffffffff ; [(RSP_0 -64 320),4] = [(RSP_0 -64 320),4]_0 ; [(RSP_0 -64 332),4] = 0 ; [(RSP_0 -64 336),4] = [(RSP_0 -64 336),4]_0 ; [(RSP_0 -64 352),8] = [(RSP_0 -64 352),8]_0 ; [(RSP_0 -64 368),8] = [(RSP_0 -64 368),8]_0 ; [(RSP_0 -64 376),8] = [(RSP_0 -64 376),8]_0 ; [(RSP_0 -64 384),8] = [(RSP_0 -64 384),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000047ce, blockId == 233 ##
#######################################
*)

htriple "ht_100005897"
 Separations ""
 Assertions  ""
 Pre   "RDI = 1 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 232),4] = 0xffffffff"
 Instruction "100005897: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RDI = 1 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 232),4] = 0xffffffff"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005899"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RDI = 1 ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 232),4] = 0xffffffff"
 Instruction "100005899: ExternalCall fun_0x100009ac2 5"
 Post  "RAX = bot(fun_0x100009ac2) ; RSP = (RSP_0 -64 392) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 232),4] = 0xffffffff"
 FunctionConstraints "PRESERVES fun_0x100009ac2 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 120),8];[(RSP_0 -64 192),4];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 256),8];[(RSP_0 -64 264),1];[(RSP_0 -64 272),8];[(RSP_0 -64 279),1];[(RSP_0 -64 280),1];[(RSP_0 -64 288),8];[(RSP_0 -64 296),8];[(RSP_0 -64 304),4];[(RSP_0 -64 312),8];[(RSP_0 -64 316),4];[(RSP_0 -64 320),4];[(RSP_0 -64 324),4];[(RSP_0 -64 328),4];[(RSP_0 -64 332),4];[(RSP_0 -64 336),4];[(RSP_0 -64 344),8];[(RSP_0 -64 352),8];[(RSP_0 -64 368),8];[(RSP_0 -64 376),8];[(RSP_0 -64 384),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




end
end
