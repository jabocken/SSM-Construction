theory tar_100008396
imports "../../../isabelle/X86_Semantics/X86_Parse_Hoare_Triples"


begin


context semantics
begin

(*
#####################################
## Entry = 100008396, blockId == 0 ##
#####################################
*)

htriple "ht_100008396"
 Separations "((RSP_0 -64 8),8) SEP (bot(fun____error),4); ((RSP_0 -64 8),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 8),8) SEP (0x10000c010,8); ((RSP_0 -64 8),8) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 8),8) SEP ((RSI_0 +64 24),4); ((RSP_0 -64 8),8) SEP ((RSI_0 +64 32),4); ((RSP_0 -64 8),8) SEP ((RSI_0 +64 36),4); ((RSP_0 -64 8),8) SEP ((RSI_0 +64 44),4); ((RSP_0 -64 8),8) SEP ((RSI_0 +64 80),8); ((RSP_0 -64 8),8) SEP ((RSI_0 +64 89),1); ((RSP_0 -64 8),8) SEP ((RSI_0 +64 144),8); ((RSP_0 -64 8),8) SEP ((RSI_0 +64 180),4); ((RSP_0 -64 8),8) SEP ((RSI_0 +64 185),1); ((RSP_0 -64 8),8) SEP ((RSI_0 +64 192),8); ((RSP_0 -64 8),8) SEP ((RSI_0 +64 200),8); ((RSP_0 -64 8),8) SEP ((RSI_0 +64 224),8); ((RSP_0 -64 8),8) SEP ((RSI_0 +64 232),8); ((RSP_0 -64 8),8) SEP ((RSI_0 +64 248),8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 24),4] = [(RSI_0 +64 24),4]_0 ; [(RSI_0 +64 144),8] = [(RSI_0 +64 144),8]_0 ; [(RSI_0 +64 180),4] = [(RSI_0 +64 180),4]_0 ; [(RSI_0 +64 185),1] = [(RSI_0 +64 185),1]_0 ; [(RSI_0 +64 192),8] = [(RSI_0 +64 192),8]_0 ; [(RSI_0 +64 200),8] = [(RSI_0 +64 200),8]_0 ; [(RSI_0 +64 224),8] = [(RSI_0 +64 224),8]_0 ; [(RSI_0 +64 232),8] = [(RSI_0 +64 232),8]_0 ; [(RSP_0 -64 8),8] = [(RSP_0 -64 8),8]_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "100008396: PUSH RBP 1"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 24),4] = [(RSI_0 +64 24),4]_0 ; [(RSI_0 +64 144),8] = [(RSI_0 +64 144),8]_0 ; [(RSI_0 +64 180),4] = [(RSI_0 +64 180),4]_0 ; [(RSI_0 +64 185),1] = [(RSI_0 +64 185),1]_0 ; [(RSI_0 +64 192),8] = [(RSI_0 +64 192),8]_0 ; [(RSI_0 +64 200),8] = [(RSI_0 +64 200),8]_0 ; [(RSI_0 +64 224),8] = [(RSI_0 +64 224),8]_0 ; [(RSI_0 +64 232),8] = [(RSI_0 +64 232),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008397"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 24),4] = [(RSI_0 +64 24),4]_0 ; [(RSI_0 +64 144),8] = [(RSI_0 +64 144),8]_0 ; [(RSI_0 +64 180),4] = [(RSI_0 +64 180),4]_0 ; [(RSI_0 +64 185),1] = [(RSI_0 +64 185),1]_0 ; [(RSI_0 +64 192),8] = [(RSI_0 +64 192),8]_0 ; [(RSI_0 +64 200),8] = [(RSI_0 +64 200),8]_0 ; [(RSI_0 +64 224),8] = [(RSI_0 +64 224),8]_0 ; [(RSI_0 +64 232),8] = [(RSI_0 +64 232),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "100008397: MOV RBP, RSP 3"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 24),4] = [(RSI_0 +64 24),4]_0 ; [(RSI_0 +64 144),8] = [(RSI_0 +64 144),8]_0 ; [(RSI_0 +64 180),4] = [(RSI_0 +64 180),4]_0 ; [(RSI_0 +64 185),1] = [(RSI_0 +64 185),1]_0 ; [(RSI_0 +64 192),8] = [(RSI_0 +64 192),8]_0 ; [(RSI_0 +64 200),8] = [(RSI_0 +64 200),8]_0 ; [(RSI_0 +64 224),8] = [(RSI_0 +64 224),8]_0 ; [(RSI_0 +64 232),8] = [(RSI_0 +64 232),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000839a"
 Separations "((RSP_0 -64 16),8) SEP (bot(fun____error),4); ((RSP_0 -64 16),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 16),8) SEP (0x10000c010,8); ((RSP_0 -64 16),8) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 16),8) SEP ((RSI_0 +64 24),4); ((RSP_0 -64 16),8) SEP ((RSI_0 +64 32),4); ((RSP_0 -64 16),8) SEP ((RSI_0 +64 36),4); ((RSP_0 -64 16),8) SEP ((RSI_0 +64 44),4); ((RSP_0 -64 16),8) SEP ((RSI_0 +64 80),8); ((RSP_0 -64 16),8) SEP ((RSI_0 +64 89),1); ((RSP_0 -64 16),8) SEP ((RSI_0 +64 144),8); ((RSP_0 -64 16),8) SEP ((RSI_0 +64 180),4); ((RSP_0 -64 16),8) SEP ((RSI_0 +64 185),1); ((RSP_0 -64 16),8) SEP ((RSI_0 +64 192),8); ((RSP_0 -64 16),8) SEP ((RSI_0 +64 200),8); ((RSP_0 -64 16),8) SEP ((RSI_0 +64 224),8); ((RSP_0 -64 16),8) SEP ((RSI_0 +64 232),8); ((RSP_0 -64 16),8) SEP ((RSI_0 +64 248),8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 24),4] = [(RSI_0 +64 24),4]_0 ; [(RSI_0 +64 144),8] = [(RSI_0 +64 144),8]_0 ; [(RSI_0 +64 180),4] = [(RSI_0 +64 180),4]_0 ; [(RSI_0 +64 185),1] = [(RSI_0 +64 185),1]_0 ; [(RSI_0 +64 192),8] = [(RSI_0 +64 192),8]_0 ; [(RSI_0 +64 200),8] = [(RSI_0 +64 200),8]_0 ; [(RSI_0 +64 224),8] = [(RSI_0 +64 224),8]_0 ; [(RSI_0 +64 232),8] = [(RSI_0 +64 232),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "10000839a: PUSH R15 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 24),4] = [(RSI_0 +64 24),4]_0 ; [(RSI_0 +64 144),8] = [(RSI_0 +64 144),8]_0 ; [(RSI_0 +64 180),4] = [(RSI_0 +64 180),4]_0 ; [(RSI_0 +64 185),1] = [(RSI_0 +64 185),1]_0 ; [(RSI_0 +64 192),8] = [(RSI_0 +64 192),8]_0 ; [(RSI_0 +64 200),8] = [(RSI_0 +64 200),8]_0 ; [(RSI_0 +64 224),8] = [(RSI_0 +64 224),8]_0 ; [(RSI_0 +64 232),8] = [(RSI_0 +64 232),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000839c"
 Separations "((RSP_0 -64 24),8) SEP (bot(fun____error),4); ((RSP_0 -64 24),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 24),8) SEP (0x10000c010,8); ((RSP_0 -64 24),8) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 24),8) SEP ((RSI_0 +64 24),4); ((RSP_0 -64 24),8) SEP ((RSI_0 +64 32),4); ((RSP_0 -64 24),8) SEP ((RSI_0 +64 36),4); ((RSP_0 -64 24),8) SEP ((RSI_0 +64 44),4); ((RSP_0 -64 24),8) SEP ((RSI_0 +64 80),8); ((RSP_0 -64 24),8) SEP ((RSI_0 +64 89),1); ((RSP_0 -64 24),8) SEP ((RSI_0 +64 144),8); ((RSP_0 -64 24),8) SEP ((RSI_0 +64 180),4); ((RSP_0 -64 24),8) SEP ((RSI_0 +64 185),1); ((RSP_0 -64 24),8) SEP ((RSI_0 +64 192),8); ((RSP_0 -64 24),8) SEP ((RSI_0 +64 200),8); ((RSP_0 -64 24),8) SEP ((RSI_0 +64 224),8); ((RSP_0 -64 24),8) SEP ((RSI_0 +64 232),8); ((RSP_0 -64 24),8) SEP ((RSI_0 +64 248),8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 24),4] = [(RSI_0 +64 24),4]_0 ; [(RSI_0 +64 144),8] = [(RSI_0 +64 144),8]_0 ; [(RSI_0 +64 180),4] = [(RSI_0 +64 180),4]_0 ; [(RSI_0 +64 185),1] = [(RSI_0 +64 185),1]_0 ; [(RSI_0 +64 192),8] = [(RSI_0 +64 192),8]_0 ; [(RSI_0 +64 200),8] = [(RSI_0 +64 200),8]_0 ; [(RSI_0 +64 224),8] = [(RSI_0 +64 224),8]_0 ; [(RSI_0 +64 232),8] = [(RSI_0 +64 232),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "10000839c: PUSH R14 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 24),4] = [(RSI_0 +64 24),4]_0 ; [(RSI_0 +64 144),8] = [(RSI_0 +64 144),8]_0 ; [(RSI_0 +64 180),4] = [(RSI_0 +64 180),4]_0 ; [(RSI_0 +64 185),1] = [(RSI_0 +64 185),1]_0 ; [(RSI_0 +64 192),8] = [(RSI_0 +64 192),8]_0 ; [(RSI_0 +64 200),8] = [(RSI_0 +64 200),8]_0 ; [(RSI_0 +64 224),8] = [(RSI_0 +64 224),8]_0 ; [(RSI_0 +64 232),8] = [(RSI_0 +64 232),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000839e"
 Separations "((RSP_0 -64 32),8) SEP (bot(fun____error),4); ((RSP_0 -64 32),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 32),8) SEP (0x10000c010,8); ((RSP_0 -64 32),8) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 32),8) SEP ((RSI_0 +64 24),4); ((RSP_0 -64 32),8) SEP ((RSI_0 +64 32),4); ((RSP_0 -64 32),8) SEP ((RSI_0 +64 36),4); ((RSP_0 -64 32),8) SEP ((RSI_0 +64 44),4); ((RSP_0 -64 32),8) SEP ((RSI_0 +64 80),8); ((RSP_0 -64 32),8) SEP ((RSI_0 +64 89),1); ((RSP_0 -64 32),8) SEP ((RSI_0 +64 144),8); ((RSP_0 -64 32),8) SEP ((RSI_0 +64 180),4); ((RSP_0 -64 32),8) SEP ((RSI_0 +64 185),1); ((RSP_0 -64 32),8) SEP ((RSI_0 +64 192),8); ((RSP_0 -64 32),8) SEP ((RSI_0 +64 200),8); ((RSP_0 -64 32),8) SEP ((RSI_0 +64 224),8); ((RSP_0 -64 32),8) SEP ((RSI_0 +64 232),8); ((RSP_0 -64 32),8) SEP ((RSI_0 +64 248),8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 24),4] = [(RSI_0 +64 24),4]_0 ; [(RSI_0 +64 144),8] = [(RSI_0 +64 144),8]_0 ; [(RSI_0 +64 180),4] = [(RSI_0 +64 180),4]_0 ; [(RSI_0 +64 185),1] = [(RSI_0 +64 185),1]_0 ; [(RSI_0 +64 192),8] = [(RSI_0 +64 192),8]_0 ; [(RSI_0 +64 200),8] = [(RSI_0 +64 200),8]_0 ; [(RSI_0 +64 224),8] = [(RSI_0 +64 224),8]_0 ; [(RSI_0 +64 232),8] = [(RSI_0 +64 232),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "10000839e: PUSH R13 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 24),4] = [(RSI_0 +64 24),4]_0 ; [(RSI_0 +64 144),8] = [(RSI_0 +64 144),8]_0 ; [(RSI_0 +64 180),4] = [(RSI_0 +64 180),4]_0 ; [(RSI_0 +64 185),1] = [(RSI_0 +64 185),1]_0 ; [(RSI_0 +64 192),8] = [(RSI_0 +64 192),8]_0 ; [(RSI_0 +64 200),8] = [(RSI_0 +64 200),8]_0 ; [(RSI_0 +64 224),8] = [(RSI_0 +64 224),8]_0 ; [(RSI_0 +64 232),8] = [(RSI_0 +64 232),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000083a0"
 Separations "((RSP_0 -64 40),8) SEP (bot(fun____error),4); ((RSP_0 -64 40),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 40),8) SEP (0x10000c010,8); ((RSP_0 -64 40),8) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 40),8) SEP ((RSI_0 +64 24),4); ((RSP_0 -64 40),8) SEP ((RSI_0 +64 32),4); ((RSP_0 -64 40),8) SEP ((RSI_0 +64 36),4); ((RSP_0 -64 40),8) SEP ((RSI_0 +64 44),4); ((RSP_0 -64 40),8) SEP ((RSI_0 +64 80),8); ((RSP_0 -64 40),8) SEP ((RSI_0 +64 89),1); ((RSP_0 -64 40),8) SEP ((RSI_0 +64 144),8); ((RSP_0 -64 40),8) SEP ((RSI_0 +64 180),4); ((RSP_0 -64 40),8) SEP ((RSI_0 +64 185),1); ((RSP_0 -64 40),8) SEP ((RSI_0 +64 192),8); ((RSP_0 -64 40),8) SEP ((RSI_0 +64 200),8); ((RSP_0 -64 40),8) SEP ((RSI_0 +64 224),8); ((RSP_0 -64 40),8) SEP ((RSI_0 +64 232),8); ((RSP_0 -64 40),8) SEP ((RSI_0 +64 248),8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 24),4] = [(RSI_0 +64 24),4]_0 ; [(RSI_0 +64 144),8] = [(RSI_0 +64 144),8]_0 ; [(RSI_0 +64 180),4] = [(RSI_0 +64 180),4]_0 ; [(RSI_0 +64 185),1] = [(RSI_0 +64 185),1]_0 ; [(RSI_0 +64 192),8] = [(RSI_0 +64 192),8]_0 ; [(RSI_0 +64 200),8] = [(RSI_0 +64 200),8]_0 ; [(RSI_0 +64 224),8] = [(RSI_0 +64 224),8]_0 ; [(RSI_0 +64 232),8] = [(RSI_0 +64 232),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "1000083a0: PUSH R12 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 24),4] = [(RSI_0 +64 24),4]_0 ; [(RSI_0 +64 144),8] = [(RSI_0 +64 144),8]_0 ; [(RSI_0 +64 180),4] = [(RSI_0 +64 180),4]_0 ; [(RSI_0 +64 185),1] = [(RSI_0 +64 185),1]_0 ; [(RSI_0 +64 192),8] = [(RSI_0 +64 192),8]_0 ; [(RSI_0 +64 200),8] = [(RSI_0 +64 200),8]_0 ; [(RSI_0 +64 224),8] = [(RSI_0 +64 224),8]_0 ; [(RSI_0 +64 232),8] = [(RSI_0 +64 232),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000083a2"
 Separations "((RSP_0 -64 48),8) SEP (bot(fun____error),4); ((RSP_0 -64 48),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 48),8) SEP (0x10000c010,8); ((RSP_0 -64 48),8) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 48),8) SEP ((RSI_0 +64 24),4); ((RSP_0 -64 48),8) SEP ((RSI_0 +64 32),4); ((RSP_0 -64 48),8) SEP ((RSI_0 +64 36),4); ((RSP_0 -64 48),8) SEP ((RSI_0 +64 44),4); ((RSP_0 -64 48),8) SEP ((RSI_0 +64 80),8); ((RSP_0 -64 48),8) SEP ((RSI_0 +64 89),1); ((RSP_0 -64 48),8) SEP ((RSI_0 +64 144),8); ((RSP_0 -64 48),8) SEP ((RSI_0 +64 180),4); ((RSP_0 -64 48),8) SEP ((RSI_0 +64 185),1); ((RSP_0 -64 48),8) SEP ((RSI_0 +64 192),8); ((RSP_0 -64 48),8) SEP ((RSI_0 +64 200),8); ((RSP_0 -64 48),8) SEP ((RSI_0 +64 224),8); ((RSP_0 -64 48),8) SEP ((RSI_0 +64 232),8); ((RSP_0 -64 48),8) SEP ((RSI_0 +64 248),8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 24),4] = [(RSI_0 +64 24),4]_0 ; [(RSI_0 +64 144),8] = [(RSI_0 +64 144),8]_0 ; [(RSI_0 +64 180),4] = [(RSI_0 +64 180),4]_0 ; [(RSI_0 +64 185),1] = [(RSI_0 +64 185),1]_0 ; [(RSI_0 +64 192),8] = [(RSI_0 +64 192),8]_0 ; [(RSI_0 +64 200),8] = [(RSI_0 +64 200),8]_0 ; [(RSI_0 +64 224),8] = [(RSI_0 +64 224),8]_0 ; [(RSI_0 +64 232),8] = [(RSI_0 +64 232),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "1000083a2: PUSH RBX 1"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 24),4] = [(RSI_0 +64 24),4]_0 ; [(RSI_0 +64 144),8] = [(RSI_0 +64 144),8]_0 ; [(RSI_0 +64 180),4] = [(RSI_0 +64 180),4]_0 ; [(RSI_0 +64 185),1] = [(RSI_0 +64 185),1]_0 ; [(RSI_0 +64 192),8] = [(RSI_0 +64 192),8]_0 ; [(RSI_0 +64 200),8] = [(RSI_0 +64 200),8]_0 ; [(RSI_0 +64 224),8] = [(RSI_0 +64 224),8]_0 ; [(RSI_0 +64 232),8] = [(RSI_0 +64 232),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000083a3"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 24),4] = [(RSI_0 +64 24),4]_0 ; [(RSI_0 +64 144),8] = [(RSI_0 +64 144),8]_0 ; [(RSI_0 +64 180),4] = [(RSI_0 +64 180),4]_0 ; [(RSI_0 +64 185),1] = [(RSI_0 +64 185),1]_0 ; [(RSI_0 +64 192),8] = [(RSI_0 +64 192),8]_0 ; [(RSI_0 +64 200),8] = [(RSI_0 +64 200),8]_0 ; [(RSI_0 +64 224),8] = [(RSI_0 +64 224),8]_0 ; [(RSI_0 +64 232),8] = [(RSI_0 +64 232),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "1000083a3: SUB RSP, 40 4"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 24),4] = [(RSI_0 +64 24),4]_0 ; [(RSI_0 +64 144),8] = [(RSI_0 +64 144),8]_0 ; [(RSI_0 +64 180),4] = [(RSI_0 +64 180),4]_0 ; [(RSI_0 +64 185),1] = [(RSI_0 +64 185),1]_0 ; [(RSI_0 +64 192),8] = [(RSI_0 +64 192),8]_0 ; [(RSI_0 +64 200),8] = [(RSI_0 +64 200),8]_0 ; [(RSI_0 +64 224),8] = [(RSI_0 +64 224),8]_0 ; [(RSI_0 +64 232),8] = [(RSI_0 +64 232),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000083a7"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 24),4] = [(RSI_0 +64 24),4]_0 ; [(RSI_0 +64 144),8] = [(RSI_0 +64 144),8]_0 ; [(RSI_0 +64 180),4] = [(RSI_0 +64 180),4]_0 ; [(RSI_0 +64 185),1] = [(RSI_0 +64 185),1]_0 ; [(RSI_0 +64 192),8] = [(RSI_0 +64 192),8]_0 ; [(RSI_0 +64 200),8] = [(RSI_0 +64 200),8]_0 ; [(RSI_0 +64 224),8] = [(RSI_0 +64 224),8]_0 ; [(RSI_0 +64 232),8] = [(RSI_0 +64 232),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "1000083a7: MOV R14, RSI 3"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 24),4] = [(RSI_0 +64 24),4]_0 ; [(RSI_0 +64 144),8] = [(RSI_0 +64 144),8]_0 ; [(RSI_0 +64 180),4] = [(RSI_0 +64 180),4]_0 ; [(RSI_0 +64 185),1] = [(RSI_0 +64 185),1]_0 ; [(RSI_0 +64 192),8] = [(RSI_0 +64 192),8]_0 ; [(RSI_0 +64 200),8] = [(RSI_0 +64 200),8]_0 ; [(RSI_0 +64 224),8] = [(RSI_0 +64 224),8]_0 ; [(RSI_0 +64 232),8] = [(RSI_0 +64 232),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000083aa"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 24),4] = [(RSI_0 +64 24),4]_0 ; [(RSI_0 +64 144),8] = [(RSI_0 +64 144),8]_0 ; [(RSI_0 +64 180),4] = [(RSI_0 +64 180),4]_0 ; [(RSI_0 +64 185),1] = [(RSI_0 +64 185),1]_0 ; [(RSI_0 +64 192),8] = [(RSI_0 +64 192),8]_0 ; [(RSI_0 +64 200),8] = [(RSI_0 +64 200),8]_0 ; [(RSI_0 +64 224),8] = [(RSI_0 +64 224),8]_0 ; [(RSI_0 +64 232),8] = [(RSI_0 +64 232),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "1000083aa: MOV R13, RDI 3"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 24),4] = [(RSI_0 +64 24),4]_0 ; [(RSI_0 +64 144),8] = [(RSI_0 +64 144),8]_0 ; [(RSI_0 +64 180),4] = [(RSI_0 +64 180),4]_0 ; [(RSI_0 +64 185),1] = [(RSI_0 +64 185),1]_0 ; [(RSI_0 +64 192),8] = [(RSI_0 +64 192),8]_0 ; [(RSI_0 +64 200),8] = [(RSI_0 +64 200),8]_0 ; [(RSI_0 +64 224),8] = [(RSI_0 +64 224),8]_0 ; [(RSI_0 +64 232),8] = [(RSI_0 +64 232),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000083ad"
 Separations "((RSI_0 +64 24),4) SEP (bot(fun____error),4); ((RSI_0 +64 24),4) SEP (RSP_0,8); ((RSI_0 +64 24),4) SEP ([0x10000c010,8]_0,8); ((RSI_0 +64 24),4) SEP (0x10000c010,8); ((RSI_0 +64 24),4) SEP ((RSP_0 -64 8),8); ((RSI_0 +64 24),4) SEP ((RSP_0 -64 16),8); ((RSI_0 +64 24),4) SEP ((RSP_0 -64 24),8); ((RSI_0 +64 24),4) SEP ((RSP_0 -64 32),8); ((RSI_0 +64 24),4) SEP ((RSP_0 -64 40),8); ((RSI_0 +64 24),4) SEP ((RSP_0 -64 48),8); ((RSI_0 +64 24),4) SEP ((RSP_0 -64 56),8); ((RSI_0 +64 24),4) SEP ((RSP_0 -64 64),8); ((RSI_0 +64 24),4) SEP ((RSP_0 -64 72),8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 24),4] = [(RSI_0 +64 24),4]_0 ; [(RSI_0 +64 144),8] = [(RSI_0 +64 144),8]_0 ; [(RSI_0 +64 180),4] = [(RSI_0 +64 180),4]_0 ; [(RSI_0 +64 185),1] = [(RSI_0 +64 185),1]_0 ; [(RSI_0 +64 192),8] = [(RSI_0 +64 192),8]_0 ; [(RSI_0 +64 200),8] = [(RSI_0 +64 200),8]_0 ; [(RSI_0 +64 224),8] = [(RSI_0 +64 224),8]_0 ; [(RSI_0 +64 232),8] = [(RSI_0 +64 232),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "1000083ad: MOVSXD RAX, DWORD PTR [RSI + 24] 4"
 Post  "RAX = signextend(32,64, [(RSI_0 +64 24),4]_0) ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 24),4] = [(RSI_0 +64 24),4]_0 ; [(RSI_0 +64 144),8] = [(RSI_0 +64 144),8]_0 ; [(RSI_0 +64 180),4] = [(RSI_0 +64 180),4]_0 ; [(RSI_0 +64 185),1] = [(RSI_0 +64 185),1]_0 ; [(RSI_0 +64 192),8] = [(RSI_0 +64 192),8]_0 ; [(RSI_0 +64 200),8] = [(RSI_0 +64 200),8]_0 ; [(RSI_0 +64 224),8] = [(RSI_0 +64 224),8]_0 ; [(RSI_0 +64 232),8] = [(RSI_0 +64 232),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000083b1"
 Separations ""
 Assertions  ""
 Pre   "RAX = signextend(32,64, [(RSI_0 +64 24),4]_0) ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 24),4] = [(RSI_0 +64 24),4]_0 ; [(RSI_0 +64 144),8] = [(RSI_0 +64 144),8]_0 ; [(RSI_0 +64 180),4] = [(RSI_0 +64 180),4]_0 ; [(RSI_0 +64 185),1] = [(RSI_0 +64 185),1]_0 ; [(RSI_0 +64 192),8] = [(RSI_0 +64 192),8]_0 ; [(RSI_0 +64 200),8] = [(RSI_0 +64 200),8]_0 ; [(RSI_0 +64 224),8] = [(RSI_0 +64 224),8]_0 ; [(RSI_0 +64 232),8] = [(RSI_0 +64 232),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "1000083b1: MOV ECX, 65536 5"
 Post  "RAX = signextend(32,64, [(RSI_0 +64 24),4]_0) ; RBX = RBX_0 ; RCX = 0x10000 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 24),4] = [(RSI_0 +64 24),4]_0 ; [(RSI_0 +64 144),8] = [(RSI_0 +64 144),8]_0 ; [(RSI_0 +64 180),4] = [(RSI_0 +64 180),4]_0 ; [(RSI_0 +64 185),1] = [(RSI_0 +64 185),1]_0 ; [(RSI_0 +64 192),8] = [(RSI_0 +64 192),8]_0 ; [(RSI_0 +64 200),8] = [(RSI_0 +64 200),8]_0 ; [(RSI_0 +64 224),8] = [(RSI_0 +64 224),8]_0 ; [(RSI_0 +64 232),8] = [(RSI_0 +64 232),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100008396, blockId == 1 ##
#####################################
*)

htriple "ht_1000083b6"
 Separations ""
 Assertions  ""
 Pre   "RAX = signextend(32,64, [(RSI_0 +64 24),4]_0) ; RBX = RBX_0 ; RDX = RDX_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 24),4] = [(RSI_0 +64 24),4]_0 ; [(RSI_0 +64 144),8] = [(RSI_0 +64 144),8]_0 ; [(RSI_0 +64 180),4] = [(RSI_0 +64 180),4]_0 ; [(RSI_0 +64 185),1] = [(RSI_0 +64 185),1]_0 ; [(RSI_0 +64 192),8] = [(RSI_0 +64 192),8]_0 ; [(RSI_0 +64 200),8] = [(RSI_0 +64 200),8]_0 ; [(RSI_0 +64 224),8] = [(RSI_0 +64 224),8]_0 ; [(RSI_0 +64 232),8] = [(RSI_0 +64 232),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "1000083b6: MOV RDI, RCX 3"
 Post  "RAX = signextend(32,64, [(RSI_0 +64 24),4]_0) ; RBX = RBX_0 ; RDX = RDX_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 24),4] = [(RSI_0 +64 24),4]_0 ; [(RSI_0 +64 144),8] = [(RSI_0 +64 144),8]_0 ; [(RSI_0 +64 180),4] = [(RSI_0 +64 180),4]_0 ; [(RSI_0 +64 185),1] = [(RSI_0 +64 185),1]_0 ; [(RSI_0 +64 192),8] = [(RSI_0 +64 192),8]_0 ; [(RSI_0 +64 200),8] = [(RSI_0 +64 200),8]_0 ; [(RSI_0 +64 224),8] = [(RSI_0 +64 224),8]_0 ; [(RSI_0 +64 232),8] = [(RSI_0 +64 232),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000083b9"
 Separations ""
 Assertions  ""
 Pre   "RAX = signextend(32,64, [(RSI_0 +64 24),4]_0) ; RBX = RBX_0 ; RDX = RDX_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 24),4] = [(RSI_0 +64 24),4]_0 ; [(RSI_0 +64 144),8] = [(RSI_0 +64 144),8]_0 ; [(RSI_0 +64 180),4] = [(RSI_0 +64 180),4]_0 ; [(RSI_0 +64 185),1] = [(RSI_0 +64 185),1]_0 ; [(RSI_0 +64 192),8] = [(RSI_0 +64 192),8]_0 ; [(RSI_0 +64 200),8] = [(RSI_0 +64 200),8]_0 ; [(RSI_0 +64 224),8] = [(RSI_0 +64 224),8]_0 ; [(RSI_0 +64 232),8] = [(RSI_0 +64 232),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "1000083b9: ADD RCX, RCX 3"
 Post  "RAX = signextend(32,64, [(RSI_0 +64 24),4]_0) ; RBX = RBX_0 ; RDX = RDX_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 24),4] = [(RSI_0 +64 24),4]_0 ; [(RSI_0 +64 144),8] = [(RSI_0 +64 144),8]_0 ; [(RSI_0 +64 180),4] = [(RSI_0 +64 180),4]_0 ; [(RSI_0 +64 185),1] = [(RSI_0 +64 185),1]_0 ; [(RSI_0 +64 192),8] = [(RSI_0 +64 192),8]_0 ; [(RSI_0 +64 200),8] = [(RSI_0 +64 200),8]_0 ; [(RSI_0 +64 224),8] = [(RSI_0 +64 224),8]_0 ; [(RSI_0 +64 232),8] = [(RSI_0 +64 232),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000083bc"
 Separations ""
 Assertions  ""
 Pre   "RAX = signextend(32,64, [(RSI_0 +64 24),4]_0) ; RBX = RBX_0 ; RDX = RDX_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 24),4] = [(RSI_0 +64 24),4]_0 ; [(RSI_0 +64 144),8] = [(RSI_0 +64 144),8]_0 ; [(RSI_0 +64 180),4] = [(RSI_0 +64 180),4]_0 ; [(RSI_0 +64 185),1] = [(RSI_0 +64 185),1]_0 ; [(RSI_0 +64 192),8] = [(RSI_0 +64 192),8]_0 ; [(RSI_0 +64 200),8] = [(RSI_0 +64 200),8]_0 ; [(RSI_0 +64 224),8] = [(RSI_0 +64 224),8]_0 ; [(RSI_0 +64 232),8] = [(RSI_0 +64 232),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "1000083bc: CMP RDI, RAX 3"
 Post  "RAX = signextend(32,64, [(RSI_0 +64 24),4]_0) ; RBX = RBX_0 ; RDX = RDX_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 24),4] = [(RSI_0 +64 24),4]_0 ; [(RSI_0 +64 144),8] = [(RSI_0 +64 144),8]_0 ; [(RSI_0 +64 180),4] = [(RSI_0 +64 180),4]_0 ; [(RSI_0 +64 185),1] = [(RSI_0 +64 185),1]_0 ; [(RSI_0 +64 192),8] = [(RSI_0 +64 192),8]_0 ; [(RSI_0 +64 200),8] = [(RSI_0 +64 200),8]_0 ; [(RSI_0 +64 224),8] = [(RSI_0 +64 224),8]_0 ; [(RSI_0 +64 232),8] = [(RSI_0 +64 232),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000083bf"
 Separations ""
 Assertions  ""
 Pre   "RAX = signextend(32,64, [(RSI_0 +64 24),4]_0) ; RBX = RBX_0 ; RDX = RDX_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 24),4] = [(RSI_0 +64 24),4]_0 ; [(RSI_0 +64 144),8] = [(RSI_0 +64 144),8]_0 ; [(RSI_0 +64 180),4] = [(RSI_0 +64 180),4]_0 ; [(RSI_0 +64 185),1] = [(RSI_0 +64 185),1]_0 ; [(RSI_0 +64 192),8] = [(RSI_0 +64 192),8]_0 ; [(RSI_0 +64 200),8] = [(RSI_0 +64 200),8]_0 ; [(RSI_0 +64 224),8] = [(RSI_0 +64 224),8]_0 ; [(RSI_0 +64 232),8] = [(RSI_0 +64 232),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "1000083bf: JB 4295001014 2"
 Post  "RAX = signextend(32,64, [(RSI_0 +64 24),4]_0) ; RBX = RBX_0 ; RDX = RDX_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 24),4] = [(RSI_0 +64 24),4]_0 ; [(RSI_0 +64 144),8] = [(RSI_0 +64 144),8]_0 ; [(RSI_0 +64 180),4] = [(RSI_0 +64 180),4]_0 ; [(RSI_0 +64 185),1] = [(RSI_0 +64 185),1]_0 ; [(RSI_0 +64 192),8] = [(RSI_0 +64 192),8]_0 ; [(RSI_0 +64 200),8] = [(RSI_0 +64 200),8]_0 ; [(RSI_0 +64 224),8] = [(RSI_0 +64 224),8]_0 ; [(RSI_0 +64 232),8] = [(RSI_0 +64 232),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100008396, blockId == 2 ##
#####################################
*)

htriple "ht_1000083c1"
 Separations ""
 Assertions  ""
 Pre   "RAX = signextend(32,64, [(RSI_0 +64 24),4]_0) ; RBX = RBX_0 ; RDX = RDX_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 24),4] = [(RSI_0 +64 24),4]_0 ; [(RSI_0 +64 144),8] = [(RSI_0 +64 144),8]_0 ; [(RSI_0 +64 180),4] = [(RSI_0 +64 180),4]_0 ; [(RSI_0 +64 185),1] = [(RSI_0 +64 185),1]_0 ; [(RSI_0 +64 192),8] = [(RSI_0 +64 192),8]_0 ; [(RSI_0 +64 200),8] = [(RSI_0 +64 200),8]_0 ; [(RSI_0 +64 224),8] = [(RSI_0 +64 224),8]_0 ; [(RSI_0 +64 232),8] = [(RSI_0 +64 232),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "1000083c1: ADD RDI, 16384 7"
 Post  "RAX = signextend(32,64, [(RSI_0 +64 24),4]_0) ; RBX = RBX_0 ; RDX = RDX_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 24),4] = [(RSI_0 +64 24),4]_0 ; [(RSI_0 +64 144),8] = [(RSI_0 +64 144),8]_0 ; [(RSI_0 +64 180),4] = [(RSI_0 +64 180),4]_0 ; [(RSI_0 +64 185),1] = [(RSI_0 +64 185),1]_0 ; [(RSI_0 +64 192),8] = [(RSI_0 +64 192),8]_0 ; [(RSI_0 +64 200),8] = [(RSI_0 +64 200),8]_0 ; [(RSI_0 +64 224),8] = [(RSI_0 +64 224),8]_0 ; [(RSI_0 +64 232),8] = [(RSI_0 +64 232),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000083c8"
 Separations "((RSI_0 +64 232),8) SEP (bot(fun____error),4); ((RSI_0 +64 232),8) SEP (RSP_0,8); ((RSI_0 +64 232),8) SEP ([0x10000c010,8]_0,8); ((RSI_0 +64 232),8) SEP (0x10000c010,8); ((RSI_0 +64 232),8) SEP ((RSP_0 -64 8),8); ((RSI_0 +64 232),8) SEP ((RSP_0 -64 16),8); ((RSI_0 +64 232),8) SEP ((RSP_0 -64 24),8); ((RSI_0 +64 232),8) SEP ((RSP_0 -64 32),8); ((RSI_0 +64 232),8) SEP ((RSP_0 -64 40),8); ((RSI_0 +64 232),8) SEP ((RSP_0 -64 48),8); ((RSI_0 +64 232),8) SEP ((RSP_0 -64 56),8); ((RSI_0 +64 232),8) SEP ((RSP_0 -64 64),8); ((RSI_0 +64 232),8) SEP ((RSP_0 -64 72),8)"
 Assertions  ""
 Pre   "RAX = signextend(32,64, [(RSI_0 +64 24),4]_0) ; RBX = RBX_0 ; RDX = RDX_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 24),4] = [(RSI_0 +64 24),4]_0 ; [(RSI_0 +64 144),8] = [(RSI_0 +64 144),8]_0 ; [(RSI_0 +64 180),4] = [(RSI_0 +64 180),4]_0 ; [(RSI_0 +64 185),1] = [(RSI_0 +64 185),1]_0 ; [(RSI_0 +64 192),8] = [(RSI_0 +64 192),8]_0 ; [(RSI_0 +64 200),8] = [(RSI_0 +64 200),8]_0 ; [(RSI_0 +64 224),8] = [(RSI_0 +64 224),8]_0 ; [(RSI_0 +64 232),8] = [(RSI_0 +64 232),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "1000083c8: MOV QWORD PTR [R14 + 232], RDI 7"
 Post  "RAX = signextend(32,64, [(RSI_0 +64 24),4]_0) ; RBX = RBX_0 ; RDX = RDX_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 24),4] = [(RSI_0 +64 24),4]_0 ; [(RSI_0 +64 144),8] = [(RSI_0 +64 144),8]_0 ; [(RSI_0 +64 180),4] = [(RSI_0 +64 180),4]_0 ; [(RSI_0 +64 185),1] = [(RSI_0 +64 185),1]_0 ; [(RSI_0 +64 192),8] = [(RSI_0 +64 192),8]_0 ; [(RSI_0 +64 200),8] = [(RSI_0 +64 200),8]_0 ; [(RSI_0 +64 224),8] = [(RSI_0 +64 224),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000083cf"
 Separations ""
 Assertions  ""
 Pre   "RAX = signextend(32,64, [(RSI_0 +64 24),4]_0) ; RBX = RBX_0 ; RDX = RDX_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 24),4] = [(RSI_0 +64 24),4]_0 ; [(RSI_0 +64 144),8] = [(RSI_0 +64 144),8]_0 ; [(RSI_0 +64 180),4] = [(RSI_0 +64 180),4]_0 ; [(RSI_0 +64 185),1] = [(RSI_0 +64 185),1]_0 ; [(RSI_0 +64 192),8] = [(RSI_0 +64 192),8]_0 ; [(RSI_0 +64 200),8] = [(RSI_0 +64 200),8]_0 ; [(RSI_0 +64 224),8] = [(RSI_0 +64 224),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "1000083cf: ExternalCall fun__malloc 5"
 Post  "RAX = bot(fun__malloc) ; RBX = RBX_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 FunctionConstraints "PRESERVES fun__malloc {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000083d4"
 Separations "((RSI_0 +64 224),8) SEP (bot(fun____error),4); ((RSI_0 +64 224),8) SEP (RSP_0,8); ((RSI_0 +64 224),8) SEP ([0x10000c010,8]_0,8); ((RSI_0 +64 224),8) SEP (0x10000c010,8); ((RSI_0 +64 224),8) SEP ((RSP_0 -64 8),8); ((RSI_0 +64 224),8) SEP ((RSP_0 -64 16),8); ((RSI_0 +64 224),8) SEP ((RSP_0 -64 24),8); ((RSI_0 +64 224),8) SEP ((RSP_0 -64 32),8); ((RSI_0 +64 224),8) SEP ((RSP_0 -64 40),8); ((RSI_0 +64 224),8) SEP ((RSP_0 -64 48),8); ((RSI_0 +64 224),8) SEP ((RSP_0 -64 56),8); ((RSI_0 +64 224),8) SEP ((RSP_0 -64 64),8); ((RSI_0 +64 224),8) SEP ((RSP_0 -64 72),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RBX = RBX_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "1000083d4: MOV QWORD PTR [R14 + 224], RAX 7"
 Post  "RAX = bot(fun__malloc) ; RBX = RBX_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 224),8] = bot(fun__malloc) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000083db"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RBX = RBX_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 224),8] = bot(fun__malloc) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "1000083db: TEST RAX, RAX 3"
 Post  "RAX = bot(fun__malloc) ; RBX = RBX_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 224),8] = bot(fun__malloc) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000083de"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RBX = RBX_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 224),8] = bot(fun__malloc) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "1000083de: JE 4295002991 6"
 Post  "RAX = bot(fun__malloc) ; RBX = RBX_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 224),8] = bot(fun__malloc) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100008396, blockId == 3 ##
#####################################
*)

htriple "ht_1000083e4"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RBX = RBX_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 224),8] = bot(fun__malloc) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "1000083e4: ExternalCall fun__archive_entry_linkresolver_new 5"
 Post  "RAX = bot(fun__archive_entry_linkresolver_new) ; RBX = RBX_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 FunctionConstraints "PRESERVES fun__archive_entry_linkresolver_new {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000083e9"
 Separations "((RSI_0 +64 200),8) SEP (bot(fun____error),4); ((RSI_0 +64 200),8) SEP (RSP_0,8); ((RSI_0 +64 200),8) SEP ([0x10000c010,8]_0,8); ((RSI_0 +64 200),8) SEP (0x10000c010,8); ((RSI_0 +64 200),8) SEP ((RSP_0 -64 8),8); ((RSI_0 +64 200),8) SEP ((RSP_0 -64 16),8); ((RSI_0 +64 200),8) SEP ((RSP_0 -64 24),8); ((RSI_0 +64 200),8) SEP ((RSP_0 -64 32),8); ((RSI_0 +64 200),8) SEP ((RSP_0 -64 40),8); ((RSI_0 +64 200),8) SEP ((RSP_0 -64 48),8); ((RSI_0 +64 200),8) SEP ((RSP_0 -64 56),8); ((RSI_0 +64 200),8) SEP ((RSP_0 -64 64),8); ((RSI_0 +64 200),8) SEP ((RSP_0 -64 72),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_linkresolver_new) ; RBX = RBX_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "1000083e9: MOV QWORD PTR [R14 + 200], RAX 7"
 Post  "RAX = bot(fun__archive_entry_linkresolver_new) ; RBX = RBX_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 200),8] = bot(fun__archive_entry_linkresolver_new) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000083f0"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_linkresolver_new) ; RBX = RBX_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 200),8] = bot(fun__archive_entry_linkresolver_new) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "1000083f0: TEST RAX, RAX 3"
 Post  "RAX = bot(fun__archive_entry_linkresolver_new) ; RBX = RBX_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 200),8] = bot(fun__archive_entry_linkresolver_new) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000083f3"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_linkresolver_new) ; RBX = RBX_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 200),8] = bot(fun__archive_entry_linkresolver_new) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "1000083f3: JE 4295003000 6"
 Post  "RAX = bot(fun__archive_entry_linkresolver_new) ; RBX = RBX_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 200),8] = bot(fun__archive_entry_linkresolver_new) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100008396, blockId == 4 ##
#####################################
*)

htriple "ht_100008b6f"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RBX = RBX_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 224),8] = bot(fun__malloc) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "100008b6f: LEA RDX, [RIP + 12556] 7"
 Post  "RAX = bot(fun__malloc) ; RBX = RBX_0 ; RDX = 0x10000bc82 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 224),8] = bot(fun__malloc) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008b76"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RBX = RBX_0 ; RDX = 0x10000bc82 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 224),8] = bot(fun__malloc) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "100008b76: JMP 4295003016 2"
 Post  "RAX = bot(fun__malloc) ; RBX = RBX_0 ; RDX = 0x10000bc82 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 224),8] = bot(fun__malloc) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100008396, blockId == 5 ##
#####################################
*)

htriple "ht_1000083f9"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_linkresolver_new) ; RBX = RBX_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 200),8] = bot(fun__archive_entry_linkresolver_new) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "1000083f9: MOV RBX, RAX 3"
 Post  "RAX = bot(fun__archive_entry_linkresolver_new) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 200),8] = bot(fun__archive_entry_linkresolver_new) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000083fc"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_linkresolver_new) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 200),8] = bot(fun__archive_entry_linkresolver_new) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "1000083fc: MOV RDI, R13 3"
 Post  "RAX = bot(fun__archive_entry_linkresolver_new) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RDI = RDI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 200),8] = bot(fun__archive_entry_linkresolver_new) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000083ff"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_linkresolver_new) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RDI = RDI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 200),8] = bot(fun__archive_entry_linkresolver_new) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "1000083ff: ExternalCall fun__archive_format 5"
 Post  "RAX = bot(fun__archive_format) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 FunctionConstraints "PRESERVES fun__archive_format {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008404"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_format) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "100008404: MOV RDI, RBX 3"
 Post  "RAX = bot(fun__archive_format) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RDI = bot(fun__archive_entry_linkresolver_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008407"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_format) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RDI = bot(fun__archive_entry_linkresolver_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "100008407: MOV ESI, EAX 2"
 Post  "RAX = bot(fun__archive_format) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RDI = bot(fun__archive_entry_linkresolver_new) ; RSI = b32(bot(fun__archive_format)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008409"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_format) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RDI = bot(fun__archive_entry_linkresolver_new) ; RSI = b32(bot(fun__archive_format)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "100008409: ExternalCall fun__archive_entry_linkresolver_set_strategy 5"
 Post  "RAX = bot(fun__archive_entry_linkresolver_set_strategy) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 FunctionConstraints "PRESERVES fun__archive_entry_linkresolver_set_strategy {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000840e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_linkresolver_set_strategy) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "10000840e: ExternalCall fun__archive_read_disk_new 5"
 Post  "RAX = bot(fun__archive_read_disk_new) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 FunctionConstraints "PRESERVES fun__archive_read_disk_new {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008413"
 Separations "((RSI_0 +64 192),8) SEP (bot(fun____error),4); ((RSI_0 +64 192),8) SEP (RSP_0,8); ((RSI_0 +64 192),8) SEP ([0x10000c010,8]_0,8); ((RSI_0 +64 192),8) SEP (0x10000c010,8); ((RSI_0 +64 192),8) SEP ((RSP_0 -64 8),8); ((RSI_0 +64 192),8) SEP ((RSP_0 -64 16),8); ((RSI_0 +64 192),8) SEP ((RSP_0 -64 24),8); ((RSI_0 +64 192),8) SEP ((RSP_0 -64 32),8); ((RSI_0 +64 192),8) SEP ((RSP_0 -64 40),8); ((RSI_0 +64 192),8) SEP ((RSP_0 -64 48),8); ((RSI_0 +64 192),8) SEP ((RSP_0 -64 56),8); ((RSI_0 +64 192),8) SEP ((RSP_0 -64 64),8); ((RSI_0 +64 192),8) SEP ((RSP_0 -64 72),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_disk_new) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "100008413: MOV QWORD PTR [R14 + 192], RAX 7"
 Post  "RAX = bot(fun__archive_read_disk_new) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 192),8] = bot(fun__archive_read_disk_new) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000841a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_disk_new) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 192),8] = bot(fun__archive_read_disk_new) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "10000841a: TEST RAX, RAX 3"
 Post  "RAX = bot(fun__archive_read_disk_new) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 192),8] = bot(fun__archive_read_disk_new) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000841d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_disk_new) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 192),8] = bot(fun__archive_read_disk_new) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "10000841d: JE 4295003009 6"
 Post  "RAX = bot(fun__archive_read_disk_new) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 192),8] = bot(fun__archive_read_disk_new) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100008396, blockId == 6 ##
#####################################
*)

htriple "ht_100008b78"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_linkresolver_new) ; RBX = RBX_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 200),8] = bot(fun__archive_entry_linkresolver_new) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "100008b78: LEA RDX, [RIP + 12570] 7"
 Post  "RAX = bot(fun__archive_entry_linkresolver_new) ; RBX = RBX_0 ; RDX = 0x10000bc99 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 200),8] = bot(fun__archive_entry_linkresolver_new) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008b7f"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_linkresolver_new) ; RBX = RBX_0 ; RDX = 0x10000bc99 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 200),8] = bot(fun__archive_entry_linkresolver_new) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "100008b7f: JMP 4295003016 2"
 Post  "RAX = bot(fun__archive_entry_linkresolver_new) ; RBX = RBX_0 ; RDX = 0x10000bc99 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 200),8] = bot(fun__archive_entry_linkresolver_new) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100008396, blockId == 7 ##
#####################################
*)

htriple "ht_100008423"
 Separations "((RSI_0 +64 89),1) SEP (RSP_0,8); ((RSI_0 +64 89),1) SEP (0x10000c010,8); ((RSI_0 +64 89),1) SEP ((RSP_0 -64 8),8); ((RSI_0 +64 89),1) SEP ((RSP_0 -64 16),8); ((RSI_0 +64 89),1) SEP ((RSP_0 -64 24),8); ((RSI_0 +64 89),1) SEP ((RSP_0 -64 32),8); ((RSI_0 +64 89),1) SEP ((RSP_0 -64 40),8); ((RSI_0 +64 89),1) SEP ((RSP_0 -64 48),8); ((RSI_0 +64 89),1) SEP ((RSP_0 -64 56),8); ((RSI_0 +64 89),1) SEP ((RSP_0 -64 64),8); ((RSI_0 +64 89),1) SEP ((RSP_0 -64 72),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_disk_new) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 192),8] = bot(fun__archive_read_disk_new) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "100008423: MOVSX ECX, BYTE PTR [R14 + 89] 5"
 Post  "RAX = bot(fun__archive_read_disk_new) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 192),8] = bot(fun__archive_read_disk_new) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008428"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_disk_new) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 192),8] = bot(fun__archive_read_disk_new) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "100008428: MOV RDI, RAX 3"
 Post  "RAX = bot(fun__archive_read_disk_new) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RDI = bot(fun__archive_read_disk_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 192),8] = bot(fun__archive_read_disk_new) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000842b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_disk_new) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RDI = bot(fun__archive_read_disk_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 192),8] = bot(fun__archive_read_disk_new) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "10000842b: CMP ECX, 76 3"
 Post  "RAX = bot(fun__archive_read_disk_new) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RDI = bot(fun__archive_read_disk_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 192),8] = bot(fun__archive_read_disk_new) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000842e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_disk_new) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RDI = bot(fun__archive_read_disk_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 192),8] = bot(fun__archive_read_disk_new) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "10000842e: JE 4295001148 2"
 Post  "RAX = bot(fun__archive_read_disk_new) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RDI = bot(fun__archive_read_disk_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 192),8] = bot(fun__archive_read_disk_new) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100008396, blockId == 8 ##
#####################################
*)

htriple "ht_100008b81"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_disk_new) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 192),8] = bot(fun__archive_read_disk_new) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "100008b81: LEA RDX, [RIP + 12589] 7"
 Post  "RAX = bot(fun__archive_read_disk_new) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RDX = 0x10000bcb5 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 192),8] = bot(fun__archive_read_disk_new) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100008396, blockId == 9 ##
#####################################
*)

htriple "ht_100008430"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_disk_new) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RDI = bot(fun__archive_read_disk_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 192),8] = bot(fun__archive_read_disk_new) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "100008430: CMP ECX, 72 3"
 Post  "RAX = bot(fun__archive_read_disk_new) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RDI = bot(fun__archive_read_disk_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 192),8] = bot(fun__archive_read_disk_new) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008433"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_disk_new) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RDI = bot(fun__archive_read_disk_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 192),8] = bot(fun__archive_read_disk_new) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "100008433: JNE 4295001155 2"
 Post  "RAX = bot(fun__archive_read_disk_new) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RDI = bot(fun__archive_read_disk_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 192),8] = bot(fun__archive_read_disk_new) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100008396, blockId == 10 ##
######################################
*)

htriple "ht_10000843c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_disk_new) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RDI = bot(fun__archive_read_disk_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 192),8] = bot(fun__archive_read_disk_new) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "10000843c: ExternalCall fun__archive_read_disk_set_symlink_logical 5"
 Post  "RAX = bot(fun__archive_read_disk_set_symlink_logical) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 FunctionConstraints "PRESERVES fun__archive_read_disk_set_symlink_logical {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008441"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_disk_set_symlink_logical) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "100008441: JMP 4295001160 2"
 Post  "RAX = bot(fun__archive_read_disk_set_symlink_logical) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100008396, blockId == 11 ##
######################################
*)

htriple "ht_100008435"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_disk_new) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RDI = bot(fun__archive_read_disk_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 192),8] = bot(fun__archive_read_disk_new) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "100008435: ExternalCall fun__archive_read_disk_set_symlink_hybrid 5"
 Post  "RAX = bot(fun__archive_read_disk_set_symlink_hybrid) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 FunctionConstraints "PRESERVES fun__archive_read_disk_set_symlink_hybrid {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000843a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_disk_set_symlink_hybrid) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "10000843a: JMP 4295001160 2"
 Post  "RAX = bot(fun__archive_read_disk_set_symlink_hybrid) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100008396, blockId == 12 ##
######################################
*)

htriple "ht_100008443"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_disk_new) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RDI = bot(fun__archive_read_disk_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 192),8] = bot(fun__archive_read_disk_new) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "100008443: ExternalCall fun__archive_read_disk_set_symlink_physical 5"
 Post  "RAX = bot(fun__archive_read_disk_set_symlink_physical) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 FunctionConstraints "PRESERVES fun__archive_read_disk_set_symlink_physical {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100008396, blockId == 13 ##
######################################
*)

htriple "ht_100008448"
 Separations "((RSI_0 +64 192),8) SEP (bot(fun____error),4); ((RSI_0 +64 192),8) SEP (RSP_0,8); ((RSI_0 +64 192),8) SEP ([0x10000c010,8]_0,8); ((RSI_0 +64 192),8) SEP (0x10000c010,8); ((RSI_0 +64 192),8) SEP ((RSP_0 -64 8),8); ((RSI_0 +64 192),8) SEP ((RSP_0 -64 16),8); ((RSI_0 +64 192),8) SEP ((RSP_0 -64 24),8); ((RSI_0 +64 192),8) SEP ((RSP_0 -64 32),8); ((RSI_0 +64 192),8) SEP ((RSP_0 -64 40),8); ((RSI_0 +64 192),8) SEP ((RSP_0 -64 48),8); ((RSI_0 +64 192),8) SEP ((RSP_0 -64 56),8); ((RSI_0 +64 192),8) SEP ((RSP_0 -64 64),8); ((RSI_0 +64 192),8) SEP ((RSP_0 -64 72),8)"
 Assertions  ""
 Pre   "RBX = bot(fun__archive_entry_linkresolver_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "100008448: MOV RDI, QWORD PTR [R14 + 192] 7"
 Post  "RBX = bot(fun__archive_entry_linkresolver_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000844f"
 Separations "((RSI_0 +64 248),8) SEP (RSP_0,8); ((RSI_0 +64 248),8) SEP (0x10000c010,8); ((RSI_0 +64 248),8) SEP ((RSP_0 -64 8),8); ((RSI_0 +64 248),8) SEP ((RSP_0 -64 16),8); ((RSI_0 +64 248),8) SEP ((RSP_0 -64 24),8); ((RSI_0 +64 248),8) SEP ((RSP_0 -64 32),8); ((RSI_0 +64 248),8) SEP ((RSP_0 -64 40),8); ((RSI_0 +64 248),8) SEP ((RSP_0 -64 48),8); ((RSI_0 +64 248),8) SEP ((RSP_0 -64 56),8); ((RSI_0 +64 248),8) SEP ((RSP_0 -64 64),8); ((RSI_0 +64 248),8) SEP ((RSP_0 -64 72),8)"
 Assertions  ""
 Pre   "RBX = bot(fun__archive_entry_linkresolver_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "10000844f: MOV RSI, QWORD PTR [R14 + 248] 7"
 Post  "RBX = bot(fun__archive_entry_linkresolver_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008456"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__archive_entry_linkresolver_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "100008456: LEA RDX, [RIP + 3542] 7"
 Post  "RBX = bot(fun__archive_entry_linkresolver_new) ; RDX = 0x100009233 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000845d"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__archive_entry_linkresolver_new) ; RDX = 0x100009233 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "10000845d: MOV RCX, R14 3"
 Post  "RBX = bot(fun__archive_entry_linkresolver_new) ; RCX = RSI_0 ; RDX = 0x100009233 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008460"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__archive_entry_linkresolver_new) ; RCX = RSI_0 ; RDX = 0x100009233 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "100008460: ExternalCall fun__archive_read_disk_set_matching 5"
 Post  "RAX = bot(fun__archive_read_disk_set_matching) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 FunctionConstraints "PRESERVES fun__archive_read_disk_set_matching {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008465"
 Separations "((RSI_0 +64 192),8) SEP (bot(fun____error),4); ((RSI_0 +64 192),8) SEP (RSP_0,8); ((RSI_0 +64 192),8) SEP ([0x10000c010,8]_0,8); ((RSI_0 +64 192),8) SEP (0x10000c010,8); ((RSI_0 +64 192),8) SEP ((RSP_0 -64 8),8); ((RSI_0 +64 192),8) SEP ((RSP_0 -64 16),8); ((RSI_0 +64 192),8) SEP ((RSP_0 -64 24),8); ((RSI_0 +64 192),8) SEP ((RSP_0 -64 32),8); ((RSI_0 +64 192),8) SEP ((RSP_0 -64 40),8); ((RSI_0 +64 192),8) SEP ((RSP_0 -64 48),8); ((RSI_0 +64 192),8) SEP ((RSP_0 -64 56),8); ((RSI_0 +64 192),8) SEP ((RSP_0 -64 64),8); ((RSI_0 +64 192),8) SEP ((RSP_0 -64 72),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_disk_set_matching) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "100008465: MOV RDI, QWORD PTR [R14 + 192] 7"
 Post  "RAX = bot(fun__archive_read_disk_set_matching) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000846c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_disk_set_matching) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "10000846c: LEA RSI, [RIP + 3618] 7"
 Post  "RAX = bot(fun__archive_read_disk_set_matching) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RSI = 0x100009295 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008473"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_disk_set_matching) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RSI = 0x100009295 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "100008473: MOV RDX, R14 3"
 Post  "RAX = bot(fun__archive_read_disk_set_matching) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RDX = RSI_0 ; RSI = 0x100009295 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008476"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_disk_set_matching) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RDX = RSI_0 ; RSI = 0x100009295 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "100008476: ExternalCall fun__archive_read_disk_set_metadata_filter_callback 5"
 Post  "RAX = bot(fun__archive_read_disk_set_metadata_filter_callback) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 FunctionConstraints "PRESERVES fun__archive_read_disk_set_metadata_filter_callback {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000847b"
 Separations "((RSI_0 +64 192),8) SEP (bot(fun____error),4); ((RSI_0 +64 192),8) SEP (RSP_0,8); ((RSI_0 +64 192),8) SEP ([0x10000c010,8]_0,8); ((RSI_0 +64 192),8) SEP (0x10000c010,8); ((RSI_0 +64 192),8) SEP ((RSP_0 -64 8),8); ((RSI_0 +64 192),8) SEP ((RSP_0 -64 16),8); ((RSI_0 +64 192),8) SEP ((RSP_0 -64 24),8); ((RSI_0 +64 192),8) SEP ((RSP_0 -64 32),8); ((RSI_0 +64 192),8) SEP ((RSP_0 -64 40),8); ((RSI_0 +64 192),8) SEP ((RSP_0 -64 48),8); ((RSI_0 +64 192),8) SEP ((RSP_0 -64 56),8); ((RSI_0 +64 192),8) SEP ((RSP_0 -64 64),8); ((RSI_0 +64 192),8) SEP ((RSP_0 -64 72),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_disk_set_metadata_filter_callback) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "10000847b: MOV RDI, QWORD PTR [R14 + 192] 7"
 Post  "RAX = bot(fun__archive_read_disk_set_metadata_filter_callback) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008482"
 Separations "((RSI_0 +64 44),4) SEP (RSP_0,8); ((RSI_0 +64 44),4) SEP (0x10000c010,8); ((RSI_0 +64 44),4) SEP ((RSP_0 -64 8),8); ((RSI_0 +64 44),4) SEP ((RSP_0 -64 16),8); ((RSI_0 +64 44),4) SEP ((RSP_0 -64 24),8); ((RSI_0 +64 44),4) SEP ((RSP_0 -64 32),8); ((RSI_0 +64 44),4) SEP ((RSP_0 -64 40),8); ((RSI_0 +64 44),4) SEP ((RSP_0 -64 48),8); ((RSI_0 +64 44),4) SEP ((RSP_0 -64 56),8); ((RSI_0 +64 44),4) SEP ((RSP_0 -64 64),8); ((RSI_0 +64 44),4) SEP ((RSP_0 -64 72),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_disk_set_metadata_filter_callback) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "100008482: MOV ESI, DWORD PTR [R14 + 44] 4"
 Post  "RAX = bot(fun__archive_read_disk_set_metadata_filter_callback) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008486"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_disk_set_metadata_filter_callback) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "100008486: ExternalCall fun__archive_read_disk_set_behavior 5"
 Post  "RAX = bot(fun__archive_read_disk_set_behavior) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 FunctionConstraints "PRESERVES fun__archive_read_disk_set_behavior {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000848b"
 Separations "((RSI_0 +64 192),8) SEP (bot(fun____error),4); ((RSI_0 +64 192),8) SEP (RSP_0,8); ((RSI_0 +64 192),8) SEP ([0x10000c010,8]_0,8); ((RSI_0 +64 192),8) SEP (0x10000c010,8); ((RSI_0 +64 192),8) SEP ((RSP_0 -64 8),8); ((RSI_0 +64 192),8) SEP ((RSP_0 -64 16),8); ((RSI_0 +64 192),8) SEP ((RSP_0 -64 24),8); ((RSI_0 +64 192),8) SEP ((RSP_0 -64 32),8); ((RSI_0 +64 192),8) SEP ((RSP_0 -64 40),8); ((RSI_0 +64 192),8) SEP ((RSP_0 -64 48),8); ((RSI_0 +64 192),8) SEP ((RSP_0 -64 56),8); ((RSI_0 +64 192),8) SEP ((RSP_0 -64 64),8); ((RSI_0 +64 192),8) SEP ((RSP_0 -64 72),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_disk_set_behavior) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "10000848b: MOV RDI, QWORD PTR [R14 + 192] 7"
 Post  "RAX = bot(fun__archive_read_disk_set_behavior) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008492"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_disk_set_behavior) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "100008492: ExternalCall fun__archive_read_disk_set_standard_lookup 5"
 Post  "RAX = bot(fun__archive_read_disk_set_standard_lookup) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 FunctionConstraints "PRESERVES fun__archive_read_disk_set_standard_lookup {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008497"
 Separations "((RSI_0 +64 16),8) SEP (RSP_0,8); ((RSI_0 +64 16),8) SEP (0x10000c010,8); ((RSI_0 +64 16),8) SEP ((RSP_0 -64 8),8); ((RSI_0 +64 16),8) SEP ((RSP_0 -64 16),8); ((RSI_0 +64 16),8) SEP ((RSP_0 -64 24),8); ((RSI_0 +64 16),8) SEP ((RSP_0 -64 32),8); ((RSI_0 +64 16),8) SEP ((RSP_0 -64 40),8); ((RSI_0 +64 16),8) SEP ((RSP_0 -64 48),8); ((RSI_0 +64 16),8) SEP ((RSP_0 -64 56),8); ((RSI_0 +64 16),8) SEP ((RSP_0 -64 64),8); ((RSI_0 +64 16),8) SEP ((RSP_0 -64 72),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_disk_set_standard_lookup) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "100008497: MOV RDI, QWORD PTR [R14 + 16] 4"
 Post  "RAX = bot(fun__archive_read_disk_set_standard_lookup) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000849b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_disk_set_standard_lookup) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "10000849b: TEST RDI, RDI 3"
 Post  "RAX = bot(fun__archive_read_disk_set_standard_lookup) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000849e"
 Separations "((RSP_0 -64 64),8) SEP (bot(fun____error),4); ((RSP_0 -64 64),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 64),8) SEP (0x10000c010,8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 24),4); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 32),4); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 36),4); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 44),4); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 80),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 89),1); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 144),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 180),4); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 185),1); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 192),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 200),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 224),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 232),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 248),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_disk_set_standard_lookup) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "10000849e: MOV QWORD PTR [RBP - 56], R13 4"
 Post  "RAX = bot(fun__archive_read_disk_set_standard_lookup) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000084a2"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_disk_set_standard_lookup) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "1000084a2: JE 4295001488 6"
 Post  "RAX = bot(fun__archive_read_disk_set_standard_lookup) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100008396, blockId == 14 ##
######################################
*)

htriple "ht_1000084a8"
 Separations "((RSI_0 +64 185),1) SEP (bot(fun____error),4); ((RSI_0 +64 185),1) SEP (RSP_0,8); ((RSI_0 +64 185),1) SEP ([0x10000c010,8]_0,8); ((RSI_0 +64 185),1) SEP (0x10000c010,8); ((RSI_0 +64 185),1) SEP ((RSP_0 -64 8),8); ((RSI_0 +64 185),1) SEP ((RSP_0 -64 16),8); ((RSI_0 +64 185),1) SEP ((RSP_0 -64 24),8); ((RSI_0 +64 185),1) SEP ((RSP_0 -64 32),8); ((RSI_0 +64 185),1) SEP ((RSP_0 -64 40),8); ((RSI_0 +64 185),1) SEP ((RSP_0 -64 48),8); ((RSI_0 +64 185),1) SEP ((RSP_0 -64 56),8); ((RSI_0 +64 185),1) SEP ((RSP_0 -64 64),8); ((RSI_0 +64 185),1) SEP ((RSP_0 -64 72),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_disk_set_standard_lookup) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "1000084a8: MOV BYTE PTR [R14 + 185], 0 8"
 Post  "RAX = bot(fun__archive_read_disk_set_standard_lookup) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 185),1] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000084b0"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_disk_set_standard_lookup) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 185),1] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "1000084b0: MOV ESI, 256 5"
 Post  "RAX = bot(fun__archive_read_disk_set_standard_lookup) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RSI = 256 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 185),1] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000084b5"
 Separations "((RSI_0 +64 36),4) SEP (RSP_0,8); ((RSI_0 +64 36),4) SEP (0x10000c010,8); ((RSI_0 +64 36),4) SEP ((RSP_0 -64 8),8); ((RSI_0 +64 36),4) SEP ((RSP_0 -64 16),8); ((RSI_0 +64 36),4) SEP ((RSP_0 -64 24),8); ((RSI_0 +64 36),4) SEP ((RSP_0 -64 32),8); ((RSI_0 +64 36),4) SEP ((RSP_0 -64 40),8); ((RSI_0 +64 36),4) SEP ((RSP_0 -64 48),8); ((RSI_0 +64 36),4) SEP ((RSP_0 -64 56),8); ((RSI_0 +64 36),4) SEP ((RSP_0 -64 64),8); ((RSI_0 +64 36),4) SEP ((RSP_0 -64 72),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_disk_set_standard_lookup) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RSI = 256 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 185),1] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "1000084b5: AND ESI, DWORD PTR [R14 + 36] 4"
 Post  "RAX = bot(fun__archive_read_disk_set_standard_lookup) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 185),1] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000084b9"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_disk_set_standard_lookup) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 185),1] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "1000084b9: ExternalCall fun_0x100009b81 5"
 Post  "RAX = bot(fun_0x100009b81) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 FunctionConstraints "PRESERVES fun_0x100009b81 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000084be"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100009b81) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "1000084be: MOV R15, RAX 3"
 Post  "RAX = bot(fun_0x100009b81) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000084c1"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100009b81) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "1000084c1: MOV RDI, RAX 3"
 Post  "RAX = bot(fun_0x100009b81) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RDI = bot(fun_0x100009b81) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000084c4"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100009b81) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RDI = bot(fun_0x100009b81) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "1000084c4: ExternalCall fun_0x100009c46 5"
 Post  "RAX = bot(fun_0x100009c46) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 FunctionConstraints "PRESERVES fun_0x100009c46 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000084c9"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100009c46) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "1000084c9: TEST RAX, RAX 3"
 Post  "RAX = bot(fun_0x100009c46) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000084cc"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100009c46) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "1000084cc: JE 4295001462 6"
 Post  "RAX = bot(fun_0x100009c46) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100008396, blockId == 15 ##
######################################
*)

htriple "ht_100008590"
 Separations "((RSI_0 +64 144),8) SEP (bot(fun____error),4); ((RSI_0 +64 144),8) SEP (RSP_0,8); ((RSI_0 +64 144),8) SEP ([0x10000c010,8]_0,8); ((RSI_0 +64 144),8) SEP (0x10000c010,8); ((RSI_0 +64 144),8) SEP ((RSP_0 -64 8),8); ((RSI_0 +64 144),8) SEP ((RSP_0 -64 16),8); ((RSI_0 +64 144),8) SEP ((RSP_0 -64 24),8); ((RSI_0 +64 144),8) SEP ((RSP_0 -64 32),8); ((RSI_0 +64 144),8) SEP ((RSP_0 -64 40),8); ((RSI_0 +64 144),8) SEP ((RSP_0 -64 48),8); ((RSI_0 +64 144),8) SEP ((RSP_0 -64 56),8); ((RSI_0 +64 144),8) SEP ((RSP_0 -64 64),8); ((RSI_0 +64 144),8) SEP ((RSP_0 -64 72),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "100008590: MOV RAX, QWORD PTR [R14 + 144] 7"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008597"
 Separations ""
 Assertions  "(RAX,8) SEP (RSP_0,8); (RAX,8) SEP ((RSP_0 -64 8),8); (RAX,8) SEP ((RSP_0 -64 16),8); (RAX,8) SEP ((RSP_0 -64 24),8); (RAX,8) SEP ((RSP_0 -64 32),8); (RAX,8) SEP ((RSP_0 -64 40),8); (RAX,8) SEP ((RSP_0 -64 48),8); (RAX,8) SEP ((RSP_0 -64 56),8); (RAX,8) SEP ((RSP_0 -64 64),8); (RAX,8) SEP ((RSP_0 -64 72),8)"
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "100008597: MOV R15, QWORD PTR [RAX] 3"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000859a"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "10000859a: TEST R15, R15 3"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000859d"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "10000859d: JE 4295002330 6"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100008396, blockId == 16 ##
######################################
*)

htriple "ht_1000084d2"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100009c46) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "1000084d2: MOV R12, RAX 3"
 Post  "RAX = bot(fun_0x100009c46) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun_0x100009c46) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000084d5"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100009c46) ; RBX = bot(fun__archive_entry_linkresolver_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun_0x100009c46) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "1000084d5: LEA RBX, [RIP + 14418] 7"
 Post  "RAX = bot(fun_0x100009c46) ; RBX = 0x10000bd2e ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun_0x100009c46) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000084dc"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100009c46) ; RBX = 0x10000bd2e ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun_0x100009c46) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "1000084dc: LEA R13, [RIP + 14345] 7"
 Post  "RAX = bot(fun_0x100009c46) ; RBX = 0x10000bd2e ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = 0x10000bcec ; R12 = bot(fun_0x100009c46) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100008396, blockId == 17 ##
######################################
*)

htriple "ht_100008576"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100009c46) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "100008576: MOV RDI, R15 3"
 Post  "RAX = bot(fun_0x100009c46) ; RDI = bot(fun_0x100009b81) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008579"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100009c46) ; RDI = bot(fun_0x100009b81) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "100008579: ExternalCall fun_0x100009e28 5"
 Post  "RAX = bot(fun_0x100009e28) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 FunctionConstraints "PRESERVES fun_0x100009e28 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000857e"
 Separations "((RSI_0 +64 185),1) SEP (bot(fun____error),4); ((RSI_0 +64 185),1) SEP (RSP_0,8); ((RSI_0 +64 185),1) SEP ([0x10000c010,8]_0,8); ((RSI_0 +64 185),1) SEP (0x10000c010,8); ((RSI_0 +64 185),1) SEP ((RSP_0 -64 8),8); ((RSI_0 +64 185),1) SEP ((RSP_0 -64 16),8); ((RSI_0 +64 185),1) SEP ((RSP_0 -64 24),8); ((RSI_0 +64 185),1) SEP ((RSP_0 -64 32),8); ((RSI_0 +64 185),1) SEP ((RSP_0 -64 40),8); ((RSI_0 +64 185),1) SEP ((RSP_0 -64 48),8); ((RSI_0 +64 185),1) SEP ((RSP_0 -64 56),8); ((RSI_0 +64 185),1) SEP ((RSP_0 -64 64),8); ((RSI_0 +64 185),1) SEP ((RSP_0 -64 72),8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100009e28) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "10000857e: CMP BYTE PTR [R14 + 185], 0 8"
 Post  "RAX = bot(fun_0x100009e28) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008586"
 Separations "((RSP_0 -64 64),8) SEP (bot(fun____error),4); ((RSP_0 -64 64),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 64),8) SEP (0x10000c010,8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 24),4); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 32),4); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 36),4); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 44),4); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 80),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 89),1); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 144),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 180),4); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 185),1); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 192),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 200),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 224),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 232),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 248),8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100009e28) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "100008586: MOV R13, QWORD PTR [RBP - 56] 4"
 Post  "RAX = bot(fun_0x100009e28) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000858a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100009e28) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "10000858a: JNE 4295003030 6"
 Post  "RAX = bot(fun_0x100009e28) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100008396, blockId == 18 ##
######################################
*)

htriple "ht_1000084ed"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100009c46) ; RBX = 0x10000bd2e ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = 0x10000bcec ; R12 = bot(fun_0x100009c46) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "1000084ed: CMP BYTE PTR [R12], 0 5"
 Post  "RAX = bot(fun_0x100009c46) ; RBX = 0x10000bd2e ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = 0x10000bcec ; R12 = bot(fun_0x100009c46) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000084f2"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100009c46) ; RBX = 0x10000bd2e ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = 0x10000bcec ; R12 = bot(fun_0x100009c46) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "1000084f2: JE 4295001399 2"
 Post  "RAX = bot(fun_0x100009c46) ; RBX = 0x10000bd2e ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = 0x10000bcec ; R12 = bot(fun_0x100009c46) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100008396, blockId == 19 ##
######################################
*)

htriple "ht_100008501"
 Separations "((RSI_0 +64 37),1) SEP (RSP_0,8); ((RSI_0 +64 37),1) SEP (0x10000c010,8); ((RSI_0 +64 37),1) SEP ((RSP_0 -64 8),8); ((RSI_0 +64 37),1) SEP ((RSP_0 -64 16),8); ((RSI_0 +64 37),1) SEP ((RSP_0 -64 24),8); ((RSI_0 +64 37),1) SEP ((RSP_0 -64 32),8); ((RSI_0 +64 37),1) SEP ((RSP_0 -64 40),8); ((RSI_0 +64 37),1) SEP ((RSP_0 -64 48),8); ((RSI_0 +64 37),1) SEP ((RSP_0 -64 56),8); ((RSI_0 +64 37),1) SEP ((RSP_0 -64 64),8); ((RSI_0 +64 37),1) SEP ((RSP_0 -64 72),8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100009c46) ; RBX = 0x10000bd2e ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = 0x10000bcec ; R12 = bot(fun_0x100009c46) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "100008501: TEST BYTE PTR [R14 + 37], 1 5"
 Post  "RAX = bot(fun_0x100009c46) ; RBX = 0x10000bd2e ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = 0x10000bcec ; R12 = bot(fun_0x100009c46) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008506"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100009c46) ; RBX = 0x10000bd2e ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = 0x10000bcec ; R12 = bot(fun_0x100009c46) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "100008506: JNE 4295001367 2"
 Post  "RAX = bot(fun_0x100009c46) ; RBX = 0x10000bd2e ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = 0x10000bcec ; R12 = bot(fun_0x100009c46) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100008396, blockId == 20 ##
######################################
*)

htriple "ht_1000084f4"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100009c46) ; RBX = 0x10000bd2e ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = 0x10000bcec ; R12 = bot(fun_0x100009c46) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "1000084f4: MOV RDI, R14 3"
 Post  "RAX = bot(fun_0x100009c46) ; RBX = 0x10000bd2e ; RDI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = 0x10000bcec ; R12 = bot(fun_0x100009c46) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000084f7"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100009c46) ; RBX = 0x10000bd2e ; RDI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = 0x10000bcec ; R12 = bot(fun_0x100009c46) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "1000084f7: MOV RSI, R12 3"
 Post  "RAX = bot(fun_0x100009c46) ; RBX = 0x10000bd2e ; RDI = RSI_0 ; RSI = bot(fun_0x100009c46) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = 0x10000bcec ; R12 = bot(fun_0x100009c46) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000084fa"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100009c46) ; RBX = 0x10000bd2e ; RDI = RSI_0 ; RSI = bot(fun_0x100009c46) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = 0x10000bcec ; R12 = bot(fun_0x100009c46) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "1000084fa: ExternalCall fun_0x1000077cd 5"
 Post  "RAX = bot(fun_0x1000077cd) ; RBX = 0x10000bd2e ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = 0x10000bcec ; R12 = bot(fun_0x100009c46) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 FunctionConstraints "PRESERVES fun_0x1000077cd {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000084ff"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000077cd) ; RBX = 0x10000bd2e ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = 0x10000bcec ; R12 = bot(fun_0x100009c46) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "1000084ff: JMP 4295001422 2"
 Post  "RAX = bot(fun_0x1000077cd) ; RBX = 0x10000bd2e ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = 0x10000bcec ; R12 = bot(fun_0x100009c46) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100008396, blockId == 21 ##
######################################
*)

htriple "ht_100008537"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100009c46) ; RBX = 0x10000bd2e ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = 0x10000bcec ; R12 = bot(fun_0x100009c46) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "100008537: XOR EDI, EDI 2"
 Post  "RAX = bot(fun_0x100009c46) ; RBX = 0x10000bd2e ; RDI = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = 0x10000bcec ; R12 = bot(fun_0x100009c46) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008539"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100009c46) ; RBX = 0x10000bd2e ; RDI = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = 0x10000bcec ; R12 = bot(fun_0x100009c46) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "100008539: MOV RSI, R13 3"
 Post  "RAX = bot(fun_0x100009c46) ; RBX = 0x10000bd2e ; RDI = 0 ; RSI = 0x10000bcec ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = 0x10000bcec ; R12 = bot(fun_0x100009c46) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000853c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100009c46) ; RBX = 0x10000bd2e ; RDI = 0 ; RSI = 0x10000bcec ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = 0x10000bcec ; R12 = bot(fun_0x100009c46) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "10000853c: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = 0x10000bd2e ; RDI = 0 ; RSI = 0x10000bcec ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = 0x10000bcec ; R12 = bot(fun_0x100009c46) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000853e"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = 0x10000bd2e ; RDI = 0 ; RSI = 0x10000bcec ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = 0x10000bcec ; R12 = bot(fun_0x100009c46) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "10000853e: ExternalCall fun_0x1000099ad 5"
 Post  "RAX = bot(fun_0x1000099ad) ; RBX = 0x10000bd2e ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = 0x10000bcec ; R12 = bot(fun_0x100009c46) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 FunctionConstraints "PRESERVES fun_0x1000099ad {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008543"
 Separations "((RSI_0 +64 180),4) SEP (bot(fun____error),4); ((RSI_0 +64 180),4) SEP (RSP_0,8); ((RSI_0 +64 180),4) SEP ([0x10000c010,8]_0,8); ((RSI_0 +64 180),4) SEP (0x10000c010,8); ((RSI_0 +64 180),4) SEP ((RSP_0 -64 8),8); ((RSI_0 +64 180),4) SEP ((RSP_0 -64 16),8); ((RSI_0 +64 180),4) SEP ((RSP_0 -64 24),8); ((RSI_0 +64 180),4) SEP ((RSP_0 -64 32),8); ((RSI_0 +64 180),4) SEP ((RSP_0 -64 40),8); ((RSI_0 +64 180),4) SEP ((RSP_0 -64 48),8); ((RSI_0 +64 180),4) SEP ((RSP_0 -64 56),8); ((RSI_0 +64 180),4) SEP ((RSP_0 -64 64),8); ((RSI_0 +64 180),4) SEP ((RSP_0 -64 72),8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000099ad) ; RBX = 0x10000bd2e ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = 0x10000bcec ; R12 = bot(fun_0x100009c46) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "100008543: MOV DWORD PTR [R14 + 180], 1 11"
 Post  "RAX = bot(fun_0x1000099ad) ; RBX = 0x10000bd2e ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = 0x10000bcec ; R12 = bot(fun_0x100009c46) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 180),4] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100008396, blockId == 22 ##
######################################
*)

htriple "ht_100008508"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100009c46) ; RBX = 0x10000bd2e ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = 0x10000bcec ; R12 = bot(fun_0x100009c46) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "100008508: MOV RDI, R12 3"
 Post  "RAX = bot(fun_0x100009c46) ; RBX = 0x10000bd2e ; RDI = bot(fun_0x100009c46) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = 0x10000bcec ; R12 = bot(fun_0x100009c46) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000850b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100009c46) ; RBX = 0x10000bd2e ; RDI = bot(fun_0x100009c46) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = 0x10000bcec ; R12 = bot(fun_0x100009c46) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "10000850b: MOV RSI, RBX 3"
 Post  "RAX = bot(fun_0x100009c46) ; RBX = 0x10000bd2e ; RDI = bot(fun_0x100009c46) ; RSI = 0x10000bd2e ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = 0x10000bcec ; R12 = bot(fun_0x100009c46) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000850e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100009c46) ; RBX = 0x10000bd2e ; RDI = bot(fun_0x100009c46) ; RSI = 0x10000bd2e ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = 0x10000bcec ; R12 = bot(fun_0x100009c46) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "10000850e: ExternalCall fun__strcmp 5"
 Post  "RAX = bot(fun__strcmp) ; RBX = 0x10000bd2e ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = 0x10000bcec ; R12 = bot(fun_0x100009c46) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 FunctionConstraints "PRESERVES fun__strcmp {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008513"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strcmp) ; RBX = 0x10000bd2e ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = 0x10000bcec ; R12 = bot(fun_0x100009c46) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "100008513: TEST EAX, EAX 2"
 Post  "RAX = bot(fun__strcmp) ; RBX = 0x10000bd2e ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = 0x10000bcec ; R12 = bot(fun_0x100009c46) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008515"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strcmp) ; RBX = 0x10000bd2e ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = 0x10000bcec ; R12 = bot(fun_0x100009c46) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "100008515: JE 4295001452 2"
 Post  "RAX = bot(fun__strcmp) ; RBX = 0x10000bd2e ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = 0x10000bcec ; R12 = bot(fun_0x100009c46) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100008396, blockId == 23 ##
######################################
*)

htriple "ht_100008517"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x10000bd2e ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = 0x10000bcec ; R12 = bot(fun_0x100009c46) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "100008517: CMP BYTE PTR [R12], 47 5"
 Post  "RBX = 0x10000bd2e ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = 0x10000bcec ; R12 = bot(fun_0x100009c46) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000851c"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x10000bd2e ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = 0x10000bcec ; R12 = bot(fun_0x100009c46) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "10000851c: JE 4295001382 2"
 Post  "RBX = 0x10000bd2e ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = 0x10000bcec ; R12 = bot(fun_0x100009c46) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100008396, blockId == 24 ##
######################################
*)

htriple "ht_10000856c"
 Separations "((RSI_0 +64 185),1) SEP (bot(fun____error),4); ((RSI_0 +64 185),1) SEP (RSP_0,8); ((RSI_0 +64 185),1) SEP ([0x10000c010,8]_0,8); ((RSI_0 +64 185),1) SEP (0x10000c010,8); ((RSI_0 +64 185),1) SEP ((RSP_0 -64 8),8); ((RSI_0 +64 185),1) SEP ((RSP_0 -64 16),8); ((RSI_0 +64 185),1) SEP ((RSP_0 -64 24),8); ((RSI_0 +64 185),1) SEP ((RSP_0 -64 32),8); ((RSI_0 +64 185),1) SEP ((RSP_0 -64 40),8); ((RSI_0 +64 185),1) SEP ((RSP_0 -64 48),8); ((RSI_0 +64 185),1) SEP ((RSP_0 -64 56),8); ((RSI_0 +64 185),1) SEP ((RSP_0 -64 64),8); ((RSI_0 +64 185),1) SEP ((RSP_0 -64 72),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__strcmp) ; RBX = 0x10000bd2e ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = 0x10000bcec ; R12 = bot(fun_0x100009c46) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "10000856c: MOV BYTE PTR [R14 + 185], 1 8"
 Post  "RAX = bot(fun__strcmp) ; RBX = 0x10000bd2e ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = 0x10000bcec ; R12 = bot(fun_0x100009c46) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 185),1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008574"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strcmp) ; RBX = 0x10000bd2e ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = 0x10000bcec ; R12 = bot(fun_0x100009c46) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 185),1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "100008574: JMP 4295001430 2"
 Post  "RAX = bot(fun__strcmp) ; RBX = 0x10000bd2e ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = 0x10000bcec ; R12 = bot(fun_0x100009c46) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 185),1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100008396, blockId == 25 ##
######################################
*)

htriple "ht_10000851e"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x10000bd2e ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = 0x10000bcec ; R12 = bot(fun_0x100009c46) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "10000851e: MOV RDI, R14 3"
 Post  "RBX = 0x10000bd2e ; RDI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = 0x10000bcec ; R12 = bot(fun_0x100009c46) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008521"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x10000bd2e ; RDI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = 0x10000bcec ; R12 = bot(fun_0x100009c46) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "100008521: ExternalCall fun_0x10000788f 5"
 Post  "RAX = bot(fun_0x10000788f) ; RBX = 0x10000bd2e ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = 0x10000bcec ; R12 = bot(fun_0x100009c46) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 FunctionConstraints "PRESERVES fun_0x10000788f {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100008396, blockId == 26 ##
######################################
*)

htriple "ht_100008526"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x10000bd2e ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = 0x10000bcec ; R12 = bot(fun_0x100009c46) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "100008526: MOV RDI, R14 3"
 Post  "RBX = 0x10000bd2e ; RDI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = 0x10000bcec ; R12 = bot(fun_0x100009c46) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008529"
 Separations "((RSP_0 -64 64),8) SEP (bot(fun____error),4); ((RSP_0 -64 64),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 64),8) SEP (0x10000c010,8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 24),4); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 32),4); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 36),4); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 44),4); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 80),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 89),1); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 144),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 180),4); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 185),1); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 192),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 200),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 224),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 232),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 248),8)"
 Assertions  ""
 Pre   "RBX = 0x10000bd2e ; RDI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = 0x10000bcec ; R12 = bot(fun_0x100009c46) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "100008529: MOV RSI, QWORD PTR [RBP - 56] 4"
 Post  "RBX = 0x10000bd2e ; RDI = RSI_0 ; RSI = RDI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = 0x10000bcec ; R12 = bot(fun_0x100009c46) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000852d"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x10000bd2e ; RDI = RSI_0 ; RSI = RDI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = 0x10000bcec ; R12 = bot(fun_0x100009c46) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "10000852d: MOV RDX, R12 3"
 Post  "RBX = 0x10000bd2e ; RDX = bot(fun_0x100009c46) ; RDI = RSI_0 ; RSI = RDI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = 0x10000bcec ; R12 = bot(fun_0x100009c46) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008530"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x10000bd2e ; RDX = bot(fun_0x100009c46) ; RDI = RSI_0 ; RSI = RDI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = 0x10000bcec ; R12 = bot(fun_0x100009c46) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "100008530: ExternalCall fun_0x1000092fb 5"
 Post  "RAX = bot(fun_0x1000092fb) ; RBX = 0x10000bd2e ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = 0x10000bcec ; R12 = bot(fun_0x100009c46) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 FunctionConstraints "PRESERVES fun_0x1000092fb {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008535"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000092fb) ; RBX = 0x10000bd2e ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = 0x10000bcec ; R12 = bot(fun_0x100009c46) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "100008535: JMP 4295001430 2"
 Post  "RAX = bot(fun_0x1000092fb) ; RBX = 0x10000bd2e ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = 0x10000bcec ; R12 = bot(fun_0x100009c46) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100008396, blockId == 27 ##
######################################
*)

htriple "ht_10000854e"
 Separations "((RSI_0 +64 185),1) SEP (bot(fun____error),4); ((RSI_0 +64 185),1) SEP (RSP_0,8); ((RSI_0 +64 185),1) SEP ([0x10000c010,8]_0,8); ((RSI_0 +64 185),1) SEP (0x10000c010,8); ((RSI_0 +64 185),1) SEP ((RSP_0 -64 8),8); ((RSI_0 +64 185),1) SEP ((RSP_0 -64 16),8); ((RSI_0 +64 185),1) SEP ((RSP_0 -64 24),8); ((RSI_0 +64 185),1) SEP ((RSP_0 -64 32),8); ((RSI_0 +64 185),1) SEP ((RSP_0 -64 40),8); ((RSI_0 +64 185),1) SEP ((RSP_0 -64 48),8); ((RSI_0 +64 185),1) SEP ((RSP_0 -64 56),8); ((RSI_0 +64 185),1) SEP ((RSP_0 -64 64),8); ((RSI_0 +64 185),1) SEP ((RSP_0 -64 72),8)"
 Assertions  ""
 Pre   "RBX = 0x10000bd2e ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = 0x10000bcec ; R12 = bot(fun_0x100009c46) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "10000854e: MOV BYTE PTR [R14 + 185], 0 8"
 Post  "RBX = 0x10000bd2e ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = 0x10000bcec ; R12 = bot(fun_0x100009c46) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 185),1] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100008396, blockId == 28 ##
######################################
*)

htriple "ht_100008556"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x10000bd2e ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = 0x10000bcec ; R12 = bot(fun_0x100009c46) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "100008556: MOV RDI, R15 3"
 Post  "RBX = 0x10000bd2e ; RDI = bot(fun_0x100009b81) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = 0x10000bcec ; R12 = bot(fun_0x100009c46) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008559"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x10000bd2e ; RDI = bot(fun_0x100009b81) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = 0x10000bcec ; R12 = bot(fun_0x100009c46) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "100008559: ExternalCall fun_0x100009c46 5"
 Post  "RAX = bot(fun_0x100009c46) ; RBX = 0x10000bd2e ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = 0x10000bcec ; R12 = bot(fun_0x100009c46) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 FunctionConstraints "PRESERVES fun_0x100009c46 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000855e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100009c46) ; RBX = 0x10000bd2e ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = 0x10000bcec ; R12 = bot(fun_0x100009c46) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "10000855e: MOV R12, RAX 3"
 Post  "RAX = bot(fun_0x100009c46) ; RBX = 0x10000bd2e ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = 0x10000bcec ; R12 = bot(fun_0x100009c46) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008561"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100009c46) ; RBX = 0x10000bd2e ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = 0x10000bcec ; R12 = bot(fun_0x100009c46) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "100008561: TEST RAX, RAX 3"
 Post  "RAX = bot(fun_0x100009c46) ; RBX = 0x10000bd2e ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = 0x10000bcec ; R12 = bot(fun_0x100009c46) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008564"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100009c46) ; RBX = 0x10000bd2e ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = 0x10000bcec ; R12 = bot(fun_0x100009c46) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "100008564: JNE 4295001315 6"
 Post  "RAX = bot(fun_0x100009c46) ; RBX = 0x10000bd2e ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = 0x10000bcec ; R12 = bot(fun_0x100009c46) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100008396, blockId == 29 ##
######################################
*)

htriple "ht_1000084e3"
 Separations "((RSI_0 +64 185),1) SEP (bot(fun____error),4); ((RSI_0 +64 185),1) SEP (RSP_0,8); ((RSI_0 +64 185),1) SEP ([0x10000c010,8]_0,8); ((RSI_0 +64 185),1) SEP (0x10000c010,8); ((RSI_0 +64 185),1) SEP ((RSP_0 -64 8),8); ((RSI_0 +64 185),1) SEP ((RSP_0 -64 16),8); ((RSI_0 +64 185),1) SEP ((RSP_0 -64 24),8); ((RSI_0 +64 185),1) SEP ((RSP_0 -64 32),8); ((RSI_0 +64 185),1) SEP ((RSP_0 -64 40),8); ((RSI_0 +64 185),1) SEP ((RSP_0 -64 48),8); ((RSI_0 +64 185),1) SEP ((RSP_0 -64 56),8); ((RSI_0 +64 185),1) SEP ((RSP_0 -64 64),8); ((RSI_0 +64 185),1) SEP ((RSP_0 -64 72),8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100009c46) ; RBX = 0x10000bd2e ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = 0x10000bcec ; R12 = bot(fun_0x100009c46) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "1000084e3: CMP BYTE PTR [R14 + 185], 0 8"
 Post  "RAX = bot(fun_0x100009c46) ; RBX = 0x10000bd2e ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = 0x10000bcec ; R12 = bot(fun_0x100009c46) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000084eb"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100009c46) ; RBX = 0x10000bd2e ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = 0x10000bcec ; R12 = bot(fun_0x100009c46) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "1000084eb: JE 4295001345 2"
 Post  "RAX = bot(fun_0x100009c46) ; RBX = 0x10000bd2e ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = 0x10000bcec ; R12 = bot(fun_0x100009c46) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100008396, blockId == 30 ##
######################################
*)

htriple "ht_10000856a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100009c46) ; RBX = 0x10000bd2e ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = 0x10000bcec ; R12 = bot(fun_0x100009c46) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "10000856a: JMP 4295001462 2"
 Post  "RAX = bot(fun_0x100009c46) ; RBX = 0x10000bd2e ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = 0x10000bcec ; R12 = bot(fun_0x100009c46) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100008396, blockId == 31 ##
######################################
*)

htriple "ht_100008b96"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100009e28) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "100008b96: ExternalCall fun____error 5"
 Post  "RAX = bot(fun____error) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 FunctionConstraints "PRESERVES fun____error {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008b9b"
 Separations "(bot(fun____error),4) SEP (RSP_0,8); (bot(fun____error),4) SEP (0x10000c010,8); (bot(fun____error),4) SEP ((RSI_0 +64 24),4); (bot(fun____error),4) SEP ((RSI_0 +64 144),8); (bot(fun____error),4) SEP ((RSI_0 +64 180),4); (bot(fun____error),4) SEP ((RSI_0 +64 185),1); (bot(fun____error),4) SEP ((RSI_0 +64 192),8); (bot(fun____error),4) SEP ((RSI_0 +64 200),8); (bot(fun____error),4) SEP ((RSI_0 +64 224),8); (bot(fun____error),4) SEP ((RSI_0 +64 232),8); (bot(fun____error),4) SEP ((RSP_0 -64 8),8); (bot(fun____error),4) SEP ((RSP_0 -64 16),8); (bot(fun____error),4) SEP ((RSP_0 -64 24),8); (bot(fun____error),4) SEP ((RSP_0 -64 32),8); (bot(fun____error),4) SEP ((RSP_0 -64 40),8); (bot(fun____error),4) SEP ((RSP_0 -64 48),8); (bot(fun____error),4) SEP ((RSP_0 -64 56),8); (bot(fun____error),4) SEP ((RSP_0 -64 64),8); (bot(fun____error),4) SEP ((RSP_0 -64 72),8)"
 Assertions  ""
 Pre   "RAX = bot(fun____error) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "100008b9b: MOV ESI, DWORD PTR [RAX] 2"
 Post  "RAX = bot(fun____error) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008b9d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun____error) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "100008b9d: LEA RDX, [RIP + 12685] 7"
 Post  "RAX = bot(fun____error) ; RDX = 0x10000bd31 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008ba4"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun____error) ; RDX = 0x10000bd31 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "100008ba4: MOV EDI, 1 5"
 Post  "RAX = bot(fun____error) ; RDX = 0x10000bd31 ; RDI = 1 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008ba9"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun____error) ; RDX = 0x10000bd31 ; RDI = 1 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "100008ba9: JMP 4295003023 2"
 Post  "RAX = bot(fun____error) ; RDX = 0x10000bd31 ; RDI = 1 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun_0x100009b81) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100008396, blockId == 32 ##
######################################
*)

htriple "ht_1000085a3"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "1000085a3: LEA RCX, [R14 + 180] 7"
 Post  "RCX = (RSI_0 +64 180) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000085aa"
 Separations "((RSP_0 -64 72),8) SEP (bot(fun____error),4); ((RSP_0 -64 72),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 72),8) SEP (0x10000c010,8); ((RSP_0 -64 72),8) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 72),8) SEP ((RSI_0 +64 24),4); ((RSP_0 -64 72),8) SEP ((RSI_0 +64 32),4); ((RSP_0 -64 72),8) SEP ((RSI_0 +64 36),4); ((RSP_0 -64 72),8) SEP ((RSI_0 +64 44),4); ((RSP_0 -64 72),8) SEP ((RSI_0 +64 80),8); ((RSP_0 -64 72),8) SEP ((RSI_0 +64 89),1); ((RSP_0 -64 72),8) SEP ((RSI_0 +64 144),8); ((RSP_0 -64 72),8) SEP ((RSI_0 +64 180),4); ((RSP_0 -64 72),8) SEP ((RSI_0 +64 185),1); ((RSP_0 -64 72),8) SEP ((RSI_0 +64 192),8); ((RSP_0 -64 72),8) SEP ((RSI_0 +64 200),8); ((RSP_0 -64 72),8) SEP ((RSI_0 +64 224),8); ((RSP_0 -64 72),8) SEP ((RSI_0 +64 232),8); ((RSP_0 -64 72),8) SEP ((RSI_0 +64 248),8)"
 Assertions  ""
 Pre   "RCX = (RSI_0 +64 180) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "1000085aa: MOV QWORD PTR [RBP - 64], RCX 4"
 Post  "RCX = (RSI_0 +64 180) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000085ae"
 Separations ""
 Assertions  ""
 Pre   "RCX = (RSI_0 +64 180) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "1000085ae: LEA RBX, [RBP - 48] 4"
 Post  "RBX = (RSP_0 -64 56) ; RCX = (RSI_0 +64 180) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100008396, blockId == 33 ##
######################################
*)

htriple "ht_1000088da"
 Separations "((RSI_0 +64 192),8) SEP (bot(fun____error),4); ((RSI_0 +64 192),8) SEP (RSP_0,8); ((RSI_0 +64 192),8) SEP ([0x10000c010,8]_0,8); ((RSI_0 +64 192),8) SEP (0x10000c010,8); ((RSI_0 +64 192),8) SEP ((RSP_0 -64 8),8); ((RSI_0 +64 192),8) SEP ((RSP_0 -64 16),8); ((RSI_0 +64 192),8) SEP ((RSP_0 -64 24),8); ((RSI_0 +64 192),8) SEP ((RSP_0 -64 32),8); ((RSI_0 +64 192),8) SEP ((RSP_0 -64 40),8); ((RSI_0 +64 192),8) SEP ((RSP_0 -64 48),8); ((RSI_0 +64 192),8) SEP ((RSP_0 -64 56),8); ((RSI_0 +64 192),8) SEP ((RSP_0 -64 64),8); ((RSI_0 +64 192),8) SEP ((RSP_0 -64 72),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "1000088da: MOV RDI, QWORD PTR [R14 + 192] 7"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000088e1"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "1000088e1: XOR ESI, ESI 2"
 Post  "RSI = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000088e3"
 Separations ""
 Assertions  ""
 Pre   "RSI = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "1000088e3: XOR EDX, EDX 2"
 Post  "RDX = 0 ; RSI = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000088e5"
 Separations ""
 Assertions  ""
 Pre   "RDX = 0 ; RSI = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "1000088e5: XOR ECX, ECX 2"
 Post  "RCX = 0 ; RDX = 0 ; RSI = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000088e7"
 Separations ""
 Assertions  ""
 Pre   "RCX = 0 ; RDX = 0 ; RSI = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "1000088e7: ExternalCall fun__archive_read_disk_set_matching 5"
 Post  "RAX = bot(fun__archive_read_disk_set_matching) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0"
 FunctionConstraints "PRESERVES fun__archive_read_disk_set_matching {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000088ec"
 Separations "((RSI_0 +64 192),8) SEP (bot(fun____error),4); ((RSI_0 +64 192),8) SEP (RSP_0,8); ((RSI_0 +64 192),8) SEP ([0x10000c010,8]_0,8); ((RSI_0 +64 192),8) SEP (0x10000c010,8); ((RSI_0 +64 192),8) SEP ((RSP_0 -64 8),8); ((RSI_0 +64 192),8) SEP ((RSP_0 -64 16),8); ((RSI_0 +64 192),8) SEP ((RSP_0 -64 24),8); ((RSI_0 +64 192),8) SEP ((RSP_0 -64 32),8); ((RSI_0 +64 192),8) SEP ((RSP_0 -64 40),8); ((RSI_0 +64 192),8) SEP ((RSP_0 -64 48),8); ((RSI_0 +64 192),8) SEP ((RSP_0 -64 56),8); ((RSI_0 +64 192),8) SEP ((RSP_0 -64 64),8); ((RSI_0 +64 192),8) SEP ((RSP_0 -64 72),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_disk_set_matching) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "1000088ec: MOV RDI, QWORD PTR [R14 + 192] 7"
 Post  "RAX = bot(fun__archive_read_disk_set_matching) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000088f3"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_disk_set_matching) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "1000088f3: XOR ESI, ESI 2"
 Post  "RAX = bot(fun__archive_read_disk_set_matching) ; RSI = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000088f5"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_disk_set_matching) ; RSI = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "1000088f5: XOR EDX, EDX 2"
 Post  "RAX = bot(fun__archive_read_disk_set_matching) ; RDX = 0 ; RSI = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000088f7"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_disk_set_matching) ; RDX = 0 ; RSI = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "1000088f7: ExternalCall fun__archive_read_disk_set_metadata_filter_callback 5"
 Post  "RAX = bot(fun__archive_read_disk_set_metadata_filter_callback) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0"
 FunctionConstraints "PRESERVES fun__archive_read_disk_set_metadata_filter_callback {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000088fc"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_disk_set_metadata_filter_callback) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "1000088fc: LEA RBX, [RBP - 48] 4"
 Post  "RAX = bot(fun__archive_read_disk_set_metadata_filter_callback) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008900"
 Separations "((RSP_0 -64 56),8) SEP (bot(fun____error),4); ((RSP_0 -64 56),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 56),8) SEP (0x10000c010,8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 24),4); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 32),4); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 36),4); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 44),4); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 80),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 89),1); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 144),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 180),4); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 185),1); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 192),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 200),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 224),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 232),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 248),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_disk_set_metadata_filter_callback) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "100008900: MOV QWORD PTR [RBX], 0 7"
 Post  "RAX = bot(fun__archive_read_disk_set_metadata_filter_callback) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008907"
 Separations "((RSI_0 +64 200),8) SEP (bot(fun____error),4); ((RSI_0 +64 200),8) SEP (RSP_0,8); ((RSI_0 +64 200),8) SEP ([0x10000c010,8]_0,8); ((RSI_0 +64 200),8) SEP (0x10000c010,8); ((RSI_0 +64 200),8) SEP ((RSP_0 -64 8),8); ((RSI_0 +64 200),8) SEP ((RSP_0 -64 16),8); ((RSI_0 +64 200),8) SEP ((RSP_0 -64 24),8); ((RSI_0 +64 200),8) SEP ((RSP_0 -64 32),8); ((RSI_0 +64 200),8) SEP ((RSP_0 -64 40),8); ((RSI_0 +64 200),8) SEP ((RSP_0 -64 48),8); ((RSI_0 +64 200),8) SEP ((RSP_0 -64 56),8); ((RSI_0 +64 200),8) SEP ((RSP_0 -64 64),8); ((RSI_0 +64 200),8) SEP ((RSP_0 -64 72),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_disk_set_metadata_filter_callback) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "100008907: MOV RDI, QWORD PTR [R14 + 200] 7"
 Post  "RAX = bot(fun__archive_read_disk_set_metadata_filter_callback) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000890e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_disk_set_metadata_filter_callback) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "10000890e: LEA RDX, [RBP - 72] 4"
 Post  "RAX = bot(fun__archive_read_disk_set_metadata_filter_callback) ; RBX = (RSP_0 -64 56) ; RDX = (RSP_0 -64 80) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008912"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_disk_set_metadata_filter_callback) ; RBX = (RSP_0 -64 56) ; RDX = (RSP_0 -64 80) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "100008912: MOV RSI, RBX 3"
 Post  "RAX = bot(fun__archive_read_disk_set_metadata_filter_callback) ; RBX = (RSP_0 -64 56) ; RDX = (RSP_0 -64 80) ; RSI = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008915"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_disk_set_metadata_filter_callback) ; RBX = (RSP_0 -64 56) ; RDX = (RSP_0 -64 80) ; RSI = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "100008915: ExternalCall fun__archive_entry_linkify 5"
 Post  "RAX = bot(fun__archive_entry_linkify) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 FunctionConstraints "PRESERVES fun__archive_entry_linkify {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000891a"
 Separations "((RSP_0 -64 56),8) SEP (bot(fun____error),4); ((RSP_0 -64 56),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 56),8) SEP (0x10000c010,8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 24),4); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 32),4); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 36),4); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 44),4); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 80),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 89),1); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 144),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 180),4); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 185),1); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 192),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 200),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 224),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 232),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 248),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_linkify) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "10000891a: MOV RDI, QWORD PTR [RBX] 3"
 Post  "RAX = bot(fun__archive_entry_linkify) ; RBX = (RSP_0 -64 56) ; RDI = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000891d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_linkify) ; RBX = (RSP_0 -64 56) ; RDI = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "10000891d: TEST RDI, RDI 3"
 Post  "RAX = bot(fun__archive_entry_linkify) ; RBX = (RSP_0 -64 56) ; RDI = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008920"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_linkify) ; RBX = (RSP_0 -64 56) ; RDI = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "100008920: JE 4295002656 6"
 Post  "RAX = bot(fun__archive_entry_linkify) ; RBX = (RSP_0 -64 56) ; RDI = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100008396, blockId == 34 ##
######################################
*)

htriple "ht_1000085ba"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "1000085ba: CMP CL, 47 3"
 Post  "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000085bd"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "1000085bd: JE 4295001691 6"
 Post  "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100008396, blockId == 35 ##
######################################
*)

htriple "ht_1000085e3"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "1000085e3: CMP BYTE PTR [R15 + 1], 47 5"
 Post  "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000085e8"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "1000085e8: JE 4295001592 2"
 Post  "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100008396, blockId == 36 ##
######################################
*)

htriple "ht_1000085c3"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "1000085c3: CMP CL, 45 3"
 Post  "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000085c6"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "1000085c6: JNE 4295001578 2"
 Post  "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100008396, blockId == 37 ##
######################################
*)

htriple "ht_10000865b"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "10000865b: MOV RDI, R14 3"
 Post  "RBX = (RSP_0 -64 56) ; RDI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000865e"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 56) ; RDI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "10000865e: MOV RSI, R13 3"
 Post  "RBX = (RSP_0 -64 56) ; RDI = RSI_0 ; RSI = RDI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008661"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 56) ; RDI = RSI_0 ; RSI = RDI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008661: MOV RDX, R15 3"
 Post  "RBX = (RSP_0 -64 56) ; RDI = RSI_0 ; RSI = RDI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008664"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 56) ; RDI = RSI_0 ; RSI = RDI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008664: ExternalCall fun_0x1000092fb 5"
 Post  "RAX = bot(fun_0x1000092fb) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 FunctionConstraints "PRESERVES fun_0x1000092fb {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008669"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000092fb) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008669: JMP 4295002299 5"
 Post  "RAX = bot(fun_0x1000092fb) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100008396, blockId == 38 ##
######################################
*)

htriple "ht_1000085c8"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "1000085c8: CMP BYTE PTR [R15 + 1], 67 5"
 Post  "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000085cd"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "1000085cd: JNE 4295001578 2"
 Post  "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100008396, blockId == 39 ##
######################################
*)

htriple "ht_1000085ea"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "1000085ea: MOV RDI, R14 3"
 Post  "RBX = (RSP_0 -64 56) ; RDI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000085ed"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 56) ; RDI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "1000085ed: ExternalCall fun_0x10000788f 5"
 Post  "RAX = bot(fun_0x10000788f) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 FunctionConstraints "PRESERVES fun_0x10000788f {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000085f2"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000788f) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "1000085f2: CMP BYTE PTR [R15], 64 4"
 Post  "RAX = bot(fun_0x10000788f) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000085f6"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000788f) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "1000085f6: JNE 4295001691 2"
 Post  "RAX = bot(fun_0x10000788f) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100008396, blockId == 40 ##
######################################
*)

htriple "ht_1000085cf"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "1000085cf: CMP BYTE PTR [R15 + 2], 0 5"
 Post  "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000085d4"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "1000085d4: JE 4295002254 6"
 Post  "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100008396, blockId == 41 ##
######################################
*)

htriple "ht_1000085da"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "1000085da: ADD R15, 2 4"
 Post  "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000085de"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "1000085de: JMP 4295002288 5"
 Post  "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100008396, blockId == 42 ##
######################################
*)

htriple "ht_10000888e"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "10000888e: LEA RCX, [RAX + 8] 4"
 Post  "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008892"
 Separations "((RSI_0 +64 144),8) SEP (bot(fun____error),4); ((RSI_0 +64 144),8) SEP (RSP_0,8); ((RSI_0 +64 144),8) SEP ([0x10000c010,8]_0,8); ((RSI_0 +64 144),8) SEP (0x10000c010,8); ((RSI_0 +64 144),8) SEP ((RSP_0 -64 8),8); ((RSI_0 +64 144),8) SEP ((RSP_0 -64 16),8); ((RSI_0 +64 144),8) SEP ((RSP_0 -64 24),8); ((RSI_0 +64 144),8) SEP ((RSP_0 -64 32),8); ((RSI_0 +64 144),8) SEP ((RSP_0 -64 40),8); ((RSI_0 +64 144),8) SEP ((RSP_0 -64 48),8); ((RSI_0 +64 144),8) SEP ((RSP_0 -64 56),8); ((RSI_0 +64 144),8) SEP ((RSP_0 -64 64),8); ((RSI_0 +64 144),8) SEP ((RSP_0 -64 72),8)"
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008892: MOV QWORD PTR [R14 + 144], RCX 7"
 Post  "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008899"
 Separations ""
 Assertions  "((RAX +64 8),8) SEP (RSP_0,8); ((RAX +64 8),8) SEP ((RSP_0 -64 8),8); ((RAX +64 8),8) SEP ((RSP_0 -64 16),8); ((RAX +64 8),8) SEP ((RSP_0 -64 24),8); ((RAX +64 8),8) SEP ((RSP_0 -64 32),8); ((RAX +64 8),8) SEP ((RSP_0 -64 40),8); ((RAX +64 8),8) SEP ((RSP_0 -64 48),8); ((RAX +64 8),8) SEP ((RSP_0 -64 56),8); ((RAX +64 8),8) SEP ((RSP_0 -64 64),8); ((RAX +64 8),8) SEP ((RSP_0 -64 72),8)"
 Pre   "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008899: MOV R15, QWORD PTR [RAX + 8] 4"
 Post  "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000889d"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "10000889d: TEST R15, R15 3"
 Post  "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000088a0"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "1000088a0: JE 4295002898 6"
 Post  "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100008396, blockId == 43 ##
######################################
*)

htriple "ht_1000085f8"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "1000085f8: INC R15 3"
 Post  "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000085fb"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "1000085fb: MOV RDI, R15 3"
 Post  "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000085fe"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "1000085fe: LEA RSI, [RIP + 10242] 7"
 Post  "RBX = (RSP_0 -64 56) ; RSI = 0x10000ae07 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008605"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 56) ; RSI = 0x10000ae07 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008605: ExternalCall fun__strcmp 5"
 Post  "RAX = bot(fun__strcmp) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 FunctionConstraints "PRESERVES fun__strcmp {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000860a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strcmp) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "10000860a: TEST EAX, EAX 2"
 Post  "RAX = bot(fun__strcmp) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000860c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strcmp) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "10000860c: MOV R13, R15 3"
 Post  "RAX = bot(fun__strcmp) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000860f"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strcmp) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "10000860f: MOV EAX, 0 5"
 Post  "RAX = 0 ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008614"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008614: CMOVE R13, RAX 4"
 Post  "RAX = 0 ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008618"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008618: ExternalCall fun__archive_read_new 5"
 Post  "RAX = bot(fun__archive_read_new) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 FunctionConstraints "PRESERVES fun__archive_read_new {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000861d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_new) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "10000861d: MOV R12, RAX 3"
 Post  "RAX = bot(fun__archive_read_new) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008620"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_new) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008620: MOV RDI, RAX 3"
 Post  "RAX = bot(fun__archive_read_new) ; RBX = (RSP_0 -64 56) ; RDI = bot(fun__archive_read_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008623"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_new) ; RBX = (RSP_0 -64 56) ; RDI = bot(fun__archive_read_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008623: ExternalCall fun__archive_read_support_format_all 5"
 Post  "RAX = bot(fun__archive_read_support_format_all) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 FunctionConstraints "PRESERVES fun__archive_read_support_format_all {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008628"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_support_format_all) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008628: MOV RDI, R12 3"
 Post  "RAX = bot(fun__archive_read_support_format_all) ; RBX = (RSP_0 -64 56) ; RDI = bot(fun__archive_read_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000862b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_support_format_all) ; RBX = (RSP_0 -64 56) ; RDI = bot(fun__archive_read_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "10000862b: ExternalCall fun__archive_read_support_filter_all 5"
 Post  "RAX = bot(fun__archive_read_support_filter_all) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 FunctionConstraints "PRESERVES fun__archive_read_support_filter_all {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008630"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_support_filter_all) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008630: MOV RDI, R12 3"
 Post  "RAX = bot(fun__archive_read_support_filter_all) ; RBX = (RSP_0 -64 56) ; RDI = bot(fun__archive_read_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008633"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_support_filter_all) ; RBX = (RSP_0 -64 56) ; RDI = bot(fun__archive_read_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008633: ExternalCall fun_0x100008eb1 5"
 Post  "RAX = bot(fun_0x100008eb1) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 FunctionConstraints "PRESERVES fun_0x100008eb1 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008638"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100008eb1) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008638: MOV RDI, R12 3"
 Post  "RAX = bot(fun_0x100008eb1) ; RBX = (RSP_0 -64 56) ; RDI = bot(fun__archive_read_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000863b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100008eb1) ; RBX = (RSP_0 -64 56) ; RDI = bot(fun__archive_read_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "10000863b: LEA RSI, [RIP + 14124] 7"
 Post  "RAX = bot(fun_0x100008eb1) ; RBX = (RSP_0 -64 56) ; RDI = bot(fun__archive_read_new) ; RSI = 0x10000bd6e ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008642"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100008eb1) ; RBX = (RSP_0 -64 56) ; RDI = bot(fun__archive_read_new) ; RSI = 0x10000bd6e ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008642: ExternalCall fun__archive_read_set_options 5"
 Post  "RAX = bot(fun__archive_read_set_options) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 FunctionConstraints "PRESERVES fun__archive_read_set_options {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008647"
 Separations "((RSI_0 +64 80),8) SEP (RSP_0,8); ((RSI_0 +64 80),8) SEP (0x10000c010,8); ((RSI_0 +64 80),8) SEP ((RSP_0 -64 8),8); ((RSI_0 +64 80),8) SEP ((RSP_0 -64 16),8); ((RSI_0 +64 80),8) SEP ((RSP_0 -64 24),8); ((RSI_0 +64 80),8) SEP ((RSP_0 -64 32),8); ((RSI_0 +64 80),8) SEP ((RSP_0 -64 40),8); ((RSI_0 +64 80),8) SEP ((RSP_0 -64 48),8); ((RSI_0 +64 80),8) SEP ((RSP_0 -64 56),8); ((RSI_0 +64 80),8) SEP ((RSP_0 -64 64),8); ((RSI_0 +64 80),8) SEP ((RSP_0 -64 72),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_set_options) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008647: MOV RSI, QWORD PTR [R14 + 80] 4"
 Post  "RAX = bot(fun__archive_read_set_options) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000864b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_set_options) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "10000864b: TEST RSI, RSI 3"
 Post  "RAX = bot(fun__archive_read_set_options) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000864e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_set_options) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "10000864e: JE 4295001710 2"
 Post  "RAX = bot(fun__archive_read_set_options) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100008396, blockId == 44 ##
######################################
*)

htriple "ht_100008650"
 Separations "((RSP_0 -64 64),8) SEP (bot(fun____error),4); ((RSP_0 -64 64),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 64),8) SEP (0x10000c010,8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 24),4); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 32),4); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 36),4); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 44),4); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 80),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 89),1); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 144),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 180),4); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 185),1); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 192),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 200),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 224),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 232),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 248),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_set_options) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008650: MOV RDI, QWORD PTR [RBP - 56] 4"
 Post  "RAX = bot(fun__archive_read_set_options) ; RBX = (RSP_0 -64 56) ; RDI = RDI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008654"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_set_options) ; RBX = (RSP_0 -64 56) ; RDI = RDI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008654: ExternalCall fun__archive_read_add_passphrase 5"
 Post  "RAX = bot(fun__archive_read_add_passphrase) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 FunctionConstraints "PRESERVES fun__archive_read_add_passphrase {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008659"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_add_passphrase) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008659: JMP 4295001728 2"
 Post  "RAX = bot(fun__archive_read_add_passphrase) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100008396, blockId == 45 ##
######################################
*)

htriple "ht_10000866e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_set_options) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "10000866e: MOV RDI, R12 3"
 Post  "RAX = bot(fun__archive_read_set_options) ; RBX = (RSP_0 -64 56) ; RDI = bot(fun__archive_read_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008671"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_set_options) ; RBX = (RSP_0 -64 56) ; RDI = bot(fun__archive_read_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008671: MOV RSI, R14 3"
 Post  "RAX = bot(fun__archive_read_set_options) ; RBX = (RSP_0 -64 56) ; RDI = bot(fun__archive_read_new) ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008674"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_set_options) ; RBX = (RSP_0 -64 56) ; RDI = bot(fun__archive_read_new) ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008674: LEA RDX, [RIP - 2474] 7"
 Post  "RAX = bot(fun__archive_read_set_options) ; RBX = (RSP_0 -64 56) ; RDX = 0x100007cd1 ; RDI = bot(fun__archive_read_new) ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000867b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_set_options) ; RBX = (RSP_0 -64 56) ; RDX = 0x100007cd1 ; RDI = bot(fun__archive_read_new) ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "10000867b: ExternalCall fun__archive_read_set_passphrase_callback 5"
 Post  "RAX = bot(fun__archive_read_set_passphrase_callback) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 FunctionConstraints "PRESERVES fun__archive_read_set_passphrase_callback {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100008396, blockId == 46 ##
######################################
*)

htriple "ht_100008680"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008680: TEST EAX, EAX 2"
 Post  "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008682"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008682: JNE 4295002958 6"
 Post  "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100008396, blockId == 47 ##
######################################
*)

htriple "ht_100008688"
 Separations "((RSI_0 +64 24),4) SEP (bot(fun____error),4); ((RSI_0 +64 24),4) SEP (RSP_0,8); ((RSI_0 +64 24),4) SEP ([0x10000c010,8]_0,8); ((RSI_0 +64 24),4) SEP (0x10000c010,8); ((RSI_0 +64 24),4) SEP ((RSP_0 -64 8),8); ((RSI_0 +64 24),4) SEP ((RSP_0 -64 16),8); ((RSI_0 +64 24),4) SEP ((RSP_0 -64 24),8); ((RSI_0 +64 24),4) SEP ((RSP_0 -64 32),8); ((RSI_0 +64 24),4) SEP ((RSP_0 -64 40),8); ((RSI_0 +64 24),4) SEP ((RSP_0 -64 48),8); ((RSI_0 +64 24),4) SEP ((RSP_0 -64 56),8); ((RSI_0 +64 24),4) SEP ((RSP_0 -64 64),8); ((RSI_0 +64 24),4) SEP ((RSP_0 -64 72),8)"
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008688: MOVSXD RDX, DWORD PTR [R14 + 24] 4"
 Post  "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000868c"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "10000868c: MOV RDI, R12 3"
 Post  "RBX = (RSP_0 -64 56) ; RDI = bot(fun__archive_read_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000868f"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 56) ; RDI = bot(fun__archive_read_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "10000868f: MOV RSI, R13 3"
 Post  "RBX = (RSP_0 -64 56) ; RDI = bot(fun__archive_read_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008692"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 56) ; RDI = bot(fun__archive_read_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008692: ExternalCall fun__archive_read_open_filename 5"
 Post  "RAX = bot(fun__archive_read_open_filename) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 FunctionConstraints "PRESERVES fun__archive_read_open_filename {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008697"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_open_filename) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008697: TEST EAX, EAX 2"
 Post  "RAX = bot(fun__archive_read_open_filename) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008699"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_open_filename) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008699: JE 4295001801 2"
 Post  "RAX = bot(fun__archive_read_open_filename) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100008396, blockId == 48 ##
######################################
*)

htriple "ht_100008b4e"
 Separations "((RSP_0 -64 64),8) SEP (bot(fun____error),4); ((RSP_0 -64 64),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 64),8) SEP (0x10000c010,8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 24),4); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 32),4); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 36),4); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 44),4); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 80),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 89),1); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 144),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 180),4); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 185),1); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 192),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 200),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 224),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 232),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 248),8)"
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008b4e: MOV RDI, QWORD PTR [RBP - 56] 4"
 Post  "RBX = (RSP_0 -64 56) ; RDI = RDI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008b52"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 56) ; RDI = RDI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008b52: ExternalCall fun__archive_error_string 5"
 Post  "RAX = bot(fun__archive_error_string) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 FunctionConstraints "PRESERVES fun__archive_error_string {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008b57"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_error_string) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008b57: LEA RDX, [RIP + 11539] 7"
 Post  "RAX = bot(fun__archive_error_string) ; RBX = (RSP_0 -64 56) ; RDX = 0x10000b871 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008b5e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_error_string) ; RBX = (RSP_0 -64 56) ; RDX = 0x10000b871 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008b5e: MOV EDI, 1 5"
 Post  "RAX = bot(fun__archive_error_string) ; RBX = (RSP_0 -64 56) ; RDX = 0x10000b871 ; RDI = 1 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008b63"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_error_string) ; RBX = (RSP_0 -64 56) ; RDX = 0x10000b871 ; RDI = 1 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008b63: XOR ESI, ESI 2"
 Post  "RAX = bot(fun__archive_error_string) ; RBX = (RSP_0 -64 56) ; RDX = 0x10000b871 ; RDI = 1 ; RSI = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008b65"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_error_string) ; RBX = (RSP_0 -64 56) ; RDX = 0x10000b871 ; RDI = 1 ; RSI = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008b65: MOV RCX, RAX 3"
 Post  "RAX = bot(fun__archive_error_string) ; RBX = (RSP_0 -64 56) ; RCX = bot(fun__archive_error_string) ; RDX = 0x10000b871 ; RDI = 1 ; RSI = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008b68"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_error_string) ; RBX = (RSP_0 -64 56) ; RCX = bot(fun__archive_error_string) ; RDX = 0x10000b871 ; RDI = 1 ; RSI = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008b68: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = (RSP_0 -64 56) ; RCX = bot(fun__archive_error_string) ; RDX = 0x10000b871 ; RDI = 1 ; RSI = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008b6a"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = (RSP_0 -64 56) ; RCX = bot(fun__archive_error_string) ; RDX = 0x10000b871 ; RDI = 1 ; RSI = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008b6a: ExternalCall fun_0x100009ac2 5"
 Post  "RAX = bot(fun_0x100009ac2) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 FunctionConstraints "PRESERVES fun_0x100009ac2 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100008396, blockId == 49 ##
######################################
*)

htriple "ht_10000869b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_open_filename) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "10000869b: MOV RDI, R12 3"
 Post  "RAX = bot(fun__archive_read_open_filename) ; RBX = (RSP_0 -64 56) ; RDI = bot(fun__archive_read_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000869e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_open_filename) ; RBX = (RSP_0 -64 56) ; RDI = bot(fun__archive_read_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "10000869e: ExternalCall fun__archive_error_string 5"
 Post  "RAX = bot(fun__archive_error_string) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 FunctionConstraints "PRESERVES fun__archive_error_string {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000086a3"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_error_string) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "1000086a3: XOR EDI, EDI 2"
 Post  "RAX = bot(fun__archive_error_string) ; RBX = (RSP_0 -64 56) ; RDI = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000086a5"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_error_string) ; RBX = (RSP_0 -64 56) ; RDI = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "1000086a5: LEA RSI, [RIP + 12741] 7"
 Post  "RAX = bot(fun__archive_error_string) ; RBX = (RSP_0 -64 56) ; RDI = 0 ; RSI = 0x10000b871 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000086ac"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_error_string) ; RBX = (RSP_0 -64 56) ; RDI = 0 ; RSI = 0x10000b871 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "1000086ac: MOV RDX, RAX 3"
 Post  "RAX = bot(fun__archive_error_string) ; RBX = (RSP_0 -64 56) ; RDX = bot(fun__archive_error_string) ; RDI = 0 ; RSI = 0x10000b871 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000086af"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_error_string) ; RBX = (RSP_0 -64 56) ; RDX = bot(fun__archive_error_string) ; RDI = 0 ; RSI = 0x10000b871 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "1000086af: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = (RSP_0 -64 56) ; RDX = bot(fun__archive_error_string) ; RDI = 0 ; RSI = 0x10000b871 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000086b1"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = (RSP_0 -64 56) ; RDX = bot(fun__archive_error_string) ; RDI = 0 ; RSI = 0x10000b871 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "1000086b1: ExternalCall fun_0x1000099ad 5"
 Post  "RAX = bot(fun_0x1000099ad) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 FunctionConstraints "PRESERVES fun_0x1000099ad {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000086b6"
 Separations "((RSP_0 -64 72),8) SEP (bot(fun____error),4); ((RSP_0 -64 72),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 72),8) SEP (0x10000c010,8); ((RSP_0 -64 72),8) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 72),8) SEP ((RSI_0 +64 24),4); ((RSP_0 -64 72),8) SEP ((RSI_0 +64 32),4); ((RSP_0 -64 72),8) SEP ((RSI_0 +64 36),4); ((RSP_0 -64 72),8) SEP ((RSI_0 +64 44),4); ((RSP_0 -64 72),8) SEP ((RSI_0 +64 80),8); ((RSP_0 -64 72),8) SEP ((RSI_0 +64 89),1); ((RSP_0 -64 72),8) SEP ((RSI_0 +64 144),8); ((RSP_0 -64 72),8) SEP ((RSI_0 +64 180),4); ((RSP_0 -64 72),8) SEP ((RSI_0 +64 185),1); ((RSP_0 -64 72),8) SEP ((RSI_0 +64 192),8); ((RSP_0 -64 72),8) SEP ((RSI_0 +64 200),8); ((RSP_0 -64 72),8) SEP ((RSI_0 +64 224),8); ((RSP_0 -64 72),8) SEP ((RSI_0 +64 232),8); ((RSP_0 -64 72),8) SEP ((RSI_0 +64 248),8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000099ad) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "1000086b6: MOV RAX, QWORD PTR [RBP - 64] 4"
 Post  "RAX = (RSI_0 +64 180) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000086ba"
 Separations "((RSI_0 +64 180),4) SEP (bot(fun____error),4); ((RSI_0 +64 180),4) SEP (RSP_0,8); ((RSI_0 +64 180),4) SEP ([0x10000c010,8]_0,8); ((RSI_0 +64 180),4) SEP (0x10000c010,8); ((RSI_0 +64 180),4) SEP ((RSP_0 -64 8),8); ((RSI_0 +64 180),4) SEP ((RSP_0 -64 16),8); ((RSI_0 +64 180),4) SEP ((RSP_0 -64 24),8); ((RSI_0 +64 180),4) SEP ((RSP_0 -64 32),8); ((RSI_0 +64 180),4) SEP ((RSP_0 -64 40),8); ((RSI_0 +64 180),4) SEP ((RSP_0 -64 48),8); ((RSI_0 +64 180),4) SEP ((RSP_0 -64 56),8); ((RSI_0 +64 180),4) SEP ((RSP_0 -64 64),8); ((RSI_0 +64 180),4) SEP ((RSP_0 -64 72),8)"
 Assertions  ""
 Pre   "RAX = (RSI_0 +64 180) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "1000086ba: MOV DWORD PTR [RAX], 1 6"
 Post  "RAX = (RSI_0 +64 180) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 180),4] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000086c0"
 Separations "((RSP_0 -64 64),8) SEP (bot(fun____error),4); ((RSP_0 -64 64),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 64),8) SEP (0x10000c010,8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 24),4); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 32),4); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 36),4); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 44),4); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 80),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 89),1); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 144),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 180),4); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 185),1); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 192),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 200),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 224),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 232),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 248),8)"
 Assertions  ""
 Pre   "RAX = (RSI_0 +64 180) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 180),4] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "1000086c0: MOV R13, QWORD PTR [RBP - 56] 4"
 Post  "RAX = (RSI_0 +64 180) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 180),4] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000086c4"
 Separations ""
 Assertions  ""
 Pre   "RAX = (RSI_0 +64 180) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 180),4] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "1000086c4: JMP 4295002299 5"
 Post  "RAX = (RSI_0 +64 180) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 180),4] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100008396, blockId == 50 ##
######################################
*)

htriple "ht_1000086c9"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_open_filename) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "1000086c9: MOV RDI, R12 3"
 Post  "RAX = bot(fun__archive_read_open_filename) ; RBX = (RSP_0 -64 56) ; RDI = bot(fun__archive_read_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000086cc"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_open_filename) ; RBX = (RSP_0 -64 56) ; RDI = bot(fun__archive_read_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "1000086cc: MOV RSI, RBX 3"
 Post  "RAX = bot(fun__archive_read_open_filename) ; RBX = (RSP_0 -64 56) ; RDI = bot(fun__archive_read_new) ; RSI = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000086cf"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_open_filename) ; RBX = (RSP_0 -64 56) ; RDI = bot(fun__archive_read_new) ; RSI = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "1000086cf: ExternalCall fun__archive_read_next_header 5"
 Post  "RAX = bot(fun__archive_read_next_header) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 FunctionConstraints "PRESERVES fun__archive_read_next_header {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000086d4"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_next_header) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "1000086d4: TEST EAX, EAX 2"
 Post  "RAX = bot(fun__archive_read_next_header) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000086d6"
 Separations "((RSP_0 -64 64),8) SEP (bot(fun____error),4); ((RSP_0 -64 64),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 64),8) SEP (0x10000c010,8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 24),4); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 32),4); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 36),4); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 44),4); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 80),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 89),1); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 144),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 180),4); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 185),1); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 192),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 200),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 224),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 232),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 248),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_next_header) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "1000086d6: MOV R13, QWORD PTR [RBP - 56] 4"
 Post  "RAX = bot(fun__archive_read_next_header) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000086da"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_next_header) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "1000086da: JNE 4295002235 6"
 Post  "RAX = bot(fun__archive_read_next_header) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100008396, blockId == 51 ##
######################################
*)

htriple "ht_1000088bb"
 Separations "((RSI_0 +64 144),8) SEP (bot(fun____error),4); ((RSI_0 +64 144),8) SEP (RSP_0,8); ((RSI_0 +64 144),8) SEP ([0x10000c010,8]_0,8); ((RSI_0 +64 144),8) SEP (0x10000c010,8); ((RSI_0 +64 144),8) SEP ((RSP_0 -64 8),8); ((RSI_0 +64 144),8) SEP ((RSP_0 -64 16),8); ((RSI_0 +64 144),8) SEP ((RSP_0 -64 24),8); ((RSI_0 +64 144),8) SEP ((RSP_0 -64 32),8); ((RSI_0 +64 144),8) SEP ((RSP_0 -64 40),8); ((RSI_0 +64 144),8) SEP ((RSP_0 -64 48),8); ((RSI_0 +64 144),8) SEP ((RSP_0 -64 56),8); ((RSI_0 +64 144),8) SEP ((RSP_0 -64 64),8); ((RSI_0 +64 144),8) SEP ((RSP_0 -64 72),8)"
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "1000088bb: MOV RCX, QWORD PTR [R14 + 144] 7"
 Post  "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000088c2"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "1000088c2: LEA RAX, [RCX + 8] 4"
 Post  "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000088c6"
 Separations "((RSI_0 +64 144),8) SEP (bot(fun____error),4); ((RSI_0 +64 144),8) SEP (RSP_0,8); ((RSI_0 +64 144),8) SEP ([0x10000c010,8]_0,8); ((RSI_0 +64 144),8) SEP (0x10000c010,8); ((RSI_0 +64 144),8) SEP ((RSP_0 -64 8),8); ((RSI_0 +64 144),8) SEP ((RSP_0 -64 16),8); ((RSI_0 +64 144),8) SEP ((RSP_0 -64 24),8); ((RSI_0 +64 144),8) SEP ((RSP_0 -64 32),8); ((RSI_0 +64 144),8) SEP ((RSP_0 -64 40),8); ((RSI_0 +64 144),8) SEP ((RSP_0 -64 48),8); ((RSI_0 +64 144),8) SEP ((RSP_0 -64 56),8); ((RSI_0 +64 144),8) SEP ((RSP_0 -64 64),8); ((RSI_0 +64 144),8) SEP ((RSP_0 -64 72),8)"
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "1000088c6: MOV QWORD PTR [R14 + 144], RAX 7"
 Post  "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000088cd"
 Separations ""
 Assertions  "((RCX +64 8),8) SEP (RSP_0,8); ((RCX +64 8),8) SEP ((RSP_0 -64 8),8); ((RCX +64 8),8) SEP ((RSP_0 -64 16),8); ((RCX +64 8),8) SEP ((RSP_0 -64 24),8); ((RCX +64 8),8) SEP ((RSP_0 -64 32),8); ((RCX +64 8),8) SEP ((RSP_0 -64 40),8); ((RCX +64 8),8) SEP ((RSP_0 -64 48),8); ((RCX +64 8),8) SEP ((RSP_0 -64 56),8); ((RCX +64 8),8) SEP ((RSP_0 -64 64),8); ((RCX +64 8),8) SEP ((RSP_0 -64 72),8)"
 Pre   "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "1000088cd: MOV R15, QWORD PTR [RCX + 8] 4"
 Post  "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000088d1"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "1000088d1: TEST R15, R15 3"
 Post  "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000088d4"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "1000088d4: JNE 4295001522 6"
 Post  "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100008396, blockId == 52 ##
######################################
*)

htriple "ht_1000086e0"
 Separations "((RSI_0 +64 248),8) SEP (RSP_0,8); ((RSI_0 +64 248),8) SEP (0x10000c010,8); ((RSI_0 +64 248),8) SEP ((RSP_0 -64 8),8); ((RSI_0 +64 248),8) SEP ((RSP_0 -64 16),8); ((RSI_0 +64 248),8) SEP ((RSP_0 -64 24),8); ((RSI_0 +64 248),8) SEP ((RSP_0 -64 32),8); ((RSI_0 +64 248),8) SEP ((RSP_0 -64 40),8); ((RSI_0 +64 248),8) SEP ((RSP_0 -64 48),8); ((RSI_0 +64 248),8) SEP ((RSP_0 -64 56),8); ((RSI_0 +64 248),8) SEP ((RSP_0 -64 64),8); ((RSI_0 +64 248),8) SEP ((RSP_0 -64 72),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_next_header) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "1000086e0: MOV RDI, QWORD PTR [R14 + 248] 7"
 Post  "RAX = bot(fun__archive_read_next_header) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000086e7"
 Separations "((RSP_0 -64 56),8) SEP (bot(fun____error),4); ((RSP_0 -64 56),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 56),8) SEP (0x10000c010,8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 24),4); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 32),4); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 36),4); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 44),4); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 80),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 89),1); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 144),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 180),4); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 185),1); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 192),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 200),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 224),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 232),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 248),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_next_header) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "1000086e7: MOV RSI, QWORD PTR [RBP - 48] 4"
 Post  "RAX = bot(fun__archive_read_next_header) ; RBX = (RSP_0 -64 56) ; RSI = [(RSP_0 -64 56),8]_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000086eb"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_next_header) ; RBX = (RSP_0 -64 56) ; RSI = [(RSP_0 -64 56),8]_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "1000086eb: ExternalCall fun__archive_match_excluded 5"
 Post  "RAX = bot(fun__archive_match_excluded) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 FunctionConstraints "PRESERVES fun__archive_match_excluded {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000086f0"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_match_excluded) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "1000086f0: TEST EAX, EAX 2"
 Post  "RAX = bot(fun__archive_match_excluded) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000086f2"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_match_excluded) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "1000086f2: JNE 4295002216 6"
 Post  "RAX = bot(fun__archive_match_excluded) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100008396, blockId == 53 ##
######################################
*)

htriple "ht_10000887b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_next_header) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "10000887b: CMP EAX, 1 3"
 Post  "RAX = bot(fun__archive_read_next_header) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000887e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_next_header) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "10000887e: JA 4295002845 6"
 Post  "RAX = bot(fun__archive_read_next_header) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100008396, blockId == 54 ##
######################################
*)

htriple "ht_1000086f8"
 Separations "((RSI_0 +64 36),4) SEP (RSP_0,8); ((RSI_0 +64 36),4) SEP (0x10000c010,8); ((RSI_0 +64 36),4) SEP ((RSP_0 -64 8),8); ((RSI_0 +64 36),4) SEP ((RSP_0 -64 16),8); ((RSI_0 +64 36),4) SEP ((RSP_0 -64 24),8); ((RSI_0 +64 36),4) SEP ((RSP_0 -64 32),8); ((RSI_0 +64 36),4) SEP ((RSP_0 -64 40),8); ((RSI_0 +64 36),4) SEP ((RSP_0 -64 48),8); ((RSI_0 +64 36),4) SEP ((RSP_0 -64 56),8); ((RSI_0 +64 36),4) SEP ((RSP_0 -64 64),8); ((RSI_0 +64 36),4) SEP ((RSP_0 -64 72),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__archive_match_excluded) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "1000086f8: TEST BYTE PTR [R14 + 36], 32 5"
 Post  "RAX = bot(fun__archive_match_excluded) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000086fd"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_match_excluded) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "1000086fd: JE 4295001889 2"
 Post  "RAX = bot(fun__archive_match_excluded) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100008396, blockId == 55 ##
######################################
*)

htriple "ht_100008868"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008868: MOV RDI, R12 3"
 Post  "RBX = (RSP_0 -64 56) ; RDI = bot(fun__archive_read_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000886b"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 56) ; RDI = bot(fun__archive_read_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "10000886b: MOV RSI, RBX 3"
 Post  "RBX = (RSP_0 -64 56) ; RDI = bot(fun__archive_read_new) ; RSI = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000886e"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 56) ; RDI = bot(fun__archive_read_new) ; RSI = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "10000886e: ExternalCall fun__archive_read_next_header 5"
 Post  "RAX = bot(fun__archive_read_next_header) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 FunctionConstraints "PRESERVES fun__archive_read_next_header {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008873"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_next_header) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008873: TEST EAX, EAX 2"
 Post  "RAX = bot(fun__archive_read_next_header) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008875"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_next_header) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008875: JE 4295001824 6"
 Post  "RAX = bot(fun__archive_read_next_header) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100008396, blockId == 56 ##
######################################
*)

htriple "ht_1000086ff"
 Separations "((RSP_0 -64 56),8) SEP (bot(fun____error),4); ((RSP_0 -64 56),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 56),8) SEP (0x10000c010,8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 24),4); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 32),4); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 36),4); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 44),4); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 80),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 89),1); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 144),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 180),4); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 185),1); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 192),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 200),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 224),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 232),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 248),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__archive_match_excluded) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "1000086ff: MOV RDI, QWORD PTR [RBP - 48] 4"
 Post  "RAX = bot(fun__archive_match_excluded) ; RBX = (RSP_0 -64 56) ; RDI = [(RSP_0 -64 56),8]_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008703"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_match_excluded) ; RBX = (RSP_0 -64 56) ; RDI = [(RSP_0 -64 56),8]_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008703: ExternalCall fun__archive_entry_pathname 5"
 Post  "RAX = bot(fun__archive_entry_pathname) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 FunctionConstraints "PRESERVES fun__archive_entry_pathname {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008708"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_pathname) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008708: LEA RDI, [RIP + 13962] 7"
 Post  "RAX = bot(fun__archive_entry_pathname) ; RBX = (RSP_0 -64 56) ; RDI = 0x10000bd99 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000870f"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_pathname) ; RBX = (RSP_0 -64 56) ; RDI = 0x10000bd99 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "10000870f: MOV RSI, RAX 3"
 Post  "RAX = bot(fun__archive_entry_pathname) ; RBX = (RSP_0 -64 56) ; RDI = 0x10000bd99 ; RSI = bot(fun__archive_entry_pathname) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008712"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_pathname) ; RBX = (RSP_0 -64 56) ; RDI = 0x10000bd99 ; RSI = bot(fun__archive_entry_pathname) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008712: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = (RSP_0 -64 56) ; RDI = 0x10000bd99 ; RSI = bot(fun__archive_entry_pathname) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008714"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = (RSP_0 -64 56) ; RDI = 0x10000bd99 ; RSI = bot(fun__archive_entry_pathname) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008714: ExternalCall fun_0x10000761c 5"
 Post  "RAX = bot(fun_0x10000761c) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 FunctionConstraints "PRESERVES fun_0x10000761c {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008719"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000761c) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008719: TEST EAX, EAX 2"
 Post  "RAX = bot(fun_0x10000761c) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000871b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000761c) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "10000871b: JE 4295002216 6"
 Post  "RAX = bot(fun_0x10000761c) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100008396, blockId == 57 ##
######################################
*)

htriple "ht_100008721"
 Separations "((RSI_0 +64 32),4) SEP (RSP_0,8); ((RSI_0 +64 32),4) SEP (0x10000c010,8); ((RSI_0 +64 32),4) SEP ((RSP_0 -64 8),8); ((RSI_0 +64 32),4) SEP ((RSP_0 -64 16),8); ((RSI_0 +64 32),4) SEP ((RSP_0 -64 24),8); ((RSI_0 +64 32),4) SEP ((RSP_0 -64 32),8); ((RSI_0 +64 32),4) SEP ((RSP_0 -64 40),8); ((RSI_0 +64 32),4) SEP ((RSP_0 -64 48),8); ((RSI_0 +64 32),4) SEP ((RSP_0 -64 56),8); ((RSI_0 +64 32),4) SEP ((RSP_0 -64 64),8); ((RSI_0 +64 32),4) SEP ((RSP_0 -64 72),8)"
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008721: MOV EAX, DWORD PTR [R14 + 32] 4"
 Post  "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008725"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008725: CMP EAX, 2 3"
 Post  "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008728"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008728: JL 4295001939 2"
 Post  "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100008396, blockId == 58 ##
######################################
*)

htriple "ht_10000872a"
 Separations "(0x10000c010,8) SEP (bot(fun____error),4); (0x10000c010,8) SEP (RSP_0,8); (0x10000c010,8) SEP ([0x10000c010,8]_0,8); (0x10000c010,8) SEP ((RSI_0 +64 16),8); (0x10000c010,8) SEP ((RSI_0 +64 24),4); (0x10000c010,8) SEP ((RSI_0 +64 32),4); (0x10000c010,8) SEP ((RSI_0 +64 36),4); (0x10000c010,8) SEP ((RSI_0 +64 44),4); (0x10000c010,8) SEP ((RSI_0 +64 80),8); (0x10000c010,8) SEP ((RSI_0 +64 89),1); (0x10000c010,8) SEP ((RSI_0 +64 144),8); (0x10000c010,8) SEP ((RSI_0 +64 180),4); (0x10000c010,8) SEP ((RSI_0 +64 185),1); (0x10000c010,8) SEP ((RSI_0 +64 192),8); (0x10000c010,8) SEP ((RSI_0 +64 200),8); (0x10000c010,8) SEP ((RSI_0 +64 224),8); (0x10000c010,8) SEP ((RSI_0 +64 232),8); (0x10000c010,8) SEP ((RSI_0 +64 248),8); (0x10000c010,8) SEP ((RSP_0 -64 8),8); (0x10000c010,8) SEP ((RSP_0 -64 16),8); (0x10000c010,8) SEP ((RSP_0 -64 24),8); (0x10000c010,8) SEP ((RSP_0 -64 32),8); (0x10000c010,8) SEP ((RSP_0 -64 40),8); (0x10000c010,8) SEP ((RSP_0 -64 48),8); (0x10000c010,8) SEP ((RSP_0 -64 56),8); (0x10000c010,8) SEP ((RSP_0 -64 64),8); (0x10000c010,8) SEP ((RSP_0 -64 72),8)"
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "10000872a: MOV RBX, QWORD PTR [RIP + 14559] 7"
 Post  "RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008731"
 Separations "([0x10000c010,8]_0,8) SEP (RSP_0,8); ([0x10000c010,8]_0,8) SEP (0x10000c010,8); ([0x10000c010,8]_0,8) SEP ((RSI_0 +64 24),4); ([0x10000c010,8]_0,8) SEP ((RSI_0 +64 144),8); ([0x10000c010,8]_0,8) SEP ((RSI_0 +64 180),4); ([0x10000c010,8]_0,8) SEP ((RSI_0 +64 185),1); ([0x10000c010,8]_0,8) SEP ((RSI_0 +64 192),8); ([0x10000c010,8]_0,8) SEP ((RSI_0 +64 200),8); ([0x10000c010,8]_0,8) SEP ((RSI_0 +64 224),8); ([0x10000c010,8]_0,8) SEP ((RSI_0 +64 232),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 8),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 16),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 24),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 32),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 40),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 48),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 56),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 64),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 72),8)"
 Assertions  ""
 Pre   "RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008731: MOV RDI, QWORD PTR [RBX] 3"
 Post  "RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008734"
 Separations ""
 Assertions  ""
 Pre   "RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008734: LEA RSI, [RIP + 13928] 7"
 Post  "RBX = [0x10000c010,8]_0 ; RSI = 0x10000bda3 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000873b"
 Separations ""
 Assertions  ""
 Pre   "RBX = [0x10000c010,8]_0 ; RSI = 0x10000bda3 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "10000873b: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = [0x10000c010,8]_0 ; RSI = 0x10000bda3 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000873d"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = [0x10000c010,8]_0 ; RSI = 0x10000bda3 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "10000873d: ExternalCall fun_0x1000071a0 5"
 Post  "RAX = bot(fun_0x1000071a0) ; RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 FunctionConstraints "PRESERVES fun_0x1000071a0 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008742"
 Separations "([0x10000c010,8]_0,8) SEP (RSP_0,8); ([0x10000c010,8]_0,8) SEP (0x10000c010,8); ([0x10000c010,8]_0,8) SEP ((RSI_0 +64 24),4); ([0x10000c010,8]_0,8) SEP ((RSI_0 +64 144),8); ([0x10000c010,8]_0,8) SEP ((RSI_0 +64 180),4); ([0x10000c010,8]_0,8) SEP ((RSI_0 +64 185),1); ([0x10000c010,8]_0,8) SEP ((RSI_0 +64 192),8); ([0x10000c010,8]_0,8) SEP ((RSI_0 +64 200),8); ([0x10000c010,8]_0,8) SEP ((RSI_0 +64 224),8); ([0x10000c010,8]_0,8) SEP ((RSI_0 +64 232),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 8),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 16),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 24),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 32),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 40),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 48),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 56),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 64),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 72),8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000071a0) ; RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008742: MOV RSI, QWORD PTR [RBX] 3"
 Post  "RAX = bot(fun_0x1000071a0) ; RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008745"
 Separations "((RSP_0 -64 56),8) SEP (bot(fun____error),4); ((RSP_0 -64 56),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 56),8) SEP (0x10000c010,8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 24),4); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 32),4); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 36),4); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 44),4); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 80),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 89),1); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 144),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 180),4); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 185),1); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 192),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 200),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 224),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 232),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 248),8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000071a0) ; RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008745: MOV RDX, QWORD PTR [RBP - 48] 4"
 Post  "RAX = bot(fun_0x1000071a0) ; RBX = [0x10000c010,8]_0 ; RDX = [(RSP_0 -64 56),8]_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008749"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000071a0) ; RBX = [0x10000c010,8]_0 ; RDX = [(RSP_0 -64 56),8]_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008749: MOV RDI, R14 3"
 Post  "RAX = bot(fun_0x1000071a0) ; RBX = [0x10000c010,8]_0 ; RDX = [(RSP_0 -64 56),8]_0 ; RDI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000874c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000071a0) ; RBX = [0x10000c010,8]_0 ; RDX = [(RSP_0 -64 56),8]_0 ; RDI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "10000874c: ExternalCall fun_0x100007d57 5"
 Post  "RAX = bot(fun_0x100007d57) ; RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 FunctionConstraints "PRESERVES fun_0x100007d57 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008751"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100007d57) ; RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008751: JMP 4295001983 2"
 Post  "RAX = bot(fun_0x100007d57) ; RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100008396, blockId == 59 ##
######################################
*)

htriple "ht_100008753"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008753: CMP EAX, 1 3"
 Post  "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008756"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008756: JNE 4295001983 2"
 Post  "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100008396, blockId == 60 ##
######################################
*)

htriple "ht_100008758"
 Separations "(0x10000c010,8) SEP (bot(fun____error),4); (0x10000c010,8) SEP (RSP_0,8); (0x10000c010,8) SEP ([0x10000c010,8]_0,8); (0x10000c010,8) SEP ((RSI_0 +64 16),8); (0x10000c010,8) SEP ((RSI_0 +64 24),4); (0x10000c010,8) SEP ((RSI_0 +64 32),4); (0x10000c010,8) SEP ((RSI_0 +64 36),4); (0x10000c010,8) SEP ((RSI_0 +64 44),4); (0x10000c010,8) SEP ((RSI_0 +64 80),8); (0x10000c010,8) SEP ((RSI_0 +64 89),1); (0x10000c010,8) SEP ((RSI_0 +64 144),8); (0x10000c010,8) SEP ((RSI_0 +64 180),4); (0x10000c010,8) SEP ((RSI_0 +64 185),1); (0x10000c010,8) SEP ((RSI_0 +64 192),8); (0x10000c010,8) SEP ((RSI_0 +64 200),8); (0x10000c010,8) SEP ((RSI_0 +64 224),8); (0x10000c010,8) SEP ((RSI_0 +64 232),8); (0x10000c010,8) SEP ((RSI_0 +64 248),8); (0x10000c010,8) SEP ((RSP_0 -64 8),8); (0x10000c010,8) SEP ((RSP_0 -64 16),8); (0x10000c010,8) SEP ((RSP_0 -64 24),8); (0x10000c010,8) SEP ((RSP_0 -64 32),8); (0x10000c010,8) SEP ((RSP_0 -64 40),8); (0x10000c010,8) SEP ((RSP_0 -64 48),8); (0x10000c010,8) SEP ((RSP_0 -64 56),8); (0x10000c010,8) SEP ((RSP_0 -64 64),8); (0x10000c010,8) SEP ((RSP_0 -64 72),8)"
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008758: MOV RAX, QWORD PTR [RIP + 14513] 7"
 Post  "RAX = [0x10000c010,8]_0 ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000875f"
 Separations "([0x10000c010,8]_0,8) SEP (RSP_0,8); ([0x10000c010,8]_0,8) SEP (0x10000c010,8); ([0x10000c010,8]_0,8) SEP ((RSI_0 +64 24),4); ([0x10000c010,8]_0,8) SEP ((RSI_0 +64 144),8); ([0x10000c010,8]_0,8) SEP ((RSI_0 +64 180),4); ([0x10000c010,8]_0,8) SEP ((RSI_0 +64 185),1); ([0x10000c010,8]_0,8) SEP ((RSI_0 +64 192),8); ([0x10000c010,8]_0,8) SEP ((RSI_0 +64 200),8); ([0x10000c010,8]_0,8) SEP ((RSI_0 +64 224),8); ([0x10000c010,8]_0,8) SEP ((RSI_0 +64 232),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 8),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 16),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 24),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 32),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 40),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 48),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 56),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 64),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 72),8)"
 Assertions  ""
 Pre   "RAX = [0x10000c010,8]_0 ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "10000875f: MOV RBX, QWORD PTR [RAX] 3"
 Post  "RAX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008762"
 Separations "((RSP_0 -64 56),8) SEP (bot(fun____error),4); ((RSP_0 -64 56),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 56),8) SEP (0x10000c010,8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 24),4); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 32),4); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 36),4); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 44),4); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 80),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 89),1); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 144),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 180),4); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 185),1); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 192),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 200),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 224),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 232),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 248),8)"
 Assertions  ""
 Pre   "RAX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008762: MOV RDI, QWORD PTR [RBP - 48] 4"
 Post  "RAX = [0x10000c010,8]_0 ; RDI = [(RSP_0 -64 56),8]_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008766"
 Separations ""
 Assertions  ""
 Pre   "RAX = [0x10000c010,8]_0 ; RDI = [(RSP_0 -64 56),8]_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008766: ExternalCall fun__archive_entry_pathname 5"
 Post  "RAX = bot(fun__archive_entry_pathname) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 FunctionConstraints "PRESERVES fun__archive_entry_pathname {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000876b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_pathname) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "10000876b: MOV RDI, RBX 3"
 Post  "RAX = bot(fun__archive_entry_pathname) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000876e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_pathname) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "10000876e: LEA RSI, [RIP + 13873] 7"
 Post  "RAX = bot(fun__archive_entry_pathname) ; RSI = 0x10000bda6 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008775"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_pathname) ; RSI = 0x10000bda6 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008775: MOV RDX, RAX 3"
 Post  "RAX = bot(fun__archive_entry_pathname) ; RDX = bot(fun__archive_entry_pathname) ; RSI = 0x10000bda6 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008778"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_pathname) ; RDX = bot(fun__archive_entry_pathname) ; RSI = 0x10000bda6 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008778: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RDX = bot(fun__archive_entry_pathname) ; RSI = 0x10000bda6 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000877a"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RDX = bot(fun__archive_entry_pathname) ; RSI = 0x10000bda6 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "10000877a: ExternalCall fun_0x1000071a0 5"
 Post  "RAX = bot(fun_0x1000071a0) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 FunctionConstraints "PRESERVES fun_0x1000071a0 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100008396, blockId == 61 ##
######################################
*)

htriple "ht_10000877f"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "10000877f: ExternalCall fun_0x1000047b8 5"
 Post  "RAX = bot(fun_0x1000047b8) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 FunctionConstraints "PRESERVES fun_0x1000047b8 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008784"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000047b8) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008784: TEST EAX, EAX 2"
 Post  "RAX = bot(fun_0x1000047b8) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008786"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000047b8) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008786: JE 4295002009 2"
 Post  "RAX = bot(fun_0x1000047b8) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100008396, blockId == 62 ##
######################################
*)

htriple "ht_100008788"
 Separations "((RSP_0 -64 56),8) SEP (bot(fun____error),4); ((RSP_0 -64 56),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 56),8) SEP (0x10000c010,8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 24),4); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 32),4); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 36),4); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 44),4); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 80),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 89),1); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 144),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 180),4); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 185),1); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 192),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 200),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 224),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 232),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 248),8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000047b8) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008788: MOV RDX, QWORD PTR [RBP - 48] 4"
 Post  "RAX = bot(fun_0x1000047b8) ; RDX = [(RSP_0 -64 56),8]_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000878c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000047b8) ; RDX = [(RSP_0 -64 56),8]_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "10000878c: MOV RDI, R14 3"
 Post  "RAX = bot(fun_0x1000047b8) ; RDX = [(RSP_0 -64 56),8]_0 ; RDI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000878f"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000047b8) ; RDX = [(RSP_0 -64 56),8]_0 ; RDI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "10000878f: MOV RSI, R13 3"
 Post  "RAX = bot(fun_0x1000047b8) ; RDX = [(RSP_0 -64 56),8]_0 ; RDI = RSI_0 ; RSI = RDI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008792"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000047b8) ; RDX = [(RSP_0 -64 56),8]_0 ; RDI = RSI_0 ; RSI = RDI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008792: XOR ECX, ECX 2"
 Post  "RAX = bot(fun_0x1000047b8) ; RCX = 0 ; RDX = [(RSP_0 -64 56),8]_0 ; RDI = RSI_0 ; RSI = RDI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008794"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000047b8) ; RCX = 0 ; RDX = [(RSP_0 -64 56),8]_0 ; RDI = RSI_0 ; RSI = RDI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008794: ExternalCall fun_0x1000096ac 5"
 Post  "RAX = bot(fun_0x1000096ac) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 FunctionConstraints "PRESERVES fun_0x1000096ac {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100008396, blockId == 63 ##
######################################
*)

htriple "ht_100008799"
 Separations "((RSP_0 -64 56),8) SEP (bot(fun____error),4); ((RSP_0 -64 56),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 56),8) SEP (0x10000c010,8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 24),4); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 32),4); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 36),4); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 44),4); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 80),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 89),1); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 144),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 180),4); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 185),1); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 192),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 200),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 224),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 232),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 248),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008799: MOV RSI, QWORD PTR [RBP - 48] 4"
 Post  "RSI = [(RSP_0 -64 56),8]_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000879d"
 Separations ""
 Assertions  ""
 Pre   "RSI = [(RSP_0 -64 56),8]_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "10000879d: MOV RDI, R13 3"
 Post  "RDI = RDI_0 ; RSI = [(RSP_0 -64 56),8]_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000087a0"
 Separations ""
 Assertions  ""
 Pre   "RDI = RDI_0 ; RSI = [(RSP_0 -64 56),8]_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "1000087a0: ExternalCall fun__archive_write_header 5"
 Post  "RAX = bot(fun__archive_write_header) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 FunctionConstraints "PRESERVES fun__archive_write_header {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000087a5"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_write_header) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "1000087a5: TEST EAX, EAX 2"
 Post  "RAX = bot(fun__archive_write_header) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000087a7"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_write_header) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "1000087a7: JE 4295002136 2"
 Post  "RAX = bot(fun__archive_write_header) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100008396, blockId == 64 ##
######################################
*)

htriple "ht_1000087a9"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_write_header) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "1000087a9: MOV EBX, EAX 2"
 Post  "RAX = bot(fun__archive_write_header) ; RBX = b32(bot(fun__archive_write_header)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000087ab"
 Separations "((RSI_0 +64 32),4) SEP (RSP_0,8); ((RSI_0 +64 32),4) SEP (0x10000c010,8); ((RSI_0 +64 32),4) SEP ((RSP_0 -64 8),8); ((RSI_0 +64 32),4) SEP ((RSP_0 -64 16),8); ((RSI_0 +64 32),4) SEP ((RSP_0 -64 24),8); ((RSI_0 +64 32),4) SEP ((RSP_0 -64 32),8); ((RSI_0 +64 32),4) SEP ((RSP_0 -64 40),8); ((RSI_0 +64 32),4) SEP ((RSP_0 -64 48),8); ((RSI_0 +64 32),4) SEP ((RSP_0 -64 56),8); ((RSI_0 +64 32),4) SEP ((RSP_0 -64 64),8); ((RSI_0 +64 32),4) SEP ((RSP_0 -64 72),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__archive_write_header) ; RBX = b32(bot(fun__archive_write_header)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "1000087ab: CMP DWORD PTR [R14 + 32], 0 5"
 Post  "RAX = bot(fun__archive_write_header) ; RBX = b32(bot(fun__archive_write_header)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000087b0"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_write_header) ; RBX = b32(bot(fun__archive_write_header)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "1000087b0: JE 4295002075 2"
 Post  "RAX = bot(fun__archive_write_header) ; RBX = b32(bot(fun__archive_write_header)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100008396, blockId == 65 ##
######################################
*)

htriple "ht_100008818"
 Separations "((RSP_0 -64 56),8) SEP (bot(fun____error),4); ((RSP_0 -64 56),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 56),8) SEP (0x10000c010,8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 24),4); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 32),4); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 36),4); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 44),4); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 80),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 89),1); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 144),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 180),4); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 185),1); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 192),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 200),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 224),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 232),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 248),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008818: MOV RDI, QWORD PTR [RBP - 48] 4"
 Post  "RDI = [(RSP_0 -64 56),8]_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000881c"
 Separations ""
 Assertions  ""
 Pre   "RDI = [(RSP_0 -64 56),8]_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "10000881c: ExternalCall fun__archive_entry_size 5"
 Post  "RAX = bot(fun__archive_entry_size) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 FunctionConstraints "PRESERVES fun__archive_entry_size {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008821"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_size) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008821: TEST RAX, RAX 3"
 Post  "RAX = bot(fun__archive_entry_size) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008824"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_size) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008824: JE 4295002177 2"
 Post  "RAX = bot(fun__archive_entry_size) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100008396, blockId == 66 ##
######################################
*)

htriple "ht_1000087b2"
 Separations "(0x10000c010,8) SEP (bot(fun____error),4); (0x10000c010,8) SEP (RSP_0,8); (0x10000c010,8) SEP ([0x10000c010,8]_0,8); (0x10000c010,8) SEP ((RSI_0 +64 16),8); (0x10000c010,8) SEP ((RSI_0 +64 24),4); (0x10000c010,8) SEP ((RSI_0 +64 32),4); (0x10000c010,8) SEP ((RSI_0 +64 36),4); (0x10000c010,8) SEP ((RSI_0 +64 44),4); (0x10000c010,8) SEP ((RSI_0 +64 80),8); (0x10000c010,8) SEP ((RSI_0 +64 89),1); (0x10000c010,8) SEP ((RSI_0 +64 144),8); (0x10000c010,8) SEP ((RSI_0 +64 180),4); (0x10000c010,8) SEP ((RSI_0 +64 185),1); (0x10000c010,8) SEP ((RSI_0 +64 192),8); (0x10000c010,8) SEP ((RSI_0 +64 200),8); (0x10000c010,8) SEP ((RSI_0 +64 224),8); (0x10000c010,8) SEP ((RSI_0 +64 232),8); (0x10000c010,8) SEP ((RSI_0 +64 248),8); (0x10000c010,8) SEP ((RSP_0 -64 8),8); (0x10000c010,8) SEP ((RSP_0 -64 16),8); (0x10000c010,8) SEP ((RSP_0 -64 24),8); (0x10000c010,8) SEP ((RSP_0 -64 32),8); (0x10000c010,8) SEP ((RSP_0 -64 40),8); (0x10000c010,8) SEP ((RSP_0 -64 48),8); (0x10000c010,8) SEP ((RSP_0 -64 56),8); (0x10000c010,8) SEP ((RSP_0 -64 64),8); (0x10000c010,8) SEP ((RSP_0 -64 72),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__archive_write_header) ; RBX = b32(bot(fun__archive_write_header)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "1000087b2: MOV RAX, QWORD PTR [RIP + 14423] 7"
 Post  "RAX = [0x10000c010,8]_0 ; RBX = b32(bot(fun__archive_write_header)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000087b9"
 Separations "([0x10000c010,8]_0,8) SEP (RSP_0,8); ([0x10000c010,8]_0,8) SEP (0x10000c010,8); ([0x10000c010,8]_0,8) SEP ((RSI_0 +64 24),4); ([0x10000c010,8]_0,8) SEP ((RSI_0 +64 144),8); ([0x10000c010,8]_0,8) SEP ((RSI_0 +64 180),4); ([0x10000c010,8]_0,8) SEP ((RSI_0 +64 185),1); ([0x10000c010,8]_0,8) SEP ((RSI_0 +64 192),8); ([0x10000c010,8]_0,8) SEP ((RSI_0 +64 200),8); ([0x10000c010,8]_0,8) SEP ((RSI_0 +64 224),8); ([0x10000c010,8]_0,8) SEP ((RSI_0 +64 232),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 8),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 16),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 24),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 32),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 40),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 48),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 56),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 64),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 72),8)"
 Assertions  ""
 Pre   "RAX = [0x10000c010,8]_0 ; RBX = b32(bot(fun__archive_write_header)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "1000087b9: MOV R13, QWORD PTR [RAX] 3"
 Post  "RAX = [0x10000c010,8]_0 ; RBX = b32(bot(fun__archive_write_header)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000087bc"
 Separations "((RSP_0 -64 64),8) SEP (bot(fun____error),4); ((RSP_0 -64 64),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 64),8) SEP (0x10000c010,8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 24),4); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 32),4); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 36),4); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 44),4); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 80),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 89),1); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 144),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 180),4); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 185),1); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 192),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 200),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 224),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 232),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 248),8)"
 Assertions  ""
 Pre   "RAX = [0x10000c010,8]_0 ; RBX = b32(bot(fun__archive_write_header)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "1000087bc: MOV RDI, QWORD PTR [RBP - 56] 4"
 Post  "RAX = [0x10000c010,8]_0 ; RBX = b32(bot(fun__archive_write_header)) ; RDI = RDI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000087c0"
 Separations ""
 Assertions  ""
 Pre   "RAX = [0x10000c010,8]_0 ; RBX = b32(bot(fun__archive_write_header)) ; RDI = RDI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "1000087c0: ExternalCall fun__archive_error_string 5"
 Post  "RAX = bot(fun__archive_error_string) ; RBX = b32(bot(fun__archive_write_header)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 FunctionConstraints "PRESERVES fun__archive_error_string {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000087c5"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_error_string) ; RBX = b32(bot(fun__archive_write_header)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "1000087c5: MOV RDI, R13 3"
 Post  "RAX = bot(fun__archive_error_string) ; RBX = b32(bot(fun__archive_write_header)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000087c8"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_error_string) ; RBX = b32(bot(fun__archive_write_header)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "1000087c8: LEA RSI, [RIP + 12622] 7"
 Post  "RAX = bot(fun__archive_error_string) ; RBX = b32(bot(fun__archive_write_header)) ; RSI = 0x10000b91d ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000087cf"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_error_string) ; RBX = b32(bot(fun__archive_write_header)) ; RSI = 0x10000b91d ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "1000087cf: MOV RDX, RAX 3"
 Post  "RAX = bot(fun__archive_error_string) ; RBX = b32(bot(fun__archive_write_header)) ; RDX = bot(fun__archive_error_string) ; RSI = 0x10000b91d ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000087d2"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_error_string) ; RBX = b32(bot(fun__archive_write_header)) ; RDX = bot(fun__archive_error_string) ; RSI = 0x10000b91d ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "1000087d2: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = b32(bot(fun__archive_write_header)) ; RDX = bot(fun__archive_error_string) ; RSI = 0x10000b91d ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000087d4"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = b32(bot(fun__archive_write_header)) ; RDX = bot(fun__archive_error_string) ; RSI = 0x10000b91d ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "1000087d4: ExternalCall fun__fprintf 5"
 Post  "RAX = bot(fun__fprintf) ; RBX = b32(bot(fun__archive_write_header)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 FunctionConstraints "PRESERVES fun__fprintf {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000087d9"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fprintf) ; RBX = b32(bot(fun__archive_write_header)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "1000087d9: JMP 4295002118 2"
 Post  "RAX = bot(fun__fprintf) ; RBX = b32(bot(fun__archive_write_header)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100008396, blockId == 67 ##
######################################
*)

htriple "ht_1000087db"
 Separations "((RSP_0 -64 56),8) SEP (bot(fun____error),4); ((RSP_0 -64 56),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 56),8) SEP (0x10000c010,8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 24),4); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 32),4); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 36),4); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 44),4); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 80),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 89),1); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 144),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 180),4); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 185),1); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 192),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 200),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 224),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 232),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 248),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__archive_write_header) ; RBX = b32(bot(fun__archive_write_header)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "1000087db: MOV RDI, QWORD PTR [RBP - 48] 4"
 Post  "RAX = bot(fun__archive_write_header) ; RBX = b32(bot(fun__archive_write_header)) ; RDI = [(RSP_0 -64 56),8]_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000087df"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_write_header) ; RBX = b32(bot(fun__archive_write_header)) ; RDI = [(RSP_0 -64 56),8]_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "1000087df: ExternalCall fun__archive_entry_pathname 5"
 Post  "RAX = bot(fun__archive_entry_pathname) ; RBX = b32(bot(fun__archive_write_header)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 FunctionConstraints "PRESERVES fun__archive_entry_pathname {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000087e4"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_pathname) ; RBX = b32(bot(fun__archive_write_header)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "1000087e4: MOV R13, RAX 3"
 Post  "RAX = bot(fun__archive_entry_pathname) ; RBX = b32(bot(fun__archive_write_header)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = bot(fun__archive_entry_pathname) ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000087e7"
 Separations "((RSP_0 -64 64),8) SEP (bot(fun____error),4); ((RSP_0 -64 64),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 64),8) SEP (0x10000c010,8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 24),4); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 32),4); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 36),4); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 44),4); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 80),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 89),1); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 144),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 180),4); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 185),1); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 192),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 200),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 224),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 232),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 248),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_pathname) ; RBX = b32(bot(fun__archive_write_header)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = bot(fun__archive_entry_pathname) ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "1000087e7: MOV RDI, QWORD PTR [RBP - 56] 4"
 Post  "RAX = bot(fun__archive_entry_pathname) ; RBX = b32(bot(fun__archive_write_header)) ; RDI = RDI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = bot(fun__archive_entry_pathname) ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000087eb"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_pathname) ; RBX = b32(bot(fun__archive_write_header)) ; RDI = RDI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = bot(fun__archive_entry_pathname) ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "1000087eb: ExternalCall fun__archive_error_string 5"
 Post  "RAX = bot(fun__archive_error_string) ; RBX = b32(bot(fun__archive_write_header)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = bot(fun__archive_entry_pathname) ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 FunctionConstraints "PRESERVES fun__archive_error_string {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000087f0"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_error_string) ; RBX = b32(bot(fun__archive_write_header)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = bot(fun__archive_entry_pathname) ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "1000087f0: XOR EDI, EDI 2"
 Post  "RAX = bot(fun__archive_error_string) ; RBX = b32(bot(fun__archive_write_header)) ; RDI = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = bot(fun__archive_entry_pathname) ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000087f2"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_error_string) ; RBX = b32(bot(fun__archive_write_header)) ; RDI = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = bot(fun__archive_entry_pathname) ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "1000087f2: LEA RSI, [RIP + 12707] 7"
 Post  "RAX = bot(fun__archive_error_string) ; RBX = b32(bot(fun__archive_write_header)) ; RDI = 0 ; RSI = 0x10000b99c ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = bot(fun__archive_entry_pathname) ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000087f9"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_error_string) ; RBX = b32(bot(fun__archive_write_header)) ; RDI = 0 ; RSI = 0x10000b99c ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = bot(fun__archive_entry_pathname) ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "1000087f9: MOV RDX, R13 3"
 Post  "RAX = bot(fun__archive_error_string) ; RBX = b32(bot(fun__archive_write_header)) ; RDX = bot(fun__archive_entry_pathname) ; RDI = 0 ; RSI = 0x10000b99c ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = bot(fun__archive_entry_pathname) ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000087fc"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_error_string) ; RBX = b32(bot(fun__archive_write_header)) ; RDX = bot(fun__archive_entry_pathname) ; RDI = 0 ; RSI = 0x10000b99c ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = bot(fun__archive_entry_pathname) ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "1000087fc: MOV RCX, RAX 3"
 Post  "RAX = bot(fun__archive_error_string) ; RBX = b32(bot(fun__archive_write_header)) ; RCX = bot(fun__archive_error_string) ; RDX = bot(fun__archive_entry_pathname) ; RDI = 0 ; RSI = 0x10000b99c ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = bot(fun__archive_entry_pathname) ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000087ff"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_error_string) ; RBX = b32(bot(fun__archive_write_header)) ; RCX = bot(fun__archive_error_string) ; RDX = bot(fun__archive_entry_pathname) ; RDI = 0 ; RSI = 0x10000b99c ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = bot(fun__archive_entry_pathname) ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "1000087ff: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = b32(bot(fun__archive_write_header)) ; RCX = bot(fun__archive_error_string) ; RDX = bot(fun__archive_entry_pathname) ; RDI = 0 ; RSI = 0x10000b99c ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = bot(fun__archive_entry_pathname) ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008801"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = b32(bot(fun__archive_write_header)) ; RCX = bot(fun__archive_error_string) ; RDX = bot(fun__archive_entry_pathname) ; RDI = 0 ; RSI = 0x10000b99c ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = bot(fun__archive_entry_pathname) ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008801: ExternalCall fun_0x1000099ad 5"
 Post  "RAX = bot(fun_0x1000099ad) ; RBX = b32(bot(fun__archive_write_header)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = bot(fun__archive_entry_pathname) ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 FunctionConstraints "PRESERVES fun_0x1000099ad {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100008396, blockId == 68 ##
######################################
*)

htriple "ht_100008806"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(bot(fun__archive_write_header)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008806: CMP EBX, 18446744073709551586 3"
 Post  "RBX = b32(bot(fun__archive_write_header)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008809"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(bot(fun__archive_write_header)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008809: JE 4295002948 6"
 Post  "RBX = b32(bot(fun__archive_write_header)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100008396, blockId == 69 ##
######################################
*)

htriple "ht_10000880f"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(bot(fun__archive_write_header)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "10000880f: CMP EBX, 18446744073709551596 3"
 Post  "RBX = b32(bot(fun__archive_write_header)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008812"
 Separations "((RSP_0 -64 64),8) SEP (bot(fun____error),4); ((RSP_0 -64 64),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 64),8) SEP (0x10000c010,8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 24),4); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 32),4); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 36),4); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 44),4); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 80),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 89),1); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 144),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 180),4); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 185),1); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 192),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 200),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 224),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 232),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 248),8)"
 Assertions  ""
 Pre   "RBX = b32(bot(fun__archive_write_header)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008812: MOV R13, QWORD PTR [RBP - 56] 4"
 Post  "RBX = b32(bot(fun__archive_write_header)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008816"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(bot(fun__archive_write_header)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008816: JL 4295002185 2"
 Post  "RBX = b32(bot(fun__archive_write_header)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100008396, blockId == 70 ##
######################################
*)

htriple "ht_100008b44"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008b44: MOV EDI, 1 5"
 Post  "RDI = 1 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008b49"
 Separations ""
 Assertions  ""
 Pre   "RDI = 1 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008b49: ExternalCall fun__exit 5"
 Post  "RAX = bot(fun__exit) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 FunctionConstraints "PRESERVES fun__exit {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100008396, blockId == 71 ##
######################################
*)

htriple "ht_100008849"
 Separations "((RSI_0 +64 32),4) SEP (RSP_0,8); ((RSI_0 +64 32),4) SEP (0x10000c010,8); ((RSI_0 +64 32),4) SEP ((RSP_0 -64 8),8); ((RSI_0 +64 32),4) SEP ((RSP_0 -64 16),8); ((RSI_0 +64 32),4) SEP ((RSP_0 -64 24),8); ((RSI_0 +64 32),4) SEP ((RSP_0 -64 32),8); ((RSI_0 +64 32),4) SEP ((RSP_0 -64 40),8); ((RSI_0 +64 32),4) SEP ((RSP_0 -64 48),8); ((RSI_0 +64 32),4) SEP ((RSP_0 -64 56),8); ((RSI_0 +64 32),4) SEP ((RSP_0 -64 64),8); ((RSI_0 +64 32),4) SEP ((RSP_0 -64 72),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008849: CMP DWORD PTR [R14 + 32], 0 5"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000884e"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "10000884e: LEA RBX, [RBP - 48] 4"
 Post  "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008852"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008852: JE 4295002216 2"
 Post  "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100008396, blockId == 72 ##
######################################
*)

htriple "ht_100008826"
 Separations "((RSP_0 -64 56),8) SEP (bot(fun____error),4); ((RSP_0 -64 56),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 56),8) SEP (0x10000c010,8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 24),4); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 32),4); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 36),4); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 44),4); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 80),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 89),1); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 144),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 180),4); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 185),1); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 192),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 200),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 224),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 232),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 248),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_size) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008826: MOV RCX, QWORD PTR [RBP - 48] 4"
 Post  "RAX = bot(fun__archive_entry_size) ; RCX = [(RSP_0 -64 56),8]_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000882a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_size) ; RCX = [(RSP_0 -64 56),8]_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "10000882a: MOV RDI, R14 3"
 Post  "RAX = bot(fun__archive_entry_size) ; RCX = [(RSP_0 -64 56),8]_0 ; RDI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000882d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_size) ; RCX = [(RSP_0 -64 56),8]_0 ; RDI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "10000882d: MOV RSI, R13 3"
 Post  "RAX = bot(fun__archive_entry_size) ; RCX = [(RSP_0 -64 56),8]_0 ; RDI = RSI_0 ; RSI = RDI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008830"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_size) ; RCX = [(RSP_0 -64 56),8]_0 ; RDI = RSI_0 ; RSI = RDI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008830: MOV RDX, R12 3"
 Post  "RAX = bot(fun__archive_entry_size) ; RCX = [(RSP_0 -64 56),8]_0 ; RDX = bot(fun__archive_read_new) ; RDI = RSI_0 ; RSI = RDI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008833"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_size) ; RCX = [(RSP_0 -64 56),8]_0 ; RDX = bot(fun__archive_read_new) ; RDI = RSI_0 ; RSI = RDI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008833: ExternalCall fun_0x1000097e1 5"
 Post  "RAX = bot(fun_0x1000097e1) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 FunctionConstraints "PRESERVES fun_0x1000097e1 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008838"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000097e1) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008838: TEST EAX, EAX 2"
 Post  "RAX = bot(fun_0x1000097e1) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000883a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000097e1) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "10000883a: JE 4295002185 2"
 Post  "RAX = bot(fun_0x1000097e1) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100008396, blockId == 73 ##
######################################
*)

htriple "ht_100008841"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_size) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008841: MOV RDI, R12 3"
 Post  "RAX = bot(fun__archive_entry_size) ; RDI = bot(fun__archive_read_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008844"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_size) ; RDI = bot(fun__archive_read_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008844: ExternalCall fun__archive_read_data_skip 5"
 Post  "RAX = bot(fun__archive_read_data_skip) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 FunctionConstraints "PRESERVES fun__archive_read_data_skip {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100008396, blockId == 74 ##
######################################
*)

htriple "ht_10000883c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000097e1) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "10000883c: JMP 4295002948 5"
 Post  "RAX = bot(fun_0x1000097e1) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100008396, blockId == 75 ##
######################################
*)

htriple "ht_100008854"
 Separations "(0x10000c010,8) SEP (bot(fun____error),4); (0x10000c010,8) SEP (RSP_0,8); (0x10000c010,8) SEP ([0x10000c010,8]_0,8); (0x10000c010,8) SEP ((RSI_0 +64 16),8); (0x10000c010,8) SEP ((RSI_0 +64 24),4); (0x10000c010,8) SEP ((RSI_0 +64 32),4); (0x10000c010,8) SEP ((RSI_0 +64 36),4); (0x10000c010,8) SEP ((RSI_0 +64 44),4); (0x10000c010,8) SEP ((RSI_0 +64 80),8); (0x10000c010,8) SEP ((RSI_0 +64 89),1); (0x10000c010,8) SEP ((RSI_0 +64 144),8); (0x10000c010,8) SEP ((RSI_0 +64 180),4); (0x10000c010,8) SEP ((RSI_0 +64 185),1); (0x10000c010,8) SEP ((RSI_0 +64 192),8); (0x10000c010,8) SEP ((RSI_0 +64 200),8); (0x10000c010,8) SEP ((RSI_0 +64 224),8); (0x10000c010,8) SEP ((RSI_0 +64 232),8); (0x10000c010,8) SEP ((RSI_0 +64 248),8); (0x10000c010,8) SEP ((RSP_0 -64 8),8); (0x10000c010,8) SEP ((RSP_0 -64 16),8); (0x10000c010,8) SEP ((RSP_0 -64 24),8); (0x10000c010,8) SEP ((RSP_0 -64 32),8); (0x10000c010,8) SEP ((RSP_0 -64 40),8); (0x10000c010,8) SEP ((RSP_0 -64 48),8); (0x10000c010,8) SEP ((RSP_0 -64 56),8); (0x10000c010,8) SEP ((RSP_0 -64 64),8); (0x10000c010,8) SEP ((RSP_0 -64 72),8)"
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008854: MOV RAX, QWORD PTR [RIP + 14261] 7"
 Post  "RAX = [0x10000c010,8]_0 ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000885b"
 Separations "([0x10000c010,8]_0,8) SEP (RSP_0,8); ([0x10000c010,8]_0,8) SEP (0x10000c010,8); ([0x10000c010,8]_0,8) SEP ((RSI_0 +64 24),4); ([0x10000c010,8]_0,8) SEP ((RSI_0 +64 144),8); ([0x10000c010,8]_0,8) SEP ((RSI_0 +64 180),4); ([0x10000c010,8]_0,8) SEP ((RSI_0 +64 185),1); ([0x10000c010,8]_0,8) SEP ((RSI_0 +64 192),8); ([0x10000c010,8]_0,8) SEP ((RSI_0 +64 200),8); ([0x10000c010,8]_0,8) SEP ((RSI_0 +64 224),8); ([0x10000c010,8]_0,8) SEP ((RSI_0 +64 232),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 8),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 16),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 24),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 32),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 40),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 48),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 56),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 64),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 72),8)"
 Assertions  ""
 Pre   "RAX = [0x10000c010,8]_0 ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "10000885b: MOV RSI, QWORD PTR [RAX] 3"
 Post  "RAX = [0x10000c010,8]_0 ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000885e"
 Separations ""
 Assertions  ""
 Pre   "RAX = [0x10000c010,8]_0 ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "10000885e: MOV EDI, 10 5"
 Post  "RAX = [0x10000c010,8]_0 ; RBX = (RSP_0 -64 56) ; RDI = 10 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008863"
 Separations ""
 Assertions  ""
 Pre   "RAX = [0x10000c010,8]_0 ; RBX = (RSP_0 -64 56) ; RDI = 10 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008863: ExternalCall fun__fputc 5"
 Post  "RAX = bot(fun__fputc) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 FunctionConstraints "PRESERVES fun__fputc {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100008396, blockId == 76 ##
######################################
*)

htriple "ht_100008884"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_next_header) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008884: MOV RDI, R12 3"
 Post  "RAX = bot(fun__archive_read_next_header) ; RBX = (RSP_0 -64 56) ; RDI = bot(fun__archive_read_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008887"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_next_header) ; RBX = (RSP_0 -64 56) ; RDI = bot(fun__archive_read_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008887: ExternalCall fun__archive_read_free 5"
 Post  "RAX = bot(fun__archive_read_free) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 FunctionConstraints "PRESERVES fun__archive_read_free {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000888c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_free) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "10000888c: JMP 4295002299 2"
 Post  "RAX = bot(fun__archive_read_free) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100008396, blockId == 77 ##
######################################
*)

htriple "ht_100008add"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_next_header) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008add: MOV RDI, R12 3"
 Post  "RAX = bot(fun__archive_read_next_header) ; RBX = (RSP_0 -64 56) ; RDI = bot(fun__archive_read_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008ae0"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_next_header) ; RBX = (RSP_0 -64 56) ; RDI = bot(fun__archive_read_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008ae0: ExternalCall fun__archive_error_string 5"
 Post  "RAX = bot(fun__archive_error_string) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 FunctionConstraints "PRESERVES fun__archive_error_string {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008ae5"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_error_string) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008ae5: LEA RSI, [RIP + 12944] 7"
 Post  "RAX = bot(fun__archive_error_string) ; RBX = (RSP_0 -64 56) ; RSI = 0x10000bd7c ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008aec"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_error_string) ; RBX = (RSP_0 -64 56) ; RSI = 0x10000bd7c ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008aec: XOR EDI, EDI 2"
 Post  "RAX = bot(fun__archive_error_string) ; RBX = (RSP_0 -64 56) ; RDI = 0 ; RSI = 0x10000bd7c ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008aee"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_error_string) ; RBX = (RSP_0 -64 56) ; RDI = 0 ; RSI = 0x10000bd7c ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008aee: MOV RDX, R15 3"
 Post  "RAX = bot(fun__archive_error_string) ; RBX = (RSP_0 -64 56) ; RDI = 0 ; RSI = 0x10000bd7c ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008af1"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_error_string) ; RBX = (RSP_0 -64 56) ; RDI = 0 ; RSI = 0x10000bd7c ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008af1: MOV RCX, RAX 3"
 Post  "RAX = bot(fun__archive_error_string) ; RBX = (RSP_0 -64 56) ; RCX = bot(fun__archive_error_string) ; RDI = 0 ; RSI = 0x10000bd7c ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008af4"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_error_string) ; RBX = (RSP_0 -64 56) ; RCX = bot(fun__archive_error_string) ; RDI = 0 ; RSI = 0x10000bd7c ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008af4: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = (RSP_0 -64 56) ; RCX = bot(fun__archive_error_string) ; RDI = 0 ; RSI = 0x10000bd7c ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008af6"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = (RSP_0 -64 56) ; RCX = bot(fun__archive_error_string) ; RDI = 0 ; RSI = 0x10000bd7c ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008af6: ExternalCall fun_0x1000099ad 5"
 Post  "RAX = bot(fun_0x1000099ad) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 FunctionConstraints "PRESERVES fun_0x1000099ad {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008afb"
 Separations "((RSP_0 -64 72),8) SEP (bot(fun____error),4); ((RSP_0 -64 72),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 72),8) SEP (0x10000c010,8); ((RSP_0 -64 72),8) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 72),8) SEP ((RSI_0 +64 24),4); ((RSP_0 -64 72),8) SEP ((RSI_0 +64 32),4); ((RSP_0 -64 72),8) SEP ((RSI_0 +64 36),4); ((RSP_0 -64 72),8) SEP ((RSI_0 +64 44),4); ((RSP_0 -64 72),8) SEP ((RSI_0 +64 80),8); ((RSP_0 -64 72),8) SEP ((RSI_0 +64 89),1); ((RSP_0 -64 72),8) SEP ((RSI_0 +64 144),8); ((RSP_0 -64 72),8) SEP ((RSI_0 +64 180),4); ((RSP_0 -64 72),8) SEP ((RSI_0 +64 185),1); ((RSP_0 -64 72),8) SEP ((RSI_0 +64 192),8); ((RSP_0 -64 72),8) SEP ((RSI_0 +64 200),8); ((RSP_0 -64 72),8) SEP ((RSI_0 +64 224),8); ((RSP_0 -64 72),8) SEP ((RSI_0 +64 232),8); ((RSP_0 -64 72),8) SEP ((RSI_0 +64 248),8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000099ad) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008afb: MOV RAX, QWORD PTR [RBP - 64] 4"
 Post  "RAX = (RSI_0 +64 180) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008aff"
 Separations "((RSI_0 +64 180),4) SEP (bot(fun____error),4); ((RSI_0 +64 180),4) SEP (RSP_0,8); ((RSI_0 +64 180),4) SEP ([0x10000c010,8]_0,8); ((RSI_0 +64 180),4) SEP (0x10000c010,8); ((RSI_0 +64 180),4) SEP ((RSP_0 -64 8),8); ((RSI_0 +64 180),4) SEP ((RSP_0 -64 16),8); ((RSI_0 +64 180),4) SEP ((RSP_0 -64 24),8); ((RSI_0 +64 180),4) SEP ((RSP_0 -64 32),8); ((RSI_0 +64 180),4) SEP ((RSP_0 -64 40),8); ((RSI_0 +64 180),4) SEP ((RSP_0 -64 48),8); ((RSI_0 +64 180),4) SEP ((RSP_0 -64 56),8); ((RSI_0 +64 180),4) SEP ((RSP_0 -64 64),8); ((RSI_0 +64 180),4) SEP ((RSP_0 -64 72),8)"
 Assertions  ""
 Pre   "RAX = (RSI_0 +64 180) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008aff: MOV DWORD PTR [RAX], 1 6"
 Post  "RAX = (RSI_0 +64 180) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 180),4] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008b05"
 Separations ""
 Assertions  ""
 Pre   "RAX = (RSI_0 +64 180) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 180),4] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008b05: MOV RDI, R12 3"
 Post  "RAX = (RSI_0 +64 180) ; RBX = (RSP_0 -64 56) ; RDI = bot(fun__archive_read_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 180),4] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008b08"
 Separations ""
 Assertions  ""
 Pre   "RAX = (RSI_0 +64 180) ; RBX = (RSP_0 -64 56) ; RDI = bot(fun__archive_read_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 180),4] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008b08: ExternalCall fun__archive_read_free 5"
 Post  "RAX = bot(fun__archive_read_free) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 FunctionConstraints "PRESERVES fun__archive_read_free {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008b0d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_free) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008b0d: JMP 4295002330 5"
 Post  "RAX = bot(fun__archive_read_free) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = bot(fun__archive_read_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100008396, blockId == 78 ##
######################################
*)

htriple "ht_1000088a6"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "1000088a6: CMP BYTE PTR [R15], 0 4"
 Post  "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000088aa"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "1000088aa: JE 4295002923 6"
 Post  "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100008396, blockId == 79 ##
######################################
*)

htriple "ht_100008b12"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008b12: LEA RSI, [RIP + 11608] 7"
 Post  "RBX = (RSP_0 -64 56) ; RSI = 0x10000b871 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008b19"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 56) ; RSI = 0x10000b871 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008b19: LEA RDX, [RIP + 12724] 7"
 Post  "RBX = (RSP_0 -64 56) ; RDX = 0x10000bcd4 ; RSI = 0x10000b871 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008b20"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 56) ; RDX = 0x10000bcd4 ; RSI = 0x10000b871 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008b20: XOR EDI, EDI 2"
 Post  "RBX = (RSP_0 -64 56) ; RDX = 0x10000bcd4 ; RDI = 0 ; RSI = 0x10000b871 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008b22"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 56) ; RDX = 0x10000bcd4 ; RDI = 0 ; RSI = 0x10000b871 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008b22: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = (RSP_0 -64 56) ; RDX = 0x10000bcd4 ; RDI = 0 ; RSI = 0x10000b871 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008b24"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = (RSP_0 -64 56) ; RDX = 0x10000bcd4 ; RDI = 0 ; RSI = 0x10000b871 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008b24: ExternalCall fun_0x1000099ad 5"
 Post  "RAX = bot(fun_0x1000099ad) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 FunctionConstraints "PRESERVES fun_0x1000099ad {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008b29"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000099ad) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008b29: JMP 4295002939 2"
 Post  "RAX = bot(fun_0x1000099ad) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100008396, blockId == 80 ##
######################################
*)

htriple "ht_1000088b0"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "1000088b0: MOV RDI, R14 3"
 Post  "RBX = (RSP_0 -64 56) ; RDI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000088b3"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 56) ; RDI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "1000088b3: MOV RSI, R15 3"
 Post  "RBX = (RSP_0 -64 56) ; RDI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000088b6"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 56) ; RDI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "1000088b6: ExternalCall fun_0x1000077cd 5"
 Post  "RAX = bot(fun_0x1000077cd) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 FunctionConstraints "PRESERVES fun_0x1000077cd {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100008396, blockId == 81 ##
######################################
*)

htriple "ht_100008b2b"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008b2b: LEA RSI, [RIP + 12730] 7"
 Post  "RBX = (RSP_0 -64 56) ; RSI = 0x10000bcec ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008b32"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 56) ; RSI = 0x10000bcec ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008b32: XOR EDI, EDI 2"
 Post  "RBX = (RSP_0 -64 56) ; RDI = 0 ; RSI = 0x10000bcec ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008b34"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 56) ; RDI = 0 ; RSI = 0x10000bcec ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008b34: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = (RSP_0 -64 56) ; RDI = 0 ; RSI = 0x10000bcec ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008b36"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = (RSP_0 -64 56) ; RDI = 0 ; RSI = 0x10000bcec ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008b36: ExternalCall fun_0x1000099ad 5"
 Post  "RAX = bot(fun_0x1000099ad) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 FunctionConstraints "PRESERVES fun_0x1000099ad {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100008396, blockId == 82 ##
######################################
*)

htriple "ht_1000085b2"
 Separations ""
 Assertions  "(R15,1) SEP (RSP_0,8); (R15,1) SEP ((RSP_0 -64 8),8); (R15,1) SEP ((RSP_0 -64 16),8); (R15,1) SEP ((RSP_0 -64 24),8); (R15,1) SEP ((RSP_0 -64 32),8); (R15,1) SEP ((RSP_0 -64 40),8); (R15,1) SEP ((RSP_0 -64 48),8); (R15,1) SEP ((RSP_0 -64 56),8); (R15,1) SEP ((RSP_0 -64 64),8); (R15,1) SEP ((RSP_0 -64 72),8)"
 Pre   "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "1000085b2: MOV CL, BYTE PTR [R15] 3"
 Post  "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000085b5"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "1000085b5: CMP CL, 64 3"
 Post  "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000085b8"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "1000085b8: JE 4295001571 2"
 Post  "RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100008396, blockId == 83 ##
######################################
*)

htriple "ht_100008926"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_linkify) ; RBX = (RSP_0 -64 56) ; RDI = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "100008926: LEA R13, [RIP + 12100] 7"
 Post  "RAX = bot(fun__archive_entry_linkify) ; RBX = (RSP_0 -64 56) ; RDI = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100008396, blockId == 84 ##
######################################
*)

htriple "ht_100008a20"
 Separations "((RSP_0 -64 64),8) SEP (bot(fun____error),4); ((RSP_0 -64 64),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 64),8) SEP (0x10000c010,8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 24),4); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 32),4); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 36),4); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 44),4); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 80),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 89),1); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 144),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 180),4); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 185),1); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 192),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 200),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 224),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 232),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 248),8)"
 Assertions  ""
 Pre   "RDI = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "100008a20: MOV R13, QWORD PTR [RBP - 56] 4"
 Post  "RDI = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008a24"
 Separations ""
 Assertions  ""
 Pre   "RDI = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "100008a24: MOV RDI, R13 3"
 Post  "RDI = RDI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008a27"
 Separations ""
 Assertions  ""
 Pre   "RDI = RDI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "100008a27: ExternalCall fun__archive_write_close 5"
 Post  "RAX = bot(fun__archive_write_close) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 FunctionConstraints "PRESERVES fun__archive_write_close {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008a2c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_write_close) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "100008a2c: TEST EAX, EAX 2"
 Post  "RAX = bot(fun__archive_write_close) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008a2e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_write_close) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "100008a2e: JE 4295002712 2"
 Post  "RAX = bot(fun__archive_write_close) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100008396, blockId == 85 ##
######################################
*)

htriple "ht_100008948"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_disk_open) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "100008948: MOV RDI, R15 3"
 Post  "RAX = bot(fun__archive_read_disk_open) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000894b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_disk_open) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "10000894b: ExternalCall fun__archive_errno 5"
 Post  "RAX = bot(fun__archive_errno) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 FunctionConstraints "PRESERVES fun__archive_errno {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008950"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_errno) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "100008950: MOV EBX, EAX 2"
 Post  "RAX = bot(fun__archive_errno) ; RBX = b32(bot(fun__archive_errno)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008952"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_errno) ; RBX = b32(bot(fun__archive_errno)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "100008952: MOV RDI, R15 3"
 Post  "RAX = bot(fun__archive_errno) ; RBX = b32(bot(fun__archive_errno)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008955"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_errno) ; RBX = b32(bot(fun__archive_errno)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "100008955: ExternalCall fun__archive_error_string 5"
 Post  "RAX = bot(fun__archive_error_string) ; RBX = b32(bot(fun__archive_errno)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 FunctionConstraints "PRESERVES fun__archive_error_string {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000895a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_error_string) ; RBX = b32(bot(fun__archive_errno)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "10000895a: MOV EDI, EBX 2"
 Post  "RAX = bot(fun__archive_error_string) ; RBX = b32(bot(fun__archive_errno)) ; RDI = b32(bot(fun__archive_errno)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000895c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_error_string) ; RBX = b32(bot(fun__archive_errno)) ; RDI = b32(bot(fun__archive_errno)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "10000895c: MOV RSI, R13 3"
 Post  "RAX = bot(fun__archive_error_string) ; RBX = b32(bot(fun__archive_errno)) ; RDI = b32(bot(fun__archive_errno)) ; RSI = 0x10000b871 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000895f"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_error_string) ; RBX = b32(bot(fun__archive_errno)) ; RDI = b32(bot(fun__archive_errno)) ; RSI = 0x10000b871 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "10000895f: MOV RDX, RAX 3"
 Post  "RAX = bot(fun__archive_error_string) ; RBX = b32(bot(fun__archive_errno)) ; RDX = bot(fun__archive_error_string) ; RDI = b32(bot(fun__archive_errno)) ; RSI = 0x10000b871 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008962"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_error_string) ; RBX = b32(bot(fun__archive_errno)) ; RDX = bot(fun__archive_error_string) ; RDI = b32(bot(fun__archive_errno)) ; RSI = 0x10000b871 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "100008962: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = b32(bot(fun__archive_errno)) ; RDX = bot(fun__archive_error_string) ; RDI = b32(bot(fun__archive_errno)) ; RSI = 0x10000b871 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008964"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = b32(bot(fun__archive_errno)) ; RDX = bot(fun__archive_error_string) ; RDI = b32(bot(fun__archive_errno)) ; RSI = 0x10000b871 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "100008964: ExternalCall fun_0x1000099ad 5"
 Post  "RAX = bot(fun_0x1000099ad) ; RBX = b32(bot(fun__archive_errno)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 FunctionConstraints "PRESERVES fun_0x1000099ad {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100008396, blockId == 86 ##
######################################
*)

htriple "ht_10000898b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_disk_open) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "10000898b: ExternalCall fun__archive_entry_new 5"
 Post  "RAX = bot(fun__archive_entry_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 FunctionConstraints "PRESERVES fun__archive_entry_new {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008990"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "100008990: MOV R12, RAX 3"
 Post  "RAX = bot(fun__archive_entry_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; R12 = bot(fun__archive_entry_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008993"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; R12 = bot(fun__archive_entry_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "100008993: MOV RDI, R15 3"
 Post  "RAX = bot(fun__archive_entry_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; R12 = bot(fun__archive_entry_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008996"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; R12 = bot(fun__archive_entry_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "100008996: MOV RSI, RAX 3"
 Post  "RAX = bot(fun__archive_entry_new) ; RSI = bot(fun__archive_entry_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; R12 = bot(fun__archive_entry_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008999"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_new) ; RSI = bot(fun__archive_entry_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; R12 = bot(fun__archive_entry_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "100008999: ExternalCall fun__archive_read_next_header2 5"
 Post  "RAX = bot(fun__archive_read_next_header2) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; R12 = bot(fun__archive_entry_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 FunctionConstraints "PRESERVES fun__archive_read_next_header2 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000899e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_next_header2) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; R12 = bot(fun__archive_entry_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "10000899e: MOV EBX, EAX 2"
 Post  "RAX = bot(fun__archive_read_next_header2) ; RBX = b32(bot(fun__archive_read_next_header2)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; R12 = bot(fun__archive_entry_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000089a0"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_next_header2) ; RBX = b32(bot(fun__archive_read_next_header2)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; R12 = bot(fun__archive_entry_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "1000089a0: MOV RDI, R12 3"
 Post  "RAX = bot(fun__archive_read_next_header2) ; RBX = b32(bot(fun__archive_read_next_header2)) ; RDI = bot(fun__archive_entry_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; R12 = bot(fun__archive_entry_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000089a3"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_next_header2) ; RBX = b32(bot(fun__archive_read_next_header2)) ; RDI = bot(fun__archive_entry_new) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; R12 = bot(fun__archive_entry_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "1000089a3: ExternalCall fun__archive_entry_free 5"
 Post  "RAX = bot(fun__archive_entry_free) ; RBX = b32(bot(fun__archive_read_next_header2)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; R12 = bot(fun__archive_entry_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 FunctionConstraints "PRESERVES fun__archive_entry_free {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000089a8"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_free) ; RBX = b32(bot(fun__archive_read_next_header2)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; R12 = bot(fun__archive_entry_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "1000089a8: TEST EBX, EBX 2"
 Post  "RAX = bot(fun__archive_entry_free) ; RBX = b32(bot(fun__archive_read_next_header2)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; R12 = bot(fun__archive_entry_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000089aa"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_free) ; RBX = b32(bot(fun__archive_read_next_header2)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; R12 = bot(fun__archive_entry_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "1000089aa: JE 4295002590 2"
 Post  "RAX = bot(fun__archive_entry_free) ; RBX = b32(bot(fun__archive_read_next_header2)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; R12 = bot(fun__archive_entry_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100008396, blockId == 87 ##
######################################
*)

htriple "ht_10000892d"
 Separations "((RSI_0 +64 192),8) SEP (bot(fun____error),4); ((RSI_0 +64 192),8) SEP (RSP_0,8); ((RSI_0 +64 192),8) SEP ([0x10000c010,8]_0,8); ((RSI_0 +64 192),8) SEP (0x10000c010,8); ((RSI_0 +64 192),8) SEP ((RSP_0 -64 8),8); ((RSI_0 +64 192),8) SEP ((RSP_0 -64 16),8); ((RSI_0 +64 192),8) SEP ((RSP_0 -64 24),8); ((RSI_0 +64 192),8) SEP ((RSP_0 -64 32),8); ((RSI_0 +64 192),8) SEP ((RSP_0 -64 40),8); ((RSI_0 +64 192),8) SEP ((RSP_0 -64 48),8); ((RSI_0 +64 192),8) SEP ((RSP_0 -64 56),8); ((RSI_0 +64 192),8) SEP ((RSP_0 -64 64),8); ((RSI_0 +64 192),8) SEP ((RSP_0 -64 72),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_linkify) ; RDI = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "10000892d: MOV R15, QWORD PTR [R14 + 192] 7"
 Post  "RAX = bot(fun__archive_entry_linkify) ; RDI = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008934"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_linkify) ; RDI = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "100008934: ExternalCall fun__archive_entry_sourcepath 5"
 Post  "RAX = bot(fun__archive_entry_sourcepath) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 FunctionConstraints "PRESERVES fun__archive_entry_sourcepath {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008939"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_sourcepath) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "100008939: MOV RDI, R15 3"
 Post  "RAX = bot(fun__archive_entry_sourcepath) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000893c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_sourcepath) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "10000893c: MOV RSI, RAX 3"
 Post  "RAX = bot(fun__archive_entry_sourcepath) ; RSI = bot(fun__archive_entry_sourcepath) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000893f"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_sourcepath) ; RSI = bot(fun__archive_entry_sourcepath) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "10000893f: ExternalCall fun__archive_read_disk_open 5"
 Post  "RAX = bot(fun__archive_read_disk_open) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 FunctionConstraints "PRESERVES fun__archive_read_disk_open {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008944"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_disk_open) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "100008944: TEST EAX, EAX 2"
 Post  "RAX = bot(fun__archive_read_disk_open) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008946"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_disk_open) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "100008946: JE 4295002507 2"
 Post  "RAX = bot(fun__archive_read_disk_open) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100008396, blockId == 88 ##
######################################
*)

htriple "ht_100008986"
 Separations ""
 Assertions  ""
 Pre   "RDI = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "100008986: JMP 4295002656 5"
 Post  "RDI = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100008396, blockId == 89 ##
######################################
*)

htriple "ht_1000089ac"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_free) ; RBX = b32(bot(fun__archive_read_next_header2)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; R12 = bot(fun__archive_entry_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "1000089ac: MOV RDI, R15 3"
 Post  "RAX = bot(fun__archive_entry_free) ; RBX = b32(bot(fun__archive_read_next_header2)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; R12 = bot(fun__archive_entry_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000089af"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_free) ; RBX = b32(bot(fun__archive_read_next_header2)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; R12 = bot(fun__archive_entry_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "1000089af: ExternalCall fun__archive_errno 5"
 Post  "RAX = bot(fun__archive_errno) ; RBX = b32(bot(fun__archive_read_next_header2)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; R12 = bot(fun__archive_entry_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 FunctionConstraints "PRESERVES fun__archive_errno {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000089b4"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_errno) ; RBX = b32(bot(fun__archive_read_next_header2)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; R12 = bot(fun__archive_entry_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "1000089b4: MOV R12D, EAX 3"
 Post  "RAX = bot(fun__archive_errno) ; RBX = b32(bot(fun__archive_read_next_header2)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; R12 = b32(bot(fun__archive_errno)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000089b7"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_errno) ; RBX = b32(bot(fun__archive_read_next_header2)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; R12 = b32(bot(fun__archive_errno)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "1000089b7: MOV RDI, R15 3"
 Post  "RAX = bot(fun__archive_errno) ; RBX = b32(bot(fun__archive_read_next_header2)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; R12 = b32(bot(fun__archive_errno)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000089ba"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_errno) ; RBX = b32(bot(fun__archive_read_next_header2)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; R12 = b32(bot(fun__archive_errno)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "1000089ba: ExternalCall fun__archive_error_string 5"
 Post  "RAX = bot(fun__archive_error_string) ; RBX = b32(bot(fun__archive_read_next_header2)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; R12 = b32(bot(fun__archive_errno)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 FunctionConstraints "PRESERVES fun__archive_error_string {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000089bf"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_error_string) ; RBX = b32(bot(fun__archive_read_next_header2)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; R12 = b32(bot(fun__archive_errno)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "1000089bf: MOV EDI, R12D 3"
 Post  "RAX = bot(fun__archive_error_string) ; RBX = b32(bot(fun__archive_read_next_header2)) ; RDI = b32(bot(fun__archive_errno)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; R12 = b32(bot(fun__archive_errno)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000089c2"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_error_string) ; RBX = b32(bot(fun__archive_read_next_header2)) ; RDI = b32(bot(fun__archive_errno)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; R12 = b32(bot(fun__archive_errno)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "1000089c2: MOV RSI, R13 3"
 Post  "RAX = bot(fun__archive_error_string) ; RBX = b32(bot(fun__archive_read_next_header2)) ; RDI = b32(bot(fun__archive_errno)) ; RSI = 0x10000b871 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; R12 = b32(bot(fun__archive_errno)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000089c5"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_error_string) ; RBX = b32(bot(fun__archive_read_next_header2)) ; RDI = b32(bot(fun__archive_errno)) ; RSI = 0x10000b871 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; R12 = b32(bot(fun__archive_errno)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "1000089c5: MOV RDX, RAX 3"
 Post  "RAX = bot(fun__archive_error_string) ; RBX = b32(bot(fun__archive_read_next_header2)) ; RDX = bot(fun__archive_error_string) ; RDI = b32(bot(fun__archive_errno)) ; RSI = 0x10000b871 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; R12 = b32(bot(fun__archive_errno)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000089c8"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_error_string) ; RBX = b32(bot(fun__archive_read_next_header2)) ; RDX = bot(fun__archive_error_string) ; RDI = b32(bot(fun__archive_errno)) ; RSI = 0x10000b871 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; R12 = b32(bot(fun__archive_errno)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "1000089c8: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = b32(bot(fun__archive_read_next_header2)) ; RDX = bot(fun__archive_error_string) ; RDI = b32(bot(fun__archive_errno)) ; RSI = 0x10000b871 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; R12 = b32(bot(fun__archive_errno)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000089ca"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = b32(bot(fun__archive_read_next_header2)) ; RDX = bot(fun__archive_error_string) ; RDI = b32(bot(fun__archive_errno)) ; RSI = 0x10000b871 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; R12 = b32(bot(fun__archive_errno)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "1000089ca: ExternalCall fun_0x1000099ad 5"
 Post  "RAX = bot(fun_0x1000099ad) ; RBX = b32(bot(fun__archive_read_next_header2)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; R12 = b32(bot(fun__archive_errno)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 FunctionConstraints "PRESERVES fun_0x1000099ad {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000089cf"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000099ad) ; RBX = b32(bot(fun__archive_read_next_header2)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; R12 = b32(bot(fun__archive_errno)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "1000089cf: CMP EBX, 18446744073709551586 3"
 Post  "RAX = bot(fun_0x1000099ad) ; RBX = b32(bot(fun__archive_read_next_header2)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; R12 = b32(bot(fun__archive_errno)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000089d2"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000099ad) ; RBX = b32(bot(fun__archive_read_next_header2)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; R12 = b32(bot(fun__archive_errno)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "1000089d2: JE 4295002473 2"
 Post  "RAX = bot(fun_0x1000099ad) ; RBX = b32(bot(fun__archive_read_next_header2)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; R12 = b32(bot(fun__archive_errno)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100008396, blockId == 90 ##
######################################
*)

htriple "ht_1000089de"
 Separations "((RSP_0 -64 56),8) SEP (bot(fun____error),4); ((RSP_0 -64 56),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 56),8) SEP (0x10000c010,8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 24),4); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 32),4); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 36),4); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 44),4); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 80),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 89),1); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 144),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 180),4); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 185),1); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 192),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 200),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 224),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 232),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 248),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_free) ; RBX = b32(bot(fun__archive_read_next_header2)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; R12 = bot(fun__archive_entry_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "1000089de: MOV RDX, QWORD PTR [RBP - 48] 4"
 Post  "RAX = bot(fun__archive_entry_free) ; RBX = b32(bot(fun__archive_read_next_header2)) ; RDX = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; R12 = bot(fun__archive_entry_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000089e2"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_free) ; RBX = b32(bot(fun__archive_read_next_header2)) ; RDX = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; R12 = bot(fun__archive_entry_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "1000089e2: MOV RDI, R14 3"
 Post  "RAX = bot(fun__archive_entry_free) ; RBX = b32(bot(fun__archive_read_next_header2)) ; RDX = 0 ; RDI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; R12 = bot(fun__archive_entry_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000089e5"
 Separations "((RSP_0 -64 64),8) SEP (bot(fun____error),4); ((RSP_0 -64 64),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 64),8) SEP (0x10000c010,8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 24),4); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 32),4); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 36),4); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 44),4); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 80),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 89),1); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 144),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 180),4); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 185),1); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 192),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 200),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 224),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 232),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 248),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_free) ; RBX = b32(bot(fun__archive_read_next_header2)) ; RDX = 0 ; RDI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; R12 = bot(fun__archive_entry_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "1000089e5: MOV RSI, QWORD PTR [RBP - 56] 4"
 Post  "RAX = bot(fun__archive_entry_free) ; RBX = b32(bot(fun__archive_read_next_header2)) ; RDX = 0 ; RDI = RSI_0 ; RSI = RDI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; R12 = bot(fun__archive_entry_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000089e9"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_free) ; RBX = b32(bot(fun__archive_read_next_header2)) ; RDX = 0 ; RDI = RSI_0 ; RSI = RDI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; R12 = bot(fun__archive_entry_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "1000089e9: ExternalCall fun_0x100009593 5"
 Post  "RAX = bot(fun_0x100009593) ; RBX = b32(bot(fun__archive_read_next_header2)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; R12 = bot(fun__archive_entry_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 FunctionConstraints "PRESERVES fun_0x100009593 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000089ee"
 Separations "((RSP_0 -64 56),8) SEP (bot(fun____error),4); ((RSP_0 -64 56),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 56),8) SEP (0x10000c010,8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 24),4); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 32),4); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 36),4); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 44),4); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 80),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 89),1); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 144),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 180),4); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 185),1); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 192),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 200),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 224),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 232),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 248),8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100009593) ; RBX = b32(bot(fun__archive_read_next_header2)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; R12 = bot(fun__archive_entry_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "1000089ee: MOV RDI, QWORD PTR [RBP - 48] 4"
 Post  "RAX = bot(fun_0x100009593) ; RBX = b32(bot(fun__archive_read_next_header2)) ; RDI = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; R12 = bot(fun__archive_entry_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000089f2"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100009593) ; RBX = b32(bot(fun__archive_read_next_header2)) ; RDI = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; R12 = bot(fun__archive_entry_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "1000089f2: ExternalCall fun__archive_entry_free 5"
 Post  "RAX = bot(fun__archive_entry_free) ; RBX = b32(bot(fun__archive_read_next_header2)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; R12 = bot(fun__archive_entry_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 FunctionConstraints "PRESERVES fun__archive_entry_free {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000089f7"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_free) ; RBX = b32(bot(fun__archive_read_next_header2)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; R12 = bot(fun__archive_entry_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "1000089f7: MOV RDI, R15 3"
 Post  "RAX = bot(fun__archive_entry_free) ; RBX = b32(bot(fun__archive_read_next_header2)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; R12 = bot(fun__archive_entry_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000089fa"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_free) ; RBX = b32(bot(fun__archive_read_next_header2)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; R12 = bot(fun__archive_entry_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "1000089fa: ExternalCall fun__archive_read_close 5"
 Post  "RAX = bot(fun__archive_read_close) ; RBX = b32(bot(fun__archive_read_next_header2)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; R12 = bot(fun__archive_entry_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 FunctionConstraints "PRESERVES fun__archive_read_close {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000089ff"
 Separations "((RSP_0 -64 56),8) SEP (bot(fun____error),4); ((RSP_0 -64 56),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 56),8) SEP (0x10000c010,8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 24),4); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 32),4); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 36),4); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 44),4); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 80),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 89),1); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 144),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 180),4); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 185),1); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 192),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 200),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 224),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 232),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 248),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_close) ; RBX = b32(bot(fun__archive_read_next_header2)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; R12 = bot(fun__archive_entry_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "1000089ff: MOV QWORD PTR [RBP - 48], 0 8"
 Post  "RAX = bot(fun__archive_read_close) ; RBX = b32(bot(fun__archive_read_next_header2)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; R12 = bot(fun__archive_entry_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008a07"
 Separations "((RSI_0 +64 200),8) SEP (bot(fun____error),4); ((RSI_0 +64 200),8) SEP (RSP_0,8); ((RSI_0 +64 200),8) SEP ([0x10000c010,8]_0,8); ((RSI_0 +64 200),8) SEP (0x10000c010,8); ((RSI_0 +64 200),8) SEP ((RSP_0 -64 8),8); ((RSI_0 +64 200),8) SEP ((RSP_0 -64 16),8); ((RSI_0 +64 200),8) SEP ((RSP_0 -64 24),8); ((RSI_0 +64 200),8) SEP ((RSP_0 -64 32),8); ((RSI_0 +64 200),8) SEP ((RSP_0 -64 40),8); ((RSI_0 +64 200),8) SEP ((RSP_0 -64 48),8); ((RSI_0 +64 200),8) SEP ((RSP_0 -64 56),8); ((RSI_0 +64 200),8) SEP ((RSP_0 -64 64),8); ((RSI_0 +64 200),8) SEP ((RSP_0 -64 72),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_close) ; RBX = b32(bot(fun__archive_read_next_header2)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; R12 = bot(fun__archive_entry_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "100008a07: MOV RDI, QWORD PTR [R14 + 200] 7"
 Post  "RAX = bot(fun__archive_read_close) ; RBX = b32(bot(fun__archive_read_next_header2)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; R12 = bot(fun__archive_entry_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008a0e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_close) ; RBX = b32(bot(fun__archive_read_next_header2)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; R12 = bot(fun__archive_entry_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "100008a0e: LEA RSI, [RBP - 48] 4"
 Post  "RAX = bot(fun__archive_read_close) ; RBX = b32(bot(fun__archive_read_next_header2)) ; RSI = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; R12 = bot(fun__archive_entry_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008a12"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_close) ; RBX = b32(bot(fun__archive_read_next_header2)) ; RSI = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; R12 = bot(fun__archive_entry_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "100008a12: LEA RDX, [RBP - 72] 4"
 Post  "RAX = bot(fun__archive_read_close) ; RBX = b32(bot(fun__archive_read_next_header2)) ; RDX = (RSP_0 -64 80) ; RSI = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; R12 = bot(fun__archive_entry_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008a16"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_close) ; RBX = b32(bot(fun__archive_read_next_header2)) ; RDX = (RSP_0 -64 80) ; RSI = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; R12 = bot(fun__archive_entry_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "100008a16: ExternalCall fun__archive_entry_linkify 5"
 Post  "RAX = bot(fun__archive_entry_linkify) ; RBX = b32(bot(fun__archive_read_next_header2)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; R12 = bot(fun__archive_entry_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 FunctionConstraints "PRESERVES fun__archive_entry_linkify {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008a1b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_linkify) ; RBX = b32(bot(fun__archive_read_next_header2)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; R12 = bot(fun__archive_entry_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "100008a1b: JMP 4295002493 5"
 Post  "RAX = bot(fun__archive_entry_linkify) ; RBX = b32(bot(fun__archive_read_next_header2)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; R12 = bot(fun__archive_entry_new) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100008396, blockId == 91 ##
######################################
*)

htriple "ht_100008969"
 Separations "((RSI_0 +64 180),4) SEP (bot(fun____error),4); ((RSI_0 +64 180),4) SEP (RSP_0,8); ((RSI_0 +64 180),4) SEP ([0x10000c010,8]_0,8); ((RSI_0 +64 180),4) SEP (0x10000c010,8); ((RSI_0 +64 180),4) SEP ((RSP_0 -64 8),8); ((RSI_0 +64 180),4) SEP ((RSP_0 -64 16),8); ((RSI_0 +64 180),4) SEP ((RSP_0 -64 24),8); ((RSI_0 +64 180),4) SEP ((RSP_0 -64 32),8); ((RSI_0 +64 180),4) SEP ((RSP_0 -64 40),8); ((RSI_0 +64 180),4) SEP ((RSP_0 -64 48),8); ((RSI_0 +64 180),4) SEP ((RSP_0 -64 56),8); ((RSI_0 +64 180),4) SEP ((RSP_0 -64 64),8); ((RSI_0 +64 180),4) SEP ((RSP_0 -64 72),8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000099ad) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "100008969: MOV DWORD PTR [R14 + 180], 1 11"
 Post  "RAX = bot(fun_0x1000099ad) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 180),4] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100008396, blockId == 92 ##
######################################
*)

htriple "ht_1000089d4"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000099ad) ; RBX = b32(bot(fun__archive_read_next_header2)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; R12 = b32(bot(fun__archive_errno)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "1000089d4: MOV RDI, R15 3"
 Post  "RAX = bot(fun_0x1000099ad) ; RBX = b32(bot(fun__archive_read_next_header2)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; R12 = b32(bot(fun__archive_errno)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000089d7"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000099ad) ; RBX = b32(bot(fun__archive_read_next_header2)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; R12 = b32(bot(fun__archive_errno)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "1000089d7: ExternalCall fun__archive_read_close 5"
 Post  "RAX = bot(fun__archive_read_close) ; RBX = b32(bot(fun__archive_read_next_header2)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; R12 = b32(bot(fun__archive_errno)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 FunctionConstraints "PRESERVES fun__archive_read_close {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000089dc"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_close) ; RBX = b32(bot(fun__archive_read_next_header2)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; R12 = b32(bot(fun__archive_errno)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "1000089dc: JMP 4295002484 2"
 Post  "RAX = bot(fun__archive_read_close) ; RBX = b32(bot(fun__archive_read_next_header2)) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; R12 = b32(bot(fun__archive_errno)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100008396, blockId == 93 ##
######################################
*)

htriple "ht_100008974"
 Separations "((RSP_0 -64 56),8) SEP (bot(fun____error),4); ((RSP_0 -64 56),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 56),8) SEP (0x10000c010,8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 24),4); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 32),4); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 36),4); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 44),4); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 80),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 89),1); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 144),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 180),4); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 185),1); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 192),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 200),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 224),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 232),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 248),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "100008974: MOV RDI, QWORD PTR [RBP - 48] 4"
 Post  "RDI = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008978"
 Separations ""
 Assertions  ""
 Pre   "RDI = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "100008978: ExternalCall fun__archive_entry_free 5"
 Post  "RAX = bot(fun__archive_entry_free) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 FunctionConstraints "PRESERVES fun__archive_entry_free {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100008396, blockId == 94 ##
######################################
*)

htriple "ht_10000897d"
 Separations "((RSP_0 -64 56),8) SEP (bot(fun____error),4); ((RSP_0 -64 56),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 56),8) SEP (0x10000c010,8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 24),4); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 32),4); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 36),4); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 44),4); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 80),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 89),1); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 144),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 180),4); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 185),1); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 192),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 200),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 224),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 232),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 248),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "10000897d: MOV RDI, QWORD PTR [RBP - 48] 4"
 Post  "RDI = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008981"
 Separations ""
 Assertions  ""
 Pre   "RDI = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "100008981: TEST RDI, RDI 3"
 Post  "RDI = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008984"
 Separations ""
 Assertions  ""
 Pre   "RDI = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "100008984: JNE 4295002413 2"
 Post  "RDI = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0x10000b871 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100008396, blockId == 95 ##
######################################
*)

htriple "ht_100008a30"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_write_close) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "100008a30: MOV RDI, R13 3"
 Post  "RAX = bot(fun__archive_write_close) ; RDI = RDI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008a33"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_write_close) ; RDI = RDI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "100008a33: ExternalCall fun__archive_error_string 5"
 Post  "RAX = bot(fun__archive_error_string) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 FunctionConstraints "PRESERVES fun__archive_error_string {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008a38"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_error_string) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "100008a38: LEA RSI, [RIP + 11826] 7"
 Post  "RAX = bot(fun__archive_error_string) ; RSI = 0x10000b871 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008a3f"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_error_string) ; RSI = 0x10000b871 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "100008a3f: XOR EDI, EDI 2"
 Post  "RAX = bot(fun__archive_error_string) ; RDI = 0 ; RSI = 0x10000b871 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008a41"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_error_string) ; RDI = 0 ; RSI = 0x10000b871 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "100008a41: MOV RDX, RAX 3"
 Post  "RAX = bot(fun__archive_error_string) ; RDX = bot(fun__archive_error_string) ; RDI = 0 ; RSI = 0x10000b871 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008a44"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_error_string) ; RDX = bot(fun__archive_error_string) ; RDI = 0 ; RSI = 0x10000b871 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "100008a44: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RDX = bot(fun__archive_error_string) ; RDI = 0 ; RSI = 0x10000b871 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008a46"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RDX = bot(fun__archive_error_string) ; RDI = 0 ; RSI = 0x10000b871 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "100008a46: ExternalCall fun_0x1000099ad 5"
 Post  "RAX = bot(fun_0x1000099ad) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 FunctionConstraints "PRESERVES fun_0x1000099ad {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008a4b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000099ad) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "100008a4b: LEA RAX, [R14 + 180] 7"
 Post  "RAX = (RSI_0 +64 180) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100008396, blockId == 96 ##
######################################
*)

htriple "ht_100008a58"
 Separations "((RSI_0 +64 224),8) SEP (bot(fun____error),4); ((RSI_0 +64 224),8) SEP (RSP_0,8); ((RSI_0 +64 224),8) SEP ([0x10000c010,8]_0,8); ((RSI_0 +64 224),8) SEP (0x10000c010,8); ((RSI_0 +64 224),8) SEP ((RSP_0 -64 8),8); ((RSI_0 +64 224),8) SEP ((RSP_0 -64 16),8); ((RSI_0 +64 224),8) SEP ((RSP_0 -64 24),8); ((RSI_0 +64 224),8) SEP ((RSP_0 -64 32),8); ((RSI_0 +64 224),8) SEP ((RSP_0 -64 40),8); ((RSI_0 +64 224),8) SEP ((RSP_0 -64 48),8); ((RSI_0 +64 224),8) SEP ((RSP_0 -64 56),8); ((RSI_0 +64 224),8) SEP ((RSP_0 -64 64),8); ((RSI_0 +64 224),8) SEP ((RSP_0 -64 72),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "100008a58: MOV RDI, QWORD PTR [R14 + 224] 7"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008a5f"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "100008a5f: ExternalCall fun__free 5"
 Post  "RAX = bot(fun__free) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDI_0"
 FunctionConstraints "PRESERVES fun__free {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008a64"
 Separations "((RSI_0 +64 200),8) SEP (bot(fun____error),4); ((RSI_0 +64 200),8) SEP (RSP_0,8); ((RSI_0 +64 200),8) SEP ([0x10000c010,8]_0,8); ((RSI_0 +64 200),8) SEP (0x10000c010,8); ((RSI_0 +64 200),8) SEP ((RSP_0 -64 8),8); ((RSI_0 +64 200),8) SEP ((RSP_0 -64 16),8); ((RSI_0 +64 200),8) SEP ((RSP_0 -64 24),8); ((RSI_0 +64 200),8) SEP ((RSP_0 -64 32),8); ((RSI_0 +64 200),8) SEP ((RSP_0 -64 40),8); ((RSI_0 +64 200),8) SEP ((RSP_0 -64 48),8); ((RSI_0 +64 200),8) SEP ((RSP_0 -64 56),8); ((RSI_0 +64 200),8) SEP ((RSP_0 -64 64),8); ((RSI_0 +64 200),8) SEP ((RSP_0 -64 72),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__free) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "100008a64: MOV RDI, QWORD PTR [R14 + 200] 7"
 Post  "RAX = bot(fun__free) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008a6b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__free) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "100008a6b: ExternalCall fun__archive_entry_linkresolver_free 5"
 Post  "RAX = bot(fun__archive_entry_linkresolver_free) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDI_0"
 FunctionConstraints "PRESERVES fun__archive_entry_linkresolver_free {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008a70"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_linkresolver_free) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "100008a70: XOR EBX, EBX 2"
 Post  "RAX = bot(fun__archive_entry_linkresolver_free) ; RBX = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008a72"
 Separations "((RSI_0 +64 200),8) SEP (bot(fun____error),4); ((RSI_0 +64 200),8) SEP (RSP_0,8); ((RSI_0 +64 200),8) SEP ([0x10000c010,8]_0,8); ((RSI_0 +64 200),8) SEP (0x10000c010,8); ((RSI_0 +64 200),8) SEP ((RSP_0 -64 8),8); ((RSI_0 +64 200),8) SEP ((RSP_0 -64 16),8); ((RSI_0 +64 200),8) SEP ((RSP_0 -64 24),8); ((RSI_0 +64 200),8) SEP ((RSP_0 -64 32),8); ((RSI_0 +64 200),8) SEP ((RSP_0 -64 40),8); ((RSI_0 +64 200),8) SEP ((RSP_0 -64 48),8); ((RSI_0 +64 200),8) SEP ((RSP_0 -64 56),8); ((RSI_0 +64 200),8) SEP ((RSP_0 -64 64),8); ((RSI_0 +64 200),8) SEP ((RSP_0 -64 72),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_linkresolver_free) ; RBX = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "100008a72: MOV QWORD PTR [R14 + 200], RBX 7"
 Post  "RAX = bot(fun__archive_entry_linkresolver_free) ; RBX = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 200),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008a79"
 Separations "((RSI_0 +64 192),8) SEP (bot(fun____error),4); ((RSI_0 +64 192),8) SEP (RSP_0,8); ((RSI_0 +64 192),8) SEP ([0x10000c010,8]_0,8); ((RSI_0 +64 192),8) SEP (0x10000c010,8); ((RSI_0 +64 192),8) SEP ((RSP_0 -64 8),8); ((RSI_0 +64 192),8) SEP ((RSP_0 -64 16),8); ((RSI_0 +64 192),8) SEP ((RSP_0 -64 24),8); ((RSI_0 +64 192),8) SEP ((RSP_0 -64 32),8); ((RSI_0 +64 192),8) SEP ((RSP_0 -64 40),8); ((RSI_0 +64 192),8) SEP ((RSP_0 -64 48),8); ((RSI_0 +64 192),8) SEP ((RSP_0 -64 56),8); ((RSI_0 +64 192),8) SEP ((RSP_0 -64 64),8); ((RSI_0 +64 192),8) SEP ((RSP_0 -64 72),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_linkresolver_free) ; RBX = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 200),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "100008a79: MOV RDI, QWORD PTR [R14 + 192] 7"
 Post  "RAX = bot(fun__archive_entry_linkresolver_free) ; RBX = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 200),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008a80"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_linkresolver_free) ; RBX = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 200),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "100008a80: ExternalCall fun__archive_read_free 5"
 Post  "RAX = bot(fun__archive_read_free) ; RBX = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDI_0"
 FunctionConstraints "PRESERVES fun__archive_read_free {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008a85"
 Separations "((RSI_0 +64 192),8) SEP (bot(fun____error),4); ((RSI_0 +64 192),8) SEP (RSP_0,8); ((RSI_0 +64 192),8) SEP ([0x10000c010,8]_0,8); ((RSI_0 +64 192),8) SEP (0x10000c010,8); ((RSI_0 +64 192),8) SEP ((RSP_0 -64 8),8); ((RSI_0 +64 192),8) SEP ((RSP_0 -64 16),8); ((RSI_0 +64 192),8) SEP ((RSP_0 -64 24),8); ((RSI_0 +64 192),8) SEP ((RSP_0 -64 32),8); ((RSI_0 +64 192),8) SEP ((RSP_0 -64 40),8); ((RSI_0 +64 192),8) SEP ((RSP_0 -64 48),8); ((RSI_0 +64 192),8) SEP ((RSP_0 -64 56),8); ((RSI_0 +64 192),8) SEP ((RSP_0 -64 64),8); ((RSI_0 +64 192),8) SEP ((RSP_0 -64 72),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_free) ; RBX = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "100008a85: MOV QWORD PTR [R14 + 192], RBX 7"
 Post  "RAX = bot(fun__archive_read_free) ; RBX = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 192),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008a8c"
 Separations "((RSI_0 +64 37),1) SEP (RSP_0,8); ((RSI_0 +64 37),1) SEP (0x10000c010,8); ((RSI_0 +64 37),1) SEP ((RSP_0 -64 8),8); ((RSI_0 +64 37),1) SEP ((RSP_0 -64 16),8); ((RSI_0 +64 37),1) SEP ((RSP_0 -64 24),8); ((RSI_0 +64 37),1) SEP ((RSP_0 -64 32),8); ((RSI_0 +64 37),1) SEP ((RSP_0 -64 40),8); ((RSI_0 +64 37),1) SEP ((RSP_0 -64 48),8); ((RSI_0 +64 37),1) SEP ((RSP_0 -64 56),8); ((RSI_0 +64 37),1) SEP ((RSP_0 -64 64),8); ((RSI_0 +64 37),1) SEP ((RSP_0 -64 72),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_free) ; RBX = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 192),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "100008a8c: TEST BYTE PTR [R14 + 37], 16 5"
 Post  "RAX = bot(fun__archive_read_free) ; RBX = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 192),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008a91"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_free) ; RBX = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 192),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "100008a91: JE 4295002822 2"
 Post  "RAX = bot(fun__archive_read_free) ; RBX = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 192),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100008396, blockId == 97 ##
######################################
*)

htriple "ht_100008a93"
 Separations "(0x10000c010,8) SEP (bot(fun____error),4); (0x10000c010,8) SEP (RSP_0,8); (0x10000c010,8) SEP ([0x10000c010,8]_0,8); (0x10000c010,8) SEP ((RSI_0 +64 16),8); (0x10000c010,8) SEP ((RSI_0 +64 24),4); (0x10000c010,8) SEP ((RSI_0 +64 32),4); (0x10000c010,8) SEP ((RSI_0 +64 36),4); (0x10000c010,8) SEP ((RSI_0 +64 44),4); (0x10000c010,8) SEP ((RSI_0 +64 80),8); (0x10000c010,8) SEP ((RSI_0 +64 89),1); (0x10000c010,8) SEP ((RSI_0 +64 144),8); (0x10000c010,8) SEP ((RSI_0 +64 180),4); (0x10000c010,8) SEP ((RSI_0 +64 185),1); (0x10000c010,8) SEP ((RSI_0 +64 192),8); (0x10000c010,8) SEP ((RSI_0 +64 200),8); (0x10000c010,8) SEP ((RSI_0 +64 224),8); (0x10000c010,8) SEP ((RSI_0 +64 232),8); (0x10000c010,8) SEP ((RSI_0 +64 248),8); (0x10000c010,8) SEP ((RSP_0 -64 8),8); (0x10000c010,8) SEP ((RSP_0 -64 16),8); (0x10000c010,8) SEP ((RSP_0 -64 24),8); (0x10000c010,8) SEP ((RSP_0 -64 32),8); (0x10000c010,8) SEP ((RSP_0 -64 40),8); (0x10000c010,8) SEP ((RSP_0 -64 48),8); (0x10000c010,8) SEP ((RSP_0 -64 56),8); (0x10000c010,8) SEP ((RSP_0 -64 64),8); (0x10000c010,8) SEP ((RSP_0 -64 72),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_free) ; RBX = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 192),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "100008a93: MOV RAX, QWORD PTR [RIP + 13686] 7"
 Post  "RAX = [0x10000c010,8]_0 ; RBX = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 192),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008a9a"
 Separations "([0x10000c010,8]_0,8) SEP (RSP_0,8); ([0x10000c010,8]_0,8) SEP (0x10000c010,8); ([0x10000c010,8]_0,8) SEP ((RSI_0 +64 24),4); ([0x10000c010,8]_0,8) SEP ((RSI_0 +64 144),8); ([0x10000c010,8]_0,8) SEP ((RSI_0 +64 180),4); ([0x10000c010,8]_0,8) SEP ((RSI_0 +64 185),1); ([0x10000c010,8]_0,8) SEP ((RSI_0 +64 192),8); ([0x10000c010,8]_0,8) SEP ((RSI_0 +64 200),8); ([0x10000c010,8]_0,8) SEP ((RSI_0 +64 224),8); ([0x10000c010,8]_0,8) SEP ((RSI_0 +64 232),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 8),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 16),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 24),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 32),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 40),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 48),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 56),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 64),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 72),8)"
 Assertions  ""
 Pre   "RAX = [0x10000c010,8]_0 ; RBX = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 192),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "100008a9a: MOV RBX, QWORD PTR [RAX] 3"
 Post  "RAX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 192),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008a9d"
 Separations ""
 Assertions  ""
 Pre   "RAX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 192),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "100008a9d: MOV RDI, R13 3"
 Post  "RAX = [0x10000c010,8]_0 ; RDI = RDI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 192),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008aa0"
 Separations ""
 Assertions  ""
 Pre   "RAX = [0x10000c010,8]_0 ; RDI = RDI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 192),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "100008aa0: MOV ESI, 4294967295 5"
 Post  "RAX = [0x10000c010,8]_0 ; RDI = RDI_0 ; RSI = 0xffffffff ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 192),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008aa5"
 Separations ""
 Assertions  ""
 Pre   "RAX = [0x10000c010,8]_0 ; RDI = RDI_0 ; RSI = 0xffffffff ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 192),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "100008aa5: ExternalCall fun__archive_filter_bytes 5"
 Post  "RAX = bot(fun__archive_filter_bytes) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDI_0"
 FunctionConstraints "PRESERVES fun__archive_filter_bytes {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008aaa"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_filter_bytes) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "100008aaa: MOV RDI, RAX 3"
 Post  "RAX = bot(fun__archive_filter_bytes) ; RDI = bot(fun__archive_filter_bytes) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008aad"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_filter_bytes) ; RDI = bot(fun__archive_filter_bytes) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "100008aad: ExternalCall fun_0x100007c70 5"
 Post  "RAX = bot(fun_0x100007c70) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDI_0"
 FunctionConstraints "PRESERVES fun_0x100007c70 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008ab2"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100007c70) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "100008ab2: LEA RSI, [RIP + 12883] 7"
 Post  "RAX = bot(fun_0x100007c70) ; RSI = 0x10000bd0c ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008ab9"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100007c70) ; RSI = 0x10000bd0c ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "100008ab9: MOV RDI, RBX 3"
 Post  "RAX = bot(fun_0x100007c70) ; RSI = 0x10000bd0c ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008abc"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100007c70) ; RSI = 0x10000bd0c ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "100008abc: MOV RDX, RAX 3"
 Post  "RAX = bot(fun_0x100007c70) ; RDX = bot(fun_0x100007c70) ; RSI = 0x10000bd0c ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008abf"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100007c70) ; RDX = bot(fun_0x100007c70) ; RSI = 0x10000bd0c ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "100008abf: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RDX = bot(fun_0x100007c70) ; RSI = 0x10000bd0c ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008ac1"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RDX = bot(fun_0x100007c70) ; RSI = 0x10000bd0c ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "100008ac1: ExternalCall fun__fprintf 5"
 Post  "RAX = bot(fun__fprintf) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDI_0"
 FunctionConstraints "PRESERVES fun__fprintf {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100008396, blockId == 98 ##
######################################
*)

htriple "ht_100008ac6"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "100008ac6: MOV RDI, R13 3"
 Post  "RDI = RDI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008ac9"
 Separations ""
 Assertions  ""
 Pre   "RDI = RDI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "100008ac9: ExternalCall fun__archive_write_free 5"
 Post  "RAX = bot(fun__archive_write_free) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDI_0"
 FunctionConstraints "PRESERVES fun__archive_write_free {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008ace"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_write_free) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "100008ace: ADD RSP, 40 4"
 Post  "RAX = bot(fun__archive_write_free) ; RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008ad2"
 Separations "((RSP_0 -64 40),8) SEP (bot(fun____error),4); ((RSP_0 -64 40),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 40),8) SEP (0x10000c010,8); ((RSP_0 -64 40),8) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 40),8) SEP ((RSI_0 +64 24),4); ((RSP_0 -64 40),8) SEP ((RSI_0 +64 32),4); ((RSP_0 -64 40),8) SEP ((RSI_0 +64 36),4); ((RSP_0 -64 40),8) SEP ((RSI_0 +64 44),4); ((RSP_0 -64 40),8) SEP ((RSI_0 +64 80),8); ((RSP_0 -64 40),8) SEP ((RSI_0 +64 89),1); ((RSP_0 -64 40),8) SEP ((RSI_0 +64 144),8); ((RSP_0 -64 40),8) SEP ((RSI_0 +64 180),4); ((RSP_0 -64 40),8) SEP ((RSI_0 +64 185),1); ((RSP_0 -64 40),8) SEP ((RSI_0 +64 192),8); ((RSP_0 -64 40),8) SEP ((RSI_0 +64 200),8); ((RSP_0 -64 40),8) SEP ((RSI_0 +64 224),8); ((RSP_0 -64 40),8) SEP ((RSI_0 +64 232),8); ((RSP_0 -64 40),8) SEP ((RSI_0 +64 248),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__archive_write_free) ; RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "100008ad2: POP RBX 1"
 Post  "RAX = bot(fun__archive_write_free) ; RBX = RBX_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008ad3"
 Separations "((RSP_0 -64 32),8) SEP (bot(fun____error),4); ((RSP_0 -64 32),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 32),8) SEP (0x10000c010,8); ((RSP_0 -64 32),8) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 32),8) SEP ((RSI_0 +64 24),4); ((RSP_0 -64 32),8) SEP ((RSI_0 +64 32),4); ((RSP_0 -64 32),8) SEP ((RSI_0 +64 36),4); ((RSP_0 -64 32),8) SEP ((RSI_0 +64 44),4); ((RSP_0 -64 32),8) SEP ((RSI_0 +64 80),8); ((RSP_0 -64 32),8) SEP ((RSI_0 +64 89),1); ((RSP_0 -64 32),8) SEP ((RSI_0 +64 144),8); ((RSP_0 -64 32),8) SEP ((RSI_0 +64 180),4); ((RSP_0 -64 32),8) SEP ((RSI_0 +64 185),1); ((RSP_0 -64 32),8) SEP ((RSI_0 +64 192),8); ((RSP_0 -64 32),8) SEP ((RSI_0 +64 200),8); ((RSP_0 -64 32),8) SEP ((RSI_0 +64 224),8); ((RSP_0 -64 32),8) SEP ((RSI_0 +64 232),8); ((RSP_0 -64 32),8) SEP ((RSI_0 +64 248),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__archive_write_free) ; RBX = RBX_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "100008ad3: POP R12 2"
 Post  "RAX = bot(fun__archive_write_free) ; RBX = RBX_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008ad5"
 Separations "((RSP_0 -64 24),8) SEP (bot(fun____error),4); ((RSP_0 -64 24),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 24),8) SEP (0x10000c010,8); ((RSP_0 -64 24),8) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 24),8) SEP ((RSI_0 +64 24),4); ((RSP_0 -64 24),8) SEP ((RSI_0 +64 32),4); ((RSP_0 -64 24),8) SEP ((RSI_0 +64 36),4); ((RSP_0 -64 24),8) SEP ((RSI_0 +64 44),4); ((RSP_0 -64 24),8) SEP ((RSI_0 +64 80),8); ((RSP_0 -64 24),8) SEP ((RSI_0 +64 89),1); ((RSP_0 -64 24),8) SEP ((RSI_0 +64 144),8); ((RSP_0 -64 24),8) SEP ((RSI_0 +64 180),4); ((RSP_0 -64 24),8) SEP ((RSI_0 +64 185),1); ((RSP_0 -64 24),8) SEP ((RSI_0 +64 192),8); ((RSP_0 -64 24),8) SEP ((RSI_0 +64 200),8); ((RSP_0 -64 24),8) SEP ((RSI_0 +64 224),8); ((RSP_0 -64 24),8) SEP ((RSI_0 +64 232),8); ((RSP_0 -64 24),8) SEP ((RSI_0 +64 248),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__archive_write_free) ; RBX = RBX_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "100008ad5: POP R13 2"
 Post  "RAX = bot(fun__archive_write_free) ; RBX = RBX_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008ad7"
 Separations "((RSP_0 -64 16),8) SEP (bot(fun____error),4); ((RSP_0 -64 16),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 16),8) SEP (0x10000c010,8); ((RSP_0 -64 16),8) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 16),8) SEP ((RSI_0 +64 24),4); ((RSP_0 -64 16),8) SEP ((RSI_0 +64 32),4); ((RSP_0 -64 16),8) SEP ((RSI_0 +64 36),4); ((RSP_0 -64 16),8) SEP ((RSI_0 +64 44),4); ((RSP_0 -64 16),8) SEP ((RSI_0 +64 80),8); ((RSP_0 -64 16),8) SEP ((RSI_0 +64 89),1); ((RSP_0 -64 16),8) SEP ((RSI_0 +64 144),8); ((RSP_0 -64 16),8) SEP ((RSI_0 +64 180),4); ((RSP_0 -64 16),8) SEP ((RSI_0 +64 185),1); ((RSP_0 -64 16),8) SEP ((RSI_0 +64 192),8); ((RSP_0 -64 16),8) SEP ((RSI_0 +64 200),8); ((RSP_0 -64 16),8) SEP ((RSI_0 +64 224),8); ((RSP_0 -64 16),8) SEP ((RSI_0 +64 232),8); ((RSP_0 -64 16),8) SEP ((RSI_0 +64 248),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__archive_write_free) ; RBX = RBX_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "100008ad7: POP R14 2"
 Post  "RAX = bot(fun__archive_write_free) ; RBX = RBX_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008ad9"
 Separations "((RSP_0 -64 8),8) SEP (bot(fun____error),4); ((RSP_0 -64 8),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 8),8) SEP (0x10000c010,8); ((RSP_0 -64 8),8) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 8),8) SEP ((RSI_0 +64 24),4); ((RSP_0 -64 8),8) SEP ((RSI_0 +64 32),4); ((RSP_0 -64 8),8) SEP ((RSI_0 +64 36),4); ((RSP_0 -64 8),8) SEP ((RSI_0 +64 44),4); ((RSP_0 -64 8),8) SEP ((RSI_0 +64 80),8); ((RSP_0 -64 8),8) SEP ((RSI_0 +64 89),1); ((RSP_0 -64 8),8) SEP ((RSI_0 +64 144),8); ((RSP_0 -64 8),8) SEP ((RSI_0 +64 180),4); ((RSP_0 -64 8),8) SEP ((RSI_0 +64 185),1); ((RSP_0 -64 8),8) SEP ((RSI_0 +64 192),8); ((RSP_0 -64 8),8) SEP ((RSI_0 +64 200),8); ((RSP_0 -64 8),8) SEP ((RSI_0 +64 224),8); ((RSP_0 -64 8),8) SEP ((RSI_0 +64 232),8); ((RSP_0 -64 8),8) SEP ((RSI_0 +64 248),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__archive_write_free) ; RBX = RBX_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "100008ad9: POP R15 2"
 Post  "RAX = bot(fun__archive_write_free) ; RBX = RBX_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008adb"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_write_free) ; RBX = RBX_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "100008adb: POP RBP 1"
 Post  "RAX = bot(fun__archive_write_free) ; RBX = RBX_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008adc"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_write_free) ; RBX = RBX_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "100008adc: RET  1"
 Post  "RAX = bot(fun__archive_write_free) ; RBX = RBX_0 ; RSP = (RSP_0 +64 8) ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100008396, blockId == 99 ##
######################################
*)

htriple "ht_100008b3b"
 Separations "((RSP_0 -64 72),8) SEP (bot(fun____error),4); ((RSP_0 -64 72),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 72),8) SEP (0x10000c010,8); ((RSP_0 -64 72),8) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 72),8) SEP ((RSI_0 +64 24),4); ((RSP_0 -64 72),8) SEP ((RSI_0 +64 32),4); ((RSP_0 -64 72),8) SEP ((RSI_0 +64 36),4); ((RSP_0 -64 72),8) SEP ((RSI_0 +64 44),4); ((RSP_0 -64 72),8) SEP ((RSI_0 +64 80),8); ((RSP_0 -64 72),8) SEP ((RSI_0 +64 89),1); ((RSP_0 -64 72),8) SEP ((RSI_0 +64 144),8); ((RSP_0 -64 72),8) SEP ((RSI_0 +64 180),4); ((RSP_0 -64 72),8) SEP ((RSI_0 +64 185),1); ((RSP_0 -64 72),8) SEP ((RSI_0 +64 192),8); ((RSP_0 -64 72),8) SEP ((RSI_0 +64 200),8); ((RSP_0 -64 72),8) SEP ((RSI_0 +64 224),8); ((RSP_0 -64 72),8) SEP ((RSI_0 +64 232),8); ((RSP_0 -64 72),8) SEP ((RSI_0 +64 248),8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000099ad) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008b3b: MOV RAX, QWORD PTR [RBP - 64] 4"
 Post  "RAX = (RSI_0 +64 180) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008b3f"
 Separations ""
 Assertions  ""
 Pre   "RAX = (RSI_0 +64 180) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
 Instruction "100008b3f: JMP 4295002706 5"
 Post  "RAX = (RSI_0 +64 180) ; RBX = (RSP_0 -64 56) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDI_0 ; [(RSP_0 -64 72),8] = (RSI_0 +64 180)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 100008396, blockId == 100 ##
#######################################
*)

htriple "ht_100008a52"
 Separations "((RSI_0 +64 180),4) SEP (bot(fun____error),4); ((RSI_0 +64 180),4) SEP (RSP_0,8); ((RSI_0 +64 180),4) SEP ([0x10000c010,8]_0,8); ((RSI_0 +64 180),4) SEP (0x10000c010,8); ((RSI_0 +64 180),4) SEP ((RSP_0 -64 8),8); ((RSI_0 +64 180),4) SEP ((RSP_0 -64 16),8); ((RSI_0 +64 180),4) SEP ((RSP_0 -64 24),8); ((RSI_0 +64 180),4) SEP ((RSP_0 -64 32),8); ((RSI_0 +64 180),4) SEP ((RSP_0 -64 40),8); ((RSI_0 +64 180),4) SEP ((RSP_0 -64 48),8); ((RSI_0 +64 180),4) SEP ((RSP_0 -64 56),8); ((RSI_0 +64 180),4) SEP ((RSP_0 -64 64),8); ((RSI_0 +64 180),4) SEP ((RSP_0 -64 72),8)"
 Assertions  ""
 Pre   "RAX = (RSI_0 +64 180) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDI_0"
 Instruction "100008a52: MOV DWORD PTR [RAX], 1 6"
 Post  "RAX = (RSI_0 +64 180) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSI_0 +64 180),4] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 100008396, blockId == 101 ##
#######################################
*)

htriple "ht_100008b88"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "100008b88: MOV EDI, 1 5"
 Post  "RDI = 1 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008b8d"
 Separations ""
 Assertions  ""
 Pre   "RDI = 1 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "100008b8d: XOR ESI, ESI 2"
 Post  "RDI = 1 ; RSI = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 100008396, blockId == 102 ##
#######################################
*)

htriple "ht_100008b8f"
 Separations ""
 Assertions  ""
 Pre   "RDI = 1 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "100008b8f: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RDI = 1 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100008b91"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RDI = 1 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "100008b91: ExternalCall fun_0x100009ac2 5"
 Post  "RAX = bot(fun_0x100009ac2) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 FunctionConstraints "PRESERVES fun_0x100009ac2 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




end
end
