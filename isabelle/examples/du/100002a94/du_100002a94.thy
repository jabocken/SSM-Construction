theory du_100002a94
imports "../../../isabelle/X86_Semantics/X86_Parse_Hoare_Triples"


begin


context semantics
begin

(*
#####################################
## Entry = 100002a94, blockId == 0 ##
#####################################
*)

htriple "ht_100002a94"
 Separations "((RSP_0 -64 8),8) SEP (bot(fun____error),4); ((RSP_0 -64 8),8) SEP (bot(fun__fts_read_INODE64),8); ((RSP_0 -64 8),8) SEP (RSI_0,8); ((RSP_0 -64 8),8) SEP ([0x100004018,8]_0,8); ((RSP_0 -64 8),8) SEP ([0x100004020,8]_0,4); ((RSP_0 -64 8),8) SEP (0x100004018,8); ((RSP_0 -64 8),8) SEP (0x100004020,8); ((RSP_0 -64 8),8) SEP (0x100004180,8); ((RSP_0 -64 8),8) SEP (0x100004188,8); ((RSP_0 -64 8),8) SEP (0x100004190,8); ((RSP_0 -64 8),8) SEP (0x100004198,8); ((RSP_0 -64 8),8) SEP (0x1000041a0,1); ((RSP_0 -64 8),8) SEP (0x1000041a8,8); ((RSP_0 -64 8),8) SEP (0x1000041b0,8); ((RSP_0 -64 8),8) SEP (0x1000041b8,8); ((RSP_0 -64 8),8) SEP (0x1000041c0,8); ((RSP_0 -64 8),8) SEP (0x1000041c8,1); ((RSP_0 -64 8),8) SEP (0x1000041d0,8); ((RSP_0 -64 8),8) SEP (0x1000041d8,8); ((RSP_0 -64 8),8) SEP ((bot(fun__fts_read_INODE64) +64 8),8); ((RSP_0 -64 8),8) SEP ((bot(fun__fts_read_INODE64) +64 24),8); ((RSP_0 -64 8),8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); ((RSP_0 -64 8),8) SEP ((bot(fun__fts_read_INODE64) +64 56),4); ((RSP_0 -64 8),8) SEP ((bot(fun__fts_read_INODE64) +64 86),2); ((RSP_0 -64 8),8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); ((RSP_0 -64 8),8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); ((RSP_0 -64 8),8) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 8),8) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); ((RSP_0 -64 8),8) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100004180,8] = [0x100004180,8]_0 ; [0x100004188,8] = [0x100004188,8]_0 ; [0x100004190,8] = [0x100004190,8]_0 ; [0x100004198,8] = [0x100004198,8]_0 ; [0x1000041a0,1] = [0x1000041a0,1]_0 ; [0x1000041a8,8] = [0x1000041a8,8]_0 ; [0x1000041b0,8] = [0x1000041b0,8]_0 ; [0x1000041b8,8] = [0x1000041b8,8]_0 ; [0x1000041c0,8] = [0x1000041c0,8]_0 ; [0x1000041c8,1] = [0x1000041c8,1]_0 ; [0x1000041d0,8] = [0x1000041d0,8]_0 ; [0x1000041d8,8] = [0x1000041d8,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSP_0 -64 8),8] = [(RSP_0 -64 8),8]_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 76),4] = [(RSP_0 -64 76),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 84),4] = [(RSP_0 -64 84),4]_0 ; [(RSP_0 -64 88),4] = [(RSP_0 -64 88),4]_0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = [(RSP_0 -64 108),4]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002a94: PUSH RBP 1"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100004180,8] = [0x100004180,8]_0 ; [0x100004188,8] = [0x100004188,8]_0 ; [0x100004190,8] = [0x100004190,8]_0 ; [0x100004198,8] = [0x100004198,8]_0 ; [0x1000041a0,1] = [0x1000041a0,1]_0 ; [0x1000041a8,8] = [0x1000041a8,8]_0 ; [0x1000041b0,8] = [0x1000041b0,8]_0 ; [0x1000041b8,8] = [0x1000041b8,8]_0 ; [0x1000041c0,8] = [0x1000041c0,8]_0 ; [0x1000041c8,1] = [0x1000041c8,1]_0 ; [0x1000041d0,8] = [0x1000041d0,8]_0 ; [0x1000041d8,8] = [0x1000041d8,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 76),4] = [(RSP_0 -64 76),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 84),4] = [(RSP_0 -64 84),4]_0 ; [(RSP_0 -64 88),4] = [(RSP_0 -64 88),4]_0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = [(RSP_0 -64 108),4]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002a95"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100004180,8] = [0x100004180,8]_0 ; [0x100004188,8] = [0x100004188,8]_0 ; [0x100004190,8] = [0x100004190,8]_0 ; [0x100004198,8] = [0x100004198,8]_0 ; [0x1000041a0,1] = [0x1000041a0,1]_0 ; [0x1000041a8,8] = [0x1000041a8,8]_0 ; [0x1000041b0,8] = [0x1000041b0,8]_0 ; [0x1000041b8,8] = [0x1000041b8,8]_0 ; [0x1000041c0,8] = [0x1000041c0,8]_0 ; [0x1000041c8,1] = [0x1000041c8,1]_0 ; [0x1000041d0,8] = [0x1000041d0,8]_0 ; [0x1000041d8,8] = [0x1000041d8,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 76),4] = [(RSP_0 -64 76),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 84),4] = [(RSP_0 -64 84),4]_0 ; [(RSP_0 -64 88),4] = [(RSP_0 -64 88),4]_0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = [(RSP_0 -64 108),4]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002a95: MOV RBP, RSP 3"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100004180,8] = [0x100004180,8]_0 ; [0x100004188,8] = [0x100004188,8]_0 ; [0x100004190,8] = [0x100004190,8]_0 ; [0x100004198,8] = [0x100004198,8]_0 ; [0x1000041a0,1] = [0x1000041a0,1]_0 ; [0x1000041a8,8] = [0x1000041a8,8]_0 ; [0x1000041b0,8] = [0x1000041b0,8]_0 ; [0x1000041b8,8] = [0x1000041b8,8]_0 ; [0x1000041c0,8] = [0x1000041c0,8]_0 ; [0x1000041c8,1] = [0x1000041c8,1]_0 ; [0x1000041d0,8] = [0x1000041d0,8]_0 ; [0x1000041d8,8] = [0x1000041d8,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 76),4] = [(RSP_0 -64 76),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 84),4] = [(RSP_0 -64 84),4]_0 ; [(RSP_0 -64 88),4] = [(RSP_0 -64 88),4]_0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = [(RSP_0 -64 108),4]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002a98"
 Separations "((RSP_0 -64 16),8) SEP (bot(fun____error),4); ((RSP_0 -64 16),8) SEP (bot(fun__fts_read_INODE64),8); ((RSP_0 -64 16),8) SEP (RSI_0,8); ((RSP_0 -64 16),8) SEP ([0x100004018,8]_0,8); ((RSP_0 -64 16),8) SEP ([0x100004020,8]_0,4); ((RSP_0 -64 16),8) SEP (0x100004018,8); ((RSP_0 -64 16),8) SEP (0x100004020,8); ((RSP_0 -64 16),8) SEP (0x100004180,8); ((RSP_0 -64 16),8) SEP (0x100004188,8); ((RSP_0 -64 16),8) SEP (0x100004190,8); ((RSP_0 -64 16),8) SEP (0x100004198,8); ((RSP_0 -64 16),8) SEP (0x1000041a0,1); ((RSP_0 -64 16),8) SEP (0x1000041a8,8); ((RSP_0 -64 16),8) SEP (0x1000041b0,8); ((RSP_0 -64 16),8) SEP (0x1000041b8,8); ((RSP_0 -64 16),8) SEP (0x1000041c0,8); ((RSP_0 -64 16),8) SEP (0x1000041c8,1); ((RSP_0 -64 16),8) SEP (0x1000041d0,8); ((RSP_0 -64 16),8) SEP (0x1000041d8,8); ((RSP_0 -64 16),8) SEP ((bot(fun__fts_read_INODE64) +64 8),8); ((RSP_0 -64 16),8) SEP ((bot(fun__fts_read_INODE64) +64 24),8); ((RSP_0 -64 16),8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); ((RSP_0 -64 16),8) SEP ((bot(fun__fts_read_INODE64) +64 56),4); ((RSP_0 -64 16),8) SEP ((bot(fun__fts_read_INODE64) +64 86),2); ((RSP_0 -64 16),8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); ((RSP_0 -64 16),8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); ((RSP_0 -64 16),8) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 16),8) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); ((RSP_0 -64 16),8) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100004180,8] = [0x100004180,8]_0 ; [0x100004188,8] = [0x100004188,8]_0 ; [0x100004190,8] = [0x100004190,8]_0 ; [0x100004198,8] = [0x100004198,8]_0 ; [0x1000041a0,1] = [0x1000041a0,1]_0 ; [0x1000041a8,8] = [0x1000041a8,8]_0 ; [0x1000041b0,8] = [0x1000041b0,8]_0 ; [0x1000041b8,8] = [0x1000041b8,8]_0 ; [0x1000041c0,8] = [0x1000041c0,8]_0 ; [0x1000041c8,1] = [0x1000041c8,1]_0 ; [0x1000041d0,8] = [0x1000041d0,8]_0 ; [0x1000041d8,8] = [0x1000041d8,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 76),4] = [(RSP_0 -64 76),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 84),4] = [(RSP_0 -64 84),4]_0 ; [(RSP_0 -64 88),4] = [(RSP_0 -64 88),4]_0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = [(RSP_0 -64 108),4]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002a98: PUSH R15 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100004180,8] = [0x100004180,8]_0 ; [0x100004188,8] = [0x100004188,8]_0 ; [0x100004190,8] = [0x100004190,8]_0 ; [0x100004198,8] = [0x100004198,8]_0 ; [0x1000041a0,1] = [0x1000041a0,1]_0 ; [0x1000041a8,8] = [0x1000041a8,8]_0 ; [0x1000041b0,8] = [0x1000041b0,8]_0 ; [0x1000041b8,8] = [0x1000041b8,8]_0 ; [0x1000041c0,8] = [0x1000041c0,8]_0 ; [0x1000041c8,1] = [0x1000041c8,1]_0 ; [0x1000041d0,8] = [0x1000041d0,8]_0 ; [0x1000041d8,8] = [0x1000041d8,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 76),4] = [(RSP_0 -64 76),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 84),4] = [(RSP_0 -64 84),4]_0 ; [(RSP_0 -64 88),4] = [(RSP_0 -64 88),4]_0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = [(RSP_0 -64 108),4]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002a9a"
 Separations "((RSP_0 -64 24),8) SEP (bot(fun____error),4); ((RSP_0 -64 24),8) SEP (bot(fun__fts_read_INODE64),8); ((RSP_0 -64 24),8) SEP (RSI_0,8); ((RSP_0 -64 24),8) SEP ([0x100004018,8]_0,8); ((RSP_0 -64 24),8) SEP ([0x100004020,8]_0,4); ((RSP_0 -64 24),8) SEP (0x100004018,8); ((RSP_0 -64 24),8) SEP (0x100004020,8); ((RSP_0 -64 24),8) SEP (0x100004180,8); ((RSP_0 -64 24),8) SEP (0x100004188,8); ((RSP_0 -64 24),8) SEP (0x100004190,8); ((RSP_0 -64 24),8) SEP (0x100004198,8); ((RSP_0 -64 24),8) SEP (0x1000041a0,1); ((RSP_0 -64 24),8) SEP (0x1000041a8,8); ((RSP_0 -64 24),8) SEP (0x1000041b0,8); ((RSP_0 -64 24),8) SEP (0x1000041b8,8); ((RSP_0 -64 24),8) SEP (0x1000041c0,8); ((RSP_0 -64 24),8) SEP (0x1000041c8,1); ((RSP_0 -64 24),8) SEP (0x1000041d0,8); ((RSP_0 -64 24),8) SEP (0x1000041d8,8); ((RSP_0 -64 24),8) SEP ((bot(fun__fts_read_INODE64) +64 8),8); ((RSP_0 -64 24),8) SEP ((bot(fun__fts_read_INODE64) +64 24),8); ((RSP_0 -64 24),8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); ((RSP_0 -64 24),8) SEP ((bot(fun__fts_read_INODE64) +64 56),4); ((RSP_0 -64 24),8) SEP ((bot(fun__fts_read_INODE64) +64 86),2); ((RSP_0 -64 24),8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); ((RSP_0 -64 24),8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); ((RSP_0 -64 24),8) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 24),8) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); ((RSP_0 -64 24),8) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100004180,8] = [0x100004180,8]_0 ; [0x100004188,8] = [0x100004188,8]_0 ; [0x100004190,8] = [0x100004190,8]_0 ; [0x100004198,8] = [0x100004198,8]_0 ; [0x1000041a0,1] = [0x1000041a0,1]_0 ; [0x1000041a8,8] = [0x1000041a8,8]_0 ; [0x1000041b0,8] = [0x1000041b0,8]_0 ; [0x1000041b8,8] = [0x1000041b8,8]_0 ; [0x1000041c0,8] = [0x1000041c0,8]_0 ; [0x1000041c8,1] = [0x1000041c8,1]_0 ; [0x1000041d0,8] = [0x1000041d0,8]_0 ; [0x1000041d8,8] = [0x1000041d8,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 76),4] = [(RSP_0 -64 76),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 84),4] = [(RSP_0 -64 84),4]_0 ; [(RSP_0 -64 88),4] = [(RSP_0 -64 88),4]_0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = [(RSP_0 -64 108),4]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002a9a: PUSH R14 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100004180,8] = [0x100004180,8]_0 ; [0x100004188,8] = [0x100004188,8]_0 ; [0x100004190,8] = [0x100004190,8]_0 ; [0x100004198,8] = [0x100004198,8]_0 ; [0x1000041a0,1] = [0x1000041a0,1]_0 ; [0x1000041a8,8] = [0x1000041a8,8]_0 ; [0x1000041b0,8] = [0x1000041b0,8]_0 ; [0x1000041b8,8] = [0x1000041b8,8]_0 ; [0x1000041c0,8] = [0x1000041c0,8]_0 ; [0x1000041c8,1] = [0x1000041c8,1]_0 ; [0x1000041d0,8] = [0x1000041d0,8]_0 ; [0x1000041d8,8] = [0x1000041d8,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 76),4] = [(RSP_0 -64 76),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 84),4] = [(RSP_0 -64 84),4]_0 ; [(RSP_0 -64 88),4] = [(RSP_0 -64 88),4]_0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = [(RSP_0 -64 108),4]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002a9c"
 Separations "((RSP_0 -64 32),8) SEP (bot(fun____error),4); ((RSP_0 -64 32),8) SEP (bot(fun__fts_read_INODE64),8); ((RSP_0 -64 32),8) SEP (RSI_0,8); ((RSP_0 -64 32),8) SEP ([0x100004018,8]_0,8); ((RSP_0 -64 32),8) SEP ([0x100004020,8]_0,4); ((RSP_0 -64 32),8) SEP (0x100004018,8); ((RSP_0 -64 32),8) SEP (0x100004020,8); ((RSP_0 -64 32),8) SEP (0x100004180,8); ((RSP_0 -64 32),8) SEP (0x100004188,8); ((RSP_0 -64 32),8) SEP (0x100004190,8); ((RSP_0 -64 32),8) SEP (0x100004198,8); ((RSP_0 -64 32),8) SEP (0x1000041a0,1); ((RSP_0 -64 32),8) SEP (0x1000041a8,8); ((RSP_0 -64 32),8) SEP (0x1000041b0,8); ((RSP_0 -64 32),8) SEP (0x1000041b8,8); ((RSP_0 -64 32),8) SEP (0x1000041c0,8); ((RSP_0 -64 32),8) SEP (0x1000041c8,1); ((RSP_0 -64 32),8) SEP (0x1000041d0,8); ((RSP_0 -64 32),8) SEP (0x1000041d8,8); ((RSP_0 -64 32),8) SEP ((bot(fun__fts_read_INODE64) +64 8),8); ((RSP_0 -64 32),8) SEP ((bot(fun__fts_read_INODE64) +64 24),8); ((RSP_0 -64 32),8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); ((RSP_0 -64 32),8) SEP ((bot(fun__fts_read_INODE64) +64 56),4); ((RSP_0 -64 32),8) SEP ((bot(fun__fts_read_INODE64) +64 86),2); ((RSP_0 -64 32),8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); ((RSP_0 -64 32),8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); ((RSP_0 -64 32),8) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 32),8) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); ((RSP_0 -64 32),8) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100004180,8] = [0x100004180,8]_0 ; [0x100004188,8] = [0x100004188,8]_0 ; [0x100004190,8] = [0x100004190,8]_0 ; [0x100004198,8] = [0x100004198,8]_0 ; [0x1000041a0,1] = [0x1000041a0,1]_0 ; [0x1000041a8,8] = [0x1000041a8,8]_0 ; [0x1000041b0,8] = [0x1000041b0,8]_0 ; [0x1000041b8,8] = [0x1000041b8,8]_0 ; [0x1000041c0,8] = [0x1000041c0,8]_0 ; [0x1000041c8,1] = [0x1000041c8,1]_0 ; [0x1000041d0,8] = [0x1000041d0,8]_0 ; [0x1000041d8,8] = [0x1000041d8,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 76),4] = [(RSP_0 -64 76),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 84),4] = [(RSP_0 -64 84),4]_0 ; [(RSP_0 -64 88),4] = [(RSP_0 -64 88),4]_0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = [(RSP_0 -64 108),4]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002a9c: PUSH R13 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100004180,8] = [0x100004180,8]_0 ; [0x100004188,8] = [0x100004188,8]_0 ; [0x100004190,8] = [0x100004190,8]_0 ; [0x100004198,8] = [0x100004198,8]_0 ; [0x1000041a0,1] = [0x1000041a0,1]_0 ; [0x1000041a8,8] = [0x1000041a8,8]_0 ; [0x1000041b0,8] = [0x1000041b0,8]_0 ; [0x1000041b8,8] = [0x1000041b8,8]_0 ; [0x1000041c0,8] = [0x1000041c0,8]_0 ; [0x1000041c8,1] = [0x1000041c8,1]_0 ; [0x1000041d0,8] = [0x1000041d0,8]_0 ; [0x1000041d8,8] = [0x1000041d8,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 76),4] = [(RSP_0 -64 76),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 84),4] = [(RSP_0 -64 84),4]_0 ; [(RSP_0 -64 88),4] = [(RSP_0 -64 88),4]_0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = [(RSP_0 -64 108),4]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002a9e"
 Separations "((RSP_0 -64 40),8) SEP (bot(fun____error),4); ((RSP_0 -64 40),8) SEP (bot(fun__fts_read_INODE64),8); ((RSP_0 -64 40),8) SEP (RSI_0,8); ((RSP_0 -64 40),8) SEP ([0x100004018,8]_0,8); ((RSP_0 -64 40),8) SEP ([0x100004020,8]_0,4); ((RSP_0 -64 40),8) SEP (0x100004018,8); ((RSP_0 -64 40),8) SEP (0x100004020,8); ((RSP_0 -64 40),8) SEP (0x100004180,8); ((RSP_0 -64 40),8) SEP (0x100004188,8); ((RSP_0 -64 40),8) SEP (0x100004190,8); ((RSP_0 -64 40),8) SEP (0x100004198,8); ((RSP_0 -64 40),8) SEP (0x1000041a0,1); ((RSP_0 -64 40),8) SEP (0x1000041a8,8); ((RSP_0 -64 40),8) SEP (0x1000041b0,8); ((RSP_0 -64 40),8) SEP (0x1000041b8,8); ((RSP_0 -64 40),8) SEP (0x1000041c0,8); ((RSP_0 -64 40),8) SEP (0x1000041c8,1); ((RSP_0 -64 40),8) SEP (0x1000041d0,8); ((RSP_0 -64 40),8) SEP (0x1000041d8,8); ((RSP_0 -64 40),8) SEP ((bot(fun__fts_read_INODE64) +64 8),8); ((RSP_0 -64 40),8) SEP ((bot(fun__fts_read_INODE64) +64 24),8); ((RSP_0 -64 40),8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); ((RSP_0 -64 40),8) SEP ((bot(fun__fts_read_INODE64) +64 56),4); ((RSP_0 -64 40),8) SEP ((bot(fun__fts_read_INODE64) +64 86),2); ((RSP_0 -64 40),8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); ((RSP_0 -64 40),8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); ((RSP_0 -64 40),8) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 40),8) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); ((RSP_0 -64 40),8) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100004180,8] = [0x100004180,8]_0 ; [0x100004188,8] = [0x100004188,8]_0 ; [0x100004190,8] = [0x100004190,8]_0 ; [0x100004198,8] = [0x100004198,8]_0 ; [0x1000041a0,1] = [0x1000041a0,1]_0 ; [0x1000041a8,8] = [0x1000041a8,8]_0 ; [0x1000041b0,8] = [0x1000041b0,8]_0 ; [0x1000041b8,8] = [0x1000041b8,8]_0 ; [0x1000041c0,8] = [0x1000041c0,8]_0 ; [0x1000041c8,1] = [0x1000041c8,1]_0 ; [0x1000041d0,8] = [0x1000041d0,8]_0 ; [0x1000041d8,8] = [0x1000041d8,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 76),4] = [(RSP_0 -64 76),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 84),4] = [(RSP_0 -64 84),4]_0 ; [(RSP_0 -64 88),4] = [(RSP_0 -64 88),4]_0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = [(RSP_0 -64 108),4]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002a9e: PUSH R12 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100004180,8] = [0x100004180,8]_0 ; [0x100004188,8] = [0x100004188,8]_0 ; [0x100004190,8] = [0x100004190,8]_0 ; [0x100004198,8] = [0x100004198,8]_0 ; [0x1000041a0,1] = [0x1000041a0,1]_0 ; [0x1000041a8,8] = [0x1000041a8,8]_0 ; [0x1000041b0,8] = [0x1000041b0,8]_0 ; [0x1000041b8,8] = [0x1000041b8,8]_0 ; [0x1000041c0,8] = [0x1000041c0,8]_0 ; [0x1000041c8,1] = [0x1000041c8,1]_0 ; [0x1000041d0,8] = [0x1000041d0,8]_0 ; [0x1000041d8,8] = [0x1000041d8,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 76),4] = [(RSP_0 -64 76),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 84),4] = [(RSP_0 -64 84),4]_0 ; [(RSP_0 -64 88),4] = [(RSP_0 -64 88),4]_0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = [(RSP_0 -64 108),4]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002aa0"
 Separations "((RSP_0 -64 48),8) SEP (bot(fun____error),4); ((RSP_0 -64 48),8) SEP (bot(fun__fts_read_INODE64),8); ((RSP_0 -64 48),8) SEP (RSI_0,8); ((RSP_0 -64 48),8) SEP ([0x100004018,8]_0,8); ((RSP_0 -64 48),8) SEP ([0x100004020,8]_0,4); ((RSP_0 -64 48),8) SEP (0x100004018,8); ((RSP_0 -64 48),8) SEP (0x100004020,8); ((RSP_0 -64 48),8) SEP (0x100004180,8); ((RSP_0 -64 48),8) SEP (0x100004188,8); ((RSP_0 -64 48),8) SEP (0x100004190,8); ((RSP_0 -64 48),8) SEP (0x100004198,8); ((RSP_0 -64 48),8) SEP (0x1000041a0,1); ((RSP_0 -64 48),8) SEP (0x1000041a8,8); ((RSP_0 -64 48),8) SEP (0x1000041b0,8); ((RSP_0 -64 48),8) SEP (0x1000041b8,8); ((RSP_0 -64 48),8) SEP (0x1000041c0,8); ((RSP_0 -64 48),8) SEP (0x1000041c8,1); ((RSP_0 -64 48),8) SEP (0x1000041d0,8); ((RSP_0 -64 48),8) SEP (0x1000041d8,8); ((RSP_0 -64 48),8) SEP ((bot(fun__fts_read_INODE64) +64 8),8); ((RSP_0 -64 48),8) SEP ((bot(fun__fts_read_INODE64) +64 24),8); ((RSP_0 -64 48),8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); ((RSP_0 -64 48),8) SEP ((bot(fun__fts_read_INODE64) +64 56),4); ((RSP_0 -64 48),8) SEP ((bot(fun__fts_read_INODE64) +64 86),2); ((RSP_0 -64 48),8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); ((RSP_0 -64 48),8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); ((RSP_0 -64 48),8) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 48),8) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); ((RSP_0 -64 48),8) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100004180,8] = [0x100004180,8]_0 ; [0x100004188,8] = [0x100004188,8]_0 ; [0x100004190,8] = [0x100004190,8]_0 ; [0x100004198,8] = [0x100004198,8]_0 ; [0x1000041a0,1] = [0x1000041a0,1]_0 ; [0x1000041a8,8] = [0x1000041a8,8]_0 ; [0x1000041b0,8] = [0x1000041b0,8]_0 ; [0x1000041b8,8] = [0x1000041b8,8]_0 ; [0x1000041c0,8] = [0x1000041c0,8]_0 ; [0x1000041c8,1] = [0x1000041c8,1]_0 ; [0x1000041d0,8] = [0x1000041d0,8]_0 ; [0x1000041d8,8] = [0x1000041d8,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 76),4] = [(RSP_0 -64 76),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 84),4] = [(RSP_0 -64 84),4]_0 ; [(RSP_0 -64 88),4] = [(RSP_0 -64 88),4]_0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = [(RSP_0 -64 108),4]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002aa0: PUSH RBX 1"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100004180,8] = [0x100004180,8]_0 ; [0x100004188,8] = [0x100004188,8]_0 ; [0x100004190,8] = [0x100004190,8]_0 ; [0x100004198,8] = [0x100004198,8]_0 ; [0x1000041a0,1] = [0x1000041a0,1]_0 ; [0x1000041a8,8] = [0x1000041a8,8]_0 ; [0x1000041b0,8] = [0x1000041b0,8]_0 ; [0x1000041b8,8] = [0x1000041b8,8]_0 ; [0x1000041c0,8] = [0x1000041c0,8]_0 ; [0x1000041c8,1] = [0x1000041c8,1]_0 ; [0x1000041d0,8] = [0x1000041d0,8]_0 ; [0x1000041d8,8] = [0x1000041d8,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 76),4] = [(RSP_0 -64 76),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 84),4] = [(RSP_0 -64 84),4]_0 ; [(RSP_0 -64 88),4] = [(RSP_0 -64 88),4]_0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = [(RSP_0 -64 108),4]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002aa1"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100004180,8] = [0x100004180,8]_0 ; [0x100004188,8] = [0x100004188,8]_0 ; [0x100004190,8] = [0x100004190,8]_0 ; [0x100004198,8] = [0x100004198,8]_0 ; [0x1000041a0,1] = [0x1000041a0,1]_0 ; [0x1000041a8,8] = [0x1000041a8,8]_0 ; [0x1000041b0,8] = [0x1000041b0,8]_0 ; [0x1000041b8,8] = [0x1000041b8,8]_0 ; [0x1000041c0,8] = [0x1000041c0,8]_0 ; [0x1000041c8,1] = [0x1000041c8,1]_0 ; [0x1000041d0,8] = [0x1000041d0,8]_0 ; [0x1000041d8,8] = [0x1000041d8,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 76),4] = [(RSP_0 -64 76),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 84),4] = [(RSP_0 -64 84),4]_0 ; [(RSP_0 -64 88),4] = [(RSP_0 -64 88),4]_0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = [(RSP_0 -64 108),4]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002aa1: SUB RSP, 232 7"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100004180,8] = [0x100004180,8]_0 ; [0x100004188,8] = [0x100004188,8]_0 ; [0x100004190,8] = [0x100004190,8]_0 ; [0x100004198,8] = [0x100004198,8]_0 ; [0x1000041a0,1] = [0x1000041a0,1]_0 ; [0x1000041a8,8] = [0x1000041a8,8]_0 ; [0x1000041b0,8] = [0x1000041b0,8]_0 ; [0x1000041b8,8] = [0x1000041b8,8]_0 ; [0x1000041c0,8] = [0x1000041c0,8]_0 ; [0x1000041c8,1] = [0x1000041c8,1]_0 ; [0x1000041d0,8] = [0x1000041d0,8]_0 ; [0x1000041d8,8] = [0x1000041d8,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 76),4] = [(RSP_0 -64 76),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 84),4] = [(RSP_0 -64 84),4]_0 ; [(RSP_0 -64 88),4] = [(RSP_0 -64 88),4]_0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = [(RSP_0 -64 108),4]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002aa8"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100004180,8] = [0x100004180,8]_0 ; [0x100004188,8] = [0x100004188,8]_0 ; [0x100004190,8] = [0x100004190,8]_0 ; [0x100004198,8] = [0x100004198,8]_0 ; [0x1000041a0,1] = [0x1000041a0,1]_0 ; [0x1000041a8,8] = [0x1000041a8,8]_0 ; [0x1000041b0,8] = [0x1000041b0,8]_0 ; [0x1000041b8,8] = [0x1000041b8,8]_0 ; [0x1000041c0,8] = [0x1000041c0,8]_0 ; [0x1000041c8,1] = [0x1000041c8,1]_0 ; [0x1000041d0,8] = [0x1000041d0,8]_0 ; [0x1000041d8,8] = [0x1000041d8,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 76),4] = [(RSP_0 -64 76),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 84),4] = [(RSP_0 -64 84),4]_0 ; [(RSP_0 -64 88),4] = [(RSP_0 -64 88),4]_0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = [(RSP_0 -64 108),4]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002aa8: MOV R14, RSI 3"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100004180,8] = [0x100004180,8]_0 ; [0x100004188,8] = [0x100004188,8]_0 ; [0x100004190,8] = [0x100004190,8]_0 ; [0x100004198,8] = [0x100004198,8]_0 ; [0x1000041a0,1] = [0x1000041a0,1]_0 ; [0x1000041a8,8] = [0x1000041a8,8]_0 ; [0x1000041b0,8] = [0x1000041b0,8]_0 ; [0x1000041b8,8] = [0x1000041b8,8]_0 ; [0x1000041c0,8] = [0x1000041c0,8]_0 ; [0x1000041c8,1] = [0x1000041c8,1]_0 ; [0x1000041d0,8] = [0x1000041d0,8]_0 ; [0x1000041d8,8] = [0x1000041d8,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 76),4] = [(RSP_0 -64 76),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 84),4] = [(RSP_0 -64 84),4]_0 ; [(RSP_0 -64 88),4] = [(RSP_0 -64 88),4]_0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = [(RSP_0 -64 108),4]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002aab"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100004180,8] = [0x100004180,8]_0 ; [0x100004188,8] = [0x100004188,8]_0 ; [0x100004190,8] = [0x100004190,8]_0 ; [0x100004198,8] = [0x100004198,8]_0 ; [0x1000041a0,1] = [0x1000041a0,1]_0 ; [0x1000041a8,8] = [0x1000041a8,8]_0 ; [0x1000041b0,8] = [0x1000041b0,8]_0 ; [0x1000041b8,8] = [0x1000041b8,8]_0 ; [0x1000041c0,8] = [0x1000041c0,8]_0 ; [0x1000041c8,1] = [0x1000041c8,1]_0 ; [0x1000041d0,8] = [0x1000041d0,8]_0 ; [0x1000041d8,8] = [0x1000041d8,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 76),4] = [(RSP_0 -64 76),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 84),4] = [(RSP_0 -64 84),4]_0 ; [(RSP_0 -64 88),4] = [(RSP_0 -64 88),4]_0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = [(RSP_0 -64 108),4]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002aab: MOV EBX, EDI 2"
 Post  "RAX = RAX_0 ; RBX = b32(RDI_0) ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100004180,8] = [0x100004180,8]_0 ; [0x100004188,8] = [0x100004188,8]_0 ; [0x100004190,8] = [0x100004190,8]_0 ; [0x100004198,8] = [0x100004198,8]_0 ; [0x1000041a0,1] = [0x1000041a0,1]_0 ; [0x1000041a8,8] = [0x1000041a8,8]_0 ; [0x1000041b0,8] = [0x1000041b0,8]_0 ; [0x1000041b8,8] = [0x1000041b8,8]_0 ; [0x1000041c0,8] = [0x1000041c0,8]_0 ; [0x1000041c8,1] = [0x1000041c8,1]_0 ; [0x1000041d0,8] = [0x1000041d0,8]_0 ; [0x1000041d8,8] = [0x1000041d8,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 76),4] = [(RSP_0 -64 76),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 84),4] = [(RSP_0 -64 84),4]_0 ; [(RSP_0 -64 88),4] = [(RSP_0 -64 88),4]_0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = [(RSP_0 -64 108),4]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002aad"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = b32(RDI_0) ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100004180,8] = [0x100004180,8]_0 ; [0x100004188,8] = [0x100004188,8]_0 ; [0x100004190,8] = [0x100004190,8]_0 ; [0x100004198,8] = [0x100004198,8]_0 ; [0x1000041a0,1] = [0x1000041a0,1]_0 ; [0x1000041a8,8] = [0x1000041a8,8]_0 ; [0x1000041b0,8] = [0x1000041b0,8]_0 ; [0x1000041b8,8] = [0x1000041b8,8]_0 ; [0x1000041c0,8] = [0x1000041c0,8]_0 ; [0x1000041c8,1] = [0x1000041c8,1]_0 ; [0x1000041d0,8] = [0x1000041d0,8]_0 ; [0x1000041d8,8] = [0x1000041d8,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 76),4] = [(RSP_0 -64 76),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 84),4] = [(RSP_0 -64 84),4]_0 ; [(RSP_0 -64 88),4] = [(RSP_0 -64 88),4]_0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = [(RSP_0 -64 108),4]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002aad: LEA RSI, [RIP + 4739] 7"
 Post  "RAX = RAX_0 ; RBX = b32(RDI_0) ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = 0x100003d37 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100004180,8] = [0x100004180,8]_0 ; [0x100004188,8] = [0x100004188,8]_0 ; [0x100004190,8] = [0x100004190,8]_0 ; [0x100004198,8] = [0x100004198,8]_0 ; [0x1000041a0,1] = [0x1000041a0,1]_0 ; [0x1000041a8,8] = [0x1000041a8,8]_0 ; [0x1000041b0,8] = [0x1000041b0,8]_0 ; [0x1000041b8,8] = [0x1000041b8,8]_0 ; [0x1000041c0,8] = [0x1000041c0,8]_0 ; [0x1000041c8,1] = [0x1000041c8,1]_0 ; [0x1000041d0,8] = [0x1000041d0,8]_0 ; [0x1000041d8,8] = [0x1000041d8,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 76),4] = [(RSP_0 -64 76),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 84),4] = [(RSP_0 -64 84),4]_0 ; [(RSP_0 -64 88),4] = [(RSP_0 -64 88),4]_0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = [(RSP_0 -64 108),4]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002ab4"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = b32(RDI_0) ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = 0x100003d37 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100004180,8] = [0x100004180,8]_0 ; [0x100004188,8] = [0x100004188,8]_0 ; [0x100004190,8] = [0x100004190,8]_0 ; [0x100004198,8] = [0x100004198,8]_0 ; [0x1000041a0,1] = [0x1000041a0,1]_0 ; [0x1000041a8,8] = [0x1000041a8,8]_0 ; [0x1000041b0,8] = [0x1000041b0,8]_0 ; [0x1000041b8,8] = [0x1000041b8,8]_0 ; [0x1000041c0,8] = [0x1000041c0,8]_0 ; [0x1000041c8,1] = [0x1000041c8,1]_0 ; [0x1000041d0,8] = [0x1000041d0,8]_0 ; [0x1000041d8,8] = [0x1000041d8,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 76),4] = [(RSP_0 -64 76),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 84),4] = [(RSP_0 -64 84),4]_0 ; [(RSP_0 -64 88),4] = [(RSP_0 -64 88),4]_0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = [(RSP_0 -64 108),4]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002ab4: XOR R13D, R13D 3"
 Post  "RAX = RAX_0 ; RBX = b32(RDI_0) ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = 0x100003d37 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = 0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100004180,8] = [0x100004180,8]_0 ; [0x100004188,8] = [0x100004188,8]_0 ; [0x100004190,8] = [0x100004190,8]_0 ; [0x100004198,8] = [0x100004198,8]_0 ; [0x1000041a0,1] = [0x1000041a0,1]_0 ; [0x1000041a8,8] = [0x1000041a8,8]_0 ; [0x1000041b0,8] = [0x1000041b0,8]_0 ; [0x1000041b8,8] = [0x1000041b8,8]_0 ; [0x1000041c0,8] = [0x1000041c0,8]_0 ; [0x1000041c8,1] = [0x1000041c8,1]_0 ; [0x1000041d0,8] = [0x1000041d0,8]_0 ; [0x1000041d8,8] = [0x1000041d8,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 76),4] = [(RSP_0 -64 76),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 84),4] = [(RSP_0 -64 84),4]_0 ; [(RSP_0 -64 88),4] = [(RSP_0 -64 88),4]_0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = [(RSP_0 -64 108),4]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002ab7"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = b32(RDI_0) ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = 0x100003d37 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = 0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100004180,8] = [0x100004180,8]_0 ; [0x100004188,8] = [0x100004188,8]_0 ; [0x100004190,8] = [0x100004190,8]_0 ; [0x100004198,8] = [0x100004198,8]_0 ; [0x1000041a0,1] = [0x1000041a0,1]_0 ; [0x1000041a8,8] = [0x1000041a8,8]_0 ; [0x1000041b0,8] = [0x1000041b0,8]_0 ; [0x1000041b8,8] = [0x1000041b8,8]_0 ; [0x1000041c0,8] = [0x1000041c0,8]_0 ; [0x1000041c8,1] = [0x1000041c8,1]_0 ; [0x1000041d0,8] = [0x1000041d0,8]_0 ; [0x1000041d8,8] = [0x1000041d8,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 76),4] = [(RSP_0 -64 76),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 84),4] = [(RSP_0 -64 84),4]_0 ; [(RSP_0 -64 88),4] = [(RSP_0 -64 88),4]_0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = [(RSP_0 -64 108),4]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002ab7: XOR EDI, EDI 2"
 Post  "RAX = RAX_0 ; RBX = b32(RDI_0) ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = 0 ; RSI = 0x100003d37 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = 0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100004180,8] = [0x100004180,8]_0 ; [0x100004188,8] = [0x100004188,8]_0 ; [0x100004190,8] = [0x100004190,8]_0 ; [0x100004198,8] = [0x100004198,8]_0 ; [0x1000041a0,1] = [0x1000041a0,1]_0 ; [0x1000041a8,8] = [0x1000041a8,8]_0 ; [0x1000041b0,8] = [0x1000041b0,8]_0 ; [0x1000041b8,8] = [0x1000041b8,8]_0 ; [0x1000041c0,8] = [0x1000041c0,8]_0 ; [0x1000041c8,1] = [0x1000041c8,1]_0 ; [0x1000041d0,8] = [0x1000041d0,8]_0 ; [0x1000041d8,8] = [0x1000041d8,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 76),4] = [(RSP_0 -64 76),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 84),4] = [(RSP_0 -64 84),4]_0 ; [(RSP_0 -64 88),4] = [(RSP_0 -64 88),4]_0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = [(RSP_0 -64 108),4]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002ab9"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = b32(RDI_0) ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = 0 ; RSI = 0x100003d37 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = 0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100004180,8] = [0x100004180,8]_0 ; [0x100004188,8] = [0x100004188,8]_0 ; [0x100004190,8] = [0x100004190,8]_0 ; [0x100004198,8] = [0x100004198,8]_0 ; [0x1000041a0,1] = [0x1000041a0,1]_0 ; [0x1000041a8,8] = [0x1000041a8,8]_0 ; [0x1000041b0,8] = [0x1000041b0,8]_0 ; [0x1000041b8,8] = [0x1000041b8,8]_0 ; [0x1000041c0,8] = [0x1000041c0,8]_0 ; [0x1000041c8,1] = [0x1000041c8,1]_0 ; [0x1000041d0,8] = [0x1000041d0,8]_0 ; [0x1000041d8,8] = [0x1000041d8,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 76),4] = [(RSP_0 -64 76),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 84),4] = [(RSP_0 -64 84),4]_0 ; [(RSP_0 -64 88),4] = [(RSP_0 -64 88),4]_0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = [(RSP_0 -64 108),4]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002ab9: ExternalCall fun__setlocale 5"
 Post  "RAX = bot(fun__setlocale) ; RBX = b32(RDI_0) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = 0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100004180,8] = [0x100004180,8]_0 ; [0x100004188,8] = [0x100004188,8]_0 ; [0x100004190,8] = [0x100004190,8]_0 ; [0x100004198,8] = [0x100004198,8]_0 ; [0x1000041a0,1] = [0x1000041a0,1]_0 ; [0x1000041a8,8] = [0x1000041a8,8]_0 ; [0x1000041b0,8] = [0x1000041b0,8]_0 ; [0x1000041b8,8] = [0x1000041b8,8]_0 ; [0x1000041c0,8] = [0x1000041c0,8]_0 ; [0x1000041c8,1] = [0x1000041c8,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 76),4] = [(RSP_0 -64 76),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 84),4] = [(RSP_0 -64 84),4]_0 ; [(RSP_0 -64 88),4] = [(RSP_0 -64 88),4]_0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = [(RSP_0 -64 108),4]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 FunctionConstraints "PRESERVES fun__setlocale {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004018,8];[0x100004020,8];[0x100004180,8];[0x100004188,8];[0x100004190,8];[0x100004198,8];[0x1000041a0,1];[0x1000041a8,8];[0x1000041b0,8];[0x1000041b8,8];[0x1000041c0,8];[0x1000041c8,1];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 76),4];[(RSP_0 -64 80),4];[(RSP_0 -64 84),4];[(RSP_0 -64 88),4];[(RSP_0 -64 92),4];[(RSP_0 -64 104),8];[(RSP_0 -64 108),4];[(RSP_0 -64 264),8];[(RSP_0 -64 280),16]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002abe"
 Separations "(0x1000041d0,8) SEP (bot(fun____error),4); (0x1000041d0,8) SEP (bot(fun__fts_read_INODE64),8); (0x1000041d0,8) SEP (RSI_0,8); (0x1000041d0,8) SEP (RSP_0,8); (0x1000041d0,8) SEP ([0x100004018,8]_0,8); (0x1000041d0,8) SEP ([0x100004020,8]_0,4); (0x1000041d0,8) SEP ((bot(fun__fts_read_INODE64) +64 8),8); (0x1000041d0,8) SEP ((bot(fun__fts_read_INODE64) +64 24),8); (0x1000041d0,8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x1000041d0,8) SEP ((bot(fun__fts_read_INODE64) +64 56),4); (0x1000041d0,8) SEP ((bot(fun__fts_read_INODE64) +64 86),2); (0x1000041d0,8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x1000041d0,8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x1000041d0,8) SEP ((RSI_0 +64 8),8); (0x1000041d0,8) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); (0x1000041d0,8) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4); (0x1000041d0,8) SEP ((RSP_0 -64 8),8); (0x1000041d0,8) SEP ((RSP_0 -64 16),8); (0x1000041d0,8) SEP ((RSP_0 -64 24),8); (0x1000041d0,8) SEP ((RSP_0 -64 32),8); (0x1000041d0,8) SEP ((RSP_0 -64 40),8); (0x1000041d0,8) SEP ((RSP_0 -64 48),8); (0x1000041d0,8) SEP ((RSP_0 -64 52),4); (0x1000041d0,8) SEP ((RSP_0 -64 64),4); (0x1000041d0,8) SEP ((RSP_0 -64 64),8); (0x1000041d0,8) SEP ((RSP_0 -64 72),8); (0x1000041d0,8) SEP ((RSP_0 -64 76),4); (0x1000041d0,8) SEP ((RSP_0 -64 80),4); (0x1000041d0,8) SEP ((RSP_0 -64 84),4); (0x1000041d0,8) SEP ((RSP_0 -64 88),4); (0x1000041d0,8) SEP ((RSP_0 -64 92),4); (0x1000041d0,8) SEP ((RSP_0 -64 104),8); (0x1000041d0,8) SEP ((RSP_0 -64 108),4); (0x1000041d0,8) SEP ((RSP_0 -64 264),8); (0x1000041d0,8) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RAX = bot(fun__setlocale) ; RBX = b32(RDI_0) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = 0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100004180,8] = [0x100004180,8]_0 ; [0x100004188,8] = [0x100004188,8]_0 ; [0x100004190,8] = [0x100004190,8]_0 ; [0x100004198,8] = [0x100004198,8]_0 ; [0x1000041a0,1] = [0x1000041a0,1]_0 ; [0x1000041a8,8] = [0x1000041a8,8]_0 ; [0x1000041b0,8] = [0x1000041b0,8]_0 ; [0x1000041b8,8] = [0x1000041b8,8]_0 ; [0x1000041c0,8] = [0x1000041c0,8]_0 ; [0x1000041c8,1] = [0x1000041c8,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 76),4] = [(RSP_0 -64 76),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 84),4] = [(RSP_0 -64 84),4]_0 ; [(RSP_0 -64 88),4] = [(RSP_0 -64 88),4]_0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = [(RSP_0 -64 108),4]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002abe: MOV QWORD PTR [RIP + 5895], 0 11"
 Post  "RAX = bot(fun__setlocale) ; RBX = b32(RDI_0) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = 0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100004180,8] = [0x100004180,8]_0 ; [0x100004188,8] = [0x100004188,8]_0 ; [0x100004190,8] = [0x100004190,8]_0 ; [0x100004198,8] = [0x100004198,8]_0 ; [0x1000041a0,1] = [0x1000041a0,1]_0 ; [0x1000041a8,8] = [0x1000041a8,8]_0 ; [0x1000041b0,8] = [0x1000041b0,8]_0 ; [0x1000041b8,8] = [0x1000041b8,8]_0 ; [0x1000041c0,8] = [0x1000041c0,8]_0 ; [0x1000041c8,1] = [0x1000041c8,1]_0 ; [0x1000041d0,8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 76),4] = [(RSP_0 -64 76),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 84),4] = [(RSP_0 -64 84),4]_0 ; [(RSP_0 -64 88),4] = [(RSP_0 -64 88),4]_0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = [(RSP_0 -64 108),4]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002ac9"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__setlocale) ; RBX = b32(RDI_0) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = 0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100004180,8] = [0x100004180,8]_0 ; [0x100004188,8] = [0x100004188,8]_0 ; [0x100004190,8] = [0x100004190,8]_0 ; [0x100004198,8] = [0x100004198,8]_0 ; [0x1000041a0,1] = [0x1000041a0,1]_0 ; [0x1000041a8,8] = [0x1000041a8,8]_0 ; [0x1000041b0,8] = [0x1000041b0,8]_0 ; [0x1000041b8,8] = [0x1000041b8,8]_0 ; [0x1000041c0,8] = [0x1000041c0,8]_0 ; [0x1000041c8,1] = [0x1000041c8,1]_0 ; [0x1000041d0,8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 76),4] = [(RSP_0 -64 76),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 84),4] = [(RSP_0 -64 84),4]_0 ; [(RSP_0 -64 88),4] = [(RSP_0 -64 88),4]_0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = [(RSP_0 -64 108),4]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002ac9: MOV R12D, 4 6"
 Post  "RAX = bot(fun__setlocale) ; RBX = b32(RDI_0) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = 0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100004180,8] = [0x100004180,8]_0 ; [0x100004188,8] = [0x100004188,8]_0 ; [0x100004190,8] = [0x100004190,8]_0 ; [0x100004198,8] = [0x100004198,8]_0 ; [0x1000041a0,1] = [0x1000041a0,1]_0 ; [0x1000041a8,8] = [0x1000041a8,8]_0 ; [0x1000041b0,8] = [0x1000041b0,8]_0 ; [0x1000041b8,8] = [0x1000041b8,8]_0 ; [0x1000041c0,8] = [0x1000041c0,8]_0 ; [0x1000041c8,1] = [0x1000041c8,1]_0 ; [0x1000041d0,8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 76),4] = [(RSP_0 -64 76),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 84),4] = [(RSP_0 -64 84),4]_0 ; [(RSP_0 -64 88),4] = [(RSP_0 -64 88),4]_0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = [(RSP_0 -64 108),4]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002acf"
 Separations "((RSP_0 -64 80),4) SEP (bot(fun____error),4); ((RSP_0 -64 80),4) SEP (bot(fun__fts_read_INODE64),8); ((RSP_0 -64 80),4) SEP (RSI_0,8); ((RSP_0 -64 80),4) SEP ([0x100004018,8]_0,8); ((RSP_0 -64 80),4) SEP ([0x100004020,8]_0,4); ((RSP_0 -64 80),4) SEP (0x100004018,8); ((RSP_0 -64 80),4) SEP (0x100004020,8); ((RSP_0 -64 80),4) SEP (0x100004180,8); ((RSP_0 -64 80),4) SEP (0x100004188,8); ((RSP_0 -64 80),4) SEP (0x100004190,8); ((RSP_0 -64 80),4) SEP (0x100004198,8); ((RSP_0 -64 80),4) SEP (0x1000041a0,1); ((RSP_0 -64 80),4) SEP (0x1000041a8,8); ((RSP_0 -64 80),4) SEP (0x1000041b0,8); ((RSP_0 -64 80),4) SEP (0x1000041b8,8); ((RSP_0 -64 80),4) SEP (0x1000041c0,8); ((RSP_0 -64 80),4) SEP (0x1000041c8,1); ((RSP_0 -64 80),4) SEP (0x1000041d0,8); ((RSP_0 -64 80),4) SEP (0x1000041d8,8); ((RSP_0 -64 80),4) SEP ((bot(fun__fts_read_INODE64) +64 8),8); ((RSP_0 -64 80),4) SEP ((bot(fun__fts_read_INODE64) +64 24),8); ((RSP_0 -64 80),4) SEP ((bot(fun__fts_read_INODE64) +64 48),8); ((RSP_0 -64 80),4) SEP ((bot(fun__fts_read_INODE64) +64 56),4); ((RSP_0 -64 80),4) SEP ((bot(fun__fts_read_INODE64) +64 86),2); ((RSP_0 -64 80),4) SEP ((bot(fun__fts_read_INODE64) +64 88),4); ((RSP_0 -64 80),4) SEP ((bot(fun__fts_read_INODE64) +64 96),8); ((RSP_0 -64 80),4) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 80),4) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); ((RSP_0 -64 80),4) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun__setlocale) ; RBX = b32(RDI_0) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = 0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100004180,8] = [0x100004180,8]_0 ; [0x100004188,8] = [0x100004188,8]_0 ; [0x100004190,8] = [0x100004190,8]_0 ; [0x100004198,8] = [0x100004198,8]_0 ; [0x1000041a0,1] = [0x1000041a0,1]_0 ; [0x1000041a8,8] = [0x1000041a8,8]_0 ; [0x1000041b0,8] = [0x1000041b0,8]_0 ; [0x1000041b8,8] = [0x1000041b8,8]_0 ; [0x1000041c0,8] = [0x1000041c0,8]_0 ; [0x1000041c8,1] = [0x1000041c8,1]_0 ; [0x1000041d0,8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 76),4] = [(RSP_0 -64 76),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 84),4] = [(RSP_0 -64 84),4]_0 ; [(RSP_0 -64 88),4] = [(RSP_0 -64 88),4]_0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = [(RSP_0 -64 108),4]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002acf: MOV DWORD PTR [RBP - 72], 2147483647 7"
 Post  "RAX = bot(fun__setlocale) ; RBX = b32(RDI_0) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = 0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100004180,8] = [0x100004180,8]_0 ; [0x100004188,8] = [0x100004188,8]_0 ; [0x100004190,8] = [0x100004190,8]_0 ; [0x100004198,8] = [0x100004198,8]_0 ; [0x1000041a0,1] = [0x1000041a0,1]_0 ; [0x1000041a8,8] = [0x1000041a8,8]_0 ; [0x1000041b0,8] = [0x1000041b0,8]_0 ; [0x1000041b8,8] = [0x1000041b8,8]_0 ; [0x1000041c0,8] = [0x1000041c0,8]_0 ; [0x1000041c8,1] = [0x1000041c8,1]_0 ; [0x1000041d0,8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 76),4] = [(RSP_0 -64 76),4]_0 ; [(RSP_0 -64 80),4] = 0x7fffffff ; [(RSP_0 -64 84),4] = [(RSP_0 -64 84),4]_0 ; [(RSP_0 -64 88),4] = [(RSP_0 -64 88),4]_0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = [(RSP_0 -64 108),4]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002ad6"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__setlocale) ; RBX = b32(RDI_0) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = 0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100004180,8] = [0x100004180,8]_0 ; [0x100004188,8] = [0x100004188,8]_0 ; [0x100004190,8] = [0x100004190,8]_0 ; [0x100004198,8] = [0x100004198,8]_0 ; [0x1000041a0,1] = [0x1000041a0,1]_0 ; [0x1000041a8,8] = [0x1000041a8,8]_0 ; [0x1000041b0,8] = [0x1000041b0,8]_0 ; [0x1000041b8,8] = [0x1000041b8,8]_0 ; [0x1000041c0,8] = [0x1000041c0,8]_0 ; [0x1000041c8,1] = [0x1000041c8,1]_0 ; [0x1000041d0,8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 76),4] = [(RSP_0 -64 76),4]_0 ; [(RSP_0 -64 80),4] = 0x7fffffff ; [(RSP_0 -64 84),4] = [(RSP_0 -64 84),4]_0 ; [(RSP_0 -64 88),4] = [(RSP_0 -64 88),4]_0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = [(RSP_0 -64 108),4]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002ad6: MOV EAX, 0 5"
 Post  "RAX = 0 ; RBX = b32(RDI_0) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = 0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100004180,8] = [0x100004180,8]_0 ; [0x100004188,8] = [0x100004188,8]_0 ; [0x100004190,8] = [0x100004190,8]_0 ; [0x100004198,8] = [0x100004198,8]_0 ; [0x1000041a0,1] = [0x1000041a0,1]_0 ; [0x1000041a8,8] = [0x1000041a8,8]_0 ; [0x1000041b0,8] = [0x1000041b0,8]_0 ; [0x1000041b8,8] = [0x1000041b8,8]_0 ; [0x1000041c0,8] = [0x1000041c0,8]_0 ; [0x1000041c8,1] = [0x1000041c8,1]_0 ; [0x1000041d0,8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 76),4] = [(RSP_0 -64 76),4]_0 ; [(RSP_0 -64 80),4] = 0x7fffffff ; [(RSP_0 -64 84),4] = [(RSP_0 -64 84),4]_0 ; [(RSP_0 -64 88),4] = [(RSP_0 -64 88),4]_0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = [(RSP_0 -64 108),4]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002adb"
 Separations "((RSP_0 -64 72),4) SEP (bot(fun____error),4); ((RSP_0 -64 72),4) SEP (RSI_0,8); ((RSP_0 -64 72),4) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 72),8) SEP (bot(fun____error),4); ((RSP_0 -64 72),8) SEP (bot(fun__fts_read_INODE64),8); ((RSP_0 -64 72),8) SEP (RSI_0,8); ((RSP_0 -64 72),8) SEP ([0x100004018,8]_0,8); ((RSP_0 -64 72),8) SEP ([0x100004020,8]_0,4); ((RSP_0 -64 72),8) SEP (0x100004018,8); ((RSP_0 -64 72),8) SEP (0x100004020,8); ((RSP_0 -64 72),8) SEP (0x100004180,8); ((RSP_0 -64 72),8) SEP (0x100004188,8); ((RSP_0 -64 72),8) SEP (0x100004190,8); ((RSP_0 -64 72),8) SEP (0x100004198,8); ((RSP_0 -64 72),8) SEP (0x1000041a0,1); ((RSP_0 -64 72),8) SEP (0x1000041a8,8); ((RSP_0 -64 72),8) SEP (0x1000041b0,8); ((RSP_0 -64 72),8) SEP (0x1000041b8,8); ((RSP_0 -64 72),8) SEP (0x1000041c0,8); ((RSP_0 -64 72),8) SEP (0x1000041c8,1); ((RSP_0 -64 72),8) SEP (0x1000041d0,8); ((RSP_0 -64 72),8) SEP (0x1000041d8,8); ((RSP_0 -64 72),8) SEP ((bot(fun__fts_read_INODE64) +64 8),8); ((RSP_0 -64 72),8) SEP ((bot(fun__fts_read_INODE64) +64 24),8); ((RSP_0 -64 72),8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); ((RSP_0 -64 72),8) SEP ((bot(fun__fts_read_INODE64) +64 56),4); ((RSP_0 -64 72),8) SEP ((bot(fun__fts_read_INODE64) +64 86),2); ((RSP_0 -64 72),8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); ((RSP_0 -64 72),8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); ((RSP_0 -64 72),8) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 72),8) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); ((RSP_0 -64 72),8) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = 0 ; RBX = b32(RDI_0) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = 0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100004180,8] = [0x100004180,8]_0 ; [0x100004188,8] = [0x100004188,8]_0 ; [0x100004190,8] = [0x100004190,8]_0 ; [0x100004198,8] = [0x100004198,8]_0 ; [0x1000041a0,1] = [0x1000041a0,1]_0 ; [0x1000041a8,8] = [0x1000041a8,8]_0 ; [0x1000041b0,8] = [0x1000041b0,8]_0 ; [0x1000041b8,8] = [0x1000041b8,8]_0 ; [0x1000041c0,8] = [0x1000041c0,8]_0 ; [0x1000041c8,1] = [0x1000041c8,1]_0 ; [0x1000041d0,8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 76),4] = [(RSP_0 -64 76),4]_0 ; [(RSP_0 -64 80),4] = 0x7fffffff ; [(RSP_0 -64 84),4] = [(RSP_0 -64 84),4]_0 ; [(RSP_0 -64 88),4] = [(RSP_0 -64 88),4]_0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = [(RSP_0 -64 108),4]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002adb: MOV QWORD PTR [RBP - 64], RAX 4"
 Post  "RAX = 0 ; RBX = b32(RDI_0) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = 0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100004180,8] = [0x100004180,8]_0 ; [0x100004188,8] = [0x100004188,8]_0 ; [0x100004190,8] = [0x100004190,8]_0 ; [0x100004198,8] = [0x100004198,8]_0 ; [0x1000041a0,1] = [0x1000041a0,1]_0 ; [0x1000041a8,8] = [0x1000041a8,8]_0 ; [0x1000041b0,8] = [0x1000041b0,8]_0 ; [0x1000041b8,8] = [0x1000041b8,8]_0 ; [0x1000041c0,8] = [0x1000041c0,8]_0 ; [0x1000041c8,1] = [0x1000041c8,1]_0 ; [0x1000041d0,8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = 0 ; [(RSP_0 -64 76),4] = [(RSP_0 -64 76),4]_0 ; [(RSP_0 -64 80),4] = 0x7fffffff ; [(RSP_0 -64 84),4] = [(RSP_0 -64 84),4]_0 ; [(RSP_0 -64 88),4] = [(RSP_0 -64 88),4]_0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = [(RSP_0 -64 108),4]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002adf"
 Separations "((RSP_0 -64 64),4) SEP (bot(fun____error),4); ((RSP_0 -64 64),4) SEP (bot(fun__fts_read_INODE64),8); ((RSP_0 -64 64),4) SEP (RSI_0,8); ((RSP_0 -64 64),4) SEP ([0x100004018,8]_0,8); ((RSP_0 -64 64),4) SEP ([0x100004020,8]_0,4); ((RSP_0 -64 64),4) SEP (0x100004018,8); ((RSP_0 -64 64),4) SEP (0x100004020,8); ((RSP_0 -64 64),4) SEP (0x100004180,8); ((RSP_0 -64 64),4) SEP (0x100004188,8); ((RSP_0 -64 64),4) SEP (0x100004190,8); ((RSP_0 -64 64),4) SEP (0x100004198,8); ((RSP_0 -64 64),4) SEP (0x1000041a0,1); ((RSP_0 -64 64),4) SEP (0x1000041a8,8); ((RSP_0 -64 64),4) SEP (0x1000041b0,8); ((RSP_0 -64 64),4) SEP (0x1000041b8,8); ((RSP_0 -64 64),4) SEP (0x1000041c0,8); ((RSP_0 -64 64),4) SEP (0x1000041c8,1); ((RSP_0 -64 64),4) SEP (0x1000041d0,8); ((RSP_0 -64 64),4) SEP (0x1000041d8,8); ((RSP_0 -64 64),4) SEP ((bot(fun__fts_read_INODE64) +64 8),8); ((RSP_0 -64 64),4) SEP ((bot(fun__fts_read_INODE64) +64 24),8); ((RSP_0 -64 64),4) SEP ((bot(fun__fts_read_INODE64) +64 48),8); ((RSP_0 -64 64),4) SEP ((bot(fun__fts_read_INODE64) +64 56),4); ((RSP_0 -64 64),4) SEP ((bot(fun__fts_read_INODE64) +64 86),2); ((RSP_0 -64 64),4) SEP ((bot(fun__fts_read_INODE64) +64 88),4); ((RSP_0 -64 64),4) SEP ((bot(fun__fts_read_INODE64) +64 96),8); ((RSP_0 -64 64),4) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 64),4) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); ((RSP_0 -64 64),4) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4); ((RSP_0 -64 64),8) SEP (bot(fun____error),4); ((RSP_0 -64 64),8) SEP (RSI_0,8); ((RSP_0 -64 64),8) SEP ((bot(fun__fts_read_INODE64) +64 24),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 8),8)"
 Assertions  ""
 Pre   "RAX = 0 ; RBX = b32(RDI_0) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = 0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100004180,8] = [0x100004180,8]_0 ; [0x100004188,8] = [0x100004188,8]_0 ; [0x100004190,8] = [0x100004190,8]_0 ; [0x100004198,8] = [0x100004198,8]_0 ; [0x1000041a0,1] = [0x1000041a0,1]_0 ; [0x1000041a8,8] = [0x1000041a8,8]_0 ; [0x1000041b0,8] = [0x1000041b0,8]_0 ; [0x1000041b8,8] = [0x1000041b8,8]_0 ; [0x1000041c0,8] = [0x1000041c0,8]_0 ; [0x1000041c8,1] = [0x1000041c8,1]_0 ; [0x1000041d0,8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = 0 ; [(RSP_0 -64 76),4] = [(RSP_0 -64 76),4]_0 ; [(RSP_0 -64 80),4] = 0x7fffffff ; [(RSP_0 -64 84),4] = [(RSP_0 -64 84),4]_0 ; [(RSP_0 -64 88),4] = [(RSP_0 -64 88),4]_0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = [(RSP_0 -64 108),4]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002adf: MOV DWORD PTR [RBP - 56], 0 7"
 Post  "RAX = 0 ; RBX = b32(RDI_0) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = 0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100004180,8] = [0x100004180,8]_0 ; [0x100004188,8] = [0x100004188,8]_0 ; [0x100004190,8] = [0x100004190,8]_0 ; [0x100004198,8] = [0x100004198,8]_0 ; [0x1000041a0,1] = [0x1000041a0,1]_0 ; [0x1000041a8,8] = [0x1000041a8,8]_0 ; [0x1000041b0,8] = [0x1000041b0,8]_0 ; [0x1000041b8,8] = [0x1000041b8,8]_0 ; [0x1000041c0,8] = [0x1000041c0,8]_0 ; [0x1000041c8,1] = [0x1000041c8,1]_0 ; [0x1000041d0,8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 72),8] = 0 ; [(RSP_0 -64 76),4] = [(RSP_0 -64 76),4]_0 ; [(RSP_0 -64 80),4] = 0x7fffffff ; [(RSP_0 -64 84),4] = [(RSP_0 -64 84),4]_0 ; [(RSP_0 -64 88),4] = [(RSP_0 -64 88),4]_0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = [(RSP_0 -64 108),4]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002ae6"
 Separations "((RSP_0 -64 88),4) SEP (bot(fun____error),4); ((RSP_0 -64 88),4) SEP (bot(fun__fts_read_INODE64),8); ((RSP_0 -64 88),4) SEP (RSI_0,8); ((RSP_0 -64 88),4) SEP ([0x100004018,8]_0,8); ((RSP_0 -64 88),4) SEP ([0x100004020,8]_0,4); ((RSP_0 -64 88),4) SEP (0x100004018,8); ((RSP_0 -64 88),4) SEP (0x100004020,8); ((RSP_0 -64 88),4) SEP (0x100004180,8); ((RSP_0 -64 88),4) SEP (0x100004188,8); ((RSP_0 -64 88),4) SEP (0x100004190,8); ((RSP_0 -64 88),4) SEP (0x100004198,8); ((RSP_0 -64 88),4) SEP (0x1000041a0,1); ((RSP_0 -64 88),4) SEP (0x1000041a8,8); ((RSP_0 -64 88),4) SEP (0x1000041b0,8); ((RSP_0 -64 88),4) SEP (0x1000041b8,8); ((RSP_0 -64 88),4) SEP (0x1000041c0,8); ((RSP_0 -64 88),4) SEP (0x1000041c8,1); ((RSP_0 -64 88),4) SEP (0x1000041d0,8); ((RSP_0 -64 88),4) SEP (0x1000041d8,8); ((RSP_0 -64 88),4) SEP ((bot(fun__fts_read_INODE64) +64 8),8); ((RSP_0 -64 88),4) SEP ((bot(fun__fts_read_INODE64) +64 24),8); ((RSP_0 -64 88),4) SEP ((bot(fun__fts_read_INODE64) +64 48),8); ((RSP_0 -64 88),4) SEP ((bot(fun__fts_read_INODE64) +64 56),4); ((RSP_0 -64 88),4) SEP ((bot(fun__fts_read_INODE64) +64 86),2); ((RSP_0 -64 88),4) SEP ((bot(fun__fts_read_INODE64) +64 88),4); ((RSP_0 -64 88),4) SEP ((bot(fun__fts_read_INODE64) +64 96),8); ((RSP_0 -64 88),4) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 88),4) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); ((RSP_0 -64 88),4) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = 0 ; RBX = b32(RDI_0) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = 0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100004180,8] = [0x100004180,8]_0 ; [0x100004188,8] = [0x100004188,8]_0 ; [0x100004190,8] = [0x100004190,8]_0 ; [0x100004198,8] = [0x100004198,8]_0 ; [0x1000041a0,1] = [0x1000041a0,1]_0 ; [0x1000041a8,8] = [0x1000041a8,8]_0 ; [0x1000041b0,8] = [0x1000041b0,8]_0 ; [0x1000041b8,8] = [0x1000041b8,8]_0 ; [0x1000041c0,8] = [0x1000041c0,8]_0 ; [0x1000041c8,1] = [0x1000041c8,1]_0 ; [0x1000041d0,8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 72),8] = 0 ; [(RSP_0 -64 76),4] = [(RSP_0 -64 76),4]_0 ; [(RSP_0 -64 80),4] = 0x7fffffff ; [(RSP_0 -64 84),4] = [(RSP_0 -64 84),4]_0 ; [(RSP_0 -64 88),4] = [(RSP_0 -64 88),4]_0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = [(RSP_0 -64 108),4]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002ae6: MOV DWORD PTR [RBP - 80], 0 7"
 Post  "RAX = 0 ; RBX = b32(RDI_0) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = 0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100004180,8] = [0x100004180,8]_0 ; [0x100004188,8] = [0x100004188,8]_0 ; [0x100004190,8] = [0x100004190,8]_0 ; [0x100004198,8] = [0x100004198,8]_0 ; [0x1000041a0,1] = [0x1000041a0,1]_0 ; [0x1000041a8,8] = [0x1000041a8,8]_0 ; [0x1000041b0,8] = [0x1000041b0,8]_0 ; [0x1000041b8,8] = [0x1000041b8,8]_0 ; [0x1000041c0,8] = [0x1000041c0,8]_0 ; [0x1000041c8,1] = [0x1000041c8,1]_0 ; [0x1000041d0,8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 72),8] = 0 ; [(RSP_0 -64 76),4] = [(RSP_0 -64 76),4]_0 ; [(RSP_0 -64 80),4] = 0x7fffffff ; [(RSP_0 -64 84),4] = [(RSP_0 -64 84),4]_0 ; [(RSP_0 -64 88),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = [(RSP_0 -64 108),4]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002aed"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = b32(RDI_0) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = 0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100004180,8] = [0x100004180,8]_0 ; [0x100004188,8] = [0x100004188,8]_0 ; [0x100004190,8] = [0x100004190,8]_0 ; [0x100004198,8] = [0x100004198,8]_0 ; [0x1000041a0,1] = [0x1000041a0,1]_0 ; [0x1000041a8,8] = [0x1000041a8,8]_0 ; [0x1000041b0,8] = [0x1000041b0,8]_0 ; [0x1000041b8,8] = [0x1000041b8,8]_0 ; [0x1000041c0,8] = [0x1000041c0,8]_0 ; [0x1000041c8,1] = [0x1000041c8,1]_0 ; [0x1000041d0,8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 72),8] = 0 ; [(RSP_0 -64 76),4] = [(RSP_0 -64 76),4]_0 ; [(RSP_0 -64 80),4] = 0x7fffffff ; [(RSP_0 -64 84),4] = [(RSP_0 -64 84),4]_0 ; [(RSP_0 -64 88),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = [(RSP_0 -64 108),4]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002aed: XOR R15D, R15D 3"
 Post  "RAX = 0 ; RBX = b32(RDI_0) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R14 = RSI_0 ; R13 = 0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100004180,8] = [0x100004180,8]_0 ; [0x100004188,8] = [0x100004188,8]_0 ; [0x100004190,8] = [0x100004190,8]_0 ; [0x100004198,8] = [0x100004198,8]_0 ; [0x1000041a0,1] = [0x1000041a0,1]_0 ; [0x1000041a8,8] = [0x1000041a8,8]_0 ; [0x1000041b0,8] = [0x1000041b0,8]_0 ; [0x1000041b8,8] = [0x1000041b8,8]_0 ; [0x1000041c0,8] = [0x1000041c0,8]_0 ; [0x1000041c8,1] = [0x1000041c8,1]_0 ; [0x1000041d0,8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 72),8] = 0 ; [(RSP_0 -64 76),4] = [(RSP_0 -64 76),4]_0 ; [(RSP_0 -64 80),4] = 0x7fffffff ; [(RSP_0 -64 84),4] = [(RSP_0 -64 84),4]_0 ; [(RSP_0 -64 88),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = [(RSP_0 -64 108),4]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002af0"
 Separations "((RSP_0 -64 76),4) SEP (bot(fun____error),4); ((RSP_0 -64 76),4) SEP (bot(fun__fts_read_INODE64),8); ((RSP_0 -64 76),4) SEP (RSI_0,8); ((RSP_0 -64 76),4) SEP ([0x100004018,8]_0,8); ((RSP_0 -64 76),4) SEP ([0x100004020,8]_0,4); ((RSP_0 -64 76),4) SEP (0x100004018,8); ((RSP_0 -64 76),4) SEP (0x100004020,8); ((RSP_0 -64 76),4) SEP (0x100004180,8); ((RSP_0 -64 76),4) SEP (0x100004188,8); ((RSP_0 -64 76),4) SEP (0x100004190,8); ((RSP_0 -64 76),4) SEP (0x100004198,8); ((RSP_0 -64 76),4) SEP (0x1000041a0,1); ((RSP_0 -64 76),4) SEP (0x1000041a8,8); ((RSP_0 -64 76),4) SEP (0x1000041b0,8); ((RSP_0 -64 76),4) SEP (0x1000041b8,8); ((RSP_0 -64 76),4) SEP (0x1000041c0,8); ((RSP_0 -64 76),4) SEP (0x1000041c8,1); ((RSP_0 -64 76),4) SEP (0x1000041d0,8); ((RSP_0 -64 76),4) SEP (0x1000041d8,8); ((RSP_0 -64 76),4) SEP ((bot(fun__fts_read_INODE64) +64 8),8); ((RSP_0 -64 76),4) SEP ((bot(fun__fts_read_INODE64) +64 24),8); ((RSP_0 -64 76),4) SEP ((bot(fun__fts_read_INODE64) +64 48),8); ((RSP_0 -64 76),4) SEP ((bot(fun__fts_read_INODE64) +64 56),4); ((RSP_0 -64 76),4) SEP ((bot(fun__fts_read_INODE64) +64 86),2); ((RSP_0 -64 76),4) SEP ((bot(fun__fts_read_INODE64) +64 88),4); ((RSP_0 -64 76),4) SEP ((bot(fun__fts_read_INODE64) +64 96),8); ((RSP_0 -64 76),4) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 76),4) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); ((RSP_0 -64 76),4) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = 0 ; RBX = b32(RDI_0) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R14 = RSI_0 ; R13 = 0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100004180,8] = [0x100004180,8]_0 ; [0x100004188,8] = [0x100004188,8]_0 ; [0x100004190,8] = [0x100004190,8]_0 ; [0x100004198,8] = [0x100004198,8]_0 ; [0x1000041a0,1] = [0x1000041a0,1]_0 ; [0x1000041a8,8] = [0x1000041a8,8]_0 ; [0x1000041b0,8] = [0x1000041b0,8]_0 ; [0x1000041b8,8] = [0x1000041b8,8]_0 ; [0x1000041c0,8] = [0x1000041c0,8]_0 ; [0x1000041c8,1] = [0x1000041c8,1]_0 ; [0x1000041d0,8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 72),8] = 0 ; [(RSP_0 -64 76),4] = [(RSP_0 -64 76),4]_0 ; [(RSP_0 -64 80),4] = 0x7fffffff ; [(RSP_0 -64 84),4] = [(RSP_0 -64 84),4]_0 ; [(RSP_0 -64 88),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = [(RSP_0 -64 108),4]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002af0: MOV DWORD PTR [RBP - 68], 0 7"
 Post  "RAX = 0 ; RBX = b32(RDI_0) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R14 = RSI_0 ; R13 = 0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100004180,8] = [0x100004180,8]_0 ; [0x100004188,8] = [0x100004188,8]_0 ; [0x100004190,8] = [0x100004190,8]_0 ; [0x100004198,8] = [0x100004198,8]_0 ; [0x1000041a0,1] = [0x1000041a0,1]_0 ; [0x1000041a8,8] = [0x1000041a8,8]_0 ; [0x1000041b0,8] = [0x1000041b0,8]_0 ; [0x1000041b8,8] = [0x1000041b8,8]_0 ; [0x1000041c0,8] = [0x1000041c0,8]_0 ; [0x1000041c8,1] = [0x1000041c8,1]_0 ; [0x1000041d0,8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 72),8] = 0 ; [(RSP_0 -64 76),4] = 0 ; [(RSP_0 -64 80),4] = 0x7fffffff ; [(RSP_0 -64 84),4] = [(RSP_0 -64 84),4]_0 ; [(RSP_0 -64 88),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = [(RSP_0 -64 108),4]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002af7"
 Separations "((RSP_0 -64 84),4) SEP (bot(fun____error),4); ((RSP_0 -64 84),4) SEP (bot(fun__fts_read_INODE64),8); ((RSP_0 -64 84),4) SEP (RSI_0,8); ((RSP_0 -64 84),4) SEP ([0x100004018,8]_0,8); ((RSP_0 -64 84),4) SEP ([0x100004020,8]_0,4); ((RSP_0 -64 84),4) SEP (0x100004018,8); ((RSP_0 -64 84),4) SEP (0x100004020,8); ((RSP_0 -64 84),4) SEP (0x100004180,8); ((RSP_0 -64 84),4) SEP (0x100004188,8); ((RSP_0 -64 84),4) SEP (0x100004190,8); ((RSP_0 -64 84),4) SEP (0x100004198,8); ((RSP_0 -64 84),4) SEP (0x1000041a0,1); ((RSP_0 -64 84),4) SEP (0x1000041a8,8); ((RSP_0 -64 84),4) SEP (0x1000041b0,8); ((RSP_0 -64 84),4) SEP (0x1000041b8,8); ((RSP_0 -64 84),4) SEP (0x1000041c0,8); ((RSP_0 -64 84),4) SEP (0x1000041c8,1); ((RSP_0 -64 84),4) SEP (0x1000041d0,8); ((RSP_0 -64 84),4) SEP (0x1000041d8,8); ((RSP_0 -64 84),4) SEP ((bot(fun__fts_read_INODE64) +64 8),8); ((RSP_0 -64 84),4) SEP ((bot(fun__fts_read_INODE64) +64 24),8); ((RSP_0 -64 84),4) SEP ((bot(fun__fts_read_INODE64) +64 48),8); ((RSP_0 -64 84),4) SEP ((bot(fun__fts_read_INODE64) +64 56),4); ((RSP_0 -64 84),4) SEP ((bot(fun__fts_read_INODE64) +64 86),2); ((RSP_0 -64 84),4) SEP ((bot(fun__fts_read_INODE64) +64 88),4); ((RSP_0 -64 84),4) SEP ((bot(fun__fts_read_INODE64) +64 96),8); ((RSP_0 -64 84),4) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 84),4) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); ((RSP_0 -64 84),4) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = 0 ; RBX = b32(RDI_0) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R14 = RSI_0 ; R13 = 0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100004180,8] = [0x100004180,8]_0 ; [0x100004188,8] = [0x100004188,8]_0 ; [0x100004190,8] = [0x100004190,8]_0 ; [0x100004198,8] = [0x100004198,8]_0 ; [0x1000041a0,1] = [0x1000041a0,1]_0 ; [0x1000041a8,8] = [0x1000041a8,8]_0 ; [0x1000041b0,8] = [0x1000041b0,8]_0 ; [0x1000041b8,8] = [0x1000041b8,8]_0 ; [0x1000041c0,8] = [0x1000041c0,8]_0 ; [0x1000041c8,1] = [0x1000041c8,1]_0 ; [0x1000041d0,8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 72),8] = 0 ; [(RSP_0 -64 76),4] = 0 ; [(RSP_0 -64 80),4] = 0x7fffffff ; [(RSP_0 -64 84),4] = [(RSP_0 -64 84),4]_0 ; [(RSP_0 -64 88),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = [(RSP_0 -64 108),4]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002af7: MOV DWORD PTR [RBP - 76], 0 7"
 Post  "RAX = 0 ; RBX = b32(RDI_0) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R14 = RSI_0 ; R13 = 0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100004180,8] = [0x100004180,8]_0 ; [0x100004188,8] = [0x100004188,8]_0 ; [0x100004190,8] = [0x100004190,8]_0 ; [0x100004198,8] = [0x100004198,8]_0 ; [0x1000041a0,1] = [0x1000041a0,1]_0 ; [0x1000041a8,8] = [0x1000041a8,8]_0 ; [0x1000041b0,8] = [0x1000041b0,8]_0 ; [0x1000041b8,8] = [0x1000041b8,8]_0 ; [0x1000041c0,8] = [0x1000041c0,8]_0 ; [0x1000041c8,1] = [0x1000041c8,1]_0 ; [0x1000041d0,8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 72),8] = 0 ; [(RSP_0 -64 76),4] = 0 ; [(RSP_0 -64 80),4] = 0x7fffffff ; [(RSP_0 -64 84),4] = 0 ; [(RSP_0 -64 88),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = [(RSP_0 -64 108),4]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100002a94, blockId == 1 ##
#####################################
*)

htriple "ht_100002b1e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__getopt) ; RBX = b32(RDI_0) ; RCX = (b32(bot(fun__getopt)) -32 97) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002b1e: LEA RDX, [RIP + 2963] 7"
 Post  "RAX = bot(fun__getopt) ; RBX = b32(RDI_0) ; RCX = (b32(bot(fun__getopt)) -32 97) ; RDX = 0x1000036b8 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002b25"
 Separations "((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4) SEP (RSI_0,8); ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4) SEP (RSP_0,8); ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4) SEP (0x100004018,8); ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4) SEP (0x100004020,8); ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4) SEP (0x100004180,8); ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4) SEP (0x100004188,8); ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4) SEP (0x100004190,8); ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4) SEP (0x100004198,8); ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4) SEP (0x1000041a0,1); ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4) SEP (0x1000041a8,8); ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4) SEP (0x1000041b0,8); ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4) SEP (0x1000041b8,8); ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4) SEP (0x1000041c0,8); ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4) SEP (0x1000041c8,1); ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4) SEP (0x1000041d0,8); ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4) SEP (0x1000041d8,8); ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4) SEP ((RSI_0 +64 8),8); ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4) SEP ((RSP_0 -64 8),8); ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4) SEP ((RSP_0 -64 16),8); ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4) SEP ((RSP_0 -64 24),8); ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4) SEP ((RSP_0 -64 32),8); ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4) SEP ((RSP_0 -64 40),8); ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4) SEP ((RSP_0 -64 48),8); ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4) SEP ((RSP_0 -64 52),4); ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4) SEP ((RSP_0 -64 64),4); ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4) SEP ((RSP_0 -64 64),8); ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4) SEP ((RSP_0 -64 72),8); ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4) SEP ((RSP_0 -64 76),4); ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4) SEP ((RSP_0 -64 80),4); ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4) SEP ((RSP_0 -64 84),4); ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4) SEP ((RSP_0 -64 88),4); ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4) SEP ((RSP_0 -64 92),4); ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4) SEP ((RSP_0 -64 104),8); ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4) SEP ((RSP_0 -64 108),4); ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4) SEP ((RSP_0 -64 264),8); ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RAX = bot(fun__getopt) ; RBX = b32(RDI_0) ; RCX = (b32(bot(fun__getopt)) -32 97) ; RDX = 0x1000036b8 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002b25: MOVSXD RAX, DWORD PTR [RDX + RCX * 4] 4"
 Post  "RBX = b32(RDI_0) ; RCX = (b32(bot(fun__getopt)) -32 97) ; RDX = 0x1000036b8 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002b29"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(RDI_0) ; RCX = (b32(bot(fun__getopt)) -32 97) ; RDX = 0x1000036b8 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002b29: ADD RAX, RDX 3"
 Post  "RBX = b32(RDI_0) ; RCX = (b32(bot(fun__getopt)) -32 97) ; RDX = 0x1000036b8 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002b2c"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(RDI_0) ; RCX = (b32(bot(fun__getopt)) -32 97) ; RDX = 0x1000036b8 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002b2c: JMP RAX 2"
 Post  "RBX = b32(RDI_0) ; RCX = (b32(bot(fun__getopt)) -32 97) ; RDX = 0x1000036b8 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100002a94, blockId == 2 ##
#####################################
*)

htriple "ht_100002b37"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__getopt) ; RBX = b32(RDI_0) ; RCX = (b32(bot(fun__getopt)) -32 97) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002b37: LEA ECX, [RAX - 72] 3"
 Post  "RAX = bot(fun__getopt) ; RBX = b32(RDI_0) ; RCX = (b32(bot(fun__getopt)) -32 72) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002b3a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__getopt) ; RBX = b32(RDI_0) ; RCX = (b32(bot(fun__getopt)) -32 72) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002b3a: CMP ECX, 8 3"
 Post  "RAX = bot(fun__getopt) ; RBX = b32(RDI_0) ; RCX = (b32(bot(fun__getopt)) -32 72) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002b3d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__getopt) ; RBX = b32(RDI_0) ; RCX = (b32(bot(fun__getopt)) -32 72) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002b3d: JA 4294978673 6"
 Post  "RAX = bot(fun__getopt) ; RBX = b32(RDI_0) ; RCX = (b32(bot(fun__getopt)) -32 72) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100002a94, blockId == 3 ##
#####################################
*)

htriple "ht_100002b05"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(RDI_0) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002b05: MOV EDI, EBX 2"
 Post  "RBX = b32(RDI_0) ; RDI = b32(RDI_0) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002b07"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(RDI_0) ; RDI = b32(RDI_0) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002b07: MOV RSI, R14 3"
 Post  "RBX = b32(RDI_0) ; RDI = b32(RDI_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002b0a"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(RDI_0) ; RDI = b32(RDI_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002b0a: LEA RDX, [RIP + 4647] 7"
 Post  "RBX = b32(RDI_0) ; RDX = 0x100003d38 ; RDI = b32(RDI_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002b11"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(RDI_0) ; RDX = 0x100003d38 ; RDI = b32(RDI_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002b11: ExternalCall fun__getopt 5"
 Post  "RAX = bot(fun__getopt) ; RBX = b32(RDI_0) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 FunctionConstraints "PRESERVES fun__getopt {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004018,8];[0x100004020,8];[0x100004180,8];[0x100004188,8];[0x100004190,8];[0x100004198,8];[0x1000041a0,1];[0x1000041a8,8];[0x1000041b0,8];[0x1000041b8,8];[0x1000041c0,8];[0x1000041c8,1];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 76),4];[(RSP_0 -64 80),4];[(RSP_0 -64 84),4];[(RSP_0 -64 88),4];[(RSP_0 -64 92),4];[(RSP_0 -64 104),8];[(RSP_0 -64 108),4];[(RSP_0 -64 264),8];[(RSP_0 -64 280),16]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002b16"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__getopt) ; RBX = b32(RDI_0) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002b16: LEA ECX, [RAX - 97] 3"
 Post  "RAX = bot(fun__getopt) ; RBX = b32(RDI_0) ; RCX = (b32(bot(fun__getopt)) -32 97) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002b19"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__getopt) ; RBX = b32(RDI_0) ; RCX = (b32(bot(fun__getopt)) -32 97) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002b19: CMP ECX, 23 3"
 Post  "RAX = bot(fun__getopt) ; RBX = b32(RDI_0) ; RCX = (b32(bot(fun__getopt)) -32 97) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002b1c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__getopt) ; RBX = b32(RDI_0) ; RCX = (b32(bot(fun__getopt)) -32 97) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002b1c: JA 4294978359 2"
 Post  "RAX = bot(fun__getopt) ; RBX = b32(RDI_0) ; RCX = (b32(bot(fun__getopt)) -32 97) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100002a94, blockId == 4 ##
#####################################
*)

htriple "ht_100002b2e"
 Separations "((RSP_0 -64 88),4) SEP (bot(fun____error),4); ((RSP_0 -64 88),4) SEP (bot(fun__fts_read_INODE64),8); ((RSP_0 -64 88),4) SEP (RSI_0,8); ((RSP_0 -64 88),4) SEP ([0x100004018,8]_0,8); ((RSP_0 -64 88),4) SEP ([0x100004020,8]_0,4); ((RSP_0 -64 88),4) SEP (0x100004018,8); ((RSP_0 -64 88),4) SEP (0x100004020,8); ((RSP_0 -64 88),4) SEP (0x100004180,8); ((RSP_0 -64 88),4) SEP (0x100004188,8); ((RSP_0 -64 88),4) SEP (0x100004190,8); ((RSP_0 -64 88),4) SEP (0x100004198,8); ((RSP_0 -64 88),4) SEP (0x1000041a0,1); ((RSP_0 -64 88),4) SEP (0x1000041a8,8); ((RSP_0 -64 88),4) SEP (0x1000041b0,8); ((RSP_0 -64 88),4) SEP (0x1000041b8,8); ((RSP_0 -64 88),4) SEP (0x1000041c0,8); ((RSP_0 -64 88),4) SEP (0x1000041c8,1); ((RSP_0 -64 88),4) SEP (0x1000041d0,8); ((RSP_0 -64 88),4) SEP (0x1000041d8,8); ((RSP_0 -64 88),4) SEP ((bot(fun__fts_read_INODE64) +64 8),8); ((RSP_0 -64 88),4) SEP ((bot(fun__fts_read_INODE64) +64 24),8); ((RSP_0 -64 88),4) SEP ((bot(fun__fts_read_INODE64) +64 48),8); ((RSP_0 -64 88),4) SEP ((bot(fun__fts_read_INODE64) +64 56),4); ((RSP_0 -64 88),4) SEP ((bot(fun__fts_read_INODE64) +64 86),2); ((RSP_0 -64 88),4) SEP ((bot(fun__fts_read_INODE64) +64 88),4); ((RSP_0 -64 88),4) SEP ((bot(fun__fts_read_INODE64) +64 96),8); ((RSP_0 -64 88),4) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 88),4) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); ((RSP_0 -64 88),4) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4)"
 Assertions  ""
 Pre   "RBX = b32(RDI_0) ; RCX = (b32(bot(fun__getopt)) -32 97) ; RDX = 0x1000036b8 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002b2e: MOV DWORD PTR [RBP - 80], 1 7"
 Post  "RBX = b32(RDI_0) ; RCX = (b32(bot(fun__getopt)) -32 97) ; RDX = 0x1000036b8 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 88),4] = 1 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002b35"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(RDI_0) ; RCX = (b32(bot(fun__getopt)) -32 97) ; RDX = 0x1000036b8 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 88),4] = 1 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002b35: JMP 4294978309 2"
 Post  "RBX = b32(RDI_0) ; RCX = (b32(bot(fun__getopt)) -32 97) ; RDX = 0x1000036b8 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 88),4] = 1 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100002a94, blockId == 5 ##
#####################################
*)

htriple "ht_100002b68"
 Separations "((RSP_0 -64 84),4) SEP (bot(fun____error),4); ((RSP_0 -64 84),4) SEP (bot(fun__fts_read_INODE64),8); ((RSP_0 -64 84),4) SEP (RSI_0,8); ((RSP_0 -64 84),4) SEP ([0x100004018,8]_0,8); ((RSP_0 -64 84),4) SEP ([0x100004020,8]_0,4); ((RSP_0 -64 84),4) SEP (0x100004018,8); ((RSP_0 -64 84),4) SEP (0x100004020,8); ((RSP_0 -64 84),4) SEP (0x100004180,8); ((RSP_0 -64 84),4) SEP (0x100004188,8); ((RSP_0 -64 84),4) SEP (0x100004190,8); ((RSP_0 -64 84),4) SEP (0x100004198,8); ((RSP_0 -64 84),4) SEP (0x1000041a0,1); ((RSP_0 -64 84),4) SEP (0x1000041a8,8); ((RSP_0 -64 84),4) SEP (0x1000041b0,8); ((RSP_0 -64 84),4) SEP (0x1000041b8,8); ((RSP_0 -64 84),4) SEP (0x1000041c0,8); ((RSP_0 -64 84),4) SEP (0x1000041c8,1); ((RSP_0 -64 84),4) SEP (0x1000041d0,8); ((RSP_0 -64 84),4) SEP (0x1000041d8,8); ((RSP_0 -64 84),4) SEP ((bot(fun__fts_read_INODE64) +64 8),8); ((RSP_0 -64 84),4) SEP ((bot(fun__fts_read_INODE64) +64 24),8); ((RSP_0 -64 84),4) SEP ((bot(fun__fts_read_INODE64) +64 48),8); ((RSP_0 -64 84),4) SEP ((bot(fun__fts_read_INODE64) +64 56),4); ((RSP_0 -64 84),4) SEP ((bot(fun__fts_read_INODE64) +64 86),2); ((RSP_0 -64 84),4) SEP ((bot(fun__fts_read_INODE64) +64 88),4); ((RSP_0 -64 84),4) SEP ((bot(fun__fts_read_INODE64) +64 96),8); ((RSP_0 -64 84),4) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 84),4) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); ((RSP_0 -64 84),4) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4)"
 Assertions  ""
 Pre   "RBX = b32(RDI_0) ; RCX = (b32(bot(fun__getopt)) -32 97) ; RDX = 0x1000036b8 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002b68: MOV DWORD PTR [RBP - 76], 1 7"
 Post  "RBX = b32(RDI_0) ; RCX = (b32(bot(fun__getopt)) -32 97) ; RDX = 0x1000036b8 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 84),4] = 1 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002b6f"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(RDI_0) ; RCX = (b32(bot(fun__getopt)) -32 97) ; RDX = 0x1000036b8 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 84),4] = 1 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002b6f: JMP 4294978309 2"
 Post  "RBX = b32(RDI_0) ; RCX = (b32(bot(fun__getopt)) -32 97) ; RDX = 0x1000036b8 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 84),4] = 1 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100002a94, blockId == 6 ##
#####################################
*)

htriple "ht_100002b71"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(RDI_0) ; RCX = (b32(bot(fun__getopt)) -32 97) ; RDX = 0x1000036b8 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002b71: ExternalCall fun____error 5"
 Post  "RAX = bot(fun____error) ; RBX = b32(RDI_0) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 FunctionConstraints "PRESERVES fun____error {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004018,8];[0x100004020,8];[0x100004180,8];[0x100004188,8];[0x100004190,8];[0x100004198,8];[0x1000041a0,1];[0x1000041a8,8];[0x1000041b0,8];[0x1000041b8,8];[0x1000041c0,8];[0x1000041c8,1];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 76),4];[(RSP_0 -64 80),4];[(RSP_0 -64 84),4];[(RSP_0 -64 88),4];[(RSP_0 -64 92),4];[(RSP_0 -64 104),8];[(RSP_0 -64 108),4];[(RSP_0 -64 264),8];[(RSP_0 -64 280),16]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002b76"
 Separations "(bot(fun____error),4) SEP (RSI_0,8); (bot(fun____error),4) SEP (RSP_0,8); (bot(fun____error),4) SEP ([0x100004018,8]_0,8); (bot(fun____error),4) SEP ([0x100004020,8]_0,4); (bot(fun____error),4) SEP (0x100004018,8); (bot(fun____error),4) SEP (0x100004020,8); (bot(fun____error),4) SEP (0x100004180,8); (bot(fun____error),4) SEP (0x100004188,8); (bot(fun____error),4) SEP (0x100004190,8); (bot(fun____error),4) SEP (0x100004198,8); (bot(fun____error),4) SEP (0x1000041a0,1); (bot(fun____error),4) SEP (0x1000041a8,8); (bot(fun____error),4) SEP (0x1000041b0,8); (bot(fun____error),4) SEP (0x1000041b8,8); (bot(fun____error),4) SEP (0x1000041c0,8); (bot(fun____error),4) SEP (0x1000041c8,1); (bot(fun____error),4) SEP (0x1000041d0,8); (bot(fun____error),4) SEP (0x1000041d8,8); (bot(fun____error),4) SEP ((RSI_0 +64 8),8); (bot(fun____error),4) SEP ((RSP_0 -64 8),8); (bot(fun____error),4) SEP ((RSP_0 -64 16),8); (bot(fun____error),4) SEP ((RSP_0 -64 24),8); (bot(fun____error),4) SEP ((RSP_0 -64 32),8); (bot(fun____error),4) SEP ((RSP_0 -64 40),8); (bot(fun____error),4) SEP ((RSP_0 -64 48),8); (bot(fun____error),4) SEP ((RSP_0 -64 52),4); (bot(fun____error),4) SEP ((RSP_0 -64 64),4); (bot(fun____error),4) SEP ((RSP_0 -64 64),8); (bot(fun____error),4) SEP ((RSP_0 -64 72),4); (bot(fun____error),4) SEP ((RSP_0 -64 72),8); (bot(fun____error),4) SEP ((RSP_0 -64 76),4); (bot(fun____error),4) SEP ((RSP_0 -64 80),4); (bot(fun____error),4) SEP ((RSP_0 -64 84),4); (bot(fun____error),4) SEP ((RSP_0 -64 88),4); (bot(fun____error),4) SEP ((RSP_0 -64 92),4); (bot(fun____error),4) SEP ((RSP_0 -64 104),8); (bot(fun____error),4) SEP ((RSP_0 -64 108),4); (bot(fun____error),4) SEP ((RSP_0 -64 116),4); (bot(fun____error),4) SEP ((RSP_0 -64 264),8); (bot(fun____error),4) SEP ((RSP_0 -64 268),4); (bot(fun____error),4) SEP ((RSP_0 -64 280),2); (bot(fun____error),4) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RAX = bot(fun____error) ; RBX = b32(RDI_0) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002b76: MOV DWORD PTR [RAX], 0 6"
 Post  "RAX = bot(fun____error) ; RBX = b32(RDI_0) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002b7c"
 Separations "(0x100004018,8) SEP (bot(fun____error),4); (0x100004018,8) SEP (bot(fun__fts_read_INODE64),8); (0x100004018,8) SEP (RSI_0,8); (0x100004018,8) SEP (RSP_0,8); (0x100004018,8) SEP ([0x100004018,8]_0,8); (0x100004018,8) SEP ([0x100004020,8]_0,4); (0x100004018,8) SEP ((bot(fun__fts_read_INODE64) +64 8),8); (0x100004018,8) SEP ((bot(fun__fts_read_INODE64) +64 24),8); (0x100004018,8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x100004018,8) SEP ((bot(fun__fts_read_INODE64) +64 56),4); (0x100004018,8) SEP ((bot(fun__fts_read_INODE64) +64 86),2); (0x100004018,8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x100004018,8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x100004018,8) SEP ((RSI_0 +64 8),8); (0x100004018,8) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); (0x100004018,8) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4); (0x100004018,8) SEP ((RSP_0 -64 8),8); (0x100004018,8) SEP ((RSP_0 -64 16),8); (0x100004018,8) SEP ((RSP_0 -64 24),8); (0x100004018,8) SEP ((RSP_0 -64 32),8); (0x100004018,8) SEP ((RSP_0 -64 40),8); (0x100004018,8) SEP ((RSP_0 -64 48),8); (0x100004018,8) SEP ((RSP_0 -64 52),4); (0x100004018,8) SEP ((RSP_0 -64 64),4); (0x100004018,8) SEP ((RSP_0 -64 64),8); (0x100004018,8) SEP ((RSP_0 -64 72),8); (0x100004018,8) SEP ((RSP_0 -64 76),4); (0x100004018,8) SEP ((RSP_0 -64 80),4); (0x100004018,8) SEP ((RSP_0 -64 84),4); (0x100004018,8) SEP ((RSP_0 -64 88),4); (0x100004018,8) SEP ((RSP_0 -64 92),4); (0x100004018,8) SEP ((RSP_0 -64 104),8); (0x100004018,8) SEP ((RSP_0 -64 108),4); (0x100004018,8) SEP ((RSP_0 -64 264),8); (0x100004018,8) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RAX = bot(fun____error) ; RBX = b32(RDI_0) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002b7c: MOV RAX, QWORD PTR [RIP + 5269] 7"
 Post  "RAX = [0x100004018,8]_0 ; RBX = b32(RDI_0) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002b83"
 Separations "([0x100004018,8]_0,8) SEP (bot(fun____error),4); ([0x100004018,8]_0,8) SEP (RSI_0,8); ([0x100004018,8]_0,8) SEP (RSP_0,8); ([0x100004018,8]_0,8) SEP (0x100004018,8); ([0x100004018,8]_0,8) SEP (0x100004020,8); ([0x100004018,8]_0,8) SEP (0x100004180,8); ([0x100004018,8]_0,8) SEP (0x100004188,8); ([0x100004018,8]_0,8) SEP (0x100004190,8); ([0x100004018,8]_0,8) SEP (0x100004198,8); ([0x100004018,8]_0,8) SEP (0x1000041a0,1); ([0x100004018,8]_0,8) SEP (0x1000041a8,8); ([0x100004018,8]_0,8) SEP (0x1000041b0,8); ([0x100004018,8]_0,8) SEP (0x1000041b8,8); ([0x100004018,8]_0,8) SEP (0x1000041c0,8); ([0x100004018,8]_0,8) SEP (0x1000041c8,1); ([0x100004018,8]_0,8) SEP (0x1000041d0,8); ([0x100004018,8]_0,8) SEP (0x1000041d8,8); ([0x100004018,8]_0,8) SEP ((RSI_0 +64 8),8); ([0x100004018,8]_0,8) SEP ((RSP_0 -64 8),8); ([0x100004018,8]_0,8) SEP ((RSP_0 -64 16),8); ([0x100004018,8]_0,8) SEP ((RSP_0 -64 24),8); ([0x100004018,8]_0,8) SEP ((RSP_0 -64 32),8); ([0x100004018,8]_0,8) SEP ((RSP_0 -64 40),8); ([0x100004018,8]_0,8) SEP ((RSP_0 -64 48),8); ([0x100004018,8]_0,8) SEP ((RSP_0 -64 52),4); ([0x100004018,8]_0,8) SEP ((RSP_0 -64 64),4); ([0x100004018,8]_0,8) SEP ((RSP_0 -64 64),8); ([0x100004018,8]_0,8) SEP ((RSP_0 -64 72),8); ([0x100004018,8]_0,8) SEP ((RSP_0 -64 76),4); ([0x100004018,8]_0,8) SEP ((RSP_0 -64 80),4); ([0x100004018,8]_0,8) SEP ((RSP_0 -64 84),4); ([0x100004018,8]_0,8) SEP ((RSP_0 -64 88),4); ([0x100004018,8]_0,8) SEP ((RSP_0 -64 92),4); ([0x100004018,8]_0,8) SEP ((RSP_0 -64 104),8); ([0x100004018,8]_0,8) SEP ((RSP_0 -64 108),4); ([0x100004018,8]_0,8) SEP ((RSP_0 -64 264),8); ([0x100004018,8]_0,8) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RAX = [0x100004018,8]_0 ; RBX = b32(RDI_0) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002b83: MOV RDI, QWORD PTR [RAX] 3"
 Post  "RAX = [0x100004018,8]_0 ; RBX = b32(RDI_0) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002b86"
 Separations ""
 Assertions  ""
 Pre   "RAX = [0x100004018,8]_0 ; RBX = b32(RDI_0) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002b86: ExternalCall fun__atoi 5"
 Post  "RAX = bot(fun__atoi) ; RBX = b32(RDI_0) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 FunctionConstraints "PRESERVES fun__atoi {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004018,8];[0x100004020,8];[0x100004180,8];[0x100004188,8];[0x100004190,8];[0x100004198,8];[0x1000041a0,1];[0x1000041a8,8];[0x1000041b0,8];[0x1000041b8,8];[0x1000041c0,8];[0x1000041c8,1];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 76),4];[(RSP_0 -64 80),4];[(RSP_0 -64 84),4];[(RSP_0 -64 88),4];[(RSP_0 -64 92),4];[(RSP_0 -64 104),8];[(RSP_0 -64 108),4];[(RSP_0 -64 264),8];[(RSP_0 -64 280),16]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002b8b"
 Separations "((RSP_0 -64 108),4) SEP (bot(fun____error),4); ((RSP_0 -64 108),4) SEP (bot(fun__fts_read_INODE64),8); ((RSP_0 -64 108),4) SEP (RSI_0,8); ((RSP_0 -64 108),4) SEP ([0x100004018,8]_0,8); ((RSP_0 -64 108),4) SEP ([0x100004020,8]_0,4); ((RSP_0 -64 108),4) SEP (0x100004018,8); ((RSP_0 -64 108),4) SEP (0x100004020,8); ((RSP_0 -64 108),4) SEP (0x100004180,8); ((RSP_0 -64 108),4) SEP (0x100004188,8); ((RSP_0 -64 108),4) SEP (0x100004190,8); ((RSP_0 -64 108),4) SEP (0x100004198,8); ((RSP_0 -64 108),4) SEP (0x1000041a0,1); ((RSP_0 -64 108),4) SEP (0x1000041a8,8); ((RSP_0 -64 108),4) SEP (0x1000041b0,8); ((RSP_0 -64 108),4) SEP (0x1000041b8,8); ((RSP_0 -64 108),4) SEP (0x1000041c0,8); ((RSP_0 -64 108),4) SEP (0x1000041c8,1); ((RSP_0 -64 108),4) SEP (0x1000041d0,8); ((RSP_0 -64 108),4) SEP (0x1000041d8,8); ((RSP_0 -64 108),4) SEP ((bot(fun__fts_read_INODE64) +64 8),8); ((RSP_0 -64 108),4) SEP ((bot(fun__fts_read_INODE64) +64 24),8); ((RSP_0 -64 108),4) SEP ((bot(fun__fts_read_INODE64) +64 48),8); ((RSP_0 -64 108),4) SEP ((bot(fun__fts_read_INODE64) +64 56),4); ((RSP_0 -64 108),4) SEP ((bot(fun__fts_read_INODE64) +64 86),2); ((RSP_0 -64 108),4) SEP ((bot(fun__fts_read_INODE64) +64 88),4); ((RSP_0 -64 108),4) SEP ((bot(fun__fts_read_INODE64) +64 96),8); ((RSP_0 -64 108),4) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 108),4) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); ((RSP_0 -64 108),4) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun__atoi) ; RBX = b32(RDI_0) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002b8b: MOV DWORD PTR [RBP - 100], EBX 3"
 Post  "RAX = bot(fun__atoi) ; RBX = b32(RDI_0) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = b32(RDI_0) ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002b8e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__atoi) ; RBX = b32(RDI_0) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = b32(RDI_0) ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002b8e: MOV RBX, R14 3"
 Post  "RAX = bot(fun__atoi) ; RBX = RSI_0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = b32(RDI_0) ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002b91"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__atoi) ; RBX = RSI_0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = b32(RDI_0) ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002b91: MOV R14, R13 3"
 Post  "RAX = bot(fun__atoi) ; RBX = RSI_0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = b32(RDI_0) ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002b94"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__atoi) ; RBX = RSI_0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = b32(RDI_0) ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002b94: MOV R13D, R15D 3"
 Post  "RAX = bot(fun__atoi) ; RBX = RSI_0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = b32(RDI_0) ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002b97"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__atoi) ; RBX = RSI_0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = b32(RDI_0) ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002b97: MOV R15D, R12D 3"
 Post  "RAX = bot(fun__atoi) ; RBX = RSI_0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R15 = 4 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = b32(RDI_0) ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002b9a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__atoi) ; RBX = RSI_0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R15 = 4 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = b32(RDI_0) ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002b9a: MOV R12D, EAX 3"
 Post  "RAX = bot(fun__atoi) ; RBX = RSI_0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R15 = 4 ; R12 = b32(bot(fun__atoi)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = b32(RDI_0) ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002b9d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__atoi) ; RBX = RSI_0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R15 = 4 ; R12 = b32(bot(fun__atoi)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = b32(RDI_0) ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002b9d: ExternalCall fun____error 5"
 Post  "RAX = bot(fun____error) ; RBX = RSI_0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R15 = 4 ; R12 = b32(bot(fun__atoi)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = b32(RDI_0) ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 FunctionConstraints "PRESERVES fun____error {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004018,8];[0x100004020,8];[0x100004180,8];[0x100004188,8];[0x100004190,8];[0x100004198,8];[0x1000041a0,1];[0x1000041a8,8];[0x1000041b0,8];[0x1000041b8,8];[0x1000041c0,8];[0x1000041c8,1];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 76),4];[(RSP_0 -64 80),4];[(RSP_0 -64 84),4];[(RSP_0 -64 88),4];[(RSP_0 -64 92),4];[(RSP_0 -64 104),8];[(RSP_0 -64 108),4];[(RSP_0 -64 264),8];[(RSP_0 -64 280),16]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002ba2"
 Separations "((RSP_0 -64 80),4) SEP (bot(fun____error),4); ((RSP_0 -64 80),4) SEP (bot(fun__fts_read_INODE64),8); ((RSP_0 -64 80),4) SEP (RSI_0,8); ((RSP_0 -64 80),4) SEP ([0x100004018,8]_0,8); ((RSP_0 -64 80),4) SEP ([0x100004020,8]_0,4); ((RSP_0 -64 80),4) SEP (0x100004018,8); ((RSP_0 -64 80),4) SEP (0x100004020,8); ((RSP_0 -64 80),4) SEP (0x100004180,8); ((RSP_0 -64 80),4) SEP (0x100004188,8); ((RSP_0 -64 80),4) SEP (0x100004190,8); ((RSP_0 -64 80),4) SEP (0x100004198,8); ((RSP_0 -64 80),4) SEP (0x1000041a0,1); ((RSP_0 -64 80),4) SEP (0x1000041a8,8); ((RSP_0 -64 80),4) SEP (0x1000041b0,8); ((RSP_0 -64 80),4) SEP (0x1000041b8,8); ((RSP_0 -64 80),4) SEP (0x1000041c0,8); ((RSP_0 -64 80),4) SEP (0x1000041c8,1); ((RSP_0 -64 80),4) SEP (0x1000041d0,8); ((RSP_0 -64 80),4) SEP (0x1000041d8,8); ((RSP_0 -64 80),4) SEP ((bot(fun__fts_read_INODE64) +64 8),8); ((RSP_0 -64 80),4) SEP ((bot(fun__fts_read_INODE64) +64 24),8); ((RSP_0 -64 80),4) SEP ((bot(fun__fts_read_INODE64) +64 48),8); ((RSP_0 -64 80),4) SEP ((bot(fun__fts_read_INODE64) +64 56),4); ((RSP_0 -64 80),4) SEP ((bot(fun__fts_read_INODE64) +64 86),2); ((RSP_0 -64 80),4) SEP ((bot(fun__fts_read_INODE64) +64 88),4); ((RSP_0 -64 80),4) SEP ((bot(fun__fts_read_INODE64) +64 96),8); ((RSP_0 -64 80),4) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 80),4) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); ((RSP_0 -64 80),4) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun____error) ; RBX = RSI_0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R15 = 4 ; R12 = b32(bot(fun__atoi)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = b32(RDI_0) ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002ba2: MOV DWORD PTR [RBP - 72], R12D 4"
 Post  "RAX = bot(fun____error) ; RBX = RSI_0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R15 = 4 ; R12 = b32(bot(fun__atoi)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 80),4] = b32(bot(fun__atoi)) ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = b32(RDI_0) ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002ba6"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun____error) ; RBX = RSI_0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R15 = 4 ; R12 = b32(bot(fun__atoi)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 80),4] = b32(bot(fun__atoi)) ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = b32(RDI_0) ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002ba6: TEST R12D, R12D 3"
 Post  "RAX = bot(fun____error) ; RBX = RSI_0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R15 = 4 ; R12 = b32(bot(fun__atoi)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 80),4] = b32(bot(fun__atoi)) ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = b32(RDI_0) ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002ba9"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun____error) ; RBX = RSI_0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R15 = 4 ; R12 = b32(bot(fun__atoi)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 80),4] = b32(bot(fun__atoi)) ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = b32(RDI_0) ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002ba9: MOV R12D, R15D 3"
 Post  "RAX = bot(fun____error) ; RBX = RSI_0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R15 = 4 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 80),4] = b32(bot(fun__atoi)) ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = b32(RDI_0) ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002bac"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun____error) ; RBX = RSI_0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R15 = 4 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 80),4] = b32(bot(fun__atoi)) ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = b32(RDI_0) ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002bac: MOV R15D, R13D 3"
 Post  "RAX = bot(fun____error) ; RBX = RSI_0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 80),4] = b32(bot(fun__atoi)) ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = b32(RDI_0) ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002baf"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun____error) ; RBX = RSI_0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 80),4] = b32(bot(fun__atoi)) ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = b32(RDI_0) ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002baf: MOV R13, R14 3"
 Post  "RAX = bot(fun____error) ; RBX = RSI_0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 80),4] = b32(bot(fun__atoi)) ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = b32(RDI_0) ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002bb2"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun____error) ; RBX = RSI_0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 80),4] = b32(bot(fun__atoi)) ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = b32(RDI_0) ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002bb2: MOV R14, RBX 3"
 Post  "RAX = bot(fun____error) ; RBX = RSI_0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 80),4] = b32(bot(fun__atoi)) ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = b32(RDI_0) ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002bb5"
 Separations "((RSP_0 -64 108),4) SEP (bot(fun____error),4); ((RSP_0 -64 108),4) SEP (bot(fun__fts_read_INODE64),8); ((RSP_0 -64 108),4) SEP (RSI_0,8); ((RSP_0 -64 108),4) SEP ([0x100004018,8]_0,8); ((RSP_0 -64 108),4) SEP ([0x100004020,8]_0,4); ((RSP_0 -64 108),4) SEP (0x100004018,8); ((RSP_0 -64 108),4) SEP (0x100004020,8); ((RSP_0 -64 108),4) SEP (0x100004180,8); ((RSP_0 -64 108),4) SEP (0x100004188,8); ((RSP_0 -64 108),4) SEP (0x100004190,8); ((RSP_0 -64 108),4) SEP (0x100004198,8); ((RSP_0 -64 108),4) SEP (0x1000041a0,1); ((RSP_0 -64 108),4) SEP (0x1000041a8,8); ((RSP_0 -64 108),4) SEP (0x1000041b0,8); ((RSP_0 -64 108),4) SEP (0x1000041b8,8); ((RSP_0 -64 108),4) SEP (0x1000041c0,8); ((RSP_0 -64 108),4) SEP (0x1000041c8,1); ((RSP_0 -64 108),4) SEP (0x1000041d0,8); ((RSP_0 -64 108),4) SEP (0x1000041d8,8); ((RSP_0 -64 108),4) SEP ((bot(fun__fts_read_INODE64) +64 8),8); ((RSP_0 -64 108),4) SEP ((bot(fun__fts_read_INODE64) +64 24),8); ((RSP_0 -64 108),4) SEP ((bot(fun__fts_read_INODE64) +64 48),8); ((RSP_0 -64 108),4) SEP ((bot(fun__fts_read_INODE64) +64 56),4); ((RSP_0 -64 108),4) SEP ((bot(fun__fts_read_INODE64) +64 86),2); ((RSP_0 -64 108),4) SEP ((bot(fun__fts_read_INODE64) +64 88),4); ((RSP_0 -64 108),4) SEP ((bot(fun__fts_read_INODE64) +64 96),8); ((RSP_0 -64 108),4) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 108),4) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); ((RSP_0 -64 108),4) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun____error) ; RBX = RSI_0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 80),4] = b32(bot(fun__atoi)) ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = b32(RDI_0) ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002bb5: MOV EBX, DWORD PTR [RBP - 100] 3"
 Post  "RAX = bot(fun____error) ; RBX = b32(RDI_0) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 80),4] = b32(bot(fun__atoi)) ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = b32(RDI_0) ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002bb8"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun____error) ; RBX = b32(RDI_0) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 80),4] = b32(bot(fun__atoi)) ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = b32(RDI_0) ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002bb8: JS 4294981110 6"
 Post  "RAX = bot(fun____error) ; RBX = b32(RDI_0) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 80),4] = b32(bot(fun__atoi)) ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = b32(RDI_0) ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100002a94, blockId == 7 ##
#####################################
*)

htriple "ht_100002bd3"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(RDI_0) ; RCX = (b32(bot(fun__getopt)) -32 97) ; RDX = 0x1000036b8 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002bd3: MOV R15D, 1 6"
 Post  "RBX = b32(RDI_0) ; RCX = (b32(bot(fun__getopt)) -32 97) ; RDX = 0x1000036b8 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002bd9"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(RDI_0) ; RCX = (b32(bot(fun__getopt)) -32 97) ; RDX = 0x1000036b8 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002bd9: JMP 4294978309 5"
 Post  "RBX = b32(RDI_0) ; RCX = (b32(bot(fun__getopt)) -32 97) ; RDX = 0x1000036b8 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100002a94, blockId == 8 ##
#####################################
*)

htriple "ht_100002bde"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(RDI_0) ; RCX = (b32(bot(fun__getopt)) -32 97) ; RDX = 0x1000036b8 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002bde: LEA RDI, [RIP + 4485] 7"
 Post  "RBX = b32(RDI_0) ; RCX = (b32(bot(fun__getopt)) -32 97) ; RDX = 0x1000036b8 ; RDI = 0x100003d6a ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002be5"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(RDI_0) ; RCX = (b32(bot(fun__getopt)) -32 97) ; RDX = 0x1000036b8 ; RDI = 0x100003d6a ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002be5: ExternalCall fun__putenv 5"
 Post  "RAX = bot(fun__putenv) ; RBX = b32(RDI_0) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 FunctionConstraints "PRESERVES fun__putenv {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004018,8];[0x100004020,8];[0x100004180,8];[0x100004188,8];[0x100004190,8];[0x100004198,8];[0x1000041a0,1];[0x1000041a8,8];[0x1000041b0,8];[0x1000041b8,8];[0x1000041c0,8];[0x1000041c8,1];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 76),4];[(RSP_0 -64 80),4];[(RSP_0 -64 84),4];[(RSP_0 -64 88),4];[(RSP_0 -64 92),4];[(RSP_0 -64 104),8];[(RSP_0 -64 108),4];[(RSP_0 -64 264),8];[(RSP_0 -64 280),16]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002bea"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__putenv) ; RBX = b32(RDI_0) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002bea: LEA RAX, [RIP + 5439] 7"
 Post  "RAX = 0x100004130 ; RBX = b32(RDI_0) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002bf1"
 Separations "(0x1000041d8,8) SEP (bot(fun____error),4); (0x1000041d8,8) SEP (bot(fun__fts_read_INODE64),8); (0x1000041d8,8) SEP (RSI_0,8); (0x1000041d8,8) SEP (RSP_0,8); (0x1000041d8,8) SEP ([0x100004018,8]_0,8); (0x1000041d8,8) SEP ([0x100004020,8]_0,4); (0x1000041d8,8) SEP ((bot(fun__fts_read_INODE64) +64 8),8); (0x1000041d8,8) SEP ((bot(fun__fts_read_INODE64) +64 24),8); (0x1000041d8,8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x1000041d8,8) SEP ((bot(fun__fts_read_INODE64) +64 56),4); (0x1000041d8,8) SEP ((bot(fun__fts_read_INODE64) +64 86),2); (0x1000041d8,8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x1000041d8,8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x1000041d8,8) SEP ((RSI_0 +64 8),8); (0x1000041d8,8) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); (0x1000041d8,8) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4); (0x1000041d8,8) SEP ((RSP_0 -64 8),8); (0x1000041d8,8) SEP ((RSP_0 -64 16),8); (0x1000041d8,8) SEP ((RSP_0 -64 24),8); (0x1000041d8,8) SEP ((RSP_0 -64 32),8); (0x1000041d8,8) SEP ((RSP_0 -64 40),8); (0x1000041d8,8) SEP ((RSP_0 -64 48),8); (0x1000041d8,8) SEP ((RSP_0 -64 52),4); (0x1000041d8,8) SEP ((RSP_0 -64 64),4); (0x1000041d8,8) SEP ((RSP_0 -64 64),8); (0x1000041d8,8) SEP ((RSP_0 -64 72),8); (0x1000041d8,8) SEP ((RSP_0 -64 76),4); (0x1000041d8,8) SEP ((RSP_0 -64 80),4); (0x1000041d8,8) SEP ((RSP_0 -64 84),4); (0x1000041d8,8) SEP ((RSP_0 -64 88),4); (0x1000041d8,8) SEP ((RSP_0 -64 92),4); (0x1000041d8,8) SEP ((RSP_0 -64 104),8); (0x1000041d8,8) SEP ((RSP_0 -64 108),4); (0x1000041d8,8) SEP ((RSP_0 -64 264),8); (0x1000041d8,8) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RAX = 0x100004130 ; RBX = b32(RDI_0) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002bf1: MOV QWORD PTR [RIP + 5600], RAX 7"
 Post  "RAX = 0x100004130 ; RBX = b32(RDI_0) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000041d8,8] = 0x100004130 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002bf8"
 Separations "((RSP_0 -64 52),4) SEP (bot(fun____error),4); ((RSP_0 -64 52),4) SEP (bot(fun__fts_read_INODE64),8); ((RSP_0 -64 52),4) SEP (RSI_0,8); ((RSP_0 -64 52),4) SEP ([0x100004018,8]_0,8); ((RSP_0 -64 52),4) SEP ([0x100004020,8]_0,4); ((RSP_0 -64 52),4) SEP (0x100004018,8); ((RSP_0 -64 52),4) SEP (0x100004020,8); ((RSP_0 -64 52),4) SEP (0x100004180,8); ((RSP_0 -64 52),4) SEP (0x100004188,8); ((RSP_0 -64 52),4) SEP (0x100004190,8); ((RSP_0 -64 52),4) SEP (0x100004198,8); ((RSP_0 -64 52),4) SEP (0x1000041a0,1); ((RSP_0 -64 52),4) SEP (0x1000041a8,8); ((RSP_0 -64 52),4) SEP (0x1000041b0,8); ((RSP_0 -64 52),4) SEP (0x1000041b8,8); ((RSP_0 -64 52),4) SEP (0x1000041c0,8); ((RSP_0 -64 52),4) SEP (0x1000041c8,1); ((RSP_0 -64 52),4) SEP (0x1000041d0,8); ((RSP_0 -64 52),4) SEP (0x1000041d8,8); ((RSP_0 -64 52),4) SEP ((bot(fun__fts_read_INODE64) +64 8),8); ((RSP_0 -64 52),4) SEP ((bot(fun__fts_read_INODE64) +64 24),8); ((RSP_0 -64 52),4) SEP ((bot(fun__fts_read_INODE64) +64 48),8); ((RSP_0 -64 52),4) SEP ((bot(fun__fts_read_INODE64) +64 56),4); ((RSP_0 -64 52),4) SEP ((bot(fun__fts_read_INODE64) +64 86),2); ((RSP_0 -64 52),4) SEP ((bot(fun__fts_read_INODE64) +64 88),4); ((RSP_0 -64 52),4) SEP ((bot(fun__fts_read_INODE64) +64 96),8); ((RSP_0 -64 52),4) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 52),4) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); ((RSP_0 -64 52),4) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = 0x100004130 ; RBX = b32(RDI_0) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000041d8,8] = 0x100004130 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002bf8: MOV DWORD PTR [RBP - 44], 1 7"
 Post  "RAX = 0x100004130 ; RBX = b32(RDI_0) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000041d8,8] = 0x100004130 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 1 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002bff"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x100004130 ; RBX = b32(RDI_0) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000041d8,8] = 0x100004130 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 1 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002bff: JMP 4294978309 5"
 Post  "RAX = 0x100004130 ; RBX = b32(RDI_0) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000041d8,8] = 0x100004130 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 1 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100002a94, blockId == 9 ##
#####################################
*)

htriple "ht_100002c4e"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(RDI_0) ; RCX = (b32(bot(fun__getopt)) -32 97) ; RDX = 0x1000036b8 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002c4e: LEA RDI, [RIP + 4387] 7"
 Post  "RBX = b32(RDI_0) ; RCX = (b32(bot(fun__getopt)) -32 97) ; RDX = 0x1000036b8 ; RDI = 0x100003d78 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002c55"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(RDI_0) ; RCX = (b32(bot(fun__getopt)) -32 97) ; RDX = 0x1000036b8 ; RDI = 0x100003d78 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002c55: JMP 4294978663 2"
 Post  "RBX = b32(RDI_0) ; RCX = (b32(bot(fun__getopt)) -32 97) ; RDX = 0x1000036b8 ; RDI = 0x100003d78 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002a94, blockId == 10 ##
######################################
*)

htriple "ht_100002c57"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(RDI_0) ; RCX = (b32(bot(fun__getopt)) -32 97) ; RDX = 0x1000036b8 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002c57: LEA RDI, [RIP + 4393] 7"
 Post  "RBX = b32(RDI_0) ; RCX = (b32(bot(fun__getopt)) -32 97) ; RDX = 0x1000036b8 ; RDI = 0x100003d87 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002c5e"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(RDI_0) ; RCX = (b32(bot(fun__getopt)) -32 97) ; RDX = 0x1000036b8 ; RDI = 0x100003d87 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002c5e: JMP 4294978663 2"
 Post  "RBX = b32(RDI_0) ; RCX = (b32(bot(fun__getopt)) -32 97) ; RDX = 0x1000036b8 ; RDI = 0x100003d87 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002a94, blockId == 11 ##
######################################
*)

htriple "ht_100002c60"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(RDI_0) ; RCX = (b32(bot(fun__getopt)) -32 97) ; RDX = 0x1000036b8 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002c60: LEA RDI, [RIP + 4402] 7"
 Post  "RBX = b32(RDI_0) ; RCX = (b32(bot(fun__getopt)) -32 97) ; RDX = 0x1000036b8 ; RDI = 0x100003d99 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002a94, blockId == 12 ##
######################################
*)

htriple "ht_1000035f1"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "1000035f1: ExternalCall fun_0x10000379e 5"
 Post  "RAX = bot(fun_0x10000379e) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 FunctionConstraints "PRESERVES fun_0x10000379e {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004018,8];[0x100004020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 76),4];[(RSP_0 -64 80),4];[(RSP_0 -64 84),4];[(RSP_0 -64 88),4];[(RSP_0 -64 92),4];[(RSP_0 -64 104),8];[(RSP_0 -64 108),4];[(RSP_0 -64 264),8];[(RSP_0 -64 280),16]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002a94, blockId == 13 ##
######################################
*)

htriple "ht_100002b43"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__getopt) ; RBX = b32(RDI_0) ; RCX = (b32(bot(fun__getopt)) -32 72) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002b43: LEA RDX, [RIP + 2890] 7"
 Post  "RAX = bot(fun__getopt) ; RBX = b32(RDI_0) ; RCX = (b32(bot(fun__getopt)) -32 72) ; RDX = 0x100003694 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002b4a"
 Separations "((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4) SEP (RSI_0,8); ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4) SEP (RSP_0,8); ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4) SEP (0x100004018,8); ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4) SEP (0x100004020,8); ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4) SEP (0x100004180,8); ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4) SEP (0x100004188,8); ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4) SEP (0x100004190,8); ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4) SEP (0x100004198,8); ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4) SEP (0x1000041a0,1); ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4) SEP (0x1000041a8,8); ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4) SEP (0x1000041b0,8); ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4) SEP (0x1000041b8,8); ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4) SEP (0x1000041c0,8); ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4) SEP (0x1000041c8,1); ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4) SEP (0x1000041d0,8); ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4) SEP (0x1000041d8,8); ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4) SEP ((RSI_0 +64 8),8); ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4) SEP ((RSP_0 -64 8),8); ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4) SEP ((RSP_0 -64 16),8); ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4) SEP ((RSP_0 -64 24),8); ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4) SEP ((RSP_0 -64 32),8); ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4) SEP ((RSP_0 -64 40),8); ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4) SEP ((RSP_0 -64 48),8); ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4) SEP ((RSP_0 -64 52),4); ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4) SEP ((RSP_0 -64 64),4); ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4) SEP ((RSP_0 -64 64),8); ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4) SEP ((RSP_0 -64 72),8); ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4) SEP ((RSP_0 -64 76),4); ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4) SEP ((RSP_0 -64 80),4); ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4) SEP ((RSP_0 -64 84),4); ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4) SEP ((RSP_0 -64 88),4); ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4) SEP ((RSP_0 -64 92),4); ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4) SEP ((RSP_0 -64 104),8); ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4) SEP ((RSP_0 -64 108),4); ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4) SEP ((RSP_0 -64 264),8); ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RAX = bot(fun__getopt) ; RBX = b32(RDI_0) ; RCX = (b32(bot(fun__getopt)) -32 72) ; RDX = 0x100003694 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002b4a: MOVSXD RAX, DWORD PTR [RDX + RCX * 4] 4"
 Post  "RBX = b32(RDI_0) ; RCX = (b32(bot(fun__getopt)) -32 72) ; RDX = 0x100003694 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002b4e"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(RDI_0) ; RCX = (b32(bot(fun__getopt)) -32 72) ; RDX = 0x100003694 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002b4e: ADD RAX, RDX 3"
 Post  "RBX = b32(RDI_0) ; RCX = (b32(bot(fun__getopt)) -32 72) ; RDX = 0x100003694 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002b51"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(RDI_0) ; RCX = (b32(bot(fun__getopt)) -32 72) ; RDX = 0x100003694 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002b51: JMP RAX 2"
 Post  "RBX = b32(RDI_0) ; RCX = (b32(bot(fun__getopt)) -32 72) ; RDX = 0x100003694 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002a94, blockId == 14 ##
######################################
*)

htriple "ht_100002c71"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__getopt) ; RBX = b32(RDI_0) ; RCX = (b32(bot(fun__getopt)) -32 72) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002c71: CMP EAX, 18446744073709551615 3"
 Post  "RAX = bot(fun__getopt) ; RBX = b32(RDI_0) ; RCX = (b32(bot(fun__getopt)) -32 72) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002c74"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__getopt) ; RBX = b32(RDI_0) ; RCX = (b32(bot(fun__getopt)) -32 72) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002c74: JNE 4294981105 6"
 Post  "RAX = bot(fun__getopt) ; RBX = b32(RDI_0) ; RCX = (b32(bot(fun__getopt)) -32 72) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002a94, blockId == 15 ##
######################################
*)

htriple "ht_100002b53"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(RDI_0) ; RCX = (b32(bot(fun__getopt)) -32 72) ; RDX = 0x100003694 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002b53: MOV R13D, 1 6"
 Post  "RBX = b32(RDI_0) ; RCX = (b32(bot(fun__getopt)) -32 72) ; RDX = 0x100003694 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 1 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002b59"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(RDI_0) ; RCX = (b32(bot(fun__getopt)) -32 72) ; RDX = 0x100003694 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 1 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002b59: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = b32(RDI_0) ; RCX = (b32(bot(fun__getopt)) -32 72) ; RDX = 0x100003694 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 1 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002b5b"
 Separations "((RSP_0 -64 72),4) SEP (bot(fun____error),4); ((RSP_0 -64 72),4) SEP (RSI_0,8); ((RSP_0 -64 72),4) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 72),8) SEP (bot(fun____error),4); ((RSP_0 -64 72),8) SEP (bot(fun__fts_read_INODE64),8); ((RSP_0 -64 72),8) SEP (RSI_0,8); ((RSP_0 -64 72),8) SEP ([0x100004018,8]_0,8); ((RSP_0 -64 72),8) SEP ([0x100004020,8]_0,4); ((RSP_0 -64 72),8) SEP (0x100004018,8); ((RSP_0 -64 72),8) SEP (0x100004020,8); ((RSP_0 -64 72),8) SEP (0x100004180,8); ((RSP_0 -64 72),8) SEP (0x100004188,8); ((RSP_0 -64 72),8) SEP (0x100004190,8); ((RSP_0 -64 72),8) SEP (0x100004198,8); ((RSP_0 -64 72),8) SEP (0x1000041a0,1); ((RSP_0 -64 72),8) SEP (0x1000041a8,8); ((RSP_0 -64 72),8) SEP (0x1000041b0,8); ((RSP_0 -64 72),8) SEP (0x1000041b8,8); ((RSP_0 -64 72),8) SEP (0x1000041c0,8); ((RSP_0 -64 72),8) SEP (0x1000041c8,1); ((RSP_0 -64 72),8) SEP (0x1000041d0,8); ((RSP_0 -64 72),8) SEP (0x1000041d8,8); ((RSP_0 -64 72),8) SEP ((bot(fun__fts_read_INODE64) +64 8),8); ((RSP_0 -64 72),8) SEP ((bot(fun__fts_read_INODE64) +64 24),8); ((RSP_0 -64 72),8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); ((RSP_0 -64 72),8) SEP ((bot(fun__fts_read_INODE64) +64 56),4); ((RSP_0 -64 72),8) SEP ((bot(fun__fts_read_INODE64) +64 86),2); ((RSP_0 -64 72),8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); ((RSP_0 -64 72),8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); ((RSP_0 -64 72),8) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 72),8) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); ((RSP_0 -64 72),8) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = 0 ; RBX = b32(RDI_0) ; RCX = (b32(bot(fun__getopt)) -32 72) ; RDX = 0x100003694 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 1 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002b5b: MOV QWORD PTR [RBP - 64], RAX 4"
 Post  "RAX = 0 ; RBX = b32(RDI_0) ; RCX = (b32(bot(fun__getopt)) -32 72) ; RDX = 0x100003694 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 1 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 72),8] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002b5f"
 Separations "((RSP_0 -64 64),4) SEP (bot(fun____error),4); ((RSP_0 -64 64),4) SEP (bot(fun__fts_read_INODE64),8); ((RSP_0 -64 64),4) SEP (RSI_0,8); ((RSP_0 -64 64),4) SEP ([0x100004018,8]_0,8); ((RSP_0 -64 64),4) SEP ([0x100004020,8]_0,4); ((RSP_0 -64 64),4) SEP (0x100004018,8); ((RSP_0 -64 64),4) SEP (0x100004020,8); ((RSP_0 -64 64),4) SEP (0x100004180,8); ((RSP_0 -64 64),4) SEP (0x100004188,8); ((RSP_0 -64 64),4) SEP (0x100004190,8); ((RSP_0 -64 64),4) SEP (0x100004198,8); ((RSP_0 -64 64),4) SEP (0x1000041a0,1); ((RSP_0 -64 64),4) SEP (0x1000041a8,8); ((RSP_0 -64 64),4) SEP (0x1000041b0,8); ((RSP_0 -64 64),4) SEP (0x1000041b8,8); ((RSP_0 -64 64),4) SEP (0x1000041c0,8); ((RSP_0 -64 64),4) SEP (0x1000041c8,1); ((RSP_0 -64 64),4) SEP (0x1000041d0,8); ((RSP_0 -64 64),4) SEP (0x1000041d8,8); ((RSP_0 -64 64),4) SEP ((bot(fun__fts_read_INODE64) +64 8),8); ((RSP_0 -64 64),4) SEP ((bot(fun__fts_read_INODE64) +64 24),8); ((RSP_0 -64 64),4) SEP ((bot(fun__fts_read_INODE64) +64 48),8); ((RSP_0 -64 64),4) SEP ((bot(fun__fts_read_INODE64) +64 56),4); ((RSP_0 -64 64),4) SEP ((bot(fun__fts_read_INODE64) +64 86),2); ((RSP_0 -64 64),4) SEP ((bot(fun__fts_read_INODE64) +64 88),4); ((RSP_0 -64 64),4) SEP ((bot(fun__fts_read_INODE64) +64 96),8); ((RSP_0 -64 64),4) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 64),4) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); ((RSP_0 -64 64),4) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4); ((RSP_0 -64 64),8) SEP (bot(fun____error),4); ((RSP_0 -64 64),8) SEP (RSI_0,8); ((RSP_0 -64 64),8) SEP ((bot(fun__fts_read_INODE64) +64 24),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 8),8)"
 Assertions  ""
 Pre   "RAX = 0 ; RBX = b32(RDI_0) ; RCX = (b32(bot(fun__getopt)) -32 72) ; RDX = 0x100003694 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 1 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 72),8] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002b5f: MOV DWORD PTR [RBP - 56], 0 7"
 Post  "RAX = 0 ; RBX = b32(RDI_0) ; RCX = (b32(bot(fun__getopt)) -32 72) ; RDX = 0x100003694 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 1 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 72),8] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002b66"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = b32(RDI_0) ; RCX = (b32(bot(fun__getopt)) -32 72) ; RDX = 0x100003694 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 1 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 72),8] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002b66: JMP 4294978309 2"
 Post  "RAX = 0 ; RBX = b32(RDI_0) ; RCX = (b32(bot(fun__getopt)) -32 72) ; RDX = 0x100003694 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 1 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 72),8] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002a94, blockId == 16 ##
######################################
*)

htriple "ht_100002c0d"
 Separations "(0x100004018,8) SEP (bot(fun____error),4); (0x100004018,8) SEP (bot(fun__fts_read_INODE64),8); (0x100004018,8) SEP (RSI_0,8); (0x100004018,8) SEP (RSP_0,8); (0x100004018,8) SEP ([0x100004018,8]_0,8); (0x100004018,8) SEP ([0x100004020,8]_0,4); (0x100004018,8) SEP ((bot(fun__fts_read_INODE64) +64 8),8); (0x100004018,8) SEP ((bot(fun__fts_read_INODE64) +64 24),8); (0x100004018,8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x100004018,8) SEP ((bot(fun__fts_read_INODE64) +64 56),4); (0x100004018,8) SEP ((bot(fun__fts_read_INODE64) +64 86),2); (0x100004018,8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x100004018,8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x100004018,8) SEP ((RSI_0 +64 8),8); (0x100004018,8) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); (0x100004018,8) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4); (0x100004018,8) SEP ((RSP_0 -64 8),8); (0x100004018,8) SEP ((RSP_0 -64 16),8); (0x100004018,8) SEP ((RSP_0 -64 24),8); (0x100004018,8) SEP ((RSP_0 -64 32),8); (0x100004018,8) SEP ((RSP_0 -64 40),8); (0x100004018,8) SEP ((RSP_0 -64 48),8); (0x100004018,8) SEP ((RSP_0 -64 52),4); (0x100004018,8) SEP ((RSP_0 -64 64),4); (0x100004018,8) SEP ((RSP_0 -64 64),8); (0x100004018,8) SEP ((RSP_0 -64 72),8); (0x100004018,8) SEP ((RSP_0 -64 76),4); (0x100004018,8) SEP ((RSP_0 -64 80),4); (0x100004018,8) SEP ((RSP_0 -64 84),4); (0x100004018,8) SEP ((RSP_0 -64 88),4); (0x100004018,8) SEP ((RSP_0 -64 92),4); (0x100004018,8) SEP ((RSP_0 -64 104),8); (0x100004018,8) SEP ((RSP_0 -64 108),4); (0x100004018,8) SEP ((RSP_0 -64 264),8); (0x100004018,8) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RBX = b32(RDI_0) ; RCX = (b32(bot(fun__getopt)) -32 72) ; RDX = 0x100003694 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002c0d: MOV RAX, QWORD PTR [RIP + 5124] 7"
 Post  "RAX = [0x100004018,8]_0 ; RBX = b32(RDI_0) ; RCX = (b32(bot(fun__getopt)) -32 72) ; RDX = 0x100003694 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002c14"
 Separations "([0x100004018,8]_0,8) SEP (bot(fun____error),4); ([0x100004018,8]_0,8) SEP (RSI_0,8); ([0x100004018,8]_0,8) SEP (RSP_0,8); ([0x100004018,8]_0,8) SEP (0x100004018,8); ([0x100004018,8]_0,8) SEP (0x100004020,8); ([0x100004018,8]_0,8) SEP (0x100004180,8); ([0x100004018,8]_0,8) SEP (0x100004188,8); ([0x100004018,8]_0,8) SEP (0x100004190,8); ([0x100004018,8]_0,8) SEP (0x100004198,8); ([0x100004018,8]_0,8) SEP (0x1000041a0,1); ([0x100004018,8]_0,8) SEP (0x1000041a8,8); ([0x100004018,8]_0,8) SEP (0x1000041b0,8); ([0x100004018,8]_0,8) SEP (0x1000041b8,8); ([0x100004018,8]_0,8) SEP (0x1000041c0,8); ([0x100004018,8]_0,8) SEP (0x1000041c8,1); ([0x100004018,8]_0,8) SEP (0x1000041d0,8); ([0x100004018,8]_0,8) SEP (0x1000041d8,8); ([0x100004018,8]_0,8) SEP ((RSI_0 +64 8),8); ([0x100004018,8]_0,8) SEP ((RSP_0 -64 8),8); ([0x100004018,8]_0,8) SEP ((RSP_0 -64 16),8); ([0x100004018,8]_0,8) SEP ((RSP_0 -64 24),8); ([0x100004018,8]_0,8) SEP ((RSP_0 -64 32),8); ([0x100004018,8]_0,8) SEP ((RSP_0 -64 40),8); ([0x100004018,8]_0,8) SEP ((RSP_0 -64 48),8); ([0x100004018,8]_0,8) SEP ((RSP_0 -64 52),4); ([0x100004018,8]_0,8) SEP ((RSP_0 -64 64),4); ([0x100004018,8]_0,8) SEP ((RSP_0 -64 64),8); ([0x100004018,8]_0,8) SEP ((RSP_0 -64 72),8); ([0x100004018,8]_0,8) SEP ((RSP_0 -64 76),4); ([0x100004018,8]_0,8) SEP ((RSP_0 -64 80),4); ([0x100004018,8]_0,8) SEP ((RSP_0 -64 84),4); ([0x100004018,8]_0,8) SEP ((RSP_0 -64 88),4); ([0x100004018,8]_0,8) SEP ((RSP_0 -64 92),4); ([0x100004018,8]_0,8) SEP ((RSP_0 -64 104),8); ([0x100004018,8]_0,8) SEP ((RSP_0 -64 108),4); ([0x100004018,8]_0,8) SEP ((RSP_0 -64 264),8); ([0x100004018,8]_0,8) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RAX = [0x100004018,8]_0 ; RBX = b32(RDI_0) ; RCX = (b32(bot(fun__getopt)) -32 72) ; RDX = 0x100003694 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002c14: MOV RDI, QWORD PTR [RAX] 3"
 Post  "RAX = [0x100004018,8]_0 ; RBX = b32(RDI_0) ; RCX = (b32(bot(fun__getopt)) -32 72) ; RDX = 0x100003694 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002c17"
 Separations ""
 Assertions  ""
 Pre   "RAX = [0x100004018,8]_0 ; RBX = b32(RDI_0) ; RCX = (b32(bot(fun__getopt)) -32 72) ; RDX = 0x100003694 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002c17: ExternalCall fun_0x10000374c 5"
 Post  "RAX = bot(fun_0x10000374c) ; RBX = b32(RDI_0) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 FunctionConstraints "PRESERVES fun_0x10000374c {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004018,8];[0x100004020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 76),4];[(RSP_0 -64 80),4];[(RSP_0 -64 84),4];[(RSP_0 -64 88),4];[(RSP_0 -64 92),4];[(RSP_0 -64 104),8];[(RSP_0 -64 108),4];[(RSP_0 -64 264),8];[(RSP_0 -64 280),16]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002c1c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000374c) ; RBX = b32(RDI_0) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002c1c: JMP 4294978309 5"
 Post  "RAX = bot(fun_0x10000374c) ; RBX = b32(RDI_0) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002a94, blockId == 17 ##
######################################
*)

htriple "ht_100002c36"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(RDI_0) ; RCX = (b32(bot(fun__getopt)) -32 72) ; RDX = 0x100003694 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002c36: MOV EAX, 1 5"
 Post  "RAX = 1 ; RBX = b32(RDI_0) ; RCX = (b32(bot(fun__getopt)) -32 72) ; RDX = 0x100003694 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002c3b"
 Separations "((RSP_0 -64 72),4) SEP (bot(fun____error),4); ((RSP_0 -64 72),4) SEP (RSI_0,8); ((RSP_0 -64 72),4) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 72),8) SEP (bot(fun____error),4); ((RSP_0 -64 72),8) SEP (bot(fun__fts_read_INODE64),8); ((RSP_0 -64 72),8) SEP (RSI_0,8); ((RSP_0 -64 72),8) SEP ([0x100004018,8]_0,8); ((RSP_0 -64 72),8) SEP ([0x100004020,8]_0,4); ((RSP_0 -64 72),8) SEP (0x100004018,8); ((RSP_0 -64 72),8) SEP (0x100004020,8); ((RSP_0 -64 72),8) SEP (0x100004180,8); ((RSP_0 -64 72),8) SEP (0x100004188,8); ((RSP_0 -64 72),8) SEP (0x100004190,8); ((RSP_0 -64 72),8) SEP (0x100004198,8); ((RSP_0 -64 72),8) SEP (0x1000041a0,1); ((RSP_0 -64 72),8) SEP (0x1000041a8,8); ((RSP_0 -64 72),8) SEP (0x1000041b0,8); ((RSP_0 -64 72),8) SEP (0x1000041b8,8); ((RSP_0 -64 72),8) SEP (0x1000041c0,8); ((RSP_0 -64 72),8) SEP (0x1000041c8,1); ((RSP_0 -64 72),8) SEP (0x1000041d0,8); ((RSP_0 -64 72),8) SEP (0x1000041d8,8); ((RSP_0 -64 72),8) SEP ((bot(fun__fts_read_INODE64) +64 8),8); ((RSP_0 -64 72),8) SEP ((bot(fun__fts_read_INODE64) +64 24),8); ((RSP_0 -64 72),8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); ((RSP_0 -64 72),8) SEP ((bot(fun__fts_read_INODE64) +64 56),4); ((RSP_0 -64 72),8) SEP ((bot(fun__fts_read_INODE64) +64 86),2); ((RSP_0 -64 72),8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); ((RSP_0 -64 72),8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); ((RSP_0 -64 72),8) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 72),8) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); ((RSP_0 -64 72),8) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = 1 ; RBX = b32(RDI_0) ; RCX = (b32(bot(fun__getopt)) -32 72) ; RDX = 0x100003694 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002c3b: MOV QWORD PTR [RBP - 64], RAX 4"
 Post  "RAX = 1 ; RBX = b32(RDI_0) ; RCX = (b32(bot(fun__getopt)) -32 72) ; RDX = 0x100003694 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002c3f"
 Separations ""
 Assertions  ""
 Pre   "RAX = 1 ; RBX = b32(RDI_0) ; RCX = (b32(bot(fun__getopt)) -32 72) ; RDX = 0x100003694 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002c3f: XOR R13D, R13D 3"
 Post  "RAX = 1 ; RBX = b32(RDI_0) ; RCX = (b32(bot(fun__getopt)) -32 72) ; RDX = 0x100003694 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002c42"
 Separations "((RSP_0 -64 64),4) SEP (bot(fun____error),4); ((RSP_0 -64 64),4) SEP (bot(fun__fts_read_INODE64),8); ((RSP_0 -64 64),4) SEP (RSI_0,8); ((RSP_0 -64 64),4) SEP ([0x100004018,8]_0,8); ((RSP_0 -64 64),4) SEP ([0x100004020,8]_0,4); ((RSP_0 -64 64),4) SEP (0x100004018,8); ((RSP_0 -64 64),4) SEP (0x100004020,8); ((RSP_0 -64 64),4) SEP (0x100004180,8); ((RSP_0 -64 64),4) SEP (0x100004188,8); ((RSP_0 -64 64),4) SEP (0x100004190,8); ((RSP_0 -64 64),4) SEP (0x100004198,8); ((RSP_0 -64 64),4) SEP (0x1000041a0,1); ((RSP_0 -64 64),4) SEP (0x1000041a8,8); ((RSP_0 -64 64),4) SEP (0x1000041b0,8); ((RSP_0 -64 64),4) SEP (0x1000041b8,8); ((RSP_0 -64 64),4) SEP (0x1000041c0,8); ((RSP_0 -64 64),4) SEP (0x1000041c8,1); ((RSP_0 -64 64),4) SEP (0x1000041d0,8); ((RSP_0 -64 64),4) SEP (0x1000041d8,8); ((RSP_0 -64 64),4) SEP ((bot(fun__fts_read_INODE64) +64 8),8); ((RSP_0 -64 64),4) SEP ((bot(fun__fts_read_INODE64) +64 24),8); ((RSP_0 -64 64),4) SEP ((bot(fun__fts_read_INODE64) +64 48),8); ((RSP_0 -64 64),4) SEP ((bot(fun__fts_read_INODE64) +64 56),4); ((RSP_0 -64 64),4) SEP ((bot(fun__fts_read_INODE64) +64 86),2); ((RSP_0 -64 64),4) SEP ((bot(fun__fts_read_INODE64) +64 88),4); ((RSP_0 -64 64),4) SEP ((bot(fun__fts_read_INODE64) +64 96),8); ((RSP_0 -64 64),4) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 64),4) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); ((RSP_0 -64 64),4) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4); ((RSP_0 -64 64),8) SEP (bot(fun____error),4); ((RSP_0 -64 64),8) SEP (RSI_0,8); ((RSP_0 -64 64),8) SEP ((bot(fun__fts_read_INODE64) +64 24),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 8),8)"
 Assertions  ""
 Pre   "RAX = 1 ; RBX = b32(RDI_0) ; RCX = (b32(bot(fun__getopt)) -32 72) ; RDX = 0x100003694 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002c42: MOV DWORD PTR [RBP - 56], 0 7"
 Post  "RAX = 1 ; RBX = b32(RDI_0) ; RCX = (b32(bot(fun__getopt)) -32 72) ; RDX = 0x100003694 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002c49"
 Separations ""
 Assertions  ""
 Pre   "RAX = 1 ; RBX = b32(RDI_0) ; RCX = (b32(bot(fun__getopt)) -32 72) ; RDX = 0x100003694 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002c49: JMP 4294978309 5"
 Post  "RAX = 1 ; RBX = b32(RDI_0) ; RCX = (b32(bot(fun__getopt)) -32 72) ; RDX = 0x100003694 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = 0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 72),8] = 1 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002a94, blockId == 18 ##
######################################
*)

htriple "ht_100002bbe"
 Separations "((RSP_0 -64 76),4) SEP (bot(fun____error),4); ((RSP_0 -64 76),4) SEP (bot(fun__fts_read_INODE64),8); ((RSP_0 -64 76),4) SEP (RSI_0,8); ((RSP_0 -64 76),4) SEP ([0x100004018,8]_0,8); ((RSP_0 -64 76),4) SEP ([0x100004020,8]_0,4); ((RSP_0 -64 76),4) SEP (0x100004018,8); ((RSP_0 -64 76),4) SEP (0x100004020,8); ((RSP_0 -64 76),4) SEP (0x100004180,8); ((RSP_0 -64 76),4) SEP (0x100004188,8); ((RSP_0 -64 76),4) SEP (0x100004190,8); ((RSP_0 -64 76),4) SEP (0x100004198,8); ((RSP_0 -64 76),4) SEP (0x1000041a0,1); ((RSP_0 -64 76),4) SEP (0x1000041a8,8); ((RSP_0 -64 76),4) SEP (0x1000041b0,8); ((RSP_0 -64 76),4) SEP (0x1000041b8,8); ((RSP_0 -64 76),4) SEP (0x1000041c0,8); ((RSP_0 -64 76),4) SEP (0x1000041c8,1); ((RSP_0 -64 76),4) SEP (0x1000041d0,8); ((RSP_0 -64 76),4) SEP (0x1000041d8,8); ((RSP_0 -64 76),4) SEP ((bot(fun__fts_read_INODE64) +64 8),8); ((RSP_0 -64 76),4) SEP ((bot(fun__fts_read_INODE64) +64 24),8); ((RSP_0 -64 76),4) SEP ((bot(fun__fts_read_INODE64) +64 48),8); ((RSP_0 -64 76),4) SEP ((bot(fun__fts_read_INODE64) +64 56),4); ((RSP_0 -64 76),4) SEP ((bot(fun__fts_read_INODE64) +64 86),2); ((RSP_0 -64 76),4) SEP ((bot(fun__fts_read_INODE64) +64 88),4); ((RSP_0 -64 76),4) SEP ((bot(fun__fts_read_INODE64) +64 96),8); ((RSP_0 -64 76),4) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 76),4) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); ((RSP_0 -64 76),4) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun____error) ; RBX = b32(RDI_0) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 80),4] = b32(bot(fun__atoi)) ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = b32(RDI_0) ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002bbe: MOV DWORD PTR [RBP - 68], 1 7"
 Post  "RAX = bot(fun____error) ; RBX = b32(RDI_0) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 76),4] = 1 ; [(RSP_0 -64 80),4] = b32(bot(fun__atoi)) ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = b32(RDI_0) ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002bc5"
 Separations "(bot(fun____error),4) SEP (RSI_0,8); (bot(fun____error),4) SEP (RSP_0,8); (bot(fun____error),4) SEP ([0x100004018,8]_0,8); (bot(fun____error),4) SEP ([0x100004020,8]_0,4); (bot(fun____error),4) SEP (0x100004018,8); (bot(fun____error),4) SEP (0x100004020,8); (bot(fun____error),4) SEP (0x100004180,8); (bot(fun____error),4) SEP (0x100004188,8); (bot(fun____error),4) SEP (0x100004190,8); (bot(fun____error),4) SEP (0x100004198,8); (bot(fun____error),4) SEP (0x1000041a0,1); (bot(fun____error),4) SEP (0x1000041a8,8); (bot(fun____error),4) SEP (0x1000041b0,8); (bot(fun____error),4) SEP (0x1000041b8,8); (bot(fun____error),4) SEP (0x1000041c0,8); (bot(fun____error),4) SEP (0x1000041c8,1); (bot(fun____error),4) SEP (0x1000041d0,8); (bot(fun____error),4) SEP (0x1000041d8,8); (bot(fun____error),4) SEP ((RSI_0 +64 8),8); (bot(fun____error),4) SEP ((RSP_0 -64 8),8); (bot(fun____error),4) SEP ((RSP_0 -64 16),8); (bot(fun____error),4) SEP ((RSP_0 -64 24),8); (bot(fun____error),4) SEP ((RSP_0 -64 32),8); (bot(fun____error),4) SEP ((RSP_0 -64 40),8); (bot(fun____error),4) SEP ((RSP_0 -64 48),8); (bot(fun____error),4) SEP ((RSP_0 -64 52),4); (bot(fun____error),4) SEP ((RSP_0 -64 64),4); (bot(fun____error),4) SEP ((RSP_0 -64 64),8); (bot(fun____error),4) SEP ((RSP_0 -64 72),4); (bot(fun____error),4) SEP ((RSP_0 -64 72),8); (bot(fun____error),4) SEP ((RSP_0 -64 76),4); (bot(fun____error),4) SEP ((RSP_0 -64 80),4); (bot(fun____error),4) SEP ((RSP_0 -64 84),4); (bot(fun____error),4) SEP ((RSP_0 -64 88),4); (bot(fun____error),4) SEP ((RSP_0 -64 92),4); (bot(fun____error),4) SEP ((RSP_0 -64 104),8); (bot(fun____error),4) SEP ((RSP_0 -64 108),4); (bot(fun____error),4) SEP ((RSP_0 -64 116),4); (bot(fun____error),4) SEP ((RSP_0 -64 264),8); (bot(fun____error),4) SEP ((RSP_0 -64 268),4); (bot(fun____error),4) SEP ((RSP_0 -64 280),2); (bot(fun____error),4) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RAX = bot(fun____error) ; RBX = b32(RDI_0) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 76),4] = 1 ; [(RSP_0 -64 80),4] = b32(bot(fun__atoi)) ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = b32(RDI_0) ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002bc5: CMP DWORD PTR [RAX], 34 3"
 Post  "RAX = bot(fun____error) ; RBX = b32(RDI_0) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 76),4] = 1 ; [(RSP_0 -64 80),4] = b32(bot(fun__atoi)) ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = b32(RDI_0) ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002bc8"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun____error) ; RBX = b32(RDI_0) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 76),4] = 1 ; [(RSP_0 -64 80),4] = b32(bot(fun__atoi)) ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = b32(RDI_0) ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002bc8: JNE 4294978309 6"
 Post  "RAX = bot(fun____error) ; RBX = b32(RDI_0) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 76),4] = 1 ; [(RSP_0 -64 80),4] = b32(bot(fun__atoi)) ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = b32(RDI_0) ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002a94, blockId == 19 ##
######################################
*)

htriple "ht_1000035f6"
 Separations "(0x100004018,8) SEP (bot(fun____error),4); (0x100004018,8) SEP (bot(fun__fts_read_INODE64),8); (0x100004018,8) SEP (RSI_0,8); (0x100004018,8) SEP (RSP_0,8); (0x100004018,8) SEP ([0x100004018,8]_0,8); (0x100004018,8) SEP ([0x100004020,8]_0,4); (0x100004018,8) SEP ((bot(fun__fts_read_INODE64) +64 8),8); (0x100004018,8) SEP ((bot(fun__fts_read_INODE64) +64 24),8); (0x100004018,8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x100004018,8) SEP ((bot(fun__fts_read_INODE64) +64 56),4); (0x100004018,8) SEP ((bot(fun__fts_read_INODE64) +64 86),2); (0x100004018,8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x100004018,8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x100004018,8) SEP ((RSI_0 +64 8),8); (0x100004018,8) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); (0x100004018,8) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4); (0x100004018,8) SEP ((RSP_0 -64 8),8); (0x100004018,8) SEP ((RSP_0 -64 16),8); (0x100004018,8) SEP ((RSP_0 -64 24),8); (0x100004018,8) SEP ((RSP_0 -64 32),8); (0x100004018,8) SEP ((RSP_0 -64 40),8); (0x100004018,8) SEP ((RSP_0 -64 48),8); (0x100004018,8) SEP ((RSP_0 -64 52),4); (0x100004018,8) SEP ((RSP_0 -64 64),4); (0x100004018,8) SEP ((RSP_0 -64 64),8); (0x100004018,8) SEP ((RSP_0 -64 72),8); (0x100004018,8) SEP ((RSP_0 -64 76),4); (0x100004018,8) SEP ((RSP_0 -64 80),4); (0x100004018,8) SEP ((RSP_0 -64 84),4); (0x100004018,8) SEP ((RSP_0 -64 88),4); (0x100004018,8) SEP ((RSP_0 -64 92),4); (0x100004018,8) SEP ((RSP_0 -64 104),8); (0x100004018,8) SEP ((RSP_0 -64 108),4); (0x100004018,8) SEP ((RSP_0 -64 264),8); (0x100004018,8) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RAX = bot(fun____error) ; RBX = b32(RDI_0) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 80),4] = b32(bot(fun__atoi)) ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = b32(RDI_0) ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "1000035f6: MOV RAX, QWORD PTR [RIP + 2587] 7"
 Post  "RAX = [0x100004018,8]_0 ; RBX = b32(RDI_0) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 80),4] = b32(bot(fun__atoi)) ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = b32(RDI_0) ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000035fd"
 Separations "([0x100004018,8]_0,8) SEP (bot(fun____error),4); ([0x100004018,8]_0,8) SEP (RSI_0,8); ([0x100004018,8]_0,8) SEP (RSP_0,8); ([0x100004018,8]_0,8) SEP (0x100004018,8); ([0x100004018,8]_0,8) SEP (0x100004020,8); ([0x100004018,8]_0,8) SEP (0x100004180,8); ([0x100004018,8]_0,8) SEP (0x100004188,8); ([0x100004018,8]_0,8) SEP (0x100004190,8); ([0x100004018,8]_0,8) SEP (0x100004198,8); ([0x100004018,8]_0,8) SEP (0x1000041a0,1); ([0x100004018,8]_0,8) SEP (0x1000041a8,8); ([0x100004018,8]_0,8) SEP (0x1000041b0,8); ([0x100004018,8]_0,8) SEP (0x1000041b8,8); ([0x100004018,8]_0,8) SEP (0x1000041c0,8); ([0x100004018,8]_0,8) SEP (0x1000041c8,1); ([0x100004018,8]_0,8) SEP (0x1000041d0,8); ([0x100004018,8]_0,8) SEP (0x1000041d8,8); ([0x100004018,8]_0,8) SEP ((RSI_0 +64 8),8); ([0x100004018,8]_0,8) SEP ((RSP_0 -64 8),8); ([0x100004018,8]_0,8) SEP ((RSP_0 -64 16),8); ([0x100004018,8]_0,8) SEP ((RSP_0 -64 24),8); ([0x100004018,8]_0,8) SEP ((RSP_0 -64 32),8); ([0x100004018,8]_0,8) SEP ((RSP_0 -64 40),8); ([0x100004018,8]_0,8) SEP ((RSP_0 -64 48),8); ([0x100004018,8]_0,8) SEP ((RSP_0 -64 52),4); ([0x100004018,8]_0,8) SEP ((RSP_0 -64 64),4); ([0x100004018,8]_0,8) SEP ((RSP_0 -64 64),8); ([0x100004018,8]_0,8) SEP ((RSP_0 -64 72),8); ([0x100004018,8]_0,8) SEP ((RSP_0 -64 76),4); ([0x100004018,8]_0,8) SEP ((RSP_0 -64 80),4); ([0x100004018,8]_0,8) SEP ((RSP_0 -64 84),4); ([0x100004018,8]_0,8) SEP ((RSP_0 -64 88),4); ([0x100004018,8]_0,8) SEP ((RSP_0 -64 92),4); ([0x100004018,8]_0,8) SEP ((RSP_0 -64 104),8); ([0x100004018,8]_0,8) SEP ((RSP_0 -64 108),4); ([0x100004018,8]_0,8) SEP ((RSP_0 -64 264),8); ([0x100004018,8]_0,8) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RAX = [0x100004018,8]_0 ; RBX = b32(RDI_0) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 80),4] = b32(bot(fun__atoi)) ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = b32(RDI_0) ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "1000035fd: MOV RSI, QWORD PTR [RAX] 3"
 Post  "RAX = [0x100004018,8]_0 ; RBX = b32(RDI_0) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 80),4] = b32(bot(fun__atoi)) ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = b32(RDI_0) ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003600"
 Separations ""
 Assertions  ""
 Pre   "RAX = [0x100004018,8]_0 ; RBX = b32(RDI_0) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 80),4] = b32(bot(fun__atoi)) ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = b32(RDI_0) ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100003600: LEA RDI, [RIP + 1858] 7"
 Post  "RAX = [0x100004018,8]_0 ; RBX = b32(RDI_0) ; RDI = 0x100003d49 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 80),4] = b32(bot(fun__atoi)) ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = b32(RDI_0) ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003607"
 Separations ""
 Assertions  ""
 Pre   "RAX = [0x100004018,8]_0 ; RBX = b32(RDI_0) ; RDI = 0x100003d49 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 80),4] = b32(bot(fun__atoi)) ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = b32(RDI_0) ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100003607: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = b32(RDI_0) ; RDI = 0x100003d49 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 80),4] = b32(bot(fun__atoi)) ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = b32(RDI_0) ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003609"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = b32(RDI_0) ; RDI = 0x100003d49 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 80),4] = b32(bot(fun__atoi)) ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = b32(RDI_0) ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100003609: ExternalCall fun__warnx 5"
 Post  "RAX = bot(fun__warnx) ; RBX = b32(RDI_0) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 80),4] = b32(bot(fun__atoi)) ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = b32(RDI_0) ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 FunctionConstraints "PRESERVES fun__warnx {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004018,8];[0x100004020,8];[0x100004180,8];[0x100004188,8];[0x100004190,8];[0x100004198,8];[0x1000041a0,1];[0x1000041a8,8];[0x1000041b0,8];[0x1000041b8,8];[0x1000041c0,8];[0x1000041c8,1];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 76),4];[(RSP_0 -64 80),4];[(RSP_0 -64 84),4];[(RSP_0 -64 88),4];[(RSP_0 -64 92),4];[(RSP_0 -64 104),8];[(RSP_0 -64 108),4];[(RSP_0 -64 264),8];[(RSP_0 -64 280),16]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000360e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__warnx) ; RBX = b32(RDI_0) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 80),4] = b32(bot(fun__atoi)) ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = b32(RDI_0) ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "10000360e: ExternalCall fun_0x10000379e 5"
 Post  "RAX = bot(fun_0x10000379e) ; RBX = b32(RDI_0) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 80),4] = b32(bot(fun__atoi)) ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = b32(RDI_0) ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 FunctionConstraints "PRESERVES fun_0x10000379e {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004018,8];[0x100004020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 76),4];[(RSP_0 -64 80),4];[(RSP_0 -64 84),4];[(RSP_0 -64 88),4];[(RSP_0 -64 92),4];[(RSP_0 -64 104),8];[(RSP_0 -64 108),4];[(RSP_0 -64 264),8];[(RSP_0 -64 280),16]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002a94, blockId == 20 ##
######################################
*)

htriple "ht_100002bce"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun____error) ; RBX = b32(RDI_0) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 76),4] = 1 ; [(RSP_0 -64 80),4] = b32(bot(fun__atoi)) ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = b32(RDI_0) ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002bce: JMP 4294981110 5"
 Post  "RAX = bot(fun____error) ; RBX = b32(RDI_0) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 76),4] = 1 ; [(RSP_0 -64 80),4] = b32(bot(fun__atoi)) ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 108),4] = b32(RDI_0) ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002a94, blockId == 21 ##
######################################
*)

htriple "ht_100002c67"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(RDI_0) ; RCX = (b32(bot(fun__getopt)) -32 97) ; RDX = 0x1000036b8 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002c67: ExternalCall fun__putenv 5"
 Post  "RAX = bot(fun__putenv) ; RBX = b32(RDI_0) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 FunctionConstraints "PRESERVES fun__putenv {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004018,8];[0x100004020,8];[0x100004180,8];[0x100004188,8];[0x100004190,8];[0x100004198,8];[0x1000041a0,1];[0x1000041a8,8];[0x1000041b0,8];[0x1000041b8,8];[0x1000041c0,8];[0x1000041c8,1];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 76),4];[(RSP_0 -64 80),4];[(RSP_0 -64 84),4];[(RSP_0 -64 88),4];[(RSP_0 -64 92),4];[(RSP_0 -64 104),8];[(RSP_0 -64 108),4];[(RSP_0 -64 264),8];[(RSP_0 -64 280),16]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002c6c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__putenv) ; RBX = b32(RDI_0) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002c6c: JMP 4294978302 5"
 Post  "RAX = bot(fun__putenv) ; RBX = b32(RDI_0) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002a94, blockId == 22 ##
######################################
*)

htriple "ht_100002afe"
 Separations "((RSP_0 -64 52),4) SEP (bot(fun____error),4); ((RSP_0 -64 52),4) SEP (bot(fun__fts_read_INODE64),8); ((RSP_0 -64 52),4) SEP (RSI_0,8); ((RSP_0 -64 52),4) SEP ([0x100004018,8]_0,8); ((RSP_0 -64 52),4) SEP ([0x100004020,8]_0,4); ((RSP_0 -64 52),4) SEP (0x100004018,8); ((RSP_0 -64 52),4) SEP (0x100004020,8); ((RSP_0 -64 52),4) SEP (0x100004180,8); ((RSP_0 -64 52),4) SEP (0x100004188,8); ((RSP_0 -64 52),4) SEP (0x100004190,8); ((RSP_0 -64 52),4) SEP (0x100004198,8); ((RSP_0 -64 52),4) SEP (0x1000041a0,1); ((RSP_0 -64 52),4) SEP (0x1000041a8,8); ((RSP_0 -64 52),4) SEP (0x1000041b0,8); ((RSP_0 -64 52),4) SEP (0x1000041b8,8); ((RSP_0 -64 52),4) SEP (0x1000041c0,8); ((RSP_0 -64 52),4) SEP (0x1000041c8,1); ((RSP_0 -64 52),4) SEP (0x1000041d0,8); ((RSP_0 -64 52),4) SEP (0x1000041d8,8); ((RSP_0 -64 52),4) SEP ((bot(fun__fts_read_INODE64) +64 8),8); ((RSP_0 -64 52),4) SEP ((bot(fun__fts_read_INODE64) +64 24),8); ((RSP_0 -64 52),4) SEP ((bot(fun__fts_read_INODE64) +64 48),8); ((RSP_0 -64 52),4) SEP ((bot(fun__fts_read_INODE64) +64 56),4); ((RSP_0 -64 52),4) SEP ((bot(fun__fts_read_INODE64) +64 86),2); ((RSP_0 -64 52),4) SEP ((bot(fun__fts_read_INODE64) +64 88),4); ((RSP_0 -64 52),4) SEP ((bot(fun__fts_read_INODE64) +64 96),8); ((RSP_0 -64 52),4) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 52),4) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); ((RSP_0 -64 52),4) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4)"
 Assertions  ""
 Pre   "RBX = b32(RDI_0) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002afe: MOV DWORD PTR [RBP - 44], 0 7"
 Post  "RBX = b32(RDI_0) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002a94, blockId == 23 ##
######################################
*)

htriple "ht_100002c7a"
 Separations "((RSP_0 -64 72),4) SEP (bot(fun____error),4); ((RSP_0 -64 72),4) SEP (RSI_0,8); ((RSP_0 -64 72),4) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 72),8) SEP (bot(fun____error),4); ((RSP_0 -64 72),8) SEP (bot(fun__fts_read_INODE64),8); ((RSP_0 -64 72),8) SEP (RSI_0,8); ((RSP_0 -64 72),8) SEP ([0x100004018,8]_0,8); ((RSP_0 -64 72),8) SEP ([0x100004020,8]_0,4); ((RSP_0 -64 72),8) SEP (0x100004018,8); ((RSP_0 -64 72),8) SEP (0x100004020,8); ((RSP_0 -64 72),8) SEP (0x100004180,8); ((RSP_0 -64 72),8) SEP (0x100004188,8); ((RSP_0 -64 72),8) SEP (0x100004190,8); ((RSP_0 -64 72),8) SEP (0x100004198,8); ((RSP_0 -64 72),8) SEP (0x1000041a0,1); ((RSP_0 -64 72),8) SEP (0x1000041a8,8); ((RSP_0 -64 72),8) SEP (0x1000041b0,8); ((RSP_0 -64 72),8) SEP (0x1000041b8,8); ((RSP_0 -64 72),8) SEP (0x1000041c0,8); ((RSP_0 -64 72),8) SEP (0x1000041c8,1); ((RSP_0 -64 72),8) SEP (0x1000041d0,8); ((RSP_0 -64 72),8) SEP (0x1000041d8,8); ((RSP_0 -64 72),8) SEP ((bot(fun__fts_read_INODE64) +64 8),8); ((RSP_0 -64 72),8) SEP ((bot(fun__fts_read_INODE64) +64 24),8); ((RSP_0 -64 72),8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); ((RSP_0 -64 72),8) SEP ((bot(fun__fts_read_INODE64) +64 56),4); ((RSP_0 -64 72),8) SEP ((bot(fun__fts_read_INODE64) +64 86),2); ((RSP_0 -64 72),8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); ((RSP_0 -64 72),8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); ((RSP_0 -64 72),8) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 72),8) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); ((RSP_0 -64 72),8) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun__getopt) ; RBX = b32(RDI_0) ; RCX = (b32(bot(fun__getopt)) -32 72) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002c7a: MOV RDX, QWORD PTR [RBP - 64] 4"
 Post  "RAX = bot(fun__getopt) ; RBX = b32(RDI_0) ; RCX = (b32(bot(fun__getopt)) -32 72) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002c7e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__getopt) ; RBX = b32(RDI_0) ; RCX = (b32(bot(fun__getopt)) -32 72) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002c7e: LEA ECX, [RDX + R13] 4"
 Post  "RAX = bot(fun__getopt) ; RBX = b32(RDI_0) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002c82"
 Separations "((RSP_0 -64 64),4) SEP (bot(fun____error),4); ((RSP_0 -64 64),4) SEP (bot(fun__fts_read_INODE64),8); ((RSP_0 -64 64),4) SEP (RSI_0,8); ((RSP_0 -64 64),4) SEP ([0x100004018,8]_0,8); ((RSP_0 -64 64),4) SEP ([0x100004020,8]_0,4); ((RSP_0 -64 64),4) SEP (0x100004018,8); ((RSP_0 -64 64),4) SEP (0x100004020,8); ((RSP_0 -64 64),4) SEP (0x100004180,8); ((RSP_0 -64 64),4) SEP (0x100004188,8); ((RSP_0 -64 64),4) SEP (0x100004190,8); ((RSP_0 -64 64),4) SEP (0x100004198,8); ((RSP_0 -64 64),4) SEP (0x1000041a0,1); ((RSP_0 -64 64),4) SEP (0x1000041a8,8); ((RSP_0 -64 64),4) SEP (0x1000041b0,8); ((RSP_0 -64 64),4) SEP (0x1000041b8,8); ((RSP_0 -64 64),4) SEP (0x1000041c0,8); ((RSP_0 -64 64),4) SEP (0x1000041c8,1); ((RSP_0 -64 64),4) SEP (0x1000041d0,8); ((RSP_0 -64 64),4) SEP (0x1000041d8,8); ((RSP_0 -64 64),4) SEP ((bot(fun__fts_read_INODE64) +64 8),8); ((RSP_0 -64 64),4) SEP ((bot(fun__fts_read_INODE64) +64 24),8); ((RSP_0 -64 64),4) SEP ((bot(fun__fts_read_INODE64) +64 48),8); ((RSP_0 -64 64),4) SEP ((bot(fun__fts_read_INODE64) +64 56),4); ((RSP_0 -64 64),4) SEP ((bot(fun__fts_read_INODE64) +64 86),2); ((RSP_0 -64 64),4) SEP ((bot(fun__fts_read_INODE64) +64 88),4); ((RSP_0 -64 64),4) SEP ((bot(fun__fts_read_INODE64) +64 96),8); ((RSP_0 -64 64),4) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 64),4) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); ((RSP_0 -64 64),4) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4); ((RSP_0 -64 64),8) SEP (bot(fun____error),4); ((RSP_0 -64 64),8) SEP (RSI_0,8); ((RSP_0 -64 64),8) SEP ((bot(fun__fts_read_INODE64) +64 24),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 8),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__getopt) ; RBX = b32(RDI_0) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002c82: MOV ESI, DWORD PTR [RBP - 56] 3"
 Post  "RAX = bot(fun__getopt) ; RBX = b32(RDI_0) ; RSI = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002c85"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__getopt) ; RBX = b32(RDI_0) ; RSI = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002c85: ADD ECX, ESI 2"
 Post  "RAX = bot(fun__getopt) ; RBX = b32(RDI_0) ; RSI = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002c87"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__getopt) ; RBX = b32(RDI_0) ; RSI = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002c87: CMP ECX, 2 3"
 Post  "RAX = bot(fun__getopt) ; RBX = b32(RDI_0) ; RSI = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002c8a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__getopt) ; RBX = b32(RDI_0) ; RSI = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002c8a: JAE 4294981105 6"
 Post  "RAX = bot(fun__getopt) ; RBX = b32(RDI_0) ; RSI = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002a94, blockId == 24 ##
######################################
*)

htriple "ht_100002c90"
 Separations "(0x100004020,8) SEP (bot(fun____error),4); (0x100004020,8) SEP (bot(fun__fts_read_INODE64),8); (0x100004020,8) SEP (RSI_0,8); (0x100004020,8) SEP (RSP_0,8); (0x100004020,8) SEP ([0x100004018,8]_0,8); (0x100004020,8) SEP ([0x100004020,8]_0,4); (0x100004020,8) SEP ((bot(fun__fts_read_INODE64) +64 8),8); (0x100004020,8) SEP ((bot(fun__fts_read_INODE64) +64 24),8); (0x100004020,8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x100004020,8) SEP ((bot(fun__fts_read_INODE64) +64 56),4); (0x100004020,8) SEP ((bot(fun__fts_read_INODE64) +64 86),2); (0x100004020,8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x100004020,8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x100004020,8) SEP ((RSI_0 +64 8),8); (0x100004020,8) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); (0x100004020,8) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4); (0x100004020,8) SEP ((RSP_0 -64 8),8); (0x100004020,8) SEP ((RSP_0 -64 16),8); (0x100004020,8) SEP ((RSP_0 -64 24),8); (0x100004020,8) SEP ((RSP_0 -64 32),8); (0x100004020,8) SEP ((RSP_0 -64 40),8); (0x100004020,8) SEP ((RSP_0 -64 48),8); (0x100004020,8) SEP ((RSP_0 -64 52),4); (0x100004020,8) SEP ((RSP_0 -64 64),4); (0x100004020,8) SEP ((RSP_0 -64 64),8); (0x100004020,8) SEP ((RSP_0 -64 72),8); (0x100004020,8) SEP ((RSP_0 -64 76),4); (0x100004020,8) SEP ((RSP_0 -64 80),4); (0x100004020,8) SEP ((RSP_0 -64 84),4); (0x100004020,8) SEP ((RSP_0 -64 88),4); (0x100004020,8) SEP ((RSP_0 -64 92),4); (0x100004020,8) SEP ((RSP_0 -64 104),8); (0x100004020,8) SEP ((RSP_0 -64 108),4); (0x100004020,8) SEP ((RSP_0 -64 264),8); (0x100004020,8) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RAX = bot(fun__getopt) ; RBX = b32(RDI_0) ; RSI = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002c90: MOV RAX, QWORD PTR [RIP + 5001] 7"
 Post  "RAX = [0x100004020,8]_0 ; RBX = b32(RDI_0) ; RSI = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002c97"
 Separations "([0x100004020,8]_0,4) SEP (bot(fun____error),4); ([0x100004020,8]_0,4) SEP (RSI_0,8); ([0x100004020,8]_0,4) SEP (RSP_0,8); ([0x100004020,8]_0,4) SEP (0x100004018,8); ([0x100004020,8]_0,4) SEP (0x100004020,8); ([0x100004020,8]_0,4) SEP (0x100004180,8); ([0x100004020,8]_0,4) SEP (0x100004188,8); ([0x100004020,8]_0,4) SEP (0x100004190,8); ([0x100004020,8]_0,4) SEP (0x100004198,8); ([0x100004020,8]_0,4) SEP (0x1000041a0,1); ([0x100004020,8]_0,4) SEP (0x1000041a8,8); ([0x100004020,8]_0,4) SEP (0x1000041b0,8); ([0x100004020,8]_0,4) SEP (0x1000041b8,8); ([0x100004020,8]_0,4) SEP (0x1000041c0,8); ([0x100004020,8]_0,4) SEP (0x1000041c8,1); ([0x100004020,8]_0,4) SEP (0x1000041d0,8); ([0x100004020,8]_0,4) SEP (0x1000041d8,8); ([0x100004020,8]_0,4) SEP ((RSI_0 +64 8),8); ([0x100004020,8]_0,4) SEP ((RSP_0 -64 8),8); ([0x100004020,8]_0,4) SEP ((RSP_0 -64 16),8); ([0x100004020,8]_0,4) SEP ((RSP_0 -64 24),8); ([0x100004020,8]_0,4) SEP ((RSP_0 -64 32),8); ([0x100004020,8]_0,4) SEP ((RSP_0 -64 40),8); ([0x100004020,8]_0,4) SEP ((RSP_0 -64 48),8); ([0x100004020,8]_0,4) SEP ((RSP_0 -64 52),4); ([0x100004020,8]_0,4) SEP ((RSP_0 -64 64),4); ([0x100004020,8]_0,4) SEP ((RSP_0 -64 64),8); ([0x100004020,8]_0,4) SEP ((RSP_0 -64 72),8); ([0x100004020,8]_0,4) SEP ((RSP_0 -64 76),4); ([0x100004020,8]_0,4) SEP ((RSP_0 -64 80),4); ([0x100004020,8]_0,4) SEP ((RSP_0 -64 84),4); ([0x100004020,8]_0,4) SEP ((RSP_0 -64 88),4); ([0x100004020,8]_0,4) SEP ((RSP_0 -64 92),4); ([0x100004020,8]_0,4) SEP ((RSP_0 -64 104),8); ([0x100004020,8]_0,4) SEP ((RSP_0 -64 108),4); ([0x100004020,8]_0,4) SEP ((RSP_0 -64 264),8); ([0x100004020,8]_0,4) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RAX = [0x100004020,8]_0 ; RBX = b32(RDI_0) ; RSI = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002c97: MOVSXD RAX, DWORD PTR [RAX] 3"
 Post  "RBX = b32(RDI_0) ; RSI = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002c9a"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(RDI_0) ; RSI = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R12 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002c9a: OR R12D, R13D 3"
 Post  "RBX = b32(RDI_0) ; RSI = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002c9d"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(RDI_0) ; RSI = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002c9d: MOV EBX, R12D 3"
 Post  "RSI = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002ca0"
 Separations ""
 Assertions  ""
 Pre   "RSI = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002ca0: OR EBX, 2 3"
 Post  "RSI = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002ca3"
 Separations ""
 Assertions  ""
 Pre   "RSI = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002ca3: TEST EDX, EDX 2"
 Post  "RSI = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002ca5"
 Separations ""
 Assertions  ""
 Pre   "RSI = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002ca5: CMOVE EBX, R12D 4"
 Post  "RSI = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002ca9"
 Separations ""
 Assertions  ""
 Pre   "RSI = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002ca9: MOV EDX, EBX 2"
 Post  "RSI = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002cab"
 Separations ""
 Assertions  ""
 Pre   "RSI = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002cab: OR EDX, 16 3"
 Post  "RSI = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002cae"
 Separations ""
 Assertions  ""
 Pre   "RSI = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002cae: TEST ECX, ECX 2"
 Post  "RSI = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002cb0"
 Separations ""
 Assertions  ""
 Pre   "RSI = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002cb0: CMOVE EBX, EDX 3"
 Post  "RSI = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002cb3"
 Separations ""
 Assertions  ""
 Pre   "RSI = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002cb3: TEST ESI, ESI 2"
 Post  "RSI = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002cb5"
 Separations ""
 Assertions  ""
 Pre   "RSI = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002cb5: CMOVNE EBX, EDX 3"
 Post  "RSI = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002cb8"
 Separations "((RSP_0 -64 88),4) SEP (bot(fun____error),4); ((RSP_0 -64 88),4) SEP (bot(fun__fts_read_INODE64),8); ((RSP_0 -64 88),4) SEP (RSI_0,8); ((RSP_0 -64 88),4) SEP ([0x100004018,8]_0,8); ((RSP_0 -64 88),4) SEP ([0x100004020,8]_0,4); ((RSP_0 -64 88),4) SEP (0x100004018,8); ((RSP_0 -64 88),4) SEP (0x100004020,8); ((RSP_0 -64 88),4) SEP (0x100004180,8); ((RSP_0 -64 88),4) SEP (0x100004188,8); ((RSP_0 -64 88),4) SEP (0x100004190,8); ((RSP_0 -64 88),4) SEP (0x100004198,8); ((RSP_0 -64 88),4) SEP (0x1000041a0,1); ((RSP_0 -64 88),4) SEP (0x1000041a8,8); ((RSP_0 -64 88),4) SEP (0x1000041b0,8); ((RSP_0 -64 88),4) SEP (0x1000041b8,8); ((RSP_0 -64 88),4) SEP (0x1000041c0,8); ((RSP_0 -64 88),4) SEP (0x1000041c8,1); ((RSP_0 -64 88),4) SEP (0x1000041d0,8); ((RSP_0 -64 88),4) SEP (0x1000041d8,8); ((RSP_0 -64 88),4) SEP ((bot(fun__fts_read_INODE64) +64 8),8); ((RSP_0 -64 88),4) SEP ((bot(fun__fts_read_INODE64) +64 24),8); ((RSP_0 -64 88),4) SEP ((bot(fun__fts_read_INODE64) +64 48),8); ((RSP_0 -64 88),4) SEP ((bot(fun__fts_read_INODE64) +64 56),4); ((RSP_0 -64 88),4) SEP ((bot(fun__fts_read_INODE64) +64 86),2); ((RSP_0 -64 88),4) SEP ((bot(fun__fts_read_INODE64) +64 88),4); ((RSP_0 -64 88),4) SEP ((bot(fun__fts_read_INODE64) +64 96),8); ((RSP_0 -64 88),4) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 88),4) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); ((RSP_0 -64 88),4) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4)"
 Assertions  ""
 Pre   "RSI = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002cb8: CMP DWORD PTR [RBP - 80], 0 4"
 Post  "RSI = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002cbc"
 Separations ""
 Assertions  ""
 Pre   "RSI = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002cbc: JE 4294978769 2"
 Post  "RSI = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002a94, blockId == 25 ##
######################################
*)

htriple "ht_100002cbe"
 Separations "((RSP_0 -64 76),4) SEP (bot(fun____error),4); ((RSP_0 -64 76),4) SEP (bot(fun__fts_read_INODE64),8); ((RSP_0 -64 76),4) SEP (RSI_0,8); ((RSP_0 -64 76),4) SEP ([0x100004018,8]_0,8); ((RSP_0 -64 76),4) SEP ([0x100004020,8]_0,4); ((RSP_0 -64 76),4) SEP (0x100004018,8); ((RSP_0 -64 76),4) SEP (0x100004020,8); ((RSP_0 -64 76),4) SEP (0x100004180,8); ((RSP_0 -64 76),4) SEP (0x100004188,8); ((RSP_0 -64 76),4) SEP (0x100004190,8); ((RSP_0 -64 76),4) SEP (0x100004198,8); ((RSP_0 -64 76),4) SEP (0x1000041a0,1); ((RSP_0 -64 76),4) SEP (0x1000041a8,8); ((RSP_0 -64 76),4) SEP (0x1000041b0,8); ((RSP_0 -64 76),4) SEP (0x1000041b8,8); ((RSP_0 -64 76),4) SEP (0x1000041c0,8); ((RSP_0 -64 76),4) SEP (0x1000041c8,1); ((RSP_0 -64 76),4) SEP (0x1000041d0,8); ((RSP_0 -64 76),4) SEP (0x1000041d8,8); ((RSP_0 -64 76),4) SEP ((bot(fun__fts_read_INODE64) +64 8),8); ((RSP_0 -64 76),4) SEP ((bot(fun__fts_read_INODE64) +64 24),8); ((RSP_0 -64 76),4) SEP ((bot(fun__fts_read_INODE64) +64 48),8); ((RSP_0 -64 76),4) SEP ((bot(fun__fts_read_INODE64) +64 56),4); ((RSP_0 -64 76),4) SEP ((bot(fun__fts_read_INODE64) +64 86),2); ((RSP_0 -64 76),4) SEP ((bot(fun__fts_read_INODE64) +64 88),4); ((RSP_0 -64 76),4) SEP ((bot(fun__fts_read_INODE64) +64 96),8); ((RSP_0 -64 76),4) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 76),4) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); ((RSP_0 -64 76),4) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4)"
 Assertions  ""
 Pre   "RSI = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002cbe: OR DWORD PTR [RBP - 68], R15D 4"
 Post  "RSI = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002cc2"
 Separations ""
 Assertions  ""
 Pre   "RSI = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002cc2: JNE 4294981105 6"
 Post  "RSI = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002a94, blockId == 26 ##
######################################
*)

htriple "ht_100002cd1"
 Separations ""
 Assertions  ""
 Pre   "RSI = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002cd1: MOV CL, 1 2"
 Post  "RSI = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002cd3"
 Separations "((RSP_0 -64 72),4) SEP (bot(fun____error),4); ((RSP_0 -64 72),4) SEP (bot(fun__fts_read_INODE64),8); ((RSP_0 -64 72),4) SEP (RSI_0,8); ((RSP_0 -64 72),4) SEP ([0x100004018,8]_0,8); ((RSP_0 -64 72),4) SEP ([0x100004020,8]_0,4); ((RSP_0 -64 72),4) SEP (0x100004018,8); ((RSP_0 -64 72),4) SEP (0x100004020,8); ((RSP_0 -64 72),4) SEP (0x100004180,8); ((RSP_0 -64 72),4) SEP (0x100004188,8); ((RSP_0 -64 72),4) SEP (0x100004190,8); ((RSP_0 -64 72),4) SEP (0x100004198,8); ((RSP_0 -64 72),4) SEP (0x1000041a0,1); ((RSP_0 -64 72),4) SEP (0x1000041a8,8); ((RSP_0 -64 72),4) SEP (0x1000041b0,8); ((RSP_0 -64 72),4) SEP (0x1000041b8,8); ((RSP_0 -64 72),4) SEP (0x1000041c0,8); ((RSP_0 -64 72),4) SEP (0x1000041c8,1); ((RSP_0 -64 72),4) SEP (0x1000041d0,8); ((RSP_0 -64 72),4) SEP (0x1000041d8,8); ((RSP_0 -64 72),4) SEP ((bot(fun__fts_read_INODE64) +64 8),8); ((RSP_0 -64 72),4) SEP ((bot(fun__fts_read_INODE64) +64 24),8); ((RSP_0 -64 72),4) SEP ((bot(fun__fts_read_INODE64) +64 48),8); ((RSP_0 -64 72),4) SEP ((bot(fun__fts_read_INODE64) +64 56),4); ((RSP_0 -64 72),4) SEP ((bot(fun__fts_read_INODE64) +64 86),2); ((RSP_0 -64 72),4) SEP ((bot(fun__fts_read_INODE64) +64 88),4); ((RSP_0 -64 72),4) SEP ((bot(fun__fts_read_INODE64) +64 96),8); ((RSP_0 -64 72),4) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 72),4) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); ((RSP_0 -64 72),4) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4); ((RSP_0 -64 72),8) SEP (bot(fun____error),4); ((RSP_0 -64 72),8) SEP (RSI_0,8); ((RSP_0 -64 72),8) SEP ((RSI_0 +64 8),8)"
 Assertions  ""
 Pre   "RSI = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002cd3: MOV DWORD PTR [RBP - 64], ECX 3"
 Post  "RSI = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002cd6"
 Separations ""
 Assertions  ""
 Pre   "RSI = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002cd6: TEST R15D, R15D 3"
 Post  "RSI = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002cd9"
 Separations ""
 Assertions  ""
 Pre   "RSI = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002cd9: JE 4294978796 2"
 Post  "RSI = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002a94, blockId == 27 ##
######################################
*)

htriple "ht_100002cc8"
 Separations "((RSP_0 -64 72),4) SEP (bot(fun____error),4); ((RSP_0 -64 72),4) SEP (bot(fun__fts_read_INODE64),8); ((RSP_0 -64 72),4) SEP (RSI_0,8); ((RSP_0 -64 72),4) SEP ([0x100004018,8]_0,8); ((RSP_0 -64 72),4) SEP ([0x100004020,8]_0,4); ((RSP_0 -64 72),4) SEP (0x100004018,8); ((RSP_0 -64 72),4) SEP (0x100004020,8); ((RSP_0 -64 72),4) SEP (0x100004180,8); ((RSP_0 -64 72),4) SEP (0x100004188,8); ((RSP_0 -64 72),4) SEP (0x100004190,8); ((RSP_0 -64 72),4) SEP (0x100004198,8); ((RSP_0 -64 72),4) SEP (0x1000041a0,1); ((RSP_0 -64 72),4) SEP (0x1000041a8,8); ((RSP_0 -64 72),4) SEP (0x1000041b0,8); ((RSP_0 -64 72),4) SEP (0x1000041b8,8); ((RSP_0 -64 72),4) SEP (0x1000041c0,8); ((RSP_0 -64 72),4) SEP (0x1000041c8,1); ((RSP_0 -64 72),4) SEP (0x1000041d0,8); ((RSP_0 -64 72),4) SEP (0x1000041d8,8); ((RSP_0 -64 72),4) SEP ((bot(fun__fts_read_INODE64) +64 8),8); ((RSP_0 -64 72),4) SEP ((bot(fun__fts_read_INODE64) +64 24),8); ((RSP_0 -64 72),4) SEP ((bot(fun__fts_read_INODE64) +64 48),8); ((RSP_0 -64 72),4) SEP ((bot(fun__fts_read_INODE64) +64 56),4); ((RSP_0 -64 72),4) SEP ((bot(fun__fts_read_INODE64) +64 86),2); ((RSP_0 -64 72),4) SEP ((bot(fun__fts_read_INODE64) +64 88),4); ((RSP_0 -64 72),4) SEP ((bot(fun__fts_read_INODE64) +64 96),8); ((RSP_0 -64 72),4) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 72),4) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); ((RSP_0 -64 72),4) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4); ((RSP_0 -64 72),8) SEP (bot(fun____error),4); ((RSP_0 -64 72),8) SEP (RSI_0,8); ((RSP_0 -64 72),8) SEP ((RSI_0 +64 8),8)"
 Assertions  ""
 Pre   "RSI = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002cc8: MOV DWORD PTR [RBP - 64], 0 7"
 Post  "RSI = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002ccf"
 Separations ""
 Assertions  ""
 Pre   "RSI = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002ccf: JMP 4294978796 2"
 Post  "RSI = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002a94, blockId == 28 ##
######################################
*)

htriple "ht_100002cdb"
 Separations "((RSP_0 -64 80),4) SEP (bot(fun____error),4); ((RSP_0 -64 80),4) SEP (bot(fun__fts_read_INODE64),8); ((RSP_0 -64 80),4) SEP (RSI_0,8); ((RSP_0 -64 80),4) SEP ([0x100004018,8]_0,8); ((RSP_0 -64 80),4) SEP ([0x100004020,8]_0,4); ((RSP_0 -64 80),4) SEP (0x100004018,8); ((RSP_0 -64 80),4) SEP (0x100004020,8); ((RSP_0 -64 80),4) SEP (0x100004180,8); ((RSP_0 -64 80),4) SEP (0x100004188,8); ((RSP_0 -64 80),4) SEP (0x100004190,8); ((RSP_0 -64 80),4) SEP (0x100004198,8); ((RSP_0 -64 80),4) SEP (0x1000041a0,1); ((RSP_0 -64 80),4) SEP (0x1000041a8,8); ((RSP_0 -64 80),4) SEP (0x1000041b0,8); ((RSP_0 -64 80),4) SEP (0x1000041b8,8); ((RSP_0 -64 80),4) SEP (0x1000041c0,8); ((RSP_0 -64 80),4) SEP (0x1000041c8,1); ((RSP_0 -64 80),4) SEP (0x1000041d0,8); ((RSP_0 -64 80),4) SEP (0x1000041d8,8); ((RSP_0 -64 80),4) SEP ((bot(fun__fts_read_INODE64) +64 8),8); ((RSP_0 -64 80),4) SEP ((bot(fun__fts_read_INODE64) +64 24),8); ((RSP_0 -64 80),4) SEP ((bot(fun__fts_read_INODE64) +64 48),8); ((RSP_0 -64 80),4) SEP ((bot(fun__fts_read_INODE64) +64 56),4); ((RSP_0 -64 80),4) SEP ((bot(fun__fts_read_INODE64) +64 86),2); ((RSP_0 -64 80),4) SEP ((bot(fun__fts_read_INODE64) +64 88),4); ((RSP_0 -64 80),4) SEP ((bot(fun__fts_read_INODE64) +64 96),8); ((RSP_0 -64 80),4) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 80),4) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); ((RSP_0 -64 80),4) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4)"
 Assertions  ""
 Pre   "RSI = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002cdb: MOV DWORD PTR [RBP - 72], 0 7"
 Post  "RSI = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 80),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002ce2"
 Separations "((RSP_0 -64 76),4) SEP (bot(fun____error),4); ((RSP_0 -64 76),4) SEP (bot(fun__fts_read_INODE64),8); ((RSP_0 -64 76),4) SEP (RSI_0,8); ((RSP_0 -64 76),4) SEP ([0x100004018,8]_0,8); ((RSP_0 -64 76),4) SEP ([0x100004020,8]_0,4); ((RSP_0 -64 76),4) SEP (0x100004018,8); ((RSP_0 -64 76),4) SEP (0x100004020,8); ((RSP_0 -64 76),4) SEP (0x100004180,8); ((RSP_0 -64 76),4) SEP (0x100004188,8); ((RSP_0 -64 76),4) SEP (0x100004190,8); ((RSP_0 -64 76),4) SEP (0x100004198,8); ((RSP_0 -64 76),4) SEP (0x1000041a0,1); ((RSP_0 -64 76),4) SEP (0x1000041a8,8); ((RSP_0 -64 76),4) SEP (0x1000041b0,8); ((RSP_0 -64 76),4) SEP (0x1000041b8,8); ((RSP_0 -64 76),4) SEP (0x1000041c0,8); ((RSP_0 -64 76),4) SEP (0x1000041c8,1); ((RSP_0 -64 76),4) SEP (0x1000041d0,8); ((RSP_0 -64 76),4) SEP (0x1000041d8,8); ((RSP_0 -64 76),4) SEP ((bot(fun__fts_read_INODE64) +64 8),8); ((RSP_0 -64 76),4) SEP ((bot(fun__fts_read_INODE64) +64 24),8); ((RSP_0 -64 76),4) SEP ((bot(fun__fts_read_INODE64) +64 48),8); ((RSP_0 -64 76),4) SEP ((bot(fun__fts_read_INODE64) +64 56),4); ((RSP_0 -64 76),4) SEP ((bot(fun__fts_read_INODE64) +64 86),2); ((RSP_0 -64 76),4) SEP ((bot(fun__fts_read_INODE64) +64 88),4); ((RSP_0 -64 76),4) SEP ((bot(fun__fts_read_INODE64) +64 96),8); ((RSP_0 -64 76),4) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 76),4) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); ((RSP_0 -64 76),4) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4)"
 Assertions  ""
 Pre   "RSI = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 80),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002ce2: CMP DWORD PTR [RBP - 68], 0 4"
 Post  "RSI = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 80),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002ce6"
 Separations ""
 Assertions  ""
 Pre   "RSI = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 80),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002ce6: JNE 4294981105 6"
 Post  "RSI = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 80),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002a94, blockId == 29 ##
######################################
*)

htriple "ht_100002cec"
 Separations ""
 Assertions  ""
 Pre   "RSI = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002cec: LEA R15, [R14 + RAX * 8] 4"
 Post  "RSI = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002cf0"
 Separations ""
 Assertions  ""
 Pre   "RSI = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002cf0: CMP QWORD PTR [R15], 0 4"
 Post  "RSI = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002cf4"
 Separations ""
 Assertions  ""
 Pre   "RSI = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002cf4: JNE 4294978827 2"
 Post  "RSI = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002a94, blockId == 30 ##
######################################
*)

htriple "ht_100002cf6"
 Separations ""
 Assertions  ""
 Pre   "RSI = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002cf6: LEA RAX, [RIP + 5243] 7"
 Post  "RAX = 0x100004178 ; RSI = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002cfd"
 Separations "(RSI_0,8) SEP (bot(fun____error),4); (RSI_0,8) SEP (bot(fun__fts_read_INODE64),8); (RSI_0,8) SEP (RSP_0,8); (RSI_0,8) SEP ([0x100004018,8]_0,8); (RSI_0,8) SEP ([0x100004020,8]_0,4); (RSI_0,8) SEP (0x100004018,8); (RSI_0,8) SEP (0x100004020,8); (RSI_0,8) SEP (0x100004180,8); (RSI_0,8) SEP (0x100004188,8); (RSI_0,8) SEP (0x100004190,8); (RSI_0,8) SEP (0x100004198,8); (RSI_0,8) SEP (0x1000041a0,1); (RSI_0,8) SEP (0x1000041a8,8); (RSI_0,8) SEP (0x1000041b0,8); (RSI_0,8) SEP (0x1000041b8,8); (RSI_0,8) SEP (0x1000041c0,8); (RSI_0,8) SEP (0x1000041c8,1); (RSI_0,8) SEP (0x1000041d0,8); (RSI_0,8) SEP (0x1000041d8,8); (RSI_0,8) SEP ((bot(fun__fts_read_INODE64) +64 8),8); (RSI_0,8) SEP ((bot(fun__fts_read_INODE64) +64 24),8); (RSI_0,8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (RSI_0,8) SEP ((bot(fun__fts_read_INODE64) +64 56),4); (RSI_0,8) SEP ((bot(fun__fts_read_INODE64) +64 86),2); (RSI_0,8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (RSI_0,8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (RSI_0,8) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); (RSI_0,8) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4); (RSI_0,8) SEP ((RSP_0 -64 8),8); (RSI_0,8) SEP ((RSP_0 -64 16),8); (RSI_0,8) SEP ((RSP_0 -64 24),8); (RSI_0,8) SEP ((RSP_0 -64 32),8); (RSI_0,8) SEP ((RSP_0 -64 40),8); (RSI_0,8) SEP ((RSP_0 -64 48),8); (RSI_0,8) SEP ((RSP_0 -64 52),4); (RSI_0,8) SEP ((RSP_0 -64 64),4); (RSI_0,8) SEP ((RSP_0 -64 64),8); (RSI_0,8) SEP ((RSP_0 -64 72),4); (RSI_0,8) SEP ((RSP_0 -64 72),8); (RSI_0,8) SEP ((RSP_0 -64 76),4); (RSI_0,8) SEP ((RSP_0 -64 80),4); (RSI_0,8) SEP ((RSP_0 -64 84),4); (RSI_0,8) SEP ((RSP_0 -64 88),4); (RSI_0,8) SEP ((RSP_0 -64 92),4); (RSI_0,8) SEP ((RSP_0 -64 104),8); (RSI_0,8) SEP ((RSP_0 -64 108),4); (RSI_0,8) SEP ((RSP_0 -64 116),4); (RSI_0,8) SEP ((RSP_0 -64 264),8); (RSI_0,8) SEP ((RSP_0 -64 268),4); (RSI_0,8) SEP ((RSP_0 -64 280),2); (RSI_0,8) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RAX = 0x100004178 ; RSI = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002cfd: MOV QWORD PTR [R14], RAX 3"
 Post  "RAX = 0x100004178 ; RSI = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSI_0,8] = 0x100004178 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002d00"
 Separations "((RSI_0 +64 8),8) SEP (bot(fun____error),4); ((RSI_0 +64 8),8) SEP (bot(fun__fts_read_INODE64),8); ((RSI_0 +64 8),8) SEP (RSP_0,8); ((RSI_0 +64 8),8) SEP ([0x100004018,8]_0,8); ((RSI_0 +64 8),8) SEP ([0x100004020,8]_0,4); ((RSI_0 +64 8),8) SEP (0x100004018,8); ((RSI_0 +64 8),8) SEP (0x100004020,8); ((RSI_0 +64 8),8) SEP (0x100004180,8); ((RSI_0 +64 8),8) SEP (0x100004188,8); ((RSI_0 +64 8),8) SEP (0x100004190,8); ((RSI_0 +64 8),8) SEP (0x100004198,8); ((RSI_0 +64 8),8) SEP (0x1000041a0,1); ((RSI_0 +64 8),8) SEP (0x1000041a8,8); ((RSI_0 +64 8),8) SEP (0x1000041b0,8); ((RSI_0 +64 8),8) SEP (0x1000041b8,8); ((RSI_0 +64 8),8) SEP (0x1000041c0,8); ((RSI_0 +64 8),8) SEP (0x1000041c8,1); ((RSI_0 +64 8),8) SEP (0x1000041d0,8); ((RSI_0 +64 8),8) SEP (0x1000041d8,8); ((RSI_0 +64 8),8) SEP ((bot(fun__fts_read_INODE64) +64 8),8); ((RSI_0 +64 8),8) SEP ((bot(fun__fts_read_INODE64) +64 24),8); ((RSI_0 +64 8),8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); ((RSI_0 +64 8),8) SEP ((bot(fun__fts_read_INODE64) +64 56),4); ((RSI_0 +64 8),8) SEP ((bot(fun__fts_read_INODE64) +64 86),2); ((RSI_0 +64 8),8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); ((RSI_0 +64 8),8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); ((RSI_0 +64 8),8) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); ((RSI_0 +64 8),8) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4); ((RSI_0 +64 8),8) SEP ((RSP_0 -64 8),8); ((RSI_0 +64 8),8) SEP ((RSP_0 -64 16),8); ((RSI_0 +64 8),8) SEP ((RSP_0 -64 24),8); ((RSI_0 +64 8),8) SEP ((RSP_0 -64 32),8); ((RSI_0 +64 8),8) SEP ((RSP_0 -64 40),8); ((RSI_0 +64 8),8) SEP ((RSP_0 -64 48),8); ((RSI_0 +64 8),8) SEP ((RSP_0 -64 52),4); ((RSI_0 +64 8),8) SEP ((RSP_0 -64 64),4); ((RSI_0 +64 8),8) SEP ((RSP_0 -64 64),8); ((RSI_0 +64 8),8) SEP ((RSP_0 -64 72),4); ((RSI_0 +64 8),8) SEP ((RSP_0 -64 72),8); ((RSI_0 +64 8),8) SEP ((RSP_0 -64 76),4); ((RSI_0 +64 8),8) SEP ((RSP_0 -64 80),4); ((RSI_0 +64 8),8) SEP ((RSP_0 -64 84),4); ((RSI_0 +64 8),8) SEP ((RSP_0 -64 88),4); ((RSI_0 +64 8),8) SEP ((RSP_0 -64 92),4); ((RSI_0 +64 8),8) SEP ((RSP_0 -64 104),8); ((RSI_0 +64 8),8) SEP ((RSP_0 -64 108),4); ((RSI_0 +64 8),8) SEP ((RSP_0 -64 116),4); ((RSI_0 +64 8),8) SEP ((RSP_0 -64 264),8); ((RSI_0 +64 8),8) SEP ((RSP_0 -64 268),4); ((RSI_0 +64 8),8) SEP ((RSP_0 -64 280),2); ((RSI_0 +64 8),8) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RAX = 0x100004178 ; RSI = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSI_0,8] = 0x100004178 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002d00: MOV QWORD PTR [R14 + 8], 0 8"
 Post  "RAX = 0x100004178 ; RSI = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSI_0,8] = 0x100004178 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSI_0 +64 8),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002d08"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x100004178 ; RSI = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSI_0,8] = 0x100004178 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSI_0 +64 8),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002d08: MOV R15, R14 3"
 Post  "RAX = 0x100004178 ; RSI = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RSI_0 ; [RSI_0,8] = 0x100004178 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSI_0 +64 8),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002a94, blockId == 31 ##
######################################
*)

htriple "ht_100002d0b"
 Separations ""
 Assertions  ""
 Pre   "RSI = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002d0b: LEA RDI, [RBP - 116] 4"
 Post  "RDI = (RSP_0 -64 124) ; RSI = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002d0f"
 Separations ""
 Assertions  ""
 Pre   "RDI = (RSP_0 -64 124) ; RSI = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002d0f: LEA R14, [RBP - 96] 4"
 Post  "RDI = (RSP_0 -64 124) ; RSI = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = (RSP_0 -64 104) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002d13"
 Separations ""
 Assertions  ""
 Pre   "RDI = (RSP_0 -64 124) ; RSI = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = (RSP_0 -64 104) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002d13: MOV RSI, R14 3"
 Post  "RDI = (RSP_0 -64 124) ; RSI = (RSP_0 -64 104) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = (RSP_0 -64 104) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002d16"
 Separations ""
 Assertions  ""
 Pre   "RDI = (RSP_0 -64 124) ; RSI = (RSP_0 -64 104) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = (RSP_0 -64 104) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002d16: ExternalCall fun__getbsize 5"
 Post  "RAX = bot(fun__getbsize) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = (RSP_0 -64 104) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 FunctionConstraints "PRESERVES fun__getbsize {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004018,8];[0x100004020,8];[0x100004180,8];[0x100004188,8];[0x100004190,8];[0x100004198,8];[0x1000041a0,1];[0x1000041a8,8];[0x1000041b0,8];[0x1000041b8,8];[0x1000041c0,8];[0x1000041c8,1];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 76),4];[(RSP_0 -64 80),4];[(RSP_0 -64 84),4];[(RSP_0 -64 88),4];[(RSP_0 -64 92),4];[(RSP_0 -64 104),8];[(RSP_0 -64 108),4];[(RSP_0 -64 264),8];[(RSP_0 -64 280),16]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002d1b"
 Separations "((RSP_0 -64 104),8) SEP (bot(fun____error),4); ((RSP_0 -64 104),8) SEP (bot(fun__fts_read_INODE64),8); ((RSP_0 -64 104),8) SEP (RSI_0,8); ((RSP_0 -64 104),8) SEP ([0x100004018,8]_0,8); ((RSP_0 -64 104),8) SEP ([0x100004020,8]_0,4); ((RSP_0 -64 104),8) SEP (0x100004018,8); ((RSP_0 -64 104),8) SEP (0x100004020,8); ((RSP_0 -64 104),8) SEP (0x100004180,8); ((RSP_0 -64 104),8) SEP (0x100004188,8); ((RSP_0 -64 104),8) SEP (0x100004190,8); ((RSP_0 -64 104),8) SEP (0x100004198,8); ((RSP_0 -64 104),8) SEP (0x1000041a0,1); ((RSP_0 -64 104),8) SEP (0x1000041a8,8); ((RSP_0 -64 104),8) SEP (0x1000041b0,8); ((RSP_0 -64 104),8) SEP (0x1000041b8,8); ((RSP_0 -64 104),8) SEP (0x1000041c0,8); ((RSP_0 -64 104),8) SEP (0x1000041c8,1); ((RSP_0 -64 104),8) SEP (0x1000041d0,8); ((RSP_0 -64 104),8) SEP (0x1000041d8,8); ((RSP_0 -64 104),8) SEP ((bot(fun__fts_read_INODE64) +64 8),8); ((RSP_0 -64 104),8) SEP ((bot(fun__fts_read_INODE64) +64 24),8); ((RSP_0 -64 104),8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); ((RSP_0 -64 104),8) SEP ((bot(fun__fts_read_INODE64) +64 56),4); ((RSP_0 -64 104),8) SEP ((bot(fun__fts_read_INODE64) +64 86),2); ((RSP_0 -64 104),8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); ((RSP_0 -64 104),8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); ((RSP_0 -64 104),8) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 104),8) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); ((RSP_0 -64 104),8) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun__getbsize) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = (RSP_0 -64 104) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002d1b: MOV RAX, QWORD PTR [R14] 3"
 Post  "RAX = [(RSP_0 -64 104),8]_0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = (RSP_0 -64 104) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002d1e"
 Separations ""
 Assertions  ""
 Pre   "RAX = [(RSP_0 -64 104),8]_0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = (RSP_0 -64 104) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002d1e: LEA RCX, [RAX + 511] 7"
 Post  "RAX = [(RSP_0 -64 104),8]_0 ; RCX = ([(RSP_0 -64 104),8]_0 +64 511) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = (RSP_0 -64 104) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002d25"
 Separations ""
 Assertions  ""
 Pre   "RAX = [(RSP_0 -64 104),8]_0 ; RCX = ([(RSP_0 -64 104),8]_0 +64 511) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = (RSP_0 -64 104) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002d25: TEST RAX, RAX 3"
 Post  "RAX = [(RSP_0 -64 104),8]_0 ; RCX = ([(RSP_0 -64 104),8]_0 +64 511) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = (RSP_0 -64 104) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002d28"
 Separations ""
 Assertions  ""
 Pre   "RAX = [(RSP_0 -64 104),8]_0 ; RCX = ([(RSP_0 -64 104),8]_0 +64 511) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = (RSP_0 -64 104) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002d28: CMOVNS RCX, RAX 4"
 Post  "RAX = [(RSP_0 -64 104),8]_0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = (RSP_0 -64 104) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002d2c"
 Separations ""
 Assertions  ""
 Pre   "RAX = [(RSP_0 -64 104),8]_0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = (RSP_0 -64 104) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002d2c: SAR RCX, 9 4"
 Post  "RAX = [(RSP_0 -64 104),8]_0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = (RSP_0 -64 104) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002d30"
 Separations "((RSP_0 -64 104),8) SEP (bot(fun____error),4); ((RSP_0 -64 104),8) SEP (bot(fun__fts_read_INODE64),8); ((RSP_0 -64 104),8) SEP (RSI_0,8); ((RSP_0 -64 104),8) SEP ([0x100004018,8]_0,8); ((RSP_0 -64 104),8) SEP ([0x100004020,8]_0,4); ((RSP_0 -64 104),8) SEP (0x100004018,8); ((RSP_0 -64 104),8) SEP (0x100004020,8); ((RSP_0 -64 104),8) SEP (0x100004180,8); ((RSP_0 -64 104),8) SEP (0x100004188,8); ((RSP_0 -64 104),8) SEP (0x100004190,8); ((RSP_0 -64 104),8) SEP (0x100004198,8); ((RSP_0 -64 104),8) SEP (0x1000041a0,1); ((RSP_0 -64 104),8) SEP (0x1000041a8,8); ((RSP_0 -64 104),8) SEP (0x1000041b0,8); ((RSP_0 -64 104),8) SEP (0x1000041b8,8); ((RSP_0 -64 104),8) SEP (0x1000041c0,8); ((RSP_0 -64 104),8) SEP (0x1000041c8,1); ((RSP_0 -64 104),8) SEP (0x1000041d0,8); ((RSP_0 -64 104),8) SEP (0x1000041d8,8); ((RSP_0 -64 104),8) SEP ((bot(fun__fts_read_INODE64) +64 8),8); ((RSP_0 -64 104),8) SEP ((bot(fun__fts_read_INODE64) +64 24),8); ((RSP_0 -64 104),8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); ((RSP_0 -64 104),8) SEP ((bot(fun__fts_read_INODE64) +64 56),4); ((RSP_0 -64 104),8) SEP ((bot(fun__fts_read_INODE64) +64 86),2); ((RSP_0 -64 104),8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); ((RSP_0 -64 104),8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); ((RSP_0 -64 104),8) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 104),8) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); ((RSP_0 -64 104),8) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = [(RSP_0 -64 104),8]_0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = (RSP_0 -64 104) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002d30: MOV QWORD PTR [R14], RCX 3"
 Post  "RAX = [(RSP_0 -64 104),8]_0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = (RSP_0 -64 104) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002d33"
 Separations ""
 Assertions  ""
 Pre   "RAX = [(RSP_0 -64 104),8]_0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = (RSP_0 -64 104) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002d33: LEA R14, [RBP - 84] 4"
 Post  "RAX = [(RSP_0 -64 104),8]_0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = (RSP_0 -64 92) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002d37"
 Separations "((RSP_0 -64 92),4) SEP (bot(fun____error),4); ((RSP_0 -64 92),4) SEP (bot(fun__fts_read_INODE64),8); ((RSP_0 -64 92),4) SEP (RSI_0,8); ((RSP_0 -64 92),4) SEP ([0x100004018,8]_0,8); ((RSP_0 -64 92),4) SEP ([0x100004020,8]_0,4); ((RSP_0 -64 92),4) SEP (0x100004018,8); ((RSP_0 -64 92),4) SEP (0x100004020,8); ((RSP_0 -64 92),4) SEP (0x100004180,8); ((RSP_0 -64 92),4) SEP (0x100004188,8); ((RSP_0 -64 92),4) SEP (0x100004190,8); ((RSP_0 -64 92),4) SEP (0x100004198,8); ((RSP_0 -64 92),4) SEP (0x1000041a0,1); ((RSP_0 -64 92),4) SEP (0x1000041a8,8); ((RSP_0 -64 92),4) SEP (0x1000041b0,8); ((RSP_0 -64 92),4) SEP (0x1000041b8,8); ((RSP_0 -64 92),4) SEP (0x1000041c0,8); ((RSP_0 -64 92),4) SEP (0x1000041c8,1); ((RSP_0 -64 92),4) SEP (0x1000041d0,8); ((RSP_0 -64 92),4) SEP (0x1000041d8,8); ((RSP_0 -64 92),4) SEP ((bot(fun__fts_read_INODE64) +64 8),8); ((RSP_0 -64 92),4) SEP ((bot(fun__fts_read_INODE64) +64 24),8); ((RSP_0 -64 92),4) SEP ((bot(fun__fts_read_INODE64) +64 48),8); ((RSP_0 -64 92),4) SEP ((bot(fun__fts_read_INODE64) +64 56),4); ((RSP_0 -64 92),4) SEP ((bot(fun__fts_read_INODE64) +64 86),2); ((RSP_0 -64 92),4) SEP ((bot(fun__fts_read_INODE64) +64 88),4); ((RSP_0 -64 92),4) SEP ((bot(fun__fts_read_INODE64) +64 96),8); ((RSP_0 -64 92),4) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 92),4) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); ((RSP_0 -64 92),4) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = [(RSP_0 -64 104),8]_0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = (RSP_0 -64 92) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = [(RSP_0 -64 92),4]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002d37: MOV DWORD PTR [R14], 1 7"
 Post  "RAX = [(RSP_0 -64 104),8]_0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = (RSP_0 -64 92) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = 1 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002d3e"
 Separations ""
 Assertions  ""
 Pre   "RAX = [(RSP_0 -64 104),8]_0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = (RSP_0 -64 92) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = 1 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002d3e: LEA RDI, [RIP + 4193] 7"
 Post  "RAX = [(RSP_0 -64 104),8]_0 ; RDI = 0x100003da6 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = (RSP_0 -64 92) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = 1 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002d45"
 Separations ""
 Assertions  ""
 Pre   "RAX = [(RSP_0 -64 104),8]_0 ; RDI = 0x100003da6 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = (RSP_0 -64 92) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = 1 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002d45: MOV R8D, 4 6"
 Post  "RAX = [(RSP_0 -64 104),8]_0 ; RDI = 0x100003da6 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = (RSP_0 -64 92) ; R8 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = 1 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002d4b"
 Separations ""
 Assertions  ""
 Pre   "RAX = [(RSP_0 -64 104),8]_0 ; RDI = 0x100003da6 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = (RSP_0 -64 92) ; R8 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = 1 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002d4b: XOR ESI, ESI 2"
 Post  "RAX = [(RSP_0 -64 104),8]_0 ; RDI = 0x100003da6 ; RSI = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = (RSP_0 -64 92) ; R8 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = 1 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002d4d"
 Separations ""
 Assertions  ""
 Pre   "RAX = [(RSP_0 -64 104),8]_0 ; RDI = 0x100003da6 ; RSI = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = (RSP_0 -64 92) ; R8 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = 1 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002d4d: XOR EDX, EDX 2"
 Post  "RAX = [(RSP_0 -64 104),8]_0 ; RDX = 0 ; RDI = 0x100003da6 ; RSI = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = (RSP_0 -64 92) ; R8 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = 1 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002d4f"
 Separations ""
 Assertions  ""
 Pre   "RAX = [(RSP_0 -64 104),8]_0 ; RDX = 0 ; RDI = 0x100003da6 ; RSI = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = (RSP_0 -64 92) ; R8 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = 1 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002d4f: MOV RCX, R14 3"
 Post  "RAX = [(RSP_0 -64 104),8]_0 ; RCX = (RSP_0 -64 92) ; RDX = 0 ; RDI = 0x100003da6 ; RSI = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = (RSP_0 -64 92) ; R8 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = 1 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002d52"
 Separations ""
 Assertions  ""
 Pre   "RAX = [(RSP_0 -64 104),8]_0 ; RCX = (RSP_0 -64 92) ; RDX = 0 ; RDI = 0x100003da6 ; RSI = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = (RSP_0 -64 92) ; R8 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = 1 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002d52: ExternalCall fun__sysctlbyname 5"
 Post  "RAX = bot(fun__sysctlbyname) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = (RSP_0 -64 92) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = 1 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 FunctionConstraints "PRESERVES fun__sysctlbyname {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004018,8];[0x100004020,8];[0x100004180,8];[0x100004188,8];[0x100004190,8];[0x100004198,8];[0x1000041a0,1];[0x1000041a8,8];[0x1000041b0,8];[0x1000041b8,8];[0x1000041c0,8];[0x1000041c8,1];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 76),4];[(RSP_0 -64 80),4];[(RSP_0 -64 84),4];[(RSP_0 -64 88),4];[(RSP_0 -64 92),4];[(RSP_0 -64 104),8];[(RSP_0 -64 108),4];[(RSP_0 -64 264),8];[(RSP_0 -64 280),16]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002d57"
 Separations "((RSP_0 -64 92),4) SEP (bot(fun____error),4); ((RSP_0 -64 92),4) SEP (bot(fun__fts_read_INODE64),8); ((RSP_0 -64 92),4) SEP (RSI_0,8); ((RSP_0 -64 92),4) SEP ([0x100004018,8]_0,8); ((RSP_0 -64 92),4) SEP ([0x100004020,8]_0,4); ((RSP_0 -64 92),4) SEP (0x100004018,8); ((RSP_0 -64 92),4) SEP (0x100004020,8); ((RSP_0 -64 92),4) SEP (0x100004180,8); ((RSP_0 -64 92),4) SEP (0x100004188,8); ((RSP_0 -64 92),4) SEP (0x100004190,8); ((RSP_0 -64 92),4) SEP (0x100004198,8); ((RSP_0 -64 92),4) SEP (0x1000041a0,1); ((RSP_0 -64 92),4) SEP (0x1000041a8,8); ((RSP_0 -64 92),4) SEP (0x1000041b0,8); ((RSP_0 -64 92),4) SEP (0x1000041b8,8); ((RSP_0 -64 92),4) SEP (0x1000041c0,8); ((RSP_0 -64 92),4) SEP (0x1000041c8,1); ((RSP_0 -64 92),4) SEP (0x1000041d0,8); ((RSP_0 -64 92),4) SEP (0x1000041d8,8); ((RSP_0 -64 92),4) SEP ((bot(fun__fts_read_INODE64) +64 8),8); ((RSP_0 -64 92),4) SEP ((bot(fun__fts_read_INODE64) +64 24),8); ((RSP_0 -64 92),4) SEP ((bot(fun__fts_read_INODE64) +64 48),8); ((RSP_0 -64 92),4) SEP ((bot(fun__fts_read_INODE64) +64 56),4); ((RSP_0 -64 92),4) SEP ((bot(fun__fts_read_INODE64) +64 86),2); ((RSP_0 -64 92),4) SEP ((bot(fun__fts_read_INODE64) +64 88),4); ((RSP_0 -64 92),4) SEP ((bot(fun__fts_read_INODE64) +64 96),8); ((RSP_0 -64 92),4) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 92),4) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); ((RSP_0 -64 92),4) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun__sysctlbyname) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = (RSP_0 -64 92) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = 1 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002d57: MOV DWORD PTR [R14], 0 7"
 Post  "RAX = bot(fun__sysctlbyname) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = (RSP_0 -64 92) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = 0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002d5e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__sysctlbyname) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = (RSP_0 -64 92) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = 0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002d5e: MOV RDI, R15 3"
 Post  "RAX = bot(fun__sysctlbyname) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = (RSP_0 -64 92) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = 0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002d61"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__sysctlbyname) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = (RSP_0 -64 92) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = 0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002d61: MOV ESI, EBX 2"
 Post  "RAX = bot(fun__sysctlbyname) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = (RSP_0 -64 92) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = 0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002d63"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__sysctlbyname) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = (RSP_0 -64 92) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = 0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002d63: XOR EDX, EDX 2"
 Post  "RAX = bot(fun__sysctlbyname) ; RDX = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = (RSP_0 -64 92) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = 0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002d65"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__sysctlbyname) ; RDX = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = (RSP_0 -64 92) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = 0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002d65: ExternalCall fun__fts_open_INODE64 5"
 Post  "RAX = bot(fun__fts_open_INODE64) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = (RSP_0 -64 92) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = 0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 FunctionConstraints "PRESERVES fun__fts_open_INODE64 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004018,8];[0x100004020,8];[0x100004180,8];[0x100004188,8];[0x100004190,8];[0x100004198,8];[0x1000041a0,1];[0x1000041a8,8];[0x1000041b0,8];[0x1000041b8,8];[0x1000041c0,8];[0x1000041c8,1];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 76),4];[(RSP_0 -64 80),4];[(RSP_0 -64 84),4];[(RSP_0 -64 88),4];[(RSP_0 -64 92),4];[(RSP_0 -64 104),8];[(RSP_0 -64 108),4];[(RSP_0 -64 264),8];[(RSP_0 -64 280),16]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002d6a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fts_open_INODE64) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = (RSP_0 -64 92) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = 0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002d6a: TEST RAX, RAX 3"
 Post  "RAX = bot(fun__fts_open_INODE64) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = (RSP_0 -64 92) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = 0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002d6d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fts_open_INODE64) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = (RSP_0 -64 92) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = 0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002d6d: JE 4294981139 6"
 Post  "RAX = bot(fun__fts_open_INODE64) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = (RSP_0 -64 92) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = 0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002a94, blockId == 32 ##
######################################
*)

htriple "ht_100002d73"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fts_open_INODE64) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = (RSP_0 -64 92) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = 0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002d73: MOV R13, RAX 3"
 Post  "RAX = bot(fun__fts_open_INODE64) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = (RSP_0 -64 92) ; R13 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = 0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002d76"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fts_open_INODE64) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = (RSP_0 -64 92) ; R13 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = 0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002d76: MOV RDI, RAX 3"
 Post  "RAX = bot(fun__fts_open_INODE64) ; RDI = bot(fun__fts_open_INODE64) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = (RSP_0 -64 92) ; R13 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = 0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002d79"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fts_open_INODE64) ; RDI = bot(fun__fts_open_INODE64) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = (RSP_0 -64 92) ; R13 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = 0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002d79: ExternalCall fun__fts_read_INODE64 5"
 Post  "RAX = bot(fun__fts_read_INODE64) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = (RSP_0 -64 92) ; R13 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = 0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 FunctionConstraints "PRESERVES fun__fts_read_INODE64 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004018,8];[0x100004020,8];[0x100004180,8];[0x100004188,8];[0x100004190,8];[0x100004198,8];[0x1000041a0,1];[0x1000041a8,8];[0x1000041b0,8];[0x1000041b8,8];[0x1000041c0,8];[0x1000041c8,1];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 76),4];[(RSP_0 -64 80),4];[(RSP_0 -64 84),4];[(RSP_0 -64 88),4];[(RSP_0 -64 92),4];[(RSP_0 -64 104),8];[(RSP_0 -64 108),4];[(RSP_0 -64 264),8];[(RSP_0 -64 280),16]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002d7e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fts_read_INODE64) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = (RSP_0 -64 92) ; R13 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = 0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002d7e: TEST RAX, RAX 3"
 Post  "RAX = bot(fun__fts_read_INODE64) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = (RSP_0 -64 92) ; R13 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = 0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002d81"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fts_read_INODE64) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = (RSP_0 -64 92) ; R13 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = 0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002d81: JE 4294981148 6"
 Post  "RAX = bot(fun__fts_read_INODE64) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = (RSP_0 -64 92) ; R13 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = 0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002a94, blockId == 33 ##
######################################
*)

htriple "ht_100003613"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fts_open_INODE64) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = (RSP_0 -64 92) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = 0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100003613: LEA RSI, [RIP + 1967] 7"
 Post  "RAX = bot(fun__fts_open_INODE64) ; RSI = 0x100003dc9 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = (RSP_0 -64 92) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = 0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000361a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fts_open_INODE64) ; RSI = 0x100003dc9 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = (RSP_0 -64 92) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = 0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "10000361a: JMP 4294981215 2"
 Post  "RAX = bot(fun__fts_open_INODE64) ; RSI = 0x100003dc9 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = (RSP_0 -64 92) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = 0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002a94, blockId == 34 ##
######################################
*)

htriple "ht_100002d87"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fts_read_INODE64) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = (RSP_0 -64 92) ; R13 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = 0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002d87: MOV R12, RAX 3"
 Post  "RAX = bot(fun__fts_read_INODE64) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = (RSP_0 -64 92) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = 0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002d8a"
 Separations "((RSP_0 -64 64),4) SEP (bot(fun____error),4); ((RSP_0 -64 64),4) SEP (RSI_0,8); ((RSP_0 -64 64),4) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 64),8) SEP (bot(fun____error),4); ((RSP_0 -64 64),8) SEP (bot(fun__fts_read_INODE64),8); ((RSP_0 -64 64),8) SEP (RSI_0,8); ((RSP_0 -64 64),8) SEP ([0x100004018,8]_0,8); ((RSP_0 -64 64),8) SEP ([0x100004020,8]_0,4); ((RSP_0 -64 64),8) SEP (0x100004018,8); ((RSP_0 -64 64),8) SEP (0x100004020,8); ((RSP_0 -64 64),8) SEP (0x100004180,8); ((RSP_0 -64 64),8) SEP (0x100004188,8); ((RSP_0 -64 64),8) SEP (0x100004190,8); ((RSP_0 -64 64),8) SEP (0x100004198,8); ((RSP_0 -64 64),8) SEP (0x1000041a0,1); ((RSP_0 -64 64),8) SEP (0x1000041a8,8); ((RSP_0 -64 64),8) SEP (0x1000041b0,8); ((RSP_0 -64 64),8) SEP (0x1000041b8,8); ((RSP_0 -64 64),8) SEP (0x1000041c0,8); ((RSP_0 -64 64),8) SEP (0x1000041c8,1); ((RSP_0 -64 64),8) SEP (0x1000041d0,8); ((RSP_0 -64 64),8) SEP (0x1000041d8,8); ((RSP_0 -64 64),8) SEP ((bot(fun__fts_read_INODE64) +64 8),8); ((RSP_0 -64 64),8) SEP ((bot(fun__fts_read_INODE64) +64 24),8); ((RSP_0 -64 64),8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); ((RSP_0 -64 64),8) SEP ((bot(fun__fts_read_INODE64) +64 56),4); ((RSP_0 -64 64),8) SEP ((bot(fun__fts_read_INODE64) +64 86),2); ((RSP_0 -64 64),8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); ((RSP_0 -64 64),8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 64),8) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); ((RSP_0 -64 64),8) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun__fts_read_INODE64) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = (RSP_0 -64 92) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = 0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "100002d8a: MOV QWORD PTR [RBP - 56], R13 4"
 Post  "RAX = bot(fun__fts_read_INODE64) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = (RSP_0 -64 92) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 92),4] = 0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002a94, blockId == 35 ##
######################################
*)

htriple "ht_10000361c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fts_read_INODE64) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = (RSP_0 -64 92) ; R13 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = 0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
 Instruction "10000361c: XOR EBX, EBX 2"
 Post  "RAX = bot(fun__fts_read_INODE64) ; RBX = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = (RSP_0 -64 92) ; R13 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004018,8] = [0x100004018,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),4] = 0 ; [(RSP_0 -64 92),4] = 0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 280),16] = [(RSP_0 -64 280),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002a94, blockId == 36 ##
######################################
*)

htriple "ht_100002d9f"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002d9f: MOVZX EAX, AX 3"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002da2"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002da2: LEA RCX, [RIP + 2415] 7"
 Post  "RCX = 0x100003718 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002da9"
 Separations ""
 Assertions  "((0x100003718 +64 (RAX *64 4)),4) SEP (RSP_0,8); ((0x100003718 +64 (RAX *64 4)),4) SEP ((RSP_0 -64 8),8); ((0x100003718 +64 (RAX *64 4)),4) SEP ((RSP_0 -64 16),8); ((0x100003718 +64 (RAX *64 4)),4) SEP ((RSP_0 -64 24),8); ((0x100003718 +64 (RAX *64 4)),4) SEP ((RSP_0 -64 32),8); ((0x100003718 +64 (RAX *64 4)),4) SEP ((RSP_0 -64 40),8); ((0x100003718 +64 (RAX *64 4)),4) SEP ((RSP_0 -64 48),8); ((0x100003718 +64 (RAX *64 4)),4) SEP ((RSP_0 -64 52),4); ((0x100003718 +64 (RAX *64 4)),4) SEP ((RSP_0 -64 64),8); ((0x100003718 +64 (RAX *64 4)),4) SEP ((RSP_0 -64 72),8); ((0x100003718 +64 (RAX *64 4)),4) SEP ((RSP_0 -64 76),4); ((0x100003718 +64 (RAX *64 4)),4) SEP ((RSP_0 -64 80),4); ((0x100003718 +64 (RAX *64 4)),4) SEP ((RSP_0 -64 84),4); ((0x100003718 +64 (RAX *64 4)),4) SEP ((RSP_0 -64 88),4); ((0x100003718 +64 (RAX *64 4)),4) SEP ((RSP_0 -64 92),4); ((0x100003718 +64 (RAX *64 4)),4) SEP ((RSP_0 -64 104),8); ((0x100003718 +64 (RAX *64 4)),4) SEP ((RSP_0 -64 108),4); ((0x100003718 +64 (RAX *64 4)),4) SEP ((RSP_0 -64 264),8); ((0x100003718 +64 (RAX *64 4)),4) SEP ((RSP_0 -64 280),16)"
 Pre   "RCX = 0x100003718 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002da9: MOVSXD RAX, DWORD PTR [RCX + RAX * 4] 4"
 Post  "RCX = 0x100003718 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002dad"
 Separations ""
 Assertions  ""
 Pre   "RCX = 0x100003718 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002dad: ADD RAX, RCX 3"
 Post  "RCX = 0x100003718 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002db0"
 Separations ""
 Assertions  ""
 Pre   "RCX = 0x100003718 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002db0: JMP RAX 2"
 Post  "RCX = 0x100003718 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002a94, blockId == 37 ##
######################################
*)

htriple "ht_100002e8e"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002e8e: MOV RDI, R12 3"
 Post  "RDI = bot(fun__fts_read_INODE64) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002e91"
 Separations ""
 Assertions  ""
 Pre   "RDI = bot(fun__fts_read_INODE64) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002e91: ExternalCall fun_0x1000037cc 5"
 Post  "RAX = bot(fun_0x1000037cc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 FunctionConstraints "PRESERVES fun_0x1000037cc {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004018,8];[0x100004020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 76),4];[(RSP_0 -64 80),4];[(RSP_0 -64 84),4];[(RSP_0 -64 88),4];[(RSP_0 -64 92),4];[(RSP_0 -64 104),8];[(RSP_0 -64 108),4];[(RSP_0 -64 264),8];[(RSP_0 -64 280),16]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002e96"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000037cc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002e96: TEST EAX, EAX 2"
 Post  "RAX = bot(fun_0x1000037cc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002e98"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000037cc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002e98: JNE 4294980810 6"
 Post  "RAX = bot(fun_0x1000037cc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002a94, blockId == 38 ##
######################################
*)

htriple "ht_100002db2"
 Separations ""
 Assertions  ""
 Pre   "RCX = 0x100003718 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002db2: MOV RDI, R12 3"
 Post  "RCX = 0x100003718 ; RDI = bot(fun__fts_read_INODE64) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002db5"
 Separations ""
 Assertions  ""
 Pre   "RCX = 0x100003718 ; RDI = bot(fun__fts_read_INODE64) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002db5: ExternalCall fun_0x1000037cc 5"
 Post  "RAX = bot(fun_0x1000037cc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 FunctionConstraints "PRESERVES fun_0x1000037cc {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004018,8];[0x100004020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 76),4];[(RSP_0 -64 80),4];[(RSP_0 -64 84),4];[(RSP_0 -64 88),4];[(RSP_0 -64 92),4];[(RSP_0 -64 104),8];[(RSP_0 -64 108),4];[(RSP_0 -64 264),8];[(RSP_0 -64 280),16]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002dba"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000037cc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002dba: TEST EAX, EAX 2"
 Post  "RAX = bot(fun_0x1000037cc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002dbc"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000037cc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002dbc: JE 4294979306 6"
 Post  "RAX = bot(fun_0x1000037cc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002a94, blockId == 39 ##
######################################
*)

htriple "ht_100002dd7"
 Separations ""
 Assertions  ""
 Pre   "RCX = 0x100003718 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002dd7: MOV RDI, R12 3"
 Post  "RCX = 0x100003718 ; RDI = bot(fun__fts_read_INODE64) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002dda"
 Separations ""
 Assertions  ""
 Pre   "RCX = 0x100003718 ; RDI = bot(fun__fts_read_INODE64) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002dda: ExternalCall fun_0x1000037cc 5"
 Post  "RAX = bot(fun_0x1000037cc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 FunctionConstraints "PRESERVES fun_0x1000037cc {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004018,8];[0x100004020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 76),4];[(RSP_0 -64 80),4];[(RSP_0 -64 84),4];[(RSP_0 -64 88),4];[(RSP_0 -64 92),4];[(RSP_0 -64 104),8];[(RSP_0 -64 108),4];[(RSP_0 -64 264),8];[(RSP_0 -64 280),16]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002ddf"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000037cc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002ddf: TEST EAX, EAX 2"
 Post  "RAX = bot(fun_0x1000037cc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002de1"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000037cc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002de1: JNE 4294980810 6"
 Post  "RAX = bot(fun_0x1000037cc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002a94, blockId == 40 ##
######################################
*)

htriple "ht_100002eca"
 Separations ""
 Assertions  ""
 Pre   "RCX = 0x100003718 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002eca: LEA RDI, [RIP + 3854] 7"
 Post  "RCX = 0x100003718 ; RDI = 0x100003ddf ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002ed1"
 Separations ""
 Assertions  ""
 Pre   "RCX = 0x100003718 ; RDI = 0x100003ddf ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002ed1: LEA RSI, [RIP + 3854] 7"
 Post  "RCX = 0x100003718 ; RDI = 0x100003ddf ; RSI = 0x100003de6 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002ed8"
 Separations ""
 Assertions  ""
 Pre   "RCX = 0x100003718 ; RDI = 0x100003ddf ; RSI = 0x100003de6 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002ed8: ExternalCall fun__compat_mode 5"
 Post  "RAX = bot(fun__compat_mode) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 FunctionConstraints "PRESERVES fun__compat_mode {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004018,8];[0x100004020,8];[0x100004180,8];[0x100004188,8];[0x100004190,8];[0x100004198,8];[0x1000041a0,1];[0x1000041a8,8];[0x1000041b0,8];[0x1000041b8,8];[0x1000041c0,8];[0x1000041c8,1];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 76),4];[(RSP_0 -64 80),4];[(RSP_0 -64 84),4];[(RSP_0 -64 88),4];[(RSP_0 -64 92),4];[(RSP_0 -64 104),8];[(RSP_0 -64 108),4];[(RSP_0 -64 264),8];[(RSP_0 -64 280),16]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002edd"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__compat_mode) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002edd: TEST AL, AL 2"
 Post  "RAX = bot(fun__compat_mode) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002edf"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__compat_mode) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002edf: JE 4294980810 6"
 Post  "RAX = bot(fun__compat_mode) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002a94, blockId == 41 ##
######################################
*)

htriple "ht_100002f65"
 Separations "((bot(fun__fts_read_INODE64) +64 48),8) SEP (RSI_0,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (RSP_0,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x100004018,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x100004020,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x100004180,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x100004188,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x100004190,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x100004198,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x1000041a0,1); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x1000041a8,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x1000041b0,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x1000041b8,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x1000041c0,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x1000041c8,1); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x1000041d0,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x1000041d8,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSI_0 +64 8),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 8),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 16),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 24),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 32),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 40),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 48),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 52),4); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 64),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 72),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 76),4); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 80),4); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 84),4); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 88),4); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 92),4); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 104),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 108),4); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 264),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RCX = 0x100003718 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002f65: MOV RBX, QWORD PTR [R12 + 48] 5"
 Post  "RCX = 0x100003718 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002f6a"
 Separations "((bot(fun__fts_read_INODE64) +64 56),4) SEP (RSI_0,8); ((bot(fun__fts_read_INODE64) +64 56),4) SEP (RSP_0,8); ((bot(fun__fts_read_INODE64) +64 56),4) SEP (0x100004018,8); ((bot(fun__fts_read_INODE64) +64 56),4) SEP (0x100004020,8); ((bot(fun__fts_read_INODE64) +64 56),4) SEP (0x100004180,8); ((bot(fun__fts_read_INODE64) +64 56),4) SEP (0x100004188,8); ((bot(fun__fts_read_INODE64) +64 56),4) SEP (0x100004190,8); ((bot(fun__fts_read_INODE64) +64 56),4) SEP (0x100004198,8); ((bot(fun__fts_read_INODE64) +64 56),4) SEP (0x1000041a0,1); ((bot(fun__fts_read_INODE64) +64 56),4) SEP (0x1000041a8,8); ((bot(fun__fts_read_INODE64) +64 56),4) SEP (0x1000041b0,8); ((bot(fun__fts_read_INODE64) +64 56),4) SEP (0x1000041b8,8); ((bot(fun__fts_read_INODE64) +64 56),4) SEP (0x1000041c0,8); ((bot(fun__fts_read_INODE64) +64 56),4) SEP (0x1000041c8,1); ((bot(fun__fts_read_INODE64) +64 56),4) SEP (0x1000041d0,8); ((bot(fun__fts_read_INODE64) +64 56),4) SEP (0x1000041d8,8); ((bot(fun__fts_read_INODE64) +64 56),4) SEP ((RSI_0 +64 8),8); ((bot(fun__fts_read_INODE64) +64 56),4) SEP ((RSP_0 -64 8),8); ((bot(fun__fts_read_INODE64) +64 56),4) SEP ((RSP_0 -64 16),8); ((bot(fun__fts_read_INODE64) +64 56),4) SEP ((RSP_0 -64 24),8); ((bot(fun__fts_read_INODE64) +64 56),4) SEP ((RSP_0 -64 32),8); ((bot(fun__fts_read_INODE64) +64 56),4) SEP ((RSP_0 -64 40),8); ((bot(fun__fts_read_INODE64) +64 56),4) SEP ((RSP_0 -64 48),8); ((bot(fun__fts_read_INODE64) +64 56),4) SEP ((RSP_0 -64 52),4); ((bot(fun__fts_read_INODE64) +64 56),4) SEP ((RSP_0 -64 64),8); ((bot(fun__fts_read_INODE64) +64 56),4) SEP ((RSP_0 -64 72),8); ((bot(fun__fts_read_INODE64) +64 56),4) SEP ((RSP_0 -64 76),4); ((bot(fun__fts_read_INODE64) +64 56),4) SEP ((RSP_0 -64 80),4); ((bot(fun__fts_read_INODE64) +64 56),4) SEP ((RSP_0 -64 84),4); ((bot(fun__fts_read_INODE64) +64 56),4) SEP ((RSP_0 -64 88),4); ((bot(fun__fts_read_INODE64) +64 56),4) SEP ((RSP_0 -64 92),4); ((bot(fun__fts_read_INODE64) +64 56),4) SEP ((RSP_0 -64 104),8); ((bot(fun__fts_read_INODE64) +64 56),4) SEP ((RSP_0 -64 108),4); ((bot(fun__fts_read_INODE64) +64 56),4) SEP ((RSP_0 -64 264),8); ((bot(fun__fts_read_INODE64) +64 56),4) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RCX = 0x100003718 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002f6a: MOV EDI, DWORD PTR [R12 + 56] 5"
 Post  "RCX = 0x100003718 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002f6f"
 Separations ""
 Assertions  ""
 Pre   "RCX = 0x100003718 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002f6f: ExternalCall fun__strerror 5"
 Post  "RAX = bot(fun__strerror) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 FunctionConstraints "PRESERVES fun__strerror {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004018,8];[0x100004020,8];[0x100004180,8];[0x100004188,8];[0x100004190,8];[0x100004198,8];[0x1000041a0,1];[0x1000041a8,8];[0x1000041b0,8];[0x1000041b8,8];[0x1000041c0,8];[0x1000041c8,1];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 76),4];[(RSP_0 -64 80),4];[(RSP_0 -64 84),4];[(RSP_0 -64 88),4];[(RSP_0 -64 92),4];[(RSP_0 -64 104),8];[(RSP_0 -64 108),4];[(RSP_0 -64 264),8];[(RSP_0 -64 280),16]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002f74"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strerror) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002f74: LEA RDI, [RIP + 3741] 7"
 Post  "RAX = bot(fun__strerror) ; RDI = 0x100003e18 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002f7b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strerror) ; RDI = 0x100003e18 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002f7b: MOV RSI, RBX 3"
 Post  "RAX = bot(fun__strerror) ; RDI = 0x100003e18 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002f7e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strerror) ; RDI = 0x100003e18 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002f7e: MOV RDX, RAX 3"
 Post  "RAX = bot(fun__strerror) ; RDX = bot(fun__strerror) ; RDI = 0x100003e18 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002f81"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strerror) ; RDX = bot(fun__strerror) ; RDI = 0x100003e18 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002f81: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RDX = bot(fun__strerror) ; RDI = 0x100003e18 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002f83"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RDX = bot(fun__strerror) ; RDI = 0x100003e18 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002f83: ExternalCall fun__warnx 5"
 Post  "RAX = bot(fun__warnx) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 FunctionConstraints "PRESERVES fun__warnx {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004018,8];[0x100004020,8];[0x100004180,8];[0x100004188,8];[0x100004190,8];[0x100004198,8];[0x1000041a0,1];[0x1000041a8,8];[0x1000041b0,8];[0x1000041b8,8];[0x1000041c0,8];[0x1000041c8,1];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 76),4];[(RSP_0 -64 80),4];[(RSP_0 -64 84),4];[(RSP_0 -64 88),4];[(RSP_0 -64 92),4];[(RSP_0 -64 104),8];[(RSP_0 -64 108),4];[(RSP_0 -64 264),8];[(RSP_0 -64 280),16]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002f88"
 Separations "((RSP_0 -64 92),4) SEP (bot(fun____error),4); ((RSP_0 -64 92),4) SEP (bot(fun__fts_read_INODE64),8); ((RSP_0 -64 92),4) SEP (RSI_0,8); ((RSP_0 -64 92),4) SEP ([0x100004018,8]_0,8); ((RSP_0 -64 92),4) SEP ([0x100004020,8]_0,4); ((RSP_0 -64 92),4) SEP (0x100004018,8); ((RSP_0 -64 92),4) SEP (0x100004020,8); ((RSP_0 -64 92),4) SEP (0x100004180,8); ((RSP_0 -64 92),4) SEP (0x100004188,8); ((RSP_0 -64 92),4) SEP (0x100004190,8); ((RSP_0 -64 92),4) SEP (0x100004198,8); ((RSP_0 -64 92),4) SEP (0x1000041a0,1); ((RSP_0 -64 92),4) SEP (0x1000041a8,8); ((RSP_0 -64 92),4) SEP (0x1000041b0,8); ((RSP_0 -64 92),4) SEP (0x1000041b8,8); ((RSP_0 -64 92),4) SEP (0x1000041c0,8); ((RSP_0 -64 92),4) SEP (0x1000041c8,1); ((RSP_0 -64 92),4) SEP (0x1000041d0,8); ((RSP_0 -64 92),4) SEP (0x1000041d8,8); ((RSP_0 -64 92),4) SEP ((bot(fun__fts_read_INODE64) +64 8),8); ((RSP_0 -64 92),4) SEP ((bot(fun__fts_read_INODE64) +64 24),8); ((RSP_0 -64 92),4) SEP ((bot(fun__fts_read_INODE64) +64 48),8); ((RSP_0 -64 92),4) SEP ((bot(fun__fts_read_INODE64) +64 56),4); ((RSP_0 -64 92),4) SEP ((bot(fun__fts_read_INODE64) +64 86),2); ((RSP_0 -64 92),4) SEP ((bot(fun__fts_read_INODE64) +64 88),4); ((RSP_0 -64 92),4) SEP ((bot(fun__fts_read_INODE64) +64 96),8); ((RSP_0 -64 92),4) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 92),4) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); ((RSP_0 -64 92),4) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun__warnx) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002f88: MOV DWORD PTR [RBP - 84], 1 7"
 Post  "RAX = bot(fun__warnx) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 92),4] = 1"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002f8f"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__warnx) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 92),4] = 1"
 Instruction "100002f8f: JMP 4294980810 5"
 Post  "RAX = bot(fun__warnx) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 92),4] = 1"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002a94, blockId == 42 ##
######################################
*)

htriple "ht_100002dc2"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002dc2: MOV RDI, R13 3"
 Post  "RDI = bot(fun__fts_open_INODE64) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002dc5"
 Separations ""
 Assertions  ""
 Pre   "RDI = bot(fun__fts_open_INODE64) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002dc5: MOV RSI, R12 3"
 Post  "RDI = bot(fun__fts_open_INODE64) ; RSI = bot(fun__fts_read_INODE64) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002dc8"
 Separations ""
 Assertions  ""
 Pre   "RDI = bot(fun__fts_open_INODE64) ; RSI = bot(fun__fts_read_INODE64) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002dc8: MOV EDX, 4 5"
 Post  "RDX = 4 ; RDI = bot(fun__fts_open_INODE64) ; RSI = bot(fun__fts_read_INODE64) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002dcd"
 Separations ""
 Assertions  ""
 Pre   "RDX = 4 ; RDI = bot(fun__fts_open_INODE64) ; RSI = bot(fun__fts_read_INODE64) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002dcd: ExternalCall fun__fts_set_INODE64 5"
 Post  "RAX = bot(fun__fts_set_INODE64) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 FunctionConstraints "PRESERVES fun__fts_set_INODE64 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004018,8];[0x100004020,8];[0x100004180,8];[0x100004188,8];[0x100004190,8];[0x100004198,8];[0x1000041a0,1];[0x1000041a8,8];[0x1000041b0,8];[0x1000041b8,8];[0x1000041c0,8];[0x1000041c8,1];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 76),4];[(RSP_0 -64 80),4];[(RSP_0 -64 84),4];[(RSP_0 -64 88),4];[(RSP_0 -64 92),4];[(RSP_0 -64 104),8];[(RSP_0 -64 108),4];[(RSP_0 -64 264),8];[(RSP_0 -64 280),16]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002dd2"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fts_set_INODE64) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002dd2: JMP 4294980810 5"
 Post  "RAX = bot(fun__fts_set_INODE64) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002a94, blockId == 43 ##
######################################
*)

htriple "ht_100002eea"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000037cc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002eea: XORPD XMM0, XMM0 4"
 Post  "RAX = bot(fun_0x1000037cc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002eee"
 Separations "((RSP_0 -64 280),2) SEP (bot(fun____error),4); ((RSP_0 -64 280),2) SEP (RSI_0,8); ((RSP_0 -64 280),2) SEP ((bot(fun__fts_read_INODE64) +64 24),8); ((RSP_0 -64 280),2) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 280),16) SEP (bot(fun____error),4); ((RSP_0 -64 280),16) SEP (bot(fun__fts_read_INODE64),8); ((RSP_0 -64 280),16) SEP (RSI_0,8); ((RSP_0 -64 280),16) SEP ([0x100004018,8]_0,8); ((RSP_0 -64 280),16) SEP ([0x100004020,8]_0,4); ((RSP_0 -64 280),16) SEP (0x100004018,8); ((RSP_0 -64 280),16) SEP (0x100004020,8); ((RSP_0 -64 280),16) SEP (0x100004180,8); ((RSP_0 -64 280),16) SEP (0x100004188,8); ((RSP_0 -64 280),16) SEP (0x100004190,8); ((RSP_0 -64 280),16) SEP (0x100004198,8); ((RSP_0 -64 280),16) SEP (0x1000041a0,1); ((RSP_0 -64 280),16) SEP (0x1000041a8,8); ((RSP_0 -64 280),16) SEP (0x1000041b0,8); ((RSP_0 -64 280),16) SEP (0x1000041b8,8); ((RSP_0 -64 280),16) SEP (0x1000041c0,8); ((RSP_0 -64 280),16) SEP (0x1000041c8,1); ((RSP_0 -64 280),16) SEP (0x1000041d0,8); ((RSP_0 -64 280),16) SEP (0x1000041d8,8); ((RSP_0 -64 280),16) SEP ((bot(fun__fts_read_INODE64) +64 8),8); ((RSP_0 -64 280),16) SEP ((bot(fun__fts_read_INODE64) +64 24),8); ((RSP_0 -64 280),16) SEP ((bot(fun__fts_read_INODE64) +64 48),8); ((RSP_0 -64 280),16) SEP ((bot(fun__fts_read_INODE64) +64 56),4); ((RSP_0 -64 280),16) SEP ((bot(fun__fts_read_INODE64) +64 86),2); ((RSP_0 -64 280),16) SEP ((bot(fun__fts_read_INODE64) +64 88),4); ((RSP_0 -64 280),16) SEP ((bot(fun__fts_read_INODE64) +64 96),8); ((RSP_0 -64 280),16) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 280),16) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); ((RSP_0 -64 280),16) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000037cc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002eee: MOVAPD XMMWORD PTR [RBP - 272], XMM0 8"
 Post  "RAX = bot(fun_0x1000037cc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002ef6"
 Separations "((RSP_0 -64 264),8) SEP (bot(fun____error),4); ((RSP_0 -64 264),8) SEP (bot(fun__fts_read_INODE64),8); ((RSP_0 -64 264),8) SEP (RSI_0,8); ((RSP_0 -64 264),8) SEP ([0x100004018,8]_0,8); ((RSP_0 -64 264),8) SEP ([0x100004020,8]_0,4); ((RSP_0 -64 264),8) SEP (0x100004018,8); ((RSP_0 -64 264),8) SEP (0x100004020,8); ((RSP_0 -64 264),8) SEP (0x100004180,8); ((RSP_0 -64 264),8) SEP (0x100004188,8); ((RSP_0 -64 264),8) SEP (0x100004190,8); ((RSP_0 -64 264),8) SEP (0x100004198,8); ((RSP_0 -64 264),8) SEP (0x1000041a0,1); ((RSP_0 -64 264),8) SEP (0x1000041a8,8); ((RSP_0 -64 264),8) SEP (0x1000041b0,8); ((RSP_0 -64 264),8) SEP (0x1000041b8,8); ((RSP_0 -64 264),8) SEP (0x1000041c0,8); ((RSP_0 -64 264),8) SEP (0x1000041c8,1); ((RSP_0 -64 264),8) SEP (0x1000041d0,8); ((RSP_0 -64 264),8) SEP (0x1000041d8,8); ((RSP_0 -64 264),8) SEP ((bot(fun__fts_read_INODE64) +64 8),8); ((RSP_0 -64 264),8) SEP ((bot(fun__fts_read_INODE64) +64 24),8); ((RSP_0 -64 264),8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); ((RSP_0 -64 264),8) SEP ((bot(fun__fts_read_INODE64) +64 56),4); ((RSP_0 -64 264),8) SEP ((bot(fun__fts_read_INODE64) +64 86),2); ((RSP_0 -64 264),8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); ((RSP_0 -64 264),8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); ((RSP_0 -64 264),8) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 264),8) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); ((RSP_0 -64 264),8) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000037cc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002ef6: MOV QWORD PTR [RBP - 256], 0 11"
 Post  "RAX = bot(fun_0x1000037cc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002f01"
 Separations "((RSP_0 -64 280),2) SEP (bot(fun____error),4); ((RSP_0 -64 280),2) SEP (bot(fun__fts_read_INODE64),8); ((RSP_0 -64 280),2) SEP (RSI_0,8); ((RSP_0 -64 280),2) SEP ([0x100004018,8]_0,8); ((RSP_0 -64 280),2) SEP ([0x100004020,8]_0,4); ((RSP_0 -64 280),2) SEP (0x100004018,8); ((RSP_0 -64 280),2) SEP (0x100004020,8); ((RSP_0 -64 280),2) SEP (0x100004180,8); ((RSP_0 -64 280),2) SEP (0x100004188,8); ((RSP_0 -64 280),2) SEP (0x100004190,8); ((RSP_0 -64 280),2) SEP (0x100004198,8); ((RSP_0 -64 280),2) SEP (0x1000041a0,1); ((RSP_0 -64 280),2) SEP (0x1000041a8,8); ((RSP_0 -64 280),2) SEP (0x1000041b0,8); ((RSP_0 -64 280),2) SEP (0x1000041b8,8); ((RSP_0 -64 280),2) SEP (0x1000041c0,8); ((RSP_0 -64 280),2) SEP (0x1000041c8,1); ((RSP_0 -64 280),2) SEP (0x1000041d0,8); ((RSP_0 -64 280),2) SEP (0x1000041d8,8); ((RSP_0 -64 280),2) SEP ((bot(fun__fts_read_INODE64) +64 8),8); ((RSP_0 -64 280),2) SEP ((bot(fun__fts_read_INODE64) +64 24),8); ((RSP_0 -64 280),2) SEP ((bot(fun__fts_read_INODE64) +64 48),8); ((RSP_0 -64 280),2) SEP ((bot(fun__fts_read_INODE64) +64 56),4); ((RSP_0 -64 280),2) SEP ((bot(fun__fts_read_INODE64) +64 86),2); ((RSP_0 -64 280),2) SEP ((bot(fun__fts_read_INODE64) +64 88),4); ((RSP_0 -64 280),2) SEP ((bot(fun__fts_read_INODE64) +64 96),8); ((RSP_0 -64 280),2) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 280),2) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); ((RSP_0 -64 280),2) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4); ((RSP_0 -64 280),16) SEP (bot(fun____error),4); ((RSP_0 -64 280),16) SEP (RSI_0,8); ((RSP_0 -64 280),16) SEP ((bot(fun__fts_read_INODE64) +64 24),8); ((RSP_0 -64 280),16) SEP ((RSI_0 +64 8),8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000037cc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "100002f01: MOV WORD PTR [RBP - 272], 5 9"
 Post  "RAX = bot(fun_0x1000037cc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002f0a"
 Separations "((RSP_0 -64 268),4) SEP (bot(fun____error),4); ((RSP_0 -64 268),4) SEP (bot(fun__fts_read_INODE64),8); ((RSP_0 -64 268),4) SEP (RSI_0,8); ((RSP_0 -64 268),4) SEP ([0x100004018,8]_0,8); ((RSP_0 -64 268),4) SEP ([0x100004020,8]_0,4); ((RSP_0 -64 268),4) SEP (0x100004018,8); ((RSP_0 -64 268),4) SEP (0x100004020,8); ((RSP_0 -64 268),4) SEP (0x100004180,8); ((RSP_0 -64 268),4) SEP (0x100004188,8); ((RSP_0 -64 268),4) SEP (0x100004190,8); ((RSP_0 -64 268),4) SEP (0x100004198,8); ((RSP_0 -64 268),4) SEP (0x1000041a0,1); ((RSP_0 -64 268),4) SEP (0x1000041a8,8); ((RSP_0 -64 268),4) SEP (0x1000041b0,8); ((RSP_0 -64 268),4) SEP (0x1000041b8,8); ((RSP_0 -64 268),4) SEP (0x1000041c0,8); ((RSP_0 -64 268),4) SEP (0x1000041c8,1); ((RSP_0 -64 268),4) SEP (0x1000041d0,8); ((RSP_0 -64 268),4) SEP (0x1000041d8,8); ((RSP_0 -64 268),4) SEP ((bot(fun__fts_read_INODE64) +64 8),8); ((RSP_0 -64 268),4) SEP ((bot(fun__fts_read_INODE64) +64 24),8); ((RSP_0 -64 268),4) SEP ((bot(fun__fts_read_INODE64) +64 48),8); ((RSP_0 -64 268),4) SEP ((bot(fun__fts_read_INODE64) +64 56),4); ((RSP_0 -64 268),4) SEP ((bot(fun__fts_read_INODE64) +64 86),2); ((RSP_0 -64 268),4) SEP ((bot(fun__fts_read_INODE64) +64 88),4); ((RSP_0 -64 268),4) SEP ((bot(fun__fts_read_INODE64) +64 96),8); ((RSP_0 -64 268),4) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 268),4) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); ((RSP_0 -64 268),4) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000037cc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "100002f0a: MOV DWORD PTR [RBP - 260], 1 10"
 Post  "RAX = bot(fun_0x1000037cc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002f14"
 Separations "((bot(fun__fts_read_INODE64) +64 48),8) SEP (RSI_0,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (RSP_0,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x100004018,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x100004020,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x100004180,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x100004188,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x100004190,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x100004198,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x1000041a0,1); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x1000041a8,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x1000041b0,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x1000041b8,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x1000041c0,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x1000041c8,1); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x1000041d0,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x1000041d8,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSI_0 +64 8),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 8),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 16),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 24),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 32),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 40),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 48),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 52),4); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 64),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 72),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 76),4); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 80),4); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 84),4); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 88),4); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 92),4); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 104),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 108),4); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 264),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000037cc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "100002f14: MOV RDI, QWORD PTR [R12 + 48] 5"
 Post  "RAX = bot(fun_0x1000037cc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002f19"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000037cc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "100002f19: MOV ECX, 8 5"
 Post  "RAX = bot(fun_0x1000037cc) ; RCX = 8 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002f1e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000037cc) ; RCX = 8 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "100002f1e: LEA RSI, [RBP - 272] 7"
 Post  "RAX = bot(fun_0x1000037cc) ; RCX = 8 ; RSI = (RSP_0 -64 280) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002f25"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000037cc) ; RCX = 8 ; RSI = (RSP_0 -64 280) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "100002f25: LEA RDX, [RBP - 112] 4"
 Post  "RAX = bot(fun_0x1000037cc) ; RCX = 8 ; RDX = (RSP_0 -64 120) ; RSI = (RSP_0 -64 280) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002f29"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000037cc) ; RCX = 8 ; RDX = (RSP_0 -64 120) ; RSI = (RSP_0 -64 280) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "100002f29: XOR R8D, R8D 3"
 Post  "RAX = bot(fun_0x1000037cc) ; RCX = 8 ; RDX = (RSP_0 -64 120) ; RSI = (RSP_0 -64 280) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; R8 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002f2c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000037cc) ; RCX = 8 ; RDX = (RSP_0 -64 120) ; RSI = (RSP_0 -64 280) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; R8 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "100002f2c: ExternalCall fun__getattrlist 5"
 Post  "RAX = bot(fun__getattrlist) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 FunctionConstraints "PRESERVES fun__getattrlist {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004018,8];[0x100004020,8];[0x100004180,8];[0x100004188,8];[0x100004190,8];[0x100004198,8];[0x1000041a0,1];[0x1000041a8,8];[0x1000041b0,8];[0x1000041b8,8];[0x1000041c0,8];[0x1000041c8,1];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 76),4];[(RSP_0 -64 80),4];[(RSP_0 -64 84),4];[(RSP_0 -64 88),4];[(RSP_0 -64 92),4];[(RSP_0 -64 104),8];[(RSP_0 -64 108),4];[(RSP_0 -64 264),8];[(RSP_0 -64 280),16]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002f31"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__getattrlist) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "100002f31: CMP EAX, 18446744073709551615 3"
 Post  "RAX = bot(fun__getattrlist) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002f34"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__getattrlist) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "100002f34: JE 4294980806 6"
 Post  "RAX = bot(fun__getattrlist) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002a94, blockId == 44 ##
######################################
*)

htriple "ht_100002de7"
 Separations "((bot(fun__fts_read_INODE64) +64 96),8) SEP (RSI_0,8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (RSP_0,8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (0x100004018,8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (0x100004020,8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (0x100004180,8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (0x100004188,8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (0x100004190,8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (0x100004198,8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (0x1000041a0,1); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (0x1000041a8,8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (0x1000041b0,8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (0x1000041b8,8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (0x1000041c0,8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (0x1000041c8,1); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (0x1000041d0,8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (0x1000041d8,8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSI_0 +64 8),8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 8),8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 16),8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 24),8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 32),8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 40),8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 48),8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 52),4); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 64),8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 72),8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 76),4); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 80),4); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 84),4); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 88),4); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 92),4); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 104),8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 108),4); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 264),8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000037cc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002de7: MOV RAX, QWORD PTR [R12 + 96] 5"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002dec"
 Separations "((bot(fun__fts_read_INODE64) +64 8),8) SEP (RSI_0,8); ((bot(fun__fts_read_INODE64) +64 8),8) SEP (RSP_0,8); ((bot(fun__fts_read_INODE64) +64 8),8) SEP (0x100004018,8); ((bot(fun__fts_read_INODE64) +64 8),8) SEP (0x100004020,8); ((bot(fun__fts_read_INODE64) +64 8),8) SEP (0x100004180,8); ((bot(fun__fts_read_INODE64) +64 8),8) SEP (0x100004188,8); ((bot(fun__fts_read_INODE64) +64 8),8) SEP (0x100004190,8); ((bot(fun__fts_read_INODE64) +64 8),8) SEP (0x100004198,8); ((bot(fun__fts_read_INODE64) +64 8),8) SEP (0x1000041a0,1); ((bot(fun__fts_read_INODE64) +64 8),8) SEP (0x1000041a8,8); ((bot(fun__fts_read_INODE64) +64 8),8) SEP (0x1000041b0,8); ((bot(fun__fts_read_INODE64) +64 8),8) SEP (0x1000041b8,8); ((bot(fun__fts_read_INODE64) +64 8),8) SEP (0x1000041c0,8); ((bot(fun__fts_read_INODE64) +64 8),8) SEP (0x1000041c8,1); ((bot(fun__fts_read_INODE64) +64 8),8) SEP (0x1000041d0,8); ((bot(fun__fts_read_INODE64) +64 8),8) SEP (0x1000041d8,8); ((bot(fun__fts_read_INODE64) +64 8),8) SEP ((RSI_0 +64 8),8); ((bot(fun__fts_read_INODE64) +64 8),8) SEP ((RSP_0 -64 8),8); ((bot(fun__fts_read_INODE64) +64 8),8) SEP ((RSP_0 -64 16),8); ((bot(fun__fts_read_INODE64) +64 8),8) SEP ((RSP_0 -64 24),8); ((bot(fun__fts_read_INODE64) +64 8),8) SEP ((RSP_0 -64 32),8); ((bot(fun__fts_read_INODE64) +64 8),8) SEP ((RSP_0 -64 40),8); ((bot(fun__fts_read_INODE64) +64 8),8) SEP ((RSP_0 -64 48),8); ((bot(fun__fts_read_INODE64) +64 8),8) SEP ((RSP_0 -64 52),4); ((bot(fun__fts_read_INODE64) +64 8),8) SEP ((RSP_0 -64 64),8); ((bot(fun__fts_read_INODE64) +64 8),8) SEP ((RSP_0 -64 72),8); ((bot(fun__fts_read_INODE64) +64 8),8) SEP ((RSP_0 -64 76),4); ((bot(fun__fts_read_INODE64) +64 8),8) SEP ((RSP_0 -64 80),4); ((bot(fun__fts_read_INODE64) +64 8),8) SEP ((RSP_0 -64 84),4); ((bot(fun__fts_read_INODE64) +64 8),8) SEP ((RSP_0 -64 88),4); ((bot(fun__fts_read_INODE64) +64 8),8) SEP ((RSP_0 -64 92),4); ((bot(fun__fts_read_INODE64) +64 8),8) SEP ((RSP_0 -64 104),8); ((bot(fun__fts_read_INODE64) +64 8),8) SEP ((RSP_0 -64 108),4); ((bot(fun__fts_read_INODE64) +64 8),8) SEP ((RSP_0 -64 264),8); ((bot(fun__fts_read_INODE64) +64 8),8) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002dec: MOV RCX, QWORD PTR [R12 + 8] 5"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002df1"
 Separations "((bot(fun__fts_read_INODE64) +64 24),8) SEP (RSI_0,8); ((bot(fun__fts_read_INODE64) +64 24),8) SEP (RSP_0,8); ((bot(fun__fts_read_INODE64) +64 24),8) SEP (0x100004018,8); ((bot(fun__fts_read_INODE64) +64 24),8) SEP (0x100004020,8); ((bot(fun__fts_read_INODE64) +64 24),8) SEP (0x100004180,8); ((bot(fun__fts_read_INODE64) +64 24),8) SEP (0x100004188,8); ((bot(fun__fts_read_INODE64) +64 24),8) SEP (0x100004190,8); ((bot(fun__fts_read_INODE64) +64 24),8) SEP (0x100004198,8); ((bot(fun__fts_read_INODE64) +64 24),8) SEP (0x1000041a0,1); ((bot(fun__fts_read_INODE64) +64 24),8) SEP (0x1000041a8,8); ((bot(fun__fts_read_INODE64) +64 24),8) SEP (0x1000041b0,8); ((bot(fun__fts_read_INODE64) +64 24),8) SEP (0x1000041b8,8); ((bot(fun__fts_read_INODE64) +64 24),8) SEP (0x1000041c0,8); ((bot(fun__fts_read_INODE64) +64 24),8) SEP (0x1000041c8,1); ((bot(fun__fts_read_INODE64) +64 24),8) SEP (0x1000041d0,8); ((bot(fun__fts_read_INODE64) +64 24),8) SEP (0x1000041d8,8); ((bot(fun__fts_read_INODE64) +64 24),8) SEP ((RSI_0 +64 8),8); ((bot(fun__fts_read_INODE64) +64 24),8) SEP ((RSP_0 -64 8),8); ((bot(fun__fts_read_INODE64) +64 24),8) SEP ((RSP_0 -64 16),8); ((bot(fun__fts_read_INODE64) +64 24),8) SEP ((RSP_0 -64 24),8); ((bot(fun__fts_read_INODE64) +64 24),8) SEP ((RSP_0 -64 32),8); ((bot(fun__fts_read_INODE64) +64 24),8) SEP ((RSP_0 -64 40),8); ((bot(fun__fts_read_INODE64) +64 24),8) SEP ((RSP_0 -64 48),8); ((bot(fun__fts_read_INODE64) +64 24),8) SEP ((RSP_0 -64 52),4); ((bot(fun__fts_read_INODE64) +64 24),8) SEP ((RSP_0 -64 64),8); ((bot(fun__fts_read_INODE64) +64 24),8) SEP ((RSP_0 -64 72),8); ((bot(fun__fts_read_INODE64) +64 24),8) SEP ((RSP_0 -64 76),4); ((bot(fun__fts_read_INODE64) +64 24),8) SEP ((RSP_0 -64 80),4); ((bot(fun__fts_read_INODE64) +64 24),8) SEP ((RSP_0 -64 84),4); ((bot(fun__fts_read_INODE64) +64 24),8) SEP ((RSP_0 -64 88),4); ((bot(fun__fts_read_INODE64) +64 24),8) SEP ((RSP_0 -64 92),4); ((bot(fun__fts_read_INODE64) +64 24),8) SEP ((RSP_0 -64 104),8); ((bot(fun__fts_read_INODE64) +64 24),8) SEP ((RSP_0 -64 108),4); ((bot(fun__fts_read_INODE64) +64 24),8) SEP ((RSP_0 -64 116),4); ((bot(fun__fts_read_INODE64) +64 24),8) SEP ((RSP_0 -64 264),8); ((bot(fun__fts_read_INODE64) +64 24),8) SEP ((RSP_0 -64 268),4); ((bot(fun__fts_read_INODE64) +64 24),8) SEP ((RSP_0 -64 280),2); ((bot(fun__fts_read_INODE64) +64 24),8) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002df1: MOV RDX, QWORD PTR [R12 + 24] 5"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002df6"
 Separations ""
 Assertions  "((RAX +64 104),8) SEP (RSP_0,8); ((RAX +64 104),8) SEP ((RSP_0 -64 8),8); ((RAX +64 104),8) SEP ((RSP_0 -64 16),8); ((RAX +64 104),8) SEP ((RSP_0 -64 24),8); ((RAX +64 104),8) SEP ((RSP_0 -64 32),8); ((RAX +64 104),8) SEP ((RSP_0 -64 40),8); ((RAX +64 104),8) SEP ((RSP_0 -64 48),8); ((RAX +64 104),8) SEP ((RSP_0 -64 52),4); ((RAX +64 104),8) SEP ((RSP_0 -64 64),8); ((RAX +64 104),8) SEP ((RSP_0 -64 72),8); ((RAX +64 104),8) SEP ((RSP_0 -64 76),4); ((RAX +64 104),8) SEP ((RSP_0 -64 80),4); ((RAX +64 104),8) SEP ((RSP_0 -64 84),4); ((RAX +64 104),8) SEP ((RSP_0 -64 88),4); ((RAX +64 104),8) SEP ((RSP_0 -64 92),4); ((RAX +64 104),8) SEP ((RSP_0 -64 104),8); ((RAX +64 104),8) SEP ((RSP_0 -64 108),4); ((RAX +64 104),8) SEP ((RSP_0 -64 264),8); ((RAX +64 104),8) SEP ((RSP_0 -64 280),16)"
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002df6: ADD RDX, QWORD PTR [RAX + 104] 4"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002dfa"
 Separations "((bot(fun__fts_read_INODE64) +64 24),8) SEP (RSI_0,8); ((bot(fun__fts_read_INODE64) +64 24),8) SEP (RSP_0,8); ((bot(fun__fts_read_INODE64) +64 24),8) SEP (0x100004018,8); ((bot(fun__fts_read_INODE64) +64 24),8) SEP (0x100004020,8); ((bot(fun__fts_read_INODE64) +64 24),8) SEP (0x100004180,8); ((bot(fun__fts_read_INODE64) +64 24),8) SEP (0x100004188,8); ((bot(fun__fts_read_INODE64) +64 24),8) SEP (0x100004190,8); ((bot(fun__fts_read_INODE64) +64 24),8) SEP (0x100004198,8); ((bot(fun__fts_read_INODE64) +64 24),8) SEP (0x1000041a0,1); ((bot(fun__fts_read_INODE64) +64 24),8) SEP (0x1000041a8,8); ((bot(fun__fts_read_INODE64) +64 24),8) SEP (0x1000041b0,8); ((bot(fun__fts_read_INODE64) +64 24),8) SEP (0x1000041b8,8); ((bot(fun__fts_read_INODE64) +64 24),8) SEP (0x1000041c0,8); ((bot(fun__fts_read_INODE64) +64 24),8) SEP (0x1000041c8,1); ((bot(fun__fts_read_INODE64) +64 24),8) SEP (0x1000041d0,8); ((bot(fun__fts_read_INODE64) +64 24),8) SEP (0x1000041d8,8); ((bot(fun__fts_read_INODE64) +64 24),8) SEP ((RSI_0 +64 8),8); ((bot(fun__fts_read_INODE64) +64 24),8) SEP ((RSP_0 -64 8),8); ((bot(fun__fts_read_INODE64) +64 24),8) SEP ((RSP_0 -64 16),8); ((bot(fun__fts_read_INODE64) +64 24),8) SEP ((RSP_0 -64 24),8); ((bot(fun__fts_read_INODE64) +64 24),8) SEP ((RSP_0 -64 32),8); ((bot(fun__fts_read_INODE64) +64 24),8) SEP ((RSP_0 -64 40),8); ((bot(fun__fts_read_INODE64) +64 24),8) SEP ((RSP_0 -64 48),8); ((bot(fun__fts_read_INODE64) +64 24),8) SEP ((RSP_0 -64 52),4); ((bot(fun__fts_read_INODE64) +64 24),8) SEP ((RSP_0 -64 64),8); ((bot(fun__fts_read_INODE64) +64 24),8) SEP ((RSP_0 -64 72),8); ((bot(fun__fts_read_INODE64) +64 24),8) SEP ((RSP_0 -64 76),4); ((bot(fun__fts_read_INODE64) +64 24),8) SEP ((RSP_0 -64 80),4); ((bot(fun__fts_read_INODE64) +64 24),8) SEP ((RSP_0 -64 84),4); ((bot(fun__fts_read_INODE64) +64 24),8) SEP ((RSP_0 -64 88),4); ((bot(fun__fts_read_INODE64) +64 24),8) SEP ((RSP_0 -64 92),4); ((bot(fun__fts_read_INODE64) +64 24),8) SEP ((RSP_0 -64 104),8); ((bot(fun__fts_read_INODE64) +64 24),8) SEP ((RSP_0 -64 108),4); ((bot(fun__fts_read_INODE64) +64 24),8) SEP ((RSP_0 -64 116),4); ((bot(fun__fts_read_INODE64) +64 24),8) SEP ((RSP_0 -64 264),8); ((bot(fun__fts_read_INODE64) +64 24),8) SEP ((RSP_0 -64 268),4); ((bot(fun__fts_read_INODE64) +64 24),8) SEP ((RSP_0 -64 280),2); ((bot(fun__fts_read_INODE64) +64 24),8) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002dfa: MOV QWORD PTR [R12 + 24], RDX 5"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002dff"
 Separations ""
 Assertions  "((RCX +64 24),8) SEP (RSP_0,8); ((RCX +64 24),8) SEP ((RSP_0 -64 8),8); ((RCX +64 24),8) SEP ((RSP_0 -64 16),8); ((RCX +64 24),8) SEP ((RSP_0 -64 24),8); ((RCX +64 24),8) SEP ((RSP_0 -64 32),8); ((RCX +64 24),8) SEP ((RSP_0 -64 40),8); ((RCX +64 24),8) SEP ((RSP_0 -64 48),8); ((RCX +64 24),8) SEP ((RSP_0 -64 52),4); ((RCX +64 24),8) SEP ((RSP_0 -64 64),8); ((RCX +64 24),8) SEP ((RSP_0 -64 72),8); ((RCX +64 24),8) SEP ((RSP_0 -64 76),4); ((RCX +64 24),8) SEP ((RSP_0 -64 80),4); ((RCX +64 24),8) SEP ((RSP_0 -64 84),4); ((RCX +64 24),8) SEP ((RSP_0 -64 88),4); ((RCX +64 24),8) SEP ((RSP_0 -64 92),4); ((RCX +64 24),8) SEP ((RSP_0 -64 104),8); ((RCX +64 24),8) SEP ((RSP_0 -64 108),4); ((RCX +64 24),8) SEP ((RSP_0 -64 264),8); ((RCX +64 24),8) SEP ((RSP_0 -64 280),16)"
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002dff: ADD QWORD PTR [RCX + 24], RDX 4"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002e03"
 Separations "((bot(fun__fts_read_INODE64) +64 86),2) SEP (RSI_0,8); ((bot(fun__fts_read_INODE64) +64 86),2) SEP (RSP_0,8); ((bot(fun__fts_read_INODE64) +64 86),2) SEP (0x100004018,8); ((bot(fun__fts_read_INODE64) +64 86),2) SEP (0x100004020,8); ((bot(fun__fts_read_INODE64) +64 86),2) SEP (0x100004180,8); ((bot(fun__fts_read_INODE64) +64 86),2) SEP (0x100004188,8); ((bot(fun__fts_read_INODE64) +64 86),2) SEP (0x100004190,8); ((bot(fun__fts_read_INODE64) +64 86),2) SEP (0x100004198,8); ((bot(fun__fts_read_INODE64) +64 86),2) SEP (0x1000041a0,1); ((bot(fun__fts_read_INODE64) +64 86),2) SEP (0x1000041a8,8); ((bot(fun__fts_read_INODE64) +64 86),2) SEP (0x1000041b0,8); ((bot(fun__fts_read_INODE64) +64 86),2) SEP (0x1000041b8,8); ((bot(fun__fts_read_INODE64) +64 86),2) SEP (0x1000041c0,8); ((bot(fun__fts_read_INODE64) +64 86),2) SEP (0x1000041c8,1); ((bot(fun__fts_read_INODE64) +64 86),2) SEP (0x1000041d0,8); ((bot(fun__fts_read_INODE64) +64 86),2) SEP (0x1000041d8,8); ((bot(fun__fts_read_INODE64) +64 86),2) SEP ((RSI_0 +64 8),8); ((bot(fun__fts_read_INODE64) +64 86),2) SEP ((RSP_0 -64 8),8); ((bot(fun__fts_read_INODE64) +64 86),2) SEP ((RSP_0 -64 16),8); ((bot(fun__fts_read_INODE64) +64 86),2) SEP ((RSP_0 -64 24),8); ((bot(fun__fts_read_INODE64) +64 86),2) SEP ((RSP_0 -64 32),8); ((bot(fun__fts_read_INODE64) +64 86),2) SEP ((RSP_0 -64 40),8); ((bot(fun__fts_read_INODE64) +64 86),2) SEP ((RSP_0 -64 48),8); ((bot(fun__fts_read_INODE64) +64 86),2) SEP ((RSP_0 -64 52),4); ((bot(fun__fts_read_INODE64) +64 86),2) SEP ((RSP_0 -64 64),8); ((bot(fun__fts_read_INODE64) +64 86),2) SEP ((RSP_0 -64 72),8); ((bot(fun__fts_read_INODE64) +64 86),2) SEP ((RSP_0 -64 76),4); ((bot(fun__fts_read_INODE64) +64 86),2) SEP ((RSP_0 -64 80),4); ((bot(fun__fts_read_INODE64) +64 86),2) SEP ((RSP_0 -64 84),4); ((bot(fun__fts_read_INODE64) +64 86),2) SEP ((RSP_0 -64 88),4); ((bot(fun__fts_read_INODE64) +64 86),2) SEP ((RSP_0 -64 92),4); ((bot(fun__fts_read_INODE64) +64 86),2) SEP ((RSP_0 -64 104),8); ((bot(fun__fts_read_INODE64) +64 86),2) SEP ((RSP_0 -64 108),4); ((bot(fun__fts_read_INODE64) +64 86),2) SEP ((RSP_0 -64 264),8); ((bot(fun__fts_read_INODE64) +64 86),2) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002e03: MOVSX EAX, WORD PTR [R12 + 86] 6"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002e09"
 Separations "((RSP_0 -64 80),4) SEP (bot(fun____error),4); ((RSP_0 -64 80),4) SEP (bot(fun__fts_read_INODE64),8); ((RSP_0 -64 80),4) SEP (RSI_0,8); ((RSP_0 -64 80),4) SEP ([0x100004018,8]_0,8); ((RSP_0 -64 80),4) SEP ([0x100004020,8]_0,4); ((RSP_0 -64 80),4) SEP (0x100004018,8); ((RSP_0 -64 80),4) SEP (0x100004020,8); ((RSP_0 -64 80),4) SEP (0x100004180,8); ((RSP_0 -64 80),4) SEP (0x100004188,8); ((RSP_0 -64 80),4) SEP (0x100004190,8); ((RSP_0 -64 80),4) SEP (0x100004198,8); ((RSP_0 -64 80),4) SEP (0x1000041a0,1); ((RSP_0 -64 80),4) SEP (0x1000041a8,8); ((RSP_0 -64 80),4) SEP (0x1000041b0,8); ((RSP_0 -64 80),4) SEP (0x1000041b8,8); ((RSP_0 -64 80),4) SEP (0x1000041c0,8); ((RSP_0 -64 80),4) SEP (0x1000041c8,1); ((RSP_0 -64 80),4) SEP (0x1000041d0,8); ((RSP_0 -64 80),4) SEP (0x1000041d8,8); ((RSP_0 -64 80),4) SEP ((bot(fun__fts_read_INODE64) +64 8),8); ((RSP_0 -64 80),4) SEP ((bot(fun__fts_read_INODE64) +64 24),8); ((RSP_0 -64 80),4) SEP ((bot(fun__fts_read_INODE64) +64 48),8); ((RSP_0 -64 80),4) SEP ((bot(fun__fts_read_INODE64) +64 56),4); ((RSP_0 -64 80),4) SEP ((bot(fun__fts_read_INODE64) +64 86),2); ((RSP_0 -64 80),4) SEP ((bot(fun__fts_read_INODE64) +64 88),4); ((RSP_0 -64 80),4) SEP ((bot(fun__fts_read_INODE64) +64 96),8); ((RSP_0 -64 80),4) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 80),4) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); ((RSP_0 -64 80),4) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002e09: CMP DWORD PTR [RBP - 72], EAX 3"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002e0c"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002e0c: JL 4294980810 6"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002a94, blockId == 45 ##
######################################
*)

htriple "ht_1000034ca"
 Separations "((bot(fun__fts_read_INODE64) +64 8),8) SEP (RSI_0,8); ((bot(fun__fts_read_INODE64) +64 8),8) SEP (RSP_0,8); ((bot(fun__fts_read_INODE64) +64 8),8) SEP (0x100004018,8); ((bot(fun__fts_read_INODE64) +64 8),8) SEP (0x100004020,8); ((bot(fun__fts_read_INODE64) +64 8),8) SEP (0x100004180,8); ((bot(fun__fts_read_INODE64) +64 8),8) SEP (0x100004188,8); ((bot(fun__fts_read_INODE64) +64 8),8) SEP (0x100004190,8); ((bot(fun__fts_read_INODE64) +64 8),8) SEP (0x100004198,8); ((bot(fun__fts_read_INODE64) +64 8),8) SEP (0x1000041a0,1); ((bot(fun__fts_read_INODE64) +64 8),8) SEP (0x1000041a8,8); ((bot(fun__fts_read_INODE64) +64 8),8) SEP (0x1000041b0,8); ((bot(fun__fts_read_INODE64) +64 8),8) SEP (0x1000041b8,8); ((bot(fun__fts_read_INODE64) +64 8),8) SEP (0x1000041c0,8); ((bot(fun__fts_read_INODE64) +64 8),8) SEP (0x1000041c8,1); ((bot(fun__fts_read_INODE64) +64 8),8) SEP (0x1000041d0,8); ((bot(fun__fts_read_INODE64) +64 8),8) SEP (0x1000041d8,8); ((bot(fun__fts_read_INODE64) +64 8),8) SEP ((RSI_0 +64 8),8); ((bot(fun__fts_read_INODE64) +64 8),8) SEP ((RSP_0 -64 8),8); ((bot(fun__fts_read_INODE64) +64 8),8) SEP ((RSP_0 -64 16),8); ((bot(fun__fts_read_INODE64) +64 8),8) SEP ((RSP_0 -64 24),8); ((bot(fun__fts_read_INODE64) +64 8),8) SEP ((RSP_0 -64 32),8); ((bot(fun__fts_read_INODE64) +64 8),8) SEP ((RSP_0 -64 40),8); ((bot(fun__fts_read_INODE64) +64 8),8) SEP ((RSP_0 -64 48),8); ((bot(fun__fts_read_INODE64) +64 8),8) SEP ((RSP_0 -64 52),4); ((bot(fun__fts_read_INODE64) +64 8),8) SEP ((RSP_0 -64 64),8); ((bot(fun__fts_read_INODE64) +64 8),8) SEP ((RSP_0 -64 72),8); ((bot(fun__fts_read_INODE64) +64 8),8) SEP ((RSP_0 -64 76),4); ((bot(fun__fts_read_INODE64) +64 8),8) SEP ((RSP_0 -64 80),4); ((bot(fun__fts_read_INODE64) +64 8),8) SEP ((RSP_0 -64 84),4); ((bot(fun__fts_read_INODE64) +64 8),8) SEP ((RSP_0 -64 88),4); ((bot(fun__fts_read_INODE64) +64 8),8) SEP ((RSP_0 -64 92),4); ((bot(fun__fts_read_INODE64) +64 8),8) SEP ((RSP_0 -64 104),8); ((bot(fun__fts_read_INODE64) +64 8),8) SEP ((RSP_0 -64 108),4); ((bot(fun__fts_read_INODE64) +64 8),8) SEP ((RSP_0 -64 264),8); ((bot(fun__fts_read_INODE64) +64 8),8) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "1000034ca: MOV RAX, QWORD PTR [R12 + 8] 5"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000034cf"
 Separations ""
 Assertions  "((RAX +64 24),8) SEP (RSP_0,8); ((RAX +64 24),8) SEP ((RSP_0 -64 8),8); ((RAX +64 24),8) SEP ((RSP_0 -64 16),8); ((RAX +64 24),8) SEP ((RSP_0 -64 24),8); ((RAX +64 24),8) SEP ((RSP_0 -64 32),8); ((RAX +64 24),8) SEP ((RSP_0 -64 40),8); ((RAX +64 24),8) SEP ((RSP_0 -64 48),8); ((RAX +64 24),8) SEP ((RSP_0 -64 52),4); ((RAX +64 24),8) SEP ((RSP_0 -64 64),8); ((RAX +64 24),8) SEP ((RSP_0 -64 72),8); ((RAX +64 24),8) SEP ((RSP_0 -64 76),4); ((RAX +64 24),8) SEP ((RSP_0 -64 80),4); ((RAX +64 24),8) SEP ((RSP_0 -64 84),4); ((RAX +64 24),8) SEP ((RSP_0 -64 88),4); ((RAX +64 24),8) SEP ((RSP_0 -64 92),4); ((RAX +64 24),8) SEP ((RSP_0 -64 104),8); ((RAX +64 24),8) SEP ((RSP_0 -64 108),4); ((RAX +64 24),8) SEP ((RSP_0 -64 264),8); ((RAX +64 24),8) SEP ((RSP_0 -64 280),16)"
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "1000034cf: MOV RBX, QWORD PTR [RAX + 24] 4"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000034d3"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "1000034d3: MOV RDI, R13 3"
 Post  "RDI = bot(fun__fts_open_INODE64) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000034d6"
 Separations ""
 Assertions  ""
 Pre   "RDI = bot(fun__fts_open_INODE64) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "1000034d6: ExternalCall fun__fts_read_INODE64 5"
 Post  "RAX = bot(fun__fts_read_INODE64) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 FunctionConstraints "PRESERVES fun__fts_read_INODE64 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004018,8];[0x100004020,8];[0x100004180,8];[0x100004188,8];[0x100004190,8];[0x100004198,8];[0x1000041a0,1];[0x1000041a8,8];[0x1000041b0,8];[0x1000041b8,8];[0x1000041c0,8];[0x1000041c8,1];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 76),4];[(RSP_0 -64 80),4];[(RSP_0 -64 84),4];[(RSP_0 -64 88),4];[(RSP_0 -64 92),4];[(RSP_0 -64 104),8];[(RSP_0 -64 108),4];[(RSP_0 -64 264),8];[(RSP_0 -64 280),16]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000034db"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fts_read_INODE64) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "1000034db: MOV R12, RAX 3"
 Post  "RAX = bot(fun__fts_read_INODE64) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000034de"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fts_read_INODE64) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "1000034de: TEST RAX, RAX 3"
 Post  "RAX = bot(fun__fts_read_INODE64) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000034e1"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fts_read_INODE64) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "1000034e1: JNE 4294978958 6"
 Post  "RAX = bot(fun__fts_read_INODE64) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002a94, blockId == 46 ##
######################################
*)

htriple "ht_100002e12"
 Separations "((bot(fun__fts_read_INODE64) +64 24),8) SEP (RSI_0,8); ((bot(fun__fts_read_INODE64) +64 24),8) SEP (RSP_0,8); ((bot(fun__fts_read_INODE64) +64 24),8) SEP (0x100004018,8); ((bot(fun__fts_read_INODE64) +64 24),8) SEP (0x100004020,8); ((bot(fun__fts_read_INODE64) +64 24),8) SEP (0x100004180,8); ((bot(fun__fts_read_INODE64) +64 24),8) SEP (0x100004188,8); ((bot(fun__fts_read_INODE64) +64 24),8) SEP (0x100004190,8); ((bot(fun__fts_read_INODE64) +64 24),8) SEP (0x100004198,8); ((bot(fun__fts_read_INODE64) +64 24),8) SEP (0x1000041a0,1); ((bot(fun__fts_read_INODE64) +64 24),8) SEP (0x1000041a8,8); ((bot(fun__fts_read_INODE64) +64 24),8) SEP (0x1000041b0,8); ((bot(fun__fts_read_INODE64) +64 24),8) SEP (0x1000041b8,8); ((bot(fun__fts_read_INODE64) +64 24),8) SEP (0x1000041c0,8); ((bot(fun__fts_read_INODE64) +64 24),8) SEP (0x1000041c8,1); ((bot(fun__fts_read_INODE64) +64 24),8) SEP (0x1000041d0,8); ((bot(fun__fts_read_INODE64) +64 24),8) SEP (0x1000041d8,8); ((bot(fun__fts_read_INODE64) +64 24),8) SEP ((RSI_0 +64 8),8); ((bot(fun__fts_read_INODE64) +64 24),8) SEP ((RSP_0 -64 8),8); ((bot(fun__fts_read_INODE64) +64 24),8) SEP ((RSP_0 -64 16),8); ((bot(fun__fts_read_INODE64) +64 24),8) SEP ((RSP_0 -64 24),8); ((bot(fun__fts_read_INODE64) +64 24),8) SEP ((RSP_0 -64 32),8); ((bot(fun__fts_read_INODE64) +64 24),8) SEP ((RSP_0 -64 40),8); ((bot(fun__fts_read_INODE64) +64 24),8) SEP ((RSP_0 -64 48),8); ((bot(fun__fts_read_INODE64) +64 24),8) SEP ((RSP_0 -64 52),4); ((bot(fun__fts_read_INODE64) +64 24),8) SEP ((RSP_0 -64 64),8); ((bot(fun__fts_read_INODE64) +64 24),8) SEP ((RSP_0 -64 72),8); ((bot(fun__fts_read_INODE64) +64 24),8) SEP ((RSP_0 -64 76),4); ((bot(fun__fts_read_INODE64) +64 24),8) SEP ((RSP_0 -64 80),4); ((bot(fun__fts_read_INODE64) +64 24),8) SEP ((RSP_0 -64 84),4); ((bot(fun__fts_read_INODE64) +64 24),8) SEP ((RSP_0 -64 88),4); ((bot(fun__fts_read_INODE64) +64 24),8) SEP ((RSP_0 -64 92),4); ((bot(fun__fts_read_INODE64) +64 24),8) SEP ((RSP_0 -64 104),8); ((bot(fun__fts_read_INODE64) +64 24),8) SEP ((RSP_0 -64 108),4); ((bot(fun__fts_read_INODE64) +64 24),8) SEP ((RSP_0 -64 116),4); ((bot(fun__fts_read_INODE64) +64 24),8) SEP ((RSP_0 -64 264),8); ((bot(fun__fts_read_INODE64) +64 24),8) SEP ((RSP_0 -64 268),4); ((bot(fun__fts_read_INODE64) +64 24),8) SEP ((RSP_0 -64 280),2); ((bot(fun__fts_read_INODE64) +64 24),8) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002e12: MOV RAX, QWORD PTR [R12 + 24] 5"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002e17"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002e17: CQO  2"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002e19"
 Separations "((RSP_0 -64 104),8) SEP (bot(fun____error),4); ((RSP_0 -64 104),8) SEP (bot(fun__fts_read_INODE64),8); ((RSP_0 -64 104),8) SEP (RSI_0,8); ((RSP_0 -64 104),8) SEP ([0x100004018,8]_0,8); ((RSP_0 -64 104),8) SEP ([0x100004020,8]_0,4); ((RSP_0 -64 104),8) SEP (0x100004018,8); ((RSP_0 -64 104),8) SEP (0x100004020,8); ((RSP_0 -64 104),8) SEP (0x100004180,8); ((RSP_0 -64 104),8) SEP (0x100004188,8); ((RSP_0 -64 104),8) SEP (0x100004190,8); ((RSP_0 -64 104),8) SEP (0x100004198,8); ((RSP_0 -64 104),8) SEP (0x1000041a0,1); ((RSP_0 -64 104),8) SEP (0x1000041a8,8); ((RSP_0 -64 104),8) SEP (0x1000041b0,8); ((RSP_0 -64 104),8) SEP (0x1000041b8,8); ((RSP_0 -64 104),8) SEP (0x1000041c0,8); ((RSP_0 -64 104),8) SEP (0x1000041c8,1); ((RSP_0 -64 104),8) SEP (0x1000041d0,8); ((RSP_0 -64 104),8) SEP (0x1000041d8,8); ((RSP_0 -64 104),8) SEP ((bot(fun__fts_read_INODE64) +64 8),8); ((RSP_0 -64 104),8) SEP ((bot(fun__fts_read_INODE64) +64 24),8); ((RSP_0 -64 104),8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); ((RSP_0 -64 104),8) SEP ((bot(fun__fts_read_INODE64) +64 56),4); ((RSP_0 -64 104),8) SEP ((bot(fun__fts_read_INODE64) +64 86),2); ((RSP_0 -64 104),8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); ((RSP_0 -64 104),8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); ((RSP_0 -64 104),8) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 104),8) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); ((RSP_0 -64 104),8) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002e19: IDIV QWORD PTR [RBP - 96] 4"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002e1d"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002e1d: CMP RDX, 1 4"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002e21"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002e21: SBB RAX, 18446744073709551615 4"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002e25"
 Separations "((RSP_0 -64 52),4) SEP (bot(fun____error),4); ((RSP_0 -64 52),4) SEP (bot(fun__fts_read_INODE64),8); ((RSP_0 -64 52),4) SEP (RSI_0,8); ((RSP_0 -64 52),4) SEP ([0x100004018,8]_0,8); ((RSP_0 -64 52),4) SEP ([0x100004020,8]_0,4); ((RSP_0 -64 52),4) SEP (0x100004018,8); ((RSP_0 -64 52),4) SEP (0x100004020,8); ((RSP_0 -64 52),4) SEP (0x100004180,8); ((RSP_0 -64 52),4) SEP (0x100004188,8); ((RSP_0 -64 52),4) SEP (0x100004190,8); ((RSP_0 -64 52),4) SEP (0x100004198,8); ((RSP_0 -64 52),4) SEP (0x1000041a0,1); ((RSP_0 -64 52),4) SEP (0x1000041a8,8); ((RSP_0 -64 52),4) SEP (0x1000041b0,8); ((RSP_0 -64 52),4) SEP (0x1000041b8,8); ((RSP_0 -64 52),4) SEP (0x1000041c0,8); ((RSP_0 -64 52),4) SEP (0x1000041c8,1); ((RSP_0 -64 52),4) SEP (0x1000041d0,8); ((RSP_0 -64 52),4) SEP (0x1000041d8,8); ((RSP_0 -64 52),4) SEP ((bot(fun__fts_read_INODE64) +64 8),8); ((RSP_0 -64 52),4) SEP ((bot(fun__fts_read_INODE64) +64 24),8); ((RSP_0 -64 52),4) SEP ((bot(fun__fts_read_INODE64) +64 48),8); ((RSP_0 -64 52),4) SEP ((bot(fun__fts_read_INODE64) +64 56),4); ((RSP_0 -64 52),4) SEP ((bot(fun__fts_read_INODE64) +64 86),2); ((RSP_0 -64 52),4) SEP ((bot(fun__fts_read_INODE64) +64 88),4); ((RSP_0 -64 52),4) SEP ((bot(fun__fts_read_INODE64) +64 96),8); ((RSP_0 -64 52),4) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 52),4) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); ((RSP_0 -64 52),4) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002e25: CMP DWORD PTR [RBP - 44], 0 4"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002e29"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002e29: JE 4294979783 6"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002a94, blockId == 47 ##
######################################
*)

htriple "ht_100002e2f"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002e2f: XORPS XMM0, XMM0 3"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002e32"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002e32: CVTSI2SD XMM0, RAX 5"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002e37"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002e37: ExternalCall fun_0x100003895 5"
 Post  "RAX = bot(fun_0x100003895) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 FunctionConstraints "PRESERVES fun_0x100003895 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004018,8];[0x100004020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 76),4];[(RSP_0 -64 80),4];[(RSP_0 -64 84),4];[(RSP_0 -64 88),4];[(RSP_0 -64 92),4];[(RSP_0 -64 104),8];[(RSP_0 -64 108),4];[(RSP_0 -64 264),8];[(RSP_0 -64 280),16]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002e3c"
 Separations "((bot(fun__fts_read_INODE64) +64 48),8) SEP (RSI_0,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (RSP_0,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x100004018,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x100004020,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x100004180,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x100004188,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x100004190,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x100004198,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x1000041a0,1); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x1000041a8,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x1000041b0,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x1000041b8,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x1000041c0,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x1000041c8,1); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x1000041d0,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x1000041d8,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSI_0 +64 8),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 8),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 16),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 24),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 32),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 40),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 48),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 52),4); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 64),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 72),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 76),4); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 80),4); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 84),4); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 88),4); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 92),4); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 104),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 108),4); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 264),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100003895) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002e3c: MOV RSI, QWORD PTR [R12 + 48] 5"
 Post  "RAX = bot(fun_0x100003895) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002e41"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100003895) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002e41: LEA RDI, [RIP + 3978] 7"
 Post  "RAX = bot(fun_0x100003895) ; RDI = 0x100003dd2 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002e48"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100003895) ; RDI = 0x100003dd2 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002e48: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RDI = 0x100003dd2 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002e4a"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RDI = 0x100003dd2 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002e4a: ExternalCall fun__printf 5"
 Post  "RAX = bot(fun__printf) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 FunctionConstraints "PRESERVES fun__printf {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004018,8];[0x100004020,8];[0x100004180,8];[0x100004188,8];[0x100004190,8];[0x100004198,8];[0x1000041a0,1];[0x1000041a8,8];[0x1000041b0,8];[0x1000041b8,8];[0x1000041c0,8];[0x1000041c8,1];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 76),4];[(RSP_0 -64 80),4];[(RSP_0 -64 84),4];[(RSP_0 -64 88),4];[(RSP_0 -64 92),4];[(RSP_0 -64 104),8];[(RSP_0 -64 108),4];[(RSP_0 -64 264),8];[(RSP_0 -64 280),16]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002e4f"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__printf) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002e4f: JMP 4294980810 5"
 Post  "RAX = bot(fun__printf) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002a94, blockId == 48 ##
######################################
*)

htriple "ht_1000030c7"
 Separations "((bot(fun__fts_read_INODE64) +64 48),8) SEP (RSI_0,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (RSP_0,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x100004018,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x100004020,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x100004180,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x100004188,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x100004190,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x100004198,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x1000041a0,1); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x1000041a8,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x1000041b0,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x1000041b8,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x1000041c0,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x1000041c8,1); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x1000041d0,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x1000041d8,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSI_0 +64 8),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 8),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 16),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 24),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 32),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 40),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 48),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 52),4); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 64),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 72),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 76),4); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 80),4); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 84),4); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 88),4); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 92),4); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 104),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 108),4); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 264),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "1000030c7: MOV RDX, QWORD PTR [R12 + 48] 5"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000030cc"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "1000030cc: LEA RDI, [RIP + 3332] 7"
 Post  "RDI = 0x100003dd7 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000030d3"
 Separations ""
 Assertions  ""
 Pre   "RDI = 0x100003dd7 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "1000030d3: MOV RSI, RAX 3"
 Post  "RDI = 0x100003dd7 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000030d6"
 Separations ""
 Assertions  ""
 Pre   "RDI = 0x100003dd7 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "1000030d6: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RDI = 0x100003dd7 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000030d8"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RDI = 0x100003dd7 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "1000030d8: ExternalCall fun__printf 5"
 Post  "RAX = bot(fun__printf) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 FunctionConstraints "PRESERVES fun__printf {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004018,8];[0x100004020,8];[0x100004180,8];[0x100004188,8];[0x100004190,8];[0x100004198,8];[0x1000041a0,1];[0x1000041a8,8];[0x1000041b0,8];[0x1000041b8,8];[0x1000041c0,8];[0x1000041c8,1];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 76),4];[(RSP_0 -64 80),4];[(RSP_0 -64 84),4];[(RSP_0 -64 88),4];[(RSP_0 -64 92),4];[(RSP_0 -64 104),8];[(RSP_0 -64 108),4];[(RSP_0 -64 264),8];[(RSP_0 -64 280),16]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000030dd"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__printf) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "1000030dd: JMP 4294980810 5"
 Post  "RAX = bot(fun__printf) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002a94, blockId == 49 ##
######################################
*)

htriple "ht_100002e9e"
 Separations "((bot(fun__fts_read_INODE64) +64 96),8) SEP (RSI_0,8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (RSP_0,8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (0x100004018,8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (0x100004020,8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (0x100004180,8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (0x100004188,8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (0x100004190,8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (0x100004198,8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (0x1000041a0,1); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (0x1000041a8,8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (0x1000041b0,8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (0x1000041b8,8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (0x1000041c0,8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (0x1000041c8,1); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (0x1000041d0,8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (0x1000041d8,8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSI_0 +64 8),8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 8),8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 16),8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 24),8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 32),8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 40),8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 48),8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 52),4); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 64),8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 72),8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 76),4); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 80),4); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 84),4); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 88),4); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 92),4); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 104),8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 108),4); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 264),8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000037cc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002e9e: MOV RBX, QWORD PTR [R12 + 96] 5"
 Post  "RAX = bot(fun_0x1000037cc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002ea3"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000037cc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002ea3: CMP WORD PTR [RBX + 6], 2 5"
 Post  "RAX = bot(fun_0x1000037cc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002ea8"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000037cc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002ea8: JB 4294980400 6"
 Post  "RAX = bot(fun_0x1000037cc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002a94, blockId == 50 ##
######################################
*)

htriple "ht_100002eae"
 Separations "(0x100004180,8) SEP (bot(fun____error),4); (0x100004180,8) SEP (bot(fun__fts_read_INODE64),8); (0x100004180,8) SEP (RSI_0,8); (0x100004180,8) SEP (RSP_0,8); (0x100004180,8) SEP ([0x100004018,8]_0,8); (0x100004180,8) SEP ([0x100004020,8]_0,4); (0x100004180,8) SEP ((bot(fun__fts_read_INODE64) +64 8),8); (0x100004180,8) SEP ((bot(fun__fts_read_INODE64) +64 24),8); (0x100004180,8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x100004180,8) SEP ((bot(fun__fts_read_INODE64) +64 56),4); (0x100004180,8) SEP ((bot(fun__fts_read_INODE64) +64 86),2); (0x100004180,8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x100004180,8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x100004180,8) SEP ((RSI_0 +64 8),8); (0x100004180,8) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); (0x100004180,8) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4); (0x100004180,8) SEP ((RSP_0 -64 8),8); (0x100004180,8) SEP ((RSP_0 -64 16),8); (0x100004180,8) SEP ((RSP_0 -64 24),8); (0x100004180,8) SEP ((RSP_0 -64 32),8); (0x100004180,8) SEP ((RSP_0 -64 40),8); (0x100004180,8) SEP ((RSP_0 -64 48),8); (0x100004180,8) SEP ((RSP_0 -64 52),4); (0x100004180,8) SEP ((RSP_0 -64 64),4); (0x100004180,8) SEP ((RSP_0 -64 64),8); (0x100004180,8) SEP ((RSP_0 -64 72),8); (0x100004180,8) SEP ((RSP_0 -64 76),4); (0x100004180,8) SEP ((RSP_0 -64 80),4); (0x100004180,8) SEP ((RSP_0 -64 84),4); (0x100004180,8) SEP ((RSP_0 -64 88),4); (0x100004180,8) SEP ((RSP_0 -64 92),4); (0x100004180,8) SEP ((RSP_0 -64 104),8); (0x100004180,8) SEP ((RSP_0 -64 108),4); (0x100004180,8) SEP ((RSP_0 -64 264),8); (0x100004180,8) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000037cc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002eae: MOV R14, QWORD PTR [RIP + 4811] 7"
 Post  "RAX = bot(fun_0x1000037cc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002eb5"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000037cc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002eb5: TEST R14, R14 3"
 Post  "RAX = bot(fun_0x1000037cc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002eb8"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000037cc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002eb8: JE 4294979476 6"
 Post  "RAX = bot(fun_0x1000037cc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002a94, blockId == 51 ##
######################################
*)

htriple "ht_100003330"
 Separations "((RSP_0 -64 72),1) SEP (bot(fun____error),4); ((RSP_0 -64 72),1) SEP (bot(fun__fts_read_INODE64),8); ((RSP_0 -64 72),1) SEP (RSI_0,8); ((RSP_0 -64 72),1) SEP ([0x100004018,8]_0,8); ((RSP_0 -64 72),1) SEP ([0x100004020,8]_0,4); ((RSP_0 -64 72),1) SEP (0x100004018,8); ((RSP_0 -64 72),1) SEP (0x100004020,8); ((RSP_0 -64 72),1) SEP (0x100004180,8); ((RSP_0 -64 72),1) SEP (0x100004188,8); ((RSP_0 -64 72),1) SEP (0x100004190,8); ((RSP_0 -64 72),1) SEP (0x100004198,8); ((RSP_0 -64 72),1) SEP (0x1000041a0,1); ((RSP_0 -64 72),1) SEP (0x1000041a8,8); ((RSP_0 -64 72),1) SEP (0x1000041b0,8); ((RSP_0 -64 72),1) SEP (0x1000041b8,8); ((RSP_0 -64 72),1) SEP (0x1000041c0,8); ((RSP_0 -64 72),1) SEP (0x1000041c8,1); ((RSP_0 -64 72),1) SEP (0x1000041d0,8); ((RSP_0 -64 72),1) SEP (0x1000041d8,8); ((RSP_0 -64 72),1) SEP ((bot(fun__fts_read_INODE64) +64 8),8); ((RSP_0 -64 72),1) SEP ((bot(fun__fts_read_INODE64) +64 24),8); ((RSP_0 -64 72),1) SEP ((bot(fun__fts_read_INODE64) +64 48),8); ((RSP_0 -64 72),1) SEP ((bot(fun__fts_read_INODE64) +64 56),4); ((RSP_0 -64 72),1) SEP ((bot(fun__fts_read_INODE64) +64 86),2); ((RSP_0 -64 72),1) SEP ((bot(fun__fts_read_INODE64) +64 88),4); ((RSP_0 -64 72),1) SEP ((bot(fun__fts_read_INODE64) +64 96),8); ((RSP_0 -64 72),1) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 72),1) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); ((RSP_0 -64 72),1) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4); ((RSP_0 -64 72),4) SEP (bot(fun____error),4); ((RSP_0 -64 72),4) SEP (RSI_0,8); ((RSP_0 -64 72),4) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 72),8) SEP (bot(fun____error),4); ((RSP_0 -64 72),8) SEP (RSI_0,8); ((RSP_0 -64 72),8) SEP ((RSI_0 +64 8),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100003330: CMP BYTE PTR [RBP - 64], 0 4"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003334"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100003334: JE 4294980415 2"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002a94, blockId == 52 ##
######################################
*)

htriple "ht_100002ebe"
 Separations "(0x100004190,8) SEP (bot(fun____error),4); (0x100004190,8) SEP (bot(fun__fts_read_INODE64),8); (0x100004190,8) SEP (RSI_0,8); (0x100004190,8) SEP (RSP_0,8); (0x100004190,8) SEP ([0x100004018,8]_0,8); (0x100004190,8) SEP ([0x100004020,8]_0,4); (0x100004190,8) SEP ((bot(fun__fts_read_INODE64) +64 8),8); (0x100004190,8) SEP ((bot(fun__fts_read_INODE64) +64 24),8); (0x100004190,8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x100004190,8) SEP ((bot(fun__fts_read_INODE64) +64 56),4); (0x100004190,8) SEP ((bot(fun__fts_read_INODE64) +64 86),2); (0x100004190,8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x100004190,8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x100004190,8) SEP ((RSI_0 +64 8),8); (0x100004190,8) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); (0x100004190,8) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4); (0x100004190,8) SEP ((RSP_0 -64 8),8); (0x100004190,8) SEP ((RSP_0 -64 16),8); (0x100004190,8) SEP ((RSP_0 -64 24),8); (0x100004190,8) SEP ((RSP_0 -64 32),8); (0x100004190,8) SEP ((RSP_0 -64 40),8); (0x100004190,8) SEP ((RSP_0 -64 48),8); (0x100004190,8) SEP ((RSP_0 -64 52),4); (0x100004190,8) SEP ((RSP_0 -64 64),4); (0x100004190,8) SEP ((RSP_0 -64 64),8); (0x100004190,8) SEP ((RSP_0 -64 72),8); (0x100004190,8) SEP ((RSP_0 -64 76),4); (0x100004190,8) SEP ((RSP_0 -64 80),4); (0x100004190,8) SEP ((RSP_0 -64 84),4); (0x100004190,8) SEP ((RSP_0 -64 88),4); (0x100004190,8) SEP ((RSP_0 -64 92),4); (0x100004190,8) SEP ((RSP_0 -64 104),8); (0x100004190,8) SEP ((RSP_0 -64 108),4); (0x100004190,8) SEP ((RSP_0 -64 264),8); (0x100004190,8) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000037cc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002ebe: MOV R15, QWORD PTR [RIP + 4811] 7"
 Post  "RAX = bot(fun_0x1000037cc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002ec5"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000037cc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002ec5: JMP 4294979535 5"
 Post  "RAX = bot(fun_0x1000037cc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002a94, blockId == 53 ##
######################################
*)

htriple "ht_100002f94"
 Separations "(0x100004190,8) SEP (bot(fun____error),4); (0x100004190,8) SEP (bot(fun__fts_read_INODE64),8); (0x100004190,8) SEP (RSI_0,8); (0x100004190,8) SEP (RSP_0,8); (0x100004190,8) SEP ([0x100004018,8]_0,8); (0x100004190,8) SEP ([0x100004020,8]_0,4); (0x100004190,8) SEP ((bot(fun__fts_read_INODE64) +64 8),8); (0x100004190,8) SEP ((bot(fun__fts_read_INODE64) +64 24),8); (0x100004190,8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x100004190,8) SEP ((bot(fun__fts_read_INODE64) +64 56),4); (0x100004190,8) SEP ((bot(fun__fts_read_INODE64) +64 86),2); (0x100004190,8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x100004190,8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x100004190,8) SEP ((RSI_0 +64 8),8); (0x100004190,8) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); (0x100004190,8) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4); (0x100004190,8) SEP ((RSP_0 -64 8),8); (0x100004190,8) SEP ((RSP_0 -64 16),8); (0x100004190,8) SEP ((RSP_0 -64 24),8); (0x100004190,8) SEP ((RSP_0 -64 32),8); (0x100004190,8) SEP ((RSP_0 -64 40),8); (0x100004190,8) SEP ((RSP_0 -64 48),8); (0x100004190,8) SEP ((RSP_0 -64 52),4); (0x100004190,8) SEP ((RSP_0 -64 64),4); (0x100004190,8) SEP ((RSP_0 -64 64),8); (0x100004190,8) SEP ((RSP_0 -64 72),8); (0x100004190,8) SEP ((RSP_0 -64 76),4); (0x100004190,8) SEP ((RSP_0 -64 80),4); (0x100004190,8) SEP ((RSP_0 -64 84),4); (0x100004190,8) SEP ((RSP_0 -64 88),4); (0x100004190,8) SEP ((RSP_0 -64 92),4); (0x100004190,8) SEP ((RSP_0 -64 104),8); (0x100004190,8) SEP ((RSP_0 -64 108),4); (0x100004190,8) SEP ((RSP_0 -64 264),8); (0x100004190,8) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000037cc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002f94: MOV QWORD PTR [RIP + 4593], 8192 11"
 Post  "RAX = bot(fun_0x1000037cc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004190,8] = 0x2000 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002f9f"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000037cc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004190,8] = 0x2000 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002f9f: MOV EDI, 65536 5"
 Post  "RAX = bot(fun_0x1000037cc) ; RDI = 0x10000 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004190,8] = 0x2000 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002fa4"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000037cc) ; RDI = 0x10000 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004190,8] = 0x2000 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002fa4: ExternalCall fun__malloc 5"
 Post  "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004190,8] = 0x2000 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 FunctionConstraints "PRESERVES fun__malloc {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004018,8];[0x100004020,8];[0x100004180,8];[0x100004188,8];[0x100004190,8];[0x100004198,8];[0x1000041a0,1];[0x1000041a8,8];[0x1000041b0,8];[0x1000041b8,8];[0x1000041c0,8];[0x1000041c8,1];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 76),4];[(RSP_0 -64 80),4];[(RSP_0 -64 84),4];[(RSP_0 -64 88),4];[(RSP_0 -64 92),4];[(RSP_0 -64 104),8];[(RSP_0 -64 108),4];[(RSP_0 -64 264),8];[(RSP_0 -64 280),16]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002fa9"
 Separations "(0x100004180,8) SEP (bot(fun____error),4); (0x100004180,8) SEP (bot(fun__fts_read_INODE64),8); (0x100004180,8) SEP (RSI_0,8); (0x100004180,8) SEP (RSP_0,8); (0x100004180,8) SEP ([0x100004018,8]_0,8); (0x100004180,8) SEP ([0x100004020,8]_0,4); (0x100004180,8) SEP ((bot(fun__fts_read_INODE64) +64 8),8); (0x100004180,8) SEP ((bot(fun__fts_read_INODE64) +64 24),8); (0x100004180,8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x100004180,8) SEP ((bot(fun__fts_read_INODE64) +64 56),4); (0x100004180,8) SEP ((bot(fun__fts_read_INODE64) +64 86),2); (0x100004180,8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x100004180,8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x100004180,8) SEP ((RSI_0 +64 8),8); (0x100004180,8) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); (0x100004180,8) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4); (0x100004180,8) SEP ((RSP_0 -64 8),8); (0x100004180,8) SEP ((RSP_0 -64 16),8); (0x100004180,8) SEP ((RSP_0 -64 24),8); (0x100004180,8) SEP ((RSP_0 -64 32),8); (0x100004180,8) SEP ((RSP_0 -64 40),8); (0x100004180,8) SEP ((RSP_0 -64 48),8); (0x100004180,8) SEP ((RSP_0 -64 52),4); (0x100004180,8) SEP ((RSP_0 -64 64),4); (0x100004180,8) SEP ((RSP_0 -64 64),8); (0x100004180,8) SEP ((RSP_0 -64 72),8); (0x100004180,8) SEP ((RSP_0 -64 76),4); (0x100004180,8) SEP ((RSP_0 -64 80),4); (0x100004180,8) SEP ((RSP_0 -64 84),4); (0x100004180,8) SEP ((RSP_0 -64 88),4); (0x100004180,8) SEP ((RSP_0 -64 92),4); (0x100004180,8) SEP ((RSP_0 -64 104),8); (0x100004180,8) SEP ((RSP_0 -64 108),4); (0x100004180,8) SEP ((RSP_0 -64 264),8); (0x100004180,8) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004190,8] = 0x2000 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002fa9: MOV QWORD PTR [RIP + 4560], RAX 7"
 Post  "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004180,8] = bot(fun__malloc) ; [0x100004190,8] = 0x2000 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002fb0"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004180,8] = bot(fun__malloc) ; [0x100004190,8] = 0x2000 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002fb0: TEST RAX, RAX 3"
 Post  "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004180,8] = bot(fun__malloc) ; [0x100004190,8] = 0x2000 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002fb3"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004180,8] = bot(fun__malloc) ; [0x100004190,8] = 0x2000 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002fb3: JE 4294981077 6"
 Post  "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004180,8] = bot(fun__malloc) ; [0x100004190,8] = 0x2000 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002a94, blockId == 54 ##
######################################
*)

htriple "ht_100002ee5"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__compat_mode) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002ee5: JMP 4294981021 5"
 Post  "RAX = bot(fun__compat_mode) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000359d"
 Separations "(bot(fun__fts_read_INODE64),8) SEP (RSI_0,8); (bot(fun__fts_read_INODE64),8) SEP (RSP_0,8); (bot(fun__fts_read_INODE64),8) SEP (0x100004018,8); (bot(fun__fts_read_INODE64),8) SEP (0x100004020,8); (bot(fun__fts_read_INODE64),8) SEP (0x100004180,8); (bot(fun__fts_read_INODE64),8) SEP (0x100004188,8); (bot(fun__fts_read_INODE64),8) SEP (0x100004190,8); (bot(fun__fts_read_INODE64),8) SEP (0x100004198,8); (bot(fun__fts_read_INODE64),8) SEP (0x1000041a0,1); (bot(fun__fts_read_INODE64),8) SEP (0x1000041a8,8); (bot(fun__fts_read_INODE64),8) SEP (0x1000041b0,8); (bot(fun__fts_read_INODE64),8) SEP (0x1000041b8,8); (bot(fun__fts_read_INODE64),8) SEP (0x1000041c0,8); (bot(fun__fts_read_INODE64),8) SEP (0x1000041c8,1); (bot(fun__fts_read_INODE64),8) SEP (0x1000041d0,8); (bot(fun__fts_read_INODE64),8) SEP (0x1000041d8,8); (bot(fun__fts_read_INODE64),8) SEP ((RSI_0 +64 8),8); (bot(fun__fts_read_INODE64),8) SEP ((RSP_0 -64 8),8); (bot(fun__fts_read_INODE64),8) SEP ((RSP_0 -64 16),8); (bot(fun__fts_read_INODE64),8) SEP ((RSP_0 -64 24),8); (bot(fun__fts_read_INODE64),8) SEP ((RSP_0 -64 32),8); (bot(fun__fts_read_INODE64),8) SEP ((RSP_0 -64 40),8); (bot(fun__fts_read_INODE64),8) SEP ((RSP_0 -64 48),8); (bot(fun__fts_read_INODE64),8) SEP ((RSP_0 -64 52),4); (bot(fun__fts_read_INODE64),8) SEP ((RSP_0 -64 64),8); (bot(fun__fts_read_INODE64),8) SEP ((RSP_0 -64 72),8); (bot(fun__fts_read_INODE64),8) SEP ((RSP_0 -64 76),4); (bot(fun__fts_read_INODE64),8) SEP ((RSP_0 -64 80),4); (bot(fun__fts_read_INODE64),8) SEP ((RSP_0 -64 84),4); (bot(fun__fts_read_INODE64),8) SEP ((RSP_0 -64 88),4); (bot(fun__fts_read_INODE64),8) SEP ((RSP_0 -64 92),4); (bot(fun__fts_read_INODE64),8) SEP ((RSP_0 -64 104),8); (bot(fun__fts_read_INODE64),8) SEP ((RSP_0 -64 108),4); (bot(fun__fts_read_INODE64),8) SEP ((RSP_0 -64 264),8); (bot(fun__fts_read_INODE64),8) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RAX = bot(fun__compat_mode) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "10000359d: MOV RAX, QWORD PTR [R12] 4"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000035a1"
 Separations "((bot(fun__fts_read_INODE64) +64 48),8) SEP (RSI_0,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (RSP_0,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x100004018,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x100004020,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x100004180,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x100004188,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x100004190,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x100004198,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x1000041a0,1); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x1000041a8,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x1000041b0,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x1000041b8,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x1000041c0,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x1000041c8,1); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x1000041d0,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x1000041d8,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSI_0 +64 8),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 8),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 16),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 24),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 32),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 40),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 48),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 52),4); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 64),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 72),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 76),4); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 80),4); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 84),4); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 88),4); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 92),4); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 104),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 108),4); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 264),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "1000035a1: MOV RDX, QWORD PTR [R12 + 48] 5"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000035a6"
 Separations ""
 Assertions  "((RAX +64 48),8) SEP (RSP_0,8); ((RAX +64 48),8) SEP ((RSP_0 -64 8),8); ((RAX +64 48),8) SEP ((RSP_0 -64 16),8); ((RAX +64 48),8) SEP ((RSP_0 -64 24),8); ((RAX +64 48),8) SEP ((RSP_0 -64 32),8); ((RAX +64 48),8) SEP ((RSP_0 -64 40),8); ((RAX +64 48),8) SEP ((RSP_0 -64 48),8); ((RAX +64 48),8) SEP ((RSP_0 -64 52),4); ((RAX +64 48),8) SEP ((RSP_0 -64 64),8); ((RAX +64 48),8) SEP ((RSP_0 -64 72),8); ((RAX +64 48),8) SEP ((RSP_0 -64 76),4); ((RAX +64 48),8) SEP ((RSP_0 -64 80),4); ((RAX +64 48),8) SEP ((RSP_0 -64 84),4); ((RAX +64 48),8) SEP ((RSP_0 -64 88),4); ((RAX +64 48),8) SEP ((RSP_0 -64 92),4); ((RAX +64 48),8) SEP ((RSP_0 -64 104),8); ((RAX +64 48),8) SEP ((RSP_0 -64 108),4); ((RAX +64 48),8) SEP ((RSP_0 -64 264),8); ((RAX +64 48),8) SEP ((RSP_0 -64 280),16)"
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "1000035a6: MOV RCX, QWORD PTR [RAX + 48] 4"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000035aa"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "1000035aa: LEA RSI, [RIP + 2110] 7"
 Post  "RSI = 0x100003def ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000035b1"
 Separations ""
 Assertions  ""
 Pre   "RSI = 0x100003def ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "1000035b1: MOV EDI, 1 5"
 Post  "RDI = 1 ; RSI = 0x100003def ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000035b6"
 Separations ""
 Assertions  ""
 Pre   "RDI = 1 ; RSI = 0x100003def ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "1000035b6: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RDI = 1 ; RSI = 0x100003def ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000035b8"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RDI = 1 ; RSI = 0x100003def ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "1000035b8: ExternalCall fun__errx 5"
 Post  "RAX = bot(fun__errx) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 FunctionConstraints "PRESERVES fun__errx {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004018,8];[0x100004020,8];[0x100004180,8];[0x100004188,8];[0x100004190,8];[0x100004198,8];[0x1000041a0,1];[0x1000041a8,8];[0x1000041b0,8];[0x1000041b8,8];[0x1000041c0,8];[0x1000041c8,1];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 76),4];[(RSP_0 -64 80),4];[(RSP_0 -64 84),4];[(RSP_0 -64 88),4];[(RSP_0 -64 92),4];[(RSP_0 -64 104),8];[(RSP_0 -64 108),4];[(RSP_0 -64 264),8];[(RSP_0 -64 280),16]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002a94, blockId == 55 ##
######################################
*)

htriple "ht_100002f3a"
 Separations "((RSP_0 -64 116),4) SEP (bot(fun____error),4); ((RSP_0 -64 116),4) SEP (RSI_0,8); ((RSP_0 -64 116),4) SEP ((bot(fun__fts_read_INODE64) +64 24),8); ((RSP_0 -64 116),4) SEP ((RSI_0 +64 8),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__getattrlist) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "100002f3a: CMP DWORD PTR [RBP - 108], 1 4"
 Post  "RAX = bot(fun__getattrlist) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002f3e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__getattrlist) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "100002f3e: JE 4294980806 6"
 Post  "RAX = bot(fun__getattrlist) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002a94, blockId == 56 ##
######################################
*)

htriple "ht_1000034c6"
 Separations "((RSP_0 -64 64),4) SEP (bot(fun____error),4); ((RSP_0 -64 64),4) SEP (RSI_0,8); ((RSP_0 -64 64),4) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 64),8) SEP (bot(fun____error),4); ((RSP_0 -64 64),8) SEP (bot(fun__fts_read_INODE64),8); ((RSP_0 -64 64),8) SEP (RSI_0,8); ((RSP_0 -64 64),8) SEP ([0x100004018,8]_0,8); ((RSP_0 -64 64),8) SEP ([0x100004020,8]_0,4); ((RSP_0 -64 64),8) SEP (0x100004018,8); ((RSP_0 -64 64),8) SEP (0x100004020,8); ((RSP_0 -64 64),8) SEP (0x100004180,8); ((RSP_0 -64 64),8) SEP (0x100004188,8); ((RSP_0 -64 64),8) SEP (0x100004190,8); ((RSP_0 -64 64),8) SEP (0x100004198,8); ((RSP_0 -64 64),8) SEP (0x1000041a0,1); ((RSP_0 -64 64),8) SEP (0x1000041a8,8); ((RSP_0 -64 64),8) SEP (0x1000041b0,8); ((RSP_0 -64 64),8) SEP (0x1000041b8,8); ((RSP_0 -64 64),8) SEP (0x1000041c0,8); ((RSP_0 -64 64),8) SEP (0x1000041c8,1); ((RSP_0 -64 64),8) SEP (0x1000041d0,8); ((RSP_0 -64 64),8) SEP (0x1000041d8,8); ((RSP_0 -64 64),8) SEP ((bot(fun__fts_read_INODE64) +64 8),8); ((RSP_0 -64 64),8) SEP ((bot(fun__fts_read_INODE64) +64 24),8); ((RSP_0 -64 64),8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); ((RSP_0 -64 64),8) SEP ((bot(fun__fts_read_INODE64) +64 56),4); ((RSP_0 -64 64),8) SEP ((bot(fun__fts_read_INODE64) +64 86),2); ((RSP_0 -64 64),8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); ((RSP_0 -64 64),8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 64),8) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); ((RSP_0 -64 64),8) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "1000034c6: MOV R13, QWORD PTR [RBP - 56] 4"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002a94, blockId == 57 ##
######################################
*)

htriple "ht_100002f44"
 Separations "((bot(fun__fts_read_INODE64) +64 96),8) SEP (RSI_0,8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (RSP_0,8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (0x100004018,8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (0x100004020,8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (0x100004180,8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (0x100004188,8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (0x100004190,8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (0x100004198,8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (0x1000041a0,1); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (0x1000041a8,8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (0x1000041b0,8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (0x1000041b8,8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (0x1000041c0,8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (0x1000041c8,1); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (0x1000041d0,8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (0x1000041d8,8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSI_0 +64 8),8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 8),8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 16),8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 24),8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 32),8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 40),8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 48),8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 52),4); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 64),8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 72),8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 76),4); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 80),4); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 84),4); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 88),4); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 92),4); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 104),8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 108),4); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 264),8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RAX = bot(fun__getattrlist) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "100002f44: MOV RBX, QWORD PTR [R12 + 96] 5"
 Post  "RAX = bot(fun__getattrlist) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002f49"
 Separations "(0x1000041a8,8) SEP (bot(fun____error),4); (0x1000041a8,8) SEP (bot(fun__fts_read_INODE64),8); (0x1000041a8,8) SEP (RSI_0,8); (0x1000041a8,8) SEP (RSP_0,8); (0x1000041a8,8) SEP ([0x100004018,8]_0,8); (0x1000041a8,8) SEP ([0x100004020,8]_0,4); (0x1000041a8,8) SEP ((bot(fun__fts_read_INODE64) +64 8),8); (0x1000041a8,8) SEP ((bot(fun__fts_read_INODE64) +64 24),8); (0x1000041a8,8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x1000041a8,8) SEP ((bot(fun__fts_read_INODE64) +64 56),4); (0x1000041a8,8) SEP ((bot(fun__fts_read_INODE64) +64 86),2); (0x1000041a8,8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x1000041a8,8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x1000041a8,8) SEP ((RSI_0 +64 8),8); (0x1000041a8,8) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); (0x1000041a8,8) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4); (0x1000041a8,8) SEP ((RSP_0 -64 8),8); (0x1000041a8,8) SEP ((RSP_0 -64 16),8); (0x1000041a8,8) SEP ((RSP_0 -64 24),8); (0x1000041a8,8) SEP ((RSP_0 -64 32),8); (0x1000041a8,8) SEP ((RSP_0 -64 40),8); (0x1000041a8,8) SEP ((RSP_0 -64 48),8); (0x1000041a8,8) SEP ((RSP_0 -64 52),4); (0x1000041a8,8) SEP ((RSP_0 -64 64),4); (0x1000041a8,8) SEP ((RSP_0 -64 64),8); (0x1000041a8,8) SEP ((RSP_0 -64 72),8); (0x1000041a8,8) SEP ((RSP_0 -64 76),4); (0x1000041a8,8) SEP ((RSP_0 -64 80),4); (0x1000041a8,8) SEP ((RSP_0 -64 84),4); (0x1000041a8,8) SEP ((RSP_0 -64 88),4); (0x1000041a8,8) SEP ((RSP_0 -64 92),4); (0x1000041a8,8) SEP ((RSP_0 -64 104),8); (0x1000041a8,8) SEP ((RSP_0 -64 108),4); (0x1000041a8,8) SEP ((RSP_0 -64 264),8); (0x1000041a8,8) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RAX = bot(fun__getattrlist) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "100002f49: MOV R13, QWORD PTR [RIP + 4696] 7"
 Post  "RAX = bot(fun__getattrlist) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002f50"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__getattrlist) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "100002f50: TEST R13, R13 3"
 Post  "RAX = bot(fun__getattrlist) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002f53"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__getattrlist) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "100002f53: JE 4294979810 6"
 Post  "RAX = bot(fun__getattrlist) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002a94, blockId == 58 ##
######################################
*)

htriple "ht_100002f59"
 Separations "(0x1000041b8,8) SEP (bot(fun____error),4); (0x1000041b8,8) SEP (bot(fun__fts_read_INODE64),8); (0x1000041b8,8) SEP (RSI_0,8); (0x1000041b8,8) SEP (RSP_0,8); (0x1000041b8,8) SEP ([0x100004018,8]_0,8); (0x1000041b8,8) SEP ([0x100004020,8]_0,4); (0x1000041b8,8) SEP ((bot(fun__fts_read_INODE64) +64 8),8); (0x1000041b8,8) SEP ((bot(fun__fts_read_INODE64) +64 24),8); (0x1000041b8,8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x1000041b8,8) SEP ((bot(fun__fts_read_INODE64) +64 56),4); (0x1000041b8,8) SEP ((bot(fun__fts_read_INODE64) +64 86),2); (0x1000041b8,8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x1000041b8,8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x1000041b8,8) SEP ((RSI_0 +64 8),8); (0x1000041b8,8) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); (0x1000041b8,8) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4); (0x1000041b8,8) SEP ((RSP_0 -64 8),8); (0x1000041b8,8) SEP ((RSP_0 -64 16),8); (0x1000041b8,8) SEP ((RSP_0 -64 24),8); (0x1000041b8,8) SEP ((RSP_0 -64 32),8); (0x1000041b8,8) SEP ((RSP_0 -64 40),8); (0x1000041b8,8) SEP ((RSP_0 -64 48),8); (0x1000041b8,8) SEP ((RSP_0 -64 52),4); (0x1000041b8,8) SEP ((RSP_0 -64 64),4); (0x1000041b8,8) SEP ((RSP_0 -64 64),8); (0x1000041b8,8) SEP ((RSP_0 -64 72),8); (0x1000041b8,8) SEP ((RSP_0 -64 76),4); (0x1000041b8,8) SEP ((RSP_0 -64 80),4); (0x1000041b8,8) SEP ((RSP_0 -64 84),4); (0x1000041b8,8) SEP ((RSP_0 -64 88),4); (0x1000041b8,8) SEP ((RSP_0 -64 92),4); (0x1000041b8,8) SEP ((RSP_0 -64 104),8); (0x1000041b8,8) SEP ((RSP_0 -64 108),4); (0x1000041b8,8) SEP ((RSP_0 -64 264),8); (0x1000041b8,8) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RAX = bot(fun__getattrlist) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "100002f59: MOV R14, QWORD PTR [RIP + 4696] 7"
 Post  "RAX = bot(fun__getattrlist) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002f60"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__getattrlist) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "100002f60: JMP 4294979869 5"
 Post  "RAX = bot(fun__getattrlist) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002a94, blockId == 59 ##
######################################
*)

htriple "ht_1000030e2"
 Separations "(0x1000041b8,8) SEP (bot(fun____error),4); (0x1000041b8,8) SEP (bot(fun__fts_read_INODE64),8); (0x1000041b8,8) SEP (RSI_0,8); (0x1000041b8,8) SEP (RSP_0,8); (0x1000041b8,8) SEP ([0x100004018,8]_0,8); (0x1000041b8,8) SEP ([0x100004020,8]_0,4); (0x1000041b8,8) SEP ((bot(fun__fts_read_INODE64) +64 8),8); (0x1000041b8,8) SEP ((bot(fun__fts_read_INODE64) +64 24),8); (0x1000041b8,8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x1000041b8,8) SEP ((bot(fun__fts_read_INODE64) +64 56),4); (0x1000041b8,8) SEP ((bot(fun__fts_read_INODE64) +64 86),2); (0x1000041b8,8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x1000041b8,8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x1000041b8,8) SEP ((RSI_0 +64 8),8); (0x1000041b8,8) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); (0x1000041b8,8) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4); (0x1000041b8,8) SEP ((RSP_0 -64 8),8); (0x1000041b8,8) SEP ((RSP_0 -64 16),8); (0x1000041b8,8) SEP ((RSP_0 -64 24),8); (0x1000041b8,8) SEP ((RSP_0 -64 32),8); (0x1000041b8,8) SEP ((RSP_0 -64 40),8); (0x1000041b8,8) SEP ((RSP_0 -64 48),8); (0x1000041b8,8) SEP ((RSP_0 -64 52),4); (0x1000041b8,8) SEP ((RSP_0 -64 64),4); (0x1000041b8,8) SEP ((RSP_0 -64 64),8); (0x1000041b8,8) SEP ((RSP_0 -64 72),8); (0x1000041b8,8) SEP ((RSP_0 -64 76),4); (0x1000041b8,8) SEP ((RSP_0 -64 80),4); (0x1000041b8,8) SEP ((RSP_0 -64 84),4); (0x1000041b8,8) SEP ((RSP_0 -64 88),4); (0x1000041b8,8) SEP ((RSP_0 -64 92),4); (0x1000041b8,8) SEP ((RSP_0 -64 104),8); (0x1000041b8,8) SEP ((RSP_0 -64 108),4); (0x1000041b8,8) SEP ((RSP_0 -64 264),8); (0x1000041b8,8) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RAX = bot(fun__getattrlist) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "1000030e2: MOV QWORD PTR [RIP + 4299], 8192 11"
 Post  "RAX = bot(fun__getattrlist) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000041b8,8] = 0x2000 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000030ed"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__getattrlist) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000041b8,8] = 0x2000 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "1000030ed: MOV EDI, 65536 5"
 Post  "RAX = bot(fun__getattrlist) ; RDI = 0x10000 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000041b8,8] = 0x2000 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000030f2"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__getattrlist) ; RDI = 0x10000 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000041b8,8] = 0x2000 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "1000030f2: ExternalCall fun__malloc 5"
 Post  "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000041b8,8] = 0x2000 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 FunctionConstraints "PRESERVES fun__malloc {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004018,8];[0x100004020,8];[0x100004180,8];[0x100004188,8];[0x100004190,8];[0x100004198,8];[0x1000041a0,1];[0x1000041a8,8];[0x1000041b0,8];[0x1000041b8,8];[0x1000041c0,8];[0x1000041c8,1];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 76),4];[(RSP_0 -64 80),4];[(RSP_0 -64 84),4];[(RSP_0 -64 88),4];[(RSP_0 -64 92),4];[(RSP_0 -64 104),8];[(RSP_0 -64 108),4];[(RSP_0 -64 264),8];[(RSP_0 -64 280),16]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000030f7"
 Separations "(0x1000041a8,8) SEP (bot(fun____error),4); (0x1000041a8,8) SEP (bot(fun__fts_read_INODE64),8); (0x1000041a8,8) SEP (RSI_0,8); (0x1000041a8,8) SEP (RSP_0,8); (0x1000041a8,8) SEP ([0x100004018,8]_0,8); (0x1000041a8,8) SEP ([0x100004020,8]_0,4); (0x1000041a8,8) SEP ((bot(fun__fts_read_INODE64) +64 8),8); (0x1000041a8,8) SEP ((bot(fun__fts_read_INODE64) +64 24),8); (0x1000041a8,8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x1000041a8,8) SEP ((bot(fun__fts_read_INODE64) +64 56),4); (0x1000041a8,8) SEP ((bot(fun__fts_read_INODE64) +64 86),2); (0x1000041a8,8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x1000041a8,8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x1000041a8,8) SEP ((RSI_0 +64 8),8); (0x1000041a8,8) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); (0x1000041a8,8) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4); (0x1000041a8,8) SEP ((RSP_0 -64 8),8); (0x1000041a8,8) SEP ((RSP_0 -64 16),8); (0x1000041a8,8) SEP ((RSP_0 -64 24),8); (0x1000041a8,8) SEP ((RSP_0 -64 32),8); (0x1000041a8,8) SEP ((RSP_0 -64 40),8); (0x1000041a8,8) SEP ((RSP_0 -64 48),8); (0x1000041a8,8) SEP ((RSP_0 -64 52),4); (0x1000041a8,8) SEP ((RSP_0 -64 64),4); (0x1000041a8,8) SEP ((RSP_0 -64 64),8); (0x1000041a8,8) SEP ((RSP_0 -64 72),8); (0x1000041a8,8) SEP ((RSP_0 -64 76),4); (0x1000041a8,8) SEP ((RSP_0 -64 80),4); (0x1000041a8,8) SEP ((RSP_0 -64 84),4); (0x1000041a8,8) SEP ((RSP_0 -64 88),4); (0x1000041a8,8) SEP ((RSP_0 -64 92),4); (0x1000041a8,8) SEP ((RSP_0 -64 104),8); (0x1000041a8,8) SEP ((RSP_0 -64 108),4); (0x1000041a8,8) SEP ((RSP_0 -64 264),8); (0x1000041a8,8) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000041b8,8] = 0x2000 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "1000030f7: MOV QWORD PTR [RIP + 4266], RAX 7"
 Post  "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000041a8,8] = bot(fun__malloc) ; [0x1000041b8,8] = 0x2000 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000030fe"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000041a8,8] = bot(fun__malloc) ; [0x1000041b8,8] = 0x2000 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "1000030fe: TEST RAX, RAX 3"
 Post  "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000041a8,8] = bot(fun__malloc) ; [0x1000041b8,8] = 0x2000 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003101"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000041a8,8] = bot(fun__malloc) ; [0x1000041b8,8] = 0x2000 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "100003101: JE 4294981086 6"
 Post  "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000041a8,8] = bot(fun__malloc) ; [0x1000041b8,8] = 0x2000 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002a94, blockId == 60 ##
######################################
*)

htriple "ht_100002fb9"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004180,8] = bot(fun__malloc) ; [0x100004190,8] = 0x2000 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002fb9: MOV R14, RAX 3"
 Post  "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004180,8] = bot(fun__malloc) ; [0x100004190,8] = 0x2000 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002fbc"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004180,8] = bot(fun__malloc) ; [0x100004190,8] = 0x2000 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002fbc: MOV ESI, 65536 5"
 Post  "RAX = bot(fun__malloc) ; RSI = 0x10000 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004180,8] = bot(fun__malloc) ; [0x100004190,8] = 0x2000 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002fc1"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RSI = 0x10000 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004180,8] = bot(fun__malloc) ; [0x100004190,8] = 0x2000 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002fc1: MOV RDI, RAX 3"
 Post  "RAX = bot(fun__malloc) ; RDI = bot(fun__malloc) ; RSI = 0x10000 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004180,8] = bot(fun__malloc) ; [0x100004190,8] = 0x2000 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002fc4"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RDI = bot(fun__malloc) ; RSI = 0x10000 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004180,8] = bot(fun__malloc) ; [0x100004190,8] = 0x2000 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002fc4: ExternalCall fun____bzero 5"
 Post  "RAX = bot(fun____bzero) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004180,8] = bot(fun__malloc) ; [0x100004190,8] = 0x2000 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 FunctionConstraints "PRESERVES fun____bzero {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004018,8];[0x100004020,8];[0x100004180,8];[0x100004188,8];[0x100004190,8];[0x100004198,8];[0x1000041a0,1];[0x1000041a8,8];[0x1000041b0,8];[0x1000041b8,8];[0x1000041c0,8];[0x1000041c8,1];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 76),4];[(RSP_0 -64 80),4];[(RSP_0 -64 84),4];[(RSP_0 -64 88),4];[(RSP_0 -64 92),4];[(RSP_0 -64 104),8];[(RSP_0 -64 108),4];[(RSP_0 -64 264),8];[(RSP_0 -64 280),16]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002fc9"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun____bzero) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004180,8] = bot(fun__malloc) ; [0x100004190,8] = 0x2000 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002fc9: MOV R15D, 8192 6"
 Post  "RAX = bot(fun____bzero) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R15 = 0x2000 ; R14 = bot(fun__malloc) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004180,8] = bot(fun__malloc) ; [0x100004190,8] = 0x2000 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002a94, blockId == 61 ##
######################################
*)

htriple "ht_1000035d5"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004180,8] = bot(fun__malloc) ; [0x100004190,8] = 0x2000 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "1000035d5: LEA RSI, [RIP + 2214] 7"
 Post  "RAX = bot(fun__malloc) ; RSI = 0x100003e82 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004180,8] = bot(fun__malloc) ; [0x100004190,8] = 0x2000 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000035dc"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RSI = 0x100003e82 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004180,8] = bot(fun__malloc) ; [0x100004190,8] = 0x2000 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "1000035dc: JMP 4294981093 2"
 Post  "RAX = bot(fun__malloc) ; RSI = 0x100003e82 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004180,8] = bot(fun__malloc) ; [0x100004190,8] = 0x2000 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002a94, blockId == 62 ##
######################################
*)

htriple "ht_100002fcf"
 Separations "(0x1000041a0,1) SEP (bot(fun____error),4); (0x1000041a0,1) SEP (bot(fun__fts_read_INODE64),8); (0x1000041a0,1) SEP (RSI_0,8); (0x1000041a0,1) SEP (RSP_0,8); (0x1000041a0,1) SEP ([0x100004018,8]_0,8); (0x1000041a0,1) SEP ([0x100004020,8]_0,4); (0x1000041a0,1) SEP ((bot(fun__fts_read_INODE64) +64 8),8); (0x1000041a0,1) SEP ((bot(fun__fts_read_INODE64) +64 24),8); (0x1000041a0,1) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x1000041a0,1) SEP ((bot(fun__fts_read_INODE64) +64 56),4); (0x1000041a0,1) SEP ((bot(fun__fts_read_INODE64) +64 86),2); (0x1000041a0,1) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x1000041a0,1) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x1000041a0,1) SEP ((RSI_0 +64 8),8); (0x1000041a0,1) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); (0x1000041a0,1) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4); (0x1000041a0,1) SEP ((RSP_0 -64 8),8); (0x1000041a0,1) SEP ((RSP_0 -64 16),8); (0x1000041a0,1) SEP ((RSP_0 -64 24),8); (0x1000041a0,1) SEP ((RSP_0 -64 32),8); (0x1000041a0,1) SEP ((RSP_0 -64 40),8); (0x1000041a0,1) SEP ((RSP_0 -64 48),8); (0x1000041a0,1) SEP ((RSP_0 -64 52),4); (0x1000041a0,1) SEP ((RSP_0 -64 64),4); (0x1000041a0,1) SEP ((RSP_0 -64 64),8); (0x1000041a0,1) SEP ((RSP_0 -64 72),8); (0x1000041a0,1) SEP ((RSP_0 -64 76),4); (0x1000041a0,1) SEP ((RSP_0 -64 80),4); (0x1000041a0,1) SEP ((RSP_0 -64 84),4); (0x1000041a0,1) SEP ((RSP_0 -64 88),4); (0x1000041a0,1) SEP ((RSP_0 -64 92),4); (0x1000041a0,1) SEP ((RSP_0 -64 104),8); (0x1000041a0,1) SEP ((RSP_0 -64 108),4); (0x1000041a0,1) SEP ((RSP_0 -64 264),8); (0x1000041a0,1) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002fcf: CMP BYTE PTR [RIP + 4554], 0 7"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002fd6"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002fd6: JNE 4294979775 6"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002a94, blockId == 63 ##
######################################
*)

htriple "ht_100002fdc"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002fdc: LEA R13, [R15 + R15] 4"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002fe0"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002fe0: LEA RAX, [R13 + R13 * 4] 5"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002fe5"
 Separations "(0x100004198,8) SEP (bot(fun____error),4); (0x100004198,8) SEP (bot(fun__fts_read_INODE64),8); (0x100004198,8) SEP (RSI_0,8); (0x100004198,8) SEP (RSP_0,8); (0x100004198,8) SEP ([0x100004018,8]_0,8); (0x100004198,8) SEP ([0x100004020,8]_0,4); (0x100004198,8) SEP ((bot(fun__fts_read_INODE64) +64 8),8); (0x100004198,8) SEP ((bot(fun__fts_read_INODE64) +64 24),8); (0x100004198,8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x100004198,8) SEP ((bot(fun__fts_read_INODE64) +64 56),4); (0x100004198,8) SEP ((bot(fun__fts_read_INODE64) +64 86),2); (0x100004198,8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x100004198,8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x100004198,8) SEP ((RSI_0 +64 8),8); (0x100004198,8) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); (0x100004198,8) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4); (0x100004198,8) SEP ((RSP_0 -64 8),8); (0x100004198,8) SEP ((RSP_0 -64 16),8); (0x100004198,8) SEP ((RSP_0 -64 24),8); (0x100004198,8) SEP ((RSP_0 -64 32),8); (0x100004198,8) SEP ((RSP_0 -64 40),8); (0x100004198,8) SEP ((RSP_0 -64 48),8); (0x100004198,8) SEP ((RSP_0 -64 52),4); (0x100004198,8) SEP ((RSP_0 -64 64),4); (0x100004198,8) SEP ((RSP_0 -64 64),8); (0x100004198,8) SEP ((RSP_0 -64 72),8); (0x100004198,8) SEP ((RSP_0 -64 76),4); (0x100004198,8) SEP ((RSP_0 -64 80),4); (0x100004198,8) SEP ((RSP_0 -64 84),4); (0x100004198,8) SEP ((RSP_0 -64 88),4); (0x100004198,8) SEP ((RSP_0 -64 92),4); (0x100004198,8) SEP ((RSP_0 -64 104),8); (0x100004198,8) SEP ((RSP_0 -64 108),4); (0x100004198,8) SEP ((RSP_0 -64 264),8); (0x100004198,8) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002fe5: CMP QWORD PTR [RIP + 4524], RAX 7"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002fec"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002fec: JBE 4294979775 6"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002a94, blockId == 64 ##
######################################
*)

htriple "ht_1000030bf"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "1000030bf: MOV R13, R15 3"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000030c2"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "1000030c2: JMP 4294980145 5"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002a94, blockId == 65 ##
######################################
*)

htriple "ht_100002ff2"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002ff2: SHL R15, 4 4"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002ff6"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002ff6: MOV RDI, R15 3"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002ff9"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002ff9: ExternalCall fun__malloc 5"
 Post  "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 FunctionConstraints "PRESERVES fun__malloc {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004018,8];[0x100004020,8];[0x100004180,8];[0x100004188,8];[0x100004190,8];[0x100004198,8];[0x1000041a0,1];[0x1000041a8,8];[0x1000041b0,8];[0x1000041b8,8];[0x1000041c0,8];[0x1000041c8,1];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 76),4];[(RSP_0 -64 80),4];[(RSP_0 -64 84),4];[(RSP_0 -64 88),4];[(RSP_0 -64 92),4];[(RSP_0 -64 104),8];[(RSP_0 -64 108),4];[(RSP_0 -64 264),8];[(RSP_0 -64 280),16]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002ffe"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002ffe: MOV R14, RAX 3"
 Post  "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003001"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100003001: TEST RAX, RAX 3"
 Post  "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003004"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100003004: JNE 4294979640 2"
 Post  "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002a94, blockId == 66 ##
######################################
*)

htriple "ht_100003006"
 Separations "(0x100004188,8) SEP (bot(fun____error),4); (0x100004188,8) SEP (bot(fun__fts_read_INODE64),8); (0x100004188,8) SEP (RSI_0,8); (0x100004188,8) SEP (RSP_0,8); (0x100004188,8) SEP ([0x100004018,8]_0,8); (0x100004188,8) SEP ([0x100004020,8]_0,4); (0x100004188,8) SEP ((bot(fun__fts_read_INODE64) +64 8),8); (0x100004188,8) SEP ((bot(fun__fts_read_INODE64) +64 24),8); (0x100004188,8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x100004188,8) SEP ((bot(fun__fts_read_INODE64) +64 56),4); (0x100004188,8) SEP ((bot(fun__fts_read_INODE64) +64 86),2); (0x100004188,8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x100004188,8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x100004188,8) SEP ((RSI_0 +64 8),8); (0x100004188,8) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); (0x100004188,8) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4); (0x100004188,8) SEP ((RSP_0 -64 8),8); (0x100004188,8) SEP ((RSP_0 -64 16),8); (0x100004188,8) SEP ((RSP_0 -64 24),8); (0x100004188,8) SEP ((RSP_0 -64 32),8); (0x100004188,8) SEP ((RSP_0 -64 40),8); (0x100004188,8) SEP ((RSP_0 -64 48),8); (0x100004188,8) SEP ((RSP_0 -64 52),4); (0x100004188,8) SEP ((RSP_0 -64 64),4); (0x100004188,8) SEP ((RSP_0 -64 64),8); (0x100004188,8) SEP ((RSP_0 -64 72),8); (0x100004188,8) SEP ((RSP_0 -64 76),4); (0x100004188,8) SEP ((RSP_0 -64 80),4); (0x100004188,8) SEP ((RSP_0 -64 84),4); (0x100004188,8) SEP ((RSP_0 -64 88),4); (0x100004188,8) SEP ((RSP_0 -64 92),4); (0x100004188,8) SEP ((RSP_0 -64 104),8); (0x100004188,8) SEP ((RSP_0 -64 108),4); (0x100004188,8) SEP ((RSP_0 -64 264),8); (0x100004188,8) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100003006: MOV RDI, QWORD PTR [RIP + 4475] 7"
 Post  "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000300d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "10000300d: TEST RDI, RDI 3"
 Post  "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003010"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100003010: JE 4294979640 2"
 Post  "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002a94, blockId == 67 ##
######################################
*)

htriple "ht_100003038"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100003038: TEST R14, R14 3"
 Post  "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000303b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "10000303b: JE 4294980863 6"
 Post  "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002a94, blockId == 68 ##
######################################
*)

htriple "ht_100003012"
 Separations ""
 Assertions  "(RDI,8) SEP (RSP_0,8); (RDI,8) SEP ((RSP_0 -64 8),8); (RDI,8) SEP ((RSP_0 -64 16),8); (RDI,8) SEP ((RSP_0 -64 24),8); (RDI,8) SEP ((RSP_0 -64 32),8); (RDI,8) SEP ((RSP_0 -64 40),8); (RDI,8) SEP ((RSP_0 -64 48),8); (RDI,8) SEP ((RSP_0 -64 52),4); (RDI,8) SEP ((RSP_0 -64 64),8); (RDI,8) SEP ((RSP_0 -64 72),8); (RDI,8) SEP ((RSP_0 -64 76),4); (RDI,8) SEP ((RSP_0 -64 80),4); (RDI,8) SEP ((RSP_0 -64 84),4); (RDI,8) SEP ((RSP_0 -64 88),4); (RDI,8) SEP ((RSP_0 -64 92),4); (RDI,8) SEP ((RSP_0 -64 104),8); (RDI,8) SEP ((RSP_0 -64 108),4); (RDI,8) SEP ((RSP_0 -64 264),8); (RDI,8) SEP ((RSP_0 -64 280),16)"
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100003012: MOV RAX, QWORD PTR [RDI] 3"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003015"
 Separations "(0x100004188,8) SEP (bot(fun____error),4); (0x100004188,8) SEP (bot(fun__fts_read_INODE64),8); (0x100004188,8) SEP (RSI_0,8); (0x100004188,8) SEP (RSP_0,8); (0x100004188,8) SEP ([0x100004018,8]_0,8); (0x100004188,8) SEP ([0x100004020,8]_0,4); (0x100004188,8) SEP ((bot(fun__fts_read_INODE64) +64 8),8); (0x100004188,8) SEP ((bot(fun__fts_read_INODE64) +64 24),8); (0x100004188,8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x100004188,8) SEP ((bot(fun__fts_read_INODE64) +64 56),4); (0x100004188,8) SEP ((bot(fun__fts_read_INODE64) +64 86),2); (0x100004188,8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x100004188,8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x100004188,8) SEP ((RSI_0 +64 8),8); (0x100004188,8) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); (0x100004188,8) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4); (0x100004188,8) SEP ((RSP_0 -64 8),8); (0x100004188,8) SEP ((RSP_0 -64 16),8); (0x100004188,8) SEP ((RSP_0 -64 24),8); (0x100004188,8) SEP ((RSP_0 -64 32),8); (0x100004188,8) SEP ((RSP_0 -64 40),8); (0x100004188,8) SEP ((RSP_0 -64 48),8); (0x100004188,8) SEP ((RSP_0 -64 52),4); (0x100004188,8) SEP ((RSP_0 -64 64),4); (0x100004188,8) SEP ((RSP_0 -64 64),8); (0x100004188,8) SEP ((RSP_0 -64 72),8); (0x100004188,8) SEP ((RSP_0 -64 76),4); (0x100004188,8) SEP ((RSP_0 -64 80),4); (0x100004188,8) SEP ((RSP_0 -64 84),4); (0x100004188,8) SEP ((RSP_0 -64 88),4); (0x100004188,8) SEP ((RSP_0 -64 92),4); (0x100004188,8) SEP ((RSP_0 -64 104),8); (0x100004188,8) SEP ((RSP_0 -64 108),4); (0x100004188,8) SEP ((RSP_0 -64 264),8); (0x100004188,8) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100003015: MOV QWORD PTR [RIP + 4460], RAX 7"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000301c"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "10000301c: ExternalCall fun__free 5"
 Post  "RAX = bot(fun__free) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 FunctionConstraints "PRESERVES fun__free {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004018,8];[0x100004020,8];[0x100004180,8];[0x100004188,8];[0x100004190,8];[0x100004198,8];[0x1000041a0,1];[0x1000041a8,8];[0x1000041b0,8];[0x1000041b8,8];[0x1000041c0,8];[0x1000041c8,1];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 76),4];[(RSP_0 -64 80),4];[(RSP_0 -64 84),4];[(RSP_0 -64 88),4];[(RSP_0 -64 92),4];[(RSP_0 -64 104),8];[(RSP_0 -64 108),4];[(RSP_0 -64 264),8];[(RSP_0 -64 280),16]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003021"
 Separations "(0x100004188,8) SEP (bot(fun____error),4); (0x100004188,8) SEP (bot(fun__fts_read_INODE64),8); (0x100004188,8) SEP (RSI_0,8); (0x100004188,8) SEP (RSP_0,8); (0x100004188,8) SEP ([0x100004018,8]_0,8); (0x100004188,8) SEP ([0x100004020,8]_0,4); (0x100004188,8) SEP ((bot(fun__fts_read_INODE64) +64 8),8); (0x100004188,8) SEP ((bot(fun__fts_read_INODE64) +64 24),8); (0x100004188,8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x100004188,8) SEP ((bot(fun__fts_read_INODE64) +64 56),4); (0x100004188,8) SEP ((bot(fun__fts_read_INODE64) +64 86),2); (0x100004188,8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x100004188,8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x100004188,8) SEP ((RSI_0 +64 8),8); (0x100004188,8) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); (0x100004188,8) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4); (0x100004188,8) SEP ((RSP_0 -64 8),8); (0x100004188,8) SEP ((RSP_0 -64 16),8); (0x100004188,8) SEP ((RSP_0 -64 24),8); (0x100004188,8) SEP ((RSP_0 -64 32),8); (0x100004188,8) SEP ((RSP_0 -64 40),8); (0x100004188,8) SEP ((RSP_0 -64 48),8); (0x100004188,8) SEP ((RSP_0 -64 52),4); (0x100004188,8) SEP ((RSP_0 -64 64),4); (0x100004188,8) SEP ((RSP_0 -64 64),8); (0x100004188,8) SEP ((RSP_0 -64 72),8); (0x100004188,8) SEP ((RSP_0 -64 76),4); (0x100004188,8) SEP ((RSP_0 -64 80),4); (0x100004188,8) SEP ((RSP_0 -64 84),4); (0x100004188,8) SEP ((RSP_0 -64 88),4); (0x100004188,8) SEP ((RSP_0 -64 92),4); (0x100004188,8) SEP ((RSP_0 -64 104),8); (0x100004188,8) SEP ((RSP_0 -64 108),4); (0x100004188,8) SEP ((RSP_0 -64 264),8); (0x100004188,8) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RAX = bot(fun__free) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100003021: MOV RDI, QWORD PTR [RIP + 4448] 7"
 Post  "RAX = bot(fun__free) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003028"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__free) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100003028: TEST RDI, RDI 3"
 Post  "RAX = bot(fun__free) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000302b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__free) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "10000302b: JNE 4294979602 2"
 Post  "RAX = bot(fun__free) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002a94, blockId == 69 ##
######################################
*)

htriple "ht_10000302d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__free) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "10000302d: MOV RDI, R15 3"
 Post  "RAX = bot(fun__free) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003030"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__free) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100003030: ExternalCall fun__malloc 5"
 Post  "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 FunctionConstraints "PRESERVES fun__malloc {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004018,8];[0x100004020,8];[0x100004180,8];[0x100004188,8];[0x100004190,8];[0x100004198,8];[0x1000041a0,1];[0x1000041a8,8];[0x1000041b0,8];[0x1000041b8,8];[0x1000041c0,8];[0x1000041c8,1];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 76),4];[(RSP_0 -64 80),4];[(RSP_0 -64 84),4];[(RSP_0 -64 88),4];[(RSP_0 -64 92),4];[(RSP_0 -64 104),8];[(RSP_0 -64 108),4];[(RSP_0 -64 264),8];[(RSP_0 -64 280),16]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003035"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100003035: MOV R14, RAX 3"
 Post  "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002a94, blockId == 70 ##
######################################
*)

htriple "ht_100003041"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100003041: MOV RDI, R14 3"
 Post  "RAX = bot(fun__malloc) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003044"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100003044: MOV RSI, R15 3"
 Post  "RAX = bot(fun__malloc) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003047"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100003047: ExternalCall fun____bzero 5"
 Post  "RAX = bot(fun____bzero) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 FunctionConstraints "PRESERVES fun____bzero {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004018,8];[0x100004020,8];[0x100004180,8];[0x100004188,8];[0x100004190,8];[0x100004198,8];[0x1000041a0,1];[0x1000041a8,8];[0x1000041b0,8];[0x1000041b8,8];[0x1000041c0,8];[0x1000041c8,1];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 76),4];[(RSP_0 -64 80),4];[(RSP_0 -64 84),4];[(RSP_0 -64 88),4];[(RSP_0 -64 92),4];[(RSP_0 -64 104),8];[(RSP_0 -64 108),4];[(RSP_0 -64 264),8];[(RSP_0 -64 280),16]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000304c"
 Separations "(0x100004190,8) SEP (bot(fun____error),4); (0x100004190,8) SEP (bot(fun__fts_read_INODE64),8); (0x100004190,8) SEP (RSI_0,8); (0x100004190,8) SEP (RSP_0,8); (0x100004190,8) SEP ([0x100004018,8]_0,8); (0x100004190,8) SEP ([0x100004020,8]_0,4); (0x100004190,8) SEP ((bot(fun__fts_read_INODE64) +64 8),8); (0x100004190,8) SEP ((bot(fun__fts_read_INODE64) +64 24),8); (0x100004190,8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x100004190,8) SEP ((bot(fun__fts_read_INODE64) +64 56),4); (0x100004190,8) SEP ((bot(fun__fts_read_INODE64) +64 86),2); (0x100004190,8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x100004190,8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x100004190,8) SEP ((RSI_0 +64 8),8); (0x100004190,8) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); (0x100004190,8) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4); (0x100004190,8) SEP ((RSP_0 -64 8),8); (0x100004190,8) SEP ((RSP_0 -64 16),8); (0x100004190,8) SEP ((RSP_0 -64 24),8); (0x100004190,8) SEP ((RSP_0 -64 32),8); (0x100004190,8) SEP ((RSP_0 -64 40),8); (0x100004190,8) SEP ((RSP_0 -64 48),8); (0x100004190,8) SEP ((RSP_0 -64 52),4); (0x100004190,8) SEP ((RSP_0 -64 64),4); (0x100004190,8) SEP ((RSP_0 -64 64),8); (0x100004190,8) SEP ((RSP_0 -64 72),8); (0x100004190,8) SEP ((RSP_0 -64 76),4); (0x100004190,8) SEP ((RSP_0 -64 80),4); (0x100004190,8) SEP ((RSP_0 -64 84),4); (0x100004190,8) SEP ((RSP_0 -64 88),4); (0x100004190,8) SEP ((RSP_0 -64 92),4); (0x100004190,8) SEP ((RSP_0 -64 104),8); (0x100004190,8) SEP ((RSP_0 -64 108),4); (0x100004190,8) SEP ((RSP_0 -64 264),8); (0x100004190,8) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RAX = bot(fun____bzero) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "10000304c: MOV R8, QWORD PTR [RIP + 4413] 7"
 Post  "RAX = bot(fun____bzero) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003053"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun____bzero) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100003053: TEST R8, R8 3"
 Post  "RAX = bot(fun____bzero) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003056"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun____bzero) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100003056: JE 4294980119 6"
 Post  "RAX = bot(fun____bzero) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002a94, blockId == 71 ##
######################################
*)

htriple "ht_1000034ff"
 Separations "(0x1000041a0,1) SEP (bot(fun____error),4); (0x1000041a0,1) SEP (bot(fun__fts_read_INODE64),8); (0x1000041a0,1) SEP (RSI_0,8); (0x1000041a0,1) SEP (RSP_0,8); (0x1000041a0,1) SEP ([0x100004018,8]_0,8); (0x1000041a0,1) SEP ([0x100004020,8]_0,4); (0x1000041a0,1) SEP ((bot(fun__fts_read_INODE64) +64 8),8); (0x1000041a0,1) SEP ((bot(fun__fts_read_INODE64) +64 24),8); (0x1000041a0,1) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x1000041a0,1) SEP ((bot(fun__fts_read_INODE64) +64 56),4); (0x1000041a0,1) SEP ((bot(fun__fts_read_INODE64) +64 86),2); (0x1000041a0,1) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x1000041a0,1) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x1000041a0,1) SEP ((RSI_0 +64 8),8); (0x1000041a0,1) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); (0x1000041a0,1) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4); (0x1000041a0,1) SEP ((RSP_0 -64 8),8); (0x1000041a0,1) SEP ((RSP_0 -64 16),8); (0x1000041a0,1) SEP ((RSP_0 -64 24),8); (0x1000041a0,1) SEP ((RSP_0 -64 32),8); (0x1000041a0,1) SEP ((RSP_0 -64 40),8); (0x1000041a0,1) SEP ((RSP_0 -64 48),8); (0x1000041a0,1) SEP ((RSP_0 -64 52),4); (0x1000041a0,1) SEP ((RSP_0 -64 64),4); (0x1000041a0,1) SEP ((RSP_0 -64 64),8); (0x1000041a0,1) SEP ((RSP_0 -64 72),8); (0x1000041a0,1) SEP ((RSP_0 -64 76),4); (0x1000041a0,1) SEP ((RSP_0 -64 80),4); (0x1000041a0,1) SEP ((RSP_0 -64 84),4); (0x1000041a0,1) SEP ((RSP_0 -64 88),4); (0x1000041a0,1) SEP ((RSP_0 -64 92),4); (0x1000041a0,1) SEP ((RSP_0 -64 104),8); (0x1000041a0,1) SEP ((RSP_0 -64 108),4); (0x1000041a0,1) SEP ((RSP_0 -64 264),8); (0x1000041a0,1) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "1000034ff: MOV BYTE PTR [RIP + 3226], 1 7"
 Post  "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000041a0,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003506"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000041a0,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100003506: LEA RDI, [RIP + 2454] 7"
 Post  "RAX = bot(fun__malloc) ; RDI = 0x100003ea3 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000041a0,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000350d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RDI = 0x100003ea3 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000041a0,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "10000350d: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RDI = 0x100003ea3 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000041a0,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000350f"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RDI = 0x100003ea3 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000041a0,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "10000350f: ExternalCall fun__warnx 5"
 Post  "RAX = bot(fun__warnx) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000041a0,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 FunctionConstraints "PRESERVES fun__warnx {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004018,8];[0x100004020,8];[0x100004180,8];[0x100004188,8];[0x100004190,8];[0x100004198,8];[0x1000041a0,1];[0x1000041a8,8];[0x1000041b0,8];[0x1000041b8,8];[0x1000041c0,8];[0x1000041c8,1];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 76),4];[(RSP_0 -64 80),4];[(RSP_0 -64 84),4];[(RSP_0 -64 88),4];[(RSP_0 -64 92),4];[(RSP_0 -64 104),8];[(RSP_0 -64 108),4];[(RSP_0 -64 264),8];[(RSP_0 -64 280),16]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003514"
 Separations "(0x100004190,8) SEP (bot(fun____error),4); (0x100004190,8) SEP (bot(fun__fts_read_INODE64),8); (0x100004190,8) SEP (RSI_0,8); (0x100004190,8) SEP (RSP_0,8); (0x100004190,8) SEP ([0x100004018,8]_0,8); (0x100004190,8) SEP ([0x100004020,8]_0,4); (0x100004190,8) SEP ((bot(fun__fts_read_INODE64) +64 8),8); (0x100004190,8) SEP ((bot(fun__fts_read_INODE64) +64 24),8); (0x100004190,8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x100004190,8) SEP ((bot(fun__fts_read_INODE64) +64 56),4); (0x100004190,8) SEP ((bot(fun__fts_read_INODE64) +64 86),2); (0x100004190,8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x100004190,8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x100004190,8) SEP ((RSI_0 +64 8),8); (0x100004190,8) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); (0x100004190,8) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4); (0x100004190,8) SEP ((RSP_0 -64 8),8); (0x100004190,8) SEP ((RSP_0 -64 16),8); (0x100004190,8) SEP ((RSP_0 -64 24),8); (0x100004190,8) SEP ((RSP_0 -64 32),8); (0x100004190,8) SEP ((RSP_0 -64 40),8); (0x100004190,8) SEP ((RSP_0 -64 48),8); (0x100004190,8) SEP ((RSP_0 -64 52),4); (0x100004190,8) SEP ((RSP_0 -64 64),4); (0x100004190,8) SEP ((RSP_0 -64 64),8); (0x100004190,8) SEP ((RSP_0 -64 72),8); (0x100004190,8) SEP ((RSP_0 -64 76),4); (0x100004190,8) SEP ((RSP_0 -64 80),4); (0x100004190,8) SEP ((RSP_0 -64 84),4); (0x100004190,8) SEP ((RSP_0 -64 88),4); (0x100004190,8) SEP ((RSP_0 -64 92),4); (0x100004190,8) SEP ((RSP_0 -64 104),8); (0x100004190,8) SEP ((RSP_0 -64 108),4); (0x100004190,8) SEP ((RSP_0 -64 264),8); (0x100004190,8) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RAX = bot(fun__warnx) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000041a0,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100003514: MOV R13, QWORD PTR [RIP + 3189] 7"
 Post  "RAX = bot(fun__warnx) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000041a0,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000351b"
 Separations "(0x100004180,8) SEP (bot(fun____error),4); (0x100004180,8) SEP (bot(fun__fts_read_INODE64),8); (0x100004180,8) SEP (RSI_0,8); (0x100004180,8) SEP (RSP_0,8); (0x100004180,8) SEP ([0x100004018,8]_0,8); (0x100004180,8) SEP ([0x100004020,8]_0,4); (0x100004180,8) SEP ((bot(fun__fts_read_INODE64) +64 8),8); (0x100004180,8) SEP ((bot(fun__fts_read_INODE64) +64 24),8); (0x100004180,8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x100004180,8) SEP ((bot(fun__fts_read_INODE64) +64 56),4); (0x100004180,8) SEP ((bot(fun__fts_read_INODE64) +64 86),2); (0x100004180,8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x100004180,8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x100004180,8) SEP ((RSI_0 +64 8),8); (0x100004180,8) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); (0x100004180,8) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4); (0x100004180,8) SEP ((RSP_0 -64 8),8); (0x100004180,8) SEP ((RSP_0 -64 16),8); (0x100004180,8) SEP ((RSP_0 -64 24),8); (0x100004180,8) SEP ((RSP_0 -64 32),8); (0x100004180,8) SEP ((RSP_0 -64 40),8); (0x100004180,8) SEP ((RSP_0 -64 48),8); (0x100004180,8) SEP ((RSP_0 -64 52),4); (0x100004180,8) SEP ((RSP_0 -64 64),4); (0x100004180,8) SEP ((RSP_0 -64 64),8); (0x100004180,8) SEP ((RSP_0 -64 72),8); (0x100004180,8) SEP ((RSP_0 -64 76),4); (0x100004180,8) SEP ((RSP_0 -64 80),4); (0x100004180,8) SEP ((RSP_0 -64 84),4); (0x100004180,8) SEP ((RSP_0 -64 88),4); (0x100004180,8) SEP ((RSP_0 -64 92),4); (0x100004180,8) SEP ((RSP_0 -64 104),8); (0x100004180,8) SEP ((RSP_0 -64 108),4); (0x100004180,8) SEP ((RSP_0 -64 264),8); (0x100004180,8) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RAX = bot(fun__warnx) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000041a0,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "10000351b: MOV R14, QWORD PTR [RIP + 3166] 7"
 Post  "RAX = bot(fun__warnx) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000041a0,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003522"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__warnx) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000041a0,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100003522: JMP 4294980145 5"
 Post  "RAX = bot(fun__warnx) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000041a0,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002a94, blockId == 72 ##
######################################
*)

htriple "ht_10000305c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun____bzero) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "10000305c: MOV R9, RBX 3"
 Post  "RAX = bot(fun____bzero) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000305f"
 Separations "(0x100004180,8) SEP (bot(fun____error),4); (0x100004180,8) SEP (bot(fun__fts_read_INODE64),8); (0x100004180,8) SEP (RSI_0,8); (0x100004180,8) SEP (RSP_0,8); (0x100004180,8) SEP ([0x100004018,8]_0,8); (0x100004180,8) SEP ([0x100004020,8]_0,4); (0x100004180,8) SEP ((bot(fun__fts_read_INODE64) +64 8),8); (0x100004180,8) SEP ((bot(fun__fts_read_INODE64) +64 24),8); (0x100004180,8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x100004180,8) SEP ((bot(fun__fts_read_INODE64) +64 56),4); (0x100004180,8) SEP ((bot(fun__fts_read_INODE64) +64 86),2); (0x100004180,8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x100004180,8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x100004180,8) SEP ((RSI_0 +64 8),8); (0x100004180,8) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); (0x100004180,8) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4); (0x100004180,8) SEP ((RSP_0 -64 8),8); (0x100004180,8) SEP ((RSP_0 -64 16),8); (0x100004180,8) SEP ((RSP_0 -64 24),8); (0x100004180,8) SEP ((RSP_0 -64 32),8); (0x100004180,8) SEP ((RSP_0 -64 40),8); (0x100004180,8) SEP ((RSP_0 -64 48),8); (0x100004180,8) SEP ((RSP_0 -64 52),4); (0x100004180,8) SEP ((RSP_0 -64 64),4); (0x100004180,8) SEP ((RSP_0 -64 64),8); (0x100004180,8) SEP ((RSP_0 -64 72),8); (0x100004180,8) SEP ((RSP_0 -64 76),4); (0x100004180,8) SEP ((RSP_0 -64 80),4); (0x100004180,8) SEP ((RSP_0 -64 84),4); (0x100004180,8) SEP ((RSP_0 -64 88),4); (0x100004180,8) SEP ((RSP_0 -64 92),4); (0x100004180,8) SEP ((RSP_0 -64 104),8); (0x100004180,8) SEP ((RSP_0 -64 108),4); (0x100004180,8) SEP ((RSP_0 -64 264),8); (0x100004180,8) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RAX = bot(fun____bzero) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "10000305f: MOV RDI, QWORD PTR [RIP + 4378] 7"
 Post  "RAX = bot(fun____bzero) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003066"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun____bzero) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100003066: XOR ESI, ESI 2"
 Post  "RAX = bot(fun____bzero) ; RSI = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002a94, blockId == 73 ##
######################################
*)

htriple "ht_100003217"
 Separations "(0x100004180,8) SEP (bot(fun____error),4); (0x100004180,8) SEP (bot(fun__fts_read_INODE64),8); (0x100004180,8) SEP (RSI_0,8); (0x100004180,8) SEP (RSP_0,8); (0x100004180,8) SEP ([0x100004018,8]_0,8); (0x100004180,8) SEP ([0x100004020,8]_0,4); (0x100004180,8) SEP ((bot(fun__fts_read_INODE64) +64 8),8); (0x100004180,8) SEP ((bot(fun__fts_read_INODE64) +64 24),8); (0x100004180,8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x100004180,8) SEP ((bot(fun__fts_read_INODE64) +64 56),4); (0x100004180,8) SEP ((bot(fun__fts_read_INODE64) +64 86),2); (0x100004180,8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x100004180,8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x100004180,8) SEP ((RSI_0 +64 8),8); (0x100004180,8) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); (0x100004180,8) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4); (0x100004180,8) SEP ((RSP_0 -64 8),8); (0x100004180,8) SEP ((RSP_0 -64 16),8); (0x100004180,8) SEP ((RSP_0 -64 24),8); (0x100004180,8) SEP ((RSP_0 -64 32),8); (0x100004180,8) SEP ((RSP_0 -64 40),8); (0x100004180,8) SEP ((RSP_0 -64 48),8); (0x100004180,8) SEP ((RSP_0 -64 52),4); (0x100004180,8) SEP ((RSP_0 -64 64),4); (0x100004180,8) SEP ((RSP_0 -64 64),8); (0x100004180,8) SEP ((RSP_0 -64 72),8); (0x100004180,8) SEP ((RSP_0 -64 76),4); (0x100004180,8) SEP ((RSP_0 -64 80),4); (0x100004180,8) SEP ((RSP_0 -64 84),4); (0x100004180,8) SEP ((RSP_0 -64 88),4); (0x100004180,8) SEP ((RSP_0 -64 92),4); (0x100004180,8) SEP ((RSP_0 -64 104),8); (0x100004180,8) SEP ((RSP_0 -64 108),4); (0x100004180,8) SEP ((RSP_0 -64 264),8); (0x100004180,8) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RAX = bot(fun____bzero) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100003217: MOV RDI, QWORD PTR [RIP + 3938] 7"
 Post  "RAX = bot(fun____bzero) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002a94, blockId == 74 ##
######################################
*)

htriple "ht_100003071"
 Separations ""
 Assertions  "(RCX,8) SEP (RSP_0,8); (RCX,8) SEP ((RSP_0 -64 8),8); (RCX,8) SEP ((RSP_0 -64 16),8); (RCX,8) SEP ((RSP_0 -64 24),8); (RCX,8) SEP ((RSP_0 -64 32),8); (RCX,8) SEP ((RSP_0 -64 40),8); (RCX,8) SEP ((RSP_0 -64 48),8); (RCX,8) SEP ((RSP_0 -64 52),4); (RCX,8) SEP ((RSP_0 -64 64),8); (RCX,8) SEP ((RSP_0 -64 72),8); (RCX,8) SEP ((RSP_0 -64 76),4); (RCX,8) SEP ((RSP_0 -64 80),4); (RCX,8) SEP ((RSP_0 -64 84),4); (RCX,8) SEP ((RSP_0 -64 88),4); (RCX,8) SEP ((RSP_0 -64 92),4); (RCX,8) SEP ((RSP_0 -64 104),8); (RCX,8) SEP ((RSP_0 -64 108),4); (RCX,8) SEP ((RSP_0 -64 264),8); (RCX,8) SEP ((RSP_0 -64 280),16)"
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100003071: MOV RAX, QWORD PTR [RCX] 3"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003074"
 Separations ""
 Assertions  "(RDI,8) SEP (RSP_0,8); (RDI,8) SEP ((RSP_0 -64 8),8); (RDI,8) SEP ((RSP_0 -64 16),8); (RDI,8) SEP ((RSP_0 -64 24),8); (RDI,8) SEP ((RSP_0 -64 32),8); (RDI,8) SEP ((RSP_0 -64 40),8); (RDI,8) SEP ((RSP_0 -64 48),8); (RDI,8) SEP ((RSP_0 -64 52),4); (RDI,8) SEP ((RSP_0 -64 64),8); (RDI,8) SEP ((RSP_0 -64 72),8); (RDI,8) SEP ((RSP_0 -64 76),4); (RDI,8) SEP ((RSP_0 -64 80),4); (RDI,8) SEP ((RSP_0 -64 84),4); (RDI,8) SEP ((RSP_0 -64 88),4); (RDI,8) SEP ((RSP_0 -64 92),4); (RDI,8) SEP ((RSP_0 -64 104),8); (RDI,8) SEP ((RSP_0 -64 108),4); (RDI,8) SEP ((RSP_0 -64 264),8); (RDI,8) SEP ((RSP_0 -64 280),16); ((RDI +64 (RSI *64 8)),8) SEP (RSP_0,8); ((RDI +64 (RSI *64 8)),8) SEP ((RSP_0 -64 8),8); ((RDI +64 (RSI *64 8)),8) SEP ((RSP_0 -64 16),8); ((RDI +64 (RSI *64 8)),8) SEP ((RSP_0 -64 24),8); ((RDI +64 (RSI *64 8)),8) SEP ((RSP_0 -64 32),8); ((RDI +64 (RSI *64 8)),8) SEP ((RSP_0 -64 40),8); ((RDI +64 (RSI *64 8)),8) SEP ((RSP_0 -64 48),8); ((RDI +64 (RSI *64 8)),8) SEP ((RSP_0 -64 52),4); ((RDI +64 (RSI *64 8)),8) SEP ((RSP_0 -64 64),8); ((RDI +64 (RSI *64 8)),8) SEP ((RSP_0 -64 72),8); ((RDI +64 (RSI *64 8)),8) SEP ((RSP_0 -64 76),4); ((RDI +64 (RSI *64 8)),8) SEP ((RSP_0 -64 80),4); ((RDI +64 (RSI *64 8)),8) SEP ((RSP_0 -64 84),4); ((RDI +64 (RSI *64 8)),8) SEP ((RSP_0 -64 88),4); ((RDI +64 (RSI *64 8)),8) SEP ((RSP_0 -64 92),4); ((RDI +64 (RSI *64 8)),8) SEP ((RSP_0 -64 104),8); ((RDI +64 (RSI *64 8)),8) SEP ((RSP_0 -64 108),4); ((RDI +64 (RSI *64 8)),8) SEP ((RSP_0 -64 264),8); ((RDI +64 (RSI *64 8)),8) SEP ((RSP_0 -64 280),16)"
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100003074: MOV QWORD PTR [RDI + RSI * 8], RAX 4"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003078"
 Separations ""
 Assertions  "((RCX +64 20),4) SEP (RSP_0,8); ((RCX +64 20),4) SEP ((RSP_0 -64 8),8); ((RCX +64 20),4) SEP ((RSP_0 -64 16),8); ((RCX +64 20),4) SEP ((RSP_0 -64 24),8); ((RCX +64 20),4) SEP ((RSP_0 -64 32),8); ((RCX +64 20),4) SEP ((RSP_0 -64 40),8); ((RCX +64 20),4) SEP ((RSP_0 -64 48),8); ((RCX +64 20),4) SEP ((RSP_0 -64 52),4); ((RCX +64 20),4) SEP ((RSP_0 -64 64),8); ((RCX +64 20),4) SEP ((RSP_0 -64 72),8); ((RCX +64 20),4) SEP ((RSP_0 -64 76),4); ((RCX +64 20),4) SEP ((RSP_0 -64 80),4); ((RCX +64 20),4) SEP ((RSP_0 -64 84),4); ((RCX +64 20),4) SEP ((RSP_0 -64 88),4); ((RCX +64 20),4) SEP ((RSP_0 -64 92),4); ((RCX +64 20),4) SEP ((RSP_0 -64 104),8); ((RCX +64 20),4) SEP ((RSP_0 -64 108),4); ((RCX +64 20),4) SEP ((RSP_0 -64 264),8); ((RCX +64 20),4) SEP ((RSP_0 -64 280),16)"
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100003078: MOVSXD RAX, DWORD PTR [RCX + 20] 4"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000307c"
 Separations ""
 Assertions  "((RCX +64 24),8) SEP (RSP_0,8); ((RCX +64 24),8) SEP ((RSP_0 -64 8),8); ((RCX +64 24),8) SEP ((RSP_0 -64 16),8); ((RCX +64 24),8) SEP ((RSP_0 -64 24),8); ((RCX +64 24),8) SEP ((RSP_0 -64 32),8); ((RCX +64 24),8) SEP ((RSP_0 -64 40),8); ((RCX +64 24),8) SEP ((RSP_0 -64 48),8); ((RCX +64 24),8) SEP ((RSP_0 -64 52),4); ((RCX +64 24),8) SEP ((RSP_0 -64 64),8); ((RCX +64 24),8) SEP ((RSP_0 -64 72),8); ((RCX +64 24),8) SEP ((RSP_0 -64 76),4); ((RCX +64 24),8) SEP ((RSP_0 -64 80),4); ((RCX +64 24),8) SEP ((RSP_0 -64 84),4); ((RCX +64 24),8) SEP ((RSP_0 -64 88),4); ((RCX +64 24),8) SEP ((RSP_0 -64 92),4); ((RCX +64 24),8) SEP ((RSP_0 -64 104),8); ((RCX +64 24),8) SEP ((RSP_0 -64 108),4); ((RCX +64 24),8) SEP ((RSP_0 -64 264),8); ((RCX +64 24),8) SEP ((RSP_0 -64 280),16)"
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "10000307c: XOR RAX, QWORD PTR [RCX + 24] 4"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003080"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100003080: XOR EDX, EDX 2"
 Post  "RDX = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003082"
 Separations ""
 Assertions  ""
 Pre   "RDX = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100003082: DIV R13 3"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003085"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100003085: MOVSXD RAX, EDX 3"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003088"
 Separations ""
 Assertions  "((R14 +64 (RAX *64 8)),8) SEP (RSP_0,8); ((R14 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 8),8); ((R14 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 16),8); ((R14 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 24),8); ((R14 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 32),8); ((R14 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 40),8); ((R14 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 48),8); ((R14 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 52),4); ((R14 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 64),8); ((R14 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 72),8); ((R14 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 76),4); ((R14 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 80),4); ((R14 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 84),4); ((R14 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 88),4); ((R14 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 92),4); ((R14 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 104),8); ((R14 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 108),4); ((R14 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 264),8); ((R14 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 280),16)"
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100003088: MOV RBX, QWORD PTR [R14 + RAX * 8] 4"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000308c"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "10000308c: MOV EDX, 0 5"
 Post  "RDX = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003091"
 Separations ""
 Assertions  ""
 Pre   "RDX = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100003091: TEST RBX, RBX 3"
 Post  "RDX = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003094"
 Separations ""
 Assertions  ""
 Pre   "RDX = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100003094: JE 4294979742 2"
 Post  "RDX = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002a94, blockId == 75 ##
######################################
*)

htriple "ht_1000030af"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "1000030af: INC RSI 3"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000030b2"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "1000030b2: CMP RSI, R8 3"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000030b5"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "1000030b5: JNE 4294979688 2"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002a94, blockId == 76 ##
######################################
*)

htriple "ht_100003096"
 Separations ""
 Assertions  "((RBX +64 8),8) SEP (RSP_0,8); ((RBX +64 8),8) SEP ((RSP_0 -64 8),8); ((RBX +64 8),8) SEP ((RSP_0 -64 16),8); ((RBX +64 8),8) SEP ((RSP_0 -64 24),8); ((RBX +64 8),8) SEP ((RSP_0 -64 32),8); ((RBX +64 8),8) SEP ((RSP_0 -64 40),8); ((RBX +64 8),8) SEP ((RSP_0 -64 48),8); ((RBX +64 8),8) SEP ((RSP_0 -64 52),4); ((RBX +64 8),8) SEP ((RSP_0 -64 64),8); ((RBX +64 8),8) SEP ((RSP_0 -64 72),8); ((RBX +64 8),8) SEP ((RSP_0 -64 76),4); ((RBX +64 8),8) SEP ((RSP_0 -64 80),4); ((RBX +64 8),8) SEP ((RSP_0 -64 84),4); ((RBX +64 8),8) SEP ((RSP_0 -64 88),4); ((RBX +64 8),8) SEP ((RSP_0 -64 92),4); ((RBX +64 8),8) SEP ((RSP_0 -64 104),8); ((RBX +64 8),8) SEP ((RSP_0 -64 108),4); ((RBX +64 8),8) SEP ((RSP_0 -64 264),8); ((RBX +64 8),8) SEP ((RSP_0 -64 280),16)"
 Pre   "RDX = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100003096: MOV QWORD PTR [RBX + 8], RCX 4"
 Post  "RDX = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000309a"
 Separations ""
 Assertions  "((R14 +64 (RAX *64 8)),8) SEP (RSP_0,8); ((R14 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 8),8); ((R14 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 16),8); ((R14 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 24),8); ((R14 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 32),8); ((R14 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 40),8); ((R14 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 48),8); ((R14 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 52),4); ((R14 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 64),8); ((R14 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 72),8); ((R14 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 76),4); ((R14 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 80),4); ((R14 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 84),4); ((R14 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 88),4); ((R14 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 92),4); ((R14 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 104),8); ((R14 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 108),4); ((R14 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 264),8); ((R14 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 280),16)"
 Pre   "RDX = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "10000309a: MOV RDX, QWORD PTR [R14 + RAX * 8] 4"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002a94, blockId == 77 ##
######################################
*)

htriple "ht_10000309e"
 Separations ""
 Assertions  "(RCX,8) SEP (RSP_0,8); (RCX,8) SEP ((RSP_0 -64 8),8); (RCX,8) SEP ((RSP_0 -64 16),8); (RCX,8) SEP ((RSP_0 -64 24),8); (RCX,8) SEP ((RSP_0 -64 32),8); (RCX,8) SEP ((RSP_0 -64 40),8); (RCX,8) SEP ((RSP_0 -64 48),8); (RCX,8) SEP ((RSP_0 -64 52),4); (RCX,8) SEP ((RSP_0 -64 64),8); (RCX,8) SEP ((RSP_0 -64 72),8); (RCX,8) SEP ((RSP_0 -64 76),4); (RCX,8) SEP ((RSP_0 -64 80),4); (RCX,8) SEP ((RSP_0 -64 84),4); (RCX,8) SEP ((RSP_0 -64 88),4); (RCX,8) SEP ((RSP_0 -64 92),4); (RCX,8) SEP ((RSP_0 -64 104),8); (RCX,8) SEP ((RSP_0 -64 108),4); (RCX,8) SEP ((RSP_0 -64 264),8); (RCX,8) SEP ((RSP_0 -64 280),16)"
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "10000309e: MOV QWORD PTR [RCX], RDX 3"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000030a1"
 Separations ""
 Assertions  "((RCX +64 8),8) SEP (RSP_0,8); ((RCX +64 8),8) SEP ((RSP_0 -64 8),8); ((RCX +64 8),8) SEP ((RSP_0 -64 16),8); ((RCX +64 8),8) SEP ((RSP_0 -64 24),8); ((RCX +64 8),8) SEP ((RSP_0 -64 32),8); ((RCX +64 8),8) SEP ((RSP_0 -64 40),8); ((RCX +64 8),8) SEP ((RSP_0 -64 48),8); ((RCX +64 8),8) SEP ((RSP_0 -64 52),4); ((RCX +64 8),8) SEP ((RSP_0 -64 64),8); ((RCX +64 8),8) SEP ((RSP_0 -64 72),8); ((RCX +64 8),8) SEP ((RSP_0 -64 76),4); ((RCX +64 8),8) SEP ((RSP_0 -64 80),4); ((RCX +64 8),8) SEP ((RSP_0 -64 84),4); ((RCX +64 8),8) SEP ((RSP_0 -64 88),4); ((RCX +64 8),8) SEP ((RSP_0 -64 92),4); ((RCX +64 8),8) SEP ((RSP_0 -64 104),8); ((RCX +64 8),8) SEP ((RSP_0 -64 108),4); ((RCX +64 8),8) SEP ((RSP_0 -64 264),8); ((RCX +64 8),8) SEP ((RSP_0 -64 280),16)"
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "1000030a1: MOV QWORD PTR [RCX + 8], 0 8"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000030a9"
 Separations ""
 Assertions  "((R14 +64 (RAX *64 8)),8) SEP (RSP_0,8); ((R14 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 8),8); ((R14 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 16),8); ((R14 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 24),8); ((R14 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 32),8); ((R14 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 40),8); ((R14 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 48),8); ((R14 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 52),4); ((R14 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 64),8); ((R14 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 72),8); ((R14 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 76),4); ((R14 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 80),4); ((R14 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 84),4); ((R14 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 88),4); ((R14 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 92),4); ((R14 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 104),8); ((R14 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 108),4); ((R14 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 264),8); ((R14 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 280),16)"
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "1000030a9: MOV QWORD PTR [R14 + RAX * 8], RCX 4"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000030ad"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "1000030ad: JMP 4294979688 2"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002a94, blockId == 78 ##
######################################
*)

htriple "ht_100003068"
 Separations ""
 Assertions  "(RDI,8) SEP (RSP_0,8); (RDI,8) SEP ((RSP_0 -64 8),8); (RDI,8) SEP ((RSP_0 -64 16),8); (RDI,8) SEP ((RSP_0 -64 24),8); (RDI,8) SEP ((RSP_0 -64 32),8); (RDI,8) SEP ((RSP_0 -64 40),8); (RDI,8) SEP ((RSP_0 -64 48),8); (RDI,8) SEP ((RSP_0 -64 52),4); (RDI,8) SEP ((RSP_0 -64 64),8); (RDI,8) SEP ((RSP_0 -64 72),8); (RDI,8) SEP ((RSP_0 -64 76),4); (RDI,8) SEP ((RSP_0 -64 80),4); (RDI,8) SEP ((RSP_0 -64 84),4); (RDI,8) SEP ((RSP_0 -64 88),4); (RDI,8) SEP ((RSP_0 -64 92),4); (RDI,8) SEP ((RSP_0 -64 104),8); (RDI,8) SEP ((RSP_0 -64 108),4); (RDI,8) SEP ((RSP_0 -64 264),8); (RDI,8) SEP ((RSP_0 -64 280),16); ((RDI +64 (RSI *64 8)),8) SEP (RSP_0,8); ((RDI +64 (RSI *64 8)),8) SEP ((RSP_0 -64 8),8); ((RDI +64 (RSI *64 8)),8) SEP ((RSP_0 -64 16),8); ((RDI +64 (RSI *64 8)),8) SEP ((RSP_0 -64 24),8); ((RDI +64 (RSI *64 8)),8) SEP ((RSP_0 -64 32),8); ((RDI +64 (RSI *64 8)),8) SEP ((RSP_0 -64 40),8); ((RDI +64 (RSI *64 8)),8) SEP ((RSP_0 -64 48),8); ((RDI +64 (RSI *64 8)),8) SEP ((RSP_0 -64 52),4); ((RDI +64 (RSI *64 8)),8) SEP ((RSP_0 -64 64),8); ((RDI +64 (RSI *64 8)),8) SEP ((RSP_0 -64 72),8); ((RDI +64 (RSI *64 8)),8) SEP ((RSP_0 -64 76),4); ((RDI +64 (RSI *64 8)),8) SEP ((RSP_0 -64 80),4); ((RDI +64 (RSI *64 8)),8) SEP ((RSP_0 -64 84),4); ((RDI +64 (RSI *64 8)),8) SEP ((RSP_0 -64 88),4); ((RDI +64 (RSI *64 8)),8) SEP ((RSP_0 -64 92),4); ((RDI +64 (RSI *64 8)),8) SEP ((RSP_0 -64 104),8); ((RDI +64 (RSI *64 8)),8) SEP ((RSP_0 -64 108),4); ((RDI +64 (RSI *64 8)),8) SEP ((RSP_0 -64 264),8); ((RDI +64 (RSI *64 8)),8) SEP ((RSP_0 -64 280),16)"
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100003068: MOV RCX, QWORD PTR [RDI + RSI * 8] 4"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000306c"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "10000306c: TEST RCX, RCX 3"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000306f"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "10000306f: JE 4294979759 2"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002a94, blockId == 79 ##
######################################
*)

htriple "ht_1000030b7"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "1000030b7: MOV RBX, R9 3"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000030ba"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "1000030ba: JMP 4294980126 5"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002a94, blockId == 80 ##
######################################
*)

htriple "ht_100003107"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000041a8,8] = bot(fun__malloc) ; [0x1000041b8,8] = 0x2000 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "100003107: MOV R13, RAX 3"
 Post  "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000041a8,8] = bot(fun__malloc) ; [0x1000041b8,8] = 0x2000 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000310a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000041a8,8] = bot(fun__malloc) ; [0x1000041b8,8] = 0x2000 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "10000310a: MOV ESI, 65536 5"
 Post  "RAX = bot(fun__malloc) ; RSI = 0x10000 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000041a8,8] = bot(fun__malloc) ; [0x1000041b8,8] = 0x2000 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000310f"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RSI = 0x10000 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000041a8,8] = bot(fun__malloc) ; [0x1000041b8,8] = 0x2000 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "10000310f: MOV RDI, RAX 3"
 Post  "RAX = bot(fun__malloc) ; RDI = bot(fun__malloc) ; RSI = 0x10000 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000041a8,8] = bot(fun__malloc) ; [0x1000041b8,8] = 0x2000 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003112"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RDI = bot(fun__malloc) ; RSI = 0x10000 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000041a8,8] = bot(fun__malloc) ; [0x1000041b8,8] = 0x2000 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "100003112: ExternalCall fun____bzero 5"
 Post  "RAX = bot(fun____bzero) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000041a8,8] = bot(fun__malloc) ; [0x1000041b8,8] = 0x2000 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 FunctionConstraints "PRESERVES fun____bzero {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004018,8];[0x100004020,8];[0x100004180,8];[0x100004188,8];[0x100004190,8];[0x100004198,8];[0x1000041a0,1];[0x1000041a8,8];[0x1000041b0,8];[0x1000041b8,8];[0x1000041c0,8];[0x1000041c8,1];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 76),4];[(RSP_0 -64 80),4];[(RSP_0 -64 84),4];[(RSP_0 -64 88),4];[(RSP_0 -64 92),4];[(RSP_0 -64 104),8];[(RSP_0 -64 108),4];[(RSP_0 -64 264),8];[(RSP_0 -64 280),16]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003117"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun____bzero) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000041a8,8] = bot(fun__malloc) ; [0x1000041b8,8] = 0x2000 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "100003117: MOV R14D, 8192 6"
 Post  "RAX = bot(fun____bzero) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = 0x2000 ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000041a8,8] = bot(fun__malloc) ; [0x1000041b8,8] = 0x2000 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002a94, blockId == 81 ##
######################################
*)

htriple "ht_1000035de"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000041a8,8] = bot(fun__malloc) ; [0x1000041b8,8] = 0x2000 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "1000035de: LEA RSI, [RIP + 2277] 7"
 Post  "RAX = bot(fun__malloc) ; RSI = 0x100003eca ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000041a8,8] = bot(fun__malloc) ; [0x1000041b8,8] = 0x2000 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002a94, blockId == 82 ##
######################################
*)

htriple "ht_10000311d"
 Separations "(0x1000041c8,1) SEP (bot(fun____error),4); (0x1000041c8,1) SEP (bot(fun__fts_read_INODE64),8); (0x1000041c8,1) SEP (RSI_0,8); (0x1000041c8,1) SEP (RSP_0,8); (0x1000041c8,1) SEP ([0x100004018,8]_0,8); (0x1000041c8,1) SEP ([0x100004020,8]_0,4); (0x1000041c8,1) SEP ((bot(fun__fts_read_INODE64) +64 8),8); (0x1000041c8,1) SEP ((bot(fun__fts_read_INODE64) +64 24),8); (0x1000041c8,1) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x1000041c8,1) SEP ((bot(fun__fts_read_INODE64) +64 56),4); (0x1000041c8,1) SEP ((bot(fun__fts_read_INODE64) +64 86),2); (0x1000041c8,1) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x1000041c8,1) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x1000041c8,1) SEP ((RSI_0 +64 8),8); (0x1000041c8,1) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); (0x1000041c8,1) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4); (0x1000041c8,1) SEP ((RSP_0 -64 8),8); (0x1000041c8,1) SEP ((RSP_0 -64 16),8); (0x1000041c8,1) SEP ((RSP_0 -64 24),8); (0x1000041c8,1) SEP ((RSP_0 -64 32),8); (0x1000041c8,1) SEP ((RSP_0 -64 40),8); (0x1000041c8,1) SEP ((RSP_0 -64 48),8); (0x1000041c8,1) SEP ((RSP_0 -64 52),4); (0x1000041c8,1) SEP ((RSP_0 -64 64),4); (0x1000041c8,1) SEP ((RSP_0 -64 64),8); (0x1000041c8,1) SEP ((RSP_0 -64 72),8); (0x1000041c8,1) SEP ((RSP_0 -64 76),4); (0x1000041c8,1) SEP ((RSP_0 -64 80),4); (0x1000041c8,1) SEP ((RSP_0 -64 84),4); (0x1000041c8,1) SEP ((RSP_0 -64 88),4); (0x1000041c8,1) SEP ((RSP_0 -64 92),4); (0x1000041c8,1) SEP ((RSP_0 -64 104),8); (0x1000041c8,1) SEP ((RSP_0 -64 108),4); (0x1000041c8,1) SEP ((RSP_0 -64 264),8); (0x1000041c8,1) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "10000311d: CMP BYTE PTR [RIP + 4260], 0 7"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003124"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "100003124: JNE 4294980111 6"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002a94, blockId == 83 ##
######################################
*)

htriple "ht_10000312a"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "10000312a: LEA R15, [R14 + R14] 4"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000312e"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "10000312e: LEA RAX, [R15 + R15 * 4] 4"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003132"
 Separations "(0x1000041c0,8) SEP (bot(fun____error),4); (0x1000041c0,8) SEP (bot(fun__fts_read_INODE64),8); (0x1000041c0,8) SEP (RSI_0,8); (0x1000041c0,8) SEP (RSP_0,8); (0x1000041c0,8) SEP ([0x100004018,8]_0,8); (0x1000041c0,8) SEP ([0x100004020,8]_0,4); (0x1000041c0,8) SEP ((bot(fun__fts_read_INODE64) +64 8),8); (0x1000041c0,8) SEP ((bot(fun__fts_read_INODE64) +64 24),8); (0x1000041c0,8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x1000041c0,8) SEP ((bot(fun__fts_read_INODE64) +64 56),4); (0x1000041c0,8) SEP ((bot(fun__fts_read_INODE64) +64 86),2); (0x1000041c0,8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x1000041c0,8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x1000041c0,8) SEP ((RSI_0 +64 8),8); (0x1000041c0,8) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); (0x1000041c0,8) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4); (0x1000041c0,8) SEP ((RSP_0 -64 8),8); (0x1000041c0,8) SEP ((RSP_0 -64 16),8); (0x1000041c0,8) SEP ((RSP_0 -64 24),8); (0x1000041c0,8) SEP ((RSP_0 -64 32),8); (0x1000041c0,8) SEP ((RSP_0 -64 40),8); (0x1000041c0,8) SEP ((RSP_0 -64 48),8); (0x1000041c0,8) SEP ((RSP_0 -64 52),4); (0x1000041c0,8) SEP ((RSP_0 -64 64),4); (0x1000041c0,8) SEP ((RSP_0 -64 64),8); (0x1000041c0,8) SEP ((RSP_0 -64 72),8); (0x1000041c0,8) SEP ((RSP_0 -64 76),4); (0x1000041c0,8) SEP ((RSP_0 -64 80),4); (0x1000041c0,8) SEP ((RSP_0 -64 84),4); (0x1000041c0,8) SEP ((RSP_0 -64 88),4); (0x1000041c0,8) SEP ((RSP_0 -64 92),4); (0x1000041c0,8) SEP ((RSP_0 -64 104),8); (0x1000041c0,8) SEP ((RSP_0 -64 108),4); (0x1000041c0,8) SEP ((RSP_0 -64 264),8); (0x1000041c0,8) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "100003132: CMP QWORD PTR [RIP + 4231], RAX 7"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003139"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "100003139: JBE 4294980111 6"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002a94, blockId == 84 ##
######################################
*)

htriple "ht_10000320f"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "10000320f: MOV R15, R14 3"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003212"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "100003212: JMP 4294980549 5"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002a94, blockId == 85 ##
######################################
*)

htriple "ht_10000313f"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "10000313f: SHL R14, 4 4"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003143"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "100003143: MOV RDI, R14 3"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003146"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "100003146: ExternalCall fun__malloc 5"
 Post  "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 FunctionConstraints "PRESERVES fun__malloc {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004018,8];[0x100004020,8];[0x100004180,8];[0x100004188,8];[0x100004190,8];[0x100004198,8];[0x1000041a0,1];[0x1000041a8,8];[0x1000041b0,8];[0x1000041b8,8];[0x1000041c0,8];[0x1000041c8,1];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 76),4];[(RSP_0 -64 80),4];[(RSP_0 -64 84),4];[(RSP_0 -64 88),4];[(RSP_0 -64 92),4];[(RSP_0 -64 104),8];[(RSP_0 -64 108),4];[(RSP_0 -64 264),8];[(RSP_0 -64 280),16]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000314b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "10000314b: MOV R13, RAX 3"
 Post  "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000314e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "10000314e: TEST RAX, RAX 3"
 Post  "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003151"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "100003151: JNE 4294979973 2"
 Post  "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002a94, blockId == 86 ##
######################################
*)

htriple "ht_100003153"
 Separations "(0x1000041b0,8) SEP (bot(fun____error),4); (0x1000041b0,8) SEP (bot(fun__fts_read_INODE64),8); (0x1000041b0,8) SEP (RSI_0,8); (0x1000041b0,8) SEP (RSP_0,8); (0x1000041b0,8) SEP ([0x100004018,8]_0,8); (0x1000041b0,8) SEP ([0x100004020,8]_0,4); (0x1000041b0,8) SEP ((bot(fun__fts_read_INODE64) +64 8),8); (0x1000041b0,8) SEP ((bot(fun__fts_read_INODE64) +64 24),8); (0x1000041b0,8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x1000041b0,8) SEP ((bot(fun__fts_read_INODE64) +64 56),4); (0x1000041b0,8) SEP ((bot(fun__fts_read_INODE64) +64 86),2); (0x1000041b0,8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x1000041b0,8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x1000041b0,8) SEP ((RSI_0 +64 8),8); (0x1000041b0,8) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); (0x1000041b0,8) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4); (0x1000041b0,8) SEP ((RSP_0 -64 8),8); (0x1000041b0,8) SEP ((RSP_0 -64 16),8); (0x1000041b0,8) SEP ((RSP_0 -64 24),8); (0x1000041b0,8) SEP ((RSP_0 -64 32),8); (0x1000041b0,8) SEP ((RSP_0 -64 40),8); (0x1000041b0,8) SEP ((RSP_0 -64 48),8); (0x1000041b0,8) SEP ((RSP_0 -64 52),4); (0x1000041b0,8) SEP ((RSP_0 -64 64),4); (0x1000041b0,8) SEP ((RSP_0 -64 64),8); (0x1000041b0,8) SEP ((RSP_0 -64 72),8); (0x1000041b0,8) SEP ((RSP_0 -64 76),4); (0x1000041b0,8) SEP ((RSP_0 -64 80),4); (0x1000041b0,8) SEP ((RSP_0 -64 84),4); (0x1000041b0,8) SEP ((RSP_0 -64 88),4); (0x1000041b0,8) SEP ((RSP_0 -64 92),4); (0x1000041b0,8) SEP ((RSP_0 -64 104),8); (0x1000041b0,8) SEP ((RSP_0 -64 108),4); (0x1000041b0,8) SEP ((RSP_0 -64 264),8); (0x1000041b0,8) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "100003153: MOV RDI, QWORD PTR [RIP + 4182] 7"
 Post  "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000315a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "10000315a: TEST RDI, RDI 3"
 Post  "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000315d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "10000315d: JE 4294979973 2"
 Post  "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002a94, blockId == 87 ##
######################################
*)

htriple "ht_100003185"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "100003185: TEST R13, R13 3"
 Post  "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003188"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "100003188: JE 4294980929 6"
 Post  "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002a94, blockId == 88 ##
######################################
*)

htriple "ht_10000315f"
 Separations ""
 Assertions  "(RDI,8) SEP (RSP_0,8); (RDI,8) SEP ((RSP_0 -64 8),8); (RDI,8) SEP ((RSP_0 -64 16),8); (RDI,8) SEP ((RSP_0 -64 24),8); (RDI,8) SEP ((RSP_0 -64 32),8); (RDI,8) SEP ((RSP_0 -64 40),8); (RDI,8) SEP ((RSP_0 -64 48),8); (RDI,8) SEP ((RSP_0 -64 52),4); (RDI,8) SEP ((RSP_0 -64 64),8); (RDI,8) SEP ((RSP_0 -64 72),8); (RDI,8) SEP ((RSP_0 -64 76),4); (RDI,8) SEP ((RSP_0 -64 80),4); (RDI,8) SEP ((RSP_0 -64 84),4); (RDI,8) SEP ((RSP_0 -64 88),4); (RDI,8) SEP ((RSP_0 -64 92),4); (RDI,8) SEP ((RSP_0 -64 104),8); (RDI,8) SEP ((RSP_0 -64 108),4); (RDI,8) SEP ((RSP_0 -64 264),8); (RDI,8) SEP ((RSP_0 -64 280),16)"
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "10000315f: MOV RAX, QWORD PTR [RDI] 3"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003162"
 Separations "(0x1000041b0,8) SEP (bot(fun____error),4); (0x1000041b0,8) SEP (bot(fun__fts_read_INODE64),8); (0x1000041b0,8) SEP (RSI_0,8); (0x1000041b0,8) SEP (RSP_0,8); (0x1000041b0,8) SEP ([0x100004018,8]_0,8); (0x1000041b0,8) SEP ([0x100004020,8]_0,4); (0x1000041b0,8) SEP ((bot(fun__fts_read_INODE64) +64 8),8); (0x1000041b0,8) SEP ((bot(fun__fts_read_INODE64) +64 24),8); (0x1000041b0,8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x1000041b0,8) SEP ((bot(fun__fts_read_INODE64) +64 56),4); (0x1000041b0,8) SEP ((bot(fun__fts_read_INODE64) +64 86),2); (0x1000041b0,8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x1000041b0,8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x1000041b0,8) SEP ((RSI_0 +64 8),8); (0x1000041b0,8) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); (0x1000041b0,8) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4); (0x1000041b0,8) SEP ((RSP_0 -64 8),8); (0x1000041b0,8) SEP ((RSP_0 -64 16),8); (0x1000041b0,8) SEP ((RSP_0 -64 24),8); (0x1000041b0,8) SEP ((RSP_0 -64 32),8); (0x1000041b0,8) SEP ((RSP_0 -64 40),8); (0x1000041b0,8) SEP ((RSP_0 -64 48),8); (0x1000041b0,8) SEP ((RSP_0 -64 52),4); (0x1000041b0,8) SEP ((RSP_0 -64 64),4); (0x1000041b0,8) SEP ((RSP_0 -64 64),8); (0x1000041b0,8) SEP ((RSP_0 -64 72),8); (0x1000041b0,8) SEP ((RSP_0 -64 76),4); (0x1000041b0,8) SEP ((RSP_0 -64 80),4); (0x1000041b0,8) SEP ((RSP_0 -64 84),4); (0x1000041b0,8) SEP ((RSP_0 -64 88),4); (0x1000041b0,8) SEP ((RSP_0 -64 92),4); (0x1000041b0,8) SEP ((RSP_0 -64 104),8); (0x1000041b0,8) SEP ((RSP_0 -64 108),4); (0x1000041b0,8) SEP ((RSP_0 -64 264),8); (0x1000041b0,8) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "100003162: MOV QWORD PTR [RIP + 4167], RAX 7"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003169"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "100003169: ExternalCall fun__free 5"
 Post  "RAX = bot(fun__free) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 FunctionConstraints "PRESERVES fun__free {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004018,8];[0x100004020,8];[0x100004180,8];[0x100004188,8];[0x100004190,8];[0x100004198,8];[0x1000041a0,1];[0x1000041a8,8];[0x1000041b0,8];[0x1000041b8,8];[0x1000041c0,8];[0x1000041c8,1];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 76),4];[(RSP_0 -64 80),4];[(RSP_0 -64 84),4];[(RSP_0 -64 88),4];[(RSP_0 -64 92),4];[(RSP_0 -64 104),8];[(RSP_0 -64 108),4];[(RSP_0 -64 264),8];[(RSP_0 -64 280),16]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000316e"
 Separations "(0x1000041b0,8) SEP (bot(fun____error),4); (0x1000041b0,8) SEP (bot(fun__fts_read_INODE64),8); (0x1000041b0,8) SEP (RSI_0,8); (0x1000041b0,8) SEP (RSP_0,8); (0x1000041b0,8) SEP ([0x100004018,8]_0,8); (0x1000041b0,8) SEP ([0x100004020,8]_0,4); (0x1000041b0,8) SEP ((bot(fun__fts_read_INODE64) +64 8),8); (0x1000041b0,8) SEP ((bot(fun__fts_read_INODE64) +64 24),8); (0x1000041b0,8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x1000041b0,8) SEP ((bot(fun__fts_read_INODE64) +64 56),4); (0x1000041b0,8) SEP ((bot(fun__fts_read_INODE64) +64 86),2); (0x1000041b0,8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x1000041b0,8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x1000041b0,8) SEP ((RSI_0 +64 8),8); (0x1000041b0,8) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); (0x1000041b0,8) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4); (0x1000041b0,8) SEP ((RSP_0 -64 8),8); (0x1000041b0,8) SEP ((RSP_0 -64 16),8); (0x1000041b0,8) SEP ((RSP_0 -64 24),8); (0x1000041b0,8) SEP ((RSP_0 -64 32),8); (0x1000041b0,8) SEP ((RSP_0 -64 40),8); (0x1000041b0,8) SEP ((RSP_0 -64 48),8); (0x1000041b0,8) SEP ((RSP_0 -64 52),4); (0x1000041b0,8) SEP ((RSP_0 -64 64),4); (0x1000041b0,8) SEP ((RSP_0 -64 64),8); (0x1000041b0,8) SEP ((RSP_0 -64 72),8); (0x1000041b0,8) SEP ((RSP_0 -64 76),4); (0x1000041b0,8) SEP ((RSP_0 -64 80),4); (0x1000041b0,8) SEP ((RSP_0 -64 84),4); (0x1000041b0,8) SEP ((RSP_0 -64 88),4); (0x1000041b0,8) SEP ((RSP_0 -64 92),4); (0x1000041b0,8) SEP ((RSP_0 -64 104),8); (0x1000041b0,8) SEP ((RSP_0 -64 108),4); (0x1000041b0,8) SEP ((RSP_0 -64 264),8); (0x1000041b0,8) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RAX = bot(fun__free) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "10000316e: MOV RDI, QWORD PTR [RIP + 4155] 7"
 Post  "RAX = bot(fun__free) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003175"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__free) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "100003175: TEST RDI, RDI 3"
 Post  "RAX = bot(fun__free) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003178"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__free) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "100003178: JNE 4294979935 2"
 Post  "RAX = bot(fun__free) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002a94, blockId == 89 ##
######################################
*)

htriple "ht_10000317a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__free) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "10000317a: MOV RDI, R14 3"
 Post  "RAX = bot(fun__free) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000317d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__free) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "10000317d: ExternalCall fun__malloc 5"
 Post  "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 FunctionConstraints "PRESERVES fun__malloc {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004018,8];[0x100004020,8];[0x100004180,8];[0x100004188,8];[0x100004190,8];[0x100004198,8];[0x1000041a0,1];[0x1000041a8,8];[0x1000041b0,8];[0x1000041b8,8];[0x1000041c0,8];[0x1000041c8,1];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 76),4];[(RSP_0 -64 80),4];[(RSP_0 -64 84),4];[(RSP_0 -64 88),4];[(RSP_0 -64 92),4];[(RSP_0 -64 104),8];[(RSP_0 -64 108),4];[(RSP_0 -64 264),8];[(RSP_0 -64 280),16]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003182"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "100003182: MOV R13, RAX 3"
 Post  "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002a94, blockId == 90 ##
######################################
*)

htriple "ht_10000318e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "10000318e: MOV RDI, R13 3"
 Post  "RAX = bot(fun__malloc) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003191"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "100003191: MOV RSI, R14 3"
 Post  "RAX = bot(fun__malloc) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003194"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "100003194: ExternalCall fun____bzero 5"
 Post  "RAX = bot(fun____bzero) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 FunctionConstraints "PRESERVES fun____bzero {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004018,8];[0x100004020,8];[0x100004180,8];[0x100004188,8];[0x100004190,8];[0x100004198,8];[0x1000041a0,1];[0x1000041a8,8];[0x1000041b0,8];[0x1000041b8,8];[0x1000041c0,8];[0x1000041c8,1];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 76),4];[(RSP_0 -64 80),4];[(RSP_0 -64 84),4];[(RSP_0 -64 88),4];[(RSP_0 -64 92),4];[(RSP_0 -64 104),8];[(RSP_0 -64 108),4];[(RSP_0 -64 264),8];[(RSP_0 -64 280),16]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003199"
 Separations "(0x1000041b8,8) SEP (bot(fun____error),4); (0x1000041b8,8) SEP (bot(fun__fts_read_INODE64),8); (0x1000041b8,8) SEP (RSI_0,8); (0x1000041b8,8) SEP (RSP_0,8); (0x1000041b8,8) SEP ([0x100004018,8]_0,8); (0x1000041b8,8) SEP ([0x100004020,8]_0,4); (0x1000041b8,8) SEP ((bot(fun__fts_read_INODE64) +64 8),8); (0x1000041b8,8) SEP ((bot(fun__fts_read_INODE64) +64 24),8); (0x1000041b8,8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x1000041b8,8) SEP ((bot(fun__fts_read_INODE64) +64 56),4); (0x1000041b8,8) SEP ((bot(fun__fts_read_INODE64) +64 86),2); (0x1000041b8,8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x1000041b8,8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x1000041b8,8) SEP ((RSI_0 +64 8),8); (0x1000041b8,8) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); (0x1000041b8,8) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4); (0x1000041b8,8) SEP ((RSP_0 -64 8),8); (0x1000041b8,8) SEP ((RSP_0 -64 16),8); (0x1000041b8,8) SEP ((RSP_0 -64 24),8); (0x1000041b8,8) SEP ((RSP_0 -64 32),8); (0x1000041b8,8) SEP ((RSP_0 -64 40),8); (0x1000041b8,8) SEP ((RSP_0 -64 48),8); (0x1000041b8,8) SEP ((RSP_0 -64 52),4); (0x1000041b8,8) SEP ((RSP_0 -64 64),4); (0x1000041b8,8) SEP ((RSP_0 -64 64),8); (0x1000041b8,8) SEP ((RSP_0 -64 72),8); (0x1000041b8,8) SEP ((RSP_0 -64 76),4); (0x1000041b8,8) SEP ((RSP_0 -64 80),4); (0x1000041b8,8) SEP ((RSP_0 -64 84),4); (0x1000041b8,8) SEP ((RSP_0 -64 88),4); (0x1000041b8,8) SEP ((RSP_0 -64 92),4); (0x1000041b8,8) SEP ((RSP_0 -64 104),8); (0x1000041b8,8) SEP ((RSP_0 -64 108),4); (0x1000041b8,8) SEP ((RSP_0 -64 264),8); (0x1000041b8,8) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RAX = bot(fun____bzero) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "100003199: MOV R8, QWORD PTR [RIP + 4120] 7"
 Post  "RAX = bot(fun____bzero) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000031a0"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun____bzero) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "1000031a0: TEST R8, R8 3"
 Post  "RAX = bot(fun____bzero) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000031a3"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun____bzero) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "1000031a3: JE 4294980523 6"
 Post  "RAX = bot(fun____bzero) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002a94, blockId == 91 ##
######################################
*)

htriple "ht_100003541"
 Separations "(0x1000041c8,1) SEP (bot(fun____error),4); (0x1000041c8,1) SEP (bot(fun__fts_read_INODE64),8); (0x1000041c8,1) SEP (RSI_0,8); (0x1000041c8,1) SEP (RSP_0,8); (0x1000041c8,1) SEP ([0x100004018,8]_0,8); (0x1000041c8,1) SEP ([0x100004020,8]_0,4); (0x1000041c8,1) SEP ((bot(fun__fts_read_INODE64) +64 8),8); (0x1000041c8,1) SEP ((bot(fun__fts_read_INODE64) +64 24),8); (0x1000041c8,1) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x1000041c8,1) SEP ((bot(fun__fts_read_INODE64) +64 56),4); (0x1000041c8,1) SEP ((bot(fun__fts_read_INODE64) +64 86),2); (0x1000041c8,1) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x1000041c8,1) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x1000041c8,1) SEP ((RSI_0 +64 8),8); (0x1000041c8,1) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); (0x1000041c8,1) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4); (0x1000041c8,1) SEP ((RSP_0 -64 8),8); (0x1000041c8,1) SEP ((RSP_0 -64 16),8); (0x1000041c8,1) SEP ((RSP_0 -64 24),8); (0x1000041c8,1) SEP ((RSP_0 -64 32),8); (0x1000041c8,1) SEP ((RSP_0 -64 40),8); (0x1000041c8,1) SEP ((RSP_0 -64 48),8); (0x1000041c8,1) SEP ((RSP_0 -64 52),4); (0x1000041c8,1) SEP ((RSP_0 -64 64),4); (0x1000041c8,1) SEP ((RSP_0 -64 64),8); (0x1000041c8,1) SEP ((RSP_0 -64 72),8); (0x1000041c8,1) SEP ((RSP_0 -64 76),4); (0x1000041c8,1) SEP ((RSP_0 -64 80),4); (0x1000041c8,1) SEP ((RSP_0 -64 84),4); (0x1000041c8,1) SEP ((RSP_0 -64 88),4); (0x1000041c8,1) SEP ((RSP_0 -64 92),4); (0x1000041c8,1) SEP ((RSP_0 -64 104),8); (0x1000041c8,1) SEP ((RSP_0 -64 108),4); (0x1000041c8,1) SEP ((RSP_0 -64 264),8); (0x1000041c8,1) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "100003541: MOV BYTE PTR [RIP + 3200], 1 7"
 Post  "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000041c8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003548"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000041c8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "100003548: LEA RDI, [RIP + 2470] 7"
 Post  "RAX = bot(fun__malloc) ; RDI = 0x100003ef5 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000041c8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000354f"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RDI = 0x100003ef5 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000041c8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "10000354f: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RDI = 0x100003ef5 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000041c8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003551"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RDI = 0x100003ef5 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000041c8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "100003551: ExternalCall fun__warnx 5"
 Post  "RAX = bot(fun__warnx) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000041c8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 FunctionConstraints "PRESERVES fun__warnx {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004018,8];[0x100004020,8];[0x100004180,8];[0x100004188,8];[0x100004190,8];[0x100004198,8];[0x1000041a0,1];[0x1000041a8,8];[0x1000041b0,8];[0x1000041b8,8];[0x1000041c0,8];[0x1000041c8,1];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 76),4];[(RSP_0 -64 80),4];[(RSP_0 -64 84),4];[(RSP_0 -64 88),4];[(RSP_0 -64 92),4];[(RSP_0 -64 104),8];[(RSP_0 -64 108),4];[(RSP_0 -64 264),8];[(RSP_0 -64 280),16]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003556"
 Separations "(0x1000041b8,8) SEP (bot(fun____error),4); (0x1000041b8,8) SEP (bot(fun__fts_read_INODE64),8); (0x1000041b8,8) SEP (RSI_0,8); (0x1000041b8,8) SEP (RSP_0,8); (0x1000041b8,8) SEP ([0x100004018,8]_0,8); (0x1000041b8,8) SEP ([0x100004020,8]_0,4); (0x1000041b8,8) SEP ((bot(fun__fts_read_INODE64) +64 8),8); (0x1000041b8,8) SEP ((bot(fun__fts_read_INODE64) +64 24),8); (0x1000041b8,8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x1000041b8,8) SEP ((bot(fun__fts_read_INODE64) +64 56),4); (0x1000041b8,8) SEP ((bot(fun__fts_read_INODE64) +64 86),2); (0x1000041b8,8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x1000041b8,8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x1000041b8,8) SEP ((RSI_0 +64 8),8); (0x1000041b8,8) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); (0x1000041b8,8) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4); (0x1000041b8,8) SEP ((RSP_0 -64 8),8); (0x1000041b8,8) SEP ((RSP_0 -64 16),8); (0x1000041b8,8) SEP ((RSP_0 -64 24),8); (0x1000041b8,8) SEP ((RSP_0 -64 32),8); (0x1000041b8,8) SEP ((RSP_0 -64 40),8); (0x1000041b8,8) SEP ((RSP_0 -64 48),8); (0x1000041b8,8) SEP ((RSP_0 -64 52),4); (0x1000041b8,8) SEP ((RSP_0 -64 64),4); (0x1000041b8,8) SEP ((RSP_0 -64 64),8); (0x1000041b8,8) SEP ((RSP_0 -64 72),8); (0x1000041b8,8) SEP ((RSP_0 -64 76),4); (0x1000041b8,8) SEP ((RSP_0 -64 80),4); (0x1000041b8,8) SEP ((RSP_0 -64 84),4); (0x1000041b8,8) SEP ((RSP_0 -64 88),4); (0x1000041b8,8) SEP ((RSP_0 -64 92),4); (0x1000041b8,8) SEP ((RSP_0 -64 104),8); (0x1000041b8,8) SEP ((RSP_0 -64 108),4); (0x1000041b8,8) SEP ((RSP_0 -64 264),8); (0x1000041b8,8) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RAX = bot(fun__warnx) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000041c8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "100003556: MOV R15, QWORD PTR [RIP + 3163] 7"
 Post  "RAX = bot(fun__warnx) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000041c8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000355d"
 Separations "(0x1000041a8,8) SEP (bot(fun____error),4); (0x1000041a8,8) SEP (bot(fun__fts_read_INODE64),8); (0x1000041a8,8) SEP (RSI_0,8); (0x1000041a8,8) SEP (RSP_0,8); (0x1000041a8,8) SEP ([0x100004018,8]_0,8); (0x1000041a8,8) SEP ([0x100004020,8]_0,4); (0x1000041a8,8) SEP ((bot(fun__fts_read_INODE64) +64 8),8); (0x1000041a8,8) SEP ((bot(fun__fts_read_INODE64) +64 24),8); (0x1000041a8,8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x1000041a8,8) SEP ((bot(fun__fts_read_INODE64) +64 56),4); (0x1000041a8,8) SEP ((bot(fun__fts_read_INODE64) +64 86),2); (0x1000041a8,8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x1000041a8,8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x1000041a8,8) SEP ((RSI_0 +64 8),8); (0x1000041a8,8) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); (0x1000041a8,8) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4); (0x1000041a8,8) SEP ((RSP_0 -64 8),8); (0x1000041a8,8) SEP ((RSP_0 -64 16),8); (0x1000041a8,8) SEP ((RSP_0 -64 24),8); (0x1000041a8,8) SEP ((RSP_0 -64 32),8); (0x1000041a8,8) SEP ((RSP_0 -64 40),8); (0x1000041a8,8) SEP ((RSP_0 -64 48),8); (0x1000041a8,8) SEP ((RSP_0 -64 52),4); (0x1000041a8,8) SEP ((RSP_0 -64 64),4); (0x1000041a8,8) SEP ((RSP_0 -64 64),8); (0x1000041a8,8) SEP ((RSP_0 -64 72),8); (0x1000041a8,8) SEP ((RSP_0 -64 76),4); (0x1000041a8,8) SEP ((RSP_0 -64 80),4); (0x1000041a8,8) SEP ((RSP_0 -64 84),4); (0x1000041a8,8) SEP ((RSP_0 -64 88),4); (0x1000041a8,8) SEP ((RSP_0 -64 92),4); (0x1000041a8,8) SEP ((RSP_0 -64 104),8); (0x1000041a8,8) SEP ((RSP_0 -64 108),4); (0x1000041a8,8) SEP ((RSP_0 -64 264),8); (0x1000041a8,8) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RAX = bot(fun__warnx) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000041c8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "10000355d: MOV R13, QWORD PTR [RIP + 3140] 7"
 Post  "RAX = bot(fun__warnx) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000041c8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003564"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__warnx) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000041c8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "100003564: JMP 4294980549 5"
 Post  "RAX = bot(fun__warnx) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000041c8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002a94, blockId == 92 ##
######################################
*)

htriple "ht_1000031a9"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun____bzero) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "1000031a9: MOV R9, RBX 3"
 Post  "RAX = bot(fun____bzero) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000031ac"
 Separations "(0x1000041a8,8) SEP (bot(fun____error),4); (0x1000041a8,8) SEP (bot(fun__fts_read_INODE64),8); (0x1000041a8,8) SEP (RSI_0,8); (0x1000041a8,8) SEP (RSP_0,8); (0x1000041a8,8) SEP ([0x100004018,8]_0,8); (0x1000041a8,8) SEP ([0x100004020,8]_0,4); (0x1000041a8,8) SEP ((bot(fun__fts_read_INODE64) +64 8),8); (0x1000041a8,8) SEP ((bot(fun__fts_read_INODE64) +64 24),8); (0x1000041a8,8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x1000041a8,8) SEP ((bot(fun__fts_read_INODE64) +64 56),4); (0x1000041a8,8) SEP ((bot(fun__fts_read_INODE64) +64 86),2); (0x1000041a8,8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x1000041a8,8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x1000041a8,8) SEP ((RSI_0 +64 8),8); (0x1000041a8,8) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); (0x1000041a8,8) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4); (0x1000041a8,8) SEP ((RSP_0 -64 8),8); (0x1000041a8,8) SEP ((RSP_0 -64 16),8); (0x1000041a8,8) SEP ((RSP_0 -64 24),8); (0x1000041a8,8) SEP ((RSP_0 -64 32),8); (0x1000041a8,8) SEP ((RSP_0 -64 40),8); (0x1000041a8,8) SEP ((RSP_0 -64 48),8); (0x1000041a8,8) SEP ((RSP_0 -64 52),4); (0x1000041a8,8) SEP ((RSP_0 -64 64),4); (0x1000041a8,8) SEP ((RSP_0 -64 64),8); (0x1000041a8,8) SEP ((RSP_0 -64 72),8); (0x1000041a8,8) SEP ((RSP_0 -64 76),4); (0x1000041a8,8) SEP ((RSP_0 -64 80),4); (0x1000041a8,8) SEP ((RSP_0 -64 84),4); (0x1000041a8,8) SEP ((RSP_0 -64 88),4); (0x1000041a8,8) SEP ((RSP_0 -64 92),4); (0x1000041a8,8) SEP ((RSP_0 -64 104),8); (0x1000041a8,8) SEP ((RSP_0 -64 108),4); (0x1000041a8,8) SEP ((RSP_0 -64 264),8); (0x1000041a8,8) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RAX = bot(fun____bzero) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "1000031ac: MOV RDI, QWORD PTR [RIP + 4085] 7"
 Post  "RAX = bot(fun____bzero) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000031b3"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun____bzero) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "1000031b3: XOR ESI, ESI 2"
 Post  "RAX = bot(fun____bzero) ; RSI = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002a94, blockId == 93 ##
######################################
*)

htriple "ht_1000033ab"
 Separations "(0x1000041a8,8) SEP (bot(fun____error),4); (0x1000041a8,8) SEP (bot(fun__fts_read_INODE64),8); (0x1000041a8,8) SEP (RSI_0,8); (0x1000041a8,8) SEP (RSP_0,8); (0x1000041a8,8) SEP ([0x100004018,8]_0,8); (0x1000041a8,8) SEP ([0x100004020,8]_0,4); (0x1000041a8,8) SEP ((bot(fun__fts_read_INODE64) +64 8),8); (0x1000041a8,8) SEP ((bot(fun__fts_read_INODE64) +64 24),8); (0x1000041a8,8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x1000041a8,8) SEP ((bot(fun__fts_read_INODE64) +64 56),4); (0x1000041a8,8) SEP ((bot(fun__fts_read_INODE64) +64 86),2); (0x1000041a8,8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x1000041a8,8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x1000041a8,8) SEP ((RSI_0 +64 8),8); (0x1000041a8,8) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); (0x1000041a8,8) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4); (0x1000041a8,8) SEP ((RSP_0 -64 8),8); (0x1000041a8,8) SEP ((RSP_0 -64 16),8); (0x1000041a8,8) SEP ((RSP_0 -64 24),8); (0x1000041a8,8) SEP ((RSP_0 -64 32),8); (0x1000041a8,8) SEP ((RSP_0 -64 40),8); (0x1000041a8,8) SEP ((RSP_0 -64 48),8); (0x1000041a8,8) SEP ((RSP_0 -64 52),4); (0x1000041a8,8) SEP ((RSP_0 -64 64),4); (0x1000041a8,8) SEP ((RSP_0 -64 64),8); (0x1000041a8,8) SEP ((RSP_0 -64 72),8); (0x1000041a8,8) SEP ((RSP_0 -64 76),4); (0x1000041a8,8) SEP ((RSP_0 -64 80),4); (0x1000041a8,8) SEP ((RSP_0 -64 84),4); (0x1000041a8,8) SEP ((RSP_0 -64 88),4); (0x1000041a8,8) SEP ((RSP_0 -64 92),4); (0x1000041a8,8) SEP ((RSP_0 -64 104),8); (0x1000041a8,8) SEP ((RSP_0 -64 108),4); (0x1000041a8,8) SEP ((RSP_0 -64 264),8); (0x1000041a8,8) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RAX = bot(fun____bzero) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "1000033ab: MOV RDI, QWORD PTR [RIP + 3574] 7"
 Post  "RAX = bot(fun____bzero) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002a94, blockId == 94 ##
######################################
*)

htriple "ht_1000031be"
 Separations ""
 Assertions  "(RCX,8) SEP (RSP_0,8); (RCX,8) SEP ((RSP_0 -64 8),8); (RCX,8) SEP ((RSP_0 -64 16),8); (RCX,8) SEP ((RSP_0 -64 24),8); (RCX,8) SEP ((RSP_0 -64 32),8); (RCX,8) SEP ((RSP_0 -64 40),8); (RCX,8) SEP ((RSP_0 -64 48),8); (RCX,8) SEP ((RSP_0 -64 52),4); (RCX,8) SEP ((RSP_0 -64 64),8); (RCX,8) SEP ((RSP_0 -64 72),8); (RCX,8) SEP ((RSP_0 -64 76),4); (RCX,8) SEP ((RSP_0 -64 80),4); (RCX,8) SEP ((RSP_0 -64 84),4); (RCX,8) SEP ((RSP_0 -64 88),4); (RCX,8) SEP ((RSP_0 -64 92),4); (RCX,8) SEP ((RSP_0 -64 104),8); (RCX,8) SEP ((RSP_0 -64 108),4); (RCX,8) SEP ((RSP_0 -64 264),8); (RCX,8) SEP ((RSP_0 -64 280),16)"
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "1000031be: MOV RAX, QWORD PTR [RCX] 3"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000031c1"
 Separations ""
 Assertions  "(RDI,8) SEP (RSP_0,8); (RDI,8) SEP ((RSP_0 -64 8),8); (RDI,8) SEP ((RSP_0 -64 16),8); (RDI,8) SEP ((RSP_0 -64 24),8); (RDI,8) SEP ((RSP_0 -64 32),8); (RDI,8) SEP ((RSP_0 -64 40),8); (RDI,8) SEP ((RSP_0 -64 48),8); (RDI,8) SEP ((RSP_0 -64 52),4); (RDI,8) SEP ((RSP_0 -64 64),8); (RDI,8) SEP ((RSP_0 -64 72),8); (RDI,8) SEP ((RSP_0 -64 76),4); (RDI,8) SEP ((RSP_0 -64 80),4); (RDI,8) SEP ((RSP_0 -64 84),4); (RDI,8) SEP ((RSP_0 -64 88),4); (RDI,8) SEP ((RSP_0 -64 92),4); (RDI,8) SEP ((RSP_0 -64 104),8); (RDI,8) SEP ((RSP_0 -64 108),4); (RDI,8) SEP ((RSP_0 -64 264),8); (RDI,8) SEP ((RSP_0 -64 280),16); ((RDI +64 (RSI *64 8)),8) SEP (RSP_0,8); ((RDI +64 (RSI *64 8)),8) SEP ((RSP_0 -64 8),8); ((RDI +64 (RSI *64 8)),8) SEP ((RSP_0 -64 16),8); ((RDI +64 (RSI *64 8)),8) SEP ((RSP_0 -64 24),8); ((RDI +64 (RSI *64 8)),8) SEP ((RSP_0 -64 32),8); ((RDI +64 (RSI *64 8)),8) SEP ((RSP_0 -64 40),8); ((RDI +64 (RSI *64 8)),8) SEP ((RSP_0 -64 48),8); ((RDI +64 (RSI *64 8)),8) SEP ((RSP_0 -64 52),4); ((RDI +64 (RSI *64 8)),8) SEP ((RSP_0 -64 64),8); ((RDI +64 (RSI *64 8)),8) SEP ((RSP_0 -64 72),8); ((RDI +64 (RSI *64 8)),8) SEP ((RSP_0 -64 76),4); ((RDI +64 (RSI *64 8)),8) SEP ((RSP_0 -64 80),4); ((RDI +64 (RSI *64 8)),8) SEP ((RSP_0 -64 84),4); ((RDI +64 (RSI *64 8)),8) SEP ((RSP_0 -64 88),4); ((RDI +64 (RSI *64 8)),8) SEP ((RSP_0 -64 92),4); ((RDI +64 (RSI *64 8)),8) SEP ((RSP_0 -64 104),8); ((RDI +64 (RSI *64 8)),8) SEP ((RSP_0 -64 108),4); ((RDI +64 (RSI *64 8)),8) SEP ((RSP_0 -64 264),8); ((RDI +64 (RSI *64 8)),8) SEP ((RSP_0 -64 280),16)"
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "1000031c1: MOV QWORD PTR [RDI + RSI * 8], RAX 4"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000031c5"
 Separations ""
 Assertions  "((RCX +64 20),4) SEP (RSP_0,8); ((RCX +64 20),4) SEP ((RSP_0 -64 8),8); ((RCX +64 20),4) SEP ((RSP_0 -64 16),8); ((RCX +64 20),4) SEP ((RSP_0 -64 24),8); ((RCX +64 20),4) SEP ((RSP_0 -64 32),8); ((RCX +64 20),4) SEP ((RSP_0 -64 40),8); ((RCX +64 20),4) SEP ((RSP_0 -64 48),8); ((RCX +64 20),4) SEP ((RSP_0 -64 52),4); ((RCX +64 20),4) SEP ((RSP_0 -64 64),8); ((RCX +64 20),4) SEP ((RSP_0 -64 72),8); ((RCX +64 20),4) SEP ((RSP_0 -64 76),4); ((RCX +64 20),4) SEP ((RSP_0 -64 80),4); ((RCX +64 20),4) SEP ((RSP_0 -64 84),4); ((RCX +64 20),4) SEP ((RSP_0 -64 88),4); ((RCX +64 20),4) SEP ((RSP_0 -64 92),4); ((RCX +64 20),4) SEP ((RSP_0 -64 104),8); ((RCX +64 20),4) SEP ((RSP_0 -64 108),4); ((RCX +64 20),4) SEP ((RSP_0 -64 264),8); ((RCX +64 20),4) SEP ((RSP_0 -64 280),16)"
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "1000031c5: MOVSXD RAX, DWORD PTR [RCX + 20] 4"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000031c9"
 Separations ""
 Assertions  "((RCX +64 24),8) SEP (RSP_0,8); ((RCX +64 24),8) SEP ((RSP_0 -64 8),8); ((RCX +64 24),8) SEP ((RSP_0 -64 16),8); ((RCX +64 24),8) SEP ((RSP_0 -64 24),8); ((RCX +64 24),8) SEP ((RSP_0 -64 32),8); ((RCX +64 24),8) SEP ((RSP_0 -64 40),8); ((RCX +64 24),8) SEP ((RSP_0 -64 48),8); ((RCX +64 24),8) SEP ((RSP_0 -64 52),4); ((RCX +64 24),8) SEP ((RSP_0 -64 64),8); ((RCX +64 24),8) SEP ((RSP_0 -64 72),8); ((RCX +64 24),8) SEP ((RSP_0 -64 76),4); ((RCX +64 24),8) SEP ((RSP_0 -64 80),4); ((RCX +64 24),8) SEP ((RSP_0 -64 84),4); ((RCX +64 24),8) SEP ((RSP_0 -64 88),4); ((RCX +64 24),8) SEP ((RSP_0 -64 92),4); ((RCX +64 24),8) SEP ((RSP_0 -64 104),8); ((RCX +64 24),8) SEP ((RSP_0 -64 108),4); ((RCX +64 24),8) SEP ((RSP_0 -64 264),8); ((RCX +64 24),8) SEP ((RSP_0 -64 280),16)"
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "1000031c9: XOR RAX, QWORD PTR [RCX + 24] 4"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000031cd"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "1000031cd: XOR EDX, EDX 2"
 Post  "RDX = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000031cf"
 Separations ""
 Assertions  ""
 Pre   "RDX = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "1000031cf: DIV R15 3"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000031d2"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "1000031d2: MOVSXD RAX, EDX 3"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000031d5"
 Separations ""
 Assertions  "((R13 +64 (RAX *64 8)),8) SEP (RSP_0,8); ((R13 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 8),8); ((R13 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 16),8); ((R13 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 24),8); ((R13 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 32),8); ((R13 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 40),8); ((R13 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 48),8); ((R13 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 52),4); ((R13 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 64),8); ((R13 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 72),8); ((R13 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 76),4); ((R13 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 80),4); ((R13 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 84),4); ((R13 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 88),4); ((R13 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 92),4); ((R13 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 104),8); ((R13 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 108),4); ((R13 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 264),8); ((R13 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 280),16)"
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "1000031d5: MOV RBX, QWORD PTR [R13 + RAX * 8] 5"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000031da"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "1000031da: MOV EDX, 0 5"
 Post  "RDX = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000031df"
 Separations ""
 Assertions  ""
 Pre   "RDX = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "1000031df: TEST RBX, RBX 3"
 Post  "RDX = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000031e2"
 Separations ""
 Assertions  ""
 Pre   "RDX = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "1000031e2: JE 4294980077 2"
 Post  "RDX = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002a94, blockId == 95 ##
######################################
*)

htriple "ht_1000031ff"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "1000031ff: INC RSI 3"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003202"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "100003202: CMP RSI, R8 3"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003205"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "100003205: JNE 4294980021 2"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002a94, blockId == 96 ##
######################################
*)

htriple "ht_1000031e4"
 Separations ""
 Assertions  "((RBX +64 8),8) SEP (RSP_0,8); ((RBX +64 8),8) SEP ((RSP_0 -64 8),8); ((RBX +64 8),8) SEP ((RSP_0 -64 16),8); ((RBX +64 8),8) SEP ((RSP_0 -64 24),8); ((RBX +64 8),8) SEP ((RSP_0 -64 32),8); ((RBX +64 8),8) SEP ((RSP_0 -64 40),8); ((RBX +64 8),8) SEP ((RSP_0 -64 48),8); ((RBX +64 8),8) SEP ((RSP_0 -64 52),4); ((RBX +64 8),8) SEP ((RSP_0 -64 64),8); ((RBX +64 8),8) SEP ((RSP_0 -64 72),8); ((RBX +64 8),8) SEP ((RSP_0 -64 76),4); ((RBX +64 8),8) SEP ((RSP_0 -64 80),4); ((RBX +64 8),8) SEP ((RSP_0 -64 84),4); ((RBX +64 8),8) SEP ((RSP_0 -64 88),4); ((RBX +64 8),8) SEP ((RSP_0 -64 92),4); ((RBX +64 8),8) SEP ((RSP_0 -64 104),8); ((RBX +64 8),8) SEP ((RSP_0 -64 108),4); ((RBX +64 8),8) SEP ((RSP_0 -64 264),8); ((RBX +64 8),8) SEP ((RSP_0 -64 280),16)"
 Pre   "RDX = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "1000031e4: MOV QWORD PTR [RBX + 8], RCX 4"
 Post  "RDX = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000031e8"
 Separations ""
 Assertions  "((R13 +64 (RAX *64 8)),8) SEP (RSP_0,8); ((R13 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 8),8); ((R13 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 16),8); ((R13 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 24),8); ((R13 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 32),8); ((R13 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 40),8); ((R13 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 48),8); ((R13 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 52),4); ((R13 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 64),8); ((R13 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 72),8); ((R13 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 76),4); ((R13 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 80),4); ((R13 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 84),4); ((R13 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 88),4); ((R13 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 92),4); ((R13 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 104),8); ((R13 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 108),4); ((R13 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 264),8); ((R13 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 280),16)"
 Pre   "RDX = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "1000031e8: MOV RDX, QWORD PTR [R13 + RAX * 8] 5"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002a94, blockId == 97 ##
######################################
*)

htriple "ht_1000031ed"
 Separations ""
 Assertions  "(RCX,8) SEP (RSP_0,8); (RCX,8) SEP ((RSP_0 -64 8),8); (RCX,8) SEP ((RSP_0 -64 16),8); (RCX,8) SEP ((RSP_0 -64 24),8); (RCX,8) SEP ((RSP_0 -64 32),8); (RCX,8) SEP ((RSP_0 -64 40),8); (RCX,8) SEP ((RSP_0 -64 48),8); (RCX,8) SEP ((RSP_0 -64 52),4); (RCX,8) SEP ((RSP_0 -64 64),8); (RCX,8) SEP ((RSP_0 -64 72),8); (RCX,8) SEP ((RSP_0 -64 76),4); (RCX,8) SEP ((RSP_0 -64 80),4); (RCX,8) SEP ((RSP_0 -64 84),4); (RCX,8) SEP ((RSP_0 -64 88),4); (RCX,8) SEP ((RSP_0 -64 92),4); (RCX,8) SEP ((RSP_0 -64 104),8); (RCX,8) SEP ((RSP_0 -64 108),4); (RCX,8) SEP ((RSP_0 -64 264),8); (RCX,8) SEP ((RSP_0 -64 280),16)"
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "1000031ed: MOV QWORD PTR [RCX], RDX 3"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000031f0"
 Separations ""
 Assertions  "((RCX +64 8),8) SEP (RSP_0,8); ((RCX +64 8),8) SEP ((RSP_0 -64 8),8); ((RCX +64 8),8) SEP ((RSP_0 -64 16),8); ((RCX +64 8),8) SEP ((RSP_0 -64 24),8); ((RCX +64 8),8) SEP ((RSP_0 -64 32),8); ((RCX +64 8),8) SEP ((RSP_0 -64 40),8); ((RCX +64 8),8) SEP ((RSP_0 -64 48),8); ((RCX +64 8),8) SEP ((RSP_0 -64 52),4); ((RCX +64 8),8) SEP ((RSP_0 -64 64),8); ((RCX +64 8),8) SEP ((RSP_0 -64 72),8); ((RCX +64 8),8) SEP ((RSP_0 -64 76),4); ((RCX +64 8),8) SEP ((RSP_0 -64 80),4); ((RCX +64 8),8) SEP ((RSP_0 -64 84),4); ((RCX +64 8),8) SEP ((RSP_0 -64 88),4); ((RCX +64 8),8) SEP ((RSP_0 -64 92),4); ((RCX +64 8),8) SEP ((RSP_0 -64 104),8); ((RCX +64 8),8) SEP ((RSP_0 -64 108),4); ((RCX +64 8),8) SEP ((RSP_0 -64 264),8); ((RCX +64 8),8) SEP ((RSP_0 -64 280),16)"
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "1000031f0: MOV QWORD PTR [RCX + 8], 0 8"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000031f8"
 Separations ""
 Assertions  "((R13 +64 (RAX *64 8)),8) SEP (RSP_0,8); ((R13 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 8),8); ((R13 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 16),8); ((R13 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 24),8); ((R13 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 32),8); ((R13 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 40),8); ((R13 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 48),8); ((R13 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 52),4); ((R13 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 64),8); ((R13 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 72),8); ((R13 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 76),4); ((R13 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 80),4); ((R13 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 84),4); ((R13 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 88),4); ((R13 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 92),4); ((R13 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 104),8); ((R13 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 108),4); ((R13 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 264),8); ((R13 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 280),16)"
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "1000031f8: MOV QWORD PTR [R13 + RAX * 8], RCX 5"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000031fd"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "1000031fd: JMP 4294980021 2"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002a94, blockId == 98 ##
######################################
*)

htriple "ht_1000031b5"
 Separations ""
 Assertions  "(RDI,8) SEP (RSP_0,8); (RDI,8) SEP ((RSP_0 -64 8),8); (RDI,8) SEP ((RSP_0 -64 16),8); (RDI,8) SEP ((RSP_0 -64 24),8); (RDI,8) SEP ((RSP_0 -64 32),8); (RDI,8) SEP ((RSP_0 -64 40),8); (RDI,8) SEP ((RSP_0 -64 48),8); (RDI,8) SEP ((RSP_0 -64 52),4); (RDI,8) SEP ((RSP_0 -64 64),8); (RDI,8) SEP ((RSP_0 -64 72),8); (RDI,8) SEP ((RSP_0 -64 76),4); (RDI,8) SEP ((RSP_0 -64 80),4); (RDI,8) SEP ((RSP_0 -64 84),4); (RDI,8) SEP ((RSP_0 -64 88),4); (RDI,8) SEP ((RSP_0 -64 92),4); (RDI,8) SEP ((RSP_0 -64 104),8); (RDI,8) SEP ((RSP_0 -64 108),4); (RDI,8) SEP ((RSP_0 -64 264),8); (RDI,8) SEP ((RSP_0 -64 280),16); ((RDI +64 (RSI *64 8)),8) SEP (RSP_0,8); ((RDI +64 (RSI *64 8)),8) SEP ((RSP_0 -64 8),8); ((RDI +64 (RSI *64 8)),8) SEP ((RSP_0 -64 16),8); ((RDI +64 (RSI *64 8)),8) SEP ((RSP_0 -64 24),8); ((RDI +64 (RSI *64 8)),8) SEP ((RSP_0 -64 32),8); ((RDI +64 (RSI *64 8)),8) SEP ((RSP_0 -64 40),8); ((RDI +64 (RSI *64 8)),8) SEP ((RSP_0 -64 48),8); ((RDI +64 (RSI *64 8)),8) SEP ((RSP_0 -64 52),4); ((RDI +64 (RSI *64 8)),8) SEP ((RSP_0 -64 64),8); ((RDI +64 (RSI *64 8)),8) SEP ((RSP_0 -64 72),8); ((RDI +64 (RSI *64 8)),8) SEP ((RSP_0 -64 76),4); ((RDI +64 (RSI *64 8)),8) SEP ((RSP_0 -64 80),4); ((RDI +64 (RSI *64 8)),8) SEP ((RSP_0 -64 84),4); ((RDI +64 (RSI *64 8)),8) SEP ((RSP_0 -64 88),4); ((RDI +64 (RSI *64 8)),8) SEP ((RSP_0 -64 92),4); ((RDI +64 (RSI *64 8)),8) SEP ((RSP_0 -64 104),8); ((RDI +64 (RSI *64 8)),8) SEP ((RSP_0 -64 108),4); ((RDI +64 (RSI *64 8)),8) SEP ((RSP_0 -64 264),8); ((RDI +64 (RSI *64 8)),8) SEP ((RSP_0 -64 280),16)"
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "1000031b5: MOV RCX, QWORD PTR [RDI + RSI * 8] 4"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000031b9"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "1000031b9: TEST RCX, RCX 3"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000031bc"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "1000031bc: JE 4294980095 2"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002a94, blockId == 99 ##
######################################
*)

htriple "ht_100003207"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "100003207: MOV RBX, R9 3"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000320a"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "10000320a: JMP 4294980530 5"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 100002a94, blockId == 100 ##
#######################################
*)

htriple "ht_10000321e"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "10000321e: ExternalCall fun__free 5"
 Post  "RAX = bot(fun__free) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 FunctionConstraints "PRESERVES fun__free {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004018,8];[0x100004020,8];[0x100004180,8];[0x100004188,8];[0x100004190,8];[0x100004198,8];[0x1000041a0,1];[0x1000041a8,8];[0x1000041b0,8];[0x1000041b8,8];[0x1000041c0,8];[0x1000041c8,1];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 76),4];[(RSP_0 -64 80),4];[(RSP_0 -64 84),4];[(RSP_0 -64 88),4];[(RSP_0 -64 92),4];[(RSP_0 -64 104),8];[(RSP_0 -64 108),4];[(RSP_0 -64 264),8];[(RSP_0 -64 280),16]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003223"
 Separations "(0x100004180,8) SEP (bot(fun____error),4); (0x100004180,8) SEP (bot(fun__fts_read_INODE64),8); (0x100004180,8) SEP (RSI_0,8); (0x100004180,8) SEP (RSP_0,8); (0x100004180,8) SEP ([0x100004018,8]_0,8); (0x100004180,8) SEP ([0x100004020,8]_0,4); (0x100004180,8) SEP ((bot(fun__fts_read_INODE64) +64 8),8); (0x100004180,8) SEP ((bot(fun__fts_read_INODE64) +64 24),8); (0x100004180,8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x100004180,8) SEP ((bot(fun__fts_read_INODE64) +64 56),4); (0x100004180,8) SEP ((bot(fun__fts_read_INODE64) +64 86),2); (0x100004180,8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x100004180,8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x100004180,8) SEP ((RSI_0 +64 8),8); (0x100004180,8) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); (0x100004180,8) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4); (0x100004180,8) SEP ((RSP_0 -64 8),8); (0x100004180,8) SEP ((RSP_0 -64 16),8); (0x100004180,8) SEP ((RSP_0 -64 24),8); (0x100004180,8) SEP ((RSP_0 -64 32),8); (0x100004180,8) SEP ((RSP_0 -64 40),8); (0x100004180,8) SEP ((RSP_0 -64 48),8); (0x100004180,8) SEP ((RSP_0 -64 52),4); (0x100004180,8) SEP ((RSP_0 -64 64),4); (0x100004180,8) SEP ((RSP_0 -64 64),8); (0x100004180,8) SEP ((RSP_0 -64 72),8); (0x100004180,8) SEP ((RSP_0 -64 76),4); (0x100004180,8) SEP ((RSP_0 -64 80),4); (0x100004180,8) SEP ((RSP_0 -64 84),4); (0x100004180,8) SEP ((RSP_0 -64 88),4); (0x100004180,8) SEP ((RSP_0 -64 92),4); (0x100004180,8) SEP ((RSP_0 -64 104),8); (0x100004180,8) SEP ((RSP_0 -64 108),4); (0x100004180,8) SEP ((RSP_0 -64 264),8); (0x100004180,8) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RAX = bot(fun__free) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100003223: MOV QWORD PTR [RIP + 3926], R14 7"
 Post  "RAX = bot(fun__free) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004180,8] = bot(fun__malloc) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000322a"
 Separations "(0x100004190,8) SEP (bot(fun____error),4); (0x100004190,8) SEP (bot(fun__fts_read_INODE64),8); (0x100004190,8) SEP (RSI_0,8); (0x100004190,8) SEP (RSP_0,8); (0x100004190,8) SEP ([0x100004018,8]_0,8); (0x100004190,8) SEP ([0x100004020,8]_0,4); (0x100004190,8) SEP ((bot(fun__fts_read_INODE64) +64 8),8); (0x100004190,8) SEP ((bot(fun__fts_read_INODE64) +64 24),8); (0x100004190,8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x100004190,8) SEP ((bot(fun__fts_read_INODE64) +64 56),4); (0x100004190,8) SEP ((bot(fun__fts_read_INODE64) +64 86),2); (0x100004190,8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x100004190,8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x100004190,8) SEP ((RSI_0 +64 8),8); (0x100004190,8) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); (0x100004190,8) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4); (0x100004190,8) SEP ((RSP_0 -64 8),8); (0x100004190,8) SEP ((RSP_0 -64 16),8); (0x100004190,8) SEP ((RSP_0 -64 24),8); (0x100004190,8) SEP ((RSP_0 -64 32),8); (0x100004190,8) SEP ((RSP_0 -64 40),8); (0x100004190,8) SEP ((RSP_0 -64 48),8); (0x100004190,8) SEP ((RSP_0 -64 52),4); (0x100004190,8) SEP ((RSP_0 -64 64),4); (0x100004190,8) SEP ((RSP_0 -64 64),8); (0x100004190,8) SEP ((RSP_0 -64 72),8); (0x100004190,8) SEP ((RSP_0 -64 76),4); (0x100004190,8) SEP ((RSP_0 -64 80),4); (0x100004190,8) SEP ((RSP_0 -64 84),4); (0x100004190,8) SEP ((RSP_0 -64 88),4); (0x100004190,8) SEP ((RSP_0 -64 92),4); (0x100004190,8) SEP ((RSP_0 -64 104),8); (0x100004190,8) SEP ((RSP_0 -64 108),4); (0x100004190,8) SEP ((RSP_0 -64 264),8); (0x100004190,8) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RAX = bot(fun__free) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004180,8] = bot(fun__malloc) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "10000322a: MOV QWORD PTR [RIP + 3935], R13 7"
 Post  "RAX = bot(fun__free) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004180,8] = bot(fun__malloc) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 100002a94, blockId == 101 ##
#######################################
*)

htriple "ht_100003231"
 Separations ""
 Assertions  "(RBX,4) SEP (RSP_0,8); (RBX,4) SEP ((RSP_0 -64 8),8); (RBX,4) SEP ((RSP_0 -64 16),8); (RBX,4) SEP ((RSP_0 -64 24),8); (RBX,4) SEP ((RSP_0 -64 32),8); (RBX,4) SEP ((RSP_0 -64 40),8); (RBX,4) SEP ((RSP_0 -64 48),8); (RBX,4) SEP ((RSP_0 -64 52),4); (RBX,4) SEP ((RSP_0 -64 64),8); (RBX,4) SEP ((RSP_0 -64 72),8); (RBX,4) SEP ((RSP_0 -64 76),4); (RBX,4) SEP ((RSP_0 -64 80),4); (RBX,4) SEP ((RSP_0 -64 84),4); (RBX,4) SEP ((RSP_0 -64 88),4); (RBX,4) SEP ((RSP_0 -64 92),4); (RBX,4) SEP ((RSP_0 -64 104),8); (RBX,4) SEP ((RSP_0 -64 108),4); (RBX,4) SEP ((RSP_0 -64 264),8); (RBX,4) SEP ((RSP_0 -64 280),16)"
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100003231: MOVSXD RCX, DWORD PTR [RBX] 3"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003234"
 Separations ""
 Assertions  "((RBX +64 8),8) SEP (RSP_0,8); ((RBX +64 8),8) SEP ((RSP_0 -64 8),8); ((RBX +64 8),8) SEP ((RSP_0 -64 16),8); ((RBX +64 8),8) SEP ((RSP_0 -64 24),8); ((RBX +64 8),8) SEP ((RSP_0 -64 32),8); ((RBX +64 8),8) SEP ((RSP_0 -64 40),8); ((RBX +64 8),8) SEP ((RSP_0 -64 48),8); ((RBX +64 8),8) SEP ((RSP_0 -64 52),4); ((RBX +64 8),8) SEP ((RSP_0 -64 64),8); ((RBX +64 8),8) SEP ((RSP_0 -64 72),8); ((RBX +64 8),8) SEP ((RSP_0 -64 76),4); ((RBX +64 8),8) SEP ((RSP_0 -64 80),4); ((RBX +64 8),8) SEP ((RSP_0 -64 84),4); ((RBX +64 8),8) SEP ((RSP_0 -64 88),4); ((RBX +64 8),8) SEP ((RSP_0 -64 92),4); ((RBX +64 8),8) SEP ((RSP_0 -64 104),8); ((RBX +64 8),8) SEP ((RSP_0 -64 108),4); ((RBX +64 8),8) SEP ((RSP_0 -64 264),8); ((RBX +64 8),8) SEP ((RSP_0 -64 280),16)"
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100003234: MOV RSI, QWORD PTR [RBX + 8] 4"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003238"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100003238: MOV RAX, RCX 3"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000323b"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "10000323b: XOR RAX, RSI 3"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000323e"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "10000323e: XOR EDX, EDX 2"
 Post  "RDX = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003240"
 Separations ""
 Assertions  ""
 Pre   "RDX = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100003240: DIV R13 3"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003243"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100003243: MOVSXD R15, EDX 3"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003246"
 Separations ""
 Assertions  "((R14 +64 (R15 *64 8)),8) SEP (RSP_0,8); ((R14 +64 (R15 *64 8)),8) SEP ((RSP_0 -64 8),8); ((R14 +64 (R15 *64 8)),8) SEP ((RSP_0 -64 16),8); ((R14 +64 (R15 *64 8)),8) SEP ((RSP_0 -64 24),8); ((R14 +64 (R15 *64 8)),8) SEP ((RSP_0 -64 32),8); ((R14 +64 (R15 *64 8)),8) SEP ((RSP_0 -64 40),8); ((R14 +64 (R15 *64 8)),8) SEP ((RSP_0 -64 48),8); ((R14 +64 (R15 *64 8)),8) SEP ((RSP_0 -64 52),4); ((R14 +64 (R15 *64 8)),8) SEP ((RSP_0 -64 64),8); ((R14 +64 (R15 *64 8)),8) SEP ((RSP_0 -64 72),8); ((R14 +64 (R15 *64 8)),8) SEP ((RSP_0 -64 76),4); ((R14 +64 (R15 *64 8)),8) SEP ((RSP_0 -64 80),4); ((R14 +64 (R15 *64 8)),8) SEP ((RSP_0 -64 84),4); ((R14 +64 (R15 *64 8)),8) SEP ((RSP_0 -64 88),4); ((R14 +64 (R15 *64 8)),8) SEP ((RSP_0 -64 92),4); ((R14 +64 (R15 *64 8)),8) SEP ((RSP_0 -64 104),8); ((R14 +64 (R15 *64 8)),8) SEP ((RSP_0 -64 108),4); ((R14 +64 (R15 *64 8)),8) SEP ((RSP_0 -64 264),8); ((R14 +64 (R15 *64 8)),8) SEP ((RSP_0 -64 280),16)"
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100003246: MOV RDI, QWORD PTR [R14 + R15 * 8] 4"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000324a"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "10000324a: TEST RDI, RDI 3"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000324d"
 Separations "((RSP_0 -64 64),4) SEP (bot(fun____error),4); ((RSP_0 -64 64),4) SEP (RSI_0,8); ((RSP_0 -64 64),4) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 64),8) SEP (bot(fun____error),4); ((RSP_0 -64 64),8) SEP (bot(fun__fts_read_INODE64),8); ((RSP_0 -64 64),8) SEP (RSI_0,8); ((RSP_0 -64 64),8) SEP ([0x100004018,8]_0,8); ((RSP_0 -64 64),8) SEP ([0x100004020,8]_0,4); ((RSP_0 -64 64),8) SEP (0x100004018,8); ((RSP_0 -64 64),8) SEP (0x100004020,8); ((RSP_0 -64 64),8) SEP (0x100004180,8); ((RSP_0 -64 64),8) SEP (0x100004188,8); ((RSP_0 -64 64),8) SEP (0x100004190,8); ((RSP_0 -64 64),8) SEP (0x100004198,8); ((RSP_0 -64 64),8) SEP (0x1000041a0,1); ((RSP_0 -64 64),8) SEP (0x1000041a8,8); ((RSP_0 -64 64),8) SEP (0x1000041b0,8); ((RSP_0 -64 64),8) SEP (0x1000041b8,8); ((RSP_0 -64 64),8) SEP (0x1000041c0,8); ((RSP_0 -64 64),8) SEP (0x1000041c8,1); ((RSP_0 -64 64),8) SEP (0x1000041d0,8); ((RSP_0 -64 64),8) SEP (0x1000041d8,8); ((RSP_0 -64 64),8) SEP ((bot(fun__fts_read_INODE64) +64 8),8); ((RSP_0 -64 64),8) SEP ((bot(fun__fts_read_INODE64) +64 24),8); ((RSP_0 -64 64),8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); ((RSP_0 -64 64),8) SEP ((bot(fun__fts_read_INODE64) +64 56),4); ((RSP_0 -64 64),8) SEP ((bot(fun__fts_read_INODE64) +64 86),2); ((RSP_0 -64 64),8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); ((RSP_0 -64 64),8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 64),8) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); ((RSP_0 -64 64),8) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "10000324d: MOV R13, QWORD PTR [RBP - 56] 4"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003251"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100003251: JE 4294980198 2"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 100002a94, blockId == 102 ##
#######################################
*)

htriple "ht_100003253"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100003253: CMP DWORD PTR [RDI + 20], ECX 3"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003256"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100003256: JNE 4294980190 2"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 100002a94, blockId == 103 ##
#######################################
*)

htriple "ht_100003266"
 Separations "(0x1000041a0,1) SEP (bot(fun____error),4); (0x1000041a0,1) SEP (bot(fun__fts_read_INODE64),8); (0x1000041a0,1) SEP (RSI_0,8); (0x1000041a0,1) SEP (RSP_0,8); (0x1000041a0,1) SEP ([0x100004018,8]_0,8); (0x1000041a0,1) SEP ([0x100004020,8]_0,4); (0x1000041a0,1) SEP ((bot(fun__fts_read_INODE64) +64 8),8); (0x1000041a0,1) SEP ((bot(fun__fts_read_INODE64) +64 24),8); (0x1000041a0,1) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x1000041a0,1) SEP ((bot(fun__fts_read_INODE64) +64 56),4); (0x1000041a0,1) SEP ((bot(fun__fts_read_INODE64) +64 86),2); (0x1000041a0,1) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x1000041a0,1) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x1000041a0,1) SEP ((RSI_0 +64 8),8); (0x1000041a0,1) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); (0x1000041a0,1) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4); (0x1000041a0,1) SEP ((RSP_0 -64 8),8); (0x1000041a0,1) SEP ((RSP_0 -64 16),8); (0x1000041a0,1) SEP ((RSP_0 -64 24),8); (0x1000041a0,1) SEP ((RSP_0 -64 32),8); (0x1000041a0,1) SEP ((RSP_0 -64 40),8); (0x1000041a0,1) SEP ((RSP_0 -64 48),8); (0x1000041a0,1) SEP ((RSP_0 -64 52),4); (0x1000041a0,1) SEP ((RSP_0 -64 64),4); (0x1000041a0,1) SEP ((RSP_0 -64 64),8); (0x1000041a0,1) SEP ((RSP_0 -64 72),8); (0x1000041a0,1) SEP ((RSP_0 -64 76),4); (0x1000041a0,1) SEP ((RSP_0 -64 80),4); (0x1000041a0,1) SEP ((RSP_0 -64 84),4); (0x1000041a0,1) SEP ((RSP_0 -64 88),4); (0x1000041a0,1) SEP ((RSP_0 -64 92),4); (0x1000041a0,1) SEP ((RSP_0 -64 104),8); (0x1000041a0,1) SEP ((RSP_0 -64 108),4); (0x1000041a0,1) SEP ((RSP_0 -64 264),8); (0x1000041a0,1) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100003266: CMP BYTE PTR [RIP + 3891], 0 7"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000326d"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "10000326d: JNE 4294980400 6"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 100002a94, blockId == 104 ##
#######################################
*)

htriple "ht_100003258"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100003258: CMP QWORD PTR [RDI + 24], RSI 4"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000325c"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "10000325c: JE 4294980235 2"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 100002a94, blockId == 105 ##
#######################################
*)

htriple "ht_10000325e"
 Separations ""
 Assertions  "(RDI,8) SEP (RSP_0,8); (RDI,8) SEP ((RSP_0 -64 8),8); (RDI,8) SEP ((RSP_0 -64 16),8); (RDI,8) SEP ((RSP_0 -64 24),8); (RDI,8) SEP ((RSP_0 -64 32),8); (RDI,8) SEP ((RSP_0 -64 40),8); (RDI,8) SEP ((RSP_0 -64 48),8); (RDI,8) SEP ((RSP_0 -64 52),4); (RDI,8) SEP ((RSP_0 -64 64),8); (RDI,8) SEP ((RSP_0 -64 72),8); (RDI,8) SEP ((RSP_0 -64 76),4); (RDI,8) SEP ((RSP_0 -64 80),4); (RDI,8) SEP ((RSP_0 -64 84),4); (RDI,8) SEP ((RSP_0 -64 88),4); (RDI,8) SEP ((RSP_0 -64 92),4); (RDI,8) SEP ((RSP_0 -64 104),8); (RDI,8) SEP ((RSP_0 -64 108),4); (RDI,8) SEP ((RSP_0 -64 264),8); (RDI,8) SEP ((RSP_0 -64 280),16)"
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "10000325e: MOV RDI, QWORD PTR [RDI] 3"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003261"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100003261: TEST RDI, RDI 3"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003264"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100003264: JNE 4294980179 2"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 100002a94, blockId == 106 ##
#######################################
*)

htriple "ht_10000328b"
 Separations ""
 Assertions  "((RDI +64 16),4) SEP (RSP_0,8); ((RDI +64 16),4) SEP ((RSP_0 -64 8),8); ((RDI +64 16),4) SEP ((RSP_0 -64 16),8); ((RDI +64 16),4) SEP ((RSP_0 -64 24),8); ((RDI +64 16),4) SEP ((RSP_0 -64 32),8); ((RDI +64 16),4) SEP ((RSP_0 -64 40),8); ((RDI +64 16),4) SEP ((RSP_0 -64 48),8); ((RDI +64 16),4) SEP ((RSP_0 -64 52),4); ((RDI +64 16),4) SEP ((RSP_0 -64 64),8); ((RDI +64 16),4) SEP ((RSP_0 -64 72),8); ((RDI +64 16),4) SEP ((RSP_0 -64 76),4); ((RDI +64 16),4) SEP ((RSP_0 -64 80),4); ((RDI +64 16),4) SEP ((RSP_0 -64 84),4); ((RDI +64 16),4) SEP ((RSP_0 -64 88),4); ((RDI +64 16),4) SEP ((RSP_0 -64 92),4); ((RDI +64 16),4) SEP ((RSP_0 -64 104),8); ((RDI +64 16),4) SEP ((RSP_0 -64 108),4); ((RDI +64 16),4) SEP ((RSP_0 -64 264),8); ((RDI +64 16),4) SEP ((RSP_0 -64 280),16)"
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "10000328b: MOV EAX, DWORD PTR [RDI + 16] 3"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000328e"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "10000328e: LEA ECX, [RAX - 1] 3"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003291"
 Separations ""
 Assertions  "((RDI +64 16),4) SEP (RSP_0,8); ((RDI +64 16),4) SEP ((RSP_0 -64 8),8); ((RDI +64 16),4) SEP ((RSP_0 -64 16),8); ((RDI +64 16),4) SEP ((RSP_0 -64 24),8); ((RDI +64 16),4) SEP ((RSP_0 -64 32),8); ((RDI +64 16),4) SEP ((RSP_0 -64 40),8); ((RDI +64 16),4) SEP ((RSP_0 -64 48),8); ((RDI +64 16),4) SEP ((RSP_0 -64 52),4); ((RDI +64 16),4) SEP ((RSP_0 -64 64),8); ((RDI +64 16),4) SEP ((RSP_0 -64 72),8); ((RDI +64 16),4) SEP ((RSP_0 -64 76),4); ((RDI +64 16),4) SEP ((RSP_0 -64 80),4); ((RDI +64 16),4) SEP ((RSP_0 -64 84),4); ((RDI +64 16),4) SEP ((RSP_0 -64 88),4); ((RDI +64 16),4) SEP ((RSP_0 -64 92),4); ((RDI +64 16),4) SEP ((RSP_0 -64 104),8); ((RDI +64 16),4) SEP ((RSP_0 -64 108),4); ((RDI +64 16),4) SEP ((RSP_0 -64 264),8); ((RDI +64 16),4) SEP ((RSP_0 -64 280),16)"
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100003291: MOV DWORD PTR [RDI + 16], ECX 3"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003294"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100003294: CMP EAX, 1 3"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003297"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100003297: JG 4294980810 6"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 100002a94, blockId == 107 ##
#######################################
*)

htriple "ht_100003273"
 Separations "(0x100004188,8) SEP (bot(fun____error),4); (0x100004188,8) SEP (bot(fun__fts_read_INODE64),8); (0x100004188,8) SEP (RSI_0,8); (0x100004188,8) SEP (RSP_0,8); (0x100004188,8) SEP ([0x100004018,8]_0,8); (0x100004188,8) SEP ([0x100004020,8]_0,4); (0x100004188,8) SEP ((bot(fun__fts_read_INODE64) +64 8),8); (0x100004188,8) SEP ((bot(fun__fts_read_INODE64) +64 24),8); (0x100004188,8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x100004188,8) SEP ((bot(fun__fts_read_INODE64) +64 56),4); (0x100004188,8) SEP ((bot(fun__fts_read_INODE64) +64 86),2); (0x100004188,8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x100004188,8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x100004188,8) SEP ((RSI_0 +64 8),8); (0x100004188,8) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); (0x100004188,8) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4); (0x100004188,8) SEP ((RSP_0 -64 8),8); (0x100004188,8) SEP ((RSP_0 -64 16),8); (0x100004188,8) SEP ((RSP_0 -64 24),8); (0x100004188,8) SEP ((RSP_0 -64 32),8); (0x100004188,8) SEP ((RSP_0 -64 40),8); (0x100004188,8) SEP ((RSP_0 -64 48),8); (0x100004188,8) SEP ((RSP_0 -64 52),4); (0x100004188,8) SEP ((RSP_0 -64 64),4); (0x100004188,8) SEP ((RSP_0 -64 64),8); (0x100004188,8) SEP ((RSP_0 -64 72),8); (0x100004188,8) SEP ((RSP_0 -64 76),4); (0x100004188,8) SEP ((RSP_0 -64 80),4); (0x100004188,8) SEP ((RSP_0 -64 84),4); (0x100004188,8) SEP ((RSP_0 -64 88),4); (0x100004188,8) SEP ((RSP_0 -64 92),4); (0x100004188,8) SEP ((RSP_0 -64 104),8); (0x100004188,8) SEP ((RSP_0 -64 108),4); (0x100004188,8) SEP ((RSP_0 -64 264),8); (0x100004188,8) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100003273: MOV RAX, QWORD PTR [RIP + 3854] 7"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000327a"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "10000327a: TEST RAX, RAX 3"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000327d"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "10000327d: JE 4294980320 2"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 100002a94, blockId == 108 ##
#######################################
*)

htriple "ht_10000327f"
 Separations ""
 Assertions  "(RAX,8) SEP (RSP_0,8); (RAX,8) SEP ((RSP_0 -64 8),8); (RAX,8) SEP ((RSP_0 -64 16),8); (RAX,8) SEP ((RSP_0 -64 24),8); (RAX,8) SEP ((RSP_0 -64 32),8); (RAX,8) SEP ((RSP_0 -64 40),8); (RAX,8) SEP ((RSP_0 -64 48),8); (RAX,8) SEP ((RSP_0 -64 52),4); (RAX,8) SEP ((RSP_0 -64 64),8); (RAX,8) SEP ((RSP_0 -64 72),8); (RAX,8) SEP ((RSP_0 -64 76),4); (RAX,8) SEP ((RSP_0 -64 80),4); (RAX,8) SEP ((RSP_0 -64 84),4); (RAX,8) SEP ((RSP_0 -64 88),4); (RAX,8) SEP ((RSP_0 -64 92),4); (RAX,8) SEP ((RSP_0 -64 104),8); (RAX,8) SEP ((RSP_0 -64 108),4); (RAX,8) SEP ((RSP_0 -64 264),8); (RAX,8) SEP ((RSP_0 -64 280),16)"
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "10000327f: MOV RDX, QWORD PTR [RAX] 3"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003282"
 Separations "(0x100004188,8) SEP (bot(fun____error),4); (0x100004188,8) SEP (bot(fun__fts_read_INODE64),8); (0x100004188,8) SEP (RSI_0,8); (0x100004188,8) SEP (RSP_0,8); (0x100004188,8) SEP ([0x100004018,8]_0,8); (0x100004188,8) SEP ([0x100004020,8]_0,4); (0x100004188,8) SEP ((bot(fun__fts_read_INODE64) +64 8),8); (0x100004188,8) SEP ((bot(fun__fts_read_INODE64) +64 24),8); (0x100004188,8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x100004188,8) SEP ((bot(fun__fts_read_INODE64) +64 56),4); (0x100004188,8) SEP ((bot(fun__fts_read_INODE64) +64 86),2); (0x100004188,8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x100004188,8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x100004188,8) SEP ((RSI_0 +64 8),8); (0x100004188,8) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); (0x100004188,8) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4); (0x100004188,8) SEP ((RSP_0 -64 8),8); (0x100004188,8) SEP ((RSP_0 -64 16),8); (0x100004188,8) SEP ((RSP_0 -64 24),8); (0x100004188,8) SEP ((RSP_0 -64 32),8); (0x100004188,8) SEP ((RSP_0 -64 40),8); (0x100004188,8) SEP ((RSP_0 -64 48),8); (0x100004188,8) SEP ((RSP_0 -64 52),4); (0x100004188,8) SEP ((RSP_0 -64 64),4); (0x100004188,8) SEP ((RSP_0 -64 64),8); (0x100004188,8) SEP ((RSP_0 -64 72),8); (0x100004188,8) SEP ((RSP_0 -64 76),4); (0x100004188,8) SEP ((RSP_0 -64 80),4); (0x100004188,8) SEP ((RSP_0 -64 84),4); (0x100004188,8) SEP ((RSP_0 -64 88),4); (0x100004188,8) SEP ((RSP_0 -64 92),4); (0x100004188,8) SEP ((RSP_0 -64 104),8); (0x100004188,8) SEP ((RSP_0 -64 108),4); (0x100004188,8) SEP ((RSP_0 -64 264),8); (0x100004188,8) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100003282: MOV QWORD PTR [RIP + 3839], RDX 7"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003289"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100003289: JMP 4294980345 2"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 100002a94, blockId == 109 ##
#######################################
*)

htriple "ht_1000032e0"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "1000032e0: MOV EDI, 32 5"
 Post  "RDI = 32 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000032e5"
 Separations ""
 Assertions  ""
 Pre   "RDI = 32 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "1000032e5: ExternalCall fun__malloc 5"
 Post  "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 FunctionConstraints "PRESERVES fun__malloc {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004018,8];[0x100004020,8];[0x100004180,8];[0x100004188,8];[0x100004190,8];[0x100004198,8];[0x1000041a0,1];[0x1000041a8,8];[0x1000041b0,8];[0x1000041b8,8];[0x1000041c0,8];[0x1000041c8,1];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 76),4];[(RSP_0 -64 80),4];[(RSP_0 -64 84),4];[(RSP_0 -64 88),4];[(RSP_0 -64 92),4];[(RSP_0 -64 104),8];[(RSP_0 -64 108),4];[(RSP_0 -64 264),8];[(RSP_0 -64 280),16]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000032ea"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "1000032ea: TEST RAX, RAX 3"
 Post  "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000032ed"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "1000032ed: JE 4294980969 6"
 Post  "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 100002a94, blockId == 110 ##
#######################################
*)

htriple "ht_10000329d"
 Separations ""
 Assertions  "((RDI +64 8),8) SEP (RSP_0,8); ((RDI +64 8),8) SEP ((RSP_0 -64 8),8); ((RDI +64 8),8) SEP ((RSP_0 -64 16),8); ((RDI +64 8),8) SEP ((RSP_0 -64 24),8); ((RDI +64 8),8) SEP ((RSP_0 -64 32),8); ((RDI +64 8),8) SEP ((RSP_0 -64 40),8); ((RDI +64 8),8) SEP ((RSP_0 -64 48),8); ((RDI +64 8),8) SEP ((RSP_0 -64 52),4); ((RDI +64 8),8) SEP ((RSP_0 -64 64),8); ((RDI +64 8),8) SEP ((RSP_0 -64 72),8); ((RDI +64 8),8) SEP ((RSP_0 -64 76),4); ((RDI +64 8),8) SEP ((RSP_0 -64 80),4); ((RDI +64 8),8) SEP ((RSP_0 -64 84),4); ((RDI +64 8),8) SEP ((RSP_0 -64 88),4); ((RDI +64 8),8) SEP ((RSP_0 -64 92),4); ((RDI +64 8),8) SEP ((RSP_0 -64 104),8); ((RDI +64 8),8) SEP ((RSP_0 -64 108),4); ((RDI +64 8),8) SEP ((RSP_0 -64 264),8); ((RDI +64 8),8) SEP ((RSP_0 -64 280),16)"
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "10000329d: MOV RAX, QWORD PTR [RDI + 8] 4"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000032a1"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "1000032a1: TEST RAX, RAX 3"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000032a4"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "1000032a4: JE 4294980268 2"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 100002a94, blockId == 111 ##
#######################################
*)

htriple "ht_1000032a6"
 Separations ""
 Assertions  "(RDI,8) SEP (RSP_0,8); (RDI,8) SEP ((RSP_0 -64 8),8); (RDI,8) SEP ((RSP_0 -64 16),8); (RDI,8) SEP ((RSP_0 -64 24),8); (RDI,8) SEP ((RSP_0 -64 32),8); (RDI,8) SEP ((RSP_0 -64 40),8); (RDI,8) SEP ((RSP_0 -64 48),8); (RDI,8) SEP ((RSP_0 -64 52),4); (RDI,8) SEP ((RSP_0 -64 64),8); (RDI,8) SEP ((RSP_0 -64 72),8); (RDI,8) SEP ((RSP_0 -64 76),4); (RDI,8) SEP ((RSP_0 -64 80),4); (RDI,8) SEP ((RSP_0 -64 84),4); (RDI,8) SEP ((RSP_0 -64 88),4); (RDI,8) SEP ((RSP_0 -64 92),4); (RDI,8) SEP ((RSP_0 -64 104),8); (RDI,8) SEP ((RSP_0 -64 108),4); (RDI,8) SEP ((RSP_0 -64 264),8); (RDI,8) SEP ((RSP_0 -64 280),16)"
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "1000032a6: MOV RCX, QWORD PTR [RDI] 3"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000032a9"
 Separations ""
 Assertions  "(RAX,8) SEP (RSP_0,8); (RAX,8) SEP ((RSP_0 -64 8),8); (RAX,8) SEP ((RSP_0 -64 16),8); (RAX,8) SEP ((RSP_0 -64 24),8); (RAX,8) SEP ((RSP_0 -64 32),8); (RAX,8) SEP ((RSP_0 -64 40),8); (RAX,8) SEP ((RSP_0 -64 48),8); (RAX,8) SEP ((RSP_0 -64 52),4); (RAX,8) SEP ((RSP_0 -64 64),8); (RAX,8) SEP ((RSP_0 -64 72),8); (RAX,8) SEP ((RSP_0 -64 76),4); (RAX,8) SEP ((RSP_0 -64 80),4); (RAX,8) SEP ((RSP_0 -64 84),4); (RAX,8) SEP ((RSP_0 -64 88),4); (RAX,8) SEP ((RSP_0 -64 92),4); (RAX,8) SEP ((RSP_0 -64 104),8); (RAX,8) SEP ((RSP_0 -64 108),4); (RAX,8) SEP ((RSP_0 -64 264),8); (RAX,8) SEP ((RSP_0 -64 280),16)"
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "1000032a9: MOV QWORD PTR [RAX], RCX 3"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 100002a94, blockId == 112 ##
#######################################
*)

htriple "ht_1000032ac"
 Separations ""
 Assertions  "(RDI,8) SEP (RSP_0,8); (RDI,8) SEP ((RSP_0 -64 8),8); (RDI,8) SEP ((RSP_0 -64 16),8); (RDI,8) SEP ((RSP_0 -64 24),8); (RDI,8) SEP ((RSP_0 -64 32),8); (RDI,8) SEP ((RSP_0 -64 40),8); (RDI,8) SEP ((RSP_0 -64 48),8); (RDI,8) SEP ((RSP_0 -64 52),4); (RDI,8) SEP ((RSP_0 -64 64),8); (RDI,8) SEP ((RSP_0 -64 72),8); (RDI,8) SEP ((RSP_0 -64 76),4); (RDI,8) SEP ((RSP_0 -64 80),4); (RDI,8) SEP ((RSP_0 -64 84),4); (RDI,8) SEP ((RSP_0 -64 88),4); (RDI,8) SEP ((RSP_0 -64 92),4); (RDI,8) SEP ((RSP_0 -64 104),8); (RDI,8) SEP ((RSP_0 -64 108),4); (RDI,8) SEP ((RSP_0 -64 264),8); (RDI,8) SEP ((RSP_0 -64 280),16)"
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "1000032ac: MOV RCX, QWORD PTR [RDI] 3"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000032af"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "1000032af: TEST RCX, RCX 3"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000032b2"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "1000032b2: JE 4294980280 2"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 100002a94, blockId == 113 ##
#######################################
*)

htriple "ht_1000032b4"
 Separations ""
 Assertions  "((RCX +64 8),8) SEP (RSP_0,8); ((RCX +64 8),8) SEP ((RSP_0 -64 8),8); ((RCX +64 8),8) SEP ((RSP_0 -64 16),8); ((RCX +64 8),8) SEP ((RSP_0 -64 24),8); ((RCX +64 8),8) SEP ((RSP_0 -64 32),8); ((RCX +64 8),8) SEP ((RSP_0 -64 40),8); ((RCX +64 8),8) SEP ((RSP_0 -64 48),8); ((RCX +64 8),8) SEP ((RSP_0 -64 52),4); ((RCX +64 8),8) SEP ((RSP_0 -64 64),8); ((RCX +64 8),8) SEP ((RSP_0 -64 72),8); ((RCX +64 8),8) SEP ((RSP_0 -64 76),4); ((RCX +64 8),8) SEP ((RSP_0 -64 80),4); ((RCX +64 8),8) SEP ((RSP_0 -64 84),4); ((RCX +64 8),8) SEP ((RSP_0 -64 88),4); ((RCX +64 8),8) SEP ((RSP_0 -64 92),4); ((RCX +64 8),8) SEP ((RSP_0 -64 104),8); ((RCX +64 8),8) SEP ((RSP_0 -64 108),4); ((RCX +64 8),8) SEP ((RSP_0 -64 264),8); ((RCX +64 8),8) SEP ((RSP_0 -64 280),16)"
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "1000032b4: MOV QWORD PTR [RCX + 8], RAX 4"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 100002a94, blockId == 114 ##
#######################################
*)

htriple "ht_1000032b8"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "1000032b8: CMP QWORD PTR [R14 + R15 * 8], RDI 4"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000032bc"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "1000032bc: JNE 4294980290 2"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 100002a94, blockId == 115 ##
#######################################
*)

htriple "ht_1000032be"
 Separations ""
 Assertions  "((R14 +64 (R15 *64 8)),8) SEP (RSP_0,8); ((R14 +64 (R15 *64 8)),8) SEP ((RSP_0 -64 8),8); ((R14 +64 (R15 *64 8)),8) SEP ((RSP_0 -64 16),8); ((R14 +64 (R15 *64 8)),8) SEP ((RSP_0 -64 24),8); ((R14 +64 (R15 *64 8)),8) SEP ((RSP_0 -64 32),8); ((R14 +64 (R15 *64 8)),8) SEP ((RSP_0 -64 40),8); ((R14 +64 (R15 *64 8)),8) SEP ((RSP_0 -64 48),8); ((R14 +64 (R15 *64 8)),8) SEP ((RSP_0 -64 52),4); ((R14 +64 (R15 *64 8)),8) SEP ((RSP_0 -64 64),8); ((R14 +64 (R15 *64 8)),8) SEP ((RSP_0 -64 72),8); ((R14 +64 (R15 *64 8)),8) SEP ((RSP_0 -64 76),4); ((R14 +64 (R15 *64 8)),8) SEP ((RSP_0 -64 80),4); ((R14 +64 (R15 *64 8)),8) SEP ((RSP_0 -64 84),4); ((R14 +64 (R15 *64 8)),8) SEP ((RSP_0 -64 88),4); ((R14 +64 (R15 *64 8)),8) SEP ((RSP_0 -64 92),4); ((R14 +64 (R15 *64 8)),8) SEP ((RSP_0 -64 104),8); ((R14 +64 (R15 *64 8)),8) SEP ((RSP_0 -64 108),4); ((R14 +64 (R15 *64 8)),8) SEP ((RSP_0 -64 264),8); ((R14 +64 (R15 *64 8)),8) SEP ((RSP_0 -64 280),16)"
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "1000032be: MOV QWORD PTR [R14 + R15 * 8], RCX 4"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 100002a94, blockId == 116 ##
#######################################
*)

htriple "ht_1000032c2"
 Separations "(0x100004198,8) SEP (bot(fun____error),4); (0x100004198,8) SEP (bot(fun__fts_read_INODE64),8); (0x100004198,8) SEP (RSI_0,8); (0x100004198,8) SEP (RSP_0,8); (0x100004198,8) SEP ([0x100004018,8]_0,8); (0x100004198,8) SEP ([0x100004020,8]_0,4); (0x100004198,8) SEP ((bot(fun__fts_read_INODE64) +64 8),8); (0x100004198,8) SEP ((bot(fun__fts_read_INODE64) +64 24),8); (0x100004198,8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x100004198,8) SEP ((bot(fun__fts_read_INODE64) +64 56),4); (0x100004198,8) SEP ((bot(fun__fts_read_INODE64) +64 86),2); (0x100004198,8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x100004198,8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x100004198,8) SEP ((RSI_0 +64 8),8); (0x100004198,8) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); (0x100004198,8) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4); (0x100004198,8) SEP ((RSP_0 -64 8),8); (0x100004198,8) SEP ((RSP_0 -64 16),8); (0x100004198,8) SEP ((RSP_0 -64 24),8); (0x100004198,8) SEP ((RSP_0 -64 32),8); (0x100004198,8) SEP ((RSP_0 -64 40),8); (0x100004198,8) SEP ((RSP_0 -64 48),8); (0x100004198,8) SEP ((RSP_0 -64 52),4); (0x100004198,8) SEP ((RSP_0 -64 64),4); (0x100004198,8) SEP ((RSP_0 -64 64),8); (0x100004198,8) SEP ((RSP_0 -64 72),8); (0x100004198,8) SEP ((RSP_0 -64 76),4); (0x100004198,8) SEP ((RSP_0 -64 80),4); (0x100004198,8) SEP ((RSP_0 -64 84),4); (0x100004198,8) SEP ((RSP_0 -64 88),4); (0x100004198,8) SEP ((RSP_0 -64 92),4); (0x100004198,8) SEP ((RSP_0 -64 104),8); (0x100004198,8) SEP ((RSP_0 -64 108),4); (0x100004198,8) SEP ((RSP_0 -64 264),8); (0x100004198,8) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "1000032c2: DEC QWORD PTR [RIP + 3791] 7"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000032c9"
 Separations "(0x1000041a0,1) SEP (bot(fun____error),4); (0x1000041a0,1) SEP (bot(fun__fts_read_INODE64),8); (0x1000041a0,1) SEP (RSI_0,8); (0x1000041a0,1) SEP (RSP_0,8); (0x1000041a0,1) SEP ([0x100004018,8]_0,8); (0x1000041a0,1) SEP ([0x100004020,8]_0,4); (0x1000041a0,1) SEP ((bot(fun__fts_read_INODE64) +64 8),8); (0x1000041a0,1) SEP ((bot(fun__fts_read_INODE64) +64 24),8); (0x1000041a0,1) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x1000041a0,1) SEP ((bot(fun__fts_read_INODE64) +64 56),4); (0x1000041a0,1) SEP ((bot(fun__fts_read_INODE64) +64 86),2); (0x1000041a0,1) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x1000041a0,1) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x1000041a0,1) SEP ((RSI_0 +64 8),8); (0x1000041a0,1) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); (0x1000041a0,1) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4); (0x1000041a0,1) SEP ((RSP_0 -64 8),8); (0x1000041a0,1) SEP ((RSP_0 -64 16),8); (0x1000041a0,1) SEP ((RSP_0 -64 24),8); (0x1000041a0,1) SEP ((RSP_0 -64 32),8); (0x1000041a0,1) SEP ((RSP_0 -64 40),8); (0x1000041a0,1) SEP ((RSP_0 -64 48),8); (0x1000041a0,1) SEP ((RSP_0 -64 52),4); (0x1000041a0,1) SEP ((RSP_0 -64 64),4); (0x1000041a0,1) SEP ((RSP_0 -64 64),8); (0x1000041a0,1) SEP ((RSP_0 -64 72),8); (0x1000041a0,1) SEP ((RSP_0 -64 76),4); (0x1000041a0,1) SEP ((RSP_0 -64 80),4); (0x1000041a0,1) SEP ((RSP_0 -64 84),4); (0x1000041a0,1) SEP ((RSP_0 -64 88),4); (0x1000041a0,1) SEP ((RSP_0 -64 92),4); (0x1000041a0,1) SEP ((RSP_0 -64 104),8); (0x1000041a0,1) SEP ((RSP_0 -64 108),4); (0x1000041a0,1) SEP ((RSP_0 -64 264),8); (0x1000041a0,1) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "1000032c9: CMP BYTE PTR [RIP + 3792], 1 7"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000032d0"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "1000032d0: JNE 4294980844 6"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 100002a94, blockId == 117 ##
#######################################
*)

htriple "ht_1000032d6"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "1000032d6: ExternalCall fun__free 5"
 Post  "RAX = bot(fun__free) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 FunctionConstraints "PRESERVES fun__free {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004018,8];[0x100004020,8];[0x100004180,8];[0x100004188,8];[0x100004190,8];[0x100004198,8];[0x1000041a0,1];[0x1000041a8,8];[0x1000041b0,8];[0x1000041b8,8];[0x1000041c0,8];[0x1000041c8,1];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 76),4];[(RSP_0 -64 80),4];[(RSP_0 -64 84),4];[(RSP_0 -64 88),4];[(RSP_0 -64 92),4];[(RSP_0 -64 104),8];[(RSP_0 -64 108),4];[(RSP_0 -64 264),8];[(RSP_0 -64 280),16]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000032db"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__free) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "1000032db: JMP 4294980810 5"
 Post  "RAX = bot(fun__free) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 100002a94, blockId == 118 ##
#######################################
*)

htriple "ht_1000034ec"
 Separations "(0x100004188,8) SEP (bot(fun____error),4); (0x100004188,8) SEP (bot(fun__fts_read_INODE64),8); (0x100004188,8) SEP (RSI_0,8); (0x100004188,8) SEP (RSP_0,8); (0x100004188,8) SEP ([0x100004018,8]_0,8); (0x100004188,8) SEP ([0x100004020,8]_0,4); (0x100004188,8) SEP ((bot(fun__fts_read_INODE64) +64 8),8); (0x100004188,8) SEP ((bot(fun__fts_read_INODE64) +64 24),8); (0x100004188,8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x100004188,8) SEP ((bot(fun__fts_read_INODE64) +64 56),4); (0x100004188,8) SEP ((bot(fun__fts_read_INODE64) +64 86),2); (0x100004188,8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x100004188,8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x100004188,8) SEP ((RSI_0 +64 8),8); (0x100004188,8) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); (0x100004188,8) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4); (0x100004188,8) SEP ((RSP_0 -64 8),8); (0x100004188,8) SEP ((RSP_0 -64 16),8); (0x100004188,8) SEP ((RSP_0 -64 24),8); (0x100004188,8) SEP ((RSP_0 -64 32),8); (0x100004188,8) SEP ((RSP_0 -64 40),8); (0x100004188,8) SEP ((RSP_0 -64 48),8); (0x100004188,8) SEP ((RSP_0 -64 52),4); (0x100004188,8) SEP ((RSP_0 -64 64),4); (0x100004188,8) SEP ((RSP_0 -64 64),8); (0x100004188,8) SEP ((RSP_0 -64 72),8); (0x100004188,8) SEP ((RSP_0 -64 76),4); (0x100004188,8) SEP ((RSP_0 -64 80),4); (0x100004188,8) SEP ((RSP_0 -64 84),4); (0x100004188,8) SEP ((RSP_0 -64 88),4); (0x100004188,8) SEP ((RSP_0 -64 92),4); (0x100004188,8) SEP ((RSP_0 -64 104),8); (0x100004188,8) SEP ((RSP_0 -64 108),4); (0x100004188,8) SEP ((RSP_0 -64 264),8); (0x100004188,8) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "1000034ec: MOV RAX, QWORD PTR [RIP + 3221] 7"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000034f3"
 Separations ""
 Assertions  "(RDI,8) SEP (RSP_0,8); (RDI,8) SEP ((RSP_0 -64 8),8); (RDI,8) SEP ((RSP_0 -64 16),8); (RDI,8) SEP ((RSP_0 -64 24),8); (RDI,8) SEP ((RSP_0 -64 32),8); (RDI,8) SEP ((RSP_0 -64 40),8); (RDI,8) SEP ((RSP_0 -64 48),8); (RDI,8) SEP ((RSP_0 -64 52),4); (RDI,8) SEP ((RSP_0 -64 64),8); (RDI,8) SEP ((RSP_0 -64 72),8); (RDI,8) SEP ((RSP_0 -64 76),4); (RDI,8) SEP ((RSP_0 -64 80),4); (RDI,8) SEP ((RSP_0 -64 84),4); (RDI,8) SEP ((RSP_0 -64 88),4); (RDI,8) SEP ((RSP_0 -64 92),4); (RDI,8) SEP ((RSP_0 -64 104),8); (RDI,8) SEP ((RSP_0 -64 108),4); (RDI,8) SEP ((RSP_0 -64 264),8); (RDI,8) SEP ((RSP_0 -64 280),16)"
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "1000034f3: MOV QWORD PTR [RDI], RAX 3"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000034f6"
 Separations "(0x100004188,8) SEP (bot(fun____error),4); (0x100004188,8) SEP (bot(fun__fts_read_INODE64),8); (0x100004188,8) SEP (RSI_0,8); (0x100004188,8) SEP (RSP_0,8); (0x100004188,8) SEP ([0x100004018,8]_0,8); (0x100004188,8) SEP ([0x100004020,8]_0,4); (0x100004188,8) SEP ((bot(fun__fts_read_INODE64) +64 8),8); (0x100004188,8) SEP ((bot(fun__fts_read_INODE64) +64 24),8); (0x100004188,8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x100004188,8) SEP ((bot(fun__fts_read_INODE64) +64 56),4); (0x100004188,8) SEP ((bot(fun__fts_read_INODE64) +64 86),2); (0x100004188,8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x100004188,8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x100004188,8) SEP ((RSI_0 +64 8),8); (0x100004188,8) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); (0x100004188,8) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4); (0x100004188,8) SEP ((RSP_0 -64 8),8); (0x100004188,8) SEP ((RSP_0 -64 16),8); (0x100004188,8) SEP ((RSP_0 -64 24),8); (0x100004188,8) SEP ((RSP_0 -64 32),8); (0x100004188,8) SEP ((RSP_0 -64 40),8); (0x100004188,8) SEP ((RSP_0 -64 48),8); (0x100004188,8) SEP ((RSP_0 -64 52),4); (0x100004188,8) SEP ((RSP_0 -64 64),4); (0x100004188,8) SEP ((RSP_0 -64 64),8); (0x100004188,8) SEP ((RSP_0 -64 72),8); (0x100004188,8) SEP ((RSP_0 -64 76),4); (0x100004188,8) SEP ((RSP_0 -64 80),4); (0x100004188,8) SEP ((RSP_0 -64 84),4); (0x100004188,8) SEP ((RSP_0 -64 88),4); (0x100004188,8) SEP ((RSP_0 -64 92),4); (0x100004188,8) SEP ((RSP_0 -64 104),8); (0x100004188,8) SEP ((RSP_0 -64 108),4); (0x100004188,8) SEP ((RSP_0 -64 264),8); (0x100004188,8) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "1000034f6: MOV QWORD PTR [RIP + 3211], RDI 7"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000034fd"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "1000034fd: JMP 4294980810 2"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 100002a94, blockId == 119 ##
#######################################
*)

htriple "ht_1000032f3"
 Separations ""
 Assertions  "(RBX,4) SEP (RSP_0,8); (RBX,4) SEP ((RSP_0 -64 8),8); (RBX,4) SEP ((RSP_0 -64 16),8); (RBX,4) SEP ((RSP_0 -64 24),8); (RBX,4) SEP ((RSP_0 -64 32),8); (RBX,4) SEP ((RSP_0 -64 40),8); (RBX,4) SEP ((RSP_0 -64 48),8); (RBX,4) SEP ((RSP_0 -64 52),4); (RBX,4) SEP ((RSP_0 -64 64),8); (RBX,4) SEP ((RSP_0 -64 72),8); (RBX,4) SEP ((RSP_0 -64 76),4); (RBX,4) SEP ((RSP_0 -64 80),4); (RBX,4) SEP ((RSP_0 -64 84),4); (RBX,4) SEP ((RSP_0 -64 88),4); (RBX,4) SEP ((RSP_0 -64 92),4); (RBX,4) SEP ((RSP_0 -64 104),8); (RBX,4) SEP ((RSP_0 -64 108),4); (RBX,4) SEP ((RSP_0 -64 264),8); (RBX,4) SEP ((RSP_0 -64 280),16)"
 Pre   "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "1000032f3: MOV ECX, DWORD PTR [RBX] 2"
 Post  "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000032f5"
 Separations ""
 Assertions  "((RBX +64 8),8) SEP (RSP_0,8); ((RBX +64 8),8) SEP ((RSP_0 -64 8),8); ((RBX +64 8),8) SEP ((RSP_0 -64 16),8); ((RBX +64 8),8) SEP ((RSP_0 -64 24),8); ((RBX +64 8),8) SEP ((RSP_0 -64 32),8); ((RBX +64 8),8) SEP ((RSP_0 -64 40),8); ((RBX +64 8),8) SEP ((RSP_0 -64 48),8); ((RBX +64 8),8) SEP ((RSP_0 -64 52),4); ((RBX +64 8),8) SEP ((RSP_0 -64 64),8); ((RBX +64 8),8) SEP ((RSP_0 -64 72),8); ((RBX +64 8),8) SEP ((RSP_0 -64 76),4); ((RBX +64 8),8) SEP ((RSP_0 -64 80),4); ((RBX +64 8),8) SEP ((RSP_0 -64 84),4); ((RBX +64 8),8) SEP ((RSP_0 -64 88),4); ((RBX +64 8),8) SEP ((RSP_0 -64 92),4); ((RBX +64 8),8) SEP ((RSP_0 -64 104),8); ((RBX +64 8),8) SEP ((RSP_0 -64 108),4); ((RBX +64 8),8) SEP ((RSP_0 -64 264),8); ((RBX +64 8),8) SEP ((RSP_0 -64 280),16)"
 Pre   "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "1000032f5: MOV RSI, QWORD PTR [RBX + 8] 4"
 Post  "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 100002a94, blockId == 120 ##
#######################################
*)

htriple "ht_100003569"
 Separations "(0x1000041a0,1) SEP (bot(fun____error),4); (0x1000041a0,1) SEP (bot(fun__fts_read_INODE64),8); (0x1000041a0,1) SEP (RSI_0,8); (0x1000041a0,1) SEP (RSP_0,8); (0x1000041a0,1) SEP ([0x100004018,8]_0,8); (0x1000041a0,1) SEP ([0x100004020,8]_0,4); (0x1000041a0,1) SEP ((bot(fun__fts_read_INODE64) +64 8),8); (0x1000041a0,1) SEP ((bot(fun__fts_read_INODE64) +64 24),8); (0x1000041a0,1) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x1000041a0,1) SEP ((bot(fun__fts_read_INODE64) +64 56),4); (0x1000041a0,1) SEP ((bot(fun__fts_read_INODE64) +64 86),2); (0x1000041a0,1) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x1000041a0,1) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x1000041a0,1) SEP ((RSI_0 +64 8),8); (0x1000041a0,1) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); (0x1000041a0,1) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4); (0x1000041a0,1) SEP ((RSP_0 -64 8),8); (0x1000041a0,1) SEP ((RSP_0 -64 16),8); (0x1000041a0,1) SEP ((RSP_0 -64 24),8); (0x1000041a0,1) SEP ((RSP_0 -64 32),8); (0x1000041a0,1) SEP ((RSP_0 -64 40),8); (0x1000041a0,1) SEP ((RSP_0 -64 48),8); (0x1000041a0,1) SEP ((RSP_0 -64 52),4); (0x1000041a0,1) SEP ((RSP_0 -64 64),4); (0x1000041a0,1) SEP ((RSP_0 -64 64),8); (0x1000041a0,1) SEP ((RSP_0 -64 72),8); (0x1000041a0,1) SEP ((RSP_0 -64 76),4); (0x1000041a0,1) SEP ((RSP_0 -64 80),4); (0x1000041a0,1) SEP ((RSP_0 -64 84),4); (0x1000041a0,1) SEP ((RSP_0 -64 88),4); (0x1000041a0,1) SEP ((RSP_0 -64 92),4); (0x1000041a0,1) SEP ((RSP_0 -64 104),8); (0x1000041a0,1) SEP ((RSP_0 -64 108),4); (0x1000041a0,1) SEP ((RSP_0 -64 264),8); (0x1000041a0,1) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100003569: MOV BYTE PTR [RIP + 3120], 1 7"
 Post  "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000041a0,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003570"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000041a0,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100003570: LEA RDI, [RIP + 2348] 7"
 Post  "RAX = bot(fun__malloc) ; RDI = 0x100003ea3 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000041a0,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003577"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RDI = 0x100003ea3 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000041a0,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100003577: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RDI = 0x100003ea3 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000041a0,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003579"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RDI = 0x100003ea3 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000041a0,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100003579: ExternalCall fun__warnx 5"
 Post  "RAX = bot(fun__warnx) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000041a0,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 FunctionConstraints "PRESERVES fun__warnx {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004018,8];[0x100004020,8];[0x100004180,8];[0x100004188,8];[0x100004190,8];[0x100004198,8];[0x1000041a0,1];[0x1000041a8,8];[0x1000041b0,8];[0x1000041b8,8];[0x1000041c0,8];[0x1000041c8,1];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 76),4];[(RSP_0 -64 80),4];[(RSP_0 -64 84),4];[(RSP_0 -64 88),4];[(RSP_0 -64 92),4];[(RSP_0 -64 104),8];[(RSP_0 -64 108),4];[(RSP_0 -64 264),8];[(RSP_0 -64 280),16]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000357e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__warnx) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000041a0,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "10000357e: JMP 4294980400 5"
 Post  "RAX = bot(fun__warnx) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000041a0,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 100002a94, blockId == 121 ##
#######################################
*)

htriple "ht_1000032f9"
 Separations ""
 Assertions  "((RAX +64 20),4) SEP (RSP_0,8); ((RAX +64 20),4) SEP ((RSP_0 -64 8),8); ((RAX +64 20),4) SEP ((RSP_0 -64 16),8); ((RAX +64 20),4) SEP ((RSP_0 -64 24),8); ((RAX +64 20),4) SEP ((RSP_0 -64 32),8); ((RAX +64 20),4) SEP ((RSP_0 -64 40),8); ((RAX +64 20),4) SEP ((RSP_0 -64 48),8); ((RAX +64 20),4) SEP ((RSP_0 -64 52),4); ((RAX +64 20),4) SEP ((RSP_0 -64 64),8); ((RAX +64 20),4) SEP ((RSP_0 -64 72),8); ((RAX +64 20),4) SEP ((RSP_0 -64 76),4); ((RAX +64 20),4) SEP ((RSP_0 -64 80),4); ((RAX +64 20),4) SEP ((RSP_0 -64 84),4); ((RAX +64 20),4) SEP ((RSP_0 -64 88),4); ((RAX +64 20),4) SEP ((RSP_0 -64 92),4); ((RAX +64 20),4) SEP ((RSP_0 -64 104),8); ((RAX +64 20),4) SEP ((RSP_0 -64 108),4); ((RAX +64 20),4) SEP ((RSP_0 -64 264),8); ((RAX +64 20),4) SEP ((RSP_0 -64 280),16)"
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "1000032f9: MOV DWORD PTR [RAX + 20], ECX 3"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000032fc"
 Separations ""
 Assertions  "((RAX +64 24),8) SEP (RSP_0,8); ((RAX +64 24),8) SEP ((RSP_0 -64 8),8); ((RAX +64 24),8) SEP ((RSP_0 -64 16),8); ((RAX +64 24),8) SEP ((RSP_0 -64 24),8); ((RAX +64 24),8) SEP ((RSP_0 -64 32),8); ((RAX +64 24),8) SEP ((RSP_0 -64 40),8); ((RAX +64 24),8) SEP ((RSP_0 -64 48),8); ((RAX +64 24),8) SEP ((RSP_0 -64 52),4); ((RAX +64 24),8) SEP ((RSP_0 -64 64),8); ((RAX +64 24),8) SEP ((RSP_0 -64 72),8); ((RAX +64 24),8) SEP ((RSP_0 -64 76),4); ((RAX +64 24),8) SEP ((RSP_0 -64 80),4); ((RAX +64 24),8) SEP ((RSP_0 -64 84),4); ((RAX +64 24),8) SEP ((RSP_0 -64 88),4); ((RAX +64 24),8) SEP ((RSP_0 -64 92),4); ((RAX +64 24),8) SEP ((RSP_0 -64 104),8); ((RAX +64 24),8) SEP ((RSP_0 -64 108),4); ((RAX +64 24),8) SEP ((RSP_0 -64 264),8); ((RAX +64 24),8) SEP ((RSP_0 -64 280),16)"
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "1000032fc: MOV QWORD PTR [RAX + 24], RSI 4"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003300"
 Separations ""
 Assertions  "((RBX +64 6),2) SEP (RSP_0,8); ((RBX +64 6),2) SEP ((RSP_0 -64 8),8); ((RBX +64 6),2) SEP ((RSP_0 -64 16),8); ((RBX +64 6),2) SEP ((RSP_0 -64 24),8); ((RBX +64 6),2) SEP ((RSP_0 -64 32),8); ((RBX +64 6),2) SEP ((RSP_0 -64 40),8); ((RBX +64 6),2) SEP ((RSP_0 -64 48),8); ((RBX +64 6),2) SEP ((RSP_0 -64 52),4); ((RBX +64 6),2) SEP ((RSP_0 -64 64),8); ((RBX +64 6),2) SEP ((RSP_0 -64 72),8); ((RBX +64 6),2) SEP ((RSP_0 -64 76),4); ((RBX +64 6),2) SEP ((RSP_0 -64 80),4); ((RBX +64 6),2) SEP ((RSP_0 -64 84),4); ((RBX +64 6),2) SEP ((RSP_0 -64 88),4); ((RBX +64 6),2) SEP ((RSP_0 -64 92),4); ((RBX +64 6),2) SEP ((RSP_0 -64 104),8); ((RBX +64 6),2) SEP ((RSP_0 -64 108),4); ((RBX +64 6),2) SEP ((RSP_0 -64 264),8); ((RBX +64 6),2) SEP ((RSP_0 -64 280),16)"
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100003300: MOVZX ECX, WORD PTR [RBX + 6] 4"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003304"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100003304: DEC ECX 2"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003306"
 Separations ""
 Assertions  "((RAX +64 16),4) SEP (RSP_0,8); ((RAX +64 16),4) SEP ((RSP_0 -64 8),8); ((RAX +64 16),4) SEP ((RSP_0 -64 16),8); ((RAX +64 16),4) SEP ((RSP_0 -64 24),8); ((RAX +64 16),4) SEP ((RSP_0 -64 32),8); ((RAX +64 16),4) SEP ((RSP_0 -64 40),8); ((RAX +64 16),4) SEP ((RSP_0 -64 48),8); ((RAX +64 16),4) SEP ((RSP_0 -64 52),4); ((RAX +64 16),4) SEP ((RSP_0 -64 64),8); ((RAX +64 16),4) SEP ((RSP_0 -64 72),8); ((RAX +64 16),4) SEP ((RSP_0 -64 76),4); ((RAX +64 16),4) SEP ((RSP_0 -64 80),4); ((RAX +64 16),4) SEP ((RSP_0 -64 84),4); ((RAX +64 16),4) SEP ((RSP_0 -64 88),4); ((RAX +64 16),4) SEP ((RSP_0 -64 92),4); ((RAX +64 16),4) SEP ((RSP_0 -64 104),8); ((RAX +64 16),4) SEP ((RSP_0 -64 108),4); ((RAX +64 16),4) SEP ((RSP_0 -64 264),8); ((RAX +64 16),4) SEP ((RSP_0 -64 280),16)"
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100003306: MOV DWORD PTR [RAX + 16], ECX 3"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003309"
 Separations "(0x100004198,8) SEP (bot(fun____error),4); (0x100004198,8) SEP (bot(fun__fts_read_INODE64),8); (0x100004198,8) SEP (RSI_0,8); (0x100004198,8) SEP (RSP_0,8); (0x100004198,8) SEP ([0x100004018,8]_0,8); (0x100004198,8) SEP ([0x100004020,8]_0,4); (0x100004198,8) SEP ((bot(fun__fts_read_INODE64) +64 8),8); (0x100004198,8) SEP ((bot(fun__fts_read_INODE64) +64 24),8); (0x100004198,8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x100004198,8) SEP ((bot(fun__fts_read_INODE64) +64 56),4); (0x100004198,8) SEP ((bot(fun__fts_read_INODE64) +64 86),2); (0x100004198,8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x100004198,8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x100004198,8) SEP ((RSI_0 +64 8),8); (0x100004198,8) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); (0x100004198,8) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4); (0x100004198,8) SEP ((RSP_0 -64 8),8); (0x100004198,8) SEP ((RSP_0 -64 16),8); (0x100004198,8) SEP ((RSP_0 -64 24),8); (0x100004198,8) SEP ((RSP_0 -64 32),8); (0x100004198,8) SEP ((RSP_0 -64 40),8); (0x100004198,8) SEP ((RSP_0 -64 48),8); (0x100004198,8) SEP ((RSP_0 -64 52),4); (0x100004198,8) SEP ((RSP_0 -64 64),4); (0x100004198,8) SEP ((RSP_0 -64 64),8); (0x100004198,8) SEP ((RSP_0 -64 72),8); (0x100004198,8) SEP ((RSP_0 -64 76),4); (0x100004198,8) SEP ((RSP_0 -64 80),4); (0x100004198,8) SEP ((RSP_0 -64 84),4); (0x100004198,8) SEP ((RSP_0 -64 88),4); (0x100004198,8) SEP ((RSP_0 -64 92),4); (0x100004198,8) SEP ((RSP_0 -64 104),8); (0x100004198,8) SEP ((RSP_0 -64 108),4); (0x100004198,8) SEP ((RSP_0 -64 264),8); (0x100004198,8) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100003309: INC QWORD PTR [RIP + 3720] 7"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003310"
 Separations ""
 Assertions  "((R14 +64 (R15 *64 8)),8) SEP (RSP_0,8); ((R14 +64 (R15 *64 8)),8) SEP ((RSP_0 -64 8),8); ((R14 +64 (R15 *64 8)),8) SEP ((RSP_0 -64 16),8); ((R14 +64 (R15 *64 8)),8) SEP ((RSP_0 -64 24),8); ((R14 +64 (R15 *64 8)),8) SEP ((RSP_0 -64 32),8); ((R14 +64 (R15 *64 8)),8) SEP ((RSP_0 -64 40),8); ((R14 +64 (R15 *64 8)),8) SEP ((RSP_0 -64 48),8); ((R14 +64 (R15 *64 8)),8) SEP ((RSP_0 -64 52),4); ((R14 +64 (R15 *64 8)),8) SEP ((RSP_0 -64 64),8); ((R14 +64 (R15 *64 8)),8) SEP ((RSP_0 -64 72),8); ((R14 +64 (R15 *64 8)),8) SEP ((RSP_0 -64 76),4); ((R14 +64 (R15 *64 8)),8) SEP ((RSP_0 -64 80),4); ((R14 +64 (R15 *64 8)),8) SEP ((RSP_0 -64 84),4); ((R14 +64 (R15 *64 8)),8) SEP ((RSP_0 -64 88),4); ((R14 +64 (R15 *64 8)),8) SEP ((RSP_0 -64 92),4); ((R14 +64 (R15 *64 8)),8) SEP ((RSP_0 -64 104),8); ((R14 +64 (R15 *64 8)),8) SEP ((RSP_0 -64 108),4); ((R14 +64 (R15 *64 8)),8) SEP ((RSP_0 -64 264),8); ((R14 +64 (R15 *64 8)),8) SEP ((RSP_0 -64 280),16)"
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100003310: MOV RCX, QWORD PTR [R14 + R15 * 8] 4"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003314"
 Separations ""
 Assertions  "(RAX,8) SEP (RSP_0,8); (RAX,8) SEP ((RSP_0 -64 8),8); (RAX,8) SEP ((RSP_0 -64 16),8); (RAX,8) SEP ((RSP_0 -64 24),8); (RAX,8) SEP ((RSP_0 -64 32),8); (RAX,8) SEP ((RSP_0 -64 40),8); (RAX,8) SEP ((RSP_0 -64 48),8); (RAX,8) SEP ((RSP_0 -64 52),4); (RAX,8) SEP ((RSP_0 -64 64),8); (RAX,8) SEP ((RSP_0 -64 72),8); (RAX,8) SEP ((RSP_0 -64 76),4); (RAX,8) SEP ((RSP_0 -64 80),4); (RAX,8) SEP ((RSP_0 -64 84),4); (RAX,8) SEP ((RSP_0 -64 88),4); (RAX,8) SEP ((RSP_0 -64 92),4); (RAX,8) SEP ((RSP_0 -64 104),8); (RAX,8) SEP ((RSP_0 -64 108),4); (RAX,8) SEP ((RSP_0 -64 264),8); (RAX,8) SEP ((RSP_0 -64 280),16)"
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100003314: MOV QWORD PTR [RAX], RCX 3"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003317"
 Separations ""
 Assertions  "((RAX +64 8),8) SEP (RSP_0,8); ((RAX +64 8),8) SEP ((RSP_0 -64 8),8); ((RAX +64 8),8) SEP ((RSP_0 -64 16),8); ((RAX +64 8),8) SEP ((RSP_0 -64 24),8); ((RAX +64 8),8) SEP ((RSP_0 -64 32),8); ((RAX +64 8),8) SEP ((RSP_0 -64 40),8); ((RAX +64 8),8) SEP ((RSP_0 -64 48),8); ((RAX +64 8),8) SEP ((RSP_0 -64 52),4); ((RAX +64 8),8) SEP ((RSP_0 -64 64),8); ((RAX +64 8),8) SEP ((RSP_0 -64 72),8); ((RAX +64 8),8) SEP ((RSP_0 -64 76),4); ((RAX +64 8),8) SEP ((RSP_0 -64 80),4); ((RAX +64 8),8) SEP ((RSP_0 -64 84),4); ((RAX +64 8),8) SEP ((RSP_0 -64 88),4); ((RAX +64 8),8) SEP ((RSP_0 -64 92),4); ((RAX +64 8),8) SEP ((RSP_0 -64 104),8); ((RAX +64 8),8) SEP ((RSP_0 -64 108),4); ((RAX +64 8),8) SEP ((RSP_0 -64 264),8); ((RAX +64 8),8) SEP ((RSP_0 -64 280),16)"
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100003317: MOV QWORD PTR [RAX + 8], 0 8"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000331f"
 Separations ""
 Assertions  "((R14 +64 (R15 *64 8)),8) SEP (RSP_0,8); ((R14 +64 (R15 *64 8)),8) SEP ((RSP_0 -64 8),8); ((R14 +64 (R15 *64 8)),8) SEP ((RSP_0 -64 16),8); ((R14 +64 (R15 *64 8)),8) SEP ((RSP_0 -64 24),8); ((R14 +64 (R15 *64 8)),8) SEP ((RSP_0 -64 32),8); ((R14 +64 (R15 *64 8)),8) SEP ((RSP_0 -64 40),8); ((R14 +64 (R15 *64 8)),8) SEP ((RSP_0 -64 48),8); ((R14 +64 (R15 *64 8)),8) SEP ((RSP_0 -64 52),4); ((R14 +64 (R15 *64 8)),8) SEP ((RSP_0 -64 64),8); ((R14 +64 (R15 *64 8)),8) SEP ((RSP_0 -64 72),8); ((R14 +64 (R15 *64 8)),8) SEP ((RSP_0 -64 76),4); ((R14 +64 (R15 *64 8)),8) SEP ((RSP_0 -64 80),4); ((R14 +64 (R15 *64 8)),8) SEP ((RSP_0 -64 84),4); ((R14 +64 (R15 *64 8)),8) SEP ((RSP_0 -64 88),4); ((R14 +64 (R15 *64 8)),8) SEP ((RSP_0 -64 92),4); ((R14 +64 (R15 *64 8)),8) SEP ((RSP_0 -64 104),8); ((R14 +64 (R15 *64 8)),8) SEP ((RSP_0 -64 108),4); ((R14 +64 (R15 *64 8)),8) SEP ((RSP_0 -64 264),8); ((R14 +64 (R15 *64 8)),8) SEP ((RSP_0 -64 280),16)"
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "10000331f: MOV RCX, QWORD PTR [R14 + R15 * 8] 4"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003323"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100003323: TEST RCX, RCX 3"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003326"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100003326: JE 4294980396 2"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 100002a94, blockId == 122 ##
#######################################
*)

htriple "ht_100003328"
 Separations ""
 Assertions  "((RCX +64 8),8) SEP (RSP_0,8); ((RCX +64 8),8) SEP ((RSP_0 -64 8),8); ((RCX +64 8),8) SEP ((RSP_0 -64 16),8); ((RCX +64 8),8) SEP ((RSP_0 -64 24),8); ((RCX +64 8),8) SEP ((RSP_0 -64 32),8); ((RCX +64 8),8) SEP ((RSP_0 -64 40),8); ((RCX +64 8),8) SEP ((RSP_0 -64 48),8); ((RCX +64 8),8) SEP ((RSP_0 -64 52),4); ((RCX +64 8),8) SEP ((RSP_0 -64 64),8); ((RCX +64 8),8) SEP ((RSP_0 -64 72),8); ((RCX +64 8),8) SEP ((RSP_0 -64 76),4); ((RCX +64 8),8) SEP ((RSP_0 -64 80),4); ((RCX +64 8),8) SEP ((RSP_0 -64 84),4); ((RCX +64 8),8) SEP ((RSP_0 -64 88),4); ((RCX +64 8),8) SEP ((RSP_0 -64 92),4); ((RCX +64 8),8) SEP ((RSP_0 -64 104),8); ((RCX +64 8),8) SEP ((RSP_0 -64 108),4); ((RCX +64 8),8) SEP ((RSP_0 -64 264),8); ((RCX +64 8),8) SEP ((RSP_0 -64 280),16)"
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100003328: MOV QWORD PTR [RCX + 8], RAX 4"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 100002a94, blockId == 123 ##
#######################################
*)

htriple "ht_10000332c"
 Separations ""
 Assertions  "((R14 +64 (R15 *64 8)),8) SEP (RSP_0,8); ((R14 +64 (R15 *64 8)),8) SEP ((RSP_0 -64 8),8); ((R14 +64 (R15 *64 8)),8) SEP ((RSP_0 -64 16),8); ((R14 +64 (R15 *64 8)),8) SEP ((RSP_0 -64 24),8); ((R14 +64 (R15 *64 8)),8) SEP ((RSP_0 -64 32),8); ((R14 +64 (R15 *64 8)),8) SEP ((RSP_0 -64 40),8); ((R14 +64 (R15 *64 8)),8) SEP ((RSP_0 -64 48),8); ((R14 +64 (R15 *64 8)),8) SEP ((RSP_0 -64 52),4); ((R14 +64 (R15 *64 8)),8) SEP ((RSP_0 -64 64),8); ((R14 +64 (R15 *64 8)),8) SEP ((RSP_0 -64 72),8); ((R14 +64 (R15 *64 8)),8) SEP ((RSP_0 -64 76),4); ((R14 +64 (R15 *64 8)),8) SEP ((RSP_0 -64 80),4); ((R14 +64 (R15 *64 8)),8) SEP ((RSP_0 -64 84),4); ((R14 +64 (R15 *64 8)),8) SEP ((RSP_0 -64 88),4); ((R14 +64 (R15 *64 8)),8) SEP ((RSP_0 -64 92),4); ((R14 +64 (R15 *64 8)),8) SEP ((RSP_0 -64 104),8); ((R14 +64 (R15 *64 8)),8) SEP ((RSP_0 -64 108),4); ((R14 +64 (R15 *64 8)),8) SEP ((RSP_0 -64 264),8); ((R14 +64 (R15 *64 8)),8) SEP ((RSP_0 -64 280),16)"
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "10000332c: MOV QWORD PTR [R14 + R15 * 8], RAX 4"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 100002a94, blockId == 124 ##
#######################################
*)

htriple "ht_100003336"
 Separations "((bot(fun__fts_read_INODE64) +64 86),2) SEP (RSI_0,8); ((bot(fun__fts_read_INODE64) +64 86),2) SEP (RSP_0,8); ((bot(fun__fts_read_INODE64) +64 86),2) SEP (0x100004018,8); ((bot(fun__fts_read_INODE64) +64 86),2) SEP (0x100004020,8); ((bot(fun__fts_read_INODE64) +64 86),2) SEP (0x100004180,8); ((bot(fun__fts_read_INODE64) +64 86),2) SEP (0x100004188,8); ((bot(fun__fts_read_INODE64) +64 86),2) SEP (0x100004190,8); ((bot(fun__fts_read_INODE64) +64 86),2) SEP (0x100004198,8); ((bot(fun__fts_read_INODE64) +64 86),2) SEP (0x1000041a0,1); ((bot(fun__fts_read_INODE64) +64 86),2) SEP (0x1000041a8,8); ((bot(fun__fts_read_INODE64) +64 86),2) SEP (0x1000041b0,8); ((bot(fun__fts_read_INODE64) +64 86),2) SEP (0x1000041b8,8); ((bot(fun__fts_read_INODE64) +64 86),2) SEP (0x1000041c0,8); ((bot(fun__fts_read_INODE64) +64 86),2) SEP (0x1000041c8,1); ((bot(fun__fts_read_INODE64) +64 86),2) SEP (0x1000041d0,8); ((bot(fun__fts_read_INODE64) +64 86),2) SEP (0x1000041d8,8); ((bot(fun__fts_read_INODE64) +64 86),2) SEP ((RSI_0 +64 8),8); ((bot(fun__fts_read_INODE64) +64 86),2) SEP ((RSP_0 -64 8),8); ((bot(fun__fts_read_INODE64) +64 86),2) SEP ((RSP_0 -64 16),8); ((bot(fun__fts_read_INODE64) +64 86),2) SEP ((RSP_0 -64 24),8); ((bot(fun__fts_read_INODE64) +64 86),2) SEP ((RSP_0 -64 32),8); ((bot(fun__fts_read_INODE64) +64 86),2) SEP ((RSP_0 -64 40),8); ((bot(fun__fts_read_INODE64) +64 86),2) SEP ((RSP_0 -64 48),8); ((bot(fun__fts_read_INODE64) +64 86),2) SEP ((RSP_0 -64 52),4); ((bot(fun__fts_read_INODE64) +64 86),2) SEP ((RSP_0 -64 64),8); ((bot(fun__fts_read_INODE64) +64 86),2) SEP ((RSP_0 -64 72),8); ((bot(fun__fts_read_INODE64) +64 86),2) SEP ((RSP_0 -64 76),4); ((bot(fun__fts_read_INODE64) +64 86),2) SEP ((RSP_0 -64 80),4); ((bot(fun__fts_read_INODE64) +64 86),2) SEP ((RSP_0 -64 84),4); ((bot(fun__fts_read_INODE64) +64 86),2) SEP ((RSP_0 -64 88),4); ((bot(fun__fts_read_INODE64) +64 86),2) SEP ((RSP_0 -64 92),4); ((bot(fun__fts_read_INODE64) +64 86),2) SEP ((RSP_0 -64 104),8); ((bot(fun__fts_read_INODE64) +64 86),2) SEP ((RSP_0 -64 108),4); ((bot(fun__fts_read_INODE64) +64 86),2) SEP ((RSP_0 -64 264),8); ((bot(fun__fts_read_INODE64) +64 86),2) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100003336: CMP WORD PTR [R12 + 86], 0 7"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000333d"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "10000333d: JNE 4294980500 2"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 100002a94, blockId == 125 ##
#######################################
*)

htriple "ht_10000333f"
 Separations "((bot(fun__fts_read_INODE64) +64 96),8) SEP (RSI_0,8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (RSP_0,8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (0x100004018,8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (0x100004020,8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (0x100004180,8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (0x100004188,8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (0x100004190,8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (0x100004198,8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (0x1000041a0,1); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (0x1000041a8,8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (0x1000041b0,8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (0x1000041b8,8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (0x1000041c0,8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (0x1000041c8,1); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (0x1000041d0,8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (0x1000041d8,8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSI_0 +64 8),8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 8),8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 16),8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 24),8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 32),8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 40),8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 48),8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 52),4); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 64),8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 72),8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 76),4); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 80),4); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 84),4); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 88),4); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 92),4); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 104),8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 108),4); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 264),8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "10000333f: MOV RAX, QWORD PTR [R12 + 96] 5"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003344"
 Separations ""
 Assertions  "((RAX +64 104),8) SEP (RSP_0,8); ((RAX +64 104),8) SEP ((RSP_0 -64 8),8); ((RAX +64 104),8) SEP ((RSP_0 -64 16),8); ((RAX +64 104),8) SEP ((RSP_0 -64 24),8); ((RAX +64 104),8) SEP ((RSP_0 -64 32),8); ((RAX +64 104),8) SEP ((RSP_0 -64 40),8); ((RAX +64 104),8) SEP ((RSP_0 -64 48),8); ((RAX +64 104),8) SEP ((RSP_0 -64 52),4); ((RAX +64 104),8) SEP ((RSP_0 -64 64),8); ((RAX +64 104),8) SEP ((RSP_0 -64 72),8); ((RAX +64 104),8) SEP ((RSP_0 -64 76),4); ((RAX +64 104),8) SEP ((RSP_0 -64 80),4); ((RAX +64 104),8) SEP ((RSP_0 -64 84),4); ((RAX +64 104),8) SEP ((RSP_0 -64 88),4); ((RAX +64 104),8) SEP ((RSP_0 -64 92),4); ((RAX +64 104),8) SEP ((RSP_0 -64 104),8); ((RAX +64 104),8) SEP ((RSP_0 -64 108),4); ((RAX +64 104),8) SEP ((RSP_0 -64 264),8); ((RAX +64 104),8) SEP ((RSP_0 -64 280),16)"
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100003344: MOV RAX, QWORD PTR [RAX + 104] 4"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003348"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100003348: CQO  2"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000334a"
 Separations "((RSP_0 -64 104),8) SEP (bot(fun____error),4); ((RSP_0 -64 104),8) SEP (bot(fun__fts_read_INODE64),8); ((RSP_0 -64 104),8) SEP (RSI_0,8); ((RSP_0 -64 104),8) SEP ([0x100004018,8]_0,8); ((RSP_0 -64 104),8) SEP ([0x100004020,8]_0,4); ((RSP_0 -64 104),8) SEP (0x100004018,8); ((RSP_0 -64 104),8) SEP (0x100004020,8); ((RSP_0 -64 104),8) SEP (0x100004180,8); ((RSP_0 -64 104),8) SEP (0x100004188,8); ((RSP_0 -64 104),8) SEP (0x100004190,8); ((RSP_0 -64 104),8) SEP (0x100004198,8); ((RSP_0 -64 104),8) SEP (0x1000041a0,1); ((RSP_0 -64 104),8) SEP (0x1000041a8,8); ((RSP_0 -64 104),8) SEP (0x1000041b0,8); ((RSP_0 -64 104),8) SEP (0x1000041b8,8); ((RSP_0 -64 104),8) SEP (0x1000041c0,8); ((RSP_0 -64 104),8) SEP (0x1000041c8,1); ((RSP_0 -64 104),8) SEP (0x1000041d0,8); ((RSP_0 -64 104),8) SEP (0x1000041d8,8); ((RSP_0 -64 104),8) SEP ((bot(fun__fts_read_INODE64) +64 8),8); ((RSP_0 -64 104),8) SEP ((bot(fun__fts_read_INODE64) +64 24),8); ((RSP_0 -64 104),8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); ((RSP_0 -64 104),8) SEP ((bot(fun__fts_read_INODE64) +64 56),4); ((RSP_0 -64 104),8) SEP ((bot(fun__fts_read_INODE64) +64 86),2); ((RSP_0 -64 104),8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); ((RSP_0 -64 104),8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); ((RSP_0 -64 104),8) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 104),8) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); ((RSP_0 -64 104),8) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "10000334a: IDIV QWORD PTR [RBP - 96] 4"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000334e"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "10000334e: CMP RDX, 1 4"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003352"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100003352: SBB RAX, 18446744073709551615 4"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003356"
 Separations "((RSP_0 -64 52),4) SEP (bot(fun____error),4); ((RSP_0 -64 52),4) SEP (bot(fun__fts_read_INODE64),8); ((RSP_0 -64 52),4) SEP (RSI_0,8); ((RSP_0 -64 52),4) SEP ([0x100004018,8]_0,8); ((RSP_0 -64 52),4) SEP ([0x100004020,8]_0,4); ((RSP_0 -64 52),4) SEP (0x100004018,8); ((RSP_0 -64 52),4) SEP (0x100004020,8); ((RSP_0 -64 52),4) SEP (0x100004180,8); ((RSP_0 -64 52),4) SEP (0x100004188,8); ((RSP_0 -64 52),4) SEP (0x100004190,8); ((RSP_0 -64 52),4) SEP (0x100004198,8); ((RSP_0 -64 52),4) SEP (0x1000041a0,1); ((RSP_0 -64 52),4) SEP (0x1000041a8,8); ((RSP_0 -64 52),4) SEP (0x1000041b0,8); ((RSP_0 -64 52),4) SEP (0x1000041b8,8); ((RSP_0 -64 52),4) SEP (0x1000041c0,8); ((RSP_0 -64 52),4) SEP (0x1000041c8,1); ((RSP_0 -64 52),4) SEP (0x1000041d0,8); ((RSP_0 -64 52),4) SEP (0x1000041d8,8); ((RSP_0 -64 52),4) SEP ((bot(fun__fts_read_INODE64) +64 8),8); ((RSP_0 -64 52),4) SEP ((bot(fun__fts_read_INODE64) +64 24),8); ((RSP_0 -64 52),4) SEP ((bot(fun__fts_read_INODE64) +64 48),8); ((RSP_0 -64 52),4) SEP ((bot(fun__fts_read_INODE64) +64 56),4); ((RSP_0 -64 52),4) SEP ((bot(fun__fts_read_INODE64) +64 86),2); ((RSP_0 -64 52),4) SEP ((bot(fun__fts_read_INODE64) +64 88),4); ((RSP_0 -64 52),4) SEP ((bot(fun__fts_read_INODE64) +64 96),8); ((RSP_0 -64 52),4) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 52),4) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); ((RSP_0 -64 52),4) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100003356: CMP DWORD PTR [RBP - 44], 0 4"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000335a"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "10000335a: JE 4294980478 2"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 100002a94, blockId == 126 ##
#######################################
*)

htriple "ht_100003394"
 Separations "((bot(fun__fts_read_INODE64) +64 8),8) SEP (RSI_0,8); ((bot(fun__fts_read_INODE64) +64 8),8) SEP (RSP_0,8); ((bot(fun__fts_read_INODE64) +64 8),8) SEP (0x100004018,8); ((bot(fun__fts_read_INODE64) +64 8),8) SEP (0x100004020,8); ((bot(fun__fts_read_INODE64) +64 8),8) SEP (0x100004180,8); ((bot(fun__fts_read_INODE64) +64 8),8) SEP (0x100004188,8); ((bot(fun__fts_read_INODE64) +64 8),8) SEP (0x100004190,8); ((bot(fun__fts_read_INODE64) +64 8),8) SEP (0x100004198,8); ((bot(fun__fts_read_INODE64) +64 8),8) SEP (0x1000041a0,1); ((bot(fun__fts_read_INODE64) +64 8),8) SEP (0x1000041a8,8); ((bot(fun__fts_read_INODE64) +64 8),8) SEP (0x1000041b0,8); ((bot(fun__fts_read_INODE64) +64 8),8) SEP (0x1000041b8,8); ((bot(fun__fts_read_INODE64) +64 8),8) SEP (0x1000041c0,8); ((bot(fun__fts_read_INODE64) +64 8),8) SEP (0x1000041c8,1); ((bot(fun__fts_read_INODE64) +64 8),8) SEP (0x1000041d0,8); ((bot(fun__fts_read_INODE64) +64 8),8) SEP (0x1000041d8,8); ((bot(fun__fts_read_INODE64) +64 8),8) SEP ((RSI_0 +64 8),8); ((bot(fun__fts_read_INODE64) +64 8),8) SEP ((RSP_0 -64 8),8); ((bot(fun__fts_read_INODE64) +64 8),8) SEP ((RSP_0 -64 16),8); ((bot(fun__fts_read_INODE64) +64 8),8) SEP ((RSP_0 -64 24),8); ((bot(fun__fts_read_INODE64) +64 8),8) SEP ((RSP_0 -64 32),8); ((bot(fun__fts_read_INODE64) +64 8),8) SEP ((RSP_0 -64 40),8); ((bot(fun__fts_read_INODE64) +64 8),8) SEP ((RSP_0 -64 48),8); ((bot(fun__fts_read_INODE64) +64 8),8) SEP ((RSP_0 -64 52),4); ((bot(fun__fts_read_INODE64) +64 8),8) SEP ((RSP_0 -64 64),8); ((bot(fun__fts_read_INODE64) +64 8),8) SEP ((RSP_0 -64 72),8); ((bot(fun__fts_read_INODE64) +64 8),8) SEP ((RSP_0 -64 76),4); ((bot(fun__fts_read_INODE64) +64 8),8) SEP ((RSP_0 -64 80),4); ((bot(fun__fts_read_INODE64) +64 8),8) SEP ((RSP_0 -64 84),4); ((bot(fun__fts_read_INODE64) +64 8),8) SEP ((RSP_0 -64 88),4); ((bot(fun__fts_read_INODE64) +64 8),8) SEP ((RSP_0 -64 92),4); ((bot(fun__fts_read_INODE64) +64 8),8) SEP ((RSP_0 -64 104),8); ((bot(fun__fts_read_INODE64) +64 8),8) SEP ((RSP_0 -64 108),4); ((bot(fun__fts_read_INODE64) +64 8),8) SEP ((RSP_0 -64 264),8); ((bot(fun__fts_read_INODE64) +64 8),8) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100003394: MOV RAX, QWORD PTR [R12 + 8] 5"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003399"
 Separations "((bot(fun__fts_read_INODE64) +64 96),8) SEP (RSI_0,8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (RSP_0,8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (0x100004018,8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (0x100004020,8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (0x100004180,8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (0x100004188,8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (0x100004190,8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (0x100004198,8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (0x1000041a0,1); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (0x1000041a8,8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (0x1000041b0,8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (0x1000041b8,8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (0x1000041c0,8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (0x1000041c8,1); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (0x1000041d0,8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (0x1000041d8,8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSI_0 +64 8),8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 8),8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 16),8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 24),8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 32),8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 40),8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 48),8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 52),4); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 64),8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 72),8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 76),4); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 80),4); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 84),4); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 88),4); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 92),4); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 104),8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 108),4); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 264),8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100003399: MOV RCX, QWORD PTR [R12 + 96] 5"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000339e"
 Separations ""
 Assertions  "((RCX +64 104),8) SEP (RSP_0,8); ((RCX +64 104),8) SEP ((RSP_0 -64 8),8); ((RCX +64 104),8) SEP ((RSP_0 -64 16),8); ((RCX +64 104),8) SEP ((RSP_0 -64 24),8); ((RCX +64 104),8) SEP ((RSP_0 -64 32),8); ((RCX +64 104),8) SEP ((RSP_0 -64 40),8); ((RCX +64 104),8) SEP ((RSP_0 -64 48),8); ((RCX +64 104),8) SEP ((RSP_0 -64 52),4); ((RCX +64 104),8) SEP ((RSP_0 -64 64),8); ((RCX +64 104),8) SEP ((RSP_0 -64 72),8); ((RCX +64 104),8) SEP ((RSP_0 -64 76),4); ((RCX +64 104),8) SEP ((RSP_0 -64 80),4); ((RCX +64 104),8) SEP ((RSP_0 -64 84),4); ((RCX +64 104),8) SEP ((RSP_0 -64 88),4); ((RCX +64 104),8) SEP ((RSP_0 -64 92),4); ((RCX +64 104),8) SEP ((RSP_0 -64 104),8); ((RCX +64 104),8) SEP ((RSP_0 -64 108),4); ((RCX +64 104),8) SEP ((RSP_0 -64 264),8); ((RCX +64 104),8) SEP ((RSP_0 -64 280),16)"
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "10000339e: MOV RCX, QWORD PTR [RCX + 104] 4"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000033a2"
 Separations ""
 Assertions  "((RAX +64 24),8) SEP (RSP_0,8); ((RAX +64 24),8) SEP ((RSP_0 -64 8),8); ((RAX +64 24),8) SEP ((RSP_0 -64 16),8); ((RAX +64 24),8) SEP ((RSP_0 -64 24),8); ((RAX +64 24),8) SEP ((RSP_0 -64 32),8); ((RAX +64 24),8) SEP ((RSP_0 -64 40),8); ((RAX +64 24),8) SEP ((RSP_0 -64 48),8); ((RAX +64 24),8) SEP ((RSP_0 -64 52),4); ((RAX +64 24),8) SEP ((RSP_0 -64 64),8); ((RAX +64 24),8) SEP ((RSP_0 -64 72),8); ((RAX +64 24),8) SEP ((RSP_0 -64 76),4); ((RAX +64 24),8) SEP ((RSP_0 -64 80),4); ((RAX +64 24),8) SEP ((RSP_0 -64 84),4); ((RAX +64 24),8) SEP ((RSP_0 -64 88),4); ((RAX +64 24),8) SEP ((RSP_0 -64 92),4); ((RAX +64 24),8) SEP ((RSP_0 -64 104),8); ((RAX +64 24),8) SEP ((RSP_0 -64 108),4); ((RAX +64 24),8) SEP ((RSP_0 -64 264),8); ((RAX +64 24),8) SEP ((RSP_0 -64 280),16)"
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "1000033a2: ADD QWORD PTR [RAX + 24], RCX 4"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000033a6"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "1000033a6: JMP 4294980810 5"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 100002a94, blockId == 127 ##
#######################################
*)

htriple "ht_10000335c"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "10000335c: XORPS XMM0, XMM0 3"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000335f"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "10000335f: CVTSI2SD XMM0, RAX 5"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003364"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100003364: ExternalCall fun_0x100003895 5"
 Post  "RAX = bot(fun_0x100003895) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 FunctionConstraints "PRESERVES fun_0x100003895 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004018,8];[0x100004020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 76),4];[(RSP_0 -64 80),4];[(RSP_0 -64 84),4];[(RSP_0 -64 88),4];[(RSP_0 -64 92),4];[(RSP_0 -64 104),8];[(RSP_0 -64 108),4];[(RSP_0 -64 264),8];[(RSP_0 -64 280),16]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003369"
 Separations "((bot(fun__fts_read_INODE64) +64 48),8) SEP (RSI_0,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (RSP_0,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x100004018,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x100004020,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x100004180,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x100004188,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x100004190,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x100004198,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x1000041a0,1); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x1000041a8,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x1000041b0,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x1000041b8,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x1000041c0,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x1000041c8,1); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x1000041d0,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x1000041d8,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSI_0 +64 8),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 8),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 16),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 24),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 32),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 40),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 48),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 52),4); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 64),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 72),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 76),4); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 80),4); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 84),4); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 88),4); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 92),4); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 104),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 108),4); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 264),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100003895) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100003369: MOV RSI, QWORD PTR [R12 + 48] 5"
 Post  "RAX = bot(fun_0x100003895) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000336e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100003895) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "10000336e: LEA RDI, [RIP + 2653] 7"
 Post  "RAX = bot(fun_0x100003895) ; RDI = 0x100003dd2 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003375"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100003895) ; RDI = 0x100003dd2 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100003375: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RDI = 0x100003dd2 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003377"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RDI = 0x100003dd2 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100003377: ExternalCall fun__printf 5"
 Post  "RAX = bot(fun__printf) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 FunctionConstraints "PRESERVES fun__printf {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004018,8];[0x100004020,8];[0x100004180,8];[0x100004188,8];[0x100004190,8];[0x100004198,8];[0x1000041a0,1];[0x1000041a8,8];[0x1000041b0,8];[0x1000041b8,8];[0x1000041c0,8];[0x1000041c8,1];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 76),4];[(RSP_0 -64 80),4];[(RSP_0 -64 84),4];[(RSP_0 -64 88),4];[(RSP_0 -64 92),4];[(RSP_0 -64 104),8];[(RSP_0 -64 108),4];[(RSP_0 -64 264),8];[(RSP_0 -64 280),16]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000337c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__printf) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "10000337c: JMP 4294980500 2"
 Post  "RAX = bot(fun__printf) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 100002a94, blockId == 128 ##
#######################################
*)

htriple "ht_10000337e"
 Separations "((bot(fun__fts_read_INODE64) +64 48),8) SEP (RSI_0,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (RSP_0,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x100004018,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x100004020,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x100004180,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x100004188,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x100004190,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x100004198,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x1000041a0,1); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x1000041a8,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x1000041b0,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x1000041b8,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x1000041c0,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x1000041c8,1); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x1000041d0,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x1000041d8,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSI_0 +64 8),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 8),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 16),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 24),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 32),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 40),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 48),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 52),4); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 64),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 72),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 76),4); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 80),4); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 84),4); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 88),4); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 92),4); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 104),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 108),4); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 264),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "10000337e: MOV RDX, QWORD PTR [R12 + 48] 5"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003383"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100003383: LEA RDI, [RIP + 2637] 7"
 Post  "RDI = 0x100003dd7 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000338a"
 Separations ""
 Assertions  ""
 Pre   "RDI = 0x100003dd7 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "10000338a: MOV RSI, RAX 3"
 Post  "RDI = 0x100003dd7 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000338d"
 Separations ""
 Assertions  ""
 Pre   "RDI = 0x100003dd7 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "10000338d: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RDI = 0x100003dd7 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000338f"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RDI = 0x100003dd7 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "10000338f: ExternalCall fun__printf 5"
 Post  "RAX = bot(fun__printf) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 FunctionConstraints "PRESERVES fun__printf {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004018,8];[0x100004020,8];[0x100004180,8];[0x100004188,8];[0x100004190,8];[0x100004198,8];[0x1000041a0,1];[0x1000041a8,8];[0x1000041b0,8];[0x1000041b8,8];[0x1000041c0,8];[0x1000041c8,1];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 76),4];[(RSP_0 -64 80),4];[(RSP_0 -64 84),4];[(RSP_0 -64 88),4];[(RSP_0 -64 92),4];[(RSP_0 -64 104),8];[(RSP_0 -64 108),4];[(RSP_0 -64 264),8];[(RSP_0 -64 280),16]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 100002a94, blockId == 129 ##
#######################################
*)

htriple "ht_1000033b2"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "1000033b2: ExternalCall fun__free 5"
 Post  "RAX = bot(fun__free) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 FunctionConstraints "PRESERVES fun__free {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004018,8];[0x100004020,8];[0x100004180,8];[0x100004188,8];[0x100004190,8];[0x100004198,8];[0x1000041a0,1];[0x1000041a8,8];[0x1000041b0,8];[0x1000041b8,8];[0x1000041c0,8];[0x1000041c8,1];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 76),4];[(RSP_0 -64 80),4];[(RSP_0 -64 84),4];[(RSP_0 -64 88),4];[(RSP_0 -64 92),4];[(RSP_0 -64 104),8];[(RSP_0 -64 108),4];[(RSP_0 -64 264),8];[(RSP_0 -64 280),16]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000033b7"
 Separations "(0x1000041a8,8) SEP (bot(fun____error),4); (0x1000041a8,8) SEP (bot(fun__fts_read_INODE64),8); (0x1000041a8,8) SEP (RSI_0,8); (0x1000041a8,8) SEP (RSP_0,8); (0x1000041a8,8) SEP ([0x100004018,8]_0,8); (0x1000041a8,8) SEP ([0x100004020,8]_0,4); (0x1000041a8,8) SEP ((bot(fun__fts_read_INODE64) +64 8),8); (0x1000041a8,8) SEP ((bot(fun__fts_read_INODE64) +64 24),8); (0x1000041a8,8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x1000041a8,8) SEP ((bot(fun__fts_read_INODE64) +64 56),4); (0x1000041a8,8) SEP ((bot(fun__fts_read_INODE64) +64 86),2); (0x1000041a8,8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x1000041a8,8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x1000041a8,8) SEP ((RSI_0 +64 8),8); (0x1000041a8,8) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); (0x1000041a8,8) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4); (0x1000041a8,8) SEP ((RSP_0 -64 8),8); (0x1000041a8,8) SEP ((RSP_0 -64 16),8); (0x1000041a8,8) SEP ((RSP_0 -64 24),8); (0x1000041a8,8) SEP ((RSP_0 -64 32),8); (0x1000041a8,8) SEP ((RSP_0 -64 40),8); (0x1000041a8,8) SEP ((RSP_0 -64 48),8); (0x1000041a8,8) SEP ((RSP_0 -64 52),4); (0x1000041a8,8) SEP ((RSP_0 -64 64),4); (0x1000041a8,8) SEP ((RSP_0 -64 64),8); (0x1000041a8,8) SEP ((RSP_0 -64 72),8); (0x1000041a8,8) SEP ((RSP_0 -64 76),4); (0x1000041a8,8) SEP ((RSP_0 -64 80),4); (0x1000041a8,8) SEP ((RSP_0 -64 84),4); (0x1000041a8,8) SEP ((RSP_0 -64 88),4); (0x1000041a8,8) SEP ((RSP_0 -64 92),4); (0x1000041a8,8) SEP ((RSP_0 -64 104),8); (0x1000041a8,8) SEP ((RSP_0 -64 108),4); (0x1000041a8,8) SEP ((RSP_0 -64 264),8); (0x1000041a8,8) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RAX = bot(fun__free) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "1000033b7: MOV QWORD PTR [RIP + 3562], R13 7"
 Post  "RAX = bot(fun__free) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000041a8,8] = bot(fun__malloc) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000033be"
 Separations "(0x1000041b8,8) SEP (bot(fun____error),4); (0x1000041b8,8) SEP (bot(fun__fts_read_INODE64),8); (0x1000041b8,8) SEP (RSI_0,8); (0x1000041b8,8) SEP (RSP_0,8); (0x1000041b8,8) SEP ([0x100004018,8]_0,8); (0x1000041b8,8) SEP ([0x100004020,8]_0,4); (0x1000041b8,8) SEP ((bot(fun__fts_read_INODE64) +64 8),8); (0x1000041b8,8) SEP ((bot(fun__fts_read_INODE64) +64 24),8); (0x1000041b8,8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x1000041b8,8) SEP ((bot(fun__fts_read_INODE64) +64 56),4); (0x1000041b8,8) SEP ((bot(fun__fts_read_INODE64) +64 86),2); (0x1000041b8,8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x1000041b8,8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x1000041b8,8) SEP ((RSI_0 +64 8),8); (0x1000041b8,8) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); (0x1000041b8,8) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4); (0x1000041b8,8) SEP ((RSP_0 -64 8),8); (0x1000041b8,8) SEP ((RSP_0 -64 16),8); (0x1000041b8,8) SEP ((RSP_0 -64 24),8); (0x1000041b8,8) SEP ((RSP_0 -64 32),8); (0x1000041b8,8) SEP ((RSP_0 -64 40),8); (0x1000041b8,8) SEP ((RSP_0 -64 48),8); (0x1000041b8,8) SEP ((RSP_0 -64 52),4); (0x1000041b8,8) SEP ((RSP_0 -64 64),4); (0x1000041b8,8) SEP ((RSP_0 -64 64),8); (0x1000041b8,8) SEP ((RSP_0 -64 72),8); (0x1000041b8,8) SEP ((RSP_0 -64 76),4); (0x1000041b8,8) SEP ((RSP_0 -64 80),4); (0x1000041b8,8) SEP ((RSP_0 -64 84),4); (0x1000041b8,8) SEP ((RSP_0 -64 88),4); (0x1000041b8,8) SEP ((RSP_0 -64 92),4); (0x1000041b8,8) SEP ((RSP_0 -64 104),8); (0x1000041b8,8) SEP ((RSP_0 -64 108),4); (0x1000041b8,8) SEP ((RSP_0 -64 264),8); (0x1000041b8,8) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RAX = bot(fun__free) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000041a8,8] = bot(fun__malloc) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "1000033be: MOV QWORD PTR [RIP + 3571], R15 7"
 Post  "RAX = bot(fun__free) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__malloc) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000041a8,8] = bot(fun__malloc) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 100002a94, blockId == 130 ##
#######################################
*)

htriple "ht_1000033c5"
 Separations ""
 Assertions  "(RBX,4) SEP (RSP_0,8); (RBX,4) SEP ((RSP_0 -64 8),8); (RBX,4) SEP ((RSP_0 -64 16),8); (RBX,4) SEP ((RSP_0 -64 24),8); (RBX,4) SEP ((RSP_0 -64 32),8); (RBX,4) SEP ((RSP_0 -64 40),8); (RBX,4) SEP ((RSP_0 -64 48),8); (RBX,4) SEP ((RSP_0 -64 52),4); (RBX,4) SEP ((RSP_0 -64 64),8); (RBX,4) SEP ((RSP_0 -64 72),8); (RBX,4) SEP ((RSP_0 -64 76),4); (RBX,4) SEP ((RSP_0 -64 80),4); (RBX,4) SEP ((RSP_0 -64 84),4); (RBX,4) SEP ((RSP_0 -64 88),4); (RBX,4) SEP ((RSP_0 -64 92),4); (RBX,4) SEP ((RSP_0 -64 104),8); (RBX,4) SEP ((RSP_0 -64 108),4); (RBX,4) SEP ((RSP_0 -64 264),8); (RBX,4) SEP ((RSP_0 -64 280),16)"
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "1000033c5: MOVSXD RCX, DWORD PTR [RBX] 3"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000033c8"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "1000033c8: MOV R14, RBX 3"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000033cb"
 Separations ""
 Assertions  "((RBX +64 8),8) SEP (RSP_0,8); ((RBX +64 8),8) SEP ((RSP_0 -64 8),8); ((RBX +64 8),8) SEP ((RSP_0 -64 16),8); ((RBX +64 8),8) SEP ((RSP_0 -64 24),8); ((RBX +64 8),8) SEP ((RSP_0 -64 32),8); ((RBX +64 8),8) SEP ((RSP_0 -64 40),8); ((RBX +64 8),8) SEP ((RSP_0 -64 48),8); ((RBX +64 8),8) SEP ((RSP_0 -64 52),4); ((RBX +64 8),8) SEP ((RSP_0 -64 64),8); ((RBX +64 8),8) SEP ((RSP_0 -64 72),8); ((RBX +64 8),8) SEP ((RSP_0 -64 76),4); ((RBX +64 8),8) SEP ((RSP_0 -64 80),4); ((RBX +64 8),8) SEP ((RSP_0 -64 84),4); ((RBX +64 8),8) SEP ((RSP_0 -64 88),4); ((RBX +64 8),8) SEP ((RSP_0 -64 92),4); ((RBX +64 8),8) SEP ((RSP_0 -64 104),8); ((RBX +64 8),8) SEP ((RSP_0 -64 108),4); ((RBX +64 8),8) SEP ((RSP_0 -64 264),8); ((RBX +64 8),8) SEP ((RSP_0 -64 280),16)"
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "1000033cb: MOV RSI, QWORD PTR [RBX + 8] 4"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000033cf"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "1000033cf: MOV RAX, RCX 3"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000033d2"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "1000033d2: XOR RAX, RSI 3"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000033d5"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "1000033d5: XOR EDX, EDX 2"
 Post  "RDX = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000033d7"
 Separations ""
 Assertions  ""
 Pre   "RDX = 0 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "1000033d7: DIV R15 3"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000033da"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "1000033da: MOVSXD RBX, EDX 3"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000033dd"
 Separations ""
 Assertions  "((R13 +64 (RBX *64 8)),8) SEP (RSP_0,8); ((R13 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 8),8); ((R13 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 16),8); ((R13 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 24),8); ((R13 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 32),8); ((R13 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 40),8); ((R13 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 48),8); ((R13 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 52),4); ((R13 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 64),8); ((R13 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 72),8); ((R13 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 76),4); ((R13 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 80),4); ((R13 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 84),4); ((R13 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 88),4); ((R13 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 92),4); ((R13 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 104),8); ((R13 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 108),4); ((R13 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 264),8); ((R13 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 280),16)"
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "1000033dd: MOV RDI, QWORD PTR [R13 + RBX * 8] 5"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 100002a94, blockId == 131 ##
#######################################
*)

htriple "ht_1000033e7"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "1000033e7: CMP DWORD PTR [RDI + 20], ECX 3"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000033ea"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "1000033ea: JNE 4294980594 2"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 100002a94, blockId == 132 ##
#######################################
*)

htriple "ht_1000033f7"
 Separations "(0x1000041c8,1) SEP (bot(fun____error),4); (0x1000041c8,1) SEP (bot(fun__fts_read_INODE64),8); (0x1000041c8,1) SEP (RSI_0,8); (0x1000041c8,1) SEP (RSP_0,8); (0x1000041c8,1) SEP ([0x100004018,8]_0,8); (0x1000041c8,1) SEP ([0x100004020,8]_0,4); (0x1000041c8,1) SEP ((bot(fun__fts_read_INODE64) +64 8),8); (0x1000041c8,1) SEP ((bot(fun__fts_read_INODE64) +64 24),8); (0x1000041c8,1) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x1000041c8,1) SEP ((bot(fun__fts_read_INODE64) +64 56),4); (0x1000041c8,1) SEP ((bot(fun__fts_read_INODE64) +64 86),2); (0x1000041c8,1) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x1000041c8,1) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x1000041c8,1) SEP ((RSI_0 +64 8),8); (0x1000041c8,1) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); (0x1000041c8,1) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4); (0x1000041c8,1) SEP ((RSP_0 -64 8),8); (0x1000041c8,1) SEP ((RSP_0 -64 16),8); (0x1000041c8,1) SEP ((RSP_0 -64 24),8); (0x1000041c8,1) SEP ((RSP_0 -64 32),8); (0x1000041c8,1) SEP ((RSP_0 -64 40),8); (0x1000041c8,1) SEP ((RSP_0 -64 48),8); (0x1000041c8,1) SEP ((RSP_0 -64 52),4); (0x1000041c8,1) SEP ((RSP_0 -64 64),4); (0x1000041c8,1) SEP ((RSP_0 -64 64),8); (0x1000041c8,1) SEP ((RSP_0 -64 72),8); (0x1000041c8,1) SEP ((RSP_0 -64 76),4); (0x1000041c8,1) SEP ((RSP_0 -64 80),4); (0x1000041c8,1) SEP ((RSP_0 -64 84),4); (0x1000041c8,1) SEP ((RSP_0 -64 88),4); (0x1000041c8,1) SEP ((RSP_0 -64 92),4); (0x1000041c8,1) SEP ((RSP_0 -64 104),8); (0x1000041c8,1) SEP ((RSP_0 -64 108),4); (0x1000041c8,1) SEP ((RSP_0 -64 264),8); (0x1000041c8,1) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "1000033f7: CMP BYTE PTR [RIP + 3530], 0 7"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000033fe"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "1000033fe: JNE 4294980806 6"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 100002a94, blockId == 133 ##
#######################################
*)

htriple "ht_1000033ec"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "1000033ec: CMP QWORD PTR [RDI + 24], RSI 4"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000033f0"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "1000033f0: JE 4294980636 2"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 100002a94, blockId == 134 ##
#######################################
*)

htriple "ht_1000033f2"
 Separations ""
 Assertions  "(RDI,8) SEP (RSP_0,8); (RDI,8) SEP ((RSP_0 -64 8),8); (RDI,8) SEP ((RSP_0 -64 16),8); (RDI,8) SEP ((RSP_0 -64 24),8); (RDI,8) SEP ((RSP_0 -64 32),8); (RDI,8) SEP ((RSP_0 -64 40),8); (RDI,8) SEP ((RSP_0 -64 48),8); (RDI,8) SEP ((RSP_0 -64 52),4); (RDI,8) SEP ((RSP_0 -64 64),8); (RDI,8) SEP ((RSP_0 -64 72),8); (RDI,8) SEP ((RSP_0 -64 76),4); (RDI,8) SEP ((RSP_0 -64 80),4); (RDI,8) SEP ((RSP_0 -64 84),4); (RDI,8) SEP ((RSP_0 -64 88),4); (RDI,8) SEP ((RSP_0 -64 92),4); (RDI,8) SEP ((RSP_0 -64 104),8); (RDI,8) SEP ((RSP_0 -64 108),4); (RDI,8) SEP ((RSP_0 -64 264),8); (RDI,8) SEP ((RSP_0 -64 280),16)"
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "1000033f2: MOV RDI, QWORD PTR [RDI] 3"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000033f5"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "1000033f5: JMP 4294980578 2"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 100002a94, blockId == 135 ##
#######################################
*)

htriple "ht_10000341c"
 Separations ""
 Assertions  "((RDI +64 16),4) SEP (RSP_0,8); ((RDI +64 16),4) SEP ((RSP_0 -64 8),8); ((RDI +64 16),4) SEP ((RSP_0 -64 16),8); ((RDI +64 16),4) SEP ((RSP_0 -64 24),8); ((RDI +64 16),4) SEP ((RSP_0 -64 32),8); ((RDI +64 16),4) SEP ((RSP_0 -64 40),8); ((RDI +64 16),4) SEP ((RSP_0 -64 48),8); ((RDI +64 16),4) SEP ((RSP_0 -64 52),4); ((RDI +64 16),4) SEP ((RSP_0 -64 64),8); ((RDI +64 16),4) SEP ((RSP_0 -64 72),8); ((RDI +64 16),4) SEP ((RSP_0 -64 76),4); ((RDI +64 16),4) SEP ((RSP_0 -64 80),4); ((RDI +64 16),4) SEP ((RSP_0 -64 84),4); ((RDI +64 16),4) SEP ((RSP_0 -64 88),4); ((RDI +64 16),4) SEP ((RSP_0 -64 92),4); ((RDI +64 16),4) SEP ((RSP_0 -64 104),8); ((RDI +64 16),4) SEP ((RSP_0 -64 108),4); ((RDI +64 16),4) SEP ((RSP_0 -64 264),8); ((RDI +64 16),4) SEP ((RSP_0 -64 280),16)"
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "10000341c: MOV EAX, DWORD PTR [RDI + 16] 3"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000341f"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "10000341f: LEA ECX, [RAX - 1] 3"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003422"
 Separations ""
 Assertions  "((RDI +64 16),4) SEP (RSP_0,8); ((RDI +64 16),4) SEP ((RSP_0 -64 8),8); ((RDI +64 16),4) SEP ((RSP_0 -64 16),8); ((RDI +64 16),4) SEP ((RSP_0 -64 24),8); ((RDI +64 16),4) SEP ((RSP_0 -64 32),8); ((RDI +64 16),4) SEP ((RSP_0 -64 40),8); ((RDI +64 16),4) SEP ((RSP_0 -64 48),8); ((RDI +64 16),4) SEP ((RSP_0 -64 52),4); ((RDI +64 16),4) SEP ((RSP_0 -64 64),8); ((RDI +64 16),4) SEP ((RSP_0 -64 72),8); ((RDI +64 16),4) SEP ((RSP_0 -64 76),4); ((RDI +64 16),4) SEP ((RSP_0 -64 80),4); ((RDI +64 16),4) SEP ((RSP_0 -64 84),4); ((RDI +64 16),4) SEP ((RSP_0 -64 88),4); ((RDI +64 16),4) SEP ((RSP_0 -64 92),4); ((RDI +64 16),4) SEP ((RSP_0 -64 104),8); ((RDI +64 16),4) SEP ((RSP_0 -64 108),4); ((RDI +64 16),4) SEP ((RSP_0 -64 264),8); ((RDI +64 16),4) SEP ((RSP_0 -64 280),16)"
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "100003422: MOV DWORD PTR [RDI + 16], ECX 3"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003425"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "100003425: CMP EAX, 1 3"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003428"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "100003428: JG 4294980920 6"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 100002a94, blockId == 136 ##
#######################################
*)

htriple "ht_1000033e2"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "1000033e2: TEST RDI, RDI 3"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000033e5"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "1000033e5: JE 4294980599 2"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 100002a94, blockId == 137 ##
#######################################
*)

htriple "ht_100003404"
 Separations "(0x1000041b0,8) SEP (bot(fun____error),4); (0x1000041b0,8) SEP (bot(fun__fts_read_INODE64),8); (0x1000041b0,8) SEP (RSI_0,8); (0x1000041b0,8) SEP (RSP_0,8); (0x1000041b0,8) SEP ([0x100004018,8]_0,8); (0x1000041b0,8) SEP ([0x100004020,8]_0,4); (0x1000041b0,8) SEP ((bot(fun__fts_read_INODE64) +64 8),8); (0x1000041b0,8) SEP ((bot(fun__fts_read_INODE64) +64 24),8); (0x1000041b0,8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x1000041b0,8) SEP ((bot(fun__fts_read_INODE64) +64 56),4); (0x1000041b0,8) SEP ((bot(fun__fts_read_INODE64) +64 86),2); (0x1000041b0,8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x1000041b0,8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x1000041b0,8) SEP ((RSI_0 +64 8),8); (0x1000041b0,8) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); (0x1000041b0,8) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4); (0x1000041b0,8) SEP ((RSP_0 -64 8),8); (0x1000041b0,8) SEP ((RSP_0 -64 16),8); (0x1000041b0,8) SEP ((RSP_0 -64 24),8); (0x1000041b0,8) SEP ((RSP_0 -64 32),8); (0x1000041b0,8) SEP ((RSP_0 -64 40),8); (0x1000041b0,8) SEP ((RSP_0 -64 48),8); (0x1000041b0,8) SEP ((RSP_0 -64 52),4); (0x1000041b0,8) SEP ((RSP_0 -64 64),4); (0x1000041b0,8) SEP ((RSP_0 -64 64),8); (0x1000041b0,8) SEP ((RSP_0 -64 72),8); (0x1000041b0,8) SEP ((RSP_0 -64 76),4); (0x1000041b0,8) SEP ((RSP_0 -64 80),4); (0x1000041b0,8) SEP ((RSP_0 -64 84),4); (0x1000041b0,8) SEP ((RSP_0 -64 88),4); (0x1000041b0,8) SEP ((RSP_0 -64 92),4); (0x1000041b0,8) SEP ((RSP_0 -64 104),8); (0x1000041b0,8) SEP ((RSP_0 -64 108),4); (0x1000041b0,8) SEP ((RSP_0 -64 264),8); (0x1000041b0,8) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "100003404: MOV RAX, QWORD PTR [RIP + 3493] 7"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000340b"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "10000340b: TEST RAX, RAX 3"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000340e"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "10000340e: JE 4294980723 2"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 100002a94, blockId == 138 ##
#######################################
*)

htriple "ht_100003410"
 Separations ""
 Assertions  "(RAX,8) SEP (RSP_0,8); (RAX,8) SEP ((RSP_0 -64 8),8); (RAX,8) SEP ((RSP_0 -64 16),8); (RAX,8) SEP ((RSP_0 -64 24),8); (RAX,8) SEP ((RSP_0 -64 32),8); (RAX,8) SEP ((RSP_0 -64 40),8); (RAX,8) SEP ((RSP_0 -64 48),8); (RAX,8) SEP ((RSP_0 -64 52),4); (RAX,8) SEP ((RSP_0 -64 64),8); (RAX,8) SEP ((RSP_0 -64 72),8); (RAX,8) SEP ((RSP_0 -64 76),4); (RAX,8) SEP ((RSP_0 -64 80),4); (RAX,8) SEP ((RSP_0 -64 84),4); (RAX,8) SEP ((RSP_0 -64 88),4); (RAX,8) SEP ((RSP_0 -64 92),4); (RAX,8) SEP ((RSP_0 -64 104),8); (RAX,8) SEP ((RSP_0 -64 108),4); (RAX,8) SEP ((RSP_0 -64 264),8); (RAX,8) SEP ((RSP_0 -64 280),16)"
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "100003410: MOV RDX, QWORD PTR [RAX] 3"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003413"
 Separations "(0x1000041b0,8) SEP (bot(fun____error),4); (0x1000041b0,8) SEP (bot(fun__fts_read_INODE64),8); (0x1000041b0,8) SEP (RSI_0,8); (0x1000041b0,8) SEP (RSP_0,8); (0x1000041b0,8) SEP ([0x100004018,8]_0,8); (0x1000041b0,8) SEP ([0x100004020,8]_0,4); (0x1000041b0,8) SEP ((bot(fun__fts_read_INODE64) +64 8),8); (0x1000041b0,8) SEP ((bot(fun__fts_read_INODE64) +64 24),8); (0x1000041b0,8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x1000041b0,8) SEP ((bot(fun__fts_read_INODE64) +64 56),4); (0x1000041b0,8) SEP ((bot(fun__fts_read_INODE64) +64 86),2); (0x1000041b0,8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x1000041b0,8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x1000041b0,8) SEP ((RSI_0 +64 8),8); (0x1000041b0,8) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); (0x1000041b0,8) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4); (0x1000041b0,8) SEP ((RSP_0 -64 8),8); (0x1000041b0,8) SEP ((RSP_0 -64 16),8); (0x1000041b0,8) SEP ((RSP_0 -64 24),8); (0x1000041b0,8) SEP ((RSP_0 -64 32),8); (0x1000041b0,8) SEP ((RSP_0 -64 40),8); (0x1000041b0,8) SEP ((RSP_0 -64 48),8); (0x1000041b0,8) SEP ((RSP_0 -64 52),4); (0x1000041b0,8) SEP ((RSP_0 -64 64),4); (0x1000041b0,8) SEP ((RSP_0 -64 64),8); (0x1000041b0,8) SEP ((RSP_0 -64 72),8); (0x1000041b0,8) SEP ((RSP_0 -64 76),4); (0x1000041b0,8) SEP ((RSP_0 -64 80),4); (0x1000041b0,8) SEP ((RSP_0 -64 84),4); (0x1000041b0,8) SEP ((RSP_0 -64 88),4); (0x1000041b0,8) SEP ((RSP_0 -64 92),4); (0x1000041b0,8) SEP ((RSP_0 -64 104),8); (0x1000041b0,8) SEP ((RSP_0 -64 108),4); (0x1000041b0,8) SEP ((RSP_0 -64 264),8); (0x1000041b0,8) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "100003413: MOV QWORD PTR [RIP + 3478], RDX 7"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000341a"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "10000341a: JMP 4294980749 2"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 100002a94, blockId == 139 ##
#######################################
*)

htriple "ht_100003473"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "100003473: MOV EDI, 32 5"
 Post  "RDI = 32 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003478"
 Separations ""
 Assertions  ""
 Pre   "RDI = 32 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "100003478: ExternalCall fun__malloc 5"
 Post  "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 FunctionConstraints "PRESERVES fun__malloc {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004018,8];[0x100004020,8];[0x100004180,8];[0x100004188,8];[0x100004190,8];[0x100004198,8];[0x1000041a0,1];[0x1000041a8,8];[0x1000041b0,8];[0x1000041b8,8];[0x1000041c0,8];[0x1000041c8,1];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 76),4];[(RSP_0 -64 80),4];[(RSP_0 -64 84),4];[(RSP_0 -64 88),4];[(RSP_0 -64 92),4];[(RSP_0 -64 104),8];[(RSP_0 -64 108),4];[(RSP_0 -64 264),8];[(RSP_0 -64 280),16]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000347d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "10000347d: TEST RAX, RAX 3"
 Post  "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003480"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "100003480: JE 4294980995 6"
 Post  "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 100002a94, blockId == 140 ##
#######################################
*)

htriple "ht_10000342e"
 Separations ""
 Assertions  "((RDI +64 8),8) SEP (RSP_0,8); ((RDI +64 8),8) SEP ((RSP_0 -64 8),8); ((RDI +64 8),8) SEP ((RSP_0 -64 16),8); ((RDI +64 8),8) SEP ((RSP_0 -64 24),8); ((RDI +64 8),8) SEP ((RSP_0 -64 32),8); ((RDI +64 8),8) SEP ((RSP_0 -64 40),8); ((RDI +64 8),8) SEP ((RSP_0 -64 48),8); ((RDI +64 8),8) SEP ((RSP_0 -64 52),4); ((RDI +64 8),8) SEP ((RSP_0 -64 64),8); ((RDI +64 8),8) SEP ((RSP_0 -64 72),8); ((RDI +64 8),8) SEP ((RSP_0 -64 76),4); ((RDI +64 8),8) SEP ((RSP_0 -64 80),4); ((RDI +64 8),8) SEP ((RSP_0 -64 84),4); ((RDI +64 8),8) SEP ((RSP_0 -64 88),4); ((RDI +64 8),8) SEP ((RSP_0 -64 92),4); ((RDI +64 8),8) SEP ((RSP_0 -64 104),8); ((RDI +64 8),8) SEP ((RSP_0 -64 108),4); ((RDI +64 8),8) SEP ((RSP_0 -64 264),8); ((RDI +64 8),8) SEP ((RSP_0 -64 280),16)"
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "10000342e: MOV RAX, QWORD PTR [RDI + 8] 4"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003432"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "100003432: TEST RAX, RAX 3"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003435"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "100003435: JE 4294980669 2"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 100002a94, blockId == 141 ##
#######################################
*)

htriple "ht_100003538"
 Separations "((RSP_0 -64 64),4) SEP (bot(fun____error),4); ((RSP_0 -64 64),4) SEP (RSI_0,8); ((RSP_0 -64 64),4) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 64),8) SEP (bot(fun____error),4); ((RSP_0 -64 64),8) SEP (bot(fun__fts_read_INODE64),8); ((RSP_0 -64 64),8) SEP (RSI_0,8); ((RSP_0 -64 64),8) SEP ([0x100004018,8]_0,8); ((RSP_0 -64 64),8) SEP ([0x100004020,8]_0,4); ((RSP_0 -64 64),8) SEP (0x100004018,8); ((RSP_0 -64 64),8) SEP (0x100004020,8); ((RSP_0 -64 64),8) SEP (0x100004180,8); ((RSP_0 -64 64),8) SEP (0x100004188,8); ((RSP_0 -64 64),8) SEP (0x100004190,8); ((RSP_0 -64 64),8) SEP (0x100004198,8); ((RSP_0 -64 64),8) SEP (0x1000041a0,1); ((RSP_0 -64 64),8) SEP (0x1000041a8,8); ((RSP_0 -64 64),8) SEP (0x1000041b0,8); ((RSP_0 -64 64),8) SEP (0x1000041b8,8); ((RSP_0 -64 64),8) SEP (0x1000041c0,8); ((RSP_0 -64 64),8) SEP (0x1000041c8,1); ((RSP_0 -64 64),8) SEP (0x1000041d0,8); ((RSP_0 -64 64),8) SEP (0x1000041d8,8); ((RSP_0 -64 64),8) SEP ((bot(fun__fts_read_INODE64) +64 8),8); ((RSP_0 -64 64),8) SEP ((bot(fun__fts_read_INODE64) +64 24),8); ((RSP_0 -64 64),8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); ((RSP_0 -64 64),8) SEP ((bot(fun__fts_read_INODE64) +64 56),4); ((RSP_0 -64 64),8) SEP ((bot(fun__fts_read_INODE64) +64 86),2); ((RSP_0 -64 64),8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); ((RSP_0 -64 64),8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 64),8) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); ((RSP_0 -64 64),8) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "100003538: MOV R13, QWORD PTR [RBP - 56] 4"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000353c"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "10000353c: JMP 4294979010 5"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 100002a94, blockId == 142 ##
#######################################
*)

htriple "ht_100003437"
 Separations ""
 Assertions  "(RDI,8) SEP (RSP_0,8); (RDI,8) SEP ((RSP_0 -64 8),8); (RDI,8) SEP ((RSP_0 -64 16),8); (RDI,8) SEP ((RSP_0 -64 24),8); (RDI,8) SEP ((RSP_0 -64 32),8); (RDI,8) SEP ((RSP_0 -64 40),8); (RDI,8) SEP ((RSP_0 -64 48),8); (RDI,8) SEP ((RSP_0 -64 52),4); (RDI,8) SEP ((RSP_0 -64 64),8); (RDI,8) SEP ((RSP_0 -64 72),8); (RDI,8) SEP ((RSP_0 -64 76),4); (RDI,8) SEP ((RSP_0 -64 80),4); (RDI,8) SEP ((RSP_0 -64 84),4); (RDI,8) SEP ((RSP_0 -64 88),4); (RDI,8) SEP ((RSP_0 -64 92),4); (RDI,8) SEP ((RSP_0 -64 104),8); (RDI,8) SEP ((RSP_0 -64 108),4); (RDI,8) SEP ((RSP_0 -64 264),8); (RDI,8) SEP ((RSP_0 -64 280),16)"
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "100003437: MOV RCX, QWORD PTR [RDI] 3"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000343a"
 Separations ""
 Assertions  "(RAX,8) SEP (RSP_0,8); (RAX,8) SEP ((RSP_0 -64 8),8); (RAX,8) SEP ((RSP_0 -64 16),8); (RAX,8) SEP ((RSP_0 -64 24),8); (RAX,8) SEP ((RSP_0 -64 32),8); (RAX,8) SEP ((RSP_0 -64 40),8); (RAX,8) SEP ((RSP_0 -64 48),8); (RAX,8) SEP ((RSP_0 -64 52),4); (RAX,8) SEP ((RSP_0 -64 64),8); (RAX,8) SEP ((RSP_0 -64 72),8); (RAX,8) SEP ((RSP_0 -64 76),4); (RAX,8) SEP ((RSP_0 -64 80),4); (RAX,8) SEP ((RSP_0 -64 84),4); (RAX,8) SEP ((RSP_0 -64 88),4); (RAX,8) SEP ((RSP_0 -64 92),4); (RAX,8) SEP ((RSP_0 -64 104),8); (RAX,8) SEP ((RSP_0 -64 108),4); (RAX,8) SEP ((RSP_0 -64 264),8); (RAX,8) SEP ((RSP_0 -64 280),16)"
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "10000343a: MOV QWORD PTR [RAX], RCX 3"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 100002a94, blockId == 143 ##
#######################################
*)

htriple "ht_10000343d"
 Separations ""
 Assertions  "(RDI,8) SEP (RSP_0,8); (RDI,8) SEP ((RSP_0 -64 8),8); (RDI,8) SEP ((RSP_0 -64 16),8); (RDI,8) SEP ((RSP_0 -64 24),8); (RDI,8) SEP ((RSP_0 -64 32),8); (RDI,8) SEP ((RSP_0 -64 40),8); (RDI,8) SEP ((RSP_0 -64 48),8); (RDI,8) SEP ((RSP_0 -64 52),4); (RDI,8) SEP ((RSP_0 -64 64),8); (RDI,8) SEP ((RSP_0 -64 72),8); (RDI,8) SEP ((RSP_0 -64 76),4); (RDI,8) SEP ((RSP_0 -64 80),4); (RDI,8) SEP ((RSP_0 -64 84),4); (RDI,8) SEP ((RSP_0 -64 88),4); (RDI,8) SEP ((RSP_0 -64 92),4); (RDI,8) SEP ((RSP_0 -64 104),8); (RDI,8) SEP ((RSP_0 -64 108),4); (RDI,8) SEP ((RSP_0 -64 264),8); (RDI,8) SEP ((RSP_0 -64 280),16)"
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "10000343d: MOV RCX, QWORD PTR [RDI] 3"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003440"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "100003440: TEST RCX, RCX 3"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003443"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "100003443: JE 4294980681 2"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 100002a94, blockId == 144 ##
#######################################
*)

htriple "ht_100003445"
 Separations ""
 Assertions  "((RCX +64 8),8) SEP (RSP_0,8); ((RCX +64 8),8) SEP ((RSP_0 -64 8),8); ((RCX +64 8),8) SEP ((RSP_0 -64 16),8); ((RCX +64 8),8) SEP ((RSP_0 -64 24),8); ((RCX +64 8),8) SEP ((RSP_0 -64 32),8); ((RCX +64 8),8) SEP ((RSP_0 -64 40),8); ((RCX +64 8),8) SEP ((RSP_0 -64 48),8); ((RCX +64 8),8) SEP ((RSP_0 -64 52),4); ((RCX +64 8),8) SEP ((RSP_0 -64 64),8); ((RCX +64 8),8) SEP ((RSP_0 -64 72),8); ((RCX +64 8),8) SEP ((RSP_0 -64 76),4); ((RCX +64 8),8) SEP ((RSP_0 -64 80),4); ((RCX +64 8),8) SEP ((RSP_0 -64 84),4); ((RCX +64 8),8) SEP ((RSP_0 -64 88),4); ((RCX +64 8),8) SEP ((RSP_0 -64 92),4); ((RCX +64 8),8) SEP ((RSP_0 -64 104),8); ((RCX +64 8),8) SEP ((RSP_0 -64 108),4); ((RCX +64 8),8) SEP ((RSP_0 -64 264),8); ((RCX +64 8),8) SEP ((RSP_0 -64 280),16)"
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "100003445: MOV QWORD PTR [RCX + 8], RAX 4"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 100002a94, blockId == 145 ##
#######################################
*)

htriple "ht_100003449"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "100003449: CMP QWORD PTR [R13 + RBX * 8], RDI 5"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000344e"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "10000344e: JNE 4294980693 2"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 100002a94, blockId == 146 ##
#######################################
*)

htriple "ht_100003450"
 Separations ""
 Assertions  "((R13 +64 (RBX *64 8)),8) SEP (RSP_0,8); ((R13 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 8),8); ((R13 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 16),8); ((R13 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 24),8); ((R13 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 32),8); ((R13 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 40),8); ((R13 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 48),8); ((R13 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 52),4); ((R13 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 64),8); ((R13 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 72),8); ((R13 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 76),4); ((R13 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 80),4); ((R13 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 84),4); ((R13 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 88),4); ((R13 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 92),4); ((R13 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 104),8); ((R13 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 108),4); ((R13 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 264),8); ((R13 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 280),16)"
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "100003450: MOV QWORD PTR [R13 + RBX * 8], RCX 5"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 100002a94, blockId == 147 ##
#######################################
*)

htriple "ht_100003455"
 Separations "(0x1000041c0,8) SEP (bot(fun____error),4); (0x1000041c0,8) SEP (bot(fun__fts_read_INODE64),8); (0x1000041c0,8) SEP (RSI_0,8); (0x1000041c0,8) SEP (RSP_0,8); (0x1000041c0,8) SEP ([0x100004018,8]_0,8); (0x1000041c0,8) SEP ([0x100004020,8]_0,4); (0x1000041c0,8) SEP ((bot(fun__fts_read_INODE64) +64 8),8); (0x1000041c0,8) SEP ((bot(fun__fts_read_INODE64) +64 24),8); (0x1000041c0,8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x1000041c0,8) SEP ((bot(fun__fts_read_INODE64) +64 56),4); (0x1000041c0,8) SEP ((bot(fun__fts_read_INODE64) +64 86),2); (0x1000041c0,8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x1000041c0,8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x1000041c0,8) SEP ((RSI_0 +64 8),8); (0x1000041c0,8) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); (0x1000041c0,8) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4); (0x1000041c0,8) SEP ((RSP_0 -64 8),8); (0x1000041c0,8) SEP ((RSP_0 -64 16),8); (0x1000041c0,8) SEP ((RSP_0 -64 24),8); (0x1000041c0,8) SEP ((RSP_0 -64 32),8); (0x1000041c0,8) SEP ((RSP_0 -64 40),8); (0x1000041c0,8) SEP ((RSP_0 -64 48),8); (0x1000041c0,8) SEP ((RSP_0 -64 52),4); (0x1000041c0,8) SEP ((RSP_0 -64 64),4); (0x1000041c0,8) SEP ((RSP_0 -64 64),8); (0x1000041c0,8) SEP ((RSP_0 -64 72),8); (0x1000041c0,8) SEP ((RSP_0 -64 76),4); (0x1000041c0,8) SEP ((RSP_0 -64 80),4); (0x1000041c0,8) SEP ((RSP_0 -64 84),4); (0x1000041c0,8) SEP ((RSP_0 -64 88),4); (0x1000041c0,8) SEP ((RSP_0 -64 92),4); (0x1000041c0,8) SEP ((RSP_0 -64 104),8); (0x1000041c0,8) SEP ((RSP_0 -64 108),4); (0x1000041c0,8) SEP ((RSP_0 -64 264),8); (0x1000041c0,8) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "100003455: DEC QWORD PTR [RIP + 3428] 7"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000345c"
 Separations "(0x1000041c8,1) SEP (bot(fun____error),4); (0x1000041c8,1) SEP (bot(fun__fts_read_INODE64),8); (0x1000041c8,1) SEP (RSI_0,8); (0x1000041c8,1) SEP (RSP_0,8); (0x1000041c8,1) SEP ([0x100004018,8]_0,8); (0x1000041c8,1) SEP ([0x100004020,8]_0,4); (0x1000041c8,1) SEP ((bot(fun__fts_read_INODE64) +64 8),8); (0x1000041c8,1) SEP ((bot(fun__fts_read_INODE64) +64 24),8); (0x1000041c8,1) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x1000041c8,1) SEP ((bot(fun__fts_read_INODE64) +64 56),4); (0x1000041c8,1) SEP ((bot(fun__fts_read_INODE64) +64 86),2); (0x1000041c8,1) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x1000041c8,1) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x1000041c8,1) SEP ((RSI_0 +64 8),8); (0x1000041c8,1) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); (0x1000041c8,1) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4); (0x1000041c8,1) SEP ((RSP_0 -64 8),8); (0x1000041c8,1) SEP ((RSP_0 -64 16),8); (0x1000041c8,1) SEP ((RSP_0 -64 24),8); (0x1000041c8,1) SEP ((RSP_0 -64 32),8); (0x1000041c8,1) SEP ((RSP_0 -64 40),8); (0x1000041c8,1) SEP ((RSP_0 -64 48),8); (0x1000041c8,1) SEP ((RSP_0 -64 52),4); (0x1000041c8,1) SEP ((RSP_0 -64 64),4); (0x1000041c8,1) SEP ((RSP_0 -64 64),8); (0x1000041c8,1) SEP ((RSP_0 -64 72),8); (0x1000041c8,1) SEP ((RSP_0 -64 76),4); (0x1000041c8,1) SEP ((RSP_0 -64 80),4); (0x1000041c8,1) SEP ((RSP_0 -64 84),4); (0x1000041c8,1) SEP ((RSP_0 -64 88),4); (0x1000041c8,1) SEP ((RSP_0 -64 92),4); (0x1000041c8,1) SEP ((RSP_0 -64 104),8); (0x1000041c8,1) SEP ((RSP_0 -64 108),4); (0x1000041c8,1) SEP ((RSP_0 -64 264),8); (0x1000041c8,1) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "10000345c: CMP BYTE PTR [RIP + 3429], 1 7"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003463"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "100003463: JNE 4294980903 6"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 100002a94, blockId == 148 ##
#######################################
*)

htriple "ht_100003469"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "100003469: ExternalCall fun__free 5"
 Post  "RAX = bot(fun__free) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 FunctionConstraints "PRESERVES fun__free {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004018,8];[0x100004020,8];[0x100004180,8];[0x100004188,8];[0x100004190,8];[0x100004198,8];[0x1000041a0,1];[0x1000041a8,8];[0x1000041b0,8];[0x1000041b8,8];[0x1000041c0,8];[0x1000041c8,1];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 76),4];[(RSP_0 -64 80),4];[(RSP_0 -64 84),4];[(RSP_0 -64 88),4];[(RSP_0 -64 92),4];[(RSP_0 -64 104),8];[(RSP_0 -64 108),4];[(RSP_0 -64 264),8];[(RSP_0 -64 280),16]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000346e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__free) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "10000346e: JMP 4294980920 5"
 Post  "RAX = bot(fun__free) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 100002a94, blockId == 149 ##
#######################################
*)

htriple "ht_100003527"
 Separations "(0x1000041b0,8) SEP (bot(fun____error),4); (0x1000041b0,8) SEP (bot(fun__fts_read_INODE64),8); (0x1000041b0,8) SEP (RSI_0,8); (0x1000041b0,8) SEP (RSP_0,8); (0x1000041b0,8) SEP ([0x100004018,8]_0,8); (0x1000041b0,8) SEP ([0x100004020,8]_0,4); (0x1000041b0,8) SEP ((bot(fun__fts_read_INODE64) +64 8),8); (0x1000041b0,8) SEP ((bot(fun__fts_read_INODE64) +64 24),8); (0x1000041b0,8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x1000041b0,8) SEP ((bot(fun__fts_read_INODE64) +64 56),4); (0x1000041b0,8) SEP ((bot(fun__fts_read_INODE64) +64 86),2); (0x1000041b0,8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x1000041b0,8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x1000041b0,8) SEP ((RSI_0 +64 8),8); (0x1000041b0,8) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); (0x1000041b0,8) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4); (0x1000041b0,8) SEP ((RSP_0 -64 8),8); (0x1000041b0,8) SEP ((RSP_0 -64 16),8); (0x1000041b0,8) SEP ((RSP_0 -64 24),8); (0x1000041b0,8) SEP ((RSP_0 -64 32),8); (0x1000041b0,8) SEP ((RSP_0 -64 40),8); (0x1000041b0,8) SEP ((RSP_0 -64 48),8); (0x1000041b0,8) SEP ((RSP_0 -64 52),4); (0x1000041b0,8) SEP ((RSP_0 -64 64),4); (0x1000041b0,8) SEP ((RSP_0 -64 64),8); (0x1000041b0,8) SEP ((RSP_0 -64 72),8); (0x1000041b0,8) SEP ((RSP_0 -64 76),4); (0x1000041b0,8) SEP ((RSP_0 -64 80),4); (0x1000041b0,8) SEP ((RSP_0 -64 84),4); (0x1000041b0,8) SEP ((RSP_0 -64 88),4); (0x1000041b0,8) SEP ((RSP_0 -64 92),4); (0x1000041b0,8) SEP ((RSP_0 -64 104),8); (0x1000041b0,8) SEP ((RSP_0 -64 108),4); (0x1000041b0,8) SEP ((RSP_0 -64 264),8); (0x1000041b0,8) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "100003527: MOV RAX, QWORD PTR [RIP + 3202] 7"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000352e"
 Separations ""
 Assertions  "(RDI,8) SEP (RSP_0,8); (RDI,8) SEP ((RSP_0 -64 8),8); (RDI,8) SEP ((RSP_0 -64 16),8); (RDI,8) SEP ((RSP_0 -64 24),8); (RDI,8) SEP ((RSP_0 -64 32),8); (RDI,8) SEP ((RSP_0 -64 40),8); (RDI,8) SEP ((RSP_0 -64 48),8); (RDI,8) SEP ((RSP_0 -64 52),4); (RDI,8) SEP ((RSP_0 -64 64),8); (RDI,8) SEP ((RSP_0 -64 72),8); (RDI,8) SEP ((RSP_0 -64 76),4); (RDI,8) SEP ((RSP_0 -64 80),4); (RDI,8) SEP ((RSP_0 -64 84),4); (RDI,8) SEP ((RSP_0 -64 88),4); (RDI,8) SEP ((RSP_0 -64 92),4); (RDI,8) SEP ((RSP_0 -64 104),8); (RDI,8) SEP ((RSP_0 -64 108),4); (RDI,8) SEP ((RSP_0 -64 264),8); (RDI,8) SEP ((RSP_0 -64 280),16)"
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "10000352e: MOV QWORD PTR [RDI], RAX 3"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003531"
 Separations "(0x1000041b0,8) SEP (bot(fun____error),4); (0x1000041b0,8) SEP (bot(fun__fts_read_INODE64),8); (0x1000041b0,8) SEP (RSI_0,8); (0x1000041b0,8) SEP (RSP_0,8); (0x1000041b0,8) SEP ([0x100004018,8]_0,8); (0x1000041b0,8) SEP ([0x100004020,8]_0,4); (0x1000041b0,8) SEP ((bot(fun__fts_read_INODE64) +64 8),8); (0x1000041b0,8) SEP ((bot(fun__fts_read_INODE64) +64 24),8); (0x1000041b0,8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x1000041b0,8) SEP ((bot(fun__fts_read_INODE64) +64 56),4); (0x1000041b0,8) SEP ((bot(fun__fts_read_INODE64) +64 86),2); (0x1000041b0,8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x1000041b0,8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x1000041b0,8) SEP ((RSI_0 +64 8),8); (0x1000041b0,8) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); (0x1000041b0,8) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4); (0x1000041b0,8) SEP ((RSP_0 -64 8),8); (0x1000041b0,8) SEP ((RSP_0 -64 16),8); (0x1000041b0,8) SEP ((RSP_0 -64 24),8); (0x1000041b0,8) SEP ((RSP_0 -64 32),8); (0x1000041b0,8) SEP ((RSP_0 -64 40),8); (0x1000041b0,8) SEP ((RSP_0 -64 48),8); (0x1000041b0,8) SEP ((RSP_0 -64 52),4); (0x1000041b0,8) SEP ((RSP_0 -64 64),4); (0x1000041b0,8) SEP ((RSP_0 -64 64),8); (0x1000041b0,8) SEP ((RSP_0 -64 72),8); (0x1000041b0,8) SEP ((RSP_0 -64 76),4); (0x1000041b0,8) SEP ((RSP_0 -64 80),4); (0x1000041b0,8) SEP ((RSP_0 -64 84),4); (0x1000041b0,8) SEP ((RSP_0 -64 88),4); (0x1000041b0,8) SEP ((RSP_0 -64 92),4); (0x1000041b0,8) SEP ((RSP_0 -64 104),8); (0x1000041b0,8) SEP ((RSP_0 -64 108),4); (0x1000041b0,8) SEP ((RSP_0 -64 264),8); (0x1000041b0,8) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "100003531: MOV QWORD PTR [RIP + 3192], RDI 7"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 100002a94, blockId == 150 ##
#######################################
*)

htriple "ht_100003486"
 Separations ""
 Assertions  "(R14,4) SEP (RSP_0,8); (R14,4) SEP ((RSP_0 -64 8),8); (R14,4) SEP ((RSP_0 -64 16),8); (R14,4) SEP ((RSP_0 -64 24),8); (R14,4) SEP ((RSP_0 -64 32),8); (R14,4) SEP ((RSP_0 -64 40),8); (R14,4) SEP ((RSP_0 -64 48),8); (R14,4) SEP ((RSP_0 -64 52),4); (R14,4) SEP ((RSP_0 -64 64),8); (R14,4) SEP ((RSP_0 -64 72),8); (R14,4) SEP ((RSP_0 -64 76),4); (R14,4) SEP ((RSP_0 -64 80),4); (R14,4) SEP ((RSP_0 -64 84),4); (R14,4) SEP ((RSP_0 -64 88),4); (R14,4) SEP ((RSP_0 -64 92),4); (R14,4) SEP ((RSP_0 -64 104),8); (R14,4) SEP ((RSP_0 -64 108),4); (R14,4) SEP ((RSP_0 -64 264),8); (R14,4) SEP ((RSP_0 -64 280),16)"
 Pre   "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "100003486: MOV ECX, DWORD PTR [R14] 3"
 Post  "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003489"
 Separations ""
 Assertions  "((R14 +64 8),8) SEP (RSP_0,8); ((R14 +64 8),8) SEP ((RSP_0 -64 8),8); ((R14 +64 8),8) SEP ((RSP_0 -64 16),8); ((R14 +64 8),8) SEP ((RSP_0 -64 24),8); ((R14 +64 8),8) SEP ((RSP_0 -64 32),8); ((R14 +64 8),8) SEP ((RSP_0 -64 40),8); ((R14 +64 8),8) SEP ((RSP_0 -64 48),8); ((R14 +64 8),8) SEP ((RSP_0 -64 52),4); ((R14 +64 8),8) SEP ((RSP_0 -64 64),8); ((R14 +64 8),8) SEP ((RSP_0 -64 72),8); ((R14 +64 8),8) SEP ((RSP_0 -64 76),4); ((R14 +64 8),8) SEP ((RSP_0 -64 80),4); ((R14 +64 8),8) SEP ((RSP_0 -64 84),4); ((R14 +64 8),8) SEP ((RSP_0 -64 88),4); ((R14 +64 8),8) SEP ((RSP_0 -64 92),4); ((R14 +64 8),8) SEP ((RSP_0 -64 104),8); ((R14 +64 8),8) SEP ((RSP_0 -64 108),4); ((R14 +64 8),8) SEP ((RSP_0 -64 264),8); ((R14 +64 8),8) SEP ((RSP_0 -64 280),16)"
 Pre   "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "100003489: MOV RSI, QWORD PTR [R14 + 8] 4"
 Post  "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 100002a94, blockId == 151 ##
#######################################
*)

htriple "ht_100003583"
 Separations "(0x1000041c8,1) SEP (bot(fun____error),4); (0x1000041c8,1) SEP (bot(fun__fts_read_INODE64),8); (0x1000041c8,1) SEP (RSI_0,8); (0x1000041c8,1) SEP (RSP_0,8); (0x1000041c8,1) SEP ([0x100004018,8]_0,8); (0x1000041c8,1) SEP ([0x100004020,8]_0,4); (0x1000041c8,1) SEP ((bot(fun__fts_read_INODE64) +64 8),8); (0x1000041c8,1) SEP ((bot(fun__fts_read_INODE64) +64 24),8); (0x1000041c8,1) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x1000041c8,1) SEP ((bot(fun__fts_read_INODE64) +64 56),4); (0x1000041c8,1) SEP ((bot(fun__fts_read_INODE64) +64 86),2); (0x1000041c8,1) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x1000041c8,1) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x1000041c8,1) SEP ((RSI_0 +64 8),8); (0x1000041c8,1) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); (0x1000041c8,1) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4); (0x1000041c8,1) SEP ((RSP_0 -64 8),8); (0x1000041c8,1) SEP ((RSP_0 -64 16),8); (0x1000041c8,1) SEP ((RSP_0 -64 24),8); (0x1000041c8,1) SEP ((RSP_0 -64 32),8); (0x1000041c8,1) SEP ((RSP_0 -64 40),8); (0x1000041c8,1) SEP ((RSP_0 -64 48),8); (0x1000041c8,1) SEP ((RSP_0 -64 52),4); (0x1000041c8,1) SEP ((RSP_0 -64 64),4); (0x1000041c8,1) SEP ((RSP_0 -64 64),8); (0x1000041c8,1) SEP ((RSP_0 -64 72),8); (0x1000041c8,1) SEP ((RSP_0 -64 76),4); (0x1000041c8,1) SEP ((RSP_0 -64 80),4); (0x1000041c8,1) SEP ((RSP_0 -64 84),4); (0x1000041c8,1) SEP ((RSP_0 -64 88),4); (0x1000041c8,1) SEP ((RSP_0 -64 92),4); (0x1000041c8,1) SEP ((RSP_0 -64 104),8); (0x1000041c8,1) SEP ((RSP_0 -64 108),4); (0x1000041c8,1) SEP ((RSP_0 -64 264),8); (0x1000041c8,1) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "100003583: MOV BYTE PTR [RIP + 3134], 1 7"
 Post  "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000041c8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000358a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000041c8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "10000358a: LEA RDI, [RIP + 2322] 7"
 Post  "RAX = bot(fun__malloc) ; RDI = 0x100003ea3 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000041c8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003591"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RDI = 0x100003ea3 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000041c8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "100003591: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RDI = 0x100003ea3 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000041c8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003593"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RDI = 0x100003ea3 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000041c8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "100003593: ExternalCall fun__warnx 5"
 Post  "RAX = bot(fun__warnx) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000041c8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 FunctionConstraints "PRESERVES fun__warnx {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004018,8];[0x100004020,8];[0x100004180,8];[0x100004188,8];[0x100004190,8];[0x100004198,8];[0x1000041a0,1];[0x1000041a8,8];[0x1000041b0,8];[0x1000041b8,8];[0x1000041c0,8];[0x1000041c8,1];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 76),4];[(RSP_0 -64 80),4];[(RSP_0 -64 84),4];[(RSP_0 -64 88),4];[(RSP_0 -64 92),4];[(RSP_0 -64 104),8];[(RSP_0 -64 108),4];[(RSP_0 -64 264),8];[(RSP_0 -64 280),16]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003598"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__warnx) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000041c8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "100003598: JMP 4294980806 5"
 Post  "RAX = bot(fun__warnx) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000041c8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 100002a94, blockId == 152 ##
#######################################
*)

htriple "ht_10000348d"
 Separations ""
 Assertions  "((RAX +64 20),4) SEP (RSP_0,8); ((RAX +64 20),4) SEP ((RSP_0 -64 8),8); ((RAX +64 20),4) SEP ((RSP_0 -64 16),8); ((RAX +64 20),4) SEP ((RSP_0 -64 24),8); ((RAX +64 20),4) SEP ((RSP_0 -64 32),8); ((RAX +64 20),4) SEP ((RSP_0 -64 40),8); ((RAX +64 20),4) SEP ((RSP_0 -64 48),8); ((RAX +64 20),4) SEP ((RSP_0 -64 52),4); ((RAX +64 20),4) SEP ((RSP_0 -64 64),8); ((RAX +64 20),4) SEP ((RSP_0 -64 72),8); ((RAX +64 20),4) SEP ((RSP_0 -64 76),4); ((RAX +64 20),4) SEP ((RSP_0 -64 80),4); ((RAX +64 20),4) SEP ((RSP_0 -64 84),4); ((RAX +64 20),4) SEP ((RSP_0 -64 88),4); ((RAX +64 20),4) SEP ((RSP_0 -64 92),4); ((RAX +64 20),4) SEP ((RSP_0 -64 104),8); ((RAX +64 20),4) SEP ((RSP_0 -64 108),4); ((RAX +64 20),4) SEP ((RSP_0 -64 264),8); ((RAX +64 20),4) SEP ((RSP_0 -64 280),16)"
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "10000348d: MOV DWORD PTR [RAX + 20], ECX 3"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003490"
 Separations ""
 Assertions  "((RAX +64 24),8) SEP (RSP_0,8); ((RAX +64 24),8) SEP ((RSP_0 -64 8),8); ((RAX +64 24),8) SEP ((RSP_0 -64 16),8); ((RAX +64 24),8) SEP ((RSP_0 -64 24),8); ((RAX +64 24),8) SEP ((RSP_0 -64 32),8); ((RAX +64 24),8) SEP ((RSP_0 -64 40),8); ((RAX +64 24),8) SEP ((RSP_0 -64 48),8); ((RAX +64 24),8) SEP ((RSP_0 -64 52),4); ((RAX +64 24),8) SEP ((RSP_0 -64 64),8); ((RAX +64 24),8) SEP ((RSP_0 -64 72),8); ((RAX +64 24),8) SEP ((RSP_0 -64 76),4); ((RAX +64 24),8) SEP ((RSP_0 -64 80),4); ((RAX +64 24),8) SEP ((RSP_0 -64 84),4); ((RAX +64 24),8) SEP ((RSP_0 -64 88),4); ((RAX +64 24),8) SEP ((RSP_0 -64 92),4); ((RAX +64 24),8) SEP ((RSP_0 -64 104),8); ((RAX +64 24),8) SEP ((RSP_0 -64 108),4); ((RAX +64 24),8) SEP ((RSP_0 -64 264),8); ((RAX +64 24),8) SEP ((RSP_0 -64 280),16)"
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "100003490: MOV QWORD PTR [RAX + 24], RSI 4"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003494"
 Separations "((RSP_0 -64 116),4) SEP (bot(fun____error),4); ((RSP_0 -64 116),4) SEP (RSI_0,8); ((RSP_0 -64 116),4) SEP ((bot(fun__fts_read_INODE64) +64 24),8); ((RSP_0 -64 116),4) SEP ((RSI_0 +64 8),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "100003494: MOV ECX, DWORD PTR [RBP - 108] 3"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003497"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "100003497: DEC ECX 2"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003499"
 Separations ""
 Assertions  "((RAX +64 16),4) SEP (RSP_0,8); ((RAX +64 16),4) SEP ((RSP_0 -64 8),8); ((RAX +64 16),4) SEP ((RSP_0 -64 16),8); ((RAX +64 16),4) SEP ((RSP_0 -64 24),8); ((RAX +64 16),4) SEP ((RSP_0 -64 32),8); ((RAX +64 16),4) SEP ((RSP_0 -64 40),8); ((RAX +64 16),4) SEP ((RSP_0 -64 48),8); ((RAX +64 16),4) SEP ((RSP_0 -64 52),4); ((RAX +64 16),4) SEP ((RSP_0 -64 64),8); ((RAX +64 16),4) SEP ((RSP_0 -64 72),8); ((RAX +64 16),4) SEP ((RSP_0 -64 76),4); ((RAX +64 16),4) SEP ((RSP_0 -64 80),4); ((RAX +64 16),4) SEP ((RSP_0 -64 84),4); ((RAX +64 16),4) SEP ((RSP_0 -64 88),4); ((RAX +64 16),4) SEP ((RSP_0 -64 92),4); ((RAX +64 16),4) SEP ((RSP_0 -64 104),8); ((RAX +64 16),4) SEP ((RSP_0 -64 108),4); ((RAX +64 16),4) SEP ((RSP_0 -64 264),8); ((RAX +64 16),4) SEP ((RSP_0 -64 280),16)"
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "100003499: MOV DWORD PTR [RAX + 16], ECX 3"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000349c"
 Separations "(0x1000041c0,8) SEP (bot(fun____error),4); (0x1000041c0,8) SEP (bot(fun__fts_read_INODE64),8); (0x1000041c0,8) SEP (RSI_0,8); (0x1000041c0,8) SEP (RSP_0,8); (0x1000041c0,8) SEP ([0x100004018,8]_0,8); (0x1000041c0,8) SEP ([0x100004020,8]_0,4); (0x1000041c0,8) SEP ((bot(fun__fts_read_INODE64) +64 8),8); (0x1000041c0,8) SEP ((bot(fun__fts_read_INODE64) +64 24),8); (0x1000041c0,8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x1000041c0,8) SEP ((bot(fun__fts_read_INODE64) +64 56),4); (0x1000041c0,8) SEP ((bot(fun__fts_read_INODE64) +64 86),2); (0x1000041c0,8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x1000041c0,8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x1000041c0,8) SEP ((RSI_0 +64 8),8); (0x1000041c0,8) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); (0x1000041c0,8) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4); (0x1000041c0,8) SEP ((RSP_0 -64 8),8); (0x1000041c0,8) SEP ((RSP_0 -64 16),8); (0x1000041c0,8) SEP ((RSP_0 -64 24),8); (0x1000041c0,8) SEP ((RSP_0 -64 32),8); (0x1000041c0,8) SEP ((RSP_0 -64 40),8); (0x1000041c0,8) SEP ((RSP_0 -64 48),8); (0x1000041c0,8) SEP ((RSP_0 -64 52),4); (0x1000041c0,8) SEP ((RSP_0 -64 64),4); (0x1000041c0,8) SEP ((RSP_0 -64 64),8); (0x1000041c0,8) SEP ((RSP_0 -64 72),8); (0x1000041c0,8) SEP ((RSP_0 -64 76),4); (0x1000041c0,8) SEP ((RSP_0 -64 80),4); (0x1000041c0,8) SEP ((RSP_0 -64 84),4); (0x1000041c0,8) SEP ((RSP_0 -64 88),4); (0x1000041c0,8) SEP ((RSP_0 -64 92),4); (0x1000041c0,8) SEP ((RSP_0 -64 104),8); (0x1000041c0,8) SEP ((RSP_0 -64 108),4); (0x1000041c0,8) SEP ((RSP_0 -64 264),8); (0x1000041c0,8) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "10000349c: INC QWORD PTR [RIP + 3357] 7"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000034a3"
 Separations ""
 Assertions  "((R13 +64 (RBX *64 8)),8) SEP (RSP_0,8); ((R13 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 8),8); ((R13 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 16),8); ((R13 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 24),8); ((R13 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 32),8); ((R13 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 40),8); ((R13 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 48),8); ((R13 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 52),4); ((R13 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 64),8); ((R13 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 72),8); ((R13 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 76),4); ((R13 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 80),4); ((R13 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 84),4); ((R13 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 88),4); ((R13 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 92),4); ((R13 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 104),8); ((R13 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 108),4); ((R13 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 264),8); ((R13 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 280),16)"
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "1000034a3: MOV RCX, QWORD PTR [R13 + RBX * 8] 5"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000034a8"
 Separations ""
 Assertions  "(RAX,8) SEP (RSP_0,8); (RAX,8) SEP ((RSP_0 -64 8),8); (RAX,8) SEP ((RSP_0 -64 16),8); (RAX,8) SEP ((RSP_0 -64 24),8); (RAX,8) SEP ((RSP_0 -64 32),8); (RAX,8) SEP ((RSP_0 -64 40),8); (RAX,8) SEP ((RSP_0 -64 48),8); (RAX,8) SEP ((RSP_0 -64 52),4); (RAX,8) SEP ((RSP_0 -64 64),8); (RAX,8) SEP ((RSP_0 -64 72),8); (RAX,8) SEP ((RSP_0 -64 76),4); (RAX,8) SEP ((RSP_0 -64 80),4); (RAX,8) SEP ((RSP_0 -64 84),4); (RAX,8) SEP ((RSP_0 -64 88),4); (RAX,8) SEP ((RSP_0 -64 92),4); (RAX,8) SEP ((RSP_0 -64 104),8); (RAX,8) SEP ((RSP_0 -64 108),4); (RAX,8) SEP ((RSP_0 -64 264),8); (RAX,8) SEP ((RSP_0 -64 280),16)"
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "1000034a8: MOV QWORD PTR [RAX], RCX 3"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000034ab"
 Separations ""
 Assertions  "((RAX +64 8),8) SEP (RSP_0,8); ((RAX +64 8),8) SEP ((RSP_0 -64 8),8); ((RAX +64 8),8) SEP ((RSP_0 -64 16),8); ((RAX +64 8),8) SEP ((RSP_0 -64 24),8); ((RAX +64 8),8) SEP ((RSP_0 -64 32),8); ((RAX +64 8),8) SEP ((RSP_0 -64 40),8); ((RAX +64 8),8) SEP ((RSP_0 -64 48),8); ((RAX +64 8),8) SEP ((RSP_0 -64 52),4); ((RAX +64 8),8) SEP ((RSP_0 -64 64),8); ((RAX +64 8),8) SEP ((RSP_0 -64 72),8); ((RAX +64 8),8) SEP ((RSP_0 -64 76),4); ((RAX +64 8),8) SEP ((RSP_0 -64 80),4); ((RAX +64 8),8) SEP ((RSP_0 -64 84),4); ((RAX +64 8),8) SEP ((RSP_0 -64 88),4); ((RAX +64 8),8) SEP ((RSP_0 -64 92),4); ((RAX +64 8),8) SEP ((RSP_0 -64 104),8); ((RAX +64 8),8) SEP ((RSP_0 -64 108),4); ((RAX +64 8),8) SEP ((RSP_0 -64 264),8); ((RAX +64 8),8) SEP ((RSP_0 -64 280),16)"
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "1000034ab: MOV QWORD PTR [RAX + 8], 0 8"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000034b3"
 Separations ""
 Assertions  "((R13 +64 (RBX *64 8)),8) SEP (RSP_0,8); ((R13 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 8),8); ((R13 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 16),8); ((R13 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 24),8); ((R13 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 32),8); ((R13 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 40),8); ((R13 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 48),8); ((R13 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 52),4); ((R13 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 64),8); ((R13 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 72),8); ((R13 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 76),4); ((R13 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 80),4); ((R13 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 84),4); ((R13 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 88),4); ((R13 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 92),4); ((R13 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 104),8); ((R13 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 108),4); ((R13 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 264),8); ((R13 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 280),16)"
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "1000034b3: MOV RCX, QWORD PTR [R13 + RBX * 8] 5"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000034b8"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "1000034b8: TEST RCX, RCX 3"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000034bb"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "1000034bb: JE 4294980801 2"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 100002a94, blockId == 153 ##
#######################################
*)

htriple "ht_1000034bd"
 Separations ""
 Assertions  "((RCX +64 8),8) SEP (RSP_0,8); ((RCX +64 8),8) SEP ((RSP_0 -64 8),8); ((RCX +64 8),8) SEP ((RSP_0 -64 16),8); ((RCX +64 8),8) SEP ((RSP_0 -64 24),8); ((RCX +64 8),8) SEP ((RSP_0 -64 32),8); ((RCX +64 8),8) SEP ((RSP_0 -64 40),8); ((RCX +64 8),8) SEP ((RSP_0 -64 48),8); ((RCX +64 8),8) SEP ((RSP_0 -64 52),4); ((RCX +64 8),8) SEP ((RSP_0 -64 64),8); ((RCX +64 8),8) SEP ((RSP_0 -64 72),8); ((RCX +64 8),8) SEP ((RSP_0 -64 76),4); ((RCX +64 8),8) SEP ((RSP_0 -64 80),4); ((RCX +64 8),8) SEP ((RSP_0 -64 84),4); ((RCX +64 8),8) SEP ((RSP_0 -64 88),4); ((RCX +64 8),8) SEP ((RSP_0 -64 92),4); ((RCX +64 8),8) SEP ((RSP_0 -64 104),8); ((RCX +64 8),8) SEP ((RSP_0 -64 108),4); ((RCX +64 8),8) SEP ((RSP_0 -64 264),8); ((RCX +64 8),8) SEP ((RSP_0 -64 280),16)"
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "1000034bd: MOV QWORD PTR [RCX + 8], RAX 4"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 100002a94, blockId == 154 ##
#######################################
*)

htriple "ht_1000034c1"
 Separations ""
 Assertions  "((R13 +64 (RBX *64 8)),8) SEP (RSP_0,8); ((R13 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 8),8); ((R13 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 16),8); ((R13 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 24),8); ((R13 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 32),8); ((R13 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 40),8); ((R13 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 48),8); ((R13 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 52),4); ((R13 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 64),8); ((R13 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 72),8); ((R13 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 76),4); ((R13 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 80),4); ((R13 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 84),4); ((R13 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 88),4); ((R13 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 92),4); ((R13 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 104),8); ((R13 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 108),4); ((R13 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 264),8); ((R13 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 280),16)"
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
 Instruction "1000034c1: MOV QWORD PTR [R13 + RBX * 8], RAX 5"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64) ; [(RSP_0 -64 264),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 100002a94, blockId == 155 ##
#######################################
*)

htriple "ht_100002d8e"
 Separations "((bot(fun__fts_read_INODE64) +64 88),4) SEP (RSI_0,8); ((bot(fun__fts_read_INODE64) +64 88),4) SEP (RSP_0,8); ((bot(fun__fts_read_INODE64) +64 88),4) SEP (0x100004018,8); ((bot(fun__fts_read_INODE64) +64 88),4) SEP (0x100004020,8); ((bot(fun__fts_read_INODE64) +64 88),4) SEP (0x100004180,8); ((bot(fun__fts_read_INODE64) +64 88),4) SEP (0x100004188,8); ((bot(fun__fts_read_INODE64) +64 88),4) SEP (0x100004190,8); ((bot(fun__fts_read_INODE64) +64 88),4) SEP (0x100004198,8); ((bot(fun__fts_read_INODE64) +64 88),4) SEP (0x1000041a0,1); ((bot(fun__fts_read_INODE64) +64 88),4) SEP (0x1000041a8,8); ((bot(fun__fts_read_INODE64) +64 88),4) SEP (0x1000041b0,8); ((bot(fun__fts_read_INODE64) +64 88),4) SEP (0x1000041b8,8); ((bot(fun__fts_read_INODE64) +64 88),4) SEP (0x1000041c0,8); ((bot(fun__fts_read_INODE64) +64 88),4) SEP (0x1000041c8,1); ((bot(fun__fts_read_INODE64) +64 88),4) SEP (0x1000041d0,8); ((bot(fun__fts_read_INODE64) +64 88),4) SEP (0x1000041d8,8); ((bot(fun__fts_read_INODE64) +64 88),4) SEP ((RSI_0 +64 8),8); ((bot(fun__fts_read_INODE64) +64 88),4) SEP ((RSP_0 -64 8),8); ((bot(fun__fts_read_INODE64) +64 88),4) SEP ((RSP_0 -64 16),8); ((bot(fun__fts_read_INODE64) +64 88),4) SEP ((RSP_0 -64 24),8); ((bot(fun__fts_read_INODE64) +64 88),4) SEP ((RSP_0 -64 32),8); ((bot(fun__fts_read_INODE64) +64 88),4) SEP ((RSP_0 -64 40),8); ((bot(fun__fts_read_INODE64) +64 88),4) SEP ((RSP_0 -64 48),8); ((bot(fun__fts_read_INODE64) +64 88),4) SEP ((RSP_0 -64 52),4); ((bot(fun__fts_read_INODE64) +64 88),4) SEP ((RSP_0 -64 64),8); ((bot(fun__fts_read_INODE64) +64 88),4) SEP ((RSP_0 -64 72),8); ((bot(fun__fts_read_INODE64) +64 88),4) SEP ((RSP_0 -64 76),4); ((bot(fun__fts_read_INODE64) +64 88),4) SEP ((RSP_0 -64 80),4); ((bot(fun__fts_read_INODE64) +64 88),4) SEP ((RSP_0 -64 84),4); ((bot(fun__fts_read_INODE64) +64 88),4) SEP ((RSP_0 -64 88),4); ((bot(fun__fts_read_INODE64) +64 88),4) SEP ((RSP_0 -64 92),4); ((bot(fun__fts_read_INODE64) +64 88),4) SEP ((RSP_0 -64 104),8); ((bot(fun__fts_read_INODE64) +64 88),4) SEP ((RSP_0 -64 108),4); ((bot(fun__fts_read_INODE64) +64 88),4) SEP ((RSP_0 -64 264),8); ((bot(fun__fts_read_INODE64) +64 88),4) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RAX = bot(fun__fts_read_INODE64) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002d8e: MOV EAX, DWORD PTR [R12 + 88] 5"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002d93"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002d93: DEC EAX 2"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002d95"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002d95: CMP AX, 12 4"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002d99"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "100002d99: JA 4294979214 6"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 100002a94, blockId == 156 ##
#######################################
*)

htriple "ht_1000034e7"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fts_read_INODE64) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "1000034e7: JMP 4294981150 5"
 Post  "RAX = bot(fun__fts_read_INODE64) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 100002a94, blockId == 157 ##
#######################################
*)

htriple "ht_1000035e5"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "1000035e5: MOV EDI, 1 5"
 Post  "RAX = bot(fun__malloc) ; RDI = 1 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000035ea"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RDI = 1 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "1000035ea: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RDI = 1 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000035ec"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RDI = 1 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 Instruction "1000035ec: ExternalCall fun__errx 5"
 Post  "RAX = bot(fun__errx) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__fts_read_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__fts_open_INODE64)"
 FunctionConstraints "PRESERVES fun__errx {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004018,8];[0x100004020,8];[0x100004180,8];[0x100004188,8];[0x100004190,8];[0x100004198,8];[0x1000041a0,1];[0x1000041a8,8];[0x1000041b0,8];[0x1000041b8,8];[0x1000041c0,8];[0x1000041c8,1];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 76),4];[(RSP_0 -64 80),4];[(RSP_0 -64 84),4];[(RSP_0 -64 88),4];[(RSP_0 -64 92),4];[(RSP_0 -64 104),8];[(RSP_0 -64 108),4];[(RSP_0 -64 264),8];[(RSP_0 -64 280),16]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 100002a94, blockId == 158 ##
#######################################
*)

htriple "ht_10000361e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fts_read_INODE64) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "10000361e: ExternalCall fun____error 5"
 Post  "RAX = bot(fun____error) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 FunctionConstraints "PRESERVES fun____error {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004018,8];[0x100004020,8];[0x100004180,8];[0x100004188,8];[0x100004190,8];[0x100004198,8];[0x1000041a0,1];[0x1000041a8,8];[0x1000041b0,8];[0x1000041b8,8];[0x1000041c0,8];[0x1000041c8,1];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 76),4];[(RSP_0 -64 80),4];[(RSP_0 -64 84),4];[(RSP_0 -64 88),4];[(RSP_0 -64 92),4];[(RSP_0 -64 104),8];[(RSP_0 -64 108),4];[(RSP_0 -64 264),8];[(RSP_0 -64 280),16]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003623"
 Separations "(bot(fun____error),4) SEP (RSI_0,8); (bot(fun____error),4) SEP (RSP_0,8); (bot(fun____error),4) SEP ([0x100004018,8]_0,8); (bot(fun____error),4) SEP ([0x100004020,8]_0,4); (bot(fun____error),4) SEP (0x100004018,8); (bot(fun____error),4) SEP (0x100004020,8); (bot(fun____error),4) SEP (0x100004180,8); (bot(fun____error),4) SEP (0x100004188,8); (bot(fun____error),4) SEP (0x100004190,8); (bot(fun____error),4) SEP (0x100004198,8); (bot(fun____error),4) SEP (0x1000041a0,1); (bot(fun____error),4) SEP (0x1000041a8,8); (bot(fun____error),4) SEP (0x1000041b0,8); (bot(fun____error),4) SEP (0x1000041b8,8); (bot(fun____error),4) SEP (0x1000041c0,8); (bot(fun____error),4) SEP (0x1000041c8,1); (bot(fun____error),4) SEP (0x1000041d0,8); (bot(fun____error),4) SEP (0x1000041d8,8); (bot(fun____error),4) SEP ((RSI_0 +64 8),8); (bot(fun____error),4) SEP ((RSP_0 -64 8),8); (bot(fun____error),4) SEP ((RSP_0 -64 16),8); (bot(fun____error),4) SEP ((RSP_0 -64 24),8); (bot(fun____error),4) SEP ((RSP_0 -64 32),8); (bot(fun____error),4) SEP ((RSP_0 -64 40),8); (bot(fun____error),4) SEP ((RSP_0 -64 48),8); (bot(fun____error),4) SEP ((RSP_0 -64 52),4); (bot(fun____error),4) SEP ((RSP_0 -64 64),4); (bot(fun____error),4) SEP ((RSP_0 -64 64),8); (bot(fun____error),4) SEP ((RSP_0 -64 72),4); (bot(fun____error),4) SEP ((RSP_0 -64 72),8); (bot(fun____error),4) SEP ((RSP_0 -64 76),4); (bot(fun____error),4) SEP ((RSP_0 -64 80),4); (bot(fun____error),4) SEP ((RSP_0 -64 84),4); (bot(fun____error),4) SEP ((RSP_0 -64 88),4); (bot(fun____error),4) SEP ((RSP_0 -64 92),4); (bot(fun____error),4) SEP ((RSP_0 -64 104),8); (bot(fun____error),4) SEP ((RSP_0 -64 108),4); (bot(fun____error),4) SEP ((RSP_0 -64 116),4); (bot(fun____error),4) SEP ((RSP_0 -64 264),8); (bot(fun____error),4) SEP ((RSP_0 -64 268),4); (bot(fun____error),4) SEP ((RSP_0 -64 280),2); (bot(fun____error),4) SEP ((RSP_0 -64 280),16)"
 Assertions  ""
 Pre   "RAX = bot(fun____error) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100003623: CMP DWORD PTR [RAX], 0 3"
 Post  "RAX = bot(fun____error) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003626"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun____error) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100003626: JNE 4294981208 2"
 Post  "RAX = bot(fun____error) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 100002a94, blockId == 159 ##
#######################################
*)

htriple "ht_100003628"
 Separations "((RSP_0 -64 84),4) SEP (bot(fun____error),4); ((RSP_0 -64 84),4) SEP (bot(fun__fts_read_INODE64),8); ((RSP_0 -64 84),4) SEP (RSI_0,8); ((RSP_0 -64 84),4) SEP ([0x100004018,8]_0,8); ((RSP_0 -64 84),4) SEP ([0x100004020,8]_0,4); ((RSP_0 -64 84),4) SEP (0x100004018,8); ((RSP_0 -64 84),4) SEP (0x100004020,8); ((RSP_0 -64 84),4) SEP (0x100004180,8); ((RSP_0 -64 84),4) SEP (0x100004188,8); ((RSP_0 -64 84),4) SEP (0x100004190,8); ((RSP_0 -64 84),4) SEP (0x100004198,8); ((RSP_0 -64 84),4) SEP (0x1000041a0,1); ((RSP_0 -64 84),4) SEP (0x1000041a8,8); ((RSP_0 -64 84),4) SEP (0x1000041b0,8); ((RSP_0 -64 84),4) SEP (0x1000041b8,8); ((RSP_0 -64 84),4) SEP (0x1000041c0,8); ((RSP_0 -64 84),4) SEP (0x1000041c8,1); ((RSP_0 -64 84),4) SEP (0x1000041d0,8); ((RSP_0 -64 84),4) SEP (0x1000041d8,8); ((RSP_0 -64 84),4) SEP ((bot(fun__fts_read_INODE64) +64 8),8); ((RSP_0 -64 84),4) SEP ((bot(fun__fts_read_INODE64) +64 24),8); ((RSP_0 -64 84),4) SEP ((bot(fun__fts_read_INODE64) +64 48),8); ((RSP_0 -64 84),4) SEP ((bot(fun__fts_read_INODE64) +64 56),4); ((RSP_0 -64 84),4) SEP ((bot(fun__fts_read_INODE64) +64 86),2); ((RSP_0 -64 84),4) SEP ((bot(fun__fts_read_INODE64) +64 88),4); ((RSP_0 -64 84),4) SEP ((bot(fun__fts_read_INODE64) +64 96),8); ((RSP_0 -64 84),4) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 84),4) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); ((RSP_0 -64 84),4) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun____error) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100003628: CMP DWORD PTR [RBP - 76], 0 4"
 Post  "RAX = bot(fun____error) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000362c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun____error) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "10000362c: JE 4294981252 2"
 Post  "RAX = bot(fun____error) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 100002a94, blockId == 160 ##
#######################################
*)

htriple "ht_100003658"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun____error) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100003658: LEA RSI, [RIP + 2008] 7"
 Post  "RAX = bot(fun____error) ; RSI = 0x100003e37 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 100002a94, blockId == 161 ##
#######################################
*)

htriple "ht_10000362e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun____error) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "10000362e: MOV RAX, RBX 3"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003631"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100003631: CQO  2"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003633"
 Separations "((RSP_0 -64 104),8) SEP (bot(fun____error),4); ((RSP_0 -64 104),8) SEP (bot(fun__fts_read_INODE64),8); ((RSP_0 -64 104),8) SEP (RSI_0,8); ((RSP_0 -64 104),8) SEP ([0x100004018,8]_0,8); ((RSP_0 -64 104),8) SEP ([0x100004020,8]_0,4); ((RSP_0 -64 104),8) SEP (0x100004018,8); ((RSP_0 -64 104),8) SEP (0x100004020,8); ((RSP_0 -64 104),8) SEP (0x100004180,8); ((RSP_0 -64 104),8) SEP (0x100004188,8); ((RSP_0 -64 104),8) SEP (0x100004190,8); ((RSP_0 -64 104),8) SEP (0x100004198,8); ((RSP_0 -64 104),8) SEP (0x1000041a0,1); ((RSP_0 -64 104),8) SEP (0x1000041a8,8); ((RSP_0 -64 104),8) SEP (0x1000041b0,8); ((RSP_0 -64 104),8) SEP (0x1000041b8,8); ((RSP_0 -64 104),8) SEP (0x1000041c0,8); ((RSP_0 -64 104),8) SEP (0x1000041c8,1); ((RSP_0 -64 104),8) SEP (0x1000041d0,8); ((RSP_0 -64 104),8) SEP (0x1000041d8,8); ((RSP_0 -64 104),8) SEP ((bot(fun__fts_read_INODE64) +64 8),8); ((RSP_0 -64 104),8) SEP ((bot(fun__fts_read_INODE64) +64 24),8); ((RSP_0 -64 104),8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); ((RSP_0 -64 104),8) SEP ((bot(fun__fts_read_INODE64) +64 56),4); ((RSP_0 -64 104),8) SEP ((bot(fun__fts_read_INODE64) +64 86),2); ((RSP_0 -64 104),8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); ((RSP_0 -64 104),8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); ((RSP_0 -64 104),8) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 104),8) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); ((RSP_0 -64 104),8) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100003633: IDIV QWORD PTR [RBP - 96] 4"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003637"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100003637: CMP RDX, 1 4"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000363b"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "10000363b: SBB RAX, 18446744073709551615 4"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000363f"
 Separations "((RSP_0 -64 52),4) SEP (bot(fun____error),4); ((RSP_0 -64 52),4) SEP (bot(fun__fts_read_INODE64),8); ((RSP_0 -64 52),4) SEP (RSI_0,8); ((RSP_0 -64 52),4) SEP ([0x100004018,8]_0,8); ((RSP_0 -64 52),4) SEP ([0x100004020,8]_0,4); ((RSP_0 -64 52),4) SEP (0x100004018,8); ((RSP_0 -64 52),4) SEP (0x100004020,8); ((RSP_0 -64 52),4) SEP (0x100004180,8); ((RSP_0 -64 52),4) SEP (0x100004188,8); ((RSP_0 -64 52),4) SEP (0x100004190,8); ((RSP_0 -64 52),4) SEP (0x100004198,8); ((RSP_0 -64 52),4) SEP (0x1000041a0,1); ((RSP_0 -64 52),4) SEP (0x1000041a8,8); ((RSP_0 -64 52),4) SEP (0x1000041b0,8); ((RSP_0 -64 52),4) SEP (0x1000041b8,8); ((RSP_0 -64 52),4) SEP (0x1000041c0,8); ((RSP_0 -64 52),4) SEP (0x1000041c8,1); ((RSP_0 -64 52),4) SEP (0x1000041d0,8); ((RSP_0 -64 52),4) SEP (0x1000041d8,8); ((RSP_0 -64 52),4) SEP ((bot(fun__fts_read_INODE64) +64 8),8); ((RSP_0 -64 52),4) SEP ((bot(fun__fts_read_INODE64) +64 24),8); ((RSP_0 -64 52),4) SEP ((bot(fun__fts_read_INODE64) +64 48),8); ((RSP_0 -64 52),4) SEP ((bot(fun__fts_read_INODE64) +64 56),4); ((RSP_0 -64 52),4) SEP ((bot(fun__fts_read_INODE64) +64 86),2); ((RSP_0 -64 52),4) SEP ((bot(fun__fts_read_INODE64) +64 88),4); ((RSP_0 -64 52),4) SEP ((bot(fun__fts_read_INODE64) +64 96),8); ((RSP_0 -64 52),4) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 52),4) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); ((RSP_0 -64 52),4) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "10000363f: CMP DWORD PTR [RBP - 44], 0 4"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003643"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100003643: JNE 4294981227 2"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 100002a94, blockId == 162 ##
#######################################
*)

htriple "ht_100003684"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100003684: ExternalCall fun_0x10000390b 5"
 Post  "RAX = bot(fun_0x10000390b) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 FunctionConstraints "PRESERVES fun_0x10000390b {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004018,8];[0x100004020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 76),4];[(RSP_0 -64 80),4];[(RSP_0 -64 84),4];[(RSP_0 -64 88),4];[(RSP_0 -64 92),4];[(RSP_0 -64 104),8];[(RSP_0 -64 108),4];[(RSP_0 -64 264),8];[(RSP_0 -64 280),16]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003689"
 Separations "((RSP_0 -64 92),4) SEP (bot(fun____error),4); ((RSP_0 -64 92),4) SEP (bot(fun__fts_read_INODE64),8); ((RSP_0 -64 92),4) SEP (RSI_0,8); ((RSP_0 -64 92),4) SEP ([0x100004018,8]_0,8); ((RSP_0 -64 92),4) SEP ([0x100004020,8]_0,4); ((RSP_0 -64 92),4) SEP (0x100004018,8); ((RSP_0 -64 92),4) SEP (0x100004020,8); ((RSP_0 -64 92),4) SEP (0x100004180,8); ((RSP_0 -64 92),4) SEP (0x100004188,8); ((RSP_0 -64 92),4) SEP (0x100004190,8); ((RSP_0 -64 92),4) SEP (0x100004198,8); ((RSP_0 -64 92),4) SEP (0x1000041a0,1); ((RSP_0 -64 92),4) SEP (0x1000041a8,8); ((RSP_0 -64 92),4) SEP (0x1000041b0,8); ((RSP_0 -64 92),4) SEP (0x1000041b8,8); ((RSP_0 -64 92),4) SEP (0x1000041c0,8); ((RSP_0 -64 92),4) SEP (0x1000041c8,1); ((RSP_0 -64 92),4) SEP (0x1000041d0,8); ((RSP_0 -64 92),4) SEP (0x1000041d8,8); ((RSP_0 -64 92),4) SEP ((bot(fun__fts_read_INODE64) +64 8),8); ((RSP_0 -64 92),4) SEP ((bot(fun__fts_read_INODE64) +64 24),8); ((RSP_0 -64 92),4) SEP ((bot(fun__fts_read_INODE64) +64 48),8); ((RSP_0 -64 92),4) SEP ((bot(fun__fts_read_INODE64) +64 56),4); ((RSP_0 -64 92),4) SEP ((bot(fun__fts_read_INODE64) +64 86),2); ((RSP_0 -64 92),4) SEP ((bot(fun__fts_read_INODE64) +64 88),4); ((RSP_0 -64 92),4) SEP ((bot(fun__fts_read_INODE64) +64 96),8); ((RSP_0 -64 92),4) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 92),4) SEP ((0x100003694 +64 ((b32(bot(fun__getopt)) -32 72) *64 4)),4); ((RSP_0 -64 92),4) SEP ((0x1000036b8 +64 ((b32(bot(fun__getopt)) -32 97) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000390b) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100003689: MOV EDI, DWORD PTR [RBP - 84] 3"
 Post  "RAX = bot(fun_0x10000390b) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000368c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000390b) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "10000368c: ExternalCall fun__exit 5"
 Post  "RAX = bot(fun__exit) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 FunctionConstraints "PRESERVES fun__exit {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004018,8];[0x100004020,8];[0x100004180,8];[0x100004188,8];[0x100004190,8];[0x100004198,8];[0x1000041a0,1];[0x1000041a8,8];[0x1000041b0,8];[0x1000041b8,8];[0x1000041c0,8];[0x1000041c8,1];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 76),4];[(RSP_0 -64 80),4];[(RSP_0 -64 84),4];[(RSP_0 -64 88),4];[(RSP_0 -64 92),4];[(RSP_0 -64 104),8];[(RSP_0 -64 108),4];[(RSP_0 -64 264),8];[(RSP_0 -64 280),16]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 100002a94, blockId == 163 ##
#######################################
*)

htriple "ht_100003645"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100003645: LEA RDI, [RIP + 2036] 7"
 Post  "RDI = 0x100003e40 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000364c"
 Separations ""
 Assertions  ""
 Pre   "RDI = 0x100003e40 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "10000364c: MOV RSI, RAX 3"
 Post  "RDI = 0x100003e40 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000364f"
 Separations ""
 Assertions  ""
 Pre   "RDI = 0x100003e40 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "10000364f: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RDI = 0x100003e40 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003651"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RDI = 0x100003e40 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100003651: ExternalCall fun__printf 5"
 Post  "RAX = bot(fun__printf) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 FunctionConstraints "PRESERVES fun__printf {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004018,8];[0x100004020,8];[0x100004180,8];[0x100004188,8];[0x100004190,8];[0x100004198,8];[0x1000041a0,1];[0x1000041a8,8];[0x1000041b0,8];[0x1000041b8,8];[0x1000041c0,8];[0x1000041c8,1];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 76),4];[(RSP_0 -64 80),4];[(RSP_0 -64 84),4];[(RSP_0 -64 88),4];[(RSP_0 -64 92),4];[(RSP_0 -64 104),8];[(RSP_0 -64 108),4];[(RSP_0 -64 264),8];[(RSP_0 -64 280),16]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003656"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__printf) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100003656: JMP 4294981252 2"
 Post  "RAX = bot(fun__printf) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 100002a94, blockId == 164 ##
#######################################
*)

htriple "ht_10000366b"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "10000366b: XORPS XMM0, XMM0 3"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000366e"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "10000366e: CVTSI2SD XMM0, RAX 5"
 Post  "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003673"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100003673: ExternalCall fun_0x100003895 5"
 Post  "RAX = bot(fun_0x100003895) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 FunctionConstraints "PRESERVES fun_0x100003895 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004018,8];[0x100004020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 76),4];[(RSP_0 -64 80),4];[(RSP_0 -64 84),4];[(RSP_0 -64 88),4];[(RSP_0 -64 92),4];[(RSP_0 -64 104),8];[(RSP_0 -64 108),4];[(RSP_0 -64 264),8];[(RSP_0 -64 280),16]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003678"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100003895) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100003678: LEA RDI, [RIP + 2313] 7"
 Post  "RAX = bot(fun_0x100003895) ; RDI = 0x100003f88 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000367f"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100003895) ; RDI = 0x100003f88 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "10000367f: ExternalCall fun__puts 5"
 Post  "RAX = bot(fun__puts) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 FunctionConstraints "PRESERVES fun__puts {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004018,8];[0x100004020,8];[0x100004180,8];[0x100004188,8];[0x100004190,8];[0x100004198,8];[0x1000041a0,1];[0x1000041a8,8];[0x1000041b0,8];[0x1000041b8,8];[0x1000041c0,8];[0x1000041c8,1];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 76),4];[(RSP_0 -64 80),4];[(RSP_0 -64 84),4];[(RSP_0 -64 88),4];[(RSP_0 -64 92),4];[(RSP_0 -64 104),8];[(RSP_0 -64 108),4];[(RSP_0 -64 264),8];[(RSP_0 -64 280),16]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 100002a94, blockId == 165 ##
#######################################
*)

htriple "ht_10000365f"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "10000365f: MOV EDI, 1 5"
 Post  "RDI = 1 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003664"
 Separations ""
 Assertions  ""
 Pre   "RDI = 1 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100003664: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RDI = 1 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003666"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RDI = 1 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100003666: ExternalCall fun__err 5"
 Post  "RAX = bot(fun__err) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 FunctionConstraints "PRESERVES fun__err {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004018,8];[0x100004020,8];[0x100004180,8];[0x100004188,8];[0x100004190,8];[0x100004198,8];[0x1000041a0,1];[0x1000041a8,8];[0x1000041b0,8];[0x1000041b8,8];[0x1000041c0,8];[0x1000041c8,1];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 76),4];[(RSP_0 -64 80),4];[(RSP_0 -64 84),4];[(RSP_0 -64 88),4];[(RSP_0 -64 92),4];[(RSP_0 -64 104),8];[(RSP_0 -64 108),4];[(RSP_0 -64 264),8];[(RSP_0 -64 280),16]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




end
end
