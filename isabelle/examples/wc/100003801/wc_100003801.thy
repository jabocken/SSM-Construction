theory wc_100003801
imports "../../../isabelle/X86_Semantics/X86_Parse_Hoare_Triples"


begin


context semantics
begin

(*
#####################################
## Entry = 100003801, blockId == 0 ##
#####################################
*)

htriple "ht_100003801"
 Separations "((RSP_0 -64 8),8) SEP (bot(fun____error),4); ((RSP_0 -64 8),8) SEP ([0x100004010,8]_0,8); ((RSP_0 -64 8),8) SEP (0x100004000,8); ((RSP_0 -64 8),8) SEP (0x100004008,8); ((RSP_0 -64 8),8) SEP (0x100004010,8); ((RSP_0 -64 8),8) SEP (0x1000080a0,8); ((RSP_0 -64 8),8) SEP (0x1000080a8,8); ((RSP_0 -64 8),8) SEP (0x10000a0c0,8); ((RSP_0 -64 8),8) SEP (0x10000a0c8,8); ((RSP_0 -64 8),8) SEP (0x10000a0d0,8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [0x10000a0c0,8] = [0x10000a0c0,8]_0 ; [0x10000a0c8,8] = [0x10000a0c8,8]_0 ; [0x10000a0d0,8] = [0x10000a0d0,8]_0 ; [(RSP_0 -64 8),8] = [(RSP_0 -64 8),8]_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 0x8ac),4] = [(RSP_0 -64 0x8ac),4]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x948),8] = [(RSP_0 -64 0x948),8]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003801: PUSH RBP 1"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [0x10000a0c0,8] = [0x10000a0c0,8]_0 ; [0x10000a0c8,8] = [0x10000a0c8,8]_0 ; [0x10000a0d0,8] = [0x10000a0d0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 0x8ac),4] = [(RSP_0 -64 0x8ac),4]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x948),8] = [(RSP_0 -64 0x948),8]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003802"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [0x10000a0c0,8] = [0x10000a0c0,8]_0 ; [0x10000a0c8,8] = [0x10000a0c8,8]_0 ; [0x10000a0d0,8] = [0x10000a0d0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 0x8ac),4] = [(RSP_0 -64 0x8ac),4]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x948),8] = [(RSP_0 -64 0x948),8]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003802: MOV RBP, RSP 3"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [0x10000a0c0,8] = [0x10000a0c0,8]_0 ; [0x10000a0c8,8] = [0x10000a0c8,8]_0 ; [0x10000a0d0,8] = [0x10000a0d0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 0x8ac),4] = [(RSP_0 -64 0x8ac),4]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x948),8] = [(RSP_0 -64 0x948),8]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003805"
 Separations "((RSP_0 -64 16),8) SEP (bot(fun____error),4); ((RSP_0 -64 16),8) SEP ([0x100004010,8]_0,8); ((RSP_0 -64 16),8) SEP (0x100004000,8); ((RSP_0 -64 16),8) SEP (0x100004008,8); ((RSP_0 -64 16),8) SEP (0x100004010,8); ((RSP_0 -64 16),8) SEP (0x1000080a0,8); ((RSP_0 -64 16),8) SEP (0x1000080a8,8); ((RSP_0 -64 16),8) SEP (0x10000a0c0,8); ((RSP_0 -64 16),8) SEP (0x10000a0c8,8); ((RSP_0 -64 16),8) SEP (0x10000a0d0,8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [0x10000a0c0,8] = [0x10000a0c0,8]_0 ; [0x10000a0c8,8] = [0x10000a0c8,8]_0 ; [0x10000a0d0,8] = [0x10000a0d0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 0x8ac),4] = [(RSP_0 -64 0x8ac),4]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x948),8] = [(RSP_0 -64 0x948),8]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003805: PUSH R15 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [0x10000a0c0,8] = [0x10000a0c0,8]_0 ; [0x10000a0c8,8] = [0x10000a0c8,8]_0 ; [0x10000a0d0,8] = [0x10000a0d0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 0x8ac),4] = [(RSP_0 -64 0x8ac),4]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x948),8] = [(RSP_0 -64 0x948),8]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003807"
 Separations "((RSP_0 -64 24),8) SEP (bot(fun____error),4); ((RSP_0 -64 24),8) SEP ([0x100004010,8]_0,8); ((RSP_0 -64 24),8) SEP (0x100004000,8); ((RSP_0 -64 24),8) SEP (0x100004008,8); ((RSP_0 -64 24),8) SEP (0x100004010,8); ((RSP_0 -64 24),8) SEP (0x1000080a0,8); ((RSP_0 -64 24),8) SEP (0x1000080a8,8); ((RSP_0 -64 24),8) SEP (0x10000a0c0,8); ((RSP_0 -64 24),8) SEP (0x10000a0c8,8); ((RSP_0 -64 24),8) SEP (0x10000a0d0,8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [0x10000a0c0,8] = [0x10000a0c0,8]_0 ; [0x10000a0c8,8] = [0x10000a0c8,8]_0 ; [0x10000a0d0,8] = [0x10000a0d0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 0x8ac),4] = [(RSP_0 -64 0x8ac),4]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x948),8] = [(RSP_0 -64 0x948),8]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003807: PUSH R14 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [0x10000a0c0,8] = [0x10000a0c0,8]_0 ; [0x10000a0c8,8] = [0x10000a0c8,8]_0 ; [0x10000a0d0,8] = [0x10000a0d0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 0x8ac),4] = [(RSP_0 -64 0x8ac),4]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x948),8] = [(RSP_0 -64 0x948),8]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003809"
 Separations "((RSP_0 -64 32),8) SEP (bot(fun____error),4); ((RSP_0 -64 32),8) SEP ([0x100004010,8]_0,8); ((RSP_0 -64 32),8) SEP (0x100004000,8); ((RSP_0 -64 32),8) SEP (0x100004008,8); ((RSP_0 -64 32),8) SEP (0x100004010,8); ((RSP_0 -64 32),8) SEP (0x1000080a0,8); ((RSP_0 -64 32),8) SEP (0x1000080a8,8); ((RSP_0 -64 32),8) SEP (0x10000a0c0,8); ((RSP_0 -64 32),8) SEP (0x10000a0c8,8); ((RSP_0 -64 32),8) SEP (0x10000a0d0,8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [0x10000a0c0,8] = [0x10000a0c0,8]_0 ; [0x10000a0c8,8] = [0x10000a0c8,8]_0 ; [0x10000a0d0,8] = [0x10000a0d0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 0x8ac),4] = [(RSP_0 -64 0x8ac),4]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x948),8] = [(RSP_0 -64 0x948),8]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003809: PUSH R13 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [0x10000a0c0,8] = [0x10000a0c0,8]_0 ; [0x10000a0c8,8] = [0x10000a0c8,8]_0 ; [0x10000a0d0,8] = [0x10000a0d0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 0x8ac),4] = [(RSP_0 -64 0x8ac),4]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x948),8] = [(RSP_0 -64 0x948),8]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000380b"
 Separations "((RSP_0 -64 40),8) SEP (bot(fun____error),4); ((RSP_0 -64 40),8) SEP ([0x100004010,8]_0,8); ((RSP_0 -64 40),8) SEP (0x100004000,8); ((RSP_0 -64 40),8) SEP (0x100004008,8); ((RSP_0 -64 40),8) SEP (0x100004010,8); ((RSP_0 -64 40),8) SEP (0x1000080a0,8); ((RSP_0 -64 40),8) SEP (0x1000080a8,8); ((RSP_0 -64 40),8) SEP (0x10000a0c0,8); ((RSP_0 -64 40),8) SEP (0x10000a0c8,8); ((RSP_0 -64 40),8) SEP (0x10000a0d0,8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [0x10000a0c0,8] = [0x10000a0c0,8]_0 ; [0x10000a0c8,8] = [0x10000a0c8,8]_0 ; [0x10000a0d0,8] = [0x10000a0d0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 0x8ac),4] = [(RSP_0 -64 0x8ac),4]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x948),8] = [(RSP_0 -64 0x948),8]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "10000380b: PUSH R12 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [0x10000a0c0,8] = [0x10000a0c0,8]_0 ; [0x10000a0c8,8] = [0x10000a0c8,8]_0 ; [0x10000a0d0,8] = [0x10000a0d0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 0x8ac),4] = [(RSP_0 -64 0x8ac),4]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x948),8] = [(RSP_0 -64 0x948),8]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000380d"
 Separations "((RSP_0 -64 48),8) SEP (bot(fun____error),4); ((RSP_0 -64 48),8) SEP ([0x100004010,8]_0,8); ((RSP_0 -64 48),8) SEP (0x100004000,8); ((RSP_0 -64 48),8) SEP (0x100004008,8); ((RSP_0 -64 48),8) SEP (0x100004010,8); ((RSP_0 -64 48),8) SEP (0x1000080a0,8); ((RSP_0 -64 48),8) SEP (0x1000080a8,8); ((RSP_0 -64 48),8) SEP (0x10000a0c0,8); ((RSP_0 -64 48),8) SEP (0x10000a0c8,8); ((RSP_0 -64 48),8) SEP (0x10000a0d0,8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [0x10000a0c0,8] = [0x10000a0c0,8]_0 ; [0x10000a0c8,8] = [0x10000a0c8,8]_0 ; [0x10000a0d0,8] = [0x10000a0d0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 0x8ac),4] = [(RSP_0 -64 0x8ac),4]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x948),8] = [(RSP_0 -64 0x948),8]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "10000380d: PUSH RBX 1"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [0x10000a0c0,8] = [0x10000a0c0,8]_0 ; [0x10000a0c8,8] = [0x10000a0c8,8]_0 ; [0x10000a0d0,8] = [0x10000a0d0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 0x8ac),4] = [(RSP_0 -64 0x8ac),4]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x948),8] = [(RSP_0 -64 0x948),8]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000380e"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [0x10000a0c0,8] = [0x10000a0c0,8]_0 ; [0x10000a0c8,8] = [0x10000a0c8,8]_0 ; [0x10000a0d0,8] = [0x10000a0d0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 0x8ac),4] = [(RSP_0 -64 0x8ac),4]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x948),8] = [(RSP_0 -64 0x948),8]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "10000380e: SUB RSP, 2504 7"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [0x10000a0c0,8] = [0x10000a0c0,8]_0 ; [0x10000a0c8,8] = [0x10000a0c8,8]_0 ; [0x10000a0d0,8] = [0x10000a0d0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 0x8ac),4] = [(RSP_0 -64 0x8ac),4]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x948),8] = [(RSP_0 -64 0x948),8]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003815"
 Separations "(0x100004010,8) SEP (bot(fun____error),4); (0x100004010,8) SEP (RSP_0,8); (0x100004010,8) SEP ([0x100004010,8]_0,8); (0x100004010,8) SEP ((RSP_0 -64 8),8); (0x100004010,8) SEP ((RSP_0 -64 16),8); (0x100004010,8) SEP ((RSP_0 -64 24),8); (0x100004010,8) SEP ((RSP_0 -64 32),8); (0x100004010,8) SEP ((RSP_0 -64 40),8); (0x100004010,8) SEP ((RSP_0 -64 48),8); (0x100004010,8) SEP ((RSP_0 -64 56),8); (0x100004010,8) SEP ((RSP_0 -64 0x8ac),4); (0x100004010,8) SEP ((RSP_0 -64 0x8c8),16); (0x100004010,8) SEP ((RSP_0 -64 0x8d8),16); (0x100004010,8) SEP ((RSP_0 -64 0x8e8),16); (0x100004010,8) SEP ((RSP_0 -64 0x8f8),16); (0x100004010,8) SEP ((RSP_0 -64 0x908),16); (0x100004010,8) SEP ((RSP_0 -64 0x918),16); (0x100004010,8) SEP ((RSP_0 -64 0x928),16); (0x100004010,8) SEP ((RSP_0 -64 0x938),16); (0x100004010,8) SEP ((RSP_0 -64 0x93c),4); (0x100004010,8) SEP ((RSP_0 -64 0x940),4); (0x100004010,8) SEP ((RSP_0 -64 0x948),8); (0x100004010,8) SEP ((RSP_0 -64 0x94c),4); (0x100004010,8) SEP ((RSP_0 -64 0x958),8); (0x100004010,8) SEP ((RSP_0 -64 0x960),8); (0x100004010,8) SEP ((RSP_0 -64 0x968),8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [0x10000a0c0,8] = [0x10000a0c0,8]_0 ; [0x10000a0c8,8] = [0x10000a0c8,8]_0 ; [0x10000a0d0,8] = [0x10000a0d0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 0x8ac),4] = [(RSP_0 -64 0x8ac),4]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x948),8] = [(RSP_0 -64 0x948),8]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003815: MOV RAX, QWORD PTR [RIP + 2036] 7"
 Post  "RAX = [0x100004010,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [0x10000a0c0,8] = [0x10000a0c0,8]_0 ; [0x10000a0c8,8] = [0x10000a0c8,8]_0 ; [0x10000a0d0,8] = [0x10000a0d0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 0x8ac),4] = [(RSP_0 -64 0x8ac),4]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x948),8] = [(RSP_0 -64 0x948),8]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000381c"
 Separations "([0x100004010,8]_0,8) SEP (bot(fun____error),4); ([0x100004010,8]_0,8) SEP (RSP_0,8); ([0x100004010,8]_0,8) SEP (0x100004000,8); ([0x100004010,8]_0,8) SEP (0x100004008,8); ([0x100004010,8]_0,8) SEP (0x100004010,8); ([0x100004010,8]_0,8) SEP (0x1000080a0,8); ([0x100004010,8]_0,8) SEP (0x1000080a8,8); ([0x100004010,8]_0,8) SEP (0x10000a0b0,4); ([0x100004010,8]_0,8) SEP (0x10000a0b8,4); ([0x100004010,8]_0,8) SEP (0x10000a0c0,8); ([0x100004010,8]_0,8) SEP (0x10000a0c8,8); ([0x100004010,8]_0,8) SEP (0x10000a0d0,8); ([0x100004010,8]_0,8) SEP ((RSP_0 -64 8),8); ([0x100004010,8]_0,8) SEP ((RSP_0 -64 16),8); ([0x100004010,8]_0,8) SEP ((RSP_0 -64 24),8); ([0x100004010,8]_0,8) SEP ((RSP_0 -64 32),8); ([0x100004010,8]_0,8) SEP ((RSP_0 -64 40),8); ([0x100004010,8]_0,8) SEP ((RSP_0 -64 48),8); ([0x100004010,8]_0,8) SEP ((RSP_0 -64 56),8); ([0x100004010,8]_0,8) SEP ((RSP_0 -64 0x8ac),4); ([0x100004010,8]_0,8) SEP ((RSP_0 -64 0x8c8),16); ([0x100004010,8]_0,8) SEP ((RSP_0 -64 0x8d8),16); ([0x100004010,8]_0,8) SEP ((RSP_0 -64 0x8e8),16); ([0x100004010,8]_0,8) SEP ((RSP_0 -64 0x8f8),16); ([0x100004010,8]_0,8) SEP ((RSP_0 -64 0x908),16); ([0x100004010,8]_0,8) SEP ((RSP_0 -64 0x918),16); ([0x100004010,8]_0,8) SEP ((RSP_0 -64 0x928),16); ([0x100004010,8]_0,8) SEP ((RSP_0 -64 0x938),16); ([0x100004010,8]_0,8) SEP ((RSP_0 -64 0x93c),4); ([0x100004010,8]_0,8) SEP ((RSP_0 -64 0x940),4); ([0x100004010,8]_0,8) SEP ((RSP_0 -64 0x948),8); ([0x100004010,8]_0,8) SEP ((RSP_0 -64 0x94c),4); ([0x100004010,8]_0,8) SEP ((RSP_0 -64 0x958),8); ([0x100004010,8]_0,8) SEP ((RSP_0 -64 0x960),8); ([0x100004010,8]_0,8) SEP ((RSP_0 -64 0x968),8); ([0x100004010,8]_0,8) SEP ((RSP_0 -64 0x998),8); ([0x100004010,8]_0,8) SEP ((RSP_0 -64 0x9f4),2)"
 Assertions  ""
 Pre   "RAX = [0x100004010,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [0x10000a0c0,8] = [0x10000a0c0,8]_0 ; [0x10000a0c8,8] = [0x10000a0c8,8]_0 ; [0x10000a0d0,8] = [0x10000a0d0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 0x8ac),4] = [(RSP_0 -64 0x8ac),4]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x948),8] = [(RSP_0 -64 0x948),8]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "10000381c: MOV RAX, QWORD PTR [RAX] 3"
 Post  "RAX = [[0x100004010,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [0x10000a0c0,8] = [0x10000a0c0,8]_0 ; [0x10000a0c8,8] = [0x10000a0c8,8]_0 ; [0x10000a0d0,8] = [0x10000a0d0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 0x8ac),4] = [(RSP_0 -64 0x8ac),4]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x948),8] = [(RSP_0 -64 0x948),8]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000381f"
 Separations "((RSP_0 -64 56),8) SEP (bot(fun____error),4); ((RSP_0 -64 56),8) SEP ([0x100004010,8]_0,8); ((RSP_0 -64 56),8) SEP (0x100004000,8); ((RSP_0 -64 56),8) SEP (0x100004008,8); ((RSP_0 -64 56),8) SEP (0x100004010,8); ((RSP_0 -64 56),8) SEP (0x1000080a0,8); ((RSP_0 -64 56),8) SEP (0x1000080a8,8); ((RSP_0 -64 56),8) SEP (0x10000a0c0,8); ((RSP_0 -64 56),8) SEP (0x10000a0c8,8); ((RSP_0 -64 56),8) SEP (0x10000a0d0,8)"
 Assertions  ""
 Pre   "RAX = [[0x100004010,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [0x10000a0c0,8] = [0x10000a0c0,8]_0 ; [0x10000a0c8,8] = [0x10000a0c8,8]_0 ; [0x10000a0d0,8] = [0x10000a0d0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 0x8ac),4] = [(RSP_0 -64 0x8ac),4]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x948),8] = [(RSP_0 -64 0x948),8]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "10000381f: MOV QWORD PTR [RBP - 48], RAX 4"
 Post  "RAX = [[0x100004010,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [0x10000a0c0,8] = [0x10000a0c0,8]_0 ; [0x10000a0c8,8] = [0x10000a0c8,8]_0 ; [0x10000a0d0,8] = [0x10000a0d0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8ac),4] = [(RSP_0 -64 0x8ac),4]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x948),8] = [(RSP_0 -64 0x948),8]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003823"
 Separations ""
 Assertions  ""
 Pre   "RAX = [[0x100004010,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [0x10000a0c0,8] = [0x10000a0c0,8]_0 ; [0x10000a0c8,8] = [0x10000a0c8,8]_0 ; [0x10000a0d0,8] = [0x10000a0d0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8ac),4] = [(RSP_0 -64 0x8ac),4]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x948),8] = [(RSP_0 -64 0x948),8]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003823: TEST RDI, RDI 3"
 Post  "RAX = [[0x100004010,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [0x10000a0c0,8] = [0x10000a0c0,8]_0 ; [0x10000a0c8,8] = [0x10000a0c8,8]_0 ; [0x10000a0d0,8] = [0x10000a0d0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8ac),4] = [(RSP_0 -64 0x8ac),4]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x948),8] = [(RSP_0 -64 0x948),8]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003826"
 Separations ""
 Assertions  ""
 Pre   "RAX = [[0x100004010,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [0x10000a0c0,8] = [0x10000a0c0,8]_0 ; [0x10000a0c8,8] = [0x10000a0c8,8]_0 ; [0x10000a0d0,8] = [0x10000a0d0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8ac),4] = [(RSP_0 -64 0x8ac),4]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x948),8] = [(RSP_0 -64 0x948),8]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003826: JE 4294981699 2"
 Post  "RAX = [[0x100004010,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [0x10000a0c0,8] = [0x10000a0c0,8]_0 ; [0x10000a0c8,8] = [0x10000a0c8,8]_0 ; [0x10000a0d0,8] = [0x10000a0d0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8ac),4] = [(RSP_0 -64 0x8ac),4]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x948),8] = [(RSP_0 -64 0x948),8]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100003801, blockId == 1 ##
#####################################
*)

htriple "ht_100003828"
 Separations ""
 Assertions  ""
 Pre   "RAX = [[0x100004010,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [0x10000a0c0,8] = [0x10000a0c0,8]_0 ; [0x10000a0c8,8] = [0x10000a0c8,8]_0 ; [0x10000a0d0,8] = [0x10000a0d0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8ac),4] = [(RSP_0 -64 0x8ac),4]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x948),8] = [(RSP_0 -64 0x948),8]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003828: MOV RBX, RDI 3"
 Post  "RAX = [[0x100004010,8]_0,8]_0 ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [0x10000a0c0,8] = [0x10000a0c0,8]_0 ; [0x10000a0c8,8] = [0x10000a0c8,8]_0 ; [0x10000a0d0,8] = [0x10000a0d0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8ac),4] = [(RSP_0 -64 0x8ac),4]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x948),8] = [(RSP_0 -64 0x948),8]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000382b"
 Separations ""
 Assertions  ""
 Pre   "RAX = [[0x100004010,8]_0,8]_0 ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [0x10000a0c0,8] = [0x10000a0c0,8]_0 ; [0x10000a0c8,8] = [0x10000a0c8,8]_0 ; [0x10000a0d0,8] = [0x10000a0d0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8ac),4] = [(RSP_0 -64 0x8ac),4]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x948),8] = [(RSP_0 -64 0x948),8]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "10000382b: XOR ESI, ESI 2"
 Post  "RAX = [[0x100004010,8]_0,8]_0 ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = 0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [0x10000a0c0,8] = [0x10000a0c0,8]_0 ; [0x10000a0c8,8] = [0x10000a0c8,8]_0 ; [0x10000a0d0,8] = [0x10000a0d0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8ac),4] = [(RSP_0 -64 0x8ac),4]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x948),8] = [(RSP_0 -64 0x948),8]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000382d"
 Separations ""
 Assertions  ""
 Pre   "RAX = [[0x100004010,8]_0,8]_0 ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = 0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [0x10000a0c0,8] = [0x10000a0c0,8]_0 ; [0x10000a0c8,8] = [0x10000a0c8,8]_0 ; [0x10000a0d0,8] = [0x10000a0d0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8ac),4] = [(RSP_0 -64 0x8ac),4]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x948),8] = [(RSP_0 -64 0x948),8]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "10000382d: XOR EDX, EDX 2"
 Post  "RAX = [[0x100004010,8]_0,8]_0 ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = 0 ; RDI = RDI_0 ; RSI = 0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [0x10000a0c0,8] = [0x10000a0c0,8]_0 ; [0x10000a0c8,8] = [0x10000a0c8,8]_0 ; [0x10000a0d0,8] = [0x10000a0d0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8ac),4] = [(RSP_0 -64 0x8ac),4]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x948),8] = [(RSP_0 -64 0x948),8]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000382f"
 Separations ""
 Assertions  ""
 Pre   "RAX = [[0x100004010,8]_0,8]_0 ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = 0 ; RDI = RDI_0 ; RSI = 0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [0x10000a0c0,8] = [0x10000a0c0,8]_0 ; [0x10000a0c8,8] = [0x10000a0c8,8]_0 ; [0x10000a0d0,8] = [0x10000a0d0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8ac),4] = [(RSP_0 -64 0x8ac),4]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x948),8] = [(RSP_0 -64 0x948),8]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "10000382f: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = 0 ; RDI = RDI_0 ; RSI = 0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [0x10000a0c0,8] = [0x10000a0c0,8]_0 ; [0x10000a0c8,8] = [0x10000a0c8,8]_0 ; [0x10000a0d0,8] = [0x10000a0d0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8ac),4] = [(RSP_0 -64 0x8ac),4]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x948),8] = [(RSP_0 -64 0x948),8]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003831"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = 0 ; RDI = RDI_0 ; RSI = 0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [0x10000a0c0,8] = [0x10000a0c0,8]_0 ; [0x10000a0c8,8] = [0x10000a0c8,8]_0 ; [0x10000a0d0,8] = [0x10000a0d0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8ac),4] = [(RSP_0 -64 0x8ac),4]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x948),8] = [(RSP_0 -64 0x948),8]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003831: ExternalCall fun__open 5"
 Post  "RAX = bot(fun__open) ; RBX = RDI_0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8ac),4] = [(RSP_0 -64 0x8ac),4]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x948),8] = [(RSP_0 -64 0x948),8]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 FunctionConstraints "PRESERVES fun__open {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[0x100004008,8];[0x100004010,8];[0x1000080a0,8];[0x1000080a8,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 0x8ac),4];[(RSP_0 -64 0x8c8),16];[(RSP_0 -64 0x8d8),16];[(RSP_0 -64 0x8e8),16];[(RSP_0 -64 0x8f8),16];[(RSP_0 -64 0x908),16];[(RSP_0 -64 0x918),16];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x93c),4];[(RSP_0 -64 0x940),4];[(RSP_0 -64 0x948),8];[(RSP_0 -64 0x94c),4];[(RSP_0 -64 0x958),8];[(RSP_0 -64 0x960),8];[(RSP_0 -64 0x968),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003836"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__open) ; RBX = RDI_0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8ac),4] = [(RSP_0 -64 0x8ac),4]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x948),8] = [(RSP_0 -64 0x948),8]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003836: TEST EAX, EAX 2"
 Post  "RAX = bot(fun__open) ; RBX = RDI_0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8ac),4] = [(RSP_0 -64 0x8ac),4]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x948),8] = [(RSP_0 -64 0x948),8]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003838"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__open) ; RBX = RDI_0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8ac),4] = [(RSP_0 -64 0x8ac),4]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x948),8] = [(RSP_0 -64 0x948),8]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003838: JS 4294982954 6"
 Post  "RAX = bot(fun__open) ; RBX = RDI_0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8ac),4] = [(RSP_0 -64 0x8ac),4]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x948),8] = [(RSP_0 -64 0x948),8]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100003801, blockId == 2 ##
#####################################
*)

htriple "ht_100003843"
 Separations ""
 Assertions  ""
 Pre   "RAX = [[0x100004010,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [0x10000a0c0,8] = [0x10000a0c0,8]_0 ; [0x10000a0c8,8] = [0x10000a0c8,8]_0 ; [0x10000a0d0,8] = [0x10000a0d0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8ac),4] = [(RSP_0 -64 0x8ac),4]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x948),8] = [(RSP_0 -64 0x948),8]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003843: XOR R14D, R14D 3"
 Post  "RAX = [[0x100004010,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = 0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [0x10000a0c0,8] = [0x10000a0c0,8]_0 ; [0x10000a0c8,8] = [0x10000a0c8,8]_0 ; [0x10000a0d0,8] = [0x10000a0d0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8ac),4] = [(RSP_0 -64 0x8ac),4]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x948),8] = [(RSP_0 -64 0x948),8]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003846"
 Separations ""
 Assertions  ""
 Pre   "RAX = [[0x100004010,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = 0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [0x10000a0c0,8] = [0x10000a0c0,8]_0 ; [0x10000a0c8,8] = [0x10000a0c8,8]_0 ; [0x10000a0d0,8] = [0x10000a0d0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8ac),4] = [(RSP_0 -64 0x8ac),4]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x948),8] = [(RSP_0 -64 0x948),8]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003846: LEA RBX, [RIP + 1801] 7"
 Post  "RAX = [[0x100004010,8]_0,8]_0 ; RBX = 0x100003f56 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = 0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [0x10000a0c0,8] = [0x10000a0c0,8]_0 ; [0x10000a0c8,8] = [0x10000a0c8,8]_0 ; [0x10000a0d0,8] = [0x10000a0d0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8ac),4] = [(RSP_0 -64 0x8ac),4]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x948),8] = [(RSP_0 -64 0x948),8]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100003801, blockId == 3 ##
#####################################
*)

htriple "ht_10000383e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__open) ; RBX = RDI_0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8ac),4] = [(RSP_0 -64 0x8ac),4]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x948),8] = [(RSP_0 -64 0x948),8]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "10000383e: MOV R14D, EAX 3"
 Post  "RAX = bot(fun__open) ; RBX = RDI_0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(bot(fun__open)) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8ac),4] = [(RSP_0 -64 0x8ac),4]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x948),8] = [(RSP_0 -64 0x948),8]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003841"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__open) ; RBX = RDI_0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(bot(fun__open)) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8ac),4] = [(RSP_0 -64 0x8ac),4]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x948),8] = [(RSP_0 -64 0x948),8]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003841: JMP 4294981709 2"
 Post  "RAX = bot(fun__open) ; RBX = RDI_0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(bot(fun__open)) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8ac),4] = [(RSP_0 -64 0x8ac),4]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x948),8] = [(RSP_0 -64 0x948),8]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100003801, blockId == 4 ##
#####################################
*)

htriple "ht_100003d2a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__open) ; RBX = RDI_0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8ac),4] = [(RSP_0 -64 0x8ac),4]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x948),8] = [(RSP_0 -64 0x948),8]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003d2a: LEA RDI, [RIP + 555] 7"
 Post  "RAX = bot(fun__open) ; RBX = RDI_0 ; RDI = 0x100003f5c ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8ac),4] = [(RSP_0 -64 0x8ac),4]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x948),8] = [(RSP_0 -64 0x948),8]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003d31"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__open) ; RBX = RDI_0 ; RDI = 0x100003f5c ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8ac),4] = [(RSP_0 -64 0x8ac),4]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x948),8] = [(RSP_0 -64 0x948),8]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003d31: MOV RSI, RBX 3"
 Post  "RAX = bot(fun__open) ; RBX = RDI_0 ; RDI = 0x100003f5c ; RSI = RDI_0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8ac),4] = [(RSP_0 -64 0x8ac),4]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x948),8] = [(RSP_0 -64 0x948),8]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003d34"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__open) ; RBX = RDI_0 ; RDI = 0x100003f5c ; RSI = RDI_0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8ac),4] = [(RSP_0 -64 0x8ac),4]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x948),8] = [(RSP_0 -64 0x948),8]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003d34: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = RDI_0 ; RDI = 0x100003f5c ; RSI = RDI_0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8ac),4] = [(RSP_0 -64 0x8ac),4]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x948),8] = [(RSP_0 -64 0x948),8]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003d36"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = RDI_0 ; RDI = 0x100003f5c ; RSI = RDI_0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8ac),4] = [(RSP_0 -64 0x8ac),4]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x948),8] = [(RSP_0 -64 0x948),8]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003d36: ExternalCall fun__warn 5"
 Post  "RAX = bot(fun__warn) ; RBX = RDI_0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8ac),4] = [(RSP_0 -64 0x8ac),4]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x948),8] = [(RSP_0 -64 0x948),8]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 FunctionConstraints "PRESERVES fun__warn {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[0x100004008,8];[0x100004010,8];[0x1000080a0,8];[0x1000080a8,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 0x8ac),4];[(RSP_0 -64 0x8c8),16];[(RSP_0 -64 0x8d8),16];[(RSP_0 -64 0x8e8),16];[(RSP_0 -64 0x8f8),16];[(RSP_0 -64 0x908),16];[(RSP_0 -64 0x918),16];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x93c),4];[(RSP_0 -64 0x940),4];[(RSP_0 -64 0x948),8];[(RSP_0 -64 0x94c),4];[(RSP_0 -64 0x958),8];[(RSP_0 -64 0x960),8];[(RSP_0 -64 0x968),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100003801, blockId == 5 ##
#####################################
*)

htriple "ht_10000384d"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8ac),4] = [(RSP_0 -64 0x8ac),4]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x948),8] = [(RSP_0 -64 0x948),8]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "10000384d: LEA RSI, [RBP - 2216] 7"
 Post  "RSI = (RSP_0 -64 0x8b0) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8ac),4] = [(RSP_0 -64 0x8ac),4]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x948),8] = [(RSP_0 -64 0x948),8]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003854"
 Separations ""
 Assertions  ""
 Pre   "RSI = (RSP_0 -64 0x8b0) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8ac),4] = [(RSP_0 -64 0x8ac),4]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x948),8] = [(RSP_0 -64 0x948),8]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003854: MOV EDI, R14D 3"
 Post  "RSI = (RSP_0 -64 0x8b0) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8ac),4] = [(RSP_0 -64 0x8ac),4]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x948),8] = [(RSP_0 -64 0x948),8]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003857"
 Separations ""
 Assertions  ""
 Pre   "RSI = (RSP_0 -64 0x8b0) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8ac),4] = [(RSP_0 -64 0x8ac),4]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x948),8] = [(RSP_0 -64 0x948),8]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003857: ExternalCall fun__fstatfs_INODE64 5"
 Post  "RAX = bot(fun__fstatfs_INODE64) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8ac),4] = [(RSP_0 -64 0x8ac),4]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x948),8] = [(RSP_0 -64 0x948),8]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 FunctionConstraints "PRESERVES fun__fstatfs_INODE64 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[0x100004008,8];[0x100004010,8];[0x1000080a0,8];[0x1000080a8,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 0x8ac),4];[(RSP_0 -64 0x8c8),16];[(RSP_0 -64 0x8d8),16];[(RSP_0 -64 0x8e8),16];[(RSP_0 -64 0x8f8),16];[(RSP_0 -64 0x908),16];[(RSP_0 -64 0x918),16];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x93c),4];[(RSP_0 -64 0x940),4];[(RSP_0 -64 0x948),8];[(RSP_0 -64 0x94c),4];[(RSP_0 -64 0x958),8];[(RSP_0 -64 0x960),8];[(RSP_0 -64 0x968),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000385c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fstatfs_INODE64) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8ac),4] = [(RSP_0 -64 0x8ac),4]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x948),8] = [(RSP_0 -64 0x948),8]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "10000385c: TEST EAX, EAX 2"
 Post  "RAX = bot(fun__fstatfs_INODE64) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8ac),4] = [(RSP_0 -64 0x8ac),4]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x948),8] = [(RSP_0 -64 0x948),8]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000385e"
 Separations "((RSP_0 -64 0x948),8) SEP (bot(fun____error),4); ((RSP_0 -64 0x948),8) SEP ([0x100004010,8]_0,8); ((RSP_0 -64 0x948),8) SEP (0x100004000,8); ((RSP_0 -64 0x948),8) SEP (0x100004008,8); ((RSP_0 -64 0x948),8) SEP (0x100004010,8); ((RSP_0 -64 0x948),8) SEP (0x1000080a0,8); ((RSP_0 -64 0x948),8) SEP (0x1000080a8,8); ((RSP_0 -64 0x948),8) SEP (0x10000a0c0,8); ((RSP_0 -64 0x948),8) SEP (0x10000a0c8,8); ((RSP_0 -64 0x948),8) SEP (0x10000a0d0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun__fstatfs_INODE64) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8ac),4] = [(RSP_0 -64 0x8ac),4]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x948),8] = [(RSP_0 -64 0x948),8]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "10000385e: MOV QWORD PTR [RBP - 2368], RBX 7"
 Post  "RAX = bot(fun__fstatfs_INODE64) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8ac),4] = [(RSP_0 -64 0x8ac),4]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003865"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fstatfs_INODE64) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8ac),4] = [(RSP_0 -64 0x8ac),4]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003865: JE 4294981752 2"
 Post  "RAX = bot(fun__fstatfs_INODE64) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8ac),4] = [(RSP_0 -64 0x8ac),4]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100003801, blockId == 6 ##
#####################################
*)

htriple "ht_100003867"
 Separations "((RSP_0 -64 0x8ac),4) SEP (bot(fun____error),4); ((RSP_0 -64 0x8ac),4) SEP ([0x100004010,8]_0,8); ((RSP_0 -64 0x8ac),4) SEP (0x100004000,8); ((RSP_0 -64 0x8ac),4) SEP (0x100004008,8); ((RSP_0 -64 0x8ac),4) SEP (0x100004010,8); ((RSP_0 -64 0x8ac),4) SEP (0x1000080a0,8); ((RSP_0 -64 0x8ac),4) SEP (0x1000080a8,8); ((RSP_0 -64 0x8ac),4) SEP (0x10000a0c0,8); ((RSP_0 -64 0x8ac),4) SEP (0x10000a0c8,8); ((RSP_0 -64 0x8ac),4) SEP (0x10000a0d0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun__fstatfs_INODE64) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8ac),4] = [(RSP_0 -64 0x8ac),4]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003867: MOV DWORD PTR [RBP - 2212], 8192 10"
 Post  "RAX = bot(fun__fstatfs_INODE64) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8ac),4] = 0x2000 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003871"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fstatfs_INODE64) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8ac),4] = 0x2000 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003871: MOV EAX, 8192 5"
 Post  "RAX = 0x2000 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8ac),4] = 0x2000 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003876"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x2000 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8ac),4] = 0x2000 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003876: JMP 4294981758 2"
 Post  "RAX = 0x2000 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8ac),4] = 0x2000 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100003801, blockId == 7 ##
#####################################
*)

htriple "ht_100003878"
 Separations "((RSP_0 -64 0x8ac),4) SEP (bot(fun____error),4); ((RSP_0 -64 0x8ac),4) SEP ([0x100004010,8]_0,8); ((RSP_0 -64 0x8ac),4) SEP (0x100004000,8); ((RSP_0 -64 0x8ac),4) SEP (0x100004008,8); ((RSP_0 -64 0x8ac),4) SEP (0x100004010,8); ((RSP_0 -64 0x8ac),4) SEP (0x1000080a0,8); ((RSP_0 -64 0x8ac),4) SEP (0x1000080a8,8); ((RSP_0 -64 0x8ac),4) SEP (0x10000a0c0,8); ((RSP_0 -64 0x8ac),4) SEP (0x10000a0c8,8); ((RSP_0 -64 0x8ac),4) SEP (0x10000a0d0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun__fstatfs_INODE64) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8ac),4] = [(RSP_0 -64 0x8ac),4]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003878: MOV EAX, DWORD PTR [RBP - 2212] 6"
 Post  "RAX = b32([(RSP_0 -64 0x8ac),4]_0) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8ac),4] = [(RSP_0 -64 0x8ac),4]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100003801, blockId == 8 ##
#####################################
*)

htriple "ht_10000387e"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "10000387e: MOVSXD R15, EAX 3"
 Post  "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003881"
 Separations "(0x1000080a8,8) SEP (bot(fun____error),4); (0x1000080a8,8) SEP (RSP_0,8); (0x1000080a8,8) SEP ([0x100004010,8]_0,8); (0x1000080a8,8) SEP ((RSP_0 -64 8),8); (0x1000080a8,8) SEP ((RSP_0 -64 16),8); (0x1000080a8,8) SEP ((RSP_0 -64 24),8); (0x1000080a8,8) SEP ((RSP_0 -64 32),8); (0x1000080a8,8) SEP ((RSP_0 -64 40),8); (0x1000080a8,8) SEP ((RSP_0 -64 48),8); (0x1000080a8,8) SEP ((RSP_0 -64 56),8); (0x1000080a8,8) SEP ((RSP_0 -64 0x8ac),4); (0x1000080a8,8) SEP ((RSP_0 -64 0x8c8),16); (0x1000080a8,8) SEP ((RSP_0 -64 0x8d8),16); (0x1000080a8,8) SEP ((RSP_0 -64 0x8e8),16); (0x1000080a8,8) SEP ((RSP_0 -64 0x8f8),16); (0x1000080a8,8) SEP ((RSP_0 -64 0x908),16); (0x1000080a8,8) SEP ((RSP_0 -64 0x918),16); (0x1000080a8,8) SEP ((RSP_0 -64 0x928),16); (0x1000080a8,8) SEP ((RSP_0 -64 0x938),16); (0x1000080a8,8) SEP ((RSP_0 -64 0x93c),4); (0x1000080a8,8) SEP ((RSP_0 -64 0x940),4); (0x1000080a8,8) SEP ((RSP_0 -64 0x948),8); (0x1000080a8,8) SEP ((RSP_0 -64 0x94c),4); (0x1000080a8,8) SEP ((RSP_0 -64 0x958),8); (0x1000080a8,8) SEP ((RSP_0 -64 0x960),8); (0x1000080a8,8) SEP ((RSP_0 -64 0x968),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003881: CMP QWORD PTR [RIP + 18464], R15 7"
 Post  "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003888"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003888: JE 4294981846 2"
 Post  "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100003801, blockId == 9 ##
#####################################
*)

htriple "ht_10000388a"
 Separations "(0x1000080a0,8) SEP (bot(fun____error),4); (0x1000080a0,8) SEP (RSP_0,8); (0x1000080a0,8) SEP ([0x100004010,8]_0,8); (0x1000080a0,8) SEP ((RSP_0 -64 8),8); (0x1000080a0,8) SEP ((RSP_0 -64 16),8); (0x1000080a0,8) SEP ((RSP_0 -64 24),8); (0x1000080a0,8) SEP ((RSP_0 -64 32),8); (0x1000080a0,8) SEP ((RSP_0 -64 40),8); (0x1000080a0,8) SEP ((RSP_0 -64 48),8); (0x1000080a0,8) SEP ((RSP_0 -64 56),8); (0x1000080a0,8) SEP ((RSP_0 -64 0x8ac),4); (0x1000080a0,8) SEP ((RSP_0 -64 0x8c8),16); (0x1000080a0,8) SEP ((RSP_0 -64 0x8d8),16); (0x1000080a0,8) SEP ((RSP_0 -64 0x8e8),16); (0x1000080a0,8) SEP ((RSP_0 -64 0x8f8),16); (0x1000080a0,8) SEP ((RSP_0 -64 0x908),16); (0x1000080a0,8) SEP ((RSP_0 -64 0x918),16); (0x1000080a0,8) SEP ((RSP_0 -64 0x928),16); (0x1000080a0,8) SEP ((RSP_0 -64 0x938),16); (0x1000080a0,8) SEP ((RSP_0 -64 0x93c),4); (0x1000080a0,8) SEP ((RSP_0 -64 0x940),4); (0x1000080a0,8) SEP ((RSP_0 -64 0x948),8); (0x1000080a0,8) SEP ((RSP_0 -64 0x94c),4); (0x1000080a0,8) SEP ((RSP_0 -64 0x958),8); (0x1000080a0,8) SEP ((RSP_0 -64 0x960),8); (0x1000080a0,8) SEP ((RSP_0 -64 0x968),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "10000388a: MOV RDI, QWORD PTR [RIP + 18447] 7"
 Post  "RDI = [0x1000080a0,8]_0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003891"
 Separations ""
 Assertions  ""
 Pre   "RDI = [0x1000080a0,8]_0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003891: LEA RBX, [RIP + 18456] 7"
 Post  "RBX = 0x1000080b0 ; RDI = [0x1000080a0,8]_0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003898"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x1000080b0 ; RDI = [0x1000080a0,8]_0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003898: CMP RDI, RBX 3"
 Post  "RBX = 0x1000080b0 ; RDI = [0x1000080a0,8]_0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000389b"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x1000080b0 ; RDI = [0x1000080a0,8]_0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "10000389b: JE 4294981800 2"
 Post  "RBX = 0x1000080b0 ; RDI = [0x1000080a0,8]_0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003801, blockId == 10 ##
######################################
*)

htriple "ht_1000038d6"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "1000038d6: CMP DWORD PTR [RIP + 26591], 0 7"
 Post  "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000038dd"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "1000038dd: JNE 4294981885 2"
 Post  "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003801, blockId == 11 ##
######################################
*)

htriple "ht_10000389d"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x1000080b0 ; RDI = [0x1000080a0,8]_0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "10000389d: ExternalCall fun__free 5"
 Post  "RAX = bot(fun__free) ; RBX = 0x1000080b0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 FunctionConstraints "PRESERVES fun__free {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[0x100004008,8];[0x100004010,8];[0x1000080a0,8];[0x1000080a8,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 0x8ac),4];[(RSP_0 -64 0x8c8),16];[(RSP_0 -64 0x8d8),16];[(RSP_0 -64 0x8e8),16];[(RSP_0 -64 0x8f8),16];[(RSP_0 -64 0x908),16];[(RSP_0 -64 0x918),16];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x93c),4];[(RSP_0 -64 0x940),4];[(RSP_0 -64 0x948),8];[(RSP_0 -64 0x94c),4];[(RSP_0 -64 0x958),8];[(RSP_0 -64 0x960),8];[(RSP_0 -64 0x968),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000038a2"
 Separations "((RSP_0 -64 0x8ac),4) SEP (bot(fun____error),4); ((RSP_0 -64 0x8ac),4) SEP ([0x100004010,8]_0,8); ((RSP_0 -64 0x8ac),4) SEP (0x100004000,8); ((RSP_0 -64 0x8ac),4) SEP (0x100004008,8); ((RSP_0 -64 0x8ac),4) SEP (0x100004010,8); ((RSP_0 -64 0x8ac),4) SEP (0x1000080a0,8); ((RSP_0 -64 0x8ac),4) SEP (0x1000080a8,8); ((RSP_0 -64 0x8ac),4) SEP (0x10000a0c0,8); ((RSP_0 -64 0x8ac),4) SEP (0x10000a0c8,8); ((RSP_0 -64 0x8ac),4) SEP (0x10000a0d0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun__free) ; RBX = 0x1000080b0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "1000038a2: MOV EAX, DWORD PTR [RBP - 2212] 6"
 Post  "RBX = 0x1000080b0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003801, blockId == 12 ##
######################################
*)

htriple "ht_1000038a8"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x1000080b0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "1000038a8: CMP EAX, 8192 5"
 Post  "RBX = 0x1000080b0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000038ad"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x1000080b0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "1000038ad: JE 4294981823 2"
 Post  "RBX = 0x1000080b0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003801, blockId == 13 ##
######################################
*)

htriple "ht_1000038af"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x1000080b0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "1000038af: MOVSXD R15, EAX 3"
 Post  "RBX = 0x1000080b0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000038b2"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x1000080b0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "1000038b2: MOV RDI, R15 3"
 Post  "RBX = 0x1000080b0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000038b5"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x1000080b0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "1000038b5: ExternalCall fun__malloc 5"
 Post  "RAX = bot(fun__malloc) ; RBX = 0x1000080b0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 FunctionConstraints "PRESERVES fun__malloc {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[0x100004008,8];[0x100004010,8];[0x1000080a0,8];[0x1000080a8,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 0x8ac),4];[(RSP_0 -64 0x8c8),16];[(RSP_0 -64 0x8d8),16];[(RSP_0 -64 0x8e8),16];[(RSP_0 -64 0x8f8),16];[(RSP_0 -64 0x908),16];[(RSP_0 -64 0x918),16];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x93c),4];[(RSP_0 -64 0x940),4];[(RSP_0 -64 0x948),8];[(RSP_0 -64 0x94c),4];[(RSP_0 -64 0x958),8];[(RSP_0 -64 0x960),8];[(RSP_0 -64 0x968),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000038ba"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RBX = 0x1000080b0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "1000038ba: TEST RAX, RAX 3"
 Post  "RAX = bot(fun__malloc) ; RBX = 0x1000080b0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000038bd"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RBX = 0x1000080b0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "1000038bd: JNE 4294981832 2"
 Post  "RAX = bot(fun__malloc) ; RBX = 0x1000080b0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003801, blockId == 14 ##
######################################
*)

htriple "ht_1000038bf"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x1000080b0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "1000038bf: MOV R15D, 8192 6"
 Post  "RBX = 0x1000080b0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = 0x2000 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000038c5"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x1000080b0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = 0x2000 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "1000038c5: MOV RAX, RBX 3"
 Post  "RAX = 0x1000080b0 ; RBX = 0x1000080b0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = 0x2000 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003801, blockId == 15 ##
######################################
*)

htriple "ht_1000038c8"
 Separations "(0x1000080a0,8) SEP (bot(fun____error),4); (0x1000080a0,8) SEP (RSP_0,8); (0x1000080a0,8) SEP ([0x100004010,8]_0,8); (0x1000080a0,8) SEP ((RSP_0 -64 8),8); (0x1000080a0,8) SEP ((RSP_0 -64 16),8); (0x1000080a0,8) SEP ((RSP_0 -64 24),8); (0x1000080a0,8) SEP ((RSP_0 -64 32),8); (0x1000080a0,8) SEP ((RSP_0 -64 40),8); (0x1000080a0,8) SEP ((RSP_0 -64 48),8); (0x1000080a0,8) SEP ((RSP_0 -64 56),8); (0x1000080a0,8) SEP ((RSP_0 -64 0x8ac),4); (0x1000080a0,8) SEP ((RSP_0 -64 0x8c8),16); (0x1000080a0,8) SEP ((RSP_0 -64 0x8d8),16); (0x1000080a0,8) SEP ((RSP_0 -64 0x8e8),16); (0x1000080a0,8) SEP ((RSP_0 -64 0x8f8),16); (0x1000080a0,8) SEP ((RSP_0 -64 0x908),16); (0x1000080a0,8) SEP ((RSP_0 -64 0x918),16); (0x1000080a0,8) SEP ((RSP_0 -64 0x928),16); (0x1000080a0,8) SEP ((RSP_0 -64 0x938),16); (0x1000080a0,8) SEP ((RSP_0 -64 0x93c),4); (0x1000080a0,8) SEP ((RSP_0 -64 0x940),4); (0x1000080a0,8) SEP ((RSP_0 -64 0x948),8); (0x1000080a0,8) SEP ((RSP_0 -64 0x94c),4); (0x1000080a0,8) SEP ((RSP_0 -64 0x958),8); (0x1000080a0,8) SEP ((RSP_0 -64 0x960),8); (0x1000080a0,8) SEP ((RSP_0 -64 0x968),8)"
 Assertions  ""
 Pre   "RBX = 0x1000080b0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a0,8] = [0x1000080a0,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "1000038c8: MOV QWORD PTR [RIP + 18385], RAX 7"
 Post  "RBX = 0x1000080b0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000038cf"
 Separations "(0x1000080a8,8) SEP (bot(fun____error),4); (0x1000080a8,8) SEP (RSP_0,8); (0x1000080a8,8) SEP ([0x100004010,8]_0,8); (0x1000080a8,8) SEP ((RSP_0 -64 8),8); (0x1000080a8,8) SEP ((RSP_0 -64 16),8); (0x1000080a8,8) SEP ((RSP_0 -64 24),8); (0x1000080a8,8) SEP ((RSP_0 -64 32),8); (0x1000080a8,8) SEP ((RSP_0 -64 40),8); (0x1000080a8,8) SEP ((RSP_0 -64 48),8); (0x1000080a8,8) SEP ((RSP_0 -64 56),8); (0x1000080a8,8) SEP ((RSP_0 -64 0x8ac),4); (0x1000080a8,8) SEP ((RSP_0 -64 0x8c8),16); (0x1000080a8,8) SEP ((RSP_0 -64 0x8d8),16); (0x1000080a8,8) SEP ((RSP_0 -64 0x8e8),16); (0x1000080a8,8) SEP ((RSP_0 -64 0x8f8),16); (0x1000080a8,8) SEP ((RSP_0 -64 0x908),16); (0x1000080a8,8) SEP ((RSP_0 -64 0x918),16); (0x1000080a8,8) SEP ((RSP_0 -64 0x928),16); (0x1000080a8,8) SEP ((RSP_0 -64 0x938),16); (0x1000080a8,8) SEP ((RSP_0 -64 0x93c),4); (0x1000080a8,8) SEP ((RSP_0 -64 0x940),4); (0x1000080a8,8) SEP ((RSP_0 -64 0x948),8); (0x1000080a8,8) SEP ((RSP_0 -64 0x94c),4); (0x1000080a8,8) SEP ((RSP_0 -64 0x958),8); (0x1000080a8,8) SEP ((RSP_0 -64 0x960),8); (0x1000080a8,8) SEP ((RSP_0 -64 0x968),8)"
 Assertions  ""
 Pre   "RBX = 0x1000080b0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [0x1000080a8,8] = [0x1000080a8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "1000038cf: MOV QWORD PTR [RIP + 18386], R15 7"
 Post  "RBX = 0x1000080b0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003801, blockId == 16 ##
######################################
*)

htriple "ht_1000038df"
 Separations "(0x10000a0b8,4) SEP (bot(fun____error),4); (0x10000a0b8,4) SEP ([0x100004010,8]_0,8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "1000038df: MOV EAX, DWORD PTR [RIP + 26579] 6"
 Post  "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000038e5"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "1000038e5: TEST EAX, EAX 2"
 Post  "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000038e7"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "1000038e7: JE 4294982650 6"
 Post  "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003801, blockId == 17 ##
######################################
*)

htriple "ht_1000038fd"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "1000038fd: XORPS XMM0, XMM0 3"
 Post  "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003900"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003900: LEA RAX, [RBP - 2352] 7"
 Post  "RAX = (RSP_0 -64 0x938) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003907"
 Separations "((RSP_0 -64 0x8c8),16) SEP (bot(fun____error),4); ((RSP_0 -64 0x8c8),16) SEP ([0x100004010,8]_0,8); ((RSP_0 -64 0x8c8),16) SEP (0x100004000,8); ((RSP_0 -64 0x8c8),16) SEP (0x100004008,8); ((RSP_0 -64 0x8c8),16) SEP (0x100004010,8); ((RSP_0 -64 0x8c8),16) SEP (0x1000080a0,8); ((RSP_0 -64 0x8c8),16) SEP (0x1000080a8,8); ((RSP_0 -64 0x8c8),16) SEP (0x10000a0c0,8); ((RSP_0 -64 0x8c8),16) SEP (0x10000a0c8,8); ((RSP_0 -64 0x8c8),16) SEP (0x10000a0d0,8)"
 Assertions  ""
 Pre   "RAX = (RSP_0 -64 0x938) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003907: MOVAPS XMMWORD PTR [RAX + 112], XMM0 4"
 Post  "RAX = (RSP_0 -64 0x938) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000390b"
 Separations "((RSP_0 -64 0x8d8),16) SEP (bot(fun____error),4); ((RSP_0 -64 0x8d8),16) SEP ([0x100004010,8]_0,8); ((RSP_0 -64 0x8d8),16) SEP (0x100004000,8); ((RSP_0 -64 0x8d8),16) SEP (0x100004008,8); ((RSP_0 -64 0x8d8),16) SEP (0x100004010,8); ((RSP_0 -64 0x8d8),16) SEP (0x1000080a0,8); ((RSP_0 -64 0x8d8),16) SEP (0x1000080a8,8); ((RSP_0 -64 0x8d8),16) SEP (0x10000a0c0,8); ((RSP_0 -64 0x8d8),16) SEP (0x10000a0c8,8); ((RSP_0 -64 0x8d8),16) SEP (0x10000a0d0,8)"
 Assertions  ""
 Pre   "RAX = (RSP_0 -64 0x938) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "10000390b: MOVAPS XMMWORD PTR [RAX + 96], XMM0 4"
 Post  "RAX = (RSP_0 -64 0x938) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000390f"
 Separations "((RSP_0 -64 0x8e8),16) SEP (bot(fun____error),4); ((RSP_0 -64 0x8e8),16) SEP ([0x100004010,8]_0,8); ((RSP_0 -64 0x8e8),16) SEP (0x100004000,8); ((RSP_0 -64 0x8e8),16) SEP (0x100004008,8); ((RSP_0 -64 0x8e8),16) SEP (0x100004010,8); ((RSP_0 -64 0x8e8),16) SEP (0x1000080a0,8); ((RSP_0 -64 0x8e8),16) SEP (0x1000080a8,8); ((RSP_0 -64 0x8e8),16) SEP (0x10000a0c0,8); ((RSP_0 -64 0x8e8),16) SEP (0x10000a0c8,8); ((RSP_0 -64 0x8e8),16) SEP (0x10000a0d0,8)"
 Assertions  ""
 Pre   "RAX = (RSP_0 -64 0x938) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "10000390f: MOVAPS XMMWORD PTR [RAX + 80], XMM0 4"
 Post  "RAX = (RSP_0 -64 0x938) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003913"
 Separations "((RSP_0 -64 0x8f8),16) SEP (bot(fun____error),4); ((RSP_0 -64 0x8f8),16) SEP ([0x100004010,8]_0,8); ((RSP_0 -64 0x8f8),16) SEP (0x100004000,8); ((RSP_0 -64 0x8f8),16) SEP (0x100004008,8); ((RSP_0 -64 0x8f8),16) SEP (0x100004010,8); ((RSP_0 -64 0x8f8),16) SEP (0x1000080a0,8); ((RSP_0 -64 0x8f8),16) SEP (0x1000080a8,8); ((RSP_0 -64 0x8f8),16) SEP (0x10000a0c0,8); ((RSP_0 -64 0x8f8),16) SEP (0x10000a0c8,8); ((RSP_0 -64 0x8f8),16) SEP (0x10000a0d0,8)"
 Assertions  ""
 Pre   "RAX = (RSP_0 -64 0x938) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003913: MOVAPS XMMWORD PTR [RAX + 64], XMM0 4"
 Post  "RAX = (RSP_0 -64 0x938) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003917"
 Separations "((RSP_0 -64 0x908),16) SEP (bot(fun____error),4); ((RSP_0 -64 0x908),16) SEP ([0x100004010,8]_0,8); ((RSP_0 -64 0x908),16) SEP (0x100004000,8); ((RSP_0 -64 0x908),16) SEP (0x100004008,8); ((RSP_0 -64 0x908),16) SEP (0x100004010,8); ((RSP_0 -64 0x908),16) SEP (0x1000080a0,8); ((RSP_0 -64 0x908),16) SEP (0x1000080a8,8); ((RSP_0 -64 0x908),16) SEP (0x10000a0c0,8); ((RSP_0 -64 0x908),16) SEP (0x10000a0c8,8); ((RSP_0 -64 0x908),16) SEP (0x10000a0d0,8)"
 Assertions  ""
 Pre   "RAX = (RSP_0 -64 0x938) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003917: MOVAPS XMMWORD PTR [RAX + 48], XMM0 4"
 Post  "RAX = (RSP_0 -64 0x938) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000391b"
 Separations "((RSP_0 -64 0x918),16) SEP (bot(fun____error),4); ((RSP_0 -64 0x918),16) SEP ([0x100004010,8]_0,8); ((RSP_0 -64 0x918),16) SEP (0x100004000,8); ((RSP_0 -64 0x918),16) SEP (0x100004008,8); ((RSP_0 -64 0x918),16) SEP (0x100004010,8); ((RSP_0 -64 0x918),16) SEP (0x1000080a0,8); ((RSP_0 -64 0x918),16) SEP (0x1000080a8,8); ((RSP_0 -64 0x918),16) SEP (0x10000a0c0,8); ((RSP_0 -64 0x918),16) SEP (0x10000a0c8,8); ((RSP_0 -64 0x918),16) SEP (0x10000a0d0,8)"
 Assertions  ""
 Pre   "RAX = (RSP_0 -64 0x938) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "10000391b: MOVAPS XMMWORD PTR [RAX + 32], XMM0 4"
 Post  "RAX = (RSP_0 -64 0x938) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000391f"
 Separations "((RSP_0 -64 0x928),16) SEP (bot(fun____error),4); ((RSP_0 -64 0x928),16) SEP ([0x100004010,8]_0,8); ((RSP_0 -64 0x928),16) SEP (0x100004000,8); ((RSP_0 -64 0x928),16) SEP (0x100004008,8); ((RSP_0 -64 0x928),16) SEP (0x100004010,8); ((RSP_0 -64 0x928),16) SEP (0x1000080a0,8); ((RSP_0 -64 0x928),16) SEP (0x1000080a8,8); ((RSP_0 -64 0x928),16) SEP (0x10000a0c0,8); ((RSP_0 -64 0x928),16) SEP (0x10000a0c8,8); ((RSP_0 -64 0x928),16) SEP (0x10000a0d0,8)"
 Assertions  ""
 Pre   "RAX = (RSP_0 -64 0x938) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "10000391f: MOVAPS XMMWORD PTR [RAX + 16], XMM0 4"
 Post  "RAX = (RSP_0 -64 0x938) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003923"
 Separations "((RSP_0 -64 0x938),16) SEP (bot(fun____error),4); ((RSP_0 -64 0x938),16) SEP ([0x100004010,8]_0,8); ((RSP_0 -64 0x938),16) SEP (0x100004000,8); ((RSP_0 -64 0x938),16) SEP (0x100004008,8); ((RSP_0 -64 0x938),16) SEP (0x100004010,8); ((RSP_0 -64 0x938),16) SEP (0x1000080a0,8); ((RSP_0 -64 0x938),16) SEP (0x1000080a8,8); ((RSP_0 -64 0x938),16) SEP (0x10000a0c0,8); ((RSP_0 -64 0x938),16) SEP (0x10000a0c8,8); ((RSP_0 -64 0x938),16) SEP (0x10000a0d0,8)"
 Assertions  ""
 Pre   "RAX = (RSP_0 -64 0x938) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003923: MOVAPS XMMWORD PTR [RAX], XMM0 3"
 Post  "RAX = (RSP_0 -64 0x938) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003926"
 Separations ""
 Assertions  ""
 Pre   "RAX = (RSP_0 -64 0x938) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003926: MOV BX, 1 4"
 Post  "RAX = (RSP_0 -64 0x938) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000392a"
 Separations ""
 Assertions  ""
 Pre   "RAX = (RSP_0 -64 0x938) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "10000392a: XOR R13D, R13D 3"
 Post  "RAX = (RSP_0 -64 0x938) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = 0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000392d"
 Separations ""
 Assertions  ""
 Pre   "RAX = (RSP_0 -64 0x938) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = 0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "10000392d: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = 0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000392f"
 Separations "((RSP_0 -64 0x958),8) SEP (bot(fun____error),4); ((RSP_0 -64 0x958),8) SEP ([0x100004010,8]_0,8); ((RSP_0 -64 0x958),8) SEP (0x100004000,8); ((RSP_0 -64 0x958),8) SEP (0x100004008,8); ((RSP_0 -64 0x958),8) SEP (0x100004010,8); ((RSP_0 -64 0x958),8) SEP (0x1000080a0,8); ((RSP_0 -64 0x958),8) SEP (0x1000080a8,8); ((RSP_0 -64 0x958),8) SEP (0x10000a0c0,8); ((RSP_0 -64 0x958),8) SEP (0x10000a0c8,8); ((RSP_0 -64 0x958),8) SEP (0x10000a0d0,8)"
 Assertions  ""
 Pre   "RAX = 0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = 0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "10000392f: MOV QWORD PTR [RBP - 2384], RAX 7"
 Post  "RAX = 0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = 0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = 0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003936"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = 0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = 0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003936: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = 0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = 0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003938"
 Separations "((RSP_0 -64 0x960),8) SEP (bot(fun____error),4); ((RSP_0 -64 0x960),8) SEP ([0x100004010,8]_0,8); ((RSP_0 -64 0x960),8) SEP (0x100004000,8); ((RSP_0 -64 0x960),8) SEP (0x100004008,8); ((RSP_0 -64 0x960),8) SEP (0x100004010,8); ((RSP_0 -64 0x960),8) SEP (0x1000080a0,8); ((RSP_0 -64 0x960),8) SEP (0x1000080a8,8); ((RSP_0 -64 0x960),8) SEP (0x10000a0c0,8); ((RSP_0 -64 0x960),8) SEP (0x10000a0c8,8); ((RSP_0 -64 0x960),8) SEP (0x10000a0d0,8)"
 Assertions  ""
 Pre   "RAX = 0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = 0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = 0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003938: MOV QWORD PTR [RBP - 2392], RAX 7"
 Post  "RAX = 0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = 0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = 0 ; [(RSP_0 -64 0x960),8] = 0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000393f"
 Separations "((RSP_0 -64 0x93c),4) SEP (bot(fun____error),4); ((RSP_0 -64 0x93c),4) SEP ([0x100004010,8]_0,8); ((RSP_0 -64 0x93c),4) SEP (0x100004000,8); ((RSP_0 -64 0x93c),4) SEP (0x100004008,8); ((RSP_0 -64 0x93c),4) SEP (0x100004010,8); ((RSP_0 -64 0x93c),4) SEP (0x1000080a0,8); ((RSP_0 -64 0x93c),4) SEP (0x1000080a8,8); ((RSP_0 -64 0x93c),4) SEP (0x10000a0c0,8); ((RSP_0 -64 0x93c),4) SEP (0x10000a0c8,8); ((RSP_0 -64 0x93c),4) SEP (0x10000a0d0,8)"
 Assertions  ""
 Pre   "RAX = 0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = 0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = 0 ; [(RSP_0 -64 0x960),8] = 0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "10000393f: MOV DWORD PTR [RBP - 2356], 0 10"
 Post  "RAX = 0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = 0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x93c),4] = 0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = 0 ; [(RSP_0 -64 0x960),8] = 0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003801, blockId == 18 ##
######################################
*)

htriple "ht_1000038ed"
 Separations "(0x100004008,8) SEP (bot(fun____error),4); (0x100004008,8) SEP (RSP_0,8); (0x100004008,8) SEP ([0x100004010,8]_0,8); (0x100004008,8) SEP ((RSP_0 -64 8),8); (0x100004008,8) SEP ((RSP_0 -64 16),8); (0x100004008,8) SEP ((RSP_0 -64 24),8); (0x100004008,8) SEP ((RSP_0 -64 32),8); (0x100004008,8) SEP ((RSP_0 -64 40),8); (0x100004008,8) SEP ((RSP_0 -64 48),8); (0x100004008,8) SEP ((RSP_0 -64 56),8); (0x100004008,8) SEP ((RSP_0 -64 0x8ac),4); (0x100004008,8) SEP ((RSP_0 -64 0x8c8),16); (0x100004008,8) SEP ((RSP_0 -64 0x8d8),16); (0x100004008,8) SEP ((RSP_0 -64 0x8e8),16); (0x100004008,8) SEP ((RSP_0 -64 0x8f8),16); (0x100004008,8) SEP ((RSP_0 -64 0x908),16); (0x100004008,8) SEP ((RSP_0 -64 0x918),16); (0x100004008,8) SEP ((RSP_0 -64 0x928),16); (0x100004008,8) SEP ((RSP_0 -64 0x938),16); (0x100004008,8) SEP ((RSP_0 -64 0x93c),4); (0x100004008,8) SEP ((RSP_0 -64 0x940),4); (0x100004008,8) SEP ((RSP_0 -64 0x948),8); (0x100004008,8) SEP ((RSP_0 -64 0x94c),4); (0x100004008,8) SEP ((RSP_0 -64 0x958),8); (0x100004008,8) SEP ((RSP_0 -64 0x960),8); (0x100004008,8) SEP ((RSP_0 -64 0x968),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "1000038ed: MOV RCX, QWORD PTR [RIP + 1812] 7"
 Post  "RCX = [0x100004008,8]_0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000038f4"
 Separations ""
 Assertions  ""
 Pre   "RCX = [0x100004008,8]_0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "1000038f4: CMP DWORD PTR [RCX], 1 3"
 Post  "RCX = [0x100004008,8]_0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000038f7"
 Separations ""
 Assertions  ""
 Pre   "RCX = [0x100004008,8]_0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "1000038f7: JE 4294982650 6"
 Post  "RCX = [0x100004008,8]_0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003801, blockId == 19 ##
######################################
*)

htriple "ht_100003bfa"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003bfa: CMP DWORD PTR [RIP + 25779], 0 7"
 Post  "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003c01"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003c01: JE 4294982850 6"
 Post  "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003801, blockId == 20 ##
######################################
*)

htriple "ht_10000396b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "10000396b: CMP R15D, 18446744073709551615 4"
 Post  "RAX = bot(fun__read) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000396f"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "10000396f: JE 4294982819 6"
 Post  "RAX = bot(fun__read) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003801, blockId == 21 ##
######################################
*)

htriple "ht_100003b1c"
 Separations "(0x10000a0b8,4) SEP (bot(fun____error),4); (0x10000a0b8,4) SEP ([0x100004010,8]_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003b1c: CMP DWORD PTR [RIP + 26005], 0 7"
 Post  "RAX = bot(fun__read) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003b23"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003b23: JE 4294982486 2"
 Post  "RAX = bot(fun__read) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003801, blockId == 22 ##
######################################
*)

htriple "ht_100003975"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003975: TEST R15D, R15D 3"
 Post  "RAX = bot(fun__read) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003978"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003978: JLE 4294981961 2"
 Post  "RAX = bot(fun__read) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003801, blockId == 23 ##
######################################
*)

htriple "ht_100003ca3"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003ca3: LEA RDI, [RIP + 699] 7"
 Post  "RAX = bot(fun__read) ; RDI = 0x100003f65 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003801, blockId == 24 ##
######################################
*)

htriple "ht_100003949"
 Separations "(0x1000080a0,8) SEP (bot(fun____error),4); (0x1000080a0,8) SEP (RSP_0,8); (0x1000080a0,8) SEP ([0x100004010,8]_0,8); (0x1000080a0,8) SEP ((RSP_0 -64 8),8); (0x1000080a0,8) SEP ((RSP_0 -64 16),8); (0x1000080a0,8) SEP ((RSP_0 -64 24),8); (0x1000080a0,8) SEP ((RSP_0 -64 32),8); (0x1000080a0,8) SEP ((RSP_0 -64 40),8); (0x1000080a0,8) SEP ((RSP_0 -64 48),8); (0x1000080a0,8) SEP ((RSP_0 -64 56),8); (0x1000080a0,8) SEP ((RSP_0 -64 0x8ac),4); (0x1000080a0,8) SEP ((RSP_0 -64 0x8c8),16); (0x1000080a0,8) SEP ((RSP_0 -64 0x8d8),16); (0x1000080a0,8) SEP ((RSP_0 -64 0x8e8),16); (0x1000080a0,8) SEP ((RSP_0 -64 0x8f8),16); (0x1000080a0,8) SEP ((RSP_0 -64 0x908),16); (0x1000080a0,8) SEP ((RSP_0 -64 0x918),16); (0x1000080a0,8) SEP ((RSP_0 -64 0x928),16); (0x1000080a0,8) SEP ((RSP_0 -64 0x938),16); (0x1000080a0,8) SEP ((RSP_0 -64 0x93c),4); (0x1000080a0,8) SEP ((RSP_0 -64 0x940),4); (0x1000080a0,8) SEP ((RSP_0 -64 0x948),8); (0x1000080a0,8) SEP ((RSP_0 -64 0x94c),4); (0x1000080a0,8) SEP ((RSP_0 -64 0x958),8); (0x1000080a0,8) SEP ((RSP_0 -64 0x960),8); (0x1000080a0,8) SEP ((RSP_0 -64 0x968),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003949: MOV RSI, QWORD PTR [RIP + 18256] 7"
 Post  "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003950"
 Separations "(0x1000080a8,8) SEP (bot(fun____error),4); (0x1000080a8,8) SEP (RSP_0,8); (0x1000080a8,8) SEP ([0x100004010,8]_0,8); (0x1000080a8,8) SEP ((RSP_0 -64 8),8); (0x1000080a8,8) SEP ((RSP_0 -64 16),8); (0x1000080a8,8) SEP ((RSP_0 -64 24),8); (0x1000080a8,8) SEP ((RSP_0 -64 32),8); (0x1000080a8,8) SEP ((RSP_0 -64 40),8); (0x1000080a8,8) SEP ((RSP_0 -64 48),8); (0x1000080a8,8) SEP ((RSP_0 -64 56),8); (0x1000080a8,8) SEP ((RSP_0 -64 0x8ac),4); (0x1000080a8,8) SEP ((RSP_0 -64 0x8c8),16); (0x1000080a8,8) SEP ((RSP_0 -64 0x8d8),16); (0x1000080a8,8) SEP ((RSP_0 -64 0x8e8),16); (0x1000080a8,8) SEP ((RSP_0 -64 0x8f8),16); (0x1000080a8,8) SEP ((RSP_0 -64 0x908),16); (0x1000080a8,8) SEP ((RSP_0 -64 0x918),16); (0x1000080a8,8) SEP ((RSP_0 -64 0x928),16); (0x1000080a8,8) SEP ((RSP_0 -64 0x938),16); (0x1000080a8,8) SEP ((RSP_0 -64 0x93c),4); (0x1000080a8,8) SEP ((RSP_0 -64 0x940),4); (0x1000080a8,8) SEP ((RSP_0 -64 0x948),8); (0x1000080a8,8) SEP ((RSP_0 -64 0x94c),4); (0x1000080a8,8) SEP ((RSP_0 -64 0x958),8); (0x1000080a8,8) SEP ((RSP_0 -64 0x960),8); (0x1000080a8,8) SEP ((RSP_0 -64 0x968),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003950: MOV RDX, QWORD PTR [RIP + 18257] 7"
 Post  "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003957"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003957: MOV EDI, R14D 3"
 Post  "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000395a"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "10000395a: ExternalCall fun__read 5"
 Post  "RAX = bot(fun__read) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 FunctionConstraints "PRESERVES fun__read {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[0x100004008,8];[0x100004010,8];[0x1000080a0,8];[0x1000080a8,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 0x8ac),4];[(RSP_0 -64 0x8c8),16];[(RSP_0 -64 0x8d8),16];[(RSP_0 -64 0x8e8),16];[(RSP_0 -64 0x8f8),16];[(RSP_0 -64 0x908),16];[(RSP_0 -64 0x918),16];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x93c),4];[(RSP_0 -64 0x940),4];[(RSP_0 -64 0x948),8];[(RSP_0 -64 0x94c),4];[(RSP_0 -64 0x958),8];[(RSP_0 -64 0x960),8];[(RSP_0 -64 0x968),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000395f"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "10000395f: MOV R15, RAX 3"
 Post  "RAX = bot(fun__read) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003962"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003962: TEST R15D, R15D 3"
 Post  "RAX = bot(fun__read) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003965"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003965: JE 4294982428 6"
 Post  "RAX = bot(fun__read) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003801, blockId == 25 ##
######################################
*)

htriple "ht_10000397a"
 Separations "(0x1000080a0,8) SEP (bot(fun____error),4); (0x1000080a0,8) SEP (RSP_0,8); (0x1000080a0,8) SEP ([0x100004010,8]_0,8); (0x1000080a0,8) SEP ((RSP_0 -64 8),8); (0x1000080a0,8) SEP ((RSP_0 -64 16),8); (0x1000080a0,8) SEP ((RSP_0 -64 24),8); (0x1000080a0,8) SEP ((RSP_0 -64 32),8); (0x1000080a0,8) SEP ((RSP_0 -64 40),8); (0x1000080a0,8) SEP ((RSP_0 -64 48),8); (0x1000080a0,8) SEP ((RSP_0 -64 56),8); (0x1000080a0,8) SEP ((RSP_0 -64 0x8ac),4); (0x1000080a0,8) SEP ((RSP_0 -64 0x8c8),16); (0x1000080a0,8) SEP ((RSP_0 -64 0x8d8),16); (0x1000080a0,8) SEP ((RSP_0 -64 0x8e8),16); (0x1000080a0,8) SEP ((RSP_0 -64 0x8f8),16); (0x1000080a0,8) SEP ((RSP_0 -64 0x908),16); (0x1000080a0,8) SEP ((RSP_0 -64 0x918),16); (0x1000080a0,8) SEP ((RSP_0 -64 0x928),16); (0x1000080a0,8) SEP ((RSP_0 -64 0x938),16); (0x1000080a0,8) SEP ((RSP_0 -64 0x93c),4); (0x1000080a0,8) SEP ((RSP_0 -64 0x940),4); (0x1000080a0,8) SEP ((RSP_0 -64 0x948),8); (0x1000080a0,8) SEP ((RSP_0 -64 0x94c),4); (0x1000080a0,8) SEP ((RSP_0 -64 0x958),8); (0x1000080a0,8) SEP ((RSP_0 -64 0x960),8); (0x1000080a0,8) SEP ((RSP_0 -64 0x968),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "10000397a: MOV R12, QWORD PTR [RIP + 18207] 7"
 Post  "RAX = bot(fun__read) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003981"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003981: MOV EDX, EBX 2"
 Post  "RAX = bot(fun__read) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003983"
 Separations "((RSP_0 -64 0x94c),4) SEP (bot(fun____error),4); ((RSP_0 -64 0x94c),4) SEP ([0x100004010,8]_0,8); ((RSP_0 -64 0x94c),4) SEP (0x100004000,8); ((RSP_0 -64 0x94c),4) SEP (0x100004008,8); ((RSP_0 -64 0x94c),4) SEP (0x100004010,8); ((RSP_0 -64 0x94c),4) SEP (0x1000080a0,8); ((RSP_0 -64 0x94c),4) SEP (0x1000080a8,8); ((RSP_0 -64 0x94c),4) SEP (0x10000a0c0,8); ((RSP_0 -64 0x94c),4) SEP (0x10000a0c8,8); ((RSP_0 -64 0x94c),4) SEP (0x10000a0d0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003983: MOV DWORD PTR [RBP - 2372], R14D 7"
 Post  "RAX = bot(fun__read) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003801, blockId == 26 ##
######################################
*)

htriple "ht_100003993"
 Separations "(0x100004008,8) SEP (bot(fun____error),4); (0x100004008,8) SEP (RSP_0,8); (0x100004008,8) SEP ([0x100004010,8]_0,8); (0x100004008,8) SEP ((RSP_0 -64 8),8); (0x100004008,8) SEP ((RSP_0 -64 16),8); (0x100004008,8) SEP ((RSP_0 -64 24),8); (0x100004008,8) SEP ((RSP_0 -64 32),8); (0x100004008,8) SEP ((RSP_0 -64 40),8); (0x100004008,8) SEP ((RSP_0 -64 48),8); (0x100004008,8) SEP ((RSP_0 -64 56),8); (0x100004008,8) SEP ((RSP_0 -64 0x8ac),4); (0x100004008,8) SEP ((RSP_0 -64 0x8c8),16); (0x100004008,8) SEP ((RSP_0 -64 0x8d8),16); (0x100004008,8) SEP ((RSP_0 -64 0x8e8),16); (0x100004008,8) SEP ((RSP_0 -64 0x8f8),16); (0x100004008,8) SEP ((RSP_0 -64 0x908),16); (0x100004008,8) SEP ((RSP_0 -64 0x918),16); (0x100004008,8) SEP ((RSP_0 -64 0x928),16); (0x100004008,8) SEP ((RSP_0 -64 0x938),16); (0x100004008,8) SEP ((RSP_0 -64 0x93c),4); (0x100004008,8) SEP ((RSP_0 -64 0x940),4); (0x100004008,8) SEP ((RSP_0 -64 0x948),8); (0x100004008,8) SEP ((RSP_0 -64 0x94c),4); (0x100004008,8) SEP ((RSP_0 -64 0x958),8); (0x100004008,8) SEP ((RSP_0 -64 0x960),8); (0x100004008,8) SEP ((RSP_0 -64 0x968),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003993: MOV RAX, QWORD PTR [RIP + 1646] 7"
 Post  "RAX = [0x100004008,8]_0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000399a"
 Separations ""
 Assertions  ""
 Pre   "RAX = [0x100004008,8]_0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "10000399a: CMP DWORD PTR [RAX], 1 3"
 Post  "RAX = [0x100004008,8]_0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000399d"
 Separations ""
 Assertions  ""
 Pre   "RAX = [0x100004008,8]_0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "10000399d: JE 4294982109 2"
 Post  "RAX = [0x100004008,8]_0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003801, blockId == 27 ##
######################################
*)

htriple "ht_1000039dd"
 Separations ""
 Assertions  "(R12,1) SEP (RSP_0,8); (R12,1) SEP ((RSP_0 -64 8),8); (R12,1) SEP ((RSP_0 -64 16),8); (R12,1) SEP ((RSP_0 -64 24),8); (R12,1) SEP ((RSP_0 -64 32),8); (R12,1) SEP ((RSP_0 -64 40),8); (R12,1) SEP ((RSP_0 -64 48),8); (R12,1) SEP ((RSP_0 -64 56),8); (R12,1) SEP ((RSP_0 -64 0x8ac),4); (R12,1) SEP ((RSP_0 -64 0x8c8),16); (R12,1) SEP ((RSP_0 -64 0x8d8),16); (R12,1) SEP ((RSP_0 -64 0x8e8),16); (R12,1) SEP ((RSP_0 -64 0x8f8),16); (R12,1) SEP ((RSP_0 -64 0x908),16); (R12,1) SEP ((RSP_0 -64 0x918),16); (R12,1) SEP ((RSP_0 -64 0x928),16); (R12,1) SEP ((RSP_0 -64 0x938),16); (R12,1) SEP ((RSP_0 -64 0x93c),4); (R12,1) SEP ((RSP_0 -64 0x940),4); (R12,1) SEP ((RSP_0 -64 0x948),8); (R12,1) SEP ((RSP_0 -64 0x94c),4); (R12,1) SEP ((RSP_0 -64 0x958),8); (R12,1) SEP ((RSP_0 -64 0x960),8); (R12,1) SEP ((RSP_0 -64 0x968),8)"
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "1000039dd: MOVZX EDI, BYTE PTR [R12] 5"
 Post  "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000039e2"
 Separations "((RSP_0 -64 0x940),4) SEP (bot(fun____error),4); ((RSP_0 -64 0x940),4) SEP ([0x100004010,8]_0,8); ((RSP_0 -64 0x940),4) SEP (0x100004000,8); ((RSP_0 -64 0x940),4) SEP (0x100004008,8); ((RSP_0 -64 0x940),4) SEP (0x100004010,8); ((RSP_0 -64 0x940),4) SEP (0x1000080a0,8); ((RSP_0 -64 0x940),4) SEP (0x1000080a8,8); ((RSP_0 -64 0x940),4) SEP (0x10000a0c0,8); ((RSP_0 -64 0x940),4) SEP (0x10000a0c8,8); ((RSP_0 -64 0x940),4) SEP (0x10000a0d0,8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "1000039e2: MOV DWORD PTR [RBP - 2360], EDI 6"
 Post  "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000039e8"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "1000039e8: MOV R14D, 1 6"
 Post  "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R14 = 1 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000039ee"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R14 = 1 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "1000039ee: JMP 4294982243 2"
 Post  "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R14 = 1 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003801, blockId == 28 ##
######################################
*)

htriple "ht_10000399f"
 Separations ""
 Assertions  ""
 Pre   "RAX = [0x100004008,8]_0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "10000399f: MOV EBX, EDX 2"
 Post  "RAX = [0x100004008,8]_0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000039a1"
 Separations ""
 Assertions  ""
 Pre   "RAX = [0x100004008,8]_0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "1000039a1: MOV EDX, R15D 3"
 Post  "RAX = [0x100004008,8]_0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000039a4"
 Separations ""
 Assertions  ""
 Pre   "RAX = [0x100004008,8]_0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "1000039a4: LEA RDI, [RBP - 2360] 7"
 Post  "RAX = [0x100004008,8]_0 ; RDI = (RSP_0 -64 0x940) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000039ab"
 Separations ""
 Assertions  ""
 Pre   "RAX = [0x100004008,8]_0 ; RDI = (RSP_0 -64 0x940) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "1000039ab: MOV RSI, R12 3"
 Post  "RAX = [0x100004008,8]_0 ; RDI = (RSP_0 -64 0x940) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000039ae"
 Separations ""
 Assertions  ""
 Pre   "RAX = [0x100004008,8]_0 ; RDI = (RSP_0 -64 0x940) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "1000039ae: LEA RCX, [RBP - 2352] 7"
 Post  "RAX = [0x100004008,8]_0 ; RCX = (RSP_0 -64 0x938) ; RDI = (RSP_0 -64 0x940) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000039b5"
 Separations ""
 Assertions  ""
 Pre   "RAX = [0x100004008,8]_0 ; RCX = (RSP_0 -64 0x938) ; RDI = (RSP_0 -64 0x940) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "1000039b5: ExternalCall fun__mbrtowc 5"
 Post  "RAX = bot(fun__mbrtowc) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 FunctionConstraints "PRESERVES fun__mbrtowc {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[0x100004008,8];[0x100004010,8];[0x1000080a0,8];[0x1000080a8,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 0x8ac),4];[(RSP_0 -64 0x8c8),16];[(RSP_0 -64 0x8d8),16];[(RSP_0 -64 0x8e8),16];[(RSP_0 -64 0x8f8),16];[(RSP_0 -64 0x908),16];[(RSP_0 -64 0x918),16];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x93c),4];[(RSP_0 -64 0x940),4];[(RSP_0 -64 0x948),8];[(RSP_0 -64 0x94c),4];[(RSP_0 -64 0x958),8];[(RSP_0 -64 0x960),8];[(RSP_0 -64 0x968),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000039ba"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__mbrtowc) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "1000039ba: CMP RAX, 18446744073709551615 4"
 Post  "RAX = bot(fun__mbrtowc) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000039be"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__mbrtowc) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "1000039be: JE 4294982128 2"
 Post  "RAX = bot(fun__mbrtowc) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003801, blockId == 29 ##
######################################
*)

htriple "ht_1000039c0"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__mbrtowc) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "1000039c0: MOV R14, RAX 3"
 Post  "RAX = bot(fun__mbrtowc) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__mbrtowc) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000039c3"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__mbrtowc) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__mbrtowc) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "1000039c3: TEST RAX, RAX 3"
 Post  "RAX = bot(fun__mbrtowc) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__mbrtowc) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000039c6"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__mbrtowc) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__mbrtowc) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "1000039c6: MOV EDX, EBX 2"
 Post  "RAX = bot(fun__mbrtowc) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__mbrtowc) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000039c8"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__mbrtowc) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__mbrtowc) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "1000039c8: JE 4294982231 6"
 Post  "RAX = bot(fun__mbrtowc) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__mbrtowc) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003801, blockId == 30 ##
######################################
*)

htriple "ht_1000039f0"
 Separations "((RSP_0 -64 0x93c),4) SEP (bot(fun____error),4); ((RSP_0 -64 0x93c),4) SEP ([0x100004010,8]_0,8); ((RSP_0 -64 0x93c),4) SEP (0x100004000,8); ((RSP_0 -64 0x93c),4) SEP (0x100004008,8); ((RSP_0 -64 0x93c),4) SEP (0x100004010,8); ((RSP_0 -64 0x93c),4) SEP (0x1000080a0,8); ((RSP_0 -64 0x93c),4) SEP (0x1000080a8,8); ((RSP_0 -64 0x93c),4) SEP (0x10000a0c0,8); ((RSP_0 -64 0x93c),4) SEP (0x10000a0c8,8); ((RSP_0 -64 0x93c),4) SEP (0x10000a0d0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun__mbrtowc) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "1000039f0: CMP DWORD PTR [RBP - 2356], 0 7"
 Post  "RAX = bot(fun__mbrtowc) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000039f7"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__mbrtowc) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "1000039f7: MOV EDX, EBX 2"
 Post  "RAX = bot(fun__mbrtowc) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000039f9"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__mbrtowc) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "1000039f9: JE 4294982375 6"
 Post  "RAX = bot(fun__mbrtowc) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003801, blockId == 31 ##
######################################
*)

htriple "ht_1000039ce"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__mbrtowc) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__mbrtowc) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "1000039ce: CMP R14, 18446744073709551614 4"
 Post  "RAX = bot(fun__mbrtowc) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__mbrtowc) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000039d2"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__mbrtowc) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__mbrtowc) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "1000039d2: JNE 4294982237 6"
 Post  "RAX = bot(fun__mbrtowc) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__mbrtowc) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003801, blockId == 32 ##
######################################
*)

htriple "ht_100003a57"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__mbrtowc) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__mbrtowc) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003a57: MOV R14D, 1 6"
 Post  "RAX = bot(fun__mbrtowc) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R14 = 1 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003801, blockId == 33 ##
######################################
*)

htriple "ht_1000039d8"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__mbrtowc) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__mbrtowc) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "1000039d8: JMP 4294982414 5"
 Post  "RAX = bot(fun__mbrtowc) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__mbrtowc) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003b0e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__mbrtowc) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__mbrtowc) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003b0e: MOV EBX, EDX 2"
 Post  "RAX = bot(fun__mbrtowc) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__mbrtowc) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003b10"
 Separations "((RSP_0 -64 0x94c),4) SEP (bot(fun____error),4); ((RSP_0 -64 0x94c),4) SEP ([0x100004010,8]_0,8); ((RSP_0 -64 0x94c),4) SEP (0x100004000,8); ((RSP_0 -64 0x94c),4) SEP (0x100004008,8); ((RSP_0 -64 0x94c),4) SEP (0x100004010,8); ((RSP_0 -64 0x94c),4) SEP (0x1000080a0,8); ((RSP_0 -64 0x94c),4) SEP (0x1000080a8,8); ((RSP_0 -64 0x94c),4) SEP (0x10000a0c0,8); ((RSP_0 -64 0x94c),4) SEP (0x10000a0c8,8); ((RSP_0 -64 0x94c),4) SEP (0x10000a0d0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun__mbrtowc) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__mbrtowc) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003b10: MOV R14D, DWORD PTR [RBP - 2372] 7"
 Post  "RAX = bot(fun__mbrtowc) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003b17"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__mbrtowc) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003b17: JMP 4294981961 5"
 Post  "RAX = bot(fun__mbrtowc) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003801, blockId == 34 ##
######################################
*)

htriple "ht_100003a5d"
 Separations "((RSP_0 -64 0x940),4) SEP (bot(fun____error),4); ((RSP_0 -64 0x940),4) SEP ([0x100004010,8]_0,8); ((RSP_0 -64 0x940),4) SEP (0x100004000,8); ((RSP_0 -64 0x940),4) SEP (0x100004008,8); ((RSP_0 -64 0x940),4) SEP (0x100004010,8); ((RSP_0 -64 0x940),4) SEP (0x1000080a0,8); ((RSP_0 -64 0x940),4) SEP (0x1000080a8,8); ((RSP_0 -64 0x940),4) SEP (0x10000a0c0,8); ((RSP_0 -64 0x940),4) SEP (0x10000a0c8,8); ((RSP_0 -64 0x940),4) SEP (0x10000a0d0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun__mbrtowc) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003a5d: MOV EDI, DWORD PTR [RBP - 2360] 6"
 Post  "RAX = bot(fun__mbrtowc) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003801, blockId == 35 ##
######################################
*)

htriple "ht_1000039ff"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "1000039ff: XORPS XMM0, XMM0 3"
 Post  "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003a02"
 Separations "((RSP_0 -64 0x8c8),16) SEP (bot(fun____error),4); ((RSP_0 -64 0x8c8),16) SEP ([0x100004010,8]_0,8); ((RSP_0 -64 0x8c8),16) SEP (0x100004000,8); ((RSP_0 -64 0x8c8),16) SEP (0x100004008,8); ((RSP_0 -64 0x8c8),16) SEP (0x100004010,8); ((RSP_0 -64 0x8c8),16) SEP (0x1000080a0,8); ((RSP_0 -64 0x8c8),16) SEP (0x1000080a8,8); ((RSP_0 -64 0x8c8),16) SEP (0x10000a0c0,8); ((RSP_0 -64 0x8c8),16) SEP (0x10000a0c8,8); ((RSP_0 -64 0x8c8),16) SEP (0x10000a0d0,8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003a02: MOVAPS XMMWORD PTR [RBP - 2240], XMM0 7"
 Post  "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003a09"
 Separations "((RSP_0 -64 0x8d8),16) SEP (bot(fun____error),4); ((RSP_0 -64 0x8d8),16) SEP ([0x100004010,8]_0,8); ((RSP_0 -64 0x8d8),16) SEP (0x100004000,8); ((RSP_0 -64 0x8d8),16) SEP (0x100004008,8); ((RSP_0 -64 0x8d8),16) SEP (0x100004010,8); ((RSP_0 -64 0x8d8),16) SEP (0x1000080a0,8); ((RSP_0 -64 0x8d8),16) SEP (0x1000080a8,8); ((RSP_0 -64 0x8d8),16) SEP (0x10000a0c0,8); ((RSP_0 -64 0x8d8),16) SEP (0x10000a0c8,8); ((RSP_0 -64 0x8d8),16) SEP (0x10000a0d0,8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003a09: MOVAPS XMMWORD PTR [RBP - 2256], XMM0 7"
 Post  "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003a10"
 Separations "((RSP_0 -64 0x8e8),16) SEP (bot(fun____error),4); ((RSP_0 -64 0x8e8),16) SEP ([0x100004010,8]_0,8); ((RSP_0 -64 0x8e8),16) SEP (0x100004000,8); ((RSP_0 -64 0x8e8),16) SEP (0x100004008,8); ((RSP_0 -64 0x8e8),16) SEP (0x100004010,8); ((RSP_0 -64 0x8e8),16) SEP (0x1000080a0,8); ((RSP_0 -64 0x8e8),16) SEP (0x1000080a8,8); ((RSP_0 -64 0x8e8),16) SEP (0x10000a0c0,8); ((RSP_0 -64 0x8e8),16) SEP (0x10000a0c8,8); ((RSP_0 -64 0x8e8),16) SEP (0x10000a0d0,8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003a10: MOVAPS XMMWORD PTR [RBP - 2272], XMM0 7"
 Post  "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003a17"
 Separations "((RSP_0 -64 0x8f8),16) SEP (bot(fun____error),4); ((RSP_0 -64 0x8f8),16) SEP ([0x100004010,8]_0,8); ((RSP_0 -64 0x8f8),16) SEP (0x100004000,8); ((RSP_0 -64 0x8f8),16) SEP (0x100004008,8); ((RSP_0 -64 0x8f8),16) SEP (0x100004010,8); ((RSP_0 -64 0x8f8),16) SEP (0x1000080a0,8); ((RSP_0 -64 0x8f8),16) SEP (0x1000080a8,8); ((RSP_0 -64 0x8f8),16) SEP (0x10000a0c0,8); ((RSP_0 -64 0x8f8),16) SEP (0x10000a0c8,8); ((RSP_0 -64 0x8f8),16) SEP (0x10000a0d0,8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003a17: MOVAPS XMMWORD PTR [RBP - 2288], XMM0 7"
 Post  "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003a1e"
 Separations "((RSP_0 -64 0x908),16) SEP (bot(fun____error),4); ((RSP_0 -64 0x908),16) SEP ([0x100004010,8]_0,8); ((RSP_0 -64 0x908),16) SEP (0x100004000,8); ((RSP_0 -64 0x908),16) SEP (0x100004008,8); ((RSP_0 -64 0x908),16) SEP (0x100004010,8); ((RSP_0 -64 0x908),16) SEP (0x1000080a0,8); ((RSP_0 -64 0x908),16) SEP (0x1000080a8,8); ((RSP_0 -64 0x908),16) SEP (0x10000a0c0,8); ((RSP_0 -64 0x908),16) SEP (0x10000a0c8,8); ((RSP_0 -64 0x908),16) SEP (0x10000a0d0,8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003a1e: MOVAPS XMMWORD PTR [RBP - 2304], XMM0 7"
 Post  "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003a25"
 Separations "((RSP_0 -64 0x918),16) SEP (bot(fun____error),4); ((RSP_0 -64 0x918),16) SEP ([0x100004010,8]_0,8); ((RSP_0 -64 0x918),16) SEP (0x100004000,8); ((RSP_0 -64 0x918),16) SEP (0x100004008,8); ((RSP_0 -64 0x918),16) SEP (0x100004010,8); ((RSP_0 -64 0x918),16) SEP (0x1000080a0,8); ((RSP_0 -64 0x918),16) SEP (0x1000080a8,8); ((RSP_0 -64 0x918),16) SEP (0x10000a0c0,8); ((RSP_0 -64 0x918),16) SEP (0x10000a0c8,8); ((RSP_0 -64 0x918),16) SEP (0x10000a0d0,8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003a25: MOVAPS XMMWORD PTR [RBP - 2320], XMM0 7"
 Post  "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003a2c"
 Separations "((RSP_0 -64 0x928),16) SEP (bot(fun____error),4); ((RSP_0 -64 0x928),16) SEP ([0x100004010,8]_0,8); ((RSP_0 -64 0x928),16) SEP (0x100004000,8); ((RSP_0 -64 0x928),16) SEP (0x100004008,8); ((RSP_0 -64 0x928),16) SEP (0x100004010,8); ((RSP_0 -64 0x928),16) SEP (0x1000080a0,8); ((RSP_0 -64 0x928),16) SEP (0x1000080a8,8); ((RSP_0 -64 0x928),16) SEP (0x10000a0c0,8); ((RSP_0 -64 0x928),16) SEP (0x10000a0c8,8); ((RSP_0 -64 0x928),16) SEP (0x10000a0d0,8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003a2c: MOVAPS XMMWORD PTR [RBP - 2336], XMM0 7"
 Post  "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003a33"
 Separations "((RSP_0 -64 0x938),16) SEP (bot(fun____error),4); ((RSP_0 -64 0x938),16) SEP ([0x100004010,8]_0,8); ((RSP_0 -64 0x938),16) SEP (0x100004000,8); ((RSP_0 -64 0x938),16) SEP (0x100004008,8); ((RSP_0 -64 0x938),16) SEP (0x100004010,8); ((RSP_0 -64 0x938),16) SEP (0x1000080a0,8); ((RSP_0 -64 0x938),16) SEP (0x1000080a8,8); ((RSP_0 -64 0x938),16) SEP (0x10000a0c0,8); ((RSP_0 -64 0x938),16) SEP (0x10000a0c8,8); ((RSP_0 -64 0x938),16) SEP (0x10000a0d0,8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003a33: MOVAPS XMMWORD PTR [RBP - 2352], XMM0 7"
 Post  "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003a3a"
 Separations ""
 Assertions  "(R12,1) SEP (RSP_0,8); (R12,1) SEP ((RSP_0 -64 8),8); (R12,1) SEP ((RSP_0 -64 16),8); (R12,1) SEP ((RSP_0 -64 24),8); (R12,1) SEP ((RSP_0 -64 32),8); (R12,1) SEP ((RSP_0 -64 40),8); (R12,1) SEP ((RSP_0 -64 48),8); (R12,1) SEP ((RSP_0 -64 56),8); (R12,1) SEP ((RSP_0 -64 0x8ac),4); (R12,1) SEP ((RSP_0 -64 0x8c8),16); (R12,1) SEP ((RSP_0 -64 0x8d8),16); (R12,1) SEP ((RSP_0 -64 0x8e8),16); (R12,1) SEP ((RSP_0 -64 0x8f8),16); (R12,1) SEP ((RSP_0 -64 0x908),16); (R12,1) SEP ((RSP_0 -64 0x918),16); (R12,1) SEP ((RSP_0 -64 0x928),16); (R12,1) SEP ((RSP_0 -64 0x938),16); (R12,1) SEP ((RSP_0 -64 0x93c),4); (R12,1) SEP ((RSP_0 -64 0x940),4); (R12,1) SEP ((RSP_0 -64 0x948),8); (R12,1) SEP ((RSP_0 -64 0x94c),4); (R12,1) SEP ((RSP_0 -64 0x958),8); (R12,1) SEP ((RSP_0 -64 0x960),8); (R12,1) SEP ((RSP_0 -64 0x968),8)"
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003a3a: MOVZX EDI, BYTE PTR [R12] 5"
 Post  "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003a3f"
 Separations "((RSP_0 -64 0x940),4) SEP (bot(fun____error),4); ((RSP_0 -64 0x940),4) SEP ([0x100004010,8]_0,8); ((RSP_0 -64 0x940),4) SEP (0x100004000,8); ((RSP_0 -64 0x940),4) SEP (0x100004008,8); ((RSP_0 -64 0x940),4) SEP (0x100004010,8); ((RSP_0 -64 0x940),4) SEP (0x1000080a0,8); ((RSP_0 -64 0x940),4) SEP (0x1000080a8,8); ((RSP_0 -64 0x940),4) SEP (0x10000a0c0,8); ((RSP_0 -64 0x940),4) SEP (0x10000a0c8,8); ((RSP_0 -64 0x940),4) SEP (0x10000a0d0,8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003a3f: MOV DWORD PTR [RBP - 2360], EDI 6"
 Post  "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003a45"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003a45: MOV R14D, 1 6"
 Post  "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R14 = 1 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003a4b"
 Separations "((RSP_0 -64 0x93c),4) SEP (bot(fun____error),4); ((RSP_0 -64 0x93c),4) SEP ([0x100004010,8]_0,8); ((RSP_0 -64 0x93c),4) SEP (0x100004000,8); ((RSP_0 -64 0x93c),4) SEP (0x100004008,8); ((RSP_0 -64 0x93c),4) SEP (0x100004010,8); ((RSP_0 -64 0x93c),4) SEP (0x1000080a0,8); ((RSP_0 -64 0x93c),4) SEP (0x1000080a8,8); ((RSP_0 -64 0x93c),4) SEP (0x10000a0c0,8); ((RSP_0 -64 0x93c),4) SEP (0x10000a0c8,8); ((RSP_0 -64 0x93c),4) SEP (0x10000a0d0,8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R14 = 1 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003a4b: MOV DWORD PTR [RBP - 2356], 1 10"
 Post  "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R14 = 1 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x93c),4] = 1"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003a55"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R14 = 1 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x93c),4] = 1"
 Instruction "100003a55: JMP 4294982243 2"
 Post  "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R14 = 1 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x93c),4] = 1"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003801, blockId == 36 ##
######################################
*)

htriple "ht_100003ae7"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__mbrtowc) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003ae7: ExternalCall fun____error 5"
 Post  "RAX = bot(fun____error) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 FunctionConstraints "PRESERVES fun____error {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[0x100004008,8];[0x100004010,8];[0x1000080a0,8];[0x1000080a8,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 0x8ac),4];[(RSP_0 -64 0x8c8),16];[(RSP_0 -64 0x8d8),16];[(RSP_0 -64 0x8e8),16];[(RSP_0 -64 0x8f8),16];[(RSP_0 -64 0x908),16];[(RSP_0 -64 0x918),16];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x93c),4];[(RSP_0 -64 0x940),4];[(RSP_0 -64 0x948),8];[(RSP_0 -64 0x94c),4];[(RSP_0 -64 0x958),8];[(RSP_0 -64 0x960),8];[(RSP_0 -64 0x968),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003aec"
 Separations "(bot(fun____error),4) SEP (RSP_0,8); (bot(fun____error),4) SEP ([0x100004010,8]_0,8); (bot(fun____error),4) SEP (0x100004000,8); (bot(fun____error),4) SEP (0x100004008,8); (bot(fun____error),4) SEP (0x100004010,8); (bot(fun____error),4) SEP (0x1000080a0,8); (bot(fun____error),4) SEP (0x1000080a8,8); (bot(fun____error),4) SEP (0x10000a0b0,4); (bot(fun____error),4) SEP (0x10000a0b8,4); (bot(fun____error),4) SEP (0x10000a0c0,8); (bot(fun____error),4) SEP (0x10000a0c8,8); (bot(fun____error),4) SEP (0x10000a0d0,8); (bot(fun____error),4) SEP ((RSP_0 -64 8),8); (bot(fun____error),4) SEP ((RSP_0 -64 16),8); (bot(fun____error),4) SEP ((RSP_0 -64 24),8); (bot(fun____error),4) SEP ((RSP_0 -64 32),8); (bot(fun____error),4) SEP ((RSP_0 -64 40),8); (bot(fun____error),4) SEP ((RSP_0 -64 48),8); (bot(fun____error),4) SEP ((RSP_0 -64 56),8); (bot(fun____error),4) SEP ((RSP_0 -64 0x8ac),4); (bot(fun____error),4) SEP ((RSP_0 -64 0x8c8),16); (bot(fun____error),4) SEP ((RSP_0 -64 0x8d8),16); (bot(fun____error),4) SEP ((RSP_0 -64 0x8e8),16); (bot(fun____error),4) SEP ((RSP_0 -64 0x8f8),16); (bot(fun____error),4) SEP ((RSP_0 -64 0x908),16); (bot(fun____error),4) SEP ((RSP_0 -64 0x918),16); (bot(fun____error),4) SEP ((RSP_0 -64 0x928),16); (bot(fun____error),4) SEP ((RSP_0 -64 0x938),16); (bot(fun____error),4) SEP ((RSP_0 -64 0x93c),4); (bot(fun____error),4) SEP ((RSP_0 -64 0x940),4); (bot(fun____error),4) SEP ((RSP_0 -64 0x948),8); (bot(fun____error),4) SEP ((RSP_0 -64 0x94c),4); (bot(fun____error),4) SEP ((RSP_0 -64 0x958),8); (bot(fun____error),4) SEP ((RSP_0 -64 0x960),8); (bot(fun____error),4) SEP ((RSP_0 -64 0x968),8)"
 Assertions  ""
 Pre   "RAX = bot(fun____error) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003aec: MOV DWORD PTR [RAX], 92 6"
 Post  "RAX = bot(fun____error) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003af2"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun____error) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003af2: LEA RDI, [RIP + 1158] 7"
 Post  "RAX = bot(fun____error) ; RDI = 0x100003f7f ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003af9"
 Separations "((RSP_0 -64 0x948),8) SEP (bot(fun____error),4); ((RSP_0 -64 0x948),8) SEP ([0x100004010,8]_0,8); ((RSP_0 -64 0x948),8) SEP (0x100004000,8); ((RSP_0 -64 0x948),8) SEP (0x100004008,8); ((RSP_0 -64 0x948),8) SEP (0x100004010,8); ((RSP_0 -64 0x948),8) SEP (0x1000080a0,8); ((RSP_0 -64 0x948),8) SEP (0x1000080a8,8); ((RSP_0 -64 0x948),8) SEP (0x10000a0c0,8); ((RSP_0 -64 0x948),8) SEP (0x10000a0c8,8); ((RSP_0 -64 0x948),8) SEP (0x10000a0d0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun____error) ; RDI = 0x100003f7f ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003af9: MOV RSI, QWORD PTR [RBP - 2368] 7"
 Post  "RAX = bot(fun____error) ; RDI = 0x100003f7f ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003b00"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun____error) ; RDI = 0x100003f7f ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003b00: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RDI = 0x100003f7f ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003b02"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RDI = 0x100003f7f ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003b02: ExternalCall fun__warn 5"
 Post  "RAX = bot(fun__warn) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 FunctionConstraints "PRESERVES fun__warn {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[0x100004008,8];[0x100004010,8];[0x1000080a0,8];[0x1000080a8,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 0x8ac),4];[(RSP_0 -64 0x8c8),16];[(RSP_0 -64 0x8d8),16];[(RSP_0 -64 0x8e8),16];[(RSP_0 -64 0x8f8),16];[(RSP_0 -64 0x908),16];[(RSP_0 -64 0x918),16];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x93c),4];[(RSP_0 -64 0x940),4];[(RSP_0 -64 0x948),8];[(RSP_0 -64 0x94c),4];[(RSP_0 -64 0x958),8];[(RSP_0 -64 0x960),8];[(RSP_0 -64 0x968),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003b07"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__warn) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003b07: MOV EDX, EBX 2"
 Post  "RAX = bot(fun__warn) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003b09"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__warn) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003b09: JMP 4294982143 5"
 Post  "RAX = bot(fun__warn) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003801, blockId == 37 ##
######################################
*)

htriple "ht_100003a63"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003a63: SUB R15D, R14D 3"
 Post  "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003a66"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003a66: XOR EBX, EBX 2"
 Post  "RBX = 0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003a68"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003a68: CMP EDI, 10 3"
 Post  "RBX = 0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003a6b"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003a6b: SETE BL 3"
 Post  "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003a6e"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003a6e: CMP EDI, 127 3"
 Post  "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003a71"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003a71: JA 4294982281 2"
 Post  "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003801, blockId == 38 ##
######################################
*)

htriple "ht_100003a73"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003a73: MOV EAX, EDI 2"
 Post  "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003a75"
 Separations "(0x100004000,8) SEP (bot(fun____error),4); (0x100004000,8) SEP (RSP_0,8); (0x100004000,8) SEP ([0x100004010,8]_0,8); (0x100004000,8) SEP ((RSP_0 -64 8),8); (0x100004000,8) SEP ((RSP_0 -64 16),8); (0x100004000,8) SEP ((RSP_0 -64 24),8); (0x100004000,8) SEP ((RSP_0 -64 32),8); (0x100004000,8) SEP ((RSP_0 -64 40),8); (0x100004000,8) SEP ((RSP_0 -64 48),8); (0x100004000,8) SEP ((RSP_0 -64 56),8); (0x100004000,8) SEP ((RSP_0 -64 0x8ac),4); (0x100004000,8) SEP ((RSP_0 -64 0x8c8),16); (0x100004000,8) SEP ((RSP_0 -64 0x8d8),16); (0x100004000,8) SEP ((RSP_0 -64 0x8e8),16); (0x100004000,8) SEP ((RSP_0 -64 0x8f8),16); (0x100004000,8) SEP ((RSP_0 -64 0x908),16); (0x100004000,8) SEP ((RSP_0 -64 0x918),16); (0x100004000,8) SEP ((RSP_0 -64 0x928),16); (0x100004000,8) SEP ((RSP_0 -64 0x938),16); (0x100004000,8) SEP ((RSP_0 -64 0x93c),4); (0x100004000,8) SEP ((RSP_0 -64 0x940),4); (0x100004000,8) SEP ((RSP_0 -64 0x948),8); (0x100004000,8) SEP ((RSP_0 -64 0x94c),4); (0x100004000,8) SEP ((RSP_0 -64 0x958),8); (0x100004000,8) SEP ((RSP_0 -64 0x960),8); (0x100004000,8) SEP ((RSP_0 -64 0x968),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003a75: MOV RCX, QWORD PTR [RIP + 1412] 7"
 Post  "RCX = [0x100004000,8]_0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003a7c"
 Separations ""
 Assertions  "(([0x100004000,8]_0 +64 ((RAX *64 4) +64 60)),4) SEP (RSP_0,8); (([0x100004000,8]_0 +64 ((RAX *64 4) +64 60)),4) SEP ((RSP_0 -64 8),8); (([0x100004000,8]_0 +64 ((RAX *64 4) +64 60)),4) SEP ((RSP_0 -64 16),8); (([0x100004000,8]_0 +64 ((RAX *64 4) +64 60)),4) SEP ((RSP_0 -64 24),8); (([0x100004000,8]_0 +64 ((RAX *64 4) +64 60)),4) SEP ((RSP_0 -64 32),8); (([0x100004000,8]_0 +64 ((RAX *64 4) +64 60)),4) SEP ((RSP_0 -64 40),8); (([0x100004000,8]_0 +64 ((RAX *64 4) +64 60)),4) SEP ((RSP_0 -64 48),8); (([0x100004000,8]_0 +64 ((RAX *64 4) +64 60)),4) SEP ((RSP_0 -64 56),8); (([0x100004000,8]_0 +64 ((RAX *64 4) +64 60)),4) SEP ((RSP_0 -64 0x8ac),4); (([0x100004000,8]_0 +64 ((RAX *64 4) +64 60)),4) SEP ((RSP_0 -64 0x8c8),16); (([0x100004000,8]_0 +64 ((RAX *64 4) +64 60)),4) SEP ((RSP_0 -64 0x8d8),16); (([0x100004000,8]_0 +64 ((RAX *64 4) +64 60)),4) SEP ((RSP_0 -64 0x8e8),16); (([0x100004000,8]_0 +64 ((RAX *64 4) +64 60)),4) SEP ((RSP_0 -64 0x8f8),16); (([0x100004000,8]_0 +64 ((RAX *64 4) +64 60)),4) SEP ((RSP_0 -64 0x908),16); (([0x100004000,8]_0 +64 ((RAX *64 4) +64 60)),4) SEP ((RSP_0 -64 0x918),16); (([0x100004000,8]_0 +64 ((RAX *64 4) +64 60)),4) SEP ((RSP_0 -64 0x928),16); (([0x100004000,8]_0 +64 ((RAX *64 4) +64 60)),4) SEP ((RSP_0 -64 0x938),16); (([0x100004000,8]_0 +64 ((RAX *64 4) +64 60)),4) SEP ((RSP_0 -64 0x93c),4); (([0x100004000,8]_0 +64 ((RAX *64 4) +64 60)),4) SEP ((RSP_0 -64 0x940),4); (([0x100004000,8]_0 +64 ((RAX *64 4) +64 60)),4) SEP ((RSP_0 -64 0x948),8); (([0x100004000,8]_0 +64 ((RAX *64 4) +64 60)),4) SEP ((RSP_0 -64 0x94c),4); (([0x100004000,8]_0 +64 ((RAX *64 4) +64 60)),4) SEP ((RSP_0 -64 0x958),8); (([0x100004000,8]_0 +64 ((RAX *64 4) +64 60)),4) SEP ((RSP_0 -64 0x960),8); (([0x100004000,8]_0 +64 ((RAX *64 4) +64 60)),4) SEP ((RSP_0 -64 0x968),8)"
 Pre   "RCX = [0x100004000,8]_0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003a7c: MOV EAX, DWORD PTR [RCX + RAX * 4 + 60] 4"
 Post  "RCX = [0x100004000,8]_0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003a80"
 Separations ""
 Assertions  ""
 Pre   "RCX = [0x100004000,8]_0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003a80: MOV ECX, 16384 5"
 Post  "RCX = 0x4000 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003a85"
 Separations ""
 Assertions  ""
 Pre   "RCX = 0x4000 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003a85: AND EAX, ECX 2"
 Post  "RCX = 0x4000 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003a87"
 Separations ""
 Assertions  ""
 Pre   "RCX = 0x4000 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003a87: JMP 4294982311 2"
 Post  "RCX = 0x4000 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003801, blockId == 39 ##
######################################
*)

htriple "ht_100003a89"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003a89: MOV ESI, 16384 5"
 Post  "RSI = 0x4000 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003a8e"
 Separations "((RSP_0 -64 0x968),8) SEP (bot(fun____error),4); ((RSP_0 -64 0x968),8) SEP ([0x100004010,8]_0,8); ((RSP_0 -64 0x968),8) SEP (0x100004000,8); ((RSP_0 -64 0x968),8) SEP (0x100004008,8); ((RSP_0 -64 0x968),8) SEP (0x100004010,8); ((RSP_0 -64 0x968),8) SEP (0x1000080a0,8); ((RSP_0 -64 0x968),8) SEP (0x1000080a8,8); ((RSP_0 -64 0x968),8) SEP (0x10000a0c0,8); ((RSP_0 -64 0x968),8) SEP (0x10000a0c8,8); ((RSP_0 -64 0x968),8) SEP (0x10000a0d0,8)"
 Assertions  ""
 Pre   "RSI = 0x4000 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003a8e: MOV QWORD PTR [RBP - 2400], R13 7"
 Post  "RSI = 0x4000 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003a95"
 Separations ""
 Assertions  ""
 Pre   "RSI = 0x4000 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003a95: MOV R13D, EDX 3"
 Post  "RSI = 0x4000 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003a98"
 Separations ""
 Assertions  ""
 Pre   "RSI = 0x4000 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003a98: ExternalCall fun____maskrune 5"
 Post  "RAX = bot(fun____maskrune) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 FunctionConstraints "PRESERVES fun____maskrune {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[0x100004008,8];[0x100004010,8];[0x1000080a0,8];[0x1000080a8,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 0x8ac),4];[(RSP_0 -64 0x8c8),16];[(RSP_0 -64 0x8d8),16];[(RSP_0 -64 0x8e8),16];[(RSP_0 -64 0x8f8),16];[(RSP_0 -64 0x908),16];[(RSP_0 -64 0x918),16];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x93c),4];[(RSP_0 -64 0x940),4];[(RSP_0 -64 0x948),8];[(RSP_0 -64 0x94c),4];[(RSP_0 -64 0x958),8];[(RSP_0 -64 0x960),8];[(RSP_0 -64 0x968),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003a9d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun____maskrune) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003a9d: MOV EDX, R13D 3"
 Post  "RAX = bot(fun____maskrune) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003aa0"
 Separations "((RSP_0 -64 0x968),8) SEP (bot(fun____error),4); ((RSP_0 -64 0x968),8) SEP ([0x100004010,8]_0,8); ((RSP_0 -64 0x968),8) SEP (0x100004000,8); ((RSP_0 -64 0x968),8) SEP (0x100004008,8); ((RSP_0 -64 0x968),8) SEP (0x100004010,8); ((RSP_0 -64 0x968),8) SEP (0x1000080a0,8); ((RSP_0 -64 0x968),8) SEP (0x1000080a8,8); ((RSP_0 -64 0x968),8) SEP (0x10000a0c0,8); ((RSP_0 -64 0x968),8) SEP (0x10000a0c8,8); ((RSP_0 -64 0x968),8) SEP (0x10000a0d0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun____maskrune) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003aa0: MOV R13, QWORD PTR [RBP - 2400] 7"
 Post  "RAX = bot(fun____maskrune) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003801, blockId == 40 ##
######################################
*)

htriple "ht_100003aa7"
 Separations "((RSP_0 -64 0x960),8) SEP (bot(fun____error),4); ((RSP_0 -64 0x960),8) SEP ([0x100004010,8]_0,8); ((RSP_0 -64 0x960),8) SEP (0x100004000,8); ((RSP_0 -64 0x960),8) SEP (0x100004008,8); ((RSP_0 -64 0x960),8) SEP (0x100004010,8); ((RSP_0 -64 0x960),8) SEP (0x1000080a0,8); ((RSP_0 -64 0x960),8) SEP (0x1000080a8,8); ((RSP_0 -64 0x960),8) SEP (0x10000a0c0,8); ((RSP_0 -64 0x960),8) SEP (0x10000a0c8,8); ((RSP_0 -64 0x960),8) SEP (0x10000a0d0,8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003aa7: INC QWORD PTR [RBP - 2392] 7"
 Post  "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003aae"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003aae: ADD R12, R14 3"
 Post  "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003ab1"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003ab1: ADD R13, RBX 3"
 Post  "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003ab4"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003ab4: XOR EBX, EBX 2"
 Post  "RBX = 0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003ab6"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003ab6: TEST EAX, EAX 2"
 Post  "RBX = 0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003ab8"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003ab8: SETNE BL 3"
 Post  "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003abb"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003abb: SETE AL 3"
 Post  "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003abe"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003abe: TEST DX, DX 3"
 Post  "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003ac1"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003ac1: SETNE CL 3"
 Post  "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003ac4"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003ac4: AND CL, AL 2"
 Post  "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003ac6"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003ac6: MOVZX EAX, CL 3"
 Post  "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003ac9"
 Separations "((RSP_0 -64 0x958),8) SEP (bot(fun____error),4); ((RSP_0 -64 0x958),8) SEP ([0x100004010,8]_0,8); ((RSP_0 -64 0x958),8) SEP (0x100004000,8); ((RSP_0 -64 0x958),8) SEP (0x100004008,8); ((RSP_0 -64 0x958),8) SEP (0x100004010,8); ((RSP_0 -64 0x958),8) SEP (0x1000080a0,8); ((RSP_0 -64 0x958),8) SEP (0x1000080a8,8); ((RSP_0 -64 0x958),8) SEP (0x10000a0c0,8); ((RSP_0 -64 0x958),8) SEP (0x10000a0c8,8); ((RSP_0 -64 0x958),8) SEP (0x10000a0d0,8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003ac9: ADD QWORD PTR [RBP - 2384], RAX 7"
 Post  "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003ad0"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003ad0: MOV EDX, EBX 2"
 Post  "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003ad2"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003ad2: TEST R15D, R15D 3"
 Post  "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003ad5"
 Separations "((RSP_0 -64 0x94c),4) SEP (bot(fun____error),4); ((RSP_0 -64 0x94c),4) SEP ([0x100004010,8]_0,8); ((RSP_0 -64 0x94c),4) SEP (0x100004000,8); ((RSP_0 -64 0x94c),4) SEP (0x100004008,8); ((RSP_0 -64 0x94c),4) SEP (0x100004010,8); ((RSP_0 -64 0x94c),4) SEP (0x1000080a0,8); ((RSP_0 -64 0x94c),4) SEP (0x1000080a8,8); ((RSP_0 -64 0x94c),4) SEP (0x10000a0c0,8); ((RSP_0 -64 0x94c),4) SEP (0x10000a0c8,8); ((RSP_0 -64 0x94c),4) SEP (0x10000a0d0,8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003ad5: MOV R14D, DWORD PTR [RBP - 2372] 7"
 Post  "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003adc"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003adc: JG 4294982026 6"
 Post  "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003801, blockId == 41 ##
######################################
*)

htriple "ht_10000398a"
 Separations "(0x10000a0b8,4) SEP (bot(fun____error),4); (0x10000a0b8,4) SEP ([0x100004010,8]_0,8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "10000398a: CMP DWORD PTR [RIP + 26407], 0 7"
 Post  "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003991"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003991: JE 4294982109 2"
 Post  "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003801, blockId == 42 ##
######################################
*)

htriple "ht_100003ae2"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003ae2: JMP 4294981961 5"
 Post  "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003801, blockId == 43 ##
######################################
*)

htriple "ht_100003b25"
 Separations "(0x100004008,8) SEP (bot(fun____error),4); (0x100004008,8) SEP (RSP_0,8); (0x100004008,8) SEP ([0x100004010,8]_0,8); (0x100004008,8) SEP ((RSP_0 -64 8),8); (0x100004008,8) SEP ((RSP_0 -64 16),8); (0x100004008,8) SEP ((RSP_0 -64 24),8); (0x100004008,8) SEP ((RSP_0 -64 32),8); (0x100004008,8) SEP ((RSP_0 -64 40),8); (0x100004008,8) SEP ((RSP_0 -64 48),8); (0x100004008,8) SEP ((RSP_0 -64 56),8); (0x100004008,8) SEP ((RSP_0 -64 0x8ac),4); (0x100004008,8) SEP ((RSP_0 -64 0x8c8),16); (0x100004008,8) SEP ((RSP_0 -64 0x8d8),16); (0x100004008,8) SEP ((RSP_0 -64 0x8e8),16); (0x100004008,8) SEP ((RSP_0 -64 0x8f8),16); (0x100004008,8) SEP ((RSP_0 -64 0x908),16); (0x100004008,8) SEP ((RSP_0 -64 0x918),16); (0x100004008,8) SEP ((RSP_0 -64 0x928),16); (0x100004008,8) SEP ((RSP_0 -64 0x938),16); (0x100004008,8) SEP ((RSP_0 -64 0x93c),4); (0x100004008,8) SEP ((RSP_0 -64 0x940),4); (0x100004008,8) SEP ((RSP_0 -64 0x948),8); (0x100004008,8) SEP ((RSP_0 -64 0x94c),4); (0x100004008,8) SEP ((RSP_0 -64 0x958),8); (0x100004008,8) SEP ((RSP_0 -64 0x960),8); (0x100004008,8) SEP ((RSP_0 -64 0x968),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003b25: MOV RAX, QWORD PTR [RIP + 1244] 7"
 Post  "RAX = [0x100004008,8]_0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003b2c"
 Separations ""
 Assertions  ""
 Pre   "RAX = [0x100004008,8]_0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003b2c: CMP DWORD PTR [RAX], 2 3"
 Post  "RAX = [0x100004008,8]_0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003b2f"
 Separations ""
 Assertions  ""
 Pre   "RAX = [0x100004008,8]_0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003b2f: JL 4294982486 2"
 Post  "RAX = [0x100004008,8]_0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003801, blockId == 44 ##
######################################
*)

htriple "ht_100003b56"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003b56: CMP DWORD PTR [RIP + 25943], 0 7"
 Post  "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003b5d"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003b5d: JE 4294982519 2"
 Post  "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003801, blockId == 45 ##
######################################
*)

htriple "ht_100003b31"
 Separations ""
 Assertions  ""
 Pre   "RAX = [0x100004008,8]_0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003b31: LEA RCX, [RBP - 2352] 7"
 Post  "RAX = [0x100004008,8]_0 ; RCX = (RSP_0 -64 0x938) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003b38"
 Separations ""
 Assertions  ""
 Pre   "RAX = [0x100004008,8]_0 ; RCX = (RSP_0 -64 0x938) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003b38: XOR EDI, EDI 2"
 Post  "RAX = [0x100004008,8]_0 ; RCX = (RSP_0 -64 0x938) ; RDI = 0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003b3a"
 Separations ""
 Assertions  ""
 Pre   "RAX = [0x100004008,8]_0 ; RCX = (RSP_0 -64 0x938) ; RDI = 0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003b3a: XOR ESI, ESI 2"
 Post  "RAX = [0x100004008,8]_0 ; RCX = (RSP_0 -64 0x938) ; RDI = 0 ; RSI = 0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003b3c"
 Separations ""
 Assertions  ""
 Pre   "RAX = [0x100004008,8]_0 ; RCX = (RSP_0 -64 0x938) ; RDI = 0 ; RSI = 0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003b3c: XOR EDX, EDX 2"
 Post  "RAX = [0x100004008,8]_0 ; RCX = (RSP_0 -64 0x938) ; RDX = 0 ; RDI = 0 ; RSI = 0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003b3e"
 Separations ""
 Assertions  ""
 Pre   "RAX = [0x100004008,8]_0 ; RCX = (RSP_0 -64 0x938) ; RDX = 0 ; RDI = 0 ; RSI = 0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003b3e: ExternalCall fun__mbrtowc 5"
 Post  "RAX = bot(fun__mbrtowc) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 FunctionConstraints "PRESERVES fun__mbrtowc {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[0x100004008,8];[0x100004010,8];[0x1000080a0,8];[0x1000080a8,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 0x8ac),4];[(RSP_0 -64 0x8c8),16];[(RSP_0 -64 0x8d8),16];[(RSP_0 -64 0x8e8),16];[(RSP_0 -64 0x8f8),16];[(RSP_0 -64 0x908),16];[(RSP_0 -64 0x918),16];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x93c),4];[(RSP_0 -64 0x940),4];[(RSP_0 -64 0x948),8];[(RSP_0 -64 0x94c),4];[(RSP_0 -64 0x958),8];[(RSP_0 -64 0x960),8];[(RSP_0 -64 0x968),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003b43"
 Separations "((RSP_0 -64 0x93c),4) SEP (bot(fun____error),4); ((RSP_0 -64 0x93c),4) SEP ([0x100004010,8]_0,8); ((RSP_0 -64 0x93c),4) SEP (0x100004000,8); ((RSP_0 -64 0x93c),4) SEP (0x100004008,8); ((RSP_0 -64 0x93c),4) SEP (0x100004010,8); ((RSP_0 -64 0x93c),4) SEP (0x1000080a0,8); ((RSP_0 -64 0x93c),4) SEP (0x1000080a8,8); ((RSP_0 -64 0x93c),4) SEP (0x10000a0c0,8); ((RSP_0 -64 0x93c),4) SEP (0x10000a0c8,8); ((RSP_0 -64 0x93c),4) SEP (0x10000a0d0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun__mbrtowc) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003b43: CMP DWORD PTR [RBP - 2356], 0 7"
 Post  "RAX = bot(fun__mbrtowc) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003b4a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__mbrtowc) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003b4a: JNE 4294982486 2"
 Post  "RAX = bot(fun__mbrtowc) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003801, blockId == 46 ##
######################################
*)

htriple "ht_100003b4c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__mbrtowc) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003b4c: CMP RAX, 18446744073709551615 4"
 Post  "RAX = bot(fun__mbrtowc) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003b50"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__mbrtowc) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003b50: JE 4294982982 6"
 Post  "RAX = bot(fun__mbrtowc) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003801, blockId == 47 ##
######################################
*)

htriple "ht_100003d46"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__mbrtowc) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003d46: LEA RDI, [RIP + 562] 7"
 Post  "RAX = bot(fun__mbrtowc) ; RDI = 0x100003f7f ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003d4d"
 Separations "((RSP_0 -64 0x948),8) SEP (bot(fun____error),4); ((RSP_0 -64 0x948),8) SEP ([0x100004010,8]_0,8); ((RSP_0 -64 0x948),8) SEP (0x100004000,8); ((RSP_0 -64 0x948),8) SEP (0x100004008,8); ((RSP_0 -64 0x948),8) SEP (0x100004010,8); ((RSP_0 -64 0x948),8) SEP (0x1000080a0,8); ((RSP_0 -64 0x948),8) SEP (0x1000080a8,8); ((RSP_0 -64 0x948),8) SEP (0x10000a0c0,8); ((RSP_0 -64 0x948),8) SEP (0x10000a0c8,8); ((RSP_0 -64 0x948),8) SEP (0x10000a0d0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun__mbrtowc) ; RDI = 0x100003f7f ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003d4d: MOV RSI, QWORD PTR [RBP - 2368] 7"
 Post  "RAX = bot(fun__mbrtowc) ; RDI = 0x100003f7f ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003d54"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__mbrtowc) ; RDI = 0x100003f7f ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003d54: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RDI = 0x100003f7f ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003d56"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RDI = 0x100003f7f ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003d56: ExternalCall fun__warn 5"
 Post  "RAX = bot(fun__warn) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 FunctionConstraints "PRESERVES fun__warn {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[0x100004008,8];[0x100004010,8];[0x1000080a0,8];[0x1000080a8,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 0x8ac),4];[(RSP_0 -64 0x8c8),16];[(RSP_0 -64 0x8d8),16];[(RSP_0 -64 0x8e8),16];[(RSP_0 -64 0x8f8),16];[(RSP_0 -64 0x908),16];[(RSP_0 -64 0x918),16];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x93c),4];[(RSP_0 -64 0x940),4];[(RSP_0 -64 0x948),8];[(RSP_0 -64 0x94c),4];[(RSP_0 -64 0x958),8];[(RSP_0 -64 0x960),8];[(RSP_0 -64 0x968),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003d5b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__warn) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003d5b: JMP 4294982486 5"
 Post  "RAX = bot(fun__warn) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003801, blockId == 48 ##
######################################
*)

htriple "ht_100003b5f"
 Separations "(0x10000a0c8,8) SEP (bot(fun____error),4); (0x10000a0c8,8) SEP (RSP_0,8); (0x10000a0c8,8) SEP ([0x100004010,8]_0,8); (0x10000a0c8,8) SEP ((RSP_0 -64 8),8); (0x10000a0c8,8) SEP ((RSP_0 -64 16),8); (0x10000a0c8,8) SEP ((RSP_0 -64 24),8); (0x10000a0c8,8) SEP ((RSP_0 -64 32),8); (0x10000a0c8,8) SEP ((RSP_0 -64 40),8); (0x10000a0c8,8) SEP ((RSP_0 -64 48),8); (0x10000a0c8,8) SEP ((RSP_0 -64 56),8); (0x10000a0c8,8) SEP ((RSP_0 -64 0x8ac),4); (0x10000a0c8,8) SEP ((RSP_0 -64 0x8c8),16); (0x10000a0c8,8) SEP ((RSP_0 -64 0x8d8),16); (0x10000a0c8,8) SEP ((RSP_0 -64 0x8e8),16); (0x10000a0c8,8) SEP ((RSP_0 -64 0x8f8),16); (0x10000a0c8,8) SEP ((RSP_0 -64 0x908),16); (0x10000a0c8,8) SEP ((RSP_0 -64 0x918),16); (0x10000a0c8,8) SEP ((RSP_0 -64 0x928),16); (0x10000a0c8,8) SEP ((RSP_0 -64 0x938),16); (0x10000a0c8,8) SEP ((RSP_0 -64 0x93c),4); (0x10000a0c8,8) SEP ((RSP_0 -64 0x940),4); (0x10000a0c8,8) SEP ((RSP_0 -64 0x948),8); (0x10000a0c8,8) SEP ((RSP_0 -64 0x94c),4); (0x10000a0c8,8) SEP ((RSP_0 -64 0x958),8); (0x10000a0c8,8) SEP ((RSP_0 -64 0x960),8); (0x10000a0c8,8) SEP ((RSP_0 -64 0x968),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003b5f: ADD QWORD PTR [RIP + 25954], R13 7"
 Post  "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003b66"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003b66: LEA RDI, [RIP + 995] 7"
 Post  "RDI = 0x100003f50 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003b6d"
 Separations ""
 Assertions  ""
 Pre   "RDI = 0x100003f50 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003b6d: MOV RSI, R13 3"
 Post  "RDI = 0x100003f50 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003b70"
 Separations ""
 Assertions  ""
 Pre   "RDI = 0x100003f50 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003b70: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RDI = 0x100003f50 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003b72"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RDI = 0x100003f50 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003b72: ExternalCall fun__printf 5"
 Post  "RAX = bot(fun__printf) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 FunctionConstraints "PRESERVES fun__printf {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[0x100004008,8];[0x100004010,8];[0x1000080a0,8];[0x1000080a8,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 0x8ac),4];[(RSP_0 -64 0x8c8),16];[(RSP_0 -64 0x8d8),16];[(RSP_0 -64 0x8e8),16];[(RSP_0 -64 0x8f8),16];[(RSP_0 -64 0x908),16];[(RSP_0 -64 0x918),16];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x93c),4];[(RSP_0 -64 0x940),4];[(RSP_0 -64 0x948),8];[(RSP_0 -64 0x94c),4];[(RSP_0 -64 0x958),8];[(RSP_0 -64 0x960),8];[(RSP_0 -64 0x968),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003801, blockId == 49 ##
######################################
*)

htriple "ht_100003b77"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003b77: CMP DWORD PTR [RIP + 25918], 0 7"
 Post  "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003b7e"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003b7e: JE 4294982556 2"
 Post  "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003801, blockId == 50 ##
######################################
*)

htriple "ht_100003b80"
 Separations "((RSP_0 -64 0x958),8) SEP (bot(fun____error),4); ((RSP_0 -64 0x958),8) SEP ([0x100004010,8]_0,8); ((RSP_0 -64 0x958),8) SEP (0x100004000,8); ((RSP_0 -64 0x958),8) SEP (0x100004008,8); ((RSP_0 -64 0x958),8) SEP (0x100004010,8); ((RSP_0 -64 0x958),8) SEP (0x1000080a0,8); ((RSP_0 -64 0x958),8) SEP (0x1000080a8,8); ((RSP_0 -64 0x958),8) SEP (0x10000a0c0,8); ((RSP_0 -64 0x958),8) SEP (0x10000a0c8,8); ((RSP_0 -64 0x958),8) SEP (0x10000a0d0,8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003b80: MOV RSI, QWORD PTR [RBP - 2384] 7"
 Post  "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003b87"
 Separations "(0x10000a0d0,8) SEP (bot(fun____error),4); (0x10000a0d0,8) SEP (RSP_0,8); (0x10000a0d0,8) SEP ([0x100004010,8]_0,8); (0x10000a0d0,8) SEP ((RSP_0 -64 8),8); (0x10000a0d0,8) SEP ((RSP_0 -64 16),8); (0x10000a0d0,8) SEP ((RSP_0 -64 24),8); (0x10000a0d0,8) SEP ((RSP_0 -64 32),8); (0x10000a0d0,8) SEP ((RSP_0 -64 40),8); (0x10000a0d0,8) SEP ((RSP_0 -64 48),8); (0x10000a0d0,8) SEP ((RSP_0 -64 56),8); (0x10000a0d0,8) SEP ((RSP_0 -64 0x8ac),4); (0x10000a0d0,8) SEP ((RSP_0 -64 0x8c8),16); (0x10000a0d0,8) SEP ((RSP_0 -64 0x8d8),16); (0x10000a0d0,8) SEP ((RSP_0 -64 0x8e8),16); (0x10000a0d0,8) SEP ((RSP_0 -64 0x8f8),16); (0x10000a0d0,8) SEP ((RSP_0 -64 0x908),16); (0x10000a0d0,8) SEP ((RSP_0 -64 0x918),16); (0x10000a0d0,8) SEP ((RSP_0 -64 0x928),16); (0x10000a0d0,8) SEP ((RSP_0 -64 0x938),16); (0x10000a0d0,8) SEP ((RSP_0 -64 0x93c),4); (0x10000a0d0,8) SEP ((RSP_0 -64 0x940),4); (0x10000a0d0,8) SEP ((RSP_0 -64 0x948),8); (0x10000a0d0,8) SEP ((RSP_0 -64 0x94c),4); (0x10000a0d0,8) SEP ((RSP_0 -64 0x958),8); (0x10000a0d0,8) SEP ((RSP_0 -64 0x960),8); (0x10000a0d0,8) SEP ((RSP_0 -64 0x968),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003b87: ADD QWORD PTR [RIP + 25922], RSI 7"
 Post  "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003b8e"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003b8e: LEA RDI, [RIP + 955] 7"
 Post  "RDI = 0x100003f50 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003b95"
 Separations ""
 Assertions  ""
 Pre   "RDI = 0x100003f50 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003b95: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RDI = 0x100003f50 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003b97"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RDI = 0x100003f50 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003b97: ExternalCall fun__printf 5"
 Post  "RAX = bot(fun__printf) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 FunctionConstraints "PRESERVES fun__printf {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[0x100004008,8];[0x100004010,8];[0x1000080a0,8];[0x1000080a8,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 0x8ac),4];[(RSP_0 -64 0x8c8),16];[(RSP_0 -64 0x8d8),16];[(RSP_0 -64 0x8e8),16];[(RSP_0 -64 0x8f8),16];[(RSP_0 -64 0x908),16];[(RSP_0 -64 0x918),16];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x93c),4];[(RSP_0 -64 0x940),4];[(RSP_0 -64 0x948),8];[(RSP_0 -64 0x94c),4];[(RSP_0 -64 0x958),8];[(RSP_0 -64 0x960),8];[(RSP_0 -64 0x968),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003801, blockId == 51 ##
######################################
*)

htriple "ht_100003b9c"
 Separations "(0x10000a0b8,4) SEP (bot(fun____error),4); (0x10000a0b8,4) SEP ([0x100004010,8]_0,8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003b9c: MOV EAX, DWORD PTR [RIP + 25878] 6"
 Post  "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003ba2"
 Separations "(0x10000a0b0,4) SEP (bot(fun____error),4); (0x10000a0b0,4) SEP ([0x100004010,8]_0,8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003ba2: OR EAX, DWORD PTR [RIP + 25864] 6"
 Post  "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003ba8"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003ba8: JE 4294982598 2"
 Post  "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003801, blockId == 52 ##
######################################
*)

htriple "ht_100003baa"
 Separations "((RSP_0 -64 0x960),8) SEP (bot(fun____error),4); ((RSP_0 -64 0x960),8) SEP ([0x100004010,8]_0,8); ((RSP_0 -64 0x960),8) SEP (0x100004000,8); ((RSP_0 -64 0x960),8) SEP (0x100004008,8); ((RSP_0 -64 0x960),8) SEP (0x100004010,8); ((RSP_0 -64 0x960),8) SEP (0x1000080a0,8); ((RSP_0 -64 0x960),8) SEP (0x1000080a8,8); ((RSP_0 -64 0x960),8) SEP (0x10000a0c0,8); ((RSP_0 -64 0x960),8) SEP (0x10000a0c8,8); ((RSP_0 -64 0x960),8) SEP (0x10000a0d0,8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003baa: MOV RSI, QWORD PTR [RBP - 2392] 7"
 Post  "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003bb1"
 Separations "(0x10000a0c0,8) SEP (bot(fun____error),4); (0x10000a0c0,8) SEP (RSP_0,8); (0x10000a0c0,8) SEP ([0x100004010,8]_0,8); (0x10000a0c0,8) SEP ((RSP_0 -64 8),8); (0x10000a0c0,8) SEP ((RSP_0 -64 16),8); (0x10000a0c0,8) SEP ((RSP_0 -64 24),8); (0x10000a0c0,8) SEP ((RSP_0 -64 32),8); (0x10000a0c0,8) SEP ((RSP_0 -64 40),8); (0x10000a0c0,8) SEP ((RSP_0 -64 48),8); (0x10000a0c0,8) SEP ((RSP_0 -64 56),8); (0x10000a0c0,8) SEP ((RSP_0 -64 0x8ac),4); (0x10000a0c0,8) SEP ((RSP_0 -64 0x8c8),16); (0x10000a0c0,8) SEP ((RSP_0 -64 0x8d8),16); (0x10000a0c0,8) SEP ((RSP_0 -64 0x8e8),16); (0x10000a0c0,8) SEP ((RSP_0 -64 0x8f8),16); (0x10000a0c0,8) SEP ((RSP_0 -64 0x908),16); (0x10000a0c0,8) SEP ((RSP_0 -64 0x918),16); (0x10000a0c0,8) SEP ((RSP_0 -64 0x928),16); (0x10000a0c0,8) SEP ((RSP_0 -64 0x938),16); (0x10000a0c0,8) SEP ((RSP_0 -64 0x93c),4); (0x10000a0c0,8) SEP ((RSP_0 -64 0x940),4); (0x10000a0c0,8) SEP ((RSP_0 -64 0x948),8); (0x10000a0c0,8) SEP ((RSP_0 -64 0x94c),4); (0x10000a0c0,8) SEP ((RSP_0 -64 0x958),8); (0x10000a0c0,8) SEP ((RSP_0 -64 0x960),8); (0x10000a0c0,8) SEP ((RSP_0 -64 0x968),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003bb1: ADD QWORD PTR [RIP + 25864], RSI 7"
 Post  "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003bb8"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003bb8: LEA RDI, [RIP + 913] 7"
 Post  "RDI = 0x100003f50 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003bbf"
 Separations ""
 Assertions  ""
 Pre   "RDI = 0x100003f50 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003bbf: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RDI = 0x100003f50 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003bc1"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RDI = 0x100003f50 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003bc1: ExternalCall fun__printf 5"
 Post  "RAX = bot(fun__printf) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 FunctionConstraints "PRESERVES fun__printf {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[0x100004008,8];[0x100004010,8];[0x1000080a0,8];[0x1000080a8,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 0x8ac),4];[(RSP_0 -64 0x8c8),16];[(RSP_0 -64 0x8d8),16];[(RSP_0 -64 0x8e8),16];[(RSP_0 -64 0x8f8),16];[(RSP_0 -64 0x908),16];[(RSP_0 -64 0x918),16];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x93c),4];[(RSP_0 -64 0x940),4];[(RSP_0 -64 0x948),8];[(RSP_0 -64 0x94c),4];[(RSP_0 -64 0x958),8];[(RSP_0 -64 0x960),8];[(RSP_0 -64 0x968),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003801, blockId == 53 ##
######################################
*)

htriple "ht_100003bc6"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003bc6: MOV EDI, R14D 3"
 Post  "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003bc9"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003bc9: ExternalCall fun__close 5"
 Post  "RAX = bot(fun__close) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 FunctionConstraints "PRESERVES fun__close {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[0x100004008,8];[0x100004010,8];[0x1000080a0,8];[0x1000080a8,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 0x8ac),4];[(RSP_0 -64 0x8c8),16];[(RSP_0 -64 0x8d8),16];[(RSP_0 -64 0x8e8),16];[(RSP_0 -64 0x8f8),16];[(RSP_0 -64 0x908),16];[(RSP_0 -64 0x918),16];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x93c),4];[(RSP_0 -64 0x940),4];[(RSP_0 -64 0x948),8];[(RSP_0 -64 0x94c),4];[(RSP_0 -64 0x958),8];[(RSP_0 -64 0x960),8];[(RSP_0 -64 0x968),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003bce"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__close) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003bce: XOR R15D, R15D 3"
 Post  "RAX = bot(fun__close) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003801, blockId == 54 ##
######################################
*)

htriple "ht_100003be5"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003be5: MOV EAX, R15D 3"
 Post  "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003be8"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003be8: ADD RSP, 2504 7"
 Post  "RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003bef"
 Separations "((RSP_0 -64 40),8) SEP (bot(fun____error),4); ((RSP_0 -64 40),8) SEP ([0x100004010,8]_0,8); ((RSP_0 -64 40),8) SEP (0x100004000,8); ((RSP_0 -64 40),8) SEP (0x100004008,8); ((RSP_0 -64 40),8) SEP (0x100004010,8); ((RSP_0 -64 40),8) SEP (0x1000080a0,8); ((RSP_0 -64 40),8) SEP (0x1000080a8,8); ((RSP_0 -64 40),8) SEP (0x10000a0c0,8); ((RSP_0 -64 40),8) SEP (0x10000a0c8,8); ((RSP_0 -64 40),8) SEP (0x10000a0d0,8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003bef: POP RBX 1"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003bf0"
 Separations "((RSP_0 -64 32),8) SEP (bot(fun____error),4); ((RSP_0 -64 32),8) SEP ([0x100004010,8]_0,8); ((RSP_0 -64 32),8) SEP (0x100004000,8); ((RSP_0 -64 32),8) SEP (0x100004008,8); ((RSP_0 -64 32),8) SEP (0x100004010,8); ((RSP_0 -64 32),8) SEP (0x1000080a0,8); ((RSP_0 -64 32),8) SEP (0x1000080a8,8); ((RSP_0 -64 32),8) SEP (0x10000a0c0,8); ((RSP_0 -64 32),8) SEP (0x10000a0c8,8); ((RSP_0 -64 32),8) SEP (0x10000a0d0,8)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003bf0: POP R12 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003bf2"
 Separations "((RSP_0 -64 24),8) SEP (bot(fun____error),4); ((RSP_0 -64 24),8) SEP ([0x100004010,8]_0,8); ((RSP_0 -64 24),8) SEP (0x100004000,8); ((RSP_0 -64 24),8) SEP (0x100004008,8); ((RSP_0 -64 24),8) SEP (0x100004010,8); ((RSP_0 -64 24),8) SEP (0x1000080a0,8); ((RSP_0 -64 24),8) SEP (0x1000080a8,8); ((RSP_0 -64 24),8) SEP (0x10000a0c0,8); ((RSP_0 -64 24),8) SEP (0x10000a0c8,8); ((RSP_0 -64 24),8) SEP (0x10000a0d0,8)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003bf2: POP R13 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003bf4"
 Separations "((RSP_0 -64 16),8) SEP (bot(fun____error),4); ((RSP_0 -64 16),8) SEP ([0x100004010,8]_0,8); ((RSP_0 -64 16),8) SEP (0x100004000,8); ((RSP_0 -64 16),8) SEP (0x100004008,8); ((RSP_0 -64 16),8) SEP (0x100004010,8); ((RSP_0 -64 16),8) SEP (0x1000080a0,8); ((RSP_0 -64 16),8) SEP (0x1000080a8,8); ((RSP_0 -64 16),8) SEP (0x10000a0c0,8); ((RSP_0 -64 16),8) SEP (0x10000a0c8,8); ((RSP_0 -64 16),8) SEP (0x10000a0d0,8)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003bf4: POP R14 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003bf6"
 Separations "((RSP_0 -64 8),8) SEP (bot(fun____error),4); ((RSP_0 -64 8),8) SEP ([0x100004010,8]_0,8); ((RSP_0 -64 8),8) SEP (0x100004000,8); ((RSP_0 -64 8),8) SEP (0x100004008,8); ((RSP_0 -64 8),8) SEP (0x100004010,8); ((RSP_0 -64 8),8) SEP (0x1000080a0,8); ((RSP_0 -64 8),8) SEP (0x1000080a8,8); ((RSP_0 -64 8),8) SEP (0x10000a0c0,8); ((RSP_0 -64 8),8) SEP (0x10000a0c8,8); ((RSP_0 -64 8),8) SEP (0x10000a0d0,8)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003bf6: POP R15 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003bf8"
 Separations ""
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003bf8: POP RBP 1"
 Post  "RBX = RBX_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003bf9"
 Separations ""
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003bf9: RET  1"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 +64 8) ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003801, blockId == 55 ##
######################################
*)

htriple "ht_100003d89"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003d89: ExternalCall fun____stack_chk_fail 5"
 Post  "RAX = bot(fun____stack_chk_fail) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 FunctionConstraints "PRESERVES fun____stack_chk_fail {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[0x100004008,8];[0x100004010,8];[0x1000080a0,8];[0x1000080a8,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 0x8ac),4];[(RSP_0 -64 0x8c8),16];[(RSP_0 -64 0x8d8),16];[(RSP_0 -64 0x8e8),16];[(RSP_0 -64 0x8f8),16];[(RSP_0 -64 0x908),16];[(RSP_0 -64 0x918),16];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x93c),4];[(RSP_0 -64 0x940),4];[(RSP_0 -64 0x948),8];[(RSP_0 -64 0x94c),4];[(RSP_0 -64 0x958),8];[(RSP_0 -64 0x960),8];[(RSP_0 -64 0x968),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003801, blockId == 56 ##
######################################
*)

htriple "ht_100003c07"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003c07: MOV R12D, R14D 3"
 Post  "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003c0a"
 Separations "(0x1000080a0,8) SEP (bot(fun____error),4); (0x1000080a0,8) SEP (RSP_0,8); (0x1000080a0,8) SEP ([0x100004010,8]_0,8); (0x1000080a0,8) SEP ((RSP_0 -64 8),8); (0x1000080a0,8) SEP ((RSP_0 -64 16),8); (0x1000080a0,8) SEP ((RSP_0 -64 24),8); (0x1000080a0,8) SEP ((RSP_0 -64 32),8); (0x1000080a0,8) SEP ((RSP_0 -64 40),8); (0x1000080a0,8) SEP ((RSP_0 -64 48),8); (0x1000080a0,8) SEP ((RSP_0 -64 56),8); (0x1000080a0,8) SEP ((RSP_0 -64 0x8ac),4); (0x1000080a0,8) SEP ((RSP_0 -64 0x8c8),16); (0x1000080a0,8) SEP ((RSP_0 -64 0x8d8),16); (0x1000080a0,8) SEP ((RSP_0 -64 0x8e8),16); (0x1000080a0,8) SEP ((RSP_0 -64 0x8f8),16); (0x1000080a0,8) SEP ((RSP_0 -64 0x908),16); (0x1000080a0,8) SEP ((RSP_0 -64 0x918),16); (0x1000080a0,8) SEP ((RSP_0 -64 0x928),16); (0x1000080a0,8) SEP ((RSP_0 -64 0x938),16); (0x1000080a0,8) SEP ((RSP_0 -64 0x93c),4); (0x1000080a0,8) SEP ((RSP_0 -64 0x940),4); (0x1000080a0,8) SEP ((RSP_0 -64 0x948),8); (0x1000080a0,8) SEP ((RSP_0 -64 0x94c),4); (0x1000080a0,8) SEP ((RSP_0 -64 0x958),8); (0x1000080a0,8) SEP ((RSP_0 -64 0x960),8); (0x1000080a0,8) SEP ((RSP_0 -64 0x968),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003c0a: MOV RSI, QWORD PTR [RIP + 17551] 7"
 Post  "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003c11"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003c11: XOR EBX, EBX 2"
 Post  "RBX = 0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003c13"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003c13: XOR R14D, R14D 3"
 Post  "RBX = 0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003801, blockId == 57 ##
######################################
*)

htriple "ht_100003cc2"
 Separations "(0x10000a0b0,4) SEP (bot(fun____error),4); (0x10000a0b0,4) SEP ([0x100004010,8]_0,8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003cc2: OR EAX, DWORD PTR [RIP + 25576] 6"
 Post  "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003cc8"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003cc8: JE 4294981885 6"
 Post  "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003801, blockId == 58 ##
######################################
*)

htriple "ht_100003c25"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003c25: CMP EAX, 18446744073709551615 3"
 Post  "RAX = bot(fun__read) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003c28"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003c28: JE 4294983008 6"
 Post  "RAX = bot(fun__read) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003801, blockId == 59 ##
######################################
*)

htriple "ht_100003c5a"
 Separations "(0x10000a0c8,8) SEP (bot(fun____error),4); (0x10000a0c8,8) SEP (RSP_0,8); (0x10000a0c8,8) SEP ([0x100004010,8]_0,8); (0x10000a0c8,8) SEP ((RSP_0 -64 8),8); (0x10000a0c8,8) SEP ((RSP_0 -64 16),8); (0x10000a0c8,8) SEP ((RSP_0 -64 24),8); (0x10000a0c8,8) SEP ((RSP_0 -64 32),8); (0x10000a0c8,8) SEP ((RSP_0 -64 40),8); (0x10000a0c8,8) SEP ((RSP_0 -64 48),8); (0x10000a0c8,8) SEP ((RSP_0 -64 56),8); (0x10000a0c8,8) SEP ((RSP_0 -64 0x8ac),4); (0x10000a0c8,8) SEP ((RSP_0 -64 0x8c8),16); (0x10000a0c8,8) SEP ((RSP_0 -64 0x8d8),16); (0x10000a0c8,8) SEP ((RSP_0 -64 0x8e8),16); (0x10000a0c8,8) SEP ((RSP_0 -64 0x8f8),16); (0x10000a0c8,8) SEP ((RSP_0 -64 0x908),16); (0x10000a0c8,8) SEP ((RSP_0 -64 0x918),16); (0x10000a0c8,8) SEP ((RSP_0 -64 0x928),16); (0x10000a0c8,8) SEP ((RSP_0 -64 0x938),16); (0x10000a0c8,8) SEP ((RSP_0 -64 0x93c),4); (0x10000a0c8,8) SEP ((RSP_0 -64 0x940),4); (0x10000a0c8,8) SEP ((RSP_0 -64 0x948),8); (0x10000a0c8,8) SEP ((RSP_0 -64 0x94c),4); (0x10000a0c8,8) SEP ((RSP_0 -64 0x958),8); (0x10000a0c8,8) SEP ((RSP_0 -64 0x960),8); (0x10000a0c8,8) SEP ((RSP_0 -64 0x968),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003c5a: ADD QWORD PTR [RIP + 25703], RBX 7"
 Post  "RAX = bot(fun__read) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003c61"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003c61: LEA RDI, [RIP + 744] 7"
 Post  "RAX = bot(fun__read) ; RDI = 0x100003f50 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003c68"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RDI = 0x100003f50 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003c68: XOR R15D, R15D 3"
 Post  "RAX = bot(fun__read) ; RDI = 0x100003f50 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003c6b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RDI = 0x100003f50 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003c6b: MOV RSI, RBX 3"
 Post  "RAX = bot(fun__read) ; RDI = 0x100003f50 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003c6e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RDI = 0x100003f50 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003c6e: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RDI = 0x100003f50 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003c70"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RDI = 0x100003f50 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003c70: ExternalCall fun__printf 5"
 Post  "RAX = bot(fun__printf) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 FunctionConstraints "PRESERVES fun__printf {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[0x100004008,8];[0x100004010,8];[0x1000080a0,8];[0x1000080a8,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 0x8ac),4];[(RSP_0 -64 0x8c8),16];[(RSP_0 -64 0x8d8),16];[(RSP_0 -64 0x8e8),16];[(RSP_0 -64 0x8f8),16];[(RSP_0 -64 0x908),16];[(RSP_0 -64 0x918),16];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x93c),4];[(RSP_0 -64 0x940),4];[(RSP_0 -64 0x948),8];[(RSP_0 -64 0x94c),4];[(RSP_0 -64 0x958),8];[(RSP_0 -64 0x960),8];[(RSP_0 -64 0x968),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003c75"
 Separations "(0x10000a0b0,4) SEP (bot(fun____error),4); (0x10000a0b0,4) SEP ([0x100004010,8]_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun__printf) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003c75: CMP DWORD PTR [RIP + 25652], 0 7"
 Post  "RAX = bot(fun__printf) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003c7c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__printf) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003c7c: JE 4294982806 2"
 Post  "RAX = bot(fun__printf) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003801, blockId == 60 ##
######################################
*)

htriple "ht_100003c2e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003c2e: MOVSXD RCX, EAX 3"
 Post  "RAX = bot(fun__read) ; RCX = signextend(32,64, bot(fun__read)) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003c31"
 Separations "(0x1000080a0,8) SEP (bot(fun____error),4); (0x1000080a0,8) SEP (RSP_0,8); (0x1000080a0,8) SEP ([0x100004010,8]_0,8); (0x1000080a0,8) SEP ((RSP_0 -64 8),8); (0x1000080a0,8) SEP ((RSP_0 -64 16),8); (0x1000080a0,8) SEP ((RSP_0 -64 24),8); (0x1000080a0,8) SEP ((RSP_0 -64 32),8); (0x1000080a0,8) SEP ((RSP_0 -64 40),8); (0x1000080a0,8) SEP ((RSP_0 -64 48),8); (0x1000080a0,8) SEP ((RSP_0 -64 56),8); (0x1000080a0,8) SEP ((RSP_0 -64 0x8ac),4); (0x1000080a0,8) SEP ((RSP_0 -64 0x8c8),16); (0x1000080a0,8) SEP ((RSP_0 -64 0x8d8),16); (0x1000080a0,8) SEP ((RSP_0 -64 0x8e8),16); (0x1000080a0,8) SEP ((RSP_0 -64 0x8f8),16); (0x1000080a0,8) SEP ((RSP_0 -64 0x908),16); (0x1000080a0,8) SEP ((RSP_0 -64 0x918),16); (0x1000080a0,8) SEP ((RSP_0 -64 0x928),16); (0x1000080a0,8) SEP ((RSP_0 -64 0x938),16); (0x1000080a0,8) SEP ((RSP_0 -64 0x93c),4); (0x1000080a0,8) SEP ((RSP_0 -64 0x940),4); (0x1000080a0,8) SEP ((RSP_0 -64 0x948),8); (0x1000080a0,8) SEP ((RSP_0 -64 0x94c),4); (0x1000080a0,8) SEP ((RSP_0 -64 0x958),8); (0x1000080a0,8) SEP ((RSP_0 -64 0x960),8); (0x1000080a0,8) SEP ((RSP_0 -64 0x968),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RCX = signextend(32,64, bot(fun__read)) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003c31: MOV RSI, QWORD PTR [RIP + 17512] 7"
 Post  "RAX = bot(fun__read) ; RCX = signextend(32,64, bot(fun__read)) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003c38"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RCX = signextend(32,64, bot(fun__read)) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003c38: XOR EDX, EDX 2"
 Post  "RAX = bot(fun__read) ; RCX = signextend(32,64, bot(fun__read)) ; RDX = 0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003801, blockId == 61 ##
######################################
*)

htriple "ht_100003d60"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003d60: LEA RDI, [RIP + 510] 7"
 Post  "RAX = bot(fun__read) ; RDI = 0x100003f65 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003d67"
 Separations "((RSP_0 -64 0x948),8) SEP (bot(fun____error),4); ((RSP_0 -64 0x948),8) SEP ([0x100004010,8]_0,8); ((RSP_0 -64 0x948),8) SEP (0x100004000,8); ((RSP_0 -64 0x948),8) SEP (0x100004008,8); ((RSP_0 -64 0x948),8) SEP (0x100004010,8); ((RSP_0 -64 0x948),8) SEP (0x1000080a0,8); ((RSP_0 -64 0x948),8) SEP (0x1000080a8,8); ((RSP_0 -64 0x948),8) SEP (0x10000a0c0,8); ((RSP_0 -64 0x948),8) SEP (0x10000a0c8,8); ((RSP_0 -64 0x948),8) SEP (0x10000a0d0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RDI = 0x100003f65 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003d67: MOV RSI, QWORD PTR [RBP - 2368] 7"
 Post  "RAX = bot(fun__read) ; RDI = 0x100003f65 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003d6e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RDI = 0x100003f65 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003d6e: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RDI = 0x100003f65 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003d70"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RDI = 0x100003f65 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003d70: ExternalCall fun__warn 5"
 Post  "RAX = bot(fun__warn) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 FunctionConstraints "PRESERVES fun__warn {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[0x100004008,8];[0x100004010,8];[0x1000080a0,8];[0x1000080a8,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 0x8ac),4];[(RSP_0 -64 0x8c8),16];[(RSP_0 -64 0x8d8),16];[(RSP_0 -64 0x8e8),16];[(RSP_0 -64 0x8f8),16];[(RSP_0 -64 0x908),16];[(RSP_0 -64 0x918),16];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x93c),4];[(RSP_0 -64 0x940),4];[(RSP_0 -64 0x948),8];[(RSP_0 -64 0x94c),4];[(RSP_0 -64 0x958),8];[(RSP_0 -64 0x960),8];[(RSP_0 -64 0x968),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003d75"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__warn) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003d75: MOV EDI, R12D 3"
 Post  "RAX = bot(fun__warn) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003d78"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__warn) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003d78: JMP 4294982843 5"
 Post  "RAX = bot(fun__warn) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003801, blockId == 62 ##
######################################
*)

htriple "ht_100003c3a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RCX = signextend(32,64, bot(fun__read)) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003c3a: XOR EDI, EDI 2"
 Post  "RAX = bot(fun__read) ; RCX = signextend(32,64, bot(fun__read)) ; RDI = 0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003c3c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RCX = signextend(32,64, bot(fun__read)) ; RDI = 0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003c3c: CMP BYTE PTR [RSI + RDX], 10 4"
 Post  "RAX = bot(fun__read) ; RCX = signextend(32,64, bot(fun__read)) ; RDI = 0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003c40"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RCX = signextend(32,64, bot(fun__read)) ; RDI = 0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003c40: SETE DIL 4"
 Post  "RAX = bot(fun__read) ; RCX = signextend(32,64, bot(fun__read)) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003c44"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RCX = signextend(32,64, bot(fun__read)) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003c44: ADD RBX, RDI 3"
 Post  "RAX = bot(fun__read) ; RCX = signextend(32,64, bot(fun__read)) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003c47"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RCX = signextend(32,64, bot(fun__read)) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003c47: INC RDX 3"
 Post  "RAX = bot(fun__read) ; RCX = signextend(32,64, bot(fun__read)) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003c4a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RCX = signextend(32,64, bot(fun__read)) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003c4a: CMP EAX, EDX 2"
 Post  "RAX = bot(fun__read) ; RCX = signextend(32,64, bot(fun__read)) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003c4c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RCX = signextend(32,64, bot(fun__read)) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003c4c: JNE 4294982714 2"
 Post  "RAX = bot(fun__read) ; RCX = signextend(32,64, bot(fun__read)) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003801, blockId == 63 ##
######################################
*)

htriple "ht_100003c4e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RCX = signextend(32,64, bot(fun__read)) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003c4e: ADD R14, RCX 3"
 Post  "RAX = bot(fun__read) ; RCX = signextend(32,64, bot(fun__read)) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003c51"
 Separations "(0x1000080a8,8) SEP (bot(fun____error),4); (0x1000080a8,8) SEP (RSP_0,8); (0x1000080a8,8) SEP ([0x100004010,8]_0,8); (0x1000080a8,8) SEP ((RSP_0 -64 8),8); (0x1000080a8,8) SEP ((RSP_0 -64 16),8); (0x1000080a8,8) SEP ((RSP_0 -64 24),8); (0x1000080a8,8) SEP ((RSP_0 -64 32),8); (0x1000080a8,8) SEP ((RSP_0 -64 40),8); (0x1000080a8,8) SEP ((RSP_0 -64 48),8); (0x1000080a8,8) SEP ((RSP_0 -64 56),8); (0x1000080a8,8) SEP ((RSP_0 -64 0x8ac),4); (0x1000080a8,8) SEP ((RSP_0 -64 0x8c8),16); (0x1000080a8,8) SEP ((RSP_0 -64 0x8d8),16); (0x1000080a8,8) SEP ((RSP_0 -64 0x8e8),16); (0x1000080a8,8) SEP ((RSP_0 -64 0x8f8),16); (0x1000080a8,8) SEP ((RSP_0 -64 0x908),16); (0x1000080a8,8) SEP ((RSP_0 -64 0x918),16); (0x1000080a8,8) SEP ((RSP_0 -64 0x928),16); (0x1000080a8,8) SEP ((RSP_0 -64 0x938),16); (0x1000080a8,8) SEP ((RSP_0 -64 0x93c),4); (0x1000080a8,8) SEP ((RSP_0 -64 0x940),4); (0x1000080a8,8) SEP ((RSP_0 -64 0x948),8); (0x1000080a8,8) SEP ((RSP_0 -64 0x94c),4); (0x1000080a8,8) SEP ((RSP_0 -64 0x958),8); (0x1000080a8,8) SEP ((RSP_0 -64 0x960),8); (0x1000080a8,8) SEP ((RSP_0 -64 0x968),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RCX = signextend(32,64, bot(fun__read)) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003c51: MOV R15, QWORD PTR [RIP + 17488] 7"
 Post  "RAX = bot(fun__read) ; RCX = signextend(32,64, bot(fun__read)) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003c58"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RCX = signextend(32,64, bot(fun__read)) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003c58: JMP 4294982678 2"
 Post  "RAX = bot(fun__read) ; RCX = signextend(32,64, bot(fun__read)) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003801, blockId == 64 ##
######################################
*)

htriple "ht_100003c16"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003c16: MOV EDI, R12D 3"
 Post  "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003c19"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003c19: MOV RDX, R15 3"
 Post  "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003c1c"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003c1c: ExternalCall fun__read 5"
 Post  "RAX = bot(fun__read) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 FunctionConstraints "PRESERVES fun__read {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[0x100004008,8];[0x100004010,8];[0x1000080a0,8];[0x1000080a8,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 0x8ac),4];[(RSP_0 -64 0x8c8),16];[(RSP_0 -64 0x8d8),16];[(RSP_0 -64 0x8e8),16];[(RSP_0 -64 0x8f8),16];[(RSP_0 -64 0x908),16];[(RSP_0 -64 0x918),16];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x93c),4];[(RSP_0 -64 0x940),4];[(RSP_0 -64 0x948),8];[(RSP_0 -64 0x94c),4];[(RSP_0 -64 0x958),8];[(RSP_0 -64 0x960),8];[(RSP_0 -64 0x968),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003c21"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003c21: TEST EAX, EAX 2"
 Post  "RAX = bot(fun__read) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003c23"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003c23: JE 4294982746 2"
 Post  "RAX = bot(fun__read) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003801, blockId == 65 ##
######################################
*)

htriple "ht_100003c7e"
 Separations "(0x10000a0c0,8) SEP (bot(fun____error),4); (0x10000a0c0,8) SEP (RSP_0,8); (0x10000a0c0,8) SEP ([0x100004010,8]_0,8); (0x10000a0c0,8) SEP ((RSP_0 -64 8),8); (0x10000a0c0,8) SEP ((RSP_0 -64 16),8); (0x10000a0c0,8) SEP ((RSP_0 -64 24),8); (0x10000a0c0,8) SEP ((RSP_0 -64 32),8); (0x10000a0c0,8) SEP ((RSP_0 -64 40),8); (0x10000a0c0,8) SEP ((RSP_0 -64 48),8); (0x10000a0c0,8) SEP ((RSP_0 -64 56),8); (0x10000a0c0,8) SEP ((RSP_0 -64 0x8ac),4); (0x10000a0c0,8) SEP ((RSP_0 -64 0x8c8),16); (0x10000a0c0,8) SEP ((RSP_0 -64 0x8d8),16); (0x10000a0c0,8) SEP ((RSP_0 -64 0x8e8),16); (0x10000a0c0,8) SEP ((RSP_0 -64 0x8f8),16); (0x10000a0c0,8) SEP ((RSP_0 -64 0x908),16); (0x10000a0c0,8) SEP ((RSP_0 -64 0x918),16); (0x10000a0c0,8) SEP ((RSP_0 -64 0x928),16); (0x10000a0c0,8) SEP ((RSP_0 -64 0x938),16); (0x10000a0c0,8) SEP ((RSP_0 -64 0x93c),4); (0x10000a0c0,8) SEP ((RSP_0 -64 0x940),4); (0x10000a0c0,8) SEP ((RSP_0 -64 0x948),8); (0x10000a0c0,8) SEP ((RSP_0 -64 0x94c),4); (0x10000a0c0,8) SEP ((RSP_0 -64 0x958),8); (0x10000a0c0,8) SEP ((RSP_0 -64 0x960),8); (0x10000a0c0,8) SEP ((RSP_0 -64 0x968),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__printf) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003c7e: ADD QWORD PTR [RIP + 25659], R14 7"
 Post  "RAX = bot(fun__printf) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003c85"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__printf) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003c85: LEA RDI, [RIP + 708] 7"
 Post  "RAX = bot(fun__printf) ; RDI = 0x100003f50 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003c8c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__printf) ; RDI = 0x100003f50 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003c8c: MOV RSI, R14 3"
 Post  "RAX = bot(fun__printf) ; RDI = 0x100003f50 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003c8f"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__printf) ; RDI = 0x100003f50 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003c8f: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RDI = 0x100003f50 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003c91"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RDI = 0x100003f50 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003c91: ExternalCall fun__printf 5"
 Post  "RAX = bot(fun__printf) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 FunctionConstraints "PRESERVES fun__printf {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[0x100004008,8];[0x100004010,8];[0x1000080a0,8];[0x1000080a8,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 0x8ac),4];[(RSP_0 -64 0x8c8),16];[(RSP_0 -64 0x8d8),16];[(RSP_0 -64 0x8e8),16];[(RSP_0 -64 0x8f8),16];[(RSP_0 -64 0x908),16];[(RSP_0 -64 0x918),16];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x93c),4];[(RSP_0 -64 0x940),4];[(RSP_0 -64 0x948),8];[(RSP_0 -64 0x94c),4];[(RSP_0 -64 0x958),8];[(RSP_0 -64 0x960),8];[(RSP_0 -64 0x968),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003801, blockId == 66 ##
######################################
*)

htriple "ht_100003c96"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__printf) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003c96: MOV EDI, R12D 3"
 Post  "RAX = bot(fun__printf) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003801, blockId == 67 ##
######################################
*)

htriple "ht_100003bd1"
 Separations "(0x100004010,8) SEP (bot(fun____error),4); (0x100004010,8) SEP (RSP_0,8); (0x100004010,8) SEP ([0x100004010,8]_0,8); (0x100004010,8) SEP ((RSP_0 -64 8),8); (0x100004010,8) SEP ((RSP_0 -64 16),8); (0x100004010,8) SEP ((RSP_0 -64 24),8); (0x100004010,8) SEP ((RSP_0 -64 32),8); (0x100004010,8) SEP ((RSP_0 -64 40),8); (0x100004010,8) SEP ((RSP_0 -64 48),8); (0x100004010,8) SEP ((RSP_0 -64 56),8); (0x100004010,8) SEP ((RSP_0 -64 0x8ac),4); (0x100004010,8) SEP ((RSP_0 -64 0x8c8),16); (0x100004010,8) SEP ((RSP_0 -64 0x8d8),16); (0x100004010,8) SEP ((RSP_0 -64 0x8e8),16); (0x100004010,8) SEP ((RSP_0 -64 0x8f8),16); (0x100004010,8) SEP ((RSP_0 -64 0x908),16); (0x100004010,8) SEP ((RSP_0 -64 0x918),16); (0x100004010,8) SEP ((RSP_0 -64 0x928),16); (0x100004010,8) SEP ((RSP_0 -64 0x938),16); (0x100004010,8) SEP ((RSP_0 -64 0x93c),4); (0x100004010,8) SEP ((RSP_0 -64 0x940),4); (0x100004010,8) SEP ((RSP_0 -64 0x948),8); (0x100004010,8) SEP ((RSP_0 -64 0x94c),4); (0x100004010,8) SEP ((RSP_0 -64 0x958),8); (0x100004010,8) SEP ((RSP_0 -64 0x960),8); (0x100004010,8) SEP ((RSP_0 -64 0x968),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003bd1: MOV RAX, QWORD PTR [RIP + 1080] 7"
 Post  "RAX = [0x100004010,8]_0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003bd8"
 Separations "([0x100004010,8]_0,8) SEP (bot(fun____error),4); ([0x100004010,8]_0,8) SEP (RSP_0,8); ([0x100004010,8]_0,8) SEP (0x100004000,8); ([0x100004010,8]_0,8) SEP (0x100004008,8); ([0x100004010,8]_0,8) SEP (0x100004010,8); ([0x100004010,8]_0,8) SEP (0x1000080a0,8); ([0x100004010,8]_0,8) SEP (0x1000080a8,8); ([0x100004010,8]_0,8) SEP (0x10000a0b0,4); ([0x100004010,8]_0,8) SEP (0x10000a0b8,4); ([0x100004010,8]_0,8) SEP (0x10000a0c0,8); ([0x100004010,8]_0,8) SEP (0x10000a0c8,8); ([0x100004010,8]_0,8) SEP (0x10000a0d0,8); ([0x100004010,8]_0,8) SEP ((RSP_0 -64 8),8); ([0x100004010,8]_0,8) SEP ((RSP_0 -64 16),8); ([0x100004010,8]_0,8) SEP ((RSP_0 -64 24),8); ([0x100004010,8]_0,8) SEP ((RSP_0 -64 32),8); ([0x100004010,8]_0,8) SEP ((RSP_0 -64 40),8); ([0x100004010,8]_0,8) SEP ((RSP_0 -64 48),8); ([0x100004010,8]_0,8) SEP ((RSP_0 -64 56),8); ([0x100004010,8]_0,8) SEP ((RSP_0 -64 0x8ac),4); ([0x100004010,8]_0,8) SEP ((RSP_0 -64 0x8c8),16); ([0x100004010,8]_0,8) SEP ((RSP_0 -64 0x8d8),16); ([0x100004010,8]_0,8) SEP ((RSP_0 -64 0x8e8),16); ([0x100004010,8]_0,8) SEP ((RSP_0 -64 0x8f8),16); ([0x100004010,8]_0,8) SEP ((RSP_0 -64 0x908),16); ([0x100004010,8]_0,8) SEP ((RSP_0 -64 0x918),16); ([0x100004010,8]_0,8) SEP ((RSP_0 -64 0x928),16); ([0x100004010,8]_0,8) SEP ((RSP_0 -64 0x938),16); ([0x100004010,8]_0,8) SEP ((RSP_0 -64 0x93c),4); ([0x100004010,8]_0,8) SEP ((RSP_0 -64 0x940),4); ([0x100004010,8]_0,8) SEP ((RSP_0 -64 0x948),8); ([0x100004010,8]_0,8) SEP ((RSP_0 -64 0x94c),4); ([0x100004010,8]_0,8) SEP ((RSP_0 -64 0x958),8); ([0x100004010,8]_0,8) SEP ((RSP_0 -64 0x960),8); ([0x100004010,8]_0,8) SEP ((RSP_0 -64 0x968),8); ([0x100004010,8]_0,8) SEP ((RSP_0 -64 0x998),8); ([0x100004010,8]_0,8) SEP ((RSP_0 -64 0x9f4),2)"
 Assertions  ""
 Pre   "RAX = [0x100004010,8]_0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003bd8: MOV RAX, QWORD PTR [RAX] 3"
 Post  "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003bdb"
 Separations "((RSP_0 -64 56),8) SEP (bot(fun____error),4); ((RSP_0 -64 56),8) SEP ([0x100004010,8]_0,8); ((RSP_0 -64 56),8) SEP (0x100004000,8); ((RSP_0 -64 56),8) SEP (0x100004008,8); ((RSP_0 -64 56),8) SEP (0x100004010,8); ((RSP_0 -64 56),8) SEP (0x1000080a0,8); ((RSP_0 -64 56),8) SEP (0x1000080a8,8); ((RSP_0 -64 56),8) SEP (0x10000a0c0,8); ((RSP_0 -64 56),8) SEP (0x10000a0c8,8); ((RSP_0 -64 56),8) SEP (0x10000a0d0,8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003bdb: CMP RAX, QWORD PTR [RBP - 48] 4"
 Post  "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003bdf"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003bdf: JNE 4294983049 6"
 Post  "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003801, blockId == 68 ##
######################################
*)

htriple "ht_100003cce"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003cce: LEA RSI, [RBP - 2544] 7"
 Post  "RSI = (RSP_0 -64 0x9f8) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003cd5"
 Separations ""
 Assertions  ""
 Pre   "RSI = (RSP_0 -64 0x9f8) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003cd5: MOV EDI, R14D 3"
 Post  "RSI = (RSP_0 -64 0x9f8) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003cd8"
 Separations ""
 Assertions  ""
 Pre   "RSI = (RSP_0 -64 0x9f8) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003cd8: ExternalCall fun__fstat_INODE64 5"
 Post  "RAX = bot(fun__fstat_INODE64) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 FunctionConstraints "PRESERVES fun__fstat_INODE64 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[0x100004008,8];[0x100004010,8];[0x1000080a0,8];[0x1000080a8,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 0x8ac),4];[(RSP_0 -64 0x8c8),16];[(RSP_0 -64 0x8d8),16];[(RSP_0 -64 0x8e8),16];[(RSP_0 -64 0x8f8),16];[(RSP_0 -64 0x908),16];[(RSP_0 -64 0x918),16];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x93c),4];[(RSP_0 -64 0x940),4];[(RSP_0 -64 0x948),8];[(RSP_0 -64 0x94c),4];[(RSP_0 -64 0x958),8];[(RSP_0 -64 0x960),8];[(RSP_0 -64 0x968),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003cdd"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fstat_INODE64) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003cdd: TEST EAX, EAX 2"
 Post  "RAX = bot(fun__fstat_INODE64) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003cdf"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fstat_INODE64) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003cdf: JNE 4294983037 6"
 Post  "RAX = bot(fun__fstat_INODE64) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003801, blockId == 69 ##
######################################
*)

htriple "ht_100003ce5"
 Separations "((RSP_0 -64 0x9f4),2) SEP ([0x100004010,8]_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun__fstat_INODE64) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003ce5: MOVZX EAX, WORD PTR [RBP - 2540] 7"
 Post  "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003cec"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003cec: AND EAX, 61440 5"
 Post  "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003cf1"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003cf1: CMP EAX, 32768 5"
 Post  "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003cf6"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003cf6: JNE 4294981885 6"
 Post  "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003801, blockId == 70 ##
######################################
*)

htriple "ht_100003d7d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fstat_INODE64) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003d7d: LEA RDI, [RIP + 490] 7"
 Post  "RAX = bot(fun__fstat_INODE64) ; RDI = 0x100003f6e ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003d84"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fstat_INODE64) ; RDI = 0x100003f6e ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003d84: JMP 4294982826 5"
 Post  "RAX = bot(fun__fstat_INODE64) ; RDI = 0x100003f6e ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003801, blockId == 71 ##
######################################
*)

htriple "ht_100003cfc"
 Separations "((RSP_0 -64 0x998),8) SEP ([0x100004010,8]_0,8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003cfc: MOV RSI, QWORD PTR [RBP - 2448] 7"
 Post  "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003d03"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003d03: LEA RDI, [RIP + 622] 7"
 Post  "RDI = 0x100003f78 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003d0a"
 Separations ""
 Assertions  ""
 Pre   "RDI = 0x100003f78 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003d0a: XOR R15D, R15D 3"
 Post  "RDI = 0x100003f78 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003d0d"
 Separations ""
 Assertions  ""
 Pre   "RDI = 0x100003f78 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003d0d: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RDI = 0x100003f78 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003d0f"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RDI = 0x100003f78 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003d0f: ExternalCall fun__printf 5"
 Post  "RAX = bot(fun__printf) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 FunctionConstraints "PRESERVES fun__printf {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[0x100004008,8];[0x100004010,8];[0x1000080a0,8];[0x1000080a8,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 0x8ac),4];[(RSP_0 -64 0x8c8),16];[(RSP_0 -64 0x8d8),16];[(RSP_0 -64 0x8e8),16];[(RSP_0 -64 0x8f8),16];[(RSP_0 -64 0x908),16];[(RSP_0 -64 0x918),16];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x93c),4];[(RSP_0 -64 0x940),4];[(RSP_0 -64 0x948),8];[(RSP_0 -64 0x94c),4];[(RSP_0 -64 0x958),8];[(RSP_0 -64 0x960),8];[(RSP_0 -64 0x968),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003d14"
 Separations "((RSP_0 -64 0x998),8) SEP ([0x100004010,8]_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun__printf) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003d14: MOV RAX, QWORD PTR [RBP - 2448] 7"
 Post  "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003d1b"
 Separations "(0x10000a0c0,8) SEP (bot(fun____error),4); (0x10000a0c0,8) SEP (RSP_0,8); (0x10000a0c0,8) SEP ([0x100004010,8]_0,8); (0x10000a0c0,8) SEP ((RSP_0 -64 8),8); (0x10000a0c0,8) SEP ((RSP_0 -64 16),8); (0x10000a0c0,8) SEP ((RSP_0 -64 24),8); (0x10000a0c0,8) SEP ((RSP_0 -64 32),8); (0x10000a0c0,8) SEP ((RSP_0 -64 40),8); (0x10000a0c0,8) SEP ((RSP_0 -64 48),8); (0x10000a0c0,8) SEP ((RSP_0 -64 56),8); (0x10000a0c0,8) SEP ((RSP_0 -64 0x8ac),4); (0x10000a0c0,8) SEP ((RSP_0 -64 0x8c8),16); (0x10000a0c0,8) SEP ((RSP_0 -64 0x8d8),16); (0x10000a0c0,8) SEP ((RSP_0 -64 0x8e8),16); (0x10000a0c0,8) SEP ((RSP_0 -64 0x8f8),16); (0x10000a0c0,8) SEP ((RSP_0 -64 0x908),16); (0x10000a0c0,8) SEP ((RSP_0 -64 0x918),16); (0x10000a0c0,8) SEP ((RSP_0 -64 0x928),16); (0x10000a0c0,8) SEP ((RSP_0 -64 0x938),16); (0x10000a0c0,8) SEP ((RSP_0 -64 0x93c),4); (0x10000a0c0,8) SEP ((RSP_0 -64 0x940),4); (0x10000a0c0,8) SEP ((RSP_0 -64 0x948),8); (0x10000a0c0,8) SEP ((RSP_0 -64 0x94c),4); (0x10000a0c0,8) SEP ((RSP_0 -64 0x958),8); (0x10000a0c0,8) SEP ((RSP_0 -64 0x960),8); (0x10000a0c0,8) SEP ((RSP_0 -64 0x968),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003d1b: ADD QWORD PTR [RIP + 25502], RAX 7"
 Post  "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003d22"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003d22: MOV EDI, R14D 3"
 Post  "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003d25"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003d25: JMP 4294982809 5"
 Post  "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003801, blockId == 72 ##
######################################
*)

htriple "ht_100003c99"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003c99: ExternalCall fun__close 5"
 Post  "RAX = bot(fun__close) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 FunctionConstraints "PRESERVES fun__close {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[0x100004008,8];[0x100004010,8];[0x1000080a0,8];[0x1000080a8,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 0x8ac),4];[(RSP_0 -64 0x8c8),16];[(RSP_0 -64 0x8d8),16];[(RSP_0 -64 0x8e8),16];[(RSP_0 -64 0x8f8),16];[(RSP_0 -64 0x908),16];[(RSP_0 -64 0x918),16];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x93c),4];[(RSP_0 -64 0x940),4];[(RSP_0 -64 0x948),8];[(RSP_0 -64 0x94c),4];[(RSP_0 -64 0x958),8];[(RSP_0 -64 0x960),8];[(RSP_0 -64 0x968),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003c9e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__close) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
 Instruction "100003c9e: JMP 4294982609 5"
 Post  "RAX = bot(fun__close) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 0x8c8),16] = [(RSP_0 -64 0x8c8),16]_0 ; [(RSP_0 -64 0x8d8),16] = [(RSP_0 -64 0x8d8),16]_0 ; [(RSP_0 -64 0x8e8),16] = [(RSP_0 -64 0x8e8),16]_0 ; [(RSP_0 -64 0x8f8),16] = [(RSP_0 -64 0x8f8),16]_0 ; [(RSP_0 -64 0x908),16] = [(RSP_0 -64 0x908),16]_0 ; [(RSP_0 -64 0x918),16] = [(RSP_0 -64 0x918),16]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x93c),4] = [(RSP_0 -64 0x93c),4]_0 ; [(RSP_0 -64 0x940),4] = [(RSP_0 -64 0x940),4]_0 ; [(RSP_0 -64 0x94c),4] = [(RSP_0 -64 0x94c),4]_0 ; [(RSP_0 -64 0x958),8] = [(RSP_0 -64 0x958),8]_0 ; [(RSP_0 -64 0x960),8] = [(RSP_0 -64 0x960),8]_0 ; [(RSP_0 -64 0x968),8] = [(RSP_0 -64 0x968),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003801, blockId == 73 ##
######################################
*)

htriple "ht_100003d3b"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003d3b: MOV R15D, 1 6"
 Post  "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003d41"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003d41: JMP 4294982609 5"
 Post  "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003801, blockId == 74 ##
######################################
*)

htriple "ht_100003cbb"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__warn) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003cbb: ExternalCall fun__close 5"
 Post  "RAX = bot(fun__close) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 FunctionConstraints "PRESERVES fun__close {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[0x100004008,8];[0x100004010,8];[0x1000080a0,8];[0x1000080a8,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 0x8ac),4];[(RSP_0 -64 0x8c8),16];[(RSP_0 -64 0x8d8),16];[(RSP_0 -64 0x8e8),16];[(RSP_0 -64 0x8f8),16];[(RSP_0 -64 0x908),16];[(RSP_0 -64 0x918),16];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x93c),4];[(RSP_0 -64 0x940),4];[(RSP_0 -64 0x948),8];[(RSP_0 -64 0x94c),4];[(RSP_0 -64 0x958),8];[(RSP_0 -64 0x960),8];[(RSP_0 -64 0x968),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003cc0"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__close) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003cc0: JMP 4294982971 2"
 Post  "RAX = bot(fun__close) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003801, blockId == 75 ##
######################################
*)

htriple "ht_100003caa"
 Separations "((RSP_0 -64 0x948),8) SEP (bot(fun____error),4); ((RSP_0 -64 0x948),8) SEP ([0x100004010,8]_0,8); ((RSP_0 -64 0x948),8) SEP (0x100004000,8); ((RSP_0 -64 0x948),8) SEP (0x100004008,8); ((RSP_0 -64 0x948),8) SEP (0x100004010,8); ((RSP_0 -64 0x948),8) SEP (0x1000080a0,8); ((RSP_0 -64 0x948),8) SEP (0x1000080a8,8); ((RSP_0 -64 0x948),8) SEP (0x10000a0c0,8); ((RSP_0 -64 0x948),8) SEP (0x10000a0c8,8); ((RSP_0 -64 0x948),8) SEP (0x10000a0d0,8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003caa: MOV RSI, QWORD PTR [RBP - 2368] 7"
 Post  "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003cb1"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003cb1: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003cb3"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003cb3: ExternalCall fun__warn 5"
 Post  "RAX = bot(fun__warn) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 FunctionConstraints "PRESERVES fun__warn {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[0x100004008,8];[0x100004010,8];[0x1000080a0,8];[0x1000080a8,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 0x8ac),4];[(RSP_0 -64 0x8c8),16];[(RSP_0 -64 0x8d8),16];[(RSP_0 -64 0x8e8),16];[(RSP_0 -64 0x8f8),16];[(RSP_0 -64 0x908),16];[(RSP_0 -64 0x918),16];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x93c),4];[(RSP_0 -64 0x940),4];[(RSP_0 -64 0x948),8];[(RSP_0 -64 0x94c),4];[(RSP_0 -64 0x958),8];[(RSP_0 -64 0x960),8];[(RSP_0 -64 0x968),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003cb8"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__warn) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100003cb8: MOV EDI, R14D 3"
 Post  "RAX = bot(fun__warn) ; RSP = (RSP_0 -64 0x9f8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




end
end
