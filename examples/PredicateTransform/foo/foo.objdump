
foo:     file format elf64-x86-64


Disassembly of section .init:

00000000000004b8 <_init>:
 4b8:	sub    rsp,0x8
 4bc:	mov    rax,QWORD PTR [rip+0x200b25]        # 200fe8 <__gmon_start__>
 4c3:	test   rax,rax
 4c6:	je     4ca <_init+0x12>
 4c8:	call   rax
 4ca:	add    rsp,0x8
 4ce:	ret    

Disassembly of section .plt:

00000000000004d0 <.plt>:
 4d0:	push   QWORD PTR [rip+0x200af2]        # 200fc8 <_GLOBAL_OFFSET_TABLE_+0x8>
 4d6:	jmp    QWORD PTR [rip+0x200af4]        # 200fd0 <_GLOBAL_OFFSET_TABLE_+0x10>
 4dc:	nop    DWORD PTR [rax+0x0]

Disassembly of section .plt.got:

00000000000004e0 <__cxa_finalize@plt>:
 4e0:	jmp    QWORD PTR [rip+0x200b12]        # 200ff8 <__cxa_finalize@GLIBC_2.2.5>
 4e6:	xchg   ax,ax

Disassembly of section .text:

00000000000004f0 <_start>:
 4f0:	xor    ebp,ebp
 4f2:	mov    r9,rdx
 4f5:	pop    rsi
 4f6:	mov    rdx,rsp
 4f9:	and    rsp,0xfffffffffffffff0
 4fd:	push   rax
 4fe:	push   rsp
 4ff:	lea    r8,[rip+0x20a]        # 710 <__libc_csu_fini>
 506:	lea    rcx,[rip+0x193]        # 6a0 <__libc_csu_init>
 50d:	lea    rdi,[rip+0x12b]        # 63f <main>
 514:	call   QWORD PTR [rip+0x200ac6]        # 200fe0 <__libc_start_main@GLIBC_2.2.5>
 51a:	hlt    
 51b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000000520 <deregister_tm_clones>:
 520:	lea    rdi,[rip+0x200ae9]        # 201010 <__TMC_END__>
 527:	push   rbp
 528:	lea    rax,[rip+0x200ae1]        # 201010 <__TMC_END__>
 52f:	cmp    rax,rdi
 532:	mov    rbp,rsp
 535:	je     550 <deregister_tm_clones+0x30>
 537:	mov    rax,QWORD PTR [rip+0x200a9a]        # 200fd8 <_ITM_deregisterTMCloneTable>
 53e:	test   rax,rax
 541:	je     550 <deregister_tm_clones+0x30>
 543:	pop    rbp
 544:	jmp    rax
 546:	nop    WORD PTR cs:[rax+rax*1+0x0]
 550:	pop    rbp
 551:	ret    
 552:	nop    DWORD PTR [rax+0x0]
 556:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000000560 <register_tm_clones>:
 560:	lea    rdi,[rip+0x200aa9]        # 201010 <__TMC_END__>
 567:	lea    rsi,[rip+0x200aa2]        # 201010 <__TMC_END__>
 56e:	push   rbp
 56f:	sub    rsi,rdi
 572:	mov    rbp,rsp
 575:	sar    rsi,0x3
 579:	mov    rax,rsi
 57c:	shr    rax,0x3f
 580:	add    rsi,rax
 583:	sar    rsi,1
 586:	je     5a0 <register_tm_clones+0x40>
 588:	mov    rax,QWORD PTR [rip+0x200a61]        # 200ff0 <_ITM_registerTMCloneTable>
 58f:	test   rax,rax
 592:	je     5a0 <register_tm_clones+0x40>
 594:	pop    rbp
 595:	jmp    rax
 597:	nop    WORD PTR [rax+rax*1+0x0]
 5a0:	pop    rbp
 5a1:	ret    
 5a2:	nop    DWORD PTR [rax+0x0]
 5a6:	nop    WORD PTR cs:[rax+rax*1+0x0]

00000000000005b0 <__do_global_dtors_aux>:
 5b0:	cmp    BYTE PTR [rip+0x200a59],0x0        # 201010 <__TMC_END__>
 5b7:	jne    5e8 <__do_global_dtors_aux+0x38>
 5b9:	cmp    QWORD PTR [rip+0x200a37],0x0        # 200ff8 <__cxa_finalize@GLIBC_2.2.5>
 5c1:	push   rbp
 5c2:	mov    rbp,rsp
 5c5:	je     5d3 <__do_global_dtors_aux+0x23>
 5c7:	mov    rdi,QWORD PTR [rip+0x200a3a]        # 201008 <__dso_handle>
 5ce:	call   4e0 <__cxa_finalize@plt>
 5d3:	call   520 <deregister_tm_clones>
 5d8:	mov    BYTE PTR [rip+0x200a31],0x1        # 201010 <__TMC_END__>
 5df:	pop    rbp
 5e0:	ret    
 5e1:	nop    DWORD PTR [rax+0x0]
 5e8:	repz ret 
 5ea:	nop    WORD PTR [rax+rax*1+0x0]

00000000000005f0 <frame_dummy>:
 5f0:	push   rbp
 5f1:	mov    rbp,rsp
 5f4:	pop    rbp
 5f5:	jmp    560 <register_tm_clones>

00000000000005fa <foo>:
 5fa:	push   rbp
 5fb:	mov    rbp,rsp
 5fe:	mov    QWORD PTR [rbp-0x18],rdi
 602:	mov    QWORD PTR [rbp-0x20],rsi
 606:	mov    QWORD PTR [rbp-0x28],rdx
 60a:	mov    rax,QWORD PTR [rbp-0x18]
 60e:	mov    BYTE PTR [rax],0x2a
 611:	mov    QWORD PTR [rbp-0x8],0x0
 619:	jmp    632 <foo+0x38>
 61b:	mov    rax,QWORD PTR [rbp-0x20]
 61f:	movzx  eax,BYTE PTR [rax]
 622:	add    eax,0x1
 625:	mov    edx,eax
 627:	mov    rax,QWORD PTR [rbp-0x20]
 62b:	mov    BYTE PTR [rax],dl
 62d:	add    QWORD PTR [rbp-0x8],0x1
 632:	mov    rax,QWORD PTR [rbp-0x8]
 636:	cmp    rax,QWORD PTR [rbp-0x28]
 63a:	jb     61b <foo+0x21>
 63c:	nop
 63d:	pop    rbp
 63e:	ret    

000000000000063f <main>:
 63f:	push   rbp
 640:	mov    rbp,rsp
 643:	sub    rsp,0x10
 647:	mov    DWORD PTR [rbp-0x4],edi
 64a:	mov    QWORD PTR [rbp-0x10],rsi
 64e:	mov    eax,DWORD PTR [rbp-0x4]
 651:	movsxd rdx,eax
 654:	mov    rax,QWORD PTR [rbp-0x10]
 658:	add    rax,0x10
 65c:	mov    rcx,QWORD PTR [rax]
 65f:	mov    rax,QWORD PTR [rbp-0x10]
 663:	add    rax,0x8
 667:	mov    rax,QWORD PTR [rax]
 66a:	mov    rsi,rcx
 66d:	mov    rdi,rax
 670:	call   5fa <foo>
 675:	mov    rax,QWORD PTR [rbp-0x10]
 679:	add    rax,0x8
 67d:	mov    rax,QWORD PTR [rax]
 680:	movzx  eax,BYTE PTR [rax]
 683:	movsx  edx,al
 686:	mov    rax,QWORD PTR [rbp-0x10]
 68a:	add    rax,0x10
 68e:	mov    rax,QWORD PTR [rax]
 691:	movzx  eax,BYTE PTR [rax]
 694:	movsx  eax,al
 697:	add    eax,edx
 699:	leave  
 69a:	ret    
 69b:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000006a0 <__libc_csu_init>:
 6a0:	push   r15
 6a2:	push   r14
 6a4:	mov    r15,rdx
 6a7:	push   r13
 6a9:	push   r12
 6ab:	lea    r12,[rip+0x20073e]        # 200df0 <__frame_dummy_init_array_entry>
 6b2:	push   rbp
 6b3:	lea    rbp,[rip+0x20073e]        # 200df8 <__init_array_end>
 6ba:	push   rbx
 6bb:	mov    r13d,edi
 6be:	mov    r14,rsi
 6c1:	sub    rbp,r12
 6c4:	sub    rsp,0x8
 6c8:	sar    rbp,0x3
 6cc:	call   4b8 <_init>
 6d1:	test   rbp,rbp
 6d4:	je     6f6 <__libc_csu_init+0x56>
 6d6:	xor    ebx,ebx
 6d8:	nop    DWORD PTR [rax+rax*1+0x0]
 6e0:	mov    rdx,r15
 6e3:	mov    rsi,r14
 6e6:	mov    edi,r13d
 6e9:	call   QWORD PTR [r12+rbx*8]
 6ed:	add    rbx,0x1
 6f1:	cmp    rbp,rbx
 6f4:	jne    6e0 <__libc_csu_init+0x40>
 6f6:	add    rsp,0x8
 6fa:	pop    rbx
 6fb:	pop    rbp
 6fc:	pop    r12
 6fe:	pop    r13
 700:	pop    r14
 702:	pop    r15
 704:	ret    
 705:	nop
 706:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000000710 <__libc_csu_fini>:
 710:	repz ret 

Disassembly of section .fini:

0000000000000714 <_fini>:
 714:	sub    rsp,0x8
 718:	add    rsp,0x8
 71c:	ret    
