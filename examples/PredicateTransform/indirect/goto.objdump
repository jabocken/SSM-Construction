
goto:     file format elf64-x86-64


Disassembly of section .init:

00000000000005e8 <_init>:
 5e8:	sub    rsp,0x8
 5ec:	mov    rax,QWORD PTR [rip+0x2009f5]        # 200fe8 <__gmon_start__>
 5f3:	test   rax,rax
 5f6:	je     5fa <_init+0x12>
 5f8:	call   rax
 5fa:	add    rsp,0x8
 5fe:	ret    

Disassembly of section .plt:

0000000000000600 <.plt>:
 600:	push   QWORD PTR [rip+0x20099a]        # 200fa0 <_GLOBAL_OFFSET_TABLE_+0x8>
 606:	jmp    QWORD PTR [rip+0x20099c]        # 200fa8 <_GLOBAL_OFFSET_TABLE_+0x10>
 60c:	nop    DWORD PTR [rax+0x0]

0000000000000610 <puts@plt>:
 610:	jmp    QWORD PTR [rip+0x20099a]        # 200fb0 <puts@GLIBC_2.2.5>
 616:	push   0x0
 61b:	jmp    600 <.plt>

0000000000000620 <__stack_chk_fail@plt>:
 620:	jmp    QWORD PTR [rip+0x200992]        # 200fb8 <__stack_chk_fail@GLIBC_2.4>
 626:	push   0x1
 62b:	jmp    600 <.plt>

0000000000000630 <srand@plt>:
 630:	jmp    QWORD PTR [rip+0x20098a]        # 200fc0 <srand@GLIBC_2.2.5>
 636:	push   0x2
 63b:	jmp    600 <.plt>

0000000000000640 <time@plt>:
 640:	jmp    QWORD PTR [rip+0x200982]        # 200fc8 <time@GLIBC_2.2.5>
 646:	push   0x3
 64b:	jmp    600 <.plt>

0000000000000650 <rand@plt>:
 650:	jmp    QWORD PTR [rip+0x20097a]        # 200fd0 <rand@GLIBC_2.2.5>
 656:	push   0x4
 65b:	jmp    600 <.plt>

Disassembly of section .plt.got:

0000000000000660 <__cxa_finalize@plt>:
 660:	jmp    QWORD PTR [rip+0x200992]        # 200ff8 <__cxa_finalize@GLIBC_2.2.5>
 666:	xchg   ax,ax

Disassembly of section .text:

0000000000000670 <_start>:
 670:	xor    ebp,ebp
 672:	mov    r9,rdx
 675:	pop    rsi
 676:	mov    rdx,rsp
 679:	and    rsp,0xfffffffffffffff0
 67d:	push   rax
 67e:	push   rsp
 67f:	lea    r8,[rip+0x2ea]        # 970 <__libc_csu_fini>
 686:	lea    rcx,[rip+0x273]        # 900 <__libc_csu_init>
 68d:	lea    rdi,[rip+0xe6]        # 77a <main>
 694:	call   QWORD PTR [rip+0x200946]        # 200fe0 <__libc_start_main@GLIBC_2.2.5>
 69a:	hlt    
 69b:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000006a0 <deregister_tm_clones>:
 6a0:	lea    rdi,[rip+0x200969]        # 201010 <__TMC_END__>
 6a7:	push   rbp
 6a8:	lea    rax,[rip+0x200961]        # 201010 <__TMC_END__>
 6af:	cmp    rax,rdi
 6b2:	mov    rbp,rsp
 6b5:	je     6d0 <deregister_tm_clones+0x30>
 6b7:	mov    rax,QWORD PTR [rip+0x20091a]        # 200fd8 <_ITM_deregisterTMCloneTable>
 6be:	test   rax,rax
 6c1:	je     6d0 <deregister_tm_clones+0x30>
 6c3:	pop    rbp
 6c4:	jmp    rax
 6c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
 6d0:	pop    rbp
 6d1:	ret    
 6d2:	nop    DWORD PTR [rax+0x0]
 6d6:	nop    WORD PTR cs:[rax+rax*1+0x0]

00000000000006e0 <register_tm_clones>:
 6e0:	lea    rdi,[rip+0x200929]        # 201010 <__TMC_END__>
 6e7:	lea    rsi,[rip+0x200922]        # 201010 <__TMC_END__>
 6ee:	push   rbp
 6ef:	sub    rsi,rdi
 6f2:	mov    rbp,rsp
 6f5:	sar    rsi,0x3
 6f9:	mov    rax,rsi
 6fc:	shr    rax,0x3f
 700:	add    rsi,rax
 703:	sar    rsi,1
 706:	je     720 <register_tm_clones+0x40>
 708:	mov    rax,QWORD PTR [rip+0x2008e1]        # 200ff0 <_ITM_registerTMCloneTable>
 70f:	test   rax,rax
 712:	je     720 <register_tm_clones+0x40>
 714:	pop    rbp
 715:	jmp    rax
 717:	nop    WORD PTR [rax+rax*1+0x0]
 720:	pop    rbp
 721:	ret    
 722:	nop    DWORD PTR [rax+0x0]
 726:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000000730 <__do_global_dtors_aux>:
 730:	cmp    BYTE PTR [rip+0x2008d9],0x0        # 201010 <__TMC_END__>
 737:	jne    768 <__do_global_dtors_aux+0x38>
 739:	cmp    QWORD PTR [rip+0x2008b7],0x0        # 200ff8 <__cxa_finalize@GLIBC_2.2.5>
 741:	push   rbp
 742:	mov    rbp,rsp
 745:	je     753 <__do_global_dtors_aux+0x23>
 747:	mov    rdi,QWORD PTR [rip+0x2008ba]        # 201008 <__dso_handle>
 74e:	call   660 <__cxa_finalize@plt>
 753:	call   6a0 <deregister_tm_clones>
 758:	mov    BYTE PTR [rip+0x2008b1],0x1        # 201010 <__TMC_END__>
 75f:	pop    rbp
 760:	ret    
 761:	nop    DWORD PTR [rax+0x0]
 768:	repz ret 
 76a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000000770 <frame_dummy>:
 770:	push   rbp
 771:	mov    rbp,rsp
 774:	pop    rbp
 775:	jmp    6e0 <register_tm_clones>

000000000000077a <main>:
 77a:	push   rbp
 77b:	mov    rbp,rsp
 77e:	sub    rsp,0x40
 782:	mov    DWORD PTR [rbp-0x34],edi
 785:	mov    QWORD PTR [rbp-0x40],rsi
 789:	mov    rax,QWORD PTR fs:0x28
 792:	mov    QWORD PTR [rbp-0x8],rax
 796:	xor    eax,eax
 798:	mov    edi,0x0
 79d:	call   640 <time@plt>
 7a2:	mov    edi,eax
 7a4:	call   630 <srand@plt>
 7a9:	lea    rax,[rip+0x4c]        # 7fc <main+0x82>
 7b0:	mov    QWORD PTR [rbp-0x20],rax
 7b4:	lea    rax,[rip+0x8a]        # 845 <main+0xcb>
 7bb:	mov    QWORD PTR [rbp-0x18],rax
 7bf:	lea    rax,[rip+0xc0]        # 886 <main+0x10c>
 7c6:	mov    QWORD PTR [rbp-0x10],rax
 7ca:	mov    DWORD PTR [rbp-0x24],0x0
 7d1:	call   650 <rand@plt>
 7d6:	mov    ecx,eax
 7d8:	mov    edx,0x55555556
 7dd:	mov    eax,ecx
 7df:	imul   edx
 7e1:	mov    eax,ecx
 7e3:	sar    eax,0x1f
 7e6:	sub    edx,eax
 7e8:	mov    eax,edx
 7ea:	add    eax,eax
 7ec:	add    eax,edx
 7ee:	sub    ecx,eax
 7f0:	mov    edx,ecx
 7f2:	movsxd rax,edx
 7f5:	mov    rax,QWORD PTR [rbp+rax*8-0x20]
 7fa:	jmp    818 <main+0x9e>
 7fc:	lea    rdi,[rip+0x181]        # 984 <_IO_stdin_used+0x4>
 803:	call   610 <puts@plt>
 808:	add    DWORD PTR [rbp-0x24],0x1
 80c:	cmp    DWORD PTR [rbp-0x24],0x3
 810:	je     8ca <main+0x150>
 816:	jmp    81a <main+0xa0>
 818:	jmp    rax
 81a:	call   650 <rand@plt>
 81f:	mov    ecx,eax
 821:	mov    edx,0x55555556
 826:	mov    eax,ecx
 828:	imul   edx
 82a:	mov    eax,ecx
 82c:	sar    eax,0x1f
 82f:	sub    edx,eax
 831:	mov    eax,edx
 833:	add    eax,eax
 835:	add    eax,edx
 837:	sub    ecx,eax
 839:	mov    edx,ecx
 83b:	movsxd rax,edx
 83e:	mov    rax,QWORD PTR [rbp+rax*8-0x20]
 843:	jmp    818 <main+0x9e>
 845:	lea    rdi,[rip+0x143]        # 98f <_IO_stdin_used+0xf>
 84c:	call   610 <puts@plt>
 851:	add    DWORD PTR [rbp-0x24],0x1
 855:	cmp    DWORD PTR [rbp-0x24],0x3
 859:	je     8cd <main+0x153>
 85b:	call   650 <rand@plt>
 860:	mov    ecx,eax
 862:	mov    edx,0x55555556
 867:	mov    eax,ecx
 869:	imul   edx
 86b:	mov    eax,ecx
 86d:	sar    eax,0x1f
 870:	sub    edx,eax
 872:	mov    eax,edx
 874:	add    eax,eax
 876:	add    eax,edx
 878:	sub    ecx,eax
 87a:	mov    edx,ecx
 87c:	movsxd rax,edx
 87f:	mov    rax,QWORD PTR [rbp+rax*8-0x20]
 884:	jmp    818 <main+0x9e>
 886:	lea    rdi,[rip+0x10d]        # 99a <_IO_stdin_used+0x1a>
 88d:	call   610 <puts@plt>
 892:	add    DWORD PTR [rbp-0x24],0x1
 896:	cmp    DWORD PTR [rbp-0x24],0x3
 89a:	je     8d0 <main+0x156>
 89c:	call   650 <rand@plt>
 8a1:	mov    ecx,eax
 8a3:	mov    edx,0x55555556
 8a8:	mov    eax,ecx
 8aa:	imul   edx
 8ac:	mov    eax,ecx
 8ae:	sar    eax,0x1f
 8b1:	sub    edx,eax
 8b3:	mov    eax,edx
 8b5:	add    eax,eax
 8b7:	add    eax,edx
 8b9:	sub    ecx,eax
 8bb:	mov    edx,ecx
 8bd:	movsxd rax,edx
 8c0:	mov    rax,QWORD PTR [rbp+rax*8-0x20]
 8c5:	jmp    818 <main+0x9e>
 8ca:	nop
 8cb:	jmp    8d1 <main+0x157>
 8cd:	nop
 8ce:	jmp    8d1 <main+0x157>
 8d0:	nop
 8d1:	lea    rdi,[rip+0xcd]        # 9a5 <_IO_stdin_used+0x25>
 8d8:	call   610 <puts@plt>
 8dd:	mov    eax,0x0
 8e2:	mov    rsi,QWORD PTR [rbp-0x8]
 8e6:	xor    rsi,QWORD PTR fs:0x28
 8ef:	je     8f6 <main+0x17c>
 8f1:	call   620 <__stack_chk_fail@plt>
 8f6:	leave  
 8f7:	ret    
 8f8:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000000900 <__libc_csu_init>:
 900:	push   r15
 902:	push   r14
 904:	mov    r15,rdx
 907:	push   r13
 909:	push   r12
 90b:	lea    r12,[rip+0x200486]        # 200d98 <__frame_dummy_init_array_entry>
 912:	push   rbp
 913:	lea    rbp,[rip+0x200486]        # 200da0 <__init_array_end>
 91a:	push   rbx
 91b:	mov    r13d,edi
 91e:	mov    r14,rsi
 921:	sub    rbp,r12
 924:	sub    rsp,0x8
 928:	sar    rbp,0x3
 92c:	call   5e8 <_init>
 931:	test   rbp,rbp
 934:	je     956 <__libc_csu_init+0x56>
 936:	xor    ebx,ebx
 938:	nop    DWORD PTR [rax+rax*1+0x0]
 940:	mov    rdx,r15
 943:	mov    rsi,r14
 946:	mov    edi,r13d
 949:	call   QWORD PTR [r12+rbx*8]
 94d:	add    rbx,0x1
 951:	cmp    rbp,rbx
 954:	jne    940 <__libc_csu_init+0x40>
 956:	add    rsp,0x8
 95a:	pop    rbx
 95b:	pop    rbp
 95c:	pop    r12
 95e:	pop    r13
 960:	pop    r14
 962:	pop    r15
 964:	ret    
 965:	nop
 966:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000000970 <__libc_csu_fini>:
 970:	repz ret 

Disassembly of section .fini:

0000000000000974 <_fini>:
 974:	sub    rsp,0x8
 978:	add    rsp,0x8
 97c:	ret    
