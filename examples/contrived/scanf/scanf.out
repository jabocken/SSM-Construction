Entry                = 10c0
Size of TLS image    = Undefined
Start address of TLS = Undefined
FS                   = Undefined
Sections:
318: .interp (28)                       338: .note.gnu.property (32)            358: .note.gnu.build-id (36)            37c: .note.ABI-tag (32)                 
3a0: .gnu.hash (36)                     3c8: .dynsym (240)                      4b8: .dynstr (189)                      576: .gnu.version (20)                  
590: .gnu.version_r (64)                5d0: .rela.dyn (192)                    690: .rela.plt (96)                     1000: .init (27)                        
1020: .plt (80)                         1070: .plt.got (16)                     1080: .plt.sec (64)                     10c0: .text (485)                       
12a8: .fini (13)                        2000: .rodata (41)                      202c: .eh_frame_hdr (76)                2078: .eh_frame (296)                   
3da0: .init_array (8)                   3da8: .fini_array (8)                   3db0: .dynamic (496)                    3fa0: .got (96)                         
4000: .data (16)                        4010: .bss (8)                          0: .comment (42)                        0: .symtab (1656)                       
0: .strtab (594)                        0: .shstrtab (282)                      
Addresses mapped to symbols:
1000: _init                             10c0: _start                            10f0: deregister_tm_clones              1120: register_tm_clones                
1160: __do_global_dtors_aux             11a0: frame_dummy                       11a9: echo                              1217: main                              
1230: __libc_csu_init                   12a0: __libc_csu_fini                   12a8: _fini                             2000: _IO_stdin_used                    
202c: __GNU_EH_FRAME_HDR                219c: __FRAME_END__                     3da0: __init_array_start                3da8: __init_array_end                  
3db0: _DYNAMIC                          3fa0: _GLOBAL_OFFSET_TABLE_             3fb8: puts                              3fc0: __stack_chk_fail                  
3fc8: printf                            3fd0: __isoc99_scanf                    3fd8: _ITM_deregisterTMCloneTable       3fe0: __libc_start_main                 
3fe8: __gmon_start__                    3ff0: _ITM_registerTMCloneTable         3ff8: __cxa_finalize                    4000: __data_start                      
4008: __dso_handle                      4010: __TMC_END__                       4018: _end                              

-------------------------
0
10c0: ENDBR64  4
Edge from 10c0 to 10c4 with memory model: 
|
`- [RSP0, 8]

Postcondition = fromList [RIP = 4292,[RSP0,E_val 8 64 False] = 0_t]
-------------------------
0
10c4: XOR Reg EBP, Reg EBP 2
Edge from 10c4 to 10c6 with memory model: 
|
`- [RSP0, 8]

Postcondition = fromList [RIP = 4294,RBP = 0,ZF = <31,0>(RBP0),CF = <31,0>(RBP0),SF = <31,0>(RBP0),OF = <31,0>(RBP0),PF = <31,0>(RBP0),[RSP0,E_val 8 64 False] = 0_t]
-------------------------
0
10c6: MOV Reg R9, Reg RDX 3
Edge from 10c6 to 10c9 with memory model: 
|
`- [RSP0, 8]

Postcondition = fromList [RIP = 4297,RDX = RDX0,RBP = 0,R9 = RDX0,ZF = <31,0>(RBP0),CF = <31,0>(RBP0),SF = <31,0>(RBP0),OF = <31,0>(RBP0),PF = <31,0>(RBP0),[RSP0,E_val 8 64 False] = 0_t]
-------------------------
0
10c9: POP Reg RSI 1
Edge from 10c9 to 10ca with memory model: 
|
`- [RSP0, 8]

Postcondition = fromList [RIP = 4298,RDX = RDX0,RSI = 0_t,RSP = (RSP0 + 8),RBP = 0,R9 = RDX0,ZF = <31,0>(RBP0),CF = <31,0>(RBP0),SF = <31,0>(RBP0),OF = <31,0>(RBP0),PF = <31,0>(RBP0),[RSP0,E_val 8 64 False] = 0_t]
-------------------------
0
10ca: MOV Reg RDX, Reg RSP 3
Edge from 10ca to 10cd with memory model: 
|
`- [RSP0, 8]

Postcondition = fromList [RIP = 4301,RDX = (RSP0 + 8),RSI = 0_t,RSP = (RSP0 + 8),RBP = 0,R9 = RDX0,ZF = <31,0>(RBP0),CF = <31,0>(RBP0),SF = <31,0>(RBP0),OF = <31,0>(RBP0),PF = <31,0>(RBP0),[RSP0,E_val 8 64 False] = 0_t]
-------------------------
0
10cd: AND Reg RSP, Immediate 18446744073709551600 4
Edge from 10cd to 10d1 with memory model: 
|
`- [RSP0, 8]

Postcondition = fromList [RIP = 4305,RDX = (RSP0 + 8),RSI = 0_t,RSP = AND((RSP0 + 8),18446744073709551600),RBP = 0,R9 = RDX0,ZF = AND(AND((RSP0 + 8),18446744073709551600),18446744073709551600),CF = AND(AND((RSP0 + 8),18446744073709551600),18446744073709551600),SF = AND(AND((RSP0 + 8),18446744073709551600),18446744073709551600),OF = AND(AND((RSP0 + 8),18446744073709551600),18446744073709551600),PF = AND(AND((RSP0 + 8),18446744073709551600),18446744073709551600),[RSP0,E_val 8 64 False] = 0_t]
-------------------------
0
10d1: PUSH Reg RAX 1
Edge from 10d1 to 10d2 with memory model: 
|
+- [RSP0, 8]
|
`- [(AND((RSP0 + 8),18446744073709551600) - 8), 8]

Postcondition = fromList [RIP = 4306,RAX = RAX0,RDX = (RSP0 + 8),RSI = 0_t,RSP = (AND((RSP0 + 8),18446744073709551600) - 8),RBP = 0,R9 = RDX0,ZF = AND(AND((RSP0 + 8),18446744073709551600),18446744073709551600),CF = AND(AND((RSP0 + 8),18446744073709551600),18446744073709551600),SF = AND(AND((RSP0 + 8),18446744073709551600),18446744073709551600),OF = AND(AND((RSP0 + 8),18446744073709551600),18446744073709551600),PF = AND(AND((RSP0 + 8),18446744073709551600),18446744073709551600),[RSP0,E_val 8 64 False] = 0_t,[(AND((RSP0 + 8),18446744073709551600) - 8),E_val 8 64 False] = RAX0]
Edge from 10d1 to 10d2 with memory model: 
|
`- [RSP0, 8]:[(AND((RSP0 + 8),18446744073709551600) - 8), 8]

Postcondition = fromList [RIP = 4306,RAX = RAX0,RDX = (RSP0 + 8),RSI = 0_t,RSP = (AND((RSP0 + 8),18446744073709551600) - 8),RBP = 0,R9 = RDX0,ZF = AND(AND((RSP0 + 8),18446744073709551600),18446744073709551600),CF = AND(AND((RSP0 + 8),18446744073709551600),18446744073709551600),SF = AND(AND((RSP0 + 8),18446744073709551600),18446744073709551600),OF = AND(AND((RSP0 + 8),18446744073709551600),18446744073709551600),PF = AND(AND((RSP0 + 8),18446744073709551600),18446744073709551600),[(AND((RSP0 + 8),18446744073709551600) - 8),E_val 8 64 False] = RAX0]
-------------------------
1
10d2: PUSH Reg RSP 1
Edge from 10d2 to 10d3 with memory model: 
|
+- [RSP0, 8]
|
+- [(AND((RSP0 + 8),18446744073709551600) - 8), 8]
|
`- [(AND((RSP0 + 8),18446744073709551600) - 16), 8]

Postcondition = fromList [RIP = 4307,RAX = RAX0,RDX = (RSP0 + 8),RSI = 0_t,RSP = (AND((RSP0 + 8),18446744073709551600) - 16),RBP = 0,R9 = RDX0,ZF = AND(AND((RSP0 + 8),18446744073709551600),18446744073709551600),CF = AND(AND((RSP0 + 8),18446744073709551600),18446744073709551600),SF = AND(AND((RSP0 + 8),18446744073709551600),18446744073709551600),OF = AND(AND((RSP0 + 8),18446744073709551600),18446744073709551600),PF = AND(AND((RSP0 + 8),18446744073709551600),18446744073709551600),[RSP0,E_val 8 64 False] = 0_t,[(AND((RSP0 + 8),18446744073709551600) - 8),E_val 8 64 False] = RAX0,[(AND((RSP0 + 8),18446744073709551600) - 16),E_val 8 64 False] = (AND((RSP0 + 8),18446744073709551600) - 16)]
-------------------------
1
10d2: PUSH Reg RSP 1
Edge from 10d2 to 10d3 with memory model: 
|
+- [RSP0, 8]:[(AND((RSP0 + 8),18446744073709551600) - 8), 8]
|
`- [(AND((RSP0 + 8),18446744073709551600) - 16), 8]

Postcondition = fromList [RIP = 4307,RAX = RAX0,RDX = (RSP0 + 8),RSI = 0_t,RSP = (AND((RSP0 + 8),18446744073709551600) - 16),RBP = 0,R9 = RDX0,ZF = AND(AND((RSP0 + 8),18446744073709551600),18446744073709551600),CF = AND(AND((RSP0 + 8),18446744073709551600),18446744073709551600),SF = AND(AND((RSP0 + 8),18446744073709551600),18446744073709551600),OF = AND(AND((RSP0 + 8),18446744073709551600),18446744073709551600),PF = AND(AND((RSP0 + 8),18446744073709551600),18446744073709551600),[(AND((RSP0 + 8),18446744073709551600) - 8),E_val 8 64 False] = RAX0,[(AND((RSP0 + 8),18446744073709551600) - 16),E_val 8 64 False] = (AND((RSP0 + 8),18446744073709551600) - 16)]
-------------------------
1
10d3: LEA Reg R8, Address (SizeDir 64 (AddrPlus (FromReg RIP) (AddrImm 454))) 7
Edge from 10d3 to 10da with memory model: 
|
+- [RSP0, 8]
|
+- [(AND((RSP0 + 8),18446744073709551600) - 8), 8]
|
+- [(AND((RSP0 + 8),18446744073709551600) - 16), 8]
|
`- [4768, 8]

Postcondition = fromList [RIP = 4314,RAX = RAX0,RDX = (RSP0 + 8),RSI = 0_t,RSP = (AND((RSP0 + 8),18446744073709551600) - 16),RBP = 0,R9 = RDX0,R8 = 4768,ZF = AND(AND((RSP0 + 8),18446744073709551600),18446744073709551600),CF = AND(AND((RSP0 + 8),18446744073709551600),18446744073709551600),SF = AND(AND((RSP0 + 8),18446744073709551600),18446744073709551600),OF = AND(AND((RSP0 + 8),18446744073709551600),18446744073709551600),PF = AND(AND((RSP0 + 8),18446744073709551600),18446744073709551600),[RSP0,E_val 8 64 False] = 0_t,[(AND((RSP0 + 8),18446744073709551600) - 8),E_val 8 64 False] = RAX0,[(AND((RSP0 + 8),18446744073709551600) - 16),E_val 8 64 False] = (AND((RSP0 + 8),18446744073709551600) - 16)]
-------------------------
1
10d3: LEA Reg R8, Address (SizeDir 64 (AddrPlus (FromReg RIP) (AddrImm 454))) 7
Edge from 10d3 to 10da with memory model: 
|
+- [RSP0, 8]:[(AND((RSP0 + 8),18446744073709551600) - 8), 8]
|
+- [(AND((RSP0 + 8),18446744073709551600) - 16), 8]
|
`- [4768, 8]

Postcondition = fromList [RIP = 4314,RAX = RAX0,RDX = (RSP0 + 8),RSI = 0_t,RSP = (AND((RSP0 + 8),18446744073709551600) - 16),RBP = 0,R9 = RDX0,R8 = 4768,ZF = AND(AND((RSP0 + 8),18446744073709551600),18446744073709551600),CF = AND(AND((RSP0 + 8),18446744073709551600),18446744073709551600),SF = AND(AND((RSP0 + 8),18446744073709551600),18446744073709551600),OF = AND(AND((RSP0 + 8),18446744073709551600),18446744073709551600),PF = AND(AND((RSP0 + 8),18446744073709551600),18446744073709551600),[(AND((RSP0 + 8),18446744073709551600) - 8),E_val 8 64 False] = RAX0,[(AND((RSP0 + 8),18446744073709551600) - 16),E_val 8 64 False] = (AND((RSP0 + 8),18446744073709551600) - 16)]
-------------------------
1
10da: LEA Reg RCX, Address (SizeDir 64 (AddrPlus (FromReg RIP) (AddrImm 335))) 7
Edge from 10da to 10e1 with memory model: 
|
+- [RSP0, 8]
|
+- [(AND((RSP0 + 8),18446744073709551600) - 8), 8]
|
+- [(AND((RSP0 + 8),18446744073709551600) - 16), 8]
|
+- [4656, 8]
|
`- [4768, 8]

Postcondition = fromList [RIP = 4321,RAX = RAX0,RCX = 4656,RDX = (RSP0 + 8),RSI = 0_t,RSP = (AND((RSP0 + 8),18446744073709551600) - 16),RBP = 0,R9 = RDX0,R8 = 4768,ZF = AND(AND((RSP0 + 8),18446744073709551600),18446744073709551600),CF = AND(AND((RSP0 + 8),18446744073709551600),18446744073709551600),SF = AND(AND((RSP0 + 8),18446744073709551600),18446744073709551600),OF = AND(AND((RSP0 + 8),18446744073709551600),18446744073709551600),PF = AND(AND((RSP0 + 8),18446744073709551600),18446744073709551600),[RSP0,E_val 8 64 False] = 0_t,[(AND((RSP0 + 8),18446744073709551600) - 8),E_val 8 64 False] = RAX0,[(AND((RSP0 + 8),18446744073709551600) - 16),E_val 8 64 False] = (AND((RSP0 + 8),18446744073709551600) - 16)]
-------------------------
1
10da: LEA Reg RCX, Address (SizeDir 64 (AddrPlus (FromReg RIP) (AddrImm 335))) 7
Edge from 10da to 10e1 with memory model: 
|
+- [RSP0, 8]:[(AND((RSP0 + 8),18446744073709551600) - 8), 8]
|
+- [(AND((RSP0 + 8),18446744073709551600) - 16), 8]
|
+- [4656, 8]
|
`- [4768, 8]

Postcondition = fromList [RIP = 4321,RAX = RAX0,RCX = 4656,RDX = (RSP0 + 8),RSI = 0_t,RSP = (AND((RSP0 + 8),18446744073709551600) - 16),RBP = 0,R9 = RDX0,R8 = 4768,ZF = AND(AND((RSP0 + 8),18446744073709551600),18446744073709551600),CF = AND(AND((RSP0 + 8),18446744073709551600),18446744073709551600),SF = AND(AND((RSP0 + 8),18446744073709551600),18446744073709551600),OF = AND(AND((RSP0 + 8),18446744073709551600),18446744073709551600),PF = AND(AND((RSP0 + 8),18446744073709551600),18446744073709551600),[(AND((RSP0 + 8),18446744073709551600) - 8),E_val 8 64 False] = RAX0,[(AND((RSP0 + 8),18446744073709551600) - 16),E_val 8 64 False] = (AND((RSP0 + 8),18446744073709551600) - 16)]
-------------------------
1
10e1: LEA Reg RDI, Address (SizeDir 64 (AddrPlus (FromReg RIP) (AddrImm 303))) 7
Edge from 10e1 to 10e8 with memory model: 
|
+- [RSP0, 8]
|
+- [(AND((RSP0 + 8),18446744073709551600) - 8), 8]
|
+- [(AND((RSP0 + 8),18446744073709551600) - 16), 8]
|
+- [4631, 8]
|
+- [4656, 8]
|
`- [4768, 8]

Postcondition = fromList [RIP = 4328,RAX = RAX0,RCX = 4656,RDX = (RSP0 + 8),RDI = 4631,RSI = 0_t,RSP = (AND((RSP0 + 8),18446744073709551600) - 16),RBP = 0,R9 = RDX0,R8 = 4768,ZF = AND(AND((RSP0 + 8),18446744073709551600),18446744073709551600),CF = AND(AND((RSP0 + 8),18446744073709551600),18446744073709551600),SF = AND(AND((RSP0 + 8),18446744073709551600),18446744073709551600),OF = AND(AND((RSP0 + 8),18446744073709551600),18446744073709551600),PF = AND(AND((RSP0 + 8),18446744073709551600),18446744073709551600),[RSP0,E_val 8 64 False] = 0_t,[(AND((RSP0 + 8),18446744073709551600) - 8),E_val 8 64 False] = RAX0,[(AND((RSP0 + 8),18446744073709551600) - 16),E_val 8 64 False] = (AND((RSP0 + 8),18446744073709551600) - 16)]
-------------------------
1
10e1: LEA Reg RDI, Address (SizeDir 64 (AddrPlus (FromReg RIP) (AddrImm 303))) 7
Edge from 10e1 to 10e8 with memory model: 
|
+- [RSP0, 8]:[(AND((RSP0 + 8),18446744073709551600) - 8), 8]
|
+- [(AND((RSP0 + 8),18446744073709551600) - 16), 8]
|
+- [4631, 8]
|
+- [4656, 8]
|
`- [4768, 8]

Postcondition = fromList [RIP = 4328,RAX = RAX0,RCX = 4656,RDX = (RSP0 + 8),RDI = 4631,RSI = 0_t,RSP = (AND((RSP0 + 8),18446744073709551600) - 16),RBP = 0,R9 = RDX0,R8 = 4768,ZF = AND(AND((RSP0 + 8),18446744073709551600),18446744073709551600),CF = AND(AND((RSP0 + 8),18446744073709551600),18446744073709551600),SF = AND(AND((RSP0 + 8),18446744073709551600),18446744073709551600),OF = AND(AND((RSP0 + 8),18446744073709551600),18446744073709551600),PF = AND(AND((RSP0 + 8),18446744073709551600),18446744073709551600),[(AND((RSP0 + 8),18446744073709551600) - 8),E_val 8 64 False] = RAX0,[(AND((RSP0 + 8),18446744073709551600) - 16),E_val 8 64 False] = (AND((RSP0 + 8),18446744073709551600) - 16)]
-------------------------
1
10e8: CALL __libc_start_main (external)
Executing __libc_start_main
Calling main function at address: 1217

Edge from 10e8 to 1217 with memory model: 
|
`- [RSP0, 8]

Postcondition = fromList [RIP = 4631,[RSP0,E_val 8 64 False] = 0_t]
-------------------------
1
10e8: CALL __libc_start_main (external)
Executing __libc_start_main
Calling main function at address: 1217

Edge from 10e8 to 1217 with memory model: 
|
`- [RSP0, 8]

Postcondition = fromList [RIP = 4631,[RSP0,E_val 8 64 False] = 0_t]
-------------------------
0
1217: ENDBR64  4
Edge from 1217 to 121b with memory model: 
|
`- [RSP0, 8]

Postcondition = fromList [RIP = 4635,[RSP0,E_val 8 64 False] = 0_t]
-------------------------
0
121b: PUSH Reg RBP 1
Edge from 121b to 121c with memory model: 
|
+- [RSP0, 8]
|
`- [(RSP0 - 8), 8]

Postcondition = fromList [RIP = 4636,RSP = (RSP0 - 8),RBP = RBP0,[RSP0,E_val 8 64 False] = 0_t,[(RSP0 - 8),E_val 8 64 False] = RBP0]
-------------------------
0
121c: MOV Reg RBP, Reg RSP 3
Edge from 121c to 121f with memory model: 
|
+- [RSP0, 8]
|
`- [(RSP0 - 8), 8]

Postcondition = fromList [RIP = 4639,RSP = (RSP0 - 8),RBP = (RSP0 - 8),[RSP0,E_val 8 64 False] = 0_t,[(RSP0 - 8),E_val 8 64 False] = RBP0]
-------------------------
0
121f: MOV Reg EAX, Immediate 0 5
Edge from 121f to 1224 with memory model: 
|
+- [RSP0, 8]
|
`- [(RSP0 - 8), 8]

Postcondition = fromList [RIP = 4644,RAX = 0,RSP = (RSP0 - 8),RBP = (RSP0 - 8),[RSP0,E_val 8 64 False] = 0_t,[(RSP0 - 8),E_val 8 64 False] = RBP0]
-------------------------
0
1224: CALL echo (internal)
Function call with start address = 11a9 and return address = 1229
Edge from 1224 to 11a9 with memory model: 
|
`- [RSP0, 8]

Postcondition = fromList [RIP = 4521,RSP = RSP0,[RSP0,E_val 8 64 False] = 4649_t]
-------------------------
1
11a9: ENDBR64  4
Edge from 11a9 to 11ad with memory model: 
|
`- [RSP0, 8]

Postcondition = fromList [RIP = 4525,RSP = RSP0,[RSP0,E_val 8 64 False] = 4649_t]
-------------------------
1
11ad: PUSH Reg RBP 1
Edge from 11ad to 11ae with memory model: 
|
+- [RSP0, 8]
|
`- [(RSP0 - 8), 8]

Postcondition = fromList [RIP = 4526,RSP = (RSP0 - 8),RBP = RBP0,[RSP0,E_val 8 64 False] = 4649_t,[(RSP0 - 8),E_val 8 64 False] = RBP0]
-------------------------
1
11ae: MOV Reg RBP, Reg RSP 3
Edge from 11ae to 11b1 with memory model: 
|
+- [RSP0, 8]
|
`- [(RSP0 - 8), 8]

Postcondition = fromList [RIP = 4529,RSP = (RSP0 - 8),RBP = (RSP0 - 8),[RSP0,E_val 8 64 False] = 4649_t,[(RSP0 - 8),E_val 8 64 False] = RBP0]
-------------------------
1
11b1: SUB Reg RSP, Immediate 32 4
Edge from 11b1 to 11b5 with memory model: 
|
+- [RSP0, 8]
|
`- [(RSP0 - 8), 8]

Postcondition = fromList [RIP = 4533,RSP = (RSP0 - 40),RBP = (RSP0 - 8),ZF = (RSP0 - 72),CF = (RSP0 - 72),SF = (RSP0 - 72),OF = (RSP0 - 72),PF = (RSP0 - 72),[RSP0,E_val 8 64 False] = 4649_t,[(RSP0 - 8),E_val 8 64 False] = RBP0]
-------------------------
1
11b5: MOV Reg RAX, Address (SizeDir 64 (AddrPlus (FromReg FS) (AddrImm 40))) 9
Edge from 11b5 to 11be with memory model: 
|
+- [RSP0, 8]
|
+- [(FS0 + 40), 8]
|
`- [(RSP0 - 8), 8]

Postcondition = fromList [RIP = 4542,RAX = 64ADDvarFS0val40False0,RSP = (RSP0 - 40),RBP = (RSP0 - 8),FS = FS0,ZF = (RSP0 - 72),CF = (RSP0 - 72),SF = (RSP0 - 72),OF = (RSP0 - 72),PF = (RSP0 - 72),[RSP0,E_val 8 64 False] = 4649_t,[(FS0 + 40),E_val 8 64 False] = 64ADDvarFS0val40False0,[(RSP0 - 8),E_val 8 64 False] = RBP0]
-------------------------
1
11be: MOV Address (SizeDir 64 (AddrMinus (FromReg RBP) (AddrImm 8))), Reg RAX 4
Edge from 11be to 11c2 with memory model: 
|
+- [RSP0, 8]
|
+- [(FS0 + 40), 8]
|
+- [(RSP0 - 8), 8]
|
`- [(RSP0 - 16), 8]

Postcondition = fromList [RIP = 4546,RAX = 64ADDvarFS0val40False0,RSP = (RSP0 - 40),RBP = (RSP0 - 8),FS = FS0,ZF = (RSP0 - 72),CF = (RSP0 - 72),SF = (RSP0 - 72),OF = (RSP0 - 72),PF = (RSP0 - 72),[RSP0,E_val 8 64 False] = 4649_t,[(FS0 + 40),E_val 8 64 False] = 64ADDvarFS0val40False0,[(RSP0 - 8),E_val 8 64 False] = RBP0,[(RSP0 - 16),E_val 8 64 False] = 64ADDvarFS0val40False0]
-------------------------
1
11c2: XOR Reg EAX, Reg EAX 2
Edge from 11c2 to 11c4 with memory model: 
|
+- [RSP0, 8]
|
+- [(FS0 + 40), 8]
|
+- [(RSP0 - 8), 8]
|
`- [(RSP0 - 16), 8]

Postcondition = fromList [RIP = 4548,RAX = 0,RSP = (RSP0 - 40),RBP = (RSP0 - 8),FS = FS0,ZF = <31,0>(64ADDvarFS0val40False0),CF = <31,0>(64ADDvarFS0val40False0),SF = <31,0>(64ADDvarFS0val40False0),OF = <31,0>(64ADDvarFS0val40False0),PF = <31,0>(64ADDvarFS0val40False0),[RSP0,E_val 8 64 False] = 4649_t,[(FS0 + 40),E_val 8 64 False] = 64ADDvarFS0val40False0,[(RSP0 - 8),E_val 8 64 False] = RBP0,[(RSP0 - 16),E_val 8 64 False] = 64ADDvarFS0val40False0]
-------------------------
1
11c4: LEA Reg RDI, Address (SizeDir 64 (AddrPlus (FromReg RIP) (AddrImm 3641))) 7
Edge from 11c4 to 11cb with memory model: 
|
+- [RSP0, 8]
|
+- [(FS0 + 40), 8]
|
+- [(RSP0 - 8), 8]
|
+- [(RSP0 - 16), 8]
|
`- [8196, 8]

Postcondition = fromList [RIP = 4555,RAX = 0,RDI = 8196,RSP = (RSP0 - 40),RBP = (RSP0 - 8),FS = FS0,ZF = <31,0>(64ADDvarFS0val40False0),CF = <31,0>(64ADDvarFS0val40False0),SF = <31,0>(64ADDvarFS0val40False0),OF = <31,0>(64ADDvarFS0val40False0),PF = <31,0>(64ADDvarFS0val40False0),[RSP0,E_val 8 64 False] = 4649_t,[(FS0 + 40),E_val 8 64 False] = 64ADDvarFS0val40False0,[(RSP0 - 8),E_val 8 64 False] = RBP0,[(RSP0 - 16),E_val 8 64 False] = 64ADDvarFS0val40False0]
-------------------------
1
11cb: CALL puts (external)
Call to external function: puts
Edge from 11cb to 11d0 with memory model: 
|
+- [RSP0, 8]
|
+- [(FS0 + 40), 8]
|
+- [(RSP0 - 8), 8]
|
+- [(RSP0 - 16), 8]
|
+- [(RSP0 - 48), 8]
|
`- [8196, 8]

Postcondition = fromList [RIP = 4560,RDI = 8196,RSP = (RSP0 - 40),RBP = (RSP0 - 8),FS = FS0,[RSP0,E_val 8 64 False] = 4649_t,[(FS0 + 40),E_val 8 64 False] = 64ADDvarFS0val40False0,[(RSP0 - 8),E_val 8 64 False] = RBP0,[(RSP0 - 16),E_val 8 64 False] = 64ADDvarFS0val40False0]
-------------------------
1
11d0: LEA Reg RAX, Address (SizeDir 64 (AddrMinus (FromReg RBP) (AddrImm 32))) 4
Edge from 11d0 to 11d4 with memory model: 
|
+- [RSP0, 8]
|
+- [(FS0 + 40), 8]
|
+- [(RSP0 - 8), 8]
|
+- [(RSP0 - 16), 8]
|
+- [(RSP0 - 40), 8]
|
+- [(RSP0 - 48), 8]
|
`- [8196, 8]

Postcondition = fromList [RIP = 4564,RAX = (RSP0 - 40),RDI = 8196,RSP = (RSP0 - 40),RBP = (RSP0 - 8),FS = FS0,[RSP0,E_val 8 64 False] = 4649_t,[(FS0 + 40),E_val 8 64 False] = 64ADDvarFS0val40False0,[(RSP0 - 8),E_val 8 64 False] = RBP0,[(RSP0 - 16),E_val 8 64 False] = 64ADDvarFS0val40False0]
-------------------------
1
11d4: MOV Reg RSI, Reg RAX 3
Edge from 11d4 to 11d7 with memory model: 
|
+- [RSP0, 8]
|
+- [(FS0 + 40), 8]
|
+- [(RSP0 - 8), 8]
|
+- [(RSP0 - 16), 8]
|
+- [(RSP0 - 40), 8]
|
+- [(RSP0 - 48), 8]
|
`- [8196, 8]

Postcondition = fromList [RIP = 4567,RAX = (RSP0 - 40),RDI = 8196,RSI = (RSP0 - 40),RSP = (RSP0 - 40),RBP = (RSP0 - 8),FS = FS0,[RSP0,E_val 8 64 False] = 4649_t,[(FS0 + 40),E_val 8 64 False] = 64ADDvarFS0val40False0,[(RSP0 - 8),E_val 8 64 False] = RBP0,[(RSP0 - 16),E_val 8 64 False] = 64ADDvarFS0val40False0]
-------------------------
1
11d7: LEA Reg RDI, Address (SizeDir 64 (AddrPlus (FromReg RIP) (AddrImm 3639))) 7
Edge from 11d7 to 11de with memory model: 
|
+- [RSP0, 8]
|
+- [(FS0 + 40), 8]
|
+- [(RSP0 - 8), 8]
|
+- [(RSP0 - 16), 8]
|
+- [(RSP0 - 40), 8]
|
+- [(RSP0 - 48), 8]
|
+- [8196, 8]
|
`- [8213, 8]

Postcondition = fromList [RIP = 4574,RAX = (RSP0 - 40),RDI = 8213,RSI = (RSP0 - 40),RSP = (RSP0 - 40),RBP = (RSP0 - 8),FS = FS0,[RSP0,E_val 8 64 False] = 4649_t,[(FS0 + 40),E_val 8 64 False] = 64ADDvarFS0val40False0,[(RSP0 - 8),E_val 8 64 False] = RBP0,[(RSP0 - 16),E_val 8 64 False] = 64ADDvarFS0val40False0]
-------------------------
1
11de: MOV Reg EAX, Immediate 0 5
Edge from 11de to 11e3 with memory model: 
|
+- [RSP0, 8]
|
+- [(FS0 + 40), 8]
|
+- [(RSP0 - 8), 8]
|
+- [(RSP0 - 16), 8]
|
+- [(RSP0 - 40), 8]
|
+- [(RSP0 - 48), 8]
|
+- [8196, 8]
|
`- [8213, 8]

Postcondition = fromList [RIP = 4579,RAX = 0,RDI = 8213,RSI = (RSP0 - 40),RSP = (RSP0 - 40),RBP = (RSP0 - 8),FS = FS0,[RSP0,E_val 8 64 False] = 4649_t,[(FS0 + 40),E_val 8 64 False] = 64ADDvarFS0val40False0,[(RSP0 - 8),E_val 8 64 False] = RBP0,[(RSP0 - 16),E_val 8 64 False] = 64ADDvarFS0val40False0]
-------------------------
1
11e3: CALL __isoc99_scanf (external)
Call to external function: __isoc99_scanf
Edge from 11e3 to 11e8 with memory model: 
|
+- [RSP0, 8]
|
+- [(FS0 + 40), 8]
|
+- [(RSP0 - 8), 8]
|
+- [(RSP0 - 16), 8]
|
+- [(RSP0 - 40), 8]
|
+- [(RSP0 - 48), 8]
|
+- [8196, 8]
|
`- [8213, 8]

Postcondition = fromList [RIP = 4584,RDI = 8213,RSI = (RSP0 - 40),RSP = (RSP0 - 40),RBP = (RSP0 - 8),FS = FS0,[RSP0,E_val 8 64 False] = 4649_t,[(FS0 + 40),E_val 8 64 False] = 64ADDvarFS0val40False0,[(RSP0 - 8),E_val 8 64 False] = RBP0,[(RSP0 - 16),E_val 8 64 False] = 64ADDvarFS0val40False0]
-------------------------
1
11e8: LEA Reg RAX, Address (SizeDir 64 (AddrMinus (FromReg RBP) (AddrImm 32))) 4
Edge from 11e8 to 11ec with memory model: 
|
+- [RSP0, 8]
|
+- [(FS0 + 40), 8]
|
+- [(RSP0 - 8), 8]
|
+- [(RSP0 - 16), 8]
|
+- [(RSP0 - 40), 8]
|
+- [(RSP0 - 48), 8]
|
+- [8196, 8]
|
`- [8213, 8]

Postcondition = fromList [RIP = 4588,RAX = (RSP0 - 40),RDI = 8213,RSI = (RSP0 - 40),RSP = (RSP0 - 40),RBP = (RSP0 - 8),FS = FS0,[RSP0,E_val 8 64 False] = 4649_t,[(FS0 + 40),E_val 8 64 False] = 64ADDvarFS0val40False0,[(RSP0 - 8),E_val 8 64 False] = RBP0,[(RSP0 - 16),E_val 8 64 False] = 64ADDvarFS0val40False0]
-------------------------
1
11ec: MOV Reg RSI, Reg RAX 3
Edge from 11ec to 11ef with memory model: 
|
+- [RSP0, 8]
|
+- [(FS0 + 40), 8]
|
+- [(RSP0 - 8), 8]
|
+- [(RSP0 - 16), 8]
|
+- [(RSP0 - 40), 8]
|
+- [(RSP0 - 48), 8]
|
+- [8196, 8]
|
`- [8213, 8]

Postcondition = fromList [RIP = 4591,RAX = (RSP0 - 40),RDI = 8213,RSI = (RSP0 - 40),RSP = (RSP0 - 40),RBP = (RSP0 - 8),FS = FS0,[RSP0,E_val 8 64 False] = 4649_t,[(FS0 + 40),E_val 8 64 False] = 64ADDvarFS0val40False0,[(RSP0 - 8),E_val 8 64 False] = RBP0,[(RSP0 - 16),E_val 8 64 False] = 64ADDvarFS0val40False0]
-------------------------
1
11ef: LEA Reg RDI, Address (SizeDir 64 (AddrPlus (FromReg RIP) (AddrImm 3618))) 7
Edge from 11ef to 11f6 with memory model: 
|
+- [RSP0, 8]
|
+- [(FS0 + 40), 8]
|
+- [(RSP0 - 8), 8]
|
+- [(RSP0 - 16), 8]
|
+- [(RSP0 - 40), 8]
|
+- [(RSP0 - 48), 8]
|
+- [8196, 8]
|
+- [8213, 8]
|
`- [8216, 8]

Postcondition = fromList [RIP = 4598,RAX = (RSP0 - 40),RDI = 8216,RSI = (RSP0 - 40),RSP = (RSP0 - 40),RBP = (RSP0 - 8),FS = FS0,[RSP0,E_val 8 64 False] = 4649_t,[(FS0 + 40),E_val 8 64 False] = 64ADDvarFS0val40False0,[(RSP0 - 8),E_val 8 64 False] = RBP0,[(RSP0 - 16),E_val 8 64 False] = 64ADDvarFS0val40False0]
Edge from 11ef to 11f6 with memory model: 
|
+- [RSP0, 8]
|
+- [(FS0 + 40), 8]
|
+- [(RSP0 - 8), 8]
|
+- [(RSP0 - 16), 8]
|
+- [(RSP0 - 40), 8]
|
+- [(RSP0 - 48), 8]
|
+- [8196, 8]
|
`- [8213, 8]:[8216, 8]

Postcondition = fromList [RIP = 4598,RAX = (RSP0 - 40),RDI = 8216,RSI = (RSP0 - 40),RSP = (RSP0 - 40),RBP = (RSP0 - 8),FS = FS0,[RSP0,E_val 8 64 False] = 4649_t,[(FS0 + 40),E_val 8 64 False] = 64ADDvarFS0val40False0,[(RSP0 - 8),E_val 8 64 False] = RBP0,[(RSP0 - 16),E_val 8 64 False] = 64ADDvarFS0val40False0]
-------------------------
1
11f6: MOV Reg EAX, Immediate 0 5
Edge from 11f6 to 11fb with memory model: 
|
+- [RSP0, 8]
|
+- [(FS0 + 40), 8]
|
+- [(RSP0 - 8), 8]
|
+- [(RSP0 - 16), 8]
|
+- [(RSP0 - 40), 8]
|
+- [(RSP0 - 48), 8]
|
`- [8196, 8]

Postcondition = fromList [RIP = 4603,RAX = 0,RDI = 8216,RSI = (RSP0 - 40),RSP = (RSP0 - 40),RBP = (RSP0 - 8),FS = FS0,[RSP0,E_val 8 64 False] = 4649_t,[(FS0 + 40),E_val 8 64 False] = 64ADDvarFS0val40False0,[(RSP0 - 8),E_val 8 64 False] = RBP0,[(RSP0 - 16),E_val 8 64 False] = 64ADDvarFS0val40False0]
-------------------------
1
11fb: CALL printf (external)
Call to external function: printf
Edge from 11fb to 1200 with memory model: 
|
+- [RSP0, 8]
|
+- [(FS0 + 40), 8]
|
+- [(RSP0 - 8), 8]
|
+- [(RSP0 - 16), 8]
|
+- [(RSP0 - 40), 8]
|
+- [(RSP0 - 48), 8]
|
`- [8196, 8]

Postcondition = fromList [RIP = 4608,RDI = 8216,RSI = (RSP0 - 40),RSP = (RSP0 - 40),RBP = (RSP0 - 8),FS = FS0,[RSP0,E_val 8 64 False] = 4649_t,[(FS0 + 40),E_val 8 64 False] = 64ADDvarFS0val40False0,[(RSP0 - 8),E_val 8 64 False] = RBP0,[(RSP0 - 16),E_val 8 64 False] = 64ADDvarFS0val40False0]
-------------------------
1
1200: NOP  1
Edge from 1200 to 1201 with memory model: 
|
+- [RSP0, 8]
|
+- [(FS0 + 40), 8]
|
+- [(RSP0 - 8), 8]
|
+- [(RSP0 - 16), 8]
|
+- [(RSP0 - 40), 8]
|
+- [(RSP0 - 48), 8]
|
`- [8196, 8]

Postcondition = fromList [RIP = 4609,RDI = 8216,RSI = (RSP0 - 40),RSP = (RSP0 - 40),RBP = (RSP0 - 8),FS = FS0,[RSP0,E_val 8 64 False] = 4649_t,[(FS0 + 40),E_val 8 64 False] = 64ADDvarFS0val40False0,[(RSP0 - 8),E_val 8 64 False] = RBP0,[(RSP0 - 16),E_val 8 64 False] = 64ADDvarFS0val40False0]
-------------------------
1
1201: MOV Reg RAX, Address (SizeDir 64 (AddrMinus (FromReg RBP) (AddrImm 8))) 4
Edge from 1201 to 1205 with memory model: 
|
+- [RSP0, 8]
|
+- [(FS0 + 40), 8]
|
+- [(RSP0 - 8), 8]
|
+- [(RSP0 - 16), 8]
|
+- [(RSP0 - 40), 8]
|
+- [(RSP0 - 48), 8]
|
`- [8196, 8]

Postcondition = fromList [RIP = 4613,RAX = 64ADDvarFS0val40False0,RDI = 8216,RSI = (RSP0 - 40),RSP = (RSP0 - 40),RBP = (RSP0 - 8),FS = FS0,[RSP0,E_val 8 64 False] = 4649_t,[(FS0 + 40),E_val 8 64 False] = 64ADDvarFS0val40False0,[(RSP0 - 8),E_val 8 64 False] = RBP0,[(RSP0 - 16),E_val 8 64 False] = 64ADDvarFS0val40False0]
-------------------------
1
1205: XOR Reg RAX, Address (SizeDir 64 (AddrPlus (FromReg FS) (AddrImm 40))) 9
Edge from 1205 to 120e with memory model: 
|
+- [RSP0, 8]
|
+- [(FS0 + 40), 8]
|
+- [(RSP0 - 8), 8]
|
+- [(RSP0 - 16), 8]
|
+- [(RSP0 - 40), 8]
|
+- [(RSP0 - 48), 8]
|
`- [8196, 8]

Postcondition = fromList [RIP = 4622,RAX = 0,RDI = 8216,RSI = (RSP0 - 40),RSP = (RSP0 - 40),RBP = (RSP0 - 8),FS = FS0,ZF = 64ADDvarFS0val40False0,CF = 64ADDvarFS0val40False0,SF = 64ADDvarFS0val40False0,OF = 64ADDvarFS0val40False0,PF = 64ADDvarFS0val40False0,[RSP0,E_val 8 64 False] = 4649_t,[(FS0 + 40),E_val 8 64 False] = 64ADDvarFS0val40False0,[(RSP0 - 8),E_val 8 64 False] = RBP0,[(RSP0 - 16),E_val 8 64 False] = 64ADDvarFS0val40False0]
-------------------------
1
120e: JE 1215 (resolved immediate)
Edge from 120e to 1210 with memory model: 
|
+- [RSP0, 8]
|
+- [(FS0 + 40), 8]
|
+- [(RSP0 - 8), 8]
|
+- [(RSP0 - 16), 8]
|
+- [(RSP0 - 40), 8]
|
+- [(RSP0 - 48), 8]
|
`- [8196, 8]

Postcondition = fromList [RIP = 4624,RAX = 0,RDI = 8216,RSI = (RSP0 - 40),RSP = (RSP0 - 40),RBP = (RSP0 - 8),FS = FS0,ZF = 64ADDvarFS0val40False0,CF = 64ADDvarFS0val40False0,SF = 64ADDvarFS0val40False0,OF = 64ADDvarFS0val40False0,PF = 64ADDvarFS0val40False0,[RSP0,E_val 8 64 False] = 4649_t,[(FS0 + 40),E_val 8 64 False] = 64ADDvarFS0val40False0,[(RSP0 - 8),E_val 8 64 False] = RBP0,[(RSP0 - 16),E_val 8 64 False] = 64ADDvarFS0val40False0]
Edge from 120e to 1215 with memory model: 
|
+- [RSP0, 8]
|
+- [(FS0 + 40), 8]
|
+- [(RSP0 - 8), 8]
|
+- [(RSP0 - 16), 8]
|
+- [(RSP0 - 40), 8]
|
+- [(RSP0 - 48), 8]
|
`- [8196, 8]

Postcondition = fromList [RIP = 4629,RAX = 0,RDI = 8216,RSI = (RSP0 - 40),RSP = (RSP0 - 40),RBP = (RSP0 - 8),FS = FS0,ZF = 64ADDvarFS0val40False0,CF = 64ADDvarFS0val40False0,SF = 64ADDvarFS0val40False0,OF = 64ADDvarFS0val40False0,PF = 64ADDvarFS0val40False0,[RSP0,E_val 8 64 False] = 4649_t,[(FS0 + 40),E_val 8 64 False] = 64ADDvarFS0val40False0,[(RSP0 - 8),E_val 8 64 False] = RBP0,[(RSP0 - 16),E_val 8 64 False] = 64ADDvarFS0val40False0]
-------------------------
2
1210: CALL __stack_chk_fail (external)
-------------------------
1
1215: LEAVE  1
Edge from 1215 to 1216 with memory model: 
|
+- [RSP0, 8]
|
+- [(FS0 + 40), 8]
|
+- [(RSP0 - 8), 8]
|
+- [(RSP0 - 16), 8]
|
+- [(RSP0 - 40), 8]
|
+- [(RSP0 - 48), 8]
|
`- [8196, 8]

Postcondition = fromList [RIP = 4630,RAX = 0,RDI = 8216,RSI = (RSP0 - 40),RSP = RSP0,RBP = RBP0,FS = FS0,ZF = 64ADDvarFS0val40False0,CF = 64ADDvarFS0val40False0,SF = 64ADDvarFS0val40False0,OF = 64ADDvarFS0val40False0,PF = 64ADDvarFS0val40False0,[RSP0,E_val 8 64 False] = 4649_t,[(FS0 + 40),E_val 8 64 False] = 64ADDvarFS0val40False0,[(RSP0 - 8),E_val 8 64 False] = RBP0,[(RSP0 - 16),E_val 8 64 False] = 64ADDvarFS0val40False0]
-------------------------
1
1216: RET  1
Address 1229 has become reachable.
-------------------------
0
1229: MOV Reg EAX, Immediate 0 5
Edge from 1229 to 122e with memory model: 
|
+- [RSP0, 8]
|
+- [(RSP0 - 8), 8]
|
`- [(RSP0 - 16), 8]

Postcondition = fromList [RIP = 4654,RAX = 0,RSP = (RSP0 - 8),RBP = (RSP0 - 8),[RSP0,E_val 8 64 False] = 0_t,[(RSP0 - 8),E_val 8 64 False] = RBP0]
-------------------------
0
122e: POP Reg RBP 1
Edge from 122e to 122f with memory model: 
|
+- [RSP0, 8]
|
+- [(RSP0 - 8), 8]
|
`- [(RSP0 - 16), 8]

Postcondition = fromList [RIP = 4655,RAX = 0,RSP = RSP0,RBP = RBP0,[RSP0,E_val 8 64 False] = 0_t,[(RSP0 - 8),E_val 8 64 False] = RBP0]
-------------------------
0
122f: RET  1

Number of assembly instructions     = 46
Number of indirect branches         = 1
Number of unresolved indirect jumps = 0: 
Number of unresolved indirect calls = 0: 
Number of symbolic states (representative of non-determinism): 51
Number of edges: 58

10c0 (False): 0
11a9 (True): 1229

10c0: ENDBR64  4
10c4: XOR Reg EBP, Reg EBP 2
10c6: MOV Reg R9, Reg RDX 3
10c9: POP Reg RSI 1
10ca: MOV Reg RDX, Reg RSP 3
10cd: AND Reg RSP, Immediate 18446744073709551600 4
10d1: PUSH Reg RAX 1
10d2: PUSH Reg RSP 1
10d3: LEA Reg R8, Address (SizeDir 64 (AddrPlus (FromReg RIP) (AddrImm 454))) 7
10da: LEA Reg RCX, Address (SizeDir 64 (AddrPlus (FromReg RIP) (AddrImm 335))) 7
10e1: LEA Reg RDI, Address (SizeDir 64 (AddrPlus (FromReg RIP) (AddrImm 303))) 7
10e8: CALL __libc_start_main (external)
  |
  `- 1217
11a9: ENDBR64  4
11ad: PUSH Reg RBP 1
11ae: MOV Reg RBP, Reg RSP 3
11b1: SUB Reg RSP, Immediate 32 4
11b5: MOV Reg RAX, Address (SizeDir 64 (AddrPlus (FromReg FS) (AddrImm 40))) 9
11be: MOV Address (SizeDir 64 (AddrMinus (FromReg RBP) (AddrImm 8))), Reg RAX 4
11c2: XOR Reg EAX, Reg EAX 2
11c4: LEA Reg RDI, Address (SizeDir 64 (AddrPlus (FromReg RIP) (AddrImm 3641))) 7
11cb: CALL puts (external)
11d0: LEA Reg RAX, Address (SizeDir 64 (AddrMinus (FromReg RBP) (AddrImm 32))) 4
11d4: MOV Reg RSI, Reg RAX 3
11d7: LEA Reg RDI, Address (SizeDir 64 (AddrPlus (FromReg RIP) (AddrImm 3639))) 7
11de: MOV Reg EAX, Immediate 0 5
11e3: CALL __isoc99_scanf (external)
11e8: LEA Reg RAX, Address (SizeDir 64 (AddrMinus (FromReg RBP) (AddrImm 32))) 4
11ec: MOV Reg RSI, Reg RAX 3
11ef: LEA Reg RDI, Address (SizeDir 64 (AddrPlus (FromReg RIP) (AddrImm 3618))) 7
11f6: MOV Reg EAX, Immediate 0 5
11fb: CALL printf (external)
1200: NOP  1
1201: MOV Reg RAX, Address (SizeDir 64 (AddrMinus (FromReg RBP) (AddrImm 8))) 4
1205: XOR Reg RAX, Address (SizeDir 64 (AddrPlus (FromReg FS) (AddrImm 40))) 9
120e: JE 1215 (resolved immediate)
  |
  `- 1210,1215
1210: CALL __stack_chk_fail (external)
  |
  `- 
1215: LEAVE  1
1216: RET  1
  |
  `- 
1217: ENDBR64  4
121b: PUSH Reg RBP 1
121c: MOV Reg RBP, Reg RSP 3
121f: MOV Reg EAX, Immediate 0 5
1224: CALL echo (internal)
  |
  `- 11a9
1229: MOV Reg EAX, Immediate 0 5
122e: POP Reg RBP 1
122f: RET  1
  |
  `- 
