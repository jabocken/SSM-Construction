Number of assembly instructions     = 40
Number of indirect branches         = 1
Number of unresolved indirect jumps = 0: 
Number of unresolved indirect calls = 1: e19
Number of symbolic states (representative of non-determinism): 40
Number of edges: 39

dd0 (False): 0

dd0: PUSH Reg R15 2
dd2: PUSH Reg R14 2
dd4: MOV Reg R14, Reg RCX 3
dd7: PUSH Reg R13 2
dd9: PUSH Reg R12 2
ddb: MOV Reg R13D, Reg EDX 3
dde: PUSH Reg RBP 1
ddf: PUSH Reg RBX 1
de0: MOV Reg EBP, Reg ESI 2
de2: MOV Reg R12, Reg RDI 3
de5: SUB Reg RSP, Immediate 24 4
de9: MOV Address (SizeDir 64 (AddrPlus (FromReg RSP) (AddrImm 8))), Reg R8 5
dee: MOV Address (SizeDir 64 (FromReg RSP)), Reg R9 4
df2: CALL __errno_location (external)
df7: MOV Reg RBX, Reg RAX 3
dfa: MOV Reg R15D, Address (SizeDir 32 (FromReg RAX)) 3
dfd: LEA Reg EAX, Address (SizeDir 32 (AddrMinus (FromReg RBP) (AddrImm 1))) 3
e00: MOV Reg R9, Address (SizeDir 64 (FromReg RSP)) 4
e04: MOV Reg R8, Address (SizeDir 64 (AddrPlus (FromReg RSP) (AddrImm 8))) 5
e09: CMP Reg EAX, Immediate 8 3
e0c: JA e2f (resolved immediate)
  |
  `- e0e,e2f
e0e: MOV Reg RCX, Reg R14 3
e11: MOV Reg EDX, Reg R13D 3
e14: MOV Reg ESI, Reg EBP 2
e16: MOV Reg RDI, Reg R12 3
e19: CALL Address (SizeDir 64 (FromReg R12)) 4
e1d: MOV Address (SizeDir 32 (FromReg RBX)), Reg R15D 3
e20: ADD Reg RSP, Immediate 24 4
e24: POP Reg RBX 1
e25: POP Reg RBP 1
e26: POP Reg R12 2
e28: POP Reg R13 2
e2a: POP Reg R14 2
e2c: POP Reg R15 2
e2e: RET  1
  |
  `- 
e2f: LEA Reg RCX, Address (SizeDir 64 (AddrPlus (FromReg RIP) (AddrImm 2186))) 7
e36: LEA Reg RSI, Address (SizeDir 64 (AddrPlus (FromReg RIP) (AddrImm 1987))) 7
e3d: LEA Reg RDI, Address (SizeDir 64 (AddrPlus (FromReg RIP) (AddrImm 2116))) 7
e44: MOV Reg EDX, Immediate 48 5
e49: CALL __assert_fail (external)
  |
  `- 
