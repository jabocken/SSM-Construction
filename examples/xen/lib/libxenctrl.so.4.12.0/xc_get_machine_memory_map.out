Number of assembly instructions     = 63
Number of indirect branches         = 0
Number of unresolved indirect jumps = 0: 
Number of unresolved indirect calls = 0: 
Number of symbolic states (representative of non-determinism): 63
Number of edges: 66

eff0 (False): 0

eff0: PUSH Reg R13 2
eff2: PUSH Reg R12 2
eff4: PUSH Reg RBP 1
eff5: PUSH Reg RBX 1
eff6: SUB Reg RSP, Immediate 72 4
effa: MOV Reg RAX, Address (SizeDir 64 (AddrPlus (FromReg FS) (AddrImm 40))) 9
f003: MOV Address (SizeDir 64 (AddrPlus (FromReg RSP) (AddrImm 56))), Reg RAX 5
f008: XOR Reg EAX, Reg EAX 2
f00a: MOV Reg EAX, Reg EDX 2
f00c: MOV Address (SizeDir 64 (AddrPlus (FromReg RSP) (AddrImm 4))), Immediate 0 9
f015: MOV Address (SizeDir 32 (AddrPlus (FromReg RSP) (AddrImm 12))), Immediate 0 8
f01d: LEA Reg RAX, Address (SizeDir 64 (AddrPlus (FromReg RAX) (AddrTimes (AddrImm 4) (FromReg RAX)))) 4
f021: MOV Address (SizeDir 32 (FromReg RSP)), Reg EDX 3
f024: MOV Address (SizeDir 64 (AddrPlus (FromReg RSP) (AddrImm 16))), Immediate 0 9
f02d: MOV Address (SizeDir 64 (AddrPlus (FromReg RSP) (AddrImm 24))), Immediate 0 9
f036: MOV Address (SizeDir 32 (AddrPlus (FromReg RSP) (AddrImm 32))), Immediate 2 8
f03e: SHL Reg RAX, Immediate 2 4
f042: TEST Reg RSI, Reg RSI 3
f045: MOV Address (SizeDir 64 (AddrPlus (FromReg RSP) (AddrImm 40))), Reg RSI 5
f04a: MOV Address (SizeDir 64 (AddrPlus (FromReg RSP) (AddrImm 48))), Reg RAX 5
f04f: JE f0e0 (resolved immediate)
  |
  `- f055,f0e0
f055: LEA Reg R12, Address (SizeDir 64 (AddrPlus (FromReg RSP) (AddrImm 16))) 5
f05a: MOV Reg EBX, Reg EDX 2
f05c: MOV Reg RBP, Reg RDI 3
f05f: MOV Reg RSI, Reg R12 3
f062: CALL xc__hypercall_bounce_pre (external)
f067: CMP Reg EBX, Immediate 1 3
f06a: JBE f0e0 (resolved immediate)
  |
  `- f06c,f0e0
f06c: TEST Reg EAX, Reg EAX 2
f06e: JNE f0e0 (resolved immediate)
  |
  `- f070,f0e0
f070: MOV Reg RAX, Address (SizeDir 64 (AddrPlus (FromReg RSP) (AddrImm 24))) 5
f075: MOV Reg RDX, Reg RSP 3
f078: MOV Reg ECX, Immediate 16 5
f07d: MOV Reg ESI, Immediate 10 5
f082: MOV Reg RDI, Reg RBP 3
f085: TEST Reg RAX, Reg RAX 3
f088: CMOVE Reg RAX, Reg R12 4
f08c: MOV Reg RAX, Address (SizeDir 64 (FromReg RAX)) 3
f08f: MOV Address (SizeDir 64 (AddrPlus (FromReg RSP) (AddrImm 8))), Reg RAX 5
f094: CALL do_memory_op (external)
f099: MOV Reg RSI, Address (SizeDir 64 (AddrPlus (FromReg RSP) (AddrImm 24))) 5
f09e: MOV Reg RBX, Reg RAX 3
f0a1: MOV Reg RDI, Reg RBP 3
f0a4: MOV Reg R13D, Reg EAX 3
f0a7: TEST Reg RSI, Reg RSI 3
f0aa: CMOVE Reg RSI, Reg R12 4
f0ae: CALL xc__hypercall_bounce_post (external)
f0b3: TEST Reg EBX, Reg EBX 2
f0b5: JNE f0bb (resolved immediate)
  |
  `- f0b7,f0bb
f0b7: MOV Reg R13D, Address (SizeDir 32 (FromReg RSP)) 4
f0bb: MOV Reg RCX, Address (SizeDir 64 (AddrPlus (FromReg RSP) (AddrImm 56))) 5
f0c0: XOR Reg RCX, Address (SizeDir 64 (AddrPlus (FromReg FS) (AddrImm 40))) 9
f0c9: MOV Reg EAX, Reg R13D 3
f0cc: JNE f0e8 (resolved immediate)
  |
  `- f0ce,f0e8
f0ce: ADD Reg RSP, Immediate 72 4
f0d2: POP Reg RBX 1
f0d3: POP Reg RBP 1
f0d4: POP Reg R12 2
f0d6: POP Reg R13 2
f0d8: RET  1
  |
  `- 
f0e0: MOV Reg R13D, Immediate 4294967295 6
f0e6: JMP f0bb (resolved immediate)
  |
  `- f0bb
f0e8: CALL __stack_chk_fail (external)
  |
  `- 
