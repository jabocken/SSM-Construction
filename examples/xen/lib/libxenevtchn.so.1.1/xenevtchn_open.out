Number of assembly instructions     = 66
Number of indirect branches         = 0
Number of unresolved indirect jumps = 0: 
Number of unresolved indirect calls = 0: 
Number of symbolic states (representative of non-determinism): 66
Number of edges: 68

c70 (False): 0
da0 (True): cc2
dd0 (True): d08

c70: PUSH Reg RBP 1
c71: PUSH Reg RBX 1
c72: MOV Reg RBP, Reg RDI 3
c75: MOV Reg EDI, Immediate 48 5
c7a: SUB Reg RSP, Immediate 8 4
c7e: CALL malloc (external)
c83: TEST Reg RAX, Reg RAX 3
c86: MOV Reg RBX, Reg RAX 3
c89: JE cc6 (resolved immediate)
  |
  `- c8b,cc6
c8b: MOV Address (SizeDir 64 (FromReg RAX)), Reg RBP 3
c8e: MOV Address (SizeDir 32 (AddrPlus (FromReg RAX) (AddrImm 16))), Immediate 4294967295 7
c95: LEA Reg RBP, Address (SizeDir 64 (AddrPlus (FromReg RBX) (AddrImm 24))) 4
c99: MOV Address (SizeDir 64 (AddrPlus (FromReg RAX) (AddrImm 8))), Immediate 0 8
ca1: LEA Reg RAX, Address (SizeDir 64 (AddrPlus (FromReg RIP) (AddrImm 216))) 7
ca8: MOV Reg RDI, Reg RBP 3
cab: MOV Address (SizeDir 64 (AddrPlus (FromReg RBX) (AddrImm 24))), Reg RAX 4
caf: CALL xentoolcore__register_active_handle (external)
cb4: CMP Address (SizeDir 64 (FromReg RBX)), Immediate 0 4
cb8: JE cd0 (resolved immediate)
  |
  `- cba,cd0
cba: MOV Reg RDI, Reg RBX 3
cbd: CALL osdep_evtchn_open (internal)
  |
  `- da0
cc2: TEST Reg EAX, Reg EAX 2
cc4: JS cf8 (resolved immediate)
  |
  `- cc6,cf8
cc6: ADD Reg RSP, Immediate 8 4
cca: MOV Reg RAX, Reg RBX 3
ccd: POP Reg RBX 1
cce: POP Reg RBP 1
ccf: RET  1
  |
  `- 
cd0: MOV Reg RAX, Address (SizeDir 64 (AddrPlus (FromReg RIP) (AddrImm 2102049))) 7
cd7: XOR Reg EDX, Reg EDX 2
cd9: MOV Reg ESI, Immediate 4 5
cde: MOV Reg RDI, Address (SizeDir 64 (FromReg RAX)) 3
ce1: CALL xtl_createlogger_stdiostream (external)
ce6: TEST Reg RAX, Reg RAX 3
ce9: MOV Address (SizeDir 64 (AddrPlus (FromReg RBX) (AddrImm 8))), Reg RAX 4
ced: MOV Address (SizeDir 64 (FromReg RBX)), Reg RAX 3
cf0: JNE cba (resolved immediate)
  |
  `- cba,cf2
cf2: NOP  6
cf8: MOV Reg RDI, Reg RBP 3
cfb: CALL xentoolcore__deregister_active_handle (external)
d00: MOV Reg RDI, Reg RBX 3
d03: CALL osdep_evtchn_close (internal)
  |
  `- dd0
d08: MOV Reg RDI, Address (SizeDir 64 (AddrPlus (FromReg RBX) (AddrImm 8))) 4
d0c: CALL xtl_logger_destroy (external)
d11: MOV Reg RDI, Reg RBX 3
d14: XOR Reg EBX, Reg EBX 2
d16: CALL free (external)
d1b: JMP cc6 (resolved immediate)
  |
  `- cc6
da0: PUSH Reg RBX 1
da1: MOV Reg RBX, Reg RDI 3
da4: LEA Reg RDI, Address (SizeDir 64 (AddrPlus (FromReg RIP) (AddrImm 714))) 7
dab: XOR Reg EAX, Reg EAX 2
dad: MOV Reg ESI, Immediate 524290 5
db2: CALL open (external)
db7: CMP Reg EAX, Immediate 18446744073709551615 3
dba: JE dc1 (resolved immediate)
  |
  `- dbc,dc1
dbc: MOV Address (SizeDir 32 (AddrPlus (FromReg RBX) (AddrImm 16))), Reg EAX 3
dbf: XOR Reg EAX, Reg EAX 2
dc1: POP Reg RBX 1
dc2: RET  1
  |
  `- 
dd0: MOV Reg EDI, Address (SizeDir 32 (AddrPlus (FromReg RDI) (AddrImm 16))) 3
dd3: CMP Reg EDI, Immediate 18446744073709551615 3
dd6: JE de0 (resolved immediate)
  |
  `- dd8,de0
dd8: JMP close (jmp to external function)
  |
  `- 
de0: XOR Reg EAX, Reg EAX 2
de2: RET  1
  |
  `- 
