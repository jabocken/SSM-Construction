
qemu-pr-helper:     file format elf64-x86-64


Disassembly of section .init:

000000000000c098 <_init@@Base>:
    c098:	sub    rsp,0x8
    c09c:	mov    rax,QWORD PTR [rip+0x275f15]        # 281fb8 <__gmon_start__>
    c0a3:	test   rax,rax
    c0a6:	je     c0aa <_init@@Base+0x12>
    c0a8:	call   rax
    c0aa:	add    rsp,0x8
    c0ae:	ret    

Disassembly of section .plt:

000000000000c0b0 <g_utf8_validate@plt-0x10>:
    c0b0:	push   QWORD PTR [rip+0x2755ea]        # 2816a0 <g_test_config_vars+0x2e0>
    c0b6:	jmp    QWORD PTR [rip+0x2755ec]        # 2816a8 <g_test_config_vars+0x2e8>
    c0bc:	nop    DWORD PTR [rax+0x0]

000000000000c0c0 <g_utf8_validate@plt>:
    c0c0:	jmp    QWORD PTR [rip+0x2755ea]        # 2816b0 <g_utf8_validate>
    c0c6:	push   0x0
    c0cb:	jmp    c0b0 <_init@@Base+0x18>

000000000000c0d0 <g_checksum_update@plt>:
    c0d0:	jmp    QWORD PTR [rip+0x2755e2]        # 2816b8 <g_checksum_update>
    c0d6:	push   0x1
    c0db:	jmp    c0b0 <_init@@Base+0x18>

000000000000c0e0 <daemon@plt>:
    c0e0:	jmp    QWORD PTR [rip+0x2755da]        # 2816c0 <daemon@GLIBC_2.2.5>
    c0e6:	push   0x2
    c0eb:	jmp    c0b0 <_init@@Base+0x18>

000000000000c0f0 <g_memdup@plt>:
    c0f0:	jmp    QWORD PTR [rip+0x2755d2]        # 2816c8 <g_memdup>
    c0f6:	push   0x3
    c0fb:	jmp    c0b0 <_init@@Base+0x18>

000000000000c100 <tcsetattr@plt>:
    c100:	jmp    QWORD PTR [rip+0x2755ca]        # 2816d0 <tcsetattr@GLIBC_2.2.5>
    c106:	push   0x4
    c10b:	jmp    c0b0 <_init@@Base+0x18>

000000000000c110 <mprotect@plt>:
    c110:	jmp    QWORD PTR [rip+0x2755c2]        # 2816d8 <mprotect@GLIBC_2.2.5>
    c116:	push   0x5
    c11b:	jmp    c0b0 <_init@@Base+0x18>

000000000000c120 <pipe2@plt>:
    c120:	jmp    QWORD PTR [rip+0x2755ba]        # 2816e0 <pipe2@GLIBC_2.9>
    c126:	push   0x6
    c12b:	jmp    c0b0 <_init@@Base+0x18>

000000000000c130 <sem_wait@plt>:
    c130:	jmp    QWORD PTR [rip+0x2755b2]        # 2816e8 <sem_wait@GLIBC_2.2.5>
    c136:	push   0x7
    c13b:	jmp    c0b0 <_init@@Base+0x18>

000000000000c140 <fileno@plt>:
    c140:	jmp    QWORD PTR [rip+0x2755aa]        # 2816f0 <fileno@GLIBC_2.2.5>
    c146:	push   0x8
    c14b:	jmp    c0b0 <_init@@Base+0x18>

000000000000c150 <pthread_getspecific@plt>:
    c150:	jmp    QWORD PTR [rip+0x2755a2]        # 2816f8 <pthread_getspecific@GLIBC_2.2.5>
    c156:	push   0x9
    c15b:	jmp    c0b0 <_init@@Base+0x18>

000000000000c160 <dup2@plt>:
    c160:	jmp    QWORD PTR [rip+0x27559a]        # 281700 <dup2@GLIBC_2.2.5>
    c166:	push   0xa
    c16b:	jmp    c0b0 <_init@@Base+0x18>

000000000000c170 <pthread_cond_destroy@plt>:
    c170:	jmp    QWORD PTR [rip+0x275592]        # 281708 <pthread_cond_destroy@GLIBC_2.3.2>
    c176:	push   0xb
    c17b:	jmp    c0b0 <_init@@Base+0x18>

000000000000c180 <g_path_get_dirname@plt>:
    c180:	jmp    QWORD PTR [rip+0x27558a]        # 281710 <g_path_get_dirname>
    c186:	push   0xc
    c18b:	jmp    c0b0 <_init@@Base+0x18>

000000000000c190 <frexp@plt>:
    c190:	jmp    QWORD PTR [rip+0x275582]        # 281718 <frexp@GLIBC_2.2.5>
    c196:	push   0xd
    c19b:	jmp    c0b0 <_init@@Base+0x18>

000000000000c1a0 <execv@plt>:
    c1a0:	jmp    QWORD PTR [rip+0x27557a]        # 281720 <execv@GLIBC_2.2.5>
    c1a6:	push   0xe
    c1ab:	jmp    c0b0 <_init@@Base+0x18>

000000000000c1b0 <fstatfs64@plt>:
    c1b0:	jmp    QWORD PTR [rip+0x275572]        # 281728 <fstatfs64@GLIBC_2.2.5>
    c1b6:	push   0xf
    c1bb:	jmp    c0b0 <_init@@Base+0x18>

000000000000c1c0 <memset@plt>:
    c1c0:	jmp    QWORD PTR [rip+0x27556a]        # 281730 <memset@GLIBC_2.2.5>
    c1c6:	push   0x10
    c1cb:	jmp    c0b0 <_init@@Base+0x18>

000000000000c1d0 <g_checksum_new@plt>:
    c1d0:	jmp    QWORD PTR [rip+0x275562]        # 281738 <g_checksum_new>
    c1d6:	push   0x11
    c1db:	jmp    c0b0 <_init@@Base+0x18>

000000000000c1e0 <g_queue_push_tail@plt>:
    c1e0:	jmp    QWORD PTR [rip+0x27555a]        # 281740 <g_queue_push_tail>
    c1e6:	push   0x12
    c1eb:	jmp    c0b0 <_init@@Base+0x18>

000000000000c1f0 <shutdown@plt>:
    c1f0:	jmp    QWORD PTR [rip+0x275552]        # 281748 <shutdown@GLIBC_2.2.5>
    c1f6:	push   0x13
    c1fb:	jmp    c0b0 <_init@@Base+0x18>

000000000000c200 <g_string_prepend@plt>:
    c200:	jmp    QWORD PTR [rip+0x27554a]        # 281750 <g_string_prepend>
    c206:	push   0x14
    c20b:	jmp    c0b0 <_init@@Base+0x18>

000000000000c210 <mmap64@plt>:
    c210:	jmp    QWORD PTR [rip+0x275542]        # 281758 <mmap64@GLIBC_2.2.5>
    c216:	push   0x15
    c21b:	jmp    c0b0 <_init@@Base+0x18>

000000000000c220 <posix_memalign@plt>:
    c220:	jmp    QWORD PTR [rip+0x27553a]        # 281760 <posix_memalign@GLIBC_2.2.5>
    c226:	push   0x16
    c22b:	jmp    c0b0 <_init@@Base+0x18>

000000000000c230 <close@plt>:
    c230:	jmp    QWORD PTR [rip+0x275532]        # 281768 <close@GLIBC_2.2.5>
    c236:	push   0x17
    c23b:	jmp    c0b0 <_init@@Base+0x18>

000000000000c240 <__longjmp_chk@plt>:
    c240:	jmp    QWORD PTR [rip+0x27552a]        # 281770 <__longjmp_chk@GLIBC_2.11>
    c246:	push   0x18
    c24b:	jmp    c0b0 <_init@@Base+0x18>

000000000000c250 <g_hash_table_destroy@plt>:
    c250:	jmp    QWORD PTR [rip+0x275522]        # 281778 <g_hash_table_destroy>
    c256:	push   0x19
    c25b:	jmp    c0b0 <_init@@Base+0x18>

000000000000c260 <ioctl@plt>:
    c260:	jmp    QWORD PTR [rip+0x27551a]        # 281780 <ioctl@GLIBC_2.2.5>
    c266:	push   0x1a
    c26b:	jmp    c0b0 <_init@@Base+0x18>

000000000000c270 <abort@plt>:
    c270:	jmp    QWORD PTR [rip+0x275512]        # 281788 <abort@GLIBC_2.2.5>
    c276:	push   0x1b
    c27b:	jmp    c0b0 <_init@@Base+0x18>

000000000000c280 <pthread_setspecific@plt>:
    c280:	jmp    QWORD PTR [rip+0x27550a]        # 281790 <pthread_setspecific@GLIBC_2.2.5>
    c286:	push   0x1c
    c28b:	jmp    c0b0 <_init@@Base+0x18>

000000000000c290 <memchr@plt>:
    c290:	jmp    QWORD PTR [rip+0x275502]        # 281798 <memchr@GLIBC_2.2.5>
    c296:	push   0x1d
    c29b:	jmp    c0b0 <_init@@Base+0x18>

000000000000c2a0 <g_main_loop_quit@plt>:
    c2a0:	jmp    QWORD PTR [rip+0x2754fa]        # 2817a0 <g_main_loop_quit>
    c2a6:	push   0x1e
    c2ab:	jmp    c0b0 <_init@@Base+0x18>

000000000000c2b0 <__fprintf_chk@plt>:
    c2b0:	jmp    QWORD PTR [rip+0x2754f2]        # 2817a8 <__fprintf_chk@GLIBC_2.3.4>
    c2b6:	push   0x1f
    c2bb:	jmp    c0b0 <_init@@Base+0x18>

000000000000c2c0 <getrusage@plt>:
    c2c0:	jmp    QWORD PTR [rip+0x2754ea]        # 2817b0 <getrusage@GLIBC_2.2.5>
    c2c6:	push   0x20
    c2cb:	jmp    c0b0 <_init@@Base+0x18>

000000000000c2d0 <sem_destroy@plt>:
    c2d0:	jmp    QWORD PTR [rip+0x2754e2]        # 2817b8 <sem_destroy@GLIBC_2.2.5>
    c2d6:	push   0x21
    c2db:	jmp    c0b0 <_init@@Base+0x18>

000000000000c2e0 <g_random_int@plt>:
    c2e0:	jmp    QWORD PTR [rip+0x2754da]        # 2817c0 <g_random_int>
    c2e6:	push   0x22
    c2eb:	jmp    c0b0 <_init@@Base+0x18>

000000000000c2f0 <g_source_set_callback@plt>:
    c2f0:	jmp    QWORD PTR [rip+0x2754d2]        # 2817c8 <g_source_set_callback>
    c2f6:	push   0x23
    c2fb:	jmp    c0b0 <_init@@Base+0x18>

000000000000c300 <recvmsg@plt>:
    c300:	jmp    QWORD PTR [rip+0x2754ca]        # 2817d0 <recvmsg@GLIBC_2.2.5>
    c306:	push   0x24
    c30b:	jmp    c0b0 <_init@@Base+0x18>

000000000000c310 <g_test_message@plt>:
    c310:	jmp    QWORD PTR [rip+0x2754c2]        # 2817d8 <g_test_message>
    c316:	push   0x25
    c31b:	jmp    c0b0 <_init@@Base+0x18>

000000000000c320 <pthread_cond_signal@plt>:
    c320:	jmp    QWORD PTR [rip+0x2754ba]        # 2817e0 <pthread_cond_signal@GLIBC_2.3.2>
    c326:	push   0x26
    c32b:	jmp    c0b0 <_init@@Base+0x18>

000000000000c330 <g_strrstr@plt>:
    c330:	jmp    QWORD PTR [rip+0x2754b2]        # 2817e8 <g_strrstr>
    c336:	push   0x27
    c33b:	jmp    c0b0 <_init@@Base+0x18>

000000000000c340 <g_source_set_can_recurse@plt>:
    c340:	jmp    QWORD PTR [rip+0x2754aa]        # 2817f0 <g_source_set_can_recurse>
    c346:	push   0x28
    c34b:	jmp    c0b0 <_init@@Base+0x18>

000000000000c350 <getpeername@plt>:
    c350:	jmp    QWORD PTR [rip+0x2754a2]        # 2817f8 <getpeername@GLIBC_2.2.5>
    c356:	push   0x29
    c35b:	jmp    c0b0 <_init@@Base+0x18>

000000000000c360 <exit@plt>:
    c360:	jmp    QWORD PTR [rip+0x27549a]        # 281800 <exit@GLIBC_2.2.5>
    c366:	push   0x2a
    c36b:	jmp    c0b0 <_init@@Base+0x18>

000000000000c370 <g_strdup@plt>:
    c370:	jmp    QWORD PTR [rip+0x275492]        # 281808 <g_strdup>
    c376:	push   0x2b
    c37b:	jmp    c0b0 <_init@@Base+0x18>

000000000000c380 <pthread_mutexattr_destroy@plt>:
    c380:	jmp    QWORD PTR [rip+0x27548a]        # 281810 <pthread_mutexattr_destroy@GLIBC_2.2.5>
    c386:	push   0x2c
    c38b:	jmp    c0b0 <_init@@Base+0x18>

000000000000c390 <__assert_fail@plt>:
    c390:	jmp    QWORD PTR [rip+0x275482]        # 281818 <__assert_fail@GLIBC_2.2.5>
    c396:	push   0x2d
    c39b:	jmp    c0b0 <_init@@Base+0x18>

000000000000c3a0 <__printf_chk@plt>:
    c3a0:	jmp    QWORD PTR [rip+0x27547a]        # 281820 <__printf_chk@GLIBC_2.3.4>
    c3a6:	push   0x2e
    c3ab:	jmp    c0b0 <_init@@Base+0x18>

000000000000c3b0 <getaddrinfo@plt>:
    c3b0:	jmp    QWORD PTR [rip+0x275472]        # 281828 <getaddrinfo@GLIBC_2.2.5>
    c3b6:	push   0x2f
    c3bb:	jmp    c0b0 <_init@@Base+0x18>

000000000000c3c0 <strcasecmp@plt>:
    c3c0:	jmp    QWORD PTR [rip+0x27546a]        # 281830 <strcasecmp@GLIBC_2.2.5>
    c3c6:	push   0x30
    c3cb:	jmp    c0b0 <_init@@Base+0x18>

000000000000c3d0 <prctl@plt>:
    c3d0:	jmp    QWORD PTR [rip+0x275462]        # 281838 <prctl@GLIBC_2.2.5>
    c3d6:	push   0x31
    c3db:	jmp    c0b0 <_init@@Base+0x18>

000000000000c3e0 <gettimeofday@plt>:
    c3e0:	jmp    QWORD PTR [rip+0x27545a]        # 281840 <gettimeofday@GLIBC_2.2.5>
    c3e6:	push   0x32
    c3eb:	jmp    c0b0 <_init@@Base+0x18>

000000000000c3f0 <setvbuf@plt>:
    c3f0:	jmp    QWORD PTR [rip+0x275452]        # 281848 <setvbuf@GLIBC_2.2.5>
    c3f6:	push   0x33
    c3fb:	jmp    c0b0 <_init@@Base+0x18>

000000000000c400 <makecontext@plt>:
    c400:	jmp    QWORD PTR [rip+0x27544a]        # 281850 <makecontext@GLIBC_2.2.5>
    c406:	push   0x34
    c40b:	jmp    c0b0 <_init@@Base+0x18>

000000000000c410 <g_list_foreach@plt>:
    c410:	jmp    QWORD PTR [rip+0x275442]        # 281858 <g_list_foreach>
    c416:	push   0x35
    c41b:	jmp    c0b0 <_init@@Base+0x18>

000000000000c420 <g_hash_table_insert@plt>:
    c420:	jmp    QWORD PTR [rip+0x27543a]        # 281860 <g_hash_table_insert>
    c426:	push   0x36
    c42b:	jmp    c0b0 <_init@@Base+0x18>

000000000000c430 <g_list_free@plt>:
    c430:	jmp    QWORD PTR [rip+0x275432]        # 281868 <g_list_free>
    c436:	push   0x37
    c43b:	jmp    c0b0 <_init@@Base+0x18>

000000000000c440 <g_strlcat@plt>:
    c440:	jmp    QWORD PTR [rip+0x27542a]        # 281870 <g_strlcat>
    c446:	push   0x38
    c44b:	jmp    c0b0 <_init@@Base+0x18>

000000000000c450 <g_main_context_check@plt>:
    c450:	jmp    QWORD PTR [rip+0x275422]        # 281878 <g_main_context_check>
    c456:	push   0x39
    c45b:	jmp    c0b0 <_init@@Base+0x18>

000000000000c460 <sem_trywait@plt>:
    c460:	jmp    QWORD PTR [rip+0x27541a]        # 281880 <sem_trywait@GLIBC_2.2.5>
    c466:	push   0x3a
    c46b:	jmp    c0b0 <_init@@Base+0x18>

000000000000c470 <g_array_new@plt>:
    c470:	jmp    QWORD PTR [rip+0x275412]        # 281888 <g_array_new>
    c476:	push   0x3b
    c47b:	jmp    c0b0 <_init@@Base+0x18>

000000000000c480 <g_realloc_n@plt>:
    c480:	jmp    QWORD PTR [rip+0x27540a]        # 281890 <g_realloc_n>
    c486:	push   0x3c
    c48b:	jmp    c0b0 <_init@@Base+0x18>

000000000000c490 <read@plt>:
    c490:	jmp    QWORD PTR [rip+0x275402]        # 281898 <read@GLIBC_2.2.5>
    c496:	push   0x3d
    c49b:	jmp    c0b0 <_init@@Base+0x18>

000000000000c4a0 <malloc@plt>:
    c4a0:	jmp    QWORD PTR [rip+0x2753fa]        # 2818a0 <malloc@GLIBC_2.2.5>
    c4a6:	push   0x3e
    c4ab:	jmp    c0b0 <_init@@Base+0x18>

000000000000c4b0 <sigfillset@plt>:
    c4b0:	jmp    QWORD PTR [rip+0x2753f2]        # 2818a8 <sigfillset@GLIBC_2.2.5>
    c4b6:	push   0x3f
    c4bb:	jmp    c0b0 <_init@@Base+0x18>

000000000000c4c0 <pthread_setname_np@plt>:
    c4c0:	jmp    QWORD PTR [rip+0x2753ea]        # 2818b0 <pthread_setname_np@GLIBC_2.12>
    c4c6:	push   0x40
    c4cb:	jmp    c0b0 <_init@@Base+0x18>

000000000000c4d0 <unlink@plt>:
    c4d0:	jmp    QWORD PTR [rip+0x2753e2]        # 2818b8 <unlink@GLIBC_2.2.5>
    c4d6:	push   0x41
    c4db:	jmp    c0b0 <_init@@Base+0x18>

000000000000c4e0 <g_array_unref@plt>:
    c4e0:	jmp    QWORD PTR [rip+0x2753da]        # 2818c0 <g_array_unref>
    c4e6:	push   0x42
    c4eb:	jmp    c0b0 <_init@@Base+0x18>

000000000000c4f0 <_exit@plt>:
    c4f0:	jmp    QWORD PTR [rip+0x2753d2]        # 2818c8 <_exit@GLIBC_2.2.5>
    c4f6:	push   0x43
    c4fb:	jmp    c0b0 <_init@@Base+0x18>

000000000000c500 <g_malloc@plt>:
    c500:	jmp    QWORD PTR [rip+0x2753ca]        # 2818d0 <g_malloc>
    c506:	push   0x44
    c50b:	jmp    c0b0 <_init@@Base+0x18>

000000000000c510 <__memcpy_chk@plt>:
    c510:	jmp    QWORD PTR [rip+0x2753c2]        # 2818d8 <__memcpy_chk@GLIBC_2.3.4>
    c516:	push   0x45
    c51b:	jmp    c0b0 <_init@@Base+0x18>

000000000000c520 <siglongjmp@plt>:
    c520:	jmp    QWORD PTR [rip+0x2753ba]        # 2818e0 <siglongjmp@GLIBC_2.2.5>
    c526:	push   0x46
    c52b:	jmp    c0b0 <_init@@Base+0x18>

000000000000c530 <g_string_new@plt>:
    c530:	jmp    QWORD PTR [rip+0x2753b2]        # 2818e8 <g_string_new>
    c536:	push   0x47
    c53b:	jmp    c0b0 <_init@@Base+0x18>

000000000000c540 <setsockopt@plt>:
    c540:	jmp    QWORD PTR [rip+0x2753aa]        # 2818f0 <setsockopt@GLIBC_2.2.5>
    c546:	push   0x48
    c54b:	jmp    c0b0 <_init@@Base+0x18>

000000000000c550 <swapcontext@plt>:
    c550:	jmp    QWORD PTR [rip+0x2753a2]        # 2818f8 <swapcontext@GLIBC_2.2.5>
    c556:	push   0x49
    c55b:	jmp    c0b0 <_init@@Base+0x18>

000000000000c560 <g_hash_table_remove@plt>:
    c560:	jmp    QWORD PTR [rip+0x27539a]        # 281900 <g_hash_table_remove>
    c566:	push   0x4a
    c56b:	jmp    c0b0 <_init@@Base+0x18>

000000000000c570 <eventfd@plt>:
    c570:	jmp    QWORD PTR [rip+0x275392]        # 281908 <eventfd@GLIBC_2.7>
    c576:	push   0x4b
    c57b:	jmp    c0b0 <_init@@Base+0x18>

000000000000c580 <sysconf@plt>:
    c580:	jmp    QWORD PTR [rip+0x27538a]        # 281910 <sysconf@GLIBC_2.2.5>
    c586:	push   0x4c
    c58b:	jmp    c0b0 <_init@@Base+0x18>

000000000000c590 <g_queue_free@plt>:
    c590:	jmp    QWORD PTR [rip+0x275382]        # 281918 <g_queue_free>
    c596:	push   0x4d
    c59b:	jmp    c0b0 <_init@@Base+0x18>

000000000000c5a0 <strchrnul@plt>:
    c5a0:	jmp    QWORD PTR [rip+0x27537a]        # 281920 <strchrnul@GLIBC_2.2.5>
    c5a6:	push   0x4e
    c5ab:	jmp    c0b0 <_init@@Base+0x18>

000000000000c5b0 <getpid@plt>:
    c5b0:	jmp    QWORD PTR [rip+0x275372]        # 281928 <getpid@GLIBC_2.2.5>
    c5b6:	push   0x4f
    c5bb:	jmp    c0b0 <_init@@Base+0x18>

000000000000c5c0 <pthread_mutex_init@plt>:
    c5c0:	jmp    QWORD PTR [rip+0x27536a]        # 281930 <pthread_mutex_init@GLIBC_2.2.5>
    c5c6:	push   0x50
    c5cb:	jmp    c0b0 <_init@@Base+0x18>

000000000000c5d0 <fgets@plt>:
    c5d0:	jmp    QWORD PTR [rip+0x275362]        # 281938 <fgets@GLIBC_2.2.5>
    c5d6:	push   0x51
    c5db:	jmp    c0b0 <_init@@Base+0x18>

000000000000c5e0 <g_base64_decode@plt>:
    c5e0:	jmp    QWORD PTR [rip+0x27535a]        # 281940 <g_base64_decode>
    c5e6:	push   0x52
    c5eb:	jmp    c0b0 <_init@@Base+0x18>

000000000000c5f0 <__vsnprintf_chk@plt>:
    c5f0:	jmp    QWORD PTR [rip+0x275352]        # 281948 <__vsnprintf_chk@GLIBC_2.3.4>
    c5f6:	push   0x53
    c5fb:	jmp    c0b0 <_init@@Base+0x18>

000000000000c600 <g_string_sized_new@plt>:
    c600:	jmp    QWORD PTR [rip+0x27534a]        # 281950 <g_string_sized_new>
    c606:	push   0x54
    c60b:	jmp    c0b0 <_init@@Base+0x18>

000000000000c610 <g_source_new@plt>:
    c610:	jmp    QWORD PTR [rip+0x275342]        # 281958 <g_source_new>
    c616:	push   0x55
    c61b:	jmp    c0b0 <_init@@Base+0x18>

000000000000c620 <ppoll@plt>:
    c620:	jmp    QWORD PTR [rip+0x27533a]        # 281960 <ppoll@GLIBC_2.4>
    c626:	push   0x56
    c62b:	jmp    c0b0 <_init@@Base+0x18>

000000000000c630 <g_main_loop_new@plt>:
    c630:	jmp    QWORD PTR [rip+0x275332]        # 281968 <g_main_loop_new>
    c636:	push   0x57
    c63b:	jmp    c0b0 <_init@@Base+0x18>

000000000000c640 <g_strndup@plt>:
    c640:	jmp    QWORD PTR [rip+0x27532a]        # 281970 <g_strndup>
    c646:	push   0x58
    c64b:	jmp    c0b0 <_init@@Base+0x18>

000000000000c650 <pthread_attr_destroy@plt>:
    c650:	jmp    QWORD PTR [rip+0x275322]        # 281978 <pthread_attr_destroy@GLIBC_2.2.5>
    c656:	push   0x59
    c65b:	jmp    c0b0 <_init@@Base+0x18>

000000000000c660 <__fxstat64@plt>:
    c660:	jmp    QWORD PTR [rip+0x27531a]        # 281980 <__fxstat64@GLIBC_2.2.5>
    c666:	push   0x5a
    c66b:	jmp    c0b0 <_init@@Base+0x18>

000000000000c670 <g_strv_length@plt>:
    c670:	jmp    QWORD PTR [rip+0x275312]        # 281988 <g_strv_length>
    c676:	push   0x5b
    c67b:	jmp    c0b0 <_init@@Base+0x18>

000000000000c680 <g_checksum_get_digest@plt>:
    c680:	jmp    QWORD PTR [rip+0x27530a]        # 281990 <g_checksum_get_digest>
    c686:	push   0x5c
    c68b:	jmp    c0b0 <_init@@Base+0x18>

000000000000c690 <g_malloc0_n@plt>:
    c690:	jmp    QWORD PTR [rip+0x275302]        # 281998 <g_malloc0_n>
    c696:	push   0x5d
    c69b:	jmp    c0b0 <_init@@Base+0x18>

000000000000c6a0 <__ctype_toupper_loc@plt>:
    c6a0:	jmp    QWORD PTR [rip+0x2752fa]        # 2819a0 <__ctype_toupper_loc@GLIBC_2.3>
    c6a6:	push   0x5e
    c6ab:	jmp    c0b0 <_init@@Base+0x18>

000000000000c6b0 <g_assertion_message_expr@plt>:
    c6b0:	jmp    QWORD PTR [rip+0x2752f2]        # 2819a8 <g_assertion_message_expr>
    c6b6:	push   0x5f
    c6bb:	jmp    c0b0 <_init@@Base+0x18>

000000000000c6c0 <g_main_context_ref@plt>:
    c6c0:	jmp    QWORD PTR [rip+0x2752ea]        # 2819b0 <g_main_context_ref>
    c6c6:	push   0x60
    c6cb:	jmp    c0b0 <_init@@Base+0x18>

000000000000c6d0 <fputc@plt>:
    c6d0:	jmp    QWORD PTR [rip+0x2752e2]        # 2819b8 <fputc@GLIBC_2.2.5>
    c6d6:	push   0x61
    c6db:	jmp    c0b0 <_init@@Base+0x18>

000000000000c6e0 <freeaddrinfo@plt>:
    c6e0:	jmp    QWORD PTR [rip+0x2752da]        # 2819c0 <freeaddrinfo@GLIBC_2.2.5>
    c6e6:	push   0x62
    c6eb:	jmp    c0b0 <_init@@Base+0x18>

000000000000c6f0 <g_slist_append@plt>:
    c6f0:	jmp    QWORD PTR [rip+0x2752d2]        # 2819c8 <g_slist_append>
    c6f6:	push   0x63
    c6fb:	jmp    c0b0 <_init@@Base+0x18>

000000000000c700 <free@plt>:
    c700:	jmp    QWORD PTR [rip+0x2752ca]        # 2819d0 <free@GLIBC_2.2.5>
    c706:	push   0x64
    c70b:	jmp    c0b0 <_init@@Base+0x18>

000000000000c710 <g_hmac_update@plt>:
    c710:	jmp    QWORD PTR [rip+0x2752c2]        # 2819d8 <g_hmac_update>
    c716:	push   0x65
    c71b:	jmp    c0b0 <_init@@Base+0x18>

000000000000c720 <strlen@plt>:
    c720:	jmp    QWORD PTR [rip+0x2752ba]        # 2819e0 <strlen@GLIBC_2.2.5>
    c726:	push   0x66
    c72b:	jmp    c0b0 <_init@@Base+0x18>

000000000000c730 <g_checksum_free@plt>:
    c730:	jmp    QWORD PTR [rip+0x2752b2]        # 2819e8 <g_checksum_free>
    c736:	push   0x67
    c73b:	jmp    c0b0 <_init@@Base+0x18>

000000000000c740 <g_strdup_printf@plt>:
    c740:	jmp    QWORD PTR [rip+0x2752aa]        # 2819f0 <g_strdup_printf>
    c746:	push   0x68
    c74b:	jmp    c0b0 <_init@@Base+0x18>

000000000000c750 <ferror@plt>:
    c750:	jmp    QWORD PTR [rip+0x2752a2]        # 2819f8 <ferror@GLIBC_2.2.5>
    c756:	push   0x69
    c75b:	jmp    c0b0 <_init@@Base+0x18>

000000000000c760 <g_source_remove_poll@plt>:
    c760:	jmp    QWORD PTR [rip+0x27529a]        # 281a00 <g_source_remove_poll>
    c766:	push   0x6a
    c76b:	jmp    c0b0 <_init@@Base+0x18>

000000000000c770 <pthread_create@plt>:
    c770:	jmp    QWORD PTR [rip+0x275292]        # 281a08 <pthread_create@GLIBC_2.2.5>
    c776:	push   0x6b
    c77b:	jmp    c0b0 <_init@@Base+0x18>

000000000000c780 <g_main_context_new@plt>:
    c780:	jmp    QWORD PTR [rip+0x27528a]        # 281a10 <g_main_context_new>
    c786:	push   0x6c
    c78b:	jmp    c0b0 <_init@@Base+0x18>

000000000000c790 <pthread_cond_init@plt>:
    c790:	jmp    QWORD PTR [rip+0x275282]        # 281a18 <pthread_cond_init@GLIBC_2.3.2>
    c796:	push   0x6d
    c79b:	jmp    c0b0 <_init@@Base+0x18>

000000000000c7a0 <g_string_free@plt>:
    c7a0:	jmp    QWORD PTR [rip+0x27527a]        # 281a20 <g_string_free>
    c7a6:	push   0x6e
    c7ab:	jmp    c0b0 <_init@@Base+0x18>

000000000000c7b0 <g_strstr_len@plt>:
    c7b0:	jmp    QWORD PTR [rip+0x275272]        # 281a28 <g_strstr_len>
    c7b6:	push   0x6f
    c7bb:	jmp    c0b0 <_init@@Base+0x18>

000000000000c7c0 <__vfprintf_chk@plt>:
    c7c0:	jmp    QWORD PTR [rip+0x27526a]        # 281a30 <__vfprintf_chk@GLIBC_2.3.4>
    c7c6:	push   0x70
    c7cb:	jmp    c0b0 <_init@@Base+0x18>

000000000000c7d0 <g_main_context_release@plt>:
    c7d0:	jmp    QWORD PTR [rip+0x275262]        # 281a38 <g_main_context_release>
    c7d6:	push   0x71
    c7db:	jmp    c0b0 <_init@@Base+0x18>

000000000000c7e0 <mkstemp64@plt>:
    c7e0:	jmp    QWORD PTR [rip+0x27525a]        # 281a40 <mkstemp64@GLIBC_2.2.5>
    c7e6:	push   0x72
    c7eb:	jmp    c0b0 <_init@@Base+0x18>

000000000000c7f0 <listen@plt>:
    c7f0:	jmp    QWORD PTR [rip+0x275252]        # 281a48 <listen@GLIBC_2.2.5>
    c7f6:	push   0x73
    c7fb:	jmp    c0b0 <_init@@Base+0x18>

000000000000c800 <__ctype_b_loc@plt>:
    c800:	jmp    QWORD PTR [rip+0x27524a]        # 281a50 <__ctype_b_loc@GLIBC_2.3>
    c806:	push   0x74
    c80b:	jmp    c0b0 <_init@@Base+0x18>

000000000000c810 <g_hash_table_new@plt>:
    c810:	jmp    QWORD PTR [rip+0x275242]        # 281a58 <g_hash_table_new>
    c816:	push   0x75
    c81b:	jmp    c0b0 <_init@@Base+0x18>

000000000000c820 <g_hash_table_iter_next@plt>:
    c820:	jmp    QWORD PTR [rip+0x27523a]        # 281a60 <g_hash_table_iter_next>
    c826:	push   0x76
    c82b:	jmp    c0b0 <_init@@Base+0x18>

000000000000c830 <g_hash_table_iter_init@plt>:
    c830:	jmp    QWORD PTR [rip+0x275232]        # 281a68 <g_hash_table_iter_init>
    c836:	push   0x77
    c83b:	jmp    c0b0 <_init@@Base+0x18>

000000000000c840 <g_time_val_to_iso8601@plt>:
    c840:	jmp    QWORD PTR [rip+0x27522a]        # 281a70 <g_time_val_to_iso8601>
    c846:	push   0x78
    c84b:	jmp    c0b0 <_init@@Base+0x18>

000000000000c850 <g_hash_table_new_full@plt>:
    c850:	jmp    QWORD PTR [rip+0x275222]        # 281a78 <g_hash_table_new_full>
    c856:	push   0x79
    c85b:	jmp    c0b0 <_init@@Base+0x18>

000000000000c860 <fdatasync@plt>:
    c860:	jmp    QWORD PTR [rip+0x27521a]        # 281a80 <fdatasync@GLIBC_2.2.5>
    c866:	push   0x7a
    c86b:	jmp    c0b0 <_init@@Base+0x18>

000000000000c870 <g_main_context_query@plt>:
    c870:	jmp    QWORD PTR [rip+0x275212]        # 281a88 <g_main_context_query>
    c876:	push   0x7b
    c87b:	jmp    c0b0 <_init@@Base+0x18>

000000000000c880 <g_hash_table_foreach@plt>:
    c880:	jmp    QWORD PTR [rip+0x27520a]        # 281a90 <g_hash_table_foreach>
    c886:	push   0x7c
    c88b:	jmp    c0b0 <_init@@Base+0x18>

000000000000c890 <fgetc@plt>:
    c890:	jmp    QWORD PTR [rip+0x275202]        # 281a98 <fgetc@GLIBC_2.2.5>
    c896:	push   0x7d
    c89b:	jmp    c0b0 <_init@@Base+0x18>

000000000000c8a0 <g_source_ref@plt>:
    c8a0:	jmp    QWORD PTR [rip+0x2751fa]        # 281aa0 <g_source_ref>
    c8a6:	push   0x7e
    c8ab:	jmp    c0b0 <_init@@Base+0x18>

000000000000c8b0 <sem_timedwait@plt>:
    c8b0:	jmp    QWORD PTR [rip+0x2751f2]        # 281aa8 <sem_timedwait@GLIBC_2.2.5>
    c8b6:	push   0x7f
    c8bb:	jmp    c0b0 <_init@@Base+0x18>

000000000000c8c0 <strrchr@plt>:
    c8c0:	jmp    QWORD PTR [rip+0x2751ea]        # 281ab0 <strrchr@GLIBC_2.2.5>
    c8c6:	push   0x80
    c8cb:	jmp    c0b0 <_init@@Base+0x18>

000000000000c8d0 <g_main_context_prepare@plt>:
    c8d0:	jmp    QWORD PTR [rip+0x2751e2]        # 281ab8 <g_main_context_prepare>
    c8d6:	push   0x81
    c8db:	jmp    c0b0 <_init@@Base+0x18>

000000000000c8e0 <syscall@plt>:
    c8e0:	jmp    QWORD PTR [rip+0x2751da]        # 281ac0 <syscall@GLIBC_2.2.5>
    c8e6:	push   0x82
    c8eb:	jmp    c0b0 <_init@@Base+0x18>

000000000000c8f0 <g_slist_prepend@plt>:
    c8f0:	jmp    QWORD PTR [rip+0x2751d2]        # 281ac8 <g_slist_prepend>
    c8f6:	push   0x83
    c8fb:	jmp    c0b0 <_init@@Base+0x18>

000000000000c900 <getpagesize@plt>:
    c900:	jmp    QWORD PTR [rip+0x2751ca]        # 281ad0 <getpagesize@GLIBC_2.2.5>
    c906:	push   0x84
    c90b:	jmp    c0b0 <_init@@Base+0x18>

000000000000c910 <statfs64@plt>:
    c910:	jmp    QWORD PTR [rip+0x2751c2]        # 281ad8 <statfs64@GLIBC_2.2.5>
    c916:	push   0x85
    c91b:	jmp    c0b0 <_init@@Base+0x18>

000000000000c920 <sscanf@plt>:
    c920:	jmp    QWORD PTR [rip+0x2751ba]        # 281ae0 <sscanf@GLIBC_2.2.5>
    c926:	push   0x86
    c92b:	jmp    c0b0 <_init@@Base+0x18>

000000000000c930 <pipe@plt>:
    c930:	jmp    QWORD PTR [rip+0x2751b2]        # 281ae8 <pipe@GLIBC_2.2.5>
    c936:	push   0x87
    c93b:	jmp    c0b0 <_init@@Base+0x18>

000000000000c940 <epoll_create1@plt>:
    c940:	jmp    QWORD PTR [rip+0x2751aa]        # 281af0 <epoll_create1@GLIBC_2.9>
    c946:	push   0x88
    c94b:	jmp    c0b0 <_init@@Base+0x18>

000000000000c950 <pthread_self@plt>:
    c950:	jmp    QWORD PTR [rip+0x2751a2]        # 281af8 <pthread_self@GLIBC_2.2.5>
    c956:	push   0x89
    c95b:	jmp    c0b0 <_init@@Base+0x18>

000000000000c960 <g_strdup_vprintf@plt>:
    c960:	jmp    QWORD PTR [rip+0x27519a]        # 281b00 <g_strdup_vprintf>
    c966:	push   0x8a
    c96b:	jmp    c0b0 <_init@@Base+0x18>

000000000000c970 <sendmsg@plt>:
    c970:	jmp    QWORD PTR [rip+0x275192]        # 281b08 <sendmsg@GLIBC_2.2.5>
    c976:	push   0x8b
    c97b:	jmp    c0b0 <_init@@Base+0x18>

000000000000c980 <pthread_join@plt>:
    c980:	jmp    QWORD PTR [rip+0x27518a]        # 281b10 <pthread_join@GLIBC_2.2.5>
    c986:	push   0x8c
    c98b:	jmp    c0b0 <_init@@Base+0x18>

000000000000c990 <g_hash_table_iter_remove@plt>:
    c990:	jmp    QWORD PTR [rip+0x275182]        # 281b18 <g_hash_table_iter_remove>
    c996:	push   0x8d
    c99b:	jmp    c0b0 <_init@@Base+0x18>

000000000000c9a0 <pthread_mutex_trylock@plt>:
    c9a0:	jmp    QWORD PTR [rip+0x27517a]        # 281b20 <pthread_mutex_trylock@GLIBC_2.2.5>
    c9a6:	push   0x8e
    c9ab:	jmp    c0b0 <_init@@Base+0x18>

000000000000c9b0 <g_idle_source_new@plt>:
    c9b0:	jmp    QWORD PTR [rip+0x275172]        # 281b28 <g_idle_source_new>
    c9b6:	push   0x8f
    c9bb:	jmp    c0b0 <_init@@Base+0x18>

000000000000c9c0 <g_slist_sort@plt>:
    c9c0:	jmp    QWORD PTR [rip+0x27516a]        # 281b30 <g_slist_sort>
    c9c6:	push   0x90
    c9cb:	jmp    c0b0 <_init@@Base+0x18>

000000000000c9d0 <lockf64@plt>:
    c9d0:	jmp    QWORD PTR [rip+0x275162]        # 281b38 <lockf64@GLIBC_2.2.5>
    c9d6:	push   0x91
    c9db:	jmp    c0b0 <_init@@Base+0x18>

000000000000c9e0 <gmtime_r@plt>:
    c9e0:	jmp    QWORD PTR [rip+0x27515a]        # 281b40 <gmtime_r@GLIBC_2.2.5>
    c9e6:	push   0x92
    c9eb:	jmp    c0b0 <_init@@Base+0x18>

000000000000c9f0 <kill@plt>:
    c9f0:	jmp    QWORD PTR [rip+0x275152]        # 281b48 <kill@GLIBC_2.2.5>
    c9f6:	push   0x93
    c9fb:	jmp    c0b0 <_init@@Base+0x18>

000000000000ca00 <usleep@plt>:
    ca00:	jmp    QWORD PTR [rip+0x27514a]        # 281b50 <usleep@GLIBC_2.2.5>
    ca06:	push   0x94
    ca0b:	jmp    c0b0 <_init@@Base+0x18>

000000000000ca10 <strerror@plt>:
    ca10:	jmp    QWORD PTR [rip+0x275142]        # 281b58 <strerror@GLIBC_2.2.5>
    ca16:	push   0x95
    ca1b:	jmp    c0b0 <_init@@Base+0x18>

000000000000ca20 <open64@plt>:
    ca20:	jmp    QWORD PTR [rip+0x27513a]        # 281b60 <open64@GLIBC_2.2.5>
    ca26:	push   0x96
    ca2b:	jmp    c0b0 <_init@@Base+0x18>

000000000000ca30 <epoll_ctl@plt>:
    ca30:	jmp    QWORD PTR [rip+0x275132]        # 281b68 <epoll_ctl@GLIBC_2.3.2>
    ca36:	push   0x97
    ca3b:	jmp    c0b0 <_init@@Base+0x18>

000000000000ca40 <strstr@plt>:
    ca40:	jmp    QWORD PTR [rip+0x27512a]        # 281b70 <strstr@GLIBC_2.2.5>
    ca46:	push   0x98
    ca4b:	jmp    c0b0 <_init@@Base+0x18>

000000000000ca50 <sigaction@plt>:
    ca50:	jmp    QWORD PTR [rip+0x275122]        # 281b78 <sigaction@GLIBC_2.2.5>
    ca56:	push   0x99
    ca5b:	jmp    c0b0 <_init@@Base+0x18>

000000000000ca60 <g_list_insert_before@plt>:
    ca60:	jmp    QWORD PTR [rip+0x27511a]        # 281b80 <g_list_insert_before>
    ca66:	push   0x9a
    ca6b:	jmp    c0b0 <_init@@Base+0x18>

000000000000ca70 <g_string_erase@plt>:
    ca70:	jmp    QWORD PTR [rip+0x275112]        # 281b88 <g_string_erase>
    ca76:	push   0x9b
    ca7b:	jmp    c0b0 <_init@@Base+0x18>

000000000000ca80 <pthread_exit@plt>:
    ca80:	jmp    QWORD PTR [rip+0x27510a]        # 281b90 <pthread_exit@GLIBC_2.2.5>
    ca86:	push   0x9c
    ca8b:	jmp    c0b0 <_init@@Base+0x18>

000000000000ca90 <g_main_context_find_source_by_id@plt>:
    ca90:	jmp    QWORD PTR [rip+0x275102]        # 281b98 <g_main_context_find_source_by_id>
    ca96:	push   0x9d
    ca9b:	jmp    c0b0 <_init@@Base+0x18>

000000000000caa0 <g_string_vprintf@plt>:
    caa0:	jmp    QWORD PTR [rip+0x2750fa]        # 281ba0 <g_string_vprintf>
    caa6:	push   0x9e
    caab:	jmp    c0b0 <_init@@Base+0x18>

000000000000cab0 <getsockopt@plt>:
    cab0:	jmp    QWORD PTR [rip+0x2750f2]        # 281ba8 <getsockopt@GLIBC_2.2.5>
    cab6:	push   0x9f
    cabb:	jmp    c0b0 <_init@@Base+0x18>

000000000000cac0 <g_main_context_default@plt>:
    cac0:	jmp    QWORD PTR [rip+0x2750ea]        # 281bb0 <g_main_context_default>
    cac6:	push   0xa0
    cacb:	jmp    c0b0 <_init@@Base+0x18>

000000000000cad0 <g_array_set_size@plt>:
    cad0:	jmp    QWORD PTR [rip+0x2750e2]        # 281bb8 <g_array_set_size>
    cad6:	push   0xa1
    cadb:	jmp    c0b0 <_init@@Base+0x18>

000000000000cae0 <strtol@plt>:
    cae0:	jmp    QWORD PTR [rip+0x2750da]        # 281bc0 <strtol@GLIBC_2.2.5>
    cae6:	push   0xa2
    caeb:	jmp    c0b0 <_init@@Base+0x18>

000000000000caf0 <ftruncate64@plt>:
    caf0:	jmp    QWORD PTR [rip+0x2750d2]        # 281bc8 <ftruncate64@GLIBC_2.2.5>
    caf6:	push   0xa3
    cafb:	jmp    c0b0 <_init@@Base+0x18>

000000000000cb00 <readlink@plt>:
    cb00:	jmp    QWORD PTR [rip+0x2750ca]        # 281bd0 <readlink@GLIBC_2.2.5>
    cb06:	push   0xa4
    cb0b:	jmp    c0b0 <_init@@Base+0x18>

000000000000cb10 <getsockname@plt>:
    cb10:	jmp    QWORD PTR [rip+0x2750c2]        # 281bd8 <getsockname@GLIBC_2.2.5>
    cb16:	push   0xa5
    cb1b:	jmp    c0b0 <_init@@Base+0x18>

000000000000cb20 <connect@plt>:
    cb20:	jmp    QWORD PTR [rip+0x2750ba]        # 281be0 <connect@GLIBC_2.2.5>
    cb26:	push   0xa6
    cb2b:	jmp    c0b0 <_init@@Base+0x18>

000000000000cb30 <g_test_subprocess@plt>:
    cb30:	jmp    QWORD PTR [rip+0x2750b2]        # 281be8 <g_test_subprocess>
    cb36:	push   0xa7
    cb3b:	jmp    c0b0 <_init@@Base+0x18>

000000000000cb40 <g_queue_foreach@plt>:
    cb40:	jmp    QWORD PTR [rip+0x2750aa]        # 281bf0 <g_queue_foreach>
    cb46:	push   0xa8
    cb4b:	jmp    c0b0 <_init@@Base+0x18>

000000000000cb50 <g_string_prepend_c@plt>:
    cb50:	jmp    QWORD PTR [rip+0x2750a2]        # 281bf8 <g_string_prepend_c>
    cb56:	push   0xa9
    cb5b:	jmp    c0b0 <_init@@Base+0x18>

000000000000cb60 <tcgetattr@plt>:
    cb60:	jmp    QWORD PTR [rip+0x27509a]        # 281c00 <tcgetattr@GLIBC_2.2.5>
    cb66:	push   0xaa
    cb6b:	jmp    c0b0 <_init@@Base+0x18>

000000000000cb70 <g_once_impl@plt>:
    cb70:	jmp    QWORD PTR [rip+0x275092]        # 281c08 <g_once_impl>
    cb76:	push   0xab
    cb7b:	jmp    c0b0 <_init@@Base+0x18>

000000000000cb80 <__strcpy_chk@plt>:
    cb80:	jmp    QWORD PTR [rip+0x27508a]        # 281c10 <__strcpy_chk@GLIBC_2.3.4>
    cb86:	push   0xac
    cb8b:	jmp    c0b0 <_init@@Base+0x18>

000000000000cb90 <g_list_delete_link@plt>:
    cb90:	jmp    QWORD PTR [rip+0x275082]        # 281c18 <g_list_delete_link>
    cb96:	push   0xad
    cb9b:	jmp    c0b0 <_init@@Base+0x18>

000000000000cba0 <g_strchomp@plt>:
    cba0:	jmp    QWORD PTR [rip+0x27507a]        # 281c20 <g_strchomp>
    cba6:	push   0xae
    cbab:	jmp    c0b0 <_init@@Base+0x18>

000000000000cbb0 <g_checksum_type_get_length@plt>:
    cbb0:	jmp    QWORD PTR [rip+0x275072]        # 281c28 <g_checksum_type_get_length>
    cbb6:	push   0xaf
    cbbb:	jmp    c0b0 <_init@@Base+0x18>

000000000000cbc0 <signal@plt>:
    cbc0:	jmp    QWORD PTR [rip+0x27506a]        # 281c30 <signal@GLIBC_2.2.5>
    cbc6:	push   0xb0
    cbcb:	jmp    c0b0 <_init@@Base+0x18>

000000000000cbd0 <g_array_sized_new@plt>:
    cbd0:	jmp    QWORD PTR [rip+0x275062]        # 281c38 <g_array_sized_new>
    cbd6:	push   0xb1
    cbdb:	jmp    c0b0 <_init@@Base+0x18>

000000000000cbe0 <strspn@plt>:
    cbe0:	jmp    QWORD PTR [rip+0x27505a]        # 281c40 <strspn@GLIBC_2.2.5>
    cbe6:	push   0xb2
    cbeb:	jmp    c0b0 <_init@@Base+0x18>

000000000000cbf0 <memmove@plt>:
    cbf0:	jmp    QWORD PTR [rip+0x275052]        # 281c48 <memmove@GLIBC_2.2.5>
    cbf6:	push   0xb3
    cbfb:	jmp    c0b0 <_init@@Base+0x18>

000000000000cc00 <strchr@plt>:
    cc00:	jmp    QWORD PTR [rip+0x27504a]        # 281c50 <strchr@GLIBC_2.2.5>
    cc06:	push   0xb4
    cc0b:	jmp    c0b0 <_init@@Base+0x18>

000000000000cc10 <waitpid@plt>:
    cc10:	jmp    QWORD PTR [rip+0x275042]        # 281c58 <waitpid@GLIBC_2.2.5>
    cc16:	push   0xb5
    cc1b:	jmp    c0b0 <_init@@Base+0x18>

000000000000cc20 <getopt_long@plt>:
    cc20:	jmp    QWORD PTR [rip+0x27503a]        # 281c60 <getopt_long@GLIBC_2.2.5>
    cc26:	push   0xb6
    cc2b:	jmp    c0b0 <_init@@Base+0x18>

000000000000cc30 <socket@plt>:
    cc30:	jmp    QWORD PTR [rip+0x275032]        # 281c68 <socket@GLIBC_2.2.5>
    cc36:	push   0xb7
    cc3b:	jmp    c0b0 <_init@@Base+0x18>

000000000000cc40 <getenv@plt>:
    cc40:	jmp    QWORD PTR [rip+0x27502a]        # 281c70 <getenv@GLIBC_2.2.5>
    cc46:	push   0xb8
    cc4b:	jmp    c0b0 <_init@@Base+0x18>

000000000000cc50 <g_source_add_poll@plt>:
    cc50:	jmp    QWORD PTR [rip+0x275022]        # 281c78 <g_source_add_poll>
    cc56:	push   0xb9
    cc5b:	jmp    c0b0 <_init@@Base+0x18>

000000000000cc60 <g_main_context_dispatch@plt>:
    cc60:	jmp    QWORD PTR [rip+0x27501a]        # 281c80 <g_main_context_dispatch>
    cc66:	push   0xba
    cc6b:	jmp    c0b0 <_init@@Base+0x18>

000000000000cc70 <g_str_has_prefix@plt>:
    cc70:	jmp    QWORD PTR [rip+0x275012]        # 281c88 <g_str_has_prefix>
    cc76:	push   0xbb
    cc7b:	jmp    c0b0 <_init@@Base+0x18>

000000000000cc80 <__errno_location@plt>:
    cc80:	jmp    QWORD PTR [rip+0x27500a]        # 281c90 <__errno_location@GLIBC_2.2.5>
    cc86:	push   0xbc
    cc8b:	jmp    c0b0 <_init@@Base+0x18>

000000000000cc90 <g_string_append_vprintf@plt>:
    cc90:	jmp    QWORD PTR [rip+0x275002]        # 281c98 <g_string_append_vprintf>
    cc96:	push   0xbd
    cc9b:	jmp    c0b0 <_init@@Base+0x18>

000000000000cca0 <qsort@plt>:
    cca0:	jmp    QWORD PTR [rip+0x274ffa]        # 281ca0 <qsort@GLIBC_2.2.5>
    cca6:	push   0xbe
    ccab:	jmp    c0b0 <_init@@Base+0x18>

000000000000ccb0 <g_strchug@plt>:
    ccb0:	jmp    QWORD PTR [rip+0x274ff2]        # 281ca8 <g_strchug>
    ccb6:	push   0xbf
    ccbb:	jmp    c0b0 <_init@@Base+0x18>

000000000000ccc0 <g_source_remove@plt>:
    ccc0:	jmp    QWORD PTR [rip+0x274fea]        # 281cb0 <g_source_remove>
    ccc6:	push   0xc0
    cccb:	jmp    c0b0 <_init@@Base+0x18>

000000000000ccd0 <madvise@plt>:
    ccd0:	jmp    QWORD PTR [rip+0x274fe2]        # 281cb8 <madvise@GLIBC_2.2.5>
    ccd6:	push   0xc1
    ccdb:	jmp    c0b0 <_init@@Base+0x18>

000000000000cce0 <accept4@plt>:
    cce0:	jmp    QWORD PTR [rip+0x274fda]        # 281cc0 <accept4@GLIBC_2.10>
    cce6:	push   0xc2
    cceb:	jmp    c0b0 <_init@@Base+0x18>

000000000000ccf0 <g_realloc@plt>:
    ccf0:	jmp    QWORD PTR [rip+0x274fd2]        # 281cc8 <g_realloc>
    ccf6:	push   0xc3
    ccfb:	jmp    c0b0 <_init@@Base+0x18>

000000000000cd00 <sigaddset@plt>:
    cd00:	jmp    QWORD PTR [rip+0x274fca]        # 281cd0 <sigaddset@GLIBC_2.2.5>
    cd06:	push   0xc4
    cd0b:	jmp    c0b0 <_init@@Base+0x18>

000000000000cd10 <sem_init@plt>:
    cd10:	jmp    QWORD PTR [rip+0x274fc2]        # 281cd8 <sem_init@GLIBC_2.2.5>
    cd16:	push   0xc5
    cd1b:	jmp    c0b0 <_init@@Base+0x18>

000000000000cd20 <pthread_mutexattr_settype@plt>:
    cd20:	jmp    QWORD PTR [rip+0x274fba]        # 281ce0 <pthread_mutexattr_settype@GLIBC_2.2.5>
    cd26:	push   0xc6
    cd2b:	jmp    c0b0 <_init@@Base+0x18>

000000000000cd30 <__stack_chk_fail@plt>:
    cd30:	jmp    QWORD PTR [rip+0x274fb2]        # 281ce8 <__stack_chk_fail@GLIBC_2.4>
    cd36:	push   0xc7
    cd3b:	jmp    c0b0 <_init@@Base+0x18>

000000000000cd40 <g_main_context_unref@plt>:
    cd40:	jmp    QWORD PTR [rip+0x274faa]        # 281cf0 <g_main_context_unref>
    cd46:	push   0xc8
    cd4b:	jmp    c0b0 <_init@@Base+0x18>

000000000000cd50 <getnameinfo@plt>:
    cd50:	jmp    QWORD PTR [rip+0x274fa2]        # 281cf8 <getnameinfo@GLIBC_2.2.5>
    cd56:	push   0xc9
    cd5b:	jmp    c0b0 <_init@@Base+0x18>

000000000000cd60 <strcmp@plt>:
    cd60:	jmp    QWORD PTR [rip+0x274f9a]        # 281d00 <strcmp@GLIBC_2.2.5>
    cd66:	push   0xca
    cd6b:	jmp    c0b0 <_init@@Base+0x18>

000000000000cd70 <g_ascii_tolower@plt>:
    cd70:	jmp    QWORD PTR [rip+0x274f92]        # 281d08 <g_ascii_tolower>
    cd76:	push   0xcb
    cd7b:	jmp    c0b0 <_init@@Base+0x18>

000000000000cd80 <sem_post@plt>:
    cd80:	jmp    QWORD PTR [rip+0x274f8a]        # 281d10 <sem_post@GLIBC_2.2.5>
    cd86:	push   0xcc
    cd8b:	jmp    c0b0 <_init@@Base+0x18>

000000000000cd90 <g_strsplit@plt>:
    cd90:	jmp    QWORD PTR [rip+0x274f82]        # 281d18 <g_strsplit>
    cd96:	push   0xcd
    cd9b:	jmp    c0b0 <_init@@Base+0x18>

000000000000cda0 <epoll_wait@plt>:
    cda0:	jmp    QWORD PTR [rip+0x274f7a]        # 281d20 <epoll_wait@GLIBC_2.3.2>
    cda6:	push   0xce
    cdab:	jmp    c0b0 <_init@@Base+0x18>

000000000000cdb0 <g_hash_table_lookup@plt>:
    cdb0:	jmp    QWORD PTR [rip+0x274f72]        # 281d28 <g_hash_table_lookup>
    cdb6:	push   0xcf
    cdbb:	jmp    c0b0 <_init@@Base+0x18>

000000000000cdc0 <g_random_int_range@plt>:
    cdc0:	jmp    QWORD PTR [rip+0x274f6a]        # 281d30 <g_random_int_range>
    cdc6:	push   0xd0
    cdcb:	jmp    c0b0 <_init@@Base+0x18>

000000000000cdd0 <g_queue_get_length@plt>:
    cdd0:	jmp    QWORD PTR [rip+0x274f62]        # 281d38 <g_queue_get_length>
    cdd6:	push   0xd1
    cddb:	jmp    c0b0 <_init@@Base+0x18>

000000000000cde0 <pthread_cond_wait@plt>:
    cde0:	jmp    QWORD PTR [rip+0x274f5a]        # 281d40 <pthread_cond_wait@GLIBC_2.3.2>
    cde6:	push   0xd2
    cdeb:	jmp    c0b0 <_init@@Base+0x18>

000000000000cdf0 <g_base64_encode@plt>:
    cdf0:	jmp    QWORD PTR [rip+0x274f52]        # 281d48 <g_base64_encode>
    cdf6:	push   0xd3
    cdfb:	jmp    c0b0 <_init@@Base+0x18>

000000000000ce00 <g_malloc0@plt>:
    ce00:	jmp    QWORD PTR [rip+0x274f4a]        # 281d50 <g_malloc0>
    ce06:	push   0xd4
    ce0b:	jmp    c0b0 <_init@@Base+0x18>

000000000000ce10 <memcmp@plt>:
    ce10:	jmp    QWORD PTR [rip+0x274f42]        # 281d58 <memcmp@GLIBC_2.2.5>
    ce16:	push   0xd5
    ce1b:	jmp    c0b0 <_init@@Base+0x18>

000000000000ce20 <g_string_insert_c@plt>:
    ce20:	jmp    QWORD PTR [rip+0x274f3a]        # 281d60 <g_string_insert_c>
    ce26:	push   0xd6
    ce2b:	jmp    c0b0 <_init@@Base+0x18>

000000000000ce30 <g_queue_peek_head@plt>:
    ce30:	jmp    QWORD PTR [rip+0x274f32]        # 281d68 <g_queue_peek_head>
    ce36:	push   0xd7
    ce3b:	jmp    c0b0 <_init@@Base+0x18>

000000000000ce40 <getcontext@plt>:
    ce40:	jmp    QWORD PTR [rip+0x274f2a]        # 281d70 <getcontext@GLIBC_2.2.5>
    ce46:	push   0xd8
    ce4b:	jmp    c0b0 <_init@@Base+0x18>

000000000000ce50 <munmap@plt>:
    ce50:	jmp    QWORD PTR [rip+0x274f22]        # 281d78 <munmap@GLIBC_2.2.5>
    ce56:	push   0xd9
    ce5b:	jmp    c0b0 <_init@@Base+0x18>

000000000000ce60 <g_main_loop_unref@plt>:
    ce60:	jmp    QWORD PTR [rip+0x274f1a]        # 281d80 <g_main_loop_unref>
    ce66:	push   0xda
    ce6b:	jmp    c0b0 <_init@@Base+0x18>

000000000000ce70 <g_file_get_contents@plt>:
    ce70:	jmp    QWORD PTR [rip+0x274f12]        # 281d88 <g_file_get_contents>
    ce76:	push   0xdb
    ce7b:	jmp    c0b0 <_init@@Base+0x18>

000000000000ce80 <g_source_set_name@plt>:
    ce80:	jmp    QWORD PTR [rip+0x274f0a]        # 281d90 <g_source_set_name>
    ce86:	push   0xdc
    ce8b:	jmp    c0b0 <_init@@Base+0x18>

000000000000ce90 <writev@plt>:
    ce90:	jmp    QWORD PTR [rip+0x274f02]        # 281d98 <writev@GLIBC_2.2.5>
    ce96:	push   0xdd
    ce9b:	jmp    c0b0 <_init@@Base+0x18>

000000000000cea0 <fclose@plt>:
    cea0:	jmp    QWORD PTR [rip+0x274efa]        # 281da0 <fclose@GLIBC_2.2.5>
    cea6:	push   0xde
    ceab:	jmp    c0b0 <_init@@Base+0x18>

000000000000ceb0 <g_queue_is_empty@plt>:
    ceb0:	jmp    QWORD PTR [rip+0x274ef2]        # 281da8 <g_queue_is_empty>
    ceb6:	push   0xdf
    cebb:	jmp    c0b0 <_init@@Base+0x18>

000000000000cec0 <g_source_destroy@plt>:
    cec0:	jmp    QWORD PTR [rip+0x274eea]        # 281db0 <g_source_destroy>
    cec6:	push   0xe0
    cecb:	jmp    c0b0 <_init@@Base+0x18>

000000000000ced0 <strncpy@plt>:
    ced0:	jmp    QWORD PTR [rip+0x274ee2]        # 281db8 <strncpy@GLIBC_2.2.5>
    ced6:	push   0xe1
    cedb:	jmp    c0b0 <_init@@Base+0x18>

000000000000cee0 <pthread_attr_init@plt>:
    cee0:	jmp    QWORD PTR [rip+0x274eda]        # 281dc0 <pthread_attr_init@GLIBC_2.2.5>
    cee6:	push   0xe2
    ceeb:	jmp    c0b0 <_init@@Base+0x18>

000000000000cef0 <g_source_unref@plt>:
    cef0:	jmp    QWORD PTR [rip+0x274ed2]        # 281dc8 <g_source_unref>
    cef6:	push   0xe3
    cefb:	jmp    c0b0 <_init@@Base+0x18>

000000000000cf00 <lseek64@plt>:
    cf00:	jmp    QWORD PTR [rip+0x274eca]        # 281dd0 <lseek64@GLIBC_2.2.5>
    cf06:	push   0xe4
    cf0b:	jmp    c0b0 <_init@@Base+0x18>

000000000000cf10 <g_string_truncate@plt>:
    cf10:	jmp    QWORD PTR [rip+0x274ec2]        # 281dd8 <g_string_truncate>
    cf16:	push   0xe5
    cf1b:	jmp    c0b0 <_init@@Base+0x18>

000000000000cf20 <g_main_context_acquire@plt>:
    cf20:	jmp    QWORD PTR [rip+0x274eba]        # 281de0 <g_main_context_acquire>
    cf26:	push   0xe6
    cf2b:	jmp    c0b0 <_init@@Base+0x18>

000000000000cf30 <strtoull@plt>:
    cf30:	jmp    QWORD PTR [rip+0x274eb2]        # 281de8 <strtoull@GLIBC_2.2.5>
    cf36:	push   0xe7
    cf3b:	jmp    c0b0 <_init@@Base+0x18>

000000000000cf40 <unsetenv@plt>:
    cf40:	jmp    QWORD PTR [rip+0x274eaa]        # 281df0 <unsetenv@GLIBC_2.2.5>
    cf46:	push   0xe8
    cf4b:	jmp    c0b0 <_init@@Base+0x18>

000000000000cf50 <g_list_first@plt>:
    cf50:	jmp    QWORD PTR [rip+0x274ea2]        # 281df8 <g_list_first>
    cf56:	push   0xe9
    cf5b:	jmp    c0b0 <_init@@Base+0x18>

000000000000cf60 <g_hmac_unref@plt>:
    cf60:	jmp    QWORD PTR [rip+0x274e9a]        # 281e00 <g_hmac_unref>
    cf66:	push   0xea
    cf6b:	jmp    c0b0 <_init@@Base+0x18>

000000000000cf70 <g_source_attach@plt>:
    cf70:	jmp    QWORD PTR [rip+0x274e92]        # 281e08 <g_source_attach>
    cf76:	push   0xeb
    cf7b:	jmp    c0b0 <_init@@Base+0x18>

000000000000cf80 <g_queue_peek_tail@plt>:
    cf80:	jmp    QWORD PTR [rip+0x274e8a]        # 281e10 <g_queue_peek_tail>
    cf86:	push   0xec
    cf8b:	jmp    c0b0 <_init@@Base+0x18>

000000000000cf90 <g_source_is_destroyed@plt>:
    cf90:	jmp    QWORD PTR [rip+0x274e82]        # 281e18 <g_source_is_destroyed>
    cf96:	push   0xed
    cf9b:	jmp    c0b0 <_init@@Base+0x18>

000000000000cfa0 <g_hash_table_unref@plt>:
    cfa0:	jmp    QWORD PTR [rip+0x274e7a]        # 281e20 <g_hash_table_unref>
    cfa6:	push   0xee
    cfab:	jmp    c0b0 <_init@@Base+0x18>

000000000000cfb0 <strcspn@plt>:
    cfb0:	jmp    QWORD PTR [rip+0x274e72]        # 281e28 <strcspn@GLIBC_2.2.5>
    cfb6:	push   0xef
    cfbb:	jmp    c0b0 <_init@@Base+0x18>

000000000000cfc0 <__realpath_chk@plt>:
    cfc0:	jmp    QWORD PTR [rip+0x274e6a]        # 281e30 <__realpath_chk@GLIBC_2.4>
    cfc6:	push   0xf0
    cfcb:	jmp    c0b0 <_init@@Base+0x18>

000000000000cfd0 <g_get_current_time@plt>:
    cfd0:	jmp    QWORD PTR [rip+0x274e62]        # 281e38 <g_get_current_time>
    cfd6:	push   0xf1
    cfdb:	jmp    c0b0 <_init@@Base+0x18>

000000000000cfe0 <__snprintf_chk@plt>:
    cfe0:	jmp    QWORD PTR [rip+0x274e5a]        # 281e40 <__snprintf_chk@GLIBC_2.3.4>
    cfe6:	push   0xf2
    cfeb:	jmp    c0b0 <_init@@Base+0x18>

000000000000cff0 <g_error_free@plt>:
    cff0:	jmp    QWORD PTR [rip+0x274e52]        # 281e48 <g_error_free>
    cff6:	push   0xf3
    cffb:	jmp    c0b0 <_init@@Base+0x18>

000000000000d000 <fork@plt>:
    d000:	jmp    QWORD PTR [rip+0x274e4a]        # 281e50 <fork@GLIBC_2.2.5>
    d006:	push   0xf4
    d00b:	jmp    c0b0 <_init@@Base+0x18>

000000000000d010 <sigemptyset@plt>:
    d010:	jmp    QWORD PTR [rip+0x274e42]        # 281e58 <sigemptyset@GLIBC_2.2.5>
    d016:	push   0xf5
    d01b:	jmp    c0b0 <_init@@Base+0x18>

000000000000d020 <modf@plt>:
    d020:	jmp    QWORD PTR [rip+0x274e3a]        # 281e60 <modf@GLIBC_2.2.5>
    d026:	push   0xf6
    d02b:	jmp    c0b0 <_init@@Base+0x18>

000000000000d030 <g_strfreev@plt>:
    d030:	jmp    QWORD PTR [rip+0x274e32]        # 281e68 <g_strfreev>
    d036:	push   0xf7
    d03b:	jmp    c0b0 <_init@@Base+0x18>

000000000000d040 <pthread_sigmask@plt>:
    d040:	jmp    QWORD PTR [rip+0x274e2a]        # 281e70 <pthread_sigmask@GLIBC_2.2.5>
    d046:	push   0xf8
    d04b:	jmp    c0b0 <_init@@Base+0x18>

000000000000d050 <fopen64@plt>:
    d050:	jmp    QWORD PTR [rip+0x274e22]        # 281e78 <fopen64@GLIBC_2.2.5>
    d056:	push   0xf9
    d05b:	jmp    c0b0 <_init@@Base+0x18>

000000000000d060 <strtoll@plt>:
    d060:	jmp    QWORD PTR [rip+0x274e1a]        # 281e80 <strtoll@GLIBC_2.2.5>
    d066:	push   0xfa
    d06b:	jmp    c0b0 <_init@@Base+0x18>

000000000000d070 <g_malloc_n@plt>:
    d070:	jmp    QWORD PTR [rip+0x274e12]        # 281e88 <g_malloc_n>
    d076:	push   0xfb
    d07b:	jmp    c0b0 <_init@@Base+0x18>

000000000000d080 <bind@plt>:
    d080:	jmp    QWORD PTR [rip+0x274e0a]        # 281e90 <bind@GLIBC_2.2.5>
    d086:	push   0xfc
    d08b:	jmp    c0b0 <_init@@Base+0x18>

000000000000d090 <fwrite@plt>:
    d090:	jmp    QWORD PTR [rip+0x274e02]        # 281e98 <fwrite@GLIBC_2.2.5>
    d096:	push   0xfd
    d09b:	jmp    c0b0 <_init@@Base+0x18>

000000000000d0a0 <pthread_mutex_lock@plt>:
    d0a0:	jmp    QWORD PTR [rip+0x274dfa]        # 281ea0 <pthread_mutex_lock@GLIBC_2.2.5>
    d0a6:	push   0xfe
    d0ab:	jmp    c0b0 <_init@@Base+0x18>

000000000000d0b0 <sigdelset@plt>:
    d0b0:	jmp    QWORD PTR [rip+0x274df2]        # 281ea8 <sigdelset@GLIBC_2.2.5>
    d0b6:	push   0xff
    d0bb:	jmp    c0b0 <_init@@Base+0x18>

000000000000d0c0 <g_hmac_new@plt>:
    d0c0:	jmp    QWORD PTR [rip+0x274dea]        # 281eb0 <g_hmac_new>
    d0c6:	push   0x100
    d0cb:	jmp    c0b0 <_init@@Base+0x18>

000000000000d0d0 <perror@plt>:
    d0d0:	jmp    QWORD PTR [rip+0x274de2]        # 281eb8 <perror@GLIBC_2.2.5>
    d0d6:	push   0x101
    d0db:	jmp    c0b0 <_init@@Base+0x18>

000000000000d0e0 <pthread_mutexattr_init@plt>:
    d0e0:	jmp    QWORD PTR [rip+0x274dda]        # 281ec0 <pthread_mutexattr_init@GLIBC_2.2.5>
    d0e6:	push   0x102
    d0eb:	jmp    c0b0 <_init@@Base+0x18>

000000000000d0f0 <__sigsetjmp@plt>:
    d0f0:	jmp    QWORD PTR [rip+0x274dd2]        # 281ec8 <__sigsetjmp@GLIBC_2.2.5>
    d0f6:	push   0x103
    d0fb:	jmp    c0b0 <_init@@Base+0x18>

000000000000d100 <gai_strerror@plt>:
    d100:	jmp    QWORD PTR [rip+0x274dca]        # 281ed0 <gai_strerror@GLIBC_2.2.5>
    d106:	push   0x104
    d10b:	jmp    c0b0 <_init@@Base+0x18>

000000000000d110 <pthread_key_create@plt>:
    d110:	jmp    QWORD PTR [rip+0x274dc2]        # 281ed8 <pthread_key_create@GLIBC_2.2.5>
    d116:	push   0x105
    d11b:	jmp    c0b0 <_init@@Base+0x18>

000000000000d120 <g_hmac_get_digest@plt>:
    d120:	jmp    QWORD PTR [rip+0x274dba]        # 281ee0 <g_hmac_get_digest>
    d126:	push   0x106
    d12b:	jmp    c0b0 <_init@@Base+0x18>

000000000000d130 <pthread_mutex_destroy@plt>:
    d130:	jmp    QWORD PTR [rip+0x274db2]        # 281ee8 <pthread_mutex_destroy@GLIBC_2.2.5>
    d136:	push   0x107
    d13b:	jmp    c0b0 <_init@@Base+0x18>

000000000000d140 <write@plt>:
    d140:	jmp    QWORD PTR [rip+0x274daa]        # 281ef0 <write@GLIBC_2.2.5>
    d146:	push   0x108
    d14b:	jmp    c0b0 <_init@@Base+0x18>

000000000000d150 <g_main_loop_run@plt>:
    d150:	jmp    QWORD PTR [rip+0x274da2]        # 281ef8 <g_main_loop_run>
    d156:	push   0x109
    d15b:	jmp    c0b0 <_init@@Base+0x18>

000000000000d160 <pthread_cond_broadcast@plt>:
    d160:	jmp    QWORD PTR [rip+0x274d9a]        # 281f00 <pthread_cond_broadcast@GLIBC_2.3.2>
    d166:	push   0x10a
    d16b:	jmp    c0b0 <_init@@Base+0x18>

000000000000d170 <strftime@plt>:
    d170:	jmp    QWORD PTR [rip+0x274d92]        # 281f08 <strftime@GLIBC_2.2.5>
    d176:	push   0x10b
    d17b:	jmp    c0b0 <_init@@Base+0x18>

000000000000d180 <accept@plt>:
    d180:	jmp    QWORD PTR [rip+0x274d8a]        # 281f10 <accept@GLIBC_2.2.5>
    d186:	push   0x10c
    d18b:	jmp    c0b0 <_init@@Base+0x18>

000000000000d190 <clock_gettime@plt>:
    d190:	jmp    QWORD PTR [rip+0x274d82]        # 281f18 <clock_gettime@GLIBC_2.2.5>
    d196:	push   0x10d
    d19b:	jmp    c0b0 <_init@@Base+0x18>

000000000000d1a0 <strtoul@plt>:
    d1a0:	jmp    QWORD PTR [rip+0x274d7a]        # 281f20 <strtoul@GLIBC_2.2.5>
    d1a6:	push   0x10e
    d1ab:	jmp    c0b0 <_init@@Base+0x18>

000000000000d1b0 <g_queue_new@plt>:
    d1b0:	jmp    QWORD PTR [rip+0x274d72]        # 281f28 <g_queue_new>
    d1b6:	push   0x10f
    d1bb:	jmp    c0b0 <_init@@Base+0x18>

000000000000d1c0 <g_array_append_vals@plt>:
    d1c0:	jmp    QWORD PTR [rip+0x274d6a]        # 281f30 <g_array_append_vals>
    d1c6:	push   0x110
    d1cb:	jmp    c0b0 <_init@@Base+0x18>

000000000000d1d0 <g_string_append@plt>:
    d1d0:	jmp    QWORD PTR [rip+0x274d62]        # 281f38 <g_string_append>
    d1d6:	push   0x111
    d1db:	jmp    c0b0 <_init@@Base+0x18>

000000000000d1e0 <readv@plt>:
    d1e0:	jmp    QWORD PTR [rip+0x274d5a]        # 281f40 <readv@GLIBC_2.2.5>
    d1e6:	push   0x112
    d1eb:	jmp    c0b0 <_init@@Base+0x18>

000000000000d1f0 <pthread_mutex_unlock@plt>:
    d1f0:	jmp    QWORD PTR [rip+0x274d52]        # 281f48 <pthread_mutex_unlock@GLIBC_2.2.5>
    d1f6:	push   0x113
    d1fb:	jmp    c0b0 <_init@@Base+0x18>

000000000000d200 <g_string_append_printf@plt>:
    d200:	jmp    QWORD PTR [rip+0x274d4a]        # 281f50 <g_string_append_printf>
    d206:	push   0x114
    d20b:	jmp    c0b0 <_init@@Base+0x18>

000000000000d210 <sigwait@plt>:
    d210:	jmp    QWORD PTR [rip+0x274d42]        # 281f58 <sigwait@GLIBC_2.2.5>
    d216:	push   0x115
    d21b:	jmp    c0b0 <_init@@Base+0x18>

000000000000d220 <memcpy@plt>:
    d220:	jmp    QWORD PTR [rip+0x274d3a]        # 281f60 <memcpy@GLIBC_2.14>
    d226:	push   0x116
    d22b:	jmp    c0b0 <_init@@Base+0x18>

000000000000d230 <fcntl@plt>:
    d230:	jmp    QWORD PTR [rip+0x274d32]        # 281f68 <fcntl@GLIBC_2.2.5>
    d236:	push   0x117
    d23b:	jmp    c0b0 <_init@@Base+0x18>

000000000000d240 <strtod@plt>:
    d240:	jmp    QWORD PTR [rip+0x274d2a]        # 281f70 <strtod@GLIBC_2.2.5>
    d246:	push   0x118
    d24b:	jmp    c0b0 <_init@@Base+0x18>

000000000000d250 <_IO_putc@plt>:
    d250:	jmp    QWORD PTR [rip+0x274d22]        # 281f78 <_IO_putc@GLIBC_2.2.5>
    d256:	push   0x119
    d25b:	jmp    c0b0 <_init@@Base+0x18>

000000000000d260 <time@plt>:
    d260:	jmp    QWORD PTR [rip+0x274d1a]        # 281f80 <time@GLIBC_2.2.5>
    d266:	push   0x11a
    d26b:	jmp    c0b0 <_init@@Base+0x18>

000000000000d270 <fflush@plt>:
    d270:	jmp    QWORD PTR [rip+0x274d12]        # 281f88 <fflush@GLIBC_2.2.5>
    d276:	push   0x11b
    d27b:	jmp    c0b0 <_init@@Base+0x18>

000000000000d280 <g_queue_pop_head@plt>:
    d280:	jmp    QWORD PTR [rip+0x274d0a]        # 281f90 <g_queue_pop_head>
    d286:	push   0x11c
    d28b:	jmp    c0b0 <_init@@Base+0x18>

000000000000d290 <g_strlcpy@plt>:
    d290:	jmp    QWORD PTR [rip+0x274d02]        # 281f98 <g_strlcpy>
    d296:	push   0x11d
    d29b:	jmp    c0b0 <_init@@Base+0x18>

000000000000d2a0 <pthread_attr_setdetachstate@plt>:
    d2a0:	jmp    QWORD PTR [rip+0x274cfa]        # 281fa0 <pthread_attr_setdetachstate@GLIBC_2.2.5>
    d2a6:	push   0x11e
    d2ab:	jmp    c0b0 <_init@@Base+0x18>

Disassembly of section .plt.got:

000000000000d2b0 <g_free@plt>:
    d2b0:	jmp    QWORD PTR [rip+0x274cf2]        # 281fa8 <g_free>
    d2b6:	xchg   ax,ax

000000000000d2b8 <__cxa_finalize@plt>:
    d2b8:	jmp    QWORD PTR [rip+0x274d1a]        # 281fd8 <__cxa_finalize@GLIBC_2.2.5>
    d2be:	xchg   ax,ax

000000000000d2c0 <g_str_equal@plt>:
    d2c0:	jmp    QWORD PTR [rip+0x274d1a]        # 281fe0 <g_str_equal>
    d2c6:	xchg   ax,ax

Disassembly of section .text:

000000000000d2d0 <.text>:
    d2d0:	lea    rcx,[rip+0x507b1]        # 5da88 <_fini@@Base+0xb334>
    d2d7:	lea    rsi,[rip+0x503ba]        # 5d698 <_fini@@Base+0xaf44>
    d2de:	lea    rdi,[rip+0x503fb]        # 5d6e0 <_fini@@Base+0xaf8c>
    d2e5:	sub    rsp,0x8
    d2e9:	mov    edx,0x7f
    d2ee:	call   c390 <__assert_fail@plt>
    d2f3:	lea    rcx,[rip+0x50806]        # 5db00 <_fini@@Base+0xb3ac>
    d2fa:	lea    rsi,[rip+0x50397]        # 5d698 <_fini@@Base+0xaf44>
    d301:	lea    rdi,[rip+0x501e7]        # 5d4ef <_fini@@Base+0xad9b>
    d308:	sub    rsp,0x8
    d30c:	mov    edx,0x62
    d311:	call   c390 <__assert_fail@plt>
    d316:	lea    rcx,[rip+0x51743]        # 5ea60 <_fini@@Base+0xc30c>
    d31d:	lea    rsi,[rip+0x50374]        # 5d698 <_fini@@Base+0xaf44>
    d324:	lea    rdi,[rip+0x501c4]        # 5d4ef <_fini@@Base+0xad9b>
    d32b:	sub    rsp,0x8
    d32f:	mov    edx,0x62
    d334:	call   c390 <__assert_fail@plt>
    d339:	lea    rcx,[rip+0x51c10]        # 5ef50 <_fini@@Base+0xc7fc>
    d340:	lea    rsi,[rip+0x50351]        # 5d698 <_fini@@Base+0xaf44>
    d347:	lea    rdi,[rip+0x501a1]        # 5d4ef <_fini@@Base+0xad9b>
    d34e:	sub    rsp,0x8
    d352:	mov    edx,0x62
    d357:	call   c390 <__assert_fail@plt>
    d35c:	lea    rcx,[rip+0x51ed5]        # 5f238 <_fini@@Base+0xcae4>
    d363:	lea    rsi,[rip+0x5032e]        # 5d698 <_fini@@Base+0xaf44>
    d36a:	lea    rdi,[rip+0x5036f]        # 5d6e0 <_fini@@Base+0xaf8c>
    d371:	sub    rsp,0x8
    d375:	mov    edx,0x7f
    d37a:	call   c390 <__assert_fail@plt>
    d37f:	lea    rcx,[rip+0x5212a]        # 5f4b0 <_fini@@Base+0xcd5c>
    d386:	lea    rsi,[rip+0x51fcb]        # 5f358 <_fini@@Base+0xcc04>
    d38d:	lea    rdi,[rip+0x51f4c]        # 5f2e0 <_fini@@Base+0xcb8c>
    d394:	sub    rsp,0x8
    d398:	mov    edx,0x68
    d39d:	call   c390 <__assert_fail@plt>
    d3a2:	lea    rcx,[rip+0x520b7]        # 5f460 <_fini@@Base+0xcd0c>
    d3a9:	lea    rsi,[rip+0x51fa8]        # 5f358 <_fini@@Base+0xcc04>
    d3b0:	lea    rdi,[rip+0x51f29]        # 5f2e0 <_fini@@Base+0xcb8c>
    d3b7:	sub    rsp,0x8
    d3bb:	mov    edx,0x50
    d3c0:	call   c390 <__assert_fail@plt>
    d3c5:	lea    rcx,[rip+0x5258c]        # 5f958 <_fini@@Base+0xd204>
    d3cc:	lea    rsi,[rip+0x52325]        # 5f6f8 <_fini@@Base+0xcfa4>
    d3d3:	lea    rdi,[rip+0x523ce]        # 5f7a8 <_fini@@Base+0xd054>
    d3da:	sub    rsp,0x8
    d3de:	mov    edx,0x141
    d3e3:	call   c390 <__assert_fail@plt>
    d3e8:	lea    rcx,[rip+0x52839]        # 5fc28 <_fini@@Base+0xd4d4>
    d3ef:	lea    rsi,[rip+0x502a2]        # 5d698 <_fini@@Base+0xaf44>
    d3f6:	lea    rdi,[rip+0x502e3]        # 5d6e0 <_fini@@Base+0xaf8c>
    d3fd:	sub    rsp,0x8
    d401:	mov    edx,0x7f
    d406:	call   c390 <__assert_fail@plt>
    d40b:	lea    rcx,[rip+0x52976]        # 5fd88 <_fini@@Base+0xd634>
    d412:	lea    rsi,[rip+0x5027f]        # 5d698 <_fini@@Base+0xaf44>
    d419:	lea    rdi,[rip+0x502c0]        # 5d6e0 <_fini@@Base+0xaf8c>
    d420:	sub    rsp,0x8
    d424:	mov    edx,0x7f
    d429:	call   c390 <__assert_fail@plt>
    d42e:	lea    rcx,[rip+0x52a33]        # 5fe68 <_fini@@Base+0xd714>
    d435:	lea    rsi,[rip+0x5025c]        # 5d698 <_fini@@Base+0xaf44>
    d43c:	lea    rdi,[rip+0x5029d]        # 5d6e0 <_fini@@Base+0xaf8c>
    d443:	sub    rsp,0x8
    d447:	mov    edx,0x7f
    d44c:	call   c390 <__assert_fail@plt>
    d451:	lea    rcx,[rip+0x52a28]        # 5fe80 <_fini@@Base+0xd72c>
    d458:	lea    rsi,[rip+0x50239]        # 5d698 <_fini@@Base+0xaf44>
    d45f:	lea    rdi,[rip+0x50089]        # 5d4ef <_fini@@Base+0xad9b>
    d466:	sub    rsp,0x8
    d46a:	mov    edx,0x62
    d46f:	call   c390 <__assert_fail@plt>
    d474:	lea    rcx,[rip+0x52a9d]        # 5ff18 <_fini@@Base+0xd7c4>
    d47b:	lea    rsi,[rip+0x50216]        # 5d698 <_fini@@Base+0xaf44>
    d482:	lea    rdi,[rip+0x50257]        # 5d6e0 <_fini@@Base+0xaf8c>
    d489:	sub    rsp,0x8
    d48d:	mov    edx,0x7f
    d492:	call   c390 <__assert_fail@plt>
    d497:	lea    rcx,[rip+0x52aea]        # 5ff88 <_fini@@Base+0xd834>
    d49e:	lea    rsi,[rip+0x501f3]        # 5d698 <_fini@@Base+0xaf44>
    d4a5:	lea    rdi,[rip+0x50234]        # 5d6e0 <_fini@@Base+0xaf8c>
    d4ac:	sub    rsp,0x8
    d4b0:	mov    edx,0x7f
    d4b5:	call   c390 <__assert_fail@plt>
    d4ba:	lea    rcx,[rip+0x52b87]        # 60048 <_fini@@Base+0xd8f4>
    d4c1:	lea    rsi,[rip+0x501d0]        # 5d698 <_fini@@Base+0xaf44>
    d4c8:	lea    rdi,[rip+0x50211]        # 5d6e0 <_fini@@Base+0xaf8c>
    d4cf:	sub    rsp,0x8
    d4d3:	mov    edx,0x7f
    d4d8:	call   c390 <__assert_fail@plt>
    d4dd:	lea    rcx,[rip+0x530bc]        # 605a0 <_fini@@Base+0xde4c>
    d4e4:	lea    rsi,[rip+0x501ad]        # 5d698 <_fini@@Base+0xaf44>
    d4eb:	lea    rdi,[rip+0x4fffd]        # 5d4ef <_fini@@Base+0xad9b>
    d4f2:	sub    rsp,0x8
    d4f6:	mov    edx,0x62
    d4fb:	call   c390 <__assert_fail@plt>
    d500:	sub    rsp,0x8
    d504:	call   cc80 <__errno_location@plt>
    d509:	mov    edi,DWORD PTR [rax]
    d50b:	call   ca10 <strerror@plt>
    d510:	mov    rdi,QWORD PTR [rip+0x277429]        # 284940 <stderr@@GLIBC_2.2.5>
    d517:	lea    rdx,[rip+0x53db2]        # 612d0 <_fini@@Base+0xeb7c>
    d51e:	mov    rcx,rax
    d521:	mov    esi,0x1
    d526:	xor    eax,eax
    d528:	call   c2b0 <__fprintf_chk@plt>
    d52d:	call   c270 <abort@plt>
    d532:	push   rbx
    d533:	mov    rbx,rsi
    d536:	call   ca10 <strerror@plt>
    d53b:	mov    rdi,QWORD PTR [rip+0x2773fe]        # 284940 <stderr@@GLIBC_2.2.5>
    d542:	lea    rdx,[rip+0x540dd]        # 61626 <_fini@@Base+0xeed2>
    d549:	mov    r8,rax
    d54c:	mov    rcx,rbx
    d54f:	mov    esi,0x1
    d554:	xor    eax,eax
    d556:	call   c2b0 <__fprintf_chk@plt>
    d55b:	call   c270 <abort@plt>
    d560:	lea    rcx,[rip+0x55019]        # 62580 <_fini@@Base+0xfe2c>
    d567:	lea    rsi,[rip+0x5012a]        # 5d698 <_fini@@Base+0xaf44>
    d56e:	lea    rdi,[rip+0x4ff7a]        # 5d4ef <_fini@@Base+0xad9b>
    d575:	sub    rsp,0x8
    d579:	mov    edx,0x62
    d57e:	call   c390 <__assert_fail@plt>
    d583:	lea    rcx,[rip+0x55ea6]        # 63430 <_fini@@Base+0x10cdc>
    d58a:	lea    rsi,[rip+0x50107]        # 5d698 <_fini@@Base+0xaf44>
    d591:	lea    rdi,[rip+0x4ff57]        # 5d4ef <_fini@@Base+0xad9b>
    d598:	sub    rsp,0x8
    d59c:	mov    edx,0x62
    d5a1:	call   c390 <__assert_fail@plt>
    d5a6:	lea    rcx,[rip+0x569c3]        # 63f70 <_fini@@Base+0x1181c>
    d5ad:	lea    rsi,[rip+0x51da4]        # 5f358 <_fini@@Base+0xcc04>
    d5b4:	lea    rdi,[rip+0x51dfd]        # 5f3b8 <_fini@@Base+0xcc64>
    d5bb:	sub    rsp,0x8
    d5bf:	mov    edx,0x2c
    d5c4:	call   c390 <__assert_fail@plt>
    d5c9:	lea    rcx,[rip+0x56990]        # 63f60 <_fini@@Base+0x1180c>
    d5d0:	lea    rsi,[rip+0x56901]        # 63ed8 <_fini@@Base+0x11784>
    d5d7:	lea    rdi,[rip+0x56932]        # 63f10 <_fini@@Base+0x117bc>
    d5de:	sub    rsp,0x8
    d5e2:	mov    edx,0x1e
    d5e7:	call   c390 <__assert_fail@plt>
    d5ec:	lea    rcx,[rip+0x5a58d]        # 67b80 <_fini@@Base+0x1542c>
    d5f3:	lea    rsi,[rip+0x5009e]        # 5d698 <_fini@@Base+0xaf44>
    d5fa:	lea    rdi,[rip+0x4feee]        # 5d4ef <_fini@@Base+0xad9b>
    d601:	sub    rsp,0x8
    d605:	mov    edx,0x62
    d60a:	call   c390 <__assert_fail@plt>
    d60f:	nop
    d610:	push   r15
    d612:	push   r14
    d614:	mov    r14d,edi
    d617:	push   r13
    d619:	push   r12
    d61b:	mov    r12,rsi
    d61e:	push   rbp
    d61f:	push   rbx
    d620:	lea    rsi,[rip+0x2749f9]        # 282020 <g_test_config_vars+0xc60>
    d627:	xor    r15d,r15d
    d62a:	sub    rsp,0x288
    d631:	lea    rbp,[rsp+0xf0]
    d639:	lea    rdx,[rsp+0x58]
    d63e:	lea    rbx,[rsp+0x50]
    d643:	mov    rax,QWORD PTR fs:0x28
    d64c:	mov    QWORD PTR [rsp+0x278],rax
    d654:	xor    eax,eax
    d656:	mov    eax,0x2c
    d65b:	mov    rdi,rbp
    d65e:	mov    DWORD PTR [rsp+0x14],0x0
    d666:	mov    rcx,rax
    d669:	mov    QWORD PTR [rsp+0x18],0x0
    d672:	lea    r13,[rsp+0x14]
    d677:	rep movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
    d67a:	mov    rdi,rdx
    d67d:	mov    rsi,rbx
    d680:	xor    edx,edx
    d682:	mov    rax,rcx
    d685:	mov    ecx,0x12
    d68a:	rep stos QWORD PTR es:[rdi],rax
    d68d:	lea    rax,[rip+0xbbc]        # e250 <g_str_equal@plt+0xf90>
    d694:	mov    edi,0xf
    d699:	mov    QWORD PTR [rsp+0x50],rax
    d69e:	call   ca50 <sigaction@plt>
    d6a3:	mov    rsi,rbx
    d6a6:	xor    edx,edx
    d6a8:	mov    edi,0x2
    d6ad:	call   ca50 <sigaction@plt>
    d6b2:	xor    edx,edx
    d6b4:	mov    rsi,rbx
    d6b7:	mov    edi,0x1
    d6bc:	call   ca50 <sigaction@plt>
    d6c1:	mov    esi,0x1
    d6c6:	mov    edi,0xd
    d6cb:	lea    rbx,[rip+0x4573e]        # 52e10 <_fini@@Base+0x6bc>
    d6d2:	call   cbc0 <signal@plt>
    d6d7:	mov    edi,0x3
    d6dc:	call   39a90 <g_str_equal@plt+0x2c7d0>
    d6e1:	mov    edi,0x2
    d6e6:	call   39a90 <g_str_equal@plt+0x2c7d0>
    d6eb:	lea    rdi,[rip+0x274d6e]        # 282460 <g_test_config_vars+0x10a0>
    d6f2:	call   3c1b0 <g_str_equal@plt+0x2eef0>
    d6f7:	mov    rdi,QWORD PTR [r12]
    d6fb:	call   38320 <g_str_equal@plt+0x2b060>
    d700:	lea    rdi,[rip+0x455c7]        # 52cce <_fini@@Base+0x57a>
    d707:	call   38290 <g_str_equal@plt+0x2afd0>
    d70c:	lea    rdi,[rip+0x455d3]        # 52ce6 <_fini@@Base+0x592>
    d713:	mov    QWORD PTR [rip+0x27725e],rax        # 284978 <stdout@@GLIBC_2.2.5+0x30>
    d71a:	call   38290 <g_str_equal@plt+0x2afd0>
    d71f:	mov    BYTE PTR [rsp+0xa],0x0
    d724:	mov    QWORD PTR [rip+0x277245],rax        # 284970 <stdout@@GLIBC_2.2.5+0x28>
    d72b:	mov    BYTE PTR [rsp+0xb],0x0
    d730:	mov    BYTE PTR [rsp+0x9],0x0
    d735:	mov    DWORD PTR [rsp+0x4],0x0
    d73d:	mov    DWORD PTR [rsp+0xc],0x1
    d745:	lea    rdx,[rip+0x455eb]        # 52d37 <_fini@@Base+0x5e3>
    d74c:	mov    r8,r13
    d74f:	mov    rcx,rbp
    d752:	mov    rsi,r12
    d755:	mov    edi,r14d
    d758:	call   cc20 <getopt_long@plt>
    d75d:	cmp    eax,0xffffffff
    d760:	je     d853 <g_str_equal@plt+0x593>
    d766:	lea    edx,[rax-0x3f]
    d769:	cmp    edx,0x37
    d76c:	ja     d745 <g_str_equal@plt+0x485>
    d76e:	movsxd rdx,DWORD PTR [rbx+rdx*4]
    d772:	add    rdx,rbx
    d775:	jmp    rdx
    d777:	mov    DWORD PTR [rsp+0x4],0x1
    d77f:	jmp    d745 <g_str_equal@plt+0x485>
    d781:	mov    rdi,QWORD PTR [rip+0x2771f0]        # 284978 <stdout@@GLIBC_2.2.5+0x30>
    d788:	call   d2b0 <g_free@plt>
    d78d:	mov    rdi,QWORD PTR [rip+0x27718c]        # 284920 <optarg@@GLIBC_2.2.5>
    d794:	call   c370 <g_strdup@plt>
    d799:	cmp    BYTE PTR [rax],0x2f
    d79c:	mov    QWORD PTR [rip+0x2771d5],rax        # 284978 <stdout@@GLIBC_2.2.5+0x30>
    d7a3:	jne    dbef <g_str_equal@plt+0x92f>
    d7a9:	mov    BYTE PTR [rsp+0xa],0x1
    d7ae:	jmp    d745 <g_str_equal@plt+0x485>
    d7b0:	mov    r8,QWORD PTR [rip+0x2771c1]        # 284978 <stdout@@GLIBC_2.2.5+0x30>
    d7b7:	mov    rcx,QWORD PTR [rip+0x2771b2]        # 284970 <stdout@@GLIBC_2.2.5+0x28>
    d7be:	lea    rsi,[rip+0x45143]        # 52908 <_fini@@Base+0x1b4>
    d7c5:	mov    rdx,QWORD PTR [r12]
    d7c9:	mov    edi,0x1
    d7ce:	xor    eax,eax
    d7d0:	call   c3a0 <__printf_chk@plt>
    d7d5:	xor    edi,edi
    d7d7:	call   c360 <exit@plt>
    d7dc:	mov    rdi,QWORD PTR [rip+0x27718d]        # 284970 <stdout@@GLIBC_2.2.5+0x28>
    d7e3:	call   d2b0 <g_free@plt>
    d7e8:	mov    rdi,QWORD PTR [rip+0x277131]        # 284920 <optarg@@GLIBC_2.2.5>
    d7ef:	call   c370 <g_strdup@plt>
    d7f4:	mov    BYTE PTR [rsp+0xb],0x1
    d7f9:	mov    QWORD PTR [rip+0x277170],rax        # 284970 <stdout@@GLIBC_2.2.5+0x28>
    d800:	jmp    d745 <g_str_equal@plt+0x485>
    d805:	mov    BYTE PTR [rsp+0x9],0x1
    d80a:	jmp    d745 <g_str_equal@plt+0x485>
    d80f:	mov    rdx,QWORD PTR [r12]
    d813:	lea    rsi,[rip+0x44fe6]        # 52800 <_fini@@Base+0xac>
    d81a:	mov    edi,0x1
    d81f:	xor    eax,eax
    d821:	call   c3a0 <__printf_chk@plt>
    d826:	xor    edi,edi
    d828:	call   c360 <exit@plt>
    d82d:	mov    rdi,r15
    d830:	call   d2b0 <g_free@plt>
    d835:	mov    rdi,QWORD PTR [rip+0x2770e4]        # 284920 <optarg@@GLIBC_2.2.5>
    d83c:	call   31d30 <g_str_equal@plt+0x24a70>
    d841:	mov    r15,rax
    d844:	jmp    d745 <g_str_equal@plt+0x485>
    d849:	add    DWORD PTR [rsp+0xc],0x1
    d84e:	jmp    d745 <g_str_equal@plt+0x485>
    d853:	xor    eax,eax
    d855:	cmp    DWORD PTR [rsp+0x4],0x0
    d85a:	jne    d86b <g_str_equal@plt+0x5ab>
    d85c:	mov    ecx,DWORD PTR [rsp+0xc]
    d860:	mov    eax,0x3
    d865:	cmp    ecx,0x3
    d868:	cmovle eax,ecx
    d86b:	mov    DWORD PTR [rip+0x2770e7],eax        # 284958 <stdout@@GLIBC_2.2.5+0x10>
    d871:	call   31d20 <g_str_equal@plt+0x24a60>
    d876:	test   al,al
    d878:	je     dbe5 <g_str_equal@plt+0x925>
    d87e:	mov    rdi,r15
    d881:	call   31bd0 <g_str_equal@plt+0x24910>
    d886:	mov    edi,0x8000
    d88b:	call   43630 <g_str_equal@plt+0x36370>
    d890:	call   43c70 <g_str_equal@plt+0x369b0>
    d895:	test   eax,eax
    d897:	je     d9e5 <g_str_equal@plt+0x725>
    d89d:	cmp    BYTE PTR [rsp+0xa],0x0
    d8a2:	jne    dbd7 <g_str_equal@plt+0x917>
    d8a8:	cmp    eax,0x1
    d8ab:	ja     dbbb <g_str_equal@plt+0x8fb>
    d8b1:	lea    rbx,[rsp+0x18]
    d8b6:	mov    edi,0x3
    d8bb:	mov    rsi,rbx
    d8be:	call   19930 <g_str_equal@plt+0xc670>
    d8c3:	test   rax,rax
    d8c6:	mov    QWORD PTR [rip+0x277093],rax        # 284960 <stdout@@GLIBC_2.2.5+0x18>
    d8cd:	je     db96 <g_str_equal@plt+0x8d6>
    d8d3:	mov    rdi,rbx
    d8d6:	call   35c30 <g_str_equal@plt+0x28970>
    d8db:	test   eax,eax
    d8dd:	jne    dc26 <g_str_equal@plt+0x966>
    d8e3:	mov    rdi,QWORD PTR [rip+0x277076]        # 284960 <stdout@@GLIBC_2.2.5+0x18>
    d8ea:	lea    r8,[rip+0x456a5]        # 52f96 <_fini@@Base+0x842>
    d8f1:	lea    rdx,[rip+0x44e70]        # 52768 <_fini@@Base+0x14>
    d8f8:	lea    rsi,[rip+0x45398]        # 52c97 <_fini@@Base+0x543>
    d8ff:	mov    ecx,0x42b
    d904:	call   205c0 <g_str_equal@plt+0x13300>
    d909:	lea    rdx,[rip+0x8c0]        # e1d0 <g_str_equal@plt+0xf10>
    d910:	xor    r8d,r8d
    d913:	xor    ecx,ecx
    d915:	mov    esi,0x1
    d91a:	mov    rdi,rax
    d91d:	call   16d70 <g_str_equal@plt+0x9ab0>
    d922:	cmp    BYTE PTR [rsp+0x9],0x0
    d927:	mov    DWORD PTR [rip+0x27702f],eax        # 28495c <stdout@@GLIBC_2.2.5+0x14>
    d92d:	jne    db59 <g_str_equal@plt+0x899>
    d933:	cmp    BYTE PTR [rsp+0xb],0x0
    d938:	jne    da72 <g_str_equal@plt+0x7b2>
    d93e:	mov    DWORD PTR [rip+0x277020],0x0        # 284968 <stdout@@GLIBC_2.2.5+0x20>
    d948:	or     ebx,0xffffffff
    d94b:	jmp    d956 <g_str_equal@plt+0x696>
    d94d:	cmp    DWORD PTR [rip+0x27482c],0x0        # 282180 <g_test_config_vars+0xdc0>
    d954:	jle    d9a4 <g_str_equal@plt+0x6e4>
    d956:	xor    edi,edi
    d958:	call   35e00 <g_str_equal@plt+0x28b40>
    d95d:	cmp    DWORD PTR [rip+0x277004],0x1        # 284968 <stdout@@GLIBC_2.2.5+0x20>
    d964:	jne    d94d <g_str_equal@plt+0x68d>
    d966:	cmp    QWORD PTR [rip+0x276ff2],0x0        # 284960 <stdout@@GLIBC_2.2.5+0x18>
    d96e:	mov    DWORD PTR [rip+0x276ff0],0x2        # 284968 <stdout@@GLIBC_2.2.5+0x20>
    d978:	je     dc07 <g_str_equal@plt+0x947>
    d97e:	mov    edi,DWORD PTR [rip+0x276fd8]        # 28495c <stdout@@GLIBC_2.2.5+0x14>
    d984:	call   ccc0 <g_source_remove@plt>
    d989:	mov    rdi,QWORD PTR [rip+0x276fd0]        # 284960 <stdout@@GLIBC_2.2.5+0x18>
    d990:	mov    DWORD PTR [rip+0x276fc6],ebx        # 28495c <stdout@@GLIBC_2.2.5+0x14>
    d996:	call   20b90 <g_str_equal@plt+0x138d0>
    d99b:	sub    DWORD PTR [rip+0x2747de],0x1        # 282180 <g_test_config_vars+0xdc0>
    d9a2:	jmp    d94d <g_str_equal@plt+0x68d>
    d9a4:	xor    edi,edi
    d9a6:	call   c360 <exit@plt>
    d9ab:	mov    rdx,QWORD PTR [r12]
    d9af:	lea    rdi,[rip+0x45364]        # 52d1a <_fini@@Base+0x5c6>
    d9b6:	mov    esi,eax
    d9b8:	xor    eax,eax
    d9ba:	call   3aab0 <g_str_equal@plt+0x2d7f0>
    d9bf:	mov    edi,0x1
    d9c4:	call   c360 <exit@plt>
    d9c9:	mov    rsi,QWORD PTR [r12]
    d9cd:	lea    rdi,[rip+0x451ec]        # 52bc0 <_fini@@Base+0x46c>
    d9d4:	xor    eax,eax
    d9d6:	call   3aab0 <g_str_equal@plt+0x2d7f0>
    d9db:	mov    edi,0x1
    d9e0:	call   c360 <exit@plt>
    d9e5:	lea    rdi,[rsp+0x24]
    d9ea:	mov    ecx,0x9
    d9ef:	lea    rbx,[rsp+0x18]
    d9f4:	mov    DWORD PTR [rsp+0x20],0x1
    d9fc:	rep stos DWORD PTR es:[rdi],eax
    d9fe:	mov    rax,QWORD PTR [rip+0x276f73]        # 284978 <stdout@@GLIBC_2.2.5+0x30>
    da05:	mov    QWORD PTR [rsp+0x28],rax
    da0a:	call   19830 <g_str_equal@plt+0xc570>
    da0f:	lea    rsi,[rsp+0x20]
    da14:	mov    rdx,rbx
    da17:	mov    rdi,rax
    da1a:	mov    QWORD PTR [rip+0x276f3f],rax        # 284960 <stdout@@GLIBC_2.2.5+0x18>
    da21:	call   19d40 <g_str_equal@plt+0xca80>
    da26:	test   eax,eax
    da28:	jns    d8d3 <g_str_equal@plt+0x613>
    da2e:	mov    rdi,QWORD PTR [rip+0x276f2b]        # 284960 <stdout@@GLIBC_2.2.5+0x18>
    da35:	call   20b90 <g_str_equal@plt+0x138d0>
    da3a:	mov    rdi,QWORD PTR [rsp+0x18]
    da3f:	call   39e30 <g_str_equal@plt+0x2cb70>
    da44:	mov    rcx,QWORD PTR [rsp+0x278]
    da4c:	xor    rcx,QWORD PTR fs:0x28
    da55:	mov    eax,0x1
    da5a:	jne    db91 <g_str_equal@plt+0x8d1>
    da60:	add    rsp,0x288
    da67:	pop    rbx
    da68:	pop    rbp
    da69:	pop    r12
    da6b:	pop    r13
    da6d:	pop    r14
    da6f:	pop    r15
    da71:	ret    
    da72:	mov    rdi,QWORD PTR [rip+0x276ef7]        # 284970 <stdout@@GLIBC_2.2.5+0x28>
    da79:	xor    eax,eax
    da7b:	mov    edx,0x180
    da80:	mov    esi,0x41
    da85:	call   32230 <g_str_equal@plt+0x24f70>
    da8a:	cmp    eax,0xffffffff
    da8d:	mov    r12d,eax
    da90:	je     dc6f <g_str_equal@plt+0x9af>
    da96:	xor    edx,edx
    da98:	mov    esi,0x2
    da9d:	mov    edi,eax
    da9f:	call   c9d0 <lockf64@plt>
    daa4:	test   eax,eax
    daa6:	jne    dc4d <g_str_equal@plt+0x98d>
    daac:	xor    esi,esi
    daae:	mov    edi,r12d
    dab1:	call   caf0 <ftruncate64@plt>
    dab6:	test   eax,eax
    dab8:	jne    dc3a <g_str_equal@plt+0x97a>
    dabe:	lea    rbp,[rsp+0x250]
    dac6:	or     r13,0xffffffffffffffff
    daca:	xor    ebx,ebx
    dacc:	call   c5b0 <getpid@plt>
    dad1:	lea    r8,[rip+0x452d5]        # 52dad <_fini@@Base+0x659>
    dad8:	mov    r9d,eax
    dadb:	mov    ecx,0x20
    dae0:	mov    edx,0x1
    dae5:	mov    esi,0x20
    daea:	mov    rdi,rbp
    daed:	xor    eax,eax
    daef:	call   cfe0 <__snprintf_chk@plt>
    daf4:	mov    rdi,rbp
    daf7:	mov    eax,ebx
    daf9:	mov    rcx,r13
    dafc:	repnz scas al,BYTE PTR es:[rdi]
    dafe:	mov    rsi,rbp
    db01:	mov    edi,r12d
    db04:	not    rcx
    db07:	lea    rdx,[rcx+r13*1]
    db0b:	call   d140 <write@plt>
    db10:	mov    rcx,r13
    db13:	mov    rdx,rax
    db16:	mov    rdi,rbp
    db19:	mov    eax,ebx
    db1b:	repnz scas al,BYTE PTR es:[rdi]
    db1d:	not    rcx
    db20:	lea    rax,[rcx+r13*1]
    db24:	cmp    rdx,rax
    db27:	je     d93e <g_str_equal@plt+0x67e>
    db2d:	lea    rdi,[rip+0x4527d]        # 52db1 <_fini@@Base+0x65d>
    db34:	xor    eax,eax
    db36:	call   3aab0 <g_str_equal@plt+0x2d7f0>
    db3b:	mov    rdi,QWORD PTR [rip+0x276e2e]        # 284970 <stdout@@GLIBC_2.2.5+0x28>
    db42:	call   c4d0 <unlink@plt>
    db47:	mov    edi,r12d
    db4a:	call   c230 <close@plt>
    db4f:	mov    edi,0x1
    db54:	call   c360 <exit@plt>
    db59:	xor    esi,esi
    db5b:	xor    edi,edi
    db5d:	call   c0e0 <daemon@plt>
    db62:	test   eax,eax
    db64:	jns    da72 <g_str_equal@plt+0x7b2>
    db6a:	call   cc80 <__errno_location@plt>
    db6f:	mov    edi,DWORD PTR [rax]
    db71:	call   ca10 <strerror@plt>
    db76:	lea    rdi,[rip+0x451ca]        # 52d47 <_fini@@Base+0x5f3>
    db7d:	mov    rsi,rax
    db80:	xor    eax,eax
    db82:	call   3aab0 <g_str_equal@plt+0x2d7f0>
    db87:	mov    edi,0x1
    db8c:	call   c360 <exit@plt>
    db91:	call   cd30 <__stack_chk_fail@plt>
    db96:	mov    rdi,QWORD PTR [rsp+0x18]
    db9b:	call   39e20 <g_str_equal@plt+0x2cb60>
    dba0:	lea    rdi,[rip+0x450b9]        # 52c60 <_fini@@Base+0x50c>
    dba7:	mov    rsi,rax
    dbaa:	xor    eax,eax
    dbac:	call   3aab0 <g_str_equal@plt+0x2d7f0>
    dbb1:	mov    edi,0x1
    dbb6:	call   c360 <exit@plt>
    dbbb:	mov    rsi,QWORD PTR [r12]
    dbbf:	lea    rdi,[rip+0x4505a]        # 52c20 <_fini@@Base+0x4cc>
    dbc6:	xor    eax,eax
    dbc8:	call   3aab0 <g_str_equal@plt+0x2d7f0>
    dbcd:	mov    edi,0x1
    dbd2:	call   c360 <exit@plt>
    dbd7:	lea    rdi,[rip+0x4500a]        # 52be8 <_fini@@Base+0x494>
    dbde:	xor    eax,eax
    dbe0:	call   3aab0 <g_str_equal@plt+0x2d7f0>
    dbe5:	mov    edi,0x1
    dbea:	call   c360 <exit@plt>
    dbef:	lea    rdi,[rip+0x45107]        # 52cfd <_fini@@Base+0x5a9>
    dbf6:	xor    eax,eax
    dbf8:	call   3aab0 <g_str_equal@plt+0x2d7f0>
    dbfd:	mov    edi,0x1
    dc02:	call   c360 <exit@plt>
    dc07:	lea    rcx,[rip+0x452e2]        # 52ef0 <_fini@@Base+0x79c>
    dc0e:	lea    rsi,[rip+0x44b53]        # 52768 <_fini@@Base+0x14>
    dc15:	lea    rdi,[rip+0x451ae]        # 52dca <_fini@@Base+0x676>
    dc1c:	mov    edx,0x352
    dc21:	call   c390 <__assert_fail@plt>
    dc26:	mov    rdi,QWORD PTR [rsp+0x18]
    dc2b:	call   39e30 <g_str_equal@plt+0x2cb70>
    dc30:	mov    edi,0x1
    dc35:	call   c360 <exit@plt>
    dc3a:	lea    rdi,[rip+0x45150]        # 52d91 <_fini@@Base+0x63d>
    dc41:	xor    eax,eax
    dc43:	call   3aab0 <g_str_equal@plt+0x2d7f0>
    dc48:	jmp    db3b <g_str_equal@plt+0x87b>
    dc4d:	call   cc80 <__errno_location@plt>
    dc52:	mov    edi,DWORD PTR [rax]
    dc54:	call   ca10 <strerror@plt>
    dc59:	lea    rdi,[rip+0x45118]        # 52d78 <_fini@@Base+0x624>
    dc60:	mov    rsi,rax
    dc63:	xor    eax,eax
    dc65:	call   3aab0 <g_str_equal@plt+0x2d7f0>
    dc6a:	jmp    db3b <g_str_equal@plt+0x87b>
    dc6f:	call   cc80 <__errno_location@plt>
    dc74:	mov    edi,DWORD PTR [rax]
    dc76:	call   ca10 <strerror@plt>
    dc7b:	lea    rdi,[rip+0x450dd]        # 52d5f <_fini@@Base+0x60b>
    dc82:	mov    rsi,rax
    dc85:	xor    eax,eax
    dc87:	call   3aab0 <g_str_equal@plt+0x2d7f0>
    dc8c:	mov    edi,0x1
    dc91:	call   c360 <exit@plt>
    dc96:	nop    WORD PTR cs:[rax+rax*1+0x0]
    dca0:	lea    rdi,[rip+0x4249]        # 11ef0 <g_str_equal@plt+0x4c30>
    dca7:	mov    esi,0x2
    dcac:	jmp    399c0 <g_str_equal@plt+0x2c700>
    dcb1:	nop    WORD PTR cs:[rax+rax*1+0x0]
    dcbb:	nop    DWORD PTR [rax+rax*1+0x0]
    dcc0:	lea    rdi,[rip+0x44f9]        # 121c0 <g_str_equal@plt+0x4f00>
    dcc7:	mov    esi,0x2
    dccc:	jmp    399c0 <g_str_equal@plt+0x2c700>
    dcd1:	nop    WORD PTR cs:[rax+rax*1+0x0]
    dcdb:	nop    DWORD PTR [rax+rax*1+0x0]
    dce0:	lea    rdi,[rip+0x45f9]        # 122e0 <g_str_equal@plt+0x5020>
    dce7:	mov    esi,0x2
    dcec:	jmp    399c0 <g_str_equal@plt+0x2c700>
    dcf1:	nop    WORD PTR cs:[rax+rax*1+0x0]
    dcfb:	nop    DWORD PTR [rax+rax*1+0x0]
    dd00:	lea    rdi,[rip+0x4789]        # 12490 <g_str_equal@plt+0x51d0>
    dd07:	mov    esi,0x2
    dd0c:	jmp    399c0 <g_str_equal@plt+0x2c700>
    dd11:	nop    WORD PTR cs:[rax+rax*1+0x0]
    dd1b:	nop    DWORD PTR [rax+rax*1+0x0]
    dd20:	lea    rdi,[rip+0x4b39]        # 12860 <g_str_equal@plt+0x55a0>
    dd27:	mov    esi,0x2
    dd2c:	jmp    399c0 <g_str_equal@plt+0x2c700>
    dd31:	nop    WORD PTR cs:[rax+rax*1+0x0]
    dd3b:	nop    DWORD PTR [rax+rax*1+0x0]
    dd40:	lea    rdi,[rip+0x8ad9]        # 16820 <g_str_equal@plt+0x9560>
    dd47:	mov    esi,0x2
    dd4c:	jmp    399c0 <g_str_equal@plt+0x2c700>
    dd51:	nop    WORD PTR cs:[rax+rax*1+0x0]
    dd5b:	nop    DWORD PTR [rax+rax*1+0x0]
    dd60:	lea    rdi,[rip+0x9889]        # 175f0 <g_str_equal@plt+0xa330>
    dd67:	mov    esi,0x2
    dd6c:	jmp    399c0 <g_str_equal@plt+0x2c700>
    dd71:	nop    WORD PTR cs:[rax+rax*1+0x0]
    dd7b:	nop    DWORD PTR [rax+rax*1+0x0]
    dd80:	lea    rdi,[rip+0x9c89]        # 17a10 <g_str_equal@plt+0xa750>
    dd87:	mov    esi,0x2
    dd8c:	jmp    399c0 <g_str_equal@plt+0x2c700>
    dd91:	nop    WORD PTR cs:[rax+rax*1+0x0]
    dd9b:	nop    DWORD PTR [rax+rax*1+0x0]
    dda0:	lea    rdi,[rip+0xa879]        # 18620 <g_str_equal@plt+0xb360>
    dda7:	mov    esi,0x2
    ddac:	jmp    399c0 <g_str_equal@plt+0x2c700>
    ddb1:	nop    WORD PTR cs:[rax+rax*1+0x0]
    ddbb:	nop    DWORD PTR [rax+rax*1+0x0]
    ddc0:	lea    rdi,[rip+0xb0e9]        # 18eb0 <g_str_equal@plt+0xbbf0>
    ddc7:	mov    esi,0x2
    ddcc:	jmp    399c0 <g_str_equal@plt+0x2c700>
    ddd1:	nop    WORD PTR cs:[rax+rax*1+0x0]
    dddb:	nop    DWORD PTR [rax+rax*1+0x0]
    dde0:	lea    rdi,[rip+0xccc9]        # 1aab0 <g_str_equal@plt+0xd7f0>
    dde7:	mov    esi,0x2
    ddec:	jmp    399c0 <g_str_equal@plt+0x2c700>
    ddf1:	nop    WORD PTR cs:[rax+rax*1+0x0]
    ddfb:	nop    DWORD PTR [rax+rax*1+0x0]
    de00:	lea    rdi,[rip+0xdb29]        # 1b930 <g_str_equal@plt+0xe670>
    de07:	mov    esi,0x2
    de0c:	jmp    399c0 <g_str_equal@plt+0x2c700>
    de11:	nop    WORD PTR cs:[rax+rax*1+0x0]
    de1b:	nop    DWORD PTR [rax+rax*1+0x0]
    de20:	lea    rdi,[rip+0xfee9]        # 1dd10 <g_str_equal@plt+0x10a50>
    de27:	mov    esi,0x2
    de2c:	jmp    399c0 <g_str_equal@plt+0x2c700>
    de31:	nop    WORD PTR cs:[rax+rax*1+0x0]
    de3b:	nop    DWORD PTR [rax+rax*1+0x0]
    de40:	lea    rdi,[rip+0x10549]        # 1e390 <g_str_equal@plt+0x110d0>
    de47:	mov    esi,0x2
    de4c:	jmp    399c0 <g_str_equal@plt+0x2c700>
    de51:	nop    WORD PTR cs:[rax+rax*1+0x0]
    de5b:	nop    DWORD PTR [rax+rax*1+0x0]
    de60:	lea    rdi,[rip+0x11489]        # 1f2f0 <g_str_equal@plt+0x12030>
    de67:	mov    esi,0x2
    de6c:	jmp    399c0 <g_str_equal@plt+0x2c700>
    de71:	nop    WORD PTR cs:[rax+rax*1+0x0]
    de7b:	nop    DWORD PTR [rax+rax*1+0x0]
    de80:	lea    rdi,[rip+0x15b29]        # 239b0 <g_str_equal@plt+0x166f0>
    de87:	mov    esi,0x2
    de8c:	jmp    399c0 <g_str_equal@plt+0x2c700>
    de91:	nop    WORD PTR cs:[rax+rax*1+0x0]
    de9b:	nop    DWORD PTR [rax+rax*1+0x0]
    dea0:	lea    rdi,[rip+0x15d29]        # 23bd0 <g_str_equal@plt+0x16910>
    dea7:	mov    esi,0x2
    deac:	jmp    399c0 <g_str_equal@plt+0x2c700>
    deb1:	nop    WORD PTR cs:[rax+rax*1+0x0]
    debb:	nop    DWORD PTR [rax+rax*1+0x0]
    dec0:	lea    rsi,[rip+0x2abe9]        # 38ab0 <g_str_equal@plt+0x2b7f0>
    dec7:	lea    rdi,[rip+0x277d42]        # 285c10 <stdout@@GLIBC_2.2.5+0x12c8>
    dece:	jmp    d110 <pthread_key_create@plt>
    ded3:	nop    WORD PTR cs:[rax+rax*1+0x0]
    dedd:	nop    DWORD PTR [rax]
    dee0:	sub    rsp,0x8
    dee4:	call   c900 <getpagesize@plt>
    dee9:	cdqe   
    deeb:	mov    QWORD PTR [rip+0x278ff6],rax        # 286ee8 <stdout@@GLIBC_2.2.5+0x25a0>
    def2:	neg    rax
    def5:	mov    QWORD PTR [rip+0x278fe4],rax        # 286ee0 <stdout@@GLIBC_2.2.5+0x2598>
    defc:	add    rsp,0x8
    df00:	ret    
    df01:	nop    WORD PTR cs:[rax+rax*1+0x0]
    df0b:	nop    DWORD PTR [rax+rax*1+0x0]
    df10:	lea    rdi,[rip+0x35e99]        # 43db0 <g_str_equal@plt+0x36af0>
    df17:	mov    esi,0x3
    df1c:	jmp    399c0 <g_str_equal@plt+0x2c700>
    df21:	nop    WORD PTR cs:[rax+rax*1+0x0]
    df2b:	nop    DWORD PTR [rax+rax*1+0x0]
    df30:	lea    rdi,[rip+0x35e89]        # 43dc0 <g_str_equal@plt+0x36b00>
    df37:	mov    esi,0x3
    df3c:	jmp    399c0 <g_str_equal@plt+0x2c700>
    df41:	nop    WORD PTR cs:[rax+rax*1+0x0]
    df4b:	nop    DWORD PTR [rax+rax*1+0x0]
    df50:	lea    rdi,[rip+0x35e79]        # 43dd0 <g_str_equal@plt+0x36b10>
    df57:	mov    esi,0x3
    df5c:	jmp    399c0 <g_str_equal@plt+0x2c700>
    df61:	nop    WORD PTR cs:[rax+rax*1+0x0]
    df6b:	nop    DWORD PTR [rax+rax*1+0x0]
    df70:	lea    rdi,[rip+0x35e69]        # 43de0 <g_str_equal@plt+0x36b20>
    df77:	mov    esi,0x3
    df7c:	jmp    399c0 <g_str_equal@plt+0x2c700>
    df81:	nop    WORD PTR cs:[rax+rax*1+0x0]
    df8b:	nop    DWORD PTR [rax+rax*1+0x0]
    df90:	lea    rdi,[rip+0x35e59]        # 43df0 <g_str_equal@plt+0x36b30>
    df97:	mov    esi,0x3
    df9c:	jmp    399c0 <g_str_equal@plt+0x2c700>
    dfa1:	nop    WORD PTR cs:[rax+rax*1+0x0]
    dfab:	nop    DWORD PTR [rax+rax*1+0x0]
    dfb0:	sub    rsp,0x28
    dfb4:	mov    edi,0x1
    dfb9:	mov    DWORD PTR [rip+0x2790d9],0x0        # 28709c <stdout@@GLIBC_2.2.5+0x2754>
    dfc3:	mov    rsi,rsp
    dfc6:	mov    rax,QWORD PTR fs:0x28
    dfcf:	mov    QWORD PTR [rsp+0x18],rax
    dfd4:	xor    eax,eax
    dfd6:	call   d190 <clock_gettime@plt>
    dfdb:	test   eax,eax
    dfdd:	jne    dfe9 <g_str_equal@plt+0xd29>
    dfdf:	mov    DWORD PTR [rip+0x2790b3],0x1        # 28709c <stdout@@GLIBC_2.2.5+0x2754>
    dfe9:	mov    rax,QWORD PTR [rsp+0x18]
    dfee:	xor    rax,QWORD PTR fs:0x28
    dff7:	jne    dffe <g_str_equal@plt+0xd3e>
    dff9:	add    rsp,0x28
    dffd:	ret    
    dffe:	call   cd30 <__stack_chk_fail@plt>
    e003:	nop    WORD PTR cs:[rax+rax*1+0x0]
    e00d:	nop    DWORD PTR [rax]
    e010:	xor    esi,esi
    e012:	push   rbx
    e013:	mov    eax,esi
    e015:	cpuid  
    e017:	test   eax,eax
    e019:	jle    e08d <g_str_equal@plt+0xdcd>
    e01b:	mov    esi,eax
    e01d:	mov    eax,0x1
    e022:	cpuid  
    e024:	mov    edi,edx
    e026:	shr    edi,0x18
    e029:	and    edi,0x4
    e02c:	test   ecx,0x80000
    e032:	je     e037 <g_str_equal@plt+0xd77>
    e034:	or     edi,0x2
    e037:	and    ecx,0x18000000
    e03d:	cmp    ecx,0x18000000
    e043:	jne    e04a <g_str_equal@plt+0xd8a>
    e045:	cmp    esi,0x6
    e048:	jg     e0a0 <g_str_equal@plt+0xde0>
    e04a:	lea    rdx,[rip+0x4360f]        # 51660 <g_str_equal@plt+0x443a0>
    e051:	lea    rax,[rip+0x433c8]        # 51420 <g_str_equal@plt+0x44160>
    e058:	test   dil,0x4
    e05c:	mov    DWORD PTR [rip+0x27903e],edi        # 2870a0 <stdout@@GLIBC_2.2.5+0x2758>
    e062:	cmovne rax,rdx
    e066:	lea    rdx,[rip+0x43563]        # 515d0 <g_str_equal@plt+0x44310>
    e06d:	test   dil,0x2
    e071:	cmovne rax,rdx
    e075:	lea    rdx,[rip+0x43464]        # 514e0 <g_str_equal@plt+0x44220>
    e07c:	and    dil,0x1
    e080:	cmovne rax,rdx
    e084:	mov    QWORD PTR [rip+0x276875],rax        # 284900 <g_test_config_vars+0x3540>
    e08b:	pop    rbx
    e08c:	ret    
    e08d:	mov    DWORD PTR [rip+0x279009],0x0        # 2870a0 <stdout@@GLIBC_2.2.5+0x2758>
    e097:	lea    rax,[rip+0x43382]        # 51420 <g_str_equal@plt+0x44160>
    e09e:	jmp    e084 <g_str_equal@plt+0xdc4>
    e0a0:	xor    ecx,ecx
    e0a2:	xgetbv 
    e0a5:	mov    esi,eax
    e0a7:	mov    eax,0x7
    e0ac:	and    esi,0x6
    e0af:	cpuid  
    e0b1:	cmp    esi,0x6
    e0b4:	jne    e04a <g_str_equal@plt+0xd8a>
    e0b6:	and    bl,0x20
    e0b9:	je     e04a <g_str_equal@plt+0xd8a>
    e0bb:	or     edi,0x1
    e0be:	jmp    e04a <g_str_equal@plt+0xd8a>
    e0c0:	xor    ebp,ebp
    e0c2:	mov    r9,rdx
    e0c5:	pop    rsi
    e0c6:	mov    rdx,rsp
    e0c9:	and    rsp,0xfffffffffffffff0
    e0cd:	push   rax
    e0ce:	push   rsp
    e0cf:	lea    r8,[rip+0x4467a]        # 52750 <g_str_equal@plt+0x45490>
    e0d6:	lea    rcx,[rip+0x44603]        # 526e0 <g_str_equal@plt+0x45420>
    e0dd:	lea    rdi,[rip+0xfffffffffffff52c]        # d610 <g_str_equal@plt+0x350>
    e0e4:	call   QWORD PTR [rip+0x273ed6]        # 281fc0 <__libc_start_main@GLIBC_2.2.5>
    e0ea:	hlt    
    e0eb:	nop    DWORD PTR [rax+rax*1+0x0]
    e0f0:	lea    rdi,[rip+0x276811]        # 284908 <_edata@@Base>
    e0f7:	push   rbp
    e0f8:	lea    rax,[rip+0x276809]        # 284908 <_edata@@Base>
    e0ff:	cmp    rax,rdi
    e102:	mov    rbp,rsp
    e105:	je     e120 <g_str_equal@plt+0xe60>
    e107:	mov    rax,QWORD PTR [rip+0x273eba]        # 281fc8 <_ITM_deregisterTMCloneTable>
    e10e:	test   rax,rax
    e111:	je     e120 <g_str_equal@plt+0xe60>
    e113:	pop    rbp
    e114:	jmp    rax
    e116:	nop    WORD PTR cs:[rax+rax*1+0x0]
    e120:	pop    rbp
    e121:	ret    
    e122:	nop    DWORD PTR [rax+0x0]
    e126:	nop    WORD PTR cs:[rax+rax*1+0x0]
    e130:	lea    rdi,[rip+0x2767d1]        # 284908 <_edata@@Base>
    e137:	lea    rsi,[rip+0x2767ca]        # 284908 <_edata@@Base>
    e13e:	push   rbp
    e13f:	sub    rsi,rdi
    e142:	mov    rbp,rsp
    e145:	sar    rsi,0x3
    e149:	mov    rax,rsi
    e14c:	shr    rax,0x3f
    e150:	add    rsi,rax
    e153:	sar    rsi,1
    e156:	je     e170 <g_str_equal@plt+0xeb0>
    e158:	mov    rax,QWORD PTR [rip+0x273e71]        # 281fd0 <_ITM_registerTMCloneTable>
    e15f:	test   rax,rax
    e162:	je     e170 <g_str_equal@plt+0xeb0>
    e164:	pop    rbp
    e165:	jmp    rax
    e167:	nop    WORD PTR [rax+rax*1+0x0]
    e170:	pop    rbp
    e171:	ret    
    e172:	nop    DWORD PTR [rax+0x0]
    e176:	nop    WORD PTR cs:[rax+rax*1+0x0]
    e180:	cmp    BYTE PTR [rip+0x2767c9],0x0        # 284950 <stdout@@GLIBC_2.2.5+0x8>
    e187:	jne    e1b8 <g_str_equal@plt+0xef8>
    e189:	cmp    QWORD PTR [rip+0x273e47],0x0        # 281fd8 <__cxa_finalize@GLIBC_2.2.5>
    e191:	push   rbp
    e192:	mov    rbp,rsp
    e195:	je     e1a3 <g_str_equal@plt+0xee3>
    e197:	mov    rdi,QWORD PTR [rip+0x273e6a]        # 282008 <g_test_config_vars+0xc48>
    e19e:	call   d2b8 <__cxa_finalize@plt>
    e1a3:	call   e0f0 <g_str_equal@plt+0xe30>
    e1a8:	mov    BYTE PTR [rip+0x2767a1],0x1        # 284950 <stdout@@GLIBC_2.2.5+0x8>
    e1af:	pop    rbp
    e1b0:	ret    
    e1b1:	nop    DWORD PTR [rax+0x0]
    e1b8:	repz ret 
    e1ba:	nop    WORD PTR [rax+rax*1+0x0]
    e1c0:	push   rbp
    e1c1:	mov    rbp,rsp
    e1c4:	pop    rbp
    e1c5:	jmp    e130 <g_str_equal@plt+0xe70>
    e1ca:	nop    WORD PTR [rax+rax*1+0x0]
    e1d0:	push   rbp
    e1d1:	push   rbx
    e1d2:	lea    r8,[rip+0x44daf]        # 52f88 <_fini@@Base+0x834>
    e1d9:	lea    rdx,[rip+0x44588]        # 52768 <_fini@@Base+0x14>
    e1e0:	lea    rsi,[rip+0x44a9d]        # 52c84 <_fini@@Base+0x530>
    e1e7:	mov    ecx,0x33b
    e1ec:	sub    rsp,0x8
    e1f0:	call   205c0 <g_str_equal@plt+0x13300>
    e1f5:	xor    esi,esi
    e1f7:	mov    rdi,rax
    e1fa:	call   1a440 <g_str_equal@plt+0xd180>
    e1ff:	test   rax,rax
    e202:	je     e239 <g_str_equal@plt+0xf79>
    e204:	mov    edi,0x2018
    e209:	mov    rbp,rax
    e20c:	call   c500 <g_malloc@plt>
    e211:	lea    rdi,[rip+0x198]        # e3b0 <g_str_equal@plt+0x10f0>
    e218:	mov    QWORD PTR [rax],rbp
    e21b:	mov    DWORD PTR [rax+0x10],0xffffffff
    e222:	mov    rsi,rax
    e225:	mov    rbx,rax
    e228:	call   42230 <g_str_equal@plt+0x34f70>
    e22d:	mov    rdi,rax
    e230:	mov    QWORD PTR [rbx+0x8],rax
    e234:	call   42640 <g_str_equal@plt+0x35380>
    e239:	add    rsp,0x8
    e23d:	mov    eax,0x1
    e242:	pop    rbx
    e243:	pop    rbp
    e244:	ret    
    e245:	nop
    e246:	nop    WORD PTR cs:[rax+rax*1+0x0]
    e250:	xor    eax,eax
    e252:	mov    edx,0x1
    e257:	lock cmpxchg DWORD PTR [rip+0x276709],edx        # 284968 <stdout@@GLIBC_2.2.5+0x20>
    e25f:	jmp    35c00 <g_str_equal@plt+0x28940>
    e264:	xchg   ax,ax
    e266:	nop    WORD PTR cs:[rax+rax*1+0x0]
    e270:	push   rbp
    e271:	push   rbx
    e272:	mov    rbx,rdi
    e275:	mov    esi,0x2285
    e27a:	sub    rsp,0x78
    e27e:	mov    rcx,QWORD PTR [rdi+0x10]
    e282:	mov    rax,QWORD PTR fs:0x28
    e28b:	mov    QWORD PTR [rsp+0x68],rax
    e290:	xor    eax,eax
    e292:	lea    rbp,[rsp+0x10]
    e297:	lea    rdi,[rcx+0x8]
    e29b:	mov    QWORD PTR [rcx],0x0
    e2a2:	mov    QWORD PTR [rcx+0x58],0x0
    e2aa:	mov    rdx,rbp
    e2ad:	and    rdi,0xfffffffffffffff8
    e2b1:	sub    rcx,rdi
    e2b4:	add    ecx,0x60
    e2b7:	shr    ecx,0x3
    e2ba:	rep stos QWORD PTR es:[rdi],rax
    e2bd:	lea    rdi,[rbp+0x10]
    e2c1:	mov    ecx,0x9
    e2c6:	mov    QWORD PTR [rsp+0x1a],0x0
    e2cf:	mov    QWORD PTR [rsp+0x60],0x0
    e2d8:	rep stos QWORD PTR es:[rdi],rax
    e2db:	mov    DWORD PTR [rsp+0x10],0x53
    e2e3:	mov    DWORD PTR [rsp+0x38],0x1
    e2eb:	mov    rax,QWORD PTR [rbx+0x8]
    e2ef:	mov    edi,DWORD PTR [rbx]
    e2f1:	mov    QWORD PTR [rsp+0x28],rax
    e2f6:	mov    rax,QWORD PTR [rbx+0x10]
    e2fa:	mov    QWORD PTR [rsp+0x30],rax
    e2ff:	mov    eax,0x6010
    e304:	mov    WORD PTR [rsp+0x18],ax
    e309:	mov    eax,DWORD PTR [rbx+0x24]
    e30c:	mov    DWORD PTR [rsp+0x14],eax
    e310:	mov    rax,QWORD PTR [rbx+0x18]
    e314:	mov    QWORD PTR [rsp+0x20],rax
    e319:	mov    eax,DWORD PTR [rbx+0x20]
    e31c:	mov    DWORD PTR [rsp+0x1c],eax
    e320:	xor    eax,eax
    e322:	call   c260 <ioctl@plt>
    e327:	xor    edi,edi
    e329:	test   eax,eax
    e32b:	jns    e334 <g_str_equal@plt+0x1074>
    e32d:	call   cc80 <__errno_location@plt>
    e332:	mov    edi,DWORD PTR [rax]
    e334:	lea    rdx,[rsp+0xd]
    e339:	mov    rsi,rbp
    e33c:	call   f060 <g_str_equal@plt+0x1da0>
    e341:	test   eax,eax
    e343:	mov    ebp,eax
    e345:	jne    e370 <g_str_equal@plt+0x10b0>
    e347:	mov    eax,DWORD PTR [rsp+0x58]
    e34b:	sub    DWORD PTR [rbx+0x20],eax
    e34e:	mov    rsi,QWORD PTR [rsp+0x68]
    e353:	xor    rsi,QWORD PTR fs:0x28
    e35c:	mov    eax,ebp
    e35e:	jne    e3ab <g_str_equal@plt+0x10eb>
    e360:	add    rsp,0x78
    e364:	pop    rbx
    e365:	pop    rbp
    e366:	ret    
    e367:	nop    WORD PTR [rax+rax*1+0x0]
    e370:	cmp    eax,0x2
    e373:	mov    DWORD PTR [rbx+0x20],0x0
    e37a:	jne    e34e <g_str_equal@plt+0x108e>
    e37c:	test   BYTE PTR [rsp+0x56],0x8
    e381:	jne    e34e <g_str_equal@plt+0x108e>
    e383:	movzx  esi,BYTE PTR [rsp+0xe]
    e388:	movzx  eax,BYTE PTR [rsp+0xd]
    e38d:	mov    rdi,QWORD PTR [rbx+0x10]
    e391:	shl    rsi,0x8
    e395:	or     rax,rsi
    e398:	movzx  esi,BYTE PTR [rsp+0xf]
    e39d:	shl    rsi,0x10
    e3a1:	or     rsi,rax
    e3a4:	call   ee30 <g_str_equal@plt+0x1b70>
    e3a9:	jmp    e34e <g_str_equal@plt+0x108e>
    e3ab:	call   cd30 <__stack_chk_fail@plt>
    e3b0:	push   r15
    e3b2:	push   r14
    e3b4:	mov    r15,rdi
    e3b7:	push   r13
    e3b9:	push   r12
    e3bb:	lea    r8,[rip+0x44bb6]        # 52f78 <_fini@@Base+0x824>
    e3c2:	push   rbp
    e3c3:	push   rbx
    e3c4:	lea    rdx,[rip+0x4439d]        # 52768 <_fini@@Base+0x14>
    e3cb:	lea    rsi,[rip+0x448c5]        # 52c97 <_fini@@Base+0x543>
    e3d2:	mov    ecx,0x2f2
    e3d7:	sub    rsp,0x118
    e3de:	mov    rdi,QWORD PTR [rdi]
    e3e1:	mov    rax,QWORD PTR fs:0x28
    e3ea:	mov    QWORD PTR [rsp+0x108],rax
    e3f2:	xor    eax,eax
    e3f4:	mov    QWORD PTR [rsp+0x38],0x0
    e3fd:	call   205c0 <g_str_equal@plt+0x13300>
    e402:	xor    edx,edx
    e404:	xor    esi,esi
    e406:	mov    rdi,rax
    e409:	call   16b10 <g_str_equal@plt+0x9850>
    e40e:	call   35bf0 <g_str_equal@plt+0x28930>
    e413:	mov    rdi,QWORD PTR [r15]
    e416:	lea    r8,[rip+0x44b5b]        # 52f78 <_fini@@Base+0x824>
    e41d:	lea    rdx,[rip+0x44344]        # 52768 <_fini@@Base+0x14>
    e424:	lea    rsi,[rip+0x4486c]        # 52c97 <_fini@@Base+0x543>
    e42b:	mov    rbx,rax
    e42e:	mov    ecx,0x2f4
    e433:	call   205c0 <g_str_equal@plt+0x13300>
    e438:	mov    rsi,rbx
    e43b:	mov    rdi,rax
    e43e:	lea    rbx,[rsp+0x34]
    e443:	call   16f90 <g_str_equal@plt+0x9cd0>
    e448:	mov    rdi,QWORD PTR [r15]
    e44b:	lea    r8,[rip+0x44b26]        # 52f78 <_fini@@Base+0x824>
    e452:	lea    rdx,[rip+0x4430f]        # 52768 <_fini@@Base+0x14>
    e459:	lea    rsi,[rip+0x44837]        # 52c97 <_fini@@Base+0x543>
    e460:	mov    ecx,0x2fb
    e465:	mov    DWORD PTR [rsp+0x34],0x0
    e46d:	call   205c0 <g_str_equal@plt+0x13300>
    e472:	xor    ecx,ecx
    e474:	mov    edx,0x4
    e479:	mov    rsi,rbx
    e47c:	mov    rdi,rax
    e47f:	call   174e0 <g_str_equal@plt+0xa220>
    e484:	test   eax,eax
    e486:	js     e4d0 <g_str_equal@plt+0x1210>
    e488:	mov    rdi,QWORD PTR [r15]
    e48b:	lea    r8,[rip+0x44ae6]        # 52f78 <_fini@@Base+0x824>
    e492:	lea    rdx,[rip+0x442cf]        # 52768 <_fini@@Base+0x14>
    e499:	lea    rsi,[rip+0x447f7]        # 52c97 <_fini@@Base+0x543>
    e4a0:	mov    ecx,0x301
    e4a5:	call   205c0 <g_str_equal@plt+0x13300>
    e4aa:	xor    ecx,ecx
    e4ac:	mov    edx,0x4
    e4b1:	mov    rsi,rbx
    e4b4:	mov    rdi,rax
    e4b7:	call   17320 <g_str_equal@plt+0xa060>
    e4bc:	mov    edx,DWORD PTR [rsp+0x34]
    e4c0:	shr    eax,0x1f
    e4c3:	test   edx,edx
    e4c5:	setne  dl
    e4c8:	or     dl,al
    e4ca:	je     e573 <g_str_equal@plt+0x12b3>
    e4d0:	mov    rdi,QWORD PTR [r15]
    e4d3:	lea    r8,[rip+0x44a9e]        # 52f78 <_fini@@Base+0x824>
    e4da:	lea    rdx,[rip+0x44287]        # 52768 <_fini@@Base+0x14>
    e4e1:	lea    rsi,[rip+0x447af]        # 52c97 <_fini@@Base+0x543>
    e4e8:	mov    ecx,0x331
    e4ed:	call   205c0 <g_str_equal@plt+0x13300>
    e4f2:	mov    rdi,rax
    e4f5:	call   16ff0 <g_str_equal@plt+0x9d30>
    e4fa:	mov    rdi,QWORD PTR [r15]
    e4fd:	call   20b90 <g_str_equal@plt+0x138d0>
    e502:	mov    rdi,r15
    e505:	call   d2b0 <g_free@plt>
    e50a:	mov    rax,QWORD PTR [rsp+0x108]
    e512:	xor    rax,QWORD PTR fs:0x28
    e51b:	jne    eb2b <g_str_equal@plt+0x186b>
    e521:	add    rsp,0x118
    e528:	pop    rbx
    e529:	pop    rbp
    e52a:	pop    r12
    e52c:	pop    r13
    e52e:	pop    r14
    e530:	pop    r15
    e532:	ret    
    e533:	nop    DWORD PTR [rax+rax*1+0x0]
    e538:	mov    rdi,QWORD PTR [r15]
    e53b:	lea    r8,[rip+0x449ce]        # 52f10 <_fini@@Base+0x7bc>
    e542:	lea    rdx,[rip+0x4421f]        # 52768 <_fini@@Base+0x14>
    e549:	lea    rsi,[rip+0x44747]        # 52c97 <_fini@@Base+0x543>
    e550:	mov    ecx,0x2e5
    e555:	call   205c0 <g_str_equal@plt+0x13300>
    e55a:	mov    rcx,rbx
    e55d:	mov    rdx,r13
    e560:	mov    rsi,rbp
    e563:	mov    rdi,rax
    e566:	call   174e0 <g_str_equal@plt+0xa220>
    e56b:	test   eax,eax
    e56d:	js     e882 <g_str_equal@plt+0x15c2>
    e573:	mov    eax,DWORD PTR [rip+0x2763ef]        # 284968 <stdout@@GLIBC_2.2.5+0x20>
    e579:	test   eax,eax
    e57b:	mov    DWORD PTR [rsp+0x2c],eax
    e57f:	jne    e882 <g_str_equal@plt+0x15c2>
    e585:	lea    rax,[rsp+0x80]
    e58d:	lea    rbp,[rsp+0x90]
    e595:	mov    ebx,0x10
    e59a:	mov    r12d,0x10
    e5a0:	mov    QWORD PTR [rsp+0x20],rax
    e5a5:	lea    rax,[rsp+0x48]
    e5aa:	mov    QWORD PTR [rsp+0x18],rax
    e5af:	lea    rax,[rsp+0x40]
    e5b4:	mov    QWORD PTR [rsp+0x10],rax
    e5b9:	lea    rax,[rsp+0x50]
    e5be:	mov    QWORD PTR [rsp+0x8],rax
    e5c3:	nop    DWORD PTR [rax+rax*1+0x0]
    e5c8:	mov    rdi,QWORD PTR [r15]
    e5cb:	lea    r8,[rip+0x44976]        # 52f48 <_fini@@Base+0x7f4>
    e5d2:	lea    rdx,[rip+0x4418f]        # 52768 <_fini@@Base+0x14>
    e5d9:	lea    rsi,[rip+0x446b7]        # 52c97 <_fini@@Base+0x543>
    e5e0:	mov    ecx,0x275
    e5e5:	mov    QWORD PTR [rsp+0x40],0x0
    e5ee:	mov    QWORD PTR [rsp+0x48],0x0
    e5f7:	mov    QWORD PTR [rsp+0x50],rbp
    e5fc:	mov    QWORD PTR [rsp+0x58],r12
    e601:	call   205c0 <g_str_equal@plt+0x13300>
    e606:	mov    r8,QWORD PTR [rsp+0x18]
    e60b:	mov    rcx,QWORD PTR [rsp+0x10]
    e610:	xor    r9d,r9d
    e613:	mov    rsi,QWORD PTR [rsp+0x8]
    e618:	mov    edx,0x1
    e61d:	mov    rdi,rax
    e620:	call   168b0 <g_str_equal@plt+0x95f0>
    e625:	cmp    rax,0xfffffffffffffffe
    e629:	mov    r14,rax
    e62c:	je     e8b0 <g_str_equal@plt+0x15f0>
    e632:	cmp    rax,0x0
    e636:	jle    e8e8 <g_str_equal@plt+0x1628>
    e63c:	cmp    QWORD PTR [rsp+0x48],0x0
    e642:	jne    e660 <g_str_equal@plt+0x13a0>
    e644:	sub    ebx,r14d
    e647:	add    rbp,r14
    e64a:	test   ebx,ebx
    e64c:	jle    e6f0 <g_str_equal@plt+0x1430>
    e652:	movsxd r12,ebx
    e655:	jmp    e5c8 <g_str_equal@plt+0x1308>
    e65a:	nop    WORD PTR [rax+rax*1+0x0]
    e660:	mov    eax,DWORD PTR [r15+0x10]
    e664:	mov    rdx,QWORD PTR [rsp+0x40]
    e669:	xor    ecx,ecx
    e66b:	xor    r12d,r12d
    e66e:	xor    r13d,r13d
    e671:	add    r12d,0x1
    e675:	cmp    eax,0xffffffff
    e678:	mov    edi,DWORD PTR [rdx+r13*4]
    e67c:	movsxd r13,r12d
    e67f:	jne    e69e <g_str_equal@plt+0x13de>
    e681:	cmp    QWORD PTR [rsp+0x48],r13
    e686:	mov    DWORD PTR [r15+0x10],edi
    e68a:	jbe    e6c0 <g_str_equal@plt+0x1400>
    e68c:	mov    eax,edi
    e68e:	add    r12d,0x1
    e692:	mov    edi,DWORD PTR [rdx+r13*4]
    e696:	cmp    eax,0xffffffff
    e699:	movsxd r13,r12d
    e69c:	je     e681 <g_str_equal@plt+0x13c1>
    e69e:	call   c230 <close@plt>
    e6a3:	cmp    QWORD PTR [rsp+0x48],r13
    e6a8:	jbe    ea70 <g_str_equal@plt+0x17b0>
    e6ae:	mov    eax,DWORD PTR [r15+0x10]
    e6b2:	mov    rdx,QWORD PTR [rsp+0x40]
    e6b7:	mov    ecx,0x1
    e6bc:	jmp    e671 <g_str_equal@plt+0x13b1>
    e6be:	xchg   ax,ax
    e6c0:	mov    rdi,rdx
    e6c3:	mov    BYTE PTR [rsp+0x2b],cl
    e6c7:	call   d2b0 <g_free@plt>
    e6cc:	movzx  ecx,BYTE PTR [rsp+0x2b]
    e6d1:	test   cl,cl
    e6d3:	jne    ea7a <g_str_equal@plt+0x17ba>
    e6d9:	sub    ebx,r14d
    e6dc:	add    rbp,r14
    e6df:	test   ebx,ebx
    e6e1:	jg     e652 <g_str_equal@plt+0x1392>
    e6e7:	nop    WORD PTR [rax+rax*1+0x0]
    e6f0:	cmp    DWORD PTR [r15+0x10],0xffffffff
    e6f5:	je     eb00 <g_str_equal@plt+0x1840>
    e6fb:	movzx  eax,BYTE PTR [rsp+0x90]
    e703:	sub    eax,0x5e
    e706:	cmp    al,0x1
    e708:	ja     eac7 <g_str_equal@plt+0x1807>
    e70e:	mov    rax,QWORD PTR [rsp+0x20]
    e713:	lea    rbx,[rax+0x10]
    e717:	mov    rdi,rbx
    e71a:	call   eb50 <g_str_equal@plt+0x1890>
    e71f:	cmp    eax,0x2000
    e724:	mov    r14d,eax
    e727:	ja     eaed <g_str_equal@plt+0x182d>
    e72d:	cmp    BYTE PTR [rsp+0x90],0x5f
    e735:	mov    r9d,eax
    e738:	lea    rbp,[r15+0x14]
    e73c:	je     e920 <g_str_equal@plt+0x1660>
    e742:	mov    r12d,DWORD PTR [r15+0x10]
    e746:	add    DWORD PTR [rip+0x273a33],0x1        # 282180 <g_test_config_vars+0xdc0>
    e74d:	mov    QWORD PTR [rsp+0x88],r9
    e755:	mov    DWORD PTR [r15+0x10],0xffffffff
    e75d:	mov    DWORD PTR [rsp+0x80],r12d
    e765:	mov    DWORD PTR [rsp+0xa4],0x2000
    e770:	call   35bf0 <g_str_equal@plt+0x28930>
    e775:	mov    rdi,rax
    e778:	call   33e80 <g_str_equal@plt+0x26bc0>
    e77d:	mov    rdx,QWORD PTR [rsp+0x20]
    e782:	mov    DWORD PTR [rsp+0x50],r12d
    e787:	lea    r12,[rsp+0xa0]
    e78f:	lea    rsi,[rip+0xfffffffffffffada]        # e270 <g_str_equal@plt+0xfb0>
    e796:	mov    rdi,rax
    e799:	mov    QWORD PTR [rsp+0x68],rbp
    e79e:	mov    DWORD PTR [rsp+0x74],0xfffffffd
    e7a6:	add    rdx,0x10
    e7aa:	mov    QWORD PTR [rsp+0x58],rdx
    e7af:	lea    rdx,[r12+0x8]
    e7b4:	mov    QWORD PTR [rsp+0x60],rdx
    e7b9:	mov    edx,DWORD PTR [rsp+0xa4]
    e7c0:	mov    DWORD PTR [rsp+0x70],edx
    e7c4:	mov    rdx,QWORD PTR [rsp+0x8]
    e7c9:	call   34ac0 <g_str_equal@plt+0x27800>
    e7ce:	mov    ebx,eax
    e7d0:	mov    eax,DWORD PTR [rsp+0x70]
    e7d4:	cmp    r14d,eax
    e7d7:	cmovg  r14d,eax
    e7db:	mov    DWORD PTR [rsp+0xa4],r14d
    e7e3:	mov    edi,DWORD PTR [rsp+0x80]
    e7ea:	sub    DWORD PTR [rip+0x27398f],0x1        # 282180 <g_test_config_vars+0xdc0>
    e7f1:	call   c230 <close@plt>
    e7f6:	cmp    ebx,0xffffffff
    e7f9:	je     e882 <g_str_equal@plt+0x15c2>
    e7ff:	cmp    BYTE PTR [rsp+0x90],0x5e
    e807:	mov    DWORD PTR [rsp+0xa0],ebx
    e80e:	mov    eax,DWORD PTR [rsp+0xa4]
    e815:	jne    e81f <g_str_equal@plt+0x155f>
    e817:	test   ebx,ebx
    e819:	je     ea18 <g_str_equal@plt+0x1758>
    e81f:	test   eax,eax
    e821:	jne    eb30 <g_str_equal@plt+0x1870>
    e827:	xor    r13d,r13d
    e82a:	mov    eax,DWORD PTR [rsp+0x2c]
    e82e:	bswap  ebx
    e830:	mov    rdi,QWORD PTR [r15]
    e833:	mov    DWORD PTR [rsp+0xa0],ebx
    e83a:	lea    r8,[rip+0x446cf]        # 52f10 <_fini@@Base+0x7bc>
    e841:	lea    rdx,[rip+0x43f20]        # 52768 <_fini@@Base+0x14>
    e848:	lea    rsi,[rip+0x44448]        # 52c97 <_fini@@Base+0x543>
    e84f:	lea    rbx,[rsp+0x38]
    e854:	mov    ecx,0x2df
    e859:	bswap  eax
    e85b:	mov    DWORD PTR [rsp+0xa4],eax
    e862:	call   205c0 <g_str_equal@plt+0x13300>
    e867:	mov    rcx,rbx
    e86a:	mov    edx,0x68
    e86f:	mov    rsi,r12
    e872:	mov    rdi,rax
    e875:	call   174e0 <g_str_equal@plt+0xa220>
    e87a:	test   eax,eax
    e87c:	jns    e538 <g_str_equal@plt+0x1278>
    e882:	mov    rdi,QWORD PTR [rsp+0x38]
    e887:	test   rdi,rdi
    e88a:	je     e4d0 <g_str_equal@plt+0x1210>
    e890:	mov    eax,DWORD PTR [rip+0x2760c2]        # 284958 <stdout@@GLIBC_2.2.5+0x10>
    e896:	test   eax,eax
    e898:	je     eaf6 <g_str_equal@plt+0x1836>
    e89e:	call   39e30 <g_str_equal@plt+0x2cb70>
    e8a3:	jmp    e4d0 <g_str_equal@plt+0x1210>
    e8a8:	nop    DWORD PTR [rax+rax*1+0x0]
    e8b0:	mov    rdi,QWORD PTR [r15]
    e8b3:	lea    r8,[rip+0x4468e]        # 52f48 <_fini@@Base+0x7f4>
    e8ba:	lea    rdx,[rip+0x43ea7]        # 52768 <_fini@@Base+0x14>
    e8c1:	lea    rsi,[rip+0x443cf]        # 52c97 <_fini@@Base+0x543>
    e8c8:	mov    ecx,0x279
    e8cd:	call   205c0 <g_str_equal@plt+0x13300>
    e8d2:	mov    esi,0x1
    e8d7:	mov    rdi,rax
    e8da:	call   17020 <g_str_equal@plt+0x9d60>
    e8df:	jmp    e5c8 <g_str_equal@plt+0x1308>
    e8e4:	nop    DWORD PTR [rax+0x0]
    e8e8:	mov    edi,DWORD PTR [r15+0x10]
    e8ec:	jne    e908 <g_str_equal@plt+0x1648>
    e8ee:	cmp    edi,0xffffffff
    e8f1:	je     e882 <g_str_equal@plt+0x15c2>
    e8f3:	call   c230 <close@plt>
    e8f8:	mov    DWORD PTR [r15+0x10],0xffffffff
    e900:	jmp    e882 <g_str_equal@plt+0x15c2>
    e902:	nop    WORD PTR [rax+rax*1+0x0]
    e908:	cmp    edi,0xffffffff
    e90b:	jne    ea58 <g_str_equal@plt+0x1798>
    e911:	test   r14d,r14d
    e914:	jns    e6f0 <g_str_equal@plt+0x1430>
    e91a:	jmp    e882 <g_str_equal@plt+0x15c2>
    e91f:	nop
    e920:	mov    rdi,QWORD PTR [r15]
    e923:	lea    r8,[rip+0x44636]        # 52f60 <_fini@@Base+0x80c>
    e92a:	lea    rdx,[rip+0x43e37]        # 52768 <_fini@@Base+0x14>
    e931:	lea    rsi,[rip+0x4435f]        # 52c97 <_fini@@Base+0x543>
    e938:	mov    ecx,0x2bc
    e93d:	mov    QWORD PTR [rsp+0x10],r9
    e942:	call   205c0 <g_str_equal@plt+0x13300>
    e947:	mov    r9,QWORD PTR [rsp+0x10]
    e94c:	lea    rcx,[rsp+0x38]
    e951:	mov    rsi,rbp
    e954:	mov    rdi,rax
    e957:	mov    rdx,r9
    e95a:	call   17320 <g_str_equal@plt+0xa060>
    e95f:	test   eax,eax
    e961:	js     eaed <g_str_equal@plt+0x182d>
    e967:	add    DWORD PTR [rip+0x273812],0x1        # 282180 <g_test_config_vars+0xdc0>
    e96e:	cmp    BYTE PTR [rsp+0x90],0x5f
    e976:	mov    r12d,DWORD PTR [r15+0x10]
    e97a:	mov    r9,QWORD PTR [rsp+0x10]
    e97f:	mov    DWORD PTR [r15+0x10],0xffffffff
    e987:	mov    DWORD PTR [rsp+0x80],r12d
    e98f:	mov    QWORD PTR [rsp+0x88],r9
    e997:	jne    e765 <g_str_equal@plt+0x14a5>
    e99d:	xor    eax,eax
    e99f:	mov    esi,0x3
    e9a4:	mov    edi,r12d
    e9a7:	call   d230 <fcntl@plt>
    e9ac:	test   al,0x3
    e9ae:	je     ea88 <g_str_equal@plt+0x17c8>
    e9b4:	call   35bf0 <g_str_equal@plt+0x28930>
    e9b9:	mov    rdi,rax
    e9bc:	call   33e80 <g_str_equal@plt+0x26bc0>
    e9c1:	mov    DWORD PTR [rsp+0x50],r12d
    e9c6:	lea    r12,[rsp+0xa0]
    e9ce:	lea    rsi,[rip+0xfffffffffffff89b]        # e270 <g_str_equal@plt+0xfb0>
    e9d5:	mov    rdi,rax
    e9d8:	mov    QWORD PTR [rsp+0x58],rbx
    e9dd:	mov    QWORD PTR [rsp+0x68],rbp
    e9e2:	lea    rdx,[r12+0x8]
    e9e7:	mov    DWORD PTR [rsp+0x70],r14d
    e9ec:	mov    DWORD PTR [rsp+0x74],0xfffffffe
    e9f4:	mov    QWORD PTR [rsp+0x60],rdx
    e9f9:	mov    rdx,QWORD PTR [rsp+0x8]
    e9fe:	call   34ac0 <g_str_equal@plt+0x27800>
    ea03:	mov    ebx,eax
    ea05:	mov    DWORD PTR [rsp+0xa4],0x0
    ea10:	jmp    e7e3 <g_str_equal@plt+0x1523>
    ea15:	nop    DWORD PTR [rax]
    ea18:	movsxd r13,eax
    ea1b:	cmp    QWORD PTR [rsp+0x88],r13
    ea23:	jb     ea34 <g_str_equal@plt+0x1774>
    ea25:	cmp    eax,0x2000
    ea2a:	mov    DWORD PTR [rsp+0x2c],eax
    ea2e:	jbe    e82a <g_str_equal@plt+0x156a>
    ea34:	lea    rcx,[rip+0x444f5]        # 52f30 <_fini@@Base+0x7dc>
    ea3b:	lea    rsi,[rip+0x43d26]        # 52768 <_fini@@Base+0x14>
    ea42:	lea    rdi,[rip+0x43d7f]        # 527c8 <_fini@@Base+0x74>
    ea49:	mov    edx,0x2d6
    ea4e:	call   c390 <__assert_fail@plt>
    ea53:	nop    DWORD PTR [rax+rax*1+0x0]
    ea58:	call   c230 <close@plt>
    ea5d:	mov    DWORD PTR [r15+0x10],0xffffffff
    ea65:	jmp    e911 <g_str_equal@plt+0x1651>
    ea6a:	nop    WORD PTR [rax+rax*1+0x0]
    ea70:	mov    rdi,QWORD PTR [rsp+0x40]
    ea75:	call   d2b0 <g_free@plt>
    ea7a:	mov    edi,DWORD PTR [r15+0x10]
    ea7e:	jmp    e8ee <g_str_equal@plt+0x162e>
    ea83:	nop    DWORD PTR [rax+rax*1+0x0]
    ea88:	movzx  esi,BYTE PTR [rip+0x445c2]        # 53051 <_fini@@Base+0x8fd>
    ea8f:	movzx  eax,BYTE PTR [rip+0x445ba]        # 53050 <_fini@@Base+0x8fc>
    ea96:	lea    r12,[rsp+0xa0]
    ea9e:	mov    ebx,0x2
    eaa3:	lea    rdi,[r12+0x8]
    eaa8:	shl    rsi,0x8
    eaac:	or     rax,rsi
    eaaf:	movzx  esi,BYTE PTR [rip+0x4459c]        # 53052 <_fini@@Base+0x8fe>
    eab6:	shl    rsi,0x10
    eaba:	or     rsi,rax
    eabd:	call   ee30 <g_str_equal@plt+0x1b70>
    eac2:	jmp    ea05 <g_str_equal@plt+0x1745>
    eac7:	lea    rdi,[rsp+0x38]
    eacc:	lea    r8,[rip+0x441d0]        # 52ca3 <_fini@@Base+0x54f>
    ead3:	lea    rcx,[rip+0x44486]        # 52f60 <_fini@@Base+0x80c>
    eada:	lea    rsi,[rip+0x43c87]        # 52768 <_fini@@Base+0x14>
    eae1:	mov    edx,0x2b2
    eae6:	xor    eax,eax
    eae8:	call   3a090 <g_str_equal@plt+0x2cdd0>
    eaed:	mov    edi,DWORD PTR [r15+0x10]
    eaf1:	jmp    e8f3 <g_str_equal@plt+0x1633>
    eaf6:	call   3a460 <g_str_equal@plt+0x2d1a0>
    eafb:	jmp    e4d0 <g_str_equal@plt+0x1210>
    eb00:	lea    rdi,[rsp+0x38]
    eb05:	lea    r8,[rip+0x43c9c]        # 527a8 <_fini@@Base+0x54>
    eb0c:	lea    rcx,[rip+0x4444d]        # 52f60 <_fini@@Base+0x80c>
    eb13:	lea    rsi,[rip+0x43c4e]        # 52768 <_fini@@Base+0x14>
    eb1a:	mov    edx,0x2ac
    eb1f:	xor    eax,eax
    eb21:	call   3a090 <g_str_equal@plt+0x2cdd0>
    eb26:	jmp    e882 <g_str_equal@plt+0x15c2>
    eb2b:	call   cd30 <__stack_chk_fail@plt>
    eb30:	lea    rcx,[rip+0x443f9]        # 52f30 <_fini@@Base+0x7dc>
    eb37:	lea    rsi,[rip+0x43c2a]        # 52768 <_fini@@Base+0x14>
    eb3e:	lea    rdi,[rip+0x4417b]        # 52cc0 <_fini@@Base+0x56c>
    eb45:	mov    edx,0x2d8
    eb4a:	call   c390 <__assert_fail@plt>
    eb4f:	nop
    eb50:	movzx  eax,BYTE PTR [rdi]
    eb53:	shr    al,0x5
    eb56:	cmp    al,0x5
    eb58:	ja     eba8 <g_str_equal@plt+0x18e8>
    eb5a:	lea    rdx,[rip+0x4443f]        # 52fa0 <_fini@@Base+0x84c>
    eb61:	movzx  eax,al
    eb64:	movsxd rax,DWORD PTR [rdx+rax*4]
    eb68:	add    rax,rdx
    eb6b:	jmp    rax
    eb6d:	nop    DWORD PTR [rax]
    eb70:	mov    eax,DWORD PTR [rdi+0x6]
    eb73:	bswap  eax
    eb75:	ret    
    eb76:	nop    WORD PTR cs:[rax+rax*1+0x0]
    eb80:	mov    eax,DWORD PTR [rdi+0xa]
    eb83:	bswap  eax
    eb85:	ret    
    eb86:	nop    WORD PTR cs:[rax+rax*1+0x0]
    eb90:	movzx  eax,WORD PTR [rdi+0x7]
    eb94:	ror    ax,0x8
    eb98:	movzx  eax,ax
    eb9b:	ret    
    eb9c:	nop    DWORD PTR [rax+0x0]
    eba0:	movzx  eax,BYTE PTR [rdi+0x4]
    eba4:	ret    
    eba5:	nop    DWORD PTR [rax]
    eba8:	mov    eax,0xffffffff
    ebad:	ret    
    ebae:	xchg   ax,ax
    ebb0:	movzx  eax,BYTE PTR [rdi]
    ebb3:	shr    al,0x5
    ebb6:	test   al,al
    ebb8:	jne    ebc0 <g_str_equal@plt+0x1900>
    ebba:	cmp    BYTE PTR [rdi+0x4],0x0
    ebbe:	je     ebc8 <g_str_equal@plt+0x1908>
    ebc0:	jmp    eb50 <g_str_equal@plt+0x1890>
    ebc2:	nop    WORD PTR [rax+rax*1+0x0]
    ebc8:	mov    eax,0x100
    ebcd:	ret    
    ebce:	xchg   ax,ax
    ebd0:	movzx  eax,BYTE PTR [rdi]
    ebd3:	shr    al,0x5
    ebd6:	cmp    al,0x5
    ebd8:	ja     ec20 <g_str_equal@plt+0x1960>
    ebda:	lea    rdx,[rip+0x443d7]        # 52fb8 <_fini@@Base+0x864>
    ebe1:	movzx  eax,al
    ebe4:	movsxd rax,DWORD PTR [rdx+rax*4]
    ebe8:	add    rax,rdx
    ebeb:	jmp    rax
    ebed:	nop    DWORD PTR [rax]
    ebf0:	mov    rax,QWORD PTR [rdi+0x2]
    ebf4:	bswap  rax
    ebf7:	ret    
    ebf8:	nop    DWORD PTR [rax+rax*1+0x0]
    ec00:	mov    eax,DWORD PTR [rdi+0x2]
    ec03:	bswap  eax
    ec05:	mov    eax,eax
    ec07:	ret    
    ec08:	nop    DWORD PTR [rax+rax*1+0x0]
    ec10:	mov    eax,DWORD PTR [rdi]
    ec12:	bswap  eax
    ec14:	and    eax,0x1fffff
    ec19:	ret    
    ec1a:	nop    WORD PTR [rax+rax*1+0x0]
    ec20:	mov    rax,0xffffffffffffffff
    ec27:	ret    
    ec28:	nop    DWORD PTR [rax+rax*1+0x0]
    ec30:	movzx  edx,BYTE PTR [rdi]
    ec33:	mov    eax,0xffffffff
    ec38:	shr    dl,0x5
    ec3b:	cmp    dl,0x5
    ec3e:	ja     ec4d <g_str_equal@plt+0x198d>
    ec40:	lea    rax,[rip+0x44389]        # 52fd0 <_fini@@Base+0x87c>
    ec47:	movzx  edx,dl
    ec4a:	mov    eax,DWORD PTR [rax+rdx*4]
    ec4d:	repz ret 
    ec4f:	nop
    ec50:	sub    rsp,0x18
    ec54:	test   esi,esi
    ec56:	jle    ecc9 <g_str_equal@plt+0x1a09>
    ec58:	test   BYTE PTR [rdi],0x2
    ec5b:	je     eca0 <g_str_equal@plt+0x19e0>
    ec5d:	cmp    esi,0x3
    ec60:	jle    ecb8 <g_str_equal@plt+0x19f8>
    ec62:	movzx  ecx,BYTE PTR [rdi+0x1]
    ec66:	movzx  edx,BYTE PTR [rdi+0x2]
    ec6a:	movzx  eax,BYTE PTR [rdi+0x3]
    ec6e:	mov    BYTE PTR [rsp+0xd],cl
    ec72:	mov    BYTE PTR [rsp+0xe],dl
    ec76:	mov    BYTE PTR [rsp+0xf],al
    ec7a:	movzx  edx,BYTE PTR [rsp+0xe]
    ec7f:	movzx  eax,BYTE PTR [rsp+0xd]
    ec84:	mov    ah,dl
    ec86:	movzx  edx,BYTE PTR [rsp+0xf]
    ec8b:	add    rsp,0x18
    ec8f:	shl    rdx,0x10
    ec93:	or     rax,rdx
    ec96:	ret    
    ec97:	nop    WORD PTR [rax+rax*1+0x0]
    eca0:	cmp    esi,0xd
    eca3:	jle    ecb8 <g_str_equal@plt+0x19f8>
    eca5:	movzx  ecx,BYTE PTR [rdi+0x2]
    eca9:	movzx  edx,BYTE PTR [rdi+0xc]
    ecad:	movzx  eax,BYTE PTR [rdi+0xd]
    ecb1:	jmp    ec6e <g_str_equal@plt+0x19ae>
    ecb3:	nop    DWORD PTR [rax+rax*1+0x0]
    ecb8:	mov    eax,0xb
    ecbd:	mov    BYTE PTR [rsp+0xf],0x6
    ecc2:	mov    WORD PTR [rsp+0xd],ax
    ecc7:	jmp    ec7a <g_str_equal@plt+0x19ba>
    ecc9:	lea    rcx,[rip+0x44320]        # 52ff0 <_fini@@Base+0x89c>
    ecd0:	lea    rsi,[rip+0x44391]        # 53068 <_fini@@Base+0x914>
    ecd7:	lea    rdi,[rip+0x44428]        # 53106 <_fini@@Base+0x9b2>
    ecde:	mov    edx,0x68
    ece3:	call   c390 <__assert_fail@plt>
    ece8:	nop    DWORD PTR [rax+rax*1+0x0]
    ecf0:	push   rbx
    ecf1:	pxor   xmm0,xmm0
    ecf5:	mov    r8d,edx
    ecf8:	mov    ebx,edx
    ecfa:	sub    rsp,0x30
    ecfe:	shr    r8d,0x10
    ed02:	movzx  ebx,bh
    ed05:	mov    rax,QWORD PTR fs:0x28
    ed0e:	mov    QWORD PTR [rsp+0x28],rax
    ed13:	xor    eax,eax
    ed15:	xor    eax,eax
    ed17:	test   cl,cl
    ed19:	mov    QWORD PTR [rsp+0x8],rdx
    ed1e:	movaps XMMWORD PTR [rsp+0x10],xmm0
    ed23:	mov    WORD PTR [rsp+0x20],ax
    ed28:	jne    edd8 <g_str_equal@plt+0x1b18>
    ed2e:	mov    eax,0x8
    ed33:	mov    BYTE PTR [rsp+0x10],0x72
    ed38:	mov    BYTE PTR [rsp+0x11],dl
    ed3c:	mov    BYTE PTR [rsp+0x12],bl
    ed40:	mov    BYTE PTR [rsp+0x13],r8b
    ed45:	cmp    rsi,rax
    ed48:	lea    rdx,[rsp+0x10]
    ed4d:	cmovbe rax,rsi
    ed51:	cmp    eax,0x8
    ed54:	jae    ed90 <g_str_equal@plt+0x1ad0>
    ed56:	test   al,0x4
    ed58:	jne    ee00 <g_str_equal@plt+0x1b40>
    ed5e:	test   eax,eax
    ed60:	je     ed6f <g_str_equal@plt+0x1aaf>
    ed62:	movzx  ecx,BYTE PTR [rdx]
    ed65:	test   al,0x2
    ed67:	mov    BYTE PTR [rdi],cl
    ed69:	jne    ee18 <g_str_equal@plt+0x1b58>
    ed6f:	mov    rbx,QWORD PTR [rsp+0x28]
    ed74:	xor    rbx,QWORD PTR fs:0x28
    ed7d:	jne    ee29 <g_str_equal@plt+0x1b69>
    ed83:	add    rsp,0x30
    ed87:	pop    rbx
    ed88:	ret    
    ed89:	nop    DWORD PTR [rax+0x0]
    ed90:	mov    rcx,QWORD PTR [rsp+0x10]
    ed95:	mov    QWORD PTR [rdi],rcx
    ed98:	mov    ecx,eax
    ed9a:	mov    rsi,QWORD PTR [rdx+rcx*1-0x8]
    ed9f:	mov    QWORD PTR [rdi+rcx*1-0x8],rsi
    eda4:	lea    rcx,[rdi+0x8]
    eda8:	and    rcx,0xfffffffffffffff8
    edac:	sub    rdi,rcx
    edaf:	sub    rdx,rdi
    edb2:	add    edi,eax
    edb4:	and    edi,0xfffffff8
    edb7:	cmp    edi,0x8
    edba:	jb     ed6f <g_str_equal@plt+0x1aaf>
    edbc:	and    edi,0xfffffff8
    edbf:	xor    esi,esi
    edc1:	mov    r8d,esi
    edc4:	add    esi,0x8
    edc7:	mov    r9,QWORD PTR [rdx+r8*1]
    edcb:	cmp    esi,edi
    edcd:	mov    QWORD PTR [rcx+r8*1],r9
    edd1:	jb     edc1 <g_str_equal@plt+0x1b01>
    edd3:	jmp    ed6f <g_str_equal@plt+0x1aaf>
    edd5:	nop    DWORD PTR [rax]
    edd8:	mov    BYTE PTR [rsp+0x10],0x70
    eddd:	mov    BYTE PTR [rsp+0x12],dl
    ede1:	mov    eax,0x12
    ede6:	mov    BYTE PTR [rsp+0x17],0xa
    edeb:	mov    BYTE PTR [rsp+0x1c],bl
    edef:	mov    BYTE PTR [rsp+0x1d],r8b
    edf4:	jmp    ed45 <g_str_equal@plt+0x1a85>
    edf9:	nop    DWORD PTR [rax+0x0]
    ee00:	mov    ecx,DWORD PTR [rdx]
    ee02:	mov    DWORD PTR [rdi],ecx
    ee04:	mov    ecx,eax
    ee06:	mov    edx,DWORD PTR [rdx+rcx*1-0x4]
    ee0a:	mov    DWORD PTR [rdi+rcx*1-0x4],edx
    ee0e:	jmp    ed6f <g_str_equal@plt+0x1aaf>
    ee13:	nop    DWORD PTR [rax+rax*1+0x0]
    ee18:	mov    ecx,eax
    ee1a:	movzx  edx,WORD PTR [rdx+rcx*1-0x2]
    ee1f:	mov    WORD PTR [rdi+rcx*1-0x2],dx
    ee24:	jmp    ed6f <g_str_equal@plt+0x1aaf>
    ee29:	call   cd30 <__stack_chk_fail@plt>
    ee2e:	xchg   ax,ax
    ee30:	mov    rdx,rsi
    ee33:	mov    ecx,0x1
    ee38:	mov    esi,0x12
    ee3d:	jmp    ecf0 <g_str_equal@plt+0x1a30>
    ee42:	nop    DWORD PTR [rax+0x0]
    ee46:	nop    WORD PTR cs:[rax+rax*1+0x0]
    ee50:	push   r12
    ee52:	push   rbp
    ee53:	mov    rbp,rdx
    ee56:	push   rbx
    ee57:	sub    rsp,0x10
    ee5b:	test   esi,esi
    ee5d:	je     eec0 <g_str_equal@plt+0x1c00>
    ee5f:	movzx  r9d,BYTE PTR [rdi]
    ee63:	mov    r12d,r8d
    ee66:	mov    ebx,ecx
    ee68:	shr    r9b,1
    ee6b:	xor    r9d,0x1
    ee6f:	and    r9d,0x1
    ee73:	cmp    r9b,r8b
    ee76:	je     eea0 <g_str_equal@plt+0x1be0>
    ee78:	call   ec50 <g_str_equal@plt+0x1990>
    ee7d:	add    rsp,0x10
    ee81:	movzx  ecx,r12b
    ee85:	movsxd rsi,ebx
    ee88:	mov    rdi,rbp
    ee8b:	mov    edx,eax
    ee8d:	pop    rbx
    ee8e:	pop    rbp
    ee8f:	pop    r12
    ee91:	and    edx,0xffffff
    ee97:	jmp    ecf0 <g_str_equal@plt+0x1a30>
    ee9c:	nop    DWORD PTR [rax+0x0]
    eea0:	cmp    esi,ecx
    eea2:	cmovle ebx,esi
    eea5:	mov    rsi,rdi
    eea8:	mov    rdi,rbp
    eeab:	movsxd rdx,ebx
    eeae:	call   d220 <memcpy@plt>
    eeb3:	add    rsp,0x10
    eeb7:	mov    eax,ebx
    eeb9:	pop    rbx
    eeba:	pop    rbp
    eebb:	pop    r12
    eebd:	ret    
    eebe:	xchg   ax,ax
    eec0:	movzx  edx,BYTE PTR [rip+0x44199]        # 53060 <_fini@@Base+0x90c>
    eec7:	movzx  eax,BYTE PTR [rip+0x44191]        # 5305f <_fini@@Base+0x90b>
    eece:	mov    rdi,rbp
    eed1:	movzx  r8d,r8b
    eed5:	movsxd rsi,ecx
    eed8:	mov    ecx,r8d
    eedb:	shl    rdx,0x8
    eedf:	or     rax,rdx
    eee2:	movzx  edx,BYTE PTR [rip+0x44178]        # 53061 <_fini@@Base+0x90d>
    eee9:	add    rsp,0x10
    eeed:	pop    rbx
    eeee:	pop    rbp
    eeef:	pop    r12
    eef1:	shl    rdx,0x10
    eef5:	or     rdx,rax
    eef8:	jmp    ecf0 <g_str_equal@plt+0x1a30>
    eefd:	nop    DWORD PTR [rax]
    ef00:	cmp    edi,0xb
    ef03:	mov    eax,0x5
    ef08:	ja     ef7a <g_str_equal@plt+0x1cba>
    ef0a:	mov    ecx,edi
    ef0c:	mov    eax,0x1
    ef11:	shl    rax,cl
    ef14:	test   al,0xa4
    ef16:	mov    rcx,rax
    ef19:	je     ef80 <g_str_equal@plt+0x1cc0>
    ef1b:	shl    esi,0x8
    ef1e:	or     edx,esi
    ef20:	cmp    edx,0x2400
    ef26:	je     ef75 <g_str_equal@plt+0x1cb5>
    ef28:	jle    efa0 <g_str_equal@plt+0x1ce0>
    ef2a:	cmp    edx,0x2700
    ef30:	mov    eax,0xd
    ef35:	je     ef7a <g_str_equal@plt+0x1cba>
    ef37:	jle    ef60 <g_str_equal@plt+0x1ca0>
    ef39:	cmp    edx,0x2707
    ef3f:	je     efe0 <g_str_equal@plt+0x1d20>
    ef45:	jl     efc4 <g_str_equal@plt+0x1d04>
    ef47:	sub    edx,0x3a00
    ef4d:	cmp    edx,0x2
    ef50:	ja     efc4 <g_str_equal@plt+0x1d04>
    ef52:	mov    eax,0x7b
    ef57:	ret    
    ef58:	nop    DWORD PTR [rax+rax*1+0x0]
    ef60:	cmp    edx,0x2500
    ef66:	mov    eax,0x5f
    ef6b:	je     ef7a <g_str_equal@plt+0x1cba>
    ef6d:	cmp    edx,0x2600
    ef73:	jne    efc4 <g_str_equal@plt+0x1d04>
    ef75:	mov    eax,0x16
    ef7a:	repz ret 
    ef7c:	nop    DWORD PTR [rax+0x0]
    ef80:	xor    eax,eax
    ef82:	test   cl,0x43
    ef85:	jne    ef7a <g_str_equal@plt+0x1cba>
    ef87:	and    ecx,0x800
    ef8d:	cmp    rcx,0x1
    ef91:	sbb    eax,eax
    ef93:	and    eax,0xffffff88
    ef96:	add    eax,0x7d
    ef99:	ret    
    ef9a:	nop    WORD PTR [rax+rax*1+0x0]
    efa0:	cmp    edx,0x1a00
    efa6:	je     ef75 <g_str_equal@plt+0x1cb5>
    efa8:	jg     efd0 <g_str_equal@plt+0x1d10>
    efaa:	cmp    edx,0x401
    efb0:	mov    eax,0xb
    efb5:	je     ef7a <g_str_equal@plt+0x1cba>
    efb7:	cmp    edx,0x402
    efbd:	mov    eax,0x6b
    efc2:	je     ef7a <g_str_equal@plt+0x1cba>
    efc4:	mov    eax,0x5
    efc9:	ret    
    efca:	nop    WORD PTR [rax+rax*1+0x0]
    efd0:	cmp    edx,0x2000
    efd6:	je     ef75 <g_str_equal@plt+0x1cb5>
    efd8:	cmp    edx,0x2100
    efde:	jne    efc4 <g_str_equal@plt+0x1d04>
    efe0:	mov    eax,0x1c
    efe5:	ret    
    efe6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    eff0:	test   rsi,rsi
    eff3:	je     f020 <g_str_equal@plt+0x1d60>
    eff5:	sub    rsp,0x18
    eff9:	call   ec50 <g_str_equal@plt+0x1990>
    effe:	cdqe   
    f000:	add    rsp,0x18
    f004:	mov    rdx,rax
    f007:	movzx  esi,ah
    f00a:	movzx  edi,al
    f00d:	shr    rdx,0x10
    f011:	movzx  edx,dl
    f014:	jmp    ef00 <g_str_equal@plt+0x1c40>
    f019:	nop    DWORD PTR [rax+0x0]
    f020:	mov    eax,0x5
    f025:	ret    
    f026:	nop    WORD PTR cs:[rax+rax*1+0x0]
    f030:	cmp    dil,0xbf
    f034:	lea    rax,[rip+0x440d6]        # 53111 <_fini@@Base+0x9bd>
    f03b:	ja     f05a <g_str_equal@plt+0x1d9a>
    f03d:	lea    rax,[rip+0x27099c]        # 27f9e0 <_fini@@Base+0x22d28c>
    f044:	movzx  edi,dil
    f048:	lea    rdx,[rip+0x440c2]        # 53111 <_fini@@Base+0x9bd>
    f04f:	mov    rax,QWORD PTR [rax+rdi*8]
    f053:	test   rax,rax
    f056:	cmove  rax,rdx
    f05a:	repz ret 
    f05c:	nop    DWORD PTR [rax+0x0]
    f060:	test   edi,edi
    f062:	je     f078 <g_str_equal@plt+0x1db8>
    f064:	cmp    edi,0xc
    f067:	je     f0c8 <g_str_equal@plt+0x1e08>
    f069:	cmp    edi,0x21
    f06c:	mov    eax,0x28
    f071:	jne    f0b0 <g_str_equal@plt+0x1df0>
    f073:	repz ret 
    f075:	nop    DWORD PTR [rax]
    f078:	movzx  ecx,WORD PTR [rsi+0x44]
    f07c:	mov    eax,0x8
    f081:	lea    edi,[rcx-0x1]
    f084:	cmp    di,0x2
    f088:	jbe    f073 <g_str_equal@plt+0x1db3>
    f08a:	movzx  edi,WORD PTR [rsi+0x46]
    f08e:	test   dil,0x6
    f092:	jne    f073 <g_str_equal@plt+0x1db3>
    f094:	test   cx,cx
    f097:	jne    f0e0 <g_str_equal@plt+0x1e20>
    f099:	movzx  eax,BYTE PTR [rsi+0x40]
    f09d:	test   al,al
    f09f:	jne    f073 <g_str_equal@plt+0x1db3>
    f0a1:	xor    eax,eax
    f0a3:	and    edi,0x8
    f0a6:	setne  al
    f0a9:	add    eax,eax
    f0ab:	ret    
    f0ac:	nop    DWORD PTR [rax+0x0]
    f0b0:	mov    ecx,0xb
    f0b5:	mov    BYTE PTR [rdx+0x2],0x6
    f0b9:	mov    eax,0x2
    f0be:	mov    WORD PTR [rdx],cx
    f0c1:	ret    
    f0c2:	nop    WORD PTR [rax+rax*1+0x0]
    f0c8:	mov    esi,0x4404
    f0cd:	mov    BYTE PTR [rdx+0x2],0x0
    f0d1:	mov    eax,0x2
    f0d6:	mov    WORD PTR [rdx],si
    f0d9:	ret    
    f0da:	nop    WORD PTR [rax+rax*1+0x0]
    f0e0:	mov    eax,0x290b
    f0e5:	mov    BYTE PTR [rdx+0x2],0x7
    f0e9:	mov    WORD PTR [rdx],ax
    f0ec:	mov    eax,0x2
    f0f1:	ret    
    f0f2:	nop    WORD PTR cs:[rax+rax*1+0x0]
    f0fc:	nop    DWORD PTR [rax+0x0]
    f100:	sub    rsp,0x8
    f104:	call   133c0 <g_str_equal@plt+0x6100>
    f109:	add    rsp,0x8
    f10d:	sar    eax,0x1f
    f110:	ret    
    f111:	nop    WORD PTR cs:[rax+rax*1+0x0]
    f11b:	nop    DWORD PTR [rax+rax*1+0x0]
    f120:	cmp    edi,0x6
    f123:	ja     f133 <g_str_equal@plt+0x1e73>
    f125:	lea    rax,[rip+0x44694]        # 537c0 <_fini@@Base+0x106c>
    f12c:	mov    edi,edi
    f12e:	mov    rax,QWORD PTR [rax+rdi*8]
    f132:	ret    
    f133:	lea    rcx,[rip+0x44646]        # 53780 <_fini@@Base+0x102c>
    f13a:	lea    rsi,[rip+0x445bf]        # 53700 <_fini@@Base+0xfac>
    f141:	lea    rdi,[rip+0x445f0]        # 53738 <_fini@@Base+0xfe4>
    f148:	sub    rsp,0x8
    f14c:	mov    edx,0x25
    f151:	call   c390 <__assert_fail@plt>
    f156:	nop    WORD PTR cs:[rax+rax*1+0x0]
    f160:	jmp    QWORD PTR [rip+0x273022]        # 282188 <g_test_config_vars+0xdc8>
    f166:	nop    WORD PTR cs:[rax+rax*1+0x0]
    f170:	sub    rsp,0x28
    f174:	mov    rax,QWORD PTR fs:0x28
    f17d:	mov    QWORD PTR [rsp+0x18],rax
    f182:	xor    eax,eax
    f184:	mov    QWORD PTR [rsp],rsi
    f188:	mov    QWORD PTR [rsp+0x8],rdx
    f18d:	mov    rsi,rsp
    f190:	mov    edx,0x1
    f195:	call   QWORD PTR [rip+0x272fed]        # 282188 <g_test_config_vars+0xdc8>
    f19b:	mov    rdx,QWORD PTR [rsp+0x18]
    f1a0:	xor    rdx,QWORD PTR fs:0x28
    f1a9:	jne    f1b0 <g_str_equal@plt+0x1ef0>
    f1ab:	add    rsp,0x28
    f1af:	ret    
    f1b0:	call   cd30 <__stack_chk_fail@plt>
    f1b5:	nop
    f1b6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    f1c0:	push   rbx
    f1c1:	mov    r9,r8
    f1c4:	mov    rbx,rcx
    f1c7:	sub    rsp,0x20
    f1cb:	mov    rax,QWORD PTR fs:0x28
    f1d4:	mov    QWORD PTR [rsp+0x18],rax
    f1d9:	xor    eax,eax
    f1db:	mov    QWORD PTR [rsp+0x8],0x0
    f1e4:	mov    QWORD PTR [rsp+0x10],0x0
    f1ed:	lea    rcx,[rsp+0x8]
    f1f2:	lea    r8,[rsp+0x10]
    f1f7:	call   QWORD PTR [rip+0x272f8b]        # 282188 <g_test_config_vars+0xdc8>
    f1fd:	test   eax,eax
    f1ff:	js     f29a <g_str_equal@plt+0x1fda>
    f205:	mov    rax,QWORD PTR [rsp+0x10]
    f20a:	lea    rdi,[rax+rax*1+0x1]
    f20f:	call   ce00 <g_malloc0@plt>
    f214:	mov    rcx,QWORD PTR [rsp+0x10]
    f219:	mov    QWORD PTR [rbx],rax
    f21c:	test   rcx,rcx
    f21f:	je     f274 <g_str_equal@plt+0x1fb4>
    f221:	lea    rdi,[rip+0x44578]        # 537a0 <_fini@@Base+0x104c>
    f228:	mov    esi,0x1
    f22d:	xor    edx,edx
    f22f:	nop
    f230:	mov    rcx,QWORD PTR [rsp+0x8]
    f235:	movzx  ecx,BYTE PTR [rcx+rdx*1]
    f239:	shr    cl,0x4
    f23c:	and    ecx,0xf
    f23f:	movzx  ecx,BYTE PTR [rdi+rcx*1]
    f243:	mov    BYTE PTR [rax+rdx*2],cl
    f246:	mov    rax,QWORD PTR [rsp+0x8]
    f24b:	mov    rcx,QWORD PTR [rbx]
    f24e:	movzx  eax,BYTE PTR [rax+rdx*1]
    f252:	add    rdx,0x1
    f256:	and    eax,0xf
    f259:	movzx  eax,BYTE PTR [rdi+rax*1]
    f25d:	mov    BYTE PTR [rcx+rsi*1],al
    f260:	mov    rcx,QWORD PTR [rsp+0x10]
    f265:	add    rsi,0x2
    f269:	mov    rax,QWORD PTR [rbx]
    f26c:	cmp    rcx,rdx
    f26f:	ja     f230 <g_str_equal@plt+0x1f70>
    f271:	add    rcx,rcx
    f274:	mov    BYTE PTR [rax+rcx*1],0x0
    f278:	mov    rdi,QWORD PTR [rsp+0x8]
    f27d:	call   d2b0 <g_free@plt>
    f282:	xor    eax,eax
    f284:	mov    rbx,QWORD PTR [rsp+0x18]
    f289:	xor    rbx,QWORD PTR fs:0x28
    f292:	jne    f2a1 <g_str_equal@plt+0x1fe1>
    f294:	add    rsp,0x20
    f298:	pop    rbx
    f299:	ret    
    f29a:	mov    eax,0xffffffff
    f29f:	jmp    f284 <g_str_equal@plt+0x1fc4>
    f2a1:	call   cd30 <__stack_chk_fail@plt>
    f2a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    f2b0:	sub    rsp,0x28
    f2b4:	mov    QWORD PTR [rsp],rsi
    f2b8:	mov    QWORD PTR [rsp+0x8],rdx
    f2bd:	mov    rsi,rsp
    f2c0:	mov    edx,0x1
    f2c5:	mov    rax,QWORD PTR fs:0x28
    f2ce:	mov    QWORD PTR [rsp+0x18],rax
    f2d3:	xor    eax,eax
    f2d5:	call   f1c0 <g_str_equal@plt+0x1f00>
    f2da:	mov    rdx,QWORD PTR [rsp+0x18]
    f2df:	xor    rdx,QWORD PTR fs:0x28
    f2e8:	jne    f2ef <g_str_equal@plt+0x202f>
    f2ea:	add    rsp,0x28
    f2ee:	ret    
    f2ef:	call   cd30 <__stack_chk_fail@plt>
    f2f4:	xchg   ax,ax
    f2f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    f300:	push   rbx
    f301:	mov    r9,r8
    f304:	mov    rbx,rcx
    f307:	sub    rsp,0x20
    f30b:	mov    rax,QWORD PTR fs:0x28
    f314:	mov    QWORD PTR [rsp+0x18],rax
    f319:	xor    eax,eax
    f31b:	mov    QWORD PTR [rsp+0x8],0x0
    f324:	mov    QWORD PTR [rsp+0x10],0x0
    f32d:	lea    rcx,[rsp+0x8]
    f332:	lea    r8,[rsp+0x10]
    f337:	call   QWORD PTR [rip+0x272e4b]        # 282188 <g_test_config_vars+0xdc8>
    f33d:	test   eax,eax
    f33f:	js     f378 <g_str_equal@plt+0x20b8>
    f341:	mov    rsi,QWORD PTR [rsp+0x10]
    f346:	mov    rdi,QWORD PTR [rsp+0x8]
    f34b:	call   cdf0 <g_base64_encode@plt>
    f350:	mov    rdi,QWORD PTR [rsp+0x8]
    f355:	mov    QWORD PTR [rbx],rax
    f358:	call   d2b0 <g_free@plt>
    f35d:	xor    eax,eax
    f35f:	mov    rbx,QWORD PTR [rsp+0x18]
    f364:	xor    rbx,QWORD PTR fs:0x28
    f36d:	jne    f37f <g_str_equal@plt+0x20bf>
    f36f:	add    rsp,0x20
    f373:	pop    rbx
    f374:	ret    
    f375:	nop    DWORD PTR [rax]
    f378:	mov    eax,0xffffffff
    f37d:	jmp    f35f <g_str_equal@plt+0x209f>
    f37f:	call   cd30 <__stack_chk_fail@plt>
    f384:	xchg   ax,ax
    f386:	nop    WORD PTR cs:[rax+rax*1+0x0]
    f390:	sub    rsp,0x28
    f394:	mov    QWORD PTR [rsp],rsi
    f398:	mov    QWORD PTR [rsp+0x8],rdx
    f39d:	mov    rsi,rsp
    f3a0:	mov    edx,0x1
    f3a5:	mov    rax,QWORD PTR fs:0x28
    f3ae:	mov    QWORD PTR [rsp+0x18],rax
    f3b3:	xor    eax,eax
    f3b5:	call   f300 <g_str_equal@plt+0x2040>
    f3ba:	mov    rdx,QWORD PTR [rsp+0x18]
    f3bf:	xor    rdx,QWORD PTR fs:0x28
    f3c8:	jne    f3cf <g_str_equal@plt+0x210f>
    f3ca:	add    rsp,0x28
    f3ce:	ret    
    f3cf:	call   cd30 <__stack_chk_fail@plt>
    f3d4:	nop    WORD PTR cs:[rax+rax*1+0x0]
    f3de:	xchg   ax,ax
    f3e0:	push   r15
    f3e2:	push   r14
    f3e4:	push   r13
    f3e6:	push   r12
    f3e8:	push   rbp
    f3e9:	push   rbx
    f3ea:	sub    rsp,0x18
    f3ee:	cmp    edi,0x6
    f3f1:	mov    QWORD PTR [rsp],rcx
    f3f5:	mov    QWORD PTR [rsp+0x8],r9
    f3fa:	ja     f4bc <g_str_equal@plt+0x21fc>
    f400:	mov    rbp,rdx
    f403:	lea    rdx,[rip+0x444b6]        # 538c0 <_fini@@Base+0x116c>
    f40a:	mov    eax,edi
    f40c:	mov    r13d,DWORD PTR [rdx+rax*4]
    f410:	cmp    r13d,0xffffffff
    f414:	je     f4bc <g_str_equal@plt+0x21fc>
    f41a:	mov    edi,r13d
    f41d:	mov    r12,rsi
    f420:	mov    r14,r8
    f423:	xor    r15d,r15d
    f426:	call   c1d0 <g_checksum_new@plt>
    f42b:	mov    rbx,rax
    f42e:	xor    eax,eax
    f430:	test   rbp,rbp
    f433:	je     f45a <g_str_equal@plt+0x219a>
    f435:	nop    DWORD PTR [rax]
    f438:	shl    rax,0x4
    f43c:	add    r15d,0x1
    f440:	mov    rdi,rbx
    f443:	add    rax,r12
    f446:	mov    rdx,QWORD PTR [rax+0x8]
    f44a:	mov    rsi,QWORD PTR [rax]
    f44d:	call   c0d0 <g_checksum_update@plt>
    f452:	movsxd rax,r15d
    f455:	cmp    rax,rbp
    f458:	jb     f438 <g_str_equal@plt+0x2178>
    f45a:	mov    edi,r13d
    f45d:	call   cbb0 <g_checksum_type_get_length@plt>
    f462:	test   eax,eax
    f464:	js     f52b <g_str_equal@plt+0x226b>
    f46a:	mov    r9,QWORD PTR [r14]
    f46d:	movsxd rdi,eax
    f470:	test   r9,r9
    f473:	je     f4a8 <g_str_equal@plt+0x21e8>
    f475:	cmp    r9,rdi
    f478:	jne    f4ec <g_str_equal@plt+0x222c>
    f47a:	mov    rax,QWORD PTR [rsp]
    f47e:	mov    rsi,QWORD PTR [rax]
    f481:	mov    rdx,r14
    f484:	mov    rdi,rbx
    f487:	call   c680 <g_checksum_get_digest@plt>
    f48c:	mov    rdi,rbx
    f48f:	call   c730 <g_checksum_free@plt>
    f494:	xor    eax,eax
    f496:	add    rsp,0x18
    f49a:	pop    rbx
    f49b:	pop    rbp
    f49c:	pop    r12
    f49e:	pop    r13
    f4a0:	pop    r14
    f4a2:	pop    r15
    f4a4:	ret    
    f4a5:	nop    DWORD PTR [rax]
    f4a8:	mov    QWORD PTR [r14],rdi
    f4ab:	call   ce00 <g_malloc0@plt>
    f4b0:	mov    rsi,rax
    f4b3:	mov    rax,QWORD PTR [rsp]
    f4b7:	mov    QWORD PTR [rax],rsi
    f4ba:	jmp    f481 <g_str_equal@plt+0x21c1>
    f4bc:	mov    r9d,edi
    f4bf:	mov    rdi,QWORD PTR [rsp+0x8]
    f4c4:	lea    r8,[rip+0x4432d]        # 537f8 <_fini@@Base+0x10a4>
    f4cb:	lea    rcx,[rip+0x443ce]        # 538a0 <_fini@@Base+0x114c>
    f4d2:	lea    rsi,[rip+0x44357]        # 53830 <_fini@@Base+0x10dc>
    f4d9:	xor    eax,eax
    f4db:	mov    edx,0x3d
    f4e0:	call   3a090 <g_str_equal@plt+0x2cdd0>
    f4e5:	mov    eax,0xffffffff
    f4ea:	jmp    f496 <g_str_equal@plt+0x21d6>
    f4ec:	sub    rsp,0x8
    f4f0:	lea    r8,[rip+0x44379]        # 53870 <_fini@@Base+0x111c>
    f4f7:	lea    rcx,[rip+0x443a2]        # 538a0 <_fini@@Base+0x114c>
    f4fe:	push   rax
    f4ff:	mov    rdi,QWORD PTR [rsp+0x18]
    f504:	lea    rsi,[rip+0x44325]        # 53830 <_fini@@Base+0x10dc>
    f50b:	mov    edx,0x53
    f510:	xor    eax,eax
    f512:	call   3a090 <g_str_equal@plt+0x2cdd0>
    f517:	pop    rax
    f518:	pop    rdx
    f519:	mov    rdi,rbx
    f51c:	call   c730 <g_checksum_free@plt>
    f521:	mov    eax,0xffffffff
    f526:	jmp    f496 <g_str_equal@plt+0x21d6>
    f52b:	mov    rdi,QWORD PTR [rsp+0x8]
    f530:	lea    r9,[rip+0x442db]        # 53812 <_fini@@Base+0x10be>
    f537:	lea    r8,[rip+0x43850]        # 52d8e <_fini@@Base+0x63a>
    f53e:	lea    rcx,[rip+0x4435b]        # 538a0 <_fini@@Base+0x114c>
    f545:	lea    rsi,[rip+0x442e4]        # 53830 <_fini@@Base+0x10dc>
    f54c:	mov    edx,0x4a
    f551:	xor    eax,eax
    f553:	call   3a090 <g_str_equal@plt+0x2cdd0>
    f558:	jmp    f519 <g_str_equal@plt+0x2259>
    f55a:	nop    WORD PTR [rax+rax*1+0x0]
    f560:	xor    eax,eax
    f562:	cmp    edi,0x6
    f565:	ja     f57a <g_str_equal@plt+0x22ba>
    f567:	lea    rax,[rip+0x44352]        # 538c0 <_fini@@Base+0x116c>
    f56e:	mov    edi,edi
    f570:	cmp    DWORD PTR [rax+rdi*4],0xffffffff
    f574:	setne  al
    f577:	movzx  eax,al
    f57a:	repz ret 
    f57c:	nop    DWORD PTR [rax+0x0]
    f580:	mov    rax,QWORD PTR [rdi+0x10]
    f584:	jmp    QWORD PTR [rax]
    f586:	nop    WORD PTR cs:[rax+rax*1+0x0]
    f590:	sub    rsp,0x28
    f594:	mov    rax,QWORD PTR fs:0x28
    f59d:	mov    QWORD PTR [rsp+0x18],rax
    f5a2:	xor    eax,eax
    f5a4:	mov    rax,QWORD PTR [rdi+0x10]
    f5a8:	mov    QWORD PTR [rsp],rsi
    f5ac:	mov    rsi,rsp
    f5af:	mov    QWORD PTR [rsp+0x8],rdx
    f5b4:	mov    edx,0x1
    f5b9:	call   QWORD PTR [rax]
    f5bb:	mov    rdx,QWORD PTR [rsp+0x18]
    f5c0:	xor    rdx,QWORD PTR fs:0x28
    f5c9:	jne    f5d0 <g_str_equal@plt+0x2310>
    f5cb:	add    rsp,0x28
    f5cf:	ret    
    f5d0:	call   cd30 <__stack_chk_fail@plt>
    f5d5:	nop
    f5d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    f5e0:	push   rbx
    f5e1:	mov    r9,r8
    f5e4:	mov    rbx,rcx
    f5e7:	sub    rsp,0x20
    f5eb:	mov    rax,QWORD PTR fs:0x28
    f5f4:	mov    QWORD PTR [rsp+0x18],rax
    f5f9:	xor    eax,eax
    f5fb:	mov    rax,QWORD PTR [rdi+0x10]
    f5ff:	mov    QWORD PTR [rsp+0x8],0x0
    f608:	lea    rcx,[rsp+0x8]
    f60d:	mov    QWORD PTR [rsp+0x10],0x0
    f616:	lea    r8,[rsp+0x10]
    f61b:	call   QWORD PTR [rax]
    f61d:	test   eax,eax
    f61f:	js     f6ba <g_str_equal@plt+0x23fa>
    f625:	mov    rax,QWORD PTR [rsp+0x10]
    f62a:	lea    rdi,[rax+rax*1+0x1]
    f62f:	call   ce00 <g_malloc0@plt>
    f634:	mov    rcx,QWORD PTR [rsp+0x10]
    f639:	mov    QWORD PTR [rbx],rax
    f63c:	test   rcx,rcx
    f63f:	je     f694 <g_str_equal@plt+0x23d4>
    f641:	lea    rdi,[rip+0x44298]        # 538e0 <_fini@@Base+0x118c>
    f648:	mov    esi,0x1
    f64d:	xor    edx,edx
    f64f:	nop
    f650:	mov    rcx,QWORD PTR [rsp+0x8]
    f655:	movzx  ecx,BYTE PTR [rcx+rdx*1]
    f659:	shr    cl,0x4
    f65c:	and    ecx,0xf
    f65f:	movzx  ecx,BYTE PTR [rdi+rcx*1]
    f663:	mov    BYTE PTR [rax+rdx*2],cl
    f666:	mov    rax,QWORD PTR [rsp+0x8]
    f66b:	mov    rcx,QWORD PTR [rbx]
    f66e:	movzx  eax,BYTE PTR [rax+rdx*1]
    f672:	add    rdx,0x1
    f676:	and    eax,0xf
    f679:	movzx  eax,BYTE PTR [rdi+rax*1]
    f67d:	mov    BYTE PTR [rcx+rsi*1],al
    f680:	mov    rcx,QWORD PTR [rsp+0x10]
    f685:	add    rsi,0x2
    f689:	mov    rax,QWORD PTR [rbx]
    f68c:	cmp    rcx,rdx
    f68f:	ja     f650 <g_str_equal@plt+0x2390>
    f691:	add    rcx,rcx
    f694:	mov    BYTE PTR [rax+rcx*1],0x0
    f698:	mov    rdi,QWORD PTR [rsp+0x8]
    f69d:	call   d2b0 <g_free@plt>
    f6a2:	xor    eax,eax
    f6a4:	mov    rbx,QWORD PTR [rsp+0x18]
    f6a9:	xor    rbx,QWORD PTR fs:0x28
    f6b2:	jne    f6c1 <g_str_equal@plt+0x2401>
    f6b4:	add    rsp,0x20
    f6b8:	pop    rbx
    f6b9:	ret    
    f6ba:	mov    eax,0xffffffff
    f6bf:	jmp    f6a4 <g_str_equal@plt+0x23e4>
    f6c1:	call   cd30 <__stack_chk_fail@plt>
    f6c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    f6d0:	sub    rsp,0x28
    f6d4:	mov    QWORD PTR [rsp],rsi
    f6d8:	mov    QWORD PTR [rsp+0x8],rdx
    f6dd:	mov    rsi,rsp
    f6e0:	mov    edx,0x1
    f6e5:	mov    rax,QWORD PTR fs:0x28
    f6ee:	mov    QWORD PTR [rsp+0x18],rax
    f6f3:	xor    eax,eax
    f6f5:	call   f5e0 <g_str_equal@plt+0x2320>
    f6fa:	mov    rdx,QWORD PTR [rsp+0x18]
    f6ff:	xor    rdx,QWORD PTR fs:0x28
    f708:	jne    f70f <g_str_equal@plt+0x244f>
    f70a:	add    rsp,0x28
    f70e:	ret    
    f70f:	call   cd30 <__stack_chk_fail@plt>
    f714:	xchg   ax,ax
    f716:	nop    WORD PTR cs:[rax+rax*1+0x0]
    f720:	push   rbp
    f721:	push   rbx
    f722:	mov    ebp,edi
    f724:	sub    rsp,0x8
    f728:	call   f910 <g_str_equal@plt+0x2650>
    f72d:	test   rax,rax
    f730:	je     f760 <g_str_equal@plt+0x24a0>
    f732:	mov    edi,0x18
    f737:	mov    rbx,rax
    f73a:	call   ce00 <g_malloc0@plt>
    f73f:	lea    rdi,[rip+0x272a4a]        # 282190 <g_test_config_vars+0xdd0>
    f746:	mov    DWORD PTR [rax],ebp
    f748:	mov    QWORD PTR [rax+0x8],rbx
    f74c:	mov    QWORD PTR [rax+0x10],rdi
    f750:	add    rsp,0x8
    f754:	pop    rbx
    f755:	pop    rbp
    f756:	ret    
    f757:	nop    WORD PTR [rax+rax*1+0x0]
    f760:	xor    eax,eax
    f762:	jmp    f750 <g_str_equal@plt+0x2490>
    f764:	xchg   ax,ax
    f766:	nop    WORD PTR cs:[rax+rax*1+0x0]
    f770:	test   rdi,rdi
    f773:	je     f790 <g_str_equal@plt+0x24d0>
    f775:	push   rbx
    f776:	mov    rax,QWORD PTR [rdi+0x10]
    f77a:	mov    rbx,rdi
    f77d:	call   QWORD PTR [rax+0x8]
    f780:	mov    rdi,rbx
    f783:	pop    rbx
    f784:	jmp    d2b0 <g_free@plt>
    f789:	nop    DWORD PTR [rax+0x0]
    f790:	repz ret 
    f792:	nop    WORD PTR cs:[rax+rax*1+0x0]
    f79c:	nop    DWORD PTR [rax+0x0]
    f7a0:	push   rbx
    f7a1:	mov    rbx,QWORD PTR [rdi+0x8]
    f7a5:	mov    rdi,QWORD PTR [rbx]
    f7a8:	call   cf60 <g_hmac_unref@plt>
    f7ad:	mov    rdi,rbx
    f7b0:	pop    rbx
    f7b1:	jmp    d2b0 <g_free@plt>
    f7b6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    f7c0:	push   r15
    f7c2:	push   r14
    f7c4:	mov    r14,rdi
    f7c7:	push   r13
    f7c9:	push   r12
    f7cb:	mov    r13,r8
    f7ce:	push   rbp
    f7cf:	push   rbx
    f7d0:	sub    rsp,0x18
    f7d4:	test   rdx,rdx
    f7d7:	mov    rbp,QWORD PTR [rdi+0x8]
    f7db:	mov    QWORD PTR [rsp],rcx
    f7df:	mov    QWORD PTR [rsp+0x8],r9
    f7e4:	je     f81b <g_str_equal@plt+0x255b>
    f7e6:	mov    r12,rsi
    f7e9:	mov    rbx,rdx
    f7ec:	xor    r15d,r15d
    f7ef:	xor    eax,eax
    f7f1:	nop    DWORD PTR [rax+0x0]
    f7f8:	shl    rax,0x4
    f7fc:	mov    rdi,QWORD PTR [rbp+0x0]
    f800:	add    r15d,0x1
    f804:	add    rax,r12
    f807:	mov    rdx,QWORD PTR [rax+0x8]
    f80b:	mov    rsi,QWORD PTR [rax]
    f80e:	call   c710 <g_hmac_update@plt>
    f813:	movsxd rax,r15d
    f816:	cmp    rax,rbx
    f819:	jb     f7f8 <g_str_equal@plt+0x2538>
    f81b:	mov    edx,DWORD PTR [r14]
    f81e:	lea    rax,[rip+0x441eb]        # 53a10 <_fini@@Base+0x12bc>
    f825:	mov    edi,DWORD PTR [rax+rdx*4]
    f828:	call   cbb0 <g_checksum_type_get_length@plt>
    f82d:	test   eax,eax
    f82f:	js     f8b9 <g_str_equal@plt+0x25f9>
    f835:	mov    r9,QWORD PTR [r13+0x0]
    f839:	movsxd rdi,eax
    f83c:	test   r9,r9
    f83f:	je     f870 <g_str_equal@plt+0x25b0>
    f841:	cmp    r9,rdi
    f844:	jne    f885 <g_str_equal@plt+0x25c5>
    f846:	mov    rax,QWORD PTR [rsp]
    f84a:	mov    rsi,QWORD PTR [rax]
    f84d:	mov    rdi,QWORD PTR [rbp+0x0]
    f851:	mov    rdx,r13
    f854:	call   d120 <g_hmac_get_digest@plt>
    f859:	xor    eax,eax
    f85b:	add    rsp,0x18
    f85f:	pop    rbx
    f860:	pop    rbp
    f861:	pop    r12
    f863:	pop    r13
    f865:	pop    r14
    f867:	pop    r15
    f869:	ret    
    f86a:	nop    WORD PTR [rax+rax*1+0x0]
    f870:	mov    QWORD PTR [r13+0x0],rdi
    f874:	call   ce00 <g_malloc0@plt>
    f879:	mov    rsi,rax
    f87c:	mov    rax,QWORD PTR [rsp]
    f880:	mov    QWORD PTR [rax],rsi
    f883:	jmp    f84d <g_str_equal@plt+0x258d>
    f885:	sub    rsp,0x8
    f889:	lea    r8,[rip+0x440e0]        # 53970 <_fini@@Base+0x121c>
    f890:	lea    rcx,[rip+0x44139]        # 539d0 <_fini@@Base+0x127c>
    f897:	push   rax
    f898:	mov    rdi,QWORD PTR [rsp+0x18]
    f89d:	lea    rsi,[rip+0x4408c]        # 53930 <_fini@@Base+0x11dc>
    f8a4:	mov    edx,0x75
    f8a9:	xor    eax,eax
    f8ab:	call   3a090 <g_str_equal@plt+0x2cdd0>
    f8b0:	pop    rax
    f8b1:	mov    eax,0xffffffff
    f8b6:	pop    rdx
    f8b7:	jmp    f85b <g_str_equal@plt+0x259b>
    f8b9:	mov    rdi,QWORD PTR [rsp+0x8]
    f8be:	lea    r8,[rip+0x4402c]        # 538f1 <_fini@@Base+0x119d>
    f8c5:	lea    rcx,[rip+0x44104]        # 539d0 <_fini@@Base+0x127c>
    f8cc:	lea    rsi,[rip+0x4405d]        # 53930 <_fini@@Base+0x11dc>
    f8d3:	xor    eax,eax
    f8d5:	mov    edx,0x6c
    f8da:	call   3a090 <g_str_equal@plt+0x2cdd0>
    f8df:	mov    eax,0xffffffff
    f8e4:	jmp    f85b <g_str_equal@plt+0x259b>
    f8e9:	nop    DWORD PTR [rax+0x0]
    f8f0:	xor    eax,eax
    f8f2:	cmp    edi,0x6
    f8f5:	ja     f907 <g_str_equal@plt+0x2647>
    f8f7:	lea    rax,[rip+0x44112]        # 53a10 <_fini@@Base+0x12bc>
    f8fe:	mov    edi,edi
    f900:	cmp    DWORD PTR [rax+rdi*4],0xffffffff
    f904:	setne  al
    f907:	repz ret 
    f909:	nop    DWORD PTR [rax+0x0]
    f910:	cmp    edi,0x6
    f913:	push   r14
    f915:	push   r13
    f917:	push   r12
    f919:	mov    r12,rcx
    f91c:	push   rbp
    f91d:	push   rbx
    f91e:	ja     f970 <g_str_equal@plt+0x26b0>
    f920:	mov    r13,rdx
    f923:	lea    rdx,[rip+0x440e6]        # 53a10 <_fini@@Base+0x12bc>
    f92a:	mov    eax,edi
    f92c:	mov    r14d,DWORD PTR [rdx+rax*4]
    f930:	cmp    r14d,0xffffffff
    f934:	je     f970 <g_str_equal@plt+0x26b0>
    f936:	mov    rbp,rsi
    f939:	mov    edi,0x8
    f93e:	call   ce00 <g_malloc0@plt>
    f943:	mov    rdx,r13
    f946:	mov    rsi,rbp
    f949:	mov    edi,r14d
    f94c:	mov    rbx,rax
    f94f:	call   d0c0 <g_hmac_new@plt>
    f954:	test   rax,rax
    f957:	mov    QWORD PTR [rbx],rax
    f95a:	je     f9b8 <g_str_equal@plt+0x26f8>
    f95c:	mov    rax,rbx
    f95f:	pop    rbx
    f960:	pop    rbp
    f961:	pop    r12
    f963:	pop    r13
    f965:	pop    r14
    f967:	ret    
    f968:	nop    DWORD PTR [rax+rax*1+0x0]
    f970:	mov    esi,edi
    f972:	lea    rdi,[rip+0x271027]        # 2809a0 <_fini@@Base+0x22e24c>
    f979:	xor    ebx,ebx
    f97b:	call   2df50 <g_str_equal@plt+0x20c90>
    f980:	lea    r8,[rip+0x43f84]        # 5390b <_fini@@Base+0x11b7>
    f987:	lea    rcx,[rip+0x44062]        # 539f0 <_fini@@Base+0x129c>
    f98e:	lea    rsi,[rip+0x43f9b]        # 53930 <_fini@@Base+0x11dc>
    f995:	mov    r9,rax
    f998:	mov    rdi,r12
    f99b:	xor    eax,eax
    f99d:	mov    edx,0x3a
    f9a2:	call   3a090 <g_str_equal@plt+0x2cdd0>
    f9a7:	mov    rax,rbx
    f9aa:	pop    rbx
    f9ab:	pop    rbp
    f9ac:	pop    r12
    f9ae:	pop    r13
    f9b0:	pop    r14
    f9b2:	ret    
    f9b3:	nop    DWORD PTR [rax+rax*1+0x0]
    f9b8:	lea    r8,[rip+0x43fe1]        # 539a0 <_fini@@Base+0x124c>
    f9bf:	lea    rcx,[rip+0x4402a]        # 539f0 <_fini@@Base+0x129c>
    f9c6:	lea    rsi,[rip+0x43f63]        # 53930 <_fini@@Base+0x11dc>
    f9cd:	mov    edx,0x43
    f9d2:	mov    rdi,r12
    f9d5:	xor    eax,eax
    f9d7:	call   3a090 <g_str_equal@plt+0x2cdd0>
    f9dc:	mov    rdi,rbx
    f9df:	xor    ebx,ebx
    f9e1:	call   d2b0 <g_free@plt>
    f9e6:	jmp    f95c <g_str_equal@plt+0x269c>
    f9eb:	nop    DWORD PTR [rax+rax*1+0x0]
    f9f0:	test   rdi,rdi
    f9f3:	je     fe0c <g_str_equal@plt+0x2b4c>
    f9f9:	test   rdx,rdx
    f9fc:	je     fe0c <g_str_equal@plt+0x2b4c>
    fa02:	mov    eax,esi
    fa04:	and    eax,0xffffffbf
    fa07:	add    eax,0xffffff80
    fa0a:	jne    fc90 <g_str_equal@plt+0x29d0>
    fa10:	cmp    esi,0x80
    fa16:	je     fcb0 <g_str_equal@plt+0x29f0>
    fa1c:	cmp    esi,0xc0
    fa22:	jne    fc9c <g_str_equal@plt+0x29dc>
    fa28:	mov    DWORD PTR [rdx+0xf0],0xc
    fa32:	push   r14
    fa34:	push   r12
    fa36:	push   rbp
    fa37:	push   rbx
    fa38:	sub    rsp,0x8
    fa3c:	movzx  r8d,BYTE PTR [rdi]
    fa40:	movzx  eax,BYTE PTR [rdi+0x1]
    fa44:	shl    r8d,0x18
    fa48:	shl    eax,0x10
    fa4b:	xor    r8d,eax
    fa4e:	movzx  eax,BYTE PTR [rdi+0x3]
    fa52:	xor    r8d,eax
    fa55:	movzx  eax,BYTE PTR [rdi+0x2]
    fa59:	shl    eax,0x8
    fa5c:	xor    r8d,eax
    fa5f:	mov    DWORD PTR [rdx],r8d
    fa62:	movzx  r9d,BYTE PTR [rdi+0x4]
    fa67:	movzx  eax,BYTE PTR [rdi+0x5]
    fa6b:	shl    r9d,0x18
    fa6f:	shl    eax,0x10
    fa72:	xor    r9d,eax
    fa75:	movzx  eax,BYTE PTR [rdi+0x7]
    fa79:	xor    r9d,eax
    fa7c:	movzx  eax,BYTE PTR [rdi+0x6]
    fa80:	shl    eax,0x8
    fa83:	xor    r9d,eax
    fa86:	mov    DWORD PTR [rdx+0x4],r9d
    fa8a:	movzx  r10d,BYTE PTR [rdi+0x8]
    fa8f:	movzx  eax,BYTE PTR [rdi+0x9]
    fa93:	shl    r10d,0x18
    fa97:	shl    eax,0x10
    fa9a:	xor    r10d,eax
    fa9d:	movzx  eax,BYTE PTR [rdi+0xb]
    faa1:	xor    r10d,eax
    faa4:	movzx  eax,BYTE PTR [rdi+0xa]
    faa8:	shl    eax,0x8
    faab:	xor    r10d,eax
    faae:	mov    DWORD PTR [rdx+0x8],r10d
    fab2:	movzx  eax,BYTE PTR [rdi+0xc]
    fab6:	movzx  ecx,BYTE PTR [rdi+0xd]
    faba:	shl    eax,0x18
    fabd:	shl    ecx,0x10
    fac0:	xor    eax,ecx
    fac2:	movzx  ecx,BYTE PTR [rdi+0xf]
    fac6:	xor    eax,ecx
    fac8:	movzx  ecx,BYTE PTR [rdi+0xe]
    facc:	shl    ecx,0x8
    facf:	xor    eax,ecx
    fad1:	cmp    esi,0x80
    fad7:	mov    DWORD PTR [rdx+0xc],eax
    fada:	je     fcc0 <g_str_equal@plt+0x2a00>
    fae0:	movzx  ecx,BYTE PTR [rdi+0x10]
    fae4:	movzx  r11d,BYTE PTR [rdi+0x11]
    fae9:	shl    ecx,0x18
    faec:	shl    r11d,0x10
    faf0:	xor    ecx,r11d
    faf3:	movzx  r11d,BYTE PTR [rdi+0x13]
    faf8:	xor    ecx,r11d
    fafb:	movzx  r11d,BYTE PTR [rdi+0x12]
    fb00:	shl    r11d,0x8
    fb04:	xor    ecx,r11d
    fb07:	mov    DWORD PTR [rdx+0x10],ecx
    fb0a:	movzx  ebx,BYTE PTR [rdi+0x14]
    fb0e:	movzx  ecx,BYTE PTR [rdi+0x15]
    fb12:	shl    ebx,0x18
    fb15:	shl    ecx,0x10
    fb18:	xor    ebx,ecx
    fb1a:	movzx  ecx,BYTE PTR [rdi+0x17]
    fb1e:	xor    ebx,ecx
    fb20:	movzx  ecx,BYTE PTR [rdi+0x16]
    fb24:	shl    ecx,0x8
    fb27:	xor    ebx,ecx
    fb29:	cmp    esi,0xc0
    fb2f:	mov    DWORD PTR [rdx+0x14],ebx
    fb32:	je     fd58 <g_str_equal@plt+0x2a98>
    fb38:	movzx  ecx,BYTE PTR [rdi+0x18]
    fb3c:	movzx  r11d,BYTE PTR [rdi+0x19]
    fb41:	shl    ecx,0x18
    fb44:	shl    r11d,0x10
    fb48:	xor    ecx,r11d
    fb4b:	movzx  r11d,BYTE PTR [rdi+0x1b]
    fb50:	xor    ecx,r11d
    fb53:	movzx  r11d,BYTE PTR [rdi+0x1a]
    fb58:	shl    r11d,0x8
    fb5c:	xor    ecx,r11d
    fb5f:	mov    DWORD PTR [rdx+0x18],ecx
    fb62:	movzx  ebx,BYTE PTR [rdi+0x1c]
    fb66:	movzx  ecx,BYTE PTR [rdi+0x1d]
    fb6a:	shl    ebx,0x18
    fb6d:	shl    ecx,0x10
    fb70:	xor    ebx,ecx
    fb72:	movzx  ecx,BYTE PTR [rdi+0x1f]
    fb76:	xor    ebx,ecx
    fb78:	movzx  ecx,BYTE PTR [rdi+0x1e]
    fb7c:	shl    ecx,0x8
    fb7f:	xor    ebx,ecx
    fb81:	cmp    esi,0x100
    fb87:	mov    DWORD PTR [rdx+0x1c],ebx
    fb8a:	jne    fe18 <g_str_equal@plt+0x2b58>
    fb90:	lea    rdi,[rip+0x43f69]        # 53b00 <_fini@@Base+0x13ac>
    fb97:	add    rdx,0x20
    fb9b:	mov    r11d,0x1000000
    fba1:	lea    rcx,[rip+0x45398]        # 54f40 <_fini@@Base+0x27ec>
    fba8:	lea    r14,[rdi+0x1c]
    fbac:	jmp    fc12 <g_str_equal@plt+0x2952>
    fbae:	xchg   ax,ax
    fbb0:	mov    esi,eax
    fbb2:	movzx  ebp,ah
    fbb5:	movzx  r12d,al
    fbb9:	shr    esi,0x10
    fbbc:	mov    r11d,DWORD PTR [rcx+rbp*4]
    fbc0:	movzx  r12d,BYTE PTR [rcx+r12*4]
    fbc5:	movzx  esi,sil
    fbc9:	add    rdx,0x20
    fbcd:	mov    esi,DWORD PTR [rcx+rsi*4]
    fbd0:	and    r11d,0xff00
    fbd7:	and    esi,0xff0000
    fbdd:	or     esi,r11d
    fbe0:	mov    r11d,eax
    fbe3:	xor    esi,DWORD PTR [rdx-0x30]
    fbe6:	shr    r11d,0x18
    fbea:	mov    r11d,DWORD PTR [rcx+r11*4]
    fbee:	and    r11d,0xff000000
    fbf5:	or     r11d,r12d
    fbf8:	xor    esi,r11d
    fbfb:	mov    DWORD PTR [rdx-0x10],esi
    fbfe:	xor    esi,DWORD PTR [rdx-0x2c]
    fc01:	mov    DWORD PTR [rdx-0xc],esi
    fc04:	xor    esi,DWORD PTR [rdx-0x28]
    fc07:	xor    ebx,esi
    fc09:	mov    DWORD PTR [rdx-0x8],esi
    fc0c:	mov    DWORD PTR [rdx-0x4],ebx
    fc0f:	mov    r11d,DWORD PTR [rdi]
    fc12:	mov    r12d,ebx
    fc15:	movzx  esi,bl
    fc18:	movzx  ebp,bh
    fc1b:	shr    r12d,0x18
    fc1f:	mov    esi,DWORD PTR [rcx+rsi*4]
    fc22:	add    rdi,0x4
    fc26:	movzx  r12d,BYTE PTR [rcx+r12*4]
    fc2b:	and    esi,0xff00
    fc31:	or     esi,r12d
    fc34:	mov    r12d,ebx
    fc37:	shr    r12d,0x10
    fc3b:	movzx  r12d,r12b
    fc3f:	mov    r12d,DWORD PTR [rcx+r12*4]
    fc43:	and    r12d,0xff000000
    fc4a:	xor    esi,r12d
    fc4d:	mov    r12d,DWORD PTR [rcx+rbp*4]
    fc51:	and    r12d,0xff0000
    fc58:	xor    esi,r12d
    fc5b:	xor    r8d,esi
    fc5e:	xor    r8d,r11d
    fc61:	xor    r9d,r8d
    fc64:	mov    DWORD PTR [rdx],r8d
    fc67:	xor    r10d,r9d
    fc6a:	mov    DWORD PTR [rdx+0x4],r9d
    fc6e:	xor    eax,r10d
    fc71:	cmp    r14,rdi
    fc74:	mov    DWORD PTR [rdx+0x8],r10d
    fc78:	mov    DWORD PTR [rdx+0xc],eax
    fc7b:	jne    fbb0 <g_str_equal@plt+0x28f0>
    fc81:	add    rsp,0x8
    fc85:	xor    eax,eax
    fc87:	pop    rbx
    fc88:	pop    rbp
    fc89:	pop    r12
    fc8b:	pop    r14
    fc8d:	ret    
    fc8e:	xchg   ax,ax
    fc90:	cmp    esi,0x100
    fc96:	jne    fe12 <g_str_equal@plt+0x2b52>
    fc9c:	mov    DWORD PTR [rdx+0xf0],0xe
    fca6:	jmp    fa32 <g_str_equal@plt+0x2772>
    fcab:	nop    DWORD PTR [rax+rax*1+0x0]
    fcb0:	mov    DWORD PTR [rdx+0xf0],0xa
    fcba:	jmp    fa32 <g_str_equal@plt+0x2772>
    fcbf:	nop
    fcc0:	lea    rdi,[rip+0x43e3d]        # 53b04 <_fini@@Base+0x13b0>
    fcc7:	add    rdx,0x10
    fccb:	mov    r11d,0x1000000
    fcd1:	lea    rcx,[rip+0x45268]        # 54f40 <_fini@@Base+0x27ec>
    fcd8:	lea    rbx,[rdi+0x24]
    fcdc:	jmp    fceb <g_str_equal@plt+0x2a2b>
    fcde:	xchg   ax,ax
    fce0:	mov    r11d,DWORD PTR [rdi]
    fce3:	add    rdx,0x10
    fce7:	add    rdi,0x4
    fceb:	mov    ebp,eax
    fced:	movzx  esi,al
    fcf0:	shr    ebp,0x18
    fcf3:	mov    esi,DWORD PTR [rcx+rsi*4]
    fcf6:	movzx  ebp,BYTE PTR [rcx+rbp*4]
    fcfa:	and    esi,0xff00
    fd00:	or     esi,ebp
    fd02:	mov    ebp,eax
    fd04:	shr    ebp,0x10
    fd07:	movzx  ebp,bpl
    fd0b:	mov    ebp,DWORD PTR [rcx+rbp*4]
    fd0e:	and    ebp,0xff000000
    fd14:	xor    esi,ebp
    fd16:	movzx  ebp,ah
    fd19:	mov    ebp,DWORD PTR [rcx+rbp*4]
    fd1c:	and    ebp,0xff0000
    fd22:	xor    esi,ebp
    fd24:	xor    r8d,esi
    fd27:	xor    r8d,r11d
    fd2a:	xor    r9d,r8d
    fd2d:	mov    DWORD PTR [rdx],r8d
    fd30:	xor    r10d,r9d
    fd33:	mov    DWORD PTR [rdx+0x4],r9d
    fd37:	xor    eax,r10d
    fd3a:	cmp    rbx,rdi
    fd3d:	mov    DWORD PTR [rdx+0x8],r10d
    fd41:	mov    DWORD PTR [rdx+0xc],eax
    fd44:	jne    fce0 <g_str_equal@plt+0x2a20>
    fd46:	add    rsp,0x8
    fd4a:	xor    eax,eax
    fd4c:	pop    rbx
    fd4d:	pop    rbp
    fd4e:	pop    r12
    fd50:	pop    r14
    fd52:	ret    
    fd53:	nop    DWORD PTR [rax+rax*1+0x0]
    fd58:	lea    rdi,[rip+0x43da1]        # 53b00 <_fini@@Base+0x13ac>
    fd5f:	add    rdx,0x18
    fd63:	mov    r11d,0x1000000
    fd69:	lea    rcx,[rip+0x451d0]        # 54f40 <_fini@@Base+0x27ec>
    fd70:	lea    r14,[rdi+0x20]
    fd74:	jmp    fd94 <g_str_equal@plt+0x2ad4>
    fd76:	nop    WORD PTR cs:[rax+rax*1+0x0]
    fd80:	mov    esi,DWORD PTR [rdx-0x8]
    fd83:	add    rdx,0x18
    fd87:	xor    esi,eax
    fd89:	xor    ebx,esi
    fd8b:	mov    DWORD PTR [rdx-0x8],esi
    fd8e:	mov    DWORD PTR [rdx-0x4],ebx
    fd91:	mov    r11d,DWORD PTR [rdi]
    fd94:	mov    r12d,ebx
    fd97:	movzx  esi,bl
    fd9a:	movzx  ebp,bh
    fd9d:	shr    r12d,0x18
    fda1:	mov    esi,DWORD PTR [rcx+rsi*4]
    fda4:	add    rdi,0x4
    fda8:	movzx  r12d,BYTE PTR [rcx+r12*4]
    fdad:	and    esi,0xff00
    fdb3:	or     esi,r12d
    fdb6:	mov    r12d,ebx
    fdb9:	shr    r12d,0x10
    fdbd:	movzx  r12d,r12b
    fdc1:	mov    r12d,DWORD PTR [rcx+r12*4]
    fdc5:	and    r12d,0xff000000
    fdcc:	xor    esi,r12d
    fdcf:	mov    r12d,DWORD PTR [rcx+rbp*4]
    fdd3:	and    r12d,0xff0000
    fdda:	xor    esi,r12d
    fddd:	xor    r8d,esi
    fde0:	xor    r8d,r11d
    fde3:	xor    r9d,r8d
    fde6:	mov    DWORD PTR [rdx],r8d
    fde9:	xor    r10d,r9d
    fdec:	mov    DWORD PTR [rdx+0x4],r9d
    fdf0:	xor    eax,r10d
    fdf3:	cmp    r14,rdi
    fdf6:	mov    DWORD PTR [rdx+0x8],r10d
    fdfa:	mov    DWORD PTR [rdx+0xc],eax
    fdfd:	jne    fd80 <g_str_equal@plt+0x2ac0>
    fdff:	add    rsp,0x8
    fe03:	xor    eax,eax
    fe05:	pop    rbx
    fe06:	pop    rbp
    fe07:	pop    r12
    fe09:	pop    r14
    fe0b:	ret    
    fe0c:	mov    eax,0xffffffff
    fe11:	ret    
    fe12:	mov    eax,0xfffffffe
    fe17:	ret    
    fe18:	call   c270 <abort@plt>
    fe1d:	nop    DWORD PTR [rax]
    fe20:	push   rbp
    fe21:	push   rbx
    fe22:	mov    rbx,rdx
    fe25:	sub    rsp,0x8
    fe29:	call   f9f0 <g_str_equal@plt+0x2730>
    fe2e:	test   eax,eax
    fe30:	js     10029 <g_str_equal@plt+0x2d69>
    fe36:	mov    eax,DWORD PTR [rbx+0xf0]
    fe3c:	mov    rdx,rbx
    fe3f:	lea    esi,[rax*4+0x0]
    fe46:	test   esi,esi
    fe48:	jle    fec4 <g_str_equal@plt+0x2c04>
    fe4a:	xor    edi,edi
    fe4c:	nop    DWORD PTR [rax+0x0]
    fe50:	movsxd rcx,edi
    fe53:	movsxd rax,esi
    fe56:	add    edi,0x4
    fe59:	shl    rcx,0x2
    fe5d:	shl    rax,0x2
    fe61:	sub    esi,0x4
    fe64:	lea    r9,[rbx+rcx*1]
    fe68:	lea    r8,[rbx+rax*1]
    fe6c:	cmp    edi,esi
    fe6e:	mov    r10d,DWORD PTR [r9]
    fe71:	mov    r11d,DWORD PTR [r8]
    fe74:	mov    DWORD PTR [r9],r11d
    fe77:	mov    DWORD PTR [r8],r10d
    fe7a:	lea    r9,[rbx+rcx*1+0x4]
    fe7f:	lea    r8,[rbx+rax*1+0x4]
    fe84:	mov    r10d,DWORD PTR [r9]
    fe87:	mov    r11d,DWORD PTR [r8]
    fe8a:	mov    DWORD PTR [r9],r11d
    fe8d:	mov    DWORD PTR [r8],r10d
    fe90:	lea    r9,[rbx+rcx*1+0x8]
    fe95:	lea    r8,[rbx+rax*1+0x8]
    fe9a:	lea    rcx,[rbx+rcx*1+0xc]
    fe9f:	lea    rax,[rbx+rax*1+0xc]
    fea4:	mov    r10d,DWORD PTR [r9]
    fea7:	mov    r11d,DWORD PTR [r8]
    feaa:	mov    DWORD PTR [r9],r11d
    fead:	mov    DWORD PTR [r8],r10d
    feb0:	mov    r8d,DWORD PTR [rcx]
    feb3:	mov    r9d,DWORD PTR [rax]
    feb6:	mov    DWORD PTR [rcx],r9d
    feb9:	mov    DWORD PTR [rax],r8d
    febc:	jl     fe50 <g_str_equal@plt+0x2b90>
    febe:	mov    eax,DWORD PTR [rbx+0xf0]
    fec4:	cmp    eax,0x1
    fec7:	jle    10027 <g_str_equal@plt+0x2d67>
    fecd:	lea    r9,[rip+0x44c6c]        # 54b40 <_fini@@Base+0x23ec>
    fed4:	lea    rax,[rip+0x45065]        # 54f40 <_fini@@Base+0x27ec>
    fedb:	lea    r8,[rip+0x4405e]        # 53f40 <_fini@@Base+0x17ec>
    fee2:	lea    rdi,[rip+0x44857]        # 54740 <_fini@@Base+0x1fec>
    fee9:	lea    rsi,[rip+0x44450]        # 54340 <_fini@@Base+0x1bec>
    fef0:	mov    r10d,0x1
    fef6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    ff00:	add    rdx,0x10
    ff04:	mov    r11d,DWORD PTR [rdx]
    ff07:	add    r10d,0x1
    ff0b:	mov    ecx,r11d
    ff0e:	movzx  ebp,r11b
    ff12:	shr    ecx,0x18
    ff15:	movzx  ebp,BYTE PTR [rax+rbp*4]
    ff19:	movzx  ecx,BYTE PTR [rax+rcx*4]
    ff1d:	mov    ecx,DWORD PTR [r9+rcx*4]
    ff21:	xor    ecx,DWORD PTR [r8+rbp*4]
    ff25:	mov    ebp,r11d
    ff28:	shr    ebp,0x10
    ff2b:	movzx  ebp,bpl
    ff2f:	movzx  ebp,BYTE PTR [rax+rbp*4]
    ff33:	xor    ecx,DWORD PTR [rdi+rbp*4]
    ff36:	mov    ebp,ecx
    ff38:	mov    ecx,r11d
    ff3b:	movzx  ecx,ch
    ff3e:	movzx  r11d,BYTE PTR [rax+rcx*4]
    ff43:	mov    ecx,DWORD PTR [rsi+r11*4]
    ff47:	mov    r11d,DWORD PTR [rdx+0x4]
    ff4b:	xor    ecx,ebp
    ff4d:	movzx  ebp,r11b
    ff51:	mov    DWORD PTR [rdx],ecx
    ff53:	mov    ecx,r11d
    ff56:	movzx  ebp,BYTE PTR [rax+rbp*4]
    ff5a:	shr    ecx,0x18
    ff5d:	movzx  ecx,BYTE PTR [rax+rcx*4]
    ff61:	mov    ecx,DWORD PTR [r9+rcx*4]
    ff65:	xor    ecx,DWORD PTR [r8+rbp*4]
    ff69:	mov    ebp,r11d
    ff6c:	shr    ebp,0x10
    ff6f:	movzx  ebp,bpl
    ff73:	movzx  ebp,BYTE PTR [rax+rbp*4]
    ff77:	xor    ecx,DWORD PTR [rdi+rbp*4]
    ff7a:	mov    ebp,ecx
    ff7c:	mov    ecx,r11d
    ff7f:	movzx  ecx,ch
    ff82:	movzx  r11d,BYTE PTR [rax+rcx*4]
    ff87:	mov    ecx,DWORD PTR [rsi+r11*4]
    ff8b:	mov    r11d,DWORD PTR [rdx+0x8]
    ff8f:	xor    ecx,ebp
    ff91:	movzx  ebp,r11b
    ff95:	mov    DWORD PTR [rdx+0x4],ecx
    ff98:	mov    ecx,r11d
    ff9b:	movzx  ebp,BYTE PTR [rax+rbp*4]
    ff9f:	shr    ecx,0x18
    ffa2:	movzx  ecx,BYTE PTR [rax+rcx*4]
    ffa6:	mov    ecx,DWORD PTR [r9+rcx*4]
    ffaa:	xor    ecx,DWORD PTR [r8+rbp*4]
    ffae:	mov    ebp,r11d
    ffb1:	shr    ebp,0x10
    ffb4:	movzx  ebp,bpl
    ffb8:	movzx  ebp,BYTE PTR [rax+rbp*4]
    ffbc:	xor    ecx,DWORD PTR [rdi+rbp*4]
    ffbf:	mov    ebp,ecx
    ffc1:	mov    ecx,r11d
    ffc4:	movzx  ecx,ch
    ffc7:	movzx  r11d,BYTE PTR [rax+rcx*4]
    ffcc:	mov    ecx,DWORD PTR [rsi+r11*4]
    ffd0:	mov    r11d,DWORD PTR [rdx+0xc]
    ffd4:	xor    ecx,ebp
    ffd6:	movzx  ebp,r11b
    ffda:	mov    DWORD PTR [rdx+0x8],ecx
    ffdd:	mov    ecx,r11d
    ffe0:	shr    ecx,0x18
    ffe3:	movzx  ecx,BYTE PTR [rax+rcx*4]
    ffe7:	movzx  ebp,BYTE PTR [rax+rbp*4]
    ffeb:	mov    ecx,DWORD PTR [r9+rcx*4]
    ffef:	xor    ecx,DWORD PTR [r8+rbp*4]
    fff3:	mov    ebp,r11d
    fff6:	shr    ebp,0x10
    fff9:	movzx  ebp,bpl
    fffd:	movzx  ebp,BYTE PTR [rax+rbp*4]
   10001:	xor    ecx,DWORD PTR [rdi+rbp*4]
   10004:	mov    ebp,ecx
   10006:	mov    ecx,r11d
   10009:	movzx  ecx,ch
   1000c:	movzx  r11d,BYTE PTR [rax+rcx*4]
   10011:	mov    ecx,DWORD PTR [rsi+r11*4]
   10015:	xor    ecx,ebp
   10017:	mov    DWORD PTR [rdx+0xc],ecx
   1001a:	cmp    DWORD PTR [rbx+0xf0],r10d
   10021:	jg     ff00 <g_str_equal@plt+0x2c40>
   10027:	xor    eax,eax
   10029:	add    rsp,0x8
   1002d:	pop    rbx
   1002e:	pop    rbp
   1002f:	ret    
   10030:	push   r15
   10032:	push   r14
   10034:	push   r13
   10036:	push   r12
   10038:	push   rbp
   10039:	push   rbx
   1003a:	mov    rbx,rdx
   1003d:	sub    rsp,0x48
   10041:	test   rsi,rsi
   10044:	mov    QWORD PTR [rsp+0x28],rdx
   10049:	setne  dl
   1004c:	test   rbx,rbx
   1004f:	setne  al
   10052:	mov    QWORD PTR [rsp+0x30],rsi
   10057:	test   dl,al
   10059:	je     1046d <g_str_equal@plt+0x31ad>
   1005f:	test   rdi,rdi
   10062:	je     1046d <g_str_equal@plt+0x31ad>
   10068:	mov    rbx,QWORD PTR [rsp+0x28]
   1006d:	movzx  eax,BYTE PTR [rdi+0x3]
   10071:	lea    r11,[rip+0x45ec8]        # 55f40 <_fini@@Base+0x37ec>
   10078:	movzx  edx,BYTE PTR [rdi]
   1007b:	movzx  ebp,BYTE PTR [rdi+0x7]
   1007f:	lea    r10,[rip+0x452ba]        # 55340 <_fini@@Base+0x2bec>
   10086:	movzx  r12d,BYTE PTR [rdi+0xb]
   1008b:	movzx  esi,BYTE PTR [rdi+0xf]
   1008f:	lea    r9,[rip+0x45aaa]        # 55b40 <_fini@@Base+0x33ec>
   10096:	xor    eax,DWORD PTR [rbx]
   10098:	xor    ebp,DWORD PTR [rbx+0x4]
   1009b:	lea    r8,[rip+0x4569e]        # 55740 <_fini@@Base+0x2fec>
   100a2:	xor    r12d,DWORD PTR [rbx+0x8]
   100a6:	xor    esi,DWORD PTR [rbx+0xc]
   100a9:	shl    edx,0x18
   100ac:	movzx  ecx,BYTE PTR [rdi+0x1]
   100b0:	xor    eax,edx
   100b2:	movzx  edx,BYTE PTR [rdi+0x4]
   100b6:	shl    ecx,0x10
   100b9:	xor    eax,ecx
   100bb:	movzx  ecx,BYTE PTR [rdi+0x2]
   100bf:	shl    edx,0x18
   100c2:	xor    ebp,edx
   100c4:	movzx  edx,BYTE PTR [rdi+0x5]
   100c8:	shl    ecx,0x8
   100cb:	xor    eax,ecx
   100cd:	shl    edx,0x10
   100d0:	xor    ebp,edx
   100d2:	movzx  edx,BYTE PTR [rdi+0x6]
   100d6:	shl    edx,0x8
   100d9:	xor    ebp,edx
   100db:	movzx  edx,BYTE PTR [rdi+0x8]
   100df:	shl    edx,0x18
   100e2:	xor    r12d,edx
   100e5:	movzx  edx,BYTE PTR [rdi+0x9]
   100e9:	shl    edx,0x10
   100ec:	xor    r12d,edx
   100ef:	movzx  edx,BYTE PTR [rdi+0xa]
   100f3:	shl    edx,0x8
   100f6:	xor    r12d,edx
   100f9:	movzx  edx,BYTE PTR [rdi+0xc]
   100fd:	shl    edx,0x18
   10100:	xor    esi,edx
   10102:	movzx  edx,BYTE PTR [rdi+0xd]
   10106:	shl    edx,0x10
   10109:	xor    esi,edx
   1010b:	movzx  edx,BYTE PTR [rdi+0xe]
   1010f:	mov    rdi,rbx
   10112:	mov    ebx,DWORD PTR [rbx+0xf0]
   10118:	mov    ecx,ebx
   1011a:	shl    edx,0x8
   1011d:	mov    DWORD PTR [rsp],ebx
   10120:	sar    ecx,1
   10122:	xor    esi,edx
   10124:	lea    edx,[rcx-0x1]
   10127:	mov    DWORD PTR [rsp+0x3c],edx
   1012b:	add    rdx,0x1
   1012f:	shl    rdx,0x5
   10133:	add    rdx,rdi
   10136:	mov    QWORD PTR [rsp+0x20],rdx
   1013b:	jmp    101b5 <g_str_equal@plt+0x2ef5>
   1013d:	nop    DWORD PTR [rax]
   10140:	mov    eax,DWORD PTR [r11+r12*4]
   10144:	xor    eax,DWORD PTR [r10+r13*4]
   10148:	mov    esi,esi
   1014a:	mov    ecx,DWORD PTR [rsp+0x4]
   1014e:	mov    ebx,ebx
   10150:	xor    eax,r14d
   10153:	xor    eax,DWORD PTR [r9+rbp*4]
   10157:	xor    eax,DWORD PTR [r8+rsi*4]
   1015b:	mov    esi,DWORD PTR [rsp+0x10]
   1015f:	mov    ebp,DWORD PTR [r11+rcx*4]
   10163:	mov    ecx,DWORD PTR [rsp+0x8]
   10167:	xor    ebp,DWORD PTR [r10+rsi*4]
   1016b:	xor    ebp,DWORD PTR [rdi+0x4]
   1016e:	xor    ebp,DWORD PTR [r9+rcx*4]
   10172:	mov    ecx,DWORD PTR [rsp+0xc]
   10176:	xor    ebp,DWORD PTR [r8+rcx*4]
   1017a:	mov    ecx,DWORD PTR [rsp+0x14]
   1017e:	mov    r12d,DWORD PTR [r11+rcx*4]
   10182:	xor    r12d,DWORD PTR [r10+r15*4]
   10186:	mov    r15d,DWORD PTR [rsp+0x18]
   1018b:	mov    ecx,DWORD PTR [rsp+0x1c]
   1018f:	xor    r12d,DWORD PTR [rdi+0x8]
   10193:	xor    r12d,DWORD PTR [r9+r15*4]
   10197:	xor    r12d,DWORD PTR [r8+rcx*4]
   1019b:	mov    ecx,DWORD PTR [rsp+0x38]
   1019f:	mov    esi,DWORD PTR [r11+rcx*4]
   101a3:	mov    ecx,DWORD PTR [rsp]
   101a6:	xor    esi,DWORD PTR [r10+rdx*4]
   101aa:	xor    esi,DWORD PTR [rdi+0xc]
   101ad:	xor    esi,DWORD PTR [r9+rcx*4]
   101b1:	xor    esi,DWORD PTR [r8+rbx*4]
   101b5:	mov    edx,eax
   101b7:	movzx  ebx,sil
   101bb:	movzx  r13d,al
   101bf:	shr    edx,0x18
   101c2:	add    rdi,0x20
   101c6:	mov    ecx,DWORD PTR [r11+rdx*4]
   101ca:	mov    edx,ebp
   101cc:	xor    ecx,DWORD PTR [r10+rbx*4]
   101d0:	shr    edx,0x10
   101d3:	xor    ecx,DWORD PTR [rdi-0x10]
   101d6:	mov    ebx,r12d
   101d9:	movzx  edx,dl
   101dc:	xor    ecx,DWORD PTR [r9+rdx*4]
   101e0:	movzx  edx,bh
   101e3:	xor    ecx,DWORD PTR [r8+rdx*4]
   101e7:	mov    edx,ebp
   101e9:	shr    edx,0x18
   101ec:	mov    ebx,DWORD PTR [r11+rdx*4]
   101f0:	mov    edx,r12d
   101f3:	xor    ebx,DWORD PTR [r10+r13*4]
   101f7:	shr    edx,0x10
   101fa:	xor    ebx,DWORD PTR [rdi-0xc]
   101fd:	movzx  r13d,bpl
   10201:	movzx  edx,dl
   10204:	mov    r14d,ecx
   10207:	movzx  ecx,ah
   1020a:	xor    ebx,DWORD PTR [r9+rdx*4]
   1020e:	mov    edx,esi
   10210:	shr    eax,0x10
   10213:	movzx  edx,dh
   10216:	movzx  eax,al
   10219:	mov    DWORD PTR [rsp],r14d
   1021d:	xor    ebx,DWORD PTR [r8+rdx*4]
   10221:	mov    edx,r12d
   10224:	movzx  r12d,r12b
   10228:	shr    edx,0x18
   1022b:	mov    edx,DWORD PTR [r11+rdx*4]
   1022f:	xor    edx,DWORD PTR [r10+r13*4]
   10233:	mov    r13d,esi
   10236:	shr    r13d,0x10
   1023a:	xor    edx,DWORD PTR [rdi-0x8]
   1023d:	shr    esi,0x18
   10240:	movzx  r13d,r13b
   10244:	mov    esi,DWORD PTR [r11+rsi*4]
   10248:	xor    esi,DWORD PTR [r10+r12*4]
   1024c:	xor    edx,DWORD PTR [r9+r13*4]
   10250:	xor    esi,DWORD PTR [rdi-0x4]
   10253:	mov    r12d,r14d
   10256:	xor    edx,DWORD PTR [r8+rcx*4]
   1025a:	xor    esi,DWORD PTR [r9+rax*4]
   1025e:	mov    ecx,ebp
   10260:	mov    r14d,DWORD PTR [rdi]
   10263:	mov    ebp,ebx
   10265:	shr    r12d,0x18
   10269:	shr    ebp,0x10
   1026c:	movzx  ebp,bpl
   10270:	mov    r15d,edx
   10273:	mov    eax,esi
   10275:	movzx  esi,ch
   10278:	shr    r15d,0x10
   1027c:	xor    eax,DWORD PTR [r8+rsi*4]
   10280:	mov    ecx,ebx
   10282:	movzx  r15d,r15b
   10286:	shr    ecx,0x18
   10289:	movzx  esi,dh
   1028c:	mov    DWORD PTR [rsp+0x8],r15d
   10291:	movzx  r15d,BYTE PTR [rsp]
   10296:	mov    DWORD PTR [rsp+0x4],ecx
   1029a:	movzx  ecx,ah
   1029d:	movzx  r13d,al
   102a1:	mov    DWORD PTR [rsp+0xc],ecx
   102a5:	mov    DWORD PTR [rsp+0x10],r15d
   102aa:	mov    r15d,edx
   102ad:	movzx  edx,dl
   102b0:	shr    r15d,0x18
   102b4:	mov    DWORD PTR [rsp+0x14],r15d
   102b9:	mov    r15d,eax
   102bc:	shr    eax,0x18
   102bf:	shr    r15d,0x10
   102c3:	mov    DWORD PTR [rsp+0x38],eax
   102c7:	movzx  ecx,r15b
   102cb:	movzx  r15d,bl
   102cf:	movzx  ebx,bh
   102d2:	mov    DWORD PTR [rsp+0x18],ecx
   102d6:	mov    ecx,DWORD PTR [rsp]
   102d9:	movzx  ecx,ch
   102dc:	mov    DWORD PTR [rsp+0x1c],ecx
   102e0:	mov    ecx,DWORD PTR [rsp]
   102e3:	shr    ecx,0x10
   102e6:	cmp    rdi,QWORD PTR [rsp+0x20]
   102eb:	movzx  eax,cl
   102ee:	mov    DWORD PTR [rsp],eax
   102f1:	jne    10140 <g_str_equal@plt+0x2e80>
   102f7:	mov    ecx,DWORD PTR [rsp+0x3c]
   102fb:	mov    r8,QWORD PTR [rsp+0x28]
   10300:	lea    rdi,[rip+0x44c39]        # 54f40 <_fini@@Base+0x27ec>
   10307:	mov    eax,r14d
   1030a:	mov    r14d,esi
   1030d:	mov    r9,QWORD PTR [rsp+0x30]
   10312:	movzx  esi,BYTE PTR [rdi+r13*4]
   10317:	mov    ebx,ebx
   10319:	add    rcx,0x1
   1031d:	shl    rcx,0x5
   10321:	add    r8,rcx
   10324:	mov    ecx,DWORD PTR [rdi+r14*4]
   10328:	and    ecx,0xff00
   1032e:	or     ecx,esi
   10330:	mov    esi,DWORD PTR [rdi+rbp*4]
   10333:	xor    eax,ecx
   10335:	mov    ecx,DWORD PTR [rdi+r12*4]
   10339:	and    esi,0xff0000
   1033f:	and    ecx,0xff000000
   10345:	or     ecx,esi
   10347:	xor    eax,ecx
   10349:	mov    ecx,eax
   1034b:	mov    BYTE PTR [r9+0x3],al
   1034f:	shr    ecx,0x18
   10352:	mov    BYTE PTR [r9],cl
   10355:	mov    ecx,eax
   10357:	shr    ecx,0x10
   1035a:	mov    BYTE PTR [r9+0x1],cl
   1035e:	movzx  ecx,ah
   10361:	mov    eax,DWORD PTR [rsp+0xc]
   10365:	mov    BYTE PTR [r9+0x2],cl
   10369:	mov    ecx,DWORD PTR [rsp+0x4]
   1036d:	mov    esi,DWORD PTR [rdi+rax*4]
   10370:	mov    eax,DWORD PTR [rsp+0x10]
   10374:	and    esi,0xff00
   1037a:	movzx  eax,BYTE PTR [rdi+rax*4]
   1037e:	or     esi,eax
   10380:	mov    eax,DWORD PTR [rdi+rcx*4]
   10383:	xor    esi,DWORD PTR [r8+0x4]
   10387:	and    eax,0xff000000
   1038c:	mov    ecx,eax
   1038e:	mov    eax,DWORD PTR [rsp+0x8]
   10392:	mov    eax,DWORD PTR [rdi+rax*4]
   10395:	and    eax,0xff0000
   1039a:	or     eax,ecx
   1039c:	movzx  ecx,BYTE PTR [rdi+r15*4]
   103a1:	mov    r15d,DWORD PTR [rsp+0x18]
   103a6:	xor    esi,eax
   103a8:	mov    eax,esi
   103aa:	mov    BYTE PTR [r9+0x7],sil
   103ae:	shr    eax,0x18
   103b1:	mov    BYTE PTR [r9+0x4],al
   103b5:	mov    eax,esi
   103b7:	shr    eax,0x10
   103ba:	mov    BYTE PTR [r9+0x5],al
   103be:	mov    eax,esi
   103c0:	mov    esi,DWORD PTR [rdi+r15*4]
   103c4:	movzx  eax,ah
   103c7:	mov    BYTE PTR [r9+0x6],al
   103cb:	mov    eax,DWORD PTR [rsp+0x1c]
   103cf:	and    esi,0xff0000
   103d5:	mov    eax,DWORD PTR [rdi+rax*4]
   103d8:	and    eax,0xff00
   103dd:	or     eax,ecx
   103df:	xor    eax,DWORD PTR [r8+0x8]
   103e3:	mov    ecx,eax
   103e5:	mov    eax,DWORD PTR [rsp+0x14]
   103e9:	mov    eax,DWORD PTR [rdi+rax*4]
   103ec:	and    eax,0xff000000
   103f1:	or     eax,esi
   103f3:	xor    eax,ecx
   103f5:	mov    ecx,eax
   103f7:	shr    ecx,0x18
   103fa:	mov    BYTE PTR [r9+0x8],cl
   103fe:	mov    ecx,eax
   10400:	mov    BYTE PTR [r9+0xb],al
   10404:	shr    ecx,0x10
   10407:	movzx  edx,BYTE PTR [rdi+rdx*4]
   1040b:	mov    esi,DWORD PTR [rsp+0x38]
   1040f:	mov    BYTE PTR [r9+0x9],cl
   10413:	movzx  ecx,ah
   10416:	mov    eax,DWORD PTR [rdi+rbx*4]
   10419:	mov    BYTE PTR [r9+0xa],cl
   1041d:	mov    ecx,DWORD PTR [rsp]
   10420:	and    eax,0xff00
   10425:	or     eax,edx
   10427:	mov    edx,DWORD PTR [rdi+rsi*4]
   1042a:	xor    eax,DWORD PTR [r8+0xc]
   1042e:	mov    ecx,DWORD PTR [rdi+rcx*4]
   10431:	and    edx,0xff000000
   10437:	and    ecx,0xff0000
   1043d:	or     edx,ecx
   1043f:	xor    eax,edx
   10441:	mov    edx,eax
   10443:	movzx  ebx,ah
   10446:	mov    BYTE PTR [r9+0xf],al
   1044a:	shr    edx,0x18
   1044d:	mov    BYTE PTR [r9+0xe],bl
   10451:	mov    BYTE PTR [r9+0xc],dl
   10455:	mov    edx,eax
   10457:	shr    edx,0x10
   1045a:	mov    BYTE PTR [r9+0xd],dl
   1045e:	add    rsp,0x48
   10462:	pop    rbx
   10463:	pop    rbp
   10464:	pop    r12
   10466:	pop    r13
   10468:	pop    r14
   1046a:	pop    r15
   1046c:	ret    
   1046d:	lea    rcx,[rip+0x4366c]        # 53ae0 <_fini@@Base+0x138c>
   10474:	lea    rsi,[rip+0x435b5]        # 53a30 <_fini@@Base+0x12dc>
   1047b:	lea    rdi,[rip+0x435e4]        # 53a66 <_fini@@Base+0x1312>
   10482:	mov    edx,0x4d1
   10487:	call   c390 <__assert_fail@plt>
   1048c:	nop    DWORD PTR [rax+0x0]
   10490:	push   r15
   10492:	push   r14
   10494:	push   r13
   10496:	push   r12
   10498:	push   rbp
   10499:	push   rbx
   1049a:	mov    rbx,rdx
   1049d:	sub    rsp,0x58
   104a1:	test   rsi,rsi
   104a4:	mov    QWORD PTR [rsp+0x38],rdx
   104a9:	setne  dl
   104ac:	test   rbx,rbx
   104af:	setne  al
   104b2:	mov    QWORD PTR [rsp+0x40],rsi
   104b7:	test   dl,al
   104b9:	je     108d5 <g_str_equal@plt+0x3615>
   104bf:	test   rdi,rdi
   104c2:	je     108d5 <g_str_equal@plt+0x3615>
   104c8:	mov    rbx,QWORD PTR [rsp+0x38]
   104cd:	movzx  ecx,BYTE PTR [rdi+0x3]
   104d1:	lea    r11,[rip+0x44668]        # 54b40 <_fini@@Base+0x23ec>
   104d8:	movzx  eax,BYTE PTR [rdi]
   104db:	movzx  ebp,BYTE PTR [rdi+0x7]
   104df:	lea    r10,[rip+0x43a5a]        # 53f40 <_fini@@Base+0x17ec>
   104e6:	movzx  r12d,BYTE PTR [rdi+0xb]
   104eb:	movzx  esi,BYTE PTR [rdi+0xf]
   104ef:	lea    r9,[rip+0x4424a]        # 54740 <_fini@@Base+0x1fec>
   104f6:	xor    ecx,DWORD PTR [rbx]
   104f8:	xor    ebp,DWORD PTR [rbx+0x4]
   104fb:	lea    r8,[rip+0x43e3e]        # 54340 <_fini@@Base+0x1bec>
   10502:	xor    r12d,DWORD PTR [rbx+0x8]
   10506:	xor    esi,DWORD PTR [rbx+0xc]
   10509:	shl    eax,0x18
   1050c:	movzx  edx,BYTE PTR [rdi+0x1]
   10510:	xor    ecx,eax
   10512:	movzx  eax,BYTE PTR [rdi+0x4]
   10516:	shl    edx,0x10
   10519:	xor    ecx,edx
   1051b:	movzx  edx,BYTE PTR [rdi+0x2]
   1051f:	shl    eax,0x18
   10522:	xor    ebp,eax
   10524:	movzx  eax,BYTE PTR [rdi+0x5]
   10528:	shl    edx,0x8
   1052b:	xor    ecx,edx
   1052d:	shl    eax,0x10
   10530:	xor    ebp,eax
   10532:	movzx  eax,BYTE PTR [rdi+0x6]
   10536:	shl    eax,0x8
   10539:	xor    ebp,eax
   1053b:	movzx  eax,BYTE PTR [rdi+0x8]
   1053f:	shl    eax,0x18
   10542:	xor    r12d,eax
   10545:	movzx  eax,BYTE PTR [rdi+0x9]
   10549:	shl    eax,0x10
   1054c:	xor    r12d,eax
   1054f:	movzx  eax,BYTE PTR [rdi+0xa]
   10553:	shl    eax,0x8
   10556:	xor    r12d,eax
   10559:	movzx  eax,BYTE PTR [rdi+0xc]
   1055d:	shl    eax,0x18
   10560:	xor    esi,eax
   10562:	movzx  eax,BYTE PTR [rdi+0xd]
   10566:	shl    eax,0x10
   10569:	xor    esi,eax
   1056b:	movzx  eax,BYTE PTR [rdi+0xe]
   1056f:	mov    rdi,rbx
   10572:	shl    eax,0x8
   10575:	xor    esi,eax
   10577:	mov    eax,DWORD PTR [rbx+0xf0]
   1057d:	mov    edx,eax
   1057f:	mov    DWORD PTR [rsp+0xc],eax
   10583:	sar    edx,1
   10585:	lea    eax,[rdx-0x1]
   10588:	mov    DWORD PTR [rsp+0x4c],eax
   1058c:	add    rax,0x1
   10590:	shl    rax,0x5
   10594:	add    rax,rbx
   10597:	mov    QWORD PTR [rsp+0x30],rax
   1059c:	jmp    1061a <g_str_equal@plt+0x335a>
   1059e:	xchg   ax,ax
   105a0:	mov    edx,DWORD PTR [r11+r12*4]
   105a4:	xor    edx,DWORD PTR [r10+r13*4]
   105a8:	mov    esi,esi
   105aa:	mov    ebx,ebx
   105ac:	xor    edx,r14d
   105af:	xor    edx,DWORD PTR [r9+rbp*4]
   105b3:	mov    ebp,DWORD PTR [r8+rsi*4]
   105b7:	mov    esi,DWORD PTR [rsp+0x1c]
   105bb:	xor    ebp,edx
   105bd:	mov    edx,DWORD PTR [rsp+0x10]
   105c1:	mov    ecx,ebp
   105c3:	mov    ebp,DWORD PTR [r11+rdx*4]
   105c7:	mov    edx,DWORD PTR [rsp+0x14]
   105cb:	xor    ebp,DWORD PTR [r10+rsi*4]
   105cf:	xor    ebp,DWORD PTR [rdi+0x4]
   105d2:	xor    ebp,DWORD PTR [r9+rdx*4]
   105d6:	mov    edx,DWORD PTR [rsp+0x18]
   105da:	xor    ebp,DWORD PTR [r8+rdx*4]
   105de:	mov    edx,DWORD PTR [rsp+0x20]
   105e2:	mov    r12d,DWORD PTR [r11+rdx*4]
   105e6:	xor    r12d,DWORD PTR [r10+r15*4]
   105ea:	mov    r15d,DWORD PTR [rsp+0x24]
   105ef:	mov    edx,DWORD PTR [rsp+0x28]
   105f3:	xor    r12d,DWORD PTR [rdi+0x8]
   105f7:	xor    r12d,DWORD PTR [r9+r15*4]
   105fb:	xor    r12d,DWORD PTR [r8+rdx*4]
   105ff:	mov    edx,DWORD PTR [rsp+0x2c]
   10603:	mov    esi,DWORD PTR [r11+rdx*4]
   10607:	mov    edx,DWORD PTR [rsp+0x48]
   1060b:	xor    esi,DWORD PTR [r10+rax*4]
   1060f:	xor    esi,DWORD PTR [rdi+0xc]
   10612:	xor    esi,DWORD PTR [r9+rdx*4]
   10616:	xor    esi,DWORD PTR [r8+rbx*4]
   1061a:	mov    eax,ecx
   1061c:	movzx  edx,bpl
   10620:	mov    ebx,r12d
   10623:	shr    eax,0x18
   10626:	movzx  r13d,r12b
   1062a:	movzx  r14d,cl
   1062e:	mov    eax,DWORD PTR [r11+rax*4]
   10632:	xor    eax,DWORD PTR [r10+rdx*4]
   10636:	mov    edx,esi
   10638:	shr    edx,0x10
   1063b:	xor    eax,DWORD PTR [rdi+0x10]
   1063e:	add    rdi,0x20
   10642:	movzx  edx,dl
   10645:	xor    eax,DWORD PTR [r9+rdx*4]
   10649:	movzx  edx,bh
   1064c:	xor    eax,DWORD PTR [r8+rdx*4]
   10650:	mov    edx,ebp
   10652:	shr    edx,0x18
   10655:	mov    ebx,DWORD PTR [r11+rdx*4]
   10659:	mov    edx,ecx
   1065b:	xor    ebx,DWORD PTR [r10+r13*4]
   1065f:	shr    edx,0x10
   10662:	xor    ebx,DWORD PTR [rdi-0xc]
   10665:	movzx  r13d,sil
   10669:	movzx  edx,dl
   1066c:	mov    r15d,eax
   1066f:	movzx  eax,ch
   10672:	xor    ebx,DWORD PTR [r9+rdx*4]
   10676:	mov    edx,esi
   10678:	shr    esi,0x18
   1067b:	movzx  edx,dh
   1067e:	mov    ecx,DWORD PTR [r11+rsi*4]
   10682:	xor    ecx,DWORD PTR [r10+r14*4]
   10686:	xor    ebx,DWORD PTR [r8+rdx*4]
   1068a:	mov    edx,r12d
   1068d:	shr    r12d,0x10
   10691:	shr    edx,0x18
   10694:	xor    ecx,DWORD PTR [rdi-0x4]
   10697:	movzx  r12d,r12b
   1069b:	mov    edx,DWORD PTR [r11+rdx*4]
   1069f:	xor    edx,DWORD PTR [r10+r13*4]
   106a3:	mov    r13d,ebp
   106a6:	shr    r13d,0x10
   106aa:	xor    edx,DWORD PTR [rdi-0x8]
   106ad:	xor    ecx,DWORD PTR [r9+r12*4]
   106b1:	movzx  r13d,r13b
   106b5:	mov    DWORD PTR [rsp+0xc],r15d
   106ba:	mov    r12d,r15d
   106bd:	xor    edx,DWORD PTR [r9+r13*4]
   106c1:	shr    r15d,0x10
   106c5:	shr    r12d,0x18
   106c9:	xor    edx,DWORD PTR [r8+rax*4]
   106cd:	mov    eax,ebp
   106cf:	movzx  r15d,r15b
   106d3:	movzx  esi,ah
   106d6:	mov    DWORD PTR [rsp+0x14],r15d
   106db:	mov    eax,ebx
   106dd:	xor    ecx,DWORD PTR [r8+rsi*4]
   106e1:	shr    eax,0x18
   106e4:	mov    r14d,DWORD PTR [rdi]
   106e7:	mov    DWORD PTR [rsp+0x10],eax
   106eb:	movzx  r13d,bl
   106ef:	movzx  r15d,dl
   106f3:	movzx  esi,dh
   106f6:	mov    DWORD PTR [rsp+0x1c],r15d
   106fb:	mov    r15d,edx
   106fe:	shr    r15d,0x18
   10702:	movzx  eax,ch
   10705:	mov    ebp,ecx
   10707:	mov    DWORD PTR [rsp+0x20],r15d
   1070c:	mov    r15d,ebx
   1070f:	mov    DWORD PTR [rsp+0x18],eax
   10713:	shr    r15d,0x10
   10717:	shr    ebp,0x10
   1071a:	movzx  ebx,bh
   1071d:	movzx  eax,r15b
   10721:	movzx  r15d,cl
   10725:	shr    ecx,0x18
   10728:	mov    DWORD PTR [rsp+0x24],eax
   1072c:	mov    eax,DWORD PTR [rsp+0xc]
   10730:	shr    edx,0x10
   10733:	mov    DWORD PTR [rsp+0x2c],ecx
   10737:	movzx  ecx,dl
   1073a:	movzx  ebp,bpl
   1073e:	mov    DWORD PTR [rsp+0x48],ecx
   10742:	movzx  eax,ah
   10745:	mov    DWORD PTR [rsp+0x28],eax
   10749:	movzx  eax,BYTE PTR [rsp+0xc]
   1074e:	cmp    rdi,QWORD PTR [rsp+0x30]
   10753:	jne    105a0 <g_str_equal@plt+0x32e0>
   10759:	mov    edx,DWORD PTR [rsp+0x4c]
   1075d:	mov    r8,QWORD PTR [rsp+0x38]
   10762:	lea    rdi,[rip+0x433d7]        # 53b40 <_fini@@Base+0x13ec>
   10769:	mov    ecx,r14d
   1076c:	mov    r14d,esi
   1076f:	mov    ebx,ebx
   10771:	movzx  esi,BYTE PTR [rdi+r13*4]
   10776:	add    rdx,0x1
   1077a:	shl    rdx,0x5
   1077e:	add    r8,rdx
   10781:	mov    edx,DWORD PTR [rdi+r14*4]
   10785:	mov    r14,QWORD PTR [rsp+0x40]
   1078a:	and    edx,0xff00
   10790:	or     edx,esi
   10792:	mov    esi,DWORD PTR [rdi+rbp*4]
   10795:	xor    ecx,edx
   10797:	mov    edx,DWORD PTR [rdi+r12*4]
   1079b:	and    esi,0xff0000
   107a1:	and    edx,0xff000000
   107a7:	or     edx,esi
   107a9:	xor    ecx,edx
   107ab:	mov    edx,ecx
   107ad:	mov    BYTE PTR [r14+0x3],cl
   107b1:	shr    edx,0x18
   107b4:	mov    BYTE PTR [r14],dl
   107b7:	mov    edx,ecx
   107b9:	shr    edx,0x10
   107bc:	mov    BYTE PTR [r14+0x1],dl
   107c0:	movzx  edx,ch
   107c3:	mov    BYTE PTR [r14+0x2],dl
   107c7:	mov    edx,DWORD PTR [rsp+0x18]
   107cb:	mov    ecx,DWORD PTR [rdi+rdx*4]
   107ce:	mov    edx,DWORD PTR [rsp+0x1c]
   107d2:	and    ecx,0xff00
   107d8:	movzx  edx,BYTE PTR [rdi+rdx*4]
   107dc:	or     ecx,edx
   107de:	mov    edx,DWORD PTR [rsp+0x10]
   107e2:	xor    ecx,DWORD PTR [r8+0x4]
   107e6:	mov    edx,DWORD PTR [rdi+rdx*4]
   107e9:	mov    esi,edx
   107eb:	mov    edx,DWORD PTR [rsp+0x14]
   107ef:	and    esi,0xff000000
   107f5:	mov    edx,DWORD PTR [rdi+rdx*4]
   107f8:	and    edx,0xff0000
   107fe:	or     edx,esi
   10800:	xor    ecx,edx
   10802:	mov    edx,ecx
   10804:	mov    BYTE PTR [r14+0x7],cl
   10808:	shr    edx,0x18
   1080b:	mov    BYTE PTR [r14+0x4],dl
   1080f:	mov    edx,ecx
   10811:	shr    edx,0x10
   10814:	mov    BYTE PTR [r14+0x5],dl
   10818:	movzx  edx,ch
   1081b:	movzx  ecx,BYTE PTR [rdi+r15*4]
   10820:	mov    BYTE PTR [r14+0x6],dl
   10824:	mov    edx,DWORD PTR [rsp+0x28]
   10828:	mov    r15d,DWORD PTR [rsp+0x24]
   1082d:	mov    edx,DWORD PTR [rdi+rdx*4]
   10830:	mov    esi,DWORD PTR [rdi+r15*4]
   10834:	and    edx,0xff00
   1083a:	or     edx,ecx
   1083c:	mov    ecx,DWORD PTR [r8+0x8]
   10840:	and    esi,0xff0000
   10846:	xor    ecx,edx
   10848:	mov    edx,DWORD PTR [rsp+0x20]
   1084c:	mov    edx,DWORD PTR [rdi+rdx*4]
   1084f:	and    edx,0xff000000
   10855:	or     edx,esi
   10857:	xor    edx,ecx
   10859:	mov    ecx,edx
   1085b:	shr    ecx,0x18
   1085e:	mov    BYTE PTR [r14+0x8],cl
   10862:	mov    ecx,edx
   10864:	mov    BYTE PTR [r14+0xb],dl
   10868:	shr    ecx,0x10
   1086b:	movzx  eax,BYTE PTR [rdi+rax*4]
   1086f:	mov    esi,DWORD PTR [rsp+0x2c]
   10873:	mov    BYTE PTR [r14+0x9],cl
   10877:	movzx  ecx,dh
   1087a:	mov    edx,DWORD PTR [rdi+rbx*4]
   1087d:	mov    BYTE PTR [r14+0xa],cl
   10881:	and    edx,0xff00
   10887:	or     eax,edx
   10889:	mov    edx,DWORD PTR [rdi+rsi*4]
   1088c:	xor    eax,DWORD PTR [r8+0xc]
   10890:	mov    ecx,edx
   10892:	mov    edx,DWORD PTR [rsp+0x48]
   10896:	and    ecx,0xff000000
   1089c:	mov    edx,DWORD PTR [rdi+rdx*4]
   1089f:	and    edx,0xff0000
   108a5:	or     edx,ecx
   108a7:	xor    eax,edx
   108a9:	mov    edx,eax
   108ab:	movzx  ebx,ah
   108ae:	mov    BYTE PTR [r14+0xf],al
   108b2:	shr    edx,0x18
   108b5:	mov    BYTE PTR [r14+0xe],bl
   108b9:	mov    BYTE PTR [r14+0xc],dl
   108bd:	mov    edx,eax
   108bf:	shr    edx,0x10
   108c2:	mov    BYTE PTR [r14+0xd],dl
   108c6:	add    rsp,0x58
   108ca:	pop    rbx
   108cb:	pop    rbp
   108cc:	pop    r12
   108ce:	pop    r13
   108d0:	pop    r14
   108d2:	pop    r15
   108d4:	ret    
   108d5:	lea    rcx,[rip+0x431e4]        # 53ac0 <_fini@@Base+0x136c>
   108dc:	lea    rsi,[rip+0x4314d]        # 53a30 <_fini@@Base+0x12dc>
   108e3:	lea    rdi,[rip+0x4317c]        # 53a66 <_fini@@Base+0x1312>
   108ea:	mov    edx,0x590
   108ef:	call   c390 <__assert_fail@plt>
   108f4:	xchg   ax,ax
   108f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   10900:	push   r15
   10902:	push   r14
   10904:	push   r13
   10906:	push   r12
   10908:	push   rbp
   10909:	push   rbx
   1090a:	sub    rsp,0x48
   1090e:	mov    rax,QWORD PTR fs:0x28
   10917:	mov    QWORD PTR [rsp+0x38],rax
   1091c:	xor    eax,eax
   1091e:	test   rdi,rdi
   10921:	je     10b43 <g_str_equal@plt+0x3883>
   10927:	test   rsi,rsi
   1092a:	mov    r15,rsi
   1092d:	je     10b43 <g_str_equal@plt+0x3883>
   10933:	test   rcx,rcx
   10936:	mov    rbx,rcx
   10939:	je     10b43 <g_str_equal@plt+0x3883>
   1093f:	test   r8,r8
   10942:	mov    r14,r8
   10945:	je     10b43 <g_str_equal@plt+0x3883>
   1094b:	test   r9d,r9d
   1094e:	mov    r12,rdi
   10951:	mov    rbp,rdx
   10954:	jne    10a00 <g_str_equal@plt+0x3740>
   1095a:	cmp    rdx,0xf
   1095e:	jbe    109d4 <g_str_equal@plt+0x3714>
   10960:	lea    rax,[rdx-0x10]
   10964:	mov    r13,rdi
   10967:	and    rax,0xfffffffffffffff0
   1096b:	add    rax,0x10
   1096f:	mov    QWORD PTR [rsp+0x10],rax
   10974:	add    rax,rsi
   10977:	mov    QWORD PTR [rsp+0x8],rax
   1097c:	nop    DWORD PTR [rax+0x0]
   10980:	movdqu xmm0,XMMWORD PTR [r13+0x0]
   10986:	mov    rdx,rbx
   10989:	mov    rsi,r15
   1098c:	mov    rdi,r13
   1098f:	movaps XMMWORD PTR [rsp+0x20],xmm0
   10994:	call   10490 <g_str_equal@plt+0x31d0>
   10999:	xor    eax,eax
   1099b:	nop    DWORD PTR [rax+rax*1+0x0]
   109a0:	movzx  edx,BYTE PTR [r14+rax*1]
   109a5:	xor    BYTE PTR [r15+rax*1],dl
   109a9:	add    rax,0x1
   109ad:	cmp    rax,0x10
   109b1:	jne    109a0 <g_str_equal@plt+0x36e0>
   109b3:	add    r13,0x10
   109b7:	add    r15,0x10
   109bb:	cmp    r15,QWORD PTR [rsp+0x8]
   109c0:	movdqa xmm0,XMMWORD PTR [rsp+0x20]
   109c6:	movups XMMWORD PTR [r14],xmm0
   109ca:	jne    10980 <g_str_equal@plt+0x36c0>
   109cc:	and    ebp,0xf
   109cf:	add    r12,QWORD PTR [rsp+0x10]
   109d4:	test   rbp,rbp
   109d7:	jne    10af5 <g_str_equal@plt+0x3835>
   109dd:	mov    rax,QWORD PTR [rsp+0x38]
   109e2:	xor    rax,QWORD PTR fs:0x28
   109eb:	jne    10b3e <g_str_equal@plt+0x387e>
   109f1:	add    rsp,0x48
   109f5:	pop    rbx
   109f6:	pop    rbp
   109f7:	pop    r12
   109f9:	pop    r13
   109fb:	pop    r14
   109fd:	pop    r15
   109ff:	ret    
   10a00:	cmp    rdx,0xf
   10a04:	jbe    10a89 <g_str_equal@plt+0x37c9>
   10a0a:	lea    rax,[rdx-0x10]
   10a0e:	lea    r13,[rsp+0x20]
   10a13:	mov    r9,rdi
   10a16:	and    rax,0xfffffffffffffff0
   10a1a:	add    rax,0x10
   10a1e:	mov    QWORD PTR [rsp+0x18],rax
   10a23:	add    rax,rsi
   10a26:	mov    QWORD PTR [rsp+0x10],rax
   10a2b:	nop    DWORD PTR [rax+rax*1+0x0]
   10a30:	xor    eax,eax
   10a32:	nop    WORD PTR [rax+rax*1+0x0]
   10a38:	movzx  edx,BYTE PTR [r9+rax*1]
   10a3d:	xor    dl,BYTE PTR [r14+rax*1]
   10a41:	mov    BYTE PTR [r13+rax*1+0x0],dl
   10a46:	add    rax,0x1
   10a4a:	cmp    rax,0x10
   10a4e:	jne    10a38 <g_str_equal@plt+0x3778>
   10a50:	mov    rsi,r15
   10a53:	mov    rdx,rbx
   10a56:	mov    rdi,r13
   10a59:	mov    QWORD PTR [rsp+0x8],r9
   10a5e:	add    r15,0x10
   10a62:	call   10030 <g_str_equal@plt+0x2d70>
   10a67:	mov    r9,QWORD PTR [rsp+0x8]
   10a6c:	movdqu xmm0,XMMWORD PTR [r15-0x10]
   10a72:	add    r9,0x10
   10a76:	cmp    r15,QWORD PTR [rsp+0x10]
   10a7b:	movups XMMWORD PTR [r14],xmm0
   10a7f:	jne    10a30 <g_str_equal@plt+0x3770>
   10a81:	add    r12,QWORD PTR [rsp+0x18]
   10a86:	and    ebp,0xf
   10a89:	test   rbp,rbp
   10a8c:	je     109dd <g_str_equal@plt+0x371d>
   10a92:	lea    r13,[rsp+0x20]
   10a97:	xor    eax,eax
   10a99:	nop    DWORD PTR [rax+0x0]
   10aa0:	movzx  edx,BYTE PTR [r12+rax*1]
   10aa5:	xor    dl,BYTE PTR [r14+rax*1]
   10aa9:	mov    BYTE PTR [r13+rax*1+0x0],dl
   10aae:	add    rax,0x1
   10ab2:	cmp    rax,rbp
   10ab5:	jne    10aa0 <g_str_equal@plt+0x37e0>
   10ab7:	nop    WORD PTR [rax+rax*1+0x0]
   10ac0:	movzx  edx,BYTE PTR [r14+rax*1]
   10ac5:	mov    BYTE PTR [r13+rax*1+0x0],dl
   10aca:	add    rax,0x1
   10ace:	cmp    rax,0x10
   10ad2:	jne    10ac0 <g_str_equal@plt+0x3800>
   10ad4:	mov    rdx,rbx
   10ad7:	mov    rsi,r13
   10ada:	mov    rdi,r13
   10add:	call   10030 <g_str_equal@plt+0x2d70>
   10ae2:	movdqa xmm0,XMMWORD PTR [rsp+0x20]
   10ae8:	movups XMMWORD PTR [r15],xmm0
   10aec:	movups XMMWORD PTR [r14],xmm0
   10af0:	jmp    109dd <g_str_equal@plt+0x371d>
   10af5:	lea    r13,[rsp+0x20]
   10afa:	movdqu xmm0,XMMWORD PTR [r12]
   10b00:	mov    rdx,rbx
   10b03:	mov    rsi,r13
   10b06:	mov    rdi,r13
   10b09:	movaps XMMWORD PTR [rsp+0x20],xmm0
   10b0e:	call   10490 <g_str_equal@plt+0x31d0>
   10b13:	xor    eax,eax
   10b15:	nop    DWORD PTR [rax]
   10b18:	movzx  edx,BYTE PTR [r13+rax*1+0x0]
   10b1e:	xor    dl,BYTE PTR [r14+rax*1]
   10b22:	mov    BYTE PTR [r15+rax*1],dl
   10b26:	add    rax,0x1
   10b2a:	cmp    rax,rbp
   10b2d:	jne    10b18 <g_str_equal@plt+0x3858>
   10b2f:	movdqa xmm0,XMMWORD PTR [rsp+0x20]
   10b35:	movups XMMWORD PTR [r14],xmm0
   10b39:	jmp    109dd <g_str_equal@plt+0x371d>
   10b3e:	call   cd30 <__stack_chk_fail@plt>
   10b43:	lea    rcx,[rip+0x42f56]        # 53aa0 <_fini@@Base+0x134c>
   10b4a:	lea    rsi,[rip+0x42edf]        # 53a30 <_fini@@Base+0x12dc>
   10b51:	lea    rdi,[rip+0x42f1f]        # 53a77 <_fini@@Base+0x1323>
   10b58:	mov    edx,0x64d
   10b5d:	call   c390 <__assert_fail@plt>
   10b62:	nop    WORD PTR cs:[rax+rax*1+0x0]
   10b6c:	nop    DWORD PTR [rax+0x0]
   10b70:	push   r13
   10b72:	push   r12
   10b74:	xor    edx,edx
   10b76:	push   rbp
   10b77:	push   rbx
   10b78:	mov    ecx,0x1
   10b7d:	lea    r10,[rip+0x47a1c]        # 585a0 <_fini@@Base+0x5e4c>
   10b84:	lea    r9,[rip+0x47b15]        # 586a0 <_fini@@Base+0x5f4c>
   10b8b:	sub    rsp,0x288
   10b92:	mov    rax,QWORD PTR fs:0x28
   10b9b:	mov    QWORD PTR [rsp+0x278],rax
   10ba3:	xor    eax,eax
   10ba5:	lea    r8,[rsp+0x200]
   10bad:	mov    eax,0x38
   10bb2:	jmp    10bc8 <g_str_equal@plt+0x3908>
   10bb4:	nop    DWORD PTR [rax+0x0]
   10bb8:	movzx  eax,BYTE PTR [r10+rdx*1]
   10bbd:	mov    rcx,rax
   10bc0:	and    ecx,0x7
   10bc3:	movzx  ecx,WORD PTR [r9+rcx*2]
   10bc8:	shr    rax,0x3
   10bcc:	and    eax,0x1f
   10bcf:	movzx  eax,BYTE PTR [rdi+rax*1]
   10bd3:	test   eax,ecx
   10bd5:	setne  BYTE PTR [r8+rdx*1]
   10bda:	add    rdx,0x1
   10bde:	cmp    rdx,0x38
   10be2:	jne    10bb8 <g_str_equal@plt+0x38f8>
   10be4:	lea    r10,[rip+0x479a6]        # 58591 <_fini@@Base+0x5e3d>
   10beb:	lea    r11,[rsp+0x240]
   10bf3:	lea    r8,[rip+0x47aa6]        # 586a0 <_fini@@Base+0x5f4c>
   10bfa:	xor    r9d,r9d
   10bfd:	mov    r13d,0x1
   10c03:	mov    ebx,0x1e
   10c08:	lea    rbp,[r10+0xf]
   10c0c:	nop    DWORD PTR [rax+0x0]
   10c10:	mov    ecx,ebx
   10c12:	mov    r12,r11
   10c15:	lea    edx,[r13-0x1c]
   10c19:	sub    ecx,r9d
   10c1c:	cmp    esi,0x1
   10c1f:	cmovne ecx,r9d
   10c23:	lea    edi,[rcx+0x1]
   10c26:	movsxd rcx,ecx
   10c29:	movsxd rdi,edi
   10c2c:	mov    QWORD PTR [rsp+rdi*8],0x0
   10c34:	mov    QWORD PTR [rsp+rcx*8],0x0
   10c3c:	jmp    10c5d <g_str_equal@plt+0x399d>
   10c3e:	xchg   ax,ax
   10c40:	cdqe   
   10c42:	add    r12,0x1
   10c46:	movzx  eax,BYTE PTR [rsp+rax*1+0x200]
   10c4e:	mov    BYTE PTR [r12-0x1],al
   10c53:	lea    eax,[rdx+0x1]
   10c56:	cmp    r13d,eax
   10c59:	je     10c81 <g_str_equal@plt+0x39c1>
   10c5b:	mov    edx,eax
   10c5d:	lea    eax,[rdx+0x1c]
   10c60:	cmp    eax,0x1b
   10c63:	jle    10c40 <g_str_equal@plt+0x3980>
   10c65:	movsxd rax,edx
   10c68:	add    r12,0x1
   10c6c:	movzx  eax,BYTE PTR [rsp+rax*1+0x200]
   10c74:	mov    BYTE PTR [r12-0x1],al
   10c79:	lea    eax,[rdx+0x1]
   10c7c:	cmp    r13d,eax
   10c7f:	jne    10c5b <g_str_equal@plt+0x399b>
   10c81:	lea    eax,[rdx+0x1d]
   10c84:	lea    r12,[r11+0x1c]
   10c88:	add    edx,0x39
   10c8b:	jmp    10cac <g_str_equal@plt+0x39ec>
   10c8d:	nop    DWORD PTR [rax]
   10c90:	movsxd r13,eax
   10c93:	add    eax,0x1
   10c96:	add    r12,0x1
   10c9a:	movzx  r13d,BYTE PTR [rsp+r13*1+0x200]
   10ca3:	mov    BYTE PTR [r12-0x1],r13b
   10ca8:	cmp    edx,eax
   10caa:	je     10cd1 <g_str_equal@plt+0x3a11>
   10cac:	cmp    eax,0x37
   10caf:	jle    10c90 <g_str_equal@plt+0x39d0>
   10cb1:	lea    r13d,[rax-0x1c]
   10cb5:	add    eax,0x1
   10cb8:	add    r12,0x1
   10cbc:	movsxd r13,r13d
   10cbf:	movzx  r13d,BYTE PTR [rsp+r13*1+0x200]
   10cc8:	mov    BYTE PTR [r12-0x1],r13b
   10ccd:	cmp    edx,eax
   10ccf:	jne    10cac <g_str_equal@plt+0x39ec>
   10cd1:	lea    rax,[rip+0x47908]        # 585e0 <_fini@@Base+0x5e8c>
   10cd8:	lea    r12,[rip+0x4789a]        # 58579 <_fini@@Base+0x5e25>
   10cdf:	mov    r13d,0x28
   10ce5:	mov    edx,0xd
   10cea:	jmp    10cff <g_str_equal@plt+0x3a3f>
   10cec:	nop    DWORD PTR [rax+0x0]
   10cf0:	movzx  edx,BYTE PTR [r12-0x18]
   10cf6:	movzx  r13d,BYTE PTR [r12]
   10cfb:	add    r12,0x1
   10cff:	cmp    BYTE PTR [rsp+rdx*1+0x240],0x0
   10d07:	je     10d14 <g_str_equal@plt+0x3a54>
   10d09:	mov    rdx,QWORD PTR [rsp+rcx*8]
   10d0d:	or     rdx,QWORD PTR [rax]
   10d10:	mov    QWORD PTR [rsp+rcx*8],rdx
   10d14:	movzx  edx,r13b
   10d18:	cmp    BYTE PTR [rsp+rdx*1+0x240],0x0
   10d20:	je     10d2d <g_str_equal@plt+0x3a6d>
   10d22:	mov    rdx,QWORD PTR [rsp+rdi*8]
   10d26:	or     rdx,QWORD PTR [rax]
   10d29:	mov    QWORD PTR [rsp+rdi*8],rdx
   10d2d:	add    rax,0x8
   10d31:	cmp    r8,rax
   10d34:	jne    10cf0 <g_str_equal@plt+0x3a30>
   10d36:	add    r9d,0x2
   10d3a:	cmp    rbp,r10
   10d3d:	je     10d4c <g_str_equal@plt+0x3a8c>
   10d3f:	movzx  r13d,BYTE PTR [r10]
   10d43:	add    r10,0x1
   10d47:	jmp    10c10 <g_str_equal@plt+0x3950>
   10d4c:	lea    r8,[rsp+0x100]
   10d54:	mov    rsi,rsp
   10d57:	mov    rdi,r8
   10d5a:	mov    r9,r8
   10d5d:	nop    DWORD PTR [rax]
   10d60:	mov    r10,QWORD PTR [rsi]
   10d63:	mov    rcx,QWORD PTR [rsi+0x8]
   10d67:	add    rsi,0x10
   10d6b:	add    rdi,0x10
   10d6f:	mov    rdx,r10
   10d72:	mov    rax,r10
   10d75:	shl    rdx,0x6
   10d79:	shl    rax,0xa
   10d7d:	and    eax,0x3f0000
   10d82:	and    edx,0x3f000000
   10d88:	or     rdx,rax
   10d8b:	mov    rax,rcx
   10d8e:	shr    rax,0xa
   10d92:	and    eax,0x3f00
   10d97:	or     rdx,rax
   10d9a:	mov    rax,rcx
   10d9d:	shr    rax,0x6
   10da1:	and    eax,0x3f
   10da4:	or     rdx,rax
   10da7:	mov    rax,r10
   10daa:	shl    r10,0x10
   10dae:	shl    rax,0xc
   10db2:	mov    QWORD PTR [rdi-0x10],rdx
   10db6:	and    r10d,0x3f0000
   10dbd:	and    eax,0x3f000000
   10dc2:	mov    rdx,rcx
   10dc5:	shr    rcx,0x4
   10dc9:	or     rax,r10
   10dcc:	and    edx,0x3f
   10dcf:	and    ecx,0x3f00
   10dd5:	or     rax,rdx
   10dd8:	or     rax,rcx
   10ddb:	cmp    rsi,r9
   10dde:	mov    QWORD PTR [rdi-0x8],rax
   10de2:	jne    10d60 <g_str_equal@plt+0x3aa0>
   10de8:	lea    rcx,[rip+0x273b91]        # 284980 <stdout@@GLIBC_2.2.5+0x38>
   10def:	xor    eax,eax
   10df1:	nop    DWORD PTR [rax+0x0]
   10df8:	mov    rdx,QWORD PTR [r8+rax*1]
   10dfc:	mov    QWORD PTR [rcx+rax*1],rdx
   10e00:	add    rax,0x8
   10e04:	cmp    rax,0x100
   10e0a:	jne    10df8 <g_str_equal@plt+0x3b38>
   10e0c:	mov    rax,QWORD PTR [rsp+0x278]
   10e14:	xor    rax,QWORD PTR fs:0x28
   10e1d:	jne    10e2d <g_str_equal@plt+0x3b6d>
   10e1f:	add    rsp,0x288
   10e26:	pop    rbx
   10e27:	pop    rbp
   10e28:	pop    r12
   10e2a:	pop    r13
   10e2c:	ret    
   10e2d:	call   cd30 <__stack_chk_fail@plt>
   10e32:	nop    DWORD PTR [rax+0x0]
   10e36:	nop    WORD PTR cs:[rax+rax*1+0x0]
   10e40:	lea    rcx,[rip+0x273b39]        # 284980 <stdout@@GLIBC_2.2.5+0x38>
   10e47:	xor    eax,eax
   10e49:	nop    DWORD PTR [rax+0x0]
   10e50:	mov    rdx,QWORD PTR [rdi+rax*1]
   10e54:	mov    QWORD PTR [rcx+rax*1],rdx
   10e58:	add    rax,0x8
   10e5c:	cmp    rax,0x100
   10e62:	jne    10e50 <g_str_equal@plt+0x3b90>
   10e64:	repz ret 
   10e66:	nop    WORD PTR cs:[rax+rax*1+0x0]
   10e70:	push   r15
   10e72:	push   r14
   10e74:	lea    r11,[rip+0x472e5]        # 58160 <_fini@@Base+0x5a0c>
   10e7b:	push   r13
   10e7d:	push   r12
   10e7f:	lea    r13,[rip+0x46ada]        # 57960 <_fini@@Base+0x520c>
   10e86:	push   rbp
   10e87:	push   rbx
   10e88:	lea    r12,[rip+0x468d1]        # 57760 <_fini@@Base+0x500c>
   10e8f:	mov    ecx,DWORD PTR [rdi+0x4]
   10e92:	lea    rbp,[rip+0x466c7]        # 57560 <_fini@@Base+0x4e0c>
   10e99:	lea    rbx,[rip+0x46ec0]        # 57d60 <_fini@@Base+0x560c>
   10ea0:	mov    QWORD PTR [rsp-0x8],rsi
   10ea5:	mov    esi,DWORD PTR [rdi]
   10ea7:	lea    r10,[rip+0x46cb2]        # 57b60 <_fini@@Base+0x540c>
   10eae:	lea    r9,[rip+0x470ab]        # 57f60 <_fini@@Base+0x580c>
   10eb5:	lea    r8,[rip+0x474a4]        # 58360 <_fini@@Base+0x5c0c>
   10ebc:	bswap  ecx
   10ebe:	bswap  esi
   10ec0:	mov    ecx,ecx
   10ec2:	mov    esi,esi
   10ec4:	mov    rax,rsi
   10ec7:	shr    rax,0x4
   10ecb:	xor    rax,rcx
   10ece:	and    eax,0xf0f0f0f
   10ed3:	xor    rcx,rax
   10ed6:	shl    rax,0x4
   10eda:	xor    rsi,rax
   10edd:	mov    rdx,rsi
   10ee0:	shr    rdx,0x10
   10ee4:	xor    rdx,rcx
   10ee7:	movzx  eax,dx
   10eea:	xor    rcx,rax
   10eed:	shl    rax,0x10
   10ef1:	mov    rdx,rcx
   10ef4:	xor    rax,rsi
   10ef7:	shr    rdx,0x2
   10efb:	xor    rdx,rax
   10efe:	and    edx,0x33333333
   10f04:	xor    rax,rdx
   10f07:	shl    rdx,0x2
   10f0b:	xor    rcx,rdx
   10f0e:	mov    rdx,rcx
   10f11:	shr    rdx,0x8
   10f15:	xor    rdx,rax
   10f18:	and    edx,0xff00ff
   10f1e:	xor    rax,rdx
   10f21:	shl    rdx,0x8
   10f25:	xor    rdx,rcx
   10f28:	lea    rcx,[rip+0x273a51]        # 284980 <stdout@@GLIBC_2.2.5+0x38>
   10f2f:	lea    rdi,[rdx+rdx*1]
   10f33:	shr    rdx,0x1f
   10f37:	or     rdx,rdi
   10f3a:	mov    edi,edx
   10f3c:	mov    rdx,rax
   10f3f:	xor    rdx,rdi
   10f42:	and    edx,0xaaaaaaaa
   10f48:	xor    rax,rdx
   10f4b:	xor    rdi,rdx
   10f4e:	lea    rsi,[rax+rax*1]
   10f52:	shr    rax,0x1f
   10f56:	or     rax,rsi
   10f59:	mov    esi,eax
   10f5b:	nop    DWORD PTR [rax+rax*1+0x0]
   10f60:	mov    rdx,rdi
   10f63:	mov    rax,rdi
   10f66:	mov    r14,QWORD PTR [rcx+0x8]
   10f6a:	shr    rax,0x4
   10f6e:	shl    rdx,0x1c
   10f72:	add    rcx,0x20
   10f76:	or     rdx,rax
   10f79:	xor    rdx,QWORD PTR [rcx-0x20]
   10f7d:	xor    r14,rdi
   10f80:	mov    rax,r14
   10f83:	shr    rax,0x8
   10f87:	mov    r15,rdx
   10f8a:	and    eax,0x3f
   10f8d:	and    r15d,0x3f
   10f91:	mov    rax,QWORD PTR [r13+rax*8+0x0]
   10f96:	or     rax,QWORD PTR [r12+r15*8]
   10f9a:	mov    r15,r14
   10f9d:	and    r15d,0x3f
   10fa1:	or     rax,QWORD PTR [rbp+r15*8+0x0]
   10fa6:	mov    r15,r14
   10fa9:	shr    r14,0x18
   10fad:	shr    r15,0x10
   10fb1:	and    r14d,0x3f
   10fb5:	and    r15d,0x3f
   10fb9:	or     rax,QWORD PTR [rbx+r15*8]
   10fbd:	or     rax,QWORD PTR [r11+r14*8]
   10fc1:	mov    r14,rdx
   10fc4:	shr    r14,0x8
   10fc8:	and    r14d,0x3f
   10fcc:	or     rax,QWORD PTR [r10+r14*8]
   10fd0:	mov    r14,rdx
   10fd3:	shr    rdx,0x18
   10fd7:	shr    r14,0x10
   10fdb:	and    edx,0x3f
   10fde:	and    r14d,0x3f
   10fe2:	or     rax,QWORD PTR [r9+r14*8]
   10fe6:	or     rax,QWORD PTR [r8+rdx*8]
   10fea:	xor    rsi,rax
   10fed:	mov    rdx,rsi
   10ff0:	mov    rax,rsi
   10ff3:	shr    rax,0x4
   10ff7:	shl    rdx,0x1c
   10ffb:	or     rdx,rax
   10ffe:	xor    rdx,QWORD PTR [rcx-0x10]
   11002:	mov    r14,QWORD PTR [rcx-0x8]
   11006:	xor    r14,rsi
   11009:	mov    rax,r14
   1100c:	mov    r15,r14
   1100f:	shr    rax,0x8
   11013:	shr    r15,0x10
   11017:	and    r15d,0x3f
   1101b:	and    eax,0x3f
   1101e:	mov    rax,QWORD PTR [r13+rax*8+0x0]
   11023:	or     rax,QWORD PTR [rbx+r15*8]
   11027:	mov    r15,r14
   1102a:	and    r15d,0x3f
   1102e:	shr    r14,0x18
   11032:	and    r14d,0x3f
   11036:	or     rax,QWORD PTR [rbp+r15*8+0x0]
   1103b:	or     rax,QWORD PTR [r11+r14*8]
   1103f:	mov    r14,rdx
   11042:	and    r14d,0x3f
   11046:	or     rax,QWORD PTR [r12+r14*8]
   1104a:	mov    r14,rdx
   1104d:	shr    r14,0x8
   11051:	and    r14d,0x3f
   11055:	or     rax,QWORD PTR [r10+r14*8]
   11059:	mov    r14,rdx
   1105c:	shr    rdx,0x18
   11060:	shr    r14,0x10
   11064:	and    edx,0x3f
   11067:	and    r14d,0x3f
   1106b:	or     rax,QWORD PTR [r9+r14*8]
   1106f:	or     rax,QWORD PTR [r8+rdx*8]
   11073:	xor    rdi,rax
   11076:	lea    rax,[rip+0x273a03]        # 284a80 <stdout@@GLIBC_2.2.5+0x138>
   1107d:	cmp    rcx,rax
   11080:	jne    10f60 <g_str_equal@plt+0x3ca0>
   11086:	mov    rax,rdi
   11089:	shr    rdi,1
   1108c:	mov    rdx,rsi
   1108f:	shl    rax,0x1f
   11093:	mov    rbx,QWORD PTR [rsp-0x8]
   11098:	or     rdi,rax
   1109b:	xor    rdx,rdi
   1109e:	and    edx,0xaaaaaaaa
   110a4:	xor    rsi,rdx
   110a7:	xor    rdi,rdx
   110aa:	mov    rax,rsi
   110ad:	shr    rsi,1
   110b0:	shl    rax,0x1f
   110b4:	or     rsi,rax
   110b7:	mov    rax,rsi
   110ba:	shr    rax,0x8
   110be:	xor    rax,rdi
   110c1:	and    eax,0xff00ff
   110c6:	xor    rdi,rax
   110c9:	shl    rax,0x8
   110cd:	xor    rsi,rax
   110d0:	mov    rdx,rsi
   110d3:	shr    rdx,0x2
   110d7:	xor    rdx,rdi
   110da:	and    edx,0x33333333
   110e0:	xor    rdi,rdx
   110e3:	lea    rax,[rdx*4+0x0]
   110eb:	mov    rdx,rdi
   110ee:	xor    rax,rsi
   110f1:	shr    rdx,0x10
   110f5:	xor    rdx,rax
   110f8:	movzx  edx,dx
   110fb:	xor    rax,rdx
   110fe:	shl    rdx,0x10
   11102:	xor    rdi,rdx
   11105:	mov    rdx,rdi
   11108:	shr    rdx,0x4
   1110c:	xor    rdx,rax
   1110f:	and    edx,0xf0f0f0f
   11115:	xor    rax,rdx
   11118:	shl    rdx,0x4
   1111c:	xor    rdx,rdi
   1111f:	mov    BYTE PTR [rbx+0x7],al
   11122:	mov    rcx,rdx
   11125:	mov    BYTE PTR [rbx+0x3],dl
   11128:	shr    rcx,0x18
   1112c:	mov    BYTE PTR [rbx],cl
   1112e:	mov    rcx,rdx
   11131:	shr    rcx,0x10
   11135:	mov    BYTE PTR [rbx+0x1],cl
   11138:	mov    rcx,rdx
   1113b:	mov    rdx,rax
   1113e:	shr    rdx,0x18
   11142:	shr    rcx,0x8
   11146:	mov    BYTE PTR [rbx+0x4],dl
   11149:	mov    rdx,rax
   1114c:	mov    BYTE PTR [rbx+0x2],cl
   1114f:	shr    rdx,0x10
   11153:	mov    BYTE PTR [rbx+0x5],dl
   11156:	mov    rdx,rax
   11159:	shr    rdx,0x8
   1115d:	mov    BYTE PTR [rbx+0x6],dl
   11160:	pop    rbx
   11161:	pop    rbp
   11162:	pop    r12
   11164:	pop    r13
   11166:	pop    r14
   11168:	pop    r15
   1116a:	ret    
   1116b:	nop    DWORD PTR [rax+rax*1+0x0]
   11170:	mov    rax,QWORD PTR [rdi+0x8]
   11174:	jmp    QWORD PTR [rax+0x3e8]
   1117a:	nop    WORD PTR [rax+rax*1+0x0]
   11180:	mov    rax,QWORD PTR [rdi+0x8]
   11184:	jmp    QWORD PTR [rax+0x3f0]
   1118a:	nop    WORD PTR [rax+rax*1+0x0]
   11190:	mov    r9,QWORD PTR [rdi+0x8]
   11194:	mov    r11,rdx
   11197:	mov    rax,rcx
   1119a:	xor    edx,edx
   1119c:	mov    r10,QWORD PTR [r9+0x3e0]
   111a3:	div    r10
   111a6:	test   rdx,rdx
   111a9:	jne    111b7 <g_str_equal@plt+0x3ef7>
   111ab:	mov    rax,QWORD PTR [r9+0x400]
   111b2:	mov    rdx,r11
   111b5:	jmp    rax
   111b7:	sub    rsp,0x10
   111bb:	mov    rdi,r8
   111be:	mov    r9,rcx
   111c1:	push   r10
   111c3:	lea    r8,[rip+0x474e6]        # 586b0 <_fini@@Base+0x5f5c>
   111ca:	lea    rcx,[rip+0x478bf]        # 58a90 <_fini@@Base+0x633c>
   111d1:	lea    rsi,[rip+0x47508]        # 586e0 <_fini@@Base+0x5f8c>
   111d8:	xor    eax,eax
   111da:	mov    edx,0x1fe
   111df:	call   3a090 <g_str_equal@plt+0x2cdd0>
   111e4:	mov    eax,0xffffffff
   111e9:	add    rsp,0x18
   111ed:	ret    
   111ee:	xchg   ax,ax
   111f0:	mov    r9,QWORD PTR [rdi+0x8]
   111f4:	mov    r11,rdx
   111f7:	mov    rax,rcx
   111fa:	xor    edx,edx
   111fc:	mov    r10,QWORD PTR [r9+0x3e0]
   11203:	div    r10
   11206:	test   rdx,rdx
   11209:	jne    11217 <g_str_equal@plt+0x3f57>
   1120b:	mov    rax,QWORD PTR [r9+0x3f8]
   11212:	mov    rdx,r11
   11215:	jmp    rax
   11217:	sub    rsp,0x10
   1121b:	mov    rdi,r8
   1121e:	mov    r9,rcx
   11221:	push   r10
   11223:	lea    r8,[rip+0x47486]        # 586b0 <_fini@@Base+0x5f5c>
   1122a:	lea    rcx,[rip+0x4783f]        # 58a70 <_fini@@Base+0x631c>
   11231:	lea    rsi,[rip+0x474a8]        # 586e0 <_fini@@Base+0x5f8c>
   11238:	xor    eax,eax
   1123a:	mov    edx,0x1eb
   1123f:	call   3a090 <g_str_equal@plt+0x2cdd0>
   11244:	mov    eax,0xffffffff
   11249:	add    rsp,0x18
   1124d:	ret    
   1124e:	xchg   ax,ax
   11250:	mov    rdi,rcx
   11253:	lea    r8,[rip+0x4762e]        # 58888 <_fini@@Base+0x6134>
   1125a:	lea    rcx,[rip+0x4773f]        # 589a0 <_fini@@Base+0x624c>
   11261:	lea    rsi,[rip+0x47478]        # 586e0 <_fini@@Base+0x5f8c>
   11268:	sub    rsp,0x8
   1126c:	xor    eax,eax
   1126e:	mov    edx,0x170
   11273:	call   3a090 <g_str_equal@plt+0x2cdd0>
   11278:	mov    eax,0xffffffff
   1127d:	add    rsp,0x8
   11281:	ret    
   11282:	nop    DWORD PTR [rax+0x0]
   11286:	nop    WORD PTR cs:[rax+rax*1+0x0]
   11290:	push   rbp
   11291:	push   rbx
   11292:	mov    rbx,rdi
   11295:	sub    rsp,0x8
   11299:	mov    rbp,QWORD PTR [rdi+0x8]
   1129d:	mov    rdi,QWORD PTR [rbp+0x0]
   112a1:	call   d2b0 <g_free@plt>
   112a6:	mov    rdi,rbp
   112a9:	call   d2b0 <g_free@plt>
   112ae:	mov    QWORD PTR [rbx+0x8],0x0
   112b6:	add    rsp,0x8
   112ba:	pop    rbx
   112bb:	pop    rbp
   112bc:	ret    
   112bd:	nop    DWORD PTR [rax]
   112c0:	push   rbx
   112c1:	mov    rbx,rdi
   112c4:	mov    rdi,QWORD PTR [rdi+0x8]
   112c8:	call   d2b0 <g_free@plt>
   112cd:	mov    QWORD PTR [rbx+0x8],0x0
   112d5:	pop    rbx
   112d6:	ret    
   112d7:	nop    WORD PTR [rax+rax*1+0x0]
   112e0:	push   r15
   112e2:	push   r14
   112e4:	push   r13
   112e6:	push   r12
   112e8:	push   rbp
   112e9:	push   rbx
   112ea:	sub    rsp,0x38
   112ee:	mov    rax,QWORD PTR fs:0x28
   112f7:	mov    QWORD PTR [rsp+0x28],rax
   112fc:	xor    eax,eax
   112fe:	test   rcx,rcx
   11301:	je     113b4 <g_str_equal@plt+0x40f4>
   11307:	cmp    rcx,0x10
   1130b:	mov    rbp,rdi
   1130e:	mov    r13,rsi
   11311:	mov    rbx,rdx
   11314:	mov    r12,rcx
   11317:	jbe    11350 <g_str_equal@plt+0x4090>
   11319:	lea    r14,[rcx-0x10]
   1131d:	sub    r12,0x11
   11321:	and    r12,0xfffffffffffffff0
   11325:	mov    r15,r14
   11328:	sub    r15,r12
   1132b:	mov    rsi,rbx
   1132e:	mov    rdi,r13
   11331:	mov    rdx,rbp
   11334:	call   10030 <g_str_equal@plt+0x2d70>
   11339:	add    r13,0x10
   1133d:	add    rbx,0x10
   11341:	cmp    r14,r15
   11344:	mov    r12,r14
   11347:	je     11350 <g_str_equal@plt+0x4090>
   11349:	sub    r14,0x10
   1134d:	jmp    1132b <g_str_equal@plt+0x406b>
   1134f:	nop
   11350:	mov    r8,rsp
   11353:	mov    ecx,0x10
   11358:	mov    rsi,r13
   1135b:	mov    rdi,r8
   1135e:	mov    rdx,r12
   11361:	call   c510 <__memcpy_chk@plt>
   11366:	mov    r8,rax
   11369:	mov    eax,0x10
   1136e:	xor    esi,esi
   11370:	sub    rax,r12
   11373:	lea    rcx,[r8+r12*1]
   11377:	cmp    eax,0x8
   1137a:	jae    113d8 <g_str_equal@plt+0x4118>
   1137c:	test   al,0x4
   1137e:	jne    11418 <g_str_equal@plt+0x4158>
   11384:	test   eax,eax
   11386:	je     11393 <g_str_equal@plt+0x40d3>
   11388:	test   al,0x2
   1138a:	mov    BYTE PTR [rcx],0x0
   1138d:	jne    11430 <g_str_equal@plt+0x4170>
   11393:	lea    r13,[rsp+0x10]
   11398:	mov    rdx,rbp
   1139b:	mov    rdi,r8
   1139e:	mov    rsi,r13
   113a1:	call   10030 <g_str_equal@plt+0x2d70>
   113a6:	mov    rdx,r12
   113a9:	mov    rsi,r13
   113ac:	mov    rdi,rbx
   113af:	call   d220 <memcpy@plt>
   113b4:	mov    rax,QWORD PTR [rsp+0x28]
   113b9:	xor    rax,QWORD PTR fs:0x28
   113c2:	jne    1143e <g_str_equal@plt+0x417e>
   113c4:	add    rsp,0x38
   113c8:	pop    rbx
   113c9:	pop    rbp
   113ca:	pop    r12
   113cc:	pop    r13
   113ce:	pop    r14
   113d0:	pop    r15
   113d2:	ret    
   113d3:	nop    DWORD PTR [rax+rax*1+0x0]
   113d8:	mov    edx,eax
   113da:	mov    QWORD PTR [rcx],0x0
   113e1:	mov    QWORD PTR [rcx+rdx*1-0x8],0x0
   113ea:	lea    rdx,[rcx+0x8]
   113ee:	and    rdx,0xfffffffffffffff8
   113f2:	sub    rcx,rdx
   113f5:	add    eax,ecx
   113f7:	and    eax,0xfffffff8
   113fa:	cmp    eax,0x8
   113fd:	jb     11393 <g_str_equal@plt+0x40d3>
   113ff:	and    eax,0xfffffff8
   11402:	xor    ecx,ecx
   11404:	mov    edi,ecx
   11406:	add    ecx,0x8
   11409:	cmp    ecx,eax
   1140b:	mov    QWORD PTR [rdx+rdi*1],rsi
   1140f:	jb     11404 <g_str_equal@plt+0x4144>
   11411:	jmp    11393 <g_str_equal@plt+0x40d3>
   11413:	nop    DWORD PTR [rax+rax*1+0x0]
   11418:	mov    edx,eax
   1141a:	mov    DWORD PTR [rcx],0x0
   11420:	mov    DWORD PTR [rcx+rdx*1-0x4],0x0
   11428:	jmp    11393 <g_str_equal@plt+0x40d3>
   1142d:	nop    DWORD PTR [rax]
   11430:	mov    edx,eax
   11432:	xor    eax,eax
   11434:	mov    WORD PTR [rcx+rdx*1-0x2],ax
   11439:	jmp    11393 <g_str_equal@plt+0x40d3>
   1143e:	call   cd30 <__stack_chk_fail@plt>
   11443:	nop    DWORD PTR [rax]
   11446:	nop    WORD PTR cs:[rax+rax*1+0x0]
   11450:	mov    rax,rsi
   11453:	mov    rsi,rcx
   11456:	mov    rcx,rax
   11459:	jmp    112e0 <g_str_equal@plt+0x4020>
   1145e:	xchg   ax,ax
   11460:	push   r15
   11462:	push   r14
   11464:	push   r13
   11466:	push   r12
   11468:	push   rbp
   11469:	push   rbx
   1146a:	sub    rsp,0x38
   1146e:	mov    rax,QWORD PTR fs:0x28
   11477:	mov    QWORD PTR [rsp+0x28],rax
   1147c:	xor    eax,eax
   1147e:	test   rcx,rcx
   11481:	je     11534 <g_str_equal@plt+0x4274>
   11487:	cmp    rcx,0x10
   1148b:	mov    rbp,rdi
   1148e:	mov    r13,rsi
   11491:	mov    rbx,rdx
   11494:	mov    r12,rcx
   11497:	jbe    114d0 <g_str_equal@plt+0x4210>
   11499:	lea    r14,[rcx-0x10]
   1149d:	sub    r12,0x11
   114a1:	and    r12,0xfffffffffffffff0
   114a5:	mov    r15,r14
   114a8:	sub    r15,r12
   114ab:	mov    rsi,rbx
   114ae:	mov    rdi,r13
   114b1:	mov    rdx,rbp
   114b4:	call   10490 <g_str_equal@plt+0x31d0>
   114b9:	add    r13,0x10
   114bd:	add    rbx,0x10
   114c1:	cmp    r14,r15
   114c4:	mov    r12,r14
   114c7:	je     114d0 <g_str_equal@plt+0x4210>
   114c9:	sub    r14,0x10
   114cd:	jmp    114ab <g_str_equal@plt+0x41eb>
   114cf:	nop
   114d0:	mov    r8,rsp
   114d3:	mov    ecx,0x10
   114d8:	mov    rsi,r13
   114db:	mov    rdi,r8
   114de:	mov    rdx,r12
   114e1:	call   c510 <__memcpy_chk@plt>
   114e6:	mov    r8,rax
   114e9:	mov    eax,0x10
   114ee:	xor    esi,esi
   114f0:	sub    rax,r12
   114f3:	lea    rcx,[r8+r12*1]
   114f7:	cmp    eax,0x8
   114fa:	jae    11558 <g_str_equal@plt+0x4298>
   114fc:	test   al,0x4
   114fe:	jne    11598 <g_str_equal@plt+0x42d8>
   11504:	test   eax,eax
   11506:	je     11513 <g_str_equal@plt+0x4253>
   11508:	test   al,0x2
   1150a:	mov    BYTE PTR [rcx],0x0
   1150d:	jne    115b0 <g_str_equal@plt+0x42f0>
   11513:	lea    r13,[rsp+0x10]
   11518:	mov    rdx,rbp
   1151b:	mov    rdi,r8
   1151e:	mov    rsi,r13
   11521:	call   10490 <g_str_equal@plt+0x31d0>
   11526:	mov    rdx,r12
   11529:	mov    rsi,r13
   1152c:	mov    rdi,rbx
   1152f:	call   d220 <memcpy@plt>
   11534:	mov    rax,QWORD PTR [rsp+0x28]
   11539:	xor    rax,QWORD PTR fs:0x28
   11542:	jne    115be <g_str_equal@plt+0x42fe>
   11544:	add    rsp,0x38
   11548:	pop    rbx
   11549:	pop    rbp
   1154a:	pop    r12
   1154c:	pop    r13
   1154e:	pop    r14
   11550:	pop    r15
   11552:	ret    
   11553:	nop    DWORD PTR [rax+rax*1+0x0]
   11558:	mov    edx,eax
   1155a:	mov    QWORD PTR [rcx],0x0
   11561:	mov    QWORD PTR [rcx+rdx*1-0x8],0x0
   1156a:	lea    rdx,[rcx+0x8]
   1156e:	and    rdx,0xfffffffffffffff8
   11572:	sub    rcx,rdx
   11575:	add    eax,ecx
   11577:	and    eax,0xfffffff8
   1157a:	cmp    eax,0x8
   1157d:	jb     11513 <g_str_equal@plt+0x4253>
   1157f:	and    eax,0xfffffff8
   11582:	xor    ecx,ecx
   11584:	mov    edi,ecx
   11586:	add    ecx,0x8
   11589:	cmp    ecx,eax
   1158b:	mov    QWORD PTR [rdx+rdi*1],rsi
   1158f:	jb     11584 <g_str_equal@plt+0x42c4>
   11591:	jmp    11513 <g_str_equal@plt+0x4253>
   11593:	nop    DWORD PTR [rax+rax*1+0x0]
   11598:	mov    edx,eax
   1159a:	mov    DWORD PTR [rcx],0x0
   115a0:	mov    DWORD PTR [rcx+rdx*1-0x4],0x0
   115a8:	jmp    11513 <g_str_equal@plt+0x4253>
   115ad:	nop    DWORD PTR [rax]
   115b0:	mov    edx,eax
   115b2:	xor    eax,eax
   115b4:	mov    WORD PTR [rcx+rdx*1-0x2],ax
   115b9:	jmp    11513 <g_str_equal@plt+0x4253>
   115be:	call   cd30 <__stack_chk_fail@plt>
   115c3:	nop    DWORD PTR [rax]
   115c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   115d0:	mov    rax,rsi
   115d3:	add    rdi,0xf4
   115da:	mov    rsi,rcx
   115dd:	mov    rcx,rax
   115e0:	jmp    11460 <g_str_equal@plt+0x41a0>
   115e5:	nop
   115e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   115f0:	cmp    rdx,0x10
   115f4:	mov    rax,QWORD PTR [rdi+0x8]
   115f8:	jne    11610 <g_str_equal@plt+0x4350>
   115fa:	movdqu xmm0,XMMWORD PTR [rsi]
   115fe:	movups XMMWORD PTR [rax+0x3d0],xmm0
   11605:	xor    eax,eax
   11607:	ret    
   11608:	nop    DWORD PTR [rax+rax*1+0x0]
   11610:	sub    rsp,0x10
   11614:	mov    rdi,rcx
   11617:	lea    r8,[rip+0x47286]        # 588a4 <_fini@@Base+0x6150>
   1161e:	push   rdx
   1161f:	lea    rcx,[rip+0x472fa]        # 58920 <_fini@@Base+0x61cc>
   11626:	lea    rsi,[rip+0x470b3]        # 586e0 <_fini@@Base+0x5f8c>
   1162d:	xor    eax,eax
   1162f:	mov    r9d,0x10
   11635:	mov    edx,0xe3
   1163a:	call   3a090 <g_str_equal@plt+0x2cdd0>
   1163f:	mov    eax,0xffffffff
   11644:	add    rsp,0x18
   11648:	ret    
   11649:	nop    DWORD PTR [rax+0x0]
   11650:	push   r13
   11652:	push   r12
   11654:	push   rbp
   11655:	push   rbx
   11656:	mov    rbx,rcx
   11659:	mov    rbp,rcx
   1165c:	sub    rsp,0x8
   11660:	and    ebx,0x7
   11663:	mov    rax,QWORD PTR [rdi+0x8]
   11667:	jne    116ac <g_str_equal@plt+0x43ec>
   11669:	mov    rdi,QWORD PTR [rax]
   1166c:	mov    r12,rsi
   1166f:	mov    esi,0x1
   11674:	mov    r13,rdx
   11677:	call   10b70 <g_str_equal@plt+0x38b0>
   1167c:	test   rbp,rbp
   1167f:	je     1169f <g_str_equal@plt+0x43df>
   11681:	nop    DWORD PTR [rax+0x0]
   11688:	lea    rsi,[r13+rbx*1+0x0]
   1168d:	lea    rdi,[r12+rbx*1]
   11691:	add    rbx,0x8
   11695:	call   10e70 <g_str_equal@plt+0x3bb0>
   1169a:	cmp    rbp,rbx
   1169d:	ja     11688 <g_str_equal@plt+0x43c8>
   1169f:	xor    eax,eax
   116a1:	add    rsp,0x8
   116a5:	pop    rbx
   116a6:	pop    rbp
   116a7:	pop    r12
   116a9:	pop    r13
   116ab:	ret    
   116ac:	mov    rdi,r8
   116af:	mov    r9,rcx
   116b2:	lea    r8,[rip+0x4706f]        # 58728 <_fini@@Base+0x5fd4>
   116b9:	lea    rcx,[rip+0x47320]        # 589e0 <_fini@@Base+0x628c>
   116c0:	lea    rsi,[rip+0x47019]        # 586e0 <_fini@@Base+0x5f8c>
   116c7:	xor    eax,eax
   116c9:	mov    edx,0x15e
   116ce:	call   3a090 <g_str_equal@plt+0x2cdd0>
   116d3:	mov    eax,0xffffffff
   116d8:	jmp    116a1 <g_str_equal@plt+0x43e1>
   116da:	nop    WORD PTR [rax+rax*1+0x0]
   116e0:	push   r13
   116e2:	push   r12
   116e4:	push   rbp
   116e5:	push   rbx
   116e6:	mov    rbx,rcx
   116e9:	mov    rbp,rcx
   116ec:	sub    rsp,0x8
   116f0:	and    ebx,0x7
   116f3:	mov    rax,QWORD PTR [rdi+0x8]
   116f7:	jne    11734 <g_str_equal@plt+0x4474>
   116f9:	mov    rdi,QWORD PTR [rax]
   116fc:	mov    r12,rsi
   116ff:	xor    esi,esi
   11701:	mov    r13,rdx
   11704:	call   10b70 <g_str_equal@plt+0x38b0>
   11709:	test   rbp,rbp
   1170c:	je     11727 <g_str_equal@plt+0x4467>
   1170e:	xchg   ax,ax
   11710:	lea    rsi,[r13+rbx*1+0x0]
   11715:	lea    rdi,[r12+rbx*1]
   11719:	add    rbx,0x8
   1171d:	call   10e70 <g_str_equal@plt+0x3bb0>
   11722:	cmp    rbp,rbx
   11725:	ja     11710 <g_str_equal@plt+0x4450>
   11727:	xor    eax,eax
   11729:	add    rsp,0x8
   1172d:	pop    rbx
   1172e:	pop    rbp
   1172f:	pop    r12
   11731:	pop    r13
   11733:	ret    
   11734:	mov    rdi,r8
   11737:	mov    r9,rcx
   1173a:	lea    r8,[rip+0x46fe7]        # 58728 <_fini@@Base+0x5fd4>
   11741:	lea    rcx,[rip+0x47278]        # 589c0 <_fini@@Base+0x626c>
   11748:	lea    rsi,[rip+0x46f91]        # 586e0 <_fini@@Base+0x5f8c>
   1174f:	xor    eax,eax
   11751:	mov    edx,0x145
   11756:	call   3a090 <g_str_equal@plt+0x2cdd0>
   1175b:	mov    eax,0xffffffff
   11760:	jmp    11729 <g_str_equal@plt+0x4469>
   11762:	nop    DWORD PTR [rax+0x0]
   11766:	nop    WORD PTR cs:[rax+rax*1+0x0]
   11770:	sub    rsp,0x8
   11774:	mov    r10,rdx
   11777:	mov    rdx,rcx
   1177a:	mov    ecx,DWORD PTR [rdi+0x4]
   1177d:	mov    r11,rsi
   11780:	mov    rax,QWORD PTR [rdi+0x8]
   11784:	cmp    ecx,0x1
   11787:	je     117e8 <g_str_equal@plt+0x4528>
   11789:	jb     117c8 <g_str_equal@plt+0x4508>
   1178b:	cmp    ecx,0x2
   1178e:	jne    1180b <g_str_equal@plt+0x454b>
   11790:	push   r11
   11792:	lea    rsi,[rax+0x1e8]
   11799:	push   r10
   1179b:	mov    r9,rdx
   1179e:	lea    r8,[rax+0x3d0]
   117a5:	lea    rdx,[rip+0xfffffffffffffca4]        # 11450 <g_str_equal@plt+0x4190>
   117ac:	lea    rcx,[rip+0xfffffffffffffe1d]        # 115d0 <g_str_equal@plt+0x4310>
   117b3:	mov    rdi,rax
   117b6:	call   14090 <g_str_equal@plt+0x6dd0>
   117bb:	pop    rax
   117bc:	pop    rdx
   117bd:	xor    eax,eax
   117bf:	add    rsp,0x8
   117c3:	ret    
   117c4:	nop    DWORD PTR [rax+0x0]
   117c8:	lea    rdi,[rax+0xf4]
   117cf:	mov    rcx,rdx
   117d2:	mov    rdx,r10
   117d5:	call   11460 <g_str_equal@plt+0x41a0>
   117da:	xor    eax,eax
   117dc:	add    rsp,0x8
   117e0:	ret    
   117e1:	nop    DWORD PTR [rax+0x0]
   117e8:	lea    rcx,[rax+0xf4]
   117ef:	lea    r8,[rax+0x3d0]
   117f6:	xor    r9d,r9d
   117f9:	mov    rsi,r10
   117fc:	mov    rdi,r11
   117ff:	call   10900 <g_str_equal@plt+0x3640>
   11804:	xor    eax,eax
   11806:	add    rsp,0x8
   1180a:	ret    
   1180b:	lea    rcx,[rip+0x4714e]        # 58960 <_fini@@Base+0x620c>
   11812:	lea    rsi,[rip+0x46ec7]        # 586e0 <_fini@@Base+0x5f8c>
   11819:	xor    r8d,r8d
   1181c:	mov    edx,0xd6
   11821:	xor    edi,edi
   11823:	call   c6b0 <g_assertion_message_expr@plt>
   11828:	nop    DWORD PTR [rax+rax*1+0x0]
   11830:	sub    rsp,0x8
   11834:	mov    r10,rdx
   11837:	mov    rdx,rcx
   1183a:	mov    ecx,DWORD PTR [rdi+0x4]
   1183d:	mov    r11,rsi
   11840:	mov    rax,QWORD PTR [rdi+0x8]
   11844:	cmp    ecx,0x1
   11847:	je     118a0 <g_str_equal@plt+0x45e0>
   11849:	jb     11888 <g_str_equal@plt+0x45c8>
   1184b:	cmp    ecx,0x2
   1184e:	jne    118c2 <g_str_equal@plt+0x4602>
   11850:	push   r11
   11852:	lea    rsi,[rax+0x1e8]
   11859:	push   r10
   1185b:	mov    r9,rdx
   1185e:	lea    r8,[rax+0x3d0]
   11865:	lea    rdx,[rip+0xfffffffffffffbe4]        # 11450 <g_str_equal@plt+0x4190>
   1186c:	lea    rcx,[rip+0xfffffffffffffd5d]        # 115d0 <g_str_equal@plt+0x4310>
   11873:	mov    rdi,rax
   11876:	call   14290 <g_str_equal@plt+0x6fd0>
   1187b:	pop    rax
   1187c:	pop    rdx
   1187d:	xor    eax,eax
   1187f:	add    rsp,0x8
   11883:	ret    
   11884:	nop    DWORD PTR [rax+0x0]
   11888:	mov    rcx,rdx
   1188b:	mov    rdi,rax
   1188e:	mov    rdx,r10
   11891:	call   112e0 <g_str_equal@plt+0x4020>
   11896:	xor    eax,eax
   11898:	add    rsp,0x8
   1189c:	ret    
   1189d:	nop    DWORD PTR [rax]
   118a0:	lea    r8,[rax+0x3d0]
   118a7:	mov    rcx,rax
   118aa:	mov    r9d,0x1
   118b0:	mov    rsi,r10
   118b3:	mov    rdi,r11
   118b6:	call   10900 <g_str_equal@plt+0x3640>
   118bb:	xor    eax,eax
   118bd:	add    rsp,0x8
   118c1:	ret    
   118c2:	lea    rcx,[rip+0x47077]        # 58940 <_fini@@Base+0x61ec>
   118c9:	lea    rsi,[rip+0x46e10]        # 586e0 <_fini@@Base+0x5f8c>
   118d0:	xor    r8d,r8d
   118d3:	mov    edx,0xb4
   118d8:	xor    edi,edi
   118da:	call   c6b0 <g_assertion_message_expr@plt>
   118df:	nop
   118e0:	cmp    edi,0xb
   118e3:	ja     118f3 <g_str_equal@plt+0x4633>
   118e5:	lea    rax,[rip+0x47214]        # 58b00 <_fini@@Base+0x63ac>
   118ec:	mov    edi,edi
   118ee:	mov    rax,QWORD PTR [rax+rdi*8]
   118f2:	ret    
   118f3:	lea    rcx,[rip+0x471d6]        # 58ad0 <_fini@@Base+0x637c>
   118fa:	lea    rsi,[rip+0x46e57]        # 58758 <_fini@@Base+0x6004>
   11901:	lea    rdi,[rip+0x46e90]        # 58798 <_fini@@Base+0x6044>
   11908:	sub    rsp,0x8
   1190c:	mov    edx,0x43
   11911:	call   c390 <__assert_fail@plt>
   11916:	nop    WORD PTR cs:[rax+rax*1+0x0]
   11920:	cmp    edi,0xb
   11923:	ja     11933 <g_str_equal@plt+0x4673>
   11925:	lea    rax,[rip+0x47234]        # 58b60 <_fini@@Base+0x640c>
   1192c:	mov    edi,edi
   1192e:	mov    rax,QWORD PTR [rax+rdi*8]
   11932:	ret    
   11933:	lea    rcx,[rip+0x47176]        # 58ab0 <_fini@@Base+0x635c>
   1193a:	lea    rsi,[rip+0x46e17]        # 58758 <_fini@@Base+0x6004>
   11941:	lea    rdi,[rip+0x46e50]        # 58798 <_fini@@Base+0x6044>
   11948:	sub    rsp,0x8
   1194c:	mov    edx,0x4a
   11951:	call   c390 <__assert_fail@plt>
   11956:	nop    WORD PTR cs:[rax+rax*1+0x0]
   11960:	cmp    edi,0xb
   11963:	ja     1196a <g_str_equal@plt+0x46aa>
   11965:	cmp    esi,0x3
   11968:	jbe    11970 <g_str_equal@plt+0x46b0>
   1196a:	xor    eax,eax
   1196c:	repz ret 
   1196e:	xchg   ax,ax
   11970:	lea    rdx,[rip+0x47176]        # 58aed <_fini@@Base+0x6399>
   11977:	mov    esi,esi
   11979:	xor    eax,eax
   1197b:	cmp    BYTE PTR [rdx+rsi*1],0x0
   1197f:	je     1196c <g_str_equal@plt+0x46ac>
   11981:	lea    rax,[rip+0x47178]        # 58b00 <_fini@@Base+0x63ac>
   11988:	mov    edi,edi
   1198a:	mov    rax,QWORD PTR [rax+rdi*8]
   1198e:	ret    
   1198f:	nop
   11990:	xor    eax,eax
   11992:	cmp    edi,0x3
   11995:	ja     1199d <g_str_equal@plt+0x46dd>
   11997:	cmp    esi,0x3
   1199a:	setb   al
   1199d:	repz ret 
   1199f:	nop
   119a0:	push   r15
   119a2:	push   r14
   119a4:	push   r13
   119a6:	push   r12
   119a8:	mov    r13,r8
   119ab:	push   rbp
   119ac:	push   rbx
   119ad:	mov    ebp,esi
   119af:	sub    rsp,0x18
   119b3:	cmp    esi,0x2
   119b6:	ja     11cb0 <g_str_equal@plt+0x49f0>
   119bc:	cmp    edi,0xb
   119bf:	mov    r15d,edi
   119c2:	ja     11aa0 <g_str_equal@plt+0x47e0>
   119c8:	cmp    esi,0x2
   119cb:	mov    r14,rdx
   119ce:	mov    r12,rcx
   119d1:	je     11a30 <g_str_equal@plt+0x4770>
   119d3:	lea    rdx,[rip+0x47186]        # 58b60 <_fini@@Base+0x640c>
   119da:	mov    eax,edi
   119dc:	mov    rax,QWORD PTR [rdx+rax*8]
   119e0:	cmp    rcx,rax
   119e3:	je     11b10 <g_str_equal@plt+0x4850>
   119e9:	sub    rsp,0x8
   119ed:	mov    r9,rcx
   119f0:	lea    r8,[rip+0x46e49]        # 58840 <_fini@@Base+0x60ec>
   119f7:	push   rax
   119f8:	lea    rcx,[rip+0x47021]        # 58a20 <_fini@@Base+0x62cc>
   119ff:	mov    edx,0x7f
   11a04:	lea    rsi,[rip+0x46d4d]        # 58758 <_fini@@Base+0x6004>
   11a0b:	xor    eax,eax
   11a0d:	mov    rdi,r13
   11a10:	call   3a090 <g_str_equal@plt+0x2cdd0>
   11a15:	pop    rax
   11a16:	pop    rdx
   11a17:	xor    eax,eax
   11a19:	add    rsp,0x18
   11a1d:	pop    rbx
   11a1e:	pop    rbp
   11a1f:	pop    r12
   11a21:	pop    r13
   11a23:	pop    r14
   11a25:	pop    r15
   11a27:	ret    
   11a28:	nop    DWORD PTR [rax+rax*1+0x0]
   11a30:	lea    eax,[rdi-0x3]
   11a33:	lea    r8,[rip+0x46da6]        # 587e0 <_fini@@Base+0x608c>
   11a3a:	lea    rcx,[rip+0x46fdf]        # 58a20 <_fini@@Base+0x62cc>
   11a41:	mov    edx,0x6f
   11a46:	cmp    eax,0x1
   11a49:	jbe    11af3 <g_str_equal@plt+0x4833>
   11a4f:	test   r12b,0x1
   11a53:	jne    11ae0 <g_str_equal@plt+0x4820>
   11a59:	lea    rdx,[rip+0x47100]        # 58b60 <_fini@@Base+0x640c>
   11a60:	mov    eax,edi
   11a62:	mov    rsi,QWORD PTR [rdx+rax*8]
   11a66:	mov    rax,r12
   11a69:	shr    rax,1
   11a6c:	cmp    rsi,rax
   11a6f:	mov    QWORD PTR [rsp+0x8],rsi
   11a74:	je     11bc8 <g_str_equal@plt+0x4908>
   11a7a:	sub    rsp,0x8
   11a7e:	add    rsi,rsi
   11a81:	mov    r9,r12
   11a84:	push   rsi
   11a85:	lea    r8,[rip+0x46db4]        # 58840 <_fini@@Base+0x60ec>
   11a8c:	lea    rcx,[rip+0x46f8d]        # 58a20 <_fini@@Base+0x62cc>
   11a93:	mov    edx,0x79
   11a98:	jmp    11a04 <g_str_equal@plt+0x4744>
   11a9d:	nop    DWORD PTR [rax]
   11aa0:	lea    r8,[rip+0x46d11]        # 587b8 <_fini@@Base+0x6064>
   11aa7:	lea    rcx,[rip+0x46f72]        # 58a20 <_fini@@Base+0x62cc>
   11aae:	lea    rsi,[rip+0x46ca3]        # 58758 <_fini@@Base+0x6004>
   11ab5:	mov    r9d,edi
   11ab8:	xor    eax,eax
   11aba:	mov    rdi,r13
   11abd:	mov    edx,0x68
   11ac2:	call   3a090 <g_str_equal@plt+0x2cdd0>
   11ac7:	add    rsp,0x18
   11acb:	xor    eax,eax
   11acd:	pop    rbx
   11ace:	pop    rbp
   11acf:	pop    r12
   11ad1:	pop    r13
   11ad3:	pop    r14
   11ad5:	pop    r15
   11ad7:	ret    
   11ad8:	nop    DWORD PTR [rax+rax*1+0x0]
   11ae0:	lea    r8,[rip+0x46d29]        # 58810 <_fini@@Base+0x60bc>
   11ae7:	lea    rcx,[rip+0x46f32]        # 58a20 <_fini@@Base+0x62cc>
   11aee:	mov    edx,0x73
   11af3:	lea    rsi,[rip+0x46c5e]        # 58758 <_fini@@Base+0x6004>
   11afa:	xor    eax,eax
   11afc:	mov    rdi,r13
   11aff:	call   3a090 <g_str_equal@plt+0x2cdd0>
   11b04:	xor    eax,eax
   11b06:	jmp    11a19 <g_str_equal@plt+0x4759>
   11b0b:	nop    DWORD PTR [rax+rax*1+0x0]
   11b10:	cmp    edi,0x2
   11b13:	jbe    11c20 <g_str_equal@plt+0x4960>
   11b19:	cmp    edi,0x3
   11b1c:	jne    11bda <g_str_equal@plt+0x491a>
   11b22:	test   ebp,ebp
   11b24:	jne    11d90 <g_str_equal@plt+0x4ad0>
   11b2a:	mov    edi,0x408
   11b2f:	call   ce00 <g_malloc0@plt>
   11b34:	mov    rdi,r12
   11b37:	mov    rbx,rax
   11b3a:	call   ce00 <g_malloc0@plt>
   11b3f:	mov    rdx,r12
   11b42:	mov    QWORD PTR [rbx],rax
   11b45:	mov    rsi,r14
   11b48:	mov    rdi,rax
   11b4b:	call   d220 <memcpy@plt>
   11b50:	lea    rax,[rip+0xfffffffffffff739]        # 11290 <g_str_equal@plt+0x3fd0>
   11b57:	mov    QWORD PTR [rbx+0x8],r12
   11b5b:	mov    QWORD PTR [rbx+0x3e0],0x8
   11b66:	mov    QWORD PTR [rbx+0x3e8],rax
   11b6d:	lea    rax,[rip+0xfffffffffffff6dc]        # 11250 <g_str_equal@plt+0x3f90>
   11b74:	mov    QWORD PTR [rbx+0x3f0],rax
   11b7b:	lea    rax,[rip+0xfffffffffffffb5e]        # 116e0 <g_str_equal@plt+0x4420>
   11b82:	mov    QWORD PTR [rbx+0x3f8],rax
   11b89:	lea    rax,[rip+0xfffffffffffffac0]        # 11650 <g_str_equal@plt+0x4390>
   11b90:	mov    QWORD PTR [rbx+0x400],rax
   11b97:	mov    edi,0x18
   11b9c:	call   ce00 <g_malloc0@plt>
   11ba1:	lea    rcx,[rip+0x2705f8]        # 2821a0 <g_test_config_vars+0xde0>
   11ba8:	mov    DWORD PTR [rax],r15d
   11bab:	mov    DWORD PTR [rax+0x4],ebp
   11bae:	mov    QWORD PTR [rax+0x8],rbx
   11bb2:	mov    QWORD PTR [rax+0x10],rcx
   11bb6:	add    rsp,0x18
   11bba:	pop    rbx
   11bbb:	pop    rbp
   11bbc:	pop    r12
   11bbe:	pop    r13
   11bc0:	pop    r14
   11bc2:	pop    r15
   11bc4:	ret    
   11bc5:	nop    DWORD PTR [rax]
   11bc8:	cmp    edi,0x2
   11bcb:	jbe    11cd7 <g_str_equal@plt+0x4a17>
   11bd1:	cmp    edi,0x3
   11bd4:	je     11d90 <g_str_equal@plt+0x4ad0>
   11bda:	lea    rdi,[rip+0x26ed3f]        # 280920 <_fini@@Base+0x22e1cc>
   11be1:	mov    esi,r15d
   11be4:	call   2df50 <g_str_equal@plt+0x20c90>
   11be9:	lea    r8,[rip+0x46c78]        # 58868 <_fini@@Base+0x6114>
   11bf0:	lea    rcx,[rip+0x46e59]        # 58a50 <_fini@@Base+0x62fc>
   11bf7:	mov    r9,rax
   11bfa:	mov    edx,0x1cf
   11bff:	lea    rsi,[rip+0x46ada]        # 586e0 <_fini@@Base+0x5f8c>
   11c06:	xor    eax,eax
   11c08:	mov    rdi,r13
   11c0b:	call   3a090 <g_str_equal@plt+0x2cdd0>
   11c10:	xor    eax,eax
   11c12:	jmp    11a19 <g_str_equal@plt+0x4759>
   11c17:	nop    WORD PTR [rax+rax*1+0x0]
   11c20:	mov    edi,0x408
   11c25:	shl    r12d,0x3
   11c29:	call   ce00 <g_malloc0@plt>
   11c2e:	mov    esi,r12d
   11c31:	mov    rdx,rax
   11c34:	mov    rdi,r14
   11c37:	mov    rbx,rax
   11c3a:	call   f9f0 <g_str_equal@plt+0x2730>
   11c3f:	test   eax,eax
   11c41:	jne    11dc0 <g_str_equal@plt+0x4b00>
   11c47:	lea    rdx,[rbx+0xf4]
   11c4e:	mov    esi,r12d
   11c51:	mov    rdi,r14
   11c54:	call   fe20 <g_str_equal@plt+0x2b60>
   11c59:	test   eax,eax
   11c5b:	jne    11e38 <g_str_equal@plt+0x4b78>
   11c61:	lea    rax,[rip+0xfffffffffffff658]        # 112c0 <g_str_equal@plt+0x4000>
   11c68:	mov    QWORD PTR [rbx+0x3e0],0x10
   11c73:	mov    QWORD PTR [rbx+0x3e8],rax
   11c7a:	lea    rax,[rip+0xfffffffffffff96f]        # 115f0 <g_str_equal@plt+0x4330>
   11c81:	mov    QWORD PTR [rbx+0x3f0],rax
   11c88:	lea    rax,[rip+0xfffffffffffffba1]        # 11830 <g_str_equal@plt+0x4570>
   11c8f:	mov    QWORD PTR [rbx+0x3f8],rax
   11c96:	lea    rax,[rip+0xfffffffffffffad3]        # 11770 <g_str_equal@plt+0x44b0>
   11c9d:	mov    QWORD PTR [rbx+0x400],rax
   11ca4:	jmp    11b97 <g_str_equal@plt+0x48d7>
   11ca9:	nop    DWORD PTR [rax+0x0]
   11cb0:	lea    rdi,[rip+0x26ec39]        # 2808f0 <_fini@@Base+0x22e19c>
   11cb7:	call   2df50 <g_str_equal@plt+0x20c90>
   11cbc:	lea    r8,[rip+0x46bfd]        # 588c0 <_fini@@Base+0x616c>
   11cc3:	mov    r9,rax
   11cc6:	lea    rcx,[rip+0x46d83]        # 58a50 <_fini@@Base+0x62fc>
   11ccd:	mov    edx,0x1bb
   11cd2:	jmp    11bff <g_str_equal@plt+0x493f>
   11cd7:	mov    edi,0x408
   11cdc:	shl    r12d,0x2
   11ce0:	call   ce00 <g_malloc0@plt>
   11ce5:	mov    esi,r12d
   11ce8:	mov    rdx,rax
   11ceb:	mov    rdi,r14
   11cee:	mov    rbx,rax
   11cf1:	call   f9f0 <g_str_equal@plt+0x2730>
   11cf6:	test   eax,eax
   11cf8:	jne    11de6 <g_str_equal@plt+0x4b26>
   11cfe:	lea    rdx,[rbx+0xf4]
   11d05:	mov    esi,r12d
   11d08:	mov    rdi,r14
   11d0b:	call   fe20 <g_str_equal@plt+0x2b60>
   11d10:	test   eax,eax
   11d12:	jne    11e0f <g_str_equal@plt+0x4b4f>
   11d18:	add    r14,QWORD PTR [rsp+0x8]
   11d1d:	lea    rdx,[rbx+0x1e8]
   11d24:	mov    esi,r12d
   11d27:	mov    rdi,r14
   11d2a:	call   f9f0 <g_str_equal@plt+0x2730>
   11d2f:	test   eax,eax
   11d31:	jne    11e61 <g_str_equal@plt+0x4ba1>
   11d37:	lea    rdx,[rbx+0x2dc]
   11d3e:	mov    esi,r12d
   11d41:	mov    rdi,r14
   11d44:	call   fe20 <g_str_equal@plt+0x2b60>
   11d49:	test   eax,eax
   11d4b:	je     11c61 <g_str_equal@plt+0x49a1>
   11d51:	lea    r8,[rip+0x46ba0]        # 588f8 <_fini@@Base+0x61a4>
   11d58:	lea    rcx,[rip+0x46c21]        # 58980 <_fini@@Base+0x622c>
   11d5f:	lea    rsi,[rip+0x4697a]        # 586e0 <_fini@@Base+0x5f8c>
   11d66:	mov    edx,0x113
   11d6b:	mov    rdi,r13
   11d6e:	xor    eax,eax
   11d70:	call   3a090 <g_str_equal@plt+0x2cdd0>
   11d75:	nop    DWORD PTR [rax]
   11d78:	mov    rdi,rbx
   11d7b:	call   d2b0 <g_free@plt>
   11d80:	xor    eax,eax
   11d82:	jmp    11a19 <g_str_equal@plt+0x4759>
   11d87:	nop    WORD PTR [rax+rax*1+0x0]
   11d90:	lea    rdi,[rip+0x26eb59]        # 2808f0 <_fini@@Base+0x22e19c>
   11d97:	mov    esi,ebp
   11d99:	call   2df50 <g_str_equal@plt+0x20c90>
   11d9e:	lea    r8,[rip+0x46b1b]        # 588c0 <_fini@@Base+0x616c>
   11da5:	mov    r9,rax
   11da8:	lea    rcx,[rip+0x46c51]        # 58a00 <_fini@@Base+0x62ac>
   11daf:	mov    edx,0x17e
   11db4:	jmp    11bff <g_str_equal@plt+0x493f>
   11db9:	nop    DWORD PTR [rax+0x0]
   11dc0:	lea    r8,[rip+0x46b14]        # 588db <_fini@@Base+0x6187>
   11dc7:	lea    rcx,[rip+0x46bb2]        # 58980 <_fini@@Base+0x622c>
   11dce:	lea    rsi,[rip+0x4690b]        # 586e0 <_fini@@Base+0x5f8c>
   11dd5:	mov    edx,0x118
   11dda:	mov    rdi,r13
   11ddd:	xor    eax,eax
   11ddf:	call   3a090 <g_str_equal@plt+0x2cdd0>
   11de4:	jmp    11d78 <g_str_equal@plt+0x4ab8>
   11de6:	lea    r8,[rip+0x46aee]        # 588db <_fini@@Base+0x6187>
   11ded:	lea    rcx,[rip+0x46b8c]        # 58980 <_fini@@Base+0x622c>
   11df4:	lea    rsi,[rip+0x468e5]        # 586e0 <_fini@@Base+0x5f8c>
   11dfb:	mov    edx,0x102
   11e00:	mov    rdi,r13
   11e03:	xor    eax,eax
   11e05:	call   3a090 <g_str_equal@plt+0x2cdd0>
   11e0a:	jmp    11d78 <g_str_equal@plt+0x4ab8>
   11e0f:	lea    r8,[rip+0x46ae2]        # 588f8 <_fini@@Base+0x61a4>
   11e16:	lea    rcx,[rip+0x46b63]        # 58980 <_fini@@Base+0x622c>
   11e1d:	lea    rsi,[rip+0x468bc]        # 586e0 <_fini@@Base+0x5f8c>
   11e24:	mov    edx,0x107
   11e29:	mov    rdi,r13
   11e2c:	xor    eax,eax
   11e2e:	call   3a090 <g_str_equal@plt+0x2cdd0>
   11e33:	jmp    11d78 <g_str_equal@plt+0x4ab8>
   11e38:	lea    r8,[rip+0x46ab9]        # 588f8 <_fini@@Base+0x61a4>
   11e3f:	lea    rcx,[rip+0x46b3a]        # 58980 <_fini@@Base+0x622c>
   11e46:	lea    rsi,[rip+0x46893]        # 586e0 <_fini@@Base+0x5f8c>
   11e4d:	mov    edx,0x11d
   11e52:	mov    rdi,r13
   11e55:	xor    eax,eax
   11e57:	call   3a090 <g_str_equal@plt+0x2cdd0>
   11e5c:	jmp    11d78 <g_str_equal@plt+0x4ab8>
   11e61:	lea    r8,[rip+0x46a73]        # 588db <_fini@@Base+0x6187>
   11e68:	lea    rcx,[rip+0x46b11]        # 58980 <_fini@@Base+0x622c>
   11e6f:	lea    rsi,[rip+0x4686a]        # 586e0 <_fini@@Base+0x5f8c>
   11e76:	mov    edx,0x10d
   11e7b:	mov    rdi,r13
   11e7e:	xor    eax,eax
   11e80:	call   3a090 <g_str_equal@plt+0x2cdd0>
   11e85:	jmp    11d78 <g_str_equal@plt+0x4ab8>
   11e8a:	nop    WORD PTR [rax+rax*1+0x0]
   11e90:	mov    rax,QWORD PTR [rdi+0x10]
   11e94:	jmp    QWORD PTR [rax]
   11e96:	nop    WORD PTR cs:[rax+rax*1+0x0]
   11ea0:	mov    rax,QWORD PTR [rdi+0x10]
   11ea4:	jmp    QWORD PTR [rax+0x8]
   11ea7:	nop    WORD PTR [rax+rax*1+0x0]
   11eb0:	mov    rax,QWORD PTR [rdi+0x10]
   11eb4:	jmp    QWORD PTR [rax+0x10]
   11eb7:	nop    WORD PTR [rax+rax*1+0x0]
   11ec0:	test   rdi,rdi
   11ec3:	je     11ee0 <g_str_equal@plt+0x4c20>
   11ec5:	push   rbx
   11ec6:	mov    rax,QWORD PTR [rdi+0x10]
   11eca:	mov    rbx,rdi
   11ecd:	call   QWORD PTR [rax+0x18]
   11ed0:	mov    rdi,rbx
   11ed3:	pop    rbx
   11ed4:	jmp    d2b0 <g_free@plt>
   11ed9:	nop    DWORD PTR [rax+0x0]
   11ee0:	repz ret 
   11ee2:	nop    WORD PTR cs:[rax+rax*1+0x0]
   11eec:	nop    DWORD PTR [rax+0x0]
   11ef0:	lea    rdi,[rip+0x26e0e9]        # 27ffe0 <_fini@@Base+0x22d88c>
   11ef7:	jmp    202f0 <g_str_equal@plt+0x13030>
   11efc:	nop    DWORD PTR [rax+0x0]
   11f00:	push   rbx
   11f01:	lea    rcx,[rip+0xf8]        # 12000 <g_str_equal@plt+0x4d40>
   11f08:	lea    rdx,[rip+0x121]        # 12030 <g_str_equal@plt+0x4d70>
   11f0f:	lea    rsi,[rip+0x46caa]        # 58bc0 <_fini@@Base+0x646c>
   11f16:	xor    r8d,r8d
   11f19:	mov    rbx,rdi
   11f1c:	call   23200 <g_str_equal@plt+0x15f40>
   11f21:	lea    rcx,[rip+0x1d8]        # 12100 <g_str_equal@plt+0x4e40>
   11f28:	lea    rdx,[rip+0x211]        # 12140 <g_str_equal@plt+0x4e80>
   11f2f:	lea    rsi,[rip+0x46c96]        # 58bcc <_fini@@Base+0x6478>
   11f36:	mov    rdi,rbx
   11f39:	xor    r8d,r8d
   11f3c:	call   23060 <g_str_equal@plt+0x15da0>
   11f41:	sub    rsp,0x8
   11f45:	lea    r8,[rip+0x84]        # 11fd0 <g_str_equal@plt+0x4d10>
   11f4c:	lea    rcx,[rip+0x26eacd]        # 280a20 <_fini@@Base+0x22e2cc>
   11f53:	push   0x0
   11f55:	lea    rdx,[rip+0x46c74]        # 58bd0 <_fini@@Base+0x647c>
   11f5c:	lea    rsi,[rip+0x46c85]        # 58be8 <_fini@@Base+0x6494>
   11f63:	lea    r9,[rip+0x36]        # 11fa0 <g_str_equal@plt+0x4ce0>
   11f6a:	mov    rdi,rbx
   11f6d:	call   233b0 <g_str_equal@plt+0x160f0>
   11f72:	pop    rax
   11f73:	mov    rdi,rbx
   11f76:	lea    rcx,[rip+0x113]        # 12090 <g_str_equal@plt+0x4dd0>
   11f7d:	lea    rsi,[rip+0x46c6d]        # 58bf1 <_fini@@Base+0x649d>
   11f84:	pop    rdx
   11f85:	pop    rbx
   11f86:	lea    rdx,[rip+0x143]        # 120d0 <g_str_equal@plt+0x4e10>
   11f8d:	xor    r8d,r8d
   11f90:	jmp    23060 <g_str_equal@plt+0x15da0>
   11f95:	nop
   11f96:	nop    WORD PTR cs:[rax+rax*1+0x0]
   11fa0:	push   rbx
   11fa1:	lea    r8,[rip+0x46df8]        # 58da0 <_fini@@Base+0x664c>
   11fa8:	mov    ebx,esi
   11faa:	lea    rdx,[rip+0x46c57]        # 58c08 <_fini@@Base+0x64b4>
   11fb1:	lea    rsi,[rip+0x46c42]        # 58bfa <_fini@@Base+0x64a6>
   11fb8:	mov    ecx,0xcf
   11fbd:	call   205c0 <g_str_equal@plt+0x13300>
   11fc2:	mov    DWORD PTR [rax+0x30],ebx
   11fc5:	pop    rbx
   11fc6:	ret    
   11fc7:	nop    WORD PTR [rax+rax*1+0x0]
   11fd0:	lea    r8,[rip+0x46d89]        # 58d60 <_fini@@Base+0x660c>
   11fd7:	lea    rdx,[rip+0x46c2a]        # 58c08 <_fini@@Base+0x64b4>
   11fde:	lea    rsi,[rip+0x46c15]        # 58bfa <_fini@@Base+0x64a6>
   11fe5:	sub    rsp,0x8
   11fe9:	mov    ecx,0xd9
   11fee:	call   205c0 <g_str_equal@plt+0x13300>
   11ff3:	mov    eax,DWORD PTR [rax+0x30]
   11ff6:	add    rsp,0x8
   11ffa:	ret    
   11ffb:	nop    DWORD PTR [rax+rax*1+0x0]
   12000:	push   rbx
   12001:	lea    r8,[rip+0x46cd8]        # 58ce0 <_fini@@Base+0x658c>
   12008:	mov    ebx,esi
   1200a:	lea    rdx,[rip+0x46bf7]        # 58c08 <_fini@@Base+0x64b4>
   12011:	lea    rsi,[rip+0x46be2]        # 58bfa <_fini@@Base+0x64a6>
   12018:	mov    ecx,0x90
   1201d:	call   205c0 <g_str_equal@plt+0x13300>
   12022:	mov    BYTE PTR [rax+0x34],bl
   12025:	pop    rbx
   12026:	ret    
   12027:	nop    WORD PTR [rax+rax*1+0x0]
   12030:	lea    r8,[rip+0x46c69]        # 58ca0 <_fini@@Base+0x654c>
   12037:	lea    rdx,[rip+0x46bca]        # 58c08 <_fini@@Base+0x64b4>
   1203e:	lea    rsi,[rip+0x46bb5]        # 58bfa <_fini@@Base+0x64a6>
   12045:	sub    rsp,0x8
   12049:	mov    ecx,0x9a
   1204e:	call   205c0 <g_str_equal@plt+0x13300>
   12053:	movzx  eax,BYTE PTR [rax+0x34]
   12057:	add    rsp,0x8
   1205b:	ret    
   1205c:	nop    DWORD PTR [rax+0x0]
   12060:	lea    r8,[rip+0x46bf9]        # 58c60 <_fini@@Base+0x650c>
   12067:	lea    rdx,[rip+0x46b9a]        # 58c08 <_fini@@Base+0x64b4>
   1206e:	lea    rsi,[rip+0x46b85]        # 58bfa <_fini@@Base+0x64a6>
   12075:	sub    rsp,0x8
   12079:	mov    ecx,0xfa
   1207e:	call   205c0 <g_str_equal@plt+0x13300>
   12083:	mov    BYTE PTR [rax+0x34],0x1
   12087:	add    rsp,0x8
   1208b:	ret    
   1208c:	nop    DWORD PTR [rax+0x0]
   12090:	push   rbp
   12091:	push   rbx
   12092:	mov    rbp,rsi
   12095:	lea    r8,[rip+0x46d84]        # 58e20 <_fini@@Base+0x66cc>
   1209c:	lea    rdx,[rip+0x46b65]        # 58c08 <_fini@@Base+0x64b4>
   120a3:	lea    rsi,[rip+0x46b50]        # 58bfa <_fini@@Base+0x64a6>
   120aa:	sub    rsp,0x8
   120ae:	mov    ecx,0xba
   120b3:	call   205c0 <g_str_equal@plt+0x13300>
   120b8:	mov    rdi,rbp
   120bb:	mov    rbx,rax
   120be:	call   c370 <g_strdup@plt>
   120c3:	mov    QWORD PTR [rbx+0x38],rax
   120c7:	add    rsp,0x8
   120cb:	pop    rbx
   120cc:	pop    rbp
   120cd:	ret    
   120ce:	xchg   ax,ax
   120d0:	lea    r8,[rip+0x46d09]        # 58de0 <_fini@@Base+0x668c>
   120d7:	lea    rdx,[rip+0x46b2a]        # 58c08 <_fini@@Base+0x64b4>
   120de:	lea    rsi,[rip+0x46b15]        # 58bfa <_fini@@Base+0x64a6>
   120e5:	sub    rsp,0x8
   120e9:	mov    ecx,0xc4
   120ee:	call   205c0 <g_str_equal@plt+0x13300>
   120f3:	mov    rdi,QWORD PTR [rax+0x38]
   120f7:	add    rsp,0x8
   120fb:	jmp    c370 <g_strdup@plt>
   12100:	push   rbp
   12101:	push   rbx
   12102:	mov    rbp,rsi
   12105:	lea    r8,[rip+0x46c24]        # 58d30 <_fini@@Base+0x65dc>
   1210c:	lea    rdx,[rip+0x46af5]        # 58c08 <_fini@@Base+0x64b4>
   12113:	lea    rsi,[rip+0x46ae0]        # 58bfa <_fini@@Base+0x64a6>
   1211a:	sub    rsp,0x8
   1211e:	mov    ecx,0xa5
   12123:	call   205c0 <g_str_equal@plt+0x13300>
   12128:	mov    rdi,rbp
   1212b:	mov    rbx,rax
   1212e:	call   c370 <g_strdup@plt>
   12133:	mov    QWORD PTR [rbx+0x28],rax
   12137:	add    rsp,0x8
   1213b:	pop    rbx
   1213c:	pop    rbp
   1213d:	ret    
   1213e:	xchg   ax,ax
   12140:	lea    r8,[rip+0x46bc9]        # 58d10 <_fini@@Base+0x65bc>
   12147:	lea    rdx,[rip+0x46aba]        # 58c08 <_fini@@Base+0x64b4>
   1214e:	lea    rsi,[rip+0x46aa5]        # 58bfa <_fini@@Base+0x64a6>
   12155:	sub    rsp,0x8
   12159:	mov    ecx,0xaf
   1215e:	call   205c0 <g_str_equal@plt+0x13300>
   12163:	mov    rdi,QWORD PTR [rax+0x28]
   12167:	add    rsp,0x8
   1216b:	jmp    c370 <g_strdup@plt>
   12170:	push   rbx
   12171:	lea    r8,[rip+0x46b08]        # 58c80 <_fini@@Base+0x652c>
   12178:	lea    rdx,[rip+0x46a89]        # 58c08 <_fini@@Base+0x64b4>
   1217f:	lea    rsi,[rip+0x46a74]        # 58bfa <_fini@@Base+0x64a6>
   12186:	mov    ecx,0x103
   1218b:	call   205c0 <g_str_equal@plt+0x13300>
   12190:	mov    rdi,QWORD PTR [rax+0x28]
   12194:	mov    rbx,rax
   12197:	call   d2b0 <g_free@plt>
   1219c:	mov    rdi,QWORD PTR [rbx+0x38]
   121a0:	pop    rbx
   121a1:	jmp    d2b0 <g_free@plt>
   121a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   121b0:	xor    eax,eax
   121b2:	ret    
   121b3:	nop    DWORD PTR [rax]
   121b6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   121c0:	lea    rdi,[rip+0x26de99]        # 280060 <_fini@@Base+0x22d90c>
   121c7:	jmp    202f0 <g_str_equal@plt+0x13030>
   121cc:	nop    DWORD PTR [rax+0x0]
   121d0:	push   rbx
   121d1:	lea    r8,[rip+0x46d88]        # 58f60 <_fini@@Base+0x680c>
   121d8:	lea    rdx,[rip+0x46c69]        # 58e48 <_fini@@Base+0x66f4>
   121df:	lea    rsi,[rip+0x46cca]        # 58eb0 <_fini@@Base+0x675c>
   121e6:	mov    ecx,0xbb
   121eb:	mov    rbx,rdi
   121ee:	call   20770 <g_str_equal@plt+0x134b0>
   121f3:	lea    rdx,[rip+0x46]        # 12240 <g_str_equal@plt+0x4f80>
   121fa:	mov    rdi,rbx
   121fd:	lea    rcx,[rip+0x5c]        # 12260 <g_str_equal@plt+0x4fa0>
   12204:	lea    rsi,[rip+0x46cb4]        # 58ebf <_fini@@Base+0x676b>
   1220b:	xor    r8d,r8d
   1220e:	mov    QWORD PTR [rax+0x70],rdx
   12212:	lea    rdx,[rip+0xffffffffffffff97]        # 121b0 <g_str_equal@plt+0x4ef0>
   12219:	pop    rbx
   1221a:	jmp    23200 <g_str_equal@plt+0x15f40>
   1221f:	nop
   12220:	lea    r8,[rip+0x46cb9]        # 58ee0 <_fini@@Base+0x678c>
   12227:	lea    rdx,[rip+0x46c1a]        # 58e48 <_fini@@Base+0x66f4>
   1222e:	lea    rsi,[rip+0x46c91]        # 58ec6 <_fini@@Base+0x6772>
   12235:	mov    ecx,0xb2
   1223a:	jmp    205c0 <g_str_equal@plt+0x13300>
   1223f:	nop
   12240:	lea    rdx,[rip+0x46c78]        # 58ebf <_fini@@Base+0x676b>
   12247:	mov    rcx,rsi
   1224a:	mov    esi,0x1
   1224f:	jmp    21530 <g_str_equal@plt+0x14270>
   12254:	xchg   ax,ax
   12256:	nop    WORD PTR cs:[rax+rax*1+0x0]
   12260:	push   rbp
   12261:	push   rbx
   12262:	mov    rbp,rdx
   12265:	mov    ebx,esi
   12267:	lea    r8,[rip+0x46cb2]        # 58f20 <_fini@@Base+0x67cc>
   1226e:	lea    rdx,[rip+0x46bd3]        # 58e48 <_fini@@Base+0x66f4>
   12275:	lea    rsi,[rip+0x46c4a]        # 58ec6 <_fini@@Base+0x6772>
   1227c:	sub    rsp,0x8
   12280:	mov    ecx,0x7f
   12285:	call   205c0 <g_str_equal@plt+0x13300>
   1228a:	test   bl,bl
   1228c:	jne    12298 <g_str_equal@plt+0x4fd8>
   1228e:	add    rsp,0x8
   12292:	pop    rbx
   12293:	pop    rbp
   12294:	ret    
   12295:	nop    DWORD PTR [rax]
   12298:	add    rsp,0x8
   1229c:	mov    rdi,rbp
   1229f:	lea    r8,[rip+0x46be2]        # 58e88 <_fini@@Base+0x6734>
   122a6:	pop    rbx
   122a7:	pop    rbp
   122a8:	lea    rcx,[rip+0x46c51]        # 58f00 <_fini@@Base+0x67ac>
   122af:	lea    rsi,[rip+0x46b92]        # 58e48 <_fini@@Base+0x66f4>
   122b6:	mov    edx,0x6c
   122bb:	xor    eax,eax
   122bd:	jmp    3a090 <g_str_equal@plt+0x2cdd0>
   122c2:	nop    WORD PTR cs:[rax+rax*1+0x0]
   122cc:	nop    DWORD PTR [rax+0x0]
   122d0:	xor    eax,eax
   122d2:	ret    
   122d3:	nop    DWORD PTR [rax]
   122d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   122e0:	lea    rdi,[rip+0x26ddf9]        # 2800e0 <_fini@@Base+0x22d98c>
   122e7:	jmp    202f0 <g_str_equal@plt+0x13030>
   122ec:	nop    DWORD PTR [rax+0x0]
   122f0:	push   rbx
   122f1:	lea    r8,[rip+0x46de8]        # 590e0 <_fini@@Base+0x698c>
   122f8:	lea    rdx,[rip+0x46c89]        # 58f88 <_fini@@Base+0x6834>
   122ff:	lea    rsi,[rip+0x46baa]        # 58eb0 <_fini@@Base+0x675c>
   12306:	mov    ecx,0x110
   1230b:	mov    rbx,rdi
   1230e:	call   20770 <g_str_equal@plt+0x134b0>
   12313:	lea    rdx,[rip+0xd6]        # 123f0 <g_str_equal@plt+0x5130>
   1231a:	lea    rcx,[rip+0xef]        # 12410 <g_str_equal@plt+0x5150>
   12321:	lea    rsi,[rip+0x46b97]        # 58ebf <_fini@@Base+0x676b>
   12328:	mov    rdi,rbx
   1232b:	xor    r8d,r8d
   1232e:	mov    QWORD PTR [rax+0x70],rdx
   12332:	lea    rdx,[rip+0xffffffffffffff97]        # 122d0 <g_str_equal@plt+0x5010>
   12339:	call   23200 <g_str_equal@plt+0x15f40>
   1233e:	mov    rdi,rbx
   12341:	lea    rcx,[rip+0x38]        # 12380 <g_str_equal@plt+0x50c0>
   12348:	lea    rdx,[rip+0x71]        # 123c0 <g_str_equal@plt+0x5100>
   1234f:	pop    rbx
   12350:	lea    rsi,[rip+0x46c6f]        # 58fc6 <_fini@@Base+0x6872>
   12357:	xor    r8d,r8d
   1235a:	jmp    23060 <g_str_equal@plt+0x15da0>
   1235f:	nop
   12360:	lea    r8,[rip+0x46c79]        # 58fe0 <_fini@@Base+0x688c>
   12367:	lea    rdx,[rip+0x46c1a]        # 58f88 <_fini@@Base+0x6834>
   1236e:	lea    rsi,[rip+0x46c5a]        # 58fcf <_fini@@Base+0x687b>
   12375:	mov    ecx,0xf4
   1237a:	jmp    205c0 <g_str_equal@plt+0x13300>
   1237f:	nop
   12380:	push   rbp
   12381:	push   rbx
   12382:	mov    rbp,rsi
   12385:	lea    r8,[rip+0x46d14]        # 590a0 <_fini@@Base+0x694c>
   1238c:	lea    rdx,[rip+0x46bf5]        # 58f88 <_fini@@Base+0x6834>
   12393:	lea    rsi,[rip+0x46c35]        # 58fcf <_fini@@Base+0x687b>
   1239a:	sub    rsp,0x8
   1239e:	mov    ecx,0xfe
   123a3:	call   205c0 <g_str_equal@plt+0x13300>
   123a8:	mov    rdi,rbp
   123ab:	mov    rbx,rax
   123ae:	call   c370 <g_strdup@plt>
   123b3:	mov    QWORD PTR [rbx+0x40],rax
   123b7:	add    rsp,0x8
   123bb:	pop    rbx
   123bc:	pop    rbp
   123bd:	ret    
   123be:	xchg   ax,ax
   123c0:	lea    r8,[rip+0x46c99]        # 59060 <_fini@@Base+0x690c>
   123c7:	lea    rdx,[rip+0x46bba]        # 58f88 <_fini@@Base+0x6834>
   123ce:	lea    rsi,[rip+0x46bfa]        # 58fcf <_fini@@Base+0x687b>
   123d5:	sub    rsp,0x8
   123d9:	mov    ecx,0x108
   123de:	call   205c0 <g_str_equal@plt+0x13300>
   123e3:	mov    rdi,QWORD PTR [rax+0x40]
   123e7:	add    rsp,0x8
   123eb:	jmp    c370 <g_strdup@plt>
   123f0:	lea    rdx,[rip+0x46ac8]        # 58ebf <_fini@@Base+0x676b>
   123f7:	mov    rcx,rsi
   123fa:	mov    esi,0x1
   123ff:	jmp    21530 <g_str_equal@plt+0x14270>
   12404:	xchg   ax,ax
   12406:	nop    WORD PTR cs:[rax+rax*1+0x0]
   12410:	push   rbp
   12411:	push   rbx
   12412:	mov    rbp,rdx
   12415:	mov    ebx,esi
   12417:	lea    r8,[rip+0x46c02]        # 59020 <_fini@@Base+0x68cc>
   1241e:	lea    rdx,[rip+0x46b63]        # 58f88 <_fini@@Base+0x6834>
   12425:	lea    rsi,[rip+0x46ba3]        # 58fcf <_fini@@Base+0x687b>
   1242c:	sub    rsp,0x8
   12430:	mov    ecx,0xc1
   12435:	call   205c0 <g_str_equal@plt+0x13300>
   1243a:	test   bl,bl
   1243c:	jne    12448 <g_str_equal@plt+0x5188>
   1243e:	add    rsp,0x8
   12442:	pop    rbx
   12443:	pop    rbp
   12444:	ret    
   12445:	nop    DWORD PTR [rax]
   12448:	add    rsp,0x8
   1244c:	mov    rdi,rbp
   1244f:	lea    r8,[rip+0x46a32]        # 58e88 <_fini@@Base+0x6734>
   12456:	pop    rbx
   12457:	pop    rbp
   12458:	lea    rcx,[rip+0x46ba1]        # 59000 <_fini@@Base+0x68ac>
   1245f:	lea    rsi,[rip+0x46b22]        # 58f88 <_fini@@Base+0x6834>
   12466:	mov    edx,0xae
   1246b:	xor    eax,eax
   1246d:	jmp    3a090 <g_str_equal@plt+0x2cdd0>
   12472:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1247c:	nop    DWORD PTR [rax+0x0]
   12480:	xor    eax,eax
   12482:	ret    
   12483:	nop    DWORD PTR [rax]
   12486:	nop    WORD PTR cs:[rax+rax*1+0x0]
   12490:	lea    rdi,[rip+0x26dcc9]        # 280160 <_fini@@Base+0x22da0c>
   12497:	jmp    202f0 <g_str_equal@plt+0x13030>
   1249c:	nop    DWORD PTR [rax+0x0]
   124a0:	push   rbx
   124a1:	lea    r8,[rip+0x46e78]        # 59320 <_fini@@Base+0x6bcc>
   124a8:	lea    rdx,[rip+0x46c59]        # 59108 <_fini@@Base+0x69b4>
   124af:	lea    rsi,[rip+0x469fa]        # 58eb0 <_fini@@Base+0x675c>
   124b6:	mov    ecx,0x33d
   124bb:	mov    rbx,rdi
   124be:	call   20770 <g_str_equal@plt+0x134b0>
   124c3:	lea    rdx,[rip+0x166]        # 12630 <g_str_equal@plt+0x5370>
   124ca:	lea    rcx,[rip+0x1af]        # 12680 <g_str_equal@plt+0x53c0>
   124d1:	lea    rsi,[rip+0x469e7]        # 58ebf <_fini@@Base+0x676b>
   124d8:	mov    rdi,rbx
   124db:	xor    r8d,r8d
   124de:	mov    QWORD PTR [rax+0x70],rdx
   124e2:	lea    rdx,[rip+0xffffffffffffff97]        # 12480 <g_str_equal@plt+0x51c0>
   124e9:	call   23200 <g_str_equal@plt+0x15f40>
   124ee:	lea    rcx,[rip+0x3b]        # 12530 <g_str_equal@plt+0x5270>
   124f5:	lea    rdx,[rip+0x64]        # 12560 <g_str_equal@plt+0x52a0>
   124fc:	lea    rsi,[rip+0x46c44]        # 59147 <_fini@@Base+0x69f3>
   12503:	mov    rdi,rbx
   12506:	xor    r8d,r8d
   12509:	call   23200 <g_str_equal@plt+0x15f40>
   1250e:	mov    rdi,rbx
   12511:	lea    rcx,[rip+0xa8]        # 125c0 <g_str_equal@plt+0x5300>
   12518:	lea    rdx,[rip+0xe1]        # 12600 <g_str_equal@plt+0x5340>
   1251f:	pop    rbx
   12520:	lea    rsi,[rip+0x46c2d]        # 59154 <_fini@@Base+0x6a00>
   12527:	xor    r8d,r8d
   1252a:	jmp    23060 <g_str_equal@plt+0x15da0>
   1252f:	nop
   12530:	push   rbx
   12531:	lea    r8,[rip+0x46d28]        # 59260 <_fini@@Base+0x6b0c>
   12538:	mov    ebx,esi
   1253a:	lea    rdx,[rip+0x46bc7]        # 59108 <_fini@@Base+0x69b4>
   12541:	lea    rsi,[rip+0x46c17]        # 5915f <_fini@@Base+0x6a0b>
   12548:	mov    ecx,0x2fb
   1254d:	call   205c0 <g_str_equal@plt+0x13300>
   12552:	mov    BYTE PTR [rax+0x40],bl
   12555:	pop    rbx
   12556:	ret    
   12557:	nop    WORD PTR [rax+rax*1+0x0]
   12560:	lea    r8,[rip+0x46cb9]        # 59220 <_fini@@Base+0x6acc>
   12567:	lea    rdx,[rip+0x46b9a]        # 59108 <_fini@@Base+0x69b4>
   1256e:	lea    rsi,[rip+0x46bea]        # 5915f <_fini@@Base+0x6a0b>
   12575:	sub    rsp,0x8
   12579:	mov    ecx,0x31a
   1257e:	call   205c0 <g_str_equal@plt+0x13300>
   12583:	movzx  eax,BYTE PTR [rax+0x40]
   12587:	add    rsp,0x8
   1258b:	ret    
   1258c:	nop    DWORD PTR [rax+0x0]
   12590:	lea    r8,[rip+0x46be9]        # 59180 <_fini@@Base+0x6a2c>
   12597:	lea    rdx,[rip+0x46b6a]        # 59108 <_fini@@Base+0x69b4>
   1259e:	lea    rsi,[rip+0x46bba]        # 5915f <_fini@@Base+0x6a0b>
   125a5:	sub    rsp,0x8
   125a9:	mov    ecx,0x32a
   125ae:	call   205c0 <g_str_equal@plt+0x13300>
   125b3:	mov    BYTE PTR [rax+0x40],0x1
   125b7:	add    rsp,0x8
   125bb:	ret    
   125bc:	nop    DWORD PTR [rax+0x0]
   125c0:	push   rbp
   125c1:	push   rbx
   125c2:	mov    rbp,rsi
   125c5:	lea    r8,[rip+0x46d14]        # 592e0 <_fini@@Base+0x6b8c>
   125cc:	lea    rdx,[rip+0x46b35]        # 59108 <_fini@@Base+0x69b4>
   125d3:	lea    rsi,[rip+0x46b85]        # 5915f <_fini@@Base+0x6a0b>
   125da:	sub    rsp,0x8
   125de:	mov    ecx,0x306
   125e3:	call   205c0 <g_str_equal@plt+0x13300>
   125e8:	mov    rdi,rbp
   125eb:	mov    rbx,rax
   125ee:	call   c370 <g_strdup@plt>
   125f3:	mov    QWORD PTR [rbx+0x48],rax
   125f7:	add    rsp,0x8
   125fb:	pop    rbx
   125fc:	pop    rbp
   125fd:	ret    
   125fe:	xchg   ax,ax
   12600:	lea    r8,[rip+0x46c99]        # 592a0 <_fini@@Base+0x6b4c>
   12607:	lea    rdx,[rip+0x46afa]        # 59108 <_fini@@Base+0x69b4>
   1260e:	lea    rsi,[rip+0x46b4a]        # 5915f <_fini@@Base+0x6a0b>
   12615:	sub    rsp,0x8
   12619:	mov    ecx,0x310
   1261e:	call   205c0 <g_str_equal@plt+0x13300>
   12623:	mov    rdi,QWORD PTR [rax+0x48]
   12627:	add    rsp,0x8
   1262b:	jmp    c370 <g_strdup@plt>
   12630:	lea    rdx,[rip+0x46888]        # 58ebf <_fini@@Base+0x676b>
   12637:	mov    rcx,rsi
   1263a:	mov    esi,0x1
   1263f:	jmp    21530 <g_str_equal@plt+0x14270>
   12644:	xchg   ax,ax
   12646:	nop    WORD PTR cs:[rax+rax*1+0x0]
   12650:	lea    r8,[rip+0x46b49]        # 591a0 <_fini@@Base+0x6a4c>
   12657:	lea    rdx,[rip+0x46aaa]        # 59108 <_fini@@Base+0x69b4>
   1265e:	lea    rsi,[rip+0x46afa]        # 5915f <_fini@@Base+0x6a0b>
   12665:	sub    rsp,0x8
   12669:	mov    ecx,0x333
   1266e:	call   205c0 <g_str_equal@plt+0x13300>
   12673:	mov    rdi,QWORD PTR [rax+0x48]
   12677:	add    rsp,0x8
   1267b:	jmp    d2b0 <g_free@plt>
   12680:	push   rbp
   12681:	push   rbx
   12682:	mov    rbp,rdx
   12685:	mov    ebx,esi
   12687:	lea    r8,[rip+0x46b52]        # 591e0 <_fini@@Base+0x6a8c>
   1268e:	lea    rdx,[rip+0x46a73]        # 59108 <_fini@@Base+0x69b4>
   12695:	lea    rsi,[rip+0x46ac3]        # 5915f <_fini@@Base+0x6a0b>
   1269c:	sub    rsp,0x8
   126a0:	mov    ecx,0x2d1
   126a5:	call   205c0 <g_str_equal@plt+0x13300>
   126aa:	test   bl,bl
   126ac:	jne    126b8 <g_str_equal@plt+0x53f8>
   126ae:	add    rsp,0x8
   126b2:	pop    rbx
   126b3:	pop    rbp
   126b4:	ret    
   126b5:	nop    DWORD PTR [rax]
   126b8:	add    rsp,0x8
   126bc:	mov    rdi,rbp
   126bf:	lea    r8,[rip+0x467c2]        # 58e88 <_fini@@Base+0x6734>
   126c6:	pop    rbx
   126c7:	pop    rbp
   126c8:	lea    rcx,[rip+0x46af1]        # 591c0 <_fini@@Base+0x6a6c>
   126cf:	lea    rsi,[rip+0x46a32]        # 59108 <_fini@@Base+0x69b4>
   126d6:	mov    edx,0x2be
   126db:	xor    eax,eax
   126dd:	jmp    3a090 <g_str_equal@plt+0x2cdd0>
   126e2:	nop    WORD PTR cs:[rax+rax*1+0x0]
   126ec:	nop    DWORD PTR [rax+0x0]
   126f0:	mov    rdi,r8
   126f3:	lea    rcx,[rip+0x46d36]        # 59430 <_fini@@Base+0x6cdc>
   126fa:	lea    r8,[rip+0x46c41]        # 59342 <_fini@@Base+0x6bee>
   12701:	lea    rsi,[rip+0x46c58]        # 59360 <_fini@@Base+0x6c0c>
   12708:	sub    rsp,0x8
   1270c:	xor    eax,eax
   1270e:	mov    edx,0x235
   12713:	call   3a090 <g_str_equal@plt+0x2cdd0>
   12718:	xor    eax,eax
   1271a:	add    rsp,0x8
   1271e:	ret    
   1271f:	nop
   12720:	repz ret 
   12722:	nop    DWORD PTR [rax+0x0]
   12726:	nop    WORD PTR cs:[rax+rax*1+0x0]
   12730:	mov    rdi,rsi
   12733:	lea    r8,[rip+0x46c08]        # 59342 <_fini@@Base+0x6bee>
   1273a:	lea    rcx,[rip+0x46cbf]        # 59400 <_fini@@Base+0x6cac>
   12741:	lea    rsi,[rip+0x46c18]        # 59360 <_fini@@Base+0x6c0c>
   12748:	sub    rsp,0x8
   1274c:	xor    eax,eax
   1274e:	mov    edx,0x244
   12753:	call   3a090 <g_str_equal@plt+0x2cdd0>
   12758:	mov    eax,0xffffffff
   1275d:	add    rsp,0x8
   12761:	ret    
   12762:	nop    DWORD PTR [rax+0x0]
   12766:	nop    WORD PTR cs:[rax+rax*1+0x0]
   12770:	repz ret 
   12772:	nop    DWORD PTR [rax+0x0]
   12776:	nop    WORD PTR cs:[rax+rax*1+0x0]
   12780:	sub    rsp,0x8
   12784:	call   cc80 <__errno_location@plt>
   12789:	mov    DWORD PTR [rax],0xfffffffb
   1278f:	mov    rax,0xffffffffffffffff
   12796:	add    rsp,0x8
   1279a:	ret    
   1279b:	nop    DWORD PTR [rax+rax*1+0x0]
   127a0:	sub    rsp,0x8
   127a4:	call   cc80 <__errno_location@plt>
   127a9:	mov    DWORD PTR [rax],0xfffffffb
   127af:	mov    rax,0xffffffffffffffff
   127b6:	add    rsp,0x8
   127ba:	ret    
   127bb:	nop    DWORD PTR [rax+rax*1+0x0]
   127c0:	mov    rdi,rsi
   127c3:	lea    r8,[rip+0x46b78]        # 59342 <_fini@@Base+0x6bee>
   127ca:	lea    rcx,[rip+0x46bff]        # 593d0 <_fini@@Base+0x6c7c>
   127d1:	lea    rsi,[rip+0x46b88]        # 59360 <_fini@@Base+0x6c0c>
   127d8:	sub    rsp,0x8
   127dc:	xor    eax,eax
   127de:	mov    edx,0x26b
   127e3:	call   3a090 <g_str_equal@plt+0x2cdd0>
   127e8:	mov    eax,0xffffffff
   127ed:	add    rsp,0x8
   127f1:	ret    
   127f2:	nop    DWORD PTR [rax+0x0]
   127f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   12800:	xor    eax,eax
   12802:	ret    
   12803:	nop    DWORD PTR [rax]
   12806:	nop    WORD PTR cs:[rax+rax*1+0x0]
   12810:	mov    rdi,rsi
   12813:	lea    r8,[rip+0x46b28]        # 59342 <_fini@@Base+0x6bee>
   1281a:	lea    rcx,[rip+0x46b7f]        # 593a0 <_fini@@Base+0x6c4c>
   12821:	lea    rsi,[rip+0x46b38]        # 59360 <_fini@@Base+0x6c0c>
   12828:	sub    rsp,0x8
   1282c:	xor    eax,eax
   1282e:	mov    edx,0x27b
   12833:	call   3a090 <g_str_equal@plt+0x2cdd0>
   12838:	mov    eax,0xffffffff
   1283d:	add    rsp,0x8
   12841:	ret    
   12842:	nop    DWORD PTR [rax+0x0]
   12846:	nop    WORD PTR cs:[rax+rax*1+0x0]
   12850:	xor    eax,eax
   12852:	ret    
   12853:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1285d:	nop    DWORD PTR [rax]
   12860:	lea    rdi,[rip+0x26d979]        # 2801e0 <_fini@@Base+0x22da8c>
   12867:	jmp    202f0 <g_str_equal@plt+0x13030>
   1286c:	nop    DWORD PTR [rax+0x0]
   12870:	push   rbx
   12871:	lea    r8,[rip+0x46fc8]        # 59840 <_fini@@Base+0x70ec>
   12878:	lea    rdx,[rip+0x46bc9]        # 59448 <_fini@@Base+0x6cf4>
   1287f:	lea    rsi,[rip+0x4662a]        # 58eb0 <_fini@@Base+0x675c>
   12886:	mov    ecx,0x173
   1288b:	mov    rbx,rdi
   1288e:	call   20770 <g_str_equal@plt+0x134b0>
   12893:	lea    rdx,[rip+0x3d6]        # 12c70 <g_str_equal@plt+0x59b0>
   1289a:	lea    rcx,[rip+0x4ef]        # 12d90 <g_str_equal@plt+0x5ad0>
   128a1:	lea    rsi,[rip+0x46617]        # 58ebf <_fini@@Base+0x676b>
   128a8:	mov    rdi,rbx
   128ab:	xor    r8d,r8d
   128ae:	mov    QWORD PTR [rax+0x70],rdx
   128b2:	lea    rdx,[rip+0x127]        # 129e0 <g_str_equal@plt+0x5720>
   128b9:	call   23200 <g_str_equal@plt+0x15f40>
   128be:	sub    rsp,0x8
   128c2:	lea    r9,[rip+0xb7]        # 12980 <g_str_equal@plt+0x56c0>
   128c9:	lea    r8,[rip+0xe0]        # 129b0 <g_str_equal@plt+0x56f0>
   128d0:	push   0x0
   128d2:	lea    rcx,[rip+0x26e127]        # 280a00 <_fini@@Base+0x22e2ac>
   128d9:	lea    rdx,[rip+0x46d2f]        # 5960f <_fini@@Base+0x6ebb>
   128e0:	lea    rsi,[rip+0x4788f]        # 5a176 <_fini@@Base+0x7a22>
   128e7:	mov    rdi,rbx
   128ea:	call   233b0 <g_str_equal@plt+0x160f0>
   128ef:	lea    rcx,[rip+0x2fa]        # 12bf0 <g_str_equal@plt+0x5930>
   128f6:	lea    rdx,[rip+0x343]        # 12c40 <g_str_equal@plt+0x5980>
   128fd:	lea    rsi,[rip+0x46d1f]        # 59623 <_fini@@Base+0x6ecf>
   12904:	mov    rdi,rbx
   12907:	xor    r8d,r8d
   1290a:	call   23060 <g_str_equal@plt+0x15da0>
   1290f:	lea    rcx,[rip+0x25a]        # 12b70 <g_str_equal@plt+0x58b0>
   12916:	lea    rdx,[rip+0x2a3]        # 12bc0 <g_str_equal@plt+0x5900>
   1291d:	lea    rsi,[rip+0x40484]        # 52da8 <_fini@@Base+0x654>
   12924:	mov    rdi,rbx
   12927:	xor    r8d,r8d
   1292a:	call   23060 <g_str_equal@plt+0x15da0>
   1292f:	lea    rcx,[rip+0x1ba]        # 12af0 <g_str_equal@plt+0x5830>
   12936:	lea    rdx,[rip+0x203]        # 12b40 <g_str_equal@plt+0x5880>
   1293d:	lea    rsi,[rip+0x46ce4]        # 59628 <_fini@@Base+0x6ed4>
   12944:	mov    rdi,rbx
   12947:	xor    r8d,r8d
   1294a:	call   23060 <g_str_equal@plt+0x15da0>
   1294f:	pop    rax
   12950:	mov    rdi,rbx
   12953:	lea    rcx,[rip+0x116]        # 12a70 <g_str_equal@plt+0x57b0>
   1295a:	lea    rsi,[rip+0x4b632]        # 5df93 <_fini@@Base+0xb83f>
   12961:	pop    rdx
   12962:	pop    rbx
   12963:	lea    rdx,[rip+0x156]        # 12ac0 <g_str_equal@plt+0x5800>
   1296a:	xor    r8d,r8d
   1296d:	jmp    23060 <g_str_equal@plt+0x15da0>
   12972:	nop    DWORD PTR [rax+0x0]
   12976:	nop    WORD PTR cs:[rax+rax*1+0x0]
   12980:	push   rbx
   12981:	lea    r8,[rip+0x46d98]        # 59720 <_fini@@Base+0x6fcc>
   12988:	mov    ebx,esi
   1298a:	lea    rdx,[rip+0x46ab7]        # 59448 <_fini@@Base+0x6cf4>
   12991:	lea    rsi,[rip+0x52b61]        # 654f9 <_fini@@Base+0x12da5>
   12998:	mov    ecx,0xf9
   1299d:	call   205c0 <g_str_equal@plt+0x13300>
   129a2:	mov    DWORD PTR [rax+0x38],ebx
   129a5:	pop    rbx
   129a6:	ret    
   129a7:	nop    WORD PTR [rax+rax*1+0x0]
   129b0:	lea    r8,[rip+0x46d49]        # 59700 <_fini@@Base+0x6fac>
   129b7:	lea    rdx,[rip+0x46a8a]        # 59448 <_fini@@Base+0x6cf4>
   129be:	lea    rsi,[rip+0x52b34]        # 654f9 <_fini@@Base+0x12da5>
   129c5:	sub    rsp,0x8
   129c9:	mov    ecx,0x103
   129ce:	call   205c0 <g_str_equal@plt+0x13300>
   129d3:	mov    eax,DWORD PTR [rax+0x38]
   129d6:	add    rsp,0x8
   129da:	ret    
   129db:	nop    DWORD PTR [rax+rax*1+0x0]
   129e0:	lea    r8,[rip+0x46c99]        # 59680 <_fini@@Base+0x6f2c>
   129e7:	lea    rdx,[rip+0x46a5a]        # 59448 <_fini@@Base+0x6cf4>
   129ee:	lea    rsi,[rip+0x52b04]        # 654f9 <_fini@@Base+0x12da5>
   129f5:	sub    rsp,0x8
   129f9:	mov    ecx,0xef
   129fe:	call   205c0 <g_str_equal@plt+0x13300>
   12a03:	cmp    QWORD PTR [rax+0x40],0x0
   12a08:	setne  al
   12a0b:	add    rsp,0x8
   12a0f:	ret    
   12a10:	push   rbx
   12a11:	lea    r8,[rip+0x46c48]        # 59660 <_fini@@Base+0x6f0c>
   12a18:	lea    rdx,[rip+0x46a29]        # 59448 <_fini@@Base+0x6cf4>
   12a1f:	lea    rsi,[rip+0x52ad3]        # 654f9 <_fini@@Base+0x12da5>
   12a26:	mov    ecx,0x167
   12a2b:	call   205c0 <g_str_equal@plt+0x13300>
   12a30:	mov    rdi,QWORD PTR [rax+0x58]
   12a34:	mov    rbx,rax
   12a37:	call   d2b0 <g_free@plt>
   12a3c:	mov    rdi,QWORD PTR [rbx+0x48]
   12a40:	call   d2b0 <g_free@plt>
   12a45:	mov    rdi,QWORD PTR [rbx+0x50]
   12a49:	call   d2b0 <g_free@plt>
   12a4e:	mov    rdi,QWORD PTR [rbx+0x28]
   12a52:	call   d2b0 <g_free@plt>
   12a57:	mov    rdi,QWORD PTR [rbx+0x40]
   12a5b:	pop    rbx
   12a5c:	jmp    d2b0 <g_free@plt>
   12a61:	nop    DWORD PTR [rax+rax*1+0x0]
   12a66:	nop    WORD PTR cs:[rax+rax*1+0x0]
   12a70:	push   rbp
   12a71:	push   rbx
   12a72:	mov    rbp,rsi
   12a75:	lea    r8,[rip+0x46da4]        # 59820 <_fini@@Base+0x70cc>
   12a7c:	lea    rdx,[rip+0x469c5]        # 59448 <_fini@@Base+0x6cf4>
   12a83:	lea    rsi,[rip+0x52a6f]        # 654f9 <_fini@@Base+0x12da5>
   12a8a:	sub    rsp,0x8
   12a8e:	mov    ecx,0x138
   12a93:	call   205c0 <g_str_equal@plt+0x13300>
   12a98:	mov    rdi,QWORD PTR [rax+0x58]
   12a9c:	mov    rbx,rax
   12a9f:	call   d2b0 <g_free@plt>
   12aa4:	mov    rdi,rbp
   12aa7:	call   c370 <g_strdup@plt>
   12aac:	mov    QWORD PTR [rbx+0x58],rax
   12ab0:	add    rsp,0x8
   12ab4:	pop    rbx
   12ab5:	pop    rbp
   12ab6:	ret    
   12ab7:	nop    WORD PTR [rax+rax*1+0x0]
   12ac0:	lea    r8,[rip+0x46d39]        # 59800 <_fini@@Base+0x70ac>
   12ac7:	lea    rdx,[rip+0x4697a]        # 59448 <_fini@@Base+0x6cf4>
   12ace:	lea    rsi,[rip+0x52a24]        # 654f9 <_fini@@Base+0x12da5>
   12ad5:	sub    rsp,0x8
   12ad9:	mov    ecx,0x143
   12ade:	call   205c0 <g_str_equal@plt+0x13300>
   12ae3:	mov    rdi,QWORD PTR [rax+0x58]
   12ae7:	add    rsp,0x8
   12aeb:	jmp    c370 <g_strdup@plt>
   12af0:	push   rbp
   12af1:	push   rbx
   12af2:	mov    rbp,rsi
   12af5:	lea    r8,[rip+0x46ce4]        # 597e0 <_fini@@Base+0x708c>
   12afc:	lea    rdx,[rip+0x46945]        # 59448 <_fini@@Base+0x6cf4>
   12b03:	lea    rsi,[rip+0x529ef]        # 654f9 <_fini@@Base+0x12da5>
   12b0a:	sub    rsp,0x8
   12b0e:	mov    ecx,0x14d
   12b13:	call   205c0 <g_str_equal@plt+0x13300>
   12b18:	mov    rdi,QWORD PTR [rax+0x50]
   12b1c:	mov    rbx,rax
   12b1f:	call   d2b0 <g_free@plt>
   12b24:	mov    rdi,rbp
   12b27:	call   c370 <g_strdup@plt>
   12b2c:	mov    QWORD PTR [rbx+0x50],rax
   12b30:	add    rsp,0x8
   12b34:	pop    rbx
   12b35:	pop    rbp
   12b36:	ret    
   12b37:	nop    WORD PTR [rax+rax*1+0x0]
   12b40:	lea    r8,[rip+0x46c79]        # 597c0 <_fini@@Base+0x706c>
   12b47:	lea    rdx,[rip+0x468fa]        # 59448 <_fini@@Base+0x6cf4>
   12b4e:	lea    rsi,[rip+0x529a4]        # 654f9 <_fini@@Base+0x12da5>
   12b55:	sub    rsp,0x8
   12b59:	mov    ecx,0x158
   12b5e:	call   205c0 <g_str_equal@plt+0x13300>
   12b63:	mov    rdi,QWORD PTR [rax+0x50]
   12b67:	add    rsp,0x8
   12b6b:	jmp    c370 <g_strdup@plt>
   12b70:	push   rbp
   12b71:	push   rbx
   12b72:	mov    rbp,rsi
   12b75:	lea    r8,[rip+0x46c24]        # 597a0 <_fini@@Base+0x704c>
   12b7c:	lea    rdx,[rip+0x468c5]        # 59448 <_fini@@Base+0x6cf4>
   12b83:	lea    rsi,[rip+0x5296f]        # 654f9 <_fini@@Base+0x12da5>
   12b8a:	sub    rsp,0x8
   12b8e:	mov    ecx,0x123
   12b93:	call   205c0 <g_str_equal@plt+0x13300>
   12b98:	mov    rdi,QWORD PTR [rax+0x48]
   12b9c:	mov    rbx,rax
   12b9f:	call   d2b0 <g_free@plt>
   12ba4:	mov    rdi,rbp
   12ba7:	call   c370 <g_strdup@plt>
   12bac:	mov    QWORD PTR [rbx+0x48],rax
   12bb0:	add    rsp,0x8
   12bb4:	pop    rbx
   12bb5:	pop    rbp
   12bb6:	ret    
   12bb7:	nop    WORD PTR [rax+rax*1+0x0]
   12bc0:	lea    r8,[rip+0x46bb9]        # 59780 <_fini@@Base+0x702c>
   12bc7:	lea    rdx,[rip+0x4687a]        # 59448 <_fini@@Base+0x6cf4>
   12bce:	lea    rsi,[rip+0x52924]        # 654f9 <_fini@@Base+0x12da5>
   12bd5:	sub    rsp,0x8
   12bd9:	mov    ecx,0x12e
   12bde:	call   205c0 <g_str_equal@plt+0x13300>
   12be3:	mov    rdi,QWORD PTR [rax+0x48]
   12be7:	add    rsp,0x8
   12beb:	jmp    c370 <g_strdup@plt>
   12bf0:	push   rbp
   12bf1:	push   rbx
   12bf2:	mov    rbp,rsi
   12bf5:	lea    r8,[rip+0x46b64]        # 59760 <_fini@@Base+0x700c>
   12bfc:	lea    rdx,[rip+0x46845]        # 59448 <_fini@@Base+0x6cf4>
   12c03:	lea    rsi,[rip+0x528ef]        # 654f9 <_fini@@Base+0x12da5>
   12c0a:	sub    rsp,0x8
   12c0e:	mov    ecx,0x10e
   12c13:	call   205c0 <g_str_equal@plt+0x13300>
   12c18:	mov    rdi,QWORD PTR [rax+0x40]
   12c1c:	mov    rbx,rax
   12c1f:	call   d2b0 <g_free@plt>
   12c24:	mov    rdi,rbp
   12c27:	call   c370 <g_strdup@plt>
   12c2c:	mov    QWORD PTR [rbx+0x40],rax
   12c30:	add    rsp,0x8
   12c34:	pop    rbx
   12c35:	pop    rbp
   12c36:	ret    
   12c37:	nop    WORD PTR [rax+rax*1+0x0]
   12c40:	lea    r8,[rip+0x46af9]        # 59740 <_fini@@Base+0x6fec>
   12c47:	lea    rdx,[rip+0x467fa]        # 59448 <_fini@@Base+0x6cf4>
   12c4e:	lea    rsi,[rip+0x528a4]        # 654f9 <_fini@@Base+0x12da5>
   12c55:	sub    rsp,0x8
   12c59:	mov    ecx,0x119
   12c5e:	call   205c0 <g_str_equal@plt+0x13300>
   12c63:	mov    rdi,QWORD PTR [rax+0x40]
   12c67:	add    rsp,0x8
   12c6b:	jmp    c370 <g_strdup@plt>
   12c70:	lea    rdx,[rip+0x46248]        # 58ebf <_fini@@Base+0x676b>
   12c77:	mov    rcx,rsi
   12c7a:	mov    esi,0x1
   12c7f:	jmp    21530 <g_str_equal@plt+0x14270>
   12c84:	xchg   ax,ax
   12c86:	nop    WORD PTR cs:[rax+rax*1+0x0]
   12c90:	push   r14
   12c92:	push   r13
   12c94:	mov    r13,rdi
   12c97:	push   r12
   12c99:	push   rbp
   12c9a:	mov    r12,rsi
   12c9d:	push   rbx
   12c9e:	mov    rbp,rdx
   12ca1:	mov    r14,rcx
   12ca4:	call   21f90 <g_str_equal@plt+0x14cd0>
   12ca9:	mov    rsi,r13
   12cac:	mov    rdi,rax
   12caf:	call   22990 <g_str_equal@plt+0x156d0>
   12cb4:	test   rax,rax
   12cb7:	je     12d1a <g_str_equal@plt+0x5a5a>
   12cb9:	lea    rsi,[rip+0x52839]        # 654f9 <_fini@@Base+0x12da5>
   12cc0:	mov    rdi,rax
   12cc3:	call   20590 <g_str_equal@plt+0x132d0>
   12cc8:	test   rax,rax
   12ccb:	mov    rbx,rax
   12cce:	je     12d74 <g_str_equal@plt+0x5ab4>
   12cd4:	cmp    QWORD PTR [rax+0x28],0x0
   12cd9:	je     12d46 <g_str_equal@plt+0x5a86>
   12cdb:	mov    rax,QWORD PTR [rax+0x30]
   12cdf:	lea    rdi,[rax+0x1]
   12ce3:	call   ce00 <g_malloc0@plt>
   12ce8:	mov    QWORD PTR [r12],rax
   12cec:	mov    rsi,QWORD PTR [rbx+0x28]
   12cf0:	mov    rdi,rax
   12cf3:	mov    rdx,QWORD PTR [rbx+0x30]
   12cf7:	call   d220 <memcpy@plt>
   12cfc:	mov    rcx,rax
   12cff:	mov    rax,QWORD PTR [rbx+0x30]
   12d03:	mov    BYTE PTR [rcx+rax*1],0x0
   12d07:	mov    rax,QWORD PTR [rbx+0x30]
   12d0b:	mov    QWORD PTR [rbp+0x0],rax
   12d0f:	xor    eax,eax
   12d11:	pop    rbx
   12d12:	pop    rbp
   12d13:	pop    r12
   12d15:	pop    r13
   12d17:	pop    r14
   12d19:	ret    
   12d1a:	lea    r8,[rip+0x4690d]        # 5962e <_fini@@Base+0x6eda>
   12d21:	lea    rcx,[rip+0x46b58]        # 59880 <_fini@@Base+0x712c>
   12d28:	lea    rsi,[rip+0x46719]        # 59448 <_fini@@Base+0x6cf4>
   12d2f:	mov    r9,r13
   12d32:	mov    edx,0x19f
   12d37:	mov    rdi,r14
   12d3a:	call   3a090 <g_str_equal@plt+0x2cdd0>
   12d3f:	mov    eax,0xffffffff
   12d44:	jmp    12d11 <g_str_equal@plt+0x5a51>
   12d46:	lea    r8,[rip+0x46763]        # 594b0 <_fini@@Base+0x6d5c>
   12d4d:	lea    rcx,[rip+0x46b2c]        # 59880 <_fini@@Base+0x712c>
   12d54:	mov    r9,r13
   12d57:	mov    edx,0x1ae
   12d5c:	lea    rsi,[rip+0x466e5]        # 59448 <_fini@@Base+0x6cf4>
   12d63:	xor    eax,eax
   12d65:	mov    rdi,r14
   12d68:	call   3a090 <g_str_equal@plt+0x2cdd0>
   12d6d:	mov    eax,0xffffffff
   12d72:	jmp    12d11 <g_str_equal@plt+0x5a51>
   12d74:	mov    r9,r13
   12d77:	lea    r8,[rip+0x4670a]        # 59488 <_fini@@Base+0x6d34>
   12d7e:	lea    rcx,[rip+0x46afb]        # 59880 <_fini@@Base+0x712c>
   12d85:	mov    edx,0x1a8
   12d8a:	jmp    12d5c <g_str_equal@plt+0x5a9c>
   12d8c:	nop    DWORD PTR [rax+0x0]
   12d90:	push   r15
   12d92:	push   r14
   12d94:	lea    r8,[rip+0x46945]        # 596e0 <_fini@@Base+0x6f8c>
   12d9b:	push   r13
   12d9d:	push   r12
   12d9f:	mov    r12,rdx
   12da2:	push   rbp
   12da3:	push   rbx
   12da4:	mov    ebp,esi
   12da6:	lea    rdx,[rip+0x4669b]        # 59448 <_fini@@Base+0x6cf4>
   12dad:	lea    rsi,[rip+0x52745]        # 654f9 <_fini@@Base+0x12da5>
   12db4:	mov    ecx,0xbb
   12db9:	sub    rsp,0x58
   12dbd:	mov    rax,QWORD PTR fs:0x28
   12dc6:	mov    QWORD PTR [rsp+0x48],rax
   12dcb:	xor    eax,eax
   12dcd:	call   205c0 <g_str_equal@plt+0x13300>
   12dd2:	test   bpl,bpl
   12dd5:	mov    rbx,rax
   12dd8:	je     12e68 <g_str_equal@plt+0x5ba8>
   12dde:	mov    QWORD PTR [rsp+0x30],0x0
   12de7:	mov    QWORD PTR [rsp+0x38],0x0
   12df0:	mov    QWORD PTR [rsp+0x40],0x0
   12df9:	mov    rdi,QWORD PTR [rax+0x48]
   12dfd:	mov    QWORD PTR [rsp+0x18],0x0
   12e06:	mov    QWORD PTR [rsp+0x20],0x0
   12e0f:	mov    rbp,QWORD PTR [rax+0x40]
   12e13:	test   rdi,rdi
   12e16:	je     12f80 <g_str_equal@plt+0x5cc0>
   12e1c:	test   rbp,rbp
   12e1f:	je     12fc0 <g_str_equal@plt+0x5d00>
   12e25:	lea    rdi,[rsp+0x18]
   12e2a:	lea    r8,[rip+0x4669f]        # 594d0 <_fini@@Base+0x6d7c>
   12e31:	lea    rcx,[rip+0x46888]        # 596c0 <_fini@@Base+0x6f6c>
   12e38:	lea    rsi,[rip+0x46609]        # 59448 <_fini@@Base+0x6cf4>
   12e3f:	mov    edx,0x2e
   12e44:	xor    eax,eax
   12e46:	call   3a090 <g_str_equal@plt+0x2cdd0>
   12e4b:	xor    r15d,r15d
   12e4e:	xor    r14d,r14d
   12e51:	mov    rsi,QWORD PTR [rsp+0x18]
   12e56:	test   rsi,rsi
   12e59:	je     12ea0 <g_str_equal@plt+0x5be0>
   12e5b:	mov    rdi,r12
   12e5e:	call   3a4c0 <g_str_equal@plt+0x2d200>
   12e63:	jmp    12e79 <g_str_equal@plt+0x5bb9>
   12e65:	nop    DWORD PTR [rax]
   12e68:	mov    rdi,QWORD PTR [rax+0x28]
   12e6c:	call   d2b0 <g_free@plt>
   12e71:	mov    QWORD PTR [rbx+0x30],0x0
   12e79:	mov    rax,QWORD PTR [rsp+0x48]
   12e7e:	xor    rax,QWORD PTR fs:0x28
   12e87:	jne    13295 <g_str_equal@plt+0x5fd5>
   12e8d:	add    rsp,0x58
   12e91:	pop    rbx
   12e92:	pop    rbp
   12e93:	pop    r12
   12e95:	pop    r13
   12e97:	pop    r14
   12e99:	pop    r15
   12e9b:	ret    
   12e9c:	nop    DWORD PTR [rax+0x0]
   12ea0:	mov    rdi,QWORD PTR [rbx+0x50]
   12ea4:	test   rdi,rdi
   12ea7:	je     12fa8 <g_str_equal@plt+0x5ce8>
   12ead:	lea    rbp,[rsp+0x18]
   12eb2:	lea    rdx,[rsp+0x30]
   12eb7:	lea    rsi,[rsp+0x28]
   12ebc:	mov    QWORD PTR [rsp+0x28],0x0
   12ec5:	mov    QWORD PTR [rsp+0x20],0x0
   12ece:	mov    rcx,rbp
   12ed1:	call   12c90 <g_str_equal@plt+0x59d0>
   12ed6:	test   eax,eax
   12ed8:	js     13014 <g_str_equal@plt+0x5d54>
   12ede:	cmp    QWORD PTR [rsp+0x30],0x20
   12ee4:	jne    12ff0 <g_str_equal@plt+0x5d30>
   12eea:	mov    rdi,QWORD PTR [rbx+0x58]
   12eee:	lea    r8,[rip+0x46663]        # 59558 <_fini@@Base+0x6e04>
   12ef5:	lea    rcx,[rip+0x467a4]        # 596a0 <_fini@@Base+0x6f4c>
   12efc:	mov    edx,0x5e
   12f01:	test   rdi,rdi
   12f04:	je     13003 <g_str_equal@plt+0x5d43>
   12f0a:	lea    rdx,[rsp+0x40]
   12f0f:	mov    rcx,rbp
   12f12:	mov    rsi,0xffffffffffffffff
   12f19:	call   43090 <g_str_equal@plt+0x35dd0>
   12f1e:	test   rax,rax
   12f21:	mov    r13,rax
   12f24:	je     13014 <g_str_equal@plt+0x5d54>
   12f2a:	mov    r9,QWORD PTR [rsp+0x40]
   12f2f:	cmp    r9,0x10
   12f33:	je     13137 <g_str_equal@plt+0x5e77>
   12f39:	lea    r8,[rip+0x46640]        # 59580 <_fini@@Base+0x6e2c>
   12f40:	lea    rcx,[rip+0x46759]        # 596a0 <_fini@@Base+0x6f4c>
   12f47:	lea    rsi,[rip+0x464fa]        # 59448 <_fini@@Base+0x6cf4>
   12f4e:	mov    edx,0x68
   12f53:	mov    rdi,rbp
   12f56:	xor    eax,eax
   12f58:	call   3a090 <g_str_equal@plt+0x2cdd0>
   12f5d:	xor    r15d,r15d
   12f60:	mov    QWORD PTR [rsp+0x8],0x0
   12f69:	mov    QWORD PTR [rsp],0x0
   12f71:	jmp    1302b <g_str_equal@plt+0x5d6b>
   12f76:	nop    WORD PTR cs:[rax+rax*1+0x0]
   12f80:	test   rbp,rbp
   12f83:	je     13078 <g_str_equal@plt+0x5db8>
   12f89:	mov    rdi,rbp
   12f8c:	call   c720 <strlen@plt>
   12f91:	mov    rdi,rbp
   12f94:	mov    r15,rax
   12f97:	call   c370 <g_strdup@plt>
   12f9c:	mov    r14,rax
   12f9f:	jmp    12e51 <g_str_equal@plt+0x5b91>
   12fa4:	nop    DWORD PTR [rax+0x0]
   12fa8:	mov    eax,DWORD PTR [rbx+0x38]
   12fab:	test   eax,eax
   12fad:	jne    130b0 <g_str_equal@plt+0x5df0>
   12fb3:	mov    QWORD PTR [rbx+0x28],r14
   12fb7:	mov    QWORD PTR [rbx+0x30],r15
   12fbb:	jmp    12e79 <g_str_equal@plt+0x5bb9>
   12fc0:	lea    rcx,[rsp+0x40]
   12fc5:	lea    rdx,[rsp+0x38]
   12fca:	lea    rsi,[rsp+0x30]
   12fcf:	call   ce70 <g_file_get_contents@plt>
   12fd4:	test   eax,eax
   12fd6:	je     130f0 <g_str_equal@plt+0x5e30>
   12fdc:	mov    r14,QWORD PTR [rsp+0x30]
   12fe1:	mov    r15,QWORD PTR [rsp+0x38]
   12fe6:	jmp    12e51 <g_str_equal@plt+0x5b91>
   12feb:	nop    DWORD PTR [rax+rax*1+0x0]
   12ff0:	lea    r8,[rip+0x46539]        # 59530 <_fini@@Base+0x6ddc>
   12ff7:	lea    rcx,[rip+0x466a2]        # 596a0 <_fini@@Base+0x6f4c>
   12ffe:	mov    edx,0x59
   13003:	lea    rsi,[rip+0x4643e]        # 59448 <_fini@@Base+0x6cf4>
   1300a:	mov    rdi,rbp
   1300d:	xor    eax,eax
   1300f:	call   3a090 <g_str_equal@plt+0x2cdd0>
   13014:	mov    QWORD PTR [rsp+0x8],0x0
   1301d:	mov    QWORD PTR [rsp],0x0
   13025:	xor    r13d,r13d
   13028:	xor    r15d,r15d
   1302b:	mov    rdi,r15
   1302e:	call   d2b0 <g_free@plt>
   13033:	mov    rdi,r13
   13036:	call   d2b0 <g_free@plt>
   1303b:	mov    rdi,QWORD PTR [rsp+0x28]
   13040:	call   d2b0 <g_free@plt>
   13045:	mov    rdi,QWORD PTR [rsp]
   13049:	call   11ec0 <g_str_equal@plt+0x4c00>
   1304e:	mov    rdi,r14
   13051:	call   d2b0 <g_free@plt>
   13056:	mov    rsi,QWORD PTR [rsp+0x18]
   1305b:	test   rsi,rsi
   1305e:	jne    12e5b <g_str_equal@plt+0x5b9b>
   13064:	mov    r15,QWORD PTR [rsp+0x20]
   13069:	mov    r14,QWORD PTR [rsp+0x8]
   1306e:	jmp    12fb3 <g_str_equal@plt+0x5cf3>
   13073:	nop    DWORD PTR [rax+rax*1+0x0]
   13078:	lea    rdi,[rsp+0x18]
   1307d:	lea    r8,[rip+0x4647c]        # 59500 <_fini@@Base+0x6dac>
   13084:	lea    rcx,[rip+0x46635]        # 596c0 <_fini@@Base+0x6f6c>
   1308b:	lea    rsi,[rip+0x463b6]        # 59448 <_fini@@Base+0x6cf4>
   13092:	mov    edx,0x3e
   13097:	xor    eax,eax
   13099:	xor    r15d,r15d
   1309c:	xor    r14d,r14d
   1309f:	call   3a090 <g_str_equal@plt+0x2cdd0>
   130a4:	jmp    12e51 <g_str_equal@plt+0x5b91>
   130a9:	nop    DWORD PTR [rax+0x0]
   130b0:	lea    rcx,[rsp+0x18]
   130b5:	lea    rdx,[rsp+0x20]
   130ba:	mov    rsi,r15
   130bd:	mov    rdi,r14
   130c0:	call   43090 <g_str_equal@plt+0x35dd0>
   130c5:	mov    rdi,r14
   130c8:	mov    rbp,rax
   130cb:	call   d2b0 <g_free@plt>
   130d0:	mov    rsi,QWORD PTR [rsp+0x18]
   130d5:	test   rsi,rsi
   130d8:	jne    12e5b <g_str_equal@plt+0x5b9b>
   130de:	mov    r15,QWORD PTR [rsp+0x20]
   130e3:	mov    r14,rbp
   130e6:	jmp    12fb3 <g_str_equal@plt+0x5cf3>
   130eb:	nop    DWORD PTR [rax+rax*1+0x0]
   130f0:	lea    rdi,[rsp+0x18]
   130f5:	sub    rsp,0x8
   130f9:	lea    rcx,[rip+0x465c0]        # 596c0 <_fini@@Base+0x6f6c>
   13100:	mov    rax,QWORD PTR [rsp+0x48]
   13105:	lea    r8,[rip+0x46539]        # 59645 <_fini@@Base+0x6ef1>
   1310c:	lea    rsi,[rip+0x46335]        # 59448 <_fini@@Base+0x6cf4>
   13113:	mov    edx,0x34
   13118:	push   QWORD PTR [rax+0x8]
   1311b:	mov    r9,QWORD PTR [rbx+0x48]
   1311f:	xor    eax,eax
   13121:	call   3a090 <g_str_equal@plt+0x2cdd0>
   13126:	mov    rdi,QWORD PTR [rsp+0x50]
   1312b:	call   cff0 <g_error_free@plt>
   13130:	pop    rdx
   13131:	pop    rcx
   13132:	jmp    12e4b <g_str_equal@plt+0x5b8b>
   13137:	mov    rcx,QWORD PTR [rsp+0x30]
   1313c:	mov    rdx,QWORD PTR [rsp+0x28]
   13141:	mov    r8,rbp
   13144:	mov    esi,0x1
   13149:	mov    edi,0x2
   1314e:	call   119a0 <g_str_equal@plt+0x46e0>
   13153:	test   rax,rax
   13156:	mov    QWORD PTR [rsp],rax
   1315a:	je     131f2 <g_str_equal@plt+0x5f32>
   13160:	mov    rdx,QWORD PTR [rsp+0x40]
   13165:	mov    rcx,rbp
   13168:	mov    rsi,r13
   1316b:	mov    rdi,rax
   1316e:	call   11eb0 <g_str_equal@plt+0x4bf0>
   13173:	test   eax,eax
   13175:	js     131f2 <g_str_equal@plt+0x5f32>
   13177:	cmp    DWORD PTR [rbx+0x38],0x1
   1317b:	je     1323f <g_str_equal@plt+0x5f7f>
   13181:	lea    rdi,[r15+0x1]
   13185:	mov    QWORD PTR [rsp+0x38],r15
   1318a:	xor    r15d,r15d
   1318d:	call   ce00 <g_malloc0@plt>
   13192:	mov    rcx,QWORD PTR [rsp+0x38]
   13197:	mov    QWORD PTR [rsp+0x8],rax
   1319c:	mov    rsi,r14
   1319f:	mov    rdx,QWORD PTR [rsp+0x8]
   131a4:	mov    rdi,QWORD PTR [rsp]
   131a8:	mov    r8,rbp
   131ab:	call   11ea0 <g_str_equal@plt+0x4be0>
   131b0:	test   eax,eax
   131b2:	js     13287 <g_str_equal@plt+0x5fc7>
   131b8:	mov    rax,QWORD PTR [rsp+0x38]
   131bd:	mov    rcx,QWORD PTR [rsp+0x8]
   131c2:	movzx  r9d,BYTE PTR [rcx+rax*1-0x1]
   131c8:	cmp    r9b,0x10
   131cc:	ja     13203 <g_str_equal@plt+0x5f43>
   131ce:	movzx  edx,r9b
   131d2:	cmp    rax,rdx
   131d5:	jb     13203 <g_str_equal@plt+0x5f43>
   131d7:	mov    rcx,QWORD PTR [rsp+0x8]
   131dc:	sub    rax,rdx
   131df:	mov    QWORD PTR [rsp+0x38],rax
   131e4:	mov    QWORD PTR [rsp+0x20],rax
   131e9:	mov    BYTE PTR [rcx+rax*1],0x0
   131ed:	jmp    1302b <g_str_equal@plt+0x5d6b>
   131f2:	mov    QWORD PTR [rsp+0x8],0x0
   131fb:	xor    r15d,r15d
   131fe:	jmp    1302b <g_str_equal@plt+0x5d6b>
   13203:	lea    r8,[rip+0x4639e]        # 595a8 <_fini@@Base+0x6e54>
   1320a:	lea    rcx,[rip+0x4648f]        # 596a0 <_fini@@Base+0x6f4c>
   13211:	lea    rsi,[rip+0x46230]        # 59448 <_fini@@Base+0x6cf4>
   13218:	mov    edx,0x92
   1321d:	mov    rdi,rbp
   13220:	xor    eax,eax
   13222:	call   3a090 <g_str_equal@plt+0x2cdd0>
   13227:	mov    rdi,QWORD PTR [rsp+0x8]
   1322c:	call   d2b0 <g_free@plt>
   13231:	mov    QWORD PTR [rsp+0x8],0x0
   1323a:	jmp    1302b <g_str_equal@plt+0x5d6b>
   1323f:	lea    rdx,[rsp+0x38]
   13244:	mov    rsi,r15
   13247:	mov    rcx,rbp
   1324a:	mov    rdi,r14
   1324d:	call   43090 <g_str_equal@plt+0x35dd0>
   13252:	test   rax,rax
   13255:	mov    r15,rax
   13258:	mov    QWORD PTR [rsp+0x8],0x0
   13261:	je     1302b <g_str_equal@plt+0x5d6b>
   13267:	mov    rax,QWORD PTR [rsp+0x38]
   1326c:	lea    rdi,[rax+0x1]
   13270:	call   ce00 <g_malloc0@plt>
   13275:	mov    rcx,QWORD PTR [rsp+0x38]
   1327a:	mov    QWORD PTR [rsp+0x8],rax
   1327f:	mov    rsi,r15
   13282:	jmp    1319f <g_str_equal@plt+0x5edf>
   13287:	mov    QWORD PTR [rsp+0x8],0x0
   13290:	jmp    1302b <g_str_equal@plt+0x5d6b>
   13295:	call   cd30 <__stack_chk_fail@plt>
   1329a:	nop    WORD PTR [rax+rax*1+0x0]
   132a0:	push   rbp
   132a1:	push   rbx
   132a2:	mov    rbx,rsi
   132a5:	mov    rcx,rbx
   132a8:	mov    rbp,rdi
   132ab:	sub    rsp,0x28
   132af:	lea    rdx,[rsp+0x10]
   132b4:	lea    rsi,[rsp+0x8]
   132b9:	mov    rax,QWORD PTR fs:0x28
   132c2:	mov    QWORD PTR [rsp+0x18],rax
   132c7:	xor    eax,eax
   132c9:	call   12c90 <g_str_equal@plt+0x59d0>
   132ce:	xor    edx,edx
   132d0:	test   eax,eax
   132d2:	js     132ec <g_str_equal@plt+0x602c>
   132d4:	mov    rsi,QWORD PTR [rsp+0x10]
   132d9:	mov    rdi,QWORD PTR [rsp+0x8]
   132de:	call   c0c0 <g_utf8_validate@plt>
   132e3:	test   eax,eax
   132e5:	mov    rdx,QWORD PTR [rsp+0x8]
   132ea:	je     13310 <g_str_equal@plt+0x6050>
   132ec:	mov    rcx,QWORD PTR [rsp+0x18]
   132f1:	xor    rcx,QWORD PTR fs:0x28
   132fa:	mov    rax,rdx
   132fd:	jne    13343 <g_str_equal@plt+0x6083>
   132ff:	add    rsp,0x28
   13303:	pop    rbx
   13304:	pop    rbp
   13305:	ret    
   13306:	nop    WORD PTR cs:[rax+rax*1+0x0]
   13310:	lea    r8,[rip+0x462d1]        # 595e8 <_fini@@Base+0x6e94>
   13317:	lea    rcx,[rip+0x46542]        # 59860 <_fini@@Base+0x710c>
   1331e:	lea    rsi,[rip+0x46123]        # 59448 <_fini@@Base+0x6cf4>
   13325:	mov    edx,0x1cb
   1332a:	mov    r9,rbp
   1332d:	mov    rdi,rbx
   13330:	call   3a090 <g_str_equal@plt+0x2cdd0>
   13335:	mov    rdi,QWORD PTR [rsp+0x8]
   1333a:	call   d2b0 <g_free@plt>
   1333f:	xor    edx,edx
   13341:	jmp    132ec <g_str_equal@plt+0x602c>
   13343:	call   cd30 <__stack_chk_fail@plt>
   13348:	nop    DWORD PTR [rax+rax*1+0x0]
   13350:	push   rbx
   13351:	mov    rcx,rsi
   13354:	sub    rsp,0x20
   13358:	lea    rdx,[rsp+0x10]
   1335d:	lea    rsi,[rsp+0x8]
   13362:	mov    rax,QWORD PTR fs:0x28
   1336b:	mov    QWORD PTR [rsp+0x18],rax
   13370:	xor    eax,eax
   13372:	call   12c90 <g_str_equal@plt+0x59d0>
   13377:	test   eax,eax
   13379:	js     133b0 <g_str_equal@plt+0x60f0>
   1337b:	mov    rdi,QWORD PTR [rsp+0x8]
   13380:	mov    rsi,QWORD PTR [rsp+0x10]
   13385:	call   cdf0 <g_base64_encode@plt>
   1338a:	mov    rdi,QWORD PTR [rsp+0x8]
   1338f:	mov    rbx,rax
   13392:	call   d2b0 <g_free@plt>
   13397:	mov    rax,rbx
   1339a:	mov    rbx,QWORD PTR [rsp+0x18]
   1339f:	xor    rbx,QWORD PTR fs:0x28
   133a8:	jne    133b4 <g_str_equal@plt+0x60f4>
   133aa:	add    rsp,0x20
   133ae:	pop    rbx
   133af:	ret    
   133b0:	xor    ebx,ebx
   133b2:	jmp    13397 <g_str_equal@plt+0x60d7>
   133b4:	call   cd30 <__stack_chk_fail@plt>
   133b9:	nop    DWORD PTR [rax+0x0]
   133c0:	push   rbx
   133c1:	mov    rbx,rdi
   133c4:	lea    rdi,[rip+0x464cb]        # 59896 <_fini@@Base+0x7142>
   133cb:	xor    esi,esi
   133cd:	xor    eax,eax
   133cf:	call   ca20 <open64@plt>
   133d4:	cmp    eax,0xffffffff
   133d7:	mov    DWORD PTR [rip+0x2716a3],eax        # 284a80 <stdout@@GLIBC_2.2.5+0x138>
   133dd:	je     133f0 <g_str_equal@plt+0x6130>
   133df:	test   eax,eax
   133e1:	js     133fa <g_str_equal@plt+0x613a>
   133e3:	xor    eax,eax
   133e5:	pop    rbx
   133e6:	ret    
   133e7:	nop    WORD PTR [rax+rax*1+0x0]
   133f0:	call   cc80 <__errno_location@plt>
   133f5:	cmp    DWORD PTR [rax],0x2
   133f8:	je     13428 <g_str_equal@plt+0x6168>
   133fa:	lea    r8,[rip+0x464cf]        # 598d0 <_fini@@Base+0x717c>
   13401:	lea    rcx,[rip+0x46588]        # 59990 <_fini@@Base+0x723c>
   13408:	lea    rsi,[rip+0x464e9]        # 598f8 <_fini@@Base+0x71a4>
   1340f:	mov    rdi,rbx
   13412:	xor    eax,eax
   13414:	mov    edx,0x2c
   13419:	call   3a090 <g_str_equal@plt+0x2cdd0>
   1341e:	mov    eax,0xffffffff
   13423:	pop    rbx
   13424:	ret    
   13425:	nop    DWORD PTR [rax]
   13428:	lea    rdi,[rip+0x46474]        # 598a3 <_fini@@Base+0x714f>
   1342f:	xor    esi,esi
   13431:	xor    eax,eax
   13433:	call   ca20 <open64@plt>
   13438:	mov    DWORD PTR [rip+0x271642],eax        # 284a80 <stdout@@GLIBC_2.2.5+0x138>
   1343e:	jmp    133df <g_str_equal@plt+0x611f>
   13440:	test   rsi,rsi
   13443:	je     134fe <g_str_equal@plt+0x623e>
   13449:	push   r12
   1344b:	mov    r12,rdx
   1344e:	push   rbp
   1344f:	mov    rbp,rdi
   13452:	push   rbx
   13453:	mov    rbx,rsi
   13456:	jmp    1346c <g_str_equal@plt+0x61ac>
   13458:	nop    DWORD PTR [rax+rax*1+0x0]
   13460:	je     134d0 <g_str_equal@plt+0x6210>
   13462:	cdqe   
   13464:	add    rbp,rax
   13467:	sub    rbx,rax
   1346a:	je     134c0 <g_str_equal@plt+0x6200>
   1346c:	mov    edi,DWORD PTR [rip+0x27160e]        # 284a80 <stdout@@GLIBC_2.2.5+0x138>
   13472:	mov    rdx,rbx
   13475:	mov    rsi,rbp
   13478:	call   c490 <read@plt>
   1347d:	test   eax,eax
   1347f:	jns    13460 <g_str_equal@plt+0x61a0>
   13481:	call   cc80 <__errno_location@plt>
   13486:	mov    r8d,DWORD PTR [rax]
   13489:	lea    r9,[rip+0x4641f]        # 598af <_fini@@Base+0x715b>
   13490:	lea    rcx,[rip+0x464d9]        # 59970 <_fini@@Base+0x721c>
   13497:	lea    rsi,[rip+0x4645a]        # 598f8 <_fini@@Base+0x71a4>
   1349e:	mov    rdi,r12
   134a1:	xor    eax,eax
   134a3:	mov    edx,0x47
   134a8:	call   3a140 <g_str_equal@plt+0x2ce80>
   134ad:	pop    rbx
   134ae:	mov    eax,0xffffffff
   134b3:	pop    rbp
   134b4:	pop    r12
   134b6:	ret    
   134b7:	nop    WORD PTR [rax+rax*1+0x0]
   134c0:	pop    rbx
   134c1:	xor    eax,eax
   134c3:	pop    rbp
   134c4:	pop    r12
   134c6:	ret    
   134c7:	nop    WORD PTR [rax+rax*1+0x0]
   134d0:	lea    r8,[rip+0x46469]        # 59940 <_fini@@Base+0x71ec>
   134d7:	lea    rcx,[rip+0x46492]        # 59970 <_fini@@Base+0x721c>
   134de:	lea    rsi,[rip+0x46413]        # 598f8 <_fini@@Base+0x71a4>
   134e5:	mov    rdi,r12
   134e8:	xor    eax,eax
   134ea:	mov    edx,0x4b
   134ef:	call   3a090 <g_str_equal@plt+0x2cdd0>
   134f4:	pop    rbx
   134f5:	mov    eax,0xffffffff
   134fa:	pop    rbp
   134fb:	pop    r12
   134fd:	ret    
   134fe:	xor    eax,eax
   13500:	ret    
   13501:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1350b:	nop    DWORD PTR [rax+rax*1+0x0]
   13510:	push   rbp
   13511:	push   rbx
   13512:	mov    rbp,rsi
   13515:	mov    rbx,rdi
   13518:	mov    edi,0x1
   1351d:	sub    rsp,0xa8
   13524:	mov    rsi,rsp
   13527:	mov    rax,QWORD PTR fs:0x28
   13530:	mov    QWORD PTR [rsp+0x98],rax
   13538:	xor    eax,eax
   1353a:	call   c2c0 <getrusage@plt>
   1353f:	test   eax,eax
   13541:	js     13590 <g_str_equal@plt+0x62d0>
   13543:	mov    rcx,QWORD PTR [rsp+0x8]
   13548:	movabs rdx,0x20c49ba5e353f7cf
   13552:	imul   rsi,QWORD PTR [rsp],0x3e8
   1355a:	mov    rax,rcx
   1355d:	sar    rcx,0x3f
   13561:	imul   rdx
   13564:	xor    eax,eax
   13566:	sar    rdx,0x7
   1356a:	sub    rdx,rcx
   1356d:	add    rdx,rsi
   13570:	mov    QWORD PTR [rbx],rdx
   13573:	mov    rbx,QWORD PTR [rsp+0x98]
   1357b:	xor    rbx,QWORD PTR fs:0x28
   13584:	jne    135c3 <g_str_equal@plt+0x6303>
   13586:	add    rsp,0xa8
   1358d:	pop    rbx
   1358e:	pop    rbp
   1358f:	ret    
   13590:	call   cc80 <__errno_location@plt>
   13595:	mov    r8d,DWORD PTR [rax]
   13598:	lea    r9,[rip+0x46409]        # 599a8 <_fini@@Base+0x7254>
   1359f:	lea    rcx,[rip+0x4645a]        # 59a00 <_fini@@Base+0x72ac>
   135a6:	lea    rsi,[rip+0x4641b]        # 599c8 <_fini@@Base+0x7274>
   135ad:	xor    eax,eax
   135af:	mov    edx,0x33
   135b4:	mov    rdi,rbp
   135b7:	call   3a140 <g_str_equal@plt+0x2ce80>
   135bc:	mov    eax,0xffffffff
   135c1:	jmp    13573 <g_str_equal@plt+0x62b3>
   135c3:	call   cd30 <__stack_chk_fail@plt>
   135c8:	nop    DWORD PTR [rax+rax*1+0x0]
   135d0:	push   r15
   135d2:	push   r14
   135d4:	mov    r15d,edi
   135d7:	push   r13
   135d9:	push   r12
   135db:	mov    rdi,r9
   135de:	push   rbp
   135df:	push   rbx
   135e0:	mov    r13,r9
   135e3:	mov    ebx,0x8000
   135e8:	sub    rsp,0x58
   135ec:	mov    QWORD PTR [rsp+0x8],rsi
   135f1:	mov    QWORD PTR [rsp+0x10],rdx
   135f6:	lea    r14,[rsp+0x38]
   135fb:	mov    QWORD PTR [rsp+0x18],rcx
   13600:	mov    QWORD PTR [rsp+0x20],r8
   13605:	mov    rbp,QWORD PTR [rsp+0x90]
   1360d:	mov    rax,QWORD PTR fs:0x28
   13616:	mov    QWORD PTR [rsp+0x48],rax
   1361b:	xor    eax,eax
   1361d:	call   c500 <g_malloc@plt>
   13622:	mov    r12,rax
   13625:	lea    rax,[rsp+0x40]
   1362a:	mov    QWORD PTR [rsp+0x28],rax
   1362f:	mov    rsi,rbp
   13632:	mov    rdi,r14
   13635:	call   13510 <g_str_equal@plt+0x6250>
   1363a:	test   eax,eax
   1363c:	js     136b0 <g_str_equal@plt+0x63f0>
   1363e:	sub    rsp,0x8
   13642:	mov    r9,rbx
   13645:	mov    edi,r15d
   13648:	push   rbp
   13649:	push   r13
   1364b:	push   r12
   1364d:	mov    r8,QWORD PTR [rsp+0x40]
   13652:	mov    rcx,QWORD PTR [rsp+0x38]
   13657:	mov    rdx,QWORD PTR [rsp+0x30]
   1365c:	mov    rsi,QWORD PTR [rsp+0x28]
   13661:	call   43e10 <g_str_equal@plt+0x36b50>
   13666:	add    rsp,0x20
   1366a:	test   eax,eax
   1366c:	js     136b0 <g_str_equal@plt+0x63f0>
   1366e:	mov    rdi,QWORD PTR [rsp+0x28]
   13673:	mov    rsi,rbp
   13676:	call   13510 <g_str_equal@plt+0x6250>
   1367b:	test   eax,eax
   1367d:	js     136b0 <g_str_equal@plt+0x63f0>
   1367f:	mov    rcx,QWORD PTR [rsp+0x40]
   13684:	sub    rcx,QWORD PTR [rsp+0x38]
   13689:	cmp    rcx,0x1f4
   13690:	ja     13710 <g_str_equal@plt+0x6450>
   13692:	cmp    rcx,0x63
   13696:	ja     136f0 <g_str_equal@plt+0x6430>
   13698:	lea    rbx,[rbx+rbx*4]
   1369c:	mov    rsi,rbp
   1369f:	mov    rdi,r14
   136a2:	call   13510 <g_str_equal@plt+0x6250>
   136a7:	add    rbx,rbx
   136aa:	test   eax,eax
   136ac:	jns    1363e <g_str_equal@plt+0x637e>
   136ae:	xchg   ax,ax
   136b0:	mov    rbx,0xffffffffffffffff
   136b7:	mov    rdx,r13
   136ba:	xor    esi,esi
   136bc:	mov    rdi,r12
   136bf:	call   c1c0 <memset@plt>
   136c4:	mov    rdi,r12
   136c7:	call   d2b0 <g_free@plt>
   136cc:	mov    rdx,QWORD PTR [rsp+0x48]
   136d1:	xor    rdx,QWORD PTR fs:0x28
   136da:	mov    rax,rbx
   136dd:	jne    13724 <g_str_equal@plt+0x6464>
   136df:	add    rsp,0x58
   136e3:	pop    rbx
   136e4:	pop    rbp
   136e5:	pop    r12
   136e7:	pop    r13
   136e9:	pop    r14
   136eb:	pop    r15
   136ed:	ret    
   136ee:	xchg   ax,ax
   136f0:	imul   rbx,rbx,0x3e8
   136f7:	xor    edx,edx
   136f9:	mov    rax,rbx
   136fc:	div    rcx
   136ff:	mov    rbx,rax
   13702:	jmp    1362f <g_str_equal@plt+0x636f>
   13707:	nop    WORD PTR [rax+rax*1+0x0]
   13710:	imul   rbx,rbx,0x3e8
   13717:	xor    edx,edx
   13719:	mov    rax,rbx
   1371c:	div    rcx
   1371f:	mov    rbx,rax
   13722:	jmp    136b7 <g_str_equal@plt+0x63f7>
   13724:	call   cd30 <__stack_chk_fail@plt>
   13729:	nop    DWORD PTR [rax+0x0]
   13730:	push   r15
   13732:	push   r14
   13734:	mov    r14d,edi
   13737:	push   r13
   13739:	push   r12
   1373b:	mov    edi,0x20
   13740:	push   rbp
   13741:	push   rbx
   13742:	mov    r15d,edx
   13745:	mov    r12,rcx
   13748:	mov    r13,r8
   1374b:	mov    rbp,r9
   1374e:	sub    rsp,0x18
   13752:	mov    DWORD PTR [rsp+0xc],esi
   13756:	call   ce00 <g_malloc0@plt>
   1375b:	mov    esi,DWORD PTR [rsp+0xc]
   1375f:	cmp    r14d,0x1
   13763:	mov    rbx,rax
   13766:	mov    DWORD PTR [rax+0x10],r14d
   1376a:	mov    DWORD PTR [rax+0x18],r15d
   1376e:	mov    DWORD PTR [rax+0x14],esi
   13771:	je     13808 <g_str_equal@plt+0x6548>
   13777:	jb     137f8 <g_str_equal@plt+0x6538>
   13779:	cmp    r14d,0x2
   1377d:	jne    137b0 <g_str_equal@plt+0x64f0>
   1377f:	lea    rax,[rip+0x26ea7a]        # 282200 <g_test_config_vars+0xe40>
   13786:	mov    QWORD PTR [rbx],rax
   13789:	mov    rcx,rbp
   1378c:	mov    rdx,r13
   1378f:	mov    rsi,r12
   13792:	mov    rdi,rbx
   13795:	call   QWORD PTR [rax]
   13797:	test   eax,eax
   13799:	jns    137e1 <g_str_equal@plt+0x6521>
   1379b:	mov    rdi,rbx
   1379e:	xor    ebx,ebx
   137a0:	call   d2b0 <g_free@plt>
   137a5:	jmp    137e1 <g_str_equal@plt+0x6521>
   137a7:	nop    WORD PTR [rax+rax*1+0x0]
   137b0:	lea    r8,[rip+0x46269]        # 59a20 <_fini@@Base+0x72cc>
   137b7:	lea    rcx,[rip+0x462c2]        # 59a80 <_fini@@Base+0x732c>
   137be:	lea    rsi,[rip+0x46283]        # 59a48 <_fini@@Base+0x72f4>
   137c5:	mov    r9d,r14d
   137c8:	mov    edx,0x35
   137cd:	mov    rdi,rbp
   137d0:	xor    eax,eax
   137d2:	call   3a090 <g_str_equal@plt+0x2cdd0>
   137d7:	mov    rdi,rbx
   137da:	xor    ebx,ebx
   137dc:	call   d2b0 <g_free@plt>
   137e1:	add    rsp,0x18
   137e5:	mov    rax,rbx
   137e8:	pop    rbx
   137e9:	pop    rbp
   137ea:	pop    r12
   137ec:	pop    r13
   137ee:	pop    r14
   137f0:	pop    r15
   137f2:	ret    
   137f3:	nop    DWORD PTR [rax+rax*1+0x0]
   137f8:	lea    rax,[rip+0x26ea21]        # 282220 <g_test_config_vars+0xe60>
   137ff:	mov    QWORD PTR [rbx],rax
   13802:	jmp    13789 <g_str_equal@plt+0x64c9>
   13804:	nop    DWORD PTR [rax+0x0]
   13808:	lea    rax,[rip+0x26ea31]        # 282240 <g_test_config_vars+0xe80>
   1380f:	mov    QWORD PTR [rbx],rax
   13812:	jmp    13789 <g_str_equal@plt+0x64c9>
   13817:	nop    WORD PTR [rax+rax*1+0x0]
   13820:	mov    rax,QWORD PTR [rdi]
   13823:	jmp    QWORD PTR [rax+0x8]
   13826:	nop    WORD PTR cs:[rax+rax*1+0x0]
   13830:	mov    eax,DWORD PTR [rdi+0x10]
   13833:	ret    
   13834:	xchg   ax,ax
   13836:	nop    WORD PTR cs:[rax+rax*1+0x0]
   13840:	mov    eax,DWORD PTR [rdi+0x14]
   13843:	ret    
   13844:	xchg   ax,ax
   13846:	nop    WORD PTR cs:[rax+rax*1+0x0]
   13850:	mov    eax,DWORD PTR [rdi+0x18]
   13853:	ret    
   13854:	xchg   ax,ax
   13856:	nop    WORD PTR cs:[rax+rax*1+0x0]
   13860:	test   rdi,rdi
   13863:	je     13880 <g_str_equal@plt+0x65c0>
   13865:	push   rbx
   13866:	mov    rax,QWORD PTR [rdi]
   13869:	mov    rbx,rdi
   1386c:	call   QWORD PTR [rax+0x10]
   1386f:	mov    rdi,rbx
   13872:	pop    rbx
   13873:	jmp    d2b0 <g_free@plt>
   13878:	nop    DWORD PTR [rax+rax*1+0x0]
   13880:	repz ret 
   13882:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1388c:	nop    DWORD PTR [rax+0x0]
   13890:	push   rbx
   13891:	mov    rbx,QWORD PTR [rdi+0x8]
   13895:	mov    rdi,QWORD PTR [rbx]
   13898:	call   11ec0 <g_str_equal@plt+0x4c00>
   1389d:	mov    rdi,rbx
   138a0:	pop    rbx
   138a1:	jmp    d2b0 <g_free@plt>
   138a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   138b0:	push   r15
   138b2:	push   r14
   138b4:	push   r13
   138b6:	push   r12
   138b8:	mov    r13,r8
   138bb:	push   rbp
   138bc:	push   rbx
   138bd:	mov    rbp,rdx
   138c0:	mov    rbx,rcx
   138c3:	sub    rsp,0x18
   138c7:	mov    r12,QWORD PTR [rdi+0x8]
   138cb:	mov    edi,DWORD PTR [rdi+0x14]
   138ce:	mov    QWORD PTR [rsp+0x8],rsi
   138d3:	call   118e0 <g_str_equal@plt+0x4620>
   138d8:	mov    r15,rax
   138db:	mov    rdi,rax
   138de:	call   c500 <g_malloc@plt>
   138e3:	cmp    r15,0x8
   138e7:	mov    ecx,0x8
   138ec:	mov    r14,rax
   138ef:	cmovbe rcx,r15
   138f3:	lea    rax,[rsp+0x8]
   138f8:	cmp    ecx,0x8
   138fb:	jae    13990 <g_str_equal@plt+0x66d0>
   13901:	test   cl,0x4
   13904:	jne    13a10 <g_str_equal@plt+0x6750>
   1390a:	test   ecx,ecx
   1390c:	je     1391d <g_str_equal@plt+0x665d>
   1390e:	movzx  edx,BYTE PTR [rax]
   13911:	test   cl,0x2
   13914:	mov    BYTE PTR [r14],dl
   13917:	jne    13a28 <g_str_equal@plt+0x6768>
   1391d:	cmp    r15,0x8
   13921:	ja     139f8 <g_str_equal@plt+0x6738>
   13927:	mov    rdi,QWORD PTR [r12]
   1392b:	mov    r8,r13
   1392e:	mov    rcx,r15
   13931:	mov    rdx,r14
   13934:	mov    rsi,r14
   13937:	call   11e90 <g_str_equal@plt+0x4bd0>
   1393c:	test   eax,eax
   1393e:	js     13a3a <g_str_equal@plt+0x677a>
   13944:	cmp    r15,rbx
   13947:	ja     139e0 <g_str_equal@plt+0x6720>
   1394d:	mov    rdx,r15
   13950:	mov    rsi,r14
   13953:	mov    rdi,rbp
   13956:	call   d220 <memcpy@plt>
   1395b:	cmp    r15,rbx
   1395e:	jae    13972 <g_str_equal@plt+0x66b2>
   13960:	sub    rbx,r15
   13963:	lea    rdi,[rbp+r15*1+0x0]
   13968:	xor    esi,esi
   1396a:	mov    rdx,rbx
   1396d:	call   c1c0 <memset@plt>
   13972:	mov    rdi,r14
   13975:	call   d2b0 <g_free@plt>
   1397a:	xor    eax,eax
   1397c:	add    rsp,0x18
   13980:	pop    rbx
   13981:	pop    rbp
   13982:	pop    r12
   13984:	pop    r13
   13986:	pop    r14
   13988:	pop    r15
   1398a:	ret    
   1398b:	nop    DWORD PTR [rax+rax*1+0x0]
   13990:	mov    rdx,QWORD PTR [rsp+0x8]
   13995:	lea    r8,[r14+0x8]
   13999:	and    r8,0xfffffffffffffff8
   1399d:	mov    QWORD PTR [r14],rdx
   139a0:	mov    edx,ecx
   139a2:	mov    rsi,QWORD PTR [rax+rdx*1-0x8]
   139a7:	mov    QWORD PTR [r14+rdx*1-0x8],rsi
   139ac:	mov    rdx,r14
   139af:	sub    rdx,r8
   139b2:	add    ecx,edx
   139b4:	sub    rax,rdx
   139b7:	and    ecx,0xfffffff8
   139ba:	cmp    ecx,0x8
   139bd:	jb     1391d <g_str_equal@plt+0x665d>
   139c3:	and    ecx,0xfffffff8
   139c6:	xor    edx,edx
   139c8:	mov    esi,edx
   139ca:	add    edx,0x8
   139cd:	mov    rdi,QWORD PTR [rax+rsi*1]
   139d1:	cmp    edx,ecx
   139d3:	mov    QWORD PTR [r8+rsi*1],rdi
   139d7:	jb     139c8 <g_str_equal@plt+0x6708>
   139d9:	jmp    1391d <g_str_equal@plt+0x665d>
   139de:	xchg   ax,ax
   139e0:	mov    rdx,rbx
   139e3:	mov    rsi,r14
   139e6:	mov    rdi,rbp
   139e9:	call   d220 <memcpy@plt>
   139ee:	jmp    13972 <g_str_equal@plt+0x66b2>
   139f3:	nop    DWORD PTR [rax+rax*1+0x0]
   139f8:	lea    rdx,[r15-0x8]
   139fc:	lea    rdi,[r14+0x8]
   13a00:	xor    esi,esi
   13a02:	call   c1c0 <memset@plt>
   13a07:	jmp    13927 <g_str_equal@plt+0x6667>
   13a0c:	nop    DWORD PTR [rax+0x0]
   13a10:	mov    edx,DWORD PTR [rax]
   13a12:	mov    ecx,ecx
   13a14:	mov    DWORD PTR [r14],edx
   13a17:	mov    eax,DWORD PTR [rax+rcx*1-0x4]
   13a1b:	mov    DWORD PTR [r14+rcx*1-0x4],eax
   13a20:	jmp    1391d <g_str_equal@plt+0x665d>
   13a25:	nop    DWORD PTR [rax]
   13a28:	mov    ecx,ecx
   13a2a:	movzx  eax,WORD PTR [rax+rcx*1-0x2]
   13a2f:	mov    WORD PTR [r14+rcx*1-0x2],ax
   13a35:	jmp    1391d <g_str_equal@plt+0x665d>
   13a3a:	mov    rdi,r14
   13a3d:	call   d2b0 <g_free@plt>
   13a42:	mov    eax,0xffffffff
   13a47:	jmp    1397c <g_str_equal@plt+0x66bc>
   13a4c:	nop    DWORD PTR [rax+0x0]
   13a50:	push   r15
   13a52:	push   r14
   13a54:	mov    r15,rdx
   13a57:	push   r13
   13a59:	push   r12
   13a5b:	mov    r14,rsi
   13a5e:	push   rbp
   13a5f:	push   rbx
   13a60:	mov    rbp,rdi
   13a63:	mov    edi,0x8
   13a68:	mov    r12,rcx
   13a6b:	sub    rsp,0x28
   13a6f:	mov    rax,QWORD PTR fs:0x28
   13a78:	mov    QWORD PTR [rsp+0x18],rax
   13a7d:	xor    eax,eax
   13a7f:	call   ce00 <g_malloc0@plt>
   13a84:	mov    edi,DWORD PTR [rbp+0x14]
   13a87:	mov    r13,rax
   13a8a:	call   11920 <g_str_equal@plt+0x4660>
   13a8f:	mov    edi,DWORD PTR [rbp+0x18]
   13a92:	mov    rbx,rax
   13a95:	call   f120 <g_str_equal@plt+0x1e60>
   13a9a:	cmp    rax,rbx
   13a9d:	mov    QWORD PTR [rsp+0x10],rax
   13aa2:	cmovb  rax,rbx
   13aa6:	mov    rdi,rax
   13aa9:	call   ce00 <g_malloc0@plt>
   13aae:	mov    edi,DWORD PTR [rbp+0x18]
   13ab1:	lea    rcx,[rsp+0x8]
   13ab6:	lea    r8,[rsp+0x10]
   13abb:	mov    r9,r12
   13abe:	mov    rdx,r15
   13ac1:	mov    rsi,r14
   13ac4:	mov    QWORD PTR [rsp+0x8],rax
   13ac9:	call   f170 <g_str_equal@plt+0x1eb0>
   13ace:	test   eax,eax
   13ad0:	js     13b30 <g_str_equal@plt+0x6870>
   13ad2:	cmp    QWORD PTR [rsp+0x10],rbx
   13ad7:	mov    edi,DWORD PTR [rbp+0x14]
   13ada:	mov    r8,r12
   13add:	cmovbe rbx,QWORD PTR [rsp+0x10]
   13ae3:	mov    rdx,QWORD PTR [rsp+0x8]
   13ae8:	xor    esi,esi
   13aea:	mov    rcx,rbx
   13aed:	call   119a0 <g_str_equal@plt+0x46e0>
   13af2:	test   rax,rax
   13af5:	mov    QWORD PTR [r13+0x0],rax
   13af9:	je     13b30 <g_str_equal@plt+0x6870>
   13afb:	mov    rdi,QWORD PTR [rsp+0x8]
   13b00:	call   d2b0 <g_free@plt>
   13b05:	mov    QWORD PTR [rbp+0x8],r13
   13b09:	xor    eax,eax
   13b0b:	mov    rdx,QWORD PTR [rsp+0x18]
   13b10:	xor    rdx,QWORD PTR fs:0x28
   13b19:	jne    13b49 <g_str_equal@plt+0x6889>
   13b1b:	add    rsp,0x28
   13b1f:	pop    rbx
   13b20:	pop    rbp
   13b21:	pop    r12
   13b23:	pop    r13
   13b25:	pop    r14
   13b27:	pop    r15
   13b29:	ret    
   13b2a:	nop    WORD PTR [rax+rax*1+0x0]
   13b30:	mov    rdi,r13
   13b33:	call   d2b0 <g_free@plt>
   13b38:	mov    rdi,QWORD PTR [rsp+0x8]
   13b3d:	call   d2b0 <g_free@plt>
   13b42:	mov    eax,0xffffffff
   13b47:	jmp    13b0b <g_str_equal@plt+0x684b>
   13b49:	call   cd30 <__stack_chk_fail@plt>
   13b4e:	xchg   ax,ax
   13b50:	xor    eax,eax
   13b52:	ret    
   13b53:	nop    DWORD PTR [rax]
   13b56:	nop    WORD PTR cs:[rax+rax*1+0x0]
   13b60:	repz ret 
   13b62:	nop    DWORD PTR [rax+0x0]
   13b66:	nop    WORD PTR cs:[rax+rax*1+0x0]
   13b70:	sub    rsp,0x18
   13b74:	mov    rdi,rdx
   13b77:	mov    rax,QWORD PTR fs:0x28
   13b80:	mov    QWORD PTR [rsp+0x8],rax
   13b85:	xor    eax,eax
   13b87:	cmp    rcx,0x3
   13b8b:	mov    DWORD PTR [rsp+0x4],esi
   13b8f:	jbe    13bc0 <g_str_equal@plt+0x6900>
   13b91:	cmp    rcx,0x4
   13b95:	mov    DWORD PTR [rdx],esi
   13b97:	je     13ba8 <g_str_equal@plt+0x68e8>
   13b99:	lea    rdx,[rcx-0x4]
   13b9d:	add    rdi,0x4
   13ba1:	xor    esi,esi
   13ba3:	call   c1c0 <memset@plt>
   13ba8:	xor    eax,eax
   13baa:	mov    rdx,QWORD PTR [rsp+0x8]
   13baf:	xor    rdx,QWORD PTR fs:0x28
   13bb8:	jne    13bcf <g_str_equal@plt+0x690f>
   13bba:	add    rsp,0x18
   13bbe:	ret    
   13bbf:	nop
   13bc0:	lea    rsi,[rsp+0x4]
   13bc5:	mov    rdx,rcx
   13bc8:	call   d220 <memcpy@plt>
   13bcd:	jmp    13ba8 <g_str_equal@plt+0x68e8>
   13bcf:	call   cd30 <__stack_chk_fail@plt>
   13bd4:	nop    WORD PTR cs:[rax+rax*1+0x0]
   13bde:	xchg   ax,ax
   13be0:	xor    eax,eax
   13be2:	ret    
   13be3:	nop    DWORD PTR [rax]
   13be6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   13bf0:	repz ret 
   13bf2:	nop    DWORD PTR [rax+0x0]
   13bf6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   13c00:	sub    rsp,0x18
   13c04:	cmp    rcx,0x7
   13c08:	mov    rdi,rdx
   13c0b:	mov    QWORD PTR [rsp+0x8],rsi
   13c10:	jbe    13c38 <g_str_equal@plt+0x6978>
   13c12:	cmp    rcx,0x8
   13c16:	mov    QWORD PTR [rdi],rsi
   13c19:	je     13c2a <g_str_equal@plt+0x696a>
   13c1b:	lea    rdx,[rcx-0x8]
   13c1f:	add    rdi,0x8
   13c23:	xor    esi,esi
   13c25:	call   c1c0 <memset@plt>
   13c2a:	xor    eax,eax
   13c2c:	add    rsp,0x18
   13c30:	ret    
   13c31:	nop    DWORD PTR [rax+0x0]
   13c38:	lea    rsi,[rsp+0x8]
   13c3d:	mov    rdx,rcx
   13c40:	call   d220 <memcpy@plt>
   13c45:	xor    eax,eax
   13c47:	add    rsp,0x18
   13c4b:	ret    
   13c4c:	nop    DWORD PTR [rax+0x0]
   13c50:	push   r15
   13c52:	push   r14
   13c54:	push   r13
   13c56:	push   r12
   13c58:	mov    r12,rsi
   13c5b:	push   rbp
   13c5c:	push   rbx
   13c5d:	sub    rsp,0xa8
   13c64:	mov    QWORD PTR [rsp+0x18],rdx
   13c69:	mov    DWORD PTR [rsp+0x14],edi
   13c6d:	mov    rax,QWORD PTR fs:0x28
   13c76:	mov    QWORD PTR [rsp+0x98],rax
   13c7e:	xor    eax,eax
   13c80:	mov    QWORD PTR [rsp+0x20],rcx
   13c85:	call   f120 <g_str_equal@plt+0x1e60>
   13c8a:	xor    edx,edx
   13c8c:	mov    rbp,rax
   13c8f:	mov    rax,r12
   13c92:	div    rbp
   13c95:	mov    r13,rbp
   13c98:	test   rdx,rdx
   13c9b:	mov    QWORD PTR [rsp+0x8],rax
   13ca0:	je     13cae <g_str_equal@plt+0x69ee>
   13ca2:	add    rax,0x1
   13ca6:	mov    r13,rdx
   13ca9:	mov    QWORD PTR [rsp+0x8],rax
   13cae:	mov    rax,QWORD PTR [rsp+0x8]
   13cb3:	test   rax,rax
   13cb6:	je     13dc0 <g_str_equal@plt+0x6b00>
   13cbc:	lea    rdi,[rsp+0x68]
   13cc1:	sub    rax,0x1
   13cc5:	xor    edx,edx
   13cc7:	mov    QWORD PTR [rsp+0x28],rax
   13ccc:	xor    ebx,ebx
   13cce:	xor    eax,eax
   13cd0:	mov    QWORD PTR [rsp+0x30],rdi
   13cd5:	lea    rdi,[rsp+0x60]
   13cda:	lea    r14,[rsp+0x5c]
   13cdf:	mov    QWORD PTR [rsp+0x48],r13
   13ce4:	mov    QWORD PTR [rsp+0x40],rdi
   13ce9:	lea    rdi,[rsp+0x70]
   13cee:	mov    QWORD PTR [rsp+0x38],rdi
   13cf3:	jmp    13d33 <g_str_equal@plt+0x6a73>
   13cf5:	nop    DWORD PTR [rax]
   13cf8:	cmp    QWORD PTR [rsp+0x68],rbp
   13cfd:	jne    13de7 <g_str_equal@plt+0x6b27>
   13d03:	mov    r12,QWORD PTR [rsp+0x60]
   13d08:	mov    rdx,r13
   13d0b:	mov    rdi,r15
   13d0e:	mov    rsi,r12
   13d11:	call   d220 <memcpy@plt>
   13d16:	mov    rdi,r12
   13d19:	call   d2b0 <g_free@plt>
   13d1e:	lea    eax,[rbx+0x1]
   13d21:	cmp    rax,QWORD PTR [rsp+0x8]
   13d26:	mov    rbx,rax
   13d29:	jae    13dc0 <g_str_equal@plt+0x6b00>
   13d2f:	mov    edx,eax
   13d31:	bswap  edx
   13d33:	mov    r10,rbp
   13d36:	mov    rcx,QWORD PTR [rsp+0x18]
   13d3b:	mov    r13,QWORD PTR [rsp+0x48]
   13d40:	imul   r10,rax
   13d44:	cmp    QWORD PTR [rsp+0x28],rax
   13d49:	mov    r9,QWORD PTR [rsp+0x20]
   13d4e:	mov    r8,QWORD PTR [rsp+0x30]
   13d53:	mov    rsi,QWORD PTR [rsp+0x38]
   13d58:	mov    edi,DWORD PTR [rsp+0x14]
   13d5c:	mov    DWORD PTR [rsp+0x5c],edx
   13d60:	mov    edx,0x2
   13d65:	mov    QWORD PTR [rsp+0x60],0x0
   13d6e:	mov    QWORD PTR [rsp+0x68],0x0
   13d77:	lea    r15,[rcx+r10*1]
   13d7b:	mov    rcx,QWORD PTR [rsp+0x40]
   13d80:	cmovne r13,rbp
   13d84:	mov    QWORD PTR [rsp+0x70],r14
   13d89:	mov    QWORD PTR [rsp+0x78],0x4
   13d92:	mov    QWORD PTR [rsp+0x80],r15
   13d9a:	mov    QWORD PTR [rsp+0x88],r13
   13da2:	call   f160 <g_str_equal@plt+0x1ea0>
   13da7:	test   eax,eax
   13da9:	jns    13cf8 <g_str_equal@plt+0x6a38>
   13daf:	mov    eax,0xffffffff
   13db4:	jmp    13dc2 <g_str_equal@plt+0x6b02>
   13db6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   13dc0:	xor    eax,eax
   13dc2:	mov    rbx,QWORD PTR [rsp+0x98]
   13dca:	xor    rbx,QWORD PTR fs:0x28
   13dd3:	jne    13e06 <g_str_equal@plt+0x6b46>
   13dd5:	add    rsp,0xa8
   13ddc:	pop    rbx
   13ddd:	pop    rbp
   13dde:	pop    r12
   13de0:	pop    r13
   13de2:	pop    r14
   13de4:	pop    r15
   13de6:	ret    
   13de7:	lea    rcx,[rip+0x45d02]        # 59af0 <_fini@@Base+0x739c>
   13dee:	lea    rsi,[rip+0x45ca3]        # 59a98 <_fini@@Base+0x7344>
   13df5:	lea    rdi,[rip+0x45cd6]        # 59ad2 <_fini@@Base+0x737e>
   13dfc:	mov    edx,0x50
   13e01:	call   c390 <__assert_fail@plt>
   13e06:	call   cd30 <__stack_chk_fail@plt>
   13e0b:	nop    DWORD PTR [rax+rax*1+0x0]
   13e10:	push   r15
   13e12:	push   r14
   13e14:	mov    r14,rsi
   13e17:	push   r13
   13e19:	push   r12
   13e1b:	mov    r12d,edi
   13e1e:	push   rbp
   13e1f:	push   rbx
   13e20:	mov    rdi,rsi
   13e23:	mov    ebx,edx
   13e25:	mov    r13,r8
   13e28:	mov    rbp,r9
   13e2b:	sub    rsp,0x28
   13e2f:	mov    QWORD PTR [rsp+0x10],rcx
   13e34:	mov    QWORD PTR [rsp+0x18],r8
   13e39:	call   ce00 <g_malloc0@plt>
   13e3e:	mov    r15,rax
   13e41:	lea    eax,[rbx-0x1]
   13e44:	xor    ebx,ebx
   13e46:	test   eax,eax
   13e48:	mov    QWORD PTR [rsp+0x8],rax
   13e4d:	je     13eaa <g_str_equal@plt+0x6bea>
   13e4f:	nop
   13e50:	mov    rdx,rbp
   13e53:	mov    rsi,r14
   13e56:	mov    rdi,r13
   13e59:	call   13440 <g_str_equal@plt+0x6180>
   13e5e:	test   eax,eax
   13e60:	js     13ee0 <g_str_equal@plt+0x6c20>
   13e62:	test   r14,r14
   13e65:	je     13e83 <g_str_equal@plt+0x6bc3>
   13e67:	xor    eax,eax
   13e69:	nop    DWORD PTR [rax+0x0]
   13e70:	movzx  edx,BYTE PTR [r13+rax*1+0x0]
   13e76:	xor    BYTE PTR [r15+rax*1],dl
   13e7a:	add    rax,0x1
   13e7e:	cmp    r14,rax
   13e81:	jne    13e70 <g_str_equal@plt+0x6bb0>
   13e83:	mov    rcx,rbp
   13e86:	mov    rdx,r15
   13e89:	mov    rsi,r14
   13e8c:	mov    edi,r12d
   13e8f:	call   13c50 <g_str_equal@plt+0x6990>
   13e94:	test   eax,eax
   13e96:	js     13ee0 <g_str_equal@plt+0x6c20>
   13e98:	add    rbx,0x1
   13e9c:	add    r13,r14
   13e9f:	cmp    rbx,QWORD PTR [rsp+0x8]
   13ea4:	jne    13e50 <g_str_equal@plt+0x6b90>
   13ea6:	imul   rbx,r14
   13eaa:	mov    rcx,QWORD PTR [rsp+0x18]
   13eaf:	xor    eax,eax
   13eb1:	add    rcx,rbx
   13eb4:	test   r14,r14
   13eb7:	je     13ed9 <g_str_equal@plt+0x6c19>
   13eb9:	nop    DWORD PTR [rax+0x0]
   13ec0:	mov    rsi,QWORD PTR [rsp+0x10]
   13ec5:	movzx  edx,BYTE PTR [rsi+rax*1]
   13ec9:	xor    dl,BYTE PTR [r15+rax*1]
   13ecd:	mov    BYTE PTR [rcx+rax*1],dl
   13ed0:	add    rax,0x1
   13ed4:	cmp    r14,rax
   13ed7:	jne    13ec0 <g_str_equal@plt+0x6c00>
   13ed9:	xor    ebx,ebx
   13edb:	jmp    13ee5 <g_str_equal@plt+0x6c25>
   13edd:	nop    DWORD PTR [rax]
   13ee0:	mov    ebx,0xffffffff
   13ee5:	mov    rdi,r15
   13ee8:	call   d2b0 <g_free@plt>
   13eed:	add    rsp,0x28
   13ef1:	mov    eax,ebx
   13ef3:	pop    rbx
   13ef4:	pop    rbp
   13ef5:	pop    r12
   13ef7:	pop    r13
   13ef9:	pop    r14
   13efb:	pop    r15
   13efd:	ret    
   13efe:	xchg   ax,ax
   13f00:	push   r15
   13f02:	push   r14
   13f04:	mov    r14,rsi
   13f07:	push   r13
   13f09:	push   r12
   13f0b:	mov    r12d,edx
   13f0e:	push   rbp
   13f0f:	push   rbx
   13f10:	mov    ebx,edi
   13f12:	mov    rdi,rsi
   13f15:	mov    r13,rcx
   13f18:	mov    rbp,r9
   13f1b:	sub    rsp,0x28
   13f1f:	mov    QWORD PTR [rsp+0x18],rcx
   13f24:	mov    QWORD PTR [rsp+0x10],r8
   13f29:	call   ce00 <g_malloc0@plt>
   13f2e:	mov    r15,rax
   13f31:	lea    eax,[r12-0x1]
   13f36:	test   eax,eax
   13f38:	mov    QWORD PTR [rsp+0x8],rax
   13f3d:	je     13fef <g_str_equal@plt+0x6d2f>
   13f43:	mov    r12,r13
   13f46:	xor    r13d,r13d
   13f49:	nop    DWORD PTR [rax+0x0]
   13f50:	test   r14,r14
   13f53:	je     13f72 <g_str_equal@plt+0x6cb2>
   13f55:	xor    eax,eax
   13f57:	nop    WORD PTR [rax+rax*1+0x0]
   13f60:	movzx  edx,BYTE PTR [r12+rax*1]
   13f65:	xor    BYTE PTR [r15+rax*1],dl
   13f69:	add    rax,0x1
   13f6d:	cmp    r14,rax
   13f70:	jne    13f60 <g_str_equal@plt+0x6ca0>
   13f72:	mov    rcx,rbp
   13f75:	mov    rdx,r15
   13f78:	mov    rsi,r14
   13f7b:	mov    edi,ebx
   13f7d:	call   13c50 <g_str_equal@plt+0x6990>
   13f82:	test   eax,eax
   13f84:	js     13fe8 <g_str_equal@plt+0x6d28>
   13f86:	add    r13,0x1
   13f8a:	add    r12,r14
   13f8d:	cmp    r13,QWORD PTR [rsp+0x8]
   13f92:	jne    13f50 <g_str_equal@plt+0x6c90>
   13f94:	mov    r9,r13
   13f97:	imul   r9,r14
   13f9b:	mov    rdi,QWORD PTR [rsp+0x18]
   13fa0:	xor    eax,eax
   13fa2:	test   r14,r14
   13fa5:	lea    rcx,[rdi+r9*1]
   13fa9:	je     13fc9 <g_str_equal@plt+0x6d09>
   13fab:	nop    DWORD PTR [rax+rax*1+0x0]
   13fb0:	movzx  edx,BYTE PTR [rcx+rax*1]
   13fb4:	mov    rsi,QWORD PTR [rsp+0x10]
   13fb9:	xor    dl,BYTE PTR [r15+rax*1]
   13fbd:	mov    BYTE PTR [rsi+rax*1],dl
   13fc0:	add    rax,0x1
   13fc4:	cmp    r14,rax
   13fc7:	jne    13fb0 <g_str_equal@plt+0x6cf0>
   13fc9:	xor    ebx,ebx
   13fcb:	mov    rdi,r15
   13fce:	call   d2b0 <g_free@plt>
   13fd3:	add    rsp,0x28
   13fd7:	mov    eax,ebx
   13fd9:	pop    rbx
   13fda:	pop    rbp
   13fdb:	pop    r12
   13fdd:	pop    r13
   13fdf:	pop    r14
   13fe1:	pop    r15
   13fe3:	ret    
   13fe4:	nop    DWORD PTR [rax+0x0]
   13fe8:	mov    ebx,0xffffffff
   13fed:	jmp    13fcb <g_str_equal@plt+0x6d0b>
   13fef:	xor    r9d,r9d
   13ff2:	jmp    13f9b <g_str_equal@plt+0x6cdb>
   13ff4:	nop    WORD PTR cs:[rax+rax*1+0x0]
   13ffe:	xchg   ax,ax
   14000:	push   rbp
   14001:	push   rbx
   14002:	mov    r9,rsi
   14005:	mov    rbx,rcx
   14008:	mov    rbp,r8
   1400b:	xor    eax,eax
   1400d:	sub    rsp,0x8
   14011:	nop    DWORD PTR [rax+0x0]
   14018:	movzx  ecx,BYTE PTR [rdx+rax*1]
   1401c:	xor    cl,BYTE PTR [rbp+rax*1+0x0]
   14020:	mov    BYTE PTR [rbx+rax*1],cl
   14023:	add    rax,0x1
   14027:	cmp    rax,0x10
   1402b:	jne    14018 <g_str_equal@plt+0x6d58>
   1402d:	mov    rcx,rbx
   14030:	mov    rdx,rbx
   14033:	mov    esi,0x10
   14038:	call   r9
   1403b:	xor    eax,eax
   1403d:	nop    DWORD PTR [rax]
   14040:	movzx  edx,BYTE PTR [rbp+rax*1+0x0]
   14045:	xor    BYTE PTR [rbx+rax*1],dl
   14048:	add    rax,0x1
   1404c:	cmp    rax,0x10
   14050:	jne    14040 <g_str_equal@plt+0x6d80>
   14052:	lea    rdi,[rbp+0x10]
   14056:	mov    rax,rbp
   14059:	xor    esi,esi
   1405b:	nop    DWORD PTR [rax+rax*1+0x0]
   14060:	movzx  ecx,BYTE PTR [rax]
   14063:	add    rax,0x1
   14067:	lea    edx,[rcx+rcx*1]
   1406a:	or     edx,esi
   1406c:	mov    esi,ecx
   1406e:	mov    BYTE PTR [rax-0x1],dl
   14071:	shr    sil,0x7
   14075:	cmp    rdi,rax
   14078:	jne    14060 <g_str_equal@plt+0x6da0>
   1407a:	test   sil,sil
   1407d:	je     14083 <g_str_equal@plt+0x6dc3>
   1407f:	xor    BYTE PTR [rbp+0x0],0x87
   14083:	add    rsp,0x8
   14087:	pop    rbx
   14088:	pop    rbp
   14089:	ret    
   1408a:	nop    WORD PTR [rax+rax*1+0x0]
   14090:	push   r15
   14092:	push   r14
   14094:	push   r13
   14096:	push   r12
   14098:	push   rbp
   14099:	push   rbx
   1409a:	sub    rsp,0x78
   1409e:	mov    rbx,QWORD PTR fs:0x28
   140a7:	mov    QWORD PTR [rsp+0x68],rbx
   140ac:	xor    ebx,ebx
   140ae:	mov    rbx,r9
   140b1:	and    r9d,0xf
   140b5:	mov    QWORD PTR [rsp+0x8],rdi
   140ba:	shr    rbx,0x4
   140be:	mov    QWORD PTR [rsp+0x18],rsi
   140c3:	mov    QWORD PTR [rsp+0x20],r8
   140c8:	test   rbx,rbx
   140cb:	mov    r15,QWORD PTR [rsp+0xb0]
   140d3:	mov    rbp,QWORD PTR [rsp+0xb8]
   140db:	mov    QWORD PTR [rsp+0x10],r9
   140e0:	jne    14108 <g_str_equal@plt+0x6e48>
   140e2:	lea    r8,[rip+0x45a1c]        # 59b05 <_fini@@Base+0x73b1>
   140e9:	lea    rcx,[rip+0x45a68]        # 59b58 <_fini@@Base+0x7404>
   140f0:	lea    rsi,[rip+0x45a19]        # 59b10 <_fini@@Base+0x73bc>
   140f7:	mov    edx,0x60
   140fc:	xor    edi,edi
   140fe:	call   c6b0 <g_assertion_message_expr@plt>
   14103:	nop    DWORD PTR [rax+rax*1+0x0]
   14108:	test   r9,r9
   1410b:	mov    rax,rdx
   1410e:	mov    r13,rcx
   14111:	jne    141a0 <g_str_equal@plt+0x6ee0>
   14117:	lea    r12,[rsp+0x50]
   1411c:	mov    rcx,QWORD PTR [rsp+0x20]
   14121:	mov    esi,0x10
   14126:	mov    rdi,QWORD PTR [rsp+0x18]
   1412b:	mov    rdx,r12
   1412e:	call   rax
   14130:	xor    r14d,r14d
   14133:	nop    DWORD PTR [rax+rax*1+0x0]
   14138:	mov    rdi,QWORD PTR [rsp+0x8]
   1413d:	mov    rcx,r15
   14140:	mov    rdx,rbp
   14143:	mov    r8,r12
   14146:	mov    rsi,r13
   14149:	add    r14,0x1
   1414d:	add    rbp,0x10
   14151:	add    r15,0x10
   14155:	call   14000 <g_str_equal@plt+0x6d40>
   1415a:	cmp    r14,rbx
   1415d:	jb     14138 <g_str_equal@plt+0x6e78>
   1415f:	cmp    QWORD PTR [rsp+0x10],0x0
   14165:	jne    141c6 <g_str_equal@plt+0x6f06>
   14167:	mov    rcx,r12
   1416a:	mov    rdx,QWORD PTR [rsp+0x20]
   1416f:	mov    esi,0x10
   14174:	mov    rdi,QWORD PTR [rsp+0x18]
   14179:	call   r13
   1417c:	mov    rax,QWORD PTR [rsp+0x68]
   14181:	xor    rax,QWORD PTR fs:0x28
   1418a:	jne    1427c <g_str_equal@plt+0x6fbc>
   14190:	add    rsp,0x78
   14194:	pop    rbx
   14195:	pop    rbp
   14196:	pop    r12
   14198:	pop    r13
   1419a:	pop    r14
   1419c:	pop    r15
   1419e:	ret    
   1419f:	nop
   141a0:	lea    r12,[rsp+0x50]
   141a5:	sub    rbx,0x1
   141a9:	mov    rcx,QWORD PTR [rsp+0x20]
   141ae:	mov    esi,0x10
   141b3:	mov    rdi,QWORD PTR [rsp+0x18]
   141b8:	mov    rdx,r12
   141bb:	call   rax
   141bd:	test   rbx,rbx
   141c0:	jne    14130 <g_str_equal@plt+0x6e70>
   141c6:	movdqa xmm0,XMMWORD PTR [rsp+0x50]
   141cc:	lea    rbx,[rsp+0x40]
   141d1:	xor    esi,esi
   141d3:	movaps XMMWORD PTR [rsp+0x40],xmm0
   141d8:	lea    rdi,[rbx+0x10]
   141dc:	mov    rax,rbx
   141df:	nop
   141e0:	add    rax,0x1
   141e4:	movzx  ecx,BYTE PTR [rax-0x1]
   141e8:	lea    edx,[rcx+rcx*1]
   141eb:	or     edx,esi
   141ed:	mov    esi,ecx
   141ef:	mov    BYTE PTR [rax-0x1],dl
   141f2:	shr    sil,0x7
   141f6:	cmp    rdi,rax
   141f9:	jne    141e0 <g_str_equal@plt+0x6f20>
   141fb:	test   sil,sil
   141fe:	je     14205 <g_str_equal@plt+0x6f45>
   14200:	xor    BYTE PTR [rsp+0x40],0x87
   14205:	lea    rax,[rsp+0x30]
   1420a:	mov    rdi,QWORD PTR [rsp+0x8]
   1420f:	mov    rdx,rbp
   14212:	mov    r8,rbx
   14215:	mov    rsi,r13
   14218:	mov    rcx,rax
   1421b:	mov    QWORD PTR [rsp+0x28],rax
   14220:	call   14000 <g_str_equal@plt+0x6d40>
   14225:	mov    rax,QWORD PTR [rsp+0x28]
   1422a:	xor    edx,edx
   1422c:	nop    DWORD PTR [rax+0x0]
   14230:	movzx  ecx,BYTE PTR [rbp+rdx*1+0x10]
   14235:	mov    BYTE PTR [rbx+rdx*1],cl
   14238:	movzx  ecx,BYTE PTR [rax+rdx*1]
   1423c:	mov    BYTE PTR [r15+rdx*1+0x10],cl
   14241:	add    rdx,0x1
   14245:	cmp    QWORD PTR [rsp+0x10],rdx
   1424a:	ja     14230 <g_str_equal@plt+0x6f70>
   1424c:	nop    DWORD PTR [rax+0x0]
   14250:	movzx  ecx,BYTE PTR [rax+rdx*1]
   14254:	mov    BYTE PTR [rbx+rdx*1],cl
   14257:	add    rdx,0x1
   1425b:	cmp    rdx,0x10
   1425f:	jne    14250 <g_str_equal@plt+0x6f90>
   14261:	mov    rdi,QWORD PTR [rsp+0x8]
   14266:	mov    r8,r12
   14269:	mov    rcx,r15
   1426c:	mov    rdx,rbx
   1426f:	mov    rsi,r13
   14272:	call   14000 <g_str_equal@plt+0x6d40>
   14277:	jmp    14167 <g_str_equal@plt+0x6ea7>
   1427c:	call   cd30 <__stack_chk_fail@plt>
   14281:	nop    DWORD PTR [rax+rax*1+0x0]
   14286:	nop    WORD PTR cs:[rax+rax*1+0x0]
   14290:	push   r15
   14292:	push   r14
   14294:	push   r13
   14296:	push   r12
   14298:	push   rbp
   14299:	push   rbx
   1429a:	mov    rbp,r9
   1429d:	shr    rbp,0x4
   142a1:	and    r9d,0xf
   142a5:	sub    rsp,0x78
   142a9:	mov    rax,QWORD PTR fs:0x28
   142b2:	mov    QWORD PTR [rsp+0x68],rax
   142b7:	xor    eax,eax
   142b9:	test   rbp,rbp
   142bc:	mov    QWORD PTR [rsp+0x8],rdi
   142c1:	mov    QWORD PTR [rsp+0x10],rsi
   142c6:	mov    QWORD PTR [rsp+0x28],rcx
   142cb:	mov    QWORD PTR [rsp+0x18],r8
   142d0:	mov    r15,QWORD PTR [rsp+0xb0]
   142d8:	mov    r13,QWORD PTR [rsp+0xb8]
   142e0:	mov    QWORD PTR [rsp+0x20],r9
   142e5:	jne    14310 <g_str_equal@plt+0x7050>
   142e7:	lea    r8,[rip+0x45817]        # 59b05 <_fini@@Base+0x73b1>
   142ee:	lea    rcx,[rip+0x45853]        # 59b48 <_fini@@Base+0x73f4>
   142f5:	lea    rsi,[rip+0x45814]        # 59b10 <_fini@@Base+0x73bc>
   142fc:	mov    edx,0xbf
   14301:	xor    edi,edi
   14303:	call   c6b0 <g_assertion_message_expr@plt>
   14308:	nop    DWORD PTR [rax+rax*1+0x0]
   14310:	test   r9,r9
   14313:	mov    r12,rdx
   14316:	je     143c8 <g_str_equal@plt+0x7108>
   1431c:	lea    rbx,[rsp+0x50]
   14321:	sub    rbp,0x1
   14325:	mov    rcx,QWORD PTR [rsp+0x18]
   1432a:	mov    esi,0x10
   1432f:	mov    rdi,QWORD PTR [rsp+0x10]
   14334:	mov    rdx,rbx
   14337:	call   r12
   1433a:	test   rbp,rbp
   1433d:	je     143f0 <g_str_equal@plt+0x7130>
   14343:	mov    rax,rbx
   14346:	xor    r14d,r14d
   14349:	mov    rbx,r13
   1434c:	mov    r13,rax
   1434f:	nop
   14350:	mov    rdi,QWORD PTR [rsp+0x8]
   14355:	mov    rcx,r15
   14358:	mov    rdx,rbx
   1435b:	mov    r8,r13
   1435e:	mov    rsi,r12
   14361:	add    r14,0x1
   14365:	add    r15,0x10
   14369:	add    rbx,0x10
   1436d:	call   14000 <g_str_equal@plt+0x6d40>
   14372:	cmp    r14,rbp
   14375:	jb     14350 <g_str_equal@plt+0x7090>
   14377:	cmp    QWORD PTR [rsp+0x20],0x0
   1437d:	mov    rax,r13
   14380:	mov    r13,rbx
   14383:	mov    rbx,rax
   14386:	jne    143f0 <g_str_equal@plt+0x7130>
   14388:	mov    rax,QWORD PTR [rsp+0x28]
   1438d:	mov    rcx,rbx
   14390:	mov    rdx,QWORD PTR [rsp+0x18]
   14395:	mov    esi,0x10
   1439a:	mov    rdi,QWORD PTR [rsp+0x10]
   1439f:	call   rax
   143a1:	mov    rax,QWORD PTR [rsp+0x68]
   143a6:	xor    rax,QWORD PTR fs:0x28
   143af:	jne    1446a <g_str_equal@plt+0x71aa>
   143b5:	add    rsp,0x78
   143b9:	pop    rbx
   143ba:	pop    rbp
   143bb:	pop    r12
   143bd:	pop    r13
   143bf:	pop    r14
   143c1:	pop    r15
   143c3:	ret    
   143c4:	nop    DWORD PTR [rax+0x0]
   143c8:	lea    rbx,[rsp+0x50]
   143cd:	mov    rcx,QWORD PTR [rsp+0x18]
   143d2:	mov    esi,0x10
   143d7:	mov    rdi,QWORD PTR [rsp+0x10]
   143dc:	mov    rdx,rbx
   143df:	call   r12
   143e2:	jmp    14343 <g_str_equal@plt+0x7083>
   143e7:	nop    WORD PTR [rax+rax*1+0x0]
   143f0:	lea    rbp,[rsp+0x40]
   143f5:	mov    rdi,QWORD PTR [rsp+0x8]
   143fa:	mov    rdx,r13
   143fd:	mov    rsi,r12
   14400:	mov    r8,rbx
   14403:	mov    rcx,rbp
   14406:	call   14000 <g_str_equal@plt+0x6d40>
   1440b:	mov    rsi,QWORD PTR [rsp+0x20]
   14410:	lea    rdx,[rsp+0x30]
   14415:	xor    eax,eax
   14417:	nop    WORD PTR [rax+rax*1+0x0]
   14420:	movzx  ecx,BYTE PTR [r13+rax*1+0x10]
   14426:	mov    BYTE PTR [rdx+rax*1],cl
   14429:	movzx  ecx,BYTE PTR [rbp+rax*1+0x0]
   1442e:	mov    BYTE PTR [r15+rax*1+0x10],cl
   14433:	add    rax,0x1
   14437:	cmp    rsi,rax
   1443a:	ja     14420 <g_str_equal@plt+0x7160>
   1443c:	nop    DWORD PTR [rax+0x0]
   14440:	movzx  ecx,BYTE PTR [rbp+rax*1+0x0]
   14445:	mov    BYTE PTR [rdx+rax*1],cl
   14448:	add    rax,0x1
   1444c:	cmp    rax,0x10
   14450:	jne    14440 <g_str_equal@plt+0x7180>
   14452:	mov    rdi,QWORD PTR [rsp+0x8]
   14457:	mov    r8,rbx
   1445a:	mov    rcx,r15
   1445d:	mov    rsi,r12
   14460:	call   14000 <g_str_equal@plt+0x6d40>
   14465:	jmp    14388 <g_str_equal@plt+0x70c8>
   1446a:	call   cd30 <__stack_chk_fail@plt>
   1446f:	nop
   14470:	cmp    edi,0x1
   14473:	mov    rcx,rsi
   14476:	jbe    14480 <g_str_equal@plt+0x71c0>
   14478:	xor    eax,eax
   1447a:	ret    
   1447b:	nop    DWORD PTR [rax+rax*1+0x0]
   14480:	lea    rsi,[rip+0x26cf49]        # 2813d0 <g_test_config_vars+0x10>
   14487:	mov    eax,edi
   14489:	mov    rax,QWORD PTR [rsi+rax*8]
   1448d:	test   rax,rax
   14490:	je     14478 <g_str_equal@plt+0x71b8>
   14492:	mov    rax,QWORD PTR [rax+0x30]
   14496:	mov    rsi,rdx
   14499:	mov    rdi,rcx
   1449c:	jmp    rax
   1449e:	xchg   ax,ax
   144a0:	push   r15
   144a2:	push   r14
   144a4:	mov    r15d,r8d
   144a7:	push   r13
   144a9:	push   r12
   144ab:	mov    r12,rdi
   144ae:	push   rbp
   144af:	push   rbx
   144b0:	mov    edi,0x48
   144b5:	mov    r13,rdx
   144b8:	mov    r14,rcx
   144bb:	mov    rbp,r9
   144be:	sub    rsp,0x18
   144c2:	mov    QWORD PTR [rsp+0x8],rsi
   144c7:	call   ce00 <g_malloc0@plt>
   144cc:	mov    rbx,rax
   144cf:	mov    eax,DWORD PTR [r12]
   144d3:	cmp    eax,0x1
   144d6:	mov    DWORD PTR [rbx],eax
   144d8:	ja     14530 <g_str_equal@plt+0x7270>
   144da:	lea    rcx,[rip+0x26ceef]        # 2813d0 <g_test_config_vars+0x10>
   144e1:	mov    edx,eax
   144e3:	mov    rsi,QWORD PTR [rsp+0x8]
   144e8:	mov    r11,QWORD PTR [rcx+rdx*8]
   144ec:	test   r11,r11
   144ef:	je     14530 <g_str_equal@plt+0x7270>
   144f1:	sub    rsp,0x8
   144f5:	mov    rdx,rsi
   144f8:	mov    QWORD PTR [rbx+0x8],r11
   144fc:	mov    rcx,r13
   144ff:	push   rbp
   14500:	mov    r9d,r15d
   14503:	mov    r8,r14
   14506:	mov    rsi,r12
   14509:	mov    rdi,rbx
   1450c:	call   QWORD PTR [r11]
   1450f:	test   eax,eax
   14511:	pop    rdx
   14512:	pop    rcx
   14513:	js     14578 <g_str_equal@plt+0x72b8>
   14515:	add    rsp,0x18
   14519:	mov    rax,rbx
   1451c:	pop    rbx
   1451d:	pop    rbp
   1451e:	pop    r12
   14520:	pop    r13
   14522:	pop    r14
   14524:	pop    r15
   14526:	ret    
   14527:	nop    WORD PTR [rax+rax*1+0x0]
   14530:	lea    rdi,[rip+0x26c369]        # 2808a0 <_fini@@Base+0x22e14c>
   14537:	mov    esi,eax
   14539:	call   2df50 <g_str_equal@plt+0x20c90>
   1453e:	lea    r8,[rip+0x4561f]        # 59b64 <_fini@@Base+0x7410>
   14545:	lea    rcx,[rip+0x45724]        # 59c70 <_fini@@Base+0x751c>
   1454c:	lea    rsi,[rip+0x4562d]        # 59b80 <_fini@@Base+0x742c>
   14553:	mov    r9,rax
   14556:	mov    edx,0x40
   1455b:	mov    rdi,rbp
   1455e:	xor    eax,eax
   14560:	call   3a090 <g_str_equal@plt+0x2cdd0>
   14565:	mov    rdi,rbx
   14568:	xor    ebx,ebx
   1456a:	call   d2b0 <g_free@plt>
   1456f:	jmp    14515 <g_str_equal@plt+0x7255>
   14571:	nop    DWORD PTR [rax+0x0]
   14578:	mov    rdi,rbx
   1457b:	xor    ebx,ebx
   1457d:	call   d2b0 <g_free@plt>
   14582:	jmp    14515 <g_str_equal@plt+0x7255>
   14584:	xchg   ax,ax
   14586:	nop    WORD PTR cs:[rax+rax*1+0x0]
   14590:	push   r15
   14592:	push   r14
   14594:	mov    r15,r8
   14597:	push   r13
   14599:	push   r12
   1459b:	mov    r12,rdi
   1459e:	push   rbp
   1459f:	push   rbx
   145a0:	mov    edi,0x48
   145a5:	mov    r13,rdx
   145a8:	mov    r14,rcx
   145ab:	mov    rbp,r9
   145ae:	sub    rsp,0x18
   145b2:	mov    QWORD PTR [rsp+0x8],rsi
   145b7:	call   ce00 <g_malloc0@plt>
   145bc:	mov    rbx,rax
   145bf:	mov    eax,DWORD PTR [r12]
   145c3:	cmp    eax,0x1
   145c6:	mov    DWORD PTR [rbx],eax
   145c8:	ja     14620 <g_str_equal@plt+0x7360>
   145ca:	lea    rcx,[rip+0x26cdff]        # 2813d0 <g_test_config_vars+0x10>
   145d1:	mov    edx,eax
   145d3:	mov    rsi,QWORD PTR [rsp+0x8]
   145d8:	mov    r11,QWORD PTR [rcx+rdx*8]
   145dc:	test   r11,r11
   145df:	je     14620 <g_str_equal@plt+0x7360>
   145e1:	sub    rsp,0x8
   145e5:	mov    rdx,rsi
   145e8:	mov    QWORD PTR [rbx+0x8],r11
   145ec:	mov    rcx,r13
   145ef:	push   rbp
   145f0:	mov    r9,r15
   145f3:	mov    r8,r14
   145f6:	mov    rsi,r12
   145f9:	mov    rdi,rbx
   145fc:	call   QWORD PTR [r11+0x8]
   14600:	test   eax,eax
   14602:	pop    rdx
   14603:	pop    rcx
   14604:	js     14668 <g_str_equal@plt+0x73a8>
   14606:	add    rsp,0x18
   1460a:	mov    rax,rbx
   1460d:	pop    rbx
   1460e:	pop    rbp
   1460f:	pop    r12
   14611:	pop    r13
   14613:	pop    r14
   14615:	pop    r15
   14617:	ret    
   14618:	nop    DWORD PTR [rax+rax*1+0x0]
   14620:	lea    rdi,[rip+0x26c279]        # 2808a0 <_fini@@Base+0x22e14c>
   14627:	mov    esi,eax
   14629:	call   2df50 <g_str_equal@plt+0x20c90>
   1462e:	lea    r8,[rip+0x4552f]        # 59b64 <_fini@@Base+0x7410>
   14635:	lea    rcx,[rip+0x45614]        # 59c50 <_fini@@Base+0x74fc>
   1463c:	lea    rsi,[rip+0x4553d]        # 59b80 <_fini@@Base+0x742c>
   14643:	mov    r9,rax
   14646:	mov    edx,0x5f
   1464b:	mov    rdi,rbp
   1464e:	xor    eax,eax
   14650:	call   3a090 <g_str_equal@plt+0x2cdd0>
   14655:	mov    rdi,rbx
   14658:	xor    ebx,ebx
   1465a:	call   d2b0 <g_free@plt>
   1465f:	jmp    14606 <g_str_equal@plt+0x7346>
   14661:	nop    DWORD PTR [rax+0x0]
   14668:	mov    rdi,rbx
   1466b:	xor    ebx,ebx
   1466d:	call   d2b0 <g_free@plt>
   14672:	jmp    14606 <g_str_equal@plt+0x7346>
   14674:	xchg   ax,ax
   14676:	nop    WORD PTR cs:[rax+rax*1+0x0]
   14680:	push   r12
   14682:	push   rbp
   14683:	mov    rbp,rdi
   14686:	push   rbx
   14687:	mov    edi,0x40
   1468c:	mov    r12,rsi
   1468f:	call   ce00 <g_malloc0@plt>
   14694:	mov    rbx,rax
   14697:	mov    eax,DWORD PTR [rbp+0x0]
   1469a:	mov    DWORD PTR [rbx],eax
   1469c:	mov    rax,QWORD PTR [rbp+0x8]
   146a0:	mov    rax,QWORD PTR [rax+0x10]
   146a4:	test   rax,rax
   146a7:	je     146b8 <g_str_equal@plt+0x73f8>
   146a9:	mov    rdx,r12
   146ac:	mov    rsi,rbx
   146af:	mov    rdi,rbp
   146b2:	call   rax
   146b4:	test   eax,eax
   146b6:	js     146c0 <g_str_equal@plt+0x7400>
   146b8:	mov    rax,rbx
   146bb:	pop    rbx
   146bc:	pop    rbp
   146bd:	pop    r12
   146bf:	ret    
   146c0:	mov    rdi,rbx
   146c3:	xor    ebx,ebx
   146c5:	call   d2b0 <g_free@plt>
   146ca:	jmp    146b8 <g_str_equal@plt+0x73f8>
   146cc:	nop    DWORD PTR [rax+0x0]
   146d0:	mov    rax,QWORD PTR [rdi+0x8]
   146d4:	jmp    QWORD PTR [rax+0x28]
   146d7:	nop    WORD PTR [rax+rax*1+0x0]
   146e0:	mov    rax,QWORD PTR [rdi+0x8]
   146e4:	jmp    QWORD PTR [rax+0x20]
   146e7:	nop    WORD PTR [rax+rax*1+0x0]
   146f0:	mov    rax,QWORD PTR [rdi+0x18]
   146f4:	ret    
   146f5:	nop
   146f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   14700:	mov    rax,QWORD PTR [rdi+0x20]
   14704:	ret    
   14705:	nop
   14706:	nop    WORD PTR cs:[rax+rax*1+0x0]
   14710:	mov    eax,DWORD PTR [rdi+0x28]
   14713:	ret    
   14714:	xchg   ax,ax
   14716:	nop    WORD PTR cs:[rax+rax*1+0x0]
   14720:	mov    rax,QWORD PTR [rdi+0x38]
   14724:	ret    
   14725:	nop
   14726:	nop    WORD PTR cs:[rax+rax*1+0x0]
   14730:	mov    rax,QWORD PTR [rdi+0x40]
   14734:	ret    
   14735:	nop
   14736:	nop    WORD PTR cs:[rax+rax*1+0x0]
   14740:	test   rdi,rdi
   14743:	je     14770 <g_str_equal@plt+0x74b0>
   14745:	push   rbx
   14746:	mov    rax,QWORD PTR [rdi+0x8]
   1474a:	mov    rbx,rdi
   1474d:	call   QWORD PTR [rax+0x18]
   14750:	mov    rdi,QWORD PTR [rbx+0x18]
   14754:	call   11ec0 <g_str_equal@plt+0x4c00>
   14759:	mov    rdi,QWORD PTR [rbx+0x20]
   1475d:	call   13860 <g_str_equal@plt+0x65a0>
   14762:	mov    rdi,rbx
   14765:	pop    rbx
   14766:	jmp    d2b0 <g_free@plt>
   1476b:	nop    DWORD PTR [rax+rax*1+0x0]
   14770:	repz ret 
   14772:	nop    DWORD PTR [rax+0x0]
   14776:	nop    WORD PTR cs:[rax+rax*1+0x0]
   14780:	push   r15
   14782:	push   r14
   14784:	mov    rax,r8
   14787:	push   r13
   14789:	push   r12
   1478b:	movsxd r12,ecx
   1478e:	push   rbp
   1478f:	push   rbx
   14790:	sub    rsp,0x28
   14794:	mov    QWORD PTR [rsp+0x18],rdx
   14799:	xor    edx,edx
   1479b:	mov    QWORD PTR [rsp+0x8],rdi
   147a0:	div    r12
   147a3:	mov    rbx,QWORD PTR [rsp+0x60]
   147a8:	test   rdx,rdx
   147ab:	jne    148c1 <g_str_equal@plt+0x7601>
   147b1:	xor    edx,edx
   147b3:	mov    r13,rax
   147b6:	mov    rax,rbx
   147b9:	div    r12
   147bc:	test   rdx,rdx
   147bf:	jne    148a2 <g_str_equal@plt+0x75e2>
   147c5:	test   rsi,rsi
   147c8:	mov    r14,rsi
   147cb:	mov    rbp,r9
   147ce:	mov    QWORD PTR [rsp+0x10],0x0
   147d7:	jne    14890 <g_str_equal@plt+0x75d0>
   147dd:	test   rbx,rbx
   147e0:	jne    14800 <g_str_equal@plt+0x7540>
   147e2:	jmp    14888 <g_str_equal@plt+0x75c8>
   147e7:	nop    WORD PTR [rax+rax*1+0x0]
   147f0:	add    r13,0x1
   147f4:	add    rbp,r15
   147f7:	sub    rbx,r15
   147fa:	je     14888 <g_str_equal@plt+0x75c8>
   14800:	test   r14,r14
   14803:	je     1483e <g_str_equal@plt+0x757e>
   14805:	mov    r8,QWORD PTR [rsp+0x68]
   1480a:	mov    rdx,QWORD PTR [rsp+0x10]
   1480f:	mov    rcx,r14
   14812:	mov    rdi,QWORD PTR [rsp+0x18]
   14817:	mov    rsi,r13
   1481a:	call   13820 <g_str_equal@plt+0x6560>
   1481f:	test   eax,eax
   14821:	js     14864 <g_str_equal@plt+0x75a4>
   14823:	mov    rcx,QWORD PTR [rsp+0x68]
   14828:	mov    rsi,QWORD PTR [rsp+0x10]
   1482d:	mov    rdx,r14
   14830:	mov    rdi,QWORD PTR [rsp+0x8]
   14835:	call   11eb0 <g_str_equal@plt+0x4bf0>
   1483a:	test   eax,eax
   1483c:	js     14864 <g_str_equal@plt+0x75a4>
   1483e:	cmp    r12,rbx
   14841:	mov    r15,rbx
   14844:	mov    r8,QWORD PTR [rsp+0x68]
   14849:	mov    rdi,QWORD PTR [rsp+0x8]
   1484e:	cmovbe r15,r12
   14852:	mov    rdx,rbp
   14855:	mov    rcx,r15
   14858:	mov    rsi,rbp
   1485b:	call   11ea0 <g_str_equal@plt+0x4be0>
   14860:	test   eax,eax
   14862:	jns    147f0 <g_str_equal@plt+0x7530>
   14864:	mov    ebx,0xffffffff
   14869:	mov    rdi,QWORD PTR [rsp+0x10]
   1486e:	call   d2b0 <g_free@plt>
   14873:	add    rsp,0x28
   14877:	mov    eax,ebx
   14879:	pop    rbx
   1487a:	pop    rbp
   1487b:	pop    r12
   1487d:	pop    r13
   1487f:	pop    r14
   14881:	pop    r15
   14883:	ret    
   14884:	nop    DWORD PTR [rax+0x0]
   14888:	xor    ebx,ebx
   1488a:	jmp    14869 <g_str_equal@plt+0x75a9>
   1488c:	nop    DWORD PTR [rax+0x0]
   14890:	mov    rdi,rsi
   14893:	call   ce00 <g_malloc0@plt>
   14898:	mov    QWORD PTR [rsp+0x10],rax
   1489d:	jmp    147dd <g_str_equal@plt+0x751d>
   148a2:	lea    rcx,[rip+0x45387]        # 59c30 <_fini@@Base+0x74dc>
   148a9:	lea    rsi,[rip+0x452d0]        # 59b80 <_fini@@Base+0x742c>
   148b0:	lea    rdi,[rip+0x45329]        # 59be0 <_fini@@Base+0x748c>
   148b7:	mov    edx,0xcf
   148bc:	call   c390 <__assert_fail@plt>
   148c1:	lea    rcx,[rip+0x45368]        # 59c30 <_fini@@Base+0x74dc>
   148c8:	lea    rsi,[rip+0x452b1]        # 59b80 <_fini@@Base+0x742c>
   148cf:	lea    rdi,[rip+0x452e2]        # 59bb8 <_fini@@Base+0x7464>
   148d6:	mov    edx,0xce
   148db:	call   c390 <__assert_fail@plt>
   148e0:	push   r15
   148e2:	push   r14
   148e4:	mov    rax,r8
   148e7:	push   r13
   148e9:	push   r12
   148eb:	movsxd r12,ecx
   148ee:	push   rbp
   148ef:	push   rbx
   148f0:	sub    rsp,0x28
   148f4:	mov    QWORD PTR [rsp+0x18],rdx
   148f9:	xor    edx,edx
   148fb:	mov    QWORD PTR [rsp+0x8],rdi
   14900:	div    r12
   14903:	mov    rbx,QWORD PTR [rsp+0x60]
   14908:	test   rdx,rdx
   1490b:	jne    14a21 <g_str_equal@plt+0x7761>
   14911:	xor    edx,edx
   14913:	mov    r13,rax
   14916:	mov    rax,rbx
   14919:	div    r12
   1491c:	test   rdx,rdx
   1491f:	jne    14a02 <g_str_equal@plt+0x7742>
   14925:	test   rsi,rsi
   14928:	mov    r14,rsi
   1492b:	mov    rbp,r9
   1492e:	mov    QWORD PTR [rsp+0x10],0x0
   14937:	jne    149f0 <g_str_equal@plt+0x7730>
   1493d:	test   rbx,rbx
   14940:	jne    14960 <g_str_equal@plt+0x76a0>
   14942:	jmp    149e8 <g_str_equal@plt+0x7728>
   14947:	nop    WORD PTR [rax+rax*1+0x0]
   14950:	add    r13,0x1
   14954:	add    rbp,r15
   14957:	sub    rbx,r15
   1495a:	je     149e8 <g_str_equal@plt+0x7728>
   14960:	test   r14,r14
   14963:	je     1499e <g_str_equal@plt+0x76de>
   14965:	mov    r8,QWORD PTR [rsp+0x68]
   1496a:	mov    rdx,QWORD PTR [rsp+0x10]
   1496f:	mov    rcx,r14
   14972:	mov    rdi,QWORD PTR [rsp+0x18]
   14977:	mov    rsi,r13
   1497a:	call   13820 <g_str_equal@plt+0x6560>
   1497f:	test   eax,eax
   14981:	js     149c4 <g_str_equal@plt+0x7704>
   14983:	mov    rcx,QWORD PTR [rsp+0x68]
   14988:	mov    rsi,QWORD PTR [rsp+0x10]
   1498d:	mov    rdx,r14
   14990:	mov    rdi,QWORD PTR [rsp+0x8]
   14995:	call   11eb0 <g_str_equal@plt+0x4bf0>
   1499a:	test   eax,eax
   1499c:	js     149c4 <g_str_equal@plt+0x7704>
   1499e:	cmp    r12,rbx
   149a1:	mov    r15,rbx
   149a4:	mov    r8,QWORD PTR [rsp+0x68]
   149a9:	mov    rdi,QWORD PTR [rsp+0x8]
   149ae:	cmovbe r15,r12
   149b2:	mov    rdx,rbp
   149b5:	mov    rcx,r15
   149b8:	mov    rsi,rbp
   149bb:	call   11e90 <g_str_equal@plt+0x4bd0>
   149c0:	test   eax,eax
   149c2:	jns    14950 <g_str_equal@plt+0x7690>
   149c4:	mov    ebx,0xffffffff
   149c9:	mov    rdi,QWORD PTR [rsp+0x10]
   149ce:	call   d2b0 <g_free@plt>
   149d3:	add    rsp,0x28
   149d7:	mov    eax,ebx
   149d9:	pop    rbx
   149da:	pop    rbp
   149db:	pop    r12
   149dd:	pop    r13
   149df:	pop    r14
   149e1:	pop    r15
   149e3:	ret    
   149e4:	nop    DWORD PTR [rax+0x0]
   149e8:	xor    ebx,ebx
   149ea:	jmp    149c9 <g_str_equal@plt+0x7709>
   149ec:	nop    DWORD PTR [rax+0x0]
   149f0:	mov    rdi,rsi
   149f3:	call   ce00 <g_malloc0@plt>
   149f8:	mov    QWORD PTR [rsp+0x10],rax
   149fd:	jmp    1493d <g_str_equal@plt+0x767d>
   14a02:	lea    rcx,[rip+0x45207]        # 59c10 <_fini@@Base+0x74bc>
   14a09:	lea    rsi,[rip+0x45170]        # 59b80 <_fini@@Base+0x742c>
   14a10:	lea    rdi,[rip+0x451c9]        # 59be0 <_fini@@Base+0x748c>
   14a17:	mov    edx,0x104
   14a1c:	call   c390 <__assert_fail@plt>
   14a21:	lea    rcx,[rip+0x451e8]        # 59c10 <_fini@@Base+0x74bc>
   14a28:	lea    rsi,[rip+0x45151]        # 59b80 <_fini@@Base+0x742c>
   14a2f:	lea    rdi,[rip+0x45182]        # 59bb8 <_fini@@Base+0x7464>
   14a36:	mov    edx,0x103
   14a3b:	call   c390 <__assert_fail@plt>
   14a40:	xor    eax,eax
   14a42:	ret    
   14a43:	nop    DWORD PTR [rax]
   14a46:	nop    WORD PTR cs:[rax+rax*1+0x0]
   14a50:	repz ret 
   14a52:	nop    DWORD PTR [rax+0x0]
   14a56:	nop    WORD PTR cs:[rax+rax*1+0x0]
   14a60:	mov    rax,rsi
   14a63:	sub    rsp,0x8
   14a67:	test   eax,0x1ff
   14a6c:	jne    14a9a <g_str_equal@plt+0x77da>
   14a6e:	test   ecx,0x1ff
   14a74:	jne    14ab9 <g_str_equal@plt+0x77f9>
   14a76:	mov    rsi,QWORD PTR [rdi+0x30]
   14a7a:	mov    r9,rdx
   14a7d:	mov    rdx,QWORD PTR [rdi+0x20]
   14a81:	mov    rdi,QWORD PTR [rdi+0x18]
   14a85:	push   r8
   14a87:	mov    r8,rax
   14a8a:	push   rcx
   14a8b:	mov    ecx,0x200
   14a90:	call   14780 <g_str_equal@plt+0x74c0>
   14a95:	add    rsp,0x18
   14a99:	ret    
   14a9a:	lea    rcx,[rip+0x4532f]        # 59dd0 <_fini@@Base+0x767c>
   14aa1:	lea    rsi,[rip+0x451e0]        # 59c88 <_fini@@Base+0x7534>
   14aa8:	lea    rdi,[rip+0x45219]        # 59cc8 <_fini@@Base+0x7574>
   14aaf:	mov    edx,0x97
   14ab4:	call   c390 <__assert_fail@plt>
   14ab9:	lea    rcx,[rip+0x45310]        # 59dd0 <_fini@@Base+0x767c>
   14ac0:	lea    rsi,[rip+0x451c1]        # 59c88 <_fini@@Base+0x7534>
   14ac7:	lea    rdi,[rip+0x45232]        # 59d00 <_fini@@Base+0x75ac>
   14ace:	mov    edx,0x98
   14ad3:	call   c390 <__assert_fail@plt>
   14ad8:	nop    DWORD PTR [rax+rax*1+0x0]
   14ae0:	mov    rax,rsi
   14ae3:	sub    rsp,0x8
   14ae7:	test   eax,0x1ff
   14aec:	jne    14b1a <g_str_equal@plt+0x785a>
   14aee:	test   ecx,0x1ff
   14af4:	jne    14b39 <g_str_equal@plt+0x7879>
   14af6:	mov    rsi,QWORD PTR [rdi+0x30]
   14afa:	mov    r9,rdx
   14afd:	mov    rdx,QWORD PTR [rdi+0x20]
   14b01:	mov    rdi,QWORD PTR [rdi+0x18]
   14b05:	push   r8
   14b07:	mov    r8,rax
   14b0a:	push   rcx
   14b0b:	mov    ecx,0x200
   14b10:	call   148e0 <g_str_equal@plt+0x7620>
   14b15:	add    rsp,0x18
   14b19:	ret    
   14b1a:	lea    rcx,[rip+0x4528f]        # 59db0 <_fini@@Base+0x765c>
   14b21:	lea    rsi,[rip+0x45160]        # 59c88 <_fini@@Base+0x7534>
   14b28:	lea    rdi,[rip+0x45199]        # 59cc8 <_fini@@Base+0x7574>
   14b2f:	mov    edx,0xa7
   14b34:	call   c390 <__assert_fail@plt>
   14b39:	lea    rcx,[rip+0x45270]        # 59db0 <_fini@@Base+0x765c>
   14b40:	lea    rsi,[rip+0x45141]        # 59c88 <_fini@@Base+0x7534>
   14b47:	lea    rdi,[rip+0x451b2]        # 59d00 <_fini@@Base+0x75ac>
   14b4e:	mov    edx,0xa8
   14b53:	call   c390 <__assert_fail@plt>
   14b58:	nop    DWORD PTR [rax+rax*1+0x0]
   14b60:	push   r13
   14b62:	pxor   xmm0,xmm0
   14b66:	push   r12
   14b68:	push   rbp
   14b69:	mov    r12,rdx
   14b6c:	push   rbx
   14b6d:	mov    rbx,rdi
   14b70:	mov    rdi,rsi
   14b73:	mov    rsi,rdx
   14b76:	sub    rsp,0x28
   14b7a:	mov    rax,QWORD PTR fs:0x28
   14b83:	mov    QWORD PTR [rsp+0x18],rax
   14b88:	xor    eax,eax
   14b8a:	movaps XMMWORD PTR [rsp],xmm0
   14b8e:	call   132a0 <g_str_equal@plt+0x5fe0>
   14b93:	test   rax,rax
   14b96:	je     14c69 <g_str_equal@plt+0x79a9>
   14b9c:	mov    rdi,rax
   14b9f:	mov    rbp,rax
   14ba2:	mov    r13,rsp
   14ba5:	call   c720 <strlen@plt>
   14baa:	cmp    eax,0x10
   14bad:	movsxd rdx,eax
   14bb0:	mov    eax,0x10
   14bb5:	cmovae rdx,rax
   14bb9:	mov    ecx,0x10
   14bbe:	mov    rsi,rbp
   14bc1:	mov    rdi,r13
   14bc4:	call   c510 <__memcpy_chk@plt>
   14bc9:	mov    rdi,rbp
   14bcc:	call   d2b0 <g_free@plt>
   14bd1:	xor    edi,edi
   14bd3:	mov    esi,0x1
   14bd8:	call   11960 <g_str_equal@plt+0x46a0>
   14bdd:	xor    r8d,r8d
   14be0:	xor    ecx,ecx
   14be2:	xor    edx,edx
   14be4:	xor    esi,esi
   14be6:	mov    QWORD PTR [rbx+0x30],rax
   14bea:	mov    r9,r12
   14bed:	mov    edi,0x1
   14bf2:	call   13730 <g_str_equal@plt+0x6470>
   14bf7:	test   rax,rax
   14bfa:	mov    QWORD PTR [rbx+0x20],rax
   14bfe:	je     14c4d <g_str_equal@plt+0x798d>
   14c00:	xor    edi,edi
   14c02:	mov    r8,r12
   14c05:	mov    ecx,0x10
   14c0a:	mov    rdx,r13
   14c0d:	mov    esi,0x1
   14c12:	call   119a0 <g_str_equal@plt+0x46e0>
   14c17:	test   rax,rax
   14c1a:	mov    QWORD PTR [rbx+0x18],rax
   14c1e:	je     14c51 <g_str_equal@plt+0x7991>
   14c20:	mov    QWORD PTR [rbx+0x40],0x200
   14c28:	mov    QWORD PTR [rbx+0x38],0x0
   14c30:	xor    eax,eax
   14c32:	mov    rcx,QWORD PTR [rsp+0x18]
   14c37:	xor    rcx,QWORD PTR fs:0x28
   14c40:	jne    14c70 <g_str_equal@plt+0x79b0>
   14c42:	add    rsp,0x28
   14c46:	pop    rbx
   14c47:	pop    rbp
   14c48:	pop    r12
   14c4a:	pop    r13
   14c4c:	ret    
   14c4d:	mov    rax,QWORD PTR [rbx+0x18]
   14c51:	mov    rdi,rax
   14c54:	call   11ec0 <g_str_equal@plt+0x4c00>
   14c59:	mov    rdi,QWORD PTR [rbx+0x20]
   14c5d:	call   13860 <g_str_equal@plt+0x65a0>
   14c62:	mov    eax,0xffffffa1
   14c67:	jmp    14c32 <g_str_equal@plt+0x7972>
   14c69:	mov    eax,0xffffffff
   14c6e:	jmp    14c32 <g_str_equal@plt+0x7972>
   14c70:	call   cd30 <__stack_chk_fail@plt>
   14c75:	nop
   14c76:	nop    WORD PTR cs:[rax+rax*1+0x0]
   14c80:	sub    rsp,0x8
   14c84:	mov    rsi,QWORD PTR [rsi+0x10]
   14c88:	mov    rax,QWORD PTR [rsp+0x10]
   14c8d:	test   rsi,rsi
   14c90:	je     14ca0 <g_str_equal@plt+0x79e0>
   14c92:	mov    rdx,rax
   14c95:	add    rsp,0x8
   14c99:	jmp    14b60 <g_str_equal@plt+0x78a0>
   14c9e:	xchg   ax,ax
   14ca0:	lea    r9,[rip+0x4b5c7]        # 6026e <_fini@@Base+0xdb1a>
   14ca7:	test   rdx,rdx
   14caa:	lea    r8,[rip+0x45087]        # 59d38 <_fini@@Base+0x75e4>
   14cb1:	lea    rcx,[rip+0x450d8]        # 59d90 <_fini@@Base+0x763c>
   14cb8:	lea    rsi,[rip+0x44fc9]        # 59c88 <_fini@@Base+0x7534>
   14cbf:	mov    rdi,rax
   14cc2:	cmovne r9,rdx
   14cc6:	xor    eax,eax
   14cc8:	mov    edx,0x82
   14ccd:	call   3a090 <g_str_equal@plt+0x2cdd0>
   14cd2:	mov    eax,0xffffffff
   14cd7:	add    rsp,0x8
   14cdb:	ret    
   14cdc:	nop    DWORD PTR [rax+0x0]
   14ce0:	sub    rsp,0x8
   14ce4:	and    r9d,0x1
   14ce8:	mov    rax,QWORD PTR [rsp+0x10]
   14ced:	jne    14d08 <g_str_equal@plt+0x7a48>
   14cef:	mov    rsi,QWORD PTR [rsi+0x10]
   14cf3:	test   rsi,rsi
   14cf6:	je     14d0f <g_str_equal@plt+0x7a4f>
   14cf8:	mov    rdx,rax
   14cfb:	add    rsp,0x8
   14cff:	jmp    14b60 <g_str_equal@plt+0x78a0>
   14d04:	nop    DWORD PTR [rax+0x0]
   14d08:	xor    eax,eax
   14d0a:	add    rsp,0x8
   14d0e:	ret    
   14d0f:	lea    r9,[rip+0x4b558]        # 6026e <_fini@@Base+0xdb1a>
   14d16:	test   rdx,rdx
   14d19:	lea    r8,[rip+0x45018]        # 59d38 <_fini@@Base+0x75e4>
   14d20:	lea    rcx,[rip+0x45049]        # 59d70 <_fini@@Base+0x761c>
   14d27:	lea    rsi,[rip+0x44f5a]        # 59c88 <_fini@@Base+0x7534>
   14d2e:	mov    rdi,rax
   14d31:	cmovne r9,rdx
   14d35:	xor    eax,eax
   14d37:	mov    edx,0x6e
   14d3c:	call   3a090 <g_str_equal@plt+0x2cdd0>
   14d41:	mov    eax,0xffffffff
   14d46:	jmp    14d0a <g_str_equal@plt+0x7a4a>
   14d48:	nop    DWORD PTR [rax+rax*1+0x0]
   14d50:	mov    rdi,QWORD PTR [rdi+0x10]
   14d54:	jmp    d2b0 <g_free@plt>
   14d59:	nop    DWORD PTR [rax+0x0]
   14d60:	push   r13
   14d62:	push   r12
   14d64:	lea    r13,[rsi+0x38]
   14d68:	push   rbp
   14d69:	push   rbx
   14d6a:	mov    rbx,rsi
   14d6d:	sub    rsp,0x8
   14d71:	mov    r12,QWORD PTR [rdi+0x10]
   14d75:	mov    eax,DWORD PTR [r12+0x250]
   14d7d:	mov    DWORD PTR [rsi+0x8],eax
   14d80:	mov    eax,DWORD PTR [r12+0x254]
   14d88:	mov    DWORD PTR [rsi+0xc],eax
   14d8b:	mov    eax,DWORD PTR [r12+0x258]
   14d93:	cmp    eax,0x2
   14d96:	mov    DWORD PTR [rsi+0x10],eax
   14d99:	jne    14daa <g_str_equal@plt+0x7aea>
   14d9b:	mov    BYTE PTR [rsi+0x14],0x1
   14d9f:	mov    eax,DWORD PTR [r12+0x25c]
   14da7:	mov    DWORD PTR [rsi+0x18],eax
   14daa:	mov    eax,DWORD PTR [r12+0x260]
   14db2:	mov    esi,0x28
   14db7:	mov    DWORD PTR [rbx+0x1c],eax
   14dba:	mov    rax,QWORD PTR [rdi+0x38]
   14dbe:	lea    rdi,[r12+0xa8]
   14dc6:	mov    QWORD PTR [rbx+0x20],rax
   14dca:	mov    eax,DWORD PTR [r12+0xa4]
   14dd2:	mov    QWORD PTR [rbx+0x28],rax
   14dd6:	call   c640 <g_strndup@plt>
   14ddb:	mov    QWORD PTR [rbx+0x30],rax
   14ddf:	lea    rbx,[r12+0xd0]
   14de7:	add    r12,0x250
   14dee:	xchg   ax,ax
   14df0:	mov    edi,0x10
   14df5:	call   ce00 <g_malloc0@plt>
   14dfa:	mov    edi,0x28
   14dff:	mov    rbp,rax
   14e02:	mov    QWORD PTR [r13+0x0],rax
   14e06:	call   ce00 <g_malloc0@plt>
   14e0b:	mov    QWORD PTR [rbp+0x8],rax
   14e0f:	mov    ecx,DWORD PTR [rbx]
   14e11:	cmp    ecx,0xac71f3
   14e17:	sete   BYTE PTR [rax]
   14e1a:	mov    edx,DWORD PTR [rbx+0x28]
   14e1d:	shl    rdx,0x9
   14e21:	cmp    ecx,0xac71f3
   14e27:	mov    QWORD PTR [rax+0x20],rdx
   14e2b:	jne    14e43 <g_str_equal@plt+0x7b83>
   14e2d:	mov    BYTE PTR [rax+0x1],0x1
   14e31:	mov    esi,DWORD PTR [rbx+0x4]
   14e34:	mov    BYTE PTR [rax+0x10],0x1
   14e38:	mov    QWORD PTR [rax+0x8],rsi
   14e3c:	mov    esi,DWORD PTR [rbx+0x2c]
   14e3f:	mov    QWORD PTR [rax+0x18],rsi
   14e43:	add    rbx,0x30
   14e47:	mov    r13,rbp
   14e4a:	cmp    r12,rbx
   14e4d:	jne    14df0 <g_str_equal@plt+0x7b30>
   14e4f:	add    rsp,0x8
   14e53:	xor    eax,eax
   14e55:	pop    rbx
   14e56:	pop    rbp
   14e57:	pop    r12
   14e59:	pop    r13
   14e5b:	ret    
   14e5c:	nop    DWORD PTR [rax+0x0]
   14e60:	push   r12
   14e62:	push   rbp
   14e63:	mov    r12,rdx
   14e66:	push   rbx
   14e67:	mov    ebx,edi
   14e69:	mov    edi,esi
   14e6b:	call   f120 <g_str_equal@plt+0x1e60>
   14e70:	mov    edi,ebx
   14e72:	mov    rbp,rax
   14e75:	call   11920 <g_str_equal@plt+0x4660>
   14e7a:	cmp    rbp,rax
   14e7d:	mov    ecx,ebx
   14e7f:	je     14f37 <g_str_equal@plt+0x7c77>
   14e85:	cmp    ebx,0xb
   14e88:	ja     14f00 <g_str_equal@plt+0x7c40>
   14e8a:	mov    eax,0x1
   14e8f:	shl    rax,cl
   14e92:	test   ah,0xe
   14e95:	jne    14f98 <g_str_equal@plt+0x7cd8>
   14e9b:	test   eax,0x1c0
   14ea0:	jne    14f40 <g_str_equal@plt+0x7c80>
   14ea6:	test   al,0x7
   14ea8:	je     14f00 <g_str_equal@plt+0x7c40>
   14eaa:	xor    edi,edi
   14eac:	call   11920 <g_str_equal@plt+0x4660>
   14eb1:	xor    ecx,ecx
   14eb3:	cmp    rax,rbp
   14eb6:	je     14f37 <g_str_equal@plt+0x7c77>
   14eb8:	mov    edi,0x1
   14ebd:	call   11920 <g_str_equal@plt+0x4660>
   14ec2:	cmp    rax,rbp
   14ec5:	mov    ecx,0x1
   14eca:	je     14f37 <g_str_equal@plt+0x7c77>
   14ecc:	mov    edi,0x2
   14ed1:	call   11920 <g_str_equal@plt+0x4660>
   14ed6:	cmp    rax,rbp
   14ed9:	mov    ecx,0x2
   14ede:	je     14f37 <g_str_equal@plt+0x7c77>
   14ee0:	mov    r9,rbp
   14ee3:	lea    r8,[rip+0x44f06]        # 59df0 <_fini@@Base+0x769c>
   14eea:	lea    rcx,[rip+0x4536f]        # 5a260 <_fini@@Base+0x7b0c>
   14ef1:	mov    edx,0x161
   14ef6:	jmp    14f24 <g_str_equal@plt+0x7c64>
   14ef8:	nop    DWORD PTR [rax+rax*1+0x0]
   14f00:	lea    rdi,[rip+0x26ba19]        # 280920 <_fini@@Base+0x22e1cc>
   14f07:	mov    esi,ebx
   14f09:	call   2df50 <g_str_equal@plt+0x20c90>
   14f0e:	lea    r8,[rip+0x44fab]        # 59ec0 <_fini@@Base+0x776c>
   14f15:	lea    rcx,[rip+0x45344]        # 5a260 <_fini@@Base+0x7b0c>
   14f1c:	mov    r9,rax
   14f1f:	mov    edx,0x18b
   14f24:	lea    rsi,[rip+0x44ef5]        # 59e20 <_fini@@Base+0x76cc>
   14f2b:	mov    rdi,r12
   14f2e:	xor    eax,eax
   14f30:	call   3a090 <g_str_equal@plt+0x2cdd0>
   14f35:	xor    ecx,ecx
   14f37:	pop    rbx
   14f38:	mov    eax,ecx
   14f3a:	pop    rbp
   14f3b:	pop    r12
   14f3d:	ret    
   14f3e:	xchg   ax,ax
   14f40:	mov    edi,0x6
   14f45:	call   11920 <g_str_equal@plt+0x4660>
   14f4a:	cmp    rax,rbp
   14f4d:	mov    ecx,0x6
   14f52:	je     14f37 <g_str_equal@plt+0x7c77>
   14f54:	mov    edi,0x7
   14f59:	call   11920 <g_str_equal@plt+0x4660>
   14f5e:	cmp    rax,rbp
   14f61:	mov    ecx,0x7
   14f66:	je     14f37 <g_str_equal@plt+0x7c77>
   14f68:	mov    edi,0x8
   14f6d:	call   11920 <g_str_equal@plt+0x4660>
   14f72:	cmp    rax,rbp
   14f75:	mov    ecx,0x8
   14f7a:	je     14f37 <g_str_equal@plt+0x7c77>
   14f7c:	mov    r9,rbp
   14f7f:	lea    r8,[rip+0x44eda]        # 59e60 <_fini@@Base+0x770c>
   14f86:	lea    rcx,[rip+0x452d3]        # 5a260 <_fini@@Base+0x7b0c>
   14f8d:	mov    edx,0x173
   14f92:	jmp    14f24 <g_str_equal@plt+0x7c64>
   14f94:	nop    DWORD PTR [rax+0x0]
   14f98:	mov    edi,0x9
   14f9d:	call   11920 <g_str_equal@plt+0x4660>
   14fa2:	cmp    rax,rbp
   14fa5:	mov    ecx,0x9
   14faa:	je     14f37 <g_str_equal@plt+0x7c77>
   14fac:	mov    edi,0xa
   14fb1:	call   11920 <g_str_equal@plt+0x4660>
   14fb6:	cmp    rax,rbp
   14fb9:	mov    ecx,0xa
   14fbe:	je     14f37 <g_str_equal@plt+0x7c77>
   14fc4:	mov    edi,0xb
   14fc9:	call   11920 <g_str_equal@plt+0x4660>
   14fce:	cmp    rax,rbp
   14fd1:	mov    ecx,0xb
   14fd6:	je     14f37 <g_str_equal@plt+0x7c77>
   14fdc:	mov    r9,rbp
   14fdf:	lea    r8,[rip+0x44eaa]        # 59e90 <_fini@@Base+0x773c>
   14fe6:	lea    rcx,[rip+0x45273]        # 5a260 <_fini@@Base+0x7b0c>
   14fed:	mov    edx,0x185
   14ff2:	jmp    14f24 <g_str_equal@plt+0x7c64>
   14ff7:	nop    WORD PTR [rax+rax*1+0x0]
   15000:	xor    eax,eax
   15002:	cmp    rsi,0x7
   15006:	jbe    15014 <g_str_equal@plt+0x7d54>
   15008:	mov    eax,DWORD PTR [rip+0x45392]        # 5a3a0 <_fini@@Base+0x7c4c>
   1500e:	cmp    DWORD PTR [rdi],eax
   15010:	je     15020 <g_str_equal@plt+0x7d60>
   15012:	xor    eax,eax
   15014:	repz ret 
   15016:	nop    WORD PTR cs:[rax+rax*1+0x0]
   15020:	movzx  eax,WORD PTR [rip+0x4537d]        # 5a3a4 <_fini@@Base+0x7c50>
   15027:	cmp    WORD PTR [rdi+0x4],ax
   1502b:	jne    15012 <g_str_equal@plt+0x7d52>
   1502d:	movzx  eax,WORD PTR [rdi+0x6]
   15031:	ror    ax,0x8
   15035:	cmp    ax,0x1
   15039:	sete   al
   1503c:	ret    
   1503d:	nop    DWORD PTR [rax]
   15040:	mov    rax,rsi
   15043:	sub    rsp,0x8
   15047:	test   eax,0x1ff
   1504c:	jne    1507a <g_str_equal@plt+0x7dba>
   1504e:	test   ecx,0x1ff
   15054:	jne    15099 <g_str_equal@plt+0x7dd9>
   15056:	mov    rsi,QWORD PTR [rdi+0x30]
   1505a:	mov    r9,rdx
   1505d:	mov    rdx,QWORD PTR [rdi+0x20]
   15061:	mov    rdi,QWORD PTR [rdi+0x18]
   15065:	push   r8
   15067:	mov    r8,rax
   1506a:	push   rcx
   1506b:	mov    ecx,0x200
   15070:	call   14780 <g_str_equal@plt+0x74c0>
   15075:	add    rsp,0x18
   15079:	ret    
   1507a:	lea    rcx,[rip+0x4526f]        # 5a2f0 <_fini@@Base+0x7b9c>
   15081:	lea    rsi,[rip+0x44d98]        # 59e20 <_fini@@Base+0x76cc>
   15088:	lea    rdi,[rip+0x44e59]        # 59ee8 <_fini@@Base+0x7794>
   1508f:	mov    edx,0x57f
   15094:	call   c390 <__assert_fail@plt>
   15099:	lea    rcx,[rip+0x45250]        # 5a2f0 <_fini@@Base+0x7b9c>
   150a0:	lea    rsi,[rip+0x44d79]        # 59e20 <_fini@@Base+0x76cc>
   150a7:	lea    rdi,[rip+0x44e72]        # 59f20 <_fini@@Base+0x77cc>
   150ae:	mov    edx,0x580
   150b3:	call   c390 <__assert_fail@plt>
   150b8:	nop    DWORD PTR [rax+rax*1+0x0]
   150c0:	mov    rax,rsi
   150c3:	sub    rsp,0x8
   150c7:	test   eax,0x1ff
   150cc:	jne    150fa <g_str_equal@plt+0x7e3a>
   150ce:	test   ecx,0x1ff
   150d4:	jne    15119 <g_str_equal@plt+0x7e59>
   150d6:	mov    rsi,QWORD PTR [rdi+0x30]
   150da:	mov    r9,rdx
   150dd:	mov    rdx,QWORD PTR [rdi+0x20]
   150e1:	mov    rdi,QWORD PTR [rdi+0x18]
   150e5:	push   r8
   150e7:	mov    r8,rax
   150ea:	push   rcx
   150eb:	mov    ecx,0x200
   150f0:	call   148e0 <g_str_equal@plt+0x7620>
   150f5:	add    rsp,0x18
   150f9:	ret    
   150fa:	lea    rcx,[rip+0x451cf]        # 5a2d0 <_fini@@Base+0x7b7c>
   15101:	lea    rsi,[rip+0x44d18]        # 59e20 <_fini@@Base+0x76cc>
   15108:	lea    rdi,[rip+0x44dd9]        # 59ee8 <_fini@@Base+0x7794>
   1510f:	mov    edx,0x58f
   15114:	call   c390 <__assert_fail@plt>
   15119:	lea    rcx,[rip+0x451b0]        # 5a2d0 <_fini@@Base+0x7b7c>
   15120:	lea    rsi,[rip+0x44cf9]        # 59e20 <_fini@@Base+0x76cc>
   15127:	lea    rdi,[rip+0x44df2]        # 59f20 <_fini@@Base+0x77cc>
   1512e:	mov    edx,0x590
   15133:	call   c390 <__assert_fail@plt>
   15138:	nop    DWORD PTR [rax+rax*1+0x0]
   15140:	push   r15
   15142:	push   r14
   15144:	push   r13
   15146:	push   r12
   15148:	mov    r12,rdi
   1514b:	push   rbp
   1514c:	push   rbx
   1514d:	sub    rsp,0xf8
   15154:	movdqu xmm0,XMMWORD PTR [rsi+0x8]
   15159:	mov    rax,QWORD PTR fs:0x28
   15162:	mov    QWORD PTR [rsp+0xe8],rax
   1516a:	xor    eax,eax
   1516c:	movaps XMMWORD PTR [rsp+0x80],xmm0
   15174:	mov    rax,QWORD PTR [rsi+0x48]
   15178:	mov    QWORD PTR [rsp+0x60],rcx
   1517d:	movdqu xmm0,XMMWORD PTR [rsi+0x18]
   15182:	mov    QWORD PTR [rsp+0x50],r8
   15187:	mov    QWORD PTR [rsp+0x28],r9
   1518c:	movaps XMMWORD PTR [rsp+0x90],xmm0
   15194:	mov    rbp,QWORD PTR [rsp+0x130]
   1519c:	mov    QWORD PTR [rsp+0x78],0x0
   151a5:	movdqu xmm0,XMMWORD PTR [rsi+0x28]
   151aa:	mov    QWORD PTR [rsp+0xc0],rax
   151b2:	movaps XMMWORD PTR [rsp+0xa0],xmm0
   151ba:	movdqu xmm0,XMMWORD PTR [rsi+0x38]
   151bf:	movaps XMMWORD PTR [rsp+0xb0],xmm0
   151c7:	cmp    BYTE PTR [rsp+0xb8],0x0
   151cf:	jne    151dd <g_str_equal@plt+0x7f1d>
   151d1:	mov    QWORD PTR [rsp+0xc0],0x7d0
   151dd:	cmp    BYTE PTR [rsp+0x90],0x0
   151e5:	jne    151f2 <g_str_equal@plt+0x7f32>
   151e7:	mov    DWORD PTR [rsp+0x94],0x2
   151f2:	cmp    BYTE PTR [rsp+0x98],0x0
   151fa:	jne    15207 <g_str_equal@plt+0x7f47>
   151fc:	mov    DWORD PTR [rsp+0x9c],0x2
   15207:	cmp    BYTE PTR [rsp+0xa0],0x0
   1520f:	movzx  eax,BYTE PTR [rsp+0xb0]
   15217:	jne    159f8 <g_str_equal@plt+0x8738>
   1521d:	test   al,al
   1521f:	mov    DWORD PTR [rsp+0xa4],0x1
   1522a:	mov    r14d,0x1
   15230:	je     15b28 <g_str_equal@plt+0x8868>
   15236:	cmp    QWORD PTR [rsi+0x10],0x0
   1523b:	je     15c68 <g_str_equal@plt+0x89a8>
   15241:	mov    rdi,QWORD PTR [rsp+0x88]
   15249:	mov    rsi,rbp
   1524c:	call   132a0 <g_str_equal@plt+0x5fe0>
   15251:	test   rax,rax
   15254:	mov    QWORD PTR [rsp],rax
   15258:	je     15ca4 <g_str_equal@plt+0x89e4>
   1525e:	mov    edi,0x264
   15263:	mov    r13d,0x1
   15269:	call   ce00 <g_malloc0@plt>
   1526e:	mov    rbx,rax
   15271:	mov    QWORD PTR [r12+0x10],rax
   15276:	mov    eax,DWORD PTR [rip+0x45124]        # 5a3a0 <_fini@@Base+0x7c4c>
   1527c:	mov    WORD PTR [rbx+0x6],r13w
   15281:	lea    r13,[rsp+0xd0]
   15289:	mov    DWORD PTR [rbx],eax
   1528b:	movzx  eax,WORD PTR [rip+0x45112]        # 5a3a4 <_fini@@Base+0x7c50>
   15292:	mov    rdi,r13
   15295:	mov    WORD PTR [rbx+0x4],ax
   15299:	call   41ef0 <g_str_equal@plt+0x34c30>
   1529e:	lea    rsi,[rbx+0xa8]
   152a5:	mov    rdi,r13
   152a8:	call   41fb0 <g_str_equal@plt+0x34cf0>
   152ad:	mov    esi,DWORD PTR [rsp+0x94]
   152b4:	lea    rdx,[rip+0x450c5]        # 5a380 <_fini@@Base+0x7c2c>
   152bb:	lea    r8,[rip+0x26b026]        # 2802e8 <_fini@@Base+0x22db94>
   152c2:	mov    eax,0x10
   152c7:	xor    edi,edi
   152c9:	test   eax,eax
   152cb:	je     152f2 <g_str_equal@plt+0x8032>
   152cd:	cmp    esi,DWORD PTR [rdx+0x4]
   152d0:	je     15310 <g_str_equal@plt+0x8050>
   152d2:	xor    eax,eax
   152d4:	jmp    152e6 <g_str_equal@plt+0x8026>
   152d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   152e0:	cmp    esi,DWORD PTR [rdx+rax*8+0x4]
   152e4:	je     15310 <g_str_equal@plt+0x8050>
   152e6:	add    rax,0x1
   152ea:	mov    ecx,DWORD PTR [rdx+rax*8]
   152ed:	cmp    rax,rcx
   152f0:	jb     152e0 <g_str_equal@plt+0x8020>
   152f2:	add    rdi,0x1
   152f6:	cmp    rdi,0x4
   152fa:	je     15a78 <g_str_equal@plt+0x87b8>
   15300:	mov    rax,rdi
   15303:	shl    rax,0x4
   15307:	mov    rdx,QWORD PTR [r8+rax*1]
   1530b:	mov    eax,DWORD PTR [rdx]
   1530d:	jmp    152c9 <g_str_equal@plt+0x8009>
   1530f:	nop
   15310:	lea    rax,[rip+0x26afc9]        # 2802e0 <_fini@@Base+0x22db8c>
   15317:	shl    rdi,0x4
   1531b:	mov    r13,QWORD PTR [rax+rdi*1]
   1531f:	test   r13,r13
   15322:	je     15d85 <g_str_equal@plt+0x8ac5>
   15328:	mov    esi,DWORD PTR [rsp+0x9c]
   1532f:	lea    rdi,[rip+0x26b5ba]        # 2808f0 <_fini@@Base+0x22e19c>
   15336:	call   2df50 <g_str_equal@plt+0x20c90>
   1533b:	lea    rdi,[rip+0x26b57e]        # 2808c0 <_fini@@Base+0x22e16c>
   15342:	mov    esi,r14d
   15345:	mov    r15,rax
   15348:	call   2df50 <g_str_equal@plt+0x20c90>
   1534d:	cmp    BYTE PTR [rsp+0xa8],0x0
   15355:	mov    r14,rax
   15358:	jne    15a40 <g_str_equal@plt+0x8780>
   1535e:	lea    rdi,[rip+0x44ddd]        # 5a142 <_fini@@Base+0x79ee>
   15365:	mov    rdx,rax
   15368:	mov    rsi,r15
   1536b:	xor    eax,eax
   1536d:	call   c740 <g_strdup_printf@plt>
   15372:	mov    QWORD PTR [rsp+0x8],rax
   15377:	mov    r15d,DWORD PTR [rsp+0xb4]
   1537f:	lea    rdi,[rip+0x26b61a]        # 2809a0 <_fini@@Base+0x22e24c>
   15386:	mov    esi,r15d
   15389:	call   2df50 <g_str_equal@plt+0x20c90>
   1538e:	mov    rdi,r13
   15391:	mov    r14,rax
   15394:	call   c720 <strlen@plt>
   15399:	cmp    rax,0x1f
   1539d:	ja     15cff <g_str_equal@plt+0x8a3f>
   153a3:	mov    rdi,QWORD PTR [rsp+0x8]
   153a8:	call   c720 <strlen@plt>
   153ad:	cmp    rax,0x1f
   153b1:	ja     15d2b <g_str_equal@plt+0x8a6b>
   153b7:	mov    rdi,r14
   153ba:	call   c720 <strlen@plt>
   153bf:	cmp    rax,0x1f
   153c3:	ja     15d59 <g_str_equal@plt+0x8a99>
   153c9:	mov    eax,DWORD PTR [rsp+0xa4]
   153d0:	mov    ecx,DWORD PTR [rsp+0x94]
   153d7:	cmp    eax,0x2
   153da:	mov    DWORD PTR [rsp+0x58],eax
   153de:	mov    DWORD PTR [rsp+0x10],ecx
   153e2:	mov    DWORD PTR [rsp+0x40],ecx
   153e6:	je     15b40 <g_str_equal@plt+0x8880>
   153ec:	lea    rdi,[rbx+0x8]
   153f0:	mov    edx,0x20
   153f5:	mov    rsi,r13
   153f8:	call   cb80 <__strcpy_chk@plt>
   153fd:	mov    rsi,QWORD PTR [rsp+0x8]
   15402:	lea    rdi,[rbx+0x28]
   15406:	mov    edx,0x20
   1540b:	call   cb80 <__strcpy_chk@plt>
   15410:	lea    rdi,[rbx+0x48]
   15414:	mov    edx,0x20
   15419:	mov    rsi,r14
   1541c:	call   cb80 <__strcpy_chk@plt>
   15421:	mov    edi,DWORD PTR [rsp+0x10]
   15425:	call   11920 <g_str_equal@plt+0x4660>
   1542a:	mov    ecx,DWORD PTR [rsp+0x9c]
   15431:	mov    DWORD PTR [rbx+0x6c],eax
   15434:	cmp    ecx,0x2
   15437:	mov    DWORD PTR [rsp+0x14],ecx
   1543b:	jne    15442 <g_str_equal@plt+0x8182>
   1543d:	add    eax,eax
   1543f:	mov    DWORD PTR [rbx+0x6c],eax
   15442:	lea    r13,[rbx+0x84]
   15449:	mov    rdx,rbp
   1544c:	mov    esi,0x20
   15451:	mov    rdi,r13
   15454:	call   13440 <g_str_equal@plt+0x6180>
   15459:	test   eax,eax
   1545b:	js     15b6d <g_str_equal@plt+0x88ad>
   15461:	mov    edi,DWORD PTR [rbx+0x6c]
   15464:	call   ce00 <g_malloc0@plt>
   15469:	mov    esi,DWORD PTR [rbx+0x6c]
   1546c:	mov    rdx,rbp
   1546f:	mov    rdi,rax
   15472:	mov    r14,rax
   15475:	mov    QWORD PTR [rsp+0x20],rax
   1547a:	call   13440 <g_str_equal@plt+0x6180>
   1547f:	test   eax,eax
   15481:	js     15bc6 <g_str_equal@plt+0x8906>
   15487:	mov    ecx,DWORD PTR [rbx+0x6c]
   1548a:	mov    esi,DWORD PTR [rsp+0x14]
   1548e:	mov    r8,rbp
   15491:	mov    edi,DWORD PTR [rsp+0x10]
   15495:	mov    rdx,r14
   15498:	call   119a0 <g_str_equal@plt+0x46e0>
   1549d:	test   rax,rax
   154a0:	mov    QWORD PTR [r12+0x18],rax
   154a5:	je     15bc6 <g_str_equal@plt+0x8906>
   154ab:	mov    esi,DWORD PTR [rsp+0x14]
   154af:	mov    edi,DWORD PTR [rsp+0x10]
   154b3:	mov    DWORD PTR [r12+0x28],r15d
   154b8:	call   11960 <g_str_equal@plt+0x46a0>
   154bd:	mov    r8d,DWORD PTR [rbx+0x6c]
   154c1:	mov    edx,DWORD PTR [rsp+0xac]
   154c8:	mov    r9,rbp
   154cb:	mov    esi,DWORD PTR [rsp+0x40]
   154cf:	mov    edi,DWORD PTR [rsp+0x58]
   154d3:	mov    rcx,r14
   154d6:	mov    QWORD PTR [r12+0x30],rax
   154db:	mov    DWORD PTR [rsp+0x5c],edx
   154df:	call   13730 <g_str_equal@plt+0x6470>
   154e4:	test   rax,rax
   154e7:	mov    QWORD PTR [r12+0x20],rax
   154ec:	je     15bc6 <g_str_equal@plt+0x8906>
   154f2:	sub    rsp,0x8
   154f6:	mov    edx,DWORD PTR [rbx+0x6c]
   154f9:	mov    rcx,r13
   154fc:	lea    rax,[rsp+0x80]
   15504:	mov    rsi,r14
   15507:	mov    r9d,0x14
   1550d:	mov    r8d,0x20
   15513:	mov    edi,r15d
   15516:	mov    QWORD PTR [rsp+0x38],rax
   1551b:	push   rax
   1551c:	call   135d0 <g_str_equal@plt+0x6310>
   15521:	mov    rsi,QWORD PTR [rsp+0x88]
   15529:	mov    rcx,rax
   1552c:	pop    r10
   1552e:	pop    r11
   15530:	test   rsi,rsi
   15533:	jne    15c45 <g_str_equal@plt+0x8985>
   15539:	mov    rax,QWORD PTR [rsp+0xc0]
   15541:	mov    QWORD PTR [rsp+0x18],rax
   15546:	mul    rcx
   15549:	jo     15d93 <g_str_equal@plt+0x8ad3>
   1554f:	shr    rax,0x6
   15553:	movabs rdx,0x20c49ba5e353f7d
   1555d:	mul    rdx
   15560:	mov    eax,0xffffffff
   15565:	cmp    rdx,rax
   15568:	ja     15b97 <g_str_equal@plt+0x88d7>
   1556e:	cmp    rdx,0x3e8
   15575:	lea    rax,[rbx+0x70]
   15579:	mov    r9d,0x3e8
   1557f:	cmovae r9,rdx
   15583:	sub    rsp,0x8
   15587:	mov    edx,DWORD PTR [rbx+0x6c]
   1558a:	mov    DWORD PTR [rbx+0xa4],r9d
   15591:	push   rbp
   15592:	mov    r8d,0x20
   15598:	push   0x14
   1559a:	push   rax
   1559b:	mov    rcx,r13
   1559e:	mov    rsi,QWORD PTR [rsp+0x40]
   155a3:	mov    edi,r15d
   155a6:	call   43e10 <g_str_equal@plt+0x36b50>
   155ab:	add    rsp,0x20
   155af:	test   eax,eax
   155b1:	js     15bc6 <g_str_equal@plt+0x8906>
   155b7:	imul   eax,DWORD PTR [rbx+0x6c],0xfa0
   155be:	lea    r13,[rbx+0xd0]
   155c5:	mov    ecx,0x8
   155ca:	xor    edx,edx
   155cc:	mov    QWORD PTR [rsp+0x48],rax
   155d1:	add    rax,0x1ff
   155d7:	shr    rax,0x9
   155db:	add    rax,0x7
   155df:	mov    esi,eax
   155e1:	mov    QWORD PTR [rsp+0x68],rax
   155e6:	mov    rax,r13
   155e9:	and    esi,0xfffffff8
   155ec:	jmp    155fa <g_str_equal@plt+0x833a>
   155ee:	xchg   ax,ax
   155f0:	add    rdx,0x1
   155f4:	add    rax,0x30
   155f8:	add    ecx,esi
   155fa:	test   rdx,rdx
   155fd:	je     15c30 <g_str_equal@plt+0x8970>
   15603:	cmp    rdx,0x7
   15607:	mov    DWORD PTR [rax],0xdead
   1560d:	mov    DWORD PTR [rax+0x2c],0xfa0
   15614:	mov    DWORD PTR [rax+0x28],ecx
   15617:	jne    155f0 <g_str_equal@plt+0x8330>
   15619:	lea    r14,[rbx+0xd8]
   15620:	mov    rdx,rbp
   15623:	mov    esi,0x20
   15628:	mov    rdi,r14
   1562b:	call   13440 <g_str_equal@plt+0x6180>
   15630:	test   eax,eax
   15632:	js     15bc6 <g_str_equal@plt+0x8906>
   15638:	mov    rdi,QWORD PTR [rsp]
   1563c:	call   c720 <strlen@plt>
   15641:	sub    rsp,0x8
   15645:	mov    r8d,0x20
   1564b:	mov    rcx,r14
   1564e:	push   QWORD PTR [rsp+0x38]
   15652:	mov    r9d,DWORD PTR [rbx+0x6c]
   15656:	mov    rdx,rax
   15659:	mov    rsi,QWORD PTR [rsp+0x10]
   1565e:	mov    edi,r15d
   15661:	call   135d0 <g_str_equal@plt+0x6310>
   15666:	mov    rsi,QWORD PTR [rsp+0x88]
   1566e:	mov    rcx,rax
   15671:	pop    r8
   15673:	pop    r9
   15675:	test   rsi,rsi
   15678:	jne    15c45 <g_str_equal@plt+0x8985>
   1567e:	mov    rax,QWORD PTR [rsp+0x18]
   15683:	mul    rcx
   15686:	jo     15de0 <g_str_equal@plt+0x8b20>
   1568c:	shr    rax,0x3
   15690:	movabs rdx,0x20c49ba5e353f7cf
   1569a:	mul    rdx
   1569d:	mov    eax,0xffffffff
   156a2:	shr    rdx,0x4
   156a6:	cmp    rdx,rax
   156a9:	ja     15cc5 <g_str_equal@plt+0x8a05>
   156af:	mov    edi,DWORD PTR [rbx+0x6c]
   156b2:	cmp    rdx,0x3e8
   156b9:	mov    eax,0x3e8
   156be:	cmovb  rdx,rax
   156c2:	mov    DWORD PTR [rbx+0xd4],edx
   156c8:	call   ce00 <g_malloc0@plt>
   156cd:	mov    rdi,QWORD PTR [rsp]
   156d1:	mov    QWORD PTR [rsp+0x18],rax
   156d6:	call   c720 <strlen@plt>
   156db:	sub    rsp,0x8
   156df:	mov    r8d,0x20
   156e5:	mov    rcx,r14
   156e8:	push   rbp
   156e9:	mov    edx,DWORD PTR [rbx+0x6c]
   156ec:	mov    edi,r15d
   156ef:	push   rdx
   156f0:	push   QWORD PTR [rsp+0x30]
   156f4:	mov    rdx,rax
   156f7:	mov    r9d,DWORD PTR [rbx+0xd4]
   156fe:	mov    rsi,QWORD PTR [rsp+0x20]
   15703:	call   43e10 <g_str_equal@plt+0x36b50>
   15708:	add    rsp,0x20
   1570c:	test   eax,eax
   1570e:	js     15cae <g_str_equal@plt+0x89ee>
   15714:	mov    r14,QWORD PTR [rsp+0x18]
   15719:	mov    ecx,DWORD PTR [rbx+0x6c]
   1571c:	mov    r8,rbp
   1571f:	mov    esi,DWORD PTR [rsp+0x14]
   15723:	mov    edi,DWORD PTR [rsp+0x10]
   15727:	mov    rdx,r14
   1572a:	call   119a0 <g_str_equal@plt+0x46e0>
   1572f:	test   rax,rax
   15732:	mov    QWORD PTR [rsp+0x38],rax
   15737:	je     15ce6 <g_str_equal@plt+0x8a26>
   1573d:	mov    r8d,DWORD PTR [rbx+0x6c]
   15741:	mov    edx,DWORD PTR [rsp+0x5c]
   15745:	mov    r9,rbp
   15748:	mov    esi,DWORD PTR [rsp+0x40]
   1574c:	mov    edi,DWORD PTR [rsp+0x58]
   15750:	mov    rcx,r14
   15753:	call   13730 <g_str_equal@plt+0x6470>
   15758:	test   rax,rax
   1575b:	mov    QWORD PTR [rsp+0x40],rax
   15760:	je     15cf7 <g_str_equal@plt+0x8a37>
   15766:	mov    rdi,QWORD PTR [rsp+0x48]
   1576b:	call   ce00 <g_malloc0@plt>
   15770:	mov    esi,DWORD PTR [rbx+0x6c]
   15773:	mov    edx,DWORD PTR [rbx+0xfc]
   15779:	mov    r9,rbp
   1577c:	mov    rcx,QWORD PTR [rsp+0x20]
   15781:	mov    r8,rax
   15784:	mov    edi,r15d
   15787:	mov    r14,rax
   1578a:	call   13e10 <g_str_equal@plt+0x6b50>
   1578f:	test   eax,eax
   15791:	js     15c5a <g_str_equal@plt+0x899a>
   15797:	push   rbp
   15798:	mov    rsi,QWORD PTR [r12+0x30]
   1579d:	xor    r8d,r8d
   157a0:	push   QWORD PTR [rsp+0x50]
   157a4:	mov    rdx,QWORD PTR [rsp+0x50]
   157a9:	mov    ecx,0x200
   157ae:	mov    rdi,QWORD PTR [rsp+0x48]
   157b3:	mov    r9,r14
   157b6:	call   148e0 <g_str_equal@plt+0x7620>
   157bb:	test   eax,eax
   157bd:	pop    rdx
   157be:	pop    rcx
   157bf:	js     15c5a <g_str_equal@plt+0x899a>
   157c5:	mov    rax,QWORD PTR [rsp+0x68]
   157ca:	mov    QWORD PTR [r12+0x40],0x200
   157d3:	mov    rdi,r12
   157d6:	mov    rcx,QWORD PTR [rsp+0x30]
   157db:	mov    rdx,QWORD PTR [rsp+0x28]
   157e0:	and    rax,0xfffffffffffffff8
   157e4:	lea    esi,[rax*8+0x8]
   157eb:	mov    rax,QWORD PTR [rsp+0x60]
   157f0:	mov    DWORD PTR [rbx+0x68],esi
   157f3:	shl    rsi,0x9
   157f7:	mov    QWORD PTR [r12+0x38],rsi
   157fc:	call   rax
   157fe:	mov    rsi,QWORD PTR [rsp+0x78]
   15803:	test   rsi,rsi
   15806:	jne    15c52 <g_str_equal@plt+0x8992>
   1580c:	movzx  eax,WORD PTR [rbx+0x6]
   15810:	lea    rdx,[rbx+0x250]
   15817:	mov    r10,r13
   1581a:	ror    ax,0x8
   1581e:	mov    WORD PTR [rbx+0x6],ax
   15822:	mov    eax,DWORD PTR [rbx+0x68]
   15825:	bswap  eax
   15827:	mov    DWORD PTR [rbx+0x68],eax
   1582a:	mov    eax,DWORD PTR [rbx+0x6c]
   1582d:	bswap  eax
   1582f:	mov    DWORD PTR [rbx+0x6c],eax
   15832:	mov    eax,DWORD PTR [rbx+0xa4]
   15838:	bswap  eax
   1583a:	mov    DWORD PTR [rbx+0xa4],eax
   15840:	mov    eax,DWORD PTR [r10]
   15843:	add    r10,0x30
   15847:	bswap  eax
   15849:	mov    DWORD PTR [r10-0x30],eax
   1584d:	mov    eax,DWORD PTR [r10-0x2c]
   15851:	bswap  eax
   15853:	mov    DWORD PTR [r10-0x2c],eax
   15857:	mov    eax,DWORD PTR [r10-0x8]
   1585b:	bswap  eax
   1585d:	mov    DWORD PTR [r10-0x8],eax
   15861:	mov    eax,DWORD PTR [r10-0x4]
   15865:	bswap  eax
   15867:	mov    DWORD PTR [r10-0x4],eax
   1586b:	cmp    rdx,r10
   1586e:	jne    15840 <g_str_equal@plt+0x8580>
   15870:	mov    QWORD PTR [rsp+0x60],r10
   15875:	mov    r9,QWORD PTR [rsp+0x30]
   1587a:	mov    ecx,0x250
   1587f:	mov    r8,QWORD PTR [rsp+0x28]
   15884:	mov    rdx,rbx
   15887:	xor    esi,esi
   15889:	mov    rdi,r12
   1588c:	mov    rax,QWORD PTR [rsp+0x50]
   15891:	call   rax
   15893:	movzx  eax,WORD PTR [rbx+0x6]
   15897:	mov    r10,QWORD PTR [rsp+0x60]
   1589c:	ror    ax,0x8
   158a0:	mov    WORD PTR [rbx+0x6],ax
   158a4:	mov    eax,DWORD PTR [rbx+0x68]
   158a7:	bswap  eax
   158a9:	mov    DWORD PTR [rbx+0x68],eax
   158ac:	mov    eax,DWORD PTR [rbx+0x6c]
   158af:	bswap  eax
   158b1:	mov    DWORD PTR [rbx+0x6c],eax
   158b4:	mov    eax,DWORD PTR [rbx+0xa4]
   158ba:	bswap  eax
   158bc:	mov    DWORD PTR [rbx+0xa4],eax
   158c2:	nop    WORD PTR [rax+rax*1+0x0]
   158c8:	mov    eax,DWORD PTR [r13+0x0]
   158cc:	add    r13,0x30
   158d0:	bswap  eax
   158d2:	mov    DWORD PTR [r13-0x30],eax
   158d6:	mov    eax,DWORD PTR [r13-0x2c]
   158da:	bswap  eax
   158dc:	mov    DWORD PTR [r13-0x2c],eax
   158e0:	mov    eax,DWORD PTR [r13-0x8]
   158e4:	bswap  eax
   158e6:	mov    DWORD PTR [r13-0x8],eax
   158ea:	mov    eax,DWORD PTR [r13-0x4]
   158ee:	bswap  eax
   158f0:	mov    DWORD PTR [r13-0x4],eax
   158f4:	cmp    r13,r10
   158f7:	jne    158c8 <g_str_equal@plt+0x8608>
   158f9:	mov    rsi,QWORD PTR [rsp+0x78]
   158fe:	test   rsi,rsi
   15901:	jne    15c52 <g_str_equal@plt+0x8992>
   15907:	mov    esi,DWORD PTR [rbx+0xf8]
   1590d:	mov    r9,rbp
   15910:	mov    rbp,QWORD PTR [rsp+0x48]
   15915:	mov    r8,QWORD PTR [rsp+0x28]
   1591a:	mov    rdx,r14
   1591d:	mov    rdi,r12
   15920:	mov    rax,QWORD PTR [rsp+0x50]
   15925:	mov    rcx,rbp
   15928:	shl    rsi,0x9
   1592c:	call   rax
   1592e:	cmp    rax,rbp
   15931:	jne    15c5a <g_str_equal@plt+0x899a>
   15937:	mov    eax,DWORD PTR [rsp+0x10]
   1593b:	mov    edx,DWORD PTR [rbx+0x6c]
   1593e:	xor    esi,esi
   15940:	mov    DWORD PTR [rbx+0x260],r15d
   15947:	mov    r15,QWORD PTR [rsp+0x20]
   1594c:	mov    DWORD PTR [rbx+0x250],eax
   15952:	mov    eax,DWORD PTR [rsp+0x14]
   15956:	mov    rdi,r15
   15959:	mov    DWORD PTR [rbx+0x254],eax
   1595f:	mov    eax,DWORD PTR [rsp+0x58]
   15963:	mov    DWORD PTR [rbx+0x258],eax
   15969:	mov    eax,DWORD PTR [rsp+0x5c]
   1596d:	mov    DWORD PTR [rbx+0x25c],eax
   15973:	call   c1c0 <memset@plt>
   15978:	mov    rdi,r15
   1597b:	call   d2b0 <g_free@plt>
   15980:	mov    edx,DWORD PTR [rbx+0x6c]
   15983:	mov    rbx,QWORD PTR [rsp+0x18]
   15988:	xor    esi,esi
   1598a:	mov    rdi,rbx
   1598d:	call   c1c0 <memset@plt>
   15992:	mov    rdi,rbx
   15995:	call   d2b0 <g_free@plt>
   1599a:	mov    rdi,r14
   1599d:	call   d2b0 <g_free@plt>
   159a2:	mov    rdi,QWORD PTR [rsp]
   159a6:	call   d2b0 <g_free@plt>
   159ab:	mov    rdi,QWORD PTR [rsp+0x8]
   159b0:	call   d2b0 <g_free@plt>
   159b5:	mov    rdi,QWORD PTR [rsp+0x40]
   159ba:	call   13860 <g_str_equal@plt+0x65a0>
   159bf:	mov    rdi,QWORD PTR [rsp+0x38]
   159c4:	call   11ec0 <g_str_equal@plt+0x4c00>
   159c9:	xor    eax,eax
   159cb:	mov    rbx,QWORD PTR [rsp+0xe8]
   159d3:	xor    rbx,QWORD PTR fs:0x28
   159dc:	jne    15e03 <g_str_equal@plt+0x8b43>
   159e2:	add    rsp,0xf8
   159e9:	pop    rbx
   159ea:	pop    rbp
   159eb:	pop    r12
   159ed:	pop    r13
   159ef:	pop    r14
   159f1:	pop    r15
   159f3:	ret    
   159f4:	nop    DWORD PTR [rax+0x0]
   159f8:	test   al,al
   159fa:	mov    r14d,DWORD PTR [rsp+0xa4]
   15a02:	jne    15a0f <g_str_equal@plt+0x874f>
   15a04:	mov    DWORD PTR [rsp+0xb4],0x3
   15a0f:	cmp    r14d,0x2
   15a13:	jne    15236 <g_str_equal@plt+0x7f76>
   15a19:	cmp    BYTE PTR [rsp+0xa8],0x0
   15a21:	jne    15236 <g_str_equal@plt+0x7f76>
   15a27:	mov    DWORD PTR [rsp+0xac],0x3
   15a32:	mov    BYTE PTR [rsp+0xa8],0x1
   15a3a:	jmp    15236 <g_str_equal@plt+0x7f76>
   15a3f:	nop
   15a40:	mov    esi,DWORD PTR [rsp+0xac]
   15a47:	lea    rdi,[rip+0x26af52]        # 2809a0 <_fini@@Base+0x22e24c>
   15a4e:	call   2df50 <g_str_equal@plt+0x20c90>
   15a53:	lea    rdi,[rip+0x446df]        # 5a139 <_fini@@Base+0x79e5>
   15a5a:	mov    rcx,rax
   15a5d:	mov    rdx,r14
   15a60:	mov    rsi,r15
   15a63:	xor    eax,eax
   15a65:	call   c740 <g_strdup_printf@plt>
   15a6a:	mov    QWORD PTR [rsp+0x8],rax
   15a6f:	jmp    15377 <g_str_equal@plt+0x80b7>
   15a74:	nop    DWORD PTR [rax+0x0]
   15a78:	lea    rdi,[rip+0x26aea1]        # 280920 <_fini@@Base+0x22e1cc>
   15a7f:	xor    r14d,r14d
   15a82:	call   2df50 <g_str_equal@plt+0x20c90>
   15a87:	lea    r8,[rip+0x4468e]        # 5a11c <_fini@@Base+0x79c8>
   15a8e:	lea    rcx,[rip+0x447eb]        # 5a280 <_fini@@Base+0x7b2c>
   15a95:	lea    rsi,[rip+0x44384]        # 59e20 <_fini@@Base+0x76cc>
   15a9c:	mov    r9,rax
   15a9f:	mov    edx,0x104
   15aa4:	mov    rdi,rbp
   15aa7:	xor    eax,eax
   15aa9:	call   3a090 <g_str_equal@plt+0x2cdd0>
   15aae:	xor    edi,edi
   15ab0:	call   d2b0 <g_free@plt>
   15ab5:	mov    QWORD PTR [rsp+0x8],0x0
   15abe:	mov    QWORD PTR [rsp+0x40],0x0
   15ac7:	mov    QWORD PTR [rsp+0x38],0x0
   15ad0:	mov    QWORD PTR [rsp+0x18],0x0
   15ad9:	mov    rdi,QWORD PTR [rsp+0x18]
   15ade:	call   d2b0 <g_free@plt>
   15ae3:	mov    rdi,r14
   15ae6:	call   d2b0 <g_free@plt>
   15aeb:	mov    rdi,QWORD PTR [rsp]
   15aef:	call   d2b0 <g_free@plt>
   15af4:	mov    rdi,QWORD PTR [rsp+0x8]
   15af9:	call   d2b0 <g_free@plt>
   15afe:	mov    rdi,QWORD PTR [rsp+0x40]
   15b03:	call   13860 <g_str_equal@plt+0x65a0>
   15b08:	mov    rdi,QWORD PTR [rsp+0x38]
   15b0d:	call   11ec0 <g_str_equal@plt+0x4c00>
   15b12:	mov    rdi,rbx
   15b15:	call   d2b0 <g_free@plt>
   15b1a:	mov    eax,0xffffffff
   15b1f:	jmp    159cb <g_str_equal@plt+0x870b>
   15b24:	nop    DWORD PTR [rax+0x0]
   15b28:	mov    DWORD PTR [rsp+0xb4],0x3
   15b33:	jmp    15236 <g_str_equal@plt+0x7f76>
   15b38:	nop    DWORD PTR [rax+rax*1+0x0]
   15b40:	mov    esi,DWORD PTR [rsp+0xac]
   15b47:	lea    rdx,[rsp+0x78]
   15b4c:	mov    edi,ecx
   15b4e:	call   14e60 <g_str_equal@plt+0x7ba0>
   15b53:	mov    rsi,QWORD PTR [rsp+0x78]
   15b58:	mov    DWORD PTR [rsp+0x40],eax
   15b5c:	test   rsi,rsi
   15b5f:	je     153ec <g_str_equal@plt+0x812c>
   15b65:	mov    rdi,rbp
   15b68:	call   3a4c0 <g_str_equal@plt+0x2d200>
   15b6d:	xor    edi,edi
   15b6f:	xor    r14d,r14d
   15b72:	call   d2b0 <g_free@plt>
   15b77:	mov    QWORD PTR [rsp+0x40],0x0
   15b80:	mov    QWORD PTR [rsp+0x38],0x0
   15b89:	mov    QWORD PTR [rsp+0x18],0x0
   15b92:	jmp    15ad9 <g_str_equal@plt+0x8819>
   15b97:	lea    r9,[rip+0x4447a]        # 5a018 <_fini@@Base+0x78c4>
   15b9e:	lea    rcx,[rip+0x4470b]        # 5a2b0 <_fini@@Base+0x7b5c>
   15ba5:	push   0xffffffffffffffff
   15ba7:	mov    r8d,0x22
   15bad:	push   rdx
   15bae:	mov    edx,0x43f
   15bb3:	lea    rsi,[rip+0x44266]        # 59e20 <_fini@@Base+0x76cc>
   15bba:	mov    rdi,rbp
   15bbd:	xor    eax,eax
   15bbf:	call   3a140 <g_str_equal@plt+0x2ce80>
   15bc4:	pop    rsi
   15bc5:	pop    rdi
   15bc6:	cmp    QWORD PTR [rsp+0x20],0x0
   15bcc:	je     15db6 <g_str_equal@plt+0x8af6>
   15bd2:	mov    QWORD PTR [rsp+0x40],0x0
   15bdb:	mov    QWORD PTR [rsp+0x38],0x0
   15be4:	xor    r14d,r14d
   15be7:	mov    QWORD PTR [rsp+0x18],0x0
   15bf0:	mov    edx,DWORD PTR [rbx+0x6c]
   15bf3:	mov    rdi,QWORD PTR [rsp+0x20]
   15bf8:	xor    esi,esi
   15bfa:	call   c1c0 <memset@plt>
   15bff:	mov    rdi,QWORD PTR [rsp+0x20]
   15c04:	call   d2b0 <g_free@plt>
   15c09:	mov    rdi,QWORD PTR [rsp+0x18]
   15c0e:	test   rdi,rdi
   15c11:	je     15ad9 <g_str_equal@plt+0x8819>
   15c17:	mov    edx,DWORD PTR [rbx+0x6c]
   15c1a:	xor    esi,esi
   15c1c:	call   c1c0 <memset@plt>
   15c21:	jmp    15ad9 <g_str_equal@plt+0x8819>
   15c26:	nop    WORD PTR cs:[rax+rax*1+0x0]
   15c30:	mov    DWORD PTR [rax],0xac71f3
   15c36:	mov    DWORD PTR [rax+0x2c],0xfa0
   15c3d:	mov    DWORD PTR [rax+0x28],ecx
   15c40:	jmp    155f0 <g_str_equal@plt+0x8330>
   15c45:	mov    rdi,rbp
   15c48:	call   3a4c0 <g_str_equal@plt+0x2d200>
   15c4d:	jmp    15bc6 <g_str_equal@plt+0x8906>
   15c52:	mov    rdi,rbp
   15c55:	call   3a4c0 <g_str_equal@plt+0x2d200>
   15c5a:	cmp    QWORD PTR [rsp+0x20],0x0
   15c60:	jne    15bf0 <g_str_equal@plt+0x8930>
   15c62:	jmp    15bff <g_str_equal@plt+0x893f>
   15c64:	nop    DWORD PTR [rax+0x0]
   15c68:	lea    r9,[rip+0x4a5ff]        # 6026e <_fini@@Base+0xdb1a>
   15c6f:	test   rdx,rdx
   15c72:	lea    r8,[rip+0x440bf]        # 59d38 <_fini@@Base+0x75e4>
   15c79:	lea    rcx,[rip+0x44630]        # 5a2b0 <_fini@@Base+0x7b5c>
   15c80:	lea    rsi,[rip+0x44199]        # 59e20 <_fini@@Base+0x76cc>
   15c87:	mov    rdi,rbp
   15c8a:	cmovne r9,rdx
   15c8e:	xor    eax,eax
   15c90:	mov    edx,0x3ab
   15c95:	call   3a090 <g_str_equal@plt+0x2cdd0>
   15c9a:	mov    eax,0xffffffff
   15c9f:	jmp    159cb <g_str_equal@plt+0x870b>
   15ca4:	mov    eax,0xffffffff
   15ca9:	jmp    159cb <g_str_equal@plt+0x870b>
   15cae:	mov    QWORD PTR [rsp+0x40],0x0
   15cb7:	mov    QWORD PTR [rsp+0x38],0x0
   15cc0:	xor    r14d,r14d
   15cc3:	jmp    15c5a <g_str_equal@plt+0x899a>
   15cc5:	push   0xffffffffffffffff
   15cc7:	lea    r9,[rip+0x4434a]        # 5a018 <_fini@@Base+0x78c4>
   15cce:	push   rdx
   15ccf:	mov    r8d,0x22
   15cd5:	lea    rcx,[rip+0x445d4]        # 5a2b0 <_fini@@Base+0x7b5c>
   15cdc:	mov    edx,0x48b
   15ce1:	jmp    15bb3 <g_str_equal@plt+0x88f3>
   15ce6:	mov    QWORD PTR [rsp+0x40],0x0
   15cef:	xor    r14d,r14d
   15cf2:	jmp    15c5a <g_str_equal@plt+0x899a>
   15cf7:	xor    r14d,r14d
   15cfa:	jmp    15c5a <g_str_equal@plt+0x899a>
   15cff:	lea    r8,[rip+0x44252]        # 59f58 <_fini@@Base+0x7804>
   15d06:	lea    rcx,[rip+0x445a3]        # 5a2b0 <_fini@@Base+0x7b5c>
   15d0d:	lea    rsi,[rip+0x4410c]        # 59e20 <_fini@@Base+0x76cc>
   15d14:	mov    r9,r13
   15d17:	mov    edx,0x3d4
   15d1c:	mov    rdi,rbp
   15d1f:	xor    eax,eax
   15d21:	call   3a090 <g_str_equal@plt+0x2cdd0>
   15d26:	jmp    15b6d <g_str_equal@plt+0x88ad>
   15d2b:	mov    r9,QWORD PTR [rsp+0x8]
   15d30:	lea    r8,[rip+0x44251]        # 59f88 <_fini@@Base+0x7834>
   15d37:	lea    rcx,[rip+0x44572]        # 5a2b0 <_fini@@Base+0x7b5c>
   15d3e:	lea    rsi,[rip+0x440db]        # 59e20 <_fini@@Base+0x76cc>
   15d45:	mov    edx,0x3d9
   15d4a:	mov    rdi,rbp
   15d4d:	xor    eax,eax
   15d4f:	call   3a090 <g_str_equal@plt+0x2cdd0>
   15d54:	jmp    15b6d <g_str_equal@plt+0x88ad>
   15d59:	lea    r8,[rip+0x44258]        # 59fb8 <_fini@@Base+0x7864>
   15d60:	lea    rcx,[rip+0x44549]        # 5a2b0 <_fini@@Base+0x7b5c>
   15d67:	lea    rsi,[rip+0x440b2]        # 59e20 <_fini@@Base+0x76cc>
   15d6e:	mov    r9,r14
   15d71:	mov    edx,0x3de
   15d76:	mov    rdi,rbp
   15d79:	xor    eax,eax
   15d7b:	call   3a090 <g_str_equal@plt+0x2cdd0>
   15d80:	jmp    15b6d <g_str_equal@plt+0x88ad>
   15d85:	mov    QWORD PTR [rsp+0x8],0x0
   15d8e:	jmp    15b6d <g_str_equal@plt+0x88ad>
   15d93:	sub    rsp,0x8
   15d97:	lea    r9,[rip+0x4424a]        # 59fe8 <_fini@@Base+0x7894>
   15d9e:	mov    r8d,0x22
   15da4:	push   rcx
   15da5:	mov    edx,0x430
   15daa:	lea    rcx,[rip+0x444ff]        # 5a2b0 <_fini@@Base+0x7b5c>
   15db1:	jmp    15bb3 <g_str_equal@plt+0x88f3>
   15db6:	xor    edi,edi
   15db8:	xor    r14d,r14d
   15dbb:	call   d2b0 <g_free@plt>
   15dc0:	mov    QWORD PTR [rsp+0x18],0x0
   15dc9:	mov    QWORD PTR [rsp+0x40],0x0
   15dd2:	mov    QWORD PTR [rsp+0x38],0x0
   15ddb:	jmp    15ad9 <g_str_equal@plt+0x8819>
   15de0:	sub    rsp,0x8
   15de4:	lea    r9,[rip+0x441fd]        # 59fe8 <_fini@@Base+0x7894>
   15deb:	mov    r8d,0x22
   15df1:	push   rcx
   15df2:	mov    edx,0x481
   15df7:	lea    rcx,[rip+0x444b2]        # 5a2b0 <_fini@@Base+0x7b5c>
   15dfe:	jmp    15bb3 <g_str_equal@plt+0x88f3>
   15e03:	call   cd30 <__stack_chk_fail@plt>
   15e08:	nop    DWORD PTR [rax+rax*1+0x0]
   15e10:	push   r12
   15e12:	push   rbp
   15e13:	mov    r12,rdx
   15e16:	push   rbx
   15e17:	mov    rbx,rdi
   15e1a:	mov    rbp,rcx
   15e1d:	mov    rdi,rsi
   15e20:	xor    ecx,ecx
   15e22:	mov    edx,0xffffffff
   15e27:	mov    rsi,rbx
   15e2a:	call   2df90 <g_str_equal@plt+0x20cd0>
   15e2f:	test   eax,eax
   15e31:	js     15e40 <g_str_equal@plt+0x8b80>
   15e33:	pop    rbx
   15e34:	pop    rbp
   15e35:	pop    r12
   15e37:	ret    
   15e38:	nop    DWORD PTR [rax+rax*1+0x0]
   15e40:	sub    rsp,0x8
   15e44:	lea    r8,[rip+0x442fd]        # 5a148 <_fini@@Base+0x79f4>
   15e4b:	lea    rcx,[rip+0x4438e]        # 5a1e0 <_fini@@Base+0x7a8c>
   15e52:	push   rbx
   15e53:	lea    rsi,[rip+0x43fc6]        # 59e20 <_fini@@Base+0x76cc>
   15e5a:	mov    r9,r12
   15e5d:	mov    edx,0x112
   15e62:	mov    rdi,rbp
   15e65:	xor    eax,eax
   15e67:	call   3a090 <g_str_equal@plt+0x2cdd0>
   15e6c:	pop    rax
   15e6d:	xor    eax,eax
   15e6f:	pop    rdx
   15e70:	pop    rbx
   15e71:	pop    rbp
   15e72:	pop    r12
   15e74:	ret    
   15e75:	nop
   15e76:	nop    WORD PTR cs:[rax+rax*1+0x0]
   15e80:	push   r15
   15e82:	push   r14
   15e84:	and    r9d,0x1
   15e88:	push   r13
   15e8a:	push   r12
   15e8c:	mov    r13d,r9d
   15e8f:	push   rbp
   15e90:	push   rbx
   15e91:	mov    rbx,rdi
   15e94:	sub    rsp,0xc8
   15e9b:	mov    rax,QWORD PTR fs:0x28
   15ea4:	mov    QWORD PTR [rsp+0xb8],rax
   15eac:	xor    eax,eax
   15eae:	test   r9d,r9d
   15eb1:	mov    QWORD PTR [rsp],rcx
   15eb5:	mov    QWORD PTR [rsp+0x8],r8
   15eba:	mov    rbp,QWORD PTR [rsp+0x100]
   15ec2:	mov    QWORD PTR [rsp+0x98],0x0
   15ece:	jne    16108 <g_str_equal@plt+0x8e48>
   15ed4:	mov    rdi,QWORD PTR [rsi+0x10]
   15ed8:	test   rdi,rdi
   15edb:	je     1644c <g_str_equal@plt+0x918c>
   15ee1:	mov    rsi,rbp
   15ee4:	call   132a0 <g_str_equal@plt+0x5fe0>
   15ee9:	test   rax,rax
   15eec:	mov    r14,rax
   15eef:	je     16487 <g_str_equal@plt+0x91c7>
   15ef5:	mov    edi,0x264
   15efa:	call   ce00 <g_malloc0@plt>
   15eff:	xor    esi,esi
   15f01:	mov    QWORD PTR [rbx+0x10],rax
   15f05:	mov    rdx,rax
   15f08:	mov    r12,rax
   15f0b:	mov    r9,rbp
   15f0e:	mov    r8,QWORD PTR [rsp+0x8]
   15f13:	mov    ecx,0x250
   15f18:	mov    rdi,rbx
   15f1b:	mov    rax,QWORD PTR [rsp]
   15f1f:	call   rax
   15f21:	test   rax,rax
   15f24:	js     160f8 <g_str_equal@plt+0x8e38>
   15f2a:	mov    eax,DWORD PTR [r12+0x68]
   15f2f:	lea    rcx,[r12+0x250]
   15f37:	movzx  r9d,WORD PTR [r12+0x6]
   15f3d:	ror    r9w,0x8
   15f42:	mov    WORD PTR [r12+0x6],r9w
   15f48:	bswap  eax
   15f4a:	mov    DWORD PTR [r12+0x68],eax
   15f4f:	mov    eax,DWORD PTR [r12+0x6c]
   15f54:	bswap  eax
   15f56:	mov    DWORD PTR [r12+0x6c],eax
   15f5b:	mov    eax,DWORD PTR [r12+0xa4]
   15f63:	bswap  eax
   15f65:	mov    DWORD PTR [r12+0xa4],eax
   15f6d:	lea    rax,[r12+0xd0]
   15f75:	nop    DWORD PTR [rax]
   15f78:	mov    edx,DWORD PTR [rax]
   15f7a:	add    rax,0x30
   15f7e:	bswap  edx
   15f80:	mov    DWORD PTR [rax-0x30],edx
   15f83:	mov    edx,DWORD PTR [rax-0x2c]
   15f86:	bswap  edx
   15f88:	mov    DWORD PTR [rax-0x2c],edx
   15f8b:	mov    edx,DWORD PTR [rax-0x8]
   15f8e:	bswap  edx
   15f90:	mov    DWORD PTR [rax-0x8],edx
   15f93:	mov    edx,DWORD PTR [rax-0x4]
   15f96:	bswap  edx
   15f98:	mov    DWORD PTR [rax-0x4],edx
   15f9b:	cmp    rax,rcx
   15f9e:	jne    15f78 <g_str_equal@plt+0x8cb8>
   15fa0:	mov    eax,DWORD PTR [rip+0x443fa]        # 5a3a0 <_fini@@Base+0x7c4c>
   15fa6:	cmp    DWORD PTR [r12],eax
   15faa:	je     16038 <g_str_equal@plt+0x8d78>
   15fb0:	lea    r8,[rip+0x441a9]        # 5a160 <_fini@@Base+0x7a0c>
   15fb7:	lea    rcx,[rip+0x44272]        # 5a230 <_fini@@Base+0x7adc>
   15fbe:	mov    edx,0x2bd
   15fc3:	lea    rsi,[rip+0x43e56]        # 59e20 <_fini@@Base+0x76cc>
   15fca:	mov    rdi,rbp
   15fcd:	xor    eax,eax
   15fcf:	xor    r13d,r13d
   15fd2:	mov    r15d,0xffffffea
   15fd8:	call   3a090 <g_str_equal@plt+0x2cdd0>
   15fdd:	mov    rdi,r13
   15fe0:	call   d2b0 <g_free@plt>
   15fe5:	mov    rdi,QWORD PTR [rbx+0x18]
   15fe9:	call   11ec0 <g_str_equal@plt+0x4c00>
   15fee:	mov    rdi,QWORD PTR [rbx+0x20]
   15ff2:	call   13860 <g_str_equal@plt+0x65a0>
   15ff7:	mov    rdi,r12
   15ffa:	call   d2b0 <g_free@plt>
   15fff:	mov    rdi,r14
   16002:	call   d2b0 <g_free@plt>
   16007:	mov    rsi,QWORD PTR [rsp+0xb8]
   1600f:	xor    rsi,QWORD PTR fs:0x28
   16018:	mov    eax,r15d
   1601b:	jne    1661b <g_str_equal@plt+0x935b>
   16021:	add    rsp,0xc8
   16028:	pop    rbx
   16029:	pop    rbp
   1602a:	pop    r12
   1602c:	pop    r13
   1602e:	pop    r14
   16030:	pop    r15
   16032:	ret    
   16033:	nop    DWORD PTR [rax+rax*1+0x0]
   16038:	movzx  eax,WORD PTR [rip+0x44365]        # 5a3a4 <_fini@@Base+0x7c50>
   1603f:	cmp    WORD PTR [r12+0x4],ax
   16045:	jne    15fb0 <g_str_equal@plt+0x8cf0>
   1604b:	xor    r15d,r15d
   1604e:	cmp    r9w,0x1
   16053:	jne    16110 <g_str_equal@plt+0x8e50>
   16059:	lea    rax,[r12+0x28]
   1605e:	mov    esi,0x2d
   16063:	mov    rdi,rax
   16066:	mov    QWORD PTR [rsp+0x10],rax
   1606b:	call   cc00 <strchr@plt>
   16070:	test   rax,rax
   16073:	je     16252 <g_str_equal@plt+0x8f92>
   16079:	mov    BYTE PTR [rax],0x0
   1607c:	add    rax,0x1
   16080:	mov    esi,0x3a
   16085:	mov    rdi,rax
   16088:	mov    QWORD PTR [rsp+0x28],rax
   1608d:	call   cc00 <strchr@plt>
   16092:	test   rax,rax
   16095:	mov    r11,rax
   16098:	je     16238 <g_str_equal@plt+0x8f78>
   1609e:	mov    BYTE PTR [rax],0x0
   160a1:	lea    rax,[rsp+0x98]
   160a9:	add    r11,0x1
   160ad:	lea    rsi,[rip+0x26a8ec]        # 2809a0 <_fini@@Base+0x22e24c>
   160b4:	lea    rdx,[rip+0x440c2]        # 5a17d <_fini@@Base+0x7a29>
   160bb:	mov    rdi,r11
   160be:	mov    rcx,rax
   160c1:	mov    QWORD PTR [rsp+0x18],rax
   160c6:	mov    QWORD PTR [rsp+0x20],r11
   160cb:	call   15e10 <g_str_equal@plt+0x8b50>
   160d0:	mov    rsi,QWORD PTR [rsp+0x98]
   160d8:	test   rsi,rsi
   160db:	je     16150 <g_str_equal@plt+0x8e90>
   160dd:	mov    rdi,rbp
   160e0:	xor    r13d,r13d
   160e3:	mov    r15d,0xffffffa1
   160e9:	call   3a4c0 <g_str_equal@plt+0x2d200>
   160ee:	jmp    15fdd <g_str_equal@plt+0x8d1d>
   160f3:	nop    DWORD PTR [rax+rax*1+0x0]
   160f8:	mov    r15d,eax
   160fb:	xor    r13d,r13d
   160fe:	jmp    15fdd <g_str_equal@plt+0x8d1d>
   16103:	nop    DWORD PTR [rax+rax*1+0x0]
   16108:	xor    r14d,r14d
   1610b:	jmp    15ef5 <g_str_equal@plt+0x8c35>
   16110:	lea    r8,[rip+0x43f29]        # 5a040 <_fini@@Base+0x78ec>
   16117:	lea    rcx,[rip+0x44112]        # 5a230 <_fini@@Base+0x7adc>
   1611e:	lea    rsi,[rip+0x43cfb]        # 59e20 <_fini@@Base+0x76cc>
   16125:	movzx  r9d,r9w
   16129:	mov    edx,0x2c3
   1612e:	mov    rdi,rbp
   16131:	xor    eax,eax
   16133:	xor    r13d,r13d
   16136:	mov    r15d,0xffffffa1
   1613c:	call   3a090 <g_str_equal@plt+0x2cdd0>
   16141:	jmp    15fdd <g_str_equal@plt+0x8d1d>
   16146:	nop    WORD PTR cs:[rax+rax*1+0x0]
   16150:	mov    r11,QWORD PTR [rsp+0x20]
   16155:	mov    DWORD PTR [rsp+0x48],eax
   16159:	mov    rcx,QWORD PTR [rsp+0x18]
   1615e:	mov    rdi,QWORD PTR [rsp+0x10]
   16163:	lea    rsi,[rip+0x26a786]        # 2808f0 <_fini@@Base+0x22e19c>
   1616a:	lea    rdx,[rip+0x4401b]        # 5a18c <_fini@@Base+0x7a38>
   16171:	mov    QWORD PTR [rsp+0x20],r11
   16176:	call   15e10 <g_str_equal@plt+0x8b50>
   1617b:	mov    rsi,QWORD PTR [rsp+0x98]
   16183:	mov    DWORD PTR [rsp+0x10],eax
   16187:	mov    r11,QWORD PTR [rsp+0x20]
   1618c:	test   rsi,rsi
   1618f:	jne    160dd <g_str_equal@plt+0x8e1d>
   16195:	mov    ecx,DWORD PTR [r12+0x6c]
   1619a:	lea    rax,[r12+0x8]
   1619f:	lea    r8,[rip+0x26a13a]        # 2802e0 <_fini@@Base+0x22db8c>
   161a6:	lea    rdi,[rip+0x43faf]        # 5a15c <_fini@@Base+0x7a08>
   161ad:	mov    QWORD PTR [rsp+0x38],rbx
   161b2:	mov    QWORD PTR [rsp+0x40],rbp
   161b7:	mov    QWORD PTR [rsp+0x20],rax
   161bc:	mov    QWORD PTR [rsp+0x30],r11
   161c1:	mov    rbp,r8
   161c4:	mov    eax,ecx
   161c6:	shr    eax,1
   161c8:	cmp    DWORD PTR [rsp+0x10],0x2
   161cd:	cmove  ecx,eax
   161d0:	mov    ebx,ecx
   161d2:	mov    rsi,QWORD PTR [rsp+0x20]
   161d7:	call   d2c0 <g_str_equal@plt>
   161dc:	test   eax,eax
   161de:	je     1621d <g_str_equal@plt+0x8f5d>
   161e0:	mov    r9,QWORD PTR [rbp+0x8]
   161e4:	mov    eax,DWORD PTR [r9]
   161e7:	test   eax,eax
   161e9:	je     1621d <g_str_equal@plt+0x8f5d>
   161eb:	cmp    eax,ebx
   161ed:	je     16430 <g_str_equal@plt+0x9170>
   161f3:	lea    rax,[r9+0x8]
   161f7:	xor    edx,edx
   161f9:	jmp    1620c <g_str_equal@plt+0x8f4c>
   161fb:	nop    DWORD PTR [rax+rax*1+0x0]
   16200:	add    rax,0x8
   16204:	cmp    ecx,ebx
   16206:	je     16430 <g_str_equal@plt+0x9170>
   1620c:	mov    esi,DWORD PTR [rax]
   1620e:	add    rdx,0x1
   16212:	mov    r9,rax
   16215:	cmp    rdx,rsi
   16218:	mov    rcx,rsi
   1621b:	jb     16200 <g_str_equal@plt+0x8f40>
   1621d:	lea    rax,[rip+0x26a0fc]        # 280320 <_fini@@Base+0x22dbcc>
   16224:	add    rbp,0x10
   16228:	cmp    rbp,rax
   1622b:	je     16287 <g_str_equal@plt+0x8fc7>
   1622d:	mov    rdi,QWORD PTR [rbp+0x0]
   16231:	jmp    161d2 <g_str_equal@plt+0x8f12>
   16233:	nop    DWORD PTR [rax+rax*1+0x0]
   16238:	lea    rax,[rsp+0x98]
   16240:	mov    DWORD PTR [rsp+0x48],0x0
   16248:	mov    QWORD PTR [rsp+0x18],rax
   1624d:	jmp    16159 <g_str_equal@plt+0x8e99>
   16252:	mov    r9,QWORD PTR [rsp+0x10]
   16257:	lea    r8,[rip+0x43e0a]        # 5a068 <_fini@@Base+0x7914>
   1625e:	lea    rcx,[rip+0x43fcb]        # 5a230 <_fini@@Base+0x7adc>
   16265:	lea    rsi,[rip+0x43bb4]        # 59e20 <_fini@@Base+0x76cc>
   1626c:	mov    edx,0x2d4
   16271:	mov    rdi,rbp
   16274:	xor    r13d,r13d
   16277:	mov    r15d,0xffffffea
   1627d:	call   3a090 <g_str_equal@plt+0x2cdd0>
   16282:	jmp    15fdd <g_str_equal@plt+0x8d1d>
   16287:	mov    rbp,QWORD PTR [rsp+0x40]
   1628c:	mov    ecx,ebx
   1628e:	sub    rsp,0x8
   16292:	mov    rbx,QWORD PTR [rsp+0x40]
   16297:	push   rcx
   16298:	lea    rsi,[rip+0x43b81]        # 59e20 <_fini@@Base+0x76cc>
   1629f:	mov    r9,QWORD PTR [rsp+0x30]
   162a4:	mov    rdi,QWORD PTR [rsp+0x28]
   162a9:	lea    r8,[rip+0x43de0]        # 5a090 <_fini@@Base+0x793c>
   162b0:	lea    rcx,[rip+0x43f49]        # 5a200 <_fini@@Base+0x7aac>
   162b7:	mov    edx,0xef
   162bc:	xor    eax,eax
   162be:	call   3a090 <g_str_equal@plt+0x2cdd0>
   162c3:	pop    rsi
   162c4:	pop    rdi
   162c5:	mov    r11,QWORD PTR [rsp+0x30]
   162ca:	mov    DWORD PTR [rsp+0x20],0x0
   162d2:	mov    rsi,QWORD PTR [rsp+0x98]
   162da:	test   rsi,rsi
   162dd:	jne    160dd <g_str_equal@plt+0x8e1d>
   162e3:	mov    rcx,QWORD PTR [rsp+0x18]
   162e8:	lea    rsi,[rip+0x26a6b1]        # 2809a0 <_fini@@Base+0x22e24c>
   162ef:	lea    rdi,[r12+0x48]
   162f4:	lea    rdx,[rip+0x43e82]        # 5a17d <_fini@@Base+0x7a29>
   162fb:	mov    QWORD PTR [rsp+0x38],r11
   16300:	call   15e10 <g_str_equal@plt+0x8b50>
   16305:	mov    rsi,QWORD PTR [rsp+0x98]
   1630d:	mov    DWORD PTR [rsp+0x30],eax
   16311:	mov    r11,QWORD PTR [rsp+0x38]
   16316:	test   rsi,rsi
   16319:	jne    160dd <g_str_equal@plt+0x8e1d>
   1631f:	mov    rcx,QWORD PTR [rsp+0x18]
   16324:	mov    rdi,QWORD PTR [rsp+0x28]
   16329:	lea    rsi,[rip+0x26a590]        # 2808c0 <_fini@@Base+0x22e16c>
   16330:	lea    rdx,[rip+0x43e61]        # 5a198 <_fini@@Base+0x7a44>
   16337:	mov    QWORD PTR [rsp+0x38],r11
   1633c:	call   15e10 <g_str_equal@plt+0x8b50>
   16341:	mov    rsi,QWORD PTR [rsp+0x98]
   16349:	mov    DWORD PTR [rsp+0x4c],eax
   1634d:	mov    r11,QWORD PTR [rsp+0x38]
   16352:	test   rsi,rsi
   16355:	jne    160dd <g_str_equal@plt+0x8e1d>
   1635b:	cmp    DWORD PTR [rsp+0x4c],0x2
   16360:	mov    eax,DWORD PTR [rsp+0x20]
   16364:	mov    DWORD PTR [rsp+0x88],eax
   1636b:	je     164fb <g_str_equal@plt+0x923b>
   16371:	test   r13d,r13d
   16374:	jne    16492 <g_str_equal@plt+0x91d2>
   1637a:	mov    rdx,QWORD PTR [rbx+0x10]
   1637e:	mov    edi,DWORD PTR [rdx+0x6c]
   16381:	mov    QWORD PTR [rsp+0x18],rdx
   16386:	call   ce00 <g_malloc0@plt>
   1638b:	mov    rdx,QWORD PTR [rsp+0x18]
   16390:	mov    r13,rax
   16393:	mov    QWORD PTR [rsp+0x28],r12
   16398:	mov    DWORD PTR [rsp+0x8c],r15d
   163a0:	mov    QWORD PTR [rsp+0x18],r14
   163a5:	mov    eax,DWORD PTR [rdx+0x6c]
   163a8:	lea    rcx,[rdx+0x250]
   163af:	lea    rsi,[rdx+0xd0]
   163b6:	mov    QWORD PTR [rsp+0x78],rcx
   163bb:	lea    rcx,[rsp+0xa0]
   163c3:	mov    r12,rsi
   163c6:	mov    QWORD PTR [rsp+0x60],rax
   163cb:	mov    QWORD PTR [rsp+0x70],rcx
   163d0:	mov    r15,rax
   163d3:	cmp    DWORD PTR [r12],0xac71f3
   163db:	je     16533 <g_str_equal@plt+0x9273>
   163e1:	add    r12,0x30
   163e5:	cmp    QWORD PTR [rsp+0x78],r12
   163ea:	jne    163d3 <g_str_equal@plt+0x9113>
   163ec:	lea    r8,[rip+0x43cfd]        # 5a0f0 <_fini@@Base+0x799c>
   163f3:	lea    rcx,[rip+0x43dc6]        # 5a1c0 <_fini@@Base+0x7a6c>
   163fa:	lea    rsi,[rip+0x43a1f]        # 59e20 <_fini@@Base+0x76cc>
   16401:	mov    edx,0x26e
   16406:	mov    rdi,rbp
   16409:	xor    eax,eax
   1640b:	mov    r14,QWORD PTR [rsp+0x18]
   16410:	mov    r12,QWORD PTR [rsp+0x28]
   16415:	call   3a090 <g_str_equal@plt+0x2cdd0>
   1641a:	mov    rdi,r13
   1641d:	mov    r15d,0xfffffff3
   16423:	xor    r13d,r13d
   16426:	call   d2b0 <g_free@plt>
   1642b:	jmp    15fdd <g_str_equal@plt+0x8d1d>
   16430:	mov    eax,DWORD PTR [r9+0x4]
   16434:	mov    r11,QWORD PTR [rsp+0x30]
   16439:	mov    rbx,QWORD PTR [rsp+0x38]
   1643e:	mov    rbp,QWORD PTR [rsp+0x40]
   16443:	mov    DWORD PTR [rsp+0x20],eax
   16447:	jmp    162d2 <g_str_equal@plt+0x9012>
   1644c:	lea    r9,[rip+0x49e1b]        # 6026e <_fini@@Base+0xdb1a>
   16453:	test   rdx,rdx
   16456:	lea    r8,[rip+0x438db]        # 59d38 <_fini@@Base+0x75e4>
   1645d:	lea    rcx,[rip+0x43dcc]        # 5a230 <_fini@@Base+0x7adc>
   16464:	lea    rsi,[rip+0x439b5]        # 59e20 <_fini@@Base+0x76cc>
   1646b:	mov    rdi,rbp
   1646e:	cmovne r9,rdx
   16472:	mov    edx,0x294
   16477:	mov    r15d,0xffffffff
   1647d:	call   3a090 <g_str_equal@plt+0x2cdd0>
   16482:	jmp    16007 <g_str_equal@plt+0x8d47>
   16487:	mov    r15d,0xffffffff
   1648d:	jmp    16007 <g_str_equal@plt+0x8d47>
   16492:	xor    r13d,r13d
   16495:	mov    eax,DWORD PTR [r12+0x68]
   1649a:	mov    rdi,r13
   1649d:	mov    QWORD PTR [rbx+0x40],0x200
   164a5:	shl    rax,0x9
   164a9:	mov    QWORD PTR [rbx+0x38],rax
   164ad:	mov    eax,DWORD PTR [rsp+0x20]
   164b1:	mov    DWORD PTR [r12+0x250],eax
   164b9:	mov    eax,DWORD PTR [rsp+0x10]
   164bd:	mov    DWORD PTR [r12+0x254],eax
   164c5:	mov    eax,DWORD PTR [rsp+0x4c]
   164c9:	mov    DWORD PTR [r12+0x258],eax
   164d1:	mov    eax,DWORD PTR [rsp+0x48]
   164d5:	mov    DWORD PTR [r12+0x25c],eax
   164dd:	mov    eax,DWORD PTR [rsp+0x30]
   164e1:	mov    DWORD PTR [r12+0x260],eax
   164e9:	call   d2b0 <g_free@plt>
   164ee:	mov    rdi,r14
   164f1:	call   d2b0 <g_free@plt>
   164f6:	jmp    16007 <g_str_equal@plt+0x8d47>
   164fb:	test   r11,r11
   164fe:	je     166c1 <g_str_equal@plt+0x9401>
   16504:	mov    esi,DWORD PTR [rsp+0x48]
   16508:	mov    rdx,QWORD PTR [rsp+0x18]
   1650d:	mov    edi,DWORD PTR [rsp+0x20]
   16511:	call   14e60 <g_str_equal@plt+0x7ba0>
   16516:	mov    rsi,QWORD PTR [rsp+0x98]
   1651e:	mov    DWORD PTR [rsp+0x88],eax
   16525:	test   rsi,rsi
   16528:	jne    160dd <g_str_equal@plt+0x8e1d>
   1652e:	jmp    16371 <g_str_equal@plt+0x90b1>
   16533:	mov    eax,DWORD PTR [r12+0x2c]
   16538:	mov    r14,QWORD PTR [rbx+0x10]
   1653c:	imul   rax,r15
   16540:	mov    rdi,rax
   16543:	mov    QWORD PTR [rsp+0x68],rax
   16548:	call   ce00 <g_malloc0@plt>
   1654d:	mov    rdi,r15
   16550:	mov    QWORD PTR [rsp+0x38],rax
   16555:	call   ce00 <g_malloc0@plt>
   1655a:	mov    rdi,QWORD PTR [rsp+0x18]
   1655f:	mov    r10,rax
   16562:	sub    rsp,0x8
   16566:	xor    eax,eax
   16568:	or     rcx,0xffffffffffffffff
   1656c:	mov    r8d,0x20
   16572:	repnz scas al,BYTE PTR es:[rdi]
   16574:	push   rbp
   16575:	push   r15
   16577:	not    rcx
   1657a:	mov    QWORD PTR [rsp+0x58],r10
   1657f:	push   r10
   16581:	mov    rdx,rcx
   16584:	mov    r9d,DWORD PTR [r12+0x4]
   16589:	mov    rsi,QWORD PTR [rsp+0x38]
   1658e:	lea    rcx,[r12+0x8]
   16593:	mov    edi,DWORD PTR [rsp+0x50]
   16597:	sub    rdx,0x1
   1659b:	call   43e10 <g_str_equal@plt+0x36b50>
   165a0:	add    rsp,0x20
   165a4:	test   eax,eax
   165a6:	js     165d2 <g_str_equal@plt+0x9312>
   165a8:	mov    esi,DWORD PTR [r12+0x28]
   165ad:	mov    r9,rbp
   165b0:	mov    r8,QWORD PTR [rsp+0x8]
   165b5:	mov    rcx,QWORD PTR [rsp+0x68]
   165ba:	mov    rdx,QWORD PTR [rsp+0x38]
   165bf:	mov    rdi,rbx
   165c2:	mov    r11,QWORD PTR [rsp]
   165c6:	shl    rsi,0x9
   165ca:	call   r11
   165cd:	test   rax,rax
   165d0:	jns    16620 <g_str_equal@plt+0x9360>
   165d2:	mov    r14,QWORD PTR [rsp+0x18]
   165d7:	mov    r12,QWORD PTR [rsp+0x28]
   165dc:	mov    QWORD PTR [rsp+0x58],0x0
   165e5:	mov    QWORD PTR [rsp+0x50],0x0
   165ee:	mov    rdi,QWORD PTR [rsp+0x58]
   165f3:	call   13860 <g_str_equal@plt+0x65a0>
   165f8:	mov    rdi,QWORD PTR [rsp+0x50]
   165fd:	call   11ec0 <g_str_equal@plt+0x4c00>
   16602:	mov    rdi,QWORD PTR [rsp+0x38]
   16607:	call   d2b0 <g_free@plt>
   1660c:	mov    rdi,QWORD PTR [rsp+0x40]
   16611:	call   d2b0 <g_free@plt>
   16616:	jmp    1641a <g_str_equal@plt+0x915a>
   1661b:	call   cd30 <__stack_chk_fail@plt>
   16620:	mov    rdx,QWORD PTR [rsp+0x40]
   16625:	mov    esi,DWORD PTR [rsp+0x10]
   16629:	mov    r8,rbp
   1662c:	mov    edi,DWORD PTR [rsp+0x20]
   16630:	mov    rcx,r15
   16633:	call   119a0 <g_str_equal@plt+0x46e0>
   16638:	test   rax,rax
   1663b:	mov    QWORD PTR [rsp+0x50],rax
   16640:	je     165d2 <g_str_equal@plt+0x9312>
   16642:	mov    esi,DWORD PTR [rsp+0x10]
   16646:	mov    edi,DWORD PTR [rsp+0x20]
   1664a:	call   11960 <g_str_equal@plt+0x46a0>
   1664f:	mov    edx,DWORD PTR [rsp+0x48]
   16653:	mov    rcx,QWORD PTR [rsp+0x40]
   16658:	mov    r9,rbp
   1665b:	mov    esi,DWORD PTR [rsp+0x88]
   16662:	mov    edi,DWORD PTR [rsp+0x4c]
   16666:	mov    r8,r15
   16669:	mov    QWORD PTR [rsp+0x80],rax
   16671:	call   13730 <g_str_equal@plt+0x6470>
   16676:	test   rax,rax
   16679:	mov    rdx,rax
   1667c:	mov    QWORD PTR [rsp+0x58],rax
   16681:	je     166b2 <g_str_equal@plt+0x93f2>
   16683:	push   rbp
   16684:	push   QWORD PTR [rsp+0x70]
   16688:	xor    r8d,r8d
   1668b:	mov    r9,QWORD PTR [rsp+0x48]
   16690:	mov    rsi,QWORD PTR [rsp+0x90]
   16698:	mov    ecx,0x200
   1669d:	mov    rdi,QWORD PTR [rsp+0x60]
   166a2:	mov    QWORD PTR [rsp+0x68],rax
   166a7:	call   14780 <g_str_equal@plt+0x74c0>
   166ac:	test   eax,eax
   166ae:	pop    rdx
   166af:	pop    rcx
   166b0:	jns    166d9 <g_str_equal@plt+0x9419>
   166b2:	mov    r14,QWORD PTR [rsp+0x18]
   166b7:	mov    r12,QWORD PTR [rsp+0x28]
   166bc:	jmp    165ee <g_str_equal@plt+0x932e>
   166c1:	lea    r8,[rip+0x43a00]        # 5a0c8 <_fini@@Base+0x7974>
   166c8:	lea    rcx,[rip+0x43b61]        # 5a230 <_fini@@Base+0x7adc>
   166cf:	mov    edx,0x30f
   166d4:	jmp    15fc3 <g_str_equal@plt+0x8d03>
   166d9:	mov    edx,DWORD PTR [r12+0x2c]
   166de:	mov    rcx,QWORD PTR [rsp+0x38]
   166e3:	mov    r9,rbp
   166e6:	mov    edi,DWORD PTR [rsp+0x30]
   166ea:	mov    r8,r13
   166ed:	mov    rsi,r15
   166f0:	call   13f00 <g_str_equal@plt+0x6c40>
   166f5:	test   eax,eax
   166f7:	js     166b2 <g_str_equal@plt+0x93f2>
   166f9:	sub    rsp,0x8
   166fd:	lea    rcx,[r14+0x84]
   16704:	mov    r8d,0x20
   1670a:	push   rbp
   1670b:	push   0x14
   1670d:	mov    rdx,r15
   16710:	push   QWORD PTR [rsp+0x88]
   16717:	mov    r9d,DWORD PTR [r14+0xa4]
   1671e:	mov    rsi,r13
   16721:	mov    edi,DWORD PTR [rsp+0x50]
   16725:	call   43e10 <g_str_equal@plt+0x36b50>
   1672a:	add    rsp,0x20
   1672e:	test   eax,eax
   16730:	js     166b2 <g_str_equal@plt+0x93f2>
   16732:	mov    rdi,QWORD PTR [rsp+0x70]
   16737:	lea    rsi,[r14+0x70]
   1673b:	mov    edx,0x14
   16740:	call   ce10 <memcmp@plt>
   16745:	mov    rdi,QWORD PTR [rsp+0x58]
   1674a:	mov    DWORD PTR [rsp+0x68],eax
   1674e:	call   13860 <g_str_equal@plt+0x65a0>
   16753:	mov    rdi,QWORD PTR [rsp+0x50]
   16758:	call   11ec0 <g_str_equal@plt+0x4c00>
   1675d:	mov    rdi,QWORD PTR [rsp+0x38]
   16762:	call   d2b0 <g_free@plt>
   16767:	mov    rdi,QWORD PTR [rsp+0x40]
   1676c:	call   d2b0 <g_free@plt>
   16771:	mov    eax,DWORD PTR [rsp+0x68]
   16775:	test   eax,eax
   16777:	jne    163e1 <g_str_equal@plt+0x9121>
   1677d:	mov    eax,DWORD PTR [rsp+0x30]
   16781:	mov    esi,DWORD PTR [rsp+0x10]
   16785:	mov    edi,DWORD PTR [rsp+0x20]
   16789:	mov    r14,QWORD PTR [rsp+0x18]
   1678e:	mov    r12,QWORD PTR [rsp+0x28]
   16793:	mov    r15d,DWORD PTR [rsp+0x8c]
   1679b:	mov    DWORD PTR [rbx+0x28],eax
   1679e:	call   11960 <g_str_equal@plt+0x46a0>
   167a3:	mov    r8,QWORD PTR [rsp+0x60]
   167a8:	mov    edx,DWORD PTR [rsp+0x48]
   167ac:	mov    r9,rbp
   167af:	mov    esi,DWORD PTR [rsp+0x88]
   167b6:	mov    edi,DWORD PTR [rsp+0x4c]
   167ba:	mov    rcx,r13
   167bd:	mov    QWORD PTR [rbx+0x30],rax
   167c1:	call   13730 <g_str_equal@plt+0x6470>
   167c6:	test   rax,rax
   167c9:	mov    QWORD PTR [rbx+0x20],rax
   167cd:	je     167f4 <g_str_equal@plt+0x9534>
   167cf:	mov    rcx,QWORD PTR [rsp+0x60]
   167d4:	mov    esi,DWORD PTR [rsp+0x10]
   167d8:	mov    r8,rbp
   167db:	mov    edi,DWORD PTR [rsp+0x20]
   167df:	mov    rdx,r13
   167e2:	call   119a0 <g_str_equal@plt+0x46e0>
   167e7:	test   rax,rax
   167ea:	mov    QWORD PTR [rbx+0x18],rax
   167ee:	jne    16495 <g_str_equal@plt+0x91d5>
   167f4:	mov    r15d,0xffffffa1
   167fa:	jmp    15fdd <g_str_equal@plt+0x8d1d>
   167ff:	nop
   16800:	sub    rsp,0x8
   16804:	mov    rdi,rdx
   16807:	call   c2a0 <g_main_loop_quit@plt>
   1680c:	xor    eax,eax
   1680e:	add    rsp,0x8
   16812:	ret    
   16813:	nop    DWORD PTR [rax]
   16816:	nop    WORD PTR cs:[rax+rax*1+0x0]
   16820:	lea    rdi,[rip+0x269af9]        # 280320 <_fini@@Base+0x22dbcc>
   16827:	jmp    202f0 <g_str_equal@plt+0x13030>
   1682c:	nop    DWORD PTR [rax+0x0]
   16830:	lea    r8,[rip+0x43ca9]        # 5a4e0 <_fini@@Base+0x7d8c>
   16837:	lea    rdx,[rip+0x43b6a]        # 5a3a8 <_fini@@Base+0x7c54>
   1683e:	lea    rsi,[rip+0x3c452]        # 52c97 <_fini@@Base+0x543>
   16845:	sub    rsp,0x8
   16849:	mov    ecx,0x200
   1684e:	call   205c0 <g_str_equal@plt+0x13300>
   16853:	mov    rdi,QWORD PTR [rax+0x30]
   16857:	add    rsp,0x8
   1685b:	jmp    d2b0 <g_free@plt>
   16860:	mov    ecx,esi
   16862:	mov    eax,0x1
   16867:	shl    eax,cl
   16869:	test   DWORD PTR [rdi+0x28],eax
   1686c:	setne  al
   1686f:	ret    
   16870:	mov    eax,0x1
   16875:	mov    ecx,esi
   16877:	shl    eax,cl
   16879:	or     DWORD PTR [rdi+0x28],eax
   1687c:	ret    
   1687d:	nop    DWORD PTR [rax]
   16880:	push   rbp
   16881:	push   rbx
   16882:	mov    rbx,rdi
   16885:	mov    rbp,rsi
   16888:	sub    rsp,0x8
   1688c:	mov    rdi,QWORD PTR [rdi+0x30]
   16890:	call   d2b0 <g_free@plt>
   16895:	mov    rdi,rbp
   16898:	call   c370 <g_strdup@plt>
   1689d:	mov    QWORD PTR [rbx+0x30],rax
   168a1:	add    rsp,0x8
   168a5:	pop    rbx
   168a6:	pop    rbp
   168a7:	ret    
   168a8:	nop    DWORD PTR [rax+rax*1+0x0]
   168b0:	push   r15
   168b2:	push   r14
   168b4:	mov    r15,rdx
   168b7:	push   r13
   168b9:	push   r12
   168bb:	mov    r14,rsi
   168be:	push   rbp
   168bf:	push   rbx
   168c0:	mov    rbp,rcx
   168c3:	mov    rbx,rdi
   168c6:	mov    r12,r8
   168c9:	mov    r13,r9
   168cc:	sub    rsp,0x8
   168d0:	call   20920 <g_str_equal@plt+0x13660>
   168d5:	lea    r8,[rip+0x43dc4]        # 5a6a0 <_fini@@Base+0x7f4c>
   168dc:	lea    rdx,[rip+0x43ac5]        # 5a3a8 <_fini@@Base+0x7c54>
   168e3:	lea    rsi,[rip+0x3c3ad]        # 52c97 <_fini@@Base+0x543>
   168ea:	mov    ecx,0x38
   168ef:	mov    rdi,rax
   168f2:	call   20770 <g_str_equal@plt+0x134b0>
   168f7:	test   rbp,rbp
   168fa:	jne    16930 <g_str_equal@plt+0x9670>
   168fc:	test   r12,r12
   168ff:	jne    16930 <g_str_equal@plt+0x9670>
   16901:	mov    rax,QWORD PTR [rax+0x68]
   16905:	add    rsp,0x8
   16909:	mov    r9,r13
   1690c:	mov    r8,r12
   1690f:	mov    rcx,rbp
   16912:	mov    rdx,r15
   16915:	mov    rsi,r14
   16918:	mov    rdi,rbx
   1691b:	pop    rbx
   1691c:	pop    rbp
   1691d:	pop    r12
   1691f:	pop    r13
   16921:	pop    r14
   16923:	pop    r15
   16925:	jmp    rax
   16927:	nop    WORD PTR [rax+rax*1+0x0]
   16930:	test   BYTE PTR [rbx+0x28],0x1
   16934:	jne    16901 <g_str_equal@plt+0x9641>
   16936:	lea    r9,[rip+0x43aa3]        # 5a3e0 <_fini@@Base+0x7c8c>
   1693d:	lea    rcx,[rip+0x43d5c]        # 5a6a0 <_fini@@Base+0x7f4c>
   16944:	lea    rsi,[rip+0x43a5d]        # 5a3a8 <_fini@@Base+0x7c54>
   1694b:	mov    rdi,r13
   1694e:	xor    eax,eax
   16950:	mov    r8d,0x16
   16956:	mov    edx,0x3d
   1695b:	call   3a140 <g_str_equal@plt+0x2ce80>
   16960:	add    rsp,0x8
   16964:	mov    rax,0xffffffffffffffff
   1696b:	pop    rbx
   1696c:	pop    rbp
   1696d:	pop    r12
   1696f:	pop    r13
   16971:	pop    r14
   16973:	pop    r15
   16975:	ret    
   16976:	nop    WORD PTR cs:[rax+rax*1+0x0]
   16980:	push   r15
   16982:	push   r14
   16984:	mov    r15,rdx
   16987:	push   r13
   16989:	push   r12
   1698b:	mov    r14,rsi
   1698e:	push   rbp
   1698f:	push   rbx
   16990:	mov    rbp,rcx
   16993:	mov    rbx,rdi
   16996:	mov    r12,r8
   16999:	mov    r13,r9
   1699c:	sub    rsp,0x8
   169a0:	call   20920 <g_str_equal@plt+0x13660>
   169a5:	lea    r8,[rip+0x43cd4]        # 5a680 <_fini@@Base+0x7f2c>
   169ac:	lea    rdx,[rip+0x439f5]        # 5a3a8 <_fini@@Base+0x7c54>
   169b3:	lea    rsi,[rip+0x3c2dd]        # 52c97 <_fini@@Base+0x543>
   169ba:	mov    ecx,0x4c
   169bf:	mov    rdi,rax
   169c2:	call   20770 <g_str_equal@plt+0x134b0>
   169c7:	test   rbp,rbp
   169ca:	jne    16a00 <g_str_equal@plt+0x9740>
   169cc:	test   r12,r12
   169cf:	jne    16a00 <g_str_equal@plt+0x9740>
   169d1:	mov    rax,QWORD PTR [rax+0x60]
   169d5:	add    rsp,0x8
   169d9:	mov    r9,r13
   169dc:	mov    r8,r12
   169df:	mov    rcx,rbp
   169e2:	mov    rdx,r15
   169e5:	mov    rsi,r14
   169e8:	mov    rdi,rbx
   169eb:	pop    rbx
   169ec:	pop    rbp
   169ed:	pop    r12
   169ef:	pop    r13
   169f1:	pop    r14
   169f3:	pop    r15
   169f5:	jmp    rax
   169f7:	nop    WORD PTR [rax+rax*1+0x0]
   16a00:	test   BYTE PTR [rbx+0x28],0x1
   16a04:	jne    169d1 <g_str_equal@plt+0x9711>
   16a06:	lea    r9,[rip+0x439d3]        # 5a3e0 <_fini@@Base+0x7c8c>
   16a0d:	lea    rcx,[rip+0x43c6c]        # 5a680 <_fini@@Base+0x7f2c>
   16a14:	lea    rsi,[rip+0x4398d]        # 5a3a8 <_fini@@Base+0x7c54>
   16a1b:	mov    rdi,r13
   16a1e:	xor    eax,eax
   16a20:	mov    r8d,0x16
   16a26:	mov    edx,0x51
   16a2b:	call   3a140 <g_str_equal@plt+0x2ce80>
   16a30:	add    rsp,0x8
   16a34:	mov    rax,0xffffffffffffffff
   16a3b:	pop    rbx
   16a3c:	pop    rbp
   16a3d:	pop    r12
   16a3f:	pop    r13
   16a41:	pop    r14
   16a43:	pop    r15
   16a45:	ret    
   16a46:	nop    WORD PTR cs:[rax+rax*1+0x0]
   16a50:	mov    r9,rcx
   16a53:	xor    r8d,r8d
   16a56:	xor    ecx,ecx
   16a58:	jmp    168b0 <g_str_equal@plt+0x95f0>
   16a5d:	nop    DWORD PTR [rax]
   16a60:	mov    r9,rcx
   16a63:	xor    r8d,r8d
   16a66:	xor    ecx,ecx
   16a68:	jmp    16980 <g_str_equal@plt+0x96c0>
   16a6d:	nop    DWORD PTR [rax]
   16a70:	sub    rsp,0x28
   16a74:	mov    r9,rcx
   16a77:	xor    r8d,r8d
   16a7a:	mov    QWORD PTR [rsp],rsi
   16a7e:	mov    QWORD PTR [rsp+0x8],rdx
   16a83:	xor    ecx,ecx
   16a85:	mov    rsi,rsp
   16a88:	mov    edx,0x1
   16a8d:	mov    rax,QWORD PTR fs:0x28
   16a96:	mov    QWORD PTR [rsp+0x18],rax
   16a9b:	xor    eax,eax
   16a9d:	call   168b0 <g_str_equal@plt+0x95f0>
   16aa2:	mov    rcx,QWORD PTR [rsp+0x18]
   16aa7:	xor    rcx,QWORD PTR fs:0x28
   16ab0:	jne    16ab7 <g_str_equal@plt+0x97f7>
   16ab2:	add    rsp,0x28
   16ab6:	ret    
   16ab7:	call   cd30 <__stack_chk_fail@plt>
   16abc:	nop    DWORD PTR [rax+0x0]
   16ac0:	sub    rsp,0x28
   16ac4:	mov    r9,rcx
   16ac7:	xor    r8d,r8d
   16aca:	mov    QWORD PTR [rsp],rsi
   16ace:	mov    QWORD PTR [rsp+0x8],rdx
   16ad3:	xor    ecx,ecx
   16ad5:	mov    rsi,rsp
   16ad8:	mov    edx,0x1
   16add:	mov    rax,QWORD PTR fs:0x28
   16ae6:	mov    QWORD PTR [rsp+0x18],rax
   16aeb:	xor    eax,eax
   16aed:	call   16980 <g_str_equal@plt+0x96c0>
   16af2:	mov    rcx,QWORD PTR [rsp+0x18]
   16af7:	xor    rcx,QWORD PTR fs:0x28
   16b00:	jne    16b07 <g_str_equal@plt+0x9847>
   16b02:	add    rsp,0x28
   16b06:	ret    
   16b07:	call   cd30 <__stack_chk_fail@plt>
   16b0c:	nop    DWORD PTR [rax+0x0]
   16b10:	push   r12
   16b12:	push   rbp
   16b13:	mov    r12,rdx
   16b16:	push   rbx
   16b17:	mov    rbp,rdi
   16b1a:	mov    ebx,esi
   16b1c:	call   20920 <g_str_equal@plt+0x13660>
   16b21:	lea    rdx,[rip+0x43880]        # 5a3a8 <_fini@@Base+0x7c54>
   16b28:	lea    rsi,[rip+0x3c168]        # 52c97 <_fini@@Base+0x543>
   16b2f:	lea    r8,[rip+0x43aea]        # 5a620 <_fini@@Base+0x7ecc>
   16b36:	mov    rdi,rax
   16b39:	mov    ecx,0x108
   16b3e:	call   20770 <g_str_equal@plt+0x134b0>
   16b43:	movzx  esi,bl
   16b46:	mov    rdx,r12
   16b49:	mov    rdi,rbp
   16b4c:	pop    rbx
   16b4d:	pop    rbp
   16b4e:	pop    r12
   16b50:	mov    rax,QWORD PTR [rax+0x80]
   16b57:	jmp    rax
   16b59:	nop    DWORD PTR [rax+0x0]
   16b60:	push   rbp
   16b61:	push   rbx
   16b62:	mov    rbp,rsi
   16b65:	mov    rbx,rdi
   16b68:	sub    rsp,0x8
   16b6c:	call   20920 <g_str_equal@plt+0x13660>
   16b71:	lea    rsi,[rip+0x3c11f]        # 52c97 <_fini@@Base+0x543>
   16b78:	lea    r8,[rip+0x43a81]        # 5a600 <_fini@@Base+0x7eac>
   16b7f:	lea    rdx,[rip+0x43822]        # 5a3a8 <_fini@@Base+0x7c54>
   16b86:	mov    rdi,rax
   16b89:	mov    ecx,0x110
   16b8e:	call   20770 <g_str_equal@plt+0x134b0>
   16b93:	mov    rax,QWORD PTR [rax+0x70]
   16b97:	add    rsp,0x8
   16b9b:	mov    rsi,rbp
   16b9e:	mov    rdi,rbx
   16ba1:	pop    rbx
   16ba2:	pop    rbp
   16ba3:	jmp    rax
   16ba5:	nop
   16ba6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   16bb0:	push   rbp
   16bb1:	push   rbx
   16bb2:	mov    ebp,esi
   16bb4:	mov    rbx,rdi
   16bb7:	sub    rsp,0x18
   16bbb:	call   20920 <g_str_equal@plt+0x13660>
   16bc0:	lea    r8,[rip+0x43a19]        # 5a5e0 <_fini@@Base+0x7e8c>
   16bc7:	lea    rdx,[rip+0x437da]        # 5a3a8 <_fini@@Base+0x7c54>
   16bce:	lea    rsi,[rip+0x3c0c2]        # 52c97 <_fini@@Base+0x543>
   16bd5:	mov    ecx,0x118
   16bda:	mov    rdi,rax
   16bdd:	call   20770 <g_str_equal@plt+0x134b0>
   16be2:	mov    esi,ebp
   16be4:	mov    rdi,rbx
   16be7:	call   QWORD PTR [rax+0x78]
   16bea:	mov    rsi,QWORD PTR [rbx+0x30]
   16bee:	test   rsi,rsi
   16bf1:	je     16c05 <g_str_equal@plt+0x9945>
   16bf3:	mov    rdi,rax
   16bf6:	mov    QWORD PTR [rsp+0x8],rax
   16bfb:	call   ce80 <g_source_set_name@plt>
   16c00:	mov    rax,QWORD PTR [rsp+0x8]
   16c05:	add    rsp,0x18
   16c09:	pop    rbx
   16c0a:	pop    rbp
   16c0b:	ret    
   16c0c:	nop    DWORD PTR [rax+0x0]
   16c10:	push   r14
   16c12:	push   r13
   16c14:	mov    r14,r8
   16c17:	push   r12
   16c19:	push   rbp
   16c1a:	mov    r12,rdx
   16c1d:	push   rbx
   16c1e:	mov    rbp,rsi
   16c21:	mov    rbx,rdi
   16c24:	mov    r13,rcx
   16c27:	call   20920 <g_str_equal@plt+0x13660>
   16c2c:	lea    r8,[rip+0x4398d]        # 5a5c0 <_fini@@Base+0x7e6c>
   16c33:	lea    rdx,[rip+0x4376e]        # 5a3a8 <_fini@@Base+0x7c54>
   16c3a:	lea    rsi,[rip+0x3c056]        # 52c97 <_fini@@Base+0x543>
   16c41:	mov    ecx,0x129
   16c46:	mov    rdi,rax
   16c49:	call   20770 <g_str_equal@plt+0x134b0>
   16c4e:	mov    r8,r14
   16c51:	mov    rcx,r13
   16c54:	mov    rdx,r12
   16c57:	mov    rsi,rbp
   16c5a:	mov    rdi,rbx
   16c5d:	mov    rax,QWORD PTR [rax+0xa8]
   16c64:	pop    rbx
   16c65:	pop    rbp
   16c66:	pop    r12
   16c68:	pop    r13
   16c6a:	pop    r14
   16c6c:	jmp    rax
   16c6e:	xchg   ax,ax
   16c70:	xor    eax,eax
   16c72:	cmp    QWORD PTR [rdi+0x40],0x0
   16c77:	lea    rdx,[rip+0x82]        # 16d00 <g_str_equal@plt+0x9a40>
   16c7e:	mov    rsi,QWORD PTR [rdi+0x38]
   16c82:	lea    rcx,[rip+0x57]        # 16ce0 <g_str_equal@plt+0x9a20>
   16c89:	cmove  rdx,rax
   16c8d:	cmp    QWORD PTR [rdi+0x48],0x0
   16c92:	cmove  rcx,rax
   16c96:	test   rsi,rsi
   16c99:	je     16ca8 <g_str_equal@plt+0x99e8>
   16c9b:	mov    r8,rdi
   16c9e:	jmp    16c10 <g_str_equal@plt+0x9950>
   16ca3:	nop    DWORD PTR [rax+rax*1+0x0]
   16ca8:	sub    rsp,0x28
   16cac:	mov    QWORD PTR [rsp+0x18],rdi
   16cb1:	mov    QWORD PTR [rsp+0x10],rcx
   16cb6:	mov    QWORD PTR [rsp+0x8],rdx
   16cbb:	call   361f0 <g_str_equal@plt+0x28f30>
   16cc0:	mov    rdi,QWORD PTR [rsp+0x18]
   16cc5:	mov    rcx,QWORD PTR [rsp+0x10]
   16cca:	mov    rsi,rax
   16ccd:	mov    rdx,QWORD PTR [rsp+0x8]
   16cd2:	add    rsp,0x28
   16cd6:	mov    r8,rdi
   16cd9:	jmp    16c10 <g_str_equal@plt+0x9950>
   16cde:	xchg   ax,ax
   16ce0:	push   rbx
   16ce1:	mov    rbx,QWORD PTR [rdi+0x48]
   16ce5:	mov    QWORD PTR [rdi+0x48],0x0
   16ced:	call   16c70 <g_str_equal@plt+0x99b0>
   16cf2:	mov    rdi,rbx
   16cf5:	pop    rbx
   16cf6:	jmp    34320 <g_str_equal@plt+0x27060>
   16cfb:	nop    DWORD PTR [rax+rax*1+0x0]
   16d00:	push   rbx
   16d01:	mov    rbx,QWORD PTR [rdi+0x40]
   16d05:	mov    QWORD PTR [rdi+0x40],0x0
   16d0d:	call   16c70 <g_str_equal@plt+0x99b0>
   16d12:	mov    rdi,rbx
   16d15:	pop    rbx
   16d16:	jmp    34320 <g_str_equal@plt+0x27060>
   16d1b:	nop    DWORD PTR [rax+rax*1+0x0]
   16d20:	push   r14
   16d22:	push   r13
   16d24:	mov    r14,r8
   16d27:	push   r12
   16d29:	push   rbp
   16d2a:	mov    r12,rdx
   16d2d:	push   rbx
   16d2e:	mov    r13,rcx
   16d31:	mov    rbp,r9
   16d34:	call   16bb0 <g_str_equal@plt+0x98f0>
   16d39:	mov    rcx,r14
   16d3c:	mov    rbx,rax
   16d3f:	mov    rdx,r13
   16d42:	mov    rsi,r12
   16d45:	mov    rdi,rax
   16d48:	call   c2f0 <g_source_set_callback@plt>
   16d4d:	mov    rsi,rbp
   16d50:	mov    rdi,rbx
   16d53:	call   cf70 <g_source_attach@plt>
   16d58:	mov    rdi,rbx
   16d5b:	mov    ebp,eax
   16d5d:	call   cef0 <g_source_unref@plt>
   16d62:	pop    rbx
   16d63:	mov    eax,ebp
   16d65:	pop    rbp
   16d66:	pop    r12
   16d68:	pop    r13
   16d6a:	pop    r14
   16d6c:	ret    
   16d6d:	nop    DWORD PTR [rax]
   16d70:	xor    r9d,r9d
   16d73:	jmp    16d20 <g_str_equal@plt+0x9a60>
   16d75:	nop
   16d76:	nop    WORD PTR cs:[rax+rax*1+0x0]
   16d80:	push   rbx
   16d81:	mov    rbx,r9
   16d84:	call   16d20 <g_str_equal@plt+0x9a60>
   16d89:	mov    rdi,rbx
   16d8c:	mov    esi,eax
   16d8e:	call   ca90 <g_main_context_find_source_by_id@plt>
   16d93:	mov    rbx,rax
   16d96:	mov    rdi,rax
   16d99:	call   c8a0 <g_source_ref@plt>
   16d9e:	mov    rax,rbx
   16da1:	pop    rbx
   16da2:	ret    
   16da3:	nop    DWORD PTR [rax]
   16da6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   16db0:	push   r12
   16db2:	push   rbp
   16db3:	mov    r12d,esi
   16db6:	push   rbx
   16db7:	mov    rbp,rdx
   16dba:	mov    rbx,rdi
   16dbd:	call   20920 <g_str_equal@plt+0x13660>
   16dc2:	lea    r8,[rip+0x437d7]        # 5a5a0 <_fini@@Base+0x7e4c>
   16dc9:	lea    rdx,[rip+0x435d8]        # 5a3a8 <_fini@@Base+0x7c54>
   16dd0:	lea    rsi,[rip+0x3bec0]        # 52c97 <_fini@@Base+0x543>
   16dd7:	mov    ecx,0x162
   16ddc:	mov    rdi,rax
   16ddf:	call   20770 <g_str_equal@plt+0x134b0>
   16de4:	mov    rax,QWORD PTR [rax+0x88]
   16deb:	test   rax,rax
   16dee:	je     16dff <g_str_equal@plt+0x9b3f>
   16df0:	mov    rdx,rbp
   16df3:	mov    esi,r12d
   16df6:	mov    rdi,rbx
   16df9:	pop    rbx
   16dfa:	pop    rbp
   16dfb:	pop    r12
   16dfd:	jmp    rax
   16dff:	lea    r8,[rip+0x43612]        # 5a418 <_fini@@Base+0x7cc4>
   16e06:	lea    rcx,[rip+0x43793]        # 5a5a0 <_fini@@Base+0x7e4c>
   16e0d:	lea    rsi,[rip+0x43594]        # 5a3a8 <_fini@@Base+0x7c54>
   16e14:	mov    rdi,rbp
   16e17:	xor    eax,eax
   16e19:	mov    edx,0x165
   16e1e:	call   3a090 <g_str_equal@plt+0x2cdd0>
   16e23:	pop    rbx
   16e24:	or     eax,0xffffffff
   16e27:	pop    rbp
   16e28:	pop    r12
   16e2a:	ret    
   16e2b:	nop    DWORD PTR [rax+rax*1+0x0]
   16e30:	push   rbp
   16e31:	push   rbx
   16e32:	mov    rbp,rdi
   16e35:	mov    ebx,esi
   16e37:	sub    rsp,0x8
   16e3b:	call   20920 <g_str_equal@plt+0x13660>
   16e40:	lea    r8,[rip+0x43739]        # 5a580 <_fini@@Base+0x7e2c>
   16e47:	lea    rdx,[rip+0x4355a]        # 5a3a8 <_fini@@Base+0x7c54>
   16e4e:	lea    rsi,[rip+0x3be42]        # 52c97 <_fini@@Base+0x543>
   16e55:	mov    ecx,0x170
   16e5a:	mov    rdi,rax
   16e5d:	call   20770 <g_str_equal@plt+0x134b0>
   16e62:	mov    rax,QWORD PTR [rax+0x98]
   16e69:	test   rax,rax
   16e6c:	je     16e80 <g_str_equal@plt+0x9bc0>
   16e6e:	add    rsp,0x8
   16e72:	movzx  esi,bl
   16e75:	mov    rdi,rbp
   16e78:	pop    rbx
   16e79:	pop    rbp
   16e7a:	jmp    rax
   16e7c:	nop    DWORD PTR [rax+0x0]
   16e80:	add    rsp,0x8
   16e84:	pop    rbx
   16e85:	pop    rbp
   16e86:	ret    
   16e87:	nop    WORD PTR [rax+rax*1+0x0]
   16e90:	push   rbp
   16e91:	push   rbx
   16e92:	mov    rbp,rdi
   16e95:	mov    ebx,esi
   16e97:	sub    rsp,0x8
   16e9b:	call   20920 <g_str_equal@plt+0x13660>
   16ea0:	lea    r8,[rip+0x436b9]        # 5a560 <_fini@@Base+0x7e0c>
   16ea7:	lea    rdx,[rip+0x434fa]        # 5a3a8 <_fini@@Base+0x7c54>
   16eae:	lea    rsi,[rip+0x3bde2]        # 52c97 <_fini@@Base+0x543>
   16eb5:	mov    ecx,0x17b
   16eba:	mov    rdi,rax
   16ebd:	call   20770 <g_str_equal@plt+0x134b0>
   16ec2:	mov    rax,QWORD PTR [rax+0x90]
   16ec9:	test   rax,rax
   16ecc:	je     16ee0 <g_str_equal@plt+0x9c20>
   16ece:	add    rsp,0x8
   16ed2:	movzx  esi,bl
   16ed5:	mov    rdi,rbp
   16ed8:	pop    rbx
   16ed9:	pop    rbp
   16eda:	jmp    rax
   16edc:	nop    DWORD PTR [rax+0x0]
   16ee0:	add    rsp,0x8
   16ee4:	pop    rbx
   16ee5:	pop    rbp
   16ee6:	ret    
   16ee7:	nop    WORD PTR [rax+rax*1+0x0]
   16ef0:	push   r13
   16ef2:	push   r12
   16ef4:	mov    r13d,edx
   16ef7:	push   rbp
   16ef8:	push   rbx
   16ef9:	mov    r12,rsi
   16efc:	mov    rbx,rdi
   16eff:	mov    rbp,rcx
   16f02:	sub    rsp,0x8
   16f06:	call   20920 <g_str_equal@plt+0x13660>
   16f0b:	lea    r8,[rip+0x4362e]        # 5a540 <_fini@@Base+0x7dec>
   16f12:	lea    rdx,[rip+0x4348f]        # 5a3a8 <_fini@@Base+0x7c54>
   16f19:	lea    rsi,[rip+0x3bd77]        # 52c97 <_fini@@Base+0x543>
   16f20:	mov    ecx,0x188
   16f25:	mov    rdi,rax
   16f28:	call   20770 <g_str_equal@plt+0x134b0>
   16f2d:	mov    rax,QWORD PTR [rax+0xa0]
   16f34:	test   rax,rax
   16f37:	je     16f51 <g_str_equal@plt+0x9c91>
   16f39:	add    rsp,0x8
   16f3d:	mov    rcx,rbp
   16f40:	mov    edx,r13d
   16f43:	mov    rsi,r12
   16f46:	mov    rdi,rbx
   16f49:	pop    rbx
   16f4a:	pop    rbp
   16f4b:	pop    r12
   16f4d:	pop    r13
   16f4f:	jmp    rax
   16f51:	lea    r8,[rip+0x434e8]        # 5a440 <_fini@@Base+0x7cec>
   16f58:	lea    rcx,[rip+0x435e1]        # 5a540 <_fini@@Base+0x7dec>
   16f5f:	lea    rsi,[rip+0x43442]        # 5a3a8 <_fini@@Base+0x7c54>
   16f66:	mov    edx,0x18b
   16f6b:	mov    rdi,rbp
   16f6e:	xor    eax,eax
   16f70:	call   3a090 <g_str_equal@plt+0x2cdd0>
   16f75:	pop    rdx
   16f76:	or     rax,0xffffffffffffffff
   16f7a:	pop    rbx
   16f7b:	pop    rbp
   16f7c:	pop    r12
   16f7e:	pop    r13
   16f80:	ret    
   16f81:	nop    DWORD PTR [rax+rax*1+0x0]
   16f86:	nop    WORD PTR cs:[rax+rax*1+0x0]
   16f90:	sub    rsp,0x8
   16f94:	cmp    QWORD PTR [rdi+0x40],0x0
   16f99:	jne    16fab <g_str_equal@plt+0x9ceb>
   16f9b:	cmp    QWORD PTR [rdi+0x48],0x0
   16fa0:	jne    16fca <g_str_equal@plt+0x9d0a>
   16fa2:	mov    QWORD PTR [rdi+0x38],rsi
   16fa6:	add    rsp,0x8
   16faa:	ret    
   16fab:	lea    rcx,[rip+0x4356e]        # 5a520 <_fini@@Base+0x7dcc>
   16fb2:	lea    rsi,[rip+0x433ef]        # 5a3a8 <_fini@@Base+0x7c54>
   16fb9:	lea    rdi,[rip+0x434da]        # 5a49a <_fini@@Base+0x7d46>
   16fc0:	mov    edx,0x1bc
   16fc5:	call   c390 <__assert_fail@plt>
   16fca:	lea    rcx,[rip+0x4354f]        # 5a520 <_fini@@Base+0x7dcc>
   16fd1:	lea    rsi,[rip+0x433d0]        # 5a3a8 <_fini@@Base+0x7c54>
   16fd8:	lea    rdi,[rip+0x434d0]        # 5a4af <_fini@@Base+0x7d5b>
   16fdf:	mov    edx,0x1bd
   16fe4:	call   c390 <__assert_fail@plt>
   16fe9:	nop    DWORD PTR [rax+0x0]
   16ff0:	push   rbx
   16ff1:	mov    QWORD PTR [rdi+0x40],0x0
   16ff9:	mov    rbx,rdi
   16ffc:	mov    QWORD PTR [rdi+0x48],0x0
   17004:	call   16c70 <g_str_equal@plt+0x99b0>
   17009:	mov    QWORD PTR [rbx+0x38],0x0
   17011:	pop    rbx
   17012:	ret    
   17013:	nop    DWORD PTR [rax]
   17016:	nop    WORD PTR cs:[rax+rax*1+0x0]
   17020:	push   rbp
   17021:	push   rbx
   17022:	mov    ebp,esi
   17024:	mov    rbx,rdi
   17027:	sub    rsp,0x8
   1702b:	call   429a0 <g_str_equal@plt+0x356e0>
   17030:	test   al,al
   17032:	je     1707a <g_str_equal@plt+0x9dba>
   17034:	cmp    ebp,0x1
   17037:	je     17068 <g_str_equal@plt+0x9da8>
   17039:	cmp    ebp,0x4
   1703c:	jne    170b8 <g_str_equal@plt+0x9df8>
   1703e:	cmp    QWORD PTR [rbx+0x48],0x0
   17043:	jne    17099 <g_str_equal@plt+0x9dd9>
   17045:	call   42970 <g_str_equal@plt+0x356b0>
   1704a:	mov    QWORD PTR [rbx+0x48],rax
   1704e:	mov    rdi,rbx
   17051:	call   16c70 <g_str_equal@plt+0x99b0>
   17056:	add    rsp,0x8
   1705a:	pop    rbx
   1705b:	pop    rbp
   1705c:	jmp    42690 <g_str_equal@plt+0x353d0>
   17061:	nop    DWORD PTR [rax+0x0]
   17068:	cmp    QWORD PTR [rbx+0x40],0x0
   1706d:	jne    170bd <g_str_equal@plt+0x9dfd>
   1706f:	call   42970 <g_str_equal@plt+0x356b0>
   17074:	mov    QWORD PTR [rbx+0x40],rax
   17078:	jmp    1704e <g_str_equal@plt+0x9d8e>
   1707a:	lea    rcx,[rip+0x4347f]        # 5a500 <_fini@@Base+0x7dac>
   17081:	lea    rsi,[rip+0x43320]        # 5a3a8 <_fini@@Base+0x7c54>
   17088:	lea    rdi,[rip+0x43436]        # 5a4c5 <_fini@@Base+0x7d71>
   1708f:	mov    edx,0x1cc
   17094:	call   c390 <__assert_fail@plt>
   17099:	lea    rcx,[rip+0x43460]        # 5a500 <_fini@@Base+0x7dac>
   170a0:	lea    rsi,[rip+0x43301]        # 5a3a8 <_fini@@Base+0x7c54>
   170a7:	lea    rdi,[rip+0x43401]        # 5a4af <_fini@@Base+0x7d5b>
   170ae:	mov    edx,0x1d1
   170b3:	call   c390 <__assert_fail@plt>
   170b8:	call   c270 <abort@plt>
   170bd:	lea    rcx,[rip+0x4343c]        # 5a500 <_fini@@Base+0x7dac>
   170c4:	lea    rsi,[rip+0x432dd]        # 5a3a8 <_fini@@Base+0x7c54>
   170cb:	lea    rdi,[rip+0x433c8]        # 5a49a <_fini@@Base+0x7d46>
   170d2:	mov    edx,0x1ce
   170d7:	call   c390 <__assert_fail@plt>
   170dc:	nop    DWORD PTR [rax+0x0]
   170e0:	push   r13
   170e2:	push   r12
   170e4:	mov    r13d,esi
   170e7:	push   rbp
   170e8:	push   rbx
   170e9:	mov    r12,rdi
   170ec:	sub    rsp,0x8
   170f0:	call   c780 <g_main_context_new@plt>
   170f5:	mov    esi,0x1
   170fa:	mov    rdi,rax
   170fd:	mov    rbx,rax
   17100:	call   c630 <g_main_loop_new@plt>
   17105:	mov    esi,r13d
   17108:	mov    rdi,r12
   1710b:	mov    rbp,rax
   1710e:	call   16bb0 <g_str_equal@plt+0x98f0>
   17113:	lea    rsi,[rip+0xfffffffffffff6e6]        # 16800 <g_str_equal@plt+0x9540>
   1711a:	mov    rdx,rbp
   1711d:	mov    r12,rax
   17120:	xor    ecx,ecx
   17122:	mov    rdi,rax
   17125:	call   c2f0 <g_source_set_callback@plt>
   1712a:	mov    rsi,rbx
   1712d:	mov    rdi,r12
   17130:	call   cf70 <g_source_attach@plt>
   17135:	mov    rdi,rbp
   17138:	call   d150 <g_main_loop_run@plt>
   1713d:	mov    rdi,r12
   17140:	call   cef0 <g_source_unref@plt>
   17145:	mov    rdi,rbp
   17148:	call   ce60 <g_main_loop_unref@plt>
   1714d:	add    rsp,0x8
   17151:	mov    rdi,rbx
   17154:	pop    rbx
   17155:	pop    rbp
   17156:	pop    r12
   17158:	pop    r13
   1715a:	jmp    cd40 <g_main_context_unref@plt>
   1715f:	nop
   17160:	push   r15
   17162:	push   r14
   17164:	push   r13
   17166:	push   r12
   17168:	mov    r13,rsi
   1716b:	push   rbp
   1716c:	push   rbx
   1716d:	mov    r12,rdx
   17170:	mov    esi,0x10
   17175:	mov    rbx,rdi
   17178:	mov    rdi,rdx
   1717b:	sub    rsp,0x28
   1717f:	mov    rbp,rcx
   17182:	mov    rax,QWORD PTR fs:0x28
   1718b:	mov    QWORD PTR [rsp+0x18],rax
   17190:	xor    eax,eax
   17192:	call   d070 <g_malloc_n@plt>
   17197:	mov    esi,r12d
   1719a:	mov    rdi,r13
   1719d:	mov    DWORD PTR [rsp+0xc],r12d
   171a2:	mov    r15,rax
   171a5:	mov    QWORD PTR [rsp+0x10],rax
   171aa:	lea    r14,[rsp+0xc]
   171af:	call   3b050 <g_str_equal@plt+0x2dd90>
   171b4:	mov    esi,DWORD PTR [rsp+0xc]
   171b8:	mov    rdi,QWORD PTR [rsp+0x10]
   171bd:	mov    ecx,r12d
   171c0:	mov    rdx,r13
   171c3:	mov    r9,rax
   171c6:	xor    r8d,r8d
   171c9:	xor    r12d,r12d
   171cc:	lea    r13,[rsp+0x10]
   171d1:	call   3b130 <g_str_equal@plt+0x2de70>
   171d6:	mov    DWORD PTR [rsp+0xc],eax
   171da:	jmp    17207 <g_str_equal@plt+0x9f47>
   171dc:	nop    DWORD PTR [rax+0x0]
   171e0:	test   rax,rax
   171e3:	js     17280 <g_str_equal@plt+0x9fc0>
   171e9:	je     17290 <g_str_equal@plt+0x9fd0>
   171ef:	mov    rdx,rax
   171f2:	mov    rsi,r14
   171f5:	mov    rdi,r13
   171f8:	mov    r12d,0x1
   171fe:	call   3ba40 <g_str_equal@plt+0x2e780>
   17203:	mov    eax,DWORD PTR [rsp+0xc]
   17207:	test   eax,eax
   17209:	je     17250 <g_str_equal@plt+0x9f90>
   1720b:	mov    rsi,QWORD PTR [rsp+0x10]
   17210:	xor    r8d,r8d
   17213:	xor    ecx,ecx
   17215:	mov    edx,eax
   17217:	mov    r9,rbp
   1721a:	mov    rdi,rbx
   1721d:	call   168b0 <g_str_equal@plt+0x95f0>
   17222:	cmp    rax,0xfffffffffffffffe
   17226:	jne    171e0 <g_str_equal@plt+0x9f20>
   17228:	call   429a0 <g_str_equal@plt+0x356e0>
   1722d:	test   al,al
   1722f:	mov    esi,0x1
   17234:	mov    rdi,rbx
   17237:	je     17240 <g_str_equal@plt+0x9f80>
   17239:	call   17020 <g_str_equal@plt+0x9d60>
   1723e:	jmp    17203 <g_str_equal@plt+0x9f43>
   17240:	call   170e0 <g_str_equal@plt+0x9e20>
   17245:	jmp    17203 <g_str_equal@plt+0x9f43>
   17247:	nop    WORD PTR [rax+rax*1+0x0]
   17250:	mov    ebx,0x1
   17255:	mov    rdi,r15
   17258:	call   d2b0 <g_free@plt>
   1725d:	mov    rcx,QWORD PTR [rsp+0x18]
   17262:	xor    rcx,QWORD PTR fs:0x28
   1726b:	mov    eax,ebx
   1726d:	jne    172c4 <g_str_equal@plt+0xa004>
   1726f:	add    rsp,0x28
   17273:	pop    rbx
   17274:	pop    rbp
   17275:	pop    r12
   17277:	pop    r13
   17279:	pop    r14
   1727b:	pop    r15
   1727d:	ret    
   1727e:	xchg   ax,ax
   17280:	mov    ebx,0xffffffff
   17285:	jmp    17255 <g_str_equal@plt+0x9f95>
   17287:	nop    WORD PTR [rax+rax*1+0x0]
   17290:	test   r12b,r12b
   17293:	jne    17299 <g_str_equal@plt+0x9fd9>
   17295:	xor    ebx,ebx
   17297:	jmp    17255 <g_str_equal@plt+0x9f95>
   17299:	lea    r8,[rip+0x431c8]        # 5a468 <_fini@@Base+0x7d14>
   172a0:	lea    rcx,[rip+0x433b9]        # 5a660 <_fini@@Base+0x7f0c>
   172a7:	lea    rsi,[rip+0x430fa]        # 5a3a8 <_fini@@Base+0x7c54>
   172ae:	mov    edx,0x77
   172b3:	mov    rdi,rbp
   172b6:	xor    eax,eax
   172b8:	call   3a090 <g_str_equal@plt+0x2cdd0>
   172bd:	mov    ebx,0xffffffff
   172c2:	jmp    17255 <g_str_equal@plt+0x9f95>
   172c4:	call   cd30 <__stack_chk_fail@plt>
   172c9:	nop    DWORD PTR [rax+0x0]
   172d0:	push   rbx
   172d1:	mov    rbx,rcx
   172d4:	call   17160 <g_str_equal@plt+0x9ea0>
   172d9:	test   eax,eax
   172db:	je     172ea <g_str_equal@plt+0xa02a>
   172dd:	cmp    eax,0x1
   172e0:	mov    edx,0x0
   172e5:	cmove  eax,edx
   172e8:	pop    rbx
   172e9:	ret    
   172ea:	lea    r8,[rip+0x43177]        # 5a468 <_fini@@Base+0x7d14>
   172f1:	lea    rcx,[rip+0x43348]        # 5a640 <_fini@@Base+0x7eec>
   172f8:	lea    rsi,[rip+0x430a9]        # 5a3a8 <_fini@@Base+0x7c54>
   172ff:	mov    rdi,rbx
   17302:	mov    edx,0x93
   17307:	call   3a090 <g_str_equal@plt+0x2cdd0>
   1730c:	mov    eax,0xffffffff
   17311:	pop    rbx
   17312:	ret    
   17313:	nop    DWORD PTR [rax]
   17316:	nop    WORD PTR cs:[rax+rax*1+0x0]
   17320:	sub    rsp,0x28
   17324:	mov    QWORD PTR [rsp],rsi
   17328:	mov    QWORD PTR [rsp+0x8],rdx
   1732d:	mov    rsi,rsp
   17330:	mov    edx,0x1
   17335:	mov    rax,QWORD PTR fs:0x28
   1733e:	mov    QWORD PTR [rsp+0x18],rax
   17343:	xor    eax,eax
   17345:	call   172d0 <g_str_equal@plt+0xa010>
   1734a:	mov    rdx,QWORD PTR [rsp+0x18]
   1734f:	xor    rdx,QWORD PTR fs:0x28
   17358:	jne    1735f <g_str_equal@plt+0xa09f>
   1735a:	add    rsp,0x28
   1735e:	ret    
   1735f:	call   cd30 <__stack_chk_fail@plt>
   17364:	xchg   ax,ax
   17366:	nop    WORD PTR cs:[rax+rax*1+0x0]
   17370:	sub    rsp,0x28
   17374:	mov    QWORD PTR [rsp],rsi
   17378:	mov    QWORD PTR [rsp+0x8],rdx
   1737d:	mov    rsi,rsp
   17380:	mov    edx,0x1
   17385:	mov    rax,QWORD PTR fs:0x28
   1738e:	mov    QWORD PTR [rsp+0x18],rax
   17393:	xor    eax,eax
   17395:	call   17160 <g_str_equal@plt+0x9ea0>
   1739a:	mov    rdx,QWORD PTR [rsp+0x18]
   1739f:	xor    rdx,QWORD PTR fs:0x28
   173a8:	jne    173af <g_str_equal@plt+0xa0ef>
   173aa:	add    rsp,0x28
   173ae:	ret    
   173af:	call   cd30 <__stack_chk_fail@plt>
   173b4:	xchg   ax,ax
   173b6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   173c0:	push   r14
   173c2:	push   r13
   173c4:	mov    r13,rsi
   173c7:	push   r12
   173c9:	push   rbp
   173ca:	mov    r12,rdx
   173cd:	push   rbx
   173ce:	mov    esi,0x10
   173d3:	mov    rbx,rdi
   173d6:	mov    rdi,rdx
   173d9:	mov    rbp,rcx
   173dc:	sub    rsp,0x20
   173e0:	mov    rax,QWORD PTR fs:0x28
   173e9:	mov    QWORD PTR [rsp+0x18],rax
   173ee:	xor    eax,eax
   173f0:	call   d070 <g_malloc_n@plt>
   173f5:	mov    esi,r12d
   173f8:	mov    rdi,r13
   173fb:	mov    DWORD PTR [rsp+0xc],r12d
   17400:	mov    r14,rax
   17403:	mov    QWORD PTR [rsp+0x10],rax
   17408:	call   3b050 <g_str_equal@plt+0x2dd90>
   1740d:	mov    esi,DWORD PTR [rsp+0xc]
   17411:	mov    rdi,QWORD PTR [rsp+0x10]
   17416:	mov    ecx,r12d
   17419:	mov    rdx,r13
   1741c:	mov    r9,rax
   1741f:	xor    r8d,r8d
   17422:	lea    r13,[rsp+0xc]
   17427:	lea    r12,[rsp+0x10]
   1742c:	call   3b130 <g_str_equal@plt+0x2de70>
   17431:	mov    DWORD PTR [rsp+0xc],eax
   17435:	jmp    1745b <g_str_equal@plt+0xa19b>
   17437:	nop    WORD PTR [rax+rax*1+0x0]
   17440:	test   rax,rax
   17443:	js     174d0 <g_str_equal@plt+0xa210>
   17449:	mov    rdx,rax
   1744c:	mov    rsi,r13
   1744f:	mov    rdi,r12
   17452:	call   3ba40 <g_str_equal@plt+0x2e780>
   17457:	mov    eax,DWORD PTR [rsp+0xc]
   1745b:	test   eax,eax
   1745d:	je     17498 <g_str_equal@plt+0xa1d8>
   1745f:	mov    rsi,QWORD PTR [rsp+0x10]
   17464:	xor    r8d,r8d
   17467:	xor    ecx,ecx
   17469:	mov    edx,eax
   1746b:	mov    r9,rbp
   1746e:	mov    rdi,rbx
   17471:	call   16980 <g_str_equal@plt+0x96c0>
   17476:	cmp    rax,0xfffffffffffffffe
   1747a:	jne    17440 <g_str_equal@plt+0xa180>
   1747c:	call   429a0 <g_str_equal@plt+0x356e0>
   17481:	test   al,al
   17483:	mov    esi,0x4
   17488:	mov    rdi,rbx
   1748b:	je     174c8 <g_str_equal@plt+0xa208>
   1748d:	call   17020 <g_str_equal@plt+0x9d60>
   17492:	jmp    17457 <g_str_equal@plt+0xa197>
   17494:	nop    DWORD PTR [rax+0x0]
   17498:	xor    ebx,ebx
   1749a:	mov    rdi,r14
   1749d:	call   d2b0 <g_free@plt>
   174a2:	mov    rcx,QWORD PTR [rsp+0x18]
   174a7:	xor    rcx,QWORD PTR fs:0x28
   174b0:	mov    eax,ebx
   174b2:	jne    174d7 <g_str_equal@plt+0xa217>
   174b4:	add    rsp,0x20
   174b8:	pop    rbx
   174b9:	pop    rbp
   174ba:	pop    r12
   174bc:	pop    r13
   174be:	pop    r14
   174c0:	ret    
   174c1:	nop    DWORD PTR [rax+0x0]
   174c8:	call   170e0 <g_str_equal@plt+0x9e20>
   174cd:	jmp    17457 <g_str_equal@plt+0xa197>
   174cf:	nop
   174d0:	mov    ebx,0xffffffff
   174d5:	jmp    1749a <g_str_equal@plt+0xa1da>
   174d7:	call   cd30 <__stack_chk_fail@plt>
   174dc:	nop    DWORD PTR [rax+0x0]
   174e0:	sub    rsp,0x28
   174e4:	mov    QWORD PTR [rsp],rsi
   174e8:	mov    QWORD PTR [rsp+0x8],rdx
   174ed:	mov    rsi,rsp
   174f0:	mov    edx,0x1
   174f5:	mov    rax,QWORD PTR fs:0x28
   174fe:	mov    QWORD PTR [rsp+0x18],rax
   17503:	xor    eax,eax
   17505:	call   173c0 <g_str_equal@plt+0xa100>
   1750a:	mov    rdx,QWORD PTR [rsp+0x18]
   1750f:	xor    rdx,QWORD PTR fs:0x28
   17518:	jne    1751f <g_str_equal@plt+0xa25f>
   1751a:	add    rsp,0x28
   1751e:	ret    
   1751f:	call   cd30 <__stack_chk_fail@plt>
   17524:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1752e:	xchg   ax,ax
   17530:	xor    eax,eax
   17532:	ret    
   17533:	nop    DWORD PTR [rax]
   17536:	nop    WORD PTR cs:[rax+rax*1+0x0]
   17540:	mov    DWORD PTR [rsi],0xffffffff
   17546:	mov    eax,DWORD PTR [rdi+0x68]
   17549:	and    eax,0x5
   1754c:	ret    
   1754d:	nop    DWORD PTR [rax]
   17550:	mov    eax,DWORD PTR [rdi+0x68]
   17553:	and    eax,0x5
   17556:	ret    
   17557:	nop    WORD PTR [rax+rax*1+0x0]
   17560:	push   r12
   17562:	push   rbp
   17563:	mov    r12,rdx
   17566:	push   rbx
   17567:	mov    ebx,DWORD PTR [rdi+0x68]
   1756a:	mov    rbp,rsi
   1756d:	mov    rdi,QWORD PTR [rdi+0x60]
   17571:	lea    rdx,[rip+0x43140]        # 5a6b8 <_fini@@Base+0x7f64>
   17578:	lea    rsi,[rip+0x3b718]        # 52c97 <_fini@@Base+0x543>
   1757f:	lea    r8,[rip+0x4327a]        # 5a800 <_fini@@Base+0x80ac>
   17586:	mov    ecx,0xb8
   1758b:	and    ebx,0x5
   1758e:	call   205c0 <g_str_equal@plt+0x13300>
   17593:	mov    rdx,r12
   17596:	mov    esi,ebx
   17598:	mov    rdi,rax
   1759b:	pop    rbx
   1759c:	mov    rax,rbp
   1759f:	pop    rbp
   175a0:	pop    r12
   175a2:	jmp    rax
   175a4:	xchg   ax,ax
   175a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   175b0:	push   rbx
   175b1:	lea    r8,[rip+0x431c8]        # 5a780 <_fini@@Base+0x802c>
   175b8:	mov    rbx,rsi
   175bb:	lea    rdx,[rip+0x430f6]        # 5a6b8 <_fini@@Base+0x7f64>
   175c2:	lea    rsi,[rip+0x4312c]        # 5a6f5 <_fini@@Base+0x7fa1>
   175c9:	mov    ecx,0x81
   175ce:	call   205c0 <g_str_equal@plt+0x13300>
   175d3:	mov    QWORD PTR [rax+0x60],rbx
   175d7:	mov    rax,rbx
   175da:	pop    rbx
   175db:	ret    
   175dc:	nop    DWORD PTR [rax+0x0]
   175e0:	mov    rdi,QWORD PTR [rdi+0x60]
   175e4:	jmp    20b90 <g_str_equal@plt+0x138d0>
   175e9:	nop    DWORD PTR [rax+0x0]
   175f0:	lea    rdi,[rip+0x268da9]        # 2803a0 <_fini@@Base+0x22dc4c>
   175f7:	jmp    202f0 <g_str_equal@plt+0x13030>
   175fc:	nop    DWORD PTR [rax+0x0]
   17600:	lea    rdx,[rip+0x430b1]        # 5a6b8 <_fini@@Base+0x7f64>
   17607:	lea    rsi,[rip+0x3b689]        # 52c97 <_fini@@Base+0x543>
   1760e:	lea    r8,[rip+0x431cb]        # 5a7e0 <_fini@@Base+0x808c>
   17615:	sub    rsp,0x8
   17619:	mov    ecx,0xe3
   1761e:	call   20770 <g_str_equal@plt+0x134b0>
   17623:	lea    rdx,[rip+0x216]        # 17840 <g_str_equal@plt+0xa580>
   1762a:	lea    rcx,[rip+0x13f]        # 17770 <g_str_equal@plt+0xa4b0>
   17631:	lea    rsi,[rip+0xfffffffffffffef8]        # 17530 <g_str_equal@plt+0xa270>
   17638:	mov    QWORD PTR [rax+0x60],rdx
   1763c:	mov    QWORD PTR [rax+0x68],rcx
   17640:	lea    rdx,[rip+0xffffffffffffff69]        # 175b0 <g_str_equal@plt+0xa2f0>
   17647:	mov    QWORD PTR [rax+0x80],rsi
   1764e:	lea    rcx,[rip+0x7b]        # 176d0 <g_str_equal@plt+0xa410>
   17655:	lea    rsi,[rip+0x14]        # 17670 <g_str_equal@plt+0xa3b0>
   1765c:	mov    QWORD PTR [rax+0xa0],rdx
   17663:	mov    QWORD PTR [rax+0x70],rcx
   17667:	mov    QWORD PTR [rax+0x78],rsi
   1766b:	add    rsp,0x8
   1766f:	ret    
   17670:	push   r12
   17672:	lea    r8,[rip+0x43147]        # 5a7c0 <_fini@@Base+0x806c>
   17679:	push   rbp
   1767a:	mov    r12d,esi
   1767d:	push   rbx
   1767e:	lea    rdx,[rip+0x43033]        # 5a6b8 <_fini@@Base+0x7f64>
   17685:	lea    rsi,[rip+0x43069]        # 5a6f5 <_fini@@Base+0x7fa1>
   1768c:	mov    ecx,0xcf
   17691:	call   205c0 <g_str_equal@plt+0x13300>
   17696:	lea    rdi,[rip+0x26abc3]        # 282260 <g_test_config_vars+0xea0>
   1769d:	mov    rbp,rax
   176a0:	mov    esi,0x70
   176a5:	call   c610 <g_source_new@plt>
   176aa:	mov    rdi,rbp
   176ad:	mov    rbx,rax
   176b0:	mov    QWORD PTR [rax+0x60],rbp
   176b4:	call   20b70 <g_str_equal@plt+0x138b0>
   176b9:	mov    DWORD PTR [rbx+0x68],r12d
   176bd:	mov    rax,rbx
   176c0:	pop    rbx
   176c1:	pop    rbp
   176c2:	pop    r12
   176c4:	ret    
   176c5:	nop
   176c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   176d0:	push   rbx
   176d1:	lea    r8,[rip+0x430c8]        # 5a7a0 <_fini@@Base+0x804c>
   176d8:	lea    rdx,[rip+0x42fd9]        # 5a6b8 <_fini@@Base+0x7f64>
   176df:	lea    rsi,[rip+0x4300f]        # 5a6f5 <_fini@@Base+0x7fa1>
   176e6:	mov    ecx,0x8c
   176eb:	call   205c0 <g_str_equal@plt+0x13300>
   176f0:	mov    rdi,QWORD PTR [rax+0x68]
   176f4:	mov    rbx,rax
   176f7:	call   d2b0 <g_free@plt>
   176fc:	mov    QWORD PTR [rbx+0x68],0x0
   17704:	mov    QWORD PTR [rbx+0x60],0x0
   1770c:	xor    eax,eax
   1770e:	mov    QWORD PTR [rbx+0x58],0x0
   17716:	mov    QWORD PTR [rbx+0x50],0x0
   1771e:	pop    rbx
   1771f:	ret    
   17720:	push   rbx
   17721:	lea    r8,[rip+0x42ff8]        # 5a720 <_fini@@Base+0x7fcc>
   17728:	lea    rdx,[rip+0x42f89]        # 5a6b8 <_fini@@Base+0x7f64>
   1772f:	lea    rsi,[rip+0x42fbf]        # 5a6f5 <_fini@@Base+0x7fa1>
   17736:	mov    ecx,0x2d
   1773b:	call   205c0 <g_str_equal@plt+0x13300>
   17740:	mov    rdi,QWORD PTR [rax+0x68]
   17744:	mov    rbx,rax
   17747:	call   d2b0 <g_free@plt>
   1774c:	mov    QWORD PTR [rbx+0x60],0x0
   17754:	mov    QWORD PTR [rbx+0x58],0x0
   1775c:	mov    QWORD PTR [rbx+0x50],0x0
   17764:	pop    rbx
   17765:	ret    
   17766:	nop    WORD PTR cs:[rax+rax*1+0x0]
   17770:	push   r15
   17772:	push   r14
   17774:	lea    r8,[rip+0x42fe5]        # 5a760 <_fini@@Base+0x800c>
   1777b:	push   r13
   1777d:	push   r12
   1777f:	mov    r13,rdx
   17782:	push   rbp
   17783:	push   rbx
   17784:	mov    r14,rsi
   17787:	lea    rdx,[rip+0x42f2a]        # 5a6b8 <_fini@@Base+0x7f64>
   1778e:	lea    rsi,[rip+0x42f60]        # 5a6f5 <_fini@@Base+0x7fa1>
   17795:	mov    ecx,0x3a
   1779a:	sub    rsp,0x8
   1779e:	call   205c0 <g_str_equal@plt+0x13300>
   177a3:	test   r13,r13
   177a6:	je     17830 <g_str_equal@plt+0xa570>
   177ac:	mov    rsi,QWORD PTR [rax+0x60]
   177b0:	mov    rbp,rax
   177b3:	mov    rax,QWORD PTR [rax+0x58]
   177b7:	mov    rbx,QWORD PTR [r14+0x8]
   177bb:	cmp    rsi,rax
   177be:	jae    17830 <g_str_equal@plt+0xa570>
   177c0:	xor    r15d,r15d
   177c3:	xor    r12d,r12d
   177c6:	jmp    177e1 <g_str_equal@plt+0xa521>
   177c8:	nop    DWORD PTR [rax+rax*1+0x0]
   177d0:	mov    rax,QWORD PTR [rbp+0x58]
   177d4:	mov    rbx,QWORD PTR [r14+0x18]
   177d8:	add    r14,0x10
   177dc:	cmp    rax,rsi
   177df:	jbe    17818 <g_str_equal@plt+0xa558>
   177e1:	lea    rcx,[rsi+rbx*1]
   177e5:	mov    rdx,rax
   177e8:	mov    rdi,QWORD PTR [r14]
   177eb:	sub    rdx,rsi
   177ee:	cmp    rcx,rax
   177f1:	cmova  rbx,rdx
   177f5:	add    rsi,QWORD PTR [rbp+0x68]
   177f9:	add    r15,0x1
   177fd:	mov    rdx,rbx
   17800:	add    r12,rbx
   17803:	call   d220 <memcpy@plt>
   17808:	add    rbx,QWORD PTR [rbp+0x60]
   1780c:	cmp    r13,r15
   1780f:	mov    rsi,rbx
   17812:	mov    QWORD PTR [rbp+0x60],rbx
   17816:	jne    177d0 <g_str_equal@plt+0xa510>
   17818:	add    rsp,0x8
   1781c:	mov    rax,r12
   1781f:	pop    rbx
   17820:	pop    rbp
   17821:	pop    r12
   17823:	pop    r13
   17825:	pop    r14
   17827:	pop    r15
   17829:	ret    
   1782a:	nop    WORD PTR [rax+rax*1+0x0]
   17830:	xor    r12d,r12d
   17833:	jmp    17818 <g_str_equal@plt+0xa558>
   17835:	nop
   17836:	nop    WORD PTR cs:[rax+rax*1+0x0]
   17840:	push   r13
   17842:	push   r12
   17844:	lea    r8,[rip+0x42ef5]        # 5a740 <_fini@@Base+0x7fec>
   1784b:	push   rbp
   1784c:	push   rbx
   1784d:	mov    r12,rdx
   17850:	mov    rbx,rsi
   17853:	lea    rdx,[rip+0x42e5e]        # 5a6b8 <_fini@@Base+0x7f64>
   1785a:	lea    rsi,[rip+0x42e94]        # 5a6f5 <_fini@@Base+0x7fa1>
   17861:	sub    rsp,0x8
   17865:	mov    ecx,0x55
   1786a:	call   205c0 <g_str_equal@plt+0x13300>
   1786f:	test   r12,r12
   17872:	mov    rbp,rax
   17875:	je     17960 <g_str_equal@plt+0xa6a0>
   1787b:	lea    rax,[rbx+0x8]
   1787f:	mov    rdx,r12
   17882:	xor    esi,esi
   17884:	shl    rdx,0x4
   17888:	add    rdx,rax
   1788b:	nop    DWORD PTR [rax+rax*1+0x0]
   17890:	add    rsi,QWORD PTR [rax]
   17893:	add    rax,0x10
   17897:	cmp    rax,rdx
   1789a:	jne    17890 <g_str_equal@plt+0xa5d0>
   1789c:	mov    rdx,QWORD PTR [rbp+0x60]
   178a0:	add    rsi,rdx
   178a3:	cmp    rsi,QWORD PTR [rbp+0x50]
   178a7:	ja     17910 <g_str_equal@plt+0xa650>
   178a9:	mov    rax,QWORD PTR [rbp+0x58]
   178ad:	cmp    rax,rdx
   178b0:	jb     1792e <g_str_equal@plt+0xa66e>
   178b2:	test   r12,r12
   178b5:	je     1794d <g_str_equal@plt+0xa68d>
   178bb:	mov    rdi,QWORD PTR [rbp+0x58]
   178bf:	add    rbx,0x8
   178c3:	shl    r12,0x4
   178c7:	add    r12,rbx
   178ca:	xor    r13d,r13d
   178cd:	nop    DWORD PTR [rax]
   178d0:	add    rdi,QWORD PTR [rbp+0x68]
   178d4:	mov    rsi,QWORD PTR [rbx-0x8]
   178d8:	add    rbx,0x10
   178dc:	mov    rdx,QWORD PTR [rbx-0x10]
   178e0:	call   d220 <memcpy@plt>
   178e5:	mov    rdi,QWORD PTR [rbx-0x10]
   178e9:	add    rdi,QWORD PTR [rbp+0x58]
   178ed:	mov    QWORD PTR [rbp+0x58],rdi
   178f1:	mov    rax,QWORD PTR [rbx-0x10]
   178f5:	add    QWORD PTR [rbp+0x60],rax
   178f9:	add    r13,QWORD PTR [rbx-0x10]
   178fd:	cmp    r12,rbx
   17900:	jne    178d0 <g_str_equal@plt+0xa610>
   17902:	add    rsp,0x8
   17906:	mov    rax,r13
   17909:	pop    rbx
   1790a:	pop    rbp
   1790b:	pop    r12
   1790d:	pop    r13
   1790f:	ret    
   17910:	mov    rdi,QWORD PTR [rbp+0x68]
   17914:	mov    QWORD PTR [rbp+0x50],rsi
   17918:	call   ccf0 <g_realloc@plt>
   1791d:	mov    rdx,QWORD PTR [rbp+0x60]
   17921:	mov    QWORD PTR [rbp+0x68],rax
   17925:	mov    rax,QWORD PTR [rbp+0x58]
   17929:	cmp    rax,rdx
   1792c:	jae    178b2 <g_str_equal@plt+0xa5f2>
   1792e:	mov    rdi,QWORD PTR [rbp+0x68]
   17932:	sub    rdx,rax
   17935:	xor    esi,esi
   17937:	call   c1c0 <memset@plt>
   1793c:	mov    rax,QWORD PTR [rbp+0x60]
   17940:	test   r12,r12
   17943:	mov    QWORD PTR [rbp+0x58],rax
   17947:	jne    178bb <g_str_equal@plt+0xa5fb>
   1794d:	add    rsp,0x8
   17951:	xor    r13d,r13d
   17954:	pop    rbx
   17955:	mov    rax,r13
   17958:	pop    rbp
   17959:	pop    r12
   1795b:	pop    r13
   1795d:	ret    
   1795e:	xchg   ax,ax
   17960:	xor    esi,esi
   17962:	jmp    1789c <g_str_equal@plt+0xa5dc>
   17967:	nop    WORD PTR [rax+rax*1+0x0]
   17970:	push   rbp
   17971:	push   rbx
   17972:	mov    rbp,rdi
   17975:	lea    rdi,[rip+0x42d79]        # 5a6f5 <_fini@@Base+0x7fa1>
   1797c:	sub    rsp,0x8
   17980:	call   20420 <g_str_equal@plt+0x13160>
   17985:	lea    r8,[rip+0x42ea4]        # 5a830 <_fini@@Base+0x80dc>
   1798c:	lea    rdx,[rip+0x42d25]        # 5a6b8 <_fini@@Base+0x7f64>
   17993:	lea    rsi,[rip+0x42d5b]        # 5a6f5 <_fini@@Base+0x7fa1>
   1799a:	mov    ecx,0x20
   1799f:	mov    rdi,rax
   179a2:	call   205c0 <g_str_equal@plt+0x13300>
   179a7:	test   rbp,rbp
   179aa:	mov    rbx,rax
   179ad:	je     179bf <g_str_equal@plt+0xa6ff>
   179af:	mov    rdi,rbp
   179b2:	call   ce00 <g_malloc0@plt>
   179b7:	mov    QWORD PTR [rbx+0x50],rbp
   179bb:	mov    QWORD PTR [rbx+0x68],rax
   179bf:	add    rsp,0x8
   179c3:	mov    rax,rbx
   179c6:	pop    rbx
   179c7:	pop    rbp
   179c8:	ret    
   179c9:	nop    DWORD PTR [rax+0x0]
   179d0:	lea    rdx,[rip+0x42e71]        # 5a848 <_fini@@Base+0x80f4>
   179d7:	lea    r8,[rip+0x430e2]        # 5aac0 <_fini@@Base+0x836c>
   179de:	lea    rsi,[rip+0x42ffb]        # 5a9e0 <_fini@@Base+0x828c>
   179e5:	sub    rsp,0x8
   179e9:	mov    ecx,0xca
   179ee:	call   205c0 <g_str_equal@plt+0x13300>
   179f3:	mov    rdx,0xffffffffffffffff
   179fa:	mov    QWORD PTR [rax+0x50],rdx
   179fe:	mov    DWORD PTR [rax+0x58],edx
   17a01:	add    rsp,0x8
   17a05:	ret    
   17a06:	nop    WORD PTR cs:[rax+rax*1+0x0]
   17a10:	lea    rdi,[rip+0x268a09]        # 280420 <_fini@@Base+0x22dccc>
   17a17:	jmp    202f0 <g_str_equal@plt+0x13030>
   17a1c:	nop    DWORD PTR [rax+0x0]
   17a20:	lea    rdx,[rip+0x42e21]        # 5a848 <_fini@@Base+0x80f4>
   17a27:	lea    rsi,[rip+0x3b269]        # 52c97 <_fini@@Base+0x543>
   17a2e:	lea    r8,[rip+0x431fb]        # 5ac30 <_fini@@Base+0x84dc>
   17a35:	sub    rsp,0x8
   17a39:	mov    ecx,0x16f
   17a3e:	call   20770 <g_str_equal@plt+0x134b0>
   17a43:	lea    rdx,[rip+0x396]        # 17de0 <g_str_equal@plt+0xab20>
   17a4a:	lea    rcx,[rip+0x2bf]        # 17d10 <g_str_equal@plt+0xaa50>
   17a51:	lea    rsi,[rip+0x248]        # 17ca0 <g_str_equal@plt+0xa9e0>
   17a58:	mov    QWORD PTR [rax+0x60],rdx
   17a5c:	mov    QWORD PTR [rax+0x68],rcx
   17a60:	lea    rdx,[rip+0xe9]        # 17b50 <g_str_equal@plt+0xa890>
   17a67:	mov    QWORD PTR [rax+0x80],rsi
   17a6e:	lea    rcx,[rip+0x9b]        # 17b10 <g_str_equal@plt+0xa850>
   17a75:	lea    rsi,[rip+0x14]        # 17a90 <g_str_equal@plt+0xa7d0>
   17a7c:	mov    QWORD PTR [rax+0x70],rdx
   17a80:	mov    QWORD PTR [rax+0x78],rcx
   17a84:	mov    QWORD PTR [rax+0xa8],rsi
   17a8b:	add    rsp,0x8
   17a8f:	ret    
   17a90:	push   r14
   17a92:	mov    r14,rdx
   17a95:	push   r13
   17a97:	lea    rdx,[rip+0x42daa]        # 5a848 <_fini@@Base+0x80f4>
   17a9e:	push   r12
   17aa0:	push   rbp
   17aa1:	mov    rbp,r8
   17aa4:	push   rbx
   17aa5:	lea    r8,[rip+0x43154]        # 5ac00 <_fini@@Base+0x84ac>
   17aac:	mov    rbx,rsi
   17aaf:	lea    rsi,[rip+0x42f2a]        # 5a9e0 <_fini@@Base+0x828c>
   17ab6:	mov    r13,rcx
   17ab9:	mov    ecx,0x15b
   17abe:	call   205c0 <g_str_equal@plt+0x13300>
   17ac3:	sub    rsp,0x8
   17ac7:	mov    esi,DWORD PTR [rax+0x54]
   17aca:	mov    r12,rax
   17acd:	push   rbp
   17ace:	mov    rcx,r14
   17ad1:	mov    rdi,rbx
   17ad4:	xor    r9d,r9d
   17ad7:	xor    r8d,r8d
   17ada:	xor    edx,edx
   17adc:	call   36920 <g_str_equal@plt+0x29660>
   17ae1:	mov    esi,DWORD PTR [r12+0x50]
   17ae6:	mov    r8,r13
   17ae9:	xor    edx,edx
   17aeb:	mov    rdi,rbx
   17aee:	xor    r9d,r9d
   17af1:	xor    ecx,ecx
   17af3:	mov    QWORD PTR [rsp],rbp
   17af7:	call   36920 <g_str_equal@plt+0x29660>
   17afc:	pop    rax
   17afd:	pop    rdx
   17afe:	pop    rbx
   17aff:	pop    rbp
   17b00:	pop    r12
   17b02:	pop    r13
   17b04:	pop    r14
   17b06:	ret    
   17b07:	nop    WORD PTR [rax+rax*1+0x0]
   17b10:	push   rbp
   17b11:	push   rbx
   17b12:	mov    ebp,esi
   17b14:	lea    rdx,[rip+0x42d2d]        # 5a848 <_fini@@Base+0x80f4>
   17b1b:	lea    rsi,[rip+0x42ebe]        # 5a9e0 <_fini@@Base+0x828c>
   17b22:	lea    r8,[rip+0x43097]        # 5abc0 <_fini@@Base+0x846c>
   17b29:	sub    rsp,0x8
   17b2d:	mov    ecx,0x164
   17b32:	mov    rbx,rdi
   17b35:	call   205c0 <g_str_equal@plt+0x13300>
   17b3a:	mov    edx,DWORD PTR [rax+0x50]
   17b3d:	mov    esi,DWORD PTR [rax+0x54]
   17b40:	add    rsp,0x8
   17b44:	mov    ecx,ebp
   17b46:	mov    rdi,rbx
   17b49:	pop    rbx
   17b4a:	pop    rbp
   17b4b:	jmp    1b4b0 <g_str_equal@plt+0xe1f0>
   17b50:	push   r13
   17b52:	push   r12
   17b54:	mov    r13,rsi
   17b57:	push   rbp
   17b58:	push   rbx
   17b59:	lea    r8,[rip+0x43030]        # 5ab90 <_fini@@Base+0x843c>
   17b60:	lea    rdx,[rip+0x42ce1]        # 5a848 <_fini@@Base+0x80f4>
   17b67:	lea    rsi,[rip+0x42e72]        # 5a9e0 <_fini@@Base+0x828c>
   17b6e:	mov    ecx,0x12e
   17b73:	sub    rsp,0x8
   17b77:	call   205c0 <g_str_equal@plt+0x13300>
   17b7c:	mov    edi,DWORD PTR [rax+0x54]
   17b7f:	mov    rbp,rax
   17b82:	cmp    edi,0xffffffff
   17b85:	jne    17bf0 <g_str_equal@plt+0xa930>
   17b87:	mov    edi,DWORD PTR [rax+0x50]
   17b8a:	xor    r12d,r12d
   17b8d:	cmp    edi,0xffffffff
   17b90:	je     17ba2 <g_str_equal@plt+0xa8e2>
   17b92:	call   c230 <close@plt>
   17b97:	test   eax,eax
   17b99:	mov    eax,0xffffffff
   17b9e:	cmovs  r12d,eax
   17ba2:	mov    QWORD PTR [rbp+0x50],0xffffffffffffffff
   17baa:	jmp    17bbe <g_str_equal@plt+0xa8fe>
   17bac:	nop    DWORD PTR [rax+0x0]
   17bb0:	call   cc80 <__errno_location@plt>
   17bb5:	mov    r8d,DWORD PTR [rax]
   17bb8:	cmp    r8d,0x4
   17bbc:	jne    17c10 <g_str_equal@plt+0xa950>
   17bbe:	mov    edi,DWORD PTR [rbp+0x58]
   17bc1:	xor    edx,edx
   17bc3:	xor    esi,esi
   17bc5:	call   cc10 <waitpid@plt>
   17bca:	cmp    eax,0xffffffff
   17bcd:	mov    ebx,eax
   17bcf:	je     17bb0 <g_str_equal@plt+0xa8f0>
   17bd1:	cmp    r12d,0xffffffff
   17bd5:	je     17c50 <g_str_equal@plt+0xa990>
   17bd7:	add    rsp,0x8
   17bdb:	xor    r12d,r12d
   17bde:	pop    rbx
   17bdf:	mov    eax,r12d
   17be2:	pop    rbp
   17be3:	pop    r12
   17be5:	pop    r13
   17be7:	ret    
   17be8:	nop    DWORD PTR [rax+rax*1+0x0]
   17bf0:	call   c230 <close@plt>
   17bf5:	mov    edi,DWORD PTR [rbp+0x50]
   17bf8:	sar    eax,0x1f
   17bfb:	mov    r12d,eax
   17bfe:	cmp    edi,0xffffffff
   17c01:	je     17ba2 <g_str_equal@plt+0xa8e2>
   17c03:	cmp    edi,DWORD PTR [rbp+0x54]
   17c06:	je     17ba2 <g_str_equal@plt+0xa8e2>
   17c08:	jmp    17b92 <g_str_equal@plt+0xa8d2>
   17c0a:	nop    WORD PTR [rax+rax*1+0x0]
   17c10:	movsxd rax,DWORD PTR [rbp+0x58]
   17c14:	sub    rsp,0x8
   17c18:	lea    r9,[rip+0x42ded]        # 5aa0c <_fini@@Base+0x82b8>
   17c1f:	lea    rcx,[rip+0x42f6a]        # 5ab90 <_fini@@Base+0x843c>
   17c26:	lea    rsi,[rip+0x42c1b]        # 5a848 <_fini@@Base+0x80f4>
   17c2d:	mov    edx,0x148
   17c32:	mov    rdi,r13
   17c35:	mov    r12d,ebx
   17c38:	push   rax
   17c39:	xor    eax,eax
   17c3b:	call   3a140 <g_str_equal@plt+0x2ce80>
   17c40:	pop    rax
   17c41:	pop    rdx
   17c42:	mov    eax,r12d
   17c45:	add    rsp,0x8
   17c49:	pop    rbx
   17c4a:	pop    rbp
   17c4b:	pop    r12
   17c4d:	pop    r13
   17c4f:	ret    
   17c50:	call   cc80 <__errno_location@plt>
   17c55:	lea    rcx,[rip+0x42d98]        # 5a9f4 <_fini@@Base+0x82a0>
   17c5c:	sub    rsp,0x8
   17c60:	lea    rsi,[rip+0x42be1]        # 5a848 <_fini@@Base+0x80f4>
   17c67:	lea    r9,[rip+0x3b120]        # 52d8e <_fini@@Base+0x63a>
   17c6e:	mov    rdi,r13
   17c71:	mov    edx,0x14f
   17c76:	push   rcx
   17c77:	mov    r8d,DWORD PTR [rax]
   17c7a:	lea    rcx,[rip+0x42f0f]        # 5ab90 <_fini@@Base+0x843c>
   17c81:	xor    eax,eax
   17c83:	call   3a140 <g_str_equal@plt+0x2ce80>
   17c88:	pop    rcx
   17c89:	pop    rsi
   17c8a:	mov    eax,r12d
   17c8d:	add    rsp,0x8
   17c91:	pop    rbx
   17c92:	pop    rbp
   17c93:	pop    r12
   17c95:	pop    r13
   17c97:	ret    
   17c98:	nop    DWORD PTR [rax+rax*1+0x0]
   17ca0:	push   rbp
   17ca1:	push   rbx
   17ca2:	mov    ebp,esi
   17ca4:	lea    r8,[rip+0x42eb5]        # 5ab60 <_fini@@Base+0x840c>
   17cab:	lea    rdx,[rip+0x42b96]        # 5a848 <_fini@@Base+0x80f4>
   17cb2:	lea    rsi,[rip+0x42d27]        # 5a9e0 <_fini@@Base+0x828c>
   17cb9:	sub    rsp,0x8
   17cbd:	mov    ecx,0x11d
   17cc2:	call   205c0 <g_str_equal@plt+0x13300>
   17cc7:	test   bpl,bpl
   17cca:	mov    rbx,rax
   17ccd:	mov    edi,DWORD PTR [rax+0x50]
   17cd0:	jne    17cf0 <g_str_equal@plt+0xaa30>
   17cd2:	call   38110 <g_str_equal@plt+0x2ae50>
   17cd7:	mov    edi,DWORD PTR [rbx+0x54]
   17cda:	call   38110 <g_str_equal@plt+0x2ae50>
   17cdf:	add    rsp,0x8
   17ce3:	xor    eax,eax
   17ce5:	pop    rbx
   17ce6:	pop    rbp
   17ce7:	ret    
   17ce8:	nop    DWORD PTR [rax+rax*1+0x0]
   17cf0:	call   380e0 <g_str_equal@plt+0x2ae20>
   17cf5:	mov    edi,DWORD PTR [rbx+0x54]
   17cf8:	call   380e0 <g_str_equal@plt+0x2ae20>
   17cfd:	add    rsp,0x8
   17d01:	xor    eax,eax
   17d03:	pop    rbx
   17d04:	pop    rbp
   17d05:	ret    
   17d06:	nop    WORD PTR cs:[rax+rax*1+0x0]
   17d10:	push   r13
   17d12:	push   r12
   17d14:	lea    r8,[rip+0x42e25]        # 5ab40 <_fini@@Base+0x83ec>
   17d1b:	push   rbp
   17d1c:	push   rbx
   17d1d:	mov    r12,rsi
   17d20:	mov    rbx,rdx
   17d23:	lea    rsi,[rip+0x42cb6]        # 5a9e0 <_fini@@Base+0x828c>
   17d2a:	lea    rdx,[rip+0x42b17]        # 5a848 <_fini@@Base+0x80f4>
   17d31:	sub    rsp,0x8
   17d35:	mov    ecx,0xea
   17d3a:	mov    r13,r9
   17d3d:	call   205c0 <g_str_equal@plt+0x13300>
   17d42:	mov    rbp,rax
   17d45:	jmp    17d64 <g_str_equal@plt+0xaaa4>
   17d47:	nop    WORD PTR [rax+rax*1+0x0]
   17d50:	call   cc80 <__errno_location@plt>
   17d55:	mov    r8d,DWORD PTR [rax]
   17d58:	cmp    r8d,0xb
   17d5c:	je     17d88 <g_str_equal@plt+0xaac8>
   17d5e:	cmp    r8d,0x4
   17d62:	jne    17da0 <g_str_equal@plt+0xaae0>
   17d64:	mov    edi,DWORD PTR [rbp+0x54]
   17d67:	mov    edx,ebx
   17d69:	mov    rsi,r12
   17d6c:	call   d1e0 <readv@plt>
   17d71:	test   rax,rax
   17d74:	js     17d50 <g_str_equal@plt+0xaa90>
   17d76:	add    rsp,0x8
   17d7a:	pop    rbx
   17d7b:	pop    rbp
   17d7c:	pop    r12
   17d7e:	pop    r13
   17d80:	ret    
   17d81:	nop    DWORD PTR [rax+0x0]
   17d88:	add    rsp,0x8
   17d8c:	mov    rax,0xfffffffffffffffe
   17d93:	pop    rbx
   17d94:	pop    rbp
   17d95:	pop    r12
   17d97:	pop    r13
   17d99:	ret    
   17d9a:	nop    WORD PTR [rax+rax*1+0x0]
   17da0:	lea    r9,[rip+0x42c81]        # 5aa28 <_fini@@Base+0x82d4>
   17da7:	lea    rcx,[rip+0x42d92]        # 5ab40 <_fini@@Base+0x83ec>
   17dae:	lea    rsi,[rip+0x42a93]        # 5a848 <_fini@@Base+0x80f4>
   17db5:	mov    rdi,r13
   17db8:	xor    eax,eax
   17dba:	mov    edx,0xf8
   17dbf:	call   3a140 <g_str_equal@plt+0x2ce80>
   17dc4:	add    rsp,0x8
   17dc8:	mov    rax,0xffffffffffffffff
   17dcf:	pop    rbx
   17dd0:	pop    rbp
   17dd1:	pop    r12
   17dd3:	pop    r13
   17dd5:	ret    
   17dd6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   17de0:	push   r13
   17de2:	push   r12
   17de4:	lea    r8,[rip+0x42d35]        # 5ab20 <_fini@@Base+0x83cc>
   17deb:	push   rbp
   17dec:	push   rbx
   17ded:	mov    r12,rsi
   17df0:	mov    rbx,rdx
   17df3:	lea    rsi,[rip+0x42be6]        # 5a9e0 <_fini@@Base+0x828c>
   17dfa:	lea    rdx,[rip+0x42a47]        # 5a848 <_fini@@Base+0x80f4>
   17e01:	sub    rsp,0x8
   17e05:	mov    ecx,0x106
   17e0a:	mov    r13,r9
   17e0d:	call   205c0 <g_str_equal@plt+0x13300>
   17e12:	mov    rbp,rax
   17e15:	jmp    17e34 <g_str_equal@plt+0xab74>
   17e17:	nop    WORD PTR [rax+rax*1+0x0]
   17e20:	call   cc80 <__errno_location@plt>
   17e25:	mov    r8d,DWORD PTR [rax]
   17e28:	cmp    r8d,0xb
   17e2c:	je     17e58 <g_str_equal@plt+0xab98>
   17e2e:	cmp    r8d,0x4
   17e32:	jne    17e70 <g_str_equal@plt+0xabb0>
   17e34:	mov    edi,DWORD PTR [rbp+0x50]
   17e37:	mov    edx,ebx
   17e39:	mov    rsi,r12
   17e3c:	call   ce90 <writev@plt>
   17e41:	test   rax,rax
   17e44:	jle    17e20 <g_str_equal@plt+0xab60>
   17e46:	add    rsp,0x8
   17e4a:	pop    rbx
   17e4b:	pop    rbp
   17e4c:	pop    r12
   17e4e:	pop    r13
   17e50:	ret    
   17e51:	nop    DWORD PTR [rax+0x0]
   17e58:	add    rsp,0x8
   17e5c:	mov    rax,0xfffffffffffffffe
   17e63:	pop    rbx
   17e64:	pop    rbp
   17e65:	pop    r12
   17e67:	pop    r13
   17e69:	ret    
   17e6a:	nop    WORD PTR [rax+rax*1+0x0]
   17e70:	lea    rax,[rip+0x42bcd]        # 5aa44 <_fini@@Base+0x82f0>
   17e77:	sub    rsp,0x8
   17e7b:	lea    r9,[rip+0x3af0c]        # 52d8e <_fini@@Base+0x63a>
   17e82:	lea    rcx,[rip+0x42c97]        # 5ab20 <_fini@@Base+0x83cc>
   17e89:	lea    rsi,[rip+0x429b8]        # 5a848 <_fini@@Base+0x80f4>
   17e90:	mov    edx,0x113
   17e95:	push   rax
   17e96:	mov    rdi,r13
   17e99:	xor    eax,eax
   17e9b:	call   3a140 <g_str_equal@plt+0x2ce80>
   17ea0:	pop    rax
   17ea1:	pop    rdx
   17ea2:	mov    rax,0xffffffffffffffff
   17ea9:	add    rsp,0x8
   17ead:	pop    rbx
   17eae:	pop    rbp
   17eaf:	pop    r12
   17eb1:	pop    r13
   17eb3:	ret    
   17eb4:	xchg   ax,ax
   17eb6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   17ec0:	push   r15
   17ec2:	push   r14
   17ec4:	lea    r8,[rip+0x42c35]        # 5ab00 <_fini@@Base+0x83ac>
   17ecb:	push   r13
   17ecd:	push   r12
   17ecf:	lea    rdx,[rip+0x42972]        # 5a848 <_fini@@Base+0x80f4>
   17ed6:	push   rbp
   17ed7:	push   rbx
   17ed8:	lea    rsi,[rip+0x42b01]        # 5a9e0 <_fini@@Base+0x828c>
   17edf:	mov    ecx,0xd2
   17ee4:	sub    rsp,0x58
   17ee8:	mov    rax,QWORD PTR fs:0x28
   17ef1:	mov    QWORD PTR [rsp+0x48],rax
   17ef6:	xor    eax,eax
   17ef8:	call   205c0 <g_str_equal@plt+0x13300>
   17efd:	mov    edi,DWORD PTR [rax+0x54]
   17f00:	mov    rbp,rax
   17f03:	cmp    edi,0xffffffff
   17f06:	jne    18100 <g_str_equal@plt+0xae40>
   17f0c:	mov    edi,DWORD PTR [rax+0x50]
   17f0f:	cmp    edi,0xffffffff
   17f12:	je     17f19 <g_str_equal@plt+0xac59>
   17f14:	call   c230 <close@plt>
   17f19:	mov    ebx,DWORD PTR [rbp+0x58]
   17f1c:	mov    QWORD PTR [rbp+0x50],0xffffffffffffffff
   17f24:	test   ebx,ebx
   17f26:	jle    17fe8 <g_str_equal@plt+0xad28>
   17f2c:	xor    r12d,r12d
   17f2f:	lea    r13,[rsp+0x2c]
   17f34:	lea    r14,[rsp+0x30]
   17f39:	jmp    17f79 <g_str_equal@plt+0xacb9>
   17f3b:	nop    DWORD PTR [rax+rax*1+0x0]
   17f40:	test   ebx,ebx
   17f42:	jne    17fe8 <g_str_equal@plt+0xad28>
   17f48:	test   r12d,r12d
   17f4b:	mov    edi,DWORD PTR [rbp+0x58]
   17f4e:	je     18010 <g_str_equal@plt+0xad50>
   17f54:	cmp    r12d,0x1
   17f58:	jne    18120 <g_str_equal@plt+0xae60>
   17f5e:	mov    esi,0x9
   17f63:	call   c9f0 <kill@plt>
   17f68:	mov    edi,0x2710
   17f6d:	add    r12d,0x1
   17f71:	call   ca00 <usleep@plt>
   17f76:	mov    ebx,DWORD PTR [rbp+0x58]
   17f79:	mov    r8d,DWORD PTR [rip+0x26cb58]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   17f80:	test   r8d,r8d
   17f83:	jne    180a0 <g_str_equal@plt+0xade0>
   17f89:	mov    edi,ebx
   17f8b:	mov    edx,0x1
   17f90:	mov    rsi,r13
   17f93:	call   cc10 <waitpid@plt>
   17f98:	mov    edi,DWORD PTR [rip+0x26cb3a]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   17f9e:	mov    ebx,eax
   17fa0:	test   edi,edi
   17fa2:	jne    18020 <g_str_equal@plt+0xad60>
   17fa4:	cmp    ebx,0xffffffff
   17fa7:	jne    17f40 <g_str_equal@plt+0xac80>
   17fa9:	call   cc80 <__errno_location@plt>
   17fae:	mov    r8d,DWORD PTR [rax]
   17fb1:	cmp    r8d,0x4
   17fb5:	je     17f76 <g_str_equal@plt+0xacb6>
   17fb7:	movsxd rax,DWORD PTR [rbp+0x58]
   17fbb:	sub    rsp,0x8
   17fbf:	lea    r9,[rip+0x42a99]        # 5aa5f <_fini@@Base+0x830b>
   17fc6:	lea    rcx,[rip+0x42b13]        # 5aae0 <_fini@@Base+0x838c>
   17fcd:	lea    rsi,[rip+0x42874]        # 5a848 <_fini@@Base+0x80f4>
   17fd4:	mov    edx,0xb0
   17fd9:	xor    edi,edi
   17fdb:	push   rax
   17fdc:	xor    eax,eax
   17fde:	call   3a140 <g_str_equal@plt+0x2ce80>
   17fe3:	pop    rax
   17fe4:	pop    rdx
   17fe5:	nop    DWORD PTR [rax]
   17fe8:	mov    rax,QWORD PTR [rsp+0x48]
   17fed:	xor    rax,QWORD PTR fs:0x28
   17ff6:	jne    1814b <g_str_equal@plt+0xae8b>
   17ffc:	add    rsp,0x58
   18000:	pop    rbx
   18001:	pop    rbp
   18002:	pop    r12
   18004:	pop    r13
   18006:	pop    r14
   18008:	pop    r15
   1800a:	ret    
   1800b:	nop    DWORD PTR [rax+rax*1+0x0]
   18010:	mov    esi,0xf
   18015:	call   c9f0 <kill@plt>
   1801a:	jmp    17f68 <g_str_equal@plt+0xaca8>
   1801f:	nop
   18020:	cmp    WORD PTR [rip+0x26ef64],0x0        # 286f8c <stdout@@GLIBC_2.2.5+0x2644>
   18028:	je     17fa4 <g_str_equal@plt+0xace4>
   1802e:	test   BYTE PTR [rip+0x26de6c],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   18035:	je     17fa4 <g_str_equal@plt+0xace4>
   1803b:	mov    r9d,DWORD PTR [rbp+0x58]
   1803f:	xor    esi,esi
   18041:	mov    rdi,r14
   18044:	mov    r15d,DWORD PTR [rsp+0x2c]
   18049:	mov    DWORD PTR [rsp+0x1c],r9d
   1804e:	call   c3e0 <gettimeofday@plt>
   18053:	mov    rcx,QWORD PTR [rsp+0x38]
   18058:	mov    rdx,QWORD PTR [rsp+0x30]
   1805d:	mov    QWORD PTR [rsp+0x10],rcx
   18062:	mov    QWORD PTR [rsp+0x8],rdx
   18067:	call   c5b0 <getpid@plt>
   1806c:	push   r15
   1806e:	push   rbx
   1806f:	lea    rdi,[rip+0x4285a]        # 5a8d0 <_fini@@Base+0x817c>
   18076:	mov    r9d,DWORD PTR [rsp+0x2c]
   1807b:	mov    rcx,QWORD PTR [rsp+0x20]
   18080:	mov    esi,eax
   18082:	mov    rdx,QWORD PTR [rsp+0x18]
   18087:	mov    r8,rbp
   1808a:	xor    eax,eax
   1808c:	call   431a0 <g_str_equal@plt+0x35ee0>
   18091:	pop    rcx
   18092:	pop    rsi
   18093:	jmp    17fa4 <g_str_equal@plt+0xace4>
   18098:	nop    DWORD PTR [rax+rax*1+0x0]
   180a0:	cmp    WORD PTR [rip+0x26eee6],0x0        # 286f8e <stdout@@GLIBC_2.2.5+0x2646>
   180a8:	je     17f89 <g_str_equal@plt+0xacc9>
   180ae:	test   BYTE PTR [rip+0x26ddec],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   180b5:	je     17f89 <g_str_equal@plt+0xacc9>
   180bb:	xor    esi,esi
   180bd:	mov    rdi,r14
   180c0:	call   c3e0 <gettimeofday@plt>
   180c5:	mov    rcx,QWORD PTR [rsp+0x38]
   180ca:	mov    r15,QWORD PTR [rsp+0x30]
   180cf:	mov    QWORD PTR [rsp+0x8],rcx
   180d4:	call   c5b0 <getpid@plt>
   180d9:	mov    rcx,QWORD PTR [rsp+0x8]
   180de:	lea    rdi,[rip+0x427a3]        # 5a888 <_fini@@Base+0x8134>
   180e5:	mov    r9d,ebx
   180e8:	mov    esi,eax
   180ea:	mov    r8,rbp
   180ed:	mov    rdx,r15
   180f0:	xor    eax,eax
   180f2:	call   431a0 <g_str_equal@plt+0x35ee0>
   180f7:	mov    ebx,DWORD PTR [rbp+0x58]
   180fa:	jmp    17f89 <g_str_equal@plt+0xacc9>
   180ff:	nop
   18100:	call   c230 <close@plt>
   18105:	mov    edi,DWORD PTR [rbp+0x50]
   18108:	cmp    edi,0xffffffff
   1810b:	je     17f19 <g_str_equal@plt+0xac59>
   18111:	cmp    edi,DWORD PTR [rbp+0x54]
   18114:	je     17f19 <g_str_equal@plt+0xac59>
   1811a:	jmp    17f14 <g_str_equal@plt+0xac54>
   1811f:	nop
   18120:	lea    r8,[rip+0x42950]        # 5aa77 <_fini@@Base+0x8323>
   18127:	lea    rcx,[rip+0x429b2]        # 5aae0 <_fini@@Base+0x838c>
   1812e:	lea    rsi,[rip+0x42713]        # 5a848 <_fini@@Base+0x80f4>
   18135:	movsxd r9,edi
   18138:	mov    edx,0xbb
   1813d:	xor    edi,edi
   1813f:	xor    eax,eax
   18141:	call   3a090 <g_str_equal@plt+0x2cdd0>
   18146:	jmp    17fe8 <g_str_equal@plt+0xad28>
   1814b:	call   cd30 <__stack_chk_fail@plt>
   18150:	push   r15
   18152:	push   r14
   18154:	push   r13
   18156:	push   r12
   18158:	mov    r13d,edx
   1815b:	push   rbp
   1815c:	push   rbx
   1815d:	mov    ebp,edi
   1815f:	lea    rdi,[rip+0x4287a]        # 5a9e0 <_fini@@Base+0x828c>
   18166:	mov    r12d,esi
   18169:	sub    rsp,0x28
   1816d:	mov    rax,QWORD PTR fs:0x28
   18176:	mov    QWORD PTR [rsp+0x18],rax
   1817b:	xor    eax,eax
   1817d:	call   20420 <g_str_equal@plt+0x13160>
   18182:	lea    r8,[rip+0x42ae7]        # 5ac70 <_fini@@Base+0x851c>
   18189:	lea    rdx,[rip+0x426b8]        # 5a848 <_fini@@Base+0x80f4>
   18190:	lea    rsi,[rip+0x42849]        # 5a9e0 <_fini@@Base+0x828c>
   18197:	mov    ecx,0x24
   1819c:	mov    rdi,rax
   1819f:	call   205c0 <g_str_equal@plt+0x13300>
   181a4:	mov    ecx,DWORD PTR [rip+0x26c92e]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   181aa:	mov    rbx,rax
   181ad:	mov    DWORD PTR [rax+0x54],r12d
   181b1:	mov    DWORD PTR [rax+0x50],ebp
   181b4:	mov    DWORD PTR [rax+0x58],r13d
   181b8:	test   ecx,ecx
   181ba:	jne    181e0 <g_str_equal@plt+0xaf20>
   181bc:	mov    rcx,QWORD PTR [rsp+0x18]
   181c1:	xor    rcx,QWORD PTR fs:0x28
   181ca:	mov    rax,rbx
   181cd:	jne    1822f <g_str_equal@plt+0xaf6f>
   181cf:	add    rsp,0x28
   181d3:	pop    rbx
   181d4:	pop    rbp
   181d5:	pop    r12
   181d7:	pop    r13
   181d9:	pop    r14
   181db:	pop    r15
   181dd:	ret    
   181de:	xchg   ax,ax
   181e0:	cmp    WORD PTR [rip+0x26edaa],0x0        # 286f92 <stdout@@GLIBC_2.2.5+0x264a>
   181e8:	je     181bc <g_str_equal@plt+0xaefc>
   181ea:	test   BYTE PTR [rip+0x26dcb0],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   181f1:	je     181bc <g_str_equal@plt+0xaefc>
   181f3:	mov    rdi,rsp
   181f6:	xor    esi,esi
   181f8:	call   c3e0 <gettimeofday@plt>
   181fd:	mov    r15,QWORD PTR [rsp+0x8]
   18202:	mov    r14,QWORD PTR [rsp]
   18206:	call   c5b0 <getpid@plt>
   1820b:	push   r13
   1820d:	lea    rdi,[rip+0x42714]        # 5a928 <_fini@@Base+0x81d4>
   18214:	push   r12
   18216:	mov    rdx,r14
   18219:	mov    esi,eax
   1821b:	mov    r9d,ebp
   1821e:	mov    r8,rbx
   18221:	mov    rcx,r15
   18224:	xor    eax,eax
   18226:	call   431a0 <g_str_equal@plt+0x35ee0>
   1822b:	pop    rax
   1822c:	pop    rdx
   1822d:	jmp    181bc <g_str_equal@plt+0xaefc>
   1822f:	call   cd30 <__stack_chk_fail@plt>
   18234:	xchg   ax,ax
   18236:	nop    WORD PTR cs:[rax+rax*1+0x0]
   18240:	push   r15
   18242:	push   r14
   18244:	push   r13
   18246:	push   r12
   18248:	mov    r13,rdx
   1824b:	push   rbp
   1824c:	push   rbx
   1824d:	mov    rbx,0xffffffffffffffff
   18254:	mov    r12,rdi
   18257:	sub    rsp,0x38
   1825b:	mov    rax,QWORD PTR fs:0x28
   18264:	mov    QWORD PTR [rsp+0x28],rax
   18269:	xor    eax,eax
   1826b:	and    esi,0x3
   1826e:	mov    QWORD PTR [rsp+0x18],rbx
   18273:	mov    QWORD PTR [rsp+0x20],rbx
   18278:	mov    ebp,esi
   1827a:	je     18330 <g_str_equal@plt+0xb070>
   18280:	cmp    esi,0x1
   18283:	jne    184b0 <g_str_equal@plt+0xb1f0>
   18289:	lea    rdi,[rip+0x42812]        # 5aaa2 <_fini@@Base+0x834e>
   18290:	mov    esi,0x2
   18295:	call   ca20 <open64@plt>
   1829a:	test   eax,eax
   1829c:	mov    ebx,eax
   1829e:	js     18428 <g_str_equal@plt+0xb168>
   182a4:	lea    rdi,[rsp+0x18]
   182a9:	call   c930 <pipe@plt>
   182ae:	test   eax,eax
   182b0:	js     18368 <g_str_equal@plt+0xb0a8>
   182b6:	mov    r15d,0x1
   182bc:	xor    r14d,r14d
   182bf:	mov    rdi,r13
   182c2:	call   38710 <g_str_equal@plt+0x2b450>
   182c7:	test   eax,eax
   182c9:	mov    r13d,eax
   182cc:	js     18394 <g_str_equal@plt+0xb0d4>
   182d2:	je     18534 <g_str_equal@plt+0xb274>
   182d8:	test   r14b,r14b
   182db:	je     18478 <g_str_equal@plt+0xb1b8>
   182e1:	test   r15b,r15b
   182e4:	mov    esi,ebx
   182e6:	je     18460 <g_str_equal@plt+0xb1a0>
   182ec:	mov    edi,ebx
   182ee:	mov    edx,r13d
   182f1:	call   18150 <g_str_equal@plt+0xae90>
   182f6:	mov    ecx,DWORD PTR [rip+0x26c7dc]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   182fc:	mov    rbx,rax
   182ff:	test   ecx,ecx
   18301:	jne    184d0 <g_str_equal@plt+0xb210>
   18307:	mov    rcx,QWORD PTR [rsp+0x28]
   1830c:	xor    rcx,QWORD PTR fs:0x28
   18315:	mov    rax,rbx
   18318:	jne    1852f <g_str_equal@plt+0xb26f>
   1831e:	add    rsp,0x38
   18322:	pop    rbx
   18323:	pop    rbp
   18324:	pop    r12
   18326:	pop    r13
   18328:	pop    r14
   1832a:	pop    r15
   1832c:	ret    
   1832d:	nop    DWORD PTR [rax]
   18330:	lea    rdi,[rip+0x4276b]        # 5aaa2 <_fini@@Base+0x834e>
   18337:	xor    eax,eax
   18339:	mov    esi,0x2
   1833e:	mov    r14d,0x1
   18344:	call   ca20 <open64@plt>
   18349:	test   eax,eax
   1834b:	mov    ebx,eax
   1834d:	js     18428 <g_str_equal@plt+0xb168>
   18353:	lea    rdi,[rsp+0x20]
   18358:	xor    r15d,r15d
   1835b:	call   c930 <pipe@plt>
   18360:	test   eax,eax
   18362:	jns    182bf <g_str_equal@plt+0xafff>
   18368:	call   cc80 <__errno_location@plt>
   1836d:	mov    r8d,DWORD PTR [rax]
   18370:	lea    r9,[rip+0x42735]        # 5aaac <_fini@@Base+0x8358>
   18377:	lea    rcx,[rip+0x428d2]        # 5ac50 <_fini@@Base+0x84fc>
   1837e:	lea    rsi,[rip+0x424c3]        # 5a848 <_fini@@Base+0x80f4>
   18385:	mov    edx,0x51
   1838a:	mov    rdi,r13
   1838d:	xor    eax,eax
   1838f:	call   3a140 <g_str_equal@plt+0x2ce80>
   18394:	cmp    ebx,0xffffffff
   18397:	jne    18410 <g_str_equal@plt+0xb150>
   18399:	mov    edi,DWORD PTR [rsp+0x18]
   1839d:	cmp    edi,0xffffffff
   183a0:	jne    18400 <g_str_equal@plt+0xb140>
   183a2:	mov    edi,DWORD PTR [rsp+0x1c]
   183a6:	cmp    edi,0xffffffff
   183a9:	jne    183f0 <g_str_equal@plt+0xb130>
   183ab:	mov    edi,DWORD PTR [rsp+0x20]
   183af:	cmp    edi,0xffffffff
   183b2:	jne    183d0 <g_str_equal@plt+0xb110>
   183b4:	mov    edi,DWORD PTR [rsp+0x24]
   183b8:	xor    ebx,ebx
   183ba:	cmp    edi,0xffffffff
   183bd:	je     18307 <g_str_equal@plt+0xb047>
   183c3:	call   c230 <close@plt>
   183c8:	jmp    18307 <g_str_equal@plt+0xb047>
   183cd:	nop    DWORD PTR [rax]
   183d0:	call   c230 <close@plt>
   183d5:	mov    edi,DWORD PTR [rsp+0x24]
   183d9:	xor    ebx,ebx
   183db:	cmp    edi,0xffffffff
   183de:	je     18307 <g_str_equal@plt+0xb047>
   183e4:	jmp    183c3 <g_str_equal@plt+0xb103>
   183e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   183f0:	call   c230 <close@plt>
   183f5:	mov    edi,DWORD PTR [rsp+0x20]
   183f9:	cmp    edi,0xffffffff
   183fc:	je     183b4 <g_str_equal@plt+0xb0f4>
   183fe:	jmp    183d0 <g_str_equal@plt+0xb110>
   18400:	call   c230 <close@plt>
   18405:	mov    edi,DWORD PTR [rsp+0x1c]
   18409:	cmp    edi,0xffffffff
   1840c:	je     183ab <g_str_equal@plt+0xb0eb>
   1840e:	jmp    183f0 <g_str_equal@plt+0xb130>
   18410:	mov    edi,ebx
   18412:	call   c230 <close@plt>
   18417:	mov    edi,DWORD PTR [rsp+0x18]
   1841b:	cmp    edi,0xffffffff
   1841e:	je     183a2 <g_str_equal@plt+0xb0e2>
   18420:	jmp    18400 <g_str_equal@plt+0xb140>
   18422:	nop    WORD PTR [rax+rax*1+0x0]
   18428:	call   cc80 <__errno_location@plt>
   1842d:	mov    r8d,DWORD PTR [rax]
   18430:	lea    r9,[rip+0x4265c]        # 5aa93 <_fini@@Base+0x833f>
   18437:	lea    rcx,[rip+0x42812]        # 5ac50 <_fini@@Base+0x84fc>
   1843e:	lea    rsi,[rip+0x42403]        # 5a848 <_fini@@Base+0x80f4>
   18445:	mov    edx,0x49
   1844a:	mov    rdi,r13
   1844d:	xor    eax,eax
   1844f:	call   3a140 <g_str_equal@plt+0x2ce80>
   18454:	jmp    18394 <g_str_equal@plt+0xb0d4>
   18459:	nop    DWORD PTR [rax+0x0]
   18460:	mov    edi,DWORD PTR [rsp+0x24]
   18464:	call   c230 <close@plt>
   18469:	mov    esi,DWORD PTR [rsp+0x20]
   1846d:	jmp    182ec <g_str_equal@plt+0xb02c>
   18472:	nop    WORD PTR [rax+rax*1+0x0]
   18478:	mov    edi,DWORD PTR [rsp+0x18]
   1847c:	call   c230 <close@plt>
   18481:	test   r15b,r15b
   18484:	je     18498 <g_str_equal@plt+0xb1d8>
   18486:	mov    esi,ebx
   18488:	mov    ebx,DWORD PTR [rsp+0x1c]
   1848c:	jmp    182ec <g_str_equal@plt+0xb02c>
   18491:	nop    DWORD PTR [rax+0x0]
   18498:	mov    edi,DWORD PTR [rsp+0x24]
   1849c:	call   c230 <close@plt>
   184a1:	mov    esi,DWORD PTR [rsp+0x20]
   184a5:	jmp    18488 <g_str_equal@plt+0xb1c8>
   184a7:	nop    WORD PTR [rax+rax*1+0x0]
   184b0:	lea    rdi,[rsp+0x18]
   184b5:	call   c930 <pipe@plt>
   184ba:	test   eax,eax
   184bc:	js     18368 <g_str_equal@plt+0xb0a8>
   184c2:	xor    r14d,r14d
   184c5:	jmp    18353 <g_str_equal@plt+0xb093>
   184ca:	nop    WORD PTR [rax+rax*1+0x0]
   184d0:	cmp    WORD PTR [rip+0x26eab8],0x0        # 286f90 <stdout@@GLIBC_2.2.5+0x2648>
   184d8:	je     18307 <g_str_equal@plt+0xb047>
   184de:	test   BYTE PTR [rip+0x26d9bc],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   184e5:	je     18307 <g_str_equal@plt+0xb047>
   184eb:	mov    rdi,rsp
   184ee:	xor    esi,esi
   184f0:	mov    r14,QWORD PTR [r12]
   184f4:	call   c3e0 <gettimeofday@plt>
   184f9:	mov    r13,QWORD PTR [rsp+0x8]
   184fe:	mov    r12,QWORD PTR [rsp]
   18502:	call   c5b0 <getpid@plt>
   18507:	sub    rsp,0x8
   1850b:	lea    rdi,[rip+0x42476]        # 5a988 <_fini@@Base+0x8234>
   18512:	mov    esi,eax
   18514:	push   rbp
   18515:	mov    rdx,r12
   18518:	mov    r9,r14
   1851b:	mov    r8,rbx
   1851e:	mov    rcx,r13
   18521:	xor    eax,eax
   18523:	call   431a0 <g_str_equal@plt+0x35ee0>
   18528:	pop    rax
   18529:	pop    rdx
   1852a:	jmp    18307 <g_str_equal@plt+0xb047>
   1852f:	call   cd30 <__stack_chk_fail@plt>
   18534:	xor    esi,esi
   18536:	test   r14b,r14b
   18539:	jne    1859d <g_str_equal@plt+0xb2dd>
   1853b:	mov    edi,DWORD PTR [rsp+0x18]
   1853f:	call   c160 <dup2@plt>
   18544:	test   r15b,r15b
   18547:	mov    esi,0x1
   1854c:	jne    185b7 <g_str_equal@plt+0xb2f7>
   1854e:	mov    edi,DWORD PTR [rsp+0x24]
   18552:	call   c160 <dup2@plt>
   18557:	mov    edi,DWORD PTR [rsp+0x18]
   1855b:	call   c230 <close@plt>
   18560:	mov    edi,DWORD PTR [rsp+0x1c]
   18564:	call   c230 <close@plt>
   18569:	mov    edi,DWORD PTR [rsp+0x20]
   1856d:	call   c230 <close@plt>
   18572:	mov    edi,DWORD PTR [rsp+0x24]
   18576:	call   c230 <close@plt>
   1857b:	cmp    ebx,0xffffffff
   1857e:	je     18587 <g_str_equal@plt+0xb2c7>
   18580:	mov    edi,ebx
   18582:	call   c230 <close@plt>
   18587:	mov    rdi,QWORD PTR [r12]
   1858b:	mov    rsi,r12
   1858e:	call   c1a0 <execv@plt>
   18593:	mov    edi,0x1
   18598:	call   c4f0 <_exit@plt>
   1859d:	mov    edi,ebx
   1859f:	call   c160 <dup2@plt>
   185a4:	test   r15b,r15b
   185a7:	je     185d2 <g_str_equal@plt+0xb312>
   185a9:	mov    esi,0x1
   185ae:	mov    edi,ebx
   185b0:	call   c160 <dup2@plt>
   185b5:	jmp    1857b <g_str_equal@plt+0xb2bb>
   185b7:	mov    edi,ebx
   185b9:	call   c160 <dup2@plt>
   185be:	mov    edi,DWORD PTR [rsp+0x18]
   185c2:	call   c230 <close@plt>
   185c7:	mov    edi,DWORD PTR [rsp+0x1c]
   185cb:	call   c230 <close@plt>
   185d0:	jmp    1857b <g_str_equal@plt+0xb2bb>
   185d2:	mov    edi,DWORD PTR [rsp+0x24]
   185d6:	mov    esi,0x1
   185db:	call   c160 <dup2@plt>
   185e0:	jmp    18569 <g_str_equal@plt+0xb2a9>
   185e2:	nop    WORD PTR cs:[rax+rax*1+0x0]
   185ec:	nop    DWORD PTR [rax+0x0]
   185f0:	lea    r8,[rip+0x42829]        # 5ae20 <_fini@@Base+0x86cc>
   185f7:	lea    rdx,[rip+0x42692]        # 5ac90 <_fini@@Base+0x853c>
   185fe:	lea    rsi,[rip+0x42795]        # 5ad9a <_fini@@Base+0x8646>
   18605:	sub    rsp,0x8
   18609:	mov    ecx,0x45
   1860e:	call   205c0 <g_str_equal@plt+0x13300>
   18613:	mov    DWORD PTR [rax+0x50],0xffffffff
   1861a:	add    rsp,0x8
   1861e:	ret    
   1861f:	nop
   18620:	lea    rdi,[rip+0x267e79]        # 2804a0 <_fini@@Base+0x22dd4c>
   18627:	jmp    202f0 <g_str_equal@plt+0x13030>
   1862c:	nop    DWORD PTR [rax+0x0]
   18630:	lea    rdx,[rip+0x42659]        # 5ac90 <_fini@@Base+0x853c>
   18637:	lea    rsi,[rip+0x3a659]        # 52c97 <_fini@@Base+0x543>
   1863e:	lea    r8,[rip+0x4290b]        # 5af50 <_fini@@Base+0x87fc>
   18645:	sub    rsp,0x8
   18649:	mov    ecx,0xd0
   1864e:	call   20770 <g_str_equal@plt+0x134b0>
   18653:	lea    rdx,[rip+0x256]        # 188b0 <g_str_equal@plt+0xb5f0>
   1865a:	lea    rcx,[rip+0x17f]        # 187e0 <g_str_equal@plt+0xb520>
   18661:	lea    rsi,[rip+0x128]        # 18790 <g_str_equal@plt+0xb4d0>
   18668:	lea    rdi,[rip+0x41]        # 186b0 <g_str_equal@plt+0xb3f0>
   1866f:	mov    QWORD PTR [rax+0x60],rdx
   18673:	mov    QWORD PTR [rax+0x68],rcx
   18677:	lea    rdx,[rip+0x382]        # 18a00 <g_str_equal@plt+0xb740>
   1867e:	mov    QWORD PTR [rax+0x80],rsi
   18685:	lea    rcx,[rip+0x2f4]        # 18980 <g_str_equal@plt+0xb6c0>
   1868c:	lea    rsi,[rip+0x7d]        # 18710 <g_str_equal@plt+0xb450>
   18693:	mov    QWORD PTR [rax+0xa0],rdx
   1869a:	mov    QWORD PTR [rax+0xa8],rdi
   186a1:	mov    QWORD PTR [rax+0x70],rcx
   186a5:	mov    QWORD PTR [rax+0x78],rsi
   186a9:	add    rsp,0x8
   186ad:	ret    
   186ae:	xchg   ax,ax
   186b0:	push   r13
   186b2:	push   r12
   186b4:	mov    r13,r8
   186b7:	push   rbp
   186b8:	push   rbx
   186b9:	mov    rbp,rdx
   186bc:	mov    rbx,rsi
   186bf:	lea    r8,[rip+0x4285a]        # 5af20 <_fini@@Base+0x87cc>
   186c6:	lea    rdx,[rip+0x425c3]        # 5ac90 <_fini@@Base+0x853c>
   186cd:	lea    rsi,[rip+0x426c6]        # 5ad9a <_fini@@Base+0x8646>
   186d4:	sub    rsp,0x8
   186d8:	mov    r12,rcx
   186db:	mov    ecx,0xc0
   186e0:	call   205c0 <g_str_equal@plt+0x13300>
   186e5:	sub    rsp,0x8
   186e9:	mov    esi,DWORD PTR [rax+0x50]
   186ec:	mov    r8,r12
   186ef:	push   r13
   186f1:	mov    rcx,rbp
   186f4:	mov    rdi,rbx
   186f7:	xor    r9d,r9d
   186fa:	xor    edx,edx
   186fc:	call   36920 <g_str_equal@plt+0x29660>
   18701:	add    rsp,0x18
   18705:	pop    rbx
   18706:	pop    rbp
   18707:	pop    r12
   18709:	pop    r13
   1870b:	ret    
   1870c:	nop    DWORD PTR [rax+0x0]
   18710:	push   rbp
   18711:	push   rbx
   18712:	mov    ebp,esi
   18714:	lea    rdx,[rip+0x42575]        # 5ac90 <_fini@@Base+0x853c>
   1871b:	lea    rsi,[rip+0x42678]        # 5ad9a <_fini@@Base+0x8646>
   18722:	lea    r8,[rip+0x427d7]        # 5af00 <_fini@@Base+0x87ac>
   18729:	sub    rsp,0x8
   1872d:	mov    ecx,0xc7
   18732:	mov    rbx,rdi
   18735:	call   205c0 <g_str_equal@plt+0x13300>
   1873a:	mov    esi,DWORD PTR [rax+0x50]
   1873d:	add    rsp,0x8
   18741:	mov    edx,ebp
   18743:	mov    rdi,rbx
   18746:	pop    rbx
   18747:	pop    rbp
   18748:	jmp    1b440 <g_str_equal@plt+0xe180>
   1874d:	nop    DWORD PTR [rax]
   18750:	push   rbx
   18751:	lea    r8,[rip+0x426e8]        # 5ae40 <_fini@@Base+0x86ec>
   18758:	lea    rdx,[rip+0x42531]        # 5ac90 <_fini@@Base+0x853c>
   1875f:	lea    rsi,[rip+0x42634]        # 5ad9a <_fini@@Base+0x8646>
   18766:	mov    ecx,0x4b
   1876b:	call   205c0 <g_str_equal@plt+0x13300>
   18770:	mov    edi,DWORD PTR [rax+0x50]
   18773:	cmp    edi,0xffffffff
   18776:	je     18787 <g_str_equal@plt+0xb4c7>
   18778:	mov    rbx,rax
   1877b:	call   32460 <g_str_equal@plt+0x251a0>
   18780:	mov    DWORD PTR [rbx+0x50],0xffffffff
   18787:	pop    rbx
   18788:	ret    
   18789:	nop    DWORD PTR [rax+0x0]
   18790:	push   rbx
   18791:	lea    r8,[rip+0x42708]        # 5aea0 <_fini@@Base+0x874c>
   18798:	mov    ebx,esi
   1879a:	lea    rdx,[rip+0x424ef]        # 5ac90 <_fini@@Base+0x853c>
   187a1:	lea    rsi,[rip+0x425f2]        # 5ad9a <_fini@@Base+0x8646>
   187a8:	mov    ecx,0x8d
   187ad:	call   205c0 <g_str_equal@plt+0x13300>
   187b2:	test   bl,bl
   187b4:	mov    edi,DWORD PTR [rax+0x50]
   187b7:	jne    187c8 <g_str_equal@plt+0xb508>
   187b9:	call   38110 <g_str_equal@plt+0x2ae50>
   187be:	xor    eax,eax
   187c0:	pop    rbx
   187c1:	ret    
   187c2:	nop    WORD PTR [rax+rax*1+0x0]
   187c8:	call   380e0 <g_str_equal@plt+0x2ae20>
   187cd:	xor    eax,eax
   187cf:	pop    rbx
   187d0:	ret    
   187d1:	nop    DWORD PTR [rax+rax*1+0x0]
   187d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   187e0:	push   r13
   187e2:	push   r12
   187e4:	lea    r8,[rip+0x42695]        # 5ae80 <_fini@@Base+0x872c>
   187eb:	push   rbp
   187ec:	push   rbx
   187ed:	mov    r12,rsi
   187f0:	mov    rbx,rdx
   187f3:	lea    rsi,[rip+0x425a0]        # 5ad9a <_fini@@Base+0x8646>
   187fa:	lea    rdx,[rip+0x4248f]        # 5ac90 <_fini@@Base+0x853c>
   18801:	sub    rsp,0x8
   18805:	mov    ecx,0x5a
   1880a:	mov    r13,r9
   1880d:	call   205c0 <g_str_equal@plt+0x13300>
   18812:	mov    rbp,rax
   18815:	jmp    18834 <g_str_equal@plt+0xb574>
   18817:	nop    WORD PTR [rax+rax*1+0x0]
   18820:	call   cc80 <__errno_location@plt>
   18825:	mov    r8d,DWORD PTR [rax]
   18828:	cmp    r8d,0xb
   1882c:	je     18858 <g_str_equal@plt+0xb598>
   1882e:	cmp    r8d,0x4
   18832:	jne    18870 <g_str_equal@plt+0xb5b0>
   18834:	mov    edi,DWORD PTR [rbp+0x50]
   18837:	mov    edx,ebx
   18839:	mov    rsi,r12
   1883c:	call   d1e0 <readv@plt>
   18841:	test   rax,rax
   18844:	js     18820 <g_str_equal@plt+0xb560>
   18846:	add    rsp,0x8
   1884a:	pop    rbx
   1884b:	pop    rbp
   1884c:	pop    r12
   1884e:	pop    r13
   18850:	ret    
   18851:	nop    DWORD PTR [rax+0x0]
   18858:	add    rsp,0x8
   1885c:	mov    rax,0xfffffffffffffffe
   18863:	pop    rbx
   18864:	pop    rbp
   18865:	pop    r12
   18867:	pop    r13
   18869:	ret    
   1886a:	nop    WORD PTR [rax+rax*1+0x0]
   18870:	lea    r9,[rip+0x42534]        # 5adab <_fini@@Base+0x8657>
   18877:	lea    rcx,[rip+0x42602]        # 5ae80 <_fini@@Base+0x872c>
   1887e:	lea    rsi,[rip+0x4240b]        # 5ac90 <_fini@@Base+0x853c>
   18885:	mov    rdi,r13
   18888:	xor    eax,eax
   1888a:	mov    edx,0x68
   1888f:	call   3a140 <g_str_equal@plt+0x2ce80>
   18894:	add    rsp,0x8
   18898:	mov    rax,0xffffffffffffffff
   1889f:	pop    rbx
   188a0:	pop    rbp
   188a1:	pop    r12
   188a3:	pop    r13
   188a5:	ret    
   188a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   188b0:	push   r13
   188b2:	push   r12
   188b4:	lea    r8,[rip+0x425a5]        # 5ae60 <_fini@@Base+0x870c>
   188bb:	push   rbp
   188bc:	push   rbx
   188bd:	mov    r12,rsi
   188c0:	mov    rbx,rdx
   188c3:	lea    rsi,[rip+0x424d0]        # 5ad9a <_fini@@Base+0x8646>
   188ca:	lea    rdx,[rip+0x423bf]        # 5ac90 <_fini@@Base+0x853c>
   188d1:	sub    rsp,0x8
   188d5:	mov    ecx,0x76
   188da:	mov    r13,r9
   188dd:	call   205c0 <g_str_equal@plt+0x13300>
   188e2:	mov    rbp,rax
   188e5:	jmp    18904 <g_str_equal@plt+0xb644>
   188e7:	nop    WORD PTR [rax+rax*1+0x0]
   188f0:	call   cc80 <__errno_location@plt>
   188f5:	mov    r8d,DWORD PTR [rax]
   188f8:	cmp    r8d,0xb
   188fc:	je     18928 <g_str_equal@plt+0xb668>
   188fe:	cmp    r8d,0x4
   18902:	jne    18940 <g_str_equal@plt+0xb680>
   18904:	mov    edi,DWORD PTR [rbp+0x50]
   18907:	mov    edx,ebx
   18909:	mov    rsi,r12
   1890c:	call   ce90 <writev@plt>
   18911:	test   rax,rax
   18914:	jle    188f0 <g_str_equal@plt+0xb630>
   18916:	add    rsp,0x8
   1891a:	pop    rbx
   1891b:	pop    rbp
   1891c:	pop    r12
   1891e:	pop    r13
   18920:	ret    
   18921:	nop    DWORD PTR [rax+0x0]
   18928:	add    rsp,0x8
   1892c:	mov    rax,0xfffffffffffffffe
   18933:	pop    rbx
   18934:	pop    rbp
   18935:	pop    r12
   18937:	pop    r13
   18939:	ret    
   1893a:	nop    WORD PTR [rax+rax*1+0x0]
   18940:	lea    r9,[rip+0x4247d]        # 5adc4 <_fini@@Base+0x8670>
   18947:	lea    rcx,[rip+0x42512]        # 5ae60 <_fini@@Base+0x870c>
   1894e:	lea    rsi,[rip+0x4233b]        # 5ac90 <_fini@@Base+0x853c>
   18955:	mov    rdi,r13
   18958:	xor    eax,eax
   1895a:	mov    edx,0x83
   1895f:	call   3a140 <g_str_equal@plt+0x2ce80>
   18964:	add    rsp,0x8
   18968:	mov    rax,0xffffffffffffffff
   1896f:	pop    rbx
   18970:	pop    rbp
   18971:	pop    r12
   18973:	pop    r13
   18975:	ret    
   18976:	nop    WORD PTR cs:[rax+rax*1+0x0]
   18980:	push   rbp
   18981:	push   rbx
   18982:	lea    r8,[rip+0x42557]        # 5aee0 <_fini@@Base+0x878c>
   18989:	lea    rdx,[rip+0x42300]        # 5ac90 <_fini@@Base+0x853c>
   18990:	mov    rbp,rsi
   18993:	lea    rsi,[rip+0x42400]        # 5ad9a <_fini@@Base+0x8646>
   1899a:	sub    rsp,0x8
   1899e:	mov    ecx,0xae
   189a3:	call   205c0 <g_str_equal@plt+0x13300>
   189a8:	mov    edi,DWORD PTR [rax+0x50]
   189ab:	mov    rbx,rax
   189ae:	call   32460 <g_str_equal@plt+0x251a0>
   189b3:	test   eax,eax
   189b5:	js     189c7 <g_str_equal@plt+0xb707>
   189b7:	mov    DWORD PTR [rbx+0x50],0xffffffff
   189be:	xor    eax,eax
   189c0:	add    rsp,0x8
   189c4:	pop    rbx
   189c5:	pop    rbp
   189c6:	ret    
   189c7:	call   cc80 <__errno_location@plt>
   189cc:	mov    r8d,DWORD PTR [rax]
   189cf:	lea    r9,[rip+0x42406]        # 5addc <_fini@@Base+0x8688>
   189d6:	lea    rcx,[rip+0x42503]        # 5aee0 <_fini@@Base+0x878c>
   189dd:	lea    rsi,[rip+0x422ac]        # 5ac90 <_fini@@Base+0x853c>
   189e4:	xor    eax,eax
   189e6:	mov    edx,0xb2
   189eb:	mov    rdi,rbp
   189ee:	call   3a140 <g_str_equal@plt+0x2ce80>
   189f3:	mov    eax,0xffffffff
   189f8:	jmp    189c0 <g_str_equal@plt+0xb700>
   189fa:	nop    WORD PTR [rax+rax*1+0x0]
   18a00:	push   r13
   18a02:	push   r12
   18a04:	lea    r8,[rip+0x424b5]        # 5aec0 <_fini@@Base+0x876c>
   18a0b:	push   rbp
   18a0c:	push   rbx
   18a0d:	mov    rbp,rsi
   18a10:	mov    r12d,edx
   18a13:	lea    rsi,[rip+0x42380]        # 5ad9a <_fini@@Base+0x8646>
   18a1a:	lea    rdx,[rip+0x4226f]        # 5ac90 <_fini@@Base+0x853c>
   18a21:	sub    rsp,0x8
   18a25:	mov    r13,rcx
   18a28:	mov    ecx,0x9d
   18a2d:	call   205c0 <g_str_equal@plt+0x13300>
   18a32:	mov    edi,DWORD PTR [rax+0x50]
   18a35:	mov    edx,r12d
   18a38:	mov    rsi,rbp
   18a3b:	call   cf00 <lseek64@plt>
   18a40:	cmp    rax,0xffffffffffffffff
   18a44:	mov    rbx,rax
   18a47:	je     18a57 <g_str_equal@plt+0xb797>
   18a49:	add    rsp,0x8
   18a4d:	mov    rax,rbx
   18a50:	pop    rbx
   18a51:	pop    rbp
   18a52:	pop    r12
   18a54:	pop    r13
   18a56:	ret    
   18a57:	call   cc80 <__errno_location@plt>
   18a5c:	push   r12
   18a5e:	push   rbp
   18a5f:	lea    r9,[rip+0x4226a]        # 5acd0 <_fini@@Base+0x857c>
   18a66:	mov    r8d,DWORD PTR [rax]
   18a69:	lea    rcx,[rip+0x42450]        # 5aec0 <_fini@@Base+0x876c>
   18a70:	lea    rsi,[rip+0x42219]        # 5ac90 <_fini@@Base+0x853c>
   18a77:	mov    edx,0xa4
   18a7c:	xor    eax,eax
   18a7e:	mov    rdi,r13
   18a81:	call   3a140 <g_str_equal@plt+0x2ce80>
   18a86:	pop    rax
   18a87:	pop    rdx
   18a88:	jmp    18a49 <g_str_equal@plt+0xb789>
   18a8a:	nop    WORD PTR [rax+rax*1+0x0]
   18a90:	push   r13
   18a92:	push   r12
   18a94:	push   rbp
   18a95:	push   rbx
   18a96:	mov    ebp,edi
   18a98:	lea    rdi,[rip+0x422fb]        # 5ad9a <_fini@@Base+0x8646>
   18a9f:	sub    rsp,0x28
   18aa3:	mov    rax,QWORD PTR fs:0x28
   18aac:	mov    QWORD PTR [rsp+0x18],rax
   18ab1:	xor    eax,eax
   18ab3:	call   20420 <g_str_equal@plt+0x13160>
   18ab8:	lea    r8,[rip+0x424d1]        # 5af90 <_fini@@Base+0x883c>
   18abf:	lea    rdx,[rip+0x421ca]        # 5ac90 <_fini@@Base+0x853c>
   18ac6:	lea    rsi,[rip+0x422cd]        # 5ad9a <_fini@@Base+0x8646>
   18acd:	mov    ecx,0x21
   18ad2:	mov    rdi,rax
   18ad5:	call   205c0 <g_str_equal@plt+0x13300>
   18ada:	mov    rbx,rax
   18add:	mov    DWORD PTR [rax+0x50],ebp
   18ae0:	mov    eax,DWORD PTR [rip+0x26bff2]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   18ae6:	test   eax,eax
   18ae8:	jne    18b10 <g_str_equal@plt+0xb850>
   18aea:	mov    rdx,QWORD PTR [rsp+0x18]
   18aef:	xor    rdx,QWORD PTR fs:0x28
   18af8:	mov    rax,rbx
   18afb:	jne    18b59 <g_str_equal@plt+0xb899>
   18afd:	add    rsp,0x28
   18b01:	pop    rbx
   18b02:	pop    rbp
   18b03:	pop    r12
   18b05:	pop    r13
   18b07:	ret    
   18b08:	nop    DWORD PTR [rax+rax*1+0x0]
   18b10:	cmp    WORD PTR [rip+0x26e4a8],0x0        # 286fc0 <stdout@@GLIBC_2.2.5+0x2678>
   18b18:	je     18aea <g_str_equal@plt+0xb82a>
   18b1a:	test   BYTE PTR [rip+0x26d380],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   18b21:	je     18aea <g_str_equal@plt+0xb82a>
   18b23:	mov    rdi,rsp
   18b26:	xor    esi,esi
   18b28:	call   c3e0 <gettimeofday@plt>
   18b2d:	mov    r13,QWORD PTR [rsp+0x8]
   18b32:	mov    r12,QWORD PTR [rsp]
   18b36:	call   c5b0 <getpid@plt>
   18b3b:	lea    rdi,[rip+0x421be]        # 5ad00 <_fini@@Base+0x85ac>
   18b42:	mov    esi,eax
   18b44:	mov    r9d,ebp
   18b47:	mov    r8,rbx
   18b4a:	mov    rcx,r13
   18b4d:	mov    rdx,r12
   18b50:	xor    eax,eax
   18b52:	call   431a0 <g_str_equal@plt+0x35ee0>
   18b57:	jmp    18aea <g_str_equal@plt+0xb82a>
   18b59:	call   cd30 <__stack_chk_fail@plt>
   18b5e:	xchg   ax,ax
   18b60:	push   r15
   18b62:	push   r14
   18b64:	mov    r15,rcx
   18b67:	push   r13
   18b69:	push   r12
   18b6b:	mov    r12,rdi
   18b6e:	push   rbp
   18b6f:	push   rbx
   18b70:	lea    rdi,[rip+0x42223]        # 5ad9a <_fini@@Base+0x8646>
   18b77:	mov    r13d,esi
   18b7a:	mov    r14d,edx
   18b7d:	sub    rsp,0x38
   18b81:	mov    rax,QWORD PTR fs:0x28
   18b8a:	mov    QWORD PTR [rsp+0x28],rax
   18b8f:	xor    eax,eax
   18b91:	call   20420 <g_str_equal@plt+0x13160>
   18b96:	lea    r8,[rip+0x423d3]        # 5af70 <_fini@@Base+0x881c>
   18b9d:	lea    rdx,[rip+0x420ec]        # 5ac90 <_fini@@Base+0x853c>
   18ba4:	lea    rsi,[rip+0x421ef]        # 5ad9a <_fini@@Base+0x8646>
   18bab:	mov    ecx,0x33
   18bb0:	mov    rdi,rax
   18bb3:	call   205c0 <g_str_equal@plt+0x13300>
   18bb8:	mov    edx,r14d
   18bbb:	mov    rbx,rax
   18bbe:	mov    esi,r13d
   18bc1:	xor    eax,eax
   18bc3:	mov    rdi,r12
   18bc6:	call   32230 <g_str_equal@plt+0x24f70>
   18bcb:	test   eax,eax
   18bcd:	mov    DWORD PTR [rbx+0x50],eax
   18bd0:	js     18c78 <g_str_equal@plt+0xb9b8>
   18bd6:	mov    edx,DWORD PTR [rip+0x26befc]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   18bdc:	test   edx,edx
   18bde:	jne    18c10 <g_str_equal@plt+0xb950>
   18be0:	mov    rcx,QWORD PTR [rsp+0x28]
   18be5:	xor    rcx,QWORD PTR fs:0x28
   18bee:	mov    rax,rbx
   18bf1:	jne    18cbb <g_str_equal@plt+0xb9fb>
   18bf7:	add    rsp,0x38
   18bfb:	pop    rbx
   18bfc:	pop    rbp
   18bfd:	pop    r12
   18bff:	pop    r13
   18c01:	pop    r14
   18c03:	pop    r15
   18c05:	ret    
   18c06:	nop    WORD PTR cs:[rax+rax*1+0x0]
   18c10:	cmp    WORD PTR [rip+0x26e3a6],0x0        # 286fbe <stdout@@GLIBC_2.2.5+0x2676>
   18c18:	je     18be0 <g_str_equal@plt+0xb920>
   18c1a:	test   BYTE PTR [rip+0x26d280],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   18c21:	je     18be0 <g_str_equal@plt+0xb920>
   18c23:	lea    rdi,[rsp+0x10]
   18c28:	xor    esi,esi
   18c2a:	mov    ebp,eax
   18c2c:	call   c3e0 <gettimeofday@plt>
   18c31:	mov    rcx,QWORD PTR [rsp+0x18]
   18c36:	mov    r15,QWORD PTR [rsp+0x10]
   18c3b:	mov    QWORD PTR [rsp+0x8],rcx
   18c40:	call   c5b0 <getpid@plt>
   18c45:	sub    rsp,0x8
   18c49:	lea    rdi,[rip+0x420f0]        # 5ad40 <_fini@@Base+0x85ec>
   18c50:	mov    esi,eax
   18c52:	push   rbp
   18c53:	push   r14
   18c55:	mov    r9,r12
   18c58:	push   r13
   18c5a:	mov    rcx,QWORD PTR [rsp+0x28]
   18c5f:	mov    r8,rbx
   18c62:	mov    rdx,r15
   18c65:	xor    eax,eax
   18c67:	call   431a0 <g_str_equal@plt+0x35ee0>
   18c6c:	add    rsp,0x20
   18c70:	jmp    18be0 <g_str_equal@plt+0xb920>
   18c75:	nop    DWORD PTR [rax]
   18c78:	mov    rdi,rbx
   18c7b:	xor    ebx,ebx
   18c7d:	call   20b90 <g_str_equal@plt+0x138d0>
   18c82:	call   cc80 <__errno_location@plt>
   18c87:	sub    rsp,0x8
   18c8b:	lea    rcx,[rip+0x422de]        # 5af70 <_fini@@Base+0x881c>
   18c92:	lea    rsi,[rip+0x41ff7]        # 5ac90 <_fini@@Base+0x853c>
   18c99:	push   r12
   18c9b:	mov    r8d,DWORD PTR [rax]
   18c9e:	lea    r9,[rip+0x4214c]        # 5adf1 <_fini@@Base+0x869d>
   18ca5:	mov    edx,0x39
   18caa:	mov    rdi,r15
   18cad:	xor    eax,eax
   18caf:	call   3a140 <g_str_equal@plt+0x2ce80>
   18cb4:	pop    rcx
   18cb5:	pop    rsi
   18cb6:	jmp    18be0 <g_str_equal@plt+0xb920>
   18cbb:	call   cd30 <__stack_chk_fail@plt>
   18cc0:	lea    r8,[rip+0x429d9]        # 5b6a0 <_fini@@Base+0x8f4c>
   18cc7:	lea    rdx,[rip+0x422da]        # 5afa8 <_fini@@Base+0x8854>
   18cce:	lea    rsi,[rip+0x39faf]        # 52c84 <_fini@@Base+0x530>
   18cd5:	sub    rsp,0x8
   18cd9:	mov    ecx,0x17e
   18cde:	call   205c0 <g_str_equal@plt+0x13300>
   18ce3:	mov    DWORD PTR [rax+0x50],0xffffffff
   18cea:	add    rsp,0x8
   18cee:	ret    
   18cef:	nop
   18cf0:	push   r14
   18cf2:	push   r13
   18cf4:	mov    r13,rdx
   18cf7:	push   r12
   18cf9:	push   rbp
   18cfa:	push   rbx
   18cfb:	mov    r12d,DWORD PTR [rdi+0x50]
   18cff:	cmp    r12d,0xffffffff
   18d03:	jne    18e30 <g_str_equal@plt+0xbb70>
   18d09:	lea    rbp,[rdi+0xe0]
   18d10:	mov    rbx,rdi
   18d13:	mov    r14d,esi
   18d16:	lea    rdx,[rdi+0x160]
   18d1d:	mov    DWORD PTR [rbx+0x50],esi
   18d20:	mov    DWORD PTR [rdi+0x160],0x80
   18d2a:	mov    DWORD PTR [rdi+0xd8],0x80
   18d34:	mov    rsi,rbp
   18d37:	mov    edi,r14d
   18d3a:	call   c350 <getpeername@plt>
   18d3f:	test   eax,eax
   18d41:	jns    18d91 <g_str_equal@plt+0xbad1>
   18d43:	call   cc80 <__errno_location@plt>
   18d48:	mov    r8d,DWORD PTR [rax]
   18d4b:	cmp    r8d,0x6b
   18d4f:	jne    18e00 <g_str_equal@plt+0xbb40>
   18d55:	lea    rdi,[rbx+0xe8]
   18d5c:	xor    eax,eax
   18d5e:	mov    QWORD PTR [rbx+0xe0],0x0
   18d69:	mov    QWORD PTR [rbx+0x158],0x0
   18d74:	and    rdi,0xfffffffffffffff8
   18d78:	sub    rbp,rdi
   18d7b:	lea    ecx,[rbp+0x80]
   18d81:	shr    ecx,0x3
   18d84:	rep stos QWORD PTR es:[rdi],rax
   18d87:	mov    DWORD PTR [rbx+0x160],0x80
   18d91:	lea    rsi,[rbx+0x58]
   18d95:	lea    rdx,[rbx+0xd8]
   18d9c:	mov    edi,r14d
   18d9f:	call   cb10 <getsockname@plt>
   18da4:	test   eax,eax
   18da6:	js     18e5f <g_str_equal@plt+0xbb9f>
   18dac:	xor    r12d,r12d
   18daf:	cmp    WORD PTR [rbx+0x58],0x1
   18db4:	je     18dc8 <g_str_equal@plt+0xbb08>
   18db6:	pop    rbx
   18db7:	mov    eax,r12d
   18dba:	pop    rbp
   18dbb:	pop    r12
   18dbd:	pop    r13
   18dbf:	pop    r14
   18dc1:	ret    
   18dc2:	nop    WORD PTR [rax+rax*1+0x0]
   18dc8:	lea    r8,[rip+0x42b41]        # 5b910 <_fini@@Base+0x91bc>
   18dcf:	lea    rdx,[rip+0x421d2]        # 5afa8 <_fini@@Base+0x8854>
   18dd6:	lea    rsi,[rip+0x39eba]        # 52c97 <_fini@@Base+0x543>
   18ddd:	mov    rdi,rbx
   18de0:	mov    ecx,0x6b
   18de5:	call   205c0 <g_str_equal@plt+0x13300>
   18dea:	xor    esi,esi
   18dec:	mov    rdi,rax
   18def:	call   16870 <g_str_equal@plt+0x95b0>
   18df4:	pop    rbx
   18df5:	mov    eax,r12d
   18df8:	pop    rbp
   18df9:	pop    r12
   18dfb:	pop    r13
   18dfd:	pop    r14
   18dff:	ret    
   18e00:	lea    r9,[rip+0x421e1]        # 5afe8 <_fini@@Base+0x8894>
   18e07:	lea    rcx,[rip+0x42b02]        # 5b910 <_fini@@Base+0x91bc>
   18e0e:	lea    rsi,[rip+0x42193]        # 5afa8 <_fini@@Base+0x8854>
   18e15:	mov    edx,0x5d
   18e1a:	mov    rdi,r13
   18e1d:	xor    eax,eax
   18e1f:	call   3a140 <g_str_equal@plt+0x2ce80>
   18e24:	mov    DWORD PTR [rbx+0x50],0xffffffff
   18e2b:	jmp    18db6 <g_str_equal@plt+0xbaf6>
   18e2d:	nop    DWORD PTR [rax]
   18e30:	lea    r8,[rip+0x42796]        # 5b5cd <_fini@@Base+0x8e79>
   18e37:	lea    rcx,[rip+0x42ad2]        # 5b910 <_fini@@Base+0x91bc>
   18e3e:	lea    rsi,[rip+0x42163]        # 5afa8 <_fini@@Base+0x8854>
   18e45:	mov    edx,0x4d
   18e4a:	mov    rdi,r13
   18e4d:	xor    eax,eax
   18e4f:	call   3a090 <g_str_equal@plt+0x2cdd0>
   18e54:	mov    r12d,0xffffffff
   18e5a:	jmp    18db6 <g_str_equal@plt+0xbaf6>
   18e5f:	call   cc80 <__errno_location@plt>
   18e64:	mov    r8d,DWORD PTR [rax]
   18e67:	lea    r9,[rip+0x421a2]        # 5b010 <_fini@@Base+0x88bc>
   18e6e:	lea    rcx,[rip+0x42a9b]        # 5b910 <_fini@@Base+0x91bc>
   18e75:	lea    rsi,[rip+0x4212c]        # 5afa8 <_fini@@Base+0x8854>
   18e7c:	mov    edx,0x65
   18e81:	mov    rdi,r13
   18e84:	xor    eax,eax
   18e86:	call   3a140 <g_str_equal@plt+0x2ce80>
   18e8b:	jmp    18e24 <g_str_equal@plt+0xbb64>
   18e8d:	nop    DWORD PTR [rax]
   18e90:	push   rbx
   18e91:	mov    rbx,rdi
   18e94:	mov    rdi,QWORD PTR [rdi]
   18e97:	call   24660 <g_str_equal@plt+0x173a0>
   18e9c:	mov    rdi,QWORD PTR [rbx+0x8]
   18ea0:	call   24660 <g_str_equal@plt+0x173a0>
   18ea5:	mov    rdi,rbx
   18ea8:	pop    rbx
   18ea9:	jmp    d2b0 <g_free@plt>
   18eae:	xchg   ax,ax
   18eb0:	lea    rdi,[rip+0x267669]        # 280520 <_fini@@Base+0x22ddcc>
   18eb7:	jmp    202f0 <g_str_equal@plt+0x13030>
   18ebc:	nop    DWORD PTR [rax+0x0]
   18ec0:	lea    rdx,[rip+0x420e1]        # 5afa8 <_fini@@Base+0x8854>
   18ec7:	lea    rsi,[rip+0x39dc9]        # 52c97 <_fini@@Base+0x543>
   18ece:	lea    r8,[rip+0x4293b]        # 5b810 <_fini@@Base+0x90bc>
   18ed5:	sub    rsp,0x8
   18ed9:	mov    ecx,0x303
   18ede:	call   20770 <g_str_equal@plt+0x134b0>
   18ee3:	lea    rdx,[rip+0x736]        # 19620 <g_str_equal@plt+0xc360>
   18eea:	lea    rcx,[rip+0x47f]        # 19370 <g_str_equal@plt+0xc0b0>
   18ef1:	lea    rsi,[rip+0x2d8]        # 191d0 <g_str_equal@plt+0xbf10>
   18ef8:	lea    rdi,[rip+0x101]        # 19000 <g_str_equal@plt+0xbd40>
   18eff:	mov    QWORD PTR [rax+0x60],rdx
   18f03:	mov    QWORD PTR [rax+0x68],rcx
   18f07:	lea    rdx,[rip+0x1a2]        # 190b0 <g_str_equal@plt+0xbdf0>
   18f0e:	lea    rcx,[rip+0x3cb]        # 192e0 <g_str_equal@plt+0xc020>
   18f15:	mov    QWORD PTR [rax+0x80],rsi
   18f1c:	lea    rsi,[rip+0x15d]        # 19080 <g_str_equal@plt+0xbdc0>
   18f23:	mov    QWORD PTR [rax+0x70],rdx
   18f27:	lea    rdx,[rip+0x92]        # 18fc0 <g_str_equal@plt+0xbd00>
   18f2e:	mov    QWORD PTR [rax+0x98],rdi
   18f35:	mov    QWORD PTR [rax+0x88],rcx
   18f3c:	lea    rcx,[rip+0x1d]        # 18f60 <g_str_equal@plt+0xbca0>
   18f43:	mov    QWORD PTR [rax+0x90],rsi
   18f4a:	mov    QWORD PTR [rax+0x78],rdx
   18f4e:	mov    QWORD PTR [rax+0xa8],rcx
   18f55:	add    rsp,0x8
   18f59:	ret    
   18f5a:	nop    WORD PTR [rax+rax*1+0x0]
   18f60:	push   r13
   18f62:	push   r12
   18f64:	mov    r13,r8
   18f67:	push   rbp
   18f68:	push   rbx
   18f69:	mov    rbp,rdx
   18f6c:	mov    rbx,rsi
   18f6f:	lea    r8,[rip+0x4286a]        # 5b7e0 <_fini@@Base+0x908c>
   18f76:	lea    rdx,[rip+0x4202b]        # 5afa8 <_fini@@Base+0x8854>
   18f7d:	lea    rsi,[rip+0x39d00]        # 52c84 <_fini@@Base+0x530>
   18f84:	sub    rsp,0x8
   18f88:	mov    r12,rcx
   18f8b:	mov    ecx,0x2f3
   18f90:	call   205c0 <g_str_equal@plt+0x13300>
   18f95:	sub    rsp,0x8
   18f99:	mov    esi,DWORD PTR [rax+0x50]
   18f9c:	mov    r8,r12
   18f9f:	push   r13
   18fa1:	mov    rcx,rbp
   18fa4:	mov    rdi,rbx
   18fa7:	xor    r9d,r9d
   18faa:	xor    edx,edx
   18fac:	call   36920 <g_str_equal@plt+0x29660>
   18fb1:	add    rsp,0x18
   18fb5:	pop    rbx
   18fb6:	pop    rbp
   18fb7:	pop    r12
   18fb9:	pop    r13
   18fbb:	ret    
   18fbc:	nop    DWORD PTR [rax+0x0]
   18fc0:	push   rbp
   18fc1:	push   rbx
   18fc2:	mov    ebp,esi
   18fc4:	lea    rdx,[rip+0x41fdd]        # 5afa8 <_fini@@Base+0x8854>
   18fcb:	lea    rsi,[rip+0x39cb2]        # 52c84 <_fini@@Base+0x530>
   18fd2:	lea    r8,[rip+0x427e7]        # 5b7c0 <_fini@@Base+0x906c>
   18fd9:	sub    rsp,0x8
   18fdd:	mov    ecx,0x2fa
   18fe2:	mov    rbx,rdi
   18fe5:	call   205c0 <g_str_equal@plt+0x13300>
   18fea:	mov    esi,DWORD PTR [rax+0x50]
   18fed:	add    rsp,0x8
   18ff1:	mov    edx,ebp
   18ff3:	mov    rdi,rbx
   18ff6:	pop    rbx
   18ff7:	pop    rbp
   18ff8:	jmp    1b4a0 <g_str_equal@plt+0xe1e0>
   18ffd:	nop    DWORD PTR [rax]
   19000:	push   rbx
   19001:	lea    r8,[rip+0x42798]        # 5b7a0 <_fini@@Base+0x904c>
   19008:	mov    ebx,esi
   1900a:	lea    rdx,[rip+0x41f97]        # 5afa8 <_fini@@Base+0x8854>
   19011:	lea    rsi,[rip+0x39c6c]        # 52c84 <_fini@@Base+0x530>
   19018:	mov    ecx,0x297
   1901d:	sub    rsp,0x10
   19021:	xor    ebx,0x1
   19024:	mov    rax,QWORD PTR fs:0x28
   1902d:	mov    QWORD PTR [rsp+0x8],rax
   19032:	xor    eax,eax
   19034:	call   205c0 <g_str_equal@plt+0x13300>
   19039:	mov    edi,DWORD PTR [rax+0x50]
   1903c:	lea    rcx,[rsp+0x4]
   19041:	movzx  ebx,bl
   19044:	mov    r8d,0x4
   1904a:	mov    edx,0x1
   1904f:	mov    esi,0x6
   19054:	mov    DWORD PTR [rsp+0x4],ebx
   19058:	call   c540 <setsockopt@plt>
   1905d:	mov    rax,QWORD PTR [rsp+0x8]
   19062:	xor    rax,QWORD PTR fs:0x28
   1906b:	jne    19073 <g_str_equal@plt+0xbdb3>
   1906d:	add    rsp,0x10
   19071:	pop    rbx
   19072:	ret    
   19073:	call   cd30 <__stack_chk_fail@plt>
   19078:	nop    DWORD PTR [rax+rax*1+0x0]
   19080:	push   rbx
   19081:	lea    r8,[rip+0x426f8]        # 5b780 <_fini@@Base+0x902c>
   19088:	mov    ebx,esi
   1908a:	lea    rdx,[rip+0x41f17]        # 5afa8 <_fini@@Base+0x8854>
   19091:	lea    rsi,[rip+0x39bec]        # 52c84 <_fini@@Base+0x530>
   19098:	mov    ecx,0x2a4
   1909d:	call   205c0 <g_str_equal@plt+0x13300>
   190a2:	movzx  esi,bl
   190a5:	mov    edi,DWORD PTR [rax+0x50]
   190a8:	pop    rbx
   190a9:	jmp    32070 <g_str_equal@plt+0x24db0>
   190ae:	xchg   ax,ax
   190b0:	push   r12
   190b2:	push   rbp
   190b3:	mov    r12,rsi
   190b6:	push   rbx
   190b7:	lea    r8,[rip+0x42682]        # 5b740 <_fini@@Base+0x8fec>
   190be:	lea    rdx,[rip+0x41ee3]        # 5afa8 <_fini@@Base+0x8854>
   190c5:	lea    rsi,[rip+0x39bb8]        # 52c84 <_fini@@Base+0x530>
   190cc:	mov    ecx,0x2af
   190d1:	sub    rsp,0x10
   190d5:	call   205c0 <g_str_equal@plt+0x13300>
   190da:	mov    edi,DWORD PTR [rax+0x50]
   190dd:	cmp    edi,0xffffffff
   190e0:	je     19130 <g_str_equal@plt+0xbe70>
   190e2:	mov    rbx,rax
   190e5:	mov    rsi,r12
   190e8:	call   3ebc0 <g_str_equal@plt+0x31900>
   190ed:	mov    edi,DWORD PTR [rbx+0x50]
   190f0:	mov    rbp,rax
   190f3:	call   c230 <close@plt>
   190f8:	test   eax,eax
   190fa:	mov    DWORD PTR [rbx+0x50],0xffffffff
   19101:	js     19194 <g_str_equal@plt+0xbed4>
   19107:	test   rbp,rbp
   1910a:	je     19130 <g_str_equal@plt+0xbe70>
   1910c:	cmp    DWORD PTR [rbp+0x0],0x1
   19110:	je     19140 <g_str_equal@plt+0xbe80>
   19112:	xor    eax,eax
   19114:	mov    rdi,rbp
   19117:	mov    DWORD PTR [rsp+0xc],eax
   1911b:	call   24660 <g_str_equal@plt+0x173a0>
   19120:	mov    eax,DWORD PTR [rsp+0xc]
   19124:	add    rsp,0x10
   19128:	pop    rbx
   19129:	pop    rbp
   1912a:	pop    r12
   1912c:	ret    
   1912d:	nop    DWORD PTR [rax]
   19130:	xor    eax,eax
   19132:	add    rsp,0x10
   19136:	pop    rbx
   19137:	pop    rbp
   19138:	pop    r12
   1913a:	ret    
   1913b:	nop    DWORD PTR [rax+rax*1+0x0]
   19140:	mov    rdi,QWORD PTR [rbp+0x8]
   19144:	test   rdi,rdi
   19147:	je     19112 <g_str_equal@plt+0xbe52>
   19149:	call   c4d0 <unlink@plt>
   1914e:	test   eax,eax
   19150:	jns    19112 <g_str_equal@plt+0xbe52>
   19152:	call   cc80 <__errno_location@plt>
   19157:	mov    r8d,DWORD PTR [rax]
   1915a:	cmp    r8d,0x2
   1915e:	je     19112 <g_str_equal@plt+0xbe52>
   19160:	sub    rsp,0x8
   19164:	lea    r9,[rip+0x42490]        # 5b5fb <_fini@@Base+0x8ea7>
   1916b:	push   QWORD PTR [rbp+0x8]
   1916e:	lea    rcx,[rip+0x425cb]        # 5b740 <_fini@@Base+0x8fec>
   19175:	lea    rsi,[rip+0x41e2c]        # 5afa8 <_fini@@Base+0x8854>
   1917c:	mov    edx,0x2c4
   19181:	xor    eax,eax
   19183:	mov    rdi,r12
   19186:	call   3a140 <g_str_equal@plt+0x2ce80>
   1918b:	pop    rax
   1918c:	mov    eax,0xffffffff
   19191:	pop    rdx
   19192:	jmp    19114 <g_str_equal@plt+0xbe54>
   19194:	call   cc80 <__errno_location@plt>
   19199:	mov    r8d,DWORD PTR [rax]
   1919c:	lea    r9,[rip+0x42441]        # 5b5e4 <_fini@@Base+0x8e90>
   191a3:	lea    rcx,[rip+0x42596]        # 5b740 <_fini@@Base+0x8fec>
   191aa:	lea    rsi,[rip+0x41df7]        # 5afa8 <_fini@@Base+0x8854>
   191b1:	xor    eax,eax
   191b3:	mov    edx,0x2ba
   191b8:	mov    rdi,r12
   191bb:	call   3a140 <g_str_equal@plt+0x2ce80>
   191c0:	mov    eax,0xffffffff
   191c5:	jmp    19132 <g_str_equal@plt+0xbe72>
   191ca:	nop    WORD PTR [rax+rax*1+0x0]
   191d0:	push   rbx
   191d1:	lea    r8,[rip+0x42548]        # 5b720 <_fini@@Base+0x8fcc>
   191d8:	mov    ebx,esi
   191da:	lea    rdx,[rip+0x41dc7]        # 5afa8 <_fini@@Base+0x8854>
   191e1:	lea    rsi,[rip+0x39a9c]        # 52c84 <_fini@@Base+0x530>
   191e8:	mov    ecx,0x288
   191ed:	call   205c0 <g_str_equal@plt+0x13300>
   191f2:	test   bl,bl
   191f4:	mov    edi,DWORD PTR [rax+0x50]
   191f7:	jne    19208 <g_str_equal@plt+0xbf48>
   191f9:	call   38110 <g_str_equal@plt+0x2ae50>
   191fe:	xor    eax,eax
   19200:	pop    rbx
   19201:	ret    
   19202:	nop    WORD PTR [rax+rax*1+0x0]
   19208:	call   380e0 <g_str_equal@plt+0x2ae20>
   1920d:	xor    eax,eax
   1920f:	pop    rbx
   19210:	ret    
   19211:	nop    DWORD PTR [rax+rax*1+0x0]
   19216:	nop    WORD PTR cs:[rax+rax*1+0x0]
   19220:	push   rbx
   19221:	lea    r8,[rip+0x42498]        # 5b6c0 <_fini@@Base+0x8f6c>
   19228:	lea    rdx,[rip+0x41d79]        # 5afa8 <_fini@@Base+0x8854>
   1922f:	lea    rsi,[rip+0x39a4e]        # 52c84 <_fini@@Base+0x530>
   19236:	mov    ecx,0x184
   1923b:	sub    rsp,0x10
   1923f:	mov    rax,QWORD PTR fs:0x28
   19248:	mov    QWORD PTR [rsp+0x8],rax
   1924d:	xor    eax,eax
   1924f:	call   205c0 <g_str_equal@plt+0x13300>
   19254:	cmp    DWORD PTR [rax+0x50],0xffffffff
   19258:	je     1929f <g_str_equal@plt+0xbfdf>
   1925a:	lea    r8,[rip+0x4245f]        # 5b6c0 <_fini@@Base+0x8f6c>
   19261:	lea    rdx,[rip+0x41d40]        # 5afa8 <_fini@@Base+0x8854>
   19268:	lea    rsi,[rip+0x39a28]        # 52c97 <_fini@@Base+0x543>
   1926f:	mov    ecx,0x187
   19274:	mov    rdi,rax
   19277:	mov    rbx,rax
   1927a:	call   205c0 <g_str_equal@plt+0x13300>
   1927f:	mov    esi,0x2
   19284:	mov    rdi,rax
   19287:	call   16860 <g_str_equal@plt+0x95a0>
   1928c:	test   al,al
   1928e:	jne    192b8 <g_str_equal@plt+0xbff8>
   19290:	mov    edi,DWORD PTR [rbx+0x50]
   19293:	call   c230 <close@plt>
   19298:	mov    DWORD PTR [rbx+0x50],0xffffffff
   1929f:	mov    rax,QWORD PTR [rsp+0x8]
   192a4:	xor    rax,QWORD PTR fs:0x28
   192ad:	jne    192db <g_str_equal@plt+0xc01b>
   192af:	add    rsp,0x10
   192b3:	pop    rbx
   192b4:	ret    
   192b5:	nop    DWORD PTR [rax]
   192b8:	mov    edi,DWORD PTR [rbx+0x50]
   192bb:	mov    rsi,rsp
   192be:	mov    QWORD PTR [rsp],0x0
   192c6:	call   3ec80 <g_str_equal@plt+0x319c0>
   192cb:	mov    rdi,QWORD PTR [rsp]
   192cf:	test   rdi,rdi
   192d2:	je     19290 <g_str_equal@plt+0xbfd0>
   192d4:	call   39e30 <g_str_equal@plt+0x2cb70>
   192d9:	jmp    19290 <g_str_equal@plt+0xbfd0>
   192db:	call   cd30 <__stack_chk_fail@plt>
   192e0:	push   rbp
   192e1:	push   rbx
   192e2:	mov    rbp,rdx
   192e5:	mov    ebx,esi
   192e7:	lea    r8,[rip+0x42472]        # 5b760 <_fini@@Base+0x900c>
   192ee:	lea    rsi,[rip+0x3998f]        # 52c84 <_fini@@Base+0x530>
   192f5:	lea    rdx,[rip+0x41cac]        # 5afa8 <_fini@@Base+0x8854>
   192fc:	sub    rsp,0x8
   19300:	mov    ecx,0x2d5
   19305:	call   205c0 <g_str_equal@plt+0x13300>
   1930a:	xor    esi,esi
   1930c:	cmp    ebx,0x1
   1930f:	je     1931d <g_str_equal@plt+0xc05d>
   19311:	xor    esi,esi
   19313:	cmp    ebx,0x2
   19316:	setne  sil
   1931a:	add    esi,0x1
   1931d:	mov    edi,DWORD PTR [rax+0x50]
   19320:	call   c1f0 <shutdown@plt>
   19325:	test   eax,eax
   19327:	js     19332 <g_str_equal@plt+0xc072>
   19329:	xor    eax,eax
   1932b:	add    rsp,0x8
   1932f:	pop    rbx
   19330:	pop    rbp
   19331:	ret    
   19332:	call   cc80 <__errno_location@plt>
   19337:	mov    r8d,DWORD PTR [rax]
   1933a:	lea    r9,[rip+0x422d5]        # 5b616 <_fini@@Base+0x8ec2>
   19341:	lea    rcx,[rip+0x42418]        # 5b760 <_fini@@Base+0x900c>
   19348:	lea    rsi,[rip+0x41c59]        # 5afa8 <_fini@@Base+0x8854>
   1934f:	xor    eax,eax
   19351:	mov    edx,0x2e7
   19356:	mov    rdi,rbp
   19359:	call   3a140 <g_str_equal@plt+0x2ce80>
   1935e:	mov    eax,0xffffffff
   19363:	jmp    1932b <g_str_equal@plt+0xc06b>
   19365:	nop
   19366:	nop    WORD PTR cs:[rax+rax*1+0x0]
   19370:	push   r15
   19372:	push   r14
   19374:	mov    r14,r8
   19377:	push   r13
   19379:	push   r12
   1937b:	lea    r8,[rip+0x4237e]        # 5b700 <_fini@@Base+0x8fac>
   19382:	push   rbp
   19383:	push   rbx
   19384:	mov    r12,rsi
   19387:	mov    rbx,rdx
   1938a:	lea    rsi,[rip+0x398f3]        # 52c84 <_fini@@Base+0x530>
   19391:	lea    rdx,[rip+0x41c10]        # 5afa8 <_fini@@Base+0x8854>
   19398:	sub    rsp,0xb8
   1939f:	mov    r13,rcx
   193a2:	mov    ecx,0x1d0
   193a7:	mov    rax,QWORD PTR fs:0x28
   193b0:	mov    QWORD PTR [rsp+0xa8],rax
   193b8:	xor    eax,eax
   193ba:	mov    r15,r9
   193bd:	call   205c0 <g_str_equal@plt+0x13300>
   193c2:	test   r13,r13
   193c5:	pxor   xmm0,xmm0
   193c9:	mov    QWORD PTR [rsp+0x20],r12
   193ce:	setne  r12b
   193d2:	test   r14,r14
   193d5:	mov    rbp,rax
   193d8:	setne  al
   193db:	mov    QWORD PTR [rsp+0x40],0x0
   193e4:	and    r12b,al
   193e7:	mov    QWORD PTR [rsp+0x28],rbx
   193ec:	movaps XMMWORD PTR [rsp+0x10],xmm0
   193f1:	movaps XMMWORD PTR [rsp+0x30],xmm0
   193f6:	movaps XMMWORD PTR [rsp+0x50],xmm0
   193fb:	movaps XMMWORD PTR [rsp+0x60],xmm0
   19400:	movaps XMMWORD PTR [rsp+0x70],xmm0
   19405:	movaps XMMWORD PTR [rsp+0x80],xmm0
   1940d:	movaps XMMWORD PTR [rsp+0x90],xmm0
   19415:	je     1942a <g_str_equal@plt+0xc16a>
   19417:	lea    rdx,[rsp+0x50]
   1941c:	mov    QWORD PTR [rsp+0x38],0x50
   19425:	mov    QWORD PTR [rsp+0x30],rdx
   1942a:	lea    rbx,[rsp+0x10]
   1942f:	jmp    1944c <g_str_equal@plt+0xc18c>
   19431:	nop    DWORD PTR [rax+0x0]
   19438:	call   cc80 <__errno_location@plt>
   1943d:	mov    r8d,DWORD PTR [rax]
   19440:	cmp    r8d,0xb
   19444:	je     19498 <g_str_equal@plt+0xc1d8>
   19446:	cmp    r8d,0x4
   1944a:	jne    194a8 <g_str_equal@plt+0xc1e8>
   1944c:	mov    edi,DWORD PTR [rbp+0x50]
   1944f:	mov    edx,0x40000000
   19454:	mov    rsi,rbx
   19457:	call   c300 <recvmsg@plt>
   1945c:	test   rax,rax
   1945f:	mov    rcx,rax
   19462:	js     19438 <g_str_equal@plt+0xc178>
   19464:	test   r12b,r12b
   19467:	jne    194d8 <g_str_equal@plt+0xc218>
   19469:	mov    rbx,QWORD PTR [rsp+0xa8]
   19471:	xor    rbx,QWORD PTR fs:0x28
   1947a:	mov    rax,rcx
   1947d:	jne    19611 <g_str_equal@plt+0xc351>
   19483:	add    rsp,0xb8
   1948a:	pop    rbx
   1948b:	pop    rbp
   1948c:	pop    r12
   1948e:	pop    r13
   19490:	pop    r14
   19492:	pop    r15
   19494:	ret    
   19495:	nop    DWORD PTR [rax]
   19498:	mov    rcx,0xfffffffffffffffe
   1949f:	jmp    19469 <g_str_equal@plt+0xc1a9>
   194a1:	nop    DWORD PTR [rax+0x0]
   194a8:	lea    rcx,[rip+0x42251]        # 5b700 <_fini@@Base+0x8fac>
   194af:	lea    r9,[rip+0x4217a]        # 5b630 <_fini@@Base+0x8edc>
   194b6:	lea    rsi,[rip+0x41aeb]        # 5afa8 <_fini@@Base+0x8854>
   194bd:	mov    edx,0x1ee
   194c2:	mov    rdi,r15
   194c5:	xor    eax,eax
   194c7:	call   3a140 <g_str_equal@plt+0x2ce80>
   194cc:	mov    rcx,0xffffffffffffffff
   194d3:	jmp    19469 <g_str_equal@plt+0xc1a9>
   194d5:	nop    DWORD PTR [rax]
   194d8:	cmp    QWORD PTR [rsp+0x38],0xf
   194de:	mov    QWORD PTR [r14],0x0
   194e5:	mov    QWORD PTR [r13+0x0],0x0
   194ed:	jbe    19469 <g_str_equal@plt+0xc1a9>
   194f3:	mov    rdi,QWORD PTR [rsp+0x30]
   194f8:	test   rdi,rdi
   194fb:	mov    r15,rdi
   194fe:	je     19469 <g_str_equal@plt+0xc1a9>
   19504:	mov    rax,QWORD PTR [rdi]
   19507:	movabs rbx,0x100000001
   19511:	nop    DWORD PTR [rax+0x0]
   19518:	cmp    rax,0x13
   1951c:	jbe    195c6 <g_str_equal@plt+0xc306>
   19522:	cmp    QWORD PTR [r15+0x8],rbx
   19526:	jne    195d5 <g_str_equal@plt+0xc315>
   1952c:	mov    ebp,eax
   1952e:	sub    ebp,0x10
   19531:	je     195d5 <g_str_equal@plt+0xc315>
   19537:	movsxd rbp,ebp
   1953a:	mov    rsi,QWORD PTR [r14]
   1953d:	mov    rdi,QWORD PTR [r13+0x0]
   19541:	mov    r12,rbp
   19544:	mov    edx,0x4
   19549:	mov    QWORD PTR [rsp],rcx
   1954d:	shr    r12,0x2
   19551:	movsxd rax,r12d
   19554:	add    rsi,rax
   19557:	mov    QWORD PTR [rsp+0x8],rax
   1955c:	call   c480 <g_realloc_n@plt>
   19561:	mov    QWORD PTR [r13+0x0],rax
   19565:	mov    rdx,QWORD PTR [r14]
   19568:	lea    rsi,[r15+0x10]
   1956c:	lea    rdi,[rax+rdx*4]
   19570:	mov    rdx,rbp
   19573:	call   d220 <memcpy@plt>
   19578:	test   r12d,r12d
   1957b:	mov    r8,QWORD PTR [r14]
   1957e:	mov    rcx,QWORD PTR [rsp]
   19582:	jle    195b8 <g_str_equal@plt+0xc2f8>
   19584:	lea    ebp,[r12-0x1]
   19589:	xor    r12d,r12d
   1958c:	add    rbp,0x1
   19590:	mov    rdx,QWORD PTR [r13+0x0]
   19594:	lea    rsi,[r12+r8*1]
   19598:	mov    edi,DWORD PTR [rdx+rsi*4]
   1959b:	test   edi,edi
   1959d:	js     195af <g_str_equal@plt+0xc2ef>
   1959f:	mov    QWORD PTR [rsp],rcx
   195a3:	call   380e0 <g_str_equal@plt+0x2ae20>
   195a8:	mov    r8,QWORD PTR [r14]
   195ab:	mov    rcx,QWORD PTR [rsp]
   195af:	add    r12,0x1
   195b3:	cmp    rbp,r12
   195b6:	jne    19590 <g_str_equal@plt+0xc2d0>
   195b8:	mov    r12,QWORD PTR [rsp+0x8]
   195bd:	add    r12,r8
   195c0:	mov    QWORD PTR [r14],r12
   195c3:	mov    rax,QWORD PTR [r15]
   195c6:	cmp    rax,0xf
   195ca:	jbe    19469 <g_str_equal@plt+0xc1a9>
   195d0:	mov    rdi,QWORD PTR [rsp+0x30]
   195d5:	add    rax,0x7
   195d9:	mov    rsi,QWORD PTR [rsp+0x38]
   195de:	and    rax,0xfffffffffffffff8
   195e2:	add    r15,rax
   195e5:	lea    rax,[r15+0x10]
   195e9:	add    rsi,rdi
   195ec:	cmp    rsi,rax
   195ef:	jb     19469 <g_str_equal@plt+0xc1a9>
   195f5:	mov    rax,QWORD PTR [r15]
   195f8:	lea    rdx,[rax+0x7]
   195fc:	and    rdx,0xfffffffffffffff8
   19600:	add    rdx,r15
   19603:	cmp    rsi,rdx
   19606:	jae    19518 <g_str_equal@plt+0xc258>
   1960c:	jmp    19469 <g_str_equal@plt+0xc1a9>
   19611:	call   cd30 <__stack_chk_fail@plt>
   19616:	nop    WORD PTR cs:[rax+rax*1+0x0]
   19620:	push   r15
   19622:	push   r14
   19624:	mov    r15,rsi
   19627:	push   r13
   19629:	push   r12
   1962b:	mov    r14,rdx
   1962e:	push   rbp
   1962f:	push   rbx
   19630:	mov    rbp,r8
   19633:	lea    rdx,[rip+0x4196e]        # 5afa8 <_fini@@Base+0x8854>
   1963a:	lea    r8,[rip+0x4209f]        # 5b6e0 <_fini@@Base+0x8f8c>
   19641:	lea    rsi,[rip+0x3963c]        # 52c84 <_fini@@Base+0x530>
   19648:	sub    rsp,0xa8
   1964f:	mov    r13,rcx
   19652:	mov    ecx,0x200
   19657:	mov    rax,QWORD PTR fs:0x28
   19660:	mov    QWORD PTR [rsp+0x98],rax
   19668:	xor    eax,eax
   1966a:	mov    r12,r9
   1966d:	call   205c0 <g_str_equal@plt+0x13300>
   19672:	pxor   xmm0,xmm0
   19676:	test   rbp,rbp
   19679:	mov    rbx,rax
   1967c:	mov    QWORD PTR [rsp+0x30],0x0
   19685:	mov    QWORD PTR [rsp+0x10],r15
   1968a:	mov    QWORD PTR [rsp+0x18],r14
   1968f:	movaps XMMWORD PTR [rsp],xmm0
   19693:	movaps XMMWORD PTR [rsp+0x20],xmm0
   19698:	movaps XMMWORD PTR [rsp+0x40],xmm0
   1969d:	movaps XMMWORD PTR [rsp+0x50],xmm0
   196a2:	movaps XMMWORD PTR [rsp+0x60],xmm0
   196a7:	movaps XMMWORD PTR [rsp+0x70],xmm0
   196ac:	movaps XMMWORD PTR [rsp+0x80],xmm0
   196b4:	je     1970c <g_str_equal@plt+0xc44c>
   196b6:	cmp    rbp,0x10
   196ba:	ja     197ad <g_str_equal@plt+0xc4ed>
   196c0:	lea    rdx,[rbp*4+0x0]
   196c8:	lea    rdi,[rsp+0x40]
   196cd:	mov    ecx,0x40
   196d2:	mov    rsi,r13
   196d5:	lea    rax,[rdx+0x7]
   196d9:	mov    QWORD PTR [rsp+0x20],rdi
   196de:	add    rdi,0x10
   196e2:	and    rax,0xfffffffffffffff8
   196e6:	add    rax,0x10
   196ea:	mov    QWORD PTR [rsp+0x28],rax
   196ef:	lea    rax,[rdx+0x10]
   196f3:	mov    QWORD PTR [rsp+0x40],rax
   196f8:	movabs rax,0x100000001
   19702:	mov    QWORD PTR [rsp+0x48],rax
   19707:	call   c510 <__memcpy_chk@plt>
   1970c:	mov    rbp,rsp
   1970f:	jmp    1972c <g_str_equal@plt+0xc46c>
   19711:	nop    DWORD PTR [rax+0x0]
   19718:	call   cc80 <__errno_location@plt>
   1971d:	mov    r8d,DWORD PTR [rax]
   19720:	cmp    r8d,0xb
   19724:	je     19770 <g_str_equal@plt+0xc4b0>
   19726:	cmp    r8d,0x4
   1972a:	jne    19780 <g_str_equal@plt+0xc4c0>
   1972c:	mov    edi,DWORD PTR [rbx+0x50]
   1972f:	xor    edx,edx
   19731:	mov    rsi,rbp
   19734:	call   c970 <sendmsg@plt>
   19739:	test   rax,rax
   1973c:	jle    19718 <g_str_equal@plt+0xc458>
   1973e:	mov    rcx,QWORD PTR [rsp+0x98]
   19746:	xor    rcx,QWORD PTR fs:0x28
   1974f:	jne    197e8 <g_str_equal@plt+0xc528>
   19755:	add    rsp,0xa8
   1975c:	pop    rbx
   1975d:	pop    rbp
   1975e:	pop    r12
   19760:	pop    r13
   19762:	pop    r14
   19764:	pop    r15
   19766:	ret    
   19767:	nop    WORD PTR [rax+rax*1+0x0]
   19770:	mov    rax,0xfffffffffffffffe
   19777:	jmp    1973e <g_str_equal@plt+0xc47e>
   19779:	nop    DWORD PTR [rax+0x0]
   19780:	lea    r9,[rip+0x41ec4]        # 5b64b <_fini@@Base+0x8ef7>
   19787:	lea    rcx,[rip+0x41f52]        # 5b6e0 <_fini@@Base+0x8f8c>
   1978e:	lea    rsi,[rip+0x41813]        # 5afa8 <_fini@@Base+0x8854>
   19795:	xor    eax,eax
   19797:	mov    edx,0x228
   1979c:	mov    rdi,r12
   1979f:	call   3a140 <g_str_equal@plt+0x2ce80>
   197a4:	mov    rax,0xffffffffffffffff
   197ab:	jmp    1973e <g_str_equal@plt+0xc47e>
   197ad:	push   rbp
   197ae:	lea    r9,[rip+0x41883]        # 5b038 <_fini@@Base+0x88e4>
   197b5:	push   0x10
   197b7:	lea    rcx,[rip+0x41f22]        # 5b6e0 <_fini@@Base+0x8f8c>
   197be:	lea    rsi,[rip+0x417e3]        # 5afa8 <_fini@@Base+0x8854>
   197c5:	mov    edx,0x210
   197ca:	xor    eax,eax
   197cc:	mov    r8d,0x16
   197d2:	mov    rdi,r12
   197d5:	call   3a140 <g_str_equal@plt+0x2ce80>
   197da:	pop    rax
   197db:	mov    rax,0xffffffffffffffff
   197e2:	pop    rdx
   197e3:	jmp    1973e <g_str_equal@plt+0xc47e>
   197e8:	call   cd30 <__stack_chk_fail@plt>
   197ed:	nop    DWORD PTR [rax]
   197f0:	mov    rdx,rsi
   197f3:	mov    esi,DWORD PTR [rdi+0xd8]
   197f9:	add    rdi,0x58
   197fd:	jmp    3ead0 <g_str_equal@plt+0x31810>
   19802:	nop    DWORD PTR [rax+0x0]
   19806:	nop    WORD PTR cs:[rax+rax*1+0x0]
   19810:	mov    rdx,rsi
   19813:	mov    esi,DWORD PTR [rdi+0x160]
   19819:	add    rdi,0xe0
   19820:	jmp    3ead0 <g_str_equal@plt+0x31810>
   19825:	nop
   19826:	nop    WORD PTR cs:[rax+rax*1+0x0]
   19830:	push   r12
   19832:	push   rbp
   19833:	lea    rdi,[rip+0x3944a]        # 52c84 <_fini@@Base+0x530>
   1983a:	push   rbx
   1983b:	sub    rsp,0x20
   1983f:	mov    rax,QWORD PTR fs:0x28
   19848:	mov    QWORD PTR [rsp+0x18],rax
   1984d:	xor    eax,eax
   1984f:	call   20420 <g_str_equal@plt+0x13160>
   19854:	lea    r8,[rip+0x420d5]        # 5b930 <_fini@@Base+0x91dc>
   1985b:	lea    rdx,[rip+0x41746]        # 5afa8 <_fini@@Base+0x8854>
   19862:	lea    rsi,[rip+0x3941b]        # 52c84 <_fini@@Base+0x530>
   19869:	mov    ecx,0x37
   1986e:	mov    rdi,rax
   19871:	call   205c0 <g_str_equal@plt+0x13300>
   19876:	lea    r8,[rip+0x420b3]        # 5b930 <_fini@@Base+0x91dc>
   1987d:	lea    rdx,[rip+0x41724]        # 5afa8 <_fini@@Base+0x8854>
   19884:	lea    rsi,[rip+0x3940c]        # 52c97 <_fini@@Base+0x543>
   1988b:	mov    ecx,0x3a
   19890:	mov    rdi,rax
   19893:	mov    DWORD PTR [rax+0x50],0xffffffff
   1989a:	mov    rbx,rax
   1989d:	call   205c0 <g_str_equal@plt+0x13300>
   198a2:	mov    esi,0x1
   198a7:	mov    rdi,rax
   198aa:	call   16870 <g_str_equal@plt+0x95b0>
   198af:	mov    eax,DWORD PTR [rip+0x26b223]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   198b5:	test   eax,eax
   198b7:	jne    198d8 <g_str_equal@plt+0xc618>
   198b9:	mov    rdx,QWORD PTR [rsp+0x18]
   198be:	xor    rdx,QWORD PTR fs:0x28
   198c7:	mov    rax,rbx
   198ca:	jne    1991e <g_str_equal@plt+0xc65e>
   198cc:	add    rsp,0x20
   198d0:	pop    rbx
   198d1:	pop    rbp
   198d2:	pop    r12
   198d4:	ret    
   198d5:	nop    DWORD PTR [rax]
   198d8:	cmp    WORD PTR [rip+0x26d702],0x0        # 286fe2 <stdout@@GLIBC_2.2.5+0x269a>
   198e0:	je     198b9 <g_str_equal@plt+0xc5f9>
   198e2:	test   BYTE PTR [rip+0x26c5b8],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   198e9:	je     198b9 <g_str_equal@plt+0xc5f9>
   198eb:	mov    rdi,rsp
   198ee:	xor    esi,esi
   198f0:	call   c3e0 <gettimeofday@plt>
   198f5:	mov    r12,QWORD PTR [rsp+0x8]
   198fa:	mov    rbp,QWORD PTR [rsp]
   198fe:	call   c5b0 <getpid@plt>
   19903:	lea    rdi,[rip+0x41756]        # 5b060 <_fini@@Base+0x890c>
   1990a:	mov    esi,eax
   1990c:	mov    r8,rbx
   1990f:	mov    rcx,r12
   19912:	mov    rdx,rbp
   19915:	xor    eax,eax
   19917:	call   431a0 <g_str_equal@plt+0x35ee0>
   1991c:	jmp    198b9 <g_str_equal@plt+0xc5f9>
   1991e:	call   cd30 <__stack_chk_fail@plt>
   19923:	nop    DWORD PTR [rax]
   19926:	nop    WORD PTR cs:[rax+rax*1+0x0]
   19930:	push   r13
   19932:	push   r12
   19934:	mov    r12,rsi
   19937:	push   rbp
   19938:	push   rbx
   19939:	mov    ebp,edi
   1993b:	sub    rsp,0x28
   1993f:	mov    rax,QWORD PTR fs:0x28
   19948:	mov    QWORD PTR [rsp+0x18],rax
   1994d:	xor    eax,eax
   1994f:	call   19830 <g_str_equal@plt+0xc570>
   19954:	mov    rdx,r12
   19957:	mov    esi,ebp
   19959:	mov    rdi,rax
   1995c:	mov    rbx,rax
   1995f:	call   18cf0 <g_str_equal@plt+0xba30>
   19964:	test   eax,eax
   19966:	js     199e0 <g_str_equal@plt+0xc720>
   19968:	mov    eax,DWORD PTR [rip+0x26b16a]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   1996e:	test   eax,eax
   19970:	jne    19990 <g_str_equal@plt+0xc6d0>
   19972:	mov    rcx,QWORD PTR [rsp+0x18]
   19977:	xor    rcx,QWORD PTR fs:0x28
   19980:	mov    rax,rbx
   19983:	jne    199ec <g_str_equal@plt+0xc72c>
   19985:	add    rsp,0x28
   19989:	pop    rbx
   1998a:	pop    rbp
   1998b:	pop    r12
   1998d:	pop    r13
   1998f:	ret    
   19990:	cmp    WORD PTR [rip+0x26d648],0x0        # 286fe0 <stdout@@GLIBC_2.2.5+0x2698>
   19998:	je     19972 <g_str_equal@plt+0xc6b2>
   1999a:	test   BYTE PTR [rip+0x26c500],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   199a1:	je     19972 <g_str_equal@plt+0xc6b2>
   199a3:	mov    rdi,rsp
   199a6:	xor    esi,esi
   199a8:	call   c3e0 <gettimeofday@plt>
   199ad:	mov    r13,QWORD PTR [rsp+0x8]
   199b2:	mov    r12,QWORD PTR [rsp]
   199b6:	call   c5b0 <getpid@plt>
   199bb:	lea    rdi,[rip+0x416d6]        # 5b098 <_fini@@Base+0x8944>
   199c2:	mov    esi,eax
   199c4:	mov    r9d,ebp
   199c7:	mov    r8,rbx
   199ca:	mov    rcx,r13
   199cd:	mov    rdx,r12
   199d0:	xor    eax,eax
   199d2:	call   431a0 <g_str_equal@plt+0x35ee0>
   199d7:	jmp    19972 <g_str_equal@plt+0xc6b2>
   199d9:	nop    DWORD PTR [rax+0x0]
   199e0:	mov    rdi,rbx
   199e3:	xor    ebx,ebx
   199e5:	call   20b90 <g_str_equal@plt+0x138d0>
   199ea:	jmp    19972 <g_str_equal@plt+0xc6b2>
   199ec:	call   cd30 <__stack_chk_fail@plt>
   199f1:	nop    DWORD PTR [rax+rax*1+0x0]
   199f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   19a00:	push   r14
   19a02:	push   r13
   19a04:	push   r12
   19a06:	push   rbp
   19a07:	mov    r12,rdi
   19a0a:	push   rbx
   19a0b:	mov    rbp,rdx
   19a0e:	mov    rbx,rsi
   19a11:	sub    rsp,0x20
   19a15:	mov    ecx,DWORD PTR [rip+0x26b0bd]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   19a1b:	mov    rax,QWORD PTR fs:0x28
   19a24:	mov    QWORD PTR [rsp+0x18],rax
   19a29:	xor    eax,eax
   19a2b:	test   ecx,ecx
   19a2d:	jne    19a90 <g_str_equal@plt+0xc7d0>
   19a2f:	mov    rdi,rbx
   19a32:	mov    rsi,rbp
   19a35:	call   3def0 <g_str_equal@plt+0x30c30>
   19a3a:	test   eax,eax
   19a3c:	mov    ebx,eax
   19a3e:	js     19b38 <g_str_equal@plt+0xc878>
   19a44:	mov    eax,DWORD PTR [rip+0x26b08e]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   19a4a:	test   eax,eax
   19a4c:	jne    19ae0 <g_str_equal@plt+0xc820>
   19a52:	mov    rdx,rbp
   19a55:	mov    esi,ebx
   19a57:	mov    rdi,r12
   19a5a:	call   18cf0 <g_str_equal@plt+0xba30>
   19a5f:	test   eax,eax
   19a61:	js     19ba0 <g_str_equal@plt+0xc8e0>
   19a67:	xor    ebx,ebx
   19a69:	mov    rcx,QWORD PTR [rsp+0x18]
   19a6e:	xor    rcx,QWORD PTR fs:0x28
   19a77:	mov    eax,ebx
   19a79:	jne    19bb1 <g_str_equal@plt+0xc8f1>
   19a7f:	add    rsp,0x20
   19a83:	pop    rbx
   19a84:	pop    rbp
   19a85:	pop    r12
   19a87:	pop    r13
   19a89:	pop    r14
   19a8b:	ret    
   19a8c:	nop    DWORD PTR [rax+0x0]
   19a90:	cmp    WORD PTR [rip+0x26d546],0x0        # 286fde <stdout@@GLIBC_2.2.5+0x2696>
   19a98:	je     19a2f <g_str_equal@plt+0xc76f>
   19a9a:	test   BYTE PTR [rip+0x26c400],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   19aa1:	je     19a2f <g_str_equal@plt+0xc76f>
   19aa3:	mov    rdi,rsp
   19aa6:	xor    esi,esi
   19aa8:	call   c3e0 <gettimeofday@plt>
   19aad:	mov    r14,QWORD PTR [rsp+0x8]
   19ab2:	mov    r13,QWORD PTR [rsp]
   19ab6:	call   c5b0 <getpid@plt>
   19abb:	lea    rdi,[rip+0x41616]        # 5b0d8 <_fini@@Base+0x8984>
   19ac2:	mov    esi,eax
   19ac4:	mov    r9,rbx
   19ac7:	mov    r8,r12
   19aca:	mov    rcx,r14
   19acd:	mov    rdx,r13
   19ad0:	xor    eax,eax
   19ad2:	call   431a0 <g_str_equal@plt+0x35ee0>
   19ad7:	jmp    19a2f <g_str_equal@plt+0xc76f>
   19adc:	nop    DWORD PTR [rax+0x0]
   19ae0:	cmp    WORD PTR [rip+0x26d4f0],0x0        # 286fd8 <stdout@@GLIBC_2.2.5+0x2690>
   19ae8:	je     19a52 <g_str_equal@plt+0xc792>
   19aee:	test   BYTE PTR [rip+0x26c3ac],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   19af5:	je     19a52 <g_str_equal@plt+0xc792>
   19afb:	mov    rdi,rsp
   19afe:	xor    esi,esi
   19b00:	call   c3e0 <gettimeofday@plt>
   19b05:	mov    r14,QWORD PTR [rsp+0x8]
   19b0a:	mov    r13,QWORD PTR [rsp]
   19b0e:	call   c5b0 <getpid@plt>
   19b13:	lea    rdi,[rip+0x41666]        # 5b180 <_fini@@Base+0x8a2c>
   19b1a:	mov    esi,eax
   19b1c:	mov    r9d,ebx
   19b1f:	mov    r8,r12
   19b22:	mov    rcx,r14
   19b25:	mov    rdx,r13
   19b28:	xor    eax,eax
   19b2a:	call   431a0 <g_str_equal@plt+0x35ee0>
   19b2f:	jmp    19a52 <g_str_equal@plt+0xc792>
   19b34:	nop    DWORD PTR [rax+0x0]
   19b38:	mov    edx,DWORD PTR [rip+0x26af9a]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   19b3e:	mov    ebx,0xffffffff
   19b43:	test   edx,edx
   19b45:	je     19a69 <g_str_equal@plt+0xc7a9>
   19b4b:	cmp    WORD PTR [rip+0x26d487],0x0        # 286fda <stdout@@GLIBC_2.2.5+0x2692>
   19b53:	je     19a69 <g_str_equal@plt+0xc7a9>
   19b59:	test   BYTE PTR [rip+0x26c341],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   19b60:	je     19a69 <g_str_equal@plt+0xc7a9>
   19b66:	mov    rdi,rsp
   19b69:	xor    esi,esi
   19b6b:	call   c3e0 <gettimeofday@plt>
   19b70:	mov    r13,QWORD PTR [rsp+0x8]
   19b75:	mov    rbp,QWORD PTR [rsp]
   19b79:	call   c5b0 <getpid@plt>
   19b7e:	lea    rdi,[rip+0x415ab]        # 5b130 <_fini@@Base+0x89dc>
   19b85:	mov    esi,eax
   19b87:	mov    r8,r12
   19b8a:	mov    rcx,r13
   19b8d:	mov    rdx,rbp
   19b90:	xor    eax,eax
   19b92:	call   431a0 <g_str_equal@plt+0x35ee0>
   19b97:	jmp    19a69 <g_str_equal@plt+0xc7a9>
   19b9c:	nop    DWORD PTR [rax+0x0]
   19ba0:	mov    edi,ebx
   19ba2:	mov    ebx,0xffffffff
   19ba7:	call   c230 <close@plt>
   19bac:	jmp    19a69 <g_str_equal@plt+0xc7a9>
   19bb1:	call   cd30 <__stack_chk_fail@plt>
   19bb6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   19bc0:	push   rbp
   19bc1:	push   rbx
   19bc2:	mov    rbp,rsi
   19bc5:	mov    rbx,rdi
   19bc8:	sub    rsp,0x18
   19bcc:	mov    rax,QWORD PTR fs:0x28
   19bd5:	mov    QWORD PTR [rsp+0x8],rax
   19bda:	xor    eax,eax
   19bdc:	call   1f090 <g_str_equal@plt+0x11dd0>
   19be1:	lea    r8,[rip+0x41cf8]        # 5b8e0 <_fini@@Base+0x918c>
   19be8:	lea    rdx,[rip+0x413b9]        # 5afa8 <_fini@@Base+0x8854>
   19bef:	lea    rsi,[rip+0x3908e]        # 52c84 <_fini@@Base+0x530>
   19bf6:	mov    ecx,0xa3
   19bfb:	mov    rdi,rax
   19bfe:	call   205c0 <g_str_equal@plt+0x13300>
   19c03:	mov    rdx,rsp
   19c06:	mov    rsi,rbp
   19c09:	mov    rdi,rax
   19c0c:	mov    QWORD PTR [rsp],0x0
   19c14:	call   19a00 <g_str_equal@plt+0xc740>
   19c19:	mov    rsi,QWORD PTR [rsp]
   19c1d:	mov    rdi,rbx
   19c20:	call   1f030 <g_str_equal@plt+0x11d70>
   19c25:	mov    rax,QWORD PTR [rsp+0x8]
   19c2a:	xor    rax,QWORD PTR fs:0x28
   19c33:	jne    19c3c <g_str_equal@plt+0xc97c>
   19c35:	add    rsp,0x18
   19c39:	pop    rbx
   19c3a:	pop    rbp
   19c3b:	ret    
   19c3c:	call   cd30 <__stack_chk_fail@plt>
   19c41:	nop    DWORD PTR [rax+rax*1+0x0]
   19c46:	nop    WORD PTR cs:[rax+rax*1+0x0]
   19c50:	push   r15
   19c52:	push   r14
   19c54:	mov    r14,r9
   19c57:	push   r13
   19c59:	push   r12
   19c5b:	push   rbp
   19c5c:	push   rbx
   19c5d:	mov    rbp,rsi
   19c60:	mov    rsi,rdx
   19c63:	mov    rdx,rcx
   19c66:	mov    rcx,r8
   19c69:	sub    rsp,0x38
   19c6d:	mov    rbx,rdi
   19c70:	mov    rax,QWORD PTR fs:0x28
   19c79:	mov    QWORD PTR [rsp+0x28],rax
   19c7e:	xor    eax,eax
   19c80:	call   1ec80 <g_str_equal@plt+0x119c0>
   19c85:	lea    rsi,[rip+0xdcb4]        # 27940 <g_str_equal@plt+0x1a680>
   19c8c:	mov    rdi,rbp
   19c8f:	mov    r12,rax
   19c92:	call   2de80 <g_str_equal@plt+0x20bc0>
   19c97:	mov    r13,rax
   19c9a:	mov    eax,DWORD PTR [rip+0x26ae38]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   19ca0:	test   eax,eax
   19ca2:	jne    19ce0 <g_str_equal@plt+0xca20>
   19ca4:	lea    rcx,[rip+0xa9b5]        # 24660 <g_str_equal@plt+0x173a0>
   19cab:	lea    rsi,[rip+0xffffffffffffff0e]        # 19bc0 <g_str_equal@plt+0xc900>
   19cb2:	mov    r8,r14
   19cb5:	mov    rdx,r13
   19cb8:	mov    rdi,r12
   19cbb:	call   1ed60 <g_str_equal@plt+0x11aa0>
   19cc0:	mov    rax,QWORD PTR [rsp+0x28]
   19cc5:	xor    rax,QWORD PTR fs:0x28
   19cce:	jne    19d36 <g_str_equal@plt+0xca76>
   19cd0:	add    rsp,0x38
   19cd4:	pop    rbx
   19cd5:	pop    rbp
   19cd6:	pop    r12
   19cd8:	pop    r13
   19cda:	pop    r14
   19cdc:	pop    r15
   19cde:	ret    
   19cdf:	nop
   19ce0:	cmp    WORD PTR [rip+0x26d2f4],0x0        # 286fdc <stdout@@GLIBC_2.2.5+0x2694>
   19ce8:	je     19ca4 <g_str_equal@plt+0xc9e4>
   19cea:	test   BYTE PTR [rip+0x26c1b0],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   19cf1:	je     19ca4 <g_str_equal@plt+0xc9e4>
   19cf3:	lea    rdi,[rsp+0x10]
   19cf8:	xor    esi,esi
   19cfa:	call   c3e0 <gettimeofday@plt>
   19cff:	mov    rcx,QWORD PTR [rsp+0x18]
   19d04:	mov    r15,QWORD PTR [rsp+0x10]
   19d09:	mov    QWORD PTR [rsp+0x8],rcx
   19d0e:	call   c5b0 <getpid@plt>
   19d13:	mov    rcx,QWORD PTR [rsp+0x8]
   19d18:	lea    rdi,[rip+0x414b9]        # 5b1d8 <_fini@@Base+0x8a84>
   19d1f:	mov    esi,eax
   19d21:	mov    r9,rbp
   19d24:	mov    r8,rbx
   19d27:	mov    rdx,r15
   19d2a:	xor    eax,eax
   19d2c:	call   431a0 <g_str_equal@plt+0x35ee0>
   19d31:	jmp    19ca4 <g_str_equal@plt+0xc9e4>
   19d36:	call   cd30 <__stack_chk_fail@plt>
   19d3b:	nop    DWORD PTR [rax+rax*1+0x0]
   19d40:	push   r14
   19d42:	push   r13
   19d44:	push   r12
   19d46:	push   rbp
   19d47:	mov    r12,rdx
   19d4a:	push   rbx
   19d4b:	mov    rbp,rdi
   19d4e:	mov    rbx,rsi
   19d51:	sub    rsp,0x20
   19d55:	mov    ecx,DWORD PTR [rip+0x26ad7d]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   19d5b:	mov    rax,QWORD PTR fs:0x28
   19d64:	mov    QWORD PTR [rsp+0x18],rax
   19d69:	xor    eax,eax
   19d6b:	test   ecx,ecx
   19d6d:	jne    19e00 <g_str_equal@plt+0xcb40>
   19d73:	mov    rdi,rbx
   19d76:	mov    rsi,r12
   19d79:	call   3e070 <g_str_equal@plt+0x30db0>
   19d7e:	test   eax,eax
   19d80:	mov    ebx,eax
   19d82:	js     19eb0 <g_str_equal@plt+0xcbf0>
   19d88:	mov    eax,DWORD PTR [rip+0x26ad4a]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   19d8e:	test   eax,eax
   19d90:	jne    19e58 <g_str_equal@plt+0xcb98>
   19d96:	mov    rdx,r12
   19d99:	mov    esi,ebx
   19d9b:	mov    rdi,rbp
   19d9e:	call   18cf0 <g_str_equal@plt+0xba30>
   19da3:	test   eax,eax
   19da5:	js     19f18 <g_str_equal@plt+0xcc58>
   19dab:	lea    r8,[rip+0x41afe]        # 5b8b0 <_fini@@Base+0x915c>
   19db2:	lea    rdx,[rip+0x411ef]        # 5afa8 <_fini@@Base+0x8854>
   19db9:	lea    rsi,[rip+0x38ed7]        # 52c97 <_fini@@Base+0x543>
   19dc0:	mov    ecx,0xd7
   19dc5:	mov    rdi,rbp
   19dc8:	xor    ebx,ebx
   19dca:	call   205c0 <g_str_equal@plt+0x13300>
   19dcf:	mov    esi,0x2
   19dd4:	mov    rdi,rax
   19dd7:	call   16870 <g_str_equal@plt+0x95b0>
   19ddc:	mov    rcx,QWORD PTR [rsp+0x18]
   19de1:	xor    rcx,QWORD PTR fs:0x28
   19dea:	mov    eax,ebx
   19dec:	jne    19f29 <g_str_equal@plt+0xcc69>
   19df2:	add    rsp,0x20
   19df6:	pop    rbx
   19df7:	pop    rbp
   19df8:	pop    r12
   19dfa:	pop    r13
   19dfc:	pop    r14
   19dfe:	ret    
   19dff:	nop
   19e00:	cmp    WORD PTR [rip+0x26d1ce],0x0        # 286fd6 <stdout@@GLIBC_2.2.5+0x268e>
   19e08:	je     19d73 <g_str_equal@plt+0xcab3>
   19e0e:	test   BYTE PTR [rip+0x26c08c],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   19e15:	je     19d73 <g_str_equal@plt+0xcab3>
   19e1b:	mov    rdi,rsp
   19e1e:	xor    esi,esi
   19e20:	call   c3e0 <gettimeofday@plt>
   19e25:	mov    r14,QWORD PTR [rsp+0x8]
   19e2a:	mov    r13,QWORD PTR [rsp]
   19e2e:	call   c5b0 <getpid@plt>
   19e33:	lea    rdi,[rip+0x413f6]        # 5b230 <_fini@@Base+0x8adc>
   19e3a:	mov    esi,eax
   19e3c:	mov    r9,rbx
   19e3f:	mov    r8,rbp
   19e42:	mov    rcx,r14
   19e45:	mov    rdx,r13
   19e48:	xor    eax,eax
   19e4a:	call   431a0 <g_str_equal@plt+0x35ee0>
   19e4f:	jmp    19d73 <g_str_equal@plt+0xcab3>
   19e54:	nop    DWORD PTR [rax+0x0]
   19e58:	cmp    WORD PTR [rip+0x26d170],0x0        # 286fd0 <stdout@@GLIBC_2.2.5+0x2688>
   19e60:	je     19d96 <g_str_equal@plt+0xcad6>
   19e66:	test   BYTE PTR [rip+0x26c034],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   19e6d:	je     19d96 <g_str_equal@plt+0xcad6>
   19e73:	mov    rdi,rsp
   19e76:	xor    esi,esi
   19e78:	call   c3e0 <gettimeofday@plt>
   19e7d:	mov    r14,QWORD PTR [rsp+0x8]
   19e82:	mov    r13,QWORD PTR [rsp]
   19e86:	call   c5b0 <getpid@plt>
   19e8b:	lea    rdi,[rip+0x41436]        # 5b2c8 <_fini@@Base+0x8b74>
   19e92:	mov    esi,eax
   19e94:	mov    r9d,ebx
   19e97:	mov    r8,rbp
   19e9a:	mov    rcx,r14
   19e9d:	mov    rdx,r13
   19ea0:	xor    eax,eax
   19ea2:	call   431a0 <g_str_equal@plt+0x35ee0>
   19ea7:	jmp    19d96 <g_str_equal@plt+0xcad6>
   19eac:	nop    DWORD PTR [rax+0x0]
   19eb0:	mov    edx,DWORD PTR [rip+0x26ac22]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   19eb6:	mov    ebx,0xffffffff
   19ebb:	test   edx,edx
   19ebd:	je     19ddc <g_str_equal@plt+0xcb1c>
   19ec3:	cmp    WORD PTR [rip+0x26d107],0x0        # 286fd2 <stdout@@GLIBC_2.2.5+0x268a>
   19ecb:	je     19ddc <g_str_equal@plt+0xcb1c>
   19ed1:	test   BYTE PTR [rip+0x26bfc9],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   19ed8:	je     19ddc <g_str_equal@plt+0xcb1c>
   19ede:	mov    rdi,rsp
   19ee1:	xor    esi,esi
   19ee3:	call   c3e0 <gettimeofday@plt>
   19ee8:	mov    r13,QWORD PTR [rsp+0x8]
   19eed:	mov    r12,QWORD PTR [rsp]
   19ef1:	call   c5b0 <getpid@plt>
   19ef6:	lea    rdi,[rip+0x41383]        # 5b280 <_fini@@Base+0x8b2c>
   19efd:	mov    esi,eax
   19eff:	mov    r8,rbp
   19f02:	mov    rcx,r13
   19f05:	mov    rdx,r12
   19f08:	xor    eax,eax
   19f0a:	call   431a0 <g_str_equal@plt+0x35ee0>
   19f0f:	jmp    19ddc <g_str_equal@plt+0xcb1c>
   19f14:	nop    DWORD PTR [rax+0x0]
   19f18:	mov    edi,ebx
   19f1a:	mov    ebx,0xffffffff
   19f1f:	call   c230 <close@plt>
   19f24:	jmp    19ddc <g_str_equal@plt+0xcb1c>
   19f29:	call   cd30 <__stack_chk_fail@plt>
   19f2e:	xchg   ax,ax
   19f30:	push   rbp
   19f31:	push   rbx
   19f32:	mov    rbp,rsi
   19f35:	mov    rbx,rdi
   19f38:	sub    rsp,0x18
   19f3c:	mov    rax,QWORD PTR fs:0x28
   19f45:	mov    QWORD PTR [rsp+0x8],rax
   19f4a:	xor    eax,eax
   19f4c:	call   1f090 <g_str_equal@plt+0x11dd0>
   19f51:	lea    r8,[rip+0x41928]        # 5b880 <_fini@@Base+0x912c>
   19f58:	lea    rdx,[rip+0x41049]        # 5afa8 <_fini@@Base+0x8854>
   19f5f:	lea    rsi,[rip+0x38d1e]        # 52c84 <_fini@@Base+0x530>
   19f66:	mov    ecx,0xe0
   19f6b:	mov    rdi,rax
   19f6e:	call   205c0 <g_str_equal@plt+0x13300>
   19f73:	mov    rdx,rsp
   19f76:	mov    rsi,rbp
   19f79:	mov    rdi,rax
   19f7c:	mov    QWORD PTR [rsp],0x0
   19f84:	call   19d40 <g_str_equal@plt+0xca80>
   19f89:	mov    rsi,QWORD PTR [rsp]
   19f8d:	mov    rdi,rbx
   19f90:	call   1f030 <g_str_equal@plt+0x11d70>
   19f95:	mov    rax,QWORD PTR [rsp+0x8]
   19f9a:	xor    rax,QWORD PTR fs:0x28
   19fa3:	jne    19fac <g_str_equal@plt+0xccec>
   19fa5:	add    rsp,0x18
   19fa9:	pop    rbx
   19faa:	pop    rbp
   19fab:	ret    
   19fac:	call   cd30 <__stack_chk_fail@plt>
   19fb1:	nop    DWORD PTR [rax+rax*1+0x0]
   19fb6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   19fc0:	push   r15
   19fc2:	push   r14
   19fc4:	mov    r14,r9
   19fc7:	push   r13
   19fc9:	push   r12
   19fcb:	push   rbp
   19fcc:	push   rbx
   19fcd:	mov    rbp,rsi
   19fd0:	mov    rsi,rdx
   19fd3:	mov    rdx,rcx
   19fd6:	mov    rcx,r8
   19fd9:	sub    rsp,0x38
   19fdd:	mov    rbx,rdi
   19fe0:	mov    rax,QWORD PTR fs:0x28
   19fe9:	mov    QWORD PTR [rsp+0x28],rax
   19fee:	xor    eax,eax
   19ff0:	call   1ec80 <g_str_equal@plt+0x119c0>
   19ff5:	lea    rsi,[rip+0xd944]        # 27940 <g_str_equal@plt+0x1a680>
   19ffc:	mov    rdi,rbp
   19fff:	mov    r12,rax
   1a002:	call   2de80 <g_str_equal@plt+0x20bc0>
   1a007:	mov    r13,rax
   1a00a:	mov    eax,DWORD PTR [rip+0x26aac8]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   1a010:	test   eax,eax
   1a012:	jne    1a050 <g_str_equal@plt+0xcd90>
   1a014:	lea    rcx,[rip+0xa645]        # 24660 <g_str_equal@plt+0x173a0>
   1a01b:	lea    rsi,[rip+0xffffffffffffff0e]        # 19f30 <g_str_equal@plt+0xcc70>
   1a022:	mov    r8,r14
   1a025:	mov    rdx,r13
   1a028:	mov    rdi,r12
   1a02b:	call   1ed60 <g_str_equal@plt+0x11aa0>
   1a030:	mov    rax,QWORD PTR [rsp+0x28]
   1a035:	xor    rax,QWORD PTR fs:0x28
   1a03e:	jne    1a0a6 <g_str_equal@plt+0xcde6>
   1a040:	add    rsp,0x38
   1a044:	pop    rbx
   1a045:	pop    rbp
   1a046:	pop    r12
   1a048:	pop    r13
   1a04a:	pop    r14
   1a04c:	pop    r15
   1a04e:	ret    
   1a04f:	nop
   1a050:	cmp    WORD PTR [rip+0x26cf7c],0x0        # 286fd4 <stdout@@GLIBC_2.2.5+0x268c>
   1a058:	je     1a014 <g_str_equal@plt+0xcd54>
   1a05a:	test   BYTE PTR [rip+0x26be40],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   1a061:	je     1a014 <g_str_equal@plt+0xcd54>
   1a063:	lea    rdi,[rsp+0x10]
   1a068:	xor    esi,esi
   1a06a:	call   c3e0 <gettimeofday@plt>
   1a06f:	mov    rcx,QWORD PTR [rsp+0x18]
   1a074:	mov    r15,QWORD PTR [rsp+0x10]
   1a079:	mov    QWORD PTR [rsp+0x8],rcx
   1a07e:	call   c5b0 <getpid@plt>
   1a083:	mov    rcx,QWORD PTR [rsp+0x8]
   1a088:	lea    rdi,[rip+0x41291]        # 5b320 <_fini@@Base+0x8bcc>
   1a08f:	mov    esi,eax
   1a091:	mov    r9,rbp
   1a094:	mov    r8,rbx
   1a097:	mov    rdx,r15
   1a09a:	xor    eax,eax
   1a09c:	call   431a0 <g_str_equal@plt+0x35ee0>
   1a0a1:	jmp    1a014 <g_str_equal@plt+0xcd54>
   1a0a6:	call   cd30 <__stack_chk_fail@plt>
   1a0ab:	nop    DWORD PTR [rax+rax*1+0x0]
   1a0b0:	push   r15
   1a0b2:	push   r14
   1a0b4:	push   r13
   1a0b6:	push   r12
   1a0b8:	mov    r12,rdi
   1a0bb:	push   rbp
   1a0bc:	push   rbx
   1a0bd:	mov    r13,rsi
   1a0c0:	mov    rbx,rdx
   1a0c3:	mov    rbp,rcx
   1a0c6:	sub    rsp,0x28
   1a0ca:	mov    edi,DWORD PTR [rip+0x26aa08]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   1a0d0:	mov    rax,QWORD PTR fs:0x28
   1a0d9:	mov    QWORD PTR [rsp+0x18],rax
   1a0de:	xor    eax,eax
   1a0e0:	test   edi,edi
   1a0e2:	jne    1a150 <g_str_equal@plt+0xce90>
   1a0e4:	mov    rdi,rbx
   1a0e7:	mov    rdx,rbp
   1a0ea:	mov    rsi,r13
   1a0ed:	call   3e710 <g_str_equal@plt+0x31450>
   1a0f2:	test   eax,eax
   1a0f4:	mov    ebx,eax
   1a0f6:	js     1a200 <g_str_equal@plt+0xcf40>
   1a0fc:	mov    eax,DWORD PTR [rip+0x26a9d6]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   1a102:	test   eax,eax
   1a104:	jne    1a1a8 <g_str_equal@plt+0xcee8>
   1a10a:	mov    rdx,rbp
   1a10d:	mov    esi,ebx
   1a10f:	mov    rdi,r12
   1a112:	call   18cf0 <g_str_equal@plt+0xba30>
   1a117:	test   eax,eax
   1a119:	js     1a268 <g_str_equal@plt+0xcfa8>
   1a11f:	xor    ebx,ebx
   1a121:	mov    rcx,QWORD PTR [rsp+0x18]
   1a126:	xor    rcx,QWORD PTR fs:0x28
   1a12f:	mov    eax,ebx
   1a131:	jne    1a279 <g_str_equal@plt+0xcfb9>
   1a137:	add    rsp,0x28
   1a13b:	pop    rbx
   1a13c:	pop    rbp
   1a13d:	pop    r12
   1a13f:	pop    r13
   1a141:	pop    r14
   1a143:	pop    r15
   1a145:	ret    
   1a146:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1a150:	cmp    WORD PTR [rip+0x26ce76],0x0        # 286fce <stdout@@GLIBC_2.2.5+0x2686>
   1a158:	je     1a0e4 <g_str_equal@plt+0xce24>
   1a15a:	test   BYTE PTR [rip+0x26bd40],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   1a161:	je     1a0e4 <g_str_equal@plt+0xce24>
   1a163:	mov    rdi,rsp
   1a166:	xor    esi,esi
   1a168:	call   c3e0 <gettimeofday@plt>
   1a16d:	mov    r15,QWORD PTR [rsp+0x8]
   1a172:	mov    r14,QWORD PTR [rsp]
   1a176:	call   c5b0 <getpid@plt>
   1a17b:	sub    rsp,0x8
   1a17f:	lea    rdi,[rip+0x411f2]        # 5b378 <_fini@@Base+0x8c24>
   1a186:	mov    esi,eax
   1a188:	push   rbx
   1a189:	mov    rcx,r15
   1a18c:	mov    r9,r13
   1a18f:	mov    r8,r12
   1a192:	mov    rdx,r14
   1a195:	xor    eax,eax
   1a197:	call   431a0 <g_str_equal@plt+0x35ee0>
   1a19c:	pop    rcx
   1a19d:	pop    rsi
   1a19e:	jmp    1a0e4 <g_str_equal@plt+0xce24>
   1a1a3:	nop    DWORD PTR [rax+rax*1+0x0]
   1a1a8:	cmp    WORD PTR [rip+0x26ce18],0x0        # 286fc8 <stdout@@GLIBC_2.2.5+0x2680>
   1a1b0:	je     1a10a <g_str_equal@plt+0xce4a>
   1a1b6:	test   BYTE PTR [rip+0x26bce4],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   1a1bd:	je     1a10a <g_str_equal@plt+0xce4a>
   1a1c3:	mov    rdi,rsp
   1a1c6:	xor    esi,esi
   1a1c8:	call   c3e0 <gettimeofday@plt>
   1a1cd:	mov    r14,QWORD PTR [rsp+0x8]
   1a1d2:	mov    r13,QWORD PTR [rsp]
   1a1d6:	call   c5b0 <getpid@plt>
   1a1db:	lea    rdi,[rip+0x4123e]        # 5b420 <_fini@@Base+0x8ccc>
   1a1e2:	mov    esi,eax
   1a1e4:	mov    r9d,ebx
   1a1e7:	mov    r8,r12
   1a1ea:	mov    rcx,r14
   1a1ed:	mov    rdx,r13
   1a1f0:	xor    eax,eax
   1a1f2:	call   431a0 <g_str_equal@plt+0x35ee0>
   1a1f7:	jmp    1a10a <g_str_equal@plt+0xce4a>
   1a1fc:	nop    DWORD PTR [rax+0x0]
   1a200:	mov    edx,DWORD PTR [rip+0x26a8d2]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   1a206:	mov    ebx,0xffffffff
   1a20b:	test   edx,edx
   1a20d:	je     1a121 <g_str_equal@plt+0xce61>
   1a213:	cmp    WORD PTR [rip+0x26cdaf],0x0        # 286fca <stdout@@GLIBC_2.2.5+0x2682>
   1a21b:	je     1a121 <g_str_equal@plt+0xce61>
   1a221:	test   BYTE PTR [rip+0x26bc79],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   1a228:	je     1a121 <g_str_equal@plt+0xce61>
   1a22e:	mov    rdi,rsp
   1a231:	xor    esi,esi
   1a233:	call   c3e0 <gettimeofday@plt>
   1a238:	mov    r13,QWORD PTR [rsp+0x8]
   1a23d:	mov    rbp,QWORD PTR [rsp]
   1a241:	call   c5b0 <getpid@plt>
   1a246:	lea    rdi,[rip+0x4118b]        # 5b3d8 <_fini@@Base+0x8c84>
   1a24d:	mov    esi,eax
   1a24f:	mov    r8,r12
   1a252:	mov    rcx,r13
   1a255:	mov    rdx,rbp
   1a258:	xor    eax,eax
   1a25a:	call   431a0 <g_str_equal@plt+0x35ee0>
   1a25f:	jmp    1a121 <g_str_equal@plt+0xce61>
   1a264:	nop    DWORD PTR [rax+0x0]
   1a268:	mov    edi,ebx
   1a26a:	mov    ebx,0xffffffff
   1a26f:	call   c230 <close@plt>
   1a274:	jmp    1a121 <g_str_equal@plt+0xce61>
   1a279:	call   cd30 <__stack_chk_fail@plt>
   1a27e:	xchg   ax,ax
   1a280:	push   rbp
   1a281:	push   rbx
   1a282:	mov    rbp,rsi
   1a285:	mov    rbx,rdi
   1a288:	sub    rsp,0x18
   1a28c:	mov    rax,QWORD PTR fs:0x28
   1a295:	mov    QWORD PTR [rsp+0x8],rax
   1a29a:	xor    eax,eax
   1a29c:	call   1f090 <g_str_equal@plt+0x11dd0>
   1a2a1:	lea    r8,[rip+0x415b8]        # 5b860 <_fini@@Base+0x910c>
   1a2a8:	lea    rdx,[rip+0x40cf9]        # 5afa8 <_fini@@Base+0x8854>
   1a2af:	lea    rsi,[rip+0x389ce]        # 52c84 <_fini@@Base+0x530>
   1a2b6:	mov    ecx,0x12a
   1a2bb:	mov    rdi,rax
   1a2be:	call   205c0 <g_str_equal@plt+0x13300>
   1a2c3:	mov    rdx,QWORD PTR [rbp+0x8]
   1a2c7:	mov    rsi,QWORD PTR [rbp+0x0]
   1a2cb:	mov    rcx,rsp
   1a2ce:	mov    rdi,rax
   1a2d1:	mov    QWORD PTR [rsp],0x0
   1a2d9:	call   1a0b0 <g_str_equal@plt+0xcdf0>
   1a2de:	mov    rsi,QWORD PTR [rsp]
   1a2e2:	mov    rdi,rbx
   1a2e5:	call   1f030 <g_str_equal@plt+0x11d70>
   1a2ea:	mov    rax,QWORD PTR [rsp+0x8]
   1a2ef:	xor    rax,QWORD PTR fs:0x28
   1a2f8:	jne    1a301 <g_str_equal@plt+0xd041>
   1a2fa:	add    rsp,0x18
   1a2fe:	pop    rbx
   1a2ff:	pop    rbp
   1a300:	ret    
   1a301:	call   cd30 <__stack_chk_fail@plt>
   1a306:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1a310:	push   r15
   1a312:	push   r14
   1a314:	push   r13
   1a316:	push   r12
   1a318:	mov    r13,rdx
   1a31b:	push   rbp
   1a31c:	push   rbx
   1a31d:	mov    rdx,r8
   1a320:	mov    r12,rsi
   1a323:	mov    rsi,rcx
   1a326:	mov    rcx,r9
   1a329:	sub    rsp,0x38
   1a32d:	mov    rbp,rdi
   1a330:	mov    rax,QWORD PTR fs:0x28
   1a339:	mov    QWORD PTR [rsp+0x28],rax
   1a33e:	xor    eax,eax
   1a340:	mov    r15,QWORD PTR [rsp+0x70]
   1a345:	call   1ec80 <g_str_equal@plt+0x119c0>
   1a34a:	mov    edi,0x10
   1a34f:	mov    r14,rax
   1a352:	call   ce00 <g_malloc0@plt>
   1a357:	lea    rsi,[rip+0xd5e2]        # 27940 <g_str_equal@plt+0x1a680>
   1a35e:	mov    rdi,r12
   1a361:	mov    rbx,rax
   1a364:	call   2de80 <g_str_equal@plt+0x20bc0>
   1a369:	lea    rsi,[rip+0xd5d0]        # 27940 <g_str_equal@plt+0x1a680>
   1a370:	mov    rdi,r13
   1a373:	mov    QWORD PTR [rbx],rax
   1a376:	call   2de80 <g_str_equal@plt+0x20bc0>
   1a37b:	mov    ecx,DWORD PTR [rip+0x26a757]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   1a381:	mov    QWORD PTR [rbx+0x8],rax
   1a385:	test   ecx,ecx
   1a387:	jne    1a3c8 <g_str_equal@plt+0xd108>
   1a389:	lea    rcx,[rip+0xffffffffffffeb00]        # 18e90 <g_str_equal@plt+0xbbd0>
   1a390:	lea    rsi,[rip+0xfffffffffffffee9]        # 1a280 <g_str_equal@plt+0xcfc0>
   1a397:	mov    r8,r15
   1a39a:	mov    rdx,rbx
   1a39d:	mov    rdi,r14
   1a3a0:	call   1ed60 <g_str_equal@plt+0x11aa0>
   1a3a5:	mov    rax,QWORD PTR [rsp+0x28]
   1a3aa:	xor    rax,QWORD PTR fs:0x28
   1a3b3:	jne    1a42c <g_str_equal@plt+0xd16c>
   1a3b5:	add    rsp,0x38
   1a3b9:	pop    rbx
   1a3ba:	pop    rbp
   1a3bb:	pop    r12
   1a3bd:	pop    r13
   1a3bf:	pop    r14
   1a3c1:	pop    r15
   1a3c3:	ret    
   1a3c4:	nop    DWORD PTR [rax+0x0]
   1a3c8:	cmp    WORD PTR [rip+0x26cbfc],0x0        # 286fcc <stdout@@GLIBC_2.2.5+0x2684>
   1a3d0:	je     1a389 <g_str_equal@plt+0xd0c9>
   1a3d2:	test   BYTE PTR [rip+0x26bac8],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   1a3d9:	je     1a389 <g_str_equal@plt+0xd0c9>
   1a3db:	lea    rdi,[rsp+0x10]
   1a3e0:	xor    esi,esi
   1a3e2:	call   c3e0 <gettimeofday@plt>
   1a3e7:	mov    rcx,QWORD PTR [rsp+0x18]
   1a3ec:	mov    rdx,QWORD PTR [rsp+0x10]
   1a3f1:	mov    QWORD PTR [rsp+0x8],rcx
   1a3f6:	mov    QWORD PTR [rsp],rdx
   1a3fa:	call   c5b0 <getpid@plt>
   1a3ff:	sub    rsp,0x8
   1a403:	lea    rdi,[rip+0x4106e]        # 5b478 <_fini@@Base+0x8d24>
   1a40a:	mov    esi,eax
   1a40c:	push   r13
   1a40e:	mov    rcx,QWORD PTR [rsp+0x18]
   1a413:	mov    r9,r12
   1a416:	mov    rdx,QWORD PTR [rsp+0x10]
   1a41b:	mov    r8,rbp
   1a41e:	xor    eax,eax
   1a420:	call   431a0 <g_str_equal@plt+0x35ee0>
   1a425:	pop    rax
   1a426:	pop    rdx
   1a427:	jmp    1a389 <g_str_equal@plt+0xd0c9>
   1a42c:	call   cd30 <__stack_chk_fail@plt>
   1a431:	nop    DWORD PTR [rax+rax*1+0x0]
   1a436:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1a440:	push   r15
   1a442:	push   r14
   1a444:	mov    r14,rsi
   1a447:	push   r13
   1a449:	push   r12
   1a44b:	push   rbp
   1a44c:	push   rbx
   1a44d:	mov    rbp,rdi
   1a450:	sub    rsp,0x38
   1a454:	mov    rax,QWORD PTR fs:0x28
   1a45d:	mov    QWORD PTR [rsp+0x28],rax
   1a462:	xor    eax,eax
   1a464:	lea    r15,[rsp+0x10]
   1a469:	call   19830 <g_str_equal@plt+0xc570>
   1a46e:	mov    rbx,rax
   1a471:	mov    DWORD PTR [rax+0x160],0x80
   1a47b:	mov    DWORD PTR [rax+0xd8],0x80
   1a485:	lea    r13,[rax+0x160]
   1a48c:	lea    r12,[rax+0xe0]
   1a493:	jmp    1a4bf <g_str_equal@plt+0xd1ff>
   1a495:	nop    DWORD PTR [rax]
   1a498:	mov    edi,DWORD PTR [rbp+0x50]
   1a49b:	mov    rdx,r13
   1a49e:	mov    rsi,r12
   1a4a1:	call   32590 <g_str_equal@plt+0x252d0>
   1a4a6:	test   eax,eax
   1a4a8:	mov    DWORD PTR [rbx+0x50],eax
   1a4ab:	jns    1a520 <g_str_equal@plt+0xd260>
   1a4ad:	call   cc80 <__errno_location@plt>
   1a4b2:	mov    r8d,DWORD PTR [rax]
   1a4b5:	cmp    r8d,0x4
   1a4b9:	jne    1a578 <g_str_equal@plt+0xd2b8>
   1a4bf:	mov    edi,DWORD PTR [rip+0x26a613]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   1a4c5:	test   edi,edi
   1a4c7:	je     1a498 <g_str_equal@plt+0xd1d8>
   1a4c9:	cmp    WORD PTR [rip+0x26caf5],0x0        # 286fc6 <stdout@@GLIBC_2.2.5+0x267e>
   1a4d1:	je     1a498 <g_str_equal@plt+0xd1d8>
   1a4d3:	test   BYTE PTR [rip+0x26b9c7],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   1a4da:	je     1a498 <g_str_equal@plt+0xd1d8>
   1a4dc:	xor    esi,esi
   1a4de:	mov    rdi,r15
   1a4e1:	call   c3e0 <gettimeofday@plt>
   1a4e6:	mov    rcx,QWORD PTR [rsp+0x18]
   1a4eb:	mov    rdx,QWORD PTR [rsp+0x10]
   1a4f0:	mov    QWORD PTR [rsp+0x8],rcx
   1a4f5:	mov    QWORD PTR [rsp],rdx
   1a4f9:	call   c5b0 <getpid@plt>
   1a4fe:	mov    rcx,QWORD PTR [rsp+0x8]
   1a503:	mov    rdx,QWORD PTR [rsp]
   1a507:	lea    rdi,[rip+0x40fd2]        # 5b4e0 <_fini@@Base+0x8d8c>
   1a50e:	mov    esi,eax
   1a510:	mov    r8,rbp
   1a513:	xor    eax,eax
   1a515:	call   431a0 <g_str_equal@plt+0x35ee0>
   1a51a:	jmp    1a498 <g_str_equal@plt+0xd1d8>
   1a51f:	nop
   1a520:	lea    rsi,[rbx+0x58]
   1a524:	lea    rdx,[rbx+0xd8]
   1a52b:	mov    edi,eax
   1a52d:	call   cb10 <getsockname@plt>
   1a532:	test   eax,eax
   1a534:	js     1a6b1 <g_str_equal@plt+0xd3f1>
   1a53a:	cmp    WORD PTR [rbx+0x58],0x1
   1a53f:	je     1a5c0 <g_str_equal@plt+0xd300>
   1a541:	mov    ecx,DWORD PTR [rip+0x26a591]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   1a547:	test   ecx,ecx
   1a549:	jne    1a5fa <g_str_equal@plt+0xd33a>
   1a54f:	mov    rcx,QWORD PTR [rsp+0x28]
   1a554:	xor    rcx,QWORD PTR fs:0x28
   1a55d:	mov    rax,rbx
   1a560:	jne    1a6e2 <g_str_equal@plt+0xd422>
   1a566:	add    rsp,0x38
   1a56a:	pop    rbx
   1a56b:	pop    rbp
   1a56c:	pop    r12
   1a56e:	pop    r13
   1a570:	pop    r14
   1a572:	pop    r15
   1a574:	ret    
   1a575:	nop    DWORD PTR [rax]
   1a578:	lea    rsi,[rip+0x40a29]        # 5afa8 <_fini@@Base+0x8854>
   1a57f:	lea    r9,[rip+0x410df]        # 5b665 <_fini@@Base+0x8f11>
   1a586:	lea    rcx,[rip+0x412a3]        # 5b830 <_fini@@Base+0x90dc>
   1a58d:	xor    eax,eax
   1a58f:	mov    edx,0x161
   1a594:	mov    rdi,r14
   1a597:	call   3a140 <g_str_equal@plt+0x2ce80>
   1a59c:	mov    esi,DWORD PTR [rip+0x26a536]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   1a5a2:	test   esi,esi
   1a5a4:	jne    1a65d <g_str_equal@plt+0xd39d>
   1a5aa:	mov    rdi,rbx
   1a5ad:	xor    ebx,ebx
   1a5af:	call   20b90 <g_str_equal@plt+0x138d0>
   1a5b4:	jmp    1a54f <g_str_equal@plt+0xd28f>
   1a5b6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1a5c0:	lea    r8,[rip+0x41269]        # 5b830 <_fini@@Base+0x90dc>
   1a5c7:	lea    rdx,[rip+0x409da]        # 5afa8 <_fini@@Base+0x8854>
   1a5ce:	lea    rsi,[rip+0x386c2]        # 52c97 <_fini@@Base+0x543>
   1a5d5:	mov    ecx,0x16f
   1a5da:	mov    rdi,rbx
   1a5dd:	call   205c0 <g_str_equal@plt+0x13300>
   1a5e2:	xor    esi,esi
   1a5e4:	mov    rdi,rax
   1a5e7:	call   16870 <g_str_equal@plt+0x95b0>
   1a5ec:	mov    ecx,DWORD PTR [rip+0x26a4e6]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   1a5f2:	test   ecx,ecx
   1a5f4:	je     1a54f <g_str_equal@plt+0xd28f>
   1a5fa:	cmp    WORD PTR [rip+0x26c9c0],0x0        # 286fc2 <stdout@@GLIBC_2.2.5+0x267a>
   1a602:	je     1a54f <g_str_equal@plt+0xd28f>
   1a608:	test   BYTE PTR [rip+0x26b892],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   1a60f:	je     1a54f <g_str_equal@plt+0xd28f>
   1a615:	lea    rdi,[rsp+0x10]
   1a61a:	xor    esi,esi
   1a61c:	mov    r14d,DWORD PTR [rbx+0x50]
   1a620:	call   c3e0 <gettimeofday@plt>
   1a625:	mov    r13,QWORD PTR [rsp+0x18]
   1a62a:	mov    r12,QWORD PTR [rsp+0x10]
   1a62f:	call   c5b0 <getpid@plt>
   1a634:	sub    rsp,0x8
   1a638:	lea    rdi,[rip+0x40f31]        # 5b570 <_fini@@Base+0x8e1c>
   1a63f:	mov    esi,eax
   1a641:	push   r14
   1a643:	mov    rdx,r12
   1a646:	mov    r9,rbx
   1a649:	mov    r8,rbp
   1a64c:	mov    rcx,r13
   1a64f:	xor    eax,eax
   1a651:	call   431a0 <g_str_equal@plt+0x35ee0>
   1a656:	pop    rax
   1a657:	pop    rdx
   1a658:	jmp    1a54f <g_str_equal@plt+0xd28f>
   1a65d:	cmp    WORD PTR [rip+0x26c95f],0x0        # 286fc4 <stdout@@GLIBC_2.2.5+0x267c>
   1a665:	je     1a5aa <g_str_equal@plt+0xd2ea>
   1a66b:	test   BYTE PTR [rip+0x26b82f],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   1a672:	je     1a5aa <g_str_equal@plt+0xd2ea>
   1a678:	lea    rdi,[rsp+0x10]
   1a67d:	xor    esi,esi
   1a67f:	call   c3e0 <gettimeofday@plt>
   1a684:	mov    r13,QWORD PTR [rsp+0x18]
   1a689:	mov    r12,QWORD PTR [rsp+0x10]
   1a68e:	call   c5b0 <getpid@plt>
   1a693:	lea    rdi,[rip+0x40e8e]        # 5b528 <_fini@@Base+0x8dd4>
   1a69a:	mov    esi,eax
   1a69c:	mov    r8,rbp
   1a69f:	mov    rcx,r13
   1a6a2:	mov    rdx,r12
   1a6a5:	xor    eax,eax
   1a6a7:	call   431a0 <g_str_equal@plt+0x35ee0>
   1a6ac:	jmp    1a5aa <g_str_equal@plt+0xd2ea>
   1a6b1:	call   cc80 <__errno_location@plt>
   1a6b6:	mov    r8d,DWORD PTR [rax]
   1a6b9:	lea    r9,[rip+0x40950]        # 5b010 <_fini@@Base+0x88bc>
   1a6c0:	lea    rcx,[rip+0x41169]        # 5b830 <_fini@@Base+0x90dc>
   1a6c7:	lea    rsi,[rip+0x408da]        # 5afa8 <_fini@@Base+0x8854>
   1a6ce:	mov    edx,0x169
   1a6d3:	mov    rdi,r14
   1a6d6:	xor    eax,eax
   1a6d8:	call   3a140 <g_str_equal@plt+0x2ce80>
   1a6dd:	jmp    1a5aa <g_str_equal@plt+0xd2ea>
   1a6e2:	call   cd30 <__stack_chk_fail@plt>
   1a6e7:	nop    WORD PTR [rax+rax*1+0x0]
   1a6f0:	repz ret 
   1a6f2:	nop    DWORD PTR [rax+0x0]
   1a6f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1a700:	push   r15
   1a702:	push   r14
   1a704:	push   r13
   1a706:	push   r12
   1a708:	mov    r13,rdx
   1a70b:	push   rbp
   1a70c:	push   rbx
   1a70d:	mov    rbx,rdi
   1a710:	mov    rbp,rsi
   1a713:	sub    rsp,0x48
   1a717:	mov    rdi,QWORD PTR [rdi+0x58]
   1a71b:	lea    r12,[rsp+0x18]
   1a720:	mov    QWORD PTR [rsp+0x18],0x0
   1a729:	mov    rax,QWORD PTR fs:0x28
   1a732:	mov    QWORD PTR [rsp+0x38],rax
   1a737:	xor    eax,eax
   1a739:	mov    rsi,r12
   1a73c:	call   127c0 <g_str_equal@plt+0x5500>
   1a741:	test   eax,eax
   1a743:	js     1a818 <g_str_equal@plt+0xd558>
   1a749:	mov    rdi,QWORD PTR [rbx+0x58]
   1a74d:	call   12800 <g_str_equal@plt+0x5540>
   1a752:	test   eax,eax
   1a754:	mov    r14d,eax
   1a757:	jne    1a7b8 <g_str_equal@plt+0xd4f8>
   1a759:	mov    esi,DWORD PTR [rip+0x26a379]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   1a75f:	test   esi,esi
   1a761:	jne    1a920 <g_str_equal@plt+0xd660>
   1a767:	mov    rdi,QWORD PTR [rbx+0x58]
   1a76b:	mov    rsi,r12
   1a76e:	call   12730 <g_str_equal@plt+0x5470>
   1a773:	test   eax,eax
   1a775:	js     1a840 <g_str_equal@plt+0xd580>
   1a77b:	mov    edx,DWORD PTR [rip+0x26a357]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   1a781:	test   edx,edx
   1a783:	jne    1a860 <g_str_equal@plt+0xd5a0>
   1a789:	mov    rdi,rbp
   1a78c:	call   1ee80 <g_str_equal@plt+0x11bc0>
   1a791:	mov    rax,QWORD PTR [rsp+0x38]
   1a796:	xor    rax,QWORD PTR fs:0x28
   1a79f:	jne    1aa24 <g_str_equal@plt+0xd764>
   1a7a5:	add    rsp,0x48
   1a7a9:	pop    rbx
   1a7aa:	pop    rbp
   1a7ab:	pop    r12
   1a7ad:	pop    r13
   1a7af:	pop    r14
   1a7b1:	pop    r15
   1a7b3:	ret    
   1a7b4:	nop    DWORD PTR [rax+0x0]
   1a7b8:	mov    edi,0x10
   1a7bd:	call   ce00 <g_malloc0@plt>
   1a7c2:	test   r13,r13
   1a7c5:	mov    r12,rax
   1a7c8:	mov    QWORD PTR [rax],rbp
   1a7cb:	mov    QWORD PTR [rax+0x8],r13
   1a7cf:	je     1a7d9 <g_str_equal@plt+0xd519>
   1a7d1:	mov    rdi,r13
   1a7d4:	call   c6c0 <g_main_context_ref@plt>
   1a7d9:	mov    eax,DWORD PTR [rip+0x26a2f9]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   1a7df:	xor    ebp,ebp
   1a7e1:	cmp    r14d,0x1
   1a7e5:	sete   bpl
   1a7e9:	lea    ebp,[rbp+rbp*2+0x1]
   1a7ed:	test   eax,eax
   1a7ef:	jne    1a8b8 <g_str_equal@plt+0xd5f8>
   1a7f5:	mov    rdi,QWORD PTR [rbx+0x50]
   1a7f9:	lea    rdx,[rip+0x230]        # 1aa30 <g_str_equal@plt+0xd770>
   1a800:	mov    r9,r13
   1a803:	xor    r8d,r8d
   1a806:	mov    rcx,r12
   1a809:	mov    esi,ebp
   1a80b:	call   16d20 <g_str_equal@plt+0x9a60>
   1a810:	jmp    1a791 <g_str_equal@plt+0xd4d1>
   1a815:	nop    DWORD PTR [rax]
   1a818:	mov    edi,DWORD PTR [rip+0x26a2ba]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   1a81e:	test   edi,edi
   1a820:	jne    1a978 <g_str_equal@plt+0xd6b8>
   1a826:	mov    rsi,QWORD PTR [rsp+0x18]
   1a82b:	mov    rdi,rbp
   1a82e:	call   1f030 <g_str_equal@plt+0x11d70>
   1a833:	mov    rdi,rbp
   1a836:	call   1ee80 <g_str_equal@plt+0x11bc0>
   1a83b:	jmp    1a791 <g_str_equal@plt+0xd4d1>
   1a840:	mov    ecx,DWORD PTR [rip+0x26a292]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   1a846:	test   ecx,ecx
   1a848:	jne    1a9d0 <g_str_equal@plt+0xd710>
   1a84e:	mov    rsi,QWORD PTR [rsp+0x18]
   1a853:	mov    rdi,rbp
   1a856:	call   1f030 <g_str_equal@plt+0x11d70>
   1a85b:	jmp    1a789 <g_str_equal@plt+0xd4c9>
   1a860:	cmp    WORD PTR [rip+0x26c748],0x0        # 286fb0 <stdout@@GLIBC_2.2.5+0x2668>
   1a868:	je     1a789 <g_str_equal@plt+0xd4c9>
   1a86e:	test   BYTE PTR [rip+0x26b62c],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   1a875:	je     1a789 <g_str_equal@plt+0xd4c9>
   1a87b:	lea    rdi,[rsp+0x20]
   1a880:	xor    esi,esi
   1a882:	call   c3e0 <gettimeofday@plt>
   1a887:	mov    r13,QWORD PTR [rsp+0x28]
   1a88c:	mov    r12,QWORD PTR [rsp+0x20]
   1a891:	call   c5b0 <getpid@plt>
   1a896:	lea    rdi,[rip+0x41193]        # 5ba30 <_fini@@Base+0x92dc>
   1a89d:	mov    esi,eax
   1a89f:	mov    r8,rbx
   1a8a2:	mov    rcx,r13
   1a8a5:	mov    rdx,r12
   1a8a8:	xor    eax,eax
   1a8aa:	call   431a0 <g_str_equal@plt+0x35ee0>
   1a8af:	jmp    1a789 <g_str_equal@plt+0xd4c9>
   1a8b4:	nop    DWORD PTR [rax+0x0]
   1a8b8:	cmp    WORD PTR [rip+0x26c6f6],0x0        # 286fb6 <stdout@@GLIBC_2.2.5+0x266e>
   1a8c0:	je     1a7f5 <g_str_equal@plt+0xd535>
   1a8c6:	test   BYTE PTR [rip+0x26b5d4],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   1a8cd:	je     1a7f5 <g_str_equal@plt+0xd535>
   1a8d3:	lea    rdi,[rsp+0x20]
   1a8d8:	xor    esi,esi
   1a8da:	call   c3e0 <gettimeofday@plt>
   1a8df:	mov    rcx,QWORD PTR [rsp+0x28]
   1a8e4:	mov    r15,QWORD PTR [rsp+0x20]
   1a8e9:	mov    QWORD PTR [rsp+0x8],rcx
   1a8ee:	call   c5b0 <getpid@plt>
   1a8f3:	mov    rcx,QWORD PTR [rsp+0x8]
   1a8f8:	lea    rdi,[rip+0x41181]        # 5ba80 <_fini@@Base+0x932c>
   1a8ff:	mov    esi,eax
   1a901:	mov    r9d,r14d
   1a904:	mov    r8,rbx
   1a907:	mov    rdx,r15
   1a90a:	xor    eax,eax
   1a90c:	call   431a0 <g_str_equal@plt+0x35ee0>
   1a911:	jmp    1a7f5 <g_str_equal@plt+0xd535>
   1a916:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1a920:	cmp    WORD PTR [rip+0x26c68a],0x0        # 286fb2 <stdout@@GLIBC_2.2.5+0x266a>
   1a928:	je     1a767 <g_str_equal@plt+0xd4a7>
   1a92e:	test   BYTE PTR [rip+0x26b56c],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   1a935:	je     1a767 <g_str_equal@plt+0xd4a7>
   1a93b:	lea    rdi,[rsp+0x20]
   1a940:	xor    esi,esi
   1a942:	call   c3e0 <gettimeofday@plt>
   1a947:	mov    r14,QWORD PTR [rsp+0x28]
   1a94c:	mov    r13,QWORD PTR [rsp+0x20]
   1a951:	call   c5b0 <getpid@plt>
   1a956:	lea    rdi,[rip+0x41033]        # 5b990 <_fini@@Base+0x923c>
   1a95d:	mov    esi,eax
   1a95f:	mov    r8,rbx
   1a962:	mov    rcx,r14
   1a965:	mov    rdx,r13
   1a968:	xor    eax,eax
   1a96a:	call   431a0 <g_str_equal@plt+0x35ee0>
   1a96f:	jmp    1a767 <g_str_equal@plt+0xd4a7>
   1a974:	nop    DWORD PTR [rax+0x0]
   1a978:	cmp    WORD PTR [rip+0x26c634],0x0        # 286fb4 <stdout@@GLIBC_2.2.5+0x266c>
   1a980:	je     1a826 <g_str_equal@plt+0xd566>
   1a986:	test   BYTE PTR [rip+0x26b514],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   1a98d:	je     1a826 <g_str_equal@plt+0xd566>
   1a993:	lea    rdi,[rsp+0x20]
   1a998:	xor    esi,esi
   1a99a:	call   c3e0 <gettimeofday@plt>
   1a99f:	mov    r13,QWORD PTR [rsp+0x28]
   1a9a4:	mov    r12,QWORD PTR [rsp+0x20]
   1a9a9:	call   c5b0 <getpid@plt>
   1a9ae:	lea    rdi,[rip+0x40f93]        # 5b948 <_fini@@Base+0x91f4>
   1a9b5:	mov    esi,eax
   1a9b7:	mov    r8,rbx
   1a9ba:	mov    rcx,r13
   1a9bd:	mov    rdx,r12
   1a9c0:	xor    eax,eax
   1a9c2:	call   431a0 <g_str_equal@plt+0x35ee0>
   1a9c7:	jmp    1a826 <g_str_equal@plt+0xd566>
   1a9cc:	nop    DWORD PTR [rax+0x0]
   1a9d0:	cmp    WORD PTR [rip+0x26c5d6],0x0        # 286fae <stdout@@GLIBC_2.2.5+0x2666>
   1a9d8:	je     1a84e <g_str_equal@plt+0xd58e>
   1a9de:	test   BYTE PTR [rip+0x26b4bc],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   1a9e5:	je     1a84e <g_str_equal@plt+0xd58e>
   1a9eb:	lea    rdi,[rsp+0x20]
   1a9f0:	xor    esi,esi
   1a9f2:	call   c3e0 <gettimeofday@plt>
   1a9f7:	mov    r13,QWORD PTR [rsp+0x28]
   1a9fc:	mov    r12,QWORD PTR [rsp+0x20]
   1aa01:	call   c5b0 <getpid@plt>
   1aa06:	lea    rdi,[rip+0x40fd3]        # 5b9e0 <_fini@@Base+0x928c>
   1aa0d:	mov    esi,eax
   1aa0f:	mov    r8,rbx
   1aa12:	mov    rcx,r13
   1aa15:	mov    rdx,r12
   1aa18:	xor    eax,eax
   1aa1a:	call   431a0 <g_str_equal@plt+0x35ee0>
   1aa1f:	jmp    1a84e <g_str_equal@plt+0xd58e>
   1aa24:	call   cd30 <__stack_chk_fail@plt>
   1aa29:	nop    DWORD PTR [rax+0x0]
   1aa30:	push   r13
   1aa32:	push   r12
   1aa34:	push   rbp
   1aa35:	push   rbx
   1aa36:	mov    rbx,rdx
   1aa39:	sub    rsp,0x8
   1aa3d:	mov    r12,QWORD PTR [rdx]
   1aa40:	mov    rbp,QWORD PTR [rdx+0x8]
   1aa44:	mov    rdi,r12
   1aa47:	call   1f090 <g_str_equal@plt+0x11dd0>
   1aa4c:	lea    r8,[rip+0x4139d]        # 5bdf0 <_fini@@Base+0x969c>
   1aa53:	lea    rdx,[rip+0x4107e]        # 5bad8 <_fini@@Base+0x9384>
   1aa5a:	lea    rsi,[rip+0x411c0]        # 5bc21 <_fini@@Base+0x94cd>
   1aa61:	mov    ecx,0xd6
   1aa66:	mov    rdi,rax
   1aa69:	call   205c0 <g_str_equal@plt+0x13300>
   1aa6e:	mov    rdi,rbx
   1aa71:	mov    r13,rax
   1aa74:	call   d2b0 <g_free@plt>
   1aa79:	mov    rdx,rbp
   1aa7c:	mov    rsi,r12
   1aa7f:	mov    rdi,r13
   1aa82:	call   1a700 <g_str_equal@plt+0xd440>
   1aa87:	test   rbp,rbp
   1aa8a:	je     1aa94 <g_str_equal@plt+0xd7d4>
   1aa8c:	mov    rdi,rbp
   1aa8f:	call   cd40 <g_main_context_unref@plt>
   1aa94:	add    rsp,0x8
   1aa98:	xor    eax,eax
   1aa9a:	pop    rbx
   1aa9b:	pop    rbp
   1aa9c:	pop    r12
   1aa9e:	pop    r13
   1aaa0:	ret    
   1aaa1:	nop    DWORD PTR [rax+rax*1+0x0]
   1aaa6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1aab0:	lea    rdi,[rip+0x265ae9]        # 2805a0 <_fini@@Base+0x22de4c>
   1aab7:	jmp    202f0 <g_str_equal@plt+0x13030>
   1aabc:	nop    DWORD PTR [rax+0x0]
   1aac0:	lea    rdx,[rip+0x41011]        # 5bad8 <_fini@@Base+0x9384>
   1aac7:	lea    rsi,[rip+0x381c9]        # 52c97 <_fini@@Base+0x543>
   1aace:	lea    r8,[rip+0x412fb]        # 5bdd0 <_fini@@Base+0x967c>
   1aad5:	sub    rsp,0x8
   1aad9:	mov    ecx,0x18f
   1aade:	call   20770 <g_str_equal@plt+0x134b0>
   1aae3:	lea    rdx,[rip+0x2f6]        # 1ade0 <g_str_equal@plt+0xdb20>
   1aaea:	lea    rcx,[rip+0x20f]        # 1ad00 <g_str_equal@plt+0xda40>
   1aaf1:	lea    rsi,[rip+0x1c8]        # 1acc0 <g_str_equal@plt+0xda00>
   1aaf8:	lea    rdi,[rip+0xf1]        # 1abf0 <g_str_equal@plt+0xd930>
   1aaff:	mov    QWORD PTR [rax+0x60],rdx
   1ab03:	mov    QWORD PTR [rax+0x68],rcx
   1ab07:	lea    rdx,[rip+0x182]        # 1ac90 <g_str_equal@plt+0xd9d0>
   1ab0e:	lea    rcx,[rip+0x14b]        # 1ac60 <g_str_equal@plt+0xd9a0>
   1ab15:	mov    QWORD PTR [rax+0x80],rsi
   1ab1c:	lea    rsi,[rip+0x10d]        # 1ac30 <g_str_equal@plt+0xd970>
   1ab23:	mov    QWORD PTR [rax+0x98],rdx
   1ab2a:	lea    rdx,[rip+0x8f]        # 1abc0 <g_str_equal@plt+0xd900>
   1ab31:	mov    QWORD PTR [rax+0x88],rdi
   1ab38:	mov    QWORD PTR [rax+0x90],rcx
   1ab3f:	lea    rcx,[rip+0x1a]        # 1ab60 <g_str_equal@plt+0xd8a0>
   1ab46:	mov    QWORD PTR [rax+0x70],rsi
   1ab4a:	mov    QWORD PTR [rax+0x78],rdx
   1ab4e:	mov    QWORD PTR [rax+0xa8],rcx
   1ab55:	add    rsp,0x8
   1ab59:	ret    
   1ab5a:	nop    WORD PTR [rax+rax*1+0x0]
   1ab60:	push   r13
   1ab62:	push   r12
   1ab64:	mov    r13,r8
   1ab67:	push   rbp
   1ab68:	push   rbx
   1ab69:	mov    rbp,rdx
   1ab6c:	mov    rbx,rsi
   1ab6f:	lea    r8,[rip+0x4122a]        # 5bda0 <_fini@@Base+0x964c>
   1ab76:	lea    rdx,[rip+0x40f5b]        # 5bad8 <_fini@@Base+0x9384>
   1ab7d:	lea    rsi,[rip+0x4109d]        # 5bc21 <_fini@@Base+0x94cd>
   1ab84:	sub    rsp,0x8
   1ab88:	mov    r12,rcx
   1ab8b:	mov    ecx,0x179
   1ab90:	call   205c0 <g_str_equal@plt+0x13300>
   1ab95:	mov    rdi,QWORD PTR [rax+0x50]
   1ab99:	add    rsp,0x8
   1ab9d:	mov    r8,r13
   1aba0:	mov    rcx,r12
   1aba3:	mov    rdx,rbp
   1aba6:	mov    rsi,rbx
   1aba9:	pop    rbx
   1abaa:	pop    rbp
   1abab:	pop    r12
   1abad:	pop    r13
   1abaf:	jmp    16c10 <g_str_equal@plt+0x9950>
   1abb4:	xchg   ax,ax
   1abb6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1abc0:	push   rbx
   1abc1:	lea    r8,[rip+0x411b8]        # 5bd80 <_fini@@Base+0x962c>
   1abc8:	mov    ebx,esi
   1abca:	lea    rdx,[rip+0x40f07]        # 5bad8 <_fini@@Base+0x9384>
   1abd1:	lea    rsi,[rip+0x41049]        # 5bc21 <_fini@@Base+0x94cd>
   1abd8:	mov    ecx,0x181
   1abdd:	call   205c0 <g_str_equal@plt+0x13300>
   1abe2:	mov    esi,ebx
   1abe4:	mov    rdi,QWORD PTR [rax+0x50]
   1abe8:	pop    rbx
   1abe9:	jmp    16bb0 <g_str_equal@plt+0x98f0>
   1abee:	xchg   ax,ax
   1abf0:	push   rbp
   1abf1:	push   rbx
   1abf2:	mov    rbp,rdx
   1abf5:	mov    ebx,esi
   1abf7:	lea    rdx,[rip+0x40eda]        # 5bad8 <_fini@@Base+0x9384>
   1abfe:	lea    rsi,[rip+0x4101c]        # 5bc21 <_fini@@Base+0x94cd>
   1ac05:	lea    r8,[rip+0x41154]        # 5bd60 <_fini@@Base+0x960c>
   1ac0c:	sub    rsp,0x8
   1ac10:	mov    ecx,0x166
   1ac15:	call   205c0 <g_str_equal@plt+0x13300>
   1ac1a:	mov    rdi,QWORD PTR [rax+0x50]
   1ac1e:	add    rsp,0x8
   1ac22:	mov    rdx,rbp
   1ac25:	mov    esi,ebx
   1ac27:	pop    rbx
   1ac28:	pop    rbp
   1ac29:	jmp    16db0 <g_str_equal@plt+0x9af0>
   1ac2e:	xchg   ax,ax
   1ac30:	push   rbx
   1ac31:	lea    r8,[rip+0x41108]        # 5bd40 <_fini@@Base+0x95ec>
   1ac38:	mov    rbx,rsi
   1ac3b:	lea    rdx,[rip+0x40e96]        # 5bad8 <_fini@@Base+0x9384>
   1ac42:	lea    rsi,[rip+0x40fd8]        # 5bc21 <_fini@@Base+0x94cd>
   1ac49:	mov    ecx,0x16e
   1ac4e:	call   205c0 <g_str_equal@plt+0x13300>
   1ac53:	mov    rsi,rbx
   1ac56:	mov    rdi,QWORD PTR [rax+0x50]
   1ac5a:	pop    rbx
   1ac5b:	jmp    16b60 <g_str_equal@plt+0x98a0>
   1ac60:	push   rbx
   1ac61:	lea    r8,[rip+0x410b8]        # 5bd20 <_fini@@Base+0x95cc>
   1ac68:	mov    ebx,esi
   1ac6a:	lea    rdx,[rip+0x40e67]        # 5bad8 <_fini@@Base+0x9384>
   1ac71:	lea    rsi,[rip+0x40fa9]        # 5bc21 <_fini@@Base+0x94cd>
   1ac78:	mov    ecx,0x15d
   1ac7d:	call   205c0 <g_str_equal@plt+0x13300>
   1ac82:	movzx  esi,bl
   1ac85:	mov    rdi,QWORD PTR [rax+0x50]
   1ac89:	pop    rbx
   1ac8a:	jmp    16e90 <g_str_equal@plt+0x9bd0>
   1ac8f:	nop
   1ac90:	push   rbx
   1ac91:	lea    r8,[rip+0x41068]        # 5bd00 <_fini@@Base+0x95ac>
   1ac98:	mov    ebx,esi
   1ac9a:	lea    rdx,[rip+0x40e37]        # 5bad8 <_fini@@Base+0x9384>
   1aca1:	lea    rsi,[rip+0x40f79]        # 5bc21 <_fini@@Base+0x94cd>
   1aca8:	mov    ecx,0x155
   1acad:	call   205c0 <g_str_equal@plt+0x13300>
   1acb2:	movzx  esi,bl
   1acb5:	mov    rdi,QWORD PTR [rax+0x50]
   1acb9:	pop    rbx
   1acba:	jmp    16e30 <g_str_equal@plt+0x9b70>
   1acbf:	nop
   1acc0:	push   rbp
   1acc1:	push   rbx
   1acc2:	mov    rbp,rdx
   1acc5:	mov    ebx,esi
   1acc7:	lea    rdx,[rip+0x40e0a]        # 5bad8 <_fini@@Base+0x9384>
   1acce:	lea    rsi,[rip+0x40f4c]        # 5bc21 <_fini@@Base+0x94cd>
   1acd5:	lea    r8,[rip+0x41004]        # 5bce0 <_fini@@Base+0x958c>
   1acdc:	sub    rsp,0x8
   1ace0:	mov    ecx,0x14d
   1ace5:	call   205c0 <g_str_equal@plt+0x13300>
   1acea:	mov    rdi,QWORD PTR [rax+0x50]
   1acee:	add    rsp,0x8
   1acf2:	movzx  esi,bl
   1acf5:	mov    rdx,rbp
   1acf8:	pop    rbx
   1acf9:	pop    rbp
   1acfa:	jmp    16b10 <g_str_equal@plt+0x9850>
   1acff:	nop
   1ad00:	push   r15
   1ad02:	push   r14
   1ad04:	lea    r8,[rip+0x40fb5]        # 5bcc0 <_fini@@Base+0x956c>
   1ad0b:	push   r13
   1ad0d:	push   r12
   1ad0f:	mov    r12,rdx
   1ad12:	push   rbp
   1ad13:	push   rbx
   1ad14:	lea    rdx,[rip+0x40dbd]        # 5bad8 <_fini@@Base+0x9384>
   1ad1b:	mov    rbx,rsi
   1ad1e:	lea    rsi,[rip+0x40efc]        # 5bc21 <_fini@@Base+0x94cd>
   1ad25:	mov    ecx,0x107
   1ad2a:	sub    rsp,0x8
   1ad2e:	mov    r13,r9
   1ad31:	call   205c0 <g_str_equal@plt+0x13300>
   1ad36:	test   r12,r12
   1ad39:	je     1ad9f <g_str_equal@plt+0xdadf>
   1ad3b:	mov    r15,rax
   1ad3e:	add    rbx,0x8
   1ad42:	xor    r14d,r14d
   1ad45:	xor    ebp,ebp
   1ad47:	jmp    1ad65 <g_str_equal@plt+0xdaa5>
   1ad49:	nop    DWORD PTR [rax+0x0]
   1ad50:	add    r14,rax
   1ad53:	cmp    QWORD PTR [rbx],rax
   1ad56:	ja     1ad8d <g_str_equal@plt+0xdacd>
   1ad58:	add    rbp,0x1
   1ad5c:	add    rbx,0x10
   1ad60:	cmp    r12,rbp
   1ad63:	je     1ad8d <g_str_equal@plt+0xdacd>
   1ad65:	mov    rsi,QWORD PTR [rbx-0x8]
   1ad69:	mov    rdi,QWORD PTR [r15+0x58]
   1ad6d:	mov    rdx,QWORD PTR [rbx]
   1ad70:	call   127a0 <g_str_equal@plt+0x54e0>
   1ad75:	test   rax,rax
   1ad78:	jns    1ad50 <g_str_equal@plt+0xda90>
   1ad7a:	call   cc80 <__errno_location@plt>
   1ad7f:	mov    r8d,DWORD PTR [rax]
   1ad82:	cmp    r8d,0xb
   1ad86:	jne    1adad <g_str_equal@plt+0xdaed>
   1ad88:	test   r14,r14
   1ad8b:	je     1ada4 <g_str_equal@plt+0xdae4>
   1ad8d:	add    rsp,0x8
   1ad91:	mov    rax,r14
   1ad94:	pop    rbx
   1ad95:	pop    rbp
   1ad96:	pop    r12
   1ad98:	pop    r13
   1ad9a:	pop    r14
   1ad9c:	pop    r15
   1ad9e:	ret    
   1ad9f:	xor    r14d,r14d
   1ada2:	jmp    1ad8d <g_str_equal@plt+0xdacd>
   1ada4:	mov    r14,0xfffffffffffffffe
   1adab:	jmp    1ad8d <g_str_equal@plt+0xdacd>
   1adad:	lea    r9,[rip+0x40e7d]        # 5bc31 <_fini@@Base+0x94dd>
   1adb4:	lea    rcx,[rip+0x40f05]        # 5bcc0 <_fini@@Base+0x956c>
   1adbb:	lea    rsi,[rip+0x40d16]        # 5bad8 <_fini@@Base+0x9384>
   1adc2:	mov    edx,0x119
   1adc7:	mov    rdi,r13
   1adca:	xor    eax,eax
   1adcc:	call   3a140 <g_str_equal@plt+0x2ce80>
   1add1:	mov    r14,0xffffffffffffffff
   1add8:	jmp    1ad8d <g_str_equal@plt+0xdacd>
   1adda:	nop    WORD PTR [rax+rax*1+0x0]
   1ade0:	push   r15
   1ade2:	push   r14
   1ade4:	lea    r8,[rip+0x40eb5]        # 5bca0 <_fini@@Base+0x954c>
   1adeb:	push   r13
   1aded:	push   r12
   1adef:	mov    r12,rdx
   1adf2:	push   rbp
   1adf3:	push   rbx
   1adf4:	lea    rdx,[rip+0x40cdd]        # 5bad8 <_fini@@Base+0x9384>
   1adfb:	mov    rbx,rsi
   1adfe:	lea    rsi,[rip+0x40e1c]        # 5bc21 <_fini@@Base+0x94cd>
   1ae05:	mov    ecx,0x12c
   1ae0a:	sub    rsp,0x8
   1ae0e:	mov    r13,r9
   1ae11:	call   205c0 <g_str_equal@plt+0x13300>
   1ae16:	test   r12,r12
   1ae19:	je     1ae7f <g_str_equal@plt+0xdbbf>
   1ae1b:	mov    r15,rax
   1ae1e:	add    rbx,0x8
   1ae22:	xor    r14d,r14d
   1ae25:	xor    ebp,ebp
   1ae27:	jmp    1ae45 <g_str_equal@plt+0xdb85>
   1ae29:	nop    DWORD PTR [rax+0x0]
   1ae30:	add    r14,rax
   1ae33:	cmp    QWORD PTR [rbx],rax
   1ae36:	ja     1ae6d <g_str_equal@plt+0xdbad>
   1ae38:	add    rbp,0x1
   1ae3c:	add    rbx,0x10
   1ae40:	cmp    r12,rbp
   1ae43:	je     1ae6d <g_str_equal@plt+0xdbad>
   1ae45:	mov    rsi,QWORD PTR [rbx-0x8]
   1ae49:	mov    rdi,QWORD PTR [r15+0x58]
   1ae4d:	mov    rdx,QWORD PTR [rbx]
   1ae50:	call   12780 <g_str_equal@plt+0x54c0>
   1ae55:	test   rax,rax
   1ae58:	jg     1ae30 <g_str_equal@plt+0xdb70>
   1ae5a:	call   cc80 <__errno_location@plt>
   1ae5f:	mov    r8d,DWORD PTR [rax]
   1ae62:	cmp    r8d,0xb
   1ae66:	jne    1ae8d <g_str_equal@plt+0xdbcd>
   1ae68:	test   r14,r14
   1ae6b:	je     1ae84 <g_str_equal@plt+0xdbc4>
   1ae6d:	add    rsp,0x8
   1ae71:	mov    rax,r14
   1ae74:	pop    rbx
   1ae75:	pop    rbp
   1ae76:	pop    r12
   1ae78:	pop    r13
   1ae7a:	pop    r14
   1ae7c:	pop    r15
   1ae7e:	ret    
   1ae7f:	xor    r14d,r14d
   1ae82:	jmp    1ae6d <g_str_equal@plt+0xdbad>
   1ae84:	mov    r14,0xfffffffffffffffe
   1ae8b:	jmp    1ae6d <g_str_equal@plt+0xdbad>
   1ae8d:	lea    r9,[rip+0x40dba]        # 5bc4e <_fini@@Base+0x94fa>
   1ae94:	lea    rcx,[rip+0x40e05]        # 5bca0 <_fini@@Base+0x954c>
   1ae9b:	lea    rsi,[rip+0x40c36]        # 5bad8 <_fini@@Base+0x9384>
   1aea2:	mov    edx,0x13e
   1aea7:	mov    rdi,r13
   1aeaa:	xor    eax,eax
   1aeac:	call   3a140 <g_str_equal@plt+0x2ce80>
   1aeb1:	mov    r14,0xffffffffffffffff
   1aeb8:	jmp    1ae6d <g_str_equal@plt+0xdbad>
   1aeba:	nop    WORD PTR [rax+rax*1+0x0]
   1aec0:	push   rbx
   1aec1:	lea    r8,[rip+0x40db8]        # 5bc80 <_fini@@Base+0x952c>
   1aec8:	lea    rdx,[rip+0x40c09]        # 5bad8 <_fini@@Base+0x9384>
   1aecf:	lea    rsi,[rip+0x40d4b]        # 5bc21 <_fini@@Base+0x94cd>
   1aed6:	mov    ecx,0xf9
   1aedb:	call   205c0 <g_str_equal@plt+0x13300>
   1aee0:	mov    rdi,QWORD PTR [rax+0x50]
   1aee4:	mov    rbx,rax
   1aee7:	call   20b90 <g_str_equal@plt+0x138d0>
   1aeec:	mov    rdi,QWORD PTR [rbx+0x58]
   1aef0:	pop    rbx
   1aef1:	jmp    12720 <g_str_equal@plt+0x5460>
   1aef6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1af00:	push   rbp
   1af01:	push   rbx
   1af02:	mov    rbp,rsi
   1af05:	mov    rbx,rdi
   1af08:	lea    r8,[rip+0x40f41]        # 5be50 <_fini@@Base+0x96fc>
   1af0f:	mov    rdi,rdx
   1af12:	lea    rsi,[rip+0x40d08]        # 5bc21 <_fini@@Base+0x94cd>
   1af19:	lea    rdx,[rip+0x40bb8]        # 5bad8 <_fini@@Base+0x9384>
   1af20:	sub    rsp,0x8
   1af24:	mov    ecx,0x31
   1af29:	call   205c0 <g_str_equal@plt+0x13300>
   1af2e:	mov    rdi,QWORD PTR [rax+0x50]
   1af32:	xor    ecx,ecx
   1af34:	mov    rdx,rbp
   1af37:	mov    rsi,rbx
   1af3a:	call   16a70 <g_str_equal@plt+0x97b0>
   1af3f:	cmp    rax,0xfffffffffffffffe
   1af43:	je     1af70 <g_str_equal@plt+0xdcb0>
   1af45:	test   rax,rax
   1af48:	js     1af58 <g_str_equal@plt+0xdc98>
   1af4a:	add    rsp,0x8
   1af4e:	pop    rbx
   1af4f:	pop    rbp
   1af50:	ret    
   1af51:	nop    DWORD PTR [rax+0x0]
   1af58:	call   cc80 <__errno_location@plt>
   1af5d:	mov    DWORD PTR [rax],0x5
   1af63:	mov    rax,0xffffffffffffffff
   1af6a:	jmp    1af4a <g_str_equal@plt+0xdc8a>
   1af6c:	nop    DWORD PTR [rax+0x0]
   1af70:	call   cc80 <__errno_location@plt>
   1af75:	mov    DWORD PTR [rax],0xb
   1af7b:	mov    rax,0xffffffffffffffff
   1af82:	jmp    1af4a <g_str_equal@plt+0xdc8a>
   1af84:	xchg   ax,ax
   1af86:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1af90:	push   rbp
   1af91:	push   rbx
   1af92:	mov    rbp,rsi
   1af95:	mov    rbx,rdi
   1af98:	lea    r8,[rip+0x40e91]        # 5be30 <_fini@@Base+0x96dc>
   1af9f:	mov    rdi,rdx
   1afa2:	lea    rsi,[rip+0x40c78]        # 5bc21 <_fini@@Base+0x94cd>
   1afa9:	lea    rdx,[rip+0x40b28]        # 5bad8 <_fini@@Base+0x9384>
   1afb0:	sub    rsp,0x8
   1afb4:	mov    ecx,0x1f
   1afb9:	call   205c0 <g_str_equal@plt+0x13300>
   1afbe:	mov    rdi,QWORD PTR [rax+0x50]
   1afc2:	xor    ecx,ecx
   1afc4:	mov    rdx,rbp
   1afc7:	mov    rsi,rbx
   1afca:	call   16ac0 <g_str_equal@plt+0x9800>
   1afcf:	cmp    rax,0xfffffffffffffffe
   1afd3:	je     1b000 <g_str_equal@plt+0xdd40>
   1afd5:	test   rax,rax
   1afd8:	js     1afe8 <g_str_equal@plt+0xdd28>
   1afda:	add    rsp,0x8
   1afde:	pop    rbx
   1afdf:	pop    rbp
   1afe0:	ret    
   1afe1:	nop    DWORD PTR [rax+0x0]
   1afe8:	call   cc80 <__errno_location@plt>
   1afed:	mov    DWORD PTR [rax],0x5
   1aff3:	mov    rax,0xffffffffffffffff
   1affa:	jmp    1afda <g_str_equal@plt+0xdd1a>
   1affc:	nop    DWORD PTR [rax+0x0]
   1b000:	call   cc80 <__errno_location@plt>
   1b005:	mov    DWORD PTR [rax],0xb
   1b00b:	mov    rax,0xffffffffffffffff
   1b012:	jmp    1afda <g_str_equal@plt+0xdd1a>
   1b014:	xchg   ax,ax
   1b016:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1b020:	push   r15
   1b022:	push   r14
   1b024:	mov    r14,rcx
   1b027:	push   r13
   1b029:	push   r12
   1b02b:	mov    r13,rdx
   1b02e:	push   rbp
   1b02f:	push   rbx
   1b030:	mov    rbp,rdi
   1b033:	lea    rdi,[rip+0x40be7]        # 5bc21 <_fini@@Base+0x94cd>
   1b03a:	mov    r12,rsi
   1b03d:	sub    rsp,0x28
   1b041:	mov    rax,QWORD PTR fs:0x28
   1b04a:	mov    QWORD PTR [rsp+0x18],rax
   1b04f:	xor    eax,eax
   1b051:	call   20420 <g_str_equal@plt+0x13160>
   1b056:	lea    r8,[rip+0x40e13]        # 5be70 <_fini@@Base+0x971c>
   1b05d:	lea    rdx,[rip+0x40a74]        # 5bad8 <_fini@@Base+0x9384>
   1b064:	lea    rsi,[rip+0x40bb6]        # 5bc21 <_fini@@Base+0x94cd>
   1b06b:	mov    ecx,0x48
   1b070:	mov    rdi,rax
   1b073:	call   205c0 <g_str_equal@plt+0x13300>
   1b078:	mov    rdi,rbp
   1b07b:	mov    QWORD PTR [rax+0x50],rbp
   1b07f:	mov    rbx,rax
   1b082:	call   20b70 <g_str_equal@plt+0x138b0>
   1b087:	xor    esi,esi
   1b089:	mov    r8,r14
   1b08c:	mov    ecx,0x1
   1b091:	mov    rdx,r13
   1b094:	mov    rdi,r12
   1b097:	call   126f0 <g_str_equal@plt+0x5430>
   1b09c:	test   rax,rax
   1b09f:	mov    QWORD PTR [rbx+0x58],rax
   1b0a3:	je     1b140 <g_str_equal@plt+0xde80>
   1b0a9:	lea    rdx,[rip+0xfffffffffffffe50]        # 1af00 <g_str_equal@plt+0xdc40>
   1b0b0:	lea    rsi,[rip+0xfffffffffffffed9]        # 1af90 <g_str_equal@plt+0xdcd0>
   1b0b7:	mov    rcx,rbx
   1b0ba:	mov    rdi,rax
   1b0bd:	call   12770 <g_str_equal@plt+0x54b0>
   1b0c2:	mov    ecx,DWORD PTR [rip+0x269a10]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   1b0c8:	test   ecx,ecx
   1b0ca:	jne    1b0f0 <g_str_equal@plt+0xde30>
   1b0cc:	mov    rdx,QWORD PTR [rsp+0x18]
   1b0d1:	xor    rdx,QWORD PTR fs:0x28
   1b0da:	mov    rax,rbx
   1b0dd:	jne    1b14f <g_str_equal@plt+0xde8f>
   1b0df:	add    rsp,0x28
   1b0e3:	pop    rbx
   1b0e4:	pop    rbp
   1b0e5:	pop    r12
   1b0e7:	pop    r13
   1b0e9:	pop    r14
   1b0eb:	pop    r15
   1b0ed:	ret    
   1b0ee:	xchg   ax,ax
   1b0f0:	cmp    WORD PTR [rip+0x26bec2],0x0        # 286fba <stdout@@GLIBC_2.2.5+0x2672>
   1b0f8:	je     1b0cc <g_str_equal@plt+0xde0c>
   1b0fa:	test   BYTE PTR [rip+0x26ada0],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   1b101:	je     1b0cc <g_str_equal@plt+0xde0c>
   1b103:	mov    rdi,rsp
   1b106:	xor    esi,esi
   1b108:	call   c3e0 <gettimeofday@plt>
   1b10d:	mov    r15,QWORD PTR [rsp+0x8]
   1b112:	mov    r14,QWORD PTR [rsp]
   1b116:	call   c5b0 <getpid@plt>
   1b11b:	push   r13
   1b11d:	lea    rdi,[rip+0x409f4]        # 5bb18 <_fini@@Base+0x93c4>
   1b124:	push   r12
   1b126:	mov    rdx,r14
   1b129:	mov    esi,eax
   1b12b:	mov    r9,rbp
   1b12e:	mov    r8,rbx
   1b131:	mov    rcx,r15
   1b134:	xor    eax,eax
   1b136:	call   431a0 <g_str_equal@plt+0x35ee0>
   1b13b:	pop    rax
   1b13c:	pop    rdx
   1b13d:	jmp    1b0cc <g_str_equal@plt+0xde0c>
   1b13f:	nop
   1b140:	mov    rdi,rbx
   1b143:	xor    ebx,ebx
   1b145:	call   20b90 <g_str_equal@plt+0x138d0>
   1b14a:	jmp    1b0cc <g_str_equal@plt+0xde0c>
   1b14f:	call   cd30 <__stack_chk_fail@plt>
   1b154:	xchg   ax,ax
   1b156:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1b160:	push   r15
   1b162:	push   r14
   1b164:	mov    r14,rcx
   1b167:	push   r13
   1b169:	push   r12
   1b16b:	mov    r13,rdx
   1b16e:	push   rbp
   1b16f:	push   rbx
   1b170:	mov    rbp,rdi
   1b173:	lea    rdi,[rip+0x40aa7]        # 5bc21 <_fini@@Base+0x94cd>
   1b17a:	mov    r12,rsi
   1b17d:	sub    rsp,0x28
   1b181:	mov    rax,QWORD PTR fs:0x28
   1b18a:	mov    QWORD PTR [rsp+0x18],rax
   1b18f:	xor    eax,eax
   1b191:	call   20420 <g_str_equal@plt+0x13160>
   1b196:	lea    r8,[rip+0x40c73]        # 5be10 <_fini@@Base+0x96bc>
   1b19d:	lea    rdx,[rip+0x40934]        # 5bad8 <_fini@@Base+0x9384>
   1b1a4:	lea    rsi,[rip+0x40a76]        # 5bc21 <_fini@@Base+0x94cd>
   1b1ab:	mov    ecx,0x6e
   1b1b0:	mov    rdi,rax
   1b1b3:	call   205c0 <g_str_equal@plt+0x13300>
   1b1b8:	lea    r8,[rip+0x40c51]        # 5be10 <_fini@@Base+0x96bc>
   1b1bf:	lea    rdx,[rip+0x40912]        # 5bad8 <_fini@@Base+0x9384>
   1b1c6:	lea    rsi,[rip+0x37aca]        # 52c97 <_fini@@Base+0x543>
   1b1cd:	mov    rbx,rax
   1b1d0:	mov    ecx,0x6f
   1b1d5:	mov    rdi,rax
   1b1d8:	call   205c0 <g_str_equal@plt+0x13300>
   1b1dd:	mov    QWORD PTR [rbx+0x50],rbp
   1b1e1:	mov    esi,0x1
   1b1e6:	mov    rdi,rbp
   1b1e9:	mov    r15,rax
   1b1ec:	call   16860 <g_str_equal@plt+0x95a0>
   1b1f1:	test   al,al
   1b1f3:	jne    1b268 <g_str_equal@plt+0xdfa8>
   1b1f5:	mov    rdi,rbp
   1b1f8:	call   20b70 <g_str_equal@plt+0x138b0>
   1b1fd:	xor    ecx,ecx
   1b1ff:	xor    edx,edx
   1b201:	mov    r8,r14
   1b204:	mov    rsi,r13
   1b207:	mov    rdi,r12
   1b20a:	call   126f0 <g_str_equal@plt+0x5430>
   1b20f:	test   rax,rax
   1b212:	mov    QWORD PTR [rbx+0x58],rax
   1b216:	je     1b2d8 <g_str_equal@plt+0xe018>
   1b21c:	lea    rdx,[rip+0xfffffffffffffcdd]        # 1af00 <g_str_equal@plt+0xdc40>
   1b223:	lea    rsi,[rip+0xfffffffffffffd66]        # 1af90 <g_str_equal@plt+0xdcd0>
   1b22a:	mov    rcx,rbx
   1b22d:	mov    rdi,rax
   1b230:	call   12770 <g_str_equal@plt+0x54b0>
   1b235:	mov    ecx,DWORD PTR [rip+0x26989d]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   1b23b:	test   ecx,ecx
   1b23d:	jne    1b280 <g_str_equal@plt+0xdfc0>
   1b23f:	mov    rdx,QWORD PTR [rsp+0x18]
   1b244:	xor    rdx,QWORD PTR fs:0x28
   1b24d:	mov    rax,rbx
   1b250:	jne    1b2e7 <g_str_equal@plt+0xe027>
   1b256:	add    rsp,0x28
   1b25a:	pop    rbx
   1b25b:	pop    rbp
   1b25c:	pop    r12
   1b25e:	pop    r13
   1b260:	pop    r14
   1b262:	pop    r15
   1b264:	ret    
   1b265:	nop    DWORD PTR [rax]
   1b268:	mov    esi,0x1
   1b26d:	mov    rdi,r15
   1b270:	call   16870 <g_str_equal@plt+0x95b0>
   1b275:	jmp    1b1f5 <g_str_equal@plt+0xdf35>
   1b27a:	nop    WORD PTR [rax+rax*1+0x0]
   1b280:	cmp    WORD PTR [rip+0x26bd34],0x0        # 286fbc <stdout@@GLIBC_2.2.5+0x2674>
   1b288:	je     1b23f <g_str_equal@plt+0xdf7f>
   1b28a:	test   BYTE PTR [rip+0x26ac10],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   1b291:	je     1b23f <g_str_equal@plt+0xdf7f>
   1b293:	mov    rdi,rsp
   1b296:	xor    esi,esi
   1b298:	call   c3e0 <gettimeofday@plt>
   1b29d:	mov    r15,QWORD PTR [rsp+0x8]
   1b2a2:	mov    r14,QWORD PTR [rsp]
   1b2a6:	call   c5b0 <getpid@plt>
   1b2ab:	push   r13
   1b2ad:	lea    rdi,[rip+0x408c4]        # 5bb78 <_fini@@Base+0x9424>
   1b2b4:	push   r12
   1b2b6:	mov    rdx,r14
   1b2b9:	mov    esi,eax
   1b2bb:	mov    r9,rbp
   1b2be:	mov    r8,rbx
   1b2c1:	mov    rcx,r15
   1b2c4:	xor    eax,eax
   1b2c6:	call   431a0 <g_str_equal@plt+0x35ee0>
   1b2cb:	pop    rax
   1b2cc:	pop    rdx
   1b2cd:	jmp    1b23f <g_str_equal@plt+0xdf7f>
   1b2d2:	nop    WORD PTR [rax+rax*1+0x0]
   1b2d8:	mov    rdi,rbx
   1b2db:	xor    ebx,ebx
   1b2dd:	call   20b90 <g_str_equal@plt+0x138d0>
   1b2e2:	jmp    1b23f <g_str_equal@plt+0xdf7f>
   1b2e7:	call   cd30 <__stack_chk_fail@plt>
   1b2ec:	nop    DWORD PTR [rax+0x0]
   1b2f0:	push   r14
   1b2f2:	push   r13
   1b2f4:	push   r12
   1b2f6:	push   rbp
   1b2f7:	mov    r12,r8
   1b2fa:	push   rbx
   1b2fb:	mov    rbx,rdi
   1b2fe:	sub    rsp,0x20
   1b302:	mov    rax,QWORD PTR fs:0x28
   1b30b:	mov    QWORD PTR [rsp+0x18],rax
   1b310:	xor    eax,eax
   1b312:	call   1ec80 <g_str_equal@plt+0x119c0>
   1b317:	mov    rbp,rax
   1b31a:	mov    eax,DWORD PTR [rip+0x2697b8]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   1b320:	test   eax,eax
   1b322:	jne    1b350 <g_str_equal@plt+0xe090>
   1b324:	mov    rdx,r12
   1b327:	mov    rsi,rbp
   1b32a:	mov    rdi,rbx
   1b32d:	call   1a700 <g_str_equal@plt+0xd440>
   1b332:	mov    rax,QWORD PTR [rsp+0x18]
   1b337:	xor    rax,QWORD PTR fs:0x28
   1b340:	jne    1b396 <g_str_equal@plt+0xe0d6>
   1b342:	add    rsp,0x20
   1b346:	pop    rbx
   1b347:	pop    rbp
   1b348:	pop    r12
   1b34a:	pop    r13
   1b34c:	pop    r14
   1b34e:	ret    
   1b34f:	nop
   1b350:	cmp    WORD PTR [rip+0x26bc60],0x0        # 286fb8 <stdout@@GLIBC_2.2.5+0x2670>
   1b358:	je     1b324 <g_str_equal@plt+0xe064>
   1b35a:	test   BYTE PTR [rip+0x26ab40],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   1b361:	je     1b324 <g_str_equal@plt+0xe064>
   1b363:	mov    rdi,rsp
   1b366:	xor    esi,esi
   1b368:	call   c3e0 <gettimeofday@plt>
   1b36d:	mov    r14,QWORD PTR [rsp+0x8]
   1b372:	mov    r13,QWORD PTR [rsp]
   1b376:	call   c5b0 <getpid@plt>
   1b37b:	lea    rdi,[rip+0x40856]        # 5bbd8 <_fini@@Base+0x9484>
   1b382:	mov    esi,eax
   1b384:	mov    r8,rbx
   1b387:	mov    rcx,r14
   1b38a:	mov    rdx,r13
   1b38d:	xor    eax,eax
   1b38f:	call   431a0 <g_str_equal@plt+0x35ee0>
   1b394:	jmp    1b324 <g_str_equal@plt+0xe064>
   1b396:	call   cd30 <__stack_chk_fail@plt>
   1b39b:	nop    DWORD PTR [rax+rax*1+0x0]
   1b3a0:	mov    rax,QWORD PTR [rdi+0x58]
   1b3a4:	ret    
   1b3a5:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1b3af:	nop
   1b3b0:	mov    DWORD PTR [rsi],0xffffffff
   1b3b6:	xor    eax,eax
   1b3b8:	ret    
   1b3b9:	nop    DWORD PTR [rax+0x0]
   1b3c0:	movzx  eax,WORD PTR [rdi+0x66]
   1b3c4:	and    eax,DWORD PTR [rdi+0x70]
   1b3c7:	ret    
   1b3c8:	nop    DWORD PTR [rax+rax*1+0x0]
   1b3d0:	mov    rax,rsi
   1b3d3:	movzx  esi,WORD PTR [rdi+0x66]
   1b3d7:	and    esi,DWORD PTR [rdi+0x70]
   1b3da:	mov    rdi,QWORD PTR [rdi+0x68]
   1b3de:	jmp    rax
   1b3e0:	movzx  eax,WORD PTR [rdi+0x66]
   1b3e4:	or     ax,WORD PTR [rdi+0x6e]
   1b3e8:	movzx  eax,ax
   1b3eb:	and    eax,DWORD PTR [rdi+0x78]
   1b3ee:	ret    
   1b3ef:	nop
   1b3f0:	mov    rax,rsi
   1b3f3:	movzx  esi,WORD PTR [rdi+0x66]
   1b3f7:	or     si,WORD PTR [rdi+0x6e]
   1b3fb:	movzx  esi,si
   1b3fe:	and    esi,DWORD PTR [rdi+0x78]
   1b401:	mov    rdi,QWORD PTR [rdi+0x70]
   1b405:	jmp    rax
   1b407:	nop    WORD PTR [rax+rax*1+0x0]
   1b410:	mov    rdi,QWORD PTR [rdi+0x68]
   1b414:	jmp    20b90 <g_str_equal@plt+0x138d0>
   1b419:	nop    DWORD PTR [rax+0x0]
   1b420:	mov    rdi,QWORD PTR [rdi+0x70]
   1b424:	jmp    20b90 <g_str_equal@plt+0x138d0>
   1b429:	nop    DWORD PTR [rax+0x0]
   1b430:	mov    DWORD PTR [rsi],0xffffffff
   1b436:	xor    eax,eax
   1b438:	ret    
   1b439:	nop    DWORD PTR [rax+0x0]
   1b440:	push   r13
   1b442:	push   r12
   1b444:	mov    r12,rdi
   1b447:	push   rbp
   1b448:	push   rbx
   1b449:	lea    rdi,[rip+0x266e90]        # 2822e0 <g_test_config_vars+0xf20>
   1b450:	mov    r13d,esi
   1b453:	mov    esi,0x78
   1b458:	mov    ebp,edx
   1b45a:	sub    rsp,0x8
   1b45e:	call   c610 <g_source_new@plt>
   1b463:	mov    rdi,r12
   1b466:	mov    rbx,rax
   1b469:	mov    QWORD PTR [rax+0x68],r12
   1b46d:	call   20b70 <g_str_equal@plt+0x138b0>
   1b472:	lea    rsi,[rbx+0x60]
   1b476:	mov    DWORD PTR [rbx+0x70],ebp
   1b479:	mov    DWORD PTR [rbx+0x60],r13d
   1b47d:	mov    WORD PTR [rbx+0x64],bp
   1b481:	mov    rdi,rbx
   1b484:	call   cc50 <g_source_add_poll@plt>
   1b489:	add    rsp,0x8
   1b48d:	mov    rax,rbx
   1b490:	pop    rbx
   1b491:	pop    rbp
   1b492:	pop    r12
   1b494:	pop    r13
   1b496:	ret    
   1b497:	nop    WORD PTR [rax+rax*1+0x0]
   1b4a0:	jmp    1b440 <g_str_equal@plt+0xe180>
   1b4a2:	nop    DWORD PTR [rax+0x0]
   1b4a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1b4b0:	push   r14
   1b4b2:	push   r13
   1b4b4:	mov    r14d,esi
   1b4b7:	push   r12
   1b4b9:	mov    r12,rdi
   1b4bc:	push   rbp
   1b4bd:	lea    rdi,[rip+0x266ddc]        # 2822a0 <g_test_config_vars+0xee0>
   1b4c4:	push   rbx
   1b4c5:	mov    esi,0x80
   1b4ca:	mov    ebp,ecx
   1b4cc:	mov    r13d,edx
   1b4cf:	call   c610 <g_source_new@plt>
   1b4d4:	mov    rdi,r12
   1b4d7:	mov    QWORD PTR [rax+0x70],r12
   1b4db:	mov    rbx,rax
   1b4de:	call   20b70 <g_str_equal@plt+0x138b0>
   1b4e3:	mov    eax,ebp
   1b4e5:	mov    DWORD PTR [rbx+0x78],ebp
   1b4e8:	lea    rsi,[rbx+0x60]
   1b4ec:	and    eax,0x1
   1b4ef:	and    ebp,0x4
   1b4f2:	mov    DWORD PTR [rbx+0x60],r14d
   1b4f6:	mov    WORD PTR [rbx+0x64],ax
   1b4fa:	mov    DWORD PTR [rbx+0x68],r13d
   1b4fe:	mov    rdi,rbx
   1b501:	mov    WORD PTR [rbx+0x6c],bp
   1b505:	call   cc50 <g_source_add_poll@plt>
   1b50a:	lea    rsi,[rbx+0x68]
   1b50e:	mov    rdi,rbx
   1b511:	call   cc50 <g_source_add_poll@plt>
   1b516:	mov    rax,rbx
   1b519:	pop    rbx
   1b51a:	pop    rbp
   1b51b:	pop    r12
   1b51d:	pop    r13
   1b51f:	pop    r14
   1b521:	ret    
   1b522:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1b52c:	nop    DWORD PTR [rax+0x0]
   1b530:	mov    rdx,QWORD PTR [rdi+0x60]
   1b534:	mov    eax,0x1
   1b539:	cmp    QWORD PTR [rdx+0xb8],0x0
   1b541:	jne    1b550 <g_str_equal@plt+0xe290>
   1b543:	mov    ecx,DWORD PTR [rdx+0xf0]
   1b549:	xor    eax,eax
   1b54b:	test   ecx,ecx
   1b54d:	setne  al
   1b550:	cmp    QWORD PTR [rdx+0x90],0x1fff
   1b55b:	ja     1b560 <g_str_equal@plt+0xe2a0>
   1b55d:	or     eax,0x4
   1b560:	and    eax,DWORD PTR [rdi+0x68]
   1b563:	ret    
   1b564:	xchg   ax,ax
   1b566:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1b570:	mov    DWORD PTR [rsi],0xffffffff
   1b576:	mov    rdx,QWORD PTR [rdi+0x60]
   1b57a:	mov    eax,0x1
   1b57f:	cmp    QWORD PTR [rdx+0xb8],0x0
   1b587:	jne    1b596 <g_str_equal@plt+0xe2d6>
   1b589:	mov    ecx,DWORD PTR [rdx+0xf0]
   1b58f:	xor    eax,eax
   1b591:	test   ecx,ecx
   1b593:	setne  al
   1b596:	cmp    QWORD PTR [rdx+0x90],0x1fff
   1b5a1:	ja     1b5a6 <g_str_equal@plt+0xe2e6>
   1b5a3:	or     eax,0x4
   1b5a6:	and    eax,DWORD PTR [rdi+0x68]
   1b5a9:	ret    
   1b5aa:	nop    WORD PTR [rax+rax*1+0x0]
   1b5b0:	push   r12
   1b5b2:	push   rbp
   1b5b3:	mov    r12,rdx
   1b5b6:	push   rbx
   1b5b7:	mov    rax,QWORD PTR [rdi+0x60]
   1b5bb:	mov    rbp,rsi
   1b5be:	mov    esi,0x1
   1b5c3:	cmp    QWORD PTR [rax+0xb8],0x0
   1b5cb:	jne    1b5db <g_str_equal@plt+0xe31b>
   1b5cd:	mov    edx,DWORD PTR [rax+0xf0]
   1b5d3:	xor    esi,esi
   1b5d5:	test   edx,edx
   1b5d7:	setne  sil
   1b5db:	cmp    QWORD PTR [rax+0x90],0x1fff
   1b5e6:	ja     1b5eb <g_str_equal@plt+0xe32b>
   1b5e8:	or     esi,0x4
   1b5eb:	mov    ebx,DWORD PTR [rdi+0x68]
   1b5ee:	lea    rdx,[rip+0x4089b]        # 5be90 <_fini@@Base+0x973c>
   1b5f5:	lea    r8,[rip+0x41844]        # 5ce40 <_fini@@Base+0xa6ec>
   1b5fc:	mov    rdi,rax
   1b5ff:	mov    ecx,0x4e5
   1b604:	and    ebx,esi
   1b606:	lea    rsi,[rip+0x3768a]        # 52c97 <_fini@@Base+0x543>
   1b60d:	call   205c0 <g_str_equal@plt+0x13300>
   1b612:	mov    rdx,r12
   1b615:	mov    esi,ebx
   1b617:	mov    rdi,rax
   1b61a:	pop    rbx
   1b61b:	mov    rax,rbp
   1b61e:	pop    rbp
   1b61f:	pop    r12
   1b621:	jmp    rax
   1b623:	nop    DWORD PTR [rax]
   1b626:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1b630:	push   r14
   1b632:	lea    r14,[rdi+0x80]
   1b639:	push   r13
   1b63b:	mov    r13,rsi
   1b63e:	push   r12
   1b640:	xor    r12d,r12d
   1b643:	push   rbp
   1b644:	mov    rbp,rdi
   1b647:	push   rbx
   1b648:	jmp    1b699 <g_str_equal@plt+0xe3d9>
   1b64a:	nop    WORD PTR [rax+rax*1+0x0]
   1b650:	mov    rsi,QWORD PTR [rbp+0xa0]
   1b657:	mov    rdi,QWORD PTR [rbp+0x50]
   1b65b:	mov    rcx,r13
   1b65e:	call   16ac0 <g_str_equal@plt+0x9800>
   1b663:	test   rax,rax
   1b666:	mov    rbx,rax
   1b669:	js     1b6b8 <g_str_equal@plt+0xe3f8>
   1b66b:	mov    rsi,rax
   1b66e:	mov    rdi,r14
   1b671:	add    r12,rbx
   1b674:	call   42da0 <g_str_equal@plt+0x35ae0>
   1b679:	mov    rdx,QWORD PTR [rbp+0xd8]
   1b680:	mov    eax,0x0
   1b685:	mov    rcx,rdx
   1b688:	sub    rcx,rbx
   1b68b:	cmp    rbx,rdx
   1b68e:	cmovbe rax,rcx
   1b692:	mov    QWORD PTR [rbp+0xd8],rax
   1b699:	mov    rdx,QWORD PTR [rbp+0x90]
   1b6a0:	test   rdx,rdx
   1b6a3:	jne    1b650 <g_str_equal@plt+0xe390>
   1b6a5:	pop    rbx
   1b6a6:	mov    rax,r12
   1b6a9:	pop    rbp
   1b6aa:	pop    r12
   1b6ac:	pop    r13
   1b6ae:	pop    r14
   1b6b0:	ret    
   1b6b1:	nop    DWORD PTR [rax+0x0]
   1b6b8:	cmp    rax,0xfffffffffffffffe
   1b6bc:	jne    1b6c3 <g_str_equal@plt+0xe403>
   1b6be:	test   r12,r12
   1b6c1:	jg     1b6a5 <g_str_equal@plt+0xe3e5>
   1b6c3:	mov    r12,rbx
   1b6c6:	mov    rax,r12
   1b6c9:	pop    rbx
   1b6ca:	pop    rbp
   1b6cb:	pop    r12
   1b6cd:	pop    r13
   1b6cf:	pop    r14
   1b6d1:	ret    
   1b6d2:	nop    DWORD PTR [rax+0x0]
   1b6d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1b6e0:	push   rbp
   1b6e1:	push   rbx
   1b6e2:	xor    edi,edi
   1b6e4:	sub    rsp,0xe8
   1b6eb:	lea    rbp,[rsp+0x10]
   1b6f0:	lea    rbx,[rsp+0x50]
   1b6f5:	mov    rax,QWORD PTR fs:0x28
   1b6fe:	mov    QWORD PTR [rsp+0xd8],rax
   1b706:	xor    eax,eax
   1b708:	call   d260 <time@plt>
   1b70d:	lea    rdi,[rsp+0x8]
   1b712:	mov    rsi,rbp
   1b715:	mov    QWORD PTR [rsp+0x8],rax
   1b71a:	call   c9e0 <gmtime_r@plt>
   1b71f:	lea    rdx,[rip+0x412a3]        # 5c9c9 <_fini@@Base+0xa275>
   1b726:	mov    rcx,rbp
   1b729:	mov    esi,0x80
   1b72e:	mov    rdi,rbx
   1b731:	call   d170 <strftime@plt>
   1b736:	mov    rdi,rbx
   1b739:	call   c370 <g_strdup@plt>
   1b73e:	mov    rdx,QWORD PTR [rsp+0xd8]
   1b746:	xor    rdx,QWORD PTR fs:0x28
   1b74f:	jne    1b75b <g_str_equal@plt+0xe49b>
   1b751:	add    rsp,0xe8
   1b758:	pop    rbx
   1b759:	pop    rbp
   1b75a:	ret    
   1b75b:	call   cd30 <__stack_chk_fail@plt>
   1b760:	push   r12
   1b762:	push   rbp
   1b763:	push   rbx
   1b764:	mov    rbx,rdi
   1b767:	mov    rdi,rsi
   1b76a:	sub    rsp,0xd0
   1b771:	test   al,al
   1b773:	mov    QWORD PTR [rsp+0x30],rdx
   1b778:	mov    QWORD PTR [rsp+0x38],rcx
   1b77d:	mov    QWORD PTR [rsp+0x40],r8
   1b782:	mov    QWORD PTR [rsp+0x48],r9
   1b787:	je     1b7c0 <g_str_equal@plt+0xe500>
   1b789:	movaps XMMWORD PTR [rsp+0x50],xmm0
   1b78e:	movaps XMMWORD PTR [rsp+0x60],xmm1
   1b793:	movaps XMMWORD PTR [rsp+0x70],xmm2
   1b798:	movaps XMMWORD PTR [rsp+0x80],xmm3
   1b7a0:	movaps XMMWORD PTR [rsp+0x90],xmm4
   1b7a8:	movaps XMMWORD PTR [rsp+0xa0],xmm5
   1b7b0:	movaps XMMWORD PTR [rsp+0xb0],xmm6
   1b7b8:	movaps XMMWORD PTR [rsp+0xc0],xmm7
   1b7c0:	mov    rax,QWORD PTR fs:0x28
   1b7c9:	mov    QWORD PTR [rsp+0x18],rax
   1b7ce:	xor    eax,eax
   1b7d0:	lea    rax,[rsp+0xf0]
   1b7d8:	mov    rsi,rsp
   1b7db:	sub    rbx,0xffffffffffffff80
   1b7df:	mov    QWORD PTR [rsp+0x8],rax
   1b7e4:	lea    rax,[rsp+0x20]
   1b7e9:	mov    DWORD PTR [rsp],0x10
   1b7f0:	mov    DWORD PTR [rsp+0x4],0x30
   1b7f8:	mov    QWORD PTR [rsp+0x10],rax
   1b7fd:	call   c960 <g_strdup_vprintf@plt>
   1b802:	mov    rdi,rax
   1b805:	mov    rbp,rax
   1b808:	call   c720 <strlen@plt>
   1b80d:	mov    rdi,rbx
   1b810:	mov    r12,rax
   1b813:	mov    rsi,rax
   1b816:	call   42c30 <g_str_equal@plt+0x35970>
   1b81b:	mov    rdx,r12
   1b81e:	mov    rsi,rbp
   1b821:	mov    rdi,rbx
   1b824:	call   42d70 <g_str_equal@plt+0x35ab0>
   1b829:	mov    rax,QWORD PTR [rsp+0x18]
   1b82e:	xor    rax,QWORD PTR fs:0x28
   1b837:	jne    1b845 <g_str_equal@plt+0xe585>
   1b839:	add    rsp,0xd0
   1b840:	pop    rbx
   1b841:	pop    rbp
   1b842:	pop    r12
   1b844:	ret    
   1b845:	call   cd30 <__stack_chk_fail@plt>
   1b84a:	nop    WORD PTR [rax+rax*1+0x0]
   1b850:	push   r12
   1b852:	push   rbp
   1b853:	mov    r12,rsi
   1b856:	push   rbx
   1b857:	mov    rbp,rdi
   1b85a:	call   1b6e0 <g_str_equal@plt+0xe420>
   1b85f:	mov    rdi,rbp
   1b862:	mov    rbx,rax
   1b865:	mov    rdx,rax
   1b868:	mov    rsi,r12
   1b86b:	xor    eax,eax
   1b86d:	call   1b760 <g_str_equal@plt+0xe4a0>
   1b872:	mov    rdi,rbx
   1b875:	pop    rbx
   1b876:	pop    rbp
   1b877:	pop    r12
   1b879:	jmp    d2b0 <g_free@plt>
   1b87e:	xchg   ax,ax
   1b880:	test   rsi,rsi
   1b883:	je     1b8e0 <g_str_equal@plt+0xe620>
   1b885:	push   r13
   1b887:	push   r12
   1b889:	mov    r13,rdx
   1b88c:	push   rbp
   1b88d:	push   rbx
   1b88e:	mov    r12,rsi
   1b891:	mov    rbx,rdi
   1b894:	xor    ebp,ebp
   1b896:	sub    rsp,0x8
   1b89a:	jmp    1b8ad <g_str_equal@plt+0xe5ed>
   1b89c:	nop    DWORD PTR [rax+0x0]
   1b8a0:	add    rbp,0x1
   1b8a4:	add    rbx,0x10
   1b8a8:	cmp    r12,rbp
   1b8ab:	je     1b8d0 <g_str_equal@plt+0xe610>
   1b8ad:	mov    rdi,QWORD PTR [rbx]
   1b8b0:	mov    rsi,r13
   1b8b3:	call   d2c0 <g_str_equal@plt>
   1b8b8:	test   eax,eax
   1b8ba:	je     1b8a0 <g_str_equal@plt+0xe5e0>
   1b8bc:	mov    rax,QWORD PTR [rbx+0x8]
   1b8c0:	add    rsp,0x8
   1b8c4:	pop    rbx
   1b8c5:	pop    rbp
   1b8c6:	pop    r12
   1b8c8:	pop    r13
   1b8ca:	ret    
   1b8cb:	nop    DWORD PTR [rax+rax*1+0x0]
   1b8d0:	add    rsp,0x8
   1b8d4:	xor    eax,eax
   1b8d6:	pop    rbx
   1b8d7:	pop    rbp
   1b8d8:	pop    r12
   1b8da:	pop    r13
   1b8dc:	ret    
   1b8dd:	nop    DWORD PTR [rax]
   1b8e0:	xor    eax,eax
   1b8e2:	ret    
   1b8e3:	nop    DWORD PTR [rax]
   1b8e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1b8f0:	mov    rdi,QWORD PTR [rdi+0x60]
   1b8f4:	jmp    20b90 <g_str_equal@plt+0x138d0>
   1b8f9:	nop    DWORD PTR [rax+0x0]
   1b900:	lea    r8,[rip+0x414a9]        # 5cdb0 <_fini@@Base+0xa65c>
   1b907:	lea    rdx,[rip+0x40582]        # 5be90 <_fini@@Base+0x973c>
   1b90e:	lea    rsi,[rip+0x410ce]        # 5c9e3 <_fini@@Base+0xa28f>
   1b915:	sub    rsp,0x8
   1b919:	mov    ecx,0x3e8
   1b91e:	call   205c0 <g_str_equal@plt+0x13300>
   1b923:	add    rsp,0x8
   1b927:	mov    rdi,rax
   1b92a:	jmp    20b90 <g_str_equal@plt+0x138d0>
   1b92f:	nop
   1b930:	lea    rdi,[rip+0x264ce9]        # 280620 <_fini@@Base+0x22decc>
   1b937:	jmp    202f0 <g_str_equal@plt+0x13030>
   1b93c:	nop    DWORD PTR [rax+0x0]
   1b940:	lea    rdx,[rip+0x40549]        # 5be90 <_fini@@Base+0x973c>
   1b947:	lea    rsi,[rip+0x37349]        # 52c97 <_fini@@Base+0x543>
   1b94e:	lea    r8,[rip+0x414bb]        # 5ce10 <_fini@@Base+0xa6bc>
   1b955:	sub    rsp,0x8
   1b959:	mov    ecx,0x510
   1b95e:	call   20770 <g_str_equal@plt+0x134b0>
   1b963:	lea    rdx,[rip+0xfd6]        # 1c940 <g_str_equal@plt+0xf680>
   1b96a:	lea    rcx,[rip+0xe8f]        # 1c800 <g_str_equal@plt+0xf540>
   1b971:	lea    rsi,[rip+0x448]        # 1bdc0 <g_str_equal@plt+0xeb00>
   1b978:	lea    rdi,[rip+0x51]        # 1b9d0 <g_str_equal@plt+0xe710>
   1b97f:	mov    QWORD PTR [rax+0x60],rdx
   1b983:	lea    rdx,[rip+0x406]        # 1bd90 <g_str_equal@plt+0xead0>
   1b98a:	mov    QWORD PTR [rax+0x68],rcx
   1b98e:	mov    QWORD PTR [rax+0x80],rsi
   1b995:	lea    rcx,[rip+0x3c4]        # 1bd60 <g_str_equal@plt+0xeaa0>
   1b99c:	lea    rsi,[rip+0x2ed]        # 1bc90 <g_str_equal@plt+0xe9d0>
   1b9a3:	mov    QWORD PTR [rax+0x90],rdx
   1b9aa:	lea    rdx,[rip+0xd6f]        # 1c720 <g_str_equal@plt+0xf460>
   1b9b1:	mov    QWORD PTR [rax+0x88],rdi
   1b9b8:	mov    QWORD PTR [rax+0x98],rcx
   1b9bf:	mov    QWORD PTR [rax+0x70],rsi
   1b9c3:	mov    QWORD PTR [rax+0x78],rdx
   1b9c7:	add    rsp,0x8
   1b9cb:	ret    
   1b9cc:	nop    DWORD PTR [rax+0x0]
   1b9d0:	push   rbp
   1b9d1:	push   rbx
   1b9d2:	mov    rbp,rdx
   1b9d5:	mov    ebx,esi
   1b9d7:	lea    rdx,[rip+0x404b2]        # 5be90 <_fini@@Base+0x973c>
   1b9de:	lea    rsi,[rip+0x40ffe]        # 5c9e3 <_fini@@Base+0xa28f>
   1b9e5:	lea    r8,[rip+0x412e4]        # 5ccd0 <_fini@@Base+0xa57c>
   1b9ec:	sub    rsp,0x8
   1b9f0:	mov    ecx,0x4b0
   1b9f5:	call   205c0 <g_str_equal@plt+0x13300>
   1b9fa:	mov    rdi,QWORD PTR [rax+0x50]
   1b9fe:	add    rsp,0x8
   1ba02:	mov    rdx,rbp
   1ba05:	mov    esi,ebx
   1ba07:	pop    rbx
   1ba08:	pop    rbp
   1ba09:	jmp    16db0 <g_str_equal@plt+0x9af0>
   1ba0e:	xchg   ax,ax
   1ba10:	push   r15
   1ba12:	push   r14
   1ba14:	mov    r15d,esi
   1ba17:	push   r13
   1ba19:	push   r12
   1ba1b:	mov    r13,rdi
   1ba1e:	push   rbp
   1ba1f:	push   rbx
   1ba20:	mov    esi,ecx
   1ba22:	mov    rbx,r8
   1ba25:	mov    rdi,rdx
   1ba28:	mov    r12,rdx
   1ba2b:	sub    rsp,0x48
   1ba2f:	mov    r14,rcx
   1ba32:	mov    rax,QWORD PTR fs:0x28
   1ba3b:	mov    QWORD PTR [rsp+0x38],rax
   1ba40:	xor    eax,eax
   1ba42:	call   3b050 <g_str_equal@plt+0x2dd90>
   1ba47:	cmp    rax,rbx
   1ba4a:	jb     1bbc7 <g_str_equal@plt+0xe907>
   1ba50:	mov    eax,r15d
   1ba53:	or     eax,0xffffff80
   1ba56:	cmp    rbx,0x7d
   1ba5a:	mov    BYTE PTR [rsp+0x2a],al
   1ba5e:	ja     1bb08 <g_str_equal@plt+0xe848>
   1ba64:	mov    BYTE PTR [rsp+0x2b],bl
   1ba68:	mov    ebp,0x2
   1ba6d:	mov    ecx,DWORD PTR [rip+0x269065]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   1ba73:	test   ecx,ecx
   1ba75:	jne    1bb38 <g_str_equal@plt+0xe878>
   1ba7b:	sub    r13,0xffffffffffffff80
   1ba7f:	lea    rsi,[rbx+rbp*1]
   1ba83:	mov    rdi,r13
   1ba86:	call   42c30 <g_str_equal@plt+0x35970>
   1ba8b:	lea    rsi,[rsp+0x2a]
   1ba90:	mov    rdx,rbp
   1ba93:	mov    rdi,r13
   1ba96:	call   42d70 <g_str_equal@plt+0x35ab0>
   1ba9b:	test   r14,r14
   1ba9e:	je     1bae0 <g_str_equal@plt+0xe820>
   1baa0:	test   rbx,rbx
   1baa3:	je     1bae0 <g_str_equal@plt+0xe820>
   1baa5:	xor    r15d,r15d
   1baa8:	jmp    1bab5 <g_str_equal@plt+0xe7f5>
   1baaa:	nop    WORD PTR [rax+rax*1+0x0]
   1bab0:	test   rbx,rbx
   1bab3:	je     1bae0 <g_str_equal@plt+0xe820>
   1bab5:	mov    rbp,QWORD PTR [r12+0x8]
   1baba:	mov    rsi,QWORD PTR [r12]
   1babe:	mov    rdi,r13
   1bac1:	cmp    rbx,rbp
   1bac4:	cmovbe rbp,rbx
   1bac8:	add    r15,0x1
   1bacc:	add    r12,0x10
   1bad0:	mov    rdx,rbp
   1bad3:	sub    rbx,rbp
   1bad6:	call   42d70 <g_str_equal@plt+0x35ab0>
   1badb:	cmp    r14,r15
   1bade:	ja     1bab0 <g_str_equal@plt+0xe7f0>
   1bae0:	mov    rax,QWORD PTR [rsp+0x38]
   1bae5:	xor    rax,QWORD PTR fs:0x28
   1baee:	jne    1bbc2 <g_str_equal@plt+0xe902>
   1baf4:	add    rsp,0x48
   1baf8:	pop    rbx
   1baf9:	pop    rbp
   1bafa:	pop    r12
   1bafc:	pop    r13
   1bafe:	pop    r14
   1bb00:	pop    r15
   1bb02:	ret    
   1bb03:	nop    DWORD PTR [rax+rax*1+0x0]
   1bb08:	cmp    rbx,0xffff
   1bb0f:	ja     1bba8 <g_str_equal@plt+0xe8e8>
   1bb15:	mov    ecx,DWORD PTR [rip+0x268fbd]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   1bb1b:	mov    eax,ebx
   1bb1d:	mov    BYTE PTR [rsp+0x2b],0x7e
   1bb22:	ror    ax,0x8
   1bb26:	mov    ebp,0x4
   1bb2b:	mov    WORD PTR [rsp+0x2c],ax
   1bb30:	test   ecx,ecx
   1bb32:	je     1ba7b <g_str_equal@plt+0xe7bb>
   1bb38:	cmp    WORD PTR [rip+0x26b456],0x0        # 286f96 <stdout@@GLIBC_2.2.5+0x264e>
   1bb40:	je     1ba7b <g_str_equal@plt+0xe7bb>
   1bb46:	test   BYTE PTR [rip+0x26a354],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   1bb4d:	je     1ba7b <g_str_equal@plt+0xe7bb>
   1bb53:	lea    rdi,[rsp+0x10]
   1bb58:	xor    esi,esi
   1bb5a:	call   c3e0 <gettimeofday@plt>
   1bb5f:	mov    rcx,QWORD PTR [rsp+0x18]
   1bb64:	mov    rdx,QWORD PTR [rsp+0x10]
   1bb69:	mov    QWORD PTR [rsp+0x8],rcx
   1bb6e:	mov    QWORD PTR [rsp],rdx
   1bb72:	call   c5b0 <getpid@plt>
   1bb77:	push   rbx
   1bb78:	push   rbp
   1bb79:	lea    rdi,[rip+0x40350]        # 5bed0 <_fini@@Base+0x977c>
   1bb80:	mov    rcx,QWORD PTR [rsp+0x18]
   1bb85:	mov    rdx,QWORD PTR [rsp+0x10]
   1bb8a:	mov    esi,eax
   1bb8c:	movzx  r9d,r15b
   1bb90:	mov    r8,r13
   1bb93:	xor    eax,eax
   1bb95:	call   431a0 <g_str_equal@plt+0x35ee0>
   1bb9a:	pop    rax
   1bb9b:	pop    rdx
   1bb9c:	jmp    1ba7b <g_str_equal@plt+0xe7bb>
   1bba1:	nop    DWORD PTR [rax+0x0]
   1bba8:	mov    rax,rbx
   1bbab:	mov    BYTE PTR [rsp+0x2b],0x7f
   1bbb0:	mov    ebp,0xa
   1bbb5:	bswap  rax
   1bbb8:	mov    QWORD PTR [rsp+0x2c],rax
   1bbbd:	jmp    1ba6d <g_str_equal@plt+0xe7ad>
   1bbc2:	call   cd30 <__stack_chk_fail@plt>
   1bbc7:	lea    rcx,[rip+0x41162]        # 5cd30 <_fini@@Base+0xa5dc>
   1bbce:	lea    rsi,[rip+0x402bb]        # 5be90 <_fini@@Base+0x973c>
   1bbd5:	lea    rdi,[rip+0x40e1b]        # 5c9f7 <_fini@@Base+0xa2a3>
   1bbdc:	mov    edx,0x267
   1bbe1:	call   c390 <__assert_fail@plt>
   1bbe6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1bbf0:	push   rbx
   1bbf1:	mov    rbx,rdi
   1bbf4:	mov    rdi,rdx
   1bbf7:	ror    si,0x8
   1bbfb:	sub    rsp,0x40
   1bbff:	mov    rax,QWORD PTR fs:0x28
   1bc08:	mov    QWORD PTR [rsp+0x38],rax
   1bc0d:	xor    eax,eax
   1bc0f:	lea    rax,[rsp+0xc]
   1bc14:	mov    WORD PTR [rsp+0xc],si
   1bc19:	mov    QWORD PTR [rsp+0x20],rdx
   1bc1e:	mov    QWORD PTR [rsp+0x28],0x0
   1bc27:	mov    QWORD PTR [rsp+0x18],0x2
   1bc30:	mov    QWORD PTR [rsp+0x10],rax
   1bc35:	call   c720 <strlen@plt>
   1bc3a:	lea    rdx,[rsp+0x10]
   1bc3f:	lea    r8,[rax+0x2]
   1bc43:	mov    ecx,0x2
   1bc48:	mov    esi,0x8
   1bc4d:	mov    rdi,rbx
   1bc50:	mov    QWORD PTR [rsp+0x28],rax
   1bc55:	call   1ba10 <g_str_equal@plt+0xe750>
   1bc5a:	xor    esi,esi
   1bc5c:	mov    rdi,rbx
   1bc5f:	call   1b630 <g_str_equal@plt+0xe370>
   1bc64:	mov    rdi,QWORD PTR [rbx+0x50]
   1bc68:	xor    edx,edx
   1bc6a:	xor    esi,esi
   1bc6c:	call   16db0 <g_str_equal@plt+0x9af0>
   1bc71:	mov    rax,QWORD PTR [rsp+0x38]
   1bc76:	xor    rax,QWORD PTR fs:0x28
   1bc7f:	jne    1bc87 <g_str_equal@plt+0xe9c7>
   1bc81:	add    rsp,0x40
   1bc85:	pop    rbx
   1bc86:	ret    
   1bc87:	call   cd30 <__stack_chk_fail@plt>
   1bc8c:	nop    DWORD PTR [rax+0x0]
   1bc90:	push   r14
   1bc92:	push   r13
   1bc94:	lea    r8,[rip+0x41015]        # 5ccb0 <_fini@@Base+0xa55c>
   1bc9b:	push   r12
   1bc9d:	push   rbp
   1bc9e:	lea    rdx,[rip+0x401eb]        # 5be90 <_fini@@Base+0x973c>
   1bca5:	push   rbx
   1bca6:	mov    rbp,rsi
   1bca9:	lea    rsi,[rip+0x40d33]        # 5c9e3 <_fini@@Base+0xa28f>
   1bcb0:	mov    ecx,0x4b8
   1bcb5:	mov    rbx,rdi
   1bcb8:	sub    rsp,0x20
   1bcbc:	mov    rax,QWORD PTR fs:0x28
   1bcc5:	mov    QWORD PTR [rsp+0x18],rax
   1bcca:	xor    eax,eax
   1bccc:	call   205c0 <g_str_equal@plt+0x13300>
   1bcd1:	mov    r12,rax
   1bcd4:	mov    eax,DWORD PTR [rip+0x268dfe]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   1bcda:	test   eax,eax
   1bcdc:	jne    1bd10 <g_str_equal@plt+0xea50>
   1bcde:	mov    rdi,QWORD PTR [r12+0x50]
   1bce3:	mov    rsi,rbp
   1bce6:	call   16b60 <g_str_equal@plt+0x98a0>
   1bceb:	mov    rdx,QWORD PTR [rsp+0x18]
   1bcf0:	xor    rdx,QWORD PTR fs:0x28
   1bcf9:	jne    1bd56 <g_str_equal@plt+0xea96>
   1bcfb:	add    rsp,0x20
   1bcff:	pop    rbx
   1bd00:	pop    rbp
   1bd01:	pop    r12
   1bd03:	pop    r13
   1bd05:	pop    r14
   1bd07:	ret    
   1bd08:	nop    DWORD PTR [rax+rax*1+0x0]
   1bd10:	cmp    WORD PTR [rip+0x26b27c],0x0        # 286f94 <stdout@@GLIBC_2.2.5+0x264c>
   1bd18:	je     1bcde <g_str_equal@plt+0xea1e>
   1bd1a:	test   BYTE PTR [rip+0x26a180],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   1bd21:	je     1bcde <g_str_equal@plt+0xea1e>
   1bd23:	mov    rdi,rsp
   1bd26:	xor    esi,esi
   1bd28:	call   c3e0 <gettimeofday@plt>
   1bd2d:	mov    r14,QWORD PTR [rsp+0x8]
   1bd32:	mov    r13,QWORD PTR [rsp]
   1bd36:	call   c5b0 <getpid@plt>
   1bd3b:	lea    rdi,[rip+0x401fe]        # 5bf40 <_fini@@Base+0x97ec>
   1bd42:	mov    esi,eax
   1bd44:	mov    r8,rbx
   1bd47:	mov    rcx,r14
   1bd4a:	mov    rdx,r13
   1bd4d:	xor    eax,eax
   1bd4f:	call   431a0 <g_str_equal@plt+0x35ee0>
   1bd54:	jmp    1bcde <g_str_equal@plt+0xea1e>
   1bd56:	call   cd30 <__stack_chk_fail@plt>
   1bd5b:	nop    DWORD PTR [rax+rax*1+0x0]
   1bd60:	push   rbx
   1bd61:	lea    r8,[rip+0x40f28]        # 5cc90 <_fini@@Base+0xa53c>
   1bd68:	mov    ebx,esi
   1bd6a:	lea    rdx,[rip+0x4011f]        # 5be90 <_fini@@Base+0x973c>
   1bd71:	lea    rsi,[rip+0x40c6b]        # 5c9e3 <_fini@@Base+0xa28f>
   1bd78:	mov    ecx,0x49f
   1bd7d:	call   205c0 <g_str_equal@plt+0x13300>
   1bd82:	movzx  esi,bl
   1bd85:	mov    rdi,QWORD PTR [rax+0x50]
   1bd89:	pop    rbx
   1bd8a:	jmp    16e30 <g_str_equal@plt+0x9b70>
   1bd8f:	nop
   1bd90:	push   rbx
   1bd91:	lea    r8,[rip+0x40ed8]        # 5cc70 <_fini@@Base+0xa51c>
   1bd98:	mov    ebx,esi
   1bd9a:	lea    rdx,[rip+0x400ef]        # 5be90 <_fini@@Base+0x973c>
   1bda1:	lea    rsi,[rip+0x40c3b]        # 5c9e3 <_fini@@Base+0xa28f>
   1bda8:	mov    ecx,0x4a7
   1bdad:	call   205c0 <g_str_equal@plt+0x13300>
   1bdb2:	movzx  esi,bl
   1bdb5:	mov    rdi,QWORD PTR [rax+0x50]
   1bdb9:	pop    rbx
   1bdba:	jmp    16e90 <g_str_equal@plt+0x9bd0>
   1bdbf:	nop
   1bdc0:	push   rbp
   1bdc1:	push   rbx
   1bdc2:	mov    rbp,rdx
   1bdc5:	mov    ebx,esi
   1bdc7:	lea    r8,[rip+0x40e72]        # 5cc40 <_fini@@Base+0xa4ec>
   1bdce:	lea    rdx,[rip+0x400bb]        # 5be90 <_fini@@Base+0x973c>
   1bdd5:	lea    rsi,[rip+0x40c07]        # 5c9e3 <_fini@@Base+0xa28f>
   1bddc:	sub    rsp,0x8
   1bde0:	mov    ecx,0x496
   1bde5:	call   205c0 <g_str_equal@plt+0x13300>
   1bdea:	mov    rdi,QWORD PTR [rax+0x50]
   1bdee:	movzx  esi,bl
   1bdf1:	mov    rdx,rbp
   1bdf4:	call   16b10 <g_str_equal@plt+0x9850>
   1bdf9:	add    rsp,0x8
   1bdfd:	xor    eax,eax
   1bdff:	pop    rbx
   1be00:	pop    rbp
   1be01:	ret    
   1be02:	nop    DWORD PTR [rax+0x0]
   1be06:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1be10:	push   rbx
   1be11:	lea    r8,[rip+0x40dc8]        # 5cbe0 <_fini@@Base+0xa48c>
   1be18:	lea    rdx,[rip+0x40071]        # 5be90 <_fini@@Base+0x973c>
   1be1f:	lea    rsi,[rip+0x40bbd]        # 5c9e3 <_fini@@Base+0xa28f>
   1be26:	mov    ecx,0x38f
   1be2b:	call   205c0 <g_str_equal@plt+0x13300>
   1be30:	lea    rdi,[rax+0x58]
   1be34:	mov    rbx,rax
   1be37:	call   42c80 <g_str_equal@plt+0x359c0>
   1be3c:	lea    rdi,[rbx+0x80]
   1be43:	call   42c80 <g_str_equal@plt+0x359c0>
   1be48:	lea    rdi,[rbx+0xa8]
   1be4f:	call   42c80 <g_str_equal@plt+0x359c0>
   1be54:	mov    rdi,QWORD PTR [rbx+0x50]
   1be58:	call   20b90 <g_str_equal@plt+0x138d0>
   1be5d:	mov    edi,DWORD PTR [rbx+0xe4]
   1be63:	test   edi,edi
   1be65:	jne    1be88 <g_str_equal@plt+0xebc8>
   1be67:	mov    rdi,QWORD PTR [rbx+0xe8]
   1be6e:	test   rdi,rdi
   1be71:	je     1be80 <g_str_equal@plt+0xebc0>
   1be73:	pop    rbx
   1be74:	jmp    3a460 <g_str_equal@plt+0x2d1a0>
   1be79:	nop    DWORD PTR [rax+0x0]
   1be80:	pop    rbx
   1be81:	ret    
   1be82:	nop    WORD PTR [rax+rax*1+0x0]
   1be88:	call   ccc0 <g_source_remove@plt>
   1be8d:	jmp    1be67 <g_str_equal@plt+0xeba7>
   1be8f:	nop
   1be90:	push   r15
   1be92:	push   r14
   1be94:	push   r13
   1be96:	push   r12
   1be98:	push   rbp
   1be99:	push   rbx
   1be9a:	mov    rbx,rdi
   1be9d:	sub    rsp,0x58
   1bea1:	mov    rax,QWORD PTR fs:0x28
   1beaa:	mov    QWORD PTR [rsp+0x48],rax
   1beaf:	xor    eax,eax
   1beb1:	mov    rax,QWORD PTR [rdi+0x68]
   1beb5:	mov    QWORD PTR [rsp],rsi
   1beb9:	cmp    rax,0xfff
   1bebf:	jbe    1c4d0 <g_str_equal@plt+0xf210>
   1bec5:	lea    rdi,[rsp+0x30]
   1beca:	test   rax,rax
   1becd:	mov    QWORD PTR [rsp+0x8],rdi
   1bed2:	je     1bff5 <g_str_equal@plt+0xed35>
   1bed8:	nop    DWORD PTR [rax+rax*1+0x0]
   1bee0:	mov    rdx,QWORD PTR [rbx+0xd0]
   1bee7:	test   rdx,rdx
   1beea:	jne    1c007 <g_str_equal@plt+0xed47>
   1bef0:	cmp    rax,0x5
   1bef4:	mov    r12,QWORD PTR [rbx+0x78]
   1bef8:	jbe    1c4c3 <g_str_equal@plt+0xf203>
   1befe:	movzx  r13d,BYTE PTR [r12]
   1bf03:	movzx  r10d,BYTE PTR [r12+0x1]
   1bf09:	mov    ebp,r13d
   1bf0c:	mov    r15d,r10d
   1bf0f:	and    r15d,0x7f
   1bf13:	and    ebp,0xf
   1bf16:	movzx  r14d,r15b
   1bf1a:	je     1c170 <g_str_equal@plt+0xeeb0>
   1bf20:	mov    r8d,DWORD PTR [rip+0x268bb1]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   1bf27:	mov    BYTE PTR [rbx+0xf4],bpl
   1bf2e:	movzx  r11d,bpl
   1bf32:	test   r8d,r8d
   1bf35:	jne    1c18b <g_str_equal@plt+0xeecb>
   1bf3b:	cmp    bpl,0x8
   1bf3f:	je     1c358 <g_str_equal@plt+0xf098>
   1bf45:	test   r13b,r13b
   1bf48:	js     1c3f0 <g_str_equal@plt+0xf130>
   1bf4e:	cmp    bpl,0x2
   1bf52:	jne    1c5bc <g_str_equal@plt+0xf2fc>
   1bf58:	test   r10b,r10b
   1bf5b:	jns    1c577 <g_str_equal@plt+0xf2b7>
   1bf61:	cmp    r15b,0x7d
   1bf65:	ja     1c298 <g_str_equal@plt+0xefd8>
   1bf6b:	mov    QWORD PTR [rbx+0xd0],r14
   1bf72:	mov    eax,DWORD PTR [r12+0x2]
   1bf77:	mov    ebp,0x6
   1bf7c:	mov    DWORD PTR [rbx+0xe0],eax
   1bf82:	mov    edi,DWORD PTR [rip+0x268b50]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   1bf88:	test   edi,edi
   1bf8a:	jne    1c2ed <g_str_equal@plt+0xf02d>
   1bf90:	lea    rdi,[rbx+0x58]
   1bf94:	mov    rsi,rbp
   1bf97:	call   42da0 <g_str_equal@plt+0x35ae0>
   1bf9c:	mov    rbp,QWORD PTR [rbx+0xd0]
   1bfa3:	test   rbp,rbp
   1bfa6:	jne    1c000 <g_str_equal@plt+0xed40>
   1bfa8:	mov    eax,DWORD PTR [rip+0x268b2a]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   1bfae:	xor    r13d,r13d
   1bfb1:	test   eax,eax
   1bfb3:	movzx  r12d,BYTE PTR [rbx+0xf4]
   1bfbb:	jne    1c0ad <g_str_equal@plt+0xeded>
   1bfc1:	cmp    r12b,0x2
   1bfc5:	je     1c120 <g_str_equal@plt+0xee60>
   1bfcb:	cmp    r12b,0x8
   1bfcf:	je     1c380 <g_str_equal@plt+0xf0c0>
   1bfd5:	cmp    r12b,0x9
   1bfd9:	je     1c248 <g_str_equal@plt+0xef88>
   1bfdf:	test   rbp,rbp
   1bfe2:	jne    1c14a <g_str_equal@plt+0xee8a>
   1bfe8:	mov    rax,QWORD PTR [rbx+0x68]
   1bfec:	test   rax,rax
   1bfef:	jne    1bee0 <g_str_equal@plt+0xec20>
   1bff5:	mov    eax,0x1
   1bffa:	jmp    1c3c9 <g_str_equal@plt+0xf109>
   1bfff:	nop
   1c000:	mov    rax,QWORD PTR [rbx+0x68]
   1c004:	mov    rdx,rbp
   1c007:	cmp    rdx,rax
   1c00a:	jbe    1c160 <g_str_equal@plt+0xeea0>
   1c010:	test   BYTE PTR [rbx+0xf4],0x8
   1c017:	jne    1c4c3 <g_str_equal@plt+0xf203>
   1c01d:	and    rax,0xfffffffffffffffc
   1c021:	je     1c4c3 <g_str_equal@plt+0xf203>
   1c027:	sub    rdx,rax
   1c02a:	mov    rcx,rdx
   1c02d:	mov    rdx,rax
   1c030:	mov    rbp,rdx
   1c033:	mov    QWORD PTR [rbx+0xd0],rcx
   1c03a:	mov    rax,QWORD PTR [rbx+0x78]
   1c03e:	shr    rbp,0x2
   1c042:	test   rbp,rbp
   1c045:	je     1c061 <g_str_equal@plt+0xeda1>
   1c047:	shl    rbp,0x2
   1c04b:	lea    rsi,[rax+rbp*1]
   1c04f:	nop
   1c050:	mov    ecx,DWORD PTR [rbx+0xe0]
   1c056:	xor    DWORD PTR [rax],ecx
   1c058:	add    rax,0x4
   1c05c:	cmp    rsi,rax
   1c05f:	jne    1c050 <g_str_equal@plt+0xed90>
   1c061:	cmp    rbp,rdx
   1c064:	jae    1c450 <g_str_equal@plt+0xf190>
   1c06a:	nop    WORD PTR [rax+rax*1+0x0]
   1c070:	mov    rax,QWORD PTR [rbx+0x78]
   1c074:	mov    rcx,rbp
   1c077:	and    ecx,0x3
   1c07a:	movzx  ecx,BYTE PTR [rbx+rcx*1+0xe0]
   1c082:	add    rax,rbp
   1c085:	add    rbp,0x1
   1c089:	xor    BYTE PTR [rax],cl
   1c08b:	cmp    rbp,rdx
   1c08e:	jne    1c070 <g_str_equal@plt+0xedb0>
   1c090:	mov    eax,DWORD PTR [rip+0x268a42]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   1c096:	mov    r13,QWORD PTR [rbx+0xd0]
   1c09d:	movzx  r12d,BYTE PTR [rbx+0xf4]
   1c0a5:	test   eax,eax
   1c0a7:	je     1bfc1 <g_str_equal@plt+0xed01>
   1c0ad:	cmp    WORD PTR [rip+0x26aee3],0x0        # 286f98 <stdout@@GLIBC_2.2.5+0x2650>
   1c0b5:	je     1bfc1 <g_str_equal@plt+0xed01>
   1c0bb:	test   BYTE PTR [rip+0x269ddf],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   1c0c2:	je     1bfc1 <g_str_equal@plt+0xed01>
   1c0c8:	mov    rdi,QWORD PTR [rsp+0x8]
   1c0cd:	xor    esi,esi
   1c0cf:	call   c3e0 <gettimeofday@plt>
   1c0d4:	mov    r15,QWORD PTR [rsp+0x38]
   1c0d9:	mov    r14,QWORD PTR [rsp+0x30]
   1c0de:	call   c5b0 <getpid@plt>
   1c0e3:	sub    rsp,0x8
   1c0e7:	lea    rdi,[rip+0x400e2]        # 5c1d0 <_fini@@Base+0x9a7c>
   1c0ee:	movzx  r9d,r12b
   1c0f2:	push   r13
   1c0f4:	mov    rdx,r14
   1c0f7:	mov    esi,eax
   1c0f9:	mov    r8,rbx
   1c0fc:	xor    eax,eax
   1c0fe:	mov    rcx,r15
   1c101:	call   431a0 <g_str_equal@plt+0x35ee0>
   1c106:	movzx  r12d,BYTE PTR [rbx+0xf4]
   1c10e:	pop    rax
   1c10f:	pop    rdx
   1c110:	cmp    r12b,0x2
   1c114:	jne    1bfcb <g_str_equal@plt+0xed0b>
   1c11a:	nop    WORD PTR [rax+rax*1+0x0]
   1c120:	test   rbp,rbp
   1c123:	je     1bfe8 <g_str_equal@plt+0xed28>
   1c129:	lea    r12,[rbx+0xa8]
   1c130:	mov    rsi,rbp
   1c133:	mov    rdi,r12
   1c136:	call   42c30 <g_str_equal@plt+0x35970>
   1c13b:	mov    rsi,QWORD PTR [rbx+0x78]
   1c13f:	mov    rdx,rbp
   1c142:	mov    rdi,r12
   1c145:	call   42d70 <g_str_equal@plt+0x35ab0>
   1c14a:	lea    rdi,[rbx+0x58]
   1c14e:	mov    rsi,rbp
   1c151:	call   42da0 <g_str_equal@plt+0x35ae0>
   1c156:	jmp    1bfe8 <g_str_equal@plt+0xed28>
   1c15b:	nop    DWORD PTR [rax+rax*1+0x0]
   1c160:	xor    ecx,ecx
   1c162:	jmp    1c030 <g_str_equal@plt+0xed70>
   1c167:	nop    WORD PTR [rax+rax*1+0x0]
   1c170:	movzx  ebp,BYTE PTR [rbx+0xf4]
   1c177:	mov    r8d,DWORD PTR [rip+0x26895a]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   1c17e:	test   r8d,r8d
   1c181:	movzx  r11d,bpl
   1c185:	je     1bf3b <g_str_equal@plt+0xec7b>
   1c18b:	cmp    WORD PTR [rip+0x26ae09],0x0        # 286f9c <stdout@@GLIBC_2.2.5+0x2654>
   1c193:	je     1c520 <g_str_equal@plt+0xf260>
   1c199:	test   BYTE PTR [rip+0x269d01],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   1c1a0:	je     1c520 <g_str_equal@plt+0xf260>
   1c1a6:	mov    rdi,QWORD PTR [rsp+0x8]
   1c1ab:	xor    esi,esi
   1c1ad:	mov    DWORD PTR [rsp+0x2c],r11d
   1c1b2:	mov    BYTE PTR [rsp+0x14],r10b
   1c1b7:	call   c3e0 <gettimeofday@plt>
   1c1bc:	mov    rcx,QWORD PTR [rsp+0x38]
   1c1c1:	mov    rdx,QWORD PTR [rsp+0x30]
   1c1c6:	mov    QWORD PTR [rsp+0x20],rcx
   1c1cb:	mov    QWORD PTR [rsp+0x18],rdx
   1c1d0:	call   c5b0 <getpid@plt>
   1c1d5:	sub    rsp,0x8
   1c1d9:	mov    edi,r13d
   1c1dc:	mov    r9,r14
   1c1df:	movzx  r10d,BYTE PTR [rsp+0x1c]
   1c1e5:	and    edi,0xffffff80
   1c1e8:	mov    r8,rbx
   1c1eb:	movzx  edi,dil
   1c1ef:	mov    esi,r10d
   1c1f2:	mov    BYTE PTR [rsp+0x33],r10b
   1c1f7:	and    esi,0xffffff80
   1c1fa:	movzx  esi,sil
   1c1fe:	push   rsi
   1c1ff:	mov    r11d,DWORD PTR [rsp+0x3c]
   1c204:	mov    esi,eax
   1c206:	xor    eax,eax
   1c208:	push   r11
   1c20a:	mov    DWORD PTR [rsp+0x2c],r11d
   1c20f:	push   rdi
   1c210:	lea    rdi,[rip+0x3fd69]        # 5bf80 <_fini@@Base+0x982c>
   1c217:	mov    rcx,QWORD PTR [rsp+0x40]
   1c21c:	mov    rdx,QWORD PTR [rsp+0x38]
   1c221:	call   431a0 <g_str_equal@plt+0x35ee0>
   1c226:	add    rsp,0x20
   1c22a:	cmp    bpl,0x8
   1c22e:	mov    r11d,DWORD PTR [rsp+0x14]
   1c233:	movzx  r10d,BYTE PTR [rsp+0x2b]
   1c239:	jne    1bf45 <g_str_equal@plt+0xec85>
   1c23f:	jmp    1bf9c <g_str_equal@plt+0xecdc>
   1c244:	nop    DWORD PTR [rax+0x0]
   1c248:	cmp    QWORD PTR [rbx+0xd8],0x0
   1c250:	jne    1bfdf <g_str_equal@plt+0xed1f>
   1c256:	mov    rax,QWORD PTR [rbx+0x78]
   1c25a:	mov    r8,QWORD PTR [rbx+0x68]
   1c25e:	mov    ecx,0x1
   1c263:	mov    rdx,QWORD PTR [rsp+0x8]
   1c268:	mov    esi,0xa
   1c26d:	mov    rdi,rbx
   1c270:	mov    QWORD PTR [rsp+0x30],rax
   1c275:	mov    QWORD PTR [rsp+0x38],r8
   1c27a:	call   1ba10 <g_str_equal@plt+0xe750>
   1c27f:	mov    rax,QWORD PTR [rbx+0x90]
   1c286:	mov    QWORD PTR [rbx+0xd8],rax
   1c28d:	jmp    1bfdf <g_str_equal@plt+0xed1f>
   1c292:	nop    WORD PTR [rax+rax*1+0x0]
   1c298:	and    ebp,0x8
   1c29b:	jne    1c601 <g_str_equal@plt+0xf341>
   1c2a1:	cmp    r15b,0x7e
   1c2a5:	je     1c4b8 <g_str_equal@plt+0xf1f8>
   1c2ab:	cmp    r14,0x7f
   1c2af:	jne    1c4c3 <g_str_equal@plt+0xf203>
   1c2b5:	cmp    QWORD PTR [rbx+0x68],0xd
   1c2ba:	jbe    1c4c3 <g_str_equal@plt+0xf203>
   1c2c0:	mov    r14,QWORD PTR [r12+0x2]
   1c2c5:	mov    edi,DWORD PTR [rip+0x26880d]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   1c2cb:	mov    ebp,0xe
   1c2d0:	bswap  r14
   1c2d3:	test   edi,edi
   1c2d5:	mov    QWORD PTR [rbx+0xd0],r14
   1c2dc:	mov    eax,DWORD PTR [r12+0xa]
   1c2e1:	mov    DWORD PTR [rbx+0xe0],eax
   1c2e7:	je     1bf90 <g_str_equal@plt+0xecd0>
   1c2ed:	cmp    WORD PTR [rip+0x26aca5],0x0        # 286f9a <stdout@@GLIBC_2.2.5+0x2652>
   1c2f5:	je     1bf90 <g_str_equal@plt+0xecd0>
   1c2fb:	test   BYTE PTR [rip+0x269b9f],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   1c302:	je     1bf90 <g_str_equal@plt+0xecd0>
   1c308:	mov    rdi,QWORD PTR [rsp+0x8]
   1c30d:	xor    esi,esi
   1c30f:	mov    r15d,DWORD PTR [rbx+0xe0]
   1c316:	call   c3e0 <gettimeofday@plt>
   1c31b:	mov    r13,QWORD PTR [rsp+0x38]
   1c320:	mov    r12,QWORD PTR [rsp+0x30]
   1c325:	call   c5b0 <getpid@plt>
   1c32a:	push   r15
   1c32c:	lea    rdi,[rip+0x3fe1d]        # 5c150 <_fini@@Base+0x99fc>
   1c333:	push   r14
   1c335:	mov    esi,eax
   1c337:	mov    rcx,r13
   1c33a:	mov    r9,rbp
   1c33d:	mov    r8,rbx
   1c340:	mov    rdx,r12
   1c343:	xor    eax,eax
   1c345:	call   431a0 <g_str_equal@plt+0x35ee0>
   1c34a:	pop    rcx
   1c34b:	pop    rsi
   1c34c:	jmp    1bf90 <g_str_equal@plt+0xecd0>
   1c351:	nop    DWORD PTR [rax+0x0]
   1c358:	movzx  r12d,BYTE PTR [rbx+0xf4]
   1c360:	xor    ebp,ebp
   1c362:	cmp    r12b,0x2
   1c366:	je     1bfe8 <g_str_equal@plt+0xed28>
   1c36c:	cmp    r12b,0x8
   1c370:	jne    1bfd5 <g_str_equal@plt+0xed15>
   1c376:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1c380:	mov    rdi,QWORD PTR [rsp]
   1c384:	lea    r8,[rip+0x406c0]        # 5ca4b <_fini@@Base+0xa2f7>
   1c38b:	lea    rcx,[rip+0x4096e]        # 5cd00 <_fini@@Base+0xa5ac>
   1c392:	lea    rsi,[rip+0x3faf7]        # 5be90 <_fini@@Base+0x973c>
   1c399:	xor    eax,eax
   1c39b:	mov    edx,0x342
   1c3a0:	call   3a090 <g_str_equal@plt+0x2cdd0>
   1c3a5:	test   rbp,rbp
   1c3a8:	jne    1c468 <g_str_equal@plt+0xf1a8>
   1c3ae:	lea    rdx,[rip+0x406af]        # 5ca64 <_fini@@Base+0xa310>
   1c3b5:	mov    esi,0x3e8
   1c3ba:	mov    rdi,rbx
   1c3bd:	call   1bbf0 <g_str_equal@plt+0xe930>
   1c3c2:	mov    rax,0xffffffffffffffff
   1c3c9:	mov    rdi,QWORD PTR [rsp+0x48]
   1c3ce:	xor    rdi,QWORD PTR fs:0x28
   1c3d7:	jne    1c646 <g_str_equal@plt+0xf386>
   1c3dd:	add    rsp,0x58
   1c3e1:	pop    rbx
   1c3e2:	pop    rbp
   1c3e3:	pop    r12
   1c3e5:	pop    r13
   1c3e7:	pop    r14
   1c3e9:	pop    r15
   1c3eb:	ret    
   1c3ec:	nop    DWORD PTR [rax+0x0]
   1c3f0:	cmp    bpl,0x2
   1c3f4:	je     1bf58 <g_str_equal@plt+0xec98>
   1c3fa:	lea    eax,[rbp-0x9]
   1c3fd:	cmp    al,0x1
   1c3ff:	jbe    1bf58 <g_str_equal@plt+0xec98>
   1c405:	mov    rdi,QWORD PTR [rsp]
   1c409:	lea    r8,[rip+0x3fc58]        # 5c068 <_fini@@Base+0x9914>
   1c410:	lea    rcx,[rip+0x40949]        # 5cd60 <_fini@@Base+0xa60c>
   1c417:	lea    rsi,[rip+0x3fa72]        # 5be90 <_fini@@Base+0x973c>
   1c41e:	xor    eax,eax
   1c420:	mov    r9d,r11d
   1c423:	mov    edx,0x2e0
   1c428:	call   3a090 <g_str_equal@plt+0x2cdd0>
   1c42d:	lea    rdx,[rip+0x3fc94]        # 5c0c8 <_fini@@Base+0x9974>
   1c434:	mov    esi,0x3eb
   1c439:	mov    rdi,rbx
   1c43c:	call   1bbf0 <g_str_equal@plt+0xe930>
   1c441:	mov    rax,0xffffffffffffffff
   1c448:	jmp    1c3c9 <g_str_equal@plt+0xf109>
   1c44d:	nop    DWORD PTR [rax]
   1c450:	mov    r13,QWORD PTR [rbx+0xd0]
   1c457:	mov    eax,DWORD PTR [rip+0x26867b]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   1c45d:	mov    rbp,rdx
   1c460:	jmp    1bfb1 <g_str_equal@plt+0xecf1>
   1c465:	nop    DWORD PTR [rax]
   1c468:	mov    r8,QWORD PTR [rbx+0x68]
   1c46c:	mov    rax,QWORD PTR [rbx+0x78]
   1c470:	lea    rdx,[rsp+0x30]
   1c475:	mov    ecx,0x1
   1c47a:	mov    esi,0x8
   1c47f:	mov    rdi,rbx
   1c482:	mov    QWORD PTR [rsp+0x38],r8
   1c487:	mov    QWORD PTR [rsp+0x30],rax
   1c48c:	call   1ba10 <g_str_equal@plt+0xe750>
   1c491:	xor    esi,esi
   1c493:	mov    rdi,rbx
   1c496:	call   1b630 <g_str_equal@plt+0xe370>
   1c49b:	mov    rdi,QWORD PTR [rbx+0x50]
   1c49f:	xor    edx,edx
   1c4a1:	xor    esi,esi
   1c4a3:	call   16db0 <g_str_equal@plt+0x9af0>
   1c4a8:	mov    rax,0xffffffffffffffff
   1c4af:	jmp    1c3c9 <g_str_equal@plt+0xf109>
   1c4b4:	nop    DWORD PTR [rax+0x0]
   1c4b8:	cmp    QWORD PTR [rbx+0x68],0x7
   1c4bd:	ja     1c540 <g_str_equal@plt+0xf280>
   1c4c3:	mov    rax,0xfffffffffffffffe
   1c4ca:	jmp    1c3c9 <g_str_equal@plt+0xf109>
   1c4cf:	nop
   1c4d0:	mov    ebp,0x1000
   1c4d5:	lea    rdi,[rdi+0x58]
   1c4d9:	sub    rbp,rax
   1c4dc:	mov    rsi,rbp
   1c4df:	call   42c30 <g_str_equal@plt+0x35970>
   1c4e4:	mov    rsi,QWORD PTR [rbx+0x68]
   1c4e8:	add    rsi,QWORD PTR [rbx+0x78]
   1c4ec:	mov    rdx,rbp
   1c4ef:	mov    rdi,QWORD PTR [rbx+0x50]
   1c4f3:	mov    rcx,QWORD PTR [rsp]
   1c4f7:	call   16a70 <g_str_equal@plt+0x97b0>
   1c4fc:	test   rax,rax
   1c4ff:	js     1c3c9 <g_str_equal@plt+0xf109>
   1c505:	mov    rdx,QWORD PTR [rbx+0x68]
   1c509:	jne    1c56b <g_str_equal@plt+0xf2ab>
   1c50b:	test   rdx,rdx
   1c50e:	jne    1c56b <g_str_equal@plt+0xf2ab>
   1c510:	mov    DWORD PTR [rbx+0xf0],0x1
   1c51a:	jmp    1c3c9 <g_str_equal@plt+0xf109>
   1c51f:	nop
   1c520:	cmp    bpl,0x8
   1c524:	jne    1bf45 <g_str_equal@plt+0xec85>
   1c52a:	movzx  r12d,BYTE PTR [rbx+0xf4]
   1c532:	xor    r13d,r13d
   1c535:	xor    ebp,ebp
   1c537:	jmp    1c0ad <g_str_equal@plt+0xeded>
   1c53c:	nop    DWORD PTR [rax+0x0]
   1c540:	movzx  r14d,WORD PTR [r12+0x2]
   1c546:	mov    ebp,0x8
   1c54b:	ror    r14w,0x8
   1c550:	movzx  r14d,r14w
   1c554:	mov    QWORD PTR [rbx+0xd0],r14
   1c55b:	mov    eax,DWORD PTR [r12+0x4]
   1c560:	mov    DWORD PTR [rbx+0xe0],eax
   1c566:	jmp    1bf82 <g_str_equal@plt+0xecc2>
   1c56b:	add    rax,rdx
   1c56e:	mov    QWORD PTR [rbx+0x68],rax
   1c572:	jmp    1bec5 <g_str_equal@plt+0xec05>
   1c577:	mov    rdi,QWORD PTR [rsp]
   1c57b:	lea    r8,[rip+0x3fb7e]        # 5c100 <_fini@@Base+0x99ac>
   1c582:	lea    rcx,[rip+0x407d7]        # 5cd60 <_fini@@Base+0xa60c>
   1c589:	lea    rsi,[rip+0x3f900]        # 5be90 <_fini@@Base+0x973c>
   1c590:	xor    eax,eax
   1c592:	mov    edx,0x2e8
   1c597:	call   3a090 <g_str_equal@plt+0x2cdd0>
   1c59c:	lea    rdx,[rip+0x40470]        # 5ca13 <_fini@@Base+0xa2bf>
   1c5a3:	mov    esi,0x3ea
   1c5a8:	mov    rdi,rbx
   1c5ab:	call   1bbf0 <g_str_equal@plt+0xe930>
   1c5b0:	mov    rax,0xffffffffffffffff
   1c5b7:	jmp    1c3c9 <g_str_equal@plt+0xf109>
   1c5bc:	mov    rdi,QWORD PTR [rsp]
   1c5c0:	lea    r8,[rip+0x3fa49]        # 5c010 <_fini@@Base+0x98bc>
   1c5c7:	lea    rcx,[rip+0x40792]        # 5cd60 <_fini@@Base+0xa60c>
   1c5ce:	lea    rsi,[rip+0x3f8bb]        # 5be90 <_fini@@Base+0x973c>
   1c5d5:	xor    eax,eax
   1c5d7:	mov    edx,0x2d4
   1c5dc:	call   3a090 <g_str_equal@plt+0x2cdd0>
   1c5e1:	lea    rdx,[rip+0x3fa58]        # 5c040 <_fini@@Base+0x98ec>
   1c5e8:	mov    esi,0x3f0
   1c5ed:	mov    rdi,rbx
   1c5f0:	call   1bbf0 <g_str_equal@plt+0xe930>
   1c5f5:	mov    rax,0xffffffffffffffff
   1c5fc:	jmp    1c3c9 <g_str_equal@plt+0xf109>
   1c601:	mov    rdi,QWORD PTR [rsp]
   1c605:	lea    r8,[rip+0x3fb1c]        # 5c128 <_fini@@Base+0x99d4>
   1c60c:	lea    rcx,[rip+0x4074d]        # 5cd60 <_fini@@Base+0xa60c>
   1c613:	lea    rsi,[rip+0x3f876]        # 5be90 <_fini@@Base+0x973c>
   1c61a:	xor    eax,eax
   1c61c:	mov    edx,0x2f4
   1c621:	call   3a090 <g_str_equal@plt+0x2cdd0>
   1c626:	lea    rdx,[rip+0x40403]        # 5ca30 <_fini@@Base+0xa2dc>
   1c62d:	mov    esi,0x3ea
   1c632:	mov    rdi,rbx
   1c635:	call   1bbf0 <g_str_equal@plt+0xe930>
   1c63a:	mov    rax,0xffffffffffffffff
   1c641:	jmp    1c3c9 <g_str_equal@plt+0xf109>
   1c646:	call   cd30 <__stack_chk_fail@plt>
   1c64b:	nop    DWORD PTR [rax+rax*1+0x0]
   1c650:	push   rbp
   1c651:	push   rbx
   1c652:	mov    rbx,rdi
   1c655:	sub    rsp,0x8
   1c659:	mov    edi,DWORD PTR [rdi+0xe4]
   1c65f:	test   edi,edi
   1c661:	jne    1c6d8 <g_str_equal@plt+0xf418>
   1c663:	cmp    QWORD PTR [rbx+0xe8],0x0
   1c66b:	je     1c678 <g_str_equal@plt+0xf3b8>
   1c66d:	add    rsp,0x8
   1c671:	pop    rbx
   1c672:	pop    rbp
   1c673:	ret    
   1c674:	nop    DWORD PTR [rax+0x0]
   1c678:	cmp    QWORD PTR [rbx+0x90],0x0
   1c680:	mov    rax,QWORD PTR [rbx+0x68]
   1c684:	je     1c6f0 <g_str_equal@plt+0xf430>
   1c686:	cmp    rax,0x1fff
   1c68c:	mov    ebp,0x4
   1c691:	ja     1c6a4 <g_str_equal@plt+0xf3e4>
   1c693:	mov    eax,DWORD PTR [rbx+0xf0]
   1c699:	xor    ebp,ebp
   1c69b:	test   eax,eax
   1c69d:	sete   bpl
   1c6a1:	add    ebp,0x4
   1c6a4:	mov    rdi,rbx
   1c6a7:	call   20b70 <g_str_equal@plt+0x138b0>
   1c6ac:	mov    rdi,QWORD PTR [rbx+0x50]
   1c6b0:	lea    r8,[rip+0xfffffffffffff249]        # 1b900 <g_str_equal@plt+0xe640>
   1c6b7:	lea    rdx,[rip+0xc2]        # 1c780 <g_str_equal@plt+0xf4c0>
   1c6be:	mov    rcx,rbx
   1c6c1:	mov    esi,ebp
   1c6c3:	call   16d70 <g_str_equal@plt+0x9ab0>
   1c6c8:	mov    DWORD PTR [rbx+0xe4],eax
   1c6ce:	add    rsp,0x8
   1c6d2:	pop    rbx
   1c6d3:	pop    rbp
   1c6d4:	ret    
   1c6d5:	nop    DWORD PTR [rax]
   1c6d8:	call   ccc0 <g_source_remove@plt>
   1c6dd:	mov    DWORD PTR [rbx+0xe4],0x0
   1c6e7:	jmp    1c663 <g_str_equal@plt+0xf3a3>
   1c6ec:	nop    DWORD PTR [rax+0x0]
   1c6f0:	cmp    rax,0x1fff
   1c6f6:	ja     1c66d <g_str_equal@plt+0xf3ad>
   1c6fc:	mov    edx,DWORD PTR [rbx+0xf0]
   1c702:	test   edx,edx
   1c704:	jne    1c66d <g_str_equal@plt+0xf3ad>
   1c70a:	mov    ebp,0x1
   1c70f:	jmp    1c6a4 <g_str_equal@plt+0xf3e4>
   1c711:	nop    DWORD PTR [rax+rax*1+0x0]
   1c716:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1c720:	push   r12
   1c722:	lea    r8,[rip+0x406b7]        # 5cde0 <_fini@@Base+0xa68c>
   1c729:	push   rbp
   1c72a:	lea    rdx,[rip+0x3f75f]        # 5be90 <_fini@@Base+0x973c>
   1c731:	push   rbx
   1c732:	mov    r12d,esi
   1c735:	lea    rsi,[rip+0x402a7]        # 5c9e3 <_fini@@Base+0xa28f>
   1c73c:	mov    ecx,0x4fc
   1c741:	call   205c0 <g_str_equal@plt+0x13300>
   1c746:	lea    rdi,[rip+0x265bd3]        # 282320 <g_test_config_vars+0xf60>
   1c74d:	mov    rbp,rax
   1c750:	mov    esi,0x70
   1c755:	call   c610 <g_source_new@plt>
   1c75a:	mov    rdi,rbp
   1c75d:	mov    rbx,rax
   1c760:	mov    QWORD PTR [rax+0x60],rbp
   1c764:	call   20b70 <g_str_equal@plt+0x138b0>
   1c769:	mov    DWORD PTR [rbx+0x68],r12d
   1c76d:	mov    rdi,rbp
   1c770:	call   1c650 <g_str_equal@plt+0xf390>
   1c775:	mov    rax,rbx
   1c778:	pop    rbx
   1c779:	pop    rbp
   1c77a:	pop    r12
   1c77c:	ret    
   1c77d:	nop    DWORD PTR [rax]
   1c780:	push   rbp
   1c781:	push   rbx
   1c782:	mov    ebp,esi
   1c784:	mov    rdi,rdx
   1c787:	lea    r8,[rip+0x40602]        # 5cd90 <_fini@@Base+0xa63c>
   1c78e:	lea    rdx,[rip+0x3f6fb]        # 5be90 <_fini@@Base+0x973c>
   1c795:	lea    rsi,[rip+0x40247]        # 5c9e3 <_fini@@Base+0xa28f>
   1c79c:	sub    rsp,0x8
   1c7a0:	mov    ecx,0x3f2
   1c7a5:	call   205c0 <g_str_equal@plt+0x13300>
   1c7aa:	test   bpl,0x4
   1c7ae:	mov    rbx,rax
   1c7b1:	jne    1c7e0 <g_str_equal@plt+0xf520>
   1c7b3:	and    ebp,0x1
   1c7b6:	je     1c7c7 <g_str_equal@plt+0xf507>
   1c7b8:	lea    rsi,[rbx+0xe8]
   1c7bf:	mov    rdi,rbx
   1c7c2:	call   1be90 <g_str_equal@plt+0xebd0>
   1c7c7:	mov    rdi,rbx
   1c7ca:	call   1c650 <g_str_equal@plt+0xf390>
   1c7cf:	add    rsp,0x8
   1c7d3:	xor    eax,eax
   1c7d5:	pop    rbx
   1c7d6:	pop    rbp
   1c7d7:	ret    
   1c7d8:	nop    DWORD PTR [rax+rax*1+0x0]
   1c7e0:	lea    rsi,[rax+0xe8]
   1c7e7:	mov    rdi,rax
   1c7ea:	call   1b630 <g_str_equal@plt+0xe370>
   1c7ef:	test   rax,rax
   1c7f2:	jns    1c7b3 <g_str_equal@plt+0xf4f3>
   1c7f4:	jmp    1c7c7 <g_str_equal@plt+0xf507>
   1c7f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1c800:	push   r15
   1c802:	push   r14
   1c804:	lea    r8,[rip+0x40415]        # 5cc20 <_fini@@Base+0xa4cc>
   1c80b:	push   r13
   1c80d:	push   r12
   1c80f:	mov    r13,rdx
   1c812:	push   rbp
   1c813:	push   rbx
   1c814:	mov    rbp,rsi
   1c817:	lea    rdx,[rip+0x3f672]        # 5be90 <_fini@@Base+0x973c>
   1c81e:	lea    rsi,[rip+0x401be]        # 5c9e3 <_fini@@Base+0xa28f>
   1c825:	mov    ecx,0x436
   1c82a:	sub    rsp,0x8
   1c82e:	mov    rbx,rdi
   1c831:	mov    r12,r9
   1c834:	call   205c0 <g_str_equal@plt+0x13300>
   1c839:	mov    rdi,QWORD PTR [rax+0xe8]
   1c840:	test   rdi,rdi
   1c843:	jne    1c924 <g_str_equal@plt+0xf664>
   1c849:	cmp    QWORD PTR [rax+0xb8],0x0
   1c851:	mov    r15,rax
   1c854:	je     1c8e0 <g_str_equal@plt+0xf620>
   1c85a:	add    rbp,0x8
   1c85e:	xor    r12d,r12d
   1c861:	xor    r14d,r14d
   1c864:	test   r13,r13
   1c867:	jne    1c87d <g_str_equal@plt+0xf5bd>
   1c869:	jmp    1c920 <g_str_equal@plt+0xf660>
   1c86e:	xchg   ax,ax
   1c870:	add    r14,0x1
   1c874:	add    rbp,0x10
   1c878:	cmp    r13,r14
   1c87b:	je     1c8b5 <g_str_equal@plt+0xf5f5>
   1c87d:	mov    rbx,QWORD PTR [r15+0xb8]
   1c884:	mov    rax,QWORD PTR [rbp+0x0]
   1c888:	mov    rsi,QWORD PTR [r15+0xc8]
   1c88f:	mov    rdi,QWORD PTR [rbp-0x8]
   1c893:	sub    rbx,r12
   1c896:	cmp    rbx,rax
   1c899:	cmova  rbx,rax
   1c89d:	add    rsi,r12
   1c8a0:	mov    rdx,rbx
   1c8a3:	call   d220 <memcpy@plt>
   1c8a8:	cmp    rbx,QWORD PTR [rbp+0x0]
   1c8ac:	lea    rsi,[r12+rbx*1]
   1c8b0:	mov    r12,rsi
   1c8b3:	jae    1c870 <g_str_equal@plt+0xf5b0>
   1c8b5:	lea    rdi,[r15+0xa8]
   1c8bc:	call   42da0 <g_str_equal@plt+0x35ae0>
   1c8c1:	mov    rdi,r15
   1c8c4:	call   1c650 <g_str_equal@plt+0xf390>
   1c8c9:	add    rsp,0x8
   1c8cd:	mov    rax,r12
   1c8d0:	pop    rbx
   1c8d1:	pop    rbp
   1c8d2:	pop    r12
   1c8d4:	pop    r13
   1c8d6:	pop    r14
   1c8d8:	pop    r15
   1c8da:	ret    
   1c8db:	nop    DWORD PTR [rax+rax*1+0x0]
   1c8e0:	lea    r8,[rip+0x40339]        # 5cc20 <_fini@@Base+0xa4cc>
   1c8e7:	lea    rdx,[rip+0x3f5a2]        # 5be90 <_fini@@Base+0x973c>
   1c8ee:	lea    rsi,[rip+0x400ee]        # 5c9e3 <_fini@@Base+0xa28f>
   1c8f5:	mov    ecx,0x441
   1c8fa:	mov    rdi,rbx
   1c8fd:	call   205c0 <g_str_equal@plt+0x13300>
   1c902:	mov    rsi,r12
   1c905:	mov    rdi,rax
   1c908:	call   1be90 <g_str_equal@plt+0xebd0>
   1c90d:	test   rax,rax
   1c910:	mov    r12,rax
   1c913:	jns    1c85a <g_str_equal@plt+0xf59a>
   1c919:	jmp    1c8c9 <g_str_equal@plt+0xf609>
   1c91b:	nop    DWORD PTR [rax+rax*1+0x0]
   1c920:	xor    esi,esi
   1c922:	jmp    1c8b5 <g_str_equal@plt+0xf5f5>
   1c924:	call   39db0 <g_str_equal@plt+0x2caf0>
   1c929:	mov    rdi,r12
   1c92c:	mov    rsi,rax
   1c92f:	mov    r12,0xffffffffffffffff
   1c936:	call   3a4c0 <g_str_equal@plt+0x2d200>
   1c93b:	jmp    1c8c9 <g_str_equal@plt+0xf609>
   1c93d:	nop    DWORD PTR [rax]
   1c940:	push   r14
   1c942:	lea    r8,[rip+0x402b7]        # 5cc00 <_fini@@Base+0xa4ac>
   1c949:	push   r13
   1c94b:	mov    r13,rdx
   1c94e:	push   r12
   1c950:	lea    rdx,[rip+0x3f539]        # 5be90 <_fini@@Base+0x973c>
   1c957:	push   rbp
   1c958:	mov    r12,rsi
   1c95b:	push   rbx
   1c95c:	lea    rsi,[rip+0x40080]        # 5c9e3 <_fini@@Base+0xa28f>
   1c963:	mov    ecx,0x464
   1c968:	mov    r14,r9
   1c96b:	call   205c0 <g_str_equal@plt+0x13300>
   1c970:	mov    rdi,r12
   1c973:	mov    rbx,rax
   1c976:	mov    esi,r13d
   1c979:	call   3b050 <g_str_equal@plt+0x2dd90>
   1c97e:	mov    rdi,QWORD PTR [rbx+0xe8]
   1c985:	test   rdi,rdi
   1c988:	jne    1ca70 <g_str_equal@plt+0xf7b0>
   1c98e:	mov    edx,DWORD PTR [rbx+0xf0]
   1c994:	test   edx,edx
   1c996:	jne    1ca8c <g_str_equal@plt+0xf7cc>
   1c99c:	mov    rdx,QWORD PTR [rbx+0x90]
   1c9a3:	cmp    rdx,0x1fff
   1c9aa:	jbe    1c9f8 <g_str_equal@plt+0xf738>
   1c9ac:	test   rax,rax
   1c9af:	jg     1c9ba <g_str_equal@plt+0xf6fa>
   1c9b1:	test   rax,rax
   1c9b4:	jne    1ca68 <g_str_equal@plt+0xf7a8>
   1c9ba:	mov    rsi,r14
   1c9bd:	mov    rdi,rbx
   1c9c0:	call   1b630 <g_str_equal@plt+0xe370>
   1c9c5:	test   rax,rax
   1c9c8:	jns    1cac3 <g_str_equal@plt+0xf803>
   1c9ce:	cmp    rax,0xfffffffffffffffe
   1c9d2:	je     1cac3 <g_str_equal@plt+0xf803>
   1c9d8:	mov    edi,DWORD PTR [rbx+0xe4]
   1c9de:	mov    rbp,0xffffffffffffffff
   1c9e5:	test   edi,edi
   1c9e7:	jne    1ca48 <g_str_equal@plt+0xf788>
   1c9e9:	pop    rbx
   1c9ea:	mov    rax,rbp
   1c9ed:	pop    rbp
   1c9ee:	pop    r12
   1c9f0:	pop    r13
   1c9f2:	pop    r14
   1c9f4:	ret    
   1c9f5:	nop    DWORD PTR [rax]
   1c9f8:	mov    ebp,0x2000
   1c9fd:	sub    rbp,rdx
   1ca00:	cmp    rax,rbp
   1ca03:	jle    1c9b1 <g_str_equal@plt+0xf6f1>
   1ca05:	mov    r8,rbp
   1ca08:	mov    rcx,r13
   1ca0b:	mov    rdx,r12
   1ca0e:	mov    esi,0x2
   1ca13:	mov    rdi,rbx
   1ca16:	call   1ba10 <g_str_equal@plt+0xe750>
   1ca1b:	mov    rsi,r14
   1ca1e:	mov    rdi,rbx
   1ca21:	call   1b630 <g_str_equal@plt+0xe370>
   1ca26:	test   rax,rax
   1ca29:	jns    1ca31 <g_str_equal@plt+0xf771>
   1ca2b:	cmp    rax,0xfffffffffffffffe
   1ca2f:	jne    1c9d8 <g_str_equal@plt+0xf718>
   1ca31:	mov    rdi,rbx
   1ca34:	call   1c650 <g_str_equal@plt+0xf390>
   1ca39:	pop    rbx
   1ca3a:	mov    rax,rbp
   1ca3d:	pop    rbp
   1ca3e:	pop    r12
   1ca40:	pop    r13
   1ca42:	pop    r14
   1ca44:	ret    
   1ca45:	nop    DWORD PTR [rax]
   1ca48:	call   ccc0 <g_source_remove@plt>
   1ca4d:	mov    DWORD PTR [rbx+0xe4],0x0
   1ca57:	mov    rax,rbp
   1ca5a:	pop    rbx
   1ca5b:	pop    rbp
   1ca5c:	pop    r12
   1ca5e:	pop    r13
   1ca60:	pop    r14
   1ca62:	ret    
   1ca63:	nop    DWORD PTR [rax+rax*1+0x0]
   1ca68:	mov    rbp,rax
   1ca6b:	jmp    1ca05 <g_str_equal@plt+0xf745>
   1ca6d:	nop    DWORD PTR [rax]
   1ca70:	call   39db0 <g_str_equal@plt+0x2caf0>
   1ca75:	mov    rdi,r14
   1ca78:	mov    rsi,rax
   1ca7b:	mov    rbp,0xffffffffffffffff
   1ca82:	call   3a4c0 <g_str_equal@plt+0x2d200>
   1ca87:	jmp    1c9e9 <g_str_equal@plt+0xf729>
   1ca8c:	lea    r9,[rip+0x3ffe6]        # 5ca79 <_fini@@Base+0xa325>
   1ca93:	lea    r8,[rip+0x362f4]        # 52d8e <_fini@@Base+0x63a>
   1ca9a:	lea    rcx,[rip+0x4015f]        # 5cc00 <_fini@@Base+0xa4ac>
   1caa1:	lea    rsi,[rip+0x3f3e8]        # 5be90 <_fini@@Base+0x973c>
   1caa8:	mov    edx,0x46f
   1caad:	mov    rdi,r14
   1cab0:	xor    eax,eax
   1cab2:	mov    rbp,0xffffffffffffffff
   1cab9:	call   3a090 <g_str_equal@plt+0x2cdd0>
   1cabe:	jmp    1c9e9 <g_str_equal@plt+0xf729>
   1cac3:	mov    rdi,rbx
   1cac6:	mov    rbp,0xfffffffffffffffe
   1cacd:	call   1c650 <g_str_equal@plt+0xf390>
   1cad2:	jmp    1c9e9 <g_str_equal@plt+0xf729>
   1cad7:	nop    WORD PTR [rax+rax*1+0x0]
   1cae0:	push   rbp
   1cae1:	mov    rbp,rsp
   1cae4:	push   r15
   1cae6:	push   r14
   1cae8:	push   r13
   1caea:	push   r12
   1caec:	mov    r12,rsi
   1caef:	push   rbx
   1caf0:	lea    rsi,[rip+0x400d3]        # 5cbca <_fini@@Base+0xa476>
   1caf7:	mov    r14,rdx
   1cafa:	sub    rsp,0x258
   1cb01:	mov    QWORD PTR [rbp-0x258],rdi
   1cb08:	mov    rdi,r12
   1cb0b:	mov    rax,QWORD PTR fs:0x28
   1cb14:	mov    QWORD PTR [rbp-0x38],rax
   1cb18:	xor    eax,eax
   1cb1a:	call   ca40 <strstr@plt>
   1cb1f:	test   rax,rax
   1cb22:	je     1cc80 <g_str_equal@plt+0xf9c0>
   1cb28:	mov    BYTE PTR [rax],0x0
   1cb2b:	mov    r10d,DWORD PTR [rip+0x267fa6]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   1cb32:	mov    r15,rax
   1cb35:	test   r10d,r10d
   1cb38:	jne    1cf40 <g_str_equal@plt+0xfc80>
   1cb3e:	mov    esi,0x20
   1cb43:	mov    rdi,r12
   1cb46:	call   cc00 <strchr@plt>
   1cb4b:	test   rax,rax
   1cb4e:	mov    r13,rax
   1cb51:	je     1cd50 <g_str_equal@plt+0xfa90>
   1cb57:	lea    rsi,[rip+0x3ff61]        # 5cabf <_fini@@Base+0xa36b>
   1cb5e:	mov    BYTE PTR [rax],0x0
   1cb61:	mov    rdi,r12
   1cb64:	call   d2c0 <g_str_equal@plt>
   1cb69:	test   eax,eax
   1cb6b:	je     1cce0 <g_str_equal@plt+0xfa20>
   1cb71:	add    r13,0x1
   1cb75:	mov    esi,0x20
   1cb7a:	mov    rdi,r13
   1cb7d:	call   cc00 <strchr@plt>
   1cb82:	test   rax,rax
   1cb85:	mov    r12,rax
   1cb88:	je     1cee0 <g_str_equal@plt+0xfc20>
   1cb8e:	lea    rsi,[rip+0x43d22]        # 608b7 <_fini@@Base+0xe163>
   1cb95:	mov    BYTE PTR [rax],0x0
   1cb98:	mov    rdi,r13
   1cb9b:	call   d2c0 <g_str_equal@plt>
   1cba0:	test   eax,eax
   1cba2:	je     1cd10 <g_str_equal@plt+0xfa50>
   1cba8:	add    r12,0x1
   1cbac:	lea    rsi,[rip+0x3ff43]        # 5caf6 <_fini@@Base+0xa3a2>
   1cbb3:	mov    rdi,r12
   1cbb6:	call   d2c0 <g_str_equal@plt>
   1cbbb:	test   eax,eax
   1cbbd:	je     1d030 <g_str_equal@plt+0xfd70>
   1cbc3:	lea    rax,[rbp-0x240]
   1cbca:	add    r15,0x2
   1cbce:	xor    r12d,r12d
   1cbd1:	mov    QWORD PTR [rbp-0x260],rax
   1cbd8:	mov    r13,rax
   1cbdb:	nop    DWORD PTR [rax+rax*1+0x0]
   1cbe0:	lea    rsi,[rip+0x3ffe3]        # 5cbca <_fini@@Base+0xa476>
   1cbe7:	mov    rdi,r15
   1cbea:	call   ca40 <strstr@plt>
   1cbef:	test   rax,rax
   1cbf2:	mov    rbx,rax
   1cbf5:	je     1cbfa <g_str_equal@plt+0xf93a>
   1cbf7:	mov    BYTE PTR [rax],0x0
   1cbfa:	mov    esi,0x3a
   1cbff:	mov    rdi,r15
   1cc02:	call   cc00 <strchr@plt>
   1cc07:	test   rax,rax
   1cc0a:	je     1d087 <g_str_equal@plt+0xfdc7>
   1cc10:	cmp    BYTE PTR [rax+0x1],0x20
   1cc14:	mov    BYTE PTR [rax],0x0
   1cc17:	lea    rcx,[rax+0x1]
   1cc1b:	jne    1cc29 <g_str_equal@plt+0xf969>
   1cc1d:	nop    DWORD PTR [rax]
   1cc20:	add    rcx,0x1
   1cc24:	cmp    BYTE PTR [rcx],0x20
   1cc27:	je     1cc20 <g_str_equal@plt+0xf960>
   1cc29:	cmp    r12,0x20
   1cc2d:	je     1d0ae <g_str_equal@plt+0xfdee>
   1cc33:	mov    QWORD PTR [r13+0x0],r15
   1cc37:	mov    QWORD PTR [r13+0x8],rcx
   1cc3b:	add    r12,0x1
   1cc3f:	movsx  edi,BYTE PTR [r15]
   1cc43:	test   dil,dil
   1cc46:	je     1cc66 <g_str_equal@plt+0xf9a6>
   1cc48:	nop    DWORD PTR [rax+rax*1+0x0]
   1cc50:	call   cd70 <g_ascii_tolower@plt>
   1cc55:	add    r15,0x1
   1cc59:	mov    BYTE PTR [r15-0x1],al
   1cc5d:	movsx  edi,BYTE PTR [r15]
   1cc61:	test   dil,dil
   1cc64:	jne    1cc50 <g_str_equal@plt+0xf990>
   1cc66:	add    r13,0x10
   1cc6a:	test   rbx,rbx
   1cc6d:	je     1cd80 <g_str_equal@plt+0xfac0>
   1cc73:	lea    r15,[rbx+0x2]
   1cc77:	jmp    1cbe0 <g_str_equal@plt+0xf920>
   1cc7c:	nop    DWORD PTR [rax+0x0]
   1cc80:	lea    r8,[rip+0x3fdfe]        # 5ca85 <_fini@@Base+0xa331>
   1cc87:	lea    rcx,[rip+0x401f2]        # 5ce80 <_fini@@Base+0xa72c>
   1cc8e:	lea    rsi,[rip+0x3f1fb]        # 5be90 <_fini@@Base+0x973c>
   1cc95:	mov    edx,0xdd
   1cc9a:	mov    rdi,r14
   1cc9d:	xor    eax,eax
   1cc9f:	call   3a090 <g_str_equal@plt+0x2cdd0>
   1cca4:	mov    rdi,QWORD PTR [rbp-0x258]
   1ccab:	lea    rsi,[rip+0x3f65e]        # 5c310 <_fini@@Base+0x9bbc>
   1ccb2:	call   1b850 <g_str_equal@plt+0xe590>
   1ccb7:	mov    rax,QWORD PTR [rbp-0x38]
   1ccbb:	xor    rax,QWORD PTR fs:0x28
   1ccc4:	jne    1d3b5 <g_str_equal@plt+0x100f5>
   1ccca:	lea    rsp,[rbp-0x28]
   1ccce:	pop    rbx
   1cccf:	pop    r12
   1ccd1:	pop    r13
   1ccd3:	pop    r14
   1ccd5:	pop    r15
   1ccd7:	pop    rbp
   1ccd8:	ret    
   1ccd9:	nop    DWORD PTR [rax+0x0]
   1cce0:	lea    r8,[rip+0x3fddc]        # 5cac3 <_fini@@Base+0xa36f>
   1cce7:	lea    rcx,[rip+0x40192]        # 5ce80 <_fini@@Base+0xa72c>
   1ccee:	lea    rsi,[rip+0x3f19b]        # 5be90 <_fini@@Base+0x973c>
   1ccf5:	mov    r9,r12
   1ccf8:	mov    edx,0xeb
   1ccfd:	mov    rdi,r14
   1cd00:	call   3a090 <g_str_equal@plt+0x2cdd0>
   1cd05:	jmp    1cca4 <g_str_equal@plt+0xf9e4>
   1cd07:	nop    WORD PTR [rax+rax*1+0x0]
   1cd10:	mov    rdi,QWORD PTR [rbp-0x258]
   1cd17:	lea    rsi,[rip+0x3f5a2]        # 5c2c0 <_fini@@Base+0x9b6c>
   1cd1e:	call   1b850 <g_str_equal@plt+0xe590>
   1cd23:	lea    r8,[rip+0x3fdb4]        # 5cade <_fini@@Base+0xa38a>
   1cd2a:	lea    rcx,[rip+0x4014f]        # 5ce80 <_fini@@Base+0xa72c>
   1cd31:	lea    rsi,[rip+0x3f158]        # 5be90 <_fini@@Base+0x973c>
   1cd38:	mov    r9,r13
   1cd3b:	mov    edx,0xfa
   1cd40:	mov    rdi,r14
   1cd43:	xor    eax,eax
   1cd45:	call   3a090 <g_str_equal@plt+0x2cdd0>
   1cd4a:	jmp    1ccb7 <g_str_equal@plt+0xf9f7>
   1cd4f:	nop
   1cd50:	lea    r8,[rip+0x3fd4c]        # 5caa3 <_fini@@Base+0xa34f>
   1cd57:	lea    rcx,[rip+0x40122]        # 5ce80 <_fini@@Base+0xa72c>
   1cd5e:	lea    rsi,[rip+0x3f12b]        # 5be90 <_fini@@Base+0x973c>
   1cd65:	mov    edx,0xe5
   1cd6a:	mov    rdi,r14
   1cd6d:	xor    eax,eax
   1cd6f:	call   3a090 <g_str_equal@plt+0x2cdd0>
   1cd74:	jmp    1ccb7 <g_str_equal@plt+0xf9f7>
   1cd79:	nop    DWORD PTR [rax+0x0]
   1cd80:	mov    rdi,QWORD PTR [rbp-0x260]
   1cd87:	lea    rdx,[rip+0x3fe23]        # 5cbb1 <_fini@@Base+0xa45d>
   1cd8e:	mov    rsi,r12
   1cd91:	call   1b880 <g_str_equal@plt+0xe5c0>
   1cd96:	test   rax,rax
   1cd99:	mov    r13,rax
   1cd9c:	je     1cf10 <g_str_equal@plt+0xfc50>
   1cda2:	mov    rdi,QWORD PTR [rbp-0x260]
   1cda9:	lea    rdx,[rip+0x3fd97]        # 5cb47 <_fini@@Base+0xa3f3>
   1cdb0:	mov    rsi,r12
   1cdb3:	call   1b880 <g_str_equal@plt+0xe5c0>
   1cdb8:	test   rax,rax
   1cdbb:	mov    rbx,rax
   1cdbe:	je     1cfa8 <g_str_equal@plt+0xfce8>
   1cdc4:	mov    rdi,QWORD PTR [rbp-0x260]
   1cdcb:	lea    rdx,[rip+0x3fd8b]        # 5cb5d <_fini@@Base+0xa409>
   1cdd2:	mov    rsi,r12
   1cdd5:	call   1b880 <g_str_equal@plt+0xe5c0>
   1cdda:	test   rax,rax
   1cddd:	mov    QWORD PTR [rbp-0x268],rax
   1cde4:	je     1d000 <g_str_equal@plt+0xfd40>
   1cdea:	mov    rdi,QWORD PTR [rbp-0x260]
   1cdf1:	lea    rdx,[rip+0x45a46]        # 6283e <_fini@@Base+0x100ea>
   1cdf8:	mov    rsi,r12
   1cdfb:	call   1b880 <g_str_equal@plt+0xe5c0>
   1ce00:	test   rax,rax
   1ce03:	mov    r15,rax
   1ce06:	je     1d060 <g_str_equal@plt+0xfda0>
   1ce0c:	mov    rdi,QWORD PTR [rbp-0x260]
   1ce13:	lea    rdx,[rip+0x3e85c]        # 5b676 <_fini@@Base+0x8f22>
   1ce1a:	mov    rsi,r12
   1ce1d:	call   1b880 <g_str_equal@plt+0xe5c0>
   1ce22:	test   rax,rax
   1ce25:	mov    QWORD PTR [rbp-0x270],rax
   1ce2c:	je     1d0d7 <g_str_equal@plt+0xfe17>
   1ce32:	mov    rdi,QWORD PTR [rbp-0x260]
   1ce39:	lea    rdx,[rip+0x3fd2f]        # 5cb6f <_fini@@Base+0xa41b>
   1ce40:	mov    rsi,r12
   1ce43:	call   1b880 <g_str_equal@plt+0xe5c0>
   1ce48:	test   rax,rax
   1ce4b:	mov    r12,rax
   1ce4e:	je     1cfd1 <g_str_equal@plt+0xfd11>
   1ce54:	mov    r9d,DWORD PTR [rip+0x267c7d]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   1ce5b:	test   r9d,r9d
   1ce5e:	jne    1d236 <g_str_equal@plt+0xff76>
   1ce64:	lea    rsi,[rip+0x3fd0c]        # 5cb77 <_fini@@Base+0xa423>
   1ce6b:	mov    rdi,r13
   1ce6e:	call   c330 <g_strrstr@plt>
   1ce73:	test   rax,rax
   1ce76:	je     1d0fe <g_str_equal@plt+0xfe3e>
   1ce7c:	lea    rsi,[rip+0x3fcfb]        # 5cb7e <_fini@@Base+0xa42a>
   1ce83:	mov    rdi,rbx
   1ce86:	call   d2c0 <g_str_equal@plt>
   1ce8b:	test   eax,eax
   1ce8d:	je     1d135 <g_str_equal@plt+0xfe75>
   1ce93:	mov    rdi,QWORD PTR [rbp-0x268]
   1ce9a:	call   c720 <strlen@plt>
   1ce9f:	cmp    rax,0x18
   1cea3:	je     1d16a <g_str_equal@plt+0xfeaa>
   1cea9:	sub    rsp,0x8
   1cead:	lea    r8,[rip+0x3f6bc]        # 5c570 <_fini@@Base+0x9e1c>
   1ceb4:	lea    rcx,[rip+0x40005]        # 5cec0 <_fini@@Base+0xa76c>
   1cebb:	push   0x18
   1cebd:	lea    rsi,[rip+0x3efcc]        # 5be90 <_fini@@Base+0x973c>
   1cec4:	mov    r9,rax
   1cec7:	mov    edx,0x1bd
   1cecc:	xor    eax,eax
   1cece:	mov    rdi,r14
   1ced1:	call   3a090 <g_str_equal@plt+0x2cdd0>
   1ced6:	pop    rax
   1ced7:	pop    rdx
   1ced8:	jmp    1cca4 <g_str_equal@plt+0xf9e4>
   1cedd:	nop    DWORD PTR [rax]
   1cee0:	lea    r8,[rip+0x3f3b9]        # 5c2a0 <_fini@@Base+0x9b4c>
   1cee7:	lea    rcx,[rip+0x3ff92]        # 5ce80 <_fini@@Base+0xa72c>
   1ceee:	lea    rsi,[rip+0x3ef9b]        # 5be90 <_fini@@Base+0x973c>
   1cef5:	mov    edx,0xf2
   1cefa:	mov    rdi,r14
   1cefd:	xor    eax,eax
   1ceff:	call   3a090 <g_str_equal@plt+0x2cdd0>
   1cf04:	jmp    1cca4 <g_str_equal@plt+0xf9e4>
   1cf09:	nop    DWORD PTR [rax+0x0]
   1cf10:	lea    r8,[rip+0x3f461]        # 5c378 <_fini@@Base+0x9c24>
   1cf17:	lea    rcx,[rip+0x3ffa2]        # 5cec0 <_fini@@Base+0xa76c>
   1cf1e:	lea    rsi,[rip+0x3ef6b]        # 5be90 <_fini@@Base+0x973c>
   1cf25:	mov    edx,0x185
   1cf2a:	mov    rdi,r14
   1cf2d:	xor    eax,eax
   1cf2f:	call   3a090 <g_str_equal@plt+0x2cdd0>
   1cf34:	jmp    1cca4 <g_str_equal@plt+0xf9e4>
   1cf39:	nop    DWORD PTR [rax+0x0]
   1cf40:	cmp    WORD PTR [rip+0x26a058],0x0        # 286fa0 <stdout@@GLIBC_2.2.5+0x2658>
   1cf48:	je     1cb3e <g_str_equal@plt+0xf87e>
   1cf4e:	test   BYTE PTR [rip+0x268f4c],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   1cf55:	je     1cb3e <g_str_equal@plt+0xf87e>
   1cf5b:	lea    rdi,[rbp-0x250]
   1cf62:	xor    esi,esi
   1cf64:	call   c3e0 <gettimeofday@plt>
   1cf69:	mov    rbx,QWORD PTR [rbp-0x248]
   1cf70:	mov    r13,QWORD PTR [rbp-0x250]
   1cf77:	call   c5b0 <getpid@plt>
   1cf7c:	mov    r8,QWORD PTR [rbp-0x258]
   1cf83:	lea    rdi,[rip+0x3f2b6]        # 5c240 <_fini@@Base+0x9aec>
   1cf8a:	mov    esi,eax
   1cf8c:	mov    r9,r12
   1cf8f:	mov    rcx,rbx
   1cf92:	mov    rdx,r13
   1cf95:	xor    eax,eax
   1cf97:	call   431a0 <g_str_equal@plt+0x35ee0>
   1cf9c:	jmp    1cb3e <g_str_equal@plt+0xf87e>
   1cfa1:	nop    DWORD PTR [rax+0x0]
   1cfa8:	lea    r8,[rip+0x3f3f1]        # 5c3a0 <_fini@@Base+0x9c4c>
   1cfaf:	lea    rcx,[rip+0x3ff0a]        # 5cec0 <_fini@@Base+0xa76c>
   1cfb6:	lea    rsi,[rip+0x3eed3]        # 5be90 <_fini@@Base+0x973c>
   1cfbd:	mov    edx,0x18c
   1cfc2:	mov    rdi,r14
   1cfc5:	xor    eax,eax
   1cfc7:	call   3a090 <g_str_equal@plt+0x2cdd0>
   1cfcc:	jmp    1cca4 <g_str_equal@plt+0xf9e4>
   1cfd1:	lea    r8,[rip+0x3f470]        # 5c448 <_fini@@Base+0x9cf4>
   1cfd8:	lea    rcx,[rip+0x3fee1]        # 5cec0 <_fini@@Base+0xa76c>
   1cfdf:	lea    rsi,[rip+0x3eeaa]        # 5be90 <_fini@@Base+0x973c>
   1cfe6:	mov    edx,0x1a8
   1cfeb:	mov    rdi,r14
   1cfee:	xor    eax,eax
   1cff0:	call   3a090 <g_str_equal@plt+0x2cdd0>
   1cff5:	jmp    1cca4 <g_str_equal@plt+0xf9e4>
   1cffa:	nop    WORD PTR [rax+rax*1+0x0]
   1d000:	lea    r8,[rip+0x3f3c1]        # 5c3c8 <_fini@@Base+0x9c74>
   1d007:	lea    rcx,[rip+0x3feb2]        # 5cec0 <_fini@@Base+0xa76c>
   1d00e:	lea    rsi,[rip+0x3ee7b]        # 5be90 <_fini@@Base+0x973c>
   1d015:	mov    edx,0x193
   1d01a:	mov    rdi,r14
   1d01d:	call   3a090 <g_str_equal@plt+0x2cdd0>
   1d022:	jmp    1cca4 <g_str_equal@plt+0xf9e4>
   1d027:	nop    WORD PTR [rax+rax*1+0x0]
   1d030:	lea    r8,[rip+0x3fac8]        # 5caff <_fini@@Base+0xa3ab>
   1d037:	lea    rcx,[rip+0x3fe42]        # 5ce80 <_fini@@Base+0xa72c>
   1d03e:	lea    rsi,[rip+0x3ee4b]        # 5be90 <_fini@@Base+0x973c>
   1d045:	mov    r9,r12
   1d048:	mov    edx,0x101
   1d04d:	mov    rdi,r14
   1d050:	call   3a090 <g_str_equal@plt+0x2cdd0>
   1d055:	jmp    1cca4 <g_str_equal@plt+0xf9e4>
   1d05a:	nop    WORD PTR [rax+rax*1+0x0]
   1d060:	lea    r8,[rip+0x3f389]        # 5c3f0 <_fini@@Base+0x9c9c>
   1d067:	lea    rcx,[rip+0x3fe52]        # 5cec0 <_fini@@Base+0xa76c>
   1d06e:	lea    rsi,[rip+0x3ee1b]        # 5be90 <_fini@@Base+0x973c>
   1d075:	mov    edx,0x19a
   1d07a:	mov    rdi,r14
   1d07d:	call   3a090 <g_str_equal@plt+0x2cdd0>
   1d082:	jmp    1cca4 <g_str_equal@plt+0xf9e4>
   1d087:	lea    r8,[rip+0x3fa8d]        # 5cb1b <_fini@@Base+0xa3c7>
   1d08e:	lea    rcx,[rip+0x3fdeb]        # 5ce80 <_fini@@Base+0xa72c>
   1d095:	lea    rsi,[rip+0x3edf4]        # 5be90 <_fini@@Base+0x973c>
   1d09c:	mov    edx,0x11a
   1d0a1:	mov    rdi,r14
   1d0a4:	call   3a090 <g_str_equal@plt+0x2cdd0>
   1d0a9:	jmp    1cca4 <g_str_equal@plt+0xf9e4>
   1d0ae:	lea    r8,[rip+0x3fa7c]        # 5cb31 <_fini@@Base+0xa3dd>
   1d0b5:	lea    rcx,[rip+0x3fdc4]        # 5ce80 <_fini@@Base+0xa72c>
   1d0bc:	lea    rsi,[rip+0x3edcd]        # 5be90 <_fini@@Base+0x973c>
   1d0c3:	mov    edx,0x124
   1d0c8:	mov    rdi,r14
   1d0cb:	xor    eax,eax
   1d0cd:	call   3a090 <g_str_equal@plt+0x2cdd0>
   1d0d2:	jmp    1cca4 <g_str_equal@plt+0xf9e4>
   1d0d7:	lea    r8,[rip+0x3f33a]        # 5c418 <_fini@@Base+0x9cc4>
   1d0de:	lea    rcx,[rip+0x3fddb]        # 5cec0 <_fini@@Base+0xa76c>
   1d0e5:	lea    rsi,[rip+0x3eda4]        # 5be90 <_fini@@Base+0x973c>
   1d0ec:	mov    edx,0x1a1
   1d0f1:	mov    rdi,r14
   1d0f4:	call   3a090 <g_str_equal@plt+0x2cdd0>
   1d0f9:	jmp    1cca4 <g_str_equal@plt+0xf9e4>
   1d0fe:	sub    rsp,0x8
   1d102:	lea    r8,[rip+0x3f407]        # 5c510 <_fini@@Base+0x9dbc>
   1d109:	lea    r9,[rip+0x3fa67]        # 5cb77 <_fini@@Base+0xa423>
   1d110:	push   r13
   1d112:	lea    rcx,[rip+0x3fda7]        # 5cec0 <_fini@@Base+0xa76c>
   1d119:	lea    rsi,[rip+0x3ed70]        # 5be90 <_fini@@Base+0x973c>
   1d120:	mov    rdi,r14
   1d123:	mov    edx,0x1b1
   1d128:	call   3a090 <g_str_equal@plt+0x2cdd0>
   1d12d:	pop    rdi
   1d12e:	pop    r8
   1d130:	jmp    1cca4 <g_str_equal@plt+0xf9e4>
   1d135:	sub    rsp,0x8
   1d139:	lea    rcx,[rip+0x3fd80]        # 5cec0 <_fini@@Base+0xa76c>
   1d140:	lea    rsi,[rip+0x3ed49]        # 5be90 <_fini@@Base+0x973c>
   1d147:	push   rbx
   1d148:	lea    r9,[rip+0x3fa2f]        # 5cb7e <_fini@@Base+0xa42a>
   1d14f:	lea    r8,[rip+0x3f3ea]        # 5c540 <_fini@@Base+0x9dec>
   1d156:	mov    edx,0x1b7
   1d15b:	mov    rdi,r14
   1d15e:	call   3a090 <g_str_equal@plt+0x2cdd0>
   1d163:	pop    rcx
   1d164:	pop    rsi
   1d165:	jmp    1cca4 <g_str_equal@plt+0xf9e4>
   1d16a:	mov    rdi,QWORD PTR [rbp-0x270]
   1d171:	lea    rsi,[rip+0x46176]        # 632ee <_fini@@Base+0x10b9a>
   1d178:	xor    edx,edx
   1d17a:	call   cd90 <g_strsplit@plt>
   1d17f:	test   rax,rax
   1d182:	mov    rbx,rax
   1d185:	mov    QWORD PTR [rbp-0x260],rax
   1d18c:	je     1d363 <g_str_equal@plt+0x100a3>
   1d192:	mov    rdi,QWORD PTR [rax]
   1d195:	test   rdi,rdi
   1d198:	je     1d3ba <g_str_equal@plt+0x100fa>
   1d19e:	xor    r13d,r13d
   1d1a1:	mov    r15d,0x1
   1d1a7:	nop    WORD PTR [rax+rax*1+0x0]
   1d1b0:	call   ccb0 <g_strchug@plt>
   1d1b5:	mov    rdi,rax
   1d1b8:	call   cba0 <g_strchomp@plt>
   1d1bd:	mov    rdi,QWORD PTR [rbx]
   1d1c0:	lea    rsi,[rip+0x3f9ba]        # 5cb81 <_fini@@Base+0xa42d>
   1d1c7:	call   c3c0 <strcasecmp@plt>
   1d1cc:	test   eax,eax
   1d1ce:	cmove  r13d,r15d
   1d1d2:	add    rbx,0x8
   1d1d6:	mov    rdi,QWORD PTR [rbx]
   1d1d9:	test   rdi,rdi
   1d1dc:	jne    1d1b0 <g_str_equal@plt+0xfef0>
   1d1de:	mov    rdi,QWORD PTR [rbp-0x260]
   1d1e5:	call   d030 <g_strfreev@plt>
   1d1ea:	test   r13b,r13b
   1d1ed:	je     1d36a <g_str_equal@plt+0x100aa>
   1d1f3:	lea    rsi,[rip+0x3f98f]        # 5cb89 <_fini@@Base+0xa435>
   1d1fa:	mov    rdi,r12
   1d1fd:	call   c3c0 <strcasecmp@plt>
   1d202:	test   eax,eax
   1d204:	je     1d2c6 <g_str_equal@plt+0x10006>
   1d20a:	lea    r8,[rip+0x3f982]        # 5cb93 <_fini@@Base+0xa43f>
   1d211:	lea    rcx,[rip+0x3fca8]        # 5cec0 <_fini@@Base+0xa76c>
   1d218:	lea    rsi,[rip+0x3ec71]        # 5be90 <_fini@@Base+0x973c>
   1d21f:	mov    r9,r12
   1d222:	mov    edx,0x1d0
   1d227:	mov    rdi,r14
   1d22a:	xor    eax,eax
   1d22c:	call   3a090 <g_str_equal@plt+0x2cdd0>
   1d231:	jmp    1cca4 <g_str_equal@plt+0xf9e4>
   1d236:	cmp    WORD PTR [rip+0x269d60],0x0        # 286f9e <stdout@@GLIBC_2.2.5+0x2656>
   1d23e:	je     1ce64 <g_str_equal@plt+0xfba4>
   1d244:	test   BYTE PTR [rip+0x268c56],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   1d24b:	je     1ce64 <g_str_equal@plt+0xfba4>
   1d251:	lea    rdi,[rbp-0x250]
   1d258:	xor    esi,esi
   1d25a:	call   c3e0 <gettimeofday@plt>
   1d25f:	mov    rcx,QWORD PTR [rbp-0x248]
   1d266:	mov    rdx,QWORD PTR [rbp-0x250]
   1d26d:	mov    QWORD PTR [rbp-0x278],rcx
   1d274:	mov    QWORD PTR [rbp-0x260],rdx
   1d27b:	call   c5b0 <getpid@plt>
   1d280:	sub    rsp,0x8
   1d284:	push   QWORD PTR [rbp-0x268]
   1d28a:	lea    rdi,[rip+0x3f1df]        # 5c470 <_fini@@Base+0x9d1c>
   1d291:	push   r12
   1d293:	push   QWORD PTR [rbp-0x270]
   1d299:	mov    esi,eax
   1d29b:	push   r15
   1d29d:	push   rbx
   1d29e:	mov    r9,r13
   1d2a1:	mov    r8,QWORD PTR [rbp-0x258]
   1d2a8:	mov    rcx,QWORD PTR [rbp-0x278]
   1d2af:	xor    eax,eax
   1d2b1:	mov    rdx,QWORD PTR [rbp-0x260]
   1d2b8:	call   431a0 <g_str_equal@plt+0x35ee0>
   1d2bd:	add    rsp,0x30
   1d2c1:	jmp    1ce64 <g_str_equal@plt+0xfba4>
   1d2c6:	mov    rsi,QWORD PTR [rbp-0x268]
   1d2cd:	mov    rbx,rsp
   1d2d0:	sub    rsp,0x40
   1d2d4:	mov    edx,0x19
   1d2d9:	mov    rdi,rsp
   1d2dc:	mov    QWORD PTR [rbp-0x250],0x0
   1d2e7:	call   d290 <g_strlcpy@plt>
   1d2ec:	lea    rsi,[rip+0x3f2d5]        # 5c5c8 <_fini@@Base+0x9e74>
   1d2f3:	mov    edx,0x3d
   1d2f8:	mov    rdi,rsp
   1d2fb:	call   c440 <g_strlcat@plt>
   1d300:	lea    rcx,[rbp-0x250]
   1d307:	mov    r8,r14
   1d30a:	mov    edx,0x3c
   1d30f:	mov    rsi,rsp
   1d312:	mov    edi,0x1
   1d317:	call   f390 <g_str_equal@plt+0x20d0>
   1d31c:	test   eax,eax
   1d31e:	js     1d39a <g_str_equal@plt+0x100da>
   1d320:	call   1b6e0 <g_str_equal@plt+0xe420>
   1d325:	mov    rcx,QWORD PTR [rbp-0x250]
   1d32c:	mov    rdi,QWORD PTR [rbp-0x258]
   1d333:	lea    rsi,[rip+0x3f30e]        # 5c648 <_fini@@Base+0x9ef4>
   1d33a:	mov    rdx,rax
   1d33d:	mov    r12,rax
   1d340:	xor    eax,eax
   1d342:	call   1b760 <g_str_equal@plt+0xe4a0>
   1d347:	mov    rdi,r12
   1d34a:	call   d2b0 <g_free@plt>
   1d34f:	mov    rdi,QWORD PTR [rbp-0x250]
   1d356:	call   d2b0 <g_free@plt>
   1d35b:	mov    rsp,rbx
   1d35e:	jmp    1ccb7 <g_str_equal@plt+0xf9f7>
   1d363:	xor    edi,edi
   1d365:	call   d030 <g_strfreev@plt>
   1d36a:	mov    r9,QWORD PTR [rbp-0x270]
   1d371:	lea    r8,[rip+0x3f228]        # 5c5a0 <_fini@@Base+0x9e4c>
   1d378:	lea    rcx,[rip+0x3fb41]        # 5cec0 <_fini@@Base+0xa76c>
   1d37f:	lea    rsi,[rip+0x3eb0a]        # 5be90 <_fini@@Base+0x973c>
   1d386:	mov    edx,0x1cb
   1d38b:	mov    rdi,r14
   1d38e:	xor    eax,eax
   1d390:	call   3a090 <g_str_equal@plt+0x2cdd0>
   1d395:	jmp    1cca4 <g_str_equal@plt+0xf9e4>
   1d39a:	mov    rdi,QWORD PTR [rbp-0x258]
   1d3a1:	lea    rsi,[rip+0x3f248]        # 5c5f0 <_fini@@Base+0x9e9c>
   1d3a8:	call   1b850 <g_str_equal@plt+0xe590>
   1d3ad:	mov    rsp,rbx
   1d3b0:	jmp    1ccb7 <g_str_equal@plt+0xf9f7>
   1d3b5:	call   cd30 <__stack_chk_fail@plt>
   1d3ba:	mov    rdi,QWORD PTR [rbp-0x260]
   1d3c1:	call   d030 <g_strfreev@plt>
   1d3c6:	jmp    1d36a <g_str_equal@plt+0x100aa>
   1d3c8:	nop    DWORD PTR [rax+rax*1+0x0]
   1d3d0:	push   r15
   1d3d2:	push   r14
   1d3d4:	push   r13
   1d3d6:	push   r12
   1d3d8:	mov    r13,rdx
   1d3db:	push   rbp
   1d3dc:	push   rbx
   1d3dd:	mov    ebp,0x1000
   1d3e2:	sub    rsp,0x48
   1d3e6:	mov    QWORD PTR [rsp+0x8],rdi
   1d3eb:	mov    rdi,rdx
   1d3ee:	lea    r15,[rsp+0x18]
   1d3f3:	mov    rax,QWORD PTR fs:0x28
   1d3fc:	mov    QWORD PTR [rsp+0x38],rax
   1d401:	xor    eax,eax
   1d403:	call   1f090 <g_str_equal@plt+0x11dd0>
   1d408:	lea    r8,[rip+0x3fb71]        # 5cf80 <_fini@@Base+0xa82c>
   1d40f:	lea    rdx,[rip+0x3ea7a]        # 5be90 <_fini@@Base+0x973c>
   1d416:	lea    rsi,[rip+0x3f5c6]        # 5c9e3 <_fini@@Base+0xa28f>
   1d41d:	mov    ecx,0x237
   1d422:	mov    rdi,rax
   1d425:	call   205c0 <g_str_equal@plt+0x13300>
   1d42a:	sub    rbp,QWORD PTR [rax+0x68]
   1d42e:	lea    r12,[rax+0x58]
   1d432:	mov    rbx,rax
   1d435:	mov    QWORD PTR [rsp+0x18],0x0
   1d43e:	mov    rdi,r12
   1d441:	mov    rsi,rbp
   1d444:	call   42c30 <g_str_equal@plt+0x35970>
   1d449:	mov    rdi,r12
   1d44c:	call   42c60 <g_str_equal@plt+0x359a0>
   1d451:	mov    rdi,QWORD PTR [rbx+0x50]
   1d455:	mov    rcx,r15
   1d458:	mov    rdx,rbp
   1d45b:	mov    rsi,rax
   1d45e:	call   16a70 <g_str_equal@plt+0x97b0>
   1d463:	test   rax,rax
   1d466:	js     1d5c0 <g_str_equal@plt+0x10300>
   1d46c:	mov    rsi,QWORD PTR [rbx+0x68]
   1d470:	mov    rdi,QWORD PTR [rbx+0x78]
   1d474:	lea    rdx,[rip+0x3f74d]        # 5cbc8 <_fini@@Base+0xa474>
   1d47b:	mov    r14,rax
   1d47e:	add    rsi,rax
   1d481:	mov    QWORD PTR [rbx+0x68],rsi
   1d485:	call   c7b0 <g_strstr_len@plt>
   1d48a:	test   rax,rax
   1d48d:	mov    rbp,rax
   1d490:	je     1d520 <g_str_equal@plt+0x10260>
   1d496:	mov    BYTE PTR [rax],0x0
   1d499:	mov    rsi,QWORD PTR [rbx+0x78]
   1d49d:	mov    rdi,rbx
   1d4a0:	mov    rdx,r15
   1d4a3:	call   1cae0 <g_str_equal@plt+0xf820>
   1d4a8:	sub    rbp,QWORD PTR [rbx+0x78]
   1d4ac:	mov    rdi,r12
   1d4af:	lea    rsi,[rbp+0x4]
   1d4b3:	call   42da0 <g_str_equal@plt+0x35ae0>
   1d4b8:	mov    rsi,QWORD PTR [rsp+0x18]
   1d4bd:	lea    rdi,[rbx+0xe8]
   1d4c4:	call   3a4c0 <g_str_equal@plt+0x2d200>
   1d4c9:	mov    eax,DWORD PTR [rip+0x267609]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   1d4cf:	test   eax,eax
   1d4d1:	jne    1d640 <g_str_equal@plt+0x10380>
   1d4d7:	mov    rdi,QWORD PTR [rbx+0x50]
   1d4db:	lea    rdx,[rip+0x21e]        # 1d700 <g_str_equal@plt+0x10440>
   1d4e2:	xor    r8d,r8d
   1d4e5:	mov    rcx,r13
   1d4e8:	mov    esi,0x4
   1d4ed:	xor    ebx,ebx
   1d4ef:	call   16d70 <g_str_equal@plt+0x9ab0>
   1d4f4:	mov    rcx,QWORD PTR [rsp+0x38]
   1d4f9:	xor    rcx,QWORD PTR fs:0x28
   1d502:	mov    eax,ebx
   1d504:	jne    1d6f9 <g_str_equal@plt+0x10439>
   1d50a:	add    rsp,0x48
   1d50e:	pop    rbx
   1d50f:	pop    rbp
   1d510:	pop    r12
   1d512:	pop    r13
   1d514:	pop    r14
   1d516:	pop    r15
   1d518:	ret    
   1d519:	nop    DWORD PTR [rax+0x0]
   1d520:	cmp    QWORD PTR [rbx+0x68],0xfff
   1d528:	ja     1d600 <g_str_equal@plt+0x10340>
   1d52e:	test   r14,r14
   1d531:	je     1d596 <g_str_equal@plt+0x102d6>
   1d533:	mov    ecx,DWORD PTR [rip+0x26759f]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   1d539:	mov    ebx,0x1
   1d53e:	test   ecx,ecx
   1d540:	je     1d4f4 <g_str_equal@plt+0x10234>
   1d542:	cmp    WORD PTR [rip+0x269a5e],0x0        # 286fa8 <stdout@@GLIBC_2.2.5+0x2660>
   1d54a:	je     1d4f4 <g_str_equal@plt+0x10234>
   1d54c:	test   BYTE PTR [rip+0x26894e],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   1d553:	je     1d4f4 <g_str_equal@plt+0x10234>
   1d555:	lea    rdi,[rsp+0x20]
   1d55a:	xor    esi,esi
   1d55c:	call   c3e0 <gettimeofday@plt>
   1d561:	mov    r12,QWORD PTR [rsp+0x28]
   1d566:	mov    rbp,QWORD PTR [rsp+0x20]
   1d56b:	call   c5b0 <getpid@plt>
   1d570:	mov    r8,QWORD PTR [rsp+0x8]
   1d575:	lea    rdi,[rip+0x3f294]        # 5c810 <_fini@@Base+0xa0bc>
   1d57c:	mov    esi,eax
   1d57e:	mov    r9d,0x1
   1d584:	mov    rcx,r12
   1d587:	mov    rdx,rbp
   1d58a:	xor    eax,eax
   1d58c:	call   431a0 <g_str_equal@plt+0x35ee0>
   1d591:	jmp    1d4f4 <g_str_equal@plt+0x10234>
   1d596:	lea    r8,[rip+0x3f1e3]        # 5c780 <_fini@@Base+0xa02c>
   1d59d:	lea    rcx,[rip+0x3f95c]        # 5cf00 <_fini@@Base+0xa7ac>
   1d5a4:	lea    rsi,[rip+0x3e8e5]        # 5be90 <_fini@@Base+0x973c>
   1d5ab:	mov    edx,0x1f8
   1d5b0:	mov    rdi,r15
   1d5b3:	xor    eax,eax
   1d5b5:	call   3a090 <g_str_equal@plt+0x2cdd0>
   1d5ba:	nop    WORD PTR [rax+rax*1+0x0]
   1d5c0:	mov    rdi,QWORD PTR [rsp+0x18]
   1d5c5:	call   39e20 <g_str_equal@plt+0x2cb60>
   1d5ca:	mov    edx,DWORD PTR [rip+0x267508]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   1d5d0:	mov    rbx,rax
   1d5d3:	test   edx,edx
   1d5d5:	jne    1d6a0 <g_str_equal@plt+0x103e0>
   1d5db:	mov    rsi,QWORD PTR [rsp+0x18]
   1d5e0:	mov    rdi,r13
   1d5e3:	xor    ebx,ebx
   1d5e5:	call   1f030 <g_str_equal@plt+0x11d70>
   1d5ea:	mov    rdi,r13
   1d5ed:	call   1ee80 <g_str_equal@plt+0x11bc0>
   1d5f2:	jmp    1d4f4 <g_str_equal@plt+0x10234>
   1d5f7:	nop    WORD PTR [rax+rax*1+0x0]
   1d600:	lea    rsi,[rip+0x3f0e9]        # 5c6f0 <_fini@@Base+0x9f9c>
   1d607:	mov    rdi,rbx
   1d60a:	call   1b850 <g_str_equal@plt+0xe590>
   1d60f:	lea    r8,[rip+0x3f13a]        # 5c750 <_fini@@Base+0x9ffc>
   1d616:	lea    rcx,[rip+0x3f8e3]        # 5cf00 <_fini@@Base+0xa7ac>
   1d61d:	lea    rsi,[rip+0x3e86c]        # 5be90 <_fini@@Base+0x973c>
   1d624:	mov    edx,0x1f4
   1d629:	mov    rdi,r15
   1d62c:	xor    eax,eax
   1d62e:	call   3a090 <g_str_equal@plt+0x2cdd0>
   1d633:	jmp    1d4b8 <g_str_equal@plt+0x101f8>
   1d638:	nop    DWORD PTR [rax+rax*1+0x0]
   1d640:	cmp    WORD PTR [rip+0x26995e],0x0        # 286fa6 <stdout@@GLIBC_2.2.5+0x265e>
   1d648:	je     1d4d7 <g_str_equal@plt+0x10217>
   1d64e:	test   BYTE PTR [rip+0x26884c],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   1d655:	je     1d4d7 <g_str_equal@plt+0x10217>
   1d65b:	lea    rdi,[rsp+0x20]
   1d660:	xor    esi,esi
   1d662:	call   c3e0 <gettimeofday@plt>
   1d667:	mov    r12,QWORD PTR [rsp+0x28]
   1d66c:	mov    rbp,QWORD PTR [rsp+0x20]
   1d671:	call   c5b0 <getpid@plt>
   1d676:	mov    r8,QWORD PTR [rsp+0x8]
   1d67b:	lea    rdi,[rip+0x3f1ee]        # 5c870 <_fini@@Base+0xa11c>
   1d682:	mov    esi,eax
   1d684:	mov    rcx,r12
   1d687:	mov    rdx,rbp
   1d68a:	xor    eax,eax
   1d68c:	call   431a0 <g_str_equal@plt+0x35ee0>
   1d691:	jmp    1d4d7 <g_str_equal@plt+0x10217>
   1d696:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1d6a0:	cmp    WORD PTR [rip+0x2698fc],0x0        # 286fa4 <stdout@@GLIBC_2.2.5+0x265c>
   1d6a8:	je     1d5db <g_str_equal@plt+0x1031b>
   1d6ae:	test   BYTE PTR [rip+0x2687ec],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   1d6b5:	je     1d5db <g_str_equal@plt+0x1031b>
   1d6bb:	lea    rdi,[rsp+0x20]
   1d6c0:	xor    esi,esi
   1d6c2:	call   c3e0 <gettimeofday@plt>
   1d6c7:	mov    r12,QWORD PTR [rsp+0x28]
   1d6cc:	mov    rbp,QWORD PTR [rsp+0x20]
   1d6d1:	call   c5b0 <getpid@plt>
   1d6d6:	mov    r8,QWORD PTR [rsp+0x8]
   1d6db:	lea    rdi,[rip+0x3f0d6]        # 5c7b8 <_fini@@Base+0xa064>
   1d6e2:	mov    esi,eax
   1d6e4:	mov    r9,rbx
   1d6e7:	mov    rcx,r12
   1d6ea:	mov    rdx,rbp
   1d6ed:	xor    eax,eax
   1d6ef:	call   431a0 <g_str_equal@plt+0x35ee0>
   1d6f4:	jmp    1d5db <g_str_equal@plt+0x1031b>
   1d6f9:	call   cd30 <__stack_chk_fail@plt>
   1d6fe:	xchg   ax,ax
   1d700:	push   r15
   1d702:	push   r14
   1d704:	push   r13
   1d706:	push   r12
   1d708:	mov    r12,rdi
   1d70b:	push   rbp
   1d70c:	push   rbx
   1d70d:	mov    rdi,rdx
   1d710:	mov    rbp,rdx
   1d713:	sub    rsp,0x38
   1d717:	mov    rax,QWORD PTR fs:0x28
   1d720:	mov    QWORD PTR [rsp+0x28],rax
   1d725:	xor    eax,eax
   1d727:	call   1f090 <g_str_equal@plt+0x11dd0>
   1d72c:	lea    r8,[rip+0x3f80d]        # 5cf40 <_fini@@Base+0xa7ec>
   1d733:	lea    rdx,[rip+0x3e756]        # 5be90 <_fini@@Base+0x973c>
   1d73a:	lea    rsi,[rip+0x3f2a2]        # 5c9e3 <_fini@@Base+0xa28f>
   1d741:	mov    ecx,0x20f
   1d746:	mov    rdi,rax
   1d749:	call   205c0 <g_str_equal@plt+0x13300>
   1d74e:	mov    rdx,QWORD PTR [rax+0x90]
   1d755:	mov    rsi,QWORD PTR [rax+0xa0]
   1d75c:	lea    rcx,[rsp+0x8]
   1d761:	mov    rdi,QWORD PTR [rax+0x50]
   1d765:	mov    rbx,rax
   1d768:	mov    QWORD PTR [rsp+0x8],0x0
   1d771:	call   16ac0 <g_str_equal@plt+0x9800>
   1d776:	test   rax,rax
   1d779:	js     1d878 <g_str_equal@plt+0x105b8>
   1d77f:	lea    rdi,[rbx+0x80]
   1d786:	mov    rsi,rax
   1d789:	call   42da0 <g_str_equal@plt+0x35ae0>
   1d78e:	cmp    QWORD PTR [rbx+0x90],0x0
   1d796:	jne    1d810 <g_str_equal@plt+0x10550>
   1d798:	mov    rdi,QWORD PTR [rbx+0xe8]
   1d79f:	test   rdi,rdi
   1d7a2:	je     1d8b0 <g_str_equal@plt+0x105f0>
   1d7a8:	call   39e20 <g_str_equal@plt+0x2cb60>
   1d7ad:	mov    ecx,DWORD PTR [rip+0x267325]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   1d7b3:	mov    r13,rax
   1d7b6:	test   ecx,ecx
   1d7b8:	jne    1d920 <g_str_equal@plt+0x10660>
   1d7be:	mov    rsi,QWORD PTR [rbx+0xe8]
   1d7c5:	mov    rdi,rbp
   1d7c8:	call   1f030 <g_str_equal@plt+0x11d70>
   1d7cd:	mov    QWORD PTR [rbx+0xe8],0x0
   1d7d8:	mov    rdi,rbp
   1d7db:	xor    ebx,ebx
   1d7dd:	call   1ee80 <g_str_equal@plt+0x11bc0>
   1d7e2:	mov    rcx,QWORD PTR [rsp+0x28]
   1d7e7:	xor    rcx,QWORD PTR fs:0x28
   1d7f0:	mov    eax,ebx
   1d7f2:	jne    1d9d4 <g_str_equal@plt+0x10714>
   1d7f8:	add    rsp,0x38
   1d7fc:	pop    rbx
   1d7fd:	pop    rbp
   1d7fe:	pop    r12
   1d800:	pop    r13
   1d802:	pop    r14
   1d804:	pop    r15
   1d806:	ret    
   1d807:	nop    WORD PTR [rax+rax*1+0x0]
   1d810:	mov    eax,DWORD PTR [rip+0x2672c2]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   1d816:	mov    ebx,0x1
   1d81b:	test   eax,eax
   1d81d:	je     1d7e2 <g_str_equal@plt+0x10522>
   1d81f:	cmp    WORD PTR [rip+0x269781],0x0        # 286fa8 <stdout@@GLIBC_2.2.5+0x2660>
   1d827:	je     1d7e2 <g_str_equal@plt+0x10522>
   1d829:	test   BYTE PTR [rip+0x268671],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   1d830:	je     1d7e2 <g_str_equal@plt+0x10522>
   1d832:	lea    rdi,[rsp+0x10]
   1d837:	xor    esi,esi
   1d839:	call   c3e0 <gettimeofday@plt>
   1d83e:	mov    r13,QWORD PTR [rsp+0x18]
   1d843:	mov    rbp,QWORD PTR [rsp+0x10]
   1d848:	call   c5b0 <getpid@plt>
   1d84d:	lea    rdi,[rip+0x3efbc]        # 5c810 <_fini@@Base+0xa0bc>
   1d854:	mov    esi,eax
   1d856:	mov    r9d,0x4
   1d85c:	mov    r8,r12
   1d85f:	mov    rcx,r13
   1d862:	mov    rdx,rbp
   1d865:	xor    eax,eax
   1d867:	call   431a0 <g_str_equal@plt+0x35ee0>
   1d86c:	jmp    1d7e2 <g_str_equal@plt+0x10522>
   1d871:	nop    DWORD PTR [rax+0x0]
   1d878:	mov    rdi,QWORD PTR [rsp+0x8]
   1d87d:	call   39e20 <g_str_equal@plt+0x2cb60>
   1d882:	mov    esi,DWORD PTR [rip+0x267250]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   1d888:	mov    rbx,rax
   1d88b:	test   esi,esi
   1d88d:	jne    1d8d0 <g_str_equal@plt+0x10610>
   1d88f:	mov    rsi,QWORD PTR [rsp+0x8]
   1d894:	mov    rdi,rbp
   1d897:	xor    ebx,ebx
   1d899:	call   1f030 <g_str_equal@plt+0x11d70>
   1d89e:	mov    rdi,rbp
   1d8a1:	call   1ee80 <g_str_equal@plt+0x11bc0>
   1d8a6:	jmp    1d7e2 <g_str_equal@plt+0x10522>
   1d8ab:	nop    DWORD PTR [rax+rax*1+0x0]
   1d8b0:	mov    edx,DWORD PTR [rip+0x267222]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   1d8b6:	test   edx,edx
   1d8b8:	jne    1d980 <g_str_equal@plt+0x106c0>
   1d8be:	mov    rdi,rbp
   1d8c1:	xor    ebx,ebx
   1d8c3:	call   1ee80 <g_str_equal@plt+0x11bc0>
   1d8c8:	jmp    1d7e2 <g_str_equal@plt+0x10522>
   1d8cd:	nop    DWORD PTR [rax]
   1d8d0:	cmp    WORD PTR [rip+0x2696cc],0x0        # 286fa4 <stdout@@GLIBC_2.2.5+0x265c>
   1d8d8:	je     1d88f <g_str_equal@plt+0x105cf>
   1d8da:	test   BYTE PTR [rip+0x2685c0],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   1d8e1:	je     1d88f <g_str_equal@plt+0x105cf>
   1d8e3:	lea    rdi,[rsp+0x10]
   1d8e8:	xor    esi,esi
   1d8ea:	call   c3e0 <gettimeofday@plt>
   1d8ef:	mov    r14,QWORD PTR [rsp+0x18]
   1d8f4:	mov    r13,QWORD PTR [rsp+0x10]
   1d8f9:	call   c5b0 <getpid@plt>
   1d8fe:	lea    rdi,[rip+0x3eeb3]        # 5c7b8 <_fini@@Base+0xa064>
   1d905:	mov    esi,eax
   1d907:	mov    r9,rbx
   1d90a:	mov    r8,r12
   1d90d:	mov    rcx,r14
   1d910:	mov    rdx,r13
   1d913:	xor    eax,eax
   1d915:	call   431a0 <g_str_equal@plt+0x35ee0>
   1d91a:	jmp    1d88f <g_str_equal@plt+0x105cf>
   1d91f:	nop
   1d920:	cmp    WORD PTR [rip+0x26967c],0x0        # 286fa4 <stdout@@GLIBC_2.2.5+0x265c>
   1d928:	je     1d7be <g_str_equal@plt+0x104fe>
   1d92e:	test   BYTE PTR [rip+0x26856c],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   1d935:	je     1d7be <g_str_equal@plt+0x104fe>
   1d93b:	lea    rdi,[rsp+0x10]
   1d940:	xor    esi,esi
   1d942:	call   c3e0 <gettimeofday@plt>
   1d947:	mov    r15,QWORD PTR [rsp+0x18]
   1d94c:	mov    r14,QWORD PTR [rsp+0x10]
   1d951:	call   c5b0 <getpid@plt>
   1d956:	lea    rdi,[rip+0x3ee5b]        # 5c7b8 <_fini@@Base+0xa064>
   1d95d:	mov    esi,eax
   1d95f:	mov    r9,r13
   1d962:	mov    r8,r12
   1d965:	mov    rcx,r15
   1d968:	mov    rdx,r14
   1d96b:	xor    eax,eax
   1d96d:	call   431a0 <g_str_equal@plt+0x35ee0>
   1d972:	jmp    1d7be <g_str_equal@plt+0x104fe>
   1d977:	nop    WORD PTR [rax+rax*1+0x0]
   1d980:	cmp    WORD PTR [rip+0x26961a],0x0        # 286fa2 <stdout@@GLIBC_2.2.5+0x265a>
   1d988:	je     1d8be <g_str_equal@plt+0x105fe>
   1d98e:	test   BYTE PTR [rip+0x26850c],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   1d995:	je     1d8be <g_str_equal@plt+0x105fe>
   1d99b:	lea    rdi,[rsp+0x10]
   1d9a0:	xor    esi,esi
   1d9a2:	call   c3e0 <gettimeofday@plt>
   1d9a7:	mov    r13,QWORD PTR [rsp+0x18]
   1d9ac:	mov    rbx,QWORD PTR [rsp+0x10]
   1d9b1:	call   c5b0 <getpid@plt>
   1d9b6:	lea    rdi,[rip+0x3ef0b]        # 5c8c8 <_fini@@Base+0xa174>
   1d9bd:	mov    esi,eax
   1d9bf:	mov    r8,r12
   1d9c2:	mov    rcx,r13
   1d9c5:	mov    rdx,rbx
   1d9c8:	xor    eax,eax
   1d9ca:	call   431a0 <g_str_equal@plt+0x35ee0>
   1d9cf:	jmp    1d8be <g_str_equal@plt+0x105fe>
   1d9d4:	call   cd30 <__stack_chk_fail@plt>
   1d9d9:	nop    DWORD PTR [rax+0x0]
   1d9e0:	push   r13
   1d9e2:	push   r12
   1d9e4:	push   rbp
   1d9e5:	push   rbx
   1d9e6:	mov    rbp,rdi
   1d9e9:	lea    rdi,[rip+0x3eff3]        # 5c9e3 <_fini@@Base+0xa28f>
   1d9f0:	sub    rsp,0x28
   1d9f4:	mov    rax,QWORD PTR fs:0x28
   1d9fd:	mov    QWORD PTR [rsp+0x18],rax
   1da02:	xor    eax,eax
   1da04:	call   20420 <g_str_equal@plt+0x13160>
   1da09:	lea    r8,[rip+0x3f5a0]        # 5cfb0 <_fini@@Base+0xa85c>
   1da10:	lea    rdx,[rip+0x3e479]        # 5be90 <_fini@@Base+0x973c>
   1da17:	lea    rsi,[rip+0x3efc5]        # 5c9e3 <_fini@@Base+0xa28f>
   1da1e:	mov    ecx,0x36a
   1da23:	mov    rdi,rax
   1da26:	call   205c0 <g_str_equal@plt+0x13300>
   1da2b:	lea    r8,[rip+0x3f57e]        # 5cfb0 <_fini@@Base+0xa85c>
   1da32:	lea    rdx,[rip+0x3e457]        # 5be90 <_fini@@Base+0x973c>
   1da39:	lea    rsi,[rip+0x35257]        # 52c97 <_fini@@Base+0x543>
   1da40:	mov    rbx,rax
   1da43:	mov    ecx,0x36b
   1da48:	mov    rdi,rax
   1da4b:	call   205c0 <g_str_equal@plt+0x13300>
   1da50:	mov    QWORD PTR [rbx+0x50],rbp
   1da54:	mov    esi,0x1
   1da59:	mov    rdi,rbp
   1da5c:	mov    r12,rax
   1da5f:	call   16860 <g_str_equal@plt+0x95a0>
   1da64:	test   al,al
   1da66:	je     1da75 <g_str_equal@plt+0x107b5>
   1da68:	mov    esi,0x1
   1da6d:	mov    rdi,r12
   1da70:	call   16870 <g_str_equal@plt+0x95b0>
   1da75:	mov    rdi,rbp
   1da78:	call   20b70 <g_str_equal@plt+0x138b0>
   1da7d:	mov    eax,DWORD PTR [rip+0x267055]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   1da83:	test   eax,eax
   1da85:	jne    1daa8 <g_str_equal@plt+0x107e8>
   1da87:	mov    rdx,QWORD PTR [rsp+0x18]
   1da8c:	xor    rdx,QWORD PTR fs:0x28
   1da95:	mov    rax,rbx
   1da98:	jne    1daf1 <g_str_equal@plt+0x10831>
   1da9a:	add    rsp,0x28
   1da9e:	pop    rbx
   1da9f:	pop    rbp
   1daa0:	pop    r12
   1daa2:	pop    r13
   1daa4:	ret    
   1daa5:	nop    DWORD PTR [rax]
   1daa8:	cmp    WORD PTR [rip+0x2694fc],0x0        # 286fac <stdout@@GLIBC_2.2.5+0x2664>
   1dab0:	je     1da87 <g_str_equal@plt+0x107c7>
   1dab2:	test   BYTE PTR [rip+0x2683e8],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   1dab9:	je     1da87 <g_str_equal@plt+0x107c7>
   1dabb:	mov    rdi,rsp
   1dabe:	xor    esi,esi
   1dac0:	call   c3e0 <gettimeofday@plt>
   1dac5:	mov    r13,QWORD PTR [rsp+0x8]
   1daca:	mov    r12,QWORD PTR [rsp]
   1dace:	call   c5b0 <getpid@plt>
   1dad3:	lea    rdi,[rip+0x3ee46]        # 5c920 <_fini@@Base+0xa1cc>
   1dada:	mov    esi,eax
   1dadc:	mov    r9,rbp
   1dadf:	mov    r8,rbx
   1dae2:	mov    rcx,r13
   1dae5:	mov    rdx,r12
   1dae8:	xor    eax,eax
   1daea:	call   431a0 <g_str_equal@plt+0x35ee0>
   1daef:	jmp    1da87 <g_str_equal@plt+0x107c7>
   1daf1:	call   cd30 <__stack_chk_fail@plt>
   1daf6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1db00:	push   r13
   1db02:	push   r12
   1db04:	push   rbp
   1db05:	push   rbx
   1db06:	mov    rbx,rdi
   1db09:	sub    rsp,0x28
   1db0d:	mov    rax,QWORD PTR fs:0x28
   1db16:	mov    QWORD PTR [rsp+0x18],rax
   1db1b:	xor    eax,eax
   1db1d:	call   1ec80 <g_str_equal@plt+0x119c0>
   1db22:	mov    edx,DWORD PTR [rip+0x266fb0]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   1db28:	mov    rbp,rax
   1db2b:	test   edx,edx
   1db2d:	jne    1db70 <g_str_equal@plt+0x108b0>
   1db2f:	mov    rdi,QWORD PTR [rbx+0x50]
   1db33:	lea    rdx,[rip+0xfffffffffffff896]        # 1d3d0 <g_str_equal@plt+0x10110>
   1db3a:	xor    r8d,r8d
   1db3d:	mov    rcx,rbp
   1db40:	mov    esi,0x1
   1db45:	call   16d70 <g_str_equal@plt+0x9ab0>
   1db4a:	mov    rax,QWORD PTR [rsp+0x18]
   1db4f:	xor    rax,QWORD PTR fs:0x28
   1db58:	jne    1dc19 <g_str_equal@plt+0x10959>
   1db5e:	add    rsp,0x28
   1db62:	pop    rbx
   1db63:	pop    rbp
   1db64:	pop    r12
   1db66:	pop    r13
   1db68:	ret    
   1db69:	nop    DWORD PTR [rax+0x0]
   1db70:	cmp    WORD PTR [rip+0x269432],0x0        # 286faa <stdout@@GLIBC_2.2.5+0x2662>
   1db78:	je     1dbc2 <g_str_equal@plt+0x10902>
   1db7a:	test   BYTE PTR [rip+0x268320],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   1db81:	je     1db2f <g_str_equal@plt+0x1086f>
   1db83:	xor    esi,esi
   1db85:	mov    rdi,rsp
   1db88:	call   c3e0 <gettimeofday@plt>
   1db8d:	mov    r13,QWORD PTR [rsp+0x8]
   1db92:	mov    r12,QWORD PTR [rsp]
   1db96:	call   c5b0 <getpid@plt>
   1db9b:	lea    rdi,[rip+0x3edd6]        # 5c978 <_fini@@Base+0xa224>
   1dba2:	mov    esi,eax
   1dba4:	mov    r8,rbx
   1dba7:	xor    eax,eax
   1dba9:	mov    rcx,r13
   1dbac:	mov    rdx,r12
   1dbaf:	call   431a0 <g_str_equal@plt+0x35ee0>
   1dbb4:	mov    eax,DWORD PTR [rip+0x266f1e]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   1dbba:	test   eax,eax
   1dbbc:	je     1db2f <g_str_equal@plt+0x1086f>
   1dbc2:	cmp    WORD PTR [rip+0x2693de],0x0        # 286fa8 <stdout@@GLIBC_2.2.5+0x2660>
   1dbca:	je     1db2f <g_str_equal@plt+0x1086f>
   1dbd0:	test   BYTE PTR [rip+0x2682ca],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   1dbd7:	je     1db2f <g_str_equal@plt+0x1086f>
   1dbdd:	mov    rdi,rsp
   1dbe0:	xor    esi,esi
   1dbe2:	call   c3e0 <gettimeofday@plt>
   1dbe7:	mov    r13,QWORD PTR [rsp+0x8]
   1dbec:	mov    r12,QWORD PTR [rsp]
   1dbf0:	call   c5b0 <getpid@plt>
   1dbf5:	lea    rdi,[rip+0x3ec14]        # 5c810 <_fini@@Base+0xa0bc>
   1dbfc:	mov    esi,eax
   1dbfe:	mov    r9d,0x1
   1dc04:	mov    r8,rbx
   1dc07:	mov    rcx,r13
   1dc0a:	mov    rdx,r12
   1dc0d:	xor    eax,eax
   1dc0f:	call   431a0 <g_str_equal@plt+0x35ee0>
   1dc14:	jmp    1db2f <g_str_equal@plt+0x1086f>
   1dc19:	call   cd30 <__stack_chk_fail@plt>
   1dc1e:	xchg   ax,ax
   1dc20:	push   rbp
   1dc21:	push   rbx
   1dc22:	mov    rbp,rsi
   1dc25:	mov    ebx,edi
   1dc27:	sub    rsp,0x8
   1dc2b:	call   3d4d0 <g_str_equal@plt+0x30210>
   1dc30:	test   al,al
   1dc32:	jne    1dc68 <g_str_equal@plt+0x109a8>
   1dc34:	mov    edi,ebx
   1dc36:	call   18a90 <g_str_equal@plt+0xb7d0>
   1dc3b:	lea    r8,[rip+0x3f3ce]        # 5d010 <_fini@@Base+0xa8bc>
   1dc42:	mov    ecx,0x23
   1dc47:	add    rsp,0x8
   1dc4b:	lea    rdx,[rip+0x3f37e]        # 5cfd0 <_fini@@Base+0xa87c>
   1dc52:	lea    rsi,[rip+0x3503e]        # 52c97 <_fini@@Base+0x543>
   1dc59:	pop    rbx
   1dc5a:	pop    rbp
   1dc5b:	mov    rdi,rax
   1dc5e:	jmp    205c0 <g_str_equal@plt+0x13300>
   1dc63:	nop    DWORD PTR [rax+rax*1+0x0]
   1dc68:	mov    rsi,rbp
   1dc6b:	mov    edi,ebx
   1dc6d:	call   19930 <g_str_equal@plt+0xc670>
   1dc72:	lea    r8,[rip+0x3f397]        # 5d010 <_fini@@Base+0xa8bc>
   1dc79:	mov    ecx,0x21
   1dc7e:	jmp    1dc47 <g_str_equal@plt+0x10987>
   1dc80:	lea    rdi,[rip+0x3f39c]        # 5d023 <_fini@@Base+0xa8cf>
   1dc87:	sub    rsp,0x8
   1dc8b:	call   20420 <g_str_equal@plt+0x13160>
   1dc90:	lea    r8,[rip+0x3f479]        # 5d110 <_fini@@Base+0xa9bc>
   1dc97:	lea    rdx,[rip+0x3f3aa]        # 5d048 <_fini@@Base+0xa8f4>
   1dc9e:	lea    rsi,[rip+0x3f37e]        # 5d023 <_fini@@Base+0xa8cf>
   1dca5:	mov    ecx,0x26
   1dcaa:	mov    rdi,rax
   1dcad:	call   205c0 <g_str_equal@plt+0x13300>
   1dcb2:	mov    QWORD PTR [rip+0x266de7],rax        # 284aa0 <stdout@@GLIBC_2.2.5+0x158>
   1dcb9:	xor    eax,eax
   1dcbb:	add    rsp,0x8
   1dcbf:	ret    
   1dcc0:	push   rbp
   1dcc1:	push   rbx
   1dcc2:	mov    rbp,rdi
   1dcc5:	sub    rsp,0x8
   1dcc9:	mov    rdi,QWORD PTR [rdi]
   1dccc:	call   24660 <g_str_equal@plt+0x173a0>
   1dcd1:	cmp    QWORD PTR [rbp+0x10],0x0
   1dcd6:	je     1dcf7 <g_str_equal@plt+0x10a37>
   1dcd8:	xor    ebx,ebx
   1dcda:	nop    WORD PTR [rax+rax*1+0x0]
   1dce0:	mov    rax,QWORD PTR [rbp+0x8]
   1dce4:	mov    rdi,QWORD PTR [rax+rbx*8]
   1dce8:	add    rbx,0x1
   1dcec:	call   24660 <g_str_equal@plt+0x173a0>
   1dcf1:	cmp    QWORD PTR [rbp+0x10],rbx
   1dcf5:	ja     1dce0 <g_str_equal@plt+0x10a20>
   1dcf7:	mov    rdi,QWORD PTR [rbp+0x8]
   1dcfb:	call   d2b0 <g_free@plt>
   1dd00:	add    rsp,0x8
   1dd04:	mov    rdi,rbp
   1dd07:	pop    rbx
   1dd08:	pop    rbp
   1dd09:	jmp    d2b0 <g_free@plt>
   1dd0e:	xchg   ax,ax
   1dd10:	lea    rdi,[rip+0x262989]        # 2806a0 <_fini@@Base+0x22df4c>
   1dd17:	jmp    202f0 <g_str_equal@plt+0x13030>
   1dd1c:	nop    DWORD PTR [rax+0x0]
   1dd20:	mov    eax,DWORD PTR [rip+0x266d6a]        # 284a90 <stdout@@GLIBC_2.2.5+0x148>
   1dd26:	cmp    eax,0x2
   1dd29:	je     1dd50 <g_str_equal@plt+0x10a90>
   1dd2b:	lea    rsi,[rip+0xffffffffffffff4e]        # 1dc80 <g_str_equal@plt+0x109c0>
   1dd32:	lea    rdi,[rip+0x266d57]        # 284a90 <stdout@@GLIBC_2.2.5+0x148>
   1dd39:	sub    rsp,0x8
   1dd3d:	xor    edx,edx
   1dd3f:	call   cb70 <g_once_impl@plt>
   1dd44:	mov    rax,QWORD PTR [rip+0x266d55]        # 284aa0 <stdout@@GLIBC_2.2.5+0x158>
   1dd4b:	add    rsp,0x8
   1dd4f:	ret    
   1dd50:	mov    rax,QWORD PTR [rip+0x266d41]        # 284a98 <stdout@@GLIBC_2.2.5+0x150>
   1dd57:	mov    rax,QWORD PTR [rip+0x266d42]        # 284aa0 <stdout@@GLIBC_2.2.5+0x158>
   1dd5e:	ret    
   1dd5f:	nop
   1dd60:	push   r15
   1dd62:	push   r14
   1dd64:	mov    r14,rcx
   1dd67:	push   r13
   1dd69:	push   r12
   1dd6b:	push   rbp
   1dd6c:	push   rbx
   1dd6d:	mov    rbp,rsi
   1dd70:	mov    rbx,rdx
   1dd73:	sub    rsp,0x108
   1dd7a:	mov    rax,QWORD PTR fs:0x28
   1dd83:	mov    QWORD PTR [rsp+0xf8],rax
   1dd8b:	xor    eax,eax
   1dd8d:	mov    eax,DWORD PTR [rsi]
   1dd8f:	test   eax,eax
   1dd91:	je     1de00 <g_str_equal@plt+0x10b40>
   1dd93:	cmp    eax,0x3
   1dd96:	ja     1e0b6 <g_str_equal@plt+0x10df6>
   1dd9c:	mov    QWORD PTR [rdx],0x1
   1dda3:	mov    edi,0x8
   1dda8:	call   ce00 <g_malloc0@plt>
   1ddad:	lea    rsi,[rip+0x9b8c]        # 27940 <g_str_equal@plt+0x1a680>
   1ddb4:	mov    rbx,rax
   1ddb7:	mov    QWORD PTR [r14],rax
   1ddba:	mov    rdi,rbp
   1ddbd:	call   2de80 <g_str_equal@plt+0x20bc0>
   1ddc2:	mov    DWORD PTR [rsp+0x1c],0x0
   1ddca:	mov    QWORD PTR [rbx],rax
   1ddcd:	mov    rcx,QWORD PTR [rsp+0xf8]
   1ddd5:	xor    rcx,QWORD PTR fs:0x28
   1ddde:	mov    eax,DWORD PTR [rsp+0x1c]
   1dde2:	jne    1e0bb <g_str_equal@plt+0x10dfb>
   1dde8:	add    rsp,0x108
   1ddef:	pop    rbx
   1ddf0:	pop    rbp
   1ddf1:	pop    r12
   1ddf3:	pop    r13
   1ddf5:	pop    r14
   1ddf7:	pop    r15
   1ddf9:	ret    
   1ddfa:	nop    WORD PTR [rax+rax*1+0x0]
   1de00:	mov    QWORD PTR [rdx],0x0
   1de07:	mov    QWORD PTR [rcx],0x0
   1de0e:	lea    r13,[rsp+0x30]
   1de13:	cmp    BYTE PTR [rsi+0x18],0x0
   1de17:	pxor   xmm0,xmm0
   1de1b:	mov    r12,r8
   1de1e:	lea    rdi,[rsi+0x8]
   1de22:	mov    QWORD PTR [rsp+0x28],0x0
   1de2b:	mov    DWORD PTR [rsp+0x30],0x1
   1de33:	movups XMMWORD PTR [rsp+0x34],xmm0
   1de38:	mov    QWORD PTR [r13+0x24],0x0
   1de40:	mov    DWORD PTR [r13+0x2c],0x0
   1de48:	movups XMMWORD PTR [r13+0x14],xmm0
   1de4d:	je     1de5d <g_str_equal@plt+0x10b9d>
   1de4f:	cmp    BYTE PTR [rsi+0x19],0x0
   1de53:	je     1de5d <g_str_equal@plt+0x10b9d>
   1de55:	mov    DWORD PTR [rsp+0x30],0x405
   1de5d:	lea    rsi,[rsp+0x28]
   1de62:	call   3d530 <g_str_equal@plt+0x30270>
   1de67:	mov    rsi,QWORD PTR [rsp+0x28]
   1de6c:	mov    DWORD PTR [rsp+0x34],eax
   1de70:	mov    DWORD PTR [rsp+0x38],0x1
   1de78:	test   rsi,rsi
   1de7b:	jne    1e024 <g_str_equal@plt+0x10d64>
   1de81:	mov    rdi,QWORD PTR [rbp+0x8]
   1de85:	test   rdi,rdi
   1de88:	je     1e085 <g_str_equal@plt+0x10dc5>
   1de8e:	mov    rdx,QWORD PTR [rbp+0x10]
   1de92:	test   rdx,rdx
   1de95:	je     1e018 <g_str_equal@plt+0x10d58>
   1de9b:	lea    r15,[rsp+0x60]
   1dea0:	mov    esi,0x21
   1dea5:	mov    rdi,r15
   1dea8:	call   329f0 <g_str_equal@plt+0x25730>
   1dead:	cmp    BYTE PTR [rsp+0x60],0x0
   1deb2:	mov    rdi,QWORD PTR [rbp+0x8]
   1deb6:	je     1e039 <g_str_equal@plt+0x10d79>
   1debc:	mov    rsi,r15
   1debf:	cmp    BYTE PTR [rdi],0x0
   1dec2:	mov    eax,0x0
   1dec7:	lea    rcx,[rsp+0x20]
   1decc:	mov    rdx,r13
   1decf:	cmove  rdi,rax
   1ded3:	call   c3b0 <getaddrinfo@plt>
   1ded8:	test   eax,eax
   1deda:	mov    DWORD PTR [rsp+0x1c],eax
   1dede:	jne    1e040 <g_str_equal@plt+0x10d80>
   1dee4:	mov    rax,QWORD PTR [rsp+0x20]
   1dee9:	mov    rdi,QWORD PTR [rbx]
   1deec:	test   rax,rax
   1deef:	je     1df13 <g_str_equal@plt+0x10c53>
   1def1:	add    rdi,0x1
   1def5:	jmp    1df03 <g_str_equal@plt+0x10c43>
   1def7:	nop    WORD PTR [rax+rax*1+0x0]
   1df00:	mov    rdi,rdx
   1df03:	mov    QWORD PTR [rbx],rdi
   1df06:	mov    rax,QWORD PTR [rax+0x28]
   1df0a:	lea    rdx,[rdi+0x1]
   1df0e:	test   rax,rax
   1df11:	jne    1df00 <g_str_equal@plt+0x10c40>
   1df13:	mov    esi,0x8
   1df18:	call   c690 <g_malloc0_n@plt>
   1df1d:	mov    r15,QWORD PTR [rsp+0x20]
   1df22:	mov    QWORD PTR [r14],rax
   1df25:	test   r15,r15
   1df28:	je     1e004 <g_str_equal@plt+0x10d44>
   1df2e:	lea    rax,[rsp+0x90]
   1df36:	xor    r12d,r12d
   1df39:	mov    r13,r14
   1df3c:	mov    QWORD PTR [rsp+0x8],rax
   1df41:	lea    rax,[rsp+0xc0]
   1df49:	mov    QWORD PTR [rsp+0x10],rax
   1df4e:	xchg   ax,ax
   1df50:	mov    edi,0x28
   1df55:	call   ce00 <g_malloc0@plt>
   1df5a:	sub    rsp,0x8
   1df5e:	mov    DWORD PTR [rax],0x0
   1df64:	mov    esi,DWORD PTR [r15+0x10]
   1df68:	mov    rdi,QWORD PTR [r15+0x18]
   1df6c:	push   0x3
   1df6e:	mov    ecx,0x2e
   1df73:	mov    r14,QWORD PTR [rsp+0x20]
   1df78:	mov    r8,QWORD PTR [rsp+0x18]
   1df7d:	mov    r9d,0x20
   1df83:	mov    rbx,rax
   1df86:	mov    rdx,r14
   1df89:	call   cd50 <getnameinfo@plt>
   1df8e:	mov    rdi,r14
   1df91:	call   c370 <g_strdup@plt>
   1df96:	mov    rdi,QWORD PTR [rsp+0x18]
   1df9b:	mov    r14,rax
   1df9e:	call   c370 <g_strdup@plt>
   1dfa3:	movzx  edx,BYTE PTR [rbp+0x21]
   1dfa7:	movzx  r11d,BYTE PTR [rbp+0x1a]
   1dfac:	movzx  r8d,WORD PTR [rbp+0x1c]
   1dfb1:	movzx  edi,BYTE PTR [rbp+0x1e]
   1dfb5:	movzx  esi,BYTE PTR [rbp+0x1f]
   1dfb9:	movzx  ecx,BYTE PTR [rbp+0x20]
   1dfbd:	mov    QWORD PTR [rbx+0x10],rax
   1dfc1:	mov    rax,QWORD PTR [r13+0x0]
   1dfc5:	mov    QWORD PTR [rbx+0x8],r14
   1dfc9:	mov    BYTE PTR [rbx+0x18],0x1
   1dfcd:	mov    BYTE PTR [rbx+0x19],0x1
   1dfd1:	mov    BYTE PTR [rbx+0x1a],r11b
   1dfd5:	mov    WORD PTR [rbx+0x1c],r8w
   1dfda:	mov    BYTE PTR [rbx+0x1e],dil
   1dfde:	mov    BYTE PTR [rbx+0x1f],sil
   1dfe2:	mov    BYTE PTR [rbx+0x20],cl
   1dfe5:	mov    BYTE PTR [rbx+0x21],dl
   1dfe8:	mov    QWORD PTR [rax+r12*1],rbx
   1dfec:	add    r12,0x8
   1dff0:	mov    r15,QWORD PTR [r15+0x28]
   1dff4:	pop    rax
   1dff5:	pop    rdx
   1dff6:	test   r15,r15
   1dff9:	jne    1df50 <g_str_equal@plt+0x10c90>
   1dfff:	mov    r15,QWORD PTR [rsp+0x20]
   1e004:	mov    rdi,r15
   1e007:	call   c6e0 <freeaddrinfo@plt>
   1e00c:	jmp    1ddcd <g_str_equal@plt+0x10b0d>
   1e011:	nop    DWORD PTR [rax+0x0]
   1e018:	mov    BYTE PTR [rsp+0x60],0x0
   1e01d:	xor    esi,esi
   1e01f:	jmp    1debf <g_str_equal@plt+0x10bff>
   1e024:	mov    rdi,r12
   1e027:	call   3a4c0 <g_str_equal@plt+0x2d200>
   1e02c:	mov    DWORD PTR [rsp+0x1c],0xffffffff
   1e034:	jmp    1ddcd <g_str_equal@plt+0x10b0d>
   1e039:	xor    esi,esi
   1e03b:	jmp    1debf <g_str_equal@plt+0x10bff>
   1e040:	mov    edi,eax
   1e042:	call   d100 <gai_strerror@plt>
   1e047:	push   rax
   1e048:	lea    rcx,[rip+0x3f091]        # 5d0e0 <_fini@@Base+0xa98c>
   1e04f:	lea    rsi,[rip+0x3eff2]        # 5d048 <_fini@@Base+0xa8f4>
   1e056:	lea    r8,[rip+0x3f02b]        # 5d088 <_fini@@Base+0xa934>
   1e05d:	mov    edx,0x5d
   1e062:	mov    rdi,r12
   1e065:	lea    rax,[rsp+0x68]
   1e06a:	push   rax
   1e06b:	mov    r9,QWORD PTR [rbp+0x8]
   1e06f:	xor    eax,eax
   1e071:	call   3a090 <g_str_equal@plt+0x2cdd0>
   1e076:	pop    rcx
   1e077:	pop    rsi
   1e078:	mov    DWORD PTR [rsp+0x1c],0xffffffff
   1e080:	jmp    1ddcd <g_str_equal@plt+0x10b0d>
   1e085:	lea    r8,[rip+0x3efa8]        # 5d034 <_fini@@Base+0xa8e0>
   1e08c:	lea    rcx,[rip+0x3f04d]        # 5d0e0 <_fini@@Base+0xa98c>
   1e093:	lea    rsi,[rip+0x3efae]        # 5d048 <_fini@@Base+0xa8f4>
   1e09a:	mov    edx,0x50
   1e09f:	mov    rdi,r12
   1e0a2:	xor    eax,eax
   1e0a4:	call   3a090 <g_str_equal@plt+0x2cdd0>
   1e0a9:	mov    DWORD PTR [rsp+0x1c],0xffffffff
   1e0b1:	jmp    1ddcd <g_str_equal@plt+0x10b0d>
   1e0b6:	call   c270 <abort@plt>
   1e0bb:	call   cd30 <__stack_chk_fail@plt>
   1e0c0:	push   r12
   1e0c2:	push   rbp
   1e0c3:	mov    r12,rdi
   1e0c6:	push   rbx
   1e0c7:	mov    rbx,rsi
   1e0ca:	sub    rsp,0x10
   1e0ce:	mov    rax,QWORD PTR fs:0x28
   1e0d7:	mov    QWORD PTR [rsp+0x8],rax
   1e0dc:	xor    eax,eax
   1e0de:	call   1f090 <g_str_equal@plt+0x11dd0>
   1e0e3:	lea    r8,[rip+0x3efd6]        # 5d0c0 <_fini@@Base+0xa96c>
   1e0ea:	lea    rdx,[rip+0x3ef57]        # 5d048 <_fini@@Base+0xa8f4>
   1e0f1:	lea    rsi,[rip+0x3ef2b]        # 5d023 <_fini@@Base+0xa8cf>
   1e0f8:	mov    ecx,0xc9
   1e0fd:	mov    rdi,rax
   1e100:	call   205c0 <g_str_equal@plt+0x13300>
   1e105:	mov    rsi,QWORD PTR [rbx]
   1e108:	lea    rcx,[rbx+0x8]
   1e10c:	lea    rdx,[rbx+0x10]
   1e110:	mov    r8,rsp
   1e113:	mov    rdi,rax
   1e116:	mov    rbp,rax
   1e119:	mov    QWORD PTR [rsp],0x0
   1e121:	call   1dd60 <g_str_equal@plt+0x10aa0>
   1e126:	mov    rsi,QWORD PTR [rsp]
   1e12a:	test   rsi,rsi
   1e12d:	je     1e160 <g_str_equal@plt+0x10ea0>
   1e12f:	mov    rdi,r12
   1e132:	call   1f030 <g_str_equal@plt+0x11d70>
   1e137:	mov    rdi,rbp
   1e13a:	call   20b90 <g_str_equal@plt+0x138d0>
   1e13f:	mov    rax,QWORD PTR [rsp+0x8]
   1e144:	xor    rax,QWORD PTR fs:0x28
   1e14d:	jne    1e16f <g_str_equal@plt+0x10eaf>
   1e14f:	add    rsp,0x10
   1e153:	pop    rbx
   1e154:	pop    rbp
   1e155:	pop    r12
   1e157:	ret    
   1e158:	nop    DWORD PTR [rax+rax*1+0x0]
   1e160:	xor    edx,edx
   1e162:	mov    rsi,rbx
   1e165:	mov    rdi,r12
   1e168:	call   1f070 <g_str_equal@plt+0x11db0>
   1e16d:	jmp    1e137 <g_str_equal@plt+0x10e77>
   1e16f:	call   cd30 <__stack_chk_fail@plt>
   1e174:	xchg   ax,ax
   1e176:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1e180:	push   r15
   1e182:	push   r14
   1e184:	mov    r15,rsi
   1e187:	push   r13
   1e189:	push   r12
   1e18b:	mov    r14,r8
   1e18e:	push   rbp
   1e18f:	push   rbx
   1e190:	mov    rbp,rdi
   1e193:	mov    edi,0x18
   1e198:	mov    r12,rdx
   1e19b:	mov    r13,rcx
   1e19e:	sub    rsp,0x8
   1e1a2:	call   ce00 <g_malloc0@plt>
   1e1a7:	lea    rsi,[rip+0x9792]        # 27940 <g_str_equal@plt+0x1a680>
   1e1ae:	mov    rdi,r15
   1e1b1:	mov    rbx,rax
   1e1b4:	call   2de80 <g_str_equal@plt+0x20bc0>
   1e1b9:	mov    rcx,r14
   1e1bc:	mov    rdx,r13
   1e1bf:	mov    rsi,r12
   1e1c2:	mov    rdi,rbp
   1e1c5:	mov    QWORD PTR [rbx],rax
   1e1c8:	call   1ec80 <g_str_equal@plt+0x119c0>
   1e1cd:	add    rsp,0x8
   1e1d1:	mov    rdx,rbx
   1e1d4:	lea    rcx,[rip+0xfffffffffffffae5]        # 1dcc0 <g_str_equal@plt+0x10a00>
   1e1db:	pop    rbx
   1e1dc:	pop    rbp
   1e1dd:	pop    r12
   1e1df:	pop    r13
   1e1e1:	pop    r14
   1e1e3:	pop    r15
   1e1e5:	lea    rsi,[rip+0xfffffffffffffed4]        # 1e0c0 <g_str_equal@plt+0x10e00>
   1e1ec:	xor    r8d,r8d
   1e1ef:	mov    rdi,rax
   1e1f2:	jmp    1ed60 <g_str_equal@plt+0x11aa0>
   1e1f7:	nop    WORD PTR [rax+rax*1+0x0]
   1e200:	push   r14
   1e202:	push   r13
   1e204:	mov    rdi,rsi
   1e207:	push   r12
   1e209:	push   rbp
   1e20a:	mov    r13,rcx
   1e20d:	push   rbx
   1e20e:	mov    rbx,rdx
   1e211:	call   1f080 <g_str_equal@plt+0x11dc0>
   1e216:	test   rax,rax
   1e219:	mov    QWORD PTR [rbx],0x0
   1e220:	mov    QWORD PTR [r13+0x0],0x0
   1e228:	je     1e286 <g_str_equal@plt+0x10fc6>
   1e22a:	mov    rbp,rax
   1e22d:	mov    rax,QWORD PTR [rax+0x10]
   1e231:	mov    esi,0x8
   1e236:	mov    QWORD PTR [rbx],rax
   1e239:	mov    rdi,QWORD PTR [rbp+0x10]
   1e23d:	call   c690 <g_malloc0_n@plt>
   1e242:	mov    QWORD PTR [r13+0x0],rax
   1e246:	cmp    QWORD PTR [rbp+0x10],0x0
   1e24b:	je     1e286 <g_str_equal@plt+0x10fc6>
   1e24d:	xor    ebx,ebx
   1e24f:	lea    r14,[rip+0x96ea]        # 27940 <g_str_equal@plt+0x1a680>
   1e256:	jmp    1e264 <g_str_equal@plt+0x10fa4>
   1e258:	nop    DWORD PTR [rax+rax*1+0x0]
   1e260:	mov    rax,QWORD PTR [r13+0x0]
   1e264:	lea    r12,[rax+rbx*8]
   1e268:	mov    rax,QWORD PTR [rbp+0x8]
   1e26c:	mov    rsi,r14
   1e26f:	mov    rdi,QWORD PTR [rax+rbx*8]
   1e273:	add    rbx,0x1
   1e277:	call   2de80 <g_str_equal@plt+0x20bc0>
   1e27c:	mov    QWORD PTR [r12],rax
   1e280:	cmp    QWORD PTR [rbp+0x10],rbx
   1e284:	ja     1e260 <g_str_equal@plt+0x10fa0>
   1e286:	pop    rbx
   1e287:	pop    rbp
   1e288:	pop    r12
   1e28a:	pop    r13
   1e28c:	pop    r14
   1e28e:	ret    
   1e28f:	nop
   1e290:	push   rbp
   1e291:	push   rbx
   1e292:	lea    r8,[rip+0x3efd7]        # 5d270 <_fini@@Base+0xab1c>
   1e299:	mov    rbx,rdi
   1e29c:	lea    rsi,[rip+0x3eec8]        # 5d16b <_fini@@Base+0xaa17>
   1e2a3:	mov    rdi,rdx
   1e2a6:	lea    rdx,[rip+0x3ee83]        # 5d130 <_fini@@Base+0xa9dc>
   1e2ad:	sub    rsp,0x8
   1e2b1:	mov    ecx,0x2b
   1e2b6:	call   205c0 <g_str_equal@plt+0x13300>
   1e2bb:	lea    r8,[rip+0x3efae]        # 5d270 <_fini@@Base+0xab1c>
   1e2c2:	lea    rdx,[rip+0x3ee67]        # 5d130 <_fini@@Base+0xa9dc>
   1e2c9:	lea    rsi,[rip+0x349b4]        # 52c84 <_fini@@Base+0x530>
   1e2d0:	mov    ecx,0x2e
   1e2d5:	mov    rdi,rbx
   1e2d8:	mov    rbp,rax
   1e2db:	call   205c0 <g_str_equal@plt+0x13300>
   1e2e0:	xor    esi,esi
   1e2e2:	mov    rdi,rax
   1e2e5:	call   1a440 <g_str_equal@plt+0xd180>
   1e2ea:	test   rax,rax
   1e2ed:	je     1e30f <g_str_equal@plt+0x1104f>
   1e2ef:	mov    rbx,rax
   1e2f2:	mov    rax,QWORD PTR [rbp+0x50]
   1e2f6:	test   rax,rax
   1e2f9:	je     1e307 <g_str_equal@plt+0x11047>
   1e2fb:	mov    rdx,QWORD PTR [rbp+0x58]
   1e2ff:	mov    rsi,rbx
   1e302:	mov    rdi,rbp
   1e305:	call   rax
   1e307:	mov    rdi,rbx
   1e30a:	call   20b90 <g_str_equal@plt+0x138d0>
   1e30f:	add    rsp,0x8
   1e313:	mov    eax,0x1
   1e318:	pop    rbx
   1e319:	pop    rbp
   1e31a:	ret    
   1e31b:	nop    DWORD PTR [rax+rax*1+0x0]
   1e320:	push   rbx
   1e321:	lea    r8,[rip+0x3eeb8]        # 5d1e0 <_fini@@Base+0xaa8c>
   1e328:	lea    rsi,[rip+0x34955]        # 52c84 <_fini@@Base+0x530>
   1e32f:	mov    rbx,rdx
   1e332:	lea    rdx,[rip+0x3edf7]        # 5d130 <_fini@@Base+0xa9dc>
   1e339:	mov    ecx,0xc2
   1e33e:	call   205c0 <g_str_equal@plt+0x13300>
   1e343:	xor    esi,esi
   1e345:	mov    rdi,rax
   1e348:	call   1a440 <g_str_equal@plt+0xd180>
   1e34d:	test   rax,rax
   1e350:	je     1e360 <g_str_equal@plt+0x110a0>
   1e352:	cmp    QWORD PTR [rbx],0x0
   1e356:	je     1e370 <g_str_equal@plt+0x110b0>
   1e358:	mov    rdi,rax
   1e35b:	call   20b90 <g_str_equal@plt+0x138d0>
   1e360:	mov    eax,0x1
   1e365:	pop    rbx
   1e366:	ret    
   1e367:	nop    WORD PTR [rax+rax*1+0x0]
   1e370:	mov    rdi,QWORD PTR [rbx+0x8]
   1e374:	mov    QWORD PTR [rbx],rax
   1e377:	call   c2a0 <g_main_loop_quit@plt>
   1e37c:	mov    eax,0x1
   1e381:	pop    rbx
   1e382:	ret    
   1e383:	nop    DWORD PTR [rax]
   1e386:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1e390:	lea    rdi,[rip+0x262389]        # 280720 <_fini@@Base+0x22dfcc>
   1e397:	jmp    202f0 <g_str_equal@plt+0x13030>
   1e39c:	nop    DWORD PTR [rax+0x0]
   1e3a0:	push   r13
   1e3a2:	push   r12
   1e3a4:	push   rbp
   1e3a5:	push   rbx
   1e3a6:	mov    rbp,rdi
   1e3a9:	sub    rsp,0x8
   1e3ad:	cmp    QWORD PTR [rdi+0x40],0x0
   1e3b2:	je     1e42a <g_str_equal@plt+0x1116a>
   1e3b4:	lea    r12,[rip+0x3ee05]        # 5d1c0 <_fini@@Base+0xaa6c>
   1e3bb:	xor    ebx,ebx
   1e3bd:	nop    DWORD PTR [rax]
   1e3c0:	mov    rax,QWORD PTR [rbp+0x38]
   1e3c4:	lea    r13,[rbx*8+0x0]
   1e3cc:	mov    rdi,QWORD PTR [rax+rbx*8]
   1e3d0:	test   rdi,rdi
   1e3d3:	je     1e3f3 <g_str_equal@plt+0x11133>
   1e3d5:	call   cec0 <g_source_destroy@plt>
   1e3da:	mov    rax,QWORD PTR [rbp+0x38]
   1e3de:	mov    rdi,QWORD PTR [rax+rbx*8]
   1e3e2:	call   cef0 <g_source_unref@plt>
   1e3e7:	mov    rax,QWORD PTR [rbp+0x38]
   1e3eb:	mov    QWORD PTR [rax+rbx*8],0x0
   1e3f3:	mov    rax,QWORD PTR [rbp+0x30]
   1e3f7:	lea    rdx,[rip+0x3ed32]        # 5d130 <_fini@@Base+0xa9dc>
   1e3fe:	lea    rsi,[rip+0x34892]        # 52c97 <_fini@@Base+0x543>
   1e405:	mov    r8,r12
   1e408:	mov    ecx,0x115
   1e40d:	add    rbx,0x1
   1e411:	mov    rdi,QWORD PTR [rax+r13*1]
   1e415:	call   205c0 <g_str_equal@plt+0x13300>
   1e41a:	xor    esi,esi
   1e41c:	mov    rdi,rax
   1e41f:	call   16b60 <g_str_equal@plt+0x98a0>
   1e424:	cmp    rbx,QWORD PTR [rbp+0x40]
   1e428:	jb     1e3c0 <g_str_equal@plt+0x11100>
   1e42a:	mov    BYTE PTR [rbp+0x48],0x0
   1e42e:	add    rsp,0x8
   1e432:	pop    rbx
   1e433:	pop    rbp
   1e434:	pop    r12
   1e436:	pop    r13
   1e438:	ret    
   1e439:	nop    DWORD PTR [rax+0x0]
   1e440:	push   rbp
   1e441:	push   rbx
   1e442:	lea    r8,[rip+0x3ed57]        # 5d1a0 <_fini@@Base+0xaa4c>
   1e449:	lea    rdx,[rip+0x3ece0]        # 5d130 <_fini@@Base+0xa9dc>
   1e450:	lea    rsi,[rip+0x3ed14]        # 5d16b <_fini@@Base+0xaa17>
   1e457:	mov    ecx,0x122
   1e45c:	sub    rsp,0x8
   1e460:	call   205c0 <g_str_equal@plt+0x13300>
   1e465:	cmp    BYTE PTR [rax+0x48],0x0
   1e469:	mov    rbp,rax
   1e46c:	jne    1e4c0 <g_str_equal@plt+0x11200>
   1e46e:	cmp    QWORD PTR [rbp+0x40],0x0
   1e473:	je     1e497 <g_str_equal@plt+0x111d7>
   1e475:	xor    ebx,ebx
   1e477:	nop    WORD PTR [rax+rax*1+0x0]
   1e480:	mov    rax,QWORD PTR [rbp+0x30]
   1e484:	mov    rdi,QWORD PTR [rax+rbx*8]
   1e488:	add    rbx,0x1
   1e48c:	call   20b90 <g_str_equal@plt+0x138d0>
   1e491:	cmp    QWORD PTR [rbp+0x40],rbx
   1e495:	ja     1e480 <g_str_equal@plt+0x111c0>
   1e497:	mov    rdi,QWORD PTR [rbp+0x38]
   1e49b:	call   d2b0 <g_free@plt>
   1e4a0:	mov    rdi,QWORD PTR [rbp+0x30]
   1e4a4:	call   d2b0 <g_free@plt>
   1e4a9:	mov    rdi,QWORD PTR [rbp+0x28]
   1e4ad:	add    rsp,0x8
   1e4b1:	pop    rbx
   1e4b2:	pop    rbp
   1e4b3:	jmp    d2b0 <g_free@plt>
   1e4b8:	nop    DWORD PTR [rax+rax*1+0x0]
   1e4c0:	mov    rdi,rax
   1e4c3:	call   1e3a0 <g_str_equal@plt+0x110e0>
   1e4c8:	jmp    1e46e <g_str_equal@plt+0x111ae>
   1e4ca:	nop    WORD PTR [rax+rax*1+0x0]
   1e4d0:	lea    rdi,[rip+0x3ec94]        # 5d16b <_fini@@Base+0xaa17>
   1e4d7:	sub    rsp,0x8
   1e4db:	call   20420 <g_str_equal@plt+0x13160>
   1e4e0:	lea    r8,[rip+0x3edc9]        # 5d2b0 <_fini@@Base+0xab5c>
   1e4e7:	lea    rdx,[rip+0x3ec42]        # 5d130 <_fini@@Base+0xa9dc>
   1e4ee:	lea    rsi,[rip+0x3ec76]        # 5d16b <_fini@@Base+0xaa17>
   1e4f5:	mov    ecx,0x1c
   1e4fa:	mov    rdi,rax
   1e4fd:	add    rsp,0x8
   1e501:	jmp    205c0 <g_str_equal@plt+0x13300>
   1e506:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1e510:	push   rbp
   1e511:	push   rbx
   1e512:	mov    rbx,rdi
   1e515:	mov    rbp,rsi
   1e518:	sub    rsp,0x8
   1e51c:	mov    rdi,QWORD PTR [rdi+0x28]
   1e520:	call   d2b0 <g_free@plt>
   1e525:	mov    rdi,rbp
   1e528:	call   c370 <g_strdup@plt>
   1e52d:	mov    QWORD PTR [rbx+0x28],rax
   1e531:	add    rsp,0x8
   1e535:	pop    rbx
   1e536:	pop    rbp
   1e537:	ret    
   1e538:	nop    DWORD PTR [rax+rax*1+0x0]
   1e540:	push   r12
   1e542:	push   rbp
   1e543:	mov    rbp,rsi
   1e546:	push   rbx
   1e547:	mov    rsi,QWORD PTR [rdi+0x28]
   1e54b:	mov    rbx,rdi
   1e54e:	test   rsi,rsi
   1e551:	je     1e599 <g_str_equal@plt+0x112d9>
   1e553:	lea    rdi,[rip+0x3ec22]        # 5d17c <_fini@@Base+0xaa28>
   1e55a:	xor    eax,eax
   1e55c:	call   c740 <g_strdup_printf@plt>
   1e561:	lea    r8,[rip+0x3ed28]        # 5d290 <_fini@@Base+0xab3c>
   1e568:	lea    rdx,[rip+0x3ebc1]        # 5d130 <_fini@@Base+0xa9dc>
   1e56f:	lea    rsi,[rip+0x34721]        # 52c97 <_fini@@Base+0x543>
   1e576:	mov    r12,rax
   1e579:	mov    ecx,0x6f
   1e57e:	mov    rdi,rbp
   1e581:	call   205c0 <g_str_equal@plt+0x13300>
   1e586:	mov    rsi,r12
   1e589:	mov    rdi,rax
   1e58c:	call   16880 <g_str_equal@plt+0x95c0>
   1e591:	mov    rdi,r12
   1e594:	call   d2b0 <g_free@plt>
   1e599:	mov    rax,QWORD PTR [rbx+0x40]
   1e59d:	mov    rdi,QWORD PTR [rbx+0x30]
   1e5a1:	mov    edx,0x8
   1e5a6:	lea    rsi,[rax+0x1]
   1e5aa:	call   c480 <g_realloc_n@plt>
   1e5af:	mov    QWORD PTR [rbx+0x30],rax
   1e5b3:	mov    rax,QWORD PTR [rbx+0x40]
   1e5b7:	mov    edx,0x8
   1e5bc:	mov    rdi,QWORD PTR [rbx+0x38]
   1e5c0:	lea    rsi,[rax+0x1]
   1e5c4:	call   c480 <g_realloc_n@plt>
   1e5c9:	mov    rdx,QWORD PTR [rbx+0x40]
   1e5cd:	mov    QWORD PTR [rbx+0x38],rax
   1e5d1:	mov    rdi,rbp
   1e5d4:	mov    rax,QWORD PTR [rbx+0x30]
   1e5d8:	mov    QWORD PTR [rax+rdx*8],rbp
   1e5dc:	mov    rdx,QWORD PTR [rbx+0x40]
   1e5e0:	mov    rax,QWORD PTR [rbx+0x38]
   1e5e4:	mov    QWORD PTR [rax+rdx*8],0x0
   1e5ec:	call   20b70 <g_str_equal@plt+0x138b0>
   1e5f1:	cmp    QWORD PTR [rbx+0x50],0x0
   1e5f6:	mov    BYTE PTR [rbx+0x48],0x1
   1e5fa:	je     1e660 <g_str_equal@plt+0x113a0>
   1e5fc:	mov    rdi,rbx
   1e5ff:	call   20b70 <g_str_equal@plt+0x138b0>
   1e604:	mov    rdx,QWORD PTR [rbx+0x40]
   1e608:	mov    rax,QWORD PTR [rbx+0x30]
   1e60c:	lea    r8,[rip+0x3ec7d]        # 5d290 <_fini@@Base+0xab3c>
   1e613:	lea    rsi,[rip+0x3467d]        # 52c97 <_fini@@Base+0x543>
   1e61a:	mov    ecx,0x81
   1e61f:	mov    rdi,QWORD PTR [rax+rdx*8]
   1e623:	lea    rdx,[rip+0x3eb06]        # 5d130 <_fini@@Base+0xa9dc>
   1e62a:	call   205c0 <g_str_equal@plt+0x13300>
   1e62f:	mov    rcx,QWORD PTR [rbx+0x40]
   1e633:	mov    rdx,QWORD PTR [rbx+0x38]
   1e637:	xor    r9d,r9d
   1e63a:	lea    r8,[rip+0x254f]        # 20b90 <g_str_equal@plt+0x138d0>
   1e641:	mov    esi,0x1
   1e646:	mov    rdi,rax
   1e649:	lea    rbp,[rdx+rcx*8]
   1e64d:	lea    rdx,[rip+0xfffffffffffffc3c]        # 1e290 <g_str_equal@plt+0x10fd0>
   1e654:	mov    rcx,rbx
   1e657:	call   16d80 <g_str_equal@plt+0x9ac0>
   1e65c:	mov    QWORD PTR [rbp+0x0],rax
   1e660:	add    QWORD PTR [rbx+0x40],0x1
   1e665:	pop    rbx
   1e666:	pop    rbp
   1e667:	pop    r12
   1e669:	ret    
   1e66a:	nop    WORD PTR [rax+rax*1+0x0]
   1e670:	push   r15
   1e672:	push   r14
   1e674:	mov    r15,rdi
   1e677:	push   r13
   1e679:	push   r12
   1e67b:	mov    r14,rdx
   1e67e:	push   rbp
   1e67f:	push   rbx
   1e680:	mov    rbx,rsi
   1e683:	sub    rsp,0x38
   1e687:	mov    QWORD PTR [rsp+0x8],rdx
   1e68c:	mov    rax,QWORD PTR fs:0x28
   1e695:	mov    QWORD PTR [rsp+0x28],rax
   1e69a:	xor    eax,eax
   1e69c:	call   1dd20 <g_str_equal@plt+0x10a60>
   1e6a1:	lea    rcx,[rsp+0x10]
   1e6a6:	lea    rdx,[rsp+0x18]
   1e6ab:	mov    r8,r14
   1e6ae:	mov    rsi,rbx
   1e6b1:	mov    rdi,rax
   1e6b4:	mov    QWORD PTR [rsp+0x20],0x0
   1e6bd:	call   1dd60 <g_str_equal@plt+0x10aa0>
   1e6c2:	test   eax,eax
   1e6c4:	js     1e7b0 <g_str_equal@plt+0x114f0>
   1e6ca:	xor    r14d,r14d
   1e6cd:	xor    ebx,ebx
   1e6cf:	cmp    QWORD PTR [rsp+0x18],0x0
   1e6d5:	lea    r13,[rsp+0x20]
   1e6da:	jne    1e709 <g_str_equal@plt+0x11449>
   1e6dc:	jmp    1e790 <g_str_equal@plt+0x114d0>
   1e6e1:	nop    DWORD PTR [rax+0x0]
   1e6e8:	mov    rax,QWORD PTR [rsp+0x10]
   1e6ed:	add    rbx,0x1
   1e6f1:	mov    rdi,QWORD PTR [rax+r12*1]
   1e6f5:	call   24660 <g_str_equal@plt+0x173a0>
   1e6fa:	mov    rdi,rbp
   1e6fd:	call   20b90 <g_str_equal@plt+0x138d0>
   1e702:	cmp    QWORD PTR [rsp+0x18],rbx
   1e707:	jbe    1e750 <g_str_equal@plt+0x11490>
   1e709:	call   19830 <g_str_equal@plt+0xc570>
   1e70e:	mov    rbp,rax
   1e711:	mov    rax,QWORD PTR [rsp+0x10]
   1e716:	cmp    QWORD PTR [rsp+0x20],0x0
   1e71c:	mov    edx,0x0
   1e721:	mov    rdi,rbp
   1e724:	lea    r12,[rbx*8+0x0]
   1e72c:	mov    rsi,QWORD PTR [rax+rbx*8]
   1e730:	cmove  rdx,r13
   1e734:	call   19d40 <g_str_equal@plt+0xca80>
   1e739:	test   eax,eax
   1e73b:	jne    1e6e8 <g_str_equal@plt+0x11428>
   1e73d:	mov    rsi,rbp
   1e740:	mov    rdi,r15
   1e743:	mov    r14d,0x1
   1e749:	call   1e540 <g_str_equal@plt+0x11280>
   1e74e:	jmp    1e6e8 <g_str_equal@plt+0x11428>
   1e750:	mov    rdi,QWORD PTR [rsp+0x10]
   1e755:	call   d2b0 <g_free@plt>
   1e75a:	test   r14b,r14b
   1e75d:	je     1e79a <g_str_equal@plt+0x114da>
   1e75f:	mov    rdi,QWORD PTR [rsp+0x20]
   1e764:	call   3a460 <g_str_equal@plt+0x2d1a0>
   1e769:	xor    eax,eax
   1e76b:	mov    rcx,QWORD PTR [rsp+0x28]
   1e770:	xor    rcx,QWORD PTR fs:0x28
   1e779:	jne    1e7b7 <g_str_equal@plt+0x114f7>
   1e77b:	add    rsp,0x38
   1e77f:	pop    rbx
   1e780:	pop    rbp
   1e781:	pop    r12
   1e783:	pop    r13
   1e785:	pop    r14
   1e787:	pop    r15
   1e789:	ret    
   1e78a:	nop    WORD PTR [rax+rax*1+0x0]
   1e790:	mov    rdi,QWORD PTR [rsp+0x10]
   1e795:	call   d2b0 <g_free@plt>
   1e79a:	mov    rsi,QWORD PTR [rsp+0x20]
   1e79f:	mov    rdi,QWORD PTR [rsp+0x8]
   1e7a4:	call   3a4c0 <g_str_equal@plt+0x2d200>
   1e7a9:	mov    eax,0xffffffff
   1e7ae:	jmp    1e76b <g_str_equal@plt+0x114ab>
   1e7b0:	mov    eax,0xffffffff
   1e7b5:	jmp    1e76b <g_str_equal@plt+0x114ab>
   1e7b7:	call   cd30 <__stack_chk_fail@plt>
   1e7bc:	nop    DWORD PTR [rax+0x0]
   1e7c0:	push   r15
   1e7c2:	push   r14
   1e7c4:	mov    r14,rsi
   1e7c7:	push   r13
   1e7c9:	push   r12
   1e7cb:	mov    r13,r8
   1e7ce:	push   rbp
   1e7cf:	push   rbx
   1e7d0:	mov    r12,rdx
   1e7d3:	mov    rbx,rdi
   1e7d6:	mov    rbp,rcx
   1e7d9:	sub    rsp,0x8
   1e7dd:	mov    rax,QWORD PTR [rdi+0x60]
   1e7e1:	test   rax,rax
   1e7e4:	je     1e7ec <g_str_equal@plt+0x1152c>
   1e7e6:	mov    rdi,QWORD PTR [rdi+0x58]
   1e7ea:	call   rax
   1e7ec:	cmp    QWORD PTR [rbx+0x40],0x0
   1e7f1:	mov    QWORD PTR [rbx+0x50],r14
   1e7f5:	mov    QWORD PTR [rbx+0x58],r12
   1e7f9:	mov    QWORD PTR [rbx+0x60],rbp
   1e7fd:	je     1e8c2 <g_str_equal@plt+0x11602>
   1e803:	xor    ebp,ebp
   1e805:	nop    DWORD PTR [rax]
   1e808:	mov    rax,QWORD PTR [rbx+0x38]
   1e80c:	mov    rdi,QWORD PTR [rax+rbp*8]
   1e810:	test   rdi,rdi
   1e813:	je     1e833 <g_str_equal@plt+0x11573>
   1e815:	call   cec0 <g_source_destroy@plt>
   1e81a:	mov    rax,QWORD PTR [rbx+0x38]
   1e81e:	mov    rdi,QWORD PTR [rax+rbp*8]
   1e822:	call   cef0 <g_source_unref@plt>
   1e827:	mov    rax,QWORD PTR [rbx+0x38]
   1e82b:	mov    QWORD PTR [rax+rbp*8],0x0
   1e833:	add    rbp,0x1
   1e837:	cmp    QWORD PTR [rbx+0x40],rbp
   1e83b:	ja     1e808 <g_str_equal@plt+0x11548>
   1e83d:	cmp    QWORD PTR [rbx+0x50],0x0
   1e842:	je     1e8c2 <g_str_equal@plt+0x11602>
   1e844:	cmp    QWORD PTR [rbx+0x40],0x0
   1e849:	je     1e8c2 <g_str_equal@plt+0x11602>
   1e84b:	lea    r15,[rip+0x233e]        # 20b90 <g_str_equal@plt+0x138d0>
   1e852:	lea    r14,[rip+0x3e9e7]        # 5d240 <_fini@@Base+0xaaec>
   1e859:	xor    ebp,ebp
   1e85b:	nop    DWORD PTR [rax+rax*1+0x0]
   1e860:	mov    rdi,rbx
   1e863:	lea    r12,[rbp*8+0x0]
   1e86b:	call   20b70 <g_str_equal@plt+0x138b0>
   1e870:	mov    rax,QWORD PTR [rbx+0x30]
   1e874:	lea    rdx,[rip+0x3e8b5]        # 5d130 <_fini@@Base+0xa9dc>
   1e87b:	lea    rsi,[rip+0x34415]        # 52c97 <_fini@@Base+0x543>
   1e882:	mov    r8,r14
   1e885:	mov    ecx,0xa5
   1e88a:	mov    rdi,QWORD PTR [rax+rbp*8]
   1e88e:	add    rbp,0x1
   1e892:	call   205c0 <g_str_equal@plt+0x13300>
   1e897:	add    r12,QWORD PTR [rbx+0x38]
   1e89b:	lea    rdx,[rip+0xfffffffffffff9ee]        # 1e290 <g_str_equal@plt+0x10fd0>
   1e8a2:	mov    r9,r13
   1e8a5:	mov    r8,r15
   1e8a8:	mov    rcx,rbx
   1e8ab:	mov    esi,0x1
   1e8b0:	mov    rdi,rax
   1e8b3:	call   16d80 <g_str_equal@plt+0x9ac0>
   1e8b8:	mov    QWORD PTR [r12],rax
   1e8bc:	cmp    rbp,QWORD PTR [rbx+0x40]
   1e8c0:	jb     1e860 <g_str_equal@plt+0x115a0>
   1e8c2:	add    rsp,0x8
   1e8c6:	pop    rbx
   1e8c7:	pop    rbp
   1e8c8:	pop    r12
   1e8ca:	pop    r13
   1e8cc:	pop    r14
   1e8ce:	pop    r15
   1e8d0:	ret    
   1e8d1:	nop    DWORD PTR [rax+rax*1+0x0]
   1e8d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1e8e0:	xor    r8d,r8d
   1e8e3:	jmp    1e7c0 <g_str_equal@plt+0x11500>
   1e8e8:	nop    DWORD PTR [rax+rax*1+0x0]
   1e8f0:	push   r15
   1e8f2:	push   r14
   1e8f4:	push   r13
   1e8f6:	push   r12
   1e8f8:	push   rbp
   1e8f9:	push   rbx
   1e8fa:	mov    rbx,rdi
   1e8fd:	sub    rsp,0x38
   1e901:	mov    rax,QWORD PTR fs:0x28
   1e90a:	mov    QWORD PTR [rsp+0x28],rax
   1e90f:	xor    eax,eax
   1e911:	call   c780 <g_main_context_new@plt>
   1e916:	mov    esi,0x1
   1e91b:	mov    rdi,rax
   1e91e:	mov    r12,rax
   1e921:	call   c630 <g_main_loop_new@plt>
   1e926:	mov    QWORD PTR [rsp+0x8],rax
   1e92b:	mov    QWORD PTR [rsp+0x18],rax
   1e930:	mov    rax,QWORD PTR [rbx+0x40]
   1e934:	mov    QWORD PTR [rsp+0x10],0x0
   1e93d:	test   rax,rax
   1e940:	je     1e980 <g_str_equal@plt+0x116c0>
   1e942:	xor    ebp,ebp
   1e944:	nop    DWORD PTR [rax+0x0]
   1e948:	mov    rdx,QWORD PTR [rbx+0x38]
   1e94c:	mov    rdi,QWORD PTR [rdx+rbp*8]
   1e950:	test   rdi,rdi
   1e953:	je     1e977 <g_str_equal@plt+0x116b7>
   1e955:	call   cec0 <g_source_destroy@plt>
   1e95a:	mov    rax,QWORD PTR [rbx+0x38]
   1e95e:	mov    rdi,QWORD PTR [rax+rbp*8]
   1e962:	call   cef0 <g_source_unref@plt>
   1e967:	mov    rax,QWORD PTR [rbx+0x38]
   1e96b:	mov    QWORD PTR [rax+rbp*8],0x0
   1e973:	mov    rax,QWORD PTR [rbx+0x40]
   1e977:	add    rbp,0x1
   1e97b:	cmp    rax,rbp
   1e97e:	ja     1e948 <g_str_equal@plt+0x11688>
   1e980:	mov    esi,0x8
   1e985:	mov    rdi,rax
   1e988:	call   c690 <g_malloc0_n@plt>
   1e98d:	cmp    QWORD PTR [rbx+0x40],0x0
   1e992:	mov    rbp,rax
   1e995:	je     1ea10 <g_str_equal@plt+0x11750>
   1e997:	lea    r14,[rsp+0x10]
   1e99c:	lea    r13,[rip+0x3e86d]        # 5d210 <_fini@@Base+0xaabc>
   1e9a3:	xor    r15d,r15d
   1e9a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1e9b0:	mov    rax,QWORD PTR [rbx+0x30]
   1e9b4:	lea    rdx,[rip+0x3e775]        # 5d130 <_fini@@Base+0xa9dc>
   1e9bb:	lea    rsi,[rip+0x342d5]        # 52c97 <_fini@@Base+0x543>
   1e9c2:	mov    r8,r13
   1e9c5:	mov    ecx,0xe7
   1e9ca:	mov    rdi,QWORD PTR [rax+r15*8]
   1e9ce:	call   205c0 <g_str_equal@plt+0x13300>
   1e9d3:	mov    esi,0x1
   1e9d8:	mov    rdi,rax
   1e9db:	call   16bb0 <g_str_equal@plt+0x98f0>
   1e9e0:	lea    rsi,[rip+0xfffffffffffff939]        # 1e320 <g_str_equal@plt+0x11060>
   1e9e7:	mov    QWORD PTR [rbp+r15*8+0x0],rax
   1e9ec:	xor    ecx,ecx
   1e9ee:	mov    rdi,rax
   1e9f1:	mov    rdx,r14
   1e9f4:	call   c2f0 <g_source_set_callback@plt>
   1e9f9:	mov    rdi,QWORD PTR [rbp+r15*8+0x0]
   1e9fe:	mov    rsi,r12
   1ea01:	add    r15,0x1
   1ea05:	call   cf70 <g_source_attach@plt>
   1ea0a:	cmp    QWORD PTR [rbx+0x40],r15
   1ea0e:	ja     1e9b0 <g_str_equal@plt+0x116f0>
   1ea10:	mov    rdi,QWORD PTR [rsp+0x8]
   1ea15:	call   d150 <g_main_loop_run@plt>
   1ea1a:	cmp    QWORD PTR [rbx+0x40],0x0
   1ea1f:	je     1ea3c <g_str_equal@plt+0x1177c>
   1ea21:	xor    r13d,r13d
   1ea24:	nop    DWORD PTR [rax+0x0]
   1ea28:	mov    rdi,QWORD PTR [rbp+r13*8+0x0]
   1ea2d:	add    r13,0x1
   1ea31:	call   cef0 <g_source_unref@plt>
   1ea36:	cmp    QWORD PTR [rbx+0x40],r13
   1ea3a:	ja     1ea28 <g_str_equal@plt+0x11768>
   1ea3c:	mov    rdi,rbp
   1ea3f:	call   d2b0 <g_free@plt>
   1ea44:	mov    rdi,QWORD PTR [rsp+0x8]
   1ea49:	call   ce60 <g_main_loop_unref@plt>
   1ea4e:	mov    rdi,r12
   1ea51:	call   cd40 <g_main_context_unref@plt>
   1ea56:	cmp    QWORD PTR [rbx+0x50],0x0
   1ea5b:	je     1eada <g_str_equal@plt+0x1181a>
   1ea5d:	cmp    QWORD PTR [rbx+0x40],0x0
   1ea62:	je     1eada <g_str_equal@plt+0x1181a>
   1ea64:	lea    r14,[rip+0x2125]        # 20b90 <g_str_equal@plt+0x138d0>
   1ea6b:	lea    r13,[rip+0x3e79e]        # 5d210 <_fini@@Base+0xaabc>
   1ea72:	xor    ebp,ebp
   1ea74:	nop    DWORD PTR [rax+0x0]
   1ea78:	mov    rdi,rbx
   1ea7b:	lea    r12,[rbp*8+0x0]
   1ea83:	call   20b70 <g_str_equal@plt+0x138b0>
   1ea88:	mov    rax,QWORD PTR [rbx+0x30]
   1ea8c:	lea    rdx,[rip+0x3e69d]        # 5d130 <_fini@@Base+0xa9dc>
   1ea93:	lea    rsi,[rip+0x341fd]        # 52c97 <_fini@@Base+0x543>
   1ea9a:	mov    r8,r13
   1ea9d:	mov    ecx,0xfe
   1eaa2:	mov    rdi,QWORD PTR [rax+rbp*8]
   1eaa6:	add    rbp,0x1
   1eaaa:	call   205c0 <g_str_equal@plt+0x13300>
   1eaaf:	add    r12,QWORD PTR [rbx+0x38]
   1eab3:	lea    rdx,[rip+0xfffffffffffff7d6]        # 1e290 <g_str_equal@plt+0x10fd0>
   1eaba:	xor    r9d,r9d
   1eabd:	mov    r8,r14
   1eac0:	mov    rcx,rbx
   1eac3:	mov    esi,0x1
   1eac8:	mov    rdi,rax
   1eacb:	call   16d80 <g_str_equal@plt+0x9ac0>
   1ead0:	mov    QWORD PTR [r12],rax
   1ead4:	cmp    QWORD PTR [rbx+0x40],rbp
   1ead8:	ja     1ea78 <g_str_equal@plt+0x117b8>
   1eada:	mov    rcx,QWORD PTR [rsp+0x28]
   1eadf:	xor    rcx,QWORD PTR fs:0x28
   1eae8:	mov    rax,QWORD PTR [rsp+0x10]
   1eaed:	jne    1eafe <g_str_equal@plt+0x1183e>
   1eaef:	add    rsp,0x38
   1eaf3:	pop    rbx
   1eaf4:	pop    rbp
   1eaf5:	pop    r12
   1eaf7:	pop    r13
   1eaf9:	pop    r14
   1eafb:	pop    r15
   1eafd:	ret    
   1eafe:	call   cd30 <__stack_chk_fail@plt>
   1eb03:	nop    DWORD PTR [rax]
   1eb06:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1eb10:	cmp    BYTE PTR [rdi+0x48],0x0
   1eb14:	je     1eb20 <g_str_equal@plt+0x11860>
   1eb16:	jmp    1e3a0 <g_str_equal@plt+0x110e0>
   1eb1b:	nop    DWORD PTR [rax+rax*1+0x0]
   1eb20:	repz ret 
   1eb22:	nop    DWORD PTR [rax+0x0]
   1eb26:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1eb30:	movzx  eax,BYTE PTR [rdi+0x48]
   1eb34:	ret    
   1eb35:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1eb3f:	nop
   1eb40:	push   r13
   1eb42:	push   r12
   1eb44:	push   rbp
   1eb45:	push   rbx
   1eb46:	mov    rbx,rdi
   1eb49:	sub    rsp,0x28
   1eb4d:	mov    edx,DWORD PTR [rip+0x265f85]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   1eb53:	mov    rbp,QWORD PTR [rdi]
   1eb56:	mov    rax,QWORD PTR fs:0x28
   1eb5f:	mov    QWORD PTR [rsp+0x18],rax
   1eb64:	xor    eax,eax
   1eb66:	test   edx,edx
   1eb68:	jne    1ebd0 <g_str_equal@plt+0x11910>
   1eb6a:	mov    rsi,QWORD PTR [rbx+0x10]
   1eb6e:	mov    rdi,rbp
   1eb71:	call   QWORD PTR [rbx+0x8]
   1eb74:	mov    eax,DWORD PTR [rip+0x265f5e]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   1eb7a:	test   eax,eax
   1eb7c:	jne    1ec20 <g_str_equal@plt+0x11960>
   1eb82:	call   c9b0 <g_idle_source_new@plt>
   1eb87:	lea    rsi,[rip+0x3d2]        # 1ef60 <g_str_equal@plt+0x11ca0>
   1eb8e:	xor    ecx,ecx
   1eb90:	mov    rdx,rbx
   1eb93:	mov    rdi,rax
   1eb96:	mov    rbp,rax
   1eb99:	call   c2f0 <g_source_set_callback@plt>
   1eb9e:	mov    rsi,QWORD PTR [rbx+0x20]
   1eba2:	mov    rdi,rbp
   1eba5:	call   cf70 <g_source_attach@plt>
   1ebaa:	xor    eax,eax
   1ebac:	mov    rdx,QWORD PTR [rsp+0x18]
   1ebb1:	xor    rdx,QWORD PTR fs:0x28
   1ebba:	jne    1ec74 <g_str_equal@plt+0x119b4>
   1ebc0:	add    rsp,0x28
   1ebc4:	pop    rbx
   1ebc5:	pop    rbp
   1ebc6:	pop    r12
   1ebc8:	pop    r13
   1ebca:	ret    
   1ebcb:	nop    DWORD PTR [rax+rax*1+0x0]
   1ebd0:	cmp    WORD PTR [rip+0x268410],0x0        # 286fe8 <stdout@@GLIBC_2.2.5+0x26a0>
   1ebd8:	je     1eb6a <g_str_equal@plt+0x118aa>
   1ebda:	test   BYTE PTR [rip+0x2672c0],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   1ebe1:	je     1eb6a <g_str_equal@plt+0x118aa>
   1ebe3:	mov    rdi,rsp
   1ebe6:	xor    esi,esi
   1ebe8:	call   c3e0 <gettimeofday@plt>
   1ebed:	mov    r13,QWORD PTR [rsp+0x8]
   1ebf2:	mov    r12,QWORD PTR [rsp]
   1ebf6:	call   c5b0 <getpid@plt>
   1ebfb:	lea    rdi,[rip+0x3e6c6]        # 5d2c8 <_fini@@Base+0xab74>
   1ec02:	mov    r8,rbp
   1ec05:	mov    esi,eax
   1ec07:	mov    rcx,r13
   1ec0a:	mov    rdx,r12
   1ec0d:	xor    eax,eax
   1ec0f:	call   431a0 <g_str_equal@plt+0x35ee0>
   1ec14:	mov    rbp,QWORD PTR [rbx]
   1ec17:	jmp    1eb6a <g_str_equal@plt+0x118aa>
   1ec1c:	nop    DWORD PTR [rax+0x0]
   1ec20:	cmp    WORD PTR [rip+0x2683be],0x0        # 286fe6 <stdout@@GLIBC_2.2.5+0x269e>
   1ec28:	je     1eb82 <g_str_equal@plt+0x118c2>
   1ec2e:	test   BYTE PTR [rip+0x26726c],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   1ec35:	je     1eb82 <g_str_equal@plt+0x118c2>
   1ec3b:	mov    rdi,rsp
   1ec3e:	xor    esi,esi
   1ec40:	mov    r13,QWORD PTR [rbx]
   1ec43:	call   c3e0 <gettimeofday@plt>
   1ec48:	mov    r12,QWORD PTR [rsp+0x8]
   1ec4d:	mov    rbp,QWORD PTR [rsp]
   1ec51:	call   c5b0 <getpid@plt>
   1ec56:	lea    rdi,[rip+0x3e6ab]        # 5d308 <_fini@@Base+0xabb4>
   1ec5d:	mov    esi,eax
   1ec5f:	mov    r8,r13
   1ec62:	mov    rcx,r12
   1ec65:	mov    rdx,rbp
   1ec68:	xor    eax,eax
   1ec6a:	call   431a0 <g_str_equal@plt+0x35ee0>
   1ec6f:	jmp    1eb82 <g_str_equal@plt+0x118c2>
   1ec74:	call   cd30 <__stack_chk_fail@plt>
   1ec79:	nop    DWORD PTR [rax+0x0]
   1ec80:	push   r15
   1ec82:	push   r14
   1ec84:	mov    r14,rcx
   1ec87:	push   r13
   1ec89:	push   r12
   1ec8b:	mov    r13,rdx
   1ec8e:	push   rbp
   1ec8f:	push   rbx
   1ec90:	mov    rbp,rdi
   1ec93:	mov    edi,0x38
   1ec98:	mov    r12,rsi
   1ec9b:	sub    rsp,0x28
   1ec9f:	mov    rax,QWORD PTR fs:0x28
   1eca8:	mov    QWORD PTR [rsp+0x18],rax
   1ecad:	xor    eax,eax
   1ecaf:	call   ce00 <g_malloc0@plt>
   1ecb4:	mov    rdi,rbp
   1ecb7:	mov    QWORD PTR [rax],rbp
   1ecba:	mov    rbx,rax
   1ecbd:	call   20b70 <g_str_equal@plt+0x138b0>
   1ecc2:	mov    ecx,DWORD PTR [rip+0x265e10]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   1ecc8:	mov    QWORD PTR [rbx+0x8],r12
   1eccc:	mov    QWORD PTR [rbx+0x10],r13
   1ecd0:	mov    QWORD PTR [rbx+0x18],r14
   1ecd4:	test   ecx,ecx
   1ecd6:	jne    1ed00 <g_str_equal@plt+0x11a40>
   1ecd8:	mov    rdx,QWORD PTR [rsp+0x18]
   1ecdd:	xor    rdx,QWORD PTR fs:0x28
   1ece6:	mov    rax,rbx
   1ece9:	jne    1ed4f <g_str_equal@plt+0x11a8f>
   1eceb:	add    rsp,0x28
   1ecef:	pop    rbx
   1ecf0:	pop    rbp
   1ecf1:	pop    r12
   1ecf3:	pop    r13
   1ecf5:	pop    r14
   1ecf7:	pop    r15
   1ecf9:	ret    
   1ecfa:	nop    WORD PTR [rax+rax*1+0x0]
   1ed00:	cmp    WORD PTR [rip+0x2682e6],0x0        # 286fee <stdout@@GLIBC_2.2.5+0x26a6>
   1ed08:	je     1ecd8 <g_str_equal@plt+0x11a18>
   1ed0a:	test   BYTE PTR [rip+0x267190],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   1ed11:	je     1ecd8 <g_str_equal@plt+0x11a18>
   1ed13:	mov    rdi,rsp
   1ed16:	xor    esi,esi
   1ed18:	call   c3e0 <gettimeofday@plt>
   1ed1d:	mov    r15,QWORD PTR [rsp+0x8]
   1ed22:	mov    r14,QWORD PTR [rsp]
   1ed26:	call   c5b0 <getpid@plt>
   1ed2b:	push   r13
   1ed2d:	lea    rdi,[rip+0x3e614]        # 5d348 <_fini@@Base+0xabf4>
   1ed34:	push   r12
   1ed36:	mov    rdx,r14
   1ed39:	mov    esi,eax
   1ed3b:	mov    r9,rbp
   1ed3e:	mov    r8,rbx
   1ed41:	mov    rcx,r15
   1ed44:	xor    eax,eax
   1ed46:	call   431a0 <g_str_equal@plt+0x35ee0>
   1ed4b:	pop    rax
   1ed4c:	pop    rdx
   1ed4d:	jmp    1ecd8 <g_str_equal@plt+0x11a18>
   1ed4f:	call   cd30 <__stack_chk_fail@plt>
   1ed54:	xchg   ax,ax
   1ed56:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1ed60:	push   r15
   1ed62:	push   r14
   1ed64:	mov    r15,rcx
   1ed67:	push   r13
   1ed69:	push   r12
   1ed6b:	mov    r12,rdi
   1ed6e:	push   rbp
   1ed6f:	push   rbx
   1ed70:	mov    rbp,r8
   1ed73:	mov    edi,0x28
   1ed78:	mov    r13,rsi
   1ed7b:	mov    r14,rdx
   1ed7e:	sub    rsp,0x38
   1ed82:	mov    rax,QWORD PTR fs:0x28
   1ed8b:	mov    QWORD PTR [rsp+0x28],rax
   1ed90:	xor    eax,eax
   1ed92:	call   ce00 <g_malloc0@plt>
   1ed97:	test   rbp,rbp
   1ed9a:	mov    rbx,rax
   1ed9d:	je     1eda7 <g_str_equal@plt+0x11ae7>
   1ed9f:	mov    rdi,rbp
   1eda2:	call   c6c0 <g_main_context_ref@plt>
   1eda7:	mov    ecx,DWORD PTR [rip+0x265d2b]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   1edad:	mov    QWORD PTR [rbx+0x20],rbp
   1edb1:	lea    rbp,[rsp+0x10]
   1edb6:	mov    QWORD PTR [rbx],r12
   1edb9:	mov    QWORD PTR [rbx+0x8],r13
   1edbd:	mov    QWORD PTR [rbx+0x10],r14
   1edc1:	mov    QWORD PTR [rbx+0x18],r15
   1edc5:	test   ecx,ecx
   1edc7:	jne    1ee10 <g_str_equal@plt+0x11b50>
   1edc9:	lea    rdx,[rip+0xfffffffffffffd70]        # 1eb40 <g_str_equal@plt+0x11880>
   1edd0:	lea    rsi,[rip+0x3e689]        # 5d460 <_fini@@Base+0xad0c>
   1edd7:	mov    r8d,0x1
   1eddd:	mov    rcx,rbx
   1ede0:	mov    rdi,rbp
   1ede3:	call   39790 <g_str_equal@plt+0x2c4d0>
   1ede8:	mov    rax,QWORD PTR [rsp+0x28]
   1eded:	xor    rax,QWORD PTR fs:0x28
   1edf6:	jne    1ee6c <g_str_equal@plt+0x11bac>
   1edf8:	add    rsp,0x38
   1edfc:	pop    rbx
   1edfd:	pop    rbp
   1edfe:	pop    r12
   1ee00:	pop    r13
   1ee02:	pop    r14
   1ee04:	pop    r15
   1ee06:	ret    
   1ee07:	nop    WORD PTR [rax+rax*1+0x0]
   1ee10:	cmp    WORD PTR [rip+0x2681d2],0x0        # 286fea <stdout@@GLIBC_2.2.5+0x26a2>
   1ee18:	je     1edc9 <g_str_equal@plt+0x11b09>
   1ee1a:	test   BYTE PTR [rip+0x267080],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   1ee21:	je     1edc9 <g_str_equal@plt+0x11b09>
   1ee23:	xor    esi,esi
   1ee25:	mov    rdi,rbp
   1ee28:	call   c3e0 <gettimeofday@plt>
   1ee2d:	mov    rcx,QWORD PTR [rsp+0x18]
   1ee32:	mov    r15,QWORD PTR [rsp+0x10]
   1ee37:	mov    QWORD PTR [rsp+0x8],rcx
   1ee3c:	call   c5b0 <getpid@plt>
   1ee41:	sub    rsp,0x8
   1ee45:	lea    rdi,[rip+0x3e544]        # 5d390 <_fini@@Base+0xac3c>
   1ee4c:	mov    rdx,r15
   1ee4f:	push   r14
   1ee51:	mov    rcx,QWORD PTR [rsp+0x18]
   1ee56:	mov    esi,eax
   1ee58:	mov    r9,r13
   1ee5b:	mov    r8,r12
   1ee5e:	xor    eax,eax
   1ee60:	call   431a0 <g_str_equal@plt+0x35ee0>
   1ee65:	pop    rax
   1ee66:	pop    rdx
   1ee67:	jmp    1edc9 <g_str_equal@plt+0x11b09>
   1ee6c:	call   cd30 <__stack_chk_fail@plt>
   1ee71:	nop    DWORD PTR [rax+rax*1+0x0]
   1ee76:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1ee80:	push   r12
   1ee82:	push   rbp
   1ee83:	push   rbx
   1ee84:	mov    rbx,rdi
   1ee87:	sub    rsp,0x20
   1ee8b:	mov    rsi,QWORD PTR [rdi+0x10]
   1ee8f:	mov    rax,QWORD PTR fs:0x28
   1ee98:	mov    QWORD PTR [rsp+0x18],rax
   1ee9d:	xor    eax,eax
   1ee9f:	call   QWORD PTR [rdi+0x8]
   1eea2:	mov    eax,DWORD PTR [rip+0x265c30]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   1eea8:	test   eax,eax
   1eeaa:	jne    1ef08 <g_str_equal@plt+0x11c48>
   1eeac:	mov    rax,QWORD PTR [rbx+0x18]
   1eeb0:	test   rax,rax
   1eeb3:	je     1eebb <g_str_equal@plt+0x11bfb>
   1eeb5:	mov    rdi,QWORD PTR [rbx+0x10]
   1eeb9:	call   rax
   1eebb:	mov    rax,QWORD PTR [rbx+0x30]
   1eebf:	test   rax,rax
   1eec2:	je     1eeca <g_str_equal@plt+0x11c0a>
   1eec4:	mov    rdi,QWORD PTR [rbx+0x28]
   1eec8:	call   rax
   1eeca:	mov    rdi,QWORD PTR [rbx+0x20]
   1eece:	test   rdi,rdi
   1eed1:	je     1eed8 <g_str_equal@plt+0x11c18>
   1eed3:	call   3a460 <g_str_equal@plt+0x2d1a0>
   1eed8:	mov    rdi,QWORD PTR [rbx]
   1eedb:	call   20b90 <g_str_equal@plt+0x138d0>
   1eee0:	mov    rdi,rbx
   1eee3:	call   d2b0 <g_free@plt>
   1eee8:	mov    rax,QWORD PTR [rsp+0x18]
   1eeed:	xor    rax,QWORD PTR fs:0x28
   1eef6:	jne    1ef51 <g_str_equal@plt+0x11c91>
   1eef8:	add    rsp,0x20
   1eefc:	pop    rbx
   1eefd:	pop    rbp
   1eefe:	pop    r12
   1ef00:	ret    
   1ef01:	nop    DWORD PTR [rax+0x0]
   1ef08:	cmp    WORD PTR [rip+0x2680dc],0x0        # 286fec <stdout@@GLIBC_2.2.5+0x26a4>
   1ef10:	je     1eeac <g_str_equal@plt+0x11bec>
   1ef12:	test   BYTE PTR [rip+0x266f88],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   1ef19:	je     1eeac <g_str_equal@plt+0x11bec>
   1ef1b:	mov    rdi,rsp
   1ef1e:	xor    esi,esi
   1ef20:	call   c3e0 <gettimeofday@plt>
   1ef25:	mov    r12,QWORD PTR [rsp+0x8]
   1ef2a:	mov    rbp,QWORD PTR [rsp]
   1ef2e:	call   c5b0 <getpid@plt>
   1ef33:	lea    rdi,[rip+0x3e4ae]        # 5d3e8 <_fini@@Base+0xac94>
   1ef3a:	mov    esi,eax
   1ef3c:	mov    r8,rbx
   1ef3f:	mov    rcx,r12
   1ef42:	mov    rdx,rbp
   1ef45:	xor    eax,eax
   1ef47:	call   431a0 <g_str_equal@plt+0x35ee0>
   1ef4c:	jmp    1eeac <g_str_equal@plt+0x11bec>
   1ef51:	call   cd30 <__stack_chk_fail@plt>
   1ef56:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1ef60:	push   r13
   1ef62:	push   r12
   1ef64:	push   rbp
   1ef65:	push   rbx
   1ef66:	mov    rbx,rdi
   1ef69:	sub    rsp,0x28
   1ef6d:	mov    rbp,QWORD PTR [rdi]
   1ef70:	mov    rax,QWORD PTR fs:0x28
   1ef79:	mov    QWORD PTR [rsp+0x18],rax
   1ef7e:	xor    eax,eax
   1ef80:	mov    eax,DWORD PTR [rip+0x265b52]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   1ef86:	test   eax,eax
   1ef88:	jne    1efd8 <g_str_equal@plt+0x11d18>
   1ef8a:	mov    rdi,rbp
   1ef8d:	call   1ee80 <g_str_equal@plt+0x11bc0>
   1ef92:	mov    rax,QWORD PTR [rbx+0x18]
   1ef96:	test   rax,rax
   1ef99:	je     1efa1 <g_str_equal@plt+0x11ce1>
   1ef9b:	mov    rdi,QWORD PTR [rbx+0x10]
   1ef9f:	call   rax
   1efa1:	mov    rdi,QWORD PTR [rbx+0x20]
   1efa5:	test   rdi,rdi
   1efa8:	je     1efaf <g_str_equal@plt+0x11cef>
   1efaa:	call   cd40 <g_main_context_unref@plt>
   1efaf:	mov    rdi,rbx
   1efb2:	call   d2b0 <g_free@plt>
   1efb7:	xor    eax,eax
   1efb9:	mov    rdx,QWORD PTR [rsp+0x18]
   1efbe:	xor    rdx,QWORD PTR fs:0x28
   1efc7:	jne    1f024 <g_str_equal@plt+0x11d64>
   1efc9:	add    rsp,0x28
   1efcd:	pop    rbx
   1efce:	pop    rbp
   1efcf:	pop    r12
   1efd1:	pop    r13
   1efd3:	ret    
   1efd4:	nop    DWORD PTR [rax+0x0]
   1efd8:	cmp    WORD PTR [rip+0x268004],0x0        # 286fe4 <stdout@@GLIBC_2.2.5+0x269c>
   1efe0:	je     1ef8a <g_str_equal@plt+0x11cca>
   1efe2:	test   BYTE PTR [rip+0x266eb8],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   1efe9:	je     1ef8a <g_str_equal@plt+0x11cca>
   1efeb:	mov    rdi,rsp
   1efee:	xor    esi,esi
   1eff0:	call   c3e0 <gettimeofday@plt>
   1eff5:	mov    r13,QWORD PTR [rsp+0x8]
   1effa:	mov    r12,QWORD PTR [rsp]
   1effe:	call   c5b0 <getpid@plt>
   1f003:	lea    rdi,[rip+0x3e416]        # 5d420 <_fini@@Base+0xaccc>
   1f00a:	mov    r8,rbp
   1f00d:	mov    esi,eax
   1f00f:	mov    rcx,r13
   1f012:	mov    rdx,r12
   1f015:	xor    eax,eax
   1f017:	call   431a0 <g_str_equal@plt+0x35ee0>
   1f01c:	mov    rbp,QWORD PTR [rbx]
   1f01f:	jmp    1ef8a <g_str_equal@plt+0x11cca>
   1f024:	call   cd30 <__stack_chk_fail@plt>
   1f029:	nop    DWORD PTR [rax+0x0]
   1f030:	add    rdi,0x20
   1f034:	jmp    3a4c0 <g_str_equal@plt+0x2d200>
   1f039:	nop    DWORD PTR [rax+0x0]
   1f040:	push   rbx
   1f041:	mov    rbx,rdi
   1f044:	mov    rdi,rsi
   1f047:	mov    rsi,QWORD PTR [rbx+0x20]
   1f04b:	xor    eax,eax
   1f04d:	test   rsi,rsi
   1f050:	je     1f064 <g_str_equal@plt+0x11da4>
   1f052:	call   3a4c0 <g_str_equal@plt+0x2d200>
   1f057:	mov    QWORD PTR [rbx+0x20],0x0
   1f05f:	mov    eax,0x1
   1f064:	pop    rbx
   1f065:	ret    
   1f066:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1f070:	mov    QWORD PTR [rdi+0x28],rsi
   1f074:	mov    QWORD PTR [rdi+0x30],rdx
   1f078:	ret    
   1f079:	nop    DWORD PTR [rax+0x0]
   1f080:	mov    rax,QWORD PTR [rdi+0x28]
   1f084:	ret    
   1f085:	nop
   1f086:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1f090:	mov    rax,QWORD PTR [rdi]
   1f093:	ret    
   1f094:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1f09e:	xchg   ax,ax
   1f0a0:	mov    rax,rsi
   1f0a3:	ret    
   1f0a4:	xchg   ax,ax
   1f0a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1f0b0:	mov    rax,QWORD PTR [rsi]
   1f0b3:	mov    rax,QWORD PTR [rax]
   1f0b6:	ret    
   1f0b7:	nop    WORD PTR [rax+rax*1+0x0]
   1f0c0:	mov    rax,QWORD PTR [rdi]
   1f0c3:	mov    rax,QWORD PTR [rax]
   1f0c6:	mov    rdi,QWORD PTR [rax]
   1f0c9:	jmp    c370 <g_strdup@plt>
   1f0ce:	xchg   ax,ax
   1f0d0:	push   rbx
   1f0d1:	mov    rbx,rdi
   1f0d4:	mov    rdi,QWORD PTR [rip+0x2659dd]        # 284ab8 <stdout@@GLIBC_2.2.5+0x170>
   1f0db:	test   rdi,rdi
   1f0de:	je     1f0f0 <g_str_equal@plt+0x11e30>
   1f0e0:	mov    rsi,rbx
   1f0e3:	pop    rbx
   1f0e4:	jmp    cdb0 <g_hash_table_lookup@plt>
   1f0e9:	nop    DWORD PTR [rax+0x0]
   1f0f0:	mov    rsi,QWORD PTR [rip+0x262ee9]        # 281fe0 <g_str_equal>
   1f0f7:	mov    rdi,QWORD PTR [rip+0x262eb2]        # 281fb0 <g_str_hash>
   1f0fe:	call   c810 <g_hash_table_new@plt>
   1f103:	mov    rsi,rbx
   1f106:	mov    rdi,rax
   1f109:	mov    QWORD PTR [rip+0x2659a8],rax        # 284ab8 <stdout@@GLIBC_2.2.5+0x170>
   1f110:	pop    rbx
   1f111:	jmp    cdb0 <g_hash_table_lookup@plt>
   1f116:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1f120:	push   r13
   1f122:	push   r12
   1f124:	push   rbp
   1f125:	push   rbx
   1f126:	mov    rbx,rdi
   1f129:	mov    edi,0x178
   1f12e:	sub    rsp,0x8
   1f132:	call   ce00 <g_malloc0@plt>
   1f137:	mov    rdi,QWORD PTR [rbx]
   1f13a:	test   rdi,rdi
   1f13d:	je     1f210 <g_str_equal@plt+0x11f50>
   1f143:	mov    rbp,rax
   1f146:	call   1f0d0 <g_str_equal@plt+0x11e10>
   1f14b:	test   rax,rax
   1f14e:	jne    1f23d <g_str_equal@plt+0x11f7d>
   1f154:	mov    rdi,QWORD PTR [rbx]
   1f157:	call   c370 <g_strdup@plt>
   1f15c:	mov    rdi,QWORD PTR [rbx+0x8]
   1f160:	mov    QWORD PTR [rbp+0x0],rax
   1f164:	call   c370 <g_strdup@plt>
   1f169:	mov    QWORD PTR [rbp+0x58],rax
   1f16d:	mov    rax,QWORD PTR [rbx+0x38]
   1f171:	mov    QWORD PTR [rbp+0x8],rax
   1f175:	mov    rax,QWORD PTR [rbx+0x10]
   1f179:	mov    QWORD PTR [rbp+0x10],rax
   1f17d:	mov    rax,QWORD PTR [rbx+0x40]
   1f181:	mov    QWORD PTR [rbp+0x18],rax
   1f185:	mov    rax,QWORD PTR [rbx+0x48]
   1f189:	mov    QWORD PTR [rbp+0x20],rax
   1f18d:	mov    rax,QWORD PTR [rbx+0x50]
   1f191:	mov    QWORD PTR [rbp+0x28],rax
   1f195:	mov    rax,QWORD PTR [rbx+0x58]
   1f199:	mov    QWORD PTR [rbp+0x30],rax
   1f19d:	mov    rax,QWORD PTR [rbx+0x18]
   1f1a1:	mov    QWORD PTR [rbp+0x38],rax
   1f1a5:	mov    rax,QWORD PTR [rbx+0x20]
   1f1a9:	mov    QWORD PTR [rbp+0x40],rax
   1f1ad:	mov    rax,QWORD PTR [rbx+0x28]
   1f1b1:	mov    QWORD PTR [rbp+0x48],rax
   1f1b5:	movzx  eax,BYTE PTR [rbx+0x30]
   1f1b9:	mov    BYTE PTR [rbp+0x50],al
   1f1bc:	mov    rax,QWORD PTR [rbx+0x60]
   1f1c0:	test   rax,rax
   1f1c3:	je     1f238 <g_str_equal@plt+0x11f78>
   1f1c5:	mov    rdi,QWORD PTR [rax]
   1f1c8:	xor    r12d,r12d
   1f1cb:	test   rdi,rdi
   1f1ce:	je     1f1fb <g_str_equal@plt+0x11f3b>
   1f1d0:	xor    r13d,r13d
   1f1d3:	jmp    1f1e4 <g_str_equal@plt+0x11f24>
   1f1d5:	nop    DWORD PTR [rax]
   1f1d8:	movsxd r13,r12d
   1f1db:	mov    rdi,QWORD PTR [rax+r13*8]
   1f1df:	test   rdi,rdi
   1f1e2:	je     1f1fb <g_str_equal@plt+0x11f3b>
   1f1e4:	call   c370 <g_strdup@plt>
   1f1e9:	mov    QWORD PTR [rbp+r13*8+0x78],rax
   1f1ee:	mov    rax,QWORD PTR [rbx+0x60]
   1f1f2:	add    r12d,0x1
   1f1f6:	test   rax,rax
   1f1f9:	jne    1f1d8 <g_str_equal@plt+0x11f18>
   1f1fb:	mov    DWORD PTR [rbp+0x70],r12d
   1f1ff:	add    rsp,0x8
   1f203:	mov    rax,rbp
   1f206:	pop    rbx
   1f207:	pop    rbp
   1f208:	pop    r12
   1f20a:	pop    r13
   1f20c:	ret    
   1f20d:	nop    DWORD PTR [rax]
   1f210:	lea    r8,[rip+0x3e258]        # 5d46f <_fini@@Base+0xad1b>
   1f217:	lea    rcx,[rip+0x3eaf2]        # 5dd10 <_fini@@Base+0xb5bc>
   1f21e:	lea    rsi,[rip+0x3e413]        # 5d638 <_fini@@Base+0xaee4>
   1f225:	mov    edx,0x66
   1f22a:	xor    edi,edi
   1f22c:	call   c6b0 <g_assertion_message_expr@plt>
   1f231:	nop    DWORD PTR [rax+0x0]
   1f238:	xor    r12d,r12d
   1f23b:	jmp    1f1fb <g_str_equal@plt+0x11f3b>
   1f23d:	mov    rcx,QWORD PTR [rbx]
   1f240:	mov    rdi,QWORD PTR [rip+0x2656f9]        # 284940 <stderr@@GLIBC_2.2.5>
   1f247:	lea    rdx,[rip+0x3e422]        # 5d670 <_fini@@Base+0xaf1c>
   1f24e:	mov    esi,0x1
   1f253:	xor    eax,eax
   1f255:	call   c2b0 <__fprintf_chk@plt>
   1f25a:	call   c270 <abort@plt>
   1f25f:	nop
   1f260:	push   rbx
   1f261:	sub    rsp,0x10
   1f265:	cmp    BYTE PTR [rip+0x265854],0x0        # 284ac0 <stdout@@GLIBC_2.2.5+0x178>
   1f26c:	jne    1f2c4 <g_str_equal@plt+0x12004>
   1f26e:	mov    rdx,rdi
   1f271:	mov    rbx,QWORD PTR [rdi]
   1f274:	mov    rdi,QWORD PTR [rip+0x26583d]        # 284ab8 <stdout@@GLIBC_2.2.5+0x170>
   1f27b:	test   rdi,rdi
   1f27e:	je     1f290 <g_str_equal@plt+0x11fd0>
   1f280:	add    rsp,0x10
   1f284:	mov    rsi,rbx
   1f287:	pop    rbx
   1f288:	jmp    c420 <g_hash_table_insert@plt>
   1f28d:	nop    DWORD PTR [rax]
   1f290:	mov    rsi,QWORD PTR [rip+0x262d49]        # 281fe0 <g_str_equal>
   1f297:	mov    rdi,QWORD PTR [rip+0x262d12]        # 281fb0 <g_str_hash>
   1f29e:	mov    QWORD PTR [rsp+0x8],rdx
   1f2a3:	call   c810 <g_hash_table_new@plt>
   1f2a8:	mov    rdx,QWORD PTR [rsp+0x8]
   1f2ad:	mov    QWORD PTR [rip+0x265804],rax        # 284ab8 <stdout@@GLIBC_2.2.5+0x170>
   1f2b4:	add    rsp,0x10
   1f2b8:	mov    rsi,rbx
   1f2bb:	mov    rdi,rax
   1f2be:	pop    rbx
   1f2bf:	jmp    c420 <g_hash_table_insert@plt>
   1f2c4:	lea    rcx,[rip+0x3ea35]        # 5dd00 <_fini@@Base+0xb5ac>
   1f2cb:	lea    rsi,[rip+0x3e366]        # 5d638 <_fini@@Base+0xaee4>
   1f2d2:	lea    rdi,[rip+0x3e1a9]        # 5d482 <_fini@@Base+0xad2e>
   1f2d9:	mov    edx,0x58
   1f2de:	call   c390 <__assert_fail@plt>
   1f2e3:	nop    DWORD PTR [rax]
   1f2e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1f2f0:	push   rbx
   1f2f1:	lea    rdi,[rip+0x2630e8]        # 2823e0 <g_test_config_vars+0x1020>
   1f2f8:	call   1f120 <g_str_equal@plt+0x11e60>
   1f2fd:	mov    rdi,rax
   1f300:	mov    rbx,rax
   1f303:	call   1f260 <g_str_equal@plt+0x11fa0>
   1f308:	lea    rdi,[rip+0x263051]        # 282360 <g_test_config_vars+0xfa0>
   1f30f:	mov    QWORD PTR [rip+0x2657b2],rbx        # 284ac8 <stdout@@GLIBC_2.2.5+0x180>
   1f316:	call   1f120 <g_str_equal@plt+0x11e60>
   1f31b:	pop    rbx
   1f31c:	mov    rdi,rax
   1f31f:	jmp    1f260 <g_str_equal@plt+0x11fa0>
   1f324:	xchg   ax,ax
   1f326:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1f330:	push   rbx
   1f331:	mov    rbx,rdi
   1f334:	mov    rdi,QWORD PTR [rdi]
   1f337:	call   d2b0 <g_free@plt>
   1f33c:	mov    rdi,QWORD PTR [rbx+0x8]
   1f340:	call   d2b0 <g_free@plt>
   1f345:	mov    rdi,QWORD PTR [rbx+0x10]
   1f349:	call   d2b0 <g_free@plt>
   1f34e:	mov    rdi,rbx
   1f351:	pop    rbx
   1f352:	jmp    d2b0 <g_free@plt>
   1f357:	nop    WORD PTR [rax+rax*1+0x0]
   1f360:	mov    rdi,rdx
   1f363:	jmp    d2b0 <g_free@plt>
   1f368:	nop    DWORD PTR [rax+rax*1+0x0]
   1f370:	mov    rdi,QWORD PTR [rdx+0x8]
   1f374:	push   rbx
   1f375:	mov    rbx,rdx
   1f378:	call   d2b0 <g_free@plt>
   1f37d:	mov    rdi,rbx
   1f380:	pop    rbx
   1f381:	jmp    d2b0 <g_free@plt>
   1f386:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1f390:	push   r15
   1f392:	push   r14
   1f394:	mov    r15,rsi
   1f397:	push   r13
   1f399:	push   r12
   1f39b:	mov    r14,rdx
   1f39e:	push   rbp
   1f39f:	push   rbx
   1f3a0:	mov    r13d,ecx
   1f3a3:	lea    r12,[rip+0x3e0eb]        # 5d495 <_fini@@Base+0xad41>
   1f3aa:	sub    rsp,0x58
   1f3ae:	mov    rsi,QWORD PTR [rdi+0x10]
   1f3b2:	lea    rbx,[rsp+0x20]
   1f3b7:	lea    rbp,[rsp+0x18]
   1f3bc:	mov    rax,QWORD PTR fs:0x28
   1f3c5:	mov    QWORD PTR [rsp+0x48],rax
   1f3ca:	xor    eax,eax
   1f3cc:	mov    rdi,rbx
   1f3cf:	call   c830 <g_hash_table_iter_init@plt>
   1f3d4:	jmp    1f3f7 <g_str_equal@plt+0x12137>
   1f3d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1f3e0:	mov    rax,QWORD PTR [rsp+0x18]
   1f3e5:	xor    edx,edx
   1f3e7:	mov    rsi,r12
   1f3ea:	mov    rdi,QWORD PTR [rax+0x8]
   1f3ee:	call   32ab0 <g_str_equal@plt+0x257f0>
   1f3f3:	test   eax,eax
   1f3f5:	jne    1f430 <g_str_equal@plt+0x12170>
   1f3f7:	xor    esi,esi
   1f3f9:	mov    rdx,rbp
   1f3fc:	mov    rdi,rbx
   1f3ff:	call   c820 <g_hash_table_iter_next@plt>
   1f404:	test   eax,eax
   1f406:	jne    1f3e0 <g_str_equal@plt+0x12120>
   1f408:	mov    rcx,QWORD PTR [rsp+0x48]
   1f40d:	xor    rcx,QWORD PTR fs:0x28
   1f416:	jne    1f467 <g_str_equal@plt+0x121a7>
   1f418:	add    rsp,0x58
   1f41c:	pop    rbx
   1f41d:	pop    rbp
   1f41e:	pop    r12
   1f420:	pop    r13
   1f422:	pop    r14
   1f424:	pop    r15
   1f426:	ret    
   1f427:	nop    WORD PTR [rax+rax*1+0x0]
   1f430:	mov    rax,QWORD PTR [rsp+0x18]
   1f435:	mov    rsi,r14
   1f438:	mov    rax,QWORD PTR [rax+0x38]
   1f43c:	mov    QWORD PTR [rsp+0x8],rax
   1f441:	mov    rdi,rax
   1f444:	call   r15
   1f447:	test   eax,eax
   1f449:	jne    1f408 <g_str_equal@plt+0x12148>
   1f44b:	test   r13b,r13b
   1f44e:	je     1f3f7 <g_str_equal@plt+0x12137>
   1f450:	mov    rdi,QWORD PTR [rsp+0x8]
   1f455:	mov    ecx,0x1
   1f45a:	mov    rdx,r14
   1f45d:	mov    rsi,r15
   1f460:	call   1f390 <g_str_equal@plt+0x120d0>
   1f465:	jmp    1f3f7 <g_str_equal@plt+0x12137>
   1f467:	call   cd30 <__stack_chk_fail@plt>
   1f46c:	nop    DWORD PTR [rax+0x0]
   1f470:	push   rbx
   1f471:	mov    rbx,rsi
   1f474:	mov    rsi,rdi
   1f477:	mov    rdi,QWORD PTR [rbx]
   1f47a:	call   c8f0 <g_slist_prepend@plt>
   1f47f:	mov    QWORD PTR [rbx],rax
   1f482:	pop    rbx
   1f483:	ret    
   1f484:	xchg   ax,ax
   1f486:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1f490:	mov    rdx,QWORD PTR [rsi]
   1f493:	mov    rax,QWORD PTR [rdi]
   1f496:	mov    rsi,QWORD PTR [rdx]
   1f499:	mov    rdi,QWORD PTR [rax]
   1f49c:	jmp    c3c0 <strcasecmp@plt>
   1f4a1:	nop    DWORD PTR [rax+rax*1+0x0]
   1f4a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1f4b0:	push   r13
   1f4b2:	push   r12
   1f4b4:	mov    r13,r8
   1f4b7:	push   rbp
   1f4b8:	push   rbx
   1f4b9:	mov    rbp,rsi
   1f4bc:	mov    r12,rdx
   1f4bf:	mov    rbx,rcx
   1f4c2:	sub    rsp,0x28
   1f4c6:	mov    rax,QWORD PTR fs:0x28
   1f4cf:	mov    QWORD PTR [rsp+0x18],rax
   1f4d4:	xor    eax,eax
   1f4d6:	lea    rsi,[rsp+0x10]
   1f4db:	mov    QWORD PTR [rsp+0x10],0x0
   1f4e4:	call   QWORD PTR [rcx+0x8]
   1f4e7:	mov    rsi,QWORD PTR [rsp+0x10]
   1f4ec:	mov    DWORD PTR [rsp+0xc],eax
   1f4f0:	test   rsi,rsi
   1f4f3:	je     1f520 <g_str_equal@plt+0x12260>
   1f4f5:	mov    rdi,r13
   1f4f8:	call   3a4c0 <g_str_equal@plt+0x2d200>
   1f4fd:	mov    rax,QWORD PTR [rsp+0x18]
   1f502:	xor    rax,QWORD PTR fs:0x28
   1f50b:	jne    1f538 <g_str_equal@plt+0x12278>
   1f50d:	add    rsp,0x28
   1f511:	pop    rbx
   1f512:	pop    rbp
   1f513:	pop    r12
   1f515:	pop    r13
   1f517:	ret    
   1f518:	nop    DWORD PTR [rax+rax*1+0x0]
   1f520:	mov    rcx,QWORD PTR [rbx]
   1f523:	lea    rdx,[rsp+0xc]
   1f528:	mov    r8,r13
   1f52b:	mov    rsi,r12
   1f52e:	mov    rdi,rbp
   1f531:	call   296a0 <g_str_equal@plt+0x1c3e0>
   1f536:	jmp    1f4fd <g_str_equal@plt+0x1223d>
   1f538:	call   cd30 <__stack_chk_fail@plt>
   1f53d:	nop    DWORD PTR [rax]
   1f540:	push   r12
   1f542:	push   rbp
   1f543:	mov    r12,rdi
   1f546:	push   rbx
   1f547:	mov    rbx,rcx
   1f54a:	mov    rdi,rsi
   1f54d:	mov    rbp,r8
   1f550:	mov    rsi,rdx
   1f553:	sub    rsp,0x20
   1f557:	mov    rcx,QWORD PTR [rcx]
   1f55a:	lea    rdx,[rsp+0xc]
   1f55f:	lea    r8,[rsp+0x10]
   1f564:	mov    QWORD PTR [rsp+0x10],0x0
   1f56d:	mov    rax,QWORD PTR fs:0x28
   1f576:	mov    QWORD PTR [rsp+0x18],rax
   1f57b:	xor    eax,eax
   1f57d:	call   296a0 <g_str_equal@plt+0x1c3e0>
   1f582:	mov    rsi,QWORD PTR [rsp+0x10]
   1f587:	test   rsi,rsi
   1f58a:	jne    1f5b8 <g_str_equal@plt+0x122f8>
   1f58c:	mov    rdx,rbp
   1f58f:	mov    esi,DWORD PTR [rsp+0xc]
   1f593:	mov    rdi,r12
   1f596:	call   QWORD PTR [rbx+0x10]
   1f599:	mov    rax,QWORD PTR [rsp+0x18]
   1f59e:	xor    rax,QWORD PTR fs:0x28
   1f5a7:	jne    1f5c2 <g_str_equal@plt+0x12302>
   1f5a9:	add    rsp,0x20
   1f5ad:	pop    rbx
   1f5ae:	pop    rbp
   1f5af:	pop    r12
   1f5b1:	ret    
   1f5b2:	nop    WORD PTR [rax+rax*1+0x0]
   1f5b8:	mov    rdi,rbp
   1f5bb:	call   3a4c0 <g_str_equal@plt+0x2d200>
   1f5c0:	jmp    1f599 <g_str_equal@plt+0x122d9>
   1f5c2:	call   cd30 <__stack_chk_fail@plt>
   1f5c7:	nop    WORD PTR [rax+rax*1+0x0]
   1f5d0:	push   r12
   1f5d2:	push   rbp
   1f5d3:	mov    r12,r8
   1f5d6:	push   rbx
   1f5d7:	mov    rbp,rdx
   1f5da:	mov    rbx,rsi
   1f5dd:	sub    rsp,0x20
   1f5e1:	mov    rax,QWORD PTR fs:0x28
   1f5ea:	mov    QWORD PTR [rsp+0x18],rax
   1f5ef:	xor    eax,eax
   1f5f1:	lea    rsi,[rsp+0x10]
   1f5f6:	mov    QWORD PTR [rsp+0x10],0x0
   1f5ff:	call   QWORD PTR [rcx]
   1f601:	mov    rsi,QWORD PTR [rsp+0x10]
   1f606:	mov    QWORD PTR [rsp+0x8],rax
   1f60b:	test   rsi,rsi
   1f60e:	je     1f638 <g_str_equal@plt+0x12378>
   1f610:	mov    rdi,r12
   1f613:	call   3a4c0 <g_str_equal@plt+0x2d200>
   1f618:	mov    rax,QWORD PTR [rsp+0x18]
   1f61d:	xor    rax,QWORD PTR fs:0x28
   1f626:	jne    1f657 <g_str_equal@plt+0x12397>
   1f628:	add    rsp,0x20
   1f62c:	pop    rbx
   1f62d:	pop    rbp
   1f62e:	pop    r12
   1f630:	ret    
   1f631:	nop    DWORD PTR [rax+0x0]
   1f638:	lea    rdx,[rsp+0x8]
   1f63d:	mov    rdi,rbx
   1f640:	mov    rcx,r12
   1f643:	mov    rsi,rbp
   1f646:	call   29210 <g_str_equal@plt+0x1bf50>
   1f64b:	mov    rdi,QWORD PTR [rsp+0x8]
   1f650:	call   d2b0 <g_free@plt>
   1f655:	jmp    1f618 <g_str_equal@plt+0x12358>
   1f657:	call   cd30 <__stack_chk_fail@plt>
   1f65c:	nop    DWORD PTR [rax+0x0]
   1f660:	push   r12
   1f662:	push   rbp
   1f663:	mov    rbp,rdi
   1f666:	push   rbx
   1f667:	mov    rdi,rsi
   1f66a:	mov    rbx,rcx
   1f66d:	mov    rsi,rdx
   1f670:	mov    r12,r8
   1f673:	sub    rsp,0x20
   1f677:	lea    rcx,[rsp+0x10]
   1f67c:	lea    rdx,[rsp+0x8]
   1f681:	mov    QWORD PTR [rsp+0x10],0x0
   1f68a:	mov    rax,QWORD PTR fs:0x28
   1f693:	mov    QWORD PTR [rsp+0x18],rax
   1f698:	xor    eax,eax
   1f69a:	call   29210 <g_str_equal@plt+0x1bf50>
   1f69f:	mov    rsi,QWORD PTR [rsp+0x10]
   1f6a4:	test   rsi,rsi
   1f6a7:	jne    1f6e0 <g_str_equal@plt+0x12420>
   1f6a9:	mov    rdi,rbp
   1f6ac:	mov    rdx,r12
   1f6af:	mov    rsi,QWORD PTR [rsp+0x8]
   1f6b4:	call   QWORD PTR [rbx+0x8]
   1f6b7:	mov    rdi,QWORD PTR [rsp+0x8]
   1f6bc:	call   d2b0 <g_free@plt>
   1f6c1:	mov    rax,QWORD PTR [rsp+0x18]
   1f6c6:	xor    rax,QWORD PTR fs:0x28
   1f6cf:	jne    1f6ea <g_str_equal@plt+0x1242a>
   1f6d1:	add    rsp,0x20
   1f6d5:	pop    rbx
   1f6d6:	pop    rbp
   1f6d7:	pop    r12
   1f6d9:	ret    
   1f6da:	nop    WORD PTR [rax+rax*1+0x0]
   1f6e0:	mov    rdi,r12
   1f6e3:	call   3a4c0 <g_str_equal@plt+0x2d200>
   1f6e8:	jmp    1f6c1 <g_str_equal@plt+0x12401>
   1f6ea:	call   cd30 <__stack_chk_fail@plt>
   1f6ef:	nop
   1f6f0:	push   r12
   1f6f2:	push   rbp
   1f6f3:	mov    r12,r8
   1f6f6:	push   rbx
   1f6f7:	mov    rbp,rdx
   1f6fa:	mov    rbx,rsi
   1f6fd:	sub    rsp,0x20
   1f701:	mov    rax,QWORD PTR fs:0x28
   1f70a:	mov    QWORD PTR [rsp+0x18],rax
   1f70f:	xor    eax,eax
   1f711:	lea    rsi,[rsp+0x10]
   1f716:	mov    QWORD PTR [rsp+0x10],0x0
   1f71f:	call   QWORD PTR [rcx]
   1f721:	mov    rsi,QWORD PTR [rsp+0x10]
   1f726:	mov    BYTE PTR [rsp+0xf],al
   1f72a:	test   rsi,rsi
   1f72d:	je     1f750 <g_str_equal@plt+0x12490>
   1f72f:	mov    rdi,r12
   1f732:	call   3a4c0 <g_str_equal@plt+0x2d200>
   1f737:	mov    rax,QWORD PTR [rsp+0x18]
   1f73c:	xor    rax,QWORD PTR fs:0x28
   1f745:	jne    1f765 <g_str_equal@plt+0x124a5>
   1f747:	add    rsp,0x20
   1f74b:	pop    rbx
   1f74c:	pop    rbp
   1f74d:	pop    r12
   1f74f:	ret    
   1f750:	lea    rdx,[rsp+0xf]
   1f755:	mov    rcx,r12
   1f758:	mov    rsi,rbp
   1f75b:	mov    rdi,rbx
   1f75e:	call   29120 <g_str_equal@plt+0x1be60>
   1f763:	jmp    1f737 <g_str_equal@plt+0x12477>
   1f765:	call   cd30 <__stack_chk_fail@plt>
   1f76a:	nop    WORD PTR [rax+rax*1+0x0]
   1f770:	push   r12
   1f772:	push   rbp
   1f773:	mov    rbp,rdi
   1f776:	push   rbx
   1f777:	mov    rdi,rsi
   1f77a:	mov    rbx,rcx
   1f77d:	mov    rsi,rdx
   1f780:	mov    r12,r8
   1f783:	sub    rsp,0x20
   1f787:	lea    rcx,[rsp+0x10]
   1f78c:	lea    rdx,[rsp+0xf]
   1f791:	mov    QWORD PTR [rsp+0x10],0x0
   1f79a:	mov    rax,QWORD PTR fs:0x28
   1f7a3:	mov    QWORD PTR [rsp+0x18],rax
   1f7a8:	xor    eax,eax
   1f7aa:	call   29120 <g_str_equal@plt+0x1be60>
   1f7af:	mov    rsi,QWORD PTR [rsp+0x10]
   1f7b4:	test   rsi,rsi
   1f7b7:	jne    1f7e0 <g_str_equal@plt+0x12520>
   1f7b9:	movzx  esi,BYTE PTR [rsp+0xf]
   1f7be:	mov    rdx,r12
   1f7c1:	mov    rdi,rbp
   1f7c4:	call   QWORD PTR [rbx+0x8]
   1f7c7:	mov    rax,QWORD PTR [rsp+0x18]
   1f7cc:	xor    rax,QWORD PTR fs:0x28
   1f7d5:	jne    1f7ea <g_str_equal@plt+0x1252a>
   1f7d7:	add    rsp,0x20
   1f7db:	pop    rbx
   1f7dc:	pop    rbp
   1f7dd:	pop    r12
   1f7df:	ret    
   1f7e0:	mov    rdi,r12
   1f7e3:	call   3a4c0 <g_str_equal@plt+0x2d200>
   1f7e8:	jmp    1f7c7 <g_str_equal@plt+0x12507>
   1f7ea:	call   cd30 <__stack_chk_fail@plt>
   1f7ef:	nop
   1f7f0:	push   r14
   1f7f2:	push   r13
   1f7f4:	mov    r14,rdx
   1f7f7:	push   r12
   1f7f9:	push   rbp
   1f7fa:	mov    r13,rsi
   1f7fd:	push   rbx
   1f7fe:	mov    r12,r8
   1f801:	sub    rsp,0x50
   1f805:	lea    rbx,[rsp+0x8]
   1f80a:	lea    rbp,[rsp+0x10]
   1f80f:	mov    QWORD PTR [rsp+0x8],0x0
   1f818:	mov    rax,QWORD PTR fs:0x28
   1f821:	mov    QWORD PTR [rsp+0x48],rax
   1f826:	xor    eax,eax
   1f828:	mov    rsi,rbp
   1f82b:	mov    rdx,rbx
   1f82e:	call   QWORD PTR [rcx]
   1f830:	mov    rsi,QWORD PTR [rsp+0x8]
   1f835:	test   rsi,rsi
   1f838:	je     1f868 <g_str_equal@plt+0x125a8>
   1f83a:	mov    rdi,r12
   1f83d:	call   3a4c0 <g_str_equal@plt+0x2d200>
   1f842:	mov    rax,QWORD PTR [rsp+0x48]
   1f847:	xor    rax,QWORD PTR fs:0x28
   1f850:	jne    1f960 <g_str_equal@plt+0x126a0>
   1f856:	add    rsp,0x50
   1f85a:	pop    rbx
   1f85b:	pop    rbp
   1f85c:	pop    r12
   1f85e:	pop    r13
   1f860:	pop    r14
   1f862:	ret    
   1f863:	nop    DWORD PTR [rax+rax*1+0x0]
   1f868:	xor    ecx,ecx
   1f86a:	xor    edx,edx
   1f86c:	mov    rsi,r14
   1f86f:	mov    r8,rbx
   1f872:	mov    rdi,r13
   1f875:	call   27da0 <g_str_equal@plt+0x1aae0>
   1f87a:	mov    rsi,QWORD PTR [rsp+0x8]
   1f87f:	test   rsi,rsi
   1f882:	jne    1f83a <g_str_equal@plt+0x1257a>
   1f884:	lea    rdx,[rbp+0x14]
   1f888:	lea    rsi,[rip+0x3dc0d]        # 5d49c <_fini@@Base+0xad48>
   1f88f:	mov    rcx,rbx
   1f892:	mov    rdi,r13
   1f895:	call   28e30 <g_str_equal@plt+0x1bb70>
   1f89a:	cmp    QWORD PTR [rsp+0x8],0x0
   1f8a0:	je     1f8b3 <g_str_equal@plt+0x125f3>
   1f8a2:	xor    esi,esi
   1f8a4:	mov    rdi,r13
   1f8a7:	call   28000 <g_str_equal@plt+0x1ad40>
   1f8ac:	mov    rsi,QWORD PTR [rsp+0x8]
   1f8b1:	jmp    1f83a <g_str_equal@plt+0x1257a>
   1f8b3:	lea    rdx,[rbp+0x10]
   1f8b7:	lea    rsi,[rip+0x3dbe6]        # 5d4a4 <_fini@@Base+0xad50>
   1f8be:	mov    rcx,rbx
   1f8c1:	mov    rdi,r13
   1f8c4:	call   28e30 <g_str_equal@plt+0x1bb70>
   1f8c9:	cmp    QWORD PTR [rsp+0x8],0x0
   1f8cf:	jne    1f8a2 <g_str_equal@plt+0x125e2>
   1f8d1:	lea    rdx,[rbp+0xc]
   1f8d5:	lea    rsi,[rip+0x3dbcf]        # 5d4ab <_fini@@Base+0xad57>
   1f8dc:	mov    rcx,rbx
   1f8df:	mov    rdi,r13
   1f8e2:	call   28e30 <g_str_equal@plt+0x1bb70>
   1f8e7:	cmp    QWORD PTR [rsp+0x8],0x0
   1f8ed:	jne    1f8a2 <g_str_equal@plt+0x125e2>
   1f8ef:	lea    rdx,[rbp+0x8]
   1f8f3:	lea    rsi,[rip+0x3dbb9]        # 5d4b3 <_fini@@Base+0xad5f>
   1f8fa:	mov    rcx,rbx
   1f8fd:	mov    rdi,r13
   1f900:	call   28e30 <g_str_equal@plt+0x1bb70>
   1f905:	cmp    QWORD PTR [rsp+0x8],0x0
   1f90b:	jne    1f8a2 <g_str_equal@plt+0x125e2>
   1f90d:	lea    rdx,[rbp+0x4]
   1f911:	lea    rsi,[rip+0x3dba3]        # 5d4bb <_fini@@Base+0xad67>
   1f918:	mov    rcx,rbx
   1f91b:	mov    rdi,r13
   1f91e:	call   28e30 <g_str_equal@plt+0x1bb70>
   1f923:	cmp    QWORD PTR [rsp+0x8],0x0
   1f929:	jne    1f8a2 <g_str_equal@plt+0x125e2>
   1f92f:	lea    rsi,[rip+0x3db8c]        # 5d4c2 <_fini@@Base+0xad6e>
   1f936:	mov    rcx,rbx
   1f939:	mov    rdx,rbp
   1f93c:	mov    rdi,r13
   1f93f:	call   28e30 <g_str_equal@plt+0x1bb70>
   1f944:	cmp    QWORD PTR [rsp+0x8],0x0
   1f94a:	jne    1f8a2 <g_str_equal@plt+0x125e2>
   1f950:	mov    rsi,rbx
   1f953:	mov    rdi,r13
   1f956:	call   27f50 <g_str_equal@plt+0x1ac90>
   1f95b:	jmp    1f8a2 <g_str_equal@plt+0x125e2>
   1f960:	call   cd30 <__stack_chk_fail@plt>
   1f965:	nop
   1f966:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1f970:	sub    rsp,0x18
   1f974:	mov    rdi,rsi
   1f977:	mov    rsi,rdx
   1f97a:	mov    rax,QWORD PTR fs:0x28
   1f983:	mov    QWORD PTR [rsp+0x8],rax
   1f988:	xor    eax,eax
   1f98a:	movzx  eax,BYTE PTR [rcx]
   1f98d:	lea    rdx,[rsp+0x7]
   1f992:	mov    rcx,r8
   1f995:	mov    BYTE PTR [rsp+0x7],al
   1f999:	call   28870 <g_str_equal@plt+0x1b5b0>
   1f99e:	mov    rax,QWORD PTR [rsp+0x8]
   1f9a3:	xor    rax,QWORD PTR fs:0x28
   1f9ac:	jne    1f9b3 <g_str_equal@plt+0x126f3>
   1f9ae:	add    rsp,0x18
   1f9b2:	ret    
   1f9b3:	call   cd30 <__stack_chk_fail@plt>
   1f9b8:	nop    DWORD PTR [rax+rax*1+0x0]
   1f9c0:	sub    rsp,0x18
   1f9c4:	mov    rdi,rsi
   1f9c7:	mov    rsi,rdx
   1f9ca:	mov    rax,QWORD PTR fs:0x28
   1f9d3:	mov    QWORD PTR [rsp+0x8],rax
   1f9d8:	xor    eax,eax
   1f9da:	movzx  eax,WORD PTR [rcx]
   1f9dd:	lea    rdx,[rsp+0x6]
   1f9e2:	mov    rcx,r8
   1f9e5:	mov    WORD PTR [rsp+0x6],ax
   1f9ea:	call   28960 <g_str_equal@plt+0x1b6a0>
   1f9ef:	mov    rax,QWORD PTR [rsp+0x8]
   1f9f4:	xor    rax,QWORD PTR fs:0x28
   1f9fd:	jne    1fa04 <g_str_equal@plt+0x12744>
   1f9ff:	add    rsp,0x18
   1fa03:	ret    
   1fa04:	call   cd30 <__stack_chk_fail@plt>
   1fa09:	nop    DWORD PTR [rax+0x0]
   1fa10:	sub    rsp,0x18
   1fa14:	mov    rdi,rsi
   1fa17:	mov    rsi,rdx
   1fa1a:	mov    rax,QWORD PTR fs:0x28
   1fa23:	mov    QWORD PTR [rsp+0x8],rax
   1fa28:	xor    eax,eax
   1fa2a:	mov    eax,DWORD PTR [rcx]
   1fa2c:	lea    rdx,[rsp+0x4]
   1fa31:	mov    rcx,r8
   1fa34:	mov    DWORD PTR [rsp+0x4],eax
   1fa38:	call   28a50 <g_str_equal@plt+0x1b790>
   1fa3d:	mov    rax,QWORD PTR [rsp+0x8]
   1fa42:	xor    rax,QWORD PTR fs:0x28
   1fa4b:	jne    1fa52 <g_str_equal@plt+0x12792>
   1fa4d:	add    rsp,0x18
   1fa51:	ret    
   1fa52:	call   cd30 <__stack_chk_fail@plt>
   1fa57:	nop    WORD PTR [rax+rax*1+0x0]
   1fa60:	sub    rsp,0x18
   1fa64:	mov    rdi,rsi
   1fa67:	mov    rsi,rdx
   1fa6a:	mov    rax,QWORD PTR fs:0x28
   1fa73:	mov    QWORD PTR [rsp+0x8],rax
   1fa78:	xor    eax,eax
   1fa7a:	mov    rax,QWORD PTR [rcx]
   1fa7d:	mov    rdx,rsp
   1fa80:	mov    rcx,r8
   1fa83:	mov    QWORD PTR [rsp],rax
   1fa87:	call   28b40 <g_str_equal@plt+0x1b880>
   1fa8c:	mov    rax,QWORD PTR [rsp+0x8]
   1fa91:	xor    rax,QWORD PTR fs:0x28
   1fa9a:	jne    1faa1 <g_str_equal@plt+0x127e1>
   1fa9c:	add    rsp,0x18
   1faa0:	ret    
   1faa1:	call   cd30 <__stack_chk_fail@plt>
   1faa6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1fab0:	test   rdi,rdi
   1fab3:	mov    rax,QWORD PTR [rsi]
   1fab6:	je     1fabd <g_str_equal@plt+0x127fd>
   1fab8:	test   rax,rax
   1fabb:	je     1fac0 <g_str_equal@plt+0x12800>
   1fabd:	repz ret 
   1fabf:	nop
   1fac0:	push   rbx
   1fac1:	mov    rbx,rsi
   1fac4:	call   1f0d0 <g_str_equal@plt+0x11e10>
   1fac9:	test   rax,rax
   1facc:	mov    QWORD PTR [rbx],rax
   1facf:	je     1fad8 <g_str_equal@plt+0x12818>
   1fad1:	pop    rbx
   1fad2:	ret    
   1fad3:	nop    DWORD PTR [rax+rax*1+0x0]
   1fad8:	lea    r8,[rip+0x3d9ea]        # 5d4c9 <_fini@@Base+0xad75>
   1fadf:	lea    rcx,[rip+0x3e1ea]        # 5dcd0 <_fini@@Base+0xb57c>
   1fae6:	lea    rsi,[rip+0x3db4b]        # 5d638 <_fini@@Base+0xaee4>
   1faed:	mov    edx,0xb0
   1faf2:	xor    edi,edi
   1faf4:	call   c6b0 <g_assertion_message_expr@plt>
   1faf9:	nop    DWORD PTR [rax+0x0]
   1fb00:	push   rbp
   1fb01:	push   rbx
   1fb02:	mov    rbp,rdi
   1fb05:	mov    rbx,rsi
   1fb08:	sub    rsp,0x8
   1fb0c:	mov    rdi,QWORD PTR [rsi+0x58]
   1fb10:	test   rdi,rdi
   1fb13:	jne    1fb30 <g_str_equal@plt+0x12870>
   1fb15:	mov    rax,QWORD PTR [rbx+0x38]
   1fb19:	test   rax,rax
   1fb1c:	je     1fb50 <g_str_equal@plt+0x12890>
   1fb1e:	add    rsp,0x8
   1fb22:	mov    rdi,rbp
   1fb25:	pop    rbx
   1fb26:	pop    rbp
   1fb27:	jmp    rax
   1fb29:	nop    DWORD PTR [rax+0x0]
   1fb30:	lea    rsi,[rsi+0x60]
   1fb34:	call   1fab0 <g_str_equal@plt+0x127f0>
   1fb39:	mov    rdi,rbp
   1fb3c:	mov    rsi,rax
   1fb3f:	call   1fb00 <g_str_equal@plt+0x12840>
   1fb44:	jmp    1fb15 <g_str_equal@plt+0x12855>
   1fb46:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1fb50:	add    rsp,0x8
   1fb54:	pop    rbx
   1fb55:	pop    rbp
   1fb56:	ret    
   1fb57:	nop    WORD PTR [rax+rax*1+0x0]
   1fb60:	test   rsi,rsi
   1fb63:	push   rbx
   1fb64:	je     1fba4 <g_str_equal@plt+0x128e4>
   1fb66:	test   rdi,rdi
   1fb69:	mov    rax,rdi
   1fb6c:	mov    rbx,rsi
   1fb6f:	jne    1fb8a <g_str_equal@plt+0x128ca>
   1fb71:	jmp    1fba0 <g_str_equal@plt+0x128e0>
   1fb73:	nop    DWORD PTR [rax+rax*1+0x0]
   1fb78:	mov    rdi,QWORD PTR [rax+0x58]
   1fb7c:	lea    rsi,[rax+0x60]
   1fb80:	call   1fab0 <g_str_equal@plt+0x127f0>
   1fb85:	test   rax,rax
   1fb88:	je     1fba0 <g_str_equal@plt+0x128e0>
   1fb8a:	cmp    rbx,rax
   1fb8d:	jne    1fb78 <g_str_equal@plt+0x128b8>
   1fb8f:	mov    eax,0x1
   1fb94:	pop    rbx
   1fb95:	ret    
   1fb96:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1fba0:	xor    eax,eax
   1fba2:	pop    rbx
   1fba3:	ret    
   1fba4:	lea    rcx,[rip+0x3e0d5]        # 5dc80 <_fini@@Base+0xb52c>
   1fbab:	lea    rsi,[rip+0x3da86]        # 5d638 <_fini@@Base+0xaee4>
   1fbb2:	lea    rdi,[rip+0x3d92a]        # 5d4e3 <_fini@@Base+0xad8f>
   1fbb9:	mov    edx,0xdf
   1fbbe:	call   c390 <__assert_fail@plt>
   1fbc3:	nop    DWORD PTR [rax]
   1fbc6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1fbd0:	push   r15
   1fbd2:	push   r14
   1fbd4:	lea    r14,[rip+0x3d8ba]        # 5d495 <_fini@@Base+0xad41>
   1fbdb:	push   r13
   1fbdd:	push   r12
   1fbdf:	mov    r13,rsi
   1fbe2:	push   rbp
   1fbe3:	push   rbx
   1fbe4:	sub    rsp,0x58
   1fbe8:	mov    rsi,QWORD PTR [rdi+0x10]
   1fbec:	lea    rbx,[rsp+0x20]
   1fbf1:	lea    r12,[rsp+0x18]
   1fbf6:	lea    rbp,[rsp+0x10]
   1fbfb:	mov    QWORD PTR [rsp+0x8],rdi
   1fc00:	mov    rdi,rbx
   1fc03:	mov    rcx,QWORD PTR fs:0x28
   1fc0c:	mov    QWORD PTR [rsp+0x48],rcx
   1fc11:	xor    ecx,ecx
   1fc13:	call   c830 <g_hash_table_iter_init@plt>
   1fc18:	nop    DWORD PTR [rax+rax*1+0x0]
   1fc20:	mov    rdx,r12
   1fc23:	mov    rsi,rbp
   1fc26:	mov    rdi,rbx
   1fc29:	call   c820 <g_hash_table_iter_next@plt>
   1fc2e:	test   eax,eax
   1fc30:	je     1fc6d <g_str_equal@plt+0x129ad>
   1fc32:	mov    r15,QWORD PTR [rsp+0x18]
   1fc37:	xor    edx,edx
   1fc39:	mov    rsi,r14
   1fc3c:	mov    rdi,QWORD PTR [r15+0x8]
   1fc40:	call   32ab0 <g_str_equal@plt+0x257f0>
   1fc45:	test   eax,eax
   1fc47:	je     1fc20 <g_str_equal@plt+0x12960>
   1fc49:	cmp    QWORD PTR [r15+0x38],r13
   1fc4d:	jne    1fc20 <g_str_equal@plt+0x12960>
   1fc4f:	mov    rax,QWORD PTR [r15+0x30]
   1fc53:	test   rax,rax
   1fc56:	je     1fc6d <g_str_equal@plt+0x129ad>
   1fc58:	mov    rdx,r13
   1fc5b:	mov    rsi,QWORD PTR [r15]
   1fc5e:	mov    rdi,QWORD PTR [rsp+0x8]
   1fc63:	call   rax
   1fc65:	mov    QWORD PTR [r15+0x30],0x0
   1fc6d:	mov    rax,QWORD PTR [rsp+0x8]
   1fc72:	lea    r15,[rip+0x3d81c]        # 5d495 <_fini@@Base+0xad41>
   1fc79:	mov    rdi,rbx
   1fc7c:	mov    rsi,QWORD PTR [rax+0x10]
   1fc80:	call   c830 <g_hash_table_iter_init@plt>
   1fc85:	nop    DWORD PTR [rax]
   1fc88:	mov    rdx,r12
   1fc8b:	mov    rsi,rbp
   1fc8e:	mov    rdi,rbx
   1fc91:	call   c820 <g_hash_table_iter_next@plt>
   1fc96:	test   eax,eax
   1fc98:	je     1fcbf <g_str_equal@plt+0x129ff>
   1fc9a:	mov    r14,QWORD PTR [rsp+0x18]
   1fc9f:	xor    edx,edx
   1fca1:	mov    rsi,r15
   1fca4:	mov    rdi,QWORD PTR [r14+0x8]
   1fca8:	call   32ab0 <g_str_equal@plt+0x257f0>
   1fcad:	test   eax,eax
   1fcaf:	je     1fc88 <g_str_equal@plt+0x129c8>
   1fcb1:	cmp    r13,QWORD PTR [r14+0x38]
   1fcb5:	jne    1fc88 <g_str_equal@plt+0x129c8>
   1fcb7:	mov    rdi,rbx
   1fcba:	call   c990 <g_hash_table_iter_remove@plt>
   1fcbf:	mov    rax,QWORD PTR [rsp+0x48]
   1fcc4:	xor    rax,QWORD PTR fs:0x28
   1fccd:	jne    1fcde <g_str_equal@plt+0x12a1e>
   1fccf:	add    rsp,0x58
   1fcd3:	pop    rbx
   1fcd4:	pop    rbp
   1fcd5:	pop    r12
   1fcd7:	pop    r13
   1fcd9:	pop    r14
   1fcdb:	pop    r15
   1fcdd:	ret    
   1fcde:	call   cd30 <__stack_chk_fail@plt>
   1fce3:	nop    DWORD PTR [rax]
   1fce6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1fcf0:	lock add DWORD PTR [rdi+0x18],0x1
   1fcf5:	ret    
   1fcf6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1fd00:	mov    rdi,rdx
   1fd03:	jmp    d2b0 <g_free@plt>
   1fd08:	nop    DWORD PTR [rax+rax*1+0x0]
   1fd10:	mov    rdi,rdx
   1fd13:	jmp    d2b0 <g_free@plt>
   1fd18:	nop    DWORD PTR [rax+rax*1+0x0]
   1fd20:	mov    rdi,rdx
   1fd23:	jmp    d2b0 <g_free@plt>
   1fd28:	nop    DWORD PTR [rax+rax*1+0x0]
   1fd30:	push   r13
   1fd32:	push   r12
   1fd34:	mov    r8,rdi
   1fd37:	push   rbp
   1fd38:	push   rbx
   1fd39:	mov    r13,rcx
   1fd3c:	mov    ecx,0xd
   1fd41:	mov    r12,rdx
   1fd44:	mov    rbp,rsi
   1fd47:	sub    rsp,0x78
   1fd4b:	mov    rdx,QWORD PTR [rdx]
   1fd4e:	mov    rsi,r8
   1fd51:	mov    rax,QWORD PTR fs:0x28
   1fd5a:	mov    QWORD PTR [rsp+0x68],rax
   1fd5f:	xor    eax,eax
   1fd61:	mov    rdi,rsp
   1fd64:	rep stos QWORD PTR es:[rdi],rax
   1fd67:	mov    rax,QWORD PTR [r13+0x0]
   1fd6b:	lea    rdi,[rip+0x3d796]        # 5d508 <_fini@@Base+0xadb4>
   1fd72:	mov    QWORD PTR [rsp+0x8],rax
   1fd77:	xor    eax,eax
   1fd79:	call   c740 <g_strdup_printf@plt>
   1fd7e:	mov    rdi,rsp
   1fd81:	mov    QWORD PTR [rsp],rax
   1fd85:	mov    BYTE PTR [rsp+0x30],0x1
   1fd8a:	call   1f120 <g_str_equal@plt+0x11e60>
   1fd8f:	cmp    QWORD PTR [rax+0x68],0x0
   1fd94:	mov    rbx,rax
   1fd97:	mov    QWORD PTR [rax+0x60],r13
   1fd9b:	jne    1fda5 <g_str_equal@plt+0x12ae5>
   1fd9d:	mov    rdi,rax
   1fda0:	call   1fe00 <g_str_equal@plt+0x12b40>
   1fda5:	mov    rdi,QWORD PTR [rsp]
   1fda9:	call   d2b0 <g_free@plt>
   1fdae:	mov    rdx,QWORD PTR [rbp+0x0]
   1fdb2:	mov    rax,QWORD PTR [rbx+0x68]
   1fdb6:	mov    QWORD PTR [rax+0x60],rdx
   1fdba:	mov    QWORD PTR [rax+0x68],r12
   1fdbe:	mov    rbp,QWORD PTR [rbp+0x0]
   1fdc2:	mov    rsi,QWORD PTR [rbx+0x68]
   1fdc6:	mov    rdi,QWORD PTR [rbp+0x8]
   1fdca:	call   c6f0 <g_slist_append@plt>
   1fdcf:	mov    QWORD PTR [rbp+0x8],rax
   1fdd3:	mov    rax,QWORD PTR [rsp+0x68]
   1fdd8:	xor    rax,QWORD PTR fs:0x28
   1fde1:	jne    1fdee <g_str_equal@plt+0x12b2e>
   1fde3:	add    rsp,0x78
   1fde7:	pop    rbx
   1fde8:	pop    rbp
   1fde9:	pop    r12
   1fdeb:	pop    r13
   1fded:	ret    
   1fdee:	call   cd30 <__stack_chk_fail@plt>
   1fdf3:	nop    DWORD PTR [rax]
   1fdf6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1fe00:	push   r14
   1fe02:	push   r13
   1fe04:	push   r12
   1fe06:	push   rbp
   1fe07:	mov    rbp,rdi
   1fe0a:	push   rbx
   1fe0b:	mov    rdx,QWORD PTR [rdi+0x8]
   1fe0f:	test   rdx,rdx
   1fe12:	jne    1fe47 <g_str_equal@plt+0x12b87>
   1fe14:	mov    rdi,QWORD PTR [rdi+0x58]
   1fe18:	mov    rax,rbp
   1fe1b:	test   rdi,rdi
   1fe1e:	jne    1fe35 <g_str_equal@plt+0x12b75>
   1fe20:	jmp    1ff18 <g_str_equal@plt+0x12c58>
   1fe25:	nop    DWORD PTR [rax]
   1fe28:	mov    rdi,QWORD PTR [rax+0x58]
   1fe2c:	test   rdi,rdi
   1fe2f:	je     1ff18 <g_str_equal@plt+0x12c58>
   1fe35:	lea    rsi,[rax+0x60]
   1fe39:	call   1fab0 <g_str_equal@plt+0x127f0>
   1fe3e:	mov    rdx,QWORD PTR [rax+0x8]
   1fe42:	test   rdx,rdx
   1fe45:	je     1fe28 <g_str_equal@plt+0x12b68>
   1fe47:	mov    rcx,QWORD PTR [rbp+0x10]
   1fe4b:	mov    QWORD PTR [rbp+0x8],rdx
   1fe4f:	test   rcx,rcx
   1fe52:	jne    1fe8b <g_str_equal@plt+0x12bcb>
   1fe54:	mov    rdi,QWORD PTR [rbp+0x58]
   1fe58:	mov    rax,rbp
   1fe5b:	test   rdi,rdi
   1fe5e:	jne    1fe75 <g_str_equal@plt+0x12bb5>
   1fe60:	jmp    1ff04 <g_str_equal@plt+0x12c44>
   1fe65:	nop    DWORD PTR [rax]
   1fe68:	mov    rdi,QWORD PTR [rax+0x58]
   1fe6c:	test   rdi,rdi
   1fe6f:	je     1ff00 <g_str_equal@plt+0x12c40>
   1fe75:	lea    rsi,[rax+0x60]
   1fe79:	call   1fab0 <g_str_equal@plt+0x127f0>
   1fe7e:	mov    rcx,QWORD PTR [rax+0x10]
   1fe82:	test   rcx,rcx
   1fe85:	je     1fe68 <g_str_equal@plt+0x12ba8>
   1fe87:	mov    rdx,QWORD PTR [rbp+0x8]
   1fe8b:	mov    QWORD PTR [rbp+0x10],rcx
   1fe8f:	mov    rdi,rdx
   1fe92:	call   ce00 <g_malloc0@plt>
   1fe97:	mov    rdi,QWORD PTR [rbp+0x58]
   1fe9b:	lea    rsi,[rbp+0x60]
   1fe9f:	mov    QWORD PTR [rbp+0x68],rax
   1fea3:	call   1fab0 <g_str_equal@plt+0x127f0>
   1fea8:	test   rax,rax
   1feab:	mov    r12,rax
   1feae:	jne    1ff28 <g_str_equal@plt+0x12c68>
   1feb0:	mov    rbx,QWORD PTR [rbp+0x68]
   1feb4:	mov    rdx,QWORD PTR [rip+0x2620ed]        # 281fa8 <g_free>
   1febb:	lea    rcx,[rip+0xfffffffffffff46e]        # 1f330 <g_str_equal@plt+0x12070>
   1fec2:	mov    rsi,QWORD PTR [rip+0x262117]        # 281fe0 <g_str_equal>
   1fec9:	mov    rdi,QWORD PTR [rip+0x2620e0]        # 281fb0 <g_str_hash>
   1fed0:	call   c850 <g_hash_table_new_full@plt>
   1fed5:	mov    QWORD PTR [rbx+0x58],rax
   1fed9:	mov    rax,QWORD PTR [rbp+0x68]
   1fedd:	mov    QWORD PTR [rax],rbp
   1fee0:	mov    rax,QWORD PTR [rbp+0x18]
   1fee4:	test   rax,rax
   1fee7:	je     200a3 <g_str_equal@plt+0x12de3>
   1feed:	pop    rbx
   1feee:	mov    rsi,QWORD PTR [rbp+0x30]
   1fef2:	mov    rdi,QWORD PTR [rbp+0x68]
   1fef6:	pop    rbp
   1fef7:	pop    r12
   1fef9:	pop    r13
   1fefb:	pop    r14
   1fefd:	jmp    rax
   1feff:	nop
   1ff00:	mov    rdx,QWORD PTR [rbp+0x8]
   1ff04:	mov    QWORD PTR [rbp+0x10],0x0
   1ff0c:	mov    BYTE PTR [rbp+0x50],0x1
   1ff10:	jmp    1fe8f <g_str_equal@plt+0x12bcf>
   1ff15:	nop    DWORD PTR [rax]
   1ff18:	mov    edx,0x60
   1ff1d:	jmp    1fe47 <g_str_equal@plt+0x12b87>
   1ff22:	nop    WORD PTR [rax+rax*1+0x0]
   1ff28:	cmp    QWORD PTR [rax+0x68],0x0
   1ff2d:	jne    1ff37 <g_str_equal@plt+0x12c77>
   1ff2f:	mov    rdi,rax
   1ff32:	call   1fe00 <g_str_equal@plt+0x12b40>
   1ff37:	mov    rdx,QWORD PTR [r12+0x8]
   1ff3c:	cmp    rdx,QWORD PTR [rbp+0x8]
   1ff40:	jbe    1ff68 <g_str_equal@plt+0x12ca8>
   1ff42:	lea    r8,[rip+0x3d7d7]        # 5d720 <_fini@@Base+0xafcc>
   1ff49:	lea    rcx,[rip+0x3dd50]        # 5dca0 <_fini@@Base+0xb54c>
   1ff50:	lea    rsi,[rip+0x3d6e1]        # 5d638 <_fini@@Base+0xaee4>
   1ff57:	mov    edx,0x12a
   1ff5c:	xor    edi,edi
   1ff5e:	call   c6b0 <g_assertion_message_expr@plt>
   1ff63:	nop    DWORD PTR [rax+rax*1+0x0]
   1ff68:	mov    rdi,QWORD PTR [rbp+0x68]
   1ff6c:	mov    rsi,QWORD PTR [r12+0x68]
   1ff71:	lea    r13,[rbp+0x68]
   1ff75:	call   d220 <memcpy@plt>
   1ff7a:	mov    rax,QWORD PTR [rbp+0x68]
   1ff7e:	mov    rdx,QWORD PTR [rip+0x262023]        # 281fa8 <g_free>
   1ff85:	lea    rcx,[rip+0xfffffffffffff3a4]        # 1f330 <g_str_equal@plt+0x12070>
   1ff8c:	mov    rsi,QWORD PTR [rip+0x26204d]        # 281fe0 <g_str_equal>
   1ff93:	mov    rdi,QWORD PTR [rip+0x262016]        # 281fb0 <g_str_hash>
   1ff9a:	mov    QWORD PTR [rax+0x8],0x0
   1ffa2:	mov    rbx,QWORD PTR [rbp+0x68]
   1ffa6:	call   c850 <g_hash_table_new_full@plt>
   1ffab:	mov    QWORD PTR [rbx+0x58],rax
   1ffaf:	mov    rax,QWORD PTR [r12+0x68]
   1ffb4:	mov    rbx,QWORD PTR [rax+0x8]
   1ffb8:	test   rbx,rbx
   1ffbb:	je     1ffdf <g_str_equal@plt+0x12d1f>
   1ffbd:	nop    DWORD PTR [rax]
   1ffc0:	mov    rax,QWORD PTR [rbx]
   1ffc3:	mov    rdi,QWORD PTR [rbp+0x0]
   1ffc7:	mov    rsi,r13
   1ffca:	mov    rdx,QWORD PTR [rax+0x68]
   1ffce:	mov    rcx,QWORD PTR [rax]
   1ffd1:	call   1fd30 <g_str_equal@plt+0x12a70>
   1ffd6:	mov    rbx,QWORD PTR [rbx+0x8]
   1ffda:	test   rbx,rbx
   1ffdd:	jne    1ffc0 <g_str_equal@plt+0x12d00>
   1ffdf:	mov    eax,DWORD PTR [rbp+0x70]
   1ffe2:	test   eax,eax
   1ffe4:	jle    20045 <g_str_equal@plt+0x12d85>
   1ffe6:	xor    r14d,r14d
   1ffe9:	nop    DWORD PTR [rax+0x0]
   1fff0:	movsxd rax,r14d
   1fff3:	xor    r13d,r13d
   1fff6:	mov    rdi,QWORD PTR [rbp+rax*8+0x78]
   1fffb:	test   rdi,rdi
   1fffe:	je     20008 <g_str_equal@plt+0x12d48>
   20000:	call   1f0d0 <g_str_equal@plt+0x11e10>
   20005:	mov    r13,rax
   20008:	mov    rax,QWORD PTR [rbp+0x68]
   2000c:	mov    rbx,QWORD PTR [rax+0x8]
   20010:	test   rbx,rbx
   20013:	jne    20029 <g_str_equal@plt+0x12d69>
   20015:	jmp    20080 <g_str_equal@plt+0x12dc0>
   20017:	nop    WORD PTR [rax+rax*1+0x0]
   20020:	mov    rbx,QWORD PTR [rbx+0x8]
   20024:	test   rbx,rbx
   20027:	je     20080 <g_str_equal@plt+0x12dc0>
   20029:	mov    rax,QWORD PTR [rbx]
   2002c:	mov    rsi,r13
   2002f:	mov    rdi,QWORD PTR [rax]
   20032:	call   1fb60 <g_str_equal@plt+0x128a0>
   20037:	test   al,al
   20039:	je     20020 <g_str_equal@plt+0x12d60>
   2003b:	add    r14d,0x1
   2003f:	cmp    r14d,DWORD PTR [rbp+0x70]
   20043:	jl     1fff0 <g_str_equal@plt+0x12d30>
   20045:	mov    rax,QWORD PTR [rbp+0x68]
   20049:	mov    QWORD PTR [rax],rbp
   2004c:	nop    DWORD PTR [rax+0x0]
   20050:	mov    rax,QWORD PTR [r12+0x20]
   20055:	test   rax,rax
   20058:	je     20064 <g_str_equal@plt+0x12da4>
   2005a:	mov    rsi,QWORD PTR [rbp+0x30]
   2005e:	mov    rdi,QWORD PTR [rbp+0x68]
   20062:	call   rax
   20064:	mov    rdi,QWORD PTR [r12+0x58]
   20069:	lea    rsi,[r12+0x60]
   2006e:	call   1fab0 <g_str_equal@plt+0x127f0>
   20073:	test   rax,rax
   20076:	mov    r12,rax
   20079:	jne    20050 <g_str_equal@plt+0x12d90>
   2007b:	jmp    1fee0 <g_str_equal@plt+0x12c20>
   20080:	mov    rdi,QWORD PTR [rbp+0x0]
   20084:	lea    rsi,[rbp+0x68]
   20088:	mov    rcx,r13
   2008b:	mov    rdx,r13
   2008e:	add    r14d,0x1
   20092:	call   1fd30 <g_str_equal@plt+0x12a70>
   20097:	cmp    r14d,DWORD PTR [rbp+0x70]
   2009b:	jl     1fff0 <g_str_equal@plt+0x12d30>
   200a1:	jmp    20045 <g_str_equal@plt+0x12d85>
   200a3:	pop    rbx
   200a4:	pop    rbp
   200a5:	pop    r12
   200a7:	pop    r13
   200a9:	pop    r14
   200ab:	ret    
   200ac:	nop    DWORD PTR [rax+0x0]
   200b0:	push   rbp
   200b1:	push   rbx
   200b2:	sub    rsp,0x18
   200b6:	test   rdx,rdx
   200b9:	je     201e8 <g_str_equal@plt+0x12f28>
   200bf:	cmp    QWORD PTR [rdx+0x68],0x0
   200c4:	mov    rbp,rdi
   200c7:	mov    rbx,rdx
   200ca:	je     20210 <g_str_equal@plt+0x12f50>
   200d0:	mov    rdx,QWORD PTR [rbx+0x10]
   200d4:	cmp    rdx,0x27
   200d8:	jbe    20170 <g_str_equal@plt+0x12eb0>
   200de:	cmp    BYTE PTR [rbx+0x50],0x0
   200e2:	jne    20198 <g_str_equal@plt+0x12ed8>
   200e8:	cmp    rdx,rsi
   200eb:	ja     201c0 <g_str_equal@plt+0x12f00>
   200f1:	xor    esi,esi
   200f3:	mov    rdi,rbp
   200f6:	call   c1c0 <memset@plt>
   200fb:	mov    rax,QWORD PTR [rbx+0x68]
   200ff:	mov    rdi,rbp
   20102:	mov    QWORD PTR [rbp+0x0],rax
   20106:	call   1fcf0 <g_str_equal@plt+0x12a30>
   2010b:	mov    rsi,QWORD PTR [rip+0x261ece]        # 281fe0 <g_str_equal>
   20112:	mov    rdi,QWORD PTR [rip+0x261e97]        # 281fb0 <g_str_hash>
   20119:	lea    rcx,[rip+0xfffffffffffff210]        # 1f330 <g_str_equal@plt+0x12070>
   20120:	xor    edx,edx
   20122:	call   c850 <g_hash_table_new_full@plt>
   20127:	mov    rsi,rbx
   2012a:	mov    QWORD PTR [rbp+0x10],rax
   2012e:	mov    rdi,rbp
   20131:	call   1fb00 <g_str_equal@plt+0x12840>
   20136:	jmp    2014c <g_str_equal@plt+0x12e8c>
   20138:	nop    DWORD PTR [rax+rax*1+0x0]
   20140:	lea    rsi,[rbx+0x60]
   20144:	call   1fab0 <g_str_equal@plt+0x127f0>
   20149:	mov    rbx,rax
   2014c:	mov    rax,QWORD PTR [rbx+0x40]
   20150:	test   rax,rax
   20153:	je     2015a <g_str_equal@plt+0x12e9a>
   20155:	mov    rdi,rbp
   20158:	call   rax
   2015a:	mov    rdi,QWORD PTR [rbx+0x58]
   2015e:	test   rdi,rdi
   20161:	jne    20140 <g_str_equal@plt+0x12e80>
   20163:	add    rsp,0x18
   20167:	pop    rbx
   20168:	pop    rbp
   20169:	ret    
   2016a:	nop    WORD PTR [rax+rax*1+0x0]
   20170:	lea    r8,[rip+0x3d5d1]        # 5d748 <_fini@@Base+0xaff4>
   20177:	lea    rcx,[rip+0x3db32]        # 5dcb0 <_fini@@Base+0xb55c>
   2017e:	lea    rsi,[rip+0x3d4b3]        # 5d638 <_fini@@Base+0xaee4>
   20185:	mov    edx,0x177
   2018a:	xor    edi,edi
   2018c:	call   c6b0 <g_assertion_message_expr@plt>
   20191:	nop    DWORD PTR [rax+0x0]
   20198:	lea    r8,[rip+0x3d370]        # 5d50f <_fini@@Base+0xadbb>
   2019f:	lea    rcx,[rip+0x3db0a]        # 5dcb0 <_fini@@Base+0xb55c>
   201a6:	lea    rsi,[rip+0x3d48b]        # 5d638 <_fini@@Base+0xaee4>
   201ad:	mov    edx,0x178
   201b2:	xor    edi,edi
   201b4:	call   c6b0 <g_assertion_message_expr@plt>
   201b9:	nop    DWORD PTR [rax+0x0]
   201c0:	lea    r8,[rip+0x3d360]        # 5d527 <_fini@@Base+0xadd3>
   201c7:	lea    rcx,[rip+0x3dae2]        # 5dcb0 <_fini@@Base+0xb55c>
   201ce:	lea    rsi,[rip+0x3d463]        # 5d638 <_fini@@Base+0xaee4>
   201d5:	mov    edx,0x179
   201da:	xor    edi,edi
   201dc:	call   c6b0 <g_assertion_message_expr@plt>
   201e1:	nop    DWORD PTR [rax+0x0]
   201e8:	lea    r8,[rip+0x3d2e7]        # 5d4d6 <_fini@@Base+0xad82>
   201ef:	lea    rcx,[rip+0x3daba]        # 5dcb0 <_fini@@Base+0xb55c>
   201f6:	lea    rsi,[rip+0x3d43b]        # 5d638 <_fini@@Base+0xaee4>
   201fd:	mov    edx,0x174
   20202:	xor    edi,edi
   20204:	call   c6b0 <g_assertion_message_expr@plt>
   20209:	nop    DWORD PTR [rax+0x0]
   20210:	mov    rdi,rdx
   20213:	mov    QWORD PTR [rsp+0x8],rsi
   20218:	call   1fe00 <g_str_equal@plt+0x12b40>
   2021d:	mov    rsi,QWORD PTR [rsp+0x8]
   20222:	jmp    200d0 <g_str_equal@plt+0x12e10>
   20227:	nop    WORD PTR [rax+rax*1+0x0]
   20230:	push   rbp
   20231:	push   rbx
   20232:	sub    rsp,0x8
   20236:	test   rdi,rdi
   20239:	je     20278 <g_str_equal@plt+0x12fb8>
   2023b:	cmp    QWORD PTR [rdi+0x68],0x0
   20240:	mov    rbx,rdi
   20243:	je     202a0 <g_str_equal@plt+0x12fe0>
   20245:	mov    rdi,QWORD PTR [rbx+0x10]
   20249:	call   c500 <g_malloc@plt>
   2024e:	mov    rsi,QWORD PTR [rbx+0x10]
   20252:	mov    rdx,rbx
   20255:	mov    rdi,rax
   20258:	mov    rbp,rax
   2025b:	call   200b0 <g_str_equal@plt+0x12df0>
   20260:	mov    rax,QWORD PTR [rip+0x261d41]        # 281fa8 <g_free>
   20267:	mov    QWORD PTR [rbp+0x8],rax
   2026b:	add    rsp,0x8
   2026f:	mov    rax,rbp
   20272:	pop    rbx
   20273:	pop    rbp
   20274:	ret    
   20275:	nop    DWORD PTR [rax]
   20278:	lea    r8,[rip+0x3d257]        # 5d4d6 <_fini@@Base+0xad82>
   2027f:	lea    rcx,[rip+0x3d9da]        # 5dc60 <_fini@@Base+0xb50c>
   20286:	lea    rsi,[rip+0x3d3ab]        # 5d638 <_fini@@Base+0xaee4>
   2028d:	mov    edx,0x21e
   20292:	xor    edi,edi
   20294:	call   c6b0 <g_assertion_message_expr@plt>
   20299:	nop    DWORD PTR [rax+0x0]
   202a0:	call   1fe00 <g_str_equal@plt+0x12b40>
   202a5:	jmp    20245 <g_str_equal@plt+0x12f85>
   202a7:	nop    WORD PTR [rax+rax*1+0x0]
   202b0:	push   rbx
   202b1:	cmp    QWORD PTR [rdi+0x8],0x0
   202b6:	je     202cd <g_str_equal@plt+0x1300d>
   202b8:	call   1f120 <g_str_equal@plt+0x11e60>
   202bd:	mov    rbx,rax
   202c0:	mov    rdi,rax
   202c3:	call   1f260 <g_str_equal@plt+0x11fa0>
   202c8:	mov    rax,rbx
   202cb:	pop    rbx
   202cc:	ret    
   202cd:	lea    rcx,[rip+0x3da4c]        # 5dd20 <_fini@@Base+0xb5cc>
   202d4:	lea    rsi,[rip+0x3d35d]        # 5d638 <_fini@@Base+0xaee4>
   202db:	lea    rdi,[rip+0x3d261]        # 5d543 <_fini@@Base+0xadef>
   202e2:	mov    edx,0x91
   202e7:	call   c390 <__assert_fail@plt>
   202ec:	nop    DWORD PTR [rax+0x0]
   202f0:	jmp    202b0 <g_str_equal@plt+0x12ff0>
   202f2:	nop    DWORD PTR [rax+0x0]
   202f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   20300:	test   esi,esi
   20302:	jle    20340 <g_str_equal@plt+0x13080>
   20304:	lea    eax,[rsi-0x1]
   20307:	push   rbp
   20308:	push   rbx
   20309:	mov    rbx,rdi
   2030c:	lea    rdx,[rax+rax*2]
   20310:	sub    rsp,0x8
   20314:	lea    rax,[rax+rdx*4]
   20318:	lea    rbp,[rdi+rax*8+0x68]
   2031d:	nop    DWORD PTR [rax]
   20320:	mov    rdi,rbx
   20323:	add    rbx,0x68
   20327:	call   202b0 <g_str_equal@plt+0x12ff0>
   2032c:	cmp    rbx,rbp
   2032f:	jne    20320 <g_str_equal@plt+0x13060>
   20331:	add    rsp,0x8
   20335:	pop    rbx
   20336:	pop    rbp
   20337:	ret    
   20338:	nop    DWORD PTR [rax+rax*1+0x0]
   20340:	repz ret 
   20342:	nop    DWORD PTR [rax+0x0]
   20346:	nop    WORD PTR cs:[rax+rax*1+0x0]
   20350:	sub    rsp,0x8
   20354:	test   rdi,rdi
   20357:	je     20363 <g_str_equal@plt+0x130a3>
   20359:	call   1f0d0 <g_str_equal@plt+0x11e10>
   2035e:	test   rax,rax
   20361:	jne    2039a <g_str_equal@plt+0x130da>
   20363:	lea    r8,[rip+0x3d16c]        # 5d4d6 <_fini@@Base+0xad82>
   2036a:	lea    rcx,[rip+0x3d96f]        # 5dce0 <_fini@@Base+0xb58c>
   20371:	lea    rsi,[rip+0x3d2c0]        # 5d638 <_fini@@Base+0xaee4>
   20378:	mov    edx,0xd9
   2037d:	xor    edi,edi
   2037f:	call   c6b0 <g_assertion_message_expr@plt>
   20384:	nop    DWORD PTR [rax+0x0]
   20388:	mov    rdi,QWORD PTR [rax+0x58]
   2038c:	test   rdi,rdi
   2038f:	je     203b0 <g_str_equal@plt+0x130f0>
   20391:	lea    rsi,[rax+0x60]
   20395:	call   1fab0 <g_str_equal@plt+0x127f0>
   2039a:	mov    rdx,QWORD PTR [rax+0x10]
   2039e:	test   rdx,rdx
   203a1:	je     20388 <g_str_equal@plt+0x130c8>
   203a3:	mov    rax,rdx
   203a6:	add    rsp,0x8
   203aa:	ret    
   203ab:	nop    DWORD PTR [rax+rax*1+0x0]
   203b0:	xor    edx,edx
   203b2:	add    rsp,0x8
   203b6:	mov    rax,rdx
   203b9:	ret    
   203ba:	nop    WORD PTR [rax+rax*1+0x0]
   203c0:	push   rbx
   203c1:	xor    eax,eax
   203c3:	mov    rbx,rdi
   203c6:	sub    rsp,0x10
   203ca:	test   rdx,rdx
   203cd:	je     203e1 <g_str_equal@plt+0x13121>
   203cf:	mov    rdi,rdx
   203d2:	mov    QWORD PTR [rsp+0x8],rsi
   203d7:	call   1f0d0 <g_str_equal@plt+0x11e10>
   203dc:	mov    rsi,QWORD PTR [rsp+0x8]
   203e1:	add    rsp,0x10
   203e5:	mov    rdi,rbx
   203e8:	mov    rdx,rax
   203eb:	pop    rbx
   203ec:	jmp    200b0 <g_str_equal@plt+0x12df0>
   203f1:	nop    DWORD PTR [rax+rax*1+0x0]
   203f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   20400:	mov    rax,QWORD PTR [rdi+0x20]
   20404:	test   rax,rax
   20407:	je     20418 <g_str_equal@plt+0x13158>
   20409:	mov    rsi,rdi
   2040c:	mov    rdi,rax
   2040f:	jmp    1fbd0 <g_str_equal@plt+0x12910>
   20414:	nop    DWORD PTR [rax+0x0]
   20418:	repz ret 
   2041a:	nop    WORD PTR [rax+rax*1+0x0]
   20420:	test   rdi,rdi
   20423:	je     20440 <g_str_equal@plt+0x13180>
   20425:	sub    rsp,0x8
   20429:	call   1f0d0 <g_str_equal@plt+0x11e10>
   2042e:	add    rsp,0x8
   20432:	mov    rdi,rax
   20435:	jmp    20230 <g_str_equal@plt+0x12f70>
   2043a:	nop    WORD PTR [rax+rax*1+0x0]
   20440:	xor    eax,eax
   20442:	mov    rdi,rax
   20445:	jmp    20230 <g_str_equal@plt+0x12f70>
   2044a:	nop    WORD PTR [rax+rax*1+0x0]
   20450:	test   rdi,rdi
   20453:	push   r14
   20455:	push   r13
   20457:	push   r12
   20459:	push   rbp
   2045a:	push   rbx
   2045b:	je     204ff <g_str_equal@plt+0x1323f>
   20461:	mov    rbp,QWORD PTR [rdi]
   20464:	mov    rbx,rdi
   20467:	cmp    QWORD PTR [rbp+0x0],rsi
   2046b:	je     204e2 <g_str_equal@plt+0x13222>
   2046d:	test   rsi,rsi
   20470:	je     204ff <g_str_equal@plt+0x1323f>
   20476:	mov    rdi,rsi
   20479:	call   1f0d0 <g_str_equal@plt+0x11e10>
   2047e:	test   rax,rax
   20481:	mov    r13,rax
   20484:	je     204ff <g_str_equal@plt+0x1323f>
   20486:	mov    rax,QWORD PTR [rbp+0x68]
   2048a:	cmp    QWORD PTR [rax+0x8],0x0
   2048f:	je     204f0 <g_str_equal@plt+0x13230>
   20491:	mov    rsi,QWORD PTR [rip+0x264630]        # 284ac8 <stdout@@GLIBC_2.2.5+0x180>
   20498:	mov    rdi,r13
   2049b:	call   1fb60 <g_str_equal@plt+0x128a0>
   204a0:	test   al,al
   204a2:	je     204f0 <g_str_equal@plt+0x13230>
   204a4:	mov    rbp,QWORD PTR [rbx+0x8]
   204a8:	test   rbp,rbp
   204ab:	je     204ff <g_str_equal@plt+0x1323f>
   204ad:	xor    r14d,r14d
   204b0:	xor    ebx,ebx
   204b2:	nop    WORD PTR [rax+rax*1+0x0]
   204b8:	mov    r12,QWORD PTR [rbp+0x0]
   204bc:	mov    rsi,r13
   204bf:	mov    rdi,QWORD PTR [r12]
   204c3:	call   1fb60 <g_str_equal@plt+0x128a0>
   204c8:	test   al,al
   204ca:	je     204d3 <g_str_equal@plt+0x13213>
   204cc:	add    r14d,0x1
   204d0:	mov    rbx,r12
   204d3:	mov    rbp,QWORD PTR [rbp+0x8]
   204d7:	test   rbp,rbp
   204da:	jne    204b8 <g_str_equal@plt+0x131f8>
   204dc:	cmp    r14d,0x1
   204e0:	jg     204ff <g_str_equal@plt+0x1323f>
   204e2:	mov    rax,rbx
   204e5:	pop    rbx
   204e6:	pop    rbp
   204e7:	pop    r12
   204e9:	pop    r13
   204eb:	pop    r14
   204ed:	ret    
   204ee:	xchg   ax,ax
   204f0:	mov    rsi,r13
   204f3:	mov    rdi,rbp
   204f6:	call   1fb60 <g_str_equal@plt+0x128a0>
   204fb:	test   al,al
   204fd:	jne    204e2 <g_str_equal@plt+0x13222>
   204ff:	xor    ebx,ebx
   20501:	mov    rax,rbx
   20504:	pop    rbx
   20505:	pop    rbp
   20506:	pop    r12
   20508:	pop    r13
   2050a:	pop    r14
   2050c:	ret    
   2050d:	nop    DWORD PTR [rax]
   20510:	push   rbx
   20511:	sub    rsp,0x10
   20515:	mov    rbx,QWORD PTR [rsi+0x68]
   20519:	test   rbx,rbx
   2051c:	je     20568 <g_str_equal@plt+0x132a8>
   2051e:	cmp    BYTE PTR [rdx+0x10],0x0
   20522:	jne    2052a <g_str_equal@plt+0x1326a>
   20524:	cmp    BYTE PTR [rsi+0x50],0x0
   20528:	jne    2055d <g_str_equal@plt+0x1329d>
   2052a:	mov    rsi,QWORD PTR [rdx+0x8]
   2052e:	test   rsi,rsi
   20531:	jne    20548 <g_str_equal@plt+0x13288>
   20533:	mov    rsi,QWORD PTR [rdx+0x18]
   20537:	mov    rax,QWORD PTR [rdx]
   2053a:	add    rsp,0x10
   2053e:	mov    rdi,rbx
   20541:	pop    rbx
   20542:	jmp    rax
   20544:	nop    DWORD PTR [rax+0x0]
   20548:	mov    rdi,rbx
   2054b:	mov    QWORD PTR [rsp],rdx
   2054f:	call   20450 <g_str_equal@plt+0x13190>
   20554:	test   rax,rax
   20557:	mov    rdx,QWORD PTR [rsp]
   2055b:	jne    20533 <g_str_equal@plt+0x13273>
   2055d:	add    rsp,0x10
   20561:	pop    rbx
   20562:	ret    
   20563:	nop    DWORD PTR [rax+rax*1+0x0]
   20568:	mov    rdi,rsi
   2056b:	mov    QWORD PTR [rsp+0x8],rdx
   20570:	mov    QWORD PTR [rsp],rsi
   20574:	call   1fe00 <g_str_equal@plt+0x12b40>
   20579:	mov    rsi,QWORD PTR [rsp]
   2057d:	mov    rdx,QWORD PTR [rsp+0x8]
   20582:	mov    rbx,QWORD PTR [rsi+0x68]
   20586:	jmp    2051e <g_str_equal@plt+0x1325e>
   20588:	nop    DWORD PTR [rax+rax*1+0x0]
   20590:	test   rdi,rdi
   20593:	push   rbx
   20594:	je     205b0 <g_str_equal@plt+0x132f0>
   20596:	mov    rbx,rdi
   20599:	mov    rdi,QWORD PTR [rdi]
   2059c:	call   20450 <g_str_equal@plt+0x13190>
   205a1:	test   rax,rax
   205a4:	je     205b0 <g_str_equal@plt+0x132f0>
   205a6:	mov    rax,rbx
   205a9:	pop    rbx
   205aa:	ret    
   205ab:	nop    DWORD PTR [rax+rax*1+0x0]
   205b0:	xor    ebx,ebx
   205b2:	mov    rax,rbx
   205b5:	pop    rbx
   205b6:	ret    
   205b7:	nop    WORD PTR [rax+rax*1+0x0]
   205c0:	push   r15
   205c2:	push   r14
   205c4:	mov    r14,r8
   205c7:	push   r13
   205c9:	push   r12
   205cb:	mov    r13d,ecx
   205ce:	push   rbp
   205cf:	push   rbx
   205d0:	mov    rbp,rdi
   205d3:	mov    rbx,rsi
   205d6:	mov    r12,rdx
   205d9:	sub    rsp,0x38
   205dd:	mov    rax,QWORD PTR fs:0x28
   205e6:	mov    QWORD PTR [rsp+0x28],rax
   205eb:	xor    eax,eax
   205ed:	test   rdi,rdi
   205f0:	je     20690 <g_str_equal@plt+0x133d0>
   205f6:	mov    rdi,QWORD PTR [rdi]
   205f9:	mov    edx,DWORD PTR [rip+0x2644d9]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   205ff:	mov    rax,QWORD PTR [rdi]
   20602:	test   edx,edx
   20604:	mov    r8,QWORD PTR [rax]
   20607:	jne    20756 <g_str_equal@plt+0x13496>
   2060d:	mov    eax,0x10
   20612:	jmp    20622 <g_str_equal@plt+0x13362>
   20614:	nop    DWORD PTR [rax+0x0]
   20618:	add    rax,0x8
   2061c:	cmp    rax,0x30
   20620:	je     20658 <g_str_equal@plt+0x13398>
   20622:	mov    rdx,QWORD PTR [rdi+rax*1]
   20626:	cmp    rbx,rdx
   20629:	jne    20618 <g_str_equal@plt+0x13358>
   2062b:	mov    rsi,QWORD PTR [rsp+0x28]
   20630:	xor    rsi,QWORD PTR fs:0x28
   20639:	mov    rax,rbp
   2063c:	jne    20751 <g_str_equal@plt+0x13491>
   20642:	add    rsp,0x38
   20646:	pop    rbx
   20647:	pop    rbp
   20648:	pop    r12
   2064a:	pop    r13
   2064c:	pop    r14
   2064e:	pop    r15
   20650:	ret    
   20651:	nop    DWORD PTR [rax+0x0]
   20658:	mov    rsi,rbx
   2065b:	call   20450 <g_str_equal@plt+0x13190>
   20660:	test   rax,rax
   20663:	mov    edx,0x18
   20668:	je     206d0 <g_str_equal@plt+0x13410>
   2066a:	mov    rax,QWORD PTR [rbp+0x0]
   2066e:	mov    rcx,QWORD PTR [rax+rdx*1]
   20672:	mov    QWORD PTR [rax+rdx*1-0x8],rcx
   20677:	add    rdx,0x8
   2067b:	cmp    rdx,0x30
   2067f:	jne    2066a <g_str_equal@plt+0x133aa>
   20681:	mov    rax,QWORD PTR [rbp+0x0]
   20685:	mov    QWORD PTR [rax+0x28],rbx
   20689:	jmp    2062b <g_str_equal@plt+0x1336b>
   2068b:	nop    DWORD PTR [rax+rax*1+0x0]
   20690:	mov    eax,DWORD PTR [rip+0x264442]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   20696:	test   eax,eax
   20698:	je     2062b <g_str_equal@plt+0x1336b>
   2069a:	cmp    WORD PTR [rip+0x266988],0x0        # 28702a <stdout@@GLIBC_2.2.5+0x26e2>
   206a2:	je     2062b <g_str_equal@plt+0x1336b>
   206a4:	lea    r8,[rip+0x3cea5]        # 5d550 <_fini@@Base+0xadfc>
   206ab:	test   BYTE PTR [rip+0x2657ef],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   206b2:	jne    206fa <g_str_equal@plt+0x1343a>
   206b4:	test   rbp,rbp
   206b7:	je     2062b <g_str_equal@plt+0x1336b>
   206bd:	mov    rdi,QWORD PTR [rbp+0x0]
   206c1:	jmp    2060d <g_str_equal@plt+0x1334d>
   206c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   206d0:	mov    rdi,QWORD PTR [rip+0x264269]        # 284940 <stderr@@GLIBC_2.2.5>
   206d7:	push   rbx
   206d8:	lea    rdx,[rip+0x3d0d1]        # 5d7b0 <_fini@@Base+0xb05c>
   206df:	push   rbp
   206e0:	mov    r9,r14
   206e3:	mov    r8d,r13d
   206e6:	mov    rcx,r12
   206e9:	mov    esi,0x1
   206ee:	xor    eax,eax
   206f0:	call   c2b0 <__fprintf_chk@plt>
   206f5:	call   c270 <abort@plt>
   206fa:	lea    rdi,[rsp+0x10]
   206ff:	xor    esi,esi
   20701:	mov    QWORD PTR [rsp+0x8],r8
   20706:	call   c3e0 <gettimeofday@plt>
   2070b:	mov    rcx,QWORD PTR [rsp+0x18]
   20710:	mov    r15,QWORD PTR [rsp+0x10]
   20715:	mov    QWORD PTR [rsp],rcx
   20719:	call   c5b0 <getpid@plt>
   2071e:	sub    rsp,0x8
   20722:	lea    rdi,[rip+0x3d047]        # 5d770 <_fini@@Base+0xb01c>
   20729:	mov    esi,eax
   2072b:	push   r14
   2072d:	push   r13
   2072f:	mov    r9,rbx
   20732:	push   r12
   20734:	mov    r8,QWORD PTR [rsp+0x28]
   20739:	mov    rdx,r15
   2073c:	mov    rcx,QWORD PTR [rsp+0x20]
   20741:	xor    eax,eax
   20743:	call   431a0 <g_str_equal@plt+0x35ee0>
   20748:	add    rsp,0x20
   2074c:	jmp    206b4 <g_str_equal@plt+0x133f4>
   20751:	call   cd30 <__stack_chk_fail@plt>
   20756:	cmp    WORD PTR [rip+0x2668cc],0x0        # 28702a <stdout@@GLIBC_2.2.5+0x26e2>
   2075e:	jne    206ab <g_str_equal@plt+0x133eb>
   20764:	jmp    2060d <g_str_equal@plt+0x1334d>
   20769:	nop    DWORD PTR [rax+0x0]
   20770:	push   r15
   20772:	push   r14
   20774:	mov    r15,r8
   20777:	push   r13
   20779:	push   r12
   2077b:	mov    r13,rdx
   2077e:	push   rbp
   2077f:	push   rbx
   20780:	mov    r12,rdi
   20783:	mov    rbp,rsi
   20786:	mov    r14d,ecx
   20789:	sub    rsp,0x38
   2078d:	mov    rax,QWORD PTR fs:0x28
   20796:	mov    QWORD PTR [rsp+0x28],rax
   2079b:	xor    eax,eax
   2079d:	test   rdi,rdi
   207a0:	je     20848 <g_str_equal@plt+0x13588>
   207a6:	mov    edx,DWORD PTR [rip+0x26432c]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   207ac:	mov    rax,QWORD PTR [rdi]
   207af:	test   edx,edx
   207b1:	mov    r8,QWORD PTR [rax]
   207b4:	jne    20859 <g_str_equal@plt+0x13599>
   207ba:	lea    rbx,[r12+0x30]
   207bf:	lea    rdx,[r12+0x50]
   207c4:	jmp    207d9 <g_str_equal@plt+0x13519>
   207c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   207d0:	add    rbx,0x8
   207d4:	cmp    rbx,rdx
   207d7:	je     20810 <g_str_equal@plt+0x13550>
   207d9:	mov    rax,QWORD PTR [rbx]
   207dc:	cmp    rbp,rax
   207df:	jne    207d0 <g_str_equal@plt+0x13510>
   207e1:	mov    rax,r12
   207e4:	mov    rsi,QWORD PTR [rsp+0x28]
   207e9:	xor    rsi,QWORD PTR fs:0x28
   207f2:	jne    208db <g_str_equal@plt+0x1361b>
   207f8:	add    rsp,0x38
   207fc:	pop    rbx
   207fd:	pop    rbp
   207fe:	pop    r12
   20800:	pop    r13
   20802:	pop    r14
   20804:	pop    r15
   20806:	ret    
   20807:	nop    WORD PTR [rax+rax*1+0x0]
   20810:	mov    rsi,rbp
   20813:	mov    rdi,r12
   20816:	call   20450 <g_str_equal@plt+0x13190>
   2081b:	test   rax,rax
   2081e:	je     208e0 <g_str_equal@plt+0x13620>
   20824:	cmp    r12,rax
   20827:	jne    207e4 <g_str_equal@plt+0x13524>
   20829:	lea    rdx,[r12+0x38]
   2082e:	mov    rcx,QWORD PTR [rdx]
   20831:	add    rdx,0x8
   20835:	mov    QWORD PTR [rdx-0x10],rcx
   20839:	cmp    rbx,rdx
   2083c:	jne    2082e <g_str_equal@plt+0x1356e>
   2083e:	mov    QWORD PTR [r12+0x48],rbp
   20843:	jmp    207e4 <g_str_equal@plt+0x13524>
   20845:	nop    DWORD PTR [rax]
   20848:	mov    eax,DWORD PTR [rip+0x26428a]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   2084e:	lea    r8,[rip+0x3ccfb]        # 5d550 <_fini@@Base+0xadfc>
   20855:	test   eax,eax
   20857:	je     20878 <g_str_equal@plt+0x135b8>
   20859:	cmp    WORD PTR [rip+0x2667c7],0x0        # 287028 <stdout@@GLIBC_2.2.5+0x26e0>
   20861:	je     2086c <g_str_equal@plt+0x135ac>
   20863:	test   BYTE PTR [rip+0x265637],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   2086a:	jne    20887 <g_str_equal@plt+0x135c7>
   2086c:	test   r12,r12
   2086f:	jne    207ba <g_str_equal@plt+0x134fa>
   20875:	nop    DWORD PTR [rax]
   20878:	mov    rsi,rbp
   2087b:	xor    edi,edi
   2087d:	call   20450 <g_str_equal@plt+0x13190>
   20882:	jmp    207e4 <g_str_equal@plt+0x13524>
   20887:	lea    rdi,[rsp+0x10]
   2088c:	xor    esi,esi
   2088e:	mov    QWORD PTR [rsp+0x8],r8
   20893:	call   c3e0 <gettimeofday@plt>
   20898:	mov    rcx,QWORD PTR [rsp+0x18]
   2089d:	mov    rbx,QWORD PTR [rsp+0x10]
   208a2:	mov    QWORD PTR [rsp],rcx
   208a6:	call   c5b0 <getpid@plt>
   208ab:	sub    rsp,0x8
   208af:	lea    rdi,[rip+0x3cf32]        # 5d7e8 <_fini@@Base+0xb094>
   208b6:	mov    esi,eax
   208b8:	push   r15
   208ba:	push   r14
   208bc:	mov    r9,rbp
   208bf:	push   r13
   208c1:	mov    r8,QWORD PTR [rsp+0x28]
   208c6:	mov    rdx,rbx
   208c9:	mov    rcx,QWORD PTR [rsp+0x20]
   208ce:	xor    eax,eax
   208d0:	call   431a0 <g_str_equal@plt+0x35ee0>
   208d5:	add    rsp,0x20
   208d9:	jmp    2086c <g_str_equal@plt+0x135ac>
   208db:	call   cd30 <__stack_chk_fail@plt>
   208e0:	mov    rdi,QWORD PTR [rip+0x264059]        # 284940 <stderr@@GLIBC_2.2.5>
   208e7:	push   rbp
   208e8:	lea    rdx,[rip+0x3cec1]        # 5d7b0 <_fini@@Base+0xb05c>
   208ef:	push   r12
   208f1:	mov    r9,r15
   208f4:	mov    r8d,r14d
   208f7:	mov    rcx,r13
   208fa:	mov    esi,0x1
   208ff:	call   c2b0 <__fprintf_chk@plt>
   20904:	call   c270 <abort@plt>
   20909:	nop    DWORD PTR [rax+0x0]
   20910:	mov    rax,QWORD PTR [rdi]
   20913:	mov    rax,QWORD PTR [rax]
   20916:	mov    rax,QWORD PTR [rax]
   20919:	ret    
   2091a:	nop    WORD PTR [rax+rax*1+0x0]
   20920:	mov    rax,QWORD PTR [rdi]
   20923:	ret    
   20924:	xchg   ax,ax
   20926:	nop    WORD PTR cs:[rax+rax*1+0x0]
   20930:	mov    rax,QWORD PTR [rdi]
   20933:	movzx  eax,BYTE PTR [rax+0x50]
   20937:	ret    
   20938:	nop    DWORD PTR [rax+rax*1+0x0]
   20940:	mov    rax,QWORD PTR [rdi]
   20943:	mov    rax,QWORD PTR [rax]
   20946:	ret    
   20947:	nop    WORD PTR [rax+rax*1+0x0]
   20950:	test   rdi,rdi
   20953:	je     209b0 <g_str_equal@plt+0x136f0>
   20955:	sub    rsp,0x18
   20959:	call   1f0d0 <g_str_equal@plt+0x11e10>
   2095e:	test   rax,rax
   20961:	je     209a0 <g_str_equal@plt+0x136e0>
   20963:	mov    rdx,QWORD PTR [rax+0x68]
   20967:	test   rdx,rdx
   2096a:	je     20978 <g_str_equal@plt+0x136b8>
   2096c:	mov    rax,rdx
   2096f:	add    rsp,0x18
   20973:	ret    
   20974:	nop    DWORD PTR [rax+0x0]
   20978:	mov    rdi,rax
   2097b:	mov    QWORD PTR [rsp+0x8],rax
   20980:	call   1fe00 <g_str_equal@plt+0x12b40>
   20985:	mov    rax,QWORD PTR [rsp+0x8]
   2098a:	mov    rdx,QWORD PTR [rax+0x68]
   2098e:	add    rsp,0x18
   20992:	mov    rax,rdx
   20995:	ret    
   20996:	nop    WORD PTR cs:[rax+rax*1+0x0]
   209a0:	xor    edx,edx
   209a2:	add    rsp,0x18
   209a6:	mov    rax,rdx
   209a9:	ret    
   209aa:	nop    WORD PTR [rax+rax*1+0x0]
   209b0:	xor    edx,edx
   209b2:	mov    rax,rdx
   209b5:	ret    
   209b6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   209c0:	push   rbx
   209c1:	mov    rax,QWORD PTR [rdi]
   209c4:	mov    rdi,QWORD PTR [rax+0x58]
   209c8:	lea    rsi,[rax+0x60]
   209cc:	call   1fab0 <g_str_equal@plt+0x127f0>
   209d1:	test   rax,rax
   209d4:	je     20a00 <g_str_equal@plt+0x13740>
   209d6:	mov    rbx,rax
   209d9:	mov    rax,QWORD PTR [rax+0x68]
   209dd:	test   rax,rax
   209e0:	je     209e8 <g_str_equal@plt+0x13728>
   209e2:	pop    rbx
   209e3:	ret    
   209e4:	nop    DWORD PTR [rax+0x0]
   209e8:	mov    rdi,rbx
   209eb:	call   1fe00 <g_str_equal@plt+0x12b40>
   209f0:	mov    rax,QWORD PTR [rbx+0x68]
   209f4:	pop    rbx
   209f5:	ret    
   209f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   20a00:	xor    eax,eax
   20a02:	pop    rbx
   20a03:	ret    
   20a04:	xchg   ax,ax
   20a06:	nop    WORD PTR cs:[rax+rax*1+0x0]
   20a10:	sub    rsp,0x38
   20a14:	mov    BYTE PTR [rip+0x2640a5],0x1        # 284ac0 <stdout@@GLIBC_2.2.5+0x178>
   20a1b:	mov    QWORD PTR [rsp],rdi
   20a1f:	mov    rdi,QWORD PTR [rip+0x264092]        # 284ab8 <stdout@@GLIBC_2.2.5+0x170>
   20a26:	mov    rax,QWORD PTR fs:0x28
   20a2f:	mov    QWORD PTR [rsp+0x28],rax
   20a34:	xor    eax,eax
   20a36:	mov    QWORD PTR [rsp+0x8],rsi
   20a3b:	mov    BYTE PTR [rsp+0x10],dl
   20a3f:	test   rdi,rdi
   20a42:	mov    QWORD PTR [rsp+0x18],rcx
   20a47:	je     20a78 <g_str_equal@plt+0x137b8>
   20a49:	lea    rsi,[rip+0xfffffffffffffac0]        # 20510 <g_str_equal@plt+0x13250>
   20a50:	mov    rdx,rsp
   20a53:	call   c880 <g_hash_table_foreach@plt>
   20a58:	mov    rax,QWORD PTR [rsp+0x28]
   20a5d:	xor    rax,QWORD PTR fs:0x28
   20a66:	mov    BYTE PTR [rip+0x264053],0x0        # 284ac0 <stdout@@GLIBC_2.2.5+0x178>
   20a6d:	jne    20a97 <g_str_equal@plt+0x137d7>
   20a6f:	add    rsp,0x38
   20a73:	ret    
   20a74:	nop    DWORD PTR [rax+0x0]
   20a78:	mov    rdi,QWORD PTR [rip+0x261531]        # 281fb0 <g_str_hash>
   20a7f:	mov    rsi,QWORD PTR [rip+0x26155a]        # 281fe0 <g_str_equal>
   20a86:	call   c810 <g_hash_table_new@plt>
   20a8b:	mov    rdi,rax
   20a8e:	mov    QWORD PTR [rip+0x264023],rax        # 284ab8 <stdout@@GLIBC_2.2.5+0x170>
   20a95:	jmp    20a49 <g_str_equal@plt+0x13789>
   20a97:	call   cd30 <__stack_chk_fail@plt>
   20a9c:	nop    DWORD PTR [rax+0x0]
   20aa0:	xor    ecx,ecx
   20aa2:	jmp    1f390 <g_str_equal@plt+0x120d0>
   20aa7:	nop    WORD PTR [rax+rax*1+0x0]
   20ab0:	mov    ecx,0x1
   20ab5:	jmp    1f390 <g_str_equal@plt+0x120d0>
   20aba:	nop    WORD PTR [rax+rax*1+0x0]
   20ac0:	sub    rsp,0x18
   20ac4:	movzx  edx,sil
   20ac8:	mov    rsi,rdi
   20acb:	lea    rdi,[rip+0xffffffffffffe99e]        # 1f470 <g_str_equal@plt+0x121b0>
   20ad2:	mov    rcx,rsp
   20ad5:	mov    QWORD PTR [rsp],0x0
   20add:	mov    rax,QWORD PTR fs:0x28
   20ae6:	mov    QWORD PTR [rsp+0x8],rax
   20aeb:	xor    eax,eax
   20aed:	call   20a10 <g_str_equal@plt+0x13750>
   20af2:	mov    rdx,QWORD PTR [rsp+0x8]
   20af7:	xor    rdx,QWORD PTR fs:0x28
   20b00:	mov    rax,QWORD PTR [rsp]
   20b04:	jne    20b0b <g_str_equal@plt+0x1384b>
   20b06:	add    rsp,0x18
   20b0a:	ret    
   20b0b:	call   cd30 <__stack_chk_fail@plt>
   20b10:	sub    rsp,0x18
   20b14:	movzx  edx,sil
   20b18:	mov    rsi,rdi
   20b1b:	lea    rdi,[rip+0xffffffffffffe94e]        # 1f470 <g_str_equal@plt+0x121b0>
   20b22:	mov    rcx,rsp
   20b25:	mov    QWORD PTR [rsp],0x0
   20b2d:	mov    rax,QWORD PTR fs:0x28
   20b36:	mov    QWORD PTR [rsp+0x8],rax
   20b3b:	xor    eax,eax
   20b3d:	call   20a10 <g_str_equal@plt+0x13750>
   20b42:	mov    rdi,QWORD PTR [rsp]
   20b46:	lea    rsi,[rip+0xffffffffffffe943]        # 1f490 <g_str_equal@plt+0x121d0>
   20b4d:	call   c9c0 <g_slist_sort@plt>
   20b52:	mov    rdx,QWORD PTR [rsp+0x8]
   20b57:	xor    rdx,QWORD PTR fs:0x28
   20b60:	jne    20b67 <g_str_equal@plt+0x138a7>
   20b62:	add    rsp,0x18
   20b66:	ret    
   20b67:	call   cd30 <__stack_chk_fail@plt>
   20b6c:	nop    DWORD PTR [rax+0x0]
   20b70:	test   rdi,rdi
   20b73:	je     20b80 <g_str_equal@plt+0x138c0>
   20b75:	jmp    1fcf0 <g_str_equal@plt+0x12a30>
   20b7a:	nop    WORD PTR [rax+rax*1+0x0]
   20b80:	repz ret 
   20b82:	nop    DWORD PTR [rax+0x0]
   20b86:	nop    WORD PTR cs:[rax+rax*1+0x0]
   20b90:	push   r15
   20b92:	push   r14
   20b94:	push   r13
   20b96:	push   r12
   20b98:	push   rbp
   20b99:	push   rbx
   20b9a:	sub    rsp,0x48
   20b9e:	mov    rax,QWORD PTR fs:0x28
   20ba7:	mov    QWORD PTR [rsp+0x38],rax
   20bac:	xor    eax,eax
   20bae:	test   rdi,rdi
   20bb1:	je     20bc4 <g_str_equal@plt+0x13904>
   20bb3:	mov    edx,DWORD PTR [rdi+0x18]
   20bb6:	mov    rbx,rdi
   20bb9:	test   edx,edx
   20bbb:	je     20bf0 <g_str_equal@plt+0x13930>
   20bbd:	lock sub DWORD PTR [rdi+0x18],0x1
   20bc2:	je     20c18 <g_str_equal@plt+0x13958>
   20bc4:	mov    rax,QWORD PTR [rsp+0x38]
   20bc9:	xor    rax,QWORD PTR fs:0x28
   20bd2:	jne    20cff <g_str_equal@plt+0x13a3f>
   20bd8:	add    rsp,0x48
   20bdc:	pop    rbx
   20bdd:	pop    rbp
   20bde:	pop    r12
   20be0:	pop    r13
   20be2:	pop    r14
   20be4:	pop    r15
   20be6:	ret    
   20be7:	nop    WORD PTR [rax+rax*1+0x0]
   20bf0:	lea    r8,[rip+0x3c960]        # 5d557 <_fini@@Base+0xae03>
   20bf7:	lea    rcx,[rip+0x3d012]        # 5dc10 <_fini@@Base+0xb4bc>
   20bfe:	lea    rsi,[rip+0x3ca33]        # 5d638 <_fini@@Base+0xaee4>
   20c05:	mov    edx,0x3ce
   20c0a:	xor    edi,edi
   20c0c:	call   c6b0 <g_assertion_message_expr@plt>
   20c11:	nop    DWORD PTR [rax+0x0]
   20c18:	mov    rax,QWORD PTR [rdi]
   20c1b:	lea    r12,[rsp+0x10]
   20c20:	lea    r15,[rsp+0x8]
   20c25:	mov    r14,rsp
   20c28:	mov    rbp,QWORD PTR [rax]
   20c2b:	mov    rsi,QWORD PTR [rbx+0x10]
   20c2f:	mov    rdi,r12
   20c32:	call   c830 <g_hash_table_iter_init@plt>
   20c37:	jmp    20c56 <g_str_equal@plt+0x13996>
   20c39:	nop    DWORD PTR [rax+0x0]
   20c40:	mov    r13,QWORD PTR [rsp+0x8]
   20c45:	mov    rax,QWORD PTR [r13+0x30]
   20c49:	test   rax,rax
   20c4c:	jne    20cc8 <g_str_equal@plt+0x13a08>
   20c4e:	mov    rdi,r12
   20c51:	call   c990 <g_hash_table_iter_remove@plt>
   20c56:	mov    rdx,r15
   20c59:	mov    rsi,r14
   20c5c:	mov    rdi,r12
   20c5f:	call   c820 <g_hash_table_iter_next@plt>
   20c64:	test   eax,eax
   20c66:	jne    20c40 <g_str_equal@plt+0x13980>
   20c68:	mov    rdi,QWORD PTR [rbx+0x10]
   20c6c:	call   cfa0 <g_hash_table_unref@plt>
   20c71:	jmp    20c84 <g_str_equal@plt+0x139c4>
   20c73:	nop    DWORD PTR [rax+rax*1+0x0]
   20c78:	lea    rsi,[rbp+0x60]
   20c7c:	call   1fab0 <g_str_equal@plt+0x127f0>
   20c81:	mov    rbp,rax
   20c84:	mov    rax,QWORD PTR [rbp+0x48]
   20c88:	test   rax,rax
   20c8b:	je     20c92 <g_str_equal@plt+0x139d2>
   20c8d:	mov    rdi,rbx
   20c90:	call   rax
   20c92:	mov    rdi,QWORD PTR [rbp+0x58]
   20c96:	test   rdi,rdi
   20c99:	jne    20c78 <g_str_equal@plt+0x139b8>
   20c9b:	mov    eax,DWORD PTR [rbx+0x18]
   20c9e:	test   eax,eax
   20ca0:	je     20ce8 <g_str_equal@plt+0x13a28>
   20ca2:	lea    r8,[rip+0x3c8bb]        # 5d564 <_fini@@Base+0xae10>
   20ca9:	lea    rcx,[rip+0x3cf50]        # 5dc00 <_fini@@Base+0xb4ac>
   20cb0:	lea    rsi,[rip+0x3c981]        # 5d638 <_fini@@Base+0xaee4>
   20cb7:	mov    edx,0x214
   20cbc:	xor    edi,edi
   20cbe:	call   c6b0 <g_assertion_message_expr@plt>
   20cc3:	nop    DWORD PTR [rax+rax*1+0x0]
   20cc8:	mov    rdx,QWORD PTR [r13+0x38]
   20ccc:	mov    rsi,QWORD PTR [r13+0x0]
   20cd0:	mov    rdi,rbx
   20cd3:	call   rax
   20cd5:	mov    QWORD PTR [r13+0x30],0x0
   20cdd:	jmp    20c2b <g_str_equal@plt+0x1396b>
   20ce2:	nop    WORD PTR [rax+rax*1+0x0]
   20ce8:	mov    rax,QWORD PTR [rbx+0x8]
   20cec:	test   rax,rax
   20cef:	je     20bc4 <g_str_equal@plt+0x13904>
   20cf5:	mov    rdi,rbx
   20cf8:	call   rax
   20cfa:	jmp    20bc4 <g_str_equal@plt+0x13904>
   20cff:	call   cd30 <__stack_chk_fail@plt>
   20d04:	xchg   ax,ax
   20d06:	nop    WORD PTR cs:[rax+rax*1+0x0]
   20d10:	mov    rax,QWORD PTR [rdx]
   20d13:	push   rbx
   20d14:	mov    rbx,rdx
   20d17:	mov    rax,QWORD PTR [rax+0x50]
   20d1b:	test   rax,rax
   20d1e:	je     20d25 <g_str_equal@plt+0x13a65>
   20d20:	mov    rdi,rdx
   20d23:	call   rax
   20d25:	mov    QWORD PTR [rbx+0x20],0x0
   20d2d:	mov    rdi,rbx
   20d30:	pop    rbx
   20d31:	jmp    20b90 <g_str_equal@plt+0x138d0>
   20d36:	nop    WORD PTR cs:[rax+rax*1+0x0]
   20d40:	test   BYTE PTR [rdx+0x10],0x1
   20d44:	je     20d70 <g_str_equal@plt+0x13ab0>
   20d46:	mov    rax,QWORD PTR [rdx]
   20d49:	mov    rdi,QWORD PTR [rax]
   20d4c:	test   rdi,rdi
   20d4f:	je     20d70 <g_str_equal@plt+0x13ab0>
   20d51:	sub    rsp,0x18
   20d55:	mov    QWORD PTR [rsp+0x8],rdx
   20d5a:	call   20b90 <g_str_equal@plt+0x138d0>
   20d5f:	mov    rdx,QWORD PTR [rsp+0x8]
   20d64:	add    rsp,0x18
   20d68:	mov    rdi,rdx
   20d6b:	jmp    d2b0 <g_free@plt>
   20d70:	mov    rdi,rdx
   20d73:	jmp    d2b0 <g_free@plt>
   20d78:	nop    DWORD PTR [rax+rax*1+0x0]
   20d80:	push   rbp
   20d81:	push   rbx
   20d82:	mov    rbp,rsi
   20d85:	mov    rbx,rdi
   20d88:	lea    rdi,[rdi+0x8]
   20d8c:	sub    rsp,0x8
   20d90:	mov    rsi,QWORD PTR [rsi+0x10]
   20d94:	call   c830 <g_hash_table_iter_init@plt>
   20d99:	mov    rax,QWORD PTR [rbp+0x0]
   20d9d:	mov    QWORD PTR [rbx],rax
   20da0:	add    rsp,0x8
   20da4:	pop    rbx
   20da5:	pop    rbp
   20da6:	ret    
   20da7:	nop    WORD PTR [rax+rax*1+0x0]
   20db0:	push   r13
   20db2:	push   r12
   20db4:	push   rbp
   20db5:	push   rbx
   20db6:	lea    rbp,[rdi+0x8]
   20dba:	mov    rbx,rdi
   20dbd:	sub    rsp,0x28
   20dc1:	mov    rax,QWORD PTR fs:0x28
   20dca:	mov    QWORD PTR [rsp+0x18],rax
   20dcf:	xor    eax,eax
   20dd1:	lea    r13,[rsp+0x10]
   20dd6:	lea    r12,[rsp+0x8]
   20ddb:	jmp    20dff <g_str_equal@plt+0x13b3f>
   20ddd:	nop    DWORD PTR [rax]
   20de0:	mov    rax,QWORD PTR [rbx]
   20de3:	test   rax,rax
   20de6:	je     20e38 <g_str_equal@plt+0x13b78>
   20de8:	mov    rsi,QWORD PTR [rax+0x58]
   20dec:	mov    rdi,rbp
   20def:	call   c830 <g_hash_table_iter_init@plt>
   20df4:	mov    rdi,QWORD PTR [rbx]
   20df7:	call   209c0 <g_str_equal@plt+0x13700>
   20dfc:	mov    QWORD PTR [rbx],rax
   20dff:	mov    rdx,r13
   20e02:	mov    rsi,r12
   20e05:	mov    rdi,rbp
   20e08:	call   c820 <g_hash_table_iter_next@plt>
   20e0d:	test   eax,eax
   20e0f:	je     20de0 <g_str_equal@plt+0x13b20>
   20e11:	mov    rax,QWORD PTR [rsp+0x10]
   20e16:	mov    rcx,QWORD PTR [rsp+0x18]
   20e1b:	xor    rcx,QWORD PTR fs:0x28
   20e24:	jne    20e3c <g_str_equal@plt+0x13b7c>
   20e26:	add    rsp,0x28
   20e2a:	pop    rbx
   20e2b:	pop    rbp
   20e2c:	pop    r12
   20e2e:	pop    r13
   20e30:	ret    
   20e31:	nop    DWORD PTR [rax+0x0]
   20e38:	xor    eax,eax
   20e3a:	jmp    20e16 <g_str_equal@plt+0x13b56>
   20e3c:	call   cd30 <__stack_chk_fail@plt>
   20e41:	nop    DWORD PTR [rax+rax*1+0x0]
   20e46:	nop    WORD PTR cs:[rax+rax*1+0x0]
   20e50:	push   rbp
   20e51:	push   rbx
   20e52:	mov    rbp,rsi
   20e55:	mov    rbx,rdi
   20e58:	lea    rdi,[rdi+0x8]
   20e5c:	sub    rsp,0x8
   20e60:	mov    rsi,QWORD PTR [rsi+0x58]
   20e64:	call   c830 <g_hash_table_iter_init@plt>
   20e69:	mov    QWORD PTR [rbx],rbp
   20e6c:	add    rsp,0x8
   20e70:	pop    rbx
   20e71:	pop    rbp
   20e72:	ret    
   20e73:	nop    DWORD PTR [rax]
   20e76:	nop    WORD PTR cs:[rax+rax*1+0x0]
   20e80:	push   r13
   20e82:	push   r12
   20e84:	mov    r13,rdx
   20e87:	push   rbp
   20e88:	push   rbx
   20e89:	mov    rbp,rdi
   20e8c:	mov    r12,rsi
   20e8f:	sub    rsp,0x8
   20e93:	call   209c0 <g_str_equal@plt+0x13700>
   20e98:	test   rax,rax
   20e9b:	jne    20ec0 <g_str_equal@plt+0x13c00>
   20e9d:	mov    rdi,QWORD PTR [rbp+0x58]
   20ea1:	mov    rsi,r12
   20ea4:	call   cdb0 <g_hash_table_lookup@plt>
   20ea9:	test   rax,rax
   20eac:	mov    rbx,rax
   20eaf:	je     20ee8 <g_str_equal@plt+0x13c28>
   20eb1:	add    rsp,0x8
   20eb5:	mov    rax,rbx
   20eb8:	pop    rbx
   20eb9:	pop    rbp
   20eba:	pop    r12
   20ebc:	pop    r13
   20ebe:	ret    
   20ebf:	nop
   20ec0:	xor    edx,edx
   20ec2:	mov    rsi,r12
   20ec5:	mov    rdi,rax
   20ec8:	call   20e80 <g_str_equal@plt+0x13bc0>
   20ecd:	test   rax,rax
   20ed0:	mov    rbx,rax
   20ed3:	je     20e9d <g_str_equal@plt+0x13bdd>
   20ed5:	add    rsp,0x8
   20ed9:	mov    rax,rbx
   20edc:	pop    rbx
   20edd:	pop    rbp
   20ede:	pop    r12
   20ee0:	pop    r13
   20ee2:	ret    
   20ee3:	nop    DWORD PTR [rax+rax*1+0x0]
   20ee8:	lea    r8,[rip+0x3c683]        # 5d572 <_fini@@Base+0xae1e>
   20eef:	lea    rcx,[rip+0x3cc8a]        # 5db80 <_fini@@Base+0xb42c>
   20ef6:	lea    rsi,[rip+0x3c73b]        # 5d638 <_fini@@Base+0xaee4>
   20efd:	mov    r9,r12
   20f00:	mov    rdi,r13
   20f03:	xor    eax,eax
   20f05:	mov    edx,0x46a
   20f0a:	call   3a090 <g_str_equal@plt+0x2cdd0>
   20f0f:	add    rsp,0x8
   20f13:	mov    rax,rbx
   20f16:	pop    rbx
   20f17:	pop    rbp
   20f18:	pop    r12
   20f1a:	pop    r13
   20f1c:	ret    
   20f1d:	nop    DWORD PTR [rax]
   20f20:	push   r15
   20f22:	push   r14
   20f24:	mov    r14,rcx
   20f27:	push   r13
   20f29:	push   r12
   20f2b:	mov    r13,r8
   20f2e:	push   rbp
   20f2f:	push   rbx
   20f30:	mov    rbp,rdi
   20f33:	mov    rbx,rsi
   20f36:	mov    r12,r9
   20f39:	sub    rsp,0x18
   20f3d:	mov    QWORD PTR [rsp+0x8],rdx
   20f42:	xor    edx,edx
   20f44:	call   20e80 <g_str_equal@plt+0x13bc0>
   20f49:	test   rax,rax
   20f4c:	jne    20fb8 <g_str_equal@plt+0x13cf8>
   20f4e:	mov    edi,0x40
   20f53:	call   ce00 <g_malloc0@plt>
   20f58:	mov    rdi,rbx
   20f5b:	mov    r15,rax
   20f5e:	call   c370 <g_strdup@plt>
   20f63:	mov    rdi,QWORD PTR [rsp+0x8]
   20f68:	mov    QWORD PTR [r15],rax
   20f6b:	call   c370 <g_strdup@plt>
   20f70:	mov    QWORD PTR [r15+0x8],rax
   20f74:	mov    rax,QWORD PTR [rsp+0x50]
   20f79:	mov    rdi,rbx
   20f7c:	mov    QWORD PTR [r15+0x18],r14
   20f80:	mov    QWORD PTR [r15+0x20],r13
   20f84:	mov    QWORD PTR [r15+0x30],r12
   20f88:	mov    QWORD PTR [r15+0x38],rax
   20f8c:	call   c370 <g_strdup@plt>
   20f91:	mov    rdi,QWORD PTR [rbp+0x58]
   20f95:	mov    rdx,r15
   20f98:	mov    rsi,rax
   20f9b:	call   c420 <g_hash_table_insert@plt>
   20fa0:	add    rsp,0x18
   20fa4:	mov    rax,r15
   20fa7:	pop    rbx
   20fa8:	pop    rbp
   20fa9:	pop    r12
   20fab:	pop    r13
   20fad:	pop    r14
   20faf:	pop    r15
   20fb1:	ret    
   20fb2:	nop    WORD PTR [rax+rax*1+0x0]
   20fb8:	mov    rax,QWORD PTR [rbp+0x0]
   20fbc:	sub    rsp,0x8
   20fc0:	lea    r8,[rip+0x3c869]        # 5d830 <_fini@@Base+0xb0dc>
   20fc7:	lea    rcx,[rip+0x3cbf2]        # 5dbc0 <_fini@@Base+0xb46c>
   20fce:	lea    rsi,[rip+0x3c663]        # 5d638 <_fini@@Base+0xaee4>
   20fd5:	mov    edx,0x418
   20fda:	mov    r9,rbx
   20fdd:	xor    r15d,r15d
   20fe0:	push   QWORD PTR [rax]
   20fe2:	mov    rdi,QWORD PTR [rsp+0x68]
   20fe7:	xor    eax,eax
   20fe9:	call   3a090 <g_str_equal@plt+0x2cdd0>
   20fee:	pop    rax
   20fef:	pop    rdx
   20ff0:	jmp    20fa0 <g_str_equal@plt+0x13ce0>
   20ff2:	nop    DWORD PTR [rax+0x0]
   20ff6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   21000:	push   r13
   21002:	push   r12
   21004:	mov    r12,rdi
   21007:	push   rbp
   21008:	push   rbx
   21009:	mov    r13,rdx
   2100c:	xor    edx,edx
   2100e:	mov    rbp,rsi
   21011:	sub    rsp,0x8
   21015:	mov    rdi,QWORD PTR [rdi]
   21018:	call   20e80 <g_str_equal@plt+0x13bc0>
   2101d:	test   rax,rax
   21020:	mov    rbx,rax
   21023:	je     21038 <g_str_equal@plt+0x13d78>
   21025:	add    rsp,0x8
   21029:	mov    rax,rbx
   2102c:	pop    rbx
   2102d:	pop    rbp
   2102e:	pop    r12
   21030:	pop    r13
   21032:	ret    
   21033:	nop    DWORD PTR [rax+rax*1+0x0]
   21038:	mov    rdi,QWORD PTR [r12+0x10]
   2103d:	mov    rsi,rbp
   21040:	call   cdb0 <g_hash_table_lookup@plt>
   21045:	test   rax,rax
   21048:	mov    rbx,rax
   2104b:	jne    21025 <g_str_equal@plt+0x13d65>
   2104d:	lea    r8,[rip+0x3c51e]        # 5d572 <_fini@@Base+0xae1e>
   21054:	lea    rcx,[rip+0x3cb45]        # 5dba0 <_fini@@Base+0xb44c>
   2105b:	lea    rsi,[rip+0x3c5d6]        # 5d638 <_fini@@Base+0xaee4>
   21062:	mov    r9,rbp
   21065:	mov    edx,0x43b
   2106a:	mov    rdi,r13
   2106d:	xor    eax,eax
   2106f:	call   3a090 <g_str_equal@plt+0x2cdd0>
   21074:	jmp    21025 <g_str_equal@plt+0x13d65>
   21076:	nop    WORD PTR cs:[rax+rax*1+0x0]
   21080:	push   r15
   21082:	push   r14
   21084:	mov    r15,rsi
   21087:	push   r13
   21089:	push   r12
   2108b:	mov    r13,rcx
   2108e:	push   rbp
   2108f:	push   rbx
   21090:	mov    rbx,rdi
   21093:	mov    rdi,rsi
   21096:	mov    r12,r8
   21099:	mov    rbp,r9
   2109c:	sub    rsp,0x28
   210a0:	mov    QWORD PTR [rsp+0x8],rdx
   210a5:	call   c720 <strlen@plt>
   210aa:	cmp    rax,0x2
   210ae:	jbe    210c2 <g_str_equal@plt+0x13e02>
   210b0:	cmp    DWORD PTR [r15+rax*1-0x3],0x5d2a5b
   210b9:	mov    r14,rax
   210bc:	je     21170 <g_str_equal@plt+0x13eb0>
   210c2:	xor    edx,edx
   210c4:	mov    rsi,r15
   210c7:	mov    rdi,rbx
   210ca:	call   21000 <g_str_equal@plt+0x13d40>
   210cf:	test   rax,rax
   210d2:	jne    21130 <g_str_equal@plt+0x13e70>
   210d4:	mov    edi,0x40
   210d9:	call   ce00 <g_malloc0@plt>
   210de:	mov    rdi,r15
   210e1:	mov    r14,rax
   210e4:	call   c370 <g_strdup@plt>
   210e9:	mov    rdi,QWORD PTR [rsp+0x8]
   210ee:	mov    QWORD PTR [r14],rax
   210f1:	call   c370 <g_strdup@plt>
   210f6:	mov    QWORD PTR [r14+0x8],rax
   210fa:	mov    rax,QWORD PTR [rsp+0x60]
   210ff:	mov    rdx,r14
   21102:	mov    rdi,QWORD PTR [rbx+0x10]
   21106:	mov    rsi,QWORD PTR [r14]
   21109:	mov    QWORD PTR [r14+0x18],r13
   2110d:	mov    QWORD PTR [r14+0x20],r12
   21111:	mov    QWORD PTR [r14+0x30],rbp
   21115:	mov    QWORD PTR [r14+0x38],rax
   21119:	call   c420 <g_hash_table_insert@plt>
   2111e:	add    rsp,0x28
   21122:	mov    rax,r14
   21125:	pop    rbx
   21126:	pop    rbp
   21127:	pop    r12
   21129:	pop    r13
   2112b:	pop    r14
   2112d:	pop    r15
   2112f:	ret    
   21130:	mov    rax,QWORD PTR [rbx]
   21133:	sub    rsp,0x8
   21137:	lea    r8,[rip+0x3c6f2]        # 5d830 <_fini@@Base+0xb0dc>
   2113e:	lea    rcx,[rip+0x3ca9b]        # 5dbe0 <_fini@@Base+0xb48c>
   21145:	lea    rsi,[rip+0x3c4ec]        # 5d638 <_fini@@Base+0xaee4>
   2114c:	mov    edx,0x3f7
   21151:	mov    r9,r15
   21154:	xor    r14d,r14d
   21157:	mov    rax,QWORD PTR [rax]
   2115a:	push   QWORD PTR [rax]
   2115c:	mov    rdi,QWORD PTR [rsp+0x78]
   21161:	xor    eax,eax
   21163:	call   3a090 <g_str_equal@plt+0x2cdd0>
   21168:	pop    rax
   21169:	pop    rdx
   2116a:	jmp    2111e <g_str_equal@plt+0x13e5e>
   2116c:	nop    DWORD PTR [rax+0x0]
   21170:	mov    rdi,r15
   21173:	xor    r15d,r15d
   21176:	call   c370 <g_strdup@plt>
   2117b:	mov    QWORD PTR [rsp+0x18],rbx
   21180:	mov    BYTE PTR [rax+r14*1-0x3],0x0
   21186:	mov    r14,rbp
   21189:	mov    QWORD PTR [rsp+0x10],rax
   2118e:	mov    ebp,r15d
   21191:	mov    rsi,QWORD PTR [rsp+0x10]
   21196:	lea    rdi,[rip+0x3c3ee]        # 5d58b <_fini@@Base+0xae37>
   2119d:	mov    edx,ebp
   2119f:	xor    eax,eax
   211a1:	call   c740 <g_strdup_printf@plt>
   211a6:	push   0x0
   211a8:	push   QWORD PTR [rsp+0x68]
   211ac:	mov    rcx,r13
   211af:	mov    rdx,QWORD PTR [rsp+0x18]
   211b4:	mov    rdi,QWORD PTR [rsp+0x28]
   211b9:	mov    rsi,rax
   211bc:	mov    rbx,rax
   211bf:	mov    r9,r14
   211c2:	mov    r8,r12
   211c5:	call   21080 <g_str_equal@plt+0x13dc0>
   211ca:	mov    rdi,rbx
   211cd:	mov    r15,rax
   211d0:	call   d2b0 <g_free@plt>
   211d5:	test   r15,r15
   211d8:	pop    rcx
   211d9:	pop    rsi
   211da:	jne    211e8 <g_str_equal@plt+0x13f28>
   211dc:	add    ebp,0x1
   211df:	jmp    21191 <g_str_equal@plt+0x13ed1>
   211e1:	nop    DWORD PTR [rax+0x0]
   211e8:	mov    rdi,QWORD PTR [rsp+0x10]
   211ed:	mov    r14,r15
   211f0:	call   d2b0 <g_free@plt>
   211f5:	jmp    2111e <g_str_equal@plt+0x13e5e>
   211fa:	nop    WORD PTR [rax+rax*1+0x0]
   21200:	push   r12
   21202:	push   rbp
   21203:	mov    rbp,rdi
   21206:	push   rbx
   21207:	mov    rdi,QWORD PTR [rdi+0x10]
   2120b:	mov    rbx,rsi
   2120e:	mov    r12,rdx
   21211:	call   cdb0 <g_hash_table_lookup@plt>
   21216:	test   rax,rax
   21219:	je     21240 <g_str_equal@plt+0x13f80>
   2121b:	mov    rcx,QWORD PTR [rax+0x30]
   2121f:	test   rcx,rcx
   21222:	je     21230 <g_str_equal@plt+0x13f70>
   21224:	mov    rdx,QWORD PTR [rax+0x38]
   21228:	mov    rsi,rbx
   2122b:	mov    rdi,rbp
   2122e:	call   rcx
   21230:	mov    rdi,QWORD PTR [rbp+0x10]
   21234:	mov    rsi,rbx
   21237:	pop    rbx
   21238:	pop    rbp
   21239:	pop    r12
   2123b:	jmp    c560 <g_hash_table_remove@plt>
   21240:	mov    r9,rbx
   21243:	mov    rdi,r12
   21246:	lea    r8,[rip+0x3c325]        # 5d572 <_fini@@Base+0xae1e>
   2124d:	pop    rbx
   2124e:	pop    rbp
   2124f:	pop    r12
   21251:	lea    rcx,[rip+0x3c908]        # 5db60 <_fini@@Base+0xb40c>
   21258:	lea    rsi,[rip+0x3c3d9]        # 5d638 <_fini@@Base+0xaee4>
   2125f:	mov    edx,0x474
   21264:	jmp    3a090 <g_str_equal@plt+0x2cdd0>
   21269:	nop    DWORD PTR [rax+0x0]
   21270:	push   r13
   21272:	push   r12
   21274:	mov    r12,rdx
   21277:	push   rbp
   21278:	push   rbx
   21279:	mov    r13,rsi
   2127c:	mov    rdx,rcx
   2127f:	mov    rsi,r12
   21282:	mov    rbp,rdi
   21285:	sub    rsp,0x8
   21289:	mov    rbx,rcx
   2128c:	call   21000 <g_str_equal@plt+0x13d40>
   21291:	test   rax,rax
   21294:	je     212c0 <g_str_equal@plt+0x14000>
   21296:	mov    r9,QWORD PTR [rax+0x18]
   2129a:	test   r9,r9
   2129d:	je     212d0 <g_str_equal@plt+0x14010>
   2129f:	mov    rcx,QWORD PTR [rax+0x38]
   212a3:	add    rsp,0x8
   212a7:	mov    r8,rbx
   212aa:	mov    rdx,r12
   212ad:	mov    rsi,r13
   212b0:	mov    rdi,rbp
   212b3:	pop    rbx
   212b4:	pop    rbp
   212b5:	pop    r12
   212b7:	pop    r13
   212b9:	jmp    r9
   212bc:	nop    DWORD PTR [rax+0x0]
   212c0:	add    rsp,0x8
   212c4:	pop    rbx
   212c5:	pop    rbp
   212c6:	pop    r12
   212c8:	pop    r13
   212ca:	ret    
   212cb:	nop    DWORD PTR [rax+rax*1+0x0]
   212d0:	add    rsp,0x8
   212d4:	mov    rdi,rbx
   212d7:	lea    r8,[rip+0x3c592]        # 5d870 <_fini@@Base+0xb11c>
   212de:	pop    rbx
   212df:	pop    rbp
   212e0:	pop    r12
   212e2:	pop    r13
   212e4:	lea    rcx,[rip+0x3c855]        # 5db40 <_fini@@Base+0xb3ec>
   212eb:	lea    rsi,[rip+0x3c346]        # 5d638 <_fini@@Base+0xaee4>
   212f2:	mov    edx,0x487
   212f7:	xor    eax,eax
   212f9:	jmp    3a090 <g_str_equal@plt+0x2cdd0>
   212fe:	xchg   ax,ax
   21300:	mov    rax,rcx
   21303:	mov    rdx,QWORD PTR [rcx+0x8]
   21307:	mov    rcx,r8
   2130a:	mov    rdi,QWORD PTR [rax]
   2130d:	jmp    21270 <g_str_equal@plt+0x13fb0>
   21312:	nop    DWORD PTR [rax+0x0]
   21316:	nop    WORD PTR cs:[rax+rax*1+0x0]
   21320:	push   r13
   21322:	push   r12
   21324:	mov    r12,rdx
   21327:	push   rbp
   21328:	push   rbx
   21329:	mov    r13,rsi
   2132c:	mov    rdx,rcx
   2132f:	mov    rsi,r12
   21332:	mov    rbp,rdi
   21335:	sub    rsp,0x8
   21339:	mov    rbx,rcx
   2133c:	call   21000 <g_str_equal@plt+0x13d40>
   21341:	test   rax,rax
   21344:	je     21370 <g_str_equal@plt+0x140b0>
   21346:	mov    r9,QWORD PTR [rax+0x20]
   2134a:	test   r9,r9
   2134d:	je     21380 <g_str_equal@plt+0x140c0>
   2134f:	mov    rcx,QWORD PTR [rax+0x38]
   21353:	add    rsp,0x8
   21357:	mov    r8,rbx
   2135a:	mov    rdx,r12
   2135d:	mov    rsi,r13
   21360:	mov    rdi,rbp
   21363:	pop    rbx
   21364:	pop    rbp
   21365:	pop    r12
   21367:	pop    r13
   21369:	jmp    r9
   2136c:	nop    DWORD PTR [rax+0x0]
   21370:	add    rsp,0x8
   21374:	pop    rbx
   21375:	pop    rbp
   21376:	pop    r12
   21378:	pop    r13
   2137a:	ret    
   2137b:	nop    DWORD PTR [rax+rax*1+0x0]
   21380:	add    rsp,0x8
   21384:	mov    rdi,rbx
   21387:	lea    r8,[rip+0x3c4e2]        # 5d870 <_fini@@Base+0xb11c>
   2138e:	pop    rbx
   2138f:	pop    rbp
   21390:	pop    r12
   21392:	pop    r13
   21394:	lea    rcx,[rip+0x3c785]        # 5db20 <_fini@@Base+0xb3cc>
   2139b:	lea    rsi,[rip+0x3c296]        # 5d638 <_fini@@Base+0xaee4>
   213a2:	mov    edx,0x496
   213a7:	xor    eax,eax
   213a9:	jmp    3a090 <g_str_equal@plt+0x2cdd0>
   213ae:	xchg   ax,ax
   213b0:	mov    rax,rcx
   213b3:	mov    rdx,QWORD PTR [rcx+0x8]
   213b7:	mov    rcx,r8
   213ba:	mov    rdi,QWORD PTR [rax]
   213bd:	jmp    21320 <g_str_equal@plt+0x14060>
   213c2:	nop    DWORD PTR [rax+0x0]
   213c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   213d0:	push   r13
   213d2:	push   r12
   213d4:	mov    r13,rcx
   213d7:	push   rbp
   213d8:	push   rbx
   213d9:	mov    rbp,rdi
   213dc:	mov    rdi,rsi
   213df:	mov    r12,rdx
   213e2:	sub    rsp,0x8
   213e6:	call   2e7b0 <g_str_equal@plt+0x214f0>
   213eb:	test   rax,rax
   213ee:	je     21440 <g_str_equal@plt+0x14180>
   213f0:	mov    rbx,rax
   213f3:	mov    rsi,rax
   213f6:	mov    rcx,r13
   213f9:	mov    rdx,r12
   213fc:	mov    rdi,rbp
   213ff:	call   23ac0 <g_str_equal@plt+0x16800>
   21404:	mov    rax,QWORD PTR [rbx+0x8]
   21408:	test   rax,rax
   2140b:	je     2145a <g_str_equal@plt+0x1419a>
   2140d:	sub    rax,0x1
   21411:	test   rax,rax
   21414:	mov    QWORD PTR [rbx+0x8],rax
   21418:	je     21428 <g_str_equal@plt+0x14168>
   2141a:	add    rsp,0x8
   2141e:	pop    rbx
   2141f:	pop    rbp
   21420:	pop    r12
   21422:	pop    r13
   21424:	ret    
   21425:	nop    DWORD PTR [rax]
   21428:	add    rsp,0x8
   2142c:	mov    rdi,rbx
   2142f:	pop    rbx
   21430:	pop    rbp
   21431:	pop    r12
   21433:	pop    r13
   21435:	jmp    30300 <g_str_equal@plt+0x23040>
   2143a:	nop    WORD PTR [rax+rax*1+0x0]
   21440:	add    rsp,0x8
   21444:	mov    rcx,r13
   21447:	mov    rdx,r12
   2144a:	pop    rbx
   2144b:	mov    rdi,rbp
   2144e:	xor    esi,esi
   21450:	pop    rbp
   21451:	pop    r12
   21453:	pop    r13
   21455:	jmp    23ac0 <g_str_equal@plt+0x16800>
   2145a:	call   d2f3 <g_str_equal@plt+0x33>
   2145f:	nop
   21460:	push   r13
   21462:	push   r12
   21464:	mov    r13,rsi
   21467:	push   rbp
   21468:	push   rbx
   21469:	mov    r12,rdx
   2146c:	sub    rsp,0x8
   21470:	call   23b10 <g_str_equal@plt+0x16850>
   21475:	test   rax,rax
   21478:	je     21520 <g_str_equal@plt+0x14260>
   2147e:	mov    rdi,rax
   21481:	mov    rbx,rax
   21484:	call   2e910 <g_str_equal@plt+0x21650>
   21489:	mov    rdi,rax
   2148c:	call   c370 <g_strdup@plt>
   21491:	test   rax,rax
   21494:	mov    rbp,rax
   21497:	je     214e0 <g_str_equal@plt+0x14220>
   21499:	mov    rax,QWORD PTR [rbx+0x8]
   2149d:	test   rax,rax
   214a0:	je     21524 <g_str_equal@plt+0x14264>
   214a6:	sub    rax,0x1
   214aa:	test   rax,rax
   214ad:	mov    QWORD PTR [rbx+0x8],rax
   214b1:	je     214c8 <g_str_equal@plt+0x14208>
   214b3:	add    rsp,0x8
   214b7:	mov    rax,rbp
   214ba:	pop    rbx
   214bb:	pop    rbp
   214bc:	pop    r12
   214be:	pop    r13
   214c0:	ret    
   214c1:	nop    DWORD PTR [rax+0x0]
   214c8:	mov    rdi,rbx
   214cb:	call   30300 <g_str_equal@plt+0x23040>
   214d0:	add    rsp,0x8
   214d4:	mov    rax,rbp
   214d7:	pop    rbx
   214d8:	pop    rbp
   214d9:	pop    r12
   214db:	pop    r13
   214dd:	ret    
   214de:	xchg   ax,ax
   214e0:	lea    rax,[rip+0x43fd8]        # 654bf <_fini@@Base+0x12d6b>
   214e7:	sub    rsp,0x8
   214eb:	lea    r8,[rip+0x3c3b6]        # 5d8a8 <_fini@@Base+0xb154>
   214f2:	lea    rcx,[rip+0x3c5e7]        # 5dae0 <_fini@@Base+0xb38c>
   214f9:	lea    rsi,[rip+0x3c138]        # 5d638 <_fini@@Base+0xaee4>
   21500:	mov    edx,0x4b1
   21505:	push   rax
   21506:	mov    r9,r13
   21509:	xor    eax,eax
   2150b:	mov    rdi,r12
   2150e:	call   3a090 <g_str_equal@plt+0x2cdd0>
   21513:	pop    rax
   21514:	pop    rdx
   21515:	jmp    21499 <g_str_equal@plt+0x141d9>
   2151a:	nop    WORD PTR [rax+rax*1+0x0]
   21520:	xor    ebp,ebp
   21522:	jmp    214b3 <g_str_equal@plt+0x141f3>
   21524:	call   d2f3 <g_str_equal@plt+0x33>
   21529:	nop    DWORD PTR [rax+0x0]
   21530:	push   r13
   21532:	push   r12
   21534:	mov    r13,rcx
   21537:	push   rbp
   21538:	push   rbx
   21539:	mov    rbp,rdi
   2153c:	movzx  edi,sil
   21540:	mov    r12,rdx
   21543:	sub    rsp,0x8
   21547:	call   2f920 <g_str_equal@plt+0x22660>
   2154c:	test   rax,rax
   2154f:	je     215a8 <g_str_equal@plt+0x142e8>
   21551:	mov    rbx,rax
   21554:	mov    rsi,rax
   21557:	mov    rcx,r13
   2155a:	mov    rdx,r12
   2155d:	mov    rdi,rbp
   21560:	call   23ac0 <g_str_equal@plt+0x16800>
   21565:	mov    rax,QWORD PTR [rbx+0x8]
   21569:	test   rax,rax
   2156c:	je     215c2 <g_str_equal@plt+0x14302>
   2156e:	sub    rax,0x1
   21572:	test   rax,rax
   21575:	mov    QWORD PTR [rbx+0x8],rax
   21579:	je     21590 <g_str_equal@plt+0x142d0>
   2157b:	add    rsp,0x8
   2157f:	pop    rbx
   21580:	pop    rbp
   21581:	pop    r12
   21583:	pop    r13
   21585:	ret    
   21586:	nop    WORD PTR cs:[rax+rax*1+0x0]
   21590:	add    rsp,0x8
   21594:	mov    rdi,rbx
   21597:	pop    rbx
   21598:	pop    rbp
   21599:	pop    r12
   2159b:	pop    r13
   2159d:	jmp    30300 <g_str_equal@plt+0x23040>
   215a2:	nop    WORD PTR [rax+rax*1+0x0]
   215a8:	add    rsp,0x8
   215ac:	mov    rcx,r13
   215af:	mov    rdx,r12
   215b2:	pop    rbx
   215b3:	mov    rdi,rbp
   215b6:	xor    esi,esi
   215b8:	pop    rbp
   215b9:	pop    r12
   215bb:	pop    r13
   215bd:	jmp    23ac0 <g_str_equal@plt+0x16800>
   215c2:	call   d2f3 <g_str_equal@plt+0x33>
   215c7:	nop    WORD PTR [rax+rax*1+0x0]
   215d0:	push   r12
   215d2:	push   rbp
   215d3:	mov    r12,rsi
   215d6:	push   rbx
   215d7:	mov    rbp,rdx
   215da:	sub    rsp,0x10
   215de:	call   23b10 <g_str_equal@plt+0x16850>
   215e3:	test   rax,rax
   215e6:	je     21680 <g_str_equal@plt+0x143c0>
   215ec:	mov    rbx,rax
   215ef:	mov    eax,DWORD PTR [rax]
   215f1:	lea    edx,[rax-0x1]
   215f4:	cmp    edx,0x5
   215f7:	ja     2168b <g_str_equal@plt+0x143cb>
   215fd:	cmp    eax,0x6
   21600:	je     21670 <g_str_equal@plt+0x143b0>
   21602:	lea    rax,[rip+0x3bf89]        # 5d592 <_fini@@Base+0xae3e>
   21609:	sub    rsp,0x8
   2160d:	lea    r8,[rip+0x3c294]        # 5d8a8 <_fini@@Base+0xb154>
   21614:	lea    rcx,[rip+0x3c485]        # 5daa0 <_fini@@Base+0xb34c>
   2161b:	lea    rsi,[rip+0x3c016]        # 5d638 <_fini@@Base+0xaee4>
   21622:	mov    edx,0x4eb
   21627:	push   rax
   21628:	mov    r9,r12
   2162b:	xor    eax,eax
   2162d:	mov    rdi,rbp
   21630:	call   3a090 <g_str_equal@plt+0x2cdd0>
   21635:	pop    rax
   21636:	pop    rdx
   21637:	xor    eax,eax
   21639:	mov    rdx,QWORD PTR [rbx+0x8]
   2163d:	test   rdx,rdx
   21640:	je     21690 <g_str_equal@plt+0x143d0>
   21642:	sub    rdx,0x1
   21646:	test   rdx,rdx
   21649:	mov    QWORD PTR [rbx+0x8],rdx
   2164d:	jne    21660 <g_str_equal@plt+0x143a0>
   2164f:	mov    rdi,rbx
   21652:	mov    BYTE PTR [rsp+0xf],al
   21656:	call   30300 <g_str_equal@plt+0x23040>
   2165b:	movzx  eax,BYTE PTR [rsp+0xf]
   21660:	add    rsp,0x10
   21664:	pop    rbx
   21665:	pop    rbp
   21666:	pop    r12
   21668:	ret    
   21669:	nop    DWORD PTR [rax+0x0]
   21670:	mov    rdi,rbx
   21673:	call   2f940 <g_str_equal@plt+0x22680>
   21678:	jmp    21639 <g_str_equal@plt+0x14379>
   2167a:	nop    WORD PTR [rax+rax*1+0x0]
   21680:	add    rsp,0x10
   21684:	xor    eax,eax
   21686:	pop    rbx
   21687:	pop    rbp
   21688:	pop    r12
   2168a:	ret    
   2168b:	call   d2d0 <g_str_equal@plt+0x10>
   21690:	call   d2f3 <g_str_equal@plt+0x33>
   21695:	nop
   21696:	nop    WORD PTR cs:[rax+rax*1+0x0]
   216a0:	push   r13
   216a2:	push   r12
   216a4:	mov    r13,rcx
   216a7:	push   rbp
   216a8:	push   rbx
   216a9:	mov    rbp,rdi
   216ac:	mov    rdi,rsi
   216af:	mov    r12,rdx
   216b2:	sub    rsp,0x8
   216b6:	call   2e110 <g_str_equal@plt+0x20e50>
   216bb:	test   rax,rax
   216be:	je     21710 <g_str_equal@plt+0x14450>
   216c0:	mov    rbx,rax
   216c3:	mov    rsi,rax
   216c6:	mov    rcx,r13
   216c9:	mov    rdx,r12
   216cc:	mov    rdi,rbp
   216cf:	call   23ac0 <g_str_equal@plt+0x16800>
   216d4:	mov    rax,QWORD PTR [rbx+0x8]
   216d8:	test   rax,rax
   216db:	je     2172a <g_str_equal@plt+0x1446a>
   216dd:	sub    rax,0x1
   216e1:	test   rax,rax
   216e4:	mov    QWORD PTR [rbx+0x8],rax
   216e8:	je     216f8 <g_str_equal@plt+0x14438>
   216ea:	add    rsp,0x8
   216ee:	pop    rbx
   216ef:	pop    rbp
   216f0:	pop    r12
   216f2:	pop    r13
   216f4:	ret    
   216f5:	nop    DWORD PTR [rax]
   216f8:	add    rsp,0x8
   216fc:	mov    rdi,rbx
   216ff:	pop    rbx
   21700:	pop    rbp
   21701:	pop    r12
   21703:	pop    r13
   21705:	jmp    30300 <g_str_equal@plt+0x23040>
   2170a:	nop    WORD PTR [rax+rax*1+0x0]
   21710:	add    rsp,0x8
   21714:	mov    rcx,r13
   21717:	mov    rdx,r12
   2171a:	pop    rbx
   2171b:	mov    rdi,rbp
   2171e:	xor    esi,esi
   21720:	pop    rbp
   21721:	pop    r12
   21723:	pop    r13
   21725:	jmp    23ac0 <g_str_equal@plt+0x16800>
   2172a:	call   d2f3 <g_str_equal@plt+0x33>
   2172f:	nop
   21730:	push   r12
   21732:	push   rbp
   21733:	mov    r12,rdx
   21736:	push   rbx
   21737:	mov    rbp,rsi
   2173a:	sub    rsp,0x10
   2173e:	mov    rax,QWORD PTR fs:0x28
   21747:	mov    QWORD PTR [rsp+0x8],rax
   2174c:	xor    eax,eax
   2174e:	call   23b10 <g_str_equal@plt+0x16850>
   21753:	test   rax,rax
   21756:	je     21814 <g_str_equal@plt+0x14554>
   2175c:	mov    rbx,rax
   2175f:	mov    eax,DWORD PTR [rax]
   21761:	lea    edx,[rax-0x1]
   21764:	cmp    edx,0x5
   21767:	ja     21822 <g_str_equal@plt+0x14562>
   2176d:	cmp    eax,0x2
   21770:	je     21800 <g_str_equal@plt+0x14540>
   21776:	lea    rax,[rip+0x43640]        # 64dbd <_fini@@Base+0x12669>
   2177d:	sub    rsp,0x8
   21781:	lea    r8,[rip+0x3c120]        # 5d8a8 <_fini@@Base+0xb154>
   21788:	lea    rcx,[rip+0x3c2e1]        # 5da70 <_fini@@Base+0xb31c>
   2178f:	lea    rsi,[rip+0x3bea2]        # 5d638 <_fini@@Base+0xaee4>
   21796:	mov    edx,0x50b
   2179b:	push   rax
   2179c:	mov    r9,rbp
   2179f:	xor    eax,eax
   217a1:	mov    rdi,r12
   217a4:	call   3a090 <g_str_equal@plt+0x2cdd0>
   217a9:	mov    QWORD PTR [rsp+0x10],0xffffffffffffffff
   217b2:	pop    rax
   217b3:	pop    rdx
   217b4:	mov    rax,QWORD PTR [rbx+0x8]
   217b8:	test   rax,rax
   217bb:	je     21827 <g_str_equal@plt+0x14567>
   217bd:	sub    rax,0x1
   217c1:	test   rax,rax
   217c4:	mov    QWORD PTR [rbx+0x8],rax
   217c8:	je     217f0 <g_str_equal@plt+0x14530>
   217ca:	mov    rax,QWORD PTR [rsp]
   217ce:	mov    rcx,QWORD PTR [rsp+0x8]
   217d3:	xor    rcx,QWORD PTR fs:0x28
   217dc:	jne    2181d <g_str_equal@plt+0x1455d>
   217de:	add    rsp,0x10
   217e2:	pop    rbx
   217e3:	pop    rbp
   217e4:	pop    r12
   217e6:	ret    
   217e7:	nop    WORD PTR [rax+rax*1+0x0]
   217f0:	mov    rdi,rbx
   217f3:	call   30300 <g_str_equal@plt+0x23040>
   217f8:	jmp    217ca <g_str_equal@plt+0x1450a>
   217fa:	nop    WORD PTR [rax+rax*1+0x0]
   21800:	mov    rsi,rsp
   21803:	mov    rdi,rbx
   21806:	call   2e1b0 <g_str_equal@plt+0x20ef0>
   2180b:	test   al,al
   2180d:	jne    217b4 <g_str_equal@plt+0x144f4>
   2180f:	jmp    21776 <g_str_equal@plt+0x144b6>
   21814:	mov    rax,0xffffffffffffffff
   2181b:	jmp    217ce <g_str_equal@plt+0x1450e>
   2181d:	call   cd30 <__stack_chk_fail@plt>
   21822:	call   d2d0 <g_str_equal@plt+0x10>
   21827:	call   d2f3 <g_str_equal@plt+0x33>
   2182c:	nop    DWORD PTR [rax+0x0]
   21830:	push   r13
   21832:	push   r12
   21834:	mov    r13,rcx
   21837:	push   rbp
   21838:	push   rbx
   21839:	mov    rbp,rdi
   2183c:	mov    rdi,rsi
   2183f:	mov    r12,rdx
   21842:	sub    rsp,0x8
   21846:	call   2e140 <g_str_equal@plt+0x20e80>
   2184b:	test   rax,rax
   2184e:	je     218a0 <g_str_equal@plt+0x145e0>
   21850:	mov    rbx,rax
   21853:	mov    rsi,rax
   21856:	mov    rcx,r13
   21859:	mov    rdx,r12
   2185c:	mov    rdi,rbp
   2185f:	call   23ac0 <g_str_equal@plt+0x16800>
   21864:	mov    rax,QWORD PTR [rbx+0x8]
   21868:	test   rax,rax
   2186b:	je     218ba <g_str_equal@plt+0x145fa>
   2186d:	sub    rax,0x1
   21871:	test   rax,rax
   21874:	mov    QWORD PTR [rbx+0x8],rax
   21878:	je     21888 <g_str_equal@plt+0x145c8>
   2187a:	add    rsp,0x8
   2187e:	pop    rbx
   2187f:	pop    rbp
   21880:	pop    r12
   21882:	pop    r13
   21884:	ret    
   21885:	nop    DWORD PTR [rax]
   21888:	add    rsp,0x8
   2188c:	mov    rdi,rbx
   2188f:	pop    rbx
   21890:	pop    rbp
   21891:	pop    r12
   21893:	pop    r13
   21895:	jmp    30300 <g_str_equal@plt+0x23040>
   2189a:	nop    WORD PTR [rax+rax*1+0x0]
   218a0:	add    rsp,0x8
   218a4:	mov    rcx,r13
   218a7:	mov    rdx,r12
   218aa:	pop    rbx
   218ab:	mov    rdi,rbp
   218ae:	xor    esi,esi
   218b0:	pop    rbp
   218b1:	pop    r12
   218b3:	pop    r13
   218b5:	jmp    23ac0 <g_str_equal@plt+0x16800>
   218ba:	call   d2f3 <g_str_equal@plt+0x33>
   218bf:	nop
   218c0:	push   r12
   218c2:	push   rbp
   218c3:	mov    r12,rdx
   218c6:	push   rbx
   218c7:	mov    rbp,rsi
   218ca:	sub    rsp,0x10
   218ce:	mov    rax,QWORD PTR fs:0x28
   218d7:	mov    QWORD PTR [rsp+0x8],rax
   218dc:	xor    eax,eax
   218de:	call   23b10 <g_str_equal@plt+0x16850>
   218e3:	test   rax,rax
   218e6:	je     21990 <g_str_equal@plt+0x146d0>
   218ec:	mov    rbx,rax
   218ef:	mov    eax,DWORD PTR [rax]
   218f1:	lea    edx,[rax-0x1]
   218f4:	cmp    edx,0x5
   218f7:	ja     219a7 <g_str_equal@plt+0x146e7>
   218fd:	cmp    eax,0x2
   21900:	je     21978 <g_str_equal@plt+0x146b8>
   21902:	lea    rax,[rip+0x3bc91]        # 5d59a <_fini@@Base+0xae46>
   21909:	sub    rsp,0x8
   2190d:	lea    r8,[rip+0x3bf94]        # 5d8a8 <_fini@@Base+0xb154>
   21914:	lea    rcx,[rip+0x3c135]        # 5da50 <_fini@@Base+0xb2fc>
   2191b:	lea    rsi,[rip+0x3bd16]        # 5d638 <_fini@@Base+0xaee4>
   21922:	mov    edx,0x528
   21927:	push   rax
   21928:	mov    r9,rbp
   2192b:	xor    eax,eax
   2192d:	mov    rdi,r12
   21930:	call   3a090 <g_str_equal@plt+0x2cdd0>
   21935:	mov    QWORD PTR [rsp+0x10],0x0
   2193e:	pop    rax
   2193f:	pop    rdx
   21940:	mov    rax,QWORD PTR [rbx+0x8]
   21944:	test   rax,rax
   21947:	je     219ac <g_str_equal@plt+0x146ec>
   21949:	sub    rax,0x1
   2194d:	test   rax,rax
   21950:	mov    QWORD PTR [rbx+0x8],rax
   21954:	je     21998 <g_str_equal@plt+0x146d8>
   21956:	mov    rax,QWORD PTR [rsp]
   2195a:	mov    rcx,QWORD PTR [rsp+0x8]
   2195f:	xor    rcx,QWORD PTR fs:0x28
   21968:	jne    219a2 <g_str_equal@plt+0x146e2>
   2196a:	add    rsp,0x10
   2196e:	pop    rbx
   2196f:	pop    rbp
   21970:	pop    r12
   21972:	ret    
   21973:	nop    DWORD PTR [rax+rax*1+0x0]
   21978:	mov    rsi,rsp
   2197b:	mov    rdi,rbx
   2197e:	call   2e270 <g_str_equal@plt+0x20fb0>
   21983:	test   al,al
   21985:	jne    21940 <g_str_equal@plt+0x14680>
   21987:	jmp    21902 <g_str_equal@plt+0x14642>
   2198c:	nop    DWORD PTR [rax+0x0]
   21990:	xor    eax,eax
   21992:	jmp    2195a <g_str_equal@plt+0x1469a>
   21994:	nop    DWORD PTR [rax+0x0]
   21998:	mov    rdi,rbx
   2199b:	call   30300 <g_str_equal@plt+0x23040>
   219a0:	jmp    21956 <g_str_equal@plt+0x14696>
   219a2:	call   cd30 <__stack_chk_fail@plt>
   219a7:	call   d2d0 <g_str_equal@plt+0x10>
   219ac:	call   d2f3 <g_str_equal@plt+0x33>
   219b1:	nop    DWORD PTR [rax+rax*1+0x0]
   219b6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   219c0:	push   r15
   219c2:	push   r14
   219c4:	mov    r15,rdx
   219c7:	push   r13
   219c9:	push   r12
   219cb:	mov    rdx,rcx
   219ce:	push   rbp
   219cf:	push   rbx
   219d0:	mov    rbp,rdi
   219d3:	mov    rbx,rsi
   219d6:	mov    r12,rcx
   219d9:	xor    r13d,r13d
   219dc:	sub    rsp,0x38
   219e0:	mov    rax,QWORD PTR fs:0x28
   219e9:	mov    QWORD PTR [rsp+0x28],rax
   219ee:	xor    eax,eax
   219f0:	mov    QWORD PTR [rsp+0x18],0x0
   219f9:	call   21000 <g_str_equal@plt+0x13d40>
   219fe:	test   rax,rax
   21a01:	je     21a5e <g_str_equal@plt+0x1479e>
   21a03:	mov    rdi,QWORD PTR [rax+0x8]
   21a07:	mov    rsi,r15
   21a0a:	mov    r14,rax
   21a0d:	call   d2c0 <g_str_equal@plt>
   21a12:	test   eax,eax
   21a14:	je     21a88 <g_str_equal@plt+0x147c8>
   21a16:	mov    rax,QWORD PTR [r14+0x38]
   21a1a:	lea    r15,[rsp+0x20]
   21a1f:	xor    edi,edi
   21a21:	mov    rsi,r15
   21a24:	mov    QWORD PTR [rsp+0x8],rax
   21a29:	call   2cca0 <g_str_equal@plt+0x1f9e0>
   21a2e:	lea    rcx,[rsp+0x18]
   21a33:	mov    rsi,rax
   21a36:	mov    rdx,rbx
   21a39:	mov    rdi,rbp
   21a3c:	mov    r14,rax
   21a3f:	call   21270 <g_str_equal@plt+0x13fb0>
   21a44:	mov    rsi,QWORD PTR [rsp+0x18]
   21a49:	test   rsi,rsi
   21a4c:	je     21ac0 <g_str_equal@plt+0x14800>
   21a4e:	mov    rdi,r12
   21a51:	call   3a4c0 <g_str_equal@plt+0x2d200>
   21a56:	mov    rdi,r14
   21a59:	call   27d00 <g_str_equal@plt+0x1aa40>
   21a5e:	mov    rcx,QWORD PTR [rsp+0x28]
   21a63:	xor    rcx,QWORD PTR fs:0x28
   21a6c:	mov    eax,r13d
   21a6f:	jne    21b17 <g_str_equal@plt+0x14857>
   21a75:	add    rsp,0x38
   21a79:	pop    rbx
   21a7a:	pop    rbp
   21a7b:	pop    r12
   21a7d:	pop    r13
   21a7f:	pop    r14
   21a81:	pop    r15
   21a83:	ret    
   21a84:	nop    DWORD PTR [rax+0x0]
   21a88:	push   r15
   21a8a:	mov    rax,QWORD PTR [rbp+0x0]
   21a8e:	lea    r8,[rip+0x3be43]        # 5d8d8 <_fini@@Base+0xb184>
   21a95:	lea    rcx,[rip+0x3bf94]        # 5da30 <_fini@@Base+0xb2dc>
   21a9c:	lea    rsi,[rip+0x3bb95]        # 5d638 <_fini@@Base+0xaee4>
   21aa3:	mov    edx,0x547
   21aa8:	mov    r9,rbx
   21aab:	mov    rdi,r12
   21aae:	mov    rax,QWORD PTR [rax]
   21ab1:	push   QWORD PTR [rax]
   21ab3:	xor    eax,eax
   21ab5:	call   3a090 <g_str_equal@plt+0x2cdd0>
   21aba:	pop    rax
   21abb:	pop    rdx
   21abc:	jmp    21a5e <g_str_equal@plt+0x1479e>
   21abe:	xchg   ax,ax
   21ac0:	mov    rsi,r15
   21ac3:	mov    rdi,r14
   21ac6:	call   27bf0 <g_str_equal@plt+0x1a930>
   21acb:	mov    rdi,r14
   21ace:	call   27d00 <g_str_equal@plt+0x1aa40>
   21ad3:	mov    rdi,QWORD PTR [rsp+0x20]
   21ad8:	call   2c370 <g_str_equal@plt+0x1f0b0>
   21add:	mov    rbp,rax
   21ae0:	mov    rax,QWORD PTR [rsp+0x8]
   21ae5:	lea    rdx,[rsp+0x14]
   21aea:	mov    r8,r12
   21aed:	mov    rsi,rbx
   21af0:	mov    rdi,rbp
   21af3:	mov    rcx,QWORD PTR [rax]
   21af6:	call   296a0 <g_str_equal@plt+0x1c3e0>
   21afb:	mov    rdi,QWORD PTR [rsp+0x20]
   21b00:	call   d2b0 <g_free@plt>
   21b05:	mov    rdi,rbp
   21b08:	call   27d00 <g_str_equal@plt+0x1aa40>
   21b0d:	mov    r13d,DWORD PTR [rsp+0x14]
   21b12:	jmp    21a5e <g_str_equal@plt+0x1479e>
   21b17:	call   cd30 <__stack_chk_fail@plt>
   21b1c:	nop    DWORD PTR [rax+0x0]
   21b20:	push   r15
   21b22:	push   r14
   21b24:	mov    r15,rsi
   21b27:	push   r13
   21b29:	push   r12
   21b2b:	mov    r12,rdi
   21b2e:	push   rbp
   21b2f:	push   rbx
   21b30:	xor    edi,edi
   21b32:	mov    r14,rdx
   21b35:	mov    r13,rcx
   21b38:	sub    rsp,0x28
   21b3c:	lea    rbp,[rsp+0x10]
   21b41:	mov    QWORD PTR [rsp+0x8],0x0
   21b4a:	mov    rax,QWORD PTR fs:0x28
   21b53:	mov    QWORD PTR [rsp+0x18],rax
   21b58:	xor    eax,eax
   21b5a:	mov    rsi,rbp
   21b5d:	call   2cca0 <g_str_equal@plt+0x1f9e0>
   21b62:	lea    rcx,[rsp+0x8]
   21b67:	mov    rsi,rax
   21b6a:	mov    rdx,r15
   21b6d:	mov    rdi,r12
   21b70:	mov    rbx,rax
   21b73:	call   21270 <g_str_equal@plt+0x13fb0>
   21b78:	mov    rsi,QWORD PTR [rsp+0x8]
   21b7d:	test   rsi,rsi
   21b80:	je     21bb8 <g_str_equal@plt+0x148f8>
   21b82:	mov    rdi,r13
   21b85:	call   3a4c0 <g_str_equal@plt+0x2d200>
   21b8a:	mov    rdi,rbx
   21b8d:	call   27d00 <g_str_equal@plt+0x1aa40>
   21b92:	mov    rax,QWORD PTR [rsp+0x18]
   21b97:	xor    rax,QWORD PTR fs:0x28
   21ba0:	jne    21bf4 <g_str_equal@plt+0x14934>
   21ba2:	add    rsp,0x28
   21ba6:	pop    rbx
   21ba7:	pop    rbp
   21ba8:	pop    r12
   21baa:	pop    r13
   21bac:	pop    r14
   21bae:	pop    r15
   21bb0:	ret    
   21bb1:	nop    DWORD PTR [rax+0x0]
   21bb8:	mov    rsi,rbp
   21bbb:	mov    rdi,rbx
   21bbe:	call   27bf0 <g_str_equal@plt+0x1a930>
   21bc3:	mov    rdi,rbx
   21bc6:	call   27d00 <g_str_equal@plt+0x1aa40>
   21bcb:	mov    rdi,QWORD PTR [rsp+0x10]
   21bd0:	call   2c370 <g_str_equal@plt+0x1f0b0>
   21bd5:	mov    rcx,r13
   21bd8:	mov    rdi,rax
   21bdb:	mov    rdx,r14
   21bde:	xor    esi,esi
   21be0:	mov    rbx,rax
   21be3:	call   24f20 <g_str_equal@plt+0x17c60>
   21be8:	mov    rdi,QWORD PTR [rsp+0x10]
   21bed:	call   d2b0 <g_free@plt>
   21bf2:	jmp    21b8a <g_str_equal@plt+0x148ca>
   21bf4:	call   cd30 <__stack_chk_fail@plt>
   21bf9:	nop    DWORD PTR [rax+0x0]
   21c00:	push   r13
   21c02:	push   r12
   21c04:	mov    r13,rcx
   21c07:	push   rbp
   21c08:	push   rbx
   21c09:	mov    rbp,rdi
   21c0c:	mov    r12,rdx
   21c0f:	mov    rdi,rsi
   21c12:	sub    rsp,0x8
   21c16:	call   2c370 <g_str_equal@plt+0x1f0b0>
   21c1b:	mov    rdi,rbp
   21c1e:	mov    rcx,r13
   21c21:	mov    rdx,r12
   21c24:	mov    rsi,rax
   21c27:	mov    rbx,rax
   21c2a:	call   21320 <g_str_equal@plt+0x14060>
   21c2f:	add    rsp,0x8
   21c33:	mov    rdi,rbx
   21c36:	pop    rbx
   21c37:	pop    rbp
   21c38:	pop    r12
   21c3a:	pop    r13
   21c3c:	jmp    27d00 <g_str_equal@plt+0x1aa40>
   21c41:	nop    DWORD PTR [rax+rax*1+0x0]
   21c46:	nop    WORD PTR cs:[rax+rax*1+0x0]
   21c50:	push   r13
   21c52:	push   r12
   21c54:	mov    r13,rsi
   21c57:	push   rbp
   21c58:	push   rbx
   21c59:	mov    r12,rdx
   21c5c:	mov    rbx,rdi
   21c5f:	sub    rsp,0x18
   21c63:	mov    rax,QWORD PTR fs:0x28
   21c6c:	mov    QWORD PTR [rsp+0x8],rax
   21c71:	xor    eax,eax
   21c73:	mov    eax,DWORD PTR [rdx]
   21c75:	mov    QWORD PTR [rsp],0x0
   21c7d:	cmp    eax,0x2f
   21c80:	ja     21d1f <g_str_equal@plt+0x14a5f>
   21c86:	mov    edx,eax
   21c88:	add    rdx,QWORD PTR [r12+0x10]
   21c8d:	add    eax,0x8
   21c90:	mov    DWORD PTR [r12],eax
   21c94:	mov    rdx,QWORD PTR [rdx]
   21c97:	test   rdx,rdx
   21c9a:	je     21cfd <g_str_equal@plt+0x14a3d>
   21c9c:	mov    rbp,rsp
   21c9f:	mov    ecx,DWORD PTR [r12]
   21ca3:	cmp    ecx,0x2f
   21ca6:	ja     21d6f <g_str_equal@plt+0x14aaf>
   21cac:	mov    eax,ecx
   21cae:	add    rax,QWORD PTR [r12+0x10]
   21cb3:	add    ecx,0x8
   21cb6:	mov    DWORD PTR [r12],ecx
   21cba:	mov    rsi,QWORD PTR [rax]
   21cbd:	test   rsi,rsi
   21cc0:	je     21d38 <g_str_equal@plt+0x14a78>
   21cc2:	mov    rcx,rbp
   21cc5:	mov    rdi,rbx
   21cc8:	call   21c00 <g_str_equal@plt+0x14940>
   21ccd:	mov    rsi,QWORD PTR [rsp]
   21cd1:	test   rsi,rsi
   21cd4:	jne    21d60 <g_str_equal@plt+0x14aa0>
   21cda:	mov    edx,DWORD PTR [r12]
   21cde:	cmp    edx,0x2f
   21ce1:	ja     21d82 <g_str_equal@plt+0x14ac2>
   21ce7:	mov    eax,edx
   21ce9:	add    rax,QWORD PTR [r12+0x10]
   21cee:	add    edx,0x8
   21cf1:	mov    DWORD PTR [r12],edx
   21cf5:	mov    rdx,QWORD PTR [rax]
   21cf8:	test   rdx,rdx
   21cfb:	jne    21c9f <g_str_equal@plt+0x149df>
   21cfd:	xor    eax,eax
   21cff:	mov    rbx,QWORD PTR [rsp+0x8]
   21d04:	xor    rbx,QWORD PTR fs:0x28
   21d0d:	jne    21d1a <g_str_equal@plt+0x14a5a>
   21d0f:	add    rsp,0x18
   21d13:	pop    rbx
   21d14:	pop    rbp
   21d15:	pop    r12
   21d17:	pop    r13
   21d19:	ret    
   21d1a:	call   cd30 <__stack_chk_fail@plt>
   21d1f:	mov    rdx,QWORD PTR [rdx+0x8]
   21d23:	lea    rax,[rdx+0x8]
   21d27:	mov    QWORD PTR [r12+0x8],rax
   21d2c:	jmp    21c94 <g_str_equal@plt+0x149d4>
   21d31:	nop    DWORD PTR [rax+0x0]
   21d38:	lea    r8,[rip+0x3e0e4]        # 5fe23 <_fini@@Base+0xd6cf>
   21d3f:	lea    rcx,[rip+0x3beda]        # 5dc20 <_fini@@Base+0xb4cc>
   21d46:	lea    rsi,[rip+0x3b8eb]        # 5d638 <_fini@@Base+0xaee4>
   21d4d:	mov    edx,0x28c
   21d52:	xor    edi,edi
   21d54:	call   c6b0 <g_assertion_message_expr@plt>
   21d59:	nop    DWORD PTR [rax+0x0]
   21d60:	mov    rdi,r13
   21d63:	call   3a4c0 <g_str_equal@plt+0x2d200>
   21d68:	mov    eax,0xffffffff
   21d6d:	jmp    21cff <g_str_equal@plt+0x14a3f>
   21d6f:	mov    rax,QWORD PTR [r12+0x8]
   21d74:	lea    rcx,[rax+0x8]
   21d78:	mov    QWORD PTR [r12+0x8],rcx
   21d7d:	jmp    21cba <g_str_equal@plt+0x149fa>
   21d82:	mov    rax,QWORD PTR [r12+0x8]
   21d87:	lea    rdx,[rax+0x8]
   21d8b:	mov    QWORD PTR [r12+0x8],rdx
   21d90:	jmp    21cf5 <g_str_equal@plt+0x14a35>
   21d95:	nop
   21d96:	nop    WORD PTR cs:[rax+rax*1+0x0]
   21da0:	sub    rsp,0xd8
   21da7:	test   al,al
   21da9:	mov    QWORD PTR [rsp+0x30],rdx
   21dae:	mov    QWORD PTR [rsp+0x38],rcx
   21db3:	mov    QWORD PTR [rsp+0x40],r8
   21db8:	mov    QWORD PTR [rsp+0x48],r9
   21dbd:	je     21df6 <g_str_equal@plt+0x14b36>
   21dbf:	movaps XMMWORD PTR [rsp+0x50],xmm0
   21dc4:	movaps XMMWORD PTR [rsp+0x60],xmm1
   21dc9:	movaps XMMWORD PTR [rsp+0x70],xmm2
   21dce:	movaps XMMWORD PTR [rsp+0x80],xmm3
   21dd6:	movaps XMMWORD PTR [rsp+0x90],xmm4
   21dde:	movaps XMMWORD PTR [rsp+0xa0],xmm5
   21de6:	movaps XMMWORD PTR [rsp+0xb0],xmm6
   21dee:	movaps XMMWORD PTR [rsp+0xc0],xmm7
   21df6:	mov    rax,QWORD PTR fs:0x28
   21dff:	mov    QWORD PTR [rsp+0x18],rax
   21e04:	xor    eax,eax
   21e06:	lea    rax,[rsp+0xe0]
   21e0e:	mov    rdx,rsp
   21e11:	mov    QWORD PTR [rsp+0x8],rax
   21e16:	lea    rax,[rsp+0x20]
   21e1b:	mov    DWORD PTR [rsp],0x10
   21e22:	mov    DWORD PTR [rsp+0x4],0x30
   21e2a:	mov    QWORD PTR [rsp+0x10],rax
   21e2f:	call   21c50 <g_str_equal@plt+0x14990>
   21e34:	mov    rcx,QWORD PTR [rsp+0x18]
   21e39:	xor    rcx,QWORD PTR fs:0x28
   21e42:	jne    21e4c <g_str_equal@plt+0x14b8c>
   21e44:	add    rsp,0xd8
   21e4b:	ret    
   21e4c:	call   cd30 <__stack_chk_fail@plt>
   21e51:	nop    DWORD PTR [rax+rax*1+0x0]
   21e56:	nop    WORD PTR cs:[rax+rax*1+0x0]
   21e60:	push   r14
   21e62:	push   r13
   21e64:	mov    r13,rsi
   21e67:	push   r12
   21e69:	push   rbp
   21e6a:	mov    rbp,rdi
   21e6d:	push   rbx
   21e6e:	movzx  edi,dl
   21e71:	mov    r12,rcx
   21e74:	sub    rsp,0x20
   21e78:	lea    r14,[rsp+0x8]
   21e7d:	mov    QWORD PTR [rsp+0x8],0x0
   21e86:	mov    QWORD PTR [rsp+0x10],0x0
   21e8f:	mov    rax,QWORD PTR fs:0x28
   21e98:	mov    QWORD PTR [rsp+0x18],rax
   21e9d:	xor    eax,eax
   21e9f:	mov    rsi,r14
   21ea2:	call   2cca0 <g_str_equal@plt+0x1f9e0>
   21ea7:	lea    rcx,[rsp+0x10]
   21eac:	mov    rsi,rax
   21eaf:	mov    rdx,r13
   21eb2:	mov    rdi,rbp
   21eb5:	mov    rbx,rax
   21eb8:	call   21270 <g_str_equal@plt+0x13fb0>
   21ebd:	mov    rsi,QWORD PTR [rsp+0x10]
   21ec2:	test   rsi,rsi
   21ec5:	je     21f00 <g_str_equal@plt+0x14c40>
   21ec7:	mov    rdi,r12
   21eca:	call   3a4c0 <g_str_equal@plt+0x2d200>
   21ecf:	mov    rdi,rbx
   21ed2:	call   27d00 <g_str_equal@plt+0x1aa40>
   21ed7:	mov    rbx,QWORD PTR [rsp+0x18]
   21edc:	xor    rbx,QWORD PTR fs:0x28
   21ee5:	mov    rax,QWORD PTR [rsp+0x8]
   21eea:	jne    21f0d <g_str_equal@plt+0x14c4d>
   21eec:	add    rsp,0x20
   21ef0:	pop    rbx
   21ef1:	pop    rbp
   21ef2:	pop    r12
   21ef4:	pop    r13
   21ef6:	pop    r14
   21ef8:	ret    
   21ef9:	nop    DWORD PTR [rax+0x0]
   21f00:	mov    rsi,r14
   21f03:	mov    rdi,rbx
   21f06:	call   27bf0 <g_str_equal@plt+0x1a930>
   21f0b:	jmp    21ecf <g_str_equal@plt+0x14c0f>
   21f0d:	call   cd30 <__stack_chk_fail@plt>
   21f12:	nop    DWORD PTR [rax+0x0]
   21f16:	nop    WORD PTR cs:[rax+rax*1+0x0]
   21f20:	sub    rsp,0x8
   21f24:	call   21000 <g_str_equal@plt+0x13d40>
   21f29:	test   rax,rax
   21f2c:	je     21f40 <g_str_equal@plt+0x14c80>
   21f2e:	mov    rax,QWORD PTR [rax+0x8]
   21f32:	add    rsp,0x8
   21f36:	ret    
   21f37:	nop    WORD PTR [rax+rax*1+0x0]
   21f40:	xor    eax,eax
   21f42:	jmp    21f32 <g_str_equal@plt+0x14c72>
   21f44:	xchg   ax,ax
   21f46:	nop    WORD PTR cs:[rax+rax*1+0x0]
   21f50:	mov    rax,QWORD PTR [rip+0x262b59]        # 284ab0 <stdout@@GLIBC_2.2.5+0x168>
   21f57:	test   rax,rax
   21f5a:	je     21f60 <g_str_equal@plt+0x14ca0>
   21f5c:	repz ret 
   21f5e:	xchg   ax,ax
   21f60:	lea    rdi,[rip+0x3b638]        # 5d59f <_fini@@Base+0xae4b>
   21f67:	sub    rsp,0x8
   21f6b:	call   1f0d0 <g_str_equal@plt+0x11e10>
   21f70:	mov    rdi,rax
   21f73:	call   20230 <g_str_equal@plt+0x12f70>
   21f78:	mov    QWORD PTR [rip+0x262b31],rax        # 284ab0 <stdout@@GLIBC_2.2.5+0x168>
   21f7f:	add    rsp,0x8
   21f83:	ret    
   21f84:	xchg   ax,ax
   21f86:	nop    WORD PTR cs:[rax+rax*1+0x0]
   21f90:	sub    rsp,0x8
   21f94:	call   21f50 <g_str_equal@plt+0x14c90>
   21f99:	lea    rsi,[rip+0x3b609]        # 5d5a9 <_fini@@Base+0xae55>
   21fa0:	mov    rdi,rax
   21fa3:	add    rsp,0x8
   21fa7:	jmp    239c0 <g_str_equal@plt+0x16700>
   21fac:	nop    DWORD PTR [rax+0x0]
   21fb0:	mov    rax,QWORD PTR [rip+0x262af1]        # 284aa8 <stdout@@GLIBC_2.2.5+0x160>
   21fb7:	test   rax,rax
   21fba:	je     21fc0 <g_str_equal@plt+0x14d00>
   21fbc:	repz ret 
   21fbe:	xchg   ax,ax
   21fc0:	lea    rdi,[rip+0x3b5d8]        # 5d59f <_fini@@Base+0xae4b>
   21fc7:	sub    rsp,0x8
   21fcb:	call   1f0d0 <g_str_equal@plt+0x11e10>
   21fd0:	mov    rdi,rax
   21fd3:	call   20230 <g_str_equal@plt+0x12f70>
   21fd8:	mov    QWORD PTR [rip+0x262ac9],rax        # 284aa8 <stdout@@GLIBC_2.2.5+0x160>
   21fdf:	add    rsp,0x8
   21fe3:	ret    
   21fe4:	xchg   ax,ax
   21fe6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   21ff0:	push   r14
   21ff2:	push   r13
   21ff4:	push   r12
   21ff6:	push   rbp
   21ff7:	mov    rbp,rcx
   21ffa:	push   rbx
   21ffb:	sub    rsp,0x10
   21fff:	mov    rax,QWORD PTR fs:0x28
   22008:	mov    QWORD PTR [rsp+0x8],rax
   2200d:	xor    eax,eax
   2200f:	cmp    QWORD PTR [rdx+0x20],0x0
   22014:	mov    QWORD PTR [rsp],0x0
   2201c:	je     22068 <g_str_equal@plt+0x14da8>
   2201e:	lea    r8,[rip+0x3b8db]        # 5d900 <_fini@@Base+0xb1ac>
   22025:	lea    rcx,[rip+0x3b9e4]        # 5da10 <_fini@@Base+0xb2bc>
   2202c:	lea    rsi,[rip+0x3b605]        # 5d638 <_fini@@Base+0xaee4>
   22033:	mov    edx,0x5dd
   22038:	mov    rdi,rbp
   2203b:	call   3a090 <g_str_equal@plt+0x2cdd0>
   22040:	mov    rax,QWORD PTR [rsp+0x8]
   22045:	xor    rax,QWORD PTR fs:0x28
   2204e:	jne    220e9 <g_str_equal@plt+0x14e29>
   22054:	add    rsp,0x10
   22058:	pop    rbx
   22059:	pop    rbp
   2205a:	pop    r12
   2205c:	pop    r13
   2205e:	pop    r14
   22060:	ret    
   22061:	nop    DWORD PTR [rax+0x0]
   22068:	mov    rax,QWORD PTR [rdx]
   2206b:	mov    r13,rsi
   2206e:	mov    r12,rdi
   22071:	lea    rdi,[rip+0x3b53a]        # 5d5b2 <_fini@@Base+0xae5e>
   22078:	mov    rbx,rdx
   2207b:	mov    rax,QWORD PTR [rax]
   2207e:	mov    rsi,QWORD PTR [rax]
   22081:	xor    eax,eax
   22083:	call   c740 <g_strdup_printf@plt>
   22088:	mov    r14,rax
   2208b:	mov    rax,rsp
   2208e:	lea    rcx,[rip+0x7eb]        # 22880 <g_str_equal@plt+0x155c0>
   22095:	push   rax
   22096:	lea    r9,[rip+0xffffffffffffec73]        # 20d10 <g_str_equal@plt+0x13a50>
   2209d:	push   rbx
   2209e:	xor    r8d,r8d
   220a1:	mov    rdx,r14
   220a4:	mov    rsi,r13
   220a7:	mov    rdi,r12
   220aa:	call   21080 <g_str_equal@plt+0x13dc0>
   220af:	mov    rsi,QWORD PTR [rsp+0x10]
   220b4:	pop    rdx
   220b5:	pop    rcx
   220b6:	test   rsi,rsi
   220b9:	je     220d0 <g_str_equal@plt+0x14e10>
   220bb:	mov    rdi,rbp
   220be:	call   3a4c0 <g_str_equal@plt+0x2d200>
   220c3:	mov    rdi,r14
   220c6:	call   d2b0 <g_free@plt>
   220cb:	jmp    22040 <g_str_equal@plt+0x14d80>
   220d0:	lea    rdx,[rip+0xffffffffffffcfc9]        # 1f0a0 <g_str_equal@plt+0x11de0>
   220d7:	mov    rdi,rbx
   220da:	mov    QWORD PTR [rax+0x28],rdx
   220de:	call   1fcf0 <g_str_equal@plt+0x12a30>
   220e3:	mov    QWORD PTR [rbx+0x20],r12
   220e7:	jmp    220c3 <g_str_equal@plt+0x14e03>
   220e9:	call   cd30 <__stack_chk_fail@plt>
   220ee:	xchg   ax,ax
   220f0:	push   r15
   220f2:	push   r14
   220f4:	mov    r14,rsi
   220f7:	push   r13
   220f9:	push   r12
   220fb:	mov    rsi,rcx
   220fe:	push   rbp
   220ff:	push   rbx
   22100:	mov    rbx,rdx
   22103:	mov    r13,rdi
   22106:	mov    rdx,r8
   22109:	mov    rdi,rbx
   2210c:	sub    rsp,0x18
   22110:	mov    r12,r9
   22113:	mov    r15,QWORD PTR [rsp+0x50]
   22118:	mov    rbp,rsp
   2211b:	mov    QWORD PTR [rsp],0x0
   22123:	mov    rax,QWORD PTR fs:0x28
   2212c:	mov    QWORD PTR [rsp+0x8],rax
   22131:	xor    eax,eax
   22133:	call   203c0 <g_str_equal@plt+0x13100>
   22138:	mov    rsi,rbp
   2213b:	mov    rdx,r15
   2213e:	mov    rdi,rbx
   22141:	call   21c50 <g_str_equal@plt+0x14990>
   22146:	mov    rsi,QWORD PTR [rsp]
   2214a:	test   rsi,rsi
   2214d:	je     22188 <g_str_equal@plt+0x14ec8>
   2214f:	mov    rdi,r12
   22152:	call   3a4c0 <g_str_equal@plt+0x2d200>
   22157:	mov    rdi,rbx
   2215a:	call   20b90 <g_str_equal@plt+0x138d0>
   2215f:	mov    rax,QWORD PTR [rsp+0x8]
   22164:	xor    rax,QWORD PTR fs:0x28
   2216d:	jne    2220a <g_str_equal@plt+0x14f4a>
   22173:	add    rsp,0x18
   22177:	pop    rbx
   22178:	pop    rbp
   22179:	pop    r12
   2217b:	pop    r13
   2217d:	pop    r14
   2217f:	pop    r15
   22181:	ret    
   22182:	nop    WORD PTR [rax+rax*1+0x0]
   22188:	mov    rsi,r14
   2218b:	mov    rcx,rbp
   2218e:	mov    rdx,rbx
   22191:	mov    rdi,r13
   22194:	call   21ff0 <g_str_equal@plt+0x14d30>
   22199:	mov    rsi,QWORD PTR [rsp]
   2219d:	test   rsi,rsi
   221a0:	jne    2214f <g_str_equal@plt+0x14e8f>
   221a2:	test   rbx,rbx
   221a5:	je     22200 <g_str_equal@plt+0x14f40>
   221a7:	mov    rdi,QWORD PTR [rbx]
   221aa:	lea    rsi,[rip+0x36cff]        # 58eb0 <_fini@@Base+0x675c>
   221b1:	call   20450 <g_str_equal@plt+0x13190>
   221b6:	test   rax,rax
   221b9:	je     22200 <g_str_equal@plt+0x14f40>
   221bb:	mov    rsi,rbp
   221be:	mov    rdi,rbx
   221c1:	call   23be0 <g_str_equal@plt+0x16920>
   221c6:	mov    rsi,QWORD PTR [rsp]
   221ca:	test   rsi,rsi
   221cd:	je     22200 <g_str_equal@plt+0x14f40>
   221cf:	mov    rdi,QWORD PTR [rbx+0x20]
   221d3:	test   rdi,rdi
   221d6:	je     2214f <g_str_equal@plt+0x14e8f>
   221dc:	mov    rsi,rbx
   221df:	call   1fbd0 <g_str_equal@plt+0x12910>
   221e4:	nop    DWORD PTR [rax+0x0]
   221e8:	mov    rsi,QWORD PTR [rsp]
   221ec:	test   rsi,rsi
   221ef:	je     2215f <g_str_equal@plt+0x14e9f>
   221f5:	jmp    2214f <g_str_equal@plt+0x14e8f>
   221fa:	nop    WORD PTR [rax+rax*1+0x0]
   22200:	mov    rdi,rbx
   22203:	call   20b90 <g_str_equal@plt+0x138d0>
   22208:	jmp    221e8 <g_str_equal@plt+0x14f28>
   2220a:	call   cd30 <__stack_chk_fail@plt>
   2220f:	nop
   22210:	sub    rsp,0xd8
   22217:	test   al,al
   22219:	je     22252 <g_str_equal@plt+0x14f92>
   2221b:	movaps XMMWORD PTR [rsp+0x50],xmm0
   22220:	movaps XMMWORD PTR [rsp+0x60],xmm1
   22225:	movaps XMMWORD PTR [rsp+0x70],xmm2
   2222a:	movaps XMMWORD PTR [rsp+0x80],xmm3
   22232:	movaps XMMWORD PTR [rsp+0x90],xmm4
   2223a:	movaps XMMWORD PTR [rsp+0xa0],xmm5
   22242:	movaps XMMWORD PTR [rsp+0xb0],xmm6
   2224a:	movaps XMMWORD PTR [rsp+0xc0],xmm7
   22252:	mov    rax,QWORD PTR fs:0x28
   2225b:	mov    QWORD PTR [rsp+0x18],rax
   22260:	xor    eax,eax
   22262:	lea    rax,[rsp+0xe0]
   2226a:	mov    QWORD PTR [rsp+0x8],rax
   2226f:	lea    rax,[rsp+0x20]
   22274:	mov    DWORD PTR [rsp],0x30
   2227b:	mov    DWORD PTR [rsp+0x4],0x30
   22283:	sub    rsp,0x8
   22287:	mov    QWORD PTR [rsp+0x18],rax
   2228c:	lea    rax,[rsp+0x8]
   22291:	push   rax
   22292:	call   220f0 <g_str_equal@plt+0x14e30>
   22297:	pop    rax
   22298:	pop    rdx
   22299:	mov    rax,QWORD PTR [rsp+0x18]
   2229e:	xor    rax,QWORD PTR fs:0x28
   222a7:	jne    222b1 <g_str_equal@plt+0x14ff1>
   222a9:	add    rsp,0xd8
   222b0:	ret    
   222b1:	call   cd30 <__stack_chk_fail@plt>
   222b6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   222c0:	push   r15
   222c2:	push   r14
   222c4:	mov    r14,rcx
   222c7:	push   r13
   222c9:	push   r12
   222cb:	mov    r13,rdx
   222ce:	push   rbp
   222cf:	push   rbx
   222d0:	mov    r12,rsi
   222d3:	mov    rbx,rdi
   222d6:	mov    rbp,r8
   222d9:	sub    rsp,0x18
   222dd:	mov    rax,QWORD PTR fs:0x28
   222e6:	mov    QWORD PTR [rsp+0x8],rax
   222eb:	xor    eax,eax
   222ed:	mov    QWORD PTR [rsp],0x0
   222f5:	call   20950 <g_str_equal@plt+0x13690>
   222fa:	test   rax,rax
   222fd:	je     22410 <g_str_equal@plt+0x15150>
   22303:	mov    rax,QWORD PTR [rax]
   22306:	cmp    BYTE PTR [rax+0x50],0x0
   2230a:	jne    223e0 <g_str_equal@plt+0x15120>
   22310:	mov    rdi,rbx
   22313:	mov    r15,rsp
   22316:	call   20420 <g_str_equal@plt+0x13160>
   2231b:	mov    rdx,rbp
   2231e:	mov    rsi,r15
   22321:	mov    rdi,rax
   22324:	mov    rbx,rax
   22327:	call   21c50 <g_str_equal@plt+0x14990>
   2232c:	test   eax,eax
   2232e:	js     223a8 <g_str_equal@plt+0x150e8>
   22330:	mov    rsi,r13
   22333:	mov    rcx,r15
   22336:	mov    rdx,rbx
   22339:	mov    rdi,r12
   2233c:	call   21ff0 <g_str_equal@plt+0x14d30>
   22341:	mov    rsi,QWORD PTR [rsp]
   22345:	test   rsi,rsi
   22348:	jne    223b0 <g_str_equal@plt+0x150f0>
   2234a:	test   rbx,rbx
   2234d:	je     22377 <g_str_equal@plt+0x150b7>
   2234f:	mov    rdi,QWORD PTR [rbx]
   22352:	lea    rsi,[rip+0x36b57]        # 58eb0 <_fini@@Base+0x675c>
   22359:	call   20450 <g_str_equal@plt+0x13190>
   2235e:	test   rax,rax
   22361:	je     22377 <g_str_equal@plt+0x150b7>
   22363:	mov    rsi,r15
   22366:	mov    rdi,rbx
   22369:	call   23be0 <g_str_equal@plt+0x16920>
   2236e:	mov    rsi,QWORD PTR [rsp]
   22372:	test   rsi,rsi
   22375:	jne    223c8 <g_str_equal@plt+0x15108>
   22377:	mov    rdi,rbx
   2237a:	call   20b90 <g_str_equal@plt+0x138d0>
   2237f:	mov    rcx,QWORD PTR [rsp+0x8]
   22384:	xor    rcx,QWORD PTR fs:0x28
   2238d:	mov    rax,rbx
   22390:	jne    2243c <g_str_equal@plt+0x1517c>
   22396:	add    rsp,0x18
   2239a:	pop    rbx
   2239b:	pop    rbp
   2239c:	pop    r12
   2239e:	pop    r13
   223a0:	pop    r14
   223a2:	pop    r15
   223a4:	ret    
   223a5:	nop    DWORD PTR [rax]
   223a8:	mov    rsi,QWORD PTR [rsp]
   223ac:	nop    DWORD PTR [rax+0x0]
   223b0:	mov    rdi,r14
   223b3:	call   3a4c0 <g_str_equal@plt+0x2d200>
   223b8:	mov    rdi,rbx
   223bb:	xor    ebx,ebx
   223bd:	call   20b90 <g_str_equal@plt+0x138d0>
   223c2:	jmp    2237f <g_str_equal@plt+0x150bf>
   223c4:	nop    DWORD PTR [rax+0x0]
   223c8:	mov    rdi,QWORD PTR [rbx+0x20]
   223cc:	test   rdi,rdi
   223cf:	je     223b0 <g_str_equal@plt+0x150f0>
   223d1:	mov    rsi,rbx
   223d4:	call   1fbd0 <g_str_equal@plt+0x12910>
   223d9:	mov    rsi,QWORD PTR [rsp]
   223dd:	jmp    223b0 <g_str_equal@plt+0x150f0>
   223df:	nop
   223e0:	lea    r8,[rip+0x3b1ed]        # 5d5d4 <_fini@@Base+0xae80>
   223e7:	lea    rcx,[rip+0x3b852]        # 5dc40 <_fini@@Base+0xb4ec>
   223ee:	lea    rsi,[rip+0x3b243]        # 5d638 <_fini@@Base+0xaee4>
   223f5:	mov    r9,rbx
   223f8:	mov    edx,0x252
   223fd:	mov    rdi,r14
   22400:	xor    eax,eax
   22402:	xor    ebx,ebx
   22404:	call   3a090 <g_str_equal@plt+0x2cdd0>
   22409:	jmp    2237f <g_str_equal@plt+0x150bf>
   2240e:	xchg   ax,ax
   22410:	lea    r8,[rip+0x3b1a5]        # 5d5bc <_fini@@Base+0xae68>
   22417:	lea    rcx,[rip+0x3b822]        # 5dc40 <_fini@@Base+0xb4ec>
   2241e:	lea    rsi,[rip+0x3b213]        # 5d638 <_fini@@Base+0xaee4>
   22425:	mov    r9,rbx
   22428:	mov    edx,0x24d
   2242d:	mov    rdi,r14
   22430:	call   3a090 <g_str_equal@plt+0x2cdd0>
   22435:	xor    ebx,ebx
   22437:	jmp    2237f <g_str_equal@plt+0x150bf>
   2243c:	call   cd30 <__stack_chk_fail@plt>
   22441:	nop    DWORD PTR [rax+rax*1+0x0]
   22446:	nop    WORD PTR cs:[rax+rax*1+0x0]
   22450:	sub    rsp,0xd8
   22457:	test   al,al
   22459:	mov    QWORD PTR [rsp+0x40],r8
   2245e:	mov    QWORD PTR [rsp+0x48],r9
   22463:	je     2249c <g_str_equal@plt+0x151dc>
   22465:	movaps XMMWORD PTR [rsp+0x50],xmm0
   2246a:	movaps XMMWORD PTR [rsp+0x60],xmm1
   2246f:	movaps XMMWORD PTR [rsp+0x70],xmm2
   22474:	movaps XMMWORD PTR [rsp+0x80],xmm3
   2247c:	movaps XMMWORD PTR [rsp+0x90],xmm4
   22484:	movaps XMMWORD PTR [rsp+0xa0],xmm5
   2248c:	movaps XMMWORD PTR [rsp+0xb0],xmm6
   22494:	movaps XMMWORD PTR [rsp+0xc0],xmm7
   2249c:	mov    rax,QWORD PTR fs:0x28
   224a5:	mov    QWORD PTR [rsp+0x18],rax
   224aa:	xor    eax,eax
   224ac:	lea    rax,[rsp+0xe0]
   224b4:	mov    r8,rsp
   224b7:	mov    QWORD PTR [rsp+0x8],rax
   224bc:	lea    rax,[rsp+0x20]
   224c1:	mov    DWORD PTR [rsp],0x20
   224c8:	mov    DWORD PTR [rsp+0x4],0x30
   224d0:	mov    QWORD PTR [rsp+0x10],rax
   224d5:	call   222c0 <g_str_equal@plt+0x15000>
   224da:	mov    rdx,QWORD PTR [rsp+0x18]
   224df:	xor    rdx,QWORD PTR fs:0x28
   224e8:	jne    224f2 <g_str_equal@plt+0x15232>
   224ea:	add    rsp,0xd8
   224f1:	ret    
   224f2:	call   cd30 <__stack_chk_fail@plt>
   224f7:	nop    WORD PTR [rax+rax*1+0x0]
   22500:	repz ret 
   22502:	nop    DWORD PTR [rax+0x0]
   22506:	nop    WORD PTR cs:[rax+rax*1+0x0]
   22510:	push   r15
   22512:	push   r14
   22514:	mov    r15,r8
   22517:	push   r13
   22519:	push   r12
   2251b:	mov    r12,rdi
   2251e:	push   rbp
   2251f:	push   rbx
   22520:	mov    edi,0x18
   22525:	mov    rbp,rdx
   22528:	mov    r13,rsi
   2252b:	sub    rsp,0x28
   2252f:	mov    QWORD PTR [rsp+0x8],rcx
   22534:	mov    DWORD PTR [rsp+0x4],r9d
   22539:	mov    rax,QWORD PTR fs:0x28
   22542:	mov    QWORD PTR [rsp+0x18],rax
   22547:	xor    eax,eax
   22549:	mov    r14,QWORD PTR [rsp+0x60]
   2254e:	mov    QWORD PTR [rsp+0x10],0x0
   22557:	call   c500 <g_malloc@plt>
   2255c:	mov    rcx,QWORD PTR [rsp+0x8]
   22561:	mov    r9d,DWORD PTR [rsp+0x4]
   22566:	lea    rdi,[rip+0x3b084]        # 5d5f1 <_fini@@Base+0xae9d>
   2256d:	mov    rsi,rbp
   22570:	mov    rbx,rax
   22573:	mov    QWORD PTR [rax+0x8],r15
   22577:	mov    QWORD PTR [rax],rcx
   2257a:	mov    DWORD PTR [rax+0x10],r9d
   2257e:	xor    eax,eax
   22580:	call   c740 <g_strdup_printf@plt>
   22585:	lea    r8,[rip+0x764]        # 22cf0 <g_str_equal@plt+0x15a30>
   2258c:	test   r15,r15
   2258f:	mov    rbp,rax
   22592:	mov    eax,0x0
   22597:	lea    rcx,[rip+0x352]        # 228f0 <g_str_equal@plt+0x15630>
   2259e:	lea    r9,[rip+0xffffffffffffe79b]        # 20d40 <g_str_equal@plt+0x13a80>
   225a5:	cmove  r8,rax
   225a9:	lea    rax,[rsp+0x10]
   225ae:	mov    rdx,rbp
   225b1:	mov    rsi,r13
   225b4:	mov    rdi,r12
   225b7:	push   rax
   225b8:	push   rbx
   225b9:	call   21080 <g_str_equal@plt+0x13dc0>
   225be:	mov    rsi,QWORD PTR [rsp+0x20]
   225c3:	pop    rdx
   225c4:	pop    rcx
   225c5:	test   rsi,rsi
   225c8:	jne    22600 <g_str_equal@plt+0x15340>
   225ce:	lea    rdx,[rip+0xffffffffffffcadb]        # 1f0b0 <g_str_equal@plt+0x11df0>
   225d5:	mov    QWORD PTR [rax+0x28],rdx
   225d9:	mov    rdi,rbp
   225dc:	call   d2b0 <g_free@plt>
   225e1:	mov    rax,QWORD PTR [rsp+0x18]
   225e6:	xor    rax,QWORD PTR fs:0x28
   225ef:	jne    22612 <g_str_equal@plt+0x15352>
   225f1:	add    rsp,0x28
   225f5:	pop    rbx
   225f6:	pop    rbp
   225f7:	pop    r12
   225f9:	pop    r13
   225fb:	pop    r14
   225fd:	pop    r15
   225ff:	ret    
   22600:	mov    rdi,r14
   22603:	call   3a4c0 <g_str_equal@plt+0x2d200>
   22608:	mov    rdi,rbx
   2260b:	call   d2b0 <g_free@plt>
   22610:	jmp    225d9 <g_str_equal@plt+0x15319>
   22612:	call   cd30 <__stack_chk_fail@plt>
   22617:	nop    WORD PTR [rax+rax*1+0x0]
   22620:	push   r14
   22622:	push   r13
   22624:	mov    r13,rsi
   22627:	push   r12
   22629:	push   rbp
   2262a:	mov    r12,rdi
   2262d:	push   rbx
   2262e:	mov    rax,QWORD PTR [rdx]
   22631:	lea    rdi,[rip+0x3afb9]        # 5d5f1 <_fini@@Base+0xae9d>
   22638:	mov    rbp,rdx
   2263b:	mov    r14,rcx
   2263e:	mov    rax,QWORD PTR [rax]
   22641:	mov    rsi,QWORD PTR [rax]
   22644:	xor    eax,eax
   22646:	call   c740 <g_strdup_printf@plt>
   2264b:	push   r14
   2264d:	lea    rcx,[rip+0x22c]        # 22880 <g_str_equal@plt+0x155c0>
   22654:	push   rbp
   22655:	xor    r9d,r9d
   22658:	xor    r8d,r8d
   2265b:	mov    rdx,rax
   2265e:	mov    rsi,r13
   22661:	mov    rdi,r12
   22664:	mov    rbx,rax
   22667:	call   21080 <g_str_equal@plt+0x13dc0>
   2266c:	test   rax,rax
   2266f:	pop    rdx
   22670:	pop    rcx
   22671:	je     2267e <g_str_equal@plt+0x153be>
   22673:	lea    rdx,[rip+0xffffffffffffca26]        # 1f0a0 <g_str_equal@plt+0x11de0>
   2267a:	mov    QWORD PTR [rax+0x28],rdx
   2267e:	mov    rdi,rbx
   22681:	pop    rbx
   22682:	pop    rbp
   22683:	pop    r12
   22685:	pop    r13
   22687:	pop    r14
   22689:	jmp    d2b0 <g_free@plt>
   2268e:	xchg   ax,ax
   22690:	push   r13
   22692:	push   r12
   22694:	push   rbp
   22695:	push   rbx
   22696:	sub    rsp,0x48
   2269a:	mov    rax,QWORD PTR fs:0x28
   226a3:	mov    QWORD PTR [rsp+0x38],rax
   226a8:	xor    eax,eax
   226aa:	mov    rax,QWORD PTR [rdi+0x20]
   226ae:	mov    QWORD PTR [rsp+0x8],0x0
   226b7:	test   rax,rax
   226ba:	je     22736 <g_str_equal@plt+0x15476>
   226bc:	mov    rsi,QWORD PTR [rax+0x10]
   226c0:	lea    rbx,[rsp+0x10]
   226c5:	lea    rbp,[rsp+0x8]
   226ca:	lea    r12,[rip+0x3adc4]        # 5d495 <_fini@@Base+0xad41>
   226d1:	mov    r13,rdi
   226d4:	mov    rdi,rbx
   226d7:	call   c830 <g_hash_table_iter_init@plt>
   226dc:	nop    DWORD PTR [rax+0x0]
   226e0:	xor    esi,esi
   226e2:	mov    rdx,rbp
   226e5:	mov    rdi,rbx
   226e8:	call   c820 <g_hash_table_iter_next@plt>
   226ed:	test   eax,eax
   226ef:	je     2273a <g_str_equal@plt+0x1547a>
   226f1:	mov    rax,QWORD PTR [rsp+0x8]
   226f6:	xor    edx,edx
   226f8:	mov    rsi,r12
   226fb:	mov    rdi,QWORD PTR [rax+0x8]
   226ff:	call   32ab0 <g_str_equal@plt+0x257f0>
   22704:	test   eax,eax
   22706:	je     226e0 <g_str_equal@plt+0x15420>
   22708:	mov    rax,QWORD PTR [rsp+0x8]
   2270d:	cmp    QWORD PTR [rax+0x38],r13
   22711:	jne    226e0 <g_str_equal@plt+0x15420>
   22713:	mov    rdi,QWORD PTR [rax]
   22716:	call   c370 <g_strdup@plt>
   2271b:	mov    rcx,QWORD PTR [rsp+0x38]
   22720:	xor    rcx,QWORD PTR fs:0x28
   22729:	jne    22757 <g_str_equal@plt+0x15497>
   2272b:	add    rsp,0x48
   2272f:	pop    rbx
   22730:	pop    rbp
   22731:	pop    r12
   22733:	pop    r13
   22735:	ret    
   22736:	xor    eax,eax
   22738:	jmp    2271b <g_str_equal@plt+0x1545b>
   2273a:	lea    rcx,[rip+0x3b27f]        # 5d9c0 <_fini@@Base+0xb26c>
   22741:	lea    rsi,[rip+0x3aef0]        # 5d638 <_fini@@Base+0xaee4>
   22748:	xor    r8d,r8d
   2274b:	mov    edx,0x6b7
   22750:	xor    edi,edi
   22752:	call   c6b0 <g_assertion_message_expr@plt>
   22757:	call   cd30 <__stack_chk_fail@plt>
   2275c:	nop    DWORD PTR [rax+0x0]
   22760:	push   r15
   22762:	push   r14
   22764:	lea    r15,[rip+0x3db03]        # 6026e <_fini@@Base+0xdb1a>
   2276b:	push   r13
   2276d:	push   r12
   2276f:	push   rbp
   22770:	push   rbx
   22771:	mov    rbx,rdi
   22774:	xor    ebp,ebp
   22776:	sub    rsp,0x8
   2277a:	call   21f50 <g_str_equal@plt+0x14c90>
   2277f:	cmp    rax,rbx
   22782:	mov    r14,rax
   22785:	jne    227ca <g_str_equal@plt+0x1550a>
   22787:	jmp    22800 <g_str_equal@plt+0x15540>
   22789:	nop    DWORD PTR [rax+0x0]
   22790:	test   rbp,rbp
   22793:	lea    rdi,[rip+0x3ae60]        # 5d5fa <_fini@@Base+0xaea6>
   2279a:	mov    rdx,r15
   2279d:	cmovne rdx,rbp
   227a1:	mov    rsi,rax
   227a4:	xor    eax,eax
   227a6:	call   c740 <g_strdup_printf@plt>
   227ab:	mov    rdi,rbp
   227ae:	mov    r13,rax
   227b1:	call   d2b0 <g_free@plt>
   227b6:	mov    rdi,r12
   227b9:	mov    rbp,r13
   227bc:	call   d2b0 <g_free@plt>
   227c1:	mov    rbx,QWORD PTR [rbx+0x20]
   227c5:	cmp    r14,rbx
   227c8:	je     227e5 <g_str_equal@plt+0x15525>
   227ca:	mov    rdi,rbx
   227cd:	call   22690 <g_str_equal@plt+0x153d0>
   227d2:	test   rax,rax
   227d5:	mov    r12,rax
   227d8:	jne    22790 <g_str_equal@plt+0x154d0>
   227da:	mov    rdi,rbp
   227dd:	xor    r13d,r13d
   227e0:	call   d2b0 <g_free@plt>
   227e5:	add    rsp,0x8
   227e9:	mov    rax,r13
   227ec:	pop    rbx
   227ed:	pop    rbp
   227ee:	pop    r12
   227f0:	pop    r13
   227f2:	pop    r14
   227f4:	pop    r15
   227f6:	ret    
   227f7:	nop    WORD PTR [rax+rax*1+0x0]
   22800:	add    rsp,0x8
   22804:	lea    rdi,[rip+0x3e0ac]        # 608b7 <_fini@@Base+0xe163>
   2280b:	pop    rbx
   2280c:	pop    rbp
   2280d:	pop    r12
   2280f:	pop    r13
   22811:	pop    r14
   22813:	pop    r15
   22815:	jmp    c370 <g_strdup@plt>
   2281a:	nop    WORD PTR [rax+rax*1+0x0]
   22820:	test   rsi,rsi
   22823:	je     22870 <g_str_equal@plt+0x155b0>
   22825:	push   r13
   22827:	push   r12
   22829:	mov    r12,rcx
   2282c:	push   rbp
   2282d:	push   rbx
   2282e:	mov    rbp,rdx
   22831:	mov    rbx,rdi
   22834:	mov    rdi,rsi
   22837:	sub    rsp,0x8
   2283b:	call   22760 <g_str_equal@plt+0x154a0>
   22840:	mov    rdi,rbx
   22843:	mov    rcx,r12
   22846:	mov    rdx,rbp
   22849:	mov    rsi,rax
   2284c:	mov    r13,rax
   2284f:	call   213d0 <g_str_equal@plt+0x14110>
   22854:	add    rsp,0x8
   22858:	mov    rdi,r13
   2285b:	pop    rbx
   2285c:	pop    rbp
   2285d:	pop    r12
   2285f:	pop    r13
   22861:	jmp    d2b0 <g_free@plt>
   22866:	nop    WORD PTR cs:[rax+rax*1+0x0]
   22870:	lea    rsi,[rip+0x3d9f7]        # 6026e <_fini@@Base+0xdb1a>
   22877:	jmp    213d0 <g_str_equal@plt+0x14110>
   2287c:	nop    DWORD PTR [rax+0x0]
   22880:	push   r12
   22882:	push   rbp
   22883:	mov    r12,r8
   22886:	push   rbx
   22887:	mov    rbp,rdx
   2288a:	mov    rbx,rsi
   2288d:	mov    rdi,rcx
   22890:	sub    rsp,0x10
   22894:	mov    rax,QWORD PTR fs:0x28
   2289d:	mov    QWORD PTR [rsp+0x8],rax
   228a2:	xor    eax,eax
   228a4:	call   22760 <g_str_equal@plt+0x154a0>
   228a9:	mov    rdx,rsp
   228ac:	mov    rcx,r12
   228af:	mov    rsi,rbp
   228b2:	mov    rdi,rbx
   228b5:	mov    QWORD PTR [rsp],rax
   228b9:	call   29210 <g_str_equal@plt+0x1bf50>
   228be:	mov    rdi,QWORD PTR [rsp]
   228c2:	call   d2b0 <g_free@plt>
   228c7:	mov    rax,QWORD PTR [rsp+0x8]
   228cc:	xor    rax,QWORD PTR fs:0x28
   228d5:	jne    228e0 <g_str_equal@plt+0x15620>
   228d7:	add    rsp,0x10
   228db:	pop    rbx
   228dc:	pop    rbp
   228dd:	pop    r12
   228df:	ret    
   228e0:	call   cd30 <__stack_chk_fail@plt>
   228e5:	nop
   228e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   228f0:	push   r12
   228f2:	push   rbp
   228f3:	mov    r12,r8
   228f6:	push   rbx
   228f7:	mov    rbp,rdx
   228fa:	mov    rbx,rsi
   228fd:	sub    rsp,0x10
   22901:	mov    rax,QWORD PTR fs:0x28
   2290a:	mov    QWORD PTR [rsp+0x8],rax
   2290f:	xor    eax,eax
   22911:	mov    rax,QWORD PTR [rcx]
   22914:	mov    rdi,QWORD PTR [rax]
   22917:	test   rdi,rdi
   2291a:	je     22960 <g_str_equal@plt+0x156a0>
   2291c:	call   22760 <g_str_equal@plt+0x154a0>
   22921:	mov    rdi,rbx
   22924:	mov    rdx,rsp
   22927:	mov    rcx,r12
   2292a:	mov    rsi,rbp
   2292d:	mov    QWORD PTR [rsp],rax
   22931:	call   29210 <g_str_equal@plt+0x1bf50>
   22936:	mov    rdi,QWORD PTR [rsp]
   2293a:	call   d2b0 <g_free@plt>
   2293f:	mov    rax,QWORD PTR [rsp+0x8]
   22944:	xor    rax,QWORD PTR fs:0x28
   2294d:	jne    2297e <g_str_equal@plt+0x156be>
   2294f:	add    rsp,0x10
   22953:	pop    rbx
   22954:	pop    rbp
   22955:	pop    r12
   22957:	ret    
   22958:	nop    DWORD PTR [rax+rax*1+0x0]
   22960:	lea    rax,[rip+0x3d907]        # 6026e <_fini@@Base+0xdb1a>
   22967:	mov    rdx,rsp
   2296a:	mov    rcx,r8
   2296d:	mov    rsi,rbp
   22970:	mov    rdi,rbx
   22973:	mov    QWORD PTR [rsp],rax
   22977:	call   29210 <g_str_equal@plt+0x1bf50>
   2297c:	jmp    2293f <g_str_equal@plt+0x1567f>
   2297e:	call   cd30 <__stack_chk_fail@plt>
   22983:	nop    DWORD PTR [rax]
   22986:	nop    WORD PTR cs:[rax+rax*1+0x0]
   22990:	push   rbp
   22991:	push   rbx
   22992:	xor    edx,edx
   22994:	mov    rbx,rdi
   22997:	mov    rbp,rsi
   2299a:	sub    rsp,0x8
   2299e:	call   21000 <g_str_equal@plt+0x13d40>
   229a3:	test   rax,rax
   229a6:	je     229c8 <g_str_equal@plt+0x15708>
   229a8:	mov    rcx,QWORD PTR [rax+0x28]
   229ac:	test   rcx,rcx
   229af:	je     229c8 <g_str_equal@plt+0x15708>
   229b1:	mov    rsi,QWORD PTR [rax+0x38]
   229b5:	add    rsp,0x8
   229b9:	mov    rdx,rbp
   229bc:	mov    rdi,rbx
   229bf:	pop    rbx
   229c0:	pop    rbp
   229c1:	jmp    rcx
   229c3:	nop    DWORD PTR [rax+rax*1+0x0]
   229c8:	add    rsp,0x8
   229cc:	xor    eax,eax
   229ce:	pop    rbx
   229cf:	pop    rbp
   229d0:	ret    
   229d1:	nop    DWORD PTR [rax+rax*1+0x0]
   229d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   229e0:	push   r13
   229e2:	push   r12
   229e4:	mov    r13,rdx
   229e7:	push   rbp
   229e8:	push   rbx
   229e9:	mov    rbp,rdi
   229ec:	mov    r12,rsi
   229ef:	mov    ebx,ecx
   229f1:	sub    rsp,0x8
   229f5:	jmp    22a03 <g_str_equal@plt+0x15743>
   229f7:	nop    WORD PTR [rax+rax*1+0x0]
   22a00:	add    ebx,0x1
   22a03:	movsxd rax,ebx
   22a06:	mov    rsi,QWORD PTR [r12+rax*8]
   22a0a:	test   rsi,rsi
   22a0d:	je     22a38 <g_str_equal@plt+0x15778>
   22a0f:	cmp    BYTE PTR [rsi],0x0
   22a12:	je     22a00 <g_str_equal@plt+0x15740>
   22a14:	mov    rdi,rbp
   22a17:	call   22990 <g_str_equal@plt+0x156d0>
   22a1c:	test   rax,rax
   22a1f:	mov    rbp,rax
   22a22:	jne    22a00 <g_str_equal@plt+0x15740>
   22a24:	add    rsp,0x8
   22a28:	xor    ebp,ebp
   22a2a:	pop    rbx
   22a2b:	mov    rax,rbp
   22a2e:	pop    rbp
   22a2f:	pop    r12
   22a31:	pop    r13
   22a33:	ret    
   22a34:	nop    DWORD PTR [rax+0x0]
   22a38:	test   rbp,rbp
   22a3b:	je     22a24 <g_str_equal@plt+0x15764>
   22a3d:	mov    rdi,QWORD PTR [rbp+0x0]
   22a41:	mov    rsi,r13
   22a44:	call   20450 <g_str_equal@plt+0x13190>
   22a49:	test   rax,rax
   22a4c:	je     22a24 <g_str_equal@plt+0x15764>
   22a4e:	add    rsp,0x8
   22a52:	mov    rax,rbp
   22a55:	pop    rbx
   22a56:	pop    rbp
   22a57:	pop    r12
   22a59:	pop    r13
   22a5b:	ret    
   22a5c:	nop    DWORD PTR [rax+0x0]
   22a60:	push   r15
   22a62:	push   r14
   22a64:	mov    r14,rcx
   22a67:	push   r13
   22a69:	push   r12
   22a6b:	xor    ecx,ecx
   22a6d:	push   rbp
   22a6e:	push   rbx
   22a6f:	mov    rbx,rdi
   22a72:	mov    r15,rdx
   22a75:	lea    r12,[rip+0x3aa19]        # 5d495 <_fini@@Base+0xad41>
   22a7c:	sub    rsp,0x58
   22a80:	mov    QWORD PTR [rsp+0x8],rsi
   22a85:	lea    rbp,[rsp+0x18]
   22a8a:	mov    rax,QWORD PTR fs:0x28
   22a93:	mov    QWORD PTR [rsp+0x48],rax
   22a98:	xor    eax,eax
   22a9a:	call   229e0 <g_str_equal@plt+0x15720>
   22a9f:	mov    rsi,QWORD PTR [rbx+0x10]
   22aa3:	lea    rbx,[rsp+0x20]
   22aa8:	mov    r13,rax
   22aab:	mov    rdi,rbx
   22aae:	call   c830 <g_hash_table_iter_init@plt>
   22ab3:	nop    DWORD PTR [rax+rax*1+0x0]
   22ab8:	xor    esi,esi
   22aba:	mov    rdx,rbp
   22abd:	mov    rdi,rbx
   22ac0:	call   c820 <g_hash_table_iter_next@plt>
   22ac5:	test   eax,eax
   22ac7:	je     22b10 <g_str_equal@plt+0x15850>
   22ac9:	mov    rax,QWORD PTR [rsp+0x18]
   22ace:	xor    edx,edx
   22ad0:	mov    rsi,r12
   22ad3:	mov    rdi,QWORD PTR [rax+0x8]
   22ad7:	call   32ab0 <g_str_equal@plt+0x257f0>
   22adc:	test   eax,eax
   22ade:	je     22ab8 <g_str_equal@plt+0x157f8>
   22ae0:	mov    rax,QWORD PTR [rsp+0x18]
   22ae5:	mov    rsi,QWORD PTR [rsp+0x8]
   22aea:	mov    rcx,r14
   22aed:	mov    rdx,r15
   22af0:	mov    rdi,QWORD PTR [rax+0x38]
   22af4:	call   22a60 <g_str_equal@plt+0x157a0>
   22af9:	test   rax,rax
   22afc:	je     22b06 <g_str_equal@plt+0x15846>
   22afe:	test   r13,r13
   22b01:	jne    22b38 <g_str_equal@plt+0x15878>
   22b03:	mov    r13,rax
   22b06:	cmp    BYTE PTR [r14],0x0
   22b0a:	je     22ab8 <g_str_equal@plt+0x157f8>
   22b0c:	xor    r13d,r13d
   22b0f:	nop
   22b10:	mov    rcx,QWORD PTR [rsp+0x48]
   22b15:	xor    rcx,QWORD PTR fs:0x28
   22b1e:	mov    rax,r13
   22b21:	jne    22b41 <g_str_equal@plt+0x15881>
   22b23:	add    rsp,0x58
   22b27:	pop    rbx
   22b28:	pop    rbp
   22b29:	pop    r12
   22b2b:	pop    r13
   22b2d:	pop    r14
   22b2f:	pop    r15
   22b31:	ret    
   22b32:	nop    WORD PTR [rax+rax*1+0x0]
   22b38:	mov    BYTE PTR [r14],0x1
   22b3c:	xor    r13d,r13d
   22b3f:	jmp    22b10 <g_str_equal@plt+0x15850>
   22b41:	call   cd30 <__stack_chk_fail@plt>
   22b46:	nop    WORD PTR cs:[rax+rax*1+0x0]
   22b50:	mov    rax,rsi
   22b53:	mov    rsi,QWORD PTR [rsi+0x8]
   22b57:	mov    rdi,QWORD PTR [rax]
   22b5a:	jmp    22990 <g_str_equal@plt+0x156d0>
   22b5f:	nop
   22b60:	push   r12
   22b62:	push   rbp
   22b63:	mov    r12,rsi
   22b66:	push   rbx
   22b67:	lea    rsi,[rip+0x3dd49]        # 608b7 <_fini@@Base+0xe163>
   22b6e:	mov    rbp,rdx
   22b71:	xor    edx,edx
   22b73:	sub    rsp,0x10
   22b77:	mov    rax,QWORD PTR fs:0x28
   22b80:	mov    QWORD PTR [rsp+0x8],rax
   22b85:	xor    eax,eax
   22b87:	call   cd90 <g_strsplit@plt>
   22b8c:	test   rax,rax
   22b8f:	je     22c1d <g_str_equal@plt+0x1595d>
   22b95:	mov    rbx,rax
   22b98:	mov    rax,QWORD PTR [rax]
   22b9b:	test   rax,rax
   22b9e:	je     22ba5 <g_str_equal@plt+0x158e5>
   22ba0:	cmp    BYTE PTR [rax],0x0
   22ba3:	je     22c00 <g_str_equal@plt+0x15940>
   22ba5:	mov    BYTE PTR [rsp+0x7],0x0
   22baa:	call   21f50 <g_str_equal@plt+0x14c90>
   22baf:	lea    rcx,[rsp+0x7]
   22bb4:	mov    rdx,r12
   22bb7:	mov    rsi,rbx
   22bba:	mov    rdi,rax
   22bbd:	call   22a60 <g_str_equal@plt+0x157a0>
   22bc2:	test   rbp,rbp
   22bc5:	mov    r12,rax
   22bc8:	je     22bd2 <g_str_equal@plt+0x15912>
   22bca:	movzx  eax,BYTE PTR [rsp+0x7]
   22bcf:	mov    BYTE PTR [rbp+0x0],al
   22bd2:	mov    rdi,rbx
   22bd5:	call   d030 <g_strfreev@plt>
   22bda:	mov    rcx,QWORD PTR [rsp+0x8]
   22bdf:	xor    rcx,QWORD PTR fs:0x28
   22be8:	mov    rax,r12
   22beb:	jne    22c3c <g_str_equal@plt+0x1597c>
   22bed:	add    rsp,0x10
   22bf1:	pop    rbx
   22bf2:	pop    rbp
   22bf3:	pop    r12
   22bf5:	ret    
   22bf6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   22c00:	call   21f50 <g_str_equal@plt+0x14c90>
   22c05:	mov    rdx,r12
   22c08:	mov    ecx,0x1
   22c0d:	mov    rsi,rbx
   22c10:	mov    rdi,rax
   22c13:	call   229e0 <g_str_equal@plt+0x15720>
   22c18:	mov    r12,rax
   22c1b:	jmp    22bd2 <g_str_equal@plt+0x15912>
   22c1d:	lea    rcx,[rip+0x3ad6c]        # 5d990 <_fini@@Base+0xb23c>
   22c24:	lea    rsi,[rip+0x3aa0d]        # 5d638 <_fini@@Base+0xaee4>
   22c2b:	lea    rdi,[rip+0x3a9ce]        # 5d600 <_fini@@Base+0xaeac>
   22c32:	mov    edx,0x72a
   22c37:	call   c390 <__assert_fail@plt>
   22c3c:	call   cd30 <__stack_chk_fail@plt>
   22c41:	nop    DWORD PTR [rax+rax*1+0x0]
   22c46:	nop    WORD PTR cs:[rax+rax*1+0x0]
   22c50:	push   r12
   22c52:	push   rbp
   22c53:	mov    r12,rdx
   22c56:	push   rbx
   22c57:	call   21460 <g_str_equal@plt+0x141a0>
   22c5c:	test   rax,rax
   22c5f:	mov    rbx,rax
   22c62:	je     22c98 <g_str_equal@plt+0x159d8>
   22c64:	cmp    BYTE PTR [rax],0x0
   22c67:	je     22c98 <g_str_equal@plt+0x159d8>
   22c69:	lea    rsi,[rip+0x3d567]        # 601d7 <_fini@@Base+0xda83>
   22c70:	xor    edx,edx
   22c72:	mov    rdi,rax
   22c75:	call   22b60 <g_str_equal@plt+0x158a0>
   22c7a:	test   rax,rax
   22c7d:	mov    rbp,rax
   22c80:	je     22cb0 <g_str_equal@plt+0x159f0>
   22c82:	mov    rdi,rbx
   22c85:	call   d2b0 <g_free@plt>
   22c8a:	mov    rax,rbp
   22c8d:	pop    rbx
   22c8e:	pop    rbp
   22c8f:	pop    r12
   22c91:	ret    
   22c92:	nop    WORD PTR [rax+rax*1+0x0]
   22c98:	xor    ebp,ebp
   22c9a:	mov    rdi,rbx
   22c9d:	call   d2b0 <g_free@plt>
   22ca2:	mov    rax,rbp
   22ca5:	pop    rbx
   22ca6:	pop    rbp
   22ca7:	pop    r12
   22ca9:	ret    
   22caa:	nop    WORD PTR [rax+rax*1+0x0]
   22cb0:	sub    rsp,0x8
   22cb4:	lea    r9,[rip+0x3a94b]        # 5d606 <_fini@@Base+0xaeb2>
   22cbb:	lea    rcx,[rip+0x3adfe]        # 5dac0 <_fini@@Base+0xb36c>
   22cc2:	push   rbx
   22cc3:	lea    rsi,[rip+0x3a96e]        # 5d638 <_fini@@Base+0xaee4>
   22cca:	mov    edx,0x4ce
   22ccf:	xor    eax,eax
   22cd1:	mov    r8d,0x3
   22cd7:	mov    rdi,r12
   22cda:	call   39fe0 <g_str_equal@plt+0x2cd20>
   22cdf:	pop    rax
   22ce0:	pop    rdx
   22ce1:	jmp    22c82 <g_str_equal@plt+0x159c2>
   22ce3:	nop    DWORD PTR [rax]
   22ce6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   22cf0:	push   r15
   22cf2:	push   r14
   22cf4:	mov    r15,rdi
   22cf7:	push   r13
   22cf9:	push   r12
   22cfb:	mov    rdi,rsi
   22cfe:	push   rbp
   22cff:	push   rbx
   22d00:	mov    rbp,rdx
   22d03:	mov    rbx,rcx
   22d06:	mov    rsi,rbp
   22d09:	xor    r13d,r13d
   22d0c:	sub    rsp,0x58
   22d10:	mov    r14,QWORD PTR [rcx]
   22d13:	mov    rax,QWORD PTR fs:0x28
   22d1c:	mov    QWORD PTR [rsp+0x48],rax
   22d21:	xor    eax,eax
   22d23:	mov    QWORD PTR [rsp+0x38],0x0
   22d2c:	lea    r12,[rsp+0x38]
   22d31:	lea    rdx,[rsp+0x40]
   22d36:	mov    rax,QWORD PTR [r14]
   22d39:	mov    QWORD PTR [rsp+0x8],r8
   22d3e:	mov    rcx,r12
   22d41:	mov    QWORD PTR [rsp+0x40],0x0
   22d4a:	mov    QWORD PTR [rsp+0x10],rax
   22d4f:	call   29210 <g_str_equal@plt+0x1bf50>
   22d54:	cmp    QWORD PTR [rsp+0x38],0x0
   22d5a:	mov    r9,QWORD PTR [rsp+0x40]
   22d5f:	je     22de8 <g_str_equal@plt+0x15b28>
   22d65:	mov    rdi,r9
   22d68:	call   d2b0 <g_free@plt>
   22d6d:	mov    rsi,QWORD PTR [rsp+0x38]
   22d72:	test   rsi,rsi
   22d75:	jne    22d90 <g_str_equal@plt+0x15ad0>
   22d77:	mov    rsi,rbp
   22d7a:	mov    rcx,r12
   22d7d:	mov    rdx,r13
   22d80:	mov    rdi,r15
   22d83:	call   QWORD PTR [rbx+0x8]
   22d86:	mov    rsi,QWORD PTR [rsp+0x38]
   22d8b:	test   rsi,rsi
   22d8e:	je     22dc0 <g_str_equal@plt+0x15b00>
   22d90:	mov    rdi,QWORD PTR [rsp+0x8]
   22d95:	call   3a4c0 <g_str_equal@plt+0x2d200>
   22d9a:	mov    rax,QWORD PTR [rsp+0x48]
   22d9f:	xor    rax,QWORD PTR fs:0x28
   22da8:	jne    22f57 <g_str_equal@plt+0x15c97>
   22dae:	add    rsp,0x58
   22db2:	pop    rbx
   22db3:	pop    rbp
   22db4:	pop    r12
   22db6:	pop    r13
   22db8:	pop    r14
   22dba:	pop    r15
   22dbc:	ret    
   22dbd:	nop    DWORD PTR [rax]
   22dc0:	mov    QWORD PTR [r14],r13
   22dc3:	cmp    DWORD PTR [rbx+0x10],0x1
   22dc7:	jne    22d9a <g_str_equal@plt+0x15ada>
   22dc9:	test   r13,r13
   22dcc:	je     22dd6 <g_str_equal@plt+0x15b16>
   22dce:	mov    rdi,r13
   22dd1:	call   1fcf0 <g_str_equal@plt+0x12a30>
   22dd6:	mov    rdi,QWORD PTR [rsp+0x10]
   22ddb:	call   20b90 <g_str_equal@plt+0x138d0>
   22de0:	jmp    22d9a <g_str_equal@plt+0x15ada>
   22de2:	nop    WORD PTR [rax+rax*1+0x0]
   22de8:	cmp    BYTE PTR [r9],0x0
   22dec:	je     22d65 <g_str_equal@plt+0x15aa5>
   22df2:	xor    edx,edx
   22df4:	mov    rsi,rbp
   22df7:	mov    rdi,r15
   22dfa:	mov    QWORD PTR [rsp+0x18],r9
   22dff:	mov    BYTE PTR [rsp+0x37],0x0
   22e04:	call   21000 <g_str_equal@plt+0x13d40>
   22e09:	test   rax,rax
   22e0c:	mov    r9,QWORD PTR [rsp+0x18]
   22e11:	je     22e80 <g_str_equal@plt+0x15bc0>
   22e13:	mov    rdi,QWORD PTR [rax+0x8]
   22e17:	lea    r13,[rdi+0x5]
   22e1b:	mov    QWORD PTR [rsp+0x20],r9
   22e20:	call   c720 <strlen@plt>
   22e25:	lea    rsi,[rax-0x6]
   22e29:	mov    rdi,r13
   22e2c:	call   c640 <g_strndup@plt>
   22e31:	mov    r9,QWORD PTR [rsp+0x20]
   22e36:	lea    rcx,[rsp+0x37]
   22e3b:	mov    rsi,rax
   22e3e:	mov    QWORD PTR [rsp+0x18],rax
   22e43:	mov    rdx,rcx
   22e46:	mov    QWORD PTR [rsp+0x28],rcx
   22e4b:	mov    rdi,r9
   22e4e:	call   22b60 <g_str_equal@plt+0x158a0>
   22e53:	cmp    BYTE PTR [rsp+0x37],0x0
   22e58:	mov    r13,rax
   22e5b:	mov    r9,QWORD PTR [rsp+0x20]
   22e60:	jne    22e90 <g_str_equal@plt+0x15bd0>
   22e62:	test   rax,rax
   22e65:	je     22ec0 <g_str_equal@plt+0x15c00>
   22e67:	mov    rdi,QWORD PTR [rsp+0x18]
   22e6c:	call   d2b0 <g_free@plt>
   22e71:	mov    r9,QWORD PTR [rsp+0x40]
   22e76:	jmp    22d65 <g_str_equal@plt+0x15aa5>
   22e7b:	nop    DWORD PTR [rax+rax*1+0x0]
   22e80:	mov    r13d,0x5
   22e86:	xor    edi,edi
   22e88:	jmp    22e1b <g_str_equal@plt+0x15b5b>
   22e8a:	nop    WORD PTR [rax+rax*1+0x0]
   22e90:	lea    r8,[rip+0x3aa91]        # 5d928 <_fini@@Base+0xb1d4>
   22e97:	lea    rcx,[rip+0x3ab52]        # 5d9f0 <_fini@@Base+0xb29c>
   22e9e:	lea    rsi,[rip+0x3a793]        # 5d638 <_fini@@Base+0xaee4>
   22ea5:	mov    edx,0x628
   22eaa:	mov    rdi,r12
   22ead:	xor    eax,eax
   22eaf:	call   3a090 <g_str_equal@plt+0x2cdd0>
   22eb4:	jmp    22e67 <g_str_equal@plt+0x15ba7>
   22eb6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   22ec0:	mov    rdx,QWORD PTR [rsp+0x28]
   22ec5:	lea    rsi,[rip+0x3d30b]        # 601d7 <_fini@@Base+0xda83>
   22ecc:	mov    rdi,r9
   22ecf:	mov    QWORD PTR [rsp+0x20],r9
   22ed4:	call   22b60 <g_str_equal@plt+0x158a0>
   22ed9:	test   rax,rax
   22edc:	jne    22eea <g_str_equal@plt+0x15c2a>
   22ede:	cmp    BYTE PTR [rsp+0x37],0x0
   22ee3:	mov    r9,QWORD PTR [rsp+0x20]
   22ee8:	je     22f20 <g_str_equal@plt+0x15c60>
   22eea:	sub    rsp,0x8
   22eee:	lea    rcx,[rip+0x3aafb]        # 5d9f0 <_fini@@Base+0xb29c>
   22ef5:	lea    rsi,[rip+0x3a73c]        # 5d638 <_fini@@Base+0xaee4>
   22efc:	push   QWORD PTR [rsp+0x20]
   22f00:	lea    r8,[rip+0x3a9a1]        # 5d8a8 <_fini@@Base+0xb154>
   22f07:	mov    r9,rbp
   22f0a:	mov    edx,0x62c
   22f0f:	mov    rdi,r12
   22f12:	xor    eax,eax
   22f14:	call   3a090 <g_str_equal@plt+0x2cdd0>
   22f19:	pop    rcx
   22f1a:	pop    rsi
   22f1b:	jmp    22e67 <g_str_equal@plt+0x15ba7>
   22f20:	sub    rsp,0x8
   22f24:	lea    rcx,[rip+0x3aac5]        # 5d9f0 <_fini@@Base+0xb29c>
   22f2b:	lea    rsi,[rip+0x3a706]        # 5d638 <_fini@@Base+0xaee4>
   22f32:	push   r9
   22f34:	lea    r9,[rip+0x3a6cb]        # 5d606 <_fini@@Base+0xaeb2>
   22f3b:	mov    edx,0x62f
   22f40:	xor    eax,eax
   22f42:	mov    r8d,0x3
   22f48:	mov    rdi,r12
   22f4b:	call   39fe0 <g_str_equal@plt+0x2cd20>
   22f50:	pop    rax
   22f51:	pop    rdx
   22f52:	jmp    22e67 <g_str_equal@plt+0x15ba7>
   22f57:	call   cd30 <__stack_chk_fail@plt>
   22f5c:	nop    DWORD PTR [rax+0x0]
   22f60:	mov    rdx,rsi
   22f63:	lea    rsi,[rip+0x3d26d]        # 601d7 <_fini@@Base+0xda83>
   22f6a:	jmp    22b60 <g_str_equal@plt+0x158a0>
   22f6f:	nop
   22f70:	push   r15
   22f72:	push   r14
   22f74:	mov    r15,rcx
   22f77:	push   r13
   22f79:	push   r12
   22f7b:	mov    r14,rdx
   22f7e:	push   rbp
   22f7f:	push   rbx
   22f80:	mov    rbp,rdi
   22f83:	mov    edi,0x10
   22f88:	mov    r13,rsi
   22f8b:	mov    r12,r8
   22f8e:	sub    rsp,0x18
   22f92:	mov    rax,QWORD PTR fs:0x28
   22f9b:	mov    QWORD PTR [rsp+0x8],rax
   22fa0:	xor    eax,eax
   22fa2:	mov    QWORD PTR [rsp],0x0
   22faa:	call   ce00 <g_malloc0@plt>
   22faf:	lea    r8,[rip+0xffffffffffffc6aa]        # 1f660 <g_str_equal@plt+0x123a0>
   22fb6:	mov    QWORD PTR [rax],r14
   22fb9:	mov    QWORD PTR [rax+0x8],r15
   22fbd:	mov    rbx,rax
   22fc0:	lea    rcx,[rip+0xffffffffffffc609]        # 1f5d0 <g_str_equal@plt+0x12310>
   22fc7:	xor    eax,eax
   22fc9:	test   r15,r15
   22fcc:	lea    rdx,[rip+0x424ec]        # 654bf <_fini@@Base+0x12d6b>
   22fd3:	lea    r9,[rip+0xffffffffffffc386]        # 1f360 <g_str_equal@plt+0x120a0>
   22fda:	cmove  r8,rax
   22fde:	test   r14,r14
   22fe1:	mov    rsi,r13
   22fe4:	cmove  rcx,rax
   22fe8:	mov    rax,rsp
   22feb:	mov    rdi,rbp
   22fee:	push   rax
   22fef:	push   rbx
   22ff0:	call   21080 <g_str_equal@plt+0x13dc0>
   22ff5:	mov    rsi,QWORD PTR [rsp+0x10]
   22ffa:	pop    rax
   22ffb:	pop    rdx
   22ffc:	test   rsi,rsi
   22fff:	je     23011 <g_str_equal@plt+0x15d51>
   23001:	mov    rdi,r12
   23004:	call   3a4c0 <g_str_equal@plt+0x2d200>
   23009:	mov    rdi,rbx
   2300c:	call   d2b0 <g_free@plt>
   23011:	mov    rax,QWORD PTR [rsp+0x8]
   23016:	xor    rax,QWORD PTR fs:0x28
   2301f:	jne    23030 <g_str_equal@plt+0x15d70>
   23021:	add    rsp,0x18
   23025:	pop    rbx
   23026:	pop    rbp
   23027:	pop    r12
   23029:	pop    r13
   2302b:	pop    r14
   2302d:	pop    r15
   2302f:	ret    
   23030:	call   cd30 <__stack_chk_fail@plt>
   23035:	nop
   23036:	nop    WORD PTR cs:[rax+rax*1+0x0]
   23040:	lea    rdx,[rip+0xffffffffffffc079]        # 1f0c0 <g_str_equal@plt+0x11e00>
   23047:	lea    rsi,[rip+0x3ad72]        # 5ddc0 <_fini@@Base+0xb66c>
   2304e:	xor    r8d,r8d
   23051:	xor    ecx,ecx
   23053:	jmp    22f70 <g_str_equal@plt+0x15cb0>
   23058:	nop    DWORD PTR [rax+rax*1+0x0]
   23060:	push   r15
   23062:	push   r14
   23064:	mov    r15,rcx
   23067:	push   r13
   23069:	push   r12
   2306b:	mov    r14,rdx
   2306e:	push   rbp
   2306f:	push   rbx
   23070:	mov    rbp,rdi
   23073:	mov    edi,0x10
   23078:	mov    r13,rsi
   2307b:	mov    r12,r8
   2307e:	sub    rsp,0x18
   23082:	mov    rax,QWORD PTR fs:0x28
   2308b:	mov    QWORD PTR [rsp+0x8],rax
   23090:	xor    eax,eax
   23092:	mov    QWORD PTR [rsp],0x0
   2309a:	call   ce00 <g_malloc0@plt>
   2309f:	lea    r8,[rip+0xffffffffffffc5ba]        # 1f660 <g_str_equal@plt+0x123a0>
   230a6:	mov    QWORD PTR [rax],r14
   230a9:	mov    QWORD PTR [rax+0x8],r15
   230ad:	mov    rbx,rax
   230b0:	lea    rcx,[rip+0xffffffffffffc519]        # 1f5d0 <g_str_equal@plt+0x12310>
   230b7:	xor    eax,eax
   230b9:	test   r15,r15
   230bc:	lea    rdx,[rip+0x423fc]        # 654bf <_fini@@Base+0x12d6b>
   230c3:	lea    r9,[rip+0xffffffffffffc296]        # 1f360 <g_str_equal@plt+0x120a0>
   230ca:	cmove  r8,rax
   230ce:	test   r14,r14
   230d1:	mov    rsi,r13
   230d4:	cmove  rcx,rax
   230d8:	mov    rax,rsp
   230db:	mov    rdi,rbp
   230de:	push   rax
   230df:	push   rbx
   230e0:	call   20f20 <g_str_equal@plt+0x13c60>
   230e5:	mov    rsi,QWORD PTR [rsp+0x10]
   230ea:	pop    rax
   230eb:	pop    rdx
   230ec:	test   rsi,rsi
   230ef:	je     23101 <g_str_equal@plt+0x15e41>
   230f1:	mov    rdi,r12
   230f4:	call   3a4c0 <g_str_equal@plt+0x2d200>
   230f9:	mov    rdi,rbx
   230fc:	call   d2b0 <g_free@plt>
   23101:	mov    rax,QWORD PTR [rsp+0x8]
   23106:	xor    rax,QWORD PTR fs:0x28
   2310f:	jne    23120 <g_str_equal@plt+0x15e60>
   23111:	add    rsp,0x18
   23115:	pop    rbx
   23116:	pop    rbp
   23117:	pop    r12
   23119:	pop    r13
   2311b:	pop    r14
   2311d:	pop    r15
   2311f:	ret    
   23120:	call   cd30 <__stack_chk_fail@plt>
   23125:	nop
   23126:	nop    WORD PTR cs:[rax+rax*1+0x0]
   23130:	push   r15
   23132:	push   r14
   23134:	mov    r15,rcx
   23137:	push   r13
   23139:	push   r12
   2313b:	mov    r14,rdx
   2313e:	push   rbp
   2313f:	push   rbx
   23140:	mov    rbp,rdi
   23143:	mov    edi,0x10
   23148:	mov    r13,rsi
   2314b:	mov    r12,r8
   2314e:	sub    rsp,0x18
   23152:	mov    rax,QWORD PTR fs:0x28
   2315b:	mov    QWORD PTR [rsp+0x8],rax
   23160:	xor    eax,eax
   23162:	mov    QWORD PTR [rsp],0x0
   2316a:	call   ce00 <g_malloc0@plt>
   2316f:	lea    r8,[rip+0xffffffffffffc5fa]        # 1f770 <g_str_equal@plt+0x124b0>
   23176:	mov    QWORD PTR [rax],r14
   23179:	mov    QWORD PTR [rax+0x8],r15
   2317d:	mov    rbx,rax
   23180:	lea    rcx,[rip+0xffffffffffffc569]        # 1f6f0 <g_str_equal@plt+0x12430>
   23187:	xor    eax,eax
   23189:	test   r15,r15
   2318c:	lea    rdx,[rip+0x41b80]        # 64d13 <_fini@@Base+0x125bf>
   23193:	lea    r9,[rip+0xffffffffffffcb86]        # 1fd20 <g_str_equal@plt+0x12a60>
   2319a:	cmove  r8,rax
   2319e:	test   r14,r14
   231a1:	mov    rsi,r13
   231a4:	cmove  rcx,rax
   231a8:	mov    rax,rsp
   231ab:	mov    rdi,rbp
   231ae:	push   rax
   231af:	push   rbx
   231b0:	call   21080 <g_str_equal@plt+0x13dc0>
   231b5:	mov    rsi,QWORD PTR [rsp+0x10]
   231ba:	pop    rax
   231bb:	pop    rdx
   231bc:	test   rsi,rsi
   231bf:	je     231d1 <g_str_equal@plt+0x15f11>
   231c1:	mov    rdi,r12
   231c4:	call   3a4c0 <g_str_equal@plt+0x2d200>
   231c9:	mov    rdi,rbx
   231cc:	call   d2b0 <g_free@plt>
   231d1:	mov    rax,QWORD PTR [rsp+0x8]
   231d6:	xor    rax,QWORD PTR fs:0x28
   231df:	jne    231f0 <g_str_equal@plt+0x15f30>
   231e1:	add    rsp,0x18
   231e5:	pop    rbx
   231e6:	pop    rbp
   231e7:	pop    r12
   231e9:	pop    r13
   231eb:	pop    r14
   231ed:	pop    r15
   231ef:	ret    
   231f0:	call   cd30 <__stack_chk_fail@plt>
   231f5:	nop
   231f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   23200:	push   r15
   23202:	push   r14
   23204:	mov    r15,rcx
   23207:	push   r13
   23209:	push   r12
   2320b:	mov    r14,rdx
   2320e:	push   rbp
   2320f:	push   rbx
   23210:	mov    rbp,rdi
   23213:	mov    edi,0x10
   23218:	mov    r13,rsi
   2321b:	mov    r12,r8
   2321e:	sub    rsp,0x18
   23222:	mov    rax,QWORD PTR fs:0x28
   2322b:	mov    QWORD PTR [rsp+0x8],rax
   23230:	xor    eax,eax
   23232:	mov    QWORD PTR [rsp],0x0
   2323a:	call   ce00 <g_malloc0@plt>
   2323f:	lea    r8,[rip+0xffffffffffffc52a]        # 1f770 <g_str_equal@plt+0x124b0>
   23246:	mov    QWORD PTR [rax],r14
   23249:	mov    QWORD PTR [rax+0x8],r15
   2324d:	mov    rbx,rax
   23250:	lea    rcx,[rip+0xffffffffffffc499]        # 1f6f0 <g_str_equal@plt+0x12430>
   23257:	xor    eax,eax
   23259:	test   r15,r15
   2325c:	lea    rdx,[rip+0x41ab0]        # 64d13 <_fini@@Base+0x125bf>
   23263:	lea    r9,[rip+0xffffffffffffcab6]        # 1fd20 <g_str_equal@plt+0x12a60>
   2326a:	cmove  r8,rax
   2326e:	test   r14,r14
   23271:	mov    rsi,r13
   23274:	cmove  rcx,rax
   23278:	mov    rax,rsp
   2327b:	mov    rdi,rbp
   2327e:	push   rax
   2327f:	push   rbx
   23280:	call   20f20 <g_str_equal@plt+0x13c60>
   23285:	mov    rsi,QWORD PTR [rsp+0x10]
   2328a:	pop    rax
   2328b:	pop    rdx
   2328c:	test   rsi,rsi
   2328f:	je     232a1 <g_str_equal@plt+0x15fe1>
   23291:	mov    rdi,r12
   23294:	call   3a4c0 <g_str_equal@plt+0x2d200>
   23299:	mov    rdi,rbx
   2329c:	call   d2b0 <g_free@plt>
   232a1:	mov    rax,QWORD PTR [rsp+0x8]
   232a6:	xor    rax,QWORD PTR fs:0x28
   232af:	jne    232c0 <g_str_equal@plt+0x16000>
   232b1:	add    rsp,0x18
   232b5:	pop    rbx
   232b6:	pop    rbp
   232b7:	pop    r12
   232b9:	pop    r13
   232bb:	pop    r14
   232bd:	pop    r15
   232bf:	ret    
   232c0:	call   cd30 <__stack_chk_fail@plt>
   232c5:	nop
   232c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   232d0:	push   r15
   232d2:	push   r14
   232d4:	mov    r15,r8
   232d7:	push   r13
   232d9:	push   r12
   232db:	mov    r14,rdx
   232de:	push   rbp
   232df:	push   rbx
   232e0:	mov    rbp,rdi
   232e3:	mov    edi,0x18
   232e8:	mov    r12,rsi
   232eb:	sub    rsp,0x28
   232ef:	mov    QWORD PTR [rsp+0x8],rcx
   232f4:	mov    QWORD PTR [rsp],r9
   232f8:	mov    rax,QWORD PTR fs:0x28
   23301:	mov    QWORD PTR [rsp+0x18],rax
   23306:	xor    eax,eax
   23308:	mov    r13,QWORD PTR [rsp+0x60]
   2330d:	mov    QWORD PTR [rsp+0x10],0x0
   23316:	call   c500 <g_malloc@plt>
   2331b:	mov    r9,QWORD PTR [rsp]
   2331f:	mov    rcx,QWORD PTR [rsp+0x8]
   23324:	mov    rbx,rax
   23327:	mov    QWORD PTR [rax+0x8],r15
   2332b:	xor    edx,edx
   2332d:	mov    rsi,r12
   23330:	mov    rdi,rbp
   23333:	mov    QWORD PTR [rax],rcx
   23336:	mov    QWORD PTR [rax+0x10],r9
   2333a:	lea    rax,[rip+0xffffffffffffc1ff]        # 1f540 <g_str_equal@plt+0x12280>
   23341:	test   r9,r9
   23344:	lea    rcx,[rip+0xffffffffffffc165]        # 1f4b0 <g_str_equal@plt+0x121f0>
   2334b:	lea    r9,[rip+0xffffffffffffc9ae]        # 1fd00 <g_str_equal@plt+0x12a40>
   23352:	cmove  rax,rdx
   23356:	test   r15,r15
   23359:	cmove  rcx,rdx
   2335d:	lea    rdx,[rsp+0x10]
   23362:	mov    r8,rax
   23365:	push   rdx
   23366:	push   rbx
   23367:	mov    rdx,r14
   2336a:	call   21080 <g_str_equal@plt+0x13dc0>
   2336f:	mov    rsi,QWORD PTR [rsp+0x20]
   23374:	pop    rax
   23375:	pop    rdx
   23376:	test   rsi,rsi
   23379:	je     2338b <g_str_equal@plt+0x160cb>
   2337b:	mov    rdi,r13
   2337e:	call   3a4c0 <g_str_equal@plt+0x2d200>
   23383:	mov    rdi,rbx
   23386:	call   d2b0 <g_free@plt>
   2338b:	mov    rax,QWORD PTR [rsp+0x18]
   23390:	xor    rax,QWORD PTR fs:0x28
   23399:	jne    233aa <g_str_equal@plt+0x160ea>
   2339b:	add    rsp,0x28
   2339f:	pop    rbx
   233a0:	pop    rbp
   233a1:	pop    r12
   233a3:	pop    r13
   233a5:	pop    r14
   233a7:	pop    r15
   233a9:	ret    
   233aa:	call   cd30 <__stack_chk_fail@plt>
   233af:	nop
   233b0:	push   r15
   233b2:	push   r14
   233b4:	mov    r15,r8
   233b7:	push   r13
   233b9:	push   r12
   233bb:	mov    r14,rdx
   233be:	push   rbp
   233bf:	push   rbx
   233c0:	mov    rbp,rdi
   233c3:	mov    edi,0x18
   233c8:	mov    r12,rsi
   233cb:	sub    rsp,0x28
   233cf:	mov    QWORD PTR [rsp+0x8],rcx
   233d4:	mov    QWORD PTR [rsp],r9
   233d8:	mov    rax,QWORD PTR fs:0x28
   233e1:	mov    QWORD PTR [rsp+0x18],rax
   233e6:	xor    eax,eax
   233e8:	mov    r13,QWORD PTR [rsp+0x60]
   233ed:	mov    QWORD PTR [rsp+0x10],0x0
   233f6:	call   c500 <g_malloc@plt>
   233fb:	mov    r9,QWORD PTR [rsp]
   233ff:	mov    rcx,QWORD PTR [rsp+0x8]
   23404:	mov    rbx,rax
   23407:	mov    QWORD PTR [rax+0x8],r15
   2340b:	xor    edx,edx
   2340d:	mov    rsi,r12
   23410:	mov    rdi,rbp
   23413:	mov    QWORD PTR [rax],rcx
   23416:	mov    QWORD PTR [rax+0x10],r9
   2341a:	lea    rax,[rip+0xffffffffffffc11f]        # 1f540 <g_str_equal@plt+0x12280>
   23421:	test   r9,r9
   23424:	lea    rcx,[rip+0xffffffffffffc085]        # 1f4b0 <g_str_equal@plt+0x121f0>
   2342b:	lea    r9,[rip+0xffffffffffffc8ce]        # 1fd00 <g_str_equal@plt+0x12a40>
   23432:	cmove  rax,rdx
   23436:	test   r15,r15
   23439:	cmove  rcx,rdx
   2343d:	lea    rdx,[rsp+0x10]
   23442:	mov    r8,rax
   23445:	push   rdx
   23446:	push   rbx
   23447:	mov    rdx,r14
   2344a:	call   20f20 <g_str_equal@plt+0x13c60>
   2344f:	mov    rsi,QWORD PTR [rsp+0x20]
   23454:	pop    rax
   23455:	pop    rdx
   23456:	test   rsi,rsi
   23459:	je     2346b <g_str_equal@plt+0x161ab>
   2345b:	mov    rdi,r13
   2345e:	call   3a4c0 <g_str_equal@plt+0x2d200>
   23463:	mov    rdi,rbx
   23466:	call   d2b0 <g_free@plt>
   2346b:	mov    rax,QWORD PTR [rsp+0x18]
   23470:	xor    rax,QWORD PTR fs:0x28
   23479:	jne    2348a <g_str_equal@plt+0x161ca>
   2347b:	add    rsp,0x28
   2347f:	pop    rbx
   23480:	pop    rbp
   23481:	pop    r12
   23483:	pop    r13
   23485:	pop    r14
   23487:	pop    r15
   23489:	ret    
   2348a:	call   cd30 <__stack_chk_fail@plt>
   2348f:	nop
   23490:	push   r14
   23492:	push   r13
   23494:	mov    r13,rdi
   23497:	push   r12
   23499:	push   rbp
   2349a:	mov    edi,0x8
   2349f:	push   rbx
   234a0:	mov    rbp,rdx
   234a3:	mov    r14,rsi
   234a6:	mov    r12,rcx
   234a9:	sub    rsp,0x10
   234ad:	mov    rax,QWORD PTR fs:0x28
   234b6:	mov    QWORD PTR [rsp+0x8],rax
   234bb:	xor    eax,eax
   234bd:	mov    QWORD PTR [rsp],0x0
   234c5:	call   ce00 <g_malloc0@plt>
   234ca:	lea    rcx,[rip+0xffffffffffffc31f]        # 1f7f0 <g_str_equal@plt+0x12530>
   234d1:	mov    QWORD PTR [rax],rbp
   234d4:	test   rbp,rbp
   234d7:	mov    rbx,rax
   234da:	mov    eax,0x0
   234df:	lea    rdx,[rip+0x3a136]        # 5d61c <_fini@@Base+0xaec8>
   234e6:	cmove  rcx,rax
   234ea:	mov    rax,rsp
   234ed:	lea    r9,[rip+0xffffffffffffc81c]        # 1fd10 <g_str_equal@plt+0x12a50>
   234f4:	push   rax
   234f5:	push   rbx
   234f6:	xor    r8d,r8d
   234f9:	mov    rsi,r14
   234fc:	mov    rdi,r13
   234ff:	call   21080 <g_str_equal@plt+0x13dc0>
   23504:	mov    rsi,QWORD PTR [rsp+0x10]
   23509:	pop    rax
   2350a:	pop    rdx
   2350b:	test   rsi,rsi
   2350e:	je     23520 <g_str_equal@plt+0x16260>
   23510:	mov    rdi,r12
   23513:	call   3a4c0 <g_str_equal@plt+0x2d200>
   23518:	mov    rdi,rbx
   2351b:	call   d2b0 <g_free@plt>
   23520:	mov    rax,QWORD PTR [rsp+0x8]
   23525:	xor    rax,QWORD PTR fs:0x28
   2352e:	jne    2353d <g_str_equal@plt+0x1627d>
   23530:	add    rsp,0x10
   23534:	pop    rbx
   23535:	pop    rbp
   23536:	pop    r12
   23538:	pop    r13
   2353a:	pop    r14
   2353c:	ret    
   2353d:	call   cd30 <__stack_chk_fail@plt>
   23542:	nop    DWORD PTR [rax+0x0]
   23546:	nop    WORD PTR cs:[rax+rax*1+0x0]
   23550:	push   r14
   23552:	push   r13
   23554:	mov    r13,rdi
   23557:	push   r12
   23559:	push   rbp
   2355a:	mov    edi,0x8
   2355f:	push   rbx
   23560:	mov    rbp,rdx
   23563:	mov    r14,rsi
   23566:	mov    r12,rcx
   23569:	sub    rsp,0x10
   2356d:	mov    rax,QWORD PTR fs:0x28
   23576:	mov    QWORD PTR [rsp+0x8],rax
   2357b:	xor    eax,eax
   2357d:	mov    QWORD PTR [rsp],0x0
   23585:	call   ce00 <g_malloc0@plt>
   2358a:	lea    rcx,[rip+0xffffffffffffc25f]        # 1f7f0 <g_str_equal@plt+0x12530>
   23591:	mov    QWORD PTR [rax],rbp
   23594:	test   rbp,rbp
   23597:	mov    rbx,rax
   2359a:	mov    eax,0x0
   2359f:	lea    rdx,[rip+0x3a076]        # 5d61c <_fini@@Base+0xaec8>
   235a6:	cmove  rcx,rax
   235aa:	mov    rax,rsp
   235ad:	lea    r9,[rip+0xffffffffffffc75c]        # 1fd10 <g_str_equal@plt+0x12a50>
   235b4:	push   rax
   235b5:	push   rbx
   235b6:	xor    r8d,r8d
   235b9:	mov    rsi,r14
   235bc:	mov    rdi,r13
   235bf:	call   20f20 <g_str_equal@plt+0x13c60>
   235c4:	mov    rsi,QWORD PTR [rsp+0x10]
   235c9:	pop    rax
   235ca:	pop    rdx
   235cb:	test   rsi,rsi
   235ce:	je     235e0 <g_str_equal@plt+0x16320>
   235d0:	mov    rdi,r12
   235d3:	call   3a4c0 <g_str_equal@plt+0x2d200>
   235d8:	mov    rdi,rbx
   235db:	call   d2b0 <g_free@plt>
   235e0:	mov    rax,QWORD PTR [rsp+0x8]
   235e5:	xor    rax,QWORD PTR fs:0x28
   235ee:	jne    235fd <g_str_equal@plt+0x1633d>
   235f0:	add    rsp,0x10
   235f4:	pop    rbx
   235f5:	pop    rbp
   235f6:	pop    r12
   235f8:	pop    r13
   235fa:	pop    r14
   235fc:	ret    
   235fd:	call   cd30 <__stack_chk_fail@plt>
   23602:	nop    DWORD PTR [rax+0x0]
   23606:	nop    WORD PTR cs:[rax+rax*1+0x0]
   23610:	sub    rsp,0x8
   23614:	xor    r9d,r9d
   23617:	xor    r8d,r8d
   2361a:	push   rcx
   2361b:	lea    rcx,[rip+0xffffffffffffc34e]        # 1f970 <g_str_equal@plt+0x126b0>
   23622:	push   rdx
   23623:	lea    rdx,[rip+0x41782]        # 64dac <_fini@@Base+0x12658>
   2362a:	call   21080 <g_str_equal@plt+0x13dc0>
   2362f:	add    rsp,0x18
   23633:	ret    
   23634:	xchg   ax,ax
   23636:	nop    WORD PTR cs:[rax+rax*1+0x0]
   23640:	sub    rsp,0x8
   23644:	xor    r9d,r9d
   23647:	xor    r8d,r8d
   2364a:	push   rcx
   2364b:	lea    rcx,[rip+0xffffffffffffc31e]        # 1f970 <g_str_equal@plt+0x126b0>
   23652:	push   rdx
   23653:	lea    rdx,[rip+0x41752]        # 64dac <_fini@@Base+0x12658>
   2365a:	call   20f20 <g_str_equal@plt+0x13c60>
   2365f:	add    rsp,0x18
   23663:	ret    
   23664:	xchg   ax,ax
   23666:	nop    WORD PTR cs:[rax+rax*1+0x0]
   23670:	sub    rsp,0x8
   23674:	xor    r9d,r9d
   23677:	xor    r8d,r8d
   2367a:	push   rcx
   2367b:	lea    rcx,[rip+0xffffffffffffc33e]        # 1f9c0 <g_str_equal@plt+0x12700>
   23682:	push   rdx
   23683:	lea    rdx,[rip+0x41710]        # 64d9a <_fini@@Base+0x12646>
   2368a:	call   21080 <g_str_equal@plt+0x13dc0>
   2368f:	add    rsp,0x18
   23693:	ret    
   23694:	xchg   ax,ax
   23696:	nop    WORD PTR cs:[rax+rax*1+0x0]
   236a0:	sub    rsp,0x8
   236a4:	xor    r9d,r9d
   236a7:	xor    r8d,r8d
   236aa:	push   rcx
   236ab:	lea    rcx,[rip+0xffffffffffffc30e]        # 1f9c0 <g_str_equal@plt+0x12700>
   236b2:	push   rdx
   236b3:	lea    rdx,[rip+0x416e0]        # 64d9a <_fini@@Base+0x12646>
   236ba:	call   20f20 <g_str_equal@plt+0x13c60>
   236bf:	add    rsp,0x18
   236c3:	ret    
   236c4:	xchg   ax,ax
   236c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   236d0:	sub    rsp,0x8
   236d4:	xor    r9d,r9d
   236d7:	xor    r8d,r8d
   236da:	push   rcx
   236db:	lea    rcx,[rip+0xffffffffffffc32e]        # 1fa10 <g_str_equal@plt+0x12750>
   236e2:	push   rdx
   236e3:	lea    rdx,[rip+0x4169e]        # 64d88 <_fini@@Base+0x12634>
   236ea:	call   21080 <g_str_equal@plt+0x13dc0>
   236ef:	add    rsp,0x18
   236f3:	ret    
   236f4:	xchg   ax,ax
   236f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   23700:	sub    rsp,0x8
   23704:	xor    r9d,r9d
   23707:	xor    r8d,r8d
   2370a:	push   rcx
   2370b:	lea    rcx,[rip+0xffffffffffffc2fe]        # 1fa10 <g_str_equal@plt+0x12750>
   23712:	push   rdx
   23713:	lea    rdx,[rip+0x4166e]        # 64d88 <_fini@@Base+0x12634>
   2371a:	call   20f20 <g_str_equal@plt+0x13c60>
   2371f:	add    rsp,0x18
   23723:	ret    
   23724:	xchg   ax,ax
   23726:	nop    WORD PTR cs:[rax+rax*1+0x0]
   23730:	sub    rsp,0x8
   23734:	xor    r9d,r9d
   23737:	xor    r8d,r8d
   2373a:	push   rcx
   2373b:	lea    rcx,[rip+0xffffffffffffc31e]        # 1fa60 <g_str_equal@plt+0x127a0>
   23742:	push   rdx
   23743:	lea    rdx,[rip+0x4162c]        # 64d76 <_fini@@Base+0x12622>
   2374a:	call   21080 <g_str_equal@plt+0x13dc0>
   2374f:	add    rsp,0x18
   23753:	ret    
   23754:	xchg   ax,ax
   23756:	nop    WORD PTR cs:[rax+rax*1+0x0]
   23760:	sub    rsp,0x8
   23764:	xor    r9d,r9d
   23767:	xor    r8d,r8d
   2376a:	push   rcx
   2376b:	lea    rcx,[rip+0xffffffffffffc2ee]        # 1fa60 <g_str_equal@plt+0x127a0>
   23772:	push   rdx
   23773:	lea    rdx,[rip+0x415fc]        # 64d76 <_fini@@Base+0x12622>
   2377a:	call   20f20 <g_str_equal@plt+0x13c60>
   2377f:	add    rsp,0x18
   23783:	ret    
   23784:	xchg   ax,ax
   23786:	nop    WORD PTR cs:[rax+rax*1+0x0]
   23790:	push   rbp
   23791:	push   rbx
   23792:	mov    rbp,rdx
   23795:	mov    rdx,rcx
   23798:	sub    rsp,0x8
   2379c:	call   21000 <g_str_equal@plt+0x13d40>
   237a1:	test   rax,rax
   237a4:	je     237be <g_str_equal@plt+0x164fe>
   237a6:	mov    rdi,QWORD PTR [rax+0x10]
   237aa:	mov    rbx,rax
   237ad:	call   d2b0 <g_free@plt>
   237b2:	mov    rdi,rbp
   237b5:	call   c370 <g_strdup@plt>
   237ba:	mov    QWORD PTR [rbx+0x10],rax
   237be:	add    rsp,0x8
   237c2:	pop    rbx
   237c3:	pop    rbp
   237c4:	ret    
   237c5:	nop
   237c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   237d0:	push   r15
   237d2:	push   r14
   237d4:	mov    r14,rdi
   237d7:	push   r13
   237d9:	push   r12
   237db:	mov    r13,r8
   237de:	push   rbp
   237df:	push   rbx
   237e0:	mov    rbp,rdx
   237e3:	mov    rdi,rbp
   237e6:	mov    rdx,r8
   237e9:	mov    rbx,rcx
   237ec:	sub    rsp,0x28
   237f0:	mov    QWORD PTR [rsp+0x8],rsi
   237f5:	mov    rsi,rcx
   237f8:	mov    QWORD PTR [rsp+0x10],0x0
   23801:	mov    rax,QWORD PTR fs:0x28
   2380a:	mov    QWORD PTR [rsp+0x18],rax
   2380f:	xor    eax,eax
   23811:	call   21000 <g_str_equal@plt+0x13d40>
   23816:	test   rax,rax
   23819:	je     238ba <g_str_equal@plt+0x165fa>
   2381f:	mov    rdi,QWORD PTR [rax+0x8]
   23823:	lea    rsi,[rip+0x39c6b]        # 5d495 <_fini@@Base+0xad41>
   2382a:	xor    edx,edx
   2382c:	mov    r15,rax
   2382f:	call   32ab0 <g_str_equal@plt+0x257f0>
   23834:	test   eax,eax
   23836:	jne    238e0 <g_str_equal@plt+0x16620>
   2383c:	mov    rdi,QWORD PTR [r15+0x8]
   23840:	call   c370 <g_strdup@plt>
   23845:	mov    QWORD PTR [rsp],rax
   23849:	mov    edi,0x10
   2384e:	call   c500 <g_malloc@plt>
   23853:	mov    rdi,rbx
   23856:	mov    r12,rax
   23859:	mov    QWORD PTR [rax],rbp
   2385c:	call   c370 <g_strdup@plt>
   23861:	mov    QWORD PTR [r12+0x8],rax
   23866:	lea    rax,[rsp+0x10]
   2386b:	lea    rcx,[rip+0xffffffffffffda8e]        # 21300 <g_str_equal@plt+0x14040>
   23872:	lea    r9,[rip+0xffffffffffffbaf7]        # 1f370 <g_str_equal@plt+0x120b0>
   23879:	lea    r8,[rip+0xffffffffffffdb30]        # 213b0 <g_str_equal@plt+0x140f0>
   23880:	mov    rdi,r14
   23883:	push   rax
   23884:	push   r12
   23886:	mov    rsi,QWORD PTR [rsp+0x18]
   2388b:	mov    rdx,QWORD PTR [rsp+0x10]
   23890:	call   21080 <g_str_equal@plt+0x13dc0>
   23895:	mov    rsi,QWORD PTR [rsp+0x20]
   2389a:	pop    rdx
   2389b:	pop    rcx
   2389c:	test   rsi,rsi
   2389f:	je     23900 <g_str_equal@plt+0x16640>
   238a1:	mov    rdi,r13
   238a4:	call   3a4c0 <g_str_equal@plt+0x2d200>
   238a9:	mov    rdi,r12
   238ac:	call   d2b0 <g_free@plt>
   238b1:	mov    rdi,QWORD PTR [rsp]
   238b5:	call   d2b0 <g_free@plt>
   238ba:	mov    rax,QWORD PTR [rsp+0x18]
   238bf:	xor    rax,QWORD PTR fs:0x28
   238c8:	jne    23923 <g_str_equal@plt+0x16663>
   238ca:	add    rsp,0x28
   238ce:	pop    rbx
   238cf:	pop    rbp
   238d0:	pop    r12
   238d2:	pop    r13
   238d4:	pop    r14
   238d6:	pop    r15
   238d8:	ret    
   238d9:	nop    DWORD PTR [rax+0x0]
   238e0:	mov    rax,QWORD PTR [r15+0x8]
   238e4:	lea    rdi,[rip+0x39d3b]        # 5d626 <_fini@@Base+0xaed2>
   238eb:	lea    rsi,[rax+0x5]
   238ef:	xor    eax,eax
   238f1:	call   c740 <g_strdup_printf@plt>
   238f6:	mov    QWORD PTR [rsp],rax
   238fa:	jmp    23849 <g_str_equal@plt+0x16589>
   238ff:	nop
   23900:	lea    rcx,[rip+0xfffffffffffff249]        # 22b50 <g_str_equal@plt+0x15890>
   23907:	mov    rsi,QWORD PTR [rax]
   2390a:	mov    rdi,r14
   2390d:	mov    QWORD PTR [rax+0x28],rcx
   23911:	mov    rdx,QWORD PTR [r15+0x10]
   23915:	lea    rcx,[rip+0x26236c]        # 285c88 <stdout@@GLIBC_2.2.5+0x1340>
   2391c:	call   23790 <g_str_equal@plt+0x164d0>
   23921:	jmp    238b1 <g_str_equal@plt+0x165f1>
   23923:	call   cd30 <__stack_chk_fail@plt>
   23928:	nop    DWORD PTR [rax+rax*1+0x0]
   23930:	push   r13
   23932:	push   r12
   23934:	mov    r13,rcx
   23937:	push   rbp
   23938:	push   rbx
   23939:	mov    rbp,rsi
   2393c:	mov    r12,rdx
   2393f:	sub    rsp,0x8
   23943:	mov    rdi,QWORD PTR [rdi+0x58]
   23947:	call   cdb0 <g_hash_table_lookup@plt>
   2394c:	test   rax,rax
   2394f:	je     23978 <g_str_equal@plt+0x166b8>
   23951:	mov    rdi,QWORD PTR [rax+0x10]
   23955:	mov    rbx,rax
   23958:	call   d2b0 <g_free@plt>
   2395d:	mov    rdi,r12
   23960:	call   c370 <g_strdup@plt>
   23965:	mov    QWORD PTR [rbx+0x10],rax
   23969:	add    rsp,0x8
   2396d:	pop    rbx
   2396e:	pop    rbp
   2396f:	pop    r12
   23971:	pop    r13
   23973:	ret    
   23974:	nop    DWORD PTR [rax+0x0]
   23978:	add    rsp,0x8
   2397c:	mov    r9,rbp
   2397f:	mov    rdi,r13
   23982:	pop    rbx
   23983:	pop    rbp
   23984:	pop    r12
   23986:	pop    r13
   23988:	lea    r8,[rip+0x39be3]        # 5d572 <_fini@@Base+0xae1e>
   2398f:	lea    rcx,[rip+0x39fca]        # 5d960 <_fini@@Base+0xb20c>
   23996:	lea    rsi,[rip+0x39c9b]        # 5d638 <_fini@@Base+0xaee4>
   2399d:	mov    edx,0x972
   239a2:	xor    eax,eax
   239a4:	jmp    3a090 <g_str_equal@plt+0x2cdd0>
   239a9:	nop    DWORD PTR [rax+0x0]
   239b0:	lea    rdi,[rip+0x25cde9]        # 2807a0 <_fini@@Base+0x22e04c>
   239b7:	jmp    202f0 <g_str_equal@plt+0x13030>
   239bc:	nop    DWORD PTR [rax+0x0]
   239c0:	push   r15
   239c2:	push   r14
   239c4:	xor    edx,edx
   239c6:	push   r13
   239c8:	push   r12
   239ca:	mov    r12,rdi
   239cd:	push   rbp
   239ce:	push   rbx
   239cf:	mov    rdi,rsi
   239d2:	lea    rsi,[rip+0x3cede]        # 608b7 <_fini@@Base+0xe163>
   239d9:	sub    rsp,0x8
   239dd:	call   cd90 <g_strsplit@plt>
   239e2:	test   rax,rax
   239e5:	je     23a92 <g_str_equal@plt+0x167d2>
   239eb:	mov    r13,rax
   239ee:	mov    rax,QWORD PTR [rax]
   239f1:	test   rax,rax
   239f4:	je     23a92 <g_str_equal@plt+0x167d2>
   239fa:	cmp    BYTE PTR [rax],0x0
   239fd:	jne    23a92 <g_str_equal@plt+0x167d2>
   23a03:	mov    rsi,QWORD PTR [r13+0x8]
   23a07:	lea    r15,[r13+0x8]
   23a0b:	mov    ebp,0x1
   23a10:	lea    r14,[rip+0x39b88]        # 5d59f <_fini@@Base+0xae4b>
   23a17:	mov    rbx,r12
   23a1a:	test   rsi,rsi
   23a1d:	jne    23a3e <g_str_equal@plt+0x1677e>
   23a1f:	jmp    23a78 <g_str_equal@plt+0x167b8>
   23a21:	nop    DWORD PTR [rax+0x0]
   23a28:	add    ebp,0x1
   23a2b:	mov    r12,rbx
   23a2e:	movsxd rax,ebp
   23a31:	lea    r15,[r13+rax*8+0x0]
   23a36:	mov    rsi,QWORD PTR [r15]
   23a39:	test   rsi,rsi
   23a3c:	je     23a78 <g_str_equal@plt+0x167b8>
   23a3e:	mov    rdi,r12
   23a41:	call   22990 <g_str_equal@plt+0x156d0>
   23a46:	test   rax,rax
   23a49:	mov    rbx,rax
   23a4c:	jne    23a28 <g_str_equal@plt+0x16768>
   23a4e:	mov    rdi,r14
   23a51:	call   20420 <g_str_equal@plt+0x13160>
   23a56:	mov    rsi,QWORD PTR [r15]
   23a59:	mov    rbx,rax
   23a5c:	mov    rdi,r12
   23a5f:	xor    ecx,ecx
   23a61:	mov    rdx,rax
   23a64:	call   21ff0 <g_str_equal@plt+0x14d30>
   23a69:	mov    rdi,rbx
   23a6c:	call   20b90 <g_str_equal@plt+0x138d0>
   23a71:	jmp    23a28 <g_str_equal@plt+0x16768>
   23a73:	nop    DWORD PTR [rax+rax*1+0x0]
   23a78:	mov    rdi,r13
   23a7b:	call   d030 <g_strfreev@plt>
   23a80:	add    rsp,0x8
   23a84:	mov    rax,rbx
   23a87:	pop    rbx
   23a88:	pop    rbp
   23a89:	pop    r12
   23a8b:	pop    r13
   23a8d:	pop    r14
   23a8f:	pop    r15
   23a91:	ret    
   23a92:	lea    rcx,[rip+0x3a30f]        # 5dda8 <_fini@@Base+0xb654>
   23a99:	lea    rsi,[rip+0x3a290]        # 5dd30 <_fini@@Base+0xb5dc>
   23aa0:	lea    rdi,[rip+0x3a2c9]        # 5dd70 <_fini@@Base+0xb61c>
   23aa7:	mov    edx,0x23
   23aac:	call   c390 <__assert_fail@plt>
   23ab1:	nop    WORD PTR cs:[rax+rax*1+0x0]
   23abb:	nop    DWORD PTR [rax+rax*1+0x0]
   23ac0:	push   r13
   23ac2:	push   r12
   23ac4:	mov    r13,rcx
   23ac7:	push   rbp
   23ac8:	push   rbx
   23ac9:	mov    rbp,rdi
   23acc:	mov    r12,rdx
   23acf:	mov    rdi,rsi
   23ad2:	sub    rsp,0x8
   23ad6:	call   2b090 <g_str_equal@plt+0x1ddd0>
   23adb:	mov    rdi,rbp
   23ade:	mov    rcx,r13
   23ae1:	mov    rdx,r12
   23ae4:	mov    rsi,rax
   23ae7:	mov    rbx,rax
   23aea:	call   21320 <g_str_equal@plt+0x14060>
   23aef:	add    rsp,0x8
   23af3:	mov    rdi,rbx
   23af6:	pop    rbx
   23af7:	pop    rbp
   23af8:	pop    r12
   23afa:	pop    r13
   23afc:	jmp    27d00 <g_str_equal@plt+0x1aa40>
   23b01:	nop    DWORD PTR [rax+rax*1+0x0]
   23b06:	nop    WORD PTR cs:[rax+rax*1+0x0]
   23b10:	push   r14
   23b12:	push   r13
   23b14:	mov    r13,rdi
   23b17:	push   r12
   23b19:	push   rbp
   23b1a:	mov    r14,rsi
   23b1d:	push   rbx
   23b1e:	mov    r12,rdx
   23b21:	sub    rsp,0x20
   23b25:	lea    rbp,[rsp+0x8]
   23b2a:	mov    QWORD PTR [rsp+0x8],0x0
   23b33:	mov    QWORD PTR [rsp+0x10],0x0
   23b3c:	mov    rax,QWORD PTR fs:0x28
   23b45:	mov    QWORD PTR [rsp+0x18],rax
   23b4a:	xor    eax,eax
   23b4c:	mov    rdi,rbp
   23b4f:	call   2b910 <g_str_equal@plt+0x1e650>
   23b54:	lea    rcx,[rsp+0x10]
   23b59:	mov    rsi,rax
   23b5c:	mov    rdx,r14
   23b5f:	mov    rdi,r13
   23b62:	mov    rbx,rax
   23b65:	call   21270 <g_str_equal@plt+0x13fb0>
   23b6a:	mov    rsi,QWORD PTR [rsp+0x10]
   23b6f:	test   rsi,rsi
   23b72:	je     23bb0 <g_str_equal@plt+0x168f0>
   23b74:	mov    rdi,r12
   23b77:	call   3a4c0 <g_str_equal@plt+0x2d200>
   23b7c:	mov    rdi,rbx
   23b7f:	call   27d00 <g_str_equal@plt+0x1aa40>
   23b84:	mov    rdx,QWORD PTR [rsp+0x18]
   23b89:	xor    rdx,QWORD PTR fs:0x28
   23b92:	mov    rax,QWORD PTR [rsp+0x8]
   23b97:	jne    23bc2 <g_str_equal@plt+0x16902>
   23b99:	add    rsp,0x20
   23b9d:	pop    rbx
   23b9e:	pop    rbp
   23b9f:	pop    r12
   23ba1:	pop    r13
   23ba3:	pop    r14
   23ba5:	ret    
   23ba6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   23bb0:	mov    rsi,rbp
   23bb3:	mov    rdi,rbx
   23bb6:	call   27bf0 <g_str_equal@plt+0x1a930>
   23bbb:	mov    rsi,QWORD PTR [rsp+0x10]
   23bc0:	jmp    23b74 <g_str_equal@plt+0x168b4>
   23bc2:	call   cd30 <__stack_chk_fail@plt>
   23bc7:	nop    WORD PTR [rax+rax*1+0x0]
   23bd0:	lea    rdi,[rip+0x25cc49]        # 280820 <_fini@@Base+0x22e0cc>
   23bd7:	jmp    202f0 <g_str_equal@plt+0x13030>
   23bdc:	nop    DWORD PTR [rax+0x0]
   23be0:	push   rbp
   23be1:	push   rbx
   23be2:	mov    rbp,rsi
   23be5:	lea    rsi,[rip+0x352c4]        # 58eb0 <_fini@@Base+0x675c>
   23bec:	sub    rsp,0x8
   23bf0:	call   20590 <g_str_equal@plt+0x132d0>
   23bf5:	test   rax,rax
   23bf8:	je     23c40 <g_str_equal@plt+0x16980>
   23bfa:	mov    rdi,rax
   23bfd:	mov    rbx,rax
   23c00:	call   20920 <g_str_equal@plt+0x13660>
   23c05:	lea    r8,[rip+0x3a354]        # 5df60 <_fini@@Base+0xb80c>
   23c0c:	lea    rdx,[rip+0x3a1e5]        # 5ddf8 <_fini@@Base+0xb6a4>
   23c13:	lea    rsi,[rip+0x35296]        # 58eb0 <_fini@@Base+0x675c>
   23c1a:	mov    ecx,0x16
   23c1f:	mov    rdi,rax
   23c22:	call   20770 <g_str_equal@plt+0x134b0>
   23c27:	mov    rax,QWORD PTR [rax+0x70]
   23c2b:	test   rax,rax
   23c2e:	je     23c40 <g_str_equal@plt+0x16980>
   23c30:	add    rsp,0x8
   23c34:	mov    rsi,rbp
   23c37:	mov    rdi,rbx
   23c3a:	pop    rbx
   23c3b:	pop    rbp
   23c3c:	jmp    rax
   23c3e:	xchg   ax,ax
   23c40:	add    rsp,0x8
   23c44:	pop    rbx
   23c45:	pop    rbp
   23c46:	ret    
   23c47:	nop    WORD PTR [rax+rax*1+0x0]
   23c50:	push   rbx
   23c51:	mov    rbx,rdi
   23c54:	call   20920 <g_str_equal@plt+0x13660>
   23c59:	lea    r8,[rip+0x3a2e0]        # 5df40 <_fini@@Base+0xb7ec>
   23c60:	lea    rdx,[rip+0x3a191]        # 5ddf8 <_fini@@Base+0xb6a4>
   23c67:	lea    rsi,[rip+0x35242]        # 58eb0 <_fini@@Base+0x675c>
   23c6e:	mov    ecx,0x1f
   23c73:	mov    rdi,rax
   23c76:	call   20770 <g_str_equal@plt+0x134b0>
   23c7b:	mov    rax,QWORD PTR [rax+0x78]
   23c7f:	test   rax,rax
   23c82:	je     23c90 <g_str_equal@plt+0x169d0>
   23c84:	mov    rdi,rbx
   23c87:	pop    rbx
   23c88:	jmp    rax
   23c8a:	nop    WORD PTR [rax+rax*1+0x0]
   23c90:	mov    eax,0x1
   23c95:	pop    rbx
   23c96:	ret    
   23c97:	nop    WORD PTR [rax+rax*1+0x0]
   23ca0:	push   r15
   23ca2:	push   r14
   23ca4:	mov    r14,r8
   23ca7:	push   r13
   23ca9:	push   r12
   23cab:	mov    r13,rdi
   23cae:	push   rbp
   23caf:	push   rbx
   23cb0:	mov    r12,rdx
   23cb3:	mov    rbp,rcx
   23cb6:	sub    rsp,0x28
   23cba:	mov    rax,QWORD PTR fs:0x28
   23cc3:	mov    QWORD PTR [rsp+0x18],rax
   23cc8:	xor    eax,eax
   23cca:	mov    QWORD PTR [rsp+0x8],rsi
   23ccf:	mov    QWORD PTR [rsp+0x10],0x0
   23cd8:	call   20950 <g_str_equal@plt+0x13690>
   23cdd:	test   rax,rax
   23ce0:	mov    rbx,rax
   23ce3:	je     23ea0 <g_str_equal@plt+0x16be0>
   23ce9:	lea    rsi,[rip+0x351c0]        # 58eb0 <_fini@@Base+0x675c>
   23cf0:	mov    rdi,rax
   23cf3:	call   20450 <g_str_equal@plt+0x13190>
   23cf8:	test   rax,rax
   23cfb:	je     23ed0 <g_str_equal@plt+0x16c10>
   23d01:	mov    rdi,rbx
   23d04:	call   20930 <g_str_equal@plt+0x13670>
   23d09:	test   al,al
   23d0b:	jne    23e70 <g_str_equal@plt+0x16bb0>
   23d11:	test   r12,r12
   23d14:	je     23f01 <g_str_equal@plt+0x16c41>
   23d1a:	mov    rdi,r13
   23d1d:	lea    r13,[rsp+0x10]
   23d22:	call   20420 <g_str_equal@plt+0x13160>
   23d27:	xor    esi,esi
   23d29:	xor    ecx,ecx
   23d2b:	xor    edx,edx
   23d2d:	mov    r8,r13
   23d30:	mov    rdi,rbp
   23d33:	mov    rbx,rax
   23d36:	call   27da0 <g_str_equal@plt+0x1aae0>
   23d3b:	mov    rsi,QWORD PTR [rsp+0x10]
   23d40:	test   rsi,rsi
   23d43:	je     23d80 <g_str_equal@plt+0x16ac0>
   23d45:	mov    rdi,r14
   23d48:	call   3a4c0 <g_str_equal@plt+0x2d200>
   23d4d:	mov    rdi,rbx
   23d50:	xor    ebx,ebx
   23d52:	call   20b90 <g_str_equal@plt+0x138d0>
   23d57:	mov    rcx,QWORD PTR [rsp+0x18]
   23d5c:	xor    rcx,QWORD PTR fs:0x28
   23d65:	mov    rax,rbx
   23d68:	jne    23efc <g_str_equal@plt+0x16c3c>
   23d6e:	add    rsp,0x28
   23d72:	pop    rbx
   23d73:	pop    rbp
   23d74:	pop    r12
   23d76:	pop    r13
   23d78:	pop    r14
   23d7a:	pop    r15
   23d7c:	ret    
   23d7d:	nop    DWORD PTR [rax]
   23d80:	mov    rdi,r12
   23d83:	call   2f0b0 <g_str_equal@plt+0x21df0>
   23d88:	test   rax,rax
   23d8b:	mov    r15,rax
   23d8e:	jne    23daf <g_str_equal@plt+0x16aef>
   23d90:	jmp    23e50 <g_str_equal@plt+0x16b90>
   23d95:	nop    DWORD PTR [rax]
   23d98:	mov    rsi,r15
   23d9b:	mov    rdi,r12
   23d9e:	call   2f0e0 <g_str_equal@plt+0x21e20>
   23da3:	test   rax,rax
   23da6:	mov    r15,rax
   23da9:	je     23e50 <g_str_equal@plt+0x16b90>
   23daf:	mov    rdx,QWORD PTR [r15]
   23db2:	mov    rcx,r13
   23db5:	mov    rsi,rbp
   23db8:	mov    rdi,rbx
   23dbb:	call   21320 <g_str_equal@plt+0x14060>
   23dc0:	cmp    QWORD PTR [rsp+0x10],0x0
   23dc6:	je     23d98 <g_str_equal@plt+0x16ad8>
   23dc8:	xor    esi,esi
   23dca:	mov    rdi,rbp
   23dcd:	call   28000 <g_str_equal@plt+0x1ad40>
   23dd2:	mov    rsi,QWORD PTR [rsp+0x10]
   23dd7:	test   rsi,rsi
   23dda:	jne    23d45 <g_str_equal@plt+0x16a85>
   23de0:	call   21f90 <g_str_equal@plt+0x14cd0>
   23de5:	mov    rsi,QWORD PTR [rsp+0x8]
   23dea:	mov    rcx,r13
   23ded:	mov    rdx,rbx
   23df0:	mov    rdi,rax
   23df3:	call   21ff0 <g_str_equal@plt+0x14d30>
   23df8:	mov    rsi,QWORD PTR [rsp+0x10]
   23dfd:	test   rsi,rsi
   23e00:	jne    23d45 <g_str_equal@plt+0x16a85>
   23e06:	mov    rsi,r13
   23e09:	mov    rdi,rbx
   23e0c:	call   23be0 <g_str_equal@plt+0x16920>
   23e11:	cmp    QWORD PTR [rsp+0x10],0x0
   23e17:	je     23d57 <g_str_equal@plt+0x16a97>
   23e1d:	call   21f90 <g_str_equal@plt+0x14cd0>
   23e22:	mov    rsi,QWORD PTR [rsp+0x8]
   23e27:	lea    rdx,[rip+0x261e5a]        # 285c88 <stdout@@GLIBC_2.2.5+0x1340>
   23e2e:	mov    rdi,rax
   23e31:	call   21200 <g_str_equal@plt+0x13f40>
   23e36:	mov    rsi,QWORD PTR [rsp+0x10]
   23e3b:	test   rsi,rsi
   23e3e:	je     23d57 <g_str_equal@plt+0x16a97>
   23e44:	jmp    23d45 <g_str_equal@plt+0x16a85>
   23e49:	nop    DWORD PTR [rax+0x0]
   23e50:	cmp    QWORD PTR [rsp+0x10],0x0
   23e56:	jne    23dc8 <g_str_equal@plt+0x16b08>
   23e5c:	mov    rsi,r13
   23e5f:	mov    rdi,rbp
   23e62:	call   27f50 <g_str_equal@plt+0x1ac90>
   23e67:	jmp    23dc8 <g_str_equal@plt+0x16b08>
   23e6c:	nop    DWORD PTR [rax+0x0]
   23e70:	lea    r8,[rip+0x3975d]        # 5d5d4 <_fini@@Base+0xae80>
   23e77:	lea    rcx,[rip+0x3a0a2]        # 5df20 <_fini@@Base+0xb7cc>
   23e7e:	lea    rsi,[rip+0x39f73]        # 5ddf8 <_fini@@Base+0xb6a4>
   23e85:	mov    r9,r13
   23e88:	mov    edx,0x3e
   23e8d:	mov    rdi,r14
   23e90:	xor    eax,eax
   23e92:	xor    ebx,ebx
   23e94:	call   3a090 <g_str_equal@plt+0x2cdd0>
   23e99:	jmp    23d57 <g_str_equal@plt+0x16a97>
   23e9e:	xchg   ax,ax
   23ea0:	lea    r8,[rip+0x39715]        # 5d5bc <_fini@@Base+0xae68>
   23ea7:	lea    rcx,[rip+0x3a072]        # 5df20 <_fini@@Base+0xb7cc>
   23eae:	lea    rsi,[rip+0x39f43]        # 5ddf8 <_fini@@Base+0xb6a4>
   23eb5:	mov    r9,r13
   23eb8:	mov    edx,0x33
   23ebd:	mov    rdi,r14
   23ec0:	xor    eax,eax
   23ec2:	call   3a090 <g_str_equal@plt+0x2cdd0>
   23ec7:	jmp    23d57 <g_str_equal@plt+0x16a97>
   23ecc:	nop    DWORD PTR [rax+0x0]
   23ed0:	lea    r8,[rip+0x39f69]        # 5de40 <_fini@@Base+0xb6ec>
   23ed7:	lea    rcx,[rip+0x3a042]        # 5df20 <_fini@@Base+0xb7cc>
   23ede:	lea    rsi,[rip+0x39f13]        # 5ddf8 <_fini@@Base+0xb6a4>
   23ee5:	mov    r9,r13
   23ee8:	mov    edx,0x39
   23eed:	mov    rdi,r14
   23ef0:	call   3a090 <g_str_equal@plt+0x2cdd0>
   23ef5:	xor    ebx,ebx
   23ef7:	jmp    23d57 <g_str_equal@plt+0x16a97>
   23efc:	call   cd30 <__stack_chk_fail@plt>
   23f01:	lea    rcx,[rip+0x39ff8]        # 5df00 <_fini@@Base+0xb7ac>
   23f08:	lea    rsi,[rip+0x39ee9]        # 5ddf8 <_fini@@Base+0xb6a4>
   23f0f:	lea    rdi,[rip+0x39ea0]        # 5ddb6 <_fini@@Base+0xb662>
   23f16:	mov    edx,0x42
   23f1b:	call   c390 <__assert_fail@plt>
   23f20:	push   r15
   23f22:	push   r14
   23f24:	mov    r14,rsi
   23f27:	push   r13
   23f29:	push   r12
   23f2b:	push   rbp
   23f2c:	push   rbx
   23f2d:	mov    rbx,rdi
   23f30:	sub    rsp,0x8
   23f34:	call   40a30 <g_str_equal@plt+0x33770>
   23f39:	lea    rsi,[rip+0x39e7c]        # 5ddbc <_fini@@Base+0xb668>
   23f40:	mov    rdi,rbx
   23f43:	mov    r13,rax
   23f46:	call   40190 <g_str_equal@plt+0x32ed0>
   23f4b:	test   rax,rax
   23f4e:	je     24068 <g_str_equal@plt+0x16da8>
   23f54:	test   r13,r13
   23f57:	mov    rbp,rax
   23f5a:	je     24010 <g_str_equal@plt+0x16d50>
   23f60:	xor    esi,esi
   23f62:	mov    rdi,rbx
   23f65:	call   40a40 <g_str_equal@plt+0x33780>
   23f6a:	xor    esi,esi
   23f6c:	mov    rdi,rbx
   23f6f:	call   40f80 <g_str_equal@plt+0x33cc0>
   23f74:	mov    rdi,rbx
   23f77:	mov    r12,rax
   23f7a:	call   2da70 <g_str_equal@plt+0x207b0>
   23f7f:	mov    r8,r14
   23f82:	mov    rcx,rax
   23f85:	mov    rdx,r12
   23f88:	mov    rsi,r13
   23f8b:	mov    r15,rax
   23f8e:	mov    rdi,rbp
   23f91:	call   23ca0 <g_str_equal@plt+0x169e0>
   23f96:	mov    rdi,r15
   23f99:	mov    r14,rax
   23f9c:	call   27d00 <g_str_equal@plt+0x1aa40>
   23fa1:	mov    rsi,r13
   23fa4:	mov    rdi,rbx
   23fa7:	call   40a40 <g_str_equal@plt+0x33780>
   23fac:	lea    rcx,[rip+0x261cd5]        # 285c88 <stdout@@GLIBC_2.2.5+0x1340>
   23fb3:	lea    rsi,[rip+0x39e02]        # 5ddbc <_fini@@Base+0xb668>
   23fba:	mov    rdx,rbp
   23fbd:	mov    rdi,rbx
   23fc0:	call   40340 <g_str_equal@plt+0x33080>
   23fc5:	mov    rdi,rbp
   23fc8:	call   d2b0 <g_free@plt>
   23fcd:	test   r12,r12
   23fd0:	je     23fee <g_str_equal@plt+0x16d2e>
   23fd2:	mov    rdx,QWORD PTR [r12+0x8]
   23fd7:	test   rdx,rdx
   23fda:	je     2409b <g_str_equal@plt+0x16ddb>
   23fe0:	sub    rdx,0x1
   23fe4:	test   rdx,rdx
   23fe7:	mov    QWORD PTR [r12+0x8],rdx
   23fec:	je     24000 <g_str_equal@plt+0x16d40>
   23fee:	add    rsp,0x8
   23ff2:	mov    rax,r14
   23ff5:	pop    rbx
   23ff6:	pop    rbp
   23ff7:	pop    r12
   23ff9:	pop    r13
   23ffb:	pop    r14
   23ffd:	pop    r15
   23fff:	ret    
   24000:	mov    rdi,r12
   24003:	call   30300 <g_str_equal@plt+0x23040>
   24008:	jmp    23fee <g_str_equal@plt+0x16d2e>
   2400a:	nop    WORD PTR [rax+rax*1+0x0]
   24010:	lea    r9,[rip+0x416ca]        # 656e1 <_fini@@Base+0x12f8d>
   24017:	lea    r8,[rip+0x39da7]        # 5ddc5 <_fini@@Base+0xb671>
   2401e:	lea    rcx,[rip+0x39ebb]        # 5dee0 <_fini@@Base+0xb78c>
   24025:	lea    rsi,[rip+0x39dcc]        # 5ddf8 <_fini@@Base+0xb6a4>
   2402c:	mov    rdi,r14
   2402f:	xor    eax,eax
   24031:	mov    edx,0x79
   24036:	xor    r14d,r14d
   24039:	call   3a090 <g_str_equal@plt+0x2cdd0>
   2403e:	lea    rcx,[rip+0x261c43]        # 285c88 <stdout@@GLIBC_2.2.5+0x1340>
   24045:	lea    rsi,[rip+0x39d70]        # 5ddbc <_fini@@Base+0xb668>
   2404c:	mov    rdx,rbp
   2404f:	mov    rdi,rbx
   24052:	call   40340 <g_str_equal@plt+0x33080>
   24057:	mov    rdi,rbp
   2405a:	call   d2b0 <g_free@plt>
   2405f:	jmp    23fee <g_str_equal@plt+0x16d2e>
   24061:	nop    DWORD PTR [rax+0x0]
   24068:	lea    r9,[rip+0x39d4d]        # 5ddbc <_fini@@Base+0xb668>
   2406f:	lea    r8,[rip+0x39d4f]        # 5ddc5 <_fini@@Base+0xb671>
   24076:	lea    rcx,[rip+0x39e63]        # 5dee0 <_fini@@Base+0xb78c>
   2407d:	lea    rsi,[rip+0x39d74]        # 5ddf8 <_fini@@Base+0xb6a4>
   24084:	mov    rdi,r14
   24087:	mov    edx,0x75
   2408c:	xor    eax,eax
   2408e:	xor    r14d,r14d
   24091:	call   3a090 <g_str_equal@plt+0x2cdd0>
   24096:	jmp    23fee <g_str_equal@plt+0x16d2e>
   2409b:	lea    rcx,[rip+0x39e1e]        # 5dec0 <_fini@@Base+0xb76c>
   240a2:	lea    rsi,[rip+0x395ef]        # 5d698 <_fini@@Base+0xaf44>
   240a9:	lea    rdi,[rip+0x3943f]        # 5d4ef <_fini@@Base+0xad9b>
   240b0:	mov    edx,0x62
   240b5:	call   c390 <__assert_fail@plt>
   240ba:	nop    WORD PTR [rax+rax*1+0x0]
   240c0:	push   rbp
   240c1:	push   rbx
   240c2:	mov    rbp,rsi
   240c5:	lea    rsi,[rip+0x39cf0]        # 5ddbc <_fini@@Base+0xb668>
   240cc:	mov    rbx,rdi
   240cf:	mov    rdi,rbp
   240d2:	sub    rsp,0x18
   240d6:	mov    rax,QWORD PTR fs:0x28
   240df:	mov    QWORD PTR [rsp+0x8],rax
   240e4:	xor    eax,eax
   240e6:	mov    QWORD PTR [rsp],0x0
   240ee:	call   400b0 <g_str_equal@plt+0x32df0>
   240f3:	test   rax,rax
   240f6:	je     24106 <g_str_equal@plt+0x16e46>
   240f8:	test   rbx,rbx
   240fb:	je     24106 <g_str_equal@plt+0x16e46>
   240fd:	mov    rdi,rax
   24100:	call   rbx
   24102:	test   al,al
   24104:	je     2411e <g_str_equal@plt+0x16e5e>
   24106:	mov    rsi,rsp
   24109:	mov    rdi,rbp
   2410c:	call   23f20 <g_str_equal@plt+0x16c60>
   24111:	test   rax,rax
   24114:	je     24137 <g_str_equal@plt+0x16e77>
   24116:	mov    rdi,rax
   24119:	call   20b90 <g_str_equal@plt+0x138d0>
   2411e:	xor    eax,eax
   24120:	mov    rdx,QWORD PTR [rsp+0x8]
   24125:	xor    rdx,QWORD PTR fs:0x28
   2412e:	jne    24147 <g_str_equal@plt+0x16e87>
   24130:	add    rsp,0x18
   24134:	pop    rbx
   24135:	pop    rbp
   24136:	ret    
   24137:	mov    rdi,QWORD PTR [rsp]
   2413b:	call   39e30 <g_str_equal@plt+0x2cb70>
   24140:	mov    eax,0xffffffff
   24145:	jmp    24120 <g_str_equal@plt+0x16e60>
   24147:	call   cd30 <__stack_chk_fail@plt>
   2414c:	nop    DWORD PTR [rax+0x0]
   24150:	push   r12
   24152:	push   rbp
   24153:	mov    rbp,rdi
   24156:	push   rbx
   24157:	mov    r12,rsi
   2415a:	call   21f90 <g_str_equal@plt+0x14cd0>
   2415f:	mov    rsi,rbp
   24162:	mov    rdi,rax
   24165:	call   22990 <g_str_equal@plt+0x156d0>
   2416a:	test   rax,rax
   2416d:	je     24210 <g_str_equal@plt+0x16f50>
   24173:	lea    r8,[rip+0x39d26]        # 5dea0 <_fini@@Base+0xb74c>
   2417a:	lea    rdx,[rip+0x39c77]        # 5ddf8 <_fini@@Base+0xb6a4>
   24181:	lea    rsi,[rip+0x34d28]        # 58eb0 <_fini@@Base+0x675c>
   24188:	mov    ecx,0xb1
   2418d:	mov    rdi,rax
   24190:	mov    rbx,rax
   24193:	call   205c0 <g_str_equal@plt+0x13300>
   24198:	mov    rdi,rax
   2419b:	call   23c50 <g_str_equal@plt+0x16990>
   241a0:	test   al,al
   241a2:	je     241e0 <g_str_equal@plt+0x16f20>
   241a4:	lea    rsi,[rip+0x261add]        # 285c88 <stdout@@GLIBC_2.2.5+0x1340>
   241ab:	lea    rdi,[rip+0x3c025]        # 601d7 <_fini@@Base+0xda83>
   241b2:	call   3c140 <g_str_equal@plt+0x2ee80>
   241b7:	mov    rsi,rbp
   241ba:	mov    rdi,rax
   241bd:	call   405d0 <g_str_equal@plt+0x33310>
   241c2:	mov    rdi,rax
   241c5:	call   40a50 <g_str_equal@plt+0x33790>
   241ca:	mov    rdi,rbx
   241cd:	pop    rbx
   241ce:	pop    rbp
   241cf:	pop    r12
   241d1:	jmp    20400 <g_str_equal@plt+0x13140>
   241d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   241e0:	pop    rbx
   241e1:	mov    r9,rbp
   241e4:	mov    rdi,r12
   241e7:	lea    r8,[rip+0x39c82]        # 5de70 <_fini@@Base+0xb71c>
   241ee:	pop    rbp
   241ef:	pop    r12
   241f1:	lea    rcx,[rip+0x39ca8]        # 5dea0 <_fini@@Base+0xb74c>
   241f8:	lea    rsi,[rip+0x39bf9]        # 5ddf8 <_fini@@Base+0xb6a4>
   241ff:	mov    edx,0xb2
   24204:	jmp    3a090 <g_str_equal@plt+0x2cdd0>
   24209:	nop    DWORD PTR [rax+0x0]
   24210:	pop    rbx
   24211:	mov    r9,rbp
   24214:	mov    rdi,r12
   24217:	lea    r8,[rip+0x39bc1]        # 5dddf <_fini@@Base+0xb68b>
   2421e:	pop    rbp
   2421f:	pop    r12
   24221:	lea    rcx,[rip+0x39c78]        # 5dea0 <_fini@@Base+0xb74c>
   24228:	lea    rsi,[rip+0x39bc9]        # 5ddf8 <_fini@@Base+0xb6a4>
   2422f:	mov    edx,0xad
   24234:	xor    eax,eax
   24236:	jmp    3a090 <g_str_equal@plt+0x2cdd0>
   2423b:	nop    DWORD PTR [rax+rax*1+0x0]
   24240:	sub    rsp,0x8
   24244:	call   21f90 <g_str_equal@plt+0x14cd0>
   24249:	add    rsp,0x8
   2424d:	mov    rdi,rax
   24250:	jmp    20400 <g_str_equal@plt+0x13140>
   24255:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2425f:	nop
   24260:	push   rbx
   24261:	sub    rsp,0x10
   24265:	test   rdi,rdi
   24268:	mov    QWORD PTR [rsp+0x8],rdi
   2426d:	je     24290 <g_str_equal@plt+0x16fd0>
   2426f:	call   29a40 <g_str_equal@plt+0x1c780>
   24274:	lea    rdx,[rsp+0x8]
   24279:	mov    rbx,rax
   2427c:	mov    rdi,rax
   2427f:	xor    ecx,ecx
   24281:	xor    esi,esi
   24283:	call   25a10 <g_str_equal@plt+0x18750>
   24288:	mov    rdi,rbx
   2428b:	call   27d00 <g_str_equal@plt+0x1aa40>
   24290:	add    rsp,0x10
   24294:	pop    rbx
   24295:	ret    
   24296:	nop    WORD PTR cs:[rax+rax*1+0x0]
   242a0:	push   rbx
   242a1:	sub    rsp,0x10
   242a5:	test   rdi,rdi
   242a8:	mov    QWORD PTR [rsp+0x8],rdi
   242ad:	je     242d0 <g_str_equal@plt+0x17010>
   242af:	call   29a40 <g_str_equal@plt+0x1c780>
   242b4:	lea    rdx,[rsp+0x8]
   242b9:	mov    rbx,rax
   242bc:	mov    rdi,rax
   242bf:	xor    ecx,ecx
   242c1:	xor    esi,esi
   242c3:	call   25b70 <g_str_equal@plt+0x188b0>
   242c8:	mov    rdi,rbx
   242cb:	call   27d00 <g_str_equal@plt+0x1aa40>
   242d0:	add    rsp,0x10
   242d4:	pop    rbx
   242d5:	ret    
   242d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   242e0:	push   rbx
   242e1:	sub    rsp,0x10
   242e5:	test   rdi,rdi
   242e8:	mov    QWORD PTR [rsp+0x8],rdi
   242ed:	je     24310 <g_str_equal@plt+0x17050>
   242ef:	call   29a40 <g_str_equal@plt+0x1c780>
   242f4:	lea    rdx,[rsp+0x8]
   242f9:	mov    rbx,rax
   242fc:	mov    rdi,rax
   242ff:	xor    ecx,ecx
   24301:	xor    esi,esi
   24303:	call   25cd0 <g_str_equal@plt+0x18a10>
   24308:	mov    rdi,rbx
   2430b:	call   27d00 <g_str_equal@plt+0x1aa40>
   24310:	add    rsp,0x10
   24314:	pop    rbx
   24315:	ret    
   24316:	nop    WORD PTR cs:[rax+rax*1+0x0]
   24320:	push   rbx
   24321:	sub    rsp,0x10
   24325:	test   rdi,rdi
   24328:	mov    QWORD PTR [rsp+0x8],rdi
   2432d:	je     24350 <g_str_equal@plt+0x17090>
   2432f:	call   29a40 <g_str_equal@plt+0x1c780>
   24334:	lea    rdx,[rsp+0x8]
   24339:	mov    rbx,rax
   2433c:	mov    rdi,rax
   2433f:	xor    ecx,ecx
   24341:	xor    esi,esi
   24343:	call   26000 <g_str_equal@plt+0x18d40>
   24348:	mov    rdi,rbx
   2434b:	call   27d00 <g_str_equal@plt+0x1aa40>
   24350:	add    rsp,0x10
   24354:	pop    rbx
   24355:	ret    
   24356:	nop    WORD PTR cs:[rax+rax*1+0x0]
   24360:	push   rbx
   24361:	sub    rsp,0x10
   24365:	test   rdi,rdi
   24368:	mov    QWORD PTR [rsp+0x8],rdi
   2436d:	je     24390 <g_str_equal@plt+0x170d0>
   2436f:	call   29a40 <g_str_equal@plt+0x1c780>
   24374:	lea    rdx,[rsp+0x8]
   24379:	mov    rbx,rax
   2437c:	mov    rdi,rax
   2437f:	xor    ecx,ecx
   24381:	xor    esi,esi
   24383:	call   26180 <g_str_equal@plt+0x18ec0>
   24388:	mov    rdi,rbx
   2438b:	call   27d00 <g_str_equal@plt+0x1aa40>
   24390:	add    rsp,0x10
   24394:	pop    rbx
   24395:	ret    
   24396:	nop    WORD PTR cs:[rax+rax*1+0x0]
   243a0:	push   rbx
   243a1:	sub    rsp,0x10
   243a5:	test   rdi,rdi
   243a8:	mov    QWORD PTR [rsp+0x8],rdi
   243ad:	je     243d0 <g_str_equal@plt+0x17110>
   243af:	call   29a40 <g_str_equal@plt+0x1c780>
   243b4:	lea    rdx,[rsp+0x8]
   243b9:	mov    rbx,rax
   243bc:	mov    rdi,rax
   243bf:	xor    ecx,ecx
   243c1:	xor    esi,esi
   243c3:	call   26300 <g_str_equal@plt+0x19040>
   243c8:	mov    rdi,rbx
   243cb:	call   27d00 <g_str_equal@plt+0x1aa40>
   243d0:	add    rsp,0x10
   243d4:	pop    rbx
   243d5:	ret    
   243d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   243e0:	push   rbx
   243e1:	sub    rsp,0x10
   243e5:	test   rdi,rdi
   243e8:	mov    QWORD PTR [rsp+0x8],rdi
   243ed:	je     24410 <g_str_equal@plt+0x17150>
   243ef:	call   29a40 <g_str_equal@plt+0x1c780>
   243f4:	lea    rdx,[rsp+0x8]
   243f9:	mov    rbx,rax
   243fc:	mov    rdi,rax
   243ff:	xor    ecx,ecx
   24401:	xor    esi,esi
   24403:	call   26460 <g_str_equal@plt+0x191a0>
   24408:	mov    rdi,rbx
   2440b:	call   27d00 <g_str_equal@plt+0x1aa40>
   24410:	add    rsp,0x10
   24414:	pop    rbx
   24415:	ret    
   24416:	nop    WORD PTR cs:[rax+rax*1+0x0]
   24420:	push   rbx
   24421:	sub    rsp,0x10
   24425:	test   rdi,rdi
   24428:	mov    QWORD PTR [rsp+0x8],rdi
   2442d:	je     24450 <g_str_equal@plt+0x17190>
   2442f:	call   29a40 <g_str_equal@plt+0x1c780>
   24434:	lea    rdx,[rsp+0x8]
   24439:	mov    rbx,rax
   2443c:	mov    rdi,rax
   2443f:	xor    ecx,ecx
   24441:	xor    esi,esi
   24443:	call   26650 <g_str_equal@plt+0x19390>
   24448:	mov    rdi,rbx
   2444b:	call   27d00 <g_str_equal@plt+0x1aa40>
   24450:	add    rsp,0x10
   24454:	pop    rbx
   24455:	ret    
   24456:	nop    WORD PTR cs:[rax+rax*1+0x0]
   24460:	push   rbx
   24461:	sub    rsp,0x10
   24465:	test   rdi,rdi
   24468:	mov    QWORD PTR [rsp+0x8],rdi
   2446d:	je     24490 <g_str_equal@plt+0x171d0>
   2446f:	call   29a40 <g_str_equal@plt+0x1c780>
   24474:	lea    rdx,[rsp+0x8]
   24479:	mov    rbx,rax
   2447c:	mov    rdi,rax
   2447f:	xor    ecx,ecx
   24481:	xor    esi,esi
   24483:	call   26730 <g_str_equal@plt+0x19470>
   24488:	mov    rdi,rbx
   2448b:	call   27d00 <g_str_equal@plt+0x1aa40>
   24490:	add    rsp,0x10
   24494:	pop    rbx
   24495:	ret    
   24496:	nop    WORD PTR cs:[rax+rax*1+0x0]
   244a0:	push   rbx
   244a1:	sub    rsp,0x10
   244a5:	test   rdi,rdi
   244a8:	mov    QWORD PTR [rsp+0x8],rdi
   244ad:	je     244d0 <g_str_equal@plt+0x17210>
   244af:	call   29a40 <g_str_equal@plt+0x1c780>
   244b4:	lea    rdx,[rsp+0x8]
   244b9:	mov    rbx,rax
   244bc:	mov    rdi,rax
   244bf:	xor    ecx,ecx
   244c1:	xor    esi,esi
   244c3:	call   26a60 <g_str_equal@plt+0x197a0>
   244c8:	mov    rdi,rbx
   244cb:	call   27d00 <g_str_equal@plt+0x1aa40>
   244d0:	add    rsp,0x10
   244d4:	pop    rbx
   244d5:	ret    
   244d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   244e0:	push   rbx
   244e1:	sub    rsp,0x10
   244e5:	test   rdi,rdi
   244e8:	mov    QWORD PTR [rsp+0x8],rdi
   244ed:	je     24510 <g_str_equal@plt+0x17250>
   244ef:	call   29a40 <g_str_equal@plt+0x1c780>
   244f4:	lea    rdx,[rsp+0x8]
   244f9:	mov    rbx,rax
   244fc:	mov    rdi,rax
   244ff:	xor    ecx,ecx
   24501:	xor    esi,esi
   24503:	call   26bd0 <g_str_equal@plt+0x19910>
   24508:	mov    rdi,rbx
   2450b:	call   27d00 <g_str_equal@plt+0x1aa40>
   24510:	add    rsp,0x10
   24514:	pop    rbx
   24515:	ret    
   24516:	nop    WORD PTR cs:[rax+rax*1+0x0]
   24520:	push   rbx
   24521:	sub    rsp,0x10
   24525:	test   rdi,rdi
   24528:	mov    QWORD PTR [rsp+0x8],rdi
   2452d:	je     24550 <g_str_equal@plt+0x17290>
   2452f:	call   29a40 <g_str_equal@plt+0x1c780>
   24534:	lea    rdx,[rsp+0x8]
   24539:	mov    rbx,rax
   2453c:	mov    rdi,rax
   2453f:	xor    ecx,ecx
   24541:	xor    esi,esi
   24543:	call   26db0 <g_str_equal@plt+0x19af0>
   24548:	mov    rdi,rbx
   2454b:	call   27d00 <g_str_equal@plt+0x1aa40>
   24550:	add    rsp,0x10
   24554:	pop    rbx
   24555:	ret    
   24556:	nop    WORD PTR cs:[rax+rax*1+0x0]
   24560:	push   rbx
   24561:	sub    rsp,0x10
   24565:	test   rdi,rdi
   24568:	mov    QWORD PTR [rsp+0x8],rdi
   2456d:	je     24590 <g_str_equal@plt+0x172d0>
   2456f:	call   29a40 <g_str_equal@plt+0x1c780>
   24574:	lea    rdx,[rsp+0x8]
   24579:	mov    rbx,rax
   2457c:	mov    rdi,rax
   2457f:	xor    ecx,ecx
   24581:	xor    esi,esi
   24583:	call   26ff0 <g_str_equal@plt+0x19d30>
   24588:	mov    rdi,rbx
   2458b:	call   27d00 <g_str_equal@plt+0x1aa40>
   24590:	add    rsp,0x10
   24594:	pop    rbx
   24595:	ret    
   24596:	nop    WORD PTR cs:[rax+rax*1+0x0]
   245a0:	push   rbx
   245a1:	sub    rsp,0x10
   245a5:	test   rdi,rdi
   245a8:	mov    QWORD PTR [rsp+0x8],rdi
   245ad:	je     245d0 <g_str_equal@plt+0x17310>
   245af:	call   29a40 <g_str_equal@plt+0x1c780>
   245b4:	lea    rdx,[rsp+0x8]
   245b9:	mov    rbx,rax
   245bc:	mov    rdi,rax
   245bf:	xor    ecx,ecx
   245c1:	xor    esi,esi
   245c3:	call   27130 <g_str_equal@plt+0x19e70>
   245c8:	mov    rdi,rbx
   245cb:	call   27d00 <g_str_equal@plt+0x1aa40>
   245d0:	add    rsp,0x10
   245d4:	pop    rbx
   245d5:	ret    
   245d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   245e0:	push   rbx
   245e1:	sub    rsp,0x10
   245e5:	test   rdi,rdi
   245e8:	mov    QWORD PTR [rsp+0x8],rdi
   245ed:	je     24610 <g_str_equal@plt+0x17350>
   245ef:	call   29a40 <g_str_equal@plt+0x1c780>
   245f4:	lea    rdx,[rsp+0x8]
   245f9:	mov    rbx,rax
   245fc:	mov    rdi,rax
   245ff:	xor    ecx,ecx
   24601:	xor    esi,esi
   24603:	call   272b0 <g_str_equal@plt+0x19ff0>
   24608:	mov    rdi,rbx
   2460b:	call   27d00 <g_str_equal@plt+0x1aa40>
   24610:	add    rsp,0x10
   24614:	pop    rbx
   24615:	ret    
   24616:	nop    WORD PTR cs:[rax+rax*1+0x0]
   24620:	push   rbx
   24621:	sub    rsp,0x10
   24625:	test   rdi,rdi
   24628:	mov    QWORD PTR [rsp+0x8],rdi
   2462d:	je     24650 <g_str_equal@plt+0x17390>
   2462f:	call   29a40 <g_str_equal@plt+0x1c780>
   24634:	lea    rdx,[rsp+0x8]
   24639:	mov    rbx,rax
   2463c:	mov    rdi,rax
   2463f:	xor    ecx,ecx
   24641:	xor    esi,esi
   24643:	call   27690 <g_str_equal@plt+0x1a3d0>
   24648:	mov    rdi,rbx
   2464b:	call   27d00 <g_str_equal@plt+0x1aa40>
   24650:	add    rsp,0x10
   24654:	pop    rbx
   24655:	ret    
   24656:	nop    WORD PTR cs:[rax+rax*1+0x0]
   24660:	push   rbx
   24661:	sub    rsp,0x10
   24665:	test   rdi,rdi
   24668:	mov    QWORD PTR [rsp+0x8],rdi
   2466d:	je     24690 <g_str_equal@plt+0x173d0>
   2466f:	call   29a40 <g_str_equal@plt+0x1c780>
   24674:	lea    rdx,[rsp+0x8]
   24679:	mov    rbx,rax
   2467c:	mov    rdi,rax
   2467f:	xor    ecx,ecx
   24681:	xor    esi,esi
   24683:	call   27940 <g_str_equal@plt+0x1a680>
   24688:	mov    rdi,rbx
   2468b:	call   27d00 <g_str_equal@plt+0x1aa40>
   24690:	add    rsp,0x10
   24694:	pop    rbx
   24695:	ret    
   24696:	nop    WORD PTR cs:[rax+rax*1+0x0]
   246a0:	push   r14
   246a2:	push   r13
   246a4:	mov    r14,rcx
   246a7:	push   r12
   246a9:	push   rbp
   246aa:	mov    ecx,0x10
   246af:	push   rbx
   246b0:	mov    rbp,rdi
   246b3:	mov    r13,rdx
   246b6:	sub    rsp,0x10
   246ba:	mov    r12,rsp
   246bd:	mov    QWORD PTR [rsp],0x0
   246c5:	mov    r8,r12
   246c8:	mov    rax,QWORD PTR fs:0x28
   246d1:	mov    QWORD PTR [rsp+0x8],rax
   246d6:	xor    eax,eax
   246d8:	call   280a0 <g_str_equal@plt+0x1ade0>
   246dd:	mov    rsi,QWORD PTR [rsp]
   246e1:	test   rsi,rsi
   246e4:	je     24710 <g_str_equal@plt+0x17450>
   246e6:	mov    rdi,r14
   246e9:	call   3a4c0 <g_str_equal@plt+0x2d200>
   246ee:	mov    rax,QWORD PTR [rsp+0x8]
   246f3:	xor    rax,QWORD PTR fs:0x28
   246fc:	jne    247a4 <g_str_equal@plt+0x174e4>
   24702:	add    rsp,0x10
   24706:	pop    rbx
   24707:	pop    rbp
   24708:	pop    r12
   2470a:	pop    r13
   2470c:	pop    r14
   2470e:	ret    
   2470f:	nop
   24710:	mov    rbx,QWORD PTR [r13+0x0]
   24714:	test   rbx,rbx
   24717:	jne    24738 <g_str_equal@plt+0x17478>
   24719:	jmp    24797 <g_str_equal@plt+0x174d7>
   2471b:	nop    DWORD PTR [rax+rax*1+0x0]
   24720:	mov    rsi,rbx
   24723:	mov    edx,0x10
   24728:	mov    rdi,rbp
   2472b:	call   281f0 <g_str_equal@plt+0x1af30>
   24730:	test   rax,rax
   24733:	mov    rbx,rax
   24736:	je     24790 <g_str_equal@plt+0x174d0>
   24738:	lea    rdx,[rbx+0x8]
   2473c:	xor    esi,esi
   2473e:	mov    rcx,r12
   24741:	mov    rdi,rbp
   24744:	call   29210 <g_str_equal@plt+0x1bf50>
   24749:	cmp    QWORD PTR [rsp],0x0
   2474e:	je     24720 <g_str_equal@plt+0x17460>
   24750:	mov    rsi,r13
   24753:	mov    rdi,rbp
   24756:	call   28390 <g_str_equal@plt+0x1b0d0>
   2475b:	mov    rsi,QWORD PTR [rsp]
   2475f:	test   rsi,rsi
   24762:	je     246e6 <g_str_equal@plt+0x17426>
   24764:	mov    rdi,rbp
   24767:	call   28770 <g_str_equal@plt+0x1b4b0>
   2476c:	test   al,al
   2476e:	je     24781 <g_str_equal@plt+0x174c1>
   24770:	mov    rdi,QWORD PTR [r13+0x0]
   24774:	call   44230 <g_str_equal@plt+0x36f70>
   24779:	mov    QWORD PTR [r13+0x0],0x0
   24781:	mov    rsi,QWORD PTR [rsp]
   24785:	jmp    246e6 <g_str_equal@plt+0x17426>
   2478a:	nop    WORD PTR [rax+rax*1+0x0]
   24790:	cmp    QWORD PTR [rsp],0x0
   24795:	jne    24750 <g_str_equal@plt+0x17490>
   24797:	mov    rsi,r12
   2479a:	mov    rdi,rbp
   2479d:	call   282e0 <g_str_equal@plt+0x1b020>
   247a2:	jmp    24750 <g_str_equal@plt+0x17490>
   247a4:	call   cd30 <__stack_chk_fail@plt>
   247a9:	nop    DWORD PTR [rax+0x0]
   247b0:	push   r14
   247b2:	push   r13
   247b4:	mov    r14,rcx
   247b7:	push   r12
   247b9:	push   rbp
   247ba:	mov    ecx,0x10
   247bf:	push   rbx
   247c0:	mov    rbp,rdi
   247c3:	mov    r13,rdx
   247c6:	sub    rsp,0x10
   247ca:	mov    r12,rsp
   247cd:	mov    QWORD PTR [rsp],0x0
   247d5:	mov    r8,r12
   247d8:	mov    rax,QWORD PTR fs:0x28
   247e1:	mov    QWORD PTR [rsp+0x8],rax
   247e6:	xor    eax,eax
   247e8:	call   280a0 <g_str_equal@plt+0x1ade0>
   247ed:	mov    rsi,QWORD PTR [rsp]
   247f1:	test   rsi,rsi
   247f4:	je     24820 <g_str_equal@plt+0x17560>
   247f6:	mov    rdi,r14
   247f9:	call   3a4c0 <g_str_equal@plt+0x2d200>
   247fe:	mov    rax,QWORD PTR [rsp+0x8]
   24803:	xor    rax,QWORD PTR fs:0x28
   2480c:	jne    248b4 <g_str_equal@plt+0x175f4>
   24812:	add    rsp,0x10
   24816:	pop    rbx
   24817:	pop    rbp
   24818:	pop    r12
   2481a:	pop    r13
   2481c:	pop    r14
   2481e:	ret    
   2481f:	nop
   24820:	mov    rbx,QWORD PTR [r13+0x0]
   24824:	test   rbx,rbx
   24827:	jne    24848 <g_str_equal@plt+0x17588>
   24829:	jmp    248a7 <g_str_equal@plt+0x175e7>
   2482b:	nop    DWORD PTR [rax+rax*1+0x0]
   24830:	mov    rsi,rbx
   24833:	mov    edx,0x10
   24838:	mov    rdi,rbp
   2483b:	call   281f0 <g_str_equal@plt+0x1af30>
   24840:	test   rax,rax
   24843:	mov    rbx,rax
   24846:	je     248a0 <g_str_equal@plt+0x175e0>
   24848:	lea    rdx,[rbx+0x8]
   2484c:	xor    esi,esi
   2484e:	mov    rcx,r12
   24851:	mov    rdi,rbp
   24854:	call   29360 <g_str_equal@plt+0x1c0a0>
   24859:	cmp    QWORD PTR [rsp],0x0
   2485e:	je     24830 <g_str_equal@plt+0x17570>
   24860:	mov    rsi,r13
   24863:	mov    rdi,rbp
   24866:	call   28390 <g_str_equal@plt+0x1b0d0>
   2486b:	mov    rsi,QWORD PTR [rsp]
   2486f:	test   rsi,rsi
   24872:	je     247f6 <g_str_equal@plt+0x17536>
   24874:	mov    rdi,rbp
   24877:	call   28770 <g_str_equal@plt+0x1b4b0>
   2487c:	test   al,al
   2487e:	je     24891 <g_str_equal@plt+0x175d1>
   24880:	mov    rdi,QWORD PTR [r13+0x0]
   24884:	call   44270 <g_str_equal@plt+0x36fb0>
   24889:	mov    QWORD PTR [r13+0x0],0x0
   24891:	mov    rsi,QWORD PTR [rsp]
   24895:	jmp    247f6 <g_str_equal@plt+0x17536>
   2489a:	nop    WORD PTR [rax+rax*1+0x0]
   248a0:	cmp    QWORD PTR [rsp],0x0
   248a5:	jne    24860 <g_str_equal@plt+0x175a0>
   248a7:	mov    rsi,r12
   248aa:	mov    rdi,rbp
   248ad:	call   282e0 <g_str_equal@plt+0x1b020>
   248b2:	jmp    24860 <g_str_equal@plt+0x175a0>
   248b4:	call   cd30 <__stack_chk_fail@plt>
   248b9:	nop    DWORD PTR [rax+0x0]
   248c0:	push   r14
   248c2:	push   r13
   248c4:	mov    r14,rcx
   248c7:	push   r12
   248c9:	push   rbp
   248ca:	mov    ecx,0x10
   248cf:	push   rbx
   248d0:	mov    rbp,rdi
   248d3:	mov    r13,rdx
   248d6:	sub    rsp,0x10
   248da:	mov    r12,rsp
   248dd:	mov    QWORD PTR [rsp],0x0
   248e5:	mov    r8,r12
   248e8:	mov    rax,QWORD PTR fs:0x28
   248f1:	mov    QWORD PTR [rsp+0x8],rax
   248f6:	xor    eax,eax
   248f8:	call   280a0 <g_str_equal@plt+0x1ade0>
   248fd:	mov    rsi,QWORD PTR [rsp]
   24901:	test   rsi,rsi
   24904:	je     24930 <g_str_equal@plt+0x17670>
   24906:	mov    rdi,r14
   24909:	call   3a4c0 <g_str_equal@plt+0x2d200>
   2490e:	mov    rax,QWORD PTR [rsp+0x8]
   24913:	xor    rax,QWORD PTR fs:0x28
   2491c:	jne    249c4 <g_str_equal@plt+0x17704>
   24922:	add    rsp,0x10
   24926:	pop    rbx
   24927:	pop    rbp
   24928:	pop    r12
   2492a:	pop    r13
   2492c:	pop    r14
   2492e:	ret    
   2492f:	nop
   24930:	mov    rbx,QWORD PTR [r13+0x0]
   24934:	test   rbx,rbx
   24937:	jne    24958 <g_str_equal@plt+0x17698>
   24939:	jmp    249b7 <g_str_equal@plt+0x176f7>
   2493b:	nop    DWORD PTR [rax+rax*1+0x0]
   24940:	mov    rsi,rbx
   24943:	mov    edx,0x10
   24948:	mov    rdi,rbp
   2494b:	call   281f0 <g_str_equal@plt+0x1af30>
   24950:	test   rax,rax
   24953:	mov    rbx,rax
   24956:	je     249b0 <g_str_equal@plt+0x176f0>
   24958:	lea    rdx,[rbx+0x8]
   2495c:	xor    esi,esi
   2495e:	mov    rcx,r12
   24961:	mov    rdi,rbp
   24964:	call   28780 <g_str_equal@plt+0x1b4c0>
   24969:	cmp    QWORD PTR [rsp],0x0
   2496e:	je     24940 <g_str_equal@plt+0x17680>
   24970:	mov    rsi,r13
   24973:	mov    rdi,rbp
   24976:	call   28390 <g_str_equal@plt+0x1b0d0>
   2497b:	mov    rsi,QWORD PTR [rsp]
   2497f:	test   rsi,rsi
   24982:	je     24906 <g_str_equal@plt+0x17646>
   24984:	mov    rdi,rbp
   24987:	call   28770 <g_str_equal@plt+0x1b4b0>
   2498c:	test   al,al
   2498e:	je     249a1 <g_str_equal@plt+0x176e1>
   24990:	mov    rdi,QWORD PTR [r13+0x0]
   24994:	call   442b0 <g_str_equal@plt+0x36ff0>
   24999:	mov    QWORD PTR [r13+0x0],0x0
   249a1:	mov    rsi,QWORD PTR [rsp]
   249a5:	jmp    24906 <g_str_equal@plt+0x17646>
   249aa:	nop    WORD PTR [rax+rax*1+0x0]
   249b0:	cmp    QWORD PTR [rsp],0x0
   249b5:	jne    24970 <g_str_equal@plt+0x176b0>
   249b7:	mov    rsi,r12
   249ba:	mov    rdi,rbp
   249bd:	call   282e0 <g_str_equal@plt+0x1b020>
   249c2:	jmp    24970 <g_str_equal@plt+0x176b0>
   249c4:	call   cd30 <__stack_chk_fail@plt>
   249c9:	nop    DWORD PTR [rax+0x0]
   249d0:	push   r14
   249d2:	push   r13
   249d4:	mov    r14,rcx
   249d7:	push   r12
   249d9:	push   rbp
   249da:	mov    ecx,0x10
   249df:	push   rbx
   249e0:	mov    rbp,rdi
   249e3:	mov    r13,rdx
   249e6:	sub    rsp,0x10
   249ea:	mov    r12,rsp
   249ed:	mov    QWORD PTR [rsp],0x0
   249f5:	mov    r8,r12
   249f8:	mov    rax,QWORD PTR fs:0x28
   24a01:	mov    QWORD PTR [rsp+0x8],rax
   24a06:	xor    eax,eax
   24a08:	call   280a0 <g_str_equal@plt+0x1ade0>
   24a0d:	mov    rsi,QWORD PTR [rsp]
   24a11:	test   rsi,rsi
   24a14:	je     24a40 <g_str_equal@plt+0x17780>
   24a16:	mov    rdi,r14
   24a19:	call   3a4c0 <g_str_equal@plt+0x2d200>
   24a1e:	mov    rax,QWORD PTR [rsp+0x8]
   24a23:	xor    rax,QWORD PTR fs:0x28
   24a2c:	jne    24ad4 <g_str_equal@plt+0x17814>
   24a32:	add    rsp,0x10
   24a36:	pop    rbx
   24a37:	pop    rbp
   24a38:	pop    r12
   24a3a:	pop    r13
   24a3c:	pop    r14
   24a3e:	ret    
   24a3f:	nop
   24a40:	mov    rbx,QWORD PTR [r13+0x0]
   24a44:	test   rbx,rbx
   24a47:	jne    24a68 <g_str_equal@plt+0x177a8>
   24a49:	jmp    24ac7 <g_str_equal@plt+0x17807>
   24a4b:	nop    DWORD PTR [rax+rax*1+0x0]
   24a50:	mov    rsi,rbx
   24a53:	mov    edx,0x10
   24a58:	mov    rdi,rbp
   24a5b:	call   281f0 <g_str_equal@plt+0x1af30>
   24a60:	test   rax,rax
   24a63:	mov    rbx,rax
   24a66:	je     24ac0 <g_str_equal@plt+0x17800>
   24a68:	lea    rdx,[rbx+0x8]
   24a6c:	xor    esi,esi
   24a6e:	mov    rcx,r12
   24a71:	mov    rdi,rbp
   24a74:	call   28c30 <g_str_equal@plt+0x1b970>
   24a79:	cmp    QWORD PTR [rsp],0x0
   24a7e:	je     24a50 <g_str_equal@plt+0x17790>
   24a80:	mov    rsi,r13
   24a83:	mov    rdi,rbp
   24a86:	call   28390 <g_str_equal@plt+0x1b0d0>
   24a8b:	mov    rsi,QWORD PTR [rsp]
   24a8f:	test   rsi,rsi
   24a92:	je     24a16 <g_str_equal@plt+0x17756>
   24a94:	mov    rdi,rbp
   24a97:	call   28770 <g_str_equal@plt+0x1b4b0>
   24a9c:	test   al,al
   24a9e:	je     24ab1 <g_str_equal@plt+0x177f1>
   24aa0:	mov    rdi,QWORD PTR [r13+0x0]
   24aa4:	call   442f0 <g_str_equal@plt+0x37030>
   24aa9:	mov    QWORD PTR [r13+0x0],0x0
   24ab1:	mov    rsi,QWORD PTR [rsp]
   24ab5:	jmp    24a16 <g_str_equal@plt+0x17756>
   24aba:	nop    WORD PTR [rax+rax*1+0x0]
   24ac0:	cmp    QWORD PTR [rsp],0x0
   24ac5:	jne    24a80 <g_str_equal@plt+0x177c0>
   24ac7:	mov    rsi,r12
   24aca:	mov    rdi,rbp
   24acd:	call   282e0 <g_str_equal@plt+0x1b020>
   24ad2:	jmp    24a80 <g_str_equal@plt+0x177c0>
   24ad4:	call   cd30 <__stack_chk_fail@plt>
   24ad9:	nop    DWORD PTR [rax+0x0]
   24ae0:	push   r14
   24ae2:	push   r13
   24ae4:	mov    r14,rcx
   24ae7:	push   r12
   24ae9:	push   rbp
   24aea:	mov    ecx,0x10
   24aef:	push   rbx
   24af0:	mov    rbp,rdi
   24af3:	mov    r13,rdx
   24af6:	sub    rsp,0x10
   24afa:	mov    r12,rsp
   24afd:	mov    QWORD PTR [rsp],0x0
   24b05:	mov    r8,r12
   24b08:	mov    rax,QWORD PTR fs:0x28
   24b11:	mov    QWORD PTR [rsp+0x8],rax
   24b16:	xor    eax,eax
   24b18:	call   280a0 <g_str_equal@plt+0x1ade0>
   24b1d:	mov    rsi,QWORD PTR [rsp]
   24b21:	test   rsi,rsi
   24b24:	je     24b50 <g_str_equal@plt+0x17890>
   24b26:	mov    rdi,r14
   24b29:	call   3a4c0 <g_str_equal@plt+0x2d200>
   24b2e:	mov    rax,QWORD PTR [rsp+0x8]
   24b33:	xor    rax,QWORD PTR fs:0x28
   24b3c:	jne    24be4 <g_str_equal@plt+0x17924>
   24b42:	add    rsp,0x10
   24b46:	pop    rbx
   24b47:	pop    rbp
   24b48:	pop    r12
   24b4a:	pop    r13
   24b4c:	pop    r14
   24b4e:	ret    
   24b4f:	nop
   24b50:	mov    rbx,QWORD PTR [r13+0x0]
   24b54:	test   rbx,rbx
   24b57:	jne    24b78 <g_str_equal@plt+0x178b8>
   24b59:	jmp    24bd7 <g_str_equal@plt+0x17917>
   24b5b:	nop    DWORD PTR [rax+rax*1+0x0]
   24b60:	mov    rsi,rbx
   24b63:	mov    edx,0x10
   24b68:	mov    rdi,rbp
   24b6b:	call   281f0 <g_str_equal@plt+0x1af30>
   24b70:	test   rax,rax
   24b73:	mov    rbx,rax
   24b76:	je     24bd0 <g_str_equal@plt+0x17910>
   24b78:	lea    rdx,[rbx+0x8]
   24b7c:	xor    esi,esi
   24b7e:	mov    rcx,r12
   24b81:	mov    rdi,rbp
   24b84:	call   28d30 <g_str_equal@plt+0x1ba70>
   24b89:	cmp    QWORD PTR [rsp],0x0
   24b8e:	je     24b60 <g_str_equal@plt+0x178a0>
   24b90:	mov    rsi,r13
   24b93:	mov    rdi,rbp
   24b96:	call   28390 <g_str_equal@plt+0x1b0d0>
   24b9b:	mov    rsi,QWORD PTR [rsp]
   24b9f:	test   rsi,rsi
   24ba2:	je     24b26 <g_str_equal@plt+0x17866>
   24ba4:	mov    rdi,rbp
   24ba7:	call   28770 <g_str_equal@plt+0x1b4b0>
   24bac:	test   al,al
   24bae:	je     24bc1 <g_str_equal@plt+0x17901>
   24bb0:	mov    rdi,QWORD PTR [r13+0x0]
   24bb4:	call   44330 <g_str_equal@plt+0x37070>
   24bb9:	mov    QWORD PTR [r13+0x0],0x0
   24bc1:	mov    rsi,QWORD PTR [rsp]
   24bc5:	jmp    24b26 <g_str_equal@plt+0x17866>
   24bca:	nop    WORD PTR [rax+rax*1+0x0]
   24bd0:	cmp    QWORD PTR [rsp],0x0
   24bd5:	jne    24b90 <g_str_equal@plt+0x178d0>
   24bd7:	mov    rsi,r12
   24bda:	mov    rdi,rbp
   24bdd:	call   282e0 <g_str_equal@plt+0x1b020>
   24be2:	jmp    24b90 <g_str_equal@plt+0x178d0>
   24be4:	call   cd30 <__stack_chk_fail@plt>
   24be9:	nop    DWORD PTR [rax+0x0]
   24bf0:	push   r14
   24bf2:	push   r13
   24bf4:	mov    r14,rcx
   24bf7:	push   r12
   24bf9:	push   rbp
   24bfa:	mov    ecx,0x10
   24bff:	push   rbx
   24c00:	mov    rbp,rdi
   24c03:	mov    r13,rdx
   24c06:	sub    rsp,0x10
   24c0a:	mov    r12,rsp
   24c0d:	mov    QWORD PTR [rsp],0x0
   24c15:	mov    r8,r12
   24c18:	mov    rax,QWORD PTR fs:0x28
   24c21:	mov    QWORD PTR [rsp+0x8],rax
   24c26:	xor    eax,eax
   24c28:	call   280a0 <g_str_equal@plt+0x1ade0>
   24c2d:	mov    rsi,QWORD PTR [rsp]
   24c31:	test   rsi,rsi
   24c34:	je     24c60 <g_str_equal@plt+0x179a0>
   24c36:	mov    rdi,r14
   24c39:	call   3a4c0 <g_str_equal@plt+0x2d200>
   24c3e:	mov    rax,QWORD PTR [rsp+0x8]
   24c43:	xor    rax,QWORD PTR fs:0x28
   24c4c:	jne    24cf4 <g_str_equal@plt+0x17a34>
   24c52:	add    rsp,0x10
   24c56:	pop    rbx
   24c57:	pop    rbp
   24c58:	pop    r12
   24c5a:	pop    r13
   24c5c:	pop    r14
   24c5e:	ret    
   24c5f:	nop
   24c60:	mov    rbx,QWORD PTR [r13+0x0]
   24c64:	test   rbx,rbx
   24c67:	jne    24c88 <g_str_equal@plt+0x179c8>
   24c69:	jmp    24ce7 <g_str_equal@plt+0x17a27>
   24c6b:	nop    DWORD PTR [rax+rax*1+0x0]
   24c70:	mov    rsi,rbx
   24c73:	mov    edx,0x10
   24c78:	mov    rdi,rbp
   24c7b:	call   281f0 <g_str_equal@plt+0x1af30>
   24c80:	test   rax,rax
   24c83:	mov    rbx,rax
   24c86:	je     24ce0 <g_str_equal@plt+0x17a20>
   24c88:	lea    rdx,[rbx+0x8]
   24c8c:	xor    esi,esi
   24c8e:	mov    rcx,r12
   24c91:	mov    rdi,rbp
   24c94:	call   28e30 <g_str_equal@plt+0x1bb70>
   24c99:	cmp    QWORD PTR [rsp],0x0
   24c9e:	je     24c70 <g_str_equal@plt+0x179b0>
   24ca0:	mov    rsi,r13
   24ca3:	mov    rdi,rbp
   24ca6:	call   28390 <g_str_equal@plt+0x1b0d0>
   24cab:	mov    rsi,QWORD PTR [rsp]
   24caf:	test   rsi,rsi
   24cb2:	je     24c36 <g_str_equal@plt+0x17976>
   24cb4:	mov    rdi,rbp
   24cb7:	call   28770 <g_str_equal@plt+0x1b4b0>
   24cbc:	test   al,al
   24cbe:	je     24cd1 <g_str_equal@plt+0x17a11>
   24cc0:	mov    rdi,QWORD PTR [r13+0x0]
   24cc4:	call   44370 <g_str_equal@plt+0x370b0>
   24cc9:	mov    QWORD PTR [r13+0x0],0x0
   24cd1:	mov    rsi,QWORD PTR [rsp]
   24cd5:	jmp    24c36 <g_str_equal@plt+0x17976>
   24cda:	nop    WORD PTR [rax+rax*1+0x0]
   24ce0:	cmp    QWORD PTR [rsp],0x0
   24ce5:	jne    24ca0 <g_str_equal@plt+0x179e0>
   24ce7:	mov    rsi,r12
   24cea:	mov    rdi,rbp
   24ced:	call   282e0 <g_str_equal@plt+0x1b020>
   24cf2:	jmp    24ca0 <g_str_equal@plt+0x179e0>
   24cf4:	call   cd30 <__stack_chk_fail@plt>
   24cf9:	nop    DWORD PTR [rax+0x0]
   24d00:	push   r14
   24d02:	push   r13
   24d04:	mov    r14,rcx
   24d07:	push   r12
   24d09:	push   rbp
   24d0a:	mov    ecx,0x10
   24d0f:	push   rbx
   24d10:	mov    rbp,rdi
   24d13:	mov    r13,rdx
   24d16:	sub    rsp,0x10
   24d1a:	mov    r12,rsp
   24d1d:	mov    QWORD PTR [rsp],0x0
   24d25:	mov    r8,r12
   24d28:	mov    rax,QWORD PTR fs:0x28
   24d31:	mov    QWORD PTR [rsp+0x8],rax
   24d36:	xor    eax,eax
   24d38:	call   280a0 <g_str_equal@plt+0x1ade0>
   24d3d:	mov    rsi,QWORD PTR [rsp]
   24d41:	test   rsi,rsi
   24d44:	je     24d70 <g_str_equal@plt+0x17ab0>
   24d46:	mov    rdi,r14
   24d49:	call   3a4c0 <g_str_equal@plt+0x2d200>
   24d4e:	mov    rax,QWORD PTR [rsp+0x8]
   24d53:	xor    rax,QWORD PTR fs:0x28
   24d5c:	jne    24e04 <g_str_equal@plt+0x17b44>
   24d62:	add    rsp,0x10
   24d66:	pop    rbx
   24d67:	pop    rbp
   24d68:	pop    r12
   24d6a:	pop    r13
   24d6c:	pop    r14
   24d6e:	ret    
   24d6f:	nop
   24d70:	mov    rbx,QWORD PTR [r13+0x0]
   24d74:	test   rbx,rbx
   24d77:	jne    24d98 <g_str_equal@plt+0x17ad8>
   24d79:	jmp    24df7 <g_str_equal@plt+0x17b37>
   24d7b:	nop    DWORD PTR [rax+rax*1+0x0]
   24d80:	mov    rsi,rbx
   24d83:	mov    edx,0x10
   24d88:	mov    rdi,rbp
   24d8b:	call   281f0 <g_str_equal@plt+0x1af30>
   24d90:	test   rax,rax
   24d93:	mov    rbx,rax
   24d96:	je     24df0 <g_str_equal@plt+0x17b30>
   24d98:	lea    rdx,[rbx+0x8]
   24d9c:	xor    esi,esi
   24d9e:	mov    rcx,r12
   24da1:	mov    rdi,rbp
   24da4:	call   28f30 <g_str_equal@plt+0x1bc70>
   24da9:	cmp    QWORD PTR [rsp],0x0
   24dae:	je     24d80 <g_str_equal@plt+0x17ac0>
   24db0:	mov    rsi,r13
   24db3:	mov    rdi,rbp
   24db6:	call   28390 <g_str_equal@plt+0x1b0d0>
   24dbb:	mov    rsi,QWORD PTR [rsp]
   24dbf:	test   rsi,rsi
   24dc2:	je     24d46 <g_str_equal@plt+0x17a86>
   24dc4:	mov    rdi,rbp
   24dc7:	call   28770 <g_str_equal@plt+0x1b4b0>
   24dcc:	test   al,al
   24dce:	je     24de1 <g_str_equal@plt+0x17b21>
   24dd0:	mov    rdi,QWORD PTR [r13+0x0]
   24dd4:	call   443b0 <g_str_equal@plt+0x370f0>
   24dd9:	mov    QWORD PTR [r13+0x0],0x0
   24de1:	mov    rsi,QWORD PTR [rsp]
   24de5:	jmp    24d46 <g_str_equal@plt+0x17a86>
   24dea:	nop    WORD PTR [rax+rax*1+0x0]
   24df0:	cmp    QWORD PTR [rsp],0x0
   24df5:	jne    24db0 <g_str_equal@plt+0x17af0>
   24df7:	mov    rsi,r12
   24dfa:	mov    rdi,rbp
   24dfd:	call   282e0 <g_str_equal@plt+0x1b020>
   24e02:	jmp    24db0 <g_str_equal@plt+0x17af0>
   24e04:	call   cd30 <__stack_chk_fail@plt>
   24e09:	nop    DWORD PTR [rax+0x0]
   24e10:	push   r14
   24e12:	push   r13
   24e14:	mov    r14,rcx
   24e17:	push   r12
   24e19:	push   rbp
   24e1a:	mov    ecx,0x10
   24e1f:	push   rbx
   24e20:	mov    rbp,rdi
   24e23:	mov    r13,rdx
   24e26:	sub    rsp,0x10
   24e2a:	mov    r12,rsp
   24e2d:	mov    QWORD PTR [rsp],0x0
   24e35:	mov    r8,r12
   24e38:	mov    rax,QWORD PTR fs:0x28
   24e41:	mov    QWORD PTR [rsp+0x8],rax
   24e46:	xor    eax,eax
   24e48:	call   280a0 <g_str_equal@plt+0x1ade0>
   24e4d:	mov    rsi,QWORD PTR [rsp]
   24e51:	test   rsi,rsi
   24e54:	je     24e80 <g_str_equal@plt+0x17bc0>
   24e56:	mov    rdi,r14
   24e59:	call   3a4c0 <g_str_equal@plt+0x2d200>
   24e5e:	mov    rax,QWORD PTR [rsp+0x8]
   24e63:	xor    rax,QWORD PTR fs:0x28
   24e6c:	jne    24f14 <g_str_equal@plt+0x17c54>
   24e72:	add    rsp,0x10
   24e76:	pop    rbx
   24e77:	pop    rbp
   24e78:	pop    r12
   24e7a:	pop    r13
   24e7c:	pop    r14
   24e7e:	ret    
   24e7f:	nop
   24e80:	mov    rbx,QWORD PTR [r13+0x0]
   24e84:	test   rbx,rbx
   24e87:	jne    24ea8 <g_str_equal@plt+0x17be8>
   24e89:	jmp    24f07 <g_str_equal@plt+0x17c47>
   24e8b:	nop    DWORD PTR [rax+rax*1+0x0]
   24e90:	mov    rsi,rbx
   24e93:	mov    edx,0x10
   24e98:	mov    rdi,rbp
   24e9b:	call   281f0 <g_str_equal@plt+0x1af30>
   24ea0:	test   rax,rax
   24ea3:	mov    rbx,rax
   24ea6:	je     24f00 <g_str_equal@plt+0x17c40>
   24ea8:	lea    rdx,[rbx+0x8]
   24eac:	xor    esi,esi
   24eae:	mov    rcx,r12
   24eb1:	mov    rdi,rbp
   24eb4:	call   28870 <g_str_equal@plt+0x1b5b0>
   24eb9:	cmp    QWORD PTR [rsp],0x0
   24ebe:	je     24e90 <g_str_equal@plt+0x17bd0>
   24ec0:	mov    rsi,r13
   24ec3:	mov    rdi,rbp
   24ec6:	call   28390 <g_str_equal@plt+0x1b0d0>
   24ecb:	mov    rsi,QWORD PTR [rsp]
   24ecf:	test   rsi,rsi
   24ed2:	je     24e56 <g_str_equal@plt+0x17b96>
   24ed4:	mov    rdi,rbp
   24ed7:	call   28770 <g_str_equal@plt+0x1b4b0>
   24edc:	test   al,al
   24ede:	je     24ef1 <g_str_equal@plt+0x17c31>
   24ee0:	mov    rdi,QWORD PTR [r13+0x0]
   24ee4:	call   443f0 <g_str_equal@plt+0x37130>
   24ee9:	mov    QWORD PTR [r13+0x0],0x0
   24ef1:	mov    rsi,QWORD PTR [rsp]
   24ef5:	jmp    24e56 <g_str_equal@plt+0x17b96>
   24efa:	nop    WORD PTR [rax+rax*1+0x0]
   24f00:	cmp    QWORD PTR [rsp],0x0
   24f05:	jne    24ec0 <g_str_equal@plt+0x17c00>
   24f07:	mov    rsi,r12
   24f0a:	mov    rdi,rbp
   24f0d:	call   282e0 <g_str_equal@plt+0x1b020>
   24f12:	jmp    24ec0 <g_str_equal@plt+0x17c00>
   24f14:	call   cd30 <__stack_chk_fail@plt>
   24f19:	nop    DWORD PTR [rax+0x0]
   24f20:	push   r14
   24f22:	push   r13
   24f24:	mov    r14,rcx
   24f27:	push   r12
   24f29:	push   rbp
   24f2a:	mov    ecx,0x10
   24f2f:	push   rbx
   24f30:	mov    rbp,rdi
   24f33:	mov    r13,rdx
   24f36:	sub    rsp,0x10
   24f3a:	mov    r12,rsp
   24f3d:	mov    QWORD PTR [rsp],0x0
   24f45:	mov    r8,r12
   24f48:	mov    rax,QWORD PTR fs:0x28
   24f51:	mov    QWORD PTR [rsp+0x8],rax
   24f56:	xor    eax,eax
   24f58:	call   280a0 <g_str_equal@plt+0x1ade0>
   24f5d:	mov    rsi,QWORD PTR [rsp]
   24f61:	test   rsi,rsi
   24f64:	je     24f90 <g_str_equal@plt+0x17cd0>
   24f66:	mov    rdi,r14
   24f69:	call   3a4c0 <g_str_equal@plt+0x2d200>
   24f6e:	mov    rax,QWORD PTR [rsp+0x8]
   24f73:	xor    rax,QWORD PTR fs:0x28
   24f7c:	jne    25024 <g_str_equal@plt+0x17d64>
   24f82:	add    rsp,0x10
   24f86:	pop    rbx
   24f87:	pop    rbp
   24f88:	pop    r12
   24f8a:	pop    r13
   24f8c:	pop    r14
   24f8e:	ret    
   24f8f:	nop
   24f90:	mov    rbx,QWORD PTR [r13+0x0]
   24f94:	test   rbx,rbx
   24f97:	jne    24fb8 <g_str_equal@plt+0x17cf8>
   24f99:	jmp    25017 <g_str_equal@plt+0x17d57>
   24f9b:	nop    DWORD PTR [rax+rax*1+0x0]
   24fa0:	mov    rsi,rbx
   24fa3:	mov    edx,0x10
   24fa8:	mov    rdi,rbp
   24fab:	call   281f0 <g_str_equal@plt+0x1af30>
   24fb0:	test   rax,rax
   24fb3:	mov    rbx,rax
   24fb6:	je     25010 <g_str_equal@plt+0x17d50>
   24fb8:	lea    rdx,[rbx+0x8]
   24fbc:	xor    esi,esi
   24fbe:	mov    rcx,r12
   24fc1:	mov    rdi,rbp
   24fc4:	call   28960 <g_str_equal@plt+0x1b6a0>
   24fc9:	cmp    QWORD PTR [rsp],0x0
   24fce:	je     24fa0 <g_str_equal@plt+0x17ce0>
   24fd0:	mov    rsi,r13
   24fd3:	mov    rdi,rbp
   24fd6:	call   28390 <g_str_equal@plt+0x1b0d0>
   24fdb:	mov    rsi,QWORD PTR [rsp]
   24fdf:	test   rsi,rsi
   24fe2:	je     24f66 <g_str_equal@plt+0x17ca6>
   24fe4:	mov    rdi,rbp
   24fe7:	call   28770 <g_str_equal@plt+0x1b4b0>
   24fec:	test   al,al
   24fee:	je     25001 <g_str_equal@plt+0x17d41>
   24ff0:	mov    rdi,QWORD PTR [r13+0x0]
   24ff4:	call   44430 <g_str_equal@plt+0x37170>
   24ff9:	mov    QWORD PTR [r13+0x0],0x0
   25001:	mov    rsi,QWORD PTR [rsp]
   25005:	jmp    24f66 <g_str_equal@plt+0x17ca6>
   2500a:	nop    WORD PTR [rax+rax*1+0x0]
   25010:	cmp    QWORD PTR [rsp],0x0
   25015:	jne    24fd0 <g_str_equal@plt+0x17d10>
   25017:	mov    rsi,r12
   2501a:	mov    rdi,rbp
   2501d:	call   282e0 <g_str_equal@plt+0x1b020>
   25022:	jmp    24fd0 <g_str_equal@plt+0x17d10>
   25024:	call   cd30 <__stack_chk_fail@plt>
   25029:	nop    DWORD PTR [rax+0x0]
   25030:	push   r14
   25032:	push   r13
   25034:	mov    r14,rcx
   25037:	push   r12
   25039:	push   rbp
   2503a:	mov    ecx,0x10
   2503f:	push   rbx
   25040:	mov    rbp,rdi
   25043:	mov    r13,rdx
   25046:	sub    rsp,0x10
   2504a:	mov    r12,rsp
   2504d:	mov    QWORD PTR [rsp],0x0
   25055:	mov    r8,r12
   25058:	mov    rax,QWORD PTR fs:0x28
   25061:	mov    QWORD PTR [rsp+0x8],rax
   25066:	xor    eax,eax
   25068:	call   280a0 <g_str_equal@plt+0x1ade0>
   2506d:	mov    rsi,QWORD PTR [rsp]
   25071:	test   rsi,rsi
   25074:	je     250a0 <g_str_equal@plt+0x17de0>
   25076:	mov    rdi,r14
   25079:	call   3a4c0 <g_str_equal@plt+0x2d200>
   2507e:	mov    rax,QWORD PTR [rsp+0x8]
   25083:	xor    rax,QWORD PTR fs:0x28
   2508c:	jne    25134 <g_str_equal@plt+0x17e74>
   25092:	add    rsp,0x10
   25096:	pop    rbx
   25097:	pop    rbp
   25098:	pop    r12
   2509a:	pop    r13
   2509c:	pop    r14
   2509e:	ret    
   2509f:	nop
   250a0:	mov    rbx,QWORD PTR [r13+0x0]
   250a4:	test   rbx,rbx
   250a7:	jne    250c8 <g_str_equal@plt+0x17e08>
   250a9:	jmp    25127 <g_str_equal@plt+0x17e67>
   250ab:	nop    DWORD PTR [rax+rax*1+0x0]
   250b0:	mov    rsi,rbx
   250b3:	mov    edx,0x10
   250b8:	mov    rdi,rbp
   250bb:	call   281f0 <g_str_equal@plt+0x1af30>
   250c0:	test   rax,rax
   250c3:	mov    rbx,rax
   250c6:	je     25120 <g_str_equal@plt+0x17e60>
   250c8:	lea    rdx,[rbx+0x8]
   250cc:	xor    esi,esi
   250ce:	mov    rcx,r12
   250d1:	mov    rdi,rbp
   250d4:	call   28a50 <g_str_equal@plt+0x1b790>
   250d9:	cmp    QWORD PTR [rsp],0x0
   250de:	je     250b0 <g_str_equal@plt+0x17df0>
   250e0:	mov    rsi,r13
   250e3:	mov    rdi,rbp
   250e6:	call   28390 <g_str_equal@plt+0x1b0d0>
   250eb:	mov    rsi,QWORD PTR [rsp]
   250ef:	test   rsi,rsi
   250f2:	je     25076 <g_str_equal@plt+0x17db6>
   250f4:	mov    rdi,rbp
   250f7:	call   28770 <g_str_equal@plt+0x1b4b0>
   250fc:	test   al,al
   250fe:	je     25111 <g_str_equal@plt+0x17e51>
   25100:	mov    rdi,QWORD PTR [r13+0x0]
   25104:	call   44470 <g_str_equal@plt+0x371b0>
   25109:	mov    QWORD PTR [r13+0x0],0x0
   25111:	mov    rsi,QWORD PTR [rsp]
   25115:	jmp    25076 <g_str_equal@plt+0x17db6>
   2511a:	nop    WORD PTR [rax+rax*1+0x0]
   25120:	cmp    QWORD PTR [rsp],0x0
   25125:	jne    250e0 <g_str_equal@plt+0x17e20>
   25127:	mov    rsi,r12
   2512a:	mov    rdi,rbp
   2512d:	call   282e0 <g_str_equal@plt+0x1b020>
   25132:	jmp    250e0 <g_str_equal@plt+0x17e20>
   25134:	call   cd30 <__stack_chk_fail@plt>
   25139:	nop    DWORD PTR [rax+0x0]
   25140:	push   r14
   25142:	push   r13
   25144:	mov    r14,rcx
   25147:	push   r12
   25149:	push   rbp
   2514a:	mov    ecx,0x10
   2514f:	push   rbx
   25150:	mov    rbp,rdi
   25153:	mov    r13,rdx
   25156:	sub    rsp,0x10
   2515a:	mov    r12,rsp
   2515d:	mov    QWORD PTR [rsp],0x0
   25165:	mov    r8,r12
   25168:	mov    rax,QWORD PTR fs:0x28
   25171:	mov    QWORD PTR [rsp+0x8],rax
   25176:	xor    eax,eax
   25178:	call   280a0 <g_str_equal@plt+0x1ade0>
   2517d:	mov    rsi,QWORD PTR [rsp]
   25181:	test   rsi,rsi
   25184:	je     251b0 <g_str_equal@plt+0x17ef0>
   25186:	mov    rdi,r14
   25189:	call   3a4c0 <g_str_equal@plt+0x2d200>
   2518e:	mov    rax,QWORD PTR [rsp+0x8]
   25193:	xor    rax,QWORD PTR fs:0x28
   2519c:	jne    25244 <g_str_equal@plt+0x17f84>
   251a2:	add    rsp,0x10
   251a6:	pop    rbx
   251a7:	pop    rbp
   251a8:	pop    r12
   251aa:	pop    r13
   251ac:	pop    r14
   251ae:	ret    
   251af:	nop
   251b0:	mov    rbx,QWORD PTR [r13+0x0]
   251b4:	test   rbx,rbx
   251b7:	jne    251d8 <g_str_equal@plt+0x17f18>
   251b9:	jmp    25237 <g_str_equal@plt+0x17f77>
   251bb:	nop    DWORD PTR [rax+rax*1+0x0]
   251c0:	mov    rsi,rbx
   251c3:	mov    edx,0x10
   251c8:	mov    rdi,rbp
   251cb:	call   281f0 <g_str_equal@plt+0x1af30>
   251d0:	test   rax,rax
   251d3:	mov    rbx,rax
   251d6:	je     25230 <g_str_equal@plt+0x17f70>
   251d8:	lea    rdx,[rbx+0x8]
   251dc:	xor    esi,esi
   251de:	mov    rcx,r12
   251e1:	mov    rdi,rbp
   251e4:	call   28b40 <g_str_equal@plt+0x1b880>
   251e9:	cmp    QWORD PTR [rsp],0x0
   251ee:	je     251c0 <g_str_equal@plt+0x17f00>
   251f0:	mov    rsi,r13
   251f3:	mov    rdi,rbp
   251f6:	call   28390 <g_str_equal@plt+0x1b0d0>
   251fb:	mov    rsi,QWORD PTR [rsp]
   251ff:	test   rsi,rsi
   25202:	je     25186 <g_str_equal@plt+0x17ec6>
   25204:	mov    rdi,rbp
   25207:	call   28770 <g_str_equal@plt+0x1b4b0>
   2520c:	test   al,al
   2520e:	je     25221 <g_str_equal@plt+0x17f61>
   25210:	mov    rdi,QWORD PTR [r13+0x0]
   25214:	call   444b0 <g_str_equal@plt+0x371f0>
   25219:	mov    QWORD PTR [r13+0x0],0x0
   25221:	mov    rsi,QWORD PTR [rsp]
   25225:	jmp    25186 <g_str_equal@plt+0x17ec6>
   2522a:	nop    WORD PTR [rax+rax*1+0x0]
   25230:	cmp    QWORD PTR [rsp],0x0
   25235:	jne    251f0 <g_str_equal@plt+0x17f30>
   25237:	mov    rsi,r12
   2523a:	mov    rdi,rbp
   2523d:	call   282e0 <g_str_equal@plt+0x1b020>
   25242:	jmp    251f0 <g_str_equal@plt+0x17f30>
   25244:	call   cd30 <__stack_chk_fail@plt>
   25249:	nop    DWORD PTR [rax+0x0]
   25250:	push   r14
   25252:	push   r13
   25254:	mov    r14,rcx
   25257:	push   r12
   25259:	push   rbp
   2525a:	mov    ecx,0x10
   2525f:	push   rbx
   25260:	mov    rbp,rdi
   25263:	mov    r13,rdx
   25266:	sub    rsp,0x10
   2526a:	mov    r12,rsp
   2526d:	mov    QWORD PTR [rsp],0x0
   25275:	mov    r8,r12
   25278:	mov    rax,QWORD PTR fs:0x28
   25281:	mov    QWORD PTR [rsp+0x8],rax
   25286:	xor    eax,eax
   25288:	call   280a0 <g_str_equal@plt+0x1ade0>
   2528d:	mov    rsi,QWORD PTR [rsp]
   25291:	test   rsi,rsi
   25294:	je     252c0 <g_str_equal@plt+0x18000>
   25296:	mov    rdi,r14
   25299:	call   3a4c0 <g_str_equal@plt+0x2d200>
   2529e:	mov    rax,QWORD PTR [rsp+0x8]
   252a3:	xor    rax,QWORD PTR fs:0x28
   252ac:	jne    25354 <g_str_equal@plt+0x18094>
   252b2:	add    rsp,0x10
   252b6:	pop    rbx
   252b7:	pop    rbp
   252b8:	pop    r12
   252ba:	pop    r13
   252bc:	pop    r14
   252be:	ret    
   252bf:	nop
   252c0:	mov    rbx,QWORD PTR [r13+0x0]
   252c4:	test   rbx,rbx
   252c7:	jne    252e8 <g_str_equal@plt+0x18028>
   252c9:	jmp    25347 <g_str_equal@plt+0x18087>
   252cb:	nop    DWORD PTR [rax+rax*1+0x0]
   252d0:	mov    rsi,rbx
   252d3:	mov    edx,0x10
   252d8:	mov    rdi,rbp
   252db:	call   281f0 <g_str_equal@plt+0x1af30>
   252e0:	test   rax,rax
   252e3:	mov    rbx,rax
   252e6:	je     25340 <g_str_equal@plt+0x18080>
   252e8:	lea    rdx,[rbx+0x8]
   252ec:	xor    esi,esi
   252ee:	mov    rcx,r12
   252f1:	mov    rdi,rbp
   252f4:	call   29020 <g_str_equal@plt+0x1bd60>
   252f9:	cmp    QWORD PTR [rsp],0x0
   252fe:	je     252d0 <g_str_equal@plt+0x18010>
   25300:	mov    rsi,r13
   25303:	mov    rdi,rbp
   25306:	call   28390 <g_str_equal@plt+0x1b0d0>
   2530b:	mov    rsi,QWORD PTR [rsp]
   2530f:	test   rsi,rsi
   25312:	je     25296 <g_str_equal@plt+0x17fd6>
   25314:	mov    rdi,rbp
   25317:	call   28770 <g_str_equal@plt+0x1b4b0>
   2531c:	test   al,al
   2531e:	je     25331 <g_str_equal@plt+0x18071>
   25320:	mov    rdi,QWORD PTR [r13+0x0]
   25324:	call   444f0 <g_str_equal@plt+0x37230>
   25329:	mov    QWORD PTR [r13+0x0],0x0
   25331:	mov    rsi,QWORD PTR [rsp]
   25335:	jmp    25296 <g_str_equal@plt+0x17fd6>
   2533a:	nop    WORD PTR [rax+rax*1+0x0]
   25340:	cmp    QWORD PTR [rsp],0x0
   25345:	jne    25300 <g_str_equal@plt+0x18040>
   25347:	mov    rsi,r12
   2534a:	mov    rdi,rbp
   2534d:	call   282e0 <g_str_equal@plt+0x1b020>
   25352:	jmp    25300 <g_str_equal@plt+0x18040>
   25354:	call   cd30 <__stack_chk_fail@plt>
   25359:	nop    DWORD PTR [rax+0x0]
   25360:	push   r14
   25362:	push   r13
   25364:	mov    r14,rcx
   25367:	push   r12
   25369:	push   rbp
   2536a:	mov    ecx,0x10
   2536f:	push   rbx
   25370:	mov    rbp,rdi
   25373:	mov    r13,rdx
   25376:	sub    rsp,0x10
   2537a:	mov    r12,rsp
   2537d:	mov    QWORD PTR [rsp],0x0
   25385:	mov    r8,r12
   25388:	mov    rax,QWORD PTR fs:0x28
   25391:	mov    QWORD PTR [rsp+0x8],rax
   25396:	xor    eax,eax
   25398:	call   280a0 <g_str_equal@plt+0x1ade0>
   2539d:	mov    rsi,QWORD PTR [rsp]
   253a1:	test   rsi,rsi
   253a4:	je     253d0 <g_str_equal@plt+0x18110>
   253a6:	mov    rdi,r14
   253a9:	call   3a4c0 <g_str_equal@plt+0x2d200>
   253ae:	mov    rax,QWORD PTR [rsp+0x8]
   253b3:	xor    rax,QWORD PTR fs:0x28
   253bc:	jne    25464 <g_str_equal@plt+0x181a4>
   253c2:	add    rsp,0x10
   253c6:	pop    rbx
   253c7:	pop    rbp
   253c8:	pop    r12
   253ca:	pop    r13
   253cc:	pop    r14
   253ce:	ret    
   253cf:	nop
   253d0:	mov    rbx,QWORD PTR [r13+0x0]
   253d4:	test   rbx,rbx
   253d7:	jne    253f8 <g_str_equal@plt+0x18138>
   253d9:	jmp    25457 <g_str_equal@plt+0x18197>
   253db:	nop    DWORD PTR [rax+rax*1+0x0]
   253e0:	mov    rsi,rbx
   253e3:	mov    edx,0x10
   253e8:	mov    rdi,rbp
   253eb:	call   281f0 <g_str_equal@plt+0x1af30>
   253f0:	test   rax,rax
   253f3:	mov    rbx,rax
   253f6:	je     25450 <g_str_equal@plt+0x18190>
   253f8:	lea    rdx,[rbx+0x8]
   253fc:	xor    esi,esi
   253fe:	mov    rcx,r12
   25401:	mov    rdi,rbp
   25404:	call   29120 <g_str_equal@plt+0x1be60>
   25409:	cmp    QWORD PTR [rsp],0x0
   2540e:	je     253e0 <g_str_equal@plt+0x18120>
   25410:	mov    rsi,r13
   25413:	mov    rdi,rbp
   25416:	call   28390 <g_str_equal@plt+0x1b0d0>
   2541b:	mov    rsi,QWORD PTR [rsp]
   2541f:	test   rsi,rsi
   25422:	je     253a6 <g_str_equal@plt+0x180e6>
   25424:	mov    rdi,rbp
   25427:	call   28770 <g_str_equal@plt+0x1b4b0>
   2542c:	test   al,al
   2542e:	je     25441 <g_str_equal@plt+0x18181>
   25430:	mov    rdi,QWORD PTR [r13+0x0]
   25434:	call   44530 <g_str_equal@plt+0x37270>
   25439:	mov    QWORD PTR [r13+0x0],0x0
   25441:	mov    rsi,QWORD PTR [rsp]
   25445:	jmp    253a6 <g_str_equal@plt+0x180e6>
   2544a:	nop    WORD PTR [rax+rax*1+0x0]
   25450:	cmp    QWORD PTR [rsp],0x0
   25455:	jne    25410 <g_str_equal@plt+0x18150>
   25457:	mov    rsi,r12
   2545a:	mov    rdi,rbp
   2545d:	call   282e0 <g_str_equal@plt+0x1b020>
   25462:	jmp    25410 <g_str_equal@plt+0x18150>
   25464:	call   cd30 <__stack_chk_fail@plt>
   25469:	nop    DWORD PTR [rax+0x0]
   25470:	push   r14
   25472:	push   r13
   25474:	mov    r14,rcx
   25477:	push   r12
   25479:	push   rbp
   2547a:	mov    ecx,0x10
   2547f:	push   rbx
   25480:	mov    rbp,rdi
   25483:	mov    r13,rdx
   25486:	sub    rsp,0x10
   2548a:	mov    r12,rsp
   2548d:	mov    QWORD PTR [rsp],0x0
   25495:	mov    r8,r12
   25498:	mov    rax,QWORD PTR fs:0x28
   254a1:	mov    QWORD PTR [rsp+0x8],rax
   254a6:	xor    eax,eax
   254a8:	call   280a0 <g_str_equal@plt+0x1ade0>
   254ad:	mov    rsi,QWORD PTR [rsp]
   254b1:	test   rsi,rsi
   254b4:	je     254e0 <g_str_equal@plt+0x18220>
   254b6:	mov    rdi,r14
   254b9:	call   3a4c0 <g_str_equal@plt+0x2d200>
   254be:	mov    rax,QWORD PTR [rsp+0x8]
   254c3:	xor    rax,QWORD PTR fs:0x28
   254cc:	jne    25574 <g_str_equal@plt+0x182b4>
   254d2:	add    rsp,0x10
   254d6:	pop    rbx
   254d7:	pop    rbp
   254d8:	pop    r12
   254da:	pop    r13
   254dc:	pop    r14
   254de:	ret    
   254df:	nop
   254e0:	mov    rbx,QWORD PTR [r13+0x0]
   254e4:	test   rbx,rbx
   254e7:	jne    25508 <g_str_equal@plt+0x18248>
   254e9:	jmp    25567 <g_str_equal@plt+0x182a7>
   254eb:	nop    DWORD PTR [rax+rax*1+0x0]
   254f0:	mov    rsi,rbx
   254f3:	mov    edx,0x10
   254f8:	mov    rdi,rbp
   254fb:	call   281f0 <g_str_equal@plt+0x1af30>
   25500:	test   rax,rax
   25503:	mov    rbx,rax
   25506:	je     25560 <g_str_equal@plt+0x182a0>
   25508:	lea    rdx,[rbx+0x8]
   2550c:	xor    esi,esi
   2550e:	mov    rcx,r12
   25511:	mov    rdi,rbp
   25514:	call   29450 <g_str_equal@plt+0x1c190>
   25519:	cmp    QWORD PTR [rsp],0x0
   2551e:	je     254f0 <g_str_equal@plt+0x18230>
   25520:	mov    rsi,r13
   25523:	mov    rdi,rbp
   25526:	call   28390 <g_str_equal@plt+0x1b0d0>
   2552b:	mov    rsi,QWORD PTR [rsp]
   2552f:	test   rsi,rsi
   25532:	je     254b6 <g_str_equal@plt+0x181f6>
   25534:	mov    rdi,rbp
   25537:	call   28770 <g_str_equal@plt+0x1b4b0>
   2553c:	test   al,al
   2553e:	je     25551 <g_str_equal@plt+0x18291>
   25540:	mov    rdi,QWORD PTR [r13+0x0]
   25544:	call   44570 <g_str_equal@plt+0x372b0>
   25549:	mov    QWORD PTR [r13+0x0],0x0
   25551:	mov    rsi,QWORD PTR [rsp]
   25555:	jmp    254b6 <g_str_equal@plt+0x181f6>
   2555a:	nop    WORD PTR [rax+rax*1+0x0]
   25560:	cmp    QWORD PTR [rsp],0x0
   25565:	jne    25520 <g_str_equal@plt+0x18260>
   25567:	mov    rsi,r12
   2556a:	mov    rdi,rbp
   2556d:	call   282e0 <g_str_equal@plt+0x1b020>
   25572:	jmp    25520 <g_str_equal@plt+0x18260>
   25574:	call   cd30 <__stack_chk_fail@plt>
   25579:	nop    DWORD PTR [rax+0x0]
   25580:	push   r14
   25582:	push   r13
   25584:	mov    r14,rcx
   25587:	push   r12
   25589:	push   rbp
   2558a:	mov    ecx,0x10
   2558f:	push   rbx
   25590:	mov    rbp,rdi
   25593:	mov    r13,rdx
   25596:	sub    rsp,0x10
   2559a:	mov    r12,rsp
   2559d:	mov    QWORD PTR [rsp],0x0
   255a5:	mov    r8,r12
   255a8:	mov    rax,QWORD PTR fs:0x28
   255b1:	mov    QWORD PTR [rsp+0x8],rax
   255b6:	xor    eax,eax
   255b8:	call   280a0 <g_str_equal@plt+0x1ade0>
   255bd:	mov    rsi,QWORD PTR [rsp]
   255c1:	test   rsi,rsi
   255c4:	je     255f0 <g_str_equal@plt+0x18330>
   255c6:	mov    rdi,r14
   255c9:	call   3a4c0 <g_str_equal@plt+0x2d200>
   255ce:	mov    rax,QWORD PTR [rsp+0x8]
   255d3:	xor    rax,QWORD PTR fs:0x28
   255dc:	jne    25684 <g_str_equal@plt+0x183c4>
   255e2:	add    rsp,0x10
   255e6:	pop    rbx
   255e7:	pop    rbp
   255e8:	pop    r12
   255ea:	pop    r13
   255ec:	pop    r14
   255ee:	ret    
   255ef:	nop
   255f0:	mov    rbx,QWORD PTR [r13+0x0]
   255f4:	test   rbx,rbx
   255f7:	jne    25618 <g_str_equal@plt+0x18358>
   255f9:	jmp    25677 <g_str_equal@plt+0x183b7>
   255fb:	nop    DWORD PTR [rax+rax*1+0x0]
   25600:	mov    rsi,rbx
   25603:	mov    edx,0x10
   25608:	mov    rdi,rbp
   2560b:	call   281f0 <g_str_equal@plt+0x1af30>
   25610:	test   rax,rax
   25613:	mov    rbx,rax
   25616:	je     25670 <g_str_equal@plt+0x183b0>
   25618:	lea    rdx,[rbx+0x8]
   2561c:	xor    esi,esi
   2561e:	mov    rcx,r12
   25621:	mov    rdi,rbp
   25624:	call   295d0 <g_str_equal@plt+0x1c310>
   25629:	cmp    QWORD PTR [rsp],0x0
   2562e:	je     25600 <g_str_equal@plt+0x18340>
   25630:	mov    rsi,r13
   25633:	mov    rdi,rbp
   25636:	call   28390 <g_str_equal@plt+0x1b0d0>
   2563b:	mov    rsi,QWORD PTR [rsp]
   2563f:	test   rsi,rsi
   25642:	je     255c6 <g_str_equal@plt+0x18306>
   25644:	mov    rdi,rbp
   25647:	call   28770 <g_str_equal@plt+0x1b4b0>
   2564c:	test   al,al
   2564e:	je     25661 <g_str_equal@plt+0x183a1>
   25650:	mov    rdi,QWORD PTR [r13+0x0]
   25654:	call   445b0 <g_str_equal@plt+0x372f0>
   25659:	mov    QWORD PTR [r13+0x0],0x0
   25661:	mov    rsi,QWORD PTR [rsp]
   25665:	jmp    255c6 <g_str_equal@plt+0x18306>
   2566a:	nop    WORD PTR [rax+rax*1+0x0]
   25670:	cmp    QWORD PTR [rsp],0x0
   25675:	jne    25630 <g_str_equal@plt+0x18370>
   25677:	mov    rsi,r12
   2567a:	mov    rdi,rbp
   2567d:	call   282e0 <g_str_equal@plt+0x1b020>
   25682:	jmp    25630 <g_str_equal@plt+0x18370>
   25684:	call   cd30 <__stack_chk_fail@plt>
   25689:	nop    DWORD PTR [rax+0x0]
   25690:	push   rbx
   25691:	mov    r8,rcx
   25694:	mov    rbx,rdx
   25697:	lea    rcx,[rip+0x25b682]        # 280d20 <_fini@@Base+0x22e5cc>
   2569e:	sub    rsp,0x10
   256a2:	mov    rax,QWORD PTR fs:0x28
   256ab:	mov    QWORD PTR [rsp+0x8],rax
   256b0:	xor    eax,eax
   256b2:	mov    eax,DWORD PTR [rdx]
   256b4:	lea    rdx,[rsp+0x4]
   256b9:	mov    DWORD PTR [rsp+0x4],eax
   256bd:	call   296a0 <g_str_equal@plt+0x1c3e0>
   256c2:	mov    eax,DWORD PTR [rsp+0x4]
   256c6:	mov    DWORD PTR [rbx],eax
   256c8:	mov    rax,QWORD PTR [rsp+0x8]
   256cd:	xor    rax,QWORD PTR fs:0x28
   256d6:	jne    256de <g_str_equal@plt+0x1841e>
   256d8:	add    rsp,0x10
   256dc:	pop    rbx
   256dd:	ret    
   256de:	call   cd30 <__stack_chk_fail@plt>
   256e3:	nop    WORD PTR cs:[rax+rax*1+0x0]
   256ed:	nop    DWORD PTR [rax]
   256f0:	push   rbx
   256f1:	mov    r8,rcx
   256f4:	mov    rbx,rdx
   256f7:	lea    rcx,[rip+0x25b322]        # 280a20 <_fini@@Base+0x22e2cc>
   256fe:	sub    rsp,0x10
   25702:	mov    rax,QWORD PTR fs:0x28
   2570b:	mov    QWORD PTR [rsp+0x8],rax
   25710:	xor    eax,eax
   25712:	mov    eax,DWORD PTR [rdx]
   25714:	lea    rdx,[rsp+0x4]
   25719:	mov    DWORD PTR [rsp+0x4],eax
   2571d:	call   296a0 <g_str_equal@plt+0x1c3e0>
   25722:	mov    eax,DWORD PTR [rsp+0x4]
   25726:	mov    DWORD PTR [rbx],eax
   25728:	mov    rax,QWORD PTR [rsp+0x8]
   2572d:	xor    rax,QWORD PTR fs:0x28
   25736:	jne    2573e <g_str_equal@plt+0x1847e>
   25738:	add    rsp,0x10
   2573c:	pop    rbx
   2573d:	ret    
   2573e:	call   cd30 <__stack_chk_fail@plt>
   25743:	nop    DWORD PTR [rax]
   25746:	nop    WORD PTR cs:[rax+rax*1+0x0]
   25750:	push   rbx
   25751:	mov    r8,rcx
   25754:	mov    rbx,rdx
   25757:	lea    rcx,[rip+0x25b2a2]        # 280a00 <_fini@@Base+0x22e2ac>
   2575e:	sub    rsp,0x10
   25762:	mov    rax,QWORD PTR fs:0x28
   2576b:	mov    QWORD PTR [rsp+0x8],rax
   25770:	xor    eax,eax
   25772:	mov    eax,DWORD PTR [rdx]
   25774:	lea    rdx,[rsp+0x4]
   25779:	mov    DWORD PTR [rsp+0x4],eax
   2577d:	call   296a0 <g_str_equal@plt+0x1c3e0>
   25782:	mov    eax,DWORD PTR [rsp+0x4]
   25786:	mov    DWORD PTR [rbx],eax
   25788:	mov    rax,QWORD PTR [rsp+0x8]
   2578d:	xor    rax,QWORD PTR fs:0x28
   25796:	jne    2579e <g_str_equal@plt+0x184de>
   25798:	add    rsp,0x10
   2579c:	pop    rbx
   2579d:	ret    
   2579e:	call   cd30 <__stack_chk_fail@plt>
   257a3:	nop    DWORD PTR [rax]
   257a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   257b0:	push   rbx
   257b1:	mov    r8,rcx
   257b4:	mov    rbx,rdx
   257b7:	lea    rcx,[rip+0x25b1e2]        # 2809a0 <_fini@@Base+0x22e24c>
   257be:	sub    rsp,0x10
   257c2:	mov    rax,QWORD PTR fs:0x28
   257cb:	mov    QWORD PTR [rsp+0x8],rax
   257d0:	xor    eax,eax
   257d2:	mov    eax,DWORD PTR [rdx]
   257d4:	lea    rdx,[rsp+0x4]
   257d9:	mov    DWORD PTR [rsp+0x4],eax
   257dd:	call   296a0 <g_str_equal@plt+0x1c3e0>
   257e2:	mov    eax,DWORD PTR [rsp+0x4]
   257e6:	mov    DWORD PTR [rbx],eax
   257e8:	mov    rax,QWORD PTR [rsp+0x8]
   257ed:	xor    rax,QWORD PTR fs:0x28
   257f6:	jne    257fe <g_str_equal@plt+0x1853e>
   257f8:	add    rsp,0x10
   257fc:	pop    rbx
   257fd:	ret    
   257fe:	call   cd30 <__stack_chk_fail@plt>
   25803:	nop    DWORD PTR [rax]
   25806:	nop    WORD PTR cs:[rax+rax*1+0x0]
   25810:	push   rbx
   25811:	mov    r8,rcx
   25814:	mov    rbx,rdx
   25817:	lea    rcx,[rip+0x25b102]        # 280920 <_fini@@Base+0x22e1cc>
   2581e:	sub    rsp,0x10
   25822:	mov    rax,QWORD PTR fs:0x28
   2582b:	mov    QWORD PTR [rsp+0x8],rax
   25830:	xor    eax,eax
   25832:	mov    eax,DWORD PTR [rdx]
   25834:	lea    rdx,[rsp+0x4]
   25839:	mov    DWORD PTR [rsp+0x4],eax
   2583d:	call   296a0 <g_str_equal@plt+0x1c3e0>
   25842:	mov    eax,DWORD PTR [rsp+0x4]
   25846:	mov    DWORD PTR [rbx],eax
   25848:	mov    rax,QWORD PTR [rsp+0x8]
   2584d:	xor    rax,QWORD PTR fs:0x28
   25856:	jne    2585e <g_str_equal@plt+0x1859e>
   25858:	add    rsp,0x10
   2585c:	pop    rbx
   2585d:	ret    
   2585e:	call   cd30 <__stack_chk_fail@plt>
   25863:	nop    DWORD PTR [rax]
   25866:	nop    WORD PTR cs:[rax+rax*1+0x0]
   25870:	push   rbx
   25871:	mov    r8,rcx
   25874:	mov    rbx,rdx
   25877:	lea    rcx,[rip+0x25b072]        # 2808f0 <_fini@@Base+0x22e19c>
   2587e:	sub    rsp,0x10
   25882:	mov    rax,QWORD PTR fs:0x28
   2588b:	mov    QWORD PTR [rsp+0x8],rax
   25890:	xor    eax,eax
   25892:	mov    eax,DWORD PTR [rdx]
   25894:	lea    rdx,[rsp+0x4]
   25899:	mov    DWORD PTR [rsp+0x4],eax
   2589d:	call   296a0 <g_str_equal@plt+0x1c3e0>
   258a2:	mov    eax,DWORD PTR [rsp+0x4]
   258a6:	mov    DWORD PTR [rbx],eax
   258a8:	mov    rax,QWORD PTR [rsp+0x8]
   258ad:	xor    rax,QWORD PTR fs:0x28
   258b6:	jne    258be <g_str_equal@plt+0x185fe>
   258b8:	add    rsp,0x10
   258bc:	pop    rbx
   258bd:	ret    
   258be:	call   cd30 <__stack_chk_fail@plt>
   258c3:	nop    DWORD PTR [rax]
   258c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   258d0:	push   rbx
   258d1:	mov    r8,rcx
   258d4:	mov    rbx,rdx
   258d7:	lea    rcx,[rip+0x25afe2]        # 2808c0 <_fini@@Base+0x22e16c>
   258de:	sub    rsp,0x10
   258e2:	mov    rax,QWORD PTR fs:0x28
   258eb:	mov    QWORD PTR [rsp+0x8],rax
   258f0:	xor    eax,eax
   258f2:	mov    eax,DWORD PTR [rdx]
   258f4:	lea    rdx,[rsp+0x4]
   258f9:	mov    DWORD PTR [rsp+0x4],eax
   258fd:	call   296a0 <g_str_equal@plt+0x1c3e0>
   25902:	mov    eax,DWORD PTR [rsp+0x4]
   25906:	mov    DWORD PTR [rbx],eax
   25908:	mov    rax,QWORD PTR [rsp+0x8]
   2590d:	xor    rax,QWORD PTR fs:0x28
   25916:	jne    2591e <g_str_equal@plt+0x1865e>
   25918:	add    rsp,0x10
   2591c:	pop    rbx
   2591d:	ret    
   2591e:	call   cd30 <__stack_chk_fail@plt>
   25923:	nop    DWORD PTR [rax]
   25926:	nop    WORD PTR cs:[rax+rax*1+0x0]
   25930:	push   rbx
   25931:	mov    r8,rcx
   25934:	mov    rbx,rdx
   25937:	lea    rcx,[rip+0x25af62]        # 2808a0 <_fini@@Base+0x22e14c>
   2593e:	sub    rsp,0x10
   25942:	mov    rax,QWORD PTR fs:0x28
   2594b:	mov    QWORD PTR [rsp+0x8],rax
   25950:	xor    eax,eax
   25952:	mov    eax,DWORD PTR [rdx]
   25954:	lea    rdx,[rsp+0x4]
   25959:	mov    DWORD PTR [rsp+0x4],eax
   2595d:	call   296a0 <g_str_equal@plt+0x1c3e0>
   25962:	mov    eax,DWORD PTR [rsp+0x4]
   25966:	mov    DWORD PTR [rbx],eax
   25968:	mov    rax,QWORD PTR [rsp+0x8]
   2596d:	xor    rax,QWORD PTR fs:0x28
   25976:	jne    2597e <g_str_equal@plt+0x186be>
   25978:	add    rsp,0x10
   2597c:	pop    rbx
   2597d:	ret    
   2597e:	call   cd30 <__stack_chk_fail@plt>
   25983:	nop    DWORD PTR [rax]
   25986:	nop    WORD PTR cs:[rax+rax*1+0x0]
   25990:	push   rbp
   25991:	push   rbx
   25992:	mov    rbp,rdx
   25995:	mov    rbx,rsi
   25998:	lea    rcx,[rip+0x25af01]        # 2808a0 <_fini@@Base+0x22e14c>
   2599f:	sub    rsp,0x28
   259a3:	mov    rax,QWORD PTR fs:0x28
   259ac:	mov    QWORD PTR [rsp+0x18],rax
   259b1:	xor    eax,eax
   259b3:	mov    eax,DWORD PTR [rsi]
   259b5:	lea    rdx,[rsp+0xc]
   259ba:	lea    r8,[rsp+0x10]
   259bf:	lea    rsi,[rip+0x347b0]        # 5a176 <_fini@@Base+0x7a22>
   259c6:	mov    QWORD PTR [rsp+0x10],0x0
   259cf:	mov    DWORD PTR [rsp+0xc],eax
   259d3:	call   296a0 <g_str_equal@plt+0x1c3e0>
   259d8:	mov    eax,DWORD PTR [rsp+0xc]
   259dc:	mov    rsi,QWORD PTR [rsp+0x10]
   259e1:	mov    rdi,rbp
   259e4:	mov    DWORD PTR [rbx],eax
   259e6:	call   3a4c0 <g_str_equal@plt+0x2d200>
   259eb:	mov    rax,QWORD PTR [rsp+0x18]
   259f0:	xor    rax,QWORD PTR fs:0x28
   259f9:	jne    25a02 <g_str_equal@plt+0x18742>
   259fb:	add    rsp,0x28
   259ff:	pop    rbx
   25a00:	pop    rbp
   25a01:	ret    
   25a02:	call   cd30 <__stack_chk_fail@plt>
   25a07:	nop    WORD PTR [rax+rax*1+0x0]
   25a10:	push   r13
   25a12:	push   r12
   25a14:	mov    r13,rcx
   25a17:	push   rbp
   25a18:	push   rbx
   25a19:	mov    ecx,0x4
   25a1e:	mov    rbp,rdi
   25a21:	mov    rbx,rdx
   25a24:	sub    rsp,0x18
   25a28:	mov    r12,rsp
   25a2b:	mov    QWORD PTR [rsp],0x0
   25a33:	mov    r8,r12
   25a36:	mov    rax,QWORD PTR fs:0x28
   25a3f:	mov    QWORD PTR [rsp+0x8],rax
   25a44:	xor    eax,eax
   25a46:	call   27da0 <g_str_equal@plt+0x1aae0>
   25a4b:	mov    rsi,QWORD PTR [rsp]
   25a4f:	test   rsi,rsi
   25a52:	je     25a80 <g_str_equal@plt+0x187c0>
   25a54:	mov    rdi,r13
   25a57:	call   3a4c0 <g_str_equal@plt+0x2d200>
   25a5c:	mov    rax,QWORD PTR [rsp+0x8]
   25a61:	xor    rax,QWORD PTR fs:0x28
   25a6a:	jne    25add <g_str_equal@plt+0x1881d>
   25a6c:	add    rsp,0x18
   25a70:	pop    rbx
   25a71:	pop    rbp
   25a72:	pop    r12
   25a74:	pop    r13
   25a76:	ret    
   25a77:	nop    WORD PTR [rax+rax*1+0x0]
   25a80:	mov    rsi,QWORD PTR [rbx]
   25a83:	test   rsi,rsi
   25a86:	je     25a9a <g_str_equal@plt+0x187da>
   25a88:	mov    rdx,r12
   25a8b:	mov    rdi,rbp
   25a8e:	call   25990 <g_str_equal@plt+0x186d0>
   25a93:	cmp    QWORD PTR [rsp],0x0
   25a98:	je     25ad0 <g_str_equal@plt+0x18810>
   25a9a:	mov    rsi,rbx
   25a9d:	mov    rdi,rbp
   25aa0:	call   28000 <g_str_equal@plt+0x1ad40>
   25aa5:	mov    rsi,QWORD PTR [rsp]
   25aa9:	test   rsi,rsi
   25aac:	je     25a54 <g_str_equal@plt+0x18794>
   25aae:	mov    rdi,rbp
   25ab1:	call   28770 <g_str_equal@plt+0x1b4b0>
   25ab6:	test   al,al
   25ab8:	je     25ac9 <g_str_equal@plt+0x18809>
   25aba:	mov    rdi,QWORD PTR [rbx]
   25abd:	call   24260 <g_str_equal@plt+0x16fa0>
   25ac2:	mov    QWORD PTR [rbx],0x0
   25ac9:	mov    rsi,QWORD PTR [rsp]
   25acd:	jmp    25a54 <g_str_equal@plt+0x18794>
   25acf:	nop
   25ad0:	mov    rsi,r12
   25ad3:	mov    rdi,rbp
   25ad6:	call   27f50 <g_str_equal@plt+0x1ac90>
   25adb:	jmp    25a9a <g_str_equal@plt+0x187da>
   25add:	call   cd30 <__stack_chk_fail@plt>
   25ae2:	nop    DWORD PTR [rax+0x0]
   25ae6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   25af0:	push   r12
   25af2:	push   rbp
   25af3:	mov    r12,rdx
   25af6:	push   rbx
   25af7:	mov    rdx,rsi
   25afa:	mov    rbx,rsi
   25afd:	lea    rsi,[rip+0x38563]        # 5e067 <_fini@@Base+0xb913>
   25b04:	mov    rbp,rdi
   25b07:	sub    rsp,0x10
   25b0b:	mov    rax,QWORD PTR fs:0x28
   25b14:	mov    QWORD PTR [rsp+0x8],rax
   25b19:	xor    eax,eax
   25b1b:	mov    QWORD PTR [rsp],0x0
   25b23:	call   286a0 <g_str_equal@plt+0x1b3e0>
   25b28:	test   al,al
   25b2a:	je     25b42 <g_str_equal@plt+0x18882>
   25b2c:	lea    rdx,[rbx+0x8]
   25b30:	lea    rsi,[rip+0x38530]        # 5e067 <_fini@@Base+0xb913>
   25b37:	mov    rcx,rsp
   25b3a:	mov    rdi,rbp
   25b3d:	call   29210 <g_str_equal@plt+0x1bf50>
   25b42:	mov    rsi,QWORD PTR [rsp]
   25b46:	mov    rdi,r12
   25b49:	call   3a4c0 <g_str_equal@plt+0x2d200>
   25b4e:	mov    rax,QWORD PTR [rsp+0x8]
   25b53:	xor    rax,QWORD PTR fs:0x28
   25b5c:	jne    25b67 <g_str_equal@plt+0x188a7>
   25b5e:	add    rsp,0x10
   25b62:	pop    rbx
   25b63:	pop    rbp
   25b64:	pop    r12
   25b66:	ret    
   25b67:	call   cd30 <__stack_chk_fail@plt>
   25b6c:	nop    DWORD PTR [rax+0x0]
   25b70:	push   r13
   25b72:	push   r12
   25b74:	mov    r13,rcx
   25b77:	push   rbp
   25b78:	push   rbx
   25b79:	mov    ecx,0x10
   25b7e:	mov    rbp,rdi
   25b81:	mov    rbx,rdx
   25b84:	sub    rsp,0x18
   25b88:	mov    r12,rsp
   25b8b:	mov    QWORD PTR [rsp],0x0
   25b93:	mov    r8,r12
   25b96:	mov    rax,QWORD PTR fs:0x28
   25b9f:	mov    QWORD PTR [rsp+0x8],rax
   25ba4:	xor    eax,eax
   25ba6:	call   27da0 <g_str_equal@plt+0x1aae0>
   25bab:	mov    rsi,QWORD PTR [rsp]
   25baf:	test   rsi,rsi
   25bb2:	je     25be0 <g_str_equal@plt+0x18920>
   25bb4:	mov    rdi,r13
   25bb7:	call   3a4c0 <g_str_equal@plt+0x2d200>
   25bbc:	mov    rax,QWORD PTR [rsp+0x8]
   25bc1:	xor    rax,QWORD PTR fs:0x28
   25bca:	jne    25c3d <g_str_equal@plt+0x1897d>
   25bcc:	add    rsp,0x18
   25bd0:	pop    rbx
   25bd1:	pop    rbp
   25bd2:	pop    r12
   25bd4:	pop    r13
   25bd6:	ret    
   25bd7:	nop    WORD PTR [rax+rax*1+0x0]
   25be0:	mov    rsi,QWORD PTR [rbx]
   25be3:	test   rsi,rsi
   25be6:	je     25bfa <g_str_equal@plt+0x1893a>
   25be8:	mov    rdx,r12
   25beb:	mov    rdi,rbp
   25bee:	call   25af0 <g_str_equal@plt+0x18830>
   25bf3:	cmp    QWORD PTR [rsp],0x0
   25bf8:	je     25c30 <g_str_equal@plt+0x18970>
   25bfa:	mov    rsi,rbx
   25bfd:	mov    rdi,rbp
   25c00:	call   28000 <g_str_equal@plt+0x1ad40>
   25c05:	mov    rsi,QWORD PTR [rsp]
   25c09:	test   rsi,rsi
   25c0c:	je     25bb4 <g_str_equal@plt+0x188f4>
   25c0e:	mov    rdi,rbp
   25c11:	call   28770 <g_str_equal@plt+0x1b4b0>
   25c16:	test   al,al
   25c18:	je     25c29 <g_str_equal@plt+0x18969>
   25c1a:	mov    rdi,QWORD PTR [rbx]
   25c1d:	call   242a0 <g_str_equal@plt+0x16fe0>
   25c22:	mov    QWORD PTR [rbx],0x0
   25c29:	mov    rsi,QWORD PTR [rsp]
   25c2d:	jmp    25bb4 <g_str_equal@plt+0x188f4>
   25c2f:	nop
   25c30:	mov    rsi,r12
   25c33:	mov    rdi,rbp
   25c36:	call   27f50 <g_str_equal@plt+0x1ac90>
   25c3b:	jmp    25bfa <g_str_equal@plt+0x1893a>
   25c3d:	call   cd30 <__stack_chk_fail@plt>
   25c42:	nop    DWORD PTR [rax+0x0]
   25c46:	nop    WORD PTR cs:[rax+rax*1+0x0]
   25c50:	push   r12
   25c52:	push   rbp
   25c53:	mov    r12,rdx
   25c56:	push   rbx
   25c57:	mov    rdx,rsi
   25c5a:	mov    rbx,rsi
   25c5d:	lea    rsi,[rip+0x38403]        # 5e067 <_fini@@Base+0xb913>
   25c64:	mov    rbp,rdi
   25c67:	sub    rsp,0x10
   25c6b:	mov    rax,QWORD PTR fs:0x28
   25c74:	mov    QWORD PTR [rsp+0x8],rax
   25c79:	xor    eax,eax
   25c7b:	mov    QWORD PTR [rsp],0x0
   25c83:	call   286a0 <g_str_equal@plt+0x1b3e0>
   25c88:	test   al,al
   25c8a:	je     25ca2 <g_str_equal@plt+0x189e2>
   25c8c:	lea    rdx,[rbx+0x8]
   25c90:	lea    rsi,[rip+0x383d0]        # 5e067 <_fini@@Base+0xb913>
   25c97:	mov    rcx,rsp
   25c9a:	mov    rdi,rbp
   25c9d:	call   29210 <g_str_equal@plt+0x1bf50>
   25ca2:	mov    rsi,QWORD PTR [rsp]
   25ca6:	mov    rdi,r12
   25ca9:	call   3a4c0 <g_str_equal@plt+0x2d200>
   25cae:	mov    rax,QWORD PTR [rsp+0x8]
   25cb3:	xor    rax,QWORD PTR fs:0x28
   25cbc:	jne    25cc7 <g_str_equal@plt+0x18a07>
   25cbe:	add    rsp,0x10
   25cc2:	pop    rbx
   25cc3:	pop    rbp
   25cc4:	pop    r12
   25cc6:	ret    
   25cc7:	call   cd30 <__stack_chk_fail@plt>
   25ccc:	nop    DWORD PTR [rax+0x0]
   25cd0:	push   r13
   25cd2:	push   r12
   25cd4:	mov    r13,rcx
   25cd7:	push   rbp
   25cd8:	push   rbx
   25cd9:	mov    ecx,0x10
   25cde:	mov    rbp,rdi
   25ce1:	mov    rbx,rdx
   25ce4:	sub    rsp,0x18
   25ce8:	mov    r12,rsp
   25ceb:	mov    QWORD PTR [rsp],0x0
   25cf3:	mov    r8,r12
   25cf6:	mov    rax,QWORD PTR fs:0x28
   25cff:	mov    QWORD PTR [rsp+0x8],rax
   25d04:	xor    eax,eax
   25d06:	call   27da0 <g_str_equal@plt+0x1aae0>
   25d0b:	mov    rsi,QWORD PTR [rsp]
   25d0f:	test   rsi,rsi
   25d12:	je     25d40 <g_str_equal@plt+0x18a80>
   25d14:	mov    rdi,r13
   25d17:	call   3a4c0 <g_str_equal@plt+0x2d200>
   25d1c:	mov    rax,QWORD PTR [rsp+0x8]
   25d21:	xor    rax,QWORD PTR fs:0x28
   25d2a:	jne    25d9d <g_str_equal@plt+0x18add>
   25d2c:	add    rsp,0x18
   25d30:	pop    rbx
   25d31:	pop    rbp
   25d32:	pop    r12
   25d34:	pop    r13
   25d36:	ret    
   25d37:	nop    WORD PTR [rax+rax*1+0x0]
   25d40:	mov    rsi,QWORD PTR [rbx]
   25d43:	test   rsi,rsi
   25d46:	je     25d5a <g_str_equal@plt+0x18a9a>
   25d48:	mov    rdx,r12
   25d4b:	mov    rdi,rbp
   25d4e:	call   25c50 <g_str_equal@plt+0x18990>
   25d53:	cmp    QWORD PTR [rsp],0x0
   25d58:	je     25d90 <g_str_equal@plt+0x18ad0>
   25d5a:	mov    rsi,rbx
   25d5d:	mov    rdi,rbp
   25d60:	call   28000 <g_str_equal@plt+0x1ad40>
   25d65:	mov    rsi,QWORD PTR [rsp]
   25d69:	test   rsi,rsi
   25d6c:	je     25d14 <g_str_equal@plt+0x18a54>
   25d6e:	mov    rdi,rbp
   25d71:	call   28770 <g_str_equal@plt+0x1b4b0>
   25d76:	test   al,al
   25d78:	je     25d89 <g_str_equal@plt+0x18ac9>
   25d7a:	mov    rdi,QWORD PTR [rbx]
   25d7d:	call   242e0 <g_str_equal@plt+0x17020>
   25d82:	mov    QWORD PTR [rbx],0x0
   25d89:	mov    rsi,QWORD PTR [rsp]
   25d8d:	jmp    25d14 <g_str_equal@plt+0x18a54>
   25d8f:	nop
   25d90:	mov    rsi,r12
   25d93:	mov    rdi,rbp
   25d96:	call   27f50 <g_str_equal@plt+0x1ac90>
   25d9b:	jmp    25d5a <g_str_equal@plt+0x18a9a>
   25d9d:	call   cd30 <__stack_chk_fail@plt>
   25da2:	nop    DWORD PTR [rax+0x0]
   25da6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   25db0:	push   r13
   25db2:	push   r12
   25db4:	mov    r13,rdx
   25db7:	push   rbp
   25db8:	push   rbx
   25db9:	mov    rbp,rdi
   25dbc:	mov    rbx,rsi
   25dbf:	sub    rsp,0x28
   25dc3:	lea    r12,[rsp+0x10]
   25dc8:	mov    QWORD PTR [rsp+0x10],0x0
   25dd1:	mov    rax,QWORD PTR fs:0x28
   25dda:	mov    QWORD PTR [rsp+0x18],rax
   25ddf:	xor    eax,eax
   25de1:	mov    rdx,r12
   25de4:	call   25c50 <g_str_equal@plt+0x18990>
   25de9:	mov    rsi,QWORD PTR [rsp+0x10]
   25dee:	test   rsi,rsi
   25df1:	je     25e20 <g_str_equal@plt+0x18b60>
   25df3:	mov    rdi,r13
   25df6:	call   3a4c0 <g_str_equal@plt+0x2d200>
   25dfb:	mov    rax,QWORD PTR [rsp+0x18]
   25e00:	xor    rax,QWORD PTR fs:0x28
   25e09:	jne    25ff7 <g_str_equal@plt+0x18d37>
   25e0f:	add    rsp,0x28
   25e13:	pop    rbx
   25e14:	pop    rbp
   25e15:	pop    r12
   25e17:	pop    r13
   25e19:	ret    
   25e1a:	nop    WORD PTR [rax+rax*1+0x0]
   25e20:	lea    rdx,[rbx+0x10]
   25e24:	lea    rsi,[rip+0x38247]        # 5e072 <_fini@@Base+0xb91e>
   25e2b:	mov    rdi,rbp
   25e2e:	call   286a0 <g_str_equal@plt+0x1b3e0>
   25e33:	test   al,al
   25e35:	je     25e6d <g_str_equal@plt+0x18bad>
   25e37:	mov    eax,DWORD PTR [rbx+0x14]
   25e3a:	lea    rsi,[rip+0x38231]        # 5e072 <_fini@@Base+0xb91e>
   25e41:	lea    rdx,[rsp+0xc]
   25e46:	lea    rcx,[rip+0x25aad3]        # 280920 <_fini@@Base+0x22e1cc>
   25e4d:	mov    r8,r12
   25e50:	mov    rdi,rbp
   25e53:	mov    DWORD PTR [rsp+0xc],eax
   25e57:	call   296a0 <g_str_equal@plt+0x1c3e0>
   25e5c:	mov    rsi,QWORD PTR [rsp+0x10]
   25e61:	mov    eax,DWORD PTR [rsp+0xc]
   25e65:	test   rsi,rsi
   25e68:	mov    DWORD PTR [rbx+0x14],eax
   25e6b:	jne    25df3 <g_str_equal@plt+0x18b33>
   25e6d:	lea    rdx,[rbx+0x18]
   25e71:	lea    rsi,[rip+0x38205]        # 5e07d <_fini@@Base+0xb929>
   25e78:	mov    rdi,rbp
   25e7b:	call   286a0 <g_str_equal@plt+0x1b3e0>
   25e80:	test   al,al
   25e82:	je     25ebe <g_str_equal@plt+0x18bfe>
   25e84:	mov    eax,DWORD PTR [rbx+0x1c]
   25e87:	lea    rsi,[rip+0x381ef]        # 5e07d <_fini@@Base+0xb929>
   25e8e:	lea    rdx,[rsp+0xc]
   25e93:	lea    rcx,[rip+0x25aa56]        # 2808f0 <_fini@@Base+0x22e19c>
   25e9a:	mov    r8,r12
   25e9d:	mov    rdi,rbp
   25ea0:	mov    DWORD PTR [rsp+0xc],eax
   25ea4:	call   296a0 <g_str_equal@plt+0x1c3e0>
   25ea9:	mov    rsi,QWORD PTR [rsp+0x10]
   25eae:	mov    eax,DWORD PTR [rsp+0xc]
   25eb2:	test   rsi,rsi
   25eb5:	mov    DWORD PTR [rbx+0x1c],eax
   25eb8:	jne    25df3 <g_str_equal@plt+0x18b33>
   25ebe:	lea    rdx,[rbx+0x20]
   25ec2:	lea    rsi,[rip+0x381c0]        # 5e089 <_fini@@Base+0xb935>
   25ec9:	mov    rdi,rbp
   25ecc:	call   286a0 <g_str_equal@plt+0x1b3e0>
   25ed1:	test   al,al
   25ed3:	je     25f0f <g_str_equal@plt+0x18c4f>
   25ed5:	mov    eax,DWORD PTR [rbx+0x24]
   25ed8:	lea    rsi,[rip+0x381aa]        # 5e089 <_fini@@Base+0xb935>
   25edf:	lea    rdx,[rsp+0xc]
   25ee4:	lea    rcx,[rip+0x25a9d5]        # 2808c0 <_fini@@Base+0x22e16c>
   25eeb:	mov    r8,r12
   25eee:	mov    rdi,rbp
   25ef1:	mov    DWORD PTR [rsp+0xc],eax
   25ef5:	call   296a0 <g_str_equal@plt+0x1c3e0>
   25efa:	mov    rsi,QWORD PTR [rsp+0x10]
   25eff:	mov    eax,DWORD PTR [rsp+0xc]
   25f03:	test   rsi,rsi
   25f06:	mov    DWORD PTR [rbx+0x24],eax
   25f09:	jne    25df3 <g_str_equal@plt+0x18b33>
   25f0f:	lea    rdx,[rbx+0x28]
   25f13:	lea    rsi,[rip+0x38179]        # 5e093 <_fini@@Base+0xb93f>
   25f1a:	mov    rdi,rbp
   25f1d:	call   286a0 <g_str_equal@plt+0x1b3e0>
   25f22:	test   al,al
   25f24:	jne    25fb8 <g_str_equal@plt+0x18cf8>
   25f2a:	lea    rdx,[rbx+0x30]
   25f2e:	lea    rsi,[rip+0x38164]        # 5e099 <_fini@@Base+0xb945>
   25f35:	mov    rdi,rbp
   25f38:	call   286a0 <g_str_equal@plt+0x1b3e0>
   25f3d:	test   al,al
   25f3f:	je     25f7b <g_str_equal@plt+0x18cbb>
   25f41:	mov    eax,DWORD PTR [rbx+0x34]
   25f44:	lea    rsi,[rip+0x3814e]        # 5e099 <_fini@@Base+0xb945>
   25f4b:	lea    rdx,[rsp+0xc]
   25f50:	lea    rcx,[rip+0x25aa49]        # 2809a0 <_fini@@Base+0x22e24c>
   25f57:	mov    r8,r12
   25f5a:	mov    rdi,rbp
   25f5d:	mov    DWORD PTR [rsp+0xc],eax
   25f61:	call   296a0 <g_str_equal@plt+0x1c3e0>
   25f66:	mov    rsi,QWORD PTR [rsp+0x10]
   25f6b:	mov    eax,DWORD PTR [rsp+0xc]
   25f6f:	test   rsi,rsi
   25f72:	mov    DWORD PTR [rbx+0x34],eax
   25f75:	jne    25df3 <g_str_equal@plt+0x18b33>
   25f7b:	lea    rdx,[rbx+0x38]
   25f7f:	lea    rsi,[rip+0x3811c]        # 5e0a2 <_fini@@Base+0xb94e>
   25f86:	mov    rdi,rbp
   25f89:	call   286a0 <g_str_equal@plt+0x1b3e0>
   25f8e:	test   al,al
   25f90:	je     25fa8 <g_str_equal@plt+0x18ce8>
   25f92:	lea    rdx,[rbx+0x40]
   25f96:	lea    rsi,[rip+0x38105]        # 5e0a2 <_fini@@Base+0xb94e>
   25f9d:	mov    rcx,r12
   25fa0:	mov    rdi,rbp
   25fa3:	call   28780 <g_str_equal@plt+0x1b4c0>
   25fa8:	mov    rsi,QWORD PTR [rsp+0x10]
   25fad:	jmp    25df3 <g_str_equal@plt+0x18b33>
   25fb2:	nop    WORD PTR [rax+rax*1+0x0]
   25fb8:	mov    eax,DWORD PTR [rbx+0x2c]
   25fbb:	lea    rsi,[rip+0x380d1]        # 5e093 <_fini@@Base+0xb93f>
   25fc2:	lea    rdx,[rsp+0xc]
   25fc7:	lea    rcx,[rip+0x25a9d2]        # 2809a0 <_fini@@Base+0x22e24c>
   25fce:	mov    r8,r12
   25fd1:	mov    rdi,rbp
   25fd4:	mov    DWORD PTR [rsp+0xc],eax
   25fd8:	call   296a0 <g_str_equal@plt+0x1c3e0>
   25fdd:	mov    rsi,QWORD PTR [rsp+0x10]
   25fe2:	mov    eax,DWORD PTR [rsp+0xc]
   25fe6:	test   rsi,rsi
   25fe9:	mov    DWORD PTR [rbx+0x2c],eax
   25fec:	jne    25df3 <g_str_equal@plt+0x18b33>
   25ff2:	jmp    25f2a <g_str_equal@plt+0x18c6a>
   25ff7:	call   cd30 <__stack_chk_fail@plt>
   25ffc:	nop    DWORD PTR [rax+0x0]
   26000:	push   r13
   26002:	push   r12
   26004:	mov    r13,rcx
   26007:	push   rbp
   26008:	push   rbx
   26009:	mov    ecx,0x48
   2600e:	mov    rbp,rdi
   26011:	mov    rbx,rdx
   26014:	sub    rsp,0x18
   26018:	mov    r12,rsp
   2601b:	mov    QWORD PTR [rsp],0x0
   26023:	mov    r8,r12
   26026:	mov    rax,QWORD PTR fs:0x28
   2602f:	mov    QWORD PTR [rsp+0x8],rax
   26034:	xor    eax,eax
   26036:	call   27da0 <g_str_equal@plt+0x1aae0>
   2603b:	mov    rsi,QWORD PTR [rsp]
   2603f:	test   rsi,rsi
   26042:	je     26070 <g_str_equal@plt+0x18db0>
   26044:	mov    rdi,r13
   26047:	call   3a4c0 <g_str_equal@plt+0x2d200>
   2604c:	mov    rax,QWORD PTR [rsp+0x8]
   26051:	xor    rax,QWORD PTR fs:0x28
   2605a:	jne    260cd <g_str_equal@plt+0x18e0d>
   2605c:	add    rsp,0x18
   26060:	pop    rbx
   26061:	pop    rbp
   26062:	pop    r12
   26064:	pop    r13
   26066:	ret    
   26067:	nop    WORD PTR [rax+rax*1+0x0]
   26070:	mov    rsi,QWORD PTR [rbx]
   26073:	test   rsi,rsi
   26076:	je     2608a <g_str_equal@plt+0x18dca>
   26078:	mov    rdx,r12
   2607b:	mov    rdi,rbp
   2607e:	call   25db0 <g_str_equal@plt+0x18af0>
   26083:	cmp    QWORD PTR [rsp],0x0
   26088:	je     260c0 <g_str_equal@plt+0x18e00>
   2608a:	mov    rsi,rbx
   2608d:	mov    rdi,rbp
   26090:	call   28000 <g_str_equal@plt+0x1ad40>
   26095:	mov    rsi,QWORD PTR [rsp]
   26099:	test   rsi,rsi
   2609c:	je     26044 <g_str_equal@plt+0x18d84>
   2609e:	mov    rdi,rbp
   260a1:	call   28770 <g_str_equal@plt+0x1b4b0>
   260a6:	test   al,al
   260a8:	je     260b9 <g_str_equal@plt+0x18df9>
   260aa:	mov    rdi,QWORD PTR [rbx]
   260ad:	call   24320 <g_str_equal@plt+0x17060>
   260b2:	mov    QWORD PTR [rbx],0x0
   260b9:	mov    rsi,QWORD PTR [rsp]
   260bd:	jmp    26044 <g_str_equal@plt+0x18d84>
   260bf:	nop
   260c0:	mov    rsi,r12
   260c3:	mov    rdi,rbp
   260c6:	call   27f50 <g_str_equal@plt+0x1ac90>
   260cb:	jmp    2608a <g_str_equal@plt+0x18dca>
   260cd:	call   cd30 <__stack_chk_fail@plt>
   260d2:	nop    DWORD PTR [rax+0x0]
   260d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   260e0:	push   r13
   260e2:	push   r12
   260e4:	mov    r12,rdx
   260e7:	push   rbp
   260e8:	push   rbx
   260e9:	mov    rbp,rdi
   260ec:	mov    rbx,rsi
   260ef:	sub    rsp,0x18
   260f3:	mov    r13,rsp
   260f6:	mov    QWORD PTR [rsp],0x0
   260fe:	mov    rdx,r13
   26101:	mov    rax,QWORD PTR fs:0x28
   2610a:	mov    QWORD PTR [rsp+0x8],rax
   2610f:	xor    eax,eax
   26111:	call   25990 <g_str_equal@plt+0x186d0>
   26116:	mov    rsi,QWORD PTR [rsp]
   2611a:	test   rsi,rsi
   2611d:	jne    2613d <g_str_equal@plt+0x18e7d>
   2611f:	mov    eax,DWORD PTR [rbx]
   26121:	test   eax,eax
   26123:	je     26160 <g_str_equal@plt+0x18ea0>
   26125:	cmp    eax,0x1
   26128:	jne    2617a <g_str_equal@plt+0x18eba>
   2612a:	lea    rsi,[rbx+0x8]
   2612e:	mov    rdx,r13
   26131:	mov    rdi,rbp
   26134:	call   25c50 <g_str_equal@plt+0x18990>
   26139:	mov    rsi,QWORD PTR [rsp]
   2613d:	mov    rdi,r12
   26140:	call   3a4c0 <g_str_equal@plt+0x2d200>
   26145:	mov    rax,QWORD PTR [rsp+0x8]
   2614a:	xor    rax,QWORD PTR fs:0x28
   26153:	jne    26175 <g_str_equal@plt+0x18eb5>
   26155:	add    rsp,0x18
   26159:	pop    rbx
   2615a:	pop    rbp
   2615b:	pop    r12
   2615d:	pop    r13
   2615f:	ret    
   26160:	lea    rsi,[rbx+0x8]
   26164:	mov    rdx,r13
   26167:	mov    rdi,rbp
   2616a:	call   25af0 <g_str_equal@plt+0x18830>
   2616f:	mov    rsi,QWORD PTR [rsp]
   26173:	jmp    2613d <g_str_equal@plt+0x18e7d>
   26175:	call   cd30 <__stack_chk_fail@plt>
   2617a:	call   c270 <abort@plt>
   2617f:	nop
   26180:	push   r13
   26182:	push   r12
   26184:	mov    r13,rcx
   26187:	push   rbp
   26188:	push   rbx
   26189:	mov    ecx,0x18
   2618e:	mov    rbp,rdi
   26191:	mov    rbx,rdx
   26194:	sub    rsp,0x18
   26198:	mov    r12,rsp
   2619b:	mov    QWORD PTR [rsp],0x0
   261a3:	mov    r8,r12
   261a6:	mov    rax,QWORD PTR fs:0x28
   261af:	mov    QWORD PTR [rsp+0x8],rax
   261b4:	xor    eax,eax
   261b6:	call   27da0 <g_str_equal@plt+0x1aae0>
   261bb:	mov    rsi,QWORD PTR [rsp]
   261bf:	test   rsi,rsi
   261c2:	je     261f0 <g_str_equal@plt+0x18f30>
   261c4:	mov    rdi,r13
   261c7:	call   3a4c0 <g_str_equal@plt+0x2d200>
   261cc:	mov    rax,QWORD PTR [rsp+0x8]
   261d1:	xor    rax,QWORD PTR fs:0x28
   261da:	jne    2624d <g_str_equal@plt+0x18f8d>
   261dc:	add    rsp,0x18
   261e0:	pop    rbx
   261e1:	pop    rbp
   261e2:	pop    r12
   261e4:	pop    r13
   261e6:	ret    
   261e7:	nop    WORD PTR [rax+rax*1+0x0]
   261f0:	mov    rsi,QWORD PTR [rbx]
   261f3:	test   rsi,rsi
   261f6:	je     2620a <g_str_equal@plt+0x18f4a>
   261f8:	mov    rdx,r12
   261fb:	mov    rdi,rbp
   261fe:	call   260e0 <g_str_equal@plt+0x18e20>
   26203:	cmp    QWORD PTR [rsp],0x0
   26208:	je     26240 <g_str_equal@plt+0x18f80>
   2620a:	mov    rsi,rbx
   2620d:	mov    rdi,rbp
   26210:	call   28000 <g_str_equal@plt+0x1ad40>
   26215:	mov    rsi,QWORD PTR [rsp]
   26219:	test   rsi,rsi
   2621c:	je     261c4 <g_str_equal@plt+0x18f04>
   2621e:	mov    rdi,rbp
   26221:	call   28770 <g_str_equal@plt+0x1b4b0>
   26226:	test   al,al
   26228:	je     26239 <g_str_equal@plt+0x18f79>
   2622a:	mov    rdi,QWORD PTR [rbx]
   2622d:	call   24360 <g_str_equal@plt+0x170a0>
   26232:	mov    QWORD PTR [rbx],0x0
   26239:	mov    rsi,QWORD PTR [rsp]
   2623d:	jmp    261c4 <g_str_equal@plt+0x18f04>
   2623f:	nop
   26240:	mov    rsi,r12
   26243:	mov    rdi,rbp
   26246:	call   27f50 <g_str_equal@plt+0x1ac90>
   2624b:	jmp    2620a <g_str_equal@plt+0x18f4a>
   2624d:	call   cd30 <__stack_chk_fail@plt>
   26252:	nop    DWORD PTR [rax+0x0]
   26256:	nop    WORD PTR cs:[rax+rax*1+0x0]
   26260:	push   r13
   26262:	push   r12
   26264:	mov    r12,rdx
   26267:	push   rbp
   26268:	push   rbx
   26269:	mov    rbp,rdi
   2626c:	mov    rbx,rsi
   2626f:	sub    rsp,0x18
   26273:	mov    r13,rsp
   26276:	mov    QWORD PTR [rsp],0x0
   2627e:	mov    rdx,r13
   26281:	mov    rax,QWORD PTR fs:0x28
   2628a:	mov    QWORD PTR [rsp+0x8],rax
   2628f:	xor    eax,eax
   26291:	call   25990 <g_str_equal@plt+0x186d0>
   26296:	mov    rsi,QWORD PTR [rsp]
   2629a:	test   rsi,rsi
   2629d:	jne    262bd <g_str_equal@plt+0x18ffd>
   2629f:	mov    eax,DWORD PTR [rbx]
   262a1:	test   eax,eax
   262a3:	je     262e0 <g_str_equal@plt+0x19020>
   262a5:	cmp    eax,0x1
   262a8:	jne    262fa <g_str_equal@plt+0x1903a>
   262aa:	lea    rsi,[rbx+0x8]
   262ae:	mov    rdx,r13
   262b1:	mov    rdi,rbp
   262b4:	call   25db0 <g_str_equal@plt+0x18af0>
   262b9:	mov    rsi,QWORD PTR [rsp]
   262bd:	mov    rdi,r12
   262c0:	call   3a4c0 <g_str_equal@plt+0x2d200>
   262c5:	mov    rax,QWORD PTR [rsp+0x8]
   262ca:	xor    rax,QWORD PTR fs:0x28
   262d3:	jne    262f5 <g_str_equal@plt+0x19035>
   262d5:	add    rsp,0x18
   262d9:	pop    rbx
   262da:	pop    rbp
   262db:	pop    r12
   262dd:	pop    r13
   262df:	ret    
   262e0:	lea    rsi,[rbx+0x8]
   262e4:	mov    rdx,r13
   262e7:	mov    rdi,rbp
   262ea:	call   25af0 <g_str_equal@plt+0x18830>
   262ef:	mov    rsi,QWORD PTR [rsp]
   262f3:	jmp    262bd <g_str_equal@plt+0x18ffd>
   262f5:	call   cd30 <__stack_chk_fail@plt>
   262fa:	call   c270 <abort@plt>
   262ff:	nop
   26300:	push   r13
   26302:	push   r12
   26304:	mov    r13,rcx
   26307:	push   rbp
   26308:	push   rbx
   26309:	mov    ecx,0x50
   2630e:	mov    rbp,rdi
   26311:	mov    rbx,rdx
   26314:	sub    rsp,0x18
   26318:	mov    r12,rsp
   2631b:	mov    QWORD PTR [rsp],0x0
   26323:	mov    r8,r12
   26326:	mov    rax,QWORD PTR fs:0x28
   2632f:	mov    QWORD PTR [rsp+0x8],rax
   26334:	xor    eax,eax
   26336:	call   27da0 <g_str_equal@plt+0x1aae0>
   2633b:	mov    rsi,QWORD PTR [rsp]
   2633f:	test   rsi,rsi
   26342:	je     26370 <g_str_equal@plt+0x190b0>
   26344:	mov    rdi,r13
   26347:	call   3a4c0 <g_str_equal@plt+0x2d200>
   2634c:	mov    rax,QWORD PTR [rsp+0x8]
   26351:	xor    rax,QWORD PTR fs:0x28
   2635a:	jne    263cd <g_str_equal@plt+0x1910d>
   2635c:	add    rsp,0x18
   26360:	pop    rbx
   26361:	pop    rbp
   26362:	pop    r12
   26364:	pop    r13
   26366:	ret    
   26367:	nop    WORD PTR [rax+rax*1+0x0]
   26370:	mov    rsi,QWORD PTR [rbx]
   26373:	test   rsi,rsi
   26376:	je     2638a <g_str_equal@plt+0x190ca>
   26378:	mov    rdx,r12
   2637b:	mov    rdi,rbp
   2637e:	call   26260 <g_str_equal@plt+0x18fa0>
   26383:	cmp    QWORD PTR [rsp],0x0
   26388:	je     263c0 <g_str_equal@plt+0x19100>
   2638a:	mov    rsi,rbx
   2638d:	mov    rdi,rbp
   26390:	call   28000 <g_str_equal@plt+0x1ad40>
   26395:	mov    rsi,QWORD PTR [rsp]
   26399:	test   rsi,rsi
   2639c:	je     26344 <g_str_equal@plt+0x19084>
   2639e:	mov    rdi,rbp
   263a1:	call   28770 <g_str_equal@plt+0x1b4b0>
   263a6:	test   al,al
   263a8:	je     263b9 <g_str_equal@plt+0x190f9>
   263aa:	mov    rdi,QWORD PTR [rbx]
   263ad:	call   243a0 <g_str_equal@plt+0x170e0>
   263b2:	mov    QWORD PTR [rbx],0x0
   263b9:	mov    rsi,QWORD PTR [rsp]
   263bd:	jmp    26344 <g_str_equal@plt+0x19084>
   263bf:	nop
   263c0:	mov    rsi,r12
   263c3:	mov    rdi,rbp
   263c6:	call   27f50 <g_str_equal@plt+0x1ac90>
   263cb:	jmp    2638a <g_str_equal@plt+0x190ca>
   263cd:	call   cd30 <__stack_chk_fail@plt>
   263d2:	nop    DWORD PTR [rax+0x0]
   263d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   263e0:	push   rbp
   263e1:	push   rbx
   263e2:	mov    rbp,rdx
   263e5:	mov    rbx,rsi
   263e8:	lea    rcx,[rip+0x25a4b1]        # 2808a0 <_fini@@Base+0x22e14c>
   263ef:	sub    rsp,0x28
   263f3:	mov    rax,QWORD PTR fs:0x28
   263fc:	mov    QWORD PTR [rsp+0x18],rax
   26401:	xor    eax,eax
   26403:	mov    eax,DWORD PTR [rsi]
   26405:	lea    rdx,[rsp+0xc]
   2640a:	lea    r8,[rsp+0x10]
   2640f:	lea    rsi,[rip+0x33d60]        # 5a176 <_fini@@Base+0x7a22>
   26416:	mov    QWORD PTR [rsp+0x10],0x0
   2641f:	mov    DWORD PTR [rsp+0xc],eax
   26423:	call   296a0 <g_str_equal@plt+0x1c3e0>
   26428:	mov    eax,DWORD PTR [rsp+0xc]
   2642c:	mov    rsi,QWORD PTR [rsp+0x10]
   26431:	mov    rdi,rbp
   26434:	mov    DWORD PTR [rbx],eax
   26436:	call   3a4c0 <g_str_equal@plt+0x2d200>
   2643b:	mov    rax,QWORD PTR [rsp+0x18]
   26440:	xor    rax,QWORD PTR fs:0x28
   26449:	jne    26452 <g_str_equal@plt+0x19192>
   2644b:	add    rsp,0x28
   2644f:	pop    rbx
   26450:	pop    rbp
   26451:	ret    
   26452:	call   cd30 <__stack_chk_fail@plt>
   26457:	nop    WORD PTR [rax+rax*1+0x0]
   26460:	push   r13
   26462:	push   r12
   26464:	mov    r13,rcx
   26467:	push   rbp
   26468:	push   rbx
   26469:	mov    ecx,0x4
   2646e:	mov    rbp,rdi
   26471:	mov    rbx,rdx
   26474:	sub    rsp,0x18
   26478:	mov    r12,rsp
   2647b:	mov    QWORD PTR [rsp],0x0
   26483:	mov    r8,r12
   26486:	mov    rax,QWORD PTR fs:0x28
   2648f:	mov    QWORD PTR [rsp+0x8],rax
   26494:	xor    eax,eax
   26496:	call   27da0 <g_str_equal@plt+0x1aae0>
   2649b:	mov    rsi,QWORD PTR [rsp]
   2649f:	test   rsi,rsi
   264a2:	je     264d0 <g_str_equal@plt+0x19210>
   264a4:	mov    rdi,r13
   264a7:	call   3a4c0 <g_str_equal@plt+0x2d200>
   264ac:	mov    rax,QWORD PTR [rsp+0x8]
   264b1:	xor    rax,QWORD PTR fs:0x28
   264ba:	jne    2652d <g_str_equal@plt+0x1926d>
   264bc:	add    rsp,0x18
   264c0:	pop    rbx
   264c1:	pop    rbp
   264c2:	pop    r12
   264c4:	pop    r13
   264c6:	ret    
   264c7:	nop    WORD PTR [rax+rax*1+0x0]
   264d0:	mov    rsi,QWORD PTR [rbx]
   264d3:	test   rsi,rsi
   264d6:	je     264ea <g_str_equal@plt+0x1922a>
   264d8:	mov    rdx,r12
   264db:	mov    rdi,rbp
   264de:	call   263e0 <g_str_equal@plt+0x19120>
   264e3:	cmp    QWORD PTR [rsp],0x0
   264e8:	je     26520 <g_str_equal@plt+0x19260>
   264ea:	mov    rsi,rbx
   264ed:	mov    rdi,rbp
   264f0:	call   28000 <g_str_equal@plt+0x1ad40>
   264f5:	mov    rsi,QWORD PTR [rsp]
   264f9:	test   rsi,rsi
   264fc:	je     264a4 <g_str_equal@plt+0x191e4>
   264fe:	mov    rdi,rbp
   26501:	call   28770 <g_str_equal@plt+0x1b4b0>
   26506:	test   al,al
   26508:	je     26519 <g_str_equal@plt+0x19259>
   2650a:	mov    rdi,QWORD PTR [rbx]
   2650d:	call   243e0 <g_str_equal@plt+0x17120>
   26512:	mov    QWORD PTR [rbx],0x0
   26519:	mov    rsi,QWORD PTR [rsp]
   2651d:	jmp    264a4 <g_str_equal@plt+0x191e4>
   2651f:	nop
   26520:	mov    rsi,r12
   26523:	mov    rdi,rbp
   26526:	call   27f50 <g_str_equal@plt+0x1ac90>
   2652b:	jmp    264ea <g_str_equal@plt+0x1922a>
   2652d:	call   cd30 <__stack_chk_fail@plt>
   26532:	nop    DWORD PTR [rax+0x0]
   26536:	nop    WORD PTR cs:[rax+rax*1+0x0]
   26540:	push   r13
   26542:	push   r12
   26544:	mov    r13,rdx
   26547:	push   rbp
   26548:	push   rbx
   26549:	mov    rdx,rsi
   2654c:	mov    rbx,rsi
   2654f:	lea    rsi,[rip+0x37b56]        # 5e0ac <_fini@@Base+0xb958>
   26556:	mov    rbp,rdi
   26559:	sub    rsp,0x18
   2655d:	mov    r12,rsp
   26560:	mov    QWORD PTR [rsp],0x0
   26568:	mov    rcx,r12
   2656b:	mov    rax,QWORD PTR fs:0x28
   26574:	mov    QWORD PTR [rsp+0x8],rax
   26579:	xor    eax,eax
   2657b:	call   29120 <g_str_equal@plt+0x1be60>
   26580:	mov    rsi,QWORD PTR [rsp]
   26584:	test   rsi,rsi
   26587:	je     265b0 <g_str_equal@plt+0x192f0>
   26589:	mov    rdi,r13
   2658c:	call   3a4c0 <g_str_equal@plt+0x2d200>
   26591:	mov    rax,QWORD PTR [rsp+0x8]
   26596:	xor    rax,QWORD PTR fs:0x28
   2659f:	jne    2663f <g_str_equal@plt+0x1937f>
   265a5:	add    rsp,0x18
   265a9:	pop    rbx
   265aa:	pop    rbp
   265ab:	pop    r12
   265ad:	pop    r13
   265af:	ret    
   265b0:	lea    rdx,[rbx+0x1]
   265b4:	lea    rsi,[rip+0x37b25]        # 5e0e0 <_fini@@Base+0xb98c>
   265bb:	mov    rdi,rbp
   265be:	call   286a0 <g_str_equal@plt+0x1b3e0>
   265c3:	test   al,al
   265c5:	je     265e6 <g_str_equal@plt+0x19326>
   265c7:	lea    rsi,[rip+0x37b12]        # 5e0e0 <_fini@@Base+0xb98c>
   265ce:	lea    rdx,[rbx+0x8]
   265d2:	mov    rcx,r12
   265d5:	mov    rdi,rbp
   265d8:	call   28780 <g_str_equal@plt+0x1b4c0>
   265dd:	mov    rsi,QWORD PTR [rsp]
   265e1:	test   rsi,rsi
   265e4:	jne    26589 <g_str_equal@plt+0x192c9>
   265e6:	lea    rdx,[rbx+0x10]
   265ea:	lea    rsi,[rip+0x37ac2]        # 5e0b3 <_fini@@Base+0xb95f>
   265f1:	mov    rdi,rbp
   265f4:	call   286a0 <g_str_equal@plt+0x1b3e0>
   265f9:	test   al,al
   265fb:	je     26620 <g_str_equal@plt+0x19360>
   265fd:	lea    rsi,[rip+0x37aaf]        # 5e0b3 <_fini@@Base+0xb95f>
   26604:	lea    rdx,[rbx+0x18]
   26608:	mov    rcx,r12
   2660b:	mov    rdi,rbp
   2660e:	call   28780 <g_str_equal@plt+0x1b4c0>
   26613:	mov    rsi,QWORD PTR [rsp]
   26617:	test   rsi,rsi
   2661a:	jne    26589 <g_str_equal@plt+0x192c9>
   26620:	lea    rsi,[rip+0x37a94]        # 5e0bb <_fini@@Base+0xb967>
   26627:	lea    rdx,[rbx+0x20]
   2662b:	mov    rcx,r12
   2662e:	mov    rdi,rbp
   26631:	call   28780 <g_str_equal@plt+0x1b4c0>
   26636:	mov    rsi,QWORD PTR [rsp]
   2663a:	jmp    26589 <g_str_equal@plt+0x192c9>
   2663f:	call   cd30 <__stack_chk_fail@plt>
   26644:	xchg   ax,ax
   26646:	nop    WORD PTR cs:[rax+rax*1+0x0]
   26650:	push   r13
   26652:	push   r12
   26654:	mov    r13,rcx
   26657:	push   rbp
   26658:	push   rbx
   26659:	mov    ecx,0x28
   2665e:	mov    rbp,rdi
   26661:	mov    rbx,rdx
   26664:	sub    rsp,0x18
   26668:	mov    r12,rsp
   2666b:	mov    QWORD PTR [rsp],0x0
   26673:	mov    r8,r12
   26676:	mov    rax,QWORD PTR fs:0x28
   2667f:	mov    QWORD PTR [rsp+0x8],rax
   26684:	xor    eax,eax
   26686:	call   27da0 <g_str_equal@plt+0x1aae0>
   2668b:	mov    rsi,QWORD PTR [rsp]
   2668f:	test   rsi,rsi
   26692:	je     266c0 <g_str_equal@plt+0x19400>
   26694:	mov    rdi,r13
   26697:	call   3a4c0 <g_str_equal@plt+0x2d200>
   2669c:	mov    rax,QWORD PTR [rsp+0x8]
   266a1:	xor    rax,QWORD PTR fs:0x28
   266aa:	jne    2671d <g_str_equal@plt+0x1945d>
   266ac:	add    rsp,0x18
   266b0:	pop    rbx
   266b1:	pop    rbp
   266b2:	pop    r12
   266b4:	pop    r13
   266b6:	ret    
   266b7:	nop    WORD PTR [rax+rax*1+0x0]
   266c0:	mov    rsi,QWORD PTR [rbx]
   266c3:	test   rsi,rsi
   266c6:	je     266da <g_str_equal@plt+0x1941a>
   266c8:	mov    rdx,r12
   266cb:	mov    rdi,rbp
   266ce:	call   26540 <g_str_equal@plt+0x19280>
   266d3:	cmp    QWORD PTR [rsp],0x0
   266d8:	je     26710 <g_str_equal@plt+0x19450>
   266da:	mov    rsi,rbx
   266dd:	mov    rdi,rbp
   266e0:	call   28000 <g_str_equal@plt+0x1ad40>
   266e5:	mov    rsi,QWORD PTR [rsp]
   266e9:	test   rsi,rsi
   266ec:	je     26694 <g_str_equal@plt+0x193d4>
   266ee:	mov    rdi,rbp
   266f1:	call   28770 <g_str_equal@plt+0x1b4b0>
   266f6:	test   al,al
   266f8:	je     26709 <g_str_equal@plt+0x19449>
   266fa:	mov    rdi,QWORD PTR [rbx]
   266fd:	call   24420 <g_str_equal@plt+0x17160>
   26702:	mov    QWORD PTR [rbx],0x0
   26709:	mov    rsi,QWORD PTR [rsp]
   2670d:	jmp    26694 <g_str_equal@plt+0x193d4>
   2670f:	nop
   26710:	mov    rsi,r12
   26713:	mov    rdi,rbp
   26716:	call   27f50 <g_str_equal@plt+0x1ac90>
   2671b:	jmp    266da <g_str_equal@plt+0x1941a>
   2671d:	call   cd30 <__stack_chk_fail@plt>
   26722:	nop    DWORD PTR [rax+0x0]
   26726:	nop    WORD PTR cs:[rax+rax*1+0x0]
   26730:	push   r14
   26732:	push   r13
   26734:	mov    r14,rcx
   26737:	push   r12
   26739:	push   rbp
   2673a:	mov    ecx,0x10
   2673f:	push   rbx
   26740:	mov    rbp,rdi
   26743:	mov    r13,rdx
   26746:	sub    rsp,0x10
   2674a:	mov    r12,rsp
   2674d:	mov    QWORD PTR [rsp],0x0
   26755:	mov    r8,r12
   26758:	mov    rax,QWORD PTR fs:0x28
   26761:	mov    QWORD PTR [rsp+0x8],rax
   26766:	xor    eax,eax
   26768:	call   280a0 <g_str_equal@plt+0x1ade0>
   2676d:	mov    rsi,QWORD PTR [rsp]
   26771:	test   rsi,rsi
   26774:	je     267a0 <g_str_equal@plt+0x194e0>
   26776:	mov    rdi,r14
   26779:	call   3a4c0 <g_str_equal@plt+0x2d200>
   2677e:	mov    rax,QWORD PTR [rsp+0x8]
   26783:	xor    rax,QWORD PTR fs:0x28
   2678c:	jne    26834 <g_str_equal@plt+0x19574>
   26792:	add    rsp,0x10
   26796:	pop    rbx
   26797:	pop    rbp
   26798:	pop    r12
   2679a:	pop    r13
   2679c:	pop    r14
   2679e:	ret    
   2679f:	nop
   267a0:	mov    rbx,QWORD PTR [r13+0x0]
   267a4:	test   rbx,rbx
   267a7:	jne    267c8 <g_str_equal@plt+0x19508>
   267a9:	jmp    26827 <g_str_equal@plt+0x19567>
   267ab:	nop    DWORD PTR [rax+rax*1+0x0]
   267b0:	mov    rsi,rbx
   267b3:	mov    edx,0x10
   267b8:	mov    rdi,rbp
   267bb:	call   281f0 <g_str_equal@plt+0x1af30>
   267c0:	test   rax,rax
   267c3:	mov    rbx,rax
   267c6:	je     26820 <g_str_equal@plt+0x19560>
   267c8:	lea    rdx,[rbx+0x8]
   267cc:	xor    esi,esi
   267ce:	mov    rcx,r12
   267d1:	mov    rdi,rbp
   267d4:	call   26650 <g_str_equal@plt+0x19390>
   267d9:	cmp    QWORD PTR [rsp],0x0
   267de:	je     267b0 <g_str_equal@plt+0x194f0>
   267e0:	mov    rsi,r13
   267e3:	mov    rdi,rbp
   267e6:	call   28390 <g_str_equal@plt+0x1b0d0>
   267eb:	mov    rsi,QWORD PTR [rsp]
   267ef:	test   rsi,rsi
   267f2:	je     26776 <g_str_equal@plt+0x194b6>
   267f4:	mov    rdi,rbp
   267f7:	call   28770 <g_str_equal@plt+0x1b4b0>
   267fc:	test   al,al
   267fe:	je     26811 <g_str_equal@plt+0x19551>
   26800:	mov    rdi,QWORD PTR [r13+0x0]
   26804:	call   24460 <g_str_equal@plt+0x171a0>
   26809:	mov    QWORD PTR [r13+0x0],0x0
   26811:	mov    rsi,QWORD PTR [rsp]
   26815:	jmp    26776 <g_str_equal@plt+0x194b6>
   2681a:	nop    WORD PTR [rax+rax*1+0x0]
   26820:	cmp    QWORD PTR [rsp],0x0
   26825:	jne    267e0 <g_str_equal@plt+0x19520>
   26827:	mov    rsi,r12
   2682a:	mov    rdi,rbp
   2682d:	call   282e0 <g_str_equal@plt+0x1b020>
   26832:	jmp    267e0 <g_str_equal@plt+0x19520>
   26834:	call   cd30 <__stack_chk_fail@plt>
   26839:	nop    DWORD PTR [rax+0x0]
   26840:	push   r14
   26842:	push   r13
   26844:	lea    rcx,[rip+0x25a0d5]        # 280920 <_fini@@Base+0x22e1cc>
   2684b:	push   r12
   2684d:	push   rbp
   2684e:	mov    r13,rdx
   26851:	push   rbx
   26852:	mov    rbx,rsi
   26855:	mov    rbp,rdi
   26858:	sub    rsp,0x20
   2685c:	mov    rax,QWORD PTR fs:0x28
   26865:	mov    QWORD PTR [rsp+0x18],rax
   2686a:	xor    eax,eax
   2686c:	lea    r12,[rsp+0x10]
   26871:	mov    eax,DWORD PTR [rsi]
   26873:	lea    r14,[rsp+0xc]
   26878:	lea    rsi,[rip+0x377f3]        # 5e072 <_fini@@Base+0xb91e>
   2687f:	mov    QWORD PTR [rsp+0x10],0x0
   26888:	mov    r8,r12
   2688b:	mov    rdx,r14
   2688e:	mov    DWORD PTR [rsp+0xc],eax
   26892:	call   296a0 <g_str_equal@plt+0x1c3e0>
   26897:	mov    rsi,QWORD PTR [rsp+0x10]
   2689c:	mov    eax,DWORD PTR [rsp+0xc]
   268a0:	test   rsi,rsi
   268a3:	mov    DWORD PTR [rbx],eax
   268a5:	je     268d0 <g_str_equal@plt+0x19610>
   268a7:	mov    rdi,r13
   268aa:	call   3a4c0 <g_str_equal@plt+0x2d200>
   268af:	mov    rax,QWORD PTR [rsp+0x18]
   268b4:	xor    rax,QWORD PTR fs:0x28
   268bd:	jne    26a4f <g_str_equal@plt+0x1978f>
   268c3:	add    rsp,0x20
   268c7:	pop    rbx
   268c8:	pop    rbp
   268c9:	pop    r12
   268cb:	pop    r13
   268cd:	pop    r14
   268cf:	ret    
   268d0:	mov    eax,DWORD PTR [rbx+0x4]
   268d3:	lea    rsi,[rip+0x377a3]        # 5e07d <_fini@@Base+0xb929>
   268da:	lea    rcx,[rip+0x25a00f]        # 2808f0 <_fini@@Base+0x22e19c>
   268e1:	mov    r8,r12
   268e4:	mov    rdx,r14
   268e7:	mov    rdi,rbp
   268ea:	mov    DWORD PTR [rsp+0xc],eax
   268ee:	call   296a0 <g_str_equal@plt+0x1c3e0>
   268f3:	mov    rsi,QWORD PTR [rsp+0x10]
   268f8:	mov    eax,DWORD PTR [rsp+0xc]
   268fc:	test   rsi,rsi
   268ff:	mov    DWORD PTR [rbx+0x4],eax
   26902:	jne    268a7 <g_str_equal@plt+0x195e7>
   26904:	mov    eax,DWORD PTR [rbx+0x8]
   26907:	lea    rsi,[rip+0x3777b]        # 5e089 <_fini@@Base+0xb935>
   2690e:	lea    rcx,[rip+0x259fab]        # 2808c0 <_fini@@Base+0x22e16c>
   26915:	mov    r8,r12
   26918:	mov    rdx,r14
   2691b:	mov    rdi,rbp
   2691e:	mov    DWORD PTR [rsp+0xc],eax
   26922:	call   296a0 <g_str_equal@plt+0x1c3e0>
   26927:	mov    rsi,QWORD PTR [rsp+0x10]
   2692c:	mov    eax,DWORD PTR [rsp+0xc]
   26930:	test   rsi,rsi
   26933:	mov    DWORD PTR [rbx+0x8],eax
   26936:	jne    268a7 <g_str_equal@plt+0x195e7>
   2693c:	lea    rdx,[rbx+0xc]
   26940:	lea    rsi,[rip+0x3774c]        # 5e093 <_fini@@Base+0xb93f>
   26947:	mov    rdi,rbp
   2694a:	call   286a0 <g_str_equal@plt+0x1b3e0>
   2694f:	test   al,al
   26951:	je     2698b <g_str_equal@plt+0x196cb>
   26953:	mov    eax,DWORD PTR [rbx+0x10]
   26956:	lea    rsi,[rip+0x37736]        # 5e093 <_fini@@Base+0xb93f>
   2695d:	lea    rcx,[rip+0x25a03c]        # 2809a0 <_fini@@Base+0x22e24c>
   26964:	mov    r8,r12
   26967:	mov    rdx,r14
   2696a:	mov    rdi,rbp
   2696d:	mov    DWORD PTR [rsp+0xc],eax
   26971:	call   296a0 <g_str_equal@plt+0x1c3e0>
   26976:	mov    rsi,QWORD PTR [rsp+0x10]
   2697b:	mov    eax,DWORD PTR [rsp+0xc]
   2697f:	test   rsi,rsi
   26982:	mov    DWORD PTR [rbx+0x10],eax
   26985:	jne    268a7 <g_str_equal@plt+0x195e7>
   2698b:	mov    eax,DWORD PTR [rbx+0x14]
   2698e:	lea    rsi,[rip+0x37704]        # 5e099 <_fini@@Base+0xb945>
   26995:	lea    rcx,[rip+0x25a004]        # 2809a0 <_fini@@Base+0x22e24c>
   2699c:	mov    r8,r12
   2699f:	mov    rdx,r14
   269a2:	mov    rdi,rbp
   269a5:	mov    DWORD PTR [rsp+0xc],eax
   269a9:	call   296a0 <g_str_equal@plt+0x1c3e0>
   269ae:	mov    rsi,QWORD PTR [rsp+0x10]
   269b3:	mov    eax,DWORD PTR [rsp+0xc]
   269b7:	test   rsi,rsi
   269ba:	mov    DWORD PTR [rbx+0x14],eax
   269bd:	jne    268a7 <g_str_equal@plt+0x195e7>
   269c3:	lea    rsi,[rip+0x376fc]        # 5e0c6 <_fini@@Base+0xb972>
   269ca:	lea    rdx,[rbx+0x18]
   269ce:	mov    rcx,r12
   269d1:	mov    rdi,rbp
   269d4:	call   28780 <g_str_equal@plt+0x1b4c0>
   269d9:	mov    rsi,QWORD PTR [rsp+0x10]
   269de:	test   rsi,rsi
   269e1:	jne    268a7 <g_str_equal@plt+0x195e7>
   269e7:	lea    rsi,[rip+0x376e7]        # 5e0d5 <_fini@@Base+0xb981>
   269ee:	lea    rdx,[rbx+0x20]
   269f2:	mov    rcx,r12
   269f5:	mov    rdi,rbp
   269f8:	call   28780 <g_str_equal@plt+0x1b4c0>
   269fd:	mov    rsi,QWORD PTR [rsp+0x10]
   26a02:	test   rsi,rsi
   26a05:	jne    268a7 <g_str_equal@plt+0x195e7>
   26a0b:	lea    rsi,[rip+0x376d4]        # 5e0e6 <_fini@@Base+0xb992>
   26a12:	lea    rdx,[rbx+0x28]
   26a16:	mov    rcx,r12
   26a19:	mov    rdi,rbp
   26a1c:	call   29210 <g_str_equal@plt+0x1bf50>
   26a21:	mov    rsi,QWORD PTR [rsp+0x10]
   26a26:	test   rsi,rsi
   26a29:	jne    268a7 <g_str_equal@plt+0x195e7>
   26a2f:	lea    rsi,[rip+0x376b5]        # 5e0eb <_fini@@Base+0xb997>
   26a36:	lea    rdx,[rbx+0x30]
   26a3a:	mov    rcx,r12
   26a3d:	mov    rdi,rbp
   26a40:	call   26730 <g_str_equal@plt+0x19470>
   26a45:	mov    rsi,QWORD PTR [rsp+0x10]
   26a4a:	jmp    268a7 <g_str_equal@plt+0x195e7>
   26a4f:	call   cd30 <__stack_chk_fail@plt>
   26a54:	xchg   ax,ax
   26a56:	nop    WORD PTR cs:[rax+rax*1+0x0]
   26a60:	push   r13
   26a62:	push   r12
   26a64:	mov    r13,rcx
   26a67:	push   rbp
   26a68:	push   rbx
   26a69:	mov    ecx,0x38
   26a6e:	mov    rbp,rdi
   26a71:	mov    rbx,rdx
   26a74:	sub    rsp,0x18
   26a78:	mov    r12,rsp
   26a7b:	mov    QWORD PTR [rsp],0x0
   26a83:	mov    r8,r12
   26a86:	mov    rax,QWORD PTR fs:0x28
   26a8f:	mov    QWORD PTR [rsp+0x8],rax
   26a94:	xor    eax,eax
   26a96:	call   27da0 <g_str_equal@plt+0x1aae0>
   26a9b:	mov    rsi,QWORD PTR [rsp]
   26a9f:	test   rsi,rsi
   26aa2:	je     26ad0 <g_str_equal@plt+0x19810>
   26aa4:	mov    rdi,r13
   26aa7:	call   3a4c0 <g_str_equal@plt+0x2d200>
   26aac:	mov    rax,QWORD PTR [rsp+0x8]
   26ab1:	xor    rax,QWORD PTR fs:0x28
   26aba:	jne    26b2d <g_str_equal@plt+0x1986d>
   26abc:	add    rsp,0x18
   26ac0:	pop    rbx
   26ac1:	pop    rbp
   26ac2:	pop    r12
   26ac4:	pop    r13
   26ac6:	ret    
   26ac7:	nop    WORD PTR [rax+rax*1+0x0]
   26ad0:	mov    rsi,QWORD PTR [rbx]
   26ad3:	test   rsi,rsi
   26ad6:	je     26aea <g_str_equal@plt+0x1982a>
   26ad8:	mov    rdx,r12
   26adb:	mov    rdi,rbp
   26ade:	call   26840 <g_str_equal@plt+0x19580>
   26ae3:	cmp    QWORD PTR [rsp],0x0
   26ae8:	je     26b20 <g_str_equal@plt+0x19860>
   26aea:	mov    rsi,rbx
   26aed:	mov    rdi,rbp
   26af0:	call   28000 <g_str_equal@plt+0x1ad40>
   26af5:	mov    rsi,QWORD PTR [rsp]
   26af9:	test   rsi,rsi
   26afc:	je     26aa4 <g_str_equal@plt+0x197e4>
   26afe:	mov    rdi,rbp
   26b01:	call   28770 <g_str_equal@plt+0x1b4b0>
   26b06:	test   al,al
   26b08:	je     26b19 <g_str_equal@plt+0x19859>
   26b0a:	mov    rdi,QWORD PTR [rbx]
   26b0d:	call   244a0 <g_str_equal@plt+0x171e0>
   26b12:	mov    QWORD PTR [rbx],0x0
   26b19:	mov    rsi,QWORD PTR [rsp]
   26b1d:	jmp    26aa4 <g_str_equal@plt+0x197e4>
   26b1f:	nop
   26b20:	mov    rsi,r12
   26b23:	mov    rdi,rbp
   26b26:	call   27f50 <g_str_equal@plt+0x1ac90>
   26b2b:	jmp    26aea <g_str_equal@plt+0x1982a>
   26b2d:	call   cd30 <__stack_chk_fail@plt>
   26b32:	nop    DWORD PTR [rax+0x0]
   26b36:	nop    WORD PTR cs:[rax+rax*1+0x0]
   26b40:	push   r13
   26b42:	push   r12
   26b44:	mov    r13,rdx
   26b47:	push   rbp
   26b48:	push   rbx
   26b49:	mov    rbp,rdi
   26b4c:	mov    rbx,rsi
   26b4f:	sub    rsp,0x18
   26b53:	mov    r12,rsp
   26b56:	mov    QWORD PTR [rsp],0x0
   26b5e:	mov    rdx,r12
   26b61:	mov    rax,QWORD PTR fs:0x28
   26b6a:	mov    QWORD PTR [rsp+0x8],rax
   26b6f:	xor    eax,eax
   26b71:	call   263e0 <g_str_equal@plt+0x19120>
   26b76:	mov    rsi,QWORD PTR [rsp]
   26b7a:	test   rsi,rsi
   26b7d:	jne    26b9d <g_str_equal@plt+0x198dd>
   26b7f:	mov    eax,DWORD PTR [rbx]
   26b81:	test   eax,eax
   26b83:	je     26b9d <g_str_equal@plt+0x198dd>
   26b85:	cmp    eax,0x1
   26b88:	jne    26bc5 <g_str_equal@plt+0x19905>
   26b8a:	lea    rsi,[rbx+0x8]
   26b8e:	mov    rdx,r12
   26b91:	mov    rdi,rbp
   26b94:	call   26840 <g_str_equal@plt+0x19580>
   26b99:	mov    rsi,QWORD PTR [rsp]
   26b9d:	mov    rdi,r13
   26ba0:	call   3a4c0 <g_str_equal@plt+0x2d200>
   26ba5:	mov    rax,QWORD PTR [rsp+0x8]
   26baa:	xor    rax,QWORD PTR fs:0x28
   26bb3:	jne    26bc0 <g_str_equal@plt+0x19900>
   26bb5:	add    rsp,0x18
   26bb9:	pop    rbx
   26bba:	pop    rbp
   26bbb:	pop    r12
   26bbd:	pop    r13
   26bbf:	ret    
   26bc0:	call   cd30 <__stack_chk_fail@plt>
   26bc5:	call   c270 <abort@plt>
   26bca:	nop    WORD PTR [rax+rax*1+0x0]
   26bd0:	push   r13
   26bd2:	push   r12
   26bd4:	mov    r13,rcx
   26bd7:	push   rbp
   26bd8:	push   rbx
   26bd9:	mov    ecx,0x40
   26bde:	mov    rbp,rdi
   26be1:	mov    rbx,rdx
   26be4:	sub    rsp,0x18
   26be8:	mov    r12,rsp
   26beb:	mov    QWORD PTR [rsp],0x0
   26bf3:	mov    r8,r12
   26bf6:	mov    rax,QWORD PTR fs:0x28
   26bff:	mov    QWORD PTR [rsp+0x8],rax
   26c04:	xor    eax,eax
   26c06:	call   27da0 <g_str_equal@plt+0x1aae0>
   26c0b:	mov    rsi,QWORD PTR [rsp]
   26c0f:	test   rsi,rsi
   26c12:	je     26c40 <g_str_equal@plt+0x19980>
   26c14:	mov    rdi,r13
   26c17:	call   3a4c0 <g_str_equal@plt+0x2d200>
   26c1c:	mov    rax,QWORD PTR [rsp+0x8]
   26c21:	xor    rax,QWORD PTR fs:0x28
   26c2a:	jne    26c9d <g_str_equal@plt+0x199dd>
   26c2c:	add    rsp,0x18
   26c30:	pop    rbx
   26c31:	pop    rbp
   26c32:	pop    r12
   26c34:	pop    r13
   26c36:	ret    
   26c37:	nop    WORD PTR [rax+rax*1+0x0]
   26c40:	mov    rsi,QWORD PTR [rbx]
   26c43:	test   rsi,rsi
   26c46:	je     26c5a <g_str_equal@plt+0x1999a>
   26c48:	mov    rdx,r12
   26c4b:	mov    rdi,rbp
   26c4e:	call   26b40 <g_str_equal@plt+0x19880>
   26c53:	cmp    QWORD PTR [rsp],0x0
   26c58:	je     26c90 <g_str_equal@plt+0x199d0>
   26c5a:	mov    rsi,rbx
   26c5d:	mov    rdi,rbp
   26c60:	call   28000 <g_str_equal@plt+0x1ad40>
   26c65:	mov    rsi,QWORD PTR [rsp]
   26c69:	test   rsi,rsi
   26c6c:	je     26c14 <g_str_equal@plt+0x19954>
   26c6e:	mov    rdi,rbp
   26c71:	call   28770 <g_str_equal@plt+0x1b4b0>
   26c76:	test   al,al
   26c78:	je     26c89 <g_str_equal@plt+0x199c9>
   26c7a:	mov    rdi,QWORD PTR [rbx]
   26c7d:	call   244e0 <g_str_equal@plt+0x17220>
   26c82:	mov    QWORD PTR [rbx],0x0
   26c89:	mov    rsi,QWORD PTR [rsp]
   26c8d:	jmp    26c14 <g_str_equal@plt+0x19954>
   26c8f:	nop
   26c90:	mov    rsi,r12
   26c93:	mov    rdi,rbp
   26c96:	call   27f50 <g_str_equal@plt+0x1ac90>
   26c9b:	jmp    26c5a <g_str_equal@plt+0x1999a>
   26c9d:	call   cd30 <__stack_chk_fail@plt>
   26ca2:	nop    WORD PTR cs:[rax+rax*1+0x0]
   26cac:	nop    DWORD PTR [rax+0x0]
   26cb0:	push   rbx
   26cb1:	mov    r8,rcx
   26cb4:	mov    rbx,rdx
   26cb7:	lea    rcx,[rip+0x259e02]        # 280ac0 <_fini@@Base+0x22e36c>
   26cbe:	sub    rsp,0x10
   26cc2:	mov    rax,QWORD PTR fs:0x28
   26ccb:	mov    QWORD PTR [rsp+0x8],rax
   26cd0:	xor    eax,eax
   26cd2:	mov    eax,DWORD PTR [rdx]
   26cd4:	lea    rdx,[rsp+0x4]
   26cd9:	mov    DWORD PTR [rsp+0x4],eax
   26cdd:	call   296a0 <g_str_equal@plt+0x1c3e0>
   26ce2:	mov    eax,DWORD PTR [rsp+0x4]
   26ce6:	mov    DWORD PTR [rbx],eax
   26ce8:	mov    rax,QWORD PTR [rsp+0x8]
   26ced:	xor    rax,QWORD PTR fs:0x28
   26cf6:	jne    26cfe <g_str_equal@plt+0x19a3e>
   26cf8:	add    rsp,0x10
   26cfc:	pop    rbx
   26cfd:	ret    
   26cfe:	call   cd30 <__stack_chk_fail@plt>
   26d03:	nop    DWORD PTR [rax]
   26d06:	nop    WORD PTR cs:[rax+rax*1+0x0]
   26d10:	push   r13
   26d12:	push   r12
   26d14:	mov    r13,rdx
   26d17:	push   rbp
   26d18:	push   rbx
   26d19:	mov    rdx,rsi
   26d1c:	mov    rbx,rsi
   26d1f:	lea    rsi,[rip+0x3bb18]        # 6283e <_fini@@Base+0x100ea>
   26d26:	mov    rbp,rdi
   26d29:	sub    rsp,0x18
   26d2d:	mov    r12,rsp
   26d30:	mov    QWORD PTR [rsp],0x0
   26d38:	mov    rcx,r12
   26d3b:	mov    rax,QWORD PTR fs:0x28
   26d44:	mov    QWORD PTR [rsp+0x8],rax
   26d49:	xor    eax,eax
   26d4b:	call   29210 <g_str_equal@plt+0x1bf50>
   26d50:	mov    rsi,QWORD PTR [rsp]
   26d54:	test   rsi,rsi
   26d57:	je     26d80 <g_str_equal@plt+0x19ac0>
   26d59:	mov    rdi,r13
   26d5c:	call   3a4c0 <g_str_equal@plt+0x2d200>
   26d61:	mov    rax,QWORD PTR [rsp+0x8]
   26d66:	xor    rax,QWORD PTR fs:0x28
   26d6f:	jne    26d9c <g_str_equal@plt+0x19adc>
   26d71:	add    rsp,0x18
   26d75:	pop    rbx
   26d76:	pop    rbp
   26d77:	pop    r12
   26d79:	pop    r13
   26d7b:	ret    
   26d7c:	nop    DWORD PTR [rax+0x0]
   26d80:	lea    rsi,[rip+0x325d2]        # 59359 <_fini@@Base+0x6c05>
   26d87:	lea    rdx,[rbx+0x8]
   26d8b:	mov    rcx,r12
   26d8e:	mov    rdi,rbp
   26d91:	call   29210 <g_str_equal@plt+0x1bf50>
   26d96:	mov    rsi,QWORD PTR [rsp]
   26d9a:	jmp    26d59 <g_str_equal@plt+0x19a99>
   26d9c:	call   cd30 <__stack_chk_fail@plt>
   26da1:	nop    DWORD PTR [rax+rax*1+0x0]
   26da6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   26db0:	push   r13
   26db2:	push   r12
   26db4:	mov    r13,rcx
   26db7:	push   rbp
   26db8:	push   rbx
   26db9:	mov    ecx,0x10
   26dbe:	mov    rbp,rdi
   26dc1:	mov    rbx,rdx
   26dc4:	sub    rsp,0x18
   26dc8:	mov    r12,rsp
   26dcb:	mov    QWORD PTR [rsp],0x0
   26dd3:	mov    r8,r12
   26dd6:	mov    rax,QWORD PTR fs:0x28
   26ddf:	mov    QWORD PTR [rsp+0x8],rax
   26de4:	xor    eax,eax
   26de6:	call   27da0 <g_str_equal@plt+0x1aae0>
   26deb:	mov    rsi,QWORD PTR [rsp]
   26def:	test   rsi,rsi
   26df2:	je     26e20 <g_str_equal@plt+0x19b60>
   26df4:	mov    rdi,r13
   26df7:	call   3a4c0 <g_str_equal@plt+0x2d200>
   26dfc:	mov    rax,QWORD PTR [rsp+0x8]
   26e01:	xor    rax,QWORD PTR fs:0x28
   26e0a:	jne    26e7d <g_str_equal@plt+0x19bbd>
   26e0c:	add    rsp,0x18
   26e10:	pop    rbx
   26e11:	pop    rbp
   26e12:	pop    r12
   26e14:	pop    r13
   26e16:	ret    
   26e17:	nop    WORD PTR [rax+rax*1+0x0]
   26e20:	mov    rsi,QWORD PTR [rbx]
   26e23:	test   rsi,rsi
   26e26:	je     26e3a <g_str_equal@plt+0x19b7a>
   26e28:	mov    rdx,r12
   26e2b:	mov    rdi,rbp
   26e2e:	call   26d10 <g_str_equal@plt+0x19a50>
   26e33:	cmp    QWORD PTR [rsp],0x0
   26e38:	je     26e70 <g_str_equal@plt+0x19bb0>
   26e3a:	mov    rsi,rbx
   26e3d:	mov    rdi,rbp
   26e40:	call   28000 <g_str_equal@plt+0x1ad40>
   26e45:	mov    rsi,QWORD PTR [rsp]
   26e49:	test   rsi,rsi
   26e4c:	je     26df4 <g_str_equal@plt+0x19b34>
   26e4e:	mov    rdi,rbp
   26e51:	call   28770 <g_str_equal@plt+0x1b4b0>
   26e56:	test   al,al
   26e58:	je     26e69 <g_str_equal@plt+0x19ba9>
   26e5a:	mov    rdi,QWORD PTR [rbx]
   26e5d:	call   24520 <g_str_equal@plt+0x17260>
   26e62:	mov    QWORD PTR [rbx],0x0
   26e69:	mov    rsi,QWORD PTR [rsp]
   26e6d:	jmp    26df4 <g_str_equal@plt+0x19b34>
   26e6f:	nop
   26e70:	mov    rsi,r12
   26e73:	mov    rdi,rbp
   26e76:	call   27f50 <g_str_equal@plt+0x1ac90>
   26e7b:	jmp    26e3a <g_str_equal@plt+0x19b7a>
   26e7d:	call   cd30 <__stack_chk_fail@plt>
   26e82:	nop    DWORD PTR [rax+0x0]
   26e86:	nop    WORD PTR cs:[rax+rax*1+0x0]
   26e90:	push   r13
   26e92:	push   r12
   26e94:	mov    r13,rdx
   26e97:	push   rbp
   26e98:	push   rbx
   26e99:	mov    rbp,rdi
   26e9c:	mov    rbx,rsi
   26e9f:	sub    rsp,0x18
   26ea3:	mov    r12,rsp
   26ea6:	mov    QWORD PTR [rsp],0x0
   26eae:	mov    rdx,r12
   26eb1:	mov    rax,QWORD PTR fs:0x28
   26eba:	mov    QWORD PTR [rsp+0x8],rax
   26ebf:	xor    eax,eax
   26ec1:	call   26d10 <g_str_equal@plt+0x19a50>
   26ec6:	mov    rsi,QWORD PTR [rsp]
   26eca:	test   rsi,rsi
   26ecd:	je     26f00 <g_str_equal@plt+0x19c40>
   26ecf:	mov    rdi,r13
   26ed2:	call   3a4c0 <g_str_equal@plt+0x2d200>
   26ed7:	mov    rax,QWORD PTR [rsp+0x8]
   26edc:	xor    rax,QWORD PTR fs:0x28
   26ee5:	jne    26fe8 <g_str_equal@plt+0x19d28>
   26eeb:	add    rsp,0x18
   26eef:	pop    rbx
   26ef0:	pop    rbp
   26ef1:	pop    r12
   26ef3:	pop    r13
   26ef5:	ret    
   26ef6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   26f00:	lea    rdx,[rbx+0x10]
   26f04:	lea    rsi,[rip+0x371e6]        # 5e0f1 <_fini@@Base+0xb99d>
   26f0b:	mov    rdi,rbp
   26f0e:	call   286a0 <g_str_equal@plt+0x1b3e0>
   26f13:	test   al,al
   26f15:	je     26f36 <g_str_equal@plt+0x19c76>
   26f17:	lea    rsi,[rip+0x371d3]        # 5e0f1 <_fini@@Base+0xb99d>
   26f1e:	lea    rdx,[rbx+0x11]
   26f22:	mov    rcx,r12
   26f25:	mov    rdi,rbp
   26f28:	call   29120 <g_str_equal@plt+0x1be60>
   26f2d:	mov    rsi,QWORD PTR [rsp]
   26f31:	test   rsi,rsi
   26f34:	jne    26ecf <g_str_equal@plt+0x19c0f>
   26f36:	lea    rdx,[rbx+0x12]
   26f3a:	lea    rsi,[rip+0x41182]        # 680c3 <_fini@@Base+0x1596f>
   26f41:	mov    rdi,rbp
   26f44:	call   286a0 <g_str_equal@plt+0x1b3e0>
   26f49:	test   al,al
   26f4b:	je     26f70 <g_str_equal@plt+0x19cb0>
   26f4d:	lea    rsi,[rip+0x4116f]        # 680c3 <_fini@@Base+0x1596f>
   26f54:	lea    rdx,[rbx+0x14]
   26f58:	mov    rcx,r12
   26f5b:	mov    rdi,rbp
   26f5e:	call   28960 <g_str_equal@plt+0x1b6a0>
   26f63:	mov    rsi,QWORD PTR [rsp]
   26f67:	test   rsi,rsi
   26f6a:	jne    26ecf <g_str_equal@plt+0x19c0f>
   26f70:	lea    rdx,[rbx+0x16]
   26f74:	lea    rsi,[rip+0x3b83f]        # 627ba <_fini@@Base+0x10066>
   26f7b:	mov    rdi,rbp
   26f7e:	call   286a0 <g_str_equal@plt+0x1b3e0>
   26f83:	test   al,al
   26f85:	je     26faa <g_str_equal@plt+0x19cea>
   26f87:	lea    rsi,[rip+0x3b82c]        # 627ba <_fini@@Base+0x10066>
   26f8e:	lea    rdx,[rbx+0x17]
   26f92:	mov    rcx,r12
   26f95:	mov    rdi,rbp
   26f98:	call   29120 <g_str_equal@plt+0x1be60>
   26f9d:	mov    rsi,QWORD PTR [rsp]
   26fa1:	test   rsi,rsi
   26fa4:	jne    26ecf <g_str_equal@plt+0x19c0f>
   26faa:	lea    rdx,[rbx+0x18]
   26fae:	lea    rsi,[rip+0x3b80b]        # 627c0 <_fini@@Base+0x1006c>
   26fb5:	mov    rdi,rbp
   26fb8:	call   286a0 <g_str_equal@plt+0x1b3e0>
   26fbd:	test   al,al
   26fbf:	jne    26fd0 <g_str_equal@plt+0x19d10>
   26fc1:	mov    rsi,QWORD PTR [rsp]
   26fc5:	jmp    26ecf <g_str_equal@plt+0x19c0f>
   26fca:	nop    WORD PTR [rax+rax*1+0x0]
   26fd0:	lea    rdx,[rbx+0x19]
   26fd4:	lea    rsi,[rip+0x3b7e5]        # 627c0 <_fini@@Base+0x1006c>
   26fdb:	mov    rcx,r12
   26fde:	mov    rdi,rbp
   26fe1:	call   29120 <g_str_equal@plt+0x1be60>
   26fe6:	jmp    26fc1 <g_str_equal@plt+0x19d01>
   26fe8:	call   cd30 <__stack_chk_fail@plt>
   26fed:	nop    DWORD PTR [rax]
   26ff0:	push   r13
   26ff2:	push   r12
   26ff4:	mov    r13,rcx
   26ff7:	push   rbp
   26ff8:	push   rbx
   26ff9:	mov    ecx,0x20
   26ffe:	mov    rbp,rdi
   27001:	mov    rbx,rdx
   27004:	sub    rsp,0x18
   27008:	mov    r12,rsp
   2700b:	mov    QWORD PTR [rsp],0x0
   27013:	mov    r8,r12
   27016:	mov    rax,QWORD PTR fs:0x28
   2701f:	mov    QWORD PTR [rsp+0x8],rax
   27024:	xor    eax,eax
   27026:	call   27da0 <g_str_equal@plt+0x1aae0>
   2702b:	mov    rsi,QWORD PTR [rsp]
   2702f:	test   rsi,rsi
   27032:	je     27060 <g_str_equal@plt+0x19da0>
   27034:	mov    rdi,r13
   27037:	call   3a4c0 <g_str_equal@plt+0x2d200>
   2703c:	mov    rax,QWORD PTR [rsp+0x8]
   27041:	xor    rax,QWORD PTR fs:0x28
   2704a:	jne    270bd <g_str_equal@plt+0x19dfd>
   2704c:	add    rsp,0x18
   27050:	pop    rbx
   27051:	pop    rbp
   27052:	pop    r12
   27054:	pop    r13
   27056:	ret    
   27057:	nop    WORD PTR [rax+rax*1+0x0]
   27060:	mov    rsi,QWORD PTR [rbx]
   27063:	test   rsi,rsi
   27066:	je     2707a <g_str_equal@plt+0x19dba>
   27068:	mov    rdx,r12
   2706b:	mov    rdi,rbp
   2706e:	call   26e90 <g_str_equal@plt+0x19bd0>
   27073:	cmp    QWORD PTR [rsp],0x0
   27078:	je     270b0 <g_str_equal@plt+0x19df0>
   2707a:	mov    rsi,rbx
   2707d:	mov    rdi,rbp
   27080:	call   28000 <g_str_equal@plt+0x1ad40>
   27085:	mov    rsi,QWORD PTR [rsp]
   27089:	test   rsi,rsi
   2708c:	je     27034 <g_str_equal@plt+0x19d74>
   2708e:	mov    rdi,rbp
   27091:	call   28770 <g_str_equal@plt+0x1b4b0>
   27096:	test   al,al
   27098:	je     270a9 <g_str_equal@plt+0x19de9>
   2709a:	mov    rdi,QWORD PTR [rbx]
   2709d:	call   24560 <g_str_equal@plt+0x172a0>
   270a2:	mov    QWORD PTR [rbx],0x0
   270a9:	mov    rsi,QWORD PTR [rsp]
   270ad:	jmp    27034 <g_str_equal@plt+0x19d74>
   270af:	nop
   270b0:	mov    rsi,r12
   270b3:	mov    rdi,rbp
   270b6:	call   27f50 <g_str_equal@plt+0x1ac90>
   270bb:	jmp    2707a <g_str_equal@plt+0x19dba>
   270bd:	call   cd30 <__stack_chk_fail@plt>
   270c2:	nop    DWORD PTR [rax+0x0]
   270c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   270d0:	push   rbx
   270d1:	mov    rbx,rdx
   270d4:	mov    rdx,rsi
   270d7:	lea    rsi,[rip+0x3e95a]        # 65a38 <_fini@@Base+0x132e4>
   270de:	sub    rsp,0x10
   270e2:	mov    rcx,rsp
   270e5:	mov    QWORD PTR [rsp],0x0
   270ed:	mov    rax,QWORD PTR fs:0x28
   270f6:	mov    QWORD PTR [rsp+0x8],rax
   270fb:	xor    eax,eax
   270fd:	call   29210 <g_str_equal@plt+0x1bf50>
   27102:	mov    rsi,QWORD PTR [rsp]
   27106:	mov    rdi,rbx
   27109:	call   3a4c0 <g_str_equal@plt+0x2d200>
   2710e:	mov    rax,QWORD PTR [rsp+0x8]
   27113:	xor    rax,QWORD PTR fs:0x28
   2711c:	jne    27124 <g_str_equal@plt+0x19e64>
   2711e:	add    rsp,0x10
   27122:	pop    rbx
   27123:	ret    
   27124:	call   cd30 <__stack_chk_fail@plt>
   27129:	nop    DWORD PTR [rax+0x0]
   27130:	push   r13
   27132:	push   r12
   27134:	mov    r13,rcx
   27137:	push   rbp
   27138:	push   rbx
   27139:	mov    ecx,0x8
   2713e:	mov    rbp,rdi
   27141:	mov    rbx,rdx
   27144:	sub    rsp,0x18
   27148:	mov    r12,rsp
   2714b:	mov    QWORD PTR [rsp],0x0
   27153:	mov    r8,r12
   27156:	mov    rax,QWORD PTR fs:0x28
   2715f:	mov    QWORD PTR [rsp+0x8],rax
   27164:	xor    eax,eax
   27166:	call   27da0 <g_str_equal@plt+0x1aae0>
   2716b:	mov    rsi,QWORD PTR [rsp]
   2716f:	test   rsi,rsi
   27172:	je     271a0 <g_str_equal@plt+0x19ee0>
   27174:	mov    rdi,r13
   27177:	call   3a4c0 <g_str_equal@plt+0x2d200>
   2717c:	mov    rax,QWORD PTR [rsp+0x8]
   27181:	xor    rax,QWORD PTR fs:0x28
   2718a:	jne    271fd <g_str_equal@plt+0x19f3d>
   2718c:	add    rsp,0x18
   27190:	pop    rbx
   27191:	pop    rbp
   27192:	pop    r12
   27194:	pop    r13
   27196:	ret    
   27197:	nop    WORD PTR [rax+rax*1+0x0]
   271a0:	mov    rsi,QWORD PTR [rbx]
   271a3:	test   rsi,rsi
   271a6:	je     271ba <g_str_equal@plt+0x19efa>
   271a8:	mov    rdx,r12
   271ab:	mov    rdi,rbp
   271ae:	call   270d0 <g_str_equal@plt+0x19e10>
   271b3:	cmp    QWORD PTR [rsp],0x0
   271b8:	je     271f0 <g_str_equal@plt+0x19f30>
   271ba:	mov    rsi,rbx
   271bd:	mov    rdi,rbp
   271c0:	call   28000 <g_str_equal@plt+0x1ad40>
   271c5:	mov    rsi,QWORD PTR [rsp]
   271c9:	test   rsi,rsi
   271cc:	je     27174 <g_str_equal@plt+0x19eb4>
   271ce:	mov    rdi,rbp
   271d1:	call   28770 <g_str_equal@plt+0x1b4b0>
   271d6:	test   al,al
   271d8:	je     271e9 <g_str_equal@plt+0x19f29>
   271da:	mov    rdi,QWORD PTR [rbx]
   271dd:	call   245a0 <g_str_equal@plt+0x172e0>
   271e2:	mov    QWORD PTR [rbx],0x0
   271e9:	mov    rsi,QWORD PTR [rsp]
   271ed:	jmp    27174 <g_str_equal@plt+0x19eb4>
   271ef:	nop
   271f0:	mov    rsi,r12
   271f3:	mov    rdi,rbp
   271f6:	call   27f50 <g_str_equal@plt+0x1ac90>
   271fb:	jmp    271ba <g_str_equal@plt+0x19efa>
   271fd:	call   cd30 <__stack_chk_fail@plt>
   27202:	nop    DWORD PTR [rax+0x0]
   27206:	nop    WORD PTR cs:[rax+rax*1+0x0]
   27210:	push   r13
   27212:	push   r12
   27214:	mov    r13,rdx
   27217:	push   rbp
   27218:	push   rbx
   27219:	mov    rdx,rsi
   2721c:	mov    rbx,rsi
   2721f:	lea    rsi,[rip+0x36ed3]        # 5e0f9 <_fini@@Base+0xb9a5>
   27226:	mov    rbp,rdi
   27229:	sub    rsp,0x18
   2722d:	mov    r12,rsp
   27230:	mov    QWORD PTR [rsp],0x0
   27238:	mov    rcx,r12
   2723b:	mov    rax,QWORD PTR fs:0x28
   27244:	mov    QWORD PTR [rsp+0x8],rax
   27249:	xor    eax,eax
   2724b:	call   29210 <g_str_equal@plt+0x1bf50>
   27250:	mov    rsi,QWORD PTR [rsp]
   27254:	test   rsi,rsi
   27257:	je     27280 <g_str_equal@plt+0x19fc0>
   27259:	mov    rdi,r13
   2725c:	call   3a4c0 <g_str_equal@plt+0x2d200>
   27261:	mov    rax,QWORD PTR [rsp+0x8]
   27266:	xor    rax,QWORD PTR fs:0x28
   2726f:	jne    2729c <g_str_equal@plt+0x19fdc>
   27271:	add    rsp,0x18
   27275:	pop    rbx
   27276:	pop    rbp
   27277:	pop    r12
   27279:	pop    r13
   2727b:	ret    
   2727c:	nop    DWORD PTR [rax+0x0]
   27280:	lea    rsi,[rip+0x320d2]        # 59359 <_fini@@Base+0x6c05>
   27287:	lea    rdx,[rbx+0x8]
   2728b:	mov    rcx,r12
   2728e:	mov    rdi,rbp
   27291:	call   29210 <g_str_equal@plt+0x1bf50>
   27296:	mov    rsi,QWORD PTR [rsp]
   2729a:	jmp    27259 <g_str_equal@plt+0x19f99>
   2729c:	call   cd30 <__stack_chk_fail@plt>
   272a1:	nop    DWORD PTR [rax+rax*1+0x0]
   272a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   272b0:	push   r13
   272b2:	push   r12
   272b4:	mov    r13,rcx
   272b7:	push   rbp
   272b8:	push   rbx
   272b9:	mov    ecx,0x10
   272be:	mov    rbp,rdi
   272c1:	mov    rbx,rdx
   272c4:	sub    rsp,0x18
   272c8:	mov    r12,rsp
   272cb:	mov    QWORD PTR [rsp],0x0
   272d3:	mov    r8,r12
   272d6:	mov    rax,QWORD PTR fs:0x28
   272df:	mov    QWORD PTR [rsp+0x8],rax
   272e4:	xor    eax,eax
   272e6:	call   27da0 <g_str_equal@plt+0x1aae0>
   272eb:	mov    rsi,QWORD PTR [rsp]
   272ef:	test   rsi,rsi
   272f2:	je     27320 <g_str_equal@plt+0x1a060>
   272f4:	mov    rdi,r13
   272f7:	call   3a4c0 <g_str_equal@plt+0x2d200>
   272fc:	mov    rax,QWORD PTR [rsp+0x8]
   27301:	xor    rax,QWORD PTR fs:0x28
   2730a:	jne    2737d <g_str_equal@plt+0x1a0bd>
   2730c:	add    rsp,0x18
   27310:	pop    rbx
   27311:	pop    rbp
   27312:	pop    r12
   27314:	pop    r13
   27316:	ret    
   27317:	nop    WORD PTR [rax+rax*1+0x0]
   27320:	mov    rsi,QWORD PTR [rbx]
   27323:	test   rsi,rsi
   27326:	je     2733a <g_str_equal@plt+0x1a07a>
   27328:	mov    rdx,r12
   2732b:	mov    rdi,rbp
   2732e:	call   27210 <g_str_equal@plt+0x19f50>
   27333:	cmp    QWORD PTR [rsp],0x0
   27338:	je     27370 <g_str_equal@plt+0x1a0b0>
   2733a:	mov    rsi,rbx
   2733d:	mov    rdi,rbp
   27340:	call   28000 <g_str_equal@plt+0x1ad40>
   27345:	mov    rsi,QWORD PTR [rsp]
   27349:	test   rsi,rsi
   2734c:	je     272f4 <g_str_equal@plt+0x1a034>
   2734e:	mov    rdi,rbp
   27351:	call   28770 <g_str_equal@plt+0x1b4b0>
   27356:	test   al,al
   27358:	je     27369 <g_str_equal@plt+0x1a0a9>
   2735a:	mov    rdi,QWORD PTR [rbx]
   2735d:	call   245e0 <g_str_equal@plt+0x17320>
   27362:	mov    QWORD PTR [rbx],0x0
   27369:	mov    rsi,QWORD PTR [rsp]
   2736d:	jmp    272f4 <g_str_equal@plt+0x1a034>
   2736f:	nop
   27370:	mov    rsi,r12
   27373:	mov    rdi,rbp
   27376:	call   27f50 <g_str_equal@plt+0x1ac90>
   2737b:	jmp    2733a <g_str_equal@plt+0x1a07a>
   2737d:	call   cd30 <__stack_chk_fail@plt>
   27382:	nop    DWORD PTR [rax+0x0]
   27386:	nop    WORD PTR cs:[rax+rax*1+0x0]
   27390:	push   rbx
   27391:	mov    rbx,rdx
   27394:	mov    rdx,rsi
   27397:	lea    rsi,[rip+0x32285]        # 59623 <_fini@@Base+0x6ecf>
   2739e:	sub    rsp,0x10
   273a2:	mov    rcx,rsp
   273a5:	mov    QWORD PTR [rsp],0x0
   273ad:	mov    rax,QWORD PTR fs:0x28
   273b6:	mov    QWORD PTR [rsp+0x8],rax
   273bb:	xor    eax,eax
   273bd:	call   26ff0 <g_str_equal@plt+0x19d30>
   273c2:	mov    rsi,QWORD PTR [rsp]
   273c6:	mov    rdi,rbx
   273c9:	call   3a4c0 <g_str_equal@plt+0x2d200>
   273ce:	mov    rax,QWORD PTR [rsp+0x8]
   273d3:	xor    rax,QWORD PTR fs:0x28
   273dc:	jne    273e4 <g_str_equal@plt+0x1a124>
   273de:	add    rsp,0x10
   273e2:	pop    rbx
   273e3:	ret    
   273e4:	call   cd30 <__stack_chk_fail@plt>
   273e9:	nop    DWORD PTR [rax+0x0]
   273f0:	push   rbx
   273f1:	mov    rbx,rdx
   273f4:	mov    rdx,rsi
   273f7:	lea    rsi,[rip+0x32225]        # 59623 <_fini@@Base+0x6ecf>
   273fe:	sub    rsp,0x10
   27402:	mov    rcx,rsp
   27405:	mov    QWORD PTR [rsp],0x0
   2740d:	mov    rax,QWORD PTR fs:0x28
   27416:	mov    QWORD PTR [rsp+0x8],rax
   2741b:	xor    eax,eax
   2741d:	call   27130 <g_str_equal@plt+0x19e70>
   27422:	mov    rsi,QWORD PTR [rsp]
   27426:	mov    rdi,rbx
   27429:	call   3a4c0 <g_str_equal@plt+0x2d200>
   2742e:	mov    rax,QWORD PTR [rsp+0x8]
   27433:	xor    rax,QWORD PTR fs:0x28
   2743c:	jne    27444 <g_str_equal@plt+0x1a184>
   2743e:	add    rsp,0x10
   27442:	pop    rbx
   27443:	ret    
   27444:	call   cd30 <__stack_chk_fail@plt>
   27449:	nop    DWORD PTR [rax+0x0]
   27450:	push   rbx
   27451:	mov    rbx,rdx
   27454:	mov    rdx,rsi
   27457:	lea    rsi,[rip+0x321c5]        # 59623 <_fini@@Base+0x6ecf>
   2745e:	sub    rsp,0x10
   27462:	mov    rcx,rsp
   27465:	mov    QWORD PTR [rsp],0x0
   2746d:	mov    rax,QWORD PTR fs:0x28
   27476:	mov    QWORD PTR [rsp+0x8],rax
   2747b:	xor    eax,eax
   2747d:	call   272b0 <g_str_equal@plt+0x19ff0>
   27482:	mov    rsi,QWORD PTR [rsp]
   27486:	mov    rdi,rbx
   27489:	call   3a4c0 <g_str_equal@plt+0x2d200>
   2748e:	mov    rax,QWORD PTR [rsp+0x8]
   27493:	xor    rax,QWORD PTR fs:0x28
   2749c:	jne    274a4 <g_str_equal@plt+0x1a1e4>
   2749e:	add    rsp,0x10
   274a2:	pop    rbx
   274a3:	ret    
   274a4:	call   cd30 <__stack_chk_fail@plt>
   274a9:	nop    DWORD PTR [rax+0x0]
   274b0:	push   rbx
   274b1:	mov    rbx,rdx
   274b4:	mov    rdx,rsi
   274b7:	lea    rsi,[rip+0x32165]        # 59623 <_fini@@Base+0x6ecf>
   274be:	sub    rsp,0x10
   274c2:	mov    rcx,rsp
   274c5:	mov    QWORD PTR [rsp],0x0
   274cd:	mov    rax,QWORD PTR fs:0x28
   274d6:	mov    QWORD PTR [rsp+0x8],rax
   274db:	xor    eax,eax
   274dd:	call   45d10 <g_str_equal@plt+0x38a50>
   274e2:	mov    rsi,QWORD PTR [rsp]
   274e6:	mov    rdi,rbx
   274e9:	call   3a4c0 <g_str_equal@plt+0x2d200>
   274ee:	mov    rax,QWORD PTR [rsp+0x8]
   274f3:	xor    rax,QWORD PTR fs:0x28
   274fc:	jne    27504 <g_str_equal@plt+0x1a244>
   274fe:	add    rsp,0x10
   27502:	pop    rbx
   27503:	ret    
   27504:	call   cd30 <__stack_chk_fail@plt>
   27509:	nop    DWORD PTR [rax+0x0]
   27510:	push   rbx
   27511:	mov    r8,rcx
   27514:	mov    rbx,rdx
   27517:	lea    rcx,[rip+0x259562]        # 280a80 <_fini@@Base+0x22e32c>
   2751e:	sub    rsp,0x10
   27522:	mov    rax,QWORD PTR fs:0x28
   2752b:	mov    QWORD PTR [rsp+0x8],rax
   27530:	xor    eax,eax
   27532:	mov    eax,DWORD PTR [rdx]
   27534:	lea    rdx,[rsp+0x4]
   27539:	mov    DWORD PTR [rsp+0x4],eax
   2753d:	call   296a0 <g_str_equal@plt+0x1c3e0>
   27542:	mov    eax,DWORD PTR [rsp+0x4]
   27546:	mov    DWORD PTR [rbx],eax
   27548:	mov    rax,QWORD PTR [rsp+0x8]
   2754d:	xor    rax,QWORD PTR fs:0x28
   27556:	jne    2755e <g_str_equal@plt+0x1a29e>
   27558:	add    rsp,0x10
   2755c:	pop    rbx
   2755d:	ret    
   2755e:	call   cd30 <__stack_chk_fail@plt>
   27563:	nop    DWORD PTR [rax]
   27566:	nop    WORD PTR cs:[rax+rax*1+0x0]
   27570:	push   r13
   27572:	push   r12
   27574:	lea    rcx,[rip+0x259505]        # 280a80 <_fini@@Base+0x22e32c>
   2757b:	push   rbp
   2757c:	push   rbx
   2757d:	mov    rbp,rdx
   27580:	mov    rbx,rsi
   27583:	mov    r12,rdi
   27586:	sub    rsp,0x28
   2758a:	mov    rax,QWORD PTR fs:0x28
   27593:	mov    QWORD PTR [rsp+0x18],rax
   27598:	xor    eax,eax
   2759a:	lea    r13,[rsp+0x10]
   2759f:	mov    eax,DWORD PTR [rsi]
   275a1:	lea    rdx,[rsp+0xc]
   275a6:	lea    rsi,[rip+0x36813]        # 5ddc0 <_fini@@Base+0xb66c>
   275ad:	mov    QWORD PTR [rsp+0x10],0x0
   275b6:	mov    r8,r13
   275b9:	mov    DWORD PTR [rsp+0xc],eax
   275bd:	call   296a0 <g_str_equal@plt+0x1c3e0>
   275c2:	mov    rsi,QWORD PTR [rsp+0x10]
   275c7:	mov    eax,DWORD PTR [rsp+0xc]
   275cb:	test   rsi,rsi
   275ce:	mov    DWORD PTR [rbx],eax
   275d0:	jne    27600 <g_str_equal@plt+0x1a340>
   275d2:	cmp    eax,0x1
   275d5:	je     27628 <g_str_equal@plt+0x1a368>
   275d7:	jle    27660 <g_str_equal@plt+0x1a3a0>
   275dd:	cmp    eax,0x2
   275e0:	je     27640 <g_str_equal@plt+0x1a380>
   275e2:	cmp    eax,0x3
   275e5:	jne    2767f <g_str_equal@plt+0x1a3bf>
   275eb:	lea    rsi,[rbx+0x8]
   275ef:	mov    rdx,r13
   275f2:	mov    rdi,r12
   275f5:	call   274b0 <g_str_equal@plt+0x1a1f0>
   275fa:	mov    rsi,QWORD PTR [rsp+0x10]
   275ff:	nop
   27600:	mov    rdi,rbp
   27603:	call   3a4c0 <g_str_equal@plt+0x2d200>
   27608:	mov    rax,QWORD PTR [rsp+0x18]
   2760d:	xor    rax,QWORD PTR fs:0x28
   27616:	jne    2767a <g_str_equal@plt+0x1a3ba>
   27618:	add    rsp,0x28
   2761c:	pop    rbx
   2761d:	pop    rbp
   2761e:	pop    r12
   27620:	pop    r13
   27622:	ret    
   27623:	nop    DWORD PTR [rax+rax*1+0x0]
   27628:	lea    rsi,[rbx+0x8]
   2762c:	mov    rdx,r13
   2762f:	mov    rdi,r12
   27632:	call   273f0 <g_str_equal@plt+0x1a130>
   27637:	mov    rsi,QWORD PTR [rsp+0x10]
   2763c:	jmp    27600 <g_str_equal@plt+0x1a340>
   2763e:	xchg   ax,ax
   27640:	lea    rsi,[rbx+0x8]
   27644:	mov    rdx,r13
   27647:	mov    rdi,r12
   2764a:	call   27450 <g_str_equal@plt+0x1a190>
   2764f:	mov    rsi,QWORD PTR [rsp+0x10]
   27654:	jmp    27600 <g_str_equal@plt+0x1a340>
   27656:	nop    WORD PTR cs:[rax+rax*1+0x0]
   27660:	test   eax,eax
   27662:	jne    2767f <g_str_equal@plt+0x1a3bf>
   27664:	lea    rsi,[rbx+0x8]
   27668:	mov    rdx,r13
   2766b:	mov    rdi,r12
   2766e:	call   27390 <g_str_equal@plt+0x1a0d0>
   27673:	mov    rsi,QWORD PTR [rsp+0x10]
   27678:	jmp    27600 <g_str_equal@plt+0x1a340>
   2767a:	call   cd30 <__stack_chk_fail@plt>
   2767f:	call   c270 <abort@plt>
   27684:	xchg   ax,ax
   27686:	nop    WORD PTR cs:[rax+rax*1+0x0]
   27690:	push   r13
   27692:	push   r12
   27694:	mov    r13,rcx
   27697:	push   rbp
   27698:	push   rbx
   27699:	mov    ecx,0x10
   2769e:	mov    rbp,rdi
   276a1:	mov    rbx,rdx
   276a4:	sub    rsp,0x18
   276a8:	mov    r12,rsp
   276ab:	mov    QWORD PTR [rsp],0x0
   276b3:	mov    r8,r12
   276b6:	mov    rax,QWORD PTR fs:0x28
   276bf:	mov    QWORD PTR [rsp+0x8],rax
   276c4:	xor    eax,eax
   276c6:	call   27da0 <g_str_equal@plt+0x1aae0>
   276cb:	mov    rsi,QWORD PTR [rsp]
   276cf:	test   rsi,rsi
   276d2:	je     27700 <g_str_equal@plt+0x1a440>
   276d4:	mov    rdi,r13
   276d7:	call   3a4c0 <g_str_equal@plt+0x2d200>
   276dc:	mov    rax,QWORD PTR [rsp+0x8]
   276e1:	xor    rax,QWORD PTR fs:0x28
   276ea:	jne    2775d <g_str_equal@plt+0x1a49d>
   276ec:	add    rsp,0x18
   276f0:	pop    rbx
   276f1:	pop    rbp
   276f2:	pop    r12
   276f4:	pop    r13
   276f6:	ret    
   276f7:	nop    WORD PTR [rax+rax*1+0x0]
   27700:	mov    rsi,QWORD PTR [rbx]
   27703:	test   rsi,rsi
   27706:	je     2771a <g_str_equal@plt+0x1a45a>
   27708:	mov    rdx,r12
   2770b:	mov    rdi,rbp
   2770e:	call   27570 <g_str_equal@plt+0x1a2b0>
   27713:	cmp    QWORD PTR [rsp],0x0
   27718:	je     27750 <g_str_equal@plt+0x1a490>
   2771a:	mov    rsi,rbx
   2771d:	mov    rdi,rbp
   27720:	call   28000 <g_str_equal@plt+0x1ad40>
   27725:	mov    rsi,QWORD PTR [rsp]
   27729:	test   rsi,rsi
   2772c:	je     276d4 <g_str_equal@plt+0x1a414>
   2772e:	mov    rdi,rbp
   27731:	call   28770 <g_str_equal@plt+0x1b4b0>
   27736:	test   al,al
   27738:	je     27749 <g_str_equal@plt+0x1a489>
   2773a:	mov    rdi,QWORD PTR [rbx]
   2773d:	call   24620 <g_str_equal@plt+0x17360>
   27742:	mov    QWORD PTR [rbx],0x0
   27749:	mov    rsi,QWORD PTR [rsp]
   2774d:	jmp    276d4 <g_str_equal@plt+0x1a414>
   2774f:	nop
   27750:	mov    rsi,r12
   27753:	mov    rdi,rbp
   27756:	call   27f50 <g_str_equal@plt+0x1ac90>
   2775b:	jmp    2771a <g_str_equal@plt+0x1a45a>
   2775d:	call   cd30 <__stack_chk_fail@plt>
   27762:	nop    DWORD PTR [rax+0x0]
   27766:	nop    WORD PTR cs:[rax+rax*1+0x0]
   27770:	push   rbx
   27771:	mov    r8,rcx
   27774:	mov    rbx,rdx
   27777:	lea    rcx,[rip+0x2592c2]        # 280a40 <_fini@@Base+0x22e2ec>
   2777e:	sub    rsp,0x10
   27782:	mov    rax,QWORD PTR fs:0x28
   2778b:	mov    QWORD PTR [rsp+0x8],rax
   27790:	xor    eax,eax
   27792:	mov    eax,DWORD PTR [rdx]
   27794:	lea    rdx,[rsp+0x4]
   27799:	mov    DWORD PTR [rsp+0x4],eax
   2779d:	call   296a0 <g_str_equal@plt+0x1c3e0>
   277a2:	mov    eax,DWORD PTR [rsp+0x4]
   277a6:	mov    DWORD PTR [rbx],eax
   277a8:	mov    rax,QWORD PTR [rsp+0x8]
   277ad:	xor    rax,QWORD PTR fs:0x28
   277b6:	jne    277be <g_str_equal@plt+0x1a4fe>
   277b8:	add    rsp,0x10
   277bc:	pop    rbx
   277bd:	ret    
   277be:	call   cd30 <__stack_chk_fail@plt>
   277c3:	nop    DWORD PTR [rax]
   277c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   277d0:	push   rbp
   277d1:	push   rbx
   277d2:	mov    rbp,rdx
   277d5:	mov    rbx,rsi
   277d8:	lea    rcx,[rip+0x259261]        # 280a40 <_fini@@Base+0x22e2ec>
   277df:	sub    rsp,0x28
   277e3:	mov    rax,QWORD PTR fs:0x28
   277ec:	mov    QWORD PTR [rsp+0x18],rax
   277f1:	xor    eax,eax
   277f3:	mov    eax,DWORD PTR [rsi]
   277f5:	lea    rdx,[rsp+0xc]
   277fa:	lea    r8,[rsp+0x10]
   277ff:	lea    rsi,[rip+0x365ba]        # 5ddc0 <_fini@@Base+0xb66c>
   27806:	mov    QWORD PTR [rsp+0x10],0x0
   2780f:	mov    DWORD PTR [rsp+0xc],eax
   27813:	call   296a0 <g_str_equal@plt+0x1c3e0>
   27818:	mov    eax,DWORD PTR [rsp+0xc]
   2781c:	mov    rsi,QWORD PTR [rsp+0x10]
   27821:	mov    rdi,rbp
   27824:	mov    DWORD PTR [rbx],eax
   27826:	call   3a4c0 <g_str_equal@plt+0x2d200>
   2782b:	mov    rax,QWORD PTR [rsp+0x18]
   27830:	xor    rax,QWORD PTR fs:0x28
   27839:	jne    27842 <g_str_equal@plt+0x1a582>
   2783b:	add    rsp,0x28
   2783f:	pop    rbx
   27840:	pop    rbp
   27841:	ret    
   27842:	call   cd30 <__stack_chk_fail@plt>
   27847:	nop    WORD PTR [rax+rax*1+0x0]
   27850:	push   r13
   27852:	push   r12
   27854:	mov    r12,rdi
   27857:	push   rbp
   27858:	push   rbx
   27859:	mov    rbp,rdx
   2785c:	mov    rbx,rsi
   2785f:	sub    rsp,0x18
   27863:	mov    r13,rsp
   27866:	mov    QWORD PTR [rsp],0x0
   2786e:	mov    rdx,r13
   27871:	mov    rax,QWORD PTR fs:0x28
   2787a:	mov    QWORD PTR [rsp+0x8],rax
   2787f:	xor    eax,eax
   27881:	call   277d0 <g_str_equal@plt+0x1a510>
   27886:	mov    rsi,QWORD PTR [rsp]
   2788a:	test   rsi,rsi
   2788d:	jne    278c0 <g_str_equal@plt+0x1a600>
   2788f:	mov    eax,DWORD PTR [rbx]
   27891:	cmp    eax,0x1
   27894:	je     278e8 <g_str_equal@plt+0x1a628>
   27896:	jb     27918 <g_str_equal@plt+0x1a658>
   2789c:	cmp    eax,0x2
   2789f:	je     27900 <g_str_equal@plt+0x1a640>
   278a1:	cmp    eax,0x3
   278a4:	jne    27932 <g_str_equal@plt+0x1a672>
   278aa:	lea    rsi,[rbx+0x8]
   278ae:	mov    rdx,r13
   278b1:	mov    rdi,r12
   278b4:	call   45cb0 <g_str_equal@plt+0x389f0>
   278b9:	mov    rsi,QWORD PTR [rsp]
   278bd:	nop    DWORD PTR [rax]
   278c0:	mov    rdi,rbp
   278c3:	call   3a4c0 <g_str_equal@plt+0x2d200>
   278c8:	mov    rax,QWORD PTR [rsp+0x8]
   278cd:	xor    rax,QWORD PTR fs:0x28
   278d6:	jne    2792d <g_str_equal@plt+0x1a66d>
   278d8:	add    rsp,0x18
   278dc:	pop    rbx
   278dd:	pop    rbp
   278de:	pop    r12
   278e0:	pop    r13
   278e2:	ret    
   278e3:	nop    DWORD PTR [rax+rax*1+0x0]
   278e8:	lea    rsi,[rbx+0x8]
   278ec:	mov    rdx,r13
   278ef:	mov    rdi,r12
   278f2:	call   270d0 <g_str_equal@plt+0x19e10>
   278f7:	mov    rsi,QWORD PTR [rsp]
   278fb:	jmp    278c0 <g_str_equal@plt+0x1a600>
   278fd:	nop    DWORD PTR [rax]
   27900:	lea    rsi,[rbx+0x8]
   27904:	mov    rdx,r13
   27907:	mov    rdi,r12
   2790a:	call   27210 <g_str_equal@plt+0x19f50>
   2790f:	mov    rsi,QWORD PTR [rsp]
   27913:	jmp    278c0 <g_str_equal@plt+0x1a600>
   27915:	nop    DWORD PTR [rax]
   27918:	lea    rsi,[rbx+0x8]
   2791c:	mov    rdx,r13
   2791f:	mov    rdi,r12
   27922:	call   26e90 <g_str_equal@plt+0x19bd0>
   27927:	mov    rsi,QWORD PTR [rsp]
   2792b:	jmp    278c0 <g_str_equal@plt+0x1a600>
   2792d:	call   cd30 <__stack_chk_fail@plt>
   27932:	call   c270 <abort@plt>
   27937:	nop    WORD PTR [rax+rax*1+0x0]
   27940:	push   r13
   27942:	push   r12
   27944:	mov    r13,rcx
   27947:	push   rbp
   27948:	push   rbx
   27949:	mov    ecx,0x28
   2794e:	mov    rbp,rdi
   27951:	mov    rbx,rdx
   27954:	sub    rsp,0x18
   27958:	mov    r12,rsp
   2795b:	mov    QWORD PTR [rsp],0x0
   27963:	mov    r8,r12
   27966:	mov    rax,QWORD PTR fs:0x28
   2796f:	mov    QWORD PTR [rsp+0x8],rax
   27974:	xor    eax,eax
   27976:	call   27da0 <g_str_equal@plt+0x1aae0>
   2797b:	mov    rsi,QWORD PTR [rsp]
   2797f:	test   rsi,rsi
   27982:	je     279b0 <g_str_equal@plt+0x1a6f0>
   27984:	mov    rdi,r13
   27987:	call   3a4c0 <g_str_equal@plt+0x2d200>
   2798c:	mov    rax,QWORD PTR [rsp+0x8]
   27991:	xor    rax,QWORD PTR fs:0x28
   2799a:	jne    27a0d <g_str_equal@plt+0x1a74d>
   2799c:	add    rsp,0x18
   279a0:	pop    rbx
   279a1:	pop    rbp
   279a2:	pop    r12
   279a4:	pop    r13
   279a6:	ret    
   279a7:	nop    WORD PTR [rax+rax*1+0x0]
   279b0:	mov    rsi,QWORD PTR [rbx]
   279b3:	test   rsi,rsi
   279b6:	je     279ca <g_str_equal@plt+0x1a70a>
   279b8:	mov    rdx,r12
   279bb:	mov    rdi,rbp
   279be:	call   27850 <g_str_equal@plt+0x1a590>
   279c3:	cmp    QWORD PTR [rsp],0x0
   279c8:	je     27a00 <g_str_equal@plt+0x1a740>
   279ca:	mov    rsi,rbx
   279cd:	mov    rdi,rbp
   279d0:	call   28000 <g_str_equal@plt+0x1ad40>
   279d5:	mov    rsi,QWORD PTR [rsp]
   279d9:	test   rsi,rsi
   279dc:	je     27984 <g_str_equal@plt+0x1a6c4>
   279de:	mov    rdi,rbp
   279e1:	call   28770 <g_str_equal@plt+0x1b4b0>
   279e6:	test   al,al
   279e8:	je     279f9 <g_str_equal@plt+0x1a739>
   279ea:	mov    rdi,QWORD PTR [rbx]
   279ed:	call   24660 <g_str_equal@plt+0x173a0>
   279f2:	mov    QWORD PTR [rbx],0x0
   279f9:	mov    rsi,QWORD PTR [rsp]
   279fd:	jmp    27984 <g_str_equal@plt+0x1a6c4>
   279ff:	nop
   27a00:	mov    rsi,r12
   27a03:	mov    rdi,rbp
   27a06:	call   27f50 <g_str_equal@plt+0x1ac90>
   27a0b:	jmp    279ca <g_str_equal@plt+0x1a70a>
   27a0d:	call   cd30 <__stack_chk_fail@plt>
   27a12:	nop    WORD PTR cs:[rax+rax*1+0x0]
   27a1c:	nop    DWORD PTR [rax+0x0]
   27a20:	push   r14
   27a22:	push   r13
   27a24:	mov    rax,rdi
   27a27:	push   r12
   27a29:	push   rbp
   27a2a:	mov    r13,rcx
   27a2d:	push   rbx
   27a2e:	mov    rbx,rdx
   27a31:	mov    rbp,rsi
   27a34:	mov    r14,r8
   27a37:	mov    r12,r9
   27a3a:	sub    rsp,0x20
   27a3e:	mov    rdx,QWORD PTR [rsi]
   27a41:	mov    rsi,rbx
   27a44:	mov    rdi,QWORD PTR fs:0x28
   27a4d:	mov    QWORD PTR [rsp+0x18],rdi
   27a52:	xor    edi,edi
   27a54:	mov    QWORD PTR [rsp+0x8],0x0
   27a5d:	lea    rcx,[rsp+0x8]
   27a62:	mov    rdi,rax
   27a65:	mov    QWORD PTR [rsp+0x10],rdx
   27a6a:	lea    rdx,[rsp+0x10]
   27a6f:	call   QWORD PTR [rax+0x50]
   27a72:	mov    rsi,QWORD PTR [rsp+0x8]
   27a77:	test   rsi,rsi
   27a7a:	jne    27af0 <g_str_equal@plt+0x1a830>
   27a7c:	mov    rax,QWORD PTR [rsp+0x10]
   27a81:	cmp    rax,r13
   27a84:	ja     27ab0 <g_str_equal@plt+0x1a7f0>
   27a86:	mov    QWORD PTR [rbp+0x0],rax
   27a8a:	mov    rax,QWORD PTR [rsp+0x18]
   27a8f:	xor    rax,QWORD PTR fs:0x28
   27a98:	jne    27afa <g_str_equal@plt+0x1a83a>
   27a9a:	add    rsp,0x20
   27a9e:	pop    rbx
   27a9f:	pop    rbp
   27aa0:	pop    r12
   27aa2:	pop    r13
   27aa4:	pop    r14
   27aa6:	ret    
   27aa7:	nop    WORD PTR [rax+rax*1+0x0]
   27ab0:	lea    rax,[rip+0x32ff0]        # 5aaa7 <_fini@@Base+0x8353>
   27ab7:	test   rbx,rbx
   27aba:	lea    r8,[rip+0x3663c]        # 5e0fd <_fini@@Base+0xb9a9>
   27ac1:	lea    rcx,[rip+0x36ee8]        # 5e9b0 <_fini@@Base+0xc25c>
   27ac8:	lea    rsi,[rip+0x366c9]        # 5e198 <_fini@@Base+0xba44>
   27acf:	mov    edx,0xa4
   27ad4:	cmove  rbx,rax
   27ad8:	sub    rsp,0x8
   27adc:	xor    eax,eax
   27ade:	push   r14
   27ae0:	mov    r9,rbx
   27ae3:	mov    rdi,r12
   27ae6:	call   3a090 <g_str_equal@plt+0x2cdd0>
   27aeb:	pop    rax
   27aec:	pop    rdx
   27aed:	jmp    27a8a <g_str_equal@plt+0x1a7ca>
   27aef:	nop
   27af0:	mov    rdi,r12
   27af3:	call   3a4c0 <g_str_equal@plt+0x2d200>
   27af8:	jmp    27a8a <g_str_equal@plt+0x1a7ca>
   27afa:	call   cd30 <__stack_chk_fail@plt>
   27aff:	nop
   27b00:	push   r15
   27b02:	push   r14
   27b04:	mov    rax,rdi
   27b07:	push   r13
   27b09:	push   r12
   27b0b:	mov    r15,rsi
   27b0e:	push   rbp
   27b0f:	push   rbx
   27b10:	mov    rbx,rdx
   27b13:	mov    r13,rcx
   27b16:	mov    r12,r8
   27b19:	mov    r14,r9
   27b1c:	sub    rsp,0x28
   27b20:	mov    rdx,QWORD PTR [rsi]
   27b23:	mov    rsi,rbx
   27b26:	mov    rdi,QWORD PTR fs:0x28
   27b2f:	mov    QWORD PTR [rsp+0x18],rdi
   27b34:	xor    edi,edi
   27b36:	mov    rbp,QWORD PTR [rsp+0x60]
   27b3b:	mov    QWORD PTR [rsp+0x8],0x0
   27b44:	lea    rcx,[rsp+0x8]
   27b49:	mov    QWORD PTR [rsp+0x10],rdx
   27b4e:	mov    rdi,rax
   27b51:	lea    rdx,[rsp+0x10]
   27b56:	call   QWORD PTR [rax+0x48]
   27b59:	mov    rsi,QWORD PTR [rsp+0x8]
   27b5e:	test   rsi,rsi
   27b61:	jne    27bd0 <g_str_equal@plt+0x1a910>
   27b63:	mov    rax,QWORD PTR [rsp+0x10]
   27b68:	cmp    rax,r12
   27b6b:	jg     27b72 <g_str_equal@plt+0x1a8b2>
   27b6d:	cmp    rax,r13
   27b70:	jge    27be0 <g_str_equal@plt+0x1a920>
   27b72:	lea    rax,[rip+0x32f2e]        # 5aaa7 <_fini@@Base+0x8353>
   27b79:	test   rbx,rbx
   27b7c:	lea    r8,[rip+0x3657a]        # 5e0fd <_fini@@Base+0xb9a9>
   27b83:	lea    rcx,[rip+0x36df6]        # 5e980 <_fini@@Base+0xc22c>
   27b8a:	lea    rsi,[rip+0x36607]        # 5e198 <_fini@@Base+0xba44>
   27b91:	mov    edx,0xdf
   27b96:	cmove  rbx,rax
   27b9a:	sub    rsp,0x8
   27b9e:	xor    eax,eax
   27ba0:	push   r14
   27ba2:	mov    r9,rbx
   27ba5:	mov    rdi,rbp
   27ba8:	call   3a090 <g_str_equal@plt+0x2cdd0>
   27bad:	pop    rax
   27bae:	pop    rdx
   27baf:	mov    rax,QWORD PTR [rsp+0x18]
   27bb4:	xor    rax,QWORD PTR fs:0x28
   27bbd:	jne    27be5 <g_str_equal@plt+0x1a925>
   27bbf:	add    rsp,0x28
   27bc3:	pop    rbx
   27bc4:	pop    rbp
   27bc5:	pop    r12
   27bc7:	pop    r13
   27bc9:	pop    r14
   27bcb:	pop    r15
   27bcd:	ret    
   27bce:	xchg   ax,ax
   27bd0:	mov    rdi,rbp
   27bd3:	call   3a4c0 <g_str_equal@plt+0x2d200>
   27bd8:	jmp    27baf <g_str_equal@plt+0x1a8ef>
   27bda:	nop    WORD PTR [rax+rax*1+0x0]
   27be0:	mov    QWORD PTR [r15],rax
   27be3:	jmp    27baf <g_str_equal@plt+0x1a8ef>
   27be5:	call   cd30 <__stack_chk_fail@plt>
   27bea:	nop    WORD PTR [rax+rax*1+0x0]
   27bf0:	push   r13
   27bf2:	push   r12
   27bf4:	push   rbp
   27bf5:	push   rbx
   27bf6:	mov    rbp,rsi
   27bf9:	mov    rbx,rdi
   27bfc:	sub    rsp,0x28
   27c00:	mov    rax,QWORD PTR fs:0x28
   27c09:	mov    QWORD PTR [rsp+0x18],rax
   27c0e:	xor    eax,eax
   27c10:	cmp    DWORD PTR [rdi+0x90],0x2
   27c17:	jne    27c60 <g_str_equal@plt+0x1a9a0>
   27c19:	mov    rax,QWORD PTR [rdi+0x98]
   27c20:	test   rax,rax
   27c23:	je     27ce1 <g_str_equal@plt+0x1aa21>
   27c29:	mov    edx,DWORD PTR [rip+0x25cea9]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   27c2f:	test   edx,edx
   27c31:	jne    27c80 <g_str_equal@plt+0x1a9c0>
   27c33:	mov    rsi,rbp
   27c36:	mov    rdi,rbx
   27c39:	call   rax
   27c3b:	mov    rax,QWORD PTR [rsp+0x18]
   27c40:	xor    rax,QWORD PTR fs:0x28
   27c49:	jne    27cdc <g_str_equal@plt+0x1aa1c>
   27c4f:	add    rsp,0x28
   27c53:	pop    rbx
   27c54:	pop    rbp
   27c55:	pop    r12
   27c57:	pop    r13
   27c59:	ret    
   27c5a:	nop    WORD PTR [rax+rax*1+0x0]
   27c60:	mov    ecx,DWORD PTR [rip+0x25ce72]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   27c66:	test   ecx,ecx
   27c68:	jne    27cd0 <g_str_equal@plt+0x1aa10>
   27c6a:	mov    rax,QWORD PTR [rbx+0x98]
   27c71:	test   rax,rax
   27c74:	jne    27c33 <g_str_equal@plt+0x1a973>
   27c76:	jmp    27c3b <g_str_equal@plt+0x1a97b>
   27c78:	nop    DWORD PTR [rax+rax*1+0x0]
   27c80:	cmp    WORD PTR [rip+0x25f39c],0x0        # 287024 <stdout@@GLIBC_2.2.5+0x26dc>
   27c88:	je     27c33 <g_str_equal@plt+0x1a973>
   27c8a:	test   BYTE PTR [rip+0x25e210],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   27c91:	je     27c6a <g_str_equal@plt+0x1a9aa>
   27c93:	mov    rdi,rsp
   27c96:	xor    esi,esi
   27c98:	call   c3e0 <gettimeofday@plt>
   27c9d:	mov    r13,QWORD PTR [rsp+0x8]
   27ca2:	mov    r12,QWORD PTR [rsp]
   27ca6:	call   c5b0 <getpid@plt>
   27cab:	lea    rdi,[rip+0x36556]        # 5e208 <_fini@@Base+0xbab4>
   27cb2:	mov    esi,eax
   27cb4:	mov    r9,rbp
   27cb7:	mov    r8,rbx
   27cba:	mov    rcx,r13
   27cbd:	mov    rdx,r12
   27cc0:	xor    eax,eax
   27cc2:	call   431a0 <g_str_equal@plt+0x35ee0>
   27cc7:	jmp    27c6a <g_str_equal@plt+0x1a9aa>
   27cc9:	nop    DWORD PTR [rax+0x0]
   27cd0:	cmp    WORD PTR [rip+0x25f34c],0x0        # 287024 <stdout@@GLIBC_2.2.5+0x26dc>
   27cd8:	jne    27c8a <g_str_equal@plt+0x1a9ca>
   27cda:	jmp    27c6a <g_str_equal@plt+0x1a9aa>
   27cdc:	call   cd30 <__stack_chk_fail@plt>
   27ce1:	lea    rcx,[rip+0x36d60]        # 5ea48 <_fini@@Base+0xc2f4>
   27ce8:	lea    rsi,[rip+0x364a9]        # 5e198 <_fini@@Base+0xba44>
   27cef:	lea    rdi,[rip+0x364e2]        # 5e1d8 <_fini@@Base+0xba84>
   27cf6:	mov    edx,0x19
   27cfb:	call   c390 <__assert_fail@plt>
   27d00:	push   r12
   27d02:	push   rbp
   27d03:	push   rbx
   27d04:	mov    rbx,rdi
   27d07:	sub    rsp,0x20
   27d0b:	mov    rax,QWORD PTR fs:0x28
   27d14:	mov    QWORD PTR [rsp+0x18],rax
   27d19:	xor    eax,eax
   27d1b:	mov    eax,DWORD PTR [rip+0x25cdb7]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   27d21:	test   eax,eax
   27d23:	jne    27d50 <g_str_equal@plt+0x1aa90>
   27d25:	test   rbx,rbx
   27d28:	je     27d33 <g_str_equal@plt+0x1aa73>
   27d2a:	mov    rdi,rbx
   27d2d:	call   QWORD PTR [rbx+0xa0]
   27d33:	mov    rax,QWORD PTR [rsp+0x18]
   27d38:	xor    rax,QWORD PTR fs:0x28
   27d41:	jne    27d96 <g_str_equal@plt+0x1aad6>
   27d43:	add    rsp,0x20
   27d47:	pop    rbx
   27d48:	pop    rbp
   27d49:	pop    r12
   27d4b:	ret    
   27d4c:	nop    DWORD PTR [rax+0x0]
   27d50:	cmp    WORD PTR [rip+0x25f2ce],0x0        # 287026 <stdout@@GLIBC_2.2.5+0x26de>
   27d58:	je     27d25 <g_str_equal@plt+0x1aa65>
   27d5a:	test   BYTE PTR [rip+0x25e140],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   27d61:	je     27d25 <g_str_equal@plt+0x1aa65>
   27d63:	mov    rdi,rsp
   27d66:	xor    esi,esi
   27d68:	call   c3e0 <gettimeofday@plt>
   27d6d:	mov    r12,QWORD PTR [rsp+0x8]
   27d72:	mov    rbp,QWORD PTR [rsp]
   27d76:	call   c5b0 <getpid@plt>
   27d7b:	lea    rdi,[rip+0x36395]        # 5e117 <_fini@@Base+0xb9c3>
   27d82:	mov    esi,eax
   27d84:	mov    r8,rbx
   27d87:	mov    rcx,r12
   27d8a:	mov    rdx,rbp
   27d8d:	xor    eax,eax
   27d8f:	call   431a0 <g_str_equal@plt+0x35ee0>
   27d94:	jmp    27d25 <g_str_equal@plt+0x1aa65>
   27d96:	call   cd30 <__stack_chk_fail@plt>
   27d9b:	nop    DWORD PTR [rax+rax*1+0x0]
   27da0:	push   r15
   27da2:	push   r14
   27da4:	mov    r14,r8
   27da7:	push   r13
   27da9:	push   r12
   27dab:	mov    r12,rcx
   27dae:	push   rbp
   27daf:	push   rbx
   27db0:	mov    r13,rsi
   27db3:	mov    rbx,rdi
   27db6:	mov    rbp,rdx
   27db9:	sub    rsp,0x48
   27dbd:	mov    ecx,DWORD PTR [rip+0x25cd15]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   27dc3:	mov    rax,QWORD PTR fs:0x28
   27dcc:	mov    QWORD PTR [rsp+0x38],rax
   27dd1:	xor    eax,eax
   27dd3:	mov    QWORD PTR [rsp+0x18],0x0
   27ddc:	test   ecx,ecx
   27dde:	jne    27ec0 <g_str_equal@plt+0x1ac00>
   27de4:	test   rbp,rbp
   27de7:	jne    27e30 <g_str_equal@plt+0x1ab70>
   27de9:	mov    rsi,r13
   27dec:	lea    r8,[rsp+0x18]
   27df1:	mov    rcx,r12
   27df4:	xor    edx,edx
   27df6:	mov    rdi,rbx
   27df9:	call   QWORD PTR [rbx]
   27dfb:	mov    rsi,QWORD PTR [rsp+0x18]
   27e00:	mov    rdi,r14
   27e03:	call   3a4c0 <g_str_equal@plt+0x2d200>
   27e08:	mov    rax,QWORD PTR [rsp+0x38]
   27e0d:	xor    rax,QWORD PTR fs:0x28
   27e16:	jne    27f23 <g_str_equal@plt+0x1ac63>
   27e1c:	add    rsp,0x48
   27e20:	pop    rbx
   27e21:	pop    rbp
   27e22:	pop    r12
   27e24:	pop    r13
   27e26:	pop    r14
   27e28:	pop    r15
   27e2a:	ret    
   27e2b:	nop    DWORD PTR [rax+rax*1+0x0]
   27e30:	test   r12,r12
   27e33:	je     27f28 <g_str_equal@plt+0x1ac68>
   27e39:	test   BYTE PTR [rbx+0x90],0x2
   27e40:	jne    27e98 <g_str_equal@plt+0x1abd8>
   27e42:	mov    rsi,r13
   27e45:	lea    r8,[rsp+0x18]
   27e4a:	mov    rcx,r12
   27e4d:	mov    rdx,rbp
   27e50:	mov    rdi,rbx
   27e53:	call   QWORD PTR [rbx]
   27e55:	test   BYTE PTR [rbx+0x90],0x1
   27e5c:	mov    rsi,QWORD PTR [rsp+0x18]
   27e61:	je     27e00 <g_str_equal@plt+0x1ab40>
   27e63:	test   rsi,rsi
   27e66:	sete   dl
   27e69:	cmp    QWORD PTR [rbp+0x0],0x0
   27e6e:	sete   al
   27e71:	cmp    dl,al
   27e73:	jne    27e00 <g_str_equal@plt+0x1ab40>
   27e75:	lea    rcx,[rip+0x36bb4]        # 5ea30 <_fini@@Base+0xc2dc>
   27e7c:	lea    rsi,[rip+0x36315]        # 5e198 <_fini@@Base+0xba44>
   27e83:	lea    rdi,[rip+0x362ab]        # 5e135 <_fini@@Base+0xb9e1>
   27e8a:	mov    edx,0x34
   27e8f:	call   c390 <__assert_fail@plt>
   27e94:	nop    DWORD PTR [rax+0x0]
   27e98:	cmp    QWORD PTR [rbp+0x0],0x0
   27e9d:	jne    27e42 <g_str_equal@plt+0x1ab82>
   27e9f:	lea    rcx,[rip+0x36b8a]        # 5ea30 <_fini@@Base+0xc2dc>
   27ea6:	lea    rsi,[rip+0x362eb]        # 5e198 <_fini@@Base+0xba44>
   27ead:	lea    rdi,[rip+0x363c4]        # 5e278 <_fini@@Base+0xbb24>
   27eb4:	mov    edx,0x30
   27eb9:	call   c390 <__assert_fail@plt>
   27ebe:	xchg   ax,ax
   27ec0:	cmp    WORD PTR [rip+0x25f15a],0x0        # 287022 <stdout@@GLIBC_2.2.5+0x26da>
   27ec8:	je     27de4 <g_str_equal@plt+0x1ab24>
   27ece:	test   BYTE PTR [rip+0x25dfcc],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   27ed5:	je     27de4 <g_str_equal@plt+0x1ab24>
   27edb:	lea    rdi,[rsp+0x20]
   27ee0:	xor    esi,esi
   27ee2:	call   c3e0 <gettimeofday@plt>
   27ee7:	mov    rcx,QWORD PTR [rsp+0x28]
   27eec:	mov    r15,QWORD PTR [rsp+0x20]
   27ef1:	mov    QWORD PTR [rsp+0x8],rcx
   27ef6:	call   c5b0 <getpid@plt>
   27efb:	push   r12
   27efd:	push   rbp
   27efe:	lea    rdi,[rip+0x36333]        # 5e238 <_fini@@Base+0xbae4>
   27f05:	mov    rcx,QWORD PTR [rsp+0x18]
   27f0a:	mov    rdx,r15
   27f0d:	mov    esi,eax
   27f0f:	mov    r9,r13
   27f12:	mov    r8,rbx
   27f15:	xor    eax,eax
   27f17:	call   431a0 <g_str_equal@plt+0x35ee0>
   27f1c:	pop    rax
   27f1d:	pop    rdx
   27f1e:	jmp    27de4 <g_str_equal@plt+0x1ab24>
   27f23:	call   cd30 <__stack_chk_fail@plt>
   27f28:	lea    rcx,[rip+0x36b01]        # 5ea30 <_fini@@Base+0xc2dc>
   27f2f:	lea    rsi,[rip+0x36262]        # 5e198 <_fini@@Base+0xba44>
   27f36:	lea    rdi,[rip+0x3a1ac]        # 620e9 <_fini@@Base+0xf995>
   27f3d:	mov    edx,0x2f
   27f42:	call   c390 <__assert_fail@plt>
   27f47:	nop    WORD PTR [rax+rax*1+0x0]
   27f50:	push   r13
   27f52:	push   r12
   27f54:	push   rbp
   27f55:	push   rbx
   27f56:	mov    rbp,rsi
   27f59:	mov    rbx,rdi
   27f5c:	sub    rsp,0x28
   27f60:	mov    rax,QWORD PTR fs:0x28
   27f69:	mov    QWORD PTR [rsp+0x18],rax
   27f6e:	xor    eax,eax
   27f70:	mov    eax,DWORD PTR [rip+0x25cb62]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   27f76:	test   eax,eax
   27f78:	jne    27fb0 <g_str_equal@plt+0x1acf0>
   27f7a:	mov    rax,QWORD PTR [rbx+0x8]
   27f7e:	test   rax,rax
   27f81:	je     27f8b <g_str_equal@plt+0x1accb>
   27f83:	mov    rsi,rbp
   27f86:	mov    rdi,rbx
   27f89:	call   rax
   27f8b:	mov    rax,QWORD PTR [rsp+0x18]
   27f90:	xor    rax,QWORD PTR fs:0x28
   27f99:	jne    27ff6 <g_str_equal@plt+0x1ad36>
   27f9b:	add    rsp,0x28
   27f9f:	pop    rbx
   27fa0:	pop    rbp
   27fa1:	pop    r12
   27fa3:	pop    r13
   27fa5:	ret    
   27fa6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   27fb0:	cmp    WORD PTR [rip+0x25f068],0x0        # 287020 <stdout@@GLIBC_2.2.5+0x26d8>
   27fb8:	je     27f7a <g_str_equal@plt+0x1acba>
   27fba:	test   BYTE PTR [rip+0x25dee0],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   27fc1:	je     27f7a <g_str_equal@plt+0x1acba>
   27fc3:	mov    rdi,rsp
   27fc6:	xor    esi,esi
   27fc8:	call   c3e0 <gettimeofday@plt>
   27fcd:	mov    r13,QWORD PTR [rsp+0x8]
   27fd2:	mov    r12,QWORD PTR [rsp]
   27fd6:	call   c5b0 <getpid@plt>
   27fdb:	lea    rdi,[rip+0x362be]        # 5e2a0 <_fini@@Base+0xbb4c>
   27fe2:	mov    esi,eax
   27fe4:	mov    r8,rbx
   27fe7:	mov    rcx,r13
   27fea:	mov    rdx,r12
   27fed:	xor    eax,eax
   27fef:	call   431a0 <g_str_equal@plt+0x35ee0>
   27ff4:	jmp    27f7a <g_str_equal@plt+0x1acba>
   27ff6:	call   cd30 <__stack_chk_fail@plt>
   27ffb:	nop    DWORD PTR [rax+rax*1+0x0]
   28000:	push   r13
   28002:	push   r12
   28004:	push   rbp
   28005:	push   rbx
   28006:	mov    rbp,rsi
   28009:	mov    rbx,rdi
   2800c:	sub    rsp,0x28
   28010:	mov    rax,QWORD PTR fs:0x28
   28019:	mov    QWORD PTR [rsp+0x18],rax
   2801e:	xor    eax,eax
   28020:	mov    eax,DWORD PTR [rip+0x25cab2]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   28026:	test   eax,eax
   28028:	jne    28050 <g_str_equal@plt+0x1ad90>
   2802a:	mov    rsi,rbp
   2802d:	mov    rdi,rbx
   28030:	call   QWORD PTR [rbx+0x10]
   28033:	mov    rax,QWORD PTR [rsp+0x18]
   28038:	xor    rax,QWORD PTR fs:0x28
   28041:	jne    28099 <g_str_equal@plt+0x1add9>
   28043:	add    rsp,0x28
   28047:	pop    rbx
   28048:	pop    rbp
   28049:	pop    r12
   2804b:	pop    r13
   2804d:	ret    
   2804e:	xchg   ax,ax
   28050:	cmp    WORD PTR [rip+0x25efc6],0x0        # 28701e <stdout@@GLIBC_2.2.5+0x26d6>
   28058:	je     2802a <g_str_equal@plt+0x1ad6a>
   2805a:	test   BYTE PTR [rip+0x25de40],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   28061:	je     2802a <g_str_equal@plt+0x1ad6a>
   28063:	mov    rdi,rsp
   28066:	xor    esi,esi
   28068:	call   c3e0 <gettimeofday@plt>
   2806d:	mov    r13,QWORD PTR [rsp+0x8]
   28072:	mov    r12,QWORD PTR [rsp]
   28076:	call   c5b0 <getpid@plt>
   2807b:	lea    rdi,[rip+0x36246]        # 5e2c8 <_fini@@Base+0xbb74>
   28082:	mov    esi,eax
   28084:	mov    r9,rbp
   28087:	mov    r8,rbx
   2808a:	mov    rcx,r13
   2808d:	mov    rdx,r12
   28090:	xor    eax,eax
   28092:	call   431a0 <g_str_equal@plt+0x35ee0>
   28097:	jmp    2802a <g_str_equal@plt+0x1ad6a>
   28099:	call   cd30 <__stack_chk_fail@plt>
   2809e:	xchg   ax,ax
   280a0:	push   r15
   280a2:	push   r14
   280a4:	mov    r14,r8
   280a7:	push   r13
   280a9:	push   r12
   280ab:	mov    r13,rsi
   280ae:	push   rbp
   280af:	push   rbx
   280b0:	mov    rbp,rdi
   280b3:	mov    rbx,rdx
   280b6:	mov    r12,rcx
   280b9:	sub    rsp,0x48
   280bd:	mov    rax,QWORD PTR fs:0x28
   280c6:	mov    QWORD PTR [rsp+0x38],rax
   280cb:	xor    eax,eax
   280cd:	test   rdx,rdx
   280d0:	mov    QWORD PTR [rsp+0x18],0x0
   280d9:	je     280e5 <g_str_equal@plt+0x1ae25>
   280db:	cmp    rcx,0x7
   280df:	jbe    281ab <g_str_equal@plt+0x1aeeb>
   280e5:	mov    ecx,DWORD PTR [rip+0x25c9ed]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   280eb:	test   ecx,ecx
   280ed:	jne    28150 <g_str_equal@plt+0x1ae90>
   280ef:	mov    rsi,r13
   280f2:	lea    r8,[rsp+0x18]
   280f7:	mov    rcx,r12
   280fa:	mov    rdx,rbx
   280fd:	mov    rdi,rbp
   28100:	call   QWORD PTR [rbp+0x18]
   28103:	test   rbx,rbx
   28106:	mov    rsi,QWORD PTR [rsp+0x18]
   2810b:	je     28125 <g_str_equal@plt+0x1ae65>
   2810d:	test   BYTE PTR [rbp+0x90],0x1
   28114:	je     28125 <g_str_equal@plt+0x1ae65>
   28116:	test   rsi,rsi
   28119:	je     28125 <g_str_equal@plt+0x1ae65>
   2811b:	cmp    QWORD PTR [rbx],0x0
   2811f:	jne    281ca <g_str_equal@plt+0x1af0a>
   28125:	mov    rdi,r14
   28128:	call   3a4c0 <g_str_equal@plt+0x2d200>
   2812d:	mov    rax,QWORD PTR [rsp+0x38]
   28132:	xor    rax,QWORD PTR fs:0x28
   2813b:	jne    281e9 <g_str_equal@plt+0x1af29>
   28141:	add    rsp,0x48
   28145:	pop    rbx
   28146:	pop    rbp
   28147:	pop    r12
   28149:	pop    r13
   2814b:	pop    r14
   2814d:	pop    r15
   2814f:	ret    
   28150:	cmp    WORD PTR [rip+0x25eec4],0x0        # 28701c <stdout@@GLIBC_2.2.5+0x26d4>
   28158:	je     280ef <g_str_equal@plt+0x1ae2f>
   2815a:	test   BYTE PTR [rip+0x25dd40],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   28161:	je     280ef <g_str_equal@plt+0x1ae2f>
   28163:	lea    rdi,[rsp+0x20]
   28168:	xor    esi,esi
   2816a:	call   c3e0 <gettimeofday@plt>
   2816f:	mov    rcx,QWORD PTR [rsp+0x28]
   28174:	mov    r15,QWORD PTR [rsp+0x20]
   28179:	mov    QWORD PTR [rsp+0x8],rcx
   2817e:	call   c5b0 <getpid@plt>
   28183:	push   r12
   28185:	push   rbx
   28186:	lea    rdi,[rip+0x36193]        # 5e320 <_fini@@Base+0xbbcc>
   2818d:	mov    rcx,QWORD PTR [rsp+0x18]
   28192:	mov    rdx,r15
   28195:	mov    esi,eax
   28197:	mov    r9,r13
   2819a:	mov    r8,rbp
   2819d:	xor    eax,eax
   2819f:	call   431a0 <g_str_equal@plt+0x35ee0>
   281a4:	pop    rax
   281a5:	pop    rdx
   281a6:	jmp    280ef <g_str_equal@plt+0x1ae2f>
   281ab:	lea    rcx,[rip+0x3685e]        # 5ea10 <_fini@@Base+0xc2bc>
   281b2:	lea    rsi,[rip+0x35fdf]        # 5e198 <_fini@@Base+0xba44>
   281b9:	lea    rdi,[rip+0x36138]        # 5e2f8 <_fini@@Base+0xbba4>
   281c0:	mov    edx,0x4c
   281c5:	call   c390 <__assert_fail@plt>
   281ca:	lea    rcx,[rip+0x3683f]        # 5ea10 <_fini@@Base+0xc2bc>
   281d1:	lea    rsi,[rip+0x35fc0]        # 5e198 <_fini@@Base+0xba44>
   281d8:	lea    rdi,[rip+0x35f64]        # 5e143 <_fini@@Base+0xb9ef>
   281df:	mov    edx,0x50
   281e4:	call   c390 <__assert_fail@plt>
   281e9:	call   cd30 <__stack_chk_fail@plt>
   281ee:	xchg   ax,ax
   281f0:	push   r14
   281f2:	push   r13
   281f4:	push   r12
   281f6:	push   rbp
   281f7:	push   rbx
   281f8:	sub    rsp,0x20
   281fc:	mov    rax,QWORD PTR fs:0x28
   28205:	mov    QWORD PTR [rsp+0x18],rax
   2820a:	xor    eax,eax
   2820c:	test   rsi,rsi
   2820f:	je     282b1 <g_str_equal@plt+0x1aff1>
   28215:	cmp    rdx,0x7
   28219:	mov    r12,rdx
   2821c:	jbe    282b1 <g_str_equal@plt+0x1aff1>
   28222:	mov    ecx,DWORD PTR [rip+0x25c8b0]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   28228:	mov    rbp,rdi
   2822b:	mov    rbx,rsi
   2822e:	test   ecx,ecx
   28230:	jne    28260 <g_str_equal@plt+0x1afa0>
   28232:	mov    rdx,r12
   28235:	mov    rsi,rbx
   28238:	mov    rdi,rbp
   2823b:	call   QWORD PTR [rbp+0x20]
   2823e:	mov    rcx,QWORD PTR [rsp+0x18]
   28243:	xor    rcx,QWORD PTR fs:0x28
   2824c:	jne    282d0 <g_str_equal@plt+0x1b010>
   28252:	add    rsp,0x20
   28256:	pop    rbx
   28257:	pop    rbp
   28258:	pop    r12
   2825a:	pop    r13
   2825c:	pop    r14
   2825e:	ret    
   2825f:	nop
   28260:	cmp    WORD PTR [rip+0x25edb2],0x0        # 28701a <stdout@@GLIBC_2.2.5+0x26d2>
   28268:	je     28232 <g_str_equal@plt+0x1af72>
   2826a:	test   BYTE PTR [rip+0x25dc30],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   28271:	je     28232 <g_str_equal@plt+0x1af72>
   28273:	mov    rdi,rsp
   28276:	xor    esi,esi
   28278:	call   c3e0 <gettimeofday@plt>
   2827d:	mov    r14,QWORD PTR [rsp+0x8]
   28282:	mov    r13,QWORD PTR [rsp]
   28286:	call   c5b0 <getpid@plt>
   2828b:	sub    rsp,0x8
   2828f:	lea    rdi,[rip+0x360f2]        # 5e388 <_fini@@Base+0xbc34>
   28296:	mov    esi,eax
   28298:	push   r12
   2829a:	mov    rdx,r13
   2829d:	mov    r9,rbx
   282a0:	mov    r8,rbp
   282a3:	mov    rcx,r14
   282a6:	xor    eax,eax
   282a8:	call   431a0 <g_str_equal@plt+0x35ee0>
   282ad:	pop    rax
   282ae:	pop    rdx
   282af:	jmp    28232 <g_str_equal@plt+0x1af72>
   282b1:	lea    rcx,[rip+0x36748]        # 5ea00 <_fini@@Base+0xc2ac>
   282b8:	lea    rsi,[rip+0x35ed9]        # 5e198 <_fini@@Base+0xba44>
   282bf:	lea    rdi,[rip+0x3609a]        # 5e360 <_fini@@Base+0xbc0c>
   282c6:	mov    edx,0x57
   282cb:	call   c390 <__assert_fail@plt>
   282d0:	call   cd30 <__stack_chk_fail@plt>
   282d5:	nop
   282d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   282e0:	push   r13
   282e2:	push   r12
   282e4:	push   rbp
   282e5:	push   rbx
   282e6:	mov    rbp,rsi
   282e9:	mov    rbx,rdi
   282ec:	sub    rsp,0x28
   282f0:	mov    rax,QWORD PTR fs:0x28
   282f9:	mov    QWORD PTR [rsp+0x18],rax
   282fe:	xor    eax,eax
   28300:	mov    eax,DWORD PTR [rip+0x25c7d2]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   28306:	test   eax,eax
   28308:	jne    28340 <g_str_equal@plt+0x1b080>
   2830a:	mov    rax,QWORD PTR [rbx+0x28]
   2830e:	test   rax,rax
   28311:	je     2831b <g_str_equal@plt+0x1b05b>
   28313:	mov    rsi,rbp
   28316:	mov    rdi,rbx
   28319:	call   rax
   2831b:	mov    rax,QWORD PTR [rsp+0x18]
   28320:	xor    rax,QWORD PTR fs:0x28
   28329:	jne    28386 <g_str_equal@plt+0x1b0c6>
   2832b:	add    rsp,0x28
   2832f:	pop    rbx
   28330:	pop    rbp
   28331:	pop    r12
   28333:	pop    r13
   28335:	ret    
   28336:	nop    WORD PTR cs:[rax+rax*1+0x0]
   28340:	cmp    WORD PTR [rip+0x25ecd0],0x0        # 287018 <stdout@@GLIBC_2.2.5+0x26d0>
   28348:	je     2830a <g_str_equal@plt+0x1b04a>
   2834a:	test   BYTE PTR [rip+0x25db50],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   28351:	je     2830a <g_str_equal@plt+0x1b04a>
   28353:	mov    rdi,rsp
   28356:	xor    esi,esi
   28358:	call   c3e0 <gettimeofday@plt>
   2835d:	mov    r13,QWORD PTR [rsp+0x8]
   28362:	mov    r12,QWORD PTR [rsp]
   28366:	call   c5b0 <getpid@plt>
   2836b:	lea    rdi,[rip+0x3604e]        # 5e3c0 <_fini@@Base+0xbc6c>
   28372:	mov    esi,eax
   28374:	mov    r8,rbx
   28377:	mov    rcx,r13
   2837a:	mov    rdx,r12
   2837d:	xor    eax,eax
   2837f:	call   431a0 <g_str_equal@plt+0x35ee0>
   28384:	jmp    2830a <g_str_equal@plt+0x1b04a>
   28386:	call   cd30 <__stack_chk_fail@plt>
   2838b:	nop    DWORD PTR [rax+rax*1+0x0]
   28390:	push   r13
   28392:	push   r12
   28394:	push   rbp
   28395:	push   rbx
   28396:	mov    rbp,rsi
   28399:	mov    rbx,rdi
   2839c:	sub    rsp,0x28
   283a0:	mov    rax,QWORD PTR fs:0x28
   283a9:	mov    QWORD PTR [rsp+0x18],rax
   283ae:	xor    eax,eax
   283b0:	mov    eax,DWORD PTR [rip+0x25c722]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   283b6:	test   eax,eax
   283b8:	jne    283e0 <g_str_equal@plt+0x1b120>
   283ba:	mov    rsi,rbp
   283bd:	mov    rdi,rbx
   283c0:	call   QWORD PTR [rbx+0x30]
   283c3:	mov    rax,QWORD PTR [rsp+0x18]
   283c8:	xor    rax,QWORD PTR fs:0x28
   283d1:	jne    28429 <g_str_equal@plt+0x1b169>
   283d3:	add    rsp,0x28
   283d7:	pop    rbx
   283d8:	pop    rbp
   283d9:	pop    r12
   283db:	pop    r13
   283dd:	ret    
   283de:	xchg   ax,ax
   283e0:	cmp    WORD PTR [rip+0x25ec2e],0x0        # 287016 <stdout@@GLIBC_2.2.5+0x26ce>
   283e8:	je     283ba <g_str_equal@plt+0x1b0fa>
   283ea:	test   BYTE PTR [rip+0x25dab0],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   283f1:	je     283ba <g_str_equal@plt+0x1b0fa>
   283f3:	mov    rdi,rsp
   283f6:	xor    esi,esi
   283f8:	call   c3e0 <gettimeofday@plt>
   283fd:	mov    r13,QWORD PTR [rsp+0x8]
   28402:	mov    r12,QWORD PTR [rsp]
   28406:	call   c5b0 <getpid@plt>
   2840b:	lea    rdi,[rip+0x35fd6]        # 5e3e8 <_fini@@Base+0xbc94>
   28412:	mov    esi,eax
   28414:	mov    r9,rbp
   28417:	mov    r8,rbx
   2841a:	mov    rcx,r13
   2841d:	mov    rdx,r12
   28420:	xor    eax,eax
   28422:	call   431a0 <g_str_equal@plt+0x35ee0>
   28427:	jmp    283ba <g_str_equal@plt+0x1b0fa>
   28429:	call   cd30 <__stack_chk_fail@plt>
   2842e:	xchg   ax,ax
   28430:	push   r15
   28432:	push   r14
   28434:	push   r13
   28436:	push   r12
   28438:	push   rbp
   28439:	push   rbx
   2843a:	sub    rsp,0x48
   2843e:	mov    rax,QWORD PTR fs:0x28
   28447:	mov    QWORD PTR [rsp+0x38],rax
   2844c:	xor    eax,eax
   2844e:	test   rdx,rdx
   28451:	mov    QWORD PTR [rsp+0x18],0x0
   2845a:	je     285a2 <g_str_equal@plt+0x1b2e2>
   28460:	cmp    rcx,0x3
   28464:	mov    r12,rcx
   28467:	jbe    285a2 <g_str_equal@plt+0x1b2e2>
   2846d:	test   BYTE PTR [rdi+0x90],0x2
   28474:	mov    rbx,rdi
   28477:	mov    r14,rsi
   2847a:	mov    rbp,rdx
   2847d:	mov    r13,r8
   28480:	je     2848c <g_str_equal@plt+0x1b1cc>
   28482:	cmp    QWORD PTR [rdx],0x0
   28486:	je     285c6 <g_str_equal@plt+0x1b306>
   2848c:	mov    ecx,DWORD PTR [rip+0x25c646]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   28492:	test   ecx,ecx
   28494:	jne    28520 <g_str_equal@plt+0x1b260>
   2849a:	mov    rax,QWORD PTR [rbx+0x38]
   2849e:	test   rax,rax
   284a1:	je     28510 <g_str_equal@plt+0x1b250>
   284a3:	lea    r8,[rsp+0x18]
   284a8:	mov    rcx,r12
   284ab:	mov    rdx,rbp
   284ae:	mov    rsi,r14
   284b1:	mov    rdi,rbx
   284b4:	call   rax
   284b6:	test   BYTE PTR [rbx+0x90],0x1
   284bd:	je     28519 <g_str_equal@plt+0x1b259>
   284bf:	cmp    QWORD PTR [rbx+0x38],0x0
   284c4:	je     28583 <g_str_equal@plt+0x1b2c3>
   284ca:	mov    rsi,QWORD PTR [rsp+0x18]
   284cf:	test   rsi,rsi
   284d2:	sete   dl
   284d5:	cmp    QWORD PTR [rbp+0x0],0x0
   284da:	sete   al
   284dd:	cmp    dl,al
   284df:	je     28583 <g_str_equal@plt+0x1b2c3>
   284e5:	mov    rdi,r13
   284e8:	call   3a4c0 <g_str_equal@plt+0x2d200>
   284ed:	mov    rax,QWORD PTR [rsp+0x38]
   284f2:	xor    rax,QWORD PTR fs:0x28
   284fb:	jne    285c1 <g_str_equal@plt+0x1b301>
   28501:	add    rsp,0x48
   28505:	pop    rbx
   28506:	pop    rbp
   28507:	pop    r12
   28509:	pop    r13
   2850b:	pop    r14
   2850d:	pop    r15
   2850f:	ret    
   28510:	test   BYTE PTR [rbx+0x90],0x1
   28517:	jne    28583 <g_str_equal@plt+0x1b2c3>
   28519:	mov    rsi,QWORD PTR [rsp+0x18]
   2851e:	jmp    284e5 <g_str_equal@plt+0x1b225>
   28520:	cmp    WORD PTR [rip+0x25eaec],0x0        # 287014 <stdout@@GLIBC_2.2.5+0x26cc>
   28528:	je     2849a <g_str_equal@plt+0x1b1da>
   2852e:	test   BYTE PTR [rip+0x25d96c],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   28535:	je     2849a <g_str_equal@plt+0x1b1da>
   2853b:	lea    rdi,[rsp+0x20]
   28540:	xor    esi,esi
   28542:	call   c3e0 <gettimeofday@plt>
   28547:	mov    rcx,QWORD PTR [rsp+0x28]
   2854c:	mov    r15,QWORD PTR [rsp+0x20]
   28551:	mov    QWORD PTR [rsp+0x8],rcx
   28556:	call   c5b0 <getpid@plt>
   2855b:	push   r12
   2855d:	push   rbp
   2855e:	lea    rdi,[rip+0x35edb]        # 5e440 <_fini@@Base+0xbcec>
   28565:	mov    rcx,QWORD PTR [rsp+0x18]
   2856a:	mov    rdx,r15
   2856d:	mov    esi,eax
   2856f:	mov    r9,r14
   28572:	mov    r8,rbx
   28575:	xor    eax,eax
   28577:	call   431a0 <g_str_equal@plt+0x35ee0>
   2857c:	pop    rax
   2857d:	pop    rdx
   2857e:	jmp    2849a <g_str_equal@plt+0x1b1da>
   28583:	lea    rcx,[rip+0x36456]        # 5e9e0 <_fini@@Base+0xc28c>
   2858a:	lea    rsi,[rip+0x35c07]        # 5e198 <_fini@@Base+0xba44>
   28591:	lea    rdi,[rip+0x35ef0]        # 5e488 <_fini@@Base+0xbd34>
   28598:	mov    edx,0x77
   2859d:	call   c390 <__assert_fail@plt>
   285a2:	lea    rcx,[rip+0x36437]        # 5e9e0 <_fini@@Base+0xc28c>
   285a9:	lea    rsi,[rip+0x35be8]        # 5e198 <_fini@@Base+0xba44>
   285b0:	lea    rdi,[rip+0x35e61]        # 5e418 <_fini@@Base+0xbcc4>
   285b7:	mov    edx,0x70
   285bc:	call   c390 <__assert_fail@plt>
   285c1:	call   cd30 <__stack_chk_fail@plt>
   285c6:	lea    rcx,[rip+0x36413]        # 5e9e0 <_fini@@Base+0xc28c>
   285cd:	lea    rsi,[rip+0x35bc4]        # 5e198 <_fini@@Base+0xba44>
   285d4:	lea    rdi,[rip+0x35c9d]        # 5e278 <_fini@@Base+0xbb24>
   285db:	mov    edx,0x71
   285e0:	call   c390 <__assert_fail@plt>
   285e5:	nop
   285e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   285f0:	push   r13
   285f2:	push   r12
   285f4:	push   rbp
   285f5:	push   rbx
   285f6:	mov    rbp,rsi
   285f9:	mov    rbx,rdi
   285fc:	sub    rsp,0x28
   28600:	mov    rax,QWORD PTR fs:0x28
   28609:	mov    QWORD PTR [rsp+0x18],rax
   2860e:	xor    eax,eax
   28610:	mov    eax,DWORD PTR [rip+0x25c4c2]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   28616:	test   eax,eax
   28618:	jne    28650 <g_str_equal@plt+0x1b390>
   2861a:	mov    rax,QWORD PTR [rbx+0x40]
   2861e:	test   rax,rax
   28621:	je     2862b <g_str_equal@plt+0x1b36b>
   28623:	mov    rsi,rbp
   28626:	mov    rdi,rbx
   28629:	call   rax
   2862b:	mov    rax,QWORD PTR [rsp+0x18]
   28630:	xor    rax,QWORD PTR fs:0x28
   28639:	jne    28699 <g_str_equal@plt+0x1b3d9>
   2863b:	add    rsp,0x28
   2863f:	pop    rbx
   28640:	pop    rbp
   28641:	pop    r12
   28643:	pop    r13
   28645:	ret    
   28646:	nop    WORD PTR cs:[rax+rax*1+0x0]
   28650:	cmp    WORD PTR [rip+0x25e9ba],0x0        # 287012 <stdout@@GLIBC_2.2.5+0x26ca>
   28658:	je     2861a <g_str_equal@plt+0x1b35a>
   2865a:	test   BYTE PTR [rip+0x25d840],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   28661:	je     2861a <g_str_equal@plt+0x1b35a>
   28663:	mov    rdi,rsp
   28666:	xor    esi,esi
   28668:	call   c3e0 <gettimeofday@plt>
   2866d:	mov    r13,QWORD PTR [rsp+0x8]
   28672:	mov    r12,QWORD PTR [rsp]
   28676:	call   c5b0 <getpid@plt>
   2867b:	lea    rdi,[rip+0x35e2e]        # 5e4b0 <_fini@@Base+0xbd5c>
   28682:	mov    esi,eax
   28684:	mov    r9,rbp
   28687:	mov    r8,rbx
   2868a:	mov    rcx,r13
   2868d:	mov    rdx,r12
   28690:	xor    eax,eax
   28692:	call   431a0 <g_str_equal@plt+0x35ee0>
   28697:	jmp    2861a <g_str_equal@plt+0x1b35a>
   28699:	call   cd30 <__stack_chk_fail@plt>
   2869e:	xchg   ax,ax
   286a0:	push   r14
   286a2:	push   r13
   286a4:	push   r12
   286a6:	push   rbp
   286a7:	mov    r12,rsi
   286aa:	push   rbx
   286ab:	mov    rbp,rdi
   286ae:	mov    rbx,rdx
   286b1:	sub    rsp,0x20
   286b5:	mov    ecx,DWORD PTR [rip+0x25c41d]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   286bb:	mov    rax,QWORD PTR fs:0x28
   286c4:	mov    QWORD PTR [rsp+0x18],rax
   286c9:	xor    eax,eax
   286cb:	test   ecx,ecx
   286cd:	jne    28710 <g_str_equal@plt+0x1b450>
   286cf:	mov    rax,QWORD PTR [rbp+0x88]
   286d6:	test   rax,rax
   286d9:	je     286e6 <g_str_equal@plt+0x1b426>
   286db:	mov    rdx,rbx
   286de:	mov    rsi,r12
   286e1:	mov    rdi,rbp
   286e4:	call   rax
   286e6:	mov    rcx,QWORD PTR [rsp+0x18]
   286eb:	xor    rcx,QWORD PTR fs:0x28
   286f4:	movzx  eax,BYTE PTR [rbx]
   286f7:	jne    28763 <g_str_equal@plt+0x1b4a3>
   286f9:	add    rsp,0x20
   286fd:	pop    rbx
   286fe:	pop    rbp
   286ff:	pop    r12
   28701:	pop    r13
   28703:	pop    r14
   28705:	ret    
   28706:	nop    WORD PTR cs:[rax+rax*1+0x0]
   28710:	cmp    WORD PTR [rip+0x25e8f8],0x0        # 287010 <stdout@@GLIBC_2.2.5+0x26c8>
   28718:	je     286cf <g_str_equal@plt+0x1b40f>
   2871a:	test   BYTE PTR [rip+0x25d780],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   28721:	je     286cf <g_str_equal@plt+0x1b40f>
   28723:	mov    rdi,rsp
   28726:	xor    esi,esi
   28728:	call   c3e0 <gettimeofday@plt>
   2872d:	mov    r14,QWORD PTR [rsp+0x8]
   28732:	mov    r13,QWORD PTR [rsp]
   28736:	call   c5b0 <getpid@plt>
   2873b:	sub    rsp,0x8
   2873f:	lea    rdi,[rip+0x35d9a]        # 5e4e0 <_fini@@Base+0xbd8c>
   28746:	mov    esi,eax
   28748:	push   rbx
   28749:	mov    rdx,r13
   2874c:	mov    r9,r12
   2874f:	mov    r8,rbp
   28752:	mov    rcx,r14
   28755:	xor    eax,eax
   28757:	call   431a0 <g_str_equal@plt+0x35ee0>
   2875c:	pop    rax
   2875d:	pop    rdx
   2875e:	jmp    286cf <g_str_equal@plt+0x1b40f>
   28763:	call   cd30 <__stack_chk_fail@plt>
   28768:	nop    DWORD PTR [rax+rax*1+0x0]
   28770:	cmp    DWORD PTR [rdi+0x90],0x1
   28777:	sete   al
   2877a:	ret    
   2877b:	nop    DWORD PTR [rax+rax*1+0x0]
   28780:	push   r15
   28782:	push   r14
   28784:	push   r13
   28786:	push   r12
   28788:	push   rbp
   28789:	push   rbx
   2878a:	sub    rsp,0x28
   2878e:	mov    rax,QWORD PTR fs:0x28
   28797:	mov    QWORD PTR [rsp+0x18],rax
   2879c:	xor    eax,eax
   2879e:	test   rdx,rdx
   287a1:	je     28843 <g_str_equal@plt+0x1b583>
   287a7:	mov    r13,rcx
   287aa:	mov    ecx,DWORD PTR [rip+0x25c328]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   287b0:	mov    rbp,rdi
   287b3:	mov    r12,rsi
   287b6:	mov    rbx,rdx
   287b9:	test   ecx,ecx
   287bb:	jne    287f0 <g_str_equal@plt+0x1b530>
   287bd:	mov    rcx,r13
   287c0:	mov    rdx,rbx
   287c3:	mov    rsi,r12
   287c6:	mov    rdi,rbp
   287c9:	call   QWORD PTR [rbp+0x48]
   287cc:	mov    rax,QWORD PTR [rsp+0x18]
   287d1:	xor    rax,QWORD PTR fs:0x28
   287da:	jne    28862 <g_str_equal@plt+0x1b5a2>
   287e0:	add    rsp,0x28
   287e4:	pop    rbx
   287e5:	pop    rbp
   287e6:	pop    r12
   287e8:	pop    r13
   287ea:	pop    r14
   287ec:	pop    r15
   287ee:	ret    
   287ef:	nop
   287f0:	cmp    WORD PTR [rip+0x25e814],0x0        # 28700c <stdout@@GLIBC_2.2.5+0x26c4>
   287f8:	je     287bd <g_str_equal@plt+0x1b4fd>
   287fa:	test   BYTE PTR [rip+0x25d6a0],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   28801:	je     287bd <g_str_equal@plt+0x1b4fd>
   28803:	mov    rdi,rsp
   28806:	xor    esi,esi
   28808:	call   c3e0 <gettimeofday@plt>
   2880d:	mov    r15,QWORD PTR [rsp+0x8]
   28812:	mov    r14,QWORD PTR [rsp]
   28816:	call   c5b0 <getpid@plt>
   2881b:	sub    rsp,0x8
   2881f:	lea    rdi,[rip+0x35cf2]        # 5e518 <_fini@@Base+0xbdc4>
   28826:	mov    esi,eax
   28828:	push   rbx
   28829:	mov    rdx,r14
   2882c:	mov    r9,r12
   2882f:	mov    r8,rbp
   28832:	mov    rcx,r15
   28835:	xor    eax,eax
   28837:	call   431a0 <g_str_equal@plt+0x35ee0>
   2883c:	pop    rax
   2883d:	pop    rdx
   2883e:	jmp    287bd <g_str_equal@plt+0x1b4fd>
   28843:	lea    rcx,[rip+0x3617e]        # 5e9c8 <_fini@@Base+0xc274>
   2884a:	lea    rsi,[rip+0x35947]        # 5e198 <_fini@@Base+0xba44>
   28851:	lea    rdi,[rip+0x363e6]        # 5ec3e <_fini@@Base+0xc4ea>
   28858:	mov    edx,0x94
   2885d:	call   c390 <__assert_fail@plt>
   28862:	call   cd30 <__stack_chk_fail@plt>
   28867:	nop    WORD PTR [rax+rax*1+0x0]
   28870:	push   r15
   28872:	push   r14
   28874:	mov    r14,rcx
   28877:	push   r13
   28879:	push   r12
   2887b:	mov    r13,rsi
   2887e:	push   rbp
   2887f:	push   rbx
   28880:	mov    rbp,rdi
   28883:	mov    rbx,rdx
   28886:	sub    rsp,0x38
   2888a:	mov    ecx,DWORD PTR [rip+0x25c248]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   28890:	mov    rax,QWORD PTR fs:0x28
   28899:	mov    QWORD PTR [rsp+0x28],rax
   2889e:	xor    eax,eax
   288a0:	lea    r12,[rsp+0x10]
   288a5:	test   ecx,ecx
   288a7:	jne    288f8 <g_str_equal@plt+0x1b638>
   288a9:	movzx  eax,BYTE PTR [rbx]
   288ac:	lea    r8,[rip+0x358a0]        # 5e153 <_fini@@Base+0xb9ff>
   288b3:	mov    r9,r14
   288b6:	mov    ecx,0xff
   288bb:	mov    rdx,r13
   288be:	mov    rsi,r12
   288c1:	mov    rdi,rbp
   288c4:	mov    QWORD PTR [rsp+0x10],rax
   288c9:	call   27a20 <g_str_equal@plt+0x1a760>
   288ce:	mov    rax,QWORD PTR [rsp+0x10]
   288d3:	mov    BYTE PTR [rbx],al
   288d5:	mov    rax,QWORD PTR [rsp+0x28]
   288da:	xor    rax,QWORD PTR fs:0x28
   288e3:	jne    28953 <g_str_equal@plt+0x1b693>
   288e5:	add    rsp,0x38
   288e9:	pop    rbx
   288ea:	pop    rbp
   288eb:	pop    r12
   288ed:	pop    r13
   288ef:	pop    r14
   288f1:	pop    r15
   288f3:	ret    
   288f4:	nop    DWORD PTR [rax+0x0]
   288f8:	cmp    WORD PTR [rip+0x25e70a],0x0        # 28700a <stdout@@GLIBC_2.2.5+0x26c2>
   28900:	je     288a9 <g_str_equal@plt+0x1b5e9>
   28902:	test   BYTE PTR [rip+0x25d598],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   28909:	je     288a9 <g_str_equal@plt+0x1b5e9>
   2890b:	xor    esi,esi
   2890d:	mov    rdi,r12
   28910:	call   c3e0 <gettimeofday@plt>
   28915:	mov    rcx,QWORD PTR [rsp+0x18]
   2891a:	mov    r15,QWORD PTR [rsp+0x10]
   2891f:	mov    QWORD PTR [rsp+0x8],rcx
   28924:	call   c5b0 <getpid@plt>
   28929:	sub    rsp,0x8
   2892d:	lea    rdi,[rip+0x35c1c]        # 5e550 <_fini@@Base+0xbdfc>
   28934:	mov    rdx,r15
   28937:	push   rbx
   28938:	mov    rcx,QWORD PTR [rsp+0x18]
   2893d:	mov    esi,eax
   2893f:	mov    r9,r13
   28942:	mov    r8,rbp
   28945:	xor    eax,eax
   28947:	call   431a0 <g_str_equal@plt+0x35ee0>
   2894c:	pop    rax
   2894d:	pop    rdx
   2894e:	jmp    288a9 <g_str_equal@plt+0x1b5e9>
   28953:	call   cd30 <__stack_chk_fail@plt>
   28958:	nop    DWORD PTR [rax+rax*1+0x0]
   28960:	push   r15
   28962:	push   r14
   28964:	mov    r14,rcx
   28967:	push   r13
   28969:	push   r12
   2896b:	mov    r13,rsi
   2896e:	push   rbp
   2896f:	push   rbx
   28970:	mov    rbp,rdi
   28973:	mov    rbx,rdx
   28976:	sub    rsp,0x38
   2897a:	mov    ecx,DWORD PTR [rip+0x25c158]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   28980:	mov    rax,QWORD PTR fs:0x28
   28989:	mov    QWORD PTR [rsp+0x28],rax
   2898e:	xor    eax,eax
   28990:	lea    r12,[rsp+0x10]
   28995:	test   ecx,ecx
   28997:	jne    289e8 <g_str_equal@plt+0x1b728>
   28999:	movzx  eax,WORD PTR [rbx]
   2899c:	lea    r8,[rip+0x357b8]        # 5e15b <_fini@@Base+0xba07>
   289a3:	mov    r9,r14
   289a6:	mov    ecx,0xffff
   289ab:	mov    rdx,r13
   289ae:	mov    rsi,r12
   289b1:	mov    rdi,rbp
   289b4:	mov    QWORD PTR [rsp+0x10],rax
   289b9:	call   27a20 <g_str_equal@plt+0x1a760>
   289be:	mov    rax,QWORD PTR [rsp+0x10]
   289c3:	mov    WORD PTR [rbx],ax
   289c6:	mov    rax,QWORD PTR [rsp+0x28]
   289cb:	xor    rax,QWORD PTR fs:0x28
   289d4:	jne    28a43 <g_str_equal@plt+0x1b783>
   289d6:	add    rsp,0x38
   289da:	pop    rbx
   289db:	pop    rbp
   289dc:	pop    r12
   289de:	pop    r13
   289e0:	pop    r14
   289e2:	pop    r15
   289e4:	ret    
   289e5:	nop    DWORD PTR [rax]
   289e8:	cmp    WORD PTR [rip+0x25e618],0x0        # 287008 <stdout@@GLIBC_2.2.5+0x26c0>
   289f0:	je     28999 <g_str_equal@plt+0x1b6d9>
   289f2:	test   BYTE PTR [rip+0x25d4a8],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   289f9:	je     28999 <g_str_equal@plt+0x1b6d9>
   289fb:	xor    esi,esi
   289fd:	mov    rdi,r12
   28a00:	call   c3e0 <gettimeofday@plt>
   28a05:	mov    rcx,QWORD PTR [rsp+0x18]
   28a0a:	mov    r15,QWORD PTR [rsp+0x10]
   28a0f:	mov    QWORD PTR [rsp+0x8],rcx
   28a14:	call   c5b0 <getpid@plt>
   28a19:	sub    rsp,0x8
   28a1d:	lea    rdi,[rip+0x35b64]        # 5e588 <_fini@@Base+0xbe34>
   28a24:	mov    rdx,r15
   28a27:	push   rbx
   28a28:	mov    rcx,QWORD PTR [rsp+0x18]
   28a2d:	mov    esi,eax
   28a2f:	mov    r9,r13
   28a32:	mov    r8,rbp
   28a35:	xor    eax,eax
   28a37:	call   431a0 <g_str_equal@plt+0x35ee0>
   28a3c:	pop    rax
   28a3d:	pop    rdx
   28a3e:	jmp    28999 <g_str_equal@plt+0x1b6d9>
   28a43:	call   cd30 <__stack_chk_fail@plt>
   28a48:	nop    DWORD PTR [rax+rax*1+0x0]
   28a50:	push   r15
   28a52:	push   r14
   28a54:	mov    r14,rcx
   28a57:	push   r13
   28a59:	push   r12
   28a5b:	mov    r13,rsi
   28a5e:	push   rbp
   28a5f:	push   rbx
   28a60:	mov    rbp,rdi
   28a63:	mov    rbx,rdx
   28a66:	sub    rsp,0x38
   28a6a:	mov    ecx,DWORD PTR [rip+0x25c068]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   28a70:	mov    rax,QWORD PTR fs:0x28
   28a79:	mov    QWORD PTR [rsp+0x28],rax
   28a7e:	xor    eax,eax
   28a80:	lea    r12,[rsp+0x10]
   28a85:	test   ecx,ecx
   28a87:	jne    28ad8 <g_str_equal@plt+0x1b818>
   28a89:	mov    eax,DWORD PTR [rbx]
   28a8b:	lea    r8,[rip+0x356d2]        # 5e164 <_fini@@Base+0xba10>
   28a92:	mov    r9,r14
   28a95:	mov    ecx,0xffffffff
   28a9a:	mov    rdx,r13
   28a9d:	mov    rsi,r12
   28aa0:	mov    rdi,rbp
   28aa3:	mov    QWORD PTR [rsp+0x10],rax
   28aa8:	call   27a20 <g_str_equal@plt+0x1a760>
   28aad:	mov    rax,QWORD PTR [rsp+0x10]
   28ab2:	mov    DWORD PTR [rbx],eax
   28ab4:	mov    rax,QWORD PTR [rsp+0x28]
   28ab9:	xor    rax,QWORD PTR fs:0x28
   28ac2:	jne    28b33 <g_str_equal@plt+0x1b873>
   28ac4:	add    rsp,0x38
   28ac8:	pop    rbx
   28ac9:	pop    rbp
   28aca:	pop    r12
   28acc:	pop    r13
   28ace:	pop    r14
   28ad0:	pop    r15
   28ad2:	ret    
   28ad3:	nop    DWORD PTR [rax+rax*1+0x0]
   28ad8:	cmp    WORD PTR [rip+0x25e526],0x0        # 287006 <stdout@@GLIBC_2.2.5+0x26be>
   28ae0:	je     28a89 <g_str_equal@plt+0x1b7c9>
   28ae2:	test   BYTE PTR [rip+0x25d3b8],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   28ae9:	je     28a89 <g_str_equal@plt+0x1b7c9>
   28aeb:	xor    esi,esi
   28aed:	mov    rdi,r12
   28af0:	call   c3e0 <gettimeofday@plt>
   28af5:	mov    rcx,QWORD PTR [rsp+0x18]
   28afa:	mov    r15,QWORD PTR [rsp+0x10]
   28aff:	mov    QWORD PTR [rsp+0x8],rcx
   28b04:	call   c5b0 <getpid@plt>
   28b09:	sub    rsp,0x8
   28b0d:	lea    rdi,[rip+0x35aac]        # 5e5c0 <_fini@@Base+0xbe6c>
   28b14:	mov    rdx,r15
   28b17:	push   rbx
   28b18:	mov    rcx,QWORD PTR [rsp+0x18]
   28b1d:	mov    esi,eax
   28b1f:	mov    r9,r13
   28b22:	mov    r8,rbp
   28b25:	xor    eax,eax
   28b27:	call   431a0 <g_str_equal@plt+0x35ee0>
   28b2c:	pop    rax
   28b2d:	pop    rdx
   28b2e:	jmp    28a89 <g_str_equal@plt+0x1b7c9>
   28b33:	call   cd30 <__stack_chk_fail@plt>
   28b38:	nop    DWORD PTR [rax+rax*1+0x0]
   28b40:	push   r15
   28b42:	push   r14
   28b44:	push   r13
   28b46:	push   r12
   28b48:	push   rbp
   28b49:	push   rbx
   28b4a:	sub    rsp,0x28
   28b4e:	mov    rax,QWORD PTR fs:0x28
   28b57:	mov    QWORD PTR [rsp+0x18],rax
   28b5c:	xor    eax,eax
   28b5e:	test   rdx,rdx
   28b61:	je     28c03 <g_str_equal@plt+0x1b943>
   28b67:	mov    r13,rcx
   28b6a:	mov    ecx,DWORD PTR [rip+0x25bf68]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   28b70:	mov    rbp,rdi
   28b73:	mov    r12,rsi
   28b76:	mov    rbx,rdx
   28b79:	test   ecx,ecx
   28b7b:	jne    28bb0 <g_str_equal@plt+0x1b8f0>
   28b7d:	mov    rcx,r13
   28b80:	mov    rdx,rbx
   28b83:	mov    rsi,r12
   28b86:	mov    rdi,rbp
   28b89:	call   QWORD PTR [rbp+0x50]
   28b8c:	mov    rax,QWORD PTR [rsp+0x18]
   28b91:	xor    rax,QWORD PTR fs:0x28
   28b9a:	jne    28c22 <g_str_equal@plt+0x1b962>
   28ba0:	add    rsp,0x28
   28ba4:	pop    rbx
   28ba5:	pop    rbp
   28ba6:	pop    r12
   28ba8:	pop    r13
   28baa:	pop    r14
   28bac:	pop    r15
   28bae:	ret    
   28baf:	nop
   28bb0:	cmp    WORD PTR [rip+0x25e44c],0x0        # 287004 <stdout@@GLIBC_2.2.5+0x26bc>
   28bb8:	je     28b7d <g_str_equal@plt+0x1b8bd>
   28bba:	test   BYTE PTR [rip+0x25d2e0],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   28bc1:	je     28b7d <g_str_equal@plt+0x1b8bd>
   28bc3:	mov    rdi,rsp
   28bc6:	xor    esi,esi
   28bc8:	call   c3e0 <gettimeofday@plt>
   28bcd:	mov    r15,QWORD PTR [rsp+0x8]
   28bd2:	mov    r14,QWORD PTR [rsp]
   28bd6:	call   c5b0 <getpid@plt>
   28bdb:	sub    rsp,0x8
   28bdf:	lea    rdi,[rip+0x35a12]        # 5e5f8 <_fini@@Base+0xbea4>
   28be6:	mov    esi,eax
   28be8:	push   rbx
   28be9:	mov    rdx,r14
   28bec:	mov    r9,r12
   28bef:	mov    r8,rbp
   28bf2:	mov    rcx,r15
   28bf5:	xor    eax,eax
   28bf7:	call   431a0 <g_str_equal@plt+0x35ee0>
   28bfc:	pop    rax
   28bfd:	pop    rdx
   28bfe:	jmp    28b7d <g_str_equal@plt+0x1b8bd>
   28c03:	lea    rcx,[rip+0x35d86]        # 5e990 <_fini@@Base+0xc23c>
   28c0a:	lea    rsi,[rip+0x35587]        # 5e198 <_fini@@Base+0xba44>
   28c11:	lea    rdi,[rip+0x36026]        # 5ec3e <_fini@@Base+0xc4ea>
   28c18:	mov    edx,0xce
   28c1d:	call   c390 <__assert_fail@plt>
   28c22:	call   cd30 <__stack_chk_fail@plt>
   28c27:	nop    WORD PTR [rax+rax*1+0x0]
   28c30:	push   r15
   28c32:	push   r14
   28c34:	mov    r14,rcx
   28c37:	push   r13
   28c39:	push   r12
   28c3b:	mov    r13,rsi
   28c3e:	push   rbp
   28c3f:	push   rbx
   28c40:	mov    rbp,rdi
   28c43:	mov    rbx,rdx
   28c46:	sub    rsp,0x38
   28c4a:	mov    edi,DWORD PTR [rip+0x25be88]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   28c50:	mov    rax,QWORD PTR fs:0x28
   28c59:	mov    QWORD PTR [rsp+0x28],rax
   28c5e:	xor    eax,eax
   28c60:	lea    r12,[rsp+0x10]
   28c65:	test   edi,edi
   28c67:	jne    28cc8 <g_str_equal@plt+0x1ba08>
   28c69:	movsx  rax,BYTE PTR [rbx]
   28c6d:	sub    rsp,0x8
   28c71:	lea    r9,[rip+0x354dc]        # 5e154 <_fini@@Base+0xba00>
   28c78:	mov    rdx,r13
   28c7b:	mov    r8d,0x7f
   28c81:	mov    rcx,0xffffffffffffff80
   28c88:	mov    rsi,r12
   28c8b:	mov    rdi,rbp
   28c8e:	mov    QWORD PTR [rsp+0x18],rax
   28c93:	push   r14
   28c95:	call   27b00 <g_str_equal@plt+0x1a840>
   28c9a:	mov    rax,QWORD PTR [rsp+0x20]
   28c9f:	mov    BYTE PTR [rbx],al
   28ca1:	pop    rax
   28ca2:	pop    rdx
   28ca3:	mov    rax,QWORD PTR [rsp+0x28]
   28ca8:	xor    rax,QWORD PTR fs:0x28
   28cb1:	jne    28d23 <g_str_equal@plt+0x1ba63>
   28cb3:	add    rsp,0x38
   28cb7:	pop    rbx
   28cb8:	pop    rbp
   28cb9:	pop    r12
   28cbb:	pop    r13
   28cbd:	pop    r14
   28cbf:	pop    r15
   28cc1:	ret    
   28cc2:	nop    WORD PTR [rax+rax*1+0x0]
   28cc8:	cmp    WORD PTR [rip+0x25e332],0x0        # 287002 <stdout@@GLIBC_2.2.5+0x26ba>
   28cd0:	je     28c69 <g_str_equal@plt+0x1b9a9>
   28cd2:	test   BYTE PTR [rip+0x25d1c8],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   28cd9:	je     28c69 <g_str_equal@plt+0x1b9a9>
   28cdb:	xor    esi,esi
   28cdd:	mov    rdi,r12
   28ce0:	call   c3e0 <gettimeofday@plt>
   28ce5:	mov    rcx,QWORD PTR [rsp+0x18]
   28cea:	mov    r15,QWORD PTR [rsp+0x10]
   28cef:	mov    QWORD PTR [rsp+0x8],rcx
   28cf4:	call   c5b0 <getpid@plt>
   28cf9:	sub    rsp,0x8
   28cfd:	lea    rdi,[rip+0x3592c]        # 5e630 <_fini@@Base+0xbedc>
   28d04:	mov    esi,eax
   28d06:	push   rbx
   28d07:	mov    rcx,QWORD PTR [rsp+0x18]
   28d0c:	mov    r9,r13
   28d0f:	mov    r8,rbp
   28d12:	mov    rdx,r15
   28d15:	xor    eax,eax
   28d17:	call   431a0 <g_str_equal@plt+0x35ee0>
   28d1c:	pop    rcx
   28d1d:	pop    rsi
   28d1e:	jmp    28c69 <g_str_equal@plt+0x1b9a9>
   28d23:	call   cd30 <__stack_chk_fail@plt>
   28d28:	nop    DWORD PTR [rax+rax*1+0x0]
   28d30:	push   r15
   28d32:	push   r14
   28d34:	mov    r14,rcx
   28d37:	push   r13
   28d39:	push   r12
   28d3b:	mov    r13,rsi
   28d3e:	push   rbp
   28d3f:	push   rbx
   28d40:	mov    rbp,rdi
   28d43:	mov    rbx,rdx
   28d46:	sub    rsp,0x38
   28d4a:	mov    edi,DWORD PTR [rip+0x25bd88]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   28d50:	mov    rax,QWORD PTR fs:0x28
   28d59:	mov    QWORD PTR [rsp+0x28],rax
   28d5e:	xor    eax,eax
   28d60:	lea    r12,[rsp+0x10]
   28d65:	test   edi,edi
   28d67:	jne    28dc8 <g_str_equal@plt+0x1bb08>
   28d69:	movsx  rax,WORD PTR [rbx]
   28d6d:	sub    rsp,0x8
   28d71:	lea    r9,[rip+0x353e4]        # 5e15c <_fini@@Base+0xba08>
   28d78:	mov    rdx,r13
   28d7b:	mov    r8d,0x7fff
   28d81:	mov    rcx,0xffffffffffff8000
   28d88:	mov    rsi,r12
   28d8b:	mov    rdi,rbp
   28d8e:	mov    QWORD PTR [rsp+0x18],rax
   28d93:	push   r14
   28d95:	call   27b00 <g_str_equal@plt+0x1a840>
   28d9a:	mov    rax,QWORD PTR [rsp+0x20]
   28d9f:	mov    WORD PTR [rbx],ax
   28da2:	pop    rax
   28da3:	pop    rdx
   28da4:	mov    rax,QWORD PTR [rsp+0x28]
   28da9:	xor    rax,QWORD PTR fs:0x28
   28db2:	jne    28e23 <g_str_equal@plt+0x1bb63>
   28db4:	add    rsp,0x38
   28db8:	pop    rbx
   28db9:	pop    rbp
   28dba:	pop    r12
   28dbc:	pop    r13
   28dbe:	pop    r14
   28dc0:	pop    r15
   28dc2:	ret    
   28dc3:	nop    DWORD PTR [rax+rax*1+0x0]
   28dc8:	cmp    WORD PTR [rip+0x25e230],0x0        # 287000 <stdout@@GLIBC_2.2.5+0x26b8>
   28dd0:	je     28d69 <g_str_equal@plt+0x1baa9>
   28dd2:	test   BYTE PTR [rip+0x25d0c8],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   28dd9:	je     28d69 <g_str_equal@plt+0x1baa9>
   28ddb:	xor    esi,esi
   28ddd:	mov    rdi,r12
   28de0:	call   c3e0 <gettimeofday@plt>
   28de5:	mov    rcx,QWORD PTR [rsp+0x18]
   28dea:	mov    r15,QWORD PTR [rsp+0x10]
   28def:	mov    QWORD PTR [rsp+0x8],rcx
   28df4:	call   c5b0 <getpid@plt>
   28df9:	sub    rsp,0x8
   28dfd:	lea    rdi,[rip+0x35864]        # 5e668 <_fini@@Base+0xbf14>
   28e04:	mov    esi,eax
   28e06:	push   rbx
   28e07:	mov    rcx,QWORD PTR [rsp+0x18]
   28e0c:	mov    r9,r13
   28e0f:	mov    r8,rbp
   28e12:	mov    rdx,r15
   28e15:	xor    eax,eax
   28e17:	call   431a0 <g_str_equal@plt+0x35ee0>
   28e1c:	pop    rcx
   28e1d:	pop    rsi
   28e1e:	jmp    28d69 <g_str_equal@plt+0x1baa9>
   28e23:	call   cd30 <__stack_chk_fail@plt>
   28e28:	nop    DWORD PTR [rax+rax*1+0x0]
   28e30:	push   r15
   28e32:	push   r14
   28e34:	mov    r14,rcx
   28e37:	push   r13
   28e39:	push   r12
   28e3b:	mov    r13,rsi
   28e3e:	push   rbp
   28e3f:	push   rbx
   28e40:	mov    rbp,rdi
   28e43:	mov    rbx,rdx
   28e46:	sub    rsp,0x38
   28e4a:	mov    edi,DWORD PTR [rip+0x25bc88]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   28e50:	mov    rax,QWORD PTR fs:0x28
   28e59:	mov    QWORD PTR [rsp+0x28],rax
   28e5e:	xor    eax,eax
   28e60:	lea    r12,[rsp+0x10]
   28e65:	test   edi,edi
   28e67:	jne    28ec8 <g_str_equal@plt+0x1bc08>
   28e69:	movsxd rax,DWORD PTR [rbx]
   28e6c:	sub    rsp,0x8
   28e70:	lea    r9,[rip+0x352ee]        # 5e165 <_fini@@Base+0xba11>
   28e77:	mov    rdx,r13
   28e7a:	mov    r8d,0x7fffffff
   28e80:	mov    rcx,0xffffffff80000000
   28e87:	mov    rsi,r12
   28e8a:	mov    rdi,rbp
   28e8d:	mov    QWORD PTR [rsp+0x18],rax
   28e92:	push   r14
   28e94:	call   27b00 <g_str_equal@plt+0x1a840>
   28e99:	mov    rax,QWORD PTR [rsp+0x20]
   28e9e:	mov    DWORD PTR [rbx],eax
   28ea0:	pop    rax
   28ea1:	pop    rdx
   28ea2:	mov    rax,QWORD PTR [rsp+0x28]
   28ea7:	xor    rax,QWORD PTR fs:0x28
   28eb0:	jne    28f23 <g_str_equal@plt+0x1bc63>
   28eb2:	add    rsp,0x38
   28eb6:	pop    rbx
   28eb7:	pop    rbp
   28eb8:	pop    r12
   28eba:	pop    r13
   28ebc:	pop    r14
   28ebe:	pop    r15
   28ec0:	ret    
   28ec1:	nop    DWORD PTR [rax+0x0]
   28ec8:	cmp    WORD PTR [rip+0x25e12e],0x0        # 286ffe <stdout@@GLIBC_2.2.5+0x26b6>
   28ed0:	je     28e69 <g_str_equal@plt+0x1bba9>
   28ed2:	test   BYTE PTR [rip+0x25cfc8],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   28ed9:	je     28e69 <g_str_equal@plt+0x1bba9>
   28edb:	xor    esi,esi
   28edd:	mov    rdi,r12
   28ee0:	call   c3e0 <gettimeofday@plt>
   28ee5:	mov    rcx,QWORD PTR [rsp+0x18]
   28eea:	mov    r15,QWORD PTR [rsp+0x10]
   28eef:	mov    QWORD PTR [rsp+0x8],rcx
   28ef4:	call   c5b0 <getpid@plt>
   28ef9:	sub    rsp,0x8
   28efd:	lea    rdi,[rip+0x3579c]        # 5e6a0 <_fini@@Base+0xbf4c>
   28f04:	mov    esi,eax
   28f06:	push   rbx
   28f07:	mov    rcx,QWORD PTR [rsp+0x18]
   28f0c:	mov    r9,r13
   28f0f:	mov    r8,rbp
   28f12:	mov    rdx,r15
   28f15:	xor    eax,eax
   28f17:	call   431a0 <g_str_equal@plt+0x35ee0>
   28f1c:	pop    rcx
   28f1d:	pop    rsi
   28f1e:	jmp    28e69 <g_str_equal@plt+0x1bba9>
   28f23:	call   cd30 <__stack_chk_fail@plt>
   28f28:	nop    DWORD PTR [rax+rax*1+0x0]
   28f30:	push   r15
   28f32:	push   r14
   28f34:	push   r13
   28f36:	push   r12
   28f38:	push   rbp
   28f39:	push   rbx
   28f3a:	sub    rsp,0x28
   28f3e:	mov    rax,QWORD PTR fs:0x28
   28f47:	mov    QWORD PTR [rsp+0x18],rax
   28f4c:	xor    eax,eax
   28f4e:	test   rdx,rdx
   28f51:	je     28ff3 <g_str_equal@plt+0x1bd33>
   28f57:	mov    r13,rcx
   28f5a:	mov    ecx,DWORD PTR [rip+0x25bb78]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   28f60:	mov    rbp,rdi
   28f63:	mov    r12,rsi
   28f66:	mov    rbx,rdx
   28f69:	test   ecx,ecx
   28f6b:	jne    28fa0 <g_str_equal@plt+0x1bce0>
   28f6d:	mov    rcx,r13
   28f70:	mov    rdx,rbx
   28f73:	mov    rsi,r12
   28f76:	mov    rdi,rbp
   28f79:	call   QWORD PTR [rbp+0x48]
   28f7c:	mov    rax,QWORD PTR [rsp+0x18]
   28f81:	xor    rax,QWORD PTR fs:0x28
   28f8a:	jne    29012 <g_str_equal@plt+0x1bd52>
   28f90:	add    rsp,0x28
   28f94:	pop    rbx
   28f95:	pop    rbp
   28f96:	pop    r12
   28f98:	pop    r13
   28f9a:	pop    r14
   28f9c:	pop    r15
   28f9e:	ret    
   28f9f:	nop
   28fa0:	cmp    WORD PTR [rip+0x25e054],0x0        # 286ffc <stdout@@GLIBC_2.2.5+0x26b4>
   28fa8:	je     28f6d <g_str_equal@plt+0x1bcad>
   28faa:	test   BYTE PTR [rip+0x25cef0],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   28fb1:	je     28f6d <g_str_equal@plt+0x1bcad>
   28fb3:	mov    rdi,rsp
   28fb6:	xor    esi,esi
   28fb8:	call   c3e0 <gettimeofday@plt>
   28fbd:	mov    r15,QWORD PTR [rsp+0x8]
   28fc2:	mov    r14,QWORD PTR [rsp]
   28fc6:	call   c5b0 <getpid@plt>
   28fcb:	sub    rsp,0x8
   28fcf:	lea    rdi,[rip+0x35702]        # 5e6d8 <_fini@@Base+0xbf84>
   28fd6:	mov    esi,eax
   28fd8:	push   rbx
   28fd9:	mov    rdx,r14
   28fdc:	mov    r9,r12
   28fdf:	mov    r8,rbp
   28fe2:	mov    rcx,r15
   28fe5:	xor    eax,eax
   28fe7:	call   431a0 <g_str_equal@plt+0x35ee0>
   28fec:	pop    rax
   28fed:	pop    rdx
   28fee:	jmp    28f6d <g_str_equal@plt+0x1bcad>
   28ff3:	lea    rcx,[rip+0x35966]        # 5e960 <_fini@@Base+0xc20c>
   28ffa:	lea    rsi,[rip+0x35197]        # 5e198 <_fini@@Base+0xba44>
   29001:	lea    rdi,[rip+0x35c36]        # 5ec3e <_fini@@Base+0xc4ea>
   29008:	mov    edx,0x108
   2900d:	call   c390 <__assert_fail@plt>
   29012:	call   cd30 <__stack_chk_fail@plt>
   29017:	nop    WORD PTR [rax+rax*1+0x0]
   29020:	push   r15
   29022:	push   r14
   29024:	push   r13
   29026:	push   r12
   29028:	push   rbp
   29029:	push   rbx
   2902a:	sub    rsp,0x28
   2902e:	mov    rax,QWORD PTR fs:0x28
   29037:	mov    QWORD PTR [rsp+0x18],rax
   2903c:	xor    eax,eax
   2903e:	test   rdx,rdx
   29041:	je     290fb <g_str_equal@plt+0x1be3b>
   29047:	mov    r13,rcx
   2904a:	mov    ecx,DWORD PTR [rip+0x25ba88]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   29050:	mov    rbx,rdi
   29053:	mov    r12,rsi
   29056:	mov    rbp,rdx
   29059:	test   ecx,ecx
   2905b:	jne    290a8 <g_str_equal@plt+0x1bde8>
   2905d:	mov    rax,QWORD PTR [rbx+0x58]
   29061:	mov    rcx,r13
   29064:	mov    rdx,rbp
   29067:	mov    rsi,r12
   2906a:	mov    rdi,rbx
   2906d:	test   rax,rax
   29070:	je     290a0 <g_str_equal@plt+0x1bde0>
   29072:	call   rax
   29074:	mov    rax,QWORD PTR [rsp+0x18]
   29079:	xor    rax,QWORD PTR fs:0x28
   29082:	jne    2911a <g_str_equal@plt+0x1be5a>
   29088:	add    rsp,0x28
   2908c:	pop    rbx
   2908d:	pop    rbp
   2908e:	pop    r12
   29090:	pop    r13
   29092:	pop    r14
   29094:	pop    r15
   29096:	ret    
   29097:	nop    WORD PTR [rax+rax*1+0x0]
   290a0:	call   QWORD PTR [rbx+0x50]
   290a3:	jmp    29074 <g_str_equal@plt+0x1bdb4>
   290a5:	nop    DWORD PTR [rax]
   290a8:	cmp    WORD PTR [rip+0x25df4a],0x0        # 286ffa <stdout@@GLIBC_2.2.5+0x26b2>
   290b0:	je     2905d <g_str_equal@plt+0x1bd9d>
   290b2:	test   BYTE PTR [rip+0x25cde8],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   290b9:	je     2905d <g_str_equal@plt+0x1bd9d>
   290bb:	mov    rdi,rsp
   290be:	xor    esi,esi
   290c0:	call   c3e0 <gettimeofday@plt>
   290c5:	mov    r15,QWORD PTR [rsp+0x8]
   290ca:	mov    r14,QWORD PTR [rsp]
   290ce:	call   c5b0 <getpid@plt>
   290d3:	sub    rsp,0x8
   290d7:	lea    rdi,[rip+0x35632]        # 5e710 <_fini@@Base+0xbfbc>
   290de:	mov    esi,eax
   290e0:	push   rbp
   290e1:	mov    rdx,r14
   290e4:	mov    r9,r12
   290e7:	mov    r8,rbx
   290ea:	mov    rcx,r15
   290ed:	xor    eax,eax
   290ef:	call   431a0 <g_str_equal@plt+0x35ee0>
   290f4:	pop    rax
   290f5:	pop    rdx
   290f6:	jmp    2905d <g_str_equal@plt+0x1bd9d>
   290fb:	lea    rcx,[rip+0x3584e]        # 5e950 <_fini@@Base+0xc1fc>
   29102:	lea    rsi,[rip+0x3508f]        # 5e198 <_fini@@Base+0xba44>
   29109:	lea    rdi,[rip+0x35b2e]        # 5ec3e <_fini@@Base+0xc4ea>
   29110:	mov    edx,0x110
   29115:	call   c390 <__assert_fail@plt>
   2911a:	call   cd30 <__stack_chk_fail@plt>
   2911f:	nop
   29120:	push   r15
   29122:	push   r14
   29124:	push   r13
   29126:	push   r12
   29128:	push   rbp
   29129:	push   rbx
   2912a:	sub    rsp,0x28
   2912e:	mov    rax,QWORD PTR fs:0x28
   29137:	mov    QWORD PTR [rsp+0x18],rax
   2913c:	xor    eax,eax
   2913e:	test   rdx,rdx
   29141:	je     291e3 <g_str_equal@plt+0x1bf23>
   29147:	mov    r13,rcx
   2914a:	mov    ecx,DWORD PTR [rip+0x25b988]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   29150:	mov    rbp,rdi
   29153:	mov    r12,rsi
   29156:	mov    rbx,rdx
   29159:	test   ecx,ecx
   2915b:	jne    29190 <g_str_equal@plt+0x1bed0>
   2915d:	mov    rcx,r13
   29160:	mov    rdx,rbx
   29163:	mov    rsi,r12
   29166:	mov    rdi,rbp
   29169:	call   QWORD PTR [rbp+0x60]
   2916c:	mov    rax,QWORD PTR [rsp+0x18]
   29171:	xor    rax,QWORD PTR fs:0x28
   2917a:	jne    29202 <g_str_equal@plt+0x1bf42>
   29180:	add    rsp,0x28
   29184:	pop    rbx
   29185:	pop    rbp
   29186:	pop    r12
   29188:	pop    r13
   2918a:	pop    r14
   2918c:	pop    r15
   2918e:	ret    
   2918f:	nop
   29190:	cmp    WORD PTR [rip+0x25de60],0x0        # 286ff8 <stdout@@GLIBC_2.2.5+0x26b0>
   29198:	je     2915d <g_str_equal@plt+0x1be9d>
   2919a:	test   BYTE PTR [rip+0x25cd00],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   291a1:	je     2915d <g_str_equal@plt+0x1be9d>
   291a3:	mov    rdi,rsp
   291a6:	xor    esi,esi
   291a8:	call   c3e0 <gettimeofday@plt>
   291ad:	mov    r15,QWORD PTR [rsp+0x8]
   291b2:	mov    r14,QWORD PTR [rsp]
   291b6:	call   c5b0 <getpid@plt>
   291bb:	sub    rsp,0x8
   291bf:	lea    rdi,[rip+0x35582]        # 5e748 <_fini@@Base+0xbff4>
   291c6:	mov    esi,eax
   291c8:	push   rbx
   291c9:	mov    rdx,r14
   291cc:	mov    r9,r12
   291cf:	mov    r8,rbp
   291d2:	mov    rcx,r15
   291d5:	xor    eax,eax
   291d7:	call   431a0 <g_str_equal@plt+0x35ee0>
   291dc:	pop    rax
   291dd:	pop    rdx
   291de:	jmp    2915d <g_str_equal@plt+0x1be9d>
   291e3:	lea    rcx,[rip+0x35756]        # 5e940 <_fini@@Base+0xc1ec>
   291ea:	lea    rsi,[rip+0x34fa7]        # 5e198 <_fini@@Base+0xba44>
   291f1:	lea    rdi,[rip+0x35a46]        # 5ec3e <_fini@@Base+0xc4ea>
   291f8:	mov    edx,0x11b
   291fd:	call   c390 <__assert_fail@plt>
   29202:	call   cd30 <__stack_chk_fail@plt>
   29207:	nop    WORD PTR [rax+rax*1+0x0]
   29210:	push   r15
   29212:	push   r14
   29214:	push   r13
   29216:	push   r12
   29218:	push   rbp
   29219:	push   rbx
   2921a:	sub    rsp,0x38
   2921e:	mov    rax,QWORD PTR fs:0x28
   29227:	mov    QWORD PTR [rsp+0x28],rax
   2922c:	xor    eax,eax
   2922e:	test   rdx,rdx
   29231:	mov    QWORD PTR [rsp+0x8],0x0
   2923a:	je     29316 <g_str_equal@plt+0x1c056>
   29240:	mov    r13,rcx
   29243:	mov    ecx,DWORD PTR [rip+0x25b88f]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   29249:	mov    rbx,rdi
   2924c:	mov    r12,rsi
   2924f:	mov    rbp,rdx
   29252:	test   ecx,ecx
   29254:	jne    292c0 <g_str_equal@plt+0x1c000>
   29256:	mov    rsi,r12
   29259:	lea    rcx,[rsp+0x8]
   2925e:	mov    rdx,rbp
   29261:	mov    rdi,rbx
   29264:	call   QWORD PTR [rbx+0x68]
   29267:	test   BYTE PTR [rbx+0x90],0x1
   2926e:	mov    rsi,QWORD PTR [rsp+0x8]
   29273:	je     2928b <g_str_equal@plt+0x1bfcb>
   29275:	test   rsi,rsi
   29278:	sete   dl
   2927b:	cmp    QWORD PTR [rbp+0x0],0x0
   29280:	sete   al
   29283:	cmp    dl,al
   29285:	je     2933a <g_str_equal@plt+0x1c07a>
   2928b:	mov    rdi,r13
   2928e:	call   3a4c0 <g_str_equal@plt+0x2d200>
   29293:	mov    rax,QWORD PTR [rsp+0x28]
   29298:	xor    rax,QWORD PTR fs:0x28
   292a1:	jne    29335 <g_str_equal@plt+0x1c075>
   292a7:	add    rsp,0x38
   292ab:	pop    rbx
   292ac:	pop    rbp
   292ad:	pop    r12
   292af:	pop    r13
   292b1:	pop    r14
   292b3:	pop    r15
   292b5:	ret    
   292b6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   292c0:	cmp    WORD PTR [rip+0x25dd2e],0x0        # 286ff6 <stdout@@GLIBC_2.2.5+0x26ae>
   292c8:	je     29256 <g_str_equal@plt+0x1bf96>
   292ca:	test   BYTE PTR [rip+0x25cbd0],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   292d1:	je     29256 <g_str_equal@plt+0x1bf96>
   292d3:	lea    rdi,[rsp+0x10]
   292d8:	xor    esi,esi
   292da:	call   c3e0 <gettimeofday@plt>
   292df:	mov    r15,QWORD PTR [rsp+0x18]
   292e4:	mov    r14,QWORD PTR [rsp+0x10]
   292e9:	call   c5b0 <getpid@plt>
   292ee:	sub    rsp,0x8
   292f2:	lea    rdi,[rip+0x35487]        # 5e780 <_fini@@Base+0xc02c>
   292f9:	mov    esi,eax
   292fb:	push   rbp
   292fc:	mov    rdx,r14
   292ff:	mov    r9,r12
   29302:	mov    r8,rbx
   29305:	mov    rcx,r15
   29308:	xor    eax,eax
   2930a:	call   431a0 <g_str_equal@plt+0x35ee0>
   2930f:	pop    rax
   29310:	pop    rdx
   29311:	jmp    29256 <g_str_equal@plt+0x1bf96>
   29316:	lea    rcx,[rip+0x3560b]        # 5e928 <_fini@@Base+0xc1d4>
   2931d:	lea    rsi,[rip+0x34e74]        # 5e198 <_fini@@Base+0xba44>
   29324:	lea    rdi,[rip+0x35913]        # 5ec3e <_fini@@Base+0xc4ea>
   2932b:	mov    edx,0x124
   29330:	call   c390 <__assert_fail@plt>
   29335:	call   cd30 <__stack_chk_fail@plt>
   2933a:	lea    rcx,[rip+0x355e7]        # 5e928 <_fini@@Base+0xc1d4>
   29341:	lea    rsi,[rip+0x34e50]        # 5e198 <_fini@@Base+0xba44>
   29348:	lea    rdi,[rip+0x34de6]        # 5e135 <_fini@@Base+0xb9e1>
   2934f:	mov    edx,0x12c
   29354:	call   c390 <__assert_fail@plt>
   29359:	nop    DWORD PTR [rax+0x0]
   29360:	push   r15
   29362:	push   r14
   29364:	push   r13
   29366:	push   r12
   29368:	push   rbp
   29369:	push   rbx
   2936a:	sub    rsp,0x28
   2936e:	mov    rax,QWORD PTR fs:0x28
   29377:	mov    QWORD PTR [rsp+0x18],rax
   2937c:	xor    eax,eax
   2937e:	test   rdx,rdx
   29381:	je     29423 <g_str_equal@plt+0x1c163>
   29387:	mov    r13,rcx
   2938a:	mov    ecx,DWORD PTR [rip+0x25b748]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   29390:	mov    rbp,rdi
   29393:	mov    r12,rsi
   29396:	mov    rbx,rdx
   29399:	test   ecx,ecx
   2939b:	jne    293d0 <g_str_equal@plt+0x1c110>
   2939d:	mov    rcx,r13
   293a0:	mov    rdx,rbx
   293a3:	mov    rsi,r12
   293a6:	mov    rdi,rbp
   293a9:	call   QWORD PTR [rbp+0x70]
   293ac:	mov    rax,QWORD PTR [rsp+0x18]
   293b1:	xor    rax,QWORD PTR fs:0x28
   293ba:	jne    29442 <g_str_equal@plt+0x1c182>
   293c0:	add    rsp,0x28
   293c4:	pop    rbx
   293c5:	pop    rbp
   293c6:	pop    r12
   293c8:	pop    r13
   293ca:	pop    r14
   293cc:	pop    r15
   293ce:	ret    
   293cf:	nop
   293d0:	cmp    WORD PTR [rip+0x25dc1c],0x0        # 286ff4 <stdout@@GLIBC_2.2.5+0x26ac>
   293d8:	je     2939d <g_str_equal@plt+0x1c0dd>
   293da:	test   BYTE PTR [rip+0x25cac0],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   293e1:	je     2939d <g_str_equal@plt+0x1c0dd>
   293e3:	mov    rdi,rsp
   293e6:	xor    esi,esi
   293e8:	call   c3e0 <gettimeofday@plt>
   293ed:	mov    r15,QWORD PTR [rsp+0x8]
   293f2:	mov    r14,QWORD PTR [rsp]
   293f6:	call   c5b0 <getpid@plt>
   293fb:	sub    rsp,0x8
   293ff:	lea    rdi,[rip+0x353b2]        # 5e7b8 <_fini@@Base+0xc064>
   29406:	mov    esi,eax
   29408:	push   rbx
   29409:	mov    rdx,r14
   2940c:	mov    r9,r12
   2940f:	mov    r8,rbp
   29412:	mov    rcx,r15
   29415:	xor    eax,eax
   29417:	call   431a0 <g_str_equal@plt+0x35ee0>
   2941c:	pop    rax
   2941d:	pop    rdx
   2941e:	jmp    2939d <g_str_equal@plt+0x1c0dd>
   29423:	lea    rcx,[rip+0x354e6]        # 5e910 <_fini@@Base+0xc1bc>
   2942a:	lea    rsi,[rip+0x34d67]        # 5e198 <_fini@@Base+0xba44>
   29431:	lea    rdi,[rip+0x35806]        # 5ec3e <_fini@@Base+0xc4ea>
   29438:	mov    edx,0x134
   2943d:	call   c390 <__assert_fail@plt>
   29442:	call   cd30 <__stack_chk_fail@plt>
   29447:	nop    WORD PTR [rax+rax*1+0x0]
   29450:	push   r15
   29452:	push   r14
   29454:	push   r13
   29456:	push   r12
   29458:	push   rbp
   29459:	push   rbx
   2945a:	sub    rsp,0x38
   2945e:	mov    rax,QWORD PTR fs:0x28
   29467:	mov    QWORD PTR [rsp+0x28],rax
   2946c:	xor    eax,eax
   2946e:	test   rdx,rdx
   29471:	mov    QWORD PTR [rsp+0x8],0x0
   2947a:	je     29566 <g_str_equal@plt+0x1c2a6>
   29480:	cmp    DWORD PTR [rdi+0x90],0x2
   29487:	mov    rbx,rdi
   2948a:	mov    r12,rsi
   2948d:	mov    rbp,rdx
   29490:	mov    r13,rcx
   29493:	jne    2949f <g_str_equal@plt+0x1c1df>
   29495:	cmp    QWORD PTR [rdx],0x0
   29499:	je     2958a <g_str_equal@plt+0x1c2ca>
   2949f:	mov    ecx,DWORD PTR [rip+0x25b633]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   294a5:	test   ecx,ecx
   294a7:	jne    29510 <g_str_equal@plt+0x1c250>
   294a9:	mov    rsi,r12
   294ac:	lea    rcx,[rsp+0x8]
   294b1:	mov    rdx,rbp
   294b4:	mov    rdi,rbx
   294b7:	call   QWORD PTR [rbx+0x78]
   294ba:	cmp    DWORD PTR [rbx+0x90],0x1
   294c1:	mov    rsi,QWORD PTR [rsp+0x8]
   294c6:	jne    294de <g_str_equal@plt+0x1c21e>
   294c8:	test   rsi,rsi
   294cb:	sete   dl
   294ce:	cmp    QWORD PTR [rbp+0x0],0x0
   294d3:	sete   al
   294d6:	cmp    dl,al
   294d8:	je     295a9 <g_str_equal@plt+0x1c2e9>
   294de:	mov    rdi,r13
   294e1:	call   3a4c0 <g_str_equal@plt+0x2d200>
   294e6:	mov    rax,QWORD PTR [rsp+0x28]
   294eb:	xor    rax,QWORD PTR fs:0x28
   294f4:	jne    29585 <g_str_equal@plt+0x1c2c5>
   294fa:	add    rsp,0x38
   294fe:	pop    rbx
   294ff:	pop    rbp
   29500:	pop    r12
   29502:	pop    r13
   29504:	pop    r14
   29506:	pop    r15
   29508:	ret    
   29509:	nop    DWORD PTR [rax+0x0]
   29510:	cmp    WORD PTR [rip+0x25dada],0x0        # 286ff2 <stdout@@GLIBC_2.2.5+0x26aa>
   29518:	je     294a9 <g_str_equal@plt+0x1c1e9>
   2951a:	test   BYTE PTR [rip+0x25c980],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   29521:	je     294a9 <g_str_equal@plt+0x1c1e9>
   29523:	lea    rdi,[rsp+0x10]
   29528:	xor    esi,esi
   2952a:	call   c3e0 <gettimeofday@plt>
   2952f:	mov    r15,QWORD PTR [rsp+0x18]
   29534:	mov    r14,QWORD PTR [rsp+0x10]
   29539:	call   c5b0 <getpid@plt>
   2953e:	sub    rsp,0x8
   29542:	lea    rdi,[rip+0x352cf]        # 5e818 <_fini@@Base+0xc0c4>
   29549:	mov    esi,eax
   2954b:	push   rbp
   2954c:	mov    rdx,r14
   2954f:	mov    r9,r12
   29552:	mov    r8,rbx
   29555:	mov    rcx,r15
   29558:	xor    eax,eax
   2955a:	call   431a0 <g_str_equal@plt+0x35ee0>
   2955f:	pop    rax
   29560:	pop    rdx
   29561:	jmp    294a9 <g_str_equal@plt+0x1c1e9>
   29566:	lea    rcx,[rip+0x35393]        # 5e900 <_fini@@Base+0xc1ac>
   2956d:	lea    rsi,[rip+0x34c24]        # 5e198 <_fini@@Base+0xba44>
   29574:	lea    rdi,[rip+0x356c3]        # 5ec3e <_fini@@Base+0xc4ea>
   2957b:	mov    edx,0x13d
   29580:	call   c390 <__assert_fail@plt>
   29585:	call   cd30 <__stack_chk_fail@plt>
   2958a:	lea    rcx,[rip+0x3536f]        # 5e900 <_fini@@Base+0xc1ac>
   29591:	lea    rsi,[rip+0x34c00]        # 5e198 <_fini@@Base+0xba44>
   29598:	lea    rdi,[rip+0x35251]        # 5e7f0 <_fini@@Base+0xc09c>
   2959f:	mov    edx,0x13e
   295a4:	call   c390 <__assert_fail@plt>
   295a9:	lea    rcx,[rip+0x35350]        # 5e900 <_fini@@Base+0xc1ac>
   295b0:	lea    rsi,[rip+0x34be1]        # 5e198 <_fini@@Base+0xba44>
   295b7:	lea    rdi,[rip+0x34b77]        # 5e135 <_fini@@Base+0xb9e1>
   295be:	mov    edx,0x142
   295c3:	call   c390 <__assert_fail@plt>
   295c8:	nop    DWORD PTR [rax+rax*1+0x0]
   295d0:	push   r15
   295d2:	push   r14
   295d4:	push   r13
   295d6:	push   r12
   295d8:	mov    r13,rcx
   295db:	push   rbp
   295dc:	push   rbx
   295dd:	mov    rbp,rsi
   295e0:	mov    rbx,rdi
   295e3:	mov    r12,rdx
   295e6:	sub    rsp,0x28
   295ea:	mov    ecx,DWORD PTR [rip+0x25b4e8]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   295f0:	mov    rax,QWORD PTR fs:0x28
   295f9:	mov    QWORD PTR [rsp+0x18],rax
   295fe:	xor    eax,eax
   29600:	test   ecx,ecx
   29602:	jne    29638 <g_str_equal@plt+0x1c378>
   29604:	mov    rcx,r13
   29607:	mov    rdx,r12
   2960a:	mov    rsi,rbp
   2960d:	mov    rdi,rbx
   29610:	call   QWORD PTR [rbx+0x80]
   29616:	mov    rax,QWORD PTR [rsp+0x18]
   2961b:	xor    rax,QWORD PTR fs:0x28
   29624:	jne    2968c <g_str_equal@plt+0x1c3cc>
   29626:	add    rsp,0x28
   2962a:	pop    rbx
   2962b:	pop    rbp
   2962c:	pop    r12
   2962e:	pop    r13
   29630:	pop    r14
   29632:	pop    r15
   29634:	ret    
   29635:	nop    DWORD PTR [rax]
   29638:	cmp    WORD PTR [rip+0x25d9b0],0x0        # 286ff0 <stdout@@GLIBC_2.2.5+0x26a8>
   29640:	je     29604 <g_str_equal@plt+0x1c344>
   29642:	test   BYTE PTR [rip+0x25c858],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   29649:	je     29604 <g_str_equal@plt+0x1c344>
   2964b:	mov    rdi,rsp
   2964e:	xor    esi,esi
   29650:	call   c3e0 <gettimeofday@plt>
   29655:	mov    r15,QWORD PTR [rsp+0x8]
   2965a:	mov    r14,QWORD PTR [rsp]
   2965e:	call   c5b0 <getpid@plt>
   29663:	sub    rsp,0x8
   29667:	lea    rdi,[rip+0x351e2]        # 5e850 <_fini@@Base+0xc0fc>
   2966e:	mov    esi,eax
   29670:	push   r12
   29672:	mov    rdx,r14
   29675:	mov    r9,rbp
   29678:	mov    r8,rbx
   2967b:	mov    rcx,r15
   2967e:	xor    eax,eax
   29680:	call   431a0 <g_str_equal@plt+0x35ee0>
   29685:	pop    rax
   29686:	pop    rdx
   29687:	jmp    29604 <g_str_equal@plt+0x1c344>
   2968c:	call   cd30 <__stack_chk_fail@plt>
   29691:	nop    DWORD PTR [rax+rax*1+0x0]
   29696:	nop    WORD PTR cs:[rax+rax*1+0x0]
   296a0:	push   r15
   296a2:	push   r14
   296a4:	push   r13
   296a6:	push   r12
   296a8:	push   rbp
   296a9:	push   rbx
   296aa:	sub    rsp,0x48
   296ae:	mov    rax,QWORD PTR fs:0x28
   296b7:	mov    QWORD PTR [rsp+0x38],rax
   296bc:	xor    eax,eax
   296be:	test   rdx,rdx
   296c1:	je     29898 <g_str_equal@plt+0x1c5d8>
   296c7:	test   rcx,rcx
   296ca:	mov    r12,rcx
   296cd:	je     29898 <g_str_equal@plt+0x1c5d8>
   296d3:	mov    ecx,DWORD PTR [rip+0x25b3ff]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   296d9:	mov    rbx,rdi
   296dc:	mov    r13,rsi
   296df:	mov    rbp,rdx
   296e2:	mov    r14,r8
   296e5:	test   ecx,ecx
   296e7:	jne    297c8 <g_str_equal@plt+0x1c508>
   296ed:	mov    eax,DWORD PTR [rbx+0x90]
   296f3:	cmp    eax,0x1
   296f6:	je     29768 <g_str_equal@plt+0x1c4a8>
   296f8:	cmp    eax,0x2
   296fb:	jne    29741 <g_str_equal@plt+0x1c481>
   296fd:	mov    esi,DWORD PTR [rbp+0x0]
   29700:	test   esi,esi
   29702:	js     2970f <g_str_equal@plt+0x1c44f>
   29704:	cmp    esi,DWORD PTR [r12+0x8]
   29709:	jl     297a0 <g_str_equal@plt+0x1c4e0>
   2970f:	lea    r9,[rip+0x31391]        # 5aaa7 <_fini@@Base+0x8353>
   29716:	test   r13,r13
   29719:	lea    r8,[rip+0x34a5b]        # 5e17b <_fini@@Base+0xba27>
   29720:	lea    rcx,[rip+0x35199]        # 5e8c0 <_fini@@Base+0xc16c>
   29727:	lea    rsi,[rip+0x34a6a]        # 5e198 <_fini@@Base+0xba44>
   2972e:	mov    edx,0x159
   29733:	cmovne r9,r13
   29737:	mov    rdi,r14
   2973a:	xor    eax,eax
   2973c:	call   3a090 <g_str_equal@plt+0x2cdd0>
   29741:	mov    rax,QWORD PTR [rsp+0x38]
   29746:	xor    rax,QWORD PTR fs:0x28
   2974f:	jne    298b7 <g_str_equal@plt+0x1c5f7>
   29755:	add    rsp,0x48
   29759:	pop    rbx
   2975a:	pop    rbp
   2975b:	pop    r12
   2975d:	pop    r13
   2975f:	pop    r14
   29761:	pop    r15
   29763:	ret    
   29764:	nop    DWORD PTR [rax+0x0]
   29768:	lea    rcx,[rsp+0x18]
   2976d:	lea    rdx,[rsp+0x20]
   29772:	mov    rsi,r13
   29775:	mov    rdi,rbx
   29778:	mov    QWORD PTR [rsp+0x18],0x0
   29781:	call   29210 <g_str_equal@plt+0x1bf50>
   29786:	mov    rsi,QWORD PTR [rsp+0x18]
   2978b:	test   rsi,rsi
   2978e:	je     29830 <g_str_equal@plt+0x1c570>
   29794:	mov    rdi,r14
   29797:	call   3a4c0 <g_str_equal@plt+0x2d200>
   2979c:	jmp    29741 <g_str_equal@plt+0x1c481>
   2979e:	xchg   ax,ax
   297a0:	mov    rdi,r12
   297a3:	call   2df50 <g_str_equal@plt+0x20c90>
   297a8:	lea    rdx,[rsp+0x20]
   297ad:	mov    rcx,r14
   297b0:	mov    rsi,r13
   297b3:	mov    rdi,rbx
   297b6:	mov    QWORD PTR [rsp+0x20],rax
   297bb:	call   29210 <g_str_equal@plt+0x1bf50>
   297c0:	jmp    29741 <g_str_equal@plt+0x1c481>
   297c5:	nop    DWORD PTR [rax]
   297c8:	cmp    WORD PTR [rip+0x25d83e],0x0        # 28700e <stdout@@GLIBC_2.2.5+0x26c6>
   297d0:	je     296ed <g_str_equal@plt+0x1c42d>
   297d6:	test   BYTE PTR [rip+0x25c6c4],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   297dd:	je     296ed <g_str_equal@plt+0x1c42d>
   297e3:	lea    rdi,[rsp+0x20]
   297e8:	xor    esi,esi
   297ea:	call   c3e0 <gettimeofday@plt>
   297ef:	mov    rcx,QWORD PTR [rsp+0x28]
   297f4:	mov    r15,QWORD PTR [rsp+0x20]
   297f9:	mov    QWORD PTR [rsp+0x8],rcx
   297fe:	call   c5b0 <getpid@plt>
   29803:	sub    rsp,0x8
   29807:	lea    rdi,[rip+0x3507a]        # 5e888 <_fini@@Base+0xc134>
   2980e:	mov    rdx,r15
   29811:	push   rbp
   29812:	mov    rcx,QWORD PTR [rsp+0x18]
   29817:	mov    esi,eax
   29819:	mov    r9,r13
   2981c:	mov    r8,rbx
   2981f:	xor    eax,eax
   29821:	call   431a0 <g_str_equal@plt+0x35ee0>
   29826:	pop    rax
   29827:	pop    rdx
   29828:	jmp    296ed <g_str_equal@plt+0x1c42d>
   2982d:	nop    DWORD PTR [rax]
   29830:	mov    rsi,QWORD PTR [rsp+0x20]
   29835:	xor    ecx,ecx
   29837:	mov    edx,0xffffffff
   2983c:	mov    rdi,r12
   2983f:	call   2df90 <g_str_equal@plt+0x20cd0>
   29844:	test   eax,eax
   29846:	mov    ebx,eax
   29848:	js     29860 <g_str_equal@plt+0x1c5a0>
   2984a:	mov    rdi,QWORD PTR [rsp+0x20]
   2984f:	call   d2b0 <g_free@plt>
   29854:	mov    DWORD PTR [rbp+0x0],ebx
   29857:	jmp    29741 <g_str_equal@plt+0x1c481>
   2985c:	nop    DWORD PTR [rax+0x0]
   29860:	mov    r9,QWORD PTR [rsp+0x20]
   29865:	lea    r8,[rip+0x3490f]        # 5e17b <_fini@@Base+0xba27>
   2986c:	lea    rcx,[rip+0x3506d]        # 5e8e0 <_fini@@Base+0xc18c>
   29873:	lea    rsi,[rip+0x3491e]        # 5e198 <_fini@@Base+0xba44>
   2987a:	mov    rdi,r14
   2987d:	mov    edx,0x170
   29882:	xor    eax,eax
   29884:	call   3a090 <g_str_equal@plt+0x2cdd0>
   29889:	mov    rdi,QWORD PTR [rsp+0x20]
   2988e:	call   d2b0 <g_free@plt>
   29893:	jmp    29741 <g_str_equal@plt+0x1c481>
   29898:	lea    rcx,[rip+0x35051]        # 5e8f0 <_fini@@Base+0xc19c>
   2989f:	lea    rsi,[rip+0x348f2]        # 5e198 <_fini@@Base+0xba44>
   298a6:	lea    rdi,[rip+0x348c0]        # 5e16d <_fini@@Base+0xba19>
   298ad:	mov    edx,0x17c
   298b2:	call   c390 <__assert_fail@plt>
   298b7:	call   cd30 <__stack_chk_fail@plt>
   298bc:	nop    DWORD PTR [rax+0x0]
   298c0:	repz ret 
   298c2:	nop    DWORD PTR [rax+0x0]
   298c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   298d0:	repz ret 
   298d2:	nop    DWORD PTR [rax+0x0]
   298d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   298e0:	repz ret 
   298e2:	nop    DWORD PTR [rax+0x0]
   298e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   298f0:	jmp    d2b0 <g_free@plt>
   298f5:	nop
   298f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   29900:	test   rdx,rdx
   29903:	je     29910 <g_str_equal@plt+0x1c650>
   29905:	mov    rdi,QWORD PTR [rdx]
   29908:	jmp    d2b0 <g_free@plt>
   2990d:	nop    DWORD PTR [rax]
   29910:	repz ret 
   29912:	nop    DWORD PTR [rax+0x0]
   29916:	nop    WORD PTR cs:[rax+rax*1+0x0]
   29920:	push   rbx
   29921:	mov    rbx,QWORD PTR [rsi]
   29924:	mov    rdi,rsi
   29927:	call   d2b0 <g_free@plt>
   2992c:	mov    rax,rbx
   2992f:	pop    rbx
   29930:	ret    
   29931:	nop    DWORD PTR [rax+rax*1+0x0]
   29936:	nop    WORD PTR cs:[rax+rax*1+0x0]
   29940:	test   rsi,rsi
   29943:	je     29950 <g_str_equal@plt+0x1c690>
   29945:	mov    rdi,QWORD PTR [rsi]
   29948:	jmp    d2b0 <g_free@plt>
   2994d:	nop    DWORD PTR [rax]
   29950:	repz ret 
   29952:	nop    DWORD PTR [rax+0x0]
   29956:	nop    WORD PTR cs:[rax+rax*1+0x0]
   29960:	jmp    29940 <g_str_equal@plt+0x1c680>
   29962:	nop    DWORD PTR [rax+0x0]
   29966:	nop    WORD PTR cs:[rax+rax*1+0x0]
   29970:	test   rdx,rdx
   29973:	je     29993 <g_str_equal@plt+0x1c6d3>
   29975:	mov    rdi,QWORD PTR [rdx]
   29978:	test   rdi,rdi
   2997b:	je     29993 <g_str_equal@plt+0x1c6d3>
   2997d:	mov    rax,QWORD PTR [rdi+0x8]
   29981:	test   rax,rax
   29984:	je     2999d <g_str_equal@plt+0x1c6dd>
   29986:	sub    rax,0x1
   2998a:	test   rax,rax
   2998d:	mov    QWORD PTR [rdi+0x8],rax
   29991:	je     29998 <g_str_equal@plt+0x1c6d8>
   29993:	repz ret 
   29995:	nop    DWORD PTR [rax]
   29998:	jmp    30300 <g_str_equal@plt+0x23040>
   2999d:	sub    rsp,0x8
   299a1:	call   d316 <g_str_equal@plt+0x56>
   299a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   299b0:	repz ret 
   299b2:	nop    DWORD PTR [rax+0x0]
   299b6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   299c0:	repz ret 
   299c2:	nop    DWORD PTR [rax+0x0]
   299c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   299d0:	repz ret 
   299d2:	nop    DWORD PTR [rax+0x0]
   299d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   299e0:	repz ret 
   299e2:	nop    DWORD PTR [rax+0x0]
   299e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   299f0:	repz ret 
   299f2:	nop    DWORD PTR [rax+0x0]
   299f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   29a00:	test   rdx,rdx
   29a03:	je     29a23 <g_str_equal@plt+0x1c763>
   29a05:	mov    rdi,QWORD PTR [rdx]
   29a08:	test   rdi,rdi
   29a0b:	je     29a23 <g_str_equal@plt+0x1c763>
   29a0d:	mov    rax,QWORD PTR [rdi+0x8]
   29a11:	test   rax,rax
   29a14:	je     29a2d <g_str_equal@plt+0x1c76d>
   29a16:	sub    rax,0x1
   29a1a:	test   rax,rax
   29a1d:	mov    QWORD PTR [rdi+0x8],rax
   29a21:	je     29a28 <g_str_equal@plt+0x1c768>
   29a23:	repz ret 
   29a25:	nop    DWORD PTR [rax]
   29a28:	jmp    30300 <g_str_equal@plt+0x23040>
   29a2d:	sub    rsp,0x8
   29a31:	call   d316 <g_str_equal@plt+0x56>
   29a36:	nop    WORD PTR cs:[rax+rax*1+0x0]
   29a40:	sub    rsp,0x8
   29a44:	mov    edi,0xa8
   29a49:	call   ce00 <g_malloc0@plt>
   29a4e:	lea    rdx,[rip+0xfffffffffffffe6b]        # 298c0 <g_str_equal@plt+0x1c600>
   29a55:	lea    rcx,[rip+0xfffffffffffffee4]        # 29940 <g_str_equal@plt+0x1c680>
   29a5c:	lea    rsi,[rip+0xffffffffffffff5d]        # 299c0 <g_str_equal@plt+0x1c700>
   29a63:	lea    rdi,[rip+0xfffffffffffffef6]        # 29960 <g_str_equal@plt+0x1c6a0>
   29a6a:	mov    DWORD PTR [rax+0x90],0x4
   29a74:	mov    QWORD PTR [rax],rdx
   29a77:	mov    QWORD PTR [rax+0x10],rcx
   29a7b:	lea    rdx,[rip+0xffffffffffffff4e]        # 299d0 <g_str_equal@plt+0x1c710>
   29a82:	mov    QWORD PTR [rax+0x38],rsi
   29a86:	lea    rcx,[rip+0xfffffffffffffe93]        # 29920 <g_str_equal@plt+0x1c660>
   29a8d:	lea    rsi,[rip+0xfffffffffffffe3c]        # 298d0 <g_str_equal@plt+0x1c610>
   29a94:	mov    QWORD PTR [rax+0x40],rdi
   29a98:	mov    QWORD PTR [rax+0x18],rdx
   29a9c:	lea    rdi,[rip+0xfffffffffffffe3d]        # 298e0 <g_str_equal@plt+0x1c620>
   29aa3:	mov    QWORD PTR [rax+0x20],rcx
   29aa7:	mov    QWORD PTR [rax+0x30],rsi
   29aab:	lea    rdx,[rip+0xfffffffffffffefe]        # 299b0 <g_str_equal@plt+0x1c6f0>
   29ab2:	lea    rcx,[rip+0xffffffffffffff27]        # 299e0 <g_str_equal@plt+0x1c720>
   29ab9:	lea    rsi,[rip+0xfffffffffffffe40]        # 29900 <g_str_equal@plt+0x1c640>
   29ac0:	mov    QWORD PTR [rax+0x48],rdi
   29ac4:	mov    QWORD PTR [rax+0x50],rdx
   29ac8:	lea    rdi,[rip+0xffffffffffffff21]        # 299f0 <g_str_equal@plt+0x1c730>
   29acf:	lea    rdx,[rip+0xffffffffffffff2a]        # 29a00 <g_str_equal@plt+0x1c740>
   29ad6:	mov    QWORD PTR [rax+0x60],rcx
   29ada:	mov    QWORD PTR [rax+0x68],rsi
   29ade:	lea    rcx,[rip+0xfffffffffffffe8b]        # 29970 <g_str_equal@plt+0x1c6b0>
   29ae5:	lea    rsi,[rip+0xfffffffffffffe04]        # 298f0 <g_str_equal@plt+0x1c630>
   29aec:	mov    QWORD PTR [rax+0x70],rdi
   29af0:	mov    QWORD PTR [rax+0x78],rdx
   29af4:	mov    QWORD PTR [rax+0x80],rcx
   29afb:	mov    QWORD PTR [rax+0xa0],rsi
   29b02:	add    rsp,0x8
   29b06:	ret    
   29b07:	nop    WORD PTR [rax+rax*1+0x0]
   29b10:	mov    rsi,rdi
   29b13:	mov    rdi,rdx
   29b16:	xor    edx,edx
   29b18:	jmp    c420 <g_hash_table_insert@plt>
   29b1d:	nop    DWORD PTR [rax]
   29b20:	lea    rcx,[rip+0x35519]        # 5f040 <_fini@@Base+0xc8ec>
   29b27:	lea    rsi,[rip+0x33b6a]        # 5d698 <_fini@@Base+0xaf44>
   29b2e:	lea    rdi,[rip+0x33bab]        # 5d6e0 <_fini@@Base+0xaf8c>
   29b35:	sub    rsp,0x8
   29b39:	mov    edx,0x7f
   29b3e:	call   c390 <__assert_fail@plt>
   29b43:	nop    DWORD PTR [rax]
   29b46:	nop    WORD PTR cs:[rax+rax*1+0x0]
   29b50:	push   r12
   29b52:	push   rbp
   29b53:	push   rbx
   29b54:	sub    rsp,0x10
   29b58:	mov    rbx,QWORD PTR [rdi+0xb8]
   29b5f:	test   rbx,rbx
   29b62:	je     29c30 <g_str_equal@plt+0x1c970>
   29b68:	mov    rdi,QWORD PTR [rbx+0x8]
   29b6c:	test   rdi,rdi
   29b6f:	je     29c6f <g_str_equal@plt+0x1c9af>
   29b75:	mov    eax,DWORD PTR [rdi]
   29b77:	lea    ecx,[rax-0x1]
   29b7a:	cmp    ecx,0x5
   29b7d:	ja     29c8e <g_str_equal@plt+0x1c9ce>
   29b83:	cmp    eax,0x4
   29b86:	mov    r12,rsi
   29b89:	je     29bd0 <g_str_equal@plt+0x1c910>
   29b8b:	cmp    eax,0x5
   29b8e:	jne    29cb2 <g_str_equal@plt+0x1c9f2>
   29b94:	test   rsi,rsi
   29b97:	jne    29c93 <g_str_equal@plt+0x1c9d3>
   29b9d:	mov    rax,QWORD PTR [rbx+0x20]
   29ba1:	test   rax,rax
   29ba4:	je     29c60 <g_str_equal@plt+0x1c9a0>
   29baa:	test   dl,dl
   29bac:	mov    rbp,QWORD PTR [rax]
   29baf:	je     29bbd <g_str_equal@plt+0x1c8fd>
   29bb1:	mov    rax,QWORD PTR [rax+0x8]
   29bb5:	mov    QWORD PTR [rbx+0x20],rax
   29bb9:	add    DWORD PTR [rbx+0x28],0x1
   29bbd:	add    rsp,0x10
   29bc1:	mov    rax,rbp
   29bc4:	pop    rbx
   29bc5:	pop    rbp
   29bc6:	pop    r12
   29bc8:	ret    
   29bc9:	nop    DWORD PTR [rax+0x0]
   29bd0:	test   rsi,rsi
   29bd3:	je     29cd1 <g_str_equal@plt+0x1ca11>
   29bd9:	mov    DWORD PTR [rsp+0xc],edx
   29bdd:	call   2ed40 <g_str_equal@plt+0x21a80>
   29be2:	mov    rdi,QWORD PTR [rbx+0x18]
   29be6:	mov    rbp,rax
   29be9:	test   rdi,rdi
   29bec:	je     29bbd <g_str_equal@plt+0x1c8fd>
   29bee:	test   rax,rax
   29bf1:	je     29bbd <g_str_equal@plt+0x1c8fd>
   29bf3:	mov    edx,DWORD PTR [rsp+0xc]
   29bf7:	test   dl,dl
   29bf9:	je     29bbd <g_str_equal@plt+0x1c8fd>
   29bfb:	mov    rsi,r12
   29bfe:	call   c560 <g_hash_table_remove@plt>
   29c03:	test   eax,eax
   29c05:	jne    29bbd <g_str_equal@plt+0x1c8fd>
   29c07:	lea    rcx,[rip+0x35442]        # 5f050 <_fini@@Base+0xc8fc>
   29c0e:	lea    rsi,[rip+0x34e63]        # 5ea78 <_fini@@Base+0xc324>
   29c15:	lea    rdi,[rip+0x3b356]        # 64f72 <_fini@@Base+0x1281e>
   29c1c:	mov    edx,0x8f
   29c21:	call   c390 <__assert_fail@plt>
   29c26:	nop    WORD PTR cs:[rax+rax*1+0x0]
   29c30:	mov    rbp,QWORD PTR [rdi+0xa8]
   29c37:	test   rbp,rbp
   29c3a:	jne    29bbd <g_str_equal@plt+0x1c8fd>
   29c3c:	lea    rcx,[rip+0x3540d]        # 5f050 <_fini@@Base+0xc8fc>
   29c43:	lea    rsi,[rip+0x34e2e]        # 5ea78 <_fini@@Base+0xc324>
   29c4a:	lea    rdi,[rip+0x34fc4]        # 5ec15 <_fini@@Base+0xc4c1>
   29c51:	mov    edx,0x81
   29c56:	call   c390 <__assert_fail@plt>
   29c5b:	nop    DWORD PTR [rax+rax*1+0x0]
   29c60:	xor    ebp,ebp
   29c62:	test   dl,dl
   29c64:	jne    29bb9 <g_str_equal@plt+0x1c8f9>
   29c6a:	jmp    29bbd <g_str_equal@plt+0x1c8fd>
   29c6f:	lea    rcx,[rip+0x353da]        # 5f050 <_fini@@Base+0xc8fc>
   29c76:	lea    rsi,[rip+0x34dfb]        # 5ea78 <_fini@@Base+0xc324>
   29c7d:	lea    rdi,[rip+0x34f9b]        # 5ec1f <_fini@@Base+0xc4cb>
   29c84:	mov    edx,0x88
   29c89:	call   c390 <__assert_fail@plt>
   29c8e:	call   29b20 <g_str_equal@plt+0x1c860>
   29c93:	lea    rcx,[rip+0x353b6]        # 5f050 <_fini@@Base+0xc8fc>
   29c9a:	lea    rsi,[rip+0x34dd7]        # 5ea78 <_fini@@Base+0xc324>
   29ca1:	lea    rdi,[rip+0x34f7c]        # 5ec24 <_fini@@Base+0xc4d0>
   29ca8:	mov    edx,0x93
   29cad:	call   c390 <__assert_fail@plt>
   29cb2:	lea    rcx,[rip+0x35397]        # 5f050 <_fini@@Base+0xc8fc>
   29cb9:	lea    rsi,[rip+0x34db8]        # 5ea78 <_fini@@Base+0xc324>
   29cc0:	lea    rdi,[rip+0x34df9]        # 5eac0 <_fini@@Base+0xc36c>
   29cc7:	mov    edx,0x92
   29ccc:	call   c390 <__assert_fail@plt>
   29cd1:	lea    rcx,[rip+0x35378]        # 5f050 <_fini@@Base+0xc8fc>
   29cd8:	lea    rsi,[rip+0x34d99]        # 5ea78 <_fini@@Base+0xc324>
   29cdf:	lea    rdi,[rip+0x34f3f]        # 5ec25 <_fini@@Base+0xc4d1>
   29ce6:	mov    edx,0x8b
   29ceb:	call   c390 <__assert_fail@plt>
   29cf0:	push   rbx
   29cf1:	mov    rbx,rdx
   29cf4:	xor    edx,edx
   29cf6:	call   29b50 <g_str_equal@plt+0x1c890>
   29cfb:	test   rax,rax
   29cfe:	setne  BYTE PTR [rbx]
   29d01:	pop    rbx
   29d02:	ret    
   29d03:	nop    DWORD PTR [rax]
   29d06:	nop    WORD PTR cs:[rax+rax*1+0x0]
   29d10:	push   rbx
   29d11:	mov    rbx,rdi
   29d14:	mov    edi,0xc8
   29d19:	call   ce00 <g_malloc0@plt>
   29d1e:	test   rbx,rbx
   29d21:	je     29db2 <g_str_equal@plt+0x1caf2>
   29d27:	lea    rdx,[rip+0xe32]        # 2ab60 <g_str_equal@plt+0x1d8a0>
   29d2e:	lea    rcx,[rip+0xefb]        # 2ac30 <g_str_equal@plt+0x1d970>
   29d35:	lea    rsi,[rip+0x1d4]        # 29f10 <g_str_equal@plt+0x1cc50>
   29d3c:	lea    rdi,[rip+0x16d]        # 29eb0 <g_str_equal@plt+0x1cbf0>
   29d43:	mov    DWORD PTR [rax+0x90],0x1
   29d4d:	add    QWORD PTR [rbx+0x8],0x1
   29d52:	mov    QWORD PTR [rax],rdx
   29d55:	mov    QWORD PTR [rax+0x8],rcx
   29d59:	lea    rdx,[rip+0xd20]        # 2aa80 <g_str_equal@plt+0x1d7c0>
   29d60:	mov    QWORD PTR [rax+0x10],rsi
   29d64:	lea    rcx,[rip+0x75]        # 29de0 <g_str_equal@plt+0x1cb20>
   29d6b:	lea    rsi,[rip+0x7be]        # 2a530 <g_str_equal@plt+0x1d270>
   29d72:	mov    QWORD PTR [rax+0x18],rdx
   29d76:	lea    rdx,[rip+0x693]        # 2a410 <g_str_equal@plt+0x1d150>
   29d7d:	mov    QWORD PTR [rax+0x20],rcx
   29d81:	lea    rcx,[rip+0xffffffffffffff68]        # 29cf0 <g_str_equal@plt+0x1ca30>
   29d88:	mov    QWORD PTR [rax+0x28],rsi
   29d8c:	lea    rsi,[rip+0x2ed]        # 2a080 <g_str_equal@plt+0x1cdc0>
   29d93:	mov    QWORD PTR [rax+0x30],rdi
   29d97:	mov    QWORD PTR [rax+0x38],rdx
   29d9b:	mov    QWORD PTR [rax+0x88],rcx
   29da2:	mov    QWORD PTR [rax+0xa0],rsi
   29da9:	mov    QWORD PTR [rax+0xa8],rbx
   29db0:	pop    rbx
   29db1:	ret    
   29db2:	lea    rcx,[rip+0x351b7]        # 5ef70 <_fini@@Base+0xc81c>
   29db9:	lea    rsi,[rip+0x34cb8]        # 5ea78 <_fini@@Base+0xc324>
   29dc0:	lea    rdi,[rip+0x34e77]        # 5ec3e <_fini@@Base+0xc4ea>
   29dc7:	mov    edx,0x299
   29dcc:	call   c390 <__assert_fail@plt>
   29dd1:	nop    DWORD PTR [rax+rax*1+0x0]
   29dd6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   29de0:	push   rbx
   29de1:	mov    rax,QWORD PTR [rdi+0xb8]
   29de8:	test   rax,rax
   29deb:	je     29e24 <g_str_equal@plt+0x1cb64>
   29ded:	mov    rcx,QWORD PTR [rax+0x8]
   29df1:	test   rcx,rcx
   29df4:	je     29e24 <g_str_equal@plt+0x1cb64>
   29df6:	mov    ecx,DWORD PTR [rcx]
   29df8:	lea    r8d,[rcx-0x1]
   29dfc:	cmp    r8d,0x5
   29e00:	ja     29e43 <g_str_equal@plt+0x1cb83>
   29e02:	cmp    ecx,0x5
   29e05:	jne    29e24 <g_str_equal@plt+0x1cb64>
   29e07:	cmp    QWORD PTR [rax+0x20],0x0
   29e0c:	je     29e20 <g_str_equal@plt+0x1cb60>
   29e0e:	mov    rbx,rsi
   29e11:	mov    rdi,rdx
   29e14:	call   ce00 <g_malloc0@plt>
   29e19:	mov    QWORD PTR [rbx],rax
   29e1c:	pop    rbx
   29e1d:	ret    
   29e1e:	xchg   ax,ax
   29e20:	xor    eax,eax
   29e22:	pop    rbx
   29e23:	ret    
   29e24:	lea    rcx,[rip+0x35085]        # 5eeb0 <_fini@@Base+0xc75c>
   29e2b:	lea    rsi,[rip+0x34c46]        # 5ea78 <_fini@@Base+0xc324>
   29e32:	lea    rdi,[rip+0x34caf]        # 5eae8 <_fini@@Base+0xc394>
   29e39:	mov    edx,0x156
   29e3e:	call   c390 <__assert_fail@plt>
   29e43:	call   29b20 <g_str_equal@plt+0x1c860>
   29e48:	nop    DWORD PTR [rax+rax*1+0x0]
   29e50:	push   rbx
   29e51:	mov    rbx,QWORD PTR [rdi+0xb8]
   29e58:	test   rbx,rbx
   29e5b:	je     29e85 <g_str_equal@plt+0x1cbc5>
   29e5d:	cmp    QWORD PTR [rbx+0x10],rsi
   29e61:	jne    29e85 <g_str_equal@plt+0x1cbc5>
   29e63:	mov    rax,QWORD PTR [rbx+0x30]
   29e67:	mov    QWORD PTR [rdi+0xb8],rax
   29e6e:	mov    rdi,QWORD PTR [rbx+0x18]
   29e72:	test   rdi,rdi
   29e75:	je     29e7c <g_str_equal@plt+0x1cbbc>
   29e77:	call   cfa0 <g_hash_table_unref@plt>
   29e7c:	mov    rdi,rbx
   29e7f:	pop    rbx
   29e80:	jmp    d2b0 <g_free@plt>
   29e85:	lea    rcx,[rip+0x35084]        # 5ef10 <_fini@@Base+0xc7bc>
   29e8c:	lea    rsi,[rip+0x34be5]        # 5ea78 <_fini@@Base+0xc324>
   29e93:	lea    rdi,[rip+0x34d90]        # 5ec2a <_fini@@Base+0xc4d6>
   29e9a:	mov    edx,0x10e
   29e9f:	call   c390 <__assert_fail@plt>
   29ea4:	xchg   ax,ax
   29ea6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   29eb0:	sub    rsp,0x8
   29eb4:	mov    rax,QWORD PTR [rdi+0xb8]
   29ebb:	mov    rdx,QWORD PTR [rax+0x8]
   29ebf:	mov    edx,DWORD PTR [rdx]
   29ec1:	lea    ecx,[rdx-0x1]
   29ec4:	cmp    ecx,0x5
   29ec7:	ja     29efd <g_str_equal@plt+0x1cc3d>
   29ec9:	cmp    edx,0x5
   29ecc:	jne    29ede <g_str_equal@plt+0x1cc1e>
   29ece:	cmp    QWORD PTR [rax+0x18],0x0
   29ed3:	jne    29ede <g_str_equal@plt+0x1cc1e>
   29ed5:	add    rsp,0x8
   29ed9:	jmp    29e50 <g_str_equal@plt+0x1cb90>
   29ede:	lea    rcx,[rip+0x3504b]        # 5ef30 <_fini@@Base+0xc7dc>
   29ee5:	lea    rsi,[rip+0x34b8c]        # 5ea78 <_fini@@Base+0xc324>
   29eec:	lea    rdi,[rip+0x34c1d]        # 5eb10 <_fini@@Base+0xc3bc>
   29ef3:	mov    edx,0x171
   29ef8:	call   c390 <__assert_fail@plt>
   29efd:	call   29b20 <g_str_equal@plt+0x1c860>
   29f02:	nop    DWORD PTR [rax+0x0]
   29f06:	nop    WORD PTR cs:[rax+rax*1+0x0]
   29f10:	sub    rsp,0x8
   29f14:	mov    rax,QWORD PTR [rdi+0xb8]
   29f1b:	mov    rdx,QWORD PTR [rax+0x8]
   29f1f:	mov    edx,DWORD PTR [rdx]
   29f21:	lea    ecx,[rdx-0x1]
   29f24:	cmp    ecx,0x5
   29f27:	ja     29f5d <g_str_equal@plt+0x1cc9d>
   29f29:	cmp    edx,0x4
   29f2c:	jne    29f3e <g_str_equal@plt+0x1cc7e>
   29f2e:	cmp    QWORD PTR [rax+0x18],0x0
   29f33:	je     29f3e <g_str_equal@plt+0x1cc7e>
   29f35:	add    rsp,0x8
   29f39:	jmp    29e50 <g_str_equal@plt+0x1cb90>
   29f3e:	lea    rcx,[rip+0x34f0b]        # 5ee50 <_fini@@Base+0xc6fc>
   29f45:	lea    rsi,[rip+0x34b2c]        # 5ea78 <_fini@@Base+0xc324>
   29f4c:	lea    rdi,[rip+0x34bf5]        # 5eb48 <_fini@@Base+0xc3f4>
   29f53:	mov    edx,0x131
   29f58:	call   c390 <__assert_fail@plt>
   29f5d:	call   29b20 <g_str_equal@plt+0x1c860>
   29f62:	nop    DWORD PTR [rax+0x0]
   29f66:	nop    WORD PTR cs:[rax+rax*1+0x0]
   29f70:	push   r14
   29f72:	push   r13
   29f74:	mov    r14,rsi
   29f77:	push   r12
   29f79:	push   rbp
   29f7a:	mov    r12,rdi
   29f7d:	push   rbx
   29f7e:	mov    rbp,rdx
   29f81:	mov    edi,0x38
   29f86:	mov    r13,rcx
   29f89:	call   ce00 <g_malloc0@plt>
   29f8e:	test   rbp,rbp
   29f91:	je     2a03e <g_str_equal@plt+0x1cd7e>
   29f97:	mov    rbx,rax
   29f9a:	mov    QWORD PTR [rax],r14
   29f9d:	mov    QWORD PTR [rax+0x8],rbp
   29fa1:	mov    QWORD PTR [rax+0x10],r13
   29fa5:	mov    eax,DWORD PTR [rbp+0x0]
   29fa8:	lea    edx,[rax-0x1]
   29fab:	cmp    edx,0x5
   29fae:	ja     2a039 <g_str_equal@plt+0x1cd79>
   29fb4:	cmp    eax,0x4
   29fb7:	je     29ff0 <g_str_equal@plt+0x1cd30>
   29fb9:	cmp    eax,0x5
   29fbc:	jne    2a05d <g_str_equal@plt+0x1cd9d>
   29fc2:	mov    rax,QWORD PTR [rbp+0x10]
   29fc6:	mov    DWORD PTR [rbx+0x28],0xffffffff
   29fcd:	mov    QWORD PTR [rbx+0x20],rax
   29fd1:	mov    rdx,QWORD PTR [r12]
   29fd5:	mov    QWORD PTR [r12],rbx
   29fd9:	mov    QWORD PTR [rbx+0x30],rdx
   29fdd:	pop    rbx
   29fde:	pop    rbp
   29fdf:	pop    r12
   29fe1:	pop    r13
   29fe3:	pop    r14
   29fe5:	ret    
   29fe6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   29ff0:	mov    rsi,QWORD PTR [rip+0x257fe9]        # 281fe0 <g_str_equal>
   29ff7:	mov    rdi,QWORD PTR [rip+0x257fb2]        # 281fb0 <g_str_hash>
   29ffe:	call   c810 <g_hash_table_new@plt>
   2a003:	mov    r13,rax
   2a006:	mov    eax,DWORD PTR [rbp+0x0]
   2a009:	lea    edx,[rax-0x1]
   2a00c:	cmp    edx,0x5
   2a00f:	ja     2a039 <g_str_equal@plt+0x1cd79>
   2a011:	cmp    eax,0x4
   2a014:	mov    eax,0x0
   2a019:	lea    rsi,[rip+0xfffffffffffffaf0]        # 29b10 <g_str_equal@plt+0x1c850>
   2a020:	cmovne rbp,rax
   2a024:	mov    rdx,r13
   2a027:	mov    rdi,rbp
   2a02a:	call   2f050 <g_str_equal@plt+0x21d90>
   2a02f:	mov    QWORD PTR [rbx+0x18],r13
   2a033:	mov    rax,QWORD PTR [rbx+0x20]
   2a037:	jmp    29fd1 <g_str_equal@plt+0x1cd11>
   2a039:	call   29b20 <g_str_equal@plt+0x1c860>
   2a03e:	lea    rcx,[rip+0x34e2b]        # 5ee70 <_fini@@Base+0xc71c>
   2a045:	lea    rsi,[rip+0x34a2c]        # 5ea78 <_fini@@Base+0xc324>
   2a04c:	lea    rdi,[rip+0x34beb]        # 5ec3e <_fini@@Base+0xc4ea>
   2a053:	mov    edx,0xdc
   2a058:	call   c390 <__assert_fail@plt>
   2a05d:	lea    rcx,[rip+0x34e0c]        # 5ee70 <_fini@@Base+0xc71c>
   2a064:	lea    rsi,[rip+0x34a0d]        # 5ea78 <_fini@@Base+0xc324>
   2a06b:	lea    rdi,[rip+0x34b06]        # 5eb78 <_fini@@Base+0xc424>
   2a072:	mov    edx,0xe6
   2a077:	call   c390 <__assert_fail@plt>
   2a07c:	nop    DWORD PTR [rax+0x0]
   2a080:	push   rbp
   2a081:	push   rbx
   2a082:	mov    rbp,rdi
   2a085:	sub    rsp,0x8
   2a089:	mov    rbx,QWORD PTR [rdi+0xb8]
   2a090:	test   rbx,rbx
   2a093:	je     2a0c5 <g_str_equal@plt+0x1ce05>
   2a095:	nop    DWORD PTR [rax]
   2a098:	mov    rax,QWORD PTR [rbx+0x30]
   2a09c:	mov    QWORD PTR [rbp+0xb8],rax
   2a0a3:	mov    rdi,QWORD PTR [rbx+0x18]
   2a0a7:	test   rdi,rdi
   2a0aa:	je     2a0b1 <g_str_equal@plt+0x1cdf1>
   2a0ac:	call   cfa0 <g_hash_table_unref@plt>
   2a0b1:	mov    rdi,rbx
   2a0b4:	call   d2b0 <g_free@plt>
   2a0b9:	mov    rbx,QWORD PTR [rbp+0xb8]
   2a0c0:	test   rbx,rbx
   2a0c3:	jne    2a098 <g_str_equal@plt+0x1cdd8>
   2a0c5:	mov    rdi,QWORD PTR [rbp+0xa8]
   2a0cc:	test   rdi,rdi
   2a0cf:	je     2a0e7 <g_str_equal@plt+0x1ce27>
   2a0d1:	mov    rax,QWORD PTR [rdi+0x8]
   2a0d5:	test   rax,rax
   2a0d8:	je     2a117 <g_str_equal@plt+0x1ce57>
   2a0da:	sub    rax,0x1
   2a0de:	test   rax,rax
   2a0e1:	mov    QWORD PTR [rdi+0x8],rax
   2a0e5:	je     2a110 <g_str_equal@plt+0x1ce50>
   2a0e7:	mov    rdi,QWORD PTR [rbp+0xc0]
   2a0ee:	test   rdi,rdi
   2a0f1:	je     2a0fd <g_str_equal@plt+0x1ce3d>
   2a0f3:	mov    esi,0x1
   2a0f8:	call   c7a0 <g_string_free@plt>
   2a0fd:	add    rsp,0x8
   2a101:	mov    rdi,rbp
   2a104:	pop    rbx
   2a105:	pop    rbp
   2a106:	jmp    d2b0 <g_free@plt>
   2a10b:	nop    DWORD PTR [rax+rax*1+0x0]
   2a110:	call   30300 <g_str_equal@plt+0x23040>
   2a115:	jmp    2a0e7 <g_str_equal@plt+0x1ce27>
   2a117:	call   d339 <g_str_equal@plt+0x79>
   2a11c:	nop    DWORD PTR [rax+0x0]
   2a120:	push   r15
   2a122:	push   r14
   2a124:	push   r13
   2a126:	push   r12
   2a128:	mov    r12d,edx
   2a12b:	push   rbp
   2a12c:	push   rbx
   2a12d:	mov    rbp,rdi
   2a130:	sub    rsp,0x48
   2a134:	mov    rdi,QWORD PTR [rdi+0xc0]
   2a13b:	mov    rax,QWORD PTR fs:0x28
   2a144:	mov    QWORD PTR [rsp+0x38],rax
   2a149:	xor    eax,eax
   2a14b:	mov    QWORD PTR [rsp+0x8],rsi
   2a150:	test   rdi,rdi
   2a153:	je     2a2c0 <g_str_equal@plt+0x1d000>
   2a159:	xor    esi,esi
   2a15b:	call   cf10 <g_string_truncate@plt>
   2a160:	mov    rcx,QWORD PTR [rsp+0x8]
   2a165:	mov    rbx,QWORD PTR [rbp+0xb8]
   2a16c:	test   rbx,rbx
   2a16f:	je     2a300 <g_str_equal@plt+0x1d040>
   2a175:	test   r12d,r12d
   2a178:	je     2a186 <g_str_equal@plt+0x1cec6>
   2a17a:	mov    rcx,QWORD PTR [rbx]
   2a17d:	mov    rbx,QWORD PTR [rbx+0x30]
   2a181:	test   rbx,rbx
   2a184:	je     2a201 <g_str_equal@plt+0x1cf41>
   2a186:	lea    r14,[rip+0x34ac1]        # 5ec4e <_fini@@Base+0xc4fa>
   2a18d:	lea    r13,[rip+0x37ee2]        # 62076 <_fini@@Base+0xf922>
   2a194:	lea    r12,[rsp+0x10]
   2a199:	lea    r15,[rip+0x34aa2]        # 5ec42 <_fini@@Base+0xc4ee>
   2a1a0:	mov    rax,QWORD PTR [rbx+0x8]
   2a1a4:	mov    eax,DWORD PTR [rax]
   2a1a6:	lea    edx,[rax-0x1]
   2a1a9:	cmp    edx,0x5
   2a1ac:	ja     2a330 <g_str_equal@plt+0x1d070>
   2a1b2:	cmp    eax,0x4
   2a1b5:	je     2a250 <g_str_equal@plt+0x1cf90>
   2a1bb:	cmp    BYTE PTR [rbp+0xb0],0x0
   2a1c2:	mov    r9d,DWORD PTR [rbx+0x28]
   2a1c6:	mov    r8,r13
   2a1c9:	mov    ecx,0x20
   2a1ce:	mov    edx,0x1
   2a1d3:	mov    esi,0x20
   2a1d8:	mov    rdi,r12
   2a1db:	cmove  r8,r14
   2a1df:	xor    eax,eax
   2a1e1:	call   cfe0 <__snprintf_chk@plt>
   2a1e6:	mov    rdi,QWORD PTR [rbp+0xc0]
   2a1ed:	mov    rsi,r12
   2a1f0:	call   c200 <g_string_prepend@plt>
   2a1f5:	mov    rcx,QWORD PTR [rbx]
   2a1f8:	mov    rbx,QWORD PTR [rbx+0x30]
   2a1fc:	test   rbx,rbx
   2a1ff:	jne    2a1a0 <g_str_equal@plt+0x1cee0>
   2a201:	test   rcx,rcx
   2a204:	mov    rdi,QWORD PTR [rbp+0xc0]
   2a20b:	je     2a2a0 <g_str_equal@plt+0x1cfe0>
   2a211:	mov    rsi,rcx
   2a214:	call   c200 <g_string_prepend@plt>
   2a219:	mov    rax,QWORD PTR [rbp+0xc0]
   2a220:	mov    rax,QWORD PTR [rax]
   2a223:	mov    rsi,QWORD PTR [rsp+0x38]
   2a228:	xor    rsi,QWORD PTR fs:0x28
   2a231:	jne    2a34f <g_str_equal@plt+0x1d08f>
   2a237:	add    rsp,0x48
   2a23b:	pop    rbx
   2a23c:	pop    rbp
   2a23d:	pop    r12
   2a23f:	pop    r13
   2a241:	pop    r14
   2a243:	pop    r15
   2a245:	ret    
   2a246:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2a250:	test   rcx,rcx
   2a253:	mov    rdi,QWORD PTR [rbp+0xc0]
   2a25a:	cmove  rcx,r15
   2a25e:	mov    rsi,rcx
   2a261:	call   c200 <g_string_prepend@plt>
   2a266:	mov    rdi,QWORD PTR [rbp+0xc0]
   2a26d:	mov    esi,0x2e
   2a272:	call   cb50 <g_string_prepend_c@plt>
   2a277:	mov    rcx,QWORD PTR [rbx]
   2a27a:	mov    rbx,QWORD PTR [rbx+0x30]
   2a27e:	test   rbx,rbx
   2a281:	jne    2a1a0 <g_str_equal@plt+0x1cee0>
   2a287:	test   rcx,rcx
   2a28a:	mov    rdi,QWORD PTR [rbp+0xc0]
   2a291:	jne    2a211 <g_str_equal@plt+0x1cf51>
   2a297:	nop    WORD PTR [rax+rax*1+0x0]
   2a2a0:	mov    rax,QWORD PTR [rdi]
   2a2a3:	movzx  edx,BYTE PTR [rax]
   2a2a6:	cmp    dl,0x2e
   2a2a9:	je     2a2e0 <g_str_equal@plt+0x1d020>
   2a2ab:	test   dl,dl
   2a2ad:	lea    rdx,[rip+0x3498e]        # 5ec42 <_fini@@Base+0xc4ee>
   2a2b4:	cmove  rax,rdx
   2a2b8:	jmp    2a223 <g_str_equal@plt+0x1cf63>
   2a2bd:	nop    DWORD PTR [rax]
   2a2c0:	lea    rdi,[rip+0x35fa7]        # 6026e <_fini@@Base+0xdb1a>
   2a2c7:	call   c530 <g_string_new@plt>
   2a2cc:	mov    rcx,QWORD PTR [rsp+0x8]
   2a2d1:	mov    QWORD PTR [rbp+0xc0],rax
   2a2d8:	jmp    2a165 <g_str_equal@plt+0x1cea5>
   2a2dd:	nop    DWORD PTR [rax]
   2a2e0:	mov    edx,0x1
   2a2e5:	xor    esi,esi
   2a2e7:	call   ca70 <g_string_erase@plt>
   2a2ec:	mov    rax,QWORD PTR [rbp+0xc0]
   2a2f3:	mov    rax,QWORD PTR [rax]
   2a2f6:	jmp    2a223 <g_str_equal@plt+0x1cf63>
   2a2fb:	nop    DWORD PTR [rax+rax*1+0x0]
   2a300:	test   r12d,r12d
   2a303:	je     2a201 <g_str_equal@plt+0x1cf41>
   2a309:	lea    rcx,[rip+0x34d20]        # 5f030 <_fini@@Base+0xc8dc>
   2a310:	lea    rsi,[rip+0x34761]        # 5ea78 <_fini@@Base+0xc324>
   2a317:	lea    rdi,[rip+0x34935]        # 5ec53 <_fini@@Base+0xc4ff>
   2a31e:	mov    edx,0x65
   2a323:	call   c390 <__assert_fail@plt>
   2a328:	nop    DWORD PTR [rax+rax*1+0x0]
   2a330:	lea    rcx,[rip+0x34d09]        # 5f040 <_fini@@Base+0xc8ec>
   2a337:	lea    rsi,[rip+0x3335a]        # 5d698 <_fini@@Base+0xaf44>
   2a33e:	lea    rdi,[rip+0x3339b]        # 5d6e0 <_fini@@Base+0xaf8c>
   2a345:	mov    edx,0x7f
   2a34a:	call   c390 <__assert_fail@plt>
   2a34f:	call   cd30 <__stack_chk_fail@plt>
   2a354:	xchg   ax,ax
   2a356:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2a360:	push   r13
   2a362:	push   r12
   2a364:	movzx  edx,dl
   2a367:	push   rbp
   2a368:	push   rbx
   2a369:	mov    rbp,rdi
   2a36c:	mov    r12,rsi
   2a36f:	mov    r13,rcx
   2a372:	sub    rsp,0x8
   2a376:	call   29b50 <g_str_equal@plt+0x1c890>
   2a37b:	test   rax,rax
   2a37e:	mov    rbx,rax
   2a381:	je     2a398 <g_str_equal@plt+0x1d0d8>
   2a383:	add    rsp,0x8
   2a387:	mov    rax,rbx
   2a38a:	pop    rbx
   2a38b:	pop    rbp
   2a38c:	pop    r12
   2a38e:	pop    r13
   2a390:	ret    
   2a391:	nop    DWORD PTR [rax+0x0]
   2a398:	mov    rsi,r12
   2a39b:	mov    rdi,rbp
   2a39e:	xor    edx,edx
   2a3a0:	call   2a120 <g_str_equal@plt+0x1ce60>
   2a3a5:	lea    r8,[rip+0x33a19]        # 5ddc5 <_fini@@Base+0xb671>
   2a3ac:	lea    rcx,[rip+0x34cbd]        # 5f070 <_fini@@Base+0xc91c>
   2a3b3:	lea    rsi,[rip+0x346be]        # 5ea78 <_fini@@Base+0xc324>
   2a3ba:	mov    r9,rax
   2a3bd:	mov    rdi,r13
   2a3c0:	xor    eax,eax
   2a3c2:	mov    edx,0xab
   2a3c7:	call   3a090 <g_str_equal@plt+0x2cdd0>
   2a3cc:	add    rsp,0x8
   2a3d0:	mov    rax,rbx
   2a3d3:	pop    rbx
   2a3d4:	pop    rbp
   2a3d5:	pop    r12
   2a3d7:	pop    r13
   2a3d9:	ret    
   2a3da:	nop    WORD PTR [rax+rax*1+0x0]
   2a3e0:	push   rbx
   2a3e1:	mov    rbx,rdx
   2a3e4:	mov    edx,0x1
   2a3e9:	call   2a360 <g_str_equal@plt+0x1d0a0>
   2a3ee:	test   rax,rax
   2a3f1:	mov    QWORD PTR [rbx],0x0
   2a3f8:	je     2a402 <g_str_equal@plt+0x1d142>
   2a3fa:	add    QWORD PTR [rax+0x8],0x1
   2a3ff:	mov    QWORD PTR [rbx],rax
   2a402:	pop    rbx
   2a403:	ret    
   2a404:	xchg   ax,ax
   2a406:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2a410:	push   r12
   2a412:	push   rbp
   2a413:	mov    r12,rcx
   2a416:	push   rbx
   2a417:	mov    rbp,rdx
   2a41a:	mov    rcx,r8
   2a41d:	xor    edx,edx
   2a41f:	call   2a360 <g_str_equal@plt+0x1d0a0>
   2a424:	test   rax,rax
   2a427:	je     2a450 <g_str_equal@plt+0x1d190>
   2a429:	mov    rbx,rax
   2a42c:	mov    rdi,r12
   2a42f:	call   ce00 <g_malloc0@plt>
   2a434:	mov    QWORD PTR [rbp+0x0],rax
   2a438:	mov    edx,DWORD PTR [rbx]
   2a43a:	lea    ecx,[rdx-0x1]
   2a43d:	cmp    ecx,0x5
   2a440:	ja     2a45d <g_str_equal@plt+0x1d19d>
   2a442:	mov    DWORD PTR [rax],edx
   2a444:	pop    rbx
   2a445:	pop    rbp
   2a446:	pop    r12
   2a448:	ret    
   2a449:	nop    DWORD PTR [rax+0x0]
   2a450:	mov    QWORD PTR [rbp+0x0],0x0
   2a458:	pop    rbx
   2a459:	pop    rbp
   2a45a:	pop    r12
   2a45c:	ret    
   2a45d:	call   29b20 <g_str_equal@plt+0x1c860>
   2a462:	nop    DWORD PTR [rax+0x0]
   2a466:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2a470:	push   r13
   2a472:	push   r12
   2a474:	mov    r13,rsi
   2a477:	push   rbp
   2a478:	push   rbx
   2a479:	mov    rbx,rdx
   2a47c:	mov    edx,0x1
   2a481:	mov    r12,rdi
   2a484:	mov    rbp,rcx
   2a487:	sub    rsp,0x8
   2a48b:	call   2a360 <g_str_equal@plt+0x1d0a0>
   2a490:	test   rax,rax
   2a493:	mov    QWORD PTR [rbx],0x0
   2a49a:	je     2a4bd <g_str_equal@plt+0x1d1fd>
   2a49c:	mov    eax,DWORD PTR [rax]
   2a49e:	lea    edx,[rax-0x1]
   2a4a1:	cmp    edx,0x5
   2a4a4:	ja     2a51d <g_str_equal@plt+0x1d25d>
   2a4a6:	cmp    eax,0x1
   2a4a9:	jne    2a4d0 <g_str_equal@plt+0x1d210>
   2a4ab:	lea    rax,[rip+0x257f9e]        # 282450 <g_test_config_vars+0x1090>
   2a4b2:	add    QWORD PTR [rip+0x257f9e],0x1        # 282458 <g_test_config_vars+0x1098>
   2a4ba:	mov    QWORD PTR [rbx],rax
   2a4bd:	add    rsp,0x8
   2a4c1:	pop    rbx
   2a4c2:	pop    rbp
   2a4c3:	pop    r12
   2a4c5:	pop    r13
   2a4c7:	ret    
   2a4c8:	nop    DWORD PTR [rax+rax*1+0x0]
   2a4d0:	mov    rsi,r13
   2a4d3:	mov    rdi,r12
   2a4d6:	xor    edx,edx
   2a4d8:	call   2a120 <g_str_equal@plt+0x1ce60>
   2a4dd:	mov    r9,rax
   2a4e0:	lea    rax,[rip+0x305c0]        # 5aaa7 <_fini@@Base+0x8353>
   2a4e7:	sub    rsp,0x8
   2a4eb:	lea    r8,[rip+0x333b6]        # 5d8a8 <_fini@@Base+0xb154>
   2a4f2:	lea    rcx,[rip+0x34b97]        # 5f090 <_fini@@Base+0xc93c>
   2a4f9:	lea    rsi,[rip+0x34578]        # 5ea78 <_fini@@Base+0xc324>
   2a500:	push   rax
   2a501:	mov    edx,0x25f
   2a506:	mov    rdi,rbp
   2a509:	xor    eax,eax
   2a50b:	call   3a090 <g_str_equal@plt+0x2cdd0>
   2a510:	pop    rax
   2a511:	pop    rdx
   2a512:	add    rsp,0x8
   2a516:	pop    rbx
   2a517:	pop    rbp
   2a518:	pop    r12
   2a51a:	pop    r13
   2a51c:	ret    
   2a51d:	call   29b20 <g_str_equal@plt+0x1c860>
   2a522:	nop    DWORD PTR [rax+0x0]
   2a526:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2a530:	push   rbp
   2a531:	push   rbx
   2a532:	sub    rsp,0x8
   2a536:	mov    rbx,QWORD PTR [rdi+0xb8]
   2a53d:	test   rbx,rbx
   2a540:	je     2a5a9 <g_str_equal@plt+0x1d2e9>
   2a542:	mov    rax,QWORD PTR [rbx+0x8]
   2a546:	test   rax,rax
   2a549:	je     2a5a9 <g_str_equal@plt+0x1d2e9>
   2a54b:	mov    eax,DWORD PTR [rax]
   2a54d:	lea    edx,[rax-0x1]
   2a550:	cmp    edx,0x5
   2a553:	ja     2a5c8 <g_str_equal@plt+0x1d308>
   2a555:	cmp    eax,0x5
   2a558:	jne    2a5a9 <g_str_equal@plt+0x1d2e9>
   2a55a:	cmp    QWORD PTR [rbx+0x20],0x0
   2a55f:	je     2a5a2 <g_str_equal@plt+0x1d2e2>
   2a561:	mov    rbp,rsi
   2a564:	mov    edx,0x1
   2a569:	xor    esi,esi
   2a56b:	call   2a120 <g_str_equal@plt+0x1ce60>
   2a570:	mov    edx,DWORD PTR [rbx+0x28]
   2a573:	sub    rsp,0x8
   2a577:	lea    r8,[rip+0x34622]        # 5eba0 <_fini@@Base+0xc44c>
   2a57e:	push   rax
   2a57f:	lea    rcx,[rip+0x3494a]        # 5eed0 <_fini@@Base+0xc77c>
   2a586:	lea    rsi,[rip+0x344eb]        # 5ea78 <_fini@@Base+0xc324>
   2a58d:	xor    eax,eax
   2a58f:	mov    rdi,rbp
   2a592:	lea    r9d,[rdx+0x1]
   2a596:	mov    edx,0x168
   2a59b:	call   3a090 <g_str_equal@plt+0x2cdd0>
   2a5a0:	pop    rax
   2a5a1:	pop    rdx
   2a5a2:	add    rsp,0x8
   2a5a6:	pop    rbx
   2a5a7:	pop    rbp
   2a5a8:	ret    
   2a5a9:	lea    rcx,[rip+0x34940]        # 5eef0 <_fini@@Base+0xc79c>
   2a5b0:	lea    rsi,[rip+0x344c1]        # 5ea78 <_fini@@Base+0xc324>
   2a5b7:	lea    rdi,[rip+0x3452a]        # 5eae8 <_fini@@Base+0xc394>
   2a5be:	mov    edx,0x164
   2a5c3:	call   c390 <__assert_fail@plt>
   2a5c8:	call   29b20 <g_str_equal@plt+0x1c860>
   2a5cd:	nop    DWORD PTR [rax]
   2a5d0:	push   r13
   2a5d2:	push   r12
   2a5d4:	mov    r13,rdx
   2a5d7:	push   rbp
   2a5d8:	push   rbx
   2a5d9:	mov    edx,0x1
   2a5de:	mov    rbp,rdi
   2a5e1:	mov    r12,rsi
   2a5e4:	mov    rbx,rcx
   2a5e7:	sub    rsp,0x8
   2a5eb:	call   2a360 <g_str_equal@plt+0x1d0a0>
   2a5f0:	test   rax,rax
   2a5f3:	je     2a646 <g_str_equal@plt+0x1d386>
   2a5f5:	mov    edx,DWORD PTR [rax]
   2a5f7:	lea    ecx,[rdx-0x1]
   2a5fa:	cmp    ecx,0x5
   2a5fd:	ja     2a671 <g_str_equal@plt+0x1d3b1>
   2a5ff:	cmp    edx,0x2
   2a602:	je     2a658 <g_str_equal@plt+0x1d398>
   2a604:	xor    edx,edx
   2a606:	mov    rsi,r12
   2a609:	mov    rdi,rbp
   2a60c:	call   2a120 <g_str_equal@plt+0x1ce60>
   2a611:	mov    r9,rax
   2a614:	lea    rax,[rip+0x389a6]        # 62fc1 <_fini@@Base+0x1086d>
   2a61b:	sub    rsp,0x8
   2a61f:	lea    r8,[rip+0x33282]        # 5d8a8 <_fini@@Base+0xb154>
   2a626:	lea    rcx,[rip+0x349e3]        # 5f010 <_fini@@Base+0xc8bc>
   2a62d:	lea    rsi,[rip+0x34444]        # 5ea78 <_fini@@Base+0xc324>
   2a634:	push   rax
   2a635:	mov    edx,0x229
   2a63a:	xor    eax,eax
   2a63c:	mov    rdi,rbx
   2a63f:	call   3a090 <g_str_equal@plt+0x2cdd0>
   2a644:	pop    rax
   2a645:	pop    rdx
   2a646:	add    rsp,0x8
   2a64a:	pop    rbx
   2a64b:	pop    rbp
   2a64c:	pop    r12
   2a64e:	pop    r13
   2a650:	ret    
   2a651:	nop    DWORD PTR [rax+0x0]
   2a658:	mov    rdi,rax
   2a65b:	call   2e330 <g_str_equal@plt+0x21070>
   2a660:	movsd  QWORD PTR [r13+0x0],xmm0
   2a666:	add    rsp,0x8
   2a66a:	pop    rbx
   2a66b:	pop    rbp
   2a66c:	pop    r12
   2a66e:	pop    r13
   2a670:	ret    
   2a671:	call   29b20 <g_str_equal@plt+0x1c860>
   2a676:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2a680:	push   r12
   2a682:	push   rbp
   2a683:	mov    rcx,rdx
   2a686:	push   rbx
   2a687:	mov    rbx,rdx
   2a68a:	mov    edx,0x1
   2a68f:	mov    rbp,rdi
   2a692:	mov    r12,rsi
   2a695:	call   2a360 <g_str_equal@plt+0x1d0a0>
   2a69a:	test   rax,rax
   2a69d:	je     2a6f5 <g_str_equal@plt+0x1d435>
   2a69f:	mov    edx,DWORD PTR [rax]
   2a6a1:	lea    ecx,[rdx-0x1]
   2a6a4:	cmp    ecx,0x5
   2a6a7:	ja     2a744 <g_str_equal@plt+0x1d484>
   2a6ad:	cmp    edx,0x3
   2a6b0:	je     2a738 <g_str_equal@plt+0x1d478>
   2a6b6:	sub    edx,0x4
   2a6b9:	mov    rsi,r12
   2a6bc:	mov    rdi,rbp
   2a6bf:	cmp    edx,0x1
   2a6c2:	mov    edx,0x0
   2a6c7:	jbe    2a700 <g_str_equal@plt+0x1d440>
   2a6c9:	call   2a120 <g_str_equal@plt+0x1ce60>
   2a6ce:	lea    r8,[rip+0x3451b]        # 5ebf0 <_fini@@Base+0xc49c>
   2a6d5:	lea    rcx,[rip+0x346d4]        # 5edb0 <_fini@@Base+0xc65c>
   2a6dc:	lea    rsi,[rip+0x34395]        # 5ea78 <_fini@@Base+0xc324>
   2a6e3:	mov    r9,rax
   2a6e6:	mov    edx,0xc7
   2a6eb:	mov    rdi,rbx
   2a6ee:	xor    eax,eax
   2a6f0:	call   3a090 <g_str_equal@plt+0x2cdd0>
   2a6f5:	pop    rbx
   2a6f6:	xor    eax,eax
   2a6f8:	pop    rbp
   2a6f9:	pop    r12
   2a6fb:	ret    
   2a6fc:	nop    DWORD PTR [rax+0x0]
   2a700:	call   2a120 <g_str_equal@plt+0x1ce60>
   2a705:	lea    r8,[rip+0x344bc]        # 5ebc8 <_fini@@Base+0xc474>
   2a70c:	lea    rcx,[rip+0x3469d]        # 5edb0 <_fini@@Base+0xc65c>
   2a713:	lea    rsi,[rip+0x3435e]        # 5ea78 <_fini@@Base+0xc324>
   2a71a:	mov    r9,rax
   2a71d:	mov    rdi,rbx
   2a720:	xor    eax,eax
   2a722:	mov    edx,0xc2
   2a727:	call   3a090 <g_str_equal@plt+0x2cdd0>
   2a72c:	pop    rbx
   2a72d:	xor    eax,eax
   2a72f:	pop    rbp
   2a730:	pop    r12
   2a732:	ret    
   2a733:	nop    DWORD PTR [rax+rax*1+0x0]
   2a738:	pop    rbx
   2a739:	pop    rbp
   2a73a:	pop    r12
   2a73c:	mov    rdi,rax
   2a73f:	jmp    2e8e0 <g_str_equal@plt+0x21620>
   2a744:	call   29b20 <g_str_equal@plt+0x1c860>
   2a749:	nop    DWORD PTR [rax+0x0]
   2a750:	push   rbx
   2a751:	mov    rbx,rdx
   2a754:	mov    rdx,rcx
   2a757:	call   2a680 <g_str_equal@plt+0x1d3c0>
   2a75c:	mov    rdi,rax
   2a75f:	call   c370 <g_strdup@plt>
   2a764:	mov    QWORD PTR [rbx],rax
   2a767:	pop    rbx
   2a768:	ret    
   2a769:	nop    DWORD PTR [rax+0x0]
   2a770:	push   r13
   2a772:	push   r12
   2a774:	mov    r13,rdx
   2a777:	push   rbp
   2a778:	push   rbx
   2a779:	mov    edx,0x1
   2a77e:	mov    rbp,rdi
   2a781:	mov    r12,rsi
   2a784:	mov    rbx,rcx
   2a787:	sub    rsp,0x8
   2a78b:	call   2a360 <g_str_equal@plt+0x1d0a0>
   2a790:	test   rax,rax
   2a793:	mov    QWORD PTR [r13+0x0],0x0
   2a79b:	je     2a7ee <g_str_equal@plt+0x1d52e>
   2a79d:	mov    edx,DWORD PTR [rax]
   2a79f:	lea    ecx,[rdx-0x1]
   2a7a2:	cmp    ecx,0x5
   2a7a5:	ja     2a81f <g_str_equal@plt+0x1d55f>
   2a7a7:	cmp    edx,0x3
   2a7aa:	je     2a800 <g_str_equal@plt+0x1d540>
   2a7ac:	xor    edx,edx
   2a7ae:	mov    rsi,r12
   2a7b1:	mov    rdi,rbp
   2a7b4:	call   2a120 <g_str_equal@plt+0x1ce60>
   2a7b9:	mov    r9,rax
   2a7bc:	lea    rax,[rip+0x3acfc]        # 654bf <_fini@@Base+0x12d6b>
   2a7c3:	sub    rsp,0x8
   2a7c7:	lea    r8,[rip+0x330da]        # 5d8a8 <_fini@@Base+0xb154>
   2a7ce:	lea    rcx,[rip+0x3481b]        # 5eff0 <_fini@@Base+0xc89c>
   2a7d5:	lea    rsi,[rip+0x3429c]        # 5ea78 <_fini@@Base+0xc324>
   2a7dc:	push   rax
   2a7dd:	mov    edx,0x20c
   2a7e2:	xor    eax,eax
   2a7e4:	mov    rdi,rbx
   2a7e7:	call   3a090 <g_str_equal@plt+0x2cdd0>
   2a7ec:	pop    rax
   2a7ed:	pop    rdx
   2a7ee:	add    rsp,0x8
   2a7f2:	pop    rbx
   2a7f3:	pop    rbp
   2a7f4:	pop    r12
   2a7f6:	pop    r13
   2a7f8:	ret    
   2a7f9:	nop    DWORD PTR [rax+0x0]
   2a800:	mov    rdi,rax
   2a803:	call   2e8e0 <g_str_equal@plt+0x21620>
   2a808:	mov    rdi,rax
   2a80b:	call   c370 <g_strdup@plt>
   2a810:	mov    QWORD PTR [r13+0x0],rax
   2a814:	add    rsp,0x8
   2a818:	pop    rbx
   2a819:	pop    rbp
   2a81a:	pop    r12
   2a81c:	pop    r13
   2a81e:	ret    
   2a81f:	call   29b20 <g_str_equal@plt+0x1c860>
   2a824:	xchg   ax,ax
   2a826:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2a830:	push   r13
   2a832:	push   r12
   2a834:	mov    r13,rdx
   2a837:	push   rbp
   2a838:	push   rbx
   2a839:	mov    edx,0x1
   2a83e:	mov    rbp,rdi
   2a841:	mov    r12,rsi
   2a844:	mov    rbx,rcx
   2a847:	sub    rsp,0x8
   2a84b:	call   2a360 <g_str_equal@plt+0x1d0a0>
   2a850:	test   rax,rax
   2a853:	je     2a8a6 <g_str_equal@plt+0x1d5e6>
   2a855:	mov    edx,DWORD PTR [rax]
   2a857:	lea    ecx,[rdx-0x1]
   2a85a:	cmp    ecx,0x5
   2a85d:	ja     2a8cf <g_str_equal@plt+0x1d60f>
   2a85f:	cmp    edx,0x6
   2a862:	je     2a8b8 <g_str_equal@plt+0x1d5f8>
   2a864:	xor    edx,edx
   2a866:	mov    rsi,r12
   2a869:	mov    rdi,rbp
   2a86c:	call   2a120 <g_str_equal@plt+0x1ce60>
   2a871:	mov    r9,rax
   2a874:	lea    rax,[rip+0x32d17]        # 5d592 <_fini@@Base+0xae3e>
   2a87b:	sub    rsp,0x8
   2a87f:	lea    r8,[rip+0x33022]        # 5d8a8 <_fini@@Base+0xb154>
   2a886:	lea    rcx,[rip+0x34743]        # 5efd0 <_fini@@Base+0xc87c>
   2a88d:	lea    rsi,[rip+0x341e4]        # 5ea78 <_fini@@Base+0xc324>
   2a894:	push   rax
   2a895:	mov    edx,0x1e3
   2a89a:	xor    eax,eax
   2a89c:	mov    rdi,rbx
   2a89f:	call   3a090 <g_str_equal@plt+0x2cdd0>
   2a8a4:	pop    rax
   2a8a5:	pop    rdx
   2a8a6:	add    rsp,0x8
   2a8aa:	pop    rbx
   2a8ab:	pop    rbp
   2a8ac:	pop    r12
   2a8ae:	pop    r13
   2a8b0:	ret    
   2a8b1:	nop    DWORD PTR [rax+0x0]
   2a8b8:	mov    rdi,rax
   2a8bb:	call   2f940 <g_str_equal@plt+0x22680>
   2a8c0:	mov    BYTE PTR [r13+0x0],al
   2a8c4:	add    rsp,0x8
   2a8c8:	pop    rbx
   2a8c9:	pop    rbp
   2a8ca:	pop    r12
   2a8cc:	pop    r13
   2a8ce:	ret    
   2a8cf:	call   29b20 <g_str_equal@plt+0x1c860>
   2a8d4:	xchg   ax,ax
   2a8d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2a8e0:	push   r14
   2a8e2:	push   r13
   2a8e4:	mov    r14,rdx
   2a8e7:	push   r12
   2a8e9:	push   rbp
   2a8ea:	mov    edx,0x1
   2a8ef:	push   rbx
   2a8f0:	mov    r12,rdi
   2a8f3:	mov    r13,rsi
   2a8f6:	mov    rbp,rcx
   2a8f9:	sub    rsp,0x10
   2a8fd:	mov    rax,QWORD PTR fs:0x28
   2a906:	mov    QWORD PTR [rsp+0x8],rax
   2a90b:	xor    eax,eax
   2a90d:	call   2a360 <g_str_equal@plt+0x1d0a0>
   2a912:	test   rax,rax
   2a915:	je     2a96f <g_str_equal@plt+0x1d6af>
   2a917:	mov    rbx,rax
   2a91a:	mov    eax,DWORD PTR [rax]
   2a91c:	lea    edx,[rax-0x1]
   2a91f:	cmp    edx,0x5
   2a922:	ja     2a9c0 <g_str_equal@plt+0x1d700>
   2a928:	cmp    eax,0x2
   2a92b:	je     2a990 <g_str_equal@plt+0x1d6d0>
   2a92d:	xor    edx,edx
   2a92f:	mov    rsi,r13
   2a932:	mov    rdi,r12
   2a935:	call   2a120 <g_str_equal@plt+0x1ce60>
   2a93a:	mov    r9,rax
   2a93d:	lea    rax,[rip+0x3a432]        # 64d76 <_fini@@Base+0x12622>
   2a944:	sub    rsp,0x8
   2a948:	lea    r8,[rip+0x337ae]        # 5e0fd <_fini@@Base+0xb9a9>
   2a94f:	lea    rcx,[rip+0x3465a]        # 5efb0 <_fini@@Base+0xc85c>
   2a956:	lea    rsi,[rip+0x3411b]        # 5ea78 <_fini@@Base+0xc324>
   2a95d:	push   rax
   2a95e:	mov    edx,0x1c2
   2a963:	xor    eax,eax
   2a965:	mov    rdi,rbp
   2a968:	call   3a090 <g_str_equal@plt+0x2cdd0>
   2a96d:	pop    rax
   2a96e:	pop    rdx
   2a96f:	mov    rax,QWORD PTR [rsp+0x8]
   2a974:	xor    rax,QWORD PTR fs:0x28
   2a97d:	jne    2a9bb <g_str_equal@plt+0x1d6fb>
   2a97f:	add    rsp,0x10
   2a983:	pop    rbx
   2a984:	pop    rbp
   2a985:	pop    r12
   2a987:	pop    r13
   2a989:	pop    r14
   2a98b:	ret    
   2a98c:	nop    DWORD PTR [rax+0x0]
   2a990:	mov    rsi,r14
   2a993:	mov    rdi,rbx
   2a996:	call   2e270 <g_str_equal@plt+0x20fb0>
   2a99b:	test   al,al
   2a99d:	jne    2a96f <g_str_equal@plt+0x1d6af>
   2a99f:	mov    rsi,rsp
   2a9a2:	mov    rdi,rbx
   2a9a5:	call   2e1b0 <g_str_equal@plt+0x20ef0>
   2a9aa:	test   al,al
   2a9ac:	je     2a92d <g_str_equal@plt+0x1d66d>
   2a9b2:	mov    rax,QWORD PTR [rsp]
   2a9b6:	mov    QWORD PTR [r14],rax
   2a9b9:	jmp    2a96f <g_str_equal@plt+0x1d6af>
   2a9bb:	call   cd30 <__stack_chk_fail@plt>
   2a9c0:	call   29b20 <g_str_equal@plt+0x1c860>
   2a9c5:	nop
   2a9c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2a9d0:	push   r13
   2a9d2:	push   r12
   2a9d4:	mov    r13,rdx
   2a9d7:	push   rbp
   2a9d8:	push   rbx
   2a9d9:	mov    edx,0x1
   2a9de:	mov    rbx,rdi
   2a9e1:	mov    rbp,rsi
   2a9e4:	mov    r12,rcx
   2a9e7:	sub    rsp,0x8
   2a9eb:	call   2a360 <g_str_equal@plt+0x1d0a0>
   2a9f0:	test   rax,rax
   2a9f3:	je     2aa46 <g_str_equal@plt+0x1d786>
   2a9f5:	mov    edx,DWORD PTR [rax]
   2a9f7:	lea    ecx,[rdx-0x1]
   2a9fa:	cmp    ecx,0x5
   2a9fd:	ja     2aa72 <g_str_equal@plt+0x1d7b2>
   2a9ff:	cmp    edx,0x2
   2aa02:	je     2aa58 <g_str_equal@plt+0x1d798>
   2aa04:	xor    edx,edx
   2aa06:	mov    rsi,rbp
   2aa09:	mov    rdi,rbx
   2aa0c:	call   2a120 <g_str_equal@plt+0x1ce60>
   2aa11:	mov    r9,rax
   2aa14:	lea    rax,[rip+0x3423b]        # 5ec56 <_fini@@Base+0xc502>
   2aa1b:	sub    rsp,0x8
   2aa1f:	lea    r8,[rip+0x32e82]        # 5d8a8 <_fini@@Base+0xb154>
   2aa26:	lea    rcx,[rip+0x34563]        # 5ef90 <_fini@@Base+0xc83c>
   2aa2d:	lea    rsi,[rip+0x34044]        # 5ea78 <_fini@@Base+0xc324>
   2aa34:	push   rax
   2aa35:	mov    edx,0x191
   2aa3a:	xor    eax,eax
   2aa3c:	mov    rdi,r12
   2aa3f:	call   3a090 <g_str_equal@plt+0x2cdd0>
   2aa44:	pop    rax
   2aa45:	pop    rdx
   2aa46:	add    rsp,0x8
   2aa4a:	pop    rbx
   2aa4b:	pop    rbp
   2aa4c:	pop    r12
   2aa4e:	pop    r13
   2aa50:	ret    
   2aa51:	nop    DWORD PTR [rax+0x0]
   2aa58:	mov    rsi,r13
   2aa5b:	mov    rdi,rax
   2aa5e:	call   2e1b0 <g_str_equal@plt+0x20ef0>
   2aa63:	test   al,al
   2aa65:	je     2aa04 <g_str_equal@plt+0x1d744>
   2aa67:	add    rsp,0x8
   2aa6b:	pop    rbx
   2aa6c:	pop    rbp
   2aa6d:	pop    r12
   2aa6f:	pop    r13
   2aa71:	ret    
   2aa72:	call   29b20 <g_str_equal@plt+0x1c860>
   2aa77:	nop    WORD PTR [rax+rax*1+0x0]
   2aa80:	push   r14
   2aa82:	push   r13
   2aa84:	mov    r13,rcx
   2aa87:	push   r12
   2aa89:	push   rbp
   2aa8a:	mov    rcx,r8
   2aa8d:	push   rbx
   2aa8e:	mov    rbp,rdx
   2aa91:	mov    edx,0x1
   2aa96:	mov    rbx,rdi
   2aa99:	mov    r12,rsi
   2aa9c:	mov    r14,r8
   2aa9f:	call   2a360 <g_str_equal@plt+0x1d0a0>
   2aaa4:	test   rbp,rbp
   2aaa7:	je     2aab1 <g_str_equal@plt+0x1d7f1>
   2aaa9:	mov    QWORD PTR [rbp+0x0],0x0
   2aab1:	test   rax,rax
   2aab4:	je     2ab0b <g_str_equal@plt+0x1d84b>
   2aab6:	mov    edx,DWORD PTR [rax]
   2aab8:	lea    ecx,[rdx-0x1]
   2aabb:	cmp    ecx,0x5
   2aabe:	ja     2ab4c <g_str_equal@plt+0x1d88c>
   2aac4:	cmp    edx,0x5
   2aac7:	je     2ab18 <g_str_equal@plt+0x1d858>
   2aac9:	xor    edx,edx
   2aacb:	mov    rsi,r12
   2aace:	mov    rdi,rbx
   2aad1:	call   2a120 <g_str_equal@plt+0x1ce60>
   2aad6:	mov    r9,rax
   2aad9:	lea    rax,[rip+0x3417e]        # 5ec5e <_fini@@Base+0xc50a>
   2aae0:	sub    rsp,0x8
   2aae4:	lea    r8,[rip+0x32dbd]        # 5d8a8 <_fini@@Base+0xb154>
   2aaeb:	lea    rcx,[rip+0x3439e]        # 5ee90 <_fini@@Base+0xc73c>
   2aaf2:	lea    rsi,[rip+0x33f7f]        # 5ea78 <_fini@@Base+0xc324>
   2aaf9:	push   rax
   2aafa:	mov    edx,0x146
   2aaff:	xor    eax,eax
   2ab01:	mov    rdi,r14
   2ab04:	call   3a090 <g_str_equal@plt+0x2cdd0>
   2ab09:	pop    rax
   2ab0a:	pop    rdx
   2ab0b:	pop    rbx
   2ab0c:	pop    rbp
   2ab0d:	pop    r12
   2ab0f:	pop    r13
   2ab11:	pop    r14
   2ab13:	ret    
   2ab14:	nop    DWORD PTR [rax+0x0]
   2ab18:	lea    rdi,[rbx+0xb8]
   2ab1f:	mov    rcx,rbp
   2ab22:	mov    rdx,rax
   2ab25:	mov    rsi,r12
   2ab28:	call   29f70 <g_str_equal@plt+0x1ccb0>
   2ab2d:	test   rax,rax
   2ab30:	je     2ab0b <g_str_equal@plt+0x1d84b>
   2ab32:	test   rbp,rbp
   2ab35:	je     2ab0b <g_str_equal@plt+0x1d84b>
   2ab37:	mov    rdi,r13
   2ab3a:	call   ce00 <g_malloc0@plt>
   2ab3f:	mov    QWORD PTR [rbp+0x0],rax
   2ab43:	pop    rbx
   2ab44:	pop    rbp
   2ab45:	pop    r12
   2ab47:	pop    r13
   2ab49:	pop    r14
   2ab4b:	ret    
   2ab4c:	call   29b20 <g_str_equal@plt+0x1c860>
   2ab51:	nop    DWORD PTR [rax+rax*1+0x0]
   2ab56:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2ab60:	push   r14
   2ab62:	push   r13
   2ab64:	mov    r13,rcx
   2ab67:	push   r12
   2ab69:	push   rbp
   2ab6a:	mov    rcx,r8
   2ab6d:	push   rbx
   2ab6e:	mov    rbx,rdx
   2ab71:	mov    edx,0x1
   2ab76:	mov    rbp,rdi
   2ab79:	mov    r12,rsi
   2ab7c:	mov    r14,r8
   2ab7f:	call   2a360 <g_str_equal@plt+0x1d0a0>
   2ab84:	test   rbx,rbx
   2ab87:	je     2ab90 <g_str_equal@plt+0x1d8d0>
   2ab89:	mov    QWORD PTR [rbx],0x0
   2ab90:	test   rax,rax
   2ab93:	je     2abe6 <g_str_equal@plt+0x1d926>
   2ab95:	mov    edx,DWORD PTR [rax]
   2ab97:	lea    ecx,[rdx-0x1]
   2ab9a:	cmp    ecx,0x5
   2ab9d:	ja     2ac1e <g_str_equal@plt+0x1d95e>
   2ab9f:	cmp    edx,0x4
   2aba2:	je     2abf0 <g_str_equal@plt+0x1d930>
   2aba4:	xor    edx,edx
   2aba6:	mov    rsi,r12
   2aba9:	mov    rdi,rbp
   2abac:	call   2a120 <g_str_equal@plt+0x1ce60>
   2abb1:	mov    r9,rax
   2abb4:	lea    rax,[rip+0x3561c]        # 601d7 <_fini@@Base+0xda83>
   2abbb:	sub    rsp,0x8
   2abbf:	lea    r8,[rip+0x32ce2]        # 5d8a8 <_fini@@Base+0xb154>
   2abc6:	lea    rcx,[rip+0x34223]        # 5edf0 <_fini@@Base+0xc69c>
   2abcd:	lea    rsi,[rip+0x33ea4]        # 5ea78 <_fini@@Base+0xc324>
   2abd4:	push   rax
   2abd5:	mov    edx,0x121
   2abda:	xor    eax,eax
   2abdc:	mov    rdi,r14
   2abdf:	call   3a090 <g_str_equal@plt+0x2cdd0>
   2abe4:	pop    rax
   2abe5:	pop    rdx
   2abe6:	pop    rbx
   2abe7:	pop    rbp
   2abe8:	pop    r12
   2abea:	pop    r13
   2abec:	pop    r14
   2abee:	ret    
   2abef:	nop
   2abf0:	lea    rdi,[rbp+0xb8]
   2abf7:	mov    rcx,rbx
   2abfa:	mov    rdx,rax
   2abfd:	mov    rsi,r12
   2ac00:	call   29f70 <g_str_equal@plt+0x1ccb0>
   2ac05:	test   rbx,rbx
   2ac08:	je     2abe6 <g_str_equal@plt+0x1d926>
   2ac0a:	mov    rdi,r13
   2ac0d:	call   ce00 <g_malloc0@plt>
   2ac12:	mov    QWORD PTR [rbx],rax
   2ac15:	pop    rbx
   2ac16:	pop    rbp
   2ac17:	pop    r12
   2ac19:	pop    r13
   2ac1b:	pop    r14
   2ac1d:	ret    
   2ac1e:	call   29b20 <g_str_equal@plt+0x1c860>
   2ac23:	nop    DWORD PTR [rax]
   2ac26:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2ac30:	push   r12
   2ac32:	push   rbp
   2ac33:	push   rbx
   2ac34:	sub    rsp,0x40
   2ac38:	mov    rax,QWORD PTR fs:0x28
   2ac41:	mov    QWORD PTR [rsp+0x38],rax
   2ac46:	xor    eax,eax
   2ac48:	mov    rax,QWORD PTR [rdi+0xb8]
   2ac4f:	test   rax,rax
   2ac52:	je     2acd8 <g_str_equal@plt+0x1da18>
   2ac58:	cmp    QWORD PTR [rax+0x20],0x0
   2ac5d:	jne    2acd8 <g_str_equal@plt+0x1da18>
   2ac5f:	lea    rbx,[rsp+0x10]
   2ac64:	mov    r12,rsi
   2ac67:	mov    rsi,QWORD PTR [rax+0x18]
   2ac6b:	mov    rbp,rdi
   2ac6e:	mov    rdi,rbx
   2ac71:	call   c830 <g_hash_table_iter_init@plt>
   2ac76:	lea    rsi,[rsp+0x8]
   2ac7b:	xor    edx,edx
   2ac7d:	mov    rdi,rbx
   2ac80:	call   c820 <g_hash_table_iter_next@plt>
   2ac85:	test   eax,eax
   2ac87:	je     2acbf <g_str_equal@plt+0x1d9ff>
   2ac89:	mov    rsi,QWORD PTR [rsp+0x8]
   2ac8e:	xor    edx,edx
   2ac90:	mov    rdi,rbp
   2ac93:	call   2a120 <g_str_equal@plt+0x1ce60>
   2ac98:	lea    r8,[rip+0x33fd8]        # 5ec77 <_fini@@Base+0xc523>
   2ac9f:	lea    rcx,[rip+0x3416a]        # 5ee10 <_fini@@Base+0xc6bc>
   2aca6:	lea    rsi,[rip+0x33dcb]        # 5ea78 <_fini@@Base+0xc324>
   2acad:	mov    r9,rax
   2acb0:	mov    edx,0xfc
   2acb5:	mov    rdi,r12
   2acb8:	xor    eax,eax
   2acba:	call   3a090 <g_str_equal@plt+0x2cdd0>
   2acbf:	mov    rax,QWORD PTR [rsp+0x38]
   2acc4:	xor    rax,QWORD PTR fs:0x28
   2accd:	jne    2acf7 <g_str_equal@plt+0x1da37>
   2accf:	add    rsp,0x40
   2acd3:	pop    rbx
   2acd4:	pop    rbp
   2acd5:	pop    r12
   2acd7:	ret    
   2acd8:	lea    rcx,[rip+0x34151]        # 5ee30 <_fini@@Base+0xc6dc>
   2acdf:	lea    rsi,[rip+0x33d92]        # 5ea78 <_fini@@Base+0xc324>
   2ace6:	lea    rdi,[rip+0x33f77]        # 5ec64 <_fini@@Base+0xc510>
   2aced:	mov    edx,0xf7
   2acf2:	call   c390 <__assert_fail@plt>
   2acf7:	call   cd30 <__stack_chk_fail@plt>
   2acfc:	nop    DWORD PTR [rax+0x0]
   2ad00:	push   r13
   2ad02:	push   r12
   2ad04:	mov    r13,rdx
   2ad07:	push   rbp
   2ad08:	push   rbx
   2ad09:	mov    rdx,rcx
   2ad0c:	mov    rbp,rdi
   2ad0f:	mov    r12,rsi
   2ad12:	mov    rbx,rcx
   2ad15:	sub    rsp,0x8
   2ad19:	call   2a680 <g_str_equal@plt+0x1d3c0>
   2ad1e:	test   rax,rax
   2ad21:	je     2ad34 <g_str_equal@plt+0x1da74>
   2ad23:	xor    esi,esi
   2ad25:	mov    rdx,r13
   2ad28:	mov    rdi,rax
   2ad2b:	call   32d50 <g_str_equal@plt+0x25a90>
   2ad30:	test   eax,eax
   2ad32:	js     2ad40 <g_str_equal@plt+0x1da80>
   2ad34:	add    rsp,0x8
   2ad38:	pop    rbx
   2ad39:	pop    rbp
   2ad3a:	pop    r12
   2ad3c:	pop    r13
   2ad3e:	ret    
   2ad3f:	nop
   2ad40:	mov    rsi,r12
   2ad43:	mov    rdi,rbp
   2ad46:	xor    edx,edx
   2ad48:	call   2a120 <g_str_equal@plt+0x1ce60>
   2ad4d:	mov    r9,rax
   2ad50:	lea    rax,[rip+0x37392]        # 620e9 <_fini@@Base+0xf995>
   2ad57:	sub    rsp,0x8
   2ad5b:	lea    r8,[rip+0x3339b]        # 5e0fd <_fini@@Base+0xb9a9>
   2ad62:	lea    rcx,[rip+0x34067]        # 5edd0 <_fini@@Base+0xc67c>
   2ad69:	lea    rsi,[rip+0x33d08]        # 5ea78 <_fini@@Base+0xc324>
   2ad70:	push   rax
   2ad71:	mov    edx,0x272
   2ad76:	mov    rdi,rbx
   2ad79:	xor    eax,eax
   2ad7b:	call   3a090 <g_str_equal@plt+0x2cdd0>
   2ad80:	pop    rax
   2ad81:	pop    rdx
   2ad82:	add    rsp,0x8
   2ad86:	pop    rbx
   2ad87:	pop    rbp
   2ad88:	pop    r12
   2ad8a:	pop    r13
   2ad8c:	ret    
   2ad8d:	nop    DWORD PTR [rax]
   2ad90:	push   r15
   2ad92:	push   r14
   2ad94:	mov    r15,rdx
   2ad97:	push   r13
   2ad99:	push   r12
   2ad9b:	mov    rdx,rcx
   2ad9e:	push   rbp
   2ad9f:	push   rbx
   2ada0:	mov    r12,rdi
   2ada3:	mov    r13,rsi
   2ada6:	mov    rbp,rcx
   2ada9:	sub    rsp,0x18
   2adad:	mov    rax,QWORD PTR fs:0x28
   2adb6:	mov    QWORD PTR [rsp+0x8],rax
   2adbb:	xor    eax,eax
   2adbd:	call   2a680 <g_str_equal@plt+0x1d3c0>
   2adc2:	test   rax,rax
   2adc5:	je     2ae3f <g_str_equal@plt+0x1db7f>
   2adc7:	mov    rbx,rax
   2adca:	call   cc80 <__errno_location@plt>
   2adcf:	mov    rsi,rsp
   2add2:	mov    r14,rax
   2add5:	mov    DWORD PTR [rax],0x0
   2addb:	mov    rdi,rbx
   2adde:	call   d240 <strtod@plt>
   2ade3:	movsd  QWORD PTR [r15],xmm0
   2ade8:	mov    ecx,DWORD PTR [r14]
   2adeb:	test   ecx,ecx
   2aded:	jne    2adfd <g_str_equal@plt+0x1db3d>
   2adef:	mov    rax,QWORD PTR [rsp]
   2adf3:	cmp    rax,rbx
   2adf6:	je     2adfd <g_str_equal@plt+0x1db3d>
   2adf8:	cmp    BYTE PTR [rax],0x0
   2adfb:	je     2ae60 <g_str_equal@plt+0x1dba0>
   2adfd:	xor    edx,edx
   2adff:	mov    rsi,r13
   2ae02:	mov    rdi,r12
   2ae05:	call   2a120 <g_str_equal@plt+0x1ce60>
   2ae0a:	mov    r9,rax
   2ae0d:	lea    rax,[rip+0x381ad]        # 62fc1 <_fini@@Base+0x1086d>
   2ae14:	sub    rsp,0x8
   2ae18:	lea    r8,[rip+0x32a89]        # 5d8a8 <_fini@@Base+0xb154>
   2ae1f:	lea    rcx,[rip+0x33f5a]        # 5ed80 <_fini@@Base+0xc62c>
   2ae26:	lea    rsi,[rip+0x33c4b]        # 5ea78 <_fini@@Base+0xc324>
   2ae2d:	push   rax
   2ae2e:	mov    edx,0x240
   2ae33:	xor    eax,eax
   2ae35:	mov    rdi,rbp
   2ae38:	call   3a090 <g_str_equal@plt+0x2cdd0>
   2ae3d:	pop    rax
   2ae3e:	pop    rdx
   2ae3f:	mov    rax,QWORD PTR [rsp+0x8]
   2ae44:	xor    rax,QWORD PTR fs:0x28
   2ae4d:	jne    2ae78 <g_str_equal@plt+0x1dbb8>
   2ae4f:	add    rsp,0x18
   2ae53:	pop    rbx
   2ae54:	pop    rbp
   2ae55:	pop    r12
   2ae57:	pop    r13
   2ae59:	pop    r14
   2ae5b:	pop    r15
   2ae5d:	ret    
   2ae5e:	xchg   ax,ax
   2ae60:	andpd  xmm0,XMMWORD PTR [rip+0x34248]        # 5f0b0 <_fini@@Base+0xc95c>
   2ae68:	movsd  xmm1,QWORD PTR [rip+0x34250]        # 5f0c0 <_fini@@Base+0xc96c>
   2ae70:	ucomisd xmm1,xmm0
   2ae74:	jb     2adfd <g_str_equal@plt+0x1db3d>
   2ae76:	jmp    2ae3f <g_str_equal@plt+0x1db7f>
   2ae78:	call   cd30 <__stack_chk_fail@plt>
   2ae7d:	nop    DWORD PTR [rax]
   2ae80:	push   r13
   2ae82:	push   r12
   2ae84:	mov    r13,rdx
   2ae87:	push   rbp
   2ae88:	push   rbx
   2ae89:	mov    rdx,rcx
   2ae8c:	mov    rbp,rdi
   2ae8f:	mov    r12,rsi
   2ae92:	mov    rbx,rcx
   2ae95:	sub    rsp,0x8
   2ae99:	call   2a680 <g_str_equal@plt+0x1d3c0>
   2ae9e:	test   rax,rax
   2aea1:	je     2aedd <g_str_equal@plt+0x1dc1d>
   2aea3:	lea    rdi,[rip+0x3778e]        # 62638 <_fini@@Base+0xfee4>
   2aeaa:	mov    ecx,0x3
   2aeaf:	mov    rsi,rax
   2aeb2:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   2aeb4:	seta   dl
   2aeb7:	sbb    dl,0x0
   2aeba:	test   dl,dl
   2aebc:	je     2aef0 <g_str_equal@plt+0x1dc30>
   2aebe:	lea    rdi,[rip+0x37777]        # 6263c <_fini@@Base+0xfee8>
   2aec5:	mov    rsi,rax
   2aec8:	mov    ecx,0x4
   2aecd:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   2aecf:	seta   al
   2aed2:	sbb    al,0x0
   2aed4:	test   al,al
   2aed6:	jne    2af00 <g_str_equal@plt+0x1dc40>
   2aed8:	mov    BYTE PTR [r13+0x0],0x0
   2aedd:	add    rsp,0x8
   2aee1:	pop    rbx
   2aee2:	pop    rbp
   2aee3:	pop    r12
   2aee5:	pop    r13
   2aee7:	ret    
   2aee8:	nop    DWORD PTR [rax+rax*1+0x0]
   2aef0:	mov    BYTE PTR [r13+0x0],0x1
   2aef5:	add    rsp,0x8
   2aef9:	pop    rbx
   2aefa:	pop    rbp
   2aefb:	pop    r12
   2aefd:	pop    r13
   2aeff:	ret    
   2af00:	mov    rsi,r12
   2af03:	mov    rdi,rbp
   2af06:	xor    edx,edx
   2af08:	call   2a120 <g_str_equal@plt+0x1ce60>
   2af0d:	mov    r9,rax
   2af10:	lea    rax,[rip+0x33d7d]        # 5ec94 <_fini@@Base+0xc540>
   2af17:	sub    rsp,0x8
   2af1b:	lea    r8,[rip+0x331db]        # 5e0fd <_fini@@Base+0xb9a9>
   2af22:	lea    rcx,[rip+0x33e27]        # 5ed50 <_fini@@Base+0xc5fc>
   2af29:	lea    rsi,[rip+0x33b48]        # 5ea78 <_fini@@Base+0xc324>
   2af30:	push   rax
   2af31:	mov    edx,0x1fa
   2af36:	mov    rdi,rbx
   2af39:	xor    eax,eax
   2af3b:	call   3a090 <g_str_equal@plt+0x2cdd0>
   2af40:	pop    rax
   2af41:	pop    rdx
   2af42:	add    rsp,0x8
   2af46:	pop    rbx
   2af47:	pop    rbp
   2af48:	pop    r12
   2af4a:	pop    r13
   2af4c:	ret    
   2af4d:	nop    DWORD PTR [rax]
   2af50:	push   r13
   2af52:	push   r12
   2af54:	mov    r13,rdx
   2af57:	push   rbp
   2af58:	push   rbx
   2af59:	mov    rdx,rcx
   2af5c:	mov    rbp,rdi
   2af5f:	mov    r12,rsi
   2af62:	mov    rbx,rcx
   2af65:	sub    rsp,0x8
   2af69:	call   2a680 <g_str_equal@plt+0x1d3c0>
   2af6e:	test   rax,rax
   2af71:	je     2af86 <g_str_equal@plt+0x1dcc6>
   2af73:	xor    edx,edx
   2af75:	xor    esi,esi
   2af77:	mov    rcx,r13
   2af7a:	mov    rdi,rax
   2af7d:	call   33290 <g_str_equal@plt+0x25fd0>
   2af82:	test   eax,eax
   2af84:	js     2af98 <g_str_equal@plt+0x1dcd8>
   2af86:	add    rsp,0x8
   2af8a:	pop    rbx
   2af8b:	pop    rbp
   2af8c:	pop    r12
   2af8e:	pop    r13
   2af90:	ret    
   2af91:	nop    DWORD PTR [rax+0x0]
   2af98:	mov    rsi,r12
   2af9b:	mov    rdi,rbp
   2af9e:	xor    edx,edx
   2afa0:	call   2a120 <g_str_equal@plt+0x1ce60>
   2afa5:	mov    r9,rax
   2afa8:	lea    rax,[rip+0x33ca7]        # 5ec56 <_fini@@Base+0xc502>
   2afaf:	sub    rsp,0x8
   2afb3:	lea    r8,[rip+0x33143]        # 5e0fd <_fini@@Base+0xb9a9>
   2afba:	lea    rcx,[rip+0x33d5f]        # 5ed20 <_fini@@Base+0xc5cc>
   2afc1:	lea    rsi,[rip+0x33ab0]        # 5ea78 <_fini@@Base+0xc324>
   2afc8:	push   rax
   2afc9:	mov    edx,0x1d2
   2afce:	mov    rdi,rbx
   2afd1:	xor    eax,eax
   2afd3:	call   3a090 <g_str_equal@plt+0x2cdd0>
   2afd8:	pop    rax
   2afd9:	pop    rdx
   2afda:	add    rsp,0x8
   2afde:	pop    rbx
   2afdf:	pop    rbp
   2afe0:	pop    r12
   2afe2:	pop    r13
   2afe4:	ret    
   2afe5:	nop
   2afe6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2aff0:	push   r13
   2aff2:	push   r12
   2aff4:	mov    r13,rdx
   2aff7:	push   rbp
   2aff8:	push   rbx
   2aff9:	mov    rdx,rcx
   2affc:	mov    rbp,rdi
   2afff:	mov    r12,rsi
   2b002:	mov    rbx,rcx
   2b005:	sub    rsp,0x8
   2b009:	call   2a680 <g_str_equal@plt+0x1d3c0>
   2b00e:	test   rax,rax
   2b011:	je     2b026 <g_str_equal@plt+0x1dd66>
   2b013:	xor    edx,edx
   2b015:	xor    esi,esi
   2b017:	mov    rcx,r13
   2b01a:	mov    rdi,rax
   2b01d:	call   331d0 <g_str_equal@plt+0x25f10>
   2b022:	test   eax,eax
   2b024:	js     2b038 <g_str_equal@plt+0x1dd78>
   2b026:	add    rsp,0x8
   2b02a:	pop    rbx
   2b02b:	pop    rbp
   2b02c:	pop    r12
   2b02e:	pop    r13
   2b030:	ret    
   2b031:	nop    DWORD PTR [rax+0x0]
   2b038:	mov    rsi,r12
   2b03b:	mov    rdi,rbp
   2b03e:	xor    edx,edx
   2b040:	call   2a120 <g_str_equal@plt+0x1ce60>
   2b045:	mov    r9,rax
   2b048:	lea    rax,[rip+0x33c07]        # 5ec56 <_fini@@Base+0xc502>
   2b04f:	sub    rsp,0x8
   2b053:	lea    r8,[rip+0x330a3]        # 5e0fd <_fini@@Base+0xb9a9>
   2b05a:	lea    rcx,[rip+0x33c9f]        # 5ed00 <_fini@@Base+0xc5ac>
   2b061:	lea    rsi,[rip+0x33a10]        # 5ea78 <_fini@@Base+0xc324>
   2b068:	push   rax
   2b069:	mov    edx,0x1a2
   2b06e:	mov    rdi,rbx
   2b071:	xor    eax,eax
   2b073:	call   3a090 <g_str_equal@plt+0x2cdd0>
   2b078:	pop    rax
   2b079:	pop    rdx
   2b07a:	add    rsp,0x8
   2b07e:	pop    rbx
   2b07f:	pop    rbp
   2b080:	pop    r12
   2b082:	pop    r13
   2b084:	ret    
   2b085:	nop
   2b086:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2b090:	sub    rsp,0x8
   2b094:	call   29d10 <g_str_equal@plt+0x1ca50>
   2b099:	lea    rdx,[rip+0xfffffffffffff930]        # 2a9d0 <g_str_equal@plt+0x1d710>
   2b0a0:	lea    rcx,[rip+0xfffffffffffff839]        # 2a8e0 <g_str_equal@plt+0x1d620>
   2b0a7:	lea    rsi,[rip+0xfffffffffffff782]        # 2a830 <g_str_equal@plt+0x1d570>
   2b0ae:	mov    QWORD PTR [rax+0x48],rdx
   2b0b2:	lea    rdx,[rip+0xfffffffffffff6b7]        # 2a770 <g_str_equal@plt+0x1d4b0>
   2b0b9:	mov    QWORD PTR [rax+0x50],rcx
   2b0bd:	mov    QWORD PTR [rax+0x60],rsi
   2b0c1:	lea    rcx,[rip+0xfffffffffffff508]        # 2a5d0 <g_str_equal@plt+0x1d310>
   2b0c8:	lea    rsi,[rip+0xfffffffffffff311]        # 2a3e0 <g_str_equal@plt+0x1d120>
   2b0cf:	mov    QWORD PTR [rax+0x68],rdx
   2b0d3:	lea    rdx,[rip+0xfffffffffffff396]        # 2a470 <g_str_equal@plt+0x1d1b0>
   2b0da:	mov    QWORD PTR [rax+0x70],rcx
   2b0de:	mov    QWORD PTR [rax+0x78],rsi
   2b0e2:	mov    QWORD PTR [rax+0x80],rdx
   2b0e9:	add    rsp,0x8
   2b0ed:	ret    
   2b0ee:	xchg   ax,ax
   2b0f0:	sub    rsp,0x8
   2b0f4:	call   29d10 <g_str_equal@plt+0x1ca50>
   2b0f9:	lea    rdx,[rip+0xfffffffffffffef0]        # 2aff0 <g_str_equal@plt+0x1dd30>
   2b100:	lea    rcx,[rip+0xfffffffffffffe49]        # 2af50 <g_str_equal@plt+0x1dc90>
   2b107:	lea    rsi,[rip+0xfffffffffffffd72]        # 2ae80 <g_str_equal@plt+0x1dbc0>
   2b10e:	mov    BYTE PTR [rax+0xb0],0x1
   2b115:	mov    QWORD PTR [rax+0x48],rdx
   2b119:	mov    QWORD PTR [rax+0x50],rcx
   2b11d:	lea    rdx,[rip+0xfffffffffffff62c]        # 2a750 <g_str_equal@plt+0x1d490>
   2b124:	lea    rcx,[rip+0xfffffffffffffc65]        # 2ad90 <g_str_equal@plt+0x1dad0>
   2b12b:	mov    QWORD PTR [rax+0x60],rsi
   2b12f:	lea    rsi,[rip+0xfffffffffffff2aa]        # 2a3e0 <g_str_equal@plt+0x1d120>
   2b136:	mov    QWORD PTR [rax+0x68],rdx
   2b13a:	lea    rdx,[rip+0xfffffffffffff32f]        # 2a470 <g_str_equal@plt+0x1d1b0>
   2b141:	mov    QWORD PTR [rax+0x70],rcx
   2b145:	lea    rcx,[rip+0xfffffffffffffbb4]        # 2ad00 <g_str_equal@plt+0x1da40>
   2b14c:	mov    QWORD PTR [rax+0x78],rsi
   2b150:	mov    QWORD PTR [rax+0x80],rdx
   2b157:	mov    QWORD PTR [rax+0x58],rcx
   2b15b:	add    rsp,0x8
   2b15f:	ret    
   2b160:	push   rbp
   2b161:	push   rbx
   2b162:	mov    rbp,rdx
   2b165:	sub    rsp,0x18
   2b169:	cmp    BYTE PTR [rdi],0x7b
   2b16c:	je     2b1b0 <g_str_equal@plt+0x1def0>
   2b16e:	call   41880 <g_str_equal@plt+0x345c0>
   2b173:	test   rax,rax
   2b176:	mov    rbx,rax
   2b179:	je     2b290 <g_str_equal@plt+0x1dfd0>
   2b17f:	mov    rdi,rax
   2b182:	call   2b0f0 <g_str_equal@plt+0x1de30>
   2b187:	mov    rdx,QWORD PTR [rbx+0x8]
   2b18b:	test   rdx,rdx
   2b18e:	je     2b299 <g_str_equal@plt+0x1dfd9>
   2b194:	sub    rdx,0x1
   2b198:	test   rdx,rdx
   2b19b:	mov    QWORD PTR [rbx+0x8],rdx
   2b19f:	je     2b240 <g_str_equal@plt+0x1df80>
   2b1a5:	add    rsp,0x18
   2b1a9:	pop    rbx
   2b1aa:	pop    rbp
   2b1ab:	ret    
   2b1ac:	nop    DWORD PTR [rax+0x0]
   2b1b0:	mov    rsi,rdx
   2b1b3:	call   300d0 <g_str_equal@plt+0x22e10>
   2b1b8:	test   rax,rax
   2b1bb:	mov    rbx,rax
   2b1be:	je     2b260 <g_str_equal@plt+0x1dfa0>
   2b1c4:	mov    eax,DWORD PTR [rax]
   2b1c6:	lea    edx,[rax-0x1]
   2b1c9:	cmp    edx,0x5
   2b1cc:	ja     2b29e <g_str_equal@plt+0x1dfde>
   2b1d2:	cmp    eax,0x4
   2b1d5:	jne    2b2a3 <g_str_equal@plt+0x1dfe3>
   2b1db:	mov    rdi,rbx
   2b1de:	call   29d10 <g_str_equal@plt+0x1ca50>
   2b1e3:	lea    rcx,[rip+0xfffffffffffff7e6]        # 2a9d0 <g_str_equal@plt+0x1d710>
   2b1ea:	mov    QWORD PTR [rax+0x48],rcx
   2b1ee:	lea    rcx,[rip+0xfffffffffffff6eb]        # 2a8e0 <g_str_equal@plt+0x1d620>
   2b1f5:	mov    QWORD PTR [rax+0x50],rcx
   2b1f9:	lea    rcx,[rip+0xfffffffffffff630]        # 2a830 <g_str_equal@plt+0x1d570>
   2b200:	mov    QWORD PTR [rax+0x60],rcx
   2b204:	lea    rcx,[rip+0xfffffffffffff565]        # 2a770 <g_str_equal@plt+0x1d4b0>
   2b20b:	mov    QWORD PTR [rax+0x68],rcx
   2b20f:	lea    rcx,[rip+0xfffffffffffff3ba]        # 2a5d0 <g_str_equal@plt+0x1d310>
   2b216:	mov    QWORD PTR [rax+0x70],rcx
   2b21a:	lea    rcx,[rip+0xfffffffffffff1bf]        # 2a3e0 <g_str_equal@plt+0x1d120>
   2b221:	mov    QWORD PTR [rax+0x78],rcx
   2b225:	lea    rcx,[rip+0xfffffffffffff244]        # 2a470 <g_str_equal@plt+0x1d1b0>
   2b22c:	mov    QWORD PTR [rax+0x80],rcx
   2b233:	jmp    2b187 <g_str_equal@plt+0x1dec7>
   2b238:	nop    DWORD PTR [rax+rax*1+0x0]
   2b240:	mov    rdi,rbx
   2b243:	mov    QWORD PTR [rsp+0x8],rax
   2b248:	call   30300 <g_str_equal@plt+0x23040>
   2b24d:	mov    rax,QWORD PTR [rsp+0x8]
   2b252:	add    rsp,0x18
   2b256:	pop    rbx
   2b257:	pop    rbp
   2b258:	ret    
   2b259:	nop    DWORD PTR [rax+0x0]
   2b260:	test   rbp,rbp
   2b263:	je     2b290 <g_str_equal@plt+0x1dfd0>
   2b265:	cmp    QWORD PTR [rbp+0x0],0x0
   2b26a:	jne    2b290 <g_str_equal@plt+0x1dfd0>
   2b26c:	lea    r8,[rip+0x33a2f]        # 5eca2 <_fini@@Base+0xc54e>
   2b273:	lea    rcx,[rip+0x33a66]        # 5ece0 <_fini@@Base+0xc58c>
   2b27a:	lea    rsi,[rip+0x337f7]        # 5ea78 <_fini@@Base+0xc324>
   2b281:	mov    edx,0x2da
   2b286:	mov    rdi,rbp
   2b289:	xor    eax,eax
   2b28b:	call   3a090 <g_str_equal@plt+0x2cdd0>
   2b290:	add    rsp,0x18
   2b294:	xor    eax,eax
   2b296:	pop    rbx
   2b297:	pop    rbp
   2b298:	ret    
   2b299:	call   d339 <g_str_equal@plt+0x79>
   2b29e:	call   29b20 <g_str_equal@plt+0x1c860>
   2b2a3:	lea    rcx,[rip+0x33a16]        # 5ecc0 <_fini@@Base+0xc56c>
   2b2aa:	lea    rsi,[rip+0x337c7]        # 5ea78 <_fini@@Base+0xc324>
   2b2b1:	lea    rdi,[rip+0x339fb]        # 5ecb3 <_fini@@Base+0xc55f>
   2b2b8:	mov    edx,0x2e0
   2b2bd:	call   c390 <__assert_fail@plt>
   2b2c2:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2b2cc:	nop    DWORD PTR [rax+0x0]
   2b2d0:	mov    rax,QWORD PTR [rsi]
   2b2d3:	ret    
   2b2d4:	xchg   ax,ax
   2b2d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2b2e0:	push   rbx
   2b2e1:	mov    rbx,rdi
   2b2e4:	mov    rdi,QWORD PTR [rdi+0xa8]
   2b2eb:	test   rdi,rdi
   2b2ee:	je     2b30c <g_str_equal@plt+0x1e04c>
   2b2f0:	mov    rax,QWORD PTR [rdi+0x10]
   2b2f4:	mov    QWORD PTR [rbx+0xa8],rax
   2b2fb:	call   d2b0 <g_free@plt>
   2b300:	mov    rdi,QWORD PTR [rbx+0xa8]
   2b307:	test   rdi,rdi
   2b30a:	jne    2b2f0 <g_str_equal@plt+0x1e030>
   2b30c:	mov    rdi,QWORD PTR [rbx+0xb0]
   2b313:	test   rdi,rdi
   2b316:	je     2b32e <g_str_equal@plt+0x1e06e>
   2b318:	mov    rax,QWORD PTR [rdi+0x8]
   2b31c:	test   rax,rax
   2b31f:	je     2b34e <g_str_equal@plt+0x1e08e>
   2b321:	sub    rax,0x1
   2b325:	test   rax,rax
   2b328:	mov    QWORD PTR [rdi+0x8],rax
   2b32c:	je     2b340 <g_str_equal@plt+0x1e080>
   2b32e:	mov    rdi,rbx
   2b331:	pop    rbx
   2b332:	jmp    d2b0 <g_free@plt>
   2b337:	nop    WORD PTR [rax+rax*1+0x0]
   2b340:	call   30300 <g_str_equal@plt+0x23040>
   2b345:	mov    rdi,rbx
   2b348:	pop    rbx
   2b349:	jmp    d2b0 <g_free@plt>
   2b34e:	lea    rcx,[rip+0x33f5b]        # 5f2b0 <_fini@@Base+0xcb5c>
   2b355:	lea    rsi,[rip+0x3233c]        # 5d698 <_fini@@Base+0xaf44>
   2b35c:	lea    rdi,[rip+0x3218c]        # 5d4ef <_fini@@Base+0xad9b>
   2b363:	mov    edx,0x62
   2b368:	call   c390 <__assert_fail@plt>
   2b36d:	nop    DWORD PTR [rax]
   2b370:	sub    rsp,0x8
   2b374:	mov    rax,QWORD PTR [rdi+0xb0]
   2b37b:	test   rax,rax
   2b37e:	je     2b3b2 <g_str_equal@plt+0x1e0f2>
   2b380:	cmp    QWORD PTR [rdi+0xa8],0x0
   2b388:	jne    2b3b2 <g_str_equal@plt+0x1e0f2>
   2b38a:	cmp    QWORD PTR [rdi+0xb8],rsi
   2b391:	jne    2b3d1 <g_str_equal@plt+0x1e111>
   2b393:	add    QWORD PTR [rax+0x8],0x1
   2b398:	mov    rdx,QWORD PTR [rdi+0xb8]
   2b39f:	mov    QWORD PTR [rdx],rax
   2b3a2:	mov    QWORD PTR [rdi+0xb8],0x0
   2b3ad:	add    rsp,0x8
   2b3b1:	ret    
   2b3b2:	lea    rcx,[rip+0x33ed7]        # 5f290 <_fini@@Base+0xcb3c>
   2b3b9:	lea    rsi,[rip+0x33d08]        # 5f0c8 <_fini@@Base+0xc974>
   2b3c0:	lea    rdi,[rip+0x33d49]        # 5f110 <_fini@@Base+0xc9bc>
   2b3c7:	mov    edx,0xd2
   2b3cc:	call   c390 <__assert_fail@plt>
   2b3d1:	lea    rcx,[rip+0x33eb8]        # 5f290 <_fini@@Base+0xcb3c>
   2b3d8:	lea    rsi,[rip+0x33ce9]        # 5f0c8 <_fini@@Base+0xc974>
   2b3df:	lea    rdi,[rip+0x33d9d]        # 5f183 <_fini@@Base+0xca2f>
   2b3e6:	mov    edx,0xd3
   2b3eb:	call   c390 <__assert_fail@plt>
   2b3f0:	push   rbx
   2b3f1:	mov    rdx,QWORD PTR [rdi]
   2b3f4:	test   rdx,rdx
   2b3f7:	je     2b41b <g_str_equal@plt+0x1e15b>
   2b3f9:	cmp    QWORD PTR [rdx+0x8],rsi
   2b3fd:	jne    2b459 <g_str_equal@plt+0x1e199>
   2b3ff:	mov    rax,QWORD PTR [rdx+0x10]
   2b403:	mov    QWORD PTR [rdi],rax
   2b406:	mov    rbx,QWORD PTR [rdx]
   2b409:	test   rbx,rbx
   2b40c:	je     2b43a <g_str_equal@plt+0x1e17a>
   2b40e:	mov    rdi,rdx
   2b411:	call   d2b0 <g_free@plt>
   2b416:	mov    rax,rbx
   2b419:	pop    rbx
   2b41a:	ret    
   2b41b:	lea    rcx,[rip+0x33dde]        # 5f200 <_fini@@Base+0xcaac>
   2b422:	lea    rsi,[rip+0x33c9f]        # 5f0c8 <_fini@@Base+0xc974>
   2b429:	lea    rdi,[rip+0x32205]        # 5d635 <_fini@@Base+0xaee1>
   2b430:	mov    edx,0x45
   2b435:	call   c390 <__assert_fail@plt>
   2b43a:	lea    rcx,[rip+0x33dbf]        # 5f200 <_fini@@Base+0xcaac>
   2b441:	lea    rsi,[rip+0x33c80]        # 5f0c8 <_fini@@Base+0xc974>
   2b448:	lea    rdi,[rip+0x343f7]        # 5f846 <_fini@@Base+0xd0f2>
   2b44f:	mov    edx,0x49
   2b454:	call   c390 <__assert_fail@plt>
   2b459:	lea    rcx,[rip+0x33da0]        # 5f200 <_fini@@Base+0xcaac>
   2b460:	lea    rsi,[rip+0x33c61]        # 5f0c8 <_fini@@Base+0xc974>
   2b467:	lea    rdi,[rip+0x33d2b]        # 5f199 <_fini@@Base+0xca45>
   2b46e:	mov    edx,0x46
   2b473:	call   c390 <__assert_fail@plt>
   2b478:	nop    DWORD PTR [rax+rax*1+0x0]
   2b480:	sub    rsp,0x8
   2b484:	add    rdi,0xa8
   2b48b:	call   2b3f0 <g_str_equal@plt+0x1e130>
   2b490:	mov    eax,DWORD PTR [rax]
   2b492:	lea    edx,[rax-0x1]
   2b495:	cmp    edx,0x5
   2b498:	ja     2b4a4 <g_str_equal@plt+0x1e1e4>
   2b49a:	cmp    eax,0x5
   2b49d:	jne    2b4a9 <g_str_equal@plt+0x1e1e9>
   2b49f:	add    rsp,0x8
   2b4a3:	ret    
   2b4a4:	call   d35c <g_str_equal@plt+0x9c>
   2b4a9:	lea    rcx,[rip+0x33d70]        # 5f220 <_fini@@Base+0xcacc>
   2b4b0:	lea    rsi,[rip+0x33c11]        # 5f0c8 <_fini@@Base+0xc974>
   2b4b7:	lea    rdi,[rip+0x33c7a]        # 5f138 <_fini@@Base+0xc9e4>
   2b4be:	mov    edx,0x91
   2b4c3:	call   c390 <__assert_fail@plt>
   2b4c8:	nop    DWORD PTR [rax+rax*1+0x0]
   2b4d0:	push   r13
   2b4d2:	push   r12
   2b4d4:	mov    r12,rsi
   2b4d7:	push   rbp
   2b4d8:	push   rbx
   2b4d9:	mov    rbx,rdi
   2b4dc:	mov    edi,0x18
   2b4e1:	mov    rbp,rdx
   2b4e4:	mov    r13,rcx
   2b4e7:	sub    rsp,0x8
   2b4eb:	call   ce00 <g_malloc0@plt>
   2b4f0:	cmp    QWORD PTR [r12],0x0
   2b4f5:	je     2b518 <g_str_equal@plt+0x1e258>
   2b4f7:	test   rbp,rbp
   2b4fa:	je     2b537 <g_str_equal@plt+0x1e277>
   2b4fc:	mov    rdx,QWORD PTR [rbx]
   2b4ff:	mov    QWORD PTR [rax],rbp
   2b502:	mov    QWORD PTR [rax+0x8],r13
   2b506:	mov    QWORD PTR [rbx],rax
   2b509:	mov    QWORD PTR [rax+0x10],rdx
   2b50d:	add    rsp,0x8
   2b511:	pop    rbx
   2b512:	pop    rbp
   2b513:	pop    r12
   2b515:	pop    r13
   2b517:	ret    
   2b518:	lea    rcx,[rip+0x33cc1]        # 5f1e0 <_fini@@Base+0xca8c>
   2b51f:	lea    rsi,[rip+0x33ba2]        # 5f0c8 <_fini@@Base+0xc974>
   2b526:	lea    rdi,[rip+0x33c7d]        # 5f1aa <_fini@@Base+0xca56>
   2b52d:	mov    edx,0x38
   2b532:	call   c390 <__assert_fail@plt>
   2b537:	lea    rcx,[rip+0x33ca2]        # 5f1e0 <_fini@@Base+0xca8c>
   2b53e:	lea    rsi,[rip+0x33b83]        # 5f0c8 <_fini@@Base+0xc974>
   2b545:	lea    rdi,[rip+0x342fa]        # 5f846 <_fini@@Base+0xd0f2>
   2b54c:	mov    edx,0x39
   2b551:	call   c390 <__assert_fail@plt>
   2b556:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2b560:	sub    rsp,0x8
   2b564:	add    rdi,0xa8
   2b56b:	call   2b3f0 <g_str_equal@plt+0x1e130>
   2b570:	mov    eax,DWORD PTR [rax]
   2b572:	lea    edx,[rax-0x1]
   2b575:	cmp    edx,0x5
   2b578:	ja     2b584 <g_str_equal@plt+0x1e2c4>
   2b57a:	cmp    eax,0x4
   2b57d:	jne    2b589 <g_str_equal@plt+0x1e2c9>
   2b57f:	add    rsp,0x8
   2b583:	ret    
   2b584:	call   d35c <g_str_equal@plt+0x9c>
   2b589:	lea    rcx,[rip+0x33c30]        # 5f1c0 <_fini@@Base+0xca6c>
   2b590:	lea    rsi,[rip+0x33b31]        # 5f0c8 <_fini@@Base+0xc974>
   2b597:	lea    rdi,[rip+0x33bc2]        # 5f160 <_fini@@Base+0xca0c>
   2b59e:	mov    edx,0x79
   2b5a3:	call   c390 <__assert_fail@plt>
   2b5a8:	nop    DWORD PTR [rax+rax*1+0x0]
   2b5b0:	sub    rsp,0x8
   2b5b4:	test   rdi,rdi
   2b5b7:	je     2b5f0 <g_str_equal@plt+0x1e330>
   2b5b9:	mov    rdi,QWORD PTR [rdi]
   2b5bc:	test   rdi,rdi
   2b5bf:	je     2b5f0 <g_str_equal@plt+0x1e330>
   2b5c1:	mov    rax,rdx
   2b5c4:	mov    edx,DWORD PTR [rdi]
   2b5c6:	lea    esi,[rdx-0x1]
   2b5c9:	cmp    esi,0x5
   2b5cc:	ja     2b614 <g_str_equal@plt+0x1e354>
   2b5ce:	cmp    edx,0x4
   2b5d1:	je     2b600 <g_str_equal@plt+0x1e340>
   2b5d3:	cmp    edx,0x5
   2b5d6:	jne    2b619 <g_str_equal@plt+0x1e359>
   2b5d8:	test   rax,rax
   2b5db:	jne    2b655 <g_str_equal@plt+0x1e395>
   2b5dd:	mov    rsi,rcx
   2b5e0:	add    rsp,0x8
   2b5e4:	jmp    2f4f0 <g_str_equal@plt+0x22230>
   2b5e9:	nop    DWORD PTR [rax+0x0]
   2b5f0:	cmp    QWORD PTR [rsi],0x0
   2b5f4:	jne    2b636 <g_str_equal@plt+0x1e376>
   2b5f6:	mov    QWORD PTR [rsi],rcx
   2b5f9:	add    rsp,0x8
   2b5fd:	ret    
   2b5fe:	xchg   ax,ax
   2b600:	test   rax,rax
   2b603:	je     2b674 <g_str_equal@plt+0x1e3b4>
   2b605:	mov    rdx,rcx
   2b608:	mov    rsi,rax
   2b60b:	add    rsp,0x8
   2b60f:	jmp    2eb90 <g_str_equal@plt+0x218d0>
   2b614:	call   d35c <g_str_equal@plt+0x9c>
   2b619:	lea    rcx,[rip+0x33c30]        # 5f250 <_fini@@Base+0xcafc>
   2b620:	lea    rsi,[rip+0x33aa1]        # 5f0c8 <_fini@@Base+0xc974>
   2b627:	xor    r8d,r8d
   2b62a:	mov    edx,0x66
   2b62f:	xor    edi,edi
   2b631:	call   c6b0 <g_assertion_message_expr@plt>
   2b636:	lea    rcx,[rip+0x33c33]        # 5f270 <_fini@@Base+0xcb1c>
   2b63d:	lea    rsi,[rip+0x33a84]        # 5f0c8 <_fini@@Base+0xc974>
   2b644:	lea    rdi,[rip+0x33b5e]        # 5f1a9 <_fini@@Base+0xca55>
   2b64b:	mov    edx,0x59
   2b650:	call   c390 <__assert_fail@plt>
   2b655:	lea    rcx,[rip+0x33c14]        # 5f270 <_fini@@Base+0xcb1c>
   2b65c:	lea    rsi,[rip+0x33a65]        # 5f0c8 <_fini@@Base+0xc974>
   2b663:	lea    rdi,[rip+0x335ba]        # 5ec24 <_fini@@Base+0xc4d0>
   2b66a:	mov    edx,0x62
   2b66f:	call   c390 <__assert_fail@plt>
   2b674:	lea    rcx,[rip+0x33bf5]        # 5f270 <_fini@@Base+0xcb1c>
   2b67b:	lea    rsi,[rip+0x33a46]        # 5f0c8 <_fini@@Base+0xc974>
   2b682:	lea    rdi,[rip+0x3359c]        # 5ec25 <_fini@@Base+0xc4d1>
   2b689:	mov    edx,0x5e
   2b68e:	call   c390 <__assert_fail@plt>
   2b693:	nop    DWORD PTR [rax]
   2b696:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2b6a0:	add    QWORD PTR [rip+0x256db0],0x1        # 282458 <g_test_config_vars+0x1098>
   2b6a8:	mov    rdx,rsi
   2b6ab:	lea    rsi,[rdi+0xb0]
   2b6b2:	mov    rdi,QWORD PTR [rdi+0xa8]
   2b6b9:	lea    rcx,[rip+0x256d90]        # 282450 <g_test_config_vars+0x1090>
   2b6c0:	jmp    2b5b0 <g_str_equal@plt+0x1e2f0>
   2b6c5:	nop
   2b6c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2b6d0:	mov    rcx,QWORD PTR [rdx]
   2b6d3:	mov    rax,rsi
   2b6d6:	test   rcx,rcx
   2b6d9:	je     2b6e0 <g_str_equal@plt+0x1e420>
   2b6db:	add    QWORD PTR [rcx+0x8],0x1
   2b6e0:	lea    rsi,[rdi+0xb0]
   2b6e7:	mov    rdi,QWORD PTR [rdi+0xa8]
   2b6ee:	mov    rdx,rax
   2b6f1:	jmp    2b5b0 <g_str_equal@plt+0x1e2f0>
   2b6f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2b700:	push   rbp
   2b701:	push   rbx
   2b702:	mov    rbx,rdi
   2b705:	mov    rbp,rsi
   2b708:	sub    rsp,0x8
   2b70c:	movsd  xmm0,QWORD PTR [rdx]
   2b710:	call   2e170 <g_str_equal@plt+0x20eb0>
   2b715:	mov    rdi,QWORD PTR [rbx+0xa8]
   2b71c:	add    rsp,0x8
   2b720:	lea    rsi,[rbx+0xb0]
   2b727:	mov    rdx,rbp
   2b72a:	mov    rcx,rax
   2b72d:	pop    rbx
   2b72e:	pop    rbp
   2b72f:	jmp    2b5b0 <g_str_equal@plt+0x1e2f0>
   2b734:	xchg   ax,ax
   2b736:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2b740:	push   rbp
   2b741:	push   rbx
   2b742:	mov    rbx,rdi
   2b745:	mov    rbp,rsi
   2b748:	sub    rsp,0x8
   2b74c:	movzx  edi,BYTE PTR [rdx]
   2b74f:	call   2f920 <g_str_equal@plt+0x22660>
   2b754:	mov    rdi,QWORD PTR [rbx+0xa8]
   2b75b:	add    rsp,0x8
   2b75f:	lea    rsi,[rbx+0xb0]
   2b766:	mov    rdx,rbp
   2b769:	mov    rcx,rax
   2b76c:	pop    rbx
   2b76d:	pop    rbp
   2b76e:	jmp    2b5b0 <g_str_equal@plt+0x1e2f0>
   2b773:	nop    DWORD PTR [rax]
   2b776:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2b780:	push   rbp
   2b781:	push   rbx
   2b782:	mov    rbx,rdi
   2b785:	mov    rbp,rsi
   2b788:	sub    rsp,0x8
   2b78c:	mov    rdi,QWORD PTR [rdx]
   2b78f:	call   2e140 <g_str_equal@plt+0x20e80>
   2b794:	mov    rdi,QWORD PTR [rbx+0xa8]
   2b79b:	add    rsp,0x8
   2b79f:	lea    rsi,[rbx+0xb0]
   2b7a6:	mov    rdx,rbp
   2b7a9:	mov    rcx,rax
   2b7ac:	pop    rbx
   2b7ad:	pop    rbp
   2b7ae:	jmp    2b5b0 <g_str_equal@plt+0x1e2f0>
   2b7b3:	nop    DWORD PTR [rax]
   2b7b6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2b7c0:	push   rbp
   2b7c1:	push   rbx
   2b7c2:	mov    rbx,rdi
   2b7c5:	mov    rbp,rsi
   2b7c8:	sub    rsp,0x8
   2b7cc:	mov    rdi,QWORD PTR [rdx]
   2b7cf:	call   2e110 <g_str_equal@plt+0x20e50>
   2b7d4:	mov    rdi,QWORD PTR [rbx+0xa8]
   2b7db:	add    rsp,0x8
   2b7df:	lea    rsi,[rbx+0xb0]
   2b7e6:	mov    rdx,rbp
   2b7e9:	mov    rcx,rax
   2b7ec:	pop    rbx
   2b7ed:	pop    rbp
   2b7ee:	jmp    2b5b0 <g_str_equal@plt+0x1e2f0>
   2b7f3:	nop    DWORD PTR [rax]
   2b7f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2b800:	push   r14
   2b802:	push   r13
   2b804:	mov    r14,rsi
   2b807:	push   r12
   2b809:	push   rbp
   2b80a:	mov    r13,rdx
   2b80d:	push   rbx
   2b80e:	mov    rbx,rdi
   2b811:	lea    rbp,[rbx+0xb0]
   2b818:	call   2f420 <g_str_equal@plt+0x22160>
   2b81d:	mov    rdi,QWORD PTR [rbx+0xa8]
   2b824:	mov    r12,rax
   2b827:	mov    rdx,r14
   2b82a:	mov    rsi,rbp
   2b82d:	mov    rcx,rax
   2b830:	call   2b5b0 <g_str_equal@plt+0x1e2f0>
   2b835:	lea    rdi,[rbx+0xa8]
   2b83c:	mov    rcx,r13
   2b83f:	mov    rdx,r12
   2b842:	pop    rbx
   2b843:	mov    rsi,rbp
   2b846:	pop    rbp
   2b847:	pop    r12
   2b849:	pop    r13
   2b84b:	pop    r14
   2b84d:	jmp    2b4d0 <g_str_equal@plt+0x1e210>
   2b852:	nop    DWORD PTR [rax+0x0]
   2b856:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2b860:	push   r14
   2b862:	push   r13
   2b864:	mov    r14,rsi
   2b867:	push   r12
   2b869:	push   rbp
   2b86a:	mov    r13,rdx
   2b86d:	push   rbx
   2b86e:	mov    rbx,rdi
   2b871:	lea    rbp,[rbx+0xb0]
   2b878:	call   2eb40 <g_str_equal@plt+0x21880>
   2b87d:	mov    rdi,QWORD PTR [rbx+0xa8]
   2b884:	mov    r12,rax
   2b887:	mov    rdx,r14
   2b88a:	mov    rsi,rbp
   2b88d:	mov    rcx,rax
   2b890:	call   2b5b0 <g_str_equal@plt+0x1e2f0>
   2b895:	lea    rdi,[rbx+0xa8]
   2b89c:	mov    rcx,r13
   2b89f:	mov    rdx,r12
   2b8a2:	pop    rbx
   2b8a3:	mov    rsi,rbp
   2b8a6:	pop    rbp
   2b8a7:	pop    r12
   2b8a9:	pop    r13
   2b8ab:	pop    r14
   2b8ad:	jmp    2b4d0 <g_str_equal@plt+0x1e210>
   2b8b2:	nop    DWORD PTR [rax+0x0]
   2b8b6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2b8c0:	push   r12
   2b8c2:	push   rbp
   2b8c3:	mov    r12,rsi
   2b8c6:	push   rbx
   2b8c7:	mov    rbx,rdi
   2b8ca:	mov    rdi,QWORD PTR [rdx]
   2b8cd:	lea    rbp,[rbx+0xb0]
   2b8d4:	test   rdi,rdi
   2b8d7:	je     2b900 <g_str_equal@plt+0x1e640>
   2b8d9:	call   2e7b0 <g_str_equal@plt+0x214f0>
   2b8de:	mov    rdi,QWORD PTR [rbx+0xa8]
   2b8e5:	mov    rdx,r12
   2b8e8:	mov    rsi,rbp
   2b8eb:	pop    rbx
   2b8ec:	pop    rbp
   2b8ed:	pop    r12
   2b8ef:	mov    rcx,rax
   2b8f2:	jmp    2b5b0 <g_str_equal@plt+0x1e2f0>
   2b8f7:	nop    WORD PTR [rax+rax*1+0x0]
   2b900:	lea    rdi,[rip+0x34967]        # 6026e <_fini@@Base+0xdb1a>
   2b907:	jmp    2b8d9 <g_str_equal@plt+0x1e619>
   2b909:	nop    DWORD PTR [rax+0x0]
   2b910:	push   rbx
   2b911:	mov    rbx,rdi
   2b914:	mov    edi,0xc0
   2b919:	call   ce00 <g_malloc0@plt>
   2b91e:	lea    rdx,[rip+0xffffffffffffff3b]        # 2b860 <g_str_equal@plt+0x1e5a0>
   2b925:	lea    rcx,[rip+0xfffffffffffffc34]        # 2b560 <g_str_equal@plt+0x1e2a0>
   2b92c:	lea    rsi,[rip+0xfffffffffffffecd]        # 2b800 <g_str_equal@plt+0x1e540>
   2b933:	lea    rdi,[rip+0xfffffffffffffe46]        # 2b780 <g_str_equal@plt+0x1e4c0>
   2b93a:	mov    DWORD PTR [rax+0x90],0x2
   2b944:	mov    QWORD PTR [rbx],0x0
   2b94b:	mov    QWORD PTR [rax],rdx
   2b94e:	mov    QWORD PTR [rax+0x10],rcx
   2b952:	lea    rdx,[rip+0xfffffffffffff977]        # 2b2d0 <g_str_equal@plt+0x1e010>
   2b959:	mov    QWORD PTR [rax+0x18],rsi
   2b95d:	lea    rcx,[rip+0xfffffffffffffb1c]        # 2b480 <g_str_equal@plt+0x1e1c0>
   2b964:	lea    rsi,[rip+0xfffffffffffffe55]        # 2b7c0 <g_str_equal@plt+0x1e500>
   2b96b:	mov    QWORD PTR [rax+0x20],rdx
   2b96f:	lea    rdx,[rip+0xfffffffffffffdca]        # 2b740 <g_str_equal@plt+0x1e480>
   2b976:	mov    QWORD PTR [rax+0x50],rdi
   2b97a:	mov    QWORD PTR [rax+0x30],rcx
   2b97e:	mov    QWORD PTR [rax+0x48],rsi
   2b982:	lea    rcx,[rip+0xffffffffffffff37]        # 2b8c0 <g_str_equal@plt+0x1e600>
   2b989:	lea    rsi,[rip+0xfffffffffffffd70]        # 2b700 <g_str_equal@plt+0x1e440>
   2b990:	mov    QWORD PTR [rax+0x60],rdx
   2b994:	lea    rdi,[rip+0xfffffffffffffd35]        # 2b6d0 <g_str_equal@plt+0x1e410>
   2b99b:	mov    QWORD PTR [rax+0x68],rcx
   2b99f:	lea    rdx,[rip+0xfffffffffffffcfa]        # 2b6a0 <g_str_equal@plt+0x1e3e0>
   2b9a6:	lea    rcx,[rip+0xfffffffffffff9c3]        # 2b370 <g_str_equal@plt+0x1e0b0>
   2b9ad:	mov    QWORD PTR [rax+0x70],rsi
   2b9b1:	lea    rsi,[rip+0xfffffffffffff928]        # 2b2e0 <g_str_equal@plt+0x1e020>
   2b9b8:	mov    QWORD PTR [rax+0x78],rdi
   2b9bc:	mov    QWORD PTR [rax+0x80],rdx
   2b9c3:	mov    QWORD PTR [rax+0x98],rcx
   2b9ca:	mov    QWORD PTR [rax+0xa0],rsi
   2b9d1:	mov    QWORD PTR [rax+0xb8],rbx
   2b9d8:	pop    rbx
   2b9d9:	ret    
   2b9da:	nop    WORD PTR [rax+rax*1+0x0]
   2b9e0:	push   rbx
   2b9e1:	mov    rbx,rdi
   2b9e4:	mov    rdi,QWORD PTR [rdi+0xa8]
   2b9eb:	lea    rsi,[rip+0x1e]        # 2ba10 <g_str_equal@plt+0x1e750>
   2b9f2:	xor    edx,edx
   2b9f4:	call   c410 <g_list_foreach@plt>
   2b9f9:	mov    rdi,QWORD PTR [rbx+0xa8]
   2ba00:	call   c430 <g_list_free@plt>
   2ba05:	mov    rdi,rbx
   2ba08:	pop    rbx
   2ba09:	jmp    d2b0 <g_free@plt>
   2ba0e:	xchg   ax,ax
   2ba10:	jmp    d2b0 <g_free@plt>
   2ba15:	nop
   2ba16:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2ba20:	push   r14
   2ba22:	push   r13
   2ba24:	mov    r14,rdx
   2ba27:	push   r12
   2ba29:	push   rbp
   2ba2a:	mov    rbp,rdi
   2ba2d:	push   rbx
   2ba2e:	mov    r13,rcx
   2ba31:	mov    rbx,rsi
   2ba34:	sub    rsp,0x10
   2ba38:	mov    rax,QWORD PTR fs:0x28
   2ba41:	mov    QWORD PTR [rsp+0x8],rax
   2ba46:	xor    eax,eax
   2ba48:	mov    rax,QWORD PTR [rdi+0xc0]
   2ba4f:	mov    QWORD PTR [rsp],rax
   2ba53:	call   cc80 <__errno_location@plt>
   2ba58:	mov    DWORD PTR [rax],0x0
   2ba5e:	mov    rdi,QWORD PTR [rbp+0xc0]
   2ba65:	mov    r12,rax
   2ba68:	mov    rsi,rsp
   2ba6b:	call   d240 <strtod@plt>
   2ba70:	mov    ecx,DWORD PTR [r12]
   2ba74:	test   ecx,ecx
   2ba76:	jne    2ba8a <g_str_equal@plt+0x1e7ca>
   2ba78:	mov    rax,QWORD PTR [rsp]
   2ba7c:	cmp    QWORD PTR [rbp+0xc0],rax
   2ba83:	je     2ba8a <g_str_equal@plt+0x1e7ca>
   2ba85:	cmp    BYTE PTR [rax],0x0
   2ba88:	je     2baf0 <g_str_equal@plt+0x1e830>
   2ba8a:	lea    rax,[rip+0x2f016]        # 5aaa7 <_fini@@Base+0x8353>
   2ba91:	test   rbx,rbx
   2ba94:	lea    r8,[rip+0x31e0d]        # 5d8a8 <_fini@@Base+0xb154>
   2ba9b:	lea    rcx,[rip+0x3398e]        # 5f430 <_fini@@Base+0xccdc>
   2baa2:	lea    rsi,[rip+0x33867]        # 5f310 <_fini@@Base+0xcbbc>
   2baa9:	mov    edx,0x143
   2baae:	cmove  rbx,rax
   2bab2:	lea    rax,[rip+0x37508]        # 62fc1 <_fini@@Base+0x1086d>
   2bab9:	sub    rsp,0x8
   2babd:	mov    r9,rbx
   2bac0:	mov    rdi,r13
   2bac3:	push   rax
   2bac4:	xor    eax,eax
   2bac6:	call   3a090 <g_str_equal@plt+0x2cdd0>
   2bacb:	pop    rax
   2bacc:	pop    rdx
   2bacd:	mov    rax,QWORD PTR [rsp+0x8]
   2bad2:	xor    rax,QWORD PTR fs:0x28
   2badb:	jne    2baf7 <g_str_equal@plt+0x1e837>
   2badd:	add    rsp,0x10
   2bae1:	pop    rbx
   2bae2:	pop    rbp
   2bae3:	pop    r12
   2bae5:	pop    r13
   2bae7:	pop    r14
   2bae9:	ret    
   2baea:	nop    WORD PTR [rax+rax*1+0x0]
   2baf0:	movsd  QWORD PTR [r14],xmm0
   2baf5:	jmp    2bacd <g_str_equal@plt+0x1e80d>
   2baf7:	call   cd30 <__stack_chk_fail@plt>
   2bafc:	nop    DWORD PTR [rax+0x0]
   2bb00:	push   rbx
   2bb01:	mov    rdi,QWORD PTR [rdi+0xc0]
   2bb08:	mov    rbx,rdx
   2bb0b:	call   c370 <g_strdup@plt>
   2bb10:	mov    QWORD PTR [rbx],rax
   2bb13:	pop    rbx
   2bb14:	ret    
   2bb15:	nop
   2bb16:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2bb20:	push   r13
   2bb22:	push   r12
   2bb24:	mov    r12,rsi
   2bb27:	push   rbp
   2bb28:	push   rbx
   2bb29:	lea    rsi,[rip+0x36b08]        # 62638 <_fini@@Base+0xfee4>
   2bb30:	mov    rbp,rdx
   2bb33:	mov    r13,rcx
   2bb36:	sub    rsp,0x8
   2bb3a:	mov    rbx,QWORD PTR [rdi+0xc0]
   2bb41:	mov    rdi,rbx
   2bb44:	call   c3c0 <strcasecmp@plt>
   2bb49:	test   eax,eax
   2bb4b:	je     2bc08 <g_str_equal@plt+0x1e948>
   2bb51:	lea    rsi,[rip+0x3376b]        # 5f2c3 <_fini@@Base+0xcb6f>
   2bb58:	mov    rdi,rbx
   2bb5b:	call   c3c0 <strcasecmp@plt>
   2bb60:	test   eax,eax
   2bb62:	je     2bc08 <g_str_equal@plt+0x1e948>
   2bb68:	lea    rsi,[rip+0x33758]        # 5f2c7 <_fini@@Base+0xcb73>
   2bb6f:	mov    rdi,rbx
   2bb72:	call   c3c0 <strcasecmp@plt>
   2bb77:	test   eax,eax
   2bb79:	je     2bc08 <g_str_equal@plt+0x1e948>
   2bb7f:	lea    rsi,[rip+0x36ab6]        # 6263c <_fini@@Base+0xfee8>
   2bb86:	mov    rdi,rbx
   2bb89:	call   c3c0 <strcasecmp@plt>
   2bb8e:	test   eax,eax
   2bb90:	je     2bc20 <g_str_equal@plt+0x1e960>
   2bb96:	lea    rsi,[rip+0x3372f]        # 5f2cc <_fini@@Base+0xcb78>
   2bb9d:	mov    rdi,rbx
   2bba0:	call   c3c0 <strcasecmp@plt>
   2bba5:	test   eax,eax
   2bba7:	je     2bc20 <g_str_equal@plt+0x1e960>
   2bba9:	lea    rsi,[rip+0x31971]        # 5d521 <_fini@@Base+0xadcd>
   2bbb0:	mov    rdi,rbx
   2bbb3:	call   c3c0 <strcasecmp@plt>
   2bbb8:	test   eax,eax
   2bbba:	je     2bc20 <g_str_equal@plt+0x1e960>
   2bbbc:	lea    rax,[rip+0x2eee4]        # 5aaa7 <_fini@@Base+0x8353>
   2bbc3:	test   r12,r12
   2bbc6:	lea    r8,[rip+0x31cdb]        # 5d8a8 <_fini@@Base+0xb154>
   2bbcd:	lea    rcx,[rip+0x3384c]        # 5f420 <_fini@@Base+0xcccc>
   2bbd4:	lea    rsi,[rip+0x33735]        # 5f310 <_fini@@Base+0xcbbc>
   2bbdb:	mov    edx,0x12d
   2bbe0:	cmove  r12,rax
   2bbe4:	lea    rax,[rip+0x319a7]        # 5d592 <_fini@@Base+0xae3e>
   2bbeb:	sub    rsp,0x8
   2bbef:	mov    r9,r12
   2bbf2:	mov    rdi,r13
   2bbf5:	push   rax
   2bbf6:	xor    eax,eax
   2bbf8:	call   3a090 <g_str_equal@plt+0x2cdd0>
   2bbfd:	pop    rax
   2bbfe:	pop    rdx
   2bbff:	jmp    2bc0c <g_str_equal@plt+0x1e94c>
   2bc01:	nop    DWORD PTR [rax+0x0]
   2bc08:	mov    BYTE PTR [rbp+0x0],0x1
   2bc0c:	add    rsp,0x8
   2bc10:	pop    rbx
   2bc11:	pop    rbp
   2bc12:	pop    r12
   2bc14:	pop    r13
   2bc16:	ret    
   2bc17:	nop    WORD PTR [rax+rax*1+0x0]
   2bc20:	mov    BYTE PTR [rbp+0x0],0x0
   2bc24:	add    rsp,0x8
   2bc28:	pop    rbx
   2bc29:	pop    rbp
   2bc2a:	pop    r12
   2bc2c:	pop    r13
   2bc2e:	ret    
   2bc2f:	nop
   2bc30:	push   rbp
   2bc31:	push   rbx
   2bc32:	mov    rax,rsi
   2bc35:	mov    rbx,rdx
   2bc38:	mov    rbp,rcx
   2bc3b:	sub    rsp,0x28
   2bc3f:	mov    rsi,QWORD PTR [rdi+0xc0]
   2bc46:	mov    rdi,rax
   2bc49:	mov    rdx,QWORD PTR fs:0x28
   2bc52:	mov    QWORD PTR [rsp+0x18],rdx
   2bc57:	xor    edx,edx
   2bc59:	lea    rcx,[rsp+0x8]
   2bc5e:	lea    rdx,[rsp+0x10]
   2bc63:	mov    QWORD PTR [rsp+0x8],0x0
   2bc6c:	call   3f470 <g_str_equal@plt+0x321b0>
   2bc71:	mov    rsi,QWORD PTR [rsp+0x8]
   2bc76:	test   rsi,rsi
   2bc79:	jne    2bca0 <g_str_equal@plt+0x1e9e0>
   2bc7b:	mov    rax,QWORD PTR [rsp+0x10]
   2bc80:	mov    QWORD PTR [rbx],rax
   2bc83:	mov    rax,QWORD PTR [rsp+0x18]
   2bc88:	xor    rax,QWORD PTR fs:0x28
   2bc91:	jne    2bcaa <g_str_equal@plt+0x1e9ea>
   2bc93:	add    rsp,0x28
   2bc97:	pop    rbx
   2bc98:	pop    rbp
   2bc99:	ret    
   2bc9a:	nop    WORD PTR [rax+rax*1+0x0]
   2bca0:	mov    rdi,rbp
   2bca3:	call   3a4c0 <g_str_equal@plt+0x2d200>
   2bca8:	jmp    2bc83 <g_str_equal@plt+0x1e9c3>
   2bcaa:	call   cd30 <__stack_chk_fail@plt>
   2bcaf:	nop
   2bcb0:	cmp    QWORD PTR [rdi+0xc8],rsi
   2bcb7:	jne    2bcbb <g_str_equal@plt+0x1e9fb>
   2bcb9:	repz ret 
   2bcbb:	lea    rcx,[rip+0x3380e]        # 5f4d0 <_fini@@Base+0xcd7c>
   2bcc2:	lea    rsi,[rip+0x33647]        # 5f310 <_fini@@Base+0xcbbc>
   2bcc9:	lea    rdi,[rip+0x335ff]        # 5f2cf <_fini@@Base+0xcb7b>
   2bcd0:	sub    rsp,0x8
   2bcd4:	mov    edx,0xd3
   2bcd9:	call   c390 <__assert_fail@plt>
   2bcde:	xchg   ax,ax
   2bce0:	cmp    QWORD PTR [rdi+0xa8],0x0
   2bce8:	mov    r9,rsi
   2bceb:	je     2bd40 <g_str_equal@plt+0x1ea80>
   2bced:	mov    rax,QWORD PTR [rdi+0xb0]
   2bcf4:	test   rax,rax
   2bcf7:	je     2bd40 <g_str_equal@plt+0x1ea80>
   2bcf9:	mov    rdx,QWORD PTR [rax]
   2bcfc:	test   rdx,rdx
   2bcff:	je     2bd40 <g_str_equal@plt+0x1ea80>
   2bd01:	mov    rcx,QWORD PTR [rdi+0xb8]
   2bd08:	cmp    rcx,QWORD PTR [rdx]
   2bd0b:	jae    2bd48 <g_str_equal@plt+0x1ea88>
   2bd0d:	mov    rax,QWORD PTR [rax+0x8]
   2bd11:	test   rax,rax
   2bd14:	je     2bd40 <g_str_equal@plt+0x1ea80>
   2bd16:	cmp    QWORD PTR [rax],0x0
   2bd1a:	je     2bd40 <g_str_equal@plt+0x1ea80>
   2bd1c:	lea    r8,[rip+0x33675]        # 5f398 <_fini@@Base+0xcc44>
   2bd23:	lea    rcx,[rip+0x33796]        # 5f4c0 <_fini@@Base+0xcd6c>
   2bd2a:	lea    rsi,[rip+0x335df]        # 5f310 <_fini@@Base+0xcbbc>
   2bd31:	mov    edx,0xcc
   2bd36:	mov    rdi,r9
   2bd39:	xor    eax,eax
   2bd3b:	jmp    3a090 <g_str_equal@plt+0x2cdd0>
   2bd40:	repz ret 
   2bd42:	nop    WORD PTR [rax+rax*1+0x0]
   2bd48:	cmp    rcx,QWORD PTR [rdx+0x8]
   2bd4c:	jbe    2bd1c <g_str_equal@plt+0x1ea5c>
   2bd4e:	jmp    2bd0d <g_str_equal@plt+0x1ea4d>
   2bd50:	mov    QWORD PTR [rdx],0x0
   2bd57:	mov    rax,QWORD PTR [rdi+0xc0]
   2bd5e:	mov    r10,rcx
   2bd61:	test   rax,rax
   2bd64:	je     2bd6b <g_str_equal@plt+0x1eaab>
   2bd66:	cmp    BYTE PTR [rax],0x0
   2bd69:	je     2bdb0 <g_str_equal@plt+0x1eaf0>
   2bd6b:	sub    rsp,0x8
   2bd6f:	test   rsi,rsi
   2bd72:	lea    rax,[rip+0x2ed2e]        # 5aaa7 <_fini@@Base+0x8353>
   2bd79:	je     2bdc8 <g_str_equal@plt+0x1eb08>
   2bd7b:	sub    rsp,0x8
   2bd7f:	mov    r9,rsi
   2bd82:	lea    r8,[rip+0x31b1f]        # 5d8a8 <_fini@@Base+0xb154>
   2bd89:	push   rax
   2bd8a:	lea    rcx,[rip+0x336bf]        # 5f450 <_fini@@Base+0xccfc>
   2bd91:	lea    rsi,[rip+0x33578]        # 5f310 <_fini@@Base+0xcbbc>
   2bd98:	mov    edx,0x153
   2bd9d:	mov    rdi,r10
   2bda0:	xor    eax,eax
   2bda2:	call   3a090 <g_str_equal@plt+0x2cdd0>
   2bda7:	add    rsp,0x18
   2bdab:	ret    
   2bdac:	nop    DWORD PTR [rax+0x0]
   2bdb0:	lea    rax,[rip+0x256699]        # 282450 <g_test_config_vars+0x1090>
   2bdb7:	add    QWORD PTR [rip+0x256699],0x1        # 282458 <g_test_config_vars+0x1098>
   2bdbf:	mov    QWORD PTR [rdx],rax
   2bdc2:	ret    
   2bdc3:	nop    DWORD PTR [rax+rax*1+0x0]
   2bdc8:	mov    rsi,rax
   2bdcb:	jmp    2bd7b <g_str_equal@plt+0x1eabb>
   2bdcd:	nop    DWORD PTR [rax]
   2bdd0:	cmp    QWORD PTR [rdi+0xa8],0x0
   2bdd8:	je     2be68 <g_str_equal@plt+0x1eba8>
   2bdde:	mov    rcx,QWORD PTR [rdi+0xb0]
   2bde5:	mov    rax,rdi
   2bde8:	test   rcx,rcx
   2bdeb:	je     2be68 <g_str_equal@plt+0x1eba8>
   2bded:	mov    r8,QWORD PTR [rcx]
   2bdf0:	test   r8,r8
   2bdf3:	je     2be68 <g_str_equal@plt+0x1eba8>
   2bdf5:	push   rbx
   2bdf6:	mov    rdi,rdx
   2bdf9:	mov    rdx,QWORD PTR [rax+0xb8]
   2be00:	cmp    rdx,QWORD PTR [r8]
   2be03:	mov    rbx,rsi
   2be06:	jae    2be58 <g_str_equal@plt+0x1eb98>
   2be08:	mov    rdx,QWORD PTR [rcx+0x8]
   2be0c:	test   rdx,rdx
   2be0f:	mov    QWORD PTR [rax+0xb0],rdx
   2be16:	je     2be60 <g_str_equal@plt+0x1eba0>
   2be18:	mov    rdx,QWORD PTR [rdx]
   2be1b:	test   rdx,rdx
   2be1e:	je     2be60 <g_str_equal@plt+0x1eba0>
   2be20:	mov    rcx,QWORD PTR [rdx]
   2be23:	mov    rdx,QWORD PTR [rdx+0x8]
   2be27:	cmp    rcx,rdx
   2be2a:	jbe    2be40 <g_str_equal@plt+0x1eb80>
   2be2c:	add    rdx,0x1
   2be30:	cmp    rcx,rdx
   2be33:	jne    2be6b <g_str_equal@plt+0x1ebab>
   2be35:	call   d37f <g_str_equal@plt+0xbf>
   2be3a:	nop    WORD PTR [rax+rax*1+0x0]
   2be40:	mov    QWORD PTR [rax+0xb8],rcx
   2be47:	call   ce00 <g_malloc0@plt>
   2be4c:	mov    QWORD PTR [rbx],rax
   2be4f:	pop    rbx
   2be50:	ret    
   2be51:	nop    DWORD PTR [rax+0x0]
   2be58:	cmp    rdx,QWORD PTR [r8+0x8]
   2be5c:	jbe    2be47 <g_str_equal@plt+0x1eb87>
   2be5e:	jmp    2be08 <g_str_equal@plt+0x1eb48>
   2be60:	xor    eax,eax
   2be62:	pop    rbx
   2be63:	ret    
   2be64:	nop    DWORD PTR [rax+0x0]
   2be68:	xor    eax,eax
   2be6a:	ret    
   2be6b:	lea    rcx,[rip+0x3362e]        # 5f4a0 <_fini@@Base+0xcd4c>
   2be72:	lea    rsi,[rip+0x334df]        # 5f358 <_fini@@Base+0xcc04>
   2be79:	lea    rdi,[rip+0x33538]        # 5f3b8 <_fini@@Base+0xcc64>
   2be80:	mov    edx,0x2c
   2be85:	call   c390 <__assert_fail@plt>
   2be8a:	nop    WORD PTR [rax+rax*1+0x0]
   2be90:	push   r15
   2be92:	push   r14
   2be94:	push   r13
   2be96:	push   r12
   2be98:	push   rbp
   2be99:	push   rbx
   2be9a:	sub    rsp,0x28
   2be9e:	mov    rax,QWORD PTR fs:0x28
   2bea7:	mov    QWORD PTR [rsp+0x18],rax
   2beac:	xor    eax,eax
   2beae:	cmp    QWORD PTR [rdi],0x0
   2beb2:	mov    QWORD PTR [rsp],rcx
   2beb6:	je     2bee0 <g_str_equal@plt+0x1ec20>
   2beb8:	xor    edx,edx
   2beba:	mov    rcx,QWORD PTR [rsp+0x18]
   2bebf:	xor    rcx,QWORD PTR fs:0x28
   2bec8:	mov    eax,edx
   2beca:	jne    2c0db <g_str_equal@plt+0x1ee1b>
   2bed0:	add    rsp,0x28
   2bed4:	pop    rbx
   2bed5:	pop    rbp
   2bed6:	pop    r12
   2bed8:	pop    r13
   2beda:	pop    r14
   2bedc:	pop    r15
   2bede:	ret    
   2bedf:	nop
   2bee0:	cmp    BYTE PTR [rsi],0x0
   2bee3:	mov    rbx,rsi
   2bee6:	je     2beb8 <g_str_equal@plt+0x1ebf8>
   2bee8:	mov    rbp,rdi
   2beeb:	mov    r14,rdx
   2beee:	lea    r13,[rsp+0x10]
   2bef3:	call   cc80 <__errno_location@plt>
   2bef8:	mov    r12,rax
   2befb:	jmp    2bf32 <g_str_equal@plt+0x1ec72>
   2befd:	nop    DWORD PTR [rax]
   2bf00:	cmp    al,0x2c
   2bf02:	jne    2c008 <g_str_equal@plt+0x1ed48>
   2bf08:	lea    rbx,[rdi+0x1]
   2bf0c:	mov    edi,0x10
   2bf11:	call   ce00 <g_malloc0@plt>
   2bf16:	mov    QWORD PTR [rax],r15
   2bf19:	mov    QWORD PTR [rax+0x8],r15
   2bf1d:	mov    rdi,QWORD PTR [rbp+0x0]
   2bf21:	mov    rsi,rax
   2bf24:	call   43a70 <g_str_equal@plt+0x367b0>
   2bf29:	test   rbx,rbx
   2bf2c:	mov    QWORD PTR [rbp+0x0],rax
   2bf30:	je     2beb8 <g_str_equal@plt+0x1ebf8>
   2bf32:	xor    edx,edx
   2bf34:	mov    DWORD PTR [r12],0x0
   2bf3c:	mov    rsi,r13
   2bf3f:	mov    rdi,rbx
   2bf42:	call   d060 <strtoll@plt>
   2bf47:	mov    edx,DWORD PTR [r12]
   2bf4b:	mov    r15,rax
   2bf4e:	test   edx,edx
   2bf50:	jne    2c008 <g_str_equal@plt+0x1ed48>
   2bf56:	mov    rdi,QWORD PTR [rsp+0x10]
   2bf5b:	cmp    rbx,rdi
   2bf5e:	jae    2c008 <g_str_equal@plt+0x1ed48>
   2bf64:	movzx  eax,BYTE PTR [rdi]
   2bf67:	test   al,al
   2bf69:	je     2c080 <g_str_equal@plt+0x1edc0>
   2bf6f:	cmp    al,0x2d
   2bf71:	jne    2bf00 <g_str_equal@plt+0x1ec40>
   2bf73:	lea    rbx,[rdi+0x1]
   2bf77:	xor    edx,edx
   2bf79:	mov    rsi,r13
   2bf7c:	mov    rdi,rbx
   2bf7f:	call   d060 <strtoll@plt>
   2bf84:	mov    edx,DWORD PTR [r12]
   2bf88:	mov    r8,rax
   2bf8b:	test   edx,edx
   2bf8d:	jne    2c008 <g_str_equal@plt+0x1ed48>
   2bf8f:	mov    rax,QWORD PTR [rsp+0x10]
   2bf94:	cmp    rbx,rax
   2bf97:	jae    2c008 <g_str_equal@plt+0x1ed48>
   2bf99:	cmp    r15,r8
   2bf9c:	jg     2c008 <g_str_equal@plt+0x1ed48>
   2bf9e:	movabs rcx,0x7ffffffffffeffff
   2bfa8:	cmp    r15,rcx
   2bfab:	jg     2bfb9 <g_str_equal@plt+0x1ecf9>
   2bfad:	lea    rsi,[r15+0x10000]
   2bfb4:	cmp    r8,rsi
   2bfb7:	jge    2c008 <g_str_equal@plt+0x1ed48>
   2bfb9:	movzx  esi,BYTE PTR [rax]
   2bfbc:	test   sil,sil
   2bfbf:	je     2c0ac <g_str_equal@plt+0x1edec>
   2bfc5:	cmp    sil,0x2c
   2bfc9:	mov    QWORD PTR [rsp+0x8],r8
   2bfce:	jne    2c008 <g_str_equal@plt+0x1ed48>
   2bfd0:	mov    edi,0x10
   2bfd5:	lea    rbx,[rax+0x1]
   2bfd9:	call   ce00 <g_malloc0@plt>
   2bfde:	mov    r8,QWORD PTR [rsp+0x8]
   2bfe3:	mov    QWORD PTR [rax],r15
   2bfe6:	cmp    r8,r15
   2bfe9:	mov    QWORD PTR [rax+0x8],r8
   2bfed:	jae    2bf1d <g_str_equal@plt+0x1ec5d>
   2bff3:	add    r8,0x1
   2bff7:	cmp    r15,r8
   2bffa:	jne    2c0e0 <g_str_equal@plt+0x1ee20>
   2c000:	call   d3a2 <g_str_equal@plt+0xe2>
   2c005:	nop    DWORD PTR [rax]
   2c008:	mov    rdi,QWORD PTR [rbp+0x0]
   2c00c:	lea    rsi,[rip+0xfffffffffffff9fd]        # 2ba10 <g_str_equal@plt+0x1e750>
   2c013:	xor    edx,edx
   2c015:	call   c410 <g_list_foreach@plt>
   2c01a:	mov    rdi,QWORD PTR [rbp+0x0]
   2c01e:	call   c430 <g_list_free@plt>
   2c023:	lea    rax,[rip+0x2ea7d]        # 5aaa7 <_fini@@Base+0x8353>
   2c02a:	test   r14,r14
   2c02d:	mov    QWORD PTR [rbp+0x0],0x0
   2c035:	lea    r8,[rip+0x320c1]        # 5e0fd <_fini@@Base+0xb9a9>
   2c03c:	lea    rcx,[rip+0x33435]        # 5f478 <_fini@@Base+0xcd24>
   2c043:	lea    rsi,[rip+0x332c6]        # 5f310 <_fini@@Base+0xcbbc>
   2c04a:	cmove  r14,rax
   2c04e:	lea    rax,[rip+0x332a2]        # 5f2f7 <_fini@@Base+0xcba3>
   2c055:	sub    rsp,0x8
   2c059:	mov    edx,0x75
   2c05e:	mov    r9,r14
   2c061:	push   rax
   2c062:	mov    rdi,QWORD PTR [rsp+0x10]
   2c067:	xor    eax,eax
   2c069:	call   3a090 <g_str_equal@plt+0x2cdd0>
   2c06e:	pop    rax
   2c06f:	pop    rdx
   2c070:	mov    edx,0xffffffff
   2c075:	jmp    2beba <g_str_equal@plt+0x1ebfa>
   2c07a:	nop    WORD PTR [rax+rax*1+0x0]
   2c080:	mov    edi,0x10
   2c085:	mov    DWORD PTR [rsp],edx
   2c088:	call   ce00 <g_malloc0@plt>
   2c08d:	mov    QWORD PTR [rax],r15
   2c090:	mov    QWORD PTR [rax+0x8],r15
   2c094:	mov    rdi,QWORD PTR [rbp+0x0]
   2c098:	mov    rsi,rax
   2c09b:	call   43a70 <g_str_equal@plt+0x367b0>
   2c0a0:	mov    edx,DWORD PTR [rsp]
   2c0a3:	mov    QWORD PTR [rbp+0x0],rax
   2c0a7:	jmp    2beba <g_str_equal@plt+0x1ebfa>
   2c0ac:	mov    edi,0x10
   2c0b1:	mov    DWORD PTR [rsp+0x8],edx
   2c0b5:	mov    QWORD PTR [rsp],r8
   2c0b9:	call   ce00 <g_malloc0@plt>
   2c0be:	mov    r8,QWORD PTR [rsp]
   2c0c2:	mov    QWORD PTR [rax],r15
   2c0c5:	mov    edx,DWORD PTR [rsp+0x8]
   2c0c9:	cmp    r8,r15
   2c0cc:	mov    QWORD PTR [rax+0x8],r8
   2c0d0:	jb     2bff3 <g_str_equal@plt+0x1ed33>
   2c0d6:	mov    DWORD PTR [rsp],edx
   2c0d9:	jmp    2c094 <g_str_equal@plt+0x1edd4>
   2c0db:	call   cd30 <__stack_chk_fail@plt>
   2c0e0:	lea    rcx,[rip+0x333b9]        # 5f4a0 <_fini@@Base+0xcd4c>
   2c0e7:	lea    rsi,[rip+0x3326a]        # 5f358 <_fini@@Base+0xcc04>
   2c0ee:	lea    rdi,[rip+0x332c3]        # 5f3b8 <_fini@@Base+0xcc64>
   2c0f5:	mov    edx,0x2c
   2c0fa:	call   c390 <__assert_fail@plt>
   2c0ff:	nop
   2c100:	test   rdx,rdx
   2c103:	push   r12
   2c105:	push   rbp
   2c106:	push   rbx
   2c107:	je     2c1a0 <g_str_equal@plt+0x1eee0>
   2c10d:	mov    rbx,rdi
   2c110:	mov    rbp,rdx
   2c113:	lea    rdi,[rdi+0xa8]
   2c11a:	mov    QWORD PTR [rbx+0xc8],rdx
   2c121:	mov    rdx,rsi
   2c124:	mov    rsi,QWORD PTR [rbx+0xc0]
   2c12b:	mov    r12,rcx
   2c12e:	mov    rcx,r8
   2c131:	call   2be90 <g_str_equal@plt+0x1ebd0>
   2c136:	test   eax,eax
   2c138:	js     2c178 <g_str_equal@plt+0x1eeb8>
   2c13a:	mov    rdi,QWORD PTR [rbx+0xa8]
   2c141:	call   cf50 <g_list_first@plt>
   2c146:	test   rax,rax
   2c149:	mov    QWORD PTR [rbx+0xb0],rax
   2c150:	je     2c178 <g_str_equal@plt+0x1eeb8>
   2c152:	mov    rax,QWORD PTR [rax]
   2c155:	test   rax,rax
   2c158:	je     2c18f <g_str_equal@plt+0x1eecf>
   2c15a:	mov    rdx,QWORD PTR [rax]
   2c15d:	mov    rax,QWORD PTR [rax+0x8]
   2c161:	cmp    rdx,rax
   2c164:	jbe    2c188 <g_str_equal@plt+0x1eec8>
   2c166:	add    rax,0x1
   2c16a:	cmp    rdx,rax
   2c16d:	jne    2c1bf <g_str_equal@plt+0x1eeff>
   2c16f:	call   d37f <g_str_equal@plt+0xbf>
   2c174:	nop    DWORD PTR [rax+0x0]
   2c178:	mov    QWORD PTR [rbp+0x0],0x0
   2c180:	pop    rbx
   2c181:	pop    rbp
   2c182:	pop    r12
   2c184:	ret    
   2c185:	nop    DWORD PTR [rax]
   2c188:	mov    QWORD PTR [rbx+0xb8],rdx
   2c18f:	mov    rdi,r12
   2c192:	call   ce00 <g_malloc0@plt>
   2c197:	mov    QWORD PTR [rbp+0x0],rax
   2c19b:	pop    rbx
   2c19c:	pop    rbp
   2c19d:	pop    r12
   2c19f:	ret    
   2c1a0:	lea    rcx,[rip+0x332e1]        # 5f488 <_fini@@Base+0xcd34>
   2c1a7:	lea    rsi,[rip+0x33162]        # 5f310 <_fini@@Base+0xcbbc>
   2c1ae:	lea    rdi,[rip+0x37da3]        # 63f58 <_fini@@Base+0x11804>
   2c1b5:	mov    edx,0x80
   2c1ba:	call   c390 <__assert_fail@plt>
   2c1bf:	lea    rcx,[rip+0x332da]        # 5f4a0 <_fini@@Base+0xcd4c>
   2c1c6:	lea    rsi,[rip+0x3318b]        # 5f358 <_fini@@Base+0xcc04>
   2c1cd:	lea    rdi,[rip+0x331e4]        # 5f3b8 <_fini@@Base+0xcc64>
   2c1d4:	mov    edx,0x2c
   2c1d9:	call   c390 <__assert_fail@plt>
   2c1de:	xchg   ax,ax
   2c1e0:	push   r13
   2c1e2:	push   r12
   2c1e4:	mov    r13,rdx
   2c1e7:	push   rbp
   2c1e8:	push   rbx
   2c1e9:	mov    rbp,rsi
   2c1ec:	mov    rbx,rdi
   2c1ef:	mov    rdx,rbp
   2c1f2:	add    rdi,0xa8
   2c1f9:	sub    rsp,0x8
   2c1fd:	mov    rsi,QWORD PTR [rdi+0x18]
   2c201:	mov    r12,rcx
   2c204:	call   2be90 <g_str_equal@plt+0x1ebd0>
   2c209:	test   eax,eax
   2c20b:	js     2c236 <g_str_equal@plt+0x1ef76>
   2c20d:	mov    rdi,QWORD PTR [rbx+0xa8]
   2c214:	test   rdi,rdi
   2c217:	je     2c261 <g_str_equal@plt+0x1efa1>
   2c219:	cmp    QWORD PTR [rbx+0xb0],0x0
   2c221:	je     2c248 <g_str_equal@plt+0x1ef88>
   2c223:	mov    rax,QWORD PTR [rbx+0xb8]
   2c22a:	mov    QWORD PTR [r13+0x0],rax
   2c22e:	add    QWORD PTR [rbx+0xb8],0x1
   2c236:	add    rsp,0x8
   2c23a:	pop    rbx
   2c23b:	pop    rbp
   2c23c:	pop    r12
   2c23e:	pop    r13
   2c240:	ret    
   2c241:	nop    DWORD PTR [rax+0x0]
   2c248:	call   cf50 <g_list_first@plt>
   2c24d:	test   rax,rax
   2c250:	mov    QWORD PTR [rbx+0xb0],rax
   2c257:	je     2c261 <g_str_equal@plt+0x1efa1>
   2c259:	mov    rdx,QWORD PTR [rax]
   2c25c:	test   rdx,rdx
   2c25f:	jne    2c2b0 <g_str_equal@plt+0x1eff0>
   2c261:	lea    rax,[rip+0x2e83f]        # 5aaa7 <_fini@@Base+0x8353>
   2c268:	test   rbp,rbp
   2c26b:	lea    r8,[rip+0x31e8b]        # 5e0fd <_fini@@Base+0xb9a9>
   2c272:	lea    rcx,[rip+0x33187]        # 5f400 <_fini@@Base+0xccac>
   2c279:	lea    rsi,[rip+0x33090]        # 5f310 <_fini@@Base+0xcbbc>
   2c280:	mov    edx,0xf9
   2c285:	cmove  rbp,rax
   2c289:	lea    rax,[rip+0x33067]        # 5f2f7 <_fini@@Base+0xcba3>
   2c290:	sub    rsp,0x8
   2c294:	mov    r9,rbp
   2c297:	mov    rdi,r12
   2c29a:	push   rax
   2c29b:	xor    eax,eax
   2c29d:	call   3a090 <g_str_equal@plt+0x2cdd0>
   2c2a2:	pop    rax
   2c2a3:	pop    rdx
   2c2a4:	add    rsp,0x8
   2c2a8:	pop    rbx
   2c2a9:	pop    rbp
   2c2aa:	pop    r12
   2c2ac:	pop    r13
   2c2ae:	ret    
   2c2af:	nop
   2c2b0:	mov    rax,QWORD PTR [rdx]
   2c2b3:	mov    rdx,QWORD PTR [rdx+0x8]
   2c2b7:	cmp    rax,rdx
   2c2ba:	jbe    2c2d0 <g_str_equal@plt+0x1f010>
   2c2bc:	add    rdx,0x1
   2c2c0:	cmp    rax,rdx
   2c2c3:	jne    2c2dc <g_str_equal@plt+0x1f01c>
   2c2c5:	call   d37f <g_str_equal@plt+0xbf>
   2c2ca:	nop    WORD PTR [rax+rax*1+0x0]
   2c2d0:	mov    QWORD PTR [rbx+0xb8],rax
   2c2d7:	jmp    2c22a <g_str_equal@plt+0x1ef6a>
   2c2dc:	lea    rcx,[rip+0x331bd]        # 5f4a0 <_fini@@Base+0xcd4c>
   2c2e3:	lea    rsi,[rip+0x3306e]        # 5f358 <_fini@@Base+0xcc04>
   2c2ea:	lea    rdi,[rip+0x330c7]        # 5f3b8 <_fini@@Base+0xcc64>
   2c2f1:	mov    edx,0x2c
   2c2f6:	call   c390 <__assert_fail@plt>
   2c2fb:	nop    DWORD PTR [rax+rax*1+0x0]
   2c300:	push   rbp
   2c301:	push   rbx
   2c302:	mov    rbp,rcx
   2c305:	mov    rbx,rdx
   2c308:	sub    rsp,0x28
   2c30c:	lea    rcx,[rsp+0x10]
   2c311:	lea    rdx,[rsp+0x8]
   2c316:	mov    QWORD PTR [rsp+0x10],0x0
   2c31f:	mov    rax,QWORD PTR fs:0x28
   2c328:	mov    QWORD PTR [rsp+0x18],rax
   2c32d:	xor    eax,eax
   2c32f:	call   2c1e0 <g_str_equal@plt+0x1ef20>
   2c334:	mov    rsi,QWORD PTR [rsp+0x10]
   2c339:	test   rsi,rsi
   2c33c:	jne    2c360 <g_str_equal@plt+0x1f0a0>
   2c33e:	mov    rax,QWORD PTR [rsp+0x8]
   2c343:	mov    QWORD PTR [rbx],rax
   2c346:	mov    rax,QWORD PTR [rsp+0x18]
   2c34b:	xor    rax,QWORD PTR fs:0x28
   2c354:	jne    2c36a <g_str_equal@plt+0x1f0aa>
   2c356:	add    rsp,0x28
   2c35a:	pop    rbx
   2c35b:	pop    rbp
   2c35c:	ret    
   2c35d:	nop    DWORD PTR [rax]
   2c360:	mov    rdi,rbp
   2c363:	call   3a4c0 <g_str_equal@plt+0x2d200>
   2c368:	jmp    2c346 <g_str_equal@plt+0x1f086>
   2c36a:	call   cd30 <__stack_chk_fail@plt>
   2c36f:	nop
   2c370:	test   rdi,rdi
   2c373:	push   rbx
   2c374:	je     2c424 <g_str_equal@plt+0x1f164>
   2c37a:	mov    rbx,rdi
   2c37d:	mov    edi,0xd0
   2c382:	call   ce00 <g_malloc0@plt>
   2c387:	lea    rdx,[rip+0xfffffffffffffe52]        # 2c1e0 <g_str_equal@plt+0x1ef20>
   2c38e:	lea    rcx,[rip+0xffffffffffffff6b]        # 2c300 <g_str_equal@plt+0x1f040>
   2c395:	lea    rsi,[rip+0xfffffffffffff894]        # 2bc30 <g_str_equal@plt+0x1e970>
   2c39c:	lea    rdi,[rip+0xfffffffffffff9ad]        # 2bd50 <g_str_equal@plt+0x1ea90>
   2c3a3:	mov    DWORD PTR [rax+0x90],0x1
   2c3ad:	mov    QWORD PTR [rax+0xc0],rbx
   2c3b4:	mov    QWORD PTR [rax+0x48],rdx
   2c3b8:	lea    rdx,[rip+0xfffffffffffff761]        # 2bb20 <g_str_equal@plt+0x1e860>
   2c3bf:	mov    QWORD PTR [rax+0x50],rcx
   2c3c3:	mov    QWORD PTR [rax+0x58],rsi
   2c3c7:	lea    rcx,[rip+0xfffffffffffff732]        # 2bb00 <g_str_equal@plt+0x1e840>
   2c3ce:	lea    rsi,[rip+0xfffffffffffff64b]        # 2ba20 <g_str_equal@plt+0x1e760>
   2c3d5:	mov    QWORD PTR [rax+0x60],rdx
   2c3d9:	lea    rdx,[rip+0xfffffffffffffd20]        # 2c100 <g_str_equal@plt+0x1ee40>
   2c3e0:	mov    QWORD PTR [rax+0x80],rdi
   2c3e7:	mov    QWORD PTR [rax+0x68],rcx
   2c3eb:	mov    QWORD PTR [rax+0x70],rsi
   2c3ef:	lea    rcx,[rip+0xfffffffffffff9da]        # 2bdd0 <g_str_equal@plt+0x1eb10>
   2c3f6:	mov    QWORD PTR [rax+0x18],rdx
   2c3fa:	lea    rsi,[rip+0xfffffffffffff8df]        # 2bce0 <g_str_equal@plt+0x1ea20>
   2c401:	lea    rdi,[rip+0xfffffffffffff8a8]        # 2bcb0 <g_str_equal@plt+0x1e9f0>
   2c408:	lea    rdx,[rip+0xfffffffffffff5d1]        # 2b9e0 <g_str_equal@plt+0x1e720>
   2c40f:	mov    QWORD PTR [rax+0x20],rcx
   2c413:	mov    QWORD PTR [rax+0x28],rsi
   2c417:	mov    QWORD PTR [rax+0x30],rdi
   2c41b:	mov    QWORD PTR [rax+0xa0],rdx
   2c422:	pop    rbx
   2c423:	ret    
   2c424:	lea    rcx,[rip+0x330b5]        # 5f4e0 <_fini@@Base+0xcd8c>
   2c42b:	lea    rsi,[rip+0x32ede]        # 5f310 <_fini@@Base+0xcbbc>
   2c432:	lea    rdi,[rip+0x388cb]        # 64d04 <_fini@@Base+0x125b0>
   2c439:	mov    edx,0x167
   2c43e:	call   c390 <__assert_fail@plt>
   2c443:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2c44d:	nop    DWORD PTR [rax]
   2c450:	mov    rax,QWORD PTR [rsi]
   2c453:	test   rax,rax
   2c456:	je     2c45e <g_str_equal@plt+0x1f19e>
   2c458:	cmp    QWORD PTR [rax],0x0
   2c45c:	je     2c460 <g_str_equal@plt+0x1f1a0>
   2c45e:	repz ret 
   2c460:	mov    DWORD PTR [rdi+0xc0],0x5
   2c46a:	ret    
   2c46b:	nop    DWORD PTR [rax+rax*1+0x0]
   2c470:	push   rbx
   2c471:	mov    rbx,rdi
   2c474:	mov    rdi,QWORD PTR [rdi+0xb0]
   2c47b:	test   rdi,rdi
   2c47e:	je     2c48a <g_str_equal@plt+0x1f1ca>
   2c480:	mov    esi,0x1
   2c485:	call   c7a0 <g_string_free@plt>
   2c48a:	mov    rdi,QWORD PTR [rbx+0xd8]
   2c491:	lea    rsi,[rip+0x28]        # 2c4c0 <g_str_equal@plt+0x1f200>
   2c498:	xor    edx,edx
   2c49a:	call   c410 <g_list_foreach@plt>
   2c49f:	mov    rdi,QWORD PTR [rbx+0xd8]
   2c4a6:	call   c430 <g_list_free@plt>
   2c4ab:	mov    rdi,rbx
   2c4ae:	pop    rbx
   2c4af:	jmp    d2b0 <g_free@plt>
   2c4b4:	xchg   ax,ax
   2c4b6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2c4c0:	jmp    d2b0 <g_free@plt>
   2c4c5:	nop
   2c4c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2c4d0:	push   rbp
   2c4d1:	push   rbx
   2c4d2:	mov    rbp,rdi
   2c4d5:	mov    rbx,rsi
   2c4d8:	sub    rsp,0x8
   2c4dc:	mov    rdi,QWORD PTR [rdi]
   2c4df:	test   rdi,rdi
   2c4e2:	je     2c4ee <g_str_equal@plt+0x1f22e>
   2c4e4:	mov    esi,0x1
   2c4e9:	call   c7a0 <g_string_free@plt>
   2c4ee:	mov    rdi,rbx
   2c4f1:	call   c530 <g_string_new@plt>
   2c4f6:	mov    QWORD PTR [rbp+0x0],rax
   2c4fa:	add    rsp,0x8
   2c4fe:	mov    rdi,rbx
   2c501:	pop    rbx
   2c502:	pop    rbp
   2c503:	jmp    d2b0 <g_free@plt>
   2c508:	nop    DWORD PTR [rax+rax*1+0x0]
   2c510:	push   rbx
   2c511:	cmp    BYTE PTR [rdi+0xa8],0x0
   2c518:	mov    rbx,rdi
   2c51b:	jne    2c540 <g_str_equal@plt+0x1f280>
   2c51d:	lea    rdi,[rip+0x33d4a]        # 6026e <_fini@@Base+0xdb1a>
   2c524:	call   c370 <g_strdup@plt>
   2c529:	lea    rdi,[rbx+0xb0]
   2c530:	mov    rsi,rax
   2c533:	pop    rbx
   2c534:	jmp    2c4d0 <g_str_equal@plt+0x1f210>
   2c536:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2c540:	lea    rdi,[rip+0x32fb2]        # 5f4f9 <_fini@@Base+0xcda5>
   2c547:	call   c370 <g_strdup@plt>
   2c54c:	lea    rdi,[rbx+0xb0]
   2c553:	mov    rsi,rax
   2c556:	pop    rbx
   2c557:	jmp    2c4d0 <g_str_equal@plt+0x1f210>
   2c55c:	nop    DWORD PTR [rax+0x0]
   2c560:	cmp    BYTE PTR [rdx],0x0
   2c563:	push   rbx
   2c564:	lea    rax,[rip+0x30fb6]        # 5d521 <_fini@@Base+0xadcd>
   2c56b:	mov    rbx,rdi
   2c56e:	lea    rdi,[rip+0x32d52]        # 5f2c7 <_fini@@Base+0xcb73>
   2c575:	cmove  rdi,rax
   2c579:	call   c370 <g_strdup@plt>
   2c57e:	lea    rdi,[rbx+0xb0]
   2c585:	mov    rsi,rax
   2c588:	pop    rbx
   2c589:	jmp    2c4d0 <g_str_equal@plt+0x1f210>
   2c58e:	xchg   ax,ax
   2c590:	push   rbx
   2c591:	movsd  xmm0,QWORD PTR [rdx]
   2c595:	mov    rbx,rdi
   2c598:	lea    rdi,[rip+0x32f61]        # 5f500 <_fini@@Base+0xcdac>
   2c59f:	mov    eax,0x1
   2c5a4:	call   c740 <g_strdup_printf@plt>
   2c5a9:	lea    rdi,[rbx+0xb0]
   2c5b0:	mov    rsi,rax
   2c5b3:	pop    rbx
   2c5b4:	jmp    2c4d0 <g_str_equal@plt+0x1f210>
   2c5b9:	nop    DWORD PTR [rax+0x0]
   2c5c0:	push   rbx
   2c5c1:	mov    rbx,rdi
   2c5c4:	mov    rdi,QWORD PTR [rdx]
   2c5c7:	cmp    BYTE PTR [rbx+0xa8],0x0
   2c5ce:	je     2c600 <g_str_equal@plt+0x1f340>
   2c5d0:	test   rdi,rdi
   2c5d3:	je     2c628 <g_str_equal@plt+0x1f368>
   2c5d5:	mov    rsi,rdi
   2c5d8:	lea    rdi,[rip+0x359c4]        # 61fa3 <_fini@@Base+0xf84f>
   2c5df:	xor    eax,eax
   2c5e1:	call   c740 <g_strdup_printf@plt>
   2c5e6:	lea    rdi,[rbx+0xb0]
   2c5ed:	mov    rsi,rax
   2c5f0:	pop    rbx
   2c5f1:	jmp    2c4d0 <g_str_equal@plt+0x1f210>
   2c5f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2c600:	lea    rax,[rip+0x33c67]        # 6026e <_fini@@Base+0xdb1a>
   2c607:	test   rdi,rdi
   2c60a:	cmove  rdi,rax
   2c60e:	call   c370 <g_strdup@plt>
   2c613:	lea    rdi,[rbx+0xb0]
   2c61a:	mov    rsi,rax
   2c61d:	pop    rbx
   2c61e:	jmp    2c4d0 <g_str_equal@plt+0x1f210>
   2c623:	nop    DWORD PTR [rax+rax*1+0x0]
   2c628:	lea    rdi,[rip+0x32eca]        # 5f4f9 <_fini@@Base+0xcda5>
   2c62f:	call   c370 <g_strdup@plt>
   2c634:	lea    rdi,[rbx+0xb0]
   2c63b:	mov    rsi,rax
   2c63e:	pop    rbx
   2c63f:	jmp    2c4d0 <g_str_equal@plt+0x1f210>
   2c644:	xchg   ax,ax
   2c646:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2c650:	push   rbp
   2c651:	push   rbx
   2c652:	sub    rsp,0x8
   2c656:	mov    rbp,QWORD PTR [rdi+0xb8]
   2c65d:	cmp    rbp,rsi
   2c660:	jne    2c689 <g_str_equal@plt+0x1f3c9>
   2c662:	mov    rbx,rdi
   2c665:	mov    rdi,QWORD PTR [rdi+0xb0]
   2c66c:	xor    esi,esi
   2c66e:	call   c7a0 <g_string_free@plt>
   2c673:	mov    QWORD PTR [rbp+0x0],rax
   2c677:	mov    QWORD PTR [rbx+0xb0],0x0
   2c682:	add    rsp,0x8
   2c686:	pop    rbx
   2c687:	pop    rbp
   2c688:	ret    
   2c689:	lea    rcx,[rip+0x33050]        # 5f6e0 <_fini@@Base+0xcf8c>
   2c690:	lea    rsi,[rip+0x32ed1]        # 5f568 <_fini@@Base+0xce14>
   2c697:	lea    rdi,[rip+0x32e65]        # 5f503 <_fini@@Base+0xcdaf>
   2c69e:	mov    edx,0x13d
   2c6a3:	call   c390 <__assert_fail@plt>
   2c6a8:	nop    DWORD PTR [rax+rax*1+0x0]
   2c6b0:	sub    rsp,0x8
   2c6b4:	cmp    QWORD PTR [rdi+0xe0],rsi
   2c6bb:	jne    2c6fb <g_str_equal@plt+0x1f43b>
   2c6bd:	mov    eax,DWORD PTR [rdi+0xc0]
   2c6c3:	cmp    eax,0x5
   2c6c6:	je     2c6cd <g_str_equal@plt+0x1f40d>
   2c6c8:	cmp    eax,0x2
   2c6cb:	ja     2c6dc <g_str_equal@plt+0x1f41c>
   2c6cd:	mov    DWORD PTR [rdi+0xc0],0x0
   2c6d7:	add    rsp,0x8
   2c6db:	ret    
   2c6dc:	lea    rcx,[rip+0x32fe5]        # 5f6c8 <_fini@@Base+0xcf74>
   2c6e3:	lea    rsi,[rip+0x32e7e]        # 5f568 <_fini@@Base+0xce14>
   2c6ea:	lea    rdi,[rip+0x32ebf]        # 5f5b0 <_fini@@Base+0xce5c>
   2c6f1:	mov    edx,0x135
   2c6f6:	call   c390 <__assert_fail@plt>
   2c6fb:	lea    rcx,[rip+0x32fc6]        # 5f6c8 <_fini@@Base+0xcf74>
   2c702:	lea    rsi,[rip+0x32e5f]        # 5f568 <_fini@@Base+0xce14>
   2c709:	lea    rdi,[rip+0x32e09]        # 5f519 <_fini@@Base+0xcdc5>
   2c710:	mov    edx,0x131
   2c715:	call   c390 <__assert_fail@plt>
   2c71a:	nop    WORD PTR [rax+rax*1+0x0]
   2c720:	sub    rsp,0x8
   2c724:	mov    eax,DWORD PTR [rdi+0xc0]
   2c72a:	test   eax,eax
   2c72c:	jne    2c757 <g_str_equal@plt+0x1f497>
   2c72e:	test   rdx,rdx
   2c731:	je     2c776 <g_str_equal@plt+0x1f4b6>
   2c733:	mov    QWORD PTR [rdi+0xe0],rdx
   2c73a:	mov    rax,QWORD PTR [rdx]
   2c73d:	test   rax,rax
   2c740:	je     2c752 <g_str_equal@plt+0x1f492>
   2c742:	cmp    QWORD PTR [rax],0x0
   2c746:	je     2c752 <g_str_equal@plt+0x1f492>
   2c748:	mov    DWORD PTR [rdi+0xc0],0x1
   2c752:	add    rsp,0x8
   2c756:	ret    
   2c757:	lea    rcx,[rip+0x32f5a]        # 5f6b8 <_fini@@Base+0xcf64>
   2c75e:	lea    rsi,[rip+0x32e03]        # 5f568 <_fini@@Base+0xce14>
   2c765:	lea    rdi,[rip+0x32dbe]        # 5f52a <_fini@@Base+0xcdd6>
   2c76c:	mov    edx,0x118
   2c771:	call   c390 <__assert_fail@plt>
   2c776:	lea    rcx,[rip+0x32f3b]        # 5f6b8 <_fini@@Base+0xcf64>
   2c77d:	lea    rsi,[rip+0x32de4]        # 5f568 <_fini@@Base+0xce14>
   2c784:	lea    rdi,[rip+0x377cd]        # 63f58 <_fini@@Base+0x11804>
   2c78b:	mov    edx,0x11a
   2c790:	call   c390 <__assert_fail@plt>
   2c795:	nop
   2c796:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2c7a0:	push   r12
   2c7a2:	push   rbp
   2c7a3:	lea    rbp,[rdi+0xb0]
   2c7aa:	push   rbx
   2c7ab:	cmp    BYTE PTR [rdi+0xa8],0x0
   2c7b2:	mov    rbx,QWORD PTR [rdx]
   2c7b5:	je     2c7f0 <g_str_equal@plt+0x1f530>
   2c7b7:	mov    rdi,rbx
   2c7ba:	call   336f0 <g_str_equal@plt+0x26430>
   2c7bf:	lea    rdi,[rip+0x32d82]        # 5f548 <_fini@@Base+0xcdf4>
   2c7c6:	mov    r12,rax
   2c7c9:	mov    rdx,rax
   2c7cc:	mov    rsi,rbx
   2c7cf:	xor    eax,eax
   2c7d1:	call   c740 <g_strdup_printf@plt>
   2c7d6:	mov    rdi,rbp
   2c7d9:	mov    rsi,rax
   2c7dc:	call   2c4d0 <g_str_equal@plt+0x1f210>
   2c7e1:	pop    rbx
   2c7e2:	mov    rdi,r12
   2c7e5:	pop    rbp
   2c7e6:	pop    r12
   2c7e8:	jmp    d2b0 <g_free@plt>
   2c7ed:	nop    DWORD PTR [rax]
   2c7f0:	lea    rdi,[rip+0x32d4d]        # 5f544 <_fini@@Base+0xcdf0>
   2c7f7:	mov    rsi,rbx
   2c7fa:	xor    eax,eax
   2c7fc:	call   c740 <g_strdup_printf@plt>
   2c801:	pop    rbx
   2c802:	mov    rdi,rbp
   2c805:	mov    rsi,rax
   2c808:	pop    rbp
   2c809:	pop    r12
   2c80b:	jmp    2c4d0 <g_str_equal@plt+0x1f210>
   2c810:	push   rbp
   2c811:	push   rbx
   2c812:	mov    rbx,rdi
   2c815:	mov    edi,0x10
   2c81a:	mov    rbp,rsi
   2c81d:	sub    rsp,0x8
   2c821:	call   ce00 <g_malloc0@plt>
   2c826:	mov    rdi,QWORD PTR [rbx]
   2c829:	mov    QWORD PTR [rax],rbp
   2c82c:	mov    rsi,rax
   2c82f:	mov    QWORD PTR [rax+0x8],rbp
   2c833:	call   43a70 <g_str_equal@plt+0x367b0>
   2c838:	mov    QWORD PTR [rbx],rax
   2c83b:	add    rsp,0x8
   2c83f:	pop    rbx
   2c840:	pop    rbp
   2c841:	ret    
   2c842:	nop    DWORD PTR [rax+0x0]
   2c846:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2c850:	push   r12
   2c852:	push   rbp
   2c853:	mov    r12,rdi
   2c856:	push   rbx
   2c857:	mov    rbp,rsi
   2c85a:	mov    rbx,rdx
   2c85d:	mov    edi,0x10
   2c862:	call   ce00 <g_malloc0@plt>
   2c867:	cmp    rbx,rbp
   2c86a:	mov    QWORD PTR [rax],rbp
   2c86d:	mov    QWORD PTR [rax+0x8],rbx
   2c871:	jae    2c8a0 <g_str_equal@plt+0x1f5e0>
   2c873:	add    rbx,0x1
   2c877:	cmp    rbp,rbx
   2c87a:	jne    2c8b5 <g_str_equal@plt+0x1f5f5>
   2c87c:	lea    rcx,[rip+0x32dfd]        # 5f680 <_fini@@Base+0xcf2c>
   2c883:	lea    rsi,[rip+0x32ace]        # 5f358 <_fini@@Base+0xcc04>
   2c88a:	lea    rdi,[rip+0x32a4f]        # 5f2e0 <_fini@@Base+0xcb8c>
   2c891:	mov    edx,0x50
   2c896:	call   c390 <__assert_fail@plt>
   2c89b:	nop    DWORD PTR [rax+rax*1+0x0]
   2c8a0:	mov    rdi,QWORD PTR [r12]
   2c8a4:	mov    rsi,rax
   2c8a7:	call   43a70 <g_str_equal@plt+0x367b0>
   2c8ac:	pop    rbx
   2c8ad:	mov    QWORD PTR [r12],rax
   2c8b1:	pop    rbp
   2c8b2:	pop    r12
   2c8b4:	ret    
   2c8b5:	lea    rcx,[rip+0x32db4]        # 5f670 <_fini@@Base+0xcf1c>
   2c8bc:	lea    rsi,[rip+0x32a95]        # 5f358 <_fini@@Base+0xcc04>
   2c8c3:	lea    rdi,[rip+0x32aee]        # 5f3b8 <_fini@@Base+0xcc64>
   2c8ca:	mov    edx,0x2c
   2c8cf:	call   c390 <__assert_fail@plt>
   2c8d4:	xchg   ax,ax
   2c8d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2c8e0:	push   rbp
   2c8e1:	push   rbx
   2c8e2:	mov    ebp,edx
   2c8e4:	sub    rsp,0x8
   2c8e8:	mov    rdx,QWORD PTR [rsi]
   2c8eb:	mov    rax,QWORD PTR [rsi+0x8]
   2c8ef:	cmp    rdx,rax
   2c8f2:	jbe    2c920 <g_str_equal@plt+0x1f660>
   2c8f4:	add    rax,0x1
   2c8f8:	cmp    rdx,rax
   2c8fb:	jne    2c9a8 <g_str_equal@plt+0x1f6e8>
   2c901:	lea    rcx,[rip+0x32d58]        # 5f660 <_fini@@Base+0xcf0c>
   2c908:	lea    rsi,[rip+0x32a49]        # 5f358 <_fini@@Base+0xcc04>
   2c90f:	lea    rdi,[rip+0x329ca]        # 5f2e0 <_fini@@Base+0xcb8c>
   2c916:	mov    edx,0x68
   2c91b:	call   c390 <__assert_fail@plt>
   2c920:	mov    rbx,rdi
   2c923:	mov    rdi,QWORD PTR [rdi+0xb0]
   2c92a:	je     2c980 <g_str_equal@plt+0x1f6c0>
   2c92c:	test   cl,cl
   2c92e:	mov    rcx,rax
   2c931:	jne    2c950 <g_str_equal@plt+0x1f690>
   2c933:	lea    rsi,[rip+0x32c23]        # 5f55d <_fini@@Base+0xce09>
   2c93a:	xor    eax,eax
   2c93c:	call   d200 <g_string_append_printf@plt>
   2c941:	test   bpl,bpl
   2c944:	jne    2c963 <g_str_equal@plt+0x1f6a3>
   2c946:	add    rsp,0x8
   2c94a:	pop    rbx
   2c94b:	pop    rbp
   2c94c:	ret    
   2c94d:	nop    DWORD PTR [rax]
   2c950:	lea    rsi,[rip+0x32bfa]        # 5f551 <_fini@@Base+0xcdfd>
   2c957:	xor    eax,eax
   2c959:	call   d200 <g_string_append_printf@plt>
   2c95e:	test   bpl,bpl
   2c961:	je     2c946 <g_str_equal@plt+0x1f686>
   2c963:	mov    rdi,QWORD PTR [rbx+0xb0]
   2c96a:	add    rsp,0x8
   2c96e:	lea    rsi,[rip+0x36979]        # 632ee <_fini@@Base+0x10b9a>
   2c975:	pop    rbx
   2c976:	pop    rbp
   2c977:	jmp    d1d0 <g_string_append@plt>
   2c97c:	nop    DWORD PTR [rax+0x0]
   2c980:	test   cl,cl
   2c982:	je     2c998 <g_str_equal@plt+0x1f6d8>
   2c984:	lea    rsi,[rip+0x32bcc]        # 5f557 <_fini@@Base+0xce03>
   2c98b:	xor    eax,eax
   2c98d:	call   d200 <g_string_append_printf@plt>
   2c992:	jmp    2c941 <g_str_equal@plt+0x1f681>
   2c994:	nop    DWORD PTR [rax+0x0]
   2c998:	lea    rsi,[rip+0x32bc2]        # 5f561 <_fini@@Base+0xce0d>
   2c99f:	xor    eax,eax
   2c9a1:	call   d200 <g_string_append_printf@plt>
   2c9a6:	jmp    2c941 <g_str_equal@plt+0x1f681>
   2c9a8:	lea    rcx,[rip+0x32cc1]        # 5f670 <_fini@@Base+0xcf1c>
   2c9af:	lea    rsi,[rip+0x329a2]        # 5f358 <_fini@@Base+0xcc04>
   2c9b6:	lea    rdi,[rip+0x329fb]        # 5f3b8 <_fini@@Base+0xcc64>
   2c9bd:	mov    edx,0x2c
   2c9c2:	call   c390 <__assert_fail@plt>
   2c9c7:	nop    WORD PTR [rax+rax*1+0x0]
   2c9d0:	mov    eax,DWORD PTR [rdi+0xc0]
   2c9d6:	cmp    eax,0x1
   2c9d9:	je     2cb50 <g_str_equal@plt+0x1f890>
   2c9df:	push   r12
   2c9e1:	push   rbp
   2c9e2:	mov    rbp,rdi
   2c9e5:	push   rbx
   2c9e6:	mov    rbx,rdx
   2c9e9:	jb     2caa0 <g_str_equal@plt+0x1f7e0>
   2c9ef:	cmp    eax,0x2
   2c9f2:	je     2ca50 <g_str_equal@plt+0x1f790>
   2c9f4:	cmp    eax,0x5
   2c9f7:	jne    2cbef <g_str_equal@plt+0x1f92f>
   2c9fd:	mov    rax,QWORD PTR [rdi+0xd0]
   2ca04:	mov    rsi,QWORD PTR [rdi+0xc8]
   2ca0b:	lea    rdx,[rax+0x1]
   2ca0f:	cmp    rdx,QWORD PTR [rbx]
   2ca12:	je     2cb70 <g_str_equal@plt+0x1f8b0>
   2ca18:	cmp    rax,rsi
   2ca1b:	je     2cbd8 <g_str_equal@plt+0x1f918>
   2ca21:	jle    2cc32 <g_str_equal@plt+0x1f972>
   2ca27:	lea    r12,[rdi+0xd8]
   2ca2e:	mov    rdx,rax
   2ca31:	mov    rdi,r12
   2ca34:	call   2c850 <g_str_equal@plt+0x1f590>
   2ca39:	mov    rsi,QWORD PTR [rbx]
   2ca3c:	mov    rdi,r12
   2ca3f:	call   2c810 <g_str_equal@plt+0x1f550>
   2ca44:	jmp    2caaf <g_str_equal@plt+0x1f7ef>
   2ca46:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2ca50:	mov    rdx,QWORD PTR [rdi+0xd0]
   2ca57:	lea    rax,[rdx+0x1]
   2ca5b:	cmp    rax,QWORD PTR [rbx]
   2ca5e:	je     2ca8f <g_str_equal@plt+0x1f7cf>
   2ca60:	mov    rsi,QWORD PTR [rdi+0xc8]
   2ca67:	cmp    rdx,rsi
   2ca6a:	je     2cbc0 <g_str_equal@plt+0x1f900>
   2ca70:	jle    2cbf4 <g_str_equal@plt+0x1f934>
   2ca76:	lea    rdi,[rdi+0xd8]
   2ca7d:	call   2c850 <g_str_equal@plt+0x1f590>
   2ca82:	mov    rax,QWORD PTR [rbx]
   2ca85:	mov    QWORD PTR [rbp+0xc8],rax
   2ca8c:	mov    rax,QWORD PTR [rbx]
   2ca8f:	mov    QWORD PTR [rbp+0xd0],rax
   2ca96:	pop    rbx
   2ca97:	pop    rbp
   2ca98:	pop    r12
   2ca9a:	ret    
   2ca9b:	nop    DWORD PTR [rax+rax*1+0x0]
   2caa0:	mov    rsi,QWORD PTR [rdx]
   2caa3:	lea    rdi,[rdi+0xd8]
   2caaa:	call   2c810 <g_str_equal@plt+0x1f550>
   2caaf:	mov    rbx,QWORD PTR [rbp+0xd8]
   2cab6:	test   rbx,rbx
   2cab9:	je     2cb98 <g_str_equal@plt+0x1f8d8>
   2cabf:	nop
   2cac0:	xor    edx,edx
   2cac2:	cmp    QWORD PTR [rbx+0x8],0x0
   2cac7:	mov    rsi,QWORD PTR [rbx]
   2caca:	mov    rdi,rbp
   2cacd:	setne  dl
   2cad0:	xor    ecx,ecx
   2cad2:	call   2c8e0 <g_str_equal@plt+0x1f620>
   2cad7:	mov    rbx,QWORD PTR [rbx+0x8]
   2cadb:	test   rbx,rbx
   2cade:	jne    2cac0 <g_str_equal@plt+0x1f800>
   2cae0:	cmp    BYTE PTR [rbp+0xa8],0x0
   2cae7:	je     2ca96 <g_str_equal@plt+0x1f7d6>
   2cae9:	mov    rbx,QWORD PTR [rbp+0xd8]
   2caf0:	mov    rdi,QWORD PTR [rbp+0xb0]
   2caf7:	lea    rsi,[rip+0x32a67]        # 5f565 <_fini@@Base+0xce11>
   2cafe:	call   d1d0 <g_string_append@plt>
   2cb03:	test   rbx,rbx
   2cb06:	je     2cb33 <g_str_equal@plt+0x1f873>
   2cb08:	nop    DWORD PTR [rax+rax*1+0x0]
   2cb10:	xor    edx,edx
   2cb12:	cmp    QWORD PTR [rbx+0x8],0x0
   2cb17:	mov    rsi,QWORD PTR [rbx]
   2cb1a:	mov    ecx,0x1
   2cb1f:	mov    rdi,rbp
   2cb22:	setne  dl
   2cb25:	call   2c8e0 <g_str_equal@plt+0x1f620>
   2cb2a:	mov    rbx,QWORD PTR [rbx+0x8]
   2cb2e:	test   rbx,rbx
   2cb31:	jne    2cb10 <g_str_equal@plt+0x1f850>
   2cb33:	pop    rbx
   2cb34:	mov    rdi,QWORD PTR [rbp+0xb0]
   2cb3b:	lea    rsi,[rip+0x36ea9]        # 639eb <_fini@@Base+0x11297>
   2cb42:	pop    rbp
   2cb43:	pop    r12
   2cb45:	jmp    d1d0 <g_string_append@plt>
   2cb4a:	nop    WORD PTR [rax+rax*1+0x0]
   2cb50:	mov    rax,QWORD PTR [rdx]
   2cb53:	mov    QWORD PTR [rdi+0xc8],rax
   2cb5a:	mov    rax,QWORD PTR [rdx]
   2cb5d:	mov    DWORD PTR [rdi+0xc0],0x2
   2cb67:	mov    QWORD PTR [rdi+0xd0],rax
   2cb6e:	ret    
   2cb6f:	nop
   2cb70:	cmp    rdx,rsi
   2cb73:	mov    QWORD PTR [rdi+0xd0],rdx
   2cb7a:	jle    2cc13 <g_str_equal@plt+0x1f953>
   2cb80:	lea    rdi,[rdi+0xd8]
   2cb87:	call   2c850 <g_str_equal@plt+0x1f590>
   2cb8c:	jmp    2caaf <g_str_equal@plt+0x1f7ef>
   2cb91:	nop    DWORD PTR [rax+0x0]
   2cb98:	cmp    BYTE PTR [rbp+0xa8],0x0
   2cb9f:	je     2ca96 <g_str_equal@plt+0x1f7d6>
   2cba5:	mov    rdi,QWORD PTR [rbp+0xb0]
   2cbac:	lea    rsi,[rip+0x329b2]        # 5f565 <_fini@@Base+0xce11>
   2cbb3:	call   d1d0 <g_string_append@plt>
   2cbb8:	jmp    2cb33 <g_str_equal@plt+0x1f873>
   2cbbd:	nop    DWORD PTR [rax]
   2cbc0:	lea    rdi,[rdi+0xd8]
   2cbc7:	mov    rsi,rdx
   2cbca:	call   2c810 <g_str_equal@plt+0x1f550>
   2cbcf:	jmp    2ca82 <g_str_equal@plt+0x1f7c2>
   2cbd4:	nop    DWORD PTR [rax+0x0]
   2cbd8:	lea    r12,[rdi+0xd8]
   2cbdf:	mov    rsi,rax
   2cbe2:	mov    rdi,r12
   2cbe5:	call   2c810 <g_str_equal@plt+0x1f550>
   2cbea:	jmp    2ca39 <g_str_equal@plt+0x1f779>
   2cbef:	call   c270 <abort@plt>
   2cbf4:	lea    rcx,[rip+0x32aa5]        # 5f6a0 <_fini@@Base+0xcf4c>
   2cbfb:	lea    rsi,[rip+0x32966]        # 5f568 <_fini@@Base+0xce14>
   2cc02:	lea    rdi,[rip+0x32a27]        # 5f630 <_fini@@Base+0xcedc>
   2cc09:	mov    edx,0x96
   2cc0e:	call   c390 <__assert_fail@plt>
   2cc13:	lea    rcx,[rip+0x32a86]        # 5f6a0 <_fini@@Base+0xcf4c>
   2cc1a:	lea    rsi,[rip+0x32947]        # 5f568 <_fini@@Base+0xce14>
   2cc21:	lea    rdi,[rip+0x32a08]        # 5f630 <_fini@@Base+0xcedc>
   2cc28:	mov    edx,0xa3
   2cc2d:	call   c390 <__assert_fail@plt>
   2cc32:	lea    rcx,[rip+0x32a67]        # 5f6a0 <_fini@@Base+0xcf4c>
   2cc39:	lea    rsi,[rip+0x32928]        # 5f568 <_fini@@Base+0xce14>
   2cc40:	lea    rdi,[rip+0x329e9]        # 5f630 <_fini@@Base+0xcedc>
   2cc47:	mov    edx,0xaa
   2cc4c:	call   c390 <__assert_fail@plt>
   2cc51:	nop    DWORD PTR [rax+rax*1+0x0]
   2cc56:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2cc60:	sub    rsp,0x18
   2cc64:	mov    rax,QWORD PTR fs:0x28
   2cc6d:	mov    QWORD PTR [rsp+0x8],rax
   2cc72:	xor    eax,eax
   2cc74:	mov    rax,QWORD PTR [rdx]
   2cc77:	mov    rdx,rsp
   2cc7a:	mov    QWORD PTR [rsp],rax
   2cc7e:	call   2c9d0 <g_str_equal@plt+0x1f710>
   2cc83:	mov    rax,QWORD PTR [rsp+0x8]
   2cc88:	xor    rax,QWORD PTR fs:0x28
   2cc91:	jne    2cc98 <g_str_equal@plt+0x1f9d8>
   2cc93:	add    rsp,0x18
   2cc97:	ret    
   2cc98:	call   cd30 <__stack_chk_fail@plt>
   2cc9d:	nop    DWORD PTR [rax]
   2cca0:	push   r12
   2cca2:	push   rbp
   2cca3:	mov    r12d,edi
   2cca6:	push   rbx
   2cca7:	mov    edi,0xe8
   2ccac:	mov    rbp,rsi
   2ccaf:	call   ce00 <g_malloc0@plt>
   2ccb4:	xor    edi,edi
   2ccb6:	mov    rbx,rax
   2ccb9:	call   c530 <g_string_new@plt>
   2ccbe:	mov    QWORD PTR [rbx+0xb0],rax
   2ccc5:	lea    rax,[rip+0xfffffffffffffd04]        # 2c9d0 <g_str_equal@plt+0x1f710>
   2cccc:	mov    QWORD PTR [rbp+0x0],0x0
   2ccd4:	mov    BYTE PTR [rbx+0xa8],r12b
   2ccdb:	mov    QWORD PTR [rbx+0xb8],rbp
   2cce2:	mov    QWORD PTR [rbx+0x48],rax
   2cce6:	lea    rax,[rip+0xffffffffffffff73]        # 2cc60 <g_str_equal@plt+0x1f9a0>
   2cced:	mov    DWORD PTR [rbx+0x90],0x2
   2ccf7:	mov    QWORD PTR [rbx+0x50],rax
   2ccfb:	lea    rax,[rip+0xfffffffffffffa9e]        # 2c7a0 <g_str_equal@plt+0x1f4e0>
   2cd02:	mov    QWORD PTR [rbx+0x58],rax
   2cd06:	lea    rax,[rip+0xfffffffffffff853]        # 2c560 <g_str_equal@plt+0x1f2a0>
   2cd0d:	mov    QWORD PTR [rbx+0x60],rax
   2cd11:	lea    rax,[rip+0xfffffffffffff8a8]        # 2c5c0 <g_str_equal@plt+0x1f300>
   2cd18:	mov    QWORD PTR [rbx+0x68],rax
   2cd1c:	lea    rax,[rip+0xfffffffffffff86d]        # 2c590 <g_str_equal@plt+0x1f2d0>
   2cd23:	mov    QWORD PTR [rbx+0x70],rax
   2cd27:	lea    rax,[rip+0xfffffffffffff7e2]        # 2c510 <g_str_equal@plt+0x1f250>
   2cd2e:	mov    QWORD PTR [rbx+0x80],rax
   2cd35:	lea    rax,[rip+0xfffffffffffff9e4]        # 2c720 <g_str_equal@plt+0x1f460>
   2cd3c:	mov    QWORD PTR [rbx+0x18],rax
   2cd40:	lea    rax,[rip+0xfffffffffffff709]        # 2c450 <g_str_equal@plt+0x1f190>
   2cd47:	mov    QWORD PTR [rbx+0x20],rax
   2cd4b:	lea    rax,[rip+0xfffffffffffff95e]        # 2c6b0 <g_str_equal@plt+0x1f3f0>
   2cd52:	mov    QWORD PTR [rbx+0x30],rax
   2cd56:	lea    rax,[rip+0xfffffffffffff8f3]        # 2c650 <g_str_equal@plt+0x1f390>
   2cd5d:	mov    QWORD PTR [rbx+0x98],rax
   2cd64:	lea    rax,[rip+0xfffffffffffff705]        # 2c470 <g_str_equal@plt+0x1f1b0>
   2cd6b:	mov    QWORD PTR [rbx+0xa0],rax
   2cd72:	mov    rax,rbx
   2cd75:	pop    rbx
   2cd76:	pop    rbp
   2cd77:	pop    r12
   2cd79:	ret    
   2cd7a:	nop    WORD PTR [rax+rax*1+0x0]
   2cd80:	repz ret 
   2cd82:	nop    DWORD PTR [rax+0x0]
   2cd86:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2cd90:	push   rbx
   2cd91:	mov    rbx,rdi
   2cd94:	mov    rdi,QWORD PTR [rdi+0xb8]
   2cd9b:	test   rdi,rdi
   2cd9e:	je     2cda5 <g_str_equal@plt+0x1fae5>
   2cda0:	call   c250 <g_hash_table_destroy@plt>
   2cda5:	mov    rdi,QWORD PTR [rbx+0xe0]
   2cdac:	call   d2b0 <g_free@plt>
   2cdb1:	mov    rdi,rbx
   2cdb4:	pop    rbx
   2cdb5:	jmp    d2b0 <g_free@plt>
   2cdba:	nop    WORD PTR [rax+rax*1+0x0]
   2cdc0:	push   r13
   2cdc2:	push   r12
   2cdc4:	mov    r12,rdx
   2cdc7:	push   rbp
   2cdc8:	push   rbx
   2cdc9:	mov    rbp,rsi
   2cdcc:	mov    rbx,rdi
   2cdcf:	sub    rsp,0x8
   2cdd3:	mov    eax,DWORD PTR [rdi+0xc0]
   2cdd9:	cmp    eax,0x1
   2cddc:	je     2ce1f <g_str_equal@plt+0x1fb5f>
   2cdde:	jb     2ce55 <g_str_equal@plt+0x1fb95>
   2cde0:	cmp    eax,0x3
   2cde3:	ja     2ce55 <g_str_equal@plt+0x1fb95>
   2cde5:	cmp    eax,0x2
   2cde8:	mov    rdx,QWORD PTR [rdi+0xd0]
   2cdef:	mov    rcx,QWORD PTR [rdi+0xd8]
   2cdf6:	je     2ce10 <g_str_equal@plt+0x1fb50>
   2cdf8:	cmp    rcx,rdx
   2cdfb:	jbe    2ce15 <g_str_equal@plt+0x1fb55>
   2cdfd:	add    rdx,0x1
   2ce01:	mov    QWORD PTR [rbx+0xd0],rdx
   2ce08:	jmp    2ce3e <g_str_equal@plt+0x1fb7e>
   2ce0a:	nop    WORD PTR [rax+rax*1+0x0]
   2ce10:	cmp    rcx,rdx
   2ce13:	jg     2cdfd <g_str_equal@plt+0x1fb3d>
   2ce15:	mov    DWORD PTR [rbx+0xc0],0x1
   2ce1f:	mov    rdi,QWORD PTR [rbx+0xc8]
   2ce26:	call   d280 <g_queue_pop_head@plt>
   2ce2b:	mov    rdi,QWORD PTR [rbx+0xc8]
   2ce32:	mov    r13,rax
   2ce35:	call   ceb0 <g_queue_is_empty@plt>
   2ce3a:	test   eax,eax
   2ce3c:	jne    2ce60 <g_str_equal@plt+0x1fba0>
   2ce3e:	mov    rdi,r12
   2ce41:	call   ce00 <g_malloc0@plt>
   2ce46:	mov    QWORD PTR [rbp+0x0],rax
   2ce4a:	add    rsp,0x8
   2ce4e:	pop    rbx
   2ce4f:	pop    rbp
   2ce50:	pop    r12
   2ce52:	pop    r13
   2ce54:	ret    
   2ce55:	call   c270 <abort@plt>
   2ce5a:	nop    WORD PTR [rax+rax*1+0x0]
   2ce60:	mov    rdi,QWORD PTR [rbx+0xb8]
   2ce67:	mov    rsi,QWORD PTR [r13+0x0]
   2ce6b:	call   c560 <g_hash_table_remove@plt>
   2ce70:	xor    eax,eax
   2ce72:	jmp    2ce4a <g_str_equal@plt+0x1fb8a>
   2ce74:	xchg   ax,ax
   2ce76:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2ce80:	jmp    c590 <g_queue_free@plt>
   2ce85:	nop
   2ce86:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2ce90:	push   r12
   2ce92:	push   rbp
   2ce93:	mov    rbp,rsi
   2ce96:	push   rbx
   2ce97:	mov    rsi,QWORD PTR [rsi]
   2ce9a:	mov    r12,rdi
   2ce9d:	call   cdb0 <g_hash_table_lookup@plt>
   2cea2:	test   rax,rax
   2cea5:	mov    rbx,rax
   2cea8:	je     2cec0 <g_str_equal@plt+0x1fc00>
   2ceaa:	mov    rsi,rbp
   2cead:	mov    rdi,rbx
   2ceb0:	pop    rbx
   2ceb1:	pop    rbp
   2ceb2:	pop    r12
   2ceb4:	jmp    c1e0 <g_queue_push_tail@plt>
   2ceb9:	nop    DWORD PTR [rax+0x0]
   2cec0:	call   d1b0 <g_queue_new@plt>
   2cec5:	mov    rsi,QWORD PTR [rbp+0x0]
   2cec9:	mov    rbx,rax
   2cecc:	mov    rdi,r12
   2cecf:	mov    rdx,rax
   2ced2:	call   c420 <g_hash_table_insert@plt>
   2ced7:	mov    rsi,rbp
   2ceda:	mov    rdi,rbx
   2cedd:	pop    rbx
   2cede:	pop    rbp
   2cedf:	pop    r12
   2cee1:	jmp    c1e0 <g_queue_push_tail@plt>
   2cee6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2cef0:	mov    eax,DWORD PTR [rdi+0xc0]
   2cef6:	sub    eax,0x1
   2cef9:	cmp    eax,0x2
   2cefc:	ja     2cf14 <g_str_equal@plt+0x1fc54>
   2cefe:	mov    QWORD PTR [rdi+0xc8],0x0
   2cf09:	mov    DWORD PTR [rdi+0xc0],0x0
   2cf13:	ret    
   2cf14:	lea    rcx,[rip+0x329b5]        # 5f8d0 <_fini@@Base+0xd17c>
   2cf1b:	lea    rsi,[rip+0x327d6]        # 5f6f8 <_fini@@Base+0xcfa4>
   2cf22:	lea    rdi,[rip+0x3280f]        # 5f738 <_fini@@Base+0xcfe4>
   2cf29:	sub    rsp,0x8
   2cf2d:	mov    edx,0x124
   2cf32:	call   c390 <__assert_fail@plt>
   2cf37:	nop    WORD PTR [rax+rax*1+0x0]
   2cf40:	sub    DWORD PTR [rdi+0xb0],0x1
   2cf47:	je     2cf50 <g_str_equal@plt+0x1fc90>
   2cf49:	repz ret 
   2cf4b:	nop    DWORD PTR [rax+rax*1+0x0]
   2cf50:	push   rbx
   2cf51:	mov    rbx,rdi
   2cf54:	mov    rdi,QWORD PTR [rdi+0xb8]
   2cf5b:	call   c250 <g_hash_table_destroy@plt>
   2cf60:	mov    rax,QWORD PTR [rbx+0xe0]
   2cf67:	mov    QWORD PTR [rbx+0xb8],0x0
   2cf72:	test   rax,rax
   2cf75:	je     2cf9b <g_str_equal@plt+0x1fcdb>
   2cf77:	mov    rdi,QWORD PTR [rax]
   2cf7a:	call   d2b0 <g_free@plt>
   2cf7f:	mov    rax,QWORD PTR [rbx+0xe0]
   2cf86:	mov    rdi,QWORD PTR [rax+0x8]
   2cf8a:	call   d2b0 <g_free@plt>
   2cf8f:	mov    rdi,QWORD PTR [rbx+0xe0]
   2cf96:	call   d2b0 <g_free@plt>
   2cf9b:	mov    QWORD PTR [rbx+0xe0],0x0
   2cfa6:	pop    rbx
   2cfa7:	ret    
   2cfa8:	nop    DWORD PTR [rax+rax*1+0x0]
   2cfb0:	mov    r9,rdi
   2cfb3:	lea    r8,[rip+0x30e0b]        # 5ddc5 <_fini@@Base+0xb671>
   2cfba:	mov    rdi,rsi
   2cfbd:	lea    rcx,[rip+0x329bc]        # 5f980 <_fini@@Base+0xd22c>
   2cfc4:	lea    rsi,[rip+0x3272d]        # 5f6f8 <_fini@@Base+0xcfa4>
   2cfcb:	mov    edx,0xd1
   2cfd0:	xor    eax,eax
   2cfd2:	jmp    3a090 <g_str_equal@plt+0x2cdd0>
   2cfd7:	nop    WORD PTR [rax+rax*1+0x0]
   2cfe0:	push   rbp
   2cfe1:	push   rbx
   2cfe2:	sub    rsp,0x18
   2cfe6:	mov    eax,DWORD PTR [rdi+0xc0]
   2cfec:	test   eax,eax
   2cfee:	jne    2d03a <g_str_equal@plt+0x1fd7a>
   2cff0:	mov    rdi,QWORD PTR [rdi+0xb8]
   2cff7:	mov    rbx,rsi
   2cffa:	mov    rbp,rdx
   2cffd:	call   cdb0 <g_hash_table_lookup@plt>
   2d002:	test   rax,rax
   2d005:	je     2d018 <g_str_equal@plt+0x1fd58>
   2d007:	test   rax,rax
   2d00a:	setne  BYTE PTR [rbp+0x0]
   2d00e:	add    rsp,0x18
   2d012:	pop    rbx
   2d013:	pop    rbp
   2d014:	ret    
   2d015:	nop    DWORD PTR [rax]
   2d018:	xor    esi,esi
   2d01a:	mov    rdi,rbx
   2d01d:	mov    QWORD PTR [rsp+0x8],rax
   2d022:	call   2cfb0 <g_str_equal@plt+0x1fcf0>
   2d027:	mov    rax,QWORD PTR [rsp+0x8]
   2d02c:	test   rax,rax
   2d02f:	setne  BYTE PTR [rbp+0x0]
   2d033:	add    rsp,0x18
   2d037:	pop    rbx
   2d038:	pop    rbp
   2d039:	ret    
   2d03a:	lea    rcx,[rip+0x3294f]        # 5f990 <_fini@@Base+0xd23c>
   2d041:	lea    rsi,[rip+0x326b0]        # 5f6f8 <_fini@@Base+0xcfa4>
   2d048:	lea    rdi,[rip+0x324dc]        # 5f52b <_fini@@Base+0xcdd7>
   2d04f:	mov    edx,0x206
   2d054:	call   c390 <__assert_fail@plt>
   2d059:	nop    DWORD PTR [rax+0x0]
   2d060:	push   r14
   2d062:	push   r13
   2d064:	push   r12
   2d066:	push   rbp
   2d067:	push   rbx
   2d068:	mov    eax,DWORD PTR [rdi+0xc0]
   2d06e:	test   eax,eax
   2d070:	jne    2d0ef <g_str_equal@plt+0x1fe2f>
   2d072:	test   rdx,rdx
   2d075:	mov    rbp,rdx
   2d078:	je     2d10e <g_str_equal@plt+0x1fe4e>
   2d07e:	mov    rbx,rdi
   2d081:	mov    rdi,QWORD PTR [rdi+0xb8]
   2d088:	mov    r12,rsi
   2d08b:	mov    r13,rcx
   2d08e:	mov    r14,r8
   2d091:	call   cdb0 <g_hash_table_lookup@plt>
   2d096:	test   rax,rax
   2d099:	je     2d0c8 <g_str_equal@plt+0x1fe08>
   2d09b:	mov    QWORD PTR [rbx+0xc8],rax
   2d0a2:	mov    DWORD PTR [rbx+0xc0],0x1
   2d0ac:	mov    rdi,r13
   2d0af:	call   ce00 <g_malloc0@plt>
   2d0b4:	mov    QWORD PTR [rbp+0x0],rax
   2d0b8:	pop    rbx
   2d0b9:	pop    rbp
   2d0ba:	pop    r12
   2d0bc:	pop    r13
   2d0be:	pop    r14
   2d0c0:	ret    
   2d0c1:	nop    DWORD PTR [rax+0x0]
   2d0c8:	mov    rsi,r14
   2d0cb:	mov    rdi,r12
   2d0ce:	call   2cfb0 <g_str_equal@plt+0x1fcf0>
   2d0d3:	mov    QWORD PTR [rbx+0xc8],0x0
   2d0de:	mov    QWORD PTR [rbp+0x0],0x0
   2d0e6:	pop    rbx
   2d0e7:	pop    rbp
   2d0e8:	pop    r12
   2d0ea:	pop    r13
   2d0ec:	pop    r14
   2d0ee:	ret    
   2d0ef:	lea    rcx,[rip+0x327ca]        # 5f8c0 <_fini@@Base+0xd16c>
   2d0f6:	lea    rsi,[rip+0x325fb]        # 5f6f8 <_fini@@Base+0xcfa4>
   2d0fd:	lea    rdi,[rip+0x32427]        # 5f52b <_fini@@Base+0xcdd7>
   2d104:	mov    edx,0xde
   2d109:	call   c390 <__assert_fail@plt>
   2d10e:	lea    rcx,[rip+0x327ab]        # 5f8c0 <_fini@@Base+0xd16c>
   2d115:	lea    rsi,[rip+0x325dc]        # 5f6f8 <_fini@@Base+0xcfa4>
   2d11c:	lea    rdi,[rip+0x36e35]        # 63f58 <_fini@@Base+0x11804>
   2d123:	mov    edx,0xe0
   2d128:	call   c390 <__assert_fail@plt>
   2d12d:	nop    DWORD PTR [rax]
   2d130:	push   rbx
   2d131:	sub    rsp,0x10
   2d135:	mov    eax,DWORD PTR [rdi+0xc0]
   2d13b:	test   eax,eax
   2d13d:	je     2d158 <g_str_equal@plt+0x1fe98>
   2d13f:	cmp    eax,0x1
   2d142:	jne    2d19b <g_str_equal@plt+0x1fedb>
   2d144:	mov    rdi,QWORD PTR [rdi+0xc8]
   2d14b:	add    rsp,0x10
   2d14f:	pop    rbx
   2d150:	jmp    ce30 <g_queue_peek_head@plt>
   2d155:	nop    DWORD PTR [rax]
   2d158:	mov    rdi,QWORD PTR [rdi+0xb8]
   2d15f:	mov    QWORD PTR [rsp+0x8],rdx
   2d164:	mov    rbx,rsi
   2d167:	call   cdb0 <g_hash_table_lookup@plt>
   2d16c:	test   rax,rax
   2d16f:	mov    rdx,QWORD PTR [rsp+0x8]
   2d174:	je     2d188 <g_str_equal@plt+0x1fec8>
   2d176:	add    rsp,0x10
   2d17a:	mov    rdi,rax
   2d17d:	pop    rbx
   2d17e:	jmp    cf80 <g_queue_peek_tail@plt>
   2d183:	nop    DWORD PTR [rax+rax*1+0x0]
   2d188:	mov    rdi,rbx
   2d18b:	mov    rsi,rdx
   2d18e:	call   2cfb0 <g_str_equal@plt+0x1fcf0>
   2d193:	add    rsp,0x10
   2d197:	xor    eax,eax
   2d199:	pop    rbx
   2d19a:	ret    
   2d19b:	lea    rcx,[rip+0x327c6]        # 5f968 <_fini@@Base+0xd214>
   2d1a2:	lea    rsi,[rip+0x3254f]        # 5f6f8 <_fini@@Base+0xcfa4>
   2d1a9:	lea    rdi,[rip+0x325f8]        # 5f7a8 <_fini@@Base+0xd054>
   2d1b0:	mov    edx,0x135
   2d1b5:	call   c390 <__assert_fail@plt>
   2d1ba:	nop    WORD PTR [rax+rax*1+0x0]
   2d1c0:	push   r12
   2d1c2:	push   rbp
   2d1c3:	mov    r12,rdx
   2d1c6:	push   rbx
   2d1c7:	mov    rdx,rcx
   2d1ca:	mov    rbx,rdi
   2d1cd:	mov    rbp,rsi
   2d1d0:	call   2d130 <g_str_equal@plt+0x1fe70>
   2d1d5:	test   rax,rax
   2d1d8:	je     2d210 <g_str_equal@plt+0x1ff50>
   2d1da:	mov    rdi,QWORD PTR [rax+0x8]
   2d1de:	lea    rax,[rip+0x33089]        # 6026e <_fini@@Base+0xdb1a>
   2d1e5:	test   rdi,rdi
   2d1e8:	cmove  rdi,rax
   2d1ec:	call   c370 <g_strdup@plt>
   2d1f1:	mov    QWORD PTR [r12],rax
   2d1f5:	mov    eax,DWORD PTR [rbx+0xc0]
   2d1fb:	test   eax,eax
   2d1fd:	je     2d220 <g_str_equal@plt+0x1ff60>
   2d1ff:	cmp    eax,0x1
   2d202:	jne    2d233 <g_str_equal@plt+0x1ff73>
   2d204:	pop    rbx
   2d205:	pop    rbp
   2d206:	pop    r12
   2d208:	ret    
   2d209:	nop    DWORD PTR [rax+0x0]
   2d210:	pop    rbx
   2d211:	mov    QWORD PTR [r12],0x0
   2d219:	pop    rbp
   2d21a:	pop    r12
   2d21c:	ret    
   2d21d:	nop    DWORD PTR [rax]
   2d220:	mov    rdi,QWORD PTR [rbx+0xb8]
   2d227:	mov    rsi,rbp
   2d22a:	pop    rbx
   2d22b:	pop    rbp
   2d22c:	pop    r12
   2d22e:	jmp    c560 <g_hash_table_remove@plt>
   2d233:	call   d3c5 <g_str_equal@plt+0x105>
   2d238:	nop    DWORD PTR [rax+rax*1+0x0]
   2d240:	push   r13
   2d242:	push   r12
   2d244:	mov    r13,rdx
   2d247:	push   rbp
   2d248:	push   rbx
   2d249:	mov    rdx,rcx
   2d24c:	mov    rbx,rdi
   2d24f:	mov    rbp,rsi
   2d252:	mov    r12,rcx
   2d255:	sub    rsp,0x8
   2d259:	call   2d130 <g_str_equal@plt+0x1fe70>
   2d25e:	test   rax,rax
   2d261:	je     2d2a3 <g_str_equal@plt+0x1ffe3>
   2d263:	mov    rdx,QWORD PTR [rax+0x8]
   2d267:	test   rdx,rdx
   2d26a:	je     2d287 <g_str_equal@plt+0x1ffc7>
   2d26c:	lea    rdi,[rip+0x353c5]        # 62638 <_fini@@Base+0xfee4>
   2d273:	mov    ecx,0x3
   2d278:	mov    rsi,rdx
   2d27b:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   2d27d:	seta   cl
   2d280:	sbb    cl,0x0
   2d283:	test   cl,cl
   2d285:	jne    2d2b0 <g_str_equal@plt+0x1fff0>
   2d287:	mov    BYTE PTR [r13+0x0],0x1
   2d28c:	mov    eax,DWORD PTR [rbx+0xc0]
   2d292:	test   eax,eax
   2d294:	je     2d378 <g_str_equal@plt+0x200b8>
   2d29a:	cmp    eax,0x1
   2d29d:	jne    2d3a2 <g_str_equal@plt+0x200e2>
   2d2a3:	add    rsp,0x8
   2d2a7:	pop    rbx
   2d2a8:	pop    rbp
   2d2a9:	pop    r12
   2d2ab:	pop    r13
   2d2ad:	ret    
   2d2ae:	xchg   ax,ax
   2d2b0:	lea    rdi,[rip+0x3200c]        # 5f2c3 <_fini@@Base+0xcb6f>
   2d2b7:	mov    ecx,0x4
   2d2bc:	mov    rsi,rdx
   2d2bf:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   2d2c1:	seta   cl
   2d2c4:	sbb    cl,0x0
   2d2c7:	test   cl,cl
   2d2c9:	je     2d287 <g_str_equal@plt+0x1ffc7>
   2d2cb:	lea    rdi,[rip+0x301df]        # 5d4b1 <_fini@@Base+0xad5d>
   2d2d2:	mov    ecx,0x2
   2d2d7:	mov    rsi,rdx
   2d2da:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   2d2dc:	seta   cl
   2d2df:	sbb    cl,0x0
   2d2e2:	test   cl,cl
   2d2e4:	je     2d287 <g_str_equal@plt+0x1ffc7>
   2d2e6:	lea    rdi,[rip+0x3534f]        # 6263c <_fini@@Base+0xfee8>
   2d2ed:	mov    ecx,0x4
   2d2f2:	mov    rsi,rdx
   2d2f5:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   2d2f7:	seta   cl
   2d2fa:	sbb    cl,0x0
   2d2fd:	test   cl,cl
   2d2ff:	je     2d398 <g_str_equal@plt+0x200d8>
   2d305:	lea    rdi,[rip+0x31fc0]        # 5f2cc <_fini@@Base+0xcb78>
   2d30c:	mov    ecx,0x3
   2d311:	mov    rsi,rdx
   2d314:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   2d316:	seta   cl
   2d319:	sbb    cl,0x0
   2d31c:	test   cl,cl
   2d31e:	je     2d398 <g_str_equal@plt+0x200d8>
   2d320:	lea    rdi,[rip+0x3192d]        # 5ec54 <_fini@@Base+0xc500>
   2d327:	mov    rsi,rdx
   2d32a:	mov    ecx,0x2
   2d32f:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   2d331:	seta   dl
   2d334:	sbb    dl,0x0
   2d337:	test   dl,dl
   2d339:	je     2d398 <g_str_equal@plt+0x200d8>
   2d33b:	lea    rbx,[rip+0x324c2]        # 5f804 <_fini@@Base+0xd0b0>
   2d342:	sub    rsp,0x8
   2d346:	lea    r8,[rip+0x30db0]        # 5e0fd <_fini@@Base+0xb9a9>
   2d34d:	lea    rcx,[rip+0x325f4]        # 5f948 <_fini@@Base+0xd1f4>
   2d354:	lea    rsi,[rip+0x3239d]        # 5f6f8 <_fini@@Base+0xcfa4>
   2d35b:	mov    edx,0x172
   2d360:	push   rbx
   2d361:	mov    r9,QWORD PTR [rax]
   2d364:	mov    rdi,r12
   2d367:	xor    eax,eax
   2d369:	call   3a090 <g_str_equal@plt+0x2cdd0>
   2d36e:	pop    rax
   2d36f:	pop    rdx
   2d370:	jmp    2d2a3 <g_str_equal@plt+0x1ffe3>
   2d375:	nop    DWORD PTR [rax]
   2d378:	mov    rdi,QWORD PTR [rbx+0xb8]
   2d37f:	add    rsp,0x8
   2d383:	mov    rsi,rbp
   2d386:	pop    rbx
   2d387:	pop    rbp
   2d388:	pop    r12
   2d38a:	pop    r13
   2d38c:	jmp    c560 <g_hash_table_remove@plt>
   2d391:	nop    DWORD PTR [rax+0x0]
   2d398:	mov    BYTE PTR [r13+0x0],0x0
   2d39d:	jmp    2d28c <g_str_equal@plt+0x1ffcc>
   2d3a2:	call   d3c5 <g_str_equal@plt+0x105>
   2d3a7:	nop    WORD PTR [rax+rax*1+0x0]
   2d3b0:	push   r14
   2d3b2:	push   r13
   2d3b4:	push   r12
   2d3b6:	push   rbp
   2d3b7:	mov    r12,rdx
   2d3ba:	push   rbx
   2d3bb:	mov    rbx,rdi
   2d3be:	sub    rsp,0x20
   2d3c2:	mov    rax,QWORD PTR fs:0x28
   2d3cb:	mov    QWORD PTR [rsp+0x18],rax
   2d3d0:	xor    eax,eax
   2d3d2:	cmp    DWORD PTR [rdi+0xc0],0x3
   2d3d9:	jne    2d410 <g_str_equal@plt+0x20150>
   2d3db:	mov    rax,QWORD PTR [rdi+0xd0]
   2d3e2:	mov    QWORD PTR [rdx],rax
   2d3e5:	mov    rax,QWORD PTR [rsp+0x18]
   2d3ea:	xor    rax,QWORD PTR fs:0x28
   2d3f3:	jne    2d554 <g_str_equal@plt+0x20294>
   2d3f9:	add    rsp,0x20
   2d3fd:	pop    rbx
   2d3fe:	pop    rbp
   2d3ff:	pop    r12
   2d401:	pop    r13
   2d403:	pop    r14
   2d405:	ret    
   2d406:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2d410:	mov    rdx,rcx
   2d413:	mov    r14,rsi
   2d416:	mov    rbp,rcx
   2d419:	call   2d130 <g_str_equal@plt+0x1fe70>
   2d41e:	test   rax,rax
   2d421:	mov    r13,rax
   2d424:	je     2d3e5 <g_str_equal@plt+0x20125>
   2d426:	cmp    DWORD PTR [rbx+0xc0],0x1
   2d42d:	mov    rdi,QWORD PTR [rax+0x8]
   2d431:	ja     2d559 <g_str_equal@plt+0x20299>
   2d437:	lea    rdx,[rsp+0x8]
   2d43c:	xor    ecx,ecx
   2d43e:	mov    rsi,rsp
   2d441:	call   33360 <g_str_equal@plt+0x260a0>
   2d446:	test   eax,eax
   2d448:	jne    2d480 <g_str_equal@plt+0x201c0>
   2d44a:	mov    rcx,QWORD PTR [rsp+0x8]
   2d44f:	movzx  edx,BYTE PTR [rcx]
   2d452:	test   dl,dl
   2d454:	jne    2d4d0 <g_str_equal@plt+0x20210>
   2d456:	mov    rax,QWORD PTR [rsp]
   2d45a:	mov    QWORD PTR [r12],rax
   2d45e:	mov    eax,DWORD PTR [rbx+0xc0]
   2d464:	test   eax,eax
   2d466:	je     2d540 <g_str_equal@plt+0x20280>
   2d46c:	cmp    eax,0x1
   2d46f:	je     2d3e5 <g_str_equal@plt+0x20125>
   2d475:	call   d3c5 <g_str_equal@plt+0x105>
   2d47a:	nop    WORD PTR [rax+rax*1+0x0]
   2d480:	mov    eax,DWORD PTR [rbx+0xc0]
   2d486:	test   eax,eax
   2d488:	lea    rdx,[rip+0x32387]        # 5f816 <_fini@@Base+0xd0c2>
   2d48f:	lea    rax,[rip+0x3238f]        # 5f825 <_fini@@Base+0xd0d1>
   2d496:	lea    r8,[rip+0x30c60]        # 5e0fd <_fini@@Base+0xb9a9>
   2d49d:	lea    rcx,[rip+0x3245c]        # 5f900 <_fini@@Base+0xd1ac>
   2d4a4:	lea    rsi,[rip+0x3224d]        # 5f6f8 <_fini@@Base+0xcfa4>
   2d4ab:	cmove  rax,rdx
   2d4af:	sub    rsp,0x8
   2d4b3:	mov    edx,0x1e5
   2d4b8:	push   rax
   2d4b9:	mov    r9,QWORD PTR [r13+0x0]
   2d4bd:	xor    eax,eax
   2d4bf:	mov    rdi,rbp
   2d4c2:	call   3a090 <g_str_equal@plt+0x2cdd0>
   2d4c7:	pop    rax
   2d4c8:	pop    rdx
   2d4c9:	jmp    2d3e5 <g_str_equal@plt+0x20125>
   2d4ce:	xchg   ax,ax
   2d4d0:	cmp    dl,0x2d
   2d4d3:	mov    eax,DWORD PTR [rbx+0xc0]
   2d4d9:	jne    2d486 <g_str_equal@plt+0x201c6>
   2d4db:	cmp    eax,0x1
   2d4de:	jne    2d486 <g_str_equal@plt+0x201c6>
   2d4e0:	lea    rsi,[rsp+0x10]
   2d4e5:	lea    rdi,[rcx+0x1]
   2d4e9:	xor    edx,edx
   2d4eb:	call   33450 <g_str_equal@plt+0x26190>
   2d4f0:	test   eax,eax
   2d4f2:	jne    2d480 <g_str_equal@plt+0x201c0>
   2d4f4:	mov    rax,QWORD PTR [rsp]
   2d4f8:	mov    rdx,QWORD PTR [rsp+0x10]
   2d4fd:	cmp    rax,rdx
   2d500:	ja     2d480 <g_str_equal@plt+0x201c0>
   2d506:	mov    rcx,rdx
   2d509:	sub    rcx,rax
   2d50c:	cmp    rcx,0xffff
   2d513:	ja     2d480 <g_str_equal@plt+0x201c0>
   2d519:	mov    QWORD PTR [rbx+0xd0],rax
   2d520:	mov    QWORD PTR [rbx+0xd8],rdx
   2d527:	mov    DWORD PTR [rbx+0xc0],0x3
   2d531:	mov    QWORD PTR [r12],rax
   2d535:	jmp    2d3e5 <g_str_equal@plt+0x20125>
   2d53a:	nop    WORD PTR [rax+rax*1+0x0]
   2d540:	mov    rdi,QWORD PTR [rbx+0xb8]
   2d547:	mov    rsi,r14
   2d54a:	call   c560 <g_hash_table_remove@plt>
   2d54f:	jmp    2d3e5 <g_str_equal@plt+0x20125>
   2d554:	call   cd30 <__stack_chk_fail@plt>
   2d559:	lea    rcx,[rip+0x323c0]        # 5f920 <_fini@@Base+0xd1cc>
   2d560:	lea    rsi,[rip+0x32191]        # 5f6f8 <_fini@@Base+0xcfa4>
   2d567:	lea    rdi,[rip+0x3225a]        # 5f7c8 <_fini@@Base+0xd074>
   2d56e:	mov    edx,0x1ca
   2d573:	call   c390 <__assert_fail@plt>
   2d578:	nop    DWORD PTR [rax+rax*1+0x0]
   2d580:	push   r15
   2d582:	push   r14
   2d584:	push   r13
   2d586:	push   r12
   2d588:	mov    r13,rdx
   2d58b:	push   rbp
   2d58c:	push   rbx
   2d58d:	mov    rbx,rdi
   2d590:	sub    rsp,0x38
   2d594:	mov    rax,QWORD PTR fs:0x28
   2d59d:	mov    QWORD PTR [rsp+0x28],rax
   2d5a2:	xor    eax,eax
   2d5a4:	cmp    DWORD PTR [rdi+0xc0],0x2
   2d5ab:	jne    2d5e0 <g_str_equal@plt+0x20320>
   2d5ad:	mov    rax,QWORD PTR [rdi+0xd0]
   2d5b4:	mov    QWORD PTR [rdx],rax
   2d5b7:	mov    rax,QWORD PTR [rsp+0x28]
   2d5bc:	xor    rax,QWORD PTR fs:0x28
   2d5c5:	jne    2d784 <g_str_equal@plt+0x204c4>
   2d5cb:	add    rsp,0x38
   2d5cf:	pop    rbx
   2d5d0:	pop    rbp
   2d5d1:	pop    r12
   2d5d3:	pop    r13
   2d5d5:	pop    r14
   2d5d7:	pop    r15
   2d5d9:	ret    
   2d5da:	nop    WORD PTR [rax+rax*1+0x0]
   2d5e0:	mov    rdx,rcx
   2d5e3:	mov    r14,rsi
   2d5e6:	mov    r12,rcx
   2d5e9:	call   2d130 <g_str_equal@plt+0x1fe70>
   2d5ee:	test   rax,rax
   2d5f1:	mov    r15,rax
   2d5f4:	je     2d5b7 <g_str_equal@plt+0x202f7>
   2d5f6:	mov    rbp,QWORD PTR [rax+0x8]
   2d5fa:	lea    rax,[rip+0x32c6d]        # 6026e <_fini@@Base+0xdb1a>
   2d601:	test   rbp,rbp
   2d604:	cmove  rbp,rax
   2d608:	cmp    DWORD PTR [rbx+0xc0],0x1
   2d60f:	ja     2d789 <g_str_equal@plt+0x204c9>
   2d615:	call   cc80 <__errno_location@plt>
   2d61a:	lea    rsi,[rsp+0x20]
   2d61f:	xor    edx,edx
   2d621:	mov    DWORD PTR [rax],0x0
   2d627:	mov    rdi,rbp
   2d62a:	mov    QWORD PTR [rsp+0x8],rax
   2d62f:	mov    QWORD PTR [rsp+0x10],rsi
   2d634:	call   d060 <strtoll@plt>
   2d639:	mov    r8,QWORD PTR [rsp+0x8]
   2d63e:	mov    r9,rax
   2d641:	mov    esi,DWORD PTR [r8]
   2d644:	test   esi,esi
   2d646:	jne    2d700 <g_str_equal@plt+0x20440>
   2d64c:	mov    rdx,QWORD PTR [rsp+0x20]
   2d651:	cmp    rdx,rbp
   2d654:	jbe    2d700 <g_str_equal@plt+0x20440>
   2d65a:	movzx  esi,BYTE PTR [rdx]
   2d65d:	test   sil,sil
   2d660:	je     2d750 <g_str_equal@plt+0x20490>
   2d666:	cmp    sil,0x2d
   2d66a:	mov    eax,DWORD PTR [rbx+0xc0]
   2d670:	jne    2d706 <g_str_equal@plt+0x20446>
   2d676:	cmp    eax,0x1
   2d679:	jne    2d706 <g_str_equal@plt+0x20446>
   2d67f:	lea    rbp,[rdx+0x1]
   2d683:	mov    rsi,QWORD PTR [rsp+0x10]
   2d688:	xor    edx,edx
   2d68a:	mov    QWORD PTR [rsp+0x18],r9
   2d68f:	mov    QWORD PTR [rsp+0x8],r8
   2d694:	mov    rdi,rbp
   2d697:	call   d060 <strtoll@plt>
   2d69c:	mov    r8,QWORD PTR [rsp+0x8]
   2d6a1:	mov    r9,QWORD PTR [rsp+0x18]
   2d6a6:	mov    ecx,DWORD PTR [r8]
   2d6a9:	test   ecx,ecx
   2d6ab:	jne    2d700 <g_str_equal@plt+0x20440>
   2d6ad:	mov    rdx,QWORD PTR [rsp+0x20]
   2d6b2:	cmp    rdx,rbp
   2d6b5:	jbe    2d700 <g_str_equal@plt+0x20440>
   2d6b7:	cmp    BYTE PTR [rdx],0x0
   2d6ba:	jne    2d700 <g_str_equal@plt+0x20440>
   2d6bc:	cmp    r9,rax
   2d6bf:	jg     2d700 <g_str_equal@plt+0x20440>
   2d6c1:	movabs rdx,0x7ffffffffffeffff
   2d6cb:	cmp    r9,rdx
   2d6ce:	jg     2d6dc <g_str_equal@plt+0x2041c>
   2d6d0:	lea    rdx,[r9+0x10000]
   2d6d7:	cmp    rdx,rax
   2d6da:	jle    2d700 <g_str_equal@plt+0x20440>
   2d6dc:	mov    QWORD PTR [rbx+0xd0],r9
   2d6e3:	mov    QWORD PTR [rbx+0xd8],rax
   2d6ea:	mov    DWORD PTR [rbx+0xc0],0x2
   2d6f4:	mov    QWORD PTR [r13+0x0],r9
   2d6f8:	jmp    2d5b7 <g_str_equal@plt+0x202f7>
   2d6fd:	nop    DWORD PTR [rax]
   2d700:	mov    eax,DWORD PTR [rbx+0xc0]
   2d706:	test   eax,eax
   2d708:	lea    rdx,[rip+0x3212e]        # 5f83d <_fini@@Base+0xd0e9>
   2d70f:	lea    rax,[rip+0x31be1]        # 5f2f7 <_fini@@Base+0xcba3>
   2d716:	lea    r8,[rip+0x309e0]        # 5e0fd <_fini@@Base+0xb9a9>
   2d71d:	lea    rcx,[rip+0x321bc]        # 5f8e0 <_fini@@Base+0xd18c>
   2d724:	lea    rsi,[rip+0x31fcd]        # 5f6f8 <_fini@@Base+0xcfa4>
   2d72b:	cmove  rax,rdx
   2d72f:	sub    rsp,0x8
   2d733:	mov    edx,0x1b1
   2d738:	push   rax
   2d739:	mov    r9,QWORD PTR [r15]
   2d73c:	xor    eax,eax
   2d73e:	mov    rdi,r12
   2d741:	call   3a090 <g_str_equal@plt+0x2cdd0>
   2d746:	pop    rax
   2d747:	pop    rdx
   2d748:	jmp    2d5b7 <g_str_equal@plt+0x202f7>
   2d74d:	nop    DWORD PTR [rax]
   2d750:	mov    QWORD PTR [r13+0x0],rax
   2d754:	mov    eax,DWORD PTR [rbx+0xc0]
   2d75a:	test   eax,eax
   2d75c:	je     2d770 <g_str_equal@plt+0x204b0>
   2d75e:	cmp    eax,0x1
   2d761:	je     2d5b7 <g_str_equal@plt+0x202f7>
   2d767:	call   d3c5 <g_str_equal@plt+0x105>
   2d76c:	nop    DWORD PTR [rax+0x0]
   2d770:	mov    rdi,QWORD PTR [rbx+0xb8]
   2d777:	mov    rsi,r14
   2d77a:	call   c560 <g_hash_table_remove@plt>
   2d77f:	jmp    2d5b7 <g_str_equal@plt+0x202f7>
   2d784:	call   cd30 <__stack_chk_fail@plt>
   2d789:	lea    rcx,[rip+0x32160]        # 5f8f0 <_fini@@Base+0xd19c>
   2d790:	lea    rsi,[rip+0x31f61]        # 5f6f8 <_fini@@Base+0xcfa4>
   2d797:	lea    rdi,[rip+0x3202a]        # 5f7c8 <_fini@@Base+0xd074>
   2d79e:	mov    edx,0x192
   2d7a3:	call   c390 <__assert_fail@plt>
   2d7a8:	nop    DWORD PTR [rax+rax*1+0x0]
   2d7b0:	push   r14
   2d7b2:	push   r13
   2d7b4:	mov    r14,rdx
   2d7b7:	push   r12
   2d7b9:	push   rbp
   2d7ba:	mov    rdx,rcx
   2d7bd:	push   rbx
   2d7be:	mov    rbp,rdi
   2d7c1:	mov    r12,rsi
   2d7c4:	mov    r13,rcx
   2d7c7:	call   2d130 <g_str_equal@plt+0x1fe70>
   2d7cc:	test   rax,rax
   2d7cf:	je     2d803 <g_str_equal@plt+0x20543>
   2d7d1:	mov    rdi,QWORD PTR [rax+0x8]
   2d7d5:	mov    rbx,rax
   2d7d8:	lea    rax,[rip+0x32a8f]        # 6026e <_fini@@Base+0xdb1a>
   2d7df:	mov    rdx,r14
   2d7e2:	test   rdi,rdi
   2d7e5:	cmove  rdi,rax
   2d7e9:	xor    esi,esi
   2d7eb:	call   32d50 <g_str_equal@plt+0x25a90>
   2d7f0:	test   eax,eax
   2d7f2:	js     2d830 <g_str_equal@plt+0x20570>
   2d7f4:	mov    eax,DWORD PTR [rbp+0xc0]
   2d7fa:	test   eax,eax
   2d7fc:	je     2d810 <g_str_equal@plt+0x20550>
   2d7fe:	cmp    eax,0x1
   2d801:	jne    2d86e <g_str_equal@plt+0x205ae>
   2d803:	pop    rbx
   2d804:	pop    rbp
   2d805:	pop    r12
   2d807:	pop    r13
   2d809:	pop    r14
   2d80b:	ret    
   2d80c:	nop    DWORD PTR [rax+0x0]
   2d810:	pop    rbx
   2d811:	mov    rdi,QWORD PTR [rbp+0xb8]
   2d818:	mov    rsi,r12
   2d81b:	pop    rbp
   2d81c:	pop    r12
   2d81e:	pop    r13
   2d820:	pop    r14
   2d822:	jmp    c560 <g_hash_table_remove@plt>
   2d827:	nop    WORD PTR [rax+rax*1+0x0]
   2d830:	lea    rax,[rip+0x32015]        # 5f84c <_fini@@Base+0xd0f8>
   2d837:	sub    rsp,0x8
   2d83b:	lea    r8,[rip+0x308bb]        # 5e0fd <_fini@@Base+0xb9a9>
   2d842:	lea    rcx,[rip+0x320ef]        # 5f938 <_fini@@Base+0xd1e4>
   2d849:	lea    rsi,[rip+0x31ea8]        # 5f6f8 <_fini@@Base+0xcfa4>
   2d850:	mov    edx,0x1f8
   2d855:	push   rax
   2d856:	mov    r9,QWORD PTR [rbx]
   2d859:	mov    rdi,r13
   2d85c:	xor    eax,eax
   2d85e:	call   3a090 <g_str_equal@plt+0x2cdd0>
   2d863:	pop    rax
   2d864:	pop    rdx
   2d865:	pop    rbx
   2d866:	pop    rbp
   2d867:	pop    r12
   2d869:	pop    r13
   2d86b:	pop    r14
   2d86d:	ret    
   2d86e:	call   d3c5 <g_str_equal@plt+0x105>
   2d873:	nop    DWORD PTR [rax]
   2d876:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2d880:	push   rbp
   2d881:	push   rbx
   2d882:	sub    rsp,0x48
   2d886:	mov    rax,QWORD PTR fs:0x28
   2d88f:	mov    QWORD PTR [rsp+0x38],rax
   2d894:	xor    eax,eax
   2d896:	cmp    DWORD PTR [rdi+0xb0],0x1
   2d89d:	jbe    2d8c0 <g_str_equal@plt+0x20600>
   2d89f:	mov    rax,QWORD PTR [rsp+0x38]
   2d8a4:	xor    rax,QWORD PTR fs:0x28
   2d8ad:	jne    2d91d <g_str_equal@plt+0x2065d>
   2d8af:	add    rsp,0x48
   2d8b3:	pop    rbx
   2d8b4:	pop    rbp
   2d8b5:	ret    
   2d8b6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2d8c0:	lea    rbp,[rsp+0x10]
   2d8c5:	mov    rbx,rsi
   2d8c8:	mov    rsi,QWORD PTR [rdi+0xb8]
   2d8cf:	mov    rdi,rbp
   2d8d2:	call   c830 <g_hash_table_iter_init@plt>
   2d8d7:	lea    rdx,[rsp+0x8]
   2d8dc:	xor    esi,esi
   2d8de:	mov    rdi,rbp
   2d8e1:	call   c820 <g_hash_table_iter_next@plt>
   2d8e6:	test   eax,eax
   2d8e8:	je     2d89f <g_str_equal@plt+0x205df>
   2d8ea:	mov    rdi,QWORD PTR [rsp+0x8]
   2d8ef:	call   ce30 <g_queue_peek_head@plt>
   2d8f4:	mov    r9,QWORD PTR [rax]
   2d8f7:	lea    r8,[rip+0x3087d]        # 5e17b <_fini@@Base+0xba27>
   2d8fe:	lea    rcx,[rip+0x31f9b]        # 5f8a0 <_fini@@Base+0xd14c>
   2d905:	lea    rsi,[rip+0x31dec]        # 5f6f8 <_fini@@Base+0xcfa4>
   2d90c:	mov    edx,0xb1
   2d911:	mov    rdi,rbx
   2d914:	xor    eax,eax
   2d916:	call   3a090 <g_str_equal@plt+0x2cdd0>
   2d91b:	jmp    2d89f <g_str_equal@plt+0x205df>
   2d91d:	call   cd30 <__stack_chk_fail@plt>
   2d922:	nop    DWORD PTR [rax+0x0]
   2d926:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2d930:	test   rdx,rdx
   2d933:	push   r12
   2d935:	mov    r12,rdi
   2d938:	push   rbp
   2d939:	push   rbx
   2d93a:	je     2d94a <g_str_equal@plt+0x2068a>
   2d93c:	mov    rbx,rdx
   2d93f:	mov    rdi,rcx
   2d942:	call   ce00 <g_malloc0@plt>
   2d947:	mov    QWORD PTR [rbx],rax
   2d94a:	mov    eax,DWORD PTR [r12+0xb0]
   2d952:	lea    edx,[rax+0x1]
   2d955:	test   eax,eax
   2d957:	mov    DWORD PTR [r12+0xb0],edx
   2d95f:	je     2d970 <g_str_equal@plt+0x206b0>
   2d961:	pop    rbx
   2d962:	pop    rbp
   2d963:	pop    r12
   2d965:	ret    
   2d966:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2d970:	mov    rsi,QWORD PTR [rip+0x254669]        # 281fe0 <g_str_equal>
   2d977:	mov    rdi,QWORD PTR [rip+0x254632]        # 281fb0 <g_str_hash>
   2d97e:	lea    rcx,[rip+0xfffffffffffff4fb]        # 2ce80 <g_str_equal@plt+0x1fbc0>
   2d985:	xor    edx,edx
   2d987:	call   c850 <g_hash_table_new_full@plt>
   2d98c:	mov    QWORD PTR [r12+0xb8],rax
   2d994:	mov    rax,QWORD PTR [r12+0xa8]
   2d99c:	mov    rbx,QWORD PTR [rax+0x28]
   2d9a0:	test   rbx,rbx
   2d9a3:	je     2d9eb <g_str_equal@plt+0x2072b>
   2d9a5:	lea    rbp,[rip+0x37d35]        # 656e1 <_fini@@Base+0x12f8d>
   2d9ac:	nop    DWORD PTR [rax+0x0]
   2d9b0:	mov    rsi,QWORD PTR [rbx]
   2d9b3:	mov    ecx,0x3
   2d9b8:	mov    rdi,rbp
   2d9bb:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   2d9bd:	seta   al
   2d9c0:	sbb    al,0x0
   2d9c2:	test   al,al
   2d9c4:	je     2da4e <g_str_equal@plt+0x2078e>
   2d9ca:	mov    rdi,QWORD PTR [r12+0xb8]
   2d9d2:	mov    rsi,rbx
   2d9d5:	call   2ce90 <g_str_equal@plt+0x1fbd0>
   2d9da:	mov    rbx,QWORD PTR [rbx+0x28]
   2d9de:	test   rbx,rbx
   2d9e1:	jne    2d9b0 <g_str_equal@plt+0x206f0>
   2d9e3:	mov    rax,QWORD PTR [r12+0xa8]
   2d9eb:	cmp    QWORD PTR [rax],0x0
   2d9ef:	je     2d961 <g_str_equal@plt+0x206a1>
   2d9f5:	mov    edi,0x38
   2d9fa:	call   ce00 <g_malloc0@plt>
   2d9ff:	lea    rdi,[rip+0x37cdb]        # 656e1 <_fini@@Base+0x12f8d>
   2da06:	mov    rbx,rax
   2da09:	mov    QWORD PTR [r12+0xe0],rax
   2da11:	call   c370 <g_strdup@plt>
   2da16:	mov    QWORD PTR [rbx],rax
   2da19:	mov    rax,QWORD PTR [r12+0xa8]
   2da21:	mov    rbx,QWORD PTR [r12+0xe0]
   2da29:	mov    rdi,QWORD PTR [rax]
   2da2c:	call   c370 <g_strdup@plt>
   2da31:	mov    QWORD PTR [rbx+0x8],rax
   2da35:	mov    rsi,QWORD PTR [r12+0xe0]
   2da3d:	pop    rbx
   2da3e:	mov    rdi,QWORD PTR [r12+0xb8]
   2da46:	pop    rbp
   2da47:	pop    r12
   2da49:	jmp    2ce90 <g_str_equal@plt+0x1fbd0>
   2da4e:	lea    rcx,[rip+0x31e2b]        # 5f880 <_fini@@Base+0xd12c>
   2da55:	lea    rsi,[rip+0x31c9c]        # 5f6f8 <_fini@@Base+0xcfa4>
   2da5c:	lea    rdi,[rip+0x31df6]        # 5f859 <_fini@@Base+0xd105>
   2da63:	mov    edx,0x91
   2da68:	call   c390 <__assert_fail@plt>
   2da6d:	nop    DWORD PTR [rax]
   2da70:	test   rdi,rdi
   2da73:	push   rbx
   2da74:	je     2db39 <g_str_equal@plt+0x20879>
   2da7a:	mov    rbx,rdi
   2da7d:	mov    edi,0xe8
   2da82:	call   ce00 <g_malloc0@plt>
   2da87:	lea    rdx,[rip+0xfffffffffffffea2]        # 2d930 <g_str_equal@plt+0x20670>
   2da8e:	lea    rcx,[rip+0xfffffffffffffdeb]        # 2d880 <g_str_equal@plt+0x205c0>
   2da95:	lea    rsi,[rip+0xfffffffffffff4a4]        # 2cf40 <g_str_equal@plt+0x1fc80>
   2da9c:	lea    rdi,[rip+0xfffffffffffff44d]        # 2cef0 <g_str_equal@plt+0x1fc30>
   2daa3:	mov    DWORD PTR [rax+0x90],0x1
   2daad:	mov    QWORD PTR [rax+0xa8],rbx
   2dab4:	mov    QWORD PTR [rax],rdx
   2dab7:	mov    QWORD PTR [rax+0x8],rcx
   2dabb:	lea    rdx,[rip+0xfffffffffffff59e]        # 2d060 <g_str_equal@plt+0x1fda0>
   2dac2:	mov    QWORD PTR [rax+0x10],rsi
   2dac6:	lea    rcx,[rip+0xfffffffffffff2f3]        # 2cdc0 <g_str_equal@plt+0x1fb00>
   2dacd:	lea    rsi,[rip+0xfffffffffffff2ac]        # 2cd80 <g_str_equal@plt+0x1fac0>
   2dad4:	mov    QWORD PTR [rax+0x18],rdx
   2dad8:	lea    rdx,[rip+0xfffffffffffffaa1]        # 2d580 <g_str_equal@plt+0x202c0>
   2dadf:	mov    QWORD PTR [rax+0x30],rdi
   2dae3:	mov    QWORD PTR [rax+0x20],rcx
   2dae7:	mov    QWORD PTR [rax+0x28],rsi
   2daeb:	lea    rcx,[rip+0xfffffffffffff8be]        # 2d3b0 <g_str_equal@plt+0x200f0>
   2daf2:	lea    rsi,[rip+0xfffffffffffffcb7]        # 2d7b0 <g_str_equal@plt+0x204f0>
   2daf9:	mov    QWORD PTR [rax+0x48],rdx
   2dafd:	lea    rdi,[rip+0xfffffffffffff73c]        # 2d240 <g_str_equal@plt+0x1ff80>
   2db04:	mov    QWORD PTR [rax+0x50],rcx
   2db08:	lea    rdx,[rip+0xfffffffffffff6b1]        # 2d1c0 <g_str_equal@plt+0x1ff00>
   2db0f:	lea    rcx,[rip+0xfffffffffffff4ca]        # 2cfe0 <g_str_equal@plt+0x1fd20>
   2db16:	mov    QWORD PTR [rax+0x58],rsi
   2db1a:	lea    rsi,[rip+0xfffffffffffff26f]        # 2cd90 <g_str_equal@plt+0x1fad0>
   2db21:	mov    QWORD PTR [rax+0x60],rdi
   2db25:	mov    QWORD PTR [rax+0x68],rdx
   2db29:	mov    QWORD PTR [rax+0x88],rcx
   2db30:	mov    QWORD PTR [rax+0xa0],rsi
   2db37:	pop    rbx
   2db38:	ret    
   2db39:	lea    rcx,[rip+0x31e60]        # 5f9a0 <_fini@@Base+0xd24c>
   2db40:	lea    rsi,[rip+0x31bb1]        # 5f6f8 <_fini@@Base+0xcfa4>
   2db47:	lea    rdi,[rip+0x31d28]        # 5f876 <_fini@@Base+0xd122>
   2db4e:	mov    edx,0x21d
   2db53:	call   c390 <__assert_fail@plt>
   2db58:	nop    DWORD PTR [rax+rax*1+0x0]
   2db60:	sub    rsp,0x8
   2db64:	mov    edi,0xb0
   2db69:	call   ce00 <g_malloc0@plt>
   2db6e:	lea    rdx,[rip+0x1ab]        # 2dd20 <g_str_equal@plt+0x20a60>
   2db75:	lea    rcx,[rip+0x284]        # 2de00 <g_str_equal@plt+0x20b40>
   2db7c:	lea    rsi,[rip+0x2ed]        # 2de70 <g_str_equal@plt+0x20bb0>
   2db83:	lea    rdi,[rip+0x236]        # 2ddc0 <g_str_equal@plt+0x20b00>
   2db8a:	mov    DWORD PTR [rax+0x90],0x3
   2db94:	mov    QWORD PTR [rax],rcx
   2db97:	mov    QWORD PTR [rax+0x10],rdx
   2db9b:	lea    rcx,[rip+0x2be]        # 2de60 <g_str_equal@plt+0x20ba0>
   2dba2:	mov    QWORD PTR [rax+0x18],rsi
   2dba6:	mov    QWORD PTR [rax+0x20],rdi
   2dbaa:	lea    rsi,[rip+0x13f]        # 2dcf0 <g_str_equal@plt+0x20a30>
   2dbb1:	mov    QWORD PTR [rax+0x30],rdx
   2dbb5:	mov    QWORD PTR [rax+0x40],rdx
   2dbb9:	lea    rdi,[rip+0x100]        # 2dcc0 <g_str_equal@plt+0x20a00>
   2dbc0:	lea    rdx,[rip+0xc9]        # 2dc90 <g_str_equal@plt+0x209d0>
   2dbc7:	mov    QWORD PTR [rax+0x38],rcx
   2dbcb:	mov    QWORD PTR [rax+0x48],rsi
   2dbcf:	mov    QWORD PTR [rax+0x50],rdi
   2dbd3:	lea    rcx,[rip+0x196]        # 2dd70 <g_str_equal@plt+0x20ab0>
   2dbda:	lea    rsi,[rip+0x7f]        # 2dc60 <g_str_equal@plt+0x209a0>
   2dbe1:	mov    QWORD PTR [rax+0x60],rdx
   2dbe5:	lea    rdi,[rip+0x34]        # 2dc20 <g_str_equal@plt+0x20960>
   2dbec:	lea    rdx,[rip+0x1d]        # 2dc10 <g_str_equal@plt+0x20950>
   2dbf3:	mov    QWORD PTR [rax+0x68],rcx
   2dbf7:	mov    QWORD PTR [rax+0x70],rsi
   2dbfb:	mov    QWORD PTR [rax+0x80],rdi
   2dc02:	mov    QWORD PTR [rax+0xa0],rdx
   2dc09:	add    rsp,0x8
   2dc0d:	ret    
   2dc0e:	xchg   ax,ax
   2dc10:	jmp    d2b0 <g_free@plt>
   2dc15:	nop
   2dc16:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2dc20:	cmp    QWORD PTR [rdi+0xa8],0x0
   2dc28:	je     2dc3d <g_str_equal@plt+0x2097d>
   2dc2a:	lea    rax,[rip+0x25481f]        # 282450 <g_test_config_vars+0x1090>
   2dc31:	add    QWORD PTR [rip+0x25481f],0x1        # 282458 <g_test_config_vars+0x1098>
   2dc39:	mov    QWORD PTR [rdx],rax
   2dc3c:	ret    
   2dc3d:	lea    rcx,[rip+0x31ebc]        # 5fb00 <_fini@@Base+0xd3ac>
   2dc44:	lea    rsi,[rip+0x31d6d]        # 5f9b8 <_fini@@Base+0xd264>
   2dc4b:	lea    rdi,[rip+0x31da9]        # 5f9fb <_fini@@Base+0xd2a7>
   2dc52:	sub    rsp,0x8
   2dc56:	mov    edx,0x88
   2dc5b:	call   c390 <__assert_fail@plt>
   2dc60:	cmp    QWORD PTR [rdi+0xa8],0x0
   2dc68:	je     2dc6c <g_str_equal@plt+0x209ac>
   2dc6a:	repz ret 
   2dc6c:	lea    rcx,[rip+0x31e6d]        # 5fae0 <_fini@@Base+0xd38c>
   2dc73:	lea    rsi,[rip+0x31d3e]        # 5f9b8 <_fini@@Base+0xd264>
   2dc7a:	lea    rdi,[rip+0x31d7a]        # 5f9fb <_fini@@Base+0xd2a7>
   2dc81:	sub    rsp,0x8
   2dc85:	mov    edx,0x7f
   2dc8a:	call   c390 <__assert_fail@plt>
   2dc8f:	nop
   2dc90:	cmp    QWORD PTR [rdi+0xa8],0x0
   2dc98:	je     2dc9c <g_str_equal@plt+0x209dc>
   2dc9a:	repz ret 
   2dc9c:	lea    rcx,[rip+0x31dfd]        # 5faa0 <_fini@@Base+0xd34c>
   2dca3:	lea    rsi,[rip+0x31d0e]        # 5f9b8 <_fini@@Base+0xd264>
   2dcaa:	lea    rdi,[rip+0x31d4a]        # 5f9fb <_fini@@Base+0xd2a7>
   2dcb1:	sub    rsp,0x8
   2dcb5:	mov    edx,0x66
   2dcba:	call   c390 <__assert_fail@plt>
   2dcbf:	nop
   2dcc0:	cmp    QWORD PTR [rdi+0xa8],0x0
   2dcc8:	je     2dccc <g_str_equal@plt+0x20a0c>
   2dcca:	repz ret 
   2dccc:	lea    rcx,[rip+0x31dad]        # 5fa80 <_fini@@Base+0xd32c>
   2dcd3:	lea    rsi,[rip+0x31cde]        # 5f9b8 <_fini@@Base+0xd264>
   2dcda:	lea    rdi,[rip+0x31d1a]        # 5f9fb <_fini@@Base+0xd2a7>
   2dce1:	sub    rsp,0x8
   2dce5:	mov    edx,0x5d
   2dcea:	call   c390 <__assert_fail@plt>
   2dcef:	nop
   2dcf0:	cmp    QWORD PTR [rdi+0xa8],0x0
   2dcf8:	je     2dcfc <g_str_equal@plt+0x20a3c>
   2dcfa:	repz ret 
   2dcfc:	lea    rcx,[rip+0x31d5d]        # 5fa60 <_fini@@Base+0xd30c>
   2dd03:	lea    rsi,[rip+0x31cae]        # 5f9b8 <_fini@@Base+0xd264>
   2dd0a:	lea    rdi,[rip+0x31cea]        # 5f9fb <_fini@@Base+0xd2a7>
   2dd11:	sub    rsp,0x8
   2dd15:	mov    edx,0x54
   2dd1a:	call   c390 <__assert_fail@plt>
   2dd1f:	nop
   2dd20:	mov    rax,QWORD PTR [rdi+0xa8]
   2dd27:	test   rax,rax
   2dd2a:	je     2dd3e <g_str_equal@plt+0x20a7e>
   2dd2c:	test   rsi,rsi
   2dd2f:	je     2dd3c <g_str_equal@plt+0x20a7c>
   2dd31:	sub    rax,0x1
   2dd35:	mov    QWORD PTR [rdi+0xa8],rax
   2dd3c:	repz ret 
   2dd3e:	lea    rcx,[rip+0x31ce3]        # 5fa28 <_fini@@Base+0xd2d4>
   2dd45:	lea    rsi,[rip+0x31c6c]        # 5f9b8 <_fini@@Base+0xd264>
   2dd4c:	lea    rdi,[rip+0x31ca8]        # 5f9fb <_fini@@Base+0xd2a7>
   2dd53:	sub    rsp,0x8
   2dd57:	mov    edx,0x30
   2dd5c:	call   c390 <__assert_fail@plt>
   2dd61:	nop    DWORD PTR [rax+rax*1+0x0]
   2dd66:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2dd70:	push   rbx
   2dd71:	cmp    QWORD PTR [rdi+0xa8],0x0
   2dd79:	je     2dd99 <g_str_equal@plt+0x20ad9>
   2dd7b:	mov    rdi,QWORD PTR [rdx]
   2dd7e:	lea    rax,[rip+0x324e9]        # 6026e <_fini@@Base+0xdb1a>
   2dd85:	mov    rbx,rdx
   2dd88:	test   rdi,rdi
   2dd8b:	cmove  rdi,rax
   2dd8f:	call   c370 <g_strdup@plt>
   2dd94:	mov    QWORD PTR [rbx],rax
   2dd97:	pop    rbx
   2dd98:	ret    
   2dd99:	lea    rcx,[rip+0x31d20]        # 5fac0 <_fini@@Base+0xd36c>
   2dda0:	lea    rsi,[rip+0x31c11]        # 5f9b8 <_fini@@Base+0xd264>
   2dda7:	lea    rdi,[rip+0x31c4d]        # 5f9fb <_fini@@Base+0xd2a7>
   2ddae:	mov    edx,0x6f
   2ddb3:	call   c390 <__assert_fail@plt>
   2ddb8:	nop    DWORD PTR [rax+rax*1+0x0]
   2ddc0:	push   rbx
   2ddc1:	cmp    QWORD PTR [rdi+0xa8],0x0
   2ddc9:	je     2dddd <g_str_equal@plt+0x20b1d>
   2ddcb:	mov    rbx,rsi
   2ddce:	mov    esi,edx
   2ddd0:	mov    rdi,QWORD PTR [rbx]
   2ddd3:	call   c0f0 <g_memdup@plt>
   2ddd8:	mov    QWORD PTR [rbx],rax
   2dddb:	pop    rbx
   2dddc:	ret    
   2dddd:	lea    rcx,[rip+0x31c5c]        # 5fa40 <_fini@@Base+0xd2ec>
   2dde4:	lea    rsi,[rip+0x31bcd]        # 5f9b8 <_fini@@Base+0xd264>
   2ddeb:	lea    rdi,[rip+0x31c09]        # 5f9fb <_fini@@Base+0xd2a7>
   2ddf2:	mov    edx,0x42
   2ddf7:	call   c390 <__assert_fail@plt>
   2ddfc:	nop    DWORD PTR [rax+0x0]
   2de00:	push   rbp
   2de01:	push   rbx
   2de02:	mov    rbp,rdi
   2de05:	sub    rsp,0x8
   2de09:	test   rdx,rdx
   2de0c:	je     2de30 <g_str_equal@plt+0x20b70>
   2de0e:	mov    rdi,QWORD PTR [rdx]
   2de11:	mov    rbx,rdx
   2de14:	mov    esi,ecx
   2de16:	call   c0f0 <g_memdup@plt>
   2de1b:	mov    QWORD PTR [rbx],rax
   2de1e:	add    QWORD PTR [rbp+0xa8],0x1
   2de26:	add    rsp,0x8
   2de2a:	pop    rbx
   2de2b:	pop    rbp
   2de2c:	ret    
   2de2d:	nop    DWORD PTR [rax]
   2de30:	cmp    QWORD PTR [rdi+0xa8],0x0
   2de38:	jne    2de26 <g_str_equal@plt+0x20b66>
   2de3a:	lea    rcx,[rip+0x31bcf]        # 5fa10 <_fini@@Base+0xd2bc>
   2de41:	lea    rsi,[rip+0x31b70]        # 5f9b8 <_fini@@Base+0xd264>
   2de48:	lea    rdi,[rip+0x31bac]        # 5f9fb <_fini@@Base+0xd2a7>
   2de4f:	mov    edx,0x21
   2de54:	call   c390 <__assert_fail@plt>
   2de59:	nop    DWORD PTR [rax+0x0]
   2de60:	jmp    2de00 <g_str_equal@plt+0x20b40>
   2de62:	nop    DWORD PTR [rax+0x0]
   2de66:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2de70:	jmp    2de00 <g_str_equal@plt+0x20b40>
   2de72:	nop    DWORD PTR [rax+0x0]
   2de76:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2de80:	push   rbp
   2de81:	push   rbx
   2de82:	sub    rsp,0x18
   2de86:	mov    rax,QWORD PTR fs:0x28
   2de8f:	mov    QWORD PTR [rsp+0x8],rax
   2de94:	xor    eax,eax
   2de96:	test   rdi,rdi
   2de99:	mov    QWORD PTR [rsp],rdi
   2de9d:	je     2dee0 <g_str_equal@plt+0x20c20>
   2de9f:	mov    rbp,rsi
   2dea2:	call   2db60 <g_str_equal@plt+0x208a0>
   2dea7:	mov    rbx,rax
   2deaa:	mov    rdi,rax
   2dead:	mov    rdx,rsp
   2deb0:	lea    rcx,[rip+0x257dd1]        # 285c88 <stdout@@GLIBC_2.2.5+0x1340>
   2deb7:	xor    esi,esi
   2deb9:	call   rbp
   2debb:	mov    rdi,rbx
   2debe:	call   27d00 <g_str_equal@plt+0x1aa40>
   2dec3:	mov    rax,QWORD PTR [rsp]
   2dec7:	mov    rcx,QWORD PTR [rsp+0x8]
   2decc:	xor    rcx,QWORD PTR fs:0x28
   2ded5:	jne    2dee4 <g_str_equal@plt+0x20c24>
   2ded7:	add    rsp,0x18
   2dedb:	pop    rbx
   2dedc:	pop    rbp
   2dedd:	ret    
   2dede:	xchg   ax,ax
   2dee0:	xor    eax,eax
   2dee2:	jmp    2dec7 <g_str_equal@plt+0x20c07>
   2dee4:	call   cd30 <__stack_chk_fail@plt>
   2dee9:	nop    DWORD PTR [rax+0x0]
   2def0:	push   r14
   2def2:	push   r13
   2def4:	mov    r14,rdx
   2def7:	push   r12
   2def9:	push   rbp
   2defa:	mov    r13,rsi
   2defd:	push   rbx
   2defe:	mov    rbp,rdi
   2df01:	mov    r12,rcx
   2df04:	call   2db60 <g_str_equal@plt+0x208a0>
   2df09:	mov    rdx,r14
   2df0c:	mov    rbx,rax
   2df0f:	mov    rsi,r13
   2df12:	mov    rdi,rbp
   2df15:	call   d220 <memcpy@plt>
   2df1a:	add    QWORD PTR [rbx+0xa8],0x1
   2df22:	mov    rdi,rbx
   2df25:	mov    rsi,rbp
   2df28:	lea    rdx,[rip+0x257d59]        # 285c88 <stdout@@GLIBC_2.2.5+0x1340>
   2df2f:	call   r12
   2df32:	mov    rdi,rbx
   2df35:	pop    rbx
   2df36:	pop    rbp
   2df37:	pop    r12
   2df39:	pop    r13
   2df3b:	pop    r14
   2df3d:	jmp    27d00 <g_str_equal@plt+0x1aa40>
   2df42:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2df4c:	nop    DWORD PTR [rax+0x0]
   2df50:	test   esi,esi
   2df52:	js     2df64 <g_str_equal@plt+0x20ca4>
   2df54:	cmp    DWORD PTR [rdi+0x8],esi
   2df57:	jle    2df64 <g_str_equal@plt+0x20ca4>
   2df59:	mov    rax,QWORD PTR [rdi]
   2df5c:	movsxd rsi,esi
   2df5f:	mov    rax,QWORD PTR [rax+rsi*8]
   2df63:	ret    
   2df64:	lea    rcx,[rip+0x31c45]        # 5fbb0 <_fini@@Base+0xd45c>
   2df6b:	lea    rsi,[rip+0x31ba6]        # 5fb18 <_fini@@Base+0xd3c4>
   2df72:	lea    rdi,[rip+0x31bdf]        # 5fb58 <_fini@@Base+0xd404>
   2df79:	sub    rsp,0x8
   2df7d:	mov    edx,0x13
   2df82:	call   c390 <__assert_fail@plt>
   2df87:	nop    WORD PTR [rax+rax*1+0x0]
   2df90:	push   r15
   2df92:	push   r14
   2df94:	push   r13
   2df96:	push   r12
   2df98:	mov    r12d,edx
   2df9b:	push   rbp
   2df9c:	push   rbx
   2df9d:	sub    rsp,0x18
   2dfa1:	test   rsi,rsi
   2dfa4:	je     2dfec <g_str_equal@plt+0x20d2c>
   2dfa6:	mov    eax,DWORD PTR [rdi+0x8]
   2dfa9:	mov    r15,rcx
   2dfac:	mov    DWORD PTR [rsp+0xc],edx
   2dfb0:	mov    rbp,rsi
   2dfb3:	test   eax,eax
   2dfb5:	jle    2e000 <g_str_equal@plt+0x20d40>
   2dfb7:	lea    r13d,[rax-0x1]
   2dfbb:	mov    r14,QWORD PTR [rdi]
   2dfbe:	xor    ebx,ebx
   2dfc0:	add    r13,0x1
   2dfc4:	jmp    2dfd9 <g_str_equal@plt+0x20d19>
   2dfc6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2dfd0:	add    rbx,0x1
   2dfd4:	cmp    rbx,r13
   2dfd7:	je     2e000 <g_str_equal@plt+0x20d40>
   2dfd9:	mov    rsi,QWORD PTR [r14+rbx*8]
   2dfdd:	mov    rdi,rbp
   2dfe0:	mov    r12d,ebx
   2dfe3:	call   cd60 <strcmp@plt>
   2dfe8:	test   eax,eax
   2dfea:	jne    2dfd0 <g_str_equal@plt+0x20d10>
   2dfec:	add    rsp,0x18
   2dff0:	mov    eax,r12d
   2dff3:	pop    rbx
   2dff4:	pop    rbp
   2dff5:	pop    r12
   2dff7:	pop    r13
   2dff9:	pop    r14
   2dffb:	pop    r15
   2dffd:	ret    
   2dffe:	xchg   ax,ax
   2e000:	lea    r8,[rip+0x31b70]        # 5fb77 <_fini@@Base+0xd423>
   2e007:	lea    rcx,[rip+0x31b92]        # 5fba0 <_fini@@Base+0xd44c>
   2e00e:	lea    rsi,[rip+0x31b03]        # 5fb18 <_fini@@Base+0xd3c4>
   2e015:	mov    r9,rbp
   2e018:	mov    edx,0x27
   2e01d:	mov    rdi,r15
   2e020:	xor    eax,eax
   2e022:	call   3a090 <g_str_equal@plt+0x2cdd0>
   2e027:	mov    r12d,DWORD PTR [rsp+0xc]
   2e02c:	jmp    2dfec <g_str_equal@plt+0x20d2c>
   2e02e:	xchg   ax,ax
   2e030:	push   r14
   2e032:	push   r13
   2e034:	push   r12
   2e036:	movzx  r12d,BYTE PTR [rdi]
   2e03a:	push   rbp
   2e03b:	mov    ebp,esi
   2e03d:	push   rbx
   2e03e:	mov    rbx,rdi
   2e041:	cmp    r12b,0x5f
   2e045:	je     2e0a0 <g_str_equal@plt+0x20de0>
   2e047:	call   c800 <__ctype_b_loc@plt>
   2e04c:	mov    rsi,QWORD PTR [rax]
   2e04f:	mov    rdx,rbx
   2e052:	test   BYTE PTR [rsi+r12*2+0x1],0x4
   2e058:	je     2e0dc <g_str_equal@plt+0x20e1c>
   2e05e:	xchg   ax,ax
   2e060:	add    rdx,0x1
   2e064:	movzx  eax,BYTE PTR [rdx]
   2e067:	test   al,al
   2e069:	je     2e08c <g_str_equal@plt+0x20dcc>
   2e06b:	movzx  ecx,al
   2e06e:	test   BYTE PTR [rsi+rcx*2],0x8
   2e072:	jne    2e060 <g_str_equal@plt+0x20da0>
   2e074:	cmp    al,0x2d
   2e076:	setne  cl
   2e079:	cmp    al,0x5f
   2e07b:	setne  al
   2e07e:	test   cl,al
   2e080:	je     2e060 <g_str_equal@plt+0x20da0>
   2e082:	test   bpl,bpl
   2e085:	mov    eax,0xffffffff
   2e08a:	jne    2e090 <g_str_equal@plt+0x20dd0>
   2e08c:	mov    eax,edx
   2e08e:	sub    eax,ebx
   2e090:	pop    rbx
   2e091:	pop    rbp
   2e092:	pop    r12
   2e094:	pop    r13
   2e096:	pop    r14
   2e098:	ret    
   2e099:	nop    DWORD PTR [rax+0x0]
   2e0a0:	cmp    BYTE PTR [rdi+0x1],0x5f
   2e0a4:	lea    r13,[rdi+0x1]
   2e0a8:	je     2e0ce <g_str_equal@plt+0x20e0e>
   2e0aa:	jmp    2e0dc <g_str_equal@plt+0x20e1c>
   2e0ac:	nop    DWORD PTR [rax+0x0]
   2e0b0:	call   c800 <__ctype_b_loc@plt>
   2e0b5:	mov    rsi,QWORD PTR [rax]
   2e0b8:	movzx  eax,r12b
   2e0bc:	test   BYTE PTR [rsi+rax*2],0x8
   2e0c0:	jne    2e0cb <g_str_equal@plt+0x20e0b>
   2e0c2:	lea    eax,[r12-0x2d]
   2e0c7:	cmp    al,0x1
   2e0c9:	ja     2e0ea <g_str_equal@plt+0x20e2a>
   2e0cb:	mov    r13,r14
   2e0ce:	movzx  r12d,BYTE PTR [r13+0x1]
   2e0d3:	lea    r14,[r13+0x1]
   2e0d7:	test   r12b,r12b
   2e0da:	jne    2e0b0 <g_str_equal@plt+0x20df0>
   2e0dc:	pop    rbx
   2e0dd:	mov    eax,0xffffffff
   2e0e2:	pop    rbp
   2e0e3:	pop    r12
   2e0e5:	pop    r13
   2e0e7:	pop    r14
   2e0e9:	ret    
   2e0ea:	cmp    r12b,0x5f
   2e0ee:	jne    2e0dc <g_str_equal@plt+0x20e1c>
   2e0f0:	lea    rdx,[r13+0x2]
   2e0f4:	movzx  r12d,BYTE PTR [r13+0x2]
   2e0f9:	jmp    2e052 <g_str_equal@plt+0x20d92>
   2e0fe:	xchg   ax,ax
   2e100:	mov    eax,0x1
   2e105:	ret    
   2e106:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2e110:	push   rbx
   2e111:	mov    rbx,rdi
   2e114:	mov    edi,0x20
   2e119:	call   c500 <g_malloc@plt>
   2e11e:	mov    QWORD PTR [rax+0x8],0x1
   2e126:	mov    DWORD PTR [rax],0x2
   2e12c:	mov    DWORD PTR [rax+0x10],0x0
   2e133:	mov    QWORD PTR [rax+0x18],rbx
   2e137:	pop    rbx
   2e138:	ret    
   2e139:	nop    DWORD PTR [rax+0x0]
   2e140:	push   rbx
   2e141:	mov    rbx,rdi
   2e144:	mov    edi,0x20
   2e149:	call   c500 <g_malloc@plt>
   2e14e:	mov    QWORD PTR [rax+0x8],0x1
   2e156:	mov    DWORD PTR [rax],0x2
   2e15c:	mov    DWORD PTR [rax+0x10],0x1
   2e163:	mov    QWORD PTR [rax+0x18],rbx
   2e167:	pop    rbx
   2e168:	ret    
   2e169:	nop    DWORD PTR [rax+0x0]
   2e170:	sub    rsp,0x18
   2e174:	mov    edi,0x20
   2e179:	movsd  QWORD PTR [rsp+0x8],xmm0
   2e17f:	call   c500 <g_malloc@plt>
   2e184:	movsd  xmm0,QWORD PTR [rsp+0x8]
   2e18a:	mov    QWORD PTR [rax+0x8],0x1
   2e192:	mov    DWORD PTR [rax],0x2
   2e198:	mov    DWORD PTR [rax+0x10],0x2
   2e19f:	movsd  QWORD PTR [rax+0x18],xmm0
   2e1a4:	add    rsp,0x18
   2e1a8:	ret    
   2e1a9:	nop    DWORD PTR [rax+0x0]
   2e1b0:	mov    eax,DWORD PTR [rdi+0x10]
   2e1b3:	cmp    eax,0x1
   2e1b6:	je     2e1d8 <g_str_equal@plt+0x20f18>
   2e1b8:	jb     2e1c8 <g_str_equal@plt+0x20f08>
   2e1ba:	cmp    eax,0x2
   2e1bd:	jne    2e1ec <g_str_equal@plt+0x20f2c>
   2e1bf:	xor    eax,eax
   2e1c1:	repz ret 
   2e1c3:	nop    DWORD PTR [rax+rax*1+0x0]
   2e1c8:	mov    rax,QWORD PTR [rdi+0x18]
   2e1cc:	mov    QWORD PTR [rsi],rax
   2e1cf:	mov    eax,0x1
   2e1d4:	ret    
   2e1d5:	nop    DWORD PTR [rax]
   2e1d8:	mov    rdx,QWORD PTR [rdi+0x18]
   2e1dc:	xor    eax,eax
   2e1de:	test   rdx,rdx
   2e1e1:	js     2e1c1 <g_str_equal@plt+0x20f01>
   2e1e3:	mov    QWORD PTR [rsi],rdx
   2e1e6:	mov    eax,0x1
   2e1eb:	ret    
   2e1ec:	lea    rcx,[rip+0x31aad]        # 5fca0 <_fini@@Base+0xd54c>
   2e1f3:	lea    rsi,[rip+0x319ce]        # 5fbc8 <_fini@@Base+0xd474>
   2e1fa:	lea    rdi,[rip+0x31673]        # 5f874 <_fini@@Base+0xd120>
   2e201:	sub    rsp,0x8
   2e205:	mov    edx,0x58
   2e20a:	call   c390 <__assert_fail@plt>
   2e20f:	nop
   2e210:	sub    rsp,0x18
   2e214:	mov    rsi,rsp
   2e217:	mov    rax,QWORD PTR fs:0x28
   2e220:	mov    QWORD PTR [rsp+0x8],rax
   2e225:	xor    eax,eax
   2e227:	call   2e1b0 <g_str_equal@plt+0x20ef0>
   2e22c:	test   al,al
   2e22e:	je     2e249 <g_str_equal@plt+0x20f89>
   2e230:	mov    rdx,QWORD PTR [rsp+0x8]
   2e235:	xor    rdx,QWORD PTR fs:0x28
   2e23e:	mov    rax,QWORD PTR [rsp]
   2e242:	jne    2e268 <g_str_equal@plt+0x20fa8>
   2e244:	add    rsp,0x18
   2e248:	ret    
   2e249:	lea    rcx,[rip+0x31a38]        # 5fc88 <_fini@@Base+0xd534>
   2e250:	lea    rsi,[rip+0x31971]        # 5fbc8 <_fini@@Base+0xd474>
   2e257:	lea    rdi,[rip+0x36e23]        # 65081 <_fini@@Base+0x1292d>
   2e25e:	mov    edx,0x65
   2e263:	call   c390 <__assert_fail@plt>
   2e268:	call   cd30 <__stack_chk_fail@plt>
   2e26d:	nop    DWORD PTR [rax]
   2e270:	mov    eax,DWORD PTR [rdi+0x10]
   2e273:	cmp    eax,0x1
   2e276:	je     2e291 <g_str_equal@plt+0x20fd1>
   2e278:	jb     2e288 <g_str_equal@plt+0x20fc8>
   2e27a:	cmp    eax,0x2
   2e27d:	jne    2e29e <g_str_equal@plt+0x20fde>
   2e27f:	xor    eax,eax
   2e281:	repz ret 
   2e283:	nop    DWORD PTR [rax+rax*1+0x0]
   2e288:	xor    eax,eax
   2e28a:	cmp    QWORD PTR [rdi+0x18],0x0
   2e28f:	js     2e281 <g_str_equal@plt+0x20fc1>
   2e291:	mov    rax,QWORD PTR [rdi+0x18]
   2e295:	mov    QWORD PTR [rsi],rax
   2e298:	mov    eax,0x1
   2e29d:	ret    
   2e29e:	lea    rcx,[rip+0x319cb]        # 5fc70 <_fini@@Base+0xd51c>
   2e2a5:	lea    rsi,[rip+0x3191c]        # 5fbc8 <_fini@@Base+0xd474>
   2e2ac:	lea    rdi,[rip+0x315c1]        # 5f874 <_fini@@Base+0xd120>
   2e2b3:	sub    rsp,0x8
   2e2b7:	mov    edx,0x7e
   2e2bc:	call   c390 <__assert_fail@plt>
   2e2c1:	nop    DWORD PTR [rax+rax*1+0x0]
   2e2c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2e2d0:	sub    rsp,0x18
   2e2d4:	mov    rsi,rsp
   2e2d7:	mov    rax,QWORD PTR fs:0x28
   2e2e0:	mov    QWORD PTR [rsp+0x8],rax
   2e2e5:	xor    eax,eax
   2e2e7:	call   2e270 <g_str_equal@plt+0x20fb0>
   2e2ec:	test   al,al
   2e2ee:	je     2e309 <g_str_equal@plt+0x21049>
   2e2f0:	mov    rdx,QWORD PTR [rsp+0x8]
   2e2f5:	xor    rdx,QWORD PTR fs:0x28
   2e2fe:	mov    rax,QWORD PTR [rsp]
   2e302:	jne    2e328 <g_str_equal@plt+0x21068>
   2e304:	add    rsp,0x18
   2e308:	ret    
   2e309:	lea    rcx,[rip+0x31950]        # 5fc60 <_fini@@Base+0xd50c>
   2e310:	lea    rsi,[rip+0x318b1]        # 5fbc8 <_fini@@Base+0xd474>
   2e317:	lea    rdi,[rip+0x36d63]        # 65081 <_fini@@Base+0x1292d>
   2e31e:	mov    edx,0x8b
   2e323:	call   c390 <__assert_fail@plt>
   2e328:	call   cd30 <__stack_chk_fail@plt>
   2e32d:	nop    DWORD PTR [rax]
   2e330:	mov    eax,DWORD PTR [rdi+0x10]
   2e333:	cmp    eax,0x1
   2e336:	je     2e358 <g_str_equal@plt+0x21098>
   2e338:	jb     2e348 <g_str_equal@plt+0x21088>
   2e33a:	cmp    eax,0x2
   2e33d:	jne    2e38a <g_str_equal@plt+0x210ca>
   2e33f:	movsd  xmm0,QWORD PTR [rdi+0x18]
   2e344:	ret    
   2e345:	nop    DWORD PTR [rax]
   2e348:	pxor   xmm0,xmm0
   2e34c:	cvtsi2sd xmm0,QWORD PTR [rdi+0x18]
   2e352:	ret    
   2e353:	nop    DWORD PTR [rax+rax*1+0x0]
   2e358:	mov    rax,QWORD PTR [rdi+0x18]
   2e35c:	test   rax,rax
   2e35f:	js     2e370 <g_str_equal@plt+0x210b0>
   2e361:	pxor   xmm0,xmm0
   2e365:	cvtsi2sd xmm0,rax
   2e36a:	ret    
   2e36b:	nop    DWORD PTR [rax+rax*1+0x0]
   2e370:	mov    rdx,rax
   2e373:	pxor   xmm0,xmm0
   2e377:	shr    rdx,1
   2e37a:	and    eax,0x1
   2e37d:	or     rdx,rax
   2e380:	cvtsi2sd xmm0,rdx
   2e385:	addsd  xmm0,xmm0
   2e389:	ret    
   2e38a:	lea    rcx,[rip+0x318bf]        # 5fc50 <_fini@@Base+0xd4fc>
   2e391:	lea    rsi,[rip+0x31830]        # 5fbc8 <_fini@@Base+0xd474>
   2e398:	lea    rdi,[rip+0x314d5]        # 5f874 <_fini@@Base+0xd120>
   2e39f:	sub    rsp,0x8
   2e3a3:	mov    edx,0x9f
   2e3a8:	call   c390 <__assert_fail@plt>
   2e3ad:	nop    DWORD PTR [rax]
   2e3b0:	mov    eax,DWORD PTR [rdi+0x10]
   2e3b3:	cmp    eax,0x1
   2e3b6:	je     2e468 <g_str_equal@plt+0x211a8>
   2e3bc:	jb     2e450 <g_str_equal@plt+0x21190>
   2e3c2:	cmp    eax,0x2
   2e3c5:	push   rbx
   2e3c6:	jne    2e49e <g_str_equal@plt+0x211de>
   2e3cc:	movsd  xmm0,QWORD PTR [rdi+0x18]
   2e3d1:	lea    rdi,[rip+0x31128]        # 5f500 <_fini@@Base+0xcdac>
   2e3d8:	mov    eax,0x1
   2e3dd:	call   c740 <g_strdup_printf@plt>
   2e3e2:	mov    rdi,rax
   2e3e5:	mov    rbx,rax
   2e3e8:	call   c720 <strlen@plt>
   2e3ed:	cmp    eax,0x0
   2e3f0:	mov    edx,eax
   2e3f2:	jle    2e480 <g_str_equal@plt+0x211c0>
   2e3f8:	movsxd rsi,eax
   2e3fb:	lea    r8,[rbx+rsi*1-0x1]
   2e400:	movzx  ecx,BYTE PTR [r8]
   2e404:	cmp    cl,0x30
   2e407:	jne    2e490 <g_str_equal@plt+0x211d0>
   2e40d:	sub    eax,0x1
   2e410:	mov    edi,0x1
   2e415:	cdqe   
   2e417:	sub    rdi,rbx
   2e41a:	lea    rax,[rbx+rax*1-0x1]
   2e41f:	jmp    2e43c <g_str_equal@plt+0x2117c>
   2e421:	nop    DWORD PTR [rax+0x0]
   2e428:	lea    rsi,[rdi+rax*1]
   2e42c:	mov    r8,rax
   2e42f:	sub    rax,0x1
   2e433:	movzx  ecx,BYTE PTR [rax+0x1]
   2e437:	cmp    cl,0x30
   2e43a:	jne    2e490 <g_str_equal@plt+0x211d0>
   2e43c:	sub    edx,0x1
   2e43f:	jne    2e428 <g_str_equal@plt+0x21168>
   2e441:	mov    rsi,rbx
   2e444:	mov    BYTE PTR [rsi],0x0
   2e447:	mov    rax,rbx
   2e44a:	pop    rbx
   2e44b:	ret    
   2e44c:	nop    DWORD PTR [rax+0x0]
   2e450:	mov    rsi,QWORD PTR [rdi+0x18]
   2e454:	lea    rdi,[rip+0x31106]        # 5f561 <_fini@@Base+0xce0d>
   2e45b:	xor    eax,eax
   2e45d:	jmp    c740 <g_strdup_printf@plt>
   2e462:	nop    WORD PTR [rax+rax*1+0x0]
   2e468:	mov    rsi,QWORD PTR [rdi+0x18]
   2e46c:	lea    rdi,[rip+0x310d1]        # 5f544 <_fini@@Base+0xcdf0>
   2e473:	xor    eax,eax
   2e475:	jmp    c740 <g_strdup_printf@plt>
   2e47a:	nop    WORD PTR [rax+rax*1+0x0]
   2e480:	je     2e441 <g_str_equal@plt+0x21181>
   2e482:	movsxd rsi,eax
   2e485:	lea    r8,[rbx+rsi*1-0x1]
   2e48a:	movzx  ecx,BYTE PTR [r8]
   2e48e:	xchg   ax,ax
   2e490:	add    rsi,rbx
   2e493:	cmp    cl,0x2e
   2e496:	jne    2e444 <g_str_equal@plt+0x21184>
   2e498:	mov    BYTE PTR [r8],0x0
   2e49c:	jmp    2e447 <g_str_equal@plt+0x21187>
   2e49e:	lea    rcx,[rip+0x31793]        # 5fc38 <_fini@@Base+0xd4e4>
   2e4a5:	lea    rsi,[rip+0x3171c]        # 5fbc8 <_fini@@Base+0xd474>
   2e4ac:	lea    rdi,[rip+0x313c1]        # 5f874 <_fini@@Base+0xd120>
   2e4b3:	mov    edx,0xc6
   2e4b8:	call   c390 <__assert_fail@plt>
   2e4bd:	nop    DWORD PTR [rax]
   2e4c0:	sub    rsp,0x8
   2e4c4:	xor    r8d,r8d
   2e4c7:	test   rdi,rdi
   2e4ca:	je     2e590 <g_str_equal@plt+0x212d0>
   2e4d0:	mov    eax,DWORD PTR [rdi]
   2e4d2:	lea    edx,[rax-0x1]
   2e4d5:	cmp    edx,0x5
   2e4d8:	ja     2e5ec <g_str_equal@plt+0x2132c>
   2e4de:	cmp    eax,0x2
   2e4e1:	mov    rax,r8
   2e4e4:	cmove  rax,rdi
   2e4e8:	test   rsi,rsi
   2e4eb:	je     2e59b <g_str_equal@plt+0x212db>
   2e4f1:	mov    edx,DWORD PTR [rsi]
   2e4f3:	lea    ecx,[rdx-0x1]
   2e4f6:	cmp    ecx,0x5
   2e4f9:	ja     2e5ec <g_str_equal@plt+0x2132c>
   2e4ff:	cmp    edx,0x2
   2e502:	mov    rdx,r8
   2e505:	cmove  rdx,rsi
   2e509:	mov    ecx,DWORD PTR [rax+0x10]
   2e50c:	cmp    ecx,0x1
   2e50f:	je     2e570 <g_str_equal@plt+0x212b0>
   2e511:	jb     2e550 <g_str_equal@plt+0x21290>
   2e513:	cmp    ecx,0x2
   2e516:	jne    2e5e7 <g_str_equal@plt+0x21327>
   2e51c:	mov    ecx,DWORD PTR [rdx+0x10]
   2e51f:	cmp    ecx,0x1
   2e522:	jbe    2e563 <g_str_equal@plt+0x212a3>
   2e524:	cmp    ecx,0x2
   2e527:	jne    2e5e7 <g_str_equal@plt+0x21327>
   2e52d:	movsd  xmm0,QWORD PTR [rax+0x18]
   2e532:	ucomisd xmm0,QWORD PTR [rdx+0x18]
   2e537:	mov    edx,0x0
   2e53c:	setnp  al
   2e53f:	cmovne eax,edx
   2e542:	add    rsp,0x8
   2e546:	ret    
   2e547:	nop    WORD PTR [rax+rax*1+0x0]
   2e550:	mov    ecx,DWORD PTR [rdx+0x10]
   2e553:	cmp    ecx,0x1
   2e556:	je     2e5d0 <g_str_equal@plt+0x21310>
   2e558:	jb     2e5a8 <g_str_equal@plt+0x212e8>
   2e55a:	cmp    ecx,0x2
   2e55d:	jne    2e5e7 <g_str_equal@plt+0x21327>
   2e563:	xor    eax,eax
   2e565:	add    rsp,0x8
   2e569:	ret    
   2e56a:	nop    WORD PTR [rax+rax*1+0x0]
   2e570:	mov    ecx,DWORD PTR [rdx+0x10]
   2e573:	cmp    ecx,0x1
   2e576:	je     2e5c0 <g_str_equal@plt+0x21300>
   2e578:	jae    2e55a <g_str_equal@plt+0x2129a>
   2e57a:	mov    rax,rdi
   2e57d:	mov    rdi,rsi
   2e580:	test   rdi,rdi
   2e583:	mov    rsi,rax
   2e586:	jne    2e4d0 <g_str_equal@plt+0x21210>
   2e58c:	nop    DWORD PTR [rax+0x0]
   2e590:	xor    eax,eax
   2e592:	test   rsi,rsi
   2e595:	jne    2e4f1 <g_str_equal@plt+0x21231>
   2e59b:	xor    edx,edx
   2e59d:	jmp    2e509 <g_str_equal@plt+0x21249>
   2e5a2:	nop    WORD PTR [rax+rax*1+0x0]
   2e5a8:	mov    rsi,QWORD PTR [rdx+0x18]
   2e5ac:	cmp    QWORD PTR [rax+0x18],rsi
   2e5b0:	sete   al
   2e5b3:	add    rsp,0x8
   2e5b7:	ret    
   2e5b8:	nop    DWORD PTR [rax+rax*1+0x0]
   2e5c0:	mov    rdi,QWORD PTR [rdx+0x18]
   2e5c4:	cmp    QWORD PTR [rax+0x18],rdi
   2e5c8:	sete   al
   2e5cb:	add    rsp,0x8
   2e5cf:	ret    
   2e5d0:	mov    rcx,QWORD PTR [rax+0x18]
   2e5d4:	xor    eax,eax
   2e5d6:	test   rcx,rcx
   2e5d9:	js     2e565 <g_str_equal@plt+0x212a5>
   2e5db:	cmp    QWORD PTR [rdx+0x18],rcx
   2e5df:	sete   al
   2e5e2:	jmp    2e565 <g_str_equal@plt+0x212a5>
   2e5e7:	call   c270 <abort@plt>
   2e5ec:	call   d3e8 <g_str_equal@plt+0x128>
   2e5f1:	nop    DWORD PTR [rax+rax*1+0x0]
   2e5f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2e600:	sub    rsp,0x8
   2e604:	test   rdi,rdi
   2e607:	je     2e628 <g_str_equal@plt+0x21368>
   2e609:	mov    eax,DWORD PTR [rdi]
   2e60b:	lea    edx,[rax-0x1]
   2e60e:	cmp    edx,0x5
   2e611:	ja     2e647 <g_str_equal@plt+0x21387>
   2e613:	cmp    eax,0x2
   2e616:	mov    eax,0x0
   2e61b:	cmovne rdi,rax
   2e61f:	add    rsp,0x8
   2e623:	jmp    d2b0 <g_free@plt>
   2e628:	lea    rcx,[rip+0x315e1]        # 5fc10 <_fini@@Base+0xd4bc>
   2e62f:	lea    rsi,[rip+0x31592]        # 5fbc8 <_fini@@Base+0xd474>
   2e636:	lea    rdi,[rip+0x315c3]        # 5fc00 <_fini@@Base+0xd4ac>
   2e63d:	mov    edx,0x106
   2e642:	call   c390 <__assert_fail@plt>
   2e647:	call   d3e8 <g_str_equal@plt+0x128>
   2e64c:	nop    DWORD PTR [rax+0x0]
   2e650:	mov    rdx,QWORD PTR [rdi+0x18]
   2e654:	mov    rax,QWORD PTR [rdi+0x20]
   2e658:	add    rdx,rsi
   2e65b:	cmp    rax,rdx
   2e65e:	jae    2e698 <g_str_equal@plt+0x213d8>
   2e660:	mov    rdx,rax
   2e663:	push   rbx
   2e664:	mov    rbx,rdi
   2e667:	not    rdx
   2e66a:	cmp    rdx,rsi
   2e66d:	jb     2e6b9 <g_str_equal@plt+0x213f9>
   2e66f:	add    rax,rsi
   2e672:	test   rax,rax
   2e675:	mov    QWORD PTR [rdi+0x20],rax
   2e679:	js     2e69a <g_str_equal@plt+0x213da>
   2e67b:	add    rax,rax
   2e67e:	mov    QWORD PTR [rdi+0x20],rax
   2e682:	mov    rdi,QWORD PTR [rdi+0x10]
   2e686:	lea    rsi,[rax+0x1]
   2e68a:	call   ccf0 <g_realloc@plt>
   2e68f:	mov    QWORD PTR [rbx+0x10],rax
   2e693:	pop    rbx
   2e694:	ret    
   2e695:	nop    DWORD PTR [rax]
   2e698:	repz ret 
   2e69a:	lea    rcx,[rip+0x316ff]        # 5fda0 <_fini@@Base+0xd64c>
   2e6a1:	lea    rsi,[rip+0x31610]        # 5fcb8 <_fini@@Base+0xd564>
   2e6a8:	lea    rdi,[rip+0x31671]        # 5fd20 <_fini@@Base+0xd5cc>
   2e6af:	mov    edx,0x4b
   2e6b4:	call   c390 <__assert_fail@plt>
   2e6b9:	lea    rcx,[rip+0x316e0]        # 5fda0 <_fini@@Base+0xd64c>
   2e6c0:	lea    rsi,[rip+0x315f1]        # 5fcb8 <_fini@@Base+0xd564>
   2e6c7:	lea    rdi,[rip+0x3162a]        # 5fcf8 <_fini@@Base+0xd5a4>
   2e6ce:	mov    edx,0x49
   2e6d3:	call   c390 <__assert_fail@plt>
   2e6d8:	nop    DWORD PTR [rax+rax*1+0x0]
   2e6e0:	mov    rax,QWORD PTR [rdi+0x18]
   2e6e4:	ret    
   2e6e5:	nop
   2e6e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2e6f0:	push   r13
   2e6f2:	push   r12
   2e6f4:	push   rbp
   2e6f5:	push   rbx
   2e6f6:	sub    rsp,0x8
   2e6fa:	cmp    rsi,rdx
   2e6fd:	ja     2e767 <g_str_equal@plt+0x214a7>
   2e6ff:	mov    r12,rsi
   2e702:	mov    rbx,rdx
   2e705:	mov    r13,rdi
   2e708:	sub    rbx,r12
   2e70b:	mov    edi,0x28
   2e710:	call   c500 <g_malloc@plt>
   2e715:	cmp    rbx,0xffffffffffffffff
   2e719:	mov    rbp,rax
   2e71c:	mov    QWORD PTR [rax+0x8],0x1
   2e724:	mov    DWORD PTR [rax],0x3
   2e72a:	mov    QWORD PTR [rbp+0x18],rbx
   2e72e:	mov    QWORD PTR [rbp+0x20],rbx
   2e732:	je     2e786 <g_str_equal@plt+0x214c6>
   2e734:	lea    rdi,[rbx+0x1]
   2e738:	call   c500 <g_malloc@plt>
   2e73d:	mov    rbx,QWORD PTR [rbp+0x18]
   2e741:	lea    rsi,[r13+r12*1+0x0]
   2e746:	mov    QWORD PTR [rbp+0x10],rax
   2e74a:	mov    rdi,rax
   2e74d:	mov    rdx,rbx
   2e750:	call   d220 <memcpy@plt>
   2e755:	mov    BYTE PTR [rax+rbx*1],0x0
   2e759:	add    rsp,0x8
   2e75d:	mov    rax,rbp
   2e760:	pop    rbx
   2e761:	pop    rbp
   2e762:	pop    r12
   2e764:	pop    r13
   2e766:	ret    
   2e767:	lea    rcx,[rip+0x31652]        # 5fdc0 <_fini@@Base+0xd66c>
   2e76e:	lea    rsi,[rip+0x31543]        # 5fcb8 <_fini@@Base+0xd564>
   2e775:	lea    rdi,[rip+0x315c6]        # 5fd42 <_fini@@Base+0xd5ee>
   2e77c:	mov    edx,0x2c
   2e781:	call   c390 <__assert_fail@plt>
   2e786:	lea    rcx,[rip+0x31633]        # 5fdc0 <_fini@@Base+0xd66c>
   2e78d:	lea    rsi,[rip+0x31524]        # 5fcb8 <_fini@@Base+0xd564>
   2e794:	lea    rdi,[rip+0x315b4]        # 5fd4f <_fini@@Base+0xd5fb>
   2e79b:	mov    edx,0x34
   2e7a0:	call   c390 <__assert_fail@plt>
   2e7a5:	nop
   2e7a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2e7b0:	push   rbx
   2e7b1:	mov    rbx,rdi
   2e7b4:	call   c720 <strlen@plt>
   2e7b9:	mov    rdi,rbx
   2e7bc:	mov    rdx,rax
   2e7bf:	xor    esi,esi
   2e7c1:	pop    rbx
   2e7c2:	jmp    2e6f0 <g_str_equal@plt+0x21430>
   2e7c7:	nop    WORD PTR [rax+rax*1+0x0]
   2e7d0:	lea    rdi,[rip+0x31a97]        # 6026e <_fini@@Base+0xdb1a>
   2e7d7:	jmp    2e7b0 <g_str_equal@plt+0x214f0>
   2e7d9:	nop    DWORD PTR [rax+0x0]
   2e7e0:	push   r12
   2e7e2:	push   rbp
   2e7e3:	mov    rbp,rdi
   2e7e6:	push   rbx
   2e7e7:	mov    rdi,rsi
   2e7ea:	mov    r12,rsi
   2e7ed:	call   c720 <strlen@plt>
   2e7f2:	mov    rdi,rbp
   2e7f5:	mov    rsi,rax
   2e7f8:	mov    rbx,rax
   2e7fb:	call   2e650 <g_str_equal@plt+0x21390>
   2e800:	mov    rdi,QWORD PTR [rbp+0x18]
   2e804:	add    rdi,QWORD PTR [rbp+0x10]
   2e808:	mov    rdx,rbx
   2e80b:	mov    rsi,r12
   2e80e:	call   d220 <memcpy@plt>
   2e813:	add    rbx,QWORD PTR [rbp+0x18]
   2e817:	mov    rax,QWORD PTR [rbp+0x10]
   2e81b:	mov    QWORD PTR [rbp+0x18],rbx
   2e81f:	mov    BYTE PTR [rax+rbx*1],0x0
   2e823:	pop    rbx
   2e824:	pop    rbp
   2e825:	pop    r12
   2e827:	ret    
   2e828:	nop    DWORD PTR [rax+rax*1+0x0]
   2e830:	push   rbp
   2e831:	push   rbx
   2e832:	lea    r8,[rip+0x30d28]        # 5f561 <_fini@@Base+0xce0d>
   2e839:	mov    r9,rsi
   2e83c:	mov    rbp,rdi
   2e83f:	mov    ecx,0x20
   2e844:	sub    rsp,0x38
   2e848:	mov    edx,0x1
   2e84d:	mov    esi,0x20
   2e852:	mov    rax,QWORD PTR fs:0x28
   2e85b:	mov    QWORD PTR [rsp+0x28],rax
   2e860:	xor    eax,eax
   2e862:	mov    rbx,rsp
   2e865:	mov    rdi,rbx
   2e868:	call   cfe0 <__snprintf_chk@plt>
   2e86d:	mov    rsi,rbx
   2e870:	mov    rdi,rbp
   2e873:	call   2e7e0 <g_str_equal@plt+0x21520>
   2e878:	mov    rax,QWORD PTR [rsp+0x28]
   2e87d:	xor    rax,QWORD PTR fs:0x28
   2e886:	jne    2e88f <g_str_equal@plt+0x215cf>
   2e888:	add    rsp,0x38
   2e88c:	pop    rbx
   2e88d:	pop    rbp
   2e88e:	ret    
   2e88f:	call   cd30 <__stack_chk_fail@plt>
   2e894:	xchg   ax,ax
   2e896:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2e8a0:	push   rbp
   2e8a1:	push   rbx
   2e8a2:	mov    ebp,esi
   2e8a4:	mov    rbx,rdi
   2e8a7:	mov    esi,0x1
   2e8ac:	sub    rsp,0x8
   2e8b0:	call   2e650 <g_str_equal@plt+0x21390>
   2e8b5:	mov    rax,QWORD PTR [rbx+0x18]
   2e8b9:	mov    rdx,QWORD PTR [rbx+0x10]
   2e8bd:	lea    rcx,[rax+0x1]
   2e8c1:	mov    QWORD PTR [rbx+0x18],rcx
   2e8c5:	mov    BYTE PTR [rdx+rax*1],bpl
   2e8c9:	mov    rdx,QWORD PTR [rbx+0x10]
   2e8cd:	mov    rax,QWORD PTR [rbx+0x18]
   2e8d1:	mov    BYTE PTR [rdx+rax*1],0x0
   2e8d5:	add    rsp,0x8
   2e8d9:	pop    rbx
   2e8da:	pop    rbp
   2e8db:	ret    
   2e8dc:	nop    DWORD PTR [rax+0x0]
   2e8e0:	mov    rax,QWORD PTR [rdi+0x10]
   2e8e4:	ret    
   2e8e5:	nop
   2e8e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2e8f0:	test   rdi,rdi
   2e8f3:	je     2e900 <g_str_equal@plt+0x21640>
   2e8f5:	mov    rax,QWORD PTR [rdi+0x10]
   2e8f9:	ret    
   2e8fa:	nop    WORD PTR [rax+rax*1+0x0]
   2e900:	xor    eax,eax
   2e902:	ret    
   2e903:	nop    DWORD PTR [rax]
   2e906:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2e910:	test   rdi,rdi
   2e913:	je     2e930 <g_str_equal@plt+0x21670>
   2e915:	mov    eax,DWORD PTR [rdi]
   2e917:	lea    edx,[rax-0x1]
   2e91a:	cmp    edx,0x5
   2e91d:	ja     2e933 <g_str_equal@plt+0x21673>
   2e91f:	cmp    eax,0x3
   2e922:	jne    2e930 <g_str_equal@plt+0x21670>
   2e924:	mov    rax,QWORD PTR [rdi+0x10]
   2e928:	ret    
   2e929:	nop    DWORD PTR [rax+0x0]
   2e930:	xor    eax,eax
   2e932:	ret    
   2e933:	sub    rsp,0x8
   2e937:	call   d40b <g_str_equal@plt+0x14b>
   2e93c:	nop    DWORD PTR [rax+0x0]
   2e940:	test   rsi,rsi
   2e943:	je     2e9a8 <g_str_equal@plt+0x216e8>
   2e945:	sub    rsp,0x8
   2e949:	mov    eax,DWORD PTR [rsi]
   2e94b:	lea    edx,[rax-0x1]
   2e94e:	cmp    edx,0x5
   2e951:	ja     2e9b2 <g_str_equal@plt+0x216f2>
   2e953:	cmp    eax,0x3
   2e956:	je     2e968 <g_str_equal@plt+0x216a8>
   2e958:	mov    rax,QWORD PTR ds:0x10
   2e960:	ud2    
   2e962:	nop    WORD PTR [rax+rax*1+0x0]
   2e968:	test   rdi,rdi
   2e96b:	mov    rsi,QWORD PTR [rsi+0x10]
   2e96f:	je     2e980 <g_str_equal@plt+0x216c0>
   2e971:	mov    eax,DWORD PTR [rdi]
   2e973:	lea    edx,[rax-0x1]
   2e976:	cmp    edx,0x5
   2e979:	ja     2e9b2 <g_str_equal@plt+0x216f2>
   2e97b:	cmp    eax,0x3
   2e97e:	je     2e990 <g_str_equal@plt+0x216d0>
   2e980:	mov    rax,QWORD PTR ds:0x10
   2e988:	ud2    
   2e98a:	nop    WORD PTR [rax+rax*1+0x0]
   2e990:	mov    rdi,QWORD PTR [rdi+0x10]
   2e994:	call   cd60 <strcmp@plt>
   2e999:	test   eax,eax
   2e99b:	sete   al
   2e99e:	add    rsp,0x8
   2e9a2:	ret    
   2e9a3:	nop    DWORD PTR [rax+rax*1+0x0]
   2e9a8:	mov    rax,QWORD PTR ds:0x10
   2e9b0:	ud2    
   2e9b2:	call   d40b <g_str_equal@plt+0x14b>
   2e9b7:	nop    WORD PTR [rax+rax*1+0x0]
   2e9c0:	test   rdi,rdi
   2e9c3:	push   rbx
   2e9c4:	je     2e9fa <g_str_equal@plt+0x2173a>
   2e9c6:	mov    eax,DWORD PTR [rdi]
   2e9c8:	mov    rbx,rdi
   2e9cb:	lea    edx,[rax-0x1]
   2e9ce:	cmp    edx,0x5
   2e9d1:	ja     2ea19 <g_str_equal@plt+0x21759>
   2e9d3:	cmp    eax,0x3
   2e9d6:	je     2e9e8 <g_str_equal@plt+0x21728>
   2e9d8:	mov    rax,QWORD PTR ds:0x10
   2e9e0:	ud2    
   2e9e2:	nop    WORD PTR [rax+rax*1+0x0]
   2e9e8:	mov    rdi,QWORD PTR [rdi+0x10]
   2e9ec:	call   d2b0 <g_free@plt>
   2e9f1:	mov    rdi,rbx
   2e9f4:	pop    rbx
   2e9f5:	jmp    d2b0 <g_free@plt>
   2e9fa:	lea    rcx,[rip+0x3136f]        # 5fd70 <_fini@@Base+0xd61c>
   2ea01:	lea    rsi,[rip+0x312b0]        # 5fcb8 <_fini@@Base+0xd564>
   2ea08:	lea    rdi,[rip+0x311f1]        # 5fc00 <_fini@@Base+0xd4ac>
   2ea0f:	mov    edx,0xa1
   2ea14:	call   c390 <__assert_fail@plt>
   2ea19:	call   d40b <g_str_equal@plt+0x14b>
   2ea1e:	xchg   ax,ax
   2ea20:	push   rbx
   2ea21:	mov    rbx,rdi
   2ea24:	call   c720 <strlen@plt>
   2ea29:	imul   r8d,eax,0x238f13af
   2ea30:	cmp    BYTE PTR [rbx],0x0
   2ea33:	je     2ea69 <g_str_equal@plt+0x217a9>
   2ea35:	mov    rdx,rbx
   2ea38:	xor    esi,esi
   2ea3a:	mov    r9d,0xaaaaaaab
   2ea40:	lea    ecx,[rsi+rsi*4]
   2ea43:	movzx  edi,BYTE PTR [rdx]
   2ea46:	mov    eax,ecx
   2ea48:	mul    r9d
   2ea4b:	shr    edx,0x4
   2ea4e:	lea    eax,[rdx+rdx*2]
   2ea51:	lea    edx,[rsi+0x1]
   2ea54:	shl    eax,0x3
   2ea57:	mov    rsi,rdx
   2ea5a:	add    rdx,rbx
   2ea5d:	sub    ecx,eax
   2ea5f:	shl    edi,cl
   2ea61:	add    r8d,edi
   2ea64:	cmp    BYTE PTR [rdx],0x0
   2ea67:	jne    2ea40 <g_str_equal@plt+0x21780>
   2ea69:	imul   eax,r8d,0x41c64e6b
   2ea70:	pop    rbx
   2ea71:	add    eax,0x3039
   2ea76:	ret    
   2ea77:	nop    WORD PTR [rax+rax*1+0x0]
   2ea80:	test   rdi,rdi
   2ea83:	push   rbx
   2ea84:	je     2eb15 <g_str_equal@plt+0x21855>
   2ea8a:	cmp    QWORD PTR [rdi],0x0
   2ea8e:	mov    rbx,rdi
   2ea91:	je     2eaf6 <g_str_equal@plt+0x21836>
   2ea93:	mov    rdi,QWORD PTR [rdi+0x8]
   2ea97:	test   rdi,rdi
   2ea9a:	je     2ead7 <g_str_equal@plt+0x21817>
   2ea9c:	mov    rax,QWORD PTR [rdi+0x8]
   2eaa0:	test   rax,rax
   2eaa3:	je     2eb34 <g_str_equal@plt+0x21874>
   2eaa9:	sub    rax,0x1
   2eaad:	test   rax,rax
   2eab0:	mov    QWORD PTR [rdi+0x8],rax
   2eab4:	je     2ead0 <g_str_equal@plt+0x21810>
   2eab6:	mov    rdi,QWORD PTR [rbx]
   2eab9:	call   d2b0 <g_free@plt>
   2eabe:	mov    rdi,rbx
   2eac1:	pop    rbx
   2eac2:	jmp    d2b0 <g_free@plt>
   2eac7:	nop    WORD PTR [rax+rax*1+0x0]
   2ead0:	call   30300 <g_str_equal@plt+0x23040>
   2ead5:	jmp    2eab6 <g_str_equal@plt+0x217f6>
   2ead7:	lea    rcx,[rip+0x3137a]        # 5fe58 <_fini@@Base+0xd704>
   2eade:	lea    rsi,[rip+0x312f3]        # 5fdd8 <_fini@@Base+0xd684>
   2eae5:	lea    rdi,[rip+0x31334]        # 5fe20 <_fini@@Base+0xd6cc>
   2eaec:	mov    edx,0x181
   2eaf1:	call   c390 <__assert_fail@plt>
   2eaf6:	lea    rcx,[rip+0x3135b]        # 5fe58 <_fini@@Base+0xd704>
   2eafd:	lea    rsi,[rip+0x312d4]        # 5fdd8 <_fini@@Base+0xd684>
   2eb04:	lea    rdi,[rip+0x31306]        # 5fe11 <_fini@@Base+0xd6bd>
   2eb0b:	mov    edx,0x180
   2eb10:	call   c390 <__assert_fail@plt>
   2eb15:	lea    rcx,[rip+0x3133c]        # 5fe58 <_fini@@Base+0xd704>
   2eb1c:	lea    rsi,[rip+0x312b5]        # 5fdd8 <_fini@@Base+0xd684>
   2eb23:	lea    rdi,[rip+0x2e94e]        # 5d478 <_fini@@Base+0xad24>
   2eb2a:	mov    edx,0x17f
   2eb2f:	call   c390 <__assert_fail@plt>
   2eb34:	call   d451 <g_str_equal@plt+0x191>
   2eb39:	nop    DWORD PTR [rax+0x0]
   2eb40:	sub    rsp,0x8
   2eb44:	mov    edi,0x1018
   2eb49:	call   ce00 <g_malloc0@plt>
   2eb4e:	mov    QWORD PTR [rax+0x8],0x1
   2eb56:	mov    DWORD PTR [rax],0x4
   2eb5c:	add    rsp,0x8
   2eb60:	ret    
   2eb61:	nop    DWORD PTR [rax+rax*1+0x0]
   2eb66:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2eb70:	mov    rax,QWORD PTR [rdi+0x8]
   2eb74:	ret    
   2eb75:	nop
   2eb76:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2eb80:	mov    rax,QWORD PTR [rdi]
   2eb83:	ret    
   2eb84:	xchg   ax,ax
   2eb86:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2eb90:	push   r15
   2eb92:	push   r14
   2eb94:	mov    r14,rdi
   2eb97:	push   r13
   2eb99:	push   r12
   2eb9b:	mov    rdi,rsi
   2eb9e:	push   rbp
   2eb9f:	push   rbx
   2eba0:	mov    rbp,rsi
   2eba3:	mov    r15,rdx
   2eba6:	sub    rsp,0x8
   2ebaa:	call   2ea20 <g_str_equal@plt+0x21760>
   2ebaf:	mov    r12d,eax
   2ebb2:	and    r12d,0x1ff
   2ebb9:	lea    r13,[r14+r12*8]
   2ebbd:	mov    rbx,QWORD PTR [r13+0x18]
   2ebc1:	test   rbx,rbx
   2ebc4:	jne    2ebd9 <g_str_equal@plt+0x21919>
   2ebc6:	jmp    2ec20 <g_str_equal@plt+0x21960>
   2ebc8:	nop    DWORD PTR [rax+rax*1+0x0]
   2ebd0:	mov    rbx,QWORD PTR [rbx+0x10]
   2ebd4:	test   rbx,rbx
   2ebd7:	je     2ec20 <g_str_equal@plt+0x21960>
   2ebd9:	mov    rdi,QWORD PTR [rbx]
   2ebdc:	mov    rsi,rbp
   2ebdf:	call   cd60 <strcmp@plt>
   2ebe4:	test   eax,eax
   2ebe6:	jne    2ebd0 <g_str_equal@plt+0x21910>
   2ebe8:	mov    rdi,QWORD PTR [rbx+0x8]
   2ebec:	test   rdi,rdi
   2ebef:	je     2ec0b <g_str_equal@plt+0x2194b>
   2ebf1:	mov    rax,QWORD PTR [rdi+0x8]
   2ebf5:	test   rax,rax
   2ebf8:	je     2ec7f <g_str_equal@plt+0x219bf>
   2ebfe:	sub    rax,0x1
   2ec02:	test   rax,rax
   2ec05:	mov    QWORD PTR [rdi+0x8],rax
   2ec09:	je     2ec78 <g_str_equal@plt+0x219b8>
   2ec0b:	mov    QWORD PTR [rbx+0x8],r15
   2ec0f:	add    rsp,0x8
   2ec13:	pop    rbx
   2ec14:	pop    rbp
   2ec15:	pop    r12
   2ec17:	pop    r13
   2ec19:	pop    r14
   2ec1b:	pop    r15
   2ec1d:	ret    
   2ec1e:	xchg   ax,ax
   2ec20:	mov    edi,0x20
   2ec25:	call   ce00 <g_malloc0@plt>
   2ec2a:	mov    rdi,rbp
   2ec2d:	mov    rbx,rax
   2ec30:	call   c370 <g_strdup@plt>
   2ec35:	mov    QWORD PTR [rbx],rax
   2ec38:	mov    rax,QWORD PTR [r13+0x18]
   2ec3c:	mov    QWORD PTR [rbx+0x8],r15
   2ec40:	test   rax,rax
   2ec43:	mov    QWORD PTR [rbx+0x10],rax
   2ec47:	je     2ec51 <g_str_equal@plt+0x21991>
   2ec49:	lea    rdx,[rbx+0x10]
   2ec4d:	mov    QWORD PTR [rax+0x18],rdx
   2ec51:	lea    rax,[r14+r12*8+0x18]
   2ec56:	mov    QWORD PTR [r13+0x18],rbx
   2ec5a:	add    QWORD PTR [r14+0x10],0x1
   2ec5f:	mov    QWORD PTR [rbx+0x18],rax
   2ec63:	add    rsp,0x8
   2ec67:	pop    rbx
   2ec68:	pop    rbp
   2ec69:	pop    r12
   2ec6b:	pop    r13
   2ec6d:	pop    r14
   2ec6f:	pop    r15
   2ec71:	ret    
   2ec72:	nop    WORD PTR [rax+rax*1+0x0]
   2ec78:	call   30300 <g_str_equal@plt+0x23040>
   2ec7d:	jmp    2ec0b <g_str_equal@plt+0x2194b>
   2ec7f:	call   d451 <g_str_equal@plt+0x191>
   2ec84:	xchg   ax,ax
   2ec86:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2ec90:	push   rbp
   2ec91:	push   rbx
   2ec92:	mov    rbx,rdi
   2ec95:	mov    rdi,rdx
   2ec98:	mov    rbp,rsi
   2ec9b:	sub    rsp,0x8
   2ec9f:	call   2e110 <g_str_equal@plt+0x20e50>
   2eca4:	add    rsp,0x8
   2eca8:	mov    rsi,rbp
   2ecab:	mov    rdi,rbx
   2ecae:	pop    rbx
   2ecaf:	pop    rbp
   2ecb0:	mov    rdx,rax
   2ecb3:	jmp    2eb90 <g_str_equal@plt+0x218d0>
   2ecb8:	nop    DWORD PTR [rax+rax*1+0x0]
   2ecc0:	push   rbp
   2ecc1:	push   rbx
   2ecc2:	mov    rbx,rdi
   2ecc5:	movzx  edi,dl
   2ecc8:	mov    rbp,rsi
   2eccb:	sub    rsp,0x8
   2eccf:	call   2f920 <g_str_equal@plt+0x22660>
   2ecd4:	add    rsp,0x8
   2ecd8:	mov    rsi,rbp
   2ecdb:	mov    rdi,rbx
   2ecde:	pop    rbx
   2ecdf:	pop    rbp
   2ece0:	mov    rdx,rax
   2ece3:	jmp    2eb90 <g_str_equal@plt+0x218d0>
   2ece8:	nop    DWORD PTR [rax+rax*1+0x0]
   2ecf0:	push   rbp
   2ecf1:	push   rbx
   2ecf2:	mov    rbx,rdi
   2ecf5:	mov    rdi,rdx
   2ecf8:	mov    rbp,rsi
   2ecfb:	sub    rsp,0x8
   2ecff:	call   2e7b0 <g_str_equal@plt+0x214f0>
   2ed04:	add    rsp,0x8
   2ed08:	mov    rsi,rbp
   2ed0b:	mov    rdi,rbx
   2ed0e:	pop    rbx
   2ed0f:	pop    rbp
   2ed10:	mov    rdx,rax
   2ed13:	jmp    2eb90 <g_str_equal@plt+0x218d0>
   2ed18:	nop    DWORD PTR [rax+rax*1+0x0]
   2ed20:	add    QWORD PTR [rip+0x253730],0x1        # 282458 <g_test_config_vars+0x1098>
   2ed28:	lea    rdx,[rip+0x253721]        # 282450 <g_test_config_vars+0x1090>
   2ed2f:	jmp    2eb90 <g_str_equal@plt+0x218d0>
   2ed34:	xchg   ax,ax
   2ed36:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2ed40:	push   rbp
   2ed41:	push   rbx
   2ed42:	mov    rbx,rdi
   2ed45:	mov    rdi,rsi
   2ed48:	mov    rbp,rsi
   2ed4b:	sub    rsp,0x8
   2ed4f:	call   2ea20 <g_str_equal@plt+0x21760>
   2ed54:	and    eax,0x1ff
   2ed59:	mov    rbx,QWORD PTR [rbx+rax*8+0x18]
   2ed5e:	test   rbx,rbx
   2ed61:	jne    2ed71 <g_str_equal@plt+0x21ab1>
   2ed63:	jmp    2ed90 <g_str_equal@plt+0x21ad0>
   2ed65:	nop    DWORD PTR [rax]
   2ed68:	mov    rbx,QWORD PTR [rbx+0x10]
   2ed6c:	test   rbx,rbx
   2ed6f:	je     2ed90 <g_str_equal@plt+0x21ad0>
   2ed71:	mov    rdi,QWORD PTR [rbx]
   2ed74:	mov    rsi,rbp
   2ed77:	call   cd60 <strcmp@plt>
   2ed7c:	test   eax,eax
   2ed7e:	jne    2ed68 <g_str_equal@plt+0x21aa8>
   2ed80:	mov    rax,QWORD PTR [rbx+0x8]
   2ed84:	add    rsp,0x8
   2ed88:	pop    rbx
   2ed89:	pop    rbp
   2ed8a:	ret    
   2ed8b:	nop    DWORD PTR [rax+rax*1+0x0]
   2ed90:	add    rsp,0x8
   2ed94:	xor    eax,eax
   2ed96:	pop    rbx
   2ed97:	pop    rbp
   2ed98:	ret    
   2ed99:	nop    DWORD PTR [rax+0x0]
   2eda0:	push   rbp
   2eda1:	push   rbx
   2eda2:	mov    rbx,rdi
   2eda5:	mov    rdi,rsi
   2eda8:	mov    rbp,rsi
   2edab:	sub    rsp,0x8
   2edaf:	call   2ea20 <g_str_equal@plt+0x21760>
   2edb4:	and    eax,0x1ff
   2edb9:	mov    rbx,QWORD PTR [rbx+rax*8+0x18]
   2edbe:	test   rbx,rbx
   2edc1:	jne    2edd1 <g_str_equal@plt+0x21b11>
   2edc3:	jmp    2edf0 <g_str_equal@plt+0x21b30>
   2edc5:	nop    DWORD PTR [rax]
   2edc8:	mov    rbx,QWORD PTR [rbx+0x10]
   2edcc:	test   rbx,rbx
   2edcf:	je     2edf0 <g_str_equal@plt+0x21b30>
   2edd1:	mov    rdi,QWORD PTR [rbx]
   2edd4:	mov    rsi,rbp
   2edd7:	call   cd60 <strcmp@plt>
   2eddc:	test   eax,eax
   2edde:	jne    2edc8 <g_str_equal@plt+0x21b08>
   2ede0:	add    rsp,0x8
   2ede4:	mov    eax,0x1
   2ede9:	pop    rbx
   2edea:	pop    rbp
   2edeb:	ret    
   2edec:	nop    DWORD PTR [rax+0x0]
   2edf0:	add    rsp,0x8
   2edf4:	xor    eax,eax
   2edf6:	pop    rbx
   2edf7:	pop    rbp
   2edf8:	ret    
   2edf9:	nop    DWORD PTR [rax+0x0]
   2ee00:	mov    rax,QWORD PTR [rdi+0x10]
   2ee04:	ret    
   2ee05:	nop
   2ee06:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2ee10:	sub    rsp,0x8
   2ee14:	call   2ed40 <g_str_equal@plt+0x21a80>
   2ee19:	test   rax,rax
   2ee1c:	je     2ee34 <g_str_equal@plt+0x21b74>
   2ee1e:	mov    edx,DWORD PTR [rax]
   2ee20:	lea    ecx,[rdx-0x1]
   2ee23:	cmp    ecx,0x5
   2ee26:	ja     2ee40 <g_str_equal@plt+0x21b80>
   2ee28:	cmp    edx,0x2
   2ee2b:	mov    edx,0x0
   2ee30:	cmovne rax,rdx
   2ee34:	mov    rdi,rax
   2ee37:	add    rsp,0x8
   2ee3b:	jmp    2e330 <g_str_equal@plt+0x21070>
   2ee40:	call   d42e <g_str_equal@plt+0x16e>
   2ee45:	nop
   2ee46:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2ee50:	sub    rsp,0x8
   2ee54:	call   2ed40 <g_str_equal@plt+0x21a80>
   2ee59:	test   rax,rax
   2ee5c:	je     2ee74 <g_str_equal@plt+0x21bb4>
   2ee5e:	mov    edx,DWORD PTR [rax]
   2ee60:	lea    ecx,[rdx-0x1]
   2ee63:	cmp    ecx,0x5
   2ee66:	ja     2ee80 <g_str_equal@plt+0x21bc0>
   2ee68:	cmp    edx,0x2
   2ee6b:	mov    edx,0x0
   2ee70:	cmovne rax,rdx
   2ee74:	mov    rdi,rax
   2ee77:	add    rsp,0x8
   2ee7b:	jmp    2e210 <g_str_equal@plt+0x20f50>
   2ee80:	call   d42e <g_str_equal@plt+0x16e>
   2ee85:	nop
   2ee86:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2ee90:	sub    rsp,0x8
   2ee94:	call   2ed40 <g_str_equal@plt+0x21a80>
   2ee99:	test   rax,rax
   2ee9c:	je     2eeb4 <g_str_equal@plt+0x21bf4>
   2ee9e:	mov    edx,DWORD PTR [rax]
   2eea0:	lea    ecx,[rdx-0x1]
   2eea3:	cmp    ecx,0x5
   2eea6:	ja     2eec0 <g_str_equal@plt+0x21c00>
   2eea8:	cmp    edx,0x6
   2eeab:	mov    edx,0x0
   2eeb0:	cmovne rax,rdx
   2eeb4:	mov    rdi,rax
   2eeb7:	add    rsp,0x8
   2eebb:	jmp    2f940 <g_str_equal@plt+0x22680>
   2eec0:	call   d42e <g_str_equal@plt+0x16e>
   2eec5:	nop
   2eec6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2eed0:	sub    rsp,0x8
   2eed4:	call   2ed40 <g_str_equal@plt+0x21a80>
   2eed9:	test   rax,rax
   2eedc:	je     2eef4 <g_str_equal@plt+0x21c34>
   2eede:	mov    edx,DWORD PTR [rax]
   2eee0:	lea    ecx,[rdx-0x1]
   2eee3:	cmp    ecx,0x5
   2eee6:	ja     2eef9 <g_str_equal@plt+0x21c39>
   2eee8:	cmp    edx,0x5
   2eeeb:	mov    edx,0x0
   2eef0:	cmovne rax,rdx
   2eef4:	add    rsp,0x8
   2eef8:	ret    
   2eef9:	call   d42e <g_str_equal@plt+0x16e>
   2eefe:	xchg   ax,ax
   2ef00:	sub    rsp,0x8
   2ef04:	call   2ed40 <g_str_equal@plt+0x21a80>
   2ef09:	test   rax,rax
   2ef0c:	je     2ef24 <g_str_equal@plt+0x21c64>
   2ef0e:	mov    edx,DWORD PTR [rax]
   2ef10:	lea    ecx,[rdx-0x1]
   2ef13:	cmp    ecx,0x5
   2ef16:	ja     2ef29 <g_str_equal@plt+0x21c69>
   2ef18:	cmp    edx,0x4
   2ef1b:	mov    edx,0x0
   2ef20:	cmovne rax,rdx
   2ef24:	add    rsp,0x8
   2ef28:	ret    
   2ef29:	call   d42e <g_str_equal@plt+0x16e>
   2ef2e:	xchg   ax,ax
   2ef30:	sub    rsp,0x8
   2ef34:	call   2ed40 <g_str_equal@plt+0x21a80>
   2ef39:	test   rax,rax
   2ef3c:	je     2ef54 <g_str_equal@plt+0x21c94>
   2ef3e:	mov    edx,DWORD PTR [rax]
   2ef40:	lea    ecx,[rdx-0x1]
   2ef43:	cmp    ecx,0x5
   2ef46:	ja     2ef60 <g_str_equal@plt+0x21ca0>
   2ef48:	cmp    edx,0x3
   2ef4b:	mov    edx,0x0
   2ef50:	cmovne rax,rdx
   2ef54:	mov    rdi,rax
   2ef57:	add    rsp,0x8
   2ef5b:	jmp    2e8e0 <g_str_equal@plt+0x21620>
   2ef60:	call   d42e <g_str_equal@plt+0x16e>
   2ef65:	nop
   2ef66:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2ef70:	push   rbx
   2ef71:	mov    rbx,rdx
   2ef74:	sub    rsp,0x10
   2ef78:	mov    rax,QWORD PTR fs:0x28
   2ef81:	mov    QWORD PTR [rsp+0x8],rax
   2ef86:	xor    eax,eax
   2ef88:	call   2ed40 <g_str_equal@plt+0x21a80>
   2ef8d:	test   rax,rax
   2ef90:	je     2efa1 <g_str_equal@plt+0x21ce1>
   2ef92:	mov    edx,DWORD PTR [rax]
   2ef94:	lea    ecx,[rdx-0x1]
   2ef97:	cmp    ecx,0x5
   2ef9a:	ja     2efda <g_str_equal@plt+0x21d1a>
   2ef9c:	cmp    edx,0x2
   2ef9f:	je     2efc0 <g_str_equal@plt+0x21d00>
   2efa1:	mov    rax,rbx
   2efa4:	mov    rcx,QWORD PTR [rsp+0x8]
   2efa9:	xor    rcx,QWORD PTR fs:0x28
   2efb2:	jne    2efd5 <g_str_equal@plt+0x21d15>
   2efb4:	add    rsp,0x10
   2efb8:	pop    rbx
   2efb9:	ret    
   2efba:	nop    WORD PTR [rax+rax*1+0x0]
   2efc0:	mov    rsi,rsp
   2efc3:	mov    rdi,rax
   2efc6:	call   2e1b0 <g_str_equal@plt+0x20ef0>
   2efcb:	test   al,al
   2efcd:	je     2efa1 <g_str_equal@plt+0x21ce1>
   2efcf:	mov    rax,QWORD PTR [rsp]
   2efd3:	jmp    2efa4 <g_str_equal@plt+0x21ce4>
   2efd5:	call   cd30 <__stack_chk_fail@plt>
   2efda:	call   d42e <g_str_equal@plt+0x16e>
   2efdf:	nop
   2efe0:	push   rbx
   2efe1:	mov    ebx,edx
   2efe3:	call   2ed40 <g_str_equal@plt+0x21a80>
   2efe8:	test   rax,rax
   2efeb:	je     2effc <g_str_equal@plt+0x21d3c>
   2efed:	mov    ecx,DWORD PTR [rax]
   2efef:	lea    edx,[rcx-0x1]
   2eff2:	cmp    edx,0x5
   2eff5:	ja     2f009 <g_str_equal@plt+0x21d49>
   2eff7:	cmp    ecx,0x6
   2effa:	je     2f000 <g_str_equal@plt+0x21d40>
   2effc:	mov    eax,ebx
   2effe:	pop    rbx
   2efff:	ret    
   2f000:	pop    rbx
   2f001:	mov    rdi,rax
   2f004:	jmp    2f940 <g_str_equal@plt+0x22680>
   2f009:	call   d42e <g_str_equal@plt+0x16e>
   2f00e:	xchg   ax,ax
   2f010:	sub    rsp,0x8
   2f014:	call   2ed40 <g_str_equal@plt+0x21a80>
   2f019:	test   rax,rax
   2f01c:	je     2f040 <g_str_equal@plt+0x21d80>
   2f01e:	mov    edx,DWORD PTR [rax]
   2f020:	lea    ecx,[rdx-0x1]
   2f023:	cmp    ecx,0x5
   2f026:	ja     2f047 <g_str_equal@plt+0x21d87>
   2f028:	cmp    edx,0x3
   2f02b:	jne    2f040 <g_str_equal@plt+0x21d80>
   2f02d:	mov    rdi,rax
   2f030:	add    rsp,0x8
   2f034:	jmp    2e8e0 <g_str_equal@plt+0x21620>
   2f039:	nop    DWORD PTR [rax+0x0]
   2f040:	xor    eax,eax
   2f042:	add    rsp,0x8
   2f046:	ret    
   2f047:	call   d42e <g_str_equal@plt+0x16e>
   2f04c:	nop    DWORD PTR [rax+0x0]
   2f050:	push   r14
   2f052:	lea    r14,[rdi+0x1018]
   2f059:	push   r13
   2f05b:	lea    r13,[rdi+0x18]
   2f05f:	push   r12
   2f061:	push   rbp
   2f062:	push   rbx
   2f063:	mov    r12,rsi
   2f066:	mov    rbp,rdx
   2f069:	nop    DWORD PTR [rax+0x0]
   2f070:	mov    rbx,QWORD PTR [r13+0x0]
   2f074:	test   rbx,rbx
   2f077:	je     2f096 <g_str_equal@plt+0x21dd6>
   2f079:	nop    DWORD PTR [rax+0x0]
   2f080:	mov    rsi,QWORD PTR [rbx+0x8]
   2f084:	mov    rdi,QWORD PTR [rbx]
   2f087:	mov    rdx,rbp
   2f08a:	call   r12
   2f08d:	mov    rbx,QWORD PTR [rbx+0x10]
   2f091:	test   rbx,rbx
   2f094:	jne    2f080 <g_str_equal@plt+0x21dc0>
   2f096:	add    r13,0x8
   2f09a:	cmp    r13,r14
   2f09d:	jne    2f070 <g_str_equal@plt+0x21db0>
   2f09f:	pop    rbx
   2f0a0:	pop    rbp
   2f0a1:	pop    r12
   2f0a3:	pop    r13
   2f0a5:	pop    r14
   2f0a7:	ret    
   2f0a8:	nop    DWORD PTR [rax+rax*1+0x0]
   2f0b0:	lea    rdx,[rdi+0x18]
   2f0b4:	add    rdi,0x1018
   2f0bb:	jmp    2f0c9 <g_str_equal@plt+0x21e09>
   2f0bd:	nop    DWORD PTR [rax]
   2f0c0:	add    rdx,0x8
   2f0c4:	cmp    rdx,rdi
   2f0c7:	je     2f0d1 <g_str_equal@plt+0x21e11>
   2f0c9:	mov    rax,QWORD PTR [rdx]
   2f0cc:	test   rax,rax
   2f0cf:	je     2f0c0 <g_str_equal@plt+0x21e00>
   2f0d1:	repz ret 
   2f0d3:	nop    DWORD PTR [rax]
   2f0d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2f0e0:	push   rbp
   2f0e1:	push   rbx
   2f0e2:	sub    rsp,0x8
   2f0e6:	mov    rbx,QWORD PTR [rsi+0x10]
   2f0ea:	test   rbx,rbx
   2f0ed:	je     2f100 <g_str_equal@plt+0x21e40>
   2f0ef:	add    rsp,0x8
   2f0f3:	mov    rax,rbx
   2f0f6:	pop    rbx
   2f0f7:	pop    rbp
   2f0f8:	ret    
   2f0f9:	nop    DWORD PTR [rax+0x0]
   2f100:	mov    rbp,rdi
   2f103:	mov    rdi,QWORD PTR [rsi]
   2f106:	call   2ea20 <g_str_equal@plt+0x21760>
   2f10b:	and    eax,0x1ff
   2f110:	lea    edx,[rax+0x1]
   2f113:	cmp    edx,0x200
   2f119:	mov    eax,edx
   2f11b:	je     2f0ef <g_str_equal@plt+0x21e2f>
   2f11d:	movsxd rdx,edx
   2f120:	mov    rdx,QWORD PTR [rbp+rdx*8+0x18]
   2f125:	test   rdx,rdx
   2f128:	jne    2f147 <g_str_equal@plt+0x21e87>
   2f12a:	nop    WORD PTR [rax+rax*1+0x0]
   2f130:	add    eax,0x1
   2f133:	cmp    eax,0x200
   2f138:	je     2f0ef <g_str_equal@plt+0x21e2f>
   2f13a:	movsxd rdx,eax
   2f13d:	mov    rdx,QWORD PTR [rbp+rdx*8+0x18]
   2f142:	test   rdx,rdx
   2f145:	je     2f130 <g_str_equal@plt+0x21e70>
   2f147:	mov    rbx,rdx
   2f14a:	jmp    2f0ef <g_str_equal@plt+0x21e2f>
   2f14c:	nop    DWORD PTR [rax+0x0]
   2f150:	push   r13
   2f152:	push   r12
   2f154:	mov    r13,rdi
   2f157:	push   rbp
   2f158:	push   rbx
   2f159:	mov    edi,0x1018
   2f15e:	lea    r12,[r13+0x18]
   2f162:	add    r13,0x1018
   2f169:	sub    rsp,0x8
   2f16d:	call   ce00 <g_malloc0@plt>
   2f172:	mov    rbp,rax
   2f175:	mov    QWORD PTR [rax+0x8],0x1
   2f17d:	mov    DWORD PTR [rax],0x4
   2f183:	nop    DWORD PTR [rax+rax*1+0x0]
   2f188:	mov    rbx,QWORD PTR [r12]
   2f18c:	test   rbx,rbx
   2f18f:	je     2f1ba <g_str_equal@plt+0x21efa>
   2f191:	nop    DWORD PTR [rax+0x0]
   2f198:	mov    rdx,QWORD PTR [rbx+0x8]
   2f19c:	test   rdx,rdx
   2f19f:	je     2f1a6 <g_str_equal@plt+0x21ee6>
   2f1a1:	add    QWORD PTR [rdx+0x8],0x1
   2f1a6:	mov    rsi,QWORD PTR [rbx]
   2f1a9:	mov    rdi,rbp
   2f1ac:	call   2eb90 <g_str_equal@plt+0x218d0>
   2f1b1:	mov    rbx,QWORD PTR [rbx+0x10]
   2f1b5:	test   rbx,rbx
   2f1b8:	jne    2f198 <g_str_equal@plt+0x21ed8>
   2f1ba:	add    r12,0x8
   2f1be:	cmp    r12,r13
   2f1c1:	jne    2f188 <g_str_equal@plt+0x21ec8>
   2f1c3:	add    rsp,0x8
   2f1c7:	mov    rax,rbp
   2f1ca:	pop    rbx
   2f1cb:	pop    rbp
   2f1cc:	pop    r12
   2f1ce:	pop    r13
   2f1d0:	ret    
   2f1d1:	nop    DWORD PTR [rax+rax*1+0x0]
   2f1d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2f1e0:	push   r12
   2f1e2:	push   rbp
   2f1e3:	mov    r12,rdi
   2f1e6:	push   rbx
   2f1e7:	mov    rdi,rsi
   2f1ea:	mov    rbp,rsi
   2f1ed:	call   2ea20 <g_str_equal@plt+0x21760>
   2f1f2:	and    eax,0x1ff
   2f1f7:	mov    rbx,QWORD PTR [r12+rax*8+0x18]
   2f1fc:	test   rbx,rbx
   2f1ff:	jne    2f210 <g_str_equal@plt+0x21f50>
   2f201:	jmp    2f249 <g_str_equal@plt+0x21f89>
   2f203:	nop    DWORD PTR [rax+rax*1+0x0]
   2f208:	test   rdx,rdx
   2f20b:	mov    rbx,rdx
   2f20e:	je     2f249 <g_str_equal@plt+0x21f89>
   2f210:	mov    rdi,QWORD PTR [rbx]
   2f213:	mov    rsi,rbp
   2f216:	call   cd60 <strcmp@plt>
   2f21b:	test   eax,eax
   2f21d:	mov    rdx,QWORD PTR [rbx+0x10]
   2f221:	jne    2f208 <g_str_equal@plt+0x21f48>
   2f223:	test   rdx,rdx
   2f226:	mov    rax,QWORD PTR [rbx+0x18]
   2f22a:	je     2f238 <g_str_equal@plt+0x21f78>
   2f22c:	mov    QWORD PTR [rdx+0x18],rax
   2f230:	mov    rax,QWORD PTR [rbx+0x18]
   2f234:	mov    rdx,QWORD PTR [rbx+0x10]
   2f238:	mov    QWORD PTR [rax],rdx
   2f23b:	mov    rdi,rbx
   2f23e:	call   2ea80 <g_str_equal@plt+0x217c0>
   2f243:	sub    QWORD PTR [r12+0x10],0x1
   2f249:	pop    rbx
   2f24a:	pop    rbp
   2f24b:	pop    r12
   2f24d:	ret    
   2f24e:	xchg   ax,ax
   2f250:	test   rdi,rdi
   2f253:	push   r12
   2f255:	mov    r12,rdi
   2f258:	push   rbp
   2f259:	mov    rbp,rsi
   2f25c:	push   rbx
   2f25d:	je     2f279 <g_str_equal@plt+0x21fb9>
   2f25f:	mov    eax,DWORD PTR [rdi]
   2f261:	lea    edx,[rax-0x1]
   2f264:	cmp    edx,0x5
   2f267:	ja     2f341 <g_str_equal@plt+0x22081>
   2f26d:	cmp    eax,0x4
   2f270:	mov    eax,0x0
   2f275:	cmovne r12,rax
   2f279:	test   rbp,rbp
   2f27c:	je     2f292 <g_str_equal@plt+0x21fd2>
   2f27e:	mov    eax,DWORD PTR [rbp+0x0]
   2f281:	lea    edx,[rax-0x1]
   2f284:	cmp    edx,0x5
   2f287:	ja     2f341 <g_str_equal@plt+0x22081>
   2f28d:	cmp    eax,0x4
   2f290:	je     2f2a0 <g_str_equal@plt+0x21fe0>
   2f292:	mov    rax,QWORD PTR ds:0x10
   2f29a:	ud2    
   2f29c:	nop    DWORD PTR [rax+0x0]
   2f2a0:	mov    rax,QWORD PTR [rbp+0x10]
   2f2a4:	cmp    QWORD PTR [r12+0x10],rax
   2f2a9:	je     2f2b8 <g_str_equal@plt+0x21ff8>
   2f2ab:	pop    rbx
   2f2ac:	xor    eax,eax
   2f2ae:	pop    rbp
   2f2af:	pop    r12
   2f2b1:	ret    
   2f2b2:	nop    WORD PTR [rax+rax*1+0x0]
   2f2b8:	lea    rax,[r12+0x18]
   2f2bd:	lea    rdx,[r12+0x1018]
   2f2c5:	jmp    2f2d9 <g_str_equal@plt+0x22019>
   2f2c7:	nop    WORD PTR [rax+rax*1+0x0]
   2f2d0:	add    rax,0x8
   2f2d4:	cmp    rax,rdx
   2f2d7:	je     2f337 <g_str_equal@plt+0x22077>
   2f2d9:	mov    rbx,QWORD PTR [rax]
   2f2dc:	test   rbx,rbx
   2f2df:	je     2f2d0 <g_str_equal@plt+0x22010>
   2f2e1:	jmp    2f2eb <g_str_equal@plt+0x2202b>
   2f2e3:	nop    DWORD PTR [rax+rax*1+0x0]
   2f2e8:	mov    rbx,rdx
   2f2eb:	mov    rsi,QWORD PTR [rbx]
   2f2ee:	mov    rdi,rbp
   2f2f1:	call   2ed40 <g_str_equal@plt+0x21a80>
   2f2f6:	mov    rdi,QWORD PTR [rbx+0x8]
   2f2fa:	mov    rsi,rax
   2f2fd:	call   30370 <g_str_equal@plt+0x230b0>
   2f302:	test   al,al
   2f304:	je     2f2ab <g_str_equal@plt+0x21feb>
   2f306:	mov    rdx,QWORD PTR [rbx+0x10]
   2f30a:	test   rdx,rdx
   2f30d:	jne    2f2e8 <g_str_equal@plt+0x22028>
   2f30f:	mov    rdi,QWORD PTR [rbx]
   2f312:	call   2ea20 <g_str_equal@plt+0x21760>
   2f317:	and    eax,0x1ff
   2f31c:	jmp    2f32d <g_str_equal@plt+0x2206d>
   2f31e:	xchg   ax,ax
   2f320:	movsxd rdx,eax
   2f323:	mov    rdx,QWORD PTR [r12+rdx*8+0x18]
   2f328:	test   rdx,rdx
   2f32b:	jne    2f2e8 <g_str_equal@plt+0x22028>
   2f32d:	add    eax,0x1
   2f330:	cmp    eax,0x200
   2f335:	jne    2f320 <g_str_equal@plt+0x22060>
   2f337:	pop    rbx
   2f338:	mov    eax,0x1
   2f33d:	pop    rbp
   2f33e:	pop    r12
   2f340:	ret    
   2f341:	call   d42e <g_str_equal@plt+0x16e>
   2f346:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2f350:	push   r13
   2f352:	push   r12
   2f354:	push   rbp
   2f355:	push   rbx
   2f356:	sub    rsp,0x8
   2f35a:	test   rdi,rdi
   2f35d:	je     2f3f1 <g_str_equal@plt+0x22131>
   2f363:	mov    eax,DWORD PTR [rdi]
   2f365:	mov    r13,rdi
   2f368:	lea    edx,[rax-0x1]
   2f36b:	cmp    edx,0x5
   2f36e:	ja     2f410 <g_str_equal@plt+0x22150>
   2f374:	cmp    eax,0x4
   2f377:	mov    eax,0x0
   2f37c:	cmovne r13,rax
   2f380:	lea    rbp,[r13+0x18]
   2f384:	lea    r12,[r13+0x1018]
   2f38b:	nop    DWORD PTR [rax+rax*1+0x0]
   2f390:	mov    rdi,QWORD PTR [rbp+0x0]
   2f394:	test   rdi,rdi
   2f397:	je     2f3d6 <g_str_equal@plt+0x22116>
   2f399:	mov    rbx,QWORD PTR [rdi+0x10]
   2f39d:	mov    rax,QWORD PTR [rdi+0x18]
   2f3a1:	test   rbx,rbx
   2f3a4:	je     2f3ca <g_str_equal@plt+0x2210a>
   2f3a6:	mov    QWORD PTR [rbx+0x18],rax
   2f3aa:	mov    rax,QWORD PTR [rdi+0x18]
   2f3ae:	mov    rdx,QWORD PTR [rdi+0x10]
   2f3b2:	mov    QWORD PTR [rax],rdx
   2f3b5:	call   2ea80 <g_str_equal@plt+0x217c0>
   2f3ba:	mov    rdi,rbx
   2f3bd:	mov    rbx,QWORD PTR [rdi+0x10]
   2f3c1:	mov    rax,QWORD PTR [rdi+0x18]
   2f3c5:	test   rbx,rbx
   2f3c8:	jne    2f3a6 <g_str_equal@plt+0x220e6>
   2f3ca:	mov    QWORD PTR [rax],0x0
   2f3d1:	call   2ea80 <g_str_equal@plt+0x217c0>
   2f3d6:	add    rbp,0x8
   2f3da:	cmp    rbp,r12
   2f3dd:	jne    2f390 <g_str_equal@plt+0x220d0>
   2f3df:	add    rsp,0x8
   2f3e3:	mov    rdi,r13
   2f3e6:	pop    rbx
   2f3e7:	pop    rbp
   2f3e8:	pop    r12
   2f3ea:	pop    r13
   2f3ec:	jmp    d2b0 <g_free@plt>
   2f3f1:	lea    rcx,[rip+0x30a48]        # 5fe40 <_fini@@Base+0xd6ec>
   2f3f8:	lea    rsi,[rip+0x309d9]        # 5fdd8 <_fini@@Base+0xd684>
   2f3ff:	lea    rdi,[rip+0x307fa]        # 5fc00 <_fini@@Base+0xd4ac>
   2f406:	mov    edx,0x1be
   2f40b:	call   c390 <__assert_fail@plt>
   2f410:	call   d42e <g_str_equal@plt+0x16e>
   2f415:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2f41f:	nop
   2f420:	sub    rsp,0x8
   2f424:	mov    edi,0x20
   2f429:	call   c500 <g_malloc@plt>
   2f42e:	lea    rdx,[rax+0x10]
   2f432:	mov    QWORD PTR [rax+0x8],0x1
   2f43a:	mov    DWORD PTR [rax],0x5
   2f440:	mov    QWORD PTR [rax+0x10],0x0
   2f448:	mov    QWORD PTR [rax+0x18],rdx
   2f44c:	add    rsp,0x8
   2f450:	ret    
   2f451:	nop    DWORD PTR [rax+rax*1+0x0]
   2f456:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2f460:	push   r12
   2f462:	push   rbp
   2f463:	push   rbx
   2f464:	mov    rbx,rdi
   2f467:	mov    edi,0x20
   2f46c:	call   c500 <g_malloc@plt>
   2f471:	mov    rbp,QWORD PTR [rbx+0x10]
   2f475:	mov    QWORD PTR [rax+0x8],0x1
   2f47d:	mov    r12,rax
   2f480:	mov    DWORD PTR [rax],0x5
   2f486:	mov    QWORD PTR [rax+0x10],0x0
   2f48e:	add    rax,0x10
   2f492:	mov    QWORD PTR [r12+0x18],rax
   2f497:	test   rbp,rbp
   2f49a:	je     2f4e1 <g_str_equal@plt+0x22221>
   2f49c:	nop    DWORD PTR [rax+0x0]
   2f4a0:	mov    rbx,QWORD PTR [rbp+0x0]
   2f4a4:	test   rbx,rbx
   2f4a7:	je     2f4ae <g_str_equal@plt+0x221ee>
   2f4a9:	add    QWORD PTR [rbx+0x8],0x1
   2f4ae:	mov    edi,0x18
   2f4b3:	call   c500 <g_malloc@plt>
   2f4b8:	mov    rdx,QWORD PTR [r12+0x18]
   2f4bd:	mov    QWORD PTR [rax],rbx
   2f4c0:	mov    QWORD PTR [rax+0x8],0x0
   2f4c8:	mov    QWORD PTR [rax+0x10],rdx
   2f4cc:	mov    QWORD PTR [rdx],rax
   2f4cf:	add    rax,0x8
   2f4d3:	mov    QWORD PTR [r12+0x18],rax
   2f4d8:	mov    rbp,QWORD PTR [rbp+0x8]
   2f4dc:	test   rbp,rbp
   2f4df:	jne    2f4a0 <g_str_equal@plt+0x221e0>
   2f4e1:	mov    rax,r12
   2f4e4:	pop    rbx
   2f4e5:	pop    rbp
   2f4e6:	pop    r12
   2f4e8:	ret    
   2f4e9:	nop    DWORD PTR [rax+0x0]
   2f4f0:	push   rbp
   2f4f1:	push   rbx
   2f4f2:	mov    rbx,rdi
   2f4f5:	mov    edi,0x18
   2f4fa:	mov    rbp,rsi
   2f4fd:	sub    rsp,0x8
   2f501:	call   c500 <g_malloc@plt>
   2f506:	mov    rdx,QWORD PTR [rbx+0x18]
   2f50a:	mov    QWORD PTR [rax],rbp
   2f50d:	mov    QWORD PTR [rax+0x8],0x0
   2f515:	mov    QWORD PTR [rax+0x10],rdx
   2f519:	mov    QWORD PTR [rdx],rax
   2f51c:	add    rax,0x8
   2f520:	mov    QWORD PTR [rbx+0x18],rax
   2f524:	add    rsp,0x8
   2f528:	pop    rbx
   2f529:	pop    rbp
   2f52a:	ret    
   2f52b:	nop    DWORD PTR [rax+rax*1+0x0]
   2f530:	push   rbp
   2f531:	push   rbx
   2f532:	mov    rbx,rdi
   2f535:	mov    rdi,rsi
   2f538:	sub    rsp,0x8
   2f53c:	call   2e110 <g_str_equal@plt+0x20e50>
   2f541:	mov    edi,0x18
   2f546:	mov    rbp,rax
   2f549:	call   c500 <g_malloc@plt>
   2f54e:	mov    rdx,QWORD PTR [rbx+0x18]
   2f552:	mov    QWORD PTR [rax],rbp
   2f555:	mov    QWORD PTR [rax+0x8],0x0
   2f55d:	mov    QWORD PTR [rax+0x10],rdx
   2f561:	mov    QWORD PTR [rdx],rax
   2f564:	add    rax,0x8
   2f568:	mov    QWORD PTR [rbx+0x18],rax
   2f56c:	add    rsp,0x8
   2f570:	pop    rbx
   2f571:	pop    rbp
   2f572:	ret    
   2f573:	nop    DWORD PTR [rax]
   2f576:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2f580:	push   rbp
   2f581:	push   rbx
   2f582:	mov    rbx,rdi
   2f585:	movzx  edi,sil
   2f589:	sub    rsp,0x8
   2f58d:	call   2f920 <g_str_equal@plt+0x22660>
   2f592:	mov    edi,0x18
   2f597:	mov    rbp,rax
   2f59a:	call   c500 <g_malloc@plt>
   2f59f:	mov    rdx,QWORD PTR [rbx+0x18]
   2f5a3:	mov    QWORD PTR [rax],rbp
   2f5a6:	mov    QWORD PTR [rax+0x8],0x0
   2f5ae:	mov    QWORD PTR [rax+0x10],rdx
   2f5b2:	mov    QWORD PTR [rdx],rax
   2f5b5:	add    rax,0x8
   2f5b9:	mov    QWORD PTR [rbx+0x18],rax
   2f5bd:	add    rsp,0x8
   2f5c1:	pop    rbx
   2f5c2:	pop    rbp
   2f5c3:	ret    
   2f5c4:	xchg   ax,ax
   2f5c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2f5d0:	push   rbp
   2f5d1:	push   rbx
   2f5d2:	mov    rbx,rdi
   2f5d5:	mov    rdi,rsi
   2f5d8:	sub    rsp,0x8
   2f5dc:	call   2e7b0 <g_str_equal@plt+0x214f0>
   2f5e1:	mov    edi,0x18
   2f5e6:	mov    rbp,rax
   2f5e9:	call   c500 <g_malloc@plt>
   2f5ee:	mov    rdx,QWORD PTR [rbx+0x18]
   2f5f2:	mov    QWORD PTR [rax],rbp
   2f5f5:	mov    QWORD PTR [rax+0x8],0x0
   2f5fd:	mov    QWORD PTR [rax+0x10],rdx
   2f601:	mov    QWORD PTR [rdx],rax
   2f604:	add    rax,0x8
   2f608:	mov    QWORD PTR [rbx+0x18],rax
   2f60c:	add    rsp,0x8
   2f610:	pop    rbx
   2f611:	pop    rbp
   2f612:	ret    
   2f613:	nop    DWORD PTR [rax]
   2f616:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2f620:	push   rbx
   2f621:	mov    rbx,rdi
   2f624:	mov    edi,0x18
   2f629:	add    QWORD PTR [rip+0x252e27],0x1        # 282458 <g_test_config_vars+0x1098>
   2f631:	call   c500 <g_malloc@plt>
   2f636:	mov    rdx,QWORD PTR [rbx+0x18]
   2f63a:	lea    rcx,[rip+0x252e0f]        # 282450 <g_test_config_vars+0x1090>
   2f641:	mov    QWORD PTR [rax+0x8],0x0
   2f649:	mov    QWORD PTR [rax],rcx
   2f64c:	mov    QWORD PTR [rax+0x10],rdx
   2f650:	mov    QWORD PTR [rdx],rax
   2f653:	add    rax,0x8
   2f657:	mov    QWORD PTR [rbx+0x18],rax
   2f65b:	pop    rbx
   2f65c:	ret    
   2f65d:	nop    DWORD PTR [rax]
   2f660:	push   r12
   2f662:	push   rbp
   2f663:	push   rbx
   2f664:	mov    rbx,QWORD PTR [rdi+0x10]
   2f668:	test   rbx,rbx
   2f66b:	je     2f68a <g_str_equal@plt+0x223ca>
   2f66d:	mov    r12,rsi
   2f670:	mov    rbp,rdx
   2f673:	nop    DWORD PTR [rax+rax*1+0x0]
   2f678:	mov    rdi,QWORD PTR [rbx]
   2f67b:	mov    rsi,rbp
   2f67e:	call   r12
   2f681:	mov    rbx,QWORD PTR [rbx+0x8]
   2f685:	test   rbx,rbx
   2f688:	jne    2f678 <g_str_equal@plt+0x223b8>
   2f68a:	pop    rbx
   2f68b:	pop    rbp
   2f68c:	pop    r12
   2f68e:	ret    
   2f68f:	nop
   2f690:	test   rdi,rdi
   2f693:	push   rbx
   2f694:	je     2f6e0 <g_str_equal@plt+0x22420>
   2f696:	mov    rdx,QWORD PTR [rdi+0x10]
   2f69a:	test   rdx,rdx
   2f69d:	je     2f6e0 <g_str_equal@plt+0x22420>
   2f69f:	mov    rax,QWORD PTR [rdx+0x8]
   2f6a3:	mov    rcx,QWORD PTR [rdx+0x10]
   2f6a7:	test   rax,rax
   2f6aa:	je     2f6d8 <g_str_equal@plt+0x22418>
   2f6ac:	mov    QWORD PTR [rax+0x10],rcx
   2f6b0:	mov    rax,QWORD PTR [rdx+0x10]
   2f6b4:	mov    rcx,QWORD PTR [rdx+0x8]
   2f6b8:	mov    rdi,rdx
   2f6bb:	mov    QWORD PTR [rax],rcx
   2f6be:	mov    QWORD PTR [rdx+0x10],0x0
   2f6c6:	mov    rbx,QWORD PTR [rdx]
   2f6c9:	call   d2b0 <g_free@plt>
   2f6ce:	mov    rax,rbx
   2f6d1:	pop    rbx
   2f6d2:	ret    
   2f6d3:	nop    DWORD PTR [rax+rax*1+0x0]
   2f6d8:	mov    QWORD PTR [rdi+0x18],rcx
   2f6dc:	jmp    2f6b0 <g_str_equal@plt+0x223f0>
   2f6de:	xchg   ax,ax
   2f6e0:	xor    ebx,ebx
   2f6e2:	jmp    2f6ce <g_str_equal@plt+0x2240e>
   2f6e4:	xchg   ax,ax
   2f6e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2f6f0:	test   rdi,rdi
   2f6f3:	je     2f708 <g_str_equal@plt+0x22448>
   2f6f5:	mov    rax,QWORD PTR [rdi+0x10]
   2f6f9:	test   rax,rax
   2f6fc:	je     2f708 <g_str_equal@plt+0x22448>
   2f6fe:	mov    rax,QWORD PTR [rax]
   2f701:	ret    
   2f702:	nop    WORD PTR [rax+rax*1+0x0]
   2f708:	xor    eax,eax
   2f70a:	ret    
   2f70b:	nop    DWORD PTR [rax+rax*1+0x0]
   2f710:	xor    eax,eax
   2f712:	cmp    QWORD PTR [rdi+0x10],0x0
   2f717:	sete   al
   2f71a:	ret    
   2f71b:	nop    DWORD PTR [rax+rax*1+0x0]
   2f720:	mov    rdx,QWORD PTR [rdi+0x10]
   2f724:	xor    eax,eax
   2f726:	test   rdx,rdx
   2f729:	je     2f740 <g_str_equal@plt+0x22480>
   2f72b:	nop    DWORD PTR [rax+rax*1+0x0]
   2f730:	mov    rdx,QWORD PTR [rdx+0x8]
   2f734:	add    rax,0x1
   2f738:	test   rdx,rdx
   2f73b:	jne    2f730 <g_str_equal@plt+0x22470>
   2f73d:	repz ret 
   2f73f:	nop
   2f740:	repz ret 
   2f742:	nop    DWORD PTR [rax+0x0]
   2f746:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2f750:	push   rbp
   2f751:	push   rbx
   2f752:	sub    rsp,0x8
   2f756:	test   rdi,rdi
   2f759:	je     2f775 <g_str_equal@plt+0x224b5>
   2f75b:	mov    eax,DWORD PTR [rdi]
   2f75d:	lea    edx,[rax-0x1]
   2f760:	cmp    edx,0x5
   2f763:	ja     2f7f5 <g_str_equal@plt+0x22535>
   2f769:	cmp    eax,0x5
   2f76c:	mov    eax,0x0
   2f771:	cmovne rdi,rax
   2f775:	test   rsi,rsi
   2f778:	je     2f789 <g_str_equal@plt+0x224c9>
   2f77a:	mov    eax,DWORD PTR [rsi]
   2f77c:	lea    edx,[rax-0x1]
   2f77f:	cmp    edx,0x5
   2f782:	ja     2f7f5 <g_str_equal@plt+0x22535>
   2f784:	cmp    eax,0x5
   2f787:	je     2f798 <g_str_equal@plt+0x224d8>
   2f789:	mov    rax,QWORD PTR ds:0x10
   2f791:	ud2    
   2f793:	nop    DWORD PTR [rax+rax*1+0x0]
   2f798:	mov    rbx,QWORD PTR [rdi+0x10]
   2f79c:	mov    rbp,QWORD PTR [rsi+0x10]
   2f7a0:	test   rbx,rbx
   2f7a3:	je     2f7e0 <g_str_equal@plt+0x22520>
   2f7a5:	test   rbp,rbp
   2f7a8:	jne    2f7c8 <g_str_equal@plt+0x22508>
   2f7aa:	jmp    2f7e0 <g_str_equal@plt+0x22520>
   2f7ac:	nop    DWORD PTR [rax+0x0]
   2f7b0:	mov    rbx,QWORD PTR [rbx+0x8]
   2f7b4:	mov    rbp,QWORD PTR [rbp+0x8]
   2f7b8:	test   rbx,rbx
   2f7bb:	setne  dl
   2f7be:	test   rbp,rbp
   2f7c1:	setne  al
   2f7c4:	test   dl,al
   2f7c6:	je     2f7e0 <g_str_equal@plt+0x22520>
   2f7c8:	mov    rsi,QWORD PTR [rbp+0x0]
   2f7cc:	mov    rdi,QWORD PTR [rbx]
   2f7cf:	call   30370 <g_str_equal@plt+0x230b0>
   2f7d4:	test   al,al
   2f7d6:	jne    2f7b0 <g_str_equal@plt+0x224f0>
   2f7d8:	add    rsp,0x8
   2f7dc:	pop    rbx
   2f7dd:	pop    rbp
   2f7de:	ret    
   2f7df:	nop
   2f7e0:	test   rbx,rbx
   2f7e3:	sete   al
   2f7e6:	test   rbp,rbp
   2f7e9:	sete   dl
   2f7ec:	add    rsp,0x8
   2f7f0:	and    eax,edx
   2f7f2:	pop    rbx
   2f7f3:	pop    rbp
   2f7f4:	ret    
   2f7f5:	call   d474 <g_str_equal@plt+0x1b4>
   2f7fa:	nop    WORD PTR [rax+rax*1+0x0]
   2f800:	test   rdi,rdi
   2f803:	push   r12
   2f805:	push   rbp
   2f806:	push   rbx
   2f807:	je     2f8fe <g_str_equal@plt+0x2263e>
   2f80d:	mov    eax,DWORD PTR [rdi]
   2f80f:	mov    r12,rdi
   2f812:	lea    edx,[rax-0x1]
   2f815:	cmp    edx,0x5
   2f818:	ja     2f8f9 <g_str_equal@plt+0x22639>
   2f81e:	cmp    eax,0x5
   2f821:	je     2f830 <g_str_equal@plt+0x22570>
   2f823:	mov    rax,QWORD PTR ds:0x10
   2f82b:	ud2    
   2f82d:	nop    DWORD PTR [rax]
   2f830:	mov    rbx,QWORD PTR [rdi+0x10]
   2f834:	test   rbx,rbx
   2f837:	jne    2f88a <g_str_equal@plt+0x225ca>
   2f839:	jmp    2f8bf <g_str_equal@plt+0x225ff>
   2f83e:	xchg   ax,ax
   2f840:	mov    QWORD PTR [rbp+0x10],rax
   2f844:	mov    rax,QWORD PTR [rbx+0x10]
   2f848:	mov    rdx,QWORD PTR [rbx+0x8]
   2f84c:	mov    QWORD PTR [rax],rdx
   2f84f:	mov    rdi,QWORD PTR [rbx]
   2f852:	mov    QWORD PTR [rbx+0x10],0x0
   2f85a:	test   rdi,rdi
   2f85d:	je     2f8d0 <g_str_equal@plt+0x22610>
   2f85f:	mov    rax,QWORD PTR [rdi+0x8]
   2f863:	test   rax,rax
   2f866:	je     2f8da <g_str_equal@plt+0x2261a>
   2f868:	sub    rax,0x1
   2f86c:	test   rax,rax
   2f86f:	mov    QWORD PTR [rdi+0x8],rax
   2f873:	jne    2f87a <g_str_equal@plt+0x225ba>
   2f875:	call   30300 <g_str_equal@plt+0x23040>
   2f87a:	mov    rdi,rbx
   2f87d:	call   d2b0 <g_free@plt>
   2f882:	test   rbp,rbp
   2f885:	je     2f8bf <g_str_equal@plt+0x225ff>
   2f887:	mov    rbx,rbp
   2f88a:	mov    rbp,QWORD PTR [rbx+0x8]
   2f88e:	mov    rax,QWORD PTR [rbx+0x10]
   2f892:	test   rbp,rbp
   2f895:	jne    2f840 <g_str_equal@plt+0x22580>
   2f897:	mov    QWORD PTR [r12+0x18],rax
   2f89c:	mov    rax,QWORD PTR [rbx+0x10]
   2f8a0:	mov    rdx,QWORD PTR [rbx+0x8]
   2f8a4:	mov    QWORD PTR [rax],rdx
   2f8a7:	mov    rdi,QWORD PTR [rbx]
   2f8aa:	mov    QWORD PTR [rbx+0x10],0x0
   2f8b2:	test   rdi,rdi
   2f8b5:	jne    2f85f <g_str_equal@plt+0x2259f>
   2f8b7:	mov    rdi,rbx
   2f8ba:	call   d2b0 <g_free@plt>
   2f8bf:	pop    rbx
   2f8c0:	mov    rdi,r12
   2f8c3:	pop    rbp
   2f8c4:	pop    r12
   2f8c6:	jmp    d2b0 <g_free@plt>
   2f8cb:	nop    DWORD PTR [rax+rax*1+0x0]
   2f8d0:	mov    rdi,rbx
   2f8d3:	call   d2b0 <g_free@plt>
   2f8d8:	jmp    2f887 <g_str_equal@plt+0x225c7>
   2f8da:	lea    rcx,[rip+0x305ff]        # 5fee0 <_fini@@Base+0xd78c>
   2f8e1:	lea    rsi,[rip+0x2ddb0]        # 5d698 <_fini@@Base+0xaf44>
   2f8e8:	lea    rdi,[rip+0x2dc00]        # 5d4ef <_fini@@Base+0xad9b>
   2f8ef:	mov    edx,0x62
   2f8f4:	call   c390 <__assert_fail@plt>
   2f8f9:	call   d474 <g_str_equal@plt+0x1b4>
   2f8fe:	lea    rcx,[rip+0x305fb]        # 5ff00 <_fini@@Base+0xd7ac>
   2f905:	lea    rsi,[rip+0x3058c]        # 5fe98 <_fini@@Base+0xd744>
   2f90c:	lea    rdi,[rip+0x302ed]        # 5fc00 <_fini@@Base+0xd4ac>
   2f913:	mov    edx,0xc2
   2f918:	call   c390 <__assert_fail@plt>
   2f91d:	nop    DWORD PTR [rax]
   2f920:	push   rbx
   2f921:	mov    ebx,edi
   2f923:	mov    edi,0x18
   2f928:	call   c500 <g_malloc@plt>
   2f92d:	mov    QWORD PTR [rax+0x8],0x1
   2f935:	mov    DWORD PTR [rax],0x6
   2f93b:	mov    BYTE PTR [rax+0x10],bl
   2f93e:	pop    rbx
   2f93f:	ret    
   2f940:	movzx  eax,BYTE PTR [rdi+0x10]
   2f944:	ret    
   2f945:	nop
   2f946:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2f950:	test   rdi,rdi
   2f953:	je     2f964 <g_str_equal@plt+0x226a4>
   2f955:	mov    eax,DWORD PTR [rdi]
   2f957:	lea    edx,[rax-0x1]
   2f95a:	cmp    edx,0x5
   2f95d:	ja     2f99f <g_str_equal@plt+0x226df>
   2f95f:	cmp    eax,0x6
   2f962:	je     2f970 <g_str_equal@plt+0x226b0>
   2f964:	movzx  eax,BYTE PTR ds:0x10
   2f96c:	ud2    
   2f96e:	xchg   ax,ax
   2f970:	test   rsi,rsi
   2f973:	movzx  edx,BYTE PTR [rdi+0x10]
   2f977:	je     2f988 <g_str_equal@plt+0x226c8>
   2f979:	mov    eax,DWORD PTR [rsi]
   2f97b:	lea    ecx,[rax-0x1]
   2f97e:	cmp    ecx,0x5
   2f981:	ja     2f99f <g_str_equal@plt+0x226df>
   2f983:	cmp    eax,0x6
   2f986:	je     2f998 <g_str_equal@plt+0x226d8>
   2f988:	movzx  eax,BYTE PTR ds:0x10
   2f990:	ud2    
   2f992:	nop    WORD PTR [rax+rax*1+0x0]
   2f998:	cmp    BYTE PTR [rsi+0x10],dl
   2f99b:	sete   al
   2f99e:	ret    
   2f99f:	sub    rsp,0x8
   2f9a3:	call   d497 <g_str_equal@plt+0x1d7>
   2f9a8:	nop    DWORD PTR [rax+rax*1+0x0]
   2f9b0:	sub    rsp,0x8
   2f9b4:	test   rdi,rdi
   2f9b7:	je     2f9d8 <g_str_equal@plt+0x22718>
   2f9b9:	mov    eax,DWORD PTR [rdi]
   2f9bb:	lea    edx,[rax-0x1]
   2f9be:	cmp    edx,0x5
   2f9c1:	ja     2f9f7 <g_str_equal@plt+0x22737>
   2f9c3:	cmp    eax,0x6
   2f9c6:	mov    eax,0x0
   2f9cb:	cmovne rdi,rax
   2f9cf:	add    rsp,0x8
   2f9d3:	jmp    d2b0 <g_free@plt>
   2f9d8:	lea    rcx,[rip+0x30591]        # 5ff70 <_fini@@Base+0xd81c>
   2f9df:	lea    rsi,[rip+0x30542]        # 5ff28 <_fini@@Base+0xd7d4>
   2f9e6:	lea    rdi,[rip+0x30213]        # 5fc00 <_fini@@Base+0xd4ac>
   2f9ed:	mov    edx,0x38
   2f9f2:	call   c390 <__assert_fail@plt>
   2f9f7:	call   d497 <g_str_equal@plt+0x1d7>
   2f9fc:	nop    DWORD PTR [rax+0x0]
   2fa00:	push   rbx
   2fa01:	mov    rbx,rdi
   2fa04:	mov    rdi,rsi
   2fa07:	mov    rsi,QWORD PTR [rbx+0x40]
   2fa0b:	lea    rdx,[rbx+0x50]
   2fa0f:	call   31530 <g_str_equal@plt+0x24270>
   2fa14:	mov    QWORD PTR [rbx+0x48],rax
   2fa18:	pop    rbx
   2fa19:	ret    
   2fa1a:	nop    WORD PTR [rax+rax*1+0x0]
   2fa20:	push   r13
   2fa22:	push   r12
   2fa24:	mov    r13d,edx
   2fa27:	push   rbp
   2fa28:	push   rbx
   2fa29:	sub    rsp,0x48
   2fa2d:	mov    rax,QWORD PTR fs:0x28
   2fa36:	mov    QWORD PTR [rsp+0x38],rax
   2fa3b:	xor    eax,eax
   2fa3d:	mov    eax,DWORD PTR [rdi]
   2fa3f:	lea    edx,[rax-0x1]
   2fa42:	cmp    edx,0x5
   2fa45:	ja     2fe5b <g_str_equal@plt+0x22b9b>
   2fa4b:	cmp    eax,0x6
   2fa4e:	mov    rbx,rsi
   2fa51:	ja     2faf0 <g_str_equal@plt+0x22830>
   2fa57:	lea    rdx,[rip+0x305b2]        # 60010 <_fini@@Base+0xd8bc>
   2fa5e:	mov    rbp,rdi
   2fa61:	mov    r12d,ecx
   2fa64:	movsxd rax,DWORD PTR [rdx+rax*4]
   2fa68:	add    rax,rdx
   2fa6b:	jmp    rax
   2fa6d:	nop    DWORD PTR [rax]
   2fa70:	lea    eax,[rcx+0x1]
   2fa73:	mov    QWORD PTR [rsp+0x10],rsi
   2fa78:	lea    rsi,[rip+0x3057d]        # 5fffc <_fini@@Base+0xd8a8>
   2fa7f:	mov    rdi,rbx
   2fa82:	mov    DWORD PTR [rsp+0x8],0x0
   2fa8a:	mov    DWORD PTR [rsp+0x4],r13d
   2fa8f:	mov    DWORD PTR [rsp],eax
   2fa92:	call   2e7e0 <g_str_equal@plt+0x21520>
   2fa97:	lea    rsi,[rip+0x3c2]        # 2fe60 <g_str_equal@plt+0x22ba0>
   2fa9e:	mov    rdx,rsp
   2faa1:	mov    rdi,rbp
   2faa4:	call   2f660 <g_str_equal@plt+0x223a0>
   2faa9:	test   r13d,r13d
   2faac:	jne    2fd60 <g_str_equal@plt+0x22aa0>
   2fab2:	lea    rsi,[rip+0x3252f]        # 61fe8 <_fini@@Base+0xf894>
   2fab9:	mov    rdi,rbx
   2fabc:	call   2e7e0 <g_str_equal@plt+0x21520>
   2fac1:	nop    DWORD PTR [rax+0x0]
   2fac8:	mov    rax,QWORD PTR [rsp+0x38]
   2facd:	xor    rax,QWORD PTR fs:0x28
   2fad6:	jne    2fe56 <g_str_equal@plt+0x22b96>
   2fadc:	add    rsp,0x48
   2fae0:	pop    rbx
   2fae1:	pop    rbp
   2fae2:	pop    r12
   2fae4:	pop    r13
   2fae6:	ret    
   2fae7:	nop    WORD PTR [rax+rax*1+0x0]
   2faf0:	lea    rsi,[rip+0x2afb0]        # 5aaa7 <_fini@@Base+0x8353>
   2faf7:	mov    rdi,rbx
   2fafa:	call   2e7e0 <g_str_equal@plt+0x21520>
   2faff:	jmp    2fac8 <g_str_equal@plt+0x22808>
   2fb01:	nop    DWORD PTR [rax+0x0]
   2fb08:	call   2e8e0 <g_str_equal@plt+0x21620>
   2fb0d:	lea    rsi,[rip+0x324fd]        # 62011 <_fini@@Base+0xf8bd>
   2fb14:	mov    r13,rax
   2fb17:	mov    rdi,rbx
   2fb1a:	call   2e7e0 <g_str_equal@plt+0x21520>
   2fb1f:	cmp    BYTE PTR [r13+0x0],0x0
   2fb24:	je     2fbf0 <g_str_equal@plt+0x22930>
   2fb2a:	mov    rbp,rsp
   2fb2d:	lea    r12,[rsp+0x20]
   2fb32:	jmp    2fb9b <g_str_equal@plt+0x228db>
   2fb34:	nop    DWORD PTR [rax+0x0]
   2fb38:	cmp    eax,0x9
   2fb3b:	je     2fd00 <g_str_equal@plt+0x22a40>
   2fb41:	cmp    eax,0xa
   2fb44:	je     2fce8 <g_str_equal@plt+0x22a28>
   2fb4a:	cmp    eax,0x8
   2fb4d:	je     2fcd0 <g_str_equal@plt+0x22a10>
   2fb53:	test   eax,eax
   2fb55:	js     2fde0 <g_str_equal@plt+0x22b20>
   2fb5b:	cmp    eax,0xffff
   2fb60:	jg     2fe10 <g_str_equal@plt+0x22b50>
   2fb66:	lea    edx,[rax-0x20]
   2fb69:	cmp    edx,0x5e
   2fb6c:	ja     2fde5 <g_str_equal@plt+0x22b25>
   2fb72:	mov    BYTE PTR [rsp+0x20],al
   2fb76:	mov    BYTE PTR [rsp+0x21],0x0
   2fb7b:	mov    rsi,r12
   2fb7e:	mov    rdi,rbx
   2fb81:	call   2e7e0 <g_str_equal@plt+0x21520>
   2fb86:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2fb90:	mov    r13,QWORD PTR [rsp]
   2fb94:	cmp    BYTE PTR [r13+0x0],0x0
   2fb99:	je     2fbf0 <g_str_equal@plt+0x22930>
   2fb9b:	mov    rdx,rbp
   2fb9e:	mov    esi,0x6
   2fba3:	mov    rdi,r13
   2fba6:	call   337f0 <g_str_equal@plt+0x26530>
   2fbab:	cmp    eax,0xc
   2fbae:	je     2fcb8 <g_str_equal@plt+0x229f8>
   2fbb4:	jle    2fb38 <g_str_equal@plt+0x22878>
   2fbb6:	cmp    eax,0x22
   2fbb9:	je     2fd30 <g_str_equal@plt+0x22a70>
   2fbbf:	cmp    eax,0x5c
   2fbc2:	je     2fd18 <g_str_equal@plt+0x22a58>
   2fbc8:	cmp    eax,0xd
   2fbcb:	jne    2fb53 <g_str_equal@plt+0x22893>
   2fbcd:	lea    rsi,[rip+0x3040c]        # 5ffe0 <_fini@@Base+0xd88c>
   2fbd4:	mov    rdi,rbx
   2fbd7:	call   2e7e0 <g_str_equal@plt+0x21520>
   2fbdc:	mov    r13,QWORD PTR [rsp]
   2fbe0:	cmp    BYTE PTR [r13+0x0],0x0
   2fbe5:	jne    2fb9b <g_str_equal@plt+0x228db>
   2fbe7:	nop    WORD PTR [rax+rax*1+0x0]
   2fbf0:	lea    rsi,[rip+0x3241a]        # 62011 <_fini@@Base+0xf8bd>
   2fbf7:	mov    rdi,rbx
   2fbfa:	call   2e7e0 <g_str_equal@plt+0x21520>
   2fbff:	jmp    2fac8 <g_str_equal@plt+0x22808>
   2fc04:	nop    DWORD PTR [rax+0x0]
   2fc08:	call   2e3b0 <g_str_equal@plt+0x210f0>
   2fc0d:	mov    rdi,rbx
   2fc10:	mov    rbp,rax
   2fc13:	mov    rsi,rax
   2fc16:	call   2e7e0 <g_str_equal@plt+0x21520>
   2fc1b:	mov    rdi,rbp
   2fc1e:	call   d2b0 <g_free@plt>
   2fc23:	jmp    2fac8 <g_str_equal@plt+0x22808>
   2fc28:	nop    DWORD PTR [rax+rax*1+0x0]
   2fc30:	lea    eax,[rcx+0x1]
   2fc33:	mov    QWORD PTR [rsp+0x10],rsi
   2fc38:	lea    rsi,[rip+0x303b4]        # 5fff3 <_fini@@Base+0xd89f>
   2fc3f:	mov    rdi,rbx
   2fc42:	mov    DWORD PTR [rsp+0x8],0x0
   2fc4a:	mov    DWORD PTR [rsp+0x4],r13d
   2fc4f:	mov    DWORD PTR [rsp],eax
   2fc52:	call   2e7e0 <g_str_equal@plt+0x21520>
   2fc57:	lea    rsi,[rip+0x2a2]        # 2ff00 <g_str_equal@plt+0x22c40>
   2fc5e:	mov    rdx,rsp
   2fc61:	mov    rdi,rbp
   2fc64:	call   2f050 <g_str_equal@plt+0x21d90>
   2fc69:	test   r13d,r13d
   2fc6c:	jne    2fda0 <g_str_equal@plt+0x22ae0>
   2fc72:	lea    rsi,[rip+0x30381]        # 5fffa <_fini@@Base+0xd8a6>
   2fc79:	mov    rdi,rbx
   2fc7c:	call   2e7e0 <g_str_equal@plt+0x21520>
   2fc81:	jmp    2fac8 <g_str_equal@plt+0x22808>
   2fc86:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2fc90:	call   2f940 <g_str_equal@plt+0x22680>
   2fc95:	test   al,al
   2fc97:	je     2fd48 <g_str_equal@plt+0x22a88>
   2fc9d:	lea    rsi,[rip+0x2f623]        # 5f2c7 <_fini@@Base+0xcb73>
   2fca4:	mov    rdi,rbx
   2fca7:	call   2e7e0 <g_str_equal@plt+0x21520>
   2fcac:	jmp    2fac8 <g_str_equal@plt+0x22808>
   2fcb1:	nop    DWORD PTR [rax+0x0]
   2fcb8:	lea    rsi,[rip+0x3031b]        # 5ffda <_fini@@Base+0xd886>
   2fcbf:	mov    rdi,rbx
   2fcc2:	call   2e7e0 <g_str_equal@plt+0x21520>
   2fcc7:	jmp    2fb90 <g_str_equal@plt+0x228d0>
   2fccc:	nop    DWORD PTR [rax+0x0]
   2fcd0:	lea    rsi,[rip+0x30300]        # 5ffd7 <_fini@@Base+0xd883>
   2fcd7:	mov    rdi,rbx
   2fcda:	call   2e7e0 <g_str_equal@plt+0x21520>
   2fcdf:	jmp    2fb90 <g_str_equal@plt+0x228d0>
   2fce4:	nop    DWORD PTR [rax+0x0]
   2fce8:	lea    rsi,[rip+0x302ee]        # 5ffdd <_fini@@Base+0xd889>
   2fcef:	mov    rdi,rbx
   2fcf2:	call   2e7e0 <g_str_equal@plt+0x21520>
   2fcf7:	jmp    2fb90 <g_str_equal@plt+0x228d0>
   2fcfc:	nop    DWORD PTR [rax+0x0]
   2fd00:	lea    rsi,[rip+0x302dc]        # 5ffe3 <_fini@@Base+0xd88f>
   2fd07:	mov    rdi,rbx
   2fd0a:	call   2e7e0 <g_str_equal@plt+0x21520>
   2fd0f:	jmp    2fb90 <g_str_equal@plt+0x228d0>
   2fd14:	nop    DWORD PTR [rax+0x0]
   2fd18:	lea    rsi,[rip+0x302b5]        # 5ffd4 <_fini@@Base+0xd880>
   2fd1f:	mov    rdi,rbx
   2fd22:	call   2e7e0 <g_str_equal@plt+0x21520>
   2fd27:	jmp    2fb90 <g_str_equal@plt+0x228d0>
   2fd2c:	nop    DWORD PTR [rax+0x0]
   2fd30:	lea    rsi,[rip+0x3029a]        # 5ffd1 <_fini@@Base+0xd87d>
   2fd37:	mov    rdi,rbx
   2fd3a:	call   2e7e0 <g_str_equal@plt+0x21520>
   2fd3f:	jmp    2fb90 <g_str_equal@plt+0x228d0>
   2fd44:	nop    DWORD PTR [rax+0x0]
   2fd48:	lea    rsi,[rip+0x2d7d2]        # 5d521 <_fini@@Base+0xadcd>
   2fd4f:	mov    rdi,rbx
   2fd52:	call   2e7e0 <g_str_equal@plt+0x21520>
   2fd57:	jmp    2fac8 <g_str_equal@plt+0x22808>
   2fd5c:	nop    DWORD PTR [rax+0x0]
   2fd60:	lea    rsi,[rip+0x32270]        # 61fd7 <_fini@@Base+0xf883>
   2fd67:	mov    rdi,rbx
   2fd6a:	call   2e7e0 <g_str_equal@plt+0x21520>
   2fd6f:	test   r12d,r12d
   2fd72:	jle    2fab2 <g_str_equal@plt+0x227f2>
   2fd78:	lea    r13,[rip+0x30276]        # 5fff5 <_fini@@Base+0xd8a1>
   2fd7f:	xor    ebp,ebp
   2fd81:	nop    DWORD PTR [rax+0x0]
   2fd88:	mov    rsi,r13
   2fd8b:	mov    rdi,rbx
   2fd8e:	add    ebp,0x1
   2fd91:	call   2e7e0 <g_str_equal@plt+0x21520>
   2fd96:	cmp    r12d,ebp
   2fd99:	jne    2fd88 <g_str_equal@plt+0x22ac8>
   2fd9b:	jmp    2fab2 <g_str_equal@plt+0x227f2>
   2fda0:	lea    rsi,[rip+0x32230]        # 61fd7 <_fini@@Base+0xf883>
   2fda7:	mov    rdi,rbx
   2fdaa:	call   2e7e0 <g_str_equal@plt+0x21520>
   2fdaf:	test   r12d,r12d
   2fdb2:	jle    2fc72 <g_str_equal@plt+0x229b2>
   2fdb8:	lea    r13,[rip+0x30236]        # 5fff5 <_fini@@Base+0xd8a1>
   2fdbf:	xor    ebp,ebp
   2fdc1:	nop    DWORD PTR [rax+0x0]
   2fdc8:	mov    rsi,r13
   2fdcb:	mov    rdi,rbx
   2fdce:	add    ebp,0x1
   2fdd1:	call   2e7e0 <g_str_equal@plt+0x21520>
   2fdd6:	cmp    r12d,ebp
   2fdd9:	jne    2fdc8 <g_str_equal@plt+0x22b08>
   2fddb:	jmp    2fc72 <g_str_equal@plt+0x229b2>
   2fde0:	mov    eax,0xfffd
   2fde5:	lea    r8,[rip+0x30200]        # 5ffec <_fini@@Base+0xd898>
   2fdec:	mov    r9d,eax
   2fdef:	mov    ecx,0x10
   2fdf4:	mov    edx,0x1
   2fdf9:	mov    esi,0x10
   2fdfe:	mov    rdi,r12
   2fe01:	xor    eax,eax
   2fe03:	call   cfe0 <__snprintf_chk@plt>
   2fe08:	jmp    2fb7b <g_str_equal@plt+0x228bb>
   2fe0d:	nop    DWORD PTR [rax]
   2fe10:	lea    edx,[rax-0x10000]
   2fe16:	and    eax,0x3ff
   2fe1b:	sub    rsp,0x8
   2fe1f:	add    eax,0xdc00
   2fe24:	lea    r8,[rip+0x301bb]        # 5ffe6 <_fini@@Base+0xd892>
   2fe2b:	mov    ecx,0x10
   2fe30:	sar    edx,0xa
   2fe33:	push   rax
   2fe34:	mov    esi,0x10
   2fe39:	lea    r9d,[rdx+0xd800]
   2fe40:	mov    rdi,r12
   2fe43:	mov    edx,0x1
   2fe48:	xor    eax,eax
   2fe4a:	call   cfe0 <__snprintf_chk@plt>
   2fe4f:	pop    rax
   2fe50:	pop    rdx
   2fe51:	jmp    2fb7b <g_str_equal@plt+0x228bb>
   2fe56:	call   cd30 <__stack_chk_fail@plt>
   2fe5b:	call   d4ba <g_str_equal@plt+0x1fa>
   2fe60:	push   r13
   2fe62:	push   r12
   2fe64:	mov    r12,rdi
   2fe67:	push   rbp
   2fe68:	push   rbx
   2fe69:	mov    rbx,rsi
   2fe6c:	sub    rsp,0x8
   2fe70:	mov    eax,DWORD PTR [rsi+0x8]
   2fe73:	mov    edx,DWORD PTR [rsi+0x4]
   2fe76:	test   eax,eax
   2fe78:	je     2fe9a <g_str_equal@plt+0x22bda>
   2fe7a:	lea    rax,[rip+0x3017d]        # 5fffe <_fini@@Base+0xd8aa>
   2fe81:	lea    rsi,[rip+0x33466]        # 632ee <_fini@@Base+0x10b9a>
   2fe88:	mov    rdi,QWORD PTR [rbx+0x10]
   2fe8c:	test   edx,edx
   2fe8e:	cmove  rsi,rax
   2fe92:	call   2e7e0 <g_str_equal@plt+0x21520>
   2fe97:	mov    edx,DWORD PTR [rbx+0x4]
   2fe9a:	test   edx,edx
   2fe9c:	mov    rdi,QWORD PTR [rbx+0x10]
   2fea0:	jne    2fec0 <g_str_equal@plt+0x22c00>
   2fea2:	mov    ecx,DWORD PTR [rbx]
   2fea4:	mov    rsi,rdi
   2fea7:	mov    rdi,r12
   2feaa:	call   2fa20 <g_str_equal@plt+0x22760>
   2feaf:	add    DWORD PTR [rbx+0x8],0x1
   2feb3:	add    rsp,0x8
   2feb7:	pop    rbx
   2feb8:	pop    rbp
   2feb9:	pop    r12
   2febb:	pop    r13
   2febd:	ret    
   2febe:	xchg   ax,ax
   2fec0:	lea    rsi,[rip+0x32110]        # 61fd7 <_fini@@Base+0xf883>
   2fec7:	xor    ebp,ebp
   2fec9:	lea    r13,[rip+0x30125]        # 5fff5 <_fini@@Base+0xd8a1>
   2fed0:	call   2e7e0 <g_str_equal@plt+0x21520>
   2fed5:	mov    ecx,DWORD PTR [rbx]
   2fed7:	test   ecx,ecx
   2fed9:	jle    2fef5 <g_str_equal@plt+0x22c35>
   2fedb:	nop    DWORD PTR [rax+rax*1+0x0]
   2fee0:	mov    rdi,QWORD PTR [rbx+0x10]
   2fee4:	mov    rsi,r13
   2fee7:	add    ebp,0x1
   2feea:	call   2e7e0 <g_str_equal@plt+0x21520>
   2feef:	mov    ecx,DWORD PTR [rbx]
   2fef1:	cmp    ecx,ebp
   2fef3:	jg     2fee0 <g_str_equal@plt+0x22c20>
   2fef5:	mov    edx,DWORD PTR [rbx+0x4]
   2fef8:	mov    rdi,QWORD PTR [rbx+0x10]
   2fefc:	jmp    2fea4 <g_str_equal@plt+0x22be4>
   2fefe:	xchg   ax,ax
   2ff00:	push   r14
   2ff02:	push   r13
   2ff04:	mov    r14,rdi
   2ff07:	push   r12
   2ff09:	push   rbp
   2ff0a:	mov    r12,rsi
   2ff0d:	push   rbx
   2ff0e:	mov    rbx,rdx
   2ff11:	mov    eax,DWORD PTR [rdx+0x4]
   2ff14:	mov    edx,DWORD PTR [rdx+0x8]
   2ff17:	test   edx,edx
   2ff19:	je     2ff3b <g_str_equal@plt+0x22c7b>
   2ff1b:	test   eax,eax
   2ff1d:	lea    rsi,[rip+0x333ca]        # 632ee <_fini@@Base+0x10b9a>
   2ff24:	lea    rax,[rip+0x300d3]        # 5fffe <_fini@@Base+0xd8aa>
   2ff2b:	mov    rdi,QWORD PTR [rbx+0x10]
   2ff2f:	cmove  rsi,rax
   2ff33:	call   2e7e0 <g_str_equal@plt+0x21520>
   2ff38:	mov    eax,DWORD PTR [rbx+0x4]
   2ff3b:	test   eax,eax
   2ff3d:	jne    2ffd0 <g_str_equal@plt+0x22d10>
   2ff43:	mov    rdi,r14
   2ff46:	call   2e7b0 <g_str_equal@plt+0x214f0>
   2ff4b:	test   rax,rax
   2ff4e:	mov    rbp,rax
   2ff51:	mov    ecx,DWORD PTR [rbx]
   2ff53:	mov    edx,DWORD PTR [rbx+0x4]
   2ff56:	mov    rsi,QWORD PTR [rbx+0x10]
   2ff5a:	je     2ffc0 <g_str_equal@plt+0x22d00>
   2ff5c:	mov    rdi,rax
   2ff5f:	call   2fa20 <g_str_equal@plt+0x22760>
   2ff64:	mov    rax,QWORD PTR [rbp+0x8]
   2ff68:	test   rax,rax
   2ff6b:	je     30010 <g_str_equal@plt+0x22d50>
   2ff71:	sub    rax,0x1
   2ff75:	test   rax,rax
   2ff78:	mov    QWORD PTR [rbp+0x8],rax
   2ff7c:	je     2ffb0 <g_str_equal@plt+0x22cf0>
   2ff7e:	mov    rdi,QWORD PTR [rbx+0x10]
   2ff82:	lea    rsi,[rip+0x31ccd]        # 61c56 <_fini@@Base+0xf502>
   2ff89:	call   2e7e0 <g_str_equal@plt+0x21520>
   2ff8e:	mov    edx,DWORD PTR [rbx+0x4]
   2ff91:	mov    rsi,QWORD PTR [rbx+0x10]
   2ff95:	mov    rdi,r12
   2ff98:	mov    ecx,DWORD PTR [rbx]
   2ff9a:	call   2fa20 <g_str_equal@plt+0x22760>
   2ff9f:	add    DWORD PTR [rbx+0x8],0x1
   2ffa3:	pop    rbx
   2ffa4:	pop    rbp
   2ffa5:	pop    r12
   2ffa7:	pop    r13
   2ffa9:	pop    r14
   2ffab:	ret    
   2ffac:	nop    DWORD PTR [rax+0x0]
   2ffb0:	mov    rdi,rbp
   2ffb3:	call   30300 <g_str_equal@plt+0x23040>
   2ffb8:	jmp    2ff7e <g_str_equal@plt+0x22cbe>
   2ffba:	nop    WORD PTR [rax+rax*1+0x0]
   2ffc0:	xor    edi,edi
   2ffc2:	call   2fa20 <g_str_equal@plt+0x22760>
   2ffc7:	jmp    2ff7e <g_str_equal@plt+0x22cbe>
   2ffc9:	nop    DWORD PTR [rax+0x0]
   2ffd0:	mov    rdi,QWORD PTR [rbx+0x10]
   2ffd4:	lea    rsi,[rip+0x31ffc]        # 61fd7 <_fini@@Base+0xf883>
   2ffdb:	call   2e7e0 <g_str_equal@plt+0x21520>
   2ffe0:	mov    eax,DWORD PTR [rbx]
   2ffe2:	test   eax,eax
   2ffe4:	jle    2ff43 <g_str_equal@plt+0x22c83>
   2ffea:	lea    r13,[rip+0x30004]        # 5fff5 <_fini@@Base+0xd8a1>
   2fff1:	xor    ebp,ebp
   2fff3:	nop    DWORD PTR [rax+rax*1+0x0]
   2fff8:	mov    rdi,QWORD PTR [rbx+0x10]
   2fffc:	mov    rsi,r13
   2ffff:	add    ebp,0x1
   30002:	call   2e7e0 <g_str_equal@plt+0x21520>
   30007:	cmp    DWORD PTR [rbx],ebp
   30009:	jg     2fff8 <g_str_equal@plt+0x22d38>
   3000b:	jmp    2ff43 <g_str_equal@plt+0x22c83>
   30010:	lea    rcx,[rip+0x30019]        # 60030 <_fini@@Base+0xd8dc>
   30017:	lea    rsi,[rip+0x2d67a]        # 5d698 <_fini@@Base+0xaf44>
   3001e:	lea    rdi,[rip+0x2d4ca]        # 5d4ef <_fini@@Base+0xad9b>
   30025:	mov    edx,0x62
   3002a:	call   c390 <__assert_fail@plt>
   3002f:	nop
   30030:	push   r12
   30032:	push   rbp
   30033:	mov    ecx,0xb
   30038:	push   rbx
   30039:	mov    rbp,rdi
   3003c:	mov    r12,rdx
   3003f:	sub    rsp,0x60
   30043:	mov    rax,QWORD PTR fs:0x28
   3004c:	mov    QWORD PTR [rsp+0x58],rax
   30051:	xor    eax,eax
   30053:	mov    rdi,rsp
   30056:	mov    rbx,rsp
   30059:	rep stos QWORD PTR es:[rdi],rax
   3005c:	mov    QWORD PTR [rsp+0x40],rsi
   30061:	lea    rsi,[rip+0xfffffffffffff998]        # 2fa00 <g_str_equal@plt+0x22740>
   30068:	mov    rdi,rbx
   3006b:	call   30580 <g_str_equal@plt+0x232c0>
   30070:	mov    rdi,rbp
   30073:	call   c720 <strlen@plt>
   30078:	mov    rsi,rbp
   3007b:	mov    rdx,rax
   3007e:	mov    rdi,rbx
   30081:	call   305c0 <g_str_equal@plt+0x23300>
   30086:	mov    rdi,rbx
   30089:	call   305d0 <g_str_equal@plt+0x23310>
   3008e:	mov    rdi,rbx
   30091:	call   305e0 <g_str_equal@plt+0x23320>
   30096:	mov    rsi,QWORD PTR [rsp+0x50]
   3009b:	mov    rdi,r12
   3009e:	call   3a4c0 <g_str_equal@plt+0x2d200>
   300a3:	mov    rdx,QWORD PTR [rsp+0x58]
   300a8:	xor    rdx,QWORD PTR fs:0x28
   300b1:	mov    rax,QWORD PTR [rsp+0x48]
   300b6:	jne    300c1 <g_str_equal@plt+0x22e01>
   300b8:	add    rsp,0x60
   300bc:	pop    rbx
   300bd:	pop    rbp
   300be:	pop    r12
   300c0:	ret    
   300c1:	call   cd30 <__stack_chk_fail@plt>
   300c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   300d0:	mov    rdx,rsi
   300d3:	xor    esi,esi
   300d5:	jmp    30030 <g_str_equal@plt+0x22d70>
   300da:	nop    WORD PTR [rax+rax*1+0x0]
   300e0:	sub    rsp,0xd8
   300e7:	test   al,al
   300e9:	mov    QWORD PTR [rsp+0x28],rsi
   300ee:	mov    QWORD PTR [rsp+0x30],rdx
   300f3:	mov    QWORD PTR [rsp+0x38],rcx
   300f8:	mov    QWORD PTR [rsp+0x40],r8
   300fd:	mov    QWORD PTR [rsp+0x48],r9
   30102:	je     3013b <g_str_equal@plt+0x22e7b>
   30104:	movaps XMMWORD PTR [rsp+0x50],xmm0
   30109:	movaps XMMWORD PTR [rsp+0x60],xmm1
   3010e:	movaps XMMWORD PTR [rsp+0x70],xmm2
   30113:	movaps XMMWORD PTR [rsp+0x80],xmm3
   3011b:	movaps XMMWORD PTR [rsp+0x90],xmm4
   30123:	movaps XMMWORD PTR [rsp+0xa0],xmm5
   3012b:	movaps XMMWORD PTR [rsp+0xb0],xmm6
   30133:	movaps XMMWORD PTR [rsp+0xc0],xmm7
   3013b:	mov    rax,QWORD PTR fs:0x28
   30144:	mov    QWORD PTR [rsp+0x18],rax
   30149:	xor    eax,eax
   3014b:	lea    rax,[rsp+0xe0]
   30153:	lea    rdx,[rip+0x255b2e]        # 285c88 <stdout@@GLIBC_2.2.5+0x1340>
   3015a:	mov    rsi,rsp
   3015d:	mov    QWORD PTR [rsp+0x8],rax
   30162:	lea    rax,[rsp+0x20]
   30167:	mov    DWORD PTR [rsp],0x8
   3016e:	mov    DWORD PTR [rsp+0x4],0x30
   30176:	mov    QWORD PTR [rsp+0x10],rax
   3017b:	call   30030 <g_str_equal@plt+0x22d70>
   30180:	mov    rcx,QWORD PTR [rsp+0x18]
   30185:	xor    rcx,QWORD PTR fs:0x28
   3018e:	jne    30198 <g_str_equal@plt+0x22ed8>
   30190:	add    rsp,0xd8
   30197:	ret    
   30198:	call   cd30 <__stack_chk_fail@plt>
   3019d:	nop    DWORD PTR [rax]
   301a0:	sub    rsp,0xd8
   301a7:	test   al,al
   301a9:	mov    QWORD PTR [rsp+0x28],rsi
   301ae:	mov    QWORD PTR [rsp+0x30],rdx
   301b3:	mov    QWORD PTR [rsp+0x38],rcx
   301b8:	mov    QWORD PTR [rsp+0x40],r8
   301bd:	mov    QWORD PTR [rsp+0x48],r9
   301c2:	je     301fb <g_str_equal@plt+0x22f3b>
   301c4:	movaps XMMWORD PTR [rsp+0x50],xmm0
   301c9:	movaps XMMWORD PTR [rsp+0x60],xmm1
   301ce:	movaps XMMWORD PTR [rsp+0x70],xmm2
   301d3:	movaps XMMWORD PTR [rsp+0x80],xmm3
   301db:	movaps XMMWORD PTR [rsp+0x90],xmm4
   301e3:	movaps XMMWORD PTR [rsp+0xa0],xmm5
   301eb:	movaps XMMWORD PTR [rsp+0xb0],xmm6
   301f3:	movaps XMMWORD PTR [rsp+0xc0],xmm7
   301fb:	mov    rax,QWORD PTR fs:0x28
   30204:	mov    QWORD PTR [rsp+0x18],rax
   30209:	xor    eax,eax
   3020b:	lea    rax,[rsp+0xe0]
   30213:	lea    rdx,[rip+0x255a6e]        # 285c88 <stdout@@GLIBC_2.2.5+0x1340>
   3021a:	mov    rsi,rsp
   3021d:	mov    QWORD PTR [rsp+0x8],rax
   30222:	lea    rax,[rsp+0x20]
   30227:	mov    DWORD PTR [rsp],0x8
   3022e:	mov    DWORD PTR [rsp+0x4],0x30
   30236:	mov    QWORD PTR [rsp+0x10],rax
   3023b:	call   30030 <g_str_equal@plt+0x22d70>
   30240:	test   rax,rax
   30243:	je     3026c <g_str_equal@plt+0x22fac>
   30245:	mov    edx,DWORD PTR [rax]
   30247:	lea    ecx,[rdx-0x1]
   3024a:	cmp    ecx,0x5
   3024d:	ja     30290 <g_str_equal@plt+0x22fd0>
   3024f:	cmp    edx,0x4
   30252:	jne    3026c <g_str_equal@plt+0x22fac>
   30254:	mov    rcx,QWORD PTR [rsp+0x18]
   30259:	xor    rcx,QWORD PTR fs:0x28
   30262:	jne    3028b <g_str_equal@plt+0x22fcb>
   30264:	add    rsp,0xd8
   3026b:	ret    
   3026c:	lea    rcx,[rip+0x2fded]        # 60060 <_fini@@Base+0xd90c>
   30273:	lea    rsi,[rip+0x2fd1e]        # 5ff98 <_fini@@Base+0xd844>
   3027a:	lea    rdi,[rip+0x2e9bd]        # 5ec3e <_fini@@Base+0xc4ea>
   30281:	mov    edx,0x58
   30286:	call   c390 <__assert_fail@plt>
   3028b:	call   cd30 <__stack_chk_fail@plt>
   30290:	call   d4ba <g_str_equal@plt+0x1fa>
   30295:	nop
   30296:	nop    WORD PTR cs:[rax+rax*1+0x0]
   302a0:	push   rbp
   302a1:	push   rbx
   302a2:	mov    rbp,rdi
   302a5:	sub    rsp,0x8
   302a9:	call   2e7d0 <g_str_equal@plt+0x21510>
   302ae:	mov    rdi,rbp
   302b1:	mov    rsi,rax
   302b4:	xor    ecx,ecx
   302b6:	xor    edx,edx
   302b8:	mov    rbx,rax
   302bb:	call   2fa20 <g_str_equal@plt+0x22760>
   302c0:	add    rsp,0x8
   302c4:	mov    rax,rbx
   302c7:	pop    rbx
   302c8:	pop    rbp
   302c9:	ret    
   302ca:	nop    WORD PTR [rax+rax*1+0x0]
   302d0:	push   rbp
   302d1:	push   rbx
   302d2:	mov    rbp,rdi
   302d5:	sub    rsp,0x8
   302d9:	call   2e7d0 <g_str_equal@plt+0x21510>
   302de:	mov    rdi,rbp
   302e1:	mov    rsi,rax
   302e4:	xor    ecx,ecx
   302e6:	mov    edx,0x1
   302eb:	mov    rbx,rax
   302ee:	call   2fa20 <g_str_equal@plt+0x22760>
   302f3:	add    rsp,0x8
   302f7:	mov    rax,rbx
   302fa:	pop    rbx
   302fb:	pop    rbp
   302fc:	ret    
   302fd:	nop    DWORD PTR [rax]
   30300:	sub    rsp,0x8
   30304:	cmp    QWORD PTR [rdi+0x8],0x0
   30309:	jne    30326 <g_str_equal@plt+0x23066>
   3030b:	mov    eax,DWORD PTR [rdi]
   3030d:	lea    edx,[rax-0x2]
   30310:	cmp    edx,0x4
   30313:	ja     30345 <g_str_equal@plt+0x23085>
   30315:	lea    rdx,[rip+0x251104]        # 281420 <g_test_config_vars+0x60>
   3031c:	mov    rax,QWORD PTR [rdx+rax*8]
   30320:	add    rsp,0x8
   30324:	jmp    rax
   30326:	lea    rcx,[rip+0x2fe43]        # 60170 <_fini@@Base+0xda1c>
   3032d:	lea    rsi,[rip+0x2fd44]        # 60078 <_fini@@Base+0xd924>
   30334:	lea    rdi,[rip+0x2fdf4]        # 6012f <_fini@@Base+0xd9db>
   3033b:	mov    edx,0x28
   30340:	call   c390 <__assert_fail@plt>
   30345:	lea    rcx,[rip+0x2fe24]        # 60170 <_fini@@Base+0xda1c>
   3034c:	lea    rsi,[rip+0x2fd25]        # 60078 <_fini@@Base+0xd924>
   30353:	lea    rdi,[rip+0x2fd5e]        # 600b8 <_fini@@Base+0xd964>
   3035a:	mov    edx,0x29
   3035f:	call   c390 <__assert_fail@plt>
   30364:	xchg   ax,ax
   30366:	nop    WORD PTR cs:[rax+rax*1+0x0]
   30370:	test   rdi,rdi
   30373:	sete   cl
   30376:	test   rsi,rsi
   30379:	sete   dl
   3037c:	mov    eax,ecx
   3037e:	and    al,dl
   30380:	jne    3038c <g_str_equal@plt+0x230cc>
   30382:	or     cl,dl
   30384:	jne    3038c <g_str_equal@plt+0x230cc>
   30386:	mov    edx,DWORD PTR [rdi]
   30388:	cmp    edx,DWORD PTR [rsi]
   3038a:	je     30390 <g_str_equal@plt+0x230d0>
   3038c:	repz ret 
   3038e:	xchg   ax,ax
   30390:	lea    eax,[rdx-0x1]
   30393:	cmp    eax,0x5
   30396:	ja     303a2 <g_str_equal@plt+0x230e2>
   30398:	lea    rax,[rip+0x251041]        # 2813e0 <g_test_config_vars+0x20>
   3039f:	jmp    QWORD PTR [rax+rdx*8]
   303a2:	lea    rcx,[rip+0x2fda7]        # 60150 <_fini@@Base+0xd9fc>
   303a9:	lea    rsi,[rip+0x2fcc8]        # 60078 <_fini@@Base+0xd924>
   303b0:	lea    rdi,[rip+0x2fd41]        # 600f8 <_fini@@Base+0xd9a4>
   303b7:	sub    rsp,0x8
   303bb:	mov    edx,0x45
   303c0:	call   c390 <__assert_fail@plt>
   303c5:	nop    WORD PTR cs:[rax+rax*1+0x0]
   303cf:	nop
   303d0:	jmp    d2b0 <g_free@plt>
   303d5:	nop
   303d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   303e0:	mov    rax,QWORD PTR [rdi]
   303e3:	test   rax,rax
   303e6:	je     30410 <g_str_equal@plt+0x23150>
   303e8:	push   rbx
   303e9:	lea    rsi,[rip+0xffffffffffffffe0]        # 303d0 <g_str_equal@plt+0x23110>
   303f0:	mov    rbx,rdi
   303f3:	xor    edx,edx
   303f5:	mov    rdi,rax
   303f8:	call   cb40 <g_queue_foreach@plt>
   303fd:	mov    rdi,QWORD PTR [rbx]
   30400:	call   c590 <g_queue_free@plt>
   30405:	mov    QWORD PTR [rbx],0x0
   3040c:	pop    rbx
   3040d:	ret    
   3040e:	xchg   ax,ax
   30410:	repz ret 
   30412:	nop    DWORD PTR [rax+0x0]
   30416:	nop    WORD PTR cs:[rax+rax*1+0x0]
   30420:	push   r15
   30422:	push   r14
   30424:	lea    r15,[rdi-0x8]
   30428:	push   r13
   3042a:	push   r12
   3042c:	mov    r14,rsi
   3042f:	push   rbp
   30430:	push   rbx
   30431:	mov    r12d,edx
   30434:	mov    rbx,rdi
   30437:	sub    rsp,0x18
   3043b:	cmp    edx,0x65
   3043e:	je     30568 <g_str_equal@plt+0x232a8>
   30444:	jbe    30550 <g_str_equal@plt+0x23290>
   3044a:	cmp    edx,0x66
   3044d:	je     30508 <g_str_equal@plt+0x23248>
   30453:	cmp    edx,0x67
   30456:	jne    3045c <g_str_equal@plt+0x2319c>
   30458:	sub    DWORD PTR [rdi+0x24],0x1
   3045c:	mov    rax,QWORD PTR [r14+0x8]
   30460:	mov    DWORD PTR [rsp+0xc],r8d
   30465:	mov    DWORD PTR [rsp+0x8],ecx
   30469:	lea    rdi,[rax+0xd]
   3046d:	call   c500 <g_malloc@plt>
   30472:	mov    r13,QWORD PTR [r14+0x8]
   30476:	mov    rsi,QWORD PTR [r14]
   30479:	lea    rdi,[rax+0xc]
   3047d:	mov    DWORD PTR [rax],r12d
   30480:	mov    rbp,rax
   30483:	mov    rdx,r13
   30486:	call   d220 <memcpy@plt>
   3048b:	mov    ecx,DWORD PTR [rsp+0x8]
   3048f:	mov    r8d,DWORD PTR [rsp+0xc]
   30494:	mov    rsi,rbp
   30497:	add    QWORD PTR [rbx+0x30],r13
   3049b:	mov    rdi,QWORD PTR [rbx+0x28]
   3049f:	mov    BYTE PTR [rbp+r13*1+0xc],0x0
   304a5:	mov    DWORD PTR [rbp+0x4],ecx
   304a8:	mov    DWORD PTR [rbp+0x8],r8d
   304ac:	call   c1e0 <g_queue_push_tail@plt>
   304b1:	cmp    r12d,0x70
   304b5:	je     30540 <g_str_equal@plt+0x23280>
   304bb:	mov    edx,DWORD PTR [rbx+0x20]
   304be:	test   edx,edx
   304c0:	js     304d0 <g_str_equal@plt+0x23210>
   304c2:	mov    eax,DWORD PTR [rbx+0x24]
   304c5:	test   eax,eax
   304c7:	js     304d0 <g_str_equal@plt+0x23210>
   304c9:	cmp    QWORD PTR [rbx+0x20],0x0
   304ce:	jne    30518 <g_str_equal@plt+0x23258>
   304d0:	mov    rbp,QWORD PTR [rbx+0x28]
   304d4:	mov    QWORD PTR [rbx+0x20],0x0
   304dc:	call   d1b0 <g_queue_new@plt>
   304e1:	mov    rdi,r15
   304e4:	mov    QWORD PTR [rbx+0x28],rax
   304e8:	mov    rsi,rbp
   304eb:	call   QWORD PTR [rbx-0x8]
   304ee:	mov    QWORD PTR [rbx+0x30],0x0
   304f6:	add    rsp,0x18
   304fa:	pop    rbx
   304fb:	pop    rbp
   304fc:	pop    r12
   304fe:	pop    r13
   30500:	pop    r14
   30502:	pop    r15
   30504:	ret    
   30505:	nop    DWORD PTR [rax]
   30508:	add    DWORD PTR [rdi+0x24],0x1
   3050c:	jmp    3045c <g_str_equal@plt+0x2319c>
   30511:	nop    DWORD PTR [rax+0x0]
   30518:	cmp    QWORD PTR [rbx+0x30],0x4000000
   30520:	ja     30540 <g_str_equal@plt+0x23280>
   30522:	mov    rdi,QWORD PTR [rbx+0x28]
   30526:	call   cdd0 <g_queue_get_length@plt>
   3052b:	cmp    eax,0x200000
   30530:	ja     30540 <g_str_equal@plt+0x23280>
   30532:	mov    eax,DWORD PTR [rbx+0x20]
   30535:	add    eax,DWORD PTR [rbx+0x24]
   30538:	cmp    eax,0x400
   3053d:	jbe    304f6 <g_str_equal@plt+0x23236>
   3053f:	nop
   30540:	lea    rdi,[rbx+0x28]
   30544:	call   303e0 <g_str_equal@plt+0x23120>
   30549:	jmp    304d0 <g_str_equal@plt+0x23210>
   3054b:	nop    DWORD PTR [rax+rax*1+0x0]
   30550:	cmp    edx,0x64
   30553:	jne    3045c <g_str_equal@plt+0x2319c>
   30559:	add    DWORD PTR [rdi+0x20],0x1
   3055d:	jmp    3045c <g_str_equal@plt+0x2319c>
   30562:	nop    WORD PTR [rax+rax*1+0x0]
   30568:	sub    DWORD PTR [rdi+0x20],0x1
   3056c:	jmp    3045c <g_str_equal@plt+0x2319c>
   30571:	nop    DWORD PTR [rax+rax*1+0x0]
   30576:	nop    WORD PTR cs:[rax+rax*1+0x0]
   30580:	push   rbx
   30581:	mov    rbx,rdi
   30584:	mov    QWORD PTR [rdi],rsi
   30587:	mov    QWORD PTR [rdi+0x28],0x0
   3058f:	call   d1b0 <g_queue_new@plt>
   30594:	mov    QWORD PTR [rbx+0x38],0x0
   3059c:	mov    QWORD PTR [rbx+0x30],rax
   305a0:	lea    rdi,[rbx+0x8]
   305a4:	pop    rbx
   305a5:	lea    rsi,[rip+0xfffffffffffffe74]        # 30420 <g_str_equal@plt+0x23160>
   305ac:	jmp    50120 <g_str_equal@plt+0x42e60>
   305b1:	nop    DWORD PTR [rax+rax*1+0x0]
   305b6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   305c0:	add    rdi,0x8
   305c4:	jmp    50150 <g_str_equal@plt+0x42e90>
   305c9:	nop    DWORD PTR [rax+0x0]
   305d0:	add    rdi,0x8
   305d4:	jmp    501b0 <g_str_equal@plt+0x42ef0>
   305d9:	nop    DWORD PTR [rax+0x0]
   305e0:	push   rbx
   305e1:	mov    rbx,rdi
   305e4:	lea    rdi,[rdi+0x8]
   305e8:	call   501d0 <g_str_equal@plt+0x42f10>
   305ed:	lea    rdi,[rbx+0x30]
   305f1:	pop    rbx
   305f2:	jmp    303e0 <g_str_equal@plt+0x23120>
   305f7:	nop    WORD PTR [rax+rax*1+0x0]
   30600:	push   rbp
   30601:	push   rbx
   30602:	mov    rbx,rdi
   30605:	sub    rsp,0x4e8
   3060c:	test   al,al
   3060e:	mov    QWORD PTR [rsp+0x448],rcx
   30616:	mov    QWORD PTR [rsp+0x450],r8
   3061e:	mov    QWORD PTR [rsp+0x458],r9
   30626:	je     30668 <g_str_equal@plt+0x233a8>
   30628:	movaps XMMWORD PTR [rsp+0x460],xmm0
   30630:	movaps XMMWORD PTR [rsp+0x470],xmm1
   30638:	movaps XMMWORD PTR [rsp+0x480],xmm2
   30640:	movaps XMMWORD PTR [rsp+0x490],xmm3
   30648:	movaps XMMWORD PTR [rsp+0x4a0],xmm4
   30650:	movaps XMMWORD PTR [rsp+0x4b0],xmm5
   30658:	movaps XMMWORD PTR [rsp+0x4c0],xmm6
   30660:	movaps XMMWORD PTR [rsp+0x4d0],xmm7
   30668:	mov    rax,QWORD PTR fs:0x28
   30671:	mov    QWORD PTR [rsp+0x428],rax
   30679:	xor    eax,eax
   3067b:	lea    rax,[rsp+0x500]
   30683:	lea    rbp,[rsp+0x20]
   30688:	lea    r9,[rsp+0x8]
   3068d:	mov    r8,rdx
   30690:	mov    ecx,0x400
   30695:	mov    edx,0x1
   3069a:	mov    QWORD PTR [rsp+0x10],rax
   3069f:	lea    rax,[rsp+0x430]
   306a7:	mov    rdi,rbp
   306aa:	mov    esi,0x400
   306af:	mov    DWORD PTR [rsp+0x8],0x18
   306b7:	mov    DWORD PTR [rsp+0xc],0x30
   306bf:	mov    QWORD PTR [rsp+0x18],rax
   306c4:	call   c5f0 <__vsnprintf_chk@plt>
   306c9:	mov    rdi,QWORD PTR [rbx]
   306cc:	test   rdi,rdi
   306cf:	je     306dd <g_str_equal@plt+0x2341d>
   306d1:	call   3a460 <g_str_equal@plt+0x2d1a0>
   306d6:	mov    QWORD PTR [rbx],0x0
   306dd:	lea    r8,[rip+0x2fa9c]        # 60180 <_fini@@Base+0xda2c>
   306e4:	lea    rcx,[rip+0x2fe65]        # 60550 <_fini@@Base+0xddfc>
   306eb:	lea    rsi,[rip+0x2fbae]        # 602a0 <_fini@@Base+0xdb4c>
   306f2:	xor    eax,eax
   306f4:	mov    r9,rbp
   306f7:	mov    edx,0x3f
   306fc:	mov    rdi,rbx
   306ff:	call   3a090 <g_str_equal@plt+0x2cdd0>
   30704:	mov    rax,QWORD PTR [rsp+0x428]
   3070c:	xor    rax,QWORD PTR fs:0x28
   30715:	jne    30721 <g_str_equal@plt+0x23461>
   30717:	add    rsp,0x4e8
   3071e:	pop    rbx
   3071f:	pop    rbp
   30720:	ret    
   30721:	call   cd30 <__stack_chk_fail@plt>
   30726:	nop    WORD PTR cs:[rax+rax*1+0x0]
   30730:	push   rbx
   30731:	mov    rbx,rdi
   30734:	mov    rdi,QWORD PTR [rdi]
   30737:	call   ceb0 <g_queue_is_empty@plt>
   3073c:	test   eax,eax
   3073e:	jne    30749 <g_str_equal@plt+0x23489>
   30740:	mov    rdi,QWORD PTR [rbx]
   30743:	pop    rbx
   30744:	jmp    ce30 <g_queue_peek_head@plt>
   30749:	lea    rcx,[rip+0x2feb0]        # 60600 <_fini@@Base+0xdeac>
   30750:	lea    rsi,[rip+0x2fb49]        # 602a0 <_fini@@Base+0xdb4c>
   30757:	lea    rdi,[rip+0x2fa37]        # 60195 <_fini@@Base+0xda41>
   3075e:	mov    edx,0xf3
   30763:	call   c390 <__assert_fail@plt>
   30768:	nop    DWORD PTR [rax+rax*1+0x0]
   30770:	push   rbp
   30771:	push   rbx
   30772:	mov    rbx,rdi
   30775:	mov    rbp,rsi
   30778:	sub    rsp,0x8
   3077c:	mov    rdi,QWORD PTR [rdi]
   3077f:	call   d2b0 <g_free@plt>
   30784:	mov    rdi,QWORD PTR [rbp+0x0]
   30788:	call   ceb0 <g_queue_is_empty@plt>
   3078d:	test   eax,eax
   3078f:	jne    307a4 <g_str_equal@plt+0x234e4>
   30791:	mov    rdi,QWORD PTR [rbp+0x0]
   30795:	call   d280 <g_queue_pop_head@plt>
   3079a:	mov    QWORD PTR [rbx],rax
   3079d:	add    rsp,0x8
   307a1:	pop    rbx
   307a2:	pop    rbp
   307a3:	ret    
   307a4:	lea    rcx,[rip+0x2fe15]        # 605c0 <_fini@@Base+0xde6c>
   307ab:	lea    rsi,[rip+0x2faee]        # 602a0 <_fini@@Base+0xdb4c>
   307b2:	lea    rdi,[rip+0x2f9dc]        # 60195 <_fini@@Base+0xda41>
   307b9:	mov    edx,0xec
   307be:	call   c390 <__assert_fail@plt>
   307c3:	nop    DWORD PTR [rax]
   307c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   307d0:	push   r15
   307d2:	push   r14
   307d4:	mov    r14,rsi
   307d7:	push   r13
   307d9:	push   r12
   307db:	lea    r12,[rdi+0x10]
   307df:	push   rbp
   307e0:	push   rbx
   307e1:	mov    rbp,rdi
   307e4:	mov    rdi,r12
   307e7:	mov    r13,rdx
   307ea:	sub    rsp,0x18
   307ee:	call   30730 <g_str_equal@plt+0x23470>
   307f3:	test   rax,rax
   307f6:	je     3093e <g_str_equal@plt+0x2367e>
   307fc:	mov    rsi,r13
   307ff:	mov    rdi,rbp
   30802:	mov    r15,rax
   30805:	call   309b0 <g_str_equal@plt+0x236f0>
   3080a:	test   rax,rax
   3080d:	mov    rbx,rax
   30810:	je     30920 <g_str_equal@plt+0x23660>
   30816:	mov    eax,DWORD PTR [rax]
   30818:	lea    edx,[rax-0x1]
   3081b:	cmp    edx,0x5
   3081e:	ja     3098c <g_str_equal@plt+0x236cc>
   30824:	cmp    eax,0x3
   30827:	jne    30920 <g_str_equal@plt+0x23660>
   3082d:	lea    rdi,[rbp+0x8]
   30831:	mov    rsi,r12
   30834:	call   30770 <g_str_equal@plt+0x234b0>
   30839:	test   rax,rax
   3083c:	mov    r12,rax
   3083f:	je     30974 <g_str_equal@plt+0x236b4>
   30845:	cmp    DWORD PTR [rax],0x68
   30848:	jne    308d0 <g_str_equal@plt+0x23610>
   3084e:	mov    rsi,r13
   30851:	mov    rdi,rbp
   30854:	call   309b0 <g_str_equal@plt+0x236f0>
   30859:	test   rax,rax
   3085c:	mov    r13,rax
   3085f:	je     3095b <g_str_equal@plt+0x2369b>
   30865:	mov    rdi,rbx
   30868:	call   2e8e0 <g_str_equal@plt+0x21620>
   3086d:	mov    rdx,r13
   30870:	mov    rsi,rax
   30873:	mov    rdi,r14
   30876:	call   2eb90 <g_str_equal@plt+0x218d0>
   3087b:	mov    rax,QWORD PTR [rbx+0x8]
   3087f:	test   rax,rax
   30882:	je     309ab <g_str_equal@plt+0x236eb>
   30888:	lea    rdx,[rax-0x1]
   3088c:	xor    eax,eax
   3088e:	test   rdx,rdx
   30891:	mov    QWORD PTR [rbx+0x8],rdx
   30895:	je     308b0 <g_str_equal@plt+0x235f0>
   30897:	add    rsp,0x18
   3089b:	pop    rbx
   3089c:	pop    rbp
   3089d:	pop    r12
   3089f:	pop    r13
   308a1:	pop    r14
   308a3:	pop    r15
   308a5:	ret    
   308a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   308b0:	mov    rdi,rbx
   308b3:	mov    DWORD PTR [rsp+0xc],eax
   308b7:	call   30300 <g_str_equal@plt+0x23040>
   308bc:	mov    eax,DWORD PTR [rsp+0xc]
   308c0:	add    rsp,0x18
   308c4:	pop    rbx
   308c5:	pop    rbp
   308c6:	pop    r12
   308c8:	pop    r13
   308ca:	pop    r14
   308cc:	pop    r15
   308ce:	ret    
   308cf:	nop
   308d0:	lea    rdx,[rip+0x2f907]        # 601de <_fini@@Base+0xda8a>
   308d7:	mov    rsi,rax
   308da:	mov    rdi,rbp
   308dd:	xor    eax,eax
   308df:	call   30600 <g_str_equal@plt+0x23340>
   308e4:	mov    rax,QWORD PTR [rbx+0x8]
   308e8:	test   rax,rax
   308eb:	je     309ab <g_str_equal@plt+0x236eb>
   308f1:	sub    rax,0x1
   308f5:	test   rax,rax
   308f8:	mov    QWORD PTR [rbx+0x8],rax
   308fc:	je     30908 <g_str_equal@plt+0x23648>
   308fe:	mov    eax,0xffffffff
   30903:	jmp    30897 <g_str_equal@plt+0x235d7>
   30905:	nop    DWORD PTR [rax]
   30908:	mov    rdi,rbx
   3090b:	call   30300 <g_str_equal@plt+0x23040>
   30910:	mov    eax,0xffffffff
   30915:	jmp    30897 <g_str_equal@plt+0x235d7>
   3091a:	nop    WORD PTR [rax+rax*1+0x0]
   30920:	lea    rdx,[rip+0x2f899]        # 601c0 <_fini@@Base+0xda6c>
   30927:	xor    eax,eax
   30929:	mov    rsi,r15
   3092c:	mov    rdi,rbp
   3092f:	call   30600 <g_str_equal@plt+0x23340>
   30934:	mov    eax,0xffffffff
   30939:	jmp    30897 <g_str_equal@plt+0x235d7>
   3093e:	lea    rdx,[rip+0x2f86d]        # 601b2 <_fini@@Base+0xda5e>
   30945:	xor    eax,eax
   30947:	xor    esi,esi
   30949:	mov    rdi,rbp
   3094c:	call   30600 <g_str_equal@plt+0x23340>
   30951:	mov    eax,0xffffffff
   30956:	jmp    30897 <g_str_equal@plt+0x235d7>
   3095b:	lea    rdx,[rip+0x2f895]        # 601f7 <_fini@@Base+0xdaa3>
   30962:	mov    rsi,r12
   30965:	mov    rdi,rbp
   30968:	xor    eax,eax
   3096a:	call   30600 <g_str_equal@plt+0x23340>
   3096f:	jmp    308e4 <g_str_equal@plt+0x23624>
   30974:	lea    rdx,[rip+0x2f837]        # 601b2 <_fini@@Base+0xda5e>
   3097b:	xor    esi,esi
   3097d:	mov    rdi,rbp
   30980:	xor    eax,eax
   30982:	call   30600 <g_str_equal@plt+0x23340>
   30987:	jmp    308e4 <g_str_equal@plt+0x23624>
   3098c:	lea    rcx,[rip+0x2fc4d]        # 605e0 <_fini@@Base+0xde8c>
   30993:	lea    rsi,[rip+0x2ccfe]        # 5d698 <_fini@@Base+0xaf44>
   3099a:	lea    rdi,[rip+0x2cd3f]        # 5d6e0 <_fini@@Base+0xaf8c>
   309a1:	mov    edx,0x7f
   309a6:	call   c390 <__assert_fail@plt>
   309ab:	call   d4dd <g_str_equal@plt+0x21d>
   309b0:	push   r15
   309b2:	push   r14
   309b4:	push   r13
   309b6:	push   r12
   309b8:	lea    r12,[rdi+0x10]
   309bc:	push   rbp
   309bd:	push   rbx
   309be:	mov    rbx,rdi
   309c1:	mov    rdi,r12
   309c4:	mov    r13,rsi
   309c7:	sub    rsp,0x38
   309cb:	mov    rax,QWORD PTR fs:0x28
   309d4:	mov    QWORD PTR [rsp+0x28],rax
   309d9:	xor    eax,eax
   309db:	call   30730 <g_str_equal@plt+0x23470>
   309e0:	test   rax,rax
   309e3:	je     31188 <g_str_equal@plt+0x23ec8>
   309e9:	mov    ecx,DWORD PTR [rax]
   309eb:	lea    edx,[rcx-0x64]
   309ee:	cmp    edx,0xa
   309f1:	ja     30d80 <g_str_equal@plt+0x23ac0>
   309f7:	lea    rcx,[rip+0x2f9d2]        # 603d0 <_fini@@Base+0xdc7c>
   309fe:	movsxd rdx,DWORD PTR [rcx+rdx*4]
   30a02:	add    rdx,rcx
   30a05:	jmp    rdx
   30a07:	nop    WORD PTR [rax+rax*1+0x0]
   30a10:	test   r13,r13
   30a13:	je     30bcb <g_str_equal@plt+0x2390b>
   30a19:	lea    rdi,[rbx+0x8]
   30a1d:	mov    rsi,r12
   30a20:	call   30770 <g_str_equal@plt+0x234b0>
   30a25:	test   rax,rax
   30a28:	je     313d1 <g_str_equal@plt+0x24111>
   30a2e:	cmp    DWORD PTR [rax],0x6e
   30a31:	jne    313d1 <g_str_equal@plt+0x24111>
   30a37:	add    rax,0xc
   30a3b:	lea    rdi,[rip+0x2f811]        # 60253 <_fini@@Base+0xdaff>
   30a42:	mov    ecx,0x3
   30a47:	mov    rsi,rax
   30a4a:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   30a4c:	seta   dl
   30a4f:	sbb    dl,0x0
   30a52:	test   dl,dl
   30a54:	je     31453 <g_str_equal@plt+0x24193>
   30a5a:	lea    rdi,[rip+0x37056]        # 67ab7 <_fini@@Base+0x15363>
   30a61:	mov    ecx,0x3
   30a66:	mov    rsi,rax
   30a69:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   30a6b:	seta   dl
   30a6e:	sbb    dl,0x0
   30a71:	test   dl,dl
   30a73:	je     31476 <g_str_equal@plt+0x241b6>
   30a79:	lea    rdi,[rip+0x22d8f]        # 5380f <_fini@@Base+0x10bb>
   30a80:	mov    ecx,0x3
   30a85:	mov    rsi,rax
   30a88:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   30a8a:	seta   dl
   30a8d:	sbb    dl,0x0
   30a90:	test   dl,dl
   30a92:	je     310d2 <g_str_equal@plt+0x23e12>
   30a98:	lea    rdi,[rip+0x2eac2]        # 5f561 <_fini@@Base+0xce0d>
   30a9f:	mov    ecx,0x4
   30aa4:	mov    rsi,rax
   30aa7:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   30aa9:	seta   dl
   30aac:	sbb    dl,0x0
   30aaf:	test   dl,dl
   30ab1:	je     30aed <g_str_equal@plt+0x2382d>
   30ab3:	lea    rdi,[rip+0x2f79c]        # 60256 <_fini@@Base+0xdb02>
   30aba:	mov    ecx,0x5
   30abf:	mov    rsi,rax
   30ac2:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   30ac4:	seta   dl
   30ac7:	sbb    dl,0x0
   30aca:	test   dl,dl
   30acc:	je     30aed <g_str_equal@plt+0x2382d>
   30ace:	lea    rdi,[rip+0x2f786]        # 6025b <_fini@@Base+0xdb07>
   30ad5:	mov    ecx,0x6
   30ada:	mov    rsi,rax
   30add:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   30adf:	seta   dl
   30ae2:	sbb    dl,0x0
   30ae5:	test   dl,dl
   30ae7:	jne    311b7 <g_str_equal@plt+0x23ef7>
   30aed:	mov    edx,DWORD PTR [r13+0x0]
   30af1:	cmp    edx,0x2f
   30af4:	ja     31415 <g_str_equal@plt+0x24155>
   30afa:	mov    eax,edx
   30afc:	add    rax,QWORD PTR [r13+0x10]
   30b00:	add    edx,0x8
   30b03:	mov    DWORD PTR [r13+0x0],edx
   30b07:	mov    rdi,QWORD PTR [rax]
   30b0a:	call   2e110 <g_str_equal@plt+0x20e50>
   30b0f:	mov    rbp,rax
   30b12:	jmp    30d50 <g_str_equal@plt+0x23a90>
   30b17:	nop    WORD PTR [rax+rax*1+0x0]
   30b20:	lea    r14,[rbx+0x8]
   30b24:	mov    rsi,r12
   30b27:	mov    rdi,r14
   30b2a:	call   30770 <g_str_equal@plt+0x234b0>
   30b2f:	test   rax,rax
   30b32:	je     31355 <g_str_equal@plt+0x24095>
   30b38:	cmp    DWORD PTR [rax],0x64
   30b3b:	jne    31355 <g_str_equal@plt+0x24095>
   30b41:	call   2eb40 <g_str_equal@plt+0x21880>
   30b46:	mov    rdi,r12
   30b49:	mov    rbp,rax
   30b4c:	call   30730 <g_str_equal@plt+0x23470>
   30b51:	test   rax,rax
   30b54:	je     30e30 <g_str_equal@plt+0x23b70>
   30b5a:	cmp    DWORD PTR [rax],0x65
   30b5d:	jne    30b90 <g_str_equal@plt+0x238d0>
   30b5f:	jmp    30f00 <g_str_equal@plt+0x23c40>
   30b64:	nop    DWORD PTR [rax+0x0]
   30b68:	mov    rsi,r12
   30b6b:	mov    rdi,r14
   30b6e:	call   30770 <g_str_equal@plt+0x234b0>
   30b73:	test   rax,rax
   30b76:	je     30e30 <g_str_equal@plt+0x23b70>
   30b7c:	mov    edx,DWORD PTR [rax]
   30b7e:	cmp    edx,0x65
   30b81:	je     30d50 <g_str_equal@plt+0x23a90>
   30b87:	cmp    edx,0x69
   30b8a:	jne    31168 <g_str_equal@plt+0x23ea8>
   30b90:	mov    rdx,r13
   30b93:	mov    rsi,rbp
   30b96:	mov    rdi,rbx
   30b99:	call   307d0 <g_str_equal@plt+0x23510>
   30b9e:	cmp    eax,0xffffffff
   30ba1:	jne    30b68 <g_str_equal@plt+0x238a8>
   30ba3:	nop    DWORD PTR [rax+rax*1+0x0]
   30ba8:	test   rbp,rbp
   30bab:	je     30bcb <g_str_equal@plt+0x2390b>
   30bad:	mov    rax,QWORD PTR [rbp+0x8]
   30bb1:	test   rax,rax
   30bb4:	je     31471 <g_str_equal@plt+0x241b1>
   30bba:	sub    rax,0x1
   30bbe:	test   rax,rax
   30bc1:	mov    QWORD PTR [rbp+0x8],rax
   30bc5:	je     30da0 <g_str_equal@plt+0x23ae0>
   30bcb:	xor    ebp,ebp
   30bcd:	jmp    30d50 <g_str_equal@plt+0x23a90>
   30bd2:	nop    WORD PTR [rax+rax*1+0x0]
   30bd8:	lea    r15,[rbx+0x8]
   30bdc:	mov    rsi,r12
   30bdf:	mov    rdi,r15
   30be2:	call   30770 <g_str_equal@plt+0x234b0>
   30be7:	test   rax,rax
   30bea:	mov    r14,rax
   30bed:	je     31393 <g_str_equal@plt+0x240d3>
   30bf3:	cmp    DWORD PTR [rax],0x66
   30bf6:	jne    31393 <g_str_equal@plt+0x240d3>
   30bfc:	call   2f420 <g_str_equal@plt+0x22160>
   30c01:	mov    rdi,r12
   30c04:	mov    rbp,rax
   30c07:	call   30730 <g_str_equal@plt+0x23470>
   30c0c:	test   rax,rax
   30c0f:	je     30e30 <g_str_equal@plt+0x23b70>
   30c15:	cmp    DWORD PTR [rax],0x67
   30c18:	jne    30c56 <g_str_equal@plt+0x23996>
   30c1a:	jmp    30f10 <g_str_equal@plt+0x23c50>
   30c1f:	nop
   30c20:	mov    rsi,rax
   30c23:	mov    rdi,rbp
   30c26:	call   2f4f0 <g_str_equal@plt+0x22230>
   30c2b:	mov    rsi,r12
   30c2e:	mov    rdi,r15
   30c31:	call   30770 <g_str_equal@plt+0x234b0>
   30c36:	test   rax,rax
   30c39:	mov    r14,rax
   30c3c:	je     30e30 <g_str_equal@plt+0x23b70>
   30c42:	mov    eax,DWORD PTR [rax]
   30c44:	cmp    eax,0x67
   30c47:	je     30d50 <g_str_equal@plt+0x23a90>
   30c4d:	cmp    eax,0x69
   30c50:	jne    31148 <g_str_equal@plt+0x23e88>
   30c56:	mov    rsi,r13
   30c59:	mov    rdi,rbx
   30c5c:	call   309b0 <g_str_equal@plt+0x236f0>
   30c61:	test   rax,rax
   30c64:	jne    30c20 <g_str_equal@plt+0x23960>
   30c66:	lea    rdx,[rip+0x2f5bb]        # 60228 <_fini@@Base+0xdad4>
   30c6d:	mov    rsi,r14
   30c70:	mov    rdi,rbx
   30c73:	call   30600 <g_str_equal@plt+0x23340>
   30c78:	jmp    30ba8 <g_str_equal@plt+0x238e8>
   30c7d:	nop    DWORD PTR [rax]
   30c80:	lea    rdi,[rbx+0x8]
   30c84:	mov    rsi,r12
   30c87:	call   30770 <g_str_equal@plt+0x234b0>
   30c8c:	test   rax,rax
   30c8f:	mov    r12,rax
   30c92:	je     313b2 <g_str_equal@plt+0x240f2>
   30c98:	mov    eax,DWORD PTR [rax]
   30c9a:	cmp    eax,0x6b
   30c9d:	je     30ee0 <g_str_equal@plt+0x23c20>
   30ca3:	cmp    eax,0x6d
   30ca6:	je     30e50 <g_str_equal@plt+0x23b90>
   30cac:	cmp    eax,0x6a
   30caf:	je     30db0 <g_str_equal@plt+0x23af0>
   30cb5:	call   c270 <abort@plt>
   30cba:	nop    WORD PTR [rax+rax*1+0x0]
   30cc0:	lea    rdi,[rbx+0x8]
   30cc4:	mov    rsi,r12
   30cc7:	call   30770 <g_str_equal@plt+0x234b0>
   30ccc:	test   rax,rax
   30ccf:	je     31374 <g_str_equal@plt+0x240b4>
   30cd5:	cmp    DWORD PTR [rax],0x6c
   30cd8:	jne    31374 <g_str_equal@plt+0x240b4>
   30cde:	lea    r8,[rax+0xc]
   30ce2:	lea    rdi,[rip+0x2e5de]        # 5f2c7 <_fini@@Base+0xcb73>
   30ce9:	mov    ecx,0x5
   30cee:	mov    rsi,r8
   30cf1:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   30cf3:	seta   dl
   30cf6:	sbb    dl,0x0
   30cf9:	test   dl,dl
   30cfb:	je     30f20 <g_str_equal@plt+0x23c60>
   30d01:	lea    rdi,[rip+0x2c819]        # 5d521 <_fini@@Base+0xadcd>
   30d08:	mov    ecx,0x6
   30d0d:	mov    rsi,r8
   30d10:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   30d12:	seta   dl
   30d15:	sbb    dl,0x0
   30d18:	test   dl,dl
   30d1a:	je     31120 <g_str_equal@plt+0x23e60>
   30d20:	lea    rdi,[rip+0x29d80]        # 5aaa7 <_fini@@Base+0x8353>
   30d27:	mov    ecx,0x5
   30d2c:	mov    rsi,r8
   30d2f:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   30d31:	seta   dl
   30d34:	sbb    dl,0x0
   30d37:	test   dl,dl
   30d39:	jne    312ce <g_str_equal@plt+0x2400e>
   30d3f:	add    QWORD PTR [rip+0x251711],0x1        # 282458 <g_test_config_vars+0x1098>
   30d47:	lea    rbp,[rip+0x251702]        # 282450 <g_test_config_vars+0x1090>
   30d4e:	xchg   ax,ax
   30d50:	mov    rbx,QWORD PTR [rsp+0x28]
   30d55:	xor    rbx,QWORD PTR fs:0x28
   30d5e:	mov    rax,rbp
   30d61:	jne    31350 <g_str_equal@plt+0x24090>
   30d67:	add    rsp,0x38
   30d6b:	pop    rbx
   30d6c:	pop    rbp
   30d6d:	pop    r12
   30d6f:	pop    r13
   30d71:	pop    r14
   30d73:	pop    r15
   30d75:	ret    
   30d76:	nop    WORD PTR cs:[rax+rax*1+0x0]
   30d80:	lea    rdx,[rip+0x2f4a1]        # 60228 <_fini@@Base+0xdad4>
   30d87:	mov    rsi,rax
   30d8a:	mov    rdi,rbx
   30d8d:	xor    eax,eax
   30d8f:	xor    ebp,ebp
   30d91:	call   30600 <g_str_equal@plt+0x23340>
   30d96:	jmp    30d50 <g_str_equal@plt+0x23a90>
   30d98:	nop    DWORD PTR [rax+rax*1+0x0]
   30da0:	mov    rdi,rbp
   30da3:	xor    ebp,ebp
   30da5:	call   30300 <g_str_equal@plt+0x23040>
   30daa:	jmp    30d50 <g_str_equal@plt+0x23a90>
   30dac:	nop    DWORD PTR [rax+0x0]
   30db0:	lea    rbx,[r12+0xc]
   30db5:	lea    rcx,[rsp+0x10]
   30dba:	xor    esi,esi
   30dbc:	mov    edx,0xa
   30dc1:	mov    rdi,rbx
   30dc4:	call   331d0 <g_str_equal@plt+0x25f10>
   30dc9:	test   eax,eax
   30dcb:	je     310c0 <g_str_equal@plt+0x23e00>
   30dd1:	cmp    eax,0xffffffde
   30dd4:	jne    31434 <g_str_equal@plt+0x24174>
   30dda:	cmp    BYTE PTR [r12+0xc],0x2d
   30de0:	je     30ee5 <g_str_equal@plt+0x23c25>
   30de6:	lea    rcx,[rsp+0x18]
   30deb:	xor    esi,esi
   30ded:	mov    edx,0xa
   30df2:	mov    rdi,rbx
   30df5:	call   33290 <g_str_equal@plt+0x25fd0>
   30dfa:	test   eax,eax
   30dfc:	je     3127f <g_str_equal@plt+0x23fbf>
   30e02:	cmp    eax,0xffffffde
   30e05:	je     30ee5 <g_str_equal@plt+0x23c25>
   30e0b:	lea    rcx,[rip+0x2f75e]        # 60570 <_fini@@Base+0xde1c>
   30e12:	lea    rsi,[rip+0x2f487]        # 602a0 <_fini@@Base+0xdb4c>
   30e19:	lea    rdi,[rip+0x2f455]        # 60275 <_fini@@Base+0xdb21>
   30e20:	mov    edx,0x217
   30e25:	call   c390 <__assert_fail@plt>
   30e2a:	nop    WORD PTR [rax+rax*1+0x0]
   30e30:	lea    rdx,[rip+0x2f37b]        # 601b2 <_fini@@Base+0xda5e>
   30e37:	xor    esi,esi
   30e39:	mov    rdi,rbx
   30e3c:	xor    eax,eax
   30e3e:	call   30600 <g_str_equal@plt+0x23340>
   30e43:	jmp    30ba8 <g_str_equal@plt+0x238e8>
   30e48:	nop    DWORD PTR [rax+rax*1+0x0]
   30e50:	movzx  r13d,BYTE PTR [r12+0xc]
   30e56:	lea    r15,[r12+0xd]
   30e5b:	lea    r14,[rip+0x2f59a]        # 603fc <_fini@@Base+0xdca8>
   30e62:	call   2e7d0 <g_str_equal@plt+0x21510>
   30e67:	mov    rbp,rax
   30e6a:	lea    rax,[rsp+0x24]
   30e6f:	mov    QWORD PTR [rsp+0x8],rax
   30e74:	nop    DWORD PTR [rax+0x0]
   30e78:	movzx  eax,BYTE PTR [r15]
   30e7c:	test   al,al
   30e7e:	je     30d50 <g_str_equal@plt+0x23a90>
   30e84:	cmp    r13b,0x22
   30e88:	jne    30eb8 <g_str_equal@plt+0x23bf8>
   30e8a:	cmp    al,0x22
   30e8c:	je     30d50 <g_str_equal@plt+0x23a90>
   30e92:	cmp    al,0x5c
   30e94:	jne    30ec4 <g_str_equal@plt+0x23c04>
   30e96:	movzx  eax,BYTE PTR [r15+0x1]
   30e9b:	sub    eax,0x22
   30e9e:	cmp    al,0x53
   30ea0:	ja     31100 <g_str_equal@plt+0x23e40>
   30ea6:	movzx  eax,al
   30ea9:	movsxd rax,DWORD PTR [r14+rax*4]
   30ead:	add    rax,r14
   30eb0:	jmp    rax
   30eb2:	nop    WORD PTR [rax+rax*1+0x0]
   30eb8:	cmp    al,0x27
   30eba:	je     30d50 <g_str_equal@plt+0x23a90>
   30ec0:	cmp    al,0x5c
   30ec2:	je     30e96 <g_str_equal@plt+0x23bd6>
   30ec4:	add    r15,0x1
   30ec8:	mov    BYTE PTR [rsp+0x24],al
   30ecc:	mov    BYTE PTR [rsp+0x25],0x0
   30ed1:	mov    rsi,QWORD PTR [rsp+0x8]
   30ed6:	mov    rdi,rbp
   30ed9:	call   2e7e0 <g_str_equal@plt+0x21520>
   30ede:	jmp    30e78 <g_str_equal@plt+0x23bb8>
   30ee0:	lea    rbx,[r12+0xc]
   30ee5:	xor    esi,esi
   30ee7:	mov    rdi,rbx
   30eea:	call   d240 <strtod@plt>
   30eef:	call   2e170 <g_str_equal@plt+0x20eb0>
   30ef4:	mov    rbp,rax
   30ef7:	jmp    30d50 <g_str_equal@plt+0x23a90>
   30efc:	nop    DWORD PTR [rax+0x0]
   30f00:	mov    rsi,r12
   30f03:	mov    rdi,r14
   30f06:	call   30770 <g_str_equal@plt+0x234b0>
   30f0b:	jmp    30d50 <g_str_equal@plt+0x23a90>
   30f10:	mov    rsi,r12
   30f13:	mov    rdi,r15
   30f16:	call   30770 <g_str_equal@plt+0x234b0>
   30f1b:	jmp    30d50 <g_str_equal@plt+0x23a90>
   30f20:	mov    edi,0x1
   30f25:	call   2f920 <g_str_equal@plt+0x22660>
   30f2a:	mov    rbp,rax
   30f2d:	jmp    30d50 <g_str_equal@plt+0x23a90>
   30f32:	nop    WORD PTR [rax+rax*1+0x0]
   30f38:	call   c800 <__ctype_b_loc@plt>
   30f3d:	mov    r8,QWORD PTR [rax]
   30f40:	add    r15,0x2
   30f44:	mov    ecx,0xc
   30f49:	xor    edi,edi
   30f4b:	movzx  eax,BYTE PTR [r15]
   30f4f:	test   BYTE PTR [r8+rax*2+0x1],0x10
   30f55:	mov    rsi,rax
   30f58:	je     31291 <g_str_equal@plt+0x23fd1>
   30f5e:	lea    r9d,[rsi-0x30]
   30f62:	movsx  eax,al
   30f65:	cmp    r9b,0x9
   30f69:	ja     31130 <g_str_equal@plt+0x23e70>
   30f6f:	sub    eax,0x30
   30f72:	shl    eax,cl
   30f74:	sub    ecx,0x4
   30f77:	add    r15,0x1
   30f7b:	or     edi,eax
   30f7d:	cmp    ecx,0xfffffffc
   30f80:	jne    30f4b <g_str_equal@plt+0x23c8b>
   30f82:	cmp    di,0x7f
   30f86:	ja     31255 <g_str_equal@plt+0x23f95>
   30f8c:	mov    BYTE PTR [rsp+0x24],dil
   30f91:	mov    BYTE PTR [rsp+0x25],0x0
   30f96:	jmp    30ed1 <g_str_equal@plt+0x23c11>
   30f9b:	nop    DWORD PTR [rax+rax*1+0x0]
   30fa0:	lea    rsi,[rip+0x2f2cc]        # 60273 <_fini@@Base+0xdb1f>
   30fa7:	mov    rdi,rbp
   30faa:	add    r15,0x2
   30fae:	call   2e7e0 <g_str_equal@plt+0x21520>
   30fb3:	jmp    30e78 <g_str_equal@plt+0x23bb8>
   30fb8:	nop    DWORD PTR [rax+rax*1+0x0]
   30fc0:	lea    rsi,[rip+0x31010]        # 61fd7 <_fini@@Base+0xf883>
   30fc7:	mov    rdi,rbp
   30fca:	add    r15,0x2
   30fce:	call   2e7e0 <g_str_equal@plt+0x21520>
   30fd3:	jmp    30e78 <g_str_equal@plt+0x23bb8>
   30fd8:	nop    DWORD PTR [rax+rax*1+0x0]
   30fe0:	lea    rsi,[rip+0x2f288]        # 6026f <_fini@@Base+0xdb1b>
   30fe7:	mov    rdi,rbp
   30fea:	add    r15,0x2
   30fee:	call   2e7e0 <g_str_equal@plt+0x21520>
   30ff3:	jmp    30e78 <g_str_equal@plt+0x23bb8>
   30ff8:	nop    DWORD PTR [rax+rax*1+0x0]
   31000:	lea    rsi,[rip+0x2f266]        # 6026d <_fini@@Base+0xdb19>
   31007:	mov    rdi,rbp
   3100a:	add    r15,0x2
   3100e:	call   2e7e0 <g_str_equal@plt+0x21520>
   31013:	jmp    30e78 <g_str_equal@plt+0x23bb8>
   31018:	nop    DWORD PTR [rax+rax*1+0x0]
   31020:	lea    rsi,[rip+0x2efae]        # 5ffd5 <_fini@@Base+0xd881>
   31027:	mov    rdi,rbp
   3102a:	add    r15,0x2
   3102e:	call   2e7e0 <g_str_equal@plt+0x21520>
   31033:	jmp    30e78 <g_str_equal@plt+0x23bb8>
   31038:	nop    DWORD PTR [rax+rax*1+0x0]
   31040:	lea    rsi,[rip+0x2f870]        # 608b7 <_fini@@Base+0xe163>
   31047:	mov    rdi,rbp
   3104a:	add    r15,0x2
   3104e:	call   2e7e0 <g_str_equal@plt+0x21520>
   31053:	jmp    30e78 <g_str_equal@plt+0x23bb8>
   31058:	nop    DWORD PTR [rax+rax*1+0x0]
   31060:	lea    rsi,[rip+0x36a97]        # 67afe <_fini@@Base+0x153aa>
   31067:	mov    rdi,rbp
   3106a:	add    r15,0x2
   3106e:	call   2e7e0 <g_str_equal@plt+0x21520>
   31073:	jmp    30e78 <g_str_equal@plt+0x23bb8>
   31078:	nop    DWORD PTR [rax+rax*1+0x0]
   31080:	lea    rsi,[rip+0x30f8a]        # 62011 <_fini@@Base+0xf8bd>
   31087:	mov    rdi,rbp
   3108a:	add    r15,0x2
   3108e:	call   2e7e0 <g_str_equal@plt+0x21520>
   31093:	jmp    30e78 <g_str_equal@plt+0x23bb8>
   31098:	nop    DWORD PTR [rax+rax*1+0x0]
   310a0:	lea    rsi,[rip+0x2f1ca]        # 60271 <_fini@@Base+0xdb1d>
   310a7:	mov    rdi,rbp
   310aa:	add    r15,0x2
   310ae:	call   2e7e0 <g_str_equal@plt+0x21520>
   310b3:	jmp    30e78 <g_str_equal@plt+0x23bb8>
   310b8:	nop    DWORD PTR [rax+rax*1+0x0]
   310c0:	mov    rdi,QWORD PTR [rsp+0x10]
   310c5:	call   2e110 <g_str_equal@plt+0x20e50>
   310ca:	mov    rbp,rax
   310cd:	jmp    30d50 <g_str_equal@plt+0x23a90>
   310d2:	mov    edx,DWORD PTR [r13+0x0]
   310d6:	cmp    edx,0x2f
   310d9:	ja     314bf <g_str_equal@plt+0x241ff>
   310df:	mov    eax,edx
   310e1:	add    rax,QWORD PTR [r13+0x10]
   310e5:	add    edx,0x8
   310e8:	mov    DWORD PTR [r13+0x0],edx
   310ec:	movsxd rdi,DWORD PTR [rax]
   310ef:	call   2e110 <g_str_equal@plt+0x20e50>
   310f4:	mov    rbp,rax
   310f7:	jmp    30d50 <g_str_equal@plt+0x23a90>
   310fc:	nop    DWORD PTR [rax+0x0]
   31100:	lea    rdx,[rip+0x2f279]        # 60380 <_fini@@Base+0xdc2c>
   31107:	mov    rsi,r12
   3110a:	mov    rdi,rbx
   3110d:	xor    eax,eax
   3110f:	call   30600 <g_str_equal@plt+0x23340>
   31114:	jmp    30ba8 <g_str_equal@plt+0x238e8>
   31119:	nop    DWORD PTR [rax+0x0]
   31120:	xor    edi,edi
   31122:	call   2f920 <g_str_equal@plt+0x22660>
   31127:	mov    rbp,rax
   3112a:	jmp    30d50 <g_str_equal@plt+0x23a90>
   3112f:	nop
   31130:	lea    r9d,[rsi-0x61]
   31134:	cmp    r9b,0x5
   31138:	ja     311a0 <g_str_equal@plt+0x23ee0>
   3113a:	sub    eax,0x57
   3113d:	jmp    30f72 <g_str_equal@plt+0x23cb2>
   31142:	nop    WORD PTR [rax+rax*1+0x0]
   31148:	lea    rdx,[rip+0x2f0e9]        # 60238 <_fini@@Base+0xdae4>
   3114f:	mov    rsi,r14
   31152:	mov    rdi,rbx
   31155:	xor    eax,eax
   31157:	call   30600 <g_str_equal@plt+0x23340>
   3115c:	jmp    30ba8 <g_str_equal@plt+0x238e8>
   31161:	nop    DWORD PTR [rax+0x0]
   31168:	lea    rdx,[rip+0x2f09e]        # 6020d <_fini@@Base+0xdab9>
   3116f:	mov    rsi,rax
   31172:	mov    rdi,rbx
   31175:	xor    eax,eax
   31177:	call   30600 <g_str_equal@plt+0x23340>
   3117c:	jmp    30ba8 <g_str_equal@plt+0x238e8>
   31181:	nop    DWORD PTR [rax+0x0]
   31188:	lea    rdx,[rip+0x2f023]        # 601b2 <_fini@@Base+0xda5e>
   3118f:	xor    esi,esi
   31191:	mov    rdi,rbx
   31194:	xor    ebp,ebp
   31196:	call   30600 <g_str_equal@plt+0x23340>
   3119b:	jmp    30d50 <g_str_equal@plt+0x23a90>
   311a0:	sub    esi,0x41
   311a3:	sub    eax,0x37
   311a6:	cmp    sil,0x6
   311aa:	mov    esi,0xffffffff
   311af:	cmovae eax,esi
   311b2:	jmp    30f72 <g_str_equal@plt+0x23cb2>
   311b7:	lea    rdi,[rip+0x30eb9]        # 62077 <_fini@@Base+0xf923>
   311be:	mov    ecx,0x3
   311c3:	mov    rsi,rax
   311c6:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   311c8:	seta   dl
   311cb:	sbb    dl,0x0
   311ce:	test   dl,dl
   311d0:	je     313f0 <g_str_equal@plt+0x24130>
   311d6:	lea    rdi,[rip+0x2e367]        # 5f544 <_fini@@Base+0xcdf0>
   311dd:	mov    ecx,0x4
   311e2:	mov    rsi,rax
   311e5:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   311e7:	seta   dl
   311ea:	sbb    dl,0x0
   311ed:	test   dl,dl
   311ef:	je     3122b <g_str_equal@plt+0x23f6b>
   311f1:	lea    rdi,[rip+0x2987a]        # 5aa72 <_fini@@Base+0x831e>
   311f8:	mov    ecx,0x5
   311fd:	mov    rsi,rax
   31200:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   31202:	seta   dl
   31205:	sbb    dl,0x0
   31208:	test   dl,dl
   3120a:	je     3122b <g_str_equal@plt+0x23f6b>
   3120c:	lea    rdi,[rip+0x2f04e]        # 60261 <_fini@@Base+0xdb0d>
   31213:	mov    ecx,0x6
   31218:	mov    rsi,rax
   3121b:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   3121d:	seta   dl
   31220:	sbb    dl,0x0
   31223:	test   dl,dl
   31225:	jne    312ec <g_str_equal@plt+0x2402c>
   3122b:	mov    edx,DWORD PTR [r13+0x0]
   3122f:	cmp    edx,0x2f
   31232:	ja     314d0 <g_str_equal@plt+0x24210>
   31238:	mov    eax,edx
   3123a:	add    rax,QWORD PTR [r13+0x10]
   3123e:	add    edx,0x8
   31241:	mov    DWORD PTR [r13+0x0],edx
   31245:	mov    rdi,QWORD PTR [rax]
   31248:	call   2e140 <g_str_equal@plt+0x20e80>
   3124d:	mov    rbp,rax
   31250:	jmp    30d50 <g_str_equal@plt+0x23a90>
   31255:	mov    ecx,edi
   31257:	mov    eax,edi
   31259:	and    ecx,0x3f
   3125c:	shr    ax,0x6
   31260:	or     ecx,0xffffff80
   31263:	cmp    di,0x7ff
   31268:	ja     312aa <g_str_equal@plt+0x23fea>
   3126a:	or     eax,0xffffffc0
   3126d:	mov    BYTE PTR [rsp+0x25],cl
   31271:	mov    BYTE PTR [rsp+0x26],0x0
   31276:	mov    BYTE PTR [rsp+0x24],al
   3127a:	jmp    30ed1 <g_str_equal@plt+0x23c11>
   3127f:	mov    rdi,QWORD PTR [rsp+0x18]
   31284:	call   2e140 <g_str_equal@plt+0x20e80>
   31289:	mov    rbp,rax
   3128c:	jmp    30d50 <g_str_equal@plt+0x23a90>
   31291:	lea    rdx,[rip+0x2f0c0]        # 60358 <_fini@@Base+0xdc04>
   31298:	mov    rsi,r12
   3129b:	mov    rdi,rbx
   3129e:	xor    eax,eax
   312a0:	call   30600 <g_str_equal@plt+0x23340>
   312a5:	jmp    30ba8 <g_str_equal@plt+0x238e8>
   312aa:	shr    di,0xc
   312ae:	and    eax,0x3f
   312b1:	mov    BYTE PTR [rsp+0x26],cl
   312b5:	or     edi,0xffffffe0
   312b8:	or     eax,0xffffff80
   312bb:	mov    BYTE PTR [rsp+0x27],0x0
   312c0:	mov    BYTE PTR [rsp+0x24],dil
   312c5:	mov    BYTE PTR [rsp+0x25],al
   312c9:	jmp    30ed1 <g_str_equal@plt+0x23c11>
   312ce:	lea    rdx,[rip+0x2efaf]        # 60284 <_fini@@Base+0xdb30>
   312d5:	mov    rsi,rax
   312d8:	mov    rcx,r8
   312db:	mov    rdi,rbx
   312de:	xor    eax,eax
   312e0:	xor    ebp,ebp
   312e2:	call   30600 <g_str_equal@plt+0x23340>
   312e7:	jmp    30d50 <g_str_equal@plt+0x23a90>
   312ec:	lea    rdi,[rip+0x21a9b]        # 52d8e <_fini@@Base+0x63a>
   312f3:	mov    ecx,0x3
   312f8:	mov    rsi,rax
   312fb:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   312fd:	seta   dl
   31300:	sbb    dl,0x0
   31303:	test   dl,dl
   31305:	je     314f2 <g_str_equal@plt+0x24232>
   3130b:	lea    rsi,[rip+0x2e1ee]        # 5f500 <_fini@@Base+0xcdac>
   31312:	mov    rdi,rax
   31315:	call   cd60 <strcmp@plt>
   3131a:	test   eax,eax
   3131c:	jne    30bcb <g_str_equal@plt+0x2390b>
   31322:	mov    edx,DWORD PTR [r13+0x4]
   31326:	cmp    edx,0xaf
   3132c:	ja     314e1 <g_str_equal@plt+0x24221>
   31332:	mov    eax,edx
   31334:	add    rax,QWORD PTR [r13+0x10]
   31338:	add    edx,0x10
   3133b:	mov    DWORD PTR [r13+0x4],edx
   3133f:	movsd  xmm0,QWORD PTR [rax]
   31343:	call   2e170 <g_str_equal@plt+0x20eb0>
   31348:	mov    rbp,rax
   3134b:	jmp    30d50 <g_str_equal@plt+0x23a90>
   31350:	call   cd30 <__stack_chk_fail@plt>
   31355:	lea    rcx,[rip+0x2f294]        # 605f0 <_fini@@Base+0xde9c>
   3135c:	lea    rsi,[rip+0x2ef3d]        # 602a0 <_fini@@Base+0xdb4c>
   31363:	lea    rdi,[rip+0x2ef76]        # 602e0 <_fini@@Base+0xdb8c>
   3136a:	mov    edx,0x14a
   3136f:	call   c390 <__assert_fail@plt>
   31374:	lea    rcx,[rip+0x2f1e5]        # 60560 <_fini@@Base+0xde0c>
   3137b:	lea    rsi,[rip+0x2ef1e]        # 602a0 <_fini@@Base+0xdb4c>
   31382:	lea    rdi,[rip+0x2f01f]        # 603a8 <_fini@@Base+0xdc54>
   31389:	mov    edx,0x1bf
   3138e:	call   c390 <__assert_fail@plt>
   31393:	lea    rcx,[rip+0x2f1f6]        # 60590 <_fini@@Base+0xde3c>
   3139a:	lea    rsi,[rip+0x2eeff]        # 602a0 <_fini@@Base+0xdb4c>
   313a1:	lea    rdi,[rip+0x2ef60]        # 60308 <_fini@@Base+0xdbb4>
   313a8:	mov    edx,0x180
   313ad:	call   c390 <__assert_fail@plt>
   313b2:	lea    rcx,[rip+0x2f1b7]        # 60570 <_fini@@Base+0xde1c>
   313b9:	lea    rsi,[rip+0x2eee0]        # 602a0 <_fini@@Base+0xdb4c>
   313c0:	lea    rdi,[rip+0x2eea0]        # 60267 <_fini@@Base+0xdb13>
   313c7:	mov    edx,0x1f6
   313cc:	call   c390 <__assert_fail@plt>
   313d1:	lea    rcx,[rip+0x2f1a8]        # 60580 <_fini@@Base+0xde2c>
   313d8:	lea    rsi,[rip+0x2eec1]        # 602a0 <_fini@@Base+0xdb4c>
   313df:	lea    rdi,[rip+0x2ef4a]        # 60330 <_fini@@Base+0xdbdc>
   313e6:	mov    edx,0x1d5
   313eb:	call   c390 <__assert_fail@plt>
   313f0:	mov    edx,DWORD PTR [r13+0x0]
   313f4:	cmp    edx,0x2f
   313f7:	ja     31426 <g_str_equal@plt+0x24166>
   313f9:	mov    eax,edx
   313fb:	add    rax,QWORD PTR [r13+0x10]
   313ff:	add    edx,0x8
   31402:	mov    DWORD PTR [r13+0x0],edx
   31406:	mov    edi,DWORD PTR [rax]
   31408:	call   2e140 <g_str_equal@plt+0x20e80>
   3140d:	mov    rbp,rax
   31410:	jmp    30d50 <g_str_equal@plt+0x23a90>
   31415:	mov    rax,QWORD PTR [r13+0x8]
   31419:	lea    rdx,[rax+0x8]
   3141d:	mov    QWORD PTR [r13+0x8],rdx
   31421:	jmp    30b07 <g_str_equal@plt+0x23847>
   31426:	mov    rax,QWORD PTR [r13+0x8]
   3142a:	lea    rdx,[rax+0x8]
   3142e:	mov    QWORD PTR [r13+0x8],rdx
   31432:	jmp    31406 <g_str_equal@plt+0x24146>
   31434:	lea    rcx,[rip+0x2f135]        # 60570 <_fini@@Base+0xde1c>
   3143b:	lea    rsi,[rip+0x2ee5e]        # 602a0 <_fini@@Base+0xdb4c>
   31442:	lea    rdi,[rip+0x2ee2c]        # 60275 <_fini@@Base+0xdb21>
   31449:	mov    edx,0x210
   3144e:	call   c390 <__assert_fail@plt>
   31453:	mov    edx,DWORD PTR [r13+0x0]
   31457:	cmp    edx,0x2f
   3145a:	ja     314a3 <g_str_equal@plt+0x241e3>
   3145c:	mov    eax,edx
   3145e:	add    rax,QWORD PTR [r13+0x10]
   31462:	add    edx,0x8
   31465:	mov    DWORD PTR [r13+0x0],edx
   31469:	mov    rbp,QWORD PTR [rax]
   3146c:	jmp    30d50 <g_str_equal@plt+0x23a90>
   31471:	call   d4dd <g_str_equal@plt+0x21d>
   31476:	mov    edx,DWORD PTR [r13+0x0]
   3147a:	cmp    edx,0x2f
   3147d:	ja     314b1 <g_str_equal@plt+0x241f1>
   3147f:	mov    eax,edx
   31481:	add    rax,QWORD PTR [r13+0x10]
   31485:	add    edx,0x8
   31488:	mov    DWORD PTR [r13+0x0],edx
   3148c:	mov    eax,DWORD PTR [rax]
   3148e:	xor    edi,edi
   31490:	test   eax,eax
   31492:	setne  dil
   31496:	call   2f920 <g_str_equal@plt+0x22660>
   3149b:	mov    rbp,rax
   3149e:	jmp    30d50 <g_str_equal@plt+0x23a90>
   314a3:	mov    rax,QWORD PTR [r13+0x8]
   314a7:	lea    rdx,[rax+0x8]
   314ab:	mov    QWORD PTR [r13+0x8],rdx
   314af:	jmp    31469 <g_str_equal@plt+0x241a9>
   314b1:	mov    rax,QWORD PTR [r13+0x8]
   314b5:	lea    rdx,[rax+0x8]
   314b9:	mov    QWORD PTR [r13+0x8],rdx
   314bd:	jmp    3148c <g_str_equal@plt+0x241cc>
   314bf:	mov    rax,QWORD PTR [r13+0x8]
   314c3:	lea    rdx,[rax+0x8]
   314c7:	mov    QWORD PTR [r13+0x8],rdx
   314cb:	jmp    310ec <g_str_equal@plt+0x23e2c>
   314d0:	mov    rax,QWORD PTR [r13+0x8]
   314d4:	lea    rdx,[rax+0x8]
   314d8:	mov    QWORD PTR [r13+0x8],rdx
   314dc:	jmp    31245 <g_str_equal@plt+0x23f85>
   314e1:	mov    rax,QWORD PTR [r13+0x8]
   314e5:	lea    rdx,[rax+0x8]
   314e9:	mov    QWORD PTR [r13+0x8],rdx
   314ed:	jmp    3133f <g_str_equal@plt+0x2407f>
   314f2:	mov    edx,DWORD PTR [r13+0x0]
   314f6:	cmp    edx,0x2f
   314f9:	ja     31518 <g_str_equal@plt+0x24258>
   314fb:	mov    eax,edx
   314fd:	add    rax,QWORD PTR [r13+0x10]
   31501:	add    edx,0x8
   31504:	mov    DWORD PTR [r13+0x0],edx
   31508:	mov    rdi,QWORD PTR [rax]
   3150b:	call   2e7b0 <g_str_equal@plt+0x214f0>
   31510:	mov    rbp,rax
   31513:	jmp    30d50 <g_str_equal@plt+0x23a90>
   31518:	mov    rax,QWORD PTR [r13+0x8]
   3151c:	lea    rdx,[rax+0x8]
   31520:	mov    QWORD PTR [r13+0x8],rdx
   31524:	jmp    31508 <g_str_equal@plt+0x24248>
   31526:	nop    WORD PTR cs:[rax+rax*1+0x0]
   31530:	push   r13
   31532:	push   r12
   31534:	push   rbp
   31535:	push   rbx
   31536:	sub    rsp,0x8
   3153a:	test   rdi,rdi
   3153d:	je     315c8 <g_str_equal@plt+0x24308>
   31543:	mov    r13,rsi
   31546:	mov    rbp,rdi
   31549:	mov    edi,0x18
   3154e:	mov    r12,rdx
   31551:	call   ce00 <g_malloc0@plt>
   31556:	mov    rsi,r13
   31559:	mov    rbx,rax
   3155c:	mov    QWORD PTR [rax+0x10],rbp
   31560:	mov    rdi,rax
   31563:	lea    rbp,[rbx+0x10]
   31567:	call   309b0 <g_str_equal@plt+0x236f0>
   3156c:	mov    rsi,QWORD PTR [rbx]
   3156f:	mov    rdi,r12
   31572:	mov    r13,rax
   31575:	call   3a4c0 <g_str_equal@plt+0x2d200>
   3157a:	jmp    3158c <g_str_equal@plt+0x242cc>
   3157c:	nop    DWORD PTR [rax+0x0]
   31580:	lea    rdi,[rbx+0x8]
   31584:	mov    rsi,rbp
   31587:	call   30770 <g_str_equal@plt+0x234b0>
   3158c:	mov    rdi,QWORD PTR [rbx+0x10]
   31590:	call   ceb0 <g_queue_is_empty@plt>
   31595:	test   eax,eax
   31597:	je     31580 <g_str_equal@plt+0x242c0>
   31599:	mov    rdi,QWORD PTR [rbx+0x8]
   3159d:	call   d2b0 <g_free@plt>
   315a2:	mov    rdi,QWORD PTR [rbx+0x10]
   315a6:	call   c590 <g_queue_free@plt>
   315ab:	mov    rdi,rbx
   315ae:	call   d2b0 <g_free@plt>
   315b3:	add    rsp,0x8
   315b7:	mov    rax,r13
   315ba:	pop    rbx
   315bb:	pop    rbp
   315bc:	pop    r12
   315be:	pop    r13
   315c0:	ret    
   315c1:	nop    DWORD PTR [rax+0x0]
   315c8:	xor    r13d,r13d
   315cb:	jmp    315b3 <g_str_equal@plt+0x242f3>
   315cd:	nop    DWORD PTR [rax]
   315d0:	xor    edx,edx
   315d2:	jmp    31530 <g_str_equal@plt+0x24270>
   315d7:	nop    WORD PTR [rax+rax*1+0x0]
   315e0:	push   rbp
   315e1:	push   rbx
   315e2:	mov    rbp,rsi
   315e5:	mov    rbx,rdi
   315e8:	sub    rsp,0x8
   315ec:	jmp    31604 <g_str_equal@plt+0x24344>
   315ee:	xchg   ax,ax
   315f0:	movzx  edx,BYTE PTR [rbp+0x0]
   315f4:	test   dl,dl
   315f6:	je     31620 <g_str_equal@plt+0x24360>
   315f8:	cmp    al,dl
   315fa:	jne    31640 <g_str_equal@plt+0x24380>
   315fc:	add    rbx,0x1
   31600:	add    rbp,0x1
   31604:	movzx  eax,BYTE PTR [rbx]
   31607:	test   al,al
   31609:	jne    315f0 <g_str_equal@plt+0x24330>
   3160b:	cmp    BYTE PTR [rbp+0x0],0x0
   3160f:	sete   al
   31612:	add    rsp,0x8
   31616:	pop    rbx
   31617:	pop    rbp
   31618:	ret    
   31619:	nop    DWORD PTR [rax+0x0]
   31620:	cmp    al,0x2a
   31622:	jne    31637 <g_str_equal@plt+0x24377>
   31624:	nop    DWORD PTR [rax+0x0]
   31628:	add    rbx,0x1
   3162c:	movzx  eax,BYTE PTR [rbx]
   3162f:	cmp    al,0x2a
   31631:	je     31628 <g_str_equal@plt+0x24368>
   31633:	test   al,al
   31635:	je     3160b <g_str_equal@plt+0x2434b>
   31637:	add    rsp,0x8
   3163b:	xor    eax,eax
   3163d:	pop    rbx
   3163e:	pop    rbp
   3163f:	ret    
   31640:	cmp    al,0x2a
   31642:	jne    31637 <g_str_equal@plt+0x24377>
   31644:	lea    rsi,[rbp+0x1]
   31648:	mov    rdi,rbx
   3164b:	call   315e0 <g_str_equal@plt+0x24320>
   31650:	test   al,al
   31652:	jne    31612 <g_str_equal@plt+0x24352>
   31654:	add    rbx,0x1
   31658:	jmp    31604 <g_str_equal@plt+0x24344>
   3165a:	nop    WORD PTR [rax+rax*1+0x0]
   31660:	push   r12
   31662:	push   rbp
   31663:	mov    rbp,rdi
   31666:	push   rbx
   31667:	mov    rax,QWORD PTR [rdi]
   3166a:	test   rax,rax
   3166d:	je     316bd <g_str_equal@plt+0x243fd>
   3166f:	lea    r12,[rip+0x2efaa]        # 60620 <_fini@@Base+0xdecc>
   31676:	mov    rbx,rdi
   31679:	nop    DWORD PTR [rax+0x0]
   31680:	mov    edx,DWORD PTR [rip+0x25345a]        # 284ae0 <stdout@@GLIBC_2.2.5+0x198>
   31686:	lea    ecx,[rdx+0x1]
   31689:	mov    DWORD PTR [rax],edx
   3168b:	mov    rdx,QWORD PTR [rbx]
   3168e:	mov    DWORD PTR [rip+0x25344c],ecx        # 284ae0 <stdout@@GLIBC_2.2.5+0x198>
   31694:	cmp    DWORD PTR [rdx+0x4],0xffffffff
   31698:	je     316b1 <g_str_equal@plt+0x243f1>
   3169a:	mov    eax,DWORD PTR [rip+0x25343c]        # 284adc <stdout@@GLIBC_2.2.5+0x194>
   316a0:	cmp    eax,0x1f
   316a3:	ja     31700 <g_str_equal@plt+0x24440>
   316a5:	lea    ecx,[rax+0x1]
   316a8:	mov    DWORD PTR [rdx+0x4],eax
   316ab:	mov    DWORD PTR [rip+0x25342b],ecx        # 284adc <stdout@@GLIBC_2.2.5+0x194>
   316b1:	add    rbx,0x8
   316b5:	mov    rax,QWORD PTR [rbx]
   316b8:	test   rax,rax
   316bb:	jne    31680 <g_str_equal@plt+0x243c0>
   316bd:	mov    rax,QWORD PTR [rip+0x253424]        # 284ae8 <stdout@@GLIBC_2.2.5+0x1a0>
   316c4:	mov    rdi,QWORD PTR [rip+0x253425]        # 284af0 <stdout@@GLIBC_2.2.5+0x1a8>
   316cb:	mov    edx,0x8
   316d0:	lea    rsi,[rax+0x1]
   316d4:	call   c480 <g_realloc_n@plt>
   316d9:	mov    rdx,QWORD PTR [rip+0x253408]        # 284ae8 <stdout@@GLIBC_2.2.5+0x1a0>
   316e0:	mov    QWORD PTR [rip+0x253409],rax        # 284af0 <stdout@@GLIBC_2.2.5+0x1a8>
   316e7:	mov    QWORD PTR [rax+rdx*8],rbp
   316eb:	add    rdx,0x1
   316ef:	pop    rbx
   316f0:	mov    QWORD PTR [rip+0x2533f1],rdx        # 284ae8 <stdout@@GLIBC_2.2.5+0x1a0>
   316f7:	pop    rbp
   316f8:	pop    r12
   316fa:	ret    
   316fb:	nop    DWORD PTR [rax+rax*1+0x0]
   31700:	mov    rsi,QWORD PTR [rdx+0x8]
   31704:	mov    rdi,r12
   31707:	xor    eax,eax
   31709:	call   3ab70 <g_str_equal@plt+0x2d8b0>
   3170e:	jmp    316b1 <g_str_equal@plt+0x243f1>
   31710:	mov    QWORD PTR [rdi],0x0
   31717:	mov    QWORD PTR [rdi+0x8],0x0
   3171f:	mov    QWORD PTR [rdi+0x10],rsi
   31723:	ret    
   31724:	xchg   ax,ax
   31726:	nop    WORD PTR cs:[rax+rax*1+0x0]
   31730:	mov    r9,QWORD PTR [rip+0x2533b1]        # 284ae8 <stdout@@GLIBC_2.2.5+0x1a0>
   31737:	mov    rdx,QWORD PTR [rdi+0x8]
   3173b:	mov    rcx,rdi
   3173e:	mov    r10,QWORD PTR [rip+0x2533ab]        # 284af0 <stdout@@GLIBC_2.2.5+0x1a8>
   31745:	cmp    rdx,r9
   31748:	jae    317d3 <g_str_equal@plt+0x24513>
   3174e:	sub    rsp,0x8
   31752:	jmp    31786 <g_str_equal@plt+0x244c6>
   31754:	nop    DWORD PTR [rax+0x0]
   31758:	mov    rdi,QWORD PTR [rcx+0x10]
   3175c:	add    rdx,0x1
   31760:	mov    QWORD PTR [rcx],0x0
   31767:	mov    QWORD PTR [rcx+0x8],rdx
   3176b:	test   rdi,rdi
   3176e:	je     317bc <g_str_equal@plt+0x244fc>
   31770:	mov    rsi,QWORD PTR [r8+0x8]
   31774:	call   315e0 <g_str_equal@plt+0x24320>
   31779:	test   al,al
   3177b:	jne    317bc <g_str_equal@plt+0x244fc>
   3177d:	mov    rdx,QWORD PTR [rcx+0x8]
   31781:	cmp    rdx,r9
   31784:	jae    317c8 <g_str_equal@plt+0x24508>
   31786:	lea    rsi,[r10+rdx*8]
   3178a:	mov    rax,QWORD PTR [rcx]
   3178d:	mov    rdi,QWORD PTR [rsi]
   31790:	lea    r11,[rax*8+0x0]
   31798:	mov    r8,QWORD PTR [rdi+rax*8]
   3179c:	test   r8,r8
   3179f:	je     317bc <g_str_equal@plt+0x244fc>
   317a1:	add    rax,0x1
   317a5:	mov    QWORD PTR [rcx],rax
   317a8:	mov    rax,QWORD PTR [rsi]
   317ab:	cmp    QWORD PTR [rax+r11*1+0x8],0x0
   317b1:	je     31758 <g_str_equal@plt+0x24498>
   317b3:	mov    rdi,QWORD PTR [rcx+0x10]
   317b7:	test   rdi,rdi
   317ba:	jne    31770 <g_str_equal@plt+0x244b0>
   317bc:	mov    rax,r8
   317bf:	add    rsp,0x8
   317c3:	ret    
   317c4:	nop    DWORD PTR [rax+0x0]
   317c8:	xor    r8d,r8d
   317cb:	add    rsp,0x8
   317cf:	mov    rax,r8
   317d2:	ret    
   317d3:	xor    r8d,r8d
   317d6:	mov    rax,r8
   317d9:	ret    
   317da:	nop    WORD PTR [rax+rax*1+0x0]
   317e0:	push   r12
   317e2:	push   rbp
   317e3:	push   rbx
   317e4:	sub    rsp,0x20
   317e8:	mov    rax,QWORD PTR fs:0x28
   317f1:	mov    QWORD PTR [rsp+0x18],rax
   317f6:	xor    eax,eax
   317f8:	test   rdi,rdi
   317fb:	je     3185c <g_str_equal@plt+0x2459c>
   317fd:	mov    rbp,rdi
   31800:	mov    QWORD PTR [rsp],0x0
   31808:	mov    QWORD PTR [rsp+0x8],0x0
   31811:	mov    QWORD PTR [rsp+0x10],0x0
   3181a:	mov    r12,rsp
   3181d:	jmp    31830 <g_str_equal@plt+0x24570>
   3181f:	nop
   31820:	mov    rdi,QWORD PTR [rbx+0x8]
   31824:	mov    rsi,rbp
   31827:	call   cd60 <strcmp@plt>
   3182c:	test   eax,eax
   3182e:	je     31840 <g_str_equal@plt+0x24580>
   31830:	mov    rdi,r12
   31833:	call   31730 <g_str_equal@plt+0x24470>
   31838:	test   rax,rax
   3183b:	mov    rbx,rax
   3183e:	jne    31820 <g_str_equal@plt+0x24560>
   31840:	mov    rdx,QWORD PTR [rsp+0x18]
   31845:	xor    rdx,QWORD PTR fs:0x28
   3184e:	mov    rax,rbx
   31851:	jne    3187b <g_str_equal@plt+0x245bb>
   31853:	add    rsp,0x20
   31857:	pop    rbx
   31858:	pop    rbp
   31859:	pop    r12
   3185b:	ret    
   3185c:	lea    rcx,[rip+0x2ef2d]        # 60790 <_fini@@Base+0xe03c>
   31863:	lea    rsi,[rip+0x2ede6]        # 60650 <_fini@@Base+0xdefc>
   3186a:	lea    rdi,[rip+0x2bc04]        # 5d475 <_fini@@Base+0xad21>
   31871:	mov    edx,0x58
   31876:	call   c390 <__assert_fail@plt>
   3187b:	call   cd30 <__stack_chk_fail@plt>
   31880:	push   rbp
   31881:	push   rbx
   31882:	lea    rbp,[rip+0x2fda7]        # 61630 <_fini@@Base+0xeedc>
   31889:	sub    rsp,0x28
   3188d:	mov    rax,QWORD PTR fs:0x28
   31896:	mov    QWORD PTR [rsp+0x18],rax
   3189b:	xor    eax,eax
   3189d:	mov    QWORD PTR [rsp],0x0
   318a5:	mov    QWORD PTR [rsp+0x8],0x0
   318ae:	mov    rbx,rsp
   318b1:	mov    QWORD PTR [rsp+0x10],0x0
   318ba:	jmp    318da <g_str_equal@plt+0x2461a>
   318bc:	nop    DWORD PTR [rax+0x0]
   318c0:	mov    rcx,QWORD PTR [rax+0x8]
   318c4:	mov    rdi,QWORD PTR [rip+0x253075]        # 284940 <stderr@@GLIBC_2.2.5>
   318cb:	mov    rdx,rbp
   318ce:	mov    esi,0x1
   318d3:	xor    eax,eax
   318d5:	call   c2b0 <__fprintf_chk@plt>
   318da:	mov    rdi,rbx
   318dd:	call   31730 <g_str_equal@plt+0x24470>
   318e2:	test   rax,rax
   318e5:	jne    318c0 <g_str_equal@plt+0x24600>
   318e7:	mov    rax,QWORD PTR [rsp+0x18]
   318ec:	xor    rax,QWORD PTR fs:0x28
   318f5:	jne    318fe <g_str_equal@plt+0x2463e>
   318f7:	add    rsp,0x28
   318fb:	pop    rbx
   318fc:	pop    rbp
   318fd:	ret    
   318fe:	call   cd30 <__stack_chk_fail@plt>
   31903:	nop    DWORD PTR [rax]
   31906:	nop    WORD PTR cs:[rax+rax*1+0x0]
   31910:	push   r13
   31912:	push   r12
   31914:	mov    ecx,0x2
   31919:	push   rbp
   3191a:	push   rbx
   3191b:	mov    rbx,rdi
   3191e:	lea    rdi,[rip+0x2ee20]        # 60745 <_fini@@Base+0xdff1>
   31925:	mov    rsi,rbx
   31928:	sub    rsp,0x28
   3192c:	mov    rax,QWORD PTR fs:0x28
   31935:	mov    QWORD PTR [rsp+0x18],rax
   3193a:	xor    eax,eax
   3193c:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   3193e:	seta   al
   31941:	sbb    al,0x0
   31943:	test   al,al
   31945:	je     319d0 <g_str_equal@plt+0x24710>
   3194b:	lea    rdi,[rip+0x21483]        # 52dd5 <_fini@@Base+0x681>
   31952:	mov    ecx,0x5
   31957:	mov    rsi,rbx
   3195a:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   3195c:	seta   al
   3195f:	sbb    al,0x0
   31961:	test   al,al
   31963:	je     319d0 <g_str_equal@plt+0x24710>
   31965:	movzx  eax,BYTE PTR [rbx]
   31968:	cmp    al,0x2d
   3196a:	setne  bpl
   3196e:	je     31a18 <g_str_equal@plt+0x24758>
   31974:	mov    esi,0x2a
   31979:	mov    rdi,rbx
   3197c:	mov    r12,rsp
   3197f:	call   cc00 <strchr@plt>
   31984:	movzx  ebp,bpl
   31988:	mov    r13,rax
   3198b:	mov    QWORD PTR [rsp],0x0
   31993:	mov    QWORD PTR [rsp+0x8],0x0
   3199c:	mov    QWORD PTR [rsp+0x10],rbx
   319a1:	mov    rdi,r12
   319a4:	call   31730 <g_str_equal@plt+0x24470>
   319a9:	test   rax,rax
   319ac:	je     31a50 <g_str_equal@plt+0x24790>
   319b2:	cmp    BYTE PTR [rax+0x10],0x0
   319b6:	jne    31a00 <g_str_equal@plt+0x24740>
   319b8:	test   r13,r13
   319bb:	jne    319a1 <g_str_equal@plt+0x246e1>
   319bd:	lea    rdi,[rip+0x2ed14]        # 606d8 <_fini@@Base+0xdf84>
   319c4:	mov    rsi,rbx
   319c7:	xor    eax,eax
   319c9:	call   3ab70 <g_str_equal@plt+0x2d8b0>
   319ce:	jmp    319e3 <g_str_equal@plt+0x24723>
   319d0:	call   31880 <g_str_equal@plt+0x245c0>
   319d5:	mov    rax,0xfffffffffffffff8
   319dc:	cmp    QWORD PTR fs:[rax],0x0
   319e1:	je     31a48 <g_str_equal@plt+0x24788>
   319e3:	mov    rax,QWORD PTR [rsp+0x18]
   319e8:	xor    rax,QWORD PTR fs:0x28
   319f1:	jne    31a69 <g_str_equal@plt+0x247a9>
   319f3:	add    rsp,0x28
   319f7:	pop    rbx
   319f8:	pop    rbp
   319f9:	pop    r12
   319fb:	pop    r13
   319fd:	ret    
   319fe:	xchg   ax,ax
   31a00:	mov    esi,ebp
   31a02:	mov    rdi,rax
   31a05:	call   44160 <g_str_equal@plt+0x36ea0>
   31a0a:	test   r13,r13
   31a0d:	jne    319a1 <g_str_equal@plt+0x246e1>
   31a0f:	jmp    319e3 <g_str_equal@plt+0x24723>
   31a11:	nop    DWORD PTR [rax+0x0]
   31a18:	add    rbx,0x1
   31a1c:	jne    31974 <g_str_equal@plt+0x246b4>
   31a22:	lea    rcx,[rip+0x2ed47]        # 60770 <_fini@@Base+0xe01c>
   31a29:	lea    rsi,[rip+0x2ec60]        # 60690 <_fini@@Base+0xdf3c>
   31a30:	lea    rdi,[rip+0x2ed10]        # 60747 <_fini@@Base+0xdff3>
   31a37:	mov    edx,0x15
   31a3c:	call   c390 <__assert_fail@plt>
   31a41:	nop    DWORD PTR [rax+0x0]
   31a48:	xor    edi,edi
   31a4a:	call   c360 <exit@plt>
   31a4f:	nop
   31a50:	test   r13,r13
   31a53:	jne    319e3 <g_str_equal@plt+0x24723>
   31a55:	lea    rdi,[rip+0x2eca4]        # 60700 <_fini@@Base+0xdfac>
   31a5c:	mov    rsi,rbx
   31a5f:	call   3ab70 <g_str_equal@plt+0x2d8b0>
   31a64:	jmp    319e3 <g_str_equal@plt+0x24723>
   31a69:	call   cd30 <__stack_chk_fail@plt>
   31a6e:	xchg   ax,ax
   31a70:	push   r14
   31a72:	push   r13
   31a74:	push   r12
   31a76:	push   rbp
   31a77:	push   rbx
   31a78:	sub    rsp,0x430
   31a7f:	mov    rax,QWORD PTR fs:0x28
   31a88:	mov    QWORD PTR [rsp+0x428],rax
   31a90:	xor    eax,eax
   31a92:	test   rdi,rdi
   31a95:	je     31b6c <g_str_equal@plt+0x248ac>
   31a9b:	mov    r14,rsp
   31a9e:	mov    r12,rdi
   31aa1:	mov    rdi,r14
   31aa4:	call   3a8e0 <g_str_equal@plt+0x2d620>
   31aa9:	xor    esi,esi
   31aab:	mov    rdi,r12
   31aae:	call   3a9f0 <g_str_equal@plt+0x2d730>
   31ab3:	lea    rsi,[rip+0x2e527]        # 5ffe1 <_fini@@Base+0xd88d>
   31aba:	mov    rdi,r12
   31abd:	call   d050 <fopen64@plt>
   31ac2:	test   rax,rax
   31ac5:	mov    r13,rax
   31ac8:	je     31b99 <g_str_equal@plt+0x248d9>
   31ace:	lea    rbx,[rsp+0x20]
   31ad3:	xor    ebp,ebp
   31ad5:	nop    DWORD PTR [rax]
   31ad8:	mov    rdx,r13
   31adb:	mov    esi,0x400
   31ae0:	mov    rdi,rbx
   31ae3:	call   c5d0 <fgets@plt>
   31ae8:	test   rax,rax
   31aeb:	je     31b58 <g_str_equal@plt+0x24898>
   31aed:	add    rbp,0x1
   31af1:	mov    rdi,r12
   31af4:	mov    esi,ebp
   31af6:	call   3a9f0 <g_str_equal@plt+0x2d730>
   31afb:	mov    rdx,rbx
   31afe:	mov    ecx,DWORD PTR [rdx]
   31b00:	add    rdx,0x4
   31b04:	lea    eax,[rcx-0x1010101]
   31b0a:	not    ecx
   31b0c:	and    eax,ecx
   31b0e:	and    eax,0x80808080
   31b13:	je     31afe <g_str_equal@plt+0x2483e>
   31b15:	mov    ecx,eax
   31b17:	shr    ecx,0x10
   31b1a:	test   eax,0x8080
   31b1f:	cmove  eax,ecx
   31b22:	lea    rcx,[rdx+0x2]
   31b26:	mov    esi,eax
   31b28:	cmove  rdx,rcx
   31b2c:	add    sil,al
   31b2f:	sbb    rdx,0x3
   31b33:	sub    rdx,rbx
   31b36:	cmp    rdx,0x1
   31b3a:	jbe    31ad8 <g_str_equal@plt+0x24818>
   31b3c:	mov    BYTE PTR [rsp+rdx*1+0x1f],0x0
   31b41:	cmp    BYTE PTR [rsp+0x20],0x23
   31b46:	je     31ad8 <g_str_equal@plt+0x24818>
   31b48:	mov    rdi,rbx
   31b4b:	call   31910 <g_str_equal@plt+0x24650>
   31b50:	jmp    31ad8 <g_str_equal@plt+0x24818>
   31b52:	nop    WORD PTR [rax+rax*1+0x0]
   31b58:	mov    rdi,r13
   31b5b:	call   cea0 <fclose@plt>
   31b60:	test   eax,eax
   31b62:	jne    31b8f <g_str_equal@plt+0x248cf>
   31b64:	mov    rdi,r14
   31b67:	call   3a900 <g_str_equal@plt+0x2d640>
   31b6c:	mov    rax,QWORD PTR [rsp+0x428]
   31b74:	xor    rax,QWORD PTR fs:0x28
   31b7d:	jne    31bc0 <g_str_equal@plt+0x24900>
   31b7f:	add    rsp,0x430
   31b86:	pop    rbx
   31b87:	pop    rbp
   31b88:	pop    r12
   31b8a:	pop    r13
   31b8c:	pop    r14
   31b8e:	ret    
   31b8f:	xor    esi,esi
   31b91:	mov    rdi,r12
   31b94:	call   3a9f0 <g_str_equal@plt+0x2d730>
   31b99:	call   cc80 <__errno_location@plt>
   31b9e:	mov    edi,DWORD PTR [rax]
   31ba0:	call   ca10 <strerror@plt>
   31ba5:	lea    rdi,[rip+0x211e2]        # 52d8e <_fini@@Base+0x63a>
   31bac:	mov    rsi,rax
   31baf:	xor    eax,eax
   31bb1:	call   3aab0 <g_str_equal@plt+0x2d7f0>
   31bb6:	mov    edi,0x1
   31bbb:	call   c360 <exit@plt>
   31bc0:	call   cd30 <__stack_chk_fail@plt>
   31bc5:	nop
   31bc6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   31bd0:	test   rdi,rdi
   31bd3:	je     31be8 <g_str_equal@plt+0x24928>
   31bd5:	lea    rsi,[rip+0x2540a4]        # 285c80 <stdout@@GLIBC_2.2.5+0x1338>
   31bdc:	jmp    437f0 <g_str_equal@plt+0x36530>
   31be1:	nop    DWORD PTR [rax+0x0]
   31be8:	repz ret 
   31bea:	nop    WORD PTR [rax+rax*1+0x0]
   31bf0:	push   r13
   31bf2:	push   r12
   31bf4:	push   rbp
   31bf5:	push   rbx
   31bf6:	mov    rbp,rdi
   31bf9:	sub    rsp,0x28
   31bfd:	mov    esi,DWORD PTR [rip+0x252ed5]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   31c03:	mov    rax,QWORD PTR fs:0x28
   31c0c:	mov    QWORD PTR [rsp+0x18],rax
   31c11:	xor    eax,eax
   31c13:	mov    rbx,rsp
   31c16:	test   esi,esi
   31c18:	jne    31cb8 <g_str_equal@plt+0x249f8>
   31c1e:	mov    QWORD PTR [rsp],0x0
   31c26:	mov    QWORD PTR [rsp+0x8],0x0
   31c2f:	mov    QWORD PTR [rsp+0x10],0x0
   31c38:	nop    DWORD PTR [rax+rax*1+0x0]
   31c40:	mov    rdi,rbx
   31c43:	call   31730 <g_str_equal@plt+0x24470>
   31c48:	test   rax,rax
   31c4b:	je     31c98 <g_str_equal@plt+0x249d8>
   31c4d:	mov    edx,DWORD PTR [rax+0x4]
   31c50:	cmp    edx,0xffffffff
   31c53:	je     31c40 <g_str_equal@plt+0x24980>
   31c55:	cmp    BYTE PTR [rax+0x10],0x0
   31c59:	je     31c40 <g_str_equal@plt+0x24980>
   31c5b:	mov    ecx,DWORD PTR [rip+0x252e77]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   31c61:	test   ecx,ecx
   31c63:	je     31c40 <g_str_equal@plt+0x24980>
   31c65:	mov    ecx,edx
   31c67:	shr    rcx,0x6
   31c6b:	mov    rcx,QWORD PTR [rbp+rcx*8+0x8270]
   31c73:	bt     rcx,rdx
   31c77:	jae    31c40 <g_str_equal@plt+0x24980>
   31c79:	xor    edx,edx
   31c7b:	mov    rsi,rax
   31c7e:	mov    rdi,rbp
   31c81:	call   44210 <g_str_equal@plt+0x36f50>
   31c86:	mov    rdi,rbx
   31c89:	call   31730 <g_str_equal@plt+0x24470>
   31c8e:	test   rax,rax
   31c91:	jne    31c4d <g_str_equal@plt+0x2498d>
   31c93:	nop    DWORD PTR [rax+rax*1+0x0]
   31c98:	mov    rax,QWORD PTR [rsp+0x18]
   31c9d:	xor    rax,QWORD PTR fs:0x28
   31ca6:	jne    31d1a <g_str_equal@plt+0x24a5a>
   31ca8:	add    rsp,0x28
   31cac:	pop    rbx
   31cad:	pop    rbp
   31cae:	pop    r12
   31cb0:	pop    r13
   31cb2:	ret    
   31cb3:	nop    DWORD PTR [rax+rax*1+0x0]
   31cb8:	mov    eax,DWORD PTR [rip+0x250ea6]        # 282b64 <g_test_config_vars+0x17a4>
   31cbe:	mov    rdx,rax
   31cc1:	shr    rax,0x6
   31cc5:	mov    rax,QWORD PTR [rdi+rax*8+0x8270]
   31ccd:	bt     rax,rdx
   31cd1:	jae    31c1e <g_str_equal@plt+0x2495e>
   31cd7:	test   BYTE PTR [rip+0x2541c3],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   31cde:	je     31c1e <g_str_equal@plt+0x2495e>
   31ce4:	xor    esi,esi
   31ce6:	mov    rdi,rbx
   31ce9:	call   c3e0 <gettimeofday@plt>
   31cee:	mov    r13,QWORD PTR [rsp+0x8]
   31cf3:	mov    r12,QWORD PTR [rsp]
   31cf7:	call   c5b0 <getpid@plt>
   31cfc:	lea    rdi,[rip+0x2ea1d]        # 60720 <_fini@@Base+0xdfcc>
   31d03:	mov    esi,eax
   31d05:	mov    r8,rbp
   31d08:	mov    rcx,r13
   31d0b:	mov    rdx,r12
   31d0e:	xor    eax,eax
   31d10:	call   431a0 <g_str_equal@plt+0x35ee0>
   31d15:	jmp    31c1e <g_str_equal@plt+0x2495e>
   31d1a:	call   cd30 <__stack_chk_fail@plt>
   31d1f:	nop
   31d20:	mov    eax,0x1
   31d25:	ret    
   31d26:	nop    WORD PTR cs:[rax+rax*1+0x0]
   31d30:	push   rbp
   31d31:	push   rbx
   31d32:	mov    rbx,rdi
   31d35:	lea    rdi,[rip+0x210ad]        # 52de9 <_fini@@Base+0x695>
   31d3c:	sub    rsp,0x8
   31d40:	call   3be10 <g_str_equal@plt+0x2eb50>
   31d45:	mov    edx,0x1
   31d4a:	mov    rsi,rbx
   31d4d:	mov    rdi,rax
   31d50:	call   40bf0 <g_str_equal@plt+0x33930>
   31d55:	test   rax,rax
   31d58:	je     31dcb <g_str_equal@plt+0x24b0b>
   31d5a:	lea    rsi,[rip+0x2e9f2]        # 60753 <_fini@@Base+0xdfff>
   31d61:	mov    rdi,rax
   31d64:	mov    rbx,rax
   31d67:	call   400b0 <g_str_equal@plt+0x32df0>
   31d6c:	test   rax,rax
   31d6f:	je     31d88 <g_str_equal@plt+0x24ac8>
   31d71:	lea    rsi,[rip+0x2e9db]        # 60753 <_fini@@Base+0xdfff>
   31d78:	mov    rdi,rbx
   31d7b:	call   400b0 <g_str_equal@plt+0x32df0>
   31d80:	mov    rdi,rax
   31d83:	call   31910 <g_str_equal@plt+0x24650>
   31d88:	lea    rsi,[rip+0x2e9cb]        # 6075a <_fini@@Base+0xe006>
   31d8f:	mov    rdi,rbx
   31d92:	call   400b0 <g_str_equal@plt+0x32df0>
   31d97:	mov    rdi,rax
   31d9a:	call   31a70 <g_str_equal@plt+0x247b0>
   31d9f:	lea    rsi,[rip+0x21002]        # 52da8 <_fini@@Base+0x654>
   31da6:	mov    rdi,rbx
   31da9:	call   400b0 <g_str_equal@plt+0x32df0>
   31dae:	mov    rdi,rax
   31db1:	call   c370 <g_strdup@plt>
   31db6:	mov    rdi,rbx
   31db9:	mov    rbp,rax
   31dbc:	call   40a50 <g_str_equal@plt+0x33790>
   31dc1:	add    rsp,0x8
   31dc5:	mov    rax,rbp
   31dc8:	pop    rbx
   31dc9:	pop    rbp
   31dca:	ret    
   31dcb:	mov    edi,0x1
   31dd0:	call   c360 <exit@plt>
   31dd5:	nop
   31dd6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   31de0:	mov    eax,DWORD PTR [rip+0x252cf6]        # 284adc <stdout@@GLIBC_2.2.5+0x194>
   31de6:	ret    
   31de7:	nop    WORD PTR [rax+rax*1+0x0]
   31df0:	sub    rsp,0x8
   31df4:	mov    rax,QWORD PTR [rip+0x2550e5]        # 286ee0 <stdout@@GLIBC_2.2.5+0x2598>
   31dfb:	not    rax
   31dfe:	test   rdi,rax
   31e01:	je     31e28 <g_str_equal@plt+0x24b68>
   31e03:	lea    r8,[rip+0x2e99e]        # 607a8 <_fini@@Base+0xe054>
   31e0a:	lea    rcx,[rip+0x2eacf]        # 608e0 <_fini@@Base+0xe18c>
   31e11:	lea    rsi,[rip+0x2e9c0]        # 607d8 <_fini@@Base+0xe084>
   31e18:	mov    edx,0x4e
   31e1d:	xor    edi,edi
   31e1f:	call   c6b0 <g_assertion_message_expr@plt>
   31e24:	nop    DWORD PTR [rax+0x0]
   31e28:	test   rax,rsi
   31e2b:	jne    31e40 <g_str_equal@plt+0x24b80>
   31e2d:	call   c110 <mprotect@plt>
   31e32:	test   eax,eax
   31e34:	jne    31e61 <g_str_equal@plt+0x24ba1>
   31e36:	add    rsp,0x8
   31e3a:	ret    
   31e3b:	nop    DWORD PTR [rax+rax*1+0x0]
   31e40:	lea    r8,[rip+0x2e9c9]        # 60810 <_fini@@Base+0xe0bc>
   31e47:	lea    rcx,[rip+0x2ea92]        # 608e0 <_fini@@Base+0xe18c>
   31e4e:	lea    rsi,[rip+0x2e983]        # 607d8 <_fini@@Base+0xe084>
   31e55:	mov    edx,0x4f
   31e5a:	xor    edi,edi
   31e5c:	call   c6b0 <g_assertion_message_expr@plt>
   31e61:	call   cc80 <__errno_location@plt>
   31e66:	mov    edi,DWORD PTR [rax]
   31e68:	call   ca10 <strerror@plt>
   31e6d:	lea    rsi,[rip+0x2ea6c]        # 608e0 <_fini@@Base+0xe18c>
   31e74:	lea    rdi,[rip+0x2ea1a]        # 60895 <_fini@@Base+0xe141>
   31e7b:	mov    rdx,rax
   31e7e:	xor    eax,eax
   31e80:	call   3aab0 <g_str_equal@plt+0x2d7f0>
   31e85:	mov    eax,0xffffffff
   31e8a:	jmp    31e36 <g_str_equal@plt+0x24b76>
   31e8c:	nop    DWORD PTR [rax+0x0]
   31e90:	push   rbp
   31e91:	push   rbx
   31e92:	sub    rsp,0x38
   31e96:	mov    rax,QWORD PTR fs:0x28
   31e9f:	mov    QWORD PTR [rsp+0x28],rax
   31ea4:	xor    eax,eax
   31ea6:	cmp    DWORD PTR [rip+0x25065f],0xffffffff        # 28250c <g_test_config_vars+0x114c>
   31ead:	je     31ed0 <g_str_equal@plt+0x24c10>
   31eaf:	mov    rax,QWORD PTR [rsp+0x28]
   31eb4:	xor    rax,QWORD PTR fs:0x28
   31ebd:	jne    31fb1 <g_str_equal@plt+0x24cf1>
   31ec3:	add    rsp,0x38
   31ec7:	pop    rbx
   31ec8:	pop    rbp
   31ec9:	ret    
   31eca:	nop    WORD PTR [rax+rax*1+0x0]
   31ed0:	pxor   xmm0,xmm0
   31ed4:	lea    rdi,[rip+0x28bc7]        # 5aaa2 <_fini@@Base+0x834e>
   31edb:	xor    edx,edx
   31edd:	mov    ecx,0x1
   31ee2:	mov    esi,0x2
   31ee7:	mov    QWORD PTR [rsp+0x12],0x0
   31ef0:	mov    DWORD PTR [rsp+0x1a],0x0
   31ef8:	movups XMMWORD PTR [rsp+0x2],xmm0
   31efd:	mov    WORD PTR [rsp+0x1e],dx
   31f02:	mov    WORD PTR [rsp],cx
   31f06:	call   ca20 <open64@plt>
   31f0b:	test   eax,eax
   31f0d:	mov    ebx,eax
   31f0f:	js     31f50 <g_str_equal@plt+0x24c90>
   31f11:	mov    edi,eax
   31f13:	mov    rdx,rsp
   31f16:	mov    esi,0x24
   31f1b:	xor    eax,eax
   31f1d:	call   d230 <fcntl@plt>
   31f22:	mov    edi,ebx
   31f24:	mov    ebp,eax
   31f26:	call   c230 <close@plt>
   31f2b:	test   ebp,ebp
   31f2d:	jne    31f98 <g_str_equal@plt+0x24cd8>
   31f2f:	mov    DWORD PTR [rip+0x2505d3],0x25        # 28250c <g_test_config_vars+0x114c>
   31f39:	mov    DWORD PTR [rip+0x2505c5],0x24        # 282508 <g_test_config_vars+0x1148>
   31f43:	jmp    31eaf <g_str_equal@plt+0x24bef>
   31f48:	nop    DWORD PTR [rax+rax*1+0x0]
   31f50:	call   cc80 <__errno_location@plt>
   31f55:	mov    edi,DWORD PTR [rax]
   31f57:	call   ca10 <strerror@plt>
   31f5c:	mov    rdi,QWORD PTR [rip+0x2529dd]        # 284940 <stderr@@GLIBC_2.2.5>
   31f63:	lea    rdx,[rip+0x2e8ce]        # 60838 <_fini@@Base+0xe0e4>
   31f6a:	mov    rcx,rax
   31f6d:	mov    esi,0x1
   31f72:	xor    eax,eax
   31f74:	call   c2b0 <__fprintf_chk@plt>
   31f79:	mov    DWORD PTR [rip+0x250589],0x6        # 28250c <g_test_config_vars+0x114c>
   31f83:	mov    DWORD PTR [rip+0x25057b],0x5        # 282508 <g_test_config_vars+0x1148>
   31f8d:	jmp    31eaf <g_str_equal@plt+0x24bef>
   31f92:	nop    WORD PTR [rax+rax*1+0x0]
   31f98:	mov    DWORD PTR [rip+0x25056a],0x6        # 28250c <g_test_config_vars+0x114c>
   31fa2:	mov    DWORD PTR [rip+0x25055c],0x5        # 282508 <g_test_config_vars+0x1148>
   31fac:	jmp    31eaf <g_str_equal@plt+0x24bef>
   31fb1:	call   cd30 <__stack_chk_fail@plt>
   31fb6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   31fc0:	push   rbp
   31fc1:	push   rbx
   31fc2:	mov    ebp,edi
   31fc4:	pxor   xmm0,xmm0
   31fc8:	sub    rsp,0x38
   31fcc:	mov    rax,QWORD PTR fs:0x28
   31fd5:	mov    QWORD PTR [rsp+0x28],rax
   31fda:	xor    eax,eax
   31fdc:	xor    eax,eax
   31fde:	mov    QWORD PTR [rsp+0x12],0x0
   31fe7:	mov    DWORD PTR [rsp+0x1a],0x0
   31fef:	movups XMMWORD PTR [rsp+0x2],xmm0
   31ff4:	mov    WORD PTR [rsp+0x1e],ax
   31ff9:	mov    WORD PTR [rsp],cx
   31ffd:	mov    rbx,rsp
   32000:	mov    QWORD PTR [rsp+0x8],rsi
   32005:	mov    QWORD PTR [rsp+0x10],rdx
   3200a:	call   31e90 <g_str_equal@plt+0x24bd0>
   3200f:	jmp    32024 <g_str_equal@plt+0x24d64>
   32011:	nop    DWORD PTR [rax+0x0]
   32018:	call   cc80 <__errno_location@plt>
   3201d:	mov    eax,DWORD PTR [rax]
   3201f:	cmp    eax,0x4
   32022:	jne    32058 <g_str_equal@plt+0x24d98>
   32024:	mov    esi,DWORD PTR [rip+0x2504e2]        # 28250c <g_test_config_vars+0x114c>
   3202a:	xor    eax,eax
   3202c:	mov    rdx,rbx
   3202f:	mov    edi,ebp
   32031:	call   d230 <fcntl@plt>
   32036:	cmp    eax,0xffffffff
   32039:	je     32018 <g_str_equal@plt+0x24d58>
   3203b:	xor    eax,eax
   3203d:	mov    rcx,QWORD PTR [rsp+0x28]
   32042:	xor    rcx,QWORD PTR fs:0x28
   3204b:	jne    3205c <g_str_equal@plt+0x24d9c>
   3204d:	add    rsp,0x38
   32051:	pop    rbx
   32052:	pop    rbp
   32053:	ret    
   32054:	nop    DWORD PTR [rax+0x0]
   32058:	neg    eax
   3205a:	jmp    3203d <g_str_equal@plt+0x24d7d>
   3205c:	call   cd30 <__stack_chk_fail@plt>
   32061:	nop    DWORD PTR [rax+rax*1+0x0]
   32066:	nop    WORD PTR cs:[rax+rax*1+0x0]
   32070:	sub    rsp,0x18
   32074:	mov    r8d,0x4
   3207a:	mov    edx,0x3
   3207f:	lea    rcx,[rsp+0xc]
   32084:	mov    DWORD PTR [rsp+0xc],esi
   32088:	mov    esi,0x6
   3208d:	call   c540 <setsockopt@plt>
   32092:	add    rsp,0x18
   32096:	ret    
   32097:	nop    WORD PTR [rax+rax*1+0x0]
   320a0:	sub    rsp,0x18
   320a4:	mov    edx,0x1
   320a9:	mov    r8d,0x4
   320af:	lea    rcx,[rsp+0x4]
   320b4:	mov    esi,0x6
   320b9:	mov    DWORD PTR [rsp+0x4],0x1
   320c1:	mov    rax,QWORD PTR fs:0x28
   320ca:	mov    QWORD PTR [rsp+0x8],rax
   320cf:	xor    eax,eax
   320d1:	call   c540 <setsockopt@plt>
   320d6:	mov    rdx,QWORD PTR [rsp+0x8]
   320db:	xor    rdx,QWORD PTR fs:0x28
   320e4:	jne    320eb <g_str_equal@plt+0x24e2b>
   320e6:	add    rsp,0x18
   320ea:	ret    
   320eb:	call   cd30 <__stack_chk_fail@plt>
   320f0:	cmp    edx,0xffffffff
   320f3:	je     32100 <g_str_equal@plt+0x24e40>
   320f5:	jmp    ccd0 <madvise@plt>
   320fa:	nop    WORD PTR [rax+rax*1+0x0]
   32100:	push   rbx
   32101:	mov    ebx,edx
   32103:	call   cc80 <__errno_location@plt>
   32108:	mov    DWORD PTR [rax],0x16
   3210e:	mov    eax,ebx
   32110:	pop    rbx
   32111:	ret    
   32112:	nop    DWORD PTR [rax+0x0]
   32116:	nop    WORD PTR cs:[rax+rax*1+0x0]
   32120:	mov    edx,0x7
   32125:	jmp    31df0 <g_str_equal@plt+0x24b30>
   3212a:	nop    WORD PTR [rax+rax*1+0x0]
   32130:	xor    edx,edx
   32132:	jmp    31df0 <g_str_equal@plt+0x24b30>
   32137:	nop    WORD PTR [rax+rax*1+0x0]
   32140:	xor    edx,edx
   32142:	mov    esi,0x406
   32147:	xor    eax,eax
   32149:	jmp    d230 <fcntl@plt>
   3214e:	xchg   ax,ax
   32150:	sub    rsp,0x8
   32154:	call   31e90 <g_str_equal@plt+0x24bd0>
   32159:	cmp    DWORD PTR [rip+0x2503ac],0x25        # 28250c <g_test_config_vars+0x114c>
   32160:	sete   al
   32163:	add    rsp,0x8
   32167:	ret    
   32168:	nop    DWORD PTR [rax+rax*1+0x0]
   32170:	movzx  ecx,cl
   32173:	jmp    31fc0 <g_str_equal@plt+0x24d00>
   32178:	nop    DWORD PTR [rax+rax*1+0x0]
   32180:	mov    ecx,0x2
   32185:	jmp    31fc0 <g_str_equal@plt+0x24d00>
   3218a:	nop    WORD PTR [rax+rax*1+0x0]
   32190:	push   rbx
   32191:	pxor   xmm0,xmm0
   32195:	movzx  ecx,cl
   32198:	mov    ebx,edi
   3219a:	sub    rsp,0x30
   3219e:	mov    rax,QWORD PTR fs:0x28
   321a7:	mov    QWORD PTR [rsp+0x28],rax
   321ac:	xor    eax,eax
   321ae:	xor    eax,eax
   321b0:	mov    QWORD PTR [rsp+0x12],0x0
   321b9:	mov    WORD PTR [rsp],cx
   321bd:	movups XMMWORD PTR [rsp+0x2],xmm0
   321c2:	mov    WORD PTR [rsp+0x1e],ax
   321c7:	mov    QWORD PTR [rsp+0x8],rsi
   321cc:	mov    QWORD PTR [rsp+0x10],rdx
   321d1:	mov    DWORD PTR [rsp+0x1a],0x0
   321d9:	call   31e90 <g_str_equal@plt+0x24bd0>
   321de:	mov    esi,DWORD PTR [rip+0x250324]        # 282508 <g_test_config_vars+0x1148>
   321e4:	xor    eax,eax
   321e6:	mov    rdx,rsp
   321e9:	mov    edi,ebx
   321eb:	call   d230 <fcntl@plt>
   321f0:	cmp    eax,0xffffffff
   321f3:	je     32220 <g_str_equal@plt+0x24f60>
   321f5:	cmp    WORD PTR [rsp],0x2
   321fa:	mov    eax,0x0
   321ff:	mov    edx,0xfffffff5
   32204:	cmovne eax,edx
   32207:	mov    rdi,QWORD PTR [rsp+0x28]
   3220c:	xor    rdi,QWORD PTR fs:0x28
   32215:	jne    3222b <g_str_equal@plt+0x24f6b>
   32217:	add    rsp,0x30
   3221b:	pop    rbx
   3221c:	ret    
   3221d:	nop    DWORD PTR [rax]
   32220:	call   cc80 <__errno_location@plt>
   32225:	mov    eax,DWORD PTR [rax]
   32227:	neg    eax
   32229:	jmp    32207 <g_str_equal@plt+0x24f47>
   3222b:	call   cd30 <__stack_chk_fail@plt>
   32230:	push   r12
   32232:	push   rbp
   32233:	mov    rbp,rdi
   32236:	push   rbx
   32237:	mov    ebx,esi
   32239:	lea    rsi,[rip+0x2e66d]        # 608ad <_fini@@Base+0xe159>
   32240:	sub    rsp,0x70
   32244:	mov    QWORD PTR [rsp+0x50],rdx
   32249:	lea    rdx,[rsp+0x18]
   3224e:	mov    rax,QWORD PTR fs:0x28
   32257:	mov    QWORD PTR [rsp+0x38],rax
   3225c:	xor    eax,eax
   3225e:	call   32ab0 <g_str_equal@plt+0x257f0>
   32263:	test   eax,eax
   32265:	jne    32310 <g_str_equal@plt+0x25050>
   3226b:	mov    edx,ebx
   3226d:	and    edx,0x40
   32270:	jne    322e0 <g_str_equal@plt+0x25020>
   32272:	mov    esi,ebx
   32274:	mov    rdi,rbp
   32277:	xor    eax,eax
   32279:	or     esi,0x80000
   3227f:	call   ca20 <open64@plt>
   32284:	cmp    eax,0xffffffff
   32287:	mov    ebp,eax
   32289:	je     322b0 <g_str_equal@plt+0x24ff0>
   3228b:	mov    rcx,QWORD PTR [rsp+0x38]
   32290:	xor    rcx,QWORD PTR fs:0x28
   32299:	mov    eax,ebp
   3229b:	jne    3244e <g_str_equal@plt+0x2518e>
   322a1:	add    rsp,0x70
   322a5:	pop    rbx
   322a6:	pop    rbp
   322a7:	pop    r12
   322a9:	ret    
   322aa:	nop    WORD PTR [rax+rax*1+0x0]
   322b0:	call   cc80 <__errno_location@plt>
   322b5:	cmp    DWORD PTR [rax],0x16
   322b8:	mov    r12,rax
   322bb:	jne    3228b <g_str_equal@plt+0x24fcb>
   322bd:	and    bh,0x40
   322c0:	je     3228b <g_str_equal@plt+0x24fcb>
   322c2:	lea    rdi,[rip+0x2e5a7]        # 60870 <_fini@@Base+0xe11c>
   322c9:	xor    eax,eax
   322cb:	call   3aab0 <g_str_equal@plt+0x2d7f0>
   322d0:	mov    DWORD PTR [r12],0x16
   322d8:	jmp    3228b <g_str_equal@plt+0x24fcb>
   322da:	nop    WORD PTR [rax+rax*1+0x0]
   322e0:	lea    rax,[rsp+0x90]
   322e8:	mov    DWORD PTR [rsp+0x20],0x10
   322f0:	mov    edx,DWORD PTR [rsp+0x50]
   322f4:	mov    QWORD PTR [rsp+0x28],rax
   322f9:	lea    rax,[rsp+0x40]
   322fe:	mov    QWORD PTR [rsp+0x30],rax
   32303:	jmp    32272 <g_str_equal@plt+0x24fb2>
   32308:	nop    DWORD PTR [rax+rax*1+0x0]
   32310:	mov    rdi,QWORD PTR [rsp+0x18]
   32315:	call   334c0 <g_str_equal@plt+0x26200>
   3231a:	movsxd r12,eax
   3231d:	cmp    r12,0xffffffffffffffff
   32321:	mov    rbp,r12
   32324:	je     32431 <g_str_equal@plt+0x25171>
   3232a:	mov    rdi,r12
   3232d:	mov    esi,ebx
   3232f:	call   43f80 <g_str_equal@plt+0x36cc0>
   32334:	test   eax,eax
   32336:	mov    edi,eax
   32338:	js     32416 <g_str_equal@plt+0x25156>
   3233e:	xor    edx,edx
   32340:	xor    eax,eax
   32342:	mov    esi,0x406
   32347:	call   d230 <fcntl@plt>
   3234c:	cmp    eax,0xffffffff
   3234f:	mov    ebp,eax
   32351:	je     32441 <g_str_equal@plt+0x25181>
   32357:	mov    edi,eax
   32359:	mov    esi,0x3
   3235e:	xor    eax,eax
   32360:	call   d230 <fcntl@plt>
   32365:	cmp    eax,0xffffffff
   32368:	je     323de <g_str_equal@plt+0x2511e>
   3236a:	xor    eax,ebx
   3236c:	test   eax,0x101000
   32371:	jne    32400 <g_str_equal@plt+0x25140>
   32377:	xor    eax,eax
   32379:	mov    edx,ebx
   3237b:	mov    esi,0x4
   32380:	mov    edi,ebp
   32382:	call   d230 <fcntl@plt>
   32387:	cmp    eax,0xffffffff
   3238a:	je     323de <g_str_equal@plt+0x2511e>
   3238c:	test   bh,0x2
   3238f:	jne    323d0 <g_str_equal@plt+0x25110>
   32391:	and    ebx,0xc0
   32397:	cmp    ebx,0xc0
   3239d:	je     323d0 <g_str_equal@plt+0x25110>
   3239f:	mov    esi,ebp
   323a1:	mov    rdi,r12
   323a4:	call   43f60 <g_str_equal@plt+0x36ca0>
   323a9:	cmp    eax,0xffffffff
   323ac:	mov    ebx,eax
   323ae:	jne    3228b <g_str_equal@plt+0x24fcb>
   323b4:	mov    edi,ebp
   323b6:	mov    ebp,ebx
   323b8:	call   c230 <close@plt>
   323bd:	call   cc80 <__errno_location@plt>
   323c2:	mov    DWORD PTR [rax],0x16
   323c8:	jmp    3228b <g_str_equal@plt+0x24fcb>
   323cd:	nop    DWORD PTR [rax]
   323d0:	xor    esi,esi
   323d2:	mov    edi,ebp
   323d4:	call   caf0 <ftruncate64@plt>
   323d9:	cmp    eax,0xffffffff
   323dc:	jne    3239f <g_str_equal@plt+0x250df>
   323de:	call   cc80 <__errno_location@plt>
   323e3:	mov    r12d,DWORD PTR [rax]
   323e6:	mov    rbx,rax
   323e9:	mov    edi,ebp
   323eb:	call   c230 <close@plt>
   323f0:	mov    DWORD PTR [rbx],r12d
   323f3:	mov    ebp,0xffffffff
   323f8:	jmp    3228b <g_str_equal@plt+0x24fcb>
   323fd:	nop    DWORD PTR [rax]
   32400:	call   cc80 <__errno_location@plt>
   32405:	mov    r12d,0x16
   3240b:	mov    rbx,rax
   3240e:	mov    DWORD PTR [rax],0x16
   32414:	jmp    323e9 <g_str_equal@plt+0x25129>
   32416:	mov    DWORD PTR [rsp+0xc],eax
   3241a:	mov    ebp,0xffffffff
   3241f:	call   cc80 <__errno_location@plt>
   32424:	mov    edi,DWORD PTR [rsp+0xc]
   32428:	neg    edi
   3242a:	mov    DWORD PTR [rax],edi
   3242c:	jmp    3228b <g_str_equal@plt+0x24fcb>
   32431:	call   cc80 <__errno_location@plt>
   32436:	mov    DWORD PTR [rax],0x16
   3243c:	jmp    3228b <g_str_equal@plt+0x24fcb>
   32441:	call   cc80 <__errno_location@plt>
   32446:	mov    rbx,rax
   32449:	mov    r12d,DWORD PTR [rax]
   3244c:	jmp    323f0 <g_str_equal@plt+0x25130>
   3244e:	call   cd30 <__stack_chk_fail@plt>
   32453:	nop    DWORD PTR [rax]
   32456:	nop    WORD PTR cs:[rax+rax*1+0x0]
   32460:	push   rbx
   32461:	mov    ebx,edi
   32463:	sub    rsp,0x10
   32467:	call   43f70 <g_str_equal@plt+0x36cb0>
   3246c:	cmp    eax,0xffffffff
   3246f:	mov    edi,ebx
   32471:	je     324a0 <g_str_equal@plt+0x251e0>
   32473:	call   c230 <close@plt>
   32478:	test   eax,eax
   3247a:	je     32488 <g_str_equal@plt+0x251c8>
   3247c:	add    rsp,0x10
   32480:	pop    rbx
   32481:	ret    
   32482:	nop    WORD PTR [rax+rax*1+0x0]
   32488:	mov    edi,ebx
   3248a:	mov    DWORD PTR [rsp+0xc],eax
   3248e:	call   43f90 <g_str_equal@plt+0x36cd0>
   32493:	mov    eax,DWORD PTR [rsp+0xc]
   32497:	add    rsp,0x10
   3249b:	pop    rbx
   3249c:	ret    
   3249d:	nop    DWORD PTR [rax]
   324a0:	add    rsp,0x10
   324a4:	pop    rbx
   324a5:	jmp    c230 <close@plt>
   324aa:	nop    WORD PTR [rax+rax*1+0x0]
   324b0:	push   r13
   324b2:	push   r12
   324b4:	xor    r12d,r12d
   324b7:	push   rbp
   324b8:	push   rbx
   324b9:	mov    r13d,edi
   324bc:	mov    rbp,rsi
   324bf:	mov    rbx,rdx
   324c2:	sub    rsp,0x8
   324c6:	test   rdx,rdx
   324c9:	je     324e9 <g_str_equal@plt+0x25229>
   324cb:	mov    rdx,rbx
   324ce:	mov    rsi,rbp
   324d1:	mov    edi,r13d
   324d4:	call   d140 <write@plt>
   324d9:	test   rax,rax
   324dc:	js     32500 <g_str_equal@plt+0x25240>
   324de:	add    rbp,rax
   324e1:	add    r12,rax
   324e4:	sub    rbx,rax
   324e7:	jne    324cb <g_str_equal@plt+0x2520b>
   324e9:	add    rsp,0x8
   324ed:	mov    rax,r12
   324f0:	pop    rbx
   324f1:	pop    rbp
   324f2:	pop    r12
   324f4:	pop    r13
   324f6:	ret    
   324f7:	nop    WORD PTR [rax+rax*1+0x0]
   32500:	call   cc80 <__errno_location@plt>
   32505:	cmp    DWORD PTR [rax],0x4
   32508:	je     324cb <g_str_equal@plt+0x2520b>
   3250a:	add    rsp,0x8
   3250e:	mov    rax,r12
   32511:	pop    rbx
   32512:	pop    rbp
   32513:	pop    r12
   32515:	pop    r13
   32517:	ret    
   32518:	nop    DWORD PTR [rax+rax*1+0x0]
   32520:	push   r13
   32522:	push   r12
   32524:	mov    r12d,esi
   32527:	push   rbp
   32528:	push   rbx
   32529:	or     esi,0x80000
   3252f:	mov    ebp,edi
   32531:	mov    r13d,edx
   32534:	sub    rsp,0x8
   32538:	call   cc30 <socket@plt>
   3253d:	cmp    eax,0xffffffff
   32540:	mov    ebx,eax
   32542:	je     32558 <g_str_equal@plt+0x25298>
   32544:	add    rsp,0x8
   32548:	mov    eax,ebx
   3254a:	pop    rbx
   3254b:	pop    rbp
   3254c:	pop    r12
   3254e:	pop    r13
   32550:	ret    
   32551:	nop    DWORD PTR [rax+0x0]
   32558:	call   cc80 <__errno_location@plt>
   3255d:	cmp    DWORD PTR [rax],0x16
   32560:	jne    32544 <g_str_equal@plt+0x25284>
   32562:	mov    edx,r13d
   32565:	mov    esi,r12d
   32568:	mov    edi,ebp
   3256a:	call   cc30 <socket@plt>
   3256f:	test   eax,eax
   32571:	mov    ebx,eax
   32573:	js     32544 <g_str_equal@plt+0x25284>
   32575:	mov    edi,eax
   32577:	call   381c0 <g_str_equal@plt+0x2af00>
   3257c:	add    rsp,0x8
   32580:	mov    eax,ebx
   32582:	pop    rbx
   32583:	pop    rbp
   32584:	pop    r12
   32586:	pop    r13
   32588:	ret    
   32589:	nop    DWORD PTR [rax+0x0]
   32590:	push   r13
   32592:	push   r12
   32594:	mov    ecx,0x80000
   32599:	push   rbp
   3259a:	push   rbx
   3259b:	mov    ebp,edi
   3259d:	mov    r12,rsi
   325a0:	mov    r13,rdx
   325a3:	sub    rsp,0x8
   325a7:	call   cce0 <accept4@plt>
   325ac:	cmp    eax,0xffffffff
   325af:	mov    ebx,eax
   325b1:	je     325c0 <g_str_equal@plt+0x25300>
   325b3:	add    rsp,0x8
   325b7:	mov    eax,ebx
   325b9:	pop    rbx
   325ba:	pop    rbp
   325bb:	pop    r12
   325bd:	pop    r13
   325bf:	ret    
   325c0:	call   cc80 <__errno_location@plt>
   325c5:	cmp    DWORD PTR [rax],0x26
   325c8:	jne    325b3 <g_str_equal@plt+0x252f3>
   325ca:	mov    rdx,r13
   325cd:	mov    rsi,r12
   325d0:	mov    edi,ebp
   325d2:	call   d180 <accept@plt>
   325d7:	test   eax,eax
   325d9:	mov    ebx,eax
   325db:	js     325b3 <g_str_equal@plt+0x252f3>
   325dd:	mov    edi,eax
   325df:	call   381c0 <g_str_equal@plt+0x2af00>
   325e4:	add    rsp,0x8
   325e8:	mov    eax,ebx
   325ea:	pop    rbx
   325eb:	pop    rbp
   325ec:	pop    r12
   325ee:	pop    r13
   325f0:	ret    
   325f1:	nop    DWORD PTR [rax+rax*1+0x0]
   325f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   32600:	mov    QWORD PTR [rip+0x24ff09],rdi        # 282510 <g_test_config_vars+0x1150>
   32607:	ret    
   32608:	nop    DWORD PTR [rax+rax*1+0x0]
   32610:	mov    rax,QWORD PTR [rip+0x24fef9]        # 282510 <g_test_config_vars+0x1150>
   32617:	ret    
   32618:	nop    DWORD PTR [rax+rax*1+0x0]
   32620:	test   dil,dil
   32623:	jne    32630 <g_str_equal@plt+0x25370>
   32625:	repz ret 
   32627:	nop    WORD PTR [rax+rax*1+0x0]
   32630:	push   rbx
   32631:	lea    rsi,[rip+0x2d9a9]        # 5ffe1 <_fini@@Base+0xd88d>
   32638:	lea    rdi,[rip+0x2e27a]        # 608b9 <_fini@@Base+0xe165>
   3263f:	call   d050 <fopen64@plt>
   32644:	test   rax,rax
   32647:	mov    rbx,rax
   3264a:	je     32670 <g_str_equal@plt+0x253b0>
   3264c:	mov    rdi,rax
   3264f:	call   c890 <fgetc@plt>
   32654:	mov    rdi,rbx
   32657:	cmp    eax,0x31
   3265a:	pop    rbx
   3265b:	sete   BYTE PTR [rip+0x252496]        # 284af8 <stdout@@GLIBC_2.2.5+0x1b0>
   32662:	jmp    cea0 <fclose@plt>
   32667:	nop    WORD PTR [rax+rax*1+0x0]
   32670:	pop    rbx
   32671:	ret    
   32672:	nop    DWORD PTR [rax+0x0]
   32676:	nop    WORD PTR cs:[rax+rax*1+0x0]
   32680:	movzx  eax,BYTE PTR [rip+0x252471]        # 284af8 <stdout@@GLIBC_2.2.5+0x1b0>
   32687:	ret    
   32688:	nop    DWORD PTR [rax+rax*1+0x0]
   32690:	xor    eax,eax
   32692:	ret    
   32693:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3269d:	nop    DWORD PTR [rax]
   326a0:	push   rbp
   326a1:	push   rbx
   326a2:	mov    rbp,rsi
   326a5:	movzx  ebx,dil
   326a9:	sub    rsp,0x8
   326ad:	call   c6a0 <__ctype_toupper_loc@plt>
   326b2:	mov    rax,QWORD PTR [rax]
   326b5:	mov    edx,DWORD PTR [rax+rbx*4]
   326b8:	sub    edx,0x42
   326bb:	cmp    edx,0x12
   326be:	ja     32760 <g_str_equal@plt+0x254a0>
   326c4:	lea    rcx,[rip+0x2e235]        # 60900 <_fini@@Base+0xe1ac>
   326cb:	movsxd rax,DWORD PTR [rcx+rdx*4]
   326cf:	add    rax,rcx
   326d2:	jmp    rax
   326d4:	nop    DWORD PTR [rax+0x0]
   326d8:	mov    rax,rbp
   326db:	imul   rax,rbp
   326df:	imul   rbp,rax
   326e3:	mov    rax,rbp
   326e6:	add    rsp,0x8
   326ea:	imul   rax,rbp
   326ee:	pop    rbx
   326ef:	pop    rbp
   326f0:	ret    
   326f1:	nop    DWORD PTR [rax+0x0]
   326f8:	add    rsp,0x8
   326fc:	mov    eax,0x1
   32701:	pop    rbx
   32702:	pop    rbp
   32703:	ret    
   32704:	nop    DWORD PTR [rax+0x0]
   32708:	mov    rax,rbp
   3270b:	add    rsp,0x8
   3270f:	imul   rax,rbp
   32713:	pop    rbx
   32714:	imul   rax,rax
   32718:	imul   rax,rbp
   3271c:	pop    rbp
   3271d:	ret    
   3271e:	xchg   ax,ax
   32720:	imul   rbp,rbp
   32724:	add    rsp,0x8
   32728:	pop    rbx
   32729:	mov    rax,rbp
   3272c:	imul   rax,rbp
   32730:	pop    rbp
   32731:	ret    
   32732:	nop    WORD PTR [rax+rax*1+0x0]
   32738:	add    rsp,0x8
   3273c:	mov    rax,rbp
   3273f:	pop    rbx
   32740:	pop    rbp
   32741:	ret    
   32742:	nop    WORD PTR [rax+rax*1+0x0]
   32748:	mov    rax,rbp
   3274b:	add    rsp,0x8
   3274f:	imul   rax,rbp
   32753:	pop    rbx
   32754:	imul   rax,rbp
   32758:	pop    rbp
   32759:	ret    
   3275a:	nop    WORD PTR [rax+rax*1+0x0]
   32760:	add    rsp,0x8
   32764:	mov    rax,0xffffffffffffffff
   3276b:	pop    rbx
   3276c:	pop    rbp
   3276d:	ret    
   3276e:	xchg   ax,ax
   32770:	push   r15
   32772:	push   r14
   32774:	mov    r14,r8
   32777:	push   r13
   32779:	push   r12
   3277b:	mov    r13,rsi
   3277e:	push   rbp
   3277f:	push   rbx
   32780:	mov    r12,rcx
   32783:	mov    rbx,rdi
   32786:	sub    rsp,0x38
   3278a:	mov    DWORD PTR [rsp+0x4],edx
   3278e:	mov    rax,QWORD PTR fs:0x28
   32797:	mov    QWORD PTR [rsp+0x28],rax
   3279c:	xor    eax,eax
   3279e:	call   cc80 <__errno_location@plt>
   327a3:	lea    rsi,[rsp+0x18]
   327a8:	mov    DWORD PTR [rax],0x0
   327ae:	mov    rdi,rbx
   327b1:	mov    r15,rax
   327b4:	call   d240 <strtod@plt>
   327b9:	ucomisd xmm0,xmm0
   327bd:	mov    rbp,QWORD PTR [rsp+0x18]
   327c2:	jp     327d0 <g_str_equal@plt+0x25510>
   327c4:	cmp    rbp,rbx
   327c7:	je     327d0 <g_str_equal@plt+0x25510>
   327c9:	mov    ebx,DWORD PTR [r15]
   327cc:	test   ebx,ebx
   327ce:	je     32810 <g_str_equal@plt+0x25550>
   327d0:	mov    ebx,0xffffffea
   327d5:	test   r13,r13
   327d8:	je     328d0 <g_str_equal@plt+0x25610>
   327de:	mov    QWORD PTR [r13+0x0],rbp
   327e2:	mov    rcx,QWORD PTR [rsp+0x28]
   327e7:	xor    rcx,QWORD PTR fs:0x28
   327f0:	mov    eax,ebx
   327f2:	jne    3296e <g_str_equal@plt+0x256ae>
   327f8:	add    rsp,0x38
   327fc:	pop    rbx
   327fd:	pop    rbp
   327fe:	pop    r12
   32800:	pop    r13
   32802:	pop    r14
   32804:	pop    r15
   32806:	ret    
   32807:	nop    WORD PTR [rax+rax*1+0x0]
   32810:	lea    rdi,[rsp+0x20]
   32815:	movsd  QWORD PTR [rsp+0x8],xmm0
   3281b:	call   d020 <modf@plt>
   32820:	pxor   xmm3,xmm3
   32824:	movsx  edi,BYTE PTR [rbp+0x0]
   32828:	mov    eax,0x1
   3282d:	mov    rsi,r12
   32830:	ucomisd xmm0,xmm3
   32834:	setp   r15b
   32838:	cmovne r15d,eax
   3283c:	call   326a0 <g_str_equal@plt+0x253e0>
   32841:	pxor   xmm0,xmm0
   32845:	pxor   xmm5,xmm5
   32849:	movsd  xmm1,QWORD PTR [rsp+0x8]
   3284f:	cvtsi2sd xmm0,rax
   32854:	ucomisd xmm0,xmm5
   32858:	jb     328e8 <g_str_equal@plt+0x25628>
   3285e:	add    rbp,0x1
   32862:	mov    QWORD PTR [rsp+0x18],rbp
   32867:	movsd  xmm2,QWORD PTR [rip+0x2e1a1]        # 60a10 <_fini@@Base+0xe2bc>
   3286f:	mov    edx,0x0
   32874:	ucomisd xmm0,xmm2
   32878:	setnp  al
   3287b:	cmovne eax,edx
   3287e:	test   al,al
   32880:	je     3288b <g_str_equal@plt+0x255cb>
   32882:	test   r15b,r15b
   32885:	jne    327d0 <g_str_equal@plt+0x25510>
   3288b:	mulsd  xmm0,xmm1
   3288f:	ucomisd xmm0,QWORD PTR [rip+0x2e181]        # 60a18 <_fini@@Base+0xe2c4>
   32897:	jae    32940 <g_str_equal@plt+0x25680>
   3289d:	pxor   xmm7,xmm7
   328a1:	ucomisd xmm7,xmm1
   328a5:	ja     32940 <g_str_equal@plt+0x25680>
   328ab:	movsd  xmm1,QWORD PTR [rip+0x2e16d]        # 60a20 <_fini@@Base+0xe2cc>
   328b3:	ucomisd xmm0,xmm1
   328b7:	jae    32950 <g_str_equal@plt+0x25690>
   328bd:	cvttsd2si rax,xmm0
   328c2:	mov    QWORD PTR [r14],rax
   328c5:	jmp    327d5 <g_str_equal@plt+0x25515>
   328ca:	nop    WORD PTR [rax+rax*1+0x0]
   328d0:	cmp    BYTE PTR [rbp+0x0],0x0
   328d4:	mov    eax,0xffffffea
   328d9:	cmovne ebx,eax
   328dc:	jmp    327e2 <g_str_equal@plt+0x25522>
   328e1:	nop    DWORD PTR [rax+0x0]
   328e8:	movsx  edi,BYTE PTR [rsp+0x4]
   328ed:	mov    rsi,r12
   328f0:	movsd  QWORD PTR [rsp+0x8],xmm1
   328f6:	call   326a0 <g_str_equal@plt+0x253e0>
   328fb:	pxor   xmm0,xmm0
   328ff:	pxor   xmm6,xmm6
   32903:	movsd  xmm1,QWORD PTR [rsp+0x8]
   32909:	cvtsi2sd xmm0,rax
   3290e:	ucomisd xmm0,xmm6
   32912:	jae    32867 <g_str_equal@plt+0x255a7>
   32918:	lea    rcx,[rip+0x2e049]        # 60968 <_fini@@Base+0xe214>
   3291f:	lea    rsi,[rip+0x2e052]        # 60978 <_fini@@Base+0xe224>
   32926:	lea    rdi,[rip+0x2e082]        # 609af <_fini@@Base+0xe25b>
   3292d:	mov    edx,0xeb
   32932:	call   c390 <__assert_fail@plt>
   32937:	nop    WORD PTR [rax+rax*1+0x0]
   32940:	mov    ebx,0xffffffde
   32945:	jmp    327d5 <g_str_equal@plt+0x25515>
   3294a:	nop    WORD PTR [rax+rax*1+0x0]
   32950:	subsd  xmm0,xmm1
   32954:	cvttsd2si rax,xmm0
   32959:	mov    QWORD PTR [r14],rax
   3295c:	movabs rax,0x8000000000000000
   32966:	xor    QWORD PTR [r14],rax
   32969:	jmp    327d5 <g_str_equal@plt+0x25515>
   3296e:	call   cd30 <__stack_chk_fail@plt>
   32973:	nop    DWORD PTR [rax]
   32976:	nop    WORD PTR cs:[rax+rax*1+0x0]
   32980:	push   r12
   32982:	push   rbp
   32983:	mov    ebp,ecx
   32985:	push   rbx
   32986:	mov    ebx,esi
   32988:	mov    rsi,rdx
   3298b:	test   ebx,ebx
   3298d:	jle    329e0 <g_str_equal@plt+0x25720>
   3298f:	cmp    BYTE PTR [rdx],0x0
   32992:	je     329e0 <g_str_equal@plt+0x25720>
   32994:	lea    r8d,[rbx-0x1]
   32998:	mov    edx,0x1
   3299d:	add    r8,0x1
   329a1:	jmp    329b6 <g_str_equal@plt+0x256f6>
   329a3:	nop    DWORD PTR [rax+rax*1+0x0]
   329a8:	lea    rax,[rdx+0x1]
   329ac:	cmp    BYTE PTR [rsi+rax*1-0x1],0x0
   329b1:	je     329bd <g_str_equal@plt+0x256fd>
   329b3:	mov    rdx,rax
   329b6:	cmp    rdx,r8
   329b9:	mov    ecx,edx
   329bb:	jne    329a8 <g_str_equal@plt+0x256e8>
   329bd:	lea    r12,[rdi+rdx*1]
   329c1:	sub    ebx,ecx
   329c3:	call   d220 <memcpy@plt>
   329c8:	movsxd rdx,ebx
   329cb:	movsx  esi,bpl
   329cf:	mov    rdi,r12
   329d2:	pop    rbx
   329d3:	pop    rbp
   329d4:	pop    r12
   329d6:	jmp    c1c0 <memset@plt>
   329db:	nop    DWORD PTR [rax+rax*1+0x0]
   329e0:	mov    r12,rdi
   329e3:	xor    edx,edx
   329e5:	jmp    329c3 <g_str_equal@plt+0x25703>
   329e7:	nop    WORD PTR [rax+rax*1+0x0]
   329f0:	test   esi,esi
   329f2:	jle    32a3b <g_str_equal@plt+0x2577b>
   329f4:	movzx  ecx,BYTE PTR [rdx]
   329f7:	lea    rax,[rdx+0x1]
   329fb:	test   cl,cl
   329fd:	je     32a38 <g_str_equal@plt+0x25778>
   329ff:	movsxd rsi,esi
   32a02:	lea    rsi,[rdi+rsi*1-0x1]
   32a07:	cmp    rdi,rsi
   32a0a:	jae    32a38 <g_str_equal@plt+0x25778>
   32a0c:	sub    rsi,rdi
   32a0f:	lea    rdx,[rdx+rsi*1+0x1]
   32a14:	jmp    32a25 <g_str_equal@plt+0x25765>
   32a16:	nop    WORD PTR cs:[rax+rax*1+0x0]
   32a20:	cmp    rax,rdx
   32a23:	je     32a38 <g_str_equal@plt+0x25778>
   32a25:	add    rdi,0x1
   32a29:	add    rax,0x1
   32a2d:	mov    BYTE PTR [rdi-0x1],cl
   32a30:	movzx  ecx,BYTE PTR [rax-0x1]
   32a34:	test   cl,cl
   32a36:	jne    32a20 <g_str_equal@plt+0x25760>
   32a38:	mov    BYTE PTR [rdi],0x0
   32a3b:	repz ret 
   32a3d:	nop    DWORD PTR [rax]
   32a40:	push   r12
   32a42:	push   rbp
   32a43:	mov    r12,rdi
   32a46:	push   rbx
   32a47:	mov    ebx,esi
   32a49:	mov    rbp,rdx
   32a4c:	call   c720 <strlen@plt>
   32a51:	cmp    eax,ebx
   32a53:	jge    32aa5 <g_str_equal@plt+0x257e5>
   32a55:	sub    ebx,eax
   32a57:	test   ebx,ebx
   32a59:	jle    32aa5 <g_str_equal@plt+0x257e5>
   32a5b:	movzx  edi,BYTE PTR [rbp+0x0]
   32a5f:	cdqe   
   32a61:	lea    rcx,[rbp+0x1]
   32a65:	add    rax,r12
   32a68:	test   dil,dil
   32a6b:	je     32aa2 <g_str_equal@plt+0x257e2>
   32a6d:	movsxd rbx,ebx
   32a70:	lea    rdx,[rax+rbx*1-0x1]
   32a75:	cmp    rax,rdx
   32a78:	jae    32aa2 <g_str_equal@plt+0x257e2>
   32a7a:	sub    rdx,rax
   32a7d:	lea    rdx,[rbp+rdx*1+0x1]
   32a82:	jmp    32a8d <g_str_equal@plt+0x257cd>
   32a84:	nop    DWORD PTR [rax+0x0]
   32a88:	cmp    rcx,rdx
   32a8b:	je     32aa2 <g_str_equal@plt+0x257e2>
   32a8d:	add    rax,0x1
   32a91:	add    rcx,0x1
   32a95:	mov    BYTE PTR [rax-0x1],dil
   32a99:	movzx  edi,BYTE PTR [rcx-0x1]
   32a9d:	test   dil,dil
   32aa0:	jne    32a88 <g_str_equal@plt+0x257c8>
   32aa2:	mov    BYTE PTR [rax],0x0
   32aa5:	mov    rax,r12
   32aa8:	pop    rbx
   32aa9:	pop    rbp
   32aaa:	pop    r12
   32aac:	ret    
   32aad:	nop    DWORD PTR [rax]
   32ab0:	jmp    32ac4 <g_str_equal@plt+0x25804>
   32ab2:	nop    WORD PTR [rax+rax*1+0x0]
   32ab8:	cmp    BYTE PTR [rdi],al
   32aba:	jne    32ae0 <g_str_equal@plt+0x25820>
   32abc:	add    rdi,0x1
   32ac0:	add    rsi,0x1
   32ac4:	movzx  eax,BYTE PTR [rsi]
   32ac7:	test   al,al
   32ac9:	jne    32ab8 <g_str_equal@plt+0x257f8>
   32acb:	test   rdx,rdx
   32ace:	mov    eax,0x1
   32ad3:	je     32ae2 <g_str_equal@plt+0x25822>
   32ad5:	mov    QWORD PTR [rdx],rdi
   32ad8:	ret    
   32ad9:	nop    DWORD PTR [rax+0x0]
   32ae0:	xor    eax,eax
   32ae2:	repz ret 
   32ae4:	xchg   ax,ax
   32ae6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   32af0:	push   r13
   32af2:	push   r12
   32af4:	mov    r13,rdx
   32af7:	push   rbp
   32af8:	push   rbx
   32af9:	mov    r12,rdi
   32afc:	sub    rsp,0x8
   32b00:	movzx  ebx,BYTE PTR [rsi]
   32b03:	test   bl,bl
   32b05:	je     32b48 <g_str_equal@plt+0x25888>
   32b07:	mov    rbp,rsi
   32b0a:	call   c6a0 <__ctype_toupper_loc@plt>
   32b0f:	mov    rax,QWORD PTR [rax]
   32b12:	jmp    32b28 <g_str_equal@plt+0x25868>
   32b14:	nop    DWORD PTR [rax+0x0]
   32b18:	add    rbp,0x1
   32b1c:	movzx  ebx,BYTE PTR [rbp+0x0]
   32b20:	add    r12,0x1
   32b24:	test   bl,bl
   32b26:	je     32b48 <g_str_equal@plt+0x25888>
   32b28:	movzx  ecx,BYTE PTR [r12]
   32b2d:	mov    edx,DWORD PTR [rax+rbx*4]
   32b30:	cmp    DWORD PTR [rax+rcx*4],edx
   32b33:	je     32b18 <g_str_equal@plt+0x25858>
   32b35:	xor    eax,eax
   32b37:	add    rsp,0x8
   32b3b:	pop    rbx
   32b3c:	pop    rbp
   32b3d:	pop    r12
   32b3f:	pop    r13
   32b41:	ret    
   32b42:	nop    WORD PTR [rax+rax*1+0x0]
   32b48:	test   r13,r13
   32b4b:	mov    eax,0x1
   32b50:	je     32b37 <g_str_equal@plt+0x25877>
   32b52:	mov    QWORD PTR [r13+0x0],r12
   32b56:	add    rsp,0x8
   32b5a:	pop    rbx
   32b5b:	pop    rbp
   32b5c:	pop    r12
   32b5e:	pop    r13
   32b60:	ret    
   32b61:	nop    DWORD PTR [rax+rax*1+0x0]
   32b66:	nop    WORD PTR cs:[rax+rax*1+0x0]
   32b70:	test   esi,esi
   32b72:	jle    32ba0 <g_str_equal@plt+0x258e0>
   32b74:	cmp    BYTE PTR [rdi],0x0
   32b77:	je     32ba0 <g_str_equal@plt+0x258e0>
   32b79:	add    rdi,0x1
   32b7d:	xor    eax,eax
   32b7f:	jmp    32b92 <g_str_equal@plt+0x258d2>
   32b81:	nop    DWORD PTR [rax+0x0]
   32b88:	add    rdi,0x1
   32b8c:	cmp    BYTE PTR [rdi-0x1],0x0
   32b90:	je     32ba2 <g_str_equal@plt+0x258e2>
   32b92:	add    eax,0x1
   32b95:	cmp    esi,eax
   32b97:	jne    32b88 <g_str_equal@plt+0x258c8>
   32b99:	repz ret 
   32b9b:	nop    DWORD PTR [rax+rax*1+0x0]
   32ba0:	xor    eax,eax
   32ba2:	repz ret 
   32ba4:	xchg   ax,ax
   32ba6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   32bb0:	push   r13
   32bb2:	push   r12
   32bb4:	push   rbp
   32bb5:	push   rbx
   32bb6:	sub    rsp,0x8
   32bba:	mov    r12,QWORD PTR [rdi]
   32bbd:	test   r12,r12
   32bc0:	je     32c04 <g_str_equal@plt+0x25944>
   32bc2:	mov    rbp,rsi
   32bc5:	movsx  esi,BYTE PTR [r12]
   32bca:	mov    r13,rdi
   32bcd:	test   sil,sil
   32bd0:	je     32c18 <g_str_equal@plt+0x25958>
   32bd2:	mov    rbx,r12
   32bd5:	jmp    32bec <g_str_equal@plt+0x2592c>
   32bd7:	nop    WORD PTR [rax+rax*1+0x0]
   32be0:	movsx  esi,BYTE PTR [rbx+0x1]
   32be4:	mov    rbx,rdx
   32be7:	test   sil,sil
   32bea:	je     32c18 <g_str_equal@plt+0x25958>
   32bec:	mov    rdi,rbp
   32bef:	call   cc00 <strchr@plt>
   32bf4:	test   rax,rax
   32bf7:	lea    rdx,[rbx+0x1]
   32bfb:	je     32be0 <g_str_equal@plt+0x25920>
   32bfd:	mov    BYTE PTR [rbx],0x0
   32c00:	mov    QWORD PTR [r13+0x0],rdx
   32c04:	add    rsp,0x8
   32c08:	mov    rax,r12
   32c0b:	pop    rbx
   32c0c:	pop    rbp
   32c0d:	pop    r12
   32c0f:	pop    r13
   32c11:	ret    
   32c12:	nop    WORD PTR [rax+rax*1+0x0]
   32c18:	mov    QWORD PTR [r13+0x0],0x0
   32c20:	add    rsp,0x8
   32c24:	mov    rax,r12
   32c27:	pop    rbx
   32c28:	pop    rbp
   32c29:	pop    r12
   32c2b:	pop    r13
   32c2d:	ret    
   32c2e:	xchg   ax,ax
   32c30:	mov    eax,DWORD PTR [rdi+0x10]
   32c33:	mov    r8d,DWORD PTR [rdi+0x14]
   32c37:	mov    edx,DWORD PTR [rdi+0xc]
   32c3a:	lea    r9d,[rax+0x1]
   32c3e:	cmp    r9d,0x2
   32c42:	jg     32ce0 <g_str_equal@plt+0x25a20>
   32c48:	lea    r9d,[rax+0xd]
   32c4c:	add    r8d,0x76b
   32c53:	imul   eax,r8d,0x16d
   32c5a:	lea    esi,[r8+0x3]
   32c5e:	test   r8d,r8d
   32c61:	cmovns esi,r8d
   32c65:	lea    edx,[rdx+rax*1-0xafa6d]
   32c6c:	sar    esi,0x2
   32c6f:	mov    eax,r8d
   32c72:	imul   r9d,r9d,0x99
   32c79:	sar    r8d,0x1f
   32c7d:	add    esi,edx
   32c7f:	mov    edx,0x51eb851f
   32c84:	mov    ecx,r8d
   32c87:	imul   edx
   32c89:	sub    r9d,0x1c9
   32c90:	mov    eax,edx
   32c92:	sar    edx,0x7
   32c95:	sar    eax,0x5
   32c98:	sub    edx,r8d
   32c9b:	sub    ecx,eax
   32c9d:	mov    eax,r9d
   32ca0:	sar    r9d,0x1f
   32ca4:	add    esi,ecx
   32ca6:	lea    ecx,[rsi+rdx*1]
   32ca9:	mov    edx,0x66666667
   32cae:	imul   edx
   32cb0:	mov    eax,edx
   32cb2:	sar    eax,1
   32cb4:	sub    eax,r9d
   32cb7:	add    eax,ecx
   32cb9:	imul   edx,DWORD PTR [rdi+0x4],0x3c
   32cbd:	imul   ecx,DWORD PTR [rdi+0x8],0xe10
   32cc4:	cdqe   
   32cc6:	imul   rax,rax,0x15180
   32ccd:	add    ecx,edx
   32ccf:	add    ecx,DWORD PTR [rdi]
   32cd1:	movsxd rcx,ecx
   32cd4:	add    rax,rcx
   32cd7:	ret    
   32cd8:	nop    DWORD PTR [rax+rax*1+0x0]
   32ce0:	add    r8d,0x76c
   32ce7:	jmp    32c53 <g_str_equal@plt+0x25993>
   32cec:	nop    DWORD PTR [rax+0x0]
   32cf0:	jmp    c860 <fdatasync@plt>
   32cf5:	nop
   32cf6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   32d00:	push   rbp
   32d01:	push   rbx
   32d02:	xor    eax,eax
   32d04:	mov    ebp,esi
   32d06:	mov    esi,0x3
   32d0b:	mov    ebx,edi
   32d0d:	sub    rsp,0x8
   32d11:	call   d230 <fcntl@plt>
   32d16:	cmp    eax,0xffffffff
   32d19:	je     32d40 <g_str_equal@plt+0x25a80>
   32d1b:	or     eax,ebp
   32d1d:	mov    esi,0x4
   32d22:	mov    edi,ebx
   32d24:	mov    edx,eax
   32d26:	xor    eax,eax
   32d28:	call   d230 <fcntl@plt>
   32d2d:	mov    edx,eax
   32d2f:	xor    eax,eax
   32d31:	cmp    edx,0xffffffff
   32d34:	je     32d40 <g_str_equal@plt+0x25a80>
   32d36:	add    rsp,0x8
   32d3a:	pop    rbx
   32d3b:	pop    rbp
   32d3c:	ret    
   32d3d:	nop    DWORD PTR [rax]
   32d40:	call   cc80 <__errno_location@plt>
   32d45:	mov    eax,DWORD PTR [rax]
   32d47:	add    rsp,0x8
   32d4b:	pop    rbx
   32d4c:	pop    rbp
   32d4d:	neg    eax
   32d4f:	ret    
   32d50:	mov    r8,rdx
   32d53:	mov    ecx,0x400
   32d58:	mov    edx,0x42
   32d5d:	jmp    32770 <g_str_equal@plt+0x254b0>
   32d62:	nop    DWORD PTR [rax+0x0]
   32d66:	nop    WORD PTR cs:[rax+rax*1+0x0]
   32d70:	mov    r8,rdx
   32d73:	mov    ecx,0x400
   32d78:	mov    edx,0x4d
   32d7d:	jmp    32770 <g_str_equal@plt+0x254b0>
   32d82:	nop    DWORD PTR [rax+0x0]
   32d86:	nop    WORD PTR cs:[rax+rax*1+0x0]
   32d90:	mov    r8,rdx
   32d93:	mov    ecx,0x3e8
   32d98:	mov    edx,0x42
   32d9d:	jmp    32770 <g_str_equal@plt+0x254b0>
   32da2:	nop    DWORD PTR [rax+0x0]
   32da6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   32db0:	push   r13
   32db2:	push   r12
   32db4:	push   rbp
   32db5:	push   rbx
   32db6:	mov    rbx,rsi
   32db9:	sub    rsp,0x28
   32dbd:	mov    rax,QWORD PTR fs:0x28
   32dc6:	mov    QWORD PTR [rsp+0x18],rax
   32dcb:	xor    eax,eax
   32dcd:	test   rdi,rdi
   32dd0:	je     32e68 <g_str_equal@plt+0x25ba8>
   32dd6:	mov    rbp,rdi
   32dd9:	mov    r13,rcx
   32ddc:	mov    DWORD PTR [rsp+0xc],edx
   32de0:	call   cc80 <__errno_location@plt>
   32de5:	mov    edx,DWORD PTR [rsp+0xc]
   32de9:	lea    rsi,[rsp+0x10]
   32dee:	mov    DWORD PTR [rax],0x0
   32df4:	mov    rdi,rbp
   32df7:	mov    r12,rax
   32dfa:	call   d060 <strtoll@plt>
   32dff:	cmp    rax,0xffffffff80000000
   32e05:	jge    32e38 <g_str_equal@plt+0x25b78>
   32e07:	test   rbx,rbx
   32e0a:	mov    DWORD PTR [r13+0x0],0x80000000
   32e12:	mov    rdx,QWORD PTR [rsp+0x10]
   32e17:	mov    DWORD PTR [r12],0x22
   32e1f:	je     32ec0 <g_str_equal@plt+0x25c00>
   32e25:	mov    QWORD PTR [rbx],rdx
   32e28:	mov    eax,0x22
   32e2d:	neg    eax
   32e2f:	jmp    32e79 <g_str_equal@plt+0x25bb9>
   32e31:	nop    DWORD PTR [rax+0x0]
   32e38:	cmp    rax,0x7fffffff
   32e3e:	mov    rdx,QWORD PTR [rsp+0x10]
   32e43:	jle    32e98 <g_str_equal@plt+0x25bd8>
   32e45:	test   rbx,rbx
   32e48:	mov    DWORD PTR [r13+0x0],0x7fffffff
   32e50:	mov    DWORD PTR [r12],0x22
   32e58:	je     32ec0 <g_str_equal@plt+0x25c00>
   32e5a:	mov    QWORD PTR [rbx],rdx
   32e5d:	mov    eax,0xffffffde
   32e62:	jmp    32e79 <g_str_equal@plt+0x25bb9>
   32e64:	nop    DWORD PTR [rax+0x0]
   32e68:	test   rsi,rsi
   32e6b:	je     32e74 <g_str_equal@plt+0x25bb4>
   32e6d:	mov    QWORD PTR [rsi],0x0
   32e74:	mov    eax,0xffffffea
   32e79:	mov    rcx,QWORD PTR [rsp+0x18]
   32e7e:	xor    rcx,QWORD PTR fs:0x28
   32e87:	jne    32eda <g_str_equal@plt+0x25c1a>
   32e89:	add    rsp,0x28
   32e8d:	pop    rbx
   32e8e:	pop    rbp
   32e8f:	pop    r12
   32e91:	pop    r13
   32e93:	ret    
   32e94:	nop    DWORD PTR [rax+0x0]
   32e98:	cmp    rbp,rdx
   32e9b:	mov    DWORD PTR [r13+0x0],eax
   32e9f:	mov    eax,DWORD PTR [r12]
   32ea3:	sete   cl
   32ea6:	test   rbx,rbx
   32ea9:	je     32ed0 <g_str_equal@plt+0x25c10>
   32eab:	test   eax,eax
   32ead:	mov    QWORD PTR [rbx],rdx
   32eb0:	jne    32e2d <g_str_equal@plt+0x25b6d>
   32eb6:	test   cl,cl
   32eb8:	jne    32e74 <g_str_equal@plt+0x25bb4>
   32eba:	neg    eax
   32ebc:	jmp    32e79 <g_str_equal@plt+0x25bb9>
   32ebe:	xchg   ax,ax
   32ec0:	mov    eax,0x22
   32ec5:	cmp    BYTE PTR [rdx],0x0
   32ec8:	jne    32e74 <g_str_equal@plt+0x25bb4>
   32eca:	neg    eax
   32ecc:	jmp    32e79 <g_str_equal@plt+0x25bb9>
   32ece:	xchg   ax,ax
   32ed0:	test   eax,eax
   32ed2:	jne    32ec5 <g_str_equal@plt+0x25c05>
   32ed4:	test   cl,cl
   32ed6:	je     32ec5 <g_str_equal@plt+0x25c05>
   32ed8:	jmp    32e74 <g_str_equal@plt+0x25bb4>
   32eda:	call   cd30 <__stack_chk_fail@plt>
   32edf:	nop
   32ee0:	push   r13
   32ee2:	push   r12
   32ee4:	push   rbp
   32ee5:	push   rbx
   32ee6:	mov    rbp,rsi
   32ee9:	sub    rsp,0x28
   32eed:	mov    rax,QWORD PTR fs:0x28
   32ef6:	mov    QWORD PTR [rsp+0x18],rax
   32efb:	xor    eax,eax
   32efd:	test   rdi,rdi
   32f00:	je     32f78 <g_str_equal@plt+0x25cb8>
   32f02:	mov    rbx,rdi
   32f05:	mov    r13,rcx
   32f08:	mov    DWORD PTR [rsp+0xc],edx
   32f0c:	call   cc80 <__errno_location@plt>
   32f11:	mov    edx,DWORD PTR [rsp+0xc]
   32f15:	lea    rsi,[rsp+0x10]
   32f1a:	mov    r12,rax
   32f1d:	mov    DWORD PTR [rax],0x0
   32f23:	mov    rdi,rbx
   32f26:	call   cf30 <strtoull@plt>
   32f2b:	cmp    DWORD PTR [r12],0x22
   32f30:	je     32fb0 <g_str_equal@plt+0x25cf0>
   32f32:	mov    ecx,0xffffffff
   32f37:	mov    rdx,QWORD PTR [rsp+0x10]
   32f3c:	cmp    rax,rcx
   32f3f:	jg     32fe0 <g_str_equal@plt+0x25d20>
   32f45:	cmp    rax,0xffffffff80000000
   32f4b:	jge    33020 <g_str_equal@plt+0x25d60>
   32f51:	test   rbp,rbp
   32f54:	mov    DWORD PTR [r13+0x0],0xffffffff
   32f5c:	mov    DWORD PTR [r12],0x22
   32f64:	je     33030 <g_str_equal@plt+0x25d70>
   32f6a:	mov    QWORD PTR [rbp+0x0],rdx
   32f6e:	mov    eax,0xffffffde
   32f73:	jmp    32f89 <g_str_equal@plt+0x25cc9>
   32f75:	nop    DWORD PTR [rax]
   32f78:	test   rsi,rsi
   32f7b:	je     32f84 <g_str_equal@plt+0x25cc4>
   32f7d:	mov    QWORD PTR [rsi],0x0
   32f84:	mov    eax,0xffffffea
   32f89:	mov    rdi,QWORD PTR [rsp+0x18]
   32f8e:	xor    rdi,QWORD PTR fs:0x28
   32f97:	jne    33037 <g_str_equal@plt+0x25d77>
   32f9d:	add    rsp,0x28
   32fa1:	pop    rbx
   32fa2:	pop    rbp
   32fa3:	pop    r12
   32fa5:	pop    r13
   32fa7:	ret    
   32fa8:	nop    DWORD PTR [rax+rax*1+0x0]
   32fb0:	mov    rdx,QWORD PTR [rsp+0x10]
   32fb5:	mov    DWORD PTR [r13+0x0],0xffffffff
   32fbd:	mov    eax,DWORD PTR [r12]
   32fc1:	cmp    rbx,rdx
   32fc4:	sete   cl
   32fc7:	test   eax,eax
   32fc9:	sete   sil
   32fcd:	and    ecx,esi
   32fcf:	test   rbp,rbp
   32fd2:	je     33008 <g_str_equal@plt+0x25d48>
   32fd4:	test   cl,cl
   32fd6:	mov    QWORD PTR [rbp+0x0],rdx
   32fda:	jne    32f84 <g_str_equal@plt+0x25cc4>
   32fdc:	neg    eax
   32fde:	jmp    32f89 <g_str_equal@plt+0x25cc9>
   32fe0:	test   rbp,rbp
   32fe3:	mov    DWORD PTR [r13+0x0],0xffffffff
   32feb:	mov    DWORD PTR [r12],0x22
   32ff3:	je     33030 <g_str_equal@plt+0x25d70>
   32ff5:	mov    eax,0x22
   32ffa:	mov    QWORD PTR [rbp+0x0],rdx
   32ffe:	neg    eax
   33000:	jmp    32f89 <g_str_equal@plt+0x25cc9>
   33002:	nop    WORD PTR [rax+rax*1+0x0]
   33008:	test   cl,cl
   3300a:	jne    32f84 <g_str_equal@plt+0x25cc4>
   33010:	cmp    BYTE PTR [rdx],0x0
   33013:	jne    32f84 <g_str_equal@plt+0x25cc4>
   33019:	neg    eax
   3301b:	jmp    32f89 <g_str_equal@plt+0x25cc9>
   33020:	mov    DWORD PTR [r13+0x0],eax
   33024:	jmp    32fbd <g_str_equal@plt+0x25cfd>
   33026:	nop    WORD PTR cs:[rax+rax*1+0x0]
   33030:	mov    eax,0x22
   33035:	jmp    33010 <g_str_equal@plt+0x25d50>
   33037:	call   cd30 <__stack_chk_fail@plt>
   3303c:	nop    DWORD PTR [rax+0x0]
   33040:	push   r13
   33042:	push   r12
   33044:	push   rbp
   33045:	push   rbx
   33046:	mov    rbp,rsi
   33049:	sub    rsp,0x28
   3304d:	mov    rax,QWORD PTR fs:0x28
   33056:	mov    QWORD PTR [rsp+0x18],rax
   3305b:	xor    eax,eax
   3305d:	test   rdi,rdi
   33060:	je     330d0 <g_str_equal@plt+0x25e10>
   33062:	mov    r13,rcx
   33065:	mov    rbx,rdi
   33068:	mov    DWORD PTR [rsp+0xc],edx
   3306c:	call   cc80 <__errno_location@plt>
   33071:	mov    edx,DWORD PTR [rsp+0xc]
   33075:	lea    rsi,[rsp+0x10]
   3307a:	mov    DWORD PTR [rax],0x0
   33080:	mov    rdi,rbx
   33083:	mov    r12,rax
   33086:	call   cae0 <strtol@plt>
   3308b:	test   rbp,rbp
   3308e:	mov    QWORD PTR [r13+0x0],rax
   33092:	mov    rdx,QWORD PTR [rsp+0x10]
   33097:	mov    eax,DWORD PTR [r12]
   3309b:	je     330e8 <g_str_equal@plt+0x25e28>
   3309d:	test   eax,eax
   3309f:	mov    QWORD PTR [rbp+0x0],rdx
   330a3:	jne    330aa <g_str_equal@plt+0x25dea>
   330a5:	cmp    rdx,rbx
   330a8:	je     330dc <g_str_equal@plt+0x25e1c>
   330aa:	neg    eax
   330ac:	mov    rcx,QWORD PTR [rsp+0x18]
   330b1:	xor    rcx,QWORD PTR fs:0x28
   330ba:	jne    330f8 <g_str_equal@plt+0x25e38>
   330bc:	add    rsp,0x28
   330c0:	pop    rbx
   330c1:	pop    rbp
   330c2:	pop    r12
   330c4:	pop    r13
   330c6:	ret    
   330c7:	nop    WORD PTR [rax+rax*1+0x0]
   330d0:	test   rsi,rsi
   330d3:	je     330dc <g_str_equal@plt+0x25e1c>
   330d5:	mov    QWORD PTR [rsi],0x0
   330dc:	mov    eax,0xffffffea
   330e1:	jmp    330ac <g_str_equal@plt+0x25dec>
   330e3:	nop    DWORD PTR [rax+rax*1+0x0]
   330e8:	test   eax,eax
   330ea:	jne    330f1 <g_str_equal@plt+0x25e31>
   330ec:	cmp    rdx,rbx
   330ef:	je     330dc <g_str_equal@plt+0x25e1c>
   330f1:	cmp    BYTE PTR [rdx],0x0
   330f4:	je     330aa <g_str_equal@plt+0x25dea>
   330f6:	jmp    330dc <g_str_equal@plt+0x25e1c>
   330f8:	call   cd30 <__stack_chk_fail@plt>
   330fd:	nop    DWORD PTR [rax]
   33100:	push   r13
   33102:	push   r12
   33104:	push   rbp
   33105:	push   rbx
   33106:	mov    rbp,rsi
   33109:	sub    rsp,0x28
   3310d:	mov    rax,QWORD PTR fs:0x28
   33116:	mov    QWORD PTR [rsp+0x18],rax
   3311b:	xor    eax,eax
   3311d:	test   rdi,rdi
   33120:	je     331a0 <g_str_equal@plt+0x25ee0>
   33122:	mov    r13,rcx
   33125:	mov    rbx,rdi
   33128:	mov    DWORD PTR [rsp+0xc],edx
   3312c:	call   cc80 <__errno_location@plt>
   33131:	mov    edx,DWORD PTR [rsp+0xc]
   33135:	lea    rsi,[rsp+0x10]
   3313a:	mov    r12,rax
   3313d:	mov    DWORD PTR [rax],0x0
   33143:	mov    rdi,rbx
   33146:	call   d1a0 <strtoul@plt>
   3314b:	mov    QWORD PTR [r13+0x0],rax
   3314f:	cmp    DWORD PTR [r12],0x22
   33154:	mov    rdx,0xffffffffffffffff
   3315b:	cmove  rax,rdx
   3315f:	mov    rdx,QWORD PTR [rsp+0x10]
   33164:	mov    QWORD PTR [r13+0x0],rax
   33168:	mov    eax,DWORD PTR [r12]
   3316c:	cmp    rdx,rbx
   3316f:	sete   cl
   33172:	test   rbp,rbp
   33175:	je     331b8 <g_str_equal@plt+0x25ef8>
   33177:	test   eax,eax
   33179:	mov    QWORD PTR [rbp+0x0],rdx
   3317d:	jne    33183 <g_str_equal@plt+0x25ec3>
   3317f:	test   cl,cl
   33181:	jne    331ac <g_str_equal@plt+0x25eec>
   33183:	neg    eax
   33185:	mov    rdi,QWORD PTR [rsp+0x18]
   3318a:	xor    rdi,QWORD PTR fs:0x28
   33193:	jne    331c7 <g_str_equal@plt+0x25f07>
   33195:	add    rsp,0x28
   33199:	pop    rbx
   3319a:	pop    rbp
   3319b:	pop    r12
   3319d:	pop    r13
   3319f:	ret    
   331a0:	test   rsi,rsi
   331a3:	je     331ac <g_str_equal@plt+0x25eec>
   331a5:	mov    QWORD PTR [rsi],0x0
   331ac:	mov    eax,0xffffffea
   331b1:	jmp    33185 <g_str_equal@plt+0x25ec5>
   331b3:	nop    DWORD PTR [rax+rax*1+0x0]
   331b8:	test   eax,eax
   331ba:	jne    331c0 <g_str_equal@plt+0x25f00>
   331bc:	test   cl,cl
   331be:	jne    331ac <g_str_equal@plt+0x25eec>
   331c0:	cmp    BYTE PTR [rdx],0x0
   331c3:	je     33183 <g_str_equal@plt+0x25ec3>
   331c5:	jmp    331ac <g_str_equal@plt+0x25eec>
   331c7:	call   cd30 <__stack_chk_fail@plt>
   331cc:	nop    DWORD PTR [rax+0x0]
   331d0:	push   r13
   331d2:	push   r12
   331d4:	push   rbp
   331d5:	push   rbx
   331d6:	mov    rbp,rsi
   331d9:	sub    rsp,0x28
   331dd:	mov    rax,QWORD PTR fs:0x28
   331e6:	mov    QWORD PTR [rsp+0x18],rax
   331eb:	xor    eax,eax
   331ed:	test   rdi,rdi
   331f0:	je     33260 <g_str_equal@plt+0x25fa0>
   331f2:	mov    r13,rcx
   331f5:	mov    rbx,rdi
   331f8:	mov    DWORD PTR [rsp+0xc],edx
   331fc:	call   cc80 <__errno_location@plt>
   33201:	mov    edx,DWORD PTR [rsp+0xc]
   33205:	lea    rsi,[rsp+0x10]
   3320a:	mov    DWORD PTR [rax],0x0
   33210:	mov    rdi,rbx
   33213:	mov    r12,rax
   33216:	call   d060 <strtoll@plt>
   3321b:	test   rbp,rbp
   3321e:	mov    QWORD PTR [r13+0x0],rax
   33222:	mov    rdx,QWORD PTR [rsp+0x10]
   33227:	mov    eax,DWORD PTR [r12]
   3322b:	je     33278 <g_str_equal@plt+0x25fb8>
   3322d:	test   eax,eax
   3322f:	mov    QWORD PTR [rbp+0x0],rdx
   33233:	jne    3323a <g_str_equal@plt+0x25f7a>
   33235:	cmp    rdx,rbx
   33238:	je     3326c <g_str_equal@plt+0x25fac>
   3323a:	neg    eax
   3323c:	mov    rcx,QWORD PTR [rsp+0x18]
   33241:	xor    rcx,QWORD PTR fs:0x28
   3324a:	jne    33288 <g_str_equal@plt+0x25fc8>
   3324c:	add    rsp,0x28
   33250:	pop    rbx
   33251:	pop    rbp
   33252:	pop    r12
   33254:	pop    r13
   33256:	ret    
   33257:	nop    WORD PTR [rax+rax*1+0x0]
   33260:	test   rsi,rsi
   33263:	je     3326c <g_str_equal@plt+0x25fac>
   33265:	mov    QWORD PTR [rsi],0x0
   3326c:	mov    eax,0xffffffea
   33271:	jmp    3323c <g_str_equal@plt+0x25f7c>
   33273:	nop    DWORD PTR [rax+rax*1+0x0]
   33278:	test   eax,eax
   3327a:	jne    33281 <g_str_equal@plt+0x25fc1>
   3327c:	cmp    rdx,rbx
   3327f:	je     3326c <g_str_equal@plt+0x25fac>
   33281:	cmp    BYTE PTR [rdx],0x0
   33284:	je     3323a <g_str_equal@plt+0x25f7a>
   33286:	jmp    3326c <g_str_equal@plt+0x25fac>
   33288:	call   cd30 <__stack_chk_fail@plt>
   3328d:	nop    DWORD PTR [rax]
   33290:	push   r13
   33292:	push   r12
   33294:	push   rbp
   33295:	push   rbx
   33296:	mov    rbp,rsi
   33299:	sub    rsp,0x28
   3329d:	mov    rax,QWORD PTR fs:0x28
   332a6:	mov    QWORD PTR [rsp+0x18],rax
   332ab:	xor    eax,eax
   332ad:	test   rdi,rdi
   332b0:	je     33330 <g_str_equal@plt+0x26070>
   332b2:	mov    r13,rcx
   332b5:	mov    rbx,rdi
   332b8:	mov    DWORD PTR [rsp+0xc],edx
   332bc:	call   cc80 <__errno_location@plt>
   332c1:	mov    edx,DWORD PTR [rsp+0xc]
   332c5:	lea    rsi,[rsp+0x10]
   332ca:	mov    r12,rax
   332cd:	mov    DWORD PTR [rax],0x0
   332d3:	mov    rdi,rbx
   332d6:	call   cf30 <strtoull@plt>
   332db:	mov    QWORD PTR [r13+0x0],rax
   332df:	cmp    DWORD PTR [r12],0x22
   332e4:	mov    rdx,0xffffffffffffffff
   332eb:	cmove  rax,rdx
   332ef:	mov    rdx,QWORD PTR [rsp+0x10]
   332f4:	mov    QWORD PTR [r13+0x0],rax
   332f8:	mov    eax,DWORD PTR [r12]
   332fc:	cmp    rdx,rbx
   332ff:	sete   cl
   33302:	test   rbp,rbp
   33305:	je     33348 <g_str_equal@plt+0x26088>
   33307:	test   eax,eax
   33309:	mov    QWORD PTR [rbp+0x0],rdx
   3330d:	jne    33313 <g_str_equal@plt+0x26053>
   3330f:	test   cl,cl
   33311:	jne    3333c <g_str_equal@plt+0x2607c>
   33313:	neg    eax
   33315:	mov    rdi,QWORD PTR [rsp+0x18]
   3331a:	xor    rdi,QWORD PTR fs:0x28
   33323:	jne    33357 <g_str_equal@plt+0x26097>
   33325:	add    rsp,0x28
   33329:	pop    rbx
   3332a:	pop    rbp
   3332b:	pop    r12
   3332d:	pop    r13
   3332f:	ret    
   33330:	test   rsi,rsi
   33333:	je     3333c <g_str_equal@plt+0x2607c>
   33335:	mov    QWORD PTR [rsi],0x0
   3333c:	mov    eax,0xffffffea
   33341:	jmp    33315 <g_str_equal@plt+0x26055>
   33343:	nop    DWORD PTR [rax+rax*1+0x0]
   33348:	test   eax,eax
   3334a:	jne    33350 <g_str_equal@plt+0x26090>
   3334c:	test   cl,cl
   3334e:	jne    3333c <g_str_equal@plt+0x2607c>
   33350:	cmp    BYTE PTR [rdx],0x0
   33353:	je     33313 <g_str_equal@plt+0x26053>
   33355:	jmp    3333c <g_str_equal@plt+0x2607c>
   33357:	call   cd30 <__stack_chk_fail@plt>
   3335c:	nop    DWORD PTR [rax+0x0]
   33360:	push   r15
   33362:	push   r14
   33364:	push   r13
   33366:	push   r12
   33368:	mov    r13,rsi
   3336b:	push   rbp
   3336c:	push   rbx
   3336d:	mov    r12,rdx
   33370:	sub    rsp,0x18
   33374:	mov    rax,QWORD PTR fs:0x28
   3337d:	mov    QWORD PTR [rsp+0x8],rax
   33382:	xor    eax,eax
   33384:	test   rdi,rdi
   33387:	mov    QWORD PTR [rsp],rdi
   3338b:	je     33428 <g_str_equal@plt+0x26168>
   33391:	mov    r14d,ecx
   33394:	mov    rbx,rdi
   33397:	call   cc80 <__errno_location@plt>
   3339c:	mov    edx,r14d
   3339f:	mov    rbp,rax
   333a2:	mov    DWORD PTR [rax],0x0
   333a8:	mov    rsi,rsp
   333ab:	mov    rdi,rbx
   333ae:	call   cf30 <strtoull@plt>
   333b3:	mov    ebp,DWORD PTR [rbp+0x0]
   333b6:	mov    r14,rax
   333b9:	test   ebp,ebp
   333bb:	jne    33420 <g_str_equal@plt+0x26160>
   333bd:	mov    r15,QWORD PTR [rsp]
   333c1:	cmp    r15,rbx
   333c4:	je     33435 <g_str_equal@plt+0x26175>
   333c6:	call   c800 <__ctype_b_loc@plt>
   333cb:	mov    rcx,QWORD PTR [rax]
   333ce:	jmp    333d4 <g_str_equal@plt+0x26114>
   333d0:	add    rbx,0x1
   333d4:	movzx  edx,BYTE PTR [rbx]
   333d7:	test   BYTE PTR [rcx+rdx*2+0x1],0x20
   333dc:	jne    333d0 <g_str_equal@plt+0x26110>
   333de:	cmp    dl,0x2d
   333e1:	mov    eax,0xffffffde
   333e6:	mov    edx,0x0
   333eb:	cmove  r14,rdx
   333ef:	cmove  ebp,eax
   333f2:	mov    rdi,QWORD PTR [rsp+0x8]
   333f7:	xor    rdi,QWORD PTR fs:0x28
   33400:	mov    QWORD PTR [r13+0x0],r14
   33404:	mov    eax,ebp
   33406:	mov    QWORD PTR [r12],r15
   3340a:	jne    3343c <g_str_equal@plt+0x2617c>
   3340c:	add    rsp,0x18
   33410:	pop    rbx
   33411:	pop    rbp
   33412:	pop    r12
   33414:	pop    r13
   33416:	pop    r14
   33418:	pop    r15
   3341a:	ret    
   3341b:	nop    DWORD PTR [rax+rax*1+0x0]
   33420:	neg    ebp
   33422:	mov    r15,QWORD PTR [rsp]
   33426:	jmp    333f2 <g_str_equal@plt+0x26132>
   33428:	xor    r15d,r15d
   3342b:	xor    r14d,r14d
   3342e:	mov    ebp,0xffffffea
   33433:	jmp    333f2 <g_str_equal@plt+0x26132>
   33435:	mov    ebp,0xffffffea
   3343a:	jmp    333f2 <g_str_equal@plt+0x26132>
   3343c:	call   cd30 <__stack_chk_fail@plt>
   33441:	nop    DWORD PTR [rax+rax*1+0x0]
   33446:	nop    WORD PTR cs:[rax+rax*1+0x0]
   33450:	push   rbx
   33451:	mov    ecx,edx
   33453:	mov    rbx,rsi
   33456:	sub    rsp,0x10
   3345a:	mov    rax,QWORD PTR fs:0x28
   33463:	mov    QWORD PTR [rsp+0x8],rax
   33468:	xor    eax,eax
   3346a:	mov    rax,rsp
   3346d:	mov    rdx,rax
   33470:	call   33360 <g_str_equal@plt+0x260a0>
   33475:	test   eax,eax
   33477:	js     33484 <g_str_equal@plt+0x261c4>
   33479:	mov    rax,QWORD PTR [rsp]
   3347d:	cmp    BYTE PTR [rax],0x0
   33480:	jne    334a0 <g_str_equal@plt+0x261e0>
   33482:	xor    eax,eax
   33484:	mov    rcx,QWORD PTR [rsp+0x8]
   33489:	xor    rcx,QWORD PTR fs:0x28
   33492:	jne    334ae <g_str_equal@plt+0x261ee>
   33494:	add    rsp,0x10
   33498:	pop    rbx
   33499:	ret    
   3349a:	nop    WORD PTR [rax+rax*1+0x0]
   334a0:	mov    QWORD PTR [rbx],0x0
   334a7:	mov    eax,0xffffffea
   334ac:	jmp    33484 <g_str_equal@plt+0x261c4>
   334ae:	call   cd30 <__stack_chk_fail@plt>
   334b3:	nop    DWORD PTR [rax]
   334b6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   334c0:	push   rbp
   334c1:	push   rbx
   334c2:	mov    rbx,rdi
   334c5:	sub    rsp,0x18
   334c9:	mov    rax,QWORD PTR fs:0x28
   334d2:	mov    QWORD PTR [rsp+0x8],rax
   334d7:	xor    eax,eax
   334d9:	call   cc80 <__errno_location@plt>
   334de:	mov    edx,0xa
   334e3:	mov    DWORD PTR [rax],0x0
   334e9:	mov    rsi,rsp
   334ec:	mov    rdi,rbx
   334ef:	mov    rbp,rax
   334f2:	call   cae0 <strtol@plt>
   334f7:	mov    rdx,QWORD PTR [rsp]
   334fb:	cmp    rdx,rbx
   334fe:	je     33538 <g_str_equal@plt+0x26278>
   33500:	mov    ecx,DWORD PTR [rbp+0x0]
   33503:	test   ecx,ecx
   33505:	jne    33538 <g_str_equal@plt+0x26278>
   33507:	cmp    BYTE PTR [rdx],0x0
   3350a:	jne    33538 <g_str_equal@plt+0x26278>
   3350c:	cmp    rax,0x7fffffff
   33512:	mov    edx,0xffffffff
   33517:	cmova  eax,edx
   3351a:	mov    rcx,QWORD PTR [rsp+0x8]
   3351f:	xor    rcx,QWORD PTR fs:0x28
   33528:	jne    3353f <g_str_equal@plt+0x2627f>
   3352a:	add    rsp,0x18
   3352e:	pop    rbx
   3352f:	pop    rbp
   33530:	ret    
   33531:	nop    DWORD PTR [rax+0x0]
   33538:	mov    eax,0xffffffff
   3353d:	jmp    3351a <g_str_equal@plt+0x2625a>
   3353f:	call   cd30 <__stack_chk_fail@plt>
   33544:	xchg   ax,ax
   33546:	nop    WORD PTR cs:[rax+rax*1+0x0]
   33550:	cmp    esi,0x3fff
   33556:	jbe    33580 <g_str_equal@plt+0x262c0>
   33558:	lea    r8,[rip+0x2d459]        # 609b8 <_fini@@Base+0xe264>
   3355f:	lea    rcx,[rip+0x2d3ea]        # 60950 <_fini@@Base+0xe1fc>
   33566:	lea    rsi,[rip+0x2d40b]        # 60978 <_fini@@Base+0xe224>
   3356d:	sub    rsp,0x8
   33571:	mov    edx,0x2ac
   33576:	xor    edi,edi
   33578:	call   c6b0 <g_assertion_message_expr@plt>
   3357d:	nop    DWORD PTR [rax]
   33580:	cmp    esi,0x7f
   33583:	ja     33590 <g_str_equal@plt+0x262d0>
   33585:	mov    BYTE PTR [rdi],sil
   33588:	mov    eax,0x1
   3358d:	ret    
   3358e:	xchg   ax,ax
   33590:	mov    eax,esi
   33592:	shr    esi,0x7
   33595:	or     eax,0xffffff80
   33598:	mov    BYTE PTR [rdi+0x1],sil
   3359c:	mov    BYTE PTR [rdi],al
   3359e:	mov    eax,0x2
   335a3:	ret    
   335a4:	xchg   ax,ax
   335a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   335b0:	movzx  eax,BYTE PTR [rdi]
   335b3:	test   al,al
   335b5:	js     335c0 <g_str_equal@plt+0x26300>
   335b7:	mov    DWORD PTR [rsi],eax
   335b9:	mov    eax,0x1
   335be:	ret    
   335bf:	nop
   335c0:	and    eax,0x7f
   335c3:	mov    DWORD PTR [rsi],eax
   335c5:	movzx  edx,BYTE PTR [rdi+0x1]
   335c9:	test   dl,dl
   335cb:	js     335da <g_str_equal@plt+0x2631a>
   335cd:	shl    edx,0x7
   335d0:	or     eax,edx
   335d2:	mov    DWORD PTR [rsi],eax
   335d4:	mov    eax,0x2
   335d9:	ret    
   335da:	mov    eax,0xffffffff
   335df:	ret    
   335e0:	push   r14
   335e2:	push   r13
   335e4:	mov    r13d,esi
   335e7:	push   r12
   335e9:	push   rbp
   335ea:	mov    r12d,edx
   335ed:	push   rbx
   335ee:	mov    rbp,rdi
   335f1:	sub    rsp,0x10
   335f5:	mov    rax,QWORD PTR fs:0x28
   335fe:	mov    QWORD PTR [rsp+0x8],rax
   33603:	xor    eax,eax
   33605:	call   cc40 <getenv@plt>
   3360a:	test   rax,rax
   3360d:	mov    QWORD PTR [rsp],0x0
   33615:	je     33666 <g_str_equal@plt+0x263a6>
   33617:	mov    rbx,rax
   3361a:	call   cc80 <__errno_location@plt>
   3361f:	mov    rsi,rsp
   33622:	mov    DWORD PTR [rax],0x0
   33628:	mov    edx,0xa
   3362d:	mov    rdi,rbx
   33630:	mov    r14,rax
   33633:	call   cae0 <strtol@plt>
   33638:	cmp    QWORD PTR [rsp],rbx
   3363c:	je     33666 <g_str_equal@plt+0x263a6>
   3363e:	test   rax,rax
   33641:	js     33652 <g_str_equal@plt+0x26392>
   33643:	movsxd rdx,r13d
   33646:	cmp    rdx,rax
   33649:	jl     33652 <g_str_equal@plt+0x26392>
   3364b:	mov    edx,DWORD PTR [r14]
   3364e:	test   edx,edx
   33650:	je     33669 <g_str_equal@plt+0x263a9>
   33652:	lea    rdi,[rip+0x2d36b]        # 609c4 <_fini@@Base+0xe270>
   33659:	mov    edx,r13d
   3365c:	mov    rsi,rbp
   3365f:	xor    eax,eax
   33661:	call   3ab70 <g_str_equal@plt+0x2d8b0>
   33666:	mov    eax,r12d
   33669:	mov    rcx,QWORD PTR [rsp+0x8]
   3366e:	xor    rcx,QWORD PTR fs:0x28
   33677:	jne    33686 <g_str_equal@plt+0x263c6>
   33679:	add    rsp,0x10
   3367d:	pop    rbx
   3367e:	pop    rbp
   3367f:	pop    r12
   33681:	pop    r13
   33683:	pop    r14
   33685:	ret    
   33686:	call   cd30 <__stack_chk_fail@plt>
   3368b:	nop    DWORD PTR [rax+rax*1+0x0]
   33690:	sub    rsp,0x10
   33694:	movzx  eax,BYTE PTR [rdi+0x5]
   33698:	lea    r8,[rip+0x2d337]        # 609d6 <_fini@@Base+0xe282>
   3369f:	mov    ecx,0x12
   336a4:	mov    edx,0x1
   336a9:	mov    esi,0x12
   336ae:	push   rax
   336af:	movzx  eax,BYTE PTR [rdi+0x4]
   336b3:	push   rax
   336b4:	movzx  eax,BYTE PTR [rdi+0x3]
   336b8:	push   rax
   336b9:	movzx  eax,BYTE PTR [rdi+0x2]
   336bd:	push   rax
   336be:	movzx  eax,BYTE PTR [rdi+0x1]
   336c2:	push   rax
   336c3:	movzx  r9d,BYTE PTR [rdi]
   336c7:	lea    rdi,[rip+0x251432]        # 284b00 <stdout@@GLIBC_2.2.5+0x1b8>
   336ce:	xor    eax,eax
   336d0:	call   cfe0 <__snprintf_chk@plt>
   336d5:	lea    rax,[rip+0x251424]        # 284b00 <stdout@@GLIBC_2.2.5+0x1b8>
   336dc:	add    rsp,0x38
   336e0:	ret    
   336e1:	nop    DWORD PTR [rax+rax*1+0x0]
   336e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   336f0:	sub    rsp,0x28
   336f4:	mov    rax,QWORD PTR fs:0x28
   336fd:	mov    QWORD PTR [rsp+0x18],rax
   33702:	xor    eax,eax
   33704:	test   rdi,rdi
   33707:	js     337b0 <g_str_equal@plt+0x264f0>
   3370d:	pxor   xmm1,xmm1
   33711:	cvtsi2sd xmm1,rdi
   33716:	movapd xmm0,xmm1
   3371a:	lea    rdi,[rsp+0x14]
   3371f:	movsd  QWORD PTR [rsp+0x8],xmm1
   33725:	divsd  xmm0,QWORD PTR [rip+0x2d2fb]        # 60a28 <_fini@@Base+0xe2d4>
   3372d:	call   c190 <frexp@plt>
   33732:	mov    eax,DWORD PTR [rsp+0x14]
   33736:	mov    edx,0x66666667
   3373b:	movsd  xmm1,QWORD PTR [rsp+0x8]
   33741:	lea    ecx,[rax-0x1]
   33744:	mov    eax,ecx
   33746:	sar    ecx,0x1f
   33749:	imul   edx
   3374b:	sar    edx,0x2
   3374e:	sub    edx,ecx
   33750:	mov    rax,QWORD PTR [rsp+0x18]
   33755:	xor    rax,QWORD PTR fs:0x28
   3375e:	jne    337eb <g_str_equal@plt+0x2652b>
   33764:	lea    rax,[rip+0x24d3b5]        # 280b20 <_fini@@Base+0x22e3cc>
   3376b:	movsxd rcx,edx
   3376e:	mov    rsi,QWORD PTR [rax+rcx*8]
   33772:	lea    ecx,[rdx+rdx*4]
   33775:	mov    eax,0x1
   3377a:	add    ecx,ecx
   3377c:	shl    rax,cl
   3377f:	test   rax,rax
   33782:	js     337d0 <g_str_equal@plt+0x26510>
   33784:	pxor   xmm0,xmm0
   33788:	cvtsi2sd xmm0,rax
   3378d:	divsd  xmm1,xmm0
   33791:	lea    rdi,[rip+0x2d25c]        # 609f4 <_fini@@Base+0xe2a0>
   33798:	mov    eax,0x1
   3379d:	add    rsp,0x28
   337a1:	movapd xmm0,xmm1
   337a5:	jmp    c740 <g_strdup_printf@plt>
   337aa:	nop    WORD PTR [rax+rax*1+0x0]
   337b0:	mov    rax,rdi
   337b3:	pxor   xmm1,xmm1
   337b7:	shr    rax,1
   337ba:	and    edi,0x1
   337bd:	or     rax,rdi
   337c0:	cvtsi2sd xmm1,rax
   337c5:	addsd  xmm1,xmm1
   337c9:	jmp    33716 <g_str_equal@plt+0x26456>
   337ce:	xchg   ax,ax
   337d0:	mov    rdx,rax
   337d3:	pxor   xmm0,xmm0
   337d7:	shr    rdx,1
   337da:	and    eax,0x1
   337dd:	or     rdx,rax
   337e0:	cvtsi2sd xmm0,rdx
   337e5:	addsd  xmm0,xmm0
   337e9:	jmp    3378d <g_str_equal@plt+0x264cd>
   337eb:	call   cd30 <__stack_chk_fail@plt>
   337f0:	test   rsi,rsi
   337f3:	je     338f8 <g_str_equal@plt+0x26638>
   337f9:	movzx  ecx,BYTE PTR [rdi]
   337fc:	test   cl,cl
   337fe:	je     338f8 <g_str_equal@plt+0x26638>
   33804:	test   cl,cl
   33806:	lea    r10,[rdi+0x1]
   3380a:	jns    33898 <g_str_equal@plt+0x265d8>
   33810:	cmp    cl,0xfd
   33813:	push   rbx
   33814:	movzx  ebx,cl
   33817:	ja     3388b <g_str_equal@plt+0x265cb>
   33819:	and    ecx,0x40
   3381c:	je     3388b <g_str_equal@plt+0x265cb>
   3381e:	xor    r9d,r9d
   33821:	mov    r8d,0x80
   33827:	jmp    33833 <g_str_equal@plt+0x26573>
   33829:	nop    DWORD PTR [rax+0x0]
   33830:	mov    r9d,r11d
   33833:	shr    r8d,1
   33836:	lea    r11d,[r9+0x1]
   3383a:	test   ebx,r8d
   3383d:	jne    33830 <g_str_equal@plt+0x26570>
   3383f:	sub    r9d,0x1
   33843:	cmp    r9d,0x4
   33847:	ja     33901 <g_str_equal@plt+0x26641>
   3384d:	lea    eax,[r8-0x1]
   33851:	add    rdi,rsi
   33854:	mov    r8d,0x1
   3385a:	and    eax,ebx
   3385c:	jmp    33886 <g_str_equal@plt+0x265c6>
   3385e:	xchg   ax,ax
   33860:	movzx  ecx,BYTE PTR [r10]
   33864:	mov    esi,ecx
   33866:	and    esi,0xffffffc0
   33869:	cmp    sil,0x80
   3386d:	jne    3388b <g_str_equal@plt+0x265cb>
   3386f:	mov    esi,ecx
   33871:	shl    eax,0x6
   33874:	add    r8d,0x1
   33878:	and    esi,0x3f
   3387b:	add    r10,0x1
   3387f:	or     eax,esi
   33881:	cmp    r8d,r11d
   33884:	jae    338a0 <g_str_equal@plt+0x265e0>
   33886:	cmp    rdi,r10
   33889:	jne    33860 <g_str_equal@plt+0x265a0>
   3388b:	mov    eax,0xffffffff
   33890:	mov    QWORD PTR [rdx],r10
   33893:	pop    rbx
   33894:	ret    
   33895:	nop    DWORD PTR [rax]
   33898:	movzx  eax,cl
   3389b:	mov    QWORD PTR [rdx],r10
   3389e:	ret    
   3389f:	nop
   338a0:	cmp    eax,0x10ffff
   338a5:	jg     3388b <g_str_equal@plt+0x265cb>
   338a7:	lea    ecx,[rax-0xfdd0]
   338ad:	cmp    ecx,0x1f
   338b0:	jbe    3388b <g_str_equal@plt+0x265cb>
   338b2:	mov    ecx,eax
   338b4:	and    ecx,0xfffe
   338ba:	cmp    ecx,0xfffe
   338c0:	je     3388b <g_str_equal@plt+0x265cb>
   338c2:	lea    ecx,[rax-0xd800]
   338c8:	cmp    ecx,0x7ff
   338ce:	jbe    3388b <g_str_equal@plt+0x265cb>
   338d0:	lea    rcx,[rip+0x2d1a9]        # 60a80 <_fini@@Base+0xe32c>
   338d7:	cmp    DWORD PTR [rcx+r9*4],eax
   338db:	jle    33890 <g_str_equal@plt+0x265d0>
   338dd:	test   eax,eax
   338df:	setne  al
   338e2:	cmp    r11d,0x2
   338e6:	setne  cl
   338e9:	or     eax,ecx
   338eb:	movzx  eax,al
   338ee:	neg    eax
   338f0:	jmp    33890 <g_str_equal@plt+0x265d0>
   338f2:	nop    WORD PTR [rax+rax*1+0x0]
   338f8:	mov    QWORD PTR [rdx],rdi
   338fb:	mov    eax,0xffffffff
   33900:	ret    
   33901:	lea    rcx,[rip+0x2d198]        # 60aa0 <_fini@@Base+0xe34c>
   33908:	lea    rsi,[rip+0x2d121]        # 60a30 <_fini@@Base+0xe2dc>
   3390f:	lea    rdi,[rip+0x2d152]        # 60a68 <_fini@@Base+0xe314>
   33916:	mov    edx,0x4a
   3391b:	call   c390 <__assert_fail@plt>
   33920:	repz ret 
   33922:	nop    DWORD PTR [rax+0x0]
   33926:	nop    WORD PTR cs:[rax+rax*1+0x0]
   33930:	movzx  eax,BYTE PTR [rdi-0x4]
   33934:	test   al,al
   33936:	setne  al
   33939:	ret    
   3393a:	nop    WORD PTR [rax+rax*1+0x0]
   33940:	push   r12
   33942:	push   rbp
   33943:	mov    rbp,rdi
   33946:	push   rbx
   33947:	mov    rdi,QWORD PTR [rdi+0xc8]
   3394e:	call   34c60 <g_str_equal@plt+0x279a0>
   33953:	cmp    QWORD PTR [rbp+0xb8],0x0
   3395b:	jne    33a61 <g_str_equal@plt+0x267a1>
   33961:	mov    rax,QWORD PTR [rbp+0xc0]
   33968:	lea    r12,[rbp+0x9c]
   3396f:	mov    rdi,r12
   33972:	mov    BYTE PTR [rax+0x20],0x0
   33976:	mov    BYTE PTR [rax+0x22],0x1
   3397a:	call   51e40 <g_str_equal@plt+0x44b80>
   3397f:	mov    rdi,r12
   33982:	call   52170 <g_str_equal@plt+0x44eb0>
   33987:	test   eax,eax
   33989:	jne    33a42 <g_str_equal@plt+0x26782>
   3398f:	mov    rdi,QWORD PTR [rbp+0xa0]
   33996:	test   rdi,rdi
   33999:	je     339d1 <g_str_equal@plt+0x26711>
   3399b:	cmp    BYTE PTR [rdi+0x22],0x0
   3399f:	mov    rbx,QWORD PTR [rdi+0x18]
   339a3:	jne    339c0 <g_str_equal@plt+0x26700>
   339a5:	jmp    33a23 <g_str_equal@plt+0x26763>
   339a7:	nop    WORD PTR [rax+rax*1+0x0]
   339b0:	cmp    BYTE PTR [rbx+0x22],0x0
   339b4:	mov    rax,QWORD PTR [rbx+0x18]
   339b8:	mov    rdi,rbx
   339bb:	je     33a23 <g_str_equal@plt+0x26763>
   339bd:	mov    rbx,rax
   339c0:	call   d2b0 <g_free@plt>
   339c5:	test   rbx,rbx
   339c8:	mov    QWORD PTR [rbp+0xa0],rbx
   339cf:	jne    339b0 <g_str_equal@plt+0x266f0>
   339d1:	lea    rbx,[rbp+0xac]
   339d8:	mov    rdi,r12
   339db:	call   52020 <g_str_equal@plt+0x44d60>
   339e0:	mov    rsi,rbx
   339e3:	xor    r8d,r8d
   339e6:	xor    ecx,ecx
   339e8:	xor    edx,edx
   339ea:	mov    rdi,rbp
   339ed:	call   36c80 <g_str_equal@plt+0x299c0>
   339f2:	mov    rdi,rbx
   339f5:	call   379d0 <g_str_equal@plt+0x2a710>
   339fa:	lea    rdi,[rbp+0x60]
   339fe:	call   38ba0 <g_str_equal@plt+0x2b8e0>
   33a03:	mov    rdi,r12
   33a06:	call   51bf0 <g_str_equal@plt+0x44930>
   33a0b:	lea    rdi,[rbp+0xd0]
   33a12:	call   353f0 <g_str_equal@plt+0x28130>
   33a17:	pop    rbx
   33a18:	mov    rdi,rbp
   33a1b:	pop    rbp
   33a1c:	pop    r12
   33a1e:	jmp    37710 <g_str_equal@plt+0x2a450>
   33a23:	lea    rcx,[rip+0x2d256]        # 60c80 <_fini@@Base+0xe52c>
   33a2a:	lea    rsi,[rip+0x2d087]        # 60ab8 <_fini@@Base+0xe364>
   33a31:	lea    rdi,[rip+0x2d1ce]        # 60c06 <_fini@@Base+0xe4b2>
   33a38:	mov    edx,0x121
   33a3d:	call   c390 <__assert_fail@plt>
   33a42:	lea    rcx,[rip+0x2d237]        # 60c80 <_fini@@Base+0xe52c>
   33a49:	lea    rsi,[rip+0x2d068]        # 60ab8 <_fini@@Base+0xe364>
   33a50:	lea    rdi,[rip+0x2d0c9]        # 60b20 <_fini@@Base+0xe3cc>
   33a57:	mov    edx,0x11c
   33a5c:	call   c390 <__assert_fail@plt>
   33a61:	lea    rcx,[rip+0x2d218]        # 60c80 <_fini@@Base+0xe52c>
   33a68:	lea    rsi,[rip+0x2d049]        # 60ab8 <_fini@@Base+0xe364>
   33a6f:	lea    rdi,[rip+0x2d07a]        # 60af0 <_fini@@Base+0xe39c>
   33a76:	mov    edx,0x118
   33a7b:	call   c390 <__assert_fail@plt>
   33a80:	push   r15
   33a82:	push   r14
   33a84:	push   r13
   33a86:	push   r12
   33a88:	push   rbp
   33a89:	push   rbx
   33a8a:	xor    ebx,ebx
   33a8c:	sub    rsp,0x38
   33a90:	mov    rax,QWORD PTR fs:0x28
   33a99:	mov    QWORD PTR [rsp+0x28],rax
   33a9e:	xor    eax,eax
   33aa0:	xchg   QWORD PTR [rdi+0xb8],rbx
   33aa7:	test   rbx,rbx
   33aaa:	je     33b26 <g_str_equal@plt+0x26866>
   33aac:	mov    r13,rdi
   33aaf:	xor    r14d,r14d
   33ab2:	jmp    33abe <g_str_equal@plt+0x267fe>
   33ab4:	nop    DWORD PTR [rax+0x0]
   33ab8:	mov    r14,rbx
   33abb:	mov    rbx,rax
   33abe:	mov    rax,QWORD PTR [rbx+0x50]
   33ac2:	mov    QWORD PTR [rbx+0x50],r14
   33ac6:	test   rax,rax
   33ac9:	jne    33ab8 <g_str_equal@plt+0x267f8>
   33acb:	lea    r12,[r13+0x60]
   33acf:	lea    r15,[rsp+0x10]
   33ad4:	lea    rbp,[rip+0x2cfdd]        # 60ab8 <_fini@@Base+0xe364>
   33adb:	jmp    33ae7 <g_str_equal@plt+0x26827>
   33add:	nop    DWORD PTR [rax]
   33ae0:	mov    rbx,r14
   33ae3:	mov    r14,QWORD PTR [r14+0x50]
   33ae7:	mov    eax,DWORD PTR [rip+0x250feb]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   33aed:	test   eax,eax
   33aef:	jne    33b48 <g_str_equal@plt+0x26888>
   33af1:	mov    edx,0x1ff
   33af6:	mov    rsi,rbp
   33af9:	mov    rdi,r12
   33afc:	call   38bf0 <g_str_equal@plt+0x2b930>
   33b01:	mov    QWORD PTR [rbx+0x30],0x0
   33b09:	mov    rdi,rbx
   33b0c:	call   42640 <g_str_equal@plt+0x35380>
   33b11:	mov    edx,0x204
   33b16:	mov    rsi,rbp
   33b19:	mov    rdi,r12
   33b1c:	call   38e70 <g_str_equal@plt+0x2bbb0>
   33b21:	test   r14,r14
   33b24:	jne    33ae0 <g_str_equal@plt+0x26820>
   33b26:	mov    rax,QWORD PTR [rsp+0x28]
   33b2b:	xor    rax,QWORD PTR fs:0x28
   33b34:	jne    33ba1 <g_str_equal@plt+0x268e1>
   33b36:	add    rsp,0x38
   33b3a:	pop    rbx
   33b3b:	pop    rbp
   33b3c:	pop    r12
   33b3e:	pop    r13
   33b40:	pop    r14
   33b42:	pop    r15
   33b44:	ret    
   33b45:	nop    DWORD PTR [rax]
   33b48:	cmp    WORD PTR [rip+0x253532],0x0        # 287082 <stdout@@GLIBC_2.2.5+0x273a>
   33b50:	je     33af1 <g_str_equal@plt+0x26831>
   33b52:	test   BYTE PTR [rip+0x252348],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   33b59:	je     33af1 <g_str_equal@plt+0x26831>
   33b5b:	xor    esi,esi
   33b5d:	mov    rdi,r15
   33b60:	call   c3e0 <gettimeofday@plt>
   33b65:	mov    rcx,QWORD PTR [rsp+0x18]
   33b6a:	mov    rdx,QWORD PTR [rsp+0x10]
   33b6f:	mov    QWORD PTR [rsp+0x8],rcx
   33b74:	mov    QWORD PTR [rsp],rdx
   33b78:	call   c5b0 <getpid@plt>
   33b7d:	mov    rcx,QWORD PTR [rsp+0x8]
   33b82:	mov    rdx,QWORD PTR [rsp]
   33b86:	lea    rdi,[rip+0x2cfbb]        # 60b48 <_fini@@Base+0xe3f4>
   33b8d:	mov    esi,eax
   33b8f:	mov    r9,rbx
   33b92:	mov    r8,r13
   33b95:	xor    eax,eax
   33b97:	call   431a0 <g_str_equal@plt+0x35ee0>
   33b9c:	jmp    33af1 <g_str_equal@plt+0x26831>
   33ba1:	call   cd30 <__stack_chk_fail@plt>
   33ba6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   33bb0:	sub    rsp,0x8
   33bb4:	test   rsi,rsi
   33bb7:	jne    33bc8 <g_str_equal@plt+0x26908>
   33bb9:	call   36df0 <g_str_equal@plt+0x29b30>
   33bbe:	mov    eax,0x1
   33bc3:	add    rsp,0x8
   33bc7:	ret    
   33bc8:	lea    rcx,[rip+0x2d091]        # 60c60 <_fini@@Base+0xe50c>
   33bcf:	lea    rsi,[rip+0x2cee2]        # 60ab8 <_fini@@Base+0xe364>
   33bd6:	lea    rdi,[rip+0x2d040]        # 60c1d <_fini@@Base+0xe4c9>
   33bdd:	mov    edx,0x104
   33be2:	call   c390 <__assert_fail@plt>
   33be7:	nop    WORD PTR [rax+rax*1+0x0]
   33bf0:	push   r13
   33bf2:	push   r12
   33bf4:	mov    r13,rsi
   33bf7:	push   rbp
   33bf8:	push   rbx
   33bf9:	mov    rbp,rdi
   33bfc:	mov    edi,0x28
   33c01:	mov    r12,rdx
   33c04:	sub    rsp,0x8
   33c08:	call   c500 <g_malloc@plt>
   33c0d:	pxor   xmm0,xmm0
   33c11:	mov    QWORD PTR [rax],rbp
   33c14:	mov    QWORD PTR [rax+0x8],r13
   33c18:	mov    QWORD PTR [rax+0x20],0x0
   33c20:	mov    rbx,rax
   33c23:	movups XMMWORD PTR [rax+0x10],xmm0
   33c27:	mov    QWORD PTR [rax+0x10],r12
   33c2b:	lea    r12,[rbp+0x9c]
   33c32:	mov    rdi,r12
   33c35:	call   51e40 <g_str_equal@plt+0x44b80>
   33c3a:	mov    rax,QWORD PTR [rbp+0xa0]
   33c41:	mov    QWORD PTR [rbx+0x18],rax
   33c45:	mov    QWORD PTR [rbp+0xa0],rbx
   33c4c:	mov    rdi,r12
   33c4f:	call   52020 <g_str_equal@plt+0x44d60>
   33c54:	add    rsp,0x8
   33c58:	mov    rax,rbx
   33c5b:	pop    rbx
   33c5c:	pop    rbp
   33c5d:	pop    r12
   33c5f:	pop    r13
   33c61:	ret    
   33c62:	nop    DWORD PTR [rax+0x0]
   33c66:	nop    WORD PTR cs:[rax+rax*1+0x0]
   33c70:	mov    rax,rdi
   33c73:	mov    rdi,QWORD PTR [rdi+0x10]
   33c77:	jmp    QWORD PTR [rax+0x8]
   33c7a:	nop    WORD PTR [rax+rax*1+0x0]
   33c80:	push   r15
   33c82:	push   r14
   33c84:	push   r13
   33c86:	push   r12
   33c88:	push   rbp
   33c89:	push   rbx
   33c8a:	sub    rsp,0x18
   33c8e:	mov    rbx,QWORD PTR [rdi+0xa0]
   33c95:	test   rbx,rbx
   33c98:	je     33d70 <g_str_equal@plt+0x26ab0>
   33c9e:	lea    r14,[rdi+0xa0]
   33ca5:	mov    QWORD PTR [rsp+0x8],rdi
   33caa:	xor    ebp,ebp
   33cac:	xor    r12d,r12d
   33caf:	xor    r13d,r13d
   33cb2:	nop    WORD PTR [rax+rax*1+0x0]
   33cb8:	mov    r15,QWORD PTR [rbx+0x18]
   33cbc:	mov    eax,r13d
   33cbf:	xchg   BYTE PTR [rbx+0x20],al
   33cc2:	test   al,al
   33cc4:	je     33cde <g_str_equal@plt+0x26a1e>
   33cc6:	cmp    BYTE PTR [rbx+0x21],0x0
   33cca:	mov    eax,0x1
   33ccf:	mov    BYTE PTR [rbx+0x21],0x0
   33cd3:	mov    rdi,QWORD PTR [rbx+0x10]
   33cd7:	cmove  r12d,eax
   33cdb:	call   QWORD PTR [rbx+0x8]
   33cde:	movzx  eax,BYTE PTR [rbx+0x22]
   33ce2:	mov    rbx,r15
   33ce5:	test   al,al
   33ce7:	cmovne ebp,eax
   33cea:	test   r15,r15
   33ced:	jne    33cb8 <g_str_equal@plt+0x269f8>
   33cef:	test   bpl,bpl
   33cf2:	jne    33d10 <g_str_equal@plt+0x26a50>
   33cf4:	add    rsp,0x18
   33cf8:	mov    eax,r12d
   33cfb:	pop    rbx
   33cfc:	pop    rbp
   33cfd:	pop    r12
   33cff:	pop    r13
   33d01:	pop    r14
   33d03:	pop    r15
   33d05:	ret    
   33d06:	nop    WORD PTR cs:[rax+rax*1+0x0]
   33d10:	mov    r15,QWORD PTR [rsp+0x8]
   33d15:	lea    rbx,[r15+0x9c]
   33d1c:	mov    rdi,rbx
   33d1f:	call   51d90 <g_str_equal@plt+0x44ad0>
   33d24:	test   al,al
   33d26:	je     33cf4 <g_str_equal@plt+0x26a34>
   33d28:	mov    rdi,QWORD PTR [r15+0xa0]
   33d2f:	test   rdi,rdi
   33d32:	je     33d50 <g_str_equal@plt+0x26a90>
   33d34:	cmp    BYTE PTR [rdi+0x22],0x0
   33d38:	mov    rax,QWORD PTR [rdi+0x18]
   33d3c:	je     33d44 <g_str_equal@plt+0x26a84>
   33d3e:	cmp    BYTE PTR [rdi+0x20],0x0
   33d42:	je     33d60 <g_str_equal@plt+0x26aa0>
   33d44:	lea    r14,[rdi+0x18]
   33d48:	mov    rdi,rax
   33d4b:	test   rdi,rdi
   33d4e:	jne    33d34 <g_str_equal@plt+0x26a74>
   33d50:	mov    rdi,rbx
   33d53:	call   51ed0 <g_str_equal@plt+0x44c10>
   33d58:	jmp    33cf4 <g_str_equal@plt+0x26a34>
   33d5a:	nop    WORD PTR [rax+rax*1+0x0]
   33d60:	mov    QWORD PTR [r14],rax
   33d63:	call   d2b0 <g_free@plt>
   33d68:	mov    rdi,QWORD PTR [r14]
   33d6b:	jmp    33d2f <g_str_equal@plt+0x26a6f>
   33d6d:	nop    DWORD PTR [rax]
   33d70:	xor    r12d,r12d
   33d73:	jmp    33cf4 <g_str_equal@plt+0x26a34>
   33d78:	nop    DWORD PTR [rax+rax*1+0x0]
   33d80:	mov    eax,0x1
   33d85:	mov    BYTE PTR [rdi+0x21],0x1
   33d89:	xchg   BYTE PTR [rdi+0x20],al
   33d8c:	ret    
   33d8d:	nop    DWORD PTR [rax]
   33d90:	xor    eax,eax
   33d92:	xchg   BYTE PTR [rdi+0x20],al
   33d95:	ret    
   33d96:	nop    WORD PTR cs:[rax+rax*1+0x0]
   33da0:	mov    BYTE PTR [rdi+0x20],0x0
   33da4:	mov    BYTE PTR [rdi+0x22],0x1
   33da8:	ret    
   33da9:	nop    DWORD PTR [rax+0x0]
   33db0:	push   rbx
   33db1:	mov    rax,QWORD PTR [rdi+0xa0]
   33db8:	test   rax,rax
   33dbb:	mov    rbx,0xffffffffffffffff
   33dc2:	je     33de2 <g_str_equal@plt+0x26b22>
   33dc4:	nop    DWORD PTR [rax+0x0]
   33dc8:	cmp    BYTE PTR [rax+0x20],0x0
   33dcc:	je     33dd9 <g_str_equal@plt+0x26b19>
   33dce:	cmp    BYTE PTR [rax+0x21],0x0
   33dd2:	je     33e00 <g_str_equal@plt+0x26b40>
   33dd4:	mov    ebx,0x989680
   33dd9:	mov    rax,QWORD PTR [rax+0x18]
   33ddd:	test   rax,rax
   33de0:	jne    33dc8 <g_str_equal@plt+0x26b08>
   33de2:	add    rdi,0xd0
   33de9:	call   35780 <g_str_equal@plt+0x284c0>
   33dee:	test   rax,rax
   33df1:	je     33e00 <g_str_equal@plt+0x26b40>
   33df3:	cmp    rax,rbx
   33df6:	cmova  rax,rbx
   33dfa:	pop    rbx
   33dfb:	ret    
   33dfc:	nop    DWORD PTR [rax+0x0]
   33e00:	xor    eax,eax
   33e02:	pop    rbx
   33e03:	ret    
   33e04:	xchg   ax,ax
   33e06:	nop    WORD PTR cs:[rax+rax*1+0x0]
   33e10:	push   rbp
   33e11:	push   rbx
   33e12:	mov    rbp,rsi
   33e15:	mov    rbx,rdi
   33e18:	sub    rsp,0x8
   33e1c:	lock or DWORD PTR [rdi+0x98],0x1
   33e24:	call   33db0 <g_str_equal@plt+0x26af0>
   33e29:	mov    rdi,rax
   33e2c:	call   35070 <g_str_equal@plt+0x27db0>
   33e31:	mov    rdi,rbx
   33e34:	mov    DWORD PTR [rbp+0x0],eax
   33e37:	call   36d20 <g_str_equal@plt+0x29a60>
   33e3c:	test   al,al
   33e3e:	je     33e58 <g_str_equal@plt+0x26b98>
   33e40:	mov    DWORD PTR [rbp+0x0],0x0
   33e47:	add    rsp,0x8
   33e4b:	mov    eax,0x1
   33e50:	pop    rbx
   33e51:	pop    rbp
   33e52:	ret    
   33e53:	nop    DWORD PTR [rax+rax*1+0x0]
   33e58:	mov    edx,DWORD PTR [rbp+0x0]
   33e5b:	xor    eax,eax
   33e5d:	test   edx,edx
   33e5f:	sete   al
   33e62:	add    rsp,0x8
   33e66:	pop    rbx
   33e67:	pop    rbp
   33e68:	ret    
   33e69:	nop    DWORD PTR [rax+0x0]
   33e70:	push   rbx
   33e71:	mov    rbx,rdi
   33e74:	call   c8a0 <g_source_ref@plt>
   33e79:	mov    rax,rbx
   33e7c:	pop    rbx
   33e7d:	ret    
   33e7e:	xchg   ax,ax
   33e80:	mov    rax,QWORD PTR [rdi+0xc8]
   33e87:	test   rax,rax
   33e8a:	je     33e90 <g_str_equal@plt+0x26bd0>
   33e8c:	repz ret 
   33e8e:	xchg   ax,ax
   33e90:	push   rbx
   33e91:	mov    rbx,rdi
   33e94:	call   34b70 <g_str_equal@plt+0x278b0>
   33e99:	mov    QWORD PTR [rbx+0xc8],rax
   33ea0:	pop    rbx
   33ea1:	ret    
   33ea2:	nop    DWORD PTR [rax+0x0]
   33ea6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   33eb0:	mfence 
   33eb3:	mov    eax,DWORD PTR [rdi+0x98]
   33eb9:	test   eax,eax
   33ebb:	jne    33ec0 <g_str_equal@plt+0x26c00>
   33ebd:	repz ret 
   33ebf:	nop
   33ec0:	push   rbx
   33ec1:	mov    rbx,rdi
   33ec4:	lea    rdi,[rdi+0xac]
   33ecb:	call   37a10 <g_str_equal@plt+0x2a750>
   33ed0:	mov    eax,0x1
   33ed5:	xchg   BYTE PTR [rbx+0xa8],al
   33edb:	pop    rbx
   33edc:	ret    
   33edd:	nop    DWORD PTR [rax]
   33ee0:	push   r13
   33ee2:	push   r12
   33ee4:	mov    r13,rsi
   33ee7:	push   rbp
   33ee8:	push   rbx
   33ee9:	mov    rbp,rdi
   33eec:	mov    edi,0x28
   33ef1:	mov    r12,rdx
   33ef4:	sub    rsp,0x8
   33ef8:	call   c500 <g_malloc@plt>
   33efd:	pxor   xmm0,xmm0
   33f01:	mov    QWORD PTR [rax],rbp
   33f04:	mov    QWORD PTR [rax+0x8],r13
   33f08:	mov    QWORD PTR [rax+0x20],0x0
   33f10:	mov    rbx,rax
   33f13:	movups XMMWORD PTR [rax+0x10],xmm0
   33f17:	mov    QWORD PTR [rax+0x10],r12
   33f1b:	lea    r12,[rbp+0x9c]
   33f22:	mov    rdi,r12
   33f25:	call   51e40 <g_str_equal@plt+0x44b80>
   33f2a:	mov    rax,QWORD PTR [rbp+0xa0]
   33f31:	mov    BYTE PTR [rbx+0x20],0x1
   33f35:	mov    BYTE PTR [rbx+0x22],0x1
   33f39:	mov    QWORD PTR [rbx+0x18],rax
   33f3d:	mov    QWORD PTR [rbp+0xa0],rbx
   33f44:	mov    rdi,r12
   33f47:	call   52020 <g_str_equal@plt+0x44d60>
   33f4c:	add    rsp,0x8
   33f50:	mov    rdi,rbp
   33f53:	pop    rbx
   33f54:	pop    rbp
   33f55:	pop    r12
   33f57:	pop    r13
   33f59:	jmp    33eb0 <g_str_equal@plt+0x26bf0>
   33f5e:	xchg   ax,ax
   33f60:	mov    rdx,QWORD PTR [rdi]
   33f63:	mov    eax,0x1
   33f68:	mov    BYTE PTR [rdi+0x21],0x0
   33f6c:	xchg   BYTE PTR [rdi+0x20],al
   33f6f:	test   al,al
   33f71:	je     33f78 <g_str_equal@plt+0x26cb8>
   33f73:	repz ret 
   33f75:	nop    DWORD PTR [rax]
   33f78:	mov    rdi,rdx
   33f7b:	jmp    33eb0 <g_str_equal@plt+0x26bf0>
   33f80:	jmp    33eb0 <g_str_equal@plt+0x26bf0>
   33f85:	nop
   33f86:	nop    WORD PTR cs:[rax+rax*1+0x0]
   33f90:	xor    eax,eax
   33f92:	xchg   BYTE PTR [rdi+0xa8],al
   33f98:	test   al,al
   33f9a:	jne    33fa0 <g_str_equal@plt+0x26ce0>
   33f9c:	repz ret 
   33f9e:	xchg   ax,ax
   33fa0:	add    rdi,0xac
   33fa7:	jmp    37b80 <g_str_equal@plt+0x2a8c0>
   33fac:	nop    DWORD PTR [rax+0x0]
   33fb0:	push   rbx
   33fb1:	mov    rbx,rdi
   33fb4:	lock and DWORD PTR [rdi+0x98],0xfffffffe
   33fbc:	call   33f90 <g_str_equal@plt+0x26cd0>
   33fc1:	mov    rax,QWORD PTR [rbx+0xa0]
   33fc8:	test   rax,rax
   33fcb:	jne    33fd9 <g_str_equal@plt+0x26d19>
   33fcd:	jmp    33ff0 <g_str_equal@plt+0x26d30>
   33fcf:	nop
   33fd0:	mov    rax,QWORD PTR [rax+0x18]
   33fd4:	test   rax,rax
   33fd7:	je     33ff0 <g_str_equal@plt+0x26d30>
   33fd9:	cmp    BYTE PTR [rax+0x20],0x0
   33fdd:	je     33fd0 <g_str_equal@plt+0x26d10>
   33fdf:	mov    eax,0x1
   33fe4:	pop    rbx
   33fe5:	ret    
   33fe6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   33ff0:	mov    rdi,rbx
   33ff3:	call   36d50 <g_str_equal@plt+0x29a90>
   33ff8:	test   al,al
   33ffa:	jne    33fdf <g_str_equal@plt+0x26d1f>
   33ffc:	lea    rdi,[rbx+0xd0]
   34003:	call   35780 <g_str_equal@plt+0x284c0>
   34008:	test   rax,rax
   3400b:	sete   al
   3400e:	movzx  eax,al
   34011:	pop    rbx
   34012:	ret    
   34013:	nop    DWORD PTR [rax]
   34016:	nop    WORD PTR cs:[rax+rax*1+0x0]
   34020:	push   r12
   34022:	mov    r12,rdi
   34025:	push   rbp
   34026:	lea    rdi,[rip+0x24e4f3]        # 282520 <g_test_config_vars+0x1160>
   3402d:	push   rbx
   3402e:	mov    esi,0x128
   34033:	call   c610 <g_source_new@plt>
   34038:	mov    rbx,rax
   3403b:	mov    rdi,rax
   3403e:	lea    rbp,[rbx+0xac]
   34045:	call   37680 <g_str_equal@plt+0x2a3c0>
   3404a:	xor    esi,esi
   3404c:	mov    rdi,rbp
   3404f:	call   37a70 <g_str_equal@plt+0x2a7b0>
   34054:	test   eax,eax
   34056:	js     34118 <g_str_equal@plt+0x26e58>
   3405c:	mov    esi,0x1
   34061:	mov    rdi,rbx
   34064:	call   c340 <g_source_set_can_recurse@plt>
   34069:	lea    rdi,[rbx+0x9c]
   34070:	call   51be0 <g_str_equal@plt+0x44920>
   34075:	lea    rsi,[rip+0xfffffffffffffa04]        # 33a80 <g_str_equal@plt+0x267c0>
   3407c:	mov    rdx,rbx
   3407f:	mov    rdi,rbx
   34082:	call   33bf0 <g_str_equal@plt+0x26930>
   34087:	lea    r8,[rip+0xfffffffffffff8a2]        # 33930 <g_str_equal@plt+0x26670>
   3408e:	lea    rcx,[rip+0xfffffffffffff88b]        # 33920 <g_str_equal@plt+0x26660>
   34095:	mov    QWORD PTR [rbx+0xc0],rax
   3409c:	xor    edx,edx
   3409e:	mov    rsi,rbp
   340a1:	mov    rdi,rbx
   340a4:	mov    QWORD PTR [rbx+0xb8],0x0
   340af:	call   36c80 <g_str_equal@plt+0x299c0>
   340b4:	lea    rdi,[rbx+0x60]
   340b8:	mov    QWORD PTR [rbx+0xc8],0x0
   340c3:	call   38f70 <g_str_equal@plt+0x2bcb0>
   340c8:	lea    rdi,[rbx+0xd0]
   340cf:	lea    rsi,[rip+0xfffffffffffffeaa]        # 33f80 <g_str_equal@plt+0x26cc0>
   340d6:	mov    rdx,rbx
   340d9:	call   353b0 <g_str_equal@plt+0x280f0>
   340de:	mov    QWORD PTR [rbx+0xf8],0x0
   340e9:	mov    QWORD PTR [rbx+0x100],0x0
   340f4:	mov    QWORD PTR [rbx+0x108],0x0
   340ff:	mov    QWORD PTR [rbx+0x110],0x0
   3410a:	mov    rax,rbx
   3410d:	pop    rbx
   3410e:	pop    rbp
   3410f:	pop    r12
   34111:	ret    
   34112:	nop    WORD PTR [rax+rax*1+0x0]
   34118:	lea    r9,[rip+0x2ca61]        # 60b80 <_fini@@Base+0xe42c>
   3411f:	neg    eax
   34121:	lea    rcx,[rip+0x2cb78]        # 60ca0 <_fini@@Base+0xe54c>
   34128:	lea    rsi,[rip+0x2c989]        # 60ab8 <_fini@@Base+0xe364>
   3412f:	mov    r8d,eax
   34132:	mov    edx,0x1a2
   34137:	mov    rdi,r12
   3413a:	xor    eax,eax
   3413c:	call   3a140 <g_str_equal@plt+0x2ce80>
   34141:	mov    rdi,rbx
   34144:	xor    ebx,ebx
   34146:	call   cec0 <g_source_destroy@plt>
   3414b:	jmp    3410a <g_str_equal@plt+0x26e4a>
   3414d:	nop    DWORD PTR [rax]
   34150:	push   r13
   34152:	push   r12
   34154:	push   rbp
   34155:	push   rbx
   34156:	mov    rbp,rdi
   34159:	mov    rbx,rsi
   3415c:	sub    rsp,0x28
   34160:	mov    rax,QWORD PTR fs:0x28
   34169:	mov    QWORD PTR [rsp+0x18],rax
   3416e:	xor    eax,eax
   34170:	mov    eax,DWORD PTR [rip+0x250962]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   34176:	test   eax,eax
   34178:	jne    341e0 <g_str_equal@plt+0x26f20>
   3417a:	lea    rcx,[rip+0x2cacf]        # 60c50 <_fini@@Base+0xe4fc>
   34181:	xor    eax,eax
   34183:	lock cmpxchg QWORD PTR [rbx+0x30],rcx
   34189:	test   rax,rax
   3418c:	jne    34231 <g_str_equal@plt+0x26f71>
   34192:	lea    rcx,[rbp+0xb8]
   34199:	nop    DWORD PTR [rax+0x0]
   341a0:	mov    rdx,QWORD PTR [rbp+0xb8]
   341a7:	mov    rax,rdx
   341aa:	mov    QWORD PTR [rbx+0x50],rdx
   341ae:	lock cmpxchg QWORD PTR [rcx],rbx
   341b3:	cmp    rdx,rax
   341b6:	jne    341a0 <g_str_equal@plt+0x26ee0>
   341b8:	mov    rdi,QWORD PTR [rbp+0xc0]
   341bf:	call   33f60 <g_str_equal@plt+0x26ca0>
   341c4:	mov    rax,QWORD PTR [rsp+0x18]
   341c9:	xor    rax,QWORD PTR fs:0x28
   341d2:	jne    3422c <g_str_equal@plt+0x26f6c>
   341d4:	add    rsp,0x28
   341d8:	pop    rbx
   341d9:	pop    rbp
   341da:	pop    r12
   341dc:	pop    r13
   341de:	ret    
   341df:	nop
   341e0:	cmp    WORD PTR [rip+0x252e9c],0x0        # 287084 <stdout@@GLIBC_2.2.5+0x273c>
   341e8:	je     3417a <g_str_equal@plt+0x26eba>
   341ea:	test   BYTE PTR [rip+0x251cb0],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   341f1:	je     3417a <g_str_equal@plt+0x26eba>
   341f3:	mov    rdi,rsp
   341f6:	xor    esi,esi
   341f8:	call   c3e0 <gettimeofday@plt>
   341fd:	mov    r13,QWORD PTR [rsp+0x8]
   34202:	mov    r12,QWORD PTR [rsp]
   34206:	call   c5b0 <getpid@plt>
   3420b:	lea    rdi,[rip+0x2c996]        # 60ba8 <_fini@@Base+0xe454>
   34212:	mov    esi,eax
   34214:	mov    r9,rbx
   34217:	mov    r8,rbp
   3421a:	mov    rcx,r13
   3421d:	mov    rdx,r12
   34220:	xor    eax,eax
   34222:	call   431a0 <g_str_equal@plt+0x35ee0>
   34227:	jmp    3417a <g_str_equal@plt+0x26eba>
   3422c:	call   cd30 <__stack_chk_fail@plt>
   34231:	mov    rdi,QWORD PTR [rip+0x250708]        # 284940 <stderr@@GLIBC_2.2.5>
   34238:	lea    rdx,[rip+0x2c999]        # 60bd8 <_fini@@Base+0xe484>
   3423f:	mov    r8,rax
   34242:	mov    esi,0x1
   34247:	xor    eax,eax
   34249:	call   c2b0 <__fprintf_chk@plt>
   3424e:	call   c270 <abort@plt>
   34253:	nop    DWORD PTR [rax]
   34256:	nop    WORD PTR cs:[rax+rax*1+0x0]
   34260:	push   r12
   34262:	push   rbp
   34263:	mov    rbp,rdi
   34266:	push   rbx
   34267:	mov    rbx,rsi
   3426a:	call   43fa0 <g_str_equal@plt+0x36ce0>
   3426f:	cmp    rax,rbp
   34272:	je     34288 <g_str_equal@plt+0x26fc8>
   34274:	mov    rsi,rbx
   34277:	mov    rdi,rbp
   3427a:	pop    rbx
   3427b:	pop    rbp
   3427c:	pop    r12
   3427e:	jmp    34150 <g_str_equal@plt+0x26e90>
   34283:	nop    DWORD PTR [rax+rax*1+0x0]
   34288:	mov    r12,rax
   3428b:	call   429a0 <g_str_equal@plt+0x356e0>
   34290:	test   al,al
   34292:	je     342c0 <g_str_equal@plt+0x27000>
   34294:	call   42970 <g_str_equal@plt+0x356b0>
   34299:	cmp    rbx,rax
   3429c:	je     342fc <g_str_equal@plt+0x2703c>
   3429e:	mov    QWORD PTR [rbx+0x38],0x0
   342a6:	mov    rdx,QWORD PTR [rax+0x48]
   342aa:	mov    QWORD PTR [rdx],rbx
   342ad:	add    rbx,0x38
   342b1:	mov    QWORD PTR [rax+0x48],rbx
   342b5:	pop    rbx
   342b6:	pop    rbp
   342b7:	pop    r12
   342b9:	ret    
   342ba:	nop    WORD PTR [rax+rax*1+0x0]
   342c0:	lea    rbp,[r12+0x60]
   342c5:	lea    rsi,[rip+0x2c7ec]        # 60ab8 <_fini@@Base+0xe364>
   342cc:	mov    edx,0x1ff
   342d1:	mov    rdi,rbp
   342d4:	call   38bf0 <g_str_equal@plt+0x2b930>
   342d9:	mov    rsi,rbx
   342dc:	mov    rdi,r12
   342df:	call   42310 <g_str_equal@plt+0x35050>
   342e4:	pop    rbx
   342e5:	mov    rdi,rbp
   342e8:	lea    rsi,[rip+0x2c7c9]        # 60ab8 <_fini@@Base+0xe364>
   342ef:	mov    edx,0x204
   342f4:	pop    rbp
   342f5:	pop    r12
   342f7:	jmp    38e70 <g_str_equal@plt+0x2bbb0>
   342fc:	lea    rcx,[rip+0x2c93d]        # 60c40 <_fini@@Base+0xe4ec>
   34303:	lea    rsi,[rip+0x2c7ae]        # 60ab8 <_fini@@Base+0xe364>
   3430a:	lea    rdi,[rip+0x2c91d]        # 60c2e <_fini@@Base+0xe4da>
   34311:	mov    edx,0x1ea
   34316:	call   c390 <__assert_fail@plt>
   3431b:	nop    DWORD PTR [rax+rax*1+0x0]
   34320:	mov    rsi,rdi
   34323:	mov    rdi,QWORD PTR [rdi+0x28]
   34327:	jmp    34260 <g_str_equal@plt+0x26fa0>
   3432c:	nop    DWORD PTR [rax+0x0]
   34330:	jmp    c8a0 <g_source_ref@plt>
   34335:	nop
   34336:	nop    WORD PTR cs:[rax+rax*1+0x0]
   34340:	jmp    cef0 <g_source_unref@plt>
   34345:	nop
   34346:	nop    WORD PTR cs:[rax+rax*1+0x0]
   34350:	lea    rsi,[rip+0x2c761]        # 60ab8 <_fini@@Base+0xe364>
   34357:	add    rdi,0x60
   3435b:	mov    edx,0x1ff
   34360:	jmp    38bf0 <g_str_equal@plt+0x2b930>
   34365:	nop
   34366:	nop    WORD PTR cs:[rax+rax*1+0x0]
   34370:	lea    rsi,[rip+0x2c741]        # 60ab8 <_fini@@Base+0xe364>
   34377:	add    rdi,0x60
   3437b:	mov    edx,0x204
   34380:	jmp    38e70 <g_str_equal@plt+0x2bbb0>
   34385:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3438f:	nop
   34390:	mov    rax,QWORD PTR [rdi+0x28]
   34394:	mov    rax,QWORD PTR [rax]
   34397:	ret    
   34398:	nop    DWORD PTR [rax+rax*1+0x0]
   343a0:	push   r14
   343a2:	push   r13
   343a4:	push   r12
   343a6:	push   rbp
   343a7:	push   rbx
   343a8:	mov    rbx,rdi
   343ab:	sub    rsp,0x20
   343af:	mov    edx,DWORD PTR [rip+0x250723]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   343b5:	mov    r12,QWORD PTR [rdi+0x28]
   343b9:	mov    rax,QWORD PTR fs:0x28
   343c2:	mov    QWORD PTR [rsp+0x18],rax
   343c7:	xor    eax,eax
   343c9:	test   edx,edx
   343cb:	jne    34488 <g_str_equal@plt+0x271c8>
   343d1:	lea    rbp,[r12+0x10]
   343d6:	lea    rsi,[rip+0x2c90b]        # 60ce8 <_fini@@Base+0xe594>
   343dd:	mov    edx,0xd6
   343e2:	mov    rdi,rbp
   343e5:	call   38bf0 <g_str_equal@plt+0x2b930>
   343ea:	mov    eax,DWORD PTR [rbx+0x40]
   343ed:	test   eax,eax
   343ef:	je     34430 <g_str_equal@plt+0x27170>
   343f1:	lea    rsi,[rip+0x2c8f0]        # 60ce8 <_fini@@Base+0xe594>
   343f8:	mov    edx,0xe5
   343fd:	mov    rdi,rbp
   34400:	call   38e70 <g_str_equal@plt+0x2bbb0>
   34405:	mov    rax,QWORD PTR [rsp+0x18]
   3440a:	xor    rax,QWORD PTR fs:0x28
   34413:	jne    344ed <g_str_equal@plt+0x2722d>
   34419:	add    rsp,0x20
   3441d:	pop    rbx
   3441e:	pop    rbp
   3441f:	pop    r12
   34421:	pop    r13
   34423:	pop    r14
   34425:	ret    
   34426:	nop    WORD PTR cs:[rax+rax*1+0x0]
   34430:	lea    rdi,[r12+0x78]
   34435:	xor    esi,esi
   34437:	call   39370 <g_str_equal@plt+0x2c0b0>
   3443c:	test   eax,eax
   3443e:	jne    343f1 <g_str_equal@plt+0x27131>
   34440:	mov    rax,QWORD PTR [rbx+0x48]
   34444:	mov    rdx,QWORD PTR [rbx+0x50]
   34448:	test   rax,rax
   3444b:	je     344e0 <g_str_equal@plt+0x27220>
   34451:	mov    QWORD PTR [rax+0x50],rdx
   34455:	mov    rax,QWORD PTR [rbx+0x50]
   34459:	mov    rdx,QWORD PTR [rbx+0x48]
   3445d:	mov    QWORD PTR [rax],rdx
   34460:	mov    QWORD PTR [rbx+0x50],0x0
   34468:	mov    rdi,QWORD PTR [r12+0x8]
   3446d:	call   33f60 <g_str_equal@plt+0x26ca0>
   34472:	mov    DWORD PTR [rbx+0x40],0x2
   34479:	mov    DWORD PTR [rbx+0x44],0xffffff83
   34480:	jmp    343f1 <g_str_equal@plt+0x27131>
   34485:	nop    DWORD PTR [rax]
   34488:	cmp    WORD PTR [rip+0x252bec],0x0        # 28707c <stdout@@GLIBC_2.2.5+0x2734>
   34490:	je     343d1 <g_str_equal@plt+0x27111>
   34496:	test   BYTE PTR [rip+0x251a04],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   3449d:	je     343d1 <g_str_equal@plt+0x27111>
   344a3:	mov    r14,QWORD PTR [rdi+0x18]
   344a7:	xor    esi,esi
   344a9:	mov    rdi,rsp
   344ac:	call   c3e0 <gettimeofday@plt>
   344b1:	mov    r13,QWORD PTR [rsp+0x8]
   344b6:	mov    rbp,QWORD PTR [rsp]
   344ba:	call   c5b0 <getpid@plt>
   344bf:	lea    rdi,[rip+0x2c7ea]        # 60cb0 <_fini@@Base+0xe55c>
   344c6:	mov    esi,eax
   344c8:	mov    r9,r14
   344cb:	mov    r8,rbx
   344ce:	mov    rcx,r13
   344d1:	mov    rdx,rbp
   344d4:	xor    eax,eax
   344d6:	call   431a0 <g_str_equal@plt+0x35ee0>
   344db:	jmp    343d1 <g_str_equal@plt+0x27111>
   344e0:	mov    QWORD PTR [r12+0xc0],rdx
   344e8:	jmp    34455 <g_str_equal@plt+0x27195>
   344ed:	call   cd30 <__stack_chk_fail@plt>
   344f2:	nop    DWORD PTR [rax+0x0]
   344f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   34500:	mov    DWORD PTR [rdi+0x8],esi
   34503:	mov    rdi,QWORD PTR [rdi]
   34506:	jmp    34320 <g_str_equal@plt+0x27060>
   3450b:	nop    DWORD PTR [rax+rax*1+0x0]
   34510:	sub    rsp,0x18
   34514:	mov    rax,QWORD PTR fs:0x28
   3451d:	mov    QWORD PTR [rsp+0x8],rax
   34522:	xor    eax,eax
   34524:	mov    eax,DWORD PTR [rdi+0xd0]
   3452a:	test   eax,eax
   3452c:	jne    34548 <g_str_equal@plt+0x27288>
   3452e:	mov    rax,QWORD PTR [rsp+0x8]
   34533:	xor    rax,QWORD PTR fs:0x28
   3453c:	jne    3457c <g_str_equal@plt+0x272bc>
   3453e:	add    rsp,0x18
   34542:	ret    
   34543:	nop    DWORD PTR [rax+rax*1+0x0]
   34548:	add    DWORD PTR [rdi+0xd4],0x1
   3454f:	sub    eax,0x1
   34552:	lea    rdx,[rip+0x87]        # 345e0 <g_str_equal@plt+0x27320>
   34559:	mov    DWORD PTR [rdi+0xd0],eax
   3455f:	lea    rsi,[rip+0x28f02]        # 5d468 <_fini@@Base+0xad14>
   34566:	mov    rax,rsp
   34569:	mov    rcx,rdi
   3456c:	mov    r8d,0x1
   34572:	mov    rdi,rax
   34575:	call   39790 <g_str_equal@plt+0x2c4d0>
   3457a:	jmp    3452e <g_str_equal@plt+0x2726e>
   3457c:	call   cd30 <__stack_chk_fail@plt>
   34581:	nop    DWORD PTR [rax+rax*1+0x0]
   34586:	nop    WORD PTR cs:[rax+rax*1+0x0]
   34590:	push   rbp
   34591:	push   rbx
   34592:	lea    rbx,[rdi+0x10]
   34596:	lea    rsi,[rip+0x2c74b]        # 60ce8 <_fini@@Base+0xe594>
   3459d:	mov    rbp,rdi
   345a0:	mov    edx,0x8e
   345a5:	sub    rsp,0x8
   345a9:	mov    rdi,rbx
   345ac:	call   38bf0 <g_str_equal@plt+0x2b930>
   345b1:	mov    rdi,rbp
   345b4:	call   34510 <g_str_equal@plt+0x27250>
   345b9:	add    rsp,0x8
   345bd:	mov    rdi,rbx
   345c0:	lea    rsi,[rip+0x2c721]        # 60ce8 <_fini@@Base+0xe594>
   345c7:	pop    rbx
   345c8:	pop    rbp
   345c9:	mov    edx,0x90
   345ce:	jmp    38e70 <g_str_equal@plt+0x2bbb0>
   345d3:	nop    DWORD PTR [rax]
   345d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   345e0:	push   r14
   345e2:	push   r13
   345e4:	lea    rsi,[rip+0x2c6fd]        # 60ce8 <_fini@@Base+0xe594>
   345eb:	push   r12
   345ed:	push   rbp
   345ee:	lea    rbp,[rdi+0x10]
   345f2:	push   rbx
   345f3:	mov    edx,0x51
   345f8:	mov    rbx,rdi
   345fb:	mov    rdi,rbp
   345fe:	call   38bf0 <g_str_equal@plt+0x2b930>
   34603:	sub    DWORD PTR [rbx+0xd4],0x1
   3460a:	mov    rdi,rbx
   3460d:	call   34510 <g_str_equal@plt+0x27250>
   34612:	cmp    BYTE PTR [rbx+0xd8],0x0
   34619:	jne    3472a <g_str_equal@plt+0x2746a>
   3461f:	lea    r13,[rbx+0x78]
   34623:	lea    r12,[rip+0x2c6be]        # 60ce8 <_fini@@Base+0xe594>
   3462a:	nop    WORD PTR [rax+rax*1+0x0]
   34630:	mov    edx,DWORD PTR [rbx+0xcc]
   34636:	jmp    3464e <g_str_equal@plt+0x2738e>
   34638:	nop    DWORD PTR [rax+rax*1+0x0]
   34640:	cmp    QWORD PTR [rbx+0xb8],0x0
   34648:	je     3472a <g_str_equal@plt+0x2746a>
   3464e:	add    edx,0x1
   34651:	mov    rsi,r12
   34654:	mov    rdi,rbp
   34657:	mov    DWORD PTR [rbx+0xcc],edx
   3465d:	mov    edx,0x5b
   34662:	call   38e70 <g_str_equal@plt+0x2bbb0>
   34667:	mov    esi,0x2710
   3466c:	mov    rdi,r13
   3466f:	call   39370 <g_str_equal@plt+0x2c0b0>
   34674:	mov    edx,0x5d
   34679:	mov    rsi,r12
   3467c:	mov    rdi,rbp
   3467f:	mov    r14d,eax
   34682:	call   38bf0 <g_str_equal@plt+0x2b930>
   34687:	mov    eax,DWORD PTR [rbx+0xcc]
   3468d:	cmp    r14d,0xffffffff
   34691:	lea    edx,[rax-0x1]
   34694:	mov    DWORD PTR [rbx+0xcc],edx
   3469a:	je     34640 <g_str_equal@plt+0x27380>
   3469c:	cmp    BYTE PTR [rbx+0xd8],0x0
   346a3:	jne    3472a <g_str_equal@plt+0x2746a>
   346a9:	mov    r14,QWORD PTR [rbx+0xb8]
   346b0:	mov    rax,QWORD PTR [r14+0x48]
   346b4:	mov    rdx,QWORD PTR [r14+0x50]
   346b8:	test   rax,rax
   346bb:	je     34760 <g_str_equal@plt+0x274a0>
   346c1:	mov    QWORD PTR [rax+0x50],rdx
   346c5:	mov    rax,QWORD PTR [r14+0x50]
   346c9:	mov    rdx,QWORD PTR [r14+0x48]
   346cd:	mov    rsi,r12
   346d0:	mov    rdi,rbp
   346d3:	mov    QWORD PTR [rax],rdx
   346d6:	mov    edx,0x67
   346db:	mov    QWORD PTR [r14+0x50],0x0
   346e3:	mov    DWORD PTR [r14+0x40],0x1
   346eb:	call   38e70 <g_str_equal@plt+0x2bbb0>
   346f0:	mov    rdi,QWORD PTR [r14+0x38]
   346f4:	call   QWORD PTR [r14+0x30]
   346f8:	mov    DWORD PTR [r14+0x44],eax
   346fc:	mov    edx,0x70
   34701:	mov    rsi,r12
   34704:	mov    rdi,rbp
   34707:	mov    DWORD PTR [r14+0x40],0x2
   3470f:	call   38bf0 <g_str_equal@plt+0x2b930>
   34714:	mov    rdi,QWORD PTR [rbx+0x8]
   34718:	call   33f60 <g_str_equal@plt+0x26ca0>
   3471d:	cmp    BYTE PTR [rbx+0xd8],0x0
   34724:	je     34630 <g_str_equal@plt+0x27370>
   3472a:	sub    DWORD PTR [rbx+0xc8],0x1
   34731:	lea    rdi,[rbx+0x40]
   34735:	call   39080 <g_str_equal@plt+0x2bdc0>
   3473a:	lea    rsi,[rip+0x2c5a7]        # 60ce8 <_fini@@Base+0xe594>
   34741:	mov    rdi,rbp
   34744:	mov    edx,0x77
   34749:	call   38e70 <g_str_equal@plt+0x2bbb0>
   3474e:	pop    rbx
   3474f:	xor    eax,eax
   34751:	pop    rbp
   34752:	pop    r12
   34754:	pop    r13
   34756:	pop    r14
   34758:	ret    
   34759:	nop    DWORD PTR [rax+0x0]
   34760:	mov    QWORD PTR [rbx+0xc0],rdx
   34767:	jmp    346c5 <g_str_equal@plt+0x27405>
   3476c:	nop    DWORD PTR [rax+0x0]
   34770:	push   r15
   34772:	push   r14
   34774:	push   r13
   34776:	push   r12
   34778:	mov    r12,rdi
   3477b:	push   rbp
   3477c:	push   rbx
   3477d:	sub    rsp,0x38
   34781:	mov    rdi,QWORD PTR [rdi]
   34784:	lea    r13,[rsp+0x10]
   34789:	mov    rax,QWORD PTR fs:0x28
   34792:	mov    QWORD PTR [rsp+0x28],rax
   34797:	xor    eax,eax
   34799:	call   34350 <g_str_equal@plt+0x27090>
   3479e:	mov    rbx,QWORD PTR [r12+0xb0]
   347a6:	test   rbx,rbx
   347a9:	jne    347b8 <g_str_equal@plt+0x274f8>
   347ab:	jmp    34802 <g_str_equal@plt+0x27542>
   347ad:	nop    DWORD PTR [rax]
   347b0:	test   rbp,rbp
   347b3:	mov    rbx,rbp
   347b6:	je     34802 <g_str_equal@plt+0x27542>
   347b8:	cmp    DWORD PTR [rbx+0x40],0x2
   347bc:	mov    rbp,QWORD PTR [rbx+0x58]
   347c0:	jne    347b0 <g_str_equal@plt+0x274f0>
   347c2:	mov    esi,DWORD PTR [rip+0x250310]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   347c8:	mov    rax,rbp
   347cb:	test   esi,esi
   347cd:	jne    34830 <g_str_equal@plt+0x27570>
   347cf:	test   rax,rax
   347d2:	mov    rdx,QWORD PTR [rbx+0x60]
   347d6:	je     347e4 <g_str_equal@plt+0x27524>
   347d8:	mov    QWORD PTR [rax+0x60],rdx
   347dc:	mov    rdx,QWORD PTR [rbx+0x60]
   347e0:	mov    rax,QWORD PTR [rbx+0x58]
   347e4:	mov    QWORD PTR [rdx],rax
   347e7:	cmp    QWORD PTR [rbx+0x10],0x0
   347ec:	jne    348a0 <g_str_equal@plt+0x275e0>
   347f2:	mov    rdi,rbx
   347f5:	mov    rbx,rbp
   347f8:	call   521d0 <g_str_equal@plt+0x44f10>
   347fd:	test   rbp,rbp
   34800:	jne    347b8 <g_str_equal@plt+0x274f8>
   34802:	mov    rdi,QWORD PTR [r12]
   34806:	call   34370 <g_str_equal@plt+0x270b0>
   3480b:	mov    rax,QWORD PTR [rsp+0x28]
   34810:	xor    rax,QWORD PTR fs:0x28
   34819:	jne    348dd <g_str_equal@plt+0x2761d>
   3481f:	add    rsp,0x38
   34823:	pop    rbx
   34824:	pop    rbp
   34825:	pop    r12
   34827:	pop    r13
   34829:	pop    r14
   3482b:	pop    r15
   3482d:	ret    
   3482e:	xchg   ax,ax
   34830:	cmp    WORD PTR [rip+0x252846],0x0        # 28707e <stdout@@GLIBC_2.2.5+0x2736>
   34838:	je     347cf <g_str_equal@plt+0x2750f>
   3483a:	test   BYTE PTR [rip+0x251660],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   34841:	je     347cf <g_str_equal@plt+0x2750f>
   34843:	xor    esi,esi
   34845:	mov    rdi,r13
   34848:	mov    r15d,DWORD PTR [rbx+0x44]
   3484c:	mov    r14,QWORD PTR [rbx+0x18]
   34850:	call   c3e0 <gettimeofday@plt>
   34855:	mov    rcx,QWORD PTR [rsp+0x18]
   3485a:	mov    rdx,QWORD PTR [rsp+0x10]
   3485f:	mov    QWORD PTR [rsp+0x8],rcx
   34864:	mov    QWORD PTR [rsp],rdx
   34868:	call   c5b0 <getpid@plt>
   3486d:	push   r15
   3486f:	push   r14
   34871:	lea    rdi,[rip+0x2c4b0]        # 60d28 <_fini@@Base+0xe5d4>
   34878:	mov    rcx,QWORD PTR [rsp+0x18]
   3487d:	mov    rdx,QWORD PTR [rsp+0x10]
   34882:	mov    esi,eax
   34884:	mov    r9,rbx
   34887:	mov    r8,r12
   3488a:	xor    eax,eax
   3488c:	call   431a0 <g_str_equal@plt+0x35ee0>
   34891:	pop    rdx
   34892:	mov    rax,QWORD PTR [rbx+0x58]
   34896:	pop    rcx
   34897:	jmp    347cf <g_str_equal@plt+0x2750f>
   3489c:	nop    DWORD PTR [rax+0x0]
   348a0:	mov    rdi,QWORD PTR [r12+0x8]
   348a5:	call   33f60 <g_str_equal@plt+0x26ca0>
   348aa:	mov    rdi,QWORD PTR [r12]
   348ae:	call   34370 <g_str_equal@plt+0x270b0>
   348b3:	mov    esi,DWORD PTR [rbx+0x44]
   348b6:	mov    rdi,QWORD PTR [rbx+0x18]
   348ba:	call   QWORD PTR [rbx+0x10]
   348bd:	mov    rdi,QWORD PTR [r12]
   348c1:	call   34350 <g_str_equal@plt+0x27090>
   348c6:	mov    rdi,QWORD PTR [r12+0x8]
   348cb:	call   33d90 <g_str_equal@plt+0x26ad0>
   348d0:	mov    rdi,rbx
   348d3:	call   521d0 <g_str_equal@plt+0x44f10>
   348d8:	jmp    3479e <g_str_equal@plt+0x274de>
   348dd:	call   cd30 <__stack_chk_fail@plt>
   348e2:	nop    DWORD PTR [rax+0x0]
   348e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   348f0:	push   r14
   348f2:	push   r13
   348f4:	mov    r13,rsi
   348f7:	push   r12
   348f9:	push   rbp
   348fa:	mov    r12,rdx
   348fd:	push   rbx
   348fe:	mov    rbx,rdi
   34901:	lea    rdi,[rip+0x24c258]        # 280b60 <_fini@@Base+0x22e40c>
   34908:	mov    rdx,rcx
   3490b:	xor    esi,esi
   3490d:	mov    rcx,r8
   34910:	sub    rsp,0x20
   34914:	mov    rax,QWORD PTR fs:0x28
   3491d:	mov    QWORD PTR [rsp+0x18],rax
   34922:	xor    eax,eax
   34924:	call   52180 <g_str_equal@plt+0x44ec0>
   34929:	mov    rbp,rax
   3492c:	mov    QWORD PTR [rax+0x30],r13
   34930:	mov    QWORD PTR [rax+0x38],r12
   34934:	mov    DWORD PTR [rax+0x40],0x0
   3493b:	mov    QWORD PTR [rax+0x28],rbx
   3493f:	mov    rax,QWORD PTR [rbx+0xb0]
   34946:	test   rax,rax
   34949:	mov    QWORD PTR [rbp+0x58],rax
   3494d:	je     3495e <g_str_equal@plt+0x2769e>
   3494f:	mov    rax,QWORD PTR [rbx+0xb0]
   34956:	lea    rdx,[rbp+0x58]
   3495a:	mov    QWORD PTR [rax+0x60],rdx
   3495e:	mov    edi,DWORD PTR [rip+0x250174]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   34964:	lea    rax,[rbx+0xb0]
   3496b:	mov    QWORD PTR [rbx+0xb0],rbp
   34972:	mov    QWORD PTR [rbp+0x60],rax
   34976:	test   edi,edi
   34978:	jne    34a50 <g_str_equal@plt+0x27790>
   3497e:	lea    r12,[rbx+0x10]
   34982:	lea    rsi,[rip+0x2c35f]        # 60ce8 <_fini@@Base+0xe594>
   34989:	mov    edx,0x105
   3498e:	mov    rdi,r12
   34991:	call   38bf0 <g_str_equal@plt+0x2b930>
   34996:	mov    edx,DWORD PTR [rbx+0xcc]
   3499c:	test   edx,edx
   3499e:	jne    349d0 <g_str_equal@plt+0x27710>
   349a0:	mov    eax,DWORD PTR [rbx+0xc8]
   349a6:	cmp    eax,DWORD PTR [rbx+0xa0]
   349ac:	jge    349d0 <g_str_equal@plt+0x27710>
   349ae:	add    eax,0x1
   349b1:	add    DWORD PTR [rbx+0xd0],0x1
   349b8:	mov    DWORD PTR [rbx+0xc8],eax
   349be:	mov    eax,DWORD PTR [rbx+0xd4]
   349c4:	test   eax,eax
   349c6:	je     34a40 <g_str_equal@plt+0x27780>
   349c8:	nop    DWORD PTR [rax+rax*1+0x0]
   349d0:	mov    QWORD PTR [rbp+0x48],0x0
   349d8:	mov    rax,QWORD PTR [rbx+0xc0]
   349df:	lea    rsi,[rip+0x2c302]        # 60ce8 <_fini@@Base+0xe594>
   349e6:	mov    edx,0x10a
   349eb:	mov    rdi,r12
   349ee:	mov    QWORD PTR [rbp+0x50],rax
   349f2:	mov    rax,QWORD PTR [rbx+0xc0]
   349f9:	mov    QWORD PTR [rax],rbp
   349fc:	lea    rax,[rbp+0x48]
   34a00:	mov    QWORD PTR [rbx+0xc0],rax
   34a07:	call   38e70 <g_str_equal@plt+0x2bbb0>
   34a0c:	lea    rdi,[rbx+0x78]
   34a10:	call   39320 <g_str_equal@plt+0x2c060>
   34a15:	mov    rcx,QWORD PTR [rsp+0x18]
   34a1a:	xor    rcx,QWORD PTR fs:0x28
   34a23:	mov    rax,rbp
   34a26:	jne    34aac <g_str_equal@plt+0x277ec>
   34a2c:	add    rsp,0x20
   34a30:	pop    rbx
   34a31:	pop    rbp
   34a32:	pop    r12
   34a34:	pop    r13
   34a36:	pop    r14
   34a38:	ret    
   34a39:	nop    DWORD PTR [rax+0x0]
   34a40:	mov    rdi,QWORD PTR [rbx+0xa8]
   34a47:	call   33f60 <g_str_equal@plt+0x26ca0>
   34a4c:	jmp    349d0 <g_str_equal@plt+0x27710>
   34a4e:	xchg   ax,ax
   34a50:	cmp    WORD PTR [rip+0x252628],0x0        # 287080 <stdout@@GLIBC_2.2.5+0x2738>
   34a58:	je     3497e <g_str_equal@plt+0x276be>
   34a5e:	test   BYTE PTR [rip+0x25143c],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   34a65:	je     3497e <g_str_equal@plt+0x276be>
   34a6b:	mov    rdi,rsp
   34a6e:	xor    esi,esi
   34a70:	call   c3e0 <gettimeofday@plt>
   34a75:	mov    r14,QWORD PTR [rsp+0x8]
   34a7a:	mov    r13,QWORD PTR [rsp]
   34a7e:	call   c5b0 <getpid@plt>
   34a83:	sub    rsp,0x8
   34a87:	lea    rdi,[rip+0x2c2e2]        # 60d70 <_fini@@Base+0xe61c>
   34a8e:	mov    esi,eax
   34a90:	push   r12
   34a92:	mov    rcx,r14
   34a95:	mov    r9,rbp
   34a98:	mov    r8,rbx
   34a9b:	mov    rdx,r13
   34a9e:	xor    eax,eax
   34aa0:	call   431a0 <g_str_equal@plt+0x35ee0>
   34aa5:	pop    rcx
   34aa6:	pop    rsi
   34aa7:	jmp    3497e <g_str_equal@plt+0x276be>
   34aac:	call   cd30 <__stack_chk_fail@plt>
   34ab1:	nop    DWORD PTR [rax+rax*1+0x0]
   34ab6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   34ac0:	push   r12
   34ac2:	push   rbp
   34ac3:	mov    r12,rdx
   34ac6:	push   rbx
   34ac7:	mov    rbp,rsi
   34aca:	mov    rbx,rdi
   34acd:	sub    rsp,0x20
   34ad1:	mov    rax,QWORD PTR fs:0x28
   34ada:	mov    QWORD PTR [rsp+0x18],rax
   34adf:	xor    eax,eax
   34ae1:	call   42970 <g_str_equal@plt+0x356b0>
   34ae6:	mov    DWORD PTR [rsp+0x8],0xffffff8d
   34aee:	mov    QWORD PTR [rsp],rax
   34af2:	call   429a0 <g_str_equal@plt+0x356e0>
   34af7:	test   al,al
   34af9:	je     34b35 <g_str_equal@plt+0x27875>
   34afb:	lea    rcx,[rip+0xfffffffffffff9fe]        # 34500 <g_str_equal@plt+0x27240>
   34b02:	mov    r8,rsp
   34b05:	mov    rdx,r12
   34b08:	mov    rsi,rbp
   34b0b:	mov    rdi,rbx
   34b0e:	call   348f0 <g_str_equal@plt+0x27630>
   34b13:	call   42690 <g_str_equal@plt+0x353d0>
   34b18:	mov    rcx,QWORD PTR [rsp+0x18]
   34b1d:	xor    rcx,QWORD PTR fs:0x28
   34b26:	mov    eax,DWORD PTR [rsp+0x8]
   34b2a:	jne    34b54 <g_str_equal@plt+0x27894>
   34b2c:	add    rsp,0x20
   34b30:	pop    rbx
   34b31:	pop    rbp
   34b32:	pop    r12
   34b34:	ret    
   34b35:	lea    rcx,[rip+0x2c2b4]        # 60df0 <_fini@@Base+0xe69c>
   34b3c:	lea    rsi,[rip+0x2c1a5]        # 60ce8 <_fini@@Base+0xe594>
   34b43:	lea    rdi,[rip+0x2597b]        # 5a4c5 <_fini@@Base+0x7d71>
   34b4a:	mov    edx,0x120
   34b4f:	call   c390 <__assert_fail@plt>
   34b54:	call   cd30 <__stack_chk_fail@plt>
   34b59:	nop    DWORD PTR [rax+0x0]
   34b60:	xor    r8d,r8d
   34b63:	xor    ecx,ecx
   34b65:	jmp    348f0 <g_str_equal@plt+0x27630>
   34b6a:	nop    WORD PTR [rax+rax*1+0x0]
   34b70:	push   rbp
   34b71:	push   rbx
   34b72:	mov    rbp,rdi
   34b75:	mov    edi,0xe0
   34b7a:	sub    rsp,0x8
   34b7e:	call   c500 <g_malloc@plt>
   34b83:	test   rbp,rbp
   34b86:	mov    rbx,rax
   34b89:	je     34c48 <g_str_equal@plt+0x27988>
   34b8f:	lea    rdi,[rbx+0x10]
   34b93:	mov    eax,ebx
   34b95:	mov    QWORD PTR [rbx+0x8],0x0
   34b9d:	mov    QWORD PTR [rbx+0xd8],0x0
   34ba8:	lea    rsi,[rip+0xfffffffffffffbc1]        # 34770 <g_str_equal@plt+0x274b0>
   34baf:	mov    rdx,rbx
   34bb2:	and    rdi,0xfffffffffffffff8
   34bb6:	sub    eax,edi
   34bb8:	lea    ecx,[rax+0xe0]
   34bbe:	xor    eax,eax
   34bc0:	shr    ecx,0x3
   34bc3:	rep stos QWORD PTR es:[rdi],rax
   34bc6:	mov    rdi,rbp
   34bc9:	mov    QWORD PTR [rbx],rbp
   34bcc:	call   33bf0 <g_str_equal@plt+0x26930>
   34bd1:	lea    rdi,[rbx+0x10]
   34bd5:	mov    QWORD PTR [rbx+0x8],rax
   34bd9:	call   38b70 <g_str_equal@plt+0x2b8b0>
   34bde:	lea    rdi,[rbx+0x40]
   34be2:	call   39000 <g_str_equal@plt+0x2bd40>
   34be7:	lea    rdi,[rbx+0x78]
   34beb:	xor    esi,esi
   34bed:	call   392a0 <g_str_equal@plt+0x2bfe0>
   34bf2:	lea    rsi,[rip+0xfffffffffffff997]        # 34590 <g_str_equal@plt+0x272d0>
   34bf9:	mov    rdx,rbx
   34bfc:	mov    rdi,rbp
   34bff:	mov    DWORD PTR [rbx+0xa0],0x40
   34c09:	call   33bf0 <g_str_equal@plt+0x26930>
   34c0e:	mov    QWORD PTR [rbx+0xa8],rax
   34c15:	lea    rax,[rbx+0xb8]
   34c1c:	mov    QWORD PTR [rbx+0xb0],0x0
   34c27:	mov    QWORD PTR [rbx+0xb8],0x0
   34c32:	mov    QWORD PTR [rbx+0xc0],rax
   34c39:	add    rsp,0x8
   34c3d:	mov    rax,rbx
   34c40:	pop    rbx
   34c41:	pop    rbp
   34c42:	ret    
   34c43:	nop    DWORD PTR [rax+rax*1+0x0]
   34c48:	call   35bf0 <g_str_equal@plt+0x28930>
   34c4d:	mov    rbp,rax
   34c50:	jmp    34b8f <g_str_equal@plt+0x278cf>
   34c55:	nop
   34c56:	nop    WORD PTR cs:[rax+rax*1+0x0]
   34c60:	test   rdi,rdi
   34c63:	je     34d50 <g_str_equal@plt+0x27a90>
   34c69:	push   r14
   34c6b:	push   r13
   34c6d:	push   r12
   34c6f:	push   rbp
   34c70:	push   rbx
   34c71:	cmp    QWORD PTR [rdi+0xb0],0x0
   34c79:	mov    rbx,rdi
   34c7c:	jne    34d52 <g_str_equal@plt+0x27a92>
   34c82:	lea    rbp,[rdi+0x10]
   34c86:	lea    rsi,[rip+0x2c05b]        # 60ce8 <_fini@@Base+0xe594>
   34c8d:	mov    edx,0x14d
   34c92:	lea    r13,[rbx+0x78]
   34c96:	lea    r12,[rbx+0x40]
   34c9a:	mov    rdi,rbp
   34c9d:	call   38bf0 <g_str_equal@plt+0x2b930>
   34ca2:	mov    rdi,QWORD PTR [rbx+0xa8]
   34ca9:	call   33da0 <g_str_equal@plt+0x26ae0>
   34cae:	mov    eax,DWORD PTR [rbx+0xc8]
   34cb4:	sub    eax,DWORD PTR [rbx+0xd0]
   34cba:	mov    BYTE PTR [rbx+0xd8],0x1
   34cc1:	mov    DWORD PTR [rbx+0xd0],0x0
   34ccb:	test   eax,eax
   34ccd:	mov    DWORD PTR [rbx+0xc8],eax
   34cd3:	jle    34d05 <g_str_equal@plt+0x27a45>
   34cd5:	lea    r14,[rip+0x2c00c]        # 60ce8 <_fini@@Base+0xe594>
   34cdc:	nop    DWORD PTR [rax+0x0]
   34ce0:	mov    rdi,r13
   34ce3:	call   39320 <g_str_equal@plt+0x2c060>
   34ce8:	mov    ecx,0x158
   34ced:	mov    rdx,r14
   34cf0:	mov    rsi,rbp
   34cf3:	mov    rdi,r12
   34cf6:	call   39120 <g_str_equal@plt+0x2be60>
   34cfb:	mov    eax,DWORD PTR [rbx+0xc8]
   34d01:	test   eax,eax
   34d03:	jg     34ce0 <g_str_equal@plt+0x27a20>
   34d05:	lea    rsi,[rip+0x2bfdc]        # 60ce8 <_fini@@Base+0xe594>
   34d0c:	mov    edx,0x15b
   34d11:	mov    rdi,rbp
   34d14:	call   38e70 <g_str_equal@plt+0x2bbb0>
   34d19:	mov    rdi,QWORD PTR [rbx+0x8]
   34d1d:	call   33da0 <g_str_equal@plt+0x26ae0>
   34d22:	mov    rdi,r13
   34d25:	call   392d0 <g_str_equal@plt+0x2c010>
   34d2a:	mov    rdi,r12
   34d2d:	call   39030 <g_str_equal@plt+0x2bd70>
   34d32:	mov    rdi,rbp
   34d35:	call   38ba0 <g_str_equal@plt+0x2b8e0>
   34d3a:	mov    rdi,rbx
   34d3d:	pop    rbx
   34d3e:	pop    rbp
   34d3f:	pop    r12
   34d41:	pop    r13
   34d43:	pop    r14
   34d45:	jmp    d2b0 <g_free@plt>
   34d4a:	nop    WORD PTR [rax+rax*1+0x0]
   34d50:	repz ret 
   34d52:	lea    rcx,[rip+0x2c077]        # 60dd0 <_fini@@Base+0xe67c>
   34d59:	lea    rsi,[rip+0x2bf88]        # 60ce8 <_fini@@Base+0xe594>
   34d60:	lea    rdi,[rip+0x2c043]        # 60daa <_fini@@Base+0xe656>
   34d67:	mov    edx,0x14b
   34d6c:	call   c390 <__assert_fail@plt>
   34d71:	nop    WORD PTR cs:[rax+rax*1+0x0]
   34d7b:	nop    DWORD PTR [rax+rax*1+0x0]
   34d80:	mov    QWORD PTR [rsi],0xffffffffffffffff
   34d87:	mov    rdx,QWORD PTR [rdi+0x38]
   34d8b:	test   rdx,rdx
   34d8e:	je     34db1 <g_str_equal@plt+0x27af1>
   34d90:	cmp    rsi,rdx
   34d93:	jne    34da8 <g_str_equal@plt+0x27ae8>
   34d95:	jmp    34dc8 <g_str_equal@plt+0x27b08>
   34d97:	nop    WORD PTR [rax+rax*1+0x0]
   34da0:	cmp    rsi,rax
   34da3:	je     34db8 <g_str_equal@plt+0x27af8>
   34da5:	mov    rdx,rax
   34da8:	mov    rax,QWORD PTR [rdx+0x20]
   34dac:	test   rax,rax
   34daf:	jne    34da0 <g_str_equal@plt+0x27ae0>
   34db1:	repz ret 
   34db3:	nop    DWORD PTR [rax+rax*1+0x0]
   34db8:	add    rdx,0x20
   34dbc:	mov    rax,QWORD PTR [rsi+0x20]
   34dc0:	mov    QWORD PTR [rdx],rax
   34dc3:	ret    
   34dc4:	nop    DWORD PTR [rax+0x0]
   34dc8:	lea    rdx,[rdi+0x38]
   34dcc:	jmp    34dbc <g_str_equal@plt+0x27afc>
   34dce:	xchg   ax,ax
   34dd0:	mov    rax,QWORD PTR [rdi+0x38]
   34dd4:	lea    r8,[rdi+0x38]
   34dd8:	test   rax,rax
   34ddb:	je     34e20 <g_str_equal@plt+0x27b60>
   34ddd:	cmp    rdx,QWORD PTR [rax]
   34de0:	jl     34e20 <g_str_equal@plt+0x27b60>
   34de2:	nop    WORD PTR [rax+rax*1+0x0]
   34de8:	lea    rcx,[rax+0x20]
   34dec:	mov    rax,QWORD PTR [rax+0x20]
   34df0:	test   rax,rax
   34df3:	je     34dfa <g_str_equal@plt+0x27b3a>
   34df5:	cmp    rdx,QWORD PTR [rax]
   34df8:	jge    34de8 <g_str_equal@plt+0x27b28>
   34dfa:	cmp    r8,rcx
   34dfd:	sete   al
   34e00:	test   rdx,rdx
   34e03:	mov    edi,0x0
   34e08:	cmovs  rdx,rdi
   34e0c:	mov    QWORD PTR [rsi],rdx
   34e0f:	mov    rdx,QWORD PTR [rcx]
   34e12:	mov    QWORD PTR [rsi+0x20],rdx
   34e16:	mov    QWORD PTR [rcx],rsi
   34e19:	ret    
   34e1a:	nop    WORD PTR [rax+rax*1+0x0]
   34e20:	mov    rcx,r8
   34e23:	mov    eax,0x1
   34e28:	jmp    34e00 <g_str_equal@plt+0x27b40>
   34e2a:	nop    WORD PTR [rax+rax*1+0x0]
   34e30:	push   r15
   34e32:	push   r14
   34e34:	mov    r15,rsi
   34e37:	push   r13
   34e39:	push   r12
   34e3b:	mov    r14,rdx
   34e3e:	push   rbp
   34e3f:	push   rbx
   34e40:	mov    ebp,edi
   34e42:	mov    edi,0x68
   34e47:	mov    r12,rbp
   34e4a:	lea    r13,[rip+0x24fcef]        # 284b40 <stdout@@GLIBC_2.2.5+0x1f8>
   34e51:	sub    rsp,0x8
   34e55:	shl    r12,0x5
   34e59:	call   ce00 <g_malloc0@plt>
   34e5e:	lea    rdi,[rax+0x60]
   34e62:	mov    rbx,rax
   34e65:	mov    esi,0x1
   34e6a:	add    r12,r13
   34e6d:	call   39560 <g_str_equal@plt+0x2c2a0>
   34e72:	lea    rdi,[rbx+0x8]
   34e76:	mov    QWORD PTR [rbx],r12
   34e79:	mov    QWORD PTR [rbx+0x50],r15
   34e7d:	mov    QWORD PTR [rbx+0x58],r14
   34e81:	call   38b70 <g_str_equal@plt+0x2b8b0>
   34e86:	mov    rax,QWORD PTR [r12]
   34e8a:	test   rax,rax
   34e8d:	mov    QWORD PTR [rbx+0x40],rax
   34e91:	je     34e9b <g_str_equal@plt+0x27bdb>
   34e93:	lea    rdx,[rbx+0x40]
   34e97:	mov    QWORD PTR [rax+0x48],rdx
   34e9b:	shl    rbp,0x5
   34e9f:	mov    QWORD PTR [rbx+0x48],r12
   34ea3:	mov    rax,rbx
   34ea6:	mov    QWORD PTR [r13+rbp*1+0x0],rbx
   34eab:	add    rsp,0x8
   34eaf:	pop    rbx
   34eb0:	pop    rbp
   34eb1:	pop    r12
   34eb3:	pop    r13
   34eb5:	pop    r14
   34eb7:	pop    r15
   34eb9:	ret    
   34eba:	nop    WORD PTR [rax+rax*1+0x0]
   34ec0:	push   rbx
   34ec1:	mov    rax,QWORD PTR [rdi+0x38]
   34ec5:	test   rax,rax
   34ec8:	jne    34f01 <g_str_equal@plt+0x27c41>
   34eca:	cmp    QWORD PTR [rdi],0x0
   34ece:	mov    rbx,rdi
   34ed1:	je     34eef <g_str_equal@plt+0x27c2f>
   34ed3:	mov    rax,QWORD PTR [rdi+0x40]
   34ed7:	mov    rdx,QWORD PTR [rdi+0x48]
   34edb:	test   rax,rax
   34ede:	je     34eec <g_str_equal@plt+0x27c2c>
   34ee0:	mov    QWORD PTR [rax+0x48],rdx
   34ee4:	mov    rdx,QWORD PTR [rdi+0x48]
   34ee8:	mov    rax,QWORD PTR [rdi+0x40]
   34eec:	mov    QWORD PTR [rdx],rax
   34eef:	lea    rdi,[rbx+0x8]
   34ef3:	call   38ba0 <g_str_equal@plt+0x2b8e0>
   34ef8:	mov    rdi,rbx
   34efb:	pop    rbx
   34efc:	jmp    d2b0 <g_free@plt>
   34f01:	lea    rcx,[rip+0x2bfc8]        # 60ed0 <_fini@@Base+0xe77c>
   34f08:	lea    rsi,[rip+0x2bef9]        # 60e08 <_fini@@Base+0xe6b4>
   34f0f:	lea    rdi,[rip+0x2bf32]        # 60e48 <_fini@@Base+0xe6f4>
   34f16:	mov    edx,0x75
   34f1b:	call   c390 <__assert_fail@plt>
   34f20:	mov    eax,DWORD PTR [rip+0x25216a]        # 287090 <stdout@@GLIBC_2.2.5+0x2748>
   34f26:	test   eax,eax
   34f28:	sete   al
   34f2b:	cmp    edi,0x1
   34f2e:	setne  dl
   34f31:	or     eax,edx
   34f33:	ret    
   34f34:	xchg   ax,ax
   34f36:	nop    WORD PTR cs:[rax+rax*1+0x0]
   34f40:	mov    rax,QWORD PTR [rdi+0x38]
   34f44:	test   rax,rax
   34f47:	setne  al
   34f4a:	ret    
   34f4b:	nop    DWORD PTR [rax+rax*1+0x0]
   34f50:	lea    rax,[rip+0x24fbc9]        # 284b20 <stdout@@GLIBC_2.2.5+0x1d8>
   34f57:	mov    edi,edi
   34f59:	mov    rax,QWORD PTR [rax+rdi*8]
   34f5d:	mov    rax,QWORD PTR [rax+0x38]
   34f61:	test   rax,rax
   34f64:	setne  al
   34f67:	ret    
   34f68:	nop    DWORD PTR [rax+rax*1+0x0]
   34f70:	mov    rax,QWORD PTR [rdi]
   34f73:	mov    eax,DWORD PTR [rax+0x18]
   34f76:	ret    
   34f77:	nop    WORD PTR [rax+rax*1+0x0]
   34f80:	lea    rax,[rip+0x24fb99]        # 284b20 <stdout@@GLIBC_2.2.5+0x1d8>
   34f87:	mov    edi,edi
   34f89:	mov    rax,QWORD PTR [rax+rdi*8]
   34f8d:	ret    
   34f8e:	xchg   ax,ax
   34f90:	mov    rax,QWORD PTR [rdi+0x50]
   34f94:	test   rax,rax
   34f97:	je     34fa8 <g_str_equal@plt+0x27ce8>
   34f99:	mov    rdx,QWORD PTR [rdi]
   34f9c:	mov    rdi,QWORD PTR [rdi+0x58]
   34fa0:	mov    esi,DWORD PTR [rdx+0x18]
   34fa3:	jmp    rax
   34fa5:	nop    DWORD PTR [rax]
   34fa8:	jmp    35c00 <g_str_equal@plt+0x28940>
   34fad:	nop    DWORD PTR [rax]
   34fb0:	mov    edi,edi
   34fb2:	lea    rax,[rip+0x24fb87]        # 284b40 <stdout@@GLIBC_2.2.5+0x1f8>
   34fb9:	push   rbx
   34fba:	shl    rdi,0x5
   34fbe:	mov    rbx,QWORD PTR [rax+rdi*1]
   34fc2:	test   rbx,rbx
   34fc5:	je     34fe1 <g_str_equal@plt+0x27d21>
   34fc7:	nop    WORD PTR [rax+rax*1+0x0]
   34fd0:	mov    rdi,rbx
   34fd3:	call   34f90 <g_str_equal@plt+0x27cd0>
   34fd8:	mov    rbx,QWORD PTR [rbx+0x40]
   34fdc:	test   rbx,rbx
   34fdf:	jne    34fd0 <g_str_equal@plt+0x27d10>
   34fe1:	pop    rbx
   34fe2:	ret    
   34fe3:	nop    DWORD PTR [rax]
   34fe6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   34ff0:	mov    edi,edi
   34ff2:	lea    rcx,[rip+0x24fb47]        # 284b40 <stdout@@GLIBC_2.2.5+0x1f8>
   34ff9:	push   rbx
   34ffa:	mov    rax,rdi
   34ffd:	shl    rax,0x5
   35001:	add    rax,rcx
   35004:	movzx  edx,BYTE PTR [rax+0x1c]
   35008:	mov    BYTE PTR [rax+0x1c],sil
   3500c:	cmp    dl,0x1
   3500f:	je     35038 <g_str_equal@plt+0x27d78>
   35011:	test   sil,sil
   35014:	je     35038 <g_str_equal@plt+0x27d78>
   35016:	mov    rbx,QWORD PTR [rax]
   35019:	test   rbx,rbx
   3501c:	je     35031 <g_str_equal@plt+0x27d71>
   3501e:	xchg   ax,ax
   35020:	mov    rdi,rbx
   35023:	call   34f90 <g_str_equal@plt+0x27cd0>
   35028:	mov    rbx,QWORD PTR [rbx+0x40]
   3502c:	test   rbx,rbx
   3502f:	jne    35020 <g_str_equal@plt+0x27d60>
   35031:	pop    rbx
   35032:	ret    
   35033:	nop    DWORD PTR [rax+rax*1+0x0]
   35038:	cmp    sil,0x1
   3503c:	je     35031 <g_str_equal@plt+0x27d71>
   3503e:	test   dl,dl
   35040:	je     35031 <g_str_equal@plt+0x27d71>
   35042:	shl    rdi,0x5
   35046:	mov    rbx,QWORD PTR [rcx+rdi*1]
   3504a:	test   rbx,rbx
   3504d:	je     35031 <g_str_equal@plt+0x27d71>
   3504f:	nop
   35050:	lea    rdi,[rbx+0x60]
   35054:	call   39660 <g_str_equal@plt+0x2c3a0>
   35059:	mov    rbx,QWORD PTR [rbx+0x40]
   3505d:	test   rbx,rbx
   35060:	jne    35050 <g_str_equal@plt+0x27d90>
   35062:	pop    rbx
   35063:	ret    
   35064:	xchg   ax,ax
   35066:	nop    WORD PTR cs:[rax+rax*1+0x0]
   35070:	test   rdi,rdi
   35073:	js     350b8 <g_str_equal@plt+0x27df8>
   35075:	mov    eax,0x0
   3507a:	je     350bd <g_str_equal@plt+0x27dfd>
   3507c:	add    rdi,0xf423f
   35083:	movabs rdx,0x431bde82d7b634db
   3508d:	mov    rax,rdi
   35090:	sar    rdi,0x3f
   35094:	imul   rdx
   35097:	mov    rax,rdx
   3509a:	mov    edx,0x7fffffff
   3509f:	sar    rax,0x12
   350a3:	sub    rax,rdi
   350a6:	cmp    rax,0x7fffffff
   350ac:	cmovg  rax,rdx
   350b0:	ret    
   350b1:	nop    DWORD PTR [rax+0x0]
   350b8:	mov    eax,0xffffffff
   350bd:	repz ret 
   350bf:	nop
   350c0:	sub    rsp,0x28
   350c4:	mov    esi,esi
   350c6:	mov    rax,QWORD PTR fs:0x28
   350cf:	mov    QWORD PTR [rsp+0x18],rax
   350d4:	xor    eax,eax
   350d6:	test   rdx,rdx
   350d9:	js     35140 <g_str_equal@plt+0x27e80>
   350db:	mov    rcx,rdx
   350de:	movabs rdx,0x112e0be826d694b3
   350e8:	mov    rax,rcx
   350eb:	imul   rdx
   350ee:	mov    rax,rcx
   350f1:	sar    rax,0x3f
   350f5:	sar    rdx,0x1a
   350f9:	sub    rdx,rax
   350fc:	mov    eax,0x7fffffff
   35101:	cmp    rdx,0x7fffffff
   35108:	cmovle rax,rdx
   3510c:	imul   rdx,rdx,0x3b9aca00
   35113:	mov    QWORD PTR [rsp],rax
   35117:	sub    rcx,rdx
   3511a:	mov    rdx,rsp
   3511d:	mov    QWORD PTR [rsp+0x8],rcx
   35122:	xor    ecx,ecx
   35124:	call   c620 <ppoll@plt>
   35129:	mov    rdi,QWORD PTR [rsp+0x18]
   3512e:	xor    rdi,QWORD PTR fs:0x28
   35137:	jne    3514b <g_str_equal@plt+0x27e8b>
   35139:	add    rsp,0x28
   3513d:	ret    
   3513e:	xchg   ax,ax
   35140:	xor    ecx,ecx
   35142:	xor    edx,edx
   35144:	call   c620 <ppoll@plt>
   35149:	jmp    35129 <g_str_equal@plt+0x27e69>
   3514b:	call   cd30 <__stack_chk_fail@plt>
   35150:	mov    QWORD PTR [rdi+0x8],rsi
   35154:	mov    QWORD PTR [rdi+0x10],rcx
   35158:	mov    QWORD PTR [rdi+0x18],r8
   3515c:	mov    DWORD PTR [rdi+0x28],edx
   3515f:	mov    QWORD PTR [rdi],0xffffffffffffffff
   35166:	ret    
   35167:	nop    WORD PTR [rax+rax*1+0x0]
   35170:	cmp    QWORD PTR [rdi],0xffffffffffffffff
   35174:	jne    3517f <g_str_equal@plt+0x27ebf>
   35176:	mov    QWORD PTR [rdi+0x8],0x0
   3517e:	ret    
   3517f:	lea    rcx,[rip+0x2bd3a]        # 60ec0 <_fini@@Base+0xe76c>
   35186:	lea    rsi,[rip+0x2bc7b]        # 60e08 <_fini@@Base+0xe6b4>
   3518d:	lea    rdi,[rip+0x2bcfb]        # 60e8f <_fini@@Base+0xe73b>
   35194:	sub    rsp,0x8
   35198:	mov    edx,0x163
   3519d:	call   c390 <__assert_fail@plt>
   351a2:	nop    DWORD PTR [rax+0x0]
   351a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   351b0:	push   r12
   351b2:	push   rbp
   351b3:	push   rbx
   351b4:	mov    rbp,QWORD PTR [rdi+0x8]
   351b8:	test   rbp,rbp
   351bb:	je     35200 <g_str_equal@plt+0x27f40>
   351bd:	lea    r12,[rbp+0x8]
   351c1:	lea    rsi,[rip+0x2bc40]        # 60e08 <_fini@@Base+0xe6b4>
   351c8:	mov    rbx,rdi
   351cb:	mov    edx,0x19d
   351d0:	mov    rdi,r12
   351d3:	call   38bf0 <g_str_equal@plt+0x2b930>
   351d8:	mov    rsi,rbx
   351db:	mov    rdi,rbp
   351de:	call   34d80 <g_str_equal@plt+0x27ac0>
   351e3:	pop    rbx
   351e4:	mov    rdi,r12
   351e7:	lea    rsi,[rip+0x2bc1a]        # 60e08 <_fini@@Base+0xe6b4>
   351ee:	mov    edx,0x19f
   351f3:	pop    rbp
   351f4:	pop    r12
   351f6:	jmp    38e70 <g_str_equal@plt+0x2bbb0>
   351fb:	nop    DWORD PTR [rax+rax*1+0x0]
   35200:	pop    rbx
   35201:	pop    rbp
   35202:	pop    r12
   35204:	ret    
   35205:	nop
   35206:	nop    WORD PTR cs:[rax+rax*1+0x0]
   35210:	push   r13
   35212:	push   r12
   35214:	mov    r13,rsi
   35217:	push   rbp
   35218:	push   rbx
   35219:	lea    rsi,[rip+0x2bbe8]        # 60e08 <_fini@@Base+0xe6b4>
   35220:	mov    rbp,rdi
   35223:	mov    edx,0x1aa
   35228:	sub    rsp,0x8
   3522c:	mov    rbx,QWORD PTR [rdi+0x8]
   35230:	lea    r12,[rbx+0x8]
   35234:	mov    rdi,r12
   35237:	call   38bf0 <g_str_equal@plt+0x2b930>
   3523c:	mov    rsi,rbp
   3523f:	mov    rdi,rbx
   35242:	call   34d80 <g_str_equal@plt+0x27ac0>
   35247:	mov    rdx,r13
   3524a:	call   34dd0 <g_str_equal@plt+0x27b10>
   3524f:	lea    rsi,[rip+0x2bbb2]        # 60e08 <_fini@@Base+0xe6b4>
   35256:	mov    ebp,eax
   35258:	mov    edx,0x1ad
   3525d:	mov    rdi,r12
   35260:	call   38e70 <g_str_equal@plt+0x2bbb0>
   35265:	test   bpl,bpl
   35268:	jne    35278 <g_str_equal@plt+0x27fb8>
   3526a:	add    rsp,0x8
   3526e:	pop    rbx
   3526f:	pop    rbp
   35270:	pop    r12
   35272:	pop    r13
   35274:	ret    
   35275:	nop    DWORD PTR [rax]
   35278:	mov    rax,QWORD PTR [rbx]
   3527b:	cmp    DWORD PTR [rax+0x18],0x1
   3527f:	je     35298 <g_str_equal@plt+0x27fd8>
   35281:	add    rsp,0x8
   35285:	mov    rdi,rbx
   35288:	pop    rbx
   35289:	pop    rbp
   3528a:	pop    r12
   3528c:	pop    r13
   3528e:	jmp    34f90 <g_str_equal@plt+0x27cd0>
   35293:	nop    DWORD PTR [rax+rax*1+0x0]
   35298:	call   43e50 <g_str_equal@plt+0x36b90>
   3529d:	jmp    35281 <g_str_equal@plt+0x27fc1>
   3529f:	nop
   352a0:	push   r13
   352a2:	push   r12
   352a4:	mov    r13,rsi
   352a7:	push   rbp
   352a8:	push   rbx
   352a9:	lea    rsi,[rip+0x2bb58]        # 60e08 <_fini@@Base+0xe6b4>
   352b0:	mov    rbx,rdi
   352b3:	mov    edx,0x1bc
   352b8:	sub    rsp,0x8
   352bc:	mov    rbp,QWORD PTR [rdi+0x8]
   352c0:	lea    r12,[rbp+0x8]
   352c4:	mov    rdi,r12
   352c7:	call   38bf0 <g_str_equal@plt+0x2b930>
   352cc:	mov    rax,QWORD PTR [rbx]
   352cf:	cmp    rax,0xffffffffffffffff
   352d3:	je     352e5 <g_str_equal@plt+0x28025>
   352d5:	cmp    rax,r13
   352d8:	jle    35330 <g_str_equal@plt+0x28070>
   352da:	mov    rsi,rbx
   352dd:	mov    rdi,rbp
   352e0:	call   34d80 <g_str_equal@plt+0x27ac0>
   352e5:	mov    rsi,rbx
   352e8:	mov    rdx,r13
   352eb:	mov    rdi,rbp
   352ee:	call   34dd0 <g_str_equal@plt+0x27b10>
   352f3:	lea    rsi,[rip+0x2bb0e]        # 60e08 <_fini@@Base+0xe6b4>
   352fa:	mov    ebx,eax
   352fc:	mov    edx,0x1c5
   35301:	mov    rdi,r12
   35304:	call   38e70 <g_str_equal@plt+0x2bbb0>
   35309:	test   bl,bl
   3530b:	je     35350 <g_str_equal@plt+0x28090>
   3530d:	mov    rax,QWORD PTR [rbp+0x0]
   35311:	cmp    DWORD PTR [rax+0x18],0x1
   35315:	je     35360 <g_str_equal@plt+0x280a0>
   35317:	add    rsp,0x8
   3531b:	mov    rdi,rbp
   3531e:	pop    rbx
   3531f:	pop    rbp
   35320:	pop    r12
   35322:	pop    r13
   35324:	jmp    34f90 <g_str_equal@plt+0x27cd0>
   35329:	nop    DWORD PTR [rax+0x0]
   35330:	add    rsp,0x8
   35334:	mov    rdi,r12
   35337:	lea    rsi,[rip+0x2baca]        # 60e08 <_fini@@Base+0xe6b4>
   3533e:	pop    rbx
   3533f:	pop    rbp
   35340:	pop    r12
   35342:	pop    r13
   35344:	mov    edx,0x1c5
   35349:	jmp    38e70 <g_str_equal@plt+0x2bbb0>
   3534e:	xchg   ax,ax
   35350:	add    rsp,0x8
   35354:	pop    rbx
   35355:	pop    rbp
   35356:	pop    r12
   35358:	pop    r13
   3535a:	ret    
   3535b:	nop    DWORD PTR [rax+rax*1+0x0]
   35360:	call   43e50 <g_str_equal@plt+0x36b90>
   35365:	jmp    35317 <g_str_equal@plt+0x28057>
   35367:	nop    WORD PTR [rax+rax*1+0x0]
   35370:	movsxd rax,DWORD PTR [rdi+0x28]
   35374:	imul   rsi,rax
   35378:	jmp    35210 <g_str_equal@plt+0x27f50>
   3537d:	nop    DWORD PTR [rax]
   35380:	movsxd rax,DWORD PTR [rdi+0x28]
   35384:	imul   rsi,rax
   35388:	jmp    352a0 <g_str_equal@plt+0x27fe0>
   3538d:	nop    DWORD PTR [rax]
   35390:	mov    rax,QWORD PTR [rdi]
   35393:	not    rax
   35396:	shr    rax,0x3f
   3539a:	ret    
   3539b:	nop    DWORD PTR [rax+rax*1+0x0]
   353a0:	movsxd rax,DWORD PTR [rdi+0x28]
   353a4:	imul   rsi,rax
   353a8:	cmp    rsi,QWORD PTR [rdi]
   353ab:	setge  al
   353ae:	ret    
   353af:	nop
   353b0:	push   r13
   353b2:	push   r12
   353b4:	mov    r13,rdi
   353b7:	push   rbp
   353b8:	push   rbx
   353b9:	mov    r12,rsi
   353bc:	mov    rbp,rdx
   353bf:	xor    ebx,ebx
   353c1:	sub    rsp,0x8
   353c5:	mov    edi,ebx
   353c7:	mov    rdx,rbp
   353ca:	mov    rsi,r12
   353cd:	call   34e30 <g_str_equal@plt+0x27b70>
   353d2:	mov    QWORD PTR [r13+rbx*8+0x0],rax
   353d7:	add    rbx,0x1
   353db:	cmp    rbx,0x4
   353df:	jne    353c5 <g_str_equal@plt+0x28105>
   353e1:	add    rsp,0x8
   353e5:	pop    rbx
   353e6:	pop    rbp
   353e7:	pop    r12
   353e9:	pop    r13
   353eb:	ret    
   353ec:	nop    DWORD PTR [rax+0x0]
   353f0:	push   rbp
   353f1:	push   rbx
   353f2:	lea    rbp,[rdi+0x20]
   353f6:	mov    rbx,rdi
   353f9:	sub    rsp,0x8
   353fd:	mov    rdi,QWORD PTR [rbx]
   35400:	add    rbx,0x8
   35404:	call   34ec0 <g_str_equal@plt+0x27c00>
   35409:	cmp    rbx,rbp
   3540c:	jne    353fd <g_str_equal@plt+0x2813d>
   3540e:	add    rsp,0x8
   35412:	pop    rbx
   35413:	pop    rbp
   35414:	ret    
   35415:	nop
   35416:	nop    WORD PTR cs:[rax+rax*1+0x0]
   35420:	sub    rsp,0x28
   35424:	mov    rax,QWORD PTR fs:0x28
   3542d:	mov    QWORD PTR [rsp+0x18],rax
   35432:	xor    eax,eax
   35434:	cmp    edi,0x2
   35437:	je     354e0 <g_str_equal@plt+0x28220>
   3543d:	cmp    edi,0x3
   35440:	je     354b0 <g_str_equal@plt+0x281f0>
   35442:	test   edi,edi
   35444:	je     35478 <g_str_equal@plt+0x281b8>
   35446:	mov    eax,DWORD PTR [rip+0x251c44]        # 287090 <stdout@@GLIBC_2.2.5+0x2748>
   3544c:	test   eax,eax
   3544e:	jne    35560 <g_str_equal@plt+0x282a0>
   35454:	call   43e60 <g_str_equal@plt+0x36ba0>
   35459:	mov    rcx,QWORD PTR [rsp+0x18]
   3545e:	xor    rcx,QWORD PTR fs:0x28
   35467:	jne    355d7 <g_str_equal@plt+0x28317>
   3546d:	add    rsp,0x28
   35471:	ret    
   35472:	nop    WORD PTR [rax+rax*1+0x0]
   35478:	mov    edx,DWORD PTR [rip+0x251c1e]        # 28709c <stdout@@GLIBC_2.2.5+0x2754>
   3547e:	test   edx,edx
   35480:	jne    35570 <g_str_equal@plt+0x282b0>
   35486:	mov    rdi,rsp
   35489:	xor    esi,esi
   3548b:	call   c3e0 <gettimeofday@plt>
   35490:	imul   rax,QWORD PTR [rsp],0x3b9aca00
   35498:	imul   rdx,QWORD PTR [rsp+0x8],0x3e8
   354a1:	add    rax,rdx
   354a4:	jmp    35459 <g_str_equal@plt+0x28199>
   354a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   354b0:	mov    eax,DWORD PTR [rip+0x251bde]        # 287094 <stdout@@GLIBC_2.2.5+0x274c>
   354b6:	cmp    eax,0x2
   354b9:	je     355c8 <g_str_equal@plt+0x28308>
   354bf:	cmp    eax,0x1
   354c2:	jne    35454 <g_str_equal@plt+0x28194>
   354c4:	call   43e60 <g_str_equal@plt+0x36ba0>
   354c9:	mov    edi,0x1
   354ce:	mov    rsi,rax
   354d1:	call   44040 <g_str_equal@plt+0x36d80>
   354d6:	jmp    35459 <g_str_equal@plt+0x28199>
   354d8:	nop    DWORD PTR [rax+rax*1+0x0]
   354e0:	mov    eax,DWORD PTR [rip+0x251bae]        # 287094 <stdout@@GLIBC_2.2.5+0x274c>
   354e6:	cmp    eax,0x2
   354e9:	je     35590 <g_str_equal@plt+0x282d0>
   354ef:	xor    esi,esi
   354f1:	cmp    eax,0x1
   354f4:	mov    rdi,rsp
   354f7:	je     355a0 <g_str_equal@plt+0x282e0>
   354fd:	call   c3e0 <gettimeofday@plt>
   35502:	imul   rax,QWORD PTR [rsp],0x3b9aca00
   3550a:	imul   rdx,QWORD PTR [rsp+0x8],0x3e8
   35513:	add    rax,rdx
   35516:	mov    rdx,QWORD PTR [rip+0x24f673]        # 284b90 <stdout@@GLIBC_2.2.5+0x248>
   3551d:	mov    QWORD PTR [rsp],rax
   35521:	mov    QWORD PTR [rip+0x24f668],rax        # 284b90 <stdout@@GLIBC_2.2.5+0x248>
   35528:	cmp    rax,rdx
   3552b:	jl     35543 <g_str_equal@plt+0x28283>
   3552d:	movabs rcx,0xdf8475800
   35537:	add    rdx,rcx
   3553a:	cmp    rax,rdx
   3553d:	jle    35459 <g_str_equal@plt+0x28199>
   35543:	lea    rdi,[rip+0x24f63e]        # 284b88 <stdout@@GLIBC_2.2.5+0x240>
   3554a:	mov    rsi,rsp
   3554d:	call   3ef30 <g_str_equal@plt+0x31c70>
   35552:	mov    rax,QWORD PTR [rsp]
   35556:	jmp    35459 <g_str_equal@plt+0x28199>
   3555b:	nop    DWORD PTR [rax+rax*1+0x0]
   35560:	call   43eb0 <g_str_equal@plt+0x36bf0>
   35565:	jmp    35459 <g_str_equal@plt+0x28199>
   3556a:	nop    WORD PTR [rax+rax*1+0x0]
   35570:	mov    rsi,rsp
   35573:	mov    edi,0x1
   35578:	call   d190 <clock_gettime@plt>
   3557d:	imul   rax,QWORD PTR [rsp],0x3b9aca00
   35585:	add    rax,QWORD PTR [rsp+0x8]
   3558a:	jmp    35459 <g_str_equal@plt+0x28199>
   3558f:	nop
   35590:	xor    edi,edi
   35592:	call   44050 <g_str_equal@plt+0x36d90>
   35597:	jmp    35516 <g_str_equal@plt+0x28256>
   3559c:	nop    DWORD PTR [rax+0x0]
   355a0:	call   c3e0 <gettimeofday@plt>
   355a5:	imul   rsi,QWORD PTR [rsp],0x3b9aca00
   355ad:	imul   rax,QWORD PTR [rsp+0x8],0x3e8
   355b6:	xor    edi,edi
   355b8:	add    rsi,rax
   355bb:	call   44040 <g_str_equal@plt+0x36d80>
   355c0:	jmp    35516 <g_str_equal@plt+0x28256>
   355c5:	nop    DWORD PTR [rax]
   355c8:	mov    edi,0x1
   355cd:	call   44050 <g_str_equal@plt+0x36d90>
   355d2:	jmp    35459 <g_str_equal@plt+0x28199>
   355d7:	call   cd30 <__stack_chk_fail@plt>
   355dc:	nop    DWORD PTR [rax+0x0]
   355e0:	push   r12
   355e2:	push   rbp
   355e3:	xor    ebp,ebp
   355e5:	push   rbx
   355e6:	mov    rax,QWORD PTR [rdi+0x38]
   355ea:	test   rax,rax
   355ed:	jne    35600 <g_str_equal@plt+0x28340>
   355ef:	mov    eax,ebp
   355f1:	pop    rbx
   355f2:	pop    rbp
   355f3:	pop    r12
   355f5:	ret    
   355f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   35600:	lea    r12,[rdi+0x8]
   35604:	lea    rsi,[rip+0x2b7fd]        # 60e08 <_fini@@Base+0xe6b4>
   3560b:	mov    rbx,rdi
   3560e:	mov    edx,0xc3
   35613:	mov    rdi,r12
   35616:	call   38bf0 <g_str_equal@plt+0x2b930>
   3561b:	mov    rax,QWORD PTR [rbx+0x38]
   3561f:	test   rax,rax
   35622:	je     35658 <g_str_equal@plt+0x28398>
   35624:	lea    rsi,[rip+0x2b7dd]        # 60e08 <_fini@@Base+0xe6b4>
   3562b:	mov    rdi,r12
   3562e:	mov    edx,0xc9
   35633:	mov    rbp,QWORD PTR [rax]
   35636:	call   38e70 <g_str_equal@plt+0x2bbb0>
   3563b:	mov    rax,QWORD PTR [rbx]
   3563e:	mov    edi,DWORD PTR [rax+0x18]
   35641:	call   35420 <g_str_equal@plt+0x28160>
   35646:	cmp    rbp,rax
   35649:	setle  bpl
   3564d:	mov    eax,ebp
   3564f:	pop    rbx
   35650:	pop    rbp
   35651:	pop    r12
   35653:	ret    
   35654:	nop    DWORD PTR [rax+0x0]
   35658:	lea    rsi,[rip+0x2b7a9]        # 60e08 <_fini@@Base+0xe6b4>
   3565f:	mov    edx,0xc5
   35664:	mov    rdi,r12
   35667:	call   38e70 <g_str_equal@plt+0x2bbb0>
   3566c:	jmp    355ef <g_str_equal@plt+0x2832f>
   3566e:	xchg   ax,ax
   35670:	lea    rax,[rip+0x24f4a9]        # 284b20 <stdout@@GLIBC_2.2.5+0x1d8>
   35677:	mov    edi,edi
   35679:	mov    rdi,QWORD PTR [rax+rdi*8]
   3567d:	jmp    355e0 <g_str_equal@plt+0x28320>
   35682:	nop    DWORD PTR [rax+0x0]
   35686:	nop    WORD PTR cs:[rax+rax*1+0x0]
   35690:	mov    rax,QWORD PTR [rdi+0x38]
   35694:	test   rax,rax
   35697:	je     35700 <g_str_equal@plt+0x28440>
   35699:	mov    rax,QWORD PTR [rdi]
   3569c:	cmp    BYTE PTR [rax+0x1c],0x0
   356a0:	je     35700 <g_str_equal@plt+0x28440>
   356a2:	push   r12
   356a4:	lea    r12,[rdi+0x8]
   356a8:	push   rbp
   356a9:	lea    rsi,[rip+0x2b758]        # 60e08 <_fini@@Base+0xe6b4>
   356b0:	push   rbx
   356b1:	mov    edx,0xea
   356b6:	mov    rbx,rdi
   356b9:	mov    rdi,r12
   356bc:	call   38bf0 <g_str_equal@plt+0x2b930>
   356c1:	mov    rax,QWORD PTR [rbx+0x38]
   356c5:	test   rax,rax
   356c8:	je     35708 <g_str_equal@plt+0x28448>
   356ca:	lea    rsi,[rip+0x2b737]        # 60e08 <_fini@@Base+0xe6b4>
   356d1:	mov    edx,0xf0
   356d6:	mov    rdi,r12
   356d9:	mov    rbp,QWORD PTR [rax]
   356dc:	call   38e70 <g_str_equal@plt+0x2bbb0>
   356e1:	mov    rax,QWORD PTR [rbx]
   356e4:	mov    edi,DWORD PTR [rax+0x18]
   356e7:	call   35420 <g_str_equal@plt+0x28160>
   356ec:	sub    rbp,rax
   356ef:	mov    edx,0x0
   356f4:	mov    rax,rbp
   356f7:	cmovs  rax,rdx
   356fb:	pop    rbx
   356fc:	pop    rbp
   356fd:	pop    r12
   356ff:	ret    
   35700:	mov    rax,0xffffffffffffffff
   35707:	ret    
   35708:	lea    rsi,[rip+0x2b6f9]        # 60e08 <_fini@@Base+0xe6b4>
   3570f:	mov    edx,0xec
   35714:	mov    rdi,r12
   35717:	call   38e70 <g_str_equal@plt+0x2bbb0>
   3571c:	mov    rax,0xffffffffffffffff
   35723:	jmp    356fb <g_str_equal@plt+0x2843b>
   35725:	nop
   35726:	nop    WORD PTR cs:[rax+rax*1+0x0]
   35730:	push   rbp
   35731:	mov    edi,edi
   35733:	push   rbx
   35734:	lea    rax,[rip+0x24f405]        # 284b40 <stdout@@GLIBC_2.2.5+0x1f8>
   3573b:	shl    rdi,0x5
   3573f:	mov    rbp,0xffffffffffffffff
   35746:	sub    rsp,0x8
   3574a:	mov    rbx,QWORD PTR [rax+rdi*1]
   3574e:	test   rbx,rbx
   35751:	je     35770 <g_str_equal@plt+0x284b0>
   35753:	nop    DWORD PTR [rax+rax*1+0x0]
   35758:	mov    rdi,rbx
   3575b:	call   35690 <g_str_equal@plt+0x283d0>
   35760:	mov    rbx,QWORD PTR [rbx+0x40]
   35764:	cmp    rbp,rax
   35767:	cmova  rbp,rax
   3576b:	test   rbx,rbx
   3576e:	jne    35758 <g_str_equal@plt+0x28498>
   35770:	add    rsp,0x8
   35774:	mov    rax,rbp
   35777:	pop    rbx
   35778:	pop    rbp
   35779:	ret    
   3577a:	nop    WORD PTR [rax+rax*1+0x0]
   35780:	push   r12
   35782:	mov    r12,rdi
   35785:	push   rbp
   35786:	mov    rbp,0xffffffffffffffff
   3578d:	push   rbx
   3578e:	xor    ebx,ebx
   35790:	mov    eax,DWORD PTR [rip+0x2518fa]        # 287090 <stdout@@GLIBC_2.2.5+0x2748>
   35796:	test   eax,eax
   35798:	je     3579f <g_str_equal@plt+0x284df>
   3579a:	cmp    ebx,0x1
   3579d:	je     357af <g_str_equal@plt+0x284ef>
   3579f:	mov    rdi,QWORD PTR [r12+rbx*8]
   357a3:	call   35690 <g_str_equal@plt+0x283d0>
   357a8:	cmp    rbp,rax
   357ab:	cmova  rbp,rax
   357af:	add    rbx,0x1
   357b3:	cmp    rbx,0x4
   357b7:	jne    35790 <g_str_equal@plt+0x284d0>
   357b9:	mov    rax,rbp
   357bc:	pop    rbx
   357bd:	pop    rbp
   357be:	pop    r12
   357c0:	ret    
   357c1:	nop    DWORD PTR [rax+rax*1+0x0]
   357c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   357d0:	push   r15
   357d2:	push   r14
   357d4:	push   r13
   357d6:	push   r12
   357d8:	xor    r13d,r13d
   357db:	push   rbp
   357dc:	push   rbx
   357dd:	sub    rsp,0x18
   357e1:	mov    rax,QWORD PTR [rdi+0x38]
   357e5:	test   rax,rax
   357e8:	jne    35800 <g_str_equal@plt+0x28540>
   357ea:	add    rsp,0x18
   357ee:	mov    eax,r13d
   357f1:	pop    rbx
   357f2:	pop    rbp
   357f3:	pop    r12
   357f5:	pop    r13
   357f7:	pop    r14
   357f9:	pop    r15
   357fb:	ret    
   357fc:	nop    DWORD PTR [rax+0x0]
   35800:	lea    r14,[rdi+0x60]
   35804:	mov    rbx,rdi
   35807:	mov    rdi,r14
   3580a:	call   39620 <g_str_equal@plt+0x2c360>
   3580f:	mov    rax,QWORD PTR [rbx]
   35812:	movzx  r12d,BYTE PTR [rax+0x1c]
   35817:	test   r12b,r12b
   3581a:	je     358b0 <g_str_equal@plt+0x285f0>
   35820:	mov    edi,DWORD PTR [rax+0x18]
   35823:	cmp    edi,0x2
   35826:	je     358a0 <g_str_equal@plt+0x285e0>
   35828:	cmp    edi,0x3
   3582b:	je     35908 <g_str_equal@plt+0x28648>
   35831:	test   edi,edi
   35833:	je     35849 <g_str_equal@plt+0x28589>
   35835:	mov    edi,0x4
   3583a:	call   44060 <g_str_equal@plt+0x36da0>
   3583f:	test   al,al
   35841:	je     358b0 <g_str_equal@plt+0x285f0>
   35843:	mov    rax,QWORD PTR [rbx]
   35846:	mov    edi,DWORD PTR [rax+0x18]
   35849:	lea    rbp,[rbx+0x8]
   3584d:	xor    r13d,r13d
   35850:	call   35420 <g_str_equal@plt+0x28160>
   35855:	mov    QWORD PTR [rsp+0x8],rax
   3585a:	nop    WORD PTR [rax+rax*1+0x0]
   35860:	lea    rsi,[rip+0x2b5a1]        # 60e08 <_fini@@Base+0xe6b4>
   35867:	mov    edx,0x208
   3586c:	mov    rdi,rbp
   3586f:	call   38bf0 <g_str_equal@plt+0x2b930>
   35874:	mov    rax,QWORD PTR [rbx+0x38]
   35878:	test   rax,rax
   3587b:	je     35887 <g_str_equal@plt+0x285c7>
   3587d:	mov    rcx,QWORD PTR [rsp+0x8]
   35882:	cmp    rcx,QWORD PTR [rax]
   35885:	jge    358c0 <g_str_equal@plt+0x28600>
   35887:	lea    rsi,[rip+0x2b57a]        # 60e08 <_fini@@Base+0xe6b4>
   3588e:	mov    edx,0x20b
   35893:	mov    rdi,rbp
   35896:	call   38e70 <g_str_equal@plt+0x2bbb0>
   3589b:	jmp    358b3 <g_str_equal@plt+0x285f3>
   3589d:	nop    DWORD PTR [rax]
   358a0:	mov    edi,0x5
   358a5:	call   44060 <g_str_equal@plt+0x36da0>
   358aa:	test   al,al
   358ac:	jne    35843 <g_str_equal@plt+0x28583>
   358ae:	xchg   ax,ax
   358b0:	xor    r13d,r13d
   358b3:	mov    rdi,r14
   358b6:	call   395a0 <g_str_equal@plt+0x2c2e0>
   358bb:	jmp    357ea <g_str_equal@plt+0x2852a>
   358c0:	mov    rdx,QWORD PTR [rax+0x20]
   358c4:	lea    rsi,[rip+0x2b53d]        # 60e08 <_fini@@Base+0xe6b4>
   358cb:	mov    rdi,rbp
   358ce:	mov    QWORD PTR [rbx+0x38],rdx
   358d2:	mov    r13,QWORD PTR [rax+0x18]
   358d6:	mov    edx,0x215
   358db:	mov    QWORD PTR [rax+0x20],0x0
   358e3:	mov    QWORD PTR [rax],0xffffffffffffffff
   358ea:	mov    r15,QWORD PTR [rax+0x10]
   358ee:	call   38e70 <g_str_equal@plt+0x2bbb0>
   358f3:	mov    rdi,r13
   358f6:	mov    r13d,r12d
   358f9:	call   r15
   358fc:	jmp    35860 <g_str_equal@plt+0x285a0>
   35901:	nop    DWORD PTR [rax+0x0]
   35908:	mov    edi,0x6
   3590d:	call   44060 <g_str_equal@plt+0x36da0>
   35912:	test   al,al
   35914:	je     358b0 <g_str_equal@plt+0x285f0>
   35916:	jmp    35843 <g_str_equal@plt+0x28583>
   3591b:	nop    DWORD PTR [rax+rax*1+0x0]
   35920:	lea    rax,[rip+0x24f1f9]        # 284b20 <stdout@@GLIBC_2.2.5+0x1d8>
   35927:	mov    edi,edi
   35929:	mov    rdi,QWORD PTR [rax+rdi*8]
   3592d:	jmp    357d0 <g_str_equal@plt+0x28510>
   35932:	nop    DWORD PTR [rax+0x0]
   35936:	nop    WORD PTR cs:[rax+rax*1+0x0]
   35940:	push   r12
   35942:	lea    r12,[rdi+0x20]
   35946:	push   rbp
   35947:	xor    ebp,ebp
   35949:	push   rbx
   3594a:	mov    rbx,rdi
   3594d:	mov    rdi,QWORD PTR [rbx]
   35950:	add    rbx,0x8
   35954:	call   357d0 <g_str_equal@plt+0x28510>
   35959:	or     ebp,eax
   3595b:	cmp    rbx,r12
   3595e:	jne    3594d <g_str_equal@plt+0x2868d>
   35960:	mov    eax,ebp
   35962:	pop    rbx
   35963:	pop    rbp
   35964:	pop    r12
   35966:	ret    
   35967:	nop    WORD PTR [rax+rax*1+0x0]
   35970:	mov    edi,edi
   35972:	lea    rax,[rip+0x24f1c7]        # 284b40 <stdout@@GLIBC_2.2.5+0x1f8>
   35979:	shl    rdi,0x5
   3597d:	mov    rax,QWORD PTR [rax+rdi*1+0x10]
   35982:	ret    
   35983:	nop    DWORD PTR [rax]
   35986:	nop    WORD PTR cs:[rax+rax*1+0x0]
   35990:	mov    edi,edi
   35992:	lea    rax,[rip+0x24f1a7]        # 284b40 <stdout@@GLIBC_2.2.5+0x1f8>
   35999:	shl    rdi,0x5
   3599d:	mov    QWORD PTR [rax+rdi*1+0x10],rsi
   359a2:	ret    
   359a3:	nop    DWORD PTR [rax]
   359a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   359b0:	mov    edi,edi
   359b2:	lea    rax,[rip+0x24f187]        # 284b40 <stdout@@GLIBC_2.2.5+0x1f8>
   359b9:	shl    rdi,0x5
   359bd:	lea    rdi,[rax+rdi*1+0x8]
   359c2:	jmp    3eef0 <g_str_equal@plt+0x31c30>
   359c7:	nop    WORD PTR [rax+rax*1+0x0]
   359d0:	mov    rdi,rsi
   359d3:	jmp    3ef10 <g_str_equal@plt+0x31c50>
   359d8:	nop    DWORD PTR [rax+rax*1+0x0]
   359e0:	push   r14
   359e2:	push   r13
   359e4:	mov    r14,rdi
   359e7:	push   r12
   359e9:	lea    r12,[rip+0x24f130]        # 284b20 <stdout@@GLIBC_2.2.5+0x1d8>
   359f0:	push   rbp
   359f1:	lea    rbp,[rip+0x24f150]        # 284b48 <stdout@@GLIBC_2.2.5+0x200>
   359f8:	push   rbx
   359f9:	movabs r13,0x8000000000000000
   35a03:	xor    ebx,ebx
   35a05:	cmp    QWORD PTR [r12+rbx*8],0x0
   35a0a:	jne    35a68 <g_str_equal@plt+0x287a8>
   35a0c:	cmp    ebx,0x1
   35a0f:	mov    DWORD PTR [rbp+0x10],ebx
   35a12:	mov    QWORD PTR [rbp+0x8],r13
   35a16:	setne  BYTE PTR [rbp+0x14]
   35a1a:	mov    QWORD PTR [rbp-0x8],0x0
   35a22:	mov    rdi,rbp
   35a25:	call   3eee0 <g_str_equal@plt+0x31c20>
   35a2a:	xor    edx,edx
   35a2c:	mov    edi,ebx
   35a2e:	mov    rsi,r14
   35a31:	call   34e30 <g_str_equal@plt+0x27b70>
   35a36:	mov    QWORD PTR [r12+rbx*8],rax
   35a3a:	add    rbx,0x1
   35a3e:	add    rbp,0x20
   35a42:	cmp    rbx,0x4
   35a46:	jne    35a05 <g_str_equal@plt+0x28745>
   35a48:	pop    rbx
   35a49:	pop    rbp
   35a4a:	pop    r12
   35a4c:	pop    r13
   35a4e:	pop    r14
   35a50:	xor    r8d,r8d
   35a53:	xor    ecx,ecx
   35a55:	xor    edx,edx
   35a57:	mov    esi,0x1
   35a5c:	mov    edi,0x1d
   35a61:	xor    eax,eax
   35a63:	jmp    c3d0 <prctl@plt>
   35a68:	lea    rcx,[rip+0x2b441]        # 60eb0 <_fini@@Base+0xe75c>
   35a6f:	lea    rsi,[rip+0x2b392]        # 60e08 <_fini@@Base+0xe6b4>
   35a76:	lea    rdi,[rip+0x2b3f3]        # 60e70 <_fini@@Base+0xe71c>
   35a7d:	mov    edx,0x82
   35a82:	call   c390 <__assert_fail@plt>
   35a87:	nop    WORD PTR [rax+rax*1+0x0]
   35a90:	mov    rax,QWORD PTR [rdi]
   35a93:	mov    rdx,0xffffffffffffffff
   35a9a:	test   rax,rax
   35a9d:	cmovs  rax,rdx
   35aa1:	ret    
   35aa2:	nop    DWORD PTR [rax+0x0]
   35aa6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   35ab0:	push   r12
   35ab2:	lea    r12,[rip+0x24f067]        # 284b20 <stdout@@GLIBC_2.2.5+0x1d8>
   35ab9:	push   rbp
   35aba:	xor    ebp,ebp
   35abc:	push   rbx
   35abd:	xor    ebx,ebx
   35abf:	mov    eax,DWORD PTR [rip+0x2515cb]        # 287090 <stdout@@GLIBC_2.2.5+0x2748>
   35ac5:	test   eax,eax
   35ac7:	je     35ace <g_str_equal@plt+0x2880e>
   35ac9:	cmp    ebx,0x1
   35acc:	je     35ad9 <g_str_equal@plt+0x28819>
   35ace:	mov    rdi,QWORD PTR [r12+rbx*8]
   35ad2:	call   357d0 <g_str_equal@plt+0x28510>
   35ad7:	or     ebp,eax
   35ad9:	add    rbx,0x1
   35add:	cmp    rbx,0x4
   35ae1:	jne    35abf <g_str_equal@plt+0x287ff>
   35ae3:	mov    eax,ebp
   35ae5:	pop    rbx
   35ae6:	pop    rbp
   35ae7:	pop    r12
   35ae9:	ret    
   35aea:	nop    WORD PTR [rax+rax*1+0x0]
   35af0:	repz ret 
   35af2:	nop    DWORD PTR [rax+0x0]
   35af6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   35b00:	push   r13
   35b02:	push   r12
   35b04:	mov    r12d,edi
   35b07:	push   rbp
   35b08:	push   rbx
   35b09:	sub    rsp,0x128
   35b10:	mov    rax,QWORD PTR fs:0x28
   35b19:	mov    QWORD PTR [rsp+0x118],rax
   35b21:	xor    eax,eax
   35b23:	lea    r13,[rsp+0x80]
   35b2b:	mov    rbp,rsp
   35b2e:	xchg   ax,ax
   35b30:	mov    edx,0x80
   35b35:	mov    rsi,rbp
   35b38:	mov    edi,r12d
   35b3b:	call   c490 <read@plt>
   35b40:	cmp    rax,0xffffffffffffffff
   35b44:	mov    rbx,rax
   35b47:	je     35b98 <g_str_equal@plt+0x288d8>
   35b49:	cmp    rax,0x80
   35b4f:	jne    35ba9 <g_str_equal@plt+0x288e9>
   35b51:	mov    edi,DWORD PTR [rsp]
   35b54:	xor    esi,esi
   35b56:	mov    rdx,r13
   35b59:	call   ca50 <sigaction@plt>
   35b5e:	test   BYTE PTR [rsp+0x108],0x4
   35b66:	je     35b80 <g_str_equal@plt+0x288c0>
   35b68:	cmp    QWORD PTR [rsp+0x80],0x0
   35b71:	je     35b30 <g_str_equal@plt+0x28870>
   35b73:	mov    rsi,rbp
   35b76:	mov    rdi,r13
   35b79:	call   389c0 <g_str_equal@plt+0x2b700>
   35b7e:	jmp    35b30 <g_str_equal@plt+0x28870>
   35b80:	mov    rax,QWORD PTR [rsp+0x80]
   35b88:	test   rax,rax
   35b8b:	je     35b30 <g_str_equal@plt+0x28870>
   35b8d:	mov    edi,DWORD PTR [rsp]
   35b90:	call   rax
   35b92:	jmp    35b30 <g_str_equal@plt+0x28870>
   35b94:	nop    DWORD PTR [rax+0x0]
   35b98:	call   cc80 <__errno_location@plt>
   35b9d:	mov    eax,DWORD PTR [rax]
   35b9f:	cmp    eax,0x4
   35ba2:	je     35b30 <g_str_equal@plt+0x28870>
   35ba4:	cmp    eax,0xb
   35ba7:	je     35bbf <g_str_equal@plt+0x288ff>
   35ba9:	lea    rsi,[rip+0x2b330]        # 60ee0 <_fini@@Base+0xe78c>
   35bb0:	mov    rdx,rbx
   35bb3:	mov    edi,0x1
   35bb8:	xor    eax,eax
   35bba:	call   c3a0 <__printf_chk@plt>
   35bbf:	mov    rax,QWORD PTR [rsp+0x118]
   35bc7:	xor    rax,QWORD PTR fs:0x28
   35bd0:	jne    35be0 <g_str_equal@plt+0x28920>
   35bd2:	add    rsp,0x128
   35bd9:	pop    rbx
   35bda:	pop    rbp
   35bdb:	pop    r12
   35bdd:	pop    r13
   35bdf:	ret    
   35be0:	call   cd30 <__stack_chk_fail@plt>
   35be5:	nop
   35be6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   35bf0:	mov    rax,QWORD PTR [rip+0x24efe9]        # 284be0 <stdout@@GLIBC_2.2.5+0x298>
   35bf7:	ret    
   35bf8:	nop    DWORD PTR [rax+rax*1+0x0]
   35c00:	cmp    QWORD PTR [rip+0x24efd8],0x0        # 284be0 <stdout@@GLIBC_2.2.5+0x298>
   35c08:	je     35c20 <g_str_equal@plt+0x28960>
   35c0a:	mov    rdi,QWORD PTR [rip+0x24efc7]        # 284bd8 <stdout@@GLIBC_2.2.5+0x290>
   35c11:	jmp    33f60 <g_str_equal@plt+0x26ca0>
   35c16:	nop    WORD PTR cs:[rax+rax*1+0x0]
   35c20:	repz ret 
   35c22:	nop    DWORD PTR [rax+0x0]
   35c26:	nop    WORD PTR cs:[rax+rax*1+0x0]
   35c30:	push   rbp
   35c31:	push   rbx
   35c32:	mov    rbp,rdi
   35c35:	sub    rsp,0xa8
   35c3c:	lea    rdi,[rip+0xe27d]        # 43ec0 <g_str_equal@plt+0x36c00>
   35c43:	lea    rbx,[rsp+0x10]
   35c48:	mov    QWORD PTR [rsp+0x8],0x0
   35c51:	mov    rax,QWORD PTR fs:0x28
   35c5a:	mov    QWORD PTR [rsp+0x98],rax
   35c62:	xor    eax,eax
   35c64:	call   359e0 <g_str_equal@plt+0x28720>
   35c69:	mov    rdi,rbx
   35c6c:	call   d010 <sigemptyset@plt>
   35c71:	mov    esi,0xa
   35c76:	mov    rdi,rbx
   35c79:	call   cd00 <sigaddset@plt>
   35c7e:	mov    esi,0x1d
   35c83:	mov    rdi,rbx
   35c86:	call   cd00 <sigaddset@plt>
   35c8b:	mov    esi,0xe
   35c90:	mov    rdi,rbx
   35c93:	call   cd00 <sigaddset@plt>
   35c98:	mov    esi,0x7
   35c9d:	mov    rdi,rbx
   35ca0:	call   cd00 <sigaddset@plt>
   35ca5:	xor    edx,edx
   35ca7:	xor    edi,edi
   35ca9:	mov    rsi,rbx
   35cac:	call   d040 <pthread_sigmask@plt>
   35cb1:	mov    esi,0xa
   35cb6:	mov    rdi,rbx
   35cb9:	call   d0b0 <sigdelset@plt>
   35cbe:	mov    rdi,rbx
   35cc1:	call   37870 <g_str_equal@plt+0x2a5b0>
   35cc6:	cmp    eax,0xffffffff
   35cc9:	je     35db0 <g_str_equal@plt+0x28af0>
   35ccf:	mov    esi,0x800
   35cd4:	mov    edi,eax
   35cd6:	mov    ebx,eax
   35cd8:	call   32d00 <g_str_equal@plt+0x25a40>
   35cdd:	lea    rsi,[rip+0xfffffffffffffe1c]        # 35b00 <g_str_equal@plt+0x28840>
   35ce4:	movsxd rcx,ebx
   35ce7:	xor    edx,edx
   35ce9:	mov    edi,ebx
   35ceb:	call   36260 <g_str_equal@plt+0x28fa0>
   35cf0:	lea    rdi,[rsp+0x8]
   35cf5:	call   34020 <g_str_equal@plt+0x26d60>
   35cfa:	test   rax,rax
   35cfd:	mov    QWORD PTR [rip+0x24eedc],rax        # 284be0 <stdout@@GLIBC_2.2.5+0x298>
   35d04:	je     35ddd <g_str_equal@plt+0x28b1d>
   35d0a:	lea    rsi,[rip+0xfffffffffffffddf]        # 35af0 <g_str_equal@plt+0x28830>
   35d11:	xor    edx,edx
   35d13:	mov    rdi,rax
   35d16:	call   33bf0 <g_str_equal@plt+0x26930>
   35d1b:	mov    edx,0x8
   35d20:	xor    esi,esi
   35d22:	xor    edi,edi
   35d24:	mov    QWORD PTR [rip+0x24eead],rax        # 284bd8 <stdout@@GLIBC_2.2.5+0x290>
   35d2b:	call   c470 <g_array_new@plt>
   35d30:	mov    rdi,QWORD PTR [rip+0x24eea9]        # 284be0 <stdout@@GLIBC_2.2.5+0x298>
   35d37:	mov    QWORD PTR [rip+0x24ee92],rax        # 284bd0 <stdout@@GLIBC_2.2.5+0x288>
   35d3e:	call   33e70 <g_str_equal@plt+0x26bb0>
   35d43:	lea    rsi,[rip+0x2b2da]        # 61024 <_fini@@Base+0xe8d0>
   35d4a:	mov    rbx,rax
   35d4d:	mov    rdi,rax
   35d50:	call   ce80 <g_source_set_name@plt>
   35d55:	xor    esi,esi
   35d57:	mov    rdi,rbx
   35d5a:	call   cf70 <g_source_attach@plt>
   35d5f:	mov    rdi,rbx
   35d62:	call   cef0 <g_source_unref@plt>
   35d67:	call   36220 <g_str_equal@plt+0x28f60>
   35d6c:	lea    rsi,[rip+0x2b2bd]        # 61030 <_fini@@Base+0xe8dc>
   35d73:	mov    rbx,rax
   35d76:	mov    rdi,rax
   35d79:	call   ce80 <g_source_set_name@plt>
   35d7e:	xor    esi,esi
   35d80:	mov    rdi,rbx
   35d83:	call   cf70 <g_source_attach@plt>
   35d88:	mov    rdi,rbx
   35d8b:	call   cef0 <g_source_unref@plt>
   35d90:	xor    eax,eax
   35d92:	mov    rcx,QWORD PTR [rsp+0x98]
   35d9a:	xor    rcx,QWORD PTR fs:0x28
   35da3:	jne    35df1 <g_str_equal@plt+0x28b31>
   35da5:	add    rsp,0xa8
   35dac:	pop    rbx
   35dad:	pop    rbp
   35dae:	ret    
   35daf:	nop
   35db0:	mov    rcx,QWORD PTR [rip+0x24eb89]        # 284940 <stderr@@GLIBC_2.2.5>
   35db7:	lea    rdi,[rip+0x2b24b]        # 61009 <_fini@@Base+0xe8b5>
   35dbe:	mov    edx,0x1a
   35dc3:	mov    esi,0x1
   35dc8:	call   d090 <fwrite@plt>
   35dcd:	call   cc80 <__errno_location@plt>
   35dd2:	mov    eax,DWORD PTR [rax]
   35dd4:	neg    eax
   35dd6:	jne    35d92 <g_str_equal@plt+0x28ad2>
   35dd8:	jmp    35cf0 <g_str_equal@plt+0x28a30>
   35ddd:	mov    rsi,QWORD PTR [rsp+0x8]
   35de2:	mov    rdi,rbp
   35de5:	call   3a4c0 <g_str_equal@plt+0x2d200>
   35dea:	mov    eax,0xffffffe8
   35def:	jmp    35d92 <g_str_equal@plt+0x28ad2>
   35df1:	call   cd30 <__stack_chk_fail@plt>
   35df6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   35e00:	push   r13
   35e02:	push   r12
   35e04:	mov    r12,0xffffffffffffffff
   35e0b:	push   rbp
   35e0c:	push   rbx
   35e0d:	sub    rsp,0xb8
   35e14:	mov    rax,QWORD PTR fs:0x28
   35e1d:	mov    QWORD PTR [rsp+0xa8],rax
   35e25:	xor    eax,eax
   35e27:	xor    eax,eax
   35e29:	test   edi,edi
   35e2b:	mov    rdi,QWORD PTR [rip+0x24ed9e]        # 284bd0 <stdout@@GLIBC_2.2.5+0x288>
   35e32:	setne  al
   35e35:	xor    esi,esi
   35e37:	sub    eax,0x1
   35e3a:	mov    DWORD PTR [rsp+0x8],eax
   35e3e:	call   cad0 <g_array_set_size@plt>
   35e43:	mov    rdi,QWORD PTR [rip+0x24ed86]        # 284bd0 <stdout@@GLIBC_2.2.5+0x288>
   35e4a:	lea    rsi,[rsp+0x8]
   35e4f:	call   44140 <g_str_equal@plt+0x36e80>
   35e54:	mov    eax,DWORD PTR [rsp+0x8]
   35e58:	cmp    eax,0xffffffff
   35e5b:	je     35e64 <g_str_equal@plt+0x28ba4>
   35e5d:	imul   r12,rax,0xf4240
   35e64:	lea    rdi,[rip+0x24ecb5]        # 284b20 <stdout@@GLIBC_2.2.5+0x1d8>
   35e6b:	call   35780 <g_str_equal@plt+0x284c0>
   35e70:	cmp    rax,r12
   35e73:	cmovbe r12,rax
   35e77:	call   cac0 <g_main_context_default@plt>
   35e7c:	mov    rdi,rax
   35e7f:	mov    r13,rax
   35e82:	call   cf20 <g_main_context_acquire@plt>
   35e87:	mov    rbx,QWORD PTR [rip+0x24c6c2]        # 282550 <g_test_config_vars+0x1190>
   35e8e:	cmp    rbx,0xffffffffffffffff
   35e92:	je     360a0 <g_str_equal@plt+0x28de0>
   35e98:	test   rbx,rbx
   35e9b:	jne    36000 <g_str_equal@plt+0x28d40>
   35ea1:	call   cac0 <g_main_context_default@plt>
   35ea6:	lea    rsi,[rip+0x24ed1b]        # 284bc8 <stdout@@GLIBC_2.2.5+0x280>
   35ead:	mov    rdi,rax
   35eb0:	mov    rbx,rax
   35eb3:	mov    DWORD PTR [rsp+0xc],0x0
   35ebb:	lea    rbp,[rsp+0xc]
   35ec0:	call   c8d0 <g_main_context_prepare@plt>
   35ec5:	mov    rdi,QWORD PTR [rip+0x24ed04]        # 284bd0 <stdout@@GLIBC_2.2.5+0x288>
   35ecc:	mov    eax,DWORD PTR [rip+0x24ecee]        # 284bc0 <stdout@@GLIBC_2.2.5+0x278>
   35ed2:	mov    esi,DWORD PTR [rdi+0x8]
   35ed5:	mov    DWORD PTR [rip+0x24ece9],esi        # 284bc4 <stdout@@GLIBC_2.2.5+0x27c>
   35edb:	jmp    35eed <g_str_equal@plt+0x28c2d>
   35edd:	nop    DWORD PTR [rax]
   35ee0:	mov    esi,DWORD PTR [rip+0x24ecde]        # 284bc4 <stdout@@GLIBC_2.2.5+0x27c>
   35ee6:	mov    rdi,QWORD PTR [rip+0x24ece3]        # 284bd0 <stdout@@GLIBC_2.2.5+0x288>
   35eed:	add    esi,eax
   35eef:	mov    DWORD PTR [rip+0x24eccb],eax        # 284bc0 <stdout@@GLIBC_2.2.5+0x278>
   35ef5:	call   cad0 <g_array_set_size@plt>
   35efa:	mov    rax,QWORD PTR [rip+0x24eccf]        # 284bd0 <stdout@@GLIBC_2.2.5+0x288>
   35f01:	movsxd rdx,DWORD PTR [rip+0x24ecbc]        # 284bc4 <stdout@@GLIBC_2.2.5+0x27c>
   35f08:	mov    rdi,rbx
   35f0b:	mov    r8d,DWORD PTR [rip+0x24ecae]        # 284bc0 <stdout@@GLIBC_2.2.5+0x278>
   35f12:	mov    esi,DWORD PTR [rip+0x24ecb0]        # 284bc8 <stdout@@GLIBC_2.2.5+0x280>
   35f18:	mov    rax,QWORD PTR [rax]
   35f1b:	lea    rcx,[rax+rdx*8]
   35f1f:	mov    rdx,rbp
   35f22:	call   c870 <g_main_context_query@plt>
   35f27:	cmp    eax,DWORD PTR [rip+0x24ec93]        # 284bc0 <stdout@@GLIBC_2.2.5+0x278>
   35f2d:	jne    35ee0 <g_str_equal@plt+0x28c20>
   35f2f:	movsxd rax,DWORD PTR [rsp+0xc]
   35f34:	test   eax,eax
   35f36:	js     35f46 <g_str_equal@plt+0x28c86>
   35f38:	imul   rax,rax,0xf4240
   35f3f:	cmp    r12,rax
   35f42:	cmova  r12,rax
   35f46:	call   43fd0 <g_str_equal@plt+0x36d10>
   35f4b:	call   44130 <g_str_equal@plt+0x36e70>
   35f50:	mov    rax,QWORD PTR [rip+0x24ec79]        # 284bd0 <stdout@@GLIBC_2.2.5+0x288>
   35f57:	mov    rdx,r12
   35f5a:	mov    esi,DWORD PTR [rax+0x8]
   35f5d:	mov    rdi,QWORD PTR [rax]
   35f60:	call   350c0 <g_str_equal@plt+0x27e00>
   35f65:	mov    ebx,eax
   35f67:	call   44120 <g_str_equal@plt+0x36e60>
   35f6c:	call   43fc0 <g_str_equal@plt+0x36d00>
   35f71:	call   cac0 <g_main_context_default@plt>
   35f76:	mov    rbp,rax
   35f79:	mov    rax,QWORD PTR [rip+0x24ec50]        # 284bd0 <stdout@@GLIBC_2.2.5+0x288>
   35f80:	movsxd rdx,DWORD PTR [rip+0x24ec3d]        # 284bc4 <stdout@@GLIBC_2.2.5+0x27c>
   35f87:	mov    ecx,DWORD PTR [rip+0x24ec33]        # 284bc0 <stdout@@GLIBC_2.2.5+0x278>
   35f8d:	mov    esi,DWORD PTR [rip+0x24ec35]        # 284bc8 <stdout@@GLIBC_2.2.5+0x280>
   35f93:	mov    rdi,rbp
   35f96:	mov    rax,QWORD PTR [rax]
   35f99:	lea    rdx,[rax+rdx*8]
   35f9d:	call   c450 <g_main_context_check@plt>
   35fa2:	test   eax,eax
   35fa4:	je     35fae <g_str_equal@plt+0x28cee>
   35fa6:	mov    rdi,rbp
   35fa9:	call   cc60 <g_main_context_dispatch@plt>
   35fae:	mov    rdi,r13
   35fb1:	shr    ebx,0x1f
   35fb4:	call   c7d0 <g_main_context_release@plt>
   35fb9:	mov    rdi,QWORD PTR [rip+0x24ec10]        # 284bd0 <stdout@@GLIBC_2.2.5+0x288>
   35fc0:	mov    esi,ebx
   35fc2:	call   44150 <g_str_equal@plt+0x36e90>
   35fc7:	call   43e50 <g_str_equal@plt+0x36b90>
   35fcc:	call   35ab0 <g_str_equal@plt+0x287f0>
   35fd1:	mov    rax,QWORD PTR [rsp+0xa8]
   35fd9:	xor    rax,QWORD PTR fs:0x28
   35fe2:	jne    360e0 <g_str_equal@plt+0x28e20>
   35fe8:	add    rsp,0xb8
   35fef:	pop    rbx
   35ff0:	pop    rbp
   35ff1:	pop    r12
   35ff3:	pop    r13
   35ff5:	ret    
   35ff6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   36000:	lea    rdx,[rsp+0x10]
   36005:	mov    esi,0x2
   3600a:	mov    edi,0x1
   3600f:	call   c660 <__fxstat64@plt>
   36014:	test   eax,eax
   36016:	jne    360e5 <g_str_equal@plt+0x28e25>
   3601c:	mov    eax,DWORD PTR [rsp+0x28]
   36020:	and    eax,0xf000
   36025:	cmp    eax,0x8000
   3602a:	jne    35ea1 <g_str_equal@plt+0x28be1>
   36030:	cmp    QWORD PTR [rsp+0x40],rbx
   36035:	jbe    35ea1 <g_str_equal@plt+0x28be1>
   3603b:	mov    rcx,QWORD PTR [rip+0x24e8fe]        # 284940 <stderr@@GLIBC_2.2.5>
   36042:	lea    rdi,[rip+0x2aee7]        # 60f30 <_fini@@Base+0xe7dc>
   36049:	mov    edx,0x7c
   3604e:	mov    esi,0x1
   36053:	call   d090 <fwrite@plt>
   36058:	mov    rdi,QWORD PTR [rip+0x24e8e1]        # 284940 <stderr@@GLIBC_2.2.5>
   3605f:	call   d270 <fflush@plt>
   36064:	lea    rdi,[rip+0x24a37]        # 5aaa2 <_fini@@Base+0x834e>
   3606b:	xor    eax,eax
   3606d:	mov    esi,0x1
   36072:	call   ca20 <open64@plt>
   36077:	test   eax,eax
   36079:	mov    ebx,eax
   3607b:	js     3610d <g_str_equal@plt+0x28e4d>
   36081:	mov    esi,0x2
   36086:	mov    edi,eax
   36088:	call   c160 <dup2@plt>
   3608d:	cmp    eax,0x2
   36090:	jne    360f9 <g_str_equal@plt+0x28e39>
   36092:	mov    edi,ebx
   36094:	call   c230 <close@plt>
   36099:	jmp    35ea1 <g_str_equal@plt+0x28be1>
   3609e:	xchg   ax,ax
   360a0:	lea    rdi,[rip+0x2af94]        # 6103b <_fini@@Base+0xe8e7>
   360a7:	call   cc40 <getenv@plt>
   360ac:	test   rax,rax
   360af:	je     360d0 <g_str_equal@plt+0x28e10>
   360b1:	xor    edx,edx
   360b3:	xor    esi,esi
   360b5:	mov    rdi,rax
   360b8:	call   d1a0 <strtoul@plt>
   360bd:	mov    rbx,rax
   360c0:	mov    QWORD PTR [rip+0x24c489],rax        # 282550 <g_test_config_vars+0x1190>
   360c7:	jmp    35e98 <g_str_equal@plt+0x28bd8>
   360cc:	nop    DWORD PTR [rax+0x0]
   360d0:	mov    QWORD PTR [rip+0x24c475],0x0        # 282550 <g_test_config_vars+0x1190>
   360db:	jmp    35ea1 <g_str_equal@plt+0x28be1>
   360e0:	call   cd30 <__stack_chk_fail@plt>
   360e5:	lea    rdi,[rip+0x2ae1c]        # 60f08 <_fini@@Base+0xe7b4>
   360ec:	call   d0d0 <perror@plt>
   360f1:	or     edi,0xffffffff
   360f4:	call   c360 <exit@plt>
   360f9:	lea    rdi,[rip+0x2aee0]        # 60fe0 <_fini@@Base+0xe88c>
   36100:	call   d0d0 <perror@plt>
   36105:	or     edi,0xffffffff
   36108:	call   c360 <exit@plt>
   3610d:	lea    rdi,[rip+0x2ae9c]        # 60fb0 <_fini@@Base+0xe85c>
   36114:	call   d0d0 <perror@plt>
   36119:	or     edi,0xffffffff
   3611c:	call   c360 <exit@plt>
   36121:	nop    DWORD PTR [rax+rax*1+0x0]
   36126:	nop    WORD PTR cs:[rax+rax*1+0x0]
   36130:	mov    rdx,rsi
   36133:	mov    rsi,rdi
   36136:	mov    rdi,QWORD PTR [rip+0x24eaa3]        # 284be0 <stdout@@GLIBC_2.2.5+0x298>
   3613d:	jmp    33bf0 <g_str_equal@plt+0x26930>
   36142:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3614c:	nop    DWORD PTR [rax+0x0]
   36150:	mov    rdi,QWORD PTR [rip+0x24ea91]        # 284be8 <stdout@@GLIBC_2.2.5+0x2a0>
   36157:	jmp    33f60 <g_str_equal@plt+0x26ca0>
   3615c:	nop    DWORD PTR [rax+0x0]
   36160:	push   rbp
   36161:	push   rbx
   36162:	sub    rsp,0x8
   36166:	mov    rbx,QWORD PTR [rip+0x24ea83]        # 284bf0 <stdout@@GLIBC_2.2.5+0x2a8>
   3616d:	test   rbx,rbx
   36170:	jne    36180 <g_str_equal@plt+0x28ec0>
   36172:	jmp    361c2 <g_str_equal@plt+0x28f02>
   36174:	nop    DWORD PTR [rax+0x0]
   36178:	test   rbp,rbp
   3617b:	mov    rbx,rbp
   3617e:	je     361c2 <g_str_equal@plt+0x28f02>
   36180:	mov    edi,DWORD PTR [rbx]
   36182:	xor    esi,esi
   36184:	mov    edx,0x1
   36189:	mov    rbp,QWORD PTR [rbx+0x8]
   3618d:	call   cc10 <waitpid@plt>
   36192:	cmp    eax,DWORD PTR [rbx]
   36194:	jne    36178 <g_str_equal@plt+0x28eb8>
   36196:	mov    rax,QWORD PTR [rbx+0x8]
   3619a:	mov    rdx,QWORD PTR [rbx+0x10]
   3619e:	test   rax,rax
   361a1:	je     361af <g_str_equal@plt+0x28eef>
   361a3:	mov    QWORD PTR [rax+0x10],rdx
   361a7:	mov    rdx,QWORD PTR [rbx+0x10]
   361ab:	mov    rax,QWORD PTR [rbx+0x8]
   361af:	mov    rdi,rbx
   361b2:	mov    QWORD PTR [rdx],rax
   361b5:	mov    rbx,rbp
   361b8:	call   d2b0 <g_free@plt>
   361bd:	test   rbp,rbp
   361c0:	jne    36180 <g_str_equal@plt+0x28ec0>
   361c2:	add    rsp,0x8
   361c6:	pop    rbx
   361c7:	pop    rbp
   361c8:	ret    
   361c9:	nop    DWORD PTR [rax+0x0]
   361d0:	lea    rdi,[rip+0x24fab1]        # 285c88 <stdout@@GLIBC_2.2.5+0x1340>
   361d7:	sub    rsp,0x8
   361db:	call   34020 <g_str_equal@plt+0x26d60>
   361e0:	mov    QWORD PTR [rip+0x24ea11],rax        # 284bf8 <stdout@@GLIBC_2.2.5+0x2b0>
   361e7:	add    rsp,0x8
   361eb:	ret    
   361ec:	nop    DWORD PTR [rax+0x0]
   361f0:	mov    rax,QWORD PTR [rip+0x24ea01]        # 284bf8 <stdout@@GLIBC_2.2.5+0x2b0>
   361f7:	test   rax,rax
   361fa:	je     36200 <g_str_equal@plt+0x28f40>
   361fc:	repz ret 
   361fe:	xchg   ax,ax
   36200:	sub    rsp,0x8
   36204:	call   361d0 <g_str_equal@plt+0x28f10>
   36209:	mov    rax,QWORD PTR [rip+0x24e9e8]        # 284bf8 <stdout@@GLIBC_2.2.5+0x2b0>
   36210:	add    rsp,0x8
   36214:	ret    
   36215:	nop
   36216:	nop    WORD PTR cs:[rax+rax*1+0x0]
   36220:	mov    rdi,QWORD PTR [rip+0x24e9d1]        # 284bf8 <stdout@@GLIBC_2.2.5+0x2b0>
   36227:	test   rdi,rdi
   3622a:	je     36238 <g_str_equal@plt+0x28f78>
   3622c:	jmp    33e70 <g_str_equal@plt+0x26bb0>
   36231:	nop    DWORD PTR [rax+0x0]
   36238:	sub    rsp,0x8
   3623c:	call   361d0 <g_str_equal@plt+0x28f10>
   36241:	mov    rdi,QWORD PTR [rip+0x24e9b0]        # 284bf8 <stdout@@GLIBC_2.2.5+0x2b0>
   36248:	add    rsp,0x8
   3624c:	jmp    33e70 <g_str_equal@plt+0x26bb0>
   36251:	nop    DWORD PTR [rax+rax*1+0x0]
   36256:	nop    WORD PTR cs:[rax+rax*1+0x0]
   36260:	push   rbx
   36261:	mov    ebx,edi
   36263:	mov    r8,rdx
   36266:	sub    rsp,0x20
   3626a:	mov    rdi,QWORD PTR [rip+0x24e987]        # 284bf8 <stdout@@GLIBC_2.2.5+0x2b0>
   36271:	test   rdi,rdi
   36274:	je     36290 <g_str_equal@plt+0x28fd0>
   36276:	sub    rsp,0x8
   3627a:	xor    r9d,r9d
   3627d:	xor    edx,edx
   3627f:	push   rcx
   36280:	mov    rcx,rsi
   36283:	mov    esi,ebx
   36285:	call   36920 <g_str_equal@plt+0x29660>
   3628a:	add    rsp,0x30
   3628e:	pop    rbx
   3628f:	ret    
   36290:	mov    QWORD PTR [rsp+0x18],rcx
   36295:	mov    QWORD PTR [rsp+0x8],rsi
   3629a:	mov    QWORD PTR [rsp+0x10],rdx
   3629f:	call   361d0 <g_str_equal@plt+0x28f10>
   362a4:	mov    rdi,QWORD PTR [rip+0x24e94d]        # 284bf8 <stdout@@GLIBC_2.2.5+0x2b0>
   362ab:	mov    rcx,QWORD PTR [rsp+0x18]
   362b0:	mov    r8,QWORD PTR [rsp+0x10]
   362b5:	mov    rsi,QWORD PTR [rsp+0x8]
   362ba:	jmp    36276 <g_str_equal@plt+0x28fb6>
   362bc:	nop    DWORD PTR [rax+0x0]
   362c0:	push   rbx
   362c1:	mov    rbx,rdi
   362c4:	mov    rcx,rsi
   362c7:	sub    rsp,0x10
   362cb:	mov    rdi,QWORD PTR [rip+0x24e926]        # 284bf8 <stdout@@GLIBC_2.2.5+0x2b0>
   362d2:	test   rdi,rdi
   362d5:	je     362f0 <g_str_equal@plt+0x29030>
   362d7:	add    rsp,0x10
   362db:	mov    rsi,rbx
   362de:	xor    r8d,r8d
   362e1:	pop    rbx
   362e2:	xor    edx,edx
   362e4:	jmp    36c80 <g_str_equal@plt+0x299c0>
   362e9:	nop    DWORD PTR [rax+0x0]
   362f0:	mov    QWORD PTR [rsp+0x8],rsi
   362f5:	call   361d0 <g_str_equal@plt+0x28f10>
   362fa:	mov    rdi,QWORD PTR [rip+0x24e8f7]        # 284bf8 <stdout@@GLIBC_2.2.5+0x2b0>
   36301:	mov    rcx,QWORD PTR [rsp+0x8]
   36306:	jmp    362d7 <g_str_equal@plt+0x29017>
   36308:	nop    DWORD PTR [rax+rax*1+0x0]
   36310:	push   rbx
   36311:	mov    ebx,edi
   36313:	sub    rsp,0xa0
   3631a:	mov    rax,QWORD PTR fs:0x28
   36323:	mov    QWORD PTR [rsp+0x98],rax
   3632b:	xor    eax,eax
   3632d:	cmp    QWORD PTR [rip+0x24e8b3],0x0        # 284be8 <stdout@@GLIBC_2.2.5+0x2a0>
   36335:	je     363c0 <g_str_equal@plt+0x29100>
   3633b:	mov    rax,QWORD PTR [rip+0x24e8ae]        # 284bf0 <stdout@@GLIBC_2.2.5+0x2a8>
   36342:	test   rax,rax
   36345:	je     3635d <g_str_equal@plt+0x2909d>
   36347:	cmp    ebx,DWORD PTR [rax]
   36349:	jne    36354 <g_str_equal@plt+0x29094>
   3634b:	jmp    363b8 <g_str_equal@plt+0x290f8>
   3634d:	nop    DWORD PTR [rax]
   36350:	cmp    DWORD PTR [rax],ebx
   36352:	je     363b8 <g_str_equal@plt+0x290f8>
   36354:	mov    rax,QWORD PTR [rax+0x8]
   36358:	test   rax,rax
   3635b:	jne    36350 <g_str_equal@plt+0x29090>
   3635d:	mov    edi,0x18
   36362:	call   ce00 <g_malloc0@plt>
   36367:	mov    rdx,QWORD PTR [rip+0x24e882]        # 284bf0 <stdout@@GLIBC_2.2.5+0x2a8>
   3636e:	mov    DWORD PTR [rax],ebx
   36370:	test   rdx,rdx
   36373:	mov    QWORD PTR [rax+0x8],rdx
   36377:	je     36381 <g_str_equal@plt+0x290c1>
   36379:	lea    rcx,[rax+0x8]
   3637d:	mov    QWORD PTR [rdx+0x10],rcx
   36381:	lea    rsi,[rip+0x24e868]        # 284bf0 <stdout@@GLIBC_2.2.5+0x2a8>
   36388:	mov    QWORD PTR [rip+0x24e861],rax        # 284bf0 <stdout@@GLIBC_2.2.5+0x2a8>
   3638f:	mov    QWORD PTR [rax+0x10],rsi
   36393:	xor    eax,eax
   36395:	mov    rcx,QWORD PTR [rsp+0x98]
   3639d:	xor    rcx,QWORD PTR fs:0x28
   363a6:	jne    36410 <g_str_equal@plt+0x29150>
   363a8:	add    rsp,0xa0
   363af:	pop    rbx
   363b0:	ret    
   363b1:	nop    DWORD PTR [rax+0x0]
   363b8:	mov    eax,0x1
   363bd:	jmp    36395 <g_str_equal@plt+0x290d5>
   363bf:	nop
   363c0:	lea    rdi,[rip+0xfffffffffffffd99]        # 36160 <g_str_equal@plt+0x28ea0>
   363c7:	xor    esi,esi
   363c9:	call   36130 <g_str_equal@plt+0x28e70>
   363ce:	mov    rsi,rsp
   363d1:	mov    QWORD PTR [rip+0x24e810],rax        # 284be8 <stdout@@GLIBC_2.2.5+0x2a0>
   363d8:	mov    ecx,0x12
   363dd:	lea    rdx,[rsi+0x8]
   363e1:	xor    eax,eax
   363e3:	mov    rdi,rdx
   363e6:	xor    edx,edx
   363e8:	rep stos QWORD PTR es:[rdi],rax
   363eb:	lea    rax,[rip+0xfffffffffffffd5e]        # 36150 <g_str_equal@plt+0x28e90>
   363f2:	mov    edi,0x11
   363f7:	mov    DWORD PTR [rsp+0x88],0x1
   36402:	mov    QWORD PTR [rsp],rax
   36406:	call   ca50 <sigaction@plt>
   3640b:	jmp    3633b <g_str_equal@plt+0x2907b>
   36410:	call   cd30 <__stack_chk_fail@plt>
   36415:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3641f:	nop
   36420:	push   r12
   36422:	push   rbp
   36423:	push   rbx
   36424:	mov    rbx,QWORD PTR [rdi+0x90]
   3642b:	test   rbx,rbx
   3642e:	je     36480 <g_str_equal@plt+0x291c0>
   36430:	mov    r12,rdi
   36433:	xor    ebp,ebp
   36435:	nop    DWORD PTR [rax]
   36438:	mov    eax,DWORD PTR [rbx+0x30]
   3643b:	test   eax,eax
   3643d:	jne    36459 <g_str_equal@plt+0x29199>
   3643f:	mov    rax,QWORD PTR [rbx+0x18]
   36443:	test   rax,rax
   36446:	je     36459 <g_str_equal@plt+0x29199>
   36448:	cmp    BYTE PTR [rbx+0x40],0x0
   3644c:	jne    36470 <g_str_equal@plt+0x291b0>
   3644e:	mov    rdi,QWORD PTR [rbx+0x38]
   36452:	call   rax
   36454:	test   al,al
   36456:	cmovne ebp,eax
   36459:	mov    rbx,QWORD PTR [rbx+0x48]
   3645d:	test   rbx,rbx
   36460:	jne    36438 <g_str_equal@plt+0x29178>
   36462:	mov    eax,ebp
   36464:	pop    rbx
   36465:	pop    rbp
   36466:	pop    r12
   36468:	ret    
   36469:	nop    DWORD PTR [rax+0x0]
   36470:	mov    edx,DWORD PTR [r12+0xf0]
   36478:	test   edx,edx
   3647a:	je     3644e <g_str_equal@plt+0x2918e>
   3647c:	jmp    36459 <g_str_equal@plt+0x29199>
   3647e:	xchg   ax,ax
   36480:	xor    ebp,ebp
   36482:	mov    eax,ebp
   36484:	pop    rbx
   36485:	pop    rbp
   36486:	pop    r12
   36488:	ret    
   36489:	nop    DWORD PTR [rax+0x0]
   36490:	push   r14
   36492:	push   r13
   36494:	push   r12
   36496:	push   rbp
   36497:	push   rbx
   36498:	sub    rsp,0x10
   3649c:	mov    rbx,QWORD PTR [rdi+0x90]
   364a3:	xor    r12d,r12d
   364a6:	test   rbx,rbx
   364a9:	mov    rbp,rdi
   364ac:	lea    r13,[rdi+0x9c]
   364b3:	jne    36504 <g_str_equal@plt+0x29244>
   364b5:	jmp    365a1 <g_str_equal@plt+0x292e1>
   364ba:	nop    WORD PTR [rax+rax*1+0x0]
   364c0:	mov    rdi,r13
   364c3:	call   51d90 <g_str_equal@plt+0x44ad0>
   364c8:	test   al,al
   364ca:	je     364f8 <g_str_equal@plt+0x29238>
   364cc:	mov    rax,QWORD PTR [rbx+0x48]
   364d0:	mov    rdx,QWORD PTR [rbx+0x50]
   364d4:	test   rax,rax
   364d7:	je     364e5 <g_str_equal@plt+0x29225>
   364d9:	mov    QWORD PTR [rax+0x50],rdx
   364dd:	mov    rdx,QWORD PTR [rbx+0x50]
   364e1:	mov    rax,QWORD PTR [rbx+0x48]
   364e5:	mov    rdi,rbx
   364e8:	mov    QWORD PTR [rdx],rax
   364eb:	call   d2b0 <g_free@plt>
   364f0:	mov    rdi,r13
   364f3:	call   51ed0 <g_str_equal@plt+0x44c10>
   364f8:	test   r14,r14
   364fb:	mov    rbx,r14
   364fe:	je     365a1 <g_str_equal@plt+0x292e1>
   36504:	mov    r14,QWORD PTR [rbx+0x48]
   36508:	mov    esi,DWORD PTR [rbx+0x30]
   3650b:	xor    ecx,ecx
   3650d:	movzx  eax,WORD PTR [rbx+0x6]
   36511:	movzx  edx,WORD PTR [rbx+0x4]
   36515:	mov    WORD PTR [rbx+0x6],cx
   36519:	test   esi,esi
   3651b:	jne    364c0 <g_str_equal@plt+0x29200>
   3651d:	and    eax,edx
   3651f:	test   al,0x19
   36521:	je     36567 <g_str_equal@plt+0x292a7>
   36523:	cmp    BYTE PTR [rbx+0x40],0x0
   36527:	jne    365b8 <g_str_equal@plt+0x292f8>
   3652d:	mov    rdx,QWORD PTR [rbx+0x8]
   36531:	test   rdx,rdx
   36534:	je     365f8 <g_str_equal@plt+0x29338>
   3653a:	mov    DWORD PTR [rsp+0xc],eax
   3653e:	mov    rdi,QWORD PTR [rbx+0x38]
   36542:	call   rdx
   36544:	lea    rdx,[rbp+0xac]
   3654b:	cmp    QWORD PTR [rbx+0x38],rdx
   3654f:	mov    eax,DWORD PTR [rsp+0xc]
   36553:	mov    edx,0x1
   36558:	cmovne r12d,edx
   3655c:	mov    edi,DWORD PTR [rbx+0x30]
   3655f:	test   edi,edi
   36561:	jne    364c0 <g_str_equal@plt+0x29200>
   36567:	test   al,0xc
   36569:	je     364f8 <g_str_equal@plt+0x29238>
   3656b:	cmp    BYTE PTR [rbx+0x40],0x0
   3656f:	jne    365d8 <g_str_equal@plt+0x29318>
   36571:	mov    rax,QWORD PTR [rbx+0x10]
   36575:	test   rax,rax
   36578:	je     364f8 <g_str_equal@plt+0x29238>
   3657e:	mov    rdi,QWORD PTR [rbx+0x38]
   36582:	mov    r12d,0x1
   36588:	call   rax
   3658a:	mov    eax,DWORD PTR [rbx+0x30]
   3658d:	test   eax,eax
   3658f:	jne    364c0 <g_str_equal@plt+0x29200>
   36595:	test   r14,r14
   36598:	mov    rbx,r14
   3659b:	jne    36504 <g_str_equal@plt+0x29244>
   365a1:	add    rsp,0x10
   365a5:	mov    eax,r12d
   365a8:	pop    rbx
   365a9:	pop    rbp
   365aa:	pop    r12
   365ac:	pop    r13
   365ae:	pop    r14
   365b0:	ret    
   365b1:	nop    DWORD PTR [rax+0x0]
   365b8:	mov    edx,DWORD PTR [rbp+0xf0]
   365be:	test   edx,edx
   365c0:	jne    3655c <g_str_equal@plt+0x2929c>
   365c2:	mov    rdx,QWORD PTR [rbx+0x8]
   365c6:	test   rdx,rdx
   365c9:	jne    3653a <g_str_equal@plt+0x2927a>
   365cf:	jmp    3655c <g_str_equal@plt+0x2929c>
   365d1:	nop    DWORD PTR [rax+0x0]
   365d8:	mov    eax,DWORD PTR [rbp+0xf0]
   365de:	test   eax,eax
   365e0:	jne    365f0 <g_str_equal@plt+0x29330>
   365e2:	mov    rax,QWORD PTR [rbx+0x10]
   365e6:	test   rax,rax
   365e9:	jne    3657e <g_str_equal@plt+0x292be>
   365eb:	nop    DWORD PTR [rax+rax*1+0x0]
   365f0:	mov    eax,DWORD PTR [rbx+0x30]
   365f3:	jmp    3658d <g_str_equal@plt+0x292cd>
   365f5:	nop    DWORD PTR [rax]
   365f8:	test   al,0xc
   365fa:	je     364f8 <g_str_equal@plt+0x29238>
   36600:	jmp    36571 <g_str_equal@plt+0x292b1>
   36605:	nop
   36606:	nop    WORD PTR cs:[rax+rax*1+0x0]
   36610:	push   rbx
   36611:	mov    esi,DWORD PTR fs:0xfffffffffffffe84
   36619:	mov    rbx,rdi
   3661c:	cmp    esi,DWORD PTR fs:0xfffffffffffffe80
   36624:	je     36668 <g_str_equal@plt+0x293a8>
   36626:	mov    rax,QWORD PTR fs:0xfffffffffffffe88
   3662f:	mov    edx,esi
   36631:	add    esi,0x1
   36634:	mov    QWORD PTR [rax+rdx*8],rbx
   36638:	mov    rax,QWORD PTR fs:0xfffffffffffffe90
   36641:	mov    ecx,DWORD PTR [rbx]
   36643:	mov    DWORD PTR fs:0xfffffffffffffe84,esi
   3664b:	lea    rax,[rax+rdx*8]
   3664f:	movzx  edx,WORD PTR [rbx+0x4]
   36653:	mov    QWORD PTR [rax],0x0
   3665a:	mov    DWORD PTR [rax],ecx
   3665c:	mov    WORD PTR [rax+0x4],dx
   36660:	pop    rbx
   36661:	ret    
   36662:	nop    WORD PTR [rax+rax*1+0x0]
   36668:	test   esi,esi
   3666a:	je     366f8 <g_str_equal@plt+0x29438>
   36670:	js     366d0 <g_str_equal@plt+0x29410>
   36672:	add    esi,esi
   36674:	mov    DWORD PTR fs:0xfffffffffffffe80,esi
   3667c:	mov    rdi,QWORD PTR fs:0xfffffffffffffe90
   36685:	mov    edx,0x8
   3668a:	call   c480 <g_realloc_n@plt>
   3668f:	mov    esi,DWORD PTR fs:0xfffffffffffffe80
   36697:	mov    rdi,QWORD PTR fs:0xfffffffffffffe88
   366a0:	mov    edx,0x8
   366a5:	mov    QWORD PTR fs:0xfffffffffffffe90,rax
   366ae:	call   c480 <g_realloc_n@plt>
   366b3:	mov    esi,DWORD PTR fs:0xfffffffffffffe84
   366bb:	mov    QWORD PTR fs:0xfffffffffffffe88,rax
   366c4:	jmp    3662f <g_str_equal@plt+0x2936f>
   366c9:	nop    DWORD PTR [rax+0x0]
   366d0:	lea    r8,[rip+0x2a97b]        # 61052 <_fini@@Base+0xe8fe>
   366d7:	lea    rcx,[rip+0x2aba2]        # 61280 <_fini@@Base+0xeb2c>
   366de:	lea    rsi,[rip+0x2a9eb]        # 610d0 <_fini@@Base+0xe97c>
   366e5:	mov    edx,0x1db
   366ea:	xor    edi,edi
   366ec:	call   c6b0 <g_assertion_message_expr@plt>
   366f1:	nop    DWORD PTR [rax+0x0]
   366f8:	mov    rdi,QWORD PTR fs:0x0
   36701:	lea    rax,[rip+0xa8]        # 367b0 <g_str_equal@plt+0x294f0>
   36708:	mov    QWORD PTR fs:0xfffffffffffffe68,rax
   36711:	add    rdi,0xfffffffffffffe68
   36718:	call   396f0 <g_str_equal@plt+0x2c430>
   3671d:	mov    DWORD PTR fs:0xfffffffffffffe80,0x8
   36729:	mov    esi,0x8
   3672e:	jmp    3667c <g_str_equal@plt+0x293bc>
   36733:	nop    DWORD PTR [rax]
   36736:	nop    WORD PTR cs:[rax+rax*1+0x0]
   36740:	push   r12
   36742:	lea    r12,[rdi+0x9c]
   36749:	push   rbp
   3674a:	push   rbx
   3674b:	mov    BYTE PTR [rdi+0x118],sil
   36752:	mov    rbx,rdi
   36755:	mov    rdi,r12
   36758:	mov    ebp,esi
   3675a:	call   51c00 <g_str_equal@plt+0x44940>
   3675f:	mov    rbx,QWORD PTR [rbx+0x90]
   36766:	test   rbx,rbx
   36769:	je     36797 <g_str_equal@plt+0x294d7>
   3676b:	nop    DWORD PTR [rax+rax*1+0x0]
   36770:	mov    eax,DWORD PTR [rbx+0x30]
   36773:	test   eax,eax
   36775:	jne    3678e <g_str_equal@plt+0x294ce>
   36777:	test   bpl,bpl
   3677a:	mov    rax,QWORD PTR [rbx+0x28]
   3677e:	cmovne rax,QWORD PTR [rbx+0x20]
   36783:	test   rax,rax
   36786:	je     3678e <g_str_equal@plt+0x294ce>
   36788:	mov    rdi,QWORD PTR [rbx+0x38]
   3678c:	call   rax
   3678e:	mov    rbx,QWORD PTR [rbx+0x48]
   36792:	test   rbx,rbx
   36795:	jne    36770 <g_str_equal@plt+0x294b0>
   36797:	pop    rbx
   36798:	mov    rdi,r12
   3679b:	pop    rbp
   3679c:	pop    r12
   3679e:	jmp    51ca0 <g_str_equal@plt+0x449e0>
   367a3:	nop    DWORD PTR [rax]
   367a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   367b0:	sub    rsp,0x8
   367b4:	mov    eax,DWORD PTR fs:0xfffffffffffffe84
   367bc:	test   eax,eax
   367be:	je     367e8 <g_str_equal@plt+0x29528>
   367c0:	lea    r8,[rip+0x2a89d]        # 61064 <_fini@@Base+0xe910>
   367c7:	lea    rcx,[rip+0x2aaa2]        # 61270 <_fini@@Base+0xeb1c>
   367ce:	lea    rsi,[rip+0x2a8fb]        # 610d0 <_fini@@Base+0xe97c>
   367d5:	mov    edx,0x1cd
   367da:	xor    edi,edi
   367dc:	call   c6b0 <g_assertion_message_expr@plt>
   367e1:	nop    DWORD PTR [rax+0x0]
   367e8:	mov    rdi,QWORD PTR fs:0xfffffffffffffe90
   367f1:	call   d2b0 <g_free@plt>
   367f6:	mov    rdi,QWORD PTR fs:0xfffffffffffffe88
   367ff:	call   d2b0 <g_free@plt>
   36804:	mov    DWORD PTR fs:0xfffffffffffffe80,0x0
   36810:	add    rsp,0x8
   36814:	ret    
   36815:	nop
   36816:	nop    WORD PTR cs:[rax+rax*1+0x0]
   36820:	push   rbx
   36821:	mov    rbx,rdi
   36824:	sub    rsp,0x620
   3682b:	mov    rdi,QWORD PTR fs:0x28
   36834:	mov    QWORD PTR [rsp+0x618],rdi
   3683c:	xor    edi,edi
   3683e:	cmp    edx,0x1
   36841:	jne    368fc <g_str_equal@plt+0x2963c>
   36847:	mov    edi,DWORD PTR [rsi]
   36849:	cmp    edi,DWORD PTR [rbx]
   3684b:	mov    rax,rsi
   3684e:	jne    368dd <g_str_equal@plt+0x2961d>
   36854:	test   rcx,rcx
   36857:	jg     368b8 <g_str_equal@plt+0x295f8>
   36859:	lea    rbx,[rsp+0x10]
   3685e:	mov    edx,0x80
   36863:	mov    rsi,rbx
   36866:	call   cda0 <epoll_wait@plt>
   3686b:	test   eax,eax
   3686d:	jle    36897 <g_str_equal@plt+0x295d7>
   3686f:	lea    edx,[rax-0x1]
   36872:	mov    rsi,rbx
   36875:	lea    rdx,[rdx+rdx*2]
   36879:	lea    rdi,[rbx+rdx*4+0xc]
   3687e:	xchg   ax,ax
   36880:	movzx  edx,WORD PTR [rsi]
   36883:	mov    rcx,QWORD PTR [rsi+0x4]
   36887:	add    rsi,0xc
   3688b:	and    edx,0x1d
   3688e:	cmp    rsi,rdi
   36891:	mov    WORD PTR [rcx+0x6],dx
   36895:	jne    36880 <g_str_equal@plt+0x295c0>
   36897:	mov    rbx,QWORD PTR [rsp+0x618]
   3689f:	xor    rbx,QWORD PTR fs:0x28
   368a8:	jne    3691b <g_str_equal@plt+0x2965b>
   368aa:	add    rsp,0x620
   368b1:	pop    rbx
   368b2:	ret    
   368b3:	nop    DWORD PTR [rax+rax*1+0x0]
   368b8:	mov    rdx,rcx
   368bb:	mov    esi,0x1
   368c0:	mov    rdi,rax
   368c3:	mov    QWORD PTR [rsp+0x8],rcx
   368c8:	call   350c0 <g_str_equal@plt+0x27e00>
   368cd:	test   eax,eax
   368cf:	mov    rcx,QWORD PTR [rsp+0x8]
   368d4:	jle    36897 <g_str_equal@plt+0x295d7>
   368d6:	mov    edi,DWORD PTR [rbx]
   368d8:	jmp    36859 <g_str_equal@plt+0x29599>
   368dd:	lea    rcx,[rip+0x2a974]        # 61258 <_fini@@Base+0xeb04>
   368e4:	lea    rsi,[rip+0x2a7e5]        # 610d0 <_fini@@Base+0xe97c>
   368eb:	lea    rdi,[rip+0x2a786]        # 61078 <_fini@@Base+0xe924>
   368f2:	mov    edx,0x74
   368f7:	call   c390 <__assert_fail@plt>
   368fc:	lea    rcx,[rip+0x2a955]        # 61258 <_fini@@Base+0xeb04>
   36903:	lea    rsi,[rip+0x2a7c6]        # 610d0 <_fini@@Base+0xe97c>
   3690a:	lea    rdi,[rip+0x2a75d]        # 6106e <_fini@@Base+0xe91a>
   36911:	mov    edx,0x73
   36916:	call   c390 <__assert_fail@plt>
   3691b:	call   cd30 <__stack_chk_fail@plt>
   36920:	push   r15
   36922:	push   r14
   36924:	mov    r15d,edx
   36927:	push   r13
   36929:	lea    r13,[rdi+0x9c]
   36930:	push   r12
   36932:	push   rbp
   36933:	push   rbx
   36934:	mov    r12,rdi
   36937:	mov    rdi,r13
   3693a:	mov    ebp,esi
   3693c:	sub    rsp,0x48
   36940:	mov    QWORD PTR [rsp+0x18],rcx
   36945:	mov    QWORD PTR [rsp+0x10],r8
   3694a:	mov    QWORD PTR [rsp+0x8],r9
   3694f:	mov    r14,QWORD PTR [rsp+0x80]
   36957:	mov    rax,QWORD PTR fs:0x28
   36960:	mov    QWORD PTR [rsp+0x38],rax
   36965:	xor    eax,eax
   36967:	call   51e40 <g_str_equal@plt+0x44b80>
   3696c:	mov    rbx,QWORD PTR [r12+0x90]
   36974:	mov    r9,QWORD PTR [rsp+0x8]
   36979:	mov    r8,QWORD PTR [rsp+0x10]
   3697e:	mov    rcx,QWORD PTR [rsp+0x18]
   36983:	test   rbx,rbx
   36986:	jne    3699d <g_str_equal@plt+0x296dd>
   36988:	jmp    36a50 <g_str_equal@plt+0x29790>
   3698d:	nop    DWORD PTR [rax]
   36990:	mov    rbx,QWORD PTR [rbx+0x48]
   36994:	test   rbx,rbx
   36997:	je     36a50 <g_str_equal@plt+0x29790>
   3699d:	cmp    ebp,DWORD PTR [rbx]
   3699f:	jne    36990 <g_str_equal@plt+0x296d0>
   369a1:	mov    edx,DWORD PTR [rbx+0x30]
   369a4:	test   edx,edx
   369a6:	jne    36990 <g_str_equal@plt+0x296d0>
   369a8:	test   rcx,rcx
   369ab:	sete   bpl
   369af:	test   r8,r8
   369b2:	sete   al
   369b5:	and    bpl,al
   369b8:	jne    36bad <g_str_equal@plt+0x298ed>
   369be:	xor    eax,eax
   369c0:	test   r9,r9
   369c3:	sete   al
   369c6:	xor    edx,edx
   369c8:	cmp    QWORD PTR [rbx+0x18],0x0
   369cd:	sete   dl
   369d0:	xor    edi,edi
   369d2:	sub    eax,edx
   369d4:	add    DWORD PTR [r12+0xf4],eax
   369dc:	cmp    rcx,0x1
   369e0:	mov    QWORD PTR [rbx+0x8],rcx
   369e4:	mov    QWORD PTR [rbx+0x10],r8
   369e8:	sbb    eax,eax
   369ea:	mov    QWORD PTR [rbx+0x18],r9
   369ee:	mov    QWORD PTR [rbx+0x38],r14
   369f2:	not    eax
   369f4:	mov    BYTE PTR [rbx+0x40],r15b
   369f8:	and    eax,0x19
   369fb:	mov    edx,eax
   369fd:	or     edx,0xc
   36a00:	test   r8,r8
   36a03:	cmovne eax,edx
   36a06:	mov    WORD PTR [rbx+0x4],ax
   36a0a:	cmp    BYTE PTR [r12+0x120],0x0
   36a13:	jne    36b08 <g_str_equal@plt+0x29848>
   36a19:	mov    rdi,r13
   36a1c:	call   52020 <g_str_equal@plt+0x44d60>
   36a21:	mov    rdi,r12
   36a24:	call   33eb0 <g_str_equal@plt+0x26bf0>
   36a29:	mov    rax,QWORD PTR [rsp+0x38]
   36a2e:	xor    rax,QWORD PTR fs:0x28
   36a37:	jne    36c2e <g_str_equal@plt+0x2996e>
   36a3d:	add    rsp,0x48
   36a41:	pop    rbx
   36a42:	pop    rbp
   36a43:	pop    r12
   36a45:	pop    r13
   36a47:	pop    r14
   36a49:	pop    r15
   36a4b:	ret    
   36a4c:	nop    DWORD PTR [rax+0x0]
   36a50:	test   rcx,rcx
   36a53:	jne    36a63 <g_str_equal@plt+0x297a3>
   36a55:	test   r8,r8
   36a58:	jne    36a63 <g_str_equal@plt+0x297a3>
   36a5a:	test   r9,r9
   36a5d:	je     36ba0 <g_str_equal@plt+0x298e0>
   36a63:	mov    edi,0x58
   36a68:	mov    QWORD PTR [rsp+0x18],r9
   36a6d:	mov    QWORD PTR [rsp+0x10],r8
   36a72:	mov    QWORD PTR [rsp+0x8],rcx
   36a77:	call   ce00 <g_malloc0@plt>
   36a7c:	mov    rbx,rax
   36a7f:	mov    DWORD PTR [rax],ebp
   36a81:	lea    rax,[r12+0x90]
   36a89:	mov    QWORD PTR [rbx+0x50],rax
   36a8d:	mov    rax,QWORD PTR [r12+0x90]
   36a95:	mov    QWORD PTR [rbx+0x48],rax
   36a99:	mov    QWORD PTR [r12+0x90],rbx
   36aa1:	mov    rax,QWORD PTR [rbx+0x48]
   36aa5:	mov    rcx,QWORD PTR [rsp+0x8]
   36aaa:	mov    r8,QWORD PTR [rsp+0x10]
   36aaf:	mov    r9,QWORD PTR [rsp+0x18]
   36ab4:	test   rax,rax
   36ab7:	je     36ac1 <g_str_equal@plt+0x29801>
   36ab9:	lea    rdx,[rbx+0x48]
   36abd:	mov    QWORD PTR [rax+0x50],rdx
   36ac1:	mov    rdi,r12
   36ac4:	mov    rsi,rbx
   36ac7:	mov    QWORD PTR [rsp+0x18],r9
   36acc:	mov    QWORD PTR [rsp+0x10],r8
   36ad1:	mov    QWORD PTR [rsp+0x8],rcx
   36ad6:	call   cc50 <g_source_add_poll@plt>
   36adb:	mov    r9,QWORD PTR [rsp+0x18]
   36ae0:	xor    eax,eax
   36ae2:	mov    edi,0x1
   36ae7:	mov    rcx,QWORD PTR [rsp+0x8]
   36aec:	mov    r8,QWORD PTR [rsp+0x10]
   36af1:	test   r9,r9
   36af4:	sete   al
   36af7:	add    DWORD PTR [r12+0xf4],eax
   36aff:	jmp    369dc <g_str_equal@plt+0x2971c>
   36b04:	nop    DWORD PTR [rax+0x0]
   36b08:	xor    ebp,ebp
   36b0a:	movzx  eax,WORD PTR [rbx+0x4]
   36b0e:	mov    esi,0x2
   36b13:	test   ax,ax
   36b16:	je     36b30 <g_str_equal@plt+0x29870>
   36b18:	and    eax,0x1d
   36b1b:	cmp    dil,0x1
   36b1f:	mov    QWORD PTR [rsp+0x30],rbx
   36b24:	sbb    esi,esi
   36b26:	mov    DWORD PTR [rsp+0x2c],eax
   36b2a:	and    esi,0x2
   36b2d:	add    esi,0x1
   36b30:	mov    edi,DWORD PTR [r12+0x11c]
   36b38:	mov    edx,DWORD PTR [rbx]
   36b3a:	lea    rcx,[rsp+0x2c]
   36b3f:	call   ca30 <epoll_ctl@plt>
   36b44:	test   eax,eax
   36b46:	je     36b5c <g_str_equal@plt+0x2989c>
   36b48:	cmp    BYTE PTR [r12+0x121],0x0
   36b51:	mov    BYTE PTR [r12+0x120],0x0
   36b5a:	jne    36b88 <g_str_equal@plt+0x298c8>
   36b5c:	mov    rdi,r13
   36b5f:	call   52020 <g_str_equal@plt+0x44d60>
   36b64:	mov    rdi,r12
   36b67:	call   33eb0 <g_str_equal@plt+0x26bf0>
   36b6c:	test   bpl,bpl
   36b6f:	je     36a29 <g_str_equal@plt+0x29769>
   36b75:	mov    rdi,rbx
   36b78:	call   d2b0 <g_free@plt>
   36b7d:	jmp    36a29 <g_str_equal@plt+0x29769>
   36b82:	nop    WORD PTR [rax+rax*1+0x0]
   36b88:	mov    edi,DWORD PTR [r12+0x11c]
   36b90:	mov    BYTE PTR [r12+0x121],0x0
   36b99:	call   c230 <close@plt>
   36b9e:	jmp    36b5c <g_str_equal@plt+0x2989c>
   36ba0:	mov    rdi,r13
   36ba3:	call   52020 <g_str_equal@plt+0x44d60>
   36ba8:	jmp    36a29 <g_str_equal@plt+0x29769>
   36bad:	test   r9,r9
   36bb0:	jne    369be <g_str_equal@plt+0x296fe>
   36bb6:	mov    rdi,r12
   36bb9:	call   cf90 <g_source_is_destroyed@plt>
   36bbe:	test   eax,eax
   36bc0:	jne    36bcd <g_str_equal@plt+0x2990d>
   36bc2:	mov    rsi,rbx
   36bc5:	mov    rdi,r12
   36bc8:	call   c760 <g_source_remove_poll@plt>
   36bcd:	mov    rdi,r13
   36bd0:	call   52170 <g_str_equal@plt+0x44eb0>
   36bd5:	test   eax,eax
   36bd7:	je     36c05 <g_str_equal@plt+0x29945>
   36bd9:	xor    eax,eax
   36bdb:	mov    DWORD PTR [rbx+0x30],0x1
   36be2:	xor    ebp,ebp
   36be4:	mov    WORD PTR [rbx+0x6],ax
   36be8:	cmp    QWORD PTR [rbx+0x18],0x0
   36bed:	je     36c23 <g_str_equal@plt+0x29963>
   36bef:	xor    edi,edi
   36bf1:	cmp    BYTE PTR [r12+0x120],0x0
   36bfa:	je     36b5c <g_str_equal@plt+0x2989c>
   36c00:	jmp    36b0a <g_str_equal@plt+0x2984a>
   36c05:	mov    rax,QWORD PTR [rbx+0x48]
   36c09:	mov    rdx,QWORD PTR [rbx+0x50]
   36c0d:	test   rax,rax
   36c10:	je     36c1e <g_str_equal@plt+0x2995e>
   36c12:	mov    QWORD PTR [rax+0x50],rdx
   36c16:	mov    rdx,QWORD PTR [rbx+0x50]
   36c1a:	mov    rax,QWORD PTR [rbx+0x48]
   36c1e:	mov    QWORD PTR [rdx],rax
   36c21:	jmp    36be8 <g_str_equal@plt+0x29928>
   36c23:	sub    DWORD PTR [r12+0xf4],0x1
   36c2c:	jmp    36bef <g_str_equal@plt+0x2992f>
   36c2e:	call   cd30 <__stack_chk_fail@plt>
   36c33:	nop    DWORD PTR [rax]
   36c36:	nop    WORD PTR cs:[rax+rax*1+0x0]
   36c40:	mov    rax,QWORD PTR [rdi+0x90]
   36c47:	test   rax,rax
   36c4a:	jne    36c59 <g_str_equal@plt+0x29999>
   36c4c:	jmp    36c6c <g_str_equal@plt+0x299ac>
   36c4e:	xchg   ax,ax
   36c50:	mov    rax,QWORD PTR [rax+0x48]
   36c54:	test   rax,rax
   36c57:	je     36c70 <g_str_equal@plt+0x299b0>
   36c59:	cmp    esi,DWORD PTR [rax]
   36c5b:	jne    36c50 <g_str_equal@plt+0x29990>
   36c5d:	mov    edi,DWORD PTR [rax+0x30]
   36c60:	test   edi,edi
   36c62:	jne    36c50 <g_str_equal@plt+0x29990>
   36c64:	mov    QWORD PTR [rax+0x20],rdx
   36c68:	mov    QWORD PTR [rax+0x28],rcx
   36c6c:	repz ret 
   36c6e:	xchg   ax,ax
   36c70:	repz ret 
   36c72:	nop    DWORD PTR [rax+0x0]
   36c76:	nop    WORD PTR cs:[rax+rax*1+0x0]
   36c80:	push   r14
   36c82:	push   r13
   36c84:	mov    r14,r8
   36c87:	push   r12
   36c89:	push   rbp
   36c8a:	mov    r12,rdi
   36c8d:	push   rbx
   36c8e:	mov    rdi,rsi
   36c91:	mov    rbp,rsi
   36c94:	mov    ebx,edx
   36c96:	mov    r13,rcx
   36c99:	call   37a00 <g_str_equal@plt+0x2a740>
   36c9e:	sub    rsp,0x8
   36ca2:	movzx  edx,bl
   36ca5:	mov    r9,r14
   36ca8:	push   rbp
   36ca9:	mov    rcx,r13
   36cac:	mov    esi,eax
   36cae:	mov    rdi,r12
   36cb1:	xor    r8d,r8d
   36cb4:	call   36920 <g_str_equal@plt+0x29660>
   36cb9:	pop    rax
   36cba:	pop    rdx
   36cbb:	pop    rbx
   36cbc:	pop    rbp
   36cbd:	pop    r12
   36cbf:	pop    r13
   36cc1:	pop    r14
   36cc3:	ret    
   36cc4:	xchg   ax,ax
   36cc6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   36cd0:	push   r12
   36cd2:	push   rbp
   36cd3:	mov    r12,rdx
   36cd6:	push   rbx
   36cd7:	mov    rbx,rdi
   36cda:	mov    rdi,rsi
   36cdd:	mov    rbp,rcx
   36ce0:	call   37a00 <g_str_equal@plt+0x2a740>
   36ce5:	mov    rsi,QWORD PTR [rbx+0x90]
   36cec:	test   rsi,rsi
   36cef:	jne    36d01 <g_str_equal@plt+0x29a41>
   36cf1:	jmp    36d14 <g_str_equal@plt+0x29a54>
   36cf3:	nop    DWORD PTR [rax+rax*1+0x0]
   36cf8:	mov    rsi,QWORD PTR [rsi+0x48]
   36cfc:	test   rsi,rsi
   36cff:	je     36d14 <g_str_equal@plt+0x29a54>
   36d01:	cmp    eax,DWORD PTR [rsi]
   36d03:	jne    36cf8 <g_str_equal@plt+0x29a38>
   36d05:	mov    edx,DWORD PTR [rsi+0x30]
   36d08:	test   edx,edx
   36d0a:	jne    36cf8 <g_str_equal@plt+0x29a38>
   36d0c:	mov    QWORD PTR [rsi+0x20],r12
   36d10:	mov    QWORD PTR [rsi+0x28],rbp
   36d14:	pop    rbx
   36d15:	pop    rbp
   36d16:	pop    r12
   36d18:	ret    
   36d19:	nop    DWORD PTR [rax+0x0]
   36d20:	cmp    BYTE PTR [rdi+0x118],0x0
   36d27:	jne    36d30 <g_str_equal@plt+0x29a70>
   36d29:	xor    eax,eax
   36d2b:	ret    
   36d2c:	nop    DWORD PTR [rax+0x0]
   36d30:	sub    rsp,0x8
   36d34:	xor    esi,esi
   36d36:	call   36740 <g_str_equal@plt+0x29480>
   36d3b:	xor    eax,eax
   36d3d:	add    rsp,0x8
   36d41:	ret    
   36d42:	nop    DWORD PTR [rax+0x0]
   36d46:	nop    WORD PTR cs:[rax+rax*1+0x0]
   36d50:	push   rbp
   36d51:	lea    rbp,[rdi+0x9c]
   36d58:	push   rbx
   36d59:	mov    rbx,rdi
   36d5c:	sub    rsp,0x8
   36d60:	mov    rdi,rbp
   36d63:	call   51c00 <g_str_equal@plt+0x44940>
   36d68:	mov    rax,QWORD PTR [rbx+0x90]
   36d6f:	test   rax,rax
   36d72:	je     36de9 <g_str_equal@plt+0x29b29>
   36d74:	nop    DWORD PTR [rax+0x0]
   36d78:	movzx  edx,WORD PTR [rax+0x6]
   36d7c:	and    dx,WORD PTR [rax+0x4]
   36d80:	test   dl,0x19
   36d83:	je     36dc0 <g_str_equal@plt+0x29b00>
   36d85:	cmp    QWORD PTR [rax+0x8],0x0
   36d8a:	je     36dc0 <g_str_equal@plt+0x29b00>
   36d8c:	cmp    BYTE PTR [rax+0x40],0x0
   36d90:	jne    36db0 <g_str_equal@plt+0x29af0>
   36d92:	mov    ebx,0x1
   36d97:	mov    rdi,rbp
   36d9a:	call   51ca0 <g_str_equal@plt+0x449e0>
   36d9f:	add    rsp,0x8
   36da3:	mov    eax,ebx
   36da5:	pop    rbx
   36da6:	pop    rbp
   36da7:	ret    
   36da8:	nop    DWORD PTR [rax+rax*1+0x0]
   36db0:	mov    ecx,DWORD PTR [rbx+0xf0]
   36db6:	test   ecx,ecx
   36db8:	je     36d92 <g_str_equal@plt+0x29ad2>
   36dba:	nop    WORD PTR [rax+rax*1+0x0]
   36dc0:	and    edx,0xc
   36dc3:	je     36de0 <g_str_equal@plt+0x29b20>
   36dc5:	cmp    QWORD PTR [rax+0x10],0x0
   36dca:	je     36de0 <g_str_equal@plt+0x29b20>
   36dcc:	cmp    BYTE PTR [rax+0x40],0x0
   36dd0:	je     36d92 <g_str_equal@plt+0x29ad2>
   36dd2:	mov    edx,DWORD PTR [rbx+0xf0]
   36dd8:	test   edx,edx
   36dda:	je     36d92 <g_str_equal@plt+0x29ad2>
   36ddc:	nop    DWORD PTR [rax+0x0]
   36de0:	mov    rax,QWORD PTR [rax+0x48]
   36de4:	test   rax,rax
   36de7:	jne    36d78 <g_str_equal@plt+0x29ab8>
   36de9:	xor    ebx,ebx
   36deb:	jmp    36d97 <g_str_equal@plt+0x29ad7>
   36ded:	nop    DWORD PTR [rax]
   36df0:	push   rbp
   36df1:	lea    rbp,[rdi+0x9c]
   36df8:	push   rbx
   36df9:	mov    rbx,rdi
   36dfc:	sub    rsp,0x8
   36e00:	mov    rdi,rbp
   36e03:	call   51c00 <g_str_equal@plt+0x44940>
   36e08:	mov    rdi,rbx
   36e0b:	call   33c80 <g_str_equal@plt+0x269c0>
   36e10:	mov    rdi,rbx
   36e13:	call   36490 <g_str_equal@plt+0x291d0>
   36e18:	mov    rdi,rbp
   36e1b:	call   51ca0 <g_str_equal@plt+0x449e0>
   36e20:	add    rsp,0x8
   36e24:	lea    rdi,[rbx+0xd0]
   36e2b:	pop    rbx
   36e2c:	pop    rbp
   36e2d:	jmp    35940 <g_str_equal@plt+0x28680>
   36e32:	nop    DWORD PTR [rax+0x0]
   36e36:	nop    WORD PTR cs:[rax+rax*1+0x0]
   36e40:	push   r15
   36e42:	push   r14
   36e44:	push   r13
   36e46:	push   r12
   36e48:	lea    r12,[rdi+0x9c]
   36e4f:	push   rbp
   36e50:	push   rbx
   36e51:	mov    ebp,esi
   36e53:	mov    rbx,rdi
   36e56:	sub    rsp,0x78
   36e5a:	mov    rax,QWORD PTR fs:0x28
   36e63:	mov    QWORD PTR [rsp+0x68],rax
   36e68:	xor    eax,eax
   36e6a:	test   sil,sil
   36e6d:	jne    37160 <g_str_equal@plt+0x29ea0>
   36e73:	mov    rdi,r12
   36e76:	call   51c00 <g_str_equal@plt+0x44940>
   36e7b:	mov    r13,QWORD PTR [rbx+0x100]
   36e82:	test   r13,r13
   36e85:	jne    373c8 <g_str_equal@plt+0x2a108>
   36e8b:	movzx  eax,BYTE PTR [rbx+0x118]
   36e92:	test   al,al
   36e94:	jne    372c0 <g_str_equal@plt+0x2a000>
   36e9a:	mov    rdi,rbx
   36e9d:	call   36420 <g_str_equal@plt+0x29160>
   36ea2:	test   al,al
   36ea4:	jne    37040 <g_str_equal@plt+0x29d80>
   36eaa:	mov    eax,DWORD PTR fs:0xfffffffffffffe84
   36eb2:	test   eax,eax
   36eb4:	jne    3765a <g_str_equal@plt+0x2a39a>
   36eba:	mov    eax,DWORD PTR [rbx+0xf0]
   36ec0:	lea    r15,[rbx+0xf0]
   36ec7:	test   eax,eax
   36ec9:	je     37010 <g_str_equal@plt+0x29d50>
   36ecf:	mov    r14,QWORD PTR [rbx+0x90]
   36ed6:	test   r14,r14
   36ed9:	je     36f07 <g_str_equal@plt+0x29c47>
   36edb:	mov    eax,DWORD PTR [r14+0x30]
   36edf:	test   eax,eax
   36ee1:	jne    36efe <g_str_equal@plt+0x29c3e>
   36ee3:	cmp    WORD PTR [r14+0x4],0x0
   36ee9:	je     36efe <g_str_equal@plt+0x29c3e>
   36eeb:	cmp    BYTE PTR [r14+0x40],0x0
   36ef0:	jne    372d0 <g_str_equal@plt+0x2a010>
   36ef6:	mov    rdi,r14
   36ef9:	call   36610 <g_str_equal@plt+0x29350>
   36efe:	mov    r14,QWORD PTR [r14+0x48]
   36f02:	test   r14,r14
   36f05:	jne    36edb <g_str_equal@plt+0x29c1b>
   36f07:	xor    r15d,r15d
   36f0a:	test   bpl,bpl
   36f0d:	jne    37029 <g_str_equal@plt+0x29d69>
   36f13:	cmp    BYTE PTR [rbx+0x121],0x0
   36f1a:	mov    eax,DWORD PTR fs:0xfffffffffffffe84
   36f22:	mov    esi,eax
   36f24:	jne    372e0 <g_str_equal@plt+0x2a020>
   36f2a:	mov    rdi,QWORD PTR fs:0xfffffffffffffe90
   36f33:	mov    rdx,r15
   36f36:	xor    r15d,r15d
   36f39:	call   350c0 <g_str_equal@plt+0x27e00>
   36f3e:	mov    r14d,eax
   36f41:	test   bpl,bpl
   36f44:	jne    37052 <g_str_equal@plt+0x29d92>
   36f4a:	cmp    QWORD PTR [rbx+0x100],0x0
   36f52:	jne    37073 <g_str_equal@plt+0x29db3>
   36f58:	mov    rdi,rbx
   36f5b:	call   33f90 <g_str_equal@plt+0x26cd0>
   36f60:	test   r14d,r14d
   36f63:	jle    37138 <g_str_equal@plt+0x29e78>
   36f69:	mov    esi,DWORD PTR fs:0xfffffffffffffe84
   36f71:	test   esi,esi
   36f73:	je     36fa8 <g_str_equal@plt+0x29ce8>
   36f75:	mov    r8,QWORD PTR fs:0xfffffffffffffe90
   36f7e:	mov    rdi,QWORD PTR fs:0xfffffffffffffe88
   36f87:	xor    eax,eax
   36f89:	nop    DWORD PTR [rax+0x0]
   36f90:	movsxd rdx,eax
   36f93:	add    eax,0x1
   36f96:	mov    rcx,QWORD PTR [rdi+rdx*8]
   36f9a:	movzx  edx,WORD PTR [r8+rdx*8+0x6]
   36fa0:	cmp    eax,esi
   36fa2:	mov    WORD PTR [rcx+0x6],dx
   36fa6:	jne    36f90 <g_str_equal@plt+0x29cd0>
   36fa8:	mov    rdi,rbx
   36fab:	mov    DWORD PTR fs:0xfffffffffffffe84,0x0
   36fb7:	call   33c80 <g_str_equal@plt+0x269c0>
   36fbc:	mov    rdi,rbx
   36fbf:	mov    ebp,eax
   36fc1:	call   36490 <g_str_equal@plt+0x291d0>
   36fc6:	or     r15d,ebp
   36fc9:	setne  bpl
   36fcd:	or     ebp,eax
   36fcf:	mov    rdi,r12
   36fd2:	call   51ca0 <g_str_equal@plt+0x449e0>
   36fd7:	lea    rdi,[rbx+0xd0]
   36fde:	call   35940 <g_str_equal@plt+0x28680>
   36fe3:	or     eax,ebp
   36fe5:	mov    rcx,QWORD PTR [rsp+0x68]
   36fea:	xor    rcx,QWORD PTR fs:0x28
   36ff3:	jne    375f8 <g_str_equal@plt+0x2a338>
   36ff9:	add    rsp,0x78
   36ffd:	pop    rbx
   36ffe:	pop    rbp
   36fff:	pop    r12
   37001:	pop    r13
   37003:	pop    r14
   37005:	pop    r15
   37007:	ret    
   37008:	nop    DWORD PTR [rax+rax*1+0x0]
   37010:	cmp    BYTE PTR [rbx+0x120],0x0
   37017:	je     36ecf <g_str_equal@plt+0x29c0f>
   3701d:	xor    r15d,r15d
   37020:	test   bpl,bpl
   37023:	je     36f13 <g_str_equal@plt+0x29c53>
   37029:	mov    rdi,rbx
   3702c:	call   33db0 <g_str_equal@plt+0x26af0>
   37031:	mov    r15,rax
   37034:	jmp    36f13 <g_str_equal@plt+0x29c53>
   37039:	nop    DWORD PTR [rax+0x0]
   37040:	xor    r14d,r14d
   37043:	test   bpl,bpl
   37046:	mov    r15d,0x1
   3704c:	je     36f4a <g_str_equal@plt+0x29c8a>
   37052:	lea    rax,[rbx+0x98]
   37059:	mov    QWORD PTR [rsp],rax
   3705d:	mov    rax,QWORD PTR [rsp]
   37061:	lock sub DWORD PTR [rax],0x2
   37065:	cmp    QWORD PTR [rbx+0x100],0x0
   3706d:	je     36f58 <g_str_equal@plt+0x29c98>
   37073:	xor    edi,edi
   37075:	call   35420 <g_str_equal@plt+0x28160>
   3707a:	mov    rbp,QWORD PTR [rbx+0xf8]
   37081:	sub    rax,r13
   37084:	cmp    rbp,rax
   37087:	jge    36f58 <g_str_equal@plt+0x29c98>
   3708d:	mov    rdx,QWORD PTR [rbx+0x100]
   37094:	cmp    rdx,rax
   37097:	jge    373e0 <g_str_equal@plt+0x2a120>
   3709d:	mov    r13,QWORD PTR [rbx+0x110]
   370a4:	test   r13,r13
   370a7:	jne    374a0 <g_str_equal@plt+0x2a1e0>
   370ad:	mov    QWORD PTR [rbx+0xf8],0x0
   370b8:	mov    r9d,DWORD PTR [rip+0x24da19]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   370bf:	test   r9d,r9d
   370c2:	je     36f58 <g_str_equal@plt+0x29c98>
   370c8:	cmp    WORD PTR [rip+0x24ffb8],0x0        # 287088 <stdout@@GLIBC_2.2.5+0x2740>
   370d0:	je     36f58 <g_str_equal@plt+0x29c98>
   370d6:	test   BYTE PTR [rip+0x24edc4],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   370dd:	je     36f58 <g_str_equal@plt+0x29c98>
   370e3:	lea    rdi,[rsp+0x10]
   370e8:	xor    esi,esi
   370ea:	call   c3e0 <gettimeofday@plt>
   370ef:	mov    rcx,QWORD PTR [rsp+0x18]
   370f4:	mov    rdx,QWORD PTR [rsp+0x10]
   370f9:	mov    QWORD PTR [rsp+0x8],rcx
   370fe:	mov    QWORD PTR [rsp],rdx
   37102:	call   c5b0 <getpid@plt>
   37107:	sub    rsp,0x8
   3710b:	lea    rdi,[rip+0x2a05e]        # 61170 <_fini@@Base+0xea1c>
   37112:	mov    r8,rbx
   37115:	push   r13
   37117:	mov    rcx,QWORD PTR [rsp+0x18]
   3711c:	mov    esi,eax
   3711e:	mov    rdx,QWORD PTR [rsp+0x10]
   37123:	mov    r9,rbp
   37126:	xor    eax,eax
   37128:	call   431a0 <g_str_equal@plt+0x35ee0>
   3712d:	pop    rdi
   3712e:	pop    r8
   37130:	jmp    36f58 <g_str_equal@plt+0x29c98>
   37135:	nop    DWORD PTR [rax]
   37138:	mov    rdi,rbx
   3713b:	mov    DWORD PTR fs:0xfffffffffffffe84,0x0
   37147:	call   33c80 <g_str_equal@plt+0x269c0>
   3714c:	or     r15d,eax
   3714f:	setne  bpl
   37153:	jmp    36fcf <g_str_equal@plt+0x29d0f>
   37158:	nop    DWORD PTR [rax+rax*1+0x0]
   37160:	lea    rax,[rdi+0x98]
   37167:	mov    QWORD PTR [rsp],rax
   3716b:	lock add DWORD PTR [rax],0x2
   3716f:	mov    rdi,r12
   37172:	call   51c00 <g_str_equal@plt+0x44940>
   37177:	mov    r13,QWORD PTR [rbx+0x100]
   3717e:	test   r13,r13
   37181:	je     36e8b <g_str_equal@plt+0x29bcb>
   37187:	xor    edi,edi
   37189:	call   35420 <g_str_equal@plt+0x28160>
   3718e:	cmp    QWORD PTR [rbx+0x100],0x0
   37196:	mov    r13,rax
   37199:	je     36e8b <g_str_equal@plt+0x29bcb>
   3719f:	mov    eax,DWORD PTR [rbx+0xf4]
   371a5:	test   eax,eax
   371a7:	jne    36e8b <g_str_equal@plt+0x29bcb>
   371ad:	mov    rdi,rbx
   371b0:	call   33db0 <g_str_equal@plt+0x26af0>
   371b5:	mov    r14,QWORD PTR [rbx+0xf8]
   371bc:	cmp    rax,r14
   371bf:	jb     374b7 <g_str_equal@plt+0x2a1f7>
   371c5:	test   r14,r14
   371c8:	movzx  eax,BYTE PTR [rbx+0x118]
   371cf:	je     36e92 <g_str_equal@plt+0x29bd2>
   371d5:	test   al,al
   371d7:	je     3756f <g_str_equal@plt+0x2a2af>
   371dd:	mov    eax,DWORD PTR [rbx+0x98]
   371e3:	test   eax,eax
   371e5:	je     3763b <g_str_equal@plt+0x2a37b>
   371eb:	mov    rdi,r12
   371ee:	call   52170 <g_str_equal@plt+0x44eb0>
   371f3:	test   eax,eax
   371f5:	je     3761c <g_str_equal@plt+0x2a35c>
   371fb:	mov    eax,DWORD PTR [rbx+0xf4]
   37201:	test   eax,eax
   37203:	jne    375fd <g_str_equal@plt+0x2a33d>
   37209:	mov    eax,DWORD PTR [rip+0x24d8c9]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   3720f:	test   eax,eax
   37211:	jne    37597 <g_str_equal@plt+0x2a2d7>
   37217:	xor    edi,edi
   37219:	call   35420 <g_str_equal@plt+0x28160>
   3721e:	add    r14,rax
   37221:	jmp    37238 <g_str_equal@plt+0x29f78>
   37223:	nop    DWORD PTR [rax+rax*1+0x0]
   37228:	xor    edi,edi
   3722a:	call   35420 <g_str_equal@plt+0x28160>
   3722f:	cmp    r14,rax
   37232:	jle    374c7 <g_str_equal@plt+0x2a207>
   37238:	mov    rdi,rbx
   3723b:	call   36420 <g_str_equal@plt+0x29160>
   37240:	test   al,al
   37242:	je     37228 <g_str_equal@plt+0x29f68>
   37244:	mov    r14d,DWORD PTR [rip+0x24d88d]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   3724b:	mov    r15d,0x1
   37251:	test   r14d,r14d
   37254:	je     3705d <g_str_equal@plt+0x29d9d>
   3725a:	cmp    WORD PTR [rip+0x24fe28],0x0        # 28708a <stdout@@GLIBC_2.2.5+0x2742>
   37262:	je     372b2 <g_str_equal@plt+0x29ff2>
   37264:	mov    r14d,DWORD PTR [rip+0x24ec35]        # 285ea0 <stdout@@GLIBC_2.2.5+0x1558>
   3726b:	and    r14d,0x8000
   37272:	je     3705d <g_str_equal@plt+0x29d9d>
   37278:	lea    rdi,[rsp+0x10]
   3727d:	xor    esi,esi
   3727f:	call   c3e0 <gettimeofday@plt>
   37284:	mov    r14,QWORD PTR [rsp+0x18]
   37289:	mov    rbp,QWORD PTR [rsp+0x10]
   3728e:	call   c5b0 <getpid@plt>
   37293:	lea    rdi,[rip+0x29f3e]        # 611d8 <_fini@@Base+0xea84>
   3729a:	mov    esi,eax
   3729c:	mov    r9d,0x1
   372a2:	mov    r8,rbx
   372a5:	mov    rcx,r14
   372a8:	mov    rdx,rbp
   372ab:	xor    eax,eax
   372ad:	call   431a0 <g_str_equal@plt+0x35ee0>
   372b2:	xor    r14d,r14d
   372b5:	jmp    3705d <g_str_equal@plt+0x29d9d>
   372ba:	nop    WORD PTR [rax+rax*1+0x0]
   372c0:	xor    esi,esi
   372c2:	mov    rdi,rbx
   372c5:	call   36740 <g_str_equal@plt+0x29480>
   372ca:	jmp    36e9a <g_str_equal@plt+0x29bda>
   372cf:	nop
   372d0:	mov    eax,DWORD PTR [r15]
   372d3:	test   eax,eax
   372d5:	je     36ef6 <g_str_equal@plt+0x29c36>
   372db:	jmp    36efe <g_str_equal@plt+0x29c3e>
   372e0:	mov    edx,DWORD PTR [rbx+0xf0]
   372e6:	test   edx,edx
   372e8:	jne    372f8 <g_str_equal@plt+0x2a038>
   372ea:	cmp    BYTE PTR [rbx+0x120],0x0
   372f1:	lea    r8,[rsp+0x10]
   372f6:	jne    3736d <g_str_equal@plt+0x2a0ad>
   372f8:	cmp    eax,0x3f
   372fb:	mov    esi,eax
   372fd:	jbe    36f2a <g_str_equal@plt+0x29c6a>
   37303:	mov    r14,QWORD PTR [rbx+0x90]
   3730a:	test   r14,r14
   3730d:	lea    r8,[rsp+0x10]
   37312:	je     37366 <g_str_equal@plt+0x2a0a6>
   37314:	nop    DWORD PTR [rax+0x0]
   37318:	mov    r11d,DWORD PTR [r14+0x30]
   3731c:	test   r11d,r11d
   3731f:	jne    3735d <g_str_equal@plt+0x2a09d>
   37321:	movzx  eax,WORD PTR [r14+0x4]
   37326:	test   ax,ax
   37329:	je     3735d <g_str_equal@plt+0x2a09d>
   3732b:	and    eax,0x1d
   3732e:	mov    QWORD PTR [rsp+0x14],r14
   37333:	mov    edi,DWORD PTR [rbx+0x11c]
   37339:	mov    DWORD PTR [rsp+0x10],eax
   3733d:	mov    edx,DWORD PTR [r14]
   37340:	mov    rcx,r8
   37343:	mov    esi,0x1
   37348:	mov    QWORD PTR [rsp],r8
   3734c:	call   ca30 <epoll_ctl@plt>
   37351:	test   eax,eax
   37353:	mov    r8,QWORD PTR [rsp]
   37357:	jne    37540 <g_str_equal@plt+0x2a280>
   3735d:	mov    r14,QWORD PTR [r14+0x48]
   37361:	test   r14,r14
   37364:	jne    37318 <g_str_equal@plt+0x2a058>
   37366:	mov    BYTE PTR [rbx+0x120],0x1
   3736d:	mov    eax,DWORD PTR [rbx+0x11c]
   37373:	mov    r10d,0x1d
   37379:	mov    rdi,r8
   3737c:	mov    WORD PTR [rsp+0x14],r10w
   37382:	mov    DWORD PTR fs:0xfffffffffffffe84,0x0
   3738e:	mov    DWORD PTR [rsp+0x10],eax
   37392:	call   36610 <g_str_equal@plt+0x29350>
   37397:	mov    edx,DWORD PTR fs:0xfffffffffffffe84
   3739f:	mov    rsi,QWORD PTR fs:0xfffffffffffffe90
   373a8:	lea    rdi,[rbx+0x11c]
   373af:	mov    rcx,r15
   373b2:	xor    r15d,r15d
   373b5:	call   36820 <g_str_equal@plt+0x29560>
   373ba:	mov    r14d,eax
   373bd:	jmp    36f41 <g_str_equal@plt+0x29c81>
   373c2:	nop    WORD PTR [rax+rax*1+0x0]
   373c8:	xor    edi,edi
   373ca:	call   35420 <g_str_equal@plt+0x28160>
   373cf:	mov    r13,rax
   373d2:	movzx  eax,BYTE PTR [rbx+0x118]
   373d9:	jmp    36e92 <g_str_equal@plt+0x29bd2>
   373de:	xchg   ax,ax
   373e0:	cmp    rax,rdx
   373e3:	jge    36f58 <g_str_equal@plt+0x29c98>
   373e9:	mov    rax,QWORD PTR [rbx+0x108]
   373f0:	mov    ecx,0x2
   373f5:	test   rax,rax
   373f8:	cmove  rax,rcx
   373fc:	test   rbp,rbp
   373ff:	je     37581 <g_str_equal@plt+0x2a2c1>
   37405:	imul   rax,rbp
   37409:	mov    r13,rax
   3740c:	mov    QWORD PTR [rbx+0xf8],rax
   37413:	cmp    rdx,r13
   37416:	jge    37422 <g_str_equal@plt+0x2a162>
   37418:	mov    QWORD PTR [rbx+0xf8],rdx
   3741f:	mov    r13,rdx
   37422:	mov    esi,DWORD PTR [rip+0x24d6b0]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   37428:	test   esi,esi
   3742a:	je     36f58 <g_str_equal@plt+0x29c98>
   37430:	cmp    WORD PTR [rip+0x24fc4e],0x0        # 287086 <stdout@@GLIBC_2.2.5+0x273e>
   37438:	je     36f58 <g_str_equal@plt+0x29c98>
   3743e:	test   BYTE PTR [rip+0x24ea5c],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   37445:	je     36f58 <g_str_equal@plt+0x29c98>
   3744b:	lea    rdi,[rsp+0x10]
   37450:	xor    esi,esi
   37452:	call   c3e0 <gettimeofday@plt>
   37457:	mov    rcx,QWORD PTR [rsp+0x18]
   3745c:	mov    rdx,QWORD PTR [rsp+0x10]
   37461:	mov    QWORD PTR [rsp+0x8],rcx
   37466:	mov    QWORD PTR [rsp],rdx
   3746a:	call   c5b0 <getpid@plt>
   3746f:	sub    rsp,0x8
   37473:	lea    rdi,[rip+0x29d2e]        # 611a8 <_fini@@Base+0xea54>
   3747a:	mov    esi,eax
   3747c:	push   r13
   3747e:	mov    rcx,QWORD PTR [rsp+0x18]
   37483:	mov    r9,rbp
   37486:	mov    rdx,QWORD PTR [rsp+0x10]
   3748b:	mov    r8,rbx
   3748e:	xor    eax,eax
   37490:	call   431a0 <g_str_equal@plt+0x35ee0>
   37495:	pop    rdx
   37496:	pop    rcx
   37497:	jmp    36f58 <g_str_equal@plt+0x29c98>
   3749c:	nop    DWORD PTR [rax+0x0]
   374a0:	mov    rax,rbp
   374a3:	cqo    
   374a5:	idiv   r13
   374a8:	mov    r13,rax
   374ab:	mov    QWORD PTR [rbx+0xf8],rax
   374b2:	jmp    370b8 <g_str_equal@plt+0x29df8>
   374b7:	mov    rdi,rbx
   374ba:	call   33db0 <g_str_equal@plt+0x26af0>
   374bf:	mov    r14,rax
   374c2:	jmp    371c5 <g_str_equal@plt+0x29f05>
   374c7:	mov    eax,DWORD PTR [rip+0x24d60b]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   374cd:	test   eax,eax
   374cf:	je     36e8b <g_str_equal@plt+0x29bcb>
   374d5:	cmp    WORD PTR [rip+0x24fbad],0x0        # 28708a <stdout@@GLIBC_2.2.5+0x2742>
   374dd:	je     36e8b <g_str_equal@plt+0x29bcb>
   374e3:	test   BYTE PTR [rip+0x24e9b7],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   374ea:	je     36e8b <g_str_equal@plt+0x29bcb>
   374f0:	lea    r8,[rsp+0x10]
   374f5:	xor    esi,esi
   374f7:	mov    rdi,r8
   374fa:	call   c3e0 <gettimeofday@plt>
   374ff:	mov    r15,QWORD PTR [rsp+0x18]
   37504:	mov    r14,QWORD PTR [rsp+0x10]
   37509:	call   c5b0 <getpid@plt>
   3750e:	lea    rdi,[rip+0x29cc3]        # 611d8 <_fini@@Base+0xea84>
   37515:	mov    esi,eax
   37517:	xor    r9d,r9d
   3751a:	mov    r8,rbx
   3751d:	mov    rcx,r15
   37520:	mov    rdx,r14
   37523:	xor    eax,eax
   37525:	call   431a0 <g_str_equal@plt+0x35ee0>
   3752a:	movzx  eax,BYTE PTR [rbx+0x118]
   37531:	jmp    36e92 <g_str_equal@plt+0x29bd2>
   37536:	nop    WORD PTR cs:[rax+rax*1+0x0]
   37540:	cmp    BYTE PTR [rbx+0x121],0x0
   37547:	mov    BYTE PTR [rbx+0x120],0x0
   3754e:	je     37562 <g_str_equal@plt+0x2a2a2>
   37550:	mov    edi,DWORD PTR [rbx+0x11c]
   37556:	mov    BYTE PTR [rbx+0x121],0x0
   3755d:	call   c230 <close@plt>
   37562:	mov    esi,DWORD PTR fs:0xfffffffffffffe84
   3756a:	jmp    36f2a <g_str_equal@plt+0x29c6a>
   3756f:	mov    esi,0x1
   37574:	mov    rdi,rbx
   37577:	call   36740 <g_str_equal@plt+0x29480>
   3757c:	jmp    371dd <g_str_equal@plt+0x29f1d>
   37581:	mov    QWORD PTR [rbx+0xf8],0xfa0
   3758c:	mov    r13d,0xfa0
   37592:	jmp    37413 <g_str_equal@plt+0x2a153>
   37597:	cmp    WORD PTR [rip+0x24faed],0x0        # 28708c <stdout@@GLIBC_2.2.5+0x2744>
   3759f:	je     37217 <g_str_equal@plt+0x29f57>
   375a5:	test   BYTE PTR [rip+0x24e8f5],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   375ac:	je     37217 <g_str_equal@plt+0x29f57>
   375b2:	lea    r8,[rsp+0x10]
   375b7:	xor    esi,esi
   375b9:	mov    rdi,r8
   375bc:	call   c3e0 <gettimeofday@plt>
   375c1:	mov    rdx,QWORD PTR [rsp+0x10]
   375c6:	mov    r15,QWORD PTR [rsp+0x18]
   375cb:	mov    QWORD PTR [rsp+0x8],rdx
   375d0:	call   c5b0 <getpid@plt>
   375d5:	mov    rdx,QWORD PTR [rsp+0x8]
   375da:	lea    rdi,[rip+0x29b57]        # 61138 <_fini@@Base+0xe9e4>
   375e1:	mov    esi,eax
   375e3:	mov    r9,r14
   375e6:	mov    r8,rbx
   375e9:	mov    rcx,r15
   375ec:	xor    eax,eax
   375ee:	call   431a0 <g_str_equal@plt+0x35ee0>
   375f3:	jmp    37217 <g_str_equal@plt+0x29f57>
   375f8:	call   cd30 <__stack_chk_fail@plt>
   375fd:	lea    rcx,[rip+0x29c8c]        # 61290 <_fini@@Base+0xeb3c>
   37604:	lea    rsi,[rip+0x29ac5]        # 610d0 <_fini@@Base+0xe97c>
   3760b:	lea    rdi,[rip+0x29a90]        # 610a2 <_fini@@Base+0xe94e>
   37612:	mov    edx,0x20f
   37617:	call   c390 <__assert_fail@plt>
   3761c:	lea    rcx,[rip+0x29c6d]        # 61290 <_fini@@Base+0xeb3c>
   37623:	lea    rsi,[rip+0x29aa6]        # 610d0 <_fini@@Base+0xe97c>
   3762a:	lea    rdi,[rip+0x29adf]        # 61110 <_fini@@Base+0xe9bc>
   37631:	mov    edx,0x20e
   37636:	call   c390 <__assert_fail@plt>
   3763b:	lea    rcx,[rip+0x29c4e]        # 61290 <_fini@@Base+0xeb3c>
   37642:	lea    rsi,[rip+0x29a87]        # 610d0 <_fini@@Base+0xe97c>
   37649:	lea    rdi,[rip+0x29a43]        # 61093 <_fini@@Base+0xe93f>
   37650:	mov    edx,0x20d
   37655:	call   c390 <__assert_fail@plt>
   3765a:	lea    rcx,[rip+0x29c47]        # 612a8 <_fini@@Base+0xeb54>
   37661:	lea    rsi,[rip+0x29a68]        # 610d0 <_fini@@Base+0xe97c>
   37668:	lea    rdi,[rip+0x299f5]        # 61064 <_fini@@Base+0xe910>
   3766f:	mov    edx,0x25c
   37674:	call   c390 <__assert_fail@plt>
   37679:	nop    DWORD PTR [rax+0x0]
   37680:	push   rbx
   37681:	mov    eax,DWORD PTR [rdi+0x11c]
   37687:	test   eax,eax
   37689:	jne    376e2 <g_str_equal@plt+0x2a422>
   3768b:	mov    rbx,rdi
   3768e:	mov    edi,0x80000
   37693:	call   c940 <epoll_create1@plt>
   37698:	cmp    eax,0xffffffff
   3769b:	mov    DWORD PTR [rbx+0x11c],eax
   376a1:	je     376b0 <g_str_equal@plt+0x2a3f0>
   376a3:	mov    BYTE PTR [rbx+0x121],0x1
   376aa:	pop    rbx
   376ab:	ret    
   376ac:	nop    DWORD PTR [rax+0x0]
   376b0:	call   cc80 <__errno_location@plt>
   376b5:	mov    edi,DWORD PTR [rax]
   376b7:	call   ca10 <strerror@plt>
   376bc:	mov    rdi,QWORD PTR [rip+0x24d27d]        # 284940 <stderr@@GLIBC_2.2.5>
   376c3:	lea    rdx,[rip+0x29b46]        # 61210 <_fini@@Base+0xeabc>
   376ca:	mov    rcx,rax
   376cd:	mov    esi,0x1
   376d2:	xor    eax,eax
   376d4:	call   c2b0 <__fprintf_chk@plt>
   376d9:	mov    BYTE PTR [rbx+0x121],0x0
   376e0:	pop    rbx
   376e1:	ret    
   376e2:	lea    rcx,[rip+0x29b57]        # 61240 <_fini@@Base+0xeaec>
   376e9:	lea    rsi,[rip+0x299e0]        # 610d0 <_fini@@Base+0xe97c>
   376f0:	lea    rdi,[rip+0x299c6]        # 610bd <_fini@@Base+0xe969>
   376f7:	mov    edx,0x2c1
   376fc:	call   c390 <__assert_fail@plt>
   37701:	nop    DWORD PTR [rax+rax*1+0x0]
   37706:	nop    WORD PTR cs:[rax+rax*1+0x0]
   37710:	cmp    BYTE PTR [rdi+0x121],0x0
   37717:	mov    BYTE PTR [rdi+0x120],0x0
   3771e:	jne    37728 <g_str_equal@plt+0x2a468>
   37720:	repz ret 
   37722:	nop    WORD PTR [rax+rax*1+0x0]
   37728:	mov    BYTE PTR [rdi+0x121],0x0
   3772f:	mov    edi,DWORD PTR [rdi+0x11c]
   37735:	jmp    c230 <close@plt>
   3773a:	nop    WORD PTR [rax+rax*1+0x0]
   37740:	mov    QWORD PTR [rdi+0x100],rsi
   37747:	mov    QWORD PTR [rdi+0xf8],0x0
   37752:	mov    QWORD PTR [rdi+0x108],rdx
   37759:	mov    QWORD PTR [rdi+0x110],rcx
   37760:	jmp    33eb0 <g_str_equal@plt+0x26bf0>
   37765:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3776f:	nop
   37770:	push   r14
   37772:	push   r13
   37774:	push   r12
   37776:	push   rbp
   37777:	mov    rbp,rdi
   3777a:	push   rbx
   3777b:	sub    rsp,0xa0
   37782:	mov    rax,QWORD PTR fs:0x28
   3778b:	mov    QWORD PTR [rsp+0x98],rax
   37793:	xor    eax,eax
   37795:	lea    r13,[rsp+0xc]
   3779a:	lea    r12,[rsp+0x10]
   3779f:	mov    rsi,r13
   377a2:	mov    rdi,rbp
   377a5:	call   d210 <sigwait@plt>
   377aa:	test   eax,eax
   377ac:	je     377e8 <g_str_equal@plt+0x2a528>
   377ae:	call   cc80 <__errno_location@plt>
   377b3:	cmp    DWORD PTR [rax],0x4
   377b6:	je     3779f <g_str_equal@plt+0x2a4df>
   377b8:	xor    eax,eax
   377ba:	mov    rcx,QWORD PTR [rsp+0x98]
   377c2:	xor    rcx,QWORD PTR fs:0x28
   377cb:	jne    37868 <g_str_equal@plt+0x2a5a8>
   377d1:	add    rsp,0xa0
   377d8:	pop    rbx
   377d9:	pop    rbp
   377da:	pop    r12
   377dc:	pop    r13
   377de:	pop    r14
   377e0:	ret    
   377e1:	nop    DWORD PTR [rax+0x0]
   377e8:	lea    rdi,[r12+0x8]
   377ed:	xor    eax,eax
   377ef:	mov    ecx,0xf
   377f4:	mov    QWORD PTR [r12+0x4],0x0
   377fd:	mov    QWORD PTR [r12+0x78],0x0
   37806:	xor    ebx,ebx
   37808:	rep stos QWORD PTR es:[rdi],rax
   3780b:	mov    r14d,0x80
   37811:	mov    eax,DWORD PTR [rsp+0xc]
   37815:	mov    DWORD PTR [rsp+0x10],eax
   37819:	nop    DWORD PTR [rax+0x0]
   37820:	mov    edi,DWORD PTR [rbp+0x80]
   37826:	mov    rdx,r14
   37829:	lea    rsi,[r12+rbx*1]
   3782d:	sub    rdx,rbx
   37830:	call   d140 <write@plt>
   37835:	cmp    rax,0xffffffffffffffff
   37839:	je     37858 <g_str_equal@plt+0x2a598>
   3783b:	test   rax,rax
   3783e:	jle    377b8 <g_str_equal@plt+0x2a4f8>
   37844:	add    rbx,rax
   37847:	cmp    rbx,0x7f
   3784b:	jbe    37820 <g_str_equal@plt+0x2a560>
   3784d:	jmp    3779f <g_str_equal@plt+0x2a4df>
   37852:	nop    WORD PTR [rax+rax*1+0x0]
   37858:	call   cc80 <__errno_location@plt>
   3785d:	cmp    DWORD PTR [rax],0x4
   37860:	jne    377b8 <g_str_equal@plt+0x2a4f8>
   37866:	jmp    37820 <g_str_equal@plt+0x2a560>
   37868:	call   cd30 <__stack_chk_fail@plt>
   3786d:	nop    DWORD PTR [rax]
   37870:	push   r12
   37872:	push   rbp
   37873:	mov    rdx,rdi
   37876:	push   rbx
   37877:	mov    ecx,0x8
   3787c:	mov    rbx,rdi
   3787f:	mov    esi,0xffffffff
   37884:	mov    edi,0x11a
   37889:	sub    rsp,0x20
   3788d:	mov    rax,QWORD PTR fs:0x28
   37896:	mov    QWORD PTR [rsp+0x18],rax
   3789b:	xor    eax,eax
   3789d:	call   c8e0 <syscall@plt>
   378a2:	cmp    eax,0xffffffff
   378a5:	mov    r12d,eax
   378a8:	je     378d8 <g_str_equal@plt+0x2a618>
   378aa:	mov    edi,eax
   378ac:	call   381c0 <g_str_equal@plt+0x2af00>
   378b1:	mov    rdx,QWORD PTR [rsp+0x18]
   378b6:	xor    rdx,QWORD PTR fs:0x28
   378bf:	mov    eax,r12d
   378c2:	jne    379af <g_str_equal@plt+0x2a6ef>
   378c8:	add    rsp,0x20
   378cc:	pop    rbx
   378cd:	pop    rbp
   378ce:	pop    r12
   378d0:	ret    
   378d1:	nop    DWORD PTR [rax+0x0]
   378d8:	mov    edi,0x88
   378dd:	call   c4a0 <malloc@plt>
   378e2:	test   rax,rax
   378e5:	mov    rbp,rax
   378e8:	je     37992 <g_str_equal@plt+0x2a6d2>
   378ee:	lea    rdi,[rsp+0x10]
   378f3:	call   c930 <pipe@plt>
   378f8:	cmp    eax,0xffffffff
   378fb:	mov    r12d,eax
   378fe:	je     379a2 <g_str_equal@plt+0x2a6e2>
   37904:	mov    edi,DWORD PTR [rsp+0x10]
   37908:	call   381c0 <g_str_equal@plt+0x2af00>
   3790d:	mov    edi,DWORD PTR [rsp+0x14]
   37911:	call   381c0 <g_str_equal@plt+0x2af00>
   37916:	movdqu xmm0,XMMWORD PTR [rbx]
   3791a:	lea    rdi,[rsp+0x8]
   3791f:	mov    eax,DWORD PTR [rsp+0x14]
   37923:	lea    rdx,[rip+0xfffffffffffffe46]        # 37770 <g_str_equal@plt+0x2a4b0>
   3792a:	lea    rsi,[rip+0x29980]        # 612b1 <_fini@@Base+0xeb5d>
   37931:	movups XMMWORD PTR [rbp+0x0],xmm0
   37935:	mov    r8d,0x1
   3793b:	mov    rcx,rbp
   3793e:	movdqu xmm0,XMMWORD PTR [rbx+0x10]
   37943:	mov    DWORD PTR [rbp+0x80],eax
   37949:	movups XMMWORD PTR [rbp+0x10],xmm0
   3794d:	movdqu xmm0,XMMWORD PTR [rbx+0x20]
   37952:	movups XMMWORD PTR [rbp+0x20],xmm0
   37956:	movdqu xmm0,XMMWORD PTR [rbx+0x30]
   3795b:	movups XMMWORD PTR [rbp+0x30],xmm0
   3795f:	movdqu xmm0,XMMWORD PTR [rbx+0x40]
   37964:	movups XMMWORD PTR [rbp+0x40],xmm0
   37968:	movdqu xmm0,XMMWORD PTR [rbx+0x50]
   3796d:	movups XMMWORD PTR [rbp+0x50],xmm0
   37971:	movdqu xmm0,XMMWORD PTR [rbx+0x60]
   37976:	movups XMMWORD PTR [rbp+0x60],xmm0
   3797a:	movdqu xmm0,XMMWORD PTR [rbx+0x70]
   3797f:	movups XMMWORD PTR [rbp+0x70],xmm0
   37983:	call   39790 <g_str_equal@plt+0x2c4d0>
   37988:	mov    r12d,DWORD PTR [rsp+0x10]
   3798d:	jmp    378b1 <g_str_equal@plt+0x2a5f1>
   37992:	call   cc80 <__errno_location@plt>
   37997:	mov    DWORD PTR [rax],0xc
   3799d:	jmp    378b1 <g_str_equal@plt+0x2a5f1>
   379a2:	mov    rdi,rbp
   379a5:	call   c700 <free@plt>
   379aa:	jmp    378b1 <g_str_equal@plt+0x2a5f1>
   379af:	call   cd30 <__stack_chk_fail@plt>
   379b4:	nop    WORD PTR cs:[rax+rax*1+0x0]
   379be:	xchg   ax,ax
   379c0:	mov    DWORD PTR [rdi],esi
   379c2:	mov    DWORD PTR [rdi+0x4],esi
   379c5:	ret    
   379c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   379d0:	push   rbx
   379d1:	mov    rbx,rdi
   379d4:	mov    eax,DWORD PTR [rdi]
   379d6:	mov    edi,DWORD PTR [rdi+0x4]
   379d9:	cmp    eax,edi
   379db:	je     379ed <g_str_equal@plt+0x2a72d>
   379dd:	mov    edi,eax
   379df:	call   c230 <close@plt>
   379e4:	mov    edi,DWORD PTR [rbx+0x4]
   379e7:	mov    DWORD PTR [rbx],0xffffffff
   379ed:	call   c230 <close@plt>
   379f2:	mov    DWORD PTR [rbx+0x4],0xffffffff
   379f9:	pop    rbx
   379fa:	ret    
   379fb:	nop    DWORD PTR [rax+rax*1+0x0]
   37a00:	mov    eax,DWORD PTR [rdi]
   37a02:	ret    
   37a03:	nop    DWORD PTR [rax]
   37a06:	nop    WORD PTR cs:[rax+rax*1+0x0]
   37a10:	push   rbp
   37a11:	push   rbx
   37a12:	mov    rbp,rdi
   37a15:	lea    rbx,[rip+0x298ac]        # 612c8 <_fini@@Base+0xeb74>
   37a1c:	sub    rsp,0x8
   37a20:	jmp    37a34 <g_str_equal@plt+0x2a774>
   37a22:	nop    WORD PTR [rax+rax*1+0x0]
   37a28:	call   cc80 <__errno_location@plt>
   37a2d:	mov    edx,DWORD PTR [rax]
   37a2f:	cmp    edx,0x4
   37a32:	jne    37a58 <g_str_equal@plt+0x2a798>
   37a34:	mov    edi,DWORD PTR [rbp+0x4]
   37a37:	mov    edx,0x8
   37a3c:	mov    rsi,rbx
   37a3f:	call   d140 <write@plt>
   37a44:	test   rax,rax
   37a47:	js     37a28 <g_str_equal@plt+0x2a768>
   37a49:	add    rsp,0x8
   37a4d:	xor    eax,eax
   37a4f:	pop    rbx
   37a50:	pop    rbp
   37a51:	ret    
   37a52:	nop    WORD PTR [rax+rax*1+0x0]
   37a58:	mov    eax,edx
   37a5a:	neg    eax
   37a5c:	cmp    edx,0xb
   37a5f:	mov    edx,0x0
   37a64:	cmove  eax,edx
   37a67:	add    rsp,0x8
   37a6b:	pop    rbx
   37a6c:	pop    rbp
   37a6d:	ret    
   37a6e:	xchg   ax,ax
   37a70:	push   r13
   37a72:	push   r12
   37a74:	mov    r12d,esi
   37a77:	push   rbp
   37a78:	push   rbx
   37a79:	mov    rbp,rdi
   37a7c:	mov    esi,0x80800
   37a81:	xor    edi,edi
   37a83:	sub    rsp,0x18
   37a87:	mov    rax,QWORD PTR fs:0x28
   37a90:	mov    QWORD PTR [rsp+0x8],rax
   37a95:	xor    eax,eax
   37a97:	call   c570 <eventfd@plt>
   37a9c:	test   eax,eax
   37a9e:	js     37ae0 <g_str_equal@plt+0x2a820>
   37aa0:	mov    DWORD PTR [rbp+0x4],eax
   37aa3:	mov    DWORD PTR [rbp+0x0],eax
   37aa6:	xor    ebx,ebx
   37aa8:	test   r12d,r12d
   37aab:	jne    37ad0 <g_str_equal@plt+0x2a810>
   37aad:	mov    rdx,QWORD PTR [rsp+0x8]
   37ab2:	xor    rdx,QWORD PTR fs:0x28
   37abb:	mov    eax,ebx
   37abd:	jne    37b6c <g_str_equal@plt+0x2a8ac>
   37ac3:	add    rsp,0x18
   37ac7:	pop    rbx
   37ac8:	pop    rbp
   37ac9:	pop    r12
   37acb:	pop    r13
   37acd:	ret    
   37ace:	xchg   ax,ax
   37ad0:	mov    rdi,rbp
   37ad3:	call   37a10 <g_str_equal@plt+0x2a750>
   37ad8:	jmp    37aad <g_str_equal@plt+0x2a7ed>
   37ada:	nop    WORD PTR [rax+rax*1+0x0]
   37ae0:	call   cc80 <__errno_location@plt>
   37ae5:	mov    ebx,DWORD PTR [rax]
   37ae7:	mov    r13,rax
   37aea:	cmp    ebx,0x26
   37aed:	je     37af8 <g_str_equal@plt+0x2a838>
   37aef:	neg    ebx
   37af1:	jmp    37aad <g_str_equal@plt+0x2a7ed>
   37af3:	nop    DWORD PTR [rax+rax*1+0x0]
   37af8:	mov    rdi,rsp
   37afb:	call   38230 <g_str_equal@plt+0x2af70>
   37b00:	test   eax,eax
   37b02:	js     37b38 <g_str_equal@plt+0x2a878>
   37b04:	mov    edi,DWORD PTR [rsp]
   37b07:	mov    esi,0x800
   37b0c:	call   32d00 <g_str_equal@plt+0x25a40>
   37b11:	test   eax,eax
   37b13:	jns    37b48 <g_str_equal@plt+0x2a888>
   37b15:	mov    edi,DWORD PTR [rsp]
   37b18:	mov    ebx,DWORD PTR [r13+0x0]
   37b1c:	call   c230 <close@plt>
   37b21:	mov    edi,DWORD PTR [rsp+0x4]
   37b25:	neg    ebx
   37b27:	call   c230 <close@plt>
   37b2c:	jmp    37aad <g_str_equal@plt+0x2a7ed>
   37b31:	nop    DWORD PTR [rax+0x0]
   37b38:	mov    ebx,DWORD PTR [r13+0x0]
   37b3c:	neg    ebx
   37b3e:	jmp    37aad <g_str_equal@plt+0x2a7ed>
   37b43:	nop    DWORD PTR [rax+rax*1+0x0]
   37b48:	mov    edi,DWORD PTR [rsp+0x4]
   37b4c:	mov    esi,0x800
   37b51:	call   32d00 <g_str_equal@plt+0x25a40>
   37b56:	test   eax,eax
   37b58:	js     37b15 <g_str_equal@plt+0x2a855>
   37b5a:	mov    eax,DWORD PTR [rsp]
   37b5d:	mov    DWORD PTR [rbp+0x0],eax
   37b60:	mov    eax,DWORD PTR [rsp+0x4]
   37b64:	mov    DWORD PTR [rbp+0x4],eax
   37b67:	jmp    37aa6 <g_str_equal@plt+0x2a7e6>
   37b6c:	call   cd30 <__stack_chk_fail@plt>
   37b71:	nop    DWORD PTR [rax+rax*1+0x0]
   37b76:	nop    WORD PTR cs:[rax+rax*1+0x0]
   37b80:	push   r12
   37b82:	push   rbp
   37b83:	mov    r12,rdi
   37b86:	push   rbx
   37b87:	xor    ebx,ebx
   37b89:	sub    rsp,0x210
   37b90:	mov    rax,QWORD PTR fs:0x28
   37b99:	mov    QWORD PTR [rsp+0x208],rax
   37ba1:	xor    eax,eax
   37ba3:	mov    rbp,rsp
   37ba6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   37bb0:	mov    edi,DWORD PTR [r12]
   37bb4:	mov    edx,0x200
   37bb9:	mov    rsi,rbp
   37bbc:	call   c490 <read@plt>
   37bc1:	xor    edx,edx
   37bc3:	test   rax,rax
   37bc6:	setg   dl
   37bc9:	or     ebx,edx
   37bcb:	cmp    rax,0xffffffffffffffff
   37bcf:	je     37be0 <g_str_equal@plt+0x2a920>
   37bd1:	cmp    rax,0x200
   37bd7:	je     37bb0 <g_str_equal@plt+0x2a8f0>
   37bd9:	jmp    37bea <g_str_equal@plt+0x2a92a>
   37bdb:	nop    DWORD PTR [rax+rax*1+0x0]
   37be0:	call   cc80 <__errno_location@plt>
   37be5:	cmp    DWORD PTR [rax],0x4
   37be8:	je     37bb0 <g_str_equal@plt+0x2a8f0>
   37bea:	mov    rcx,QWORD PTR [rsp+0x208]
   37bf2:	xor    rcx,QWORD PTR fs:0x28
   37bfb:	mov    eax,ebx
   37bfd:	jne    37c0b <g_str_equal@plt+0x2a94b>
   37bff:	add    rsp,0x210
   37c06:	pop    rbx
   37c07:	pop    rbp
   37c08:	pop    r12
   37c0a:	ret    
   37c0b:	call   cd30 <__stack_chk_fail@plt>
   37c10:	push   r14
   37c12:	push   rbx
   37c13:	mov    r14,rdi
   37c16:	sub    rsp,0x128
   37c1d:	lea    rbx,[rsp+0x10]
   37c22:	mov    QWORD PTR [rsp+0x8],rdi
   37c27:	mov    rax,QWORD PTR fs:0x28
   37c30:	mov    QWORD PTR [rsp+0x118],rax
   37c38:	xor    eax,eax
   37c3a:	mov    rdi,rbx
   37c3d:	call   d010 <sigemptyset@plt>
   37c42:	mov    rdi,rbx
   37c45:	mov    esi,0x7
   37c4a:	call   cd00 <sigaddset@plt>
   37c4f:	lea    rdx,[rsp+0x90]
   37c57:	mov    rsi,rbx
   37c5a:	mov    edi,0x1
   37c5f:	call   d040 <pthread_sigmask@plt>
   37c64:	lea    rdi,[r14+0x20]
   37c68:	mov    esi,0x1
   37c6d:	call   d0f0 <__sigsetjmp@plt>
   37c72:	test   eax,eax
   37c74:	jne    37cd8 <g_str_equal@plt+0x2aa18>
   37c76:	mov    rbx,QWORD PTR [rsp+0x8]
   37c7b:	mov    rsi,QWORD PTR [rbx+0x8]
   37c7f:	mov    rax,QWORD PTR [rbx]
   37c82:	mov    rdi,QWORD PTR [rbx+0x10]
   37c86:	test   rsi,rsi
   37c89:	je     37ca1 <g_str_equal@plt+0x2a9e1>
   37c8b:	xor    edx,edx
   37c8d:	nop    DWORD PTR [rax]
   37c90:	movzx  ecx,BYTE PTR [rax]
   37c93:	add    rdx,0x1
   37c97:	mov    BYTE PTR [rax],cl
   37c99:	add    rax,rdi
   37c9c:	cmp    rsi,rdx
   37c9f:	jne    37c90 <g_str_equal@plt+0x2a9d0>
   37ca1:	lea    rsi,[rsp+0x90]
   37ca9:	xor    edx,edx
   37cab:	mov    edi,0x2
   37cb0:	call   d040 <pthread_sigmask@plt>
   37cb5:	xor    eax,eax
   37cb7:	mov    rcx,QWORD PTR [rsp+0x118]
   37cbf:	xor    rcx,QWORD PTR fs:0x28
   37cc8:	jne    37ce1 <g_str_equal@plt+0x2aa21>
   37cca:	add    rsp,0x128
   37cd1:	pop    rbx
   37cd2:	pop    r14
   37cd4:	ret    
   37cd5:	nop    DWORD PTR [rax]
   37cd8:	mov    BYTE PTR [rip+0x24df21],0x1        # 285c00 <stdout@@GLIBC_2.2.5+0x12b8>
   37cdf:	jmp    37ca1 <g_str_equal@plt+0x2a9e1>
   37ce1:	call   cd30 <__stack_chk_fail@plt>
   37ce6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   37cf0:	mov    rax,QWORD PTR [rip+0x24df11]        # 285c08 <stdout@@GLIBC_2.2.5+0x12c0>
   37cf7:	test   rax,rax
   37cfa:	je     37d48 <g_str_equal@plt+0x2aa88>
   37cfc:	mov    edx,DWORD PTR [rip+0x24df02]        # 285c04 <stdout@@GLIBC_2.2.5+0x12bc>
   37d02:	test   edx,edx
   37d04:	jle    37d48 <g_str_equal@plt+0x2aa88>
   37d06:	push   rbp
   37d07:	push   rbx
   37d08:	xor    ebx,ebx
   37d0a:	sub    rsp,0x8
   37d0e:	jmp    37d17 <g_str_equal@plt+0x2aa57>
   37d10:	mov    rax,QWORD PTR [rip+0x24def1]        # 285c08 <stdout@@GLIBC_2.2.5+0x12c0>
   37d17:	movsxd rbp,ebx
   37d1a:	imul   rbp,rbp,0xe8
   37d21:	lea    rdi,[rax+rbp*1+0x18]
   37d26:	call   398c0 <g_str_equal@plt+0x2c600>
   37d2b:	test   al,al
   37d2d:	jne    37d4a <g_str_equal@plt+0x2aa8a>
   37d2f:	add    ebx,0x1
   37d32:	cmp    ebx,DWORD PTR [rip+0x24decc]        # 285c04 <stdout@@GLIBC_2.2.5+0x12bc>
   37d38:	jl     37d10 <g_str_equal@plt+0x2aa50>
   37d3a:	add    rsp,0x8
   37d3e:	pop    rbx
   37d3f:	pop    rbp
   37d40:	ret    
   37d41:	nop    DWORD PTR [rax+0x0]
   37d48:	repz ret 
   37d4a:	mov    rdi,QWORD PTR [rip+0x24deb7]        # 285c08 <stdout@@GLIBC_2.2.5+0x12c0>
   37d51:	mov    esi,0x1
   37d56:	add    rdi,rbp
   37d59:	add    rdi,0x20
   37d5d:	call   c240 <__longjmp_chk@plt>
   37d62:	nop    DWORD PTR [rax+0x0]
   37d66:	nop    WORD PTR cs:[rax+rax*1+0x0]
   37d70:	sub    rsp,0x8
   37d74:	mov    edi,0xba
   37d79:	xor    eax,eax
   37d7b:	call   c8e0 <syscall@plt>
   37d80:	add    rsp,0x8
   37d84:	ret    
   37d85:	nop
   37d86:	nop    WORD PTR cs:[rax+rax*1+0x0]
   37d90:	jmp    c0e0 <daemon@plt>
   37d95:	nop
   37d96:	nop    WORD PTR cs:[rax+rax*1+0x0]
   37da0:	test   rdi,rdi
   37da3:	je     37da9 <g_str_equal@plt+0x2aae9>
   37da5:	mov    rax,rdi
   37da8:	ret    
   37da9:	sub    rsp,0x8
   37dad:	call   d500 <g_str_equal@plt+0x240>
   37db2:	nop    DWORD PTR [rax+0x0]
   37db6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   37dc0:	push   r14
   37dc2:	push   r13
   37dc4:	mov    rdx,rsi
   37dc7:	push   r12
   37dc9:	push   rbp
   37dca:	mov    r12,rsi
   37dcd:	push   rbx
   37dce:	mov    ebx,0x8
   37dd3:	sub    rsp,0x30
   37dd7:	mov    rax,QWORD PTR fs:0x28
   37de0:	mov    QWORD PTR [rsp+0x28],rax
   37de5:	xor    eax,eax
   37de7:	cmp    rdi,0x8
   37deb:	cmovae rbx,rdi
   37def:	lea    rdi,[rsp+0x8]
   37df4:	mov    rsi,rbx
   37df7:	call   c220 <posix_memalign@plt>
   37dfc:	test   eax,eax
   37dfe:	jne    37e30 <g_str_equal@plt+0x2ab70>
   37e00:	mov    ecx,DWORD PTR [rip+0x24ccd2]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   37e06:	mov    rbp,QWORD PTR [rsp+0x8]
   37e0b:	test   ecx,ecx
   37e0d:	jne    37e45 <g_str_equal@plt+0x2ab85>
   37e0f:	mov    rcx,QWORD PTR [rsp+0x28]
   37e14:	xor    rcx,QWORD PTR fs:0x28
   37e1d:	mov    rax,rbp
   37e20:	jne    37e9b <g_str_equal@plt+0x2abdb>
   37e22:	add    rsp,0x30
   37e26:	pop    rbx
   37e27:	pop    rbp
   37e28:	pop    r12
   37e2a:	pop    r13
   37e2c:	pop    r14
   37e2e:	ret    
   37e2f:	nop
   37e30:	mov    ebp,eax
   37e32:	call   cc80 <__errno_location@plt>
   37e37:	mov    DWORD PTR [rax],ebp
   37e39:	mov    ecx,DWORD PTR [rip+0x24cc99]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   37e3f:	xor    ebp,ebp
   37e41:	test   ecx,ecx
   37e43:	je     37e0f <g_str_equal@plt+0x2ab4f>
   37e45:	cmp    WORD PTR [rip+0x24f213],0x0        # 287060 <stdout@@GLIBC_2.2.5+0x2718>
   37e4d:	je     37e0f <g_str_equal@plt+0x2ab4f>
   37e4f:	test   BYTE PTR [rip+0x24e04b],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   37e56:	je     37e0f <g_str_equal@plt+0x2ab4f>
   37e58:	lea    rdi,[rsp+0x10]
   37e5d:	xor    esi,esi
   37e5f:	call   c3e0 <gettimeofday@plt>
   37e64:	mov    r14,QWORD PTR [rsp+0x18]
   37e69:	mov    r13,QWORD PTR [rsp+0x10]
   37e6e:	call   c5b0 <getpid@plt>
   37e73:	sub    rsp,0x8
   37e77:	lea    rdi,[rip+0x29472]        # 612f0 <_fini@@Base+0xeb9c>
   37e7e:	mov    esi,eax
   37e80:	push   rbp
   37e81:	mov    rdx,r13
   37e84:	mov    r9,r12
   37e87:	mov    r8,rbx
   37e8a:	mov    rcx,r14
   37e8d:	xor    eax,eax
   37e8f:	call   431a0 <g_str_equal@plt+0x35ee0>
   37e94:	pop    rax
   37e95:	pop    rdx
   37e96:	jmp    37e0f <g_str_equal@plt+0x2ab4f>
   37e9b:	call   cd30 <__stack_chk_fail@plt>
   37ea0:	sub    rsp,0x8
   37ea4:	call   37dc0 <g_str_equal@plt+0x2ab00>
   37ea9:	test   rax,rax
   37eac:	je     37eb3 <g_str_equal@plt+0x2abf3>
   37eae:	add    rsp,0x8
   37eb2:	ret    
   37eb3:	call   d500 <g_str_equal@plt+0x240>
   37eb8:	nop    DWORD PTR [rax+rax*1+0x0]
   37ec0:	push   r13
   37ec2:	push   r12
   37ec4:	movzx  ecx,dl
   37ec7:	push   rbp
   37ec8:	push   rbx
   37ec9:	mov    r12,rdi
   37ecc:	mov    rbp,rsi
   37ecf:	mov    edx,0x200000
   37ed4:	mov    rsi,rdi
   37ed7:	sub    rsp,0x28
   37edb:	mov    edi,0xffffffff
   37ee0:	mov    rax,QWORD PTR fs:0x28
   37ee9:	mov    QWORD PTR [rsp+0x18],rax
   37eee:	xor    eax,eax
   37ef0:	call   52360 <g_str_equal@plt+0x450a0>
   37ef5:	cmp    rax,0xffffffffffffffff
   37ef9:	je     37f90 <g_str_equal@plt+0x2acd0>
   37eff:	test   rbp,rbp
   37f02:	mov    rbx,rax
   37f05:	je     37f0f <g_str_equal@plt+0x2ac4f>
   37f07:	mov    QWORD PTR [rbp+0x0],0x200000
   37f0f:	mov    eax,DWORD PTR [rip+0x24cbc3]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   37f15:	test   eax,eax
   37f17:	jne    37f40 <g_str_equal@plt+0x2ac80>
   37f19:	mov    rsi,QWORD PTR [rsp+0x18]
   37f1e:	xor    rsi,QWORD PTR fs:0x28
   37f27:	mov    rax,rbx
   37f2a:	jne    37f94 <g_str_equal@plt+0x2acd4>
   37f2c:	add    rsp,0x28
   37f30:	pop    rbx
   37f31:	pop    rbp
   37f32:	pop    r12
   37f34:	pop    r13
   37f36:	ret    
   37f37:	nop    WORD PTR [rax+rax*1+0x0]
   37f40:	cmp    WORD PTR [rip+0x24f116],0x0        # 28705e <stdout@@GLIBC_2.2.5+0x2716>
   37f48:	je     37f19 <g_str_equal@plt+0x2ac59>
   37f4a:	test   BYTE PTR [rip+0x24df50],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   37f51:	je     37f19 <g_str_equal@plt+0x2ac59>
   37f53:	mov    rdi,rsp
   37f56:	xor    esi,esi
   37f58:	call   c3e0 <gettimeofday@plt>
   37f5d:	mov    r13,QWORD PTR [rsp+0x8]
   37f62:	mov    rbp,QWORD PTR [rsp]
   37f66:	call   c5b0 <getpid@plt>
   37f6b:	lea    rdi,[rip+0x293be]        # 61330 <_fini@@Base+0xebdc>
   37f72:	mov    esi,eax
   37f74:	mov    r9,rbx
   37f77:	mov    r8,r12
   37f7a:	mov    rcx,r13
   37f7d:	mov    rdx,rbp
   37f80:	xor    eax,eax
   37f82:	call   431a0 <g_str_equal@plt+0x35ee0>
   37f87:	jmp    37f19 <g_str_equal@plt+0x2ac59>
   37f89:	nop    DWORD PTR [rax+0x0]
   37f90:	xor    ebx,ebx
   37f92:	jmp    37f19 <g_str_equal@plt+0x2ac59>
   37f94:	call   cd30 <__stack_chk_fail@plt>
   37f99:	nop    DWORD PTR [rax+0x0]
   37fa0:	push   r12
   37fa2:	push   rbp
   37fa3:	push   rbx
   37fa4:	mov    rbx,rdi
   37fa7:	sub    rsp,0x20
   37fab:	mov    rax,QWORD PTR fs:0x28
   37fb4:	mov    QWORD PTR [rsp+0x18],rax
   37fb9:	xor    eax,eax
   37fbb:	mov    eax,DWORD PTR [rip+0x24cb17]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   37fc1:	test   eax,eax
   37fc3:	jne    37fe8 <g_str_equal@plt+0x2ad28>
   37fc5:	mov    rax,QWORD PTR [rsp+0x18]
   37fca:	xor    rax,QWORD PTR fs:0x28
   37fd3:	jne    3802e <g_str_equal@plt+0x2ad6e>
   37fd5:	add    rsp,0x20
   37fd9:	mov    rdi,rbx
   37fdc:	pop    rbx
   37fdd:	pop    rbp
   37fde:	pop    r12
   37fe0:	jmp    c700 <free@plt>
   37fe5:	nop    DWORD PTR [rax]
   37fe8:	cmp    WORD PTR [rip+0x24f06c],0x0        # 28705c <stdout@@GLIBC_2.2.5+0x2714>
   37ff0:	je     37fc5 <g_str_equal@plt+0x2ad05>
   37ff2:	test   BYTE PTR [rip+0x24dea8],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   37ff9:	je     37fc5 <g_str_equal@plt+0x2ad05>
   37ffb:	mov    rdi,rsp
   37ffe:	xor    esi,esi
   38000:	call   c3e0 <gettimeofday@plt>
   38005:	mov    r12,QWORD PTR [rsp+0x8]
   3800a:	mov    rbp,QWORD PTR [rsp]
   3800e:	call   c5b0 <getpid@plt>
   38013:	lea    rdi,[rip+0x2934e]        # 61368 <_fini@@Base+0xec14>
   3801a:	mov    esi,eax
   3801c:	mov    r8,rbx
   3801f:	mov    rcx,r12
   38022:	mov    rdx,rbp
   38025:	xor    eax,eax
   38027:	call   431a0 <g_str_equal@plt+0x35ee0>
   3802c:	jmp    37fc5 <g_str_equal@plt+0x2ad05>
   3802e:	call   cd30 <__stack_chk_fail@plt>
   38033:	nop    DWORD PTR [rax]
   38036:	nop    WORD PTR cs:[rax+rax*1+0x0]
   38040:	push   r13
   38042:	push   r12
   38044:	push   rbp
   38045:	push   rbx
   38046:	mov    rbp,rsi
   38049:	mov    rbx,rdi
   3804c:	sub    rsp,0x28
   38050:	mov    rax,QWORD PTR fs:0x28
   38059:	mov    QWORD PTR [rsp+0x18],rax
   3805e:	xor    eax,eax
   38060:	mov    eax,DWORD PTR [rip+0x24ca72]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   38066:	test   eax,eax
   38068:	jne    38090 <g_str_equal@plt+0x2add0>
   3806a:	mov    rsi,rbp
   3806d:	mov    rdi,rbx
   38070:	call   524f0 <g_str_equal@plt+0x45230>
   38075:	mov    rax,QWORD PTR [rsp+0x18]
   3807a:	xor    rax,QWORD PTR fs:0x28
   38083:	jne    380d9 <g_str_equal@plt+0x2ae19>
   38085:	add    rsp,0x28
   38089:	pop    rbx
   3808a:	pop    rbp
   3808b:	pop    r12
   3808d:	pop    r13
   3808f:	ret    
   38090:	cmp    WORD PTR [rip+0x24efc2],0x0        # 28705a <stdout@@GLIBC_2.2.5+0x2712>
   38098:	je     3806a <g_str_equal@plt+0x2adaa>
   3809a:	test   BYTE PTR [rip+0x24de00],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   380a1:	je     3806a <g_str_equal@plt+0x2adaa>
   380a3:	mov    rdi,rsp
   380a6:	xor    esi,esi
   380a8:	call   c3e0 <gettimeofday@plt>
   380ad:	mov    r13,QWORD PTR [rsp+0x8]
   380b2:	mov    r12,QWORD PTR [rsp]
   380b6:	call   c5b0 <getpid@plt>
   380bb:	lea    rdi,[rip+0x292c6]        # 61388 <_fini@@Base+0xec34>
   380c2:	mov    esi,eax
   380c4:	mov    r9,rbp
   380c7:	mov    r8,rbx
   380ca:	mov    rcx,r13
   380cd:	mov    rdx,r12
   380d0:	xor    eax,eax
   380d2:	call   431a0 <g_str_equal@plt+0x35ee0>
   380d7:	jmp    3806a <g_str_equal@plt+0x2adaa>
   380d9:	call   cd30 <__stack_chk_fail@plt>
   380de:	xchg   ax,ax
   380e0:	push   rbx
   380e1:	mov    esi,0x3
   380e6:	mov    ebx,edi
   380e8:	xor    eax,eax
   380ea:	call   d230 <fcntl@plt>
   380ef:	mov    edi,ebx
   380f1:	and    ah,0xf7
   380f4:	mov    esi,0x4
   380f9:	pop    rbx
   380fa:	mov    edx,eax
   380fc:	xor    eax,eax
   380fe:	jmp    d230 <fcntl@plt>
   38103:	nop    DWORD PTR [rax]
   38106:	nop    WORD PTR cs:[rax+rax*1+0x0]
   38110:	push   rbx
   38111:	mov    esi,0x3
   38116:	mov    ebx,edi
   38118:	xor    eax,eax
   3811a:	call   d230 <fcntl@plt>
   3811f:	mov    edi,ebx
   38121:	or     ah,0x8
   38124:	mov    esi,0x4
   38129:	pop    rbx
   3812a:	mov    edx,eax
   3812c:	xor    eax,eax
   3812e:	jmp    d230 <fcntl@plt>
   38133:	nop    DWORD PTR [rax]
   38136:	nop    WORD PTR cs:[rax+rax*1+0x0]
   38140:	sub    rsp,0x18
   38144:	mov    r8d,0x4
   3814a:	mov    edx,0x2
   3814f:	lea    rcx,[rsp+0x4]
   38154:	mov    esi,0x1
   38159:	mov    DWORD PTR [rsp+0x4],0x1
   38161:	mov    rax,QWORD PTR fs:0x28
   3816a:	mov    QWORD PTR [rsp+0x8],rax
   3816f:	xor    eax,eax
   38171:	call   c540 <setsockopt@plt>
   38176:	test   eax,eax
   38178:	jne    38191 <g_str_equal@plt+0x2aed1>
   3817a:	xor    eax,eax
   3817c:	mov    rdx,QWORD PTR [rsp+0x8]
   38181:	xor    rdx,QWORD PTR fs:0x28
   3818a:	jne    381b0 <g_str_equal@plt+0x2aef0>
   3818c:	add    rsp,0x18
   38190:	ret    
   38191:	lea    rcx,[rip+0x29478]        # 61610 <_fini@@Base+0xeebc>
   38198:	lea    rsi,[rip+0x29221]        # 613c0 <_fini@@Base+0xec6c>
   3819f:	lea    rdi,[rip+0x2936c]        # 61512 <_fini@@Base+0xedbe>
   381a6:	mov    edx,0xb4
   381ab:	call   c390 <__assert_fail@plt>
   381b0:	call   cd30 <__stack_chk_fail@plt>
   381b5:	nop
   381b6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   381c0:	push   rbx
   381c1:	xor    eax,eax
   381c3:	mov    esi,0x1
   381c8:	mov    ebx,edi
   381ca:	call   d230 <fcntl@plt>
   381cf:	cmp    eax,0xffffffff
   381d2:	je     381ee <g_str_equal@plt+0x2af2e>
   381d4:	or     eax,0x1
   381d7:	mov    esi,0x2
   381dc:	mov    edi,ebx
   381de:	mov    edx,eax
   381e0:	xor    eax,eax
   381e2:	call   d230 <fcntl@plt>
   381e7:	cmp    eax,0xffffffff
   381ea:	je     3820d <g_str_equal@plt+0x2af4d>
   381ec:	pop    rbx
   381ed:	ret    
   381ee:	lea    rcx,[rip+0x293fb]        # 615f0 <_fini@@Base+0xee9c>
   381f5:	lea    rsi,[rip+0x291c4]        # 613c0 <_fini@@Base+0xec6c>
   381fc:	lea    rdi,[rip+0x29318]        # 6151b <_fini@@Base+0xedc7>
   38203:	mov    edx,0xbd
   38208:	call   c390 <__assert_fail@plt>
   3820d:	lea    rcx,[rip+0x293dc]        # 615f0 <_fini@@Base+0xee9c>
   38214:	lea    rsi,[rip+0x291a5]        # 613c0 <_fini@@Base+0xec6c>
   3821b:	lea    rdi,[rip+0x292f9]        # 6151b <_fini@@Base+0xedc7>
   38222:	mov    edx,0xbf
   38227:	call   c390 <__assert_fail@plt>
   3822c:	nop    DWORD PTR [rax+0x0]
   38230:	push   rbp
   38231:	push   rbx
   38232:	mov    esi,0x80000
   38237:	mov    rbp,rdi
   3823a:	sub    rsp,0x8
   3823e:	call   c120 <pipe2@plt>
   38243:	cmp    eax,0xffffffff
   38246:	mov    ebx,eax
   38248:	je     38258 <g_str_equal@plt+0x2af98>
   3824a:	add    rsp,0x8
   3824e:	mov    eax,ebx
   38250:	pop    rbx
   38251:	pop    rbp
   38252:	ret    
   38253:	nop    DWORD PTR [rax+rax*1+0x0]
   38258:	call   cc80 <__errno_location@plt>
   3825d:	cmp    DWORD PTR [rax],0x26
   38260:	jne    3824a <g_str_equal@plt+0x2af8a>
   38262:	mov    rdi,rbp
   38265:	call   c930 <pipe@plt>
   3826a:	test   eax,eax
   3826c:	mov    ebx,eax
   3826e:	jne    3824a <g_str_equal@plt+0x2af8a>
   38270:	mov    edi,DWORD PTR [rbp+0x0]
   38273:	call   381c0 <g_str_equal@plt+0x2af00>
   38278:	mov    edi,DWORD PTR [rbp+0x4]
   3827b:	call   381c0 <g_str_equal@plt+0x2af00>
   38280:	add    rsp,0x8
   38284:	mov    eax,ebx
   38286:	pop    rbx
   38287:	pop    rbp
   38288:	ret    
   38289:	nop    DWORD PTR [rax+0x0]
   38290:	mov    rdx,rdi
   38293:	lea    rsi,[rip+0x29289]        # 61523 <_fini@@Base+0xedcf>
   3829a:	lea    rdi,[rip+0x29287]        # 61528 <_fini@@Base+0xedd4>
   382a1:	xor    eax,eax
   382a3:	jmp    c740 <g_strdup_printf@plt>
   382a8:	nop    DWORD PTR [rax+rax*1+0x0]
   382b0:	push   r12
   382b2:	push   rbp
   382b3:	mov    r12d,esi
   382b6:	push   rbx
   382b7:	mov    ebx,edi
   382b9:	sub    rsp,0x50
   382bd:	mov    rbp,rsp
   382c0:	mov    rsi,rbp
   382c3:	mov    rax,QWORD PTR fs:0x28
   382cc:	mov    QWORD PTR [rsp+0x48],rax
   382d1:	xor    eax,eax
   382d3:	call   cb60 <tcgetattr@plt>
   382d8:	test   r12b,r12b
   382db:	jne    38310 <g_str_equal@plt+0x2b050>
   382dd:	and    DWORD PTR [rsp+0xc],0xffff7fb5
   382e5:	xor    esi,esi
   382e7:	mov    rdx,rbp
   382ea:	mov    edi,ebx
   382ec:	call   c100 <tcsetattr@plt>
   382f1:	mov    rax,QWORD PTR [rsp+0x48]
   382f6:	xor    rax,QWORD PTR fs:0x28
   382ff:	jne    3831a <g_str_equal@plt+0x2b05a>
   38301:	add    rsp,0x50
   38305:	pop    rbx
   38306:	pop    rbp
   38307:	pop    r12
   38309:	ret    
   3830a:	nop    WORD PTR [rax+rax*1+0x0]
   38310:	or     DWORD PTR [rsp+0xc],0x804a
   38318:	jmp    382e5 <g_str_equal@plt+0x2b025>
   3831a:	call   cd30 <__stack_chk_fail@plt>
   3831f:	nop
   38320:	push   rbp
   38321:	push   rbx
   38322:	sub    rsp,0x1018
   38329:	mov    rax,QWORD PTR fs:0x28
   38332:	mov    QWORD PTR [rsp+0x1008],rax
   3833a:	xor    eax,eax
   3833c:	cmp    BYTE PTR [rip+0x24c8bd],0x0        # 284c00 <stdout@@GLIBC_2.2.5+0x2b8>
   38343:	jne    383dc <g_str_equal@plt+0x2b11c>
   38349:	mov    rbp,rdi
   3834c:	mov    rbx,rsp
   3834f:	lea    rdi,[rip+0x291e5]        # 6153b <_fini@@Base+0xede7>
   38356:	mov    edx,0xfff
   3835b:	mov    rsi,rbx
   3835e:	call   cb00 <readlink@plt>
   38363:	test   eax,eax
   38365:	jle    383b8 <g_str_equal@plt+0x2b0f8>
   38367:	cdqe   
   38369:	mov    rdi,rbx
   3836c:	mov    BYTE PTR [rsp+rax*1],0x0
   38370:	call   c180 <g_path_get_dirname@plt>
   38375:	lea    rdi,[rip+0x24c884]        # 284c00 <stdout@@GLIBC_2.2.5+0x2b8>
   3837c:	mov    rbx,rax
   3837f:	mov    rdx,rax
   38382:	mov    esi,0x1000
   38387:	call   329f0 <g_str_equal@plt+0x25730>
   3838c:	mov    rdi,rbx
   3838f:	call   d2b0 <g_free@plt>
   38394:	mov    rax,QWORD PTR [rsp+0x1008]
   3839c:	xor    rax,QWORD PTR fs:0x28
   383a5:	jne    383d7 <g_str_equal@plt+0x2b117>
   383a7:	add    rsp,0x1018
   383ae:	pop    rbx
   383af:	pop    rbp
   383b0:	ret    
   383b1:	nop    DWORD PTR [rax+0x0]
   383b8:	test   rbp,rbp
   383bb:	je     38394 <g_str_equal@plt+0x2b0d4>
   383bd:	mov    rdi,rbp
   383c0:	mov    edx,0x1000
   383c5:	mov    rsi,rbx
   383c8:	call   cfc0 <__realpath_chk@plt>
   383cd:	test   rax,rax
   383d0:	mov    rdi,rax
   383d3:	jne    38370 <g_str_equal@plt+0x2b0b0>
   383d5:	jmp    38394 <g_str_equal@plt+0x2b0d4>
   383d7:	call   cd30 <__stack_chk_fail@plt>
   383dc:	lea    rcx,[rip+0x291ed]        # 615d0 <_fini@@Base+0xee7c>
   383e3:	lea    rsi,[rip+0x28fd6]        # 613c0 <_fini@@Base+0xec6c>
   383ea:	lea    rdi,[rip+0x2913d]        # 6152e <_fini@@Base+0xedda>
   383f1:	mov    edx,0xf6
   383f6:	call   c390 <__assert_fail@plt>
   383fb:	nop    DWORD PTR [rax+rax*1+0x0]
   38400:	lea    rdi,[rip+0x24c7f9]        # 284c00 <stdout@@GLIBC_2.2.5+0x2b8>
   38407:	jmp    c370 <g_strdup@plt>
   3840c:	nop    DWORD PTR [rax+0x0]
   38410:	push   r15
   38412:	push   r14
   38414:	mov    r15,r8
   38417:	push   r13
   38419:	push   r12
   3841b:	mov    r13,rdx
   3841e:	push   rbp
   3841f:	push   rbx
   38420:	mov    rbp,rsi
   38423:	movsxd r14,ecx
   38426:	sub    rsp,0x168
   3842d:	mov    QWORD PTR [rsp+0x18],r8
   38432:	mov    rax,QWORD PTR fs:0x28
   3843b:	mov    QWORD PTR [rsp+0x158],rax
   38443:	xor    eax,eax
   38445:	call   52210 <g_str_equal@plt+0x44f50>
   3844a:	lea    rsi,[rsp+0x20]
   3844f:	mov    r12,rax
   38452:	mov    ecx,0x12
   38457:	xor    eax,eax
   38459:	lea    rdx,[rsi+0x8]
   3845d:	mov    rdi,rdx
   38460:	rep stos QWORD PTR es:[rdi],rax
   38463:	lea    rax,[rip+0xfffffffffffff886]        # 37cf0 <g_str_equal@plt+0x2aa30>
   3846a:	mov    edi,0x7
   3846f:	mov    QWORD PTR [rsp+0x20],rax
   38474:	lea    rax,[rsp+0xc0]
   3847c:	mov    rdx,rax
   3847f:	mov    QWORD PTR [rsp+0x10],rax
   38484:	call   ca50 <sigaction@plt>
   38489:	test   eax,eax
   3848b:	jne    38610 <g_str_equal@plt+0x2b350>
   38491:	mov    edi,0x54
   38496:	mov    ebx,eax
   38498:	mov    BYTE PTR [rip+0x24d761],0x0        # 285c00 <stdout@@GLIBC_2.2.5+0x12b8>
   3849f:	call   c580 <sysconf@plt>
   384a4:	test   rax,rax
   384a7:	jle    38640 <g_str_equal@plt+0x2b380>
   384ad:	cmp    r14,0x10
   384b1:	mov    edx,0x10
   384b6:	cmovg  r14,rdx
   384ba:	cmp    r14,rax
   384bd:	cmovle rax,r14
   384c1:	mov    rdi,rax
   384c4:	mov    ecx,eax
   384c6:	lea    rax,[r12+r13*1-0x1]
   384cb:	xor    edx,edx
   384cd:	mov    esi,0xe8
   384d2:	mov    DWORD PTR [rip+0x24d72c],ecx        # 285c04 <stdout@@GLIBC_2.2.5+0x12bc>
   384d8:	div    r12
   384db:	mov    r14,rax
   384de:	call   c690 <g_malloc0_n@plt>
   384e3:	movsxd rcx,DWORD PTR [rip+0x24d71a]        # 285c04 <stdout@@GLIBC_2.2.5+0x12bc>
   384ea:	xor    edx,edx
   384ec:	mov    rdi,rax
   384ef:	mov    QWORD PTR [rip+0x24d712],rax        # 285c08 <stdout@@GLIBC_2.2.5+0x12c0>
   384f6:	mov    rax,r14
   384f9:	div    rcx
   384fc:	mov    rsi,rcx
   384ff:	mov    r13,rax
   38502:	mov    rax,r12
   38505:	imul   rax,r13
   38509:	test   ecx,ecx
   3850b:	mov    QWORD PTR [rsp+0x8],rax
   38510:	jle    385ae <g_str_equal@plt+0x2b2ee>
   38516:	xor    r15d,r15d
   38519:	nop    DWORD PTR [rax+0x0]
   38520:	movsxd rcx,r15d
   38523:	sub    esi,0x1
   38526:	mov    rdx,r13
   38529:	imul   rcx,rcx,0xe8
   38530:	add    rcx,rdi
   38533:	cmp    esi,r15d
   38536:	lea    rsi,[rip+0x2900d]        # 6154a <_fini@@Base+0xedf6>
   3853d:	cmove  rdx,r14
   38541:	lea    rdi,[rcx+0x18]
   38545:	mov    QWORD PTR [rcx],rbp
   38548:	mov    QWORD PTR [rcx+0x8],rdx
   3854c:	lea    rdx,[rip+0xfffffffffffff6bd]        # 37c10 <g_str_equal@plt+0x2a950>
   38553:	xor    r8d,r8d
   38556:	mov    QWORD PTR [rcx+0x10],r12
   3855a:	add    r15d,0x1
   3855e:	sub    r14,r13
   38561:	call   39790 <g_str_equal@plt+0x2c4d0>
   38566:	mov    esi,DWORD PTR [rip+0x24d698]        # 285c04 <stdout@@GLIBC_2.2.5+0x12bc>
   3856c:	add    rbp,QWORD PTR [rsp+0x8]
   38571:	mov    rdi,QWORD PTR [rip+0x24d690]        # 285c08 <stdout@@GLIBC_2.2.5+0x12c0>
   38578:	cmp    esi,r15d
   3857b:	jg     38520 <g_str_equal@plt+0x2b260>
   3857d:	test   esi,esi
   3857f:	jle    385ae <g_str_equal@plt+0x2b2ee>
   38581:	nop    DWORD PTR [rax+0x0]
   38588:	movsxd rax,ebx
   3858b:	add    ebx,0x1
   3858e:	imul   rax,rax,0xe8
   38595:	lea    rdi,[rdi+rax*1+0x18]
   3859a:	call   398f0 <g_str_equal@plt+0x2c630>
   3859f:	cmp    ebx,DWORD PTR [rip+0x24d65f]        # 285c04 <stdout@@GLIBC_2.2.5+0x12bc>
   385a5:	mov    rdi,QWORD PTR [rip+0x24d65c]        # 285c08 <stdout@@GLIBC_2.2.5+0x12c0>
   385ac:	jl     38588 <g_str_equal@plt+0x2b2c8>
   385ae:	call   d2b0 <g_free@plt>
   385b3:	cmp    BYTE PTR [rip+0x24d646],0x0        # 285c00 <stdout@@GLIBC_2.2.5+0x12b8>
   385ba:	mov    QWORD PTR [rip+0x24d643],0x0        # 285c08 <stdout@@GLIBC_2.2.5+0x12c0>
   385c5:	jne    38650 <g_str_equal@plt+0x2b390>
   385cb:	mov    rsi,QWORD PTR [rsp+0x10]
   385d0:	xor    edx,edx
   385d2:	mov    edi,0x7
   385d7:	call   ca50 <sigaction@plt>
   385dc:	test   eax,eax
   385de:	jne    38680 <g_str_equal@plt+0x2b3c0>
   385e4:	mov    rax,QWORD PTR [rsp+0x158]
   385ec:	xor    rax,QWORD PTR fs:0x28
   385f5:	jne    3867b <g_str_equal@plt+0x2b3bb>
   385fb:	add    rsp,0x168
   38602:	pop    rbx
   38603:	pop    rbp
   38604:	pop    r12
   38606:	pop    r13
   38608:	pop    r14
   3860a:	pop    r15
   3860c:	ret    
   3860d:	nop    DWORD PTR [rax]
   38610:	call   cc80 <__errno_location@plt>
   38615:	mov    r8d,DWORD PTR [rax]
   38618:	lea    r9,[rip+0x28de1]        # 61400 <_fini@@Base+0xecac>
   3861f:	lea    rcx,[rip+0x28f9a]        # 615c0 <_fini@@Base+0xee6c>
   38626:	lea    rsi,[rip+0x28d93]        # 613c0 <_fini@@Base+0xec6c>
   3862d:	mov    edx,0x198
   38632:	mov    rdi,r15
   38635:	xor    eax,eax
   38637:	call   3a140 <g_str_equal@plt+0x2ce80>
   3863c:	jmp    385e4 <g_str_equal@plt+0x2b324>
   3863e:	xchg   ax,ax
   38640:	mov    edi,0x1
   38645:	mov    ecx,0x1
   3864a:	jmp    384c6 <g_str_equal@plt+0x2b206>
   3864f:	nop
   38650:	mov    rdi,QWORD PTR [rsp+0x18]
   38655:	lea    r8,[rip+0x28ddc]        # 61438 <_fini@@Base+0xece4>
   3865c:	lea    rcx,[rip+0x28f5d]        # 615c0 <_fini@@Base+0xee6c>
   38663:	lea    rsi,[rip+0x28d56]        # 613c0 <_fini@@Base+0xec6c>
   3866a:	mov    edx,0x19f
   3866f:	xor    eax,eax
   38671:	call   3a090 <g_str_equal@plt+0x2cdd0>
   38676:	jmp    385cb <g_str_equal@plt+0x2b30b>
   3867b:	call   cd30 <__stack_chk_fail@plt>
   38680:	lea    rdi,[rip+0x28e09]        # 61490 <_fini@@Base+0xed3c>
   38687:	call   d0d0 <perror@plt>
   3868c:	mov    edi,0x1
   38691:	call   c360 <exit@plt>
   38696:	nop    WORD PTR cs:[rax+rax*1+0x0]
   386a0:	push   rbx
   386a1:	mov    esi,edi
   386a3:	lea    rdi,[rip+0x28eac]        # 61556 <_fini@@Base+0xee02>
   386aa:	sub    rsp,0x20
   386ae:	mov    rax,QWORD PTR fs:0x28
   386b7:	mov    QWORD PTR [rsp+0x18],rax
   386bc:	xor    eax,eax
   386be:	mov    QWORD PTR [rsp+0x8],0x0
   386c7:	call   c740 <g_strdup_printf@plt>
   386cc:	lea    rdx,[rsp+0x10]
   386d1:	lea    rsi,[rsp+0x8]
   386d6:	xor    ecx,ecx
   386d8:	mov    rbx,rax
   386db:	mov    rdi,rax
   386de:	call   ce70 <g_file_get_contents@plt>
   386e3:	mov    rdi,rbx
   386e6:	call   d2b0 <g_free@plt>
   386eb:	mov    rcx,QWORD PTR [rsp+0x18]
   386f0:	xor    rcx,QWORD PTR fs:0x28
   386f9:	mov    rax,QWORD PTR [rsp+0x8]
   386fe:	jne    38706 <g_str_equal@plt+0x2b446>
   38700:	add    rsp,0x20
   38704:	pop    rbx
   38705:	ret    
   38706:	call   cd30 <__stack_chk_fail@plt>
   3870b:	nop    DWORD PTR [rax+rax*1+0x0]
   38710:	push   r15
   38712:	push   r14
   38714:	mov    r15,rdi
   38717:	push   r13
   38719:	push   r12
   3871b:	push   rbp
   3871c:	push   rbx
   3871d:	sub    rsp,0x1b8
   38724:	lea    r12,[rsp+0x90]
   3872c:	lea    rbx,[rsp+0x10]
   38731:	mov    rax,QWORD PTR fs:0x28
   3873a:	mov    QWORD PTR [rsp+0x1a8],rax
   38742:	xor    eax,eax
   38744:	mov    rdi,r12
   38747:	call   c4b0 <sigfillset@plt>
   3874c:	mov    rdx,rbx
   3874f:	mov    rsi,r12
   38752:	mov    edi,0x2
   38757:	call   d040 <pthread_sigmask@plt>
   3875c:	mov    ebp,eax
   3875e:	call   cc80 <__errno_location@plt>
   38763:	test   ebp,ebp
   38765:	mov    r14,rax
   38768:	jne    38831 <g_str_equal@plt+0x2b571>
   3876e:	call   d000 <fork@plt>
   38773:	test   eax,eax
   38775:	mov    r13d,eax
   38778:	js     38860 <g_str_equal@plt+0x2b5a0>
   3877e:	jne    38820 <g_str_equal@plt+0x2b560>
   38784:	lea    rbp,[rsp+0x110]
   3878c:	mov    ebx,0x1
   38791:	mov    QWORD PTR [rsp+0x110],0x0
   3879d:	mov    DWORD PTR [rsp+0x198],0x0
   387a8:	lea    rdi,[rbp+0x8]
   387ac:	call   d010 <sigemptyset@plt>
   387b1:	nop    DWORD PTR [rax+0x0]
   387b8:	xor    edx,edx
   387ba:	mov    edi,ebx
   387bc:	mov    rsi,rbp
   387bf:	add    rbx,0x1
   387c3:	call   ca50 <sigaction@plt>
   387c8:	cmp    rbx,0x41
   387cc:	jne    387b8 <g_str_equal@plt+0x2b4f8>
   387ce:	mov    rdi,r12
   387d1:	call   d010 <sigemptyset@plt>
   387d6:	xor    edx,edx
   387d8:	mov    rsi,r12
   387db:	mov    edi,0x2
   387e0:	call   d040 <pthread_sigmask@plt>
   387e5:	test   eax,eax
   387e7:	jne    388ac <g_str_equal@plt+0x2b5ec>
   387ed:	mov    rcx,QWORD PTR [rsp+0x1a8]
   387f5:	xor    rcx,QWORD PTR fs:0x28
   387fe:	mov    eax,r13d
   38801:	jne    388a7 <g_str_equal@plt+0x2b5e7>
   38807:	add    rsp,0x1b8
   3880e:	pop    rbx
   3880f:	pop    rbp
   38810:	pop    r12
   38812:	pop    r13
   38814:	pop    r14
   38816:	pop    r15
   38818:	ret    
   38819:	nop    DWORD PTR [rax+0x0]
   38820:	xor    edx,edx
   38822:	mov    rsi,rbx
   38825:	mov    edi,0x2
   3882a:	call   d040 <pthread_sigmask@plt>
   3882f:	jmp    387ed <g_str_equal@plt+0x2b52d>
   38831:	mov    r8d,DWORD PTR [rax]
   38834:	lea    r9,[rip+0x28d2c]        # 61567 <_fini@@Base+0xee13>
   3883b:	lea    rcx,[rip+0x28d6e]        # 615b0 <_fini@@Base+0xee5c>
   38842:	lea    rsi,[rip+0x28b77]        # 613c0 <_fini@@Base+0xec6c>
   38849:	mov    edx,0x1d3
   3884e:	mov    rdi,r15
   38851:	xor    eax,eax
   38853:	mov    r13d,0xffffffff
   38859:	call   3a140 <g_str_equal@plt+0x2ce80>
   3885e:	jmp    387ed <g_str_equal@plt+0x2b52d>
   38860:	mov    ebp,DWORD PTR [r14]
   38863:	xor    edx,edx
   38865:	mov    rsi,rbx
   38868:	mov    edi,0x2
   3886d:	mov    r13d,0xffffffff
   38873:	call   d040 <pthread_sigmask@plt>
   38878:	lea    r9,[rip+0x28cfd]        # 6157c <_fini@@Base+0xee28>
   3887f:	lea    rcx,[rip+0x28d2a]        # 615b0 <_fini@@Base+0xee5c>
   38886:	lea    rsi,[rip+0x28b33]        # 613c0 <_fini@@Base+0xec6c>
   3888d:	mov    r8d,ebp
   38890:	mov    edx,0x1df
   38895:	mov    rdi,r15
   38898:	xor    eax,eax
   3889a:	call   3a140 <g_str_equal@plt+0x2ce80>
   3889f:	mov    DWORD PTR [r14],ebp
   388a2:	jmp    387ed <g_str_equal@plt+0x2b52d>
   388a7:	call   cd30 <__stack_chk_fail@plt>
   388ac:	mov    r8d,DWORD PTR [r14]
   388af:	lea    rdi,[rsp+0x8]
   388b4:	lea    r9,[rip+0x28cdb]        # 61596 <_fini@@Base+0xee42>
   388bb:	lea    rcx,[rip+0x28cee]        # 615b0 <_fini@@Base+0xee5c>
   388c2:	lea    rsi,[rip+0x28af7]        # 613c0 <_fini@@Base+0xec6c>
   388c9:	mov    edx,0x203
   388ce:	xor    eax,eax
   388d0:	mov    QWORD PTR [rsp+0x8],0x0
   388d9:	call   3a140 <g_str_equal@plt+0x2ce80>
   388de:	mov    rdi,QWORD PTR [rsp+0x8]
   388e3:	call   39e30 <g_str_equal@plt+0x2cb70>
   388e8:	mov    edi,0x1
   388ed:	call   c4f0 <_exit@plt>
   388f2:	nop    DWORD PTR [rax+0x0]
   388f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   38900:	push   rbp
   38901:	push   rbx
   38902:	mov    rbp,rdi
   38905:	sub    rsp,0x8
   38909:	call   c900 <getpagesize@plt>
   3890e:	mov    edi,0x4b
   38913:	movsxd rbx,eax
   38916:	call   c580 <sysconf@plt>
   3891b:	mov    edx,0x0
   38920:	test   rax,rax
   38923:	mov    r8d,0xffffffff
   38929:	cmovs  rax,rdx
   3892d:	cmp    QWORD PTR [rbp+0x0],rax
   38931:	mov    ecx,0x22
   38936:	cmovae rax,QWORD PTR [rbp+0x0]
   3893b:	mov    edx,0x3
   38940:	xor    r9d,r9d
   38943:	xor    edi,edi
   38945:	lea    rsi,[rbx+rax*1-0x1]
   3894a:	mov    rax,rbx
   3894d:	neg    rax
   38950:	and    rsi,rax
   38953:	add    rsi,rbx
   38956:	mov    QWORD PTR [rbp+0x0],rsi
   3895a:	call   c210 <mmap64@plt>
   3895f:	cmp    rax,0xffffffffffffffff
   38963:	je     38983 <g_str_equal@plt+0x2b6c3>
   38965:	xor    edx,edx
   38967:	mov    rsi,rbx
   3896a:	mov    rdi,rax
   3896d:	mov    rbp,rax
   38970:	call   c110 <mprotect@plt>
   38975:	test   eax,eax
   38977:	jne    38994 <g_str_equal@plt+0x2b6d4>
   38979:	add    rsp,0x8
   3897d:	mov    rax,rbp
   38980:	pop    rbx
   38981:	pop    rbp
   38982:	ret    
   38983:	lea    rdi,[rip+0x28b3e]        # 614c8 <_fini@@Base+0xed74>
   3898a:	call   d0d0 <perror@plt>
   3898f:	call   c270 <abort@plt>
   38994:	lea    rdi,[rip+0x28b55]        # 614f0 <_fini@@Base+0xed9c>
   3899b:	call   d0d0 <perror@plt>
   389a0:	call   c270 <abort@plt>
   389a5:	nop
   389a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   389b0:	jmp    ce50 <munmap@plt>
   389b5:	nop
   389b6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   389c0:	sub    rsp,0x98
   389c7:	mov    r8,rdi
   389ca:	lea    rdi,[rsp+0x14]
   389cf:	lea    rcx,[rsp+0xc]
   389d4:	mov    QWORD PTR [rsp+0xc],0x0
   389dd:	mov    rax,QWORD PTR fs:0x28
   389e6:	mov    QWORD PTR [rsp+0x88],rax
   389ee:	xor    eax,eax
   389f0:	and    rdi,0xfffffffffffffff8
   389f4:	mov    QWORD PTR [rsp+0x78],0x0
   389fd:	sub    rcx,rdi
   38a00:	add    ecx,0x74
   38a03:	shr    ecx,0x3
   38a06:	rep stos QWORD PTR es:[rdi],rax
   38a09:	mov    eax,DWORD PTR [rsi+0x4]
   38a0c:	mov    edi,DWORD PTR [rsi]
   38a0e:	mov    DWORD PTR [rsp+0x4],eax
   38a12:	mov    eax,DWORD PTR [rsi+0x8]
   38a15:	mov    DWORD PTR [rsp],edi
   38a18:	lea    edx,[rax+0x1]
   38a1b:	mov    DWORD PTR [rsp+0x8],eax
   38a1f:	cmp    edx,0x1
   38a22:	jbe    38a50 <g_str_equal@plt+0x2b790>
   38a24:	test   eax,eax
   38a26:	jle    38a50 <g_str_equal@plt+0x2b790>
   38a28:	cmp    edi,0xb
   38a2b:	jbe    38a88 <g_str_equal@plt+0x2b7c8>
   38a2d:	cmp    edi,0x11
   38a30:	jne    38a5e <g_str_equal@plt+0x2b79e>
   38a32:	mov    eax,DWORD PTR [rsi+0xc]
   38a35:	mov    DWORD PTR [rsp+0x10],eax
   38a39:	mov    eax,DWORD PTR [rsi+0x28]
   38a3c:	mov    DWORD PTR [rsp+0x18],eax
   38a40:	mov    eax,DWORD PTR [rsi+0x10]
   38a43:	mov    DWORD PTR [rsp+0x14],eax
   38a47:	jmp    38a5e <g_str_equal@plt+0x2b79e>
   38a49:	nop    DWORD PTR [rax+0x0]
   38a50:	mov    eax,DWORD PTR [rsi+0xc]
   38a53:	mov    DWORD PTR [rsp+0x10],eax
   38a57:	mov    eax,DWORD PTR [rsi+0x10]
   38a5a:	mov    DWORD PTR [rsp+0x14],eax
   38a5e:	xor    edx,edx
   38a60:	mov    rsi,rsp
   38a63:	call   QWORD PTR [r8]
   38a66:	mov    rax,QWORD PTR [rsp+0x88]
   38a6e:	xor    rax,QWORD PTR fs:0x28
   38a77:	jne    38a9e <g_str_equal@plt+0x2b7de>
   38a79:	add    rsp,0x98
   38a80:	ret    
   38a81:	nop    DWORD PTR [rax+0x0]
   38a88:	mov    eax,0x990
   38a8d:	bt     rax,rdi
   38a91:	jae    38a5e <g_str_equal@plt+0x2b79e>
   38a93:	mov    rax,QWORD PTR [rsi+0x48]
   38a97:	mov    QWORD PTR [rsp+0x10],rax
   38a9c:	jmp    38a5e <g_str_equal@plt+0x2b79e>
   38a9e:	call   cd30 <__stack_chk_fail@plt>
   38aa3:	nop    WORD PTR cs:[rax+rax*1+0x0]
   38aad:	nop    DWORD PTR [rax]
   38ab0:	sub    rsp,0x18
   38ab4:	xor    esi,esi
   38ab6:	mov    QWORD PTR [rsp],rdi
   38aba:	mov    rdi,rsp
   38abd:	mov    rax,QWORD PTR fs:0x28
   38ac6:	mov    QWORD PTR [rsp+0x8],rax
   38acb:	xor    eax,eax
   38acd:	call   3ef30 <g_str_equal@plt+0x31c70>
   38ad2:	mov    rax,QWORD PTR [rsp+0x8]
   38ad7:	xor    rax,QWORD PTR fs:0x28
   38ae0:	jne    38ae7 <g_str_equal@plt+0x2b827>
   38ae2:	add    rsp,0x18
   38ae6:	ret    
   38ae7:	call   cd30 <__stack_chk_fail@plt>
   38aec:	nop    DWORD PTR [rax+0x0]
   38af0:	push   r13
   38af2:	push   r12
   38af4:	push   rbx
   38af5:	mov    rbx,rdi
   38af8:	sub    rsp,0x10
   38afc:	cmp    BYTE PTR [rip+0x24d111],0x0        # 285c14 <stdout@@GLIBC_2.2.5+0x12cc>
   38b03:	mov    r12,QWORD PTR [rdi]
   38b06:	mov    r13,QWORD PTR [rdi+0x8]
   38b0a:	mov    rdi,QWORD PTR [rdi+0x10]
   38b0e:	je     38b33 <g_str_equal@plt+0x2b873>
   38b10:	test   rdi,rdi
   38b13:	je     38b33 <g_str_equal@plt+0x2b873>
   38b15:	mov    QWORD PTR [rsp+0x8],rdi
   38b1a:	call   c950 <pthread_self@plt>
   38b1f:	mov    rdi,QWORD PTR [rsp+0x8]
   38b24:	mov    rsi,rdi
   38b27:	mov    rdi,rax
   38b2a:	call   c4c0 <pthread_setname_np@plt>
   38b2f:	mov    rdi,QWORD PTR [rbx+0x10]
   38b33:	call   d2b0 <g_free@plt>
   38b38:	mov    rdi,rbx
   38b3b:	call   d2b0 <g_free@plt>
   38b40:	add    rsp,0x10
   38b44:	mov    rdi,r13
   38b47:	mov    rax,r12
   38b4a:	pop    rbx
   38b4b:	pop    r12
   38b4d:	pop    r13
   38b4f:	jmp    rax
   38b51:	nop    DWORD PTR [rax+rax*1+0x0]
   38b56:	nop    WORD PTR cs:[rax+rax*1+0x0]
   38b60:	mov    BYTE PTR [rip+0x24d0ad],dil        # 285c14 <stdout@@GLIBC_2.2.5+0x12cc>
   38b67:	ret    
   38b68:	nop    DWORD PTR [rax+rax*1+0x0]
   38b70:	push   rbx
   38b71:	xor    esi,esi
   38b73:	mov    rbx,rdi
   38b76:	call   c5c0 <pthread_mutex_init@plt>
   38b7b:	test   eax,eax
   38b7d:	jne    38b85 <g_str_equal@plt+0x2b8c5>
   38b7f:	mov    BYTE PTR [rbx+0x28],0x1
   38b83:	pop    rbx
   38b84:	ret    
   38b85:	lea    rsi,[rip+0x28f94]        # 61b20 <_fini@@Base+0xf3cc>
   38b8c:	mov    edi,eax
   38b8e:	call   d532 <g_str_equal@plt+0x272>
   38b93:	nop    DWORD PTR [rax]
   38b96:	nop    WORD PTR cs:[rax+rax*1+0x0]
   38ba0:	sub    rsp,0x8
   38ba4:	cmp    BYTE PTR [rdi+0x28],0x0
   38ba8:	je     38bbc <g_str_equal@plt+0x2b8fc>
   38baa:	mov    BYTE PTR [rdi+0x28],0x0
   38bae:	call   d130 <pthread_mutex_destroy@plt>
   38bb3:	test   eax,eax
   38bb5:	jne    38bdb <g_str_equal@plt+0x2b91b>
   38bb7:	add    rsp,0x8
   38bbb:	ret    
   38bbc:	lea    rcx,[rip+0x28f3d]        # 61b00 <_fini@@Base+0xf3ac>
   38bc3:	lea    rsi,[rip+0x28ab6]        # 61680 <_fini@@Base+0xef2c>
   38bca:	lea    rdi,[rip+0x28a63]        # 61634 <_fini@@Base+0xeee0>
   38bd1:	mov    edx,0x35
   38bd6:	call   c390 <__assert_fail@plt>
   38bdb:	lea    rsi,[rip+0x28efe]        # 61ae0 <_fini@@Base+0xf38c>
   38be2:	mov    edi,eax
   38be4:	call   d532 <g_str_equal@plt+0x272>
   38be9:	nop    DWORD PTR [rax+0x0]
   38bf0:	push   r14
   38bf2:	push   r13
   38bf4:	push   r12
   38bf6:	push   rbp
   38bf7:	push   rbx
   38bf8:	sub    rsp,0x20
   38bfc:	mov    rax,QWORD PTR fs:0x28
   38c05:	mov    QWORD PTR [rsp+0x18],rax
   38c0a:	xor    eax,eax
   38c0c:	cmp    BYTE PTR [rdi+0x28],0x0
   38c10:	je     38d24 <g_str_equal@plt+0x2ba64>
   38c16:	mov    r8d,DWORD PTR [rip+0x24bebb]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   38c1d:	mov    rbx,rdi
   38c20:	mov    rbp,rsi
   38c23:	mov    r12d,edx
   38c26:	test   r8d,r8d
   38c29:	jne    38c70 <g_str_equal@plt+0x2b9b0>
   38c2b:	mov    rdi,rbx
   38c2e:	call   d0a0 <pthread_mutex_lock@plt>
   38c33:	test   eax,eax
   38c35:	jne    38d48 <g_str_equal@plt+0x2ba88>
   38c3b:	mov    ecx,DWORD PTR [rip+0x24be97]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   38c41:	test   ecx,ecx
   38c43:	jne    38cc8 <g_str_equal@plt+0x2ba08>
   38c49:	mov    rax,QWORD PTR [rsp+0x18]
   38c4e:	xor    rax,QWORD PTR fs:0x28
   38c57:	jne    38d43 <g_str_equal@plt+0x2ba83>
   38c5d:	add    rsp,0x20
   38c61:	pop    rbx
   38c62:	pop    rbp
   38c63:	pop    r12
   38c65:	pop    r13
   38c67:	pop    r14
   38c69:	ret    
   38c6a:	nop    WORD PTR [rax+rax*1+0x0]
   38c70:	cmp    WORD PTR [rip+0x24e3ca],0x0        # 287042 <stdout@@GLIBC_2.2.5+0x26fa>
   38c78:	je     38c2b <g_str_equal@plt+0x2b96b>
   38c7a:	test   BYTE PTR [rip+0x24d220],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   38c81:	je     38c2b <g_str_equal@plt+0x2b96b>
   38c83:	mov    rdi,rsp
   38c86:	xor    esi,esi
   38c88:	call   c3e0 <gettimeofday@plt>
   38c8d:	mov    r14,QWORD PTR [rsp+0x8]
   38c92:	mov    r13,QWORD PTR [rsp]
   38c96:	call   c5b0 <getpid@plt>
   38c9b:	sub    rsp,0x8
   38c9f:	lea    rdi,[rip+0x28a22]        # 616c8 <_fini@@Base+0xef74>
   38ca6:	mov    esi,eax
   38ca8:	push   r12
   38caa:	mov    r9,rbp
   38cad:	mov    r8,rbx
   38cb0:	mov    rcx,r14
   38cb3:	mov    rdx,r13
   38cb6:	xor    eax,eax
   38cb8:	call   431a0 <g_str_equal@plt+0x35ee0>
   38cbd:	pop    rsi
   38cbe:	pop    rdi
   38cbf:	jmp    38c2b <g_str_equal@plt+0x2b96b>
   38cc4:	nop    DWORD PTR [rax+0x0]
   38cc8:	cmp    WORD PTR [rip+0x24e370],0x0        # 287040 <stdout@@GLIBC_2.2.5+0x26f8>
   38cd0:	je     38c49 <g_str_equal@plt+0x2b989>
   38cd6:	test   BYTE PTR [rip+0x24d1c4],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   38cdd:	je     38c49 <g_str_equal@plt+0x2b989>
   38ce3:	mov    rdi,rsp
   38ce6:	xor    esi,esi
   38ce8:	call   c3e0 <gettimeofday@plt>
   38ced:	mov    r14,QWORD PTR [rsp+0x8]
   38cf2:	mov    r13,QWORD PTR [rsp]
   38cf6:	call   c5b0 <getpid@plt>
   38cfb:	sub    rsp,0x8
   38cff:	lea    rdi,[rip+0x28a02]        # 61708 <_fini@@Base+0xefb4>
   38d06:	mov    esi,eax
   38d08:	push   r12
   38d0a:	mov    rdx,r13
   38d0d:	mov    r9,rbp
   38d10:	mov    r8,rbx
   38d13:	mov    rcx,r14
   38d16:	xor    eax,eax
   38d18:	call   431a0 <g_str_equal@plt+0x35ee0>
   38d1d:	pop    rax
   38d1e:	pop    rdx
   38d1f:	jmp    38c49 <g_str_equal@plt+0x2b989>
   38d24:	lea    rcx,[rip+0x28d95]        # 61ac0 <_fini@@Base+0xf36c>
   38d2b:	lea    rsi,[rip+0x2894e]        # 61680 <_fini@@Base+0xef2c>
   38d32:	lea    rdi,[rip+0x288fb]        # 61634 <_fini@@Base+0xeee0>
   38d39:	mov    edx,0x40
   38d3e:	call   c390 <__assert_fail@plt>
   38d43:	call   cd30 <__stack_chk_fail@plt>
   38d48:	lea    rsi,[rip+0x28d51]        # 61aa0 <_fini@@Base+0xf34c>
   38d4f:	mov    edi,eax
   38d51:	call   d532 <g_str_equal@plt+0x272>
   38d56:	nop    WORD PTR cs:[rax+rax*1+0x0]
   38d60:	push   r14
   38d62:	push   r13
   38d64:	push   r12
   38d66:	push   rbp
   38d67:	push   rbx
   38d68:	sub    rsp,0x20
   38d6c:	mov    rax,QWORD PTR fs:0x28
   38d75:	mov    QWORD PTR [rsp+0x18],rax
   38d7a:	xor    eax,eax
   38d7c:	cmp    BYTE PTR [rdi+0x28],0x0
   38d80:	je     38e36 <g_str_equal@plt+0x2bb76>
   38d86:	mov    rbx,rdi
   38d89:	mov    rbp,rsi
   38d8c:	mov    r12d,edx
   38d8f:	call   c9a0 <pthread_mutex_trylock@plt>
   38d94:	test   eax,eax
   38d96:	je     38dd0 <g_str_equal@plt+0x2bb10>
   38d98:	cmp    eax,0x10
   38d9b:	jne    38e5a <g_str_equal@plt+0x2bb9a>
   38da1:	mov    eax,0xfffffff0
   38da6:	mov    rcx,QWORD PTR [rsp+0x18]
   38dab:	xor    rcx,QWORD PTR fs:0x28
   38db4:	jne    38e55 <g_str_equal@plt+0x2bb95>
   38dba:	add    rsp,0x20
   38dbe:	pop    rbx
   38dbf:	pop    rbp
   38dc0:	pop    r12
   38dc2:	pop    r13
   38dc4:	pop    r14
   38dc6:	ret    
   38dc7:	nop    WORD PTR [rax+rax*1+0x0]
   38dd0:	mov    eax,DWORD PTR [rip+0x24bd02]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   38dd6:	test   eax,eax
   38dd8:	je     38da6 <g_str_equal@plt+0x2bae6>
   38dda:	xor    eax,eax
   38ddc:	cmp    WORD PTR [rip+0x24e25c],0x0        # 287040 <stdout@@GLIBC_2.2.5+0x26f8>
   38de4:	je     38da6 <g_str_equal@plt+0x2bae6>
   38de6:	mov    eax,DWORD PTR [rip+0x24d0b4]        # 285ea0 <stdout@@GLIBC_2.2.5+0x1558>
   38dec:	and    eax,0x8000
   38df1:	je     38da6 <g_str_equal@plt+0x2bae6>
   38df3:	mov    rdi,rsp
   38df6:	xor    esi,esi
   38df8:	call   c3e0 <gettimeofday@plt>
   38dfd:	mov    r14,QWORD PTR [rsp+0x8]
   38e02:	mov    r13,QWORD PTR [rsp]
   38e06:	call   c5b0 <getpid@plt>
   38e0b:	sub    rsp,0x8
   38e0f:	lea    rdi,[rip+0x288f2]        # 61708 <_fini@@Base+0xefb4>
   38e16:	mov    esi,eax
   38e18:	push   r12
   38e1a:	mov    rdx,r13
   38e1d:	mov    r9,rbp
   38e20:	mov    r8,rbx
   38e23:	mov    rcx,r14
   38e26:	xor    eax,eax
   38e28:	call   431a0 <g_str_equal@plt+0x35ee0>
   38e2d:	pop    rax
   38e2e:	xor    eax,eax
   38e30:	pop    rdx
   38e31:	jmp    38da6 <g_str_equal@plt+0x2bae6>
   38e36:	lea    rcx,[rip+0x28c43]        # 61a80 <_fini@@Base+0xf32c>
   38e3d:	lea    rsi,[rip+0x2883c]        # 61680 <_fini@@Base+0xef2c>
   38e44:	lea    rdi,[rip+0x287e9]        # 61634 <_fini@@Base+0xeee0>
   38e4b:	mov    edx,0x4c
   38e50:	call   c390 <__assert_fail@plt>
   38e55:	call   cd30 <__stack_chk_fail@plt>
   38e5a:	lea    rsi,[rip+0x28bff]        # 61a60 <_fini@@Base+0xf30c>
   38e61:	mov    edi,eax
   38e63:	call   d532 <g_str_equal@plt+0x272>
   38e68:	nop    DWORD PTR [rax+rax*1+0x0]
   38e70:	push   r13
   38e72:	push   r12
   38e74:	push   rbp
   38e75:	push   rbx
   38e76:	sub    rsp,0x38
   38e7a:	mov    rax,QWORD PTR fs:0x28
   38e83:	mov    QWORD PTR [rsp+0x28],rax
   38e88:	xor    eax,eax
   38e8a:	cmp    BYTE PTR [rdi+0x28],0x0
   38e8e:	je     38f31 <g_str_equal@plt+0x2bc71>
   38e94:	mov    ecx,DWORD PTR [rip+0x24bc3e]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   38e9a:	mov    rbx,rdi
   38e9d:	test   ecx,ecx
   38e9f:	jne    38ed0 <g_str_equal@plt+0x2bc10>
   38ea1:	mov    rdi,rbx
   38ea4:	call   d1f0 <pthread_mutex_unlock@plt>
   38ea9:	test   eax,eax
   38eab:	jne    38f55 <g_str_equal@plt+0x2bc95>
   38eb1:	mov    rax,QWORD PTR [rsp+0x28]
   38eb6:	xor    rax,QWORD PTR fs:0x28
   38ebf:	jne    38f50 <g_str_equal@plt+0x2bc90>
   38ec5:	add    rsp,0x38
   38ec9:	pop    rbx
   38eca:	pop    rbp
   38ecb:	pop    r12
   38ecd:	pop    r13
   38ecf:	ret    
   38ed0:	cmp    WORD PTR [rip+0x24e166],0x0        # 28703e <stdout@@GLIBC_2.2.5+0x26f6>
   38ed8:	je     38ea1 <g_str_equal@plt+0x2bbe1>
   38eda:	test   BYTE PTR [rip+0x24cfc0],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   38ee1:	je     38ea1 <g_str_equal@plt+0x2bbe1>
   38ee3:	lea    rdi,[rsp+0x10]
   38ee8:	mov    rbp,rsi
   38eeb:	xor    esi,esi
   38eed:	mov    DWORD PTR [rsp+0xc],edx
   38ef1:	call   c3e0 <gettimeofday@plt>
   38ef6:	mov    r13,QWORD PTR [rsp+0x18]
   38efb:	mov    r12,QWORD PTR [rsp+0x10]
   38f00:	call   c5b0 <getpid@plt>
   38f05:	sub    rsp,0x8
   38f09:	lea    rdi,[rip+0x28830]        # 61740 <_fini@@Base+0xefec>
   38f10:	mov    esi,eax
   38f12:	mov    edx,DWORD PTR [rsp+0x14]
   38f16:	mov    r9,rbp
   38f19:	mov    r8,rbx
   38f1c:	mov    rcx,r13
   38f1f:	xor    eax,eax
   38f21:	push   rdx
   38f22:	mov    rdx,r12
   38f25:	call   431a0 <g_str_equal@plt+0x35ee0>
   38f2a:	pop    rax
   38f2b:	pop    rdx
   38f2c:	jmp    38ea1 <g_str_equal@plt+0x2bbe1>
   38f31:	lea    rcx,[rip+0x28b08]        # 61a40 <_fini@@Base+0xf2ec>
   38f38:	lea    rsi,[rip+0x28741]        # 61680 <_fini@@Base+0xef2c>
   38f3f:	lea    rdi,[rip+0x286ee]        # 61634 <_fini@@Base+0xeee0>
   38f46:	mov    edx,0x5c
   38f4b:	call   c390 <__assert_fail@plt>
   38f50:	call   cd30 <__stack_chk_fail@plt>
   38f55:	lea    rsi,[rip+0x28ac4]        # 61a20 <_fini@@Base+0xf2cc>
   38f5c:	mov    edi,eax
   38f5e:	call   d532 <g_str_equal@plt+0x272>
   38f63:	nop    DWORD PTR [rax]
   38f66:	nop    WORD PTR cs:[rax+rax*1+0x0]
   38f70:	push   r12
   38f72:	push   rbp
   38f73:	mov    rbp,rdi
   38f76:	push   rbx
   38f77:	sub    rsp,0x10
   38f7b:	lea    rbx,[rsp+0x4]
   38f80:	mov    rax,QWORD PTR fs:0x28
   38f89:	mov    QWORD PTR [rsp+0x8],rax
   38f8e:	xor    eax,eax
   38f90:	mov    rdi,rbx
   38f93:	call   d0e0 <pthread_mutexattr_init@plt>
   38f98:	mov    esi,0x1
   38f9d:	mov    rdi,rbx
   38fa0:	call   cd20 <pthread_mutexattr_settype@plt>
   38fa5:	mov    rsi,rbx
   38fa8:	mov    rdi,rbp
   38fab:	call   c5c0 <pthread_mutex_init@plt>
   38fb0:	mov    rdi,rbx
   38fb3:	mov    r12d,eax
   38fb6:	call   c380 <pthread_mutexattr_destroy@plt>
   38fbb:	test   r12d,r12d
   38fbe:	jne    38fdd <g_str_equal@plt+0x2bd1d>
   38fc0:	mov    rax,QWORD PTR [rsp+0x8]
   38fc5:	xor    rax,QWORD PTR fs:0x28
   38fce:	mov    BYTE PTR [rbp+0x28],0x1
   38fd2:	jne    38fec <g_str_equal@plt+0x2bd2c>
   38fd4:	add    rsp,0x10
   38fd8:	pop    rbx
   38fd9:	pop    rbp
   38fda:	pop    r12
   38fdc:	ret    
   38fdd:	lea    rsi,[rip+0x28a1c]        # 61a00 <_fini@@Base+0xf2ac>
   38fe4:	mov    edi,r12d
   38fe7:	call   d532 <g_str_equal@plt+0x272>
   38fec:	call   cd30 <__stack_chk_fail@plt>
   38ff1:	nop    DWORD PTR [rax+rax*1+0x0]
   38ff6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   39000:	push   rbx
   39001:	xor    esi,esi
   39003:	mov    rbx,rdi
   39006:	call   c790 <pthread_cond_init@plt>
   3900b:	test   eax,eax
   3900d:	jne    39015 <g_str_equal@plt+0x2bd55>
   3900f:	mov    BYTE PTR [rbx+0x30],0x1
   39013:	pop    rbx
   39014:	ret    
   39015:	lea    rsi,[rip+0x289cc]        # 619e8 <_fini@@Base+0xf294>
   3901c:	mov    edi,eax
   3901e:	call   d532 <g_str_equal@plt+0x272>
   39023:	nop    DWORD PTR [rax]
   39026:	nop    WORD PTR cs:[rax+rax*1+0x0]
   39030:	sub    rsp,0x8
   39034:	cmp    BYTE PTR [rdi+0x30],0x0
   39038:	je     3904c <g_str_equal@plt+0x2bd8c>
   3903a:	mov    BYTE PTR [rdi+0x30],0x0
   3903e:	call   c170 <pthread_cond_destroy@plt>
   39043:	test   eax,eax
   39045:	jne    3906b <g_str_equal@plt+0x2bdab>
   39047:	add    rsp,0x8
   3904b:	ret    
   3904c:	lea    rcx,[rip+0x2897d]        # 619d0 <_fini@@Base+0xf27c>
   39053:	lea    rsi,[rip+0x28626]        # 61680 <_fini@@Base+0xef2c>
   3905a:	lea    rdi,[rip+0x285e6]        # 61647 <_fini@@Base+0xeef3>
   39061:	mov    edx,0x80
   39066:	call   c390 <__assert_fail@plt>
   3906b:	lea    rsi,[rip+0x2893e]        # 619b0 <_fini@@Base+0xf25c>
   39072:	mov    edi,eax
   39074:	call   d532 <g_str_equal@plt+0x272>
   39079:	nop    DWORD PTR [rax+0x0]
   39080:	sub    rsp,0x8
   39084:	cmp    BYTE PTR [rdi+0x30],0x0
   39088:	je     39098 <g_str_equal@plt+0x2bdd8>
   3908a:	call   c320 <pthread_cond_signal@plt>
   3908f:	test   eax,eax
   39091:	jne    390b7 <g_str_equal@plt+0x2bdf7>
   39093:	add    rsp,0x8
   39097:	ret    
   39098:	lea    rcx,[rip+0x288f1]        # 61990 <_fini@@Base+0xf23c>
   3909f:	lea    rsi,[rip+0x285da]        # 61680 <_fini@@Base+0xef2c>
   390a6:	lea    rdi,[rip+0x2859a]        # 61647 <_fini@@Base+0xeef3>
   390ad:	mov    edx,0x8b
   390b2:	call   c390 <__assert_fail@plt>
   390b7:	lea    rsi,[rip+0x288b2]        # 61970 <_fini@@Base+0xf21c>
   390be:	mov    edi,eax
   390c0:	call   d532 <g_str_equal@plt+0x272>
   390c5:	nop
   390c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   390d0:	sub    rsp,0x8
   390d4:	cmp    BYTE PTR [rdi+0x30],0x0
   390d8:	je     390e8 <g_str_equal@plt+0x2be28>
   390da:	call   d160 <pthread_cond_broadcast@plt>
   390df:	test   eax,eax
   390e1:	jne    39107 <g_str_equal@plt+0x2be47>
   390e3:	add    rsp,0x8
   390e7:	ret    
   390e8:	lea    rcx,[rip+0x28861]        # 61950 <_fini@@Base+0xf1fc>
   390ef:	lea    rsi,[rip+0x2858a]        # 61680 <_fini@@Base+0xef2c>
   390f6:	lea    rdi,[rip+0x2854a]        # 61647 <_fini@@Base+0xeef3>
   390fd:	mov    edx,0x95
   39102:	call   c390 <__assert_fail@plt>
   39107:	lea    rsi,[rip+0x28822]        # 61930 <_fini@@Base+0xf1dc>
   3910e:	mov    edi,eax
   39110:	call   d532 <g_str_equal@plt+0x272>
   39115:	nop
   39116:	nop    WORD PTR cs:[rax+rax*1+0x0]
   39120:	push   r15
   39122:	push   r14
   39124:	push   r13
   39126:	push   r12
   39128:	push   rbp
   39129:	push   rbx
   3912a:	sub    rsp,0x28
   3912e:	mov    rax,QWORD PTR fs:0x28
   39137:	mov    QWORD PTR [rsp+0x18],rax
   3913c:	xor    eax,eax
   3913e:	cmp    BYTE PTR [rdi+0x30],0x0
   39142:	je     39264 <g_str_equal@plt+0x2bfa4>
   39148:	mov    r8d,DWORD PTR [rip+0x24b989]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   3914f:	mov    rbx,rdi
   39152:	mov    rbp,rsi
   39155:	mov    r12,rdx
   39158:	mov    r13d,ecx
   3915b:	test   r8d,r8d
   3915e:	jne    391b0 <g_str_equal@plt+0x2bef0>
   39160:	mov    rdi,rbx
   39163:	mov    rsi,rbp
   39166:	call   cde0 <pthread_cond_wait@plt>
   3916b:	mov    ecx,DWORD PTR [rip+0x24b967]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   39171:	mov    ebx,eax
   39173:	test   ecx,ecx
   39175:	jne    39208 <g_str_equal@plt+0x2bf48>
   3917b:	test   ebx,ebx
   3917d:	jne    39288 <g_str_equal@plt+0x2bfc8>
   39183:	mov    rax,QWORD PTR [rsp+0x18]
   39188:	xor    rax,QWORD PTR fs:0x28
   39191:	jne    39283 <g_str_equal@plt+0x2bfc3>
   39197:	add    rsp,0x28
   3919b:	pop    rbx
   3919c:	pop    rbp
   3919d:	pop    r12
   3919f:	pop    r13
   391a1:	pop    r14
   391a3:	pop    r15
   391a5:	ret    
   391a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   391b0:	cmp    WORD PTR [rip+0x24de86],0x0        # 28703e <stdout@@GLIBC_2.2.5+0x26f6>
   391b8:	je     39160 <g_str_equal@plt+0x2bea0>
   391ba:	test   BYTE PTR [rip+0x24cce0],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   391c1:	je     39160 <g_str_equal@plt+0x2bea0>
   391c3:	mov    rdi,rsp
   391c6:	xor    esi,esi
   391c8:	call   c3e0 <gettimeofday@plt>
   391cd:	mov    r15,QWORD PTR [rsp+0x8]
   391d2:	mov    r14,QWORD PTR [rsp]
   391d6:	call   c5b0 <getpid@plt>
   391db:	sub    rsp,0x8
   391df:	lea    rdi,[rip+0x2855a]        # 61740 <_fini@@Base+0xefec>
   391e6:	mov    esi,eax
   391e8:	push   r13
   391ea:	mov    r9,r12
   391ed:	mov    r8,rbp
   391f0:	mov    rcx,r15
   391f3:	mov    rdx,r14
   391f6:	xor    eax,eax
   391f8:	call   431a0 <g_str_equal@plt+0x35ee0>
   391fd:	pop    rsi
   391fe:	pop    rdi
   391ff:	jmp    39160 <g_str_equal@plt+0x2bea0>
   39204:	nop    DWORD PTR [rax+0x0]
   39208:	cmp    WORD PTR [rip+0x24de30],0x0        # 287040 <stdout@@GLIBC_2.2.5+0x26f8>
   39210:	je     3917b <g_str_equal@plt+0x2bebb>
   39216:	test   BYTE PTR [rip+0x24cc84],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   3921d:	je     3917b <g_str_equal@plt+0x2bebb>
   39223:	mov    rdi,rsp
   39226:	xor    esi,esi
   39228:	call   c3e0 <gettimeofday@plt>
   3922d:	mov    r15,QWORD PTR [rsp+0x8]
   39232:	mov    r14,QWORD PTR [rsp]
   39236:	call   c5b0 <getpid@plt>
   3923b:	sub    rsp,0x8
   3923f:	lea    rdi,[rip+0x284c2]        # 61708 <_fini@@Base+0xefb4>
   39246:	mov    esi,eax
   39248:	push   r13
   3924a:	mov    rdx,r14
   3924d:	mov    r9,r12
   39250:	mov    r8,rbp
   39253:	mov    rcx,r15
   39256:	xor    eax,eax
   39258:	call   431a0 <g_str_equal@plt+0x35ee0>
   3925d:	pop    rax
   3925e:	pop    rdx
   3925f:	jmp    3917b <g_str_equal@plt+0x2bebb>
   39264:	lea    rcx,[rip+0x286a5]        # 61910 <_fini@@Base+0xf1bc>
   3926b:	lea    rsi,[rip+0x2840e]        # 61680 <_fini@@Base+0xef2c>
   39272:	lea    rdi,[rip+0x283ce]        # 61647 <_fini@@Base+0xeef3>
   39279:	mov    edx,0x9f
   3927e:	call   c390 <__assert_fail@plt>
   39283:	call   cd30 <__stack_chk_fail@plt>
   39288:	lea    rsi,[rip+0x28661]        # 618f0 <_fini@@Base+0xf19c>
   3928f:	mov    edi,ebx
   39291:	call   d532 <g_str_equal@plt+0x272>
   39296:	nop    WORD PTR cs:[rax+rax*1+0x0]
   392a0:	push   rbx
   392a1:	mov    edx,esi
   392a3:	xor    esi,esi
   392a5:	mov    rbx,rdi
   392a8:	call   cd10 <sem_init@plt>
   392ad:	test   eax,eax
   392af:	js     392b7 <g_str_equal@plt+0x2bff7>
   392b1:	mov    BYTE PTR [rbx+0x20],0x1
   392b5:	pop    rbx
   392b6:	ret    
   392b7:	call   cc80 <__errno_location@plt>
   392bc:	mov    edi,DWORD PTR [rax]
   392be:	lea    rsi,[rip+0x28613]        # 618d8 <_fini@@Base+0xf184>
   392c5:	call   d532 <g_str_equal@plt+0x272>
   392ca:	nop    WORD PTR [rax+rax*1+0x0]
   392d0:	sub    rsp,0x8
   392d4:	cmp    BYTE PTR [rdi+0x20],0x0
   392d8:	je     392ec <g_str_equal@plt+0x2c02c>
   392da:	mov    BYTE PTR [rdi+0x20],0x0
   392de:	call   c2d0 <sem_destroy@plt>
   392e3:	test   eax,eax
   392e5:	js     3930b <g_str_equal@plt+0x2c04b>
   392e7:	add    rsp,0x8
   392eb:	ret    
   392ec:	lea    rcx,[rip+0x285cd]        # 618c0 <_fini@@Base+0xf16c>
   392f3:	lea    rsi,[rip+0x28386]        # 61680 <_fini@@Base+0xef2c>
   392fa:	lea    rdi,[rip+0x28358]        # 61659 <_fini@@Base+0xef05>
   39301:	mov    edx,0xc5
   39306:	call   c390 <__assert_fail@plt>
   3930b:	call   cc80 <__errno_location@plt>
   39310:	mov    edi,DWORD PTR [rax]
   39312:	lea    rsi,[rip+0x28587]        # 618a0 <_fini@@Base+0xf14c>
   39319:	call   d532 <g_str_equal@plt+0x272>
   3931e:	xchg   ax,ax
   39320:	sub    rsp,0x8
   39324:	cmp    BYTE PTR [rdi+0x20],0x0
   39328:	je     39338 <g_str_equal@plt+0x2c078>
   3932a:	call   cd80 <sem_post@plt>
   3932f:	test   eax,eax
   39331:	js     39357 <g_str_equal@plt+0x2c097>
   39333:	add    rsp,0x8
   39337:	ret    
   39338:	lea    rcx,[rip+0x28549]        # 61888 <_fini@@Base+0xf134>
   3933f:	lea    rsi,[rip+0x2833a]        # 61680 <_fini@@Base+0xef2c>
   39346:	lea    rdi,[rip+0x2830c]        # 61659 <_fini@@Base+0xef05>
   3934d:	mov    edx,0xdc
   39352:	call   c390 <__assert_fail@plt>
   39357:	call   cc80 <__errno_location@plt>
   3935c:	mov    edi,DWORD PTR [rax]
   3935e:	lea    rsi,[rip+0x28513]        # 61878 <_fini@@Base+0xf124>
   39365:	call   d532 <g_str_equal@plt+0x272>
   3936a:	nop    WORD PTR [rax+rax*1+0x0]
   39370:	push   rbp
   39371:	push   rbx
   39372:	sub    rsp,0x38
   39376:	mov    rax,QWORD PTR fs:0x28
   3937f:	mov    QWORD PTR [rsp+0x28],rax
   39384:	xor    eax,eax
   39386:	cmp    BYTE PTR [rdi+0x20],0x0
   3938a:	je     394b6 <g_str_equal@plt+0x2c1f6>
   39390:	test   esi,esi
   39392:	mov    rbx,rdi
   39395:	mov    ebp,esi
   39397:	jle    393b0 <g_str_equal@plt+0x2c0f0>
   39399:	jmp    393e8 <g_str_equal@plt+0x2c128>
   3939b:	nop    DWORD PTR [rax+rax*1+0x0]
   393a0:	call   cc80 <__errno_location@plt>
   393a5:	mov    edi,DWORD PTR [rax]
   393a7:	cmp    edi,0x4
   393aa:	jne    39480 <g_str_equal@plt+0x2c1c0>
   393b0:	mov    rdi,rbx
   393b3:	call   c460 <sem_trywait@plt>
   393b8:	cmp    eax,0xffffffff
   393bb:	je     393a0 <g_str_equal@plt+0x2c0e0>
   393bd:	test   eax,eax
   393bf:	js     394da <g_str_equal@plt+0x2c21a>
   393c5:	xor    eax,eax
   393c7:	mov    rcx,QWORD PTR [rsp+0x28]
   393cc:	xor    rcx,QWORD PTR fs:0x28
   393d5:	jne    394d5 <g_str_equal@plt+0x2c215>
   393db:	add    rsp,0x38
   393df:	pop    rbx
   393e0:	pop    rbp
   393e1:	ret    
   393e2:	nop    WORD PTR [rax+rax*1+0x0]
   393e8:	lea    rdi,[rsp+0x10]
   393ed:	xor    esi,esi
   393ef:	call   c3e0 <gettimeofday@plt>
   393f4:	mov    eax,ebp
   393f6:	mov    edx,0x10624dd3
   393fb:	imul   edx
   393fd:	mov    eax,ebp
   393ff:	sar    eax,0x1f
   39402:	imul   rcx,QWORD PTR [rsp+0x18],0x3e8
   3940b:	sar    edx,0x6
   3940e:	sub    edx,eax
   39410:	imul   eax,edx,0x3e8
   39416:	movsxd rdx,edx
   39419:	add    rdx,QWORD PTR [rsp+0x10]
   3941e:	sub    ebp,eax
   39420:	imul   ebp,ebp,0xf4240
   39426:	movsxd rbp,ebp
   39429:	add    rbp,rcx
   3942c:	cmp    rbp,0x3b9ac9ff
   39433:	mov    QWORD PTR [rsp+0x8],rbp
   39438:	jle    394b0 <g_str_equal@plt+0x2c1f0>
   3943a:	add    rdx,0x1
   3943e:	sub    rbp,0x3b9aca00
   39445:	mov    QWORD PTR [rsp],rdx
   39449:	mov    QWORD PTR [rsp+0x8],rbp
   3944e:	mov    rbp,rsp
   39451:	jmp    39464 <g_str_equal@plt+0x2c1a4>
   39453:	nop    DWORD PTR [rax+rax*1+0x0]
   39458:	call   cc80 <__errno_location@plt>
   3945d:	mov    edi,DWORD PTR [rax]
   3945f:	cmp    edi,0x4
   39462:	jne    39498 <g_str_equal@plt+0x2c1d8>
   39464:	mov    rsi,rbp
   39467:	mov    rdi,rbx
   3946a:	call   c8b0 <sem_timedwait@plt>
   3946f:	cmp    eax,0xffffffff
   39472:	je     39458 <g_str_equal@plt+0x2c198>
   39474:	jmp    393bd <g_str_equal@plt+0x2c0fd>
   39479:	nop    DWORD PTR [rax+0x0]
   39480:	cmp    edi,0xb
   39483:	je     3949d <g_str_equal@plt+0x2c1dd>
   39485:	lea    rsi,[rip+0x283b4]        # 61840 <_fini@@Base+0xf0ec>
   3948c:	call   d532 <g_str_equal@plt+0x272>
   39491:	nop    DWORD PTR [rax+0x0]
   39498:	cmp    edi,0x6e
   3949b:	jne    39485 <g_str_equal@plt+0x2c1c5>
   3949d:	mov    eax,0xffffffff
   394a2:	jmp    393c7 <g_str_equal@plt+0x2c107>
   394a7:	nop    WORD PTR [rax+rax*1+0x0]
   394b0:	mov    QWORD PTR [rsp],rdx
   394b4:	jmp    3944e <g_str_equal@plt+0x2c18e>
   394b6:	lea    rcx,[rip+0x283a3]        # 61860 <_fini@@Base+0xf10c>
   394bd:	lea    rsi,[rip+0x281bc]        # 61680 <_fini@@Base+0xef2c>
   394c4:	lea    rdi,[rip+0x2818e]        # 61659 <_fini@@Base+0xef05>
   394cb:	mov    edx,0x102
   394d0:	call   c390 <__assert_fail@plt>
   394d5:	call   cd30 <__stack_chk_fail@plt>
   394da:	call   cc80 <__errno_location@plt>
   394df:	mov    edi,DWORD PTR [rax]
   394e1:	jmp    39485 <g_str_equal@plt+0x2c1c5>
   394e3:	nop    DWORD PTR [rax]
   394e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   394f0:	push   rbx
   394f1:	cmp    BYTE PTR [rdi+0x20],0x0
   394f5:	je     3951f <g_str_equal@plt+0x2c25f>
   394f7:	mov    rbx,rdi
   394fa:	jmp    3950c <g_str_equal@plt+0x2c24c>
   394fc:	nop    DWORD PTR [rax+0x0]
   39500:	call   cc80 <__errno_location@plt>
   39505:	mov    edi,DWORD PTR [rax]
   39507:	cmp    edi,0x4
   3950a:	jne    39545 <g_str_equal@plt+0x2c285>
   3950c:	mov    rdi,rbx
   3950f:	call   c130 <sem_wait@plt>
   39514:	cmp    eax,0xffffffff
   39517:	je     39500 <g_str_equal@plt+0x2c240>
   39519:	test   eax,eax
   3951b:	js     3953e <g_str_equal@plt+0x2c27e>
   3951d:	pop    rbx
   3951e:	ret    
   3951f:	lea    rcx,[rip+0x28302]        # 61828 <_fini@@Base+0xf0d4>
   39526:	lea    rsi,[rip+0x28153]        # 61680 <_fini@@Base+0xef2c>
   3952d:	lea    rdi,[rip+0x28125]        # 61659 <_fini@@Base+0xef05>
   39534:	mov    edx,0x132
   39539:	call   c390 <__assert_fail@plt>
   3953e:	call   cc80 <__errno_location@plt>
   39543:	mov    edi,DWORD PTR [rax]
   39545:	lea    rsi,[rip+0x282cc]        # 61818 <_fini@@Base+0xf0c4>
   3954c:	call   d532 <g_str_equal@plt+0x272>
   39551:	nop    DWORD PTR [rax+rax*1+0x0]
   39556:	nop    WORD PTR cs:[rax+rax*1+0x0]
   39560:	xor    esi,0x1
   39563:	mov    BYTE PTR [rdi+0x4],0x1
   39567:	movzx  esi,sil
   3956b:	mov    DWORD PTR [rdi],esi
   3956d:	ret    
   3956e:	xchg   ax,ax
   39570:	cmp    BYTE PTR [rdi+0x4],0x0
   39574:	je     3957b <g_str_equal@plt+0x2c2bb>
   39576:	mov    BYTE PTR [rdi+0x4],0x0
   3957a:	ret    
   3957b:	lea    rcx,[rip+0x2827e]        # 61800 <_fini@@Base+0xf0ac>
   39582:	lea    rsi,[rip+0x280f7]        # 61680 <_fini@@Base+0xef2c>
   39589:	lea    rdi,[rip+0x280da]        # 6166a <_fini@@Base+0xef16>
   39590:	sub    rsp,0x8
   39594:	mov    edx,0x180
   39599:	call   c390 <__assert_fail@plt>
   3959e:	xchg   ax,ax
   395a0:	sub    rsp,0x8
   395a4:	cmp    BYTE PTR [rdi+0x4],0x0
   395a8:	je     395f2 <g_str_equal@plt+0x2c332>
   395aa:	mfence 
   395ad:	mov    eax,DWORD PTR [rdi]
   395af:	test   eax,eax
   395b1:	jne    395c0 <g_str_equal@plt+0x2c300>
   395b3:	add    rsp,0x8
   395b7:	ret    
   395b8:	nop    DWORD PTR [rax+rax*1+0x0]
   395c0:	xor    eax,eax
   395c2:	xchg   DWORD PTR [rdi],eax
   395c4:	cmp    eax,0xffffffff
   395c7:	jne    395b3 <g_str_equal@plt+0x2c2f3>
   395c9:	sub    rsp,0x8
   395cd:	mov    edx,0x1
   395d2:	mov    rsi,rdi
   395d5:	push   0x0
   395d7:	xor    r9d,r9d
   395da:	xor    r8d,r8d
   395dd:	mov    ecx,0x7fffffff
   395e2:	mov    edi,0xca
   395e7:	xor    eax,eax
   395e9:	call   c8e0 <syscall@plt>
   395ee:	pop    rax
   395ef:	pop    rdx
   395f0:	jmp    395b3 <g_str_equal@plt+0x2c2f3>
   395f2:	lea    rcx,[rip+0x281ef]        # 617e8 <_fini@@Base+0xf094>
   395f9:	lea    rsi,[rip+0x28080]        # 61680 <_fini@@Base+0xef2c>
   39600:	lea    rdi,[rip+0x28063]        # 6166a <_fini@@Base+0xef16>
   39607:	mov    edx,0x18d
   3960c:	call   c390 <__assert_fail@plt>
   39611:	nop    DWORD PTR [rax+rax*1+0x0]
   39616:	nop    WORD PTR cs:[rax+rax*1+0x0]
   39620:	cmp    BYTE PTR [rdi+0x4],0x0
   39624:	je     39635 <g_str_equal@plt+0x2c375>
   39626:	mov    eax,DWORD PTR [rdi]
   39628:	test   eax,eax
   3962a:	je     39630 <g_str_equal@plt+0x2c370>
   3962c:	repz ret 
   3962e:	xchg   ax,ax
   39630:	lock or DWORD PTR [rdi],0x1
   39634:	ret    
   39635:	lea    rcx,[rip+0x28194]        # 617d0 <_fini@@Base+0xf07c>
   3963c:	lea    rsi,[rip+0x2803d]        # 61680 <_fini@@Base+0xef2c>
   39643:	lea    rdi,[rip+0x28020]        # 6166a <_fini@@Base+0xef16>
   3964a:	sub    rsp,0x8
   3964e:	mov    edx,0x19b
   39653:	call   c390 <__assert_fail@plt>
   39658:	nop    DWORD PTR [rax+rax*1+0x0]
   39660:	push   rbp
   39661:	push   rbx
   39662:	sub    rsp,0x8
   39666:	cmp    BYTE PTR [rdi+0x4],0x0
   3966a:	je     396cf <g_str_equal@plt+0x2c40f>
   3966c:	mov    rbx,rdi
   3966f:	mov    eax,DWORD PTR [rdi]
   39671:	test   eax,eax
   39673:	je     396c3 <g_str_equal@plt+0x2c403>
   39675:	cmp    eax,0x1
   39678:	jne    39687 <g_str_equal@plt+0x2c3c7>
   3967a:	mov    edx,0xffffffff
   3967f:	lock cmpxchg DWORD PTR [rdi],edx
   39683:	test   eax,eax
   39685:	je     396c3 <g_str_equal@plt+0x2c403>
   39687:	mov    ebp,0xffffffff
   3968c:	sub    rsp,0x8
   39690:	xor    edx,edx
   39692:	xor    r9d,r9d
   39695:	push   0x0
   39697:	xor    r8d,r8d
   3969a:	mov    ecx,ebp
   3969c:	xor    eax,eax
   3969e:	mov    rsi,rbx
   396a1:	mov    edi,0xca
   396a6:	call   c8e0 <syscall@plt>
   396ab:	test   rax,rax
   396ae:	pop    rdx
   396af:	pop    rcx
   396b0:	je     396c3 <g_str_equal@plt+0x2c403>
   396b2:	call   cc80 <__errno_location@plt>
   396b7:	mov    eax,DWORD PTR [rax]
   396b9:	cmp    eax,0x4
   396bc:	je     3968c <g_str_equal@plt+0x2c3cc>
   396be:	cmp    eax,0xb
   396c1:	jne    396ca <g_str_equal@plt+0x2c40a>
   396c3:	add    rsp,0x8
   396c7:	pop    rbx
   396c8:	pop    rbp
   396c9:	ret    
   396ca:	call   c270 <abort@plt>
   396cf:	lea    rcx,[rip+0x280ea]        # 617c0 <_fini@@Base+0xf06c>
   396d6:	lea    rsi,[rip+0x27fa3]        # 61680 <_fini@@Base+0xef2c>
   396dd:	lea    rdi,[rip+0x27f86]        # 6166a <_fini@@Base+0xef16>
   396e4:	mov    edx,0x1ab
   396e9:	call   c390 <__assert_fail@plt>
   396ee:	xchg   ax,ax
   396f0:	push   rbx
   396f1:	mov    rbx,rdi
   396f4:	sub    rsp,0x10
   396f8:	mov    edi,DWORD PTR [rip+0x24c512]        # 285c10 <stdout@@GLIBC_2.2.5+0x12c8>
   396fe:	mov    rax,QWORD PTR fs:0x28
   39707:	mov    QWORD PTR [rsp+0x8],rax
   3970c:	xor    eax,eax
   3970e:	call   c150 <pthread_getspecific@plt>
   39713:	mov    rdi,rsp
   39716:	mov    rsi,rbx
   39719:	mov    QWORD PTR [rsp],rax
   3971d:	call   3eef0 <g_str_equal@plt+0x31c30>
   39722:	mov    rsi,QWORD PTR [rsp]
   39726:	mov    edi,DWORD PTR [rip+0x24c4e4]        # 285c10 <stdout@@GLIBC_2.2.5+0x12c8>
   3972c:	call   c280 <pthread_setspecific@plt>
   39731:	mov    rax,QWORD PTR [rsp+0x8]
   39736:	xor    rax,QWORD PTR fs:0x28
   3973f:	jne    39747 <g_str_equal@plt+0x2c487>
   39741:	add    rsp,0x10
   39745:	pop    rbx
   39746:	ret    
   39747:	call   cd30 <__stack_chk_fail@plt>
   3974c:	nop    DWORD PTR [rax+0x0]
   39750:	push   rbp
   39751:	push   rbx
   39752:	mov    rbp,rdi
   39755:	sub    rsp,0x8
   39759:	mov    edi,DWORD PTR [rip+0x24c4b1]        # 285c10 <stdout@@GLIBC_2.2.5+0x12c8>
   3975f:	call   c150 <pthread_getspecific@plt>
   39764:	mov    rdi,rbp
   39767:	mov    rbx,rax
   3976a:	call   3ef10 <g_str_equal@plt+0x31c50>
   3976f:	mov    edi,DWORD PTR [rip+0x24c49b]        # 285c10 <stdout@@GLIBC_2.2.5+0x12c8>
   39775:	add    rsp,0x8
   39779:	mov    rsi,rbx
   3977c:	pop    rbx
   3977d:	pop    rbp
   3977e:	jmp    c280 <pthread_setspecific@plt>
   39783:	nop    DWORD PTR [rax]
   39786:	nop    WORD PTR cs:[rax+rax*1+0x0]
   39790:	push   r15
   39792:	push   r14
   39794:	mov    r15,rsi
   39797:	push   r13
   39799:	push   r12
   3979b:	mov    r14,rdx
   3979e:	push   rbp
   3979f:	push   rbx
   397a0:	mov    r13,rcx
   397a3:	mov    ebx,r8d
   397a6:	sub    rsp,0x168
   397ad:	lea    rbp,[rsp+0x10]
   397b2:	mov    QWORD PTR [rsp+0x8],rdi
   397b7:	mov    rax,QWORD PTR fs:0x28
   397c0:	mov    QWORD PTR [rsp+0x158],rax
   397c8:	xor    eax,eax
   397ca:	mov    rdi,rbp
   397cd:	call   cee0 <pthread_attr_init@plt>
   397d2:	test   eax,eax
   397d4:	jne    39892 <g_str_equal@plt+0x2c5d2>
   397da:	cmp    ebx,0x1
   397dd:	je     39880 <g_str_equal@plt+0x2c5c0>
   397e3:	lea    rbx,[rsp+0x50]
   397e8:	lea    r12,[rsp+0xd0]
   397f0:	mov    rdi,rbx
   397f3:	call   c4b0 <sigfillset@plt>
   397f8:	mov    rsi,rbx
   397fb:	mov    rdx,r12
   397fe:	mov    edi,0x2
   39803:	call   d040 <pthread_sigmask@plt>
   39808:	mov    edi,0x18
   3980d:	call   ce00 <g_malloc0@plt>
   39812:	mov    rdi,r15
   39815:	mov    rbx,rax
   39818:	call   c370 <g_strdup@plt>
   3981d:	mov    rdi,QWORD PTR [rsp+0x8]
   39822:	lea    rdx,[rip+0xfffffffffffff2c7]        # 38af0 <g_str_equal@plt+0x2b830>
   39829:	mov    QWORD PTR [rbx+0x10],rax
   3982d:	mov    QWORD PTR [rbx],r14
   39830:	mov    QWORD PTR [rbx+0x8],r13
   39834:	mov    rcx,rbx
   39837:	mov    rsi,rbp
   3983a:	call   c770 <pthread_create@plt>
   3983f:	test   eax,eax
   39841:	jne    39892 <g_str_equal@plt+0x2c5d2>
   39843:	xor    edx,edx
   39845:	mov    rsi,r12
   39848:	mov    edi,0x2
   3984d:	call   d040 <pthread_sigmask@plt>
   39852:	mov    rdi,rbp
   39855:	call   c650 <pthread_attr_destroy@plt>
   3985a:	mov    rax,QWORD PTR [rsp+0x158]
   39862:	xor    rax,QWORD PTR fs:0x28
   3986b:	jne    398a0 <g_str_equal@plt+0x2c5e0>
   3986d:	add    rsp,0x168
   39874:	pop    rbx
   39875:	pop    rbp
   39876:	pop    r12
   39878:	pop    r13
   3987a:	pop    r14
   3987c:	pop    r15
   3987e:	ret    
   3987f:	nop
   39880:	mov    esi,0x1
   39885:	mov    rdi,rbp
   39888:	call   d2a0 <pthread_attr_setdetachstate@plt>
   3988d:	jmp    397e3 <g_str_equal@plt+0x2c523>
   39892:	lea    rsi,[rip+0x27f07]        # 617a0 <_fini@@Base+0xf04c>
   39899:	mov    edi,eax
   3989b:	call   d532 <g_str_equal@plt+0x272>
   398a0:	call   cd30 <__stack_chk_fail@plt>
   398a5:	nop
   398a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   398b0:	push   rbx
   398b1:	mov    rbx,rdi
   398b4:	call   c950 <pthread_self@plt>
   398b9:	mov    QWORD PTR [rbx],rax
   398bc:	pop    rbx
   398bd:	ret    
   398be:	xchg   ax,ax
   398c0:	push   rbx
   398c1:	mov    rbx,rdi
   398c4:	call   c950 <pthread_self@plt>
   398c9:	cmp    QWORD PTR [rbx],rax
   398cc:	pop    rbx
   398cd:	sete   al
   398d0:	ret    
   398d1:	nop    DWORD PTR [rax+rax*1+0x0]
   398d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   398e0:	sub    rsp,0x8
   398e4:	call   ca80 <pthread_exit@plt>
   398e9:	nop    DWORD PTR [rax+0x0]
   398f0:	sub    rsp,0x18
   398f4:	mov    rdi,QWORD PTR [rdi]
   398f7:	mov    rsi,rsp
   398fa:	mov    rax,QWORD PTR fs:0x28
   39903:	mov    QWORD PTR [rsp+0x8],rax
   39908:	xor    eax,eax
   3990a:	call   c980 <pthread_join@plt>
   3990f:	test   eax,eax
   39911:	jne    3992c <g_str_equal@plt+0x2c66c>
   39913:	mov    rdx,QWORD PTR [rsp+0x8]
   39918:	xor    rdx,QWORD PTR fs:0x28
   39921:	mov    rax,QWORD PTR [rsp]
   39925:	jne    3993a <g_str_equal@plt+0x2c67a>
   39927:	add    rsp,0x18
   3992b:	ret    
   3992c:	lea    rsi,[rip+0x27e4d]        # 61780 <_fini@@Base+0xf02c>
   39933:	mov    edi,eax
   39935:	call   d532 <g_str_equal@plt+0x272>
   3993a:	call   cd30 <__stack_chk_fail@plt>
   3993f:	nop
   39940:	lea    rax,[rip+0x24c2f9]        # 285c40 <stdout@@GLIBC_2.2.5+0x12f8>
   39947:	mov    QWORD PTR [rip+0x24c2ee],0x0        # 285c40 <stdout@@GLIBC_2.2.5+0x12f8>
   39952:	mov    QWORD PTR [rip+0x24c2f3],0x0        # 285c50 <stdout@@GLIBC_2.2.5+0x1308>
   3995d:	mov    QWORD PTR [rip+0x24c2f8],0x0        # 285c60 <stdout@@GLIBC_2.2.5+0x1318>
   39968:	mov    QWORD PTR [rip+0x24c2fd],0x0        # 285c70 <stdout@@GLIBC_2.2.5+0x1328>
   39973:	mov    QWORD PTR [rip+0x24c2ce],rax        # 285c48 <stdout@@GLIBC_2.2.5+0x1300>
   3997a:	add    rax,0x10
   3997e:	mov    QWORD PTR [rip+0x24c2a7],0x0        # 285c30 <stdout@@GLIBC_2.2.5+0x12e8>
   39989:	mov    QWORD PTR [rip+0x24c2c8],rax        # 285c58 <stdout@@GLIBC_2.2.5+0x1310>
   39990:	add    rax,0x10
   39994:	mov    DWORD PTR [rip+0x24c282],0x1        # 285c20 <stdout@@GLIBC_2.2.5+0x12d8>
   3999e:	mov    QWORD PTR [rip+0x24c2c3],rax        # 285c68 <stdout@@GLIBC_2.2.5+0x1320>
   399a5:	add    rax,0x10
   399a9:	mov    QWORD PTR [rip+0x24c2c8],rax        # 285c78 <stdout@@GLIBC_2.2.5+0x1330>
   399b0:	lea    rax,[rip+0x24c279]        # 285c30 <stdout@@GLIBC_2.2.5+0x12e8>
   399b7:	mov    QWORD PTR [rip+0x24c27a],rax        # 285c38 <stdout@@GLIBC_2.2.5+0x12f0>
   399be:	ret    
   399bf:	nop
   399c0:	push   rbp
   399c1:	push   rbx
   399c2:	mov    rbp,rdi
   399c5:	mov    edi,0x20
   399ca:	mov    ebx,esi
   399cc:	sub    rsp,0x18
   399d0:	call   ce00 <g_malloc0@plt>
   399d5:	mov    edx,DWORD PTR [rip+0x24c245]        # 285c20 <stdout@@GLIBC_2.2.5+0x12d8>
   399db:	mov    QWORD PTR [rax],rbp
   399de:	mov    DWORD PTR [rax+0x18],ebx
   399e1:	test   edx,edx
   399e3:	jne    399f4 <g_str_equal@plt+0x2c734>
   399e5:	mov    QWORD PTR [rsp+0x8],rax
   399ea:	call   39940 <g_str_equal@plt+0x2c680>
   399ef:	mov    rax,QWORD PTR [rsp+0x8]
   399f4:	lea    rsi,[rip+0x24c245]        # 285c40 <stdout@@GLIBC_2.2.5+0x12f8>
   399fb:	shl    rbx,0x4
   399ff:	mov    QWORD PTR [rax+0x8],0x0
   39a07:	add    rbx,rsi
   39a0a:	mov    rdx,QWORD PTR [rbx+0x8]
   39a0e:	mov    QWORD PTR [rax+0x10],rdx
   39a12:	mov    QWORD PTR [rdx],rax
   39a15:	add    rax,0x8
   39a19:	mov    QWORD PTR [rbx+0x8],rax
   39a1d:	add    rsp,0x18
   39a21:	pop    rbx
   39a22:	pop    rbp
   39a23:	ret    
   39a24:	xchg   ax,ax
   39a26:	nop    WORD PTR cs:[rax+rax*1+0x0]
   39a30:	push   rbp
   39a31:	push   rbx
   39a32:	mov    rbp,rdi
   39a35:	mov    ebx,esi
   39a37:	sub    rsp,0x8
   39a3b:	mov    eax,DWORD PTR [rip+0x24c1df]        # 285c20 <stdout@@GLIBC_2.2.5+0x12d8>
   39a41:	test   eax,eax
   39a43:	jne    39a4a <g_str_equal@plt+0x2c78a>
   39a45:	call   39940 <g_str_equal@plt+0x2c680>
   39a4a:	mov    edi,0x20
   39a4f:	call   ce00 <g_malloc0@plt>
   39a54:	mov    rdx,QWORD PTR [rip+0x24c1dd]        # 285c38 <stdout@@GLIBC_2.2.5+0x12f0>
   39a5b:	mov    QWORD PTR [rax],rbp
   39a5e:	mov    DWORD PTR [rax+0x18],ebx
   39a61:	mov    QWORD PTR [rax+0x8],0x0
   39a69:	mov    QWORD PTR [rax+0x10],rdx
   39a6d:	mov    QWORD PTR [rdx],rax
   39a70:	add    rax,0x8
   39a74:	mov    QWORD PTR [rip+0x24c1bd],rax        # 285c38 <stdout@@GLIBC_2.2.5+0x12f0>
   39a7b:	add    rsp,0x8
   39a7f:	pop    rbx
   39a80:	pop    rbp
   39a81:	ret    
   39a82:	nop    DWORD PTR [rax+0x0]
   39a86:	nop    WORD PTR cs:[rax+rax*1+0x0]
   39a90:	mov    eax,DWORD PTR [rip+0x24c18a]        # 285c20 <stdout@@GLIBC_2.2.5+0x12d8>
   39a96:	push   rbx
   39a97:	test   eax,eax
   39a99:	je     39ac8 <g_str_equal@plt+0x2c808>
   39a9b:	mov    edi,edi
   39a9d:	lea    rax,[rip+0x24c19c]        # 285c40 <stdout@@GLIBC_2.2.5+0x12f8>
   39aa4:	shl    rdi,0x4
   39aa8:	mov    rbx,QWORD PTR [rax+rdi*1]
   39aac:	test   rbx,rbx
   39aaf:	je     39ac3 <g_str_equal@plt+0x2c803>
   39ab1:	nop    DWORD PTR [rax+0x0]
   39ab8:	call   QWORD PTR [rbx]
   39aba:	mov    rbx,QWORD PTR [rbx+0x8]
   39abe:	test   rbx,rbx
   39ac1:	jne    39ab8 <g_str_equal@plt+0x2c7f8>
   39ac3:	pop    rbx
   39ac4:	ret    
   39ac5:	nop    DWORD PTR [rax]
   39ac8:	call   39940 <g_str_equal@plt+0x2c680>
   39acd:	jmp    39a9b <g_str_equal@plt+0x2c7db>
   39acf:	nop
   39ad0:	repz ret 
   39ad2:	nop    WORD PTR cs:[rax+rax*1+0x0]
   39adc:	nop    DWORD PTR [rax+0x0]
   39ae0:	push   r13
   39ae2:	push   r12
   39ae4:	mov    r13,rdx
   39ae7:	push   rbp
   39ae8:	push   rbx
   39ae9:	mov    rbp,rdi
   39aec:	mov    r12,rsi
   39aef:	xor    edi,edi
   39af1:	sub    rsp,0x8
   39af5:	call   c530 <g_string_new@plt>
   39afa:	mov    rdx,r13
   39afd:	mov    rsi,r12
   39b00:	mov    rdi,rax
   39b03:	mov    rbx,rax
   39b06:	call   caa0 <g_string_vprintf@plt>
   39b0b:	mov    rax,QWORD PTR [rbp+0x0]
   39b0f:	mov    rdi,rbx
   39b12:	mov    rsi,QWORD PTR [rax]
   39b15:	call   d1d0 <g_string_append@plt>
   39b1a:	mov    rax,QWORD PTR [rbp+0x0]
   39b1e:	mov    rdi,QWORD PTR [rax]
   39b21:	call   d2b0 <g_free@plt>
   39b26:	mov    rbp,QWORD PTR [rbp+0x0]
   39b2a:	mov    rdi,rbx
   39b2d:	xor    esi,esi
   39b2f:	call   c7a0 <g_string_free@plt>
   39b34:	mov    QWORD PTR [rbp+0x0],rax
   39b38:	add    rsp,0x8
   39b3c:	pop    rbx
   39b3d:	pop    rbp
   39b3e:	pop    r12
   39b40:	pop    r13
   39b42:	ret    
   39b43:	nop    DWORD PTR [rax]
   39b46:	nop    WORD PTR cs:[rax+rax*1+0x0]
   39b50:	push   rbx
   39b51:	mov    rbx,rdi
   39b54:	mov    rdi,QWORD PTR [rdi]
   39b57:	call   d2b0 <g_free@plt>
   39b5c:	mov    rdi,QWORD PTR [rbx+0x28]
   39b60:	test   rdi,rdi
   39b63:	je     39b6f <g_str_equal@plt+0x2c8af>
   39b65:	mov    esi,0x1
   39b6a:	call   c7a0 <g_string_free@plt>
   39b6f:	mov    rdi,rbx
   39b72:	pop    rbx
   39b73:	jmp    d2b0 <g_free@plt>
   39b78:	nop    DWORD PTR [rax+rax*1+0x0]
   39b80:	test   rdi,rdi
   39b83:	je     39b90 <g_str_equal@plt+0x2c8d0>
   39b85:	jmp    39ae0 <g_str_equal@plt+0x2c820>
   39b8a:	nop    WORD PTR [rax+rax*1+0x0]
   39b90:	repz ret 
   39b92:	nop    DWORD PTR [rax+0x0]
   39b96:	nop    WORD PTR cs:[rax+rax*1+0x0]
   39ba0:	sub    rsp,0xd8
   39ba7:	test   al,al
   39ba9:	mov    QWORD PTR [rsp+0x30],rdx
   39bae:	mov    QWORD PTR [rsp+0x38],rcx
   39bb3:	mov    QWORD PTR [rsp+0x40],r8
   39bb8:	mov    QWORD PTR [rsp+0x48],r9
   39bbd:	je     39bf6 <g_str_equal@plt+0x2c936>
   39bbf:	movaps XMMWORD PTR [rsp+0x50],xmm0
   39bc4:	movaps XMMWORD PTR [rsp+0x60],xmm1
   39bc9:	movaps XMMWORD PTR [rsp+0x70],xmm2
   39bce:	movaps XMMWORD PTR [rsp+0x80],xmm3
   39bd6:	movaps XMMWORD PTR [rsp+0x90],xmm4
   39bde:	movaps XMMWORD PTR [rsp+0xa0],xmm5
   39be6:	movaps XMMWORD PTR [rsp+0xb0],xmm6
   39bee:	movaps XMMWORD PTR [rsp+0xc0],xmm7
   39bf6:	mov    rax,QWORD PTR fs:0x28
   39bff:	mov    QWORD PTR [rsp+0x18],rax
   39c04:	xor    eax,eax
   39c06:	lea    rax,[rsp+0xe0]
   39c0e:	test   rdi,rdi
   39c11:	mov    QWORD PTR [rsp+0x8],rax
   39c16:	lea    rax,[rsp+0x20]
   39c1b:	mov    DWORD PTR [rsp],0x10
   39c22:	mov    DWORD PTR [rsp+0x4],0x30
   39c2a:	mov    QWORD PTR [rsp+0x10],rax
   39c2f:	je     39c39 <g_str_equal@plt+0x2c979>
   39c31:	mov    rdx,rsp
   39c34:	call   39ae0 <g_str_equal@plt+0x2c820>
   39c39:	mov    rax,QWORD PTR [rsp+0x18]
   39c3e:	xor    rax,QWORD PTR fs:0x28
   39c47:	jne    39c51 <g_str_equal@plt+0x2c991>
   39c49:	add    rsp,0xd8
   39c50:	ret    
   39c51:	call   cd30 <__stack_chk_fail@plt>
   39c56:	nop    WORD PTR cs:[rax+rax*1+0x0]
   39c60:	push   r13
   39c62:	push   r12
   39c64:	mov    r13,rsi
   39c67:	push   rbp
   39c68:	push   rbx
   39c69:	mov    rbx,rdi
   39c6c:	sub    rsp,0xd8
   39c73:	test   al,al
   39c75:	mov    QWORD PTR [rsp+0x30],rdx
   39c7a:	mov    QWORD PTR [rsp+0x38],rcx
   39c7f:	mov    QWORD PTR [rsp+0x40],r8
   39c84:	mov    QWORD PTR [rsp+0x48],r9
   39c89:	je     39cc2 <g_str_equal@plt+0x2ca02>
   39c8b:	movaps XMMWORD PTR [rsp+0x50],xmm0
   39c90:	movaps XMMWORD PTR [rsp+0x60],xmm1
   39c95:	movaps XMMWORD PTR [rsp+0x70],xmm2
   39c9a:	movaps XMMWORD PTR [rsp+0x80],xmm3
   39ca2:	movaps XMMWORD PTR [rsp+0x90],xmm4
   39caa:	movaps XMMWORD PTR [rsp+0xa0],xmm5
   39cb2:	movaps XMMWORD PTR [rsp+0xb0],xmm6
   39cba:	movaps XMMWORD PTR [rsp+0xc0],xmm7
   39cc2:	mov    rax,QWORD PTR fs:0x28
   39ccb:	mov    QWORD PTR [rsp+0x18],rax
   39cd0:	xor    eax,eax
   39cd2:	call   cc80 <__errno_location@plt>
   39cd7:	test   rbx,rbx
   39cda:	mov    r12,rax
   39cdd:	je     39d49 <g_str_equal@plt+0x2ca89>
   39cdf:	lea    rax,[rip+0x24bf9a]        # 285c80 <stdout@@GLIBC_2.2.5+0x1338>
   39ce6:	mov    rbp,QWORD PTR [rbx]
   39ce9:	cmp    rbx,rax
   39cec:	lea    rax,[rip+0x24bf95]        # 285c88 <stdout@@GLIBC_2.2.5+0x1340>
   39cf3:	setne  dl
   39cf6:	cmp    rbx,rax
   39cf9:	setne  al
   39cfc:	test   dl,al
   39cfe:	je     39d7d <g_str_equal@plt+0x2cabd>
   39d00:	test   rbp,rbp
   39d03:	je     39d7d <g_str_equal@plt+0x2cabd>
   39d05:	cmp    QWORD PTR [rbp+0x28],0x0
   39d0a:	mov    ebx,DWORD PTR [r12]
   39d0e:	je     39d70 <g_str_equal@plt+0x2cab0>
   39d10:	lea    rax,[rsp+0x100]
   39d18:	mov    rdi,QWORD PTR [rbp+0x28]
   39d1c:	mov    rdx,rsp
   39d1f:	mov    rsi,r13
   39d22:	mov    DWORD PTR [rsp],0x10
   39d29:	mov    DWORD PTR [rsp+0x4],0x30
   39d31:	mov    QWORD PTR [rsp+0x8],rax
   39d36:	lea    rax,[rsp+0x20]
   39d3b:	mov    QWORD PTR [rsp+0x10],rax
   39d40:	call   cc90 <g_string_append_vprintf@plt>
   39d45:	mov    DWORD PTR [r12],ebx
   39d49:	mov    rax,QWORD PTR [rsp+0x18]
   39d4e:	xor    rax,QWORD PTR fs:0x28
   39d57:	jne    39d9c <g_str_equal@plt+0x2cadc>
   39d59:	add    rsp,0xd8
   39d60:	pop    rbx
   39d61:	pop    rbp
   39d62:	pop    r12
   39d64:	pop    r13
   39d66:	ret    
   39d67:	nop    WORD PTR [rax+rax*1+0x0]
   39d70:	xor    edi,edi
   39d72:	call   c530 <g_string_new@plt>
   39d77:	mov    QWORD PTR [rbp+0x28],rax
   39d7b:	jmp    39d10 <g_str_equal@plt+0x2ca50>
   39d7d:	lea    rcx,[rip+0x27e9c]        # 61c20 <_fini@@Base+0xf4cc>
   39d84:	lea    rsi,[rip+0x27da5]        # 61b30 <_fini@@Base+0xf3dc>
   39d8b:	lea    rdi,[rip+0x27dd6]        # 61b68 <_fini@@Base+0xf414>
   39d92:	mov    edx,0xa0
   39d97:	call   c390 <__assert_fail@plt>
   39d9c:	call   cd30 <__stack_chk_fail@plt>
   39da1:	nop    DWORD PTR [rax+rax*1+0x0]
   39da6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   39db0:	push   rbp
   39db1:	push   rbx
   39db2:	mov    rbp,rdi
   39db5:	mov    edi,0x30
   39dba:	sub    rsp,0x8
   39dbe:	call   ce00 <g_malloc0@plt>
   39dc3:	mov    rdi,QWORD PTR [rbp+0x0]
   39dc7:	mov    rbx,rax
   39dca:	call   c370 <g_strdup@plt>
   39dcf:	mov    QWORD PTR [rbx],rax
   39dd2:	mov    eax,DWORD PTR [rbp+0x8]
   39dd5:	mov    DWORD PTR [rbx+0x8],eax
   39dd8:	mov    rax,QWORD PTR [rbp+0x10]
   39ddc:	mov    QWORD PTR [rbx+0x10],rax
   39de0:	mov    eax,DWORD PTR [rbp+0x20]
   39de3:	mov    DWORD PTR [rbx+0x20],eax
   39de6:	mov    rax,QWORD PTR [rbp+0x18]
   39dea:	mov    QWORD PTR [rbx+0x18],rax
   39dee:	mov    rax,QWORD PTR [rbp+0x28]
   39df2:	test   rax,rax
   39df5:	je     39e03 <g_str_equal@plt+0x2cb43>
   39df7:	mov    rdi,QWORD PTR [rax]
   39dfa:	call   c530 <g_string_new@plt>
   39dff:	mov    QWORD PTR [rbx+0x28],rax
   39e03:	add    rsp,0x8
   39e07:	mov    rax,rbx
   39e0a:	pop    rbx
   39e0b:	pop    rbp
   39e0c:	ret    
   39e0d:	nop    DWORD PTR [rax]
   39e10:	mov    eax,DWORD PTR [rdi+0x8]
   39e13:	ret    
   39e14:	xchg   ax,ax
   39e16:	nop    WORD PTR cs:[rax+rax*1+0x0]
   39e20:	mov    rax,QWORD PTR [rdi]
   39e23:	ret    
   39e24:	xchg   ax,ax
   39e26:	nop    WORD PTR cs:[rax+rax*1+0x0]
   39e30:	push   rbx
   39e31:	mov    rsi,QWORD PTR [rdi]
   39e34:	mov    rbx,rdi
   39e37:	lea    rdi,[rip+0x18f50]        # 52d8e <_fini@@Base+0x63a>
   39e3e:	xor    eax,eax
   39e40:	call   3aab0 <g_str_equal@plt+0x2d7f0>
   39e45:	mov    rax,QWORD PTR [rbx+0x28]
   39e49:	test   rax,rax
   39e4c:	je     39e5f <g_str_equal@plt+0x2cb9f>
   39e4e:	mov    rsi,QWORD PTR [rax]
   39e51:	lea    rdi,[rip+0x18f36]        # 52d8e <_fini@@Base+0x63a>
   39e58:	xor    eax,eax
   39e5a:	call   3a7e0 <g_str_equal@plt+0x2d520>
   39e5f:	mov    rdi,rbx
   39e62:	pop    rbx
   39e63:	jmp    39b50 <g_str_equal@plt+0x2c890>
   39e68:	nop    DWORD PTR [rax+rax*1+0x0]
   39e70:	lea    rax,[rip+0x24be11]        # 285c88 <stdout@@GLIBC_2.2.5+0x1340>
   39e77:	push   rbx
   39e78:	mov    rbx,rsi
   39e7b:	cmp    rdi,rax
   39e7e:	je     39e8e <g_str_equal@plt+0x2cbce>
   39e80:	lea    rax,[rip+0x24bdf9]        # 285c80 <stdout@@GLIBC_2.2.5+0x1338>
   39e87:	cmp    rdi,rax
   39e8a:	je     39ec1 <g_str_equal@plt+0x2cc01>
   39e8c:	pop    rbx
   39e8d:	ret    
   39e8e:	mov    rcx,QWORD PTR [rsi+0x18]
   39e92:	mov    r9d,DWORD PTR [rsi+0x20]
   39e96:	lea    rdx,[rip+0x27d03]        # 61ba0 <_fini@@Base+0xf44c>
   39e9d:	mov    r8,QWORD PTR [rsi+0x10]
   39ea1:	mov    rdi,QWORD PTR [rip+0x24aa98]        # 284940 <stderr@@GLIBC_2.2.5>
   39ea8:	mov    esi,0x1
   39ead:	xor    eax,eax
   39eaf:	call   c2b0 <__fprintf_chk@plt>
   39eb4:	mov    rdi,rbx
   39eb7:	call   39e30 <g_str_equal@plt+0x2cb70>
   39ebc:	call   c270 <abort@plt>
   39ec1:	mov    rdi,rsi
   39ec4:	call   39e30 <g_str_equal@plt+0x2cb70>
   39ec9:	mov    edi,0x1
   39ece:	call   c360 <exit@plt>
   39ed3:	nop    DWORD PTR [rax]
   39ed6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   39ee0:	push   r15
   39ee2:	push   r14
   39ee4:	mov    r15d,r8d
   39ee7:	push   r13
   39ee9:	push   r12
   39eeb:	mov    r14,rsi
   39eee:	push   rbp
   39eef:	push   rbx
   39ef0:	mov    rbx,rdi
   39ef3:	mov    r13d,edx
   39ef6:	sub    rsp,0x28
   39efa:	mov    QWORD PTR [rsp+0x8],rcx
   39eff:	mov    QWORD PTR [rsp+0x10],r9
   39f04:	call   cc80 <__errno_location@plt>
   39f09:	test   rbx,rbx
   39f0c:	je     39fa7 <g_str_equal@plt+0x2cce7>
   39f12:	cmp    QWORD PTR [rbx],0x0
   39f16:	jne    39fb6 <g_str_equal@plt+0x2ccf6>
   39f1c:	mov    rbp,rax
   39f1f:	mov    eax,DWORD PTR [rax]
   39f21:	mov    edi,0x30
   39f26:	mov    DWORD PTR [rsp+0x1c],eax
   39f2a:	call   ce00 <g_malloc0@plt>
   39f2f:	mov    rsi,QWORD PTR [rsp+0x60]
   39f34:	mov    rdi,QWORD PTR [rsp+0x10]
   39f39:	mov    r12,rax
   39f3c:	call   c960 <g_strdup_vprintf@plt>
   39f41:	cmp    QWORD PTR [rsp+0x68],0x0
   39f47:	mov    QWORD PTR [r12],rax
   39f4b:	je     39f79 <g_str_equal@plt+0x2ccb9>
   39f4d:	mov    rdx,QWORD PTR [rsp+0x68]
   39f52:	lea    rdi,[rip+0x1f6fb]        # 59654 <_fini@@Base+0x6f00>
   39f59:	mov    rsi,rax
   39f5c:	mov    QWORD PTR [rsp+0x10],rax
   39f61:	xor    eax,eax
   39f63:	call   c740 <g_strdup_printf@plt>
   39f68:	mov    r8,QWORD PTR [rsp+0x10]
   39f6d:	mov    QWORD PTR [r12],rax
   39f71:	mov    rdi,r8
   39f74:	call   d2b0 <g_free@plt>
   39f79:	mov    rax,QWORD PTR [rsp+0x8]
   39f7e:	mov    rsi,r12
   39f81:	mov    rdi,rbx
   39f84:	mov    DWORD PTR [r12+0x8],r15d
   39f89:	mov    QWORD PTR [r12+0x10],r14
   39f8e:	mov    DWORD PTR [r12+0x20],r13d
   39f93:	mov    QWORD PTR [r12+0x18],rax
   39f98:	call   39e70 <g_str_equal@plt+0x2cbb0>
   39f9d:	mov    eax,DWORD PTR [rsp+0x1c]
   39fa1:	mov    QWORD PTR [rbx],r12
   39fa4:	mov    DWORD PTR [rbp+0x0],eax
   39fa7:	add    rsp,0x28
   39fab:	pop    rbx
   39fac:	pop    rbp
   39fad:	pop    r12
   39faf:	pop    r13
   39fb1:	pop    r14
   39fb3:	pop    r15
   39fb5:	ret    
   39fb6:	lea    rcx,[rip+0x27c7b]        # 61c38 <_fini@@Base+0xf4e4>
   39fbd:	lea    rsi,[rip+0x27b6c]        # 61b30 <_fini@@Base+0xf3dc>
   39fc4:	lea    rdi,[rip+0x27bf9]        # 61bc4 <_fini@@Base+0xf470>
   39fcb:	mov    edx,0x39
   39fd0:	call   c390 <__assert_fail@plt>
   39fd5:	nop
   39fd6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   39fe0:	sub    rsp,0xd8
   39fe7:	test   al,al
   39fe9:	je     3a022 <g_str_equal@plt+0x2cd62>
   39feb:	movaps XMMWORD PTR [rsp+0x50],xmm0
   39ff0:	movaps XMMWORD PTR [rsp+0x60],xmm1
   39ff5:	movaps XMMWORD PTR [rsp+0x70],xmm2
   39ffa:	movaps XMMWORD PTR [rsp+0x80],xmm3
   3a002:	movaps XMMWORD PTR [rsp+0x90],xmm4
   3a00a:	movaps XMMWORD PTR [rsp+0xa0],xmm5
   3a012:	movaps XMMWORD PTR [rsp+0xb0],xmm6
   3a01a:	movaps XMMWORD PTR [rsp+0xc0],xmm7
   3a022:	mov    rax,QWORD PTR fs:0x28
   3a02b:	mov    QWORD PTR [rsp+0x18],rax
   3a030:	xor    eax,eax
   3a032:	lea    rax,[rsp+0xe0]
   3a03a:	mov    QWORD PTR [rsp+0x8],rax
   3a03f:	lea    rax,[rsp+0x20]
   3a044:	mov    DWORD PTR [rsp],0x30
   3a04b:	mov    DWORD PTR [rsp+0x4],0x30
   3a053:	mov    QWORD PTR [rsp+0x10],rax
   3a058:	push   0x0
   3a05a:	lea    rax,[rsp+0x8]
   3a05f:	push   rax
   3a060:	call   39ee0 <g_str_equal@plt+0x2cc20>
   3a065:	pop    rax
   3a066:	pop    rdx
   3a067:	mov    rax,QWORD PTR [rsp+0x18]
   3a06c:	xor    rax,QWORD PTR fs:0x28
   3a075:	jne    3a07f <g_str_equal@plt+0x2cdbf>
   3a077:	add    rsp,0xd8
   3a07e:	ret    
   3a07f:	call   cd30 <__stack_chk_fail@plt>
   3a084:	xchg   ax,ax
   3a086:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3a090:	sub    rsp,0xd8
   3a097:	test   al,al
   3a099:	mov    QWORD PTR [rsp+0x48],r9
   3a09e:	je     3a0d7 <g_str_equal@plt+0x2ce17>
   3a0a0:	movaps XMMWORD PTR [rsp+0x50],xmm0
   3a0a5:	movaps XMMWORD PTR [rsp+0x60],xmm1
   3a0aa:	movaps XMMWORD PTR [rsp+0x70],xmm2
   3a0af:	movaps XMMWORD PTR [rsp+0x80],xmm3
   3a0b7:	movaps XMMWORD PTR [rsp+0x90],xmm4
   3a0bf:	movaps XMMWORD PTR [rsp+0xa0],xmm5
   3a0c7:	movaps XMMWORD PTR [rsp+0xb0],xmm6
   3a0cf:	movaps XMMWORD PTR [rsp+0xc0],xmm7
   3a0d7:	mov    rax,QWORD PTR fs:0x28
   3a0e0:	mov    QWORD PTR [rsp+0x18],rax
   3a0e5:	xor    eax,eax
   3a0e7:	lea    rax,[rsp+0xe0]
   3a0ef:	mov    r9,r8
   3a0f2:	xor    r8d,r8d
   3a0f5:	mov    QWORD PTR [rsp+0x8],rax
   3a0fa:	lea    rax,[rsp+0x20]
   3a0ff:	mov    DWORD PTR [rsp],0x28
   3a106:	mov    DWORD PTR [rsp+0x4],0x30
   3a10e:	mov    QWORD PTR [rsp+0x10],rax
   3a113:	push   0x0
   3a115:	lea    rax,[rsp+0x8]
   3a11a:	push   rax
   3a11b:	call   39ee0 <g_str_equal@plt+0x2cc20>
   3a120:	pop    rax
   3a121:	pop    rdx
   3a122:	mov    rax,QWORD PTR [rsp+0x18]
   3a127:	xor    rax,QWORD PTR fs:0x28
   3a130:	jne    3a13a <g_str_equal@plt+0x2ce7a>
   3a132:	add    rsp,0xd8
   3a139:	ret    
   3a13a:	call   cd30 <__stack_chk_fail@plt>
   3a13f:	nop
   3a140:	push   r15
   3a142:	push   r14
   3a144:	mov    r14,rcx
   3a147:	push   r13
   3a149:	push   r12
   3a14b:	mov    r13d,edx
   3a14e:	push   rbp
   3a14f:	push   rbx
   3a150:	mov    r12,rsi
   3a153:	mov    rbx,rdi
   3a156:	mov    ebp,r8d
   3a159:	sub    rsp,0xe8
   3a160:	test   al,al
   3a162:	je     3a19e <g_str_equal@plt+0x2cede>
   3a164:	movaps XMMWORD PTR [rsp+0x60],xmm0
   3a169:	movaps XMMWORD PTR [rsp+0x70],xmm1
   3a16e:	movaps XMMWORD PTR [rsp+0x80],xmm2
   3a176:	movaps XMMWORD PTR [rsp+0x90],xmm3
   3a17e:	movaps XMMWORD PTR [rsp+0xa0],xmm4
   3a186:	movaps XMMWORD PTR [rsp+0xb0],xmm5
   3a18e:	movaps XMMWORD PTR [rsp+0xc0],xmm6
   3a196:	movaps XMMWORD PTR [rsp+0xd0],xmm7
   3a19e:	mov    rax,QWORD PTR fs:0x28
   3a1a7:	mov    QWORD PTR [rsp+0x28],rax
   3a1ac:	xor    eax,eax
   3a1ae:	mov    QWORD PTR [rsp],r9
   3a1b2:	call   cc80 <__errno_location@plt>
   3a1b7:	test   rbx,rbx
   3a1ba:	mov    r15,rax
   3a1bd:	je     3a21a <g_str_equal@plt+0x2cf5a>
   3a1bf:	mov    eax,DWORD PTR [rax]
   3a1c1:	mov    DWORD PTR [rsp+0x10],0x30
   3a1c9:	mov    DWORD PTR [rsp+0x14],0x30
   3a1d1:	mov    r9,QWORD PTR [rsp]
   3a1d5:	mov    DWORD PTR [rsp+0xc],eax
   3a1d9:	lea    rax,[rsp+0x120]
   3a1e1:	mov    QWORD PTR [rsp+0x18],rax
   3a1e6:	lea    rax,[rsp+0x30]
   3a1eb:	mov    QWORD PTR [rsp+0x20],rax
   3a1f0:	xor    eax,eax
   3a1f2:	test   ebp,ebp
   3a1f4:	jne    3a240 <g_str_equal@plt+0x2cf80>
   3a1f6:	push   rax
   3a1f7:	mov    edx,r13d
   3a1fa:	xor    r8d,r8d
   3a1fd:	mov    rcx,r14
   3a200:	mov    rsi,r12
   3a203:	mov    rdi,rbx
   3a206:	lea    rax,[rsp+0x18]
   3a20b:	push   rax
   3a20c:	call   39ee0 <g_str_equal@plt+0x2cc20>
   3a211:	mov    eax,DWORD PTR [rsp+0x1c]
   3a215:	mov    DWORD PTR [r15],eax
   3a218:	pop    rax
   3a219:	pop    rdx
   3a21a:	mov    rax,QWORD PTR [rsp+0x28]
   3a21f:	xor    rax,QWORD PTR fs:0x28
   3a228:	jne    3a24d <g_str_equal@plt+0x2cf8d>
   3a22a:	add    rsp,0xe8
   3a231:	pop    rbx
   3a232:	pop    rbp
   3a233:	pop    r12
   3a235:	pop    r13
   3a237:	pop    r14
   3a239:	pop    r15
   3a23b:	ret    
   3a23c:	nop    DWORD PTR [rax+0x0]
   3a240:	mov    edi,ebp
   3a242:	call   ca10 <strerror@plt>
   3a247:	mov    r9,QWORD PTR [rsp]
   3a24b:	jmp    3a1f6 <g_str_equal@plt+0x2cf36>
   3a24d:	call   cd30 <__stack_chk_fail@plt>
   3a252:	nop    DWORD PTR [rax+0x0]
   3a256:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3a260:	sub    rsp,0x10
   3a264:	xor    eax,eax
   3a266:	push   r9
   3a268:	lea    r9,[rip+0x27963]        # 61bd2 <_fini@@Base+0xf47e>
   3a26f:	call   3a140 <g_str_equal@plt+0x2ce80>
   3a274:	add    rsp,0x18
   3a278:	ret    
   3a279:	nop    DWORD PTR [rax+0x0]
   3a280:	push   rbx
   3a281:	mov    rsi,QWORD PTR [rdi]
   3a284:	mov    rbx,rdi
   3a287:	lea    rdi,[rip+0x18b00]        # 52d8e <_fini@@Base+0x63a>
   3a28e:	xor    eax,eax
   3a290:	call   3ab70 <g_str_equal@plt+0x2d8b0>
   3a295:	mov    rax,QWORD PTR [rbx+0x28]
   3a299:	test   rax,rax
   3a29c:	je     3a2af <g_str_equal@plt+0x2cfef>
   3a29e:	mov    rsi,QWORD PTR [rax]
   3a2a1:	lea    rdi,[rip+0x18ae6]        # 52d8e <_fini@@Base+0x63a>
   3a2a8:	xor    eax,eax
   3a2aa:	call   3a7e0 <g_str_equal@plt+0x2d520>
   3a2af:	mov    rdi,rbx
   3a2b2:	pop    rbx
   3a2b3:	jmp    39b50 <g_str_equal@plt+0x2c890>
   3a2b8:	nop    DWORD PTR [rax+rax*1+0x0]
   3a2c0:	sub    rsp,0xe8
   3a2c7:	test   al,al
   3a2c9:	mov    QWORD PTR [rsp+0x8],rdi
   3a2ce:	mov    QWORD PTR [rsp+0x40],rdx
   3a2d3:	mov    QWORD PTR [rsp+0x48],rcx
   3a2d8:	mov    QWORD PTR [rsp+0x50],r8
   3a2dd:	mov    QWORD PTR [rsp+0x58],r9
   3a2e2:	je     3a31e <g_str_equal@plt+0x2d05e>
   3a2e4:	movaps XMMWORD PTR [rsp+0x60],xmm0
   3a2e9:	movaps XMMWORD PTR [rsp+0x70],xmm1
   3a2ee:	movaps XMMWORD PTR [rsp+0x80],xmm2
   3a2f6:	movaps XMMWORD PTR [rsp+0x90],xmm3
   3a2fe:	movaps XMMWORD PTR [rsp+0xa0],xmm4
   3a306:	movaps XMMWORD PTR [rsp+0xb0],xmm5
   3a30e:	movaps XMMWORD PTR [rsp+0xc0],xmm6
   3a316:	movaps XMMWORD PTR [rsp+0xd0],xmm7
   3a31e:	mov    rax,QWORD PTR fs:0x28
   3a327:	mov    QWORD PTR [rsp+0x28],rax
   3a32c:	xor    eax,eax
   3a32e:	lea    rax,[rsp+0xf0]
   3a336:	lea    rdx,[rsp+0x10]
   3a33b:	lea    rdi,[rsp+0x8]
   3a340:	mov    QWORD PTR [rsp+0x18],rax
   3a345:	lea    rax,[rsp+0x30]
   3a34a:	mov    DWORD PTR [rsp+0x10],0x10
   3a352:	mov    DWORD PTR [rsp+0x14],0x30
   3a35a:	mov    QWORD PTR [rsp+0x20],rax
   3a35f:	call   39ae0 <g_str_equal@plt+0x2c820>
   3a364:	mov    rdi,QWORD PTR [rsp+0x8]
   3a369:	call   39e30 <g_str_equal@plt+0x2cb70>
   3a36e:	mov    rax,QWORD PTR [rsp+0x28]
   3a373:	xor    rax,QWORD PTR fs:0x28
   3a37c:	jne    3a386 <g_str_equal@plt+0x2d0c6>
   3a37e:	add    rsp,0xe8
   3a385:	ret    
   3a386:	call   cd30 <__stack_chk_fail@plt>
   3a38b:	nop    DWORD PTR [rax+rax*1+0x0]
   3a390:	sub    rsp,0xe8
   3a397:	test   al,al
   3a399:	mov    QWORD PTR [rsp+0x8],rdi
   3a39e:	mov    QWORD PTR [rsp+0x40],rdx
   3a3a3:	mov    QWORD PTR [rsp+0x48],rcx
   3a3a8:	mov    QWORD PTR [rsp+0x50],r8
   3a3ad:	mov    QWORD PTR [rsp+0x58],r9
   3a3b2:	je     3a3ee <g_str_equal@plt+0x2d12e>
   3a3b4:	movaps XMMWORD PTR [rsp+0x60],xmm0
   3a3b9:	movaps XMMWORD PTR [rsp+0x70],xmm1
   3a3be:	movaps XMMWORD PTR [rsp+0x80],xmm2
   3a3c6:	movaps XMMWORD PTR [rsp+0x90],xmm3
   3a3ce:	movaps XMMWORD PTR [rsp+0xa0],xmm4
   3a3d6:	movaps XMMWORD PTR [rsp+0xb0],xmm5
   3a3de:	movaps XMMWORD PTR [rsp+0xc0],xmm6
   3a3e6:	movaps XMMWORD PTR [rsp+0xd0],xmm7
   3a3ee:	mov    rax,QWORD PTR fs:0x28
   3a3f7:	mov    QWORD PTR [rsp+0x28],rax
   3a3fc:	xor    eax,eax
   3a3fe:	lea    rax,[rsp+0xf0]
   3a406:	lea    rdx,[rsp+0x10]
   3a40b:	lea    rdi,[rsp+0x8]
   3a410:	mov    QWORD PTR [rsp+0x18],rax
   3a415:	lea    rax,[rsp+0x30]
   3a41a:	mov    DWORD PTR [rsp+0x10],0x10
   3a422:	mov    DWORD PTR [rsp+0x14],0x30
   3a42a:	mov    QWORD PTR [rsp+0x20],rax
   3a42f:	call   39ae0 <g_str_equal@plt+0x2c820>
   3a434:	mov    rdi,QWORD PTR [rsp+0x8]
   3a439:	call   3a280 <g_str_equal@plt+0x2cfc0>
   3a43e:	mov    rax,QWORD PTR [rsp+0x28]
   3a443:	xor    rax,QWORD PTR fs:0x28
   3a44c:	jne    3a456 <g_str_equal@plt+0x2d196>
   3a44e:	add    rsp,0xe8
   3a455:	ret    
   3a456:	call   cd30 <__stack_chk_fail@plt>
   3a45b:	nop    DWORD PTR [rax+rax*1+0x0]
   3a460:	test   rdi,rdi
   3a463:	je     3a470 <g_str_equal@plt+0x2d1b0>
   3a465:	jmp    39b50 <g_str_equal@plt+0x2c890>
   3a46a:	nop    WORD PTR [rax+rax*1+0x0]
   3a470:	repz ret 
   3a472:	nop    DWORD PTR [rax+0x0]
   3a476:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3a480:	test   rdi,rdi
   3a483:	push   rbx
   3a484:	je     3a49f <g_str_equal@plt+0x2d1df>
   3a486:	mov    rbx,rdi
   3a489:	mov    rdi,QWORD PTR [rdi]
   3a48c:	test   rdi,rdi
   3a48f:	je     3a49f <g_str_equal@plt+0x2d1df>
   3a491:	call   39b50 <g_str_equal@plt+0x2c890>
   3a496:	mov    QWORD PTR [rbx],0x0
   3a49d:	pop    rbx
   3a49e:	ret    
   3a49f:	lea    rcx,[rip+0x2775a]        # 61c00 <_fini@@Base+0xf4ac>
   3a4a6:	lea    rsi,[rip+0x27683]        # 61b30 <_fini@@Base+0xf3dc>
   3a4ad:	lea    rdi,[rip+0x27732]        # 61be6 <_fini@@Base+0xf492>
   3a4b4:	mov    edx,0x116
   3a4b9:	call   c390 <__assert_fail@plt>
   3a4be:	xchg   ax,ax
   3a4c0:	test   rsi,rsi
   3a4c3:	je     3a4f0 <g_str_equal@plt+0x2d230>
   3a4c5:	push   rbp
   3a4c6:	push   rbx
   3a4c7:	mov    rbp,rdi
   3a4ca:	mov    rbx,rsi
   3a4cd:	sub    rsp,0x8
   3a4d1:	call   39e70 <g_str_equal@plt+0x2cbb0>
   3a4d6:	test   rbp,rbp
   3a4d9:	je     3a4e2 <g_str_equal@plt+0x2d222>
   3a4db:	cmp    QWORD PTR [rbp+0x0],0x0
   3a4e0:	je     3a4f8 <g_str_equal@plt+0x2d238>
   3a4e2:	add    rsp,0x8
   3a4e6:	mov    rdi,rbx
   3a4e9:	pop    rbx
   3a4ea:	pop    rbp
   3a4eb:	jmp    39b50 <g_str_equal@plt+0x2c890>
   3a4f0:	repz ret 
   3a4f2:	nop    WORD PTR [rax+rax*1+0x0]
   3a4f8:	mov    QWORD PTR [rbp+0x0],rbx
   3a4fc:	add    rsp,0x8
   3a500:	pop    rbx
   3a501:	pop    rbp
   3a502:	ret    
   3a503:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3a50d:	nop    DWORD PTR [rax]
   3a510:	sub    rsp,0xd8
   3a517:	test   al,al
   3a519:	mov    QWORD PTR [rsp+0x28],rsi
   3a51e:	mov    QWORD PTR [rsp+0x30],rdx
   3a523:	mov    QWORD PTR [rsp+0x38],rcx
   3a528:	mov    QWORD PTR [rsp+0x40],r8
   3a52d:	mov    QWORD PTR [rsp+0x48],r9
   3a532:	je     3a56b <g_str_equal@plt+0x2d2ab>
   3a534:	movaps XMMWORD PTR [rsp+0x50],xmm0
   3a539:	movaps XMMWORD PTR [rsp+0x60],xmm1
   3a53e:	movaps XMMWORD PTR [rsp+0x70],xmm2
   3a543:	movaps XMMWORD PTR [rsp+0x80],xmm3
   3a54b:	movaps XMMWORD PTR [rsp+0x90],xmm4
   3a553:	movaps XMMWORD PTR [rsp+0xa0],xmm5
   3a55b:	movaps XMMWORD PTR [rsp+0xb0],xmm6
   3a563:	movaps XMMWORD PTR [rsp+0xc0],xmm7
   3a56b:	mov    rax,QWORD PTR fs:0x28
   3a574:	mov    QWORD PTR [rsp+0x18],rax
   3a579:	xor    eax,eax
   3a57b:	lea    rax,[rsp+0xe0]
   3a583:	mov    rsi,rsp
   3a586:	mov    QWORD PTR [rsp+0x8],rax
   3a58b:	lea    rax,[rsp+0x20]
   3a590:	mov    DWORD PTR [rsp],0x8
   3a597:	mov    DWORD PTR [rsp+0x4],0x30
   3a59f:	mov    QWORD PTR [rsp+0x10],rax
   3a5a4:	call   43ed0 <g_str_equal@plt+0x36c10>
   3a5a9:	mov    rax,QWORD PTR [rsp+0x18]
   3a5ae:	xor    rax,QWORD PTR fs:0x28
   3a5b7:	jne    3a5c1 <g_str_equal@plt+0x2d301>
   3a5b9:	add    rsp,0xd8
   3a5c0:	ret    
   3a5c1:	call   cd30 <__stack_chk_fail@plt>
   3a5c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3a5d0:	push   r15
   3a5d2:	push   r14
   3a5d4:	mov    r15,rdx
   3a5d7:	push   r13
   3a5d9:	push   r12
   3a5db:	mov    r14,rsi
   3a5de:	push   rbp
   3a5df:	push   rbx
   3a5e0:	mov    ebp,edi
   3a5e2:	sub    rsp,0x28
   3a5e6:	mov    rbx,0xfffffffffffffff8
   3a5ed:	mov    rax,QWORD PTR fs:0x28
   3a5f6:	mov    QWORD PTR [rsp+0x18],rax
   3a5fb:	xor    eax,eax
   3a5fd:	cmp    BYTE PTR [rip+0x24b68c],0x0        # 285c90 <stdout@@GLIBC_2.2.5+0x1348>
   3a604:	mov    rax,QWORD PTR fs:[rbx]
   3a608:	je     3a6d8 <g_str_equal@plt+0x2d418>
   3a60e:	test   rax,rax
   3a611:	je     3a6a0 <g_str_equal@plt+0x2d3e0>
   3a617:	mov    rax,QWORD PTR [rip+0x247f3a]        # 282558 <g_test_config_vars+0x1198>
   3a61e:	lea    rsi,[rip+0x25c49]        # 6026e <_fini@@Base+0xdb1a>
   3a625:	mov    edx,DWORD PTR [rax]
   3a627:	cmp    edx,0x1
   3a62a:	je     3a728 <g_str_equal@plt+0x2d468>
   3a630:	cmp    edx,0x2
   3a633:	je     3a798 <g_str_equal@plt+0x2d4d8>
   3a639:	lea    rdi,[rip+0x1874e]        # 52d8e <_fini@@Base+0x63a>
   3a640:	xor    eax,eax
   3a642:	call   3a510 <g_str_equal@plt+0x2d250>
   3a647:	cmp    ebp,0x1
   3a64a:	je     3a77e <g_str_equal@plt+0x2d4be>
   3a650:	cmp    ebp,0x2
   3a653:	jne    3a663 <g_str_equal@plt+0x2d3a3>
   3a655:	lea    rdi,[rip+0x275fd]        # 61c59 <_fini@@Base+0xf505>
   3a65c:	xor    eax,eax
   3a65e:	call   3a510 <g_str_equal@plt+0x2d250>
   3a663:	mov    rsi,r15
   3a666:	mov    rdi,r14
   3a669:	call   43ed0 <g_str_equal@plt+0x36c10>
   3a66e:	lea    rdi,[rip+0x27962]        # 61fd7 <_fini@@Base+0xf883>
   3a675:	xor    eax,eax
   3a677:	call   3a510 <g_str_equal@plt+0x2d250>
   3a67c:	mov    rax,QWORD PTR [rsp+0x18]
   3a681:	xor    rax,QWORD PTR fs:0x28
   3a68a:	jne    3a7d9 <g_str_equal@plt+0x2d519>
   3a690:	add    rsp,0x28
   3a694:	pop    rbx
   3a695:	pop    rbp
   3a696:	pop    r12
   3a698:	pop    r13
   3a69a:	pop    r14
   3a69c:	pop    r15
   3a69e:	ret    
   3a69f:	nop
   3a6a0:	mov    r12,rsp
   3a6a3:	mov    rdi,r12
   3a6a6:	call   cfd0 <g_get_current_time@plt>
   3a6ab:	mov    rdi,r12
   3a6ae:	call   c840 <g_time_val_to_iso8601@plt>
   3a6b3:	lea    rdi,[rip+0x27589]        # 61c43 <_fini@@Base+0xf4ef>
   3a6ba:	mov    rsi,rax
   3a6bd:	mov    r12,rax
   3a6c0:	xor    eax,eax
   3a6c2:	call   3a510 <g_str_equal@plt+0x2d250>
   3a6c7:	mov    rdi,r12
   3a6ca:	call   d2b0 <g_free@plt>
   3a6cf:	mov    rax,QWORD PTR fs:[rbx]
   3a6d3:	nop    DWORD PTR [rax+rax*1+0x0]
   3a6d8:	test   rax,rax
   3a6db:	jne    3a617 <g_str_equal@plt+0x2d357>
   3a6e1:	mov    rcx,QWORD PTR [rip+0x24b5b0]        # 285c98 <stdout@@GLIBC_2.2.5+0x1350>
   3a6e8:	test   rcx,rcx
   3a6eb:	je     3a617 <g_str_equal@plt+0x2d357>
   3a6f1:	mov    rdi,QWORD PTR [rip+0x24a248]        # 284940 <stderr@@GLIBC_2.2.5>
   3a6f8:	lea    rdx,[rip+0x27548]        # 61c47 <_fini@@Base+0xf4f3>
   3a6ff:	mov    esi,0x1
   3a704:	call   c2b0 <__fprintf_chk@plt>
   3a709:	mov    rax,QWORD PTR [rip+0x247e48]        # 282558 <g_test_config_vars+0x1198>
   3a710:	lea    rsi,[rip+0x258e1]        # 5fff8 <_fini@@Base+0xd8a4>
   3a717:	mov    edx,DWORD PTR [rax]
   3a719:	cmp    edx,0x1
   3a71c:	jne    3a630 <g_str_equal@plt+0x2d370>
   3a722:	nop    WORD PTR [rax+rax*1+0x0]
   3a728:	mov    r12,QWORD PTR [rax+0x8]
   3a72c:	mov    eax,DWORD PTR [rax+0x4]
   3a72f:	test   eax,eax
   3a731:	jle    3a767 <g_str_equal@plt+0x2d4a7>
   3a733:	lea    r13,[rip+0x258be]        # 5fff8 <_fini@@Base+0xd8a4>
   3a73a:	xor    ebx,ebx
   3a73c:	nop    DWORD PTR [rax+0x0]
   3a740:	movsxd rax,ebx
   3a743:	lea    rdi,[rip+0x22eb1]        # 5d5fb <_fini@@Base+0xaea7>
   3a74a:	add    ebx,0x1
   3a74d:	mov    rdx,QWORD PTR [r12+rax*8]
   3a751:	xor    eax,eax
   3a753:	call   3a510 <g_str_equal@plt+0x2d250>
   3a758:	mov    rax,QWORD PTR [rip+0x247df9]        # 282558 <g_test_config_vars+0x1198>
   3a75f:	mov    rsi,r13
   3a762:	cmp    ebx,DWORD PTR [rax+0x4]
   3a765:	jl     3a740 <g_str_equal@plt+0x2d480>
   3a767:	lea    rdi,[rip+0x274e8]        # 61c56 <_fini@@Base+0xf502>
   3a76e:	xor    eax,eax
   3a770:	call   3a510 <g_str_equal@plt+0x2d250>
   3a775:	cmp    ebp,0x1
   3a778:	jne    3a650 <g_str_equal@plt+0x2d390>
   3a77e:	lea    rdi,[rip+0x274ca]        # 61c4f <_fini@@Base+0xf4fb>
   3a785:	xor    eax,eax
   3a787:	call   3a510 <g_str_equal@plt+0x2d250>
   3a78c:	jmp    3a663 <g_str_equal@plt+0x2d3a3>
   3a791:	nop    DWORD PTR [rax+0x0]
   3a798:	mov    rsi,QWORD PTR [rax+0x8]
   3a79c:	lea    rdi,[rip+0x274a4]        # 61c47 <_fini@@Base+0xf4f3>
   3a7a3:	xor    eax,eax
   3a7a5:	call   3a510 <g_str_equal@plt+0x2d250>
   3a7aa:	mov    rax,QWORD PTR [rip+0x247da7]        # 282558 <g_test_config_vars+0x1198>
   3a7b1:	mov    esi,DWORD PTR [rax+0x4]
   3a7b4:	test   esi,esi
   3a7b6:	je     3a7c6 <g_str_equal@plt+0x2d506>
   3a7b8:	lea    rdi,[rip+0x2748c]        # 61c4b <_fini@@Base+0xf4f7>
   3a7bf:	xor    eax,eax
   3a7c1:	call   3a510 <g_str_equal@plt+0x2d250>
   3a7c6:	lea    rdi,[rip+0x2582b]        # 5fff8 <_fini@@Base+0xd8a4>
   3a7cd:	xor    eax,eax
   3a7cf:	call   3a510 <g_str_equal@plt+0x2d250>
   3a7d4:	jmp    3a647 <g_str_equal@plt+0x2d387>
   3a7d9:	call   cd30 <__stack_chk_fail@plt>
   3a7de:	xchg   ax,ax
   3a7e0:	sub    rsp,0xd8
   3a7e7:	test   al,al
   3a7e9:	mov    QWORD PTR [rsp+0x28],rsi
   3a7ee:	mov    QWORD PTR [rsp+0x30],rdx
   3a7f3:	mov    QWORD PTR [rsp+0x38],rcx
   3a7f8:	mov    QWORD PTR [rsp+0x40],r8
   3a7fd:	mov    QWORD PTR [rsp+0x48],r9
   3a802:	je     3a83b <g_str_equal@plt+0x2d57b>
   3a804:	movaps XMMWORD PTR [rsp+0x50],xmm0
   3a809:	movaps XMMWORD PTR [rsp+0x60],xmm1
   3a80e:	movaps XMMWORD PTR [rsp+0x70],xmm2
   3a813:	movaps XMMWORD PTR [rsp+0x80],xmm3
   3a81b:	movaps XMMWORD PTR [rsp+0x90],xmm4
   3a823:	movaps XMMWORD PTR [rsp+0xa0],xmm5
   3a82b:	movaps XMMWORD PTR [rsp+0xb0],xmm6
   3a833:	movaps XMMWORD PTR [rsp+0xc0],xmm7
   3a83b:	mov    rax,QWORD PTR fs:0x28
   3a844:	mov    QWORD PTR [rsp+0x18],rax
   3a849:	xor    eax,eax
   3a84b:	lea    rax,[rsp+0xe0]
   3a853:	mov    rsi,rsp
   3a856:	mov    QWORD PTR [rsp+0x8],rax
   3a85b:	lea    rax,[rsp+0x20]
   3a860:	mov    DWORD PTR [rsp],0x8
   3a867:	mov    DWORD PTR [rsp+0x4],0x30
   3a86f:	mov    QWORD PTR [rsp+0x10],rax
   3a874:	call   43f50 <g_str_equal@plt+0x36c90>
   3a879:	mov    rax,QWORD PTR [rsp+0x18]
   3a87e:	xor    rax,QWORD PTR fs:0x28
   3a887:	jne    3a891 <g_str_equal@plt+0x2d5d1>
   3a889:	add    rsp,0xd8
   3a890:	ret    
   3a891:	call   cd30 <__stack_chk_fail@plt>
   3a896:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3a8a0:	cmp    QWORD PTR [rdi+0x10],0x0
   3a8a5:	jne    3a8bd <g_str_equal@plt+0x2d5fd>
   3a8a7:	mov    rax,QWORD PTR [rip+0x247caa]        # 282558 <g_test_config_vars+0x1198>
   3a8ae:	mov    QWORD PTR [rip+0x247ca3],rdi        # 282558 <g_test_config_vars+0x1198>
   3a8b5:	mov    QWORD PTR [rdi+0x10],rax
   3a8b9:	mov    rax,rdi
   3a8bc:	ret    
   3a8bd:	lea    rcx,[rip+0x2745c]        # 61d20 <_fini@@Base+0xf5cc>
   3a8c4:	lea    rsi,[rip+0x273bd]        # 61c88 <_fini@@Base+0xf534>
   3a8cb:	lea    rdi,[rip+0x2738e]        # 61c60 <_fini@@Base+0xf50c>
   3a8d2:	sub    rsp,0x8
   3a8d6:	mov    edx,0x39
   3a8db:	call   c390 <__assert_fail@plt>
   3a8e0:	mov    rdx,QWORD PTR [rip+0x247c71]        # 282558 <g_test_config_vars+0x1198>
   3a8e7:	mov    rax,rdi
   3a8ea:	mov    DWORD PTR [rdi],0x0
   3a8f0:	mov    QWORD PTR [rip+0x247c61],rdi        # 282558 <g_test_config_vars+0x1198>
   3a8f7:	mov    QWORD PTR [rdi+0x10],rdx
   3a8fb:	ret    
   3a8fc:	nop    DWORD PTR [rax+0x0]
   3a900:	mov    rax,QWORD PTR [rip+0x247c51]        # 282558 <g_test_config_vars+0x1198>
   3a907:	cmp    rax,rdi
   3a90a:	jne    3a925 <g_str_equal@plt+0x2d665>
   3a90c:	mov    rdx,QWORD PTR [rax+0x10]
   3a910:	test   rdx,rdx
   3a913:	je     3a925 <g_str_equal@plt+0x2d665>
   3a915:	mov    QWORD PTR [rip+0x247c3c],rdx        # 282558 <g_test_config_vars+0x1198>
   3a91c:	mov    QWORD PTR [rax+0x10],0x0
   3a924:	ret    
   3a925:	lea    rcx,[rip+0x273e4]        # 61d10 <_fini@@Base+0xf5bc>
   3a92c:	lea    rsi,[rip+0x27355]        # 61c88 <_fini@@Base+0xf534>
   3a933:	lea    rdi,[rip+0x27331]        # 61c6b <_fini@@Base+0xf517>
   3a93a:	sub    rsp,0x8
   3a93e:	mov    edx,0x52
   3a943:	call   c390 <__assert_fail@plt>
   3a948:	nop    DWORD PTR [rax+rax*1+0x0]
   3a950:	mov    rdx,QWORD PTR [rip+0x247c01]        # 282558 <g_test_config_vars+0x1198>
   3a957:	mov    rax,rdi
   3a95a:	movdqu xmm0,XMMWORD PTR [rdx]
   3a95e:	mov    QWORD PTR [rdi+0x10],0x0
   3a966:	movups XMMWORD PTR [rdi],xmm0
   3a969:	ret    
   3a96a:	nop    WORD PTR [rax+rax*1+0x0]
   3a970:	cmp    QWORD PTR [rdi+0x10],0x0
   3a975:	mov    rax,QWORD PTR [rip+0x247bdc]        # 282558 <g_test_config_vars+0x1198>
   3a97c:	mov    rdx,QWORD PTR [rax+0x10]
   3a980:	jne    3a98e <g_str_equal@plt+0x2d6ce>
   3a982:	movdqu xmm0,XMMWORD PTR [rdi]
   3a986:	mov    QWORD PTR [rax+0x10],rdx
   3a98a:	movups XMMWORD PTR [rax],xmm0
   3a98d:	ret    
   3a98e:	lea    rcx,[rip+0x2736b]        # 61d00 <_fini@@Base+0xf5ac>
   3a995:	lea    rsi,[rip+0x272ec]        # 61c88 <_fini@@Base+0xf534>
   3a99c:	lea    rdi,[rip+0x272bd]        # 61c60 <_fini@@Base+0xf50c>
   3a9a3:	sub    rsp,0x8
   3a9a7:	mov    edx,0x68
   3a9ac:	call   c390 <__assert_fail@plt>
   3a9b1:	nop    DWORD PTR [rax+rax*1+0x0]
   3a9b6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3a9c0:	mov    rax,QWORD PTR [rip+0x247b91]        # 282558 <g_test_config_vars+0x1198>
   3a9c7:	mov    DWORD PTR [rax],0x0
   3a9cd:	ret    
   3a9ce:	xchg   ax,ax
   3a9d0:	mov    rax,QWORD PTR [rip+0x247b81]        # 282558 <g_test_config_vars+0x1198>
   3a9d7:	movsxd rsi,esi
   3a9da:	mov    DWORD PTR [rax+0x4],edx
   3a9dd:	lea    rdx,[rdi+rsi*8]
   3a9e1:	mov    DWORD PTR [rax],0x1
   3a9e7:	mov    QWORD PTR [rax+0x8],rdx
   3a9eb:	ret    
   3a9ec:	nop    DWORD PTR [rax+0x0]
   3a9f0:	test   rdi,rdi
   3a9f3:	mov    rax,QWORD PTR [rip+0x247b5e]        # 282558 <g_test_config_vars+0x1198>
   3a9fa:	je     3aa10 <g_str_equal@plt+0x2d750>
   3a9fc:	mov    DWORD PTR [rax],0x2
   3aa02:	mov    DWORD PTR [rax+0x4],esi
   3aa05:	mov    QWORD PTR [rax+0x8],rdi
   3aa09:	ret    
   3aa0a:	nop    WORD PTR [rax+rax*1+0x0]
   3aa10:	cmp    DWORD PTR [rax],0x2
   3aa13:	jne    3aa19 <g_str_equal@plt+0x2d759>
   3aa15:	mov    DWORD PTR [rax+0x4],esi
   3aa18:	ret    
   3aa19:	lea    rcx,[rip+0x272d0]        # 61cf0 <_fini@@Base+0xf59c>
   3aa20:	lea    rsi,[rip+0x27261]        # 61c88 <_fini@@Base+0xf534>
   3aa27:	lea    rdi,[rip+0x2729a]        # 61cc8 <_fini@@Base+0xf574>
   3aa2e:	sub    rsp,0x8
   3aa32:	mov    edx,0x84
   3aa37:	call   c390 <__assert_fail@plt>
   3aa3c:	nop    DWORD PTR [rax+0x0]
   3aa40:	push   rbx
   3aa41:	mov    esi,0x2f
   3aa46:	mov    rbx,rdi
   3aa49:	call   c8c0 <strrchr@plt>
   3aa4e:	lea    rdx,[rax+0x1]
   3aa52:	test   rax,rax
   3aa55:	cmovne rbx,rdx
   3aa59:	mov    QWORD PTR [rip+0x24b238],rbx        # 285c98 <stdout@@GLIBC_2.2.5+0x1350>
   3aa60:	pop    rbx
   3aa61:	ret    
   3aa62:	nop    DWORD PTR [rax+0x0]
   3aa66:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3aa70:	mov    rax,QWORD PTR [rip+0x24b221]        # 285c98 <stdout@@GLIBC_2.2.5+0x1350>
   3aa77:	ret    
   3aa78:	nop    DWORD PTR [rax+rax*1+0x0]
   3aa80:	mov    rdx,rsi
   3aa83:	mov    rsi,rdi
   3aa86:	xor    edi,edi
   3aa88:	jmp    3a5d0 <g_str_equal@plt+0x2d310>
   3aa8d:	nop    DWORD PTR [rax]
   3aa90:	mov    rdx,rsi
   3aa93:	mov    rsi,rdi
   3aa96:	mov    edi,0x1
   3aa9b:	jmp    3a5d0 <g_str_equal@plt+0x2d310>
   3aaa0:	mov    rdx,rsi
   3aaa3:	mov    rsi,rdi
   3aaa6:	mov    edi,0x2
   3aaab:	jmp    3a5d0 <g_str_equal@plt+0x2d310>
   3aab0:	sub    rsp,0xd8
   3aab7:	test   al,al
   3aab9:	mov    QWORD PTR [rsp+0x28],rsi
   3aabe:	mov    QWORD PTR [rsp+0x30],rdx
   3aac3:	mov    QWORD PTR [rsp+0x38],rcx
   3aac8:	mov    QWORD PTR [rsp+0x40],r8
   3aacd:	mov    QWORD PTR [rsp+0x48],r9
   3aad2:	je     3ab0b <g_str_equal@plt+0x2d84b>
   3aad4:	movaps XMMWORD PTR [rsp+0x50],xmm0
   3aad9:	movaps XMMWORD PTR [rsp+0x60],xmm1
   3aade:	movaps XMMWORD PTR [rsp+0x70],xmm2
   3aae3:	movaps XMMWORD PTR [rsp+0x80],xmm3
   3aaeb:	movaps XMMWORD PTR [rsp+0x90],xmm4
   3aaf3:	movaps XMMWORD PTR [rsp+0xa0],xmm5
   3aafb:	movaps XMMWORD PTR [rsp+0xb0],xmm6
   3ab03:	movaps XMMWORD PTR [rsp+0xc0],xmm7
   3ab0b:	mov    rax,QWORD PTR fs:0x28
   3ab14:	mov    QWORD PTR [rsp+0x18],rax
   3ab19:	xor    eax,eax
   3ab1b:	lea    rax,[rsp+0xe0]
   3ab23:	mov    rsi,rdi
   3ab26:	mov    rdx,rsp
   3ab29:	xor    edi,edi
   3ab2b:	mov    QWORD PTR [rsp+0x8],rax
   3ab30:	lea    rax,[rsp+0x20]
   3ab35:	mov    DWORD PTR [rsp],0x8
   3ab3c:	mov    DWORD PTR [rsp+0x4],0x30
   3ab44:	mov    QWORD PTR [rsp+0x10],rax
   3ab49:	call   3a5d0 <g_str_equal@plt+0x2d310>
   3ab4e:	mov    rax,QWORD PTR [rsp+0x18]
   3ab53:	xor    rax,QWORD PTR fs:0x28
   3ab5c:	jne    3ab66 <g_str_equal@plt+0x2d8a6>
   3ab5e:	add    rsp,0xd8
   3ab65:	ret    
   3ab66:	call   cd30 <__stack_chk_fail@plt>
   3ab6b:	nop    DWORD PTR [rax+rax*1+0x0]
   3ab70:	sub    rsp,0xd8
   3ab77:	test   al,al
   3ab79:	mov    QWORD PTR [rsp+0x28],rsi
   3ab7e:	mov    QWORD PTR [rsp+0x30],rdx
   3ab83:	mov    QWORD PTR [rsp+0x38],rcx
   3ab88:	mov    QWORD PTR [rsp+0x40],r8
   3ab8d:	mov    QWORD PTR [rsp+0x48],r9
   3ab92:	je     3abcb <g_str_equal@plt+0x2d90b>
   3ab94:	movaps XMMWORD PTR [rsp+0x50],xmm0
   3ab99:	movaps XMMWORD PTR [rsp+0x60],xmm1
   3ab9e:	movaps XMMWORD PTR [rsp+0x70],xmm2
   3aba3:	movaps XMMWORD PTR [rsp+0x80],xmm3
   3abab:	movaps XMMWORD PTR [rsp+0x90],xmm4
   3abb3:	movaps XMMWORD PTR [rsp+0xa0],xmm5
   3abbb:	movaps XMMWORD PTR [rsp+0xb0],xmm6
   3abc3:	movaps XMMWORD PTR [rsp+0xc0],xmm7
   3abcb:	mov    rax,QWORD PTR fs:0x28
   3abd4:	mov    QWORD PTR [rsp+0x18],rax
   3abd9:	xor    eax,eax
   3abdb:	lea    rax,[rsp+0xe0]
   3abe3:	mov    rsi,rdi
   3abe6:	mov    rdx,rsp
   3abe9:	mov    edi,0x1
   3abee:	mov    QWORD PTR [rsp+0x8],rax
   3abf3:	lea    rax,[rsp+0x20]
   3abf8:	mov    DWORD PTR [rsp],0x8
   3abff:	mov    DWORD PTR [rsp+0x4],0x30
   3ac07:	mov    QWORD PTR [rsp+0x10],rax
   3ac0c:	call   3a5d0 <g_str_equal@plt+0x2d310>
   3ac11:	mov    rax,QWORD PTR [rsp+0x18]
   3ac16:	xor    rax,QWORD PTR fs:0x28
   3ac1f:	jne    3ac29 <g_str_equal@plt+0x2d969>
   3ac21:	add    rsp,0xd8
   3ac28:	ret    
   3ac29:	call   cd30 <__stack_chk_fail@plt>
   3ac2e:	xchg   ax,ax
   3ac30:	sub    rsp,0xd8
   3ac37:	test   al,al
   3ac39:	mov    QWORD PTR [rsp+0x28],rsi
   3ac3e:	mov    QWORD PTR [rsp+0x30],rdx
   3ac43:	mov    QWORD PTR [rsp+0x38],rcx
   3ac48:	mov    QWORD PTR [rsp+0x40],r8
   3ac4d:	mov    QWORD PTR [rsp+0x48],r9
   3ac52:	je     3ac8b <g_str_equal@plt+0x2d9cb>
   3ac54:	movaps XMMWORD PTR [rsp+0x50],xmm0
   3ac59:	movaps XMMWORD PTR [rsp+0x60],xmm1
   3ac5e:	movaps XMMWORD PTR [rsp+0x70],xmm2
   3ac63:	movaps XMMWORD PTR [rsp+0x80],xmm3
   3ac6b:	movaps XMMWORD PTR [rsp+0x90],xmm4
   3ac73:	movaps XMMWORD PTR [rsp+0xa0],xmm5
   3ac7b:	movaps XMMWORD PTR [rsp+0xb0],xmm6
   3ac83:	movaps XMMWORD PTR [rsp+0xc0],xmm7
   3ac8b:	mov    rax,QWORD PTR fs:0x28
   3ac94:	mov    QWORD PTR [rsp+0x18],rax
   3ac99:	xor    eax,eax
   3ac9b:	lea    rax,[rsp+0xe0]
   3aca3:	mov    rsi,rdi
   3aca6:	mov    rdx,rsp
   3aca9:	mov    edi,0x2
   3acae:	mov    QWORD PTR [rsp+0x8],rax
   3acb3:	lea    rax,[rsp+0x20]
   3acb8:	mov    DWORD PTR [rsp],0x8
   3acbf:	mov    DWORD PTR [rsp+0x4],0x30
   3acc7:	mov    QWORD PTR [rsp+0x10],rax
   3accc:	call   3a5d0 <g_str_equal@plt+0x2d310>
   3acd1:	mov    rax,QWORD PTR [rsp+0x18]
   3acd6:	xor    rax,QWORD PTR fs:0x28
   3acdf:	jne    3ace9 <g_str_equal@plt+0x2da29>
   3ace1:	add    rsp,0xd8
   3ace8:	ret    
   3ace9:	call   cd30 <__stack_chk_fail@plt>
   3acee:	xchg   ax,ax
   3acf0:	mov    rdx,QWORD PTR [rdi+0x8]
   3acf4:	mov    rax,QWORD PTR [rsi+0x8]
   3acf8:	mov    rax,QWORD PTR [rax]
   3acfb:	cmp    QWORD PTR [rdx],rax
   3acfe:	jb     3ad10 <g_str_equal@plt+0x2da50>
   3ad00:	seta   al
   3ad03:	movzx  eax,al
   3ad06:	ret    
   3ad07:	nop    WORD PTR [rax+rax*1+0x0]
   3ad10:	mov    eax,0xffffffff
   3ad15:	ret    
   3ad16:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3ad20:	mov    eax,DWORD PTR [rdi]
   3ad22:	sub    eax,DWORD PTR [rsi]
   3ad24:	ret    
   3ad25:	nop
   3ad26:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3ad30:	push   r13
   3ad32:	push   r12
   3ad34:	mov    r13d,edi
   3ad37:	push   rbp
   3ad38:	push   rbx
   3ad39:	mov    ebp,ecx
   3ad3b:	pxor   xmm0,xmm0
   3ad3f:	sub    rsp,0x48
   3ad43:	mov    rax,QWORD PTR fs:0x28
   3ad4c:	mov    QWORD PTR [rsp+0x38],rax
   3ad51:	xor    eax,eax
   3ad53:	mov    eax,edx
   3ad55:	mov    QWORD PTR [rsp+0x30],0x0
   3ad5e:	mov    QWORD PTR [rsp+0x10],rsi
   3ad63:	movaps XMMWORD PTR [rsp],xmm0
   3ad67:	mov    QWORD PTR [rsp+0x18],rax
   3ad6c:	mov    r12,rsp
   3ad6f:	movaps XMMWORD PTR [rsp+0x20],xmm0
   3ad74:	jmp    3ad97 <g_str_equal@plt+0x2dad7>
   3ad76:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3ad80:	call   c970 <sendmsg@plt>
   3ad85:	mov    rbx,rax
   3ad88:	test   rbx,rbx
   3ad8b:	jns    3adb1 <g_str_equal@plt+0x2daf1>
   3ad8d:	call   cc80 <__errno_location@plt>
   3ad92:	cmp    DWORD PTR [rax],0x4
   3ad95:	jne    3adb1 <g_str_equal@plt+0x2daf1>
   3ad97:	xor    edx,edx
   3ad99:	test   bpl,bpl
   3ad9c:	mov    rsi,r12
   3ad9f:	mov    edi,r13d
   3ada2:	jne    3ad80 <g_str_equal@plt+0x2dac0>
   3ada4:	call   c300 <recvmsg@plt>
   3ada9:	mov    rbx,rax
   3adac:	test   rbx,rbx
   3adaf:	js     3ad8d <g_str_equal@plt+0x2dacd>
   3adb1:	mov    rcx,QWORD PTR [rsp+0x38]
   3adb6:	xor    rcx,QWORD PTR fs:0x28
   3adbf:	mov    rax,rbx
   3adc2:	jne    3adcf <g_str_equal@plt+0x2db0f>
   3adc4:	add    rsp,0x48
   3adc8:	pop    rbx
   3adc9:	pop    rbp
   3adca:	pop    r12
   3adcc:	pop    r13
   3adce:	ret    
   3adcf:	call   cd30 <__stack_chk_fail@plt>
   3add4:	xchg   ax,ax
   3add6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3ade0:	push   r15
   3ade2:	push   r14
   3ade4:	push   r13
   3ade6:	push   r12
   3ade8:	push   rbp
   3ade9:	push   rbx
   3adea:	mov    rbp,rdx
   3aded:	sub    rsp,0x8
   3adf1:	or     rbp,r8
   3adf4:	je     3ae75 <g_str_equal@plt+0x2dbb5>
   3adf6:	test   esi,esi
   3adf8:	je     3ae68 <g_str_equal@plt+0x2dba8>
   3adfa:	lea    eax,[rsi-0x1]
   3adfd:	mov    r12,rcx
   3ae00:	mov    r14,r8
   3ae03:	mov    rbx,rdi
   3ae06:	xor    ebp,ebp
   3ae08:	shl    rax,0x4
   3ae0c:	lea    r15,[rdi+rax*1+0x10]
   3ae11:	jmp    3ae30 <g_str_equal@plt+0x2db70>
   3ae13:	nop    DWORD PTR [rax+rax*1+0x0]
   3ae18:	sub    rdx,rax
   3ae1b:	setne  al
   3ae1e:	cmp    rbp,r14
   3ae21:	jb     3ae27 <g_str_equal@plt+0x2db67>
   3ae23:	test   al,al
   3ae25:	je     3ae75 <g_str_equal@plt+0x2dbb5>
   3ae27:	add    rbx,0x10
   3ae2b:	cmp    rbx,r15
   3ae2e:	je     3ae70 <g_str_equal@plt+0x2dbb0>
   3ae30:	mov    rax,QWORD PTR [rbx+0x8]
   3ae34:	cmp    rax,rdx
   3ae37:	jbe    3ae18 <g_str_equal@plt+0x2db58>
   3ae39:	mov    r13,r14
   3ae3c:	sub    rax,rdx
   3ae3f:	mov    rdi,QWORD PTR [rbx]
   3ae42:	sub    r13,rbp
   3ae45:	lea    rsi,[r12+rbp*1]
   3ae49:	cmp    r13,rax
   3ae4c:	cmova  r13,rax
   3ae50:	add    rdi,rdx
   3ae53:	mov    rdx,r13
   3ae56:	add    rbp,r13
   3ae59:	call   d220 <memcpy@plt>
   3ae5e:	xor    eax,eax
   3ae60:	xor    edx,edx
   3ae62:	jmp    3ae1e <g_str_equal@plt+0x2db5e>
   3ae64:	nop    DWORD PTR [rax+0x0]
   3ae68:	xor    ebp,ebp
   3ae6a:	nop    WORD PTR [rax+rax*1+0x0]
   3ae70:	test   rdx,rdx
   3ae73:	jne    3ae87 <g_str_equal@plt+0x2dbc7>
   3ae75:	add    rsp,0x8
   3ae79:	mov    rax,rbp
   3ae7c:	pop    rbx
   3ae7d:	pop    rbp
   3ae7e:	pop    r12
   3ae80:	pop    r13
   3ae82:	pop    r14
   3ae84:	pop    r15
   3ae86:	ret    
   3ae87:	lea    rcx,[rip+0x27082]        # 61f10 <_fini@@Base+0xf7bc>
   3ae8e:	lea    rsi,[rip+0x26ea3]        # 61d38 <_fini@@Base+0xf5e4>
   3ae95:	lea    rdi,[rip+0x288d9]        # 63775 <_fini@@Base+0x11021>
   3ae9c:	mov    edx,0x28
   3aea1:	call   c390 <__assert_fail@plt>
   3aea6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3aeb0:	push   r15
   3aeb2:	push   r14
   3aeb4:	push   r13
   3aeb6:	push   r12
   3aeb8:	push   rbp
   3aeb9:	push   rbx
   3aeba:	mov    rbp,rdx
   3aebd:	sub    rsp,0x8
   3aec1:	or     rbp,r8
   3aec4:	je     3af45 <g_str_equal@plt+0x2dc85>
   3aec6:	test   esi,esi
   3aec8:	je     3af38 <g_str_equal@plt+0x2dc78>
   3aeca:	lea    eax,[rsi-0x1]
   3aecd:	mov    r12,rcx
   3aed0:	mov    r14,r8
   3aed3:	mov    rbx,rdi
   3aed6:	xor    ebp,ebp
   3aed8:	shl    rax,0x4
   3aedc:	lea    r15,[rdi+rax*1+0x10]
   3aee1:	jmp    3af00 <g_str_equal@plt+0x2dc40>
   3aee3:	nop    DWORD PTR [rax+rax*1+0x0]
   3aee8:	sub    rdx,rax
   3aeeb:	setne  al
   3aeee:	cmp    rbp,r14
   3aef1:	jb     3aef7 <g_str_equal@plt+0x2dc37>
   3aef3:	test   al,al
   3aef5:	je     3af45 <g_str_equal@plt+0x2dc85>
   3aef7:	add    rbx,0x10
   3aefb:	cmp    rbx,r15
   3aefe:	je     3af40 <g_str_equal@plt+0x2dc80>
   3af00:	mov    rax,QWORD PTR [rbx+0x8]
   3af04:	cmp    rax,rdx
   3af07:	jbe    3aee8 <g_str_equal@plt+0x2dc28>
   3af09:	mov    r13,r14
   3af0c:	sub    rax,rdx
   3af0f:	mov    rsi,QWORD PTR [rbx]
   3af12:	sub    r13,rbp
   3af15:	lea    rdi,[r12+rbp*1]
   3af19:	cmp    r13,rax
   3af1c:	cmova  r13,rax
   3af20:	add    rsi,rdx
   3af23:	mov    rdx,r13
   3af26:	add    rbp,r13
   3af29:	call   d220 <memcpy@plt>
   3af2e:	xor    eax,eax
   3af30:	xor    edx,edx
   3af32:	jmp    3aeee <g_str_equal@plt+0x2dc2e>
   3af34:	nop    DWORD PTR [rax+0x0]
   3af38:	xor    ebp,ebp
   3af3a:	nop    WORD PTR [rax+rax*1+0x0]
   3af40:	test   rdx,rdx
   3af43:	jne    3af57 <g_str_equal@plt+0x2dc97>
   3af45:	add    rsp,0x8
   3af49:	mov    rax,rbp
   3af4c:	pop    rbx
   3af4d:	pop    rbp
   3af4e:	pop    r12
   3af50:	pop    r13
   3af52:	pop    r14
   3af54:	pop    r15
   3af56:	ret    
   3af57:	lea    rcx,[rip+0x26fa2]        # 61f00 <_fini@@Base+0xf7ac>
   3af5e:	lea    rsi,[rip+0x26dd3]        # 61d38 <_fini@@Base+0xf5e4>
   3af65:	lea    rdi,[rip+0x28809]        # 63775 <_fini@@Base+0x11021>
   3af6c:	mov    edx,0x3b
   3af71:	call   c390 <__assert_fail@plt>
   3af76:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3af80:	push   r15
   3af82:	push   r14
   3af84:	push   r13
   3af86:	push   r12
   3af88:	push   rbp
   3af89:	push   rbx
   3af8a:	mov    rbp,rdx
   3af8d:	sub    rsp,0x8
   3af91:	or     rbp,r8
   3af94:	je     3b015 <g_str_equal@plt+0x2dd55>
   3af96:	test   esi,esi
   3af98:	je     3b008 <g_str_equal@plt+0x2dd48>
   3af9a:	lea    eax,[rsi-0x1]
   3af9d:	mov    r12d,ecx
   3afa0:	mov    r14,r8
   3afa3:	mov    rbx,rdi
   3afa6:	xor    ebp,ebp
   3afa8:	shl    rax,0x4
   3afac:	lea    r15,[rdi+rax*1+0x10]
   3afb1:	jmp    3afd0 <g_str_equal@plt+0x2dd10>
   3afb3:	nop    DWORD PTR [rax+rax*1+0x0]
   3afb8:	sub    rdx,rax
   3afbb:	setne  al
   3afbe:	cmp    rbp,r14
   3afc1:	jb     3afc7 <g_str_equal@plt+0x2dd07>
   3afc3:	test   al,al
   3afc5:	je     3b015 <g_str_equal@plt+0x2dd55>
   3afc7:	add    rbx,0x10
   3afcb:	cmp    rbx,r15
   3afce:	je     3b010 <g_str_equal@plt+0x2dd50>
   3afd0:	mov    rax,QWORD PTR [rbx+0x8]
   3afd4:	cmp    rax,rdx
   3afd7:	jbe    3afb8 <g_str_equal@plt+0x2dcf8>
   3afd9:	mov    r13,r14
   3afdc:	sub    rax,rdx
   3afdf:	mov    rdi,QWORD PTR [rbx]
   3afe2:	sub    r13,rbp
   3afe5:	mov    esi,r12d
   3afe8:	cmp    r13,rax
   3afeb:	cmova  r13,rax
   3afef:	add    rdi,rdx
   3aff2:	mov    rdx,r13
   3aff5:	add    rbp,r13
   3aff8:	call   c1c0 <memset@plt>
   3affd:	xor    eax,eax
   3afff:	xor    edx,edx
   3b001:	jmp    3afbe <g_str_equal@plt+0x2dcfe>
   3b003:	nop    DWORD PTR [rax+rax*1+0x0]
   3b008:	xor    ebp,ebp
   3b00a:	nop    WORD PTR [rax+rax*1+0x0]
   3b010:	test   rdx,rdx
   3b013:	jne    3b027 <g_str_equal@plt+0x2dd67>
   3b015:	add    rsp,0x8
   3b019:	mov    rax,rbp
   3b01c:	pop    rbx
   3b01d:	pop    rbp
   3b01e:	pop    r12
   3b020:	pop    r13
   3b022:	pop    r14
   3b024:	pop    r15
   3b026:	ret    
   3b027:	lea    rcx,[rip+0x26eba]        # 61ee8 <_fini@@Base+0xf794>
   3b02e:	lea    rsi,[rip+0x26d03]        # 61d38 <_fini@@Base+0xf5e4>
   3b035:	lea    rdi,[rip+0x28739]        # 63775 <_fini@@Base+0x11021>
   3b03c:	mov    edx,0x4e
   3b041:	call   c390 <__assert_fail@plt>
   3b046:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3b050:	test   esi,esi
   3b052:	je     3b080 <g_str_equal@plt+0x2ddc0>
   3b054:	lea    eax,[rsi-0x1]
   3b057:	lea    rdx,[rdi+0x8]
   3b05b:	shl    rax,0x4
   3b05f:	lea    rcx,[rdi+rax*1+0x18]
   3b064:	xor    eax,eax
   3b066:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3b070:	add    rax,QWORD PTR [rdx]
   3b073:	add    rdx,0x10
   3b077:	cmp    rdx,rcx
   3b07a:	jne    3b070 <g_str_equal@plt+0x2ddb0>
   3b07c:	repz ret 
   3b07e:	xchg   ax,ax
   3b080:	xor    eax,eax
   3b082:	ret    
   3b083:	nop    DWORD PTR [rax]
   3b086:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3b090:	push   r15
   3b092:	push   r14
   3b094:	push   r13
   3b096:	push   r12
   3b098:	mov    r13,rdi
   3b09b:	push   rbp
   3b09c:	push   rbx
   3b09d:	mov    r12d,esi
   3b0a0:	mov    rbx,rdx
   3b0a3:	mov    rbp,rcx
   3b0a6:	sub    rsp,0x8
   3b0aa:	test   esi,esi
   3b0ac:	je     3b120 <g_str_equal@plt+0x2de60>
   3b0ae:	xor    ecx,ecx
   3b0b0:	xor    eax,eax
   3b0b2:	nop    WORD PTR [rax+rax*1+0x0]
   3b0b8:	movsxd rdx,eax
   3b0bb:	add    eax,0x1
   3b0be:	shl    rdx,0x4
   3b0c2:	add    rcx,QWORD PTR [r13+rdx*1+0x8]
   3b0c7:	cmp    eax,r12d
   3b0ca:	jne    3b0b8 <g_str_equal@plt+0x2ddf8>
   3b0cc:	cmp    r8,rcx
   3b0cf:	cmovbe rcx,r8
   3b0d3:	mov    r14,rcx
   3b0d6:	mov    rdi,r14
   3b0d9:	call   c500 <g_malloc@plt>
   3b0de:	mov    r8,r14
   3b0e1:	mov    r15,rax
   3b0e4:	mov    esi,r12d
   3b0e7:	mov    rdi,r13
   3b0ea:	mov    rcx,rax
   3b0ed:	xor    edx,edx
   3b0ef:	call   3aeb0 <g_str_equal@plt+0x2dbf0>
   3b0f4:	mov    rdi,r15
   3b0f7:	mov    rcx,r14
   3b0fa:	mov    rdx,rbp
   3b0fd:	mov    rsi,rbx
   3b100:	call   41d80 <g_str_equal@plt+0x34ac0>
   3b105:	add    rsp,0x8
   3b109:	mov    rdi,r15
   3b10c:	pop    rbx
   3b10d:	pop    rbp
   3b10e:	pop    r12
   3b110:	pop    r13
   3b112:	pop    r14
   3b114:	pop    r15
   3b116:	jmp    d2b0 <g_free@plt>
   3b11b:	nop    DWORD PTR [rax+rax*1+0x0]
   3b120:	xor    r14d,r14d
   3b123:	jmp    3b0d6 <g_str_equal@plt+0x2de16>
   3b125:	nop
   3b126:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3b130:	push   rbp
   3b131:	push   rbx
   3b132:	sub    rsp,0x8
   3b136:	test   ecx,ecx
   3b138:	je     3b1c0 <g_str_equal@plt+0x2df00>
   3b13e:	test   esi,esi
   3b140:	je     3b1c0 <g_str_equal@plt+0x2df00>
   3b142:	mov    rax,r8
   3b145:	or     rax,r9
   3b148:	mov    eax,0x0
   3b14d:	je     3b1b5 <g_str_equal@plt+0x2def5>
   3b14f:	xor    ebp,ebp
   3b151:	jmp    3b191 <g_str_equal@plt+0x2ded1>
   3b153:	nop    DWORD PTR [rax+rax*1+0x0]
   3b158:	sub    r10,r8
   3b15b:	mov    ebx,eax
   3b15d:	cmp    r10,r9
   3b160:	cmova  r10,r9
   3b164:	add    r8,QWORD PTR [r11]
   3b167:	shl    rbx,0x4
   3b16b:	add    rbx,rdi
   3b16e:	add    ebp,0x1
   3b171:	add    eax,0x1
   3b174:	sub    r9,r10
   3b177:	mov    QWORD PTR [rbx+0x8],r10
   3b17b:	mov    QWORD PTR [rbx],r8
   3b17e:	xor    r8d,r8d
   3b181:	cmp    ecx,ebp
   3b183:	jbe    3b1b0 <g_str_equal@plt+0x2def0>
   3b185:	cmp    eax,esi
   3b187:	jae    3b1b0 <g_str_equal@plt+0x2def0>
   3b189:	mov    rbx,r8
   3b18c:	or     rbx,r9
   3b18f:	je     3b1b5 <g_str_equal@plt+0x2def5>
   3b191:	mov    r11d,ebp
   3b194:	shl    r11,0x4
   3b198:	add    r11,rdx
   3b19b:	mov    r10,QWORD PTR [r11+0x8]
   3b19f:	cmp    r10,r8
   3b1a2:	ja     3b158 <g_str_equal@plt+0x2de98>
   3b1a4:	add    ebp,0x1
   3b1a7:	sub    r8,r10
   3b1aa:	cmp    ecx,ebp
   3b1ac:	ja     3b185 <g_str_equal@plt+0x2dec5>
   3b1ae:	xchg   ax,ax
   3b1b0:	test   r8,r8
   3b1b3:	jne    3b1c4 <g_str_equal@plt+0x2df04>
   3b1b5:	add    rsp,0x8
   3b1b9:	pop    rbx
   3b1ba:	pop    rbp
   3b1bb:	ret    
   3b1bc:	nop    DWORD PTR [rax+0x0]
   3b1c0:	xor    eax,eax
   3b1c2:	jmp    3b1b0 <g_str_equal@plt+0x2def0>
   3b1c4:	lea    rcx,[rip+0x26cfd]        # 61ec8 <_fini@@Base+0xf774>
   3b1cb:	lea    rsi,[rip+0x26b66]        # 61d38 <_fini@@Base+0xf5e4>
   3b1d2:	lea    rdi,[rip+0x2859c]        # 63775 <_fini@@Base+0x11021>
   3b1d9:	mov    edx,0x108
   3b1de:	call   c390 <__assert_fail@plt>
   3b1e3:	nop    DWORD PTR [rax]
   3b1e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3b1f0:	push   r15
   3b1f2:	push   r14
   3b1f4:	push   r13
   3b1f6:	push   r12
   3b1f8:	push   rbp
   3b1f9:	push   rbx
   3b1fa:	sub    rsp,0x28
   3b1fe:	test   r8,r8
   3b201:	mov    DWORD PTR [rsp+0xc],edi
   3b205:	mov    BYTE PTR [rsp+0x17],r9b
   3b20a:	je     3b380 <g_str_equal@plt+0x2e0c0>
   3b210:	mov    r14d,edx
   3b213:	mov    rbp,rcx
   3b216:	mov    r13,r8
   3b219:	mov    edi,edx
   3b21b:	mov    rbx,rsi
   3b21e:	mov    esi,0x10
   3b223:	call   c690 <g_malloc0_n@plt>
   3b228:	mov    r8,rbp
   3b22b:	mov    r9,r13
   3b22e:	mov    ecx,r14d
   3b231:	mov    rdx,rbx
   3b234:	mov    esi,r14d
   3b237:	mov    rdi,rax
   3b23a:	mov    r15,rax
   3b23d:	mov    QWORD PTR [rsp+0x18],rax
   3b242:	xor    r12d,r12d
   3b245:	call   3b130 <g_str_equal@plt+0x2de70>
   3b24a:	movzx  eax,BYTE PTR [rsp+0x17]
   3b24f:	xor    ebp,ebp
   3b251:	mov    DWORD PTR [rsp+0x10],eax
   3b255:	nop    DWORD PTR [rax]
   3b258:	test   r14d,r14d
   3b25b:	je     3b28b <g_str_equal@plt+0x2dfcb>
   3b25d:	mov    rbx,QWORD PTR [r15+0x8]
   3b261:	xor    eax,eax
   3b263:	lea    rdx,[r15+0x10]
   3b267:	cmp    rbx,rbp
   3b26a:	jbe    3b280 <g_str_equal@plt+0x2dfc0>
   3b26c:	jmp    3b2b3 <g_str_equal@plt+0x2dff3>
   3b26e:	xchg   ax,ax
   3b270:	mov    r15,rdx
   3b273:	lea    rdx,[rdx+0x10]
   3b277:	mov    rbx,QWORD PTR [rdx-0x8]
   3b27b:	cmp    rbx,rbp
   3b27e:	ja     3b2b0 <g_str_equal@plt+0x2dff0>
   3b280:	add    eax,0x1
   3b283:	sub    rbp,rbx
   3b286:	cmp    eax,r14d
   3b289:	jne    3b270 <g_str_equal@plt+0x2dfb0>
   3b28b:	lea    rcx,[rip+0x26c46]        # 61ed8 <_fini@@Base+0xf784>
   3b292:	lea    rsi,[rip+0x26a9f]        # 61d38 <_fini@@Base+0xf5e4>
   3b299:	lea    rdi,[rip+0x26af7]        # 61d97 <_fini@@Base+0xf643>
   3b2a0:	mov    edx,0xa7
   3b2a5:	call   c390 <__assert_fail@plt>
   3b2aa:	nop    WORD PTR [rax+rax*1+0x0]
   3b2b0:	sub    r14d,eax
   3b2b3:	test   rbp,rbp
   3b2b6:	je     3b2c2 <g_str_equal@plt+0x2e002>
   3b2b8:	add    QWORD PTR [r15],rbp
   3b2bb:	sub    rbx,rbp
   3b2be:	mov    QWORD PTR [r15+0x8],rbx
   3b2c2:	lea    rcx,[r15+0x18]
   3b2c6:	mov    rax,r13
   3b2c9:	xor    edx,edx
   3b2cb:	jmp    3b2d7 <g_str_equal@plt+0x2e017>
   3b2cd:	nop    DWORD PTR [rax]
   3b2d0:	mov    rbx,QWORD PTR [rcx]
   3b2d3:	add    rcx,0x10
   3b2d7:	cmp    rbx,rax
   3b2da:	ja     3b348 <g_str_equal@plt+0x2e088>
   3b2dc:	add    edx,0x1
   3b2df:	sub    rax,rbx
   3b2e2:	cmp    r14d,edx
   3b2e5:	jne    3b2d0 <g_str_equal@plt+0x2e010>
   3b2e7:	test   rax,rax
   3b2ea:	jne    3b3cb <g_str_equal@plt+0x2e10b>
   3b2f0:	mov    ecx,DWORD PTR [rsp+0x10]
   3b2f4:	mov    edi,DWORD PTR [rsp+0xc]
   3b2f8:	mov    rsi,r15
   3b2fb:	call   3ad30 <g_str_equal@plt+0x2da70>
   3b300:	test   rbp,rbp
   3b303:	je     3b30c <g_str_equal@plt+0x2e04c>
   3b305:	sub    QWORD PTR [r15],rbp
   3b308:	add    QWORD PTR [r15+0x8],rbp
   3b30c:	test   rax,rax
   3b30f:	js     3b385 <g_str_equal@plt+0x2e0c5>
   3b311:	jne    3b31a <g_str_equal@plt+0x2e05a>
   3b313:	cmp    BYTE PTR [rsp+0x17],0x1
   3b318:	jne    3b329 <g_str_equal@plt+0x2e069>
   3b31a:	add    rbp,rax
   3b31d:	add    r12,rax
   3b320:	sub    r13,rax
   3b323:	jne    3b258 <g_str_equal@plt+0x2df98>
   3b329:	mov    rdi,QWORD PTR [rsp+0x18]
   3b32e:	call   d2b0 <g_free@plt>
   3b333:	add    rsp,0x28
   3b337:	mov    rax,r12
   3b33a:	pop    rbx
   3b33b:	pop    rbp
   3b33c:	pop    r12
   3b33e:	pop    r13
   3b340:	pop    r14
   3b342:	pop    r15
   3b344:	ret    
   3b345:	nop    DWORD PTR [rax]
   3b348:	test   rax,rax
   3b34b:	je     3b2f0 <g_str_equal@plt+0x2e030>
   3b34d:	mov    r9d,edx
   3b350:	mov    ecx,DWORD PTR [rsp+0x10]
   3b354:	mov    edi,DWORD PTR [rsp+0xc]
   3b358:	shl    r9,0x4
   3b35c:	add    edx,0x1
   3b35f:	mov    rsi,r15
   3b362:	add    r9,r15
   3b365:	mov    QWORD PTR [r9+0x8],rax
   3b369:	mov    QWORD PTR [rsp],r9
   3b36d:	call   3ad30 <g_str_equal@plt+0x2da70>
   3b372:	mov    r9,QWORD PTR [rsp]
   3b376:	mov    QWORD PTR [r9+0x8],rbx
   3b37a:	jmp    3b300 <g_str_equal@plt+0x2e040>
   3b37c:	nop    DWORD PTR [rax+0x0]
   3b380:	xor    r12d,r12d
   3b383:	jmp    3b333 <g_str_equal@plt+0x2e073>
   3b385:	call   cc80 <__errno_location@plt>
   3b38a:	cmp    DWORD PTR [rax],0x4
   3b38d:	mov    rbx,rax
   3b390:	je     3b3ac <g_str_equal@plt+0x2e0ec>
   3b392:	mov    rdi,QWORD PTR [rsp+0x18]
   3b397:	call   d2b0 <g_free@plt>
   3b39c:	cmp    DWORD PTR [rbx],0xb
   3b39f:	jne    3b3a6 <g_str_equal@plt+0x2e0e6>
   3b3a1:	test   r12,r12
   3b3a4:	jg     3b333 <g_str_equal@plt+0x2e073>
   3b3a6:	or     r12,0xffffffffffffffff
   3b3aa:	jmp    3b333 <g_str_equal@plt+0x2e073>
   3b3ac:	lea    rcx,[rip+0x26b25]        # 61ed8 <_fini@@Base+0xf784>
   3b3b3:	lea    rsi,[rip+0x2697e]        # 61d38 <_fini@@Base+0xf5e4>
   3b3ba:	lea    rdi,[rip+0x269e5]        # 61da6 <_fini@@Base+0xf652>
   3b3c1:	mov    edx,0xca
   3b3c6:	call   c390 <__assert_fail@plt>
   3b3cb:	lea    rcx,[rip+0x26b06]        # 61ed8 <_fini@@Base+0xf784>
   3b3d2:	lea    rsi,[rip+0x2695f]        # 61d38 <_fini@@Base+0xf5e4>
   3b3d9:	lea    rdi,[rip+0x269b7]        # 61d97 <_fini@@Base+0xf643>
   3b3e0:	mov    edx,0xba
   3b3e5:	call   c390 <__assert_fail@plt>
   3b3ea:	nop    WORD PTR [rax+rax*1+0x0]
   3b3f0:	push   rbp
   3b3f1:	push   rbx
   3b3f2:	mov    rbx,rdi
   3b3f5:	movsxd rdi,esi
   3b3f8:	mov    esi,0x10
   3b3fd:	sub    rsp,0x8
   3b401:	mov    rbp,rdi
   3b404:	call   d070 <g_malloc_n@plt>
   3b409:	mov    DWORD PTR [rbx+0xc],ebp
   3b40c:	mov    QWORD PTR [rbx],rax
   3b40f:	mov    DWORD PTR [rbx+0x8],0x0
   3b416:	mov    QWORD PTR [rbx+0x10],0x0
   3b41e:	add    rsp,0x8
   3b422:	pop    rbx
   3b423:	pop    rbp
   3b424:	ret    
   3b425:	nop
   3b426:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3b430:	test   edx,edx
   3b432:	mov    QWORD PTR [rdi],rsi
   3b435:	mov    DWORD PTR [rdi+0x8],edx
   3b438:	mov    DWORD PTR [rdi+0xc],0xffffffff
   3b43f:	mov    QWORD PTR [rdi+0x10],0x0
   3b447:	jle    3b470 <g_str_equal@plt+0x2e1b0>
   3b449:	sub    edx,0x1
   3b44c:	lea    rax,[rsi+0x8]
   3b450:	shl    rdx,0x4
   3b454:	lea    rcx,[rsi+rdx*1+0x18]
   3b459:	xor    edx,edx
   3b45b:	nop    DWORD PTR [rax+rax*1+0x0]
   3b460:	add    rdx,QWORD PTR [rax]
   3b463:	add    rax,0x10
   3b467:	cmp    rax,rcx
   3b46a:	mov    QWORD PTR [rdi+0x10],rdx
   3b46e:	jne    3b460 <g_str_equal@plt+0x2e1a0>
   3b470:	repz ret 
   3b472:	nop    DWORD PTR [rax+0x0]
   3b476:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3b480:	push   r12
   3b482:	push   rbp
   3b483:	push   rbx
   3b484:	mov    ecx,DWORD PTR [rdi+0xc]
   3b487:	cmp    ecx,0xffffffff
   3b48a:	je     3b4e2 <g_str_equal@plt+0x2e222>
   3b48c:	mov    rbp,rdx
   3b48f:	movsxd rdx,DWORD PTR [rdi+0x8]
   3b493:	mov    rbx,rdi
   3b496:	mov    r12,rsi
   3b499:	mov    rax,QWORD PTR [rdi]
   3b49c:	cmp    ecx,edx
   3b49e:	jne    3b4be <g_str_equal@plt+0x2e1fe>
   3b4a0:	lea    esi,[rdx+rdx*1+0x1]
   3b4a4:	mov    edx,0x10
   3b4a9:	mov    DWORD PTR [rdi+0xc],esi
   3b4ac:	movsxd rsi,esi
   3b4af:	mov    rdi,rax
   3b4b2:	call   c480 <g_realloc_n@plt>
   3b4b7:	movsxd rdx,DWORD PTR [rbx+0x8]
   3b4bb:	mov    QWORD PTR [rbx],rax
   3b4be:	shl    rdx,0x4
   3b4c2:	mov    QWORD PTR [rax+rdx*1],r12
   3b4c6:	movsxd rax,DWORD PTR [rbx+0x8]
   3b4ca:	shl    rax,0x4
   3b4ce:	add    rax,QWORD PTR [rbx]
   3b4d1:	mov    QWORD PTR [rax+0x8],rbp
   3b4d5:	add    QWORD PTR [rbx+0x10],rbp
   3b4d9:	add    DWORD PTR [rbx+0x8],0x1
   3b4dd:	pop    rbx
   3b4de:	pop    rbp
   3b4df:	pop    r12
   3b4e1:	ret    
   3b4e2:	lea    rcx,[rip+0x269cf]        # 61eb8 <_fini@@Base+0xf764>
   3b4e9:	lea    rsi,[rip+0x26848]        # 61d38 <_fini@@Base+0xf5e4>
   3b4f0:	lea    rdi,[rip+0x268be]        # 61db5 <_fini@@Base+0xf661>
   3b4f7:	mov    edx,0x124
   3b4fc:	call   c390 <__assert_fail@plt>
   3b501:	nop    DWORD PTR [rax+rax*1+0x0]
   3b506:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3b510:	push   r15
   3b512:	push   r14
   3b514:	push   r13
   3b516:	push   r12
   3b518:	push   rbp
   3b519:	push   rbx
   3b51a:	sub    rsp,0x18
   3b51e:	test   r8,r8
   3b521:	je     3b5b8 <g_str_equal@plt+0x2e2f8>
   3b527:	cmp    DWORD PTR [rdi+0xc],0xffffffff
   3b52b:	mov    r13,rdi
   3b52e:	je     3b5dc <g_str_equal@plt+0x2e31c>
   3b534:	xor    r14d,r14d
   3b537:	xor    ebx,ebx
   3b539:	test   edx,edx
   3b53b:	mov    r12,rsi
   3b53e:	mov    ebp,edx
   3b540:	mov    r15,r8
   3b543:	jne    3b56f <g_str_equal@plt+0x2e2af>
   3b545:	nop    DWORD PTR [rax]
   3b548:	test   rcx,rcx
   3b54b:	jne    3b5bd <g_str_equal@plt+0x2e2fd>
   3b54d:	add    rsp,0x18
   3b551:	mov    rax,r14
   3b554:	pop    rbx
   3b555:	pop    rbp
   3b556:	pop    r12
   3b558:	pop    r13
   3b55a:	pop    r14
   3b55c:	pop    r15
   3b55e:	ret    
   3b55f:	nop
   3b560:	sub    rcx,rsi
   3b563:	add    ebx,0x1
   3b566:	cmp    r14,r15
   3b569:	jae    3b548 <g_str_equal@plt+0x2e288>
   3b56b:	cmp    ebp,ebx
   3b56d:	jbe    3b548 <g_str_equal@plt+0x2e288>
   3b56f:	movsxd rdi,ebx
   3b572:	shl    rdi,0x4
   3b576:	add    rdi,r12
   3b579:	mov    rsi,QWORD PTR [rdi+0x8]
   3b57d:	cmp    rsi,rcx
   3b580:	jbe    3b560 <g_str_equal@plt+0x2e2a0>
   3b582:	mov    rax,r15
   3b585:	sub    rsi,rcx
   3b588:	sub    rax,r14
   3b58b:	cmp    rax,rsi
   3b58e:	cmova  rax,rsi
   3b592:	add    rcx,QWORD PTR [rdi]
   3b595:	mov    rdi,r13
   3b598:	mov    rdx,rax
   3b59b:	mov    QWORD PTR [rsp+0x8],rax
   3b5a0:	mov    rsi,rcx
   3b5a3:	call   3b480 <g_str_equal@plt+0x2e1c0>
   3b5a8:	mov    rax,QWORD PTR [rsp+0x8]
   3b5ad:	xor    ecx,ecx
   3b5af:	add    r14,rax
   3b5b2:	jmp    3b563 <g_str_equal@plt+0x2e2a3>
   3b5b4:	nop    DWORD PTR [rax+0x0]
   3b5b8:	xor    r14d,r14d
   3b5bb:	jmp    3b54d <g_str_equal@plt+0x2e28d>
   3b5bd:	lea    rcx,[rip+0x268dc]        # 61ea0 <_fini@@Base+0xf74c>
   3b5c4:	lea    rsi,[rip+0x2676d]        # 61d38 <_fini@@Base+0xf5e4>
   3b5cb:	lea    rdi,[rip+0x26808]        # 61dda <_fini@@Base+0xf686>
   3b5d2:	mov    edx,0x14f
   3b5d7:	call   c390 <__assert_fail@plt>
   3b5dc:	lea    rcx,[rip+0x268bd]        # 61ea0 <_fini@@Base+0xf74c>
   3b5e3:	lea    rsi,[rip+0x2674e]        # 61d38 <_fini@@Base+0xf5e4>
   3b5ea:	lea    rdi,[rip+0x267d7]        # 61dc8 <_fini@@Base+0xf674>
   3b5f1:	mov    edx,0x144
   3b5f6:	call   c390 <__assert_fail@plt>
   3b5fb:	nop    DWORD PTR [rax+rax*1+0x0]
   3b600:	mov    r8,rcx
   3b603:	mov    rcx,rdx
   3b606:	mov    edx,DWORD PTR [rsi+0x8]
   3b609:	mov    rsi,QWORD PTR [rsi]
   3b60c:	jmp    3b510 <g_str_equal@plt+0x2e250>
   3b611:	nop    DWORD PTR [rax+rax*1+0x0]
   3b616:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3b620:	mov    eax,DWORD PTR [rdi+0x8]
   3b623:	test   eax,eax
   3b625:	jle    3b6ba <g_str_equal@plt+0x2e3fa>
   3b62b:	push   r14
   3b62d:	push   r13
   3b62f:	xor    r14d,r14d
   3b632:	push   r12
   3b634:	push   rbp
   3b635:	mov    r13,rdi
   3b638:	push   rbx
   3b639:	mov    rcx,QWORD PTR [rdi]
   3b63c:	movsxd rbp,r14d
   3b63f:	shl    rbp,0x4
   3b643:	lea    rax,[rcx+rbp*1]
   3b647:	mov    rdx,QWORD PTR [rax+0x8]
   3b64b:	mov    rbx,QWORD PTR [rax]
   3b64e:	mov    r12,rdx
   3b651:	and    r12,0xffffffffffffffe0
   3b655:	jne    3b6a0 <g_str_equal@plt+0x2e3e0>
   3b657:	cmp    r12,rdx
   3b65a:	jae    3b67f <g_str_equal@plt+0x2e3bf>
   3b65c:	cmp    BYTE PTR [rbx+r12*1],0x0
   3b661:	jne    3b690 <g_str_equal@plt+0x2e3d0>
   3b663:	lea    rax,[rbx+r12*1+0x1]
   3b668:	add    rdx,rbx
   3b66b:	jmp    3b67a <g_str_equal@plt+0x2e3ba>
   3b66d:	nop    DWORD PTR [rax]
   3b670:	add    rax,0x1
   3b674:	cmp    BYTE PTR [rax-0x1],0x0
   3b678:	jne    3b690 <g_str_equal@plt+0x2e3d0>
   3b67a:	cmp    rdx,rax
   3b67d:	jne    3b670 <g_str_equal@plt+0x2e3b0>
   3b67f:	add    r14d,0x1
   3b683:	cmp    DWORD PTR [r13+0x8],r14d
   3b687:	jg     3b63c <g_str_equal@plt+0x2e37c>
   3b689:	mov    eax,0x1
   3b68e:	jmp    3b692 <g_str_equal@plt+0x2e3d2>
   3b690:	xor    eax,eax
   3b692:	pop    rbx
   3b693:	pop    rbp
   3b694:	pop    r12
   3b696:	pop    r13
   3b698:	pop    r14
   3b69a:	ret    
   3b69b:	nop    DWORD PTR [rax+rax*1+0x0]
   3b6a0:	mov    rsi,r12
   3b6a3:	mov    rdi,rbx
   3b6a6:	call   51770 <g_str_equal@plt+0x444b0>
   3b6ab:	test   al,al
   3b6ad:	je     3b690 <g_str_equal@plt+0x2e3d0>
   3b6af:	mov    rcx,QWORD PTR [r13+0x0]
   3b6b3:	mov    rdx,QWORD PTR [rcx+rbp*1+0x8]
   3b6b8:	jmp    3b657 <g_str_equal@plt+0x2e397>
   3b6ba:	mov    eax,0x1
   3b6bf:	ret    
   3b6c0:	push   rbx
   3b6c1:	cmp    DWORD PTR [rdi+0xc],0xffffffff
   3b6c5:	je     3b6f1 <g_str_equal@plt+0x2e431>
   3b6c7:	mov    rbx,rdi
   3b6ca:	mov    DWORD PTR [rdi+0x8],0x0
   3b6d1:	mov    QWORD PTR [rdi+0x10],0x0
   3b6d9:	mov    rdi,QWORD PTR [rdi]
   3b6dc:	call   d2b0 <g_free@plt>
   3b6e1:	mov    DWORD PTR [rbx+0xc],0x0
   3b6e8:	mov    QWORD PTR [rbx],0x0
   3b6ef:	pop    rbx
   3b6f0:	ret    
   3b6f1:	lea    rcx,[rip+0x26788]        # 61e80 <_fini@@Base+0xf72c>
   3b6f8:	lea    rsi,[rip+0x26639]        # 61d38 <_fini@@Base+0xf5e4>
   3b6ff:	lea    rdi,[rip+0x266af]        # 61db5 <_fini@@Base+0xf661>
   3b706:	mov    edx,0x17b
   3b70b:	call   c390 <__assert_fail@plt>
   3b710:	cmp    DWORD PTR [rdi+0xc],0xffffffff
   3b714:	je     3b726 <g_str_equal@plt+0x2e466>
   3b716:	mov    DWORD PTR [rdi+0x8],0x0
   3b71d:	mov    QWORD PTR [rdi+0x10],0x0
   3b725:	ret    
   3b726:	lea    rcx,[rip+0x26733]        # 61e60 <_fini@@Base+0xf70c>
   3b72d:	lea    rsi,[rip+0x26604]        # 61d38 <_fini@@Base+0xf5e4>
   3b734:	lea    rdi,[rip+0x2667a]        # 61db5 <_fini@@Base+0xf661>
   3b73b:	sub    rsp,0x8
   3b73f:	mov    edx,0x185
   3b744:	call   c390 <__assert_fail@plt>
   3b749:	nop    DWORD PTR [rax+0x0]
   3b750:	mov    r8,rcx
   3b753:	mov    rcx,rdx
   3b756:	mov    rdx,rsi
   3b759:	mov    esi,DWORD PTR [rdi+0x8]
   3b75c:	mov    rdi,QWORD PTR [rdi]
   3b75f:	jmp    3aeb0 <g_str_equal@plt+0x2dbf0>
   3b764:	xchg   ax,ax
   3b766:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3b770:	mov    r8,rcx
   3b773:	mov    rcx,rdx
   3b776:	mov    rdx,rsi
   3b779:	mov    esi,DWORD PTR [rdi+0x8]
   3b77c:	mov    rdi,QWORD PTR [rdi]
   3b77f:	jmp    3ade0 <g_str_equal@plt+0x2db20>
   3b784:	xchg   ax,ax
   3b786:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3b790:	mov    r8,rcx
   3b793:	mov    ecx,edx
   3b795:	mov    rdx,rsi
   3b798:	mov    esi,DWORD PTR [rdi+0x8]
   3b79b:	mov    rdi,QWORD PTR [rdi]
   3b79e:	jmp    3af80 <g_str_equal@plt+0x2dcc0>
   3b7a3:	nop    DWORD PTR [rax]
   3b7a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3b7b0:	sub    rsp,0x8
   3b7b4:	mov    eax,DWORD PTR [rdi+0x8]
   3b7b7:	cmp    eax,DWORD PTR [rsi+0x8]
   3b7ba:	jne    3b884 <g_str_equal@plt+0x2e5c4>
   3b7c0:	test   eax,eax
   3b7c2:	jle    3b878 <g_str_equal@plt+0x2e5b8>
   3b7c8:	mov    r8,QWORD PTR [rdi]
   3b7cb:	mov    r9,QWORD PTR [rsi]
   3b7ce:	mov    rcx,QWORD PTR [r9+0x8]
   3b7d2:	cmp    rcx,QWORD PTR [r8+0x8]
   3b7d6:	mov    rdi,QWORD PTR [r8]
   3b7d9:	mov    rsi,QWORD PTR [r9]
   3b7dc:	jne    3b847 <g_str_equal@plt+0x2e587>
   3b7de:	lea    r10d,[rax-0x1]
   3b7e2:	add    r8,0x18
   3b7e6:	add    r9,0x18
   3b7ea:	xor    eax,eax
   3b7ec:	shl    r10,0x4
   3b7f0:	add    r10,r8
   3b7f3:	nop    DWORD PTR [rax+rax*1+0x0]
   3b7f8:	test   rcx,rcx
   3b7fb:	je     3b827 <g_str_equal@plt+0x2e567>
   3b7fd:	movzx  edx,BYTE PTR [rsi]
   3b800:	cmp    BYTE PTR [rdi],dl
   3b802:	jne    3b873 <g_str_equal@plt+0x2e5b3>
   3b804:	xor    edx,edx
   3b806:	jmp    3b81b <g_str_equal@plt+0x2e55b>
   3b808:	nop    DWORD PTR [rax+rax*1+0x0]
   3b810:	movzx  r11d,BYTE PTR [rsi+rdx*1]
   3b815:	cmp    BYTE PTR [rdi+rdx*1],r11b
   3b819:	jne    3b870 <g_str_equal@plt+0x2e5b0>
   3b81b:	add    rdx,0x1
   3b81f:	cmp    rdx,rcx
   3b822:	jne    3b810 <g_str_equal@plt+0x2e550>
   3b824:	add    rax,rdx
   3b827:	cmp    r8,r10
   3b82a:	je     3b878 <g_str_equal@plt+0x2e5b8>
   3b82c:	mov    rdx,r9
   3b82f:	mov    rdi,QWORD PTR [r8-0x8]
   3b833:	mov    rsi,QWORD PTR [r9-0x8]
   3b837:	mov    rcx,QWORD PTR [r8]
   3b83a:	add    r9,0x10
   3b83e:	add    r8,0x10
   3b842:	cmp    rcx,QWORD PTR [rdx]
   3b845:	je     3b7f8 <g_str_equal@plt+0x2e538>
   3b847:	lea    rcx,[rip+0x265f2]        # 61e40 <_fini@@Base+0xf6ec>
   3b84e:	lea    rsi,[rip+0x264e3]        # 61d38 <_fini@@Base+0xf5e4>
   3b855:	lea    rdi,[rip+0x26514]        # 61d70 <_fini@@Base+0xf61c>
   3b85c:	mov    edx,0x1b2
   3b861:	call   c390 <__assert_fail@plt>
   3b866:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3b870:	add    rax,rdx
   3b873:	add    rsp,0x8
   3b877:	ret    
   3b878:	mov    rax,0xffffffffffffffff
   3b87f:	add    rsp,0x8
   3b883:	ret    
   3b884:	lea    rcx,[rip+0x265b5]        # 61e40 <_fini@@Base+0xf6ec>
   3b88b:	lea    rsi,[rip+0x264a6]        # 61d38 <_fini@@Base+0xf5e4>
   3b892:	lea    rdi,[rip+0x2654e]        # 61de7 <_fini@@Base+0xf693>
   3b899:	mov    edx,0x1ac
   3b89e:	call   c390 <__assert_fail@plt>
   3b8a3:	nop    DWORD PTR [rax]
   3b8a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3b8b0:	push   rbp
   3b8b1:	mov    rbp,rsp
   3b8b4:	push   r15
   3b8b6:	push   r14
   3b8b8:	push   r13
   3b8ba:	push   r12
   3b8bc:	mov    r14,rsi
   3b8bf:	push   rbx
   3b8c0:	mov    r12,rdi
   3b8c3:	mov    r13,rdx
   3b8c6:	sub    rsp,0x18
   3b8ca:	movsxd rsi,DWORD PTR [rsi+0x8]
   3b8ce:	mov    rax,QWORD PTR fs:0x28
   3b8d7:	mov    QWORD PTR [rbp-0x38],rax
   3b8db:	xor    eax,eax
   3b8dd:	lea    rax,[rsi+rsi*2]
   3b8e1:	lea    rax,[rax*8+0x16]
   3b8e9:	and    rax,0xfffffffffffffff0
   3b8ed:	sub    rsp,rax
   3b8f0:	lea    r15,[rsp+0x7]
   3b8f5:	shr    r15,0x3
   3b8f9:	test   esi,esi
   3b8fb:	lea    rbx,[r15*8+0x0]
   3b903:	jle    3b925 <g_str_equal@plt+0x2e665>
   3b905:	mov    rcx,QWORD PTR [r14]
   3b908:	mov    rdi,rsi
   3b90b:	mov    rdx,rbx
   3b90e:	xor    eax,eax
   3b910:	mov    DWORD PTR [rdx],eax
   3b912:	add    eax,0x1
   3b915:	mov    QWORD PTR [rdx+0x8],rcx
   3b919:	add    rdx,0x18
   3b91d:	add    rcx,0x10
   3b921:	cmp    edi,eax
   3b923:	jne    3b910 <g_str_equal@plt+0x2e650>
   3b925:	lea    rcx,[rip+0xfffffffffffff3c4]        # 3acf0 <g_str_equal@plt+0x2da30>
   3b92c:	mov    edx,0x18
   3b931:	mov    rdi,rbx
   3b934:	call   cca0 <qsort@plt>
   3b939:	movsxd rsi,DWORD PTR [r14+0x8]
   3b93d:	test   esi,esi
   3b93f:	jle    3b9b5 <g_str_equal@plt+0x2e6f5>
   3b941:	lea    eax,[rsi-0x1]
   3b944:	mov    r10,QWORD PTR [r15*8+0x8]
   3b94c:	lea    rdi,[rbx+0x10]
   3b950:	xor    ecx,ecx
   3b952:	xor    edx,edx
   3b954:	xor    r9d,r9d
   3b957:	lea    rax,[rax+rax*2]
   3b95b:	lea    r8,[rbx+rax*8+0x10]
   3b960:	jmp    3b989 <g_str_equal@plt+0x2e6c9>
   3b962:	nop    WORD PTR [rax+rax*1+0x0]
   3b968:	test   rcx,rcx
   3b96b:	mov    r10,QWORD PTR [rdi+0x10]
   3b96f:	je     3ba28 <g_str_equal@plt+0x2e768>
   3b975:	mov    rax,QWORD PTR [r10]
   3b978:	mov    rdx,rcx
   3b97b:	sub    rdx,rax
   3b97e:	cmp    rax,rcx
   3b981:	cmovae rdx,r9
   3b985:	add    rdi,0x18
   3b989:	mov    rax,r13
   3b98c:	sub    rax,rdx
   3b98f:	mov    QWORD PTR [rdi],rax
   3b992:	mov    rax,QWORD PTR [r10+0x8]
   3b996:	cmp    rdx,rax
   3b999:	mov    r11,rax
   3b99c:	cmova  rdx,rax
   3b9a0:	add    rax,QWORD PTR [r10]
   3b9a3:	sub    r11,rdx
   3b9a6:	add    r13,r11
   3b9a9:	cmp    rcx,rax
   3b9ac:	cmovb  rcx,rax
   3b9b0:	cmp    r8,rdi
   3b9b3:	jne    3b968 <g_str_equal@plt+0x2e6a8>
   3b9b5:	lea    rcx,[rip+0xfffffffffffff364]        # 3ad20 <g_str_equal@plt+0x2da60>
   3b9bc:	mov    edx,0x18
   3b9c1:	mov    rdi,rbx
   3b9c4:	xor    r13d,r13d
   3b9c7:	call   cca0 <qsort@plt>
   3b9cc:	mov    eax,DWORD PTR [r14+0x8]
   3b9d0:	test   eax,eax
   3b9d2:	jle    3ba04 <g_str_equal@plt+0x2e744>
   3b9d4:	nop    DWORD PTR [rax+0x0]
   3b9d8:	movsxd rax,r13d
   3b9db:	mov    rdi,r12
   3b9de:	add    r13d,0x1
   3b9e2:	mov    rdx,rax
   3b9e5:	lea    rax,[rax+rax*2]
   3b9e9:	shl    rdx,0x4
   3b9ed:	add    rdx,QWORD PTR [r14]
   3b9f0:	mov    rsi,QWORD PTR [rbx+rax*8+0x10]
   3b9f5:	mov    rdx,QWORD PTR [rdx+0x8]
   3b9f9:	call   3b480 <g_str_equal@plt+0x2e1c0>
   3b9fe:	cmp    DWORD PTR [r14+0x8],r13d
   3ba02:	jg     3b9d8 <g_str_equal@plt+0x2e718>
   3ba04:	mov    rax,QWORD PTR [rbp-0x38]
   3ba08:	xor    rax,QWORD PTR fs:0x28
   3ba11:	jne    3ba2f <g_str_equal@plt+0x2e76f>
   3ba13:	lea    rsp,[rbp-0x28]
   3ba17:	pop    rbx
   3ba18:	pop    r12
   3ba1a:	pop    r13
   3ba1c:	pop    r14
   3ba1e:	pop    r15
   3ba20:	pop    rbp
   3ba21:	ret    
   3ba22:	nop    WORD PTR [rax+rax*1+0x0]
   3ba28:	xor    edx,edx
   3ba2a:	jmp    3b985 <g_str_equal@plt+0x2e6c5>
   3ba2f:	call   cd30 <__stack_chk_fail@plt>
   3ba34:	xchg   ax,ax
   3ba36:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3ba40:	mov    r8d,DWORD PTR [rsi]
   3ba43:	mov    r9,QWORD PTR [rdi]
   3ba46:	test   r8d,r8d
   3ba49:	je     3baa0 <g_str_equal@plt+0x2e7e0>
   3ba4b:	mov    rcx,QWORD PTR [r9+0x8]
   3ba4f:	xor    eax,eax
   3ba51:	cmp    rdx,rcx
   3ba54:	jae    3ba69 <g_str_equal@plt+0x2e7a9>
   3ba56:	jmp    3ba88 <g_str_equal@plt+0x2e7c8>
   3ba58:	nop    DWORD PTR [rax+rax*1+0x0]
   3ba60:	mov    rcx,QWORD PTR [r9+0x8]
   3ba64:	cmp    rcx,rdx
   3ba67:	ja     3ba88 <g_str_equal@plt+0x2e7c8>
   3ba69:	sub    r8d,0x1
   3ba6d:	sub    rdx,rcx
   3ba70:	add    rax,rcx
   3ba73:	add    r9,0x10
   3ba77:	test   r8d,r8d
   3ba7a:	mov    DWORD PTR [rsi],r8d
   3ba7d:	jne    3ba60 <g_str_equal@plt+0x2e7a0>
   3ba7f:	mov    QWORD PTR [rdi],r9
   3ba82:	ret    
   3ba83:	nop    DWORD PTR [rax+rax*1+0x0]
   3ba88:	sub    rcx,rdx
   3ba8b:	add    QWORD PTR [r9],rdx
   3ba8e:	add    rax,rdx
   3ba91:	mov    QWORD PTR [r9+0x8],rcx
   3ba95:	mov    QWORD PTR [rdi],r9
   3ba98:	ret    
   3ba99:	nop    DWORD PTR [rax+0x0]
   3baa0:	xor    eax,eax
   3baa2:	jmp    3ba7f <g_str_equal@plt+0x2e7bf>
   3baa4:	xchg   ax,ax
   3baa6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3bab0:	mov    ecx,DWORD PTR [rsi]
   3bab2:	xor    eax,eax
   3bab4:	test   ecx,ecx
   3bab6:	je     3bafc <g_str_equal@plt+0x2e83c>
   3bab8:	lea    r8d,[rcx-0x1]
   3babc:	mov    rcx,r8
   3babf:	shl    r8,0x4
   3bac3:	add    rdi,r8
   3bac6:	mov    r8,QWORD PTR [rdi+0x8]
   3baca:	cmp    rdx,r8
   3bacd:	jae    3baec <g_str_equal@plt+0x2e82c>
   3bacf:	sub    r8,rdx
   3bad2:	add    rax,rdx
   3bad5:	mov    QWORD PTR [rdi+0x8],r8
   3bad9:	ret    
   3bada:	nop    WORD PTR [rax+rax*1+0x0]
   3bae0:	mov    r8,QWORD PTR [rdi+0x8]
   3bae4:	cmp    r8,rdx
   3bae7:	ja     3bacf <g_str_equal@plt+0x2e80f>
   3bae9:	sub    ecx,0x1
   3baec:	sub    rdx,r8
   3baef:	add    rax,r8
   3baf2:	sub    rdi,0x10
   3baf6:	test   ecx,ecx
   3baf8:	mov    DWORD PTR [rsi],ecx
   3bafa:	jne    3bae0 <g_str_equal@plt+0x2e820>
   3bafc:	repz ret 
   3bafe:	xchg   ax,ax
   3bb00:	sub    rsp,0x8
   3bb04:	cmp    QWORD PTR [rdi+0x10],rsi
   3bb08:	mov    r8d,DWORD PTR [rdi+0x8]
   3bb0c:	jb     3bb7c <g_str_equal@plt+0x2e8bc>
   3bb0e:	xor    r9d,r9d
   3bb11:	test   r8d,r8d
   3bb14:	je     3bb57 <g_str_equal@plt+0x2e897>
   3bb16:	lea    r10d,[r8-0x1]
   3bb1a:	mov    rcx,rsi
   3bb1d:	mov    rax,r10
   3bb20:	not    r10
   3bb23:	shl    rax,0x4
   3bb27:	add    rax,QWORD PTR [rdi]
   3bb2a:	shl    r10,0x4
   3bb2e:	add    r10,rax
   3bb31:	nop    DWORD PTR [rax+0x0]
   3bb38:	mov    rdx,QWORD PTR [rax+0x8]
   3bb3c:	cmp    rdx,rcx
   3bb3f:	ja     3bb70 <g_str_equal@plt+0x2e8b0>
   3bb41:	sub    rax,0x10
   3bb45:	sub    rcx,rdx
   3bb48:	add    r9,rdx
   3bb4b:	sub    r8d,0x1
   3bb4f:	cmp    rax,r10
   3bb52:	jne    3bb38 <g_str_equal@plt+0x2e878>
   3bb54:	xor    r8d,r8d
   3bb57:	cmp    rsi,r9
   3bb5a:	jne    3bb9b <g_str_equal@plt+0x2e8db>
   3bb5c:	mov    DWORD PTR [rdi+0x8],r8d
   3bb60:	sub    QWORD PTR [rdi+0x10],rsi
   3bb64:	add    rsp,0x8
   3bb68:	ret    
   3bb69:	nop    DWORD PTR [rax+0x0]
   3bb70:	sub    rdx,rcx
   3bb73:	add    r9,rcx
   3bb76:	mov    QWORD PTR [rax+0x8],rdx
   3bb7a:	jmp    3bb57 <g_str_equal@plt+0x2e897>
   3bb7c:	lea    rcx,[rip+0x2629d]        # 61e20 <_fini@@Base+0xf6cc>
   3bb83:	lea    rsi,[rip+0x261ae]        # 61d38 <_fini@@Base+0xf5e4>
   3bb8a:	lea    rdi,[rip+0x26269]        # 61dfa <_fini@@Base+0xf6a6>
   3bb91:	mov    edx,0x23f
   3bb96:	call   c390 <__assert_fail@plt>
   3bb9b:	lea    rcx,[rip+0x2627e]        # 61e20 <_fini@@Base+0xf6cc>
   3bba2:	lea    rsi,[rip+0x2618f]        # 61d38 <_fini@@Base+0xf5e4>
   3bba9:	lea    rdi,[rip+0x2625e]        # 61e0e <_fini@@Base+0xf6ba>
   3bbb0:	mov    edx,0x241
   3bbb5:	call   c390 <__assert_fail@plt>
   3bbba:	nop    WORD PTR [rax+rax*1+0x0]
   3bbc0:	push   r14
   3bbc2:	push   r13
   3bbc4:	mov    r14,rdx
   3bbc7:	push   r12
   3bbc9:	push   rbp
   3bbca:	mov    r12,rdi
   3bbcd:	push   rbx
   3bbce:	mov    rax,QWORD PTR [rdi]
   3bbd1:	mov    r13,rsi
   3bbd4:	mov    rbp,rdi
   3bbd7:	test   rax,rax
   3bbda:	je     3bc10 <g_str_equal@plt+0x2e950>
   3bbdc:	xor    ebx,ebx
   3bbde:	jmp    3bbf3 <g_str_equal@plt+0x2e933>
   3bbe0:	add    ebx,0x1
   3bbe3:	movsxd rax,ebx
   3bbe6:	lea    rbp,[r12+rax*8]
   3bbea:	mov    rax,QWORD PTR [rbp+0x0]
   3bbee:	test   rax,rax
   3bbf1:	je     3bc10 <g_str_equal@plt+0x2e950>
   3bbf3:	mov    rdi,QWORD PTR [rax]
   3bbf6:	mov    rsi,r13
   3bbf9:	call   cd60 <strcmp@plt>
   3bbfe:	test   eax,eax
   3bc00:	jne    3bbe0 <g_str_equal@plt+0x2e920>
   3bc02:	pop    rbx
   3bc03:	mov    rax,QWORD PTR [rbp+0x0]
   3bc07:	pop    rbp
   3bc08:	pop    r12
   3bc0a:	pop    r13
   3bc0c:	pop    r14
   3bc0e:	ret    
   3bc0f:	nop
   3bc10:	lea    r8,[rip+0x2630b]        # 61f22 <_fini@@Base+0xf7ce>
   3bc17:	lea    rcx,[rip+0x269f2]        # 62610 <_fini@@Base+0xfebc>
   3bc1e:	lea    rsi,[rip+0x265e3]        # 62208 <_fini@@Base+0xfab4>
   3bc25:	mov    r9,r13
   3bc28:	mov    rdi,r14
   3bc2b:	xor    eax,eax
   3bc2d:	mov    edx,0x19
   3bc32:	call   3a090 <g_str_equal@plt+0x2cdd0>
   3bc37:	pop    rbx
   3bc38:	mov    rax,QWORD PTR [rbp+0x0]
   3bc3c:	pop    rbp
   3bc3d:	pop    r12
   3bc3f:	pop    r13
   3bc41:	pop    r14
   3bc43:	ret    
   3bc44:	xchg   ax,ax
   3bc46:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3bc50:	cmp    QWORD PTR [rdi],0x0
   3bc54:	je     3bd40 <g_str_equal@plt+0x2ea80>
   3bc5a:	push   r14
   3bc5c:	xor    r14d,r14d
   3bc5f:	push   r13
   3bc61:	mov    r13,rdi
   3bc64:	push   r12
   3bc66:	xor    r12d,r12d
   3bc69:	push   rbp
   3bc6a:	push   rbx
   3bc6b:	mov    rbx,rdi
   3bc6e:	jmp    3bcdf <g_str_equal@plt+0x2ea1f>
   3bc70:	jb     3bd10 <g_str_equal@plt+0x2ea50>
   3bc76:	cmp    eax,0x2
   3bc79:	je     3bd20 <g_str_equal@plt+0x2ea60>
   3bc7f:	cmp    eax,0x3
   3bc82:	jne    3bc8b <g_str_equal@plt+0x2e9cb>
   3bc84:	mov    DWORD PTR [rbp+0x8],0x3
   3bc8b:	mov    rdi,QWORD PTR [rbx+0x10]
   3bc8f:	test   rdi,rdi
   3bc92:	je     3bca1 <g_str_equal@plt+0x2e9e1>
   3bc94:	mov    BYTE PTR [rbp+0xc],0x1
   3bc98:	call   c370 <g_strdup@plt>
   3bc9d:	mov    QWORD PTR [rbp+0x10],rax
   3bca1:	mov    rdi,QWORD PTR [rbx+0x18]
   3bca5:	test   rdi,rdi
   3bca8:	je     3bcb7 <g_str_equal@plt+0x2e9f7>
   3bcaa:	mov    BYTE PTR [rbp+0x18],0x1
   3bcae:	call   c370 <g_strdup@plt>
   3bcb3:	mov    QWORD PTR [rbp+0x20],rax
   3bcb7:	add    r12d,0x1
   3bcbb:	mov    edi,0x10
   3bcc0:	movsxd rbx,r12d
   3bcc3:	shl    rbx,0x5
   3bcc7:	add    rbx,r13
   3bcca:	call   ce00 <g_malloc0@plt>
   3bccf:	cmp    QWORD PTR [rbx],0x0
   3bcd3:	mov    QWORD PTR [rax],r14
   3bcd6:	mov    r14,rax
   3bcd9:	mov    QWORD PTR [rax+0x8],rbp
   3bcdd:	je     3bd30 <g_str_equal@plt+0x2ea70>
   3bcdf:	mov    edi,0x28
   3bce4:	call   ce00 <g_malloc0@plt>
   3bce9:	mov    rdi,QWORD PTR [rbx]
   3bcec:	mov    rbp,rax
   3bcef:	call   c370 <g_strdup@plt>
   3bcf4:	mov    QWORD PTR [rbp+0x0],rax
   3bcf8:	mov    eax,DWORD PTR [rbx+0x8]
   3bcfb:	cmp    eax,0x1
   3bcfe:	jne    3bc70 <g_str_equal@plt+0x2e9b0>
   3bd04:	mov    DWORD PTR [rbp+0x8],0x1
   3bd0b:	jmp    3bc8b <g_str_equal@plt+0x2e9cb>
   3bd10:	mov    DWORD PTR [rbp+0x8],0x0
   3bd17:	jmp    3bc8b <g_str_equal@plt+0x2e9cb>
   3bd1c:	nop    DWORD PTR [rax+0x0]
   3bd20:	mov    DWORD PTR [rbp+0x8],0x2
   3bd27:	jmp    3bc8b <g_str_equal@plt+0x2e9cb>
   3bd2c:	nop    DWORD PTR [rax+0x0]
   3bd30:	pop    rbx
   3bd31:	pop    rbp
   3bd32:	pop    r12
   3bd34:	pop    r13
   3bd36:	pop    r14
   3bd38:	ret    
   3bd39:	nop    DWORD PTR [rax+0x0]
   3bd40:	xor    eax,eax
   3bd42:	ret    
   3bd43:	nop    DWORD PTR [rax]
   3bd46:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3bd50:	sub    rsp,0x8
   3bd54:	mov    rdi,QWORD PTR [rdi+0x8]
   3bd58:	mov    r8,rdx
   3bd5b:	lea    rdx,[rip+0x261de]        # 61f40 <_fini@@Base+0xf7ec>
   3bd62:	mov    rcx,rsi
   3bd65:	xor    eax,eax
   3bd67:	mov    esi,0x1
   3bd6c:	call   c2b0 <__fprintf_chk@plt>
   3bd71:	xor    eax,eax
   3bd73:	add    rsp,0x8
   3bd77:	ret    
   3bd78:	nop    DWORD PTR [rax+rax*1+0x0]
   3bd80:	push   rbp
   3bd81:	push   rbx
   3bd82:	mov    rbx,rdi
   3bd85:	mov    rdi,rsi
   3bd88:	mov    rbp,rsi
   3bd8b:	sub    rsp,0x8
   3bd8f:	call   40a30 <g_str_equal@plt+0x33770>
   3bd94:	test   rax,rax
   3bd97:	je     3bde8 <g_str_equal@plt+0x2eb28>
   3bd99:	mov    rdx,QWORD PTR [rbx]
   3bd9c:	mov    rdi,QWORD PTR [rbx+0x8]
   3bda0:	mov    r8,rax
   3bda3:	mov    esi,0x1
   3bda8:	xor    eax,eax
   3bdaa:	mov    rcx,QWORD PTR [rdx]
   3bdad:	lea    rdx,[rip+0x26199]        # 61f4d <_fini@@Base+0xf7f9>
   3bdb4:	call   c2b0 <__fprintf_chk@plt>
   3bdb9:	lea    rsi,[rip+0xffffffffffffff90]        # 3bd50 <g_str_equal@plt+0x2ea90>
   3bdc0:	mov    rdx,rbx
   3bdc3:	mov    rdi,rbp
   3bdc6:	xor    ecx,ecx
   3bdc8:	call   40540 <g_str_equal@plt+0x33280>
   3bdcd:	mov    rsi,QWORD PTR [rbx+0x8]
   3bdd1:	mov    edi,0xa
   3bdd6:	call   c6d0 <fputc@plt>
   3bddb:	add    rsp,0x8
   3bddf:	xor    eax,eax
   3bde1:	pop    rbx
   3bde2:	pop    rbp
   3bde3:	ret    
   3bde4:	nop    DWORD PTR [rax+0x0]
   3bde8:	mov    rax,QWORD PTR [rbx]
   3bdeb:	mov    rdi,QWORD PTR [rbx+0x8]
   3bdef:	lea    rdx,[rip+0x26162]        # 61f58 <_fini@@Base+0xf804>
   3bdf6:	mov    esi,0x1
   3bdfb:	mov    rcx,QWORD PTR [rax]
   3bdfe:	xor    eax,eax
   3be00:	call   c2b0 <__fprintf_chk@plt>
   3be05:	jmp    3bdb9 <g_str_equal@plt+0x2eaf9>
   3be07:	nop    WORD PTR [rax+rax*1+0x0]
   3be10:	sub    rsp,0x28
   3be14:	mov    rsi,rdi
   3be17:	lea    rdi,[rip+0x249ee2]        # 285d00 <stdout@@GLIBC_2.2.5+0x13b8>
   3be1e:	lea    rdx,[rsp+0x10]
   3be23:	mov    QWORD PTR [rsp+0x10],0x0
   3be2c:	mov    rax,QWORD PTR fs:0x28
   3be35:	mov    QWORD PTR [rsp+0x18],rax
   3be3a:	xor    eax,eax
   3be3c:	call   3bbc0 <g_str_equal@plt+0x2e900>
   3be41:	mov    rdi,QWORD PTR [rsp+0x10]
   3be46:	test   rdi,rdi
   3be49:	je     3be5a <g_str_equal@plt+0x2eb9a>
   3be4b:	mov    QWORD PTR [rsp+0x8],rax
   3be50:	call   39e30 <g_str_equal@plt+0x2cb70>
   3be55:	mov    rax,QWORD PTR [rsp+0x8]
   3be5a:	mov    rcx,QWORD PTR [rsp+0x18]
   3be5f:	xor    rcx,QWORD PTR fs:0x28
   3be68:	jne    3be6f <g_str_equal@plt+0x2ebaf>
   3be6a:	add    rsp,0x28
   3be6e:	ret    
   3be6f:	call   cd30 <__stack_chk_fail@plt>
   3be74:	xchg   ax,ax
   3be76:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3be80:	push   rbx
   3be81:	call   3be10 <g_str_equal@plt+0x2eb50>
   3be86:	test   rax,rax
   3be89:	je     3beb4 <g_str_equal@plt+0x2ebf4>
   3be8b:	xor    esi,esi
   3be8d:	mov    rdi,rax
   3be90:	mov    rbx,rax
   3be93:	call   405d0 <g_str_equal@plt+0x33310>
   3be98:	test   rax,rax
   3be9b:	je     3bea0 <g_str_equal@plt+0x2ebe0>
   3be9d:	pop    rbx
   3be9e:	ret    
   3be9f:	nop
   3bea0:	mov    rdi,rbx
   3bea3:	lea    rcx,[rip+0x249dde]        # 285c88 <stdout@@GLIBC_2.2.5+0x1340>
   3beaa:	xor    edx,edx
   3beac:	pop    rbx
   3bead:	xor    esi,esi
   3beaf:	jmp    40620 <g_str_equal@plt+0x33360>
   3beb4:	lea    rcx,[rip+0x26735]        # 625f0 <_fini@@Base+0xfe9c>
   3bebb:	lea    rsi,[rip+0x26346]        # 62208 <_fini@@Base+0xfab4>
   3bec2:	lea    rdi,[rip+0x2808f]        # 63f58 <_fini@@Base+0x11804>
   3bec9:	mov    edx,0x31
   3bece:	call   c390 <__assert_fail@plt>
   3bed3:	nop    DWORD PTR [rax]
   3bed6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3bee0:	push   r15
   3bee2:	push   r14
   3bee4:	push   r13
   3bee6:	push   r12
   3bee8:	push   rbp
   3bee9:	push   rbx
   3beea:	sub    rsp,0x38
   3beee:	mov    rax,QWORD PTR [rip+0x249e0b]        # 285d00 <stdout@@GLIBC_2.2.5+0x13b8>
   3bef5:	mov    QWORD PTR [rsp+0x20],rsi
   3befa:	mov    QWORD PTR [rsp+0x28],rdx
   3beff:	mov    BYTE PTR [rsp+0x1f],dil
   3bf04:	test   rax,rax
   3bf07:	je     3c0fc <g_str_equal@plt+0x2ee3c>
   3bf0d:	lea    r14,[rip+0x249dec]        # 285d00 <stdout@@GLIBC_2.2.5+0x13b8>
   3bf14:	mov    QWORD PTR [rsp+0x10],0x0
   3bf1d:	jmp    3bf65 <g_str_equal@plt+0x2eca5>
   3bf1f:	nop
   3bf20:	lea    rdi,[rip+0x246661]        # 282588 <g_test_config_vars+0x11c8>
   3bf27:	call   3bc50 <g_str_equal@plt+0x2e990>
   3bf2c:	mov    rcx,QWORD PTR [rsp+0x8]
   3bf31:	mov    QWORD PTR [rcx+0x8],rax
   3bf35:	mov    edi,0x10
   3bf3a:	call   ce00 <g_malloc0@plt>
   3bf3f:	mov    rdx,QWORD PTR [rsp+0x10]
   3bf44:	mov    rsi,QWORD PTR [rsp+0x8]
   3bf49:	mov    QWORD PTR [rsp+0x10],rax
   3bf4e:	mov    QWORD PTR [rax+0x8],rsi
   3bf52:	mov    QWORD PTR [rax],rdx
   3bf55:	add    r14,0x8
   3bf59:	mov    rax,QWORD PTR [r14]
   3bf5c:	test   rax,rax
   3bf5f:	je     3c0e0 <g_str_equal@plt+0x2ee20>
   3bf65:	cmp    BYTE PTR [rsp+0x1f],0x0
   3bf6a:	je     3bf7d <g_str_equal@plt+0x2ecbd>
   3bf6c:	mov    rsi,QWORD PTR [rax]
   3bf6f:	mov    rdi,QWORD PTR [rsp+0x20]
   3bf74:	call   cd60 <strcmp@plt>
   3bf79:	test   eax,eax
   3bf7b:	jne    3bf55 <g_str_equal@plt+0x2ec95>
   3bf7d:	mov    edi,0x10
   3bf82:	call   ce00 <g_malloc0@plt>
   3bf87:	mov    rbx,rax
   3bf8a:	mov    QWORD PTR [rsp+0x8],rax
   3bf8f:	mov    rax,QWORD PTR [r14]
   3bf92:	mov    rdi,QWORD PTR [rax]
   3bf95:	call   c370 <g_strdup@plt>
   3bf9a:	mov    r8,QWORD PTR [r14]
   3bf9d:	mov    QWORD PTR [rbx],rax
   3bfa0:	lea    rsi,[rip+0x25fb7]        # 61f5e <_fini@@Base+0xf80a>
   3bfa7:	mov    ecx,0x6
   3bfac:	mov    rdx,QWORD PTR [r8]
   3bfaf:	mov    rdi,rdx
   3bfb2:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   3bfb4:	seta   al
   3bfb7:	sbb    al,0x0
   3bfb9:	test   al,al
   3bfbb:	je     3bff8 <g_str_equal@plt+0x2ed38>
   3bfbd:	lea    rsi,[rip+0x260bf]        # 62083 <_fini@@Base+0xf92f>
   3bfc4:	mov    ecx,0x8
   3bfc9:	mov    rdi,rdx
   3bfcc:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   3bfce:	seta   al
   3bfd1:	sbb    al,0x0
   3bfd3:	test   al,al
   3bfd5:	je     3bf20 <g_str_equal@plt+0x2ec60>
   3bfdb:	lea    rdi,[r8+0x28]
   3bfdf:	call   3bc50 <g_str_equal@plt+0x2e990>
   3bfe4:	mov    rcx,QWORD PTR [rsp+0x8]
   3bfe9:	mov    QWORD PTR [rcx+0x8],rax
   3bfed:	jmp    3bf35 <g_str_equal@plt+0x2ec75>
   3bff2:	nop    WORD PTR [rax+rax*1+0x0]
   3bff8:	mov    rdi,QWORD PTR [rip+0x249cc1]        # 285cc0 <stdout@@GLIBC_2.2.5+0x1378>
   3bfff:	test   rdi,rdi
   3c002:	je     3c0d5 <g_str_equal@plt+0x2ee15>
   3c008:	lea    rbx,[rip+0x249cb1]        # 285cc0 <stdout@@GLIBC_2.2.5+0x1378>
   3c00f:	xor    r12d,r12d
   3c012:	add    rdi,0x28
   3c016:	test   r12,r12
   3c019:	je     3c0c8 <g_str_equal@plt+0x2ee08>
   3c01f:	call   3bc50 <g_str_equal@plt+0x2e990>
   3c024:	mov    rcx,r12
   3c027:	jmp    3c033 <g_str_equal@plt+0x2ed73>
   3c029:	nop    DWORD PTR [rax+0x0]
   3c030:	mov    rcx,rdx
   3c033:	mov    rdx,QWORD PTR [rcx]
   3c036:	test   rdx,rdx
   3c039:	jne    3c030 <g_str_equal@plt+0x2ed70>
   3c03b:	mov    QWORD PTR [rcx],rax
   3c03e:	add    rbx,0x8
   3c042:	mov    rdi,QWORD PTR [rbx]
   3c045:	test   rdi,rdi
   3c048:	jne    3c012 <g_str_equal@plt+0x2ed52>
   3c04a:	mov    rbx,QWORD PTR [r12]
   3c04e:	mov    r13,r12
   3c051:	test   rbx,rbx
   3c054:	je     3c0b7 <g_str_equal@plt+0x2edf7>
   3c056:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3c060:	cmp    r12,rbx
   3c063:	je     3c0aa <g_str_equal@plt+0x2edea>
   3c065:	mov    rax,QWORD PTR [rbx+0x8]
   3c069:	mov    rbp,r12
   3c06c:	mov    r15,QWORD PTR [rax]
   3c06f:	jmp    3c081 <g_str_equal@plt+0x2edc1>
   3c071:	nop    DWORD PTR [rax+0x0]
   3c078:	mov    rbp,QWORD PTR [rbp+0x0]
   3c07c:	cmp    rbp,rbx
   3c07f:	je     3c0aa <g_str_equal@plt+0x2edea>
   3c081:	mov    rax,QWORD PTR [rbp+0x8]
   3c085:	mov    rsi,r15
   3c088:	mov    rdi,QWORD PTR [rax]
   3c08b:	call   cd60 <strcmp@plt>
   3c090:	test   eax,eax
   3c092:	jne    3c078 <g_str_equal@plt+0x2edb8>
   3c094:	mov    rax,QWORD PTR [rbx]
   3c097:	mov    rdi,rbx
   3c09a:	mov    QWORD PTR [r13+0x0],rax
   3c09e:	mov    QWORD PTR [rbx],0x0
   3c0a5:	call   454b0 <g_str_equal@plt+0x381f0>
   3c0aa:	mov    r13,QWORD PTR [r13+0x0]
   3c0ae:	mov    rbx,QWORD PTR [r13+0x0]
   3c0b2:	test   rbx,rbx
   3c0b5:	jne    3c060 <g_str_equal@plt+0x2eda0>
   3c0b7:	mov    rax,QWORD PTR [rsp+0x8]
   3c0bc:	mov    QWORD PTR [rax+0x8],r12
   3c0c0:	jmp    3bf35 <g_str_equal@plt+0x2ec75>
   3c0c5:	nop    DWORD PTR [rax]
   3c0c8:	call   3bc50 <g_str_equal@plt+0x2e990>
   3c0cd:	mov    r12,rax
   3c0d0:	jmp    3c03e <g_str_equal@plt+0x2ed7e>
   3c0d5:	mov    rax,QWORD PTR ds:0x0
   3c0dd:	ud2    
   3c0df:	nop
   3c0e0:	cmp    QWORD PTR [rsp+0x10],0x0
   3c0e6:	je     3c0fc <g_str_equal@plt+0x2ee3c>
   3c0e8:	mov    rax,QWORD PTR [rsp+0x10]
   3c0ed:	add    rsp,0x38
   3c0f1:	pop    rbx
   3c0f2:	pop    rbp
   3c0f3:	pop    r12
   3c0f5:	pop    r13
   3c0f7:	pop    r14
   3c0f9:	pop    r15
   3c0fb:	ret    
   3c0fc:	mov    r9,QWORD PTR [rsp+0x20]
   3c101:	mov    rdi,QWORD PTR [rsp+0x28]
   3c106:	lea    r8,[rip+0x25e57]        # 61f64 <_fini@@Base+0xf810>
   3c10d:	lea    rcx,[rip+0x264bc]        # 625d0 <_fini@@Base+0xfe7c>
   3c114:	lea    rsi,[rip+0x260ed]        # 62208 <_fini@@Base+0xfab4>
   3c11b:	mov    edx,0x112
   3c120:	xor    eax,eax
   3c122:	call   3a090 <g_str_equal@plt+0x2cdd0>
   3c127:	mov    QWORD PTR [rsp+0x10],0x0
   3c130:	jmp    3c0e8 <g_str_equal@plt+0x2ee28>
   3c132:	nop    DWORD PTR [rax+0x0]
   3c136:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3c140:	mov    rdx,rsi
   3c143:	mov    rsi,rdi
   3c146:	lea    rdi,[rip+0x249bb3]        # 285d00 <stdout@@GLIBC_2.2.5+0x13b8>
   3c14d:	jmp    3bbc0 <g_str_equal@plt+0x2e900>
   3c152:	nop    DWORD PTR [rax+0x0]
   3c156:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3c160:	lea    rdx,[rip+0x249b59]        # 285cc0 <stdout@@GLIBC_2.2.5+0x1378>
   3c167:	xor    eax,eax
   3c169:	cmp    QWORD PTR [rdx+rax*8],0x0
   3c16e:	movsxd rcx,eax
   3c171:	je     3c1a8 <g_str_equal@plt+0x2eee8>
   3c173:	add    rax,0x1
   3c177:	cmp    rax,0x4
   3c17b:	jne    3c169 <g_str_equal@plt+0x2eea9>
   3c17d:	sub    rsp,0x8
   3c181:	mov    rcx,QWORD PTR [rip+0x2487b8]        # 284940 <stderr@@GLIBC_2.2.5>
   3c188:	lea    rdi,[rip+0x260b9]        # 62248 <_fini@@Base+0xfaf4>
   3c18f:	mov    edx,0x27
   3c194:	mov    esi,0x1
   3c199:	call   d090 <fwrite@plt>
   3c19e:	call   c270 <abort@plt>
   3c1a3:	nop    DWORD PTR [rax+rax*1+0x0]
   3c1a8:	mov    QWORD PTR [rdx+rcx*8],rdi
   3c1ac:	ret    
   3c1ad:	nop    DWORD PTR [rax]
   3c1b0:	xor    eax,eax
   3c1b2:	lea    rcx,[rip+0x249b47]        # 285d00 <stdout@@GLIBC_2.2.5+0x13b8>
   3c1b9:	jmp    3c1ca <g_str_equal@plt+0x2ef0a>
   3c1bb:	nop    DWORD PTR [rax+rax*1+0x0]
   3c1c0:	add    rax,0x1
   3c1c4:	cmp    rax,0x2f
   3c1c8:	je     3c1e0 <g_str_equal@plt+0x2ef20>
   3c1ca:	cmp    QWORD PTR [rcx+rax*8],0x0
   3c1cf:	movsxd rdx,eax
   3c1d2:	jne    3c1c0 <g_str_equal@plt+0x2ef00>
   3c1d4:	mov    QWORD PTR [rcx+rdx*8],rdi
   3c1d8:	ret    
   3c1d9:	nop    DWORD PTR [rax+0x0]
   3c1e0:	sub    rsp,0x8
   3c1e4:	mov    rcx,QWORD PTR [rip+0x248755]        # 284940 <stderr@@GLIBC_2.2.5>
   3c1eb:	lea    rdi,[rip+0x2607e]        # 62270 <_fini@@Base+0xfb1c>
   3c1f2:	mov    edx,0x24
   3c1f7:	mov    esi,0x1
   3c1fc:	call   d090 <fwrite@plt>
   3c201:	call   c270 <abort@plt>
   3c206:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3c210:	push   r13
   3c212:	push   r12
   3c214:	lea    rsi,[rip+0x25d61]        # 61f7c <_fini@@Base+0xf828>
   3c21b:	push   rbp
   3c21c:	push   rbx
   3c21d:	mov    rbx,rdi
   3c220:	sub    rsp,0xe8
   3c227:	lea    r13,[rsp+0x90]
   3c22f:	lea    r12,[rsp+0x50]
   3c234:	lea    rbp,[rsp+0x10]
   3c239:	mov    rax,QWORD PTR fs:0x28
   3c242:	mov    QWORD PTR [rsp+0xd8],rax
   3c24a:	xor    eax,eax
   3c24c:	lea    r9,[rsp+0x4]
   3c251:	mov    r8,r13
   3c254:	mov    rcx,r12
   3c257:	mov    rdx,rbp
   3c25a:	mov    QWORD PTR [rsp+0x8],0x0
   3c263:	call   c920 <sscanf@plt>
   3c268:	cmp    eax,0x2
   3c26b:	jle    3c2e8 <g_str_equal@plt+0x2f028>
   3c26d:	movsxd rax,DWORD PTR [rsp+0x4]
   3c272:	cmp    BYTE PTR [rbx+rax*1],0x3d
   3c276:	jne    3c2e8 <g_str_equal@plt+0x2f028>
   3c278:	mov    rdi,rbp
   3c27b:	call   3be10 <g_str_equal@plt+0x2eb50>
   3c280:	test   rax,rax
   3c283:	mov    rbp,rax
   3c286:	je     3c310 <g_str_equal@plt+0x2f050>
   3c28c:	mov    rsi,r12
   3c28f:	mov    rdi,rax
   3c292:	call   405d0 <g_str_equal@plt+0x33310>
   3c297:	test   rax,rax
   3c29a:	je     3c317 <g_str_equal@plt+0x2f057>
   3c29c:	movsxd rdx,DWORD PTR [rsp+0x4]
   3c2a1:	lea    rcx,[rsp+0x8]
   3c2a6:	mov    rdi,rax
   3c2a9:	mov    rsi,r13
   3c2ac:	lea    rdx,[rbx+rdx*1+0x1]
   3c2b1:	call   40340 <g_str_equal@plt+0x33080>
   3c2b6:	mov    rdi,QWORD PTR [rsp+0x8]
   3c2bb:	xor    eax,eax
   3c2bd:	test   rdi,rdi
   3c2c0:	jne    3c300 <g_str_equal@plt+0x2f040>
   3c2c2:	mov    rsi,QWORD PTR [rsp+0xd8]
   3c2ca:	xor    rsi,QWORD PTR fs:0x28
   3c2d3:	jne    3c331 <g_str_equal@plt+0x2f071>
   3c2d5:	add    rsp,0xe8
   3c2dc:	pop    rbx
   3c2dd:	pop    rbp
   3c2de:	pop    r12
   3c2e0:	pop    r13
   3c2e2:	ret    
   3c2e3:	nop    DWORD PTR [rax+rax*1+0x0]
   3c2e8:	lea    rdi,[rip+0x25ca7]        # 61f96 <_fini@@Base+0xf842>
   3c2ef:	xor    eax,eax
   3c2f1:	mov    rsi,rbx
   3c2f4:	call   3aab0 <g_str_equal@plt+0x2d7f0>
   3c2f9:	mov    eax,0xffffffff
   3c2fe:	jmp    3c2c2 <g_str_equal@plt+0x2f002>
   3c300:	call   39e30 <g_str_equal@plt+0x2cb70>
   3c305:	mov    eax,0xffffffff
   3c30a:	jmp    3c2c2 <g_str_equal@plt+0x2f002>
   3c30c:	nop    DWORD PTR [rax+0x0]
   3c310:	mov    eax,0xffffffff
   3c315:	jmp    3c2c2 <g_str_equal@plt+0x2f002>
   3c317:	mov    rsi,QWORD PTR [rbp+0x0]
   3c31b:	lea    rdi,[rip+0x25c86]        # 61fa8 <_fini@@Base+0xf854>
   3c322:	mov    rdx,r12
   3c325:	call   3aab0 <g_str_equal@plt+0x2d7f0>
   3c32a:	mov    eax,0xffffffff
   3c32f:	jmp    3c2c2 <g_str_equal@plt+0x2f002>
   3c331:	call   cd30 <__stack_chk_fail@plt>
   3c336:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3c340:	push   r13
   3c342:	push   r12
   3c344:	mov    rcx,rdi
   3c347:	push   rbp
   3c348:	push   rbx
   3c349:	mov    edx,0x14
   3c34e:	mov    esi,0x1
   3c353:	sub    rsp,0x28
   3c357:	mov    QWORD PTR [rsp+0x8],rdi
   3c35c:	lea    rdi,[rip+0x25c61]        # 61fc4 <_fini@@Base+0xf870>
   3c363:	mov    QWORD PTR [rsp],0x0
   3c36b:	mov    rax,QWORD PTR fs:0x28
   3c374:	mov    QWORD PTR [rsp+0x18],rax
   3c379:	xor    eax,eax
   3c37b:	call   d090 <fwrite@plt>
   3c380:	mov    rdi,QWORD PTR [rip+0x249979]        # 285d00 <stdout@@GLIBC_2.2.5+0x13b8>
   3c387:	test   rdi,rdi
   3c38a:	je     3c3c0 <g_str_equal@plt+0x2f100>
   3c38c:	lea    r12,[rip+0x24996d]        # 285d00 <stdout@@GLIBC_2.2.5+0x13b8>
   3c393:	lea    rbp,[rip+0xfffffffffffff9e6]        # 3bd80 <g_str_equal@plt+0x2eac0>
   3c39a:	xor    ebx,ebx
   3c39c:	mov    r13,rsp
   3c39f:	nop
   3c3a0:	xor    ecx,ecx
   3c3a2:	add    ebx,0x1
   3c3a5:	mov    rdx,r13
   3c3a8:	mov    rsi,rbp
   3c3ab:	mov    QWORD PTR [rsp],rdi
   3c3af:	call   41090 <g_str_equal@plt+0x33dd0>
   3c3b4:	movsxd rax,ebx
   3c3b7:	mov    rdi,QWORD PTR [r12+rax*8]
   3c3bb:	test   rdi,rdi
   3c3be:	jne    3c3a0 <g_str_equal@plt+0x2f0e0>
   3c3c0:	mov    rax,QWORD PTR [rsp+0x18]
   3c3c5:	xor    rax,QWORD PTR fs:0x28
   3c3ce:	jne    3c3db <g_str_equal@plt+0x2f11b>
   3c3d0:	add    rsp,0x28
   3c3d4:	pop    rbx
   3c3d5:	pop    rbp
   3c3d6:	pop    r12
   3c3d8:	pop    r13
   3c3da:	ret    
   3c3db:	call   cd30 <__stack_chk_fail@plt>
   3c3e0:	push   r15
   3c3e2:	push   r14
   3c3e4:	mov    r14,rdx
   3c3e7:	push   r13
   3c3e9:	push   r12
   3c3eb:	mov    r13,rdi
   3c3ee:	push   rbp
   3c3ef:	push   rbx
   3c3f0:	xor    r15d,r15d
   3c3f3:	xor    ebx,ebx
   3c3f5:	sub    rsp,0x938
   3c3fc:	mov    rax,QWORD PTR fs:0x28
   3c405:	mov    QWORD PTR [rsp+0x928],rax
   3c40d:	xor    eax,eax
   3c40f:	lea    rax,[rsp+0x40]
   3c414:	mov    QWORD PTR [rsp+0x20],rsi
   3c419:	mov    QWORD PTR [rsp+0x38],0x0
   3c422:	lea    rbp,[rsp+0x120]
   3c42a:	lea    r12,[rsp+0x60]
   3c42f:	mov    rdi,rax
   3c432:	mov    QWORD PTR [rsp+0x28],rax
   3c437:	call   3a8e0 <g_str_equal@plt+0x2d620>
   3c43c:	lea    rax,[rsp+0xa0]
   3c444:	mov    DWORD PTR [rsp+0x1c],0x0
   3c44c:	mov    QWORD PTR [rsp],rax
   3c450:	lea    rax,[rsp+0x520]
   3c458:	mov    QWORD PTR [rsp+0x10],rax
   3c45d:	lea    rax,[rsp+0xe0]
   3c465:	mov    QWORD PTR [rsp+0x8],rax
   3c46a:	nop    WORD PTR [rax+rax*1+0x0]
   3c470:	mov    rdx,r13
   3c473:	mov    esi,0x400
   3c478:	mov    rdi,rbp
   3c47b:	call   c5d0 <fgets@plt>
   3c480:	test   rax,rax
   3c483:	je     3c638 <g_str_equal@plt+0x2f378>
   3c489:	add    ebx,0x1
   3c48c:	mov    rdi,r14
   3c48f:	mov    esi,ebx
   3c491:	call   3a9f0 <g_str_equal@plt+0x2d730>
   3c496:	movzx  eax,BYTE PTR [rsp+0x120]
   3c49e:	cmp    al,0x23
   3c4a0:	je     3c470 <g_str_equal@plt+0x2f1b0>
   3c4a2:	cmp    al,0xa
   3c4a4:	je     3c470 <g_str_equal@plt+0x2f1b0>
   3c4a6:	mov    rcx,QWORD PTR [rsp]
   3c4aa:	lea    rsi,[rip+0x25b28]        # 61fd9 <_fini@@Base+0xf885>
   3c4b1:	xor    eax,eax
   3c4b3:	mov    rdx,r12
   3c4b6:	mov    rdi,rbp
   3c4b9:	call   c920 <sscanf@plt>
   3c4be:	cmp    eax,0x2
   3c4c1:	je     3c570 <g_str_equal@plt+0x2f2b0>
   3c4c7:	lea    rsi,[rip+0x25b1c]        # 61fea <_fini@@Base+0xf896>
   3c4ce:	xor    eax,eax
   3c4d0:	mov    rdx,r12
   3c4d3:	mov    rdi,rbp
   3c4d6:	call   c920 <sscanf@plt>
   3c4db:	cmp    eax,0x1
   3c4de:	je     3c5b0 <g_str_equal@plt+0x2f2f0>
   3c4e4:	mov    rcx,QWORD PTR [rsp+0x10]
   3c4e9:	mov    rdx,QWORD PTR [rsp+0x8]
   3c4ee:	lea    rsi,[rip+0x25aff]        # 61ff4 <_fini@@Base+0xf8a0>
   3c4f5:	xor    eax,eax
   3c4f7:	mov    rdi,rbp
   3c4fa:	mov    BYTE PTR [rsp+0x520],0x0
   3c502:	call   c920 <sscanf@plt>
   3c507:	cmp    eax,0x2
   3c50a:	je     3c52b <g_str_equal@plt+0x2f26b>
   3c50c:	mov    rdx,QWORD PTR [rsp+0x8]
   3c511:	lea    rsi,[rip+0x25af0]        # 62008 <_fini@@Base+0xf8b4>
   3c518:	xor    eax,eax
   3c51a:	mov    rdi,rbp
   3c51d:	call   c920 <sscanf@plt>
   3c522:	cmp    eax,0x1
   3c525:	jne    3c678 <g_str_equal@plt+0x2f3b8>
   3c52b:	test   r15,r15
   3c52e:	je     3c660 <g_str_equal@plt+0x2f3a0>
   3c534:	mov    rdx,QWORD PTR [rsp+0x10]
   3c539:	mov    rsi,QWORD PTR [rsp+0x8]
   3c53e:	lea    rcx,[rsp+0x38]
   3c543:	mov    rdi,r15
   3c546:	call   40340 <g_str_equal@plt+0x33080>
   3c54b:	mov    rdi,QWORD PTR [rsp+0x38]
   3c550:	test   rdi,rdi
   3c553:	je     3c470 <g_str_equal@plt+0x2f1b0>
   3c559:	call   39e30 <g_str_equal@plt+0x2cb70>
   3c55e:	mov    DWORD PTR [rsp+0x1c],0xffffffea
   3c566:	jmp    3c600 <g_str_equal@plt+0x2f340>
   3c56b:	nop    DWORD PTR [rax+rax*1+0x0]
   3c570:	mov    rdi,QWORD PTR [rsp+0x20]
   3c575:	lea    rdx,[rsp+0x38]
   3c57a:	mov    rsi,r12
   3c57d:	call   3bbc0 <g_str_equal@plt+0x2e900>
   3c582:	mov    rdx,QWORD PTR [rsp+0x38]
   3c587:	test   rdx,rdx
   3c58a:	jne    3c5f0 <g_str_equal@plt+0x2f330>
   3c58c:	mov    rsi,QWORD PTR [rsp]
   3c590:	xor    ecx,ecx
   3c592:	mov    edx,0x1
   3c597:	mov    rdi,rax
   3c59a:	call   40620 <g_str_equal@plt+0x33360>
   3c59f:	add    DWORD PTR [rsp+0x1c],0x1
   3c5a4:	mov    r15,rax
   3c5a7:	jmp    3c470 <g_str_equal@plt+0x2f1b0>
   3c5ac:	nop    DWORD PTR [rax+0x0]
   3c5b0:	mov    rdi,QWORD PTR [rsp+0x20]
   3c5b5:	lea    rdx,[rsp+0x38]
   3c5ba:	mov    rsi,r12
   3c5bd:	call   3bbc0 <g_str_equal@plt+0x2e900>
   3c5c2:	mov    rdx,QWORD PTR [rsp+0x38]
   3c5c7:	test   rdx,rdx
   3c5ca:	jne    3c5f0 <g_str_equal@plt+0x2f330>
   3c5cc:	lea    rcx,[rip+0x2496b5]        # 285c88 <stdout@@GLIBC_2.2.5+0x1340>
   3c5d3:	xor    edx,edx
   3c5d5:	xor    esi,esi
   3c5d7:	mov    rdi,rax
   3c5da:	call   40620 <g_str_equal@plt+0x33360>
   3c5df:	add    DWORD PTR [rsp+0x1c],0x1
   3c5e4:	mov    r15,rax
   3c5e7:	jmp    3c470 <g_str_equal@plt+0x2f1b0>
   3c5ec:	nop    DWORD PTR [rax+0x0]
   3c5f0:	mov    rdi,rdx
   3c5f3:	call   39e30 <g_str_equal@plt+0x2cb70>
   3c5f8:	mov    DWORD PTR [rsp+0x1c],0xffffffea
   3c600:	mov    rdi,QWORD PTR [rsp+0x28]
   3c605:	call   3a900 <g_str_equal@plt+0x2d640>
   3c60a:	mov    rcx,QWORD PTR [rsp+0x928]
   3c612:	xor    rcx,QWORD PTR fs:0x28
   3c61b:	mov    eax,DWORD PTR [rsp+0x1c]
   3c61f:	jne    3c693 <g_str_equal@plt+0x2f3d3>
   3c621:	add    rsp,0x938
   3c628:	pop    rbx
   3c629:	pop    rbp
   3c62a:	pop    r12
   3c62c:	pop    r13
   3c62e:	pop    r14
   3c630:	pop    r15
   3c632:	ret    
   3c633:	nop    DWORD PTR [rax+rax*1+0x0]
   3c638:	mov    rdi,r13
   3c63b:	call   c750 <ferror@plt>
   3c640:	test   eax,eax
   3c642:	je     3c600 <g_str_equal@plt+0x2f340>
   3c644:	lea    rdi,[rip+0x259d9]        # 62024 <_fini@@Base+0xf8d0>
   3c64b:	xor    eax,eax
   3c64d:	call   3aab0 <g_str_equal@plt+0x2d7f0>
   3c652:	mov    DWORD PTR [rsp+0x1c],0xffffffea
   3c65a:	jmp    3c600 <g_str_equal@plt+0x2f340>
   3c65c:	nop    DWORD PTR [rax+0x0]
   3c660:	lea    rdi,[rip+0x259ac]        # 62013 <_fini@@Base+0xf8bf>
   3c667:	xor    eax,eax
   3c669:	call   3aab0 <g_str_equal@plt+0x2d7f0>
   3c66e:	mov    DWORD PTR [rsp+0x1c],0xffffffea
   3c676:	jmp    3c600 <g_str_equal@plt+0x2f340>
   3c678:	lea    rdi,[rip+0x22628]        # 5eca7 <_fini@@Base+0xc553>
   3c67f:	xor    eax,eax
   3c681:	call   3aab0 <g_str_equal@plt+0x2d7f0>
   3c686:	mov    DWORD PTR [rsp+0x1c],0xffffffea
   3c68e:	jmp    3c600 <g_str_equal@plt+0x2f340>
   3c693:	call   cd30 <__stack_chk_fail@plt>
   3c698:	nop    DWORD PTR [rax+rax*1+0x0]
   3c6a0:	push   rbp
   3c6a1:	push   rbx
   3c6a2:	lea    rsi,[rip+0x23938]        # 5ffe1 <_fini@@Base+0xd88d>
   3c6a9:	mov    rbp,rdi
   3c6ac:	sub    rsp,0x8
   3c6b0:	call   d050 <fopen64@plt>
   3c6b5:	test   rax,rax
   3c6b8:	je     3c6e8 <g_str_equal@plt+0x2f428>
   3c6ba:	lea    rsi,[rip+0x24963f]        # 285d00 <stdout@@GLIBC_2.2.5+0x13b8>
   3c6c1:	mov    rbx,rax
   3c6c4:	mov    rdx,rbp
   3c6c7:	mov    rdi,rax
   3c6ca:	call   3c3e0 <g_str_equal@plt+0x2f120>
   3c6cf:	mov    rdi,rbx
   3c6d2:	mov    ebp,eax
   3c6d4:	call   cea0 <fclose@plt>
   3c6d9:	add    rsp,0x8
   3c6dd:	mov    eax,ebp
   3c6df:	pop    rbx
   3c6e0:	pop    rbp
   3c6e1:	ret    
   3c6e2:	nop    WORD PTR [rax+rax*1+0x0]
   3c6e8:	call   cc80 <__errno_location@plt>
   3c6ed:	mov    ebp,DWORD PTR [rax]
   3c6ef:	add    rsp,0x8
   3c6f3:	pop    rbx
   3c6f4:	neg    ebp
   3c6f6:	mov    eax,ebp
   3c6f8:	pop    rbp
   3c6f9:	ret    
   3c6fa:	nop    WORD PTR [rax+rax*1+0x0]
   3c700:	push   r15
   3c702:	push   r14
   3c704:	push   r13
   3c706:	push   r12
   3c708:	push   rbp
   3c709:	push   rbx
   3c70a:	sub    rsp,0x78
   3c70e:	mov    r15,QWORD PTR [rsi]
   3c711:	mov    rax,QWORD PTR fs:0x28
   3c71a:	mov    QWORD PTR [rsp+0x68],rax
   3c71f:	xor    eax,eax
   3c721:	mov    QWORD PTR [rsp+0x10],rdx
   3c726:	mov    QWORD PTR [rsp+0x48],0x0
   3c72f:	test   r15,r15
   3c732:	je     3c86a <g_str_equal@plt+0x2f5aa>
   3c738:	lea    rax,[rsp+0x60]
   3c73d:	mov    r13,rdi
   3c740:	mov    rbp,rsi
   3c743:	xor    ebx,ebx
   3c745:	lea    r14,[rsp+0x50]
   3c74a:	mov    QWORD PTR [rsp],rax
   3c74e:	lea    rax,[rsp+0x58]
   3c753:	mov    QWORD PTR [rsp+0x20],rax
   3c758:	lea    rax,[rsp+0x48]
   3c75d:	mov    QWORD PTR [rsp+0x8],rax
   3c762:	jmp    3c7dc <g_str_equal@plt+0x2f51c>
   3c764:	nop    DWORD PTR [rax+0x0]
   3c768:	mov    rdi,QWORD PTR [rsp+0x50]
   3c76d:	test   rdi,rdi
   3c770:	je     3c791 <g_str_equal@plt+0x2f4d1>
   3c772:	mov    rax,QWORD PTR [rdi+0x8]
   3c776:	test   rax,rax
   3c779:	je     3cb71 <g_str_equal@plt+0x2f8b1>
   3c77f:	sub    rax,0x1
   3c783:	test   rax,rax
   3c786:	mov    QWORD PTR [rdi+0x8],rax
   3c78a:	jne    3c791 <g_str_equal@plt+0x2f4d1>
   3c78c:	call   30300 <g_str_equal@plt+0x23040>
   3c791:	mov    rdi,QWORD PTR [rsp+0x58]
   3c796:	test   rdi,rdi
   3c799:	je     3c7ba <g_str_equal@plt+0x2f4fa>
   3c79b:	mov    rax,QWORD PTR [rdi+0x8]
   3c79f:	test   rax,rax
   3c7a2:	je     3cb71 <g_str_equal@plt+0x2f8b1>
   3c7a8:	sub    rax,0x1
   3c7ac:	test   rax,rax
   3c7af:	mov    QWORD PTR [rdi+0x8],rax
   3c7b3:	jne    3c7ba <g_str_equal@plt+0x2f4fa>
   3c7b5:	call   30300 <g_str_equal@plt+0x23040>
   3c7ba:	mov    rsi,QWORD PTR [rsp+0x48]
   3c7bf:	test   rsi,rsi
   3c7c2:	jne    3c860 <g_str_equal@plt+0x2f5a0>
   3c7c8:	add    ebx,0x1
   3c7cb:	movsxd rax,ebx
   3c7ce:	mov    r15,QWORD PTR [rbp+rax*8+0x0]
   3c7d3:	test   r15,r15
   3c7d6:	je     3c86a <g_str_equal@plt+0x2f5aa>
   3c7dc:	mov    QWORD PTR [rsp+0x58],0x0
   3c7e5:	mov    QWORD PTR [rsp+0x60],0x0
   3c7ee:	lea    rdi,[rip+0x25842]        # 62037 <_fini@@Base+0xf8e3>
   3c7f5:	mov    rsi,QWORD PTR [r15]
   3c7f8:	xor    eax,eax
   3c7fa:	call   c740 <g_strdup_printf@plt>
   3c7ff:	mov    rsi,r14
   3c802:	mov    r12,rax
   3c805:	mov    rdx,rax
   3c808:	mov    rdi,r13
   3c80b:	call   506b0 <g_str_equal@plt+0x433f0>
   3c810:	mov    rdi,r12
   3c813:	call   d2b0 <g_free@plt>
   3c818:	mov    rdi,QWORD PTR [rsp+0x50]
   3c81d:	call   2ee00 <g_str_equal@plt+0x21b40>
   3c822:	test   rax,rax
   3c825:	mov    r12,rax
   3c828:	je     3c768 <g_str_equal@plt+0x2f4a8>
   3c82e:	mov    rcx,QWORD PTR [rsp]
   3c832:	xor    esi,esi
   3c834:	xor    edx,edx
   3c836:	mov    rdi,r15
   3c839:	call   40620 <g_str_equal@plt+0x33360>
   3c83e:	mov    rsi,QWORD PTR [rsp+0x60]
   3c843:	test   rsi,rsi
   3c846:	je     3c890 <g_str_equal@plt+0x2f5d0>
   3c848:	mov    rdi,QWORD PTR [rsp+0x8]
   3c84d:	call   3a4c0 <g_str_equal@plt+0x2d200>
   3c852:	jmp    3c768 <g_str_equal@plt+0x2f4a8>
   3c857:	nop    WORD PTR [rax+rax*1+0x0]
   3c860:	mov    rdi,QWORD PTR [rsp+0x10]
   3c865:	call   3a4c0 <g_str_equal@plt+0x2d200>
   3c86a:	mov    rax,QWORD PTR [rsp+0x68]
   3c86f:	xor    rax,QWORD PTR fs:0x28
   3c878:	jne    3cb76 <g_str_equal@plt+0x2f8b6>
   3c87e:	add    rsp,0x78
   3c882:	pop    rbx
   3c883:	pop    rbp
   3c884:	pop    r12
   3c886:	pop    r13
   3c888:	pop    r14
   3c88a:	pop    r15
   3c88c:	ret    
   3c88d:	nop    DWORD PTR [rax]
   3c890:	mov    rsi,QWORD PTR [rsp+0x50]
   3c895:	mov    rdx,QWORD PTR [rsp]
   3c899:	mov    rdi,rax
   3c89c:	mov    QWORD PTR [rsp+0x18],rax
   3c8a1:	call   40da0 <g_str_equal@plt+0x33ae0>
   3c8a6:	mov    rsi,QWORD PTR [rsp+0x60]
   3c8ab:	mov    rcx,QWORD PTR [rsp+0x18]
   3c8b0:	test   rsi,rsi
   3c8b3:	jne    3c848 <g_str_equal@plt+0x2f588>
   3c8b5:	mov    rdi,QWORD PTR [rsp+0x50]
   3c8ba:	mov    QWORD PTR [rsp+0x18],rcx
   3c8bf:	call   2ee00 <g_str_equal@plt+0x21b40>
   3c8c4:	cmp    r12,rax
   3c8c7:	mov    rcx,QWORD PTR [rsp+0x18]
   3c8cc:	jbe    3c920 <g_str_equal@plt+0x2f660>
   3c8ce:	test   rax,rax
   3c8d1:	je     3c920 <g_str_equal@plt+0x2f660>
   3c8d3:	mov    rdi,QWORD PTR [rsp+0x50]
   3c8d8:	mov    r12,QWORD PTR [r15]
   3c8db:	call   2f0b0 <g_str_equal@plt+0x21df0>
   3c8e0:	sub    rsp,0x8
   3c8e4:	lea    r8,[rip+0x25750]        # 6203b <_fini@@Base+0xf8e7>
   3c8eb:	lea    rcx,[rip+0x25cbe]        # 625b0 <_fini@@Base+0xfe5c>
   3c8f2:	push   r12
   3c8f4:	mov    r9,QWORD PTR [rax]
   3c8f7:	mov    edx,0x200
   3c8fc:	mov    rdi,QWORD PTR [rsp+0x18]
   3c901:	lea    rsi,[rip+0x25900]        # 62208 <_fini@@Base+0xfab4>
   3c908:	xor    eax,eax
   3c90a:	call   3a090 <g_str_equal@plt+0x2cdd0>
   3c90f:	pop    rcx
   3c910:	pop    rsi
   3c911:	jmp    3c768 <g_str_equal@plt+0x2f4a8>
   3c916:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3c920:	test   rax,rax
   3c923:	je     3c768 <g_str_equal@plt+0x2f4a8>
   3c929:	mov    rdi,rcx
   3c92c:	call   40a50 <g_str_equal@plt+0x33790>
   3c931:	mov    rsi,QWORD PTR [rsp+0x20]
   3c936:	mov    rdi,QWORD PTR [rsp+0x50]
   3c93b:	call   50770 <g_str_equal@plt+0x434b0>
   3c940:	mov    rdi,QWORD PTR [rsp+0x50]
   3c945:	call   2ee00 <g_str_equal@plt+0x21b40>
   3c94a:	test   rax,rax
   3c94d:	jne    3ca82 <g_str_equal@plt+0x2f7c2>
   3c953:	mov    rax,QWORD PTR [rsp+0x58]
   3c958:	mov    rax,QWORD PTR [rax+0x10]
   3c95c:	test   rax,rax
   3c95f:	mov    rcx,rax
   3c962:	je     3c768 <g_str_equal@plt+0x2f4a8>
   3c968:	mov    r12,QWORD PTR [rax]
   3c96b:	test   r12,r12
   3c96e:	je     3cab0 <g_str_equal@plt+0x2f7f0>
   3c974:	mov    eax,DWORD PTR [r12]
   3c978:	lea    edx,[rax-0x1]
   3c97b:	cmp    edx,0x5
   3c97e:	ja     3cb7b <g_str_equal@plt+0x2f8bb>
   3c984:	xor    edx,edx
   3c986:	cmp    eax,0x4
   3c989:	jne    3cab0 <g_str_equal@plt+0x2f7f0>
   3c98f:	mov    DWORD PTR [rsp+0x18],ebx
   3c993:	mov    QWORD PTR [rsp+0x28],r13
   3c998:	mov    rbx,rcx
   3c99b:	mov    QWORD PTR [rsp+0x30],rbp
   3c9a0:	mov    QWORD PTR [rsp+0x38],r14
   3c9a5:	nop    DWORD PTR [rax]
   3c9a8:	mov    rsi,QWORD PTR [r15]
   3c9ab:	lea    rdi,[rip+0x256c2]        # 62074 <_fini@@Base+0xf920>
   3c9b2:	xor    eax,eax
   3c9b4:	lea    r13d,[rdx+0x1]
   3c9b8:	call   c740 <g_strdup_printf@plt>
   3c9bd:	mov    rcx,QWORD PTR [rsp]
   3c9c1:	mov    rsi,rax
   3c9c4:	mov    r14,rax
   3c9c7:	mov    edx,0x1
   3c9cc:	mov    rdi,r15
   3c9cf:	call   40620 <g_str_equal@plt+0x33360>
   3c9d4:	mov    rdi,r14
   3c9d7:	mov    rbp,rax
   3c9da:	call   d2b0 <g_free@plt>
   3c9df:	mov    rsi,QWORD PTR [rsp+0x60]
   3c9e4:	test   rsi,rsi
   3c9e7:	jne    3cb41 <g_str_equal@plt+0x2f881>
   3c9ed:	mov    rdx,QWORD PTR [rsp]
   3c9f1:	mov    rsi,r12
   3c9f4:	mov    rdi,rbp
   3c9f7:	call   40da0 <g_str_equal@plt+0x33ae0>
   3c9fc:	mov    rsi,QWORD PTR [rsp+0x60]
   3ca01:	test   rsi,rsi
   3ca04:	jne    3cb14 <g_str_equal@plt+0x2f854>
   3ca0a:	mov    rdi,r12
   3ca0d:	call   2ee00 <g_str_equal@plt+0x21b40>
   3ca12:	test   rax,rax
   3ca15:	jne    3cab4 <g_str_equal@plt+0x2f7f4>
   3ca1b:	mov    rbx,QWORD PTR [rbx+0x8]
   3ca1f:	test   rbx,rbx
   3ca22:	je     3cb59 <g_str_equal@plt+0x2f899>
   3ca28:	mov    r12,QWORD PTR [rbx]
   3ca2b:	test   r12,r12
   3ca2e:	je     3ca4c <g_str_equal@plt+0x2f78c>
   3ca30:	mov    eax,DWORD PTR [r12]
   3ca34:	lea    edx,[rax-0x1]
   3ca37:	cmp    edx,0x5
   3ca3a:	ja     3cb7b <g_str_equal@plt+0x2f8bb>
   3ca40:	cmp    eax,0x4
   3ca43:	mov    edx,r13d
   3ca46:	je     3c9a8 <g_str_equal@plt+0x2f6e8>
   3ca4c:	mov    eax,r13d
   3ca4f:	mov    ebx,DWORD PTR [rsp+0x18]
   3ca53:	mov    r13,QWORD PTR [rsp+0x28]
   3ca58:	mov    rbp,QWORD PTR [rsp+0x30]
   3ca5d:	mov    r14,QWORD PTR [rsp+0x38]
   3ca62:	sub    rsp,0x8
   3ca66:	lea    r8,[rip+0x2582b]        # 62298 <_fini@@Base+0xfb44>
   3ca6d:	lea    rcx,[rip+0x25b3c]        # 625b0 <_fini@@Base+0xfe5c>
   3ca74:	push   rax
   3ca75:	mov    edx,0x219
   3ca7a:	mov    r9,QWORD PTR [r15]
   3ca7d:	jmp    3c8fc <g_str_equal@plt+0x2f63c>
   3ca82:	mov    rdi,QWORD PTR [rsp+0x50]
   3ca87:	mov    r12,QWORD PTR [r15]
   3ca8a:	call   2f0b0 <g_str_equal@plt+0x21df0>
   3ca8f:	sub    rsp,0x8
   3ca93:	lea    r8,[rip+0x255be]        # 62058 <_fini@@Base+0xf904>
   3ca9a:	lea    rcx,[rip+0x25b0f]        # 625b0 <_fini@@Base+0xfe5c>
   3caa1:	push   r12
   3caa3:	mov    edx,0x20f
   3caa8:	mov    r9,QWORD PTR [rax]
   3caab:	jmp    3c8fc <g_str_equal@plt+0x2f63c>
   3cab0:	xor    eax,eax
   3cab2:	jmp    3ca62 <g_str_equal@plt+0x2f7a2>
   3cab4:	mov    rdi,r12
   3cab7:	mov    ebx,DWORD PTR [rsp+0x18]
   3cabb:	mov    r13,QWORD PTR [rsp+0x28]
   3cac0:	mov    QWORD PTR [rsp+0x18],rbp
   3cac5:	mov    r14,QWORD PTR [rsp+0x38]
   3caca:	mov    rbp,QWORD PTR [rsp+0x30]
   3cacf:	call   2f0b0 <g_str_equal@plt+0x21df0>
   3cad4:	sub    rsp,0x8
   3cad8:	push   QWORD PTR [rax]
   3cada:	mov    r9,QWORD PTR [r15]
   3cadd:	mov    rdi,QWORD PTR [rsp+0x18]
   3cae2:	lea    r8,[rip+0x257e7]        # 622d0 <_fini@@Base+0xfb7c>
   3cae9:	lea    rcx,[rip+0x25ac0]        # 625b0 <_fini@@Base+0xfe5c>
   3caf0:	lea    rsi,[rip+0x25711]        # 62208 <_fini@@Base+0xfab4>
   3caf7:	mov    edx,0x22e
   3cafc:	xor    eax,eax
   3cafe:	call   3a090 <g_str_equal@plt+0x2cdd0>
   3cb03:	mov    rdi,QWORD PTR [rsp+0x28]
   3cb08:	call   40a50 <g_str_equal@plt+0x33790>
   3cb0d:	pop    rax
   3cb0e:	pop    rdx
   3cb0f:	jmp    3c768 <g_str_equal@plt+0x2f4a8>
   3cb14:	mov    rdi,QWORD PTR [rsp+0x8]
   3cb19:	mov    r15,rbp
   3cb1c:	mov    ebx,DWORD PTR [rsp+0x18]
   3cb20:	mov    r13,QWORD PTR [rsp+0x28]
   3cb25:	mov    rbp,QWORD PTR [rsp+0x30]
   3cb2a:	mov    r14,QWORD PTR [rsp+0x38]
   3cb2f:	call   3a4c0 <g_str_equal@plt+0x2d200>
   3cb34:	mov    rdi,r15
   3cb37:	call   40a50 <g_str_equal@plt+0x33790>
   3cb3c:	jmp    3c768 <g_str_equal@plt+0x2f4a8>
   3cb41:	mov    ebx,DWORD PTR [rsp+0x18]
   3cb45:	mov    r13,QWORD PTR [rsp+0x28]
   3cb4a:	mov    rbp,QWORD PTR [rsp+0x30]
   3cb4f:	mov    r14,QWORD PTR [rsp+0x38]
   3cb54:	jmp    3c848 <g_str_equal@plt+0x2f588>
   3cb59:	mov    ebx,DWORD PTR [rsp+0x18]
   3cb5d:	mov    r13,QWORD PTR [rsp+0x28]
   3cb62:	mov    rbp,QWORD PTR [rsp+0x30]
   3cb67:	mov    r14,QWORD PTR [rsp+0x38]
   3cb6c:	jmp    3c768 <g_str_equal@plt+0x2f4a8>
   3cb71:	call   d560 <g_str_equal@plt+0x2a0>
   3cb76:	call   cd30 <__stack_chk_fail@plt>
   3cb7b:	lea    rcx,[rip+0x25a16]        # 62598 <_fini@@Base+0xfe44>
   3cb82:	lea    rsi,[rip+0x20b0f]        # 5d698 <_fini@@Base+0xaf44>
   3cb89:	lea    rdi,[rip+0x20b50]        # 5d6e0 <_fini@@Base+0xaf8c>
   3cb90:	mov    edx,0x7f
   3cb95:	call   c390 <__assert_fail@plt>
   3cb9a:	nop    WORD PTR [rax+rax*1+0x0]
   3cba0:	push   r13
   3cba2:	push   r12
   3cba4:	mov    r13,rsi
   3cba7:	push   rbp
   3cba8:	push   rbx
   3cba9:	mov    rbp,rdi
   3cbac:	mov    esi,0x2c
   3cbb1:	mov    rdi,r13
   3cbb4:	mov    r12,rdx
   3cbb7:	sub    rsp,0x8
   3cbbb:	mov    rbx,rcx
   3cbbe:	call   cc00 <strchr@plt>
   3cbc3:	test   rax,rax
   3cbc6:	je     3cc30 <g_str_equal@plt+0x2f970>
   3cbc8:	cmp    BYTE PTR [rax+0x1],0x2c
   3cbcc:	je     3cc90 <g_str_equal@plt+0x2f9d0>
   3cbd2:	sub    rax,r13
   3cbd5:	test   rax,rax
   3cbd8:	je     3cc18 <g_str_equal@plt+0x2f958>
   3cbda:	cmp    rax,0x3
   3cbde:	je     3cc40 <g_str_equal@plt+0x2f980>
   3cbe0:	cmp    rax,0x4
   3cbe4:	jne    3cc5a <g_str_equal@plt+0x2f99a>
   3cbe6:	lea    rdi,[rip+0x25a4e]        # 6263b <_fini@@Base+0xfee7>
   3cbed:	mov    ecx,0x4
   3cbf2:	mov    rsi,r13
   3cbf5:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   3cbf7:	seta   al
   3cbfa:	sbb    al,0x0
   3cbfc:	movsx  eax,al
   3cbff:	test   eax,eax
   3cc01:	jne    3cc5a <g_str_equal@plt+0x2f99a>
   3cc03:	mov    BYTE PTR [r12],0x0
   3cc08:	add    rsp,0x8
   3cc0c:	pop    rbx
   3cc0d:	pop    rbp
   3cc0e:	pop    r12
   3cc10:	pop    r13
   3cc12:	ret    
   3cc13:	nop    DWORD PTR [rax+rax*1+0x0]
   3cc18:	mov    BYTE PTR [r12],0x1
   3cc1d:	xor    eax,eax
   3cc1f:	add    rsp,0x8
   3cc23:	pop    rbx
   3cc24:	pop    rbp
   3cc25:	pop    r12
   3cc27:	pop    r13
   3cc29:	ret    
   3cc2a:	nop    WORD PTR [rax+rax*1+0x0]
   3cc30:	mov    rdi,r13
   3cc33:	call   c720 <strlen@plt>
   3cc38:	jmp    3cbd5 <g_str_equal@plt+0x2f915>
   3cc3a:	nop    WORD PTR [rax+rax*1+0x0]
   3cc40:	lea    rdi,[rip+0x259f0]        # 62637 <_fini@@Base+0xfee3>
   3cc47:	mov    ecx,0x3
   3cc4c:	mov    rsi,r13
   3cc4f:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   3cc51:	seta   al
   3cc54:	sbb    al,0x0
   3cc56:	test   al,al
   3cc58:	je     3cc18 <g_str_equal@plt+0x2f958>
   3cc5a:	sub    rsp,0x8
   3cc5e:	lea    r8,[rip+0x259b5]        # 6261a <_fini@@Base+0xfec6>
   3cc65:	lea    rcx,[rip+0x26074]        # 62ce0 <_fini@@Base+0x1058c>
   3cc6c:	push   r13
   3cc6e:	mov    r9,rbp
   3cc71:	mov    edx,0x24a
   3cc76:	lea    rsi,[rip+0x25c03]        # 62880 <_fini@@Base+0x1012c>
   3cc7d:	xor    eax,eax
   3cc7f:	mov    rdi,rbx
   3cc82:	call   3a090 <g_str_equal@plt+0x2cdd0>
   3cc87:	pop    rax
   3cc88:	mov    eax,0xffffffff
   3cc8d:	pop    rdx
   3cc8e:	jmp    3cc1f <g_str_equal@plt+0x2f95f>
   3cc90:	sub    rsp,0x8
   3cc94:	mov    r9,rbp
   3cc97:	lea    r8,[rip+0x2597c]        # 6261a <_fini@@Base+0xfec6>
   3cc9e:	push   r13
   3cca0:	lea    rcx,[rip+0x26039]        # 62ce0 <_fini@@Base+0x1058c>
   3cca7:	mov    edx,0x23e
   3ccac:	jmp    3cc76 <g_str_equal@plt+0x2f9b6>
   3ccae:	xchg   ax,ax
   3ccb0:	push   rbp
   3ccb1:	push   rbx
   3ccb2:	mov    rbx,rdi
   3ccb5:	mov    rbp,rsi
   3ccb8:	sub    rsp,0x28
   3ccbc:	mov    rax,QWORD PTR fs:0x28
   3ccc5:	mov    QWORD PTR [rsp+0x18],rax
   3ccca:	xor    eax,eax
   3cccc:	mov    rax,0xfffffffffffffff8
   3ccd3:	mov    rdi,QWORD PTR fs:[rax]
   3ccd7:	test   rdi,rdi
   3ccda:	je     3cd40 <g_str_equal@plt+0x2fa80>
   3ccdc:	mov    rdx,rsi
   3ccdf:	mov    rsi,rbx
   3cce2:	call   43ff0 <g_str_equal@plt+0x36d30>
   3cce7:	test   eax,eax
   3cce9:	mov    edi,eax
   3cceb:	mov    DWORD PTR [rsp+0xc],eax
   3ccef:	js     3cd95 <g_str_equal@plt+0x2fad5>
   3ccf5:	lea    rcx,[rsp+0x10]
   3ccfa:	lea    r8,[rsp+0x14]
   3ccff:	mov    edx,0x3
   3cd04:	mov    esi,0x1
   3cd09:	mov    DWORD PTR [rsp+0x14],0x4
   3cd11:	call   cab0 <getsockopt@plt>
   3cd16:	test   eax,eax
   3cd18:	jne    3cd5e <g_str_equal@plt+0x2fa9e>
   3cd1a:	mov    eax,DWORD PTR [rsp+0xc]
   3cd1e:	mov    rdx,QWORD PTR [rsp+0x18]
   3cd23:	xor    rdx,QWORD PTR fs:0x28
   3cd2c:	jne    3cdd9 <g_str_equal@plt+0x2fb19>
   3cd32:	add    rsp,0x28
   3cd36:	pop    rbx
   3cd37:	pop    rbp
   3cd38:	ret    
   3cd39:	nop    DWORD PTR [rax+0x0]
   3cd40:	lea    rcx,[rsp+0xc]
   3cd45:	xor    esi,esi
   3cd47:	mov    edx,0xa
   3cd4c:	mov    rdi,rbx
   3cd4f:	call   32db0 <g_str_equal@plt+0x25af0>
   3cd54:	test   eax,eax
   3cd56:	js     3cd9c <g_str_equal@plt+0x2fadc>
   3cd58:	mov    edi,DWORD PTR [rsp+0xc]
   3cd5c:	jmp    3ccf5 <g_str_equal@plt+0x2fa35>
   3cd5e:	lea    r8,[rip+0x25b5b]        # 628c0 <_fini@@Base+0x1016c>
   3cd65:	lea    rcx,[rip+0x25f04]        # 62c70 <_fini@@Base+0x1051c>
   3cd6c:	lea    rsi,[rip+0x25b0d]        # 62880 <_fini@@Base+0x1012c>
   3cd73:	mov    r9,rbx
   3cd76:	mov    edx,0x426
   3cd7b:	mov    rdi,rbp
   3cd7e:	xor    eax,eax
   3cd80:	call   3a090 <g_str_equal@plt+0x2cdd0>
   3cd85:	mov    edi,DWORD PTR [rsp+0xc]
   3cd89:	call   c230 <close@plt>
   3cd8e:	mov    eax,0xffffffff
   3cd93:	jmp    3cd1e <g_str_equal@plt+0x2fa5e>
   3cd95:	mov    eax,0xffffffff
   3cd9a:	jmp    3cd1e <g_str_equal@plt+0x2fa5e>
   3cd9c:	call   cc80 <__errno_location@plt>
   3cda1:	sub    rsp,0x8
   3cda5:	lea    r9,[rip+0x25894]        # 62640 <_fini@@Base+0xfeec>
   3cdac:	lea    rcx,[rip+0x25ebd]        # 62c70 <_fini@@Base+0x1051c>
   3cdb3:	push   rbx
   3cdb4:	mov    r8d,DWORD PTR [rax]
   3cdb7:	lea    rsi,[rip+0x25ac2]        # 62880 <_fini@@Base+0x1012c>
   3cdbe:	mov    edx,0x421
   3cdc3:	xor    eax,eax
   3cdc5:	mov    rdi,rbp
   3cdc8:	call   3a140 <g_str_equal@plt+0x2ce80>
   3cdcd:	pop    rax
   3cdce:	mov    eax,0xffffffff
   3cdd3:	pop    rdx
   3cdd4:	jmp    3cd1e <g_str_equal@plt+0x2fa5e>
   3cdd9:	call   cd30 <__stack_chk_fail@plt>
   3cdde:	xchg   ax,ax
   3cde0:	push   r14
   3cde2:	push   r13
   3cde4:	mov    r13,rdx
   3cde7:	push   r12
   3cde9:	push   rbp
   3cdea:	mov    edx,0x28
   3cdef:	push   rbx
   3cdf0:	mov    rbp,rdi
   3cdf3:	mov    rbx,rsi
   3cdf6:	sub    rsp,0x10
   3cdfa:	mov    WORD PTR [rsi],dx
   3cdfd:	mov    QWORD PTR [rsi+0x2],0x0
   3ce05:	mov    rax,QWORD PTR fs:0x28
   3ce0e:	mov    QWORD PTR [rsp+0x8],rax
   3ce13:	xor    eax,eax
   3ce15:	xor    eax,eax
   3ce17:	mov    DWORD PTR [rsi+0xa],0x0
   3ce1e:	mov    r12,rsp
   3ce21:	mov    WORD PTR [rsi+0xe],ax
   3ce25:	mov    rdi,QWORD PTR [rdi]
   3ce28:	mov    edx,0xa
   3ce2d:	mov    rsi,r12
   3ce30:	call   33450 <g_str_equal@plt+0x26190>
   3ce35:	test   eax,eax
   3ce37:	js     3ce48 <g_str_equal@plt+0x2fb88>
   3ce39:	mov    rax,QWORD PTR [rsp]
   3ce3d:	mov    r14d,0xffffffff
   3ce43:	cmp    rax,r14
   3ce46:	jbe    3ce90 <g_str_equal@plt+0x2fbd0>
   3ce48:	mov    r9,QWORD PTR [rbp+0x0]
   3ce4c:	lea    r8,[rip+0x2580a]        # 6265d <_fini@@Base+0xff09>
   3ce53:	lea    rcx,[rip+0x25df6]        # 62c50 <_fini@@Base+0x104fc>
   3ce5a:	mov    edx,0x2b3
   3ce5f:	lea    rsi,[rip+0x25a1a]        # 62880 <_fini@@Base+0x1012c>
   3ce66:	xor    eax,eax
   3ce68:	mov    rdi,r13
   3ce6b:	call   3a090 <g_str_equal@plt+0x2cdd0>
   3ce70:	xor    eax,eax
   3ce72:	mov    rcx,QWORD PTR [rsp+0x8]
   3ce77:	xor    rcx,QWORD PTR fs:0x28
   3ce80:	jne    3ced9 <g_str_equal@plt+0x2fc19>
   3ce82:	add    rsp,0x10
   3ce86:	pop    rbx
   3ce87:	pop    rbp
   3ce88:	pop    r12
   3ce8a:	pop    r13
   3ce8c:	pop    r14
   3ce8e:	ret    
   3ce8f:	nop
   3ce90:	mov    DWORD PTR [rbx+0x8],eax
   3ce93:	mov    rdi,QWORD PTR [rbp+0x8]
   3ce97:	mov    edx,0xa
   3ce9c:	mov    rsi,r12
   3ce9f:	call   33450 <g_str_equal@plt+0x26190>
   3cea4:	test   eax,eax
   3cea6:	js     3cec0 <g_str_equal@plt+0x2fc00>
   3cea8:	mov    rax,QWORD PTR [rsp]
   3ceac:	cmp    rax,r14
   3ceaf:	ja     3cec0 <g_str_equal@plt+0x2fc00>
   3ceb1:	mov    DWORD PTR [rbx+0x4],eax
   3ceb4:	mov    eax,0x1
   3ceb9:	jmp    3ce72 <g_str_equal@plt+0x2fbb2>
   3cebb:	nop    DWORD PTR [rax+rax*1+0x0]
   3cec0:	mov    r9,QWORD PTR [rbp+0x8]
   3cec4:	lea    r8,[rip+0x257ab]        # 62676 <_fini@@Base+0xff22>
   3cecb:	lea    rcx,[rip+0x25d7e]        # 62c50 <_fini@@Base+0x104fc>
   3ced2:	mov    edx,0x2ba
   3ced7:	jmp    3ce5f <g_str_equal@plt+0x2fb9f>
   3ced9:	call   cd30 <__stack_chk_fail@plt>
   3cede:	xchg   ax,ax
   3cee0:	push   r13
   3cee2:	push   r12
   3cee4:	mov    ecx,0x401
   3cee9:	push   rbp
   3ceea:	push   rbx
   3ceeb:	mov    r9d,0x20
   3cef1:	mov    rbx,rdx
   3cef4:	mov    rbp,rdi
   3cef7:	sub    rsp,0x438
   3cefe:	mov    rax,QWORD PTR fs:0x28
   3cf07:	mov    QWORD PTR [rsp+0x428],rax
   3cf0f:	xor    eax,eax
   3cf11:	mov    r12,rsp
   3cf14:	lea    r13,[rsp+0x20]
   3cf19:	sub    rsp,0x8
   3cf1d:	push   0x3
   3cf1f:	mov    r8,r12
   3cf22:	mov    rdx,r13
   3cf25:	call   cd50 <getnameinfo@plt>
   3cf2a:	test   eax,eax
   3cf2c:	pop    rdx
   3cf2d:	pop    rcx
   3cf2e:	jne    3cfa0 <g_str_equal@plt+0x2fce0>
   3cf30:	mov    edi,0x28
   3cf35:	call   ce00 <g_malloc0@plt>
   3cf3a:	mov    rdi,r13
   3cf3d:	mov    rbx,rax
   3cf40:	mov    DWORD PTR [rax],0x0
   3cf46:	call   c370 <g_strdup@plt>
   3cf4b:	mov    rdi,r12
   3cf4e:	mov    QWORD PTR [rbx+0x8],rax
   3cf52:	call   c370 <g_strdup@plt>
   3cf57:	cmp    WORD PTR [rbp+0x0],0x2
   3cf5c:	mov    QWORD PTR [rbx+0x10],rax
   3cf60:	je     3cf90 <g_str_equal@plt+0x2fcd0>
   3cf62:	mov    BYTE PTR [rbx+0x21],0x1
   3cf66:	mov    BYTE PTR [rbx+0x20],0x1
   3cf6a:	mov    rcx,QWORD PTR [rsp+0x428]
   3cf72:	xor    rcx,QWORD PTR fs:0x28
   3cf7b:	mov    rax,rbx
   3cf7e:	jne    3cfd2 <g_str_equal@plt+0x2fd12>
   3cf80:	add    rsp,0x438
   3cf87:	pop    rbx
   3cf88:	pop    rbp
   3cf89:	pop    r12
   3cf8b:	pop    r13
   3cf8d:	ret    
   3cf8e:	xchg   ax,ax
   3cf90:	mov    BYTE PTR [rbx+0x1f],0x1
   3cf94:	mov    BYTE PTR [rbx+0x1e],0x1
   3cf98:	jmp    3cf6a <g_str_equal@plt+0x2fcaa>
   3cf9a:	nop    WORD PTR [rax+rax*1+0x0]
   3cfa0:	mov    edi,eax
   3cfa2:	call   d100 <gai_strerror@plt>
   3cfa7:	lea    r8,[rip+0x2593a]        # 628e8 <_fini@@Base+0x10194>
   3cfae:	lea    rcx,[rip+0x25bab]        # 62b60 <_fini@@Base+0x1040c>
   3cfb5:	lea    rsi,[rip+0x258c4]        # 62880 <_fini@@Base+0x1012c>
   3cfbc:	mov    r9,rax
   3cfbf:	mov    rdi,rbx
   3cfc2:	mov    edx,0x49f
   3cfc7:	xor    eax,eax
   3cfc9:	xor    ebx,ebx
   3cfcb:	call   3a090 <g_str_equal@plt+0x2cdd0>
   3cfd0:	jmp    3cf6a <g_str_equal@plt+0x2fcaa>
   3cfd2:	call   cd30 <__stack_chk_fail@plt>
   3cfd7:	nop    WORD PTR [rax+rax*1+0x0]
   3cfe0:	push   r14
   3cfe2:	push   r13
   3cfe4:	mov    r13,rsi
   3cfe7:	push   r12
   3cfe9:	push   rbp
   3cfea:	push   rbx
   3cfeb:	add    rsp,0xffffffffffffff80
   3cfef:	mov    rax,QWORD PTR fs:0x28
   3cff8:	mov    QWORD PTR [rsp+0x78],rax
   3cffd:	xor    eax,eax
   3cfff:	cmp    QWORD PTR [rdi],0x0
   3d003:	je     3d14f <g_str_equal@plt+0x2fe8f>
   3d009:	xor    edx,edx
   3d00b:	mov    r12,rdi
   3d00e:	mov    esi,0x1
   3d013:	mov    edi,0x1
   3d018:	call   32520 <g_str_equal@plt+0x25260>
   3d01d:	test   eax,eax
   3d01f:	mov    ebp,eax
   3d021:	js     3d17b <g_str_equal@plt+0x2febb>
   3d027:	mov    r14,QWORD PTR [r12]
   3d02b:	mov    rdi,r14
   3d02e:	call   c720 <strlen@plt>
   3d033:	cmp    rax,0x6c
   3d037:	ja     3d110 <g_str_equal@plt+0x2fe50>
   3d03d:	mov    rbx,rsp
   3d040:	xor    eax,eax
   3d042:	mov    QWORD PTR [rsp+0x2],0x0
   3d04b:	lea    r8,[rbx+0x2]
   3d04f:	lea    rdi,[rbx+0x8]
   3d053:	mov    QWORD PTR [rbx+0x66],0x0
   3d05b:	mov    edx,0x6c
   3d060:	mov    rsi,r14
   3d063:	mov    rcx,r8
   3d066:	sub    rcx,rdi
   3d069:	add    ecx,0x6c
   3d06c:	shr    ecx,0x3
   3d06f:	rep stos QWORD PTR es:[rdi],rax
   3d072:	mov    ecx,0x1
   3d077:	mov    rdi,r8
   3d07a:	mov    WORD PTR [rsp],cx
   3d07e:	call   ced0 <strncpy@plt>
   3d083:	jmp    3d09a <g_str_equal@plt+0x2fdda>
   3d085:	nop    DWORD PTR [rax]
   3d088:	call   cc80 <__errno_location@plt>
   3d08d:	mov    r8d,DWORD PTR [rax]
   3d090:	mov    eax,r8d
   3d093:	neg    eax
   3d095:	cmp    eax,0xfffffffc
   3d098:	jne    3d0d0 <g_str_equal@plt+0x2fe10>
   3d09a:	mov    edx,0x6e
   3d09f:	mov    rsi,rbx
   3d0a2:	mov    edi,ebp
   3d0a4:	call   cb20 <connect@plt>
   3d0a9:	test   eax,eax
   3d0ab:	js     3d088 <g_str_equal@plt+0x2fdc8>
   3d0ad:	mov    rdx,QWORD PTR [rsp+0x78]
   3d0b2:	xor    rdx,QWORD PTR fs:0x28
   3d0bb:	mov    eax,ebp
   3d0bd:	jne    3d1b1 <g_str_equal@plt+0x2fef1>
   3d0c3:	sub    rsp,0xffffffffffffff80
   3d0c7:	pop    rbx
   3d0c8:	pop    rbp
   3d0c9:	pop    r12
   3d0cb:	pop    r13
   3d0cd:	pop    r14
   3d0cf:	ret    
   3d0d0:	test   eax,eax
   3d0d2:	jns    3d0ad <g_str_equal@plt+0x2fded>
   3d0d4:	sub    rsp,0x8
   3d0d8:	lea    r9,[rip+0x255c9]        # 626a8 <_fini@@Base+0xff54>
   3d0df:	push   QWORD PTR [r12]
   3d0e3:	lea    rcx,[rip+0x25bb6]        # 62ca0 <_fini@@Base+0x1054c>
   3d0ea:	lea    rsi,[rip+0x2578f]        # 62880 <_fini@@Base+0x1012c>
   3d0f1:	mov    edx,0x3a9
   3d0f6:	xor    eax,eax
   3d0f8:	mov    rdi,r13
   3d0fb:	call   3a140 <g_str_equal@plt+0x2ce80>
   3d100:	pop    rax
   3d101:	pop    rdx
   3d102:	mov    edi,ebp
   3d104:	mov    ebp,0xffffffff
   3d109:	call   c230 <close@plt>
   3d10e:	jmp    3d0ad <g_str_equal@plt+0x2fded>
   3d110:	lea    r8,[rip+0x25821]        # 62938 <_fini@@Base+0x101e4>
   3d117:	lea    rcx,[rip+0x25b82]        # 62ca0 <_fini@@Base+0x1054c>
   3d11e:	lea    rsi,[rip+0x2575b]        # 62880 <_fini@@Base+0x1012c>
   3d125:	mov    rdi,r13
   3d128:	xor    eax,eax
   3d12a:	mov    r9,r14
   3d12d:	mov    edx,0x395
   3d132:	call   3a090 <g_str_equal@plt+0x2cdd0>
   3d137:	lea    rsi,[rip+0x25822]        # 62960 <_fini@@Base+0x1020c>
   3d13e:	mov    edx,0x6c
   3d143:	mov    rdi,r13
   3d146:	xor    eax,eax
   3d148:	call   39c60 <g_str_equal@plt+0x2c9a0>
   3d14d:	jmp    3d102 <g_str_equal@plt+0x2fe42>
   3d14f:	lea    r8,[rip+0x257c2]        # 62918 <_fini@@Base+0x101c4>
   3d156:	lea    rcx,[rip+0x25b43]        # 62ca0 <_fini@@Base+0x1054c>
   3d15d:	lea    rsi,[rip+0x2571c]        # 62880 <_fini@@Base+0x1012c>
   3d164:	mov    edx,0x38a
   3d169:	mov    rdi,r13
   3d16c:	mov    ebp,0xffffffff
   3d171:	call   3a090 <g_str_equal@plt+0x2cdd0>
   3d176:	jmp    3d0ad <g_str_equal@plt+0x2fded>
   3d17b:	call   cc80 <__errno_location@plt>
   3d180:	mov    r8d,DWORD PTR [rax]
   3d183:	lea    r9,[rip+0x25506]        # 62690 <_fini@@Base+0xff3c>
   3d18a:	lea    rcx,[rip+0x25b0f]        # 62ca0 <_fini@@Base+0x1054c>
   3d191:	lea    rsi,[rip+0x256e8]        # 62880 <_fini@@Base+0x1012c>
   3d198:	mov    edx,0x390
   3d19d:	mov    rdi,r13
   3d1a0:	xor    eax,eax
   3d1a2:	mov    ebp,0xffffffff
   3d1a7:	call   3a140 <g_str_equal@plt+0x2ce80>
   3d1ac:	jmp    3d0ad <g_str_equal@plt+0x2fded>
   3d1b1:	call   cd30 <__stack_chk_fail@plt>
   3d1b6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3d1c0:	push   r14
   3d1c2:	push   r13
   3d1c4:	xor    edx,edx
   3d1c6:	push   r12
   3d1c8:	push   rbp
   3d1c9:	mov    r13,rsi
   3d1cc:	push   rbx
   3d1cd:	mov    esi,0x1
   3d1d2:	mov    rbx,rdi
   3d1d5:	mov    edi,0x1
   3d1da:	add    rsp,0xffffffffffffff80
   3d1de:	mov    rax,QWORD PTR fs:0x28
   3d1e7:	mov    QWORD PTR [rsp+0x78],rax
   3d1ec:	xor    eax,eax
   3d1ee:	call   32520 <g_str_equal@plt+0x25260>
   3d1f3:	test   eax,eax
   3d1f5:	js     3d449 <g_str_equal@plt+0x30189>
   3d1fb:	mov    rbx,QWORD PTR [rbx]
   3d1fe:	mov    ebp,eax
   3d200:	test   rbx,rbx
   3d203:	je     3d20e <g_str_equal@plt+0x2ff4e>
   3d205:	cmp    BYTE PTR [rbx],0x0
   3d208:	jne    3d328 <g_str_equal@plt+0x30068>
   3d20e:	lea    rdi,[rip+0x254d1]        # 626e6 <_fini@@Base+0xff92>
   3d215:	call   cc40 <getenv@plt>
   3d21a:	lea    rdx,[rip+0x254a3]        # 626c4 <_fini@@Base+0xff70>
   3d221:	test   rax,rax
   3d224:	lea    rdi,[rip+0x254f9]        # 62724 <_fini@@Base+0xffd0>
   3d22b:	cmove  rax,rdx
   3d22f:	mov    rsi,rax
   3d232:	xor    eax,eax
   3d234:	call   c740 <g_strdup_printf@plt>
   3d239:	mov    rdi,rax
   3d23c:	mov    r12,rax
   3d23f:	call   c720 <strlen@plt>
   3d244:	cmp    rax,0x6c
   3d248:	ja     3d340 <g_str_equal@plt+0x30080>
   3d24e:	mov    rdi,r12
   3d251:	call   c7e0 <mkstemp64@plt>
   3d256:	test   eax,eax
   3d258:	js     3d423 <g_str_equal@plt+0x30163>
   3d25e:	mov    edi,eax
   3d260:	mov    rbx,r12
   3d263:	call   c230 <close@plt>
   3d268:	mov    rdi,rbx
   3d26b:	call   c4d0 <unlink@plt>
   3d270:	test   eax,eax
   3d272:	jns    3d286 <g_str_equal@plt+0x2ffc6>
   3d274:	call   cc80 <__errno_location@plt>
   3d279:	mov    r8d,DWORD PTR [rax]
   3d27c:	cmp    r8d,0x2
   3d280:	jne    3d409 <g_str_equal@plt+0x30149>
   3d286:	mov    r14,rsp
   3d289:	xor    eax,eax
   3d28b:	mov    QWORD PTR [rsp+0x2],0x0
   3d294:	lea    r8,[r14+0x2]
   3d298:	lea    rdi,[r14+0x8]
   3d29c:	mov    QWORD PTR [r14+0x66],0x0
   3d2a4:	mov    edx,0x6c
   3d2a9:	mov    rsi,rbx
   3d2ac:	mov    rcx,r8
   3d2af:	sub    rcx,rdi
   3d2b2:	add    ecx,0x6c
   3d2b5:	shr    ecx,0x3
   3d2b8:	rep stos QWORD PTR es:[rdi],rax
   3d2bb:	mov    ecx,0x1
   3d2c0:	mov    rdi,r8
   3d2c3:	mov    WORD PTR [rsp],cx
   3d2c7:	call   ced0 <strncpy@plt>
   3d2cc:	mov    edx,0x6e
   3d2d1:	mov    rsi,r14
   3d2d4:	mov    edi,ebp
   3d2d6:	call   d080 <bind@plt>
   3d2db:	test   eax,eax
   3d2dd:	js     3d3a0 <g_str_equal@plt+0x300e0>
   3d2e3:	mov    esi,0x1
   3d2e8:	mov    edi,ebp
   3d2ea:	call   c7f0 <listen@plt>
   3d2ef:	test   eax,eax
   3d2f1:	js     3d3d8 <g_str_equal@plt+0x30118>
   3d2f7:	mov    rdi,r12
   3d2fa:	call   d2b0 <g_free@plt>
   3d2ff:	mov    rdx,QWORD PTR [rsp+0x78]
   3d304:	xor    rdx,QWORD PTR fs:0x28
   3d30d:	mov    eax,ebp
   3d30f:	jne    3d47f <g_str_equal@plt+0x301bf>
   3d315:	sub    rsp,0xffffffffffffff80
   3d319:	pop    rbx
   3d31a:	pop    rbp
   3d31b:	pop    r12
   3d31d:	pop    r13
   3d31f:	pop    r14
   3d321:	ret    
   3d322:	nop    WORD PTR [rax+rax*1+0x0]
   3d328:	mov    rdi,rbx
   3d32b:	xor    r12d,r12d
   3d32e:	call   c720 <strlen@plt>
   3d333:	cmp    rax,0x6c
   3d337:	jbe    3d268 <g_str_equal@plt+0x2ffa8>
   3d33d:	jmp    3d343 <g_str_equal@plt+0x30083>
   3d33f:	nop
   3d340:	mov    rbx,r12
   3d343:	lea    rsi,[rip+0x25536]        # 62880 <_fini@@Base+0x1012c>
   3d34a:	lea    r8,[rip+0x255e7]        # 62938 <_fini@@Base+0x101e4>
   3d351:	lea    rcx,[rip+0x25968]        # 62cc0 <_fini@@Base+0x1056c>
   3d358:	mov    edx,0x351
   3d35d:	mov    rdi,r13
   3d360:	xor    eax,eax
   3d362:	mov    r9,rbx
   3d365:	call   3a090 <g_str_equal@plt+0x2cdd0>
   3d36a:	lea    rsi,[rip+0x255ef]        # 62960 <_fini@@Base+0x1020c>
   3d371:	mov    edx,0x6c
   3d376:	mov    rdi,r13
   3d379:	xor    eax,eax
   3d37b:	call   39c60 <g_str_equal@plt+0x2c9a0>
   3d380:	mov    rdi,r12
   3d383:	call   d2b0 <g_free@plt>
   3d388:	mov    edi,ebp
   3d38a:	mov    ebp,0xffffffff
   3d38f:	call   c230 <close@plt>
   3d394:	jmp    3d2ff <g_str_equal@plt+0x3003f>
   3d399:	nop    DWORD PTR [rax+0x0]
   3d3a0:	call   cc80 <__errno_location@plt>
   3d3a5:	sub    rsp,0x8
   3d3a9:	lea    r9,[rip+0x2533d]        # 626ed <_fini@@Base+0xff99>
   3d3b0:	lea    rcx,[rip+0x25909]        # 62cc0 <_fini@@Base+0x1056c>
   3d3b7:	push   rbx
   3d3b8:	mov    r8d,DWORD PTR [rax]
   3d3bb:	mov    edx,0x373
   3d3c0:	lea    rsi,[rip+0x254b9]        # 62880 <_fini@@Base+0x1012c>
   3d3c7:	xor    eax,eax
   3d3c9:	mov    rdi,r13
   3d3cc:	call   3a140 <g_str_equal@plt+0x2ce80>
   3d3d1:	pop    rax
   3d3d2:	pop    rdx
   3d3d3:	jmp    3d380 <g_str_equal@plt+0x300c0>
   3d3d5:	nop    DWORD PTR [rax]
   3d3d8:	call   cc80 <__errno_location@plt>
   3d3dd:	mov    r8d,DWORD PTR [rax]
   3d3e0:	lea    r9,[rip+0x25322]        # 62709 <_fini@@Base+0xffb5>
   3d3e7:	lea    rcx,[rip+0x258d2]        # 62cc0 <_fini@@Base+0x1056c>
   3d3ee:	lea    rsi,[rip+0x2548b]        # 62880 <_fini@@Base+0x1012c>
   3d3f5:	mov    edx,0x377
   3d3fa:	mov    rdi,r13
   3d3fd:	xor    eax,eax
   3d3ff:	call   3a140 <g_str_equal@plt+0x2ce80>
   3d404:	jmp    3d380 <g_str_equal@plt+0x300c0>
   3d409:	sub    rsp,0x8
   3d40d:	lea    r9,[rip+0x1e1e7]        # 5b5fb <_fini@@Base+0x8ea7>
   3d414:	lea    rcx,[rip+0x258a5]        # 62cc0 <_fini@@Base+0x1056c>
   3d41b:	push   rbx
   3d41c:	mov    edx,0x36a
   3d421:	jmp    3d3c0 <g_str_equal@plt+0x30100>
   3d423:	call   cc80 <__errno_location@plt>
   3d428:	sub    rsp,0x8
   3d42c:	lea    r9,[rip+0x25555]        # 62988 <_fini@@Base+0x10234>
   3d433:	lea    rcx,[rip+0x25886]        # 62cc0 <_fini@@Base+0x1056c>
   3d43a:	push   r12
   3d43c:	mov    edx,0x362
   3d441:	mov    r8d,DWORD PTR [rax]
   3d444:	jmp    3d3c0 <g_str_equal@plt+0x30100>
   3d449:	call   cc80 <__errno_location@plt>
   3d44e:	mov    r8d,DWORD PTR [rax]
   3d451:	lea    r9,[rip+0x25271]        # 626c9 <_fini@@Base+0xff75>
   3d458:	lea    rcx,[rip+0x25861]        # 62cc0 <_fini@@Base+0x1056c>
   3d45f:	lea    rsi,[rip+0x2541a]        # 62880 <_fini@@Base+0x1012c>
   3d466:	mov    edx,0x344
   3d46b:	mov    rdi,r13
   3d46e:	xor    eax,eax
   3d470:	mov    ebp,0xffffffff
   3d475:	call   3a140 <g_str_equal@plt+0x2ce80>
   3d47a:	jmp    3d2ff <g_str_equal@plt+0x3003f>
   3d47f:	call   cd30 <__stack_chk_fail@plt>
   3d484:	xchg   ax,ax
   3d486:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3d490:	cmp    edi,0x2
   3d493:	je     3d4c0 <g_str_equal@plt+0x30200>
   3d495:	jle    3d4b0 <g_str_equal@plt+0x301f0>
   3d497:	cmp    edi,0xa
   3d49a:	mov    eax,0x1
   3d49f:	je     3d4ab <g_str_equal@plt+0x301eb>
   3d4a1:	cmp    edi,0x28
   3d4a4:	mov    eax,0x3
   3d4a9:	jne    3d4ba <g_str_equal@plt+0x301fa>
   3d4ab:	repz ret 
   3d4ad:	nop    DWORD PTR [rax]
   3d4b0:	cmp    edi,0x1
   3d4b3:	mov    eax,0x2
   3d4b8:	je     3d4ab <g_str_equal@plt+0x301eb>
   3d4ba:	mov    eax,0x4
   3d4bf:	ret    
   3d4c0:	xor    eax,eax
   3d4c2:	ret    
   3d4c3:	nop    DWORD PTR [rax]
   3d4c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3d4d0:	sub    rsp,0x18
   3d4d4:	mov    edx,0x3
   3d4d9:	mov    esi,0x1
   3d4de:	lea    r8,[rsp+0x4]
   3d4e3:	mov    rcx,rsp
   3d4e6:	mov    DWORD PTR [rsp+0x4],0x4
   3d4ee:	mov    rax,QWORD PTR fs:0x28
   3d4f7:	mov    QWORD PTR [rsp+0x8],rax
   3d4fc:	xor    eax,eax
   3d4fe:	call   cab0 <getsockopt@plt>
   3d503:	test   eax,eax
   3d505:	sete   al
   3d508:	mov    rdx,QWORD PTR [rsp+0x8]
   3d50d:	xor    rdx,QWORD PTR fs:0x28
   3d516:	jne    3d51d <g_str_equal@plt+0x3025d>
   3d518:	add    rsp,0x18
   3d51c:	ret    
   3d51d:	call   cd30 <__stack_chk_fail@plt>
   3d522:	nop    DWORD PTR [rax+0x0]
   3d526:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3d530:	cmp    BYTE PTR [rdi+0x18],0x0
   3d534:	movzx  eax,BYTE PTR [rdi+0x16]
   3d538:	je     3d560 <g_str_equal@plt+0x302a0>
   3d53a:	test   al,al
   3d53c:	movzx  edx,BYTE PTR [rdi+0x19]
   3d540:	je     3d570 <g_str_equal@plt+0x302b0>
   3d542:	sub    rsp,0x8
   3d546:	test   dl,dl
   3d548:	mov    r9,rsi
   3d54b:	jne    3d590 <g_str_equal@plt+0x302d0>
   3d54d:	cmp    BYTE PTR [rdi+0x17],0x0
   3d551:	mov    eax,0x2
   3d556:	je     3d5d0 <g_str_equal@plt+0x30310>
   3d558:	add    rsp,0x8
   3d55c:	ret    
   3d55d:	nop    DWORD PTR [rax]
   3d560:	test   al,al
   3d562:	jne    3d580 <g_str_equal@plt+0x302c0>
   3d564:	xor    eax,eax
   3d566:	ret    
   3d567:	nop    WORD PTR [rax+rax*1+0x0]
   3d570:	test   dl,dl
   3d572:	jne    3d5b8 <g_str_equal@plt+0x302f8>
   3d574:	mov    eax,0x2
   3d579:	ret    
   3d57a:	nop    WORD PTR [rax+rax*1+0x0]
   3d580:	cmp    BYTE PTR [rdi+0x17],0x0
   3d584:	mov    eax,0x2
   3d589:	je     3d5b8 <g_str_equal@plt+0x302f8>
   3d58b:	repz ret 
   3d58d:	nop    DWORD PTR [rax]
   3d590:	cmp    BYTE PTR [rdi+0x17],0x0
   3d594:	je     3d5c0 <g_str_equal@plt+0x30300>
   3d596:	mov    rdi,QWORD PTR [rdi]
   3d599:	test   rdi,rdi
   3d59c:	je     3d5c0 <g_str_equal@plt+0x30300>
   3d59e:	lea    rsi,[rip+0x22cc9]        # 6026e <_fini@@Base+0xdb1a>
   3d5a5:	call   d2c0 <g_str_equal@plt>
   3d5aa:	test   eax,eax
   3d5ac:	jne    3d5c0 <g_str_equal@plt+0x30300>
   3d5ae:	xor    eax,eax
   3d5b0:	add    rsp,0x8
   3d5b4:	ret    
   3d5b5:	nop    DWORD PTR [rax]
   3d5b8:	mov    eax,0xa
   3d5bd:	ret    
   3d5be:	xchg   ax,ax
   3d5c0:	mov    eax,0xa
   3d5c5:	add    rsp,0x8
   3d5c9:	ret    
   3d5ca:	nop    WORD PTR [rax+rax*1+0x0]
   3d5d0:	lea    r8,[rip+0x253d9]        # 629b0 <_fini@@Base+0x1025c>
   3d5d7:	lea    rcx,[rip+0x25762]        # 62d40 <_fini@@Base+0x105ec>
   3d5de:	lea    rsi,[rip+0x2529b]        # 62880 <_fini@@Base+0x1012c>
   3d5e5:	xor    eax,eax
   3d5e7:	mov    edx,0x82
   3d5ec:	mov    rdi,r9
   3d5ef:	call   3a090 <g_str_equal@plt+0x2cdd0>
   3d5f4:	xor    eax,eax
   3d5f6:	jmp    3d558 <g_str_equal@plt+0x30298>
   3d5fb:	nop    DWORD PTR [rax+rax*1+0x0]
   3d600:	push   r14
   3d602:	push   r13
   3d604:	mov    r13,rsi
   3d607:	push   r12
   3d609:	push   rbp
   3d60a:	push   rbx
   3d60b:	pxor   xmm0,xmm0
   3d60f:	mov    rbx,rdi
   3d612:	sub    rsp,0x60
   3d616:	lea    rbp,[rsp+0x20]
   3d61b:	mov    QWORD PTR [rsp+0x8],0x0
   3d624:	mov    QWORD PTR [rsp+0x18],0x0
   3d62d:	movups XMMWORD PTR [rsp+0x24],xmm0
   3d632:	mov    rax,QWORD PTR fs:0x28
   3d63b:	mov    QWORD PTR [rsp+0x58],rax
   3d640:	xor    eax,eax
   3d642:	movups XMMWORD PTR [rbp+0x14],xmm0
   3d646:	mov    QWORD PTR [rbp+0x24],0x0
   3d64e:	mov    DWORD PTR [rbp+0x2c],0x0
   3d655:	mov    DWORD PTR [rsp+0x20],0x22
   3d65d:	mov    eax,DWORD PTR [rip+0x2451c5]        # 282828 <g_test_config_vars+0x1468>
   3d663:	test   eax,eax
   3d665:	je     3d66f <g_str_equal@plt+0x303af>
   3d667:	mov    DWORD PTR [rsp+0x20],0x2a
   3d66f:	lea    rsi,[rsp+0x18]
   3d674:	mov    rdi,rbx
   3d677:	call   3d530 <g_str_equal@plt+0x30270>
   3d67c:	mov    rsi,QWORD PTR [rsp+0x18]
   3d681:	mov    DWORD PTR [rsp+0x24],eax
   3d685:	mov    DWORD PTR [rsp+0x28],0x1
   3d68d:	test   rsi,rsi
   3d690:	jne    3d83e <g_str_equal@plt+0x3057e>
   3d696:	mov    rdi,QWORD PTR [rbx]
   3d699:	test   rdi,rdi
   3d69c:	je     3d850 <g_str_equal@plt+0x30590>
   3d6a2:	mov    rsi,QWORD PTR [rbx+0x8]
   3d6a6:	test   rsi,rsi
   3d6a9:	je     3d850 <g_str_equal@plt+0x30590>
   3d6af:	lea    r12,[rsp+0x10]
   3d6b4:	mov    rdx,rbp
   3d6b7:	mov    rcx,r12
   3d6ba:	call   c3b0 <getaddrinfo@plt>
   3d6bf:	cmp    eax,0xffffffff
   3d6c2:	je     3d7d3 <g_str_equal@plt+0x30513>
   3d6c8:	test   eax,eax
   3d6ca:	jne    3d7da <g_str_equal@plt+0x3051a>
   3d6d0:	mov    r12,QWORD PTR [rsp+0x10]
   3d6d5:	test   r12,r12
   3d6d8:	je     3d8af <g_str_equal@plt+0x305ef>
   3d6de:	lea    r14,[rsp+0x8]
   3d6e3:	mov    rbx,r12
   3d6e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3d6f0:	mov    rdi,QWORD PTR [rsp+0x8]
   3d6f5:	call   3a460 <g_str_equal@plt+0x2d1a0>
   3d6fa:	mov    QWORD PTR [rsp+0x8],0x0
   3d703:	mov    edx,DWORD PTR [rbx+0xc]
   3d706:	mov    esi,DWORD PTR [rbx+0x8]
   3d709:	mov    edi,DWORD PTR [rbx+0x4]
   3d70c:	call   32520 <g_str_equal@plt+0x25260>
   3d711:	test   eax,eax
   3d713:	mov    ebp,eax
   3d715:	js     3d87e <g_str_equal@plt+0x305be>
   3d71b:	mov    edi,eax
   3d71d:	call   38140 <g_str_equal@plt+0x2ae80>
   3d722:	jmp    3d73a <g_str_equal@plt+0x3047a>
   3d724:	nop    DWORD PTR [rax+0x0]
   3d728:	call   cc80 <__errno_location@plt>
   3d72d:	mov    r8d,DWORD PTR [rax]
   3d730:	mov    eax,r8d
   3d733:	neg    eax
   3d735:	cmp    eax,0xfffffffc
   3d738:	jne    3d780 <g_str_equal@plt+0x304c0>
   3d73a:	mov    edx,DWORD PTR [rbx+0x10]
   3d73d:	mov    rsi,QWORD PTR [rbx+0x18]
   3d741:	mov    edi,ebp
   3d743:	call   cb20 <connect@plt>
   3d748:	test   eax,eax
   3d74a:	js     3d728 <g_str_equal@plt+0x30468>
   3d74c:	mov    rdi,r12
   3d74f:	call   c6e0 <freeaddrinfo@plt>
   3d754:	mov    rcx,QWORD PTR [rsp+0x58]
   3d759:	xor    rcx,QWORD PTR fs:0x28
   3d762:	mov    eax,ebp
   3d764:	jne    3d8b7 <g_str_equal@plt+0x305f7>
   3d76a:	add    rsp,0x60
   3d76e:	pop    rbx
   3d76f:	pop    rbp
   3d770:	pop    r12
   3d772:	pop    r13
   3d774:	pop    r14
   3d776:	ret    
   3d777:	nop    WORD PTR [rax+rax*1+0x0]
   3d780:	test   eax,eax
   3d782:	jns    3d74c <g_str_equal@plt+0x3048c>
   3d784:	lea    r9,[rip+0x24faf]        # 6273a <_fini@@Base+0xffe6>
   3d78b:	lea    rcx,[rip+0x2556e]        # 62d00 <_fini@@Base+0x105ac>
   3d792:	lea    rsi,[rip+0x250e7]        # 62880 <_fini@@Base+0x1012c>
   3d799:	mov    rdi,r14
   3d79c:	mov    edx,0x172
   3d7a1:	xor    eax,eax
   3d7a3:	call   3a140 <g_str_equal@plt+0x2ce80>
   3d7a8:	mov    edi,ebp
   3d7aa:	call   c230 <close@plt>
   3d7af:	mov    rbx,QWORD PTR [rbx+0x28]
   3d7b3:	test   rbx,rbx
   3d7b6:	jne    3d6f0 <g_str_equal@plt+0x30430>
   3d7bc:	mov    rsi,QWORD PTR [rsp+0x8]
   3d7c1:	mov    rdi,r13
   3d7c4:	mov    ebp,0xffffffff
   3d7c9:	call   3a4c0 <g_str_equal@plt+0x2d200>
   3d7ce:	jmp    3d74c <g_str_equal@plt+0x3048c>
   3d7d3:	test   BYTE PTR [rsp+0x20],0x8
   3d7d8:	jne    3d818 <g_str_equal@plt+0x30558>
   3d7da:	mov    edi,eax
   3d7dc:	mov    ebp,0xffffffff
   3d7e1:	call   d100 <gai_strerror@plt>
   3d7e6:	push   rax
   3d7e7:	push   QWORD PTR [rbx+0x8]
   3d7ea:	lea    r8,[rip+0x1f897]        # 5d088 <_fini@@Base+0xa934>
   3d7f1:	mov    r9,QWORD PTR [rbx]
   3d7f4:	lea    rcx,[rip+0x25525]        # 62d20 <_fini@@Base+0x105cc>
   3d7fb:	lea    rsi,[rip+0x2507e]        # 62880 <_fini@@Base+0x1012c>
   3d802:	mov    edx,0x1a5
   3d807:	xor    eax,eax
   3d809:	mov    rdi,r13
   3d80c:	call   3a090 <g_str_equal@plt+0x2cdd0>
   3d811:	pop    rax
   3d812:	pop    rdx
   3d813:	jmp    3d754 <g_str_equal@plt+0x30494>
   3d818:	mov    DWORD PTR [rip+0x245006],0x0        # 282828 <g_test_config_vars+0x1468>
   3d822:	mov    rsi,QWORD PTR [rbx+0x8]
   3d826:	mov    rdi,QWORD PTR [rbx]
   3d829:	mov    rcx,r12
   3d82c:	mov    rdx,rbp
   3d82f:	and    DWORD PTR [rsp+0x20],0xfffffff7
   3d834:	call   c3b0 <getaddrinfo@plt>
   3d839:	jmp    3d6c8 <g_str_equal@plt+0x30408>
   3d83e:	mov    rdi,r13
   3d841:	mov    ebp,0xffffffff
   3d846:	call   3a4c0 <g_str_equal@plt+0x2d200>
   3d84b:	jmp    3d754 <g_str_equal@plt+0x30494>
   3d850:	lea    r8,[rip+0x25189]        # 629e0 <_fini@@Base+0x1028c>
   3d857:	lea    rcx,[rip+0x254c2]        # 62d20 <_fini@@Base+0x105cc>
   3d85e:	lea    rsi,[rip+0x2501b]        # 62880 <_fini@@Base+0x1012c>
   3d865:	mov    edx,0x191
   3d86a:	mov    rdi,r13
   3d86d:	xor    eax,eax
   3d86f:	call   3a090 <g_str_equal@plt+0x2cdd0>
   3d874:	mov    ebp,0xffffffff
   3d879:	jmp    3d754 <g_str_equal@plt+0x30494>
   3d87e:	call   cc80 <__errno_location@plt>
   3d883:	mov    r8d,DWORD PTR [rax]
   3d886:	lea    r9,[rip+0x24e03]        # 62690 <_fini@@Base+0xff3c>
   3d88d:	lea    rcx,[rip+0x2546c]        # 62d00 <_fini@@Base+0x105ac>
   3d894:	lea    rsi,[rip+0x24fe5]        # 62880 <_fini@@Base+0x1012c>
   3d89b:	mov    edx,0x164
   3d8a0:	mov    rdi,r14
   3d8a3:	xor    eax,eax
   3d8a5:	call   3a140 <g_str_equal@plt+0x2ce80>
   3d8aa:	jmp    3d7af <g_str_equal@plt+0x304ef>
   3d8af:	or     ebp,0xffffffff
   3d8b2:	jmp    3d754 <g_str_equal@plt+0x30494>
   3d8b7:	call   cd30 <__stack_chk_fail@plt>
   3d8bc:	nop    DWORD PTR [rax+0x0]
   3d8c0:	push   r15
   3d8c2:	pxor   xmm0,xmm0
   3d8c6:	push   r14
   3d8c8:	push   r13
   3d8ca:	push   r12
   3d8cc:	push   rbp
   3d8cd:	mov    r12,rdx
   3d8d0:	push   rbx
   3d8d1:	mov    rbp,rsi
   3d8d4:	mov    rbx,rdi
   3d8d7:	sub    rsp,0x98
   3d8de:	mov    rax,QWORD PTR fs:0x28
   3d8e7:	mov    QWORD PTR [rsp+0x88],rax
   3d8ef:	xor    eax,eax
   3d8f1:	movups XMMWORD PTR [rdi],xmm0
   3d8f4:	movups XMMWORD PTR [rdi+0x10],xmm0
   3d8f8:	movzx  eax,BYTE PTR [rsi]
   3d8fb:	cmp    al,0x3a
   3d8fd:	je     3daa0 <g_str_equal@plt+0x307e0>
   3d903:	lea    r14,[rsp+0xc]
   3d908:	lea    r13,[rsp+0x10]
   3d90d:	lea    r15,[rsp+0x40]
   3d912:	cmp    al,0x5b
   3d914:	mov    r8,r14
   3d917:	mov    rcx,r13
   3d91a:	mov    rdx,r15
   3d91d:	je     3da50 <g_str_equal@plt+0x30790>
   3d923:	lea    rsi,[rip+0x24e3d]        # 62767 <_fini@@Base+0x10013>
   3d92a:	xor    eax,eax
   3d92c:	mov    rdi,rbp
   3d92f:	call   c920 <sscanf@plt>
   3d934:	cmp    eax,0x2
   3d937:	jne    3db28 <g_str_equal@plt+0x30868>
   3d93d:	mov    rdi,r15
   3d940:	call   c370 <g_strdup@plt>
   3d945:	mov    rdi,r13
   3d948:	mov    QWORD PTR [rbx],rax
   3d94b:	call   c370 <g_strdup@plt>
   3d950:	mov    QWORD PTR [rbx+0x8],rax
   3d954:	movsxd rax,DWORD PTR [rsp+0xc]
   3d959:	lea    rsi,[rip+0x24e34]        # 62794 <_fini@@Base+0x10040>
   3d960:	add    rbp,rax
   3d963:	mov    rdi,rbp
   3d966:	call   ca40 <strstr@plt>
   3d96b:	test   rax,rax
   3d96e:	mov    r13,rax
   3d971:	je     3d9b9 <g_str_equal@plt+0x306f9>
   3d973:	lea    rdi,[rax+0x4]
   3d977:	lea    rdx,[rsp+0x8]
   3d97c:	lea    rsi,[rip+0x24e16]        # 62799 <_fini@@Base+0x10045>
   3d983:	xor    eax,eax
   3d985:	mov    rcx,r14
   3d988:	call   c920 <sscanf@plt>
   3d98d:	cmp    eax,0x1
   3d990:	jne    3dad8 <g_str_equal@plt+0x30818>
   3d996:	movsxd rax,DWORD PTR [rsp+0xc]
   3d99b:	movzx  eax,BYTE PTR [r13+rax*1+0x4]
   3d9a1:	test   al,al
   3d9a3:	je     3d9ad <g_str_equal@plt+0x306ed>
   3d9a5:	cmp    al,0x2c
   3d9a7:	jne    3dad8 <g_str_equal@plt+0x30818>
   3d9ad:	mov    eax,DWORD PTR [rsp+0x8]
   3d9b1:	mov    BYTE PTR [rbx+0x12],0x1
   3d9b5:	mov    WORD PTR [rbx+0x14],ax
   3d9b9:	lea    rsi,[rip+0x24df9]        # 627b9 <_fini@@Base+0x10065>
   3d9c0:	mov    rdi,rbp
   3d9c3:	call   ca40 <strstr@plt>
   3d9c8:	test   rax,rax
   3d9cb:	je     3d9f0 <g_str_equal@plt+0x30730>
   3d9cd:	lea    rdx,[rbx+0x17]
   3d9d1:	lea    rsi,[rax+0x5]
   3d9d5:	lea    rdi,[rip+0x24dde]        # 627ba <_fini@@Base+0x10066>
   3d9dc:	mov    rcx,r12
   3d9df:	call   3cba0 <g_str_equal@plt+0x2f8e0>
   3d9e4:	test   eax,eax
   3d9e6:	js     3da91 <g_str_equal@plt+0x307d1>
   3d9ec:	mov    BYTE PTR [rbx+0x16],0x1
   3d9f0:	lea    rsi,[rip+0x24dc8]        # 627bf <_fini@@Base+0x1006b>
   3d9f7:	mov    rdi,rbp
   3d9fa:	xor    ebp,ebp
   3d9fc:	call   ca40 <strstr@plt>
   3da01:	test   rax,rax
   3da04:	je     3da25 <g_str_equal@plt+0x30765>
   3da06:	lea    rdx,[rbx+0x19]
   3da0a:	lea    rsi,[rax+0x5]
   3da0e:	lea    rdi,[rip+0x24dab]        # 627c0 <_fini@@Base+0x1006c>
   3da15:	mov    rcx,r12
   3da18:	call   3cba0 <g_str_equal@plt+0x2f8e0>
   3da1d:	test   eax,eax
   3da1f:	js     3da91 <g_str_equal@plt+0x307d1>
   3da21:	mov    BYTE PTR [rbx+0x18],0x1
   3da25:	mov    rcx,QWORD PTR [rsp+0x88]
   3da2d:	xor    rcx,QWORD PTR fs:0x28
   3da36:	mov    eax,ebp
   3da38:	jne    3db43 <g_str_equal@plt+0x30883>
   3da3e:	add    rsp,0x98
   3da45:	pop    rbx
   3da46:	pop    rbp
   3da47:	pop    r12
   3da49:	pop    r13
   3da4b:	pop    r14
   3da4d:	pop    r15
   3da4f:	ret    
   3da50:	lea    rsi,[rip+0x24cfc]        # 62753 <_fini@@Base+0xffff>
   3da57:	xor    eax,eax
   3da59:	mov    rdi,rbp
   3da5c:	call   c920 <sscanf@plt>
   3da61:	cmp    eax,0x2
   3da64:	je     3d93d <g_str_equal@plt+0x3067d>
   3da6a:	lea    r8,[rip+0x24fb7]        # 62a28 <_fini@@Base+0x102d4>
   3da71:	lea    rcx,[rip+0x25278]        # 62cf0 <_fini@@Base+0x1059c>
   3da78:	mov    r9,rbp
   3da7b:	mov    edx,0x266
   3da80:	lea    rsi,[rip+0x24df9]        # 62880 <_fini@@Base+0x1012c>
   3da87:	mov    rdi,r12
   3da8a:	xor    eax,eax
   3da8c:	call   3a090 <g_str_equal@plt+0x2cdd0>
   3da91:	mov    ebp,0xffffffff
   3da96:	jmp    3da25 <g_str_equal@plt+0x30765>
   3da98:	nop    DWORD PTR [rax+rax*1+0x0]
   3daa0:	lea    r14,[rsp+0xc]
   3daa5:	lea    r13,[rsp+0x10]
   3daaa:	lea    rsi,[rip+0x24d4d]        # 627fe <_fini@@Base+0x100aa>
   3dab1:	xor    eax,eax
   3dab3:	mov    rdi,rbp
   3dab6:	mov    BYTE PTR [rsp+0x40],0x0
   3dabb:	mov    rcx,r14
   3dabe:	mov    rdx,r13
   3dac1:	call   c920 <sscanf@plt>
   3dac6:	cmp    eax,0x1
   3dac9:	jne    3db06 <g_str_equal@plt+0x30846>
   3dacb:	lea    r15,[rsp+0x40]
   3dad0:	jmp    3d93d <g_str_equal@plt+0x3067d>
   3dad5:	nop    DWORD PTR [rax]
   3dad8:	lea    r8,[rip+0x24cbf]        # 6279e <_fini@@Base+0x1004a>
   3dadf:	lea    rcx,[rip+0x2520a]        # 62cf0 <_fini@@Base+0x1059c>
   3dae6:	lea    rsi,[rip+0x24d93]        # 62880 <_fini@@Base+0x1012c>
   3daed:	mov    edx,0x27b
   3daf2:	mov    rdi,r12
   3daf5:	xor    eax,eax
   3daf7:	call   3a090 <g_str_equal@plt+0x2cdd0>
   3dafc:	mov    ebp,0xffffffff
   3db01:	jmp    3da25 <g_str_equal@plt+0x30765>
   3db06:	mov    r9,rbp
   3db09:	lea    r8,[rip+0x24ef0]        # 62a00 <_fini@@Base+0x102ac>
   3db10:	lea    rcx,[rip+0x251d9]        # 62cf0 <_fini@@Base+0x1059c>
   3db17:	mov    edx,0x260
   3db1c:	jmp    3da80 <g_str_equal@plt+0x307c0>
   3db21:	nop    DWORD PTR [rax+0x0]
   3db28:	mov    r9,rbp
   3db2b:	lea    r8,[rip+0x24c47]        # 62779 <_fini@@Base+0x10025>
   3db32:	lea    rcx,[rip+0x251b7]        # 62cf0 <_fini@@Base+0x1059c>
   3db39:	mov    edx,0x26c
   3db3e:	jmp    3da80 <g_str_equal@plt+0x307c0>
   3db43:	call   cd30 <__stack_chk_fail@plt>
   3db48:	nop    DWORD PTR [rax+rax*1+0x0]
   3db50:	push   r12
   3db52:	push   rbp
   3db53:	mov    r12,rdi
   3db56:	push   rbx
   3db57:	mov    rbp,rsi
   3db5a:	mov    edi,0x20
   3db5f:	call   c500 <g_malloc@plt>
   3db64:	mov    rdx,rbp
   3db67:	mov    rsi,r12
   3db6a:	mov    rdi,rax
   3db6d:	mov    rbx,rax
   3db70:	call   3d8c0 <g_str_equal@plt+0x30600>
   3db75:	test   eax,eax
   3db77:	jne    3db98 <g_str_equal@plt+0x308d8>
   3db79:	mov    rsi,rbp
   3db7c:	mov    rdi,rbx
   3db7f:	call   3d600 <g_str_equal@plt+0x30340>
   3db84:	mov    ebp,eax
   3db86:	mov    rdi,rbx
   3db89:	call   24560 <g_str_equal@plt+0x172a0>
   3db8e:	mov    eax,ebp
   3db90:	pop    rbx
   3db91:	pop    rbp
   3db92:	pop    r12
   3db94:	ret    
   3db95:	nop    DWORD PTR [rax]
   3db98:	mov    ebp,0xffffffff
   3db9d:	jmp    3db86 <g_str_equal@plt+0x308c6>
   3db9f:	nop
   3dba0:	push   r15
   3dba2:	push   r14
   3dba4:	push   r13
   3dba6:	push   r12
   3dba8:	mov    r12,rdi
   3dbab:	push   rbp
   3dbac:	push   rbx
   3dbad:	mov    edi,0x8
   3dbb2:	mov    r13,rsi
   3dbb5:	sub    rsp,0x8
   3dbb9:	call   ce00 <g_malloc0@plt>
   3dbbe:	mov    esi,0x2c
   3dbc3:	mov    rdi,r12
   3dbc6:	mov    rbp,rax
   3dbc9:	call   cc00 <strchr@plt>
   3dbce:	test   rax,rax
   3dbd1:	je     3dc50 <g_str_equal@plt+0x30990>
   3dbd3:	sub    rax,r12
   3dbd6:	test   eax,eax
   3dbd8:	mov    rbx,rax
   3dbdb:	jne    3dc08 <g_str_equal@plt+0x30948>
   3dbdd:	mov    rsi,r13
   3dbe0:	mov    rdi,rbp
   3dbe3:	call   3d1c0 <g_str_equal@plt+0x2ff00>
   3dbe8:	mov    rdi,rbp
   3dbeb:	mov    ebx,eax
   3dbed:	call   245a0 <g_str_equal@plt+0x172e0>
   3dbf2:	add    rsp,0x8
   3dbf6:	mov    eax,ebx
   3dbf8:	pop    rbx
   3dbf9:	pop    rbp
   3dbfa:	pop    r12
   3dbfc:	pop    r13
   3dbfe:	pop    r14
   3dc00:	pop    r15
   3dc02:	ret    
   3dc03:	nop    DWORD PTR [rax+rax*1+0x0]
   3dc08:	lea    r14d,[rax+0x1]
   3dc0c:	movsxd r14,r14d
   3dc0f:	mov    rdi,r14
   3dc12:	call   c500 <g_malloc@plt>
   3dc17:	sub    rsp,0x8
   3dc1b:	lea    r8,[rip+0x24ba3]        # 627c5 <_fini@@Base+0x10071>
   3dc22:	mov    r15,rax
   3dc25:	push   r12
   3dc27:	mov    edx,0x1
   3dc2c:	mov    rdi,rax
   3dc2f:	mov    r9d,ebx
   3dc32:	mov    rcx,0xffffffffffffffff
   3dc39:	mov    rsi,r14
   3dc3c:	xor    eax,eax
   3dc3e:	call   cfe0 <__snprintf_chk@plt>
   3dc43:	mov    QWORD PTR [rbp+0x0],r15
   3dc47:	pop    rax
   3dc48:	pop    rdx
   3dc49:	jmp    3dbdd <g_str_equal@plt+0x3091d>
   3dc4b:	nop    DWORD PTR [rax+rax*1+0x0]
   3dc50:	mov    rdi,r12
   3dc53:	call   c370 <g_strdup@plt>
   3dc58:	mov    QWORD PTR [rbp+0x0],rax
   3dc5c:	jmp    3dbdd <g_str_equal@plt+0x3091d>
   3dc61:	nop    DWORD PTR [rax+rax*1+0x0]
   3dc66:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3dc70:	push   r12
   3dc72:	push   rbp
   3dc73:	mov    r12,rdi
   3dc76:	push   rbx
   3dc77:	mov    edi,0x8
   3dc7c:	mov    rbp,rsi
   3dc7f:	call   ce00 <g_malloc0@plt>
   3dc84:	mov    rdi,r12
   3dc87:	mov    rbx,rax
   3dc8a:	call   c370 <g_strdup@plt>
   3dc8f:	mov    rsi,rbp
   3dc92:	mov    rdi,rbx
   3dc95:	mov    QWORD PTR [rbx],rax
   3dc98:	call   3cfe0 <g_str_equal@plt+0x2fd20>
   3dc9d:	mov    rdi,rbx
   3dca0:	mov    ebp,eax
   3dca2:	call   245a0 <g_str_equal@plt+0x172e0>
   3dca7:	mov    eax,ebp
   3dca9:	pop    rbx
   3dcaa:	pop    rbp
   3dcab:	pop    r12
   3dcad:	ret    
   3dcae:	xchg   ax,ax
   3dcb0:	push   r15
   3dcb2:	push   r14
   3dcb4:	push   r13
   3dcb6:	push   r12
   3dcb8:	mov    r12,rsi
   3dcbb:	push   rbp
   3dcbc:	push   rbx
   3dcbd:	mov    rbx,rdi
   3dcc0:	mov    edi,0x28
   3dcc5:	sub    rsp,0x78
   3dcc9:	mov    rax,QWORD PTR fs:0x28
   3dcd2:	mov    QWORD PTR [rsp+0x68],rax
   3dcd7:	xor    eax,eax
   3dcd9:	call   ce00 <g_malloc0@plt>
   3dcde:	lea    rsi,[rip+0x24ae5]        # 627ca <_fini@@Base+0x10076>
   3dce5:	xor    edx,edx
   3dce7:	mov    rdi,rbx
   3dcea:	mov    rbp,rax
   3dced:	call   32ab0 <g_str_equal@plt+0x257f0>
   3dcf2:	test   eax,eax
   3dcf4:	je     3dd40 <g_str_equal@plt+0x30a80>
   3dcf6:	cmp    BYTE PTR [rbx+0x5],0x0
   3dcfa:	je     3de00 <g_str_equal@plt+0x30b40>
   3dd00:	lea    rdi,[rbx+0x5]
   3dd04:	mov    DWORD PTR [rbp+0x0],0x1
   3dd0b:	call   c370 <g_strdup@plt>
   3dd10:	mov    QWORD PTR [rbp+0x8],rax
   3dd14:	mov    rcx,QWORD PTR [rsp+0x68]
   3dd19:	xor    rcx,QWORD PTR fs:0x28
   3dd22:	mov    rax,rbp
   3dd25:	jne    3dede <g_str_equal@plt+0x30c1e>
   3dd2b:	add    rsp,0x78
   3dd2f:	pop    rbx
   3dd30:	pop    rbp
   3dd31:	pop    r12
   3dd33:	pop    r13
   3dd35:	pop    r14
   3dd37:	pop    r15
   3dd39:	ret    
   3dd3a:	nop    WORD PTR [rax+rax*1+0x0]
   3dd40:	lea    rsi,[rip+0x24aa5]        # 627ec <_fini@@Base+0x10098>
   3dd47:	xor    edx,edx
   3dd49:	mov    rdi,rbx
   3dd4c:	call   32ab0 <g_str_equal@plt+0x257f0>
   3dd51:	test   eax,eax
   3dd53:	je     3dd78 <g_str_equal@plt+0x30ab8>
   3dd55:	cmp    BYTE PTR [rbx+0x3],0x0
   3dd59:	je     3de60 <g_str_equal@plt+0x30ba0>
   3dd5f:	lea    rdi,[rbx+0x3]
   3dd63:	mov    DWORD PTR [rbp+0x0],0x3
   3dd6a:	call   c370 <g_strdup@plt>
   3dd6f:	mov    QWORD PTR [rbp+0x8],rax
   3dd73:	jmp    3dd14 <g_str_equal@plt+0x30a54>
   3dd75:	nop    DWORD PTR [rax]
   3dd78:	lea    rsi,[rip+0x24a71]        # 627f0 <_fini@@Base+0x1009c>
   3dd7f:	xor    edx,edx
   3dd81:	mov    rdi,rbx
   3dd84:	call   32ab0 <g_str_equal@plt+0x257f0>
   3dd89:	test   eax,eax
   3dd8b:	je     3de38 <g_str_equal@plt+0x30b78>
   3dd91:	lea    r15,[rbx+0x6]
   3dd95:	lea    r13,[rsp+0x40]
   3dd9a:	lea    r14,[rsp+0x10]
   3dd9f:	lea    r8,[rsp+0xc]
   3dda4:	lea    rsi,[rip+0x24a4c]        # 627f7 <_fini@@Base+0x100a3>
   3ddab:	xor    eax,eax
   3ddad:	mov    DWORD PTR [rbp+0x0],0x2
   3ddb4:	mov    rcx,r13
   3ddb7:	mov    rdx,r14
   3ddba:	mov    rdi,r15
   3ddbd:	call   c920 <sscanf@plt>
   3ddc2:	cmp    eax,0x2
   3ddc5:	jne    3deb2 <g_str_equal@plt+0x30bf2>
   3ddcb:	movsxd rax,DWORD PTR [rsp+0xc]
   3ddd0:	cmp    BYTE PTR [rbx+rax*1+0x6],0x0
   3ddd5:	jne    3de86 <g_str_equal@plt+0x30bc6>
   3dddb:	mov    rdi,r14
   3ddde:	call   c370 <g_strdup@plt>
   3dde3:	mov    rdi,r13
   3dde6:	mov    QWORD PTR [rbp+0x8],rax
   3ddea:	call   c370 <g_strdup@plt>
   3ddef:	mov    QWORD PTR [rbp+0x10],rax
   3ddf3:	jmp    3dd14 <g_str_equal@plt+0x30a54>
   3ddf8:	nop    DWORD PTR [rax+rax*1+0x0]
   3de00:	lea    r8,[rip+0x249c9]        # 627d0 <_fini@@Base+0x1007c>
   3de07:	lea    rcx,[rip+0x24e82]        # 62c90 <_fini@@Base+0x1053c>
   3de0e:	lea    rsi,[rip+0x24a6b]        # 62880 <_fini@@Base+0x1012c>
   3de15:	mov    edx,0x3f5
   3de1a:	mov    rdi,r12
   3de1d:	xor    eax,eax
   3de1f:	call   3a090 <g_str_equal@plt+0x2cdd0>
   3de24:	mov    rdi,rbp
   3de27:	xor    ebp,ebp
   3de29:	call   24660 <g_str_equal@plt+0x173a0>
   3de2e:	jmp    3dd14 <g_str_equal@plt+0x30a54>
   3de33:	nop    DWORD PTR [rax+rax*1+0x0]
   3de38:	lea    rdi,[rbp+0x8]
   3de3c:	mov    DWORD PTR [rbp+0x0],0x0
   3de43:	mov    rdx,r12
   3de46:	mov    rsi,rbx
   3de49:	call   3d8c0 <g_str_equal@plt+0x30600>
   3de4e:	test   eax,eax
   3de50:	je     3dd14 <g_str_equal@plt+0x30a54>
   3de56:	jmp    3de24 <g_str_equal@plt+0x30b64>
   3de58:	nop    DWORD PTR [rax+rax*1+0x0]
   3de60:	lea    r8,[rip+0x24be1]        # 62a48 <_fini@@Base+0x102f4>
   3de67:	lea    rcx,[rip+0x24e22]        # 62c90 <_fini@@Base+0x1053c>
   3de6e:	lea    rsi,[rip+0x24a0b]        # 62880 <_fini@@Base+0x1012c>
   3de75:	mov    edx,0x3fd
   3de7a:	mov    rdi,r12
   3de7d:	xor    eax,eax
   3de7f:	call   3a090 <g_str_equal@plt+0x2cdd0>
   3de84:	jmp    3de24 <g_str_equal@plt+0x30b64>
   3de86:	lea    r8,[rip+0x24bdb]        # 62a68 <_fini@@Base+0x10314>
   3de8d:	lea    rcx,[rip+0x24dec]        # 62c80 <_fini@@Base+0x1052c>
   3de94:	lea    rsi,[rip+0x249e5]        # 62880 <_fini@@Base+0x1012c>
   3de9b:	mov    r9,r15
   3de9e:	mov    edx,0x315
   3dea3:	mov    rdi,r12
   3dea6:	xor    eax,eax
   3dea8:	call   3a090 <g_str_equal@plt+0x2cdd0>
   3dead:	jmp    3de24 <g_str_equal@plt+0x30b64>
   3deb2:	lea    r8,[rip+0x248c0]        # 62779 <_fini@@Base+0x10025>
   3deb9:	lea    rcx,[rip+0x24dc0]        # 62c80 <_fini@@Base+0x1052c>
   3dec0:	lea    rsi,[rip+0x249b9]        # 62880 <_fini@@Base+0x1012c>
   3dec7:	mov    r9,r15
   3deca:	mov    edx,0x311
   3decf:	mov    rdi,r12
   3ded2:	xor    eax,eax
   3ded4:	call   3a090 <g_str_equal@plt+0x2cdd0>
   3ded9:	jmp    3de24 <g_str_equal@plt+0x30b64>
   3dede:	call   cd30 <__stack_chk_fail@plt>
   3dee3:	nop    DWORD PTR [rax]
   3dee6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3def0:	push   r12
   3def2:	push   rbp
   3def3:	mov    rbp,rsi
   3def6:	push   rbx
   3def7:	sub    rsp,0x20
   3defb:	mov    rax,QWORD PTR fs:0x28
   3df04:	mov    QWORD PTR [rsp+0x18],rax
   3df09:	xor    eax,eax
   3df0b:	mov    eax,DWORD PTR [rdi]
   3df0d:	cmp    eax,0x1
   3df10:	je     3e010 <g_str_equal@plt+0x30d50>
   3df16:	jb     3dff8 <g_str_equal@plt+0x30d38>
   3df1c:	cmp    eax,0x2
   3df1f:	je     3df58 <g_str_equal@plt+0x30c98>
   3df21:	cmp    eax,0x3
   3df24:	jne    3e060 <g_str_equal@plt+0x30da0>
   3df2a:	mov    rdi,QWORD PTR [rdi+0x8]
   3df2e:	call   3ccb0 <g_str_equal@plt+0x2f9f0>
   3df33:	mov    ebx,eax
   3df35:	mov    rcx,QWORD PTR [rsp+0x18]
   3df3a:	xor    rcx,QWORD PTR fs:0x28
   3df43:	mov    eax,ebx
   3df45:	jne    3e065 <g_str_equal@plt+0x30da5>
   3df4b:	add    rsp,0x20
   3df4f:	pop    rbx
   3df50:	pop    rbp
   3df51:	pop    r12
   3df53:	ret    
   3df54:	nop    DWORD PTR [rax+0x0]
   3df58:	mov    r12,rsp
   3df5b:	add    rdi,0x8
   3df5f:	mov    rdx,rsi
   3df62:	mov    rsi,r12
   3df65:	call   3cde0 <g_str_equal@plt+0x2fb20>
   3df6a:	test   al,al
   3df6c:	je     3e020 <g_str_equal@plt+0x30d60>
   3df72:	xor    edx,edx
   3df74:	mov    esi,0x1
   3df79:	mov    edi,0x28
   3df7e:	call   32520 <g_str_equal@plt+0x25260>
   3df83:	test   eax,eax
   3df85:	mov    ebx,eax
   3df87:	js     3e02a <g_str_equal@plt+0x30d6a>
   3df8d:	nop    DWORD PTR [rax]
   3df90:	mov    edx,0x10
   3df95:	mov    rsi,r12
   3df98:	mov    edi,ebx
   3df9a:	call   cb20 <connect@plt>
   3df9f:	test   eax,eax
   3dfa1:	jns    3df35 <g_str_equal@plt+0x30c75>
   3dfa3:	call   cc80 <__errno_location@plt>
   3dfa8:	mov    r8d,DWORD PTR [rax]
   3dfab:	mov    eax,r8d
   3dfae:	neg    eax
   3dfb0:	cmp    eax,0xfffffffc
   3dfb3:	je     3df90 <g_str_equal@plt+0x30cd0>
   3dfb5:	test   eax,eax
   3dfb7:	jns    3df35 <g_str_equal@plt+0x30c75>
   3dfbd:	lea    r9,[rip+0x24776]        # 6273a <_fini@@Base+0xffe6>
   3dfc4:	lea    rcx,[rip+0x24c65]        # 62c30 <_fini@@Base+0x104dc>
   3dfcb:	lea    rsi,[rip+0x248ae]        # 62880 <_fini@@Base+0x1012c>
   3dfd2:	mov    edx,0x2d5
   3dfd7:	mov    rdi,rbp
   3dfda:	xor    eax,eax
   3dfdc:	call   3a140 <g_str_equal@plt+0x2ce80>
   3dfe1:	mov    edi,ebx
   3dfe3:	mov    ebx,0xffffffff
   3dfe8:	call   c230 <close@plt>
   3dfed:	jmp    3df35 <g_str_equal@plt+0x30c75>
   3dff2:	nop    WORD PTR [rax+rax*1+0x0]
   3dff8:	add    rdi,0x8
   3dffc:	call   3d600 <g_str_equal@plt+0x30340>
   3e001:	mov    ebx,eax
   3e003:	jmp    3df35 <g_str_equal@plt+0x30c75>
   3e008:	nop    DWORD PTR [rax+rax*1+0x0]
   3e010:	add    rdi,0x8
   3e014:	call   3cfe0 <g_str_equal@plt+0x2fd20>
   3e019:	mov    ebx,eax
   3e01b:	jmp    3df35 <g_str_equal@plt+0x30c75>
   3e020:	mov    ebx,0xffffffff
   3e025:	jmp    3df35 <g_str_equal@plt+0x30c75>
   3e02a:	call   cc80 <__errno_location@plt>
   3e02f:	mov    r8d,DWORD PTR [rax]
   3e032:	lea    r9,[rip+0x24657]        # 62690 <_fini@@Base+0xff3c>
   3e039:	lea    rcx,[rip+0x24bf0]        # 62c30 <_fini@@Base+0x104dc>
   3e040:	lea    rsi,[rip+0x24839]        # 62880 <_fini@@Base+0x1012c>
   3e047:	mov    edx,0x2c8
   3e04c:	mov    rdi,rbp
   3e04f:	xor    eax,eax
   3e051:	mov    ebx,0xffffffff
   3e056:	call   3a140 <g_str_equal@plt+0x2ce80>
   3e05b:	jmp    3df35 <g_str_equal@plt+0x30c75>
   3e060:	call   c270 <abort@plt>
   3e065:	call   cd30 <__stack_chk_fail@plt>
   3e06a:	nop    WORD PTR [rax+rax*1+0x0]
   3e070:	push   r15
   3e072:	push   r14
   3e074:	push   r13
   3e076:	push   r12
   3e078:	mov    r12,rdi
   3e07b:	push   rbp
   3e07c:	push   rbx
   3e07d:	sub    rsp,0x138
   3e084:	mov    rax,QWORD PTR fs:0x28
   3e08d:	mov    QWORD PTR [rsp+0x128],rax
   3e095:	xor    eax,eax
   3e097:	mov    eax,DWORD PTR [rdi]
   3e099:	mov    QWORD PTR [rsp+0x18],rsi
   3e09e:	cmp    eax,0x1
   3e0a1:	je     3e3f8 <g_str_equal@plt+0x31138>
   3e0a7:	jb     3e1a8 <g_str_equal@plt+0x30ee8>
   3e0ad:	cmp    eax,0x2
   3e0b0:	je     3e100 <g_str_equal@plt+0x30e40>
   3e0b2:	cmp    eax,0x3
   3e0b5:	jne    3e702 <g_str_equal@plt+0x31442>
   3e0bb:	mov    rdi,QWORD PTR [rdi+0x8]
   3e0bf:	mov    rsi,QWORD PTR [rsp+0x18]
   3e0c4:	call   3ccb0 <g_str_equal@plt+0x2f9f0>
   3e0c9:	mov    ebx,eax
   3e0cb:	mov    rcx,QWORD PTR [rsp+0x128]
   3e0d3:	xor    rcx,QWORD PTR fs:0x28
   3e0dc:	mov    eax,ebx
   3e0de:	jne    3e6fd <g_str_equal@plt+0x3143d>
   3e0e4:	add    rsp,0x138
   3e0eb:	pop    rbx
   3e0ec:	pop    rbp
   3e0ed:	pop    r12
   3e0ef:	pop    r13
   3e0f1:	pop    r14
   3e0f3:	pop    r15
   3e0f5:	ret    
   3e0f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3e100:	lea    rbp,[rsp+0x80]
   3e108:	mov    rdx,QWORD PTR [rsp+0x18]
   3e10d:	lea    rdi,[rdi+0x8]
   3e111:	mov    rsi,rbp
   3e114:	call   3cde0 <g_str_equal@plt+0x2fb20>
   3e119:	test   al,al
   3e11b:	je     3e198 <g_str_equal@plt+0x30ed8>
   3e11d:	xor    edx,edx
   3e11f:	mov    esi,0x1
   3e124:	mov    edi,0x28
   3e129:	call   32520 <g_str_equal@plt+0x25260>
   3e12e:	test   eax,eax
   3e130:	mov    ebx,eax
   3e132:	js     3e695 <g_str_equal@plt+0x313d5>
   3e138:	mov    edx,0x10
   3e13d:	mov    rsi,rbp
   3e140:	mov    edi,eax
   3e142:	call   d080 <bind@plt>
   3e147:	test   eax,eax
   3e149:	jne    3e619 <g_str_equal@plt+0x31359>
   3e14f:	mov    esi,0x1
   3e154:	mov    edi,ebx
   3e156:	call   c7f0 <listen@plt>
   3e15b:	test   eax,eax
   3e15d:	je     3e0cb <g_str_equal@plt+0x30e0b>
   3e163:	call   cc80 <__errno_location@plt>
   3e168:	mov    r8d,DWORD PTR [rax]
   3e16b:	lea    r9,[rip+0x24597]        # 62709 <_fini@@Base+0xffb5>
   3e172:	lea    rcx,[rip+0x24a77]        # 62bf0 <_fini@@Base+0x1049c>
   3e179:	mov    edx,0x302
   3e17e:	mov    rdi,QWORD PTR [rsp+0x18]
   3e183:	lea    rsi,[rip+0x246f6]        # 62880 <_fini@@Base+0x1012c>
   3e18a:	xor    eax,eax
   3e18c:	call   3a140 <g_str_equal@plt+0x2ce80>
   3e191:	mov    edi,ebx
   3e193:	call   c230 <close@plt>
   3e198:	mov    ebx,0xffffffff
   3e19d:	jmp    3e0cb <g_str_equal@plt+0x30e0b>
   3e1a2:	nop    WORD PTR [rax+rax*1+0x0]
   3e1a8:	cmp    BYTE PTR [r12+0x18],0x0
   3e1ae:	pxor   xmm0,xmm0
   3e1b2:	lea    rbx,[rsp+0x50]
   3e1b7:	lea    rdi,[rdi+0x8]
   3e1bb:	mov    QWORD PTR [rsp+0x48],0x0
   3e1c4:	mov    DWORD PTR [rsp+0x50],0x1
   3e1cc:	movups XMMWORD PTR [rsp+0x54],xmm0
   3e1d1:	mov    QWORD PTR [rbx+0x24],0x0
   3e1d9:	mov    DWORD PTR [rbx+0x2c],0x0
   3e1e0:	movups XMMWORD PTR [rbx+0x14],xmm0
   3e1e4:	jne    3e40d <g_str_equal@plt+0x3114d>
   3e1ea:	lea    rsi,[rsp+0x48]
   3e1ef:	call   3d530 <g_str_equal@plt+0x30270>
   3e1f4:	mov    rsi,QWORD PTR [rsp+0x48]
   3e1f9:	mov    DWORD PTR [rsp+0x54],eax
   3e1fd:	mov    DWORD PTR [rsp+0x58],0x1
   3e205:	test   rsi,rsi
   3e208:	jne    3e639 <g_str_equal@plt+0x31379>
   3e20e:	mov    rdi,QWORD PTR [r12+0x8]
   3e213:	test   rdi,rdi
   3e216:	je     3e6cd <g_str_equal@plt+0x3140d>
   3e21c:	mov    rdx,QWORD PTR [r12+0x10]
   3e221:	test   rdx,rdx
   3e224:	je     3e426 <g_str_equal@plt+0x31166>
   3e22a:	lea    rbp,[rsp+0x90]
   3e232:	mov    esi,0x21
   3e237:	mov    rdi,rbp
   3e23a:	call   329f0 <g_str_equal@plt+0x25730>
   3e23f:	cmp    BYTE PTR [rsp+0x90],0x0
   3e247:	mov    rdi,QWORD PTR [r12+0x8]
   3e24c:	je     3e612 <g_str_equal@plt+0x31352>
   3e252:	mov    rsi,rbp
   3e255:	cmp    BYTE PTR [rdi],0x0
   3e258:	mov    eax,0x0
   3e25d:	lea    rcx,[rsp+0x40]
   3e262:	mov    rdx,rbx
   3e265:	cmove  rdi,rax
   3e269:	call   c3b0 <getaddrinfo@plt>
   3e26e:	test   eax,eax
   3e270:	jne    3e64d <g_str_equal@plt+0x3138d>
   3e276:	mov    r15,QWORD PTR [rsp+0x40]
   3e27b:	test   r15,r15
   3e27e:	je     3e606 <g_str_equal@plt+0x31346>
   3e284:	lea    rax,[rsp+0xc0]
   3e28c:	mov    BYTE PTR [rsp+0x17],0x0
   3e291:	mov    QWORD PTR [rsp+0x20],rax
   3e296:	lea    rax,[rsp+0xf0]
   3e29e:	mov    QWORD PTR [rsp+0x28],rax
   3e2a3:	lea    rax,[rsp+0x3c]
   3e2a8:	mov    QWORD PTR [rsp+0x8],rax
   3e2ad:	sub    rsp,0x8
   3e2b1:	mov    rdi,QWORD PTR [r15+0x18]
   3e2b5:	mov    esi,DWORD PTR [r15+0x10]
   3e2b9:	push   0x3
   3e2bb:	mov    r8,QWORD PTR [rsp+0x30]
   3e2c0:	mov    ecx,0x2e
   3e2c5:	mov    rdx,QWORD PTR [rsp+0x38]
   3e2ca:	mov    r9d,0x20
   3e2d0:	call   cd50 <getnameinfo@plt>
   3e2d5:	mov    edi,DWORD PTR [r15+0x4]
   3e2d9:	pop    rdx
   3e2da:	pop    rcx
   3e2db:	cmp    edi,0x2
   3e2de:	je     3e530 <g_str_equal@plt+0x31270>
   3e2e4:	cmp    edi,0xa
   3e2e7:	je     3e530 <g_str_equal@plt+0x31270>
   3e2ed:	cmp    BYTE PTR [r12+0x1a],0x0
   3e2f3:	jne    3e5c9 <g_str_equal@plt+0x31309>
   3e2f9:	mov    DWORD PTR [rsp],0x0
   3e300:	xor    r13d,r13d
   3e303:	nop    DWORD PTR [rax+rax*1+0x0]
   3e308:	mov    ebp,DWORD PTR [rsp]
   3e30b:	jmp    3e329 <g_str_equal@plt+0x31069>
   3e30d:	nop    DWORD PTR [rax]
   3e310:	cmp    DWORD PTR [rsp],ebp
   3e313:	jne    3e571 <g_str_equal@plt+0x312b1>
   3e319:	add    ebp,0x1
   3e31c:	cmp    ebp,r13d
   3e31f:	jg     3e46b <g_str_equal@plt+0x311ab>
   3e325:	mov    edi,DWORD PTR [r15+0x4]
   3e329:	cmp    edi,0x2
   3e32c:	je     3e333 <g_str_equal@plt+0x31073>
   3e32e:	cmp    edi,0xa
   3e331:	jne    3e345 <g_str_equal@plt+0x31085>
   3e333:	mov    rdx,QWORD PTR [r15+0x18]
   3e337:	mov    eax,ebp
   3e339:	ror    ax,0x8
   3e33d:	mov    WORD PTR [rdx+0x2],ax
   3e341:	mov    edi,DWORD PTR [r15+0x4]
   3e345:	mov    edx,DWORD PTR [r15+0xc]
   3e349:	mov    esi,DWORD PTR [r15+0x8]
   3e34d:	call   32520 <g_str_equal@plt+0x25260>
   3e352:	test   eax,eax
   3e354:	mov    ebx,eax
   3e356:	js     3e310 <g_str_equal@plt+0x31050>
   3e358:	mov    edi,eax
   3e35a:	call   38140 <g_str_equal@plt+0x2ae80>
   3e35f:	cmp    BYTE PTR [r12+0x1e],0x0
   3e365:	je     3e4b0 <g_str_equal@plt+0x311f0>
   3e36b:	cmp    BYTE PTR [r12+0x1f],0x0
   3e371:	mov    eax,0x1
   3e376:	je     3e390 <g_str_equal@plt+0x310d0>
   3e378:	cmp    BYTE PTR [r12+0x20],0x0
   3e37e:	je     3e390 <g_str_equal@plt+0x310d0>
   3e380:	movzx  eax,BYTE PTR [r12+0x21]
   3e386:	xor    eax,0x1
   3e389:	movzx  eax,al
   3e38c:	nop    DWORD PTR [rax+0x0]
   3e390:	cmp    DWORD PTR [r15+0x4],0xa
   3e395:	mov    DWORD PTR [rsp+0x3c],eax
   3e399:	je     3e3d6 <g_str_equal@plt+0x31116>
   3e39b:	mov    edx,DWORD PTR [r15+0x10]
   3e39f:	mov    rsi,QWORD PTR [r15+0x18]
   3e3a3:	mov    edi,ebx
   3e3a5:	call   d080 <bind@plt>
   3e3aa:	test   eax,eax
   3e3ac:	mov    r14d,eax
   3e3af:	je     3e4c0 <g_str_equal@plt+0x31200>
   3e3b5:	cmp    DWORD PTR [r15+0x4],0xa
   3e3ba:	jne    3e438 <g_str_equal@plt+0x31178>
   3e3bc:	call   cc80 <__errno_location@plt>
   3e3c1:	cmp    DWORD PTR [rax],0x62
   3e3c4:	jne    3e438 <g_str_equal@plt+0x31178>
   3e3c6:	mov    eax,DWORD PTR [rsp+0x3c]
   3e3ca:	test   eax,eax
   3e3cc:	jne    3e438 <g_str_equal@plt+0x31178>
   3e3ce:	mov    DWORD PTR [rsp+0x3c],0x1
   3e3d6:	mov    rcx,QWORD PTR [rsp+0x8]
   3e3db:	mov    r8d,0x4
   3e3e1:	mov    edx,0x1a
   3e3e6:	mov    esi,0x29
   3e3eb:	mov    edi,ebx
   3e3ed:	call   c540 <setsockopt@plt>
   3e3f2:	jmp    3e39b <g_str_equal@plt+0x310db>
   3e3f4:	nop    DWORD PTR [rax+0x0]
   3e3f8:	mov    rsi,QWORD PTR [rsp+0x18]
   3e3fd:	lea    rdi,[rdi+0x8]
   3e401:	call   3d1c0 <g_str_equal@plt+0x2ff00>
   3e406:	mov    ebx,eax
   3e408:	jmp    3e0cb <g_str_equal@plt+0x30e0b>
   3e40d:	cmp    BYTE PTR [r12+0x19],0x0
   3e413:	je     3e1ea <g_str_equal@plt+0x30f2a>
   3e419:	mov    DWORD PTR [rsp+0x50],0x405
   3e421:	jmp    3e1ea <g_str_equal@plt+0x30f2a>
   3e426:	mov    BYTE PTR [rsp+0x90],0x0
   3e42e:	xor    esi,esi
   3e430:	jmp    3e255 <g_str_equal@plt+0x30f95>
   3e435:	nop    DWORD PTR [rax]
   3e438:	test   r14d,r14d
   3e43b:	jns    3e4c0 <g_str_equal@plt+0x31200>
   3e441:	call   cc80 <__errno_location@plt>
   3e446:	mov    r8d,DWORD PTR [rax]
   3e449:	cmp    r8d,0x62
   3e44d:	jne    3e5db <g_str_equal@plt+0x3131b>
   3e453:	mov    edi,ebx
   3e455:	add    ebp,0x1
   3e458:	call   c230 <close@plt>
   3e45d:	cmp    ebp,r13d
   3e460:	mov    BYTE PTR [rsp+0x17],0x1
   3e465:	jle    3e325 <g_str_equal@plt+0x31065>
   3e46b:	mov    r15,QWORD PTR [r15+0x28]
   3e46f:	test   r15,r15
   3e472:	jne    3e2ad <g_str_equal@plt+0x30fed>
   3e478:	cmp    BYTE PTR [rsp+0x17],0x0
   3e47d:	je     3e606 <g_str_equal@plt+0x31346>
   3e483:	lea    rbx,[rip+0x24606]        # 62a90 <_fini@@Base+0x1033c>
   3e48a:	call   cc80 <__errno_location@plt>
   3e48f:	mov    r9,rbx
   3e492:	mov    r8d,DWORD PTR [rax]
   3e495:	mov    QWORD PTR [rsp],rax
   3e499:	lea    rcx,[rip+0x24770]        # 62c10 <_fini@@Base+0x104bc>
   3e4a0:	mov    edx,0x145
   3e4a5:	jmp    3e590 <g_str_equal@plt+0x312d0>
   3e4aa:	nop    WORD PTR [rax+rax*1+0x0]
   3e4b0:	movzx  eax,BYTE PTR [r12+0x20]
   3e4b6:	jmp    3e390 <g_str_equal@plt+0x310d0>
   3e4bb:	nop    DWORD PTR [rax+rax*1+0x0]
   3e4c0:	mov    esi,0x1
   3e4c5:	mov    edi,ebx
   3e4c7:	call   c7f0 <listen@plt>
   3e4cc:	test   eax,eax
   3e4ce:	je     3e5f7 <g_str_equal@plt+0x31337>
   3e4d4:	call   cc80 <__errno_location@plt>
   3e4d9:	mov    r8d,DWORD PTR [rax]
   3e4dc:	cmp    r8d,0x62
   3e4e0:	je     3e453 <g_str_equal@plt+0x31193>
   3e4e6:	lea    r9,[rip+0x2421c]        # 62709 <_fini@@Base+0xffb5>
   3e4ed:	lea    rcx,[rip+0x2471c]        # 62c10 <_fini@@Base+0x104bc>
   3e4f4:	mov    QWORD PTR [rsp],rax
   3e4f8:	mov    edx,0x135
   3e4fd:	mov    rdi,QWORD PTR [rsp+0x18]
   3e502:	lea    rsi,[rip+0x24377]        # 62880 <_fini@@Base+0x1012c>
   3e509:	xor    eax,eax
   3e50b:	call   3a140 <g_str_equal@plt+0x2ce80>
   3e510:	mov    r11,QWORD PTR [rsp]
   3e514:	mov    edi,ebx
   3e516:	mov    ebp,DWORD PTR [r11]
   3e519:	mov    QWORD PTR [rsp],r11
   3e51d:	call   c230 <close@plt>
   3e522:	mov    r11,QWORD PTR [rsp]
   3e526:	jmp    3e5aa <g_str_equal@plt+0x312ea>
   3e52b:	nop    DWORD PTR [rax+rax*1+0x0]
   3e530:	mov    rax,QWORD PTR [r15+0x18]
   3e534:	movzx  r14d,WORD PTR [rax+0x2]
   3e539:	ror    r14w,0x8
   3e53e:	cmp    BYTE PTR [r12+0x1a],0x0
   3e544:	movzx  eax,r14w
   3e548:	mov    DWORD PTR [rsp],eax
   3e54b:	je     3e568 <g_str_equal@plt+0x312a8>
   3e54d:	movzx  r13d,WORD PTR [r12+0x1c]
   3e553:	cmp    r13d,DWORD PTR [rsp]
   3e557:	jge    3e308 <g_str_equal@plt+0x31048>
   3e55d:	jmp    3e46b <g_str_equal@plt+0x311ab>
   3e562:	nop    WORD PTR [rax+rax*1+0x0]
   3e568:	mov    r13d,DWORD PTR [rsp]
   3e56c:	jmp    3e308 <g_str_equal@plt+0x31048>
   3e571:	call   cc80 <__errno_location@plt>
   3e576:	mov    r8d,DWORD PTR [rax]
   3e579:	lea    r9,[rip+0x24538]        # 62ab8 <_fini@@Base+0x10364>
   3e580:	lea    rcx,[rip+0x24689]        # 62c10 <_fini@@Base+0x104bc>
   3e587:	mov    QWORD PTR [rsp],rax
   3e58b:	mov    edx,0x124
   3e590:	mov    rdi,QWORD PTR [rsp+0x18]
   3e595:	lea    rsi,[rip+0x242e4]        # 62880 <_fini@@Base+0x1012c>
   3e59c:	xor    eax,eax
   3e59e:	call   3a140 <g_str_equal@plt+0x2ce80>
   3e5a3:	mov    r11,QWORD PTR [rsp]
   3e5a7:	mov    ebp,DWORD PTR [r11]
   3e5aa:	mov    rdi,QWORD PTR [rsp+0x40]
   3e5af:	mov    QWORD PTR [rsp],r11
   3e5b3:	mov    ebx,0xffffffff
   3e5b8:	call   c6e0 <freeaddrinfo@plt>
   3e5bd:	mov    r11,QWORD PTR [rsp]
   3e5c1:	mov    DWORD PTR [r11],ebp
   3e5c4:	jmp    3e0cb <g_str_equal@plt+0x30e0b>
   3e5c9:	movzx  r13d,WORD PTR [r12+0x1c]
   3e5cf:	mov    DWORD PTR [rsp],0x0
   3e5d6:	jmp    3e308 <g_str_equal@plt+0x31048>
   3e5db:	mov    QWORD PTR [rsp],rax
   3e5df:	lea    r9,[rip+0x2423d]        # 62823 <_fini@@Base+0x100cf>
   3e5e6:	lea    rcx,[rip+0x24623]        # 62c10 <_fini@@Base+0x104bc>
   3e5ed:	mov    edx,0x12d
   3e5f2:	jmp    3e4fd <g_str_equal@plt+0x3123d>
   3e5f7:	mov    rdi,QWORD PTR [rsp+0x40]
   3e5fc:	call   c6e0 <freeaddrinfo@plt>
   3e601:	jmp    3e0cb <g_str_equal@plt+0x30e0b>
   3e606:	lea    rbx,[rip+0x241fc]        # 62809 <_fini@@Base+0x100b5>
   3e60d:	jmp    3e48a <g_str_equal@plt+0x311ca>
   3e612:	xor    esi,esi
   3e614:	jmp    3e255 <g_str_equal@plt+0x30f95>
   3e619:	call   cc80 <__errno_location@plt>
   3e61e:	lea    r9,[rip+0x241fe]        # 62823 <_fini@@Base+0x100cf>
   3e625:	mov    r8d,DWORD PTR [rax]
   3e628:	lea    rcx,[rip+0x245c1]        # 62bf0 <_fini@@Base+0x1049c>
   3e62f:	mov    edx,0x2fc
   3e634:	jmp    3e17e <g_str_equal@plt+0x30ebe>
   3e639:	mov    rdi,QWORD PTR [rsp+0x18]
   3e63e:	mov    ebx,0xffffffff
   3e643:	call   3a4c0 <g_str_equal@plt+0x2d200>
   3e648:	jmp    3e0cb <g_str_equal@plt+0x30e0b>
   3e64d:	mov    edi,eax
   3e64f:	mov    ebx,0xffffffff
   3e654:	call   d100 <gai_strerror@plt>
   3e659:	push   rax
   3e65a:	mov    r9,QWORD PTR [r12+0x8]
   3e65f:	lea    rsi,[rip+0x2421a]        # 62880 <_fini@@Base+0x1012c>
   3e666:	lea    r8,[rip+0x1ea1b]        # 5d088 <_fini@@Base+0xa934>
   3e66d:	lea    rcx,[rip+0x2459c]        # 62c10 <_fini@@Base+0x104bc>
   3e674:	mov    edx,0x10a
   3e679:	lea    rax,[rsp+0x98]
   3e681:	push   rax
   3e682:	mov    rdi,QWORD PTR [rsp+0x28]
   3e687:	xor    eax,eax
   3e689:	call   3a090 <g_str_equal@plt+0x2cdd0>
   3e68e:	pop    rsi
   3e68f:	pop    rdi
   3e690:	jmp    3e0cb <g_str_equal@plt+0x30e0b>
   3e695:	call   cc80 <__errno_location@plt>
   3e69a:	mov    rdi,QWORD PTR [rsp+0x18]
   3e69f:	mov    r8d,DWORD PTR [rax]
   3e6a2:	lea    r9,[rip+0x23fe7]        # 62690 <_fini@@Base+0xff3c>
   3e6a9:	lea    rcx,[rip+0x24540]        # 62bf0 <_fini@@Base+0x1049c>
   3e6b0:	lea    rsi,[rip+0x241c9]        # 62880 <_fini@@Base+0x1012c>
   3e6b7:	mov    edx,0x2f7
   3e6bc:	xor    eax,eax
   3e6be:	mov    ebx,0xffffffff
   3e6c3:	call   3a140 <g_str_equal@plt+0x2ce80>
   3e6c8:	jmp    3e0cb <g_str_equal@plt+0x30e0b>
   3e6cd:	mov    rdi,QWORD PTR [rsp+0x18]
   3e6d2:	lea    r8,[rip+0x1e95b]        # 5d034 <_fini@@Base+0xa8e0>
   3e6d9:	lea    rcx,[rip+0x24530]        # 62c10 <_fini@@Base+0x104bc>
   3e6e0:	lea    rsi,[rip+0x24199]        # 62880 <_fini@@Base+0x1012c>
   3e6e7:	mov    edx,0xeb
   3e6ec:	xor    eax,eax
   3e6ee:	mov    ebx,0xffffffff
   3e6f3:	call   3a090 <g_str_equal@plt+0x2cdd0>
   3e6f8:	jmp    3e0cb <g_str_equal@plt+0x30e0b>
   3e6fd:	call   cd30 <__stack_chk_fail@plt>
   3e702:	call   c270 <abort@plt>
   3e707:	nop    WORD PTR [rax+rax*1+0x0]
   3e710:	push   r14
   3e712:	push   r13
   3e714:	push   r12
   3e716:	push   rbp
   3e717:	mov    r12,rdx
   3e71a:	push   rbx
   3e71b:	sub    rsp,0x60
   3e71f:	mov    ecx,DWORD PTR [rdi]
   3e721:	mov    rax,QWORD PTR fs:0x28
   3e72a:	mov    QWORD PTR [rsp+0x58],rax
   3e72f:	xor    eax,eax
   3e731:	test   ecx,ecx
   3e733:	jne    3ea34 <g_str_equal@plt+0x31774>
   3e739:	pxor   xmm0,xmm0
   3e73d:	test   rsi,rsi
   3e740:	lea    r13,[rsp+0x20]
   3e745:	lea    rbp,[rsi+0x8]
   3e749:	mov    rbx,rdi
   3e74c:	lea    rsi,[rsp+0x18]
   3e751:	lea    rdi,[rdi+0x8]
   3e755:	mov    QWORD PTR [rsp+0x8],0x0
   3e75e:	mov    QWORD PTR [rsp+0x10],0x0
   3e767:	movups XMMWORD PTR [rsp+0x24],xmm0
   3e76c:	cmove  rbp,rax
   3e770:	mov    QWORD PTR [rsp+0x18],0x0
   3e779:	mov    QWORD PTR [r13+0x24],0x0
   3e781:	movups XMMWORD PTR [r13+0x14],xmm0
   3e786:	mov    DWORD PTR [r13+0x2c],0x0
   3e78e:	mov    DWORD PTR [rsp+0x20],0x2a
   3e796:	call   3d530 <g_str_equal@plt+0x30270>
   3e79b:	mov    rsi,QWORD PTR [rsp+0x18]
   3e7a0:	mov    DWORD PTR [rsp+0x24],eax
   3e7a4:	mov    DWORD PTR [rsp+0x28],0x2
   3e7ac:	test   rsi,rsi
   3e7af:	je     3e800 <g_str_equal@plt+0x31540>
   3e7b1:	mov    rdi,r12
   3e7b4:	call   3a4c0 <g_str_equal@plt+0x2d200>
   3e7b9:	mov    rdi,QWORD PTR [rsp+0x10]
   3e7be:	test   rdi,rdi
   3e7c1:	je     3e7c8 <g_str_equal@plt+0x31508>
   3e7c3:	call   c6e0 <freeaddrinfo@plt>
   3e7c8:	mov    rdi,QWORD PTR [rsp+0x8]
   3e7cd:	mov    ebx,0xffffffff
   3e7d2:	test   rdi,rdi
   3e7d5:	je     3e7dc <g_str_equal@plt+0x3151c>
   3e7d7:	call   c6e0 <freeaddrinfo@plt>
   3e7dc:	mov    rcx,QWORD PTR [rsp+0x58]
   3e7e1:	xor    rcx,QWORD PTR fs:0x28
   3e7ea:	mov    eax,ebx
   3e7ec:	jne    3eac1 <g_str_equal@plt+0x31801>
   3e7f2:	add    rsp,0x60
   3e7f6:	pop    rbx
   3e7f7:	pop    rbp
   3e7f8:	pop    r12
   3e7fa:	pop    r13
   3e7fc:	pop    r14
   3e7fe:	ret    
   3e7ff:	nop
   3e800:	mov    r14,QWORD PTR [rbx+0x8]
   3e804:	mov    rbx,QWORD PTR [rbx+0x10]
   3e808:	test   r14,r14
   3e80b:	je     3e850 <g_str_equal@plt+0x31590>
   3e80d:	cmp    BYTE PTR [r14],0x0
   3e811:	lea    rax,[rip+0x24021]        # 62839 <_fini@@Base+0x100e5>
   3e818:	cmove  r14,rax
   3e81c:	test   rbx,rbx
   3e81f:	je     3e826 <g_str_equal@plt+0x31566>
   3e821:	cmp    BYTE PTR [rbx],0x0
   3e824:	jne    3e860 <g_str_equal@plt+0x315a0>
   3e826:	lea    r8,[rip+0x24016]        # 62843 <_fini@@Base+0x100ef>
   3e82d:	lea    rcx,[rip+0x2436c]        # 62ba0 <_fini@@Base+0x1044c>
   3e834:	lea    rsi,[rip+0x24045]        # 62880 <_fini@@Base+0x1012c>
   3e83b:	mov    edx,0x1ea
   3e840:	mov    rdi,r12
   3e843:	xor    eax,eax
   3e845:	call   3a090 <g_str_equal@plt+0x2cdd0>
   3e84a:	jmp    3e7b9 <g_str_equal@plt+0x314f9>
   3e84f:	nop
   3e850:	lea    r14,[rip+0x23fe2]        # 62839 <_fini@@Base+0x100e5>
   3e857:	jmp    3e81c <g_str_equal@plt+0x3155c>
   3e859:	nop    DWORD PTR [rax+0x0]
   3e860:	lea    rcx,[rsp+0x8]
   3e865:	mov    rdx,r13
   3e868:	mov    rsi,rbx
   3e86b:	mov    rdi,r14
   3e86e:	call   c3b0 <getaddrinfo@plt>
   3e873:	test   eax,eax
   3e875:	je     3e8b0 <g_str_equal@plt+0x315f0>
   3e877:	mov    edi,eax
   3e879:	call   d100 <gai_strerror@plt>
   3e87e:	lea    r8,[rip+0x1e803]        # 5d088 <_fini@@Base+0xa934>
   3e885:	push   rax
   3e886:	lea    rcx,[rip+0x24313]        # 62ba0 <_fini@@Base+0x1044c>
   3e88d:	push   rbx
   3e88e:	mov    r9,r14
   3e891:	mov    edx,0x1f0
   3e896:	lea    rsi,[rip+0x23fe3]        # 62880 <_fini@@Base+0x1012c>
   3e89d:	xor    eax,eax
   3e89f:	mov    rdi,r12
   3e8a2:	call   3a090 <g_str_equal@plt+0x2cdd0>
   3e8a7:	pop    rax
   3e8a8:	pop    rdx
   3e8a9:	jmp    3e7b9 <g_str_equal@plt+0x314f9>
   3e8ae:	xchg   ax,ax
   3e8b0:	pxor   xmm0,xmm0
   3e8b4:	mov    rax,QWORD PTR [rsp+0x8]
   3e8b9:	test   rbp,rbp
   3e8bc:	mov    DWORD PTR [rsp+0x20],0x1
   3e8c4:	movups XMMWORD PTR [rsp+0x24],xmm0
   3e8c9:	mov    QWORD PTR [r13+0x24],0x0
   3e8d1:	mov    DWORD PTR [r13+0x2c],0x0
   3e8d9:	movups XMMWORD PTR [r13+0x14],xmm0
   3e8de:	mov    eax,DWORD PTR [rax+0x4]
   3e8e1:	mov    DWORD PTR [rsp+0x28],0x2
   3e8e9:	mov    DWORD PTR [rsp+0x24],eax
   3e8ed:	je     3e960 <g_str_equal@plt+0x316a0>
   3e8ef:	mov    r14,QWORD PTR [rbp+0x0]
   3e8f3:	mov    rbx,QWORD PTR [rbp+0x8]
   3e8f7:	test   r14,r14
   3e8fa:	je     3e909 <g_str_equal@plt+0x31649>
   3e8fc:	cmp    BYTE PTR [r14],0x0
   3e900:	mov    eax,0x0
   3e905:	cmove  r14,rax
   3e909:	test   rbx,rbx
   3e90c:	je     3e9e0 <g_str_equal@plt+0x31720>
   3e912:	cmp    BYTE PTR [rbx],0x0
   3e915:	lea    rax,[rip+0x20f58]        # 5f874 <_fini@@Base+0xd120>
   3e91c:	cmove  rbx,rax
   3e920:	lea    rcx,[rsp+0x10]
   3e925:	mov    rdx,r13
   3e928:	mov    rsi,rbx
   3e92b:	mov    rdi,r14
   3e92e:	call   c3b0 <getaddrinfo@plt>
   3e933:	test   eax,eax
   3e935:	je     3e970 <g_str_equal@plt+0x316b0>
   3e937:	mov    edi,eax
   3e939:	call   d100 <gai_strerror@plt>
   3e93e:	mov    r9,r14
   3e941:	push   rax
   3e942:	lea    r8,[rip+0x1e73f]        # 5d088 <_fini@@Base+0xa934>
   3e949:	push   rbx
   3e94a:	lea    rcx,[rip+0x2424f]        # 62ba0 <_fini@@Base+0x1044c>
   3e951:	mov    edx,0x20a
   3e956:	jmp    3e896 <g_str_equal@plt+0x315d6>
   3e95b:	nop    DWORD PTR [rax+rax*1+0x0]
   3e960:	lea    rbx,[rip+0x20f0d]        # 5f874 <_fini@@Base+0xd120>
   3e967:	xor    r14d,r14d
   3e96a:	jmp    3e920 <g_str_equal@plt+0x31660>
   3e96c:	nop    DWORD PTR [rax+0x0]
   3e970:	mov    rax,QWORD PTR [rsp+0x8]
   3e975:	mov    edx,DWORD PTR [rax+0xc]
   3e978:	mov    esi,DWORD PTR [rax+0x8]
   3e97b:	mov    edi,DWORD PTR [rax+0x4]
   3e97e:	call   32520 <g_str_equal@plt+0x25260>
   3e983:	test   eax,eax
   3e985:	mov    ebx,eax
   3e987:	js     3e9f0 <g_str_equal@plt+0x31730>
   3e989:	mov    edi,eax
   3e98b:	call   38140 <g_str_equal@plt+0x2ae80>
   3e990:	mov    rax,QWORD PTR [rsp+0x10]
   3e995:	mov    edi,ebx
   3e997:	mov    edx,DWORD PTR [rax+0x10]
   3e99a:	mov    rsi,QWORD PTR [rax+0x18]
   3e99e:	call   d080 <bind@plt>
   3e9a3:	test   eax,eax
   3e9a5:	js     3ea62 <g_str_equal@plt+0x317a2>
   3e9ab:	mov    rax,QWORD PTR [rsp+0x8]
   3e9b0:	mov    edi,ebx
   3e9b2:	mov    edx,DWORD PTR [rax+0x10]
   3e9b5:	mov    rsi,QWORD PTR [rax+0x18]
   3e9b9:	call   cb20 <connect@plt>
   3e9be:	test   eax,eax
   3e9c0:	js     3ea90 <g_str_equal@plt+0x317d0>
   3e9c6:	mov    rdi,QWORD PTR [rsp+0x10]
   3e9cb:	call   c6e0 <freeaddrinfo@plt>
   3e9d0:	mov    rdi,QWORD PTR [rsp+0x8]
   3e9d5:	call   c6e0 <freeaddrinfo@plt>
   3e9da:	jmp    3e7dc <g_str_equal@plt+0x3151c>
   3e9df:	nop
   3e9e0:	lea    rbx,[rip+0x20e8d]        # 5f874 <_fini@@Base+0xd120>
   3e9e7:	jmp    3e920 <g_str_equal@plt+0x31660>
   3e9ec:	nop    DWORD PTR [rax+0x0]
   3e9f0:	call   cc80 <__errno_location@plt>
   3e9f5:	mov    r8d,DWORD PTR [rax]
   3e9f8:	lea    r9,[rip+0x23c91]        # 62690 <_fini@@Base+0xff3c>
   3e9ff:	lea    rcx,[rip+0x2419a]        # 62ba0 <_fini@@Base+0x1044c>
   3ea06:	lea    rsi,[rip+0x23e73]        # 62880 <_fini@@Base+0x1012c>
   3ea0d:	xor    eax,eax
   3ea0f:	mov    edx,0x211
   3ea14:	mov    rdi,r12
   3ea17:	call   3a140 <g_str_equal@plt+0x2ce80>
   3ea1c:	cmp    ebx,0xffffffff
   3ea1f:	je     3e7b9 <g_str_equal@plt+0x314f9>
   3ea25:	nop    DWORD PTR [rax]
   3ea28:	mov    edi,ebx
   3ea2a:	call   c230 <close@plt>
   3ea2f:	jmp    3e7b9 <g_str_equal@plt+0x314f9>
   3ea34:	lea    r8,[rip+0x240ad]        # 62ae8 <_fini@@Base+0x10394>
   3ea3b:	lea    rcx,[rip+0x24176]        # 62bb8 <_fini@@Base+0x10464>
   3ea42:	lea    rsi,[rip+0x23e37]        # 62880 <_fini@@Base+0x1012c>
   3ea49:	mov    edx,0x487
   3ea4e:	mov    rdi,r12
   3ea51:	xor    eax,eax
   3ea53:	call   3a090 <g_str_equal@plt+0x2cdd0>
   3ea58:	mov    ebx,0xffffffff
   3ea5d:	jmp    3e7dc <g_str_equal@plt+0x3151c>
   3ea62:	call   cc80 <__errno_location@plt>
   3ea67:	mov    r8d,DWORD PTR [rax]
   3ea6a:	lea    r9,[rip+0x23db2]        # 62823 <_fini@@Base+0x100cf>
   3ea71:	lea    rcx,[rip+0x24128]        # 62ba0 <_fini@@Base+0x1044c>
   3ea78:	lea    rsi,[rip+0x23e01]        # 62880 <_fini@@Base+0x1012c>
   3ea7f:	mov    edx,0x218
   3ea84:	mov    rdi,r12
   3ea87:	xor    eax,eax
   3ea89:	call   3a140 <g_str_equal@plt+0x2ce80>
   3ea8e:	jmp    3ea28 <g_str_equal@plt+0x31768>
   3ea90:	call   cc80 <__errno_location@plt>
   3ea95:	mov    r8d,DWORD PTR [rax]
   3ea98:	lea    r9,[rip+0x23c9b]        # 6273a <_fini@@Base+0xffe6>
   3ea9f:	lea    rcx,[rip+0x240fa]        # 62ba0 <_fini@@Base+0x1044c>
   3eaa6:	lea    rsi,[rip+0x23dd3]        # 62880 <_fini@@Base+0x1012c>
   3eaad:	mov    edx,0x21e
   3eab2:	mov    rdi,r12
   3eab5:	xor    eax,eax
   3eab7:	call   3a140 <g_str_equal@plt+0x2ce80>
   3eabc:	jmp    3ea28 <g_str_equal@plt+0x31768>
   3eac1:	call   cd30 <__stack_chk_fail@plt>
   3eac6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3ead0:	push   rbp
   3ead1:	push   rbx
   3ead2:	sub    rsp,0x8
   3ead6:	movzx  r9d,WORD PTR [rdi]
   3eada:	cmp    r9w,0x2
   3eadf:	je     3eb48 <g_str_equal@plt+0x31888>
   3eae1:	mov    rax,rdx
   3eae4:	mov    rbp,rdi
   3eae7:	jbe    3eb58 <g_str_equal@plt+0x31898>
   3eae9:	cmp    r9w,0xa
   3eaee:	je     3eb48 <g_str_equal@plt+0x31888>
   3eaf0:	cmp    r9w,0x28
   3eaf5:	jne    3eb90 <g_str_equal@plt+0x318d0>
   3eafb:	mov    edi,0x28
   3eb00:	call   ce00 <g_malloc0@plt>
   3eb05:	mov    esi,DWORD PTR [rbp+0x8]
   3eb08:	lea    rdi,[rip+0x23568]        # 62077 <_fini@@Base+0xf923>
   3eb0f:	mov    rbx,rax
   3eb12:	mov    DWORD PTR [rax],0x2
   3eb18:	xor    eax,eax
   3eb1a:	call   c740 <g_strdup_printf@plt>
   3eb1f:	mov    esi,DWORD PTR [rbp+0x4]
   3eb22:	lea    rdi,[rip+0x2354e]        # 62077 <_fini@@Base+0xf923>
   3eb29:	mov    QWORD PTR [rbx+0x8],rax
   3eb2d:	xor    eax,eax
   3eb2f:	call   c740 <g_strdup_printf@plt>
   3eb34:	mov    QWORD PTR [rbx+0x10],rax
   3eb38:	add    rsp,0x8
   3eb3c:	mov    rax,rbx
   3eb3f:	pop    rbx
   3eb40:	pop    rbp
   3eb41:	ret    
   3eb42:	nop    WORD PTR [rax+rax*1+0x0]
   3eb48:	add    rsp,0x8
   3eb4c:	pop    rbx
   3eb4d:	pop    rbp
   3eb4e:	jmp    3cee0 <g_str_equal@plt+0x2fc20>
   3eb53:	nop    DWORD PTR [rax+rax*1+0x0]
   3eb58:	cmp    r9w,0x1
   3eb5d:	jne    3eb90 <g_str_equal@plt+0x318d0>
   3eb5f:	mov    edi,0x28
   3eb64:	call   ce00 <g_malloc0@plt>
   3eb69:	cmp    BYTE PTR [rbp+0x2],0x0
   3eb6d:	mov    rbx,rax
   3eb70:	mov    DWORD PTR [rax],0x1
   3eb76:	je     3eb38 <g_str_equal@plt+0x31878>
   3eb78:	lea    rdi,[rbp+0x2]
   3eb7c:	mov    esi,0x6c
   3eb81:	call   c640 <g_strndup@plt>
   3eb86:	mov    QWORD PTR [rbx+0x8],rax
   3eb8a:	jmp    3eb38 <g_str_equal@plt+0x31878>
   3eb8c:	nop    DWORD PTR [rax+0x0]
   3eb90:	lea    r8,[rip+0x23cc6]        # 6285d <_fini@@Base+0x10109>
   3eb97:	lea    rcx,[rip+0x23fe2]        # 62b80 <_fini@@Base+0x1042c>
   3eb9e:	lea    rsi,[rip+0x23cdb]        # 62880 <_fini@@Base+0x1012c>
   3eba5:	mov    rdi,rax
   3eba8:	mov    edx,0x4ef
   3ebad:	xor    eax,eax
   3ebaf:	call   3a090 <g_str_equal@plt+0x2cdd0>
   3ebb4:	xor    ebx,ebx
   3ebb6:	add    rsp,0x8
   3ebba:	mov    rax,rbx
   3ebbd:	pop    rbx
   3ebbe:	pop    rbp
   3ebbf:	ret    
   3ebc0:	push   rbp
   3ebc1:	push   rbx
   3ebc2:	mov    rbp,rsi
   3ebc5:	sub    rsp,0xa8
   3ebcc:	lea    rbx,[rsp+0x10]
   3ebd1:	lea    rdx,[rsp+0xc]
   3ebd6:	mov    DWORD PTR [rsp+0xc],0x80
   3ebde:	mov    rax,QWORD PTR fs:0x28
   3ebe7:	mov    QWORD PTR [rsp+0x98],rax
   3ebef:	xor    eax,eax
   3ebf1:	mov    rsi,rbx
   3ebf4:	call   cb10 <getsockname@plt>
   3ebf9:	test   eax,eax
   3ebfb:	js     3ec30 <g_str_equal@plt+0x31970>
   3ebfd:	mov    esi,DWORD PTR [rsp+0xc]
   3ec01:	mov    rdx,rbp
   3ec04:	mov    rdi,rbx
   3ec07:	call   3ead0 <g_str_equal@plt+0x31810>
   3ec0c:	mov    rcx,QWORD PTR [rsp+0x98]
   3ec14:	xor    rcx,QWORD PTR fs:0x28
   3ec1d:	jne    3ec6e <g_str_equal@plt+0x319ae>
   3ec1f:	add    rsp,0xa8
   3ec26:	pop    rbx
   3ec27:	pop    rbp
   3ec28:	ret    
   3ec29:	nop    DWORD PTR [rax+0x0]
   3ec30:	call   cc80 <__errno_location@plt>
   3ec35:	lea    rcx,[rip+0x1c3d4]        # 5b010 <_fini@@Base+0x88bc>
   3ec3c:	sub    rsp,0x8
   3ec40:	lea    r9,[rip+0x14147]        # 52d8e <_fini@@Base+0x63a>
   3ec47:	lea    rsi,[rip+0x23c32]        # 62880 <_fini@@Base+0x1012c>
   3ec4e:	mov    edx,0x4fd
   3ec53:	mov    rdi,rbp
   3ec56:	push   rcx
   3ec57:	mov    r8d,DWORD PTR [rax]
   3ec5a:	lea    rcx,[rip+0x23edf]        # 62b40 <_fini@@Base+0x103ec>
   3ec61:	xor    eax,eax
   3ec63:	call   3a140 <g_str_equal@plt+0x2ce80>
   3ec68:	pop    rax
   3ec69:	xor    eax,eax
   3ec6b:	pop    rdx
   3ec6c:	jmp    3ec0c <g_str_equal@plt+0x3194c>
   3ec6e:	call   cd30 <__stack_chk_fail@plt>
   3ec73:	nop    DWORD PTR [rax]
   3ec76:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3ec80:	push   rbp
   3ec81:	push   rbx
   3ec82:	mov    rbp,rsi
   3ec85:	sub    rsp,0x8
   3ec89:	call   3ebc0 <g_str_equal@plt+0x31900>
   3ec8e:	test   rax,rax
   3ec91:	je     3ed00 <g_str_equal@plt+0x31a40>
   3ec93:	cmp    DWORD PTR [rax],0x1
   3ec96:	mov    rbx,rax
   3ec99:	je     3ecb0 <g_str_equal@plt+0x319f0>
   3ec9b:	add    rsp,0x8
   3ec9f:	mov    rdi,rbx
   3eca2:	pop    rbx
   3eca3:	pop    rbp
   3eca4:	jmp    24660 <g_str_equal@plt+0x173a0>
   3eca9:	nop    DWORD PTR [rax+0x0]
   3ecb0:	mov    rdi,QWORD PTR [rax+0x8]
   3ecb4:	test   rdi,rdi
   3ecb7:	je     3ec9b <g_str_equal@plt+0x319db>
   3ecb9:	call   c4d0 <unlink@plt>
   3ecbe:	test   eax,eax
   3ecc0:	jns    3ec9b <g_str_equal@plt+0x319db>
   3ecc2:	call   cc80 <__errno_location@plt>
   3ecc7:	mov    r8d,DWORD PTR [rax]
   3ecca:	cmp    r8d,0x2
   3ecce:	je     3ec9b <g_str_equal@plt+0x319db>
   3ecd0:	sub    rsp,0x8
   3ecd4:	lea    r9,[rip+0x1c920]        # 5b5fb <_fini@@Base+0x8ea7>
   3ecdb:	push   QWORD PTR [rbx+0x8]
   3ecde:	lea    rcx,[rip+0x23eeb]        # 62bd0 <_fini@@Base+0x1047c>
   3ece5:	lea    rsi,[rip+0x23b94]        # 62880 <_fini@@Base+0x1012c>
   3ecec:	mov    edx,0x471
   3ecf1:	xor    eax,eax
   3ecf3:	mov    rdi,rbp
   3ecf6:	call   3a140 <g_str_equal@plt+0x2ce80>
   3ecfb:	pop    rax
   3ecfc:	pop    rdx
   3ecfd:	jmp    3ec9b <g_str_equal@plt+0x319db>
   3ecff:	nop
   3ed00:	add    rsp,0x8
   3ed04:	pop    rbx
   3ed05:	pop    rbp
   3ed06:	ret    
   3ed07:	nop    WORD PTR [rax+rax*1+0x0]
   3ed10:	push   rbp
   3ed11:	push   rbx
   3ed12:	mov    rbp,rsi
   3ed15:	sub    rsp,0xa8
   3ed1c:	lea    rbx,[rsp+0x10]
   3ed21:	lea    rdx,[rsp+0xc]
   3ed26:	mov    DWORD PTR [rsp+0xc],0x80
   3ed2e:	mov    rax,QWORD PTR fs:0x28
   3ed37:	mov    QWORD PTR [rsp+0x98],rax
   3ed3f:	xor    eax,eax
   3ed41:	mov    rsi,rbx
   3ed44:	call   c350 <getpeername@plt>
   3ed49:	test   eax,eax
   3ed4b:	js     3ed80 <g_str_equal@plt+0x31ac0>
   3ed4d:	mov    esi,DWORD PTR [rsp+0xc]
   3ed51:	mov    rdx,rbp
   3ed54:	mov    rdi,rbx
   3ed57:	call   3ead0 <g_str_equal@plt+0x31810>
   3ed5c:	mov    rcx,QWORD PTR [rsp+0x98]
   3ed64:	xor    rcx,QWORD PTR fs:0x28
   3ed6d:	jne    3edbe <g_str_equal@plt+0x31afe>
   3ed6f:	add    rsp,0xa8
   3ed76:	pop    rbx
   3ed77:	pop    rbp
   3ed78:	ret    
   3ed79:	nop    DWORD PTR [rax+0x0]
   3ed80:	call   cc80 <__errno_location@plt>
   3ed85:	lea    rcx,[rip+0x1c25c]        # 5afe8 <_fini@@Base+0x8894>
   3ed8c:	sub    rsp,0x8
   3ed90:	lea    r9,[rip+0x13ff7]        # 52d8e <_fini@@Base+0x63a>
   3ed97:	lea    rsi,[rip+0x23ae2]        # 62880 <_fini@@Base+0x1012c>
   3ed9e:	mov    edx,0x50c
   3eda3:	mov    rdi,rbp
   3eda6:	push   rcx
   3eda7:	mov    r8d,DWORD PTR [rax]
   3edaa:	lea    rcx,[rip+0x23d6f]        # 62b20 <_fini@@Base+0x103cc>
   3edb1:	xor    eax,eax
   3edb3:	call   3a140 <g_str_equal@plt+0x2ce80>
   3edb8:	pop    rax
   3edb9:	xor    eax,eax
   3edbb:	pop    rdx
   3edbc:	jmp    3ed5c <g_str_equal@plt+0x31a9c>
   3edbe:	call   cd30 <__stack_chk_fail@plt>
   3edc3:	nop    DWORD PTR [rax]
   3edc6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3edd0:	push   rbp
   3edd1:	push   rbx
   3edd2:	sub    rsp,0x8
   3edd6:	test   rdi,rdi
   3edd9:	je     3eec8 <g_str_equal@plt+0x31c08>
   3eddf:	mov    rbx,rdi
   3ede2:	mov    edi,0x28
   3ede7:	call   c500 <g_malloc@plt>
   3edec:	mov    rbp,rax
   3edef:	mov    eax,DWORD PTR [rbx]
   3edf1:	cmp    eax,0x1
   3edf4:	je     3ee98 <g_str_equal@plt+0x31bd8>
   3edfa:	jb     3ee38 <g_str_equal@plt+0x31b78>
   3edfc:	cmp    eax,0x2
   3edff:	je     3ee68 <g_str_equal@plt+0x31ba8>
   3ee01:	cmp    eax,0x3
   3ee04:	jne    3eecf <g_str_equal@plt+0x31c0f>
   3ee0a:	mov    rsi,QWORD PTR [rbx+0x8]
   3ee0e:	lea    rcx,[rip+0x6e9b]        # 45cb0 <g_str_equal@plt+0x389f0>
   3ee15:	lea    rdi,[rbp+0x8]
   3ee19:	mov    DWORD PTR [rbp+0x0],0x3
   3ee20:	mov    edx,0x8
   3ee25:	call   2def0 <g_str_equal@plt+0x20c30>
   3ee2a:	add    rsp,0x8
   3ee2e:	mov    rax,rbp
   3ee31:	pop    rbx
   3ee32:	pop    rbp
   3ee33:	ret    
   3ee34:	nop    DWORD PTR [rax+0x0]
   3ee38:	mov    rsi,QWORD PTR [rbx+0x8]
   3ee3c:	lea    rcx,[rip+0xfffffffffffe804d]        # 26e90 <g_str_equal@plt+0x19bd0>
   3ee43:	lea    rdi,[rbp+0x8]
   3ee47:	mov    DWORD PTR [rbp+0x0],0x0
   3ee4e:	mov    edx,0x20
   3ee53:	call   2def0 <g_str_equal@plt+0x20c30>
   3ee58:	add    rsp,0x8
   3ee5c:	mov    rax,rbp
   3ee5f:	pop    rbx
   3ee60:	pop    rbp
   3ee61:	ret    
   3ee62:	nop    WORD PTR [rax+rax*1+0x0]
   3ee68:	mov    rsi,QWORD PTR [rbx+0x8]
   3ee6c:	lea    rcx,[rip+0xfffffffffffe839d]        # 27210 <g_str_equal@plt+0x19f50>
   3ee73:	lea    rdi,[rbp+0x8]
   3ee77:	mov    DWORD PTR [rbp+0x0],0x2
   3ee7e:	mov    edx,0x10
   3ee83:	call   2def0 <g_str_equal@plt+0x20c30>
   3ee88:	add    rsp,0x8
   3ee8c:	mov    rax,rbp
   3ee8f:	pop    rbx
   3ee90:	pop    rbp
   3ee91:	ret    
   3ee92:	nop    WORD PTR [rax+rax*1+0x0]
   3ee98:	mov    rsi,QWORD PTR [rbx+0x8]
   3ee9c:	lea    rcx,[rip+0xfffffffffffe822d]        # 270d0 <g_str_equal@plt+0x19e10>
   3eea3:	lea    rdi,[rbp+0x8]
   3eea7:	mov    DWORD PTR [rbp+0x0],0x1
   3eeae:	mov    edx,0x8
   3eeb3:	call   2def0 <g_str_equal@plt+0x20c30>
   3eeb8:	add    rsp,0x8
   3eebc:	mov    rax,rbp
   3eebf:	pop    rbx
   3eec0:	pop    rbp
   3eec1:	ret    
   3eec2:	nop    WORD PTR [rax+rax*1+0x0]
   3eec8:	xor    ebp,ebp
   3eeca:	jmp    3ee2a <g_str_equal@plt+0x31b6a>
   3eecf:	call   c270 <abort@plt>
   3eed4:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3eede:	xchg   ax,ax
   3eee0:	mov    QWORD PTR [rdi],0x0
   3eee7:	ret    
   3eee8:	nop    DWORD PTR [rax+rax*1+0x0]
   3eef0:	mov    rax,QWORD PTR [rdi]
   3eef3:	test   rax,rax
   3eef6:	mov    QWORD PTR [rsi+0x8],rax
   3eefa:	je     3ef07 <g_str_equal@plt+0x31c47>
   3eefc:	mov    rax,QWORD PTR [rdi]
   3eeff:	lea    rdx,[rsi+0x8]
   3ef03:	mov    QWORD PTR [rax+0x10],rdx
   3ef07:	mov    QWORD PTR [rdi],rsi
   3ef0a:	mov    QWORD PTR [rsi+0x10],rdi
   3ef0e:	ret    
   3ef0f:	nop
   3ef10:	mov    rax,QWORD PTR [rdi+0x8]
   3ef14:	mov    rdx,QWORD PTR [rdi+0x10]
   3ef18:	test   rax,rax
   3ef1b:	je     3ef29 <g_str_equal@plt+0x31c69>
   3ef1d:	mov    QWORD PTR [rax+0x10],rdx
   3ef21:	mov    rdx,QWORD PTR [rdi+0x10]
   3ef25:	mov    rax,QWORD PTR [rdi+0x8]
   3ef29:	mov    QWORD PTR [rdx],rax
   3ef2c:	ret    
   3ef2d:	nop    DWORD PTR [rax]
   3ef30:	mov    rax,QWORD PTR [rdi]
   3ef33:	test   rax,rax
   3ef36:	je     3ef68 <g_str_equal@plt+0x31ca8>
   3ef38:	push   rbp
   3ef39:	push   rbx
   3ef3a:	mov    rbp,rsi
   3ef3d:	sub    rsp,0x8
   3ef41:	nop    DWORD PTR [rax+0x0]
   3ef48:	mov    rbx,QWORD PTR [rax+0x8]
   3ef4c:	mov    rdi,rax
   3ef4f:	mov    rsi,rbp
   3ef52:	call   QWORD PTR [rax]
   3ef54:	test   rbx,rbx
   3ef57:	mov    rax,rbx
   3ef5a:	jne    3ef48 <g_str_equal@plt+0x31c88>
   3ef5c:	add    rsp,0x8
   3ef60:	pop    rbx
   3ef61:	pop    rbp
   3ef62:	ret    
   3ef63:	nop    DWORD PTR [rax+rax*1+0x0]
   3ef68:	repz ret 
   3ef6a:	nop    WORD PTR [rax+rax*1+0x0]
   3ef70:	mov    QWORD PTR [rdi],0x0
   3ef77:	ret    
   3ef78:	nop    DWORD PTR [rax+rax*1+0x0]
   3ef80:	mov    rax,QWORD PTR [rdi]
   3ef83:	test   rax,rax
   3ef86:	mov    QWORD PTR [rsi+0x8],rax
   3ef8a:	je     3ef97 <g_str_equal@plt+0x31cd7>
   3ef8c:	mov    rax,QWORD PTR [rdi]
   3ef8f:	lea    rdx,[rsi+0x8]
   3ef93:	mov    QWORD PTR [rax+0x10],rdx
   3ef97:	mov    QWORD PTR [rdi],rsi
   3ef9a:	mov    QWORD PTR [rsi+0x10],rdi
   3ef9e:	ret    
   3ef9f:	nop
   3efa0:	mov    rax,QWORD PTR [rdi+0x8]
   3efa4:	mov    rdx,QWORD PTR [rdi+0x10]
   3efa8:	test   rax,rax
   3efab:	je     3efb9 <g_str_equal@plt+0x31cf9>
   3efad:	mov    QWORD PTR [rax+0x10],rdx
   3efb1:	mov    rdx,QWORD PTR [rdi+0x10]
   3efb5:	mov    rax,QWORD PTR [rdi+0x8]
   3efb9:	mov    QWORD PTR [rdx],rax
   3efbc:	ret    
   3efbd:	nop    DWORD PTR [rax]
   3efc0:	mov    rax,QWORD PTR [rdi]
   3efc3:	test   rax,rax
   3efc6:	je     3f010 <g_str_equal@plt+0x31d50>
   3efc8:	push   rbp
   3efc9:	push   rbx
   3efca:	mov    rbp,rsi
   3efcd:	sub    rsp,0x8
   3efd1:	jmp    3efe0 <g_str_equal@plt+0x31d20>
   3efd3:	nop    DWORD PTR [rax+rax*1+0x0]
   3efd8:	test   rbx,rbx
   3efdb:	mov    rax,rbx
   3efde:	je     3f000 <g_str_equal@plt+0x31d40>
   3efe0:	mov    rbx,QWORD PTR [rax+0x8]
   3efe4:	mov    rsi,rbp
   3efe7:	mov    rdi,rax
   3efea:	call   QWORD PTR [rax]
   3efec:	test   eax,eax
   3efee:	je     3efd8 <g_str_equal@plt+0x31d18>
   3eff0:	add    rsp,0x8
   3eff4:	pop    rbx
   3eff5:	pop    rbp
   3eff6:	ret    
   3eff7:	nop    WORD PTR [rax+rax*1+0x0]
   3f000:	add    rsp,0x8
   3f004:	xor    eax,eax
   3f006:	pop    rbx
   3f007:	pop    rbp
   3f008:	ret    
   3f009:	nop    DWORD PTR [rax+0x0]
   3f010:	xor    eax,eax
   3f012:	ret    
   3f013:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3f01d:	nop    DWORD PTR [rax]
   3f020:	push   rbx
   3f021:	mov    rax,QWORD PTR [rdi+0x28]
   3f025:	mov    rbx,rdi
   3f028:	mov    rdx,QWORD PTR [rdi+0x30]
   3f02c:	test   rax,rax
   3f02f:	jne    3f035 <g_str_equal@plt+0x31d75>
   3f031:	mov    rax,QWORD PTR [rdi+0x20]
   3f035:	mov    QWORD PTR [rax+0x30],rdx
   3f039:	mov    rax,QWORD PTR [rbx+0x30]
   3f03d:	mov    rdx,QWORD PTR [rbx+0x28]
   3f041:	mov    QWORD PTR [rax],rdx
   3f044:	mov    rdi,QWORD PTR [rbx]
   3f047:	mov    QWORD PTR [rbx+0x30],0x0
   3f04f:	call   d2b0 <g_free@plt>
   3f054:	mov    rdi,QWORD PTR [rbx+0x8]
   3f058:	call   d2b0 <g_free@plt>
   3f05d:	mov    rdi,rbx
   3f060:	pop    rbx
   3f061:	jmp    d2b0 <g_free@plt>
   3f066:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3f070:	push   r13
   3f072:	push   r12
   3f074:	push   rbp
   3f075:	push   rbx
   3f076:	mov    rbp,rdi
   3f079:	sub    rsp,0x8
   3f07d:	mov    rdi,QWORD PTR [rdi]
   3f080:	test   rdi,rdi
   3f083:	je     3f0c0 <g_str_equal@plt+0x31e00>
   3f085:	mov    r12,rsi
   3f088:	mov    rbx,rbp
   3f08b:	xor    r13d,r13d
   3f08e:	jmp    3f0a6 <g_str_equal@plt+0x31de6>
   3f090:	add    r13d,0x1
   3f094:	movsxd rbx,r13d
   3f097:	shl    rbx,0x5
   3f09b:	add    rbx,rbp
   3f09e:	mov    rdi,QWORD PTR [rbx]
   3f0a1:	test   rdi,rdi
   3f0a4:	je     3f0c0 <g_str_equal@plt+0x31e00>
   3f0a6:	mov    rsi,r12
   3f0a9:	call   cd60 <strcmp@plt>
   3f0ae:	test   eax,eax
   3f0b0:	jne    3f090 <g_str_equal@plt+0x31dd0>
   3f0b2:	add    rsp,0x8
   3f0b6:	mov    rax,rbx
   3f0b9:	pop    rbx
   3f0ba:	pop    rbp
   3f0bb:	pop    r12
   3f0bd:	pop    r13
   3f0bf:	ret    
   3f0c0:	add    rsp,0x8
   3f0c4:	xor    ebx,ebx
   3f0c6:	mov    rax,rbx
   3f0c9:	pop    rbx
   3f0ca:	pop    rbp
   3f0cb:	pop    r12
   3f0cd:	pop    r13
   3f0cf:	ret    
   3f0d0:	push   r13
   3f0d2:	push   r12
   3f0d4:	mov    r13,rdi
   3f0d7:	push   rbp
   3f0d8:	push   rbx
   3f0d9:	mov    rbx,rsi
   3f0dc:	mov    rbp,rdx
   3f0df:	xor    esi,esi
   3f0e1:	xor    edx,edx
   3f0e3:	sub    rsp,0x18
   3f0e7:	mov    r12,rcx
   3f0ea:	mov    rdi,rbx
   3f0ed:	mov    rcx,rsp
   3f0f0:	mov    rax,QWORD PTR fs:0x28
   3f0f9:	mov    QWORD PTR [rsp+0x8],rax
   3f0fe:	xor    eax,eax
   3f100:	call   33290 <g_str_equal@plt+0x25fd0>
   3f105:	cmp    eax,0xffffffde
   3f108:	je     3f170 <g_str_equal@plt+0x31eb0>
   3f10a:	test   eax,eax
   3f10c:	jne    3f138 <g_str_equal@plt+0x31e78>
   3f10e:	mov    rax,QWORD PTR [rsp]
   3f112:	mov    QWORD PTR [rbp+0x0],rax
   3f116:	mov    rax,QWORD PTR [rsp+0x8]
   3f11b:	xor    rax,QWORD PTR fs:0x28
   3f124:	jne    3f18e <g_str_equal@plt+0x31ece>
   3f126:	add    rsp,0x18
   3f12a:	pop    rbx
   3f12b:	pop    rbp
   3f12c:	pop    r12
   3f12e:	pop    r13
   3f130:	ret    
   3f131:	nop    DWORD PTR [rax+0x0]
   3f138:	lea    rax,[rip+0x23e80]        # 62fbf <_fini@@Base+0x1086b>
   3f13f:	sub    rsp,0x8
   3f143:	lea    r8,[rip+0x1efb3]        # 5e0fd <_fini@@Base+0xb9a9>
   3f14a:	lea    rcx,[rip+0x240af]        # 63200 <_fini@@Base+0x10aac>
   3f151:	mov    r9,r13
   3f154:	mov    edx,0x7e
   3f159:	push   rax
   3f15a:	lea    rsi,[rip+0x23c2f]        # 62d90 <_fini@@Base+0x1063c>
   3f161:	xor    eax,eax
   3f163:	mov    rdi,r12
   3f166:	call   3a090 <g_str_equal@plt+0x2cdd0>
   3f16b:	pop    rax
   3f16c:	pop    rdx
   3f16d:	jmp    3f116 <g_str_equal@plt+0x31e56>
   3f16f:	nop
   3f170:	sub    rsp,0x8
   3f174:	mov    r9,rbx
   3f177:	lea    r8,[rip+0x23be2]        # 62d60 <_fini@@Base+0x1060c>
   3f17e:	push   r13
   3f180:	lea    rcx,[rip+0x24079]        # 63200 <_fini@@Base+0x10aac>
   3f187:	mov    edx,0x7a
   3f18c:	jmp    3f15a <g_str_equal@plt+0x31e9a>
   3f18e:	call   cd30 <__stack_chk_fail@plt>
   3f193:	nop    DWORD PTR [rax]
   3f196:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3f1a0:	movzx  eax,BYTE PTR [rdi]
   3f1a3:	test   al,al
   3f1a5:	je     3f1f0 <g_str_equal@plt+0x31f30>
   3f1a7:	push   rbx
   3f1a8:	mov    rbx,rdi
   3f1ab:	jmp    3f1c3 <g_str_equal@plt+0x31f03>
   3f1ad:	nop    DWORD PTR [rax]
   3f1b0:	movsx  edi,BYTE PTR [rbx]
   3f1b3:	add    rbx,0x1
   3f1b7:	call   d250 <_IO_putc@plt>
   3f1bc:	movzx  eax,BYTE PTR [rbx]
   3f1bf:	test   al,al
   3f1c1:	je     3f1e8 <g_str_equal@plt+0x31f28>
   3f1c3:	cmp    al,0x2c
   3f1c5:	mov    rsi,QWORD PTR [rip+0x24577c]        # 284948 <stdout@@GLIBC_2.2.5>
   3f1cc:	jne    3f1b0 <g_str_equal@plt+0x31ef0>
   3f1ce:	mov    edi,0x2c
   3f1d3:	call   d250 <_IO_putc@plt>
   3f1d8:	mov    rsi,QWORD PTR [rip+0x245769]        # 284948 <stdout@@GLIBC_2.2.5>
   3f1df:	jmp    3f1b0 <g_str_equal@plt+0x31ef0>
   3f1e1:	nop    DWORD PTR [rax+0x0]
   3f1e8:	pop    rbx
   3f1e9:	ret    
   3f1ea:	nop    WORD PTR [rax+rax*1+0x0]
   3f1f0:	repz ret 
   3f1f2:	nop    DWORD PTR [rax+0x0]
   3f1f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3f200:	test   rdi,rdi
   3f203:	je     3f250 <g_str_equal@plt+0x31f90>
   3f205:	push   r12
   3f207:	mov    r12,rsi
   3f20a:	push   rbp
   3f20b:	push   rbx
   3f20c:	mov    rbx,rdi
   3f20f:	jmp    3f220 <g_str_equal@plt+0x31f60>
   3f211:	nop    DWORD PTR [rax+0x0]
   3f218:	test   rbp,rbp
   3f21b:	mov    rbx,rbp
   3f21e:	je     3f243 <g_str_equal@plt+0x31f83>
   3f220:	mov    rdi,QWORD PTR [rbx]
   3f223:	mov    rsi,r12
   3f226:	mov    rbp,QWORD PTR [rbx+0x28]
   3f22a:	call   cd60 <strcmp@plt>
   3f22f:	test   eax,eax
   3f231:	jne    3f218 <g_str_equal@plt+0x31f58>
   3f233:	mov    rdi,rbx
   3f236:	mov    rbx,rbp
   3f239:	call   3f020 <g_str_equal@plt+0x31d60>
   3f23e:	test   rbp,rbp
   3f241:	jne    3f220 <g_str_equal@plt+0x31f60>
   3f243:	pop    rbx
   3f244:	pop    rbp
   3f245:	pop    r12
   3f247:	ret    
   3f248:	nop    DWORD PTR [rax+rax*1+0x0]
   3f250:	repz ret 
   3f252:	nop    DWORD PTR [rax+0x0]
   3f256:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3f260:	mov    r9,rdi
   3f263:	lea    rdi,[rip+0x233ce]        # 62638 <_fini@@Base+0xfee4>
   3f26a:	mov    r10,rcx
   3f26d:	mov    ecx,0x3
   3f272:	mov    r8,rsi
   3f275:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   3f277:	seta   al
   3f27a:	sbb    al,0x0
   3f27c:	test   al,al
   3f27e:	je     3f2a0 <g_str_equal@plt+0x31fe0>
   3f280:	lea    rdi,[rip+0x233b5]        # 6263c <_fini@@Base+0xfee8>
   3f287:	mov    ecx,0x4
   3f28c:	mov    rsi,r8
   3f28f:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   3f291:	seta   al
   3f294:	sbb    al,0x0
   3f296:	test   al,al
   3f298:	jne    3f2a8 <g_str_equal@plt+0x31fe8>
   3f29a:	mov    BYTE PTR [rdx],0x0
   3f29d:	ret    
   3f29e:	xchg   ax,ax
   3f2a0:	mov    BYTE PTR [rdx],0x1
   3f2a3:	ret    
   3f2a4:	nop    DWORD PTR [rax+0x0]
   3f2a8:	lea    rax,[rip+0x1f9e5]        # 5ec94 <_fini@@Base+0xc540>
   3f2af:	sub    rsp,0x10
   3f2b3:	lea    r8,[rip+0x1ee43]        # 5e0fd <_fini@@Base+0xb9a9>
   3f2ba:	lea    rcx,[rip+0x23f7f]        # 63240 <_fini@@Base+0x10aec>
   3f2c1:	lea    rsi,[rip+0x23ac8]        # 62d90 <_fini@@Base+0x1063c>
   3f2c8:	mov    rdi,r10
   3f2cb:	push   rax
   3f2cc:	mov    edx,0x6d
   3f2d1:	xor    eax,eax
   3f2d3:	call   3a090 <g_str_equal@plt+0x2cdd0>
   3f2d8:	add    rsp,0x18
   3f2dc:	ret    
   3f2dd:	nop    DWORD PTR [rax]
   3f2e0:	push   r12
   3f2e2:	push   rbp
   3f2e3:	mov    r12,rsi
   3f2e6:	push   rbx
   3f2e7:	movsx  esi,dl
   3f2ea:	mov    rbp,rdi
   3f2ed:	call   cc00 <strchr@plt>
   3f2f2:	test   rax,rax
   3f2f5:	je     3f318 <g_str_equal@plt+0x32058>
   3f2f7:	mov    rsi,rax
   3f2fa:	mov    rbx,rax
   3f2fd:	mov    rdi,rbp
   3f300:	sub    rsi,rbp
   3f303:	call   c640 <g_strndup@plt>
   3f308:	mov    QWORD PTR [r12],rax
   3f30c:	mov    rax,rbx
   3f30f:	pop    rbx
   3f310:	pop    rbp
   3f311:	pop    r12
   3f313:	ret    
   3f314:	nop    DWORD PTR [rax+0x0]
   3f318:	mov    rdi,rbp
   3f31b:	call   c370 <g_strdup@plt>
   3f320:	mov    rdi,rbp
   3f323:	mov    QWORD PTR [r12],rax
   3f327:	call   c720 <strlen@plt>
   3f32c:	lea    rbx,[rbp+rax*1+0x0]
   3f331:	mov    rax,rbx
   3f334:	pop    rbx
   3f335:	pop    rbp
   3f336:	pop    r12
   3f338:	ret    
   3f339:	nop    DWORD PTR [rax+0x0]
   3f340:	push   rbx
   3f341:	mov    rbx,rdi
   3f344:	mov    rdi,QWORD PTR [rdi+0x28]
   3f348:	test   rdi,rdi
   3f34b:	je     3f35e <g_str_equal@plt+0x3209e>
   3f34d:	nop    DWORD PTR [rax]
   3f350:	call   3f020 <g_str_equal@plt+0x31d60>
   3f355:	mov    rdi,QWORD PTR [rbx+0x28]
   3f359:	test   rdi,rdi
   3f35c:	jne    3f350 <g_str_equal@plt+0x32090>
   3f35e:	mov    rax,QWORD PTR [rbx+0x38]
   3f362:	mov    rdx,QWORD PTR [rbx+0x40]
   3f366:	test   rax,rax
   3f369:	je     3f398 <g_str_equal@plt+0x320d8>
   3f36b:	mov    QWORD PTR [rax+0x40],rdx
   3f36f:	mov    rax,QWORD PTR [rbx+0x40]
   3f373:	mov    rdx,QWORD PTR [rbx+0x38]
   3f377:	mov    QWORD PTR [rax],rdx
   3f37a:	mov    rdi,QWORD PTR [rbx]
   3f37d:	mov    QWORD PTR [rbx+0x40],0x0
   3f385:	call   d2b0 <g_free@plt>
   3f38a:	mov    rdi,rbx
   3f38d:	pop    rbx
   3f38e:	jmp    d2b0 <g_free@plt>
   3f393:	nop    DWORD PTR [rax+rax*1+0x0]
   3f398:	mov    rax,QWORD PTR [rbx+0x8]
   3f39c:	mov    QWORD PTR [rax+0x20],rdx
   3f3a0:	jmp    3f36f <g_str_equal@plt+0x320af>
   3f3a2:	nop    DWORD PTR [rax+0x0]
   3f3a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3f3b0:	push   r15
   3f3b2:	push   r14
   3f3b4:	xor    r14d,r14d
   3f3b7:	push   r13
   3f3b9:	push   r12
   3f3bb:	mov    r13,rsi
   3f3be:	push   rbp
   3f3bf:	push   rbx
   3f3c0:	mov    rbp,rdi
   3f3c3:	sub    rsp,0x18
   3f3c7:	mov    QWORD PTR [rsi],0x0
   3f3ce:	mov    QWORD PTR [rsp],0x0
   3f3d6:	jmp    3f3fb <g_str_equal@plt+0x3213b>
   3f3d8:	nop    DWORD PTR [rax+rax*1+0x0]
   3f3e0:	cmp    BYTE PTR [rbx+0x1],0x2c
   3f3e4:	jne    3f45e <g_str_equal@plt+0x3219e>
   3f3e6:	mov    r8,QWORD PTR [rsp+0x8]
   3f3eb:	mov    rax,QWORD PTR [r13+0x0]
   3f3ef:	mov    r14,r15
   3f3f2:	lea    rbp,[rbp+r8*1+0x2]
   3f3f7:	mov    QWORD PTR [rsp],rax
   3f3fb:	mov    esi,0x2c
   3f400:	mov    rdi,rbp
   3f403:	call   c5a0 <strchrnul@plt>
   3f408:	mov    r8,rax
   3f40b:	mov    rbx,rax
   3f40e:	sub    r8,rbp
   3f411:	cmp    BYTE PTR [rax],0x0
   3f414:	mov    r12,r8
   3f417:	je     3f427 <g_str_equal@plt+0x32167>
   3f419:	xor    r12d,r12d
   3f41c:	cmp    BYTE PTR [rax+0x1],0x2c
   3f420:	sete   r12b
   3f424:	add    r12,r8
   3f427:	lea    r15,[r14+r12*1]
   3f42b:	mov    rdi,QWORD PTR [rsp]
   3f42f:	mov    QWORD PTR [rsp+0x8],r8
   3f434:	lea    rsi,[r15+0x1]
   3f438:	call   ccf0 <g_realloc@plt>
   3f43d:	lea    rdi,[rax+r14*1]
   3f441:	mov    QWORD PTR [r13+0x0],rax
   3f445:	mov    rdx,r12
   3f448:	mov    rsi,rbp
   3f44b:	call   ced0 <strncpy@plt>
   3f450:	mov    rax,QWORD PTR [r13+0x0]
   3f454:	mov    BYTE PTR [rax+r15*1],0x0
   3f459:	cmp    BYTE PTR [rbx],0x0
   3f45c:	jne    3f3e0 <g_str_equal@plt+0x32120>
   3f45e:	add    rsp,0x18
   3f462:	mov    rax,rbx
   3f465:	pop    rbx
   3f466:	pop    rbp
   3f467:	pop    r12
   3f469:	pop    r13
   3f46b:	pop    r14
   3f46d:	pop    r15
   3f46f:	ret    
   3f470:	push   r13
   3f472:	push   r12
   3f474:	mov    r13,rdi
   3f477:	push   rbp
   3f478:	push   rbx
   3f479:	mov    rbx,rsi
   3f47c:	mov    r12,rdx
   3f47f:	xor    esi,esi
   3f481:	mov    rdi,rbx
   3f484:	sub    rsp,0x18
   3f488:	mov    rbp,rcx
   3f48b:	mov    rdx,rsp
   3f48e:	mov    rax,QWORD PTR fs:0x28
   3f497:	mov    QWORD PTR [rsp+0x8],rax
   3f49c:	xor    eax,eax
   3f49e:	call   32d50 <g_str_equal@plt+0x25a90>
   3f4a3:	cmp    eax,0xffffffde
   3f4a6:	je     3f520 <g_str_equal@plt+0x32260>
   3f4a8:	test   eax,eax
   3f4aa:	jne    3f4d8 <g_str_equal@plt+0x32218>
   3f4ac:	mov    rax,QWORD PTR [rsp]
   3f4b0:	mov    QWORD PTR [r12],rax
   3f4b4:	mov    rax,QWORD PTR [rsp+0x8]
   3f4b9:	xor    rax,QWORD PTR fs:0x28
   3f4c2:	jne    3f554 <g_str_equal@plt+0x32294>
   3f4c8:	add    rsp,0x18
   3f4cc:	pop    rbx
   3f4cd:	pop    rbp
   3f4ce:	pop    r12
   3f4d0:	pop    r13
   3f4d2:	ret    
   3f4d3:	nop    DWORD PTR [rax+rax*1+0x0]
   3f4d8:	lea    rax,[rip+0x23921]        # 62e00 <_fini@@Base+0x106ac>
   3f4df:	sub    rsp,0x8
   3f4e3:	lea    r8,[rip+0x1ec13]        # 5e0fd <_fini@@Base+0xb9a9>
   3f4ea:	lea    rcx,[rip+0x23daf]        # 632a0 <_fini@@Base+0x10b4c>
   3f4f1:	lea    rsi,[rip+0x23898]        # 62d90 <_fini@@Base+0x1063c>
   3f4f8:	mov    edx,0xa0
   3f4fd:	push   rax
   3f4fe:	mov    r9,r13
   3f501:	mov    rdi,rbp
   3f504:	xor    eax,eax
   3f506:	call   3a090 <g_str_equal@plt+0x2cdd0>
   3f50b:	lea    rsi,[rip+0x23916]        # 62e28 <_fini@@Base+0x106d4>
   3f512:	xor    eax,eax
   3f514:	mov    rdi,rbp
   3f517:	call   39c60 <g_str_equal@plt+0x2c9a0>
   3f51c:	pop    rax
   3f51d:	pop    rdx
   3f51e:	jmp    3f4b4 <g_str_equal@plt+0x321f4>
   3f520:	sub    rsp,0x8
   3f524:	lea    rcx,[rip+0x23d75]        # 632a0 <_fini@@Base+0x10b4c>
   3f52b:	lea    rsi,[rip+0x2385e]        # 62d90 <_fini@@Base+0x1063c>
   3f532:	push   r13
   3f534:	lea    r8,[rip+0x23895]        # 62dd0 <_fini@@Base+0x1067c>
   3f53b:	mov    r9,rbx
   3f53e:	mov    edx,0x9b
   3f543:	mov    rdi,rbp
   3f546:	xor    eax,eax
   3f548:	call   3a090 <g_str_equal@plt+0x2cdd0>
   3f54d:	pop    rcx
   3f54e:	pop    rsi
   3f54f:	jmp    3f4b4 <g_str_equal@plt+0x321f4>
   3f554:	call   cd30 <__stack_chk_fail@plt>
   3f559:	nop    DWORD PTR [rax+0x0]
   3f560:	mov    rax,QWORD PTR [rdi+0x10]
   3f564:	test   rax,rax
   3f567:	je     3f590 <g_str_equal@plt+0x322d0>
   3f569:	mov    eax,DWORD PTR [rax+0x8]
   3f56c:	cmp    eax,0x1
   3f56f:	je     3f5b0 <g_str_equal@plt+0x322f0>
   3f571:	jb     3f590 <g_str_equal@plt+0x322d0>
   3f573:	cmp    eax,0x2
   3f576:	je     3f598 <g_str_equal@plt+0x322d8>
   3f578:	cmp    eax,0x3
   3f57b:	jne    3f5c3 <g_str_equal@plt+0x32303>
   3f57d:	lea    rdx,[rdi+0x18]
   3f581:	mov    rcx,rsi
   3f584:	mov    rsi,QWORD PTR [rdi+0x8]
   3f588:	mov    rdi,QWORD PTR [rdi]
   3f58b:	jmp    3f470 <g_str_equal@plt+0x321b0>
   3f590:	repz ret 
   3f592:	nop    WORD PTR [rax+rax*1+0x0]
   3f598:	lea    rdx,[rdi+0x18]
   3f59c:	mov    rcx,rsi
   3f59f:	mov    rsi,QWORD PTR [rdi+0x8]
   3f5a3:	mov    rdi,QWORD PTR [rdi]
   3f5a6:	jmp    3f0d0 <g_str_equal@plt+0x31e10>
   3f5ab:	nop    DWORD PTR [rax+rax*1+0x0]
   3f5b0:	lea    rdx,[rdi+0x18]
   3f5b4:	mov    rcx,rsi
   3f5b7:	mov    rsi,QWORD PTR [rdi+0x8]
   3f5bb:	mov    rdi,QWORD PTR [rdi]
   3f5be:	jmp    3f260 <g_str_equal@plt+0x31fa0>
   3f5c3:	sub    rsp,0x8
   3f5c7:	call   c270 <abort@plt>
   3f5cc:	nop    DWORD PTR [rax+0x0]
   3f5d0:	push   r15
   3f5d2:	push   r14
   3f5d4:	mov    r14d,ecx
   3f5d7:	push   r13
   3f5d9:	push   r12
   3f5db:	mov    r13,rdx
   3f5de:	push   rbp
   3f5df:	push   rbx
   3f5e0:	mov    rbp,rdi
   3f5e3:	mov    r12,rsi
   3f5e6:	sub    rsp,0x28
   3f5ea:	mov    rbx,QWORD PTR [rdi+0x8]
   3f5ee:	mov    rax,QWORD PTR fs:0x28
   3f5f7:	mov    QWORD PTR [rsp+0x18],rax
   3f5fc:	xor    eax,eax
   3f5fe:	mov    QWORD PTR [rsp+0x8],r8
   3f603:	mov    QWORD PTR [rsp+0x10],0x0
   3f60c:	lea    rdi,[rbx+0x28]
   3f610:	call   3f070 <g_str_equal@plt+0x31db0>
   3f615:	test   rax,rax
   3f618:	mov    r15,rax
   3f61b:	je     3f6e0 <g_str_equal@plt+0x32420>
   3f621:	mov    edi,0x38
   3f626:	call   ce00 <g_malloc0@plt>
   3f62b:	mov    rdi,r12
   3f62e:	mov    rbx,rax
   3f631:	call   c370 <g_strdup@plt>
   3f636:	test   r14b,r14b
   3f639:	mov    QWORD PTR [rbx],rax
   3f63c:	mov    QWORD PTR [rbx+0x20],rbp
   3f640:	jne    3f6b8 <g_str_equal@plt+0x323f8>
   3f642:	mov    rax,QWORD PTR [rbp+0x30]
   3f646:	mov    QWORD PTR [rbx+0x28],0x0
   3f64e:	mov    QWORD PTR [rbx+0x30],rax
   3f652:	mov    QWORD PTR [rax],rbx
   3f655:	lea    rax,[rbx+0x28]
   3f659:	mov    QWORD PTR [rbp+0x30],rax
   3f65d:	lea    rsi,[rsp+0x10]
   3f662:	mov    QWORD PTR [rbx+0x10],r15
   3f666:	mov    QWORD PTR [rbx+0x8],r13
   3f66a:	mov    rdi,rbx
   3f66d:	call   3f560 <g_str_equal@plt+0x322a0>
   3f672:	mov    rsi,QWORD PTR [rsp+0x10]
   3f677:	test   rsi,rsi
   3f67a:	je     3f68e <g_str_equal@plt+0x323ce>
   3f67c:	mov    rdi,QWORD PTR [rsp+0x8]
   3f681:	call   3a4c0 <g_str_equal@plt+0x2d200>
   3f686:	mov    rdi,rbx
   3f689:	call   3f020 <g_str_equal@plt+0x31d60>
   3f68e:	mov    rax,QWORD PTR [rsp+0x18]
   3f693:	xor    rax,QWORD PTR fs:0x28
   3f69c:	jne    3f72e <g_str_equal@plt+0x3246e>
   3f6a2:	add    rsp,0x28
   3f6a6:	pop    rbx
   3f6a7:	pop    rbp
   3f6a8:	pop    r12
   3f6aa:	pop    r13
   3f6ac:	pop    r14
   3f6ae:	pop    r15
   3f6b0:	ret    
   3f6b1:	nop    DWORD PTR [rax+0x0]
   3f6b8:	mov    rax,QWORD PTR [rbp+0x28]
   3f6bc:	lea    rcx,[rbx+0x28]
   3f6c0:	test   rax,rax
   3f6c3:	mov    QWORD PTR [rbx+0x28],rax
   3f6c7:	je     3f728 <g_str_equal@plt+0x32468>
   3f6c9:	mov    QWORD PTR [rax+0x30],rcx
   3f6cd:	mov    QWORD PTR [rbp+0x28],rbx
   3f6d1:	add    rbp,0x28
   3f6d5:	mov    QWORD PTR [rbx+0x30],rbp
   3f6d9:	jmp    3f65d <g_str_equal@plt+0x3239d>
   3f6db:	nop    DWORD PTR [rax+rax*1+0x0]
   3f6e0:	cmp    QWORD PTR [rbx+0x28],0x0
   3f6e5:	je     3f621 <g_str_equal@plt+0x32361>
   3f6eb:	mov    rdi,r13
   3f6ee:	call   d2b0 <g_free@plt>
   3f6f3:	mov    rdi,QWORD PTR [rsp+0x8]
   3f6f8:	lea    r8,[rip+0x1ea7c]        # 5e17b <_fini@@Base+0xba27>
   3f6ff:	lea    rcx,[rip+0x23ac2]        # 631c8 <_fini@@Base+0x10a74>
   3f706:	lea    rsi,[rip+0x23683]        # 62d90 <_fini@@Base+0x1063c>
   3f70d:	mov    r9,r12
   3f710:	mov    edx,0x1f2
   3f715:	xor    eax,eax
   3f717:	call   3a090 <g_str_equal@plt+0x2cdd0>
   3f71c:	jmp    3f68e <g_str_equal@plt+0x323ce>
   3f721:	nop    DWORD PTR [rax+0x0]
   3f728:	mov    QWORD PTR [rbp+0x30],rcx
   3f72c:	jmp    3f6cd <g_str_equal@plt+0x3240d>
   3f72e:	call   cd30 <__stack_chk_fail@plt>
   3f733:	nop    DWORD PTR [rax]
   3f736:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3f740:	push   r15
   3f742:	push   r14
   3f744:	push   r13
   3f746:	push   r12
   3f748:	push   rbp
   3f749:	push   rbx
   3f74a:	sub    rsp,0x58
   3f74e:	mov    rax,QWORD PTR fs:0x28
   3f757:	mov    QWORD PTR [rsp+0x48],rax
   3f75c:	xor    eax,eax
   3f75e:	cmp    BYTE PTR [rsi],0x0
   3f761:	mov    QWORD PTR [rsp+0x10],rdi
   3f766:	mov    QWORD PTR [rsp+0x28],r8
   3f76b:	mov    BYTE PTR [rsp+0x1f],cl
   3f76f:	mov    QWORD PTR [rsp+0x30],0x0
   3f778:	mov    QWORD PTR [rsp+0x38],0x0
   3f781:	mov    QWORD PTR [rsp+0x40],0x0
   3f78a:	je     3f9b0 <g_str_equal@plt+0x326f0>
   3f790:	lea    rax,[rsp+0x38]
   3f795:	mov    r13,rsi
   3f798:	mov    r12,rdx
   3f79b:	mov    rbx,rsi
   3f79e:	lea    r15,[rsp+0x30]
   3f7a3:	lea    rbp,[rip+0x25f37]        # 656e1 <_fini@@Base+0x12f8d>
   3f7aa:	mov    QWORD PTR [rsp+0x8],rax
   3f7af:	jmp    3f7f5 <g_str_equal@plt+0x32535>
   3f7b1:	nop    DWORD PTR [rax+0x0]
   3f7b8:	cmp    BYTE PTR [r14],0x2c
   3f7bc:	jne    3f8c0 <g_str_equal@plt+0x32600>
   3f7c2:	mov    rdi,r10
   3f7c5:	lea    rbx,[r14+0x1]
   3f7c9:	call   d2b0 <g_free@plt>
   3f7ce:	mov    rdi,QWORD PTR [rsp+0x38]
   3f7d3:	call   d2b0 <g_free@plt>
   3f7d8:	mov    QWORD PTR [rsp+0x38],0x0
   3f7e1:	mov    QWORD PTR [rsp+0x30],0x0
   3f7ea:	cmp    BYTE PTR [r14+0x1],0x0
   3f7ef:	je     3f9b0 <g_str_equal@plt+0x326f0>
   3f7f5:	mov    esi,0x3d
   3f7fa:	mov    rdi,rbx
   3f7fd:	call   cc00 <strchr@plt>
   3f802:	mov    esi,0x2c
   3f807:	mov    r14,rax
   3f80a:	mov    rdi,rbx
   3f80d:	call   cc00 <strchr@plt>
   3f812:	test   r14,r14
   3f815:	je     3f829 <g_str_equal@plt+0x32569>
   3f817:	test   rax,rax
   3f81a:	je     3f968 <g_str_equal@plt+0x326a8>
   3f820:	cmp    r14,rax
   3f823:	jbe    3f968 <g_str_equal@plt+0x326a8>
   3f829:	cmp    r13,rbx
   3f82c:	jne    3f8f8 <g_str_equal@plt+0x32638>
   3f832:	test   r12,r12
   3f835:	je     3f8f8 <g_str_equal@plt+0x32638>
   3f83b:	mov    rdi,r12
   3f83e:	call   c370 <g_strdup@plt>
   3f843:	mov    rsi,QWORD PTR [rsp+0x8]
   3f848:	mov    rdi,rbx
   3f84b:	mov    QWORD PTR [rsp+0x30],rax
   3f850:	call   3f3b0 <g_str_equal@plt+0x320f0>
   3f855:	mov    r14,rax
   3f858:	mov    r10,QWORD PTR [rsp+0x30]
   3f85d:	mov    ecx,0x3
   3f862:	mov    rdi,rbp
   3f865:	mov    rsi,r10
   3f868:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   3f86a:	seta   al
   3f86d:	sbb    al,0x0
   3f86f:	test   al,al
   3f871:	je     3f7b8 <g_str_equal@plt+0x324f8>
   3f877:	movzx  ecx,BYTE PTR [rsp+0x1f]
   3f87c:	mov    rdx,QWORD PTR [rsp+0x38]
   3f881:	lea    r8,[rsp+0x40]
   3f886:	mov    rdi,QWORD PTR [rsp+0x10]
   3f88b:	mov    rsi,r10
   3f88e:	call   3f5d0 <g_str_equal@plt+0x32310>
   3f893:	mov    rsi,QWORD PTR [rsp+0x40]
   3f898:	mov    QWORD PTR [rsp+0x38],0x0
   3f8a1:	test   rsi,rsi
   3f8a4:	jne    3f9c0 <g_str_equal@plt+0x32700>
   3f8aa:	cmp    BYTE PTR [r14],0x2c
   3f8ae:	mov    r10,QWORD PTR [rsp+0x30]
   3f8b3:	je     3f7c2 <g_str_equal@plt+0x32502>
   3f8b9:	nop    DWORD PTR [rax+0x0]
   3f8c0:	mov    rdi,r10
   3f8c3:	call   d2b0 <g_free@plt>
   3f8c8:	mov    rdi,QWORD PTR [rsp+0x38]
   3f8cd:	call   d2b0 <g_free@plt>
   3f8d2:	mov    rax,QWORD PTR [rsp+0x48]
   3f8d7:	xor    rax,QWORD PTR fs:0x28
   3f8e0:	jne    3f9f3 <g_str_equal@plt+0x32733>
   3f8e6:	add    rsp,0x58
   3f8ea:	pop    rbx
   3f8eb:	pop    rbp
   3f8ec:	pop    r12
   3f8ee:	pop    r13
   3f8f0:	pop    r14
   3f8f2:	pop    r15
   3f8f4:	ret    
   3f8f5:	nop    DWORD PTR [rax]
   3f8f8:	mov    rdi,rbx
   3f8fb:	mov    rsi,r15
   3f8fe:	mov    edx,0x2c
   3f903:	call   3f2e0 <g_str_equal@plt+0x32020>
   3f908:	mov    rbx,QWORD PTR [rsp+0x30]
   3f90d:	lea    rdi,[rip+0x1f9b8]        # 5f2cc <_fini@@Base+0xcb78>
   3f914:	mov    ecx,0x2
   3f919:	mov    r14,rax
   3f91c:	mov    rsi,rbx
   3f91f:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   3f921:	seta   al
   3f924:	sbb    al,0x0
   3f926:	test   al,al
   3f928:	jne    3f998 <g_str_equal@plt+0x326d8>
   3f92a:	lea    rsi,[rbx+0x2]
   3f92e:	mov    rdi,rsi
   3f931:	mov    QWORD PTR [rsp+0x20],rsi
   3f936:	call   c720 <strlen@plt>
   3f93b:	mov    rsi,QWORD PTR [rsp+0x20]
   3f940:	lea    rdx,[rax+0x1]
   3f944:	mov    rdi,rbx
   3f947:	call   cbf0 <memmove@plt>
   3f94c:	lea    rdi,[rip+0x22ce9]        # 6263c <_fini@@Base+0xfee8>
   3f953:	call   c370 <g_strdup@plt>
   3f958:	mov    QWORD PTR [rsp+0x38],rax
   3f95d:	jmp    3f858 <g_str_equal@plt+0x32598>
   3f962:	nop    WORD PTR [rax+rax*1+0x0]
   3f968:	mov    edx,0x3d
   3f96d:	mov    rsi,r15
   3f970:	mov    rdi,rbx
   3f973:	call   3f2e0 <g_str_equal@plt+0x32020>
   3f978:	cmp    BYTE PTR [rax],0x3d
   3f97b:	jne    3f9d4 <g_str_equal@plt+0x32714>
   3f97d:	mov    rsi,QWORD PTR [rsp+0x8]
   3f982:	lea    rdi,[rax+0x1]
   3f986:	call   3f3b0 <g_str_equal@plt+0x320f0>
   3f98b:	mov    r14,rax
   3f98e:	jmp    3f858 <g_str_equal@plt+0x32598>
   3f993:	nop    DWORD PTR [rax+rax*1+0x0]
   3f998:	lea    rdi,[rip+0x22c99]        # 62638 <_fini@@Base+0xfee4>
   3f99f:	call   c370 <g_strdup@plt>
   3f9a4:	mov    QWORD PTR [rsp+0x38],rax
   3f9a9:	jmp    3f858 <g_str_equal@plt+0x32598>
   3f9ae:	xchg   ax,ax
   3f9b0:	xor    r10d,r10d
   3f9b3:	jmp    3f8c0 <g_str_equal@plt+0x32600>
   3f9b8:	nop    DWORD PTR [rax+rax*1+0x0]
   3f9c0:	mov    rdi,QWORD PTR [rsp+0x28]
   3f9c5:	call   3a4c0 <g_str_equal@plt+0x2d200>
   3f9ca:	mov    r10,QWORD PTR [rsp+0x30]
   3f9cf:	jmp    3f8c0 <g_str_equal@plt+0x32600>
   3f9d4:	lea    rcx,[rip+0x2375d]        # 63138 <_fini@@Base+0x109e4>
   3f9db:	lea    rsi,[rip+0x233ae]        # 62d90 <_fini@@Base+0x1063c>
   3f9e2:	lea    rdi,[rip+0x235df]        # 62fc8 <_fini@@Base+0x10874>
   3f9e9:	mov    edx,0x30e
   3f9ee:	call   c390 <__assert_fail@plt>
   3f9f3:	call   cd30 <__stack_chk_fail@plt>
   3f9f8:	nop    DWORD PTR [rax+rax*1+0x0]
   3fa00:	push   r13
   3fa02:	push   r12
   3fa04:	mov    r8,rsi
   3fa07:	push   rbp
   3fa08:	push   rbx
   3fa09:	mov    rbx,rdi
   3fa0c:	lea    rdi,[rip+0x25cce]        # 656e1 <_fini@@Base+0x12f8d>
   3fa13:	mov    ecx,0x3
   3fa18:	mov    rsi,rbx
   3fa1b:	sub    rsp,0x38
   3fa1f:	mov    rax,QWORD PTR fs:0x28
   3fa28:	mov    QWORD PTR [rsp+0x28],rax
   3fa2d:	xor    eax,eax
   3fa2f:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   3fa31:	seta   al
   3fa34:	sbb    al,0x0
   3fa36:	test   al,al
   3fa38:	je     3fa47 <g_str_equal@plt+0x32787>
   3fa3a:	mov    rax,QWORD PTR [rdx+0x8]
   3fa3e:	mov    rbp,rdx
   3fa41:	cmp    QWORD PTR [rax],0x0
   3fa45:	je     3fa70 <g_str_equal@plt+0x327b0>
   3fa47:	mov    rax,QWORD PTR [rsp+0x28]
   3fa4c:	xor    rax,QWORD PTR fs:0x28
   3fa55:	jne    3fb18 <g_str_equal@plt+0x32858>
   3fa5b:	add    rsp,0x38
   3fa5f:	pop    rbx
   3fa60:	pop    rbp
   3fa61:	pop    r12
   3fa63:	pop    r13
   3fa65:	ret    
   3fa66:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3fa70:	mov    eax,DWORD PTR [r8]
   3fa73:	lea    edx,[rax-0x1]
   3fa76:	cmp    edx,0x5
   3fa79:	ja     3fb1d <g_str_equal@plt+0x3285d>
   3fa7f:	cmp    eax,0x3
   3fa82:	je     3fb08 <g_str_equal@plt+0x32848>
   3fa88:	cmp    eax,0x6
   3fa8b:	je     3fad0 <g_str_equal@plt+0x32810>
   3fa8d:	cmp    eax,0x2
   3fa90:	jne    3fa47 <g_str_equal@plt+0x32787>
   3fa92:	mov    rdi,r8
   3fa95:	call   2e3b0 <g_str_equal@plt+0x210f0>
   3fa9a:	mov    r12,rax
   3fa9d:	mov    rdi,rax
   3faa0:	mov    r13,QWORD PTR [rbp+0x8]
   3faa4:	mov    rbp,QWORD PTR [rbp+0x0]
   3faa8:	call   c370 <g_strdup@plt>
   3faad:	xor    ecx,ecx
   3faaf:	mov    rdx,rax
   3fab2:	mov    rsi,rbx
   3fab5:	mov    rdi,rbp
   3fab8:	mov    r8,r13
   3fabb:	call   3f5d0 <g_str_equal@plt+0x32310>
   3fac0:	mov    rdi,r12
   3fac3:	call   d2b0 <g_free@plt>
   3fac8:	jmp    3fa47 <g_str_equal@plt+0x32787>
   3facd:	nop    DWORD PTR [rax]
   3fad0:	mov    rdi,r8
   3fad3:	mov    r12,rsp
   3fad6:	call   2f940 <g_str_equal@plt+0x22680>
   3fadb:	lea    rdx,[rip+0x22b56]        # 62638 <_fini@@Base+0xfee4>
   3fae2:	test   al,al
   3fae4:	lea    rax,[rip+0x22b51]        # 6263c <_fini@@Base+0xfee8>
   3faeb:	mov    rdi,r12
   3faee:	mov    esi,0x20
   3faf3:	cmove  rdx,rax
   3faf7:	call   329f0 <g_str_equal@plt+0x25730>
   3fafc:	mov    rdi,r12
   3faff:	xor    r12d,r12d
   3fb02:	jmp    3faa0 <g_str_equal@plt+0x327e0>
   3fb04:	nop    DWORD PTR [rax+0x0]
   3fb08:	mov    rdi,r8
   3fb0b:	xor    r12d,r12d
   3fb0e:	call   2e8e0 <g_str_equal@plt+0x21620>
   3fb13:	mov    rdi,rax
   3fb16:	jmp    3faa0 <g_str_equal@plt+0x327e0>
   3fb18:	call   cd30 <__stack_chk_fail@plt>
   3fb1d:	lea    rcx,[rip+0x235b4]        # 630d8 <_fini@@Base+0x10984>
   3fb24:	lea    rsi,[rip+0x1db6d]        # 5d698 <_fini@@Base+0xaf44>
   3fb2b:	lea    rdi,[rip+0x1dbae]        # 5d6e0 <_fini@@Base+0xaf8c>
   3fb32:	mov    edx,0x7f
   3fb37:	call   c390 <__assert_fail@plt>
   3fb3c:	nop    DWORD PTR [rax+0x0]
   3fb40:	push   r15
   3fb42:	push   r14
   3fb44:	push   r13
   3fb46:	push   r12
   3fb48:	push   rbp
   3fb49:	push   rbx
   3fb4a:	sub    rsp,0x18
   3fb4e:	mov    rax,QWORD PTR fs:0x28
   3fb57:	mov    QWORD PTR [rsp+0x8],rax
   3fb5c:	xor    eax,eax
   3fb5e:	cmp    BYTE PTR [rdi],0x0
   3fb61:	je     3fc20 <g_str_equal@plt+0x32960>
   3fb67:	lea    rbp,[rip+0x20bd7]        # 60745 <_fini@@Base+0xdff1>
   3fb6e:	lea    r13,[rip+0x13260]        # 52dd5 <_fini@@Base+0x681>
   3fb75:	mov    rbx,rdi
   3fb78:	mov    r12,rsp
   3fb7b:	mov    rdi,rbx
   3fb7e:	mov    rsi,r12
   3fb81:	call   3f3b0 <g_str_equal@plt+0x320f0>
   3fb86:	mov    rdx,QWORD PTR [rsp]
   3fb8a:	cmp    BYTE PTR [rax],0x1
   3fb8d:	mov    rbx,rax
   3fb90:	mov    ecx,0x2
   3fb95:	mov    rdi,rbp
   3fb98:	mov    rsi,rdx
   3fb9b:	sbb    rbx,0xffffffffffffffff
   3fb9f:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   3fba1:	seta   al
   3fba4:	sbb    al,0x0
   3fba6:	test   al,al
   3fba8:	je     3fbe8 <g_str_equal@plt+0x32928>
   3fbaa:	mov    ecx,0x5
   3fbaf:	mov    rsi,rdx
   3fbb2:	mov    rdi,r13
   3fbb5:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   3fbb7:	mov    rdi,rdx
   3fbba:	seta   r14b
   3fbbe:	sbb    r14b,0x0
   3fbc2:	movsx  r14d,r14b
   3fbc6:	test   r14d,r14d
   3fbc9:	sete   r15b
   3fbcd:	call   d2b0 <g_free@plt>
   3fbd2:	cmp    BYTE PTR [rbx],0x0
   3fbd5:	je     3fbf6 <g_str_equal@plt+0x32936>
   3fbd7:	test   r14d,r14d
   3fbda:	jne    3fb7b <g_str_equal@plt+0x328bb>
   3fbdc:	mov    r15d,0x1
   3fbe2:	jmp    3fbf6 <g_str_equal@plt+0x32936>
   3fbe4:	nop    DWORD PTR [rax+0x0]
   3fbe8:	mov    rdi,rdx
   3fbeb:	mov    r15d,0x1
   3fbf1:	call   d2b0 <g_free@plt>
   3fbf6:	mov    rcx,QWORD PTR [rsp+0x8]
   3fbfb:	xor    rcx,QWORD PTR fs:0x28
   3fc04:	mov    eax,r15d
   3fc07:	jne    3fc25 <g_str_equal@plt+0x32965>
   3fc09:	add    rsp,0x18
   3fc0d:	pop    rbx
   3fc0e:	pop    rbp
   3fc0f:	pop    r12
   3fc11:	pop    r13
   3fc13:	pop    r14
   3fc15:	pop    r15
   3fc17:	ret    
   3fc18:	nop    DWORD PTR [rax+rax*1+0x0]
   3fc20:	xor    r15d,r15d
   3fc23:	jmp    3fbf6 <g_str_equal@plt+0x32936>
   3fc25:	call   cd30 <__stack_chk_fail@plt>
   3fc2a:	nop    WORD PTR [rax+rax*1+0x0]
   3fc30:	push   rbp
   3fc31:	push   rbx
   3fc32:	sub    rsp,0x18
   3fc36:	mov    rax,QWORD PTR fs:0x28
   3fc3f:	mov    QWORD PTR [rsp+0x8],rax
   3fc44:	xor    eax,eax
   3fc46:	cmp    BYTE PTR [rdi],0x0
   3fc49:	mov    QWORD PTR [rsp],0x0
   3fc51:	je     3fca1 <g_str_equal@plt+0x329e1>
   3fc53:	mov    rbx,rdi
   3fc56:	mov    rbp,rsp
   3fc59:	nop    DWORD PTR [rax+0x0]
   3fc60:	mov    rdi,rbx
   3fc63:	mov    rsi,rbp
   3fc66:	call   3f3b0 <g_str_equal@plt+0x320f0>
   3fc6b:	cmp    BYTE PTR [rax],0x0
   3fc6e:	mov    rbx,rax
   3fc71:	je     3fc80 <g_str_equal@plt+0x329c0>
   3fc73:	cmp    BYTE PTR [rbx+0x1],0x0
   3fc77:	lea    rax,[rax+0x1]
   3fc7b:	je     3fcd8 <g_str_equal@plt+0x32a18>
   3fc7d:	mov    rbx,rax
   3fc80:	mov    rdi,QWORD PTR [rsp]
   3fc84:	movzx  eax,BYTE PTR [rdi]
   3fc87:	test   al,al
   3fc89:	je     3fcd0 <g_str_equal@plt+0x32a10>
   3fc8b:	cmp    al,0x2c
   3fc8d:	je     3fcd0 <g_str_equal@plt+0x32a10>
   3fc8f:	call   d2b0 <g_free@plt>
   3fc94:	mov    QWORD PTR [rsp],0x0
   3fc9c:	cmp    BYTE PTR [rbx],0x0
   3fc9f:	jne    3fc60 <g_str_equal@plt+0x329a0>
   3fca1:	xor    edi,edi
   3fca3:	mov    ebx,0x1
   3fca8:	call   d2b0 <g_free@plt>
   3fcad:	mov    rdx,QWORD PTR [rsp+0x8]
   3fcb2:	xor    rdx,QWORD PTR fs:0x28
   3fcbb:	mov    eax,ebx
   3fcbd:	jne    3fce0 <g_str_equal@plt+0x32a20>
   3fcbf:	add    rsp,0x18
   3fcc3:	pop    rbx
   3fcc4:	pop    rbp
   3fcc5:	ret    
   3fcc6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3fcd0:	xor    ebx,ebx
   3fcd2:	jmp    3fca8 <g_str_equal@plt+0x329e8>
   3fcd4:	nop    DWORD PTR [rax+0x0]
   3fcd8:	mov    rdi,QWORD PTR [rsp]
   3fcdc:	xor    ebx,ebx
   3fcde:	jmp    3fca8 <g_str_equal@plt+0x329e8>
   3fce0:	call   cd30 <__stack_chk_fail@plt>
   3fce5:	nop
   3fce6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3fcf0:	push   rbp
   3fcf1:	push   rbx
   3fcf2:	sub    rsp,0x8
   3fcf6:	test   rdi,rdi
   3fcf9:	je     3fd43 <g_str_equal@plt+0x32a83>
   3fcfb:	lea    rbx,[rdi+0x28]
   3fcff:	lea    rbp,[rip+0x232cc]        # 62fd2 <_fini@@Base+0x1087e>
   3fd06:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3fd10:	mov    rdx,QWORD PTR [rbx]
   3fd13:	test   rdx,rdx
   3fd16:	je     3fd3c <g_str_equal@plt+0x32a7c>
   3fd18:	mov    rcx,QWORD PTR [rbx+0x10]
   3fd1c:	lea    rsi,[rip+0x232c8]        # 62feb <_fini@@Base+0x10897>
   3fd23:	mov    edi,0x1
   3fd28:	test   rcx,rcx
   3fd2b:	cmove  rcx,rbp
   3fd2f:	xor    eax,eax
   3fd31:	call   c3a0 <__printf_chk@plt>
   3fd36:	add    rbx,0x20
   3fd3a:	jne    3fd10 <g_str_equal@plt+0x32a50>
   3fd3c:	add    rsp,0x8
   3fd40:	pop    rbx
   3fd41:	pop    rbp
   3fd42:	ret    
   3fd43:	lea    rcx,[rip+0x23536]        # 63280 <_fini@@Base+0x10b2c>
   3fd4a:	lea    rsi,[rip+0x2303f]        # 62d90 <_fini@@Base+0x1063c>
   3fd51:	lea    rdi,[rip+0x24200]        # 63f58 <_fini@@Base+0x11804>
   3fd58:	mov    edx,0xd7
   3fd5d:	call   c390 <__assert_fail@plt>
   3fd62:	nop    DWORD PTR [rax+0x0]
   3fd66:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3fd70:	push   rbp
   3fd71:	push   rbx
   3fd72:	sub    rsp,0x8
   3fd76:	mov    rax,QWORD PTR [rdi+0x30]
   3fd7a:	mov    rax,QWORD PTR [rax+0x8]
   3fd7e:	mov    rbx,QWORD PTR [rax]
   3fd81:	test   rbx,rbx
   3fd84:	je     3fd98 <g_str_equal@plt+0x32ad8>
   3fd86:	mov    rbp,rsi
   3fd89:	mov    rdi,QWORD PTR [rbx]
   3fd8c:	mov    rsi,rbp
   3fd8f:	call   cd60 <strcmp@plt>
   3fd94:	test   eax,eax
   3fd96:	jne    3fda8 <g_str_equal@plt+0x32ae8>
   3fd98:	add    rsp,0x8
   3fd9c:	mov    rax,rbx
   3fd9f:	pop    rbx
   3fda0:	pop    rbp
   3fda1:	ret    
   3fda2:	nop    WORD PTR [rax+rax*1+0x0]
   3fda8:	mov    rax,QWORD PTR [rbx+0x30]
   3fdac:	mov    rax,QWORD PTR [rax+0x8]
   3fdb0:	mov    rbx,QWORD PTR [rax]
   3fdb3:	test   rbx,rbx
   3fdb6:	jne    3fd89 <g_str_equal@plt+0x32ac9>
   3fdb8:	jmp    3fd98 <g_str_equal@plt+0x32ad8>
   3fdba:	nop    WORD PTR [rax+rax*1+0x0]
   3fdc0:	push   r13
   3fdc2:	push   r12
   3fdc4:	push   rbp
   3fdc5:	push   rbx
   3fdc6:	sub    rsp,0x18
   3fdca:	mov    rax,QWORD PTR fs:0x28
   3fdd3:	mov    QWORD PTR [rsp+0x8],rax
   3fdd8:	xor    eax,eax
   3fdda:	test   rdi,rdi
   3fddd:	mov    BYTE PTR [rsp+0x7],dl
   3fde1:	je     3fe40 <g_str_equal@plt+0x32b80>
   3fde3:	mov    rbx,rdi
   3fde6:	mov    rbp,rsi
   3fde9:	mov    r12d,ecx
   3fdec:	mov    r13d,edx
   3fdef:	call   3fd70 <g_str_equal@plt+0x32ab0>
   3fdf4:	test   rax,rax
   3fdf7:	je     3fe48 <g_str_equal@plt+0x32b88>
   3fdf9:	mov    rdx,QWORD PTR [rax+0x10]
   3fdfd:	test   rdx,rdx
   3fe00:	je     3fe9e <g_str_equal@plt+0x32bde>
   3fe06:	cmp    DWORD PTR [rdx+0x8],0x1
   3fe0a:	jne    3fe9e <g_str_equal@plt+0x32bde>
   3fe10:	movzx  eax,BYTE PTR [rax+0x18]
   3fe14:	test   r12b,r12b
   3fe17:	mov    BYTE PTR [rsp+0x7],al
   3fe1b:	jne    3fe88 <g_str_equal@plt+0x32bc8>
   3fe1d:	mov    rcx,QWORD PTR [rsp+0x8]
   3fe22:	xor    rcx,QWORD PTR fs:0x28
   3fe2b:	jne    3febd <g_str_equal@plt+0x32bfd>
   3fe31:	add    rsp,0x18
   3fe35:	pop    rbx
   3fe36:	pop    rbp
   3fe37:	pop    r12
   3fe39:	pop    r13
   3fe3b:	ret    
   3fe3c:	nop    DWORD PTR [rax+0x0]
   3fe40:	mov    eax,edx
   3fe42:	jmp    3fe1d <g_str_equal@plt+0x32b5d>
   3fe44:	nop    DWORD PTR [rax+0x0]
   3fe48:	mov    rdi,QWORD PTR [rbx+0x8]
   3fe4c:	mov    rsi,rbp
   3fe4f:	add    rdi,0x28
   3fe53:	call   3f070 <g_str_equal@plt+0x31db0>
   3fe58:	test   rax,rax
   3fe5b:	je     3fe80 <g_str_equal@plt+0x32bc0>
   3fe5d:	mov    rsi,QWORD PTR [rax+0x18]
   3fe61:	test   rsi,rsi
   3fe64:	je     3fe80 <g_str_equal@plt+0x32bc0>
   3fe66:	lea    rdx,[rsp+0x7]
   3fe6b:	lea    rcx,[rip+0x245e16]        # 285c88 <stdout@@GLIBC_2.2.5+0x1340>
   3fe72:	mov    rdi,rbp
   3fe75:	call   3f260 <g_str_equal@plt+0x31fa0>
   3fe7a:	movzx  r13d,BYTE PTR [rsp+0x7]
   3fe80:	mov    eax,r13d
   3fe83:	jmp    3fe1d <g_str_equal@plt+0x32b5d>
   3fe85:	nop    DWORD PTR [rax]
   3fe88:	mov    rdi,QWORD PTR [rbx+0x28]
   3fe8c:	mov    rsi,rbp
   3fe8f:	call   3f200 <g_str_equal@plt+0x31f40>
   3fe94:	movzx  eax,BYTE PTR [rsp+0x7]
   3fe99:	jmp    3fe1d <g_str_equal@plt+0x32b5d>
   3fe9e:	lea    rcx,[rip+0x233bb]        # 63260 <_fini@@Base+0x10b0c>
   3fea5:	lea    rsi,[rip+0x22ee4]        # 62d90 <_fini@@Base+0x1063c>
   3feac:	lea    rdi,[rip+0x22fdd]        # 62e90 <_fini@@Base+0x1073c>
   3feb3:	mov    edx,0x162
   3feb8:	call   c390 <__assert_fail@plt>
   3febd:	call   cd30 <__stack_chk_fail@plt>
   3fec2:	nop    DWORD PTR [rax+0x0]
   3fec6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3fed0:	push   r13
   3fed2:	push   r12
   3fed4:	push   rbp
   3fed5:	push   rbx
   3fed6:	mov    rbx,rdx
   3fed9:	sub    rsp,0x18
   3fedd:	mov    rax,QWORD PTR fs:0x28
   3fee6:	mov    QWORD PTR [rsp+0x8],rax
   3feeb:	xor    eax,eax
   3feed:	test   rdi,rdi
   3fef0:	mov    QWORD PTR [rsp],rdx
   3fef4:	je     3ff78 <g_str_equal@plt+0x32cb8>
   3fefa:	mov    rbp,rdi
   3fefd:	mov    r12,rsi
   3ff00:	mov    r13d,ecx
   3ff03:	call   3fd70 <g_str_equal@plt+0x32ab0>
   3ff08:	test   rax,rax
   3ff0b:	je     3ff40 <g_str_equal@plt+0x32c80>
   3ff0d:	mov    rdx,QWORD PTR [rax+0x10]
   3ff11:	test   rdx,rdx
   3ff14:	je     3ff9b <g_str_equal@plt+0x32cdb>
   3ff1a:	cmp    DWORD PTR [rdx+0x8],0x2
   3ff1e:	jne    3ff9b <g_str_equal@plt+0x32cdb>
   3ff20:	mov    rax,QWORD PTR [rax+0x18]
   3ff24:	test   r13b,r13b
   3ff27:	mov    QWORD PTR [rsp],rax
   3ff2b:	je     3ff7b <g_str_equal@plt+0x32cbb>
   3ff2d:	mov    rdi,QWORD PTR [rbp+0x28]
   3ff31:	mov    rsi,r12
   3ff34:	call   3f200 <g_str_equal@plt+0x31f40>
   3ff39:	mov    rax,QWORD PTR [rsp]
   3ff3d:	jmp    3ff7b <g_str_equal@plt+0x32cbb>
   3ff3f:	nop
   3ff40:	mov    rdi,QWORD PTR [rbp+0x8]
   3ff44:	mov    rsi,r12
   3ff47:	add    rdi,0x28
   3ff4b:	call   3f070 <g_str_equal@plt+0x31db0>
   3ff50:	test   rax,rax
   3ff53:	je     3ff78 <g_str_equal@plt+0x32cb8>
   3ff55:	mov    rsi,QWORD PTR [rax+0x18]
   3ff59:	test   rsi,rsi
   3ff5c:	je     3ff78 <g_str_equal@plt+0x32cb8>
   3ff5e:	lea    rcx,[rip+0x245d23]        # 285c88 <stdout@@GLIBC_2.2.5+0x1340>
   3ff65:	mov    rdx,rsp
   3ff68:	mov    rdi,r12
   3ff6b:	call   3f0d0 <g_str_equal@plt+0x31e10>
   3ff70:	mov    rbx,QWORD PTR [rsp]
   3ff74:	nop    DWORD PTR [rax+0x0]
   3ff78:	mov    rax,rbx
   3ff7b:	mov    rcx,QWORD PTR [rsp+0x8]
   3ff80:	xor    rcx,QWORD PTR fs:0x28
   3ff89:	jne    3ff96 <g_str_equal@plt+0x32cd6>
   3ff8b:	add    rsp,0x18
   3ff8f:	pop    rbx
   3ff90:	pop    rbp
   3ff91:	pop    r12
   3ff93:	pop    r13
   3ff95:	ret    
   3ff96:	call   cd30 <__stack_chk_fail@plt>
   3ff9b:	lea    rcx,[rip+0x2327e]        # 63220 <_fini@@Base+0x10acc>
   3ffa2:	lea    rsi,[rip+0x22de7]        # 62d90 <_fini@@Base+0x1063c>
   3ffa9:	lea    rdi,[rip+0x22f10]        # 62ec0 <_fini@@Base+0x1076c>
   3ffb0:	mov    edx,0x186
   3ffb5:	call   c390 <__assert_fail@plt>
   3ffba:	nop    WORD PTR [rax+rax*1+0x0]
   3ffc0:	push   r13
   3ffc2:	push   r12
   3ffc4:	push   rbp
   3ffc5:	push   rbx
   3ffc6:	mov    rbx,rdx
   3ffc9:	sub    rsp,0x18
   3ffcd:	mov    rax,QWORD PTR fs:0x28
   3ffd6:	mov    QWORD PTR [rsp+0x8],rax
   3ffdb:	xor    eax,eax
   3ffdd:	test   rdi,rdi
   3ffe0:	mov    QWORD PTR [rsp],rdx
   3ffe4:	je     40068 <g_str_equal@plt+0x32da8>
   3ffea:	mov    rbp,rdi
   3ffed:	mov    r12,rsi
   3fff0:	mov    r13d,ecx
   3fff3:	call   3fd70 <g_str_equal@plt+0x32ab0>
   3fff8:	test   rax,rax
   3fffb:	je     40030 <g_str_equal@plt+0x32d70>
   3fffd:	mov    rdx,QWORD PTR [rax+0x10]
   40001:	test   rdx,rdx
   40004:	je     4008b <g_str_equal@plt+0x32dcb>
   4000a:	cmp    DWORD PTR [rdx+0x8],0x3
   4000e:	jne    4008b <g_str_equal@plt+0x32dcb>
   40010:	mov    rax,QWORD PTR [rax+0x18]
   40014:	test   r13b,r13b
   40017:	mov    QWORD PTR [rsp],rax
   4001b:	je     4006b <g_str_equal@plt+0x32dab>
   4001d:	mov    rdi,QWORD PTR [rbp+0x28]
   40021:	mov    rsi,r12
   40024:	call   3f200 <g_str_equal@plt+0x31f40>
   40029:	mov    rax,QWORD PTR [rsp]
   4002d:	jmp    4006b <g_str_equal@plt+0x32dab>
   4002f:	nop
   40030:	mov    rdi,QWORD PTR [rbp+0x8]
   40034:	mov    rsi,r12
   40037:	add    rdi,0x28
   4003b:	call   3f070 <g_str_equal@plt+0x31db0>
   40040:	test   rax,rax
   40043:	je     40068 <g_str_equal@plt+0x32da8>
   40045:	mov    rsi,QWORD PTR [rax+0x18]
   40049:	test   rsi,rsi
   4004c:	je     40068 <g_str_equal@plt+0x32da8>
   4004e:	lea    rcx,[rip+0x245c33]        # 285c88 <stdout@@GLIBC_2.2.5+0x1340>
   40055:	mov    rdx,rsp
   40058:	mov    rdi,r12
   4005b:	call   3f470 <g_str_equal@plt+0x321b0>
   40060:	mov    rbx,QWORD PTR [rsp]
   40064:	nop    DWORD PTR [rax+0x0]
   40068:	mov    rax,rbx
   4006b:	mov    rcx,QWORD PTR [rsp+0x8]
   40070:	xor    rcx,QWORD PTR fs:0x28
   40079:	jne    40086 <g_str_equal@plt+0x32dc6>
   4007b:	add    rsp,0x18
   4007f:	pop    rbx
   40080:	pop    rbp
   40081:	pop    r12
   40083:	pop    r13
   40085:	ret    
   40086:	call   cd30 <__stack_chk_fail@plt>
   4008b:	lea    rcx,[rip+0x2314e]        # 631e0 <_fini@@Base+0x10a8c>
   40092:	lea    rsi,[rip+0x22cf7]        # 62d90 <_fini@@Base+0x1063c>
   40099:	lea    rdi,[rip+0x22e50]        # 62ef0 <_fini@@Base+0x1079c>
   400a0:	mov    edx,0x1ab
   400a5:	call   c390 <__assert_fail@plt>
   400aa:	nop    WORD PTR [rax+rax*1+0x0]
   400b0:	test   rdi,rdi
   400b3:	je     40108 <g_str_equal@plt+0x32e48>
   400b5:	push   rbp
   400b6:	push   rbx
   400b7:	mov    rbp,rsi
   400ba:	mov    rbx,rdi
   400bd:	sub    rsp,0x8
   400c1:	call   3fd70 <g_str_equal@plt+0x32ab0>
   400c6:	test   rax,rax
   400c9:	je     400e0 <g_str_equal@plt+0x32e20>
   400cb:	mov    rax,QWORD PTR [rax+0x8]
   400cf:	add    rsp,0x8
   400d3:	pop    rbx
   400d4:	pop    rbp
   400d5:	ret    
   400d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   400e0:	mov    rdi,QWORD PTR [rbx+0x8]
   400e4:	mov    rsi,rbp
   400e7:	add    rdi,0x28
   400eb:	call   3f070 <g_str_equal@plt+0x31db0>
   400f0:	mov    rdx,rax
   400f3:	xor    eax,eax
   400f5:	test   rdx,rdx
   400f8:	je     400cf <g_str_equal@plt+0x32e0f>
   400fa:	mov    rax,QWORD PTR [rdx+0x18]
   400fe:	add    rsp,0x8
   40102:	pop    rbx
   40103:	pop    rbp
   40104:	ret    
   40105:	nop    DWORD PTR [rax]
   40108:	xor    eax,eax
   4010a:	ret    
   4010b:	nop    DWORD PTR [rax+rax*1+0x0]
   40110:	mov    QWORD PTR [rdi],rsi
   40113:	mov    rax,QWORD PTR [rsi+0x28]
   40117:	mov    QWORD PTR [rdi+0x10],rdx
   4011b:	mov    QWORD PTR [rdi+0x8],rax
   4011f:	ret    
   40120:	push   rbp
   40121:	push   rbx
   40122:	mov    rbp,rdi
   40125:	sub    rsp,0x8
   40129:	mov    rbx,QWORD PTR [rdi+0x8]
   4012d:	mov    rdi,QWORD PTR [rdi+0x10]
   40131:	test   rdi,rdi
   40134:	je     40170 <g_str_equal@plt+0x32eb0>
   40136:	test   rbx,rbx
   40139:	jne    4014d <g_str_equal@plt+0x32e8d>
   4013b:	jmp    40175 <g_str_equal@plt+0x32eb5>
   4013d:	nop    DWORD PTR [rax]
   40140:	mov    rbx,QWORD PTR [rbx+0x28]
   40144:	test   rbx,rbx
   40147:	je     40175 <g_str_equal@plt+0x32eb5>
   40149:	mov    rdi,QWORD PTR [rbp+0x10]
   4014d:	mov    rsi,QWORD PTR [rbx]
   40150:	call   d2c0 <g_str_equal@plt>
   40155:	test   eax,eax
   40157:	je     40140 <g_str_equal@plt+0x32e80>
   40159:	mov    rax,QWORD PTR [rbx+0x28]
   4015d:	mov    QWORD PTR [rbp+0x8],rax
   40161:	mov    rax,QWORD PTR [rbx+0x8]
   40165:	add    rsp,0x8
   40169:	pop    rbx
   4016a:	pop    rbp
   4016b:	ret    
   4016c:	nop    DWORD PTR [rax+0x0]
   40170:	test   rbx,rbx
   40173:	jne    40159 <g_str_equal@plt+0x32e99>
   40175:	mov    QWORD PTR [rbp+0x8],0x0
   4017d:	add    rsp,0x8
   40181:	xor    eax,eax
   40183:	pop    rbx
   40184:	pop    rbp
   40185:	ret    
   40186:	nop    WORD PTR cs:[rax+rax*1+0x0]
   40190:	test   rdi,rdi
   40193:	push   r12
   40195:	push   rbp
   40196:	push   rbx
   40197:	je     40200 <g_str_equal@plt+0x32f40>
   40199:	mov    rbp,rsi
   4019c:	mov    rbx,rdi
   4019f:	call   3fd70 <g_str_equal@plt+0x32ab0>
   401a4:	test   rax,rax
   401a7:	je     401d0 <g_str_equal@plt+0x32f10>
   401a9:	mov    r12,QWORD PTR [rax+0x8]
   401ad:	mov    QWORD PTR [rax+0x8],0x0
   401b5:	mov    rsi,rbp
   401b8:	mov    rdi,QWORD PTR [rbx+0x28]
   401bc:	call   3f200 <g_str_equal@plt+0x31f40>
   401c1:	mov    rax,r12
   401c4:	pop    rbx
   401c5:	pop    rbp
   401c6:	pop    r12
   401c8:	ret    
   401c9:	nop    DWORD PTR [rax+0x0]
   401d0:	mov    rdi,QWORD PTR [rbx+0x8]
   401d4:	mov    rsi,rbp
   401d7:	add    rdi,0x28
   401db:	call   3f070 <g_str_equal@plt+0x31db0>
   401e0:	test   rax,rax
   401e3:	je     40200 <g_str_equal@plt+0x32f40>
   401e5:	mov    rdi,QWORD PTR [rax+0x18]
   401e9:	test   rdi,rdi
   401ec:	je     40200 <g_str_equal@plt+0x32f40>
   401ee:	pop    rbx
   401ef:	pop    rbp
   401f0:	pop    r12
   401f2:	jmp    c370 <g_strdup@plt>
   401f7:	nop    WORD PTR [rax+rax*1+0x0]
   40200:	xor    r12d,r12d
   40203:	mov    rax,r12
   40206:	pop    rbx
   40207:	pop    rbp
   40208:	pop    r12
   4020a:	ret    
   4020b:	nop    DWORD PTR [rax+rax*1+0x0]
   40210:	mov    rax,QWORD PTR [rdi+0x30]
   40214:	mov    rax,QWORD PTR [rax+0x8]
   40218:	mov    rax,QWORD PTR [rax]
   4021b:	test   rax,rax
   4021e:	je     40288 <g_str_equal@plt+0x32fc8>
   40220:	lea    r9,[rip+0x2051e]        # 60745 <_fini@@Base+0xdff1>
   40227:	lea    r10,[rip+0x12ba7]        # 52dd5 <_fini@@Base+0x681>
   4022e:	jmp    40257 <g_str_equal@plt+0x32f97>
   40230:	mov    ecx,0x5
   40235:	mov    rsi,r8
   40238:	mov    rdi,r10
   4023b:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   4023d:	seta   dl
   40240:	sbb    dl,0x0
   40243:	test   dl,dl
   40245:	je     40271 <g_str_equal@plt+0x32fb1>
   40247:	mov    rax,QWORD PTR [rax+0x30]
   4024b:	mov    rax,QWORD PTR [rax+0x8]
   4024f:	mov    rax,QWORD PTR [rax]
   40252:	test   rax,rax
   40255:	je     40280 <g_str_equal@plt+0x32fc0>
   40257:	mov    r8,QWORD PTR [rax]
   4025a:	mov    ecx,0x2
   4025f:	mov    rdi,r9
   40262:	mov    rsi,r8
   40265:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   40267:	seta   dl
   4026a:	sbb    dl,0x0
   4026d:	test   dl,dl
   4026f:	jne    40230 <g_str_equal@plt+0x32f70>
   40271:	mov    eax,0x1
   40276:	ret    
   40277:	nop    WORD PTR [rax+rax*1+0x0]
   40280:	repz ret 
   40282:	nop    WORD PTR [rax+rax*1+0x0]
   40288:	xor    eax,eax
   4028a:	ret    
   4028b:	nop    DWORD PTR [rax+rax*1+0x0]
   40290:	movzx  edx,dl
   40293:	xor    ecx,ecx
   40295:	jmp    3fdc0 <g_str_equal@plt+0x32b00>
   4029a:	nop    WORD PTR [rax+rax*1+0x0]
   402a0:	movzx  edx,dl
   402a3:	mov    ecx,0x1
   402a8:	jmp    3fdc0 <g_str_equal@plt+0x32b00>
   402ad:	nop    DWORD PTR [rax]
   402b0:	xor    ecx,ecx
   402b2:	jmp    3fed0 <g_str_equal@plt+0x32c10>
   402b7:	nop    WORD PTR [rax+rax*1+0x0]
   402c0:	mov    ecx,0x1
   402c5:	jmp    3fed0 <g_str_equal@plt+0x32c10>
   402ca:	nop    WORD PTR [rax+rax*1+0x0]
   402d0:	xor    ecx,ecx
   402d2:	jmp    3ffc0 <g_str_equal@plt+0x32d00>
   402d7:	nop    WORD PTR [rax+rax*1+0x0]
   402e0:	mov    ecx,0x1
   402e5:	jmp    3ffc0 <g_str_equal@plt+0x32d00>
   402ea:	nop    WORD PTR [rax+rax*1+0x0]
   402f0:	push   rbx
   402f1:	mov    rbx,rdi
   402f4:	call   3fd70 <g_str_equal@plt+0x32ab0>
   402f9:	mov    rdx,QWORD PTR [rbx+0x8]
   402fd:	cmp    QWORD PTR [rdx+0x28],0x0
   40302:	jne    4031f <g_str_equal@plt+0x3305f>
   40304:	test   rax,rax
   40307:	je     40318 <g_str_equal@plt+0x33058>
   40309:	mov    rdi,rax
   4030c:	call   3f020 <g_str_equal@plt+0x31d60>
   40311:	xor    eax,eax
   40313:	pop    rbx
   40314:	ret    
   40315:	nop    DWORD PTR [rax]
   40318:	mov    eax,0xffffffff
   4031d:	pop    rbx
   4031e:	ret    
   4031f:	lea    rcx,[rip+0x22eaa]        # 631d0 <_fini@@Base+0x10a7c>
   40326:	lea    rsi,[rip+0x22a63]        # 62d90 <_fini@@Base+0x1063c>
   4032d:	lea    rdi,[rip+0x22cc1]        # 62ff5 <_fini@@Base+0x108a1>
   40334:	mov    edx,0x1de
   40339:	call   c390 <__assert_fail@plt>
   4033e:	xchg   ax,ax
   40340:	push   r12
   40342:	push   rbp
   40343:	mov    r12,rcx
   40346:	push   rbx
   40347:	mov    rbp,rsi
   4034a:	mov    rbx,rdi
   4034d:	mov    rdi,rdx
   40350:	call   c370 <g_strdup@plt>
   40355:	mov    r8,r12
   40358:	mov    rsi,rbp
   4035b:	mov    rdi,rbx
   4035e:	pop    rbx
   4035f:	pop    rbp
   40360:	pop    r12
   40362:	xor    ecx,ecx
   40364:	mov    rdx,rax
   40367:	jmp    3f5d0 <g_str_equal@plt+0x32310>
   4036c:	nop    DWORD PTR [rax+0x0]
   40370:	push   r15
   40372:	push   r14
   40374:	mov    r15,rcx
   40377:	push   r13
   40379:	push   r12
   4037b:	mov    r13,rsi
   4037e:	push   rbp
   4037f:	push   rbx
   40380:	mov    rbp,rdi
   40383:	mov    r14d,edx
   40386:	sub    rsp,0x8
   4038a:	mov    rax,QWORD PTR [rdi+0x8]
   4038e:	mov    edi,0x38
   40393:	lea    r12,[rax+0x28]
   40397:	call   ce00 <g_malloc0@plt>
   4039c:	mov    rsi,r13
   4039f:	mov    rdi,r12
   403a2:	mov    rbx,rax
   403a5:	call   3f070 <g_str_equal@plt+0x31db0>
   403aa:	test   rax,rax
   403ad:	mov    QWORD PTR [rbx+0x10],rax
   403b1:	je     40410 <g_str_equal@plt+0x33150>
   403b3:	mov    rdi,r13
   403b6:	call   c370 <g_strdup@plt>
   403bb:	lea    rdi,[rip+0x22276]        # 62638 <_fini@@Base+0xfee4>
   403c2:	mov    QWORD PTR [rbx],rax
   403c5:	lea    rax,[rip+0x22270]        # 6263c <_fini@@Base+0xfee8>
   403cc:	test   r14b,r14b
   403cf:	mov    QWORD PTR [rbx+0x20],rbp
   403d3:	mov    BYTE PTR [rbx+0x18],r14b
   403d7:	cmove  rdi,rax
   403db:	call   c370 <g_strdup@plt>
   403e0:	mov    QWORD PTR [rbx+0x8],rax
   403e4:	mov    rax,QWORD PTR [rbp+0x30]
   403e8:	mov    QWORD PTR [rbx+0x28],0x0
   403f0:	mov    QWORD PTR [rbx+0x30],rax
   403f4:	mov    QWORD PTR [rax],rbx
   403f7:	add    rbx,0x28
   403fb:	mov    QWORD PTR [rbp+0x30],rbx
   403ff:	add    rsp,0x8
   40403:	pop    rbx
   40404:	pop    rbp
   40405:	pop    r12
   40407:	pop    r13
   40409:	pop    r14
   4040b:	pop    r15
   4040d:	ret    
   4040e:	xchg   ax,ax
   40410:	mov    rax,QWORD PTR [rbp+0x8]
   40414:	cmp    QWORD PTR [rax+0x28],0x0
   40419:	je     403b3 <g_str_equal@plt+0x330f3>
   4041b:	lea    r8,[rip+0x1dd59]        # 5e17b <_fini@@Base+0xba27>
   40422:	lea    rcx,[rip+0x22d87]        # 631b0 <_fini@@Base+0x10a5c>
   40429:	lea    rsi,[rip+0x22960]        # 62d90 <_fini@@Base+0x1063c>
   40430:	mov    rdi,r15
   40433:	mov    r9,r13
   40436:	mov    edx,0x216
   4043b:	xor    eax,eax
   4043d:	call   3a090 <g_str_equal@plt+0x2cdd0>
   40442:	add    rsp,0x8
   40446:	mov    rdi,rbx
   40449:	pop    rbx
   4044a:	pop    rbp
   4044b:	pop    r12
   4044d:	pop    r13
   4044f:	pop    r14
   40451:	pop    r15
   40453:	jmp    d2b0 <g_free@plt>
   40458:	nop    DWORD PTR [rax+rax*1+0x0]
   40460:	push   r15
   40462:	push   r14
   40464:	mov    r15,rcx
   40467:	push   r13
   40469:	push   r12
   4046b:	mov    r13,rsi
   4046e:	push   rbp
   4046f:	push   rbx
   40470:	mov    rbp,rdi
   40473:	mov    r14,rdx
   40476:	sub    rsp,0x8
   4047a:	mov    rax,QWORD PTR [rdi+0x8]
   4047e:	mov    edi,0x38
   40483:	lea    r12,[rax+0x28]
   40487:	call   ce00 <g_malloc0@plt>
   4048c:	mov    rsi,r13
   4048f:	mov    rdi,r12
   40492:	mov    rbx,rax
   40495:	call   3f070 <g_str_equal@plt+0x31db0>
   4049a:	test   rax,rax
   4049d:	mov    QWORD PTR [rbx+0x10],rax
   404a1:	je     404f8 <g_str_equal@plt+0x33238>
   404a3:	mov    rdi,r13
   404a6:	call   c370 <g_strdup@plt>
   404ab:	lea    rdi,[rip+0x1f0af]        # 5f561 <_fini@@Base+0xce0d>
   404b2:	mov    QWORD PTR [rbx],rax
   404b5:	mov    QWORD PTR [rbx+0x20],rbp
   404b9:	mov    QWORD PTR [rbx+0x18],r14
   404bd:	mov    rsi,r14
   404c0:	xor    eax,eax
   404c2:	call   c740 <g_strdup_printf@plt>
   404c7:	mov    QWORD PTR [rbx+0x8],rax
   404cb:	mov    rax,QWORD PTR [rbp+0x30]
   404cf:	mov    QWORD PTR [rbx+0x28],0x0
   404d7:	mov    QWORD PTR [rbx+0x30],rax
   404db:	mov    QWORD PTR [rax],rbx
   404de:	add    rbx,0x28
   404e2:	mov    QWORD PTR [rbp+0x30],rbx
   404e6:	add    rsp,0x8
   404ea:	pop    rbx
   404eb:	pop    rbp
   404ec:	pop    r12
   404ee:	pop    r13
   404f0:	pop    r14
   404f2:	pop    r15
   404f4:	ret    
   404f5:	nop    DWORD PTR [rax]
   404f8:	mov    rax,QWORD PTR [rbp+0x8]
   404fc:	cmp    QWORD PTR [rax+0x28],0x0
   40501:	je     404a3 <g_str_equal@plt+0x331e3>
   40503:	lea    r8,[rip+0x1dc71]        # 5e17b <_fini@@Base+0xba27>
   4050a:	lea    rcx,[rip+0x22c7f]        # 63190 <_fini@@Base+0x10a3c>
   40511:	lea    rsi,[rip+0x22878]        # 62d90 <_fini@@Base+0x1063c>
   40518:	mov    rdi,r15
   4051b:	mov    r9,r13
   4051e:	mov    edx,0x22b
   40523:	xor    eax,eax
   40525:	call   3a090 <g_str_equal@plt+0x2cdd0>
   4052a:	add    rsp,0x8
   4052e:	mov    rdi,rbx
   40531:	pop    rbx
   40532:	pop    rbp
   40533:	pop    r12
   40535:	pop    r13
   40537:	pop    r14
   40539:	pop    r15
   4053b:	jmp    d2b0 <g_free@plt>
   40540:	push   r13
   40542:	push   r12
   40544:	push   rbp
   40545:	push   rbx
   40546:	sub    rsp,0x8
   4054a:	mov    rbx,QWORD PTR [rdi+0x28]
   4054e:	test   rbx,rbx
   40551:	je     40598 <g_str_equal@plt+0x332d8>
   40553:	mov    r13,rsi
   40556:	mov    r12,rdx
   40559:	mov    rbp,rcx
   4055c:	jmp    40575 <g_str_equal@plt+0x332b5>
   4055e:	xchg   ax,ax
   40560:	test   rbp,rbp
   40563:	je     4056c <g_str_equal@plt+0x332ac>
   40565:	cmp    QWORD PTR [rbp+0x0],0x0
   4056a:	jne    405a5 <g_str_equal@plt+0x332e5>
   4056c:	mov    rbx,QWORD PTR [rbx+0x28]
   40570:	test   rbx,rbx
   40573:	je     40598 <g_str_equal@plt+0x332d8>
   40575:	mov    rdx,QWORD PTR [rbx+0x8]
   40579:	mov    rcx,rbp
   4057c:	mov    rsi,QWORD PTR [rbx]
   4057f:	mov    rdi,r12
   40582:	call   r13
   40585:	test   eax,eax
   40587:	je     40560 <g_str_equal@plt+0x332a0>
   40589:	add    rsp,0x8
   4058d:	pop    rbx
   4058e:	pop    rbp
   4058f:	pop    r12
   40591:	pop    r13
   40593:	ret    
   40594:	nop    DWORD PTR [rax+0x0]
   40598:	add    rsp,0x8
   4059c:	xor    eax,eax
   4059e:	pop    rbx
   4059f:	pop    rbp
   405a0:	pop    r12
   405a2:	pop    r13
   405a4:	ret    
   405a5:	lea    rcx,[rip+0x22bc4]        # 63170 <_fini@@Base+0x10a1c>
   405ac:	lea    rsi,[rip+0x227dd]        # 62d90 <_fini@@Base+0x1063c>
   405b3:	lea    rdi,[rip+0x22a52]        # 6300c <_fini@@Base+0x108b8>
   405ba:	mov    edx,0x248
   405bf:	call   c390 <__assert_fail@plt>
   405c4:	xchg   ax,ax
   405c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   405d0:	push   rbp
   405d1:	push   rbx
   405d2:	sub    rsp,0x8
   405d6:	mov    rbx,QWORD PTR [rdi+0x18]
   405da:	test   rbx,rbx
   405dd:	je     4060f <g_str_equal@plt+0x3334f>
   405df:	mov    rbp,rsi
   405e2:	jmp    40602 <g_str_equal@plt+0x33342>
   405e4:	nop    DWORD PTR [rax+0x0]
   405e8:	test   rbp,rbp
   405eb:	je     405f9 <g_str_equal@plt+0x33339>
   405ed:	mov    rsi,rbp
   405f0:	call   cd60 <strcmp@plt>
   405f5:	test   eax,eax
   405f7:	je     4060f <g_str_equal@plt+0x3334f>
   405f9:	mov    rbx,QWORD PTR [rbx+0x38]
   405fd:	test   rbx,rbx
   40600:	je     4060f <g_str_equal@plt+0x3334f>
   40602:	mov    rdi,QWORD PTR [rbx]
   40605:	test   rdi,rdi
   40608:	jne    405e8 <g_str_equal@plt+0x33328>
   4060a:	test   rbp,rbp
   4060d:	jne    405f9 <g_str_equal@plt+0x33339>
   4060f:	add    rsp,0x8
   40613:	mov    rax,rbx
   40616:	pop    rbx
   40617:	pop    rbp
   40618:	ret    
   40619:	nop    DWORD PTR [rax+0x0]
   40620:	test   rsi,rsi
   40623:	push   r14
   40625:	push   r13
   40627:	push   r12
   40629:	mov    r12,rsi
   4062c:	push   rbp
   4062d:	mov    rbp,rdi
   40630:	push   rbx
   40631:	je     406e0 <g_str_equal@plt+0x33420>
   40637:	mov    rdi,rsi
   4063a:	mov    r13d,edx
   4063d:	mov    r14,rcx
   40640:	call   52530 <g_str_equal@plt+0x45270>
   40645:	test   al,al
   40647:	je     40720 <g_str_equal@plt+0x33460>
   4064d:	mov    rsi,r12
   40650:	mov    rdi,rbp
   40653:	call   405d0 <g_str_equal@plt+0x33310>
   40658:	test   rax,rax
   4065b:	mov    rbx,rax
   4065e:	je     40680 <g_str_equal@plt+0x333c0>
   40660:	test   r13d,r13d
   40663:	je     4066f <g_str_equal@plt+0x333af>
   40665:	cmp    BYTE PTR [rbp+0x10],0x0
   40669:	je     40771 <g_str_equal@plt+0x334b1>
   4066f:	mov    rax,rbx
   40672:	pop    rbx
   40673:	pop    rbp
   40674:	pop    r12
   40676:	pop    r13
   40678:	pop    r14
   4067a:	ret    
   4067b:	nop    DWORD PTR [rax+rax*1+0x0]
   40680:	mov    edi,0x48
   40685:	call   ce00 <g_malloc0@plt>
   4068a:	mov    rdi,r12
   4068d:	mov    rbx,rax
   40690:	call   c370 <g_strdup@plt>
   40695:	lea    rdi,[rbx+0x10]
   40699:	mov    QWORD PTR [rbx+0x8],rbp
   4069d:	mov    QWORD PTR [rbx],rax
   406a0:	call   3a950 <g_str_equal@plt+0x2d690>
   406a5:	lea    rax,[rbx+0x28]
   406a9:	mov    QWORD PTR [rbx+0x28],0x0
   406b1:	mov    QWORD PTR [rbx+0x38],0x0
   406b9:	mov    QWORD PTR [rbx+0x30],rax
   406bd:	mov    rax,QWORD PTR [rbp+0x20]
   406c1:	mov    QWORD PTR [rbx+0x40],rax
   406c5:	mov    QWORD PTR [rax],rbx
   406c8:	lea    rax,[rbx+0x38]
   406cc:	mov    QWORD PTR [rbp+0x20],rax
   406d0:	mov    rax,rbx
   406d3:	pop    rbx
   406d4:	pop    rbp
   406d5:	pop    r12
   406d7:	pop    r13
   406d9:	pop    r14
   406db:	ret    
   406dc:	nop    DWORD PTR [rax+0x0]
   406e0:	cmp    BYTE PTR [rdi+0x10],0x0
   406e4:	je     40680 <g_str_equal@plt+0x333c0>
   406e6:	mov    rbx,QWORD PTR [rdi+0x18]
   406ea:	test   rbx,rbx
   406ed:	jne    40705 <g_str_equal@plt+0x33445>
   406ef:	jmp    40680 <g_str_equal@plt+0x333c0>
   406f1:	nop    DWORD PTR [rax+0x0]
   406f8:	mov    rbx,QWORD PTR [rbx+0x38]
   406fc:	test   rbx,rbx
   406ff:	je     40680 <g_str_equal@plt+0x333c0>
   40705:	cmp    QWORD PTR [rbx],0x0
   40709:	jne    406f8 <g_str_equal@plt+0x33438>
   4070b:	mov    rax,rbx
   4070e:	pop    rbx
   4070f:	pop    rbp
   40710:	pop    r12
   40712:	pop    r13
   40714:	pop    r14
   40716:	ret    
   40717:	nop    WORD PTR [rax+rax*1+0x0]
   40720:	lea    rax,[rip+0x228f5]        # 6301c <_fini@@Base+0x108c8>
   40727:	sub    rsp,0x8
   4072b:	lea    rcx,[rip+0x22a1e]        # 63150 <_fini@@Base+0x109fc>
   40732:	lea    r9,[rip+0x24fa8]        # 656e1 <_fini@@Base+0x12f8d>
   40739:	lea    r8,[rip+0x1d9bd]        # 5e0fd <_fini@@Base+0xb9a9>
   40740:	lea    rsi,[rip+0x22649]        # 62d90 <_fini@@Base+0x1063c>
   40747:	push   rax
   40748:	mov    edx,0x264
   4074d:	mov    rdi,r14
   40750:	xor    eax,eax
   40752:	xor    ebx,ebx
   40754:	call   3a090 <g_str_equal@plt+0x2cdd0>
   40759:	lea    rsi,[rip+0x227c0]        # 62f20 <_fini@@Base+0x107cc>
   40760:	mov    rdi,r14
   40763:	xor    eax,eax
   40765:	call   39c60 <g_str_equal@plt+0x2c9a0>
   4076a:	pop    rcx
   4076b:	pop    rsi
   4076c:	jmp    4066f <g_str_equal@plt+0x333af>
   40771:	sub    rsp,0x8
   40775:	lea    r8,[rip+0x228ae]        # 6302a <_fini@@Base+0x108d6>
   4077c:	push   QWORD PTR [rbp+0x0]
   4077f:	lea    rcx,[rip+0x229ca]        # 63150 <_fini@@Base+0x109fc>
   40786:	lea    rsi,[rip+0x22603]        # 62d90 <_fini@@Base+0x1063c>
   4078d:	mov    edx,0x26c
   40792:	xor    eax,eax
   40794:	mov    r9,r12
   40797:	mov    rdi,r14
   4079a:	call   3a090 <g_str_equal@plt+0x2cdd0>
   4079f:	xor    ebx,ebx
   407a1:	pop    rax
   407a2:	pop    rdx
   407a3:	jmp    4066f <g_str_equal@plt+0x333af>
   407a8:	nop    DWORD PTR [rax+rax*1+0x0]
   407b0:	push   r15
   407b2:	push   r14
   407b4:	mov    r14,r8
   407b7:	push   r13
   407b9:	push   r12
   407bb:	mov    r12,rsi
   407be:	push   rbp
   407bf:	push   rbx
   407c0:	mov    rbp,rdi
   407c3:	mov    ebx,ecx
   407c5:	sub    rsp,0x28
   407c9:	mov    rax,QWORD PTR fs:0x28
   407d2:	mov    QWORD PTR [rsp+0x18],rax
   407d7:	xor    eax,eax
   407d9:	test   dl,dl
   407db:	mov    QWORD PTR [rsp+0x8],0x0
   407e4:	mov    QWORD PTR [rsp+0x10],0x0
   407ed:	je     408c8 <g_str_equal@plt+0x33608>
   407f3:	mov    r13,QWORD PTR [rdi+0x8]
   407f7:	test   r13,r13
   407fa:	je     408fc <g_str_equal@plt+0x3363c>
   40800:	lea    rdi,[rip+0x2283d]        # 63044 <_fini@@Base+0x108f0>
   40807:	mov    ecx,0x3
   4080c:	mov    rsi,r12
   4080f:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   40811:	seta   al
   40814:	sbb    al,0x0
   40816:	test   al,al
   40818:	je     408d0 <g_str_equal@plt+0x33610>
   4081e:	lea    rsi,[rip+0x2281e]        # 63043 <_fini@@Base+0x108ef>
   40825:	mov    rdi,r12
   40828:	call   ca40 <strstr@plt>
   4082d:	test   rax,rax
   40830:	je     40840 <g_str_equal@plt+0x33580>
   40832:	lea    rsi,[rsp+0x8]
   40837:	lea    rdi,[rax+0x4]
   4083b:	call   3f3b0 <g_str_equal@plt+0x320f0>
   40840:	mov    edx,ebx
   40842:	xor    edx,0x1
   40845:	test   bl,bl
   40847:	je     40853 <g_str_equal@plt+0x33593>
   40849:	cmp    BYTE PTR [rbp+0x10],0x0
   4084d:	je     40937 <g_str_equal@plt+0x33677>
   40853:	mov    rsi,QWORD PTR [rsp+0x8]
   40858:	lea    r15,[rsp+0x10]
   4085d:	mov    rdi,rbp
   40860:	movzx  edx,dl
   40863:	mov    rcx,r15
   40866:	call   40620 <g_str_equal@plt+0x33360>
   4086b:	mov    rdi,QWORD PTR [rsp+0x8]
   40870:	mov    rbp,rax
   40873:	call   d2b0 <g_free@plt>
   40878:	test   rbp,rbp
   4087b:	je     40920 <g_str_equal@plt+0x33660>
   40881:	mov    rsi,r12
   40884:	movzx  ecx,bl
   40887:	mov    r8,r15
   4088a:	mov    rdx,r13
   4088d:	mov    rdi,rbp
   40890:	call   3f740 <g_str_equal@plt+0x32480>
   40895:	mov    rsi,QWORD PTR [rsp+0x10]
   4089a:	test   rsi,rsi
   4089d:	jne    408e8 <g_str_equal@plt+0x33628>
   4089f:	mov    rbx,QWORD PTR [rsp+0x18]
   408a4:	xor    rbx,QWORD PTR fs:0x28
   408ad:	mov    rax,rbp
   408b0:	jne    40932 <g_str_equal@plt+0x33672>
   408b6:	add    rsp,0x28
   408ba:	pop    rbx
   408bb:	pop    rbp
   408bc:	pop    r12
   408be:	pop    r13
   408c0:	pop    r14
   408c2:	pop    r15
   408c4:	ret    
   408c5:	nop    DWORD PTR [rax]
   408c8:	xor    r13d,r13d
   408cb:	jmp    40800 <g_str_equal@plt+0x33540>
   408d0:	lea    rsi,[rsp+0x8]
   408d5:	lea    rdi,[r12+0x3]
   408da:	call   3f3b0 <g_str_equal@plt+0x320f0>
   408df:	jmp    40840 <g_str_equal@plt+0x33580>
   408e4:	nop    DWORD PTR [rax+0x0]
   408e8:	mov    rdi,r14
   408eb:	call   3a4c0 <g_str_equal@plt+0x2d200>
   408f0:	mov    rdi,rbp
   408f3:	xor    ebp,ebp
   408f5:	call   3f340 <g_str_equal@plt+0x32080>
   408fa:	jmp    4089f <g_str_equal@plt+0x335df>
   408fc:	lea    rcx,[rip+0x22825]        # 63128 <_fini@@Base+0x109d4>
   40903:	lea    rsi,[rip+0x22486]        # 62d90 <_fini@@Base+0x1063c>
   4090a:	lea    rdi,[rip+0x2265f]        # 62f70 <_fini@@Base+0x1081c>
   40911:	mov    edx,0x33d
   40916:	call   c390 <__assert_fail@plt>
   4091b:	nop    DWORD PTR [rax+rax*1+0x0]
   40920:	mov    rsi,QWORD PTR [rsp+0x10]
   40925:	mov    rdi,r14
   40928:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4092d:	jmp    4089f <g_str_equal@plt+0x335df>
   40932:	call   cd30 <__stack_chk_fail@plt>
   40937:	lea    rcx,[rip+0x227ea]        # 63128 <_fini@@Base+0x109d4>
   4093e:	lea    rsi,[rip+0x2244b]        # 62d90 <_fini@@Base+0x1063c>
   40945:	lea    rdi,[rip+0x22654]        # 62fa0 <_fini@@Base+0x1084c>
   4094c:	mov    edx,0x34d
   40951:	call   c390 <__assert_fail@plt>
   40956:	nop    WORD PTR cs:[rax+rax*1+0x0]
   40960:	mov    rdi,QWORD PTR [rdi+0x18]
   40964:	test   rdi,rdi
   40967:	je     40988 <g_str_equal@plt+0x336c8>
   40969:	push   rbx
   4096a:	nop    WORD PTR [rax+rax*1+0x0]
   40970:	mov    rbx,QWORD PTR [rdi+0x38]
   40974:	call   3f340 <g_str_equal@plt+0x32080>
   40979:	test   rbx,rbx
   4097c:	mov    rdi,rbx
   4097f:	jne    40970 <g_str_equal@plt+0x336b0>
   40981:	pop    rbx
   40982:	ret    
   40983:	nop    DWORD PTR [rax+rax*1+0x0]
   40988:	repz ret 
   4098a:	nop    WORD PTR [rax+rax*1+0x0]
   40990:	add    rdi,0x10
   40994:	jmp    3a970 <g_str_equal@plt+0x2d6b0>
   40999:	nop    DWORD PTR [rax+0x0]
   409a0:	push   r13
   409a2:	push   r12
   409a4:	mov    r12,r8
   409a7:	push   rbp
   409a8:	push   rbx
   409a9:	mov    rbp,rcx
   409ac:	mov    rbx,rdx
   409af:	mov    edx,0x1
   409b4:	sub    rsp,0x18
   409b8:	mov    rcx,rsp
   409bb:	mov    QWORD PTR [rsp],0x0
   409c3:	mov    rax,QWORD PTR fs:0x28
   409cc:	mov    QWORD PTR [rsp+0x8],rax
   409d1:	xor    eax,eax
   409d3:	call   40620 <g_str_equal@plt+0x33360>
   409d8:	mov    rsi,QWORD PTR [rsp]
   409dc:	test   rsi,rsi
   409df:	je     40a08 <g_str_equal@plt+0x33748>
   409e1:	mov    rdi,r12
   409e4:	call   3a4c0 <g_str_equal@plt+0x2d200>
   409e9:	mov    rax,QWORD PTR [rsp+0x8]
   409ee:	xor    rax,QWORD PTR fs:0x28
   409f7:	jne    40a28 <g_str_equal@plt+0x33768>
   409f9:	add    rsp,0x18
   409fd:	pop    rbx
   409fe:	pop    rbp
   409ff:	pop    r12
   40a01:	pop    r13
   40a03:	ret    
   40a04:	nop    DWORD PTR [rax+0x0]
   40a08:	mov    r13,rax
   40a0b:	mov    rdi,rbp
   40a0e:	call   c370 <g_strdup@plt>
   40a13:	mov    r8,r12
   40a16:	xor    ecx,ecx
   40a18:	mov    rdx,rax
   40a1b:	mov    rsi,rbx
   40a1e:	mov    rdi,r13
   40a21:	call   3f5d0 <g_str_equal@plt+0x32310>
   40a26:	jmp    409e9 <g_str_equal@plt+0x33729>
   40a28:	call   cd30 <__stack_chk_fail@plt>
   40a2d:	nop    DWORD PTR [rax]
   40a30:	mov    rax,QWORD PTR [rdi]
   40a33:	ret    
   40a34:	xchg   ax,ax
   40a36:	nop    WORD PTR cs:[rax+rax*1+0x0]
   40a40:	mov    QWORD PTR [rdi],rsi
   40a43:	ret    
   40a44:	xchg   ax,ax
   40a46:	nop    WORD PTR cs:[rax+rax*1+0x0]
   40a50:	test   rdi,rdi
   40a53:	je     40a5a <g_str_equal@plt+0x3379a>
   40a55:	jmp    3f340 <g_str_equal@plt+0x32080>
   40a5a:	ret    
   40a5b:	nop    DWORD PTR [rax+rax*1+0x0]
   40a60:	push   r15
   40a62:	push   r14
   40a64:	lea    r14,[rip+0x1f803]        # 6026e <_fini@@Base+0xdb1a>
   40a6b:	push   r13
   40a6d:	push   r12
   40a6f:	mov    r13,rsi
   40a72:	push   rbp
   40a73:	push   rbx
   40a74:	mov    r12,rdi
   40a77:	sub    rsp,0x8
   40a7b:	mov    rdx,QWORD PTR [rdi]
   40a7e:	mov    rbx,QWORD PTR [rdi+0x8]
   40a82:	test   rdx,rdx
   40a85:	je     40a9d <g_str_equal@plt+0x337dd>
   40a87:	lea    rsi,[rip+0x225ba]        # 63048 <_fini@@Base+0x108f4>
   40a8e:	mov    edi,0x1
   40a93:	xor    eax,eax
   40a95:	mov    r14,r13
   40a98:	call   c3a0 <__printf_chk@plt>
   40a9d:	mov    rbp,QWORD PTR [rbx+0x28]
   40aa1:	add    rbx,0x28
   40aa5:	test   rbp,rbp
   40aa8:	jne    40afe <g_str_equal@plt+0x3383e>
   40aaa:	jmp    40b80 <g_str_equal@plt+0x338c0>
   40aaf:	nop
   40ab0:	mov    r15,QWORD PTR [rax+0x8]
   40ab4:	test   r15,r15
   40ab7:	je     40af0 <g_str_equal@plt+0x33830>
   40ab9:	mov    ecx,DWORD PTR [rbx+0x8]
   40abc:	test   ecx,ecx
   40abe:	je     40b18 <g_str_equal@plt+0x33858>
   40ac0:	sub    ecx,0x2
   40ac3:	cmp    ecx,0x1
   40ac6:	ja     40ad1 <g_str_equal@plt+0x33811>
   40ac8:	test   rax,rax
   40acb:	jne    40b58 <g_str_equal@plt+0x33898>
   40ad1:	lea    rsi,[rip+0x22585]        # 6305d <_fini@@Base+0x10909>
   40ad8:	mov    rdx,r14
   40adb:	mov    r8,r15
   40ade:	mov    rcx,rbp
   40ae1:	mov    edi,0x1
   40ae6:	xor    eax,eax
   40ae8:	mov    r14,r13
   40aeb:	call   c3a0 <__printf_chk@plt>
   40af0:	add    rbx,0x20
   40af4:	je     40b42 <g_str_equal@plt+0x33882>
   40af6:	mov    rbp,QWORD PTR [rbx]
   40af9:	test   rbp,rbp
   40afc:	je     40b42 <g_str_equal@plt+0x33882>
   40afe:	mov    rsi,rbp
   40b01:	mov    rdi,r12
   40b04:	call   3fd70 <g_str_equal@plt+0x32ab0>
   40b09:	test   rax,rax
   40b0c:	jne    40ab0 <g_str_equal@plt+0x337f0>
   40b0e:	mov    r15,QWORD PTR [rbx+0x18]
   40b12:	jmp    40ab4 <g_str_equal@plt+0x337f4>
   40b14:	nop    DWORD PTR [rax+0x0]
   40b18:	lea    rsi,[rip+0x2252f]        # 6304e <_fini@@Base+0x108fa>
   40b1f:	mov    rdx,r14
   40b22:	mov    rcx,rbp
   40b25:	mov    edi,0x1
   40b2a:	xor    eax,eax
   40b2c:	mov    r14,r13
   40b2f:	call   c3a0 <__printf_chk@plt>
   40b34:	mov    rdi,r15
   40b37:	call   3f1a0 <g_str_equal@plt+0x31ee0>
   40b3c:	add    rbx,0x20
   40b40:	jne    40af6 <g_str_equal@plt+0x33836>
   40b42:	add    rsp,0x8
   40b46:	pop    rbx
   40b47:	pop    rbp
   40b48:	pop    r12
   40b4a:	pop    r13
   40b4c:	pop    r14
   40b4e:	pop    r15
   40b50:	ret    
   40b51:	nop    DWORD PTR [rax+0x0]
   40b58:	mov    r8,QWORD PTR [rax+0x18]
   40b5c:	lea    rsi,[rip+0x224f1]        # 63054 <_fini@@Base+0x10900>
   40b63:	mov    rdx,r14
   40b66:	mov    rcx,rbp
   40b69:	mov    edi,0x1
   40b6e:	xor    eax,eax
   40b70:	mov    r14,r13
   40b73:	call   c3a0 <__printf_chk@plt>
   40b78:	jmp    40af0 <g_str_equal@plt+0x33830>
   40b7d:	nop    DWORD PTR [rax]
   40b80:	mov    rbx,QWORD PTR [r12+0x28]
   40b85:	test   rbx,rbx
   40b88:	je     40b42 <g_str_equal@plt+0x33882>
   40b8a:	nop    WORD PTR [rax+rax*1+0x0]
   40b90:	mov    rcx,QWORD PTR [rbx]
   40b93:	lea    rsi,[rip+0x224b4]        # 6304e <_fini@@Base+0x108fa>
   40b9a:	mov    rdx,r14
   40b9d:	mov    edi,0x1
   40ba2:	xor    eax,eax
   40ba4:	mov    r14,r13
   40ba7:	call   c3a0 <__printf_chk@plt>
   40bac:	mov    rdi,QWORD PTR [rbx+0x8]
   40bb0:	call   3f1a0 <g_str_equal@plt+0x31ee0>
   40bb5:	mov    rbx,QWORD PTR [rbx+0x28]
   40bb9:	test   rbx,rbx
   40bbc:	jne    40b90 <g_str_equal@plt+0x338d0>
   40bbe:	add    rsp,0x8
   40bc2:	pop    rbx
   40bc3:	pop    rbp
   40bc4:	pop    r12
   40bc6:	pop    r13
   40bc8:	pop    r14
   40bca:	pop    r15
   40bcc:	ret    
   40bcd:	nop    DWORD PTR [rax]
   40bd0:	mov    r8,rcx
   40bd3:	xor    ecx,ecx
   40bd5:	jmp    3f740 <g_str_equal@plt+0x32480>
   40bda:	nop    WORD PTR [rax+rax*1+0x0]
   40be0:	mov    r8,rcx
   40be3:	movzx  edx,dl
   40be6:	xor    ecx,ecx
   40be8:	jmp    407b0 <g_str_equal@plt+0x334f0>
   40bed:	nop    DWORD PTR [rax]
   40bf0:	sub    rsp,0x28
   40bf4:	xor    ecx,ecx
   40bf6:	movzx  edx,dl
   40bf9:	lea    r8,[rsp+0x10]
   40bfe:	mov    QWORD PTR [rsp+0x10],0x0
   40c07:	mov    rax,QWORD PTR fs:0x28
   40c10:	mov    QWORD PTR [rsp+0x18],rax
   40c15:	xor    eax,eax
   40c17:	call   407b0 <g_str_equal@plt+0x334f0>
   40c1c:	mov    rdi,QWORD PTR [rsp+0x10]
   40c21:	test   rdi,rdi
   40c24:	je     40c35 <g_str_equal@plt+0x33975>
   40c26:	mov    QWORD PTR [rsp+0x8],rax
   40c2b:	call   39e30 <g_str_equal@plt+0x2cb70>
   40c30:	mov    rax,QWORD PTR [rsp+0x8]
   40c35:	mov    rcx,QWORD PTR [rsp+0x18]
   40c3a:	xor    rcx,QWORD PTR fs:0x28
   40c43:	jne    40c4a <g_str_equal@plt+0x3398a>
   40c45:	add    rsp,0x28
   40c49:	ret    
   40c4a:	call   cd30 <__stack_chk_fail@plt>
   40c4f:	nop
   40c50:	sub    rsp,0x8
   40c54:	test   edx,edx
   40c56:	mov    ecx,0x1
   40c5b:	setne  dl
   40c5e:	xor    r8d,r8d
   40c61:	movzx  edx,dl
   40c64:	call   407b0 <g_str_equal@plt+0x334f0>
   40c69:	test   rax,rax
   40c6c:	je     40c73 <g_str_equal@plt+0x339b3>
   40c6e:	add    rsp,0x8
   40c72:	ret    
   40c73:	lea    rcx,[rip+0x22496]        # 63110 <_fini@@Base+0x109bc>
   40c7a:	lea    rsi,[rip+0x2210f]        # 62d90 <_fini@@Base+0x1063c>
   40c81:	lea    rdi,[rip+0x1ebee]        # 5f876 <_fini@@Base+0xd122>
   40c88:	mov    edx,0x387
   40c8d:	call   c390 <__assert_fail@plt>
   40c92:	nop    DWORD PTR [rax+0x0]
   40c96:	nop    WORD PTR cs:[rax+rax*1+0x0]
   40ca0:	push   r13
   40ca2:	push   r12
   40ca4:	mov    r13,rdx
   40ca7:	push   rbp
   40ca8:	push   rbx
   40ca9:	mov    rbp,rsi
   40cac:	lea    rsi,[rip+0x24a2e]        # 656e1 <_fini@@Base+0x12f8d>
   40cb3:	mov    rbx,rdi
   40cb6:	mov    rdi,rbp
   40cb9:	sub    rsp,0x38
   40cbd:	lea    r12,[rsp+0x8]
   40cc2:	mov    QWORD PTR [rsp+0x8],0x0
   40ccb:	mov    rax,QWORD PTR fs:0x28
   40cd4:	mov    QWORD PTR [rsp+0x28],rax
   40cd9:	xor    eax,eax
   40cdb:	call   2f010 <g_str_equal@plt+0x21d50>
   40ce0:	mov    rcx,r12
   40ce3:	mov    rsi,rax
   40ce6:	mov    edx,0x1
   40ceb:	mov    rdi,rbx
   40cee:	call   40620 <g_str_equal@plt+0x33360>
   40cf3:	mov    rsi,QWORD PTR [rsp+0x8]
   40cf8:	test   rsi,rsi
   40cfb:	jne    40d50 <g_str_equal@plt+0x33a90>
   40cfd:	test   rax,rax
   40d00:	mov    rbx,rax
   40d03:	je     40d74 <g_str_equal@plt+0x33ab4>
   40d05:	lea    rsi,[rip+0xffffffffffffecf4]        # 3fa00 <g_str_equal@plt+0x32740>
   40d0c:	lea    rdx,[rsp+0x10]
   40d11:	mov    rdi,rbp
   40d14:	mov    QWORD PTR [rsp+0x18],r12
   40d19:	mov    QWORD PTR [rsp+0x10],rax
   40d1e:	call   2f050 <g_str_equal@plt+0x21d90>
   40d23:	mov    rsi,QWORD PTR [rsp+0x8]
   40d28:	test   rsi,rsi
   40d2b:	jne    40d60 <g_str_equal@plt+0x33aa0>
   40d2d:	mov    rcx,QWORD PTR [rsp+0x28]
   40d32:	xor    rcx,QWORD PTR fs:0x28
   40d3b:	mov    rax,rbx
   40d3e:	jne    40d93 <g_str_equal@plt+0x33ad3>
   40d40:	add    rsp,0x38
   40d44:	pop    rbx
   40d45:	pop    rbp
   40d46:	pop    r12
   40d48:	pop    r13
   40d4a:	ret    
   40d4b:	nop    DWORD PTR [rax+rax*1+0x0]
   40d50:	mov    rdi,r13
   40d53:	xor    ebx,ebx
   40d55:	call   3a4c0 <g_str_equal@plt+0x2d200>
   40d5a:	jmp    40d2d <g_str_equal@plt+0x33a6d>
   40d5c:	nop    DWORD PTR [rax+0x0]
   40d60:	mov    rdi,r13
   40d63:	call   3a4c0 <g_str_equal@plt+0x2d200>
   40d68:	mov    rdi,rbx
   40d6b:	xor    ebx,ebx
   40d6d:	call   3f340 <g_str_equal@plt+0x32080>
   40d72:	jmp    40d2d <g_str_equal@plt+0x33a6d>
   40d74:	lea    rcx,[rip+0x22375]        # 630f0 <_fini@@Base+0x1099c>
   40d7b:	lea    rsi,[rip+0x2200e]        # 62d90 <_fini@@Base+0x1063c>
   40d82:	lea    rdi,[rip+0x222dc]        # 63065 <_fini@@Base+0x10911>
   40d89:	mov    edx,0x3c2
   40d8e:	call   c390 <__assert_fail@plt>
   40d93:	call   cd30 <__stack_chk_fail@plt>
   40d98:	nop    DWORD PTR [rax+rax*1+0x0]
   40da0:	push   r15
   40da2:	push   r14
   40da4:	push   r13
   40da6:	push   r12
   40da8:	mov    r12,rsi
   40dab:	push   rbp
   40dac:	push   rbx
   40dad:	mov    rbx,rdi
   40db0:	mov    rdi,rsi
   40db3:	sub    rsp,0x48
   40db7:	mov    rax,QWORD PTR fs:0x28
   40dc0:	mov    QWORD PTR [rsp+0x38],rax
   40dc5:	xor    eax,eax
   40dc7:	mov    QWORD PTR [rsp+0x8],rdx
   40dcc:	call   2f0b0 <g_str_equal@plt+0x21df0>
   40dd1:	test   rax,rax
   40dd4:	je     40e56 <g_str_equal@plt+0x33b96>
   40dda:	mov    r15,rax
   40ddd:	lea    rax,[rsp+0x20]
   40de2:	lea    r13,[rsp+0x18]
   40de7:	mov    QWORD PTR [rsp],rax
   40deb:	nop    DWORD PTR [rax+rax*1+0x0]
   40df0:	mov    rsi,r15
   40df3:	mov    rdi,r12
   40df6:	mov    QWORD PTR [rsp+0x18],0x0
   40dff:	mov    QWORD PTR [rsp+0x20],rbx
   40e04:	mov    QWORD PTR [rsp+0x28],r13
   40e09:	call   2f0e0 <g_str_equal@plt+0x21e20>
   40e0e:	mov    rbp,rax
   40e11:	mov    rax,QWORD PTR [rbx+0x8]
   40e15:	mov    r14,QWORD PTR [r15]
   40e18:	lea    rdi,[rax+0x28]
   40e1c:	mov    rsi,r14
   40e1f:	call   3f070 <g_str_equal@plt+0x31db0>
   40e24:	test   rax,rax
   40e27:	je     40e4e <g_str_equal@plt+0x33b8e>
   40e29:	mov    rsi,QWORD PTR [r15+0x8]
   40e2d:	mov    rdx,QWORD PTR [rsp]
   40e31:	mov    rdi,r14
   40e34:	call   3fa00 <g_str_equal@plt+0x32740>
   40e39:	mov    rsi,QWORD PTR [rsp+0x18]
   40e3e:	test   rsi,rsi
   40e41:	jne    40e78 <g_str_equal@plt+0x33bb8>
   40e43:	mov    rsi,QWORD PTR [r15]
   40e46:	mov    rdi,r12
   40e49:	call   2f1e0 <g_str_equal@plt+0x21f20>
   40e4e:	test   rbp,rbp
   40e51:	mov    r15,rbp
   40e54:	jne    40df0 <g_str_equal@plt+0x33b30>
   40e56:	mov    rax,QWORD PTR [rsp+0x38]
   40e5b:	xor    rax,QWORD PTR fs:0x28
   40e64:	jne    40e84 <g_str_equal@plt+0x33bc4>
   40e66:	add    rsp,0x48
   40e6a:	pop    rbx
   40e6b:	pop    rbp
   40e6c:	pop    r12
   40e6e:	pop    r13
   40e70:	pop    r14
   40e72:	pop    r15
   40e74:	ret    
   40e75:	nop    DWORD PTR [rax]
   40e78:	mov    rdi,QWORD PTR [rsp+0x8]
   40e7d:	call   3a4c0 <g_str_equal@plt+0x2d200>
   40e82:	jmp    40e56 <g_str_equal@plt+0x33b96>
   40e84:	call   cd30 <__stack_chk_fail@plt>
   40e89:	nop    DWORD PTR [rax+0x0]
   40e90:	push   r15
   40e92:	push   r14
   40e94:	mov    r14,rsi
   40e97:	push   r13
   40e99:	push   r12
   40e9b:	mov    r12,rdx
   40e9e:	push   rbp
   40e9f:	push   rbx
   40ea0:	mov    rbx,rdi
   40ea3:	sub    rsp,0x18
   40ea7:	test   rsi,rsi
   40eaa:	mov    BYTE PTR [rsp+0xf],cl
   40eae:	je     40f6a <g_str_equal@plt+0x33caa>
   40eb4:	mov    rdx,QWORD PTR [rbx]
   40eb7:	test   rdx,rdx
   40eba:	je     40ecb <g_str_equal@plt+0x33c0b>
   40ebc:	lea    rsi,[rip+0x2481e]        # 656e1 <_fini@@Base+0x12f8d>
   40ec3:	mov    rdi,r14
   40ec6:	call   2ecf0 <g_str_equal@plt+0x21a30>
   40ecb:	mov    rbp,QWORD PTR [rbx+0x28]
   40ecf:	test   rbp,rbp
   40ed2:	je     40f36 <g_str_equal@plt+0x33c76>
   40ed4:	nop    DWORD PTR [rax+0x0]
   40ed8:	test   r12,r12
   40edb:	mov    r13,QWORD PTR [rbp+0x28]
   40edf:	je     40f50 <g_str_equal@plt+0x33c90>
   40ee1:	mov    rdi,QWORD PTR [r12+0x28]
   40ee6:	lea    r15,[r12+0x28]
   40eeb:	test   rdi,rdi
   40eee:	je     40f2e <g_str_equal@plt+0x33c6e>
   40ef0:	mov    rbx,QWORD PTR [rbp+0x0]
   40ef4:	jmp    40f0c <g_str_equal@plt+0x33c4c>
   40ef6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   40f00:	add    r15,0x20
   40f04:	mov    rdi,QWORD PTR [r15]
   40f07:	test   rdi,rdi
   40f0a:	je     40f2e <g_str_equal@plt+0x33c6e>
   40f0c:	mov    rsi,rbx
   40f0f:	call   cd60 <strcmp@plt>
   40f14:	test   eax,eax
   40f16:	jne    40f00 <g_str_equal@plt+0x33c40>
   40f18:	mov    rdx,QWORD PTR [rbp+0x8]
   40f1c:	mov    rsi,rbx
   40f1f:	mov    rdi,r14
   40f22:	call   2ecf0 <g_str_equal@plt+0x21a30>
   40f27:	cmp    BYTE PTR [rsp+0xf],0x0
   40f2c:	jne    40f60 <g_str_equal@plt+0x33ca0>
   40f2e:	test   r13,r13
   40f31:	mov    rbp,r13
   40f34:	jne    40ed8 <g_str_equal@plt+0x33c18>
   40f36:	add    rsp,0x18
   40f3a:	mov    rax,r14
   40f3d:	pop    rbx
   40f3e:	pop    rbp
   40f3f:	pop    r12
   40f41:	pop    r13
   40f43:	pop    r14
   40f45:	pop    r15
   40f47:	ret    
   40f48:	nop    DWORD PTR [rax+rax*1+0x0]
   40f50:	mov    rbx,QWORD PTR [rbp+0x0]
   40f54:	jmp    40f18 <g_str_equal@plt+0x33c58>
   40f56:	nop    WORD PTR cs:[rax+rax*1+0x0]
   40f60:	mov    rdi,rbp
   40f63:	call   3f020 <g_str_equal@plt+0x31d60>
   40f68:	jmp    40f2e <g_str_equal@plt+0x33c6e>
   40f6a:	call   2eb40 <g_str_equal@plt+0x21880>
   40f6f:	mov    r14,rax
   40f72:	jmp    40eb4 <g_str_equal@plt+0x33bf4>
   40f77:	nop    WORD PTR [rax+rax*1+0x0]
   40f80:	xor    ecx,ecx
   40f82:	xor    edx,edx
   40f84:	jmp    40e90 <g_str_equal@plt+0x33bd0>
   40f89:	nop    DWORD PTR [rax+0x0]
   40f90:	push   r14
   40f92:	push   r13
   40f94:	push   r12
   40f96:	push   rbp
   40f97:	push   rbx
   40f98:	sub    rsp,0x10
   40f9c:	mov    rax,QWORD PTR fs:0x28
   40fa5:	mov    QWORD PTR [rsp+0x8],rax
   40faa:	xor    eax,eax
   40fac:	mov    rax,QWORD PTR [rdi+0x8]
   40fb0:	mov    QWORD PTR [rsp],0x0
   40fb8:	cmp    QWORD PTR [rax+0x28],0x0
   40fbd:	jne    4106a <g_str_equal@plt+0x33daa>
   40fc3:	mov    rbx,QWORD PTR [rdi+0x28]
   40fc7:	test   rbx,rbx
   40fca:	je     41039 <g_str_equal@plt+0x33d79>
   40fcc:	mov    r12,rsi
   40fcf:	mov    r14,rdx
   40fd2:	mov    r13,rsp
   40fd5:	jmp    40ffd <g_str_equal@plt+0x33d3d>
   40fd7:	nop    WORD PTR [rax+rax*1+0x0]
   40fe0:	mov    rsi,r13
   40fe3:	mov    rdi,rbx
   40fe6:	call   3f560 <g_str_equal@plt+0x322a0>
   40feb:	mov    rsi,QWORD PTR [rsp]
   40fef:	test   rsi,rsi
   40ff2:	jne    41060 <g_str_equal@plt+0x33da0>
   40ff4:	mov    rbx,QWORD PTR [rbx+0x28]
   40ff8:	test   rbx,rbx
   40ffb:	je     41039 <g_str_equal@plt+0x33d79>
   40ffd:	mov    rbp,QWORD PTR [rbx]
   41000:	mov    rdi,r12
   41003:	mov    rsi,rbp
   41006:	call   3f070 <g_str_equal@plt+0x31db0>
   4100b:	test   rax,rax
   4100e:	mov    QWORD PTR [rbx+0x10],rax
   41012:	jne    40fe0 <g_str_equal@plt+0x33d20>
   41014:	lea    r8,[rip+0x1d160]        # 5e17b <_fini@@Base+0xba27>
   4101b:	lea    rcx,[rip+0x2207e]        # 630a0 <_fini@@Base+0x1094c>
   41022:	lea    rsi,[rip+0x21d67]        # 62d90 <_fini@@Base+0x1063c>
   41029:	mov    r9,rbp
   4102c:	mov    edx,0x435
   41031:	mov    rdi,r14
   41034:	call   3a090 <g_str_equal@plt+0x2cdd0>
   41039:	mov    rax,QWORD PTR [rsp+0x8]
   4103e:	xor    rax,QWORD PTR fs:0x28
   41047:	jne    41089 <g_str_equal@plt+0x33dc9>
   41049:	add    rsp,0x10
   4104d:	pop    rbx
   4104e:	pop    rbp
   4104f:	pop    r12
   41051:	pop    r13
   41053:	pop    r14
   41055:	ret    
   41056:	nop    WORD PTR cs:[rax+rax*1+0x0]
   41060:	mov    rdi,r14
   41063:	call   3a4c0 <g_str_equal@plt+0x2d200>
   41068:	jmp    41039 <g_str_equal@plt+0x33d79>
   4106a:	lea    rcx,[rip+0x2204f]        # 630c0 <_fini@@Base+0x1096c>
   41071:	lea    rsi,[rip+0x21d18]        # 62d90 <_fini@@Base+0x1063c>
   41078:	lea    rdi,[rip+0x21f76]        # 62ff5 <_fini@@Base+0x108a1>
   4107f:	mov    edx,0x430
   41084:	call   c390 <__assert_fail@plt>
   41089:	call   cd30 <__stack_chk_fail@plt>
   4108e:	xchg   ax,ax
   41090:	push   r15
   41092:	push   r14
   41094:	mov    r14,rsi
   41097:	push   r13
   41099:	push   r12
   4109b:	mov    r13,rdx
   4109e:	push   rbp
   4109f:	push   rbx
   410a0:	mov    rbx,rdi
   410a3:	mov    rbp,rcx
   410a6:	sub    rsp,0x28
   410aa:	mov    r15,rsp
   410ad:	mov    rdi,r15
   410b0:	mov    rax,QWORD PTR fs:0x28
   410b9:	mov    QWORD PTR [rsp+0x18],rax
   410be:	xor    eax,eax
   410c0:	call   3a8e0 <g_str_equal@plt+0x2d620>
   410c5:	mov    rbx,QWORD PTR [rbx+0x18]
   410c9:	test   rbx,rbx
   410cc:	jne    410e5 <g_str_equal@plt+0x33e25>
   410ce:	jmp    41130 <g_str_equal@plt+0x33e70>
   410d0:	test   rbp,rbp
   410d3:	je     410dc <g_str_equal@plt+0x33e1c>
   410d5:	cmp    QWORD PTR [rbp+0x0],0x0
   410da:	jne    41135 <g_str_equal@plt+0x33e75>
   410dc:	mov    rbx,QWORD PTR [rbx+0x38]
   410e0:	test   rbx,rbx
   410e3:	je     41130 <g_str_equal@plt+0x33e70>
   410e5:	lea    rdi,[rbx+0x10]
   410e9:	call   3a970 <g_str_equal@plt+0x2d6b0>
   410ee:	mov    rdx,rbp
   410f1:	mov    rsi,rbx
   410f4:	mov    rdi,r13
   410f7:	call   r14
   410fa:	test   eax,eax
   410fc:	mov    r12d,eax
   410ff:	je     410d0 <g_str_equal@plt+0x33e10>
   41101:	mov    rdi,r15
   41104:	call   3a900 <g_str_equal@plt+0x2d640>
   41109:	mov    rcx,QWORD PTR [rsp+0x18]
   4110e:	xor    rcx,QWORD PTR fs:0x28
   41117:	mov    eax,r12d
   4111a:	jne    41154 <g_str_equal@plt+0x33e94>
   4111c:	add    rsp,0x28
   41120:	pop    rbx
   41121:	pop    rbp
   41122:	pop    r12
   41124:	pop    r13
   41126:	pop    r14
   41128:	pop    r15
   4112a:	ret    
   4112b:	nop    DWORD PTR [rax+rax*1+0x0]
   41130:	xor    r12d,r12d
   41133:	jmp    41101 <g_str_equal@plt+0x33e41>
   41135:	lea    rcx,[rip+0x21f44]        # 63080 <_fini@@Base+0x1092c>
   4113c:	lea    rsi,[rip+0x21c4d]        # 62d90 <_fini@@Base+0x1063c>
   41143:	lea    rdi,[rip+0x21ec2]        # 6300c <_fini@@Base+0x108b8>
   4114a:	mov    edx,0x456
   4114f:	call   c390 <__assert_fail@plt>
   41154:	call   cd30 <__stack_chk_fail@plt>
   41159:	nop    DWORD PTR [rax+0x0]
   41160:	jmp    d2b0 <g_free@plt>
   41165:	nop
   41166:	nop    WORD PTR cs:[rax+rax*1+0x0]
   41170:	push   r15
   41172:	push   r14
   41174:	mov    r14,rdi
   41177:	push   r13
   41179:	push   r12
   4117b:	push   rbp
   4117c:	push   rbx
   4117d:	sub    rsp,0x8
   41181:	test   rsi,rsi
   41184:	je     41298 <g_str_equal@plt+0x33fd8>
   4118a:	test   rdi,rdi
   4118d:	je     412c0 <g_str_equal@plt+0x34000>
   41193:	cmp    QWORD PTR [rdi+0x18],0x0
   41198:	lea    rax,[rdi+0x28]
   4119c:	sete   bpl
   411a0:	xor    r13d,r13d
   411a3:	jmp    411ab <g_str_equal@plt+0x33eeb>
   411a5:	nop    DWORD PTR [rax]
   411a8:	mov    r13,r15
   411ab:	cmp    QWORD PTR [rax],0x0
   411af:	lea    r15,[r13+0x1]
   411b3:	mov    rcx,r15
   411b6:	je     412b0 <g_str_equal@plt+0x33ff0>
   411bc:	add    rax,0x20
   411c0:	jne    411a8 <g_str_equal@plt+0x33ee8>
   411c2:	lea    rcx,[r13+0x2]
   411c6:	mov    r13,r15
   411c9:	lea    r15,[r15+0x1]
   411cd:	xor    r12d,r12d
   411d0:	lea    rbx,[rsi+0x28]
   411d4:	xor    edx,edx
   411d6:	mov    rax,rbx
   411d9:	nop    DWORD PTR [rax+0x0]
   411e0:	cmp    QWORD PTR [rax],0x0
   411e4:	je     411f0 <g_str_equal@plt+0x33f30>
   411e6:	add    rdx,0x1
   411ea:	add    rax,0x20
   411ee:	jne    411e0 <g_str_equal@plt+0x33f20>
   411f0:	lea    rsi,[rdx+rcx*1]
   411f4:	mov    rdx,rsi
   411f7:	shl    rdx,0x5
   411fb:	lea    rsi,[rdx+0x28]
   411ff:	call   ccf0 <g_realloc@plt>
   41204:	test   r12b,r12b
   41207:	mov    r14,rax
   4120a:	je     4121f <g_str_equal@plt+0x33f5f>
   4120c:	mov    QWORD PTR [rax],0x0
   41213:	mov    QWORD PTR [rax+0x8],0x0
   4121b:	mov    BYTE PTR [rax+0x10],0x0
   4121f:	test   bpl,bpl
   41222:	je     41234 <g_str_equal@plt+0x33f74>
   41224:	lea    rax,[r14+0x18]
   41228:	mov    QWORD PTR [r14+0x18],0x0
   41230:	mov    QWORD PTR [r14+0x20],rax
   41234:	shl    r15,0x5
   41238:	lea    rbp,[r14+0x28]
   4123c:	mov    QWORD PTR [r14+r15*1+0x8],0x0
   41245:	jmp    41256 <g_str_equal@plt+0x33f96>
   41247:	nop    WORD PTR [rax+rax*1+0x0]
   41250:	add    rbx,0x20
   41254:	je     41298 <g_str_equal@plt+0x33fd8>
   41256:	mov    rsi,QWORD PTR [rbx]
   41259:	test   rsi,rsi
   4125c:	je     41298 <g_str_equal@plt+0x33fd8>
   4125e:	mov    rdi,rbp
   41261:	call   3f070 <g_str_equal@plt+0x31db0>
   41266:	test   rax,rax
   41269:	jne    41250 <g_str_equal@plt+0x33f90>
   4126b:	mov    rax,r13
   4126e:	movdqu xmm0,XMMWORD PTR [rbx]
   41272:	shl    rax,0x5
   41276:	add    r13,0x1
   4127a:	add    rax,r14
   4127d:	movups XMMWORD PTR [rax+0x28],xmm0
   41281:	movdqu xmm0,XMMWORD PTR [rbx+0x10]
   41286:	add    rbx,0x20
   4128a:	mov    QWORD PTR [rax+0x48],0x0
   41292:	movups XMMWORD PTR [rax+0x38],xmm0
   41296:	jne    41256 <g_str_equal@plt+0x33f96>
   41298:	add    rsp,0x8
   4129c:	mov    rax,r14
   4129f:	pop    rbx
   412a0:	pop    rbp
   412a1:	pop    r12
   412a3:	pop    r13
   412a5:	pop    r14
   412a7:	pop    r15
   412a9:	ret    
   412aa:	nop    WORD PTR [rax+rax*1+0x0]
   412b0:	xor    r12d,r12d
   412b3:	jmp    411d0 <g_str_equal@plt+0x33f10>
   412b8:	nop    DWORD PTR [rax+rax*1+0x0]
   412c0:	mov    ecx,0x1
   412c5:	mov    ebp,0x1
   412ca:	mov    r12d,0x1
   412d0:	xor    r13d,r13d
   412d3:	mov    r15d,0x1
   412d9:	jmp    411d0 <g_str_equal@plt+0x33f10>
   412de:	xchg   ax,ax
   412e0:	sub    rsp,0x18
   412e4:	mov    rax,QWORD PTR fs:0x28
   412ed:	mov    QWORD PTR [rsp+0x8],rax
   412f2:	xor    eax,eax
   412f4:	movzx  eax,BYTE PTR [rdi]
   412f7:	sub    eax,0x30
   412fa:	cmp    al,0x9
   412fc:	ja     41350 <g_str_equal@plt+0x34090>
   412fe:	mov    rcx,rsp
   41301:	mov    edx,0xa
   41306:	call   33100 <g_str_equal@plt+0x25e40>
   4130b:	test   eax,eax
   4130d:	jne    41340 <g_str_equal@plt+0x34080>
   4130f:	cmp    QWORD PTR [rsp],0x7fffffff
   41317:	mov    eax,0x7fffffff
   4131c:	cmovbe rax,QWORD PTR [rsp]
   41321:	mov    rdx,QWORD PTR [rsp+0x8]
   41326:	xor    rdx,QWORD PTR fs:0x28
   4132f:	jne    41357 <g_str_equal@plt+0x34097>
   41331:	add    rsp,0x18
   41335:	ret    
   41336:	nop    WORD PTR cs:[rax+rax*1+0x0]
   41340:	cmp    eax,0xffffffde
   41343:	mov    edx,0x7fffffff
   41348:	cmove  eax,edx
   4134b:	jmp    41321 <g_str_equal@plt+0x34061>
   4134d:	nop    DWORD PTR [rax]
   41350:	mov    eax,0xffffffea
   41355:	jmp    41321 <g_str_equal@plt+0x34061>
   41357:	call   cd30 <__stack_chk_fail@plt>
   4135c:	nop    DWORD PTR [rax+0x0]
   41360:	push   rbp
   41361:	push   rbx
   41362:	mov    rbx,rdi
   41365:	lea    rdi,[rip+0x1ef02]        # 6026e <_fini@@Base+0xdb1a>
   4136c:	sub    rsp,0x8
   41370:	call   c530 <g_string_new@plt>
   41375:	test   rbx,rbx
   41378:	mov    rbp,rax
   4137b:	je     413a1 <g_str_equal@plt+0x340e1>
   4137d:	nop    DWORD PTR [rax]
   41380:	mov    esi,0x2e
   41385:	mov    rdi,rbp
   41388:	call   cb50 <g_string_prepend_c@plt>
   4138d:	mov    rsi,QWORD PTR [rbx]
   41390:	mov    rdi,rbp
   41393:	call   c200 <g_string_prepend@plt>
   41398:	mov    rbx,QWORD PTR [rbx+0x8]
   4139c:	test   rbx,rbx
   4139f:	jne    41380 <g_str_equal@plt+0x340c0>
   413a1:	add    rsp,0x8
   413a5:	mov    rdi,rbp
   413a8:	xor    esi,esi
   413aa:	pop    rbx
   413ab:	pop    rbp
   413ac:	jmp    c7a0 <g_string_free@plt>
   413b1:	nop    DWORD PTR [rax+rax*1+0x0]
   413b6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   413c0:	push   r15
   413c2:	push   r14
   413c4:	mov    r15,r9
   413c7:	push   r13
   413c9:	push   r12
   413cb:	mov    r13,rsi
   413ce:	push   rbp
   413cf:	push   rbx
   413d0:	mov    r12,rdi
   413d3:	mov    rbp,rdx
   413d6:	mov    r14,rcx
   413d9:	sub    rsp,0x18
   413dd:	mov    QWORD PTR [rsp+0x8],r8
   413e2:	call   2ed40 <g_str_equal@plt+0x21a80>
   413e7:	test   rax,rax
   413ea:	je     41480 <g_str_equal@plt+0x341c0>
   413f0:	mov    rbx,rax
   413f3:	mov    eax,DWORD PTR [rax]
   413f5:	mov    r8,QWORD PTR [rsp+0x8]
   413fa:	lea    edx,[rax-0x1]
   413fd:	cmp    edx,0x5
   41400:	ja     414ff <g_str_equal@plt+0x3423f>
   41406:	test   rbp,rbp
   41409:	je     41440 <g_str_equal@plt+0x34180>
   4140b:	cmp    eax,0x3
   4140e:	mov    rbx,rbp
   41411:	jne    414a0 <g_str_equal@plt+0x341e0>
   41417:	mov    rdx,rbx
   4141a:	mov    rsi,r13
   4141d:	mov    rdi,r12
   41420:	call   2eb90 <g_str_equal@plt+0x218d0>
   41425:	add    rsp,0x18
   41429:	mov    rax,rbx
   4142c:	pop    rbx
   4142d:	pop    rbp
   4142e:	pop    r12
   41430:	pop    r13
   41432:	pop    r14
   41434:	pop    r15
   41436:	ret    
   41437:	nop    WORD PTR [rax+rax*1+0x0]
   41440:	cmp    eax,0x4
   41443:	je     41425 <g_str_equal@plt+0x34165>
   41445:	sub    rsp,0x8
   41449:	mov    r9d,r8d
   4144c:	lea    rsi,[rip+0x21f2d]        # 63380 <_fini@@Base+0x10c2c>
   41453:	push   r14
   41455:	lea    r8,[rip+0x21efc]        # 63358 <_fini@@Base+0x10c04>
   4145c:	lea    rcx,[rip+0x2200d]        # 63470 <_fini@@Base+0x10d1c>
   41463:	mov    rdi,r15
   41466:	sub    r9d,r14d
   41469:	mov    edx,0x91
   4146e:	xor    eax,eax
   41470:	xor    ebx,ebx
   41472:	call   3a090 <g_str_equal@plt+0x2cdd0>
   41477:	pop    rsi
   41478:	pop    rdi
   41479:	jmp    41425 <g_str_equal@plt+0x34165>
   4147b:	nop    DWORD PTR [rax+rax*1+0x0]
   41480:	test   rbp,rbp
   41483:	je     41490 <g_str_equal@plt+0x341d0>
   41485:	mov    rbx,rbp
   41488:	jmp    41417 <g_str_equal@plt+0x34157>
   4148a:	nop    WORD PTR [rax+rax*1+0x0]
   41490:	call   2eb40 <g_str_equal@plt+0x21880>
   41495:	mov    rbx,rax
   41498:	jmp    41417 <g_str_equal@plt+0x34157>
   4149d:	nop    DWORD PTR [rax]
   414a0:	sub    rsp,0x8
   414a4:	mov    r9d,r8d
   414a7:	lea    rcx,[rip+0x21fc2]        # 63470 <_fini@@Base+0x10d1c>
   414ae:	push   r14
   414b0:	lea    r8,[rip+0x21ea1]        # 63358 <_fini@@Base+0x10c04>
   414b7:	lea    rsi,[rip+0x21ec2]        # 63380 <_fini@@Base+0x10c2c>
   414be:	xor    eax,eax
   414c0:	sub    r9d,r14d
   414c3:	mov    edx,0x91
   414c8:	mov    rdi,r15
   414cb:	call   3a090 <g_str_equal@plt+0x2cdd0>
   414d0:	mov    rax,QWORD PTR [rbp+0x8]
   414d4:	pop    rdx
   414d5:	pop    rcx
   414d6:	test   rax,rax
   414d9:	je     4151e <g_str_equal@plt+0x3425e>
   414db:	sub    rax,0x1
   414df:	test   rax,rax
   414e2:	mov    QWORD PTR [rbx+0x8],rax
   414e6:	je     414f0 <g_str_equal@plt+0x34230>
   414e8:	xor    ebx,ebx
   414ea:	jmp    41425 <g_str_equal@plt+0x34165>
   414ef:	nop
   414f0:	mov    rdi,rbx
   414f3:	xor    ebx,ebx
   414f5:	call   30300 <g_str_equal@plt+0x23040>
   414fa:	jmp    41425 <g_str_equal@plt+0x34165>
   414ff:	lea    rcx,[rip+0x21f82]        # 63488 <_fini@@Base+0x10d34>
   41506:	lea    rsi,[rip+0x1c18b]        # 5d698 <_fini@@Base+0xaf44>
   4150d:	lea    rdi,[rip+0x1c1cc]        # 5d6e0 <_fini@@Base+0xaf8c>
   41514:	mov    edx,0x7f
   41519:	call   c390 <__assert_fail@plt>
   4151e:	call   d583 <g_str_equal@plt+0x2c3>
   41523:	nop    DWORD PTR [rax]
   41526:	nop    WORD PTR cs:[rax+rax*1+0x0]
   41530:	push   r15
   41532:	push   r14
   41534:	mov    r15,rsi
   41537:	push   r13
   41539:	push   r12
   4153b:	push   rbp
   4153c:	push   rbx
   4153d:	mov    rbx,rdi
   41540:	sub    rsp,0x38
   41544:	mov    rax,QWORD PTR fs:0x28
   4154d:	mov    QWORD PTR [rsp+0x28],rax
   41552:	xor    eax,eax
   41554:	mov    QWORD PTR [rsp],rdx
   41558:	mov    QWORD PTR [rsp+0x18],rsi
   4155d:	call   2f0b0 <g_str_equal@plt+0x21df0>
   41562:	mov    r14,rax
   41565:	lea    rax,[rsp+0x10]
   4156a:	test   r14,r14
   4156d:	mov    QWORD PTR [rsp+0x8],rax
   41572:	je     4168a <g_str_equal@plt+0x343ca>
   41578:	xor    r12d,r12d
   4157b:	xor    ebp,ebp
   4157d:	mov    r13d,0x1
   41583:	jmp    4159f <g_str_equal@plt+0x342df>
   41585:	nop    DWORD PTR [rax]
   41588:	mov    rsi,r14
   4158b:	mov    rdi,rbx
   4158e:	call   2f0e0 <g_str_equal@plt+0x21e20>
   41593:	test   rax,rax
   41596:	mov    r14,rax
   41599:	je     416b0 <g_str_equal@plt+0x343f0>
   4159f:	mov    rdi,QWORD PTR [r14]
   415a2:	xor    esi,esi
   415a4:	call   412e0 <g_str_equal@plt+0x34020>
   415a9:	mov    rdi,QWORD PTR [r14+0x8]
   415ad:	test   eax,eax
   415af:	cmovs  r12d,r13d
   415b3:	cmovns ebp,r13d
   415b7:	test   rdi,rdi
   415ba:	je     41588 <g_str_equal@plt+0x342c8>
   415bc:	mov    eax,DWORD PTR [rdi]
   415be:	lea    edx,[rax-0x1]
   415c1:	cmp    edx,0x5
   415c4:	ja     41830 <g_str_equal@plt+0x34570>
   415ca:	cmp    eax,0x4
   415cd:	jne    41588 <g_str_equal@plt+0x342c8>
   415cf:	mov    rax,QWORD PTR [r14]
   415d2:	mov    rdx,QWORD PTR [rsp]
   415d6:	mov    rsi,QWORD PTR [rsp+0x8]
   415db:	mov    QWORD PTR [rsp+0x10],rax
   415e0:	call   41530 <g_str_equal@plt+0x34270>
   415e5:	test   rax,rax
   415e8:	je     41688 <g_str_equal@plt+0x343c8>
   415ee:	cmp    QWORD PTR [r14+0x8],rax
   415f2:	je     41588 <g_str_equal@plt+0x342c8>
   415f4:	mov    rsi,QWORD PTR [r14]
   415f7:	mov    rdx,rax
   415fa:	mov    rdi,rbx
   415fd:	call   2eb90 <g_str_equal@plt+0x218d0>
   41602:	jmp    41588 <g_str_equal@plt+0x342c8>
   41604:	xor    r13d,r13d
   41607:	nop    WORD PTR [rax+rax*1+0x0]
   41610:	mov    rdi,r15
   41613:	call   41360 <g_str_equal@plt+0x340a0>
   41618:	sub    rsp,0x8
   4161c:	lea    r8,[rip+0x21ca7]        # 632ca <_fini@@Base+0x10b76>
   41623:	lea    rcx,[rip+0x21e2e]        # 63458 <_fini@@Base+0x10d04>
   4162a:	push   r13
   4162c:	mov    rdi,QWORD PTR [rsp+0x10]
   41631:	lea    rsi,[rip+0x21d48]        # 63380 <_fini@@Base+0x10c2c>
   41638:	mov    r9,rax
   4163b:	mov    edx,0x177
   41640:	mov    rbp,rax
   41643:	xor    eax,eax
   41645:	call   3a090 <g_str_equal@plt+0x2cdd0>
   4164a:	mov    rdi,rbp
   4164d:	call   d2b0 <g_free@plt>
   41652:	mov    rdi,r12
   41655:	call   d2b0 <g_free@plt>
   4165a:	test   rbx,rbx
   4165d:	pop    rax
   4165e:	pop    rdx
   4165f:	je     41688 <g_str_equal@plt+0x343c8>
   41661:	mov    rax,QWORD PTR [rbx+0x8]
   41665:	test   rax,rax
   41668:	je     4186e <g_str_equal@plt+0x345ae>
   4166e:	sub    rax,0x1
   41672:	test   rax,rax
   41675:	mov    QWORD PTR [rbx+0x8],rax
   41679:	jne    41688 <g_str_equal@plt+0x343c8>
   4167b:	mov    rdi,rbx
   4167e:	call   30300 <g_str_equal@plt+0x23040>
   41683:	nop    DWORD PTR [rax+rax*1+0x0]
   41688:	xor    ebx,ebx
   4168a:	mov    rcx,QWORD PTR [rsp+0x28]
   4168f:	xor    rcx,QWORD PTR fs:0x28
   41698:	mov    rax,rbx
   4169b:	jne    41873 <g_str_equal@plt+0x345b3>
   416a1:	add    rsp,0x38
   416a5:	pop    rbx
   416a6:	pop    rbp
   416a7:	pop    r12
   416a9:	pop    r13
   416ab:	pop    r14
   416ad:	pop    r15
   416af:	ret    
   416b0:	test   bpl,bpl
   416b3:	je     4168a <g_str_equal@plt+0x343ca>
   416b5:	test   r12b,r12b
   416b8:	jne    417b9 <g_str_equal@plt+0x344f9>
   416be:	mov    rdi,rbx
   416c1:	call   2ee00 <g_str_equal@plt+0x21b40>
   416c6:	mov    r13,rax
   416c9:	lea    rax,[rax+0x1]
   416cd:	mov    esi,0x8
   416d2:	mov    rdi,rax
   416d5:	mov    QWORD PTR [rsp+0x8],rax
   416da:	call   c690 <g_malloc0_n@plt>
   416df:	mov    rdi,rbx
   416e2:	mov    r12,rax
   416e5:	call   2f0b0 <g_str_equal@plt+0x21df0>
   416ea:	test   rax,rax
   416ed:	mov    r14,rax
   416f0:	je     417fb <g_str_equal@plt+0x3453b>
   416f6:	mov    ebp,0xffffffff
   416fb:	nop    DWORD PTR [rax+rax*1+0x0]
   41700:	mov    rdi,QWORD PTR [r14]
   41703:	xor    esi,esi
   41705:	call   412e0 <g_str_equal@plt+0x34020>
   4170a:	test   eax,eax
   4170c:	js     4184f <g_str_equal@plt+0x3458f>
   41712:	cmp    ebp,eax
   41714:	cmovl  ebp,eax
   41717:	cdqe   
   41719:	cmp    r13,rax
   4171c:	jbe    41726 <g_str_equal@plt+0x34466>
   4171e:	mov    rcx,QWORD PTR [r14+0x8]
   41722:	mov    QWORD PTR [r12+rax*8],rcx
   41726:	mov    rsi,r14
   41729:	mov    rdi,rbx
   4172c:	call   2f0e0 <g_str_equal@plt+0x21e20>
   41731:	test   rax,rax
   41734:	mov    r14,rax
   41737:	jne    41700 <g_str_equal@plt+0x34440>
   41739:	call   2f420 <g_str_equal@plt+0x22160>
   4173e:	mov    rbx,rax
   41741:	mov    rax,QWORD PTR [rsp+0x8]
   41746:	cmp    QWORD PTR [r12+rax*8-0x8],0x0
   4174c:	jne    41810 <g_str_equal@plt+0x34550>
   41752:	add    ebp,0x1
   41755:	movsxd rbp,ebp
   41758:	cmp    rbp,rax
   4175b:	cmova  rbp,rax
   4175f:	test   rbp,rbp
   41762:	je     417ac <g_str_equal@plt+0x344ec>
   41764:	mov    rax,QWORD PTR [r12]
   41768:	test   rax,rax
   4176b:	je     41604 <g_str_equal@plt+0x34344>
   41771:	mov    rdx,r12
   41774:	xor    r13d,r13d
   41777:	jmp    41790 <g_str_equal@plt+0x344d0>
   41779:	nop    DWORD PTR [rax+0x0]
   41780:	lea    rdx,[r12+rax*8]
   41784:	mov    rax,QWORD PTR [rdx]
   41787:	test   rax,rax
   4178a:	je     41610 <g_str_equal@plt+0x34350>
   41790:	add    QWORD PTR [rax+0x8],0x1
   41795:	add    r13d,0x1
   41799:	mov    rdi,rbx
   4179c:	mov    rsi,QWORD PTR [rdx]
   4179f:	call   2f4f0 <g_str_equal@plt+0x22230>
   417a4:	movsxd rax,r13d
   417a7:	cmp    rax,rbp
   417aa:	jb     41780 <g_str_equal@plt+0x344c0>
   417ac:	mov    rdi,r12
   417af:	call   d2b0 <g_free@plt>
   417b4:	jmp    4168a <g_str_equal@plt+0x343ca>
   417b9:	mov    rdi,r15
   417bc:	call   41360 <g_str_equal@plt+0x340a0>
   417c1:	mov    rdi,QWORD PTR [rsp]
   417c5:	lea    r8,[rip+0x21bec]        # 633b8 <_fini@@Base+0x10c64>
   417cc:	lea    rcx,[rip+0x21c85]        # 63458 <_fini@@Base+0x10d04>
   417d3:	lea    rsi,[rip+0x21ba6]        # 63380 <_fini@@Base+0x10c2c>
   417da:	mov    rbx,rax
   417dd:	mov    r9,rax
   417e0:	mov    edx,0x14e
   417e5:	xor    eax,eax
   417e7:	call   3a090 <g_str_equal@plt+0x2cdd0>
   417ec:	mov    rdi,rbx
   417ef:	xor    ebx,ebx
   417f1:	call   d2b0 <g_free@plt>
   417f6:	jmp    4168a <g_str_equal@plt+0x343ca>
   417fb:	call   2f420 <g_str_equal@plt+0x22160>
   41800:	mov    rbx,rax
   41803:	mov    rax,QWORD PTR [rsp+0x8]
   41808:	cmp    QWORD PTR [r12+rax*8-0x8],0x0
   4180e:	je     417ac <g_str_equal@plt+0x344ec>
   41810:	lea    rcx,[rip+0x21c31]        # 63448 <_fini@@Base+0x10cf4>
   41817:	lea    rsi,[rip+0x21b62]        # 63380 <_fini@@Base+0x10c2c>
   4181e:	lea    rdi,[rip+0x21a98]        # 632bd <_fini@@Base+0x10b69>
   41825:	mov    edx,0x173
   4182a:	call   c390 <__assert_fail@plt>
   4182f:	nop
   41830:	lea    rcx,[rip+0x21c51]        # 63488 <_fini@@Base+0x10d34>
   41837:	lea    rsi,[rip+0x1be5a]        # 5d698 <_fini@@Base+0xaf44>
   4183e:	lea    rdi,[rip+0x1be9b]        # 5d6e0 <_fini@@Base+0xaf8c>
   41845:	mov    edx,0x7f
   4184a:	call   c390 <__assert_fail@plt>
   4184f:	lea    rcx,[rip+0x21bf2]        # 63448 <_fini@@Base+0x10cf4>
   41856:	lea    rsi,[rip+0x21b23]        # 63380 <_fini@@Base+0x10c2c>
   4185d:	lea    rdi,[rip+0x21a4e]        # 632b2 <_fini@@Base+0x10b5e>
   41864:	mov    edx,0x15c
   41869:	call   c390 <__assert_fail@plt>
   4186e:	call   d583 <g_str_equal@plt+0x2c3>
   41873:	call   cd30 <__stack_chk_fail@plt>
   41878:	nop    DWORD PTR [rax+rax*1+0x0]
   41880:	push   r15
   41882:	push   r14
   41884:	push   r13
   41886:	push   r12
   41888:	push   rbp
   41889:	push   rbx
   4188a:	sub    rsp,0xe8
   41891:	mov    rax,QWORD PTR fs:0x28
   4189a:	mov    QWORD PTR [rsp+0xd8],rax
   418a2:	xor    eax,eax
   418a4:	mov    QWORD PTR [rsp+0x20],rdi
   418a9:	mov    QWORD PTR [rsp+0x28],rsi
   418ae:	mov    QWORD PTR [rsp+0x10],rdx
   418b3:	call   2eb40 <g_str_equal@plt+0x21880>
   418b8:	mov    QWORD PTR [rsp+0x30],rax
   418bd:	lea    rax,[rsp+0x48]
   418c2:	mov    QWORD PTR [rsp+0x18],rax
   418c7:	lea    rax,[rsp+0x50]
   418cc:	mov    QWORD PTR [rsp+0x8],rax
   418d1:	mov    rax,QWORD PTR [rsp+0x20]
   418d6:	cmp    BYTE PTR [rax],0x0
   418d9:	je     41be8 <g_str_equal@plt+0x34928>
   418df:	mov    rbp,QWORD PTR [rsp+0x20]
   418e4:	lea    rsi,[rip+0x21a02]        # 632ed <_fini@@Base+0x10b99>
   418eb:	mov    rdi,rbp
   418ee:	mov    r13,rbp
   418f1:	call   cfb0 <strcspn@plt>
   418f6:	mov    rcx,QWORD PTR [rsp+0x28]
   418fb:	add    r13,rax
   418fe:	mov    QWORD PTR [rsp+0x38],rax
   41903:	test   rcx,rcx
   41906:	je     41a20 <g_str_equal@plt+0x34760>
   4190c:	test   rax,rax
   4190f:	je     41a20 <g_str_equal@plt+0x34760>
   41915:	cmp    BYTE PTR [r13+0x0],0x3d
   4191a:	je     41932 <g_str_equal@plt+0x34672>
   4191c:	mov    rbp,rcx
   4191f:	mov    rdi,rcx
   41922:	mov    r13,rbp
   41925:	call   c720 <strlen@plt>
   4192a:	mov    QWORD PTR [rsp+0x38],rax
   4192f:	add    r13,rax
   41932:	mov    r12,QWORD PTR [rsp+0x30]
   41937:	mov    r14,rbp
   4193a:	jmp    419f9 <g_str_equal@plt+0x34739>
   4193f:	nop
   41940:	mov    rsi,QWORD PTR [rsp+0x18]
   41945:	mov    rdi,r14
   41948:	call   412e0 <g_str_equal@plt+0x34020>
   4194d:	test   eax,eax
   4194f:	js     41a02 <g_str_equal@plt+0x34742>
   41955:	mov    rbx,QWORD PTR [rsp+0x48]
   4195a:	sub    rbx,r14
   4195d:	lea    r15,[r14+rbx*1]
   41961:	cmp    r15,r13
   41964:	ja     41cdb <g_str_equal@plt+0x34a1b>
   4196a:	test   rbx,rbx
   4196d:	je     41a30 <g_str_equal@plt+0x34770>
   41973:	cmp    r15,r13
   41976:	jae    41982 <g_str_equal@plt+0x346c2>
   41978:	cmp    BYTE PTR [r15],0x2e
   4197c:	jne    41a30 <g_str_equal@plt+0x34770>
   41982:	cmp    rbx,0x7f
   41986:	ja     41ad8 <g_str_equal@plt+0x34818>
   4198c:	cmp    rbp,r14
   4198f:	je     419cf <g_str_equal@plt+0x3470f>
   41991:	mov    r9,QWORD PTR [rsp+0x10]
   41996:	mov    rsi,QWORD PTR [rsp+0x8]
   4199b:	lea    r8,[r14-0x1]
   4199f:	xor    edx,edx
   419a1:	mov    rdi,r12
   419a4:	mov    rcx,rbp
   419a7:	call   413c0 <g_str_equal@plt+0x34100>
   419ac:	test   rax,rax
   419af:	mov    r12,rax
   419b2:	je     41a6d <g_str_equal@plt+0x347ad>
   419b8:	mov    eax,DWORD PTR [rax]
   419ba:	lea    edx,[rax-0x1]
   419bd:	cmp    edx,0x5
   419c0:	ja     41cfa <g_str_equal@plt+0x34a3a>
   419c6:	cmp    eax,0x4
   419c9:	jne    41d19 <g_str_equal@plt+0x34a59>
   419cf:	mov    rdi,QWORD PTR [rsp+0x8]
   419d4:	mov    ecx,0x80
   419d9:	mov    rdx,rbx
   419dc:	mov    rsi,r14
   419df:	call   c510 <__memcpy_chk@plt>
   419e4:	movzx  eax,BYTE PTR [r15]
   419e8:	mov    BYTE PTR [rsp+rbx*1+0x50],0x0
   419ed:	cmp    al,0x2e
   419ef:	jne    41b30 <g_str_equal@plt+0x34870>
   419f5:	lea    r14,[r15+0x1]
   419f9:	cmp    rbp,r14
   419fc:	jne    41940 <g_str_equal@plt+0x34680>
   41a02:	xor    esi,esi
   41a04:	mov    rdi,r14
   41a07:	mov    ebx,0x0
   41a0c:	call   2e030 <g_str_equal@plt+0x20d70>
   41a11:	test   eax,eax
   41a13:	cmovs  eax,ebx
   41a16:	movsxd rbx,eax
   41a19:	jmp    4195d <g_str_equal@plt+0x3469d>
   41a1e:	xchg   ax,ax
   41a20:	mov    rbp,QWORD PTR [rsp+0x20]
   41a25:	jmp    41932 <g_str_equal@plt+0x34672>
   41a2a:	nop    WORD PTR [rax+rax*1+0x0]
   41a30:	cmp    QWORD PTR [rsp+0x28],rbp
   41a35:	je     41d5c <g_str_equal@plt+0x34a9c>
   41a3b:	sub    rsp,0x8
   41a3f:	lea    r8,[rip+0x218d0]        # 63316 <_fini@@Base+0x10bc2>
   41a46:	lea    rcx,[rip+0x21a53]        # 634a0 <_fini@@Base+0x10d4c>
   41a4d:	push   rbp
   41a4e:	mov    r9d,DWORD PTR [rsp+0x48]
   41a53:	mov    edx,0xcf
   41a58:	mov    rdi,QWORD PTR [rsp+0x20]
   41a5d:	lea    rsi,[rip+0x2191c]        # 63380 <_fini@@Base+0x10c2c>
   41a64:	xor    eax,eax
   41a66:	call   3a090 <g_str_equal@plt+0x2cdd0>
   41a6b:	pop    rax
   41a6c:	pop    rdx
   41a6d:	mov    rax,QWORD PTR [rsp+0x30]
   41a72:	test   rax,rax
   41a75:	je     41a9a <g_str_equal@plt+0x347da>
   41a77:	mov    rax,QWORD PTR [rax+0x8]
   41a7b:	test   rax,rax
   41a7e:	je     41d7b <g_str_equal@plt+0x34abb>
   41a84:	mov    rcx,QWORD PTR [rsp+0x30]
   41a89:	sub    rax,0x1
   41a8d:	test   rax,rax
   41a90:	mov    QWORD PTR [rcx+0x8],rax
   41a94:	je     41ca0 <g_str_equal@plt+0x349e0>
   41a9a:	mov    QWORD PTR [rsp+0x30],0x0
   41aa3:	mov    rcx,QWORD PTR [rsp+0xd8]
   41aab:	xor    rcx,QWORD PTR fs:0x28
   41ab4:	mov    rax,QWORD PTR [rsp+0x30]
   41ab9:	jne    41d57 <g_str_equal@plt+0x34a97>
   41abf:	add    rsp,0xe8
   41ac6:	pop    rbx
   41ac7:	pop    rbp
   41ac8:	pop    r12
   41aca:	pop    r13
   41acc:	pop    r14
   41ace:	pop    r15
   41ad0:	ret    
   41ad1:	nop    DWORD PTR [rax+0x0]
   41ad8:	cmp    QWORD PTR [rsp+0x28],rbp
   41add:	je     41d38 <g_str_equal@plt+0x34a78>
   41ae3:	cmp    rbp,r14
   41ae6:	jne    41af4 <g_str_equal@plt+0x34834>
   41ae8:	cmp    r15,r13
   41aeb:	lea    r9,[rip+0x1e77c]        # 6026e <_fini@@Base+0xdb1a>
   41af2:	je     41afb <g_str_equal@plt+0x3483b>
   41af4:	lea    r9,[rip+0x217e8]        # 632e3 <_fini@@Base+0x10b8f>
   41afb:	push   r14
   41afd:	push   rbx
   41afe:	lea    rcx,[rip+0x2199b]        # 634a0 <_fini@@Base+0x10d4c>
   41b05:	mov    rdi,QWORD PTR [rsp+0x20]
   41b0a:	lea    rsi,[rip+0x2186f]        # 63380 <_fini@@Base+0x10c2c>
   41b11:	lea    r8,[rip+0x218c8]        # 633e0 <_fini@@Base+0x10c8c>
   41b18:	mov    edx,0xd6
   41b1d:	xor    eax,eax
   41b1f:	call   3a090 <g_str_equal@plt+0x2cdd0>
   41b24:	pop    rcx
   41b25:	pop    rsi
   41b26:	jmp    41a6d <g_str_equal@plt+0x347ad>
   41b2b:	nop    DWORD PTR [rax+rax*1+0x0]
   41b30:	cmp    QWORD PTR [rsp+0x28],rbp
   41b35:	je     41c6f <g_str_equal@plt+0x349af>
   41b3b:	cmp    al,0x3d
   41b3d:	jne    41cb8 <g_str_equal@plt+0x349f8>
   41b43:	lea    rax,[r15+0x1]
   41b47:	mov    QWORD PTR [rsp+0x20],rax
   41b4c:	call   2e7d0 <g_str_equal@plt+0x21510>
   41b51:	mov    r15,QWORD PTR [rsp+0x20]
   41b56:	mov    rbx,rax
   41b59:	movzx  eax,BYTE PTR [r15]
   41b5d:	test   al,al
   41b5f:	jne    41b86 <g_str_equal@plt+0x348c6>
   41b61:	jmp    41bad <g_str_equal@plt+0x348ed>
   41b63:	nop    DWORD PTR [rax+rax*1+0x0]
   41b68:	mov    rax,r14
   41b6b:	movsx  esi,BYTE PTR [r15]
   41b6f:	mov    r14,r15
   41b72:	mov    r15,rax
   41b75:	mov    rdi,rbx
   41b78:	call   2e8a0 <g_str_equal@plt+0x215e0>
   41b7d:	movzx  eax,BYTE PTR [r14+0x1]
   41b82:	test   al,al
   41b84:	je     41ba8 <g_str_equal@plt+0x348e8>
   41b86:	cmp    al,0x2c
   41b88:	lea    r14,[r15+0x1]
   41b8c:	jne    41b68 <g_str_equal@plt+0x348a8>
   41b8e:	movsx  esi,BYTE PTR [r15+0x1]
   41b93:	cmp    sil,0x2c
   41b97:	jne    41c38 <g_str_equal@plt+0x34978>
   41b9d:	add    r15,0x2
   41ba1:	jmp    41b75 <g_str_equal@plt+0x348b5>
   41ba3:	nop    DWORD PTR [rax+rax*1+0x0]
   41ba8:	mov    QWORD PTR [rsp+0x20],r15
   41bad:	mov    r9,QWORD PTR [rsp+0x10]
   41bb2:	mov    rsi,QWORD PTR [rsp+0x8]
   41bb7:	mov    r8,r13
   41bba:	mov    rcx,rbp
   41bbd:	mov    rdx,rbx
   41bc0:	mov    rdi,r12
   41bc3:	call   413c0 <g_str_equal@plt+0x34100>
   41bc8:	test   rax,rax
   41bcb:	je     41a6d <g_str_equal@plt+0x347ad>
   41bd1:	mov    rax,QWORD PTR [rsp+0x20]
   41bd6:	mov    QWORD PTR [rsp+0x28],0x0
   41bdf:	cmp    BYTE PTR [rax],0x0
   41be2:	jne    418df <g_str_equal@plt+0x3461f>
   41be8:	mov    rdx,QWORD PTR [rsp+0x10]
   41bed:	mov    rdi,QWORD PTR [rsp+0x30]
   41bf2:	xor    esi,esi
   41bf4:	call   41530 <g_str_equal@plt+0x34270>
   41bf9:	test   rax,rax
   41bfc:	je     41a6d <g_str_equal@plt+0x347ad>
   41c02:	mov    rcx,QWORD PTR [rsp+0x30]
   41c07:	test   rcx,rcx
   41c0a:	je     41c15 <g_str_equal@plt+0x34955>
   41c0c:	cmp    rax,rcx
   41c0f:	je     41aa3 <g_str_equal@plt+0x347e3>
   41c15:	lea    rcx,[rip+0x218bc]        # 634d8 <_fini@@Base+0x10d84>
   41c1c:	lea    rsi,[rip+0x2175d]        # 63380 <_fini@@Base+0x10c2c>
   41c23:	lea    rdi,[rip+0x2170d]        # 63337 <_fini@@Base+0x10be3>
   41c2a:	mov    edx,0x1a2
   41c2f:	call   c390 <__assert_fail@plt>
   41c34:	nop    DWORD PTR [rax+0x0]
   41c38:	mov    r9,QWORD PTR [rsp+0x10]
   41c3d:	mov    rsi,QWORD PTR [rsp+0x8]
   41c42:	mov    r8,r13
   41c45:	mov    rcx,rbp
   41c48:	mov    rdx,rbx
   41c4b:	mov    rdi,r12
   41c4e:	call   413c0 <g_str_equal@plt+0x34100>
   41c53:	test   rax,rax
   41c56:	je     41a6d <g_str_equal@plt+0x347ad>
   41c5c:	test   r14,r14
   41c5f:	je     41a6d <g_str_equal@plt+0x347ad>
   41c65:	mov    QWORD PTR [rsp+0x20],r14
   41c6a:	jmp    41bd1 <g_str_equal@plt+0x34911>
   41c6f:	test   al,al
   41c71:	je     41b4c <g_str_equal@plt+0x3488c>
   41c77:	lea    rcx,[rip+0x21842]        # 634c0 <_fini@@Base+0x10d6c>
   41c7e:	lea    rsi,[rip+0x216fb]        # 63380 <_fini@@Base+0x10c2c>
   41c85:	lea    rdi,[rip+0x216a7]        # 63333 <_fini@@Base+0x10bdf>
   41c8c:	mov    edx,0xef
   41c91:	call   c390 <__assert_fail@plt>
   41c96:	nop    WORD PTR cs:[rax+rax*1+0x0]
   41ca0:	mov    rdi,QWORD PTR [rsp+0x30]
   41ca5:	call   30300 <g_str_equal@plt+0x23040>
   41caa:	mov    QWORD PTR [rsp+0x30],0x0
   41cb3:	jmp    41aa3 <g_str_equal@plt+0x347e3>
   41cb8:	sub    rsp,0x8
   41cbc:	mov    r9d,r15d
   41cbf:	lea    r8,[rip+0x2173a]        # 63400 <_fini@@Base+0x10cac>
   41cc6:	push   rbp
   41cc7:	sub    r9d,ebp
   41cca:	lea    rcx,[rip+0x217cf]        # 634a0 <_fini@@Base+0x10d4c>
   41cd1:	mov    edx,0xf4
   41cd6:	jmp    41a58 <g_str_equal@plt+0x34798>
   41cdb:	lea    rcx,[rip+0x217de]        # 634c0 <_fini@@Base+0x10d6c>
   41ce2:	lea    rsi,[rip+0x21697]        # 63380 <_fini@@Base+0x10c2c>
   41ce9:	lea    rdi,[rip+0x21600]        # 632f0 <_fini@@Base+0x10b9c>
   41cf0:	mov    edx,0xcb
   41cf5:	call   c390 <__assert_fail@plt>
   41cfa:	lea    rcx,[rip+0x21787]        # 63488 <_fini@@Base+0x10d34>
   41d01:	lea    rsi,[rip+0x1b990]        # 5d698 <_fini@@Base+0xaf44>
   41d08:	lea    rdi,[rip+0x1b9d1]        # 5d6e0 <_fini@@Base+0xaf8c>
   41d0f:	mov    edx,0x7f
   41d14:	call   c390 <__assert_fail@plt>
   41d19:	lea    rcx,[rip+0x217a0]        # 634c0 <_fini@@Base+0x10d6c>
   41d20:	lea    rsi,[rip+0x21659]        # 63380 <_fini@@Base+0x10c2c>
   41d27:	lea    rdi,[rip+0x21601]        # 6332f <_fini@@Base+0x10bdb>
   41d2e:	mov    edx,0xe1
   41d33:	call   c390 <__assert_fail@plt>
   41d38:	lea    rcx,[rip+0x21781]        # 634c0 <_fini@@Base+0x10d6c>
   41d3f:	lea    rsi,[rip+0x2163a]        # 63380 <_fini@@Base+0x10c2c>
   41d46:	lea    rdi,[rip+0x215b6]        # 63303 <_fini@@Base+0x10baf>
   41d4d:	mov    edx,0xd3
   41d52:	call   c390 <__assert_fail@plt>
   41d57:	call   cd30 <__stack_chk_fail@plt>
   41d5c:	lea    rcx,[rip+0x2175d]        # 634c0 <_fini@@Base+0x10d6c>
   41d63:	lea    rsi,[rip+0x21616]        # 63380 <_fini@@Base+0x10c2c>
   41d6a:	lea    rdi,[rip+0x21592]        # 63303 <_fini@@Base+0x10baf>
   41d71:	mov    edx,0xcd
   41d76:	call   c390 <__assert_fail@plt>
   41d7b:	call   d583 <g_str_equal@plt+0x2c3>
   41d80:	test   rcx,rcx
   41d83:	je     41ee2 <g_str_equal@plt+0x34c22>
   41d89:	push   r15
   41d8b:	push   r14
   41d8d:	push   r13
   41d8f:	push   r12
   41d91:	mov    r13,rdi
   41d94:	push   rbp
   41d95:	push   rbx
   41d96:	xor    r12d,r12d
   41d99:	mov    rbx,rsi
   41d9c:	sub    rsp,0x28
   41da0:	mov    QWORD PTR [rsp+0x18],rcx
   41da5:	mov    QWORD PTR [rsp+0x10],rdx
   41daa:	mov    DWORD PTR [rsp+0xc],ecx
   41dae:	xchg   ax,ax
   41db0:	mov    ebp,DWORD PTR [rsp+0xc]
   41db4:	mov    rcx,QWORD PTR [rsp+0x10]
   41db9:	mov    eax,0x10
   41dbe:	lea    rdx,[rip+0x21720]        # 634e5 <_fini@@Base+0x10d91>
   41dc5:	mov    r8d,r12d
   41dc8:	mov    esi,0x1
   41dcd:	mov    rdi,rbx
   41dd0:	sub    ebp,r12d
   41dd3:	cmp    ebp,0x10
   41dd6:	cmova  ebp,eax
   41dd9:	xor    eax,eax
   41ddb:	xor    r15d,r15d
   41dde:	call   c2b0 <__fprintf_chk@plt>
   41de3:	jmp    41e12 <g_str_equal@plt+0x34b52>
   41de5:	nop    DWORD PTR [rax]
   41de8:	lea    eax,[r12+r14*1]
   41dec:	lea    rdx,[rip+0x216fc]        # 634ef <_fini@@Base+0x10d9b>
   41df3:	mov    esi,0x1
   41df8:	mov    rdi,rbx
   41dfb:	add    r15,0x1
   41dff:	movzx  ecx,BYTE PTR [r13+rax*1+0x0]
   41e05:	xor    eax,eax
   41e07:	call   c2b0 <__fprintf_chk@plt>
   41e0c:	cmp    r15,0x10
   41e10:	je     41e47 <g_str_equal@plt+0x34b87>
   41e12:	test   r15b,0x3
   41e16:	mov    r14d,r15d
   41e19:	je     41ed0 <g_str_equal@plt+0x34c10>
   41e1f:	cmp    ebp,r14d
   41e22:	ja     41de8 <g_str_equal@plt+0x34b28>
   41e24:	lea    rdi,[rip+0x1e1cb]        # 5fff6 <_fini@@Base+0xd8a2>
   41e2b:	mov    rcx,rbx
   41e2e:	mov    edx,0x3
   41e33:	mov    esi,0x1
   41e38:	add    r15,0x1
   41e3c:	call   d090 <fwrite@plt>
   41e41:	cmp    r15,0x10
   41e45:	jne    41e12 <g_str_equal@plt+0x34b52>
   41e47:	mov    rsi,rbx
   41e4a:	mov    edi,0x20
   41e4f:	call   c6d0 <fputc@plt>
   41e54:	cmp    DWORD PTR [rsp+0xc],r12d
   41e59:	je     41e9b <g_str_equal@plt+0x34bdb>
   41e5b:	xor    r15d,r15d
   41e5e:	mov    r14d,0x2e
   41e64:	nop    DWORD PTR [rax+0x0]
   41e68:	lea    eax,[r12+r15*1]
   41e6c:	lea    rdx,[rip+0x21682]        # 634f5 <_fini@@Base+0x10da1>
   41e73:	mov    esi,0x1
   41e78:	mov    rdi,rbx
   41e7b:	movsx  ecx,BYTE PTR [r13+rax*1+0x0]
   41e81:	lea    eax,[rcx-0x20]
   41e84:	cmp    eax,0x5f
   41e87:	cmovae ecx,r14d
   41e8b:	xor    eax,eax
   41e8d:	add    r15,0x1
   41e91:	call   c2b0 <__fprintf_chk@plt>
   41e96:	cmp    ebp,r15d
   41e99:	ja     41e68 <g_str_equal@plt+0x34ba8>
   41e9b:	mov    rsi,rbx
   41e9e:	mov    edi,0xa
   41ea3:	call   c6d0 <fputc@plt>
   41ea8:	lea    eax,[r12+0x10]
   41ead:	cmp    rax,QWORD PTR [rsp+0x18]
   41eb2:	mov    r12,rax
   41eb5:	jb     41db0 <g_str_equal@plt+0x34af0>
   41ebb:	add    rsp,0x28
   41ebf:	pop    rbx
   41ec0:	pop    rbp
   41ec1:	pop    r12
   41ec3:	pop    r13
   41ec5:	pop    r14
   41ec7:	pop    r15
   41ec9:	ret    
   41eca:	nop    WORD PTR [rax+rax*1+0x0]
   41ed0:	mov    rsi,rbx
   41ed3:	mov    edi,0x20
   41ed8:	call   c6d0 <fputc@plt>
   41edd:	jmp    41e1f <g_str_equal@plt+0x34b5f>
   41ee2:	repz ret 
   41ee4:	nop    WORD PTR cs:[rax+rax*1+0x0]
   41eee:	xchg   ax,ax
   41ef0:	push   r12
   41ef2:	push   rbp
   41ef3:	mov    rbp,rdi
   41ef6:	push   rbx
   41ef7:	xor    ebx,ebx
   41ef9:	sub    rsp,0x20
   41efd:	mov    rax,QWORD PTR fs:0x28
   41f06:	mov    QWORD PTR [rsp+0x18],rax
   41f0b:	xor    eax,eax
   41f0d:	mov    r12,rsp
   41f10:	call   c2e0 <g_random_int@plt>
   41f15:	mov    DWORD PTR [r12+rbx*4],eax
   41f19:	add    rbx,0x1
   41f1d:	cmp    rbx,0x4
   41f21:	jne    41f10 <g_str_equal@plt+0x34c50>
   41f23:	movdqa xmm0,XMMWORD PTR [rsp]
   41f28:	movups XMMWORD PTR [rbp+0x0],xmm0
   41f2c:	movzx  eax,BYTE PTR [rbp+0x8]
   41f30:	and    eax,0x3f
   41f33:	or     eax,0xffffff80
   41f36:	mov    BYTE PTR [rbp+0x8],al
   41f39:	movzx  eax,BYTE PTR [rbp+0x6]
   41f3d:	and    eax,0xf
   41f40:	or     eax,0x40
   41f43:	mov    BYTE PTR [rbp+0x6],al
   41f46:	mov    rax,QWORD PTR [rsp+0x18]
   41f4b:	xor    rax,QWORD PTR fs:0x28
   41f54:	jne    41f5f <g_str_equal@plt+0x34c9f>
   41f56:	add    rsp,0x20
   41f5a:	pop    rbx
   41f5b:	pop    rbp
   41f5c:	pop    r12
   41f5e:	ret    
   41f5f:	call   cd30 <__stack_chk_fail@plt>
   41f64:	xchg   ax,ax
   41f66:	nop    WORD PTR cs:[rax+rax*1+0x0]
   41f70:	mov    rax,QWORD PTR [rdi]
   41f73:	mov    rdx,QWORD PTR [rdi+0x8]
   41f77:	xor    rax,QWORD PTR [rip+0x243f02]        # 285e80 <stdout@@GLIBC_2.2.5+0x1538>
   41f7e:	xor    rdx,QWORD PTR [rip+0x243f03]        # 285e88 <stdout@@GLIBC_2.2.5+0x1540>
   41f85:	or     rdx,rax
   41f88:	sete   al
   41f8b:	movzx  eax,al
   41f8e:	ret    
   41f8f:	nop
   41f90:	mov    rax,QWORD PTR [rdi]
   41f93:	mov    rdx,QWORD PTR [rdi+0x8]
   41f97:	xor    rax,QWORD PTR [rsi]
   41f9a:	xor    rdx,QWORD PTR [rsi+0x8]
   41f9e:	or     rdx,rax
   41fa1:	sete   al
   41fa4:	movzx  eax,al
   41fa7:	ret    
   41fa8:	nop    DWORD PTR [rax+rax*1+0x0]
   41fb0:	sub    rsp,0x10
   41fb4:	movzx  edx,BYTE PTR [rdi+0xf]
   41fb8:	mov    rax,rsi
   41fbb:	lea    r8,[rip+0x21536]        # 634f8 <_fini@@Base+0x10da4>
   41fc2:	mov    rcx,0xffffffffffffffff
   41fc9:	mov    esi,0x25
   41fce:	push   rdx
   41fcf:	movzx  edx,BYTE PTR [rdi+0xe]
   41fd3:	push   rdx
   41fd4:	movzx  edx,BYTE PTR [rdi+0xd]
   41fd8:	push   rdx
   41fd9:	movzx  edx,BYTE PTR [rdi+0xc]
   41fdd:	push   rdx
   41fde:	movzx  edx,BYTE PTR [rdi+0xb]
   41fe2:	push   rdx
   41fe3:	movzx  edx,BYTE PTR [rdi+0xa]
   41fe7:	push   rdx
   41fe8:	movzx  edx,BYTE PTR [rdi+0x9]
   41fec:	push   rdx
   41fed:	movzx  edx,BYTE PTR [rdi+0x8]
   41ff1:	push   rdx
   41ff2:	movzx  edx,BYTE PTR [rdi+0x7]
   41ff6:	push   rdx
   41ff7:	movzx  edx,BYTE PTR [rdi+0x6]
   41ffb:	push   rdx
   41ffc:	movzx  edx,BYTE PTR [rdi+0x5]
   42000:	push   rdx
   42001:	movzx  edx,BYTE PTR [rdi+0x4]
   42005:	push   rdx
   42006:	movzx  edx,BYTE PTR [rdi+0x3]
   4200a:	push   rdx
   4200b:	movzx  edx,BYTE PTR [rdi+0x2]
   4200f:	push   rdx
   42010:	movzx  edx,BYTE PTR [rdi+0x1]
   42014:	push   rdx
   42015:	movzx  r9d,BYTE PTR [rdi]
   42019:	mov    edx,0x1
   4201e:	mov    rdi,rax
   42021:	xor    eax,eax
   42023:	call   cfe0 <__snprintf_chk@plt>
   42028:	add    rsp,0x88
   4202f:	ret    
   42030:	sub    rsp,0x10
   42034:	movzx  eax,BYTE PTR [rdi+0xf]
   42038:	movzx  ecx,BYTE PTR [rdi+0x2]
   4203c:	movzx  edx,BYTE PTR [rdi+0x1]
   42040:	movzx  esi,BYTE PTR [rdi]
   42043:	push   rax
   42044:	movzx  eax,BYTE PTR [rdi+0xe]
   42048:	push   rax
   42049:	movzx  eax,BYTE PTR [rdi+0xd]
   4204d:	push   rax
   4204e:	movzx  eax,BYTE PTR [rdi+0xc]
   42052:	push   rax
   42053:	movzx  eax,BYTE PTR [rdi+0xb]
   42057:	push   rax
   42058:	movzx  eax,BYTE PTR [rdi+0xa]
   4205c:	push   rax
   4205d:	movzx  eax,BYTE PTR [rdi+0x9]
   42061:	push   rax
   42062:	movzx  eax,BYTE PTR [rdi+0x8]
   42066:	push   rax
   42067:	movzx  eax,BYTE PTR [rdi+0x7]
   4206b:	push   rax
   4206c:	movzx  eax,BYTE PTR [rdi+0x6]
   42070:	push   rax
   42071:	movzx  eax,BYTE PTR [rdi+0x5]
   42075:	push   rax
   42076:	movzx  r9d,BYTE PTR [rdi+0x4]
   4207b:	xor    eax,eax
   4207d:	movzx  r8d,BYTE PTR [rdi+0x3]
   42082:	lea    rdi,[rip+0x2146f]        # 634f8 <_fini@@Base+0x10da4>
   42089:	call   c740 <g_strdup_printf@plt>
   4208e:	add    rsp,0x68
   42092:	ret    
   42093:	nop    DWORD PTR [rax]
   42096:	nop    WORD PTR cs:[rax+rax*1+0x0]
   420a0:	push   rbp
   420a1:	push   rbx
   420a2:	mov    rbp,rdi
   420a5:	mov    rbx,rsi
   420a8:	sub    rsp,0x8
   420ac:	call   c720 <strlen@plt>
   420b1:	xor    ecx,ecx
   420b3:	mov    edx,0x842100
   420b8:	movsxd rdi,ecx
   420bb:	cmp    rdi,rax
   420be:	jae    4210f <g_str_equal@plt+0x34e4f>
   420c0:	cmp    ecx,0x17
   420c3:	movzx  edi,BYTE PTR [rbp+rdi*1+0x0]
   420c8:	jbe    420f8 <g_str_equal@plt+0x34e38>
   420ca:	lea    esi,[rdi-0x30]
   420cd:	cmp    sil,0x9
   420d1:	jbe    42104 <g_str_equal@plt+0x34e44>
   420d3:	lea    esi,[rdi-0x41]
   420d6:	cmp    sil,0x5
   420da:	jbe    42104 <g_str_equal@plt+0x34e44>
   420dc:	sub    edi,0x61
   420df:	cmp    dil,0x5
   420e3:	jbe    42104 <g_str_equal@plt+0x34e44>
   420e5:	add    rsp,0x8
   420e9:	mov    eax,0xffffffff
   420ee:	pop    rbx
   420ef:	pop    rbp
   420f0:	ret    
   420f1:	nop    DWORD PTR [rax+0x0]
   420f8:	bt     rdx,rcx
   420fc:	jae    420ca <g_str_equal@plt+0x34e0a>
   420fe:	cmp    dil,0x2d
   42102:	jne    420e5 <g_str_equal@plt+0x34e25>
   42104:	add    ecx,0x1
   42107:	movsxd rdi,ecx
   4210a:	cmp    rdi,rax
   4210d:	jb     420c0 <g_str_equal@plt+0x34e00>
   4210f:	cmp    ecx,0x24
   42112:	jne    420e5 <g_str_equal@plt+0x34e25>
   42114:	lea    rax,[rbx+0xf]
   42118:	lea    rcx,[rbx+0x1]
   4211c:	lea    r9,[rbx+0x3]
   42120:	lea    r8,[rbx+0x2]
   42124:	lea    rsi,[rip+0x213cd]        # 634f8 <_fini@@Base+0x10da4>
   4212b:	mov    rdx,rbx
   4212e:	push   rax
   4212f:	lea    rax,[rbx+0xe]
   42133:	mov    rdi,rbp
   42136:	push   rax
   42137:	lea    rax,[rbx+0xd]
   4213b:	push   rax
   4213c:	lea    rax,[rbx+0xc]
   42140:	push   rax
   42141:	lea    rax,[rbx+0xb]
   42145:	push   rax
   42146:	lea    rax,[rbx+0xa]
   4214a:	push   rax
   4214b:	lea    rax,[rbx+0x9]
   4214f:	push   rax
   42150:	lea    rax,[rbx+0x8]
   42154:	push   rax
   42155:	lea    rax,[rbx+0x7]
   42159:	push   rax
   4215a:	lea    rax,[rbx+0x6]
   4215e:	push   rax
   4215f:	lea    rax,[rbx+0x5]
   42163:	push   rax
   42164:	lea    rax,[rbx+0x4]
   42168:	push   rax
   42169:	xor    eax,eax
   4216b:	call   c920 <sscanf@plt>
   42170:	add    rsp,0x60
   42174:	cmp    eax,0x10
   42177:	setne  al
   4217a:	add    rsp,0x8
   4217e:	movzx  eax,al
   42181:	neg    eax
   42183:	pop    rbx
   42184:	pop    rbp
   42185:	ret    
   42186:	nop    WORD PTR cs:[rax+rax*1+0x0]
   42190:	test   dil,0x3
   42194:	jne    421b5 <g_str_equal@plt+0x34ef5>
   42196:	mov    eax,DWORD PTR [rdi]
   42198:	bswap  eax
   4219a:	mov    DWORD PTR [rdi],eax
   4219c:	movzx  eax,WORD PTR [rdi+0x4]
   421a0:	ror    ax,0x8
   421a4:	mov    WORD PTR [rdi+0x4],ax
   421a8:	movzx  eax,WORD PTR [rdi+0x6]
   421ac:	ror    ax,0x8
   421b0:	mov    WORD PTR [rdi+0x6],ax
   421b4:	ret    
   421b5:	lea    rcx,[rip+0x21414]        # 635d0 <_fini@@Base+0x10e7c>
   421bc:	lea    rsi,[rip+0x2139d]        # 63560 <_fini@@Base+0x10e0c>
   421c3:	lea    rdi,[rip+0x213ce]        # 63598 <_fini@@Base+0x10e44>
   421ca:	sub    rsp,0x8
   421ce:	mov    edx,0x73
   421d3:	call   c390 <__assert_fail@plt>
   421d8:	nop    DWORD PTR [rax+rax*1+0x0]
   421e0:	mov    rdi,QWORD PTR fs:0xfffffffffffffeb8
   421e9:	test   rdi,rdi
   421ec:	je     42228 <g_str_equal@plt+0x34f68>
   421ee:	push   rbx
   421ef:	mov    rax,rdi
   421f2:	jmp    42204 <g_str_equal@plt+0x34f44>
   421f4:	nop    DWORD PTR [rax+0x0]
   421f8:	mov    rax,QWORD PTR fs:0xfffffffffffffeb8
   42201:	mov    rdi,rbx
   42204:	mov    rbx,QWORD PTR [rdi+0x18]
   42208:	mov    rax,QWORD PTR [rax+0x18]
   4220c:	mov    QWORD PTR fs:0xfffffffffffffeb8,rax
   42215:	call   428a0 <g_str_equal@plt+0x355e0>
   4221a:	test   rbx,rbx
   4221d:	jne    421f8 <g_str_equal@plt+0x34f38>
   4221f:	pop    rbx
   42220:	ret    
   42221:	nop    DWORD PTR [rax+0x0]
   42228:	repz ret 
   4222a:	nop    WORD PTR [rax+rax*1+0x0]
   42230:	push   rbx
   42231:	mov    rbx,rdi
   42234:	sub    rsp,0x10
   42238:	mov    rax,QWORD PTR fs:0xfffffffffffffeb8
   42241:	test   rax,rax
   42244:	je     42280 <g_str_equal@plt+0x34fc0>
   42246:	mov    rdx,QWORD PTR [rax+0x18]
   4224a:	sub    DWORD PTR fs:0xfffffffffffffeb0,0x1
   42253:	mov    QWORD PTR fs:0xfffffffffffffeb8,rdx
   4225c:	lea    rdx,[rax+0x40]
   42260:	mov    QWORD PTR [rax],rbx
   42263:	mov    QWORD PTR [rax+0x8],rsi
   42267:	mov    QWORD PTR [rax+0x40],0x0
   4226f:	mov    QWORD PTR [rax+0x48],rdx
   42273:	add    rsp,0x10
   42277:	pop    rbx
   42278:	ret    
   42279:	nop    DWORD PTR [rax+0x0]
   42280:	cmp    DWORD PTR [rip+0x243c09],0x40        # 285e90 <stdout@@GLIBC_2.2.5+0x1548>
   42287:	jbe    422bc <g_str_equal@plt+0x34ffc>
   42289:	cmp    QWORD PTR fs:0xfffffffffffffe98,0x0
   42293:	je     422d0 <g_str_equal@plt+0x35010>
   42295:	xor    eax,eax
   42297:	xchg   DWORD PTR [rip+0x243bf3],eax        # 285e90 <stdout@@GLIBC_2.2.5+0x1548>
   4229d:	mov    DWORD PTR fs:0xfffffffffffffeb0,eax
   422a5:	xor    eax,eax
   422a7:	xchg   QWORD PTR [rip+0x243bea],rax        # 285e98 <stdout@@GLIBC_2.2.5+0x1550>
   422ae:	test   rax,rax
   422b1:	mov    QWORD PTR fs:0xfffffffffffffeb8,rax
   422ba:	jne    42246 <g_str_equal@plt+0x34f86>
   422bc:	mov    QWORD PTR [rsp+0x8],rsi
   422c1:	call   42790 <g_str_equal@plt+0x354d0>
   422c6:	mov    rsi,QWORD PTR [rsp+0x8]
   422cb:	jmp    4225c <g_str_equal@plt+0x34f9c>
   422cd:	nop    DWORD PTR [rax]
   422d0:	mov    rdi,QWORD PTR fs:0x0
   422d9:	lea    rax,[rip+0xffffffffffffff00]        # 421e0 <g_str_equal@plt+0x34f20>
   422e0:	mov    QWORD PTR [rsp+0x8],rsi
   422e5:	mov    QWORD PTR fs:0xfffffffffffffe98,rax
   422ee:	add    rdi,0xfffffffffffffe98
   422f5:	call   396f0 <g_str_equal@plt+0x2c430>
   422fa:	mov    rsi,QWORD PTR [rsp+0x8]
   422ff:	jmp    42295 <g_str_equal@plt+0x34fd5>
   42301:	nop    DWORD PTR [rax+rax*1+0x0]
   42306:	nop    WORD PTR cs:[rax+rax*1+0x0]
   42310:	push   r15
   42312:	push   r14
   42314:	lea    r15,[rip+0x212c5]        # 635e0 <_fini@@Base+0x10e8c>
   4231b:	push   r13
   4231d:	push   r12
   4231f:	mov    r12,rdi
   42322:	push   rbp
   42323:	push   rbx
   42324:	mov    rbx,rsi
   42327:	sub    rsp,0x58
   4232b:	mov    rax,QWORD PTR fs:0x28
   42334:	mov    QWORD PTR [rsp+0x48],rax
   42339:	xor    eax,eax
   4233b:	call   42970 <g_str_equal@plt+0x356b0>
   42340:	mov    rbp,rax
   42343:	lea    rax,[rbx+0x38]
   42347:	mov    QWORD PTR [rbx+0x38],0x0
   4234f:	mov    QWORD PTR [rsp+0x20],rbx
   42354:	lea    r13,[rsp+0x20]
   42359:	lea    r14,[rsp+0x30]
   4235e:	mov    QWORD PTR [rsp+0x28],rax
   42363:	jmp    4244d <g_str_equal@plt+0x3518d>
   42368:	nop    DWORD PTR [rax+rax*1+0x0]
   42370:	mov    esi,DWORD PTR [rip+0x242762]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   42376:	test   esi,esi
   42378:	jne    42484 <g_str_equal@plt+0x351c4>
   4237e:	test   r10,r10
   42381:	jne    425e6 <g_str_equal@plt+0x35326>
   42387:	cmp    QWORD PTR [rbx+0x10],0x0
   4238c:	jne    425c4 <g_str_equal@plt+0x35304>
   42392:	mov    QWORD PTR [rbx+0x10],rbp
   42396:	mov    QWORD PTR [rbx+0x28],r12
   4239a:	mov    edx,0x3
   4239f:	mov    rsi,rbx
   423a2:	mov    rdi,rbp
   423a5:	call   428c0 <g_str_equal@plt+0x35600>
   423aa:	cmp    QWORD PTR [rbx+0x40],0x0
   423af:	je     423d6 <g_str_equal@plt+0x35116>
   423b1:	mov    rdx,QWORD PTR [rbx+0x48]
   423b5:	mov    rcx,QWORD PTR [rsp+0x20]
   423ba:	mov    QWORD PTR [rdx],rcx
   423bd:	mov    rdx,QWORD PTR [rbx+0x40]
   423c1:	mov    QWORD PTR [rbx+0x40],0x0
   423c9:	mov    QWORD PTR [rsp+0x20],rdx
   423ce:	lea    rdx,[rbx+0x40]
   423d2:	mov    QWORD PTR [rbx+0x48],rdx
   423d6:	cmp    eax,0x1
   423d9:	je     42448 <g_str_equal@plt+0x35188>
   423db:	cmp    eax,0x2
   423de:	jne    425bf <g_str_equal@plt+0x352ff>
   423e4:	cmp    QWORD PTR [rbx+0x20],0x0
   423e9:	jne    4260f <g_str_equal@plt+0x3534f>
   423ef:	mov    eax,DWORD PTR [rip+0x2426e3]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   423f5:	test   eax,eax
   423f7:	jne    42540 <g_str_equal@plt+0x35280>
   423fd:	cmp    DWORD PTR [rip+0x243a8c],0x7f        # 285e90 <stdout@@GLIBC_2.2.5+0x1548>
   42404:	mov    QWORD PTR [rbx+0x10],0x0
   4240c:	jbe    42500 <g_str_equal@plt+0x35240>
   42412:	mov    eax,DWORD PTR fs:0xfffffffffffffeb0
   4241a:	cmp    eax,0x3f
   4241d:	ja     42530 <g_str_equal@plt+0x35270>
   42423:	mov    rdx,QWORD PTR fs:0xfffffffffffffeb8
   4242c:	add    eax,0x1
   4242f:	mov    QWORD PTR fs:0xfffffffffffffeb8,rbx
   42438:	mov    DWORD PTR fs:0xfffffffffffffeb0,eax
   42440:	mov    QWORD PTR [rbx+0x18],rdx
   42444:	nop    DWORD PTR [rax+0x0]
   42448:	mov    rbx,QWORD PTR [rsp+0x20]
   4244d:	test   rbx,rbx
   42450:	je     425a0 <g_str_equal@plt+0x352e0>
   42456:	mov    r10,QWORD PTR [rbx+0x30]
   4245a:	mov    rax,QWORD PTR [rsp+0x20]
   4245f:	mov    rax,QWORD PTR [rax+0x38]
   42463:	test   rax,rax
   42466:	mov    QWORD PTR [rsp+0x20],rax
   4246b:	jne    42370 <g_str_equal@plt+0x350b0>
   42471:	mov    esi,DWORD PTR [rip+0x242661]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   42477:	mov    QWORD PTR [rsp+0x28],r13
   4247c:	test   esi,esi
   4247e:	je     4237e <g_str_equal@plt+0x350be>
   42484:	cmp    WORD PTR [rip+0x244be6],0x0        # 287072 <stdout@@GLIBC_2.2.5+0x272a>
   4248c:	je     4237e <g_str_equal@plt+0x350be>
   42492:	test   BYTE PTR [rip+0x243a08],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   42499:	je     4237e <g_str_equal@plt+0x350be>
   4249f:	mov    r8,QWORD PTR [rbx+0x8]
   424a3:	xor    esi,esi
   424a5:	mov    rdi,r14
   424a8:	mov    QWORD PTR [rsp+0x18],r10
   424ad:	mov    QWORD PTR [rsp+0x10],r8
   424b2:	call   c3e0 <gettimeofday@plt>
   424b7:	mov    rcx,QWORD PTR [rsp+0x38]
   424bc:	mov    rdx,QWORD PTR [rsp+0x30]
   424c1:	mov    QWORD PTR [rsp+0x8],rcx
   424c6:	mov    QWORD PTR [rsp],rdx
   424ca:	call   c5b0 <getpid@plt>
   424cf:	mov    r8,QWORD PTR [rsp+0x10]
   424d4:	mov    esi,eax
   424d6:	mov    r9,rbp
   424d9:	mov    rdi,r15
   424dc:	xor    eax,eax
   424de:	push   r8
   424e0:	push   rbx
   424e1:	mov    r8,r12
   424e4:	mov    rcx,QWORD PTR [rsp+0x18]
   424e9:	mov    rdx,QWORD PTR [rsp+0x10]
   424ee:	call   431a0 <g_str_equal@plt+0x35ee0>
   424f3:	pop    rdx
   424f4:	pop    rcx
   424f5:	mov    r10,QWORD PTR [rsp+0x18]
   424fa:	jmp    4237e <g_str_equal@plt+0x350be>
   424ff:	nop
   42500:	mov    rdx,QWORD PTR [rip+0x243991]        # 285e98 <stdout@@GLIBC_2.2.5+0x1550>
   42507:	mov    rax,rdx
   4250a:	mov    QWORD PTR [rbx+0x18],rdx
   4250e:	lock cmpxchg QWORD PTR [rip+0x243981],rbx        # 285e98 <stdout@@GLIBC_2.2.5+0x1550>
   42517:	cmp    rdx,rax
   4251a:	jne    42500 <g_str_equal@plt+0x35240>
   4251c:	lock add DWORD PTR [rip+0x24396c],0x1        # 285e90 <stdout@@GLIBC_2.2.5+0x1548>
   42524:	jmp    42448 <g_str_equal@plt+0x35188>
   42529:	nop    DWORD PTR [rax+0x0]
   42530:	mov    rdi,rbx
   42533:	call   428a0 <g_str_equal@plt+0x355e0>
   42538:	jmp    42448 <g_str_equal@plt+0x35188>
   4253d:	nop    DWORD PTR [rax]
   42540:	cmp    WORD PTR [rip+0x244b26],0x0        # 28706e <stdout@@GLIBC_2.2.5+0x2726>
   42548:	je     423fd <g_str_equal@plt+0x3513d>
   4254e:	test   BYTE PTR [rip+0x24394c],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   42555:	je     423fd <g_str_equal@plt+0x3513d>
   4255b:	xor    esi,esi
   4255d:	mov    rdi,r14
   42560:	call   c3e0 <gettimeofday@plt>
   42565:	mov    rcx,QWORD PTR [rsp+0x38]
   4256a:	mov    rdx,QWORD PTR [rsp+0x30]
   4256f:	mov    QWORD PTR [rsp+0x8],rcx
   42574:	mov    QWORD PTR [rsp],rdx
   42578:	call   c5b0 <getpid@plt>
   4257d:	mov    rcx,QWORD PTR [rsp+0x8]
   42582:	mov    rdx,QWORD PTR [rsp]
   42586:	lea    rdi,[rip+0x21103]        # 63690 <_fini@@Base+0x10f3c>
   4258d:	mov    esi,eax
   4258f:	mov    r8,rbx
   42592:	xor    eax,eax
   42594:	call   431a0 <g_str_equal@plt+0x35ee0>
   42599:	jmp    423fd <g_str_equal@plt+0x3513d>
   4259e:	xchg   ax,ax
   425a0:	mov    rax,QWORD PTR [rsp+0x48]
   425a5:	xor    rax,QWORD PTR fs:0x28
   425ae:	jne    4262e <g_str_equal@plt+0x3536e>
   425b0:	add    rsp,0x58
   425b4:	pop    rbx
   425b5:	pop    rbp
   425b6:	pop    r12
   425b8:	pop    r13
   425ba:	pop    r14
   425bc:	pop    r15
   425be:	ret    
   425bf:	call   c270 <abort@plt>
   425c4:	mov    rcx,QWORD PTR [rip+0x242375]        # 284940 <stderr@@GLIBC_2.2.5>
   425cb:	lea    rdi,[rip+0x21056]        # 63628 <_fini@@Base+0x10ed4>
   425d2:	mov    edx,0x22
   425d7:	mov    esi,0x1
   425dc:	call   d090 <fwrite@plt>
   425e1:	call   c270 <abort@plt>
   425e6:	mov    rdi,QWORD PTR [rip+0x242353]        # 284940 <stderr@@GLIBC_2.2.5>
   425ed:	lea    rcx,[rip+0x2115c]        # 63750 <_fini@@Base+0x10ffc>
   425f4:	lea    rdx,[rip+0x1e5dd]        # 60bd8 <_fini@@Base+0xe484>
   425fb:	mov    r8,r10
   425fe:	mov    esi,0x1
   42603:	xor    eax,eax
   42605:	call   c2b0 <__fprintf_chk@plt>
   4260a:	call   c270 <abort@plt>
   4260f:	lea    rcx,[rip+0x2111a]        # 63730 <_fini@@Base+0x10fdc>
   42616:	lea    rsi,[rip+0x21033]        # 63650 <_fini@@Base+0x10efc>
   4261d:	lea    rdi,[rip+0x210f6]        # 6371a <_fini@@Base+0x10fc6>
   42624:	mov    edx,0x9f
   42629:	call   c390 <__assert_fail@plt>
   4262e:	call   cd30 <__stack_chk_fail@plt>
   42633:	nop    DWORD PTR [rax]
   42636:	nop    WORD PTR cs:[rax+rax*1+0x0]
   42640:	push   rbx
   42641:	mov    rbx,rdi
   42644:	call   43fa0 <g_str_equal@plt+0x36ce0>
   42649:	mov    rsi,rbx
   4264c:	mov    rdi,rax
   4264f:	pop    rbx
   42650:	jmp    42310 <g_str_equal@plt+0x35050>
   42655:	nop
   42656:	nop    WORD PTR cs:[rax+rax*1+0x0]
   42660:	cmp    QWORD PTR [rdi+0x10],0x0
   42665:	je     42670 <g_str_equal@plt+0x353b0>
   42667:	repz ret 
   42669:	nop    DWORD PTR [rax+0x0]
   42670:	push   rbx
   42671:	mov    rbx,rdi
   42674:	call   43fa0 <g_str_equal@plt+0x36ce0>
   42679:	mov    rsi,rbx
   4267c:	mov    rdi,rax
   4267f:	pop    rbx
   42680:	jmp    42310 <g_str_equal@plt+0x35050>
   42685:	nop
   42686:	nop    WORD PTR cs:[rax+rax*1+0x0]
   42690:	push   r13
   42692:	push   r12
   42694:	push   rbp
   42695:	push   rbx
   42696:	sub    rsp,0x28
   4269a:	mov    rax,QWORD PTR fs:0x28
   426a3:	mov    QWORD PTR [rsp+0x18],rax
   426a8:	xor    eax,eax
   426aa:	call   42970 <g_str_equal@plt+0x356b0>
   426af:	mov    rbx,rax
   426b2:	mov    rbp,QWORD PTR [rax+0x10]
   426b6:	mov    eax,DWORD PTR [rip+0x24241c]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   426bc:	test   eax,eax
   426be:	jne    42700 <g_str_equal@plt+0x35440>
   426c0:	test   rbp,rbp
   426c3:	je     42751 <g_str_equal@plt+0x35491>
   426c9:	mov    QWORD PTR [rbx+0x10],0x0
   426d1:	mov    edx,0x1
   426d6:	mov    rsi,rbp
   426d9:	mov    rdi,rbx
   426dc:	call   428c0 <g_str_equal@plt+0x35600>
   426e1:	mov    rax,QWORD PTR [rsp+0x18]
   426e6:	xor    rax,QWORD PTR fs:0x28
   426ef:	jne    4274c <g_str_equal@plt+0x3548c>
   426f1:	add    rsp,0x28
   426f5:	pop    rbx
   426f6:	pop    rbp
   426f7:	pop    r12
   426f9:	pop    r13
   426fb:	ret    
   426fc:	nop    DWORD PTR [rax+0x0]
   42700:	cmp    WORD PTR [rip+0x244968],0x0        # 287070 <stdout@@GLIBC_2.2.5+0x2728>
   42708:	je     426c0 <g_str_equal@plt+0x35400>
   4270a:	test   BYTE PTR [rip+0x243790],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   42711:	je     426c0 <g_str_equal@plt+0x35400>
   42713:	mov    rdi,rsp
   42716:	xor    esi,esi
   42718:	call   c3e0 <gettimeofday@plt>
   4271d:	mov    r13,QWORD PTR [rsp+0x8]
   42722:	mov    r12,QWORD PTR [rsp]
   42726:	call   c5b0 <getpid@plt>
   4272b:	lea    rdi,[rip+0x20f8e]        # 636c0 <_fini@@Base+0x10f6c>
   42732:	mov    esi,eax
   42734:	mov    r9,rbp
   42737:	mov    r8,rbx
   4273a:	mov    rcx,r13
   4273d:	mov    rdx,r12
   42740:	xor    eax,eax
   42742:	call   431a0 <g_str_equal@plt+0x35ee0>
   42747:	jmp    426c0 <g_str_equal@plt+0x35400>
   4274c:	call   cd30 <__stack_chk_fail@plt>
   42751:	mov    rcx,QWORD PTR [rip+0x2421e8]        # 284940 <stderr@@GLIBC_2.2.5>
   42758:	lea    rdi,[rip+0x20f99]        # 636f8 <_fini@@Base+0x10fa4>
   4275f:	mov    edx,0x21
   42764:	mov    esi,0x1
   42769:	call   d090 <fwrite@plt>
   4276e:	call   c270 <abort@plt>
   42773:	nop    DWORD PTR [rax]
   42776:	nop    WORD PTR cs:[rax+rax*1+0x0]
   42780:	cmp    QWORD PTR [rdi+0x10],0x0
   42785:	setne  al
   42788:	ret    
   42789:	nop    DWORD PTR [rax+0x0]
   42790:	push   rbx
   42791:	sub    rsp,0x840
   42798:	lea    rdi,[rsp+0x490]
   427a0:	mov    rax,QWORD PTR fs:0x28
   427a9:	mov    QWORD PTR [rsp+0x838],rax
   427b1:	xor    eax,eax
   427b3:	call   ce40 <getcontext@plt>
   427b8:	cmp    eax,0xffffffff
   427bb:	je     42889 <g_str_equal@plt+0x355c9>
   427c1:	mov    edi,0x130
   427c6:	call   ce00 <g_malloc0@plt>
   427cb:	lea    rdi,[rax+0x60]
   427cf:	mov    rbx,rax
   427d2:	mov    QWORD PTR [rax+0x60],0x100000
   427da:	mov    QWORD PTR [rsp+0x8],rax
   427df:	call   38900 <g_str_equal@plt+0x2b640>
   427e4:	mov    rcx,rbx
   427e7:	mov    QWORD PTR [rbx+0x58],rax
   427eb:	mov    QWORD PTR [rsp+0x4a0],rax
   427f3:	mov    rax,QWORD PTR [rcx+0x60]
   427f7:	lea    rbx,[rsp+0x10]
   427fc:	lea    rdx,[rsp+0xe0]
   42804:	lea    rdi,[rsp+0x490]
   4280c:	mov    r8,rcx
   4280f:	lea    rsi,[rip+0xea]        # 42900 <g_str_equal@plt+0x35640>
   42816:	mov    QWORD PTR [rsp+0x498],rdx
   4281e:	mov    QWORD PTR [rcx+0x8],rbx
   42822:	shr    r8,0x20
   42826:	mov    QWORD PTR [rsp+0x4b0],rax
   4282e:	mov    edx,0x2
   42833:	xor    eax,eax
   42835:	mov    DWORD PTR [rsp+0x4a8],0x0
   42840:	call   c400 <makecontext@plt>
   42845:	xor    esi,esi
   42847:	mov    rdi,rbx
   4284a:	call   d0f0 <__sigsetjmp@plt>
   4284f:	test   eax,eax
   42851:	jne    42868 <g_str_equal@plt+0x355a8>
   42853:	lea    rsi,[rsp+0x490]
   4285b:	lea    rdi,[rsp+0xe0]
   42863:	call   c550 <swapcontext@plt>
   42868:	mov    rdx,QWORD PTR [rsp+0x838]
   42870:	xor    rdx,QWORD PTR fs:0x28
   42879:	mov    rax,QWORD PTR [rsp+0x8]
   4287e:	jne    4288e <g_str_equal@plt+0x355ce>
   42880:	add    rsp,0x840
   42887:	pop    rbx
   42888:	ret    
   42889:	call   c270 <abort@plt>
   4288e:	call   cd30 <__stack_chk_fail@plt>
   42893:	nop    DWORD PTR [rax]
   42896:	nop    WORD PTR cs:[rax+rax*1+0x0]
   428a0:	push   rbx
   428a1:	mov    rbx,rdi
   428a4:	mov    rsi,QWORD PTR [rdi+0x60]
   428a8:	mov    rdi,QWORD PTR [rdi+0x58]
   428ac:	call   389b0 <g_str_equal@plt+0x2b6f0>
   428b1:	mov    rdi,rbx
   428b4:	pop    rbx
   428b5:	jmp    d2b0 <g_free@plt>
   428ba:	nop    WORD PTR [rax+rax*1+0x0]
   428c0:	sub    rsp,0x18
   428c4:	add    rdi,0x68
   428c8:	mov    QWORD PTR fs:0xfffffffffffffec0,rsi
   428d1:	mov    QWORD PTR [rsp],rsi
   428d5:	xor    esi,esi
   428d7:	mov    DWORD PTR [rsp+0xc],edx
   428db:	call   d0f0 <__sigsetjmp@plt>
   428e0:	test   eax,eax
   428e2:	je     428e9 <g_str_equal@plt+0x35629>
   428e4:	add    rsp,0x18
   428e8:	ret    
   428e9:	mov    rdi,QWORD PTR [rsp]
   428ed:	mov    esi,DWORD PTR [rsp+0xc]
   428f1:	add    rdi,0x68
   428f5:	call   c520 <siglongjmp@plt>
   428fa:	nop    WORD PTR [rax+rax*1+0x0]
   42900:	push   rbx
   42901:	shl    rsi,0x20
   42905:	mov    edi,edi
   42907:	or     rdi,rsi
   4290a:	xor    esi,esi
   4290c:	sub    rsp,0x20
   42910:	mov    rax,QWORD PTR fs:0x28
   42919:	mov    QWORD PTR [rsp+0x18],rax
   4291e:	xor    eax,eax
   42920:	mov    rax,rdi
   42923:	add    rdi,0x68
   42927:	mov    QWORD PTR [rsp],rax
   4292b:	mov    QWORD PTR [rsp+0x8],rax
   42930:	call   d0f0 <__sigsetjmp@plt>
   42935:	mov    rcx,QWORD PTR [rsp]
   42939:	test   eax,eax
   4293b:	mov    rdi,QWORD PTR [rcx+0x8]
   4293f:	je     42960 <g_str_equal@plt+0x356a0>
   42941:	mov    rbx,QWORD PTR [rsp+0x8]
   42946:	mov    rdi,QWORD PTR [rbx+0x8]
   4294a:	call   QWORD PTR [rbx]
   4294c:	mov    rsi,QWORD PTR [rbx+0x10]
   42950:	mov    rdi,QWORD PTR [rsp]
   42954:	mov    edx,0x2
   42959:	call   428c0 <g_str_equal@plt+0x35600>
   4295e:	jmp    42941 <g_str_equal@plt+0x35681>
   42960:	mov    esi,0x1
   42965:	call   c520 <siglongjmp@plt>
   4296a:	nop    WORD PTR [rax+rax*1+0x0]
   42970:	mov    rax,QWORD PTR fs:0xfffffffffffffec0
   42979:	test   rax,rax
   4297c:	je     42980 <g_str_equal@plt+0x356c0>
   4297e:	repz ret 
   42980:	mov    rax,QWORD PTR fs:0x0
   42989:	add    rax,0xfffffffffffffec8
   4298f:	mov    QWORD PTR fs:0xfffffffffffffec0,rax
   42998:	ret    
   42999:	nop    DWORD PTR [rax+0x0]
   429a0:	mov    rdx,QWORD PTR fs:0xfffffffffffffec0
   429a9:	xor    eax,eax
   429ab:	test   rdx,rdx
   429ae:	je     429b8 <g_str_equal@plt+0x356f8>
   429b0:	cmp    QWORD PTR [rdx+0x10],0x0
   429b5:	setne  al
   429b8:	repz ret 
   429ba:	nop    WORD PTR [rax+rax*1+0x0]
   429c0:	lea    rcx,[rdi+rsi*1-0x1]
   429c5:	mov    eax,0x1000
   429ca:	test   rcx,rcx
   429cd:	je     429db <g_str_equal@plt+0x3571b>
   429cf:	bsr    rcx,rcx
   429d3:	xor    rcx,0x3f
   429d7:	test   ecx,ecx
   429d9:	jne    429e0 <g_str_equal@plt+0x35720>
   429db:	repz ret 
   429dd:	nop    DWORD PTR [rax]
   429e0:	sub    ecx,0x1
   429e3:	movabs rax,0x8000000000000000
   429ed:	mov    edx,0x1000
   429f2:	shr    rax,cl
   429f5:	cmp    rax,0x1000
   429fb:	cmovb  rax,rdx
   429ff:	ret    
   42a00:	push   r15
   42a02:	push   r14
   42a04:	push   r13
   42a06:	push   r12
   42a08:	push   rbp
   42a09:	push   rbx
   42a0a:	mov    rbx,rdi
   42a0d:	sub    rsp,0x28
   42a11:	mov    r13,QWORD PTR [rdi+0x8]
   42a15:	mov    rdi,QWORD PTR [rdi+0x10]
   42a19:	mov    rax,QWORD PTR fs:0x28
   42a22:	mov    QWORD PTR [rsp+0x18],rax
   42a27:	xor    eax,eax
   42a29:	call   429c0 <g_str_equal@plt+0x35700>
   42a2e:	mov    rdi,QWORD PTR [rbx+0x20]
   42a32:	mov    QWORD PTR [rbx+0x8],rax
   42a36:	mov    rsi,rax
   42a39:	call   ccf0 <g_realloc@plt>
   42a3e:	mov    r12,QWORD PTR [rbx]
   42a41:	mov    ecx,DWORD PTR [rip+0x242091]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   42a47:	mov    QWORD PTR [rbx+0x20],rax
   42a4b:	lea    rax,[rip+0x20d17]        # 63769 <_fini@@Base+0x11015>
   42a52:	mov    rbp,QWORD PTR [rbx+0x8]
   42a56:	test   r12,r12
   42a59:	cmove  r12,rax
   42a5d:	test   ecx,ecx
   42a5f:	jne    42aa0 <g_str_equal@plt+0x357e0>
   42a61:	mov    rdx,QWORD PTR [rbx+0x18]
   42a65:	mov    rax,rbp
   42a68:	shl    rax,0x7
   42a6c:	cmp    rax,rdx
   42a6f:	cmovb  rax,rdx
   42a73:	mov    QWORD PTR [rbx+0x18],rax
   42a77:	mov    rax,QWORD PTR [rsp+0x18]
   42a7c:	xor    rax,QWORD PTR fs:0x28
   42a85:	jne    42af7 <g_str_equal@plt+0x35837>
   42a87:	add    rsp,0x28
   42a8b:	pop    rbx
   42a8c:	pop    rbp
   42a8d:	pop    r12
   42a8f:	pop    r13
   42a91:	pop    r14
   42a93:	pop    r15
   42a95:	ret    
   42a96:	nop    WORD PTR cs:[rax+rax*1+0x0]
   42aa0:	cmp    WORD PTR [rip+0x2445d2],0x0        # 28707a <stdout@@GLIBC_2.2.5+0x2732>
   42aa8:	je     42a61 <g_str_equal@plt+0x357a1>
   42aaa:	test   BYTE PTR [rip+0x2433f0],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   42ab1:	je     42a61 <g_str_equal@plt+0x357a1>
   42ab3:	mov    rdi,rsp
   42ab6:	xor    esi,esi
   42ab8:	call   c3e0 <gettimeofday@plt>
   42abd:	mov    r15,QWORD PTR [rsp+0x8]
   42ac2:	mov    r14,QWORD PTR [rsp]
   42ac6:	call   c5b0 <getpid@plt>
   42acb:	sub    rsp,0x8
   42acf:	lea    rdi,[rip+0x20cb2]        # 63788 <_fini@@Base+0x11034>
   42ad6:	mov    esi,eax
   42ad8:	push   rbp
   42ad9:	mov    rdx,r14
   42adc:	mov    r9,r13
   42adf:	mov    r8,r12
   42ae2:	mov    rcx,r15
   42ae5:	xor    eax,eax
   42ae7:	call   431a0 <g_str_equal@plt+0x35ee0>
   42aec:	pop    rax
   42aed:	mov    rbp,QWORD PTR [rbx+0x8]
   42af1:	pop    rdx
   42af2:	jmp    42a61 <g_str_equal@plt+0x357a1>
   42af7:	call   cd30 <__stack_chk_fail@plt>
   42afc:	nop    DWORD PTR [rax+0x0]
   42b00:	push   rbx
   42b01:	mov    rbx,rdi
   42b04:	mov    rdi,rsi
   42b07:	sub    rsp,0xd0
   42b0e:	test   al,al
   42b10:	mov    QWORD PTR [rsp+0x30],rdx
   42b15:	mov    QWORD PTR [rsp+0x38],rcx
   42b1a:	mov    QWORD PTR [rsp+0x40],r8
   42b1f:	mov    QWORD PTR [rsp+0x48],r9
   42b24:	je     42b5d <g_str_equal@plt+0x3589d>
   42b26:	movaps XMMWORD PTR [rsp+0x50],xmm0
   42b2b:	movaps XMMWORD PTR [rsp+0x60],xmm1
   42b30:	movaps XMMWORD PTR [rsp+0x70],xmm2
   42b35:	movaps XMMWORD PTR [rsp+0x80],xmm3
   42b3d:	movaps XMMWORD PTR [rsp+0x90],xmm4
   42b45:	movaps XMMWORD PTR [rsp+0xa0],xmm5
   42b4d:	movaps XMMWORD PTR [rsp+0xb0],xmm6
   42b55:	movaps XMMWORD PTR [rsp+0xc0],xmm7
   42b5d:	mov    rax,QWORD PTR fs:0x28
   42b66:	mov    QWORD PTR [rsp+0x18],rax
   42b6b:	xor    eax,eax
   42b6d:	lea    rax,[rsp+0xe0]
   42b75:	mov    rsi,rsp
   42b78:	mov    QWORD PTR [rsp+0x8],rax
   42b7d:	lea    rax,[rsp+0x20]
   42b82:	mov    DWORD PTR [rsp],0x10
   42b89:	mov    DWORD PTR [rsp+0x4],0x30
   42b91:	mov    QWORD PTR [rsp+0x10],rax
   42b96:	call   c960 <g_strdup_vprintf@plt>
   42b9b:	mov    QWORD PTR [rbx],rax
   42b9e:	mov    rax,QWORD PTR [rsp+0x18]
   42ba3:	xor    rax,QWORD PTR fs:0x28
   42bac:	jne    42bb7 <g_str_equal@plt+0x358f7>
   42bae:	add    rsp,0xd0
   42bb5:	pop    rbx
   42bb6:	ret    
   42bb7:	call   cd30 <__stack_chk_fail@plt>
   42bbc:	nop    DWORD PTR [rax+0x0]
   42bc0:	push   rbx
   42bc1:	mov    r9,QWORD PTR [rdi+0x10]
   42bc5:	mov    rbx,rdi
   42bc8:	xor    esi,esi
   42bca:	mov    rdi,r9
   42bcd:	call   429c0 <g_str_equal@plt+0x35700>
   42bd2:	mov    rdx,QWORD PTR [rbx+0x18]
   42bd6:	mov    rsi,rdx
   42bd9:	shl    rsi,0x7
   42bdd:	sub    rsi,rdx
   42be0:	shr    rsi,0x7
   42be4:	add    rsi,rax
   42be7:	mov    QWORD PTR [rbx+0x18],rsi
   42beb:	shr    rsi,0x7
   42bef:	call   429c0 <g_str_equal@plt+0x35700>
   42bf4:	mov    rdx,QWORD PTR [rbx+0x8]
   42bf8:	shr    rdx,0x3
   42bfc:	cmp    rdx,rax
   42bff:	jbe    42c09 <g_str_equal@plt+0x35949>
   42c01:	cmp    rax,0xffff
   42c07:	ja     42c18 <g_str_equal@plt+0x35958>
   42c09:	mov    rdi,rbx
   42c0c:	xor    esi,esi
   42c0e:	pop    rbx
   42c0f:	jmp    42a00 <g_str_equal@plt+0x35740>
   42c14:	nop    DWORD PTR [rax+0x0]
   42c18:	mov    rdi,rbx
   42c1b:	call   42a00 <g_str_equal@plt+0x35740>
   42c20:	mov    rdi,rbx
   42c23:	xor    esi,esi
   42c25:	pop    rbx
   42c26:	jmp    42a00 <g_str_equal@plt+0x35740>
   42c2b:	nop    DWORD PTR [rax+rax*1+0x0]
   42c30:	mov    rax,QWORD PTR [rdi+0x8]
   42c34:	sub    rax,QWORD PTR [rdi+0x10]
   42c38:	cmp    rax,rsi
   42c3b:	jb     42c40 <g_str_equal@plt+0x35980>
   42c3d:	repz ret 
   42c3f:	nop
   42c40:	jmp    42a00 <g_str_equal@plt+0x35740>
   42c45:	nop
   42c46:	nop    WORD PTR cs:[rax+rax*1+0x0]
   42c50:	xor    eax,eax
   42c52:	cmp    QWORD PTR [rdi+0x10],0x0
   42c57:	sete   al
   42c5a:	ret    
   42c5b:	nop    DWORD PTR [rax+rax*1+0x0]
   42c60:	mov    rax,QWORD PTR [rdi+0x10]
   42c64:	add    rax,QWORD PTR [rdi+0x20]
   42c68:	ret    
   42c69:	nop    DWORD PTR [rax+0x0]
   42c70:	mov    QWORD PTR [rdi+0x10],0x0
   42c78:	jmp    42bc0 <g_str_equal@plt+0x35900>
   42c7d:	nop    DWORD PTR [rax]
   42c80:	push   r14
   42c82:	push   r13
   42c84:	push   r12
   42c86:	push   rbp
   42c87:	push   rbx
   42c88:	mov    rbx,rdi
   42c8b:	sub    rsp,0x20
   42c8f:	mov    rbp,QWORD PTR [rdi]
   42c92:	mov    rax,QWORD PTR fs:0x28
   42c9b:	mov    QWORD PTR [rsp+0x18],rax
   42ca0:	xor    eax,eax
   42ca2:	lea    rax,[rip+0x20ac0]        # 63769 <_fini@@Base+0x11015>
   42ca9:	test   rbp,rbp
   42cac:	cmove  rbp,rax
   42cb0:	mov    eax,DWORD PTR [rip+0x241e22]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   42cb6:	test   eax,eax
   42cb8:	jne    42d10 <g_str_equal@plt+0x35a50>
   42cba:	mov    rdi,QWORD PTR [rbx+0x20]
   42cbe:	call   d2b0 <g_free@plt>
   42cc3:	mov    rdi,QWORD PTR [rbx]
   42cc6:	call   d2b0 <g_free@plt>
   42ccb:	mov    rax,QWORD PTR [rsp+0x18]
   42cd0:	xor    rax,QWORD PTR fs:0x28
   42cd9:	mov    QWORD PTR [rbx+0x10],0x0
   42ce1:	mov    QWORD PTR [rbx+0x8],0x0
   42ce9:	mov    QWORD PTR [rbx+0x20],0x0
   42cf1:	mov    QWORD PTR [rbx],0x0
   42cf8:	jne    42d60 <g_str_equal@plt+0x35aa0>
   42cfa:	add    rsp,0x20
   42cfe:	pop    rbx
   42cff:	pop    rbp
   42d00:	pop    r12
   42d02:	pop    r13
   42d04:	pop    r14
   42d06:	ret    
   42d07:	nop    WORD PTR [rax+rax*1+0x0]
   42d10:	cmp    WORD PTR [rip+0x24435c],0x0        # 287074 <stdout@@GLIBC_2.2.5+0x272c>
   42d18:	je     42cba <g_str_equal@plt+0x359fa>
   42d1a:	test   BYTE PTR [rip+0x243180],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   42d21:	je     42cba <g_str_equal@plt+0x359fa>
   42d23:	mov    r14,QWORD PTR [rdi+0x8]
   42d27:	xor    esi,esi
   42d29:	mov    rdi,rsp
   42d2c:	call   c3e0 <gettimeofday@plt>
   42d31:	mov    r13,QWORD PTR [rsp+0x8]
   42d36:	mov    r12,QWORD PTR [rsp]
   42d3a:	call   c5b0 <getpid@plt>
   42d3f:	lea    rdi,[rip+0x20a7a]        # 637c0 <_fini@@Base+0x1106c>
   42d46:	mov    esi,eax
   42d48:	mov    r9,r14
   42d4b:	mov    r8,rbp
   42d4e:	mov    rcx,r13
   42d51:	mov    rdx,r12
   42d54:	xor    eax,eax
   42d56:	call   431a0 <g_str_equal@plt+0x35ee0>
   42d5b:	jmp    42cba <g_str_equal@plt+0x359fa>
   42d60:	call   cd30 <__stack_chk_fail@plt>
   42d65:	nop
   42d66:	nop    WORD PTR cs:[rax+rax*1+0x0]
   42d70:	push   rbp
   42d71:	push   rbx
   42d72:	mov    rbx,rdi
   42d75:	mov    rbp,rdx
   42d78:	sub    rsp,0x8
   42d7c:	mov    rdi,QWORD PTR [rdi+0x10]
   42d80:	add    rdi,QWORD PTR [rbx+0x20]
   42d84:	call   d220 <memcpy@plt>
   42d89:	add    QWORD PTR [rbx+0x10],rbp
   42d8d:	add    rsp,0x8
   42d91:	pop    rbx
   42d92:	pop    rbp
   42d93:	ret    
   42d94:	xchg   ax,ax
   42d96:	nop    WORD PTR cs:[rax+rax*1+0x0]
   42da0:	push   rbp
   42da1:	push   rbx
   42da2:	mov    rbx,rdi
   42da5:	mov    rbp,rsi
   42da8:	sub    rsp,0x8
   42dac:	mov    rdi,QWORD PTR [rdi+0x20]
   42db0:	mov    rdx,QWORD PTR [rbx+0x10]
   42db4:	sub    rdx,rsi
   42db7:	lea    rsi,[rdi+rsi*1]
   42dbb:	call   cbf0 <memmove@plt>
   42dc0:	sub    QWORD PTR [rbx+0x10],rbp
   42dc4:	add    rsp,0x8
   42dc8:	mov    rdi,rbx
   42dcb:	pop    rbx
   42dcc:	pop    rbp
   42dcd:	jmp    42bc0 <g_str_equal@plt+0x35900>
   42dd2:	nop    DWORD PTR [rax+0x0]
   42dd6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   42de0:	push   r15
   42de2:	push   r14
   42de4:	push   r13
   42de6:	push   r12
   42de8:	push   rbp
   42de9:	push   rbx
   42dea:	mov    rbp,rdi
   42ded:	mov    rbx,rsi
   42df0:	sub    rsp,0x38
   42df4:	mov    r13,QWORD PTR [rsi]
   42df7:	mov    r12,QWORD PTR [rdi]
   42dfa:	mov    rax,QWORD PTR fs:0x28
   42e03:	mov    QWORD PTR [rsp+0x28],rax
   42e08:	xor    eax,eax
   42e0a:	mov    ecx,DWORD PTR [rip+0x241cc8]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   42e10:	lea    rax,[rip+0x20952]        # 63769 <_fini@@Base+0x11015>
   42e17:	test   r13,r13
   42e1a:	cmove  r13,rax
   42e1e:	test   r12,r12
   42e21:	cmove  r12,rax
   42e25:	test   ecx,ecx
   42e27:	jne    42e90 <g_str_equal@plt+0x35bd0>
   42e29:	cmp    QWORD PTR [rbp+0x10],0x0
   42e2e:	jne    42ef7 <g_str_equal@plt+0x35c37>
   42e34:	mov    rdi,QWORD PTR [rbp+0x20]
   42e38:	call   d2b0 <g_free@plt>
   42e3d:	mov    rax,QWORD PTR [rbx+0x10]
   42e41:	mov    QWORD PTR [rbp+0x10],rax
   42e45:	mov    rax,QWORD PTR [rbx+0x8]
   42e49:	mov    QWORD PTR [rbp+0x8],rax
   42e4d:	mov    rax,QWORD PTR [rbx+0x20]
   42e51:	mov    QWORD PTR [rbp+0x20],rax
   42e55:	mov    QWORD PTR [rbx+0x10],0x0
   42e5d:	mov    rax,QWORD PTR [rsp+0x28]
   42e62:	xor    rax,QWORD PTR fs:0x28
   42e6b:	mov    QWORD PTR [rbx+0x8],0x0
   42e73:	mov    QWORD PTR [rbx+0x20],0x0
   42e7b:	jne    42ef2 <g_str_equal@plt+0x35c32>
   42e7d:	add    rsp,0x38
   42e81:	pop    rbx
   42e82:	pop    rbp
   42e83:	pop    r12
   42e85:	pop    r13
   42e87:	pop    r14
   42e89:	pop    r15
   42e8b:	ret    
   42e8c:	nop    DWORD PTR [rax+0x0]
   42e90:	cmp    WORD PTR [rip+0x2441e0],0x0        # 287078 <stdout@@GLIBC_2.2.5+0x2730>
   42e98:	je     42e29 <g_str_equal@plt+0x35b69>
   42e9a:	test   BYTE PTR [rip+0x243000],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   42ea1:	je     42e29 <g_str_equal@plt+0x35b69>
   42ea3:	mov    r9,QWORD PTR [rsi+0x10]
   42ea7:	lea    rdi,[rsp+0x10]
   42eac:	xor    esi,esi
   42eae:	mov    QWORD PTR [rsp+0x8],r9
   42eb3:	call   c3e0 <gettimeofday@plt>
   42eb8:	mov    r15,QWORD PTR [rsp+0x18]
   42ebd:	mov    r14,QWORD PTR [rsp+0x10]
   42ec2:	call   c5b0 <getpid@plt>
   42ec7:	sub    rsp,0x8
   42ecb:	lea    rdi,[rip+0x2091e]        # 637f0 <_fini@@Base+0x1109c>
   42ed2:	mov    esi,eax
   42ed4:	push   r13
   42ed6:	mov    r9,QWORD PTR [rsp+0x18]
   42edb:	mov    rdx,r14
   42ede:	mov    r8,r12
   42ee1:	mov    rcx,r15
   42ee4:	xor    eax,eax
   42ee6:	call   431a0 <g_str_equal@plt+0x35ee0>
   42eeb:	pop    rax
   42eec:	pop    rdx
   42eed:	jmp    42e29 <g_str_equal@plt+0x35b69>
   42ef2:	call   cd30 <__stack_chk_fail@plt>
   42ef7:	lea    rcx,[rip+0x20992]        # 63890 <_fini@@Base+0x1113c>
   42efe:	lea    rsi,[rip+0x20923]        # 63828 <_fini@@Base+0x110d4>
   42f05:	lea    rdi,[rip+0x20865]        # 63771 <_fini@@Base+0x1101d>
   42f0c:	mov    edx,0x90
   42f11:	call   c390 <__assert_fail@plt>
   42f16:	nop    WORD PTR cs:[rax+rax*1+0x0]
   42f20:	push   r15
   42f22:	push   r14
   42f24:	push   r13
   42f26:	push   r12
   42f28:	push   rbp
   42f29:	push   rbx
   42f2a:	mov    rbp,rdi
   42f2d:	mov    rbx,rsi
   42f30:	sub    rsp,0x38
   42f34:	mov    rdi,QWORD PTR [rdi+0x10]
   42f38:	mov    rax,QWORD PTR fs:0x28
   42f41:	mov    QWORD PTR [rsp+0x28],rax
   42f46:	xor    eax,eax
   42f48:	test   rdi,rdi
   42f4b:	je     43000 <g_str_equal@plt+0x35d40>
   42f51:	mov    r14,QWORD PTR [rsi]
   42f54:	mov    r13,QWORD PTR [rbp+0x0]
   42f58:	lea    rax,[rip+0x2080a]        # 63769 <_fini@@Base+0x11015>
   42f5f:	mov    ecx,DWORD PTR [rip+0x241b73]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   42f65:	mov    r12,QWORD PTR [rsi+0x10]
   42f69:	test   r14,r14
   42f6c:	cmove  r14,rax
   42f70:	test   r13,r13
   42f73:	cmove  r13,rax
   42f77:	test   ecx,ecx
   42f79:	jne    43010 <g_str_equal@plt+0x35d50>
   42f7f:	mov    rax,QWORD PTR [rbp+0x8]
   42f83:	sub    rax,rdi
   42f86:	cmp    rax,r12
   42f89:	jb     42fe8 <g_str_equal@plt+0x35d28>
   42f8b:	add    rdi,QWORD PTR [rbp+0x20]
   42f8f:	mov    rsi,QWORD PTR [rbx+0x20]
   42f93:	mov    rdx,r12
   42f96:	call   d220 <memcpy@plt>
   42f9b:	add    QWORD PTR [rbp+0x10],r12
   42f9f:	mov    rdi,QWORD PTR [rbx+0x20]
   42fa3:	call   d2b0 <g_free@plt>
   42fa8:	mov    QWORD PTR [rbx+0x10],0x0
   42fb0:	mov    QWORD PTR [rbx+0x8],0x0
   42fb8:	mov    QWORD PTR [rbx+0x20],0x0
   42fc0:	mov    rax,QWORD PTR [rsp+0x28]
   42fc5:	xor    rax,QWORD PTR fs:0x28
   42fce:	jne    4307e <g_str_equal@plt+0x35dbe>
   42fd4:	add    rsp,0x38
   42fd8:	pop    rbx
   42fd9:	pop    rbp
   42fda:	pop    r12
   42fdc:	pop    r13
   42fde:	pop    r14
   42fe0:	pop    r15
   42fe2:	ret    
   42fe3:	nop    DWORD PTR [rax+rax*1+0x0]
   42fe8:	mov    rsi,r12
   42feb:	mov    rdi,rbp
   42fee:	call   42a00 <g_str_equal@plt+0x35740>
   42ff3:	mov    r12,QWORD PTR [rbx+0x10]
   42ff7:	mov    rdi,QWORD PTR [rbp+0x10]
   42ffb:	jmp    42f8b <g_str_equal@plt+0x35ccb>
   42ffd:	nop    DWORD PTR [rax]
   43000:	mov    rdi,rbp
   43003:	call   42de0 <g_str_equal@plt+0x35b20>
   43008:	jmp    42fc0 <g_str_equal@plt+0x35d00>
   4300a:	nop    WORD PTR [rax+rax*1+0x0]
   43010:	cmp    WORD PTR [rip+0x24405e],0x0        # 287076 <stdout@@GLIBC_2.2.5+0x272e>
   43018:	je     42f7f <g_str_equal@plt+0x35cbf>
   4301e:	test   BYTE PTR [rip+0x242e7c],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   43025:	je     42f7f <g_str_equal@plt+0x35cbf>
   4302b:	lea    rdi,[rsp+0x10]
   43030:	xor    esi,esi
   43032:	call   c3e0 <gettimeofday@plt>
   43037:	mov    rcx,QWORD PTR [rsp+0x18]
   4303c:	mov    r15,QWORD PTR [rsp+0x10]
   43041:	mov    QWORD PTR [rsp+0x8],rcx
   43046:	call   c5b0 <getpid@plt>
   4304b:	sub    rsp,0x8
   4304f:	lea    rdi,[rip+0x2080a]        # 63860 <_fini@@Base+0x1110c>
   43056:	mov    r9,r12
   43059:	push   r14
   4305b:	mov    rcx,QWORD PTR [rsp+0x18]
   43060:	mov    rdx,r15
   43063:	mov    esi,eax
   43065:	mov    r8,r13
   43068:	xor    eax,eax
   4306a:	call   431a0 <g_str_equal@plt+0x35ee0>
   4306f:	pop    rax
   43070:	mov    r12,QWORD PTR [rbx+0x10]
   43074:	mov    rdi,QWORD PTR [rbp+0x10]
   43078:	pop    rdx
   43079:	jmp    42f7f <g_str_equal@plt+0x35cbf>
   4307e:	call   cd30 <__stack_chk_fail@plt>
   43083:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4308d:	nop    DWORD PTR [rax]
   43090:	push   r13
   43092:	push   r12
   43094:	mov    r13,rcx
   43097:	push   rbp
   43098:	push   rbx
   43099:	mov    rbp,rdi
   4309c:	mov    r12,rdx
   4309f:	sub    rsp,0x8
   430a3:	cmp    rsi,0xffffffffffffffff
   430a7:	mov    QWORD PTR [rdx],0x0
   430ae:	je     430f8 <g_str_equal@plt+0x35e38>
   430b0:	cmp    BYTE PTR [rdi+rsi*1],0x0
   430b4:	mov    rbx,rsi
   430b7:	jne    43170 <g_str_equal@plt+0x35eb0>
   430bd:	mov    rdx,rsi
   430c0:	xor    esi,esi
   430c2:	call   c290 <memchr@plt>
   430c7:	test   rax,rax
   430ca:	jne    43140 <g_str_equal@plt+0x35e80>
   430cc:	lea    rsi,[rip+0x20865]        # 63938 <_fini@@Base+0x111e4>
   430d3:	mov    rdi,rbp
   430d6:	call   cbe0 <strspn@plt>
   430db:	cmp    rax,rbx
   430de:	jne    43108 <g_str_equal@plt+0x35e48>
   430e0:	add    rsp,0x8
   430e4:	mov    rsi,r12
   430e7:	mov    rdi,rbp
   430ea:	pop    rbx
   430eb:	pop    rbp
   430ec:	pop    r12
   430ee:	pop    r13
   430f0:	jmp    c5e0 <g_base64_decode@plt>
   430f5:	nop    DWORD PTR [rax]
   430f8:	call   c720 <strlen@plt>
   430fd:	mov    rbx,rax
   43100:	jmp    430cc <g_str_equal@plt+0x35e0c>
   43102:	nop    WORD PTR [rax+rax*1+0x0]
   43108:	lea    r8,[rip+0x20871]        # 63980 <_fini@@Base+0x1122c>
   4310f:	lea    rcx,[rip+0x20892]        # 639a8 <_fini@@Base+0x11254>
   43116:	lea    rsi,[rip+0x207b3]        # 638d0 <_fini@@Base+0x1117c>
   4311d:	mov    edx,0x37
   43122:	mov    rdi,r13
   43125:	xor    eax,eax
   43127:	call   3a090 <g_str_equal@plt+0x2cdd0>
   4312c:	add    rsp,0x8
   43130:	xor    eax,eax
   43132:	pop    rbx
   43133:	pop    rbp
   43134:	pop    r12
   43136:	pop    r13
   43138:	ret    
   43139:	nop    DWORD PTR [rax+0x0]
   43140:	lea    r8,[rip+0x207c1]        # 63908 <_fini@@Base+0x111b4>
   43147:	lea    rcx,[rip+0x2085a]        # 639a8 <_fini@@Base+0x11254>
   4314e:	lea    rsi,[rip+0x2077b]        # 638d0 <_fini@@Base+0x1117c>
   43155:	mov    edx,0x2c
   4315a:	mov    rdi,r13
   4315d:	xor    eax,eax
   4315f:	call   3a090 <g_str_equal@plt+0x2cdd0>
   43164:	jmp    4312c <g_str_equal@plt+0x35e6c>
   43166:	nop    WORD PTR cs:[rax+rax*1+0x0]
   43170:	lea    r8,[rip+0x20731]        # 638a8 <_fini@@Base+0x11154>
   43177:	lea    rcx,[rip+0x2082a]        # 639a8 <_fini@@Base+0x11254>
   4317e:	lea    rsi,[rip+0x2074b]        # 638d0 <_fini@@Base+0x1117c>
   43185:	mov    edx,0x26
   4318a:	mov    rdi,r13
   4318d:	xor    eax,eax
   4318f:	call   3a090 <g_str_equal@plt+0x2cdd0>
   43194:	jmp    4312c <g_str_equal@plt+0x35e6c>
   43196:	nop    WORD PTR cs:[rax+rax*1+0x0]
   431a0:	push   rbx
   431a1:	sub    rsp,0xd0
   431a8:	test   al,al
   431aa:	mov    QWORD PTR [rsp+0x28],rsi
   431af:	mov    QWORD PTR [rsp+0x30],rdx
   431b4:	mov    QWORD PTR [rsp+0x38],rcx
   431b9:	mov    QWORD PTR [rsp+0x40],r8
   431be:	mov    QWORD PTR [rsp+0x48],r9
   431c3:	je     431fc <g_str_equal@plt+0x35f3c>
   431c5:	movaps XMMWORD PTR [rsp+0x50],xmm0
   431ca:	movaps XMMWORD PTR [rsp+0x60],xmm1
   431cf:	movaps XMMWORD PTR [rsp+0x70],xmm2
   431d4:	movaps XMMWORD PTR [rsp+0x80],xmm3
   431dc:	movaps XMMWORD PTR [rsp+0x90],xmm4
   431e4:	movaps XMMWORD PTR [rsp+0xa0],xmm5
   431ec:	movaps XMMWORD PTR [rsp+0xb0],xmm6
   431f4:	movaps XMMWORD PTR [rsp+0xc0],xmm7
   431fc:	mov    rax,QWORD PTR fs:0x28
   43205:	mov    QWORD PTR [rsp+0x18],rax
   4320a:	xor    eax,eax
   4320c:	xor    ebx,ebx
   4320e:	cmp    QWORD PTR [rip+0x242c92],0x0        # 285ea8 <stdout@@GLIBC_2.2.5+0x1560>
   43216:	je     4325a <g_str_equal@plt+0x35f9a>
   43218:	lea    rax,[rsp+0xe0]
   43220:	mov    rdx,rdi
   43223:	mov    rdi,QWORD PTR [rip+0x242c7e]        # 285ea8 <stdout@@GLIBC_2.2.5+0x1560>
   4322a:	mov    rcx,rsp
   4322d:	mov    esi,0x1
   43232:	mov    DWORD PTR [rsp],0x8
   43239:	mov    QWORD PTR [rsp+0x8],rax
   4323e:	lea    rax,[rsp+0x20]
   43243:	mov    DWORD PTR [rsp+0x4],0x30
   4324b:	mov    QWORD PTR [rsp+0x10],rax
   43250:	call   c7c0 <__vfprintf_chk@plt>
   43255:	test   eax,eax
   43257:	cmovns ebx,eax
   4325a:	mov    rdx,QWORD PTR [rsp+0x18]
   4325f:	xor    rdx,QWORD PTR fs:0x28
   43268:	mov    eax,ebx
   4326a:	jne    43275 <g_str_equal@plt+0x35fb5>
   4326c:	add    rsp,0xd0
   43273:	pop    rbx
   43274:	ret    
   43275:	call   cd30 <__stack_chk_fail@plt>
   4327a:	nop    WORD PTR [rax+rax*1+0x0]
   43280:	mov    BYTE PTR [rip+0x243c39],0x1        # 286ec0 <stdout@@GLIBC_2.2.5+0x2578>
   43287:	ret    
   43288:	nop    DWORD PTR [rax+rax*1+0x0]
   43290:	mov    rax,QWORD PTR [rip+0x243c31]        # 286ec8 <stdout@@GLIBC_2.2.5+0x2580>
   43297:	test   rax,rax
   4329a:	je     432c5 <g_str_equal@plt+0x36005>
   4329c:	mov    ecx,DWORD PTR [rax+0x8]
   4329f:	test   ecx,ecx
   432a1:	je     432d7 <g_str_equal@plt+0x36017>
   432a3:	mov    rsi,QWORD PTR [rax]
   432a6:	xor    edx,edx
   432a8:	nop    DWORD PTR [rax+rax*1+0x0]
   432b0:	movsxd rax,edx
   432b3:	shl    rax,0x4
   432b7:	add    rax,rsi
   432ba:	cmp    rdi,QWORD PTR [rax]
   432bd:	jb     432d0 <g_str_equal@plt+0x36010>
   432bf:	cmp    rdi,QWORD PTR [rax+0x8]
   432c3:	ja     432d0 <g_str_equal@plt+0x36010>
   432c5:	mov    eax,0x1
   432ca:	ret    
   432cb:	nop    DWORD PTR [rax+rax*1+0x0]
   432d0:	add    edx,0x1
   432d3:	cmp    edx,ecx
   432d5:	jne    432b0 <g_str_equal@plt+0x35ff0>
   432d7:	xor    eax,eax
   432d9:	ret    
   432da:	nop    WORD PTR [rax+rax*1+0x0]
   432e0:	push   r15
   432e2:	push   r14
   432e4:	xor    edx,edx
   432e6:	push   r13
   432e8:	push   r12
   432ea:	push   rbp
   432eb:	push   rbx
   432ec:	sub    rsp,0x68
   432f0:	mov    QWORD PTR [rsp+0x18],rsi
   432f5:	lea    rsi,[rip+0x1fff2]        # 632ee <_fini@@Base+0x10b9a>
   432fc:	mov    rax,QWORD PTR fs:0x28
   43305:	mov    QWORD PTR [rsp+0x58],rax
   4330a:	xor    eax,eax
   4330c:	call   cd90 <g_strsplit@plt>
   43311:	mov    rdi,QWORD PTR [rip+0x243bb0]        # 286ec8 <stdout@@GLIBC_2.2.5+0x2580>
   43318:	mov    r12,rax
   4331b:	test   rdi,rdi
   4331e:	je     43330 <g_str_equal@plt+0x36070>
   43320:	call   c4e0 <g_array_unref@plt>
   43325:	mov    QWORD PTR [rip+0x243b98],0x0        # 286ec8 <stdout@@GLIBC_2.2.5+0x2580>
   43330:	mov    rdi,r12
   43333:	xor    ebx,ebx
   43335:	call   c670 <g_strv_length@plt>
   4333a:	xor    esi,esi
   4333c:	xor    edi,edi
   4333e:	mov    ecx,eax
   43340:	mov    edx,0x10
   43345:	call   cbd0 <g_array_sized_new@plt>
   4334a:	mov    r13,QWORD PTR [r12]
   4334e:	mov    QWORD PTR [rip+0x243b73],rax        # 286ec8 <stdout@@GLIBC_2.2.5+0x2580>
   43355:	test   r13,r13
   43358:	je     43460 <g_str_equal@plt+0x361a0>
   4335e:	lea    rax,[rsp+0x28]
   43363:	lea    r14,[rsp+0x30]
   43368:	mov    QWORD PTR [rsp],rax
   4336c:	lea    rax,[rsp+0x38]
   43371:	mov    QWORD PTR [rsp+0x8],rax
   43376:	lea    rax,[rsp+0x40]
   4337b:	mov    QWORD PTR [rsp+0x10],rax
   43380:	mov    esi,0x2d
   43385:	mov    rdi,r13
   43388:	call   cc00 <strchr@plt>
   4338d:	test   rax,rax
   43390:	mov    r15,rax
   43393:	lea    rbp,[rax+0x1]
   43397:	je     434f0 <g_str_equal@plt+0x36230>
   4339d:	mov    rsi,QWORD PTR [rsp]
   433a1:	xor    edx,edx
   433a3:	mov    rcx,r14
   433a6:	mov    rdi,r13
   433a9:	call   33290 <g_str_equal@plt+0x25fd0>
   433ae:	test   eax,eax
   433b0:	jne    43560 <g_str_equal@plt+0x362a0>
   433b6:	cmp    QWORD PTR [rsp+0x28],r15
   433bb:	jne    43560 <g_str_equal@plt+0x362a0>
   433c1:	mov    rcx,QWORD PTR [rsp+0x8]
   433c6:	xor    edx,edx
   433c8:	xor    esi,esi
   433ca:	mov    rdi,rbp
   433cd:	call   33290 <g_str_equal@plt+0x25fd0>
   433d2:	test   eax,eax
   433d4:	jne    435a0 <g_str_equal@plt+0x362e0>
   433da:	movzx  eax,BYTE PTR [r15]
   433de:	cmp    al,0x2d
   433e0:	je     43410 <g_str_equal@plt+0x36150>
   433e2:	cmp    al,0x2e
   433e4:	je     434d8 <g_str_equal@plt+0x36218>
   433ea:	cmp    al,0x2b
   433ec:	je     43490 <g_str_equal@plt+0x361d0>
   433f2:	lea    rcx,[rip+0x20a97]        # 63e90 <_fini@@Base+0x1173c>
   433f9:	lea    rsi,[rip+0x206c0]        # 63ac0 <_fini@@Base+0x1136c>
   43400:	xor    r8d,r8d
   43403:	mov    edx,0xd4
   43408:	xor    edi,edi
   4340a:	call   c6b0 <g_assertion_message_expr@plt>
   4340f:	nop
   43410:	mov    rax,QWORD PTR [rsp+0x30]
   43415:	lea    rdx,[rax+0x1]
   43419:	sub    rdx,QWORD PTR [rsp+0x38]
   4341e:	cmp    rdx,rax
   43421:	ja     434aa <g_str_equal@plt+0x361ea>
   43427:	mov    rsi,QWORD PTR [rsp+0x10]
   4342c:	mov    rdi,QWORD PTR [rip+0x243a95]        # 286ec8 <stdout@@GLIBC_2.2.5+0x2580>
   43433:	add    ebx,0x1
   43436:	mov    QWORD PTR [rsp+0x40],rdx
   4343b:	mov    edx,0x1
   43440:	mov    QWORD PTR [rsp+0x48],rax
   43445:	call   d1c0 <g_array_append_vals@plt>
   4344a:	movsxd rax,ebx
   4344d:	mov    r13,QWORD PTR [r12+rax*8]
   43451:	test   r13,r13
   43454:	jne    43380 <g_str_equal@plt+0x360c0>
   4345a:	nop    WORD PTR [rax+rax*1+0x0]
   43460:	mov    rdi,r12
   43463:	call   d030 <g_strfreev@plt>
   43468:	mov    rax,QWORD PTR [rsp+0x58]
   4346d:	xor    rax,QWORD PTR fs:0x28
   43476:	jne    435c1 <g_str_equal@plt+0x36301>
   4347c:	add    rsp,0x68
   43480:	pop    rbx
   43481:	pop    rbp
   43482:	pop    r12
   43484:	pop    r13
   43486:	pop    r14
   43488:	pop    r15
   4348a:	ret    
   4348b:	nop    DWORD PTR [rax+rax*1+0x0]
   43490:	mov    rdx,QWORD PTR [rsp+0x30]
   43495:	mov    rax,QWORD PTR [rsp+0x38]
   4349a:	add    rax,rdx
   4349d:	sub    rax,0x1
   434a1:	cmp    rdx,rax
   434a4:	jbe    43427 <g_str_equal@plt+0x36167>
   434aa:	mov    rdi,QWORD PTR [rsp+0x18]
   434af:	lea    r8,[rip+0x20501]        # 639b7 <_fini@@Base+0x11263>
   434b6:	lea    rcx,[rip+0x209d3]        # 63e90 <_fini@@Base+0x1173c>
   434bd:	lea    rsi,[rip+0x205fc]        # 63ac0 <_fini@@Base+0x1136c>
   434c4:	mov    edx,0xd7
   434c9:	xor    eax,eax
   434cb:	call   3a090 <g_str_equal@plt+0x2cdd0>
   434d0:	jmp    43460 <g_str_equal@plt+0x361a0>
   434d2:	nop    WORD PTR [rax+rax*1+0x0]
   434d8:	mov    rdx,QWORD PTR [rsp+0x30]
   434dd:	mov    rax,QWORD PTR [rsp+0x38]
   434e2:	jmp    4341e <g_str_equal@plt+0x3615e>
   434e7:	nop    WORD PTR [rax+rax*1+0x0]
   434f0:	mov    esi,0x2b
   434f5:	mov    rdi,r13
   434f8:	call   cc00 <strchr@plt>
   434fd:	test   rax,rax
   43500:	mov    r15,rax
   43503:	lea    rbp,[rax+0x1]
   43507:	jne    4339d <g_str_equal@plt+0x360dd>
   4350d:	lea    rsi,[rip+0x204b1]        # 639c5 <_fini@@Base+0x11271>
   43514:	mov    rdi,r13
   43517:	call   ca40 <strstr@plt>
   4351c:	test   rax,rax
   4351f:	mov    r15,rax
   43522:	je     43530 <g_str_equal@plt+0x36270>
   43524:	lea    rbp,[r15+0x2]
   43528:	jmp    4339d <g_str_equal@plt+0x360dd>
   4352d:	nop    DWORD PTR [rax]
   43530:	mov    rdi,QWORD PTR [rsp+0x18]
   43535:	lea    r8,[rip+0x2048c]        # 639c8 <_fini@@Base+0x11274>
   4353c:	lea    rcx,[rip+0x2094d]        # 63e90 <_fini@@Base+0x1173c>
   43543:	lea    rsi,[rip+0x20576]        # 63ac0 <_fini@@Base+0x1136c>
   4354a:	mov    edx,0xb6
   4354f:	xor    eax,eax
   43551:	call   3a090 <g_str_equal@plt+0x2cdd0>
   43556:	jmp    43460 <g_str_equal@plt+0x361a0>
   4355b:	nop    DWORD PTR [rax+rax*1+0x0]
   43560:	sub    rsp,0x8
   43564:	mov    r9d,ebp
   43567:	lea    r8,[rip+0x2052a]        # 63a98 <_fini@@Base+0x11344>
   4356e:	push   r15
   43570:	lea    rcx,[rip+0x20919]        # 63e90 <_fini@@Base+0x1173c>
   43577:	sub    r9d,r15d
   4357a:	mov    edx,0xbd
   4357f:	mov    rdi,QWORD PTR [rsp+0x28]
   43584:	lea    rsi,[rip+0x20535]        # 63ac0 <_fini@@Base+0x1136c>
   4358b:	xor    eax,eax
   4358d:	call   3a090 <g_str_equal@plt+0x2cdd0>
   43592:	pop    rax
   43593:	pop    rdx
   43594:	jmp    43460 <g_str_equal@plt+0x361a0>
   43599:	nop    DWORD PTR [rax+0x0]
   435a0:	sub    rsp,0x8
   435a4:	mov    r9d,ebp
   435a7:	lea    r8,[rip+0x2054a]        # 63af8 <_fini@@Base+0x113a4>
   435ae:	push   r15
   435b0:	sub    r9d,r15d
   435b3:	lea    rcx,[rip+0x208d6]        # 63e90 <_fini@@Base+0x1173c>
   435ba:	mov    edx,0xc2
   435bf:	jmp    4357f <g_str_equal@plt+0x362bf>
   435c1:	call   cd30 <__stack_chk_fail@plt>
   435c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   435d0:	mov    rdi,QWORD PTR [rip+0x2428d1]        # 285ea8 <stdout@@GLIBC_2.2.5+0x1560>
   435d7:	jmp    d270 <fflush@plt>
   435dc:	nop    DWORD PTR [rax+0x0]
   435e0:	mov    rdi,QWORD PTR [rip+0x2428c1]        # 285ea8 <stdout@@GLIBC_2.2.5+0x1560>
   435e7:	test   rdi,rdi
   435ea:	je     43620 <g_str_equal@plt+0x36360>
   435ec:	cmp    rdi,QWORD PTR [rip+0x24134d]        # 284940 <stderr@@GLIBC_2.2.5>
   435f3:	je     43610 <g_str_equal@plt+0x36350>
   435f5:	sub    rsp,0x8
   435f9:	call   cea0 <fclose@plt>
   435fe:	mov    QWORD PTR [rip+0x24289f],0x0        # 285ea8 <stdout@@GLIBC_2.2.5+0x1560>
   43609:	add    rsp,0x8
   4360d:	ret    
   4360e:	xchg   ax,ax
   43610:	mov    QWORD PTR [rip+0x24288d],0x0        # 285ea8 <stdout@@GLIBC_2.2.5+0x1560>
   4361b:	ret    
   4361c:	nop    DWORD PTR [rax+0x0]
   43620:	repz ret 
   43622:	nop    DWORD PTR [rax+0x0]
   43626:	nop    WORD PTR cs:[rax+rax*1+0x0]
   43630:	sub    rsp,0x8
   43634:	or     edi,0x8000
   4363a:	cmp    QWORD PTR [rip+0x242866],0x0        # 285ea8 <stdout@@GLIBC_2.2.5+0x1560>
   43642:	mov    DWORD PTR [rip+0x242858],edi        # 285ea0 <stdout@@GLIBC_2.2.5+0x1558>
   43648:	je     43690 <g_str_equal@plt+0x363d0>
   4364a:	call   43fe0 <g_str_equal@plt+0x36d20>
   4364f:	test   al,al
   43651:	jne    43670 <g_str_equal@plt+0x363b0>
   43653:	mov    eax,DWORD PTR [rip+0x242847]        # 285ea0 <stdout@@GLIBC_2.2.5+0x1558>
   43659:	test   eax,eax
   4365b:	sete   al
   4365e:	test   al,al
   43660:	jne    4367f <g_str_equal@plt+0x363bf>
   43662:	add    rsp,0x8
   43666:	ret    
   43667:	nop    WORD PTR [rax+rax*1+0x0]
   43670:	cmp    QWORD PTR [rip+0x243860],0x0        # 286ed8 <stdout@@GLIBC_2.2.5+0x2590>
   43678:	sete   al
   4367b:	test   al,al
   4367d:	je     43662 <g_str_equal@plt+0x363a2>
   4367f:	add    rsp,0x8
   43683:	jmp    435e0 <g_str_equal@plt+0x36320>
   43688:	nop    DWORD PTR [rax+rax*1+0x0]
   43690:	call   43fe0 <g_str_equal@plt+0x36d20>
   43695:	test   al,al
   43697:	je     43730 <g_str_equal@plt+0x36470>
   4369d:	cmp    QWORD PTR [rip+0x243833],0x0        # 286ed8 <stdout@@GLIBC_2.2.5+0x2590>
   436a5:	setne  al
   436a8:	test   al,al
   436aa:	je     4371a <g_str_equal@plt+0x3645a>
   436ac:	mov    rdi,QWORD PTR [rip+0x243825]        # 286ed8 <stdout@@GLIBC_2.2.5+0x2590>
   436b3:	test   rdi,rdi
   436b6:	je     43790 <g_str_equal@plt+0x364d0>
   436bc:	mov    edx,DWORD PTR [rip+0x24380e]        # 286ed0 <stdout@@GLIBC_2.2.5+0x2588>
   436c2:	lea    rax,[rip+0x24947]        # 68010 <_fini@@Base+0x158bc>
   436c9:	lea    rsi,[rip+0x1a97e]        # 5e04e <_fini@@Base+0xb8fa>
   436d0:	test   edx,edx
   436d2:	cmovne rsi,rax
   436d6:	call   d050 <fopen64@plt>
   436db:	test   rax,rax
   436de:	mov    QWORD PTR [rip+0x2427c3],rax        # 285ea8 <stdout@@GLIBC_2.2.5+0x1560>
   436e5:	je     437ac <g_str_equal@plt+0x364ec>
   436eb:	call   43fe0 <g_str_equal@plt+0x36d20>
   436f0:	test   al,al
   436f2:	mov    rdi,QWORD PTR [rip+0x2427af]        # 285ea8 <stdout@@GLIBC_2.2.5+0x1560>
   436f9:	jne    43760 <g_str_equal@plt+0x364a0>
   436fb:	cmp    BYTE PTR [rip+0x2437be],0x0        # 286ec0 <stdout@@GLIBC_2.2.5+0x2578>
   43702:	je     43740 <g_str_equal@plt+0x36480>
   43704:	lea    rsi,[rip+0x2427b5]        # 285ec0 <stdout@@GLIBC_2.2.5+0x1578>
   4370b:	mov    ecx,0x1000
   43710:	mov    edx,0x1
   43715:	call   c3f0 <setvbuf@plt>
   4371a:	cmp    QWORD PTR [rip+0x242786],0x0        # 285ea8 <stdout@@GLIBC_2.2.5+0x1560>
   43722:	jne    4364a <g_str_equal@plt+0x3638a>
   43728:	add    rsp,0x8
   4372c:	ret    
   4372d:	nop    DWORD PTR [rax]
   43730:	mov    ecx,DWORD PTR [rip+0x24276a]        # 285ea0 <stdout@@GLIBC_2.2.5+0x1558>
   43736:	test   ecx,ecx
   43738:	setne  al
   4373b:	jmp    436a8 <g_str_equal@plt+0x363e8>
   43740:	xor    ecx,ecx
   43742:	mov    edx,0x1
   43747:	xor    esi,esi
   43749:	call   c3f0 <setvbuf@plt>
   4374e:	mov    DWORD PTR [rip+0x243778],0x1        # 286ed0 <stdout@@GLIBC_2.2.5+0x2588>
   43758:	jmp    4371a <g_str_equal@plt+0x3645a>
   4375a:	nop    WORD PTR [rax+rax*1+0x0]
   43760:	call   c140 <fileno@plt>
   43765:	mov    esi,0x2
   4376a:	mov    edi,eax
   4376c:	call   c160 <dup2@plt>
   43771:	mov    rdi,QWORD PTR [rip+0x242730]        # 285ea8 <stdout@@GLIBC_2.2.5+0x1560>
   43778:	call   cea0 <fclose@plt>
   4377d:	mov    rdi,QWORD PTR [rip+0x2411bc]        # 284940 <stderr@@GLIBC_2.2.5>
   43784:	mov    QWORD PTR [rip+0x24271d],rdi        # 285ea8 <stdout@@GLIBC_2.2.5+0x1560>
   4378b:	jmp    436fb <g_str_equal@plt+0x3643b>
   43790:	call   43fe0 <g_str_equal@plt+0x36d20>
   43795:	test   al,al
   43797:	jne    437c2 <g_str_equal@plt+0x36502>
   43799:	mov    rdi,QWORD PTR [rip+0x2411a0]        # 284940 <stderr@@GLIBC_2.2.5>
   437a0:	mov    QWORD PTR [rip+0x242701],rdi        # 285ea8 <stdout@@GLIBC_2.2.5+0x1560>
   437a7:	jmp    436fb <g_str_equal@plt+0x3643b>
   437ac:	mov    rdi,QWORD PTR [rip+0x243725]        # 286ed8 <stdout@@GLIBC_2.2.5+0x2590>
   437b3:	call   d0d0 <perror@plt>
   437b8:	mov    edi,0x1
   437bd:	call   c4f0 <_exit@plt>
   437c2:	lea    rcx,[rip+0x206ff]        # 63ec8 <_fini@@Base+0x11774>
   437c9:	lea    rsi,[rip+0x202f0]        # 63ac0 <_fini@@Base+0x1136c>
   437d0:	lea    rdi,[rip+0x20205]        # 639dc <_fini@@Base+0x11288>
   437d7:	mov    edx,0x4f
   437dc:	call   c390 <__assert_fail@plt>
   437e1:	nop    DWORD PTR [rax+rax*1+0x0]
   437e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   437f0:	push   rbp
   437f1:	push   rbx
   437f2:	mov    rbx,rdi
   437f5:	mov    rbp,rsi
   437f8:	sub    rsp,0x8
   437fc:	mov    rdi,QWORD PTR [rip+0x2436d5]        # 286ed8 <stdout@@GLIBC_2.2.5+0x2590>
   43803:	call   d2b0 <g_free@plt>
   43808:	mov    esi,0x25
   4380d:	mov    rdi,rbx
   43810:	call   cc00 <strchr@plt>
   43815:	test   rax,rax
   43818:	je     43890 <g_str_equal@plt+0x365d0>
   4381a:	cmp    BYTE PTR [rax+0x1],0x64
   4381e:	jne    43833 <g_str_equal@plt+0x36573>
   43820:	lea    rdi,[rax+0x2]
   43824:	mov    esi,0x25
   43829:	call   cc00 <strchr@plt>
   4382e:	test   rax,rax
   43831:	je     43860 <g_str_equal@plt+0x365a0>
   43833:	add    rsp,0x8
   43837:	mov    r9,rbx
   4383a:	mov    rdi,rbp
   4383d:	pop    rbx
   4383e:	pop    rbp
   4383f:	lea    r8,[rip+0x201a7]        # 639ed <_fini@@Base+0x11299>
   43846:	lea    rcx,[rip+0x20663]        # 63eb0 <_fini@@Base+0x1175c>
   4384d:	lea    rsi,[rip+0x2026c]        # 63ac0 <_fini@@Base+0x1136c>
   43854:	mov    edx,0x7a
   43859:	xor    eax,eax
   4385b:	jmp    3a090 <g_str_equal@plt+0x2cdd0>
   43860:	call   c5b0 <getpid@plt>
   43865:	mov    rdi,rbx
   43868:	mov    esi,eax
   4386a:	xor    eax,eax
   4386c:	call   c740 <g_strdup_printf@plt>
   43871:	mov    QWORD PTR [rip+0x243660],rax        # 286ed8 <stdout@@GLIBC_2.2.5+0x2590>
   43878:	call   435e0 <g_str_equal@plt+0x36320>
   4387d:	mov    edi,DWORD PTR [rip+0x24261d]        # 285ea0 <stdout@@GLIBC_2.2.5+0x1558>
   43883:	add    rsp,0x8
   43887:	pop    rbx
   43888:	pop    rbp
   43889:	jmp    43630 <g_str_equal@plt+0x36370>
   4388e:	xchg   ax,ax
   43890:	mov    rdi,rbx
   43893:	call   c370 <g_strdup@plt>
   43898:	mov    QWORD PTR [rip+0x243639],rax        # 286ed8 <stdout@@GLIBC_2.2.5+0x2590>
   4389f:	jmp    43878 <g_str_equal@plt+0x365b8>
   438a1:	nop    DWORD PTR [rax+rax*1+0x0]
   438a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   438b0:	push   r14
   438b2:	lea    rsi,[rip+0x1fa35]        # 632ee <_fini@@Base+0x10b9a>
   438b9:	push   r13
   438bb:	push   r12
   438bd:	push   rbp
   438be:	xor    edx,edx
   438c0:	push   rbx
   438c1:	call   cd90 <g_strsplit@plt>
   438c6:	test   rax,rax
   438c9:	mov    r12,rax
   438cc:	je     439c5 <g_str_equal@plt+0x36705>
   438d2:	mov    rdi,QWORD PTR [rax]
   438d5:	test   rdi,rdi
   438d8:	je     439c5 <g_str_equal@plt+0x36705>
   438de:	lea    r13,[rip+0x2011f]        # 63a04 <_fini@@Base+0x112b0>
   438e5:	mov    rbp,rax
   438e8:	xor    ebx,ebx
   438ea:	lea    rsi,[rip+0x20180]        # 63a71 <_fini@@Base+0x1131d>
   438f1:	call   d2c0 <g_str_equal@plt>
   438f6:	test   eax,eax
   438f8:	je     43948 <g_str_equal@plt+0x36688>
   438fa:	mov    edx,0x2
   438ff:	lea    rax,[rip+0x23d27a]        # 280b80 <_fini@@Base+0x22e42c>
   43906:	mov    ecx,0x1
   4390b:	jmp    43915 <g_str_equal@plt+0x36655>
   4390d:	nop    DWORD PTR [rax]
   43910:	mov    ecx,edx
   43912:	mov    edx,DWORD PTR [rax+0x18]
   43915:	or     ebx,ecx
   43917:	add    rax,0x18
   4391b:	test   edx,edx
   4391d:	jne    43910 <g_str_equal@plt+0x36650>
   4391f:	add    rbp,0x8
   43923:	je     4392e <g_str_equal@plt+0x3666e>
   43925:	mov    rdi,QWORD PTR [rbp+0x0]
   43929:	test   rdi,rdi
   4392c:	jne    438ea <g_str_equal@plt+0x3662a>
   4392e:	mov    rdi,r12
   43931:	call   d030 <g_strfreev@plt>
   43936:	mov    eax,ebx
   43938:	pop    rbx
   43939:	pop    rbp
   4393a:	pop    r12
   4393c:	pop    r13
   4393e:	pop    r14
   43940:	ret    
   43941:	nop    DWORD PTR [rax+0x0]
   43948:	mov    rdi,QWORD PTR [rbp+0x0]
   4394c:	lea    rsi,[rip+0x200b9]        # 63a0c <_fini@@Base+0x112b8>
   43953:	call   cc70 <g_str_has_prefix@plt>
   43958:	test   eax,eax
   4395a:	mov    rdi,QWORD PTR [rbp+0x0]
   4395e:	je     43978 <g_str_equal@plt+0x366b8>
   43960:	cmp    BYTE PTR [rdi+0x6],0x0
   43964:	je     43978 <g_str_equal@plt+0x366b8>
   43966:	add    rdi,0x6
   4396a:	or     bh,0x80
   4396d:	call   31910 <g_str_equal@plt+0x24650>
   43972:	jmp    4391f <g_str_equal@plt+0x3665f>
   43974:	nop    DWORD PTR [rax+0x0]
   43978:	mov    rsi,r13
   4397b:	lea    r14,[rip+0x23d1fe]        # 280b80 <_fini@@Base+0x22e42c>
   43982:	jmp    4399b <g_str_equal@plt+0x366db>
   43984:	nop    DWORD PTR [rax+0x0]
   43988:	add    r14,0x18
   4398c:	mov    eax,DWORD PTR [r14]
   4398f:	test   eax,eax
   43991:	je     439b0 <g_str_equal@plt+0x366f0>
   43993:	mov    rsi,QWORD PTR [r14+0x8]
   43997:	mov    rdi,QWORD PTR [rbp+0x0]
   4399b:	call   d2c0 <g_str_equal@plt>
   439a0:	test   eax,eax
   439a2:	je     43988 <g_str_equal@plt+0x366c8>
   439a4:	or     ebx,DWORD PTR [r14]
   439a7:	jmp    4391f <g_str_equal@plt+0x3665f>
   439ac:	nop    DWORD PTR [rax+0x0]
   439b0:	mov    rdi,r12
   439b3:	xor    ebx,ebx
   439b5:	call   d030 <g_strfreev@plt>
   439ba:	mov    eax,ebx
   439bc:	pop    rbx
   439bd:	pop    rbp
   439be:	pop    r12
   439c0:	pop    r13
   439c2:	pop    r14
   439c4:	ret    
   439c5:	xor    ebx,ebx
   439c7:	jmp    4392e <g_str_equal@plt+0x3666e>
   439cc:	nop    DWORD PTR [rax+0x0]
   439d0:	push   r12
   439d2:	mov    rcx,rdi
   439d5:	push   rbp
   439d6:	mov    rbp,rdi
   439d9:	push   rbx
   439da:	lea    rdi,[rip+0x20032]        # 63a13 <_fini@@Base+0x112bf>
   439e1:	mov    edx,0x1d
   439e6:	mov    esi,0x1
   439eb:	lea    rbx,[rip+0x23d18e]        # 280b80 <_fini@@Base+0x22e42c>
   439f2:	call   d090 <fwrite@plt>
   439f7:	lea    r12,[rip+0x20033]        # 63a31 <_fini@@Base+0x112dd>
   439fe:	lea    rcx,[rip+0x1ffff]        # 63a04 <_fini@@Base+0x112b0>
   43a05:	lea    r8,[rip+0x20114]        # 63b20 <_fini@@Base+0x113cc>
   43a0c:	jmp    43a18 <g_str_equal@plt+0x36758>
   43a0e:	xchg   ax,ax
   43a10:	mov    r8,QWORD PTR [rbx+0x10]
   43a14:	mov    rcx,QWORD PTR [rbx+0x8]
   43a18:	xor    eax,eax
   43a1a:	add    rbx,0x18
   43a1e:	mov    rdx,r12
   43a21:	mov    esi,0x1
   43a26:	mov    rdi,rbp
   43a29:	call   c2b0 <__fprintf_chk@plt>
   43a2e:	mov    eax,DWORD PTR [rbx]
   43a30:	test   eax,eax
   43a32:	jne    43a10 <g_str_equal@plt+0x36750>
   43a34:	lea    rdi,[rip+0x2011d]        # 63b58 <_fini@@Base+0x11404>
   43a3b:	mov    rcx,rbp
   43a3e:	mov    edx,0x24
   43a43:	mov    esi,0x1
   43a48:	call   d090 <fwrite@plt>
   43a4d:	pop    rbx
   43a4e:	mov    rcx,rbp
   43a51:	lea    rdi,[rip+0x20128]        # 63b80 <_fini@@Base+0x1142c>
   43a58:	mov    edx,0x35
   43a5d:	pop    rbp
   43a5e:	pop    r12
   43a60:	mov    esi,0x1
   43a65:	jmp    d090 <fwrite@plt>
   43a6a:	nop    WORD PTR [rax+rax*1+0x0]
   43a70:	push   rbp
   43a71:	push   rbx
   43a72:	sub    rsp,0x8
   43a76:	mov    r9,QWORD PTR [rsi]
   43a79:	mov    r10,QWORD PTR [rsi+0x8]
   43a7d:	cmp    r10,r9
   43a80:	jae    43ab0 <g_str_equal@plt+0x367f0>
   43a82:	add    r10,0x1
   43a86:	cmp    r10,r9
   43a89:	jne    43b4f <g_str_equal@plt+0x3688f>
   43a8f:	lea    rcx,[rip+0x204ea]        # 63f80 <_fini@@Base+0x1182c>
   43a96:	lea    rsi,[rip+0x2043b]        # 63ed8 <_fini@@Base+0x11784>
   43a9d:	lea    rdi,[rip+0x20495]        # 63f39 <_fini@@Base+0x117e5>
   43aa4:	mov    edx,0x2f
   43aa9:	call   c390 <__assert_fail@plt>
   43aae:	xchg   ax,ax
   43ab0:	test   rdi,rdi
   43ab3:	mov    rbp,rdi
   43ab6:	mov    rbx,rdi
   43ab9:	lea    r11,[r9-0x1]
   43abd:	je     43b1e <g_str_equal@plt+0x3685e>
   43abf:	nop
   43ac0:	mov    rcx,QWORD PTR [rbx]
   43ac3:	mov    r8,QWORD PTR [rcx]
   43ac6:	mov    rax,QWORD PTR [rcx+0x8]
   43aca:	cmp    r8,rax
   43acd:	jbe    43ae0 <g_str_equal@plt+0x36820>
   43acf:	add    rax,0x1
   43ad3:	cmp    r8,rax
   43ad6:	jne    43b4f <g_str_equal@plt+0x3688f>
   43ad8:	call   d5c9 <g_str_equal@plt+0x309>
   43add:	nop    DWORD PTR [rax]
   43ae0:	test   r9,r9
   43ae3:	jne    43b10 <g_str_equal@plt+0x36850>
   43ae5:	test   r8,r8
   43ae8:	je     43b38 <g_str_equal@plt+0x36878>
   43aea:	lea    rdx,[r8-0x1]
   43aee:	cmp    r10,rdx
   43af1:	jb     43b1e <g_str_equal@plt+0x3685e>
   43af3:	cmp    r9,r8
   43af6:	jae    43b38 <g_str_equal@plt+0x36878>
   43af8:	mov    QWORD PTR [rcx],r9
   43afb:	mov    r10,QWORD PTR [rsi+0x8]
   43aff:	mov    r8,r9
   43b02:	cmp    rax,r10
   43b05:	jb     43b3d <g_str_equal@plt+0x3687d>
   43b07:	mov    r10,rax
   43b0a:	jmp    43b41 <g_str_equal@plt+0x36881>
   43b0c:	nop    DWORD PTR [rax+0x0]
   43b10:	cmp    rax,r11
   43b13:	jae    43ae5 <g_str_equal@plt+0x36825>
   43b15:	mov    rbx,QWORD PTR [rbx+0x8]
   43b19:	test   rbx,rbx
   43b1c:	jne    43ac0 <g_str_equal@plt+0x36800>
   43b1e:	add    rsp,0x8
   43b22:	mov    rdx,rsi
   43b25:	mov    rdi,rbp
   43b28:	mov    rsi,rbx
   43b2b:	pop    rbx
   43b2c:	pop    rbp
   43b2d:	jmp    ca60 <g_list_insert_before@plt>
   43b32:	nop    WORD PTR [rax+rax*1+0x0]
   43b38:	cmp    r10,rax
   43b3b:	jbe    43b58 <g_str_equal@plt+0x36898>
   43b3d:	mov    QWORD PTR [rcx+0x8],r10
   43b41:	cmp    r8,r10
   43b44:	jbe    43b58 <g_str_equal@plt+0x36898>
   43b46:	add    r10,0x1
   43b4a:	cmp    r8,r10
   43b4d:	je     43b58 <g_str_equal@plt+0x36898>
   43b4f:	call   d5a6 <g_str_equal@plt+0x2e6>
   43b54:	nop    DWORD PTR [rax+0x0]
   43b58:	mov    rdi,rsi
   43b5b:	call   d2b0 <g_free@plt>
   43b60:	mov    rax,QWORD PTR [rbx+0x8]
   43b64:	test   rax,rax
   43b67:	je     43c58 <g_str_equal@plt+0x36998>
   43b6d:	mov    r8,QWORD PTR [rbx]
   43b70:	mov    rdi,QWORD PTR [rax]
   43b73:	mov    rsi,QWORD PTR [r8]
   43b76:	mov    rax,QWORD PTR [r8+0x8]
   43b7a:	cmp    rsi,rax
   43b7d:	jbe    43b90 <g_str_equal@plt+0x368d0>
   43b7f:	add    rax,0x1
   43b83:	cmp    rsi,rax
   43b86:	je     43ad8 <g_str_equal@plt+0x36818>
   43b8c:	jmp    43b4f <g_str_equal@plt+0x3688f>
   43b8e:	xchg   ax,ax
   43b90:	mov    rcx,QWORD PTR [rdi]
   43b93:	mov    rdx,QWORD PTR [rdi+0x8]
   43b97:	cmp    rcx,rdx
   43b9a:	jbe    43bb0 <g_str_equal@plt+0x368f0>
   43b9c:	add    rdx,0x1
   43ba0:	cmp    rcx,rdx
   43ba3:	je     43ad8 <g_str_equal@plt+0x36818>
   43ba9:	jmp    43b4f <g_str_equal@plt+0x3688f>
   43bab:	nop    DWORD PTR [rax+rax*1+0x0]
   43bb0:	test   rcx,rcx
   43bb3:	je     43bc2 <g_str_equal@plt+0x36902>
   43bb5:	lea    r9,[rcx-0x1]
   43bb9:	cmp    rax,r9
   43bbc:	jb     43c58 <g_str_equal@plt+0x36998>
   43bc2:	test   rsi,rsi
   43bc5:	je     43c40 <g_str_equal@plt+0x36980>
   43bc7:	lea    r9,[rsi-0x1]
   43bcb:	cmp    rdx,r9
   43bce:	jb     43c58 <g_str_equal@plt+0x36998>
   43bd4:	cmp    rsi,rcx
   43bd7:	jbe    43c40 <g_str_equal@plt+0x36980>
   43bd9:	mov    QWORD PTR [r8],rcx
   43bdc:	mov    rdx,QWORD PTR [rdi+0x8]
   43be0:	cmp    rdx,rax
   43be3:	ja     43c68 <g_str_equal@plt+0x369a8>
   43be9:	cmp    rax,rcx
   43bec:	jae    43bfb <g_str_equal@plt+0x3693b>
   43bee:	add    rax,0x1
   43bf2:	cmp    rax,rcx
   43bf5:	jne    43b4f <g_str_equal@plt+0x3688f>
   43bfb:	mov    rax,QWORD PTR [rbx+0x8]
   43bff:	mov    rdi,QWORD PTR [rax]
   43c02:	call   d2b0 <g_free@plt>
   43c07:	mov    rsi,QWORD PTR [rbx+0x8]
   43c0b:	mov    rdi,rbp
   43c0e:	call   cb90 <g_list_delete_link@plt>
   43c13:	cmp    rbp,rax
   43c16:	je     43b60 <g_str_equal@plt+0x368a0>
   43c1c:	lea    rcx,[rip+0x2035d]        # 63f80 <_fini@@Base+0x1182c>
   43c23:	lea    rsi,[rip+0x202ae]        # 63ed8 <_fini@@Base+0x11784>
   43c2a:	lea    rdi,[rip+0x2031e]        # 63f4f <_fini@@Base+0x117fb>
   43c31:	mov    edx,0x45
   43c36:	call   c390 <__assert_fail@plt>
   43c3b:	nop    DWORD PTR [rax+rax*1+0x0]
   43c40:	cmp    rax,rdx
   43c43:	jae    43c02 <g_str_equal@plt+0x36942>
   43c45:	mov    QWORD PTR [r8+0x8],rdx
   43c49:	mov    rax,rdx
   43c4c:	mov    rcx,rsi
   43c4f:	jmp    43be9 <g_str_equal@plt+0x36929>
   43c51:	nop    DWORD PTR [rax+0x0]
   43c58:	add    rsp,0x8
   43c5c:	mov    rax,rbp
   43c5f:	pop    rbx
   43c60:	pop    rbp
   43c61:	ret    
   43c62:	nop    WORD PTR [rax+rax*1+0x0]
   43c68:	mov    rsi,rcx
   43c6b:	jmp    43c45 <g_str_equal@plt+0x36985>
   43c6d:	nop    DWORD PTR [rax]
   43c70:	push   rbp
   43c71:	push   rbx
   43c72:	lea    rdi,[rip+0x20319]        # 63f92 <_fini@@Base+0x1183e>
   43c79:	sub    rsp,0x28
   43c7d:	mov    rax,QWORD PTR fs:0x28
   43c86:	mov    QWORD PTR [rsp+0x18],rax
   43c8b:	xor    eax,eax
   43c8d:	call   cc40 <getenv@plt>
   43c92:	test   rax,rax
   43c95:	je     43caf <g_str_equal@plt+0x369ef>
   43c97:	lea    rcx,[rsp+0x8]
   43c9c:	xor    esi,esi
   43c9e:	mov    edx,0xa
   43ca3:	mov    rdi,rax
   43ca6:	call   33100 <g_str_equal@plt+0x25e40>
   43cab:	test   eax,eax
   43cad:	je     43cd0 <g_str_equal@plt+0x36a10>
   43caf:	xor    eax,eax
   43cb1:	mov    rbx,QWORD PTR [rsp+0x18]
   43cb6:	xor    rbx,QWORD PTR fs:0x28
   43cbf:	jne    43d89 <g_str_equal@plt+0x36ac9>
   43cc5:	add    rsp,0x28
   43cc9:	pop    rbx
   43cca:	pop    rbp
   43ccb:	ret    
   43ccc:	nop    DWORD PTR [rax+0x0]
   43cd0:	call   c5b0 <getpid@plt>
   43cd5:	cdqe   
   43cd7:	cmp    rax,QWORD PTR [rsp+0x8]
   43cdc:	jne    43caf <g_str_equal@plt+0x369ef>
   43cde:	lea    rdi,[rip+0x202b8]        # 63f9d <_fini@@Base+0x11849>
   43ce5:	call   cc40 <getenv@plt>
   43cea:	test   rax,rax
   43ced:	je     43caf <g_str_equal@plt+0x369ef>
   43cef:	lea    rcx,[rsp+0x10]
   43cf4:	xor    esi,esi
   43cf6:	mov    edx,0xa
   43cfb:	mov    rdi,rax
   43cfe:	call   33100 <g_str_equal@plt+0x25e40>
   43d03:	test   eax,eax
   43d05:	jne    43caf <g_str_equal@plt+0x369ef>
   43d07:	mov    eax,0xffffffff
   43d0c:	cmp    QWORD PTR [rsp+0x10],rax
   43d11:	ja     43d8e <g_str_equal@plt+0x36ace>
   43d13:	lea    rdi,[rip+0x20283]        # 63f9d <_fini@@Base+0x11849>
   43d1a:	call   cf40 <unsetenv@plt>
   43d1f:	lea    rdi,[rip+0x2026c]        # 63f92 <_fini@@Base+0x1183e>
   43d26:	call   cf40 <unsetenv@plt>
   43d2b:	cmp    QWORD PTR [rsp+0x10],0x0
   43d31:	je     43caf <g_str_equal@plt+0x369ef>
   43d37:	xor    ebx,ebx
   43d39:	jmp    43d54 <g_str_equal@plt+0x36a94>
   43d3b:	nop    DWORD PTR [rax+rax*1+0x0]
   43d40:	mov    rax,QWORD PTR [rsp+0x10]
   43d45:	lea    edx,[rbx+0x1]
   43d48:	mov    rbx,rdx
   43d4b:	cmp    rdx,rax
   43d4e:	jae    43cb1 <g_str_equal@plt+0x369f1>
   43d54:	lea    ebp,[rbx+0x3]
   43d57:	xor    eax,eax
   43d59:	mov    edx,0x1
   43d5e:	mov    esi,0x2
   43d63:	mov    edi,ebp
   43d65:	call   d230 <fcntl@plt>
   43d6a:	cmp    eax,0xffffffff
   43d6d:	jne    43d40 <g_str_equal@plt+0x36a80>
   43d6f:	lea    rdi,[rip+0x20282]        # 63ff8 <_fini@@Base+0x118a4>
   43d76:	mov    esi,ebp
   43d78:	xor    eax,eax
   43d7a:	call   3aab0 <g_str_equal@plt+0x2d7f0>
   43d7f:	mov    edi,0x1
   43d84:	call   c360 <exit@plt>
   43d89:	call   cd30 <__stack_chk_fail@plt>
   43d8e:	lea    rcx,[rip+0x202ab]        # 64040 <_fini@@Base+0x118ec>
   43d95:	lea    rsi,[rip+0x20224]        # 63fc0 <_fini@@Base+0x1186c>
   43d9c:	lea    rdi,[rip+0x20205]        # 63fa8 <_fini@@Base+0x11854>
   43da3:	mov    edx,0x30
   43da8:	call   c390 <__assert_fail@plt>
   43dad:	nop    DWORD PTR [rax]
   43db0:	lea    rdi,[rip+0x23ea89]        # 282840 <g_test_config_vars+0x1480>
   43db7:	jmp    31660 <g_str_equal@plt+0x243a0>
   43dbc:	nop    DWORD PTR [rax+0x0]
   43dc0:	lea    rdi,[rip+0x23f6b9]        # 283480 <g_test_config_vars+0x20c0>
   43dc7:	jmp    31660 <g_str_equal@plt+0x243a0>
   43dcc:	nop    DWORD PTR [rax+0x0]
   43dd0:	lea    rdi,[rip+0x23fe89]        # 283c60 <g_test_config_vars+0x28a0>
   43dd7:	jmp    31660 <g_str_equal@plt+0x243a0>
   43ddc:	nop    DWORD PTR [rax+0x0]
   43de0:	lea    rdi,[rip+0x2402f9]        # 2840e0 <g_test_config_vars+0x2d20>
   43de7:	jmp    31660 <g_str_equal@plt+0x243a0>
   43dec:	nop    DWORD PTR [rax+0x0]
   43df0:	lea    rdi,[rip+0x240349]        # 284140 <g_test_config_vars+0x2d80>
   43df7:	jmp    31660 <g_str_equal@plt+0x243a0>
   43dfc:	nop    DWORD PTR [rax+0x0]
   43e00:	xor    eax,eax
   43e02:	ret    
   43e03:	nop    DWORD PTR [rax]
   43e06:	nop    WORD PTR cs:[rax+rax*1+0x0]
   43e10:	sub    rsp,0x8
   43e14:	lea    r9,[rip+0x214c5]        # 652e0 <_fini@@Base+0x12b8c>
   43e1b:	lea    rcx,[rip+0x21536]        # 65358 <_fini@@Base+0x12c04>
   43e22:	mov    rdi,QWORD PTR [rsp+0x20]
   43e27:	lea    rsi,[rip+0x214ea]        # 65318 <_fini@@Base+0x12bc4>
   43e2e:	xor    eax,eax
   43e30:	mov    r8d,0x26
   43e36:	mov    edx,0x29
   43e3b:	call   3a140 <g_str_equal@plt+0x2ce80>
   43e40:	mov    eax,0xffffffff
   43e45:	add    rsp,0x8
   43e49:	ret    
   43e4a:	nop    WORD PTR [rax+rax*1+0x0]
   43e50:	repz ret 
   43e52:	nop    WORD PTR cs:[rax+rax*1+0x0]
   43e5c:	nop    DWORD PTR [rax+0x0]
   43e60:	sub    rsp,0x28
   43e64:	xor    esi,esi
   43e66:	mov    rdi,rsp
   43e69:	mov    rax,QWORD PTR fs:0x28
   43e72:	mov    QWORD PTR [rsp+0x18],rax
   43e77:	xor    eax,eax
   43e79:	call   c3e0 <gettimeofday@plt>
   43e7e:	imul   rax,QWORD PTR [rsp],0x3b9aca00
   43e86:	imul   rdx,QWORD PTR [rsp+0x8],0x3e8
   43e8f:	add    rax,rdx
   43e92:	mov    rcx,QWORD PTR [rsp+0x18]
   43e97:	xor    rcx,QWORD PTR fs:0x28
   43ea0:	jne    43ea7 <g_str_equal@plt+0x36be7>
   43ea2:	add    rsp,0x28
   43ea6:	ret    
   43ea7:	call   cd30 <__stack_chk_fail@plt>
   43eac:	nop    DWORD PTR [rax+0x0]
   43eb0:	sub    rsp,0x8
   43eb4:	call   c270 <abort@plt>
   43eb9:	nop    DWORD PTR [rax+0x0]
   43ec0:	jmp    35c00 <g_str_equal@plt+0x28940>
   43ec5:	nop    WORD PTR cs:[rax+rax*1+0x0]
   43ecf:	nop
   43ed0:	push   rbp
   43ed1:	push   rbx
   43ed2:	mov    rbp,rsi
   43ed5:	mov    rbx,rdi
   43ed8:	sub    rsp,0x8
   43edc:	mov    rax,QWORD PTR [rip+0x23d4dd]        # 2813c0 <g_test_config_vars>
   43ee3:	mov    eax,DWORD PTR [rax]
   43ee5:	test   eax,eax
   43ee7:	je     43ef2 <g_str_equal@plt+0x36c32>
   43ee9:	call   cb30 <g_test_subprocess@plt>
   43eee:	test   eax,eax
   43ef0:	je     43f10 <g_str_equal@plt+0x36c50>
   43ef2:	mov    rdi,QWORD PTR [rip+0x240a47]        # 284940 <stderr@@GLIBC_2.2.5>
   43ef9:	add    rsp,0x8
   43efd:	mov    rcx,rbp
   43f00:	mov    rdx,rbx
   43f03:	mov    esi,0x1
   43f08:	pop    rbx
   43f09:	pop    rbp
   43f0a:	jmp    c7c0 <__vfprintf_chk@plt>
   43f0f:	nop
   43f10:	lea    rdi,[rip+0x21450]        # 65367 <_fini@@Base+0x12c13>
   43f17:	call   cc40 <getenv@plt>
   43f1c:	test   rax,rax
   43f1f:	je     43ef2 <g_str_equal@plt+0x36c32>
   43f21:	mov    rsi,rbp
   43f24:	mov    rdi,rbx
   43f27:	call   c960 <g_strdup_vprintf@plt>
   43f2c:	lea    rdi,[rip+0xee5b]        # 52d8e <_fini@@Base+0x63a>
   43f33:	mov    rbx,rax
   43f36:	mov    rsi,rax
   43f39:	xor    eax,eax
   43f3b:	call   c310 <g_test_message@plt>
   43f40:	add    rsp,0x8
   43f44:	mov    rdi,rbx
   43f47:	pop    rbx
   43f48:	pop    rbp
   43f49:	jmp    d2b0 <g_free@plt>
   43f4e:	xchg   ax,ax
   43f50:	jmp    43ed0 <g_str_equal@plt+0x36c10>
   43f55:	nop    WORD PTR cs:[rax+rax*1+0x0]
   43f5f:	nop
   43f60:	mov    eax,0xffffffff
   43f65:	ret    
   43f66:	nop    WORD PTR cs:[rax+rax*1+0x0]
   43f70:	mov    eax,0xffffffff
   43f75:	ret    
   43f76:	nop    WORD PTR cs:[rax+rax*1+0x0]
   43f80:	mov    eax,0xfffffffe
   43f85:	ret    
   43f86:	nop    WORD PTR cs:[rax+rax*1+0x0]
   43f90:	repz ret 
   43f92:	nop    WORD PTR cs:[rax+rax*1+0x0]
   43f9c:	nop    DWORD PTR [rax+0x0]
   43fa0:	jmp    35bf0 <g_str_equal@plt+0x28930>
   43fa5:	nop    WORD PTR cs:[rax+rax*1+0x0]
   43faf:	nop
   43fb0:	mov    eax,0x1
   43fb5:	ret    
   43fb6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   43fc0:	repz ret 
   43fc2:	nop    DWORD PTR [rax+0x0]
   43fc6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   43fd0:	repz ret 
   43fd2:	nop    WORD PTR cs:[rax+rax*1+0x0]
   43fdc:	nop    DWORD PTR [rax+0x0]
   43fe0:	xor    eax,eax
   43fe2:	ret    
   43fe3:	nop    WORD PTR cs:[rax+rax*1+0x0]
   43fed:	nop    DWORD PTR [rax]
   43ff0:	lea    r8,[rip+0x21389]        # 65380 <_fini@@Base+0x12c2c>
   43ff7:	lea    rcx,[rip+0x213f2]        # 653f0 <_fini@@Base+0x12c9c>
   43ffe:	lea    rsi,[rip+0x213ab]        # 653b0 <_fini@@Base+0x12c5c>
   44005:	sub    rsp,0x8
   44009:	mov    rdi,rdx
   4400c:	xor    eax,eax
   4400e:	mov    edx,0xa
   44013:	call   3a090 <g_str_equal@plt+0x2cdd0>
   44018:	mov    eax,0xffffffff
   4401d:	add    rsp,0x8
   44021:	ret    
   44022:	nop    DWORD PTR [rax+0x0]
   44026:	nop    WORD PTR cs:[rax+rax*1+0x0]
   44030:	repz ret 
   44032:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4403c:	nop    DWORD PTR [rax+0x0]
   44040:	sub    rsp,0x8
   44044:	call   c270 <abort@plt>
   44049:	nop    DWORD PTR [rax+0x0]
   44050:	sub    rsp,0x8
   44054:	call   c270 <abort@plt>
   44059:	nop    DWORD PTR [rax+0x0]
   44060:	mov    eax,0x1
   44065:	ret    
   44066:	nop    WORD PTR cs:[rax+rax*1+0x0]
   44070:	xor    eax,eax
   44072:	ret    
   44073:	nop    DWORD PTR [rax]
   44076:	nop    WORD PTR cs:[rax+rax*1+0x0]
   44080:	repz ret 
   44082:	nop    DWORD PTR [rax+0x0]
   44086:	nop    WORD PTR cs:[rax+rax*1+0x0]
   44090:	repz ret 
   44092:	nop    DWORD PTR [rax+0x0]
   44096:	nop    WORD PTR cs:[rax+rax*1+0x0]
   440a0:	sub    rsp,0x8
   440a4:	call   c270 <abort@plt>
   440a9:	nop    DWORD PTR [rax+0x0]
   440b0:	sub    rsp,0x8
   440b4:	call   c270 <abort@plt>
   440b9:	nop    DWORD PTR [rax+0x0]
   440c0:	sub    rsp,0x8
   440c4:	call   c270 <abort@plt>
   440c9:	nop    DWORD PTR [rax+0x0]
   440d0:	sub    rsp,0x8
   440d4:	call   c270 <abort@plt>
   440d9:	nop    DWORD PTR [rax+0x0]
   440e0:	sub    rsp,0x8
   440e4:	call   c270 <abort@plt>
   440e9:	nop    DWORD PTR [rax+0x0]
   440f0:	sub    rsp,0x8
   440f4:	call   c270 <abort@plt>
   440f9:	nop    DWORD PTR [rax+0x0]
   44100:	repz ret 
   44102:	nop    DWORD PTR [rax+0x0]
   44106:	nop    WORD PTR cs:[rax+rax*1+0x0]
   44110:	xor    eax,eax
   44112:	ret    
   44113:	nop    DWORD PTR [rax]
   44116:	nop    WORD PTR cs:[rax+rax*1+0x0]
   44120:	repz ret 
   44122:	nop    DWORD PTR [rax+0x0]
   44126:	nop    WORD PTR cs:[rax+rax*1+0x0]
   44130:	repz ret 
   44132:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4413c:	nop    DWORD PTR [rax+0x0]
   44140:	repz ret 
   44142:	nop    DWORD PTR [rax+0x0]
   44146:	nop    WORD PTR cs:[rax+rax*1+0x0]
   44150:	repz ret 
   44152:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4415c:	nop    DWORD PTR [rax+0x0]
   44160:	sub    rsp,0x8
   44164:	test   rdi,rdi
   44167:	je     441d5 <g_str_equal@plt+0x36f15>
   44169:	cmp    BYTE PTR [rdi+0x10],0x0
   4416d:	je     441b6 <g_str_equal@plt+0x36ef6>
   4416f:	mov    rdx,QWORD PTR [rdi+0x18]
   44173:	cmp    WORD PTR [rdx],0x0
   44177:	setne  al
   4417a:	cmp    al,sil
   4417d:	je     44198 <g_str_equal@plt+0x36ed8>
   4417f:	test   sil,sil
   44182:	mov    eax,DWORD PTR [rip+0x240950]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   44188:	jne    441a0 <g_str_equal@plt+0x36ee0>
   4418a:	sub    eax,0x1
   4418d:	mov    DWORD PTR [rip+0x240945],eax        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   44193:	xor    eax,eax
   44195:	mov    WORD PTR [rdx],ax
   44198:	add    rsp,0x8
   4419c:	ret    
   4419d:	nop    DWORD PTR [rax]
   441a0:	add    eax,0x1
   441a3:	mov    ecx,0x1
   441a8:	mov    DWORD PTR [rip+0x24092a],eax        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   441ae:	mov    WORD PTR [rdx],cx
   441b1:	add    rsp,0x8
   441b5:	ret    
   441b6:	lea    rcx,[rip+0x212d3]        # 65490 <_fini@@Base+0x12d3c>
   441bd:	lea    rsi,[rip+0x2123c]        # 65400 <_fini@@Base+0x12cac>
   441c4:	lea    rdi,[rip+0x21275]        # 65440 <_fini@@Base+0x12cec>
   441cb:	mov    edx,0x16
   441d0:	call   c390 <__assert_fail@plt>
   441d5:	lea    rcx,[rip+0x21294]        # 65470 <_fini@@Base+0x12d1c>
   441dc:	lea    rsi,[rip+0x1c4ad]        # 60690 <_fini@@Base+0xdf3c>
   441e3:	lea    rdi,[rip+0x21277]        # 65461 <_fini@@Base+0x12d0d>
   441ea:	mov    edx,0x31
   441ef:	call   c390 <__assert_fail@plt>
   441f4:	xchg   ax,ax
   441f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   44200:	movzx  esi,sil
   44204:	jmp    44160 <g_str_equal@plt+0x36ea0>
   44209:	nop    DWORD PTR [rax+0x0]
   44210:	sub    rsp,0x8
   44214:	call   c270 <abort@plt>
   44219:	nop    DWORD PTR [rax+0x0]
   44220:	sub    rsp,0x8
   44224:	call   c270 <abort@plt>
   44229:	nop    DWORD PTR [rax+0x0]
   44230:	push   rbx
   44231:	sub    rsp,0x10
   44235:	test   rdi,rdi
   44238:	mov    QWORD PTR [rsp+0x8],rdi
   4423d:	je     44260 <g_str_equal@plt+0x36fa0>
   4423f:	call   29a40 <g_str_equal@plt+0x1c780>
   44244:	lea    rdx,[rsp+0x8]
   44249:	mov    rbx,rax
   4424c:	mov    rdi,rax
   4424f:	xor    ecx,ecx
   44251:	xor    esi,esi
   44253:	call   246a0 <g_str_equal@plt+0x173e0>
   44258:	mov    rdi,rbx
   4425b:	call   27d00 <g_str_equal@plt+0x1aa40>
   44260:	add    rsp,0x10
   44264:	pop    rbx
   44265:	ret    
   44266:	nop    WORD PTR cs:[rax+rax*1+0x0]
   44270:	push   rbx
   44271:	sub    rsp,0x10
   44275:	test   rdi,rdi
   44278:	mov    QWORD PTR [rsp+0x8],rdi
   4427d:	je     442a0 <g_str_equal@plt+0x36fe0>
   4427f:	call   29a40 <g_str_equal@plt+0x1c780>
   44284:	lea    rdx,[rsp+0x8]
   44289:	mov    rbx,rax
   4428c:	mov    rdi,rax
   4428f:	xor    ecx,ecx
   44291:	xor    esi,esi
   44293:	call   247b0 <g_str_equal@plt+0x174f0>
   44298:	mov    rdi,rbx
   4429b:	call   27d00 <g_str_equal@plt+0x1aa40>
   442a0:	add    rsp,0x10
   442a4:	pop    rbx
   442a5:	ret    
   442a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   442b0:	push   rbx
   442b1:	sub    rsp,0x10
   442b5:	test   rdi,rdi
   442b8:	mov    QWORD PTR [rsp+0x8],rdi
   442bd:	je     442e0 <g_str_equal@plt+0x37020>
   442bf:	call   29a40 <g_str_equal@plt+0x1c780>
   442c4:	lea    rdx,[rsp+0x8]
   442c9:	mov    rbx,rax
   442cc:	mov    rdi,rax
   442cf:	xor    ecx,ecx
   442d1:	xor    esi,esi
   442d3:	call   248c0 <g_str_equal@plt+0x17600>
   442d8:	mov    rdi,rbx
   442db:	call   27d00 <g_str_equal@plt+0x1aa40>
   442e0:	add    rsp,0x10
   442e4:	pop    rbx
   442e5:	ret    
   442e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   442f0:	push   rbx
   442f1:	sub    rsp,0x10
   442f5:	test   rdi,rdi
   442f8:	mov    QWORD PTR [rsp+0x8],rdi
   442fd:	je     44320 <g_str_equal@plt+0x37060>
   442ff:	call   29a40 <g_str_equal@plt+0x1c780>
   44304:	lea    rdx,[rsp+0x8]
   44309:	mov    rbx,rax
   4430c:	mov    rdi,rax
   4430f:	xor    ecx,ecx
   44311:	xor    esi,esi
   44313:	call   249d0 <g_str_equal@plt+0x17710>
   44318:	mov    rdi,rbx
   4431b:	call   27d00 <g_str_equal@plt+0x1aa40>
   44320:	add    rsp,0x10
   44324:	pop    rbx
   44325:	ret    
   44326:	nop    WORD PTR cs:[rax+rax*1+0x0]
   44330:	push   rbx
   44331:	sub    rsp,0x10
   44335:	test   rdi,rdi
   44338:	mov    QWORD PTR [rsp+0x8],rdi
   4433d:	je     44360 <g_str_equal@plt+0x370a0>
   4433f:	call   29a40 <g_str_equal@plt+0x1c780>
   44344:	lea    rdx,[rsp+0x8]
   44349:	mov    rbx,rax
   4434c:	mov    rdi,rax
   4434f:	xor    ecx,ecx
   44351:	xor    esi,esi
   44353:	call   24ae0 <g_str_equal@plt+0x17820>
   44358:	mov    rdi,rbx
   4435b:	call   27d00 <g_str_equal@plt+0x1aa40>
   44360:	add    rsp,0x10
   44364:	pop    rbx
   44365:	ret    
   44366:	nop    WORD PTR cs:[rax+rax*1+0x0]
   44370:	push   rbx
   44371:	sub    rsp,0x10
   44375:	test   rdi,rdi
   44378:	mov    QWORD PTR [rsp+0x8],rdi
   4437d:	je     443a0 <g_str_equal@plt+0x370e0>
   4437f:	call   29a40 <g_str_equal@plt+0x1c780>
   44384:	lea    rdx,[rsp+0x8]
   44389:	mov    rbx,rax
   4438c:	mov    rdi,rax
   4438f:	xor    ecx,ecx
   44391:	xor    esi,esi
   44393:	call   24bf0 <g_str_equal@plt+0x17930>
   44398:	mov    rdi,rbx
   4439b:	call   27d00 <g_str_equal@plt+0x1aa40>
   443a0:	add    rsp,0x10
   443a4:	pop    rbx
   443a5:	ret    
   443a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   443b0:	push   rbx
   443b1:	sub    rsp,0x10
   443b5:	test   rdi,rdi
   443b8:	mov    QWORD PTR [rsp+0x8],rdi
   443bd:	je     443e0 <g_str_equal@plt+0x37120>
   443bf:	call   29a40 <g_str_equal@plt+0x1c780>
   443c4:	lea    rdx,[rsp+0x8]
   443c9:	mov    rbx,rax
   443cc:	mov    rdi,rax
   443cf:	xor    ecx,ecx
   443d1:	xor    esi,esi
   443d3:	call   24d00 <g_str_equal@plt+0x17a40>
   443d8:	mov    rdi,rbx
   443db:	call   27d00 <g_str_equal@plt+0x1aa40>
   443e0:	add    rsp,0x10
   443e4:	pop    rbx
   443e5:	ret    
   443e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   443f0:	push   rbx
   443f1:	sub    rsp,0x10
   443f5:	test   rdi,rdi
   443f8:	mov    QWORD PTR [rsp+0x8],rdi
   443fd:	je     44420 <g_str_equal@plt+0x37160>
   443ff:	call   29a40 <g_str_equal@plt+0x1c780>
   44404:	lea    rdx,[rsp+0x8]
   44409:	mov    rbx,rax
   4440c:	mov    rdi,rax
   4440f:	xor    ecx,ecx
   44411:	xor    esi,esi
   44413:	call   24e10 <g_str_equal@plt+0x17b50>
   44418:	mov    rdi,rbx
   4441b:	call   27d00 <g_str_equal@plt+0x1aa40>
   44420:	add    rsp,0x10
   44424:	pop    rbx
   44425:	ret    
   44426:	nop    WORD PTR cs:[rax+rax*1+0x0]
   44430:	push   rbx
   44431:	sub    rsp,0x10
   44435:	test   rdi,rdi
   44438:	mov    QWORD PTR [rsp+0x8],rdi
   4443d:	je     44460 <g_str_equal@plt+0x371a0>
   4443f:	call   29a40 <g_str_equal@plt+0x1c780>
   44444:	lea    rdx,[rsp+0x8]
   44449:	mov    rbx,rax
   4444c:	mov    rdi,rax
   4444f:	xor    ecx,ecx
   44451:	xor    esi,esi
   44453:	call   24f20 <g_str_equal@plt+0x17c60>
   44458:	mov    rdi,rbx
   4445b:	call   27d00 <g_str_equal@plt+0x1aa40>
   44460:	add    rsp,0x10
   44464:	pop    rbx
   44465:	ret    
   44466:	nop    WORD PTR cs:[rax+rax*1+0x0]
   44470:	push   rbx
   44471:	sub    rsp,0x10
   44475:	test   rdi,rdi
   44478:	mov    QWORD PTR [rsp+0x8],rdi
   4447d:	je     444a0 <g_str_equal@plt+0x371e0>
   4447f:	call   29a40 <g_str_equal@plt+0x1c780>
   44484:	lea    rdx,[rsp+0x8]
   44489:	mov    rbx,rax
   4448c:	mov    rdi,rax
   4448f:	xor    ecx,ecx
   44491:	xor    esi,esi
   44493:	call   25030 <g_str_equal@plt+0x17d70>
   44498:	mov    rdi,rbx
   4449b:	call   27d00 <g_str_equal@plt+0x1aa40>
   444a0:	add    rsp,0x10
   444a4:	pop    rbx
   444a5:	ret    
   444a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   444b0:	push   rbx
   444b1:	sub    rsp,0x10
   444b5:	test   rdi,rdi
   444b8:	mov    QWORD PTR [rsp+0x8],rdi
   444bd:	je     444e0 <g_str_equal@plt+0x37220>
   444bf:	call   29a40 <g_str_equal@plt+0x1c780>
   444c4:	lea    rdx,[rsp+0x8]
   444c9:	mov    rbx,rax
   444cc:	mov    rdi,rax
   444cf:	xor    ecx,ecx
   444d1:	xor    esi,esi
   444d3:	call   25140 <g_str_equal@plt+0x17e80>
   444d8:	mov    rdi,rbx
   444db:	call   27d00 <g_str_equal@plt+0x1aa40>
   444e0:	add    rsp,0x10
   444e4:	pop    rbx
   444e5:	ret    
   444e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   444f0:	push   rbx
   444f1:	sub    rsp,0x10
   444f5:	test   rdi,rdi
   444f8:	mov    QWORD PTR [rsp+0x8],rdi
   444fd:	je     44520 <g_str_equal@plt+0x37260>
   444ff:	call   29a40 <g_str_equal@plt+0x1c780>
   44504:	lea    rdx,[rsp+0x8]
   44509:	mov    rbx,rax
   4450c:	mov    rdi,rax
   4450f:	xor    ecx,ecx
   44511:	xor    esi,esi
   44513:	call   25250 <g_str_equal@plt+0x17f90>
   44518:	mov    rdi,rbx
   4451b:	call   27d00 <g_str_equal@plt+0x1aa40>
   44520:	add    rsp,0x10
   44524:	pop    rbx
   44525:	ret    
   44526:	nop    WORD PTR cs:[rax+rax*1+0x0]
   44530:	push   rbx
   44531:	sub    rsp,0x10
   44535:	test   rdi,rdi
   44538:	mov    QWORD PTR [rsp+0x8],rdi
   4453d:	je     44560 <g_str_equal@plt+0x372a0>
   4453f:	call   29a40 <g_str_equal@plt+0x1c780>
   44544:	lea    rdx,[rsp+0x8]
   44549:	mov    rbx,rax
   4454c:	mov    rdi,rax
   4454f:	xor    ecx,ecx
   44551:	xor    esi,esi
   44553:	call   25360 <g_str_equal@plt+0x180a0>
   44558:	mov    rdi,rbx
   4455b:	call   27d00 <g_str_equal@plt+0x1aa40>
   44560:	add    rsp,0x10
   44564:	pop    rbx
   44565:	ret    
   44566:	nop    WORD PTR cs:[rax+rax*1+0x0]
   44570:	push   rbx
   44571:	sub    rsp,0x10
   44575:	test   rdi,rdi
   44578:	mov    QWORD PTR [rsp+0x8],rdi
   4457d:	je     445a0 <g_str_equal@plt+0x372e0>
   4457f:	call   29a40 <g_str_equal@plt+0x1c780>
   44584:	lea    rdx,[rsp+0x8]
   44589:	mov    rbx,rax
   4458c:	mov    rdi,rax
   4458f:	xor    ecx,ecx
   44591:	xor    esi,esi
   44593:	call   25470 <g_str_equal@plt+0x181b0>
   44598:	mov    rdi,rbx
   4459b:	call   27d00 <g_str_equal@plt+0x1aa40>
   445a0:	add    rsp,0x10
   445a4:	pop    rbx
   445a5:	ret    
   445a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   445b0:	push   rbx
   445b1:	sub    rsp,0x10
   445b5:	test   rdi,rdi
   445b8:	mov    QWORD PTR [rsp+0x8],rdi
   445bd:	je     445e0 <g_str_equal@plt+0x37320>
   445bf:	call   29a40 <g_str_equal@plt+0x1c780>
   445c4:	lea    rdx,[rsp+0x8]
   445c9:	mov    rbx,rax
   445cc:	mov    rdi,rax
   445cf:	xor    ecx,ecx
   445d1:	xor    esi,esi
   445d3:	call   25580 <g_str_equal@plt+0x182c0>
   445d8:	mov    rdi,rbx
   445db:	call   27d00 <g_str_equal@plt+0x1aa40>
   445e0:	add    rsp,0x10
   445e4:	pop    rbx
   445e5:	ret    
   445e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   445f0:	push   rbx
   445f1:	sub    rsp,0x10
   445f5:	test   rdi,rdi
   445f8:	mov    QWORD PTR [rsp+0x8],rdi
   445fd:	je     44620 <g_str_equal@plt+0x37360>
   445ff:	call   29a40 <g_str_equal@plt+0x1c780>
   44604:	lea    rdx,[rsp+0x8]
   44609:	mov    rbx,rax
   4460c:	mov    rdi,rax
   4460f:	xor    ecx,ecx
   44611:	xor    esi,esi
   44613:	call   46020 <g_str_equal@plt+0x38d60>
   44618:	mov    rdi,rbx
   4461b:	call   27d00 <g_str_equal@plt+0x1aa40>
   44620:	add    rsp,0x10
   44624:	pop    rbx
   44625:	ret    
   44626:	nop    WORD PTR cs:[rax+rax*1+0x0]
   44630:	push   rbx
   44631:	sub    rsp,0x10
   44635:	test   rdi,rdi
   44638:	mov    QWORD PTR [rsp+0x8],rdi
   4463d:	je     44660 <g_str_equal@plt+0x373a0>
   4463f:	call   29a40 <g_str_equal@plt+0x1c780>
   44644:	lea    rdx,[rsp+0x8]
   44649:	mov    rbx,rax
   4464c:	mov    rdi,rax
   4464f:	xor    ecx,ecx
   44651:	xor    esi,esi
   44653:	call   46300 <g_str_equal@plt+0x39040>
   44658:	mov    rdi,rbx
   4465b:	call   27d00 <g_str_equal@plt+0x1aa40>
   44660:	add    rsp,0x10
   44664:	pop    rbx
   44665:	ret    
   44666:	nop    WORD PTR cs:[rax+rax*1+0x0]
   44670:	push   rbx
   44671:	sub    rsp,0x10
   44675:	test   rdi,rdi
   44678:	mov    QWORD PTR [rsp+0x8],rdi
   4467d:	je     446a0 <g_str_equal@plt+0x373e0>
   4467f:	call   29a40 <g_str_equal@plt+0x1c780>
   44684:	lea    rdx,[rsp+0x8]
   44689:	mov    rbx,rax
   4468c:	mov    rdi,rax
   4468f:	xor    ecx,ecx
   44691:	xor    esi,esi
   44693:	call   46480 <g_str_equal@plt+0x391c0>
   44698:	mov    rdi,rbx
   4469b:	call   27d00 <g_str_equal@plt+0x1aa40>
   446a0:	add    rsp,0x10
   446a4:	pop    rbx
   446a5:	ret    
   446a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   446b0:	push   rbx
   446b1:	sub    rsp,0x10
   446b5:	test   rdi,rdi
   446b8:	mov    QWORD PTR [rsp+0x8],rdi
   446bd:	je     446e0 <g_str_equal@plt+0x37420>
   446bf:	call   29a40 <g_str_equal@plt+0x1c780>
   446c4:	lea    rdx,[rsp+0x8]
   446c9:	mov    rbx,rax
   446cc:	mov    rdi,rax
   446cf:	xor    ecx,ecx
   446d1:	xor    esi,esi
   446d3:	call   465c0 <g_str_equal@plt+0x39300>
   446d8:	mov    rdi,rbx
   446db:	call   27d00 <g_str_equal@plt+0x1aa40>
   446e0:	add    rsp,0x10
   446e4:	pop    rbx
   446e5:	ret    
   446e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   446f0:	push   rbx
   446f1:	sub    rsp,0x10
   446f5:	test   rdi,rdi
   446f8:	mov    QWORD PTR [rsp+0x8],rdi
   446fd:	je     44720 <g_str_equal@plt+0x37460>
   446ff:	call   29a40 <g_str_equal@plt+0x1c780>
   44704:	lea    rdx,[rsp+0x8]
   44709:	mov    rbx,rax
   4470c:	mov    rdi,rax
   4470f:	xor    ecx,ecx
   44711:	xor    esi,esi
   44713:	call   466a0 <g_str_equal@plt+0x393e0>
   44718:	mov    rdi,rbx
   4471b:	call   27d00 <g_str_equal@plt+0x1aa40>
   44720:	add    rsp,0x10
   44724:	pop    rbx
   44725:	ret    
   44726:	nop    WORD PTR cs:[rax+rax*1+0x0]
   44730:	push   rbx
   44731:	sub    rsp,0x10
   44735:	test   rdi,rdi
   44738:	mov    QWORD PTR [rsp+0x8],rdi
   4473d:	je     44760 <g_str_equal@plt+0x374a0>
   4473f:	call   29a40 <g_str_equal@plt+0x1c780>
   44744:	lea    rdx,[rsp+0x8]
   44749:	mov    rbx,rax
   4474c:	mov    rdi,rax
   4474f:	xor    ecx,ecx
   44751:	xor    esi,esi
   44753:	call   46990 <g_str_equal@plt+0x396d0>
   44758:	mov    rdi,rbx
   4475b:	call   27d00 <g_str_equal@plt+0x1aa40>
   44760:	add    rsp,0x10
   44764:	pop    rbx
   44765:	ret    
   44766:	nop    WORD PTR cs:[rax+rax*1+0x0]
   44770:	push   rbx
   44771:	sub    rsp,0x10
   44775:	test   rdi,rdi
   44778:	mov    QWORD PTR [rsp+0x8],rdi
   4477d:	je     447a0 <g_str_equal@plt+0x374e0>
   4477f:	call   29a40 <g_str_equal@plt+0x1c780>
   44784:	lea    rdx,[rsp+0x8]
   44789:	mov    rbx,rax
   4478c:	mov    rdi,rax
   4478f:	xor    ecx,ecx
   44791:	xor    esi,esi
   44793:	call   46b10 <g_str_equal@plt+0x39850>
   44798:	mov    rdi,rbx
   4479b:	call   27d00 <g_str_equal@plt+0x1aa40>
   447a0:	add    rsp,0x10
   447a4:	pop    rbx
   447a5:	ret    
   447a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   447b0:	push   rbx
   447b1:	sub    rsp,0x10
   447b5:	test   rdi,rdi
   447b8:	mov    QWORD PTR [rsp+0x8],rdi
   447bd:	je     447e0 <g_str_equal@plt+0x37520>
   447bf:	call   29a40 <g_str_equal@plt+0x1c780>
   447c4:	lea    rdx,[rsp+0x8]
   447c9:	mov    rbx,rax
   447cc:	mov    rdi,rax
   447cf:	xor    ecx,ecx
   447d1:	xor    esi,esi
   447d3:	call   46c50 <g_str_equal@plt+0x39990>
   447d8:	mov    rdi,rbx
   447db:	call   27d00 <g_str_equal@plt+0x1aa40>
   447e0:	add    rsp,0x10
   447e4:	pop    rbx
   447e5:	ret    
   447e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   447f0:	push   rbx
   447f1:	sub    rsp,0x10
   447f5:	test   rdi,rdi
   447f8:	mov    QWORD PTR [rsp+0x8],rdi
   447fd:	je     44820 <g_str_equal@plt+0x37560>
   447ff:	call   29a40 <g_str_equal@plt+0x1c780>
   44804:	lea    rdx,[rsp+0x8]
   44809:	mov    rbx,rax
   4480c:	mov    rdi,rax
   4480f:	xor    ecx,ecx
   44811:	xor    esi,esi
   44813:	call   46d90 <g_str_equal@plt+0x39ad0>
   44818:	mov    rdi,rbx
   4481b:	call   27d00 <g_str_equal@plt+0x1aa40>
   44820:	add    rsp,0x10
   44824:	pop    rbx
   44825:	ret    
   44826:	nop    WORD PTR cs:[rax+rax*1+0x0]
   44830:	push   rbx
   44831:	sub    rsp,0x10
   44835:	test   rdi,rdi
   44838:	mov    QWORD PTR [rsp+0x8],rdi
   4483d:	je     44860 <g_str_equal@plt+0x375a0>
   4483f:	call   29a40 <g_str_equal@plt+0x1c780>
   44844:	lea    rdx,[rsp+0x8]
   44849:	mov    rbx,rax
   4484c:	mov    rdi,rax
   4484f:	xor    ecx,ecx
   44851:	xor    esi,esi
   44853:	call   46e70 <g_str_equal@plt+0x39bb0>
   44858:	mov    rdi,rbx
   4485b:	call   27d00 <g_str_equal@plt+0x1aa40>
   44860:	add    rsp,0x10
   44864:	pop    rbx
   44865:	ret    
   44866:	nop    WORD PTR cs:[rax+rax*1+0x0]
   44870:	push   rbx
   44871:	sub    rsp,0x10
   44875:	test   rdi,rdi
   44878:	mov    QWORD PTR [rsp+0x8],rdi
   4487d:	je     448a0 <g_str_equal@plt+0x375e0>
   4487f:	call   29a40 <g_str_equal@plt+0x1c780>
   44884:	lea    rdx,[rsp+0x8]
   44889:	mov    rbx,rax
   4488c:	mov    rdi,rax
   4488f:	xor    ecx,ecx
   44891:	xor    esi,esi
   44893:	call   4eea0 <g_str_equal@plt+0x41be0>
   44898:	mov    rdi,rbx
   4489b:	call   27d00 <g_str_equal@plt+0x1aa40>
   448a0:	add    rsp,0x10
   448a4:	pop    rbx
   448a5:	ret    
   448a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   448b0:	push   rbx
   448b1:	sub    rsp,0x10
   448b5:	test   rdi,rdi
   448b8:	mov    QWORD PTR [rsp+0x8],rdi
   448bd:	je     448e0 <g_str_equal@plt+0x37620>
   448bf:	call   29a40 <g_str_equal@plt+0x1c780>
   448c4:	lea    rdx,[rsp+0x8]
   448c9:	mov    rbx,rax
   448cc:	mov    rdi,rax
   448cf:	xor    ecx,ecx
   448d1:	xor    esi,esi
   448d3:	call   47040 <g_str_equal@plt+0x39d80>
   448d8:	mov    rdi,rbx
   448db:	call   27d00 <g_str_equal@plt+0x1aa40>
   448e0:	add    rsp,0x10
   448e4:	pop    rbx
   448e5:	ret    
   448e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   448f0:	push   rbx
   448f1:	sub    rsp,0x10
   448f5:	test   rdi,rdi
   448f8:	mov    QWORD PTR [rsp+0x8],rdi
   448fd:	je     44920 <g_str_equal@plt+0x37660>
   448ff:	call   29a40 <g_str_equal@plt+0x1c780>
   44904:	lea    rdx,[rsp+0x8]
   44909:	mov    rbx,rax
   4490c:	mov    rdi,rax
   4490f:	xor    ecx,ecx
   44911:	xor    esi,esi
   44913:	call   471c0 <g_str_equal@plt+0x39f00>
   44918:	mov    rdi,rbx
   4491b:	call   27d00 <g_str_equal@plt+0x1aa40>
   44920:	add    rsp,0x10
   44924:	pop    rbx
   44925:	ret    
   44926:	nop    WORD PTR cs:[rax+rax*1+0x0]
   44930:	push   rbx
   44931:	sub    rsp,0x10
   44935:	test   rdi,rdi
   44938:	mov    QWORD PTR [rsp+0x8],rdi
   4493d:	je     44960 <g_str_equal@plt+0x376a0>
   4493f:	call   29a40 <g_str_equal@plt+0x1c780>
   44944:	lea    rdx,[rsp+0x8]
   44949:	mov    rbx,rax
   4494c:	mov    rdi,rax
   4494f:	xor    ecx,ecx
   44951:	xor    esi,esi
   44953:	call   47300 <g_str_equal@plt+0x3a040>
   44958:	mov    rdi,rbx
   4495b:	call   27d00 <g_str_equal@plt+0x1aa40>
   44960:	add    rsp,0x10
   44964:	pop    rbx
   44965:	ret    
   44966:	nop    WORD PTR cs:[rax+rax*1+0x0]
   44970:	push   rbx
   44971:	sub    rsp,0x10
   44975:	test   rdi,rdi
   44978:	mov    QWORD PTR [rsp+0x8],rdi
   4497d:	je     449a0 <g_str_equal@plt+0x376e0>
   4497f:	call   29a40 <g_str_equal@plt+0x1c780>
   44984:	lea    rdx,[rsp+0x8]
   44989:	mov    rbx,rax
   4498c:	mov    rdi,rax
   4498f:	xor    ecx,ecx
   44991:	xor    esi,esi
   44993:	call   47440 <g_str_equal@plt+0x3a180>
   44998:	mov    rdi,rbx
   4499b:	call   27d00 <g_str_equal@plt+0x1aa40>
   449a0:	add    rsp,0x10
   449a4:	pop    rbx
   449a5:	ret    
   449a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   449b0:	push   rbx
   449b1:	sub    rsp,0x10
   449b5:	test   rdi,rdi
   449b8:	mov    QWORD PTR [rsp+0x8],rdi
   449bd:	je     449e0 <g_str_equal@plt+0x37720>
   449bf:	call   29a40 <g_str_equal@plt+0x1c780>
   449c4:	lea    rdx,[rsp+0x8]
   449c9:	mov    rbx,rax
   449cc:	mov    rdi,rax
   449cf:	xor    ecx,ecx
   449d1:	xor    esi,esi
   449d3:	call   47580 <g_str_equal@plt+0x3a2c0>
   449d8:	mov    rdi,rbx
   449db:	call   27d00 <g_str_equal@plt+0x1aa40>
   449e0:	add    rsp,0x10
   449e4:	pop    rbx
   449e5:	ret    
   449e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   449f0:	push   rbx
   449f1:	sub    rsp,0x10
   449f5:	test   rdi,rdi
   449f8:	mov    QWORD PTR [rsp+0x8],rdi
   449fd:	je     44a20 <g_str_equal@plt+0x37760>
   449ff:	call   29a40 <g_str_equal@plt+0x1c780>
   44a04:	lea    rdx,[rsp+0x8]
   44a09:	mov    rbx,rax
   44a0c:	mov    rdi,rax
   44a0f:	xor    ecx,ecx
   44a11:	xor    esi,esi
   44a13:	call   476c0 <g_str_equal@plt+0x3a400>
   44a18:	mov    rdi,rbx
   44a1b:	call   27d00 <g_str_equal@plt+0x1aa40>
   44a20:	add    rsp,0x10
   44a24:	pop    rbx
   44a25:	ret    
   44a26:	nop    WORD PTR cs:[rax+rax*1+0x0]
   44a30:	push   rbx
   44a31:	sub    rsp,0x10
   44a35:	test   rdi,rdi
   44a38:	mov    QWORD PTR [rsp+0x8],rdi
   44a3d:	je     44a60 <g_str_equal@plt+0x377a0>
   44a3f:	call   29a40 <g_str_equal@plt+0x1c780>
   44a44:	lea    rdx,[rsp+0x8]
   44a49:	mov    rbx,rax
   44a4c:	mov    rdi,rax
   44a4f:	xor    ecx,ecx
   44a51:	xor    esi,esi
   44a53:	call   47880 <g_str_equal@plt+0x3a5c0>
   44a58:	mov    rdi,rbx
   44a5b:	call   27d00 <g_str_equal@plt+0x1aa40>
   44a60:	add    rsp,0x10
   44a64:	pop    rbx
   44a65:	ret    
   44a66:	nop    WORD PTR cs:[rax+rax*1+0x0]
   44a70:	push   rbx
   44a71:	sub    rsp,0x10
   44a75:	test   rdi,rdi
   44a78:	mov    QWORD PTR [rsp+0x8],rdi
   44a7d:	je     44aa0 <g_str_equal@plt+0x377e0>
   44a7f:	call   29a40 <g_str_equal@plt+0x1c780>
   44a84:	lea    rdx,[rsp+0x8]
   44a89:	mov    rbx,rax
   44a8c:	mov    rdi,rax
   44a8f:	xor    ecx,ecx
   44a91:	xor    esi,esi
   44a93:	call   4ef80 <g_str_equal@plt+0x41cc0>
   44a98:	mov    rdi,rbx
   44a9b:	call   27d00 <g_str_equal@plt+0x1aa40>
   44aa0:	add    rsp,0x10
   44aa4:	pop    rbx
   44aa5:	ret    
   44aa6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   44ab0:	push   rbx
   44ab1:	sub    rsp,0x10
   44ab5:	test   rdi,rdi
   44ab8:	mov    QWORD PTR [rsp+0x8],rdi
   44abd:	je     44ae0 <g_str_equal@plt+0x37820>
   44abf:	call   29a40 <g_str_equal@plt+0x1c780>
   44ac4:	lea    rdx,[rsp+0x8]
   44ac9:	mov    rbx,rax
   44acc:	mov    rdi,rax
   44acf:	xor    ecx,ecx
   44ad1:	xor    esi,esi
   44ad3:	call   4f290 <g_str_equal@plt+0x41fd0>
   44ad8:	mov    rdi,rbx
   44adb:	call   27d00 <g_str_equal@plt+0x1aa40>
   44ae0:	add    rsp,0x10
   44ae4:	pop    rbx
   44ae5:	ret    
   44ae6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   44af0:	push   rbx
   44af1:	sub    rsp,0x10
   44af5:	test   rdi,rdi
   44af8:	mov    QWORD PTR [rsp+0x8],rdi
   44afd:	je     44b20 <g_str_equal@plt+0x37860>
   44aff:	call   29a40 <g_str_equal@plt+0x1c780>
   44b04:	lea    rdx,[rsp+0x8]
   44b09:	mov    rbx,rax
   44b0c:	mov    rdi,rax
   44b0f:	xor    ecx,ecx
   44b11:	xor    esi,esi
   44b13:	call   4f370 <g_str_equal@plt+0x420b0>
   44b18:	mov    rdi,rbx
   44b1b:	call   27d00 <g_str_equal@plt+0x1aa40>
   44b20:	add    rsp,0x10
   44b24:	pop    rbx
   44b25:	ret    
   44b26:	nop    WORD PTR cs:[rax+rax*1+0x0]
   44b30:	push   rbx
   44b31:	sub    rsp,0x10
   44b35:	test   rdi,rdi
   44b38:	mov    QWORD PTR [rsp+0x8],rdi
   44b3d:	je     44b60 <g_str_equal@plt+0x378a0>
   44b3f:	call   29a40 <g_str_equal@plt+0x1c780>
   44b44:	lea    rdx,[rsp+0x8]
   44b49:	mov    rbx,rax
   44b4c:	mov    rdi,rax
   44b4f:	xor    ecx,ecx
   44b51:	xor    esi,esi
   44b53:	call   47a60 <g_str_equal@plt+0x3a7a0>
   44b58:	mov    rdi,rbx
   44b5b:	call   27d00 <g_str_equal@plt+0x1aa40>
   44b60:	add    rsp,0x10
   44b64:	pop    rbx
   44b65:	ret    
   44b66:	nop    WORD PTR cs:[rax+rax*1+0x0]
   44b70:	push   rbx
   44b71:	sub    rsp,0x10
   44b75:	test   rdi,rdi
   44b78:	mov    QWORD PTR [rsp+0x8],rdi
   44b7d:	je     44ba0 <g_str_equal@plt+0x378e0>
   44b7f:	call   29a40 <g_str_equal@plt+0x1c780>
   44b84:	lea    rdx,[rsp+0x8]
   44b89:	mov    rbx,rax
   44b8c:	mov    rdi,rax
   44b8f:	xor    ecx,ecx
   44b91:	xor    esi,esi
   44b93:	call   47b40 <g_str_equal@plt+0x3a880>
   44b98:	mov    rdi,rbx
   44b9b:	call   27d00 <g_str_equal@plt+0x1aa40>
   44ba0:	add    rsp,0x10
   44ba4:	pop    rbx
   44ba5:	ret    
   44ba6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   44bb0:	push   rbx
   44bb1:	sub    rsp,0x10
   44bb5:	test   rdi,rdi
   44bb8:	mov    QWORD PTR [rsp+0x8],rdi
   44bbd:	je     44be0 <g_str_equal@plt+0x37920>
   44bbf:	call   29a40 <g_str_equal@plt+0x1c780>
   44bc4:	lea    rdx,[rsp+0x8]
   44bc9:	mov    rbx,rax
   44bcc:	mov    rdi,rax
   44bcf:	xor    ecx,ecx
   44bd1:	xor    esi,esi
   44bd3:	call   47cb0 <g_str_equal@plt+0x3a9f0>
   44bd8:	mov    rdi,rbx
   44bdb:	call   27d00 <g_str_equal@plt+0x1aa40>
   44be0:	add    rsp,0x10
   44be4:	pop    rbx
   44be5:	ret    
   44be6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   44bf0:	push   rbx
   44bf1:	sub    rsp,0x10
   44bf5:	test   rdi,rdi
   44bf8:	mov    QWORD PTR [rsp+0x8],rdi
   44bfd:	je     44c20 <g_str_equal@plt+0x37960>
   44bff:	call   29a40 <g_str_equal@plt+0x1c780>
   44c04:	lea    rdx,[rsp+0x8]
   44c09:	mov    rbx,rax
   44c0c:	mov    rdi,rax
   44c0f:	xor    ecx,ecx
   44c11:	xor    esi,esi
   44c13:	call   47e90 <g_str_equal@plt+0x3abd0>
   44c18:	mov    rdi,rbx
   44c1b:	call   27d00 <g_str_equal@plt+0x1aa40>
   44c20:	add    rsp,0x10
   44c24:	pop    rbx
   44c25:	ret    
   44c26:	nop    WORD PTR cs:[rax+rax*1+0x0]
   44c30:	push   rbx
   44c31:	sub    rsp,0x10
   44c35:	test   rdi,rdi
   44c38:	mov    QWORD PTR [rsp+0x8],rdi
   44c3d:	je     44c60 <g_str_equal@plt+0x379a0>
   44c3f:	call   29a40 <g_str_equal@plt+0x1c780>
   44c44:	lea    rdx,[rsp+0x8]
   44c49:	mov    rbx,rax
   44c4c:	mov    rdi,rax
   44c4f:	xor    ecx,ecx
   44c51:	xor    esi,esi
   44c53:	call   480c0 <g_str_equal@plt+0x3ae00>
   44c58:	mov    rdi,rbx
   44c5b:	call   27d00 <g_str_equal@plt+0x1aa40>
   44c60:	add    rsp,0x10
   44c64:	pop    rbx
   44c65:	ret    
   44c66:	nop    WORD PTR cs:[rax+rax*1+0x0]
   44c70:	push   rbx
   44c71:	sub    rsp,0x10
   44c75:	test   rdi,rdi
   44c78:	mov    QWORD PTR [rsp+0x8],rdi
   44c7d:	je     44ca0 <g_str_equal@plt+0x379e0>
   44c7f:	call   29a40 <g_str_equal@plt+0x1c780>
   44c84:	lea    rdx,[rsp+0x8]
   44c89:	mov    rbx,rax
   44c8c:	mov    rdi,rax
   44c8f:	xor    ecx,ecx
   44c91:	xor    esi,esi
   44c93:	call   482c0 <g_str_equal@plt+0x3b000>
   44c98:	mov    rdi,rbx
   44c9b:	call   27d00 <g_str_equal@plt+0x1aa40>
   44ca0:	add    rsp,0x10
   44ca4:	pop    rbx
   44ca5:	ret    
   44ca6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   44cb0:	push   rbx
   44cb1:	sub    rsp,0x10
   44cb5:	test   rdi,rdi
   44cb8:	mov    QWORD PTR [rsp+0x8],rdi
   44cbd:	je     44ce0 <g_str_equal@plt+0x37a20>
   44cbf:	call   29a40 <g_str_equal@plt+0x1c780>
   44cc4:	lea    rdx,[rsp+0x8]
   44cc9:	mov    rbx,rax
   44ccc:	mov    rdi,rax
   44ccf:	xor    ecx,ecx
   44cd1:	xor    esi,esi
   44cd3:	call   488a0 <g_str_equal@plt+0x3b5e0>
   44cd8:	mov    rdi,rbx
   44cdb:	call   27d00 <g_str_equal@plt+0x1aa40>
   44ce0:	add    rsp,0x10
   44ce4:	pop    rbx
   44ce5:	ret    
   44ce6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   44cf0:	push   rbx
   44cf1:	sub    rsp,0x10
   44cf5:	test   rdi,rdi
   44cf8:	mov    QWORD PTR [rsp+0x8],rdi
   44cfd:	je     44d20 <g_str_equal@plt+0x37a60>
   44cff:	call   29a40 <g_str_equal@plt+0x1c780>
   44d04:	lea    rdx,[rsp+0x8]
   44d09:	mov    rbx,rax
   44d0c:	mov    rdi,rax
   44d0f:	xor    ecx,ecx
   44d11:	xor    esi,esi
   44d13:	call   48a60 <g_str_equal@plt+0x3b7a0>
   44d18:	mov    rdi,rbx
   44d1b:	call   27d00 <g_str_equal@plt+0x1aa40>
   44d20:	add    rsp,0x10
   44d24:	pop    rbx
   44d25:	ret    
   44d26:	nop    WORD PTR cs:[rax+rax*1+0x0]
   44d30:	push   rbx
   44d31:	sub    rsp,0x10
   44d35:	test   rdi,rdi
   44d38:	mov    QWORD PTR [rsp+0x8],rdi
   44d3d:	je     44d60 <g_str_equal@plt+0x37aa0>
   44d3f:	call   29a40 <g_str_equal@plt+0x1c780>
   44d44:	lea    rdx,[rsp+0x8]
   44d49:	mov    rbx,rax
   44d4c:	mov    rdi,rax
   44d4f:	xor    ecx,ecx
   44d51:	xor    esi,esi
   44d53:	call   48450 <g_str_equal@plt+0x3b190>
   44d58:	mov    rdi,rbx
   44d5b:	call   27d00 <g_str_equal@plt+0x1aa40>
   44d60:	add    rsp,0x10
   44d64:	pop    rbx
   44d65:	ret    
   44d66:	nop    WORD PTR cs:[rax+rax*1+0x0]
   44d70:	push   rbx
   44d71:	sub    rsp,0x10
   44d75:	test   rdi,rdi
   44d78:	mov    QWORD PTR [rsp+0x8],rdi
   44d7d:	je     44da0 <g_str_equal@plt+0x37ae0>
   44d7f:	call   29a40 <g_str_equal@plt+0x1c780>
   44d84:	lea    rdx,[rsp+0x8]
   44d89:	mov    rbx,rax
   44d8c:	mov    rdi,rax
   44d8f:	xor    ecx,ecx
   44d91:	xor    esi,esi
   44d93:	call   485d0 <g_str_equal@plt+0x3b310>
   44d98:	mov    rdi,rbx
   44d9b:	call   27d00 <g_str_equal@plt+0x1aa40>
   44da0:	add    rsp,0x10
   44da4:	pop    rbx
   44da5:	ret    
   44da6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   44db0:	push   rbx
   44db1:	sub    rsp,0x10
   44db5:	test   rdi,rdi
   44db8:	mov    QWORD PTR [rsp+0x8],rdi
   44dbd:	je     44de0 <g_str_equal@plt+0x37b20>
   44dbf:	call   29a40 <g_str_equal@plt+0x1c780>
   44dc4:	lea    rdx,[rsp+0x8]
   44dc9:	mov    rbx,rax
   44dcc:	mov    rdi,rax
   44dcf:	xor    ecx,ecx
   44dd1:	xor    esi,esi
   44dd3:	call   486b0 <g_str_equal@plt+0x3b3f0>
   44dd8:	mov    rdi,rbx
   44ddb:	call   27d00 <g_str_equal@plt+0x1aa40>
   44de0:	add    rsp,0x10
   44de4:	pop    rbx
   44de5:	ret    
   44de6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   44df0:	push   rbx
   44df1:	sub    rsp,0x10
   44df5:	test   rdi,rdi
   44df8:	mov    QWORD PTR [rsp+0x8],rdi
   44dfd:	je     44e20 <g_str_equal@plt+0x37b60>
   44dff:	call   29a40 <g_str_equal@plt+0x1c780>
   44e04:	lea    rdx,[rsp+0x8]
   44e09:	mov    rbx,rax
   44e0c:	mov    rdi,rax
   44e0f:	xor    ecx,ecx
   44e11:	xor    esi,esi
   44e13:	call   487c0 <g_str_equal@plt+0x3b500>
   44e18:	mov    rdi,rbx
   44e1b:	call   27d00 <g_str_equal@plt+0x1aa40>
   44e20:	add    rsp,0x10
   44e24:	pop    rbx
   44e25:	ret    
   44e26:	nop    WORD PTR cs:[rax+rax*1+0x0]
   44e30:	push   rbx
   44e31:	sub    rsp,0x10
   44e35:	test   rdi,rdi
   44e38:	mov    QWORD PTR [rsp+0x8],rdi
   44e3d:	je     44e60 <g_str_equal@plt+0x37ba0>
   44e3f:	call   29a40 <g_str_equal@plt+0x1c780>
   44e44:	lea    rdx,[rsp+0x8]
   44e49:	mov    rbx,rax
   44e4c:	mov    rdi,rax
   44e4f:	xor    ecx,ecx
   44e51:	xor    esi,esi
   44e53:	call   48da0 <g_str_equal@plt+0x3bae0>
   44e58:	mov    rdi,rbx
   44e5b:	call   27d00 <g_str_equal@plt+0x1aa40>
   44e60:	add    rsp,0x10
   44e64:	pop    rbx
   44e65:	ret    
   44e66:	nop    WORD PTR cs:[rax+rax*1+0x0]
   44e70:	push   rbx
   44e71:	sub    rsp,0x10
   44e75:	test   rdi,rdi
   44e78:	mov    QWORD PTR [rsp+0x8],rdi
   44e7d:	je     44ea0 <g_str_equal@plt+0x37be0>
   44e7f:	call   29a40 <g_str_equal@plt+0x1c780>
   44e84:	lea    rdx,[rsp+0x8]
   44e89:	mov    rbx,rax
   44e8c:	mov    rdi,rax
   44e8f:	xor    ecx,ecx
   44e91:	xor    esi,esi
   44e93:	call   48e80 <g_str_equal@plt+0x3bbc0>
   44e98:	mov    rdi,rbx
   44e9b:	call   27d00 <g_str_equal@plt+0x1aa40>
   44ea0:	add    rsp,0x10
   44ea4:	pop    rbx
   44ea5:	ret    
   44ea6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   44eb0:	push   rbx
   44eb1:	sub    rsp,0x10
   44eb5:	test   rdi,rdi
   44eb8:	mov    QWORD PTR [rsp+0x8],rdi
   44ebd:	je     44ee0 <g_str_equal@plt+0x37c20>
   44ebf:	call   29a40 <g_str_equal@plt+0x1c780>
   44ec4:	lea    rdx,[rsp+0x8]
   44ec9:	mov    rbx,rax
   44ecc:	mov    rdi,rax
   44ecf:	xor    ecx,ecx
   44ed1:	xor    esi,esi
   44ed3:	call   49370 <g_str_equal@plt+0x3c0b0>
   44ed8:	mov    rdi,rbx
   44edb:	call   27d00 <g_str_equal@plt+0x1aa40>
   44ee0:	add    rsp,0x10
   44ee4:	pop    rbx
   44ee5:	ret    
   44ee6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   44ef0:	push   rbx
   44ef1:	sub    rsp,0x10
   44ef5:	test   rdi,rdi
   44ef8:	mov    QWORD PTR [rsp+0x8],rdi
   44efd:	je     44f20 <g_str_equal@plt+0x37c60>
   44eff:	call   29a40 <g_str_equal@plt+0x1c780>
   44f04:	lea    rdx,[rsp+0x8]
   44f09:	mov    rbx,rax
   44f0c:	mov    rdi,rax
   44f0f:	xor    ecx,ecx
   44f11:	xor    esi,esi
   44f13:	call   494b0 <g_str_equal@plt+0x3c1f0>
   44f18:	mov    rdi,rbx
   44f1b:	call   27d00 <g_str_equal@plt+0x1aa40>
   44f20:	add    rsp,0x10
   44f24:	pop    rbx
   44f25:	ret    
   44f26:	nop    WORD PTR cs:[rax+rax*1+0x0]
   44f30:	push   rbx
   44f31:	sub    rsp,0x10
   44f35:	test   rdi,rdi
   44f38:	mov    QWORD PTR [rsp+0x8],rdi
   44f3d:	je     44f60 <g_str_equal@plt+0x37ca0>
   44f3f:	call   29a40 <g_str_equal@plt+0x1c780>
   44f44:	lea    rdx,[rsp+0x8]
   44f49:	mov    rbx,rax
   44f4c:	mov    rdi,rax
   44f4f:	xor    ecx,ecx
   44f51:	xor    esi,esi
   44f53:	call   498d0 <g_str_equal@plt+0x3c610>
   44f58:	mov    rdi,rbx
   44f5b:	call   27d00 <g_str_equal@plt+0x1aa40>
   44f60:	add    rsp,0x10
   44f64:	pop    rbx
   44f65:	ret    
   44f66:	nop    WORD PTR cs:[rax+rax*1+0x0]
   44f70:	push   rbx
   44f71:	sub    rsp,0x10
   44f75:	test   rdi,rdi
   44f78:	mov    QWORD PTR [rsp+0x8],rdi
   44f7d:	je     44fa0 <g_str_equal@plt+0x37ce0>
   44f7f:	call   29a40 <g_str_equal@plt+0x1c780>
   44f84:	lea    rdx,[rsp+0x8]
   44f89:	mov    rbx,rax
   44f8c:	mov    rdi,rax
   44f8f:	xor    ecx,ecx
   44f91:	xor    esi,esi
   44f93:	call   49a80 <g_str_equal@plt+0x3c7c0>
   44f98:	mov    rdi,rbx
   44f9b:	call   27d00 <g_str_equal@plt+0x1aa40>
   44fa0:	add    rsp,0x10
   44fa4:	pop    rbx
   44fa5:	ret    
   44fa6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   44fb0:	push   rbx
   44fb1:	sub    rsp,0x10
   44fb5:	test   rdi,rdi
   44fb8:	mov    QWORD PTR [rsp+0x8],rdi
   44fbd:	je     44fe0 <g_str_equal@plt+0x37d20>
   44fbf:	call   29a40 <g_str_equal@plt+0x1c780>
   44fc4:	lea    rdx,[rsp+0x8]
   44fc9:	mov    rbx,rax
   44fcc:	mov    rdi,rax
   44fcf:	xor    ecx,ecx
   44fd1:	xor    esi,esi
   44fd3:	call   4a1e0 <g_str_equal@plt+0x3cf20>
   44fd8:	mov    rdi,rbx
   44fdb:	call   27d00 <g_str_equal@plt+0x1aa40>
   44fe0:	add    rsp,0x10
   44fe4:	pop    rbx
   44fe5:	ret    
   44fe6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   44ff0:	push   rbx
   44ff1:	sub    rsp,0x10
   44ff5:	test   rdi,rdi
   44ff8:	mov    QWORD PTR [rsp+0x8],rdi
   44ffd:	je     45020 <g_str_equal@plt+0x37d60>
   44fff:	call   29a40 <g_str_equal@plt+0x1c780>
   45004:	lea    rdx,[rsp+0x8]
   45009:	mov    rbx,rax
   4500c:	mov    rdi,rax
   4500f:	xor    ecx,ecx
   45011:	xor    esi,esi
   45013:	call   4a370 <g_str_equal@plt+0x3d0b0>
   45018:	mov    rdi,rbx
   4501b:	call   27d00 <g_str_equal@plt+0x1aa40>
   45020:	add    rsp,0x10
   45024:	pop    rbx
   45025:	ret    
   45026:	nop    WORD PTR cs:[rax+rax*1+0x0]
   45030:	push   rbx
   45031:	sub    rsp,0x10
   45035:	test   rdi,rdi
   45038:	mov    QWORD PTR [rsp+0x8],rdi
   4503d:	je     45060 <g_str_equal@plt+0x37da0>
   4503f:	call   29a40 <g_str_equal@plt+0x1c780>
   45044:	lea    rdx,[rsp+0x8]
   45049:	mov    rbx,rax
   4504c:	mov    rdi,rax
   4504f:	xor    ecx,ecx
   45051:	xor    esi,esi
   45053:	call   4a520 <g_str_equal@plt+0x3d260>
   45058:	mov    rdi,rbx
   4505b:	call   27d00 <g_str_equal@plt+0x1aa40>
   45060:	add    rsp,0x10
   45064:	pop    rbx
   45065:	ret    
   45066:	nop    WORD PTR cs:[rax+rax*1+0x0]
   45070:	push   rbx
   45071:	sub    rsp,0x10
   45075:	test   rdi,rdi
   45078:	mov    QWORD PTR [rsp+0x8],rdi
   4507d:	je     450a0 <g_str_equal@plt+0x37de0>
   4507f:	call   29a40 <g_str_equal@plt+0x1c780>
   45084:	lea    rdx,[rsp+0x8]
   45089:	mov    rbx,rax
   4508c:	mov    rdi,rax
   4508f:	xor    ecx,ecx
   45091:	xor    esi,esi
   45093:	call   4a980 <g_str_equal@plt+0x3d6c0>
   45098:	mov    rdi,rbx
   4509b:	call   27d00 <g_str_equal@plt+0x1aa40>
   450a0:	add    rsp,0x10
   450a4:	pop    rbx
   450a5:	ret    
   450a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   450b0:	push   rbx
   450b1:	sub    rsp,0x10
   450b5:	test   rdi,rdi
   450b8:	mov    QWORD PTR [rsp+0x8],rdi
   450bd:	je     450e0 <g_str_equal@plt+0x37e20>
   450bf:	call   29a40 <g_str_equal@plt+0x1c780>
   450c4:	lea    rdx,[rsp+0x8]
   450c9:	mov    rbx,rax
   450cc:	mov    rdi,rax
   450cf:	xor    ecx,ecx
   450d1:	xor    esi,esi
   450d3:	call   4aa60 <g_str_equal@plt+0x3d7a0>
   450d8:	mov    rdi,rbx
   450db:	call   27d00 <g_str_equal@plt+0x1aa40>
   450e0:	add    rsp,0x10
   450e4:	pop    rbx
   450e5:	ret    
   450e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   450f0:	push   rbx
   450f1:	sub    rsp,0x10
   450f5:	test   rdi,rdi
   450f8:	mov    QWORD PTR [rsp+0x8],rdi
   450fd:	je     45120 <g_str_equal@plt+0x37e60>
   450ff:	call   29a40 <g_str_equal@plt+0x1c780>
   45104:	lea    rdx,[rsp+0x8]
   45109:	mov    rbx,rax
   4510c:	mov    rdi,rax
   4510f:	xor    ecx,ecx
   45111:	xor    esi,esi
   45113:	call   4aca0 <g_str_equal@plt+0x3d9e0>
   45118:	mov    rdi,rbx
   4511b:	call   27d00 <g_str_equal@plt+0x1aa40>
   45120:	add    rsp,0x10
   45124:	pop    rbx
   45125:	ret    
   45126:	nop    WORD PTR cs:[rax+rax*1+0x0]
   45130:	push   rbx
   45131:	sub    rsp,0x10
   45135:	test   rdi,rdi
   45138:	mov    QWORD PTR [rsp+0x8],rdi
   4513d:	je     45160 <g_str_equal@plt+0x37ea0>
   4513f:	call   29a40 <g_str_equal@plt+0x1c780>
   45144:	lea    rdx,[rsp+0x8]
   45149:	mov    rbx,rax
   4514c:	mov    rdi,rax
   4514f:	xor    ecx,ecx
   45151:	xor    esi,esi
   45153:	call   4ae30 <g_str_equal@plt+0x3db70>
   45158:	mov    rdi,rbx
   4515b:	call   27d00 <g_str_equal@plt+0x1aa40>
   45160:	add    rsp,0x10
   45164:	pop    rbx
   45165:	ret    
   45166:	nop    WORD PTR cs:[rax+rax*1+0x0]
   45170:	push   rbx
   45171:	sub    rsp,0x10
   45175:	test   rdi,rdi
   45178:	mov    QWORD PTR [rsp+0x8],rdi
   4517d:	je     451a0 <g_str_equal@plt+0x37ee0>
   4517f:	call   29a40 <g_str_equal@plt+0x1c780>
   45184:	lea    rdx,[rsp+0x8]
   45189:	mov    rbx,rax
   4518c:	mov    rdi,rax
   4518f:	xor    ecx,ecx
   45191:	xor    esi,esi
   45193:	call   4af10 <g_str_equal@plt+0x3dc50>
   45198:	mov    rdi,rbx
   4519b:	call   27d00 <g_str_equal@plt+0x1aa40>
   451a0:	add    rsp,0x10
   451a4:	pop    rbx
   451a5:	ret    
   451a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   451b0:	push   rbx
   451b1:	sub    rsp,0x10
   451b5:	test   rdi,rdi
   451b8:	mov    QWORD PTR [rsp+0x8],rdi
   451bd:	je     451e0 <g_str_equal@plt+0x37f20>
   451bf:	call   29a40 <g_str_equal@plt+0x1c780>
   451c4:	lea    rdx,[rsp+0x8]
   451c9:	mov    rbx,rax
   451cc:	mov    rdi,rax
   451cf:	xor    ecx,ecx
   451d1:	xor    esi,esi
   451d3:	call   4b0d0 <g_str_equal@plt+0x3de10>
   451d8:	mov    rdi,rbx
   451db:	call   27d00 <g_str_equal@plt+0x1aa40>
   451e0:	add    rsp,0x10
   451e4:	pop    rbx
   451e5:	ret    
   451e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   451f0:	push   rbx
   451f1:	sub    rsp,0x10
   451f5:	test   rdi,rdi
   451f8:	mov    QWORD PTR [rsp+0x8],rdi
   451fd:	je     45220 <g_str_equal@plt+0x37f60>
   451ff:	call   29a40 <g_str_equal@plt+0x1c780>
   45204:	lea    rdx,[rsp+0x8]
   45209:	mov    rbx,rax
   4520c:	mov    rdi,rax
   4520f:	xor    ecx,ecx
   45211:	xor    esi,esi
   45213:	call   4b270 <g_str_equal@plt+0x3dfb0>
   45218:	mov    rdi,rbx
   4521b:	call   27d00 <g_str_equal@plt+0x1aa40>
   45220:	add    rsp,0x10
   45224:	pop    rbx
   45225:	ret    
   45226:	nop    WORD PTR cs:[rax+rax*1+0x0]
   45230:	push   rbx
   45231:	sub    rsp,0x10
   45235:	test   rdi,rdi
   45238:	mov    QWORD PTR [rsp+0x8],rdi
   4523d:	je     45260 <g_str_equal@plt+0x37fa0>
   4523f:	call   29a40 <g_str_equal@plt+0x1c780>
   45244:	lea    rdx,[rsp+0x8]
   45249:	mov    rbx,rax
   4524c:	mov    rdi,rax
   4524f:	xor    ecx,ecx
   45251:	xor    esi,esi
   45253:	call   4b510 <g_str_equal@plt+0x3e250>
   45258:	mov    rdi,rbx
   4525b:	call   27d00 <g_str_equal@plt+0x1aa40>
   45260:	add    rsp,0x10
   45264:	pop    rbx
   45265:	ret    
   45266:	nop    WORD PTR cs:[rax+rax*1+0x0]
   45270:	push   rbx
   45271:	sub    rsp,0x10
   45275:	test   rdi,rdi
   45278:	mov    QWORD PTR [rsp+0x8],rdi
   4527d:	je     452a0 <g_str_equal@plt+0x37fe0>
   4527f:	call   29a40 <g_str_equal@plt+0x1c780>
   45284:	lea    rdx,[rsp+0x8]
   45289:	mov    rbx,rax
   4528c:	mov    rdi,rax
   4528f:	xor    ecx,ecx
   45291:	xor    esi,esi
   45293:	call   4b6f0 <g_str_equal@plt+0x3e430>
   45298:	mov    rdi,rbx
   4529b:	call   27d00 <g_str_equal@plt+0x1aa40>
   452a0:	add    rsp,0x10
   452a4:	pop    rbx
   452a5:	ret    
   452a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   452b0:	push   rbx
   452b1:	sub    rsp,0x10
   452b5:	test   rdi,rdi
   452b8:	mov    QWORD PTR [rsp+0x8],rdi
   452bd:	je     452e0 <g_str_equal@plt+0x38020>
   452bf:	call   29a40 <g_str_equal@plt+0x1c780>
   452c4:	lea    rdx,[rsp+0x8]
   452c9:	mov    rbx,rax
   452cc:	mov    rdi,rax
   452cf:	xor    ecx,ecx
   452d1:	xor    esi,esi
   452d3:	call   4b910 <g_str_equal@plt+0x3e650>
   452d8:	mov    rdi,rbx
   452db:	call   27d00 <g_str_equal@plt+0x1aa40>
   452e0:	add    rsp,0x10
   452e4:	pop    rbx
   452e5:	ret    
   452e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   452f0:	push   rbx
   452f1:	sub    rsp,0x10
   452f5:	test   rdi,rdi
   452f8:	mov    QWORD PTR [rsp+0x8],rdi
   452fd:	je     45320 <g_str_equal@plt+0x38060>
   452ff:	call   29a40 <g_str_equal@plt+0x1c780>
   45304:	lea    rdx,[rsp+0x8]
   45309:	mov    rbx,rax
   4530c:	mov    rdi,rax
   4530f:	xor    ecx,ecx
   45311:	xor    esi,esi
   45313:	call   4bc20 <g_str_equal@plt+0x3e960>
   45318:	mov    rdi,rbx
   4531b:	call   27d00 <g_str_equal@plt+0x1aa40>
   45320:	add    rsp,0x10
   45324:	pop    rbx
   45325:	ret    
   45326:	nop    WORD PTR cs:[rax+rax*1+0x0]
   45330:	push   rbx
   45331:	sub    rsp,0x10
   45335:	test   rdi,rdi
   45338:	mov    QWORD PTR [rsp+0x8],rdi
   4533d:	je     45360 <g_str_equal@plt+0x380a0>
   4533f:	call   29a40 <g_str_equal@plt+0x1c780>
   45344:	lea    rdx,[rsp+0x8]
   45349:	mov    rbx,rax
   4534c:	mov    rdi,rax
   4534f:	xor    ecx,ecx
   45351:	xor    esi,esi
   45353:	call   4bd00 <g_str_equal@plt+0x3ea40>
   45358:	mov    rdi,rbx
   4535b:	call   27d00 <g_str_equal@plt+0x1aa40>
   45360:	add    rsp,0x10
   45364:	pop    rbx
   45365:	ret    
   45366:	nop    WORD PTR cs:[rax+rax*1+0x0]
   45370:	push   rbx
   45371:	sub    rsp,0x10
   45375:	test   rdi,rdi
   45378:	mov    QWORD PTR [rsp+0x8],rdi
   4537d:	je     453a0 <g_str_equal@plt+0x380e0>
   4537f:	call   29a40 <g_str_equal@plt+0x1c780>
   45384:	lea    rdx,[rsp+0x8]
   45389:	mov    rbx,rax
   4538c:	mov    rdi,rax
   4538f:	xor    ecx,ecx
   45391:	xor    esi,esi
   45393:	call   4beb0 <g_str_equal@plt+0x3ebf0>
   45398:	mov    rdi,rbx
   4539b:	call   27d00 <g_str_equal@plt+0x1aa40>
   453a0:	add    rsp,0x10
   453a4:	pop    rbx
   453a5:	ret    
   453a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   453b0:	push   rbx
   453b1:	sub    rsp,0x10
   453b5:	test   rdi,rdi
   453b8:	mov    QWORD PTR [rsp+0x8],rdi
   453bd:	je     453e0 <g_str_equal@plt+0x38120>
   453bf:	call   29a40 <g_str_equal@plt+0x1c780>
   453c4:	lea    rdx,[rsp+0x8]
   453c9:	mov    rbx,rax
   453cc:	mov    rdi,rax
   453cf:	xor    ecx,ecx
   453d1:	xor    esi,esi
   453d3:	call   4bf90 <g_str_equal@plt+0x3ecd0>
   453d8:	mov    rdi,rbx
   453db:	call   27d00 <g_str_equal@plt+0x1aa40>
   453e0:	add    rsp,0x10
   453e4:	pop    rbx
   453e5:	ret    
   453e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   453f0:	push   rbx
   453f1:	sub    rsp,0x10
   453f5:	test   rdi,rdi
   453f8:	mov    QWORD PTR [rsp+0x8],rdi
   453fd:	je     45420 <g_str_equal@plt+0x38160>
   453ff:	call   29a40 <g_str_equal@plt+0x1c780>
   45404:	lea    rdx,[rsp+0x8]
   45409:	mov    rbx,rax
   4540c:	mov    rdi,rax
   4540f:	xor    ecx,ecx
   45411:	xor    esi,esi
   45413:	call   4c100 <g_str_equal@plt+0x3ee40>
   45418:	mov    rdi,rbx
   4541b:	call   27d00 <g_str_equal@plt+0x1aa40>
   45420:	add    rsp,0x10
   45424:	pop    rbx
   45425:	ret    
   45426:	nop    WORD PTR cs:[rax+rax*1+0x0]
   45430:	push   rbx
   45431:	sub    rsp,0x10
   45435:	test   rdi,rdi
   45438:	mov    QWORD PTR [rsp+0x8],rdi
   4543d:	je     45460 <g_str_equal@plt+0x381a0>
   4543f:	call   29a40 <g_str_equal@plt+0x1c780>
   45444:	lea    rdx,[rsp+0x8]
   45449:	mov    rbx,rax
   4544c:	mov    rdi,rax
   4544f:	xor    ecx,ecx
   45451:	xor    esi,esi
   45453:	call   4c460 <g_str_equal@plt+0x3f1a0>
   45458:	mov    rdi,rbx
   4545b:	call   27d00 <g_str_equal@plt+0x1aa40>
   45460:	add    rsp,0x10
   45464:	pop    rbx
   45465:	ret    
   45466:	nop    WORD PTR cs:[rax+rax*1+0x0]
   45470:	push   rbx
   45471:	sub    rsp,0x10
   45475:	test   rdi,rdi
   45478:	mov    QWORD PTR [rsp+0x8],rdi
   4547d:	je     454a0 <g_str_equal@plt+0x381e0>
   4547f:	call   29a40 <g_str_equal@plt+0x1c780>
   45484:	lea    rdx,[rsp+0x8]
   45489:	mov    rbx,rax
   4548c:	mov    rdi,rax
   4548f:	xor    ecx,ecx
   45491:	xor    esi,esi
   45493:	call   4c6d0 <g_str_equal@plt+0x3f410>
   45498:	mov    rdi,rbx
   4549b:	call   27d00 <g_str_equal@plt+0x1aa40>
   454a0:	add    rsp,0x10
   454a4:	pop    rbx
   454a5:	ret    
   454a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   454b0:	push   rbx
   454b1:	sub    rsp,0x10
   454b5:	test   rdi,rdi
   454b8:	mov    QWORD PTR [rsp+0x8],rdi
   454bd:	je     454e0 <g_str_equal@plt+0x38220>
   454bf:	call   29a40 <g_str_equal@plt+0x1c780>
   454c4:	lea    rdx,[rsp+0x8]
   454c9:	mov    rbx,rax
   454cc:	mov    rdi,rax
   454cf:	xor    ecx,ecx
   454d1:	xor    esi,esi
   454d3:	call   4c7b0 <g_str_equal@plt+0x3f4f0>
   454d8:	mov    rdi,rbx
   454db:	call   27d00 <g_str_equal@plt+0x1aa40>
   454e0:	add    rsp,0x10
   454e4:	pop    rbx
   454e5:	ret    
   454e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   454f0:	push   rbx
   454f1:	sub    rsp,0x10
   454f5:	test   rdi,rdi
   454f8:	mov    QWORD PTR [rsp+0x8],rdi
   454fd:	je     45520 <g_str_equal@plt+0x38260>
   454ff:	call   29a40 <g_str_equal@plt+0x1c780>
   45504:	lea    rdx,[rsp+0x8]
   45509:	mov    rbx,rax
   4550c:	mov    rdi,rax
   4550f:	xor    ecx,ecx
   45511:	xor    esi,esi
   45513:	call   4c960 <g_str_equal@plt+0x3f6a0>
   45518:	mov    rdi,rbx
   4551b:	call   27d00 <g_str_equal@plt+0x1aa40>
   45520:	add    rsp,0x10
   45524:	pop    rbx
   45525:	ret    
   45526:	nop    WORD PTR cs:[rax+rax*1+0x0]
   45530:	push   rbx
   45531:	sub    rsp,0x10
   45535:	test   rdi,rdi
   45538:	mov    QWORD PTR [rsp+0x8],rdi
   4553d:	je     45560 <g_str_equal@plt+0x382a0>
   4553f:	call   29a40 <g_str_equal@plt+0x1c780>
   45544:	lea    rdx,[rsp+0x8]
   45549:	mov    rbx,rax
   4554c:	mov    rdi,rax
   4554f:	xor    ecx,ecx
   45551:	xor    esi,esi
   45553:	call   4cac0 <g_str_equal@plt+0x3f800>
   45558:	mov    rdi,rbx
   4555b:	call   27d00 <g_str_equal@plt+0x1aa40>
   45560:	add    rsp,0x10
   45564:	pop    rbx
   45565:	ret    
   45566:	nop    WORD PTR cs:[rax+rax*1+0x0]
   45570:	push   rbx
   45571:	sub    rsp,0x10
   45575:	test   rdi,rdi
   45578:	mov    QWORD PTR [rsp+0x8],rdi
   4557d:	je     455a0 <g_str_equal@plt+0x382e0>
   4557f:	call   29a40 <g_str_equal@plt+0x1c780>
   45584:	lea    rdx,[rsp+0x8]
   45589:	mov    rbx,rax
   4558c:	mov    rdi,rax
   4558f:	xor    ecx,ecx
   45591:	xor    esi,esi
   45593:	call   4cd40 <g_str_equal@plt+0x3fa80>
   45598:	mov    rdi,rbx
   4559b:	call   27d00 <g_str_equal@plt+0x1aa40>
   455a0:	add    rsp,0x10
   455a4:	pop    rbx
   455a5:	ret    
   455a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   455b0:	push   rbx
   455b1:	sub    rsp,0x10
   455b5:	test   rdi,rdi
   455b8:	mov    QWORD PTR [rsp+0x8],rdi
   455bd:	je     455e0 <g_str_equal@plt+0x38320>
   455bf:	call   29a40 <g_str_equal@plt+0x1c780>
   455c4:	lea    rdx,[rsp+0x8]
   455c9:	mov    rbx,rax
   455cc:	mov    rdi,rax
   455cf:	xor    ecx,ecx
   455d1:	xor    esi,esi
   455d3:	call   4ce20 <g_str_equal@plt+0x3fb60>
   455d8:	mov    rdi,rbx
   455db:	call   27d00 <g_str_equal@plt+0x1aa40>
   455e0:	add    rsp,0x10
   455e4:	pop    rbx
   455e5:	ret    
   455e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   455f0:	push   rbx
   455f1:	sub    rsp,0x10
   455f5:	test   rdi,rdi
   455f8:	mov    QWORD PTR [rsp+0x8],rdi
   455fd:	je     45620 <g_str_equal@plt+0x38360>
   455ff:	call   29a40 <g_str_equal@plt+0x1c780>
   45604:	lea    rdx,[rsp+0x8]
   45609:	mov    rbx,rax
   4560c:	mov    rdi,rax
   4560f:	xor    ecx,ecx
   45611:	xor    esi,esi
   45613:	call   4cf90 <g_str_equal@plt+0x3fcd0>
   45618:	mov    rdi,rbx
   4561b:	call   27d00 <g_str_equal@plt+0x1aa40>
   45620:	add    rsp,0x10
   45624:	pop    rbx
   45625:	ret    
   45626:	nop    WORD PTR cs:[rax+rax*1+0x0]
   45630:	push   rbx
   45631:	sub    rsp,0x10
   45635:	test   rdi,rdi
   45638:	mov    QWORD PTR [rsp+0x8],rdi
   4563d:	je     45660 <g_str_equal@plt+0x383a0>
   4563f:	call   29a40 <g_str_equal@plt+0x1c780>
   45644:	lea    rdx,[rsp+0x8]
   45649:	mov    rbx,rax
   4564c:	mov    rdi,rax
   4564f:	xor    ecx,ecx
   45651:	xor    esi,esi
   45653:	call   4e930 <g_str_equal@plt+0x41670>
   45658:	mov    rdi,rbx
   4565b:	call   27d00 <g_str_equal@plt+0x1aa40>
   45660:	add    rsp,0x10
   45664:	pop    rbx
   45665:	ret    
   45666:	nop    WORD PTR cs:[rax+rax*1+0x0]
   45670:	push   rbx
   45671:	sub    rsp,0x10
   45675:	test   rdi,rdi
   45678:	mov    QWORD PTR [rsp+0x8],rdi
   4567d:	je     456a0 <g_str_equal@plt+0x383e0>
   4567f:	call   29a40 <g_str_equal@plt+0x1c780>
   45684:	lea    rdx,[rsp+0x8]
   45689:	mov    rbx,rax
   4568c:	mov    rdi,rax
   4568f:	xor    ecx,ecx
   45691:	xor    esi,esi
   45693:	call   4d290 <g_str_equal@plt+0x3ffd0>
   45698:	mov    rdi,rbx
   4569b:	call   27d00 <g_str_equal@plt+0x1aa40>
   456a0:	add    rsp,0x10
   456a4:	pop    rbx
   456a5:	ret    
   456a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   456b0:	push   rbx
   456b1:	sub    rsp,0x10
   456b5:	test   rdi,rdi
   456b8:	mov    QWORD PTR [rsp+0x8],rdi
   456bd:	je     456e0 <g_str_equal@plt+0x38420>
   456bf:	call   29a40 <g_str_equal@plt+0x1c780>
   456c4:	lea    rdx,[rsp+0x8]
   456c9:	mov    rbx,rax
   456cc:	mov    rdi,rax
   456cf:	xor    ecx,ecx
   456d1:	xor    esi,esi
   456d3:	call   4d420 <g_str_equal@plt+0x40160>
   456d8:	mov    rdi,rbx
   456db:	call   27d00 <g_str_equal@plt+0x1aa40>
   456e0:	add    rsp,0x10
   456e4:	pop    rbx
   456e5:	ret    
   456e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   456f0:	push   rbx
   456f1:	sub    rsp,0x10
   456f5:	test   rdi,rdi
   456f8:	mov    QWORD PTR [rsp+0x8],rdi
   456fd:	je     45720 <g_str_equal@plt+0x38460>
   456ff:	call   29a40 <g_str_equal@plt+0x1c780>
   45704:	lea    rdx,[rsp+0x8]
   45709:	mov    rbx,rax
   4570c:	mov    rdi,rax
   4570f:	xor    ecx,ecx
   45711:	xor    esi,esi
   45713:	call   4ea10 <g_str_equal@plt+0x41750>
   45718:	mov    rdi,rbx
   4571b:	call   27d00 <g_str_equal@plt+0x1aa40>
   45720:	add    rsp,0x10
   45724:	pop    rbx
   45725:	ret    
   45726:	nop    WORD PTR cs:[rax+rax*1+0x0]
   45730:	push   rbx
   45731:	sub    rsp,0x10
   45735:	test   rdi,rdi
   45738:	mov    QWORD PTR [rsp+0x8],rdi
   4573d:	je     45760 <g_str_equal@plt+0x384a0>
   4573f:	call   29a40 <g_str_equal@plt+0x1c780>
   45744:	lea    rdx,[rsp+0x8]
   45749:	mov    rbx,rax
   4574c:	mov    rdi,rax
   4574f:	xor    ecx,ecx
   45751:	xor    esi,esi
   45753:	call   4d6e0 <g_str_equal@plt+0x40420>
   45758:	mov    rdi,rbx
   4575b:	call   27d00 <g_str_equal@plt+0x1aa40>
   45760:	add    rsp,0x10
   45764:	pop    rbx
   45765:	ret    
   45766:	nop    WORD PTR cs:[rax+rax*1+0x0]
   45770:	push   rbx
   45771:	sub    rsp,0x10
   45775:	test   rdi,rdi
   45778:	mov    QWORD PTR [rsp+0x8],rdi
   4577d:	je     457a0 <g_str_equal@plt+0x384e0>
   4577f:	call   29a40 <g_str_equal@plt+0x1c780>
   45784:	lea    rdx,[rsp+0x8]
   45789:	mov    rbx,rax
   4578c:	mov    rdi,rax
   4578f:	xor    ecx,ecx
   45791:	xor    esi,esi
   45793:	call   4d7c0 <g_str_equal@plt+0x40500>
   45798:	mov    rdi,rbx
   4579b:	call   27d00 <g_str_equal@plt+0x1aa40>
   457a0:	add    rsp,0x10
   457a4:	pop    rbx
   457a5:	ret    
   457a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   457b0:	push   rbx
   457b1:	sub    rsp,0x10
   457b5:	test   rdi,rdi
   457b8:	mov    QWORD PTR [rsp+0x8],rdi
   457bd:	je     457e0 <g_str_equal@plt+0x38520>
   457bf:	call   29a40 <g_str_equal@plt+0x1c780>
   457c4:	lea    rdx,[rsp+0x8]
   457c9:	mov    rbx,rax
   457cc:	mov    rdi,rax
   457cf:	xor    ecx,ecx
   457d1:	xor    esi,esi
   457d3:	call   4da50 <g_str_equal@plt+0x40790>
   457d8:	mov    rdi,rbx
   457db:	call   27d00 <g_str_equal@plt+0x1aa40>
   457e0:	add    rsp,0x10
   457e4:	pop    rbx
   457e5:	ret    
   457e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   457f0:	push   rbx
   457f1:	sub    rsp,0x10
   457f5:	test   rdi,rdi
   457f8:	mov    QWORD PTR [rsp+0x8],rdi
   457fd:	je     45820 <g_str_equal@plt+0x38560>
   457ff:	call   29a40 <g_str_equal@plt+0x1c780>
   45804:	lea    rdx,[rsp+0x8]
   45809:	mov    rbx,rax
   4580c:	mov    rdi,rax
   4580f:	xor    ecx,ecx
   45811:	xor    esi,esi
   45813:	call   4dca0 <g_str_equal@plt+0x409e0>
   45818:	mov    rdi,rbx
   4581b:	call   27d00 <g_str_equal@plt+0x1aa40>
   45820:	add    rsp,0x10
   45824:	pop    rbx
   45825:	ret    
   45826:	nop    WORD PTR cs:[rax+rax*1+0x0]
   45830:	push   rbx
   45831:	sub    rsp,0x10
   45835:	test   rdi,rdi
   45838:	mov    QWORD PTR [rsp+0x8],rdi
   4583d:	je     45860 <g_str_equal@plt+0x385a0>
   4583f:	call   29a40 <g_str_equal@plt+0x1c780>
   45844:	lea    rdx,[rsp+0x8]
   45849:	mov    rbx,rax
   4584c:	mov    rdi,rax
   4584f:	xor    ecx,ecx
   45851:	xor    esi,esi
   45853:	call   4dd80 <g_str_equal@plt+0x40ac0>
   45858:	mov    rdi,rbx
   4585b:	call   27d00 <g_str_equal@plt+0x1aa40>
   45860:	add    rsp,0x10
   45864:	pop    rbx
   45865:	ret    
   45866:	nop    WORD PTR cs:[rax+rax*1+0x0]
   45870:	push   rbx
   45871:	sub    rsp,0x10
   45875:	test   rdi,rdi
   45878:	mov    QWORD PTR [rsp+0x8],rdi
   4587d:	je     458a0 <g_str_equal@plt+0x385e0>
   4587f:	call   29a40 <g_str_equal@plt+0x1c780>
   45884:	lea    rdx,[rsp+0x8]
   45889:	mov    rbx,rax
   4588c:	mov    rdi,rax
   4588f:	xor    ecx,ecx
   45891:	xor    esi,esi
   45893:	call   4e0d0 <g_str_equal@plt+0x40e10>
   45898:	mov    rdi,rbx
   4589b:	call   27d00 <g_str_equal@plt+0x1aa40>
   458a0:	add    rsp,0x10
   458a4:	pop    rbx
   458a5:	ret    
   458a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   458b0:	push   rbx
   458b1:	sub    rsp,0x10
   458b5:	test   rdi,rdi
   458b8:	mov    QWORD PTR [rsp+0x8],rdi
   458bd:	je     458e0 <g_str_equal@plt+0x38620>
   458bf:	call   29a40 <g_str_equal@plt+0x1c780>
   458c4:	lea    rdx,[rsp+0x8]
   458c9:	mov    rbx,rax
   458cc:	mov    rdi,rax
   458cf:	xor    ecx,ecx
   458d1:	xor    esi,esi
   458d3:	call   4e1b0 <g_str_equal@plt+0x40ef0>
   458d8:	mov    rdi,rbx
   458db:	call   27d00 <g_str_equal@plt+0x1aa40>
   458e0:	add    rsp,0x10
   458e4:	pop    rbx
   458e5:	ret    
   458e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   458f0:	push   rbx
   458f1:	sub    rsp,0x10
   458f5:	test   rdi,rdi
   458f8:	mov    QWORD PTR [rsp+0x8],rdi
   458fd:	je     45920 <g_str_equal@plt+0x38660>
   458ff:	call   29a40 <g_str_equal@plt+0x1c780>
   45904:	lea    rdx,[rsp+0x8]
   45909:	mov    rbx,rax
   4590c:	mov    rdi,rax
   4590f:	xor    ecx,ecx
   45911:	xor    esi,esi
   45913:	call   4e4f0 <g_str_equal@plt+0x41230>
   45918:	mov    rdi,rbx
   4591b:	call   27d00 <g_str_equal@plt+0x1aa40>
   45920:	add    rsp,0x10
   45924:	pop    rbx
   45925:	ret    
   45926:	nop    WORD PTR cs:[rax+rax*1+0x0]
   45930:	push   rbx
   45931:	sub    rsp,0x10
   45935:	test   rdi,rdi
   45938:	mov    QWORD PTR [rsp+0x8],rdi
   4593d:	je     45960 <g_str_equal@plt+0x386a0>
   4593f:	call   29a40 <g_str_equal@plt+0x1c780>
   45944:	lea    rdx,[rsp+0x8]
   45949:	mov    rbx,rax
   4594c:	mov    rdi,rax
   4594f:	xor    ecx,ecx
   45951:	xor    esi,esi
   45953:	call   4e5d0 <g_str_equal@plt+0x41310>
   45958:	mov    rdi,rbx
   4595b:	call   27d00 <g_str_equal@plt+0x1aa40>
   45960:	add    rsp,0x10
   45964:	pop    rbx
   45965:	ret    
   45966:	nop    WORD PTR cs:[rax+rax*1+0x0]
   45970:	push   rbx
   45971:	sub    rsp,0x10
   45975:	test   rdi,rdi
   45978:	mov    QWORD PTR [rsp+0x8],rdi
   4597d:	je     459a0 <g_str_equal@plt+0x386e0>
   4597f:	call   29a40 <g_str_equal@plt+0x1c780>
   45984:	lea    rdx,[rsp+0x8]
   45989:	mov    rbx,rax
   4598c:	mov    rdi,rax
   4598f:	xor    ecx,ecx
   45991:	xor    esi,esi
   45993:	call   4eaf0 <g_str_equal@plt+0x41830>
   45998:	mov    rdi,rbx
   4599b:	call   27d00 <g_str_equal@plt+0x1aa40>
   459a0:	add    rsp,0x10
   459a4:	pop    rbx
   459a5:	ret    
   459a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   459b0:	push   rbx
   459b1:	sub    rsp,0x10
   459b5:	test   rdi,rdi
   459b8:	mov    QWORD PTR [rsp+0x8],rdi
   459bd:	je     459e0 <g_str_equal@plt+0x38720>
   459bf:	call   29a40 <g_str_equal@plt+0x1c780>
   459c4:	lea    rdx,[rsp+0x8]
   459c9:	mov    rbx,rax
   459cc:	mov    rdi,rax
   459cf:	xor    ecx,ecx
   459d1:	xor    esi,esi
   459d3:	call   4f570 <g_str_equal@plt+0x422b0>
   459d8:	mov    rdi,rbx
   459db:	call   27d00 <g_str_equal@plt+0x1aa40>
   459e0:	add    rsp,0x10
   459e4:	pop    rbx
   459e5:	ret    
   459e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   459f0:	push   rbx
   459f1:	sub    rsp,0x10
   459f5:	test   rdi,rdi
   459f8:	mov    QWORD PTR [rsp+0x8],rdi
   459fd:	je     45a20 <g_str_equal@plt+0x38760>
   459ff:	call   29a40 <g_str_equal@plt+0x1c780>
   45a04:	lea    rdx,[rsp+0x8]
   45a09:	mov    rbx,rax
   45a0c:	mov    rdi,rax
   45a0f:	xor    ecx,ecx
   45a11:	xor    esi,esi
   45a13:	call   4f650 <g_str_equal@plt+0x42390>
   45a18:	mov    rdi,rbx
   45a1b:	call   27d00 <g_str_equal@plt+0x1aa40>
   45a20:	add    rsp,0x10
   45a24:	pop    rbx
   45a25:	ret    
   45a26:	nop    WORD PTR cs:[rax+rax*1+0x0]
   45a30:	push   rbx
   45a31:	sub    rsp,0x10
   45a35:	test   rdi,rdi
   45a38:	mov    QWORD PTR [rsp+0x8],rdi
   45a3d:	je     45a60 <g_str_equal@plt+0x387a0>
   45a3f:	call   29a40 <g_str_equal@plt+0x1c780>
   45a44:	lea    rdx,[rsp+0x8]
   45a49:	mov    rbx,rax
   45a4c:	mov    rdi,rax
   45a4f:	xor    ecx,ecx
   45a51:	xor    esi,esi
   45a53:	call   4f7c0 <g_str_equal@plt+0x42500>
   45a58:	mov    rdi,rbx
   45a5b:	call   27d00 <g_str_equal@plt+0x1aa40>
   45a60:	add    rsp,0x10
   45a64:	pop    rbx
   45a65:	ret    
   45a66:	nop    WORD PTR cs:[rax+rax*1+0x0]
   45a70:	push   rbx
   45a71:	sub    rsp,0x10
   45a75:	test   rdi,rdi
   45a78:	mov    QWORD PTR [rsp+0x8],rdi
   45a7d:	je     45aa0 <g_str_equal@plt+0x387e0>
   45a7f:	call   29a40 <g_str_equal@plt+0x1c780>
   45a84:	lea    rdx,[rsp+0x8]
   45a89:	mov    rbx,rax
   45a8c:	mov    rdi,rax
   45a8f:	xor    ecx,ecx
   45a91:	xor    esi,esi
   45a93:	call   4fa60 <g_str_equal@plt+0x427a0>
   45a98:	mov    rdi,rbx
   45a9b:	call   27d00 <g_str_equal@plt+0x1aa40>
   45aa0:	add    rsp,0x10
   45aa4:	pop    rbx
   45aa5:	ret    
   45aa6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   45ab0:	push   rbx
   45ab1:	sub    rsp,0x10
   45ab5:	test   rdi,rdi
   45ab8:	mov    QWORD PTR [rsp+0x8],rdi
   45abd:	je     45ae0 <g_str_equal@plt+0x38820>
   45abf:	call   29a40 <g_str_equal@plt+0x1c780>
   45ac4:	lea    rdx,[rsp+0x8]
   45ac9:	mov    rbx,rax
   45acc:	mov    rdi,rax
   45acf:	xor    ecx,ecx
   45ad1:	xor    esi,esi
   45ad3:	call   4fba0 <g_str_equal@plt+0x428e0>
   45ad8:	mov    rdi,rbx
   45adb:	call   27d00 <g_str_equal@plt+0x1aa40>
   45ae0:	add    rsp,0x10
   45ae4:	pop    rbx
   45ae5:	ret    
   45ae6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   45af0:	push   rbx
   45af1:	sub    rsp,0x10
   45af5:	test   rdi,rdi
   45af8:	mov    QWORD PTR [rsp+0x8],rdi
   45afd:	je     45b20 <g_str_equal@plt+0x38860>
   45aff:	call   29a40 <g_str_equal@plt+0x1c780>
   45b04:	lea    rdx,[rsp+0x8]
   45b09:	mov    rbx,rax
   45b0c:	mov    rdi,rax
   45b0f:	xor    ecx,ecx
   45b11:	xor    esi,esi
   45b13:	call   4fd60 <g_str_equal@plt+0x42aa0>
   45b18:	mov    rdi,rbx
   45b1b:	call   27d00 <g_str_equal@plt+0x1aa40>
   45b20:	add    rsp,0x10
   45b24:	pop    rbx
   45b25:	ret    
   45b26:	nop    WORD PTR cs:[rax+rax*1+0x0]
   45b30:	push   rbx
   45b31:	mov    r8,rcx
   45b34:	mov    rbx,rdx
   45b37:	lea    rcx,[rip+0x23b822]        # 281360 <_fini@@Base+0x22ec0c>
   45b3e:	sub    rsp,0x10
   45b42:	mov    rax,QWORD PTR fs:0x28
   45b4b:	mov    QWORD PTR [rsp+0x8],rax
   45b50:	xor    eax,eax
   45b52:	mov    eax,DWORD PTR [rdx]
   45b54:	lea    rdx,[rsp+0x4]
   45b59:	mov    DWORD PTR [rsp+0x4],eax
   45b5d:	call   296a0 <g_str_equal@plt+0x1c3e0>
   45b62:	mov    eax,DWORD PTR [rsp+0x4]
   45b66:	mov    DWORD PTR [rbx],eax
   45b68:	mov    rax,QWORD PTR [rsp+0x8]
   45b6d:	xor    rax,QWORD PTR fs:0x28
   45b76:	jne    45b7e <g_str_equal@plt+0x388be>
   45b78:	add    rsp,0x10
   45b7c:	pop    rbx
   45b7d:	ret    
   45b7e:	call   cd30 <__stack_chk_fail@plt>
   45b83:	nop    DWORD PTR [rax]
   45b86:	nop    WORD PTR cs:[rax+rax*1+0x0]
   45b90:	push   rbx
   45b91:	mov    r8,rcx
   45b94:	mov    rbx,rdx
   45b97:	lea    rcx,[rip+0x23b7a2]        # 281340 <_fini@@Base+0x22ebec>
   45b9e:	sub    rsp,0x10
   45ba2:	mov    rax,QWORD PTR fs:0x28
   45bab:	mov    QWORD PTR [rsp+0x8],rax
   45bb0:	xor    eax,eax
   45bb2:	mov    eax,DWORD PTR [rdx]
   45bb4:	lea    rdx,[rsp+0x4]
   45bb9:	mov    DWORD PTR [rsp+0x4],eax
   45bbd:	call   296a0 <g_str_equal@plt+0x1c3e0>
   45bc2:	mov    eax,DWORD PTR [rsp+0x4]
   45bc6:	mov    DWORD PTR [rbx],eax
   45bc8:	mov    rax,QWORD PTR [rsp+0x8]
   45bcd:	xor    rax,QWORD PTR fs:0x28
   45bd6:	jne    45bde <g_str_equal@plt+0x3891e>
   45bd8:	add    rsp,0x10
   45bdc:	pop    rbx
   45bdd:	ret    
   45bde:	call   cd30 <__stack_chk_fail@plt>
   45be3:	nop    DWORD PTR [rax]
   45be6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   45bf0:	push   rbx
   45bf1:	mov    r8,rcx
   45bf4:	mov    rbx,rdx
   45bf7:	lea    rcx,[rip+0x23b712]        # 281310 <_fini@@Base+0x22ebbc>
   45bfe:	sub    rsp,0x10
   45c02:	mov    rax,QWORD PTR fs:0x28
   45c0b:	mov    QWORD PTR [rsp+0x8],rax
   45c10:	xor    eax,eax
   45c12:	mov    eax,DWORD PTR [rdx]
   45c14:	lea    rdx,[rsp+0x4]
   45c19:	mov    DWORD PTR [rsp+0x4],eax
   45c1d:	call   296a0 <g_str_equal@plt+0x1c3e0>
   45c22:	mov    eax,DWORD PTR [rsp+0x4]
   45c26:	mov    DWORD PTR [rbx],eax
   45c28:	mov    rax,QWORD PTR [rsp+0x8]
   45c2d:	xor    rax,QWORD PTR fs:0x28
   45c36:	jne    45c3e <g_str_equal@plt+0x3897e>
   45c38:	add    rsp,0x10
   45c3c:	pop    rbx
   45c3d:	ret    
   45c3e:	call   cd30 <__stack_chk_fail@plt>
   45c43:	nop    DWORD PTR [rax]
   45c46:	nop    WORD PTR cs:[rax+rax*1+0x0]
   45c50:	push   rbx
   45c51:	mov    r8,rcx
   45c54:	mov    rbx,rdx
   45c57:	lea    rcx,[rip+0x23b682]        # 2812e0 <_fini@@Base+0x22eb8c>
   45c5e:	sub    rsp,0x10
   45c62:	mov    rax,QWORD PTR fs:0x28
   45c6b:	mov    QWORD PTR [rsp+0x8],rax
   45c70:	xor    eax,eax
   45c72:	mov    eax,DWORD PTR [rdx]
   45c74:	lea    rdx,[rsp+0x4]
   45c79:	mov    DWORD PTR [rsp+0x4],eax
   45c7d:	call   296a0 <g_str_equal@plt+0x1c3e0>
   45c82:	mov    eax,DWORD PTR [rsp+0x4]
   45c86:	mov    DWORD PTR [rbx],eax
   45c88:	mov    rax,QWORD PTR [rsp+0x8]
   45c8d:	xor    rax,QWORD PTR fs:0x28
   45c96:	jne    45c9e <g_str_equal@plt+0x389de>
   45c98:	add    rsp,0x10
   45c9c:	pop    rbx
   45c9d:	ret    
   45c9e:	call   cd30 <__stack_chk_fail@plt>
   45ca3:	nop    DWORD PTR [rax]
   45ca6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   45cb0:	push   rbx
   45cb1:	mov    rbx,rdx
   45cb4:	mov    rdx,rsi
   45cb7:	lea    rsi,[rip+0x1f046]        # 64d04 <_fini@@Base+0x125b0>
   45cbe:	sub    rsp,0x10
   45cc2:	mov    rcx,rsp
   45cc5:	mov    QWORD PTR [rsp],0x0
   45ccd:	mov    rax,QWORD PTR fs:0x28
   45cd6:	mov    QWORD PTR [rsp+0x8],rax
   45cdb:	xor    eax,eax
   45cdd:	call   29210 <g_str_equal@plt+0x1bf50>
   45ce2:	mov    rsi,QWORD PTR [rsp]
   45ce6:	mov    rdi,rbx
   45ce9:	call   3a4c0 <g_str_equal@plt+0x2d200>
   45cee:	mov    rax,QWORD PTR [rsp+0x8]
   45cf3:	xor    rax,QWORD PTR fs:0x28
   45cfc:	jne    45d04 <g_str_equal@plt+0x38a44>
   45cfe:	add    rsp,0x10
   45d02:	pop    rbx
   45d03:	ret    
   45d04:	call   cd30 <__stack_chk_fail@plt>
   45d09:	nop    DWORD PTR [rax+0x0]
   45d10:	push   r13
   45d12:	push   r12
   45d14:	mov    r13,rcx
   45d17:	push   rbp
   45d18:	push   rbx
   45d19:	mov    ecx,0x8
   45d1e:	mov    rbp,rdi
   45d21:	mov    rbx,rdx
   45d24:	sub    rsp,0x18
   45d28:	mov    r12,rsp
   45d2b:	mov    QWORD PTR [rsp],0x0
   45d33:	mov    r8,r12
   45d36:	mov    rax,QWORD PTR fs:0x28
   45d3f:	mov    QWORD PTR [rsp+0x8],rax
   45d44:	xor    eax,eax
   45d46:	call   27da0 <g_str_equal@plt+0x1aae0>
   45d4b:	mov    rsi,QWORD PTR [rsp]
   45d4f:	test   rsi,rsi
   45d52:	je     45d80 <g_str_equal@plt+0x38ac0>
   45d54:	mov    rdi,r13
   45d57:	call   3a4c0 <g_str_equal@plt+0x2d200>
   45d5c:	mov    rax,QWORD PTR [rsp+0x8]
   45d61:	xor    rax,QWORD PTR fs:0x28
   45d6a:	jne    45ddd <g_str_equal@plt+0x38b1d>
   45d6c:	add    rsp,0x18
   45d70:	pop    rbx
   45d71:	pop    rbp
   45d72:	pop    r12
   45d74:	pop    r13
   45d76:	ret    
   45d77:	nop    WORD PTR [rax+rax*1+0x0]
   45d80:	mov    rsi,QWORD PTR [rbx]
   45d83:	test   rsi,rsi
   45d86:	je     45d9a <g_str_equal@plt+0x38ada>
   45d88:	mov    rdx,r12
   45d8b:	mov    rdi,rbp
   45d8e:	call   45cb0 <g_str_equal@plt+0x389f0>
   45d93:	cmp    QWORD PTR [rsp],0x0
   45d98:	je     45dd0 <g_str_equal@plt+0x38b10>
   45d9a:	mov    rsi,rbx
   45d9d:	mov    rdi,rbp
   45da0:	call   28000 <g_str_equal@plt+0x1ad40>
   45da5:	mov    rsi,QWORD PTR [rsp]
   45da9:	test   rsi,rsi
   45dac:	je     45d54 <g_str_equal@plt+0x38a94>
   45dae:	mov    rdi,rbp
   45db1:	call   28770 <g_str_equal@plt+0x1b4b0>
   45db6:	test   al,al
   45db8:	je     45dc9 <g_str_equal@plt+0x38b09>
   45dba:	mov    rdi,QWORD PTR [rbx]
   45dbd:	call   52660 <g_str_equal@plt+0x453a0>
   45dc2:	mov    QWORD PTR [rbx],0x0
   45dc9:	mov    rsi,QWORD PTR [rsp]
   45dcd:	jmp    45d54 <g_str_equal@plt+0x38a94>
   45dcf:	nop
   45dd0:	mov    rsi,r12
   45dd3:	mov    rdi,rbp
   45dd6:	call   27f50 <g_str_equal@plt+0x1ac90>
   45ddb:	jmp    45d9a <g_str_equal@plt+0x38ada>
   45ddd:	call   cd30 <__stack_chk_fail@plt>
   45de2:	nop    DWORD PTR [rax+0x0]
   45de6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   45df0:	push   r14
   45df2:	push   r13
   45df4:	mov    r14,rcx
   45df7:	push   r12
   45df9:	push   rbp
   45dfa:	mov    ecx,0x10
   45dff:	push   rbx
   45e00:	mov    r12,rsi
   45e03:	mov    rbp,rdi
   45e06:	mov    rbx,rdx
   45e09:	sub    rsp,0x10
   45e0d:	mov    r13,rsp
   45e10:	mov    QWORD PTR [rsp],0x0
   45e18:	mov    r8,r13
   45e1b:	mov    rax,QWORD PTR fs:0x28
   45e24:	mov    QWORD PTR [rsp+0x8],rax
   45e29:	xor    eax,eax
   45e2b:	call   28430 <g_str_equal@plt+0x1b170>
   45e30:	mov    rsi,QWORD PTR [rsp]
   45e34:	test   rsi,rsi
   45e37:	jne    45e98 <g_str_equal@plt+0x38bd8>
   45e39:	mov    rdx,QWORD PTR [rbx]
   45e3c:	test   rdx,rdx
   45e3f:	je     45e69 <g_str_equal@plt+0x38ba9>
   45e41:	mov    eax,DWORD PTR [rdx]
   45e43:	cmp    eax,0x1
   45e46:	je     45f30 <g_str_equal@plt+0x38c70>
   45e4c:	jb     45f4c <g_str_equal@plt+0x38c8c>
   45e52:	cmp    eax,0x3
   45e55:	jne    45ec8 <g_str_equal@plt+0x38c08>
   45e57:	add    rdx,0x8
   45e5b:	mov    rcx,r13
   45e5e:	mov    rsi,r12
   45e61:	mov    rdi,rbp
   45e64:	call   29210 <g_str_equal@plt+0x1bf50>
   45e69:	mov    rsi,rbx
   45e6c:	mov    rdi,rbp
   45e6f:	call   285f0 <g_str_equal@plt+0x1b330>
   45e74:	mov    rsi,QWORD PTR [rsp]
   45e78:	test   rsi,rsi
   45e7b:	je     45e98 <g_str_equal@plt+0x38bd8>
   45e7d:	mov    rdi,rbp
   45e80:	call   28770 <g_str_equal@plt+0x1b4b0>
   45e85:	test   al,al
   45e87:	jne    45f10 <g_str_equal@plt+0x38c50>
   45e8d:	mov    rsi,QWORD PTR [rsp]
   45e91:	nop    DWORD PTR [rax+0x0]
   45e98:	mov    rdi,r14
   45e9b:	call   3a4c0 <g_str_equal@plt+0x2d200>
   45ea0:	mov    rax,QWORD PTR [rsp+0x8]
   45ea5:	xor    rax,QWORD PTR fs:0x28
   45eae:	jne    45f47 <g_str_equal@plt+0x38c87>
   45eb4:	add    rsp,0x10
   45eb8:	pop    rbx
   45eb9:	pop    rbp
   45eba:	pop    r12
   45ebc:	pop    r13
   45ebe:	pop    r14
   45ec0:	ret    
   45ec1:	nop    DWORD PTR [rax+0x0]
   45ec8:	lea    rax,[rip+0x14bd8]        # 5aaa7 <_fini@@Base+0x8353>
   45ecf:	test   r12,r12
   45ed2:	lea    r8,[rip+0x179cf]        # 5d8a8 <_fini@@Base+0xb154>
   45ed9:	lea    rcx,[rip+0x1f7a0]        # 65680 <_fini@@Base+0x12f2c>
   45ee0:	lea    rsi,[rip+0x1f772]        # 65659 <_fini@@Base+0x12f05>
   45ee7:	mov    edx,0x6d
   45eec:	cmove  r12,rax
   45ef0:	lea    rax,[rip+0x1f77b]        # 65672 <_fini@@Base+0x12f1e>
   45ef7:	sub    rsp,0x8
   45efb:	mov    r9,r12
   45efe:	mov    rdi,r13
   45f01:	push   rax
   45f02:	xor    eax,eax
   45f04:	call   3a090 <g_str_equal@plt+0x2cdd0>
   45f09:	pop    rax
   45f0a:	pop    rdx
   45f0b:	jmp    45e69 <g_str_equal@plt+0x38ba9>
   45f10:	mov    rdi,QWORD PTR [rbx]
   45f13:	call   526a0 <g_str_equal@plt+0x453e0>
   45f18:	mov    QWORD PTR [rbx],0x0
   45f1f:	mov    rsi,QWORD PTR [rsp]
   45f23:	jmp    45e98 <g_str_equal@plt+0x38bd8>
   45f28:	nop    DWORD PTR [rax+rax*1+0x0]
   45f30:	add    rdx,0x8
   45f34:	mov    rcx,r13
   45f37:	mov    rsi,r12
   45f3a:	mov    rdi,rbp
   45f3d:	call   295d0 <g_str_equal@plt+0x1c310>
   45f42:	jmp    45e69 <g_str_equal@plt+0x38ba9>
   45f47:	call   cd30 <__stack_chk_fail@plt>
   45f4c:	call   c270 <abort@plt>
   45f51:	nop    DWORD PTR [rax+rax*1+0x0]
   45f56:	nop    WORD PTR cs:[rax+rax*1+0x0]
   45f60:	push   rbx
   45f61:	mov    r8,rcx
   45f64:	mov    rbx,rdx
   45f67:	lea    rcx,[rip+0x23b312]        # 281280 <_fini@@Base+0x22eb2c>
   45f6e:	sub    rsp,0x10
   45f72:	mov    rax,QWORD PTR fs:0x28
   45f7b:	mov    QWORD PTR [rsp+0x8],rax
   45f80:	xor    eax,eax
   45f82:	mov    eax,DWORD PTR [rdx]
   45f84:	lea    rdx,[rsp+0x4]
   45f89:	mov    DWORD PTR [rsp+0x4],eax
   45f8d:	call   296a0 <g_str_equal@plt+0x1c3e0>
   45f92:	mov    eax,DWORD PTR [rsp+0x4]
   45f96:	mov    DWORD PTR [rbx],eax
   45f98:	mov    rax,QWORD PTR [rsp+0x8]
   45f9d:	xor    rax,QWORD PTR fs:0x28
   45fa6:	jne    45fae <g_str_equal@plt+0x38cee>
   45fa8:	add    rsp,0x10
   45fac:	pop    rbx
   45fad:	ret    
   45fae:	call   cd30 <__stack_chk_fail@plt>
   45fb3:	nop    DWORD PTR [rax]
   45fb6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   45fc0:	push   rbx
   45fc1:	mov    r8,rcx
   45fc4:	mov    rbx,rdx
   45fc7:	lea    rcx,[rip+0x23b192]        # 281160 <_fini@@Base+0x22ea0c>
   45fce:	sub    rsp,0x10
   45fd2:	mov    rax,QWORD PTR fs:0x28
   45fdb:	mov    QWORD PTR [rsp+0x8],rax
   45fe0:	xor    eax,eax
   45fe2:	mov    eax,DWORD PTR [rdx]
   45fe4:	lea    rdx,[rsp+0x4]
   45fe9:	mov    DWORD PTR [rsp+0x4],eax
   45fed:	call   296a0 <g_str_equal@plt+0x1c3e0>
   45ff2:	mov    eax,DWORD PTR [rsp+0x4]
   45ff6:	mov    DWORD PTR [rbx],eax
   45ff8:	mov    rax,QWORD PTR [rsp+0x8]
   45ffd:	xor    rax,QWORD PTR fs:0x28
   46006:	jne    4600e <g_str_equal@plt+0x38d4e>
   46008:	add    rsp,0x10
   4600c:	pop    rbx
   4600d:	ret    
   4600e:	call   cd30 <__stack_chk_fail@plt>
   46013:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4601d:	nop    DWORD PTR [rax]
   46020:	push   r15
   46022:	push   r14
   46024:	push   r13
   46026:	push   r12
   46028:	mov    r12,rdx
   4602b:	push   rbp
   4602c:	push   rbx
   4602d:	mov    rbx,rdi
   46030:	sub    rsp,0x38
   46034:	lea    rbp,[rsp+0x20]
   46039:	mov    QWORD PTR [rsp+0x8],rcx
   4603e:	mov    ecx,0x10
   46043:	mov    rax,QWORD PTR fs:0x28
   4604c:	mov    QWORD PTR [rsp+0x28],rax
   46051:	xor    eax,eax
   46053:	mov    r8,rbp
   46056:	mov    QWORD PTR [rsp+0x20],0x0
   4605f:	call   280a0 <g_str_equal@plt+0x1ade0>
   46064:	mov    rsi,QWORD PTR [rsp+0x20]
   46069:	test   rsi,rsi
   4606c:	je     460a0 <g_str_equal@plt+0x38de0>
   4606e:	mov    rdi,QWORD PTR [rsp+0x8]
   46073:	call   3a4c0 <g_str_equal@plt+0x2d200>
   46078:	mov    rax,QWORD PTR [rsp+0x28]
   4607d:	xor    rax,QWORD PTR fs:0x28
   46086:	jne    4615d <g_str_equal@plt+0x38e9d>
   4608c:	add    rsp,0x38
   46090:	pop    rbx
   46091:	pop    rbp
   46092:	pop    r12
   46094:	pop    r13
   46096:	pop    r14
   46098:	pop    r15
   4609a:	ret    
   4609b:	nop    DWORD PTR [rax+rax*1+0x0]
   460a0:	mov    r15,QWORD PTR [r12]
   460a4:	lea    r14,[rsp+0x1c]
   460a9:	lea    r13,[rip+0x23b070]        # 281120 <_fini@@Base+0x22e9cc>
   460b0:	test   r15,r15
   460b3:	jne    460d8 <g_str_equal@plt+0x38e18>
   460b5:	jmp    46150 <g_str_equal@plt+0x38e90>
   460ba:	nop    WORD PTR [rax+rax*1+0x0]
   460c0:	mov    rsi,r15
   460c3:	mov    edx,0x10
   460c8:	mov    rdi,rbx
   460cb:	call   281f0 <g_str_equal@plt+0x1af30>
   460d0:	test   rax,rax
   460d3:	mov    r15,rax
   460d6:	je     46148 <g_str_equal@plt+0x38e88>
   460d8:	mov    edx,DWORD PTR [r15+0x8]
   460dc:	xor    esi,esi
   460de:	mov    r8,rbp
   460e1:	mov    rcx,r13
   460e4:	mov    rdi,rbx
   460e7:	mov    DWORD PTR [rsp+0x1c],edx
   460eb:	mov    rdx,r14
   460ee:	call   296a0 <g_str_equal@plt+0x1c3e0>
   460f3:	cmp    QWORD PTR [rsp+0x20],0x0
   460f9:	mov    edx,DWORD PTR [rsp+0x1c]
   460fd:	mov    DWORD PTR [r15+0x8],edx
   46101:	je     460c0 <g_str_equal@plt+0x38e00>
   46103:	mov    rsi,r12
   46106:	mov    rdi,rbx
   46109:	call   28390 <g_str_equal@plt+0x1b0d0>
   4610e:	mov    rsi,QWORD PTR [rsp+0x20]
   46113:	test   rsi,rsi
   46116:	je     4606e <g_str_equal@plt+0x38dae>
   4611c:	mov    rdi,rbx
   4611f:	call   28770 <g_str_equal@plt+0x1b4b0>
   46124:	test   al,al
   46126:	je     46139 <g_str_equal@plt+0x38e79>
   46128:	mov    rdi,QWORD PTR [r12]
   4612c:	call   445f0 <g_str_equal@plt+0x37330>
   46131:	mov    QWORD PTR [r12],0x0
   46139:	mov    rsi,QWORD PTR [rsp+0x20]
   4613e:	jmp    4606e <g_str_equal@plt+0x38dae>
   46143:	nop    DWORD PTR [rax+rax*1+0x0]
   46148:	cmp    QWORD PTR [rsp+0x20],0x0
   4614e:	jne    46103 <g_str_equal@plt+0x38e43>
   46150:	mov    rsi,rbp
   46153:	mov    rdi,rbx
   46156:	call   282e0 <g_str_equal@plt+0x1b020>
   4615b:	jmp    46103 <g_str_equal@plt+0x38e43>
   4615d:	call   cd30 <__stack_chk_fail@plt>
   46162:	nop    DWORD PTR [rax+0x0]
   46166:	nop    WORD PTR cs:[rax+rax*1+0x0]
   46170:	push   r12
   46172:	push   rbp
   46173:	mov    r12,rdx
   46176:	push   rbx
   46177:	mov    rdx,rsi
   4617a:	mov    rbx,rsi
   4617d:	lea    rsi,[rip+0x1a5cf]        # 60753 <_fini@@Base+0xdfff>
   46184:	mov    rbp,rdi
   46187:	sub    rsp,0x10
   4618b:	mov    rax,QWORD PTR fs:0x28
   46194:	mov    QWORD PTR [rsp+0x8],rax
   46199:	xor    eax,eax
   4619b:	mov    QWORD PTR [rsp],0x0
   461a3:	call   286a0 <g_str_equal@plt+0x1b3e0>
   461a8:	test   al,al
   461aa:	je     461c2 <g_str_equal@plt+0x38f02>
   461ac:	lea    rdx,[rbx+0x8]
   461b0:	lea    rsi,[rip+0x1a59c]        # 60753 <_fini@@Base+0xdfff>
   461b7:	mov    rcx,rsp
   461ba:	mov    rdi,rbp
   461bd:	call   46020 <g_str_equal@plt+0x38d60>
   461c2:	mov    rsi,QWORD PTR [rsp]
   461c6:	mov    rdi,r12
   461c9:	call   3a4c0 <g_str_equal@plt+0x2d200>
   461ce:	mov    rax,QWORD PTR [rsp+0x8]
   461d3:	xor    rax,QWORD PTR fs:0x28
   461dc:	jne    461e7 <g_str_equal@plt+0x38f27>
   461de:	add    rsp,0x10
   461e2:	pop    rbx
   461e3:	pop    rbp
   461e4:	pop    r12
   461e6:	ret    
   461e7:	call   cd30 <__stack_chk_fail@plt>
   461ec:	nop    DWORD PTR [rax+0x0]
   461f0:	push   rbx
   461f1:	mov    r8,rcx
   461f4:	mov    rbx,rdx
   461f7:	lea    rcx,[rip+0x23af22]        # 281120 <_fini@@Base+0x22e9cc>
   461fe:	sub    rsp,0x10
   46202:	mov    rax,QWORD PTR fs:0x28
   4620b:	mov    QWORD PTR [rsp+0x8],rax
   46210:	xor    eax,eax
   46212:	mov    eax,DWORD PTR [rdx]
   46214:	lea    rdx,[rsp+0x4]
   46219:	mov    DWORD PTR [rsp+0x4],eax
   4621d:	call   296a0 <g_str_equal@plt+0x1c3e0>
   46222:	mov    eax,DWORD PTR [rsp+0x4]
   46226:	mov    DWORD PTR [rbx],eax
   46228:	mov    rax,QWORD PTR [rsp+0x8]
   4622d:	xor    rax,QWORD PTR fs:0x28
   46236:	jne    4623e <g_str_equal@plt+0x38f7e>
   46238:	add    rsp,0x10
   4623c:	pop    rbx
   4623d:	ret    
   4623e:	call   cd30 <__stack_chk_fail@plt>
   46243:	nop    DWORD PTR [rax]
   46246:	nop    WORD PTR cs:[rax+rax*1+0x0]
   46250:	push   r13
   46252:	push   r12
   46254:	mov    r13,rdx
   46257:	push   rbp
   46258:	push   rbx
   46259:	mov    rdx,rsi
   4625c:	mov    rbx,rsi
   4625f:	lea    rsi,[rip+0x1f7ec]        # 65a52 <_fini@@Base+0x132fe>
   46266:	mov    rbp,rdi
   46269:	sub    rsp,0x18
   4626d:	mov    r12,rsp
   46270:	mov    QWORD PTR [rsp],0x0
   46278:	mov    rcx,r12
   4627b:	mov    rax,QWORD PTR fs:0x28
   46284:	mov    QWORD PTR [rsp+0x8],rax
   46289:	xor    eax,eax
   4628b:	call   28780 <g_str_equal@plt+0x1b4c0>
   46290:	mov    rsi,QWORD PTR [rsp]
   46294:	test   rsi,rsi
   46297:	je     462c0 <g_str_equal@plt+0x39000>
   46299:	mov    rdi,r13
   4629c:	call   3a4c0 <g_str_equal@plt+0x2d200>
   462a1:	mov    rax,QWORD PTR [rsp+0x8]
   462a6:	xor    rax,QWORD PTR fs:0x28
   462af:	jne    462fb <g_str_equal@plt+0x3903b>
   462b1:	add    rsp,0x18
   462b5:	pop    rbx
   462b6:	pop    rbp
   462b7:	pop    r12
   462b9:	pop    r13
   462bb:	ret    
   462bc:	nop    DWORD PTR [rax+0x0]
   462c0:	lea    rsi,[rip+0x1f795]        # 65a5c <_fini@@Base+0x13308>
   462c7:	lea    rdx,[rbx+0x8]
   462cb:	mov    rcx,r12
   462ce:	mov    rdi,rbp
   462d1:	call   28780 <g_str_equal@plt+0x1b4c0>
   462d6:	mov    rsi,QWORD PTR [rsp]
   462da:	test   rsi,rsi
   462dd:	jne    46299 <g_str_equal@plt+0x38fd9>
   462df:	lea    rsi,[rip+0x1f3af]        # 65695 <_fini@@Base+0x12f41>
   462e6:	lea    rdx,[rbx+0x10]
   462ea:	mov    rcx,r12
   462ed:	mov    rdi,rbp
   462f0:	call   28780 <g_str_equal@plt+0x1b4c0>
   462f5:	mov    rsi,QWORD PTR [rsp]
   462f9:	jmp    46299 <g_str_equal@plt+0x38fd9>
   462fb:	call   cd30 <__stack_chk_fail@plt>
   46300:	push   r13
   46302:	push   r12
   46304:	mov    r13,rcx
   46307:	push   rbp
   46308:	push   rbx
   46309:	mov    ecx,0x18
   4630e:	mov    rbp,rdi
   46311:	mov    rbx,rdx
   46314:	sub    rsp,0x18
   46318:	mov    r12,rsp
   4631b:	mov    QWORD PTR [rsp],0x0
   46323:	mov    r8,r12
   46326:	mov    rax,QWORD PTR fs:0x28
   4632f:	mov    QWORD PTR [rsp+0x8],rax
   46334:	xor    eax,eax
   46336:	call   27da0 <g_str_equal@plt+0x1aae0>
   4633b:	mov    rsi,QWORD PTR [rsp]
   4633f:	test   rsi,rsi
   46342:	je     46370 <g_str_equal@plt+0x390b0>
   46344:	mov    rdi,r13
   46347:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4634c:	mov    rax,QWORD PTR [rsp+0x8]
   46351:	xor    rax,QWORD PTR fs:0x28
   4635a:	jne    463cd <g_str_equal@plt+0x3910d>
   4635c:	add    rsp,0x18
   46360:	pop    rbx
   46361:	pop    rbp
   46362:	pop    r12
   46364:	pop    r13
   46366:	ret    
   46367:	nop    WORD PTR [rax+rax*1+0x0]
   46370:	mov    rsi,QWORD PTR [rbx]
   46373:	test   rsi,rsi
   46376:	je     4638a <g_str_equal@plt+0x390ca>
   46378:	mov    rdx,r12
   4637b:	mov    rdi,rbp
   4637e:	call   46250 <g_str_equal@plt+0x38f90>
   46383:	cmp    QWORD PTR [rsp],0x0
   46388:	je     463c0 <g_str_equal@plt+0x39100>
   4638a:	mov    rsi,rbx
   4638d:	mov    rdi,rbp
   46390:	call   28000 <g_str_equal@plt+0x1ad40>
   46395:	mov    rsi,QWORD PTR [rsp]
   46399:	test   rsi,rsi
   4639c:	je     46344 <g_str_equal@plt+0x39084>
   4639e:	mov    rdi,rbp
   463a1:	call   28770 <g_str_equal@plt+0x1b4b0>
   463a6:	test   al,al
   463a8:	je     463b9 <g_str_equal@plt+0x390f9>
   463aa:	mov    rdi,QWORD PTR [rbx]
   463ad:	call   44630 <g_str_equal@plt+0x37370>
   463b2:	mov    QWORD PTR [rbx],0x0
   463b9:	mov    rsi,QWORD PTR [rsp]
   463bd:	jmp    46344 <g_str_equal@plt+0x39084>
   463bf:	nop
   463c0:	mov    rsi,r12
   463c3:	mov    rdi,rbp
   463c6:	call   27f50 <g_str_equal@plt+0x1ac90>
   463cb:	jmp    4638a <g_str_equal@plt+0x390ca>
   463cd:	call   cd30 <__stack_chk_fail@plt>
   463d2:	nop    DWORD PTR [rax+0x0]
   463d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   463e0:	push   r13
   463e2:	push   r12
   463e4:	mov    r13,rdx
   463e7:	push   rbp
   463e8:	push   rbx
   463e9:	mov    rdx,rsi
   463ec:	mov    rbx,rsi
   463ef:	lea    rsi,[rip+0x1f2a5]        # 6569b <_fini@@Base+0x12f47>
   463f6:	mov    rbp,rdi
   463f9:	sub    rsp,0x18
   463fd:	mov    r12,rsp
   46400:	mov    QWORD PTR [rsp],0x0
   46408:	mov    rcx,r12
   4640b:	mov    rax,QWORD PTR fs:0x28
   46414:	mov    QWORD PTR [rsp+0x8],rax
   46419:	xor    eax,eax
   4641b:	call   46300 <g_str_equal@plt+0x39040>
   46420:	mov    rsi,QWORD PTR [rsp]
   46424:	test   rsi,rsi
   46427:	je     46450 <g_str_equal@plt+0x39190>
   46429:	mov    rdi,r13
   4642c:	call   3a4c0 <g_str_equal@plt+0x2d200>
   46431:	mov    rax,QWORD PTR [rsp+0x8]
   46436:	xor    rax,QWORD PTR fs:0x28
   4643f:	jne    4646c <g_str_equal@plt+0x391ac>
   46441:	add    rsp,0x18
   46445:	pop    rbx
   46446:	pop    rbp
   46447:	pop    r12
   46449:	pop    r13
   4644b:	ret    
   4644c:	nop    DWORD PTR [rax+0x0]
   46450:	lea    rsi,[rip+0x1f249]        # 656a0 <_fini@@Base+0x12f4c>
   46457:	lea    rdx,[rbx+0x8]
   4645b:	mov    rcx,r12
   4645e:	mov    rdi,rbp
   46461:	call   29210 <g_str_equal@plt+0x1bf50>
   46466:	mov    rsi,QWORD PTR [rsp]
   4646a:	jmp    46429 <g_str_equal@plt+0x39169>
   4646c:	call   cd30 <__stack_chk_fail@plt>
   46471:	nop    DWORD PTR [rax+rax*1+0x0]
   46476:	nop    WORD PTR cs:[rax+rax*1+0x0]
   46480:	push   r13
   46482:	push   r12
   46484:	mov    r13,rcx
   46487:	push   rbp
   46488:	push   rbx
   46489:	mov    ecx,0x10
   4648e:	mov    rbp,rdi
   46491:	mov    rbx,rdx
   46494:	sub    rsp,0x18
   46498:	mov    r12,rsp
   4649b:	mov    QWORD PTR [rsp],0x0
   464a3:	mov    r8,r12
   464a6:	mov    rax,QWORD PTR fs:0x28
   464af:	mov    QWORD PTR [rsp+0x8],rax
   464b4:	xor    eax,eax
   464b6:	call   27da0 <g_str_equal@plt+0x1aae0>
   464bb:	mov    rsi,QWORD PTR [rsp]
   464bf:	test   rsi,rsi
   464c2:	je     464f0 <g_str_equal@plt+0x39230>
   464c4:	mov    rdi,r13
   464c7:	call   3a4c0 <g_str_equal@plt+0x2d200>
   464cc:	mov    rax,QWORD PTR [rsp+0x8]
   464d1:	xor    rax,QWORD PTR fs:0x28
   464da:	jne    4654d <g_str_equal@plt+0x3928d>
   464dc:	add    rsp,0x18
   464e0:	pop    rbx
   464e1:	pop    rbp
   464e2:	pop    r12
   464e4:	pop    r13
   464e6:	ret    
   464e7:	nop    WORD PTR [rax+rax*1+0x0]
   464f0:	mov    rsi,QWORD PTR [rbx]
   464f3:	test   rsi,rsi
   464f6:	je     4650a <g_str_equal@plt+0x3924a>
   464f8:	mov    rdx,r12
   464fb:	mov    rdi,rbp
   464fe:	call   463e0 <g_str_equal@plt+0x39120>
   46503:	cmp    QWORD PTR [rsp],0x0
   46508:	je     46540 <g_str_equal@plt+0x39280>
   4650a:	mov    rsi,rbx
   4650d:	mov    rdi,rbp
   46510:	call   28000 <g_str_equal@plt+0x1ad40>
   46515:	mov    rsi,QWORD PTR [rsp]
   46519:	test   rsi,rsi
   4651c:	je     464c4 <g_str_equal@plt+0x39204>
   4651e:	mov    rdi,rbp
   46521:	call   28770 <g_str_equal@plt+0x1b4b0>
   46526:	test   al,al
   46528:	je     46539 <g_str_equal@plt+0x39279>
   4652a:	mov    rdi,QWORD PTR [rbx]
   4652d:	call   44670 <g_str_equal@plt+0x373b0>
   46532:	mov    QWORD PTR [rbx],0x0
   46539:	mov    rsi,QWORD PTR [rsp]
   4653d:	jmp    464c4 <g_str_equal@plt+0x39204>
   4653f:	nop
   46540:	mov    rsi,r12
   46543:	mov    rdi,rbp
   46546:	call   27f50 <g_str_equal@plt+0x1ac90>
   4654b:	jmp    4650a <g_str_equal@plt+0x3924a>
   4654d:	call   cd30 <__stack_chk_fail@plt>
   46552:	nop    DWORD PTR [rax+0x0]
   46556:	nop    WORD PTR cs:[rax+rax*1+0x0]
   46560:	push   rbx
   46561:	mov    rbx,rdx
   46564:	mov    rdx,rsi
   46567:	lea    rsi,[rip+0x186b7]        # 5ec25 <_fini@@Base+0xc4d1>
   4656e:	sub    rsp,0x10
   46572:	mov    rcx,rsp
   46575:	mov    QWORD PTR [rsp],0x0
   4657d:	mov    rax,QWORD PTR fs:0x28
   46586:	mov    QWORD PTR [rsp+0x8],rax
   4658b:	xor    eax,eax
   4658d:	call   29210 <g_str_equal@plt+0x1bf50>
   46592:	mov    rsi,QWORD PTR [rsp]
   46596:	mov    rdi,rbx
   46599:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4659e:	mov    rax,QWORD PTR [rsp+0x8]
   465a3:	xor    rax,QWORD PTR fs:0x28
   465ac:	jne    465b4 <g_str_equal@plt+0x392f4>
   465ae:	add    rsp,0x10
   465b2:	pop    rbx
   465b3:	ret    
   465b4:	call   cd30 <__stack_chk_fail@plt>
   465b9:	nop    DWORD PTR [rax+0x0]
   465c0:	push   r13
   465c2:	push   r12
   465c4:	mov    r13,rcx
   465c7:	push   rbp
   465c8:	push   rbx
   465c9:	mov    ecx,0x8
   465ce:	mov    rbp,rdi
   465d1:	mov    rbx,rdx
   465d4:	sub    rsp,0x18
   465d8:	mov    r12,rsp
   465db:	mov    QWORD PTR [rsp],0x0
   465e3:	mov    r8,r12
   465e6:	mov    rax,QWORD PTR fs:0x28
   465ef:	mov    QWORD PTR [rsp+0x8],rax
   465f4:	xor    eax,eax
   465f6:	call   27da0 <g_str_equal@plt+0x1aae0>
   465fb:	mov    rsi,QWORD PTR [rsp]
   465ff:	test   rsi,rsi
   46602:	je     46630 <g_str_equal@plt+0x39370>
   46604:	mov    rdi,r13
   46607:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4660c:	mov    rax,QWORD PTR [rsp+0x8]
   46611:	xor    rax,QWORD PTR fs:0x28
   4661a:	jne    4668d <g_str_equal@plt+0x393cd>
   4661c:	add    rsp,0x18
   46620:	pop    rbx
   46621:	pop    rbp
   46622:	pop    r12
   46624:	pop    r13
   46626:	ret    
   46627:	nop    WORD PTR [rax+rax*1+0x0]
   46630:	mov    rsi,QWORD PTR [rbx]
   46633:	test   rsi,rsi
   46636:	je     4664a <g_str_equal@plt+0x3938a>
   46638:	mov    rdx,r12
   4663b:	mov    rdi,rbp
   4663e:	call   46560 <g_str_equal@plt+0x392a0>
   46643:	cmp    QWORD PTR [rsp],0x0
   46648:	je     46680 <g_str_equal@plt+0x393c0>
   4664a:	mov    rsi,rbx
   4664d:	mov    rdi,rbp
   46650:	call   28000 <g_str_equal@plt+0x1ad40>
   46655:	mov    rsi,QWORD PTR [rsp]
   46659:	test   rsi,rsi
   4665c:	je     46604 <g_str_equal@plt+0x39344>
   4665e:	mov    rdi,rbp
   46661:	call   28770 <g_str_equal@plt+0x1b4b0>
   46666:	test   al,al
   46668:	je     46679 <g_str_equal@plt+0x393b9>
   4666a:	mov    rdi,QWORD PTR [rbx]
   4666d:	call   446b0 <g_str_equal@plt+0x373f0>
   46672:	mov    QWORD PTR [rbx],0x0
   46679:	mov    rsi,QWORD PTR [rsp]
   4667d:	jmp    46604 <g_str_equal@plt+0x39344>
   4667f:	nop
   46680:	mov    rsi,r12
   46683:	mov    rdi,rbp
   46686:	call   27f50 <g_str_equal@plt+0x1ac90>
   4668b:	jmp    4664a <g_str_equal@plt+0x3938a>
   4668d:	call   cd30 <__stack_chk_fail@plt>
   46692:	nop    DWORD PTR [rax+0x0]
   46696:	nop    WORD PTR cs:[rax+rax*1+0x0]
   466a0:	push   r14
   466a2:	push   r13
   466a4:	mov    r14,rcx
   466a7:	push   r12
   466a9:	push   rbp
   466aa:	mov    ecx,0x10
   466af:	push   rbx
   466b0:	mov    rbp,rdi
   466b3:	mov    r13,rdx
   466b6:	sub    rsp,0x10
   466ba:	mov    r12,rsp
   466bd:	mov    QWORD PTR [rsp],0x0
   466c5:	mov    r8,r12
   466c8:	mov    rax,QWORD PTR fs:0x28
   466d1:	mov    QWORD PTR [rsp+0x8],rax
   466d6:	xor    eax,eax
   466d8:	call   280a0 <g_str_equal@plt+0x1ade0>
   466dd:	mov    rsi,QWORD PTR [rsp]
   466e1:	test   rsi,rsi
   466e4:	je     46710 <g_str_equal@plt+0x39450>
   466e6:	mov    rdi,r14
   466e9:	call   3a4c0 <g_str_equal@plt+0x2d200>
   466ee:	mov    rax,QWORD PTR [rsp+0x8]
   466f3:	xor    rax,QWORD PTR fs:0x28
   466fc:	jne    467a4 <g_str_equal@plt+0x394e4>
   46702:	add    rsp,0x10
   46706:	pop    rbx
   46707:	pop    rbp
   46708:	pop    r12
   4670a:	pop    r13
   4670c:	pop    r14
   4670e:	ret    
   4670f:	nop
   46710:	mov    rbx,QWORD PTR [r13+0x0]
   46714:	test   rbx,rbx
   46717:	jne    46738 <g_str_equal@plt+0x39478>
   46719:	jmp    46797 <g_str_equal@plt+0x394d7>
   4671b:	nop    DWORD PTR [rax+rax*1+0x0]
   46720:	mov    rsi,rbx
   46723:	mov    edx,0x10
   46728:	mov    rdi,rbp
   4672b:	call   281f0 <g_str_equal@plt+0x1af30>
   46730:	test   rax,rax
   46733:	mov    rbx,rax
   46736:	je     46790 <g_str_equal@plt+0x394d0>
   46738:	lea    rdx,[rbx+0x8]
   4673c:	xor    esi,esi
   4673e:	mov    rcx,r12
   46741:	mov    rdi,rbp
   46744:	call   465c0 <g_str_equal@plt+0x39300>
   46749:	cmp    QWORD PTR [rsp],0x0
   4674e:	je     46720 <g_str_equal@plt+0x39460>
   46750:	mov    rsi,r13
   46753:	mov    rdi,rbp
   46756:	call   28390 <g_str_equal@plt+0x1b0d0>
   4675b:	mov    rsi,QWORD PTR [rsp]
   4675f:	test   rsi,rsi
   46762:	je     466e6 <g_str_equal@plt+0x39426>
   46764:	mov    rdi,rbp
   46767:	call   28770 <g_str_equal@plt+0x1b4b0>
   4676c:	test   al,al
   4676e:	je     46781 <g_str_equal@plt+0x394c1>
   46770:	mov    rdi,QWORD PTR [r13+0x0]
   46774:	call   446f0 <g_str_equal@plt+0x37430>
   46779:	mov    QWORD PTR [r13+0x0],0x0
   46781:	mov    rsi,QWORD PTR [rsp]
   46785:	jmp    466e6 <g_str_equal@plt+0x39426>
   4678a:	nop    WORD PTR [rax+rax*1+0x0]
   46790:	cmp    QWORD PTR [rsp],0x0
   46795:	jne    46750 <g_str_equal@plt+0x39490>
   46797:	mov    rsi,r12
   4679a:	mov    rdi,rbp
   4679d:	call   282e0 <g_str_equal@plt+0x1b020>
   467a2:	jmp    46750 <g_str_equal@plt+0x39490>
   467a4:	call   cd30 <__stack_chk_fail@plt>
   467a9:	nop    DWORD PTR [rax+0x0]
   467b0:	push   rbx
   467b1:	mov    r8,rcx
   467b4:	mov    rbx,rdx
   467b7:	lea    rcx,[rip+0x23a922]        # 2810e0 <_fini@@Base+0x22e98c>
   467be:	sub    rsp,0x10
   467c2:	mov    rax,QWORD PTR fs:0x28
   467cb:	mov    QWORD PTR [rsp+0x8],rax
   467d0:	xor    eax,eax
   467d2:	mov    eax,DWORD PTR [rdx]
   467d4:	lea    rdx,[rsp+0x4]
   467d9:	mov    DWORD PTR [rsp+0x4],eax
   467dd:	call   296a0 <g_str_equal@plt+0x1c3e0>
   467e2:	mov    eax,DWORD PTR [rsp+0x4]
   467e6:	mov    DWORD PTR [rbx],eax
   467e8:	mov    rax,QWORD PTR [rsp+0x8]
   467ed:	xor    rax,QWORD PTR fs:0x28
   467f6:	jne    467fe <g_str_equal@plt+0x3953e>
   467f8:	add    rsp,0x10
   467fc:	pop    rbx
   467fd:	ret    
   467fe:	call   cd30 <__stack_chk_fail@plt>
   46803:	nop    DWORD PTR [rax]
   46806:	nop    WORD PTR cs:[rax+rax*1+0x0]
   46810:	push   r13
   46812:	push   r12
   46814:	mov    r13,rdx
   46817:	push   rbp
   46818:	push   rbx
   46819:	mov    rdx,rsi
   4681c:	mov    rbx,rsi
   4681f:	lea    rsi,[rip+0x16399]        # 5cbbf <_fini@@Base+0xa46b>
   46826:	mov    rbp,rdi
   46829:	sub    rsp,0x18
   4682d:	mov    r12,rsp
   46830:	mov    QWORD PTR [rsp],0x0
   46838:	mov    rcx,r12
   4683b:	mov    rax,QWORD PTR fs:0x28
   46844:	mov    QWORD PTR [rsp+0x8],rax
   46849:	xor    eax,eax
   4684b:	call   29210 <g_str_equal@plt+0x1bf50>
   46850:	mov    rsi,QWORD PTR [rsp]
   46854:	test   rsi,rsi
   46857:	je     46880 <g_str_equal@plt+0x395c0>
   46859:	mov    rdi,r13
   4685c:	call   3a4c0 <g_str_equal@plt+0x2d200>
   46861:	mov    rax,QWORD PTR [rsp+0x8]
   46866:	xor    rax,QWORD PTR fs:0x28
   4686f:	jne    4690b <g_str_equal@plt+0x3964b>
   46875:	add    rsp,0x18
   46879:	pop    rbx
   4687a:	pop    rbp
   4687b:	pop    r12
   4687d:	pop    r13
   4687f:	ret    
   46880:	lea    rsi,[rip+0x1ee21]        # 656a8 <_fini@@Base+0x12f54>
   46887:	lea    rdx,[rbx+0x8]
   4688b:	mov    rcx,r12
   4688e:	mov    rdi,rbp
   46891:	call   29210 <g_str_equal@plt+0x1bf50>
   46896:	mov    rsi,QWORD PTR [rsp]
   4689a:	test   rsi,rsi
   4689d:	jne    46859 <g_str_equal@plt+0x39599>
   4689f:	lea    rdx,[rbx+0x10]
   468a3:	lea    rsi,[rip+0x1ee05]        # 656af <_fini@@Base+0x12f5b>
   468aa:	mov    rdi,rbp
   468ad:	call   286a0 <g_str_equal@plt+0x1b3e0>
   468b2:	test   al,al
   468b4:	je     468d5 <g_str_equal@plt+0x39615>
   468b6:	lea    rsi,[rip+0x1edf2]        # 656af <_fini@@Base+0x12f5b>
   468bd:	lea    rdx,[rbx+0x11]
   468c1:	mov    rcx,r12
   468c4:	mov    rdi,rbp
   468c7:	call   29120 <g_str_equal@plt+0x1be60>
   468cc:	mov    rsi,QWORD PTR [rsp]
   468d0:	test   rsi,rsi
   468d3:	jne    46859 <g_str_equal@plt+0x39599>
   468d5:	lea    rdx,[rbx+0x12]
   468d9:	lea    rsi,[rip+0x1534d]        # 5bc2d <_fini@@Base+0x94d9>
   468e0:	mov    rdi,rbp
   468e3:	call   286a0 <g_str_equal@plt+0x1b3e0>
   468e8:	test   al,al
   468ea:	je     46902 <g_str_equal@plt+0x39642>
   468ec:	lea    rdx,[rbx+0x13]
   468f0:	lea    rsi,[rip+0x15336]        # 5bc2d <_fini@@Base+0x94d9>
   468f7:	mov    rcx,r12
   468fa:	mov    rdi,rbp
   468fd:	call   29120 <g_str_equal@plt+0x1be60>
   46902:	mov    rsi,QWORD PTR [rsp]
   46906:	jmp    46859 <g_str_equal@plt+0x39599>
   4690b:	call   cd30 <__stack_chk_fail@plt>
   46910:	push   r12
   46912:	push   rbp
   46913:	mov    r12,rdx
   46916:	push   rbx
   46917:	mov    rdx,rsi
   4691a:	mov    rbx,rsi
   4691d:	lea    rsi,[rip+0x18301]        # 5ec25 <_fini@@Base+0xc4d1>
   46924:	mov    rbp,rdi
   46927:	sub    rsp,0x10
   4692b:	mov    rax,QWORD PTR fs:0x28
   46934:	mov    QWORD PTR [rsp+0x8],rax
   46939:	xor    eax,eax
   4693b:	mov    QWORD PTR [rsp],0x0
   46943:	call   286a0 <g_str_equal@plt+0x1b3e0>
   46948:	test   al,al
   4694a:	je     46962 <g_str_equal@plt+0x396a2>
   4694c:	lea    rdx,[rbx+0x8]
   46950:	lea    rsi,[rip+0x182ce]        # 5ec25 <_fini@@Base+0xc4d1>
   46957:	mov    rcx,rsp
   4695a:	mov    rdi,rbp
   4695d:	call   29210 <g_str_equal@plt+0x1bf50>
   46962:	mov    rsi,QWORD PTR [rsp]
   46966:	mov    rdi,r12
   46969:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4696e:	mov    rax,QWORD PTR [rsp+0x8]
   46973:	xor    rax,QWORD PTR fs:0x28
   4697c:	jne    46987 <g_str_equal@plt+0x396c7>
   4697e:	add    rsp,0x10
   46982:	pop    rbx
   46983:	pop    rbp
   46984:	pop    r12
   46986:	ret    
   46987:	call   cd30 <__stack_chk_fail@plt>
   4698c:	nop    DWORD PTR [rax+0x0]
   46990:	push   r13
   46992:	push   r12
   46994:	mov    r13,rcx
   46997:	push   rbp
   46998:	push   rbx
   46999:	mov    ecx,0x10
   4699e:	mov    rbp,rdi
   469a1:	mov    rbx,rdx
   469a4:	sub    rsp,0x18
   469a8:	mov    r12,rsp
   469ab:	mov    QWORD PTR [rsp],0x0
   469b3:	mov    r8,r12
   469b6:	mov    rax,QWORD PTR fs:0x28
   469bf:	mov    QWORD PTR [rsp+0x8],rax
   469c4:	xor    eax,eax
   469c6:	call   27da0 <g_str_equal@plt+0x1aae0>
   469cb:	mov    rsi,QWORD PTR [rsp]
   469cf:	test   rsi,rsi
   469d2:	je     46a00 <g_str_equal@plt+0x39740>
   469d4:	mov    rdi,r13
   469d7:	call   3a4c0 <g_str_equal@plt+0x2d200>
   469dc:	mov    rax,QWORD PTR [rsp+0x8]
   469e1:	xor    rax,QWORD PTR fs:0x28
   469ea:	jne    46a5d <g_str_equal@plt+0x3979d>
   469ec:	add    rsp,0x18
   469f0:	pop    rbx
   469f1:	pop    rbp
   469f2:	pop    r12
   469f4:	pop    r13
   469f6:	ret    
   469f7:	nop    WORD PTR [rax+rax*1+0x0]
   46a00:	mov    rsi,QWORD PTR [rbx]
   46a03:	test   rsi,rsi
   46a06:	je     46a1a <g_str_equal@plt+0x3975a>
   46a08:	mov    rdx,r12
   46a0b:	mov    rdi,rbp
   46a0e:	call   46910 <g_str_equal@plt+0x39650>
   46a13:	cmp    QWORD PTR [rsp],0x0
   46a18:	je     46a50 <g_str_equal@plt+0x39790>
   46a1a:	mov    rsi,rbx
   46a1d:	mov    rdi,rbp
   46a20:	call   28000 <g_str_equal@plt+0x1ad40>
   46a25:	mov    rsi,QWORD PTR [rsp]
   46a29:	test   rsi,rsi
   46a2c:	je     469d4 <g_str_equal@plt+0x39714>
   46a2e:	mov    rdi,rbp
   46a31:	call   28770 <g_str_equal@plt+0x1b4b0>
   46a36:	test   al,al
   46a38:	je     46a49 <g_str_equal@plt+0x39789>
   46a3a:	mov    rdi,QWORD PTR [rbx]
   46a3d:	call   44730 <g_str_equal@plt+0x37470>
   46a42:	mov    QWORD PTR [rbx],0x0
   46a49:	mov    rsi,QWORD PTR [rsp]
   46a4d:	jmp    469d4 <g_str_equal@plt+0x39714>
   46a4f:	nop
   46a50:	mov    rsi,r12
   46a53:	mov    rdi,rbp
   46a56:	call   27f50 <g_str_equal@plt+0x1ac90>
   46a5b:	jmp    46a1a <g_str_equal@plt+0x3975a>
   46a5d:	call   cd30 <__stack_chk_fail@plt>
   46a62:	nop    DWORD PTR [rax+0x0]
   46a66:	nop    WORD PTR cs:[rax+rax*1+0x0]
   46a70:	push   r13
   46a72:	push   r12
   46a74:	mov    r13,rdx
   46a77:	push   rbp
   46a78:	push   rbx
   46a79:	mov    rdx,rsi
   46a7c:	mov    rbx,rsi
   46a7f:	lea    rsi,[rip+0x19e49]        # 608cf <_fini@@Base+0xe17b>
   46a86:	mov    rbp,rdi
   46a89:	sub    rsp,0x18
   46a8d:	mov    r12,rsp
   46a90:	mov    QWORD PTR [rsp],0x0
   46a98:	mov    rcx,r12
   46a9b:	mov    rax,QWORD PTR fs:0x28
   46aa4:	mov    QWORD PTR [rsp+0x8],rax
   46aa9:	xor    eax,eax
   46aab:	call   29120 <g_str_equal@plt+0x1be60>
   46ab0:	mov    rsi,QWORD PTR [rsp]
   46ab4:	test   rsi,rsi
   46ab7:	je     46ae0 <g_str_equal@plt+0x39820>
   46ab9:	mov    rdi,r13
   46abc:	call   3a4c0 <g_str_equal@plt+0x2d200>
   46ac1:	mov    rax,QWORD PTR [rsp+0x8]
   46ac6:	xor    rax,QWORD PTR fs:0x28
   46acf:	jne    46afc <g_str_equal@plt+0x3983c>
   46ad1:	add    rsp,0x18
   46ad5:	pop    rbx
   46ad6:	pop    rbp
   46ad7:	pop    r12
   46ad9:	pop    r13
   46adb:	ret    
   46adc:	nop    DWORD PTR [rax+0x0]
   46ae0:	lea    rsi,[rip+0x1ebd1]        # 656b8 <_fini@@Base+0x12f64>
   46ae7:	lea    rdx,[rbx+0x1]
   46aeb:	mov    rcx,r12
   46aee:	mov    rdi,rbp
   46af1:	call   29120 <g_str_equal@plt+0x1be60>
   46af6:	mov    rsi,QWORD PTR [rsp]
   46afa:	jmp    46ab9 <g_str_equal@plt+0x397f9>
   46afc:	call   cd30 <__stack_chk_fail@plt>
   46b01:	nop    DWORD PTR [rax+rax*1+0x0]
   46b06:	nop    WORD PTR cs:[rax+rax*1+0x0]
   46b10:	push   r13
   46b12:	push   r12
   46b14:	mov    r13,rcx
   46b17:	push   rbp
   46b18:	push   rbx
   46b19:	mov    ecx,0x2
   46b1e:	mov    rbp,rdi
   46b21:	mov    rbx,rdx
   46b24:	sub    rsp,0x18
   46b28:	mov    r12,rsp
   46b2b:	mov    QWORD PTR [rsp],0x0
   46b33:	mov    r8,r12
   46b36:	mov    rax,QWORD PTR fs:0x28
   46b3f:	mov    QWORD PTR [rsp+0x8],rax
   46b44:	xor    eax,eax
   46b46:	call   27da0 <g_str_equal@plt+0x1aae0>
   46b4b:	mov    rsi,QWORD PTR [rsp]
   46b4f:	test   rsi,rsi
   46b52:	je     46b80 <g_str_equal@plt+0x398c0>
   46b54:	mov    rdi,r13
   46b57:	call   3a4c0 <g_str_equal@plt+0x2d200>
   46b5c:	mov    rax,QWORD PTR [rsp+0x8]
   46b61:	xor    rax,QWORD PTR fs:0x28
   46b6a:	jne    46bdd <g_str_equal@plt+0x3991d>
   46b6c:	add    rsp,0x18
   46b70:	pop    rbx
   46b71:	pop    rbp
   46b72:	pop    r12
   46b74:	pop    r13
   46b76:	ret    
   46b77:	nop    WORD PTR [rax+rax*1+0x0]
   46b80:	mov    rsi,QWORD PTR [rbx]
   46b83:	test   rsi,rsi
   46b86:	je     46b9a <g_str_equal@plt+0x398da>
   46b88:	mov    rdx,r12
   46b8b:	mov    rdi,rbp
   46b8e:	call   46a70 <g_str_equal@plt+0x397b0>
   46b93:	cmp    QWORD PTR [rsp],0x0
   46b98:	je     46bd0 <g_str_equal@plt+0x39910>
   46b9a:	mov    rsi,rbx
   46b9d:	mov    rdi,rbp
   46ba0:	call   28000 <g_str_equal@plt+0x1ad40>
   46ba5:	mov    rsi,QWORD PTR [rsp]
   46ba9:	test   rsi,rsi
   46bac:	je     46b54 <g_str_equal@plt+0x39894>
   46bae:	mov    rdi,rbp
   46bb1:	call   28770 <g_str_equal@plt+0x1b4b0>
   46bb6:	test   al,al
   46bb8:	je     46bc9 <g_str_equal@plt+0x39909>
   46bba:	mov    rdi,QWORD PTR [rbx]
   46bbd:	call   44770 <g_str_equal@plt+0x374b0>
   46bc2:	mov    QWORD PTR [rbx],0x0
   46bc9:	mov    rsi,QWORD PTR [rsp]
   46bcd:	jmp    46b54 <g_str_equal@plt+0x39894>
   46bcf:	nop
   46bd0:	mov    rsi,r12
   46bd3:	mov    rdi,rbp
   46bd6:	call   27f50 <g_str_equal@plt+0x1ac90>
   46bdb:	jmp    46b9a <g_str_equal@plt+0x398da>
   46bdd:	call   cd30 <__stack_chk_fail@plt>
   46be2:	nop    DWORD PTR [rax+0x0]
   46be6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   46bf0:	push   rbx
   46bf1:	mov    rbx,rdx
   46bf4:	mov    rdx,rsi
   46bf7:	lea    rsi,[rip+0x1eac2]        # 656c0 <_fini@@Base+0x12f6c>
   46bfe:	sub    rsp,0x10
   46c02:	mov    rcx,rsp
   46c05:	mov    QWORD PTR [rsp],0x0
   46c0d:	mov    rax,QWORD PTR fs:0x28
   46c16:	mov    QWORD PTR [rsp+0x8],rax
   46c1b:	xor    eax,eax
   46c1d:	call   29210 <g_str_equal@plt+0x1bf50>
   46c22:	mov    rsi,QWORD PTR [rsp]
   46c26:	mov    rdi,rbx
   46c29:	call   3a4c0 <g_str_equal@plt+0x2d200>
   46c2e:	mov    rax,QWORD PTR [rsp+0x8]
   46c33:	xor    rax,QWORD PTR fs:0x28
   46c3c:	jne    46c44 <g_str_equal@plt+0x39984>
   46c3e:	add    rsp,0x10
   46c42:	pop    rbx
   46c43:	ret    
   46c44:	call   cd30 <__stack_chk_fail@plt>
   46c49:	nop    DWORD PTR [rax+0x0]
   46c50:	push   r13
   46c52:	push   r12
   46c54:	mov    r13,rcx
   46c57:	push   rbp
   46c58:	push   rbx
   46c59:	mov    ecx,0x8
   46c5e:	mov    rbp,rdi
   46c61:	mov    rbx,rdx
   46c64:	sub    rsp,0x18
   46c68:	mov    r12,rsp
   46c6b:	mov    QWORD PTR [rsp],0x0
   46c73:	mov    r8,r12
   46c76:	mov    rax,QWORD PTR fs:0x28
   46c7f:	mov    QWORD PTR [rsp+0x8],rax
   46c84:	xor    eax,eax
   46c86:	call   27da0 <g_str_equal@plt+0x1aae0>
   46c8b:	mov    rsi,QWORD PTR [rsp]
   46c8f:	test   rsi,rsi
   46c92:	je     46cc0 <g_str_equal@plt+0x39a00>
   46c94:	mov    rdi,r13
   46c97:	call   3a4c0 <g_str_equal@plt+0x2d200>
   46c9c:	mov    rax,QWORD PTR [rsp+0x8]
   46ca1:	xor    rax,QWORD PTR fs:0x28
   46caa:	jne    46d1d <g_str_equal@plt+0x39a5d>
   46cac:	add    rsp,0x18
   46cb0:	pop    rbx
   46cb1:	pop    rbp
   46cb2:	pop    r12
   46cb4:	pop    r13
   46cb6:	ret    
   46cb7:	nop    WORD PTR [rax+rax*1+0x0]
   46cc0:	mov    rsi,QWORD PTR [rbx]
   46cc3:	test   rsi,rsi
   46cc6:	je     46cda <g_str_equal@plt+0x39a1a>
   46cc8:	mov    rdx,r12
   46ccb:	mov    rdi,rbp
   46cce:	call   46bf0 <g_str_equal@plt+0x39930>
   46cd3:	cmp    QWORD PTR [rsp],0x0
   46cd8:	je     46d10 <g_str_equal@plt+0x39a50>
   46cda:	mov    rsi,rbx
   46cdd:	mov    rdi,rbp
   46ce0:	call   28000 <g_str_equal@plt+0x1ad40>
   46ce5:	mov    rsi,QWORD PTR [rsp]
   46ce9:	test   rsi,rsi
   46cec:	je     46c94 <g_str_equal@plt+0x399d4>
   46cee:	mov    rdi,rbp
   46cf1:	call   28770 <g_str_equal@plt+0x1b4b0>
   46cf6:	test   al,al
   46cf8:	je     46d09 <g_str_equal@plt+0x39a49>
   46cfa:	mov    rdi,QWORD PTR [rbx]
   46cfd:	call   447b0 <g_str_equal@plt+0x374f0>
   46d02:	mov    QWORD PTR [rbx],0x0
   46d09:	mov    rsi,QWORD PTR [rsp]
   46d0d:	jmp    46c94 <g_str_equal@plt+0x399d4>
   46d0f:	nop
   46d10:	mov    rsi,r12
   46d13:	mov    rdi,rbp
   46d16:	call   27f50 <g_str_equal@plt+0x1ac90>
   46d1b:	jmp    46cda <g_str_equal@plt+0x39a1a>
   46d1d:	call   cd30 <__stack_chk_fail@plt>
   46d22:	nop    DWORD PTR [rax+0x0]
   46d26:	nop    WORD PTR cs:[rax+rax*1+0x0]
   46d30:	push   rbx
   46d31:	mov    rbx,rdx
   46d34:	mov    rdx,rsi
   46d37:	lea    rsi,[rip+0x17ee7]        # 5ec25 <_fini@@Base+0xc4d1>
   46d3e:	sub    rsp,0x10
   46d42:	mov    rcx,rsp
   46d45:	mov    QWORD PTR [rsp],0x0
   46d4d:	mov    rax,QWORD PTR fs:0x28
   46d56:	mov    QWORD PTR [rsp+0x8],rax
   46d5b:	xor    eax,eax
   46d5d:	call   29210 <g_str_equal@plt+0x1bf50>
   46d62:	mov    rsi,QWORD PTR [rsp]
   46d66:	mov    rdi,rbx
   46d69:	call   3a4c0 <g_str_equal@plt+0x2d200>
   46d6e:	mov    rax,QWORD PTR [rsp+0x8]
   46d73:	xor    rax,QWORD PTR fs:0x28
   46d7c:	jne    46d84 <g_str_equal@plt+0x39ac4>
   46d7e:	add    rsp,0x10
   46d82:	pop    rbx
   46d83:	ret    
   46d84:	call   cd30 <__stack_chk_fail@plt>
   46d89:	nop    DWORD PTR [rax+0x0]
   46d90:	push   r13
   46d92:	push   r12
   46d94:	mov    r13,rcx
   46d97:	push   rbp
   46d98:	push   rbx
   46d99:	mov    ecx,0x8
   46d9e:	mov    rbp,rdi
   46da1:	mov    rbx,rdx
   46da4:	sub    rsp,0x18
   46da8:	mov    r12,rsp
   46dab:	mov    QWORD PTR [rsp],0x0
   46db3:	mov    r8,r12
   46db6:	mov    rax,QWORD PTR fs:0x28
   46dbf:	mov    QWORD PTR [rsp+0x8],rax
   46dc4:	xor    eax,eax
   46dc6:	call   27da0 <g_str_equal@plt+0x1aae0>
   46dcb:	mov    rsi,QWORD PTR [rsp]
   46dcf:	test   rsi,rsi
   46dd2:	je     46e00 <g_str_equal@plt+0x39b40>
   46dd4:	mov    rdi,r13
   46dd7:	call   3a4c0 <g_str_equal@plt+0x2d200>
   46ddc:	mov    rax,QWORD PTR [rsp+0x8]
   46de1:	xor    rax,QWORD PTR fs:0x28
   46dea:	jne    46e5d <g_str_equal@plt+0x39b9d>
   46dec:	add    rsp,0x18
   46df0:	pop    rbx
   46df1:	pop    rbp
   46df2:	pop    r12
   46df4:	pop    r13
   46df6:	ret    
   46df7:	nop    WORD PTR [rax+rax*1+0x0]
   46e00:	mov    rsi,QWORD PTR [rbx]
   46e03:	test   rsi,rsi
   46e06:	je     46e1a <g_str_equal@plt+0x39b5a>
   46e08:	mov    rdx,r12
   46e0b:	mov    rdi,rbp
   46e0e:	call   46d30 <g_str_equal@plt+0x39a70>
   46e13:	cmp    QWORD PTR [rsp],0x0
   46e18:	je     46e50 <g_str_equal@plt+0x39b90>
   46e1a:	mov    rsi,rbx
   46e1d:	mov    rdi,rbp
   46e20:	call   28000 <g_str_equal@plt+0x1ad40>
   46e25:	mov    rsi,QWORD PTR [rsp]
   46e29:	test   rsi,rsi
   46e2c:	je     46dd4 <g_str_equal@plt+0x39b14>
   46e2e:	mov    rdi,rbp
   46e31:	call   28770 <g_str_equal@plt+0x1b4b0>
   46e36:	test   al,al
   46e38:	je     46e49 <g_str_equal@plt+0x39b89>
   46e3a:	mov    rdi,QWORD PTR [rbx]
   46e3d:	call   447f0 <g_str_equal@plt+0x37530>
   46e42:	mov    QWORD PTR [rbx],0x0
   46e49:	mov    rsi,QWORD PTR [rsp]
   46e4d:	jmp    46dd4 <g_str_equal@plt+0x39b14>
   46e4f:	nop
   46e50:	mov    rsi,r12
   46e53:	mov    rdi,rbp
   46e56:	call   27f50 <g_str_equal@plt+0x1ac90>
   46e5b:	jmp    46e1a <g_str_equal@plt+0x39b5a>
   46e5d:	call   cd30 <__stack_chk_fail@plt>
   46e62:	nop    DWORD PTR [rax+0x0]
   46e66:	nop    WORD PTR cs:[rax+rax*1+0x0]
   46e70:	push   r14
   46e72:	push   r13
   46e74:	mov    r14,rcx
   46e77:	push   r12
   46e79:	push   rbp
   46e7a:	mov    ecx,0x10
   46e7f:	push   rbx
   46e80:	mov    rbp,rdi
   46e83:	mov    r13,rdx
   46e86:	sub    rsp,0x10
   46e8a:	mov    r12,rsp
   46e8d:	mov    QWORD PTR [rsp],0x0
   46e95:	mov    r8,r12
   46e98:	mov    rax,QWORD PTR fs:0x28
   46ea1:	mov    QWORD PTR [rsp+0x8],rax
   46ea6:	xor    eax,eax
   46ea8:	call   280a0 <g_str_equal@plt+0x1ade0>
   46ead:	mov    rsi,QWORD PTR [rsp]
   46eb1:	test   rsi,rsi
   46eb4:	je     46ee0 <g_str_equal@plt+0x39c20>
   46eb6:	mov    rdi,r14
   46eb9:	call   3a4c0 <g_str_equal@plt+0x2d200>
   46ebe:	mov    rax,QWORD PTR [rsp+0x8]
   46ec3:	xor    rax,QWORD PTR fs:0x28
   46ecc:	jne    46f74 <g_str_equal@plt+0x39cb4>
   46ed2:	add    rsp,0x10
   46ed6:	pop    rbx
   46ed7:	pop    rbp
   46ed8:	pop    r12
   46eda:	pop    r13
   46edc:	pop    r14
   46ede:	ret    
   46edf:	nop
   46ee0:	mov    rbx,QWORD PTR [r13+0x0]
   46ee4:	test   rbx,rbx
   46ee7:	jne    46f08 <g_str_equal@plt+0x39c48>
   46ee9:	jmp    46f67 <g_str_equal@plt+0x39ca7>
   46eeb:	nop    DWORD PTR [rax+rax*1+0x0]
   46ef0:	mov    rsi,rbx
   46ef3:	mov    edx,0x10
   46ef8:	mov    rdi,rbp
   46efb:	call   281f0 <g_str_equal@plt+0x1af30>
   46f00:	test   rax,rax
   46f03:	mov    rbx,rax
   46f06:	je     46f60 <g_str_equal@plt+0x39ca0>
   46f08:	lea    rdx,[rbx+0x8]
   46f0c:	xor    esi,esi
   46f0e:	mov    rcx,r12
   46f11:	mov    rdi,rbp
   46f14:	call   46d90 <g_str_equal@plt+0x39ad0>
   46f19:	cmp    QWORD PTR [rsp],0x0
   46f1e:	je     46ef0 <g_str_equal@plt+0x39c30>
   46f20:	mov    rsi,r13
   46f23:	mov    rdi,rbp
   46f26:	call   28390 <g_str_equal@plt+0x1b0d0>
   46f2b:	mov    rsi,QWORD PTR [rsp]
   46f2f:	test   rsi,rsi
   46f32:	je     46eb6 <g_str_equal@plt+0x39bf6>
   46f34:	mov    rdi,rbp
   46f37:	call   28770 <g_str_equal@plt+0x1b4b0>
   46f3c:	test   al,al
   46f3e:	je     46f51 <g_str_equal@plt+0x39c91>
   46f40:	mov    rdi,QWORD PTR [r13+0x0]
   46f44:	call   44830 <g_str_equal@plt+0x37570>
   46f49:	mov    QWORD PTR [r13+0x0],0x0
   46f51:	mov    rsi,QWORD PTR [rsp]
   46f55:	jmp    46eb6 <g_str_equal@plt+0x39bf6>
   46f5a:	nop    WORD PTR [rax+rax*1+0x0]
   46f60:	cmp    QWORD PTR [rsp],0x0
   46f65:	jne    46f20 <g_str_equal@plt+0x39c60>
   46f67:	mov    rsi,r12
   46f6a:	mov    rdi,rbp
   46f6d:	call   282e0 <g_str_equal@plt+0x1b020>
   46f72:	jmp    46f20 <g_str_equal@plt+0x39c60>
   46f74:	call   cd30 <__stack_chk_fail@plt>
   46f79:	nop    DWORD PTR [rax+0x0]
   46f80:	push   rbx
   46f81:	mov    r8,rcx
   46f84:	mov    rbx,rdx
   46f87:	lea    rcx,[rip+0x23a102]        # 281090 <_fini@@Base+0x22e93c>
   46f8e:	sub    rsp,0x10
   46f92:	mov    rax,QWORD PTR fs:0x28
   46f9b:	mov    QWORD PTR [rsp+0x8],rax
   46fa0:	xor    eax,eax
   46fa2:	mov    eax,DWORD PTR [rdx]
   46fa4:	lea    rdx,[rsp+0x4]
   46fa9:	mov    DWORD PTR [rsp+0x4],eax
   46fad:	call   296a0 <g_str_equal@plt+0x1c3e0>
   46fb2:	mov    eax,DWORD PTR [rsp+0x4]
   46fb6:	mov    DWORD PTR [rbx],eax
   46fb8:	mov    rax,QWORD PTR [rsp+0x8]
   46fbd:	xor    rax,QWORD PTR fs:0x28
   46fc6:	jne    46fce <g_str_equal@plt+0x39d0e>
   46fc8:	add    rsp,0x10
   46fcc:	pop    rbx
   46fcd:	ret    
   46fce:	call   cd30 <__stack_chk_fail@plt>
   46fd3:	nop    DWORD PTR [rax]
   46fd6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   46fe0:	push   rbx
   46fe1:	mov    rbx,rdx
   46fe4:	mov    rdx,rsi
   46fe7:	lea    rsi,[rip+0x1e6d8]        # 656c6 <_fini@@Base+0x12f72>
   46fee:	sub    rsp,0x10
   46ff2:	mov    rcx,rsp
   46ff5:	mov    QWORD PTR [rsp],0x0
   46ffd:	mov    rax,QWORD PTR fs:0x28
   47006:	mov    QWORD PTR [rsp+0x8],rax
   4700b:	xor    eax,eax
   4700d:	call   28780 <g_str_equal@plt+0x1b4c0>
   47012:	mov    rsi,QWORD PTR [rsp]
   47016:	mov    rdi,rbx
   47019:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4701e:	mov    rax,QWORD PTR [rsp+0x8]
   47023:	xor    rax,QWORD PTR fs:0x28
   4702c:	jne    47034 <g_str_equal@plt+0x39d74>
   4702e:	add    rsp,0x10
   47032:	pop    rbx
   47033:	ret    
   47034:	call   cd30 <__stack_chk_fail@plt>
   47039:	nop    DWORD PTR [rax+0x0]
   47040:	push   r13
   47042:	push   r12
   47044:	mov    r13,rcx
   47047:	push   rbp
   47048:	push   rbx
   47049:	mov    ecx,0x8
   4704e:	mov    rbp,rdi
   47051:	mov    rbx,rdx
   47054:	sub    rsp,0x18
   47058:	mov    r12,rsp
   4705b:	mov    QWORD PTR [rsp],0x0
   47063:	mov    r8,r12
   47066:	mov    rax,QWORD PTR fs:0x28
   4706f:	mov    QWORD PTR [rsp+0x8],rax
   47074:	xor    eax,eax
   47076:	call   27da0 <g_str_equal@plt+0x1aae0>
   4707b:	mov    rsi,QWORD PTR [rsp]
   4707f:	test   rsi,rsi
   47082:	je     470b0 <g_str_equal@plt+0x39df0>
   47084:	mov    rdi,r13
   47087:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4708c:	mov    rax,QWORD PTR [rsp+0x8]
   47091:	xor    rax,QWORD PTR fs:0x28
   4709a:	jne    4710d <g_str_equal@plt+0x39e4d>
   4709c:	add    rsp,0x18
   470a0:	pop    rbx
   470a1:	pop    rbp
   470a2:	pop    r12
   470a4:	pop    r13
   470a6:	ret    
   470a7:	nop    WORD PTR [rax+rax*1+0x0]
   470b0:	mov    rsi,QWORD PTR [rbx]
   470b3:	test   rsi,rsi
   470b6:	je     470ca <g_str_equal@plt+0x39e0a>
   470b8:	mov    rdx,r12
   470bb:	mov    rdi,rbp
   470be:	call   46fe0 <g_str_equal@plt+0x39d20>
   470c3:	cmp    QWORD PTR [rsp],0x0
   470c8:	je     47100 <g_str_equal@plt+0x39e40>
   470ca:	mov    rsi,rbx
   470cd:	mov    rdi,rbp
   470d0:	call   28000 <g_str_equal@plt+0x1ad40>
   470d5:	mov    rsi,QWORD PTR [rsp]
   470d9:	test   rsi,rsi
   470dc:	je     47084 <g_str_equal@plt+0x39dc4>
   470de:	mov    rdi,rbp
   470e1:	call   28770 <g_str_equal@plt+0x1b4b0>
   470e6:	test   al,al
   470e8:	je     470f9 <g_str_equal@plt+0x39e39>
   470ea:	mov    rdi,QWORD PTR [rbx]
   470ed:	call   448b0 <g_str_equal@plt+0x375f0>
   470f2:	mov    QWORD PTR [rbx],0x0
   470f9:	mov    rsi,QWORD PTR [rsp]
   470fd:	jmp    47084 <g_str_equal@plt+0x39dc4>
   470ff:	nop
   47100:	mov    rsi,r12
   47103:	mov    rdi,rbp
   47106:	call   27f50 <g_str_equal@plt+0x1ac90>
   4710b:	jmp    470ca <g_str_equal@plt+0x39e0a>
   4710d:	call   cd30 <__stack_chk_fail@plt>
   47112:	nop    DWORD PTR [rax+0x0]
   47116:	nop    WORD PTR cs:[rax+rax*1+0x0]
   47120:	push   r13
   47122:	push   r12
   47124:	mov    r13,rdx
   47127:	push   rbp
   47128:	push   rbx
   47129:	mov    rdx,rsi
   4712c:	mov    rbx,rsi
   4712f:	lea    rsi,[rip+0x1e590]        # 656c6 <_fini@@Base+0x12f72>
   47136:	mov    rbp,rdi
   47139:	sub    rsp,0x18
   4713d:	mov    r12,rsp
   47140:	mov    QWORD PTR [rsp],0x0
   47148:	mov    rcx,r12
   4714b:	mov    rax,QWORD PTR fs:0x28
   47154:	mov    QWORD PTR [rsp+0x8],rax
   47159:	xor    eax,eax
   4715b:	call   28780 <g_str_equal@plt+0x1b4c0>
   47160:	mov    rsi,QWORD PTR [rsp]
   47164:	test   rsi,rsi
   47167:	je     47190 <g_str_equal@plt+0x39ed0>
   47169:	mov    rdi,r13
   4716c:	call   3a4c0 <g_str_equal@plt+0x2d200>
   47171:	mov    rax,QWORD PTR [rsp+0x8]
   47176:	xor    rax,QWORD PTR fs:0x28
   4717f:	jne    471ac <g_str_equal@plt+0x39eec>
   47181:	add    rsp,0x18
   47185:	pop    rbx
   47186:	pop    rbp
   47187:	pop    r12
   47189:	pop    r13
   4718b:	ret    
   4718c:	nop    DWORD PTR [rax+0x0]
   47190:	lea    rsi,[rip+0x1e52e]        # 656c5 <_fini@@Base+0x12f71>
   47197:	lea    rdx,[rbx+0x8]
   4719b:	mov    rcx,r12
   4719e:	mov    rdi,rbp
   471a1:	call   28780 <g_str_equal@plt+0x1b4c0>
   471a6:	mov    rsi,QWORD PTR [rsp]
   471aa:	jmp    47169 <g_str_equal@plt+0x39ea9>
   471ac:	call   cd30 <__stack_chk_fail@plt>
   471b1:	nop    DWORD PTR [rax+rax*1+0x0]
   471b6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   471c0:	push   r13
   471c2:	push   r12
   471c4:	mov    r13,rcx
   471c7:	push   rbp
   471c8:	push   rbx
   471c9:	mov    ecx,0x10
   471ce:	mov    rbp,rdi
   471d1:	mov    rbx,rdx
   471d4:	sub    rsp,0x18
   471d8:	mov    r12,rsp
   471db:	mov    QWORD PTR [rsp],0x0
   471e3:	mov    r8,r12
   471e6:	mov    rax,QWORD PTR fs:0x28
   471ef:	mov    QWORD PTR [rsp+0x8],rax
   471f4:	xor    eax,eax
   471f6:	call   27da0 <g_str_equal@plt+0x1aae0>
   471fb:	mov    rsi,QWORD PTR [rsp]
   471ff:	test   rsi,rsi
   47202:	je     47230 <g_str_equal@plt+0x39f70>
   47204:	mov    rdi,r13
   47207:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4720c:	mov    rax,QWORD PTR [rsp+0x8]
   47211:	xor    rax,QWORD PTR fs:0x28
   4721a:	jne    4728d <g_str_equal@plt+0x39fcd>
   4721c:	add    rsp,0x18
   47220:	pop    rbx
   47221:	pop    rbp
   47222:	pop    r12
   47224:	pop    r13
   47226:	ret    
   47227:	nop    WORD PTR [rax+rax*1+0x0]
   47230:	mov    rsi,QWORD PTR [rbx]
   47233:	test   rsi,rsi
   47236:	je     4724a <g_str_equal@plt+0x39f8a>
   47238:	mov    rdx,r12
   4723b:	mov    rdi,rbp
   4723e:	call   47120 <g_str_equal@plt+0x39e60>
   47243:	cmp    QWORD PTR [rsp],0x0
   47248:	je     47280 <g_str_equal@plt+0x39fc0>
   4724a:	mov    rsi,rbx
   4724d:	mov    rdi,rbp
   47250:	call   28000 <g_str_equal@plt+0x1ad40>
   47255:	mov    rsi,QWORD PTR [rsp]
   47259:	test   rsi,rsi
   4725c:	je     47204 <g_str_equal@plt+0x39f44>
   4725e:	mov    rdi,rbp
   47261:	call   28770 <g_str_equal@plt+0x1b4b0>
   47266:	test   al,al
   47268:	je     47279 <g_str_equal@plt+0x39fb9>
   4726a:	mov    rdi,QWORD PTR [rbx]
   4726d:	call   448f0 <g_str_equal@plt+0x37630>
   47272:	mov    QWORD PTR [rbx],0x0
   47279:	mov    rsi,QWORD PTR [rsp]
   4727d:	jmp    47204 <g_str_equal@plt+0x39f44>
   4727f:	nop
   47280:	mov    rsi,r12
   47283:	mov    rdi,rbp
   47286:	call   27f50 <g_str_equal@plt+0x1ac90>
   4728b:	jmp    4724a <g_str_equal@plt+0x39f8a>
   4728d:	call   cd30 <__stack_chk_fail@plt>
   47292:	nop    DWORD PTR [rax+0x0]
   47296:	nop    WORD PTR cs:[rax+rax*1+0x0]
   472a0:	push   rbx
   472a1:	mov    rbx,rdx
   472a4:	mov    rdx,rsi
   472a7:	lea    rsi,[rip+0x1e41b]        # 656c9 <_fini@@Base+0x12f75>
   472ae:	sub    rsp,0x10
   472b2:	mov    rcx,rsp
   472b5:	mov    QWORD PTR [rsp],0x0
   472bd:	mov    rax,QWORD PTR fs:0x28
   472c6:	mov    QWORD PTR [rsp+0x8],rax
   472cb:	xor    eax,eax
   472cd:	call   28780 <g_str_equal@plt+0x1b4c0>
   472d2:	mov    rsi,QWORD PTR [rsp]
   472d6:	mov    rdi,rbx
   472d9:	call   3a4c0 <g_str_equal@plt+0x2d200>
   472de:	mov    rax,QWORD PTR [rsp+0x8]
   472e3:	xor    rax,QWORD PTR fs:0x28
   472ec:	jne    472f4 <g_str_equal@plt+0x3a034>
   472ee:	add    rsp,0x10
   472f2:	pop    rbx
   472f3:	ret    
   472f4:	call   cd30 <__stack_chk_fail@plt>
   472f9:	nop    DWORD PTR [rax+0x0]
   47300:	push   r13
   47302:	push   r12
   47304:	mov    r13,rcx
   47307:	push   rbp
   47308:	push   rbx
   47309:	mov    ecx,0x8
   4730e:	mov    rbp,rdi
   47311:	mov    rbx,rdx
   47314:	sub    rsp,0x18
   47318:	mov    r12,rsp
   4731b:	mov    QWORD PTR [rsp],0x0
   47323:	mov    r8,r12
   47326:	mov    rax,QWORD PTR fs:0x28
   4732f:	mov    QWORD PTR [rsp+0x8],rax
   47334:	xor    eax,eax
   47336:	call   27da0 <g_str_equal@plt+0x1aae0>
   4733b:	mov    rsi,QWORD PTR [rsp]
   4733f:	test   rsi,rsi
   47342:	je     47370 <g_str_equal@plt+0x3a0b0>
   47344:	mov    rdi,r13
   47347:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4734c:	mov    rax,QWORD PTR [rsp+0x8]
   47351:	xor    rax,QWORD PTR fs:0x28
   4735a:	jne    473cd <g_str_equal@plt+0x3a10d>
   4735c:	add    rsp,0x18
   47360:	pop    rbx
   47361:	pop    rbp
   47362:	pop    r12
   47364:	pop    r13
   47366:	ret    
   47367:	nop    WORD PTR [rax+rax*1+0x0]
   47370:	mov    rsi,QWORD PTR [rbx]
   47373:	test   rsi,rsi
   47376:	je     4738a <g_str_equal@plt+0x3a0ca>
   47378:	mov    rdx,r12
   4737b:	mov    rdi,rbp
   4737e:	call   472a0 <g_str_equal@plt+0x39fe0>
   47383:	cmp    QWORD PTR [rsp],0x0
   47388:	je     473c0 <g_str_equal@plt+0x3a100>
   4738a:	mov    rsi,rbx
   4738d:	mov    rdi,rbp
   47390:	call   28000 <g_str_equal@plt+0x1ad40>
   47395:	mov    rsi,QWORD PTR [rsp]
   47399:	test   rsi,rsi
   4739c:	je     47344 <g_str_equal@plt+0x3a084>
   4739e:	mov    rdi,rbp
   473a1:	call   28770 <g_str_equal@plt+0x1b4b0>
   473a6:	test   al,al
   473a8:	je     473b9 <g_str_equal@plt+0x3a0f9>
   473aa:	mov    rdi,QWORD PTR [rbx]
   473ad:	call   44930 <g_str_equal@plt+0x37670>
   473b2:	mov    QWORD PTR [rbx],0x0
   473b9:	mov    rsi,QWORD PTR [rsp]
   473bd:	jmp    47344 <g_str_equal@plt+0x3a084>
   473bf:	nop
   473c0:	mov    rsi,r12
   473c3:	mov    rdi,rbp
   473c6:	call   27f50 <g_str_equal@plt+0x1ac90>
   473cb:	jmp    4738a <g_str_equal@plt+0x3a0ca>
   473cd:	call   cd30 <__stack_chk_fail@plt>
   473d2:	nop    DWORD PTR [rax+0x0]
   473d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   473e0:	push   rbx
   473e1:	mov    rbx,rdx
   473e4:	mov    rdx,rsi
   473e7:	lea    rsi,[rip+0x1e2df]        # 656cd <_fini@@Base+0x12f79>
   473ee:	sub    rsp,0x10
   473f2:	mov    rcx,rsp
   473f5:	mov    QWORD PTR [rsp],0x0
   473fd:	mov    rax,QWORD PTR fs:0x28
   47406:	mov    QWORD PTR [rsp+0x8],rax
   4740b:	xor    eax,eax
   4740d:	call   28780 <g_str_equal@plt+0x1b4c0>
   47412:	mov    rsi,QWORD PTR [rsp]
   47416:	mov    rdi,rbx
   47419:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4741e:	mov    rax,QWORD PTR [rsp+0x8]
   47423:	xor    rax,QWORD PTR fs:0x28
   4742c:	jne    47434 <g_str_equal@plt+0x3a174>
   4742e:	add    rsp,0x10
   47432:	pop    rbx
   47433:	ret    
   47434:	call   cd30 <__stack_chk_fail@plt>
   47439:	nop    DWORD PTR [rax+0x0]
   47440:	push   r13
   47442:	push   r12
   47444:	mov    r13,rcx
   47447:	push   rbp
   47448:	push   rbx
   47449:	mov    ecx,0x8
   4744e:	mov    rbp,rdi
   47451:	mov    rbx,rdx
   47454:	sub    rsp,0x18
   47458:	mov    r12,rsp
   4745b:	mov    QWORD PTR [rsp],0x0
   47463:	mov    r8,r12
   47466:	mov    rax,QWORD PTR fs:0x28
   4746f:	mov    QWORD PTR [rsp+0x8],rax
   47474:	xor    eax,eax
   47476:	call   27da0 <g_str_equal@plt+0x1aae0>
   4747b:	mov    rsi,QWORD PTR [rsp]
   4747f:	test   rsi,rsi
   47482:	je     474b0 <g_str_equal@plt+0x3a1f0>
   47484:	mov    rdi,r13
   47487:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4748c:	mov    rax,QWORD PTR [rsp+0x8]
   47491:	xor    rax,QWORD PTR fs:0x28
   4749a:	jne    4750d <g_str_equal@plt+0x3a24d>
   4749c:	add    rsp,0x18
   474a0:	pop    rbx
   474a1:	pop    rbp
   474a2:	pop    r12
   474a4:	pop    r13
   474a6:	ret    
   474a7:	nop    WORD PTR [rax+rax*1+0x0]
   474b0:	mov    rsi,QWORD PTR [rbx]
   474b3:	test   rsi,rsi
   474b6:	je     474ca <g_str_equal@plt+0x3a20a>
   474b8:	mov    rdx,r12
   474bb:	mov    rdi,rbp
   474be:	call   473e0 <g_str_equal@plt+0x3a120>
   474c3:	cmp    QWORD PTR [rsp],0x0
   474c8:	je     47500 <g_str_equal@plt+0x3a240>
   474ca:	mov    rsi,rbx
   474cd:	mov    rdi,rbp
   474d0:	call   28000 <g_str_equal@plt+0x1ad40>
   474d5:	mov    rsi,QWORD PTR [rsp]
   474d9:	test   rsi,rsi
   474dc:	je     47484 <g_str_equal@plt+0x3a1c4>
   474de:	mov    rdi,rbp
   474e1:	call   28770 <g_str_equal@plt+0x1b4b0>
   474e6:	test   al,al
   474e8:	je     474f9 <g_str_equal@plt+0x3a239>
   474ea:	mov    rdi,QWORD PTR [rbx]
   474ed:	call   44970 <g_str_equal@plt+0x376b0>
   474f2:	mov    QWORD PTR [rbx],0x0
   474f9:	mov    rsi,QWORD PTR [rsp]
   474fd:	jmp    47484 <g_str_equal@plt+0x3a1c4>
   474ff:	nop
   47500:	mov    rsi,r12
   47503:	mov    rdi,rbp
   47506:	call   27f50 <g_str_equal@plt+0x1ac90>
   4750b:	jmp    474ca <g_str_equal@plt+0x3a20a>
   4750d:	call   cd30 <__stack_chk_fail@plt>
   47512:	nop    DWORD PTR [rax+0x0]
   47516:	nop    WORD PTR cs:[rax+rax*1+0x0]
   47520:	push   rbx
   47521:	mov    rbx,rdx
   47524:	mov    rdx,rsi
   47527:	lea    rsi,[rip+0x1e19f]        # 656cd <_fini@@Base+0x12f79>
   4752e:	sub    rsp,0x10
   47532:	mov    rcx,rsp
   47535:	mov    QWORD PTR [rsp],0x0
   4753d:	mov    rax,QWORD PTR fs:0x28
   47546:	mov    QWORD PTR [rsp+0x8],rax
   4754b:	xor    eax,eax
   4754d:	call   28780 <g_str_equal@plt+0x1b4c0>
   47552:	mov    rsi,QWORD PTR [rsp]
   47556:	mov    rdi,rbx
   47559:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4755e:	mov    rax,QWORD PTR [rsp+0x8]
   47563:	xor    rax,QWORD PTR fs:0x28
   4756c:	jne    47574 <g_str_equal@plt+0x3a2b4>
   4756e:	add    rsp,0x10
   47572:	pop    rbx
   47573:	ret    
   47574:	call   cd30 <__stack_chk_fail@plt>
   47579:	nop    DWORD PTR [rax+0x0]
   47580:	push   r13
   47582:	push   r12
   47584:	mov    r13,rcx
   47587:	push   rbp
   47588:	push   rbx
   47589:	mov    ecx,0x8
   4758e:	mov    rbp,rdi
   47591:	mov    rbx,rdx
   47594:	sub    rsp,0x18
   47598:	mov    r12,rsp
   4759b:	mov    QWORD PTR [rsp],0x0
   475a3:	mov    r8,r12
   475a6:	mov    rax,QWORD PTR fs:0x28
   475af:	mov    QWORD PTR [rsp+0x8],rax
   475b4:	xor    eax,eax
   475b6:	call   27da0 <g_str_equal@plt+0x1aae0>
   475bb:	mov    rsi,QWORD PTR [rsp]
   475bf:	test   rsi,rsi
   475c2:	je     475f0 <g_str_equal@plt+0x3a330>
   475c4:	mov    rdi,r13
   475c7:	call   3a4c0 <g_str_equal@plt+0x2d200>
   475cc:	mov    rax,QWORD PTR [rsp+0x8]
   475d1:	xor    rax,QWORD PTR fs:0x28
   475da:	jne    4764d <g_str_equal@plt+0x3a38d>
   475dc:	add    rsp,0x18
   475e0:	pop    rbx
   475e1:	pop    rbp
   475e2:	pop    r12
   475e4:	pop    r13
   475e6:	ret    
   475e7:	nop    WORD PTR [rax+rax*1+0x0]
   475f0:	mov    rsi,QWORD PTR [rbx]
   475f3:	test   rsi,rsi
   475f6:	je     4760a <g_str_equal@plt+0x3a34a>
   475f8:	mov    rdx,r12
   475fb:	mov    rdi,rbp
   475fe:	call   47520 <g_str_equal@plt+0x3a260>
   47603:	cmp    QWORD PTR [rsp],0x0
   47608:	je     47640 <g_str_equal@plt+0x3a380>
   4760a:	mov    rsi,rbx
   4760d:	mov    rdi,rbp
   47610:	call   28000 <g_str_equal@plt+0x1ad40>
   47615:	mov    rsi,QWORD PTR [rsp]
   47619:	test   rsi,rsi
   4761c:	je     475c4 <g_str_equal@plt+0x3a304>
   4761e:	mov    rdi,rbp
   47621:	call   28770 <g_str_equal@plt+0x1b4b0>
   47626:	test   al,al
   47628:	je     47639 <g_str_equal@plt+0x3a379>
   4762a:	mov    rdi,QWORD PTR [rbx]
   4762d:	call   449b0 <g_str_equal@plt+0x376f0>
   47632:	mov    QWORD PTR [rbx],0x0
   47639:	mov    rsi,QWORD PTR [rsp]
   4763d:	jmp    475c4 <g_str_equal@plt+0x3a304>
   4763f:	nop
   47640:	mov    rsi,r12
   47643:	mov    rdi,rbp
   47646:	call   27f50 <g_str_equal@plt+0x1ac90>
   4764b:	jmp    4760a <g_str_equal@plt+0x3a34a>
   4764d:	call   cd30 <__stack_chk_fail@plt>
   47652:	nop    DWORD PTR [rax+0x0]
   47656:	nop    WORD PTR cs:[rax+rax*1+0x0]
   47660:	push   rbx
   47661:	mov    rbx,rdx
   47664:	mov    rdx,rsi
   47667:	lea    rsi,[rip+0x1e058]        # 656c6 <_fini@@Base+0x12f72>
   4766e:	sub    rsp,0x10
   47672:	mov    rcx,rsp
   47675:	mov    QWORD PTR [rsp],0x0
   4767d:	mov    rax,QWORD PTR fs:0x28
   47686:	mov    QWORD PTR [rsp+0x8],rax
   4768b:	xor    eax,eax
   4768d:	call   28780 <g_str_equal@plt+0x1b4c0>
   47692:	mov    rsi,QWORD PTR [rsp]
   47696:	mov    rdi,rbx
   47699:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4769e:	mov    rax,QWORD PTR [rsp+0x8]
   476a3:	xor    rax,QWORD PTR fs:0x28
   476ac:	jne    476b4 <g_str_equal@plt+0x3a3f4>
   476ae:	add    rsp,0x10
   476b2:	pop    rbx
   476b3:	ret    
   476b4:	call   cd30 <__stack_chk_fail@plt>
   476b9:	nop    DWORD PTR [rax+0x0]
   476c0:	push   r13
   476c2:	push   r12
   476c4:	mov    r13,rcx
   476c7:	push   rbp
   476c8:	push   rbx
   476c9:	mov    ecx,0x8
   476ce:	mov    rbp,rdi
   476d1:	mov    rbx,rdx
   476d4:	sub    rsp,0x18
   476d8:	mov    r12,rsp
   476db:	mov    QWORD PTR [rsp],0x0
   476e3:	mov    r8,r12
   476e6:	mov    rax,QWORD PTR fs:0x28
   476ef:	mov    QWORD PTR [rsp+0x8],rax
   476f4:	xor    eax,eax
   476f6:	call   27da0 <g_str_equal@plt+0x1aae0>
   476fb:	mov    rsi,QWORD PTR [rsp]
   476ff:	test   rsi,rsi
   47702:	je     47730 <g_str_equal@plt+0x3a470>
   47704:	mov    rdi,r13
   47707:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4770c:	mov    rax,QWORD PTR [rsp+0x8]
   47711:	xor    rax,QWORD PTR fs:0x28
   4771a:	jne    4778d <g_str_equal@plt+0x3a4cd>
   4771c:	add    rsp,0x18
   47720:	pop    rbx
   47721:	pop    rbp
   47722:	pop    r12
   47724:	pop    r13
   47726:	ret    
   47727:	nop    WORD PTR [rax+rax*1+0x0]
   47730:	mov    rsi,QWORD PTR [rbx]
   47733:	test   rsi,rsi
   47736:	je     4774a <g_str_equal@plt+0x3a48a>
   47738:	mov    rdx,r12
   4773b:	mov    rdi,rbp
   4773e:	call   47660 <g_str_equal@plt+0x3a3a0>
   47743:	cmp    QWORD PTR [rsp],0x0
   47748:	je     47780 <g_str_equal@plt+0x3a4c0>
   4774a:	mov    rsi,rbx
   4774d:	mov    rdi,rbp
   47750:	call   28000 <g_str_equal@plt+0x1ad40>
   47755:	mov    rsi,QWORD PTR [rsp]
   47759:	test   rsi,rsi
   4775c:	je     47704 <g_str_equal@plt+0x3a444>
   4775e:	mov    rdi,rbp
   47761:	call   28770 <g_str_equal@plt+0x1b4b0>
   47766:	test   al,al
   47768:	je     47779 <g_str_equal@plt+0x3a4b9>
   4776a:	mov    rdi,QWORD PTR [rbx]
   4776d:	call   449f0 <g_str_equal@plt+0x37730>
   47772:	mov    QWORD PTR [rbx],0x0
   47779:	mov    rsi,QWORD PTR [rsp]
   4777d:	jmp    47704 <g_str_equal@plt+0x3a444>
   4777f:	nop
   47780:	mov    rsi,r12
   47783:	mov    rdi,rbp
   47786:	call   27f50 <g_str_equal@plt+0x1ac90>
   4778b:	jmp    4774a <g_str_equal@plt+0x3a48a>
   4778d:	call   cd30 <__stack_chk_fail@plt>
   47792:	nop    DWORD PTR [rax+0x0]
   47796:	nop    WORD PTR cs:[rax+rax*1+0x0]
   477a0:	push   rbx
   477a1:	mov    r8,rcx
   477a4:	mov    rbx,rdx
   477a7:	lea    rcx,[rip+0x2398a2]        # 281050 <_fini@@Base+0x22e8fc>
   477ae:	sub    rsp,0x10
   477b2:	mov    rax,QWORD PTR fs:0x28
   477bb:	mov    QWORD PTR [rsp+0x8],rax
   477c0:	xor    eax,eax
   477c2:	mov    eax,DWORD PTR [rdx]
   477c4:	lea    rdx,[rsp+0x4]
   477c9:	mov    DWORD PTR [rsp+0x4],eax
   477cd:	call   296a0 <g_str_equal@plt+0x1c3e0>
   477d2:	mov    eax,DWORD PTR [rsp+0x4]
   477d6:	mov    DWORD PTR [rbx],eax
   477d8:	mov    rax,QWORD PTR [rsp+0x8]
   477dd:	xor    rax,QWORD PTR fs:0x28
   477e6:	jne    477ee <g_str_equal@plt+0x3a52e>
   477e8:	add    rsp,0x10
   477ec:	pop    rbx
   477ed:	ret    
   477ee:	call   cd30 <__stack_chk_fail@plt>
   477f3:	nop    DWORD PTR [rax]
   477f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   47800:	push   rbp
   47801:	push   rbx
   47802:	mov    rbp,rdx
   47805:	mov    rbx,rsi
   47808:	lea    rcx,[rip+0x239841]        # 281050 <_fini@@Base+0x22e8fc>
   4780f:	sub    rsp,0x28
   47813:	mov    rax,QWORD PTR fs:0x28
   4781c:	mov    QWORD PTR [rsp+0x18],rax
   47821:	xor    eax,eax
   47823:	mov    eax,DWORD PTR [rsi]
   47825:	lea    rdx,[rsp+0xc]
   4782a:	lea    r8,[rsp+0x10]
   4782f:	lea    rsi,[rip+0x1de9a]        # 656d0 <_fini@@Base+0x12f7c>
   47836:	mov    QWORD PTR [rsp+0x10],0x0
   4783f:	mov    DWORD PTR [rsp+0xc],eax
   47843:	call   296a0 <g_str_equal@plt+0x1c3e0>
   47848:	mov    eax,DWORD PTR [rsp+0xc]
   4784c:	mov    rsi,QWORD PTR [rsp+0x10]
   47851:	mov    rdi,rbp
   47854:	mov    DWORD PTR [rbx],eax
   47856:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4785b:	mov    rax,QWORD PTR [rsp+0x18]
   47860:	xor    rax,QWORD PTR fs:0x28
   47869:	jne    47872 <g_str_equal@plt+0x3a5b2>
   4786b:	add    rsp,0x28
   4786f:	pop    rbx
   47870:	pop    rbp
   47871:	ret    
   47872:	call   cd30 <__stack_chk_fail@plt>
   47877:	nop    WORD PTR [rax+rax*1+0x0]
   47880:	push   r13
   47882:	push   r12
   47884:	mov    r13,rcx
   47887:	push   rbp
   47888:	push   rbx
   47889:	mov    ecx,0x4
   4788e:	mov    rbp,rdi
   47891:	mov    rbx,rdx
   47894:	sub    rsp,0x18
   47898:	mov    r12,rsp
   4789b:	mov    QWORD PTR [rsp],0x0
   478a3:	mov    r8,r12
   478a6:	mov    rax,QWORD PTR fs:0x28
   478af:	mov    QWORD PTR [rsp+0x8],rax
   478b4:	xor    eax,eax
   478b6:	call   27da0 <g_str_equal@plt+0x1aae0>
   478bb:	mov    rsi,QWORD PTR [rsp]
   478bf:	test   rsi,rsi
   478c2:	je     478f0 <g_str_equal@plt+0x3a630>
   478c4:	mov    rdi,r13
   478c7:	call   3a4c0 <g_str_equal@plt+0x2d200>
   478cc:	mov    rax,QWORD PTR [rsp+0x8]
   478d1:	xor    rax,QWORD PTR fs:0x28
   478da:	jne    4794d <g_str_equal@plt+0x3a68d>
   478dc:	add    rsp,0x18
   478e0:	pop    rbx
   478e1:	pop    rbp
   478e2:	pop    r12
   478e4:	pop    r13
   478e6:	ret    
   478e7:	nop    WORD PTR [rax+rax*1+0x0]
   478f0:	mov    rsi,QWORD PTR [rbx]
   478f3:	test   rsi,rsi
   478f6:	je     4790a <g_str_equal@plt+0x3a64a>
   478f8:	mov    rdx,r12
   478fb:	mov    rdi,rbp
   478fe:	call   47800 <g_str_equal@plt+0x3a540>
   47903:	cmp    QWORD PTR [rsp],0x0
   47908:	je     47940 <g_str_equal@plt+0x3a680>
   4790a:	mov    rsi,rbx
   4790d:	mov    rdi,rbp
   47910:	call   28000 <g_str_equal@plt+0x1ad40>
   47915:	mov    rsi,QWORD PTR [rsp]
   47919:	test   rsi,rsi
   4791c:	je     478c4 <g_str_equal@plt+0x3a604>
   4791e:	mov    rdi,rbp
   47921:	call   28770 <g_str_equal@plt+0x1b4b0>
   47926:	test   al,al
   47928:	je     47939 <g_str_equal@plt+0x3a679>
   4792a:	mov    rdi,QWORD PTR [rbx]
   4792d:	call   44a30 <g_str_equal@plt+0x37770>
   47932:	mov    QWORD PTR [rbx],0x0
   47939:	mov    rsi,QWORD PTR [rsp]
   4793d:	jmp    478c4 <g_str_equal@plt+0x3a604>
   4793f:	nop
   47940:	mov    rsi,r12
   47943:	mov    rdi,rbp
   47946:	call   27f50 <g_str_equal@plt+0x1ac90>
   4794b:	jmp    4790a <g_str_equal@plt+0x3a64a>
   4794d:	call   cd30 <__stack_chk_fail@plt>
   47952:	nop    DWORD PTR [rax+0x0]
   47956:	nop    WORD PTR cs:[rax+rax*1+0x0]
   47960:	push   r13
   47962:	push   r12
   47964:	mov    r13,rdx
   47967:	push   rbp
   47968:	push   rbx
   47969:	mov    rdx,rsi
   4796c:	mov    rbx,rsi
   4796f:	lea    rsi,[rip+0x1dd6b]        # 656e1 <_fini@@Base+0x12f8d>
   47976:	mov    rbp,rdi
   47979:	sub    rsp,0x18
   4797d:	mov    r12,rsp
   47980:	mov    QWORD PTR [rsp],0x0
   47988:	mov    rcx,r12
   4798b:	mov    rax,QWORD PTR fs:0x28
   47994:	mov    QWORD PTR [rsp+0x8],rax
   47999:	xor    eax,eax
   4799b:	call   29210 <g_str_equal@plt+0x1bf50>
   479a0:	mov    rsi,QWORD PTR [rsp]
   479a4:	test   rsi,rsi
   479a7:	je     479d0 <g_str_equal@plt+0x3a710>
   479a9:	mov    rdi,r13
   479ac:	call   3a4c0 <g_str_equal@plt+0x2d200>
   479b1:	mov    rax,QWORD PTR [rsp+0x8]
   479b6:	xor    rax,QWORD PTR fs:0x28
   479bf:	jne    47a50 <g_str_equal@plt+0x3a790>
   479c5:	add    rsp,0x18
   479c9:	pop    rbx
   479ca:	pop    rbp
   479cb:	pop    r12
   479cd:	pop    r13
   479cf:	ret    
   479d0:	lea    rsi,[rip+0x1dd03]        # 656da <_fini@@Base+0x12f86>
   479d7:	lea    rdx,[rbx+0x8]
   479db:	mov    rcx,r12
   479de:	mov    rdi,rbp
   479e1:	call   28780 <g_str_equal@plt+0x1b4c0>
   479e6:	mov    rsi,QWORD PTR [rsp]
   479ea:	test   rsi,rsi
   479ed:	jne    479a9 <g_str_equal@plt+0x3a6e9>
   479ef:	lea    rsi,[rip+0x1dcee]        # 656e4 <_fini@@Base+0x12f90>
   479f6:	lea    rdx,[rbx+0x10]
   479fa:	mov    rcx,r12
   479fd:	mov    rdi,rbp
   47a00:	call   28780 <g_str_equal@plt+0x1b4c0>
   47a05:	mov    rsi,QWORD PTR [rsp]
   47a09:	test   rsi,rsi
   47a0c:	jne    479a9 <g_str_equal@plt+0x3a6e9>
   47a0e:	lea    rsi,[rip+0x1dcdb]        # 656f0 <_fini@@Base+0x12f9c>
   47a15:	lea    rdx,[rbx+0x18]
   47a19:	mov    rcx,r12
   47a1c:	mov    rdi,rbp
   47a1f:	call   28780 <g_str_equal@plt+0x1b4c0>
   47a24:	mov    rsi,QWORD PTR [rsp]
   47a28:	test   rsi,rsi
   47a2b:	jne    479a9 <g_str_equal@plt+0x3a6e9>
   47a31:	lea    rsi,[rip+0x1dcc2]        # 656fa <_fini@@Base+0x12fa6>
   47a38:	lea    rdx,[rbx+0x20]
   47a3c:	mov    rcx,r12
   47a3f:	mov    rdi,rbp
   47a42:	call   28780 <g_str_equal@plt+0x1b4c0>
   47a47:	mov    rsi,QWORD PTR [rsp]
   47a4b:	jmp    479a9 <g_str_equal@plt+0x3a6e9>
   47a50:	call   cd30 <__stack_chk_fail@plt>
   47a55:	nop
   47a56:	nop    WORD PTR cs:[rax+rax*1+0x0]
   47a60:	push   r13
   47a62:	push   r12
   47a64:	mov    r13,rcx
   47a67:	push   rbp
   47a68:	push   rbx
   47a69:	mov    ecx,0x28
   47a6e:	mov    rbp,rdi
   47a71:	mov    rbx,rdx
   47a74:	sub    rsp,0x18
   47a78:	mov    r12,rsp
   47a7b:	mov    QWORD PTR [rsp],0x0
   47a83:	mov    r8,r12
   47a86:	mov    rax,QWORD PTR fs:0x28
   47a8f:	mov    QWORD PTR [rsp+0x8],rax
   47a94:	xor    eax,eax
   47a96:	call   27da0 <g_str_equal@plt+0x1aae0>
   47a9b:	mov    rsi,QWORD PTR [rsp]
   47a9f:	test   rsi,rsi
   47aa2:	je     47ad0 <g_str_equal@plt+0x3a810>
   47aa4:	mov    rdi,r13
   47aa7:	call   3a4c0 <g_str_equal@plt+0x2d200>
   47aac:	mov    rax,QWORD PTR [rsp+0x8]
   47ab1:	xor    rax,QWORD PTR fs:0x28
   47aba:	jne    47b2d <g_str_equal@plt+0x3a86d>
   47abc:	add    rsp,0x18
   47ac0:	pop    rbx
   47ac1:	pop    rbp
   47ac2:	pop    r12
   47ac4:	pop    r13
   47ac6:	ret    
   47ac7:	nop    WORD PTR [rax+rax*1+0x0]
   47ad0:	mov    rsi,QWORD PTR [rbx]
   47ad3:	test   rsi,rsi
   47ad6:	je     47aea <g_str_equal@plt+0x3a82a>
   47ad8:	mov    rdx,r12
   47adb:	mov    rdi,rbp
   47ade:	call   47960 <g_str_equal@plt+0x3a6a0>
   47ae3:	cmp    QWORD PTR [rsp],0x0
   47ae8:	je     47b20 <g_str_equal@plt+0x3a860>
   47aea:	mov    rsi,rbx
   47aed:	mov    rdi,rbp
   47af0:	call   28000 <g_str_equal@plt+0x1ad40>
   47af5:	mov    rsi,QWORD PTR [rsp]
   47af9:	test   rsi,rsi
   47afc:	je     47aa4 <g_str_equal@plt+0x3a7e4>
   47afe:	mov    rdi,rbp
   47b01:	call   28770 <g_str_equal@plt+0x1b4b0>
   47b06:	test   al,al
   47b08:	je     47b19 <g_str_equal@plt+0x3a859>
   47b0a:	mov    rdi,QWORD PTR [rbx]
   47b0d:	call   44b30 <g_str_equal@plt+0x37870>
   47b12:	mov    QWORD PTR [rbx],0x0
   47b19:	mov    rsi,QWORD PTR [rsp]
   47b1d:	jmp    47aa4 <g_str_equal@plt+0x3a7e4>
   47b1f:	nop
   47b20:	mov    rsi,r12
   47b23:	mov    rdi,rbp
   47b26:	call   27f50 <g_str_equal@plt+0x1ac90>
   47b2b:	jmp    47aea <g_str_equal@plt+0x3a82a>
   47b2d:	call   cd30 <__stack_chk_fail@plt>
   47b32:	nop    DWORD PTR [rax+0x0]
   47b36:	nop    WORD PTR cs:[rax+rax*1+0x0]
   47b40:	push   r14
   47b42:	push   r13
   47b44:	mov    r14,rcx
   47b47:	push   r12
   47b49:	push   rbp
   47b4a:	mov    ecx,0x10
   47b4f:	push   rbx
   47b50:	mov    rbp,rdi
   47b53:	mov    r13,rdx
   47b56:	sub    rsp,0x10
   47b5a:	mov    r12,rsp
   47b5d:	mov    QWORD PTR [rsp],0x0
   47b65:	mov    r8,r12
   47b68:	mov    rax,QWORD PTR fs:0x28
   47b71:	mov    QWORD PTR [rsp+0x8],rax
   47b76:	xor    eax,eax
   47b78:	call   280a0 <g_str_equal@plt+0x1ade0>
   47b7d:	mov    rsi,QWORD PTR [rsp]
   47b81:	test   rsi,rsi
   47b84:	je     47bb0 <g_str_equal@plt+0x3a8f0>
   47b86:	mov    rdi,r14
   47b89:	call   3a4c0 <g_str_equal@plt+0x2d200>
   47b8e:	mov    rax,QWORD PTR [rsp+0x8]
   47b93:	xor    rax,QWORD PTR fs:0x28
   47b9c:	jne    47c44 <g_str_equal@plt+0x3a984>
   47ba2:	add    rsp,0x10
   47ba6:	pop    rbx
   47ba7:	pop    rbp
   47ba8:	pop    r12
   47baa:	pop    r13
   47bac:	pop    r14
   47bae:	ret    
   47baf:	nop
   47bb0:	mov    rbx,QWORD PTR [r13+0x0]
   47bb4:	test   rbx,rbx
   47bb7:	jne    47bd8 <g_str_equal@plt+0x3a918>
   47bb9:	jmp    47c37 <g_str_equal@plt+0x3a977>
   47bbb:	nop    DWORD PTR [rax+rax*1+0x0]
   47bc0:	mov    rsi,rbx
   47bc3:	mov    edx,0x10
   47bc8:	mov    rdi,rbp
   47bcb:	call   281f0 <g_str_equal@plt+0x1af30>
   47bd0:	test   rax,rax
   47bd3:	mov    rbx,rax
   47bd6:	je     47c30 <g_str_equal@plt+0x3a970>
   47bd8:	lea    rdx,[rbx+0x8]
   47bdc:	xor    esi,esi
   47bde:	mov    rcx,r12
   47be1:	mov    rdi,rbp
   47be4:	call   47a60 <g_str_equal@plt+0x3a7a0>
   47be9:	cmp    QWORD PTR [rsp],0x0
   47bee:	je     47bc0 <g_str_equal@plt+0x3a900>
   47bf0:	mov    rsi,r13
   47bf3:	mov    rdi,rbp
   47bf6:	call   28390 <g_str_equal@plt+0x1b0d0>
   47bfb:	mov    rsi,QWORD PTR [rsp]
   47bff:	test   rsi,rsi
   47c02:	je     47b86 <g_str_equal@plt+0x3a8c6>
   47c04:	mov    rdi,rbp
   47c07:	call   28770 <g_str_equal@plt+0x1b4b0>
   47c0c:	test   al,al
   47c0e:	je     47c21 <g_str_equal@plt+0x3a961>
   47c10:	mov    rdi,QWORD PTR [r13+0x0]
   47c14:	call   44b70 <g_str_equal@plt+0x378b0>
   47c19:	mov    QWORD PTR [r13+0x0],0x0
   47c21:	mov    rsi,QWORD PTR [rsp]
   47c25:	jmp    47b86 <g_str_equal@plt+0x3a8c6>
   47c2a:	nop    WORD PTR [rax+rax*1+0x0]
   47c30:	cmp    QWORD PTR [rsp],0x0
   47c35:	jne    47bf0 <g_str_equal@plt+0x3a930>
   47c37:	mov    rsi,r12
   47c3a:	mov    rdi,rbp
   47c3d:	call   282e0 <g_str_equal@plt+0x1b020>
   47c42:	jmp    47bf0 <g_str_equal@plt+0x3a930>
   47c44:	call   cd30 <__stack_chk_fail@plt>
   47c49:	nop    DWORD PTR [rax+0x0]
   47c50:	push   rbx
   47c51:	mov    rbx,rdx
   47c54:	mov    rdx,rsi
   47c57:	lea    rsi,[rip+0x1daa8]        # 65706 <_fini@@Base+0x12fb2>
   47c5e:	sub    rsp,0x10
   47c62:	mov    rcx,rsp
   47c65:	mov    QWORD PTR [rsp],0x0
   47c6d:	mov    rax,QWORD PTR fs:0x28
   47c76:	mov    QWORD PTR [rsp+0x8],rax
   47c7b:	xor    eax,eax
   47c7d:	call   28780 <g_str_equal@plt+0x1b4c0>
   47c82:	mov    rsi,QWORD PTR [rsp]
   47c86:	mov    rdi,rbx
   47c89:	call   3a4c0 <g_str_equal@plt+0x2d200>
   47c8e:	mov    rax,QWORD PTR [rsp+0x8]
   47c93:	xor    rax,QWORD PTR fs:0x28
   47c9c:	jne    47ca4 <g_str_equal@plt+0x3a9e4>
   47c9e:	add    rsp,0x10
   47ca2:	pop    rbx
   47ca3:	ret    
   47ca4:	call   cd30 <__stack_chk_fail@plt>
   47ca9:	nop    DWORD PTR [rax+0x0]
   47cb0:	push   r13
   47cb2:	push   r12
   47cb4:	mov    r13,rcx
   47cb7:	push   rbp
   47cb8:	push   rbx
   47cb9:	mov    ecx,0x8
   47cbe:	mov    rbp,rdi
   47cc1:	mov    rbx,rdx
   47cc4:	sub    rsp,0x18
   47cc8:	mov    r12,rsp
   47ccb:	mov    QWORD PTR [rsp],0x0
   47cd3:	mov    r8,r12
   47cd6:	mov    rax,QWORD PTR fs:0x28
   47cdf:	mov    QWORD PTR [rsp+0x8],rax
   47ce4:	xor    eax,eax
   47ce6:	call   27da0 <g_str_equal@plt+0x1aae0>
   47ceb:	mov    rsi,QWORD PTR [rsp]
   47cef:	test   rsi,rsi
   47cf2:	je     47d20 <g_str_equal@plt+0x3aa60>
   47cf4:	mov    rdi,r13
   47cf7:	call   3a4c0 <g_str_equal@plt+0x2d200>
   47cfc:	mov    rax,QWORD PTR [rsp+0x8]
   47d01:	xor    rax,QWORD PTR fs:0x28
   47d0a:	jne    47d7d <g_str_equal@plt+0x3aabd>
   47d0c:	add    rsp,0x18
   47d10:	pop    rbx
   47d11:	pop    rbp
   47d12:	pop    r12
   47d14:	pop    r13
   47d16:	ret    
   47d17:	nop    WORD PTR [rax+rax*1+0x0]
   47d20:	mov    rsi,QWORD PTR [rbx]
   47d23:	test   rsi,rsi
   47d26:	je     47d3a <g_str_equal@plt+0x3aa7a>
   47d28:	mov    rdx,r12
   47d2b:	mov    rdi,rbp
   47d2e:	call   47c50 <g_str_equal@plt+0x3a990>
   47d33:	cmp    QWORD PTR [rsp],0x0
   47d38:	je     47d70 <g_str_equal@plt+0x3aab0>
   47d3a:	mov    rsi,rbx
   47d3d:	mov    rdi,rbp
   47d40:	call   28000 <g_str_equal@plt+0x1ad40>
   47d45:	mov    rsi,QWORD PTR [rsp]
   47d49:	test   rsi,rsi
   47d4c:	je     47cf4 <g_str_equal@plt+0x3aa34>
   47d4e:	mov    rdi,rbp
   47d51:	call   28770 <g_str_equal@plt+0x1b4b0>
   47d56:	test   al,al
   47d58:	je     47d69 <g_str_equal@plt+0x3aaa9>
   47d5a:	mov    rdi,QWORD PTR [rbx]
   47d5d:	call   44bb0 <g_str_equal@plt+0x378f0>
   47d62:	mov    QWORD PTR [rbx],0x0
   47d69:	mov    rsi,QWORD PTR [rsp]
   47d6d:	jmp    47cf4 <g_str_equal@plt+0x3aa34>
   47d6f:	nop
   47d70:	mov    rsi,r12
   47d73:	mov    rdi,rbp
   47d76:	call   27f50 <g_str_equal@plt+0x1ac90>
   47d7b:	jmp    47d3a <g_str_equal@plt+0x3aa7a>
   47d7d:	call   cd30 <__stack_chk_fail@plt>
   47d82:	nop    DWORD PTR [rax+0x0]
   47d86:	nop    WORD PTR cs:[rax+rax*1+0x0]
   47d90:	push   rbx
   47d91:	mov    rbx,rdx
   47d94:	mov    rdx,rsi
   47d97:	lea    rsi,[rip+0x1d968]        # 65706 <_fini@@Base+0x12fb2>
   47d9e:	sub    rsp,0x10
   47da2:	mov    rcx,rsp
   47da5:	mov    QWORD PTR [rsp],0x0
   47dad:	mov    rax,QWORD PTR fs:0x28
   47db6:	mov    QWORD PTR [rsp+0x8],rax
   47dbb:	xor    eax,eax
   47dbd:	call   28780 <g_str_equal@plt+0x1b4c0>
   47dc2:	mov    rsi,QWORD PTR [rsp]
   47dc6:	mov    rdi,rbx
   47dc9:	call   3a4c0 <g_str_equal@plt+0x2d200>
   47dce:	mov    rax,QWORD PTR [rsp+0x8]
   47dd3:	xor    rax,QWORD PTR fs:0x28
   47ddc:	jne    47de4 <g_str_equal@plt+0x3ab24>
   47dde:	add    rsp,0x10
   47de2:	pop    rbx
   47de3:	ret    
   47de4:	call   cd30 <__stack_chk_fail@plt>
   47de9:	nop    DWORD PTR [rax+0x0]
   47df0:	push   r13
   47df2:	push   r12
   47df4:	mov    r13,rdx
   47df7:	push   rbp
   47df8:	push   rbx
   47df9:	mov    rdx,rsi
   47dfc:	mov    rbx,rsi
   47dff:	lea    rsi,[rip+0x1d907]        # 6570d <_fini@@Base+0x12fb9>
   47e06:	mov    rbp,rdi
   47e09:	sub    rsp,0x18
   47e0d:	mov    r12,rsp
   47e10:	mov    QWORD PTR [rsp],0x0
   47e18:	mov    rcx,r12
   47e1b:	mov    rax,QWORD PTR fs:0x28
   47e24:	mov    QWORD PTR [rsp+0x8],rax
   47e29:	xor    eax,eax
   47e2b:	call   28780 <g_str_equal@plt+0x1b4c0>
   47e30:	mov    rsi,QWORD PTR [rsp]
   47e34:	test   rsi,rsi
   47e37:	je     47e60 <g_str_equal@plt+0x3aba0>
   47e39:	mov    rdi,r13
   47e3c:	call   3a4c0 <g_str_equal@plt+0x2d200>
   47e41:	mov    rax,QWORD PTR [rsp+0x8]
   47e46:	xor    rax,QWORD PTR fs:0x28
   47e4f:	jne    47e7c <g_str_equal@plt+0x3abbc>
   47e51:	add    rsp,0x18
   47e55:	pop    rbx
   47e56:	pop    rbp
   47e57:	pop    r12
   47e59:	pop    r13
   47e5b:	ret    
   47e5c:	nop    DWORD PTR [rax+0x0]
   47e60:	lea    rsi,[rip+0x1d8ab]        # 65712 <_fini@@Base+0x12fbe>
   47e67:	lea    rdx,[rbx+0x8]
   47e6b:	mov    rcx,r12
   47e6e:	mov    rdi,rbp
   47e71:	call   28780 <g_str_equal@plt+0x1b4c0>
   47e76:	mov    rsi,QWORD PTR [rsp]
   47e7a:	jmp    47e39 <g_str_equal@plt+0x3ab79>
   47e7c:	call   cd30 <__stack_chk_fail@plt>
   47e81:	nop    DWORD PTR [rax+rax*1+0x0]
   47e86:	nop    WORD PTR cs:[rax+rax*1+0x0]
   47e90:	push   r13
   47e92:	push   r12
   47e94:	mov    r13,rcx
   47e97:	push   rbp
   47e98:	push   rbx
   47e99:	mov    ecx,0x10
   47e9e:	mov    rbp,rdi
   47ea1:	mov    rbx,rdx
   47ea4:	sub    rsp,0x18
   47ea8:	mov    r12,rsp
   47eab:	mov    QWORD PTR [rsp],0x0
   47eb3:	mov    r8,r12
   47eb6:	mov    rax,QWORD PTR fs:0x28
   47ebf:	mov    QWORD PTR [rsp+0x8],rax
   47ec4:	xor    eax,eax
   47ec6:	call   27da0 <g_str_equal@plt+0x1aae0>
   47ecb:	mov    rsi,QWORD PTR [rsp]
   47ecf:	test   rsi,rsi
   47ed2:	je     47f00 <g_str_equal@plt+0x3ac40>
   47ed4:	mov    rdi,r13
   47ed7:	call   3a4c0 <g_str_equal@plt+0x2d200>
   47edc:	mov    rax,QWORD PTR [rsp+0x8]
   47ee1:	xor    rax,QWORD PTR fs:0x28
   47eea:	jne    47f5d <g_str_equal@plt+0x3ac9d>
   47eec:	add    rsp,0x18
   47ef0:	pop    rbx
   47ef1:	pop    rbp
   47ef2:	pop    r12
   47ef4:	pop    r13
   47ef6:	ret    
   47ef7:	nop    WORD PTR [rax+rax*1+0x0]
   47f00:	mov    rsi,QWORD PTR [rbx]
   47f03:	test   rsi,rsi
   47f06:	je     47f1a <g_str_equal@plt+0x3ac5a>
   47f08:	mov    rdx,r12
   47f0b:	mov    rdi,rbp
   47f0e:	call   47df0 <g_str_equal@plt+0x3ab30>
   47f13:	cmp    QWORD PTR [rsp],0x0
   47f18:	je     47f50 <g_str_equal@plt+0x3ac90>
   47f1a:	mov    rsi,rbx
   47f1d:	mov    rdi,rbp
   47f20:	call   28000 <g_str_equal@plt+0x1ad40>
   47f25:	mov    rsi,QWORD PTR [rsp]
   47f29:	test   rsi,rsi
   47f2c:	je     47ed4 <g_str_equal@plt+0x3ac14>
   47f2e:	mov    rdi,rbp
   47f31:	call   28770 <g_str_equal@plt+0x1b4b0>
   47f36:	test   al,al
   47f38:	je     47f49 <g_str_equal@plt+0x3ac89>
   47f3a:	mov    rdi,QWORD PTR [rbx]
   47f3d:	call   44bf0 <g_str_equal@plt+0x37930>
   47f42:	mov    QWORD PTR [rbx],0x0
   47f49:	mov    rsi,QWORD PTR [rsp]
   47f4d:	jmp    47ed4 <g_str_equal@plt+0x3ac14>
   47f4f:	nop
   47f50:	mov    rsi,r12
   47f53:	mov    rdi,rbp
   47f56:	call   27f50 <g_str_equal@plt+0x1ac90>
   47f5b:	jmp    47f1a <g_str_equal@plt+0x3ac5a>
   47f5d:	call   cd30 <__stack_chk_fail@plt>
   47f62:	nop    DWORD PTR [rax+0x0]
   47f66:	nop    WORD PTR cs:[rax+rax*1+0x0]
   47f70:	push   r13
   47f72:	push   r12
   47f74:	mov    r13,rdx
   47f77:	push   rbp
   47f78:	push   rbx
   47f79:	mov    rdx,rsi
   47f7c:	mov    rbx,rsi
   47f7f:	lea    rsi,[rip+0x1d792]        # 65718 <_fini@@Base+0x12fc4>
   47f86:	mov    rbp,rdi
   47f89:	sub    rsp,0x18
   47f8d:	mov    r12,rsp
   47f90:	mov    QWORD PTR [rsp],0x0
   47f98:	mov    rcx,r12
   47f9b:	mov    rax,QWORD PTR fs:0x28
   47fa4:	mov    QWORD PTR [rsp+0x8],rax
   47fa9:	xor    eax,eax
   47fab:	call   28780 <g_str_equal@plt+0x1b4c0>
   47fb0:	mov    rsi,QWORD PTR [rsp]
   47fb4:	test   rsi,rsi
   47fb7:	je     47fe0 <g_str_equal@plt+0x3ad20>
   47fb9:	mov    rdi,r13
   47fbc:	call   3a4c0 <g_str_equal@plt+0x2d200>
   47fc1:	mov    rax,QWORD PTR [rsp+0x8]
   47fc6:	xor    rax,QWORD PTR fs:0x28
   47fcf:	jne    480b1 <g_str_equal@plt+0x3adf1>
   47fd5:	add    rsp,0x18
   47fd9:	pop    rbx
   47fda:	pop    rbp
   47fdb:	pop    r12
   47fdd:	pop    r13
   47fdf:	ret    
   47fe0:	lea    rsi,[rip+0x15dd9]        # 5ddc0 <_fini@@Base+0xb66c>
   47fe7:	lea    rdx,[rbx+0x8]
   47feb:	mov    rcx,r12
   47fee:	mov    rdi,rbp
   47ff1:	call   29210 <g_str_equal@plt+0x1bf50>
   47ff6:	mov    rsi,QWORD PTR [rsp]
   47ffa:	test   rsi,rsi
   47ffd:	jne    47fb9 <g_str_equal@plt+0x3acf9>
   47fff:	lea    rsi,[rip+0x1a7de]        # 627e4 <_fini@@Base+0x10090>
   48006:	lea    rdx,[rbx+0x10]
   4800a:	mov    rcx,r12
   4800d:	mov    rdi,rbp
   48010:	call   28780 <g_str_equal@plt+0x1b4c0>
   48015:	mov    rsi,QWORD PTR [rsp]
   48019:	test   rsi,rsi
   4801c:	jne    47fb9 <g_str_equal@plt+0x3acf9>
   4801e:	lea    rsi,[rip+0x1a0c4]        # 620e9 <_fini@@Base+0xf995>
   48025:	lea    rdx,[rbx+0x18]
   48029:	mov    rcx,r12
   4802c:	mov    rdi,rbp
   4802f:	call   28780 <g_str_equal@plt+0x1b4c0>
   48034:	mov    rsi,QWORD PTR [rsp]
   48038:	test   rsi,rsi
   4803b:	jne    47fb9 <g_str_equal@plt+0x3acf9>
   48041:	lea    rdx,[rbx+0x20]
   48045:	lea    rsi,[rip+0x1d6d0]        # 6571c <_fini@@Base+0x12fc8>
   4804c:	mov    rdi,rbp
   4804f:	call   286a0 <g_str_equal@plt+0x1b3e0>
   48054:	test   al,al
   48056:	je     4807b <g_str_equal@plt+0x3adbb>
   48058:	lea    rsi,[rip+0x1d6bd]        # 6571c <_fini@@Base+0x12fc8>
   4805f:	lea    rdx,[rbx+0x21]
   48063:	mov    rcx,r12
   48066:	mov    rdi,rbp
   48069:	call   29120 <g_str_equal@plt+0x1be60>
   4806e:	mov    rsi,QWORD PTR [rsp]
   48072:	test   rsi,rsi
   48075:	jne    47fb9 <g_str_equal@plt+0x3acf9>
   4807b:	lea    rdx,[rbx+0x22]
   4807f:	lea    rsi,[rip+0x1d69f]        # 65725 <_fini@@Base+0x12fd1>
   48086:	mov    rdi,rbp
   48089:	call   286a0 <g_str_equal@plt+0x1b3e0>
   4808e:	test   al,al
   48090:	je     480a8 <g_str_equal@plt+0x3ade8>
   48092:	lea    rdx,[rbx+0x23]
   48096:	lea    rsi,[rip+0x1d688]        # 65725 <_fini@@Base+0x12fd1>
   4809d:	mov    rcx,r12
   480a0:	mov    rdi,rbp
   480a3:	call   29120 <g_str_equal@plt+0x1be60>
   480a8:	mov    rsi,QWORD PTR [rsp]
   480ac:	jmp    47fb9 <g_str_equal@plt+0x3acf9>
   480b1:	call   cd30 <__stack_chk_fail@plt>
   480b6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   480c0:	push   r13
   480c2:	push   r12
   480c4:	mov    r13,rcx
   480c7:	push   rbp
   480c8:	push   rbx
   480c9:	mov    ecx,0x28
   480ce:	mov    rbp,rdi
   480d1:	mov    rbx,rdx
   480d4:	sub    rsp,0x18
   480d8:	mov    r12,rsp
   480db:	mov    QWORD PTR [rsp],0x0
   480e3:	mov    r8,r12
   480e6:	mov    rax,QWORD PTR fs:0x28
   480ef:	mov    QWORD PTR [rsp+0x8],rax
   480f4:	xor    eax,eax
   480f6:	call   27da0 <g_str_equal@plt+0x1aae0>
   480fb:	mov    rsi,QWORD PTR [rsp]
   480ff:	test   rsi,rsi
   48102:	je     48130 <g_str_equal@plt+0x3ae70>
   48104:	mov    rdi,r13
   48107:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4810c:	mov    rax,QWORD PTR [rsp+0x8]
   48111:	xor    rax,QWORD PTR fs:0x28
   4811a:	jne    4818d <g_str_equal@plt+0x3aecd>
   4811c:	add    rsp,0x18
   48120:	pop    rbx
   48121:	pop    rbp
   48122:	pop    r12
   48124:	pop    r13
   48126:	ret    
   48127:	nop    WORD PTR [rax+rax*1+0x0]
   48130:	mov    rsi,QWORD PTR [rbx]
   48133:	test   rsi,rsi
   48136:	je     4814a <g_str_equal@plt+0x3ae8a>
   48138:	mov    rdx,r12
   4813b:	mov    rdi,rbp
   4813e:	call   47f70 <g_str_equal@plt+0x3acb0>
   48143:	cmp    QWORD PTR [rsp],0x0
   48148:	je     48180 <g_str_equal@plt+0x3aec0>
   4814a:	mov    rsi,rbx
   4814d:	mov    rdi,rbp
   48150:	call   28000 <g_str_equal@plt+0x1ad40>
   48155:	mov    rsi,QWORD PTR [rsp]
   48159:	test   rsi,rsi
   4815c:	je     48104 <g_str_equal@plt+0x3ae44>
   4815e:	mov    rdi,rbp
   48161:	call   28770 <g_str_equal@plt+0x1b4b0>
   48166:	test   al,al
   48168:	je     48179 <g_str_equal@plt+0x3aeb9>
   4816a:	mov    rdi,QWORD PTR [rbx]
   4816d:	call   44c30 <g_str_equal@plt+0x37970>
   48172:	mov    QWORD PTR [rbx],0x0
   48179:	mov    rsi,QWORD PTR [rsp]
   4817d:	jmp    48104 <g_str_equal@plt+0x3ae44>
   4817f:	nop
   48180:	mov    rsi,r12
   48183:	mov    rdi,rbp
   48186:	call   27f50 <g_str_equal@plt+0x1ac90>
   4818b:	jmp    4814a <g_str_equal@plt+0x3ae8a>
   4818d:	call   cd30 <__stack_chk_fail@plt>
   48192:	nop    DWORD PTR [rax+0x0]
   48196:	nop    WORD PTR cs:[rax+rax*1+0x0]
   481a0:	push   r13
   481a2:	push   r12
   481a4:	mov    r13,rdx
   481a7:	push   rbp
   481a8:	push   rbx
   481a9:	mov    rdx,rsi
   481ac:	mov    rbx,rsi
   481af:	lea    rsi,[rip+0x1ae0b]        # 62fc1 <_fini@@Base+0x1086d>
   481b6:	mov    rbp,rdi
   481b9:	sub    rsp,0x18
   481bd:	mov    r12,rsp
   481c0:	mov    QWORD PTR [rsp],0x0
   481c8:	mov    rcx,r12
   481cb:	mov    rax,QWORD PTR fs:0x28
   481d4:	mov    QWORD PTR [rsp+0x8],rax
   481d9:	xor    eax,eax
   481db:	call   28780 <g_str_equal@plt+0x1b4c0>
   481e0:	mov    rsi,QWORD PTR [rsp]
   481e4:	test   rsi,rsi
   481e7:	je     48210 <g_str_equal@plt+0x3af50>
   481e9:	mov    rdi,r13
   481ec:	call   3a4c0 <g_str_equal@plt+0x2d200>
   481f1:	mov    rax,QWORD PTR [rsp+0x8]
   481f6:	xor    rax,QWORD PTR fs:0x28
   481ff:	jne    482b3 <g_str_equal@plt+0x3aff3>
   48205:	add    rsp,0x18
   48209:	pop    rbx
   4820a:	pop    rbp
   4820b:	pop    r12
   4820d:	pop    r13
   4820f:	ret    
   48210:	lea    rsi,[rip+0x1d51a]        # 65731 <_fini@@Base+0x12fdd>
   48217:	lea    rdx,[rbx+0x8]
   4821b:	mov    rcx,r12
   4821e:	mov    rdi,rbp
   48221:	call   28780 <g_str_equal@plt+0x1b4c0>
   48226:	mov    rsi,QWORD PTR [rsp]
   4822a:	test   rsi,rsi
   4822d:	jne    481e9 <g_str_equal@plt+0x3af29>
   4822f:	lea    rsi,[rip+0x1d505]        # 6573b <_fini@@Base+0x12fe7>
   48236:	lea    rdx,[rbx+0x10]
   4823a:	mov    rcx,r12
   4823d:	mov    rdi,rbp
   48240:	call   28780 <g_str_equal@plt+0x1b4c0>
   48245:	mov    rsi,QWORD PTR [rsp]
   48249:	test   rsi,rsi
   4824c:	jne    481e9 <g_str_equal@plt+0x3af29>
   4824e:	lea    rsi,[rip+0x1d4f2]        # 65747 <_fini@@Base+0x12ff3>
   48255:	lea    rdx,[rbx+0x18]
   48259:	mov    rcx,r12
   4825c:	mov    rdi,rbp
   4825f:	call   47e90 <g_str_equal@plt+0x3abd0>
   48264:	mov    rsi,QWORD PTR [rsp]
   48268:	test   rsi,rsi
   4826b:	jne    481e9 <g_str_equal@plt+0x3af29>
   48271:	lea    rsi,[rip+0x1d4d8]        # 65750 <_fini@@Base+0x12ffc>
   48278:	lea    rdx,[rbx+0x20]
   4827c:	mov    rcx,r12
   4827f:	mov    rdi,rbp
   48282:	call   47e90 <g_str_equal@plt+0x3abd0>
   48287:	mov    rsi,QWORD PTR [rsp]
   4828b:	test   rsi,rsi
   4828e:	jne    481e9 <g_str_equal@plt+0x3af29>
   48294:	lea    rsi,[rip+0x1d4c2]        # 6575d <_fini@@Base+0x13009>
   4829b:	lea    rdx,[rbx+0x28]
   4829f:	mov    rcx,r12
   482a2:	mov    rdi,rbp
   482a5:	call   47e90 <g_str_equal@plt+0x3abd0>
   482aa:	mov    rsi,QWORD PTR [rsp]
   482ae:	jmp    481e9 <g_str_equal@plt+0x3af29>
   482b3:	call   cd30 <__stack_chk_fail@plt>
   482b8:	nop    DWORD PTR [rax+rax*1+0x0]
   482c0:	push   r13
   482c2:	push   r12
   482c4:	mov    r13,rcx
   482c7:	push   rbp
   482c8:	push   rbx
   482c9:	mov    ecx,0x30
   482ce:	mov    rbp,rdi
   482d1:	mov    rbx,rdx
   482d4:	sub    rsp,0x18
   482d8:	mov    r12,rsp
   482db:	mov    QWORD PTR [rsp],0x0
   482e3:	mov    r8,r12
   482e6:	mov    rax,QWORD PTR fs:0x28
   482ef:	mov    QWORD PTR [rsp+0x8],rax
   482f4:	xor    eax,eax
   482f6:	call   27da0 <g_str_equal@plt+0x1aae0>
   482fb:	mov    rsi,QWORD PTR [rsp]
   482ff:	test   rsi,rsi
   48302:	je     48330 <g_str_equal@plt+0x3b070>
   48304:	mov    rdi,r13
   48307:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4830c:	mov    rax,QWORD PTR [rsp+0x8]
   48311:	xor    rax,QWORD PTR fs:0x28
   4831a:	jne    4838d <g_str_equal@plt+0x3b0cd>
   4831c:	add    rsp,0x18
   48320:	pop    rbx
   48321:	pop    rbp
   48322:	pop    r12
   48324:	pop    r13
   48326:	ret    
   48327:	nop    WORD PTR [rax+rax*1+0x0]
   48330:	mov    rsi,QWORD PTR [rbx]
   48333:	test   rsi,rsi
   48336:	je     4834a <g_str_equal@plt+0x3b08a>
   48338:	mov    rdx,r12
   4833b:	mov    rdi,rbp
   4833e:	call   481a0 <g_str_equal@plt+0x3aee0>
   48343:	cmp    QWORD PTR [rsp],0x0
   48348:	je     48380 <g_str_equal@plt+0x3b0c0>
   4834a:	mov    rsi,rbx
   4834d:	mov    rdi,rbp
   48350:	call   28000 <g_str_equal@plt+0x1ad40>
   48355:	mov    rsi,QWORD PTR [rsp]
   48359:	test   rsi,rsi
   4835c:	je     48304 <g_str_equal@plt+0x3b044>
   4835e:	mov    rdi,rbp
   48361:	call   28770 <g_str_equal@plt+0x1b4b0>
   48366:	test   al,al
   48368:	je     48379 <g_str_equal@plt+0x3b0b9>
   4836a:	mov    rdi,QWORD PTR [rbx]
   4836d:	call   44c70 <g_str_equal@plt+0x379b0>
   48372:	mov    QWORD PTR [rbx],0x0
   48379:	mov    rsi,QWORD PTR [rsp]
   4837d:	jmp    48304 <g_str_equal@plt+0x3b044>
   4837f:	nop
   48380:	mov    rsi,r12
   48383:	mov    rdi,rbp
   48386:	call   27f50 <g_str_equal@plt+0x1ac90>
   4838b:	jmp    4834a <g_str_equal@plt+0x3b08a>
   4838d:	call   cd30 <__stack_chk_fail@plt>
   48392:	nop    DWORD PTR [rax+0x0]
   48396:	nop    WORD PTR cs:[rax+rax*1+0x0]
   483a0:	push   r13
   483a2:	push   r12
   483a4:	mov    r13,rdx
   483a7:	push   rbp
   483a8:	push   rbx
   483a9:	mov    rdx,rsi
   483ac:	mov    rbx,rsi
   483af:	lea    rsi,[rip+0x19e23]        # 621d9 <_fini@@Base+0xfa85>
   483b6:	mov    rbp,rdi
   483b9:	sub    rsp,0x18
   483bd:	mov    rax,QWORD PTR fs:0x28
   483c6:	mov    QWORD PTR [rsp+0x8],rax
   483cb:	xor    eax,eax
   483cd:	mov    QWORD PTR [rsp],0x0
   483d5:	mov    r12,rsp
   483d8:	call   286a0 <g_str_equal@plt+0x1b3e0>
   483dd:	test   al,al
   483df:	je     48428 <g_str_equal@plt+0x3b168>
   483e1:	lea    rsi,[rip+0x19df1]        # 621d9 <_fini@@Base+0xfa85>
   483e8:	lea    rdx,[rbx+0x8]
   483ec:	mov    rcx,r12
   483ef:	mov    rdi,rbp
   483f2:	call   29210 <g_str_equal@plt+0x1bf50>
   483f7:	mov    rsi,QWORD PTR [rsp]
   483fb:	test   rsi,rsi
   483fe:	je     48428 <g_str_equal@plt+0x3b168>
   48400:	mov    rdi,r13
   48403:	call   3a4c0 <g_str_equal@plt+0x2d200>
   48408:	mov    rax,QWORD PTR [rsp+0x8]
   4840d:	xor    rax,QWORD PTR fs:0x28
   48416:	jne    48444 <g_str_equal@plt+0x3b184>
   48418:	add    rsp,0x18
   4841c:	pop    rbx
   4841d:	pop    rbp
   4841e:	pop    r12
   48420:	pop    r13
   48422:	ret    
   48423:	nop    DWORD PTR [rax+rax*1+0x0]
   48428:	lea    rsi,[rip+0x1d341]        # 65770 <_fini@@Base+0x1301c>
   4842f:	lea    rdx,[rbx+0x10]
   48433:	mov    rcx,r12
   48436:	mov    rdi,rbp
   48439:	call   28780 <g_str_equal@plt+0x1b4c0>
   4843e:	mov    rsi,QWORD PTR [rsp]
   48442:	jmp    48400 <g_str_equal@plt+0x3b140>
   48444:	call   cd30 <__stack_chk_fail@plt>
   48449:	nop    DWORD PTR [rax+0x0]
   48450:	push   r13
   48452:	push   r12
   48454:	mov    r13,rcx
   48457:	push   rbp
   48458:	push   rbx
   48459:	mov    ecx,0x18
   4845e:	mov    rbp,rdi
   48461:	mov    rbx,rdx
   48464:	sub    rsp,0x18
   48468:	mov    r12,rsp
   4846b:	mov    QWORD PTR [rsp],0x0
   48473:	mov    r8,r12
   48476:	mov    rax,QWORD PTR fs:0x28
   4847f:	mov    QWORD PTR [rsp+0x8],rax
   48484:	xor    eax,eax
   48486:	call   27da0 <g_str_equal@plt+0x1aae0>
   4848b:	mov    rsi,QWORD PTR [rsp]
   4848f:	test   rsi,rsi
   48492:	je     484c0 <g_str_equal@plt+0x3b200>
   48494:	mov    rdi,r13
   48497:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4849c:	mov    rax,QWORD PTR [rsp+0x8]
   484a1:	xor    rax,QWORD PTR fs:0x28
   484aa:	jne    4851d <g_str_equal@plt+0x3b25d>
   484ac:	add    rsp,0x18
   484b0:	pop    rbx
   484b1:	pop    rbp
   484b2:	pop    r12
   484b4:	pop    r13
   484b6:	ret    
   484b7:	nop    WORD PTR [rax+rax*1+0x0]
   484c0:	mov    rsi,QWORD PTR [rbx]
   484c3:	test   rsi,rsi
   484c6:	je     484da <g_str_equal@plt+0x3b21a>
   484c8:	mov    rdx,r12
   484cb:	mov    rdi,rbp
   484ce:	call   483a0 <g_str_equal@plt+0x3b0e0>
   484d3:	cmp    QWORD PTR [rsp],0x0
   484d8:	je     48510 <g_str_equal@plt+0x3b250>
   484da:	mov    rsi,rbx
   484dd:	mov    rdi,rbp
   484e0:	call   28000 <g_str_equal@plt+0x1ad40>
   484e5:	mov    rsi,QWORD PTR [rsp]
   484e9:	test   rsi,rsi
   484ec:	je     48494 <g_str_equal@plt+0x3b1d4>
   484ee:	mov    rdi,rbp
   484f1:	call   28770 <g_str_equal@plt+0x1b4b0>
   484f6:	test   al,al
   484f8:	je     48509 <g_str_equal@plt+0x3b249>
   484fa:	mov    rdi,QWORD PTR [rbx]
   484fd:	call   44d30 <g_str_equal@plt+0x37a70>
   48502:	mov    QWORD PTR [rbx],0x0
   48509:	mov    rsi,QWORD PTR [rsp]
   4850d:	jmp    48494 <g_str_equal@plt+0x3b1d4>
   4850f:	nop
   48510:	mov    rsi,r12
   48513:	mov    rdi,rbp
   48516:	call   27f50 <g_str_equal@plt+0x1ac90>
   4851b:	jmp    484da <g_str_equal@plt+0x3b21a>
   4851d:	call   cd30 <__stack_chk_fail@plt>
   48522:	nop    DWORD PTR [rax+0x0]
   48526:	nop    WORD PTR cs:[rax+rax*1+0x0]
   48530:	push   r13
   48532:	push   r12
   48534:	mov    r13,rdx
   48537:	push   rbp
   48538:	push   rbx
   48539:	mov    rdx,rsi
   4853c:	mov    rbx,rsi
   4853f:	lea    rsi,[rip+0x1d230]        # 65776 <_fini@@Base+0x13022>
   48546:	mov    rbp,rdi
   48549:	sub    rsp,0x18
   4854d:	mov    r12,rsp
   48550:	mov    QWORD PTR [rsp],0x0
   48558:	mov    rcx,r12
   4855b:	mov    rax,QWORD PTR fs:0x28
   48564:	mov    QWORD PTR [rsp+0x8],rax
   48569:	xor    eax,eax
   4856b:	call   28780 <g_str_equal@plt+0x1b4c0>
   48570:	mov    rsi,QWORD PTR [rsp]
   48574:	test   rsi,rsi
   48577:	je     485a0 <g_str_equal@plt+0x3b2e0>
   48579:	mov    rdi,r13
   4857c:	call   3a4c0 <g_str_equal@plt+0x2d200>
   48581:	mov    rax,QWORD PTR [rsp+0x8]
   48586:	xor    rax,QWORD PTR fs:0x28
   4858f:	jne    485bc <g_str_equal@plt+0x3b2fc>
   48591:	add    rsp,0x18
   48595:	pop    rbx
   48596:	pop    rbp
   48597:	pop    r12
   48599:	pop    r13
   4859b:	ret    
   4859c:	nop    DWORD PTR [rax+0x0]
   485a0:	lea    rsi,[rip+0x1d1d6]        # 6577d <_fini@@Base+0x13029>
   485a7:	lea    rdx,[rbx+0x8]
   485ab:	mov    rcx,r12
   485ae:	mov    rdi,rbp
   485b1:	call   28780 <g_str_equal@plt+0x1b4c0>
   485b6:	mov    rsi,QWORD PTR [rsp]
   485ba:	jmp    48579 <g_str_equal@plt+0x3b2b9>
   485bc:	call   cd30 <__stack_chk_fail@plt>
   485c1:	nop    DWORD PTR [rax+rax*1+0x0]
   485c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   485d0:	push   r13
   485d2:	push   r12
   485d4:	mov    r13,rcx
   485d7:	push   rbp
   485d8:	push   rbx
   485d9:	mov    ecx,0x10
   485de:	mov    rbp,rdi
   485e1:	mov    rbx,rdx
   485e4:	sub    rsp,0x18
   485e8:	mov    r12,rsp
   485eb:	mov    QWORD PTR [rsp],0x0
   485f3:	mov    r8,r12
   485f6:	mov    rax,QWORD PTR fs:0x28
   485ff:	mov    QWORD PTR [rsp+0x8],rax
   48604:	xor    eax,eax
   48606:	call   27da0 <g_str_equal@plt+0x1aae0>
   4860b:	mov    rsi,QWORD PTR [rsp]
   4860f:	test   rsi,rsi
   48612:	je     48640 <g_str_equal@plt+0x3b380>
   48614:	mov    rdi,r13
   48617:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4861c:	mov    rax,QWORD PTR [rsp+0x8]
   48621:	xor    rax,QWORD PTR fs:0x28
   4862a:	jne    4869d <g_str_equal@plt+0x3b3dd>
   4862c:	add    rsp,0x18
   48630:	pop    rbx
   48631:	pop    rbp
   48632:	pop    r12
   48634:	pop    r13
   48636:	ret    
   48637:	nop    WORD PTR [rax+rax*1+0x0]
   48640:	mov    rsi,QWORD PTR [rbx]
   48643:	test   rsi,rsi
   48646:	je     4865a <g_str_equal@plt+0x3b39a>
   48648:	mov    rdx,r12
   4864b:	mov    rdi,rbp
   4864e:	call   48530 <g_str_equal@plt+0x3b270>
   48653:	cmp    QWORD PTR [rsp],0x0
   48658:	je     48690 <g_str_equal@plt+0x3b3d0>
   4865a:	mov    rsi,rbx
   4865d:	mov    rdi,rbp
   48660:	call   28000 <g_str_equal@plt+0x1ad40>
   48665:	mov    rsi,QWORD PTR [rsp]
   48669:	test   rsi,rsi
   4866c:	je     48614 <g_str_equal@plt+0x3b354>
   4866e:	mov    rdi,rbp
   48671:	call   28770 <g_str_equal@plt+0x1b4b0>
   48676:	test   al,al
   48678:	je     48689 <g_str_equal@plt+0x3b3c9>
   4867a:	mov    rdi,QWORD PTR [rbx]
   4867d:	call   44d70 <g_str_equal@plt+0x37ab0>
   48682:	mov    QWORD PTR [rbx],0x0
   48689:	mov    rsi,QWORD PTR [rsp]
   4868d:	jmp    48614 <g_str_equal@plt+0x3b354>
   4868f:	nop
   48690:	mov    rsi,r12
   48693:	mov    rdi,rbp
   48696:	call   27f50 <g_str_equal@plt+0x1ac90>
   4869b:	jmp    4865a <g_str_equal@plt+0x3b39a>
   4869d:	call   cd30 <__stack_chk_fail@plt>
   486a2:	nop    DWORD PTR [rax+0x0]
   486a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   486b0:	push   r14
   486b2:	push   r13
   486b4:	mov    r14,rcx
   486b7:	push   r12
   486b9:	push   rbp
   486ba:	mov    ecx,0x10
   486bf:	push   rbx
   486c0:	mov    rbp,rdi
   486c3:	mov    r13,rdx
   486c6:	sub    rsp,0x10
   486ca:	mov    r12,rsp
   486cd:	mov    QWORD PTR [rsp],0x0
   486d5:	mov    r8,r12
   486d8:	mov    rax,QWORD PTR fs:0x28
   486e1:	mov    QWORD PTR [rsp+0x8],rax
   486e6:	xor    eax,eax
   486e8:	call   280a0 <g_str_equal@plt+0x1ade0>
   486ed:	mov    rsi,QWORD PTR [rsp]
   486f1:	test   rsi,rsi
   486f4:	je     48720 <g_str_equal@plt+0x3b460>
   486f6:	mov    rdi,r14
   486f9:	call   3a4c0 <g_str_equal@plt+0x2d200>
   486fe:	mov    rax,QWORD PTR [rsp+0x8]
   48703:	xor    rax,QWORD PTR fs:0x28
   4870c:	jne    487b4 <g_str_equal@plt+0x3b4f4>
   48712:	add    rsp,0x10
   48716:	pop    rbx
   48717:	pop    rbp
   48718:	pop    r12
   4871a:	pop    r13
   4871c:	pop    r14
   4871e:	ret    
   4871f:	nop
   48720:	mov    rbx,QWORD PTR [r13+0x0]
   48724:	test   rbx,rbx
   48727:	jne    48748 <g_str_equal@plt+0x3b488>
   48729:	jmp    487a7 <g_str_equal@plt+0x3b4e7>
   4872b:	nop    DWORD PTR [rax+rax*1+0x0]
   48730:	mov    rsi,rbx
   48733:	mov    edx,0x10
   48738:	mov    rdi,rbp
   4873b:	call   281f0 <g_str_equal@plt+0x1af30>
   48740:	test   rax,rax
   48743:	mov    rbx,rax
   48746:	je     487a0 <g_str_equal@plt+0x3b4e0>
   48748:	lea    rdx,[rbx+0x8]
   4874c:	xor    esi,esi
   4874e:	mov    rcx,r12
   48751:	mov    rdi,rbp
   48754:	call   480c0 <g_str_equal@plt+0x3ae00>
   48759:	cmp    QWORD PTR [rsp],0x0
   4875e:	je     48730 <g_str_equal@plt+0x3b470>
   48760:	mov    rsi,r13
   48763:	mov    rdi,rbp
   48766:	call   28390 <g_str_equal@plt+0x1b0d0>
   4876b:	mov    rsi,QWORD PTR [rsp]
   4876f:	test   rsi,rsi
   48772:	je     486f6 <g_str_equal@plt+0x3b436>
   48774:	mov    rdi,rbp
   48777:	call   28770 <g_str_equal@plt+0x1b4b0>
   4877c:	test   al,al
   4877e:	je     48791 <g_str_equal@plt+0x3b4d1>
   48780:	mov    rdi,QWORD PTR [r13+0x0]
   48784:	call   44db0 <g_str_equal@plt+0x37af0>
   48789:	mov    QWORD PTR [r13+0x0],0x0
   48791:	mov    rsi,QWORD PTR [rsp]
   48795:	jmp    486f6 <g_str_equal@plt+0x3b436>
   4879a:	nop    WORD PTR [rax+rax*1+0x0]
   487a0:	cmp    QWORD PTR [rsp],0x0
   487a5:	jne    48760 <g_str_equal@plt+0x3b4a0>
   487a7:	mov    rsi,r12
   487aa:	mov    rdi,rbp
   487ad:	call   282e0 <g_str_equal@plt+0x1b020>
   487b2:	jmp    48760 <g_str_equal@plt+0x3b4a0>
   487b4:	call   cd30 <__stack_chk_fail@plt>
   487b9:	nop    DWORD PTR [rax+0x0]
   487c0:	push   r13
   487c2:	push   r12
   487c4:	mov    r13,rcx
   487c7:	push   rbp
   487c8:	push   rbx
   487c9:	mov    ecx,0x58
   487ce:	mov    rbp,rdi
   487d1:	mov    rbx,rdx
   487d4:	sub    rsp,0x18
   487d8:	mov    r12,rsp
   487db:	mov    QWORD PTR [rsp],0x0
   487e3:	mov    r8,r12
   487e6:	mov    rax,QWORD PTR fs:0x28
   487ef:	mov    QWORD PTR [rsp+0x8],rax
   487f4:	xor    eax,eax
   487f6:	call   27da0 <g_str_equal@plt+0x1aae0>
   487fb:	mov    rsi,QWORD PTR [rsp]
   487ff:	test   rsi,rsi
   48802:	je     48830 <g_str_equal@plt+0x3b570>
   48804:	mov    rdi,r13
   48807:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4880c:	mov    rax,QWORD PTR [rsp+0x8]
   48811:	xor    rax,QWORD PTR fs:0x28
   4881a:	jne    4888d <g_str_equal@plt+0x3b5cd>
   4881c:	add    rsp,0x18
   48820:	pop    rbx
   48821:	pop    rbp
   48822:	pop    r12
   48824:	pop    r13
   48826:	ret    
   48827:	nop    WORD PTR [rax+rax*1+0x0]
   48830:	mov    rsi,QWORD PTR [rbx]
   48833:	test   rsi,rsi
   48836:	je     4884a <g_str_equal@plt+0x3b58a>
   48838:	mov    rdx,r12
   4883b:	mov    rdi,rbp
   4883e:	call   48b40 <g_str_equal@plt+0x3b880>
   48843:	cmp    QWORD PTR [rsp],0x0
   48848:	je     48880 <g_str_equal@plt+0x3b5c0>
   4884a:	mov    rsi,rbx
   4884d:	mov    rdi,rbp
   48850:	call   28000 <g_str_equal@plt+0x1ad40>
   48855:	mov    rsi,QWORD PTR [rsp]
   48859:	test   rsi,rsi
   4885c:	je     48804 <g_str_equal@plt+0x3b544>
   4885e:	mov    rdi,rbp
   48861:	call   28770 <g_str_equal@plt+0x1b4b0>
   48866:	test   al,al
   48868:	je     48879 <g_str_equal@plt+0x3b5b9>
   4886a:	mov    rdi,QWORD PTR [rbx]
   4886d:	call   44df0 <g_str_equal@plt+0x37b30>
   48872:	mov    QWORD PTR [rbx],0x0
   48879:	mov    rsi,QWORD PTR [rsp]
   4887d:	jmp    48804 <g_str_equal@plt+0x3b544>
   4887f:	nop
   48880:	mov    rsi,r12
   48883:	mov    rdi,rbp
   48886:	call   27f50 <g_str_equal@plt+0x1ac90>
   4888b:	jmp    4884a <g_str_equal@plt+0x3b58a>
   4888d:	call   cd30 <__stack_chk_fail@plt>
   48892:	nop    DWORD PTR [rax+0x0]
   48896:	nop    WORD PTR cs:[rax+rax*1+0x0]
   488a0:	push   r14
   488a2:	push   r13
   488a4:	mov    r14,rcx
   488a7:	push   r12
   488a9:	push   rbp
   488aa:	mov    ecx,0x10
   488af:	push   rbx
   488b0:	mov    rbp,rdi
   488b3:	mov    r13,rdx
   488b6:	sub    rsp,0x10
   488ba:	mov    r12,rsp
   488bd:	mov    QWORD PTR [rsp],0x0
   488c5:	mov    r8,r12
   488c8:	mov    rax,QWORD PTR fs:0x28
   488d1:	mov    QWORD PTR [rsp+0x8],rax
   488d6:	xor    eax,eax
   488d8:	call   280a0 <g_str_equal@plt+0x1ade0>
   488dd:	mov    rsi,QWORD PTR [rsp]
   488e1:	test   rsi,rsi
   488e4:	je     48910 <g_str_equal@plt+0x3b650>
   488e6:	mov    rdi,r14
   488e9:	call   3a4c0 <g_str_equal@plt+0x2d200>
   488ee:	mov    rax,QWORD PTR [rsp+0x8]
   488f3:	xor    rax,QWORD PTR fs:0x28
   488fc:	jne    489a4 <g_str_equal@plt+0x3b6e4>
   48902:	add    rsp,0x10
   48906:	pop    rbx
   48907:	pop    rbp
   48908:	pop    r12
   4890a:	pop    r13
   4890c:	pop    r14
   4890e:	ret    
   4890f:	nop
   48910:	mov    rbx,QWORD PTR [r13+0x0]
   48914:	test   rbx,rbx
   48917:	jne    48938 <g_str_equal@plt+0x3b678>
   48919:	jmp    48997 <g_str_equal@plt+0x3b6d7>
   4891b:	nop    DWORD PTR [rax+rax*1+0x0]
   48920:	mov    rsi,rbx
   48923:	mov    edx,0x10
   48928:	mov    rdi,rbp
   4892b:	call   281f0 <g_str_equal@plt+0x1af30>
   48930:	test   rax,rax
   48933:	mov    rbx,rax
   48936:	je     48990 <g_str_equal@plt+0x3b6d0>
   48938:	lea    rdx,[rbx+0x8]
   4893c:	xor    esi,esi
   4893e:	mov    rcx,r12
   48941:	mov    rdi,rbp
   48944:	call   487c0 <g_str_equal@plt+0x3b500>
   48949:	cmp    QWORD PTR [rsp],0x0
   4894e:	je     48920 <g_str_equal@plt+0x3b660>
   48950:	mov    rsi,r13
   48953:	mov    rdi,rbp
   48956:	call   28390 <g_str_equal@plt+0x1b0d0>
   4895b:	mov    rsi,QWORD PTR [rsp]
   4895f:	test   rsi,rsi
   48962:	je     488e6 <g_str_equal@plt+0x3b626>
   48964:	mov    rdi,rbp
   48967:	call   28770 <g_str_equal@plt+0x1b4b0>
   4896c:	test   al,al
   4896e:	je     48981 <g_str_equal@plt+0x3b6c1>
   48970:	mov    rdi,QWORD PTR [r13+0x0]
   48974:	call   44cb0 <g_str_equal@plt+0x379f0>
   48979:	mov    QWORD PTR [r13+0x0],0x0
   48981:	mov    rsi,QWORD PTR [rsp]
   48985:	jmp    488e6 <g_str_equal@plt+0x3b626>
   4898a:	nop    WORD PTR [rax+rax*1+0x0]
   48990:	cmp    QWORD PTR [rsp],0x0
   48995:	jne    48950 <g_str_equal@plt+0x3b690>
   48997:	mov    rsi,r12
   4899a:	mov    rdi,rbp
   4899d:	call   282e0 <g_str_equal@plt+0x1b020>
   489a2:	jmp    48950 <g_str_equal@plt+0x3b690>
   489a4:	call   cd30 <__stack_chk_fail@plt>
   489a9:	nop    DWORD PTR [rax+0x0]
   489b0:	push   r13
   489b2:	push   r12
   489b4:	mov    r13,rdx
   489b7:	push   rbp
   489b8:	push   rbx
   489b9:	mov    rdx,rsi
   489bc:	mov    rbx,rsi
   489bf:	lea    rsi,[rip+0x1cdbe]        # 65784 <_fini@@Base+0x13030>
   489c6:	mov    rbp,rdi
   489c9:	sub    rsp,0x18
   489cd:	mov    r12,rsp
   489d0:	mov    QWORD PTR [rsp],0x0
   489d8:	mov    rcx,r12
   489db:	mov    rax,QWORD PTR fs:0x28
   489e4:	mov    QWORD PTR [rsp+0x8],rax
   489e9:	xor    eax,eax
   489eb:	call   482c0 <g_str_equal@plt+0x3b000>
   489f0:	mov    rsi,QWORD PTR [rsp]
   489f4:	test   rsi,rsi
   489f7:	je     48a20 <g_str_equal@plt+0x3b760>
   489f9:	mov    rdi,r13
   489fc:	call   3a4c0 <g_str_equal@plt+0x2d200>
   48a01:	mov    rax,QWORD PTR [rsp+0x8]
   48a06:	xor    rax,QWORD PTR fs:0x28
   48a0f:	jne    48a53 <g_str_equal@plt+0x3b793>
   48a11:	add    rsp,0x18
   48a15:	pop    rbx
   48a16:	pop    rbp
   48a17:	pop    r12
   48a19:	pop    r13
   48a1b:	ret    
   48a1c:	nop    DWORD PTR [rax+0x0]
   48a20:	lea    rdx,[rbx+0x8]
   48a24:	lea    rsi,[rip+0x1cd5d]        # 65788 <_fini@@Base+0x13034>
   48a2b:	mov    rdi,rbp
   48a2e:	call   286a0 <g_str_equal@plt+0x1b3e0>
   48a33:	test   al,al
   48a35:	je     48a4d <g_str_equal@plt+0x3b78d>
   48a37:	lea    rdx,[rbx+0x10]
   48a3b:	lea    rsi,[rip+0x1cd46]        # 65788 <_fini@@Base+0x13034>
   48a42:	mov    rcx,r12
   48a45:	mov    rdi,rbp
   48a48:	call   488a0 <g_str_equal@plt+0x3b5e0>
   48a4d:	mov    rsi,QWORD PTR [rsp]
   48a51:	jmp    489f9 <g_str_equal@plt+0x3b739>
   48a53:	call   cd30 <__stack_chk_fail@plt>
   48a58:	nop    DWORD PTR [rax+rax*1+0x0]
   48a60:	push   r13
   48a62:	push   r12
   48a64:	mov    r13,rcx
   48a67:	push   rbp
   48a68:	push   rbx
   48a69:	mov    ecx,0x18
   48a6e:	mov    rbp,rdi
   48a71:	mov    rbx,rdx
   48a74:	sub    rsp,0x18
   48a78:	mov    r12,rsp
   48a7b:	mov    QWORD PTR [rsp],0x0
   48a83:	mov    r8,r12
   48a86:	mov    rax,QWORD PTR fs:0x28
   48a8f:	mov    QWORD PTR [rsp+0x8],rax
   48a94:	xor    eax,eax
   48a96:	call   27da0 <g_str_equal@plt+0x1aae0>
   48a9b:	mov    rsi,QWORD PTR [rsp]
   48a9f:	test   rsi,rsi
   48aa2:	je     48ad0 <g_str_equal@plt+0x3b810>
   48aa4:	mov    rdi,r13
   48aa7:	call   3a4c0 <g_str_equal@plt+0x2d200>
   48aac:	mov    rax,QWORD PTR [rsp+0x8]
   48ab1:	xor    rax,QWORD PTR fs:0x28
   48aba:	jne    48b2d <g_str_equal@plt+0x3b86d>
   48abc:	add    rsp,0x18
   48ac0:	pop    rbx
   48ac1:	pop    rbp
   48ac2:	pop    r12
   48ac4:	pop    r13
   48ac6:	ret    
   48ac7:	nop    WORD PTR [rax+rax*1+0x0]
   48ad0:	mov    rsi,QWORD PTR [rbx]
   48ad3:	test   rsi,rsi
   48ad6:	je     48aea <g_str_equal@plt+0x3b82a>
   48ad8:	mov    rdx,r12
   48adb:	mov    rdi,rbp
   48ade:	call   489b0 <g_str_equal@plt+0x3b6f0>
   48ae3:	cmp    QWORD PTR [rsp],0x0
   48ae8:	je     48b20 <g_str_equal@plt+0x3b860>
   48aea:	mov    rsi,rbx
   48aed:	mov    rdi,rbp
   48af0:	call   28000 <g_str_equal@plt+0x1ad40>
   48af5:	mov    rsi,QWORD PTR [rsp]
   48af9:	test   rsi,rsi
   48afc:	je     48aa4 <g_str_equal@plt+0x3b7e4>
   48afe:	mov    rdi,rbp
   48b01:	call   28770 <g_str_equal@plt+0x1b4b0>
   48b06:	test   al,al
   48b08:	je     48b19 <g_str_equal@plt+0x3b859>
   48b0a:	mov    rdi,QWORD PTR [rbx]
   48b0d:	call   44cf0 <g_str_equal@plt+0x37a30>
   48b12:	mov    QWORD PTR [rbx],0x0
   48b19:	mov    rsi,QWORD PTR [rsp]
   48b1d:	jmp    48aa4 <g_str_equal@plt+0x3b7e4>
   48b1f:	nop
   48b20:	mov    rsi,r12
   48b23:	mov    rdi,rbp
   48b26:	call   27f50 <g_str_equal@plt+0x1ac90>
   48b2b:	jmp    48aea <g_str_equal@plt+0x3b82a>
   48b2d:	call   cd30 <__stack_chk_fail@plt>
   48b32:	nop    DWORD PTR [rax+0x0]
   48b36:	nop    WORD PTR cs:[rax+rax*1+0x0]
   48b40:	push   r13
   48b42:	push   r12
   48b44:	mov    r13,rdx
   48b47:	push   rbp
   48b48:	push   rbx
   48b49:	mov    rdx,rsi
   48b4c:	mov    rbx,rsi
   48b4f:	lea    rsi,[rip+0x1cc2e]        # 65784 <_fini@@Base+0x13030>
   48b56:	mov    rbp,rdi
   48b59:	sub    rsp,0x18
   48b5d:	mov    r12,rsp
   48b60:	mov    QWORD PTR [rsp],0x0
   48b68:	mov    rcx,r12
   48b6b:	mov    rax,QWORD PTR fs:0x28
   48b74:	mov    QWORD PTR [rsp+0x8],rax
   48b79:	xor    eax,eax
   48b7b:	call   28780 <g_str_equal@plt+0x1b4c0>
   48b80:	mov    rsi,QWORD PTR [rsp]
   48b84:	test   rsi,rsi
   48b87:	je     48bb0 <g_str_equal@plt+0x3b8f0>
   48b89:	mov    rdi,r13
   48b8c:	call   3a4c0 <g_str_equal@plt+0x2d200>
   48b91:	mov    rax,QWORD PTR [rsp+0x8]
   48b96:	xor    rax,QWORD PTR fs:0x28
   48b9f:	jne    48cc7 <g_str_equal@plt+0x3ba07>
   48ba5:	add    rsp,0x18
   48ba9:	pop    rbx
   48baa:	pop    rbp
   48bab:	pop    r12
   48bad:	pop    r13
   48baf:	ret    
   48bb0:	lea    rsi,[rip+0x1cbd9]        # 65790 <_fini@@Base+0x1303c>
   48bb7:	lea    rdx,[rbx+0x8]
   48bbb:	mov    rcx,r12
   48bbe:	mov    rdi,rbp
   48bc1:	call   28780 <g_str_equal@plt+0x1b4c0>
   48bc6:	mov    rsi,QWORD PTR [rsp]
   48bca:	test   rsi,rsi
   48bcd:	jne    48b89 <g_str_equal@plt+0x3b8c9>
   48bcf:	lea    rsi,[rip+0x1cbbf]        # 65795 <_fini@@Base+0x13041>
   48bd6:	lea    rdx,[rbx+0x10]
   48bda:	mov    rcx,r12
   48bdd:	mov    rdi,rbp
   48be0:	call   28780 <g_str_equal@plt+0x1b4c0>
   48be5:	mov    rsi,QWORD PTR [rsp]
   48be9:	test   rsi,rsi
   48bec:	jne    48b89 <g_str_equal@plt+0x3b8c9>
   48bee:	lea    rsi,[rip+0x1cba9]        # 6579e <_fini@@Base+0x1304a>
   48bf5:	lea    rdx,[rbx+0x18]
   48bf9:	mov    rcx,r12
   48bfc:	mov    rdi,rbp
   48bff:	call   48450 <g_str_equal@plt+0x3b190>
   48c04:	mov    rsi,QWORD PTR [rsp]
   48c08:	test   rsi,rsi
   48c0b:	jne    48b89 <g_str_equal@plt+0x3b8c9>
   48c11:	lea    rsi,[rip+0x1cac9]        # 656e1 <_fini@@Base+0x12f8d>
   48c18:	lea    rdx,[rbx+0x20]
   48c1c:	mov    rcx,r12
   48c1f:	mov    rdi,rbp
   48c22:	call   485d0 <g_str_equal@plt+0x3b310>
   48c27:	mov    rsi,QWORD PTR [rsp]
   48c2b:	test   rsi,rsi
   48c2e:	jne    48b89 <g_str_equal@plt+0x3b8c9>
   48c34:	lea    rdx,[rbx+0x28]
   48c38:	lea    rsi,[rip+0x1cb6a]        # 657a9 <_fini@@Base+0x13055>
   48c3f:	mov    rdi,rbp
   48c42:	call   286a0 <g_str_equal@plt+0x1b3e0>
   48c47:	test   al,al
   48c49:	je     48c6e <g_str_equal@plt+0x3b9ae>
   48c4b:	lea    rsi,[rip+0x1cb57]        # 657a9 <_fini@@Base+0x13055>
   48c52:	lea    rdx,[rbx+0x30]
   48c56:	mov    rcx,r12
   48c59:	mov    rdi,rbp
   48c5c:	call   28780 <g_str_equal@plt+0x1b4c0>
   48c61:	mov    rsi,QWORD PTR [rsp]
   48c65:	test   rsi,rsi
   48c68:	jne    48b89 <g_str_equal@plt+0x3b8c9>
   48c6e:	lea    rsi,[rip+0x1cb38]        # 657ad <_fini@@Base+0x13059>
   48c75:	lea    rdx,[rbx+0x38]
   48c79:	mov    rcx,r12
   48c7c:	mov    rdi,rbp
   48c7f:	call   29210 <g_str_equal@plt+0x1bf50>
   48c84:	mov    rsi,QWORD PTR [rsp]
   48c88:	test   rsi,rsi
   48c8b:	jne    48b89 <g_str_equal@plt+0x3b8c9>
   48c91:	lea    rdx,[rbx+0x40]
   48c95:	lea    rsi,[rip+0x1cb19]        # 657b5 <_fini@@Base+0x13061>
   48c9c:	mov    rdi,rbp
   48c9f:	call   286a0 <g_str_equal@plt+0x1b3e0>
   48ca4:	test   al,al
   48ca6:	jne    48ccc <g_str_equal@plt+0x3ba0c>
   48ca8:	lea    rsi,[rip+0x1cb11]        # 657c0 <_fini@@Base+0x1306c>
   48caf:	lea    rdx,[rbx+0x50]
   48cb3:	mov    rcx,r12
   48cb6:	mov    rdi,rbp
   48cb9:	call   486b0 <g_str_equal@plt+0x3b3f0>
   48cbe:	mov    rsi,QWORD PTR [rsp]
   48cc2:	jmp    48b89 <g_str_equal@plt+0x3b8c9>
   48cc7:	call   cd30 <__stack_chk_fail@plt>
   48ccc:	lea    rsi,[rip+0x1cae2]        # 657b5 <_fini@@Base+0x13061>
   48cd3:	lea    rdx,[rbx+0x48]
   48cd7:	mov    rcx,r12
   48cda:	mov    rdi,rbp
   48cdd:	call   48a60 <g_str_equal@plt+0x3b7a0>
   48ce2:	mov    rsi,QWORD PTR [rsp]
   48ce6:	test   rsi,rsi
   48ce9:	jne    48b89 <g_str_equal@plt+0x3b8c9>
   48cef:	jmp    48ca8 <g_str_equal@plt+0x3b9e8>
   48cf1:	nop    DWORD PTR [rax+rax*1+0x0]
   48cf6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   48d00:	push   r13
   48d02:	push   r12
   48d04:	mov    r13,rdx
   48d07:	push   rbp
   48d08:	push   rbx
   48d09:	mov    rdx,rsi
   48d0c:	mov    rbx,rsi
   48d0f:	lea    rsi,[rip+0x1ca6e]        # 65784 <_fini@@Base+0x13030>
   48d16:	mov    rbp,rdi
   48d19:	sub    rsp,0x18
   48d1d:	mov    r12,rsp
   48d20:	mov    QWORD PTR [rsp],0x0
   48d28:	mov    rcx,r12
   48d2b:	mov    rax,QWORD PTR fs:0x28
   48d34:	mov    QWORD PTR [rsp+0x8],rax
   48d39:	xor    eax,eax
   48d3b:	call   28780 <g_str_equal@plt+0x1b4c0>
   48d40:	mov    rsi,QWORD PTR [rsp]
   48d44:	test   rsi,rsi
   48d47:	je     48d70 <g_str_equal@plt+0x3bab0>
   48d49:	mov    rdi,r13
   48d4c:	call   3a4c0 <g_str_equal@plt+0x2d200>
   48d51:	mov    rax,QWORD PTR [rsp+0x8]
   48d56:	xor    rax,QWORD PTR fs:0x28
   48d5f:	jne    48d8c <g_str_equal@plt+0x3bacc>
   48d61:	add    rsp,0x18
   48d65:	pop    rbx
   48d66:	pop    rbp
   48d67:	pop    r12
   48d69:	pop    r13
   48d6b:	ret    
   48d6c:	nop    DWORD PTR [rax+0x0]
   48d70:	lea    rsi,[rip+0x1ca11]        # 65788 <_fini@@Base+0x13034>
   48d77:	lea    rdx,[rbx+0x8]
   48d7b:	mov    rcx,r12
   48d7e:	mov    rdi,rbp
   48d81:	call   488a0 <g_str_equal@plt+0x3b5e0>
   48d86:	mov    rsi,QWORD PTR [rsp]
   48d8a:	jmp    48d49 <g_str_equal@plt+0x3ba89>
   48d8c:	call   cd30 <__stack_chk_fail@plt>
   48d91:	nop    DWORD PTR [rax+rax*1+0x0]
   48d96:	nop    WORD PTR cs:[rax+rax*1+0x0]
   48da0:	push   r13
   48da2:	push   r12
   48da4:	mov    r13,rcx
   48da7:	push   rbp
   48da8:	push   rbx
   48da9:	mov    ecx,0x10
   48dae:	mov    rbp,rdi
   48db1:	mov    rbx,rdx
   48db4:	sub    rsp,0x18
   48db8:	mov    r12,rsp
   48dbb:	mov    QWORD PTR [rsp],0x0
   48dc3:	mov    r8,r12
   48dc6:	mov    rax,QWORD PTR fs:0x28
   48dcf:	mov    QWORD PTR [rsp+0x8],rax
   48dd4:	xor    eax,eax
   48dd6:	call   27da0 <g_str_equal@plt+0x1aae0>
   48ddb:	mov    rsi,QWORD PTR [rsp]
   48ddf:	test   rsi,rsi
   48de2:	je     48e10 <g_str_equal@plt+0x3bb50>
   48de4:	mov    rdi,r13
   48de7:	call   3a4c0 <g_str_equal@plt+0x2d200>
   48dec:	mov    rax,QWORD PTR [rsp+0x8]
   48df1:	xor    rax,QWORD PTR fs:0x28
   48dfa:	jne    48e6d <g_str_equal@plt+0x3bbad>
   48dfc:	add    rsp,0x18
   48e00:	pop    rbx
   48e01:	pop    rbp
   48e02:	pop    r12
   48e04:	pop    r13
   48e06:	ret    
   48e07:	nop    WORD PTR [rax+rax*1+0x0]
   48e10:	mov    rsi,QWORD PTR [rbx]
   48e13:	test   rsi,rsi
   48e16:	je     48e2a <g_str_equal@plt+0x3bb6a>
   48e18:	mov    rdx,r12
   48e1b:	mov    rdi,rbp
   48e1e:	call   48d00 <g_str_equal@plt+0x3ba40>
   48e23:	cmp    QWORD PTR [rsp],0x0
   48e28:	je     48e60 <g_str_equal@plt+0x3bba0>
   48e2a:	mov    rsi,rbx
   48e2d:	mov    rdi,rbp
   48e30:	call   28000 <g_str_equal@plt+0x1ad40>
   48e35:	mov    rsi,QWORD PTR [rsp]
   48e39:	test   rsi,rsi
   48e3c:	je     48de4 <g_str_equal@plt+0x3bb24>
   48e3e:	mov    rdi,rbp
   48e41:	call   28770 <g_str_equal@plt+0x1b4b0>
   48e46:	test   al,al
   48e48:	je     48e59 <g_str_equal@plt+0x3bb99>
   48e4a:	mov    rdi,QWORD PTR [rbx]
   48e4d:	call   44e30 <g_str_equal@plt+0x37b70>
   48e52:	mov    QWORD PTR [rbx],0x0
   48e59:	mov    rsi,QWORD PTR [rsp]
   48e5d:	jmp    48de4 <g_str_equal@plt+0x3bb24>
   48e5f:	nop
   48e60:	mov    rsi,r12
   48e63:	mov    rdi,rbp
   48e66:	call   27f50 <g_str_equal@plt+0x1ac90>
   48e6b:	jmp    48e2a <g_str_equal@plt+0x3bb6a>
   48e6d:	call   cd30 <__stack_chk_fail@plt>
   48e72:	nop    DWORD PTR [rax+0x0]
   48e76:	nop    WORD PTR cs:[rax+rax*1+0x0]
   48e80:	push   r14
   48e82:	push   r13
   48e84:	mov    r14,rcx
   48e87:	push   r12
   48e89:	push   rbp
   48e8a:	mov    ecx,0x10
   48e8f:	push   rbx
   48e90:	mov    rbp,rdi
   48e93:	mov    r13,rdx
   48e96:	sub    rsp,0x10
   48e9a:	mov    r12,rsp
   48e9d:	mov    QWORD PTR [rsp],0x0
   48ea5:	mov    r8,r12
   48ea8:	mov    rax,QWORD PTR fs:0x28
   48eb1:	mov    QWORD PTR [rsp+0x8],rax
   48eb6:	xor    eax,eax
   48eb8:	call   280a0 <g_str_equal@plt+0x1ade0>
   48ebd:	mov    rsi,QWORD PTR [rsp]
   48ec1:	test   rsi,rsi
   48ec4:	je     48ef0 <g_str_equal@plt+0x3bc30>
   48ec6:	mov    rdi,r14
   48ec9:	call   3a4c0 <g_str_equal@plt+0x2d200>
   48ece:	mov    rax,QWORD PTR [rsp+0x8]
   48ed3:	xor    rax,QWORD PTR fs:0x28
   48edc:	jne    48f84 <g_str_equal@plt+0x3bcc4>
   48ee2:	add    rsp,0x10
   48ee6:	pop    rbx
   48ee7:	pop    rbp
   48ee8:	pop    r12
   48eea:	pop    r13
   48eec:	pop    r14
   48eee:	ret    
   48eef:	nop
   48ef0:	mov    rbx,QWORD PTR [r13+0x0]
   48ef4:	test   rbx,rbx
   48ef7:	jne    48f18 <g_str_equal@plt+0x3bc58>
   48ef9:	jmp    48f77 <g_str_equal@plt+0x3bcb7>
   48efb:	nop    DWORD PTR [rax+rax*1+0x0]
   48f00:	mov    rsi,rbx
   48f03:	mov    edx,0x10
   48f08:	mov    rdi,rbp
   48f0b:	call   281f0 <g_str_equal@plt+0x1af30>
   48f10:	test   rax,rax
   48f13:	mov    rbx,rax
   48f16:	je     48f70 <g_str_equal@plt+0x3bcb0>
   48f18:	lea    rdx,[rbx+0x8]
   48f1c:	xor    esi,esi
   48f1e:	mov    rcx,r12
   48f21:	mov    rdi,rbp
   48f24:	call   48da0 <g_str_equal@plt+0x3bae0>
   48f29:	cmp    QWORD PTR [rsp],0x0
   48f2e:	je     48f00 <g_str_equal@plt+0x3bc40>
   48f30:	mov    rsi,r13
   48f33:	mov    rdi,rbp
   48f36:	call   28390 <g_str_equal@plt+0x1b0d0>
   48f3b:	mov    rsi,QWORD PTR [rsp]
   48f3f:	test   rsi,rsi
   48f42:	je     48ec6 <g_str_equal@plt+0x3bc06>
   48f44:	mov    rdi,rbp
   48f47:	call   28770 <g_str_equal@plt+0x1b4b0>
   48f4c:	test   al,al
   48f4e:	je     48f61 <g_str_equal@plt+0x3bca1>
   48f50:	mov    rdi,QWORD PTR [r13+0x0]
   48f54:	call   44e70 <g_str_equal@plt+0x37bb0>
   48f59:	mov    QWORD PTR [r13+0x0],0x0
   48f61:	mov    rsi,QWORD PTR [rsp]
   48f65:	jmp    48ec6 <g_str_equal@plt+0x3bc06>
   48f6a:	nop    WORD PTR [rax+rax*1+0x0]
   48f70:	cmp    QWORD PTR [rsp],0x0
   48f75:	jne    48f30 <g_str_equal@plt+0x3bc70>
   48f77:	mov    rsi,r12
   48f7a:	mov    rdi,rbp
   48f7d:	call   282e0 <g_str_equal@plt+0x1b020>
   48f82:	jmp    48f30 <g_str_equal@plt+0x3bc70>
   48f84:	call   cd30 <__stack_chk_fail@plt>
   48f89:	nop    DWORD PTR [rax+0x0]
   48f90:	push   rbx
   48f91:	mov    rbx,rdx
   48f94:	mov    rdx,rsi
   48f97:	lea    rsi,[rip+0x1c743]        # 656e1 <_fini@@Base+0x12f8d>
   48f9e:	sub    rsp,0x10
   48fa2:	mov    rcx,rsp
   48fa5:	mov    QWORD PTR [rsp],0x0
   48fad:	mov    rax,QWORD PTR fs:0x28
   48fb6:	mov    QWORD PTR [rsp+0x8],rax
   48fbb:	xor    eax,eax
   48fbd:	call   28780 <g_str_equal@plt+0x1b4c0>
   48fc2:	mov    rsi,QWORD PTR [rsp]
   48fc6:	mov    rdi,rbx
   48fc9:	call   3a4c0 <g_str_equal@plt+0x2d200>
   48fce:	mov    rax,QWORD PTR [rsp+0x8]
   48fd3:	xor    rax,QWORD PTR fs:0x28
   48fdc:	jne    48fe4 <g_str_equal@plt+0x3bd24>
   48fde:	add    rsp,0x10
   48fe2:	pop    rbx
   48fe3:	ret    
   48fe4:	call   cd30 <__stack_chk_fail@plt>
   48fe9:	nop    DWORD PTR [rax+0x0]
   48ff0:	push   r13
   48ff2:	push   r12
   48ff4:	mov    r13,rdx
   48ff7:	push   rbp
   48ff8:	push   rbx
   48ff9:	mov    rdx,rsi
   48ffc:	mov    rbx,rsi
   48fff:	lea    rsi,[rip+0x1c7c2]        # 657c8 <_fini@@Base+0x13074>
   49006:	mov    rbp,rdi
   49009:	sub    rsp,0x18
   4900d:	mov    r12,rsp
   49010:	mov    QWORD PTR [rsp],0x0
   49018:	mov    rcx,r12
   4901b:	mov    rax,QWORD PTR fs:0x28
   49024:	mov    QWORD PTR [rsp+0x8],rax
   49029:	xor    eax,eax
   4902b:	call   28780 <g_str_equal@plt+0x1b4c0>
   49030:	mov    rsi,QWORD PTR [rsp]
   49034:	test   rsi,rsi
   49037:	je     49060 <g_str_equal@plt+0x3bda0>
   49039:	mov    rdi,r13
   4903c:	call   3a4c0 <g_str_equal@plt+0x2d200>
   49041:	mov    rax,QWORD PTR [rsp+0x8]
   49046:	xor    rax,QWORD PTR fs:0x28
   4904f:	jne    490d4 <g_str_equal@plt+0x3be14>
   49055:	add    rsp,0x18
   49059:	pop    rbx
   4905a:	pop    rbp
   4905b:	pop    r12
   4905d:	pop    r13
   4905f:	ret    
   49060:	lea    rsi,[rip+0x19082]        # 620e9 <_fini@@Base+0xf995>
   49067:	lea    rdx,[rbx+0x8]
   4906b:	mov    rcx,r12
   4906e:	mov    rdi,rbp
   49071:	call   28780 <g_str_equal@plt+0x1b4c0>
   49076:	mov    rsi,QWORD PTR [rsp]
   4907a:	test   rsi,rsi
   4907d:	jne    49039 <g_str_equal@plt+0x3bd79>
   4907f:	lea    rsi,[rip+0x1c746]        # 657cc <_fini@@Base+0x13078>
   49086:	lea    rdx,[rbx+0x10]
   4908a:	mov    rcx,r12
   4908d:	mov    rdi,rbp
   49090:	call   29210 <g_str_equal@plt+0x1bf50>
   49095:	mov    rsi,QWORD PTR [rsp]
   49099:	test   rsi,rsi
   4909c:	jne    49039 <g_str_equal@plt+0x3bd79>
   4909e:	lea    rdx,[rbx+0x18]
   490a2:	lea    rsi,[rip+0x1c72c]        # 657d5 <_fini@@Base+0x13081>
   490a9:	mov    rdi,rbp
   490ac:	call   286a0 <g_str_equal@plt+0x1b3e0>
   490b1:	test   al,al
   490b3:	je     490cb <g_str_equal@plt+0x3be0b>
   490b5:	lea    rdx,[rbx+0x20]
   490b9:	lea    rsi,[rip+0x1c715]        # 657d5 <_fini@@Base+0x13081>
   490c0:	mov    rcx,r12
   490c3:	mov    rdi,rbp
   490c6:	call   28780 <g_str_equal@plt+0x1b4c0>
   490cb:	mov    rsi,QWORD PTR [rsp]
   490cf:	jmp    49039 <g_str_equal@plt+0x3bd79>
   490d4:	call   cd30 <__stack_chk_fail@plt>
   490d9:	nop    DWORD PTR [rax+0x0]
   490e0:	push   r13
   490e2:	push   r12
   490e4:	mov    r13,rdx
   490e7:	push   rbp
   490e8:	push   rbx
   490e9:	mov    rdx,rsi
   490ec:	mov    rbx,rsi
   490ef:	lea    rsi,[rip+0x1c6d2]        # 657c8 <_fini@@Base+0x13074>
   490f6:	mov    rbp,rdi
   490f9:	sub    rsp,0x18
   490fd:	mov    r12,rsp
   49100:	mov    QWORD PTR [rsp],0x0
   49108:	mov    rcx,r12
   4910b:	mov    rax,QWORD PTR fs:0x28
   49114:	mov    QWORD PTR [rsp+0x8],rax
   49119:	xor    eax,eax
   4911b:	call   28780 <g_str_equal@plt+0x1b4c0>
   49120:	mov    rsi,QWORD PTR [rsp]
   49124:	test   rsi,rsi
   49127:	je     49150 <g_str_equal@plt+0x3be90>
   49129:	mov    rdi,r13
   4912c:	call   3a4c0 <g_str_equal@plt+0x2d200>
   49131:	mov    rax,QWORD PTR [rsp+0x8]
   49136:	xor    rax,QWORD PTR fs:0x28
   4913f:	jne    4918b <g_str_equal@plt+0x3becb>
   49141:	add    rsp,0x18
   49145:	pop    rbx
   49146:	pop    rbp
   49147:	pop    r12
   49149:	pop    r13
   4914b:	ret    
   4914c:	nop    DWORD PTR [rax+0x0]
   49150:	lea    rsi,[rip+0x18f92]        # 620e9 <_fini@@Base+0xf995>
   49157:	lea    rdx,[rbx+0x8]
   4915b:	mov    rcx,r12
   4915e:	mov    rdi,rbp
   49161:	call   28780 <g_str_equal@plt+0x1b4c0>
   49166:	mov    rsi,QWORD PTR [rsp]
   4916a:	test   rsi,rsi
   4916d:	jne    49129 <g_str_equal@plt+0x3be69>
   4916f:	lea    rsi,[rip+0x1c656]        # 657cc <_fini@@Base+0x13078>
   49176:	lea    rdx,[rbx+0x10]
   4917a:	mov    rcx,r12
   4917d:	mov    rdi,rbp
   49180:	call   29210 <g_str_equal@plt+0x1bf50>
   49185:	mov    rsi,QWORD PTR [rsp]
   49189:	jmp    49129 <g_str_equal@plt+0x3be69>
   4918b:	call   cd30 <__stack_chk_fail@plt>
   49190:	push   rbx
   49191:	mov    rbx,rdx
   49194:	mov    rdx,rsi
   49197:	lea    rsi,[rip+0x166a8]        # 5f846 <_fini@@Base+0xd0f2>
   4919e:	sub    rsp,0x10
   491a2:	mov    rcx,rsp
   491a5:	mov    QWORD PTR [rsp],0x0
   491ad:	mov    rax,QWORD PTR fs:0x28
   491b6:	mov    QWORD PTR [rsp+0x8],rax
   491bb:	xor    eax,eax
   491bd:	call   28780 <g_str_equal@plt+0x1b4c0>
   491c2:	mov    rsi,QWORD PTR [rsp]
   491c6:	mov    rdi,rbx
   491c9:	call   3a4c0 <g_str_equal@plt+0x2d200>
   491ce:	mov    rax,QWORD PTR [rsp+0x8]
   491d3:	xor    rax,QWORD PTR fs:0x28
   491dc:	jne    491e4 <g_str_equal@plt+0x3bf24>
   491de:	add    rsp,0x10
   491e2:	pop    rbx
   491e3:	ret    
   491e4:	call   cd30 <__stack_chk_fail@plt>
   491e9:	nop    DWORD PTR [rax+0x0]
   491f0:	push   r13
   491f2:	push   r12
   491f4:	mov    r13,rdx
   491f7:	push   rbp
   491f8:	push   rbx
   491f9:	mov    rdx,rsi
   491fc:	mov    rbx,rsi
   491ff:	lea    rsi,[rip+0x1c5d9]        # 657df <_fini@@Base+0x1308b>
   49206:	mov    rbp,rdi
   49209:	sub    rsp,0x18
   4920d:	mov    r12,rsp
   49210:	mov    QWORD PTR [rsp],0x0
   49218:	mov    rcx,r12
   4921b:	mov    rax,QWORD PTR fs:0x28
   49224:	mov    QWORD PTR [rsp+0x8],rax
   49229:	xor    eax,eax
   4922b:	call   29210 <g_str_equal@plt+0x1bf50>
   49230:	mov    rsi,QWORD PTR [rsp]
   49234:	test   rsi,rsi
   49237:	je     49260 <g_str_equal@plt+0x3bfa0>
   49239:	mov    rdi,r13
   4923c:	call   3a4c0 <g_str_equal@plt+0x2d200>
   49241:	mov    rax,QWORD PTR [rsp+0x8]
   49246:	xor    rax,QWORD PTR fs:0x28
   4924f:	jne    49293 <g_str_equal@plt+0x3bfd3>
   49251:	add    rsp,0x18
   49255:	pop    rbx
   49256:	pop    rbp
   49257:	pop    r12
   49259:	pop    r13
   4925b:	ret    
   4925c:	nop    DWORD PTR [rax+0x0]
   49260:	lea    rdx,[rbx+0x8]
   49264:	lea    rsi,[rip+0x1c56a]        # 657d5 <_fini@@Base+0x13081>
   4926b:	mov    rdi,rbp
   4926e:	call   286a0 <g_str_equal@plt+0x1b3e0>
   49273:	test   al,al
   49275:	je     4928d <g_str_equal@plt+0x3bfcd>
   49277:	lea    rdx,[rbx+0x10]
   4927b:	lea    rsi,[rip+0x1c553]        # 657d5 <_fini@@Base+0x13081>
   49282:	mov    rcx,r12
   49285:	mov    rdi,rbp
   49288:	call   28780 <g_str_equal@plt+0x1b4c0>
   4928d:	mov    rsi,QWORD PTR [rsp]
   49291:	jmp    49239 <g_str_equal@plt+0x3bf79>
   49293:	call   cd30 <__stack_chk_fail@plt>
   49298:	nop    DWORD PTR [rax+rax*1+0x0]
   492a0:	push   r13
   492a2:	push   r12
   492a4:	mov    r13,rdx
   492a7:	push   rbp
   492a8:	push   rbx
   492a9:	mov    rdx,rsi
   492ac:	mov    rbx,rsi
   492af:	lea    rsi,[rip+0x1596f]        # 5ec25 <_fini@@Base+0xc4d1>
   492b6:	mov    rbp,rdi
   492b9:	sub    rsp,0x18
   492bd:	mov    r12,rsp
   492c0:	mov    QWORD PTR [rsp],0x0
   492c8:	mov    rcx,r12
   492cb:	mov    rax,QWORD PTR fs:0x28
   492d4:	mov    QWORD PTR [rsp+0x8],rax
   492d9:	xor    eax,eax
   492db:	call   29210 <g_str_equal@plt+0x1bf50>
   492e0:	mov    rsi,QWORD PTR [rsp]
   492e4:	test   rsi,rsi
   492e7:	je     49310 <g_str_equal@plt+0x3c050>
   492e9:	mov    rdi,r13
   492ec:	call   3a4c0 <g_str_equal@plt+0x2d200>
   492f1:	mov    rax,QWORD PTR [rsp+0x8]
   492f6:	xor    rax,QWORD PTR fs:0x28
   492ff:	jne    49362 <g_str_equal@plt+0x3c0a2>
   49301:	add    rsp,0x18
   49305:	pop    rbx
   49306:	pop    rbp
   49307:	pop    r12
   49309:	pop    r13
   4930b:	ret    
   4930c:	nop    DWORD PTR [rax+0x0]
   49310:	lea    rsi,[rip+0x14aa9]        # 5ddc0 <_fini@@Base+0xb66c>
   49317:	lea    rdx,[rbx+0x8]
   4931b:	mov    rcx,r12
   4931e:	mov    rdi,rbp
   49321:	call   29210 <g_str_equal@plt+0x1bf50>
   49326:	mov    rsi,QWORD PTR [rsp]
   4932a:	test   rsi,rsi
   4932d:	jne    492e9 <g_str_equal@plt+0x3c029>
   4932f:	lea    rdx,[rbx+0x10]
   49333:	lea    rsi,[rip+0x1c4b2]        # 657ec <_fini@@Base+0x13098>
   4933a:	mov    rdi,rbp
   4933d:	call   286a0 <g_str_equal@plt+0x1b3e0>
   49342:	test   al,al
   49344:	je     4935c <g_str_equal@plt+0x3c09c>
   49346:	lea    rdx,[rbx+0x18]
   4934a:	lea    rsi,[rip+0x1c49b]        # 657ec <_fini@@Base+0x13098>
   49351:	mov    rcx,r12
   49354:	mov    rdi,rbp
   49357:	call   29210 <g_str_equal@plt+0x1bf50>
   4935c:	mov    rsi,QWORD PTR [rsp]
   49360:	jmp    492e9 <g_str_equal@plt+0x3c029>
   49362:	call   cd30 <__stack_chk_fail@plt>
   49367:	nop    WORD PTR [rax+rax*1+0x0]
   49370:	push   r13
   49372:	push   r12
   49374:	mov    r13,rcx
   49377:	push   rbp
   49378:	push   rbx
   49379:	mov    ecx,0x20
   4937e:	mov    rbp,rdi
   49381:	mov    rbx,rdx
   49384:	sub    rsp,0x18
   49388:	mov    r12,rsp
   4938b:	mov    QWORD PTR [rsp],0x0
   49393:	mov    r8,r12
   49396:	mov    rax,QWORD PTR fs:0x28
   4939f:	mov    QWORD PTR [rsp+0x8],rax
   493a4:	xor    eax,eax
   493a6:	call   27da0 <g_str_equal@plt+0x1aae0>
   493ab:	mov    rsi,QWORD PTR [rsp]
   493af:	test   rsi,rsi
   493b2:	je     493e0 <g_str_equal@plt+0x3c120>
   493b4:	mov    rdi,r13
   493b7:	call   3a4c0 <g_str_equal@plt+0x2d200>
   493bc:	mov    rax,QWORD PTR [rsp+0x8]
   493c1:	xor    rax,QWORD PTR fs:0x28
   493ca:	jne    4943d <g_str_equal@plt+0x3c17d>
   493cc:	add    rsp,0x18
   493d0:	pop    rbx
   493d1:	pop    rbp
   493d2:	pop    r12
   493d4:	pop    r13
   493d6:	ret    
   493d7:	nop    WORD PTR [rax+rax*1+0x0]
   493e0:	mov    rsi,QWORD PTR [rbx]
   493e3:	test   rsi,rsi
   493e6:	je     493fa <g_str_equal@plt+0x3c13a>
   493e8:	mov    rdx,r12
   493eb:	mov    rdi,rbp
   493ee:	call   492a0 <g_str_equal@plt+0x3bfe0>
   493f3:	cmp    QWORD PTR [rsp],0x0
   493f8:	je     49430 <g_str_equal@plt+0x3c170>
   493fa:	mov    rsi,rbx
   493fd:	mov    rdi,rbp
   49400:	call   28000 <g_str_equal@plt+0x1ad40>
   49405:	mov    rsi,QWORD PTR [rsp]
   49409:	test   rsi,rsi
   4940c:	je     493b4 <g_str_equal@plt+0x3c0f4>
   4940e:	mov    rdi,rbp
   49411:	call   28770 <g_str_equal@plt+0x1b4b0>
   49416:	test   al,al
   49418:	je     49429 <g_str_equal@plt+0x3c169>
   4941a:	mov    rdi,QWORD PTR [rbx]
   4941d:	call   44eb0 <g_str_equal@plt+0x37bf0>
   49422:	mov    QWORD PTR [rbx],0x0
   49429:	mov    rsi,QWORD PTR [rsp]
   4942d:	jmp    493b4 <g_str_equal@plt+0x3c0f4>
   4942f:	nop
   49430:	mov    rsi,r12
   49433:	mov    rdi,rbp
   49436:	call   27f50 <g_str_equal@plt+0x1ac90>
   4943b:	jmp    493fa <g_str_equal@plt+0x3c13a>
   4943d:	call   cd30 <__stack_chk_fail@plt>
   49442:	nop    DWORD PTR [rax+0x0]
   49446:	nop    WORD PTR cs:[rax+rax*1+0x0]
   49450:	push   rbx
   49451:	mov    rbx,rdx
   49454:	mov    rdx,rsi
   49457:	lea    rsi,[rip+0x1c5da]        # 65a38 <_fini@@Base+0x132e4>
   4945e:	sub    rsp,0x10
   49462:	mov    rcx,rsp
   49465:	mov    QWORD PTR [rsp],0x0
   4946d:	mov    rax,QWORD PTR fs:0x28
   49476:	mov    QWORD PTR [rsp+0x8],rax
   4947b:	xor    eax,eax
   4947d:	call   29210 <g_str_equal@plt+0x1bf50>
   49482:	mov    rsi,QWORD PTR [rsp]
   49486:	mov    rdi,rbx
   49489:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4948e:	mov    rax,QWORD PTR [rsp+0x8]
   49493:	xor    rax,QWORD PTR fs:0x28
   4949c:	jne    494a4 <g_str_equal@plt+0x3c1e4>
   4949e:	add    rsp,0x10
   494a2:	pop    rbx
   494a3:	ret    
   494a4:	call   cd30 <__stack_chk_fail@plt>
   494a9:	nop    DWORD PTR [rax+0x0]
   494b0:	push   r14
   494b2:	push   r13
   494b4:	mov    r14,rcx
   494b7:	push   r12
   494b9:	push   rbp
   494ba:	mov    ecx,0x10
   494bf:	push   rbx
   494c0:	mov    rbp,rdi
   494c3:	mov    r13,rdx
   494c6:	sub    rsp,0x10
   494ca:	mov    r12,rsp
   494cd:	mov    QWORD PTR [rsp],0x0
   494d5:	mov    r8,r12
   494d8:	mov    rax,QWORD PTR fs:0x28
   494e1:	mov    QWORD PTR [rsp+0x8],rax
   494e6:	xor    eax,eax
   494e8:	call   280a0 <g_str_equal@plt+0x1ade0>
   494ed:	mov    rsi,QWORD PTR [rsp]
   494f1:	test   rsi,rsi
   494f4:	je     49520 <g_str_equal@plt+0x3c260>
   494f6:	mov    rdi,r14
   494f9:	call   3a4c0 <g_str_equal@plt+0x2d200>
   494fe:	mov    rax,QWORD PTR [rsp+0x8]
   49503:	xor    rax,QWORD PTR fs:0x28
   4950c:	jne    495b4 <g_str_equal@plt+0x3c2f4>
   49512:	add    rsp,0x10
   49516:	pop    rbx
   49517:	pop    rbp
   49518:	pop    r12
   4951a:	pop    r13
   4951c:	pop    r14
   4951e:	ret    
   4951f:	nop
   49520:	mov    rbx,QWORD PTR [r13+0x0]
   49524:	test   rbx,rbx
   49527:	jne    49548 <g_str_equal@plt+0x3c288>
   49529:	jmp    495a7 <g_str_equal@plt+0x3c2e7>
   4952b:	nop    DWORD PTR [rax+rax*1+0x0]
   49530:	mov    rsi,rbx
   49533:	mov    edx,0x10
   49538:	mov    rdi,rbp
   4953b:	call   281f0 <g_str_equal@plt+0x1af30>
   49540:	test   rax,rax
   49543:	mov    rbx,rax
   49546:	je     495a0 <g_str_equal@plt+0x3c2e0>
   49548:	lea    rdx,[rbx+0x8]
   4954c:	xor    esi,esi
   4954e:	mov    rcx,r12
   49551:	mov    rdi,rbp
   49554:	call   49370 <g_str_equal@plt+0x3c0b0>
   49559:	cmp    QWORD PTR [rsp],0x0
   4955e:	je     49530 <g_str_equal@plt+0x3c270>
   49560:	mov    rsi,r13
   49563:	mov    rdi,rbp
   49566:	call   28390 <g_str_equal@plt+0x1b0d0>
   4956b:	mov    rsi,QWORD PTR [rsp]
   4956f:	test   rsi,rsi
   49572:	je     494f6 <g_str_equal@plt+0x3c236>
   49574:	mov    rdi,rbp
   49577:	call   28770 <g_str_equal@plt+0x1b4b0>
   4957c:	test   al,al
   4957e:	je     49591 <g_str_equal@plt+0x3c2d1>
   49580:	mov    rdi,QWORD PTR [r13+0x0]
   49584:	call   44ef0 <g_str_equal@plt+0x37c30>
   49589:	mov    QWORD PTR [r13+0x0],0x0
   49591:	mov    rsi,QWORD PTR [rsp]
   49595:	jmp    494f6 <g_str_equal@plt+0x3c236>
   4959a:	nop    WORD PTR [rax+rax*1+0x0]
   495a0:	cmp    QWORD PTR [rsp],0x0
   495a5:	jne    49560 <g_str_equal@plt+0x3c2a0>
   495a7:	mov    rsi,r12
   495aa:	mov    rdi,rbp
   495ad:	call   282e0 <g_str_equal@plt+0x1b020>
   495b2:	jmp    49560 <g_str_equal@plt+0x3c2a0>
   495b4:	call   cd30 <__stack_chk_fail@plt>
   495b9:	nop    DWORD PTR [rax+0x0]
   495c0:	push   r13
   495c2:	push   r12
   495c4:	mov    r13,rdx
   495c7:	push   rbp
   495c8:	push   rbx
   495c9:	mov    rdx,rsi
   495cc:	mov    rbx,rsi
   495cf:	lea    rsi,[rip+0x1c462]        # 65a38 <_fini@@Base+0x132e4>
   495d6:	mov    rbp,rdi
   495d9:	sub    rsp,0x18
   495dd:	mov    r12,rsp
   495e0:	mov    QWORD PTR [rsp],0x0
   495e8:	mov    rcx,r12
   495eb:	mov    rax,QWORD PTR fs:0x28
   495f4:	mov    QWORD PTR [rsp+0x8],rax
   495f9:	xor    eax,eax
   495fb:	call   29210 <g_str_equal@plt+0x1bf50>
   49600:	mov    rsi,QWORD PTR [rsp]
   49604:	test   rsi,rsi
   49607:	je     49630 <g_str_equal@plt+0x3c370>
   49609:	mov    rdi,r13
   4960c:	call   3a4c0 <g_str_equal@plt+0x2d200>
   49611:	mov    rax,QWORD PTR [rsp+0x8]
   49616:	xor    rax,QWORD PTR fs:0x28
   4961f:	jne    4964c <g_str_equal@plt+0x3c38c>
   49621:	add    rsp,0x18
   49625:	pop    rbx
   49626:	pop    rbp
   49627:	pop    r12
   49629:	pop    r13
   4962b:	ret    
   4962c:	nop    DWORD PTR [rax+0x0]
   49630:	lea    rsi,[rip+0x1c1c1]        # 657f8 <_fini@@Base+0x130a4>
   49637:	lea    rdx,[rbx+0x8]
   4963b:	mov    rcx,r12
   4963e:	mov    rdi,rbp
   49641:	call   29210 <g_str_equal@plt+0x1bf50>
   49646:	mov    rsi,QWORD PTR [rsp]
   4964a:	jmp    49609 <g_str_equal@plt+0x3c349>
   4964c:	call   cd30 <__stack_chk_fail@plt>
   49651:	nop    DWORD PTR [rax+rax*1+0x0]
   49656:	nop    WORD PTR cs:[rax+rax*1+0x0]
   49660:	push   r13
   49662:	push   r12
   49664:	mov    r13,rdx
   49667:	push   rbp
   49668:	push   rbx
   49669:	mov    rdx,rsi
   4966c:	mov    rbx,rsi
   4966f:	lea    rsi,[rip+0x1c3c2]        # 65a38 <_fini@@Base+0x132e4>
   49676:	mov    rbp,rdi
   49679:	sub    rsp,0x18
   4967d:	mov    r12,rsp
   49680:	mov    QWORD PTR [rsp],0x0
   49688:	mov    rcx,r12
   4968b:	mov    rax,QWORD PTR fs:0x28
   49694:	mov    QWORD PTR [rsp+0x8],rax
   49699:	xor    eax,eax
   4969b:	call   29210 <g_str_equal@plt+0x1bf50>
   496a0:	mov    rsi,QWORD PTR [rsp]
   496a4:	test   rsi,rsi
   496a7:	je     496d0 <g_str_equal@plt+0x3c410>
   496a9:	mov    rdi,r13
   496ac:	call   3a4c0 <g_str_equal@plt+0x2d200>
   496b1:	mov    rax,QWORD PTR [rsp+0x8]
   496b6:	xor    rax,QWORD PTR fs:0x28
   496bf:	jne    4970b <g_str_equal@plt+0x3c44b>
   496c1:	add    rsp,0x18
   496c5:	pop    rbx
   496c6:	pop    rbp
   496c7:	pop    r12
   496c9:	pop    r13
   496cb:	ret    
   496cc:	nop    DWORD PTR [rax+0x0]
   496d0:	lea    rsi,[rip+0x1c121]        # 657f8 <_fini@@Base+0x130a4>
   496d7:	lea    rdx,[rbx+0x8]
   496db:	mov    rcx,r12
   496de:	mov    rdi,rbp
   496e1:	call   29210 <g_str_equal@plt+0x1bf50>
   496e6:	mov    rsi,QWORD PTR [rsp]
   496ea:	test   rsi,rsi
   496ed:	jne    496a9 <g_str_equal@plt+0x3c3e9>
   496ef:	lea    rsi,[rip+0x16150]        # 5f846 <_fini@@Base+0xd0f2>
   496f6:	lea    rdx,[rbx+0x10]
   496fa:	mov    rcx,r12
   496fd:	mov    rdi,rbp
   49700:	call   29450 <g_str_equal@plt+0x1c190>
   49705:	mov    rsi,QWORD PTR [rsp]
   49709:	jmp    496a9 <g_str_equal@plt+0x3c3e9>
   4970b:	call   cd30 <__stack_chk_fail@plt>
   49710:	push   r13
   49712:	push   r12
   49714:	mov    r13,rdx
   49717:	push   rbp
   49718:	push   rbx
   49719:	mov    rdx,rsi
   4971c:	mov    rbx,rsi
   4971f:	lea    rsi,[rip+0x1c050]        # 65776 <_fini@@Base+0x13022>
   49726:	mov    rbp,rdi
   49729:	sub    rsp,0x18
   4972d:	mov    r12,rsp
   49730:	mov    QWORD PTR [rsp],0x0
   49738:	mov    rcx,r12
   4973b:	mov    rax,QWORD PTR fs:0x28
   49744:	mov    QWORD PTR [rsp+0x8],rax
   49749:	xor    eax,eax
   4974b:	call   29210 <g_str_equal@plt+0x1bf50>
   49750:	mov    rsi,QWORD PTR [rsp]
   49754:	test   rsi,rsi
   49757:	je     49780 <g_str_equal@plt+0x3c4c0>
   49759:	mov    rdi,r13
   4975c:	call   3a4c0 <g_str_equal@plt+0x2d200>
   49761:	mov    rax,QWORD PTR [rsp+0x8]
   49766:	xor    rax,QWORD PTR fs:0x28
   4976f:	jne    497d2 <g_str_equal@plt+0x3c512>
   49771:	add    rsp,0x18
   49775:	pop    rbx
   49776:	pop    rbp
   49777:	pop    r12
   49779:	pop    r13
   4977b:	ret    
   4977c:	nop    DWORD PTR [rax+0x0]
   49780:	lea    rsi,[rip+0x1c07a]        # 65801 <_fini@@Base+0x130ad>
   49787:	lea    rdx,[rbx+0x8]
   4978b:	mov    rcx,r12
   4978e:	mov    rdi,rbp
   49791:	call   29210 <g_str_equal@plt+0x1bf50>
   49796:	mov    rsi,QWORD PTR [rsp]
   4979a:	test   rsi,rsi
   4979d:	jne    49759 <g_str_equal@plt+0x3c499>
   4979f:	lea    rdx,[rbx+0x10]
   497a3:	lea    rsi,[rip+0x1c05e]        # 65808 <_fini@@Base+0x130b4>
   497aa:	mov    rdi,rbp
   497ad:	call   286a0 <g_str_equal@plt+0x1b3e0>
   497b2:	test   al,al
   497b4:	je     497cc <g_str_equal@plt+0x3c50c>
   497b6:	lea    rdx,[rbx+0x18]
   497ba:	lea    rsi,[rip+0x1c047]        # 65808 <_fini@@Base+0x130b4>
   497c1:	mov    rcx,r12
   497c4:	mov    rdi,rbp
   497c7:	call   29210 <g_str_equal@plt+0x1bf50>
   497cc:	mov    rsi,QWORD PTR [rsp]
   497d0:	jmp    49759 <g_str_equal@plt+0x3c499>
   497d2:	call   cd30 <__stack_chk_fail@plt>
   497d7:	nop    WORD PTR [rax+rax*1+0x0]
   497e0:	push   r13
   497e2:	push   r12
   497e4:	mov    r13,rdx
   497e7:	push   rbp
   497e8:	push   rbx
   497e9:	mov    rdx,rsi
   497ec:	mov    rbx,rsi
   497ef:	lea    rsi,[rip+0x1542f]        # 5ec25 <_fini@@Base+0xc4d1>
   497f6:	mov    rbp,rdi
   497f9:	sub    rsp,0x18
   497fd:	mov    r12,rsp
   49800:	mov    QWORD PTR [rsp],0x0
   49808:	mov    rcx,r12
   4980b:	mov    rax,QWORD PTR fs:0x28
   49814:	mov    QWORD PTR [rsp+0x8],rax
   49819:	xor    eax,eax
   4981b:	call   29210 <g_str_equal@plt+0x1bf50>
   49820:	mov    rsi,QWORD PTR [rsp]
   49824:	test   rsi,rsi
   49827:	je     49850 <g_str_equal@plt+0x3c590>
   49829:	mov    rdi,r13
   4982c:	call   3a4c0 <g_str_equal@plt+0x2d200>
   49831:	mov    rax,QWORD PTR [rsp+0x8]
   49836:	xor    rax,QWORD PTR fs:0x28
   4983f:	jne    498bc <g_str_equal@plt+0x3c5fc>
   49841:	add    rsp,0x18
   49845:	pop    rbx
   49846:	pop    rbp
   49847:	pop    r12
   49849:	pop    r13
   4984b:	ret    
   4984c:	nop    DWORD PTR [rax+0x0]
   49850:	lea    rdx,[rbx+0x8]
   49854:	lea    rsi,[rip+0x13d8d]        # 5d5e8 <_fini@@Base+0xae94>
   4985b:	mov    rdi,rbp
   4985e:	call   286a0 <g_str_equal@plt+0x1b3e0>
   49863:	test   al,al
   49865:	je     49886 <g_str_equal@plt+0x3c5c6>
   49867:	lea    rsi,[rip+0x13d7a]        # 5d5e8 <_fini@@Base+0xae94>
   4986e:	lea    rdx,[rbx+0x9]
   49872:	mov    rcx,r12
   49875:	mov    rdi,rbp
   49878:	call   29120 <g_str_equal@plt+0x1be60>
   4987d:	mov    rsi,QWORD PTR [rsp]
   49881:	test   rsi,rsi
   49884:	jne    49829 <g_str_equal@plt+0x3c569>
   49886:	lea    rdx,[rbx+0xa]
   4988a:	lea    rsi,[rip+0x13cb8]        # 5d549 <_fini@@Base+0xadf5>
   49891:	mov    rdi,rbp
   49894:	call   286a0 <g_str_equal@plt+0x1b3e0>
   49899:	test   al,al
   4989b:	je     498b3 <g_str_equal@plt+0x3c5f3>
   4989d:	lea    rdx,[rbx+0x10]
   498a1:	lea    rsi,[rip+0x13ca1]        # 5d549 <_fini@@Base+0xadf5>
   498a8:	mov    rcx,r12
   498ab:	mov    rdi,rbp
   498ae:	call   29210 <g_str_equal@plt+0x1bf50>
   498b3:	mov    rsi,QWORD PTR [rsp]
   498b7:	jmp    49829 <g_str_equal@plt+0x3c569>
   498bc:	call   cd30 <__stack_chk_fail@plt>
   498c1:	nop    DWORD PTR [rax+rax*1+0x0]
   498c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   498d0:	push   r13
   498d2:	push   r12
   498d4:	mov    r13,rcx
   498d7:	push   rbp
   498d8:	push   rbx
   498d9:	mov    ecx,0x18
   498de:	mov    rbp,rdi
   498e1:	mov    rbx,rdx
   498e4:	sub    rsp,0x18
   498e8:	mov    r12,rsp
   498eb:	mov    QWORD PTR [rsp],0x0
   498f3:	mov    r8,r12
   498f6:	mov    rax,QWORD PTR fs:0x28
   498ff:	mov    QWORD PTR [rsp+0x8],rax
   49904:	xor    eax,eax
   49906:	call   27da0 <g_str_equal@plt+0x1aae0>
   4990b:	mov    rsi,QWORD PTR [rsp]
   4990f:	test   rsi,rsi
   49912:	je     49940 <g_str_equal@plt+0x3c680>
   49914:	mov    rdi,r13
   49917:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4991c:	mov    rax,QWORD PTR [rsp+0x8]
   49921:	xor    rax,QWORD PTR fs:0x28
   4992a:	jne    4999d <g_str_equal@plt+0x3c6dd>
   4992c:	add    rsp,0x18
   49930:	pop    rbx
   49931:	pop    rbp
   49932:	pop    r12
   49934:	pop    r13
   49936:	ret    
   49937:	nop    WORD PTR [rax+rax*1+0x0]
   49940:	mov    rsi,QWORD PTR [rbx]
   49943:	test   rsi,rsi
   49946:	je     4995a <g_str_equal@plt+0x3c69a>
   49948:	mov    rdx,r12
   4994b:	mov    rdi,rbp
   4994e:	call   497e0 <g_str_equal@plt+0x3c520>
   49953:	cmp    QWORD PTR [rsp],0x0
   49958:	je     49990 <g_str_equal@plt+0x3c6d0>
   4995a:	mov    rsi,rbx
   4995d:	mov    rdi,rbp
   49960:	call   28000 <g_str_equal@plt+0x1ad40>
   49965:	mov    rsi,QWORD PTR [rsp]
   49969:	test   rsi,rsi
   4996c:	je     49914 <g_str_equal@plt+0x3c654>
   4996e:	mov    rdi,rbp
   49971:	call   28770 <g_str_equal@plt+0x1b4b0>
   49976:	test   al,al
   49978:	je     49989 <g_str_equal@plt+0x3c6c9>
   4997a:	mov    rdi,QWORD PTR [rbx]
   4997d:	call   44f30 <g_str_equal@plt+0x37c70>
   49982:	mov    QWORD PTR [rbx],0x0
   49989:	mov    rsi,QWORD PTR [rsp]
   4998d:	jmp    49914 <g_str_equal@plt+0x3c654>
   4998f:	nop
   49990:	mov    rsi,r12
   49993:	mov    rdi,rbp
   49996:	call   27f50 <g_str_equal@plt+0x1ac90>
   4999b:	jmp    4995a <g_str_equal@plt+0x3c69a>
   4999d:	call   cd30 <__stack_chk_fail@plt>
   499a2:	nop    DWORD PTR [rax+0x0]
   499a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   499b0:	push   r12
   499b2:	push   rbp
   499b3:	mov    r12,rdx
   499b6:	push   rbx
   499b7:	mov    rdx,rsi
   499ba:	mov    rbx,rsi
   499bd:	lea    rsi,[rip+0x1be48]        # 6580c <_fini@@Base+0x130b8>
   499c4:	mov    rbp,rdi
   499c7:	sub    rsp,0x10
   499cb:	mov    rax,QWORD PTR fs:0x28
   499d4:	mov    QWORD PTR [rsp+0x8],rax
   499d9:	xor    eax,eax
   499db:	mov    QWORD PTR [rsp],0x0
   499e3:	call   286a0 <g_str_equal@plt+0x1b3e0>
   499e8:	test   al,al
   499ea:	je     49a30 <g_str_equal@plt+0x3c770>
   499ec:	lea    rsi,[rip+0x1be19]        # 6580c <_fini@@Base+0x130b8>
   499f3:	lea    rdx,[rbx+0x8]
   499f7:	mov    rcx,rsp
   499fa:	mov    rdi,rbp
   499fd:	call   29210 <g_str_equal@plt+0x1bf50>
   49a02:	mov    rsi,QWORD PTR [rsp]
   49a06:	test   rsi,rsi
   49a09:	je     49a30 <g_str_equal@plt+0x3c770>
   49a0b:	mov    rdi,r12
   49a0e:	call   3a4c0 <g_str_equal@plt+0x2d200>
   49a13:	mov    rax,QWORD PTR [rsp+0x8]
   49a18:	xor    rax,QWORD PTR fs:0x28
   49a21:	jne    49a6c <g_str_equal@plt+0x3c7ac>
   49a23:	add    rsp,0x10
   49a27:	pop    rbx
   49a28:	pop    rbp
   49a29:	pop    r12
   49a2b:	ret    
   49a2c:	nop    DWORD PTR [rax+0x0]
   49a30:	lea    rdx,[rbx+0x10]
   49a34:	lea    rsi,[rip+0x13bad]        # 5d5e8 <_fini@@Base+0xae94>
   49a3b:	mov    rdi,rbp
   49a3e:	call   286a0 <g_str_equal@plt+0x1b3e0>
   49a43:	test   al,al
   49a45:	jne    49a50 <g_str_equal@plt+0x3c790>
   49a47:	mov    rsi,QWORD PTR [rsp]
   49a4b:	jmp    49a0b <g_str_equal@plt+0x3c74b>
   49a4d:	nop    DWORD PTR [rax]
   49a50:	lea    rsi,[rip+0x13b91]        # 5d5e8 <_fini@@Base+0xae94>
   49a57:	lea    rdx,[rbx+0x11]
   49a5b:	mov    rcx,rsp
   49a5e:	mov    rdi,rbp
   49a61:	call   29120 <g_str_equal@plt+0x1be60>
   49a66:	mov    rsi,QWORD PTR [rsp]
   49a6a:	jmp    49a0b <g_str_equal@plt+0x3c74b>
   49a6c:	call   cd30 <__stack_chk_fail@plt>
   49a71:	nop    DWORD PTR [rax+rax*1+0x0]
   49a76:	nop    WORD PTR cs:[rax+rax*1+0x0]
   49a80:	push   r14
   49a82:	push   r13
   49a84:	mov    r14,rcx
   49a87:	push   r12
   49a89:	push   rbp
   49a8a:	mov    ecx,0x10
   49a8f:	push   rbx
   49a90:	mov    rbp,rdi
   49a93:	mov    r13,rdx
   49a96:	sub    rsp,0x10
   49a9a:	mov    r12,rsp
   49a9d:	mov    QWORD PTR [rsp],0x0
   49aa5:	mov    r8,r12
   49aa8:	mov    rax,QWORD PTR fs:0x28
   49ab1:	mov    QWORD PTR [rsp+0x8],rax
   49ab6:	xor    eax,eax
   49ab8:	call   280a0 <g_str_equal@plt+0x1ade0>
   49abd:	mov    rsi,QWORD PTR [rsp]
   49ac1:	test   rsi,rsi
   49ac4:	je     49af0 <g_str_equal@plt+0x3c830>
   49ac6:	mov    rdi,r14
   49ac9:	call   3a4c0 <g_str_equal@plt+0x2d200>
   49ace:	mov    rax,QWORD PTR [rsp+0x8]
   49ad3:	xor    rax,QWORD PTR fs:0x28
   49adc:	jne    49b84 <g_str_equal@plt+0x3c8c4>
   49ae2:	add    rsp,0x10
   49ae6:	pop    rbx
   49ae7:	pop    rbp
   49ae8:	pop    r12
   49aea:	pop    r13
   49aec:	pop    r14
   49aee:	ret    
   49aef:	nop
   49af0:	mov    rbx,QWORD PTR [r13+0x0]
   49af4:	test   rbx,rbx
   49af7:	jne    49b18 <g_str_equal@plt+0x3c858>
   49af9:	jmp    49b77 <g_str_equal@plt+0x3c8b7>
   49afb:	nop    DWORD PTR [rax+rax*1+0x0]
   49b00:	mov    rsi,rbx
   49b03:	mov    edx,0x10
   49b08:	mov    rdi,rbp
   49b0b:	call   281f0 <g_str_equal@plt+0x1af30>
   49b10:	test   rax,rax
   49b13:	mov    rbx,rax
   49b16:	je     49b70 <g_str_equal@plt+0x3c8b0>
   49b18:	lea    rdx,[rbx+0x8]
   49b1c:	xor    esi,esi
   49b1e:	mov    rcx,r12
   49b21:	mov    rdi,rbp
   49b24:	call   498d0 <g_str_equal@plt+0x3c610>
   49b29:	cmp    QWORD PTR [rsp],0x0
   49b2e:	je     49b00 <g_str_equal@plt+0x3c840>
   49b30:	mov    rsi,r13
   49b33:	mov    rdi,rbp
   49b36:	call   28390 <g_str_equal@plt+0x1b0d0>
   49b3b:	mov    rsi,QWORD PTR [rsp]
   49b3f:	test   rsi,rsi
   49b42:	je     49ac6 <g_str_equal@plt+0x3c806>
   49b44:	mov    rdi,rbp
   49b47:	call   28770 <g_str_equal@plt+0x1b4b0>
   49b4c:	test   al,al
   49b4e:	je     49b61 <g_str_equal@plt+0x3c8a1>
   49b50:	mov    rdi,QWORD PTR [r13+0x0]
   49b54:	call   44f70 <g_str_equal@plt+0x37cb0>
   49b59:	mov    QWORD PTR [r13+0x0],0x0
   49b61:	mov    rsi,QWORD PTR [rsp]
   49b65:	jmp    49ac6 <g_str_equal@plt+0x3c806>
   49b6a:	nop    WORD PTR [rax+rax*1+0x0]
   49b70:	cmp    QWORD PTR [rsp],0x0
   49b75:	jne    49b30 <g_str_equal@plt+0x3c870>
   49b77:	mov    rsi,r12
   49b7a:	mov    rdi,rbp
   49b7d:	call   282e0 <g_str_equal@plt+0x1b020>
   49b82:	jmp    49b30 <g_str_equal@plt+0x3c870>
   49b84:	call   cd30 <__stack_chk_fail@plt>
   49b89:	nop    DWORD PTR [rax+0x0]
   49b90:	push   rbx
   49b91:	mov    rbx,rdx
   49b94:	mov    rdx,rsi
   49b97:	lea    rsi,[rip+0x1bc79]        # 65817 <_fini@@Base+0x130c3>
   49b9e:	sub    rsp,0x10
   49ba2:	mov    rcx,rsp
   49ba5:	mov    QWORD PTR [rsp],0x0
   49bad:	mov    rax,QWORD PTR fs:0x28
   49bb6:	mov    QWORD PTR [rsp+0x8],rax
   49bbb:	xor    eax,eax
   49bbd:	call   29210 <g_str_equal@plt+0x1bf50>
   49bc2:	mov    rsi,QWORD PTR [rsp]
   49bc6:	mov    rdi,rbx
   49bc9:	call   3a4c0 <g_str_equal@plt+0x2d200>
   49bce:	mov    rax,QWORD PTR [rsp+0x8]
   49bd3:	xor    rax,QWORD PTR fs:0x28
   49bdc:	jne    49be4 <g_str_equal@plt+0x3c924>
   49bde:	add    rsp,0x10
   49be2:	pop    rbx
   49be3:	ret    
   49be4:	call   cd30 <__stack_chk_fail@plt>
   49be9:	nop    DWORD PTR [rax+0x0]
   49bf0:	push   rbx
   49bf1:	mov    rbx,rdx
   49bf4:	mov    rdx,rsi
   49bf7:	lea    rsi,[rip+0x1bc19]        # 65817 <_fini@@Base+0x130c3>
   49bfe:	sub    rsp,0x10
   49c02:	mov    rcx,rsp
   49c05:	mov    QWORD PTR [rsp],0x0
   49c0d:	mov    rax,QWORD PTR fs:0x28
   49c16:	mov    QWORD PTR [rsp+0x8],rax
   49c1b:	xor    eax,eax
   49c1d:	call   29210 <g_str_equal@plt+0x1bf50>
   49c22:	mov    rsi,QWORD PTR [rsp]
   49c26:	mov    rdi,rbx
   49c29:	call   3a4c0 <g_str_equal@plt+0x2d200>
   49c2e:	mov    rax,QWORD PTR [rsp+0x8]
   49c33:	xor    rax,QWORD PTR fs:0x28
   49c3c:	jne    49c44 <g_str_equal@plt+0x3c984>
   49c3e:	add    rsp,0x10
   49c42:	pop    rbx
   49c43:	ret    
   49c44:	call   cd30 <__stack_chk_fail@plt>
   49c49:	nop    DWORD PTR [rax+0x0]
   49c50:	push   rbx
   49c51:	mov    rbx,rdx
   49c54:	mov    rdx,rsi
   49c57:	lea    rsi,[rip+0x16af5]        # 60753 <_fini@@Base+0xdfff>
   49c5e:	sub    rsp,0x10
   49c62:	mov    rcx,rsp
   49c65:	mov    QWORD PTR [rsp],0x0
   49c6d:	mov    rax,QWORD PTR fs:0x28
   49c76:	mov    QWORD PTR [rsp+0x8],rax
   49c7b:	xor    eax,eax
   49c7d:	call   29120 <g_str_equal@plt+0x1be60>
   49c82:	mov    rsi,QWORD PTR [rsp]
   49c86:	mov    rdi,rbx
   49c89:	call   3a4c0 <g_str_equal@plt+0x2d200>
   49c8e:	mov    rax,QWORD PTR [rsp+0x8]
   49c93:	xor    rax,QWORD PTR fs:0x28
   49c9c:	jne    49ca4 <g_str_equal@plt+0x3c9e4>
   49c9e:	add    rsp,0x10
   49ca2:	pop    rbx
   49ca3:	ret    
   49ca4:	call   cd30 <__stack_chk_fail@plt>
   49ca9:	nop    DWORD PTR [rax+0x0]
   49cb0:	push   r13
   49cb2:	push   r12
   49cb4:	mov    r13,rdx
   49cb7:	push   rbp
   49cb8:	push   rbx
   49cb9:	mov    rdx,rsi
   49cbc:	mov    rbx,rsi
   49cbf:	lea    rsi,[rip+0x1bb5a]        # 65820 <_fini@@Base+0x130cc>
   49cc6:	mov    rbp,rdi
   49cc9:	sub    rsp,0x18
   49ccd:	mov    r12,rsp
   49cd0:	mov    QWORD PTR [rsp],0x0
   49cd8:	mov    rcx,r12
   49cdb:	mov    rax,QWORD PTR fs:0x28
   49ce4:	mov    QWORD PTR [rsp+0x8],rax
   49ce9:	xor    eax,eax
   49ceb:	call   29210 <g_str_equal@plt+0x1bf50>
   49cf0:	mov    rsi,QWORD PTR [rsp]
   49cf4:	test   rsi,rsi
   49cf7:	je     49d20 <g_str_equal@plt+0x3ca60>
   49cf9:	mov    rdi,r13
   49cfc:	call   3a4c0 <g_str_equal@plt+0x2d200>
   49d01:	mov    rax,QWORD PTR [rsp+0x8]
   49d06:	xor    rax,QWORD PTR fs:0x28
   49d0f:	jne    49d8c <g_str_equal@plt+0x3cacc>
   49d11:	add    rsp,0x18
   49d15:	pop    rbx
   49d16:	pop    rbp
   49d17:	pop    r12
   49d19:	pop    r13
   49d1b:	ret    
   49d1c:	nop    DWORD PTR [rax+0x0]
   49d20:	lea    rdx,[rbx+0x8]
   49d24:	lea    rsi,[rip+0x1ba59]        # 65784 <_fini@@Base+0x13030>
   49d2b:	mov    rdi,rbp
   49d2e:	call   286a0 <g_str_equal@plt+0x1b3e0>
   49d33:	test   al,al
   49d35:	je     49d56 <g_str_equal@plt+0x3ca96>
   49d37:	lea    rsi,[rip+0x1ba46]        # 65784 <_fini@@Base+0x13030>
   49d3e:	lea    rdx,[rbx+0x10]
   49d42:	mov    rcx,r12
   49d45:	mov    rdi,rbp
   49d48:	call   29210 <g_str_equal@plt+0x1bf50>
   49d4d:	mov    rsi,QWORD PTR [rsp]
   49d51:	test   rsi,rsi
   49d54:	jne    49cf9 <g_str_equal@plt+0x3ca39>
   49d56:	lea    rdx,[rbx+0x18]
   49d5a:	lea    rsi,[rip+0x1b980]        # 656e1 <_fini@@Base+0x12f8d>
   49d61:	mov    rdi,rbp
   49d64:	call   286a0 <g_str_equal@plt+0x1b3e0>
   49d69:	test   al,al
   49d6b:	je     49d83 <g_str_equal@plt+0x3cac3>
   49d6d:	lea    rdx,[rbx+0x20]
   49d71:	lea    rsi,[rip+0x1b969]        # 656e1 <_fini@@Base+0x12f8d>
   49d78:	mov    rcx,r12
   49d7b:	mov    rdi,rbp
   49d7e:	call   29210 <g_str_equal@plt+0x1bf50>
   49d83:	mov    rsi,QWORD PTR [rsp]
   49d87:	jmp    49cf9 <g_str_equal@plt+0x3ca39>
   49d8c:	call   cd30 <__stack_chk_fail@plt>
   49d91:	nop    DWORD PTR [rax+rax*1+0x0]
   49d96:	nop    WORD PTR cs:[rax+rax*1+0x0]
   49da0:	push   rbx
   49da1:	mov    rbx,rdx
   49da4:	mov    rdx,rsi
   49da7:	lea    rsi,[rip+0x1b933]        # 656e1 <_fini@@Base+0x12f8d>
   49dae:	sub    rsp,0x10
   49db2:	mov    rcx,rsp
   49db5:	mov    QWORD PTR [rsp],0x0
   49dbd:	mov    rax,QWORD PTR fs:0x28
   49dc6:	mov    QWORD PTR [rsp+0x8],rax
   49dcb:	xor    eax,eax
   49dcd:	call   29210 <g_str_equal@plt+0x1bf50>
   49dd2:	mov    rsi,QWORD PTR [rsp]
   49dd6:	mov    rdi,rbx
   49dd9:	call   3a4c0 <g_str_equal@plt+0x2d200>
   49dde:	mov    rax,QWORD PTR [rsp+0x8]
   49de3:	xor    rax,QWORD PTR fs:0x28
   49dec:	jne    49df4 <g_str_equal@plt+0x3cb34>
   49dee:	add    rsp,0x10
   49df2:	pop    rbx
   49df3:	ret    
   49df4:	call   cd30 <__stack_chk_fail@plt>
   49df9:	nop    DWORD PTR [rax+0x0]
   49e00:	push   r13
   49e02:	push   r12
   49e04:	mov    r13,rdx
   49e07:	push   rbp
   49e08:	push   rbx
   49e09:	mov    rdx,rsi
   49e0c:	mov    rbx,rsi
   49e0f:	lea    rsi,[rip+0x1b960]        # 65776 <_fini@@Base+0x13022>
   49e16:	mov    rbp,rdi
   49e19:	sub    rsp,0x18
   49e1d:	mov    rax,QWORD PTR fs:0x28
   49e26:	mov    QWORD PTR [rsp+0x8],rax
   49e2b:	xor    eax,eax
   49e2d:	mov    QWORD PTR [rsp],0x0
   49e35:	mov    r12,rsp
   49e38:	call   286a0 <g_str_equal@plt+0x1b3e0>
   49e3d:	test   al,al
   49e3f:	je     49e88 <g_str_equal@plt+0x3cbc8>
   49e41:	lea    rsi,[rip+0x1b92e]        # 65776 <_fini@@Base+0x13022>
   49e48:	lea    rdx,[rbx+0x8]
   49e4c:	mov    rcx,r12
   49e4f:	mov    rdi,rbp
   49e52:	call   29210 <g_str_equal@plt+0x1bf50>
   49e57:	mov    rsi,QWORD PTR [rsp]
   49e5b:	test   rsi,rsi
   49e5e:	je     49e88 <g_str_equal@plt+0x3cbc8>
   49e60:	mov    rdi,r13
   49e63:	call   3a4c0 <g_str_equal@plt+0x2d200>
   49e68:	mov    rax,QWORD PTR [rsp+0x8]
   49e6d:	xor    rax,QWORD PTR fs:0x28
   49e76:	jne    49ea4 <g_str_equal@plt+0x3cbe4>
   49e78:	add    rsp,0x18
   49e7c:	pop    rbx
   49e7d:	pop    rbp
   49e7e:	pop    r12
   49e80:	pop    r13
   49e82:	ret    
   49e83:	nop    DWORD PTR [rax+rax*1+0x0]
   49e88:	lea    rsi,[rip+0x1bba9]        # 65a38 <_fini@@Base+0x132e4>
   49e8f:	lea    rdx,[rbx+0x10]
   49e93:	mov    rcx,r12
   49e96:	mov    rdi,rbp
   49e99:	call   29210 <g_str_equal@plt+0x1bf50>
   49e9e:	mov    rsi,QWORD PTR [rsp]
   49ea2:	jmp    49e60 <g_str_equal@plt+0x3cba0>
   49ea4:	call   cd30 <__stack_chk_fail@plt>
   49ea9:	nop    DWORD PTR [rax+0x0]
   49eb0:	push   rbx
   49eb1:	mov    r8,rcx
   49eb4:	mov    rbx,rdx
   49eb7:	lea    rcx,[rip+0x237142]        # 281000 <_fini@@Base+0x22e8ac>
   49ebe:	sub    rsp,0x10
   49ec2:	mov    rax,QWORD PTR fs:0x28
   49ecb:	mov    QWORD PTR [rsp+0x8],rax
   49ed0:	xor    eax,eax
   49ed2:	mov    eax,DWORD PTR [rdx]
   49ed4:	lea    rdx,[rsp+0x4]
   49ed9:	mov    DWORD PTR [rsp+0x4],eax
   49edd:	call   296a0 <g_str_equal@plt+0x1c3e0>
   49ee2:	mov    eax,DWORD PTR [rsp+0x4]
   49ee6:	mov    DWORD PTR [rbx],eax
   49ee8:	mov    rax,QWORD PTR [rsp+0x8]
   49eed:	xor    rax,QWORD PTR fs:0x28
   49ef6:	jne    49efe <g_str_equal@plt+0x3cc3e>
   49ef8:	add    rsp,0x10
   49efc:	pop    rbx
   49efd:	ret    
   49efe:	call   cd30 <__stack_chk_fail@plt>
   49f03:	nop    DWORD PTR [rax]
   49f06:	nop    WORD PTR cs:[rax+rax*1+0x0]
   49f10:	push   r13
   49f12:	push   r12
   49f14:	mov    r13,rdx
   49f17:	push   rbp
   49f18:	push   rbx
   49f19:	mov    rdx,rsi
   49f1c:	mov    rbx,rsi
   49f1f:	lea    rsi,[rip+0x1b901]        # 65827 <_fini@@Base+0x130d3>
   49f26:	mov    rbp,rdi
   49f29:	sub    rsp,0x28
   49f2d:	lea    r12,[rsp+0x10]
   49f32:	mov    QWORD PTR [rsp+0x10],0x0
   49f3b:	mov    rax,QWORD PTR fs:0x28
   49f44:	mov    QWORD PTR [rsp+0x18],rax
   49f49:	xor    eax,eax
   49f4b:	mov    rcx,r12
   49f4e:	call   29120 <g_str_equal@plt+0x1be60>
   49f53:	mov    rsi,QWORD PTR [rsp+0x10]
   49f58:	test   rsi,rsi
   49f5b:	je     49f88 <g_str_equal@plt+0x3ccc8>
   49f5d:	mov    rdi,r13
   49f60:	call   3a4c0 <g_str_equal@plt+0x2d200>
   49f65:	mov    rax,QWORD PTR [rsp+0x18]
   49f6a:	xor    rax,QWORD PTR fs:0x28
   49f73:	jne    4a0a6 <g_str_equal@plt+0x3cde6>
   49f79:	add    rsp,0x28
   49f7d:	pop    rbx
   49f7e:	pop    rbp
   49f7f:	pop    r12
   49f81:	pop    r13
   49f83:	ret    
   49f84:	nop    DWORD PTR [rax+0x0]
   49f88:	lea    rsi,[rip+0x12c30]        # 5cbbf <_fini@@Base+0xa46b>
   49f8f:	lea    rdx,[rbx+0x8]
   49f93:	mov    rcx,r12
   49f96:	mov    rdi,rbp
   49f99:	call   29210 <g_str_equal@plt+0x1bf50>
   49f9e:	mov    rsi,QWORD PTR [rsp+0x10]
   49fa3:	test   rsi,rsi
   49fa6:	jne    49f5d <g_str_equal@plt+0x3cc9d>
   49fa8:	lea    rdx,[rbx+0x10]
   49fac:	lea    rsi,[rip+0x1b87b]        # 6582e <_fini@@Base+0x130da>
   49fb3:	mov    rdi,rbp
   49fb6:	call   286a0 <g_str_equal@plt+0x1b3e0>
   49fbb:	test   al,al
   49fbd:	je     49fe3 <g_str_equal@plt+0x3cd23>
   49fbf:	lea    rsi,[rip+0x1b868]        # 6582e <_fini@@Base+0x130da>
   49fc6:	lea    rdx,[rbx+0x11]
   49fca:	mov    rcx,r12
   49fcd:	mov    rdi,rbp
   49fd0:	call   29120 <g_str_equal@plt+0x1be60>
   49fd5:	mov    rsi,QWORD PTR [rsp+0x10]
   49fda:	test   rsi,rsi
   49fdd:	jne    49f5d <g_str_equal@plt+0x3cc9d>
   49fe3:	lea    rdx,[rbx+0x12]
   49fe7:	lea    rsi,[rip+0x1b2c9]        # 652b7 <_fini@@Base+0x12b63>
   49fee:	mov    rdi,rbp
   49ff1:	call   286a0 <g_str_equal@plt+0x1b3e0>
   49ff6:	test   al,al
   49ff8:	je     4a01e <g_str_equal@plt+0x3cd5e>
   49ffa:	lea    rsi,[rip+0x1b2b6]        # 652b7 <_fini@@Base+0x12b63>
   4a001:	lea    rdx,[rbx+0x18]
   4a005:	mov    rcx,r12
   4a008:	mov    rdi,rbp
   4a00b:	call   28780 <g_str_equal@plt+0x1b4c0>
   4a010:	mov    rsi,QWORD PTR [rsp+0x10]
   4a015:	test   rsi,rsi
   4a018:	jne    49f5d <g_str_equal@plt+0x3cc9d>
   4a01e:	lea    rdx,[rbx+0x20]
   4a022:	lea    rsi,[rip+0x98db]        # 53904 <_fini@@Base+0x11b0>
   4a029:	mov    rdi,rbp
   4a02c:	call   286a0 <g_str_equal@plt+0x1b3e0>
   4a031:	test   al,al
   4a033:	je     4a059 <g_str_equal@plt+0x3cd99>
   4a035:	lea    rsi,[rip+0x98c8]        # 53904 <_fini@@Base+0x11b0>
   4a03c:	lea    rdx,[rbx+0x28]
   4a040:	mov    rcx,r12
   4a043:	mov    rdi,rbp
   4a046:	call   28780 <g_str_equal@plt+0x1b4c0>
   4a04b:	mov    rsi,QWORD PTR [rsp+0x10]
   4a050:	test   rsi,rsi
   4a053:	jne    49f5d <g_str_equal@plt+0x3cc9d>
   4a059:	lea    rdx,[rbx+0x30]
   4a05d:	lea    rsi,[rip+0x10112]        # 5a176 <_fini@@Base+0x7a22>
   4a064:	mov    rdi,rbp
   4a067:	call   286a0 <g_str_equal@plt+0x1b3e0>
   4a06c:	test   al,al
   4a06e:	je     4a09c <g_str_equal@plt+0x3cddc>
   4a070:	mov    eax,DWORD PTR [rbx+0x34]
   4a073:	lea    rdx,[rsp+0xc]
   4a078:	lea    rcx,[rip+0x236f81]        # 281000 <_fini@@Base+0x22e8ac>
   4a07f:	lea    rsi,[rip+0x100f0]        # 5a176 <_fini@@Base+0x7a22>
   4a086:	mov    r8,r12
   4a089:	mov    rdi,rbp
   4a08c:	mov    DWORD PTR [rsp+0xc],eax
   4a090:	call   296a0 <g_str_equal@plt+0x1c3e0>
   4a095:	mov    eax,DWORD PTR [rsp+0xc]
   4a099:	mov    DWORD PTR [rbx+0x34],eax
   4a09c:	mov    rsi,QWORD PTR [rsp+0x10]
   4a0a1:	jmp    49f5d <g_str_equal@plt+0x3cc9d>
   4a0a6:	call   cd30 <__stack_chk_fail@plt>
   4a0ab:	nop    DWORD PTR [rax+rax*1+0x0]
   4a0b0:	push   rbx
   4a0b1:	mov    r8,rcx
   4a0b4:	mov    rbx,rdx
   4a0b7:	lea    rcx,[rip+0x236f02]        # 280fc0 <_fini@@Base+0x22e86c>
   4a0be:	sub    rsp,0x10
   4a0c2:	mov    rax,QWORD PTR fs:0x28
   4a0cb:	mov    QWORD PTR [rsp+0x8],rax
   4a0d0:	xor    eax,eax
   4a0d2:	mov    eax,DWORD PTR [rdx]
   4a0d4:	lea    rdx,[rsp+0x4]
   4a0d9:	mov    DWORD PTR [rsp+0x4],eax
   4a0dd:	call   296a0 <g_str_equal@plt+0x1c3e0>
   4a0e2:	mov    eax,DWORD PTR [rsp+0x4]
   4a0e6:	mov    DWORD PTR [rbx],eax
   4a0e8:	mov    rax,QWORD PTR [rsp+0x8]
   4a0ed:	xor    rax,QWORD PTR fs:0x28
   4a0f6:	jne    4a0fe <g_str_equal@plt+0x3ce3e>
   4a0f8:	add    rsp,0x10
   4a0fc:	pop    rbx
   4a0fd:	ret    
   4a0fe:	call   cd30 <__stack_chk_fail@plt>
   4a103:	nop    DWORD PTR [rax]
   4a106:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4a110:	push   r13
   4a112:	push   r12
   4a114:	mov    r13,rdx
   4a117:	push   rbp
   4a118:	push   rbx
   4a119:	lea    rcx,[rip+0x236ea0]        # 280fc0 <_fini@@Base+0x22e86c>
   4a120:	mov    rbx,rsi
   4a123:	mov    rbp,rdi
   4a126:	sub    rsp,0x28
   4a12a:	mov    rax,QWORD PTR fs:0x28
   4a133:	mov    QWORD PTR [rsp+0x18],rax
   4a138:	xor    eax,eax
   4a13a:	lea    r12,[rsp+0x10]
   4a13f:	mov    eax,DWORD PTR [rsi]
   4a141:	lea    rdx,[rsp+0xc]
   4a146:	lea    rsi,[rip+0x1b6e8]        # 65835 <_fini@@Base+0x130e1>
   4a14d:	mov    QWORD PTR [rsp+0x10],0x0
   4a156:	mov    r8,r12
   4a159:	mov    DWORD PTR [rsp+0xc],eax
   4a15d:	call   296a0 <g_str_equal@plt+0x1c3e0>
   4a162:	mov    rsi,QWORD PTR [rsp+0x10]
   4a167:	mov    eax,DWORD PTR [rsp+0xc]
   4a16b:	test   rsi,rsi
   4a16e:	mov    DWORD PTR [rbx],eax
   4a170:	je     4a198 <g_str_equal@plt+0x3ced8>
   4a172:	mov    rdi,r13
   4a175:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4a17a:	mov    rax,QWORD PTR [rsp+0x18]
   4a17f:	xor    rax,QWORD PTR fs:0x28
   4a188:	jne    4a1d5 <g_str_equal@plt+0x3cf15>
   4a18a:	add    rsp,0x28
   4a18e:	pop    rbx
   4a18f:	pop    rbp
   4a190:	pop    r12
   4a192:	pop    r13
   4a194:	ret    
   4a195:	nop    DWORD PTR [rax]
   4a198:	lea    rsi,[rip+0x19fa1]        # 64140 <_fini@@Base+0x119ec>
   4a19f:	lea    rdx,[rbx+0x8]
   4a1a3:	mov    rcx,r12
   4a1a6:	mov    rdi,rbp
   4a1a9:	call   28780 <g_str_equal@plt+0x1b4c0>
   4a1ae:	mov    rsi,QWORD PTR [rsp+0x10]
   4a1b3:	test   rsi,rsi
   4a1b6:	jne    4a172 <g_str_equal@plt+0x3ceb2>
   4a1b8:	lea    rsi,[rip+0x1b67d]        # 6583c <_fini@@Base+0x130e8>
   4a1bf:	lea    rdx,[rbx+0x10]
   4a1c3:	mov    rcx,r12
   4a1c6:	mov    rdi,rbp
   4a1c9:	call   28780 <g_str_equal@plt+0x1b4c0>
   4a1ce:	mov    rsi,QWORD PTR [rsp+0x10]
   4a1d3:	jmp    4a172 <g_str_equal@plt+0x3ceb2>
   4a1d5:	call   cd30 <__stack_chk_fail@plt>
   4a1da:	nop    WORD PTR [rax+rax*1+0x0]
   4a1e0:	push   r13
   4a1e2:	push   r12
   4a1e4:	mov    r13,rcx
   4a1e7:	push   rbp
   4a1e8:	push   rbx
   4a1e9:	mov    ecx,0x18
   4a1ee:	mov    rbp,rdi
   4a1f1:	mov    rbx,rdx
   4a1f4:	sub    rsp,0x18
   4a1f8:	mov    r12,rsp
   4a1fb:	mov    QWORD PTR [rsp],0x0
   4a203:	mov    r8,r12
   4a206:	mov    rax,QWORD PTR fs:0x28
   4a20f:	mov    QWORD PTR [rsp+0x8],rax
   4a214:	xor    eax,eax
   4a216:	call   27da0 <g_str_equal@plt+0x1aae0>
   4a21b:	mov    rsi,QWORD PTR [rsp]
   4a21f:	test   rsi,rsi
   4a222:	je     4a250 <g_str_equal@plt+0x3cf90>
   4a224:	mov    rdi,r13
   4a227:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4a22c:	mov    rax,QWORD PTR [rsp+0x8]
   4a231:	xor    rax,QWORD PTR fs:0x28
   4a23a:	jne    4a2ad <g_str_equal@plt+0x3cfed>
   4a23c:	add    rsp,0x18
   4a240:	pop    rbx
   4a241:	pop    rbp
   4a242:	pop    r12
   4a244:	pop    r13
   4a246:	ret    
   4a247:	nop    WORD PTR [rax+rax*1+0x0]
   4a250:	mov    rsi,QWORD PTR [rbx]
   4a253:	test   rsi,rsi
   4a256:	je     4a26a <g_str_equal@plt+0x3cfaa>
   4a258:	mov    rdx,r12
   4a25b:	mov    rdi,rbp
   4a25e:	call   4a110 <g_str_equal@plt+0x3ce50>
   4a263:	cmp    QWORD PTR [rsp],0x0
   4a268:	je     4a2a0 <g_str_equal@plt+0x3cfe0>
   4a26a:	mov    rsi,rbx
   4a26d:	mov    rdi,rbp
   4a270:	call   28000 <g_str_equal@plt+0x1ad40>
   4a275:	mov    rsi,QWORD PTR [rsp]
   4a279:	test   rsi,rsi
   4a27c:	je     4a224 <g_str_equal@plt+0x3cf64>
   4a27e:	mov    rdi,rbp
   4a281:	call   28770 <g_str_equal@plt+0x1b4b0>
   4a286:	test   al,al
   4a288:	je     4a299 <g_str_equal@plt+0x3cfd9>
   4a28a:	mov    rdi,QWORD PTR [rbx]
   4a28d:	call   44fb0 <g_str_equal@plt+0x37cf0>
   4a292:	mov    QWORD PTR [rbx],0x0
   4a299:	mov    rsi,QWORD PTR [rsp]
   4a29d:	jmp    4a224 <g_str_equal@plt+0x3cf64>
   4a29f:	nop
   4a2a0:	mov    rsi,r12
   4a2a3:	mov    rdi,rbp
   4a2a6:	call   27f50 <g_str_equal@plt+0x1ac90>
   4a2ab:	jmp    4a26a <g_str_equal@plt+0x3cfaa>
   4a2ad:	call   cd30 <__stack_chk_fail@plt>
   4a2b2:	nop    DWORD PTR [rax+0x0]
   4a2b6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4a2c0:	push   r13
   4a2c2:	push   r12
   4a2c4:	mov    r13,rdx
   4a2c7:	push   rbp
   4a2c8:	push   rbx
   4a2c9:	mov    rdx,rsi
   4a2cc:	mov    rbx,rsi
   4a2cf:	lea    rsi,[rip+0x14ebc]        # 5f192 <_fini@@Base+0xca3e>
   4a2d6:	mov    rbp,rdi
   4a2d9:	sub    rsp,0x18
   4a2dd:	mov    r12,rsp
   4a2e0:	mov    QWORD PTR [rsp],0x0
   4a2e8:	mov    rcx,r12
   4a2eb:	mov    rax,QWORD PTR fs:0x28
   4a2f4:	mov    QWORD PTR [rsp+0x8],rax
   4a2f9:	xor    eax,eax
   4a2fb:	call   4a1e0 <g_str_equal@plt+0x3cf20>
   4a300:	mov    rsi,QWORD PTR [rsp]
   4a304:	test   rsi,rsi
   4a307:	je     4a330 <g_str_equal@plt+0x3d070>
   4a309:	mov    rdi,r13
   4a30c:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4a311:	mov    rax,QWORD PTR [rsp+0x8]
   4a316:	xor    rax,QWORD PTR fs:0x28
   4a31f:	jne    4a363 <g_str_equal@plt+0x3d0a3>
   4a321:	add    rsp,0x18
   4a325:	pop    rbx
   4a326:	pop    rbp
   4a327:	pop    r12
   4a329:	pop    r13
   4a32b:	ret    
   4a32c:	nop    DWORD PTR [rax+0x0]
   4a330:	lea    rdx,[rbx+0x8]
   4a334:	lea    rsi,[rip+0x14972]        # 5ecad <_fini@@Base+0xc559>
   4a33b:	mov    rdi,rbp
   4a33e:	call   286a0 <g_str_equal@plt+0x1b3e0>
   4a343:	test   al,al
   4a345:	je     4a35d <g_str_equal@plt+0x3d09d>
   4a347:	lea    rdx,[rbx+0x10]
   4a34b:	lea    rsi,[rip+0x1495b]        # 5ecad <_fini@@Base+0xc559>
   4a352:	mov    rcx,r12
   4a355:	mov    rdi,rbp
   4a358:	call   29210 <g_str_equal@plt+0x1bf50>
   4a35d:	mov    rsi,QWORD PTR [rsp]
   4a361:	jmp    4a309 <g_str_equal@plt+0x3d049>
   4a363:	call   cd30 <__stack_chk_fail@plt>
   4a368:	nop    DWORD PTR [rax+rax*1+0x0]
   4a370:	push   r15
   4a372:	push   r14
   4a374:	push   r13
   4a376:	push   r12
   4a378:	mov    r12,rdx
   4a37b:	push   rbp
   4a37c:	push   rbx
   4a37d:	mov    rbx,rdi
   4a380:	sub    rsp,0x38
   4a384:	lea    rbp,[rsp+0x20]
   4a389:	mov    QWORD PTR [rsp+0x8],rcx
   4a38e:	mov    ecx,0x10
   4a393:	mov    rax,QWORD PTR fs:0x28
   4a39c:	mov    QWORD PTR [rsp+0x28],rax
   4a3a1:	xor    eax,eax
   4a3a3:	mov    r8,rbp
   4a3a6:	mov    QWORD PTR [rsp+0x20],0x0
   4a3af:	call   280a0 <g_str_equal@plt+0x1ade0>
   4a3b4:	mov    rsi,QWORD PTR [rsp+0x20]
   4a3b9:	test   rsi,rsi
   4a3bc:	je     4a3f0 <g_str_equal@plt+0x3d130>
   4a3be:	mov    rdi,QWORD PTR [rsp+0x8]
   4a3c3:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4a3c8:	mov    rax,QWORD PTR [rsp+0x28]
   4a3cd:	xor    rax,QWORD PTR fs:0x28
   4a3d6:	jne    4a4ad <g_str_equal@plt+0x3d1ed>
   4a3dc:	add    rsp,0x38
   4a3e0:	pop    rbx
   4a3e1:	pop    rbp
   4a3e2:	pop    r12
   4a3e4:	pop    r13
   4a3e6:	pop    r14
   4a3e8:	pop    r15
   4a3ea:	ret    
   4a3eb:	nop    DWORD PTR [rax+rax*1+0x0]
   4a3f0:	mov    r15,QWORD PTR [r12]
   4a3f4:	lea    r14,[rsp+0x1c]
   4a3f9:	lea    r13,[rip+0x236c00]        # 281000 <_fini@@Base+0x22e8ac>
   4a400:	test   r15,r15
   4a403:	jne    4a428 <g_str_equal@plt+0x3d168>
   4a405:	jmp    4a4a0 <g_str_equal@plt+0x3d1e0>
   4a40a:	nop    WORD PTR [rax+rax*1+0x0]
   4a410:	mov    rsi,r15
   4a413:	mov    edx,0x10
   4a418:	mov    rdi,rbx
   4a41b:	call   281f0 <g_str_equal@plt+0x1af30>
   4a420:	test   rax,rax
   4a423:	mov    r15,rax
   4a426:	je     4a498 <g_str_equal@plt+0x3d1d8>
   4a428:	mov    edx,DWORD PTR [r15+0x8]
   4a42c:	xor    esi,esi
   4a42e:	mov    r8,rbp
   4a431:	mov    rcx,r13
   4a434:	mov    rdi,rbx
   4a437:	mov    DWORD PTR [rsp+0x1c],edx
   4a43b:	mov    rdx,r14
   4a43e:	call   296a0 <g_str_equal@plt+0x1c3e0>
   4a443:	cmp    QWORD PTR [rsp+0x20],0x0
   4a449:	mov    edx,DWORD PTR [rsp+0x1c]
   4a44d:	mov    DWORD PTR [r15+0x8],edx
   4a451:	je     4a410 <g_str_equal@plt+0x3d150>
   4a453:	mov    rsi,r12
   4a456:	mov    rdi,rbx
   4a459:	call   28390 <g_str_equal@plt+0x1b0d0>
   4a45e:	mov    rsi,QWORD PTR [rsp+0x20]
   4a463:	test   rsi,rsi
   4a466:	je     4a3be <g_str_equal@plt+0x3d0fe>
   4a46c:	mov    rdi,rbx
   4a46f:	call   28770 <g_str_equal@plt+0x1b4b0>
   4a474:	test   al,al
   4a476:	je     4a489 <g_str_equal@plt+0x3d1c9>
   4a478:	mov    rdi,QWORD PTR [r12]
   4a47c:	call   44ff0 <g_str_equal@plt+0x37d30>
   4a481:	mov    QWORD PTR [r12],0x0
   4a489:	mov    rsi,QWORD PTR [rsp+0x20]
   4a48e:	jmp    4a3be <g_str_equal@plt+0x3d0fe>
   4a493:	nop    DWORD PTR [rax+rax*1+0x0]
   4a498:	cmp    QWORD PTR [rsp+0x20],0x0
   4a49e:	jne    4a453 <g_str_equal@plt+0x3d193>
   4a4a0:	mov    rsi,rbp
   4a4a3:	mov    rdi,rbx
   4a4a6:	call   282e0 <g_str_equal@plt+0x1b020>
   4a4ab:	jmp    4a453 <g_str_equal@plt+0x3d193>
   4a4ad:	call   cd30 <__stack_chk_fail@plt>
   4a4b2:	nop    DWORD PTR [rax+0x0]
   4a4b6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4a4c0:	push   rbx
   4a4c1:	mov    rbx,rdx
   4a4c4:	mov    rdx,rsi
   4a4c7:	lea    rsi,[rip+0x1b374]        # 65842 <_fini@@Base+0x130ee>
   4a4ce:	sub    rsp,0x10
   4a4d2:	mov    rcx,rsp
   4a4d5:	mov    QWORD PTR [rsp],0x0
   4a4dd:	mov    rax,QWORD PTR fs:0x28
   4a4e6:	mov    QWORD PTR [rsp+0x8],rax
   4a4eb:	xor    eax,eax
   4a4ed:	call   4a370 <g_str_equal@plt+0x3d0b0>
   4a4f2:	mov    rsi,QWORD PTR [rsp]
   4a4f6:	mov    rdi,rbx
   4a4f9:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4a4fe:	mov    rax,QWORD PTR [rsp+0x8]
   4a503:	xor    rax,QWORD PTR fs:0x28
   4a50c:	jne    4a514 <g_str_equal@plt+0x3d254>
   4a50e:	add    rsp,0x10
   4a512:	pop    rbx
   4a513:	ret    
   4a514:	call   cd30 <__stack_chk_fail@plt>
   4a519:	nop    DWORD PTR [rax+0x0]
   4a520:	push   r13
   4a522:	push   r12
   4a524:	mov    r13,rcx
   4a527:	push   rbp
   4a528:	push   rbx
   4a529:	mov    ecx,0x8
   4a52e:	mov    rbp,rdi
   4a531:	mov    rbx,rdx
   4a534:	sub    rsp,0x18
   4a538:	mov    r12,rsp
   4a53b:	mov    QWORD PTR [rsp],0x0
   4a543:	mov    r8,r12
   4a546:	mov    rax,QWORD PTR fs:0x28
   4a54f:	mov    QWORD PTR [rsp+0x8],rax
   4a554:	xor    eax,eax
   4a556:	call   27da0 <g_str_equal@plt+0x1aae0>
   4a55b:	mov    rsi,QWORD PTR [rsp]
   4a55f:	test   rsi,rsi
   4a562:	je     4a590 <g_str_equal@plt+0x3d2d0>
   4a564:	mov    rdi,r13
   4a567:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4a56c:	mov    rax,QWORD PTR [rsp+0x8]
   4a571:	xor    rax,QWORD PTR fs:0x28
   4a57a:	jne    4a5ed <g_str_equal@plt+0x3d32d>
   4a57c:	add    rsp,0x18
   4a580:	pop    rbx
   4a581:	pop    rbp
   4a582:	pop    r12
   4a584:	pop    r13
   4a586:	ret    
   4a587:	nop    WORD PTR [rax+rax*1+0x0]
   4a590:	mov    rsi,QWORD PTR [rbx]
   4a593:	test   rsi,rsi
   4a596:	je     4a5aa <g_str_equal@plt+0x3d2ea>
   4a598:	mov    rdx,r12
   4a59b:	mov    rdi,rbp
   4a59e:	call   4a4c0 <g_str_equal@plt+0x3d200>
   4a5a3:	cmp    QWORD PTR [rsp],0x0
   4a5a8:	je     4a5e0 <g_str_equal@plt+0x3d320>
   4a5aa:	mov    rsi,rbx
   4a5ad:	mov    rdi,rbp
   4a5b0:	call   28000 <g_str_equal@plt+0x1ad40>
   4a5b5:	mov    rsi,QWORD PTR [rsp]
   4a5b9:	test   rsi,rsi
   4a5bc:	je     4a564 <g_str_equal@plt+0x3d2a4>
   4a5be:	mov    rdi,rbp
   4a5c1:	call   28770 <g_str_equal@plt+0x1b4b0>
   4a5c6:	test   al,al
   4a5c8:	je     4a5d9 <g_str_equal@plt+0x3d319>
   4a5ca:	mov    rdi,QWORD PTR [rbx]
   4a5cd:	call   45030 <g_str_equal@plt+0x37d70>
   4a5d2:	mov    QWORD PTR [rbx],0x0
   4a5d9:	mov    rsi,QWORD PTR [rsp]
   4a5dd:	jmp    4a564 <g_str_equal@plt+0x3d2a4>
   4a5df:	nop
   4a5e0:	mov    rsi,r12
   4a5e3:	mov    rdi,rbp
   4a5e6:	call   27f50 <g_str_equal@plt+0x1ac90>
   4a5eb:	jmp    4a5aa <g_str_equal@plt+0x3d2ea>
   4a5ed:	call   cd30 <__stack_chk_fail@plt>
   4a5f2:	nop    DWORD PTR [rax+0x0]
   4a5f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4a600:	push   rbx
   4a601:	mov    rbx,rdx
   4a604:	mov    rdx,rsi
   4a607:	lea    rsi,[rip+0x1b1be]        # 657cc <_fini@@Base+0x13078>
   4a60e:	sub    rsp,0x10
   4a612:	mov    rcx,rsp
   4a615:	mov    QWORD PTR [rsp],0x0
   4a61d:	mov    rax,QWORD PTR fs:0x28
   4a626:	mov    QWORD PTR [rsp+0x8],rax
   4a62b:	xor    eax,eax
   4a62d:	call   29210 <g_str_equal@plt+0x1bf50>
   4a632:	mov    rsi,QWORD PTR [rsp]
   4a636:	mov    rdi,rbx
   4a639:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4a63e:	mov    rax,QWORD PTR [rsp+0x8]
   4a643:	xor    rax,QWORD PTR fs:0x28
   4a64c:	jne    4a654 <g_str_equal@plt+0x3d394>
   4a64e:	add    rsp,0x10
   4a652:	pop    rbx
   4a653:	ret    
   4a654:	call   cd30 <__stack_chk_fail@plt>
   4a659:	nop    DWORD PTR [rax+0x0]
   4a660:	push   r13
   4a662:	push   r12
   4a664:	mov    r13,rdx
   4a667:	push   rbp
   4a668:	push   rbx
   4a669:	mov    rdx,rsi
   4a66c:	mov    rbx,rsi
   4a66f:	lea    rsi,[rip+0x13746]        # 5ddbc <_fini@@Base+0xb668>
   4a676:	mov    rbp,rdi
   4a679:	sub    rsp,0x18
   4a67d:	mov    r12,rsp
   4a680:	mov    QWORD PTR [rsp],0x0
   4a688:	mov    rcx,r12
   4a68b:	mov    rax,QWORD PTR fs:0x28
   4a694:	mov    QWORD PTR [rsp+0x8],rax
   4a699:	xor    eax,eax
   4a69b:	call   29210 <g_str_equal@plt+0x1bf50>
   4a6a0:	mov    rsi,QWORD PTR [rsp]
   4a6a4:	test   rsi,rsi
   4a6a7:	je     4a6d0 <g_str_equal@plt+0x3d410>
   4a6a9:	mov    rdi,r13
   4a6ac:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4a6b1:	mov    rax,QWORD PTR [rsp+0x8]
   4a6b6:	xor    rax,QWORD PTR fs:0x28
   4a6bf:	jne    4a722 <g_str_equal@plt+0x3d462>
   4a6c1:	add    rsp,0x18
   4a6c5:	pop    rbx
   4a6c6:	pop    rbp
   4a6c7:	pop    r12
   4a6c9:	pop    r13
   4a6cb:	ret    
   4a6cc:	nop    DWORD PTR [rax+0x0]
   4a6d0:	lea    rsi,[rip+0x1b00a]        # 656e1 <_fini@@Base+0x12f8d>
   4a6d7:	lea    rdx,[rbx+0x8]
   4a6db:	mov    rcx,r12
   4a6de:	mov    rdi,rbp
   4a6e1:	call   29210 <g_str_equal@plt+0x1bf50>
   4a6e6:	mov    rsi,QWORD PTR [rsp]
   4a6ea:	test   rsi,rsi
   4a6ed:	jne    4a6a9 <g_str_equal@plt+0x3d3e9>
   4a6ef:	lea    rdx,[rbx+0x10]
   4a6f3:	lea    rsi,[rip+0x1b150]        # 6584a <_fini@@Base+0x130f6>
   4a6fa:	mov    rdi,rbp
   4a6fd:	call   286a0 <g_str_equal@plt+0x1b3e0>
   4a702:	test   al,al
   4a704:	je     4a71c <g_str_equal@plt+0x3d45c>
   4a706:	lea    rdx,[rbx+0x18]
   4a70a:	lea    rsi,[rip+0x1b139]        # 6584a <_fini@@Base+0x130f6>
   4a711:	mov    rcx,r12
   4a714:	mov    rdi,rbp
   4a717:	call   29450 <g_str_equal@plt+0x1c190>
   4a71c:	mov    rsi,QWORD PTR [rsp]
   4a720:	jmp    4a6a9 <g_str_equal@plt+0x3d3e9>
   4a722:	call   cd30 <__stack_chk_fail@plt>
   4a727:	nop    WORD PTR [rax+rax*1+0x0]
   4a730:	push   rbx
   4a731:	mov    rbx,rdx
   4a734:	mov    rdx,rsi
   4a737:	lea    rsi,[rip+0x1afa3]        # 656e1 <_fini@@Base+0x12f8d>
   4a73e:	sub    rsp,0x10
   4a742:	mov    rcx,rsp
   4a745:	mov    QWORD PTR [rsp],0x0
   4a74d:	mov    rax,QWORD PTR fs:0x28
   4a756:	mov    QWORD PTR [rsp+0x8],rax
   4a75b:	xor    eax,eax
   4a75d:	call   29210 <g_str_equal@plt+0x1bf50>
   4a762:	mov    rsi,QWORD PTR [rsp]
   4a766:	mov    rdi,rbx
   4a769:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4a76e:	mov    rax,QWORD PTR [rsp+0x8]
   4a773:	xor    rax,QWORD PTR fs:0x28
   4a77c:	jne    4a784 <g_str_equal@plt+0x3d4c4>
   4a77e:	add    rsp,0x10
   4a782:	pop    rbx
   4a783:	ret    
   4a784:	call   cd30 <__stack_chk_fail@plt>
   4a789:	nop    DWORD PTR [rax+0x0]
   4a790:	push   rbx
   4a791:	mov    rbx,rdx
   4a794:	mov    rdx,rsi
   4a797:	lea    rsi,[rip+0x1af0a]        # 656a8 <_fini@@Base+0x12f54>
   4a79e:	sub    rsp,0x10
   4a7a2:	mov    rcx,rsp
   4a7a5:	mov    QWORD PTR [rsp],0x0
   4a7ad:	mov    rax,QWORD PTR fs:0x28
   4a7b6:	mov    QWORD PTR [rsp+0x8],rax
   4a7bb:	xor    eax,eax
   4a7bd:	call   29210 <g_str_equal@plt+0x1bf50>
   4a7c2:	mov    rsi,QWORD PTR [rsp]
   4a7c6:	mov    rdi,rbx
   4a7c9:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4a7ce:	mov    rax,QWORD PTR [rsp+0x8]
   4a7d3:	xor    rax,QWORD PTR fs:0x28
   4a7dc:	jne    4a7e4 <g_str_equal@plt+0x3d524>
   4a7de:	add    rsp,0x10
   4a7e2:	pop    rbx
   4a7e3:	ret    
   4a7e4:	call   cd30 <__stack_chk_fail@plt>
   4a7e9:	nop    DWORD PTR [rax+0x0]
   4a7f0:	push   rbx
   4a7f1:	mov    rbx,rdx
   4a7f4:	mov    rdx,rsi
   4a7f7:	lea    rsi,[rip+0x1aeaa]        # 656a8 <_fini@@Base+0x12f54>
   4a7fe:	sub    rsp,0x10
   4a802:	mov    rcx,rsp
   4a805:	mov    QWORD PTR [rsp],0x0
   4a80d:	mov    rax,QWORD PTR fs:0x28
   4a816:	mov    QWORD PTR [rsp+0x8],rax
   4a81b:	xor    eax,eax
   4a81d:	call   29210 <g_str_equal@plt+0x1bf50>
   4a822:	mov    rsi,QWORD PTR [rsp]
   4a826:	mov    rdi,rbx
   4a829:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4a82e:	mov    rax,QWORD PTR [rsp+0x8]
   4a833:	xor    rax,QWORD PTR fs:0x28
   4a83c:	jne    4a844 <g_str_equal@plt+0x3d584>
   4a83e:	add    rsp,0x10
   4a842:	pop    rbx
   4a843:	ret    
   4a844:	call   cd30 <__stack_chk_fail@plt>
   4a849:	nop    DWORD PTR [rax+0x0]
   4a850:	push   r13
   4a852:	push   r12
   4a854:	mov    r13,rdx
   4a857:	push   rbp
   4a858:	push   rbx
   4a859:	mov    rdx,rsi
   4a85c:	mov    rbx,rsi
   4a85f:	lea    rsi,[rip+0x143bf]        # 5ec25 <_fini@@Base+0xc4d1>
   4a866:	mov    rbp,rdi
   4a869:	sub    rsp,0x18
   4a86d:	mov    r12,rsp
   4a870:	mov    QWORD PTR [rsp],0x0
   4a878:	mov    rcx,r12
   4a87b:	mov    rax,QWORD PTR fs:0x28
   4a884:	mov    QWORD PTR [rsp+0x8],rax
   4a889:	xor    eax,eax
   4a88b:	call   29210 <g_str_equal@plt+0x1bf50>
   4a890:	mov    rsi,QWORD PTR [rsp]
   4a894:	test   rsi,rsi
   4a897:	je     4a8c0 <g_str_equal@plt+0x3d600>
   4a899:	mov    rdi,r13
   4a89c:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4a8a1:	mov    rax,QWORD PTR [rsp+0x8]
   4a8a6:	xor    rax,QWORD PTR fs:0x28
   4a8af:	jne    4a972 <g_str_equal@plt+0x3d6b2>
   4a8b5:	add    rsp,0x18
   4a8b9:	pop    rbx
   4a8ba:	pop    rbp
   4a8bb:	pop    r12
   4a8bd:	pop    r13
   4a8bf:	ret    
   4a8c0:	lea    rdx,[rbx+0x8]
   4a8c4:	lea    rsi,[rip+0x1af85]        # 65850 <_fini@@Base+0x130fc>
   4a8cb:	mov    rdi,rbp
   4a8ce:	call   286a0 <g_str_equal@plt+0x1b3e0>
   4a8d3:	test   al,al
   4a8d5:	je     4a8f6 <g_str_equal@plt+0x3d636>
   4a8d7:	lea    rsi,[rip+0x1af72]        # 65850 <_fini@@Base+0x130fc>
   4a8de:	lea    rdx,[rbx+0x10]
   4a8e2:	mov    rcx,r12
   4a8e5:	mov    rdi,rbp
   4a8e8:	call   29210 <g_str_equal@plt+0x1bf50>
   4a8ed:	mov    rsi,QWORD PTR [rsp]
   4a8f1:	test   rsi,rsi
   4a8f4:	jne    4a899 <g_str_equal@plt+0x3d5d9>
   4a8f6:	lea    rdx,[rbx+0x18]
   4a8fa:	lea    rsi,[rip+0x1af55]        # 65856 <_fini@@Base+0x13102>
   4a901:	mov    rdi,rbp
   4a904:	call   286a0 <g_str_equal@plt+0x1b3e0>
   4a909:	test   al,al
   4a90b:	je     4a930 <g_str_equal@plt+0x3d670>
   4a90d:	lea    rsi,[rip+0x1af42]        # 65856 <_fini@@Base+0x13102>
   4a914:	lea    rdx,[rbx+0x19]
   4a918:	mov    rcx,r12
   4a91b:	mov    rdi,rbp
   4a91e:	call   29120 <g_str_equal@plt+0x1be60>
   4a923:	mov    rsi,QWORD PTR [rsp]
   4a927:	test   rsi,rsi
   4a92a:	jne    4a899 <g_str_equal@plt+0x3d5d9>
   4a930:	lea    rsi,[rip+0x1af2a]        # 65861 <_fini@@Base+0x1310d>
   4a937:	lea    rdx,[rbx+0x20]
   4a93b:	mov    rcx,r12
   4a93e:	mov    rdi,rbp
   4a941:	call   28780 <g_str_equal@plt+0x1b4c0>
   4a946:	mov    rsi,QWORD PTR [rsp]
   4a94a:	test   rsi,rsi
   4a94d:	jne    4a899 <g_str_equal@plt+0x3d5d9>
   4a953:	lea    rsi,[rip+0x1af0f]        # 65869 <_fini@@Base+0x13115>
   4a95a:	lea    rdx,[rbx+0x28]
   4a95e:	mov    rcx,r12
   4a961:	mov    rdi,rbp
   4a964:	call   29120 <g_str_equal@plt+0x1be60>
   4a969:	mov    rsi,QWORD PTR [rsp]
   4a96d:	jmp    4a899 <g_str_equal@plt+0x3d5d9>
   4a972:	call   cd30 <__stack_chk_fail@plt>
   4a977:	nop    WORD PTR [rax+rax*1+0x0]
   4a980:	push   r13
   4a982:	push   r12
   4a984:	mov    r13,rcx
   4a987:	push   rbp
   4a988:	push   rbx
   4a989:	mov    ecx,0x30
   4a98e:	mov    rbp,rdi
   4a991:	mov    rbx,rdx
   4a994:	sub    rsp,0x18
   4a998:	mov    r12,rsp
   4a99b:	mov    QWORD PTR [rsp],0x0
   4a9a3:	mov    r8,r12
   4a9a6:	mov    rax,QWORD PTR fs:0x28
   4a9af:	mov    QWORD PTR [rsp+0x8],rax
   4a9b4:	xor    eax,eax
   4a9b6:	call   27da0 <g_str_equal@plt+0x1aae0>
   4a9bb:	mov    rsi,QWORD PTR [rsp]
   4a9bf:	test   rsi,rsi
   4a9c2:	je     4a9f0 <g_str_equal@plt+0x3d730>
   4a9c4:	mov    rdi,r13
   4a9c7:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4a9cc:	mov    rax,QWORD PTR [rsp+0x8]
   4a9d1:	xor    rax,QWORD PTR fs:0x28
   4a9da:	jne    4aa4d <g_str_equal@plt+0x3d78d>
   4a9dc:	add    rsp,0x18
   4a9e0:	pop    rbx
   4a9e1:	pop    rbp
   4a9e2:	pop    r12
   4a9e4:	pop    r13
   4a9e6:	ret    
   4a9e7:	nop    WORD PTR [rax+rax*1+0x0]
   4a9f0:	mov    rsi,QWORD PTR [rbx]
   4a9f3:	test   rsi,rsi
   4a9f6:	je     4aa0a <g_str_equal@plt+0x3d74a>
   4a9f8:	mov    rdx,r12
   4a9fb:	mov    rdi,rbp
   4a9fe:	call   4a850 <g_str_equal@plt+0x3d590>
   4aa03:	cmp    QWORD PTR [rsp],0x0
   4aa08:	je     4aa40 <g_str_equal@plt+0x3d780>
   4aa0a:	mov    rsi,rbx
   4aa0d:	mov    rdi,rbp
   4aa10:	call   28000 <g_str_equal@plt+0x1ad40>
   4aa15:	mov    rsi,QWORD PTR [rsp]
   4aa19:	test   rsi,rsi
   4aa1c:	je     4a9c4 <g_str_equal@plt+0x3d704>
   4aa1e:	mov    rdi,rbp
   4aa21:	call   28770 <g_str_equal@plt+0x1b4b0>
   4aa26:	test   al,al
   4aa28:	je     4aa39 <g_str_equal@plt+0x3d779>
   4aa2a:	mov    rdi,QWORD PTR [rbx]
   4aa2d:	call   45070 <g_str_equal@plt+0x37db0>
   4aa32:	mov    QWORD PTR [rbx],0x0
   4aa39:	mov    rsi,QWORD PTR [rsp]
   4aa3d:	jmp    4a9c4 <g_str_equal@plt+0x3d704>
   4aa3f:	nop
   4aa40:	mov    rsi,r12
   4aa43:	mov    rdi,rbp
   4aa46:	call   27f50 <g_str_equal@plt+0x1ac90>
   4aa4b:	jmp    4aa0a <g_str_equal@plt+0x3d74a>
   4aa4d:	call   cd30 <__stack_chk_fail@plt>
   4aa52:	nop    DWORD PTR [rax+0x0]
   4aa56:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4aa60:	push   r14
   4aa62:	push   r13
   4aa64:	mov    r14,rcx
   4aa67:	push   r12
   4aa69:	push   rbp
   4aa6a:	mov    ecx,0x10
   4aa6f:	push   rbx
   4aa70:	mov    rbp,rdi
   4aa73:	mov    r13,rdx
   4aa76:	sub    rsp,0x10
   4aa7a:	mov    r12,rsp
   4aa7d:	mov    QWORD PTR [rsp],0x0
   4aa85:	mov    r8,r12
   4aa88:	mov    rax,QWORD PTR fs:0x28
   4aa91:	mov    QWORD PTR [rsp+0x8],rax
   4aa96:	xor    eax,eax
   4aa98:	call   280a0 <g_str_equal@plt+0x1ade0>
   4aa9d:	mov    rsi,QWORD PTR [rsp]
   4aaa1:	test   rsi,rsi
   4aaa4:	je     4aad0 <g_str_equal@plt+0x3d810>
   4aaa6:	mov    rdi,r14
   4aaa9:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4aaae:	mov    rax,QWORD PTR [rsp+0x8]
   4aab3:	xor    rax,QWORD PTR fs:0x28
   4aabc:	jne    4ab64 <g_str_equal@plt+0x3d8a4>
   4aac2:	add    rsp,0x10
   4aac6:	pop    rbx
   4aac7:	pop    rbp
   4aac8:	pop    r12
   4aaca:	pop    r13
   4aacc:	pop    r14
   4aace:	ret    
   4aacf:	nop
   4aad0:	mov    rbx,QWORD PTR [r13+0x0]
   4aad4:	test   rbx,rbx
   4aad7:	jne    4aaf8 <g_str_equal@plt+0x3d838>
   4aad9:	jmp    4ab57 <g_str_equal@plt+0x3d897>
   4aadb:	nop    DWORD PTR [rax+rax*1+0x0]
   4aae0:	mov    rsi,rbx
   4aae3:	mov    edx,0x10
   4aae8:	mov    rdi,rbp
   4aaeb:	call   281f0 <g_str_equal@plt+0x1af30>
   4aaf0:	test   rax,rax
   4aaf3:	mov    rbx,rax
   4aaf6:	je     4ab50 <g_str_equal@plt+0x3d890>
   4aaf8:	lea    rdx,[rbx+0x8]
   4aafc:	xor    esi,esi
   4aafe:	mov    rcx,r12
   4ab01:	mov    rdi,rbp
   4ab04:	call   4a980 <g_str_equal@plt+0x3d6c0>
   4ab09:	cmp    QWORD PTR [rsp],0x0
   4ab0e:	je     4aae0 <g_str_equal@plt+0x3d820>
   4ab10:	mov    rsi,r13
   4ab13:	mov    rdi,rbp
   4ab16:	call   28390 <g_str_equal@plt+0x1b0d0>
   4ab1b:	mov    rsi,QWORD PTR [rsp]
   4ab1f:	test   rsi,rsi
   4ab22:	je     4aaa6 <g_str_equal@plt+0x3d7e6>
   4ab24:	mov    rdi,rbp
   4ab27:	call   28770 <g_str_equal@plt+0x1b4b0>
   4ab2c:	test   al,al
   4ab2e:	je     4ab41 <g_str_equal@plt+0x3d881>
   4ab30:	mov    rdi,QWORD PTR [r13+0x0]
   4ab34:	call   450b0 <g_str_equal@plt+0x37df0>
   4ab39:	mov    QWORD PTR [r13+0x0],0x0
   4ab41:	mov    rsi,QWORD PTR [rsp]
   4ab45:	jmp    4aaa6 <g_str_equal@plt+0x3d7e6>
   4ab4a:	nop    WORD PTR [rax+rax*1+0x0]
   4ab50:	cmp    QWORD PTR [rsp],0x0
   4ab55:	jne    4ab10 <g_str_equal@plt+0x3d850>
   4ab57:	mov    rsi,r12
   4ab5a:	mov    rdi,rbp
   4ab5d:	call   282e0 <g_str_equal@plt+0x1b020>
   4ab62:	jmp    4ab10 <g_str_equal@plt+0x3d850>
   4ab64:	call   cd30 <__stack_chk_fail@plt>
   4ab69:	nop    DWORD PTR [rax+0x0]
   4ab70:	push   r13
   4ab72:	push   r12
   4ab74:	mov    r13,rdx
   4ab77:	push   rbp
   4ab78:	push   rbx
   4ab79:	mov    rdx,rsi
   4ab7c:	mov    rbx,rsi
   4ab7f:	lea    rsi,[rip+0x1409f]        # 5ec25 <_fini@@Base+0xc4d1>
   4ab86:	mov    rbp,rdi
   4ab89:	sub    rsp,0x18
   4ab8d:	mov    r12,rsp
   4ab90:	mov    QWORD PTR [rsp],0x0
   4ab98:	mov    rcx,r12
   4ab9b:	mov    rax,QWORD PTR fs:0x28
   4aba4:	mov    QWORD PTR [rsp+0x8],rax
   4aba9:	xor    eax,eax
   4abab:	call   29210 <g_str_equal@plt+0x1bf50>
   4abb0:	mov    rsi,QWORD PTR [rsp]
   4abb4:	test   rsi,rsi
   4abb7:	je     4abe0 <g_str_equal@plt+0x3d920>
   4abb9:	mov    rdi,r13
   4abbc:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4abc1:	mov    rax,QWORD PTR [rsp+0x8]
   4abc6:	xor    rax,QWORD PTR fs:0x28
   4abcf:	jne    4ac8e <g_str_equal@plt+0x3d9ce>
   4abd5:	add    rsp,0x18
   4abd9:	pop    rbx
   4abda:	pop    rbp
   4abdb:	pop    r12
   4abdd:	pop    r13
   4abdf:	ret    
   4abe0:	lea    rdx,[rbx+0x8]
   4abe4:	lea    rsi,[rip+0x1ac90]        # 6587b <_fini@@Base+0x13127>
   4abeb:	mov    rdi,rbp
   4abee:	call   286a0 <g_str_equal@plt+0x1b3e0>
   4abf3:	test   al,al
   4abf5:	je     4ac16 <g_str_equal@plt+0x3d956>
   4abf7:	lea    rsi,[rip+0x1ac7d]        # 6587b <_fini@@Base+0x13127>
   4abfe:	lea    rdx,[rbx+0x9]
   4ac02:	mov    rcx,r12
   4ac05:	mov    rdi,rbp
   4ac08:	call   29120 <g_str_equal@plt+0x1be60>
   4ac0d:	mov    rsi,QWORD PTR [rsp]
   4ac11:	test   rsi,rsi
   4ac14:	jne    4abb9 <g_str_equal@plt+0x3d8f9>
   4ac16:	lea    rsi,[rip+0x1a98d]        # 655aa <_fini@@Base+0x12e56>
   4ac1d:	lea    rdx,[rbx+0xa]
   4ac21:	mov    rcx,r12
   4ac24:	mov    rdi,rbp
   4ac27:	call   29120 <g_str_equal@plt+0x1be60>
   4ac2c:	mov    rsi,QWORD PTR [rsp]
   4ac30:	test   rsi,rsi
   4ac33:	jne    4abb9 <g_str_equal@plt+0x3d8f9>
   4ac35:	lea    rdx,[rbx+0xb]
   4ac39:	lea    rsi,[rip+0x1ac4a]        # 6588a <_fini@@Base+0x13136>
   4ac40:	mov    rdi,rbp
   4ac43:	call   286a0 <g_str_equal@plt+0x1b3e0>
   4ac48:	test   al,al
   4ac4a:	je     4ac6f <g_str_equal@plt+0x3d9af>
   4ac4c:	lea    rsi,[rip+0x1ac37]        # 6588a <_fini@@Base+0x13136>
   4ac53:	lea    rdx,[rbx+0x10]
   4ac57:	mov    rcx,r12
   4ac5a:	mov    rdi,rbp
   4ac5d:	call   246a0 <g_str_equal@plt+0x173e0>
   4ac62:	mov    rsi,QWORD PTR [rsp]
   4ac66:	test   rsi,rsi
   4ac69:	jne    4abb9 <g_str_equal@plt+0x3d8f9>
   4ac6f:	lea    rsi,[rip+0x1aba1]        # 65817 <_fini@@Base+0x130c3>
   4ac76:	lea    rdx,[rbx+0x18]
   4ac7a:	mov    rcx,r12
   4ac7d:	mov    rdi,rbp
   4ac80:	call   29210 <g_str_equal@plt+0x1bf50>
   4ac85:	mov    rsi,QWORD PTR [rsp]
   4ac89:	jmp    4abb9 <g_str_equal@plt+0x3d8f9>
   4ac8e:	call   cd30 <__stack_chk_fail@plt>
   4ac93:	nop    DWORD PTR [rax]
   4ac96:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4aca0:	push   r13
   4aca2:	push   r12
   4aca4:	mov    r13,rcx
   4aca7:	push   rbp
   4aca8:	push   rbx
   4aca9:	mov    ecx,0x20
   4acae:	mov    rbp,rdi
   4acb1:	mov    rbx,rdx
   4acb4:	sub    rsp,0x18
   4acb8:	mov    r12,rsp
   4acbb:	mov    QWORD PTR [rsp],0x0
   4acc3:	mov    r8,r12
   4acc6:	mov    rax,QWORD PTR fs:0x28
   4accf:	mov    QWORD PTR [rsp+0x8],rax
   4acd4:	xor    eax,eax
   4acd6:	call   27da0 <g_str_equal@plt+0x1aae0>
   4acdb:	mov    rsi,QWORD PTR [rsp]
   4acdf:	test   rsi,rsi
   4ace2:	je     4ad10 <g_str_equal@plt+0x3da50>
   4ace4:	mov    rdi,r13
   4ace7:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4acec:	mov    rax,QWORD PTR [rsp+0x8]
   4acf1:	xor    rax,QWORD PTR fs:0x28
   4acfa:	jne    4ad6d <g_str_equal@plt+0x3daad>
   4acfc:	add    rsp,0x18
   4ad00:	pop    rbx
   4ad01:	pop    rbp
   4ad02:	pop    r12
   4ad04:	pop    r13
   4ad06:	ret    
   4ad07:	nop    WORD PTR [rax+rax*1+0x0]
   4ad10:	mov    rsi,QWORD PTR [rbx]
   4ad13:	test   rsi,rsi
   4ad16:	je     4ad2a <g_str_equal@plt+0x3da6a>
   4ad18:	mov    rdx,r12
   4ad1b:	mov    rdi,rbp
   4ad1e:	call   4ab70 <g_str_equal@plt+0x3d8b0>
   4ad23:	cmp    QWORD PTR [rsp],0x0
   4ad28:	je     4ad60 <g_str_equal@plt+0x3daa0>
   4ad2a:	mov    rsi,rbx
   4ad2d:	mov    rdi,rbp
   4ad30:	call   28000 <g_str_equal@plt+0x1ad40>
   4ad35:	mov    rsi,QWORD PTR [rsp]
   4ad39:	test   rsi,rsi
   4ad3c:	je     4ace4 <g_str_equal@plt+0x3da24>
   4ad3e:	mov    rdi,rbp
   4ad41:	call   28770 <g_str_equal@plt+0x1b4b0>
   4ad46:	test   al,al
   4ad48:	je     4ad59 <g_str_equal@plt+0x3da99>
   4ad4a:	mov    rdi,QWORD PTR [rbx]
   4ad4d:	call   450f0 <g_str_equal@plt+0x37e30>
   4ad52:	mov    QWORD PTR [rbx],0x0
   4ad59:	mov    rsi,QWORD PTR [rsp]
   4ad5d:	jmp    4ace4 <g_str_equal@plt+0x3da24>
   4ad5f:	nop
   4ad60:	mov    rsi,r12
   4ad63:	mov    rdi,rbp
   4ad66:	call   27f50 <g_str_equal@plt+0x1ac90>
   4ad6b:	jmp    4ad2a <g_str_equal@plt+0x3da6a>
   4ad6d:	call   cd30 <__stack_chk_fail@plt>
   4ad72:	nop    DWORD PTR [rax+0x0]
   4ad76:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4ad80:	push   r13
   4ad82:	push   r12
   4ad84:	mov    r13,rdx
   4ad87:	push   rbp
   4ad88:	push   rbx
   4ad89:	mov    rdx,rsi
   4ad8c:	mov    rbx,rsi
   4ad8f:	lea    rsi,[rip+0x1ab09]        # 6589f <_fini@@Base+0x1314b>
   4ad96:	mov    rbp,rdi
   4ad99:	sub    rsp,0x18
   4ad9d:	mov    r12,rsp
   4ada0:	mov    QWORD PTR [rsp],0x0
   4ada8:	mov    rcx,r12
   4adab:	mov    rax,QWORD PTR fs:0x28
   4adb4:	mov    QWORD PTR [rsp+0x8],rax
   4adb9:	xor    eax,eax
   4adbb:	call   29020 <g_str_equal@plt+0x1bd60>
   4adc0:	mov    rsi,QWORD PTR [rsp]
   4adc4:	test   rsi,rsi
   4adc7:	je     4adf0 <g_str_equal@plt+0x3db30>
   4adc9:	mov    rdi,r13
   4adcc:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4add1:	mov    rax,QWORD PTR [rsp+0x8]
   4add6:	xor    rax,QWORD PTR fs:0x28
   4addf:	jne    4ae23 <g_str_equal@plt+0x3db63>
   4ade1:	add    rsp,0x18
   4ade5:	pop    rbx
   4ade6:	pop    rbp
   4ade7:	pop    r12
   4ade9:	pop    r13
   4adeb:	ret    
   4adec:	nop    DWORD PTR [rax+0x0]
   4adf0:	lea    rdx,[rbx+0x8]
   4adf4:	lea    rsi,[rip+0x1aab0]        # 658ab <_fini@@Base+0x13157>
   4adfb:	mov    rdi,rbp
   4adfe:	call   286a0 <g_str_equal@plt+0x1b3e0>
   4ae03:	test   al,al
   4ae05:	je     4ae1d <g_str_equal@plt+0x3db5d>
   4ae07:	lea    rdx,[rbx+0x10]
   4ae0b:	lea    rsi,[rip+0x1aa99]        # 658ab <_fini@@Base+0x13157>
   4ae12:	mov    rcx,r12
   4ae15:	mov    rdi,rbp
   4ae18:	call   29020 <g_str_equal@plt+0x1bd60>
   4ae1d:	mov    rsi,QWORD PTR [rsp]
   4ae21:	jmp    4adc9 <g_str_equal@plt+0x3db09>
   4ae23:	call   cd30 <__stack_chk_fail@plt>
   4ae28:	nop    DWORD PTR [rax+rax*1+0x0]
   4ae30:	push   r13
   4ae32:	push   r12
   4ae34:	mov    r13,rcx
   4ae37:	push   rbp
   4ae38:	push   rbx
   4ae39:	mov    ecx,0x18
   4ae3e:	mov    rbp,rdi
   4ae41:	mov    rbx,rdx
   4ae44:	sub    rsp,0x18
   4ae48:	mov    r12,rsp
   4ae4b:	mov    QWORD PTR [rsp],0x0
   4ae53:	mov    r8,r12
   4ae56:	mov    rax,QWORD PTR fs:0x28
   4ae5f:	mov    QWORD PTR [rsp+0x8],rax
   4ae64:	xor    eax,eax
   4ae66:	call   27da0 <g_str_equal@plt+0x1aae0>
   4ae6b:	mov    rsi,QWORD PTR [rsp]
   4ae6f:	test   rsi,rsi
   4ae72:	je     4aea0 <g_str_equal@plt+0x3dbe0>
   4ae74:	mov    rdi,r13
   4ae77:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4ae7c:	mov    rax,QWORD PTR [rsp+0x8]
   4ae81:	xor    rax,QWORD PTR fs:0x28
   4ae8a:	jne    4aefd <g_str_equal@plt+0x3dc3d>
   4ae8c:	add    rsp,0x18
   4ae90:	pop    rbx
   4ae91:	pop    rbp
   4ae92:	pop    r12
   4ae94:	pop    r13
   4ae96:	ret    
   4ae97:	nop    WORD PTR [rax+rax*1+0x0]
   4aea0:	mov    rsi,QWORD PTR [rbx]
   4aea3:	test   rsi,rsi
   4aea6:	je     4aeba <g_str_equal@plt+0x3dbfa>
   4aea8:	mov    rdx,r12
   4aeab:	mov    rdi,rbp
   4aeae:	call   4ad80 <g_str_equal@plt+0x3dac0>
   4aeb3:	cmp    QWORD PTR [rsp],0x0
   4aeb8:	je     4aef0 <g_str_equal@plt+0x3dc30>
   4aeba:	mov    rsi,rbx
   4aebd:	mov    rdi,rbp
   4aec0:	call   28000 <g_str_equal@plt+0x1ad40>
   4aec5:	mov    rsi,QWORD PTR [rsp]
   4aec9:	test   rsi,rsi
   4aecc:	je     4ae74 <g_str_equal@plt+0x3dbb4>
   4aece:	mov    rdi,rbp
   4aed1:	call   28770 <g_str_equal@plt+0x1b4b0>
   4aed6:	test   al,al
   4aed8:	je     4aee9 <g_str_equal@plt+0x3dc29>
   4aeda:	mov    rdi,QWORD PTR [rbx]
   4aedd:	call   45130 <g_str_equal@plt+0x37e70>
   4aee2:	mov    QWORD PTR [rbx],0x0
   4aee9:	mov    rsi,QWORD PTR [rsp]
   4aeed:	jmp    4ae74 <g_str_equal@plt+0x3dbb4>
   4aeef:	nop
   4aef0:	mov    rsi,r12
   4aef3:	mov    rdi,rbp
   4aef6:	call   27f50 <g_str_equal@plt+0x1ac90>
   4aefb:	jmp    4aeba <g_str_equal@plt+0x3dbfa>
   4aefd:	call   cd30 <__stack_chk_fail@plt>
   4af02:	nop    DWORD PTR [rax+0x0]
   4af06:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4af10:	push   r14
   4af12:	push   r13
   4af14:	mov    r14,rcx
   4af17:	push   r12
   4af19:	push   rbp
   4af1a:	mov    ecx,0x10
   4af1f:	push   rbx
   4af20:	mov    rbp,rdi
   4af23:	mov    r13,rdx
   4af26:	sub    rsp,0x10
   4af2a:	mov    r12,rsp
   4af2d:	mov    QWORD PTR [rsp],0x0
   4af35:	mov    r8,r12
   4af38:	mov    rax,QWORD PTR fs:0x28
   4af41:	mov    QWORD PTR [rsp+0x8],rax
   4af46:	xor    eax,eax
   4af48:	call   280a0 <g_str_equal@plt+0x1ade0>
   4af4d:	mov    rsi,QWORD PTR [rsp]
   4af51:	test   rsi,rsi
   4af54:	je     4af80 <g_str_equal@plt+0x3dcc0>
   4af56:	mov    rdi,r14
   4af59:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4af5e:	mov    rax,QWORD PTR [rsp+0x8]
   4af63:	xor    rax,QWORD PTR fs:0x28
   4af6c:	jne    4b014 <g_str_equal@plt+0x3dd54>
   4af72:	add    rsp,0x10
   4af76:	pop    rbx
   4af77:	pop    rbp
   4af78:	pop    r12
   4af7a:	pop    r13
   4af7c:	pop    r14
   4af7e:	ret    
   4af7f:	nop
   4af80:	mov    rbx,QWORD PTR [r13+0x0]
   4af84:	test   rbx,rbx
   4af87:	jne    4afa8 <g_str_equal@plt+0x3dce8>
   4af89:	jmp    4b007 <g_str_equal@plt+0x3dd47>
   4af8b:	nop    DWORD PTR [rax+rax*1+0x0]
   4af90:	mov    rsi,rbx
   4af93:	mov    edx,0x10
   4af98:	mov    rdi,rbp
   4af9b:	call   281f0 <g_str_equal@plt+0x1af30>
   4afa0:	test   rax,rax
   4afa3:	mov    rbx,rax
   4afa6:	je     4b000 <g_str_equal@plt+0x3dd40>
   4afa8:	lea    rdx,[rbx+0x8]
   4afac:	xor    esi,esi
   4afae:	mov    rcx,r12
   4afb1:	mov    rdi,rbp
   4afb4:	call   4aca0 <g_str_equal@plt+0x3d9e0>
   4afb9:	cmp    QWORD PTR [rsp],0x0
   4afbe:	je     4af90 <g_str_equal@plt+0x3dcd0>
   4afc0:	mov    rsi,r13
   4afc3:	mov    rdi,rbp
   4afc6:	call   28390 <g_str_equal@plt+0x1b0d0>
   4afcb:	mov    rsi,QWORD PTR [rsp]
   4afcf:	test   rsi,rsi
   4afd2:	je     4af56 <g_str_equal@plt+0x3dc96>
   4afd4:	mov    rdi,rbp
   4afd7:	call   28770 <g_str_equal@plt+0x1b4b0>
   4afdc:	test   al,al
   4afde:	je     4aff1 <g_str_equal@plt+0x3dd31>
   4afe0:	mov    rdi,QWORD PTR [r13+0x0]
   4afe4:	call   45170 <g_str_equal@plt+0x37eb0>
   4afe9:	mov    QWORD PTR [r13+0x0],0x0
   4aff1:	mov    rsi,QWORD PTR [rsp]
   4aff5:	jmp    4af56 <g_str_equal@plt+0x3dc96>
   4affa:	nop    WORD PTR [rax+rax*1+0x0]
   4b000:	cmp    QWORD PTR [rsp],0x0
   4b005:	jne    4afc0 <g_str_equal@plt+0x3dd00>
   4b007:	mov    rsi,r12
   4b00a:	mov    rdi,rbp
   4b00d:	call   282e0 <g_str_equal@plt+0x1b020>
   4b012:	jmp    4afc0 <g_str_equal@plt+0x3dd00>
   4b014:	call   cd30 <__stack_chk_fail@plt>
   4b019:	nop    DWORD PTR [rax+0x0]
   4b020:	push   r13
   4b022:	push   r12
   4b024:	mov    r13,rdx
   4b027:	push   rbp
   4b028:	push   rbx
   4b029:	mov    rdx,rsi
   4b02c:	mov    rbx,rsi
   4b02f:	lea    rsi,[rip+0x13bef]        # 5ec25 <_fini@@Base+0xc4d1>
   4b036:	mov    rbp,rdi
   4b039:	sub    rsp,0x18
   4b03d:	mov    r12,rsp
   4b040:	mov    QWORD PTR [rsp],0x0
   4b048:	mov    rcx,r12
   4b04b:	mov    rax,QWORD PTR fs:0x28
   4b054:	mov    QWORD PTR [rsp+0x8],rax
   4b059:	xor    eax,eax
   4b05b:	call   29210 <g_str_equal@plt+0x1bf50>
   4b060:	mov    rsi,QWORD PTR [rsp]
   4b064:	test   rsi,rsi
   4b067:	je     4b090 <g_str_equal@plt+0x3ddd0>
   4b069:	mov    rdi,r13
   4b06c:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4b071:	mov    rax,QWORD PTR [rsp+0x8]
   4b076:	xor    rax,QWORD PTR fs:0x28
   4b07f:	jne    4b0c3 <g_str_equal@plt+0x3de03>
   4b081:	add    rsp,0x18
   4b085:	pop    rbx
   4b086:	pop    rbp
   4b087:	pop    r12
   4b089:	pop    r13
   4b08b:	ret    
   4b08c:	nop    DWORD PTR [rax+0x0]
   4b090:	lea    rdx,[rbx+0x8]
   4b094:	lea    rsi,[rip+0x1a7af]        # 6584a <_fini@@Base+0x130f6>
   4b09b:	mov    rdi,rbp
   4b09e:	call   286a0 <g_str_equal@plt+0x1b3e0>
   4b0a3:	test   al,al
   4b0a5:	je     4b0bd <g_str_equal@plt+0x3ddfd>
   4b0a7:	lea    rdx,[rbx+0x10]
   4b0ab:	lea    rsi,[rip+0x1a798]        # 6584a <_fini@@Base+0x130f6>
   4b0b2:	mov    rcx,r12
   4b0b5:	mov    rdi,rbp
   4b0b8:	call   29450 <g_str_equal@plt+0x1c190>
   4b0bd:	mov    rsi,QWORD PTR [rsp]
   4b0c1:	jmp    4b069 <g_str_equal@plt+0x3dda9>
   4b0c3:	call   cd30 <__stack_chk_fail@plt>
   4b0c8:	nop    DWORD PTR [rax+rax*1+0x0]
   4b0d0:	push   r13
   4b0d2:	push   r12
   4b0d4:	mov    r13,rcx
   4b0d7:	push   rbp
   4b0d8:	push   rbx
   4b0d9:	mov    ecx,0x18
   4b0de:	mov    rbp,rdi
   4b0e1:	mov    rbx,rdx
   4b0e4:	sub    rsp,0x18
   4b0e8:	mov    r12,rsp
   4b0eb:	mov    QWORD PTR [rsp],0x0
   4b0f3:	mov    r8,r12
   4b0f6:	mov    rax,QWORD PTR fs:0x28
   4b0ff:	mov    QWORD PTR [rsp+0x8],rax
   4b104:	xor    eax,eax
   4b106:	call   27da0 <g_str_equal@plt+0x1aae0>
   4b10b:	mov    rsi,QWORD PTR [rsp]
   4b10f:	test   rsi,rsi
   4b112:	je     4b140 <g_str_equal@plt+0x3de80>
   4b114:	mov    rdi,r13
   4b117:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4b11c:	mov    rax,QWORD PTR [rsp+0x8]
   4b121:	xor    rax,QWORD PTR fs:0x28
   4b12a:	jne    4b19d <g_str_equal@plt+0x3dedd>
   4b12c:	add    rsp,0x18
   4b130:	pop    rbx
   4b131:	pop    rbp
   4b132:	pop    r12
   4b134:	pop    r13
   4b136:	ret    
   4b137:	nop    WORD PTR [rax+rax*1+0x0]
   4b140:	mov    rsi,QWORD PTR [rbx]
   4b143:	test   rsi,rsi
   4b146:	je     4b15a <g_str_equal@plt+0x3de9a>
   4b148:	mov    rdx,r12
   4b14b:	mov    rdi,rbp
   4b14e:	call   4b020 <g_str_equal@plt+0x3dd60>
   4b153:	cmp    QWORD PTR [rsp],0x0
   4b158:	je     4b190 <g_str_equal@plt+0x3ded0>
   4b15a:	mov    rsi,rbx
   4b15d:	mov    rdi,rbp
   4b160:	call   28000 <g_str_equal@plt+0x1ad40>
   4b165:	mov    rsi,QWORD PTR [rsp]
   4b169:	test   rsi,rsi
   4b16c:	je     4b114 <g_str_equal@plt+0x3de54>
   4b16e:	mov    rdi,rbp
   4b171:	call   28770 <g_str_equal@plt+0x1b4b0>
   4b176:	test   al,al
   4b178:	je     4b189 <g_str_equal@plt+0x3dec9>
   4b17a:	mov    rdi,QWORD PTR [rbx]
   4b17d:	call   451b0 <g_str_equal@plt+0x37ef0>
   4b182:	mov    QWORD PTR [rbx],0x0
   4b189:	mov    rsi,QWORD PTR [rsp]
   4b18d:	jmp    4b114 <g_str_equal@plt+0x3de54>
   4b18f:	nop
   4b190:	mov    rsi,r12
   4b193:	mov    rdi,rbp
   4b196:	call   27f50 <g_str_equal@plt+0x1ac90>
   4b19b:	jmp    4b15a <g_str_equal@plt+0x3de9a>
   4b19d:	call   cd30 <__stack_chk_fail@plt>
   4b1a2:	nop    DWORD PTR [rax+0x0]
   4b1a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4b1b0:	push   rbx
   4b1b1:	mov    r8,rcx
   4b1b4:	mov    rbx,rdx
   4b1b7:	lea    rcx,[rip+0x235de2]        # 280fa0 <_fini@@Base+0x22e84c>
   4b1be:	sub    rsp,0x10
   4b1c2:	mov    rax,QWORD PTR fs:0x28
   4b1cb:	mov    QWORD PTR [rsp+0x8],rax
   4b1d0:	xor    eax,eax
   4b1d2:	mov    eax,DWORD PTR [rdx]
   4b1d4:	lea    rdx,[rsp+0x4]
   4b1d9:	mov    DWORD PTR [rsp+0x4],eax
   4b1dd:	call   296a0 <g_str_equal@plt+0x1c3e0>
   4b1e2:	mov    eax,DWORD PTR [rsp+0x4]
   4b1e6:	mov    DWORD PTR [rbx],eax
   4b1e8:	mov    rax,QWORD PTR [rsp+0x8]
   4b1ed:	xor    rax,QWORD PTR fs:0x28
   4b1f6:	jne    4b1fe <g_str_equal@plt+0x3df3e>
   4b1f8:	add    rsp,0x10
   4b1fc:	pop    rbx
   4b1fd:	ret    
   4b1fe:	call   cd30 <__stack_chk_fail@plt>
   4b203:	nop    DWORD PTR [rax]
   4b206:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4b210:	push   rbx
   4b211:	mov    rbx,rdx
   4b214:	mov    rdx,rsi
   4b217:	lea    rsi,[rip+0x1a69c]        # 658ba <_fini@@Base+0x13166>
   4b21e:	sub    rsp,0x10
   4b222:	mov    rcx,rsp
   4b225:	mov    QWORD PTR [rsp],0x0
   4b22d:	mov    rax,QWORD PTR fs:0x28
   4b236:	mov    QWORD PTR [rsp+0x8],rax
   4b23b:	xor    eax,eax
   4b23d:	call   4b0d0 <g_str_equal@plt+0x3de10>
   4b242:	mov    rsi,QWORD PTR [rsp]
   4b246:	mov    rdi,rbx
   4b249:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4b24e:	mov    rax,QWORD PTR [rsp+0x8]
   4b253:	xor    rax,QWORD PTR fs:0x28
   4b25c:	jne    4b264 <g_str_equal@plt+0x3dfa4>
   4b25e:	add    rsp,0x10
   4b262:	pop    rbx
   4b263:	ret    
   4b264:	call   cd30 <__stack_chk_fail@plt>
   4b269:	nop    DWORD PTR [rax+0x0]
   4b270:	push   r13
   4b272:	push   r12
   4b274:	mov    r13,rcx
   4b277:	push   rbp
   4b278:	push   rbx
   4b279:	mov    ecx,0x8
   4b27e:	mov    rbp,rdi
   4b281:	mov    rbx,rdx
   4b284:	sub    rsp,0x18
   4b288:	mov    r12,rsp
   4b28b:	mov    QWORD PTR [rsp],0x0
   4b293:	mov    r8,r12
   4b296:	mov    rax,QWORD PTR fs:0x28
   4b29f:	mov    QWORD PTR [rsp+0x8],rax
   4b2a4:	xor    eax,eax
   4b2a6:	call   27da0 <g_str_equal@plt+0x1aae0>
   4b2ab:	mov    rsi,QWORD PTR [rsp]
   4b2af:	test   rsi,rsi
   4b2b2:	je     4b2e0 <g_str_equal@plt+0x3e020>
   4b2b4:	mov    rdi,r13
   4b2b7:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4b2bc:	mov    rax,QWORD PTR [rsp+0x8]
   4b2c1:	xor    rax,QWORD PTR fs:0x28
   4b2ca:	jne    4b33d <g_str_equal@plt+0x3e07d>
   4b2cc:	add    rsp,0x18
   4b2d0:	pop    rbx
   4b2d1:	pop    rbp
   4b2d2:	pop    r12
   4b2d4:	pop    r13
   4b2d6:	ret    
   4b2d7:	nop    WORD PTR [rax+rax*1+0x0]
   4b2e0:	mov    rsi,QWORD PTR [rbx]
   4b2e3:	test   rsi,rsi
   4b2e6:	je     4b2fa <g_str_equal@plt+0x3e03a>
   4b2e8:	mov    rdx,r12
   4b2eb:	mov    rdi,rbp
   4b2ee:	call   4b210 <g_str_equal@plt+0x3df50>
   4b2f3:	cmp    QWORD PTR [rsp],0x0
   4b2f8:	je     4b330 <g_str_equal@plt+0x3e070>
   4b2fa:	mov    rsi,rbx
   4b2fd:	mov    rdi,rbp
   4b300:	call   28000 <g_str_equal@plt+0x1ad40>
   4b305:	mov    rsi,QWORD PTR [rsp]
   4b309:	test   rsi,rsi
   4b30c:	je     4b2b4 <g_str_equal@plt+0x3dff4>
   4b30e:	mov    rdi,rbp
   4b311:	call   28770 <g_str_equal@plt+0x1b4b0>
   4b316:	test   al,al
   4b318:	je     4b329 <g_str_equal@plt+0x3e069>
   4b31a:	mov    rdi,QWORD PTR [rbx]
   4b31d:	call   451f0 <g_str_equal@plt+0x37f30>
   4b322:	mov    QWORD PTR [rbx],0x0
   4b329:	mov    rsi,QWORD PTR [rsp]
   4b32d:	jmp    4b2b4 <g_str_equal@plt+0x3dff4>
   4b32f:	nop
   4b330:	mov    rsi,r12
   4b333:	mov    rdi,rbp
   4b336:	call   27f50 <g_str_equal@plt+0x1ac90>
   4b33b:	jmp    4b2fa <g_str_equal@plt+0x3e03a>
   4b33d:	call   cd30 <__stack_chk_fail@plt>
   4b342:	nop    DWORD PTR [rax+0x0]
   4b346:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4b350:	push   r13
   4b352:	push   r12
   4b354:	mov    r13,rdx
   4b357:	push   rbp
   4b358:	push   rbx
   4b359:	lea    rcx,[rip+0x235c40]        # 280fa0 <_fini@@Base+0x22e84c>
   4b360:	mov    rbx,rsi
   4b363:	mov    rbp,rdi
   4b366:	sub    rsp,0x28
   4b36a:	mov    rax,QWORD PTR fs:0x28
   4b373:	mov    QWORD PTR [rsp+0x18],rax
   4b378:	xor    eax,eax
   4b37a:	lea    r12,[rsp+0x10]
   4b37f:	mov    eax,DWORD PTR [rsi]
   4b381:	lea    rdx,[rsp+0xc]
   4b386:	lea    rsi,[rip+0x12a33]        # 5ddc0 <_fini@@Base+0xb66c>
   4b38d:	mov    QWORD PTR [rsp+0x10],0x0
   4b396:	mov    r8,r12
   4b399:	mov    DWORD PTR [rsp+0xc],eax
   4b39d:	call   296a0 <g_str_equal@plt+0x1c3e0>
   4b3a2:	mov    rsi,QWORD PTR [rsp+0x10]
   4b3a7:	mov    eax,DWORD PTR [rsp+0xc]
   4b3ab:	test   rsi,rsi
   4b3ae:	mov    DWORD PTR [rbx],eax
   4b3b0:	je     4b3d8 <g_str_equal@plt+0x3e118>
   4b3b2:	mov    rdi,r13
   4b3b5:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4b3ba:	mov    rax,QWORD PTR [rsp+0x18]
   4b3bf:	xor    rax,QWORD PTR fs:0x28
   4b3c8:	jne    4b3f5 <g_str_equal@plt+0x3e135>
   4b3ca:	add    rsp,0x28
   4b3ce:	pop    rbx
   4b3cf:	pop    rbp
   4b3d0:	pop    r12
   4b3d2:	pop    r13
   4b3d4:	ret    
   4b3d5:	nop    DWORD PTR [rax]
   4b3d8:	lea    rsi,[rip+0x1a4db]        # 658ba <_fini@@Base+0x13166>
   4b3df:	lea    rdx,[rbx+0x8]
   4b3e3:	mov    rcx,r12
   4b3e6:	mov    rdi,rbp
   4b3e9:	call   4b0d0 <g_str_equal@plt+0x3de10>
   4b3ee:	mov    rsi,QWORD PTR [rsp+0x10]
   4b3f3:	jmp    4b3b2 <g_str_equal@plt+0x3e0f2>
   4b3f5:	call   cd30 <__stack_chk_fail@plt>
   4b3fa:	nop    WORD PTR [rax+rax*1+0x0]
   4b400:	push   rbx
   4b401:	mov    r8,rcx
   4b404:	mov    rbx,rdx
   4b407:	lea    rcx,[rip+0x235b52]        # 280f60 <_fini@@Base+0x22e80c>
   4b40e:	sub    rsp,0x10
   4b412:	mov    rax,QWORD PTR fs:0x28
   4b41b:	mov    QWORD PTR [rsp+0x8],rax
   4b420:	xor    eax,eax
   4b422:	mov    eax,DWORD PTR [rdx]
   4b424:	lea    rdx,[rsp+0x4]
   4b429:	mov    DWORD PTR [rsp+0x4],eax
   4b42d:	call   296a0 <g_str_equal@plt+0x1c3e0>
   4b432:	mov    eax,DWORD PTR [rsp+0x4]
   4b436:	mov    DWORD PTR [rbx],eax
   4b438:	mov    rax,QWORD PTR [rsp+0x8]
   4b43d:	xor    rax,QWORD PTR fs:0x28
   4b446:	jne    4b44e <g_str_equal@plt+0x3e18e>
   4b448:	add    rsp,0x10
   4b44c:	pop    rbx
   4b44d:	ret    
   4b44e:	call   cd30 <__stack_chk_fail@plt>
   4b453:	nop    DWORD PTR [rax]
   4b456:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4b460:	push   r13
   4b462:	push   r12
   4b464:	mov    r13,rdx
   4b467:	push   rbp
   4b468:	push   rbx
   4b469:	lea    rcx,[rip+0x235af0]        # 280f60 <_fini@@Base+0x22e80c>
   4b470:	mov    rbx,rsi
   4b473:	mov    rbp,rdi
   4b476:	sub    rsp,0x28
   4b47a:	mov    rax,QWORD PTR fs:0x28
   4b483:	mov    QWORD PTR [rsp+0x18],rax
   4b488:	xor    eax,eax
   4b48a:	lea    r12,[rsp+0x10]
   4b48f:	mov    eax,DWORD PTR [rsi]
   4b491:	lea    rdx,[rsp+0xc]
   4b496:	lea    rsi,[rip+0x13cf5]        # 5f192 <_fini@@Base+0xca3e>
   4b49d:	mov    QWORD PTR [rsp+0x10],0x0
   4b4a6:	mov    r8,r12
   4b4a9:	mov    DWORD PTR [rsp+0xc],eax
   4b4ad:	call   296a0 <g_str_equal@plt+0x1c3e0>
   4b4b2:	mov    rsi,QWORD PTR [rsp+0x10]
   4b4b7:	mov    eax,DWORD PTR [rsp+0xc]
   4b4bb:	test   rsi,rsi
   4b4be:	mov    DWORD PTR [rbx],eax
   4b4c0:	je     4b4e8 <g_str_equal@plt+0x3e228>
   4b4c2:	mov    rdi,r13
   4b4c5:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4b4ca:	mov    rax,QWORD PTR [rsp+0x18]
   4b4cf:	xor    rax,QWORD PTR fs:0x28
   4b4d8:	jne    4b505 <g_str_equal@plt+0x3e245>
   4b4da:	add    rsp,0x28
   4b4de:	pop    rbx
   4b4df:	pop    rbp
   4b4e0:	pop    r12
   4b4e2:	pop    r13
   4b4e4:	ret    
   4b4e5:	nop    DWORD PTR [rax]
   4b4e8:	lea    rsi,[rip+0x1a3d1]        # 658c0 <_fini@@Base+0x1316c>
   4b4ef:	lea    rdx,[rbx+0x8]
   4b4f3:	mov    rcx,r12
   4b4f6:	mov    rdi,rbp
   4b4f9:	call   246a0 <g_str_equal@plt+0x173e0>
   4b4fe:	mov    rsi,QWORD PTR [rsp+0x10]
   4b503:	jmp    4b4c2 <g_str_equal@plt+0x3e202>
   4b505:	call   cd30 <__stack_chk_fail@plt>
   4b50a:	nop    WORD PTR [rax+rax*1+0x0]
   4b510:	push   r13
   4b512:	push   r12
   4b514:	mov    r13,rcx
   4b517:	push   rbp
   4b518:	push   rbx
   4b519:	mov    ecx,0x10
   4b51e:	mov    rbp,rdi
   4b521:	mov    rbx,rdx
   4b524:	sub    rsp,0x18
   4b528:	mov    r12,rsp
   4b52b:	mov    QWORD PTR [rsp],0x0
   4b533:	mov    r8,r12
   4b536:	mov    rax,QWORD PTR fs:0x28
   4b53f:	mov    QWORD PTR [rsp+0x8],rax
   4b544:	xor    eax,eax
   4b546:	call   27da0 <g_str_equal@plt+0x1aae0>
   4b54b:	mov    rsi,QWORD PTR [rsp]
   4b54f:	test   rsi,rsi
   4b552:	je     4b580 <g_str_equal@plt+0x3e2c0>
   4b554:	mov    rdi,r13
   4b557:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4b55c:	mov    rax,QWORD PTR [rsp+0x8]
   4b561:	xor    rax,QWORD PTR fs:0x28
   4b56a:	jne    4b5dd <g_str_equal@plt+0x3e31d>
   4b56c:	add    rsp,0x18
   4b570:	pop    rbx
   4b571:	pop    rbp
   4b572:	pop    r12
   4b574:	pop    r13
   4b576:	ret    
   4b577:	nop    WORD PTR [rax+rax*1+0x0]
   4b580:	mov    rsi,QWORD PTR [rbx]
   4b583:	test   rsi,rsi
   4b586:	je     4b59a <g_str_equal@plt+0x3e2da>
   4b588:	mov    rdx,r12
   4b58b:	mov    rdi,rbp
   4b58e:	call   4b460 <g_str_equal@plt+0x3e1a0>
   4b593:	cmp    QWORD PTR [rsp],0x0
   4b598:	je     4b5d0 <g_str_equal@plt+0x3e310>
   4b59a:	mov    rsi,rbx
   4b59d:	mov    rdi,rbp
   4b5a0:	call   28000 <g_str_equal@plt+0x1ad40>
   4b5a5:	mov    rsi,QWORD PTR [rsp]
   4b5a9:	test   rsi,rsi
   4b5ac:	je     4b554 <g_str_equal@plt+0x3e294>
   4b5ae:	mov    rdi,rbp
   4b5b1:	call   28770 <g_str_equal@plt+0x1b4b0>
   4b5b6:	test   al,al
   4b5b8:	je     4b5c9 <g_str_equal@plt+0x3e309>
   4b5ba:	mov    rdi,QWORD PTR [rbx]
   4b5bd:	call   45230 <g_str_equal@plt+0x37f70>
   4b5c2:	mov    QWORD PTR [rbx],0x0
   4b5c9:	mov    rsi,QWORD PTR [rsp]
   4b5cd:	jmp    4b554 <g_str_equal@plt+0x3e294>
   4b5cf:	nop
   4b5d0:	mov    rsi,r12
   4b5d3:	mov    rdi,rbp
   4b5d6:	call   27f50 <g_str_equal@plt+0x1ac90>
   4b5db:	jmp    4b59a <g_str_equal@plt+0x3e2da>
   4b5dd:	call   cd30 <__stack_chk_fail@plt>
   4b5e2:	nop    DWORD PTR [rax+0x0]
   4b5e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4b5f0:	push   r13
   4b5f2:	push   r12
   4b5f4:	mov    r13,rdx
   4b5f7:	push   rbp
   4b5f8:	push   rbx
   4b5f9:	mov    rdx,rsi
   4b5fc:	mov    rbx,rsi
   4b5ff:	lea    rsi,[rip+0x1a2d1]        # 658d7 <_fini@@Base+0x13183>
   4b606:	mov    rbp,rdi
   4b609:	sub    rsp,0x18
   4b60d:	mov    r12,rsp
   4b610:	mov    QWORD PTR [rsp],0x0
   4b618:	mov    rcx,r12
   4b61b:	mov    rax,QWORD PTR fs:0x28
   4b624:	mov    QWORD PTR [rsp+0x8],rax
   4b629:	xor    eax,eax
   4b62b:	call   4b0d0 <g_str_equal@plt+0x3de10>
   4b630:	mov    rsi,QWORD PTR [rsp]
   4b634:	test   rsi,rsi
   4b637:	je     4b660 <g_str_equal@plt+0x3e3a0>
   4b639:	mov    rdi,r13
   4b63c:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4b641:	mov    rax,QWORD PTR [rsp+0x8]
   4b646:	xor    rax,QWORD PTR fs:0x28
   4b64f:	jne    4b67c <g_str_equal@plt+0x3e3bc>
   4b651:	add    rsp,0x18
   4b655:	pop    rbx
   4b656:	pop    rbp
   4b657:	pop    r12
   4b659:	pop    r13
   4b65b:	ret    
   4b65c:	nop    DWORD PTR [rax+0x0]
   4b660:	lea    rsi,[rip+0x1a277]        # 658de <_fini@@Base+0x1318a>
   4b667:	lea    rdx,[rbx+0x8]
   4b66b:	mov    rcx,r12
   4b66e:	mov    rdi,rbp
   4b671:	call   4b0d0 <g_str_equal@plt+0x3de10>
   4b676:	mov    rsi,QWORD PTR [rsp]
   4b67a:	jmp    4b639 <g_str_equal@plt+0x3e379>
   4b67c:	call   cd30 <__stack_chk_fail@plt>
   4b681:	nop    DWORD PTR [rax+rax*1+0x0]
   4b686:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4b690:	push   rbx
   4b691:	mov    rbx,rdx
   4b694:	mov    rdx,rsi
   4b697:	lea    rsi,[rip+0x1a21c]        # 658ba <_fini@@Base+0x13166>
   4b69e:	sub    rsp,0x10
   4b6a2:	mov    rcx,rsp
   4b6a5:	mov    QWORD PTR [rsp],0x0
   4b6ad:	mov    rax,QWORD PTR fs:0x28
   4b6b6:	mov    QWORD PTR [rsp+0x8],rax
   4b6bb:	xor    eax,eax
   4b6bd:	call   4b0d0 <g_str_equal@plt+0x3de10>
   4b6c2:	mov    rsi,QWORD PTR [rsp]
   4b6c6:	mov    rdi,rbx
   4b6c9:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4b6ce:	mov    rax,QWORD PTR [rsp+0x8]
   4b6d3:	xor    rax,QWORD PTR fs:0x28
   4b6dc:	jne    4b6e4 <g_str_equal@plt+0x3e424>
   4b6de:	add    rsp,0x10
   4b6e2:	pop    rbx
   4b6e3:	ret    
   4b6e4:	call   cd30 <__stack_chk_fail@plt>
   4b6e9:	nop    DWORD PTR [rax+0x0]
   4b6f0:	push   r13
   4b6f2:	push   r12
   4b6f4:	mov    r13,rcx
   4b6f7:	push   rbp
   4b6f8:	push   rbx
   4b6f9:	mov    ecx,0x8
   4b6fe:	mov    rbp,rdi
   4b701:	mov    rbx,rdx
   4b704:	sub    rsp,0x18
   4b708:	mov    r12,rsp
   4b70b:	mov    QWORD PTR [rsp],0x0
   4b713:	mov    r8,r12
   4b716:	mov    rax,QWORD PTR fs:0x28
   4b71f:	mov    QWORD PTR [rsp+0x8],rax
   4b724:	xor    eax,eax
   4b726:	call   27da0 <g_str_equal@plt+0x1aae0>
   4b72b:	mov    rsi,QWORD PTR [rsp]
   4b72f:	test   rsi,rsi
   4b732:	je     4b760 <g_str_equal@plt+0x3e4a0>
   4b734:	mov    rdi,r13
   4b737:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4b73c:	mov    rax,QWORD PTR [rsp+0x8]
   4b741:	xor    rax,QWORD PTR fs:0x28
   4b74a:	jne    4b7bd <g_str_equal@plt+0x3e4fd>
   4b74c:	add    rsp,0x18
   4b750:	pop    rbx
   4b751:	pop    rbp
   4b752:	pop    r12
   4b754:	pop    r13
   4b756:	ret    
   4b757:	nop    WORD PTR [rax+rax*1+0x0]
   4b760:	mov    rsi,QWORD PTR [rbx]
   4b763:	test   rsi,rsi
   4b766:	je     4b77a <g_str_equal@plt+0x3e4ba>
   4b768:	mov    rdx,r12
   4b76b:	mov    rdi,rbp
   4b76e:	call   4b690 <g_str_equal@plt+0x3e3d0>
   4b773:	cmp    QWORD PTR [rsp],0x0
   4b778:	je     4b7b0 <g_str_equal@plt+0x3e4f0>
   4b77a:	mov    rsi,rbx
   4b77d:	mov    rdi,rbp
   4b780:	call   28000 <g_str_equal@plt+0x1ad40>
   4b785:	mov    rsi,QWORD PTR [rsp]
   4b789:	test   rsi,rsi
   4b78c:	je     4b734 <g_str_equal@plt+0x3e474>
   4b78e:	mov    rdi,rbp
   4b791:	call   28770 <g_str_equal@plt+0x1b4b0>
   4b796:	test   al,al
   4b798:	je     4b7a9 <g_str_equal@plt+0x3e4e9>
   4b79a:	mov    rdi,QWORD PTR [rbx]
   4b79d:	call   45270 <g_str_equal@plt+0x37fb0>
   4b7a2:	mov    QWORD PTR [rbx],0x0
   4b7a9:	mov    rsi,QWORD PTR [rsp]
   4b7ad:	jmp    4b734 <g_str_equal@plt+0x3e474>
   4b7af:	nop
   4b7b0:	mov    rsi,r12
   4b7b3:	mov    rdi,rbp
   4b7b6:	call   27f50 <g_str_equal@plt+0x1ac90>
   4b7bb:	jmp    4b77a <g_str_equal@plt+0x3e4ba>
   4b7bd:	call   cd30 <__stack_chk_fail@plt>
   4b7c2:	nop    DWORD PTR [rax+0x0]
   4b7c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4b7d0:	push   r13
   4b7d2:	push   r12
   4b7d4:	mov    r13,rdx
   4b7d7:	push   rbp
   4b7d8:	push   rbx
   4b7d9:	mov    rdx,rsi
   4b7dc:	mov    rbx,rsi
   4b7df:	lea    rsi,[rip+0x1a0f1]        # 658d7 <_fini@@Base+0x13183>
   4b7e6:	mov    rbp,rdi
   4b7e9:	sub    rsp,0x18
   4b7ed:	mov    r12,rsp
   4b7f0:	mov    QWORD PTR [rsp],0x0
   4b7f8:	mov    rcx,r12
   4b7fb:	mov    rax,QWORD PTR fs:0x28
   4b804:	mov    QWORD PTR [rsp+0x8],rax
   4b809:	xor    eax,eax
   4b80b:	call   4b0d0 <g_str_equal@plt+0x3de10>
   4b810:	mov    rsi,QWORD PTR [rsp]
   4b814:	test   rsi,rsi
   4b817:	je     4b840 <g_str_equal@plt+0x3e580>
   4b819:	mov    rdi,r13
   4b81c:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4b821:	mov    rax,QWORD PTR [rsp+0x8]
   4b826:	xor    rax,QWORD PTR fs:0x28
   4b82f:	jne    4b85c <g_str_equal@plt+0x3e59c>
   4b831:	add    rsp,0x18
   4b835:	pop    rbx
   4b836:	pop    rbp
   4b837:	pop    r12
   4b839:	pop    r13
   4b83b:	ret    
   4b83c:	nop    DWORD PTR [rax+0x0]
   4b840:	lea    rsi,[rip+0x1a097]        # 658de <_fini@@Base+0x1318a>
   4b847:	lea    rdx,[rbx+0x8]
   4b84b:	mov    rcx,r12
   4b84e:	mov    rdi,rbp
   4b851:	call   4b0d0 <g_str_equal@plt+0x3de10>
   4b856:	mov    rsi,QWORD PTR [rsp]
   4b85a:	jmp    4b819 <g_str_equal@plt+0x3e559>
   4b85c:	call   cd30 <__stack_chk_fail@plt>
   4b861:	nop    DWORD PTR [rax+rax*1+0x0]
   4b866:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4b870:	push   r13
   4b872:	push   r12
   4b874:	mov    r13,rdx
   4b877:	push   rbp
   4b878:	push   rbx
   4b879:	mov    rdx,rsi
   4b87c:	mov    rbx,rsi
   4b87f:	lea    rsi,[rip+0x1a05f]        # 658e5 <_fini@@Base+0x13191>
   4b886:	mov    rbp,rdi
   4b889:	sub    rsp,0x18
   4b88d:	mov    r12,rsp
   4b890:	mov    QWORD PTR [rsp],0x0
   4b898:	mov    rcx,r12
   4b89b:	mov    rax,QWORD PTR fs:0x28
   4b8a4:	mov    QWORD PTR [rsp+0x8],rax
   4b8a9:	xor    eax,eax
   4b8ab:	call   28780 <g_str_equal@plt+0x1b4c0>
   4b8b0:	mov    rsi,QWORD PTR [rsp]
   4b8b4:	test   rsi,rsi
   4b8b7:	je     4b8e0 <g_str_equal@plt+0x3e620>
   4b8b9:	mov    rdi,r13
   4b8bc:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4b8c1:	mov    rax,QWORD PTR [rsp+0x8]
   4b8c6:	xor    rax,QWORD PTR fs:0x28
   4b8cf:	jne    4b8fc <g_str_equal@plt+0x3e63c>
   4b8d1:	add    rsp,0x18
   4b8d5:	pop    rbx
   4b8d6:	pop    rbp
   4b8d7:	pop    r12
   4b8d9:	pop    r13
   4b8db:	ret    
   4b8dc:	nop    DWORD PTR [rax+0x0]
   4b8e0:	lea    rsi,[rip+0x18e9f]        # 64786 <_fini@@Base+0x12032>
   4b8e7:	lea    rdx,[rbx+0x8]
   4b8eb:	mov    rcx,r12
   4b8ee:	mov    rdi,rbp
   4b8f1:	call   28780 <g_str_equal@plt+0x1b4c0>
   4b8f6:	mov    rsi,QWORD PTR [rsp]
   4b8fa:	jmp    4b8b9 <g_str_equal@plt+0x3e5f9>
   4b8fc:	call   cd30 <__stack_chk_fail@plt>
   4b901:	nop    DWORD PTR [rax+rax*1+0x0]
   4b906:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4b910:	push   r13
   4b912:	push   r12
   4b914:	mov    r13,rcx
   4b917:	push   rbp
   4b918:	push   rbx
   4b919:	mov    ecx,0x10
   4b91e:	mov    rbp,rdi
   4b921:	mov    rbx,rdx
   4b924:	sub    rsp,0x18
   4b928:	mov    r12,rsp
   4b92b:	mov    QWORD PTR [rsp],0x0
   4b933:	mov    r8,r12
   4b936:	mov    rax,QWORD PTR fs:0x28
   4b93f:	mov    QWORD PTR [rsp+0x8],rax
   4b944:	xor    eax,eax
   4b946:	call   27da0 <g_str_equal@plt+0x1aae0>
   4b94b:	mov    rsi,QWORD PTR [rsp]
   4b94f:	test   rsi,rsi
   4b952:	je     4b980 <g_str_equal@plt+0x3e6c0>
   4b954:	mov    rdi,r13
   4b957:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4b95c:	mov    rax,QWORD PTR [rsp+0x8]
   4b961:	xor    rax,QWORD PTR fs:0x28
   4b96a:	jne    4b9dd <g_str_equal@plt+0x3e71d>
   4b96c:	add    rsp,0x18
   4b970:	pop    rbx
   4b971:	pop    rbp
   4b972:	pop    r12
   4b974:	pop    r13
   4b976:	ret    
   4b977:	nop    WORD PTR [rax+rax*1+0x0]
   4b980:	mov    rsi,QWORD PTR [rbx]
   4b983:	test   rsi,rsi
   4b986:	je     4b99a <g_str_equal@plt+0x3e6da>
   4b988:	mov    rdx,r12
   4b98b:	mov    rdi,rbp
   4b98e:	call   4b870 <g_str_equal@plt+0x3e5b0>
   4b993:	cmp    QWORD PTR [rsp],0x0
   4b998:	je     4b9d0 <g_str_equal@plt+0x3e710>
   4b99a:	mov    rsi,rbx
   4b99d:	mov    rdi,rbp
   4b9a0:	call   28000 <g_str_equal@plt+0x1ad40>
   4b9a5:	mov    rsi,QWORD PTR [rsp]
   4b9a9:	test   rsi,rsi
   4b9ac:	je     4b954 <g_str_equal@plt+0x3e694>
   4b9ae:	mov    rdi,rbp
   4b9b1:	call   28770 <g_str_equal@plt+0x1b4b0>
   4b9b6:	test   al,al
   4b9b8:	je     4b9c9 <g_str_equal@plt+0x3e709>
   4b9ba:	mov    rdi,QWORD PTR [rbx]
   4b9bd:	call   452b0 <g_str_equal@plt+0x37ff0>
   4b9c2:	mov    QWORD PTR [rbx],0x0
   4b9c9:	mov    rsi,QWORD PTR [rsp]
   4b9cd:	jmp    4b954 <g_str_equal@plt+0x3e694>
   4b9cf:	nop
   4b9d0:	mov    rsi,r12
   4b9d3:	mov    rdi,rbp
   4b9d6:	call   27f50 <g_str_equal@plt+0x1ac90>
   4b9db:	jmp    4b99a <g_str_equal@plt+0x3e6da>
   4b9dd:	call   cd30 <__stack_chk_fail@plt>
   4b9e2:	nop    DWORD PTR [rax+0x0]
   4b9e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4b9f0:	push   r12
   4b9f2:	push   rbp
   4b9f3:	mov    r12,rdx
   4b9f6:	push   rbx
   4b9f7:	mov    rdx,rsi
   4b9fa:	mov    rbx,rsi
   4b9fd:	lea    rsi,[rip+0x19ee1]        # 658e5 <_fini@@Base+0x13191>
   4ba04:	mov    rbp,rdi
   4ba07:	sub    rsp,0x10
   4ba0b:	mov    rax,QWORD PTR fs:0x28
   4ba14:	mov    QWORD PTR [rsp+0x8],rax
   4ba19:	xor    eax,eax
   4ba1b:	mov    QWORD PTR [rsp],0x0
   4ba23:	call   286a0 <g_str_equal@plt+0x1b3e0>
   4ba28:	test   al,al
   4ba2a:	je     4ba70 <g_str_equal@plt+0x3e7b0>
   4ba2c:	lea    rsi,[rip+0x19eb2]        # 658e5 <_fini@@Base+0x13191>
   4ba33:	lea    rdx,[rbx+0x8]
   4ba37:	mov    rcx,rsp
   4ba3a:	mov    rdi,rbp
   4ba3d:	call   28780 <g_str_equal@plt+0x1b4c0>
   4ba42:	mov    rsi,QWORD PTR [rsp]
   4ba46:	test   rsi,rsi
   4ba49:	je     4ba70 <g_str_equal@plt+0x3e7b0>
   4ba4b:	mov    rdi,r12
   4ba4e:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4ba53:	mov    rax,QWORD PTR [rsp+0x8]
   4ba58:	xor    rax,QWORD PTR fs:0x28
   4ba61:	jne    4baac <g_str_equal@plt+0x3e7ec>
   4ba63:	add    rsp,0x10
   4ba67:	pop    rbx
   4ba68:	pop    rbp
   4ba69:	pop    r12
   4ba6b:	ret    
   4ba6c:	nop    DWORD PTR [rax+0x0]
   4ba70:	lea    rdx,[rbx+0x10]
   4ba74:	lea    rsi,[rip+0x19e73]        # 658ee <_fini@@Base+0x1319a>
   4ba7b:	mov    rdi,rbp
   4ba7e:	call   286a0 <g_str_equal@plt+0x1b3e0>
   4ba83:	test   al,al
   4ba85:	jne    4ba90 <g_str_equal@plt+0x3e7d0>
   4ba87:	mov    rsi,QWORD PTR [rsp]
   4ba8b:	jmp    4ba4b <g_str_equal@plt+0x3e78b>
   4ba8d:	nop    DWORD PTR [rax]
   4ba90:	lea    rsi,[rip+0x19e57]        # 658ee <_fini@@Base+0x1319a>
   4ba97:	lea    rdx,[rbx+0x18]
   4ba9b:	mov    rcx,rsp
   4ba9e:	mov    rdi,rbp
   4baa1:	call   29210 <g_str_equal@plt+0x1bf50>
   4baa6:	mov    rsi,QWORD PTR [rsp]
   4baaa:	jmp    4ba4b <g_str_equal@plt+0x3e78b>
   4baac:	call   cd30 <__stack_chk_fail@plt>
   4bab1:	nop    DWORD PTR [rax+rax*1+0x0]
   4bab6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4bac0:	push   r13
   4bac2:	push   r12
   4bac4:	mov    r13,rdx
   4bac7:	push   rbp
   4bac8:	push   rbx
   4bac9:	mov    rdx,rsi
   4bacc:	mov    rbx,rsi
   4bacf:	lea    rsi,[rip+0x19e0f]        # 658e5 <_fini@@Base+0x13191>
   4bad6:	mov    rbp,rdi
   4bad9:	sub    rsp,0x18
   4badd:	mov    r12,rsp
   4bae0:	mov    QWORD PTR [rsp],0x0
   4bae8:	mov    rcx,r12
   4baeb:	mov    rax,QWORD PTR fs:0x28
   4baf4:	mov    QWORD PTR [rsp+0x8],rax
   4baf9:	xor    eax,eax
   4bafb:	call   28780 <g_str_equal@plt+0x1b4c0>
   4bb00:	mov    rsi,QWORD PTR [rsp]
   4bb04:	test   rsi,rsi
   4bb07:	je     4bb30 <g_str_equal@plt+0x3e870>
   4bb09:	mov    rdi,r13
   4bb0c:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4bb11:	mov    rax,QWORD PTR [rsp+0x8]
   4bb16:	xor    rax,QWORD PTR fs:0x28
   4bb1f:	jne    4bb63 <g_str_equal@plt+0x3e8a3>
   4bb21:	add    rsp,0x18
   4bb25:	pop    rbx
   4bb26:	pop    rbp
   4bb27:	pop    r12
   4bb29:	pop    r13
   4bb2b:	ret    
   4bb2c:	nop    DWORD PTR [rax+0x0]
   4bb30:	lea    rdx,[rbx+0x8]
   4bb34:	lea    rsi,[rip+0x18c4b]        # 64786 <_fini@@Base+0x12032>
   4bb3b:	mov    rdi,rbp
   4bb3e:	call   286a0 <g_str_equal@plt+0x1b3e0>
   4bb43:	test   al,al
   4bb45:	je     4bb5d <g_str_equal@plt+0x3e89d>
   4bb47:	lea    rdx,[rbx+0x10]
   4bb4b:	lea    rsi,[rip+0x18c34]        # 64786 <_fini@@Base+0x12032>
   4bb52:	mov    rcx,r12
   4bb55:	mov    rdi,rbp
   4bb58:	call   28780 <g_str_equal@plt+0x1b4c0>
   4bb5d:	mov    rsi,QWORD PTR [rsp]
   4bb61:	jmp    4bb09 <g_str_equal@plt+0x3e849>
   4bb63:	call   cd30 <__stack_chk_fail@plt>
   4bb68:	nop    DWORD PTR [rax+rax*1+0x0]
   4bb70:	push   r13
   4bb72:	push   r12
   4bb74:	mov    r13,rdx
   4bb77:	push   rbp
   4bb78:	push   rbx
   4bb79:	mov    rdx,rsi
   4bb7c:	mov    rbx,rsi
   4bb7f:	lea    rsi,[rip+0x18c00]        # 64786 <_fini@@Base+0x12032>
   4bb86:	mov    rbp,rdi
   4bb89:	sub    rsp,0x18
   4bb8d:	mov    r12,rsp
   4bb90:	mov    QWORD PTR [rsp],0x0
   4bb98:	mov    rcx,r12
   4bb9b:	mov    rax,QWORD PTR fs:0x28
   4bba4:	mov    QWORD PTR [rsp+0x8],rax
   4bba9:	xor    eax,eax
   4bbab:	call   28780 <g_str_equal@plt+0x1b4c0>
   4bbb0:	mov    rsi,QWORD PTR [rsp]
   4bbb4:	test   rsi,rsi
   4bbb7:	je     4bbe0 <g_str_equal@plt+0x3e920>
   4bbb9:	mov    rdi,r13
   4bbbc:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4bbc1:	mov    rax,QWORD PTR [rsp+0x8]
   4bbc6:	xor    rax,QWORD PTR fs:0x28
   4bbcf:	jne    4bc13 <g_str_equal@plt+0x3e953>
   4bbd1:	add    rsp,0x18
   4bbd5:	pop    rbx
   4bbd6:	pop    rbp
   4bbd7:	pop    r12
   4bbd9:	pop    r13
   4bbdb:	ret    
   4bbdc:	nop    DWORD PTR [rax+0x0]
   4bbe0:	lea    rdx,[rbx+0x8]
   4bbe4:	lea    rsi,[rip+0x19d03]        # 658ee <_fini@@Base+0x1319a>
   4bbeb:	mov    rdi,rbp
   4bbee:	call   286a0 <g_str_equal@plt+0x1b3e0>
   4bbf3:	test   al,al
   4bbf5:	je     4bc0d <g_str_equal@plt+0x3e94d>
   4bbf7:	lea    rdx,[rbx+0x10]
   4bbfb:	lea    rsi,[rip+0x19cec]        # 658ee <_fini@@Base+0x1319a>
   4bc02:	mov    rcx,r12
   4bc05:	mov    rdi,rbp
   4bc08:	call   29210 <g_str_equal@plt+0x1bf50>
   4bc0d:	mov    rsi,QWORD PTR [rsp]
   4bc11:	jmp    4bbb9 <g_str_equal@plt+0x3e8f9>
   4bc13:	call   cd30 <__stack_chk_fail@plt>
   4bc18:	nop    DWORD PTR [rax+rax*1+0x0]
   4bc20:	push   r13
   4bc22:	push   r12
   4bc24:	mov    r13,rcx
   4bc27:	push   rbp
   4bc28:	push   rbx
   4bc29:	mov    ecx,0x18
   4bc2e:	mov    rbp,rdi
   4bc31:	mov    rbx,rdx
   4bc34:	sub    rsp,0x18
   4bc38:	mov    r12,rsp
   4bc3b:	mov    QWORD PTR [rsp],0x0
   4bc43:	mov    r8,r12
   4bc46:	mov    rax,QWORD PTR fs:0x28
   4bc4f:	mov    QWORD PTR [rsp+0x8],rax
   4bc54:	xor    eax,eax
   4bc56:	call   27da0 <g_str_equal@plt+0x1aae0>
   4bc5b:	mov    rsi,QWORD PTR [rsp]
   4bc5f:	test   rsi,rsi
   4bc62:	je     4bc90 <g_str_equal@plt+0x3e9d0>
   4bc64:	mov    rdi,r13
   4bc67:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4bc6c:	mov    rax,QWORD PTR [rsp+0x8]
   4bc71:	xor    rax,QWORD PTR fs:0x28
   4bc7a:	jne    4bced <g_str_equal@plt+0x3ea2d>
   4bc7c:	add    rsp,0x18
   4bc80:	pop    rbx
   4bc81:	pop    rbp
   4bc82:	pop    r12
   4bc84:	pop    r13
   4bc86:	ret    
   4bc87:	nop    WORD PTR [rax+rax*1+0x0]
   4bc90:	mov    rsi,QWORD PTR [rbx]
   4bc93:	test   rsi,rsi
   4bc96:	je     4bcaa <g_str_equal@plt+0x3e9ea>
   4bc98:	mov    rdx,r12
   4bc9b:	mov    rdi,rbp
   4bc9e:	call   4bb70 <g_str_equal@plt+0x3e8b0>
   4bca3:	cmp    QWORD PTR [rsp],0x0
   4bca8:	je     4bce0 <g_str_equal@plt+0x3ea20>
   4bcaa:	mov    rsi,rbx
   4bcad:	mov    rdi,rbp
   4bcb0:	call   28000 <g_str_equal@plt+0x1ad40>
   4bcb5:	mov    rsi,QWORD PTR [rsp]
   4bcb9:	test   rsi,rsi
   4bcbc:	je     4bc64 <g_str_equal@plt+0x3e9a4>
   4bcbe:	mov    rdi,rbp
   4bcc1:	call   28770 <g_str_equal@plt+0x1b4b0>
   4bcc6:	test   al,al
   4bcc8:	je     4bcd9 <g_str_equal@plt+0x3ea19>
   4bcca:	mov    rdi,QWORD PTR [rbx]
   4bccd:	call   452f0 <g_str_equal@plt+0x38030>
   4bcd2:	mov    QWORD PTR [rbx],0x0
   4bcd9:	mov    rsi,QWORD PTR [rsp]
   4bcdd:	jmp    4bc64 <g_str_equal@plt+0x3e9a4>
   4bcdf:	nop
   4bce0:	mov    rsi,r12
   4bce3:	mov    rdi,rbp
   4bce6:	call   27f50 <g_str_equal@plt+0x1ac90>
   4bceb:	jmp    4bcaa <g_str_equal@plt+0x3e9ea>
   4bced:	call   cd30 <__stack_chk_fail@plt>
   4bcf2:	nop    DWORD PTR [rax+0x0]
   4bcf6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4bd00:	push   r14
   4bd02:	push   r13
   4bd04:	mov    r14,rcx
   4bd07:	push   r12
   4bd09:	push   rbp
   4bd0a:	mov    ecx,0x10
   4bd0f:	push   rbx
   4bd10:	mov    rbp,rdi
   4bd13:	mov    r13,rdx
   4bd16:	sub    rsp,0x10
   4bd1a:	mov    r12,rsp
   4bd1d:	mov    QWORD PTR [rsp],0x0
   4bd25:	mov    r8,r12
   4bd28:	mov    rax,QWORD PTR fs:0x28
   4bd31:	mov    QWORD PTR [rsp+0x8],rax
   4bd36:	xor    eax,eax
   4bd38:	call   280a0 <g_str_equal@plt+0x1ade0>
   4bd3d:	mov    rsi,QWORD PTR [rsp]
   4bd41:	test   rsi,rsi
   4bd44:	je     4bd70 <g_str_equal@plt+0x3eab0>
   4bd46:	mov    rdi,r14
   4bd49:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4bd4e:	mov    rax,QWORD PTR [rsp+0x8]
   4bd53:	xor    rax,QWORD PTR fs:0x28
   4bd5c:	jne    4be04 <g_str_equal@plt+0x3eb44>
   4bd62:	add    rsp,0x10
   4bd66:	pop    rbx
   4bd67:	pop    rbp
   4bd68:	pop    r12
   4bd6a:	pop    r13
   4bd6c:	pop    r14
   4bd6e:	ret    
   4bd6f:	nop
   4bd70:	mov    rbx,QWORD PTR [r13+0x0]
   4bd74:	test   rbx,rbx
   4bd77:	jne    4bd98 <g_str_equal@plt+0x3ead8>
   4bd79:	jmp    4bdf7 <g_str_equal@plt+0x3eb37>
   4bd7b:	nop    DWORD PTR [rax+rax*1+0x0]
   4bd80:	mov    rsi,rbx
   4bd83:	mov    edx,0x10
   4bd88:	mov    rdi,rbp
   4bd8b:	call   281f0 <g_str_equal@plt+0x1af30>
   4bd90:	test   rax,rax
   4bd93:	mov    rbx,rax
   4bd96:	je     4bdf0 <g_str_equal@plt+0x3eb30>
   4bd98:	lea    rdx,[rbx+0x8]
   4bd9c:	xor    esi,esi
   4bd9e:	mov    rcx,r12
   4bda1:	mov    rdi,rbp
   4bda4:	call   4bc20 <g_str_equal@plt+0x3e960>
   4bda9:	cmp    QWORD PTR [rsp],0x0
   4bdae:	je     4bd80 <g_str_equal@plt+0x3eac0>
   4bdb0:	mov    rsi,r13
   4bdb3:	mov    rdi,rbp
   4bdb6:	call   28390 <g_str_equal@plt+0x1b0d0>
   4bdbb:	mov    rsi,QWORD PTR [rsp]
   4bdbf:	test   rsi,rsi
   4bdc2:	je     4bd46 <g_str_equal@plt+0x3ea86>
   4bdc4:	mov    rdi,rbp
   4bdc7:	call   28770 <g_str_equal@plt+0x1b4b0>
   4bdcc:	test   al,al
   4bdce:	je     4bde1 <g_str_equal@plt+0x3eb21>
   4bdd0:	mov    rdi,QWORD PTR [r13+0x0]
   4bdd4:	call   45330 <g_str_equal@plt+0x38070>
   4bdd9:	mov    QWORD PTR [r13+0x0],0x0
   4bde1:	mov    rsi,QWORD PTR [rsp]
   4bde5:	jmp    4bd46 <g_str_equal@plt+0x3ea86>
   4bdea:	nop    WORD PTR [rax+rax*1+0x0]
   4bdf0:	cmp    QWORD PTR [rsp],0x0
   4bdf5:	jne    4bdb0 <g_str_equal@plt+0x3eaf0>
   4bdf7:	mov    rsi,r12
   4bdfa:	mov    rdi,rbp
   4bdfd:	call   282e0 <g_str_equal@plt+0x1b020>
   4be02:	jmp    4bdb0 <g_str_equal@plt+0x3eaf0>
   4be04:	call   cd30 <__stack_chk_fail@plt>
   4be09:	nop    DWORD PTR [rax+0x0]
   4be10:	push   r13
   4be12:	push   r12
   4be14:	mov    r13,rdx
   4be17:	push   rbp
   4be18:	push   rbx
   4be19:	mov    rdx,rsi
   4be1c:	mov    rbx,rsi
   4be1f:	lea    rsi,[rip+0x19abf]        # 658e5 <_fini@@Base+0x13191>
   4be26:	mov    rbp,rdi
   4be29:	sub    rsp,0x18
   4be2d:	mov    r12,rsp
   4be30:	mov    QWORD PTR [rsp],0x0
   4be38:	mov    rcx,r12
   4be3b:	mov    rax,QWORD PTR fs:0x28
   4be44:	mov    QWORD PTR [rsp+0x8],rax
   4be49:	xor    eax,eax
   4be4b:	call   28780 <g_str_equal@plt+0x1b4c0>
   4be50:	mov    rsi,QWORD PTR [rsp]
   4be54:	test   rsi,rsi
   4be57:	je     4be80 <g_str_equal@plt+0x3ebc0>
   4be59:	mov    rdi,r13
   4be5c:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4be61:	mov    rax,QWORD PTR [rsp+0x8]
   4be66:	xor    rax,QWORD PTR fs:0x28
   4be6f:	jne    4be9c <g_str_equal@plt+0x3ebdc>
   4be71:	add    rsp,0x18
   4be75:	pop    rbx
   4be76:	pop    rbp
   4be77:	pop    r12
   4be79:	pop    r13
   4be7b:	ret    
   4be7c:	nop    DWORD PTR [rax+0x0]
   4be80:	lea    rsi,[rip+0x19a6e]        # 658f5 <_fini@@Base+0x131a1>
   4be87:	lea    rdx,[rbx+0x8]
   4be8b:	mov    rcx,r12
   4be8e:	mov    rdi,rbp
   4be91:	call   4bd00 <g_str_equal@plt+0x3ea40>
   4be96:	mov    rsi,QWORD PTR [rsp]
   4be9a:	jmp    4be59 <g_str_equal@plt+0x3eb99>
   4be9c:	call   cd30 <__stack_chk_fail@plt>
   4bea1:	nop    DWORD PTR [rax+rax*1+0x0]
   4bea6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4beb0:	push   r13
   4beb2:	push   r12
   4beb4:	mov    r13,rcx
   4beb7:	push   rbp
   4beb8:	push   rbx
   4beb9:	mov    ecx,0x10
   4bebe:	mov    rbp,rdi
   4bec1:	mov    rbx,rdx
   4bec4:	sub    rsp,0x18
   4bec8:	mov    r12,rsp
   4becb:	mov    QWORD PTR [rsp],0x0
   4bed3:	mov    r8,r12
   4bed6:	mov    rax,QWORD PTR fs:0x28
   4bedf:	mov    QWORD PTR [rsp+0x8],rax
   4bee4:	xor    eax,eax
   4bee6:	call   27da0 <g_str_equal@plt+0x1aae0>
   4beeb:	mov    rsi,QWORD PTR [rsp]
   4beef:	test   rsi,rsi
   4bef2:	je     4bf20 <g_str_equal@plt+0x3ec60>
   4bef4:	mov    rdi,r13
   4bef7:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4befc:	mov    rax,QWORD PTR [rsp+0x8]
   4bf01:	xor    rax,QWORD PTR fs:0x28
   4bf0a:	jne    4bf7d <g_str_equal@plt+0x3ecbd>
   4bf0c:	add    rsp,0x18
   4bf10:	pop    rbx
   4bf11:	pop    rbp
   4bf12:	pop    r12
   4bf14:	pop    r13
   4bf16:	ret    
   4bf17:	nop    WORD PTR [rax+rax*1+0x0]
   4bf20:	mov    rsi,QWORD PTR [rbx]
   4bf23:	test   rsi,rsi
   4bf26:	je     4bf3a <g_str_equal@plt+0x3ec7a>
   4bf28:	mov    rdx,r12
   4bf2b:	mov    rdi,rbp
   4bf2e:	call   4be10 <g_str_equal@plt+0x3eb50>
   4bf33:	cmp    QWORD PTR [rsp],0x0
   4bf38:	je     4bf70 <g_str_equal@plt+0x3ecb0>
   4bf3a:	mov    rsi,rbx
   4bf3d:	mov    rdi,rbp
   4bf40:	call   28000 <g_str_equal@plt+0x1ad40>
   4bf45:	mov    rsi,QWORD PTR [rsp]
   4bf49:	test   rsi,rsi
   4bf4c:	je     4bef4 <g_str_equal@plt+0x3ec34>
   4bf4e:	mov    rdi,rbp
   4bf51:	call   28770 <g_str_equal@plt+0x1b4b0>
   4bf56:	test   al,al
   4bf58:	je     4bf69 <g_str_equal@plt+0x3eca9>
   4bf5a:	mov    rdi,QWORD PTR [rbx]
   4bf5d:	call   45370 <g_str_equal@plt+0x380b0>
   4bf62:	mov    QWORD PTR [rbx],0x0
   4bf69:	mov    rsi,QWORD PTR [rsp]
   4bf6d:	jmp    4bef4 <g_str_equal@plt+0x3ec34>
   4bf6f:	nop
   4bf70:	mov    rsi,r12
   4bf73:	mov    rdi,rbp
   4bf76:	call   27f50 <g_str_equal@plt+0x1ac90>
   4bf7b:	jmp    4bf3a <g_str_equal@plt+0x3ec7a>
   4bf7d:	call   cd30 <__stack_chk_fail@plt>
   4bf82:	nop    DWORD PTR [rax+0x0]
   4bf86:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4bf90:	push   r14
   4bf92:	push   r13
   4bf94:	mov    r14,rcx
   4bf97:	push   r12
   4bf99:	push   rbp
   4bf9a:	mov    ecx,0x10
   4bf9f:	push   rbx
   4bfa0:	mov    rbp,rdi
   4bfa3:	mov    r13,rdx
   4bfa6:	sub    rsp,0x10
   4bfaa:	mov    r12,rsp
   4bfad:	mov    QWORD PTR [rsp],0x0
   4bfb5:	mov    r8,r12
   4bfb8:	mov    rax,QWORD PTR fs:0x28
   4bfc1:	mov    QWORD PTR [rsp+0x8],rax
   4bfc6:	xor    eax,eax
   4bfc8:	call   280a0 <g_str_equal@plt+0x1ade0>
   4bfcd:	mov    rsi,QWORD PTR [rsp]
   4bfd1:	test   rsi,rsi
   4bfd4:	je     4c000 <g_str_equal@plt+0x3ed40>
   4bfd6:	mov    rdi,r14
   4bfd9:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4bfde:	mov    rax,QWORD PTR [rsp+0x8]
   4bfe3:	xor    rax,QWORD PTR fs:0x28
   4bfec:	jne    4c094 <g_str_equal@plt+0x3edd4>
   4bff2:	add    rsp,0x10
   4bff6:	pop    rbx
   4bff7:	pop    rbp
   4bff8:	pop    r12
   4bffa:	pop    r13
   4bffc:	pop    r14
   4bffe:	ret    
   4bfff:	nop
   4c000:	mov    rbx,QWORD PTR [r13+0x0]
   4c004:	test   rbx,rbx
   4c007:	jne    4c028 <g_str_equal@plt+0x3ed68>
   4c009:	jmp    4c087 <g_str_equal@plt+0x3edc7>
   4c00b:	nop    DWORD PTR [rax+rax*1+0x0]
   4c010:	mov    rsi,rbx
   4c013:	mov    edx,0x10
   4c018:	mov    rdi,rbp
   4c01b:	call   281f0 <g_str_equal@plt+0x1af30>
   4c020:	test   rax,rax
   4c023:	mov    rbx,rax
   4c026:	je     4c080 <g_str_equal@plt+0x3edc0>
   4c028:	lea    rdx,[rbx+0x8]
   4c02c:	xor    esi,esi
   4c02e:	mov    rcx,r12
   4c031:	mov    rdi,rbp
   4c034:	call   4beb0 <g_str_equal@plt+0x3ebf0>
   4c039:	cmp    QWORD PTR [rsp],0x0
   4c03e:	je     4c010 <g_str_equal@plt+0x3ed50>
   4c040:	mov    rsi,r13
   4c043:	mov    rdi,rbp
   4c046:	call   28390 <g_str_equal@plt+0x1b0d0>
   4c04b:	mov    rsi,QWORD PTR [rsp]
   4c04f:	test   rsi,rsi
   4c052:	je     4bfd6 <g_str_equal@plt+0x3ed16>
   4c054:	mov    rdi,rbp
   4c057:	call   28770 <g_str_equal@plt+0x1b4b0>
   4c05c:	test   al,al
   4c05e:	je     4c071 <g_str_equal@plt+0x3edb1>
   4c060:	mov    rdi,QWORD PTR [r13+0x0]
   4c064:	call   453b0 <g_str_equal@plt+0x380f0>
   4c069:	mov    QWORD PTR [r13+0x0],0x0
   4c071:	mov    rsi,QWORD PTR [rsp]
   4c075:	jmp    4bfd6 <g_str_equal@plt+0x3ed16>
   4c07a:	nop    WORD PTR [rax+rax*1+0x0]
   4c080:	cmp    QWORD PTR [rsp],0x0
   4c085:	jne    4c040 <g_str_equal@plt+0x3ed80>
   4c087:	mov    rsi,r12
   4c08a:	mov    rdi,rbp
   4c08d:	call   282e0 <g_str_equal@plt+0x1b020>
   4c092:	jmp    4c040 <g_str_equal@plt+0x3ed80>
   4c094:	call   cd30 <__stack_chk_fail@plt>
   4c099:	nop    DWORD PTR [rax+0x0]
   4c0a0:	push   rbx
   4c0a1:	mov    rbx,rdx
   4c0a4:	mov    rdx,rsi
   4c0a7:	lea    rsi,[rip+0x1984b]        # 658f9 <_fini@@Base+0x131a5>
   4c0ae:	sub    rsp,0x10
   4c0b2:	mov    rcx,rsp
   4c0b5:	mov    QWORD PTR [rsp],0x0
   4c0bd:	mov    rax,QWORD PTR fs:0x28
   4c0c6:	mov    QWORD PTR [rsp+0x8],rax
   4c0cb:	xor    eax,eax
   4c0cd:	call   45fc0 <g_str_equal@plt+0x38d00>
   4c0d2:	mov    rsi,QWORD PTR [rsp]
   4c0d6:	mov    rdi,rbx
   4c0d9:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4c0de:	mov    rax,QWORD PTR [rsp+0x8]
   4c0e3:	xor    rax,QWORD PTR fs:0x28
   4c0ec:	jne    4c0f4 <g_str_equal@plt+0x3ee34>
   4c0ee:	add    rsp,0x10
   4c0f2:	pop    rbx
   4c0f3:	ret    
   4c0f4:	call   cd30 <__stack_chk_fail@plt>
   4c0f9:	nop    DWORD PTR [rax+0x0]
   4c100:	push   r13
   4c102:	push   r12
   4c104:	mov    r13,rcx
   4c107:	push   rbp
   4c108:	push   rbx
   4c109:	mov    ecx,0x4
   4c10e:	mov    rbp,rdi
   4c111:	mov    rbx,rdx
   4c114:	sub    rsp,0x18
   4c118:	mov    r12,rsp
   4c11b:	mov    QWORD PTR [rsp],0x0
   4c123:	mov    r8,r12
   4c126:	mov    rax,QWORD PTR fs:0x28
   4c12f:	mov    QWORD PTR [rsp+0x8],rax
   4c134:	xor    eax,eax
   4c136:	call   27da0 <g_str_equal@plt+0x1aae0>
   4c13b:	mov    rsi,QWORD PTR [rsp]
   4c13f:	test   rsi,rsi
   4c142:	je     4c170 <g_str_equal@plt+0x3eeb0>
   4c144:	mov    rdi,r13
   4c147:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4c14c:	mov    rax,QWORD PTR [rsp+0x8]
   4c151:	xor    rax,QWORD PTR fs:0x28
   4c15a:	jne    4c1cd <g_str_equal@plt+0x3ef0d>
   4c15c:	add    rsp,0x18
   4c160:	pop    rbx
   4c161:	pop    rbp
   4c162:	pop    r12
   4c164:	pop    r13
   4c166:	ret    
   4c167:	nop    WORD PTR [rax+rax*1+0x0]
   4c170:	mov    rsi,QWORD PTR [rbx]
   4c173:	test   rsi,rsi
   4c176:	je     4c18a <g_str_equal@plt+0x3eeca>
   4c178:	mov    rdx,r12
   4c17b:	mov    rdi,rbp
   4c17e:	call   4c0a0 <g_str_equal@plt+0x3ede0>
   4c183:	cmp    QWORD PTR [rsp],0x0
   4c188:	je     4c1c0 <g_str_equal@plt+0x3ef00>
   4c18a:	mov    rsi,rbx
   4c18d:	mov    rdi,rbp
   4c190:	call   28000 <g_str_equal@plt+0x1ad40>
   4c195:	mov    rsi,QWORD PTR [rsp]
   4c199:	test   rsi,rsi
   4c19c:	je     4c144 <g_str_equal@plt+0x3ee84>
   4c19e:	mov    rdi,rbp
   4c1a1:	call   28770 <g_str_equal@plt+0x1b4b0>
   4c1a6:	test   al,al
   4c1a8:	je     4c1b9 <g_str_equal@plt+0x3eef9>
   4c1aa:	mov    rdi,QWORD PTR [rbx]
   4c1ad:	call   453f0 <g_str_equal@plt+0x38130>
   4c1b2:	mov    QWORD PTR [rbx],0x0
   4c1b9:	mov    rsi,QWORD PTR [rsp]
   4c1bd:	jmp    4c144 <g_str_equal@plt+0x3ee84>
   4c1bf:	nop
   4c1c0:	mov    rsi,r12
   4c1c3:	mov    rdi,rbp
   4c1c6:	call   27f50 <g_str_equal@plt+0x1ac90>
   4c1cb:	jmp    4c18a <g_str_equal@plt+0x3eeca>
   4c1cd:	call   cd30 <__stack_chk_fail@plt>
   4c1d2:	nop    DWORD PTR [rax+0x0]
   4c1d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4c1e0:	push   r12
   4c1e2:	push   rbp
   4c1e3:	mov    r12,rdx
   4c1e6:	push   rbx
   4c1e7:	mov    rdx,rsi
   4c1ea:	mov    rbx,rsi
   4c1ed:	lea    rsi,[rip+0x1970a]        # 658fe <_fini@@Base+0x131aa>
   4c1f4:	mov    rbp,rdi
   4c1f7:	sub    rsp,0x10
   4c1fb:	mov    rax,QWORD PTR fs:0x28
   4c204:	mov    QWORD PTR [rsp+0x8],rax
   4c209:	xor    eax,eax
   4c20b:	mov    QWORD PTR [rsp],0x0
   4c213:	call   286a0 <g_str_equal@plt+0x1b3e0>
   4c218:	test   al,al
   4c21a:	je     4c260 <g_str_equal@plt+0x3efa0>
   4c21c:	lea    rsi,[rip+0x196db]        # 658fe <_fini@@Base+0x131aa>
   4c223:	lea    rdx,[rbx+0x8]
   4c227:	mov    rcx,rsp
   4c22a:	mov    rdi,rbp
   4c22d:	call   29210 <g_str_equal@plt+0x1bf50>
   4c232:	mov    rsi,QWORD PTR [rsp]
   4c236:	test   rsi,rsi
   4c239:	je     4c260 <g_str_equal@plt+0x3efa0>
   4c23b:	mov    rdi,r12
   4c23e:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4c243:	mov    rax,QWORD PTR [rsp+0x8]
   4c248:	xor    rax,QWORD PTR fs:0x28
   4c251:	jne    4c458 <g_str_equal@plt+0x3f198>
   4c257:	add    rsp,0x10
   4c25b:	pop    rbx
   4c25c:	pop    rbp
   4c25d:	pop    r12
   4c25f:	ret    
   4c260:	lea    rdx,[rbx+0x10]
   4c264:	lea    rsi,[rip+0x196af]        # 6591a <_fini@@Base+0x131c6>
   4c26b:	mov    rdi,rbp
   4c26e:	call   286a0 <g_str_equal@plt+0x1b3e0>
   4c273:	test   al,al
   4c275:	jne    4c3d0 <g_str_equal@plt+0x3f110>
   4c27b:	lea    rdx,[rbx+0x12]
   4c27f:	lea    rsi,[rip+0x1967c]        # 65902 <_fini@@Base+0x131ae>
   4c286:	mov    rdi,rbp
   4c289:	call   286a0 <g_str_equal@plt+0x1b3e0>
   4c28e:	test   al,al
   4c290:	je     4c2b1 <g_str_equal@plt+0x3eff1>
   4c292:	lea    rsi,[rip+0x19669]        # 65902 <_fini@@Base+0x131ae>
   4c299:	lea    rdx,[rbx+0x18]
   4c29d:	mov    rcx,rsp
   4c2a0:	mov    rdi,rbp
   4c2a3:	call   29210 <g_str_equal@plt+0x1bf50>
   4c2a8:	mov    rsi,QWORD PTR [rsp]
   4c2ac:	test   rsi,rsi
   4c2af:	jne    4c23b <g_str_equal@plt+0x3ef7b>
   4c2b1:	lea    rdx,[rbx+0x20]
   4c2b5:	lea    rsi,[rip+0x1964d]        # 65909 <_fini@@Base+0x131b5>
   4c2bc:	mov    rdi,rbp
   4c2bf:	call   286a0 <g_str_equal@plt+0x1b3e0>
   4c2c4:	test   al,al
   4c2c6:	jne    4c400 <g_str_equal@plt+0x3f140>
   4c2cc:	lea    rdx,[rbx+0x30]
   4c2d0:	lea    rsi,[rip+0x1963f]        # 65916 <_fini@@Base+0x131c2>
   4c2d7:	mov    rdi,rbp
   4c2da:	call   286a0 <g_str_equal@plt+0x1b3e0>
   4c2df:	test   al,al
   4c2e1:	je     4c306 <g_str_equal@plt+0x3f046>
   4c2e3:	lea    rsi,[rip+0x1962c]        # 65916 <_fini@@Base+0x131c2>
   4c2ea:	lea    rdx,[rbx+0x34]
   4c2ee:	mov    rcx,rsp
   4c2f1:	mov    rdi,rbp
   4c2f4:	call   28a50 <g_str_equal@plt+0x1b790>
   4c2f9:	mov    rsi,QWORD PTR [rsp]
   4c2fd:	test   rsi,rsi
   4c300:	jne    4c23b <g_str_equal@plt+0x3ef7b>
   4c306:	lea    rdx,[rbx+0x38]
   4c30a:	lea    rsi,[rip+0x1960d]        # 6591e <_fini@@Base+0x131ca>
   4c311:	mov    rdi,rbp
   4c314:	call   286a0 <g_str_equal@plt+0x1b3e0>
   4c319:	test   al,al
   4c31b:	je     4c340 <g_str_equal@plt+0x3f080>
   4c31d:	lea    rsi,[rip+0x195fa]        # 6591e <_fini@@Base+0x131ca>
   4c324:	lea    rdx,[rbx+0x40]
   4c328:	mov    rcx,rsp
   4c32b:	mov    rdi,rbp
   4c32e:	call   29210 <g_str_equal@plt+0x1bf50>
   4c333:	mov    rsi,QWORD PTR [rsp]
   4c337:	test   rsi,rsi
   4c33a:	jne    4c23b <g_str_equal@plt+0x3ef7b>
   4c340:	lea    rdx,[rbx+0x48]
   4c344:	lea    rsi,[rip+0x195e3]        # 6592e <_fini@@Base+0x131da>
   4c34b:	mov    rdi,rbp
   4c34e:	call   286a0 <g_str_equal@plt+0x1b3e0>
   4c353:	test   al,al
   4c355:	je     4c37a <g_str_equal@plt+0x3f0ba>
   4c357:	lea    rsi,[rip+0x195d0]        # 6592e <_fini@@Base+0x131da>
   4c35e:	lea    rdx,[rbx+0x4c]
   4c362:	mov    rcx,rsp
   4c365:	mov    rdi,rbp
   4c368:	call   28a50 <g_str_equal@plt+0x1b790>
   4c36d:	mov    rsi,QWORD PTR [rsp]
   4c371:	test   rsi,rsi
   4c374:	jne    4c23b <g_str_equal@plt+0x3ef7b>
   4c37a:	lea    rdx,[rbx+0x50]
   4c37e:	lea    rsi,[rip+0x6a23]        # 52da8 <_fini@@Base+0x654>
   4c385:	mov    rdi,rbp
   4c388:	call   286a0 <g_str_equal@plt+0x1b3e0>
   4c38d:	test   al,al
   4c38f:	jne    4c430 <g_str_equal@plt+0x3f170>
   4c395:	lea    rdx,[rbx+0x60]
   4c399:	lea    rsi,[rip+0xd283]        # 59623 <_fini@@Base+0x6ecf>
   4c3a0:	mov    rdi,rbp
   4c3a3:	call   286a0 <g_str_equal@plt+0x1b3e0>
   4c3a8:	test   al,al
   4c3aa:	je     4c3c2 <g_str_equal@plt+0x3f102>
   4c3ac:	lea    rdx,[rbx+0x68]
   4c3b0:	lea    rsi,[rip+0xd26c]        # 59623 <_fini@@Base+0x6ecf>
   4c3b7:	mov    rcx,rsp
   4c3ba:	mov    rdi,rbp
   4c3bd:	call   29210 <g_str_equal@plt+0x1bf50>
   4c3c2:	mov    rsi,QWORD PTR [rsp]
   4c3c6:	jmp    4c23b <g_str_equal@plt+0x3ef7b>
   4c3cb:	nop    DWORD PTR [rax+rax*1+0x0]
   4c3d0:	lea    rsi,[rip+0x19543]        # 6591a <_fini@@Base+0x131c6>
   4c3d7:	lea    rdx,[rbx+0x11]
   4c3db:	mov    rcx,rsp
   4c3de:	mov    rdi,rbp
   4c3e1:	call   28870 <g_str_equal@plt+0x1b5b0>
   4c3e6:	mov    rsi,QWORD PTR [rsp]
   4c3ea:	test   rsi,rsi
   4c3ed:	jne    4c23b <g_str_equal@plt+0x3ef7b>
   4c3f3:	jmp    4c27b <g_str_equal@plt+0x3efbb>
   4c3f8:	nop    DWORD PTR [rax+rax*1+0x0]
   4c400:	lea    rsi,[rip+0x19502]        # 65909 <_fini@@Base+0x131b5>
   4c407:	lea    rdx,[rbx+0x28]
   4c40b:	mov    rcx,rsp
   4c40e:	mov    rdi,rbp
   4c411:	call   29210 <g_str_equal@plt+0x1bf50>
   4c416:	mov    rsi,QWORD PTR [rsp]
   4c41a:	test   rsi,rsi
   4c41d:	jne    4c23b <g_str_equal@plt+0x3ef7b>
   4c423:	jmp    4c2cc <g_str_equal@plt+0x3f00c>
   4c428:	nop    DWORD PTR [rax+rax*1+0x0]
   4c430:	lea    rsi,[rip+0x6971]        # 52da8 <_fini@@Base+0x654>
   4c437:	lea    rdx,[rbx+0x58]
   4c43b:	mov    rcx,rsp
   4c43e:	mov    rdi,rbp
   4c441:	call   29210 <g_str_equal@plt+0x1bf50>
   4c446:	mov    rsi,QWORD PTR [rsp]
   4c44a:	test   rsi,rsi
   4c44d:	jne    4c23b <g_str_equal@plt+0x3ef7b>
   4c453:	jmp    4c395 <g_str_equal@plt+0x3f0d5>
   4c458:	call   cd30 <__stack_chk_fail@plt>
   4c45d:	nop    DWORD PTR [rax]
   4c460:	push   r13
   4c462:	push   r12
   4c464:	mov    r13,rcx
   4c467:	push   rbp
   4c468:	push   rbx
   4c469:	mov    ecx,0x70
   4c46e:	mov    rbp,rdi
   4c471:	mov    rbx,rdx
   4c474:	sub    rsp,0x18
   4c478:	mov    r12,rsp
   4c47b:	mov    QWORD PTR [rsp],0x0
   4c483:	mov    r8,r12
   4c486:	mov    rax,QWORD PTR fs:0x28
   4c48f:	mov    QWORD PTR [rsp+0x8],rax
   4c494:	xor    eax,eax
   4c496:	call   27da0 <g_str_equal@plt+0x1aae0>
   4c49b:	mov    rsi,QWORD PTR [rsp]
   4c49f:	test   rsi,rsi
   4c4a2:	je     4c4d0 <g_str_equal@plt+0x3f210>
   4c4a4:	mov    rdi,r13
   4c4a7:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4c4ac:	mov    rax,QWORD PTR [rsp+0x8]
   4c4b1:	xor    rax,QWORD PTR fs:0x28
   4c4ba:	jne    4c52d <g_str_equal@plt+0x3f26d>
   4c4bc:	add    rsp,0x18
   4c4c0:	pop    rbx
   4c4c1:	pop    rbp
   4c4c2:	pop    r12
   4c4c4:	pop    r13
   4c4c6:	ret    
   4c4c7:	nop    WORD PTR [rax+rax*1+0x0]
   4c4d0:	mov    rsi,QWORD PTR [rbx]
   4c4d3:	test   rsi,rsi
   4c4d6:	je     4c4ea <g_str_equal@plt+0x3f22a>
   4c4d8:	mov    rdx,r12
   4c4db:	mov    rdi,rbp
   4c4de:	call   4c1e0 <g_str_equal@plt+0x3ef20>
   4c4e3:	cmp    QWORD PTR [rsp],0x0
   4c4e8:	je     4c520 <g_str_equal@plt+0x3f260>
   4c4ea:	mov    rsi,rbx
   4c4ed:	mov    rdi,rbp
   4c4f0:	call   28000 <g_str_equal@plt+0x1ad40>
   4c4f5:	mov    rsi,QWORD PTR [rsp]
   4c4f9:	test   rsi,rsi
   4c4fc:	je     4c4a4 <g_str_equal@plt+0x3f1e4>
   4c4fe:	mov    rdi,rbp
   4c501:	call   28770 <g_str_equal@plt+0x1b4b0>
   4c506:	test   al,al
   4c508:	je     4c519 <g_str_equal@plt+0x3f259>
   4c50a:	mov    rdi,QWORD PTR [rbx]
   4c50d:	call   45430 <g_str_equal@plt+0x38170>
   4c512:	mov    QWORD PTR [rbx],0x0
   4c519:	mov    rsi,QWORD PTR [rsp]
   4c51d:	jmp    4c4a4 <g_str_equal@plt+0x3f1e4>
   4c51f:	nop
   4c520:	mov    rsi,r12
   4c523:	mov    rdi,rbp
   4c526:	call   27f50 <g_str_equal@plt+0x1ac90>
   4c52b:	jmp    4c4ea <g_str_equal@plt+0x3f22a>
   4c52d:	call   cd30 <__stack_chk_fail@plt>
   4c532:	nop    DWORD PTR [rax+0x0]
   4c536:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4c540:	push   rbx
   4c541:	mov    r8,rcx
   4c544:	mov    rbx,rdx
   4c547:	lea    rcx,[rip+0x2349d2]        # 280f20 <_fini@@Base+0x22e7cc>
   4c54e:	sub    rsp,0x10
   4c552:	mov    rax,QWORD PTR fs:0x28
   4c55b:	mov    QWORD PTR [rsp+0x8],rax
   4c560:	xor    eax,eax
   4c562:	mov    eax,DWORD PTR [rdx]
   4c564:	lea    rdx,[rsp+0x4]
   4c569:	mov    DWORD PTR [rsp+0x4],eax
   4c56d:	call   296a0 <g_str_equal@plt+0x1c3e0>
   4c572:	mov    eax,DWORD PTR [rsp+0x4]
   4c576:	mov    DWORD PTR [rbx],eax
   4c578:	mov    rax,QWORD PTR [rsp+0x8]
   4c57d:	xor    rax,QWORD PTR fs:0x28
   4c586:	jne    4c58e <g_str_equal@plt+0x3f2ce>
   4c588:	add    rsp,0x10
   4c58c:	pop    rbx
   4c58d:	ret    
   4c58e:	call   cd30 <__stack_chk_fail@plt>
   4c593:	nop    DWORD PTR [rax]
   4c596:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4c5a0:	push   r13
   4c5a2:	push   r12
   4c5a4:	mov    r13,rdx
   4c5a7:	push   rbp
   4c5a8:	push   rbx
   4c5a9:	mov    rdx,rsi
   4c5ac:	mov    rbx,rsi
   4c5af:	lea    rsi,[rip+0x1266f]        # 5ec25 <_fini@@Base+0xc4d1>
   4c5b6:	mov    rbp,rdi
   4c5b9:	sub    rsp,0x28
   4c5bd:	lea    r12,[rsp+0x10]
   4c5c2:	mov    QWORD PTR [rsp+0x10],0x0
   4c5cb:	mov    rax,QWORD PTR fs:0x28
   4c5d4:	mov    QWORD PTR [rsp+0x18],rax
   4c5d9:	xor    eax,eax
   4c5db:	mov    rcx,r12
   4c5de:	call   29210 <g_str_equal@plt+0x1bf50>
   4c5e3:	mov    rsi,QWORD PTR [rsp+0x10]
   4c5e8:	test   rsi,rsi
   4c5eb:	je     4c618 <g_str_equal@plt+0x3f358>
   4c5ed:	mov    rdi,r13
   4c5f0:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4c5f5:	mov    rax,QWORD PTR [rsp+0x18]
   4c5fa:	xor    rax,QWORD PTR fs:0x28
   4c603:	jne    4c6c0 <g_str_equal@plt+0x3f400>
   4c609:	add    rsp,0x28
   4c60d:	pop    rbx
   4c60e:	pop    rbp
   4c60f:	pop    r12
   4c611:	pop    r13
   4c613:	ret    
   4c614:	nop    DWORD PTR [rax+0x0]
   4c618:	mov    eax,DWORD PTR [rbx+0x8]
   4c61b:	lea    rsi,[rip+0x1179e]        # 5ddc0 <_fini@@Base+0xb66c>
   4c622:	lea    rdx,[rsp+0xc]
   4c627:	lea    rcx,[rip+0x2348f2]        # 280f20 <_fini@@Base+0x22e7cc>
   4c62e:	mov    r8,r12
   4c631:	mov    rdi,rbp
   4c634:	mov    DWORD PTR [rsp+0xc],eax
   4c638:	call   296a0 <g_str_equal@plt+0x1c3e0>
   4c63d:	mov    rsi,QWORD PTR [rsp+0x10]
   4c642:	mov    eax,DWORD PTR [rsp+0xc]
   4c646:	test   rsi,rsi
   4c649:	mov    DWORD PTR [rbx+0x8],eax
   4c64c:	jne    4c5ed <g_str_equal@plt+0x3f32d>
   4c64e:	lea    rdx,[rbx+0xc]
   4c652:	lea    rsi,[rip+0x677c]        # 52dd5 <_fini@@Base+0x681>
   4c659:	mov    rdi,rbp
   4c65c:	call   286a0 <g_str_equal@plt+0x1b3e0>
   4c661:	test   al,al
   4c663:	je     4c689 <g_str_equal@plt+0x3f3c9>
   4c665:	lea    rsi,[rip+0x6769]        # 52dd5 <_fini@@Base+0x681>
   4c66c:	lea    rdx,[rbx+0x10]
   4c670:	mov    rcx,r12
   4c673:	mov    rdi,rbp
   4c676:	call   29210 <g_str_equal@plt+0x1bf50>
   4c67b:	mov    rsi,QWORD PTR [rsp+0x10]
   4c680:	test   rsi,rsi
   4c683:	jne    4c5ed <g_str_equal@plt+0x3f32d>
   4c689:	lea    rdx,[rbx+0x18]
   4c68d:	lea    rsi,[rip+0x191c5]        # 65859 <_fini@@Base+0x13105>
   4c694:	mov    rdi,rbp
   4c697:	call   286a0 <g_str_equal@plt+0x1b3e0>
   4c69c:	test   al,al
   4c69e:	je     4c6b6 <g_str_equal@plt+0x3f3f6>
   4c6a0:	lea    rdx,[rbx+0x20]
   4c6a4:	lea    rsi,[rip+0x191ae]        # 65859 <_fini@@Base+0x13105>
   4c6ab:	mov    rcx,r12
   4c6ae:	mov    rdi,rbp
   4c6b1:	call   29210 <g_str_equal@plt+0x1bf50>
   4c6b6:	mov    rsi,QWORD PTR [rsp+0x10]
   4c6bb:	jmp    4c5ed <g_str_equal@plt+0x3f32d>
   4c6c0:	call   cd30 <__stack_chk_fail@plt>
   4c6c5:	nop
   4c6c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4c6d0:	push   r13
   4c6d2:	push   r12
   4c6d4:	mov    r13,rcx
   4c6d7:	push   rbp
   4c6d8:	push   rbx
   4c6d9:	mov    ecx,0x28
   4c6de:	mov    rbp,rdi
   4c6e1:	mov    rbx,rdx
   4c6e4:	sub    rsp,0x18
   4c6e8:	mov    r12,rsp
   4c6eb:	mov    QWORD PTR [rsp],0x0
   4c6f3:	mov    r8,r12
   4c6f6:	mov    rax,QWORD PTR fs:0x28
   4c6ff:	mov    QWORD PTR [rsp+0x8],rax
   4c704:	xor    eax,eax
   4c706:	call   27da0 <g_str_equal@plt+0x1aae0>
   4c70b:	mov    rsi,QWORD PTR [rsp]
   4c70f:	test   rsi,rsi
   4c712:	je     4c740 <g_str_equal@plt+0x3f480>
   4c714:	mov    rdi,r13
   4c717:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4c71c:	mov    rax,QWORD PTR [rsp+0x8]
   4c721:	xor    rax,QWORD PTR fs:0x28
   4c72a:	jne    4c79d <g_str_equal@plt+0x3f4dd>
   4c72c:	add    rsp,0x18
   4c730:	pop    rbx
   4c731:	pop    rbp
   4c732:	pop    r12
   4c734:	pop    r13
   4c736:	ret    
   4c737:	nop    WORD PTR [rax+rax*1+0x0]
   4c740:	mov    rsi,QWORD PTR [rbx]
   4c743:	test   rsi,rsi
   4c746:	je     4c75a <g_str_equal@plt+0x3f49a>
   4c748:	mov    rdx,r12
   4c74b:	mov    rdi,rbp
   4c74e:	call   4c5a0 <g_str_equal@plt+0x3f2e0>
   4c753:	cmp    QWORD PTR [rsp],0x0
   4c758:	je     4c790 <g_str_equal@plt+0x3f4d0>
   4c75a:	mov    rsi,rbx
   4c75d:	mov    rdi,rbp
   4c760:	call   28000 <g_str_equal@plt+0x1ad40>
   4c765:	mov    rsi,QWORD PTR [rsp]
   4c769:	test   rsi,rsi
   4c76c:	je     4c714 <g_str_equal@plt+0x3f454>
   4c76e:	mov    rdi,rbp
   4c771:	call   28770 <g_str_equal@plt+0x1b4b0>
   4c776:	test   al,al
   4c778:	je     4c789 <g_str_equal@plt+0x3f4c9>
   4c77a:	mov    rdi,QWORD PTR [rbx]
   4c77d:	call   45470 <g_str_equal@plt+0x381b0>
   4c782:	mov    QWORD PTR [rbx],0x0
   4c789:	mov    rsi,QWORD PTR [rsp]
   4c78d:	jmp    4c714 <g_str_equal@plt+0x3f454>
   4c78f:	nop
   4c790:	mov    rsi,r12
   4c793:	mov    rdi,rbp
   4c796:	call   27f50 <g_str_equal@plt+0x1ac90>
   4c79b:	jmp    4c75a <g_str_equal@plt+0x3f49a>
   4c79d:	call   cd30 <__stack_chk_fail@plt>
   4c7a2:	nop    DWORD PTR [rax+0x0]
   4c7a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4c7b0:	push   r14
   4c7b2:	push   r13
   4c7b4:	mov    r14,rcx
   4c7b7:	push   r12
   4c7b9:	push   rbp
   4c7ba:	mov    ecx,0x10
   4c7bf:	push   rbx
   4c7c0:	mov    rbp,rdi
   4c7c3:	mov    r13,rdx
   4c7c6:	sub    rsp,0x10
   4c7ca:	mov    r12,rsp
   4c7cd:	mov    QWORD PTR [rsp],0x0
   4c7d5:	mov    r8,r12
   4c7d8:	mov    rax,QWORD PTR fs:0x28
   4c7e1:	mov    QWORD PTR [rsp+0x8],rax
   4c7e6:	xor    eax,eax
   4c7e8:	call   280a0 <g_str_equal@plt+0x1ade0>
   4c7ed:	mov    rsi,QWORD PTR [rsp]
   4c7f1:	test   rsi,rsi
   4c7f4:	je     4c820 <g_str_equal@plt+0x3f560>
   4c7f6:	mov    rdi,r14
   4c7f9:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4c7fe:	mov    rax,QWORD PTR [rsp+0x8]
   4c803:	xor    rax,QWORD PTR fs:0x28
   4c80c:	jne    4c8b4 <g_str_equal@plt+0x3f5f4>
   4c812:	add    rsp,0x10
   4c816:	pop    rbx
   4c817:	pop    rbp
   4c818:	pop    r12
   4c81a:	pop    r13
   4c81c:	pop    r14
   4c81e:	ret    
   4c81f:	nop
   4c820:	mov    rbx,QWORD PTR [r13+0x0]
   4c824:	test   rbx,rbx
   4c827:	jne    4c848 <g_str_equal@plt+0x3f588>
   4c829:	jmp    4c8a7 <g_str_equal@plt+0x3f5e7>
   4c82b:	nop    DWORD PTR [rax+rax*1+0x0]
   4c830:	mov    rsi,rbx
   4c833:	mov    edx,0x10
   4c838:	mov    rdi,rbp
   4c83b:	call   281f0 <g_str_equal@plt+0x1af30>
   4c840:	test   rax,rax
   4c843:	mov    rbx,rax
   4c846:	je     4c8a0 <g_str_equal@plt+0x3f5e0>
   4c848:	lea    rdx,[rbx+0x8]
   4c84c:	xor    esi,esi
   4c84e:	mov    rcx,r12
   4c851:	mov    rdi,rbp
   4c854:	call   4c6d0 <g_str_equal@plt+0x3f410>
   4c859:	cmp    QWORD PTR [rsp],0x0
   4c85e:	je     4c830 <g_str_equal@plt+0x3f570>
   4c860:	mov    rsi,r13
   4c863:	mov    rdi,rbp
   4c866:	call   28390 <g_str_equal@plt+0x1b0d0>
   4c86b:	mov    rsi,QWORD PTR [rsp]
   4c86f:	test   rsi,rsi
   4c872:	je     4c7f6 <g_str_equal@plt+0x3f536>
   4c874:	mov    rdi,rbp
   4c877:	call   28770 <g_str_equal@plt+0x1b4b0>
   4c87c:	test   al,al
   4c87e:	je     4c891 <g_str_equal@plt+0x3f5d1>
   4c880:	mov    rdi,QWORD PTR [r13+0x0]
   4c884:	call   454b0 <g_str_equal@plt+0x381f0>
   4c889:	mov    QWORD PTR [r13+0x0],0x0
   4c891:	mov    rsi,QWORD PTR [rsp]
   4c895:	jmp    4c7f6 <g_str_equal@plt+0x3f536>
   4c89a:	nop    WORD PTR [rax+rax*1+0x0]
   4c8a0:	cmp    QWORD PTR [rsp],0x0
   4c8a5:	jne    4c860 <g_str_equal@plt+0x3f5a0>
   4c8a7:	mov    rsi,r12
   4c8aa:	mov    rdi,rbp
   4c8ad:	call   282e0 <g_str_equal@plt+0x1b020>
   4c8b2:	jmp    4c860 <g_str_equal@plt+0x3f5a0>
   4c8b4:	call   cd30 <__stack_chk_fail@plt>
   4c8b9:	nop    DWORD PTR [rax+0x0]
   4c8c0:	push   r13
   4c8c2:	push   r12
   4c8c4:	mov    r13,rdx
   4c8c7:	push   rbp
   4c8c8:	push   rbx
   4c8c9:	mov    rdx,rsi
   4c8cc:	mov    rbx,rsi
   4c8cf:	lea    rsi,[rip+0x19069]        # 6593f <_fini@@Base+0x131eb>
   4c8d6:	mov    rbp,rdi
   4c8d9:	sub    rsp,0x18
   4c8dd:	mov    r12,rsp
   4c8e0:	mov    QWORD PTR [rsp],0x0
   4c8e8:	mov    rcx,r12
   4c8eb:	mov    rax,QWORD PTR fs:0x28
   4c8f4:	mov    QWORD PTR [rsp+0x8],rax
   4c8f9:	xor    eax,eax
   4c8fb:	call   29210 <g_str_equal@plt+0x1bf50>
   4c900:	mov    rsi,QWORD PTR [rsp]
   4c904:	test   rsi,rsi
   4c907:	je     4c930 <g_str_equal@plt+0x3f670>
   4c909:	mov    rdi,r13
   4c90c:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4c911:	mov    rax,QWORD PTR [rsp+0x8]
   4c916:	xor    rax,QWORD PTR fs:0x28
   4c91f:	jne    4c94c <g_str_equal@plt+0x3f68c>
   4c921:	add    rsp,0x18
   4c925:	pop    rbx
   4c926:	pop    rbp
   4c927:	pop    r12
   4c929:	pop    r13
   4c92b:	ret    
   4c92c:	nop    DWORD PTR [rax+0x0]
   4c930:	lea    rsi,[rip+0x1900f]        # 65946 <_fini@@Base+0x131f2>
   4c937:	lea    rdx,[rbx+0x8]
   4c93b:	mov    rcx,r12
   4c93e:	mov    rdi,rbp
   4c941:	call   4c7b0 <g_str_equal@plt+0x3f4f0>
   4c946:	mov    rsi,QWORD PTR [rsp]
   4c94a:	jmp    4c909 <g_str_equal@plt+0x3f649>
   4c94c:	call   cd30 <__stack_chk_fail@plt>
   4c951:	nop    DWORD PTR [rax+rax*1+0x0]
   4c956:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4c960:	push   r13
   4c962:	push   r12
   4c964:	mov    r13,rcx
   4c967:	push   rbp
   4c968:	push   rbx
   4c969:	mov    ecx,0x10
   4c96e:	mov    rbp,rdi
   4c971:	mov    rbx,rdx
   4c974:	sub    rsp,0x18
   4c978:	mov    r12,rsp
   4c97b:	mov    QWORD PTR [rsp],0x0
   4c983:	mov    r8,r12
   4c986:	mov    rax,QWORD PTR fs:0x28
   4c98f:	mov    QWORD PTR [rsp+0x8],rax
   4c994:	xor    eax,eax
   4c996:	call   27da0 <g_str_equal@plt+0x1aae0>
   4c99b:	mov    rsi,QWORD PTR [rsp]
   4c99f:	test   rsi,rsi
   4c9a2:	je     4c9d0 <g_str_equal@plt+0x3f710>
   4c9a4:	mov    rdi,r13
   4c9a7:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4c9ac:	mov    rax,QWORD PTR [rsp+0x8]
   4c9b1:	xor    rax,QWORD PTR fs:0x28
   4c9ba:	jne    4ca2d <g_str_equal@plt+0x3f76d>
   4c9bc:	add    rsp,0x18
   4c9c0:	pop    rbx
   4c9c1:	pop    rbp
   4c9c2:	pop    r12
   4c9c4:	pop    r13
   4c9c6:	ret    
   4c9c7:	nop    WORD PTR [rax+rax*1+0x0]
   4c9d0:	mov    rsi,QWORD PTR [rbx]
   4c9d3:	test   rsi,rsi
   4c9d6:	je     4c9ea <g_str_equal@plt+0x3f72a>
   4c9d8:	mov    rdx,r12
   4c9db:	mov    rdi,rbp
   4c9de:	call   4c8c0 <g_str_equal@plt+0x3f600>
   4c9e3:	cmp    QWORD PTR [rsp],0x0
   4c9e8:	je     4ca20 <g_str_equal@plt+0x3f760>
   4c9ea:	mov    rsi,rbx
   4c9ed:	mov    rdi,rbp
   4c9f0:	call   28000 <g_str_equal@plt+0x1ad40>
   4c9f5:	mov    rsi,QWORD PTR [rsp]
   4c9f9:	test   rsi,rsi
   4c9fc:	je     4c9a4 <g_str_equal@plt+0x3f6e4>
   4c9fe:	mov    rdi,rbp
   4ca01:	call   28770 <g_str_equal@plt+0x1b4b0>
   4ca06:	test   al,al
   4ca08:	je     4ca19 <g_str_equal@plt+0x3f759>
   4ca0a:	mov    rdi,QWORD PTR [rbx]
   4ca0d:	call   454f0 <g_str_equal@plt+0x38230>
   4ca12:	mov    QWORD PTR [rbx],0x0
   4ca19:	mov    rsi,QWORD PTR [rsp]
   4ca1d:	jmp    4c9a4 <g_str_equal@plt+0x3f6e4>
   4ca1f:	nop
   4ca20:	mov    rsi,r12
   4ca23:	mov    rdi,rbp
   4ca26:	call   27f50 <g_str_equal@plt+0x1ac90>
   4ca2b:	jmp    4c9ea <g_str_equal@plt+0x3f72a>
   4ca2d:	call   cd30 <__stack_chk_fail@plt>
   4ca32:	nop    DWORD PTR [rax+0x0]
   4ca36:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4ca40:	push   r12
   4ca42:	push   rbp
   4ca43:	mov    r12,rdx
   4ca46:	push   rbx
   4ca47:	mov    rdx,rsi
   4ca4a:	mov    rbx,rsi
   4ca4d:	lea    rsi,[rip+0x18eeb]        # 6593f <_fini@@Base+0x131eb>
   4ca54:	mov    rbp,rdi
   4ca57:	sub    rsp,0x10
   4ca5b:	mov    rax,QWORD PTR fs:0x28
   4ca64:	mov    QWORD PTR [rsp+0x8],rax
   4ca69:	xor    eax,eax
   4ca6b:	mov    QWORD PTR [rsp],0x0
   4ca73:	call   286a0 <g_str_equal@plt+0x1b3e0>
   4ca78:	test   al,al
   4ca7a:	je     4ca92 <g_str_equal@plt+0x3f7d2>
   4ca7c:	lea    rdx,[rbx+0x8]
   4ca80:	lea    rsi,[rip+0x18eb8]        # 6593f <_fini@@Base+0x131eb>
   4ca87:	mov    rcx,rsp
   4ca8a:	mov    rdi,rbp
   4ca8d:	call   29210 <g_str_equal@plt+0x1bf50>
   4ca92:	mov    rsi,QWORD PTR [rsp]
   4ca96:	mov    rdi,r12
   4ca99:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4ca9e:	mov    rax,QWORD PTR [rsp+0x8]
   4caa3:	xor    rax,QWORD PTR fs:0x28
   4caac:	jne    4cab7 <g_str_equal@plt+0x3f7f7>
   4caae:	add    rsp,0x10
   4cab2:	pop    rbx
   4cab3:	pop    rbp
   4cab4:	pop    r12
   4cab6:	ret    
   4cab7:	call   cd30 <__stack_chk_fail@plt>
   4cabc:	nop    DWORD PTR [rax+0x0]
   4cac0:	push   r14
   4cac2:	push   r13
   4cac4:	mov    r14,rcx
   4cac7:	push   r12
   4cac9:	push   rbp
   4caca:	mov    ecx,0x10
   4cacf:	push   rbx
   4cad0:	mov    rbp,rdi
   4cad3:	mov    r13,rdx
   4cad6:	sub    rsp,0x10
   4cada:	mov    r12,rsp
   4cadd:	mov    QWORD PTR [rsp],0x0
   4cae5:	mov    r8,r12
   4cae8:	mov    rax,QWORD PTR fs:0x28
   4caf1:	mov    QWORD PTR [rsp+0x8],rax
   4caf6:	xor    eax,eax
   4caf8:	call   280a0 <g_str_equal@plt+0x1ade0>
   4cafd:	mov    rsi,QWORD PTR [rsp]
   4cb01:	test   rsi,rsi
   4cb04:	je     4cb30 <g_str_equal@plt+0x3f870>
   4cb06:	mov    rdi,r14
   4cb09:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4cb0e:	mov    rax,QWORD PTR [rsp+0x8]
   4cb13:	xor    rax,QWORD PTR fs:0x28
   4cb1c:	jne    4cbc4 <g_str_equal@plt+0x3f904>
   4cb22:	add    rsp,0x10
   4cb26:	pop    rbx
   4cb27:	pop    rbp
   4cb28:	pop    r12
   4cb2a:	pop    r13
   4cb2c:	pop    r14
   4cb2e:	ret    
   4cb2f:	nop
   4cb30:	mov    rbx,QWORD PTR [r13+0x0]
   4cb34:	test   rbx,rbx
   4cb37:	jne    4cb58 <g_str_equal@plt+0x3f898>
   4cb39:	jmp    4cbb7 <g_str_equal@plt+0x3f8f7>
   4cb3b:	nop    DWORD PTR [rax+rax*1+0x0]
   4cb40:	mov    rsi,rbx
   4cb43:	mov    edx,0x10
   4cb48:	mov    rdi,rbp
   4cb4b:	call   281f0 <g_str_equal@plt+0x1af30>
   4cb50:	test   rax,rax
   4cb53:	mov    rbx,rax
   4cb56:	je     4cbb0 <g_str_equal@plt+0x3f8f0>
   4cb58:	lea    rdx,[rbx+0x8]
   4cb5c:	xor    esi,esi
   4cb5e:	mov    rcx,r12
   4cb61:	mov    rdi,rbp
   4cb64:	call   4c960 <g_str_equal@plt+0x3f6a0>
   4cb69:	cmp    QWORD PTR [rsp],0x0
   4cb6e:	je     4cb40 <g_str_equal@plt+0x3f880>
   4cb70:	mov    rsi,r13
   4cb73:	mov    rdi,rbp
   4cb76:	call   28390 <g_str_equal@plt+0x1b0d0>
   4cb7b:	mov    rsi,QWORD PTR [rsp]
   4cb7f:	test   rsi,rsi
   4cb82:	je     4cb06 <g_str_equal@plt+0x3f846>
   4cb84:	mov    rdi,rbp
   4cb87:	call   28770 <g_str_equal@plt+0x1b4b0>
   4cb8c:	test   al,al
   4cb8e:	je     4cba1 <g_str_equal@plt+0x3f8e1>
   4cb90:	mov    rdi,QWORD PTR [r13+0x0]
   4cb94:	call   45530 <g_str_equal@plt+0x38270>
   4cb99:	mov    QWORD PTR [r13+0x0],0x0
   4cba1:	mov    rsi,QWORD PTR [rsp]
   4cba5:	jmp    4cb06 <g_str_equal@plt+0x3f846>
   4cbaa:	nop    WORD PTR [rax+rax*1+0x0]
   4cbb0:	cmp    QWORD PTR [rsp],0x0
   4cbb5:	jne    4cb70 <g_str_equal@plt+0x3f8b0>
   4cbb7:	mov    rsi,r12
   4cbba:	mov    rdi,rbp
   4cbbd:	call   282e0 <g_str_equal@plt+0x1b020>
   4cbc2:	jmp    4cb70 <g_str_equal@plt+0x3f8b0>
   4cbc4:	call   cd30 <__stack_chk_fail@plt>
   4cbc9:	nop    DWORD PTR [rax+0x0]
   4cbd0:	push   rbx
   4cbd1:	mov    r8,rcx
   4cbd4:	mov    rbx,rdx
   4cbd7:	lea    rcx,[rip+0x2342f2]        # 280ed0 <_fini@@Base+0x22e77c>
   4cbde:	sub    rsp,0x10
   4cbe2:	mov    rax,QWORD PTR fs:0x28
   4cbeb:	mov    QWORD PTR [rsp+0x8],rax
   4cbf0:	xor    eax,eax
   4cbf2:	mov    eax,DWORD PTR [rdx]
   4cbf4:	lea    rdx,[rsp+0x4]
   4cbf9:	mov    DWORD PTR [rsp+0x4],eax
   4cbfd:	call   296a0 <g_str_equal@plt+0x1c3e0>
   4cc02:	mov    eax,DWORD PTR [rsp+0x4]
   4cc06:	mov    DWORD PTR [rbx],eax
   4cc08:	mov    rax,QWORD PTR [rsp+0x8]
   4cc0d:	xor    rax,QWORD PTR fs:0x28
   4cc16:	jne    4cc1e <g_str_equal@plt+0x3f95e>
   4cc18:	add    rsp,0x10
   4cc1c:	pop    rbx
   4cc1d:	ret    
   4cc1e:	call   cd30 <__stack_chk_fail@plt>
   4cc23:	nop    DWORD PTR [rax]
   4cc26:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4cc30:	push   r13
   4cc32:	push   r12
   4cc34:	mov    r13,rdx
   4cc37:	push   rbp
   4cc38:	push   rbx
   4cc39:	mov    rdx,rsi
   4cc3c:	mov    rbx,rsi
   4cc3f:	lea    rsi,[rip+0x18d0b]        # 65951 <_fini@@Base+0x131fd>
   4cc46:	mov    rbp,rdi
   4cc49:	sub    rsp,0x28
   4cc4d:	lea    r12,[rsp+0x10]
   4cc52:	mov    QWORD PTR [rsp+0x10],0x0
   4cc5b:	mov    rax,QWORD PTR fs:0x28
   4cc64:	mov    QWORD PTR [rsp+0x18],rax
   4cc69:	xor    eax,eax
   4cc6b:	mov    rcx,r12
   4cc6e:	call   28780 <g_str_equal@plt+0x1b4c0>
   4cc73:	mov    rsi,QWORD PTR [rsp+0x10]
   4cc78:	test   rsi,rsi
   4cc7b:	je     4cca8 <g_str_equal@plt+0x3f9e8>
   4cc7d:	mov    rdi,r13
   4cc80:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4cc85:	mov    rax,QWORD PTR [rsp+0x18]
   4cc8a:	xor    rax,QWORD PTR fs:0x28
   4cc93:	jne    4cd39 <g_str_equal@plt+0x3fa79>
   4cc99:	add    rsp,0x28
   4cc9d:	pop    rbx
   4cc9e:	pop    rbp
   4cc9f:	pop    r12
   4cca1:	pop    r13
   4cca3:	ret    
   4cca4:	nop    DWORD PTR [rax+0x0]
   4cca8:	lea    rdx,[rbx+0x8]
   4ccac:	lea    rsi,[rip+0x18cae]        # 65961 <_fini@@Base+0x1320d>
   4ccb3:	mov    rdi,rbp
   4ccb6:	call   286a0 <g_str_equal@plt+0x1b3e0>
   4ccbb:	test   al,al
   4ccbd:	je     4ccdf <g_str_equal@plt+0x3fa1f>
   4ccbf:	lea    rsi,[rip+0x18c9b]        # 65961 <_fini@@Base+0x1320d>
   4ccc6:	lea    rdx,[rbx+0x10]
   4ccca:	mov    rcx,r12
   4cccd:	mov    rdi,rbp
   4ccd0:	call   28780 <g_str_equal@plt+0x1b4c0>
   4ccd5:	mov    rsi,QWORD PTR [rsp+0x10]
   4ccda:	test   rsi,rsi
   4ccdd:	jne    4cc7d <g_str_equal@plt+0x3f9bd>
   4ccdf:	mov    eax,DWORD PTR [rbx+0x18]
   4cce2:	lea    rsi,[rip+0x18c88]        # 65971 <_fini@@Base+0x1321d>
   4cce9:	lea    rdx,[rsp+0xc]
   4ccee:	lea    rcx,[rip+0x2341db]        # 280ed0 <_fini@@Base+0x22e77c>
   4ccf5:	mov    r8,r12
   4ccf8:	mov    rdi,rbp
   4ccfb:	mov    DWORD PTR [rsp+0xc],eax
   4ccff:	call   296a0 <g_str_equal@plt+0x1c3e0>
   4cd04:	mov    rsi,QWORD PTR [rsp+0x10]
   4cd09:	mov    eax,DWORD PTR [rsp+0xc]
   4cd0d:	test   rsi,rsi
   4cd10:	mov    DWORD PTR [rbx+0x18],eax
   4cd13:	jne    4cc7d <g_str_equal@plt+0x3f9bd>
   4cd19:	lea    rsi,[rip+0x18b76]        # 65896 <_fini@@Base+0x13142>
   4cd20:	lea    rdx,[rbx+0x20]
   4cd24:	mov    rcx,r12
   4cd27:	mov    rdi,rbp
   4cd2a:	call   28780 <g_str_equal@plt+0x1b4c0>
   4cd2f:	mov    rsi,QWORD PTR [rsp+0x10]
   4cd34:	jmp    4cc7d <g_str_equal@plt+0x3f9bd>
   4cd39:	call   cd30 <__stack_chk_fail@plt>
   4cd3e:	xchg   ax,ax
   4cd40:	push   r13
   4cd42:	push   r12
   4cd44:	mov    r13,rcx
   4cd47:	push   rbp
   4cd48:	push   rbx
   4cd49:	mov    ecx,0x28
   4cd4e:	mov    rbp,rdi
   4cd51:	mov    rbx,rdx
   4cd54:	sub    rsp,0x18
   4cd58:	mov    r12,rsp
   4cd5b:	mov    QWORD PTR [rsp],0x0
   4cd63:	mov    r8,r12
   4cd66:	mov    rax,QWORD PTR fs:0x28
   4cd6f:	mov    QWORD PTR [rsp+0x8],rax
   4cd74:	xor    eax,eax
   4cd76:	call   27da0 <g_str_equal@plt+0x1aae0>
   4cd7b:	mov    rsi,QWORD PTR [rsp]
   4cd7f:	test   rsi,rsi
   4cd82:	je     4cdb0 <g_str_equal@plt+0x3faf0>
   4cd84:	mov    rdi,r13
   4cd87:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4cd8c:	mov    rax,QWORD PTR [rsp+0x8]
   4cd91:	xor    rax,QWORD PTR fs:0x28
   4cd9a:	jne    4ce0d <g_str_equal@plt+0x3fb4d>
   4cd9c:	add    rsp,0x18
   4cda0:	pop    rbx
   4cda1:	pop    rbp
   4cda2:	pop    r12
   4cda4:	pop    r13
   4cda6:	ret    
   4cda7:	nop    WORD PTR [rax+rax*1+0x0]
   4cdb0:	mov    rsi,QWORD PTR [rbx]
   4cdb3:	test   rsi,rsi
   4cdb6:	je     4cdca <g_str_equal@plt+0x3fb0a>
   4cdb8:	mov    rdx,r12
   4cdbb:	mov    rdi,rbp
   4cdbe:	call   4cc30 <g_str_equal@plt+0x3f970>
   4cdc3:	cmp    QWORD PTR [rsp],0x0
   4cdc8:	je     4ce00 <g_str_equal@plt+0x3fb40>
   4cdca:	mov    rsi,rbx
   4cdcd:	mov    rdi,rbp
   4cdd0:	call   28000 <g_str_equal@plt+0x1ad40>
   4cdd5:	mov    rsi,QWORD PTR [rsp]
   4cdd9:	test   rsi,rsi
   4cddc:	je     4cd84 <g_str_equal@plt+0x3fac4>
   4cdde:	mov    rdi,rbp
   4cde1:	call   28770 <g_str_equal@plt+0x1b4b0>
   4cde6:	test   al,al
   4cde8:	je     4cdf9 <g_str_equal@plt+0x3fb39>
   4cdea:	mov    rdi,QWORD PTR [rbx]
   4cded:	call   45570 <g_str_equal@plt+0x382b0>
   4cdf2:	mov    QWORD PTR [rbx],0x0
   4cdf9:	mov    rsi,QWORD PTR [rsp]
   4cdfd:	jmp    4cd84 <g_str_equal@plt+0x3fac4>
   4cdff:	nop
   4ce00:	mov    rsi,r12
   4ce03:	mov    rdi,rbp
   4ce06:	call   27f50 <g_str_equal@plt+0x1ac90>
   4ce0b:	jmp    4cdca <g_str_equal@plt+0x3fb0a>
   4ce0d:	call   cd30 <__stack_chk_fail@plt>
   4ce12:	nop    DWORD PTR [rax+0x0]
   4ce16:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4ce20:	push   r14
   4ce22:	push   r13
   4ce24:	mov    r14,rcx
   4ce27:	push   r12
   4ce29:	push   rbp
   4ce2a:	mov    ecx,0x10
   4ce2f:	push   rbx
   4ce30:	mov    rbp,rdi
   4ce33:	mov    r13,rdx
   4ce36:	sub    rsp,0x10
   4ce3a:	mov    r12,rsp
   4ce3d:	mov    QWORD PTR [rsp],0x0
   4ce45:	mov    r8,r12
   4ce48:	mov    rax,QWORD PTR fs:0x28
   4ce51:	mov    QWORD PTR [rsp+0x8],rax
   4ce56:	xor    eax,eax
   4ce58:	call   280a0 <g_str_equal@plt+0x1ade0>
   4ce5d:	mov    rsi,QWORD PTR [rsp]
   4ce61:	test   rsi,rsi
   4ce64:	je     4ce90 <g_str_equal@plt+0x3fbd0>
   4ce66:	mov    rdi,r14
   4ce69:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4ce6e:	mov    rax,QWORD PTR [rsp+0x8]
   4ce73:	xor    rax,QWORD PTR fs:0x28
   4ce7c:	jne    4cf24 <g_str_equal@plt+0x3fc64>
   4ce82:	add    rsp,0x10
   4ce86:	pop    rbx
   4ce87:	pop    rbp
   4ce88:	pop    r12
   4ce8a:	pop    r13
   4ce8c:	pop    r14
   4ce8e:	ret    
   4ce8f:	nop
   4ce90:	mov    rbx,QWORD PTR [r13+0x0]
   4ce94:	test   rbx,rbx
   4ce97:	jne    4ceb8 <g_str_equal@plt+0x3fbf8>
   4ce99:	jmp    4cf17 <g_str_equal@plt+0x3fc57>
   4ce9b:	nop    DWORD PTR [rax+rax*1+0x0]
   4cea0:	mov    rsi,rbx
   4cea3:	mov    edx,0x10
   4cea8:	mov    rdi,rbp
   4ceab:	call   281f0 <g_str_equal@plt+0x1af30>
   4ceb0:	test   rax,rax
   4ceb3:	mov    rbx,rax
   4ceb6:	je     4cf10 <g_str_equal@plt+0x3fc50>
   4ceb8:	lea    rdx,[rbx+0x8]
   4cebc:	xor    esi,esi
   4cebe:	mov    rcx,r12
   4cec1:	mov    rdi,rbp
   4cec4:	call   4cd40 <g_str_equal@plt+0x3fa80>
   4cec9:	cmp    QWORD PTR [rsp],0x0
   4cece:	je     4cea0 <g_str_equal@plt+0x3fbe0>
   4ced0:	mov    rsi,r13
   4ced3:	mov    rdi,rbp
   4ced6:	call   28390 <g_str_equal@plt+0x1b0d0>
   4cedb:	mov    rsi,QWORD PTR [rsp]
   4cedf:	test   rsi,rsi
   4cee2:	je     4ce66 <g_str_equal@plt+0x3fba6>
   4cee4:	mov    rdi,rbp
   4cee7:	call   28770 <g_str_equal@plt+0x1b4b0>
   4ceec:	test   al,al
   4ceee:	je     4cf01 <g_str_equal@plt+0x3fc41>
   4cef0:	mov    rdi,QWORD PTR [r13+0x0]
   4cef4:	call   455b0 <g_str_equal@plt+0x382f0>
   4cef9:	mov    QWORD PTR [r13+0x0],0x0
   4cf01:	mov    rsi,QWORD PTR [rsp]
   4cf05:	jmp    4ce66 <g_str_equal@plt+0x3fba6>
   4cf0a:	nop    WORD PTR [rax+rax*1+0x0]
   4cf10:	cmp    QWORD PTR [rsp],0x0
   4cf15:	jne    4ced0 <g_str_equal@plt+0x3fc10>
   4cf17:	mov    rsi,r12
   4cf1a:	mov    rdi,rbp
   4cf1d:	call   282e0 <g_str_equal@plt+0x1b020>
   4cf22:	jmp    4ced0 <g_str_equal@plt+0x3fc10>
   4cf24:	call   cd30 <__stack_chk_fail@plt>
   4cf29:	nop    DWORD PTR [rax+0x0]
   4cf30:	push   rbx
   4cf31:	mov    rbx,rdx
   4cf34:	mov    rdx,rsi
   4cf37:	lea    rsi,[rip+0x18a42]        # 65980 <_fini@@Base+0x1322c>
   4cf3e:	sub    rsp,0x10
   4cf42:	mov    rcx,rsp
   4cf45:	mov    QWORD PTR [rsp],0x0
   4cf4d:	mov    rax,QWORD PTR fs:0x28
   4cf56:	mov    QWORD PTR [rsp+0x8],rax
   4cf5b:	xor    eax,eax
   4cf5d:	call   4ce20 <g_str_equal@plt+0x3fb60>
   4cf62:	mov    rsi,QWORD PTR [rsp]
   4cf66:	mov    rdi,rbx
   4cf69:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4cf6e:	mov    rax,QWORD PTR [rsp+0x8]
   4cf73:	xor    rax,QWORD PTR fs:0x28
   4cf7c:	jne    4cf84 <g_str_equal@plt+0x3fcc4>
   4cf7e:	add    rsp,0x10
   4cf82:	pop    rbx
   4cf83:	ret    
   4cf84:	call   cd30 <__stack_chk_fail@plt>
   4cf89:	nop    DWORD PTR [rax+0x0]
   4cf90:	push   r13
   4cf92:	push   r12
   4cf94:	mov    r13,rcx
   4cf97:	push   rbp
   4cf98:	push   rbx
   4cf99:	mov    ecx,0x8
   4cf9e:	mov    rbp,rdi
   4cfa1:	mov    rbx,rdx
   4cfa4:	sub    rsp,0x18
   4cfa8:	mov    r12,rsp
   4cfab:	mov    QWORD PTR [rsp],0x0
   4cfb3:	mov    r8,r12
   4cfb6:	mov    rax,QWORD PTR fs:0x28
   4cfbf:	mov    QWORD PTR [rsp+0x8],rax
   4cfc4:	xor    eax,eax
   4cfc6:	call   27da0 <g_str_equal@plt+0x1aae0>
   4cfcb:	mov    rsi,QWORD PTR [rsp]
   4cfcf:	test   rsi,rsi
   4cfd2:	je     4d000 <g_str_equal@plt+0x3fd40>
   4cfd4:	mov    rdi,r13
   4cfd7:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4cfdc:	mov    rax,QWORD PTR [rsp+0x8]
   4cfe1:	xor    rax,QWORD PTR fs:0x28
   4cfea:	jne    4d05d <g_str_equal@plt+0x3fd9d>
   4cfec:	add    rsp,0x18
   4cff0:	pop    rbx
   4cff1:	pop    rbp
   4cff2:	pop    r12
   4cff4:	pop    r13
   4cff6:	ret    
   4cff7:	nop    WORD PTR [rax+rax*1+0x0]
   4d000:	mov    rsi,QWORD PTR [rbx]
   4d003:	test   rsi,rsi
   4d006:	je     4d01a <g_str_equal@plt+0x3fd5a>
   4d008:	mov    rdx,r12
   4d00b:	mov    rdi,rbp
   4d00e:	call   4cf30 <g_str_equal@plt+0x3fc70>
   4d013:	cmp    QWORD PTR [rsp],0x0
   4d018:	je     4d050 <g_str_equal@plt+0x3fd90>
   4d01a:	mov    rsi,rbx
   4d01d:	mov    rdi,rbp
   4d020:	call   28000 <g_str_equal@plt+0x1ad40>
   4d025:	mov    rsi,QWORD PTR [rsp]
   4d029:	test   rsi,rsi
   4d02c:	je     4cfd4 <g_str_equal@plt+0x3fd14>
   4d02e:	mov    rdi,rbp
   4d031:	call   28770 <g_str_equal@plt+0x1b4b0>
   4d036:	test   al,al
   4d038:	je     4d049 <g_str_equal@plt+0x3fd89>
   4d03a:	mov    rdi,QWORD PTR [rbx]
   4d03d:	call   455f0 <g_str_equal@plt+0x38330>
   4d042:	mov    QWORD PTR [rbx],0x0
   4d049:	mov    rsi,QWORD PTR [rsp]
   4d04d:	jmp    4cfd4 <g_str_equal@plt+0x3fd14>
   4d04f:	nop
   4d050:	mov    rsi,r12
   4d053:	mov    rdi,rbp
   4d056:	call   27f50 <g_str_equal@plt+0x1ac90>
   4d05b:	jmp    4d01a <g_str_equal@plt+0x3fd5a>
   4d05d:	call   cd30 <__stack_chk_fail@plt>
   4d062:	nop    DWORD PTR [rax+0x0]
   4d066:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4d070:	push   rbx
   4d071:	mov    r8,rcx
   4d074:	mov    rbx,rdx
   4d077:	lea    rcx,[rip+0x233e22]        # 280ea0 <_fini@@Base+0x22e74c>
   4d07e:	sub    rsp,0x10
   4d082:	mov    rax,QWORD PTR fs:0x28
   4d08b:	mov    QWORD PTR [rsp+0x8],rax
   4d090:	xor    eax,eax
   4d092:	mov    eax,DWORD PTR [rdx]
   4d094:	lea    rdx,[rsp+0x4]
   4d099:	mov    DWORD PTR [rsp+0x4],eax
   4d09d:	call   296a0 <g_str_equal@plt+0x1c3e0>
   4d0a2:	mov    eax,DWORD PTR [rsp+0x4]
   4d0a6:	mov    DWORD PTR [rbx],eax
   4d0a8:	mov    rax,QWORD PTR [rsp+0x8]
   4d0ad:	xor    rax,QWORD PTR fs:0x28
   4d0b6:	jne    4d0be <g_str_equal@plt+0x3fdfe>
   4d0b8:	add    rsp,0x10
   4d0bc:	pop    rbx
   4d0bd:	ret    
   4d0be:	call   cd30 <__stack_chk_fail@plt>
   4d0c3:	nop    DWORD PTR [rax]
   4d0c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4d0d0:	push   rbp
   4d0d1:	push   rbx
   4d0d2:	mov    rbp,rdx
   4d0d5:	mov    rbx,rsi
   4d0d8:	lea    rcx,[rip+0x233dc1]        # 280ea0 <_fini@@Base+0x22e74c>
   4d0df:	sub    rsp,0x28
   4d0e3:	mov    rax,QWORD PTR fs:0x28
   4d0ec:	mov    QWORD PTR [rsp+0x18],rax
   4d0f1:	xor    eax,eax
   4d0f3:	mov    eax,DWORD PTR [rsi]
   4d0f5:	lea    rdx,[rsp+0xc]
   4d0fa:	lea    r8,[rsp+0x10]
   4d0ff:	lea    rsi,[rip+0x10cba]        # 5ddc0 <_fini@@Base+0xb66c>
   4d106:	mov    QWORD PTR [rsp+0x10],0x0
   4d10f:	mov    DWORD PTR [rsp+0xc],eax
   4d113:	call   296a0 <g_str_equal@plt+0x1c3e0>
   4d118:	mov    eax,DWORD PTR [rsp+0xc]
   4d11c:	mov    rsi,QWORD PTR [rsp+0x10]
   4d121:	mov    rdi,rbp
   4d124:	mov    DWORD PTR [rbx],eax
   4d126:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4d12b:	mov    rax,QWORD PTR [rsp+0x18]
   4d130:	xor    rax,QWORD PTR fs:0x28
   4d139:	jne    4d142 <g_str_equal@plt+0x3fe82>
   4d13b:	add    rsp,0x28
   4d13f:	pop    rbx
   4d140:	pop    rbp
   4d141:	ret    
   4d142:	call   cd30 <__stack_chk_fail@plt>
   4d147:	nop    WORD PTR [rax+rax*1+0x0]
   4d150:	push   r12
   4d152:	push   rbp
   4d153:	mov    r12,rdx
   4d156:	push   rbx
   4d157:	mov    rdx,rsi
   4d15a:	mov    rbx,rsi
   4d15d:	lea    rsi,[rip+0x18823]        # 65987 <_fini@@Base+0x13233>
   4d164:	mov    rbp,rdi
   4d167:	sub    rsp,0x10
   4d16b:	mov    rax,QWORD PTR fs:0x28
   4d174:	mov    QWORD PTR [rsp+0x8],rax
   4d179:	xor    eax,eax
   4d17b:	mov    QWORD PTR [rsp],0x0
   4d183:	call   286a0 <g_str_equal@plt+0x1b3e0>
   4d188:	test   al,al
   4d18a:	je     4d1d0 <g_str_equal@plt+0x3ff10>
   4d18c:	lea    rsi,[rip+0x187f4]        # 65987 <_fini@@Base+0x13233>
   4d193:	lea    rdx,[rbx+0x2]
   4d197:	mov    rcx,rsp
   4d19a:	mov    rdi,rbp
   4d19d:	call   28960 <g_str_equal@plt+0x1b6a0>
   4d1a2:	mov    rsi,QWORD PTR [rsp]
   4d1a6:	test   rsi,rsi
   4d1a9:	je     4d1d0 <g_str_equal@plt+0x3ff10>
   4d1ab:	mov    rdi,r12
   4d1ae:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4d1b3:	mov    rax,QWORD PTR [rsp+0x8]
   4d1b8:	xor    rax,QWORD PTR fs:0x28
   4d1c1:	jne    4d287 <g_str_equal@plt+0x3ffc7>
   4d1c7:	add    rsp,0x10
   4d1cb:	pop    rbx
   4d1cc:	pop    rbp
   4d1cd:	pop    r12
   4d1cf:	ret    
   4d1d0:	lea    rdx,[rbx+0x4]
   4d1d4:	lea    rsi,[rip+0x1869b]        # 65876 <_fini@@Base+0x13122>
   4d1db:	mov    rdi,rbp
   4d1de:	call   286a0 <g_str_equal@plt+0x1b3e0>
   4d1e3:	test   al,al
   4d1e5:	jne    4d240 <g_str_equal@plt+0x3ff80>
   4d1e7:	lea    rdx,[rbx+0x10]
   4d1eb:	lea    rsi,[rip+0x14ee4]        # 620d6 <_fini@@Base+0xf982>
   4d1f2:	mov    rdi,rbp
   4d1f5:	call   286a0 <g_str_equal@plt+0x1b3e0>
   4d1fa:	test   al,al
   4d1fc:	je     4d21d <g_str_equal@plt+0x3ff5d>
   4d1fe:	lea    rsi,[rip+0x14ed1]        # 620d6 <_fini@@Base+0xf982>
   4d205:	lea    rdx,[rbx+0x18]
   4d209:	mov    rcx,rsp
   4d20c:	mov    rdi,rbp
   4d20f:	call   29020 <g_str_equal@plt+0x1bd60>
   4d214:	mov    rsi,QWORD PTR [rsp]
   4d218:	test   rsi,rsi
   4d21b:	jne    4d1ab <g_str_equal@plt+0x3feeb>
   4d21d:	lea    rdx,[rbx+0x20]
   4d221:	lea    rsi,[rip+0x18766]        # 6598e <_fini@@Base+0x1323a>
   4d228:	mov    rdi,rbp
   4d22b:	call   286a0 <g_str_equal@plt+0x1b3e0>
   4d230:	test   al,al
   4d232:	jne    4d268 <g_str_equal@plt+0x3ffa8>
   4d234:	mov    rsi,QWORD PTR [rsp]
   4d238:	jmp    4d1ab <g_str_equal@plt+0x3feeb>
   4d23d:	nop    DWORD PTR [rax]
   4d240:	lea    rsi,[rip+0x1862f]        # 65876 <_fini@@Base+0x13122>
   4d247:	lea    rdx,[rbx+0x8]
   4d24b:	mov    rcx,rsp
   4d24e:	mov    rdi,rbp
   4d251:	call   24f20 <g_str_equal@plt+0x17c60>
   4d256:	mov    rsi,QWORD PTR [rsp]
   4d25a:	test   rsi,rsi
   4d25d:	jne    4d1ab <g_str_equal@plt+0x3feeb>
   4d263:	jmp    4d1e7 <g_str_equal@plt+0x3ff27>
   4d265:	nop    DWORD PTR [rax]
   4d268:	lea    rsi,[rip+0x1871f]        # 6598e <_fini@@Base+0x1323a>
   4d26f:	lea    rdx,[rbx+0x28]
   4d273:	mov    rcx,rsp
   4d276:	mov    rdi,rbp
   4d279:	call   29210 <g_str_equal@plt+0x1bf50>
   4d27e:	mov    rsi,QWORD PTR [rsp]
   4d282:	jmp    4d1ab <g_str_equal@plt+0x3feeb>
   4d287:	call   cd30 <__stack_chk_fail@plt>
   4d28c:	nop    DWORD PTR [rax+0x0]
   4d290:	push   r13
   4d292:	push   r12
   4d294:	mov    r13,rcx
   4d297:	push   rbp
   4d298:	push   rbx
   4d299:	mov    ecx,0x30
   4d29e:	mov    rbp,rdi
   4d2a1:	mov    rbx,rdx
   4d2a4:	sub    rsp,0x18
   4d2a8:	mov    r12,rsp
   4d2ab:	mov    QWORD PTR [rsp],0x0
   4d2b3:	mov    r8,r12
   4d2b6:	mov    rax,QWORD PTR fs:0x28
   4d2bf:	mov    QWORD PTR [rsp+0x8],rax
   4d2c4:	xor    eax,eax
   4d2c6:	call   27da0 <g_str_equal@plt+0x1aae0>
   4d2cb:	mov    rsi,QWORD PTR [rsp]
   4d2cf:	test   rsi,rsi
   4d2d2:	je     4d300 <g_str_equal@plt+0x40040>
   4d2d4:	mov    rdi,r13
   4d2d7:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4d2dc:	mov    rax,QWORD PTR [rsp+0x8]
   4d2e1:	xor    rax,QWORD PTR fs:0x28
   4d2ea:	jne    4d35d <g_str_equal@plt+0x4009d>
   4d2ec:	add    rsp,0x18
   4d2f0:	pop    rbx
   4d2f1:	pop    rbp
   4d2f2:	pop    r12
   4d2f4:	pop    r13
   4d2f6:	ret    
   4d2f7:	nop    WORD PTR [rax+rax*1+0x0]
   4d300:	mov    rsi,QWORD PTR [rbx]
   4d303:	test   rsi,rsi
   4d306:	je     4d31a <g_str_equal@plt+0x4005a>
   4d308:	mov    rdx,r12
   4d30b:	mov    rdi,rbp
   4d30e:	call   4d150 <g_str_equal@plt+0x3fe90>
   4d313:	cmp    QWORD PTR [rsp],0x0
   4d318:	je     4d350 <g_str_equal@plt+0x40090>
   4d31a:	mov    rsi,rbx
   4d31d:	mov    rdi,rbp
   4d320:	call   28000 <g_str_equal@plt+0x1ad40>
   4d325:	mov    rsi,QWORD PTR [rsp]
   4d329:	test   rsi,rsi
   4d32c:	je     4d2d4 <g_str_equal@plt+0x40014>
   4d32e:	mov    rdi,rbp
   4d331:	call   28770 <g_str_equal@plt+0x1b4b0>
   4d336:	test   al,al
   4d338:	je     4d349 <g_str_equal@plt+0x40089>
   4d33a:	mov    rdi,QWORD PTR [rbx]
   4d33d:	call   45670 <g_str_equal@plt+0x383b0>
   4d342:	mov    QWORD PTR [rbx],0x0
   4d349:	mov    rsi,QWORD PTR [rsp]
   4d34d:	jmp    4d2d4 <g_str_equal@plt+0x40014>
   4d34f:	nop
   4d350:	mov    rsi,r12
   4d353:	mov    rdi,rbp
   4d356:	call   27f50 <g_str_equal@plt+0x1ac90>
   4d35b:	jmp    4d31a <g_str_equal@plt+0x4005a>
   4d35d:	call   cd30 <__stack_chk_fail@plt>
   4d362:	nop    DWORD PTR [rax+0x0]
   4d366:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4d370:	push   r13
   4d372:	push   r12
   4d374:	mov    r13,rdx
   4d377:	push   rbp
   4d378:	push   rbx
   4d379:	mov    rdx,rsi
   4d37c:	mov    rbx,rsi
   4d37f:	lea    rsi,[rip+0x1860f]        # 65995 <_fini@@Base+0x13241>
   4d386:	mov    rbp,rdi
   4d389:	sub    rsp,0x18
   4d38d:	mov    r12,rsp
   4d390:	mov    QWORD PTR [rsp],0x0
   4d398:	mov    rcx,r12
   4d39b:	mov    rax,QWORD PTR fs:0x28
   4d3a4:	mov    QWORD PTR [rsp+0x8],rax
   4d3a9:	xor    eax,eax
   4d3ab:	call   28960 <g_str_equal@plt+0x1b6a0>
   4d3b0:	mov    rsi,QWORD PTR [rsp]
   4d3b4:	test   rsi,rsi
   4d3b7:	je     4d3e0 <g_str_equal@plt+0x40120>
   4d3b9:	mov    rdi,r13
   4d3bc:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4d3c1:	mov    rax,QWORD PTR [rsp+0x8]
   4d3c6:	xor    rax,QWORD PTR fs:0x28
   4d3cf:	jne    4d41b <g_str_equal@plt+0x4015b>
   4d3d1:	add    rsp,0x18
   4d3d5:	pop    rbx
   4d3d6:	pop    rbp
   4d3d7:	pop    r12
   4d3d9:	pop    r13
   4d3db:	ret    
   4d3dc:	nop    DWORD PTR [rax+0x0]
   4d3e0:	lea    rsi,[rip+0x185b2]        # 65999 <_fini@@Base+0x13245>
   4d3e7:	lea    rdx,[rbx+0x2]
   4d3eb:	mov    rcx,r12
   4d3ee:	mov    rdi,rbp
   4d3f1:	call   28960 <g_str_equal@plt+0x1b6a0>
   4d3f6:	mov    rsi,QWORD PTR [rsp]
   4d3fa:	test   rsi,rsi
   4d3fd:	jne    4d3b9 <g_str_equal@plt+0x400f9>
   4d3ff:	lea    rsi,[rip+0x183c2]        # 657c8 <_fini@@Base+0x13074>
   4d406:	lea    rdx,[rbx+0x4]
   4d40a:	mov    rcx,r12
   4d40d:	mov    rdi,rbp
   4d410:	call   28870 <g_str_equal@plt+0x1b5b0>
   4d415:	mov    rsi,QWORD PTR [rsp]
   4d419:	jmp    4d3b9 <g_str_equal@plt+0x400f9>
   4d41b:	call   cd30 <__stack_chk_fail@plt>
   4d420:	push   r13
   4d422:	push   r12
   4d424:	mov    r13,rcx
   4d427:	push   rbp
   4d428:	push   rbx
   4d429:	mov    ecx,0x6
   4d42e:	mov    rbp,rdi
   4d431:	mov    rbx,rdx
   4d434:	sub    rsp,0x18
   4d438:	mov    r12,rsp
   4d43b:	mov    QWORD PTR [rsp],0x0
   4d443:	mov    r8,r12
   4d446:	mov    rax,QWORD PTR fs:0x28
   4d44f:	mov    QWORD PTR [rsp+0x8],rax
   4d454:	xor    eax,eax
   4d456:	call   27da0 <g_str_equal@plt+0x1aae0>
   4d45b:	mov    rsi,QWORD PTR [rsp]
   4d45f:	test   rsi,rsi
   4d462:	je     4d490 <g_str_equal@plt+0x401d0>
   4d464:	mov    rdi,r13
   4d467:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4d46c:	mov    rax,QWORD PTR [rsp+0x8]
   4d471:	xor    rax,QWORD PTR fs:0x28
   4d47a:	jne    4d4ed <g_str_equal@plt+0x4022d>
   4d47c:	add    rsp,0x18
   4d480:	pop    rbx
   4d481:	pop    rbp
   4d482:	pop    r12
   4d484:	pop    r13
   4d486:	ret    
   4d487:	nop    WORD PTR [rax+rax*1+0x0]
   4d490:	mov    rsi,QWORD PTR [rbx]
   4d493:	test   rsi,rsi
   4d496:	je     4d4aa <g_str_equal@plt+0x401ea>
   4d498:	mov    rdx,r12
   4d49b:	mov    rdi,rbp
   4d49e:	call   4d370 <g_str_equal@plt+0x400b0>
   4d4a3:	cmp    QWORD PTR [rsp],0x0
   4d4a8:	je     4d4e0 <g_str_equal@plt+0x40220>
   4d4aa:	mov    rsi,rbx
   4d4ad:	mov    rdi,rbp
   4d4b0:	call   28000 <g_str_equal@plt+0x1ad40>
   4d4b5:	mov    rsi,QWORD PTR [rsp]
   4d4b9:	test   rsi,rsi
   4d4bc:	je     4d464 <g_str_equal@plt+0x401a4>
   4d4be:	mov    rdi,rbp
   4d4c1:	call   28770 <g_str_equal@plt+0x1b4b0>
   4d4c6:	test   al,al
   4d4c8:	je     4d4d9 <g_str_equal@plt+0x40219>
   4d4ca:	mov    rdi,QWORD PTR [rbx]
   4d4cd:	call   456b0 <g_str_equal@plt+0x383f0>
   4d4d2:	mov    QWORD PTR [rbx],0x0
   4d4d9:	mov    rsi,QWORD PTR [rsp]
   4d4dd:	jmp    4d464 <g_str_equal@plt+0x401a4>
   4d4df:	nop
   4d4e0:	mov    rsi,r12
   4d4e3:	mov    rdi,rbp
   4d4e6:	call   27f50 <g_str_equal@plt+0x1ac90>
   4d4eb:	jmp    4d4aa <g_str_equal@plt+0x401ea>
   4d4ed:	call   cd30 <__stack_chk_fail@plt>
   4d4f2:	nop    DWORD PTR [rax+0x0]
   4d4f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4d500:	push   rbx
   4d501:	mov    r8,rcx
   4d504:	mov    rbx,rdx
   4d507:	lea    rcx,[rip+0x233952]        # 280e60 <_fini@@Base+0x22e70c>
   4d50e:	sub    rsp,0x10
   4d512:	mov    rax,QWORD PTR fs:0x28
   4d51b:	mov    QWORD PTR [rsp+0x8],rax
   4d520:	xor    eax,eax
   4d522:	mov    eax,DWORD PTR [rdx]
   4d524:	lea    rdx,[rsp+0x4]
   4d529:	mov    DWORD PTR [rsp+0x4],eax
   4d52d:	call   296a0 <g_str_equal@plt+0x1c3e0>
   4d532:	mov    eax,DWORD PTR [rsp+0x4]
   4d536:	mov    DWORD PTR [rbx],eax
   4d538:	mov    rax,QWORD PTR [rsp+0x8]
   4d53d:	xor    rax,QWORD PTR fs:0x28
   4d546:	jne    4d54e <g_str_equal@plt+0x4028e>
   4d548:	add    rsp,0x10
   4d54c:	pop    rbx
   4d54d:	ret    
   4d54e:	call   cd30 <__stack_chk_fail@plt>
   4d553:	nop    DWORD PTR [rax]
   4d556:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4d560:	push   r13
   4d562:	push   r12
   4d564:	mov    r13,rdx
   4d567:	push   rbp
   4d568:	push   rbx
   4d569:	mov    rdx,rsi
   4d56c:	mov    rbx,rsi
   4d56f:	lea    rsi,[rip+0x1816b]        # 656e1 <_fini@@Base+0x12f8d>
   4d576:	mov    rbp,rdi
   4d579:	sub    rsp,0x28
   4d57d:	mov    rax,QWORD PTR fs:0x28
   4d586:	mov    QWORD PTR [rsp+0x18],rax
   4d58b:	xor    eax,eax
   4d58d:	mov    QWORD PTR [rsp+0x10],0x0
   4d596:	lea    r12,[rsp+0x10]
   4d59b:	call   286a0 <g_str_equal@plt+0x1b3e0>
   4d5a0:	test   al,al
   4d5a2:	je     4d5f0 <g_str_equal@plt+0x40330>
   4d5a4:	lea    rsi,[rip+0x18136]        # 656e1 <_fini@@Base+0x12f8d>
   4d5ab:	lea    rdx,[rbx+0x8]
   4d5af:	mov    rcx,r12
   4d5b2:	mov    rdi,rbp
   4d5b5:	call   29210 <g_str_equal@plt+0x1bf50>
   4d5ba:	mov    rsi,QWORD PTR [rsp+0x10]
   4d5bf:	test   rsi,rsi
   4d5c2:	je     4d5f0 <g_str_equal@plt+0x40330>
   4d5c4:	mov    rdi,r13
   4d5c7:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4d5cc:	mov    rax,QWORD PTR [rsp+0x18]
   4d5d1:	xor    rax,QWORD PTR fs:0x28
   4d5da:	jne    4d6d2 <g_str_equal@plt+0x40412>
   4d5e0:	add    rsp,0x28
   4d5e4:	pop    rbx
   4d5e5:	pop    rbp
   4d5e6:	pop    r12
   4d5e8:	pop    r13
   4d5ea:	ret    
   4d5eb:	nop    DWORD PTR [rax+rax*1+0x0]
   4d5f0:	lea    rsi,[rip+0x14af2]        # 620e9 <_fini@@Base+0xf995>
   4d5f7:	lea    rdx,[rbx+0x10]
   4d5fb:	mov    rcx,r12
   4d5fe:	mov    rdi,rbp
   4d601:	call   29020 <g_str_equal@plt+0x1bd60>
   4d606:	mov    rsi,QWORD PTR [rsp+0x10]
   4d60b:	test   rsi,rsi
   4d60e:	jne    4d5c4 <g_str_equal@plt+0x40304>
   4d610:	lea    rsi,[rip+0x14b8f]        # 621a6 <_fini@@Base+0xfa52>
   4d617:	lea    rdx,[rbx+0x18]
   4d61b:	mov    rcx,r12
   4d61e:	mov    rdi,rbp
   4d621:	call   29120 <g_str_equal@plt+0x1be60>
   4d626:	mov    rsi,QWORD PTR [rsp+0x10]
   4d62b:	test   rsi,rsi
   4d62e:	jne    4d5c4 <g_str_equal@plt+0x40304>
   4d630:	lea    rsi,[rip+0x18366]        # 6599d <_fini@@Base+0x13249>
   4d637:	lea    rdx,[rbx+0x19]
   4d63b:	mov    rcx,r12
   4d63e:	mov    rdi,rbp
   4d641:	call   29120 <g_str_equal@plt+0x1be60>
   4d646:	mov    rsi,QWORD PTR [rsp+0x10]
   4d64b:	test   rsi,rsi
   4d64e:	jne    4d5c4 <g_str_equal@plt+0x40304>
   4d654:	lea    rsi,[rip+0x18347]        # 659a2 <_fini@@Base+0x1324e>
   4d65b:	lea    rdx,[rbx+0x1a]
   4d65f:	mov    rcx,r12
   4d662:	mov    rdi,rbp
   4d665:	call   29120 <g_str_equal@plt+0x1be60>
   4d66a:	mov    rsi,QWORD PTR [rsp+0x10]
   4d66f:	test   rsi,rsi
   4d672:	jne    4d5c4 <g_str_equal@plt+0x40304>
   4d678:	lea    rsi,[rip+0x1832c]        # 659ab <_fini@@Base+0x13257>
   4d67f:	lea    rdx,[rbx+0x20]
   4d683:	mov    rcx,r12
   4d686:	mov    rdi,rbp
   4d689:	call   24f20 <g_str_equal@plt+0x17c60>
   4d68e:	mov    rsi,QWORD PTR [rsp+0x10]
   4d693:	test   rsi,rsi
   4d696:	jne    4d5c4 <g_str_equal@plt+0x40304>
   4d69c:	mov    eax,DWORD PTR [rbx+0x28]
   4d69f:	lea    rsi,[rip+0x18310]        # 659b6 <_fini@@Base+0x13262>
   4d6a6:	lea    rdx,[rsp+0xc]
   4d6ab:	lea    rcx,[rip+0x2337ae]        # 280e60 <_fini@@Base+0x22e70c>
   4d6b2:	mov    r8,r12
   4d6b5:	mov    rdi,rbp
   4d6b8:	mov    DWORD PTR [rsp+0xc],eax
   4d6bc:	call   296a0 <g_str_equal@plt+0x1c3e0>
   4d6c1:	mov    eax,DWORD PTR [rsp+0xc]
   4d6c5:	mov    rsi,QWORD PTR [rsp+0x10]
   4d6ca:	mov    DWORD PTR [rbx+0x28],eax
   4d6cd:	jmp    4d5c4 <g_str_equal@plt+0x40304>
   4d6d2:	call   cd30 <__stack_chk_fail@plt>
   4d6d7:	nop    WORD PTR [rax+rax*1+0x0]
   4d6e0:	push   r13
   4d6e2:	push   r12
   4d6e4:	mov    r13,rcx
   4d6e7:	push   rbp
   4d6e8:	push   rbx
   4d6e9:	mov    ecx,0x30
   4d6ee:	mov    rbp,rdi
   4d6f1:	mov    rbx,rdx
   4d6f4:	sub    rsp,0x18
   4d6f8:	mov    r12,rsp
   4d6fb:	mov    QWORD PTR [rsp],0x0
   4d703:	mov    r8,r12
   4d706:	mov    rax,QWORD PTR fs:0x28
   4d70f:	mov    QWORD PTR [rsp+0x8],rax
   4d714:	xor    eax,eax
   4d716:	call   27da0 <g_str_equal@plt+0x1aae0>
   4d71b:	mov    rsi,QWORD PTR [rsp]
   4d71f:	test   rsi,rsi
   4d722:	je     4d750 <g_str_equal@plt+0x40490>
   4d724:	mov    rdi,r13
   4d727:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4d72c:	mov    rax,QWORD PTR [rsp+0x8]
   4d731:	xor    rax,QWORD PTR fs:0x28
   4d73a:	jne    4d7ad <g_str_equal@plt+0x404ed>
   4d73c:	add    rsp,0x18
   4d740:	pop    rbx
   4d741:	pop    rbp
   4d742:	pop    r12
   4d744:	pop    r13
   4d746:	ret    
   4d747:	nop    WORD PTR [rax+rax*1+0x0]
   4d750:	mov    rsi,QWORD PTR [rbx]
   4d753:	test   rsi,rsi
   4d756:	je     4d76a <g_str_equal@plt+0x404aa>
   4d758:	mov    rdx,r12
   4d75b:	mov    rdi,rbp
   4d75e:	call   4d560 <g_str_equal@plt+0x402a0>
   4d763:	cmp    QWORD PTR [rsp],0x0
   4d768:	je     4d7a0 <g_str_equal@plt+0x404e0>
   4d76a:	mov    rsi,rbx
   4d76d:	mov    rdi,rbp
   4d770:	call   28000 <g_str_equal@plt+0x1ad40>
   4d775:	mov    rsi,QWORD PTR [rsp]
   4d779:	test   rsi,rsi
   4d77c:	je     4d724 <g_str_equal@plt+0x40464>
   4d77e:	mov    rdi,rbp
   4d781:	call   28770 <g_str_equal@plt+0x1b4b0>
   4d786:	test   al,al
   4d788:	je     4d799 <g_str_equal@plt+0x404d9>
   4d78a:	mov    rdi,QWORD PTR [rbx]
   4d78d:	call   45730 <g_str_equal@plt+0x38470>
   4d792:	mov    QWORD PTR [rbx],0x0
   4d799:	mov    rsi,QWORD PTR [rsp]
   4d79d:	jmp    4d724 <g_str_equal@plt+0x40464>
   4d79f:	nop
   4d7a0:	mov    rsi,r12
   4d7a3:	mov    rdi,rbp
   4d7a6:	call   27f50 <g_str_equal@plt+0x1ac90>
   4d7ab:	jmp    4d76a <g_str_equal@plt+0x404aa>
   4d7ad:	call   cd30 <__stack_chk_fail@plt>
   4d7b2:	nop    DWORD PTR [rax+0x0]
   4d7b6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4d7c0:	push   r14
   4d7c2:	push   r13
   4d7c4:	mov    r14,rcx
   4d7c7:	push   r12
   4d7c9:	push   rbp
   4d7ca:	mov    ecx,0x10
   4d7cf:	push   rbx
   4d7d0:	mov    rbp,rdi
   4d7d3:	mov    r13,rdx
   4d7d6:	sub    rsp,0x10
   4d7da:	mov    r12,rsp
   4d7dd:	mov    QWORD PTR [rsp],0x0
   4d7e5:	mov    r8,r12
   4d7e8:	mov    rax,QWORD PTR fs:0x28
   4d7f1:	mov    QWORD PTR [rsp+0x8],rax
   4d7f6:	xor    eax,eax
   4d7f8:	call   280a0 <g_str_equal@plt+0x1ade0>
   4d7fd:	mov    rsi,QWORD PTR [rsp]
   4d801:	test   rsi,rsi
   4d804:	je     4d830 <g_str_equal@plt+0x40570>
   4d806:	mov    rdi,r14
   4d809:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4d80e:	mov    rax,QWORD PTR [rsp+0x8]
   4d813:	xor    rax,QWORD PTR fs:0x28
   4d81c:	jne    4d8c4 <g_str_equal@plt+0x40604>
   4d822:	add    rsp,0x10
   4d826:	pop    rbx
   4d827:	pop    rbp
   4d828:	pop    r12
   4d82a:	pop    r13
   4d82c:	pop    r14
   4d82e:	ret    
   4d82f:	nop
   4d830:	mov    rbx,QWORD PTR [r13+0x0]
   4d834:	test   rbx,rbx
   4d837:	jne    4d858 <g_str_equal@plt+0x40598>
   4d839:	jmp    4d8b7 <g_str_equal@plt+0x405f7>
   4d83b:	nop    DWORD PTR [rax+rax*1+0x0]
   4d840:	mov    rsi,rbx
   4d843:	mov    edx,0x10
   4d848:	mov    rdi,rbp
   4d84b:	call   281f0 <g_str_equal@plt+0x1af30>
   4d850:	test   rax,rax
   4d853:	mov    rbx,rax
   4d856:	je     4d8b0 <g_str_equal@plt+0x405f0>
   4d858:	lea    rdx,[rbx+0x8]
   4d85c:	xor    esi,esi
   4d85e:	mov    rcx,r12
   4d861:	mov    rdi,rbp
   4d864:	call   4d6e0 <g_str_equal@plt+0x40420>
   4d869:	cmp    QWORD PTR [rsp],0x0
   4d86e:	je     4d840 <g_str_equal@plt+0x40580>
   4d870:	mov    rsi,r13
   4d873:	mov    rdi,rbp
   4d876:	call   28390 <g_str_equal@plt+0x1b0d0>
   4d87b:	mov    rsi,QWORD PTR [rsp]
   4d87f:	test   rsi,rsi
   4d882:	je     4d806 <g_str_equal@plt+0x40546>
   4d884:	mov    rdi,rbp
   4d887:	call   28770 <g_str_equal@plt+0x1b4b0>
   4d88c:	test   al,al
   4d88e:	je     4d8a1 <g_str_equal@plt+0x405e1>
   4d890:	mov    rdi,QWORD PTR [r13+0x0]
   4d894:	call   45770 <g_str_equal@plt+0x384b0>
   4d899:	mov    QWORD PTR [r13+0x0],0x0
   4d8a1:	mov    rsi,QWORD PTR [rsp]
   4d8a5:	jmp    4d806 <g_str_equal@plt+0x40546>
   4d8aa:	nop    WORD PTR [rax+rax*1+0x0]
   4d8b0:	cmp    QWORD PTR [rsp],0x0
   4d8b5:	jne    4d870 <g_str_equal@plt+0x405b0>
   4d8b7:	mov    rsi,r12
   4d8ba:	mov    rdi,rbp
   4d8bd:	call   282e0 <g_str_equal@plt+0x1b020>
   4d8c2:	jmp    4d870 <g_str_equal@plt+0x405b0>
   4d8c4:	call   cd30 <__stack_chk_fail@plt>
   4d8c9:	nop    DWORD PTR [rax+0x0]
   4d8d0:	push   r13
   4d8d2:	push   r12
   4d8d4:	mov    r13,rdx
   4d8d7:	push   rbp
   4d8d8:	push   rbx
   4d8d9:	mov    rdx,rsi
   4d8dc:	mov    rbx,rsi
   4d8df:	lea    rsi,[rip+0x17dfb]        # 656e1 <_fini@@Base+0x12f8d>
   4d8e6:	mov    rbp,rdi
   4d8e9:	sub    rsp,0x18
   4d8ed:	mov    rax,QWORD PTR fs:0x28
   4d8f6:	mov    QWORD PTR [rsp+0x8],rax
   4d8fb:	xor    eax,eax
   4d8fd:	mov    QWORD PTR [rsp],0x0
   4d905:	mov    r12,rsp
   4d908:	call   286a0 <g_str_equal@plt+0x1b3e0>
   4d90d:	test   al,al
   4d90f:	je     4d960 <g_str_equal@plt+0x406a0>
   4d911:	lea    rsi,[rip+0x17dc9]        # 656e1 <_fini@@Base+0x12f8d>
   4d918:	lea    rdx,[rbx+0x8]
   4d91c:	mov    rcx,r12
   4d91f:	mov    rdi,rbp
   4d922:	call   29210 <g_str_equal@plt+0x1bf50>
   4d927:	mov    rsi,QWORD PTR [rsp]
   4d92b:	test   rsi,rsi
   4d92e:	je     4d960 <g_str_equal@plt+0x406a0>
   4d930:	mov    rdi,r13
   4d933:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4d938:	mov    rax,QWORD PTR [rsp+0x8]
   4d93d:	xor    rax,QWORD PTR fs:0x28
   4d946:	jne    4da49 <g_str_equal@plt+0x40789>
   4d94c:	add    rsp,0x18
   4d950:	pop    rbx
   4d951:	pop    rbp
   4d952:	pop    r12
   4d954:	pop    r13
   4d956:	ret    
   4d957:	nop    WORD PTR [rax+rax*1+0x0]
   4d960:	lea    rsi,[rip+0x18056]        # 659bd <_fini@@Base+0x13269>
   4d967:	lea    rdx,[rbx+0x10]
   4d96b:	mov    rcx,r12
   4d96e:	mov    rdi,rbp
   4d971:	call   28780 <g_str_equal@plt+0x1b4c0>
   4d976:	mov    rsi,QWORD PTR [rsp]
   4d97a:	test   rsi,rsi
   4d97d:	jne    4d930 <g_str_equal@plt+0x40670>
   4d97f:	lea    rsi,[rip+0x14763]        # 620e9 <_fini@@Base+0xf995>
   4d986:	lea    rdx,[rbx+0x18]
   4d98a:	mov    rcx,r12
   4d98d:	mov    rdi,rbp
   4d990:	call   28780 <g_str_equal@plt+0x1b4c0>
   4d995:	mov    rsi,QWORD PTR [rsp]
   4d999:	test   rsi,rsi
   4d99c:	jne    4d930 <g_str_equal@plt+0x40670>
   4d99e:	lea    rsi,[rip+0x17deb]        # 65790 <_fini@@Base+0x1303c>
   4d9a5:	lea    rdx,[rbx+0x20]
   4d9a9:	mov    rcx,r12
   4d9ac:	mov    rdi,rbp
   4d9af:	call   28780 <g_str_equal@plt+0x1b4c0>
   4d9b4:	mov    rsi,QWORD PTR [rsp]
   4d9b8:	test   rsi,rsi
   4d9bb:	jne    4d930 <g_str_equal@plt+0x40670>
   4d9c1:	lea    rsi,[rip+0x17b91]        # 65559 <_fini@@Base+0x12e05>
   4d9c8:	lea    rdx,[rbx+0x28]
   4d9cc:	mov    rcx,r12
   4d9cf:	mov    rdi,rbp
   4d9d2:	call   28780 <g_str_equal@plt+0x1b4c0>
   4d9d7:	mov    rsi,QWORD PTR [rsp]
   4d9db:	test   rsi,rsi
   4d9de:	jne    4d930 <g_str_equal@plt+0x40670>
   4d9e4:	lea    rsi,[rip+0x17fa3]        # 6598e <_fini@@Base+0x1323a>
   4d9eb:	lea    rdx,[rbx+0x30]
   4d9ef:	mov    rcx,r12
   4d9f2:	mov    rdi,rbp
   4d9f5:	call   29210 <g_str_equal@plt+0x1bf50>
   4d9fa:	mov    rsi,QWORD PTR [rsp]
   4d9fe:	test   rsi,rsi
   4da01:	jne    4d930 <g_str_equal@plt+0x40670>
   4da07:	lea    rsi,[rip+0x17fb4]        # 659c2 <_fini@@Base+0x1326e>
   4da0e:	lea    rdx,[rbx+0x38]
   4da12:	mov    rcx,r12
   4da15:	mov    rdi,rbp
   4da18:	call   29120 <g_str_equal@plt+0x1be60>
   4da1d:	mov    rsi,QWORD PTR [rsp]
   4da21:	test   rsi,rsi
   4da24:	jne    4d930 <g_str_equal@plt+0x40670>
   4da2a:	lea    rsi,[rip+0x17f9c]        # 659cd <_fini@@Base+0x13279>
   4da31:	lea    rdx,[rbx+0x39]
   4da35:	mov    rcx,r12
   4da38:	mov    rdi,rbp
   4da3b:	call   29120 <g_str_equal@plt+0x1be60>
   4da40:	mov    rsi,QWORD PTR [rsp]
   4da44:	jmp    4d930 <g_str_equal@plt+0x40670>
   4da49:	call   cd30 <__stack_chk_fail@plt>
   4da4e:	xchg   ax,ax
   4da50:	push   r13
   4da52:	push   r12
   4da54:	mov    r13,rcx
   4da57:	push   rbp
   4da58:	push   rbx
   4da59:	mov    ecx,0x40
   4da5e:	mov    rbp,rdi
   4da61:	mov    rbx,rdx
   4da64:	sub    rsp,0x18
   4da68:	mov    r12,rsp
   4da6b:	mov    QWORD PTR [rsp],0x0
   4da73:	mov    r8,r12
   4da76:	mov    rax,QWORD PTR fs:0x28
   4da7f:	mov    QWORD PTR [rsp+0x8],rax
   4da84:	xor    eax,eax
   4da86:	call   27da0 <g_str_equal@plt+0x1aae0>
   4da8b:	mov    rsi,QWORD PTR [rsp]
   4da8f:	test   rsi,rsi
   4da92:	je     4dac0 <g_str_equal@plt+0x40800>
   4da94:	mov    rdi,r13
   4da97:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4da9c:	mov    rax,QWORD PTR [rsp+0x8]
   4daa1:	xor    rax,QWORD PTR fs:0x28
   4daaa:	jne    4db1d <g_str_equal@plt+0x4085d>
   4daac:	add    rsp,0x18
   4dab0:	pop    rbx
   4dab1:	pop    rbp
   4dab2:	pop    r12
   4dab4:	pop    r13
   4dab6:	ret    
   4dab7:	nop    WORD PTR [rax+rax*1+0x0]
   4dac0:	mov    rsi,QWORD PTR [rbx]
   4dac3:	test   rsi,rsi
   4dac6:	je     4dada <g_str_equal@plt+0x4081a>
   4dac8:	mov    rdx,r12
   4dacb:	mov    rdi,rbp
   4dace:	call   4d8d0 <g_str_equal@plt+0x40610>
   4dad3:	cmp    QWORD PTR [rsp],0x0
   4dad8:	je     4db10 <g_str_equal@plt+0x40850>
   4dada:	mov    rsi,rbx
   4dadd:	mov    rdi,rbp
   4dae0:	call   28000 <g_str_equal@plt+0x1ad40>
   4dae5:	mov    rsi,QWORD PTR [rsp]
   4dae9:	test   rsi,rsi
   4daec:	je     4da94 <g_str_equal@plt+0x407d4>
   4daee:	mov    rdi,rbp
   4daf1:	call   28770 <g_str_equal@plt+0x1b4b0>
   4daf6:	test   al,al
   4daf8:	je     4db09 <g_str_equal@plt+0x40849>
   4dafa:	mov    rdi,QWORD PTR [rbx]
   4dafd:	call   457b0 <g_str_equal@plt+0x384f0>
   4db02:	mov    QWORD PTR [rbx],0x0
   4db09:	mov    rsi,QWORD PTR [rsp]
   4db0d:	jmp    4da94 <g_str_equal@plt+0x407d4>
   4db0f:	nop
   4db10:	mov    rsi,r12
   4db13:	mov    rdi,rbp
   4db16:	call   27f50 <g_str_equal@plt+0x1ac90>
   4db1b:	jmp    4dada <g_str_equal@plt+0x4081a>
   4db1d:	call   cd30 <__stack_chk_fail@plt>
   4db22:	nop    DWORD PTR [rax+0x0]
   4db26:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4db30:	push   rbx
   4db31:	mov    rbx,rdx
   4db34:	mov    rdx,rsi
   4db37:	lea    rsi,[rip+0xbae5]        # 59623 <_fini@@Base+0x6ecf>
   4db3e:	sub    rsp,0x10
   4db42:	mov    rcx,rsp
   4db45:	mov    QWORD PTR [rsp],0x0
   4db4d:	mov    rax,QWORD PTR fs:0x28
   4db56:	mov    QWORD PTR [rsp+0x8],rax
   4db5b:	xor    eax,eax
   4db5d:	call   4da50 <g_str_equal@plt+0x40790>
   4db62:	mov    rsi,QWORD PTR [rsp]
   4db66:	mov    rdi,rbx
   4db69:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4db6e:	mov    rax,QWORD PTR [rsp+0x8]
   4db73:	xor    rax,QWORD PTR fs:0x28
   4db7c:	jne    4db84 <g_str_equal@plt+0x408c4>
   4db7e:	add    rsp,0x10
   4db82:	pop    rbx
   4db83:	ret    
   4db84:	call   cd30 <__stack_chk_fail@plt>
   4db89:	nop    DWORD PTR [rax+0x0]
   4db90:	push   rbx
   4db91:	mov    r8,rcx
   4db94:	mov    rbx,rdx
   4db97:	lea    rcx,[rip+0x2332a2]        # 280e40 <_fini@@Base+0x22e6ec>
   4db9e:	sub    rsp,0x10
   4dba2:	mov    rax,QWORD PTR fs:0x28
   4dbab:	mov    QWORD PTR [rsp+0x8],rax
   4dbb0:	xor    eax,eax
   4dbb2:	mov    eax,DWORD PTR [rdx]
   4dbb4:	lea    rdx,[rsp+0x4]
   4dbb9:	mov    DWORD PTR [rsp+0x4],eax
   4dbbd:	call   296a0 <g_str_equal@plt+0x1c3e0>
   4dbc2:	mov    eax,DWORD PTR [rsp+0x4]
   4dbc6:	mov    DWORD PTR [rbx],eax
   4dbc8:	mov    rax,QWORD PTR [rsp+0x8]
   4dbcd:	xor    rax,QWORD PTR fs:0x28
   4dbd6:	jne    4dbde <g_str_equal@plt+0x4091e>
   4dbd8:	add    rsp,0x10
   4dbdc:	pop    rbx
   4dbdd:	ret    
   4dbde:	call   cd30 <__stack_chk_fail@plt>
   4dbe3:	nop    DWORD PTR [rax]
   4dbe6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4dbf0:	push   r13
   4dbf2:	push   r12
   4dbf4:	mov    r13,rdx
   4dbf7:	push   rbp
   4dbf8:	push   rbx
   4dbf9:	lea    rcx,[rip+0x233240]        # 280e40 <_fini@@Base+0x22e6ec>
   4dc00:	mov    rbx,rsi
   4dc03:	mov    rbp,rdi
   4dc06:	sub    rsp,0x28
   4dc0a:	mov    rax,QWORD PTR fs:0x28
   4dc13:	mov    QWORD PTR [rsp+0x18],rax
   4dc18:	xor    eax,eax
   4dc1a:	lea    r12,[rsp+0x10]
   4dc1f:	mov    eax,DWORD PTR [rsi]
   4dc21:	lea    rdx,[rsp+0xc]
   4dc26:	lea    rsi,[rip+0x10193]        # 5ddc0 <_fini@@Base+0xb66c>
   4dc2d:	mov    QWORD PTR [rsp+0x10],0x0
   4dc36:	mov    r8,r12
   4dc39:	mov    DWORD PTR [rsp+0xc],eax
   4dc3d:	call   296a0 <g_str_equal@plt+0x1c3e0>
   4dc42:	mov    rsi,QWORD PTR [rsp+0x10]
   4dc47:	mov    eax,DWORD PTR [rsp+0xc]
   4dc4b:	test   rsi,rsi
   4dc4e:	mov    DWORD PTR [rbx],eax
   4dc50:	jne    4dc6b <g_str_equal@plt+0x409ab>
   4dc52:	cmp    eax,0x1
   4dc55:	ja     4dc93 <g_str_equal@plt+0x409d3>
   4dc57:	lea    rsi,[rbx+0x8]
   4dc5b:	mov    rdx,r12
   4dc5e:	mov    rdi,rbp
   4dc61:	call   4db30 <g_str_equal@plt+0x40870>
   4dc66:	mov    rsi,QWORD PTR [rsp+0x10]
   4dc6b:	mov    rdi,r13
   4dc6e:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4dc73:	mov    rax,QWORD PTR [rsp+0x18]
   4dc78:	xor    rax,QWORD PTR fs:0x28
   4dc81:	jne    4dc8e <g_str_equal@plt+0x409ce>
   4dc83:	add    rsp,0x28
   4dc87:	pop    rbx
   4dc88:	pop    rbp
   4dc89:	pop    r12
   4dc8b:	pop    r13
   4dc8d:	ret    
   4dc8e:	call   cd30 <__stack_chk_fail@plt>
   4dc93:	call   c270 <abort@plt>
   4dc98:	nop    DWORD PTR [rax+rax*1+0x0]
   4dca0:	push   r13
   4dca2:	push   r12
   4dca4:	mov    r13,rcx
   4dca7:	push   rbp
   4dca8:	push   rbx
   4dca9:	mov    ecx,0x10
   4dcae:	mov    rbp,rdi
   4dcb1:	mov    rbx,rdx
   4dcb4:	sub    rsp,0x18
   4dcb8:	mov    r12,rsp
   4dcbb:	mov    QWORD PTR [rsp],0x0
   4dcc3:	mov    r8,r12
   4dcc6:	mov    rax,QWORD PTR fs:0x28
   4dccf:	mov    QWORD PTR [rsp+0x8],rax
   4dcd4:	xor    eax,eax
   4dcd6:	call   27da0 <g_str_equal@plt+0x1aae0>
   4dcdb:	mov    rsi,QWORD PTR [rsp]
   4dcdf:	test   rsi,rsi
   4dce2:	je     4dd10 <g_str_equal@plt+0x40a50>
   4dce4:	mov    rdi,r13
   4dce7:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4dcec:	mov    rax,QWORD PTR [rsp+0x8]
   4dcf1:	xor    rax,QWORD PTR fs:0x28
   4dcfa:	jne    4dd6d <g_str_equal@plt+0x40aad>
   4dcfc:	add    rsp,0x18
   4dd00:	pop    rbx
   4dd01:	pop    rbp
   4dd02:	pop    r12
   4dd04:	pop    r13
   4dd06:	ret    
   4dd07:	nop    WORD PTR [rax+rax*1+0x0]
   4dd10:	mov    rsi,QWORD PTR [rbx]
   4dd13:	test   rsi,rsi
   4dd16:	je     4dd2a <g_str_equal@plt+0x40a6a>
   4dd18:	mov    rdx,r12
   4dd1b:	mov    rdi,rbp
   4dd1e:	call   4dbf0 <g_str_equal@plt+0x40930>
   4dd23:	cmp    QWORD PTR [rsp],0x0
   4dd28:	je     4dd60 <g_str_equal@plt+0x40aa0>
   4dd2a:	mov    rsi,rbx
   4dd2d:	mov    rdi,rbp
   4dd30:	call   28000 <g_str_equal@plt+0x1ad40>
   4dd35:	mov    rsi,QWORD PTR [rsp]
   4dd39:	test   rsi,rsi
   4dd3c:	je     4dce4 <g_str_equal@plt+0x40a24>
   4dd3e:	mov    rdi,rbp
   4dd41:	call   28770 <g_str_equal@plt+0x1b4b0>
   4dd46:	test   al,al
   4dd48:	je     4dd59 <g_str_equal@plt+0x40a99>
   4dd4a:	mov    rdi,QWORD PTR [rbx]
   4dd4d:	call   457f0 <g_str_equal@plt+0x38530>
   4dd52:	mov    QWORD PTR [rbx],0x0
   4dd59:	mov    rsi,QWORD PTR [rsp]
   4dd5d:	jmp    4dce4 <g_str_equal@plt+0x40a24>
   4dd5f:	nop
   4dd60:	mov    rsi,r12
   4dd63:	mov    rdi,rbp
   4dd66:	call   27f50 <g_str_equal@plt+0x1ac90>
   4dd6b:	jmp    4dd2a <g_str_equal@plt+0x40a6a>
   4dd6d:	call   cd30 <__stack_chk_fail@plt>
   4dd72:	nop    DWORD PTR [rax+0x0]
   4dd76:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4dd80:	push   r14
   4dd82:	push   r13
   4dd84:	mov    r14,rcx
   4dd87:	push   r12
   4dd89:	push   rbp
   4dd8a:	mov    ecx,0x10
   4dd8f:	push   rbx
   4dd90:	mov    rbp,rdi
   4dd93:	mov    r13,rdx
   4dd96:	sub    rsp,0x10
   4dd9a:	mov    r12,rsp
   4dd9d:	mov    QWORD PTR [rsp],0x0
   4dda5:	mov    r8,r12
   4dda8:	mov    rax,QWORD PTR fs:0x28
   4ddb1:	mov    QWORD PTR [rsp+0x8],rax
   4ddb6:	xor    eax,eax
   4ddb8:	call   280a0 <g_str_equal@plt+0x1ade0>
   4ddbd:	mov    rsi,QWORD PTR [rsp]
   4ddc1:	test   rsi,rsi
   4ddc4:	je     4ddf0 <g_str_equal@plt+0x40b30>
   4ddc6:	mov    rdi,r14
   4ddc9:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4ddce:	mov    rax,QWORD PTR [rsp+0x8]
   4ddd3:	xor    rax,QWORD PTR fs:0x28
   4dddc:	jne    4de84 <g_str_equal@plt+0x40bc4>
   4dde2:	add    rsp,0x10
   4dde6:	pop    rbx
   4dde7:	pop    rbp
   4dde8:	pop    r12
   4ddea:	pop    r13
   4ddec:	pop    r14
   4ddee:	ret    
   4ddef:	nop
   4ddf0:	mov    rbx,QWORD PTR [r13+0x0]
   4ddf4:	test   rbx,rbx
   4ddf7:	jne    4de18 <g_str_equal@plt+0x40b58>
   4ddf9:	jmp    4de77 <g_str_equal@plt+0x40bb7>
   4ddfb:	nop    DWORD PTR [rax+rax*1+0x0]
   4de00:	mov    rsi,rbx
   4de03:	mov    edx,0x10
   4de08:	mov    rdi,rbp
   4de0b:	call   281f0 <g_str_equal@plt+0x1af30>
   4de10:	test   rax,rax
   4de13:	mov    rbx,rax
   4de16:	je     4de70 <g_str_equal@plt+0x40bb0>
   4de18:	lea    rdx,[rbx+0x8]
   4de1c:	xor    esi,esi
   4de1e:	mov    rcx,r12
   4de21:	mov    rdi,rbp
   4de24:	call   4dca0 <g_str_equal@plt+0x409e0>
   4de29:	cmp    QWORD PTR [rsp],0x0
   4de2e:	je     4de00 <g_str_equal@plt+0x40b40>
   4de30:	mov    rsi,r13
   4de33:	mov    rdi,rbp
   4de36:	call   28390 <g_str_equal@plt+0x1b0d0>
   4de3b:	mov    rsi,QWORD PTR [rsp]
   4de3f:	test   rsi,rsi
   4de42:	je     4ddc6 <g_str_equal@plt+0x40b06>
   4de44:	mov    rdi,rbp
   4de47:	call   28770 <g_str_equal@plt+0x1b4b0>
   4de4c:	test   al,al
   4de4e:	je     4de61 <g_str_equal@plt+0x40ba1>
   4de50:	mov    rdi,QWORD PTR [r13+0x0]
   4de54:	call   45830 <g_str_equal@plt+0x38570>
   4de59:	mov    QWORD PTR [r13+0x0],0x0
   4de61:	mov    rsi,QWORD PTR [rsp]
   4de65:	jmp    4ddc6 <g_str_equal@plt+0x40b06>
   4de6a:	nop    WORD PTR [rax+rax*1+0x0]
   4de70:	cmp    QWORD PTR [rsp],0x0
   4de75:	jne    4de30 <g_str_equal@plt+0x40b70>
   4de77:	mov    rsi,r12
   4de7a:	mov    rdi,rbp
   4de7d:	call   282e0 <g_str_equal@plt+0x1b020>
   4de82:	jmp    4de30 <g_str_equal@plt+0x40b70>
   4de84:	call   cd30 <__stack_chk_fail@plt>
   4de89:	nop    DWORD PTR [rax+0x0]
   4de90:	push   r13
   4de92:	push   r12
   4de94:	mov    r13,rdx
   4de97:	push   rbp
   4de98:	push   rbx
   4de99:	mov    rdx,rsi
   4de9c:	mov    rbx,rsi
   4de9f:	lea    rsi,[rip+0x178d0]        # 65776 <_fini@@Base+0x13022>
   4dea6:	mov    rbp,rdi
   4dea9:	sub    rsp,0x18
   4dead:	mov    r12,rsp
   4deb0:	mov    QWORD PTR [rsp],0x0
   4deb8:	mov    rcx,r12
   4debb:	mov    rax,QWORD PTR fs:0x28
   4dec4:	mov    QWORD PTR [rsp+0x8],rax
   4dec9:	xor    eax,eax
   4decb:	call   29210 <g_str_equal@plt+0x1bf50>
   4ded0:	mov    rsi,QWORD PTR [rsp]
   4ded4:	test   rsi,rsi
   4ded7:	je     4df00 <g_str_equal@plt+0x40c40>
   4ded9:	mov    rdi,r13
   4dedc:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4dee1:	mov    rax,QWORD PTR [rsp+0x8]
   4dee6:	xor    rax,QWORD PTR fs:0x28
   4deef:	jne    4df1c <g_str_equal@plt+0x40c5c>
   4def1:	add    rsp,0x18
   4def5:	pop    rbx
   4def6:	pop    rbp
   4def7:	pop    r12
   4def9:	pop    r13
   4defb:	ret    
   4defc:	nop    DWORD PTR [rax+0x0]
   4df00:	lea    rsi,[rip+0x17ad3]        # 659da <_fini@@Base+0x13286>
   4df07:	lea    rdx,[rbx+0x8]
   4df0b:	mov    rcx,r12
   4df0e:	mov    rdi,rbp
   4df11:	call   29210 <g_str_equal@plt+0x1bf50>
   4df16:	mov    rsi,QWORD PTR [rsp]
   4df1a:	jmp    4ded9 <g_str_equal@plt+0x40c19>
   4df1c:	call   cd30 <__stack_chk_fail@plt>
   4df21:	nop    DWORD PTR [rax+rax*1+0x0]
   4df26:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4df30:	push   rbx
   4df31:	mov    r8,rcx
   4df34:	mov    rbx,rdx
   4df37:	lea    rcx,[rip+0x232ee2]        # 280e20 <_fini@@Base+0x22e6cc>
   4df3e:	sub    rsp,0x10
   4df42:	mov    rax,QWORD PTR fs:0x28
   4df4b:	mov    QWORD PTR [rsp+0x8],rax
   4df50:	xor    eax,eax
   4df52:	mov    eax,DWORD PTR [rdx]
   4df54:	lea    rdx,[rsp+0x4]
   4df59:	mov    DWORD PTR [rsp+0x4],eax
   4df5d:	call   296a0 <g_str_equal@plt+0x1c3e0>
   4df62:	mov    eax,DWORD PTR [rsp+0x4]
   4df66:	mov    DWORD PTR [rbx],eax
   4df68:	mov    rax,QWORD PTR [rsp+0x8]
   4df6d:	xor    rax,QWORD PTR fs:0x28
   4df76:	jne    4df7e <g_str_equal@plt+0x40cbe>
   4df78:	add    rsp,0x10
   4df7c:	pop    rbx
   4df7d:	ret    
   4df7e:	call   cd30 <__stack_chk_fail@plt>
   4df83:	nop    DWORD PTR [rax]
   4df86:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4df90:	push   r13
   4df92:	push   r12
   4df94:	mov    r13,rdx
   4df97:	push   rbp
   4df98:	push   rbx
   4df99:	mov    rdx,rsi
   4df9c:	mov    rbx,rsi
   4df9f:	lea    rsi,[rip+0x177d0]        # 65776 <_fini@@Base+0x13022>
   4dfa6:	mov    rbp,rdi
   4dfa9:	sub    rsp,0x28
   4dfad:	mov    rax,QWORD PTR fs:0x28
   4dfb6:	mov    QWORD PTR [rsp+0x18],rax
   4dfbb:	xor    eax,eax
   4dfbd:	mov    QWORD PTR [rsp+0x10],0x0
   4dfc6:	lea    r12,[rsp+0x10]
   4dfcb:	call   286a0 <g_str_equal@plt+0x1b3e0>
   4dfd0:	test   al,al
   4dfd2:	je     4e020 <g_str_equal@plt+0x40d60>
   4dfd4:	lea    rsi,[rip+0x1779b]        # 65776 <_fini@@Base+0x13022>
   4dfdb:	lea    rdx,[rbx+0x8]
   4dfdf:	mov    rcx,r12
   4dfe2:	mov    rdi,rbp
   4dfe5:	call   29210 <g_str_equal@plt+0x1bf50>
   4dfea:	mov    rsi,QWORD PTR [rsp+0x10]
   4dfef:	test   rsi,rsi
   4dff2:	je     4e020 <g_str_equal@plt+0x40d60>
   4dff4:	mov    rdi,r13
   4dff7:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4dffc:	mov    rax,QWORD PTR [rsp+0x18]
   4e001:	xor    rax,QWORD PTR fs:0x28
   4e00a:	jne    4e0be <g_str_equal@plt+0x40dfe>
   4e010:	add    rsp,0x28
   4e014:	pop    rbx
   4e015:	pop    rbp
   4e016:	pop    r12
   4e018:	pop    r13
   4e01a:	ret    
   4e01b:	nop    DWORD PTR [rax+rax*1+0x0]
   4e020:	lea    rsi,[rip+0x17769]        # 65790 <_fini@@Base+0x1303c>
   4e027:	lea    rdx,[rbx+0x10]
   4e02b:	mov    rcx,r12
   4e02e:	mov    rdi,rbp
   4e031:	call   29210 <g_str_equal@plt+0x1bf50>
   4e036:	mov    rsi,QWORD PTR [rsp+0x10]
   4e03b:	test   rsi,rsi
   4e03e:	jne    4dff4 <g_str_equal@plt+0x40d34>
   4e040:	mov    eax,DWORD PTR [rbx+0x18]
   4e043:	lea    rsi,[rip+0x17994]        # 659de <_fini@@Base+0x1328a>
   4e04a:	lea    rdx,[rsp+0xc]
   4e04f:	lea    rcx,[rip+0x232dca]        # 280e20 <_fini@@Base+0x22e6cc>
   4e056:	mov    r8,r12
   4e059:	mov    rdi,rbp
   4e05c:	mov    DWORD PTR [rsp+0xc],eax
   4e060:	call   296a0 <g_str_equal@plt+0x1c3e0>
   4e065:	mov    rsi,QWORD PTR [rsp+0x10]
   4e06a:	mov    eax,DWORD PTR [rsp+0xc]
   4e06e:	test   rsi,rsi
   4e071:	mov    DWORD PTR [rbx+0x18],eax
   4e074:	jne    4dff4 <g_str_equal@plt+0x40d34>
   4e07a:	lea    rsi,[rip+0x17967]        # 659e8 <_fini@@Base+0x13294>
   4e081:	lea    rdx,[rbx+0x20]
   4e085:	mov    rcx,r12
   4e088:	mov    rdi,rbp
   4e08b:	call   28780 <g_str_equal@plt+0x1b4c0>
   4e090:	mov    rsi,QWORD PTR [rsp+0x10]
   4e095:	test   rsi,rsi
   4e098:	jne    4dff4 <g_str_equal@plt+0x40d34>
   4e09e:	lea    rsi,[rip+0x17790]        # 65835 <_fini@@Base+0x130e1>
   4e0a5:	lea    rdx,[rbx+0x28]
   4e0a9:	mov    rcx,r12
   4e0ac:	mov    rdi,rbp
   4e0af:	call   28780 <g_str_equal@plt+0x1b4c0>
   4e0b4:	mov    rsi,QWORD PTR [rsp+0x10]
   4e0b9:	jmp    4dff4 <g_str_equal@plt+0x40d34>
   4e0be:	call   cd30 <__stack_chk_fail@plt>
   4e0c3:	nop    DWORD PTR [rax]
   4e0c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4e0d0:	push   r13
   4e0d2:	push   r12
   4e0d4:	mov    r13,rcx
   4e0d7:	push   rbp
   4e0d8:	push   rbx
   4e0d9:	mov    ecx,0x30
   4e0de:	mov    rbp,rdi
   4e0e1:	mov    rbx,rdx
   4e0e4:	sub    rsp,0x18
   4e0e8:	mov    r12,rsp
   4e0eb:	mov    QWORD PTR [rsp],0x0
   4e0f3:	mov    r8,r12
   4e0f6:	mov    rax,QWORD PTR fs:0x28
   4e0ff:	mov    QWORD PTR [rsp+0x8],rax
   4e104:	xor    eax,eax
   4e106:	call   27da0 <g_str_equal@plt+0x1aae0>
   4e10b:	mov    rsi,QWORD PTR [rsp]
   4e10f:	test   rsi,rsi
   4e112:	je     4e140 <g_str_equal@plt+0x40e80>
   4e114:	mov    rdi,r13
   4e117:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4e11c:	mov    rax,QWORD PTR [rsp+0x8]
   4e121:	xor    rax,QWORD PTR fs:0x28
   4e12a:	jne    4e19d <g_str_equal@plt+0x40edd>
   4e12c:	add    rsp,0x18
   4e130:	pop    rbx
   4e131:	pop    rbp
   4e132:	pop    r12
   4e134:	pop    r13
   4e136:	ret    
   4e137:	nop    WORD PTR [rax+rax*1+0x0]
   4e140:	mov    rsi,QWORD PTR [rbx]
   4e143:	test   rsi,rsi
   4e146:	je     4e15a <g_str_equal@plt+0x40e9a>
   4e148:	mov    rdx,r12
   4e14b:	mov    rdi,rbp
   4e14e:	call   4df90 <g_str_equal@plt+0x40cd0>
   4e153:	cmp    QWORD PTR [rsp],0x0
   4e158:	je     4e190 <g_str_equal@plt+0x40ed0>
   4e15a:	mov    rsi,rbx
   4e15d:	mov    rdi,rbp
   4e160:	call   28000 <g_str_equal@plt+0x1ad40>
   4e165:	mov    rsi,QWORD PTR [rsp]
   4e169:	test   rsi,rsi
   4e16c:	je     4e114 <g_str_equal@plt+0x40e54>
   4e16e:	mov    rdi,rbp
   4e171:	call   28770 <g_str_equal@plt+0x1b4b0>
   4e176:	test   al,al
   4e178:	je     4e189 <g_str_equal@plt+0x40ec9>
   4e17a:	mov    rdi,QWORD PTR [rbx]
   4e17d:	call   45870 <g_str_equal@plt+0x385b0>
   4e182:	mov    QWORD PTR [rbx],0x0
   4e189:	mov    rsi,QWORD PTR [rsp]
   4e18d:	jmp    4e114 <g_str_equal@plt+0x40e54>
   4e18f:	nop
   4e190:	mov    rsi,r12
   4e193:	mov    rdi,rbp
   4e196:	call   27f50 <g_str_equal@plt+0x1ac90>
   4e19b:	jmp    4e15a <g_str_equal@plt+0x40e9a>
   4e19d:	call   cd30 <__stack_chk_fail@plt>
   4e1a2:	nop    DWORD PTR [rax+0x0]
   4e1a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4e1b0:	push   r14
   4e1b2:	push   r13
   4e1b4:	mov    r14,rcx
   4e1b7:	push   r12
   4e1b9:	push   rbp
   4e1ba:	mov    ecx,0x10
   4e1bf:	push   rbx
   4e1c0:	mov    rbp,rdi
   4e1c3:	mov    r13,rdx
   4e1c6:	sub    rsp,0x10
   4e1ca:	mov    r12,rsp
   4e1cd:	mov    QWORD PTR [rsp],0x0
   4e1d5:	mov    r8,r12
   4e1d8:	mov    rax,QWORD PTR fs:0x28
   4e1e1:	mov    QWORD PTR [rsp+0x8],rax
   4e1e6:	xor    eax,eax
   4e1e8:	call   280a0 <g_str_equal@plt+0x1ade0>
   4e1ed:	mov    rsi,QWORD PTR [rsp]
   4e1f1:	test   rsi,rsi
   4e1f4:	je     4e220 <g_str_equal@plt+0x40f60>
   4e1f6:	mov    rdi,r14
   4e1f9:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4e1fe:	mov    rax,QWORD PTR [rsp+0x8]
   4e203:	xor    rax,QWORD PTR fs:0x28
   4e20c:	jne    4e2b4 <g_str_equal@plt+0x40ff4>
   4e212:	add    rsp,0x10
   4e216:	pop    rbx
   4e217:	pop    rbp
   4e218:	pop    r12
   4e21a:	pop    r13
   4e21c:	pop    r14
   4e21e:	ret    
   4e21f:	nop
   4e220:	mov    rbx,QWORD PTR [r13+0x0]
   4e224:	test   rbx,rbx
   4e227:	jne    4e248 <g_str_equal@plt+0x40f88>
   4e229:	jmp    4e2a7 <g_str_equal@plt+0x40fe7>
   4e22b:	nop    DWORD PTR [rax+rax*1+0x0]
   4e230:	mov    rsi,rbx
   4e233:	mov    edx,0x10
   4e238:	mov    rdi,rbp
   4e23b:	call   281f0 <g_str_equal@plt+0x1af30>
   4e240:	test   rax,rax
   4e243:	mov    rbx,rax
   4e246:	je     4e2a0 <g_str_equal@plt+0x40fe0>
   4e248:	lea    rdx,[rbx+0x8]
   4e24c:	xor    esi,esi
   4e24e:	mov    rcx,r12
   4e251:	mov    rdi,rbp
   4e254:	call   4e0d0 <g_str_equal@plt+0x40e10>
   4e259:	cmp    QWORD PTR [rsp],0x0
   4e25e:	je     4e230 <g_str_equal@plt+0x40f70>
   4e260:	mov    rsi,r13
   4e263:	mov    rdi,rbp
   4e266:	call   28390 <g_str_equal@plt+0x1b0d0>
   4e26b:	mov    rsi,QWORD PTR [rsp]
   4e26f:	test   rsi,rsi
   4e272:	je     4e1f6 <g_str_equal@plt+0x40f36>
   4e274:	mov    rdi,rbp
   4e277:	call   28770 <g_str_equal@plt+0x1b4b0>
   4e27c:	test   al,al
   4e27e:	je     4e291 <g_str_equal@plt+0x40fd1>
   4e280:	mov    rdi,QWORD PTR [r13+0x0]
   4e284:	call   458b0 <g_str_equal@plt+0x385f0>
   4e289:	mov    QWORD PTR [r13+0x0],0x0
   4e291:	mov    rsi,QWORD PTR [rsp]
   4e295:	jmp    4e1f6 <g_str_equal@plt+0x40f36>
   4e29a:	nop    WORD PTR [rax+rax*1+0x0]
   4e2a0:	cmp    QWORD PTR [rsp],0x0
   4e2a5:	jne    4e260 <g_str_equal@plt+0x40fa0>
   4e2a7:	mov    rsi,r12
   4e2aa:	mov    rdi,rbp
   4e2ad:	call   282e0 <g_str_equal@plt+0x1b020>
   4e2b2:	jmp    4e260 <g_str_equal@plt+0x40fa0>
   4e2b4:	call   cd30 <__stack_chk_fail@plt>
   4e2b9:	nop    DWORD PTR [rax+0x0]
   4e2c0:	push   rbx
   4e2c1:	mov    rbx,rdx
   4e2c4:	mov    rdx,rsi
   4e2c7:	lea    rsi,[rip+0x16050]        # 6431e <_fini@@Base+0x11bca>
   4e2ce:	sub    rsp,0x10
   4e2d2:	mov    rcx,rsp
   4e2d5:	mov    QWORD PTR [rsp],0x0
   4e2dd:	mov    rax,QWORD PTR fs:0x28
   4e2e6:	mov    QWORD PTR [rsp+0x8],rax
   4e2eb:	xor    eax,eax
   4e2ed:	call   4e0d0 <g_str_equal@plt+0x40e10>
   4e2f2:	mov    rsi,QWORD PTR [rsp]
   4e2f6:	mov    rdi,rbx
   4e2f9:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4e2fe:	mov    rax,QWORD PTR [rsp+0x8]
   4e303:	xor    rax,QWORD PTR fs:0x28
   4e30c:	jne    4e314 <g_str_equal@plt+0x41054>
   4e30e:	add    rsp,0x10
   4e312:	pop    rbx
   4e313:	ret    
   4e314:	call   cd30 <__stack_chk_fail@plt>
   4e319:	nop    DWORD PTR [rax+0x0]
   4e320:	push   rbx
   4e321:	mov    rbx,rdx
   4e324:	mov    rdx,rsi
   4e327:	lea    rsi,[rip+0xfda0]        # 5e0ce <_fini@@Base+0xb97a>
   4e32e:	sub    rsp,0x10
   4e332:	mov    rcx,rsp
   4e335:	mov    QWORD PTR [rsp],0x0
   4e33d:	mov    rax,QWORD PTR fs:0x28
   4e346:	mov    QWORD PTR [rsp+0x8],rax
   4e34b:	xor    eax,eax
   4e34d:	call   28780 <g_str_equal@plt+0x1b4c0>
   4e352:	mov    rsi,QWORD PTR [rsp]
   4e356:	mov    rdi,rbx
   4e359:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4e35e:	mov    rax,QWORD PTR [rsp+0x8]
   4e363:	xor    rax,QWORD PTR fs:0x28
   4e36c:	jne    4e374 <g_str_equal@plt+0x410b4>
   4e36e:	add    rsp,0x10
   4e372:	pop    rbx
   4e373:	ret    
   4e374:	call   cd30 <__stack_chk_fail@plt>
   4e379:	nop    DWORD PTR [rax+0x0]
   4e380:	push   rbx
   4e381:	mov    r8,rcx
   4e384:	mov    rbx,rdx
   4e387:	lea    rcx,[rip+0x232a62]        # 280df0 <_fini@@Base+0x22e69c>
   4e38e:	sub    rsp,0x10
   4e392:	mov    rax,QWORD PTR fs:0x28
   4e39b:	mov    QWORD PTR [rsp+0x8],rax
   4e3a0:	xor    eax,eax
   4e3a2:	mov    eax,DWORD PTR [rdx]
   4e3a4:	lea    rdx,[rsp+0x4]
   4e3a9:	mov    DWORD PTR [rsp+0x4],eax
   4e3ad:	call   296a0 <g_str_equal@plt+0x1c3e0>
   4e3b2:	mov    eax,DWORD PTR [rsp+0x4]
   4e3b6:	mov    DWORD PTR [rbx],eax
   4e3b8:	mov    rax,QWORD PTR [rsp+0x8]
   4e3bd:	xor    rax,QWORD PTR fs:0x28
   4e3c6:	jne    4e3ce <g_str_equal@plt+0x4110e>
   4e3c8:	add    rsp,0x10
   4e3cc:	pop    rbx
   4e3cd:	ret    
   4e3ce:	call   cd30 <__stack_chk_fail@plt>
   4e3d3:	nop    DWORD PTR [rax]
   4e3d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4e3e0:	push   rbx
   4e3e1:	mov    rbx,rdx
   4e3e4:	mov    rdx,rsi
   4e3e7:	lea    rsi,[rip+0x173de]        # 657cc <_fini@@Base+0x13078>
   4e3ee:	sub    rsp,0x10
   4e3f2:	mov    rcx,rsp
   4e3f5:	mov    QWORD PTR [rsp],0x0
   4e3fd:	mov    rax,QWORD PTR fs:0x28
   4e406:	mov    QWORD PTR [rsp+0x8],rax
   4e40b:	xor    eax,eax
   4e40d:	call   29210 <g_str_equal@plt+0x1bf50>
   4e412:	mov    rsi,QWORD PTR [rsp]
   4e416:	mov    rdi,rbx
   4e419:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4e41e:	mov    rax,QWORD PTR [rsp+0x8]
   4e423:	xor    rax,QWORD PTR fs:0x28
   4e42c:	jne    4e434 <g_str_equal@plt+0x41174>
   4e42e:	add    rsp,0x10
   4e432:	pop    rbx
   4e433:	ret    
   4e434:	call   cd30 <__stack_chk_fail@plt>
   4e439:	nop    DWORD PTR [rax+0x0]
   4e440:	push   r13
   4e442:	push   r12
   4e444:	mov    r13,rdx
   4e447:	push   rbp
   4e448:	push   rbx
   4e449:	mov    rdx,rsi
   4e44c:	mov    rbx,rsi
   4e44f:	lea    rsi,[rip+0xe6ff]        # 5cb55 <_fini@@Base+0xa401>
   4e456:	mov    rbp,rdi
   4e459:	sub    rsp,0x18
   4e45d:	mov    r12,rsp
   4e460:	mov    QWORD PTR [rsp],0x0
   4e468:	mov    rcx,r12
   4e46b:	mov    rax,QWORD PTR fs:0x28
   4e474:	mov    QWORD PTR [rsp+0x8],rax
   4e479:	xor    eax,eax
   4e47b:	call   28780 <g_str_equal@plt+0x1b4c0>
   4e480:	mov    rsi,QWORD PTR [rsp]
   4e484:	test   rsi,rsi
   4e487:	je     4e4b0 <g_str_equal@plt+0x411f0>
   4e489:	mov    rdi,r13
   4e48c:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4e491:	mov    rax,QWORD PTR [rsp+0x8]
   4e496:	xor    rax,QWORD PTR fs:0x28
   4e49f:	jne    4e4eb <g_str_equal@plt+0x4122b>
   4e4a1:	add    rsp,0x18
   4e4a5:	pop    rbx
   4e4a6:	pop    rbp
   4e4a7:	pop    r12
   4e4a9:	pop    r13
   4e4ab:	ret    
   4e4ac:	nop    DWORD PTR [rax+0x0]
   4e4b0:	lea    rsi,[rip+0x17538]        # 659ef <_fini@@Base+0x1329b>
   4e4b7:	lea    rdx,[rbx+0x8]
   4e4bb:	mov    rcx,r12
   4e4be:	mov    rdi,rbp
   4e4c1:	call   29120 <g_str_equal@plt+0x1be60>
   4e4c6:	mov    rsi,QWORD PTR [rsp]
   4e4ca:	test   rsi,rsi
   4e4cd:	jne    4e489 <g_str_equal@plt+0x411c9>
   4e4cf:	lea    rsi,[rip+0x13c18]        # 620ee <_fini@@Base+0xf99a>
   4e4d6:	lea    rdx,[rbx+0x9]
   4e4da:	mov    rcx,r12
   4e4dd:	mov    rdi,rbp
   4e4e0:	call   29120 <g_str_equal@plt+0x1be60>
   4e4e5:	mov    rsi,QWORD PTR [rsp]
   4e4e9:	jmp    4e489 <g_str_equal@plt+0x411c9>
   4e4eb:	call   cd30 <__stack_chk_fail@plt>
   4e4f0:	push   r13
   4e4f2:	push   r12
   4e4f4:	mov    r13,rcx
   4e4f7:	push   rbp
   4e4f8:	push   rbx
   4e4f9:	mov    ecx,0x10
   4e4fe:	mov    rbp,rdi
   4e501:	mov    rbx,rdx
   4e504:	sub    rsp,0x18
   4e508:	mov    r12,rsp
   4e50b:	mov    QWORD PTR [rsp],0x0
   4e513:	mov    r8,r12
   4e516:	mov    rax,QWORD PTR fs:0x28
   4e51f:	mov    QWORD PTR [rsp+0x8],rax
   4e524:	xor    eax,eax
   4e526:	call   27da0 <g_str_equal@plt+0x1aae0>
   4e52b:	mov    rsi,QWORD PTR [rsp]
   4e52f:	test   rsi,rsi
   4e532:	je     4e560 <g_str_equal@plt+0x412a0>
   4e534:	mov    rdi,r13
   4e537:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4e53c:	mov    rax,QWORD PTR [rsp+0x8]
   4e541:	xor    rax,QWORD PTR fs:0x28
   4e54a:	jne    4e5bd <g_str_equal@plt+0x412fd>
   4e54c:	add    rsp,0x18
   4e550:	pop    rbx
   4e551:	pop    rbp
   4e552:	pop    r12
   4e554:	pop    r13
   4e556:	ret    
   4e557:	nop    WORD PTR [rax+rax*1+0x0]
   4e560:	mov    rsi,QWORD PTR [rbx]
   4e563:	test   rsi,rsi
   4e566:	je     4e57a <g_str_equal@plt+0x412ba>
   4e568:	mov    rdx,r12
   4e56b:	mov    rdi,rbp
   4e56e:	call   4e440 <g_str_equal@plt+0x41180>
   4e573:	cmp    QWORD PTR [rsp],0x0
   4e578:	je     4e5b0 <g_str_equal@plt+0x412f0>
   4e57a:	mov    rsi,rbx
   4e57d:	mov    rdi,rbp
   4e580:	call   28000 <g_str_equal@plt+0x1ad40>
   4e585:	mov    rsi,QWORD PTR [rsp]
   4e589:	test   rsi,rsi
   4e58c:	je     4e534 <g_str_equal@plt+0x41274>
   4e58e:	mov    rdi,rbp
   4e591:	call   28770 <g_str_equal@plt+0x1b4b0>
   4e596:	test   al,al
   4e598:	je     4e5a9 <g_str_equal@plt+0x412e9>
   4e59a:	mov    rdi,QWORD PTR [rbx]
   4e59d:	call   458f0 <g_str_equal@plt+0x38630>
   4e5a2:	mov    QWORD PTR [rbx],0x0
   4e5a9:	mov    rsi,QWORD PTR [rsp]
   4e5ad:	jmp    4e534 <g_str_equal@plt+0x41274>
   4e5af:	nop
   4e5b0:	mov    rsi,r12
   4e5b3:	mov    rdi,rbp
   4e5b6:	call   27f50 <g_str_equal@plt+0x1ac90>
   4e5bb:	jmp    4e57a <g_str_equal@plt+0x412ba>
   4e5bd:	call   cd30 <__stack_chk_fail@plt>
   4e5c2:	nop    DWORD PTR [rax+0x0]
   4e5c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4e5d0:	push   r14
   4e5d2:	push   r13
   4e5d4:	mov    r14,rcx
   4e5d7:	push   r12
   4e5d9:	push   rbp
   4e5da:	mov    ecx,0x10
   4e5df:	push   rbx
   4e5e0:	mov    rbp,rdi
   4e5e3:	mov    r13,rdx
   4e5e6:	sub    rsp,0x10
   4e5ea:	mov    r12,rsp
   4e5ed:	mov    QWORD PTR [rsp],0x0
   4e5f5:	mov    r8,r12
   4e5f8:	mov    rax,QWORD PTR fs:0x28
   4e601:	mov    QWORD PTR [rsp+0x8],rax
   4e606:	xor    eax,eax
   4e608:	call   280a0 <g_str_equal@plt+0x1ade0>
   4e60d:	mov    rsi,QWORD PTR [rsp]
   4e611:	test   rsi,rsi
   4e614:	je     4e640 <g_str_equal@plt+0x41380>
   4e616:	mov    rdi,r14
   4e619:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4e61e:	mov    rax,QWORD PTR [rsp+0x8]
   4e623:	xor    rax,QWORD PTR fs:0x28
   4e62c:	jne    4e6d4 <g_str_equal@plt+0x41414>
   4e632:	add    rsp,0x10
   4e636:	pop    rbx
   4e637:	pop    rbp
   4e638:	pop    r12
   4e63a:	pop    r13
   4e63c:	pop    r14
   4e63e:	ret    
   4e63f:	nop
   4e640:	mov    rbx,QWORD PTR [r13+0x0]
   4e644:	test   rbx,rbx
   4e647:	jne    4e668 <g_str_equal@plt+0x413a8>
   4e649:	jmp    4e6c7 <g_str_equal@plt+0x41407>
   4e64b:	nop    DWORD PTR [rax+rax*1+0x0]
   4e650:	mov    rsi,rbx
   4e653:	mov    edx,0x10
   4e658:	mov    rdi,rbp
   4e65b:	call   281f0 <g_str_equal@plt+0x1af30>
   4e660:	test   rax,rax
   4e663:	mov    rbx,rax
   4e666:	je     4e6c0 <g_str_equal@plt+0x41400>
   4e668:	lea    rdx,[rbx+0x8]
   4e66c:	xor    esi,esi
   4e66e:	mov    rcx,r12
   4e671:	mov    rdi,rbp
   4e674:	call   4e4f0 <g_str_equal@plt+0x41230>
   4e679:	cmp    QWORD PTR [rsp],0x0
   4e67e:	je     4e650 <g_str_equal@plt+0x41390>
   4e680:	mov    rsi,r13
   4e683:	mov    rdi,rbp
   4e686:	call   28390 <g_str_equal@plt+0x1b0d0>
   4e68b:	mov    rsi,QWORD PTR [rsp]
   4e68f:	test   rsi,rsi
   4e692:	je     4e616 <g_str_equal@plt+0x41356>
   4e694:	mov    rdi,rbp
   4e697:	call   28770 <g_str_equal@plt+0x1b4b0>
   4e69c:	test   al,al
   4e69e:	je     4e6b1 <g_str_equal@plt+0x413f1>
   4e6a0:	mov    rdi,QWORD PTR [r13+0x0]
   4e6a4:	call   45930 <g_str_equal@plt+0x38670>
   4e6a9:	mov    QWORD PTR [r13+0x0],0x0
   4e6b1:	mov    rsi,QWORD PTR [rsp]
   4e6b5:	jmp    4e616 <g_str_equal@plt+0x41356>
   4e6ba:	nop    WORD PTR [rax+rax*1+0x0]
   4e6c0:	cmp    QWORD PTR [rsp],0x0
   4e6c5:	jne    4e680 <g_str_equal@plt+0x413c0>
   4e6c7:	mov    rsi,r12
   4e6ca:	mov    rdi,rbp
   4e6cd:	call   282e0 <g_str_equal@plt+0x1b020>
   4e6d2:	jmp    4e680 <g_str_equal@plt+0x413c0>
   4e6d4:	call   cd30 <__stack_chk_fail@plt>
   4e6d9:	nop    DWORD PTR [rax+0x0]
   4e6e0:	push   r12
   4e6e2:	push   rbp
   4e6e3:	mov    r12,rdx
   4e6e6:	push   rbx
   4e6e7:	mov    rdx,rsi
   4e6ea:	mov    rbx,rsi
   4e6ed:	lea    rsi,[rip+0x17304]        # 659f8 <_fini@@Base+0x132a4>
   4e6f4:	mov    rbp,rdi
   4e6f7:	sub    rsp,0x10
   4e6fb:	mov    rax,QWORD PTR fs:0x28
   4e704:	mov    QWORD PTR [rsp+0x8],rax
   4e709:	xor    eax,eax
   4e70b:	mov    QWORD PTR [rsp],0x0
   4e713:	call   286a0 <g_str_equal@plt+0x1b3e0>
   4e718:	test   al,al
   4e71a:	je     4e760 <g_str_equal@plt+0x414a0>
   4e71c:	lea    rsi,[rip+0x172d5]        # 659f8 <_fini@@Base+0x132a4>
   4e723:	lea    rdx,[rbx+0x8]
   4e727:	mov    rcx,rsp
   4e72a:	mov    rdi,rbp
   4e72d:	call   28780 <g_str_equal@plt+0x1b4c0>
   4e732:	mov    rsi,QWORD PTR [rsp]
   4e736:	test   rsi,rsi
   4e739:	je     4e760 <g_str_equal@plt+0x414a0>
   4e73b:	mov    rdi,r12
   4e73e:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4e743:	mov    rax,QWORD PTR [rsp+0x8]
   4e748:	xor    rax,QWORD PTR fs:0x28
   4e751:	jne    4e817 <g_str_equal@plt+0x41557>
   4e757:	add    rsp,0x10
   4e75b:	pop    rbx
   4e75c:	pop    rbp
   4e75d:	pop    r12
   4e75f:	ret    
   4e760:	lea    rdx,[rbx+0x10]
   4e764:	lea    rsi,[rip+0x17295]        # 65a00 <_fini@@Base+0x132ac>
   4e76b:	mov    rdi,rbp
   4e76e:	call   286a0 <g_str_equal@plt+0x1b3e0>
   4e773:	test   al,al
   4e775:	jne    4e7d0 <g_str_equal@plt+0x41510>
   4e777:	lea    rdx,[rbx+0x20]
   4e77b:	lea    rsi,[rip+0x17288]        # 65a0a <_fini@@Base+0x132b6>
   4e782:	mov    rdi,rbp
   4e785:	call   286a0 <g_str_equal@plt+0x1b3e0>
   4e78a:	test   al,al
   4e78c:	je     4e7ad <g_str_equal@plt+0x414ed>
   4e78e:	lea    rsi,[rip+0x17275]        # 65a0a <_fini@@Base+0x132b6>
   4e795:	lea    rdx,[rbx+0x28]
   4e799:	mov    rcx,rsp
   4e79c:	mov    rdi,rbp
   4e79f:	call   28780 <g_str_equal@plt+0x1b4c0>
   4e7a4:	mov    rsi,QWORD PTR [rsp]
   4e7a8:	test   rsi,rsi
   4e7ab:	jne    4e73b <g_str_equal@plt+0x4147b>
   4e7ad:	lea    rdx,[rbx+0x30]
   4e7b1:	lea    rsi,[rip+0x16f22]        # 656da <_fini@@Base+0x12f86>
   4e7b8:	mov    rdi,rbp
   4e7bb:	call   286a0 <g_str_equal@plt+0x1b3e0>
   4e7c0:	test   al,al
   4e7c2:	jne    4e7f8 <g_str_equal@plt+0x41538>
   4e7c4:	mov    rsi,QWORD PTR [rsp]
   4e7c8:	jmp    4e73b <g_str_equal@plt+0x4147b>
   4e7cd:	nop    DWORD PTR [rax]
   4e7d0:	lea    rsi,[rip+0x17229]        # 65a00 <_fini@@Base+0x132ac>
   4e7d7:	lea    rdx,[rbx+0x18]
   4e7db:	mov    rcx,rsp
   4e7de:	mov    rdi,rbp
   4e7e1:	call   28780 <g_str_equal@plt+0x1b4c0>
   4e7e6:	mov    rsi,QWORD PTR [rsp]
   4e7ea:	test   rsi,rsi
   4e7ed:	jne    4e73b <g_str_equal@plt+0x4147b>
   4e7f3:	jmp    4e777 <g_str_equal@plt+0x414b7>
   4e7f5:	nop    DWORD PTR [rax]
   4e7f8:	lea    rsi,[rip+0x16edb]        # 656da <_fini@@Base+0x12f86>
   4e7ff:	lea    rdx,[rbx+0x38]
   4e803:	mov    rcx,rsp
   4e806:	mov    rdi,rbp
   4e809:	call   28780 <g_str_equal@plt+0x1b4c0>
   4e80e:	mov    rsi,QWORD PTR [rsp]
   4e812:	jmp    4e73b <g_str_equal@plt+0x4147b>
   4e817:	call   cd30 <__stack_chk_fail@plt>
   4e81c:	nop    DWORD PTR [rax+0x0]
   4e820:	push   rbx
   4e821:	mov    rbx,rdx
   4e824:	sub    rsp,0x10
   4e828:	mov    rdx,rsp
   4e82b:	mov    QWORD PTR [rsp],0x0
   4e833:	mov    rax,QWORD PTR fs:0x28
   4e83c:	mov    QWORD PTR [rsp+0x8],rax
   4e841:	xor    eax,eax
   4e843:	call   4e6e0 <g_str_equal@plt+0x41420>
   4e848:	mov    rsi,QWORD PTR [rsp]
   4e84c:	mov    rdi,rbx
   4e84f:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4e854:	mov    rax,QWORD PTR [rsp+0x8]
   4e859:	xor    rax,QWORD PTR fs:0x28
   4e862:	jne    4e86a <g_str_equal@plt+0x415aa>
   4e864:	add    rsp,0x10
   4e868:	pop    rbx
   4e869:	ret    
   4e86a:	call   cd30 <__stack_chk_fail@plt>
   4e86f:	nop
   4e870:	push   r13
   4e872:	push   r12
   4e874:	mov    r12,rdi
   4e877:	push   rbp
   4e878:	push   rbx
   4e879:	mov    rbp,rdx
   4e87c:	mov    rbx,rsi
   4e87f:	sub    rsp,0x18
   4e883:	mov    r13,rsp
   4e886:	mov    QWORD PTR [rsp],0x0
   4e88e:	mov    rdx,r13
   4e891:	mov    rax,QWORD PTR fs:0x28
   4e89a:	mov    QWORD PTR [rsp+0x8],rax
   4e89f:	xor    eax,eax
   4e8a1:	call   4d0d0 <g_str_equal@plt+0x3fe10>
   4e8a6:	mov    rsi,QWORD PTR [rsp]
   4e8aa:	test   rsi,rsi
   4e8ad:	jne    4e8d0 <g_str_equal@plt+0x41610>
   4e8af:	mov    eax,DWORD PTR [rbx]
   4e8b1:	cmp    eax,0x1
   4e8b4:	je     4e8f8 <g_str_equal@plt+0x41638>
   4e8b6:	jb     4e910 <g_str_equal@plt+0x41650>
   4e8b8:	cmp    eax,0x2
   4e8bb:	jne    4e92a <g_str_equal@plt+0x4166a>
   4e8bd:	lea    rsi,[rbx+0x8]
   4e8c1:	mov    rdx,r13
   4e8c4:	mov    rdi,r12
   4e8c7:	call   4e820 <g_str_equal@plt+0x41560>
   4e8cc:	mov    rsi,QWORD PTR [rsp]
   4e8d0:	mov    rdi,rbp
   4e8d3:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4e8d8:	mov    rax,QWORD PTR [rsp+0x8]
   4e8dd:	xor    rax,QWORD PTR fs:0x28
   4e8e6:	jne    4e925 <g_str_equal@plt+0x41665>
   4e8e8:	add    rsp,0x18
   4e8ec:	pop    rbx
   4e8ed:	pop    rbp
   4e8ee:	pop    r12
   4e8f0:	pop    r13
   4e8f2:	ret    
   4e8f3:	nop    DWORD PTR [rax+rax*1+0x0]
   4e8f8:	lea    rsi,[rbx+0x8]
   4e8fc:	mov    rdx,r13
   4e8ff:	mov    rdi,r12
   4e902:	call   4d370 <g_str_equal@plt+0x400b0>
   4e907:	mov    rsi,QWORD PTR [rsp]
   4e90b:	jmp    4e8d0 <g_str_equal@plt+0x41610>
   4e90d:	nop    DWORD PTR [rax]
   4e910:	lea    rsi,[rbx+0x8]
   4e914:	mov    rdx,r13
   4e917:	mov    rdi,r12
   4e91a:	call   4d150 <g_str_equal@plt+0x3fe90>
   4e91f:	mov    rsi,QWORD PTR [rsp]
   4e923:	jmp    4e8d0 <g_str_equal@plt+0x41610>
   4e925:	call   cd30 <__stack_chk_fail@plt>
   4e92a:	call   c270 <abort@plt>
   4e92f:	nop
   4e930:	push   r13
   4e932:	push   r12
   4e934:	mov    r13,rcx
   4e937:	push   rbp
   4e938:	push   rbx
   4e939:	mov    ecx,0x48
   4e93e:	mov    rbp,rdi
   4e941:	mov    rbx,rdx
   4e944:	sub    rsp,0x18
   4e948:	mov    r12,rsp
   4e94b:	mov    QWORD PTR [rsp],0x0
   4e953:	mov    r8,r12
   4e956:	mov    rax,QWORD PTR fs:0x28
   4e95f:	mov    QWORD PTR [rsp+0x8],rax
   4e964:	xor    eax,eax
   4e966:	call   27da0 <g_str_equal@plt+0x1aae0>
   4e96b:	mov    rsi,QWORD PTR [rsp]
   4e96f:	test   rsi,rsi
   4e972:	je     4e9a0 <g_str_equal@plt+0x416e0>
   4e974:	mov    rdi,r13
   4e977:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4e97c:	mov    rax,QWORD PTR [rsp+0x8]
   4e981:	xor    rax,QWORD PTR fs:0x28
   4e98a:	jne    4e9fd <g_str_equal@plt+0x4173d>
   4e98c:	add    rsp,0x18
   4e990:	pop    rbx
   4e991:	pop    rbp
   4e992:	pop    r12
   4e994:	pop    r13
   4e996:	ret    
   4e997:	nop    WORD PTR [rax+rax*1+0x0]
   4e9a0:	mov    rsi,QWORD PTR [rbx]
   4e9a3:	test   rsi,rsi
   4e9a6:	je     4e9ba <g_str_equal@plt+0x416fa>
   4e9a8:	mov    rdx,r12
   4e9ab:	mov    rdi,rbp
   4e9ae:	call   4e870 <g_str_equal@plt+0x415b0>
   4e9b3:	cmp    QWORD PTR [rsp],0x0
   4e9b8:	je     4e9f0 <g_str_equal@plt+0x41730>
   4e9ba:	mov    rsi,rbx
   4e9bd:	mov    rdi,rbp
   4e9c0:	call   28000 <g_str_equal@plt+0x1ad40>
   4e9c5:	mov    rsi,QWORD PTR [rsp]
   4e9c9:	test   rsi,rsi
   4e9cc:	je     4e974 <g_str_equal@plt+0x416b4>
   4e9ce:	mov    rdi,rbp
   4e9d1:	call   28770 <g_str_equal@plt+0x1b4b0>
   4e9d6:	test   al,al
   4e9d8:	je     4e9e9 <g_str_equal@plt+0x41729>
   4e9da:	mov    rdi,QWORD PTR [rbx]
   4e9dd:	call   45630 <g_str_equal@plt+0x38370>
   4e9e2:	mov    QWORD PTR [rbx],0x0
   4e9e9:	mov    rsi,QWORD PTR [rsp]
   4e9ed:	jmp    4e974 <g_str_equal@plt+0x416b4>
   4e9ef:	nop
   4e9f0:	mov    rsi,r12
   4e9f3:	mov    rdi,rbp
   4e9f6:	call   27f50 <g_str_equal@plt+0x1ac90>
   4e9fb:	jmp    4e9ba <g_str_equal@plt+0x416fa>
   4e9fd:	call   cd30 <__stack_chk_fail@plt>
   4ea02:	nop    DWORD PTR [rax+0x0]
   4ea06:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4ea10:	push   r13
   4ea12:	push   r12
   4ea14:	mov    r13,rcx
   4ea17:	push   rbp
   4ea18:	push   rbx
   4ea19:	mov    ecx,0x40
   4ea1e:	mov    rbp,rdi
   4ea21:	mov    rbx,rdx
   4ea24:	sub    rsp,0x18
   4ea28:	mov    r12,rsp
   4ea2b:	mov    QWORD PTR [rsp],0x0
   4ea33:	mov    r8,r12
   4ea36:	mov    rax,QWORD PTR fs:0x28
   4ea3f:	mov    QWORD PTR [rsp+0x8],rax
   4ea44:	xor    eax,eax
   4ea46:	call   27da0 <g_str_equal@plt+0x1aae0>
   4ea4b:	mov    rsi,QWORD PTR [rsp]
   4ea4f:	test   rsi,rsi
   4ea52:	je     4ea80 <g_str_equal@plt+0x417c0>
   4ea54:	mov    rdi,r13
   4ea57:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4ea5c:	mov    rax,QWORD PTR [rsp+0x8]
   4ea61:	xor    rax,QWORD PTR fs:0x28
   4ea6a:	jne    4eadd <g_str_equal@plt+0x4181d>
   4ea6c:	add    rsp,0x18
   4ea70:	pop    rbx
   4ea71:	pop    rbp
   4ea72:	pop    r12
   4ea74:	pop    r13
   4ea76:	ret    
   4ea77:	nop    WORD PTR [rax+rax*1+0x0]
   4ea80:	mov    rsi,QWORD PTR [rbx]
   4ea83:	test   rsi,rsi
   4ea86:	je     4ea9a <g_str_equal@plt+0x417da>
   4ea88:	mov    rdx,r12
   4ea8b:	mov    rdi,rbp
   4ea8e:	call   4e820 <g_str_equal@plt+0x41560>
   4ea93:	cmp    QWORD PTR [rsp],0x0
   4ea98:	je     4ead0 <g_str_equal@plt+0x41810>
   4ea9a:	mov    rsi,rbx
   4ea9d:	mov    rdi,rbp
   4eaa0:	call   28000 <g_str_equal@plt+0x1ad40>
   4eaa5:	mov    rsi,QWORD PTR [rsp]
   4eaa9:	test   rsi,rsi
   4eaac:	je     4ea54 <g_str_equal@plt+0x41794>
   4eaae:	mov    rdi,rbp
   4eab1:	call   28770 <g_str_equal@plt+0x1b4b0>
   4eab6:	test   al,al
   4eab8:	je     4eac9 <g_str_equal@plt+0x41809>
   4eaba:	mov    rdi,QWORD PTR [rbx]
   4eabd:	call   456f0 <g_str_equal@plt+0x38430>
   4eac2:	mov    QWORD PTR [rbx],0x0
   4eac9:	mov    rsi,QWORD PTR [rsp]
   4eacd:	jmp    4ea54 <g_str_equal@plt+0x41794>
   4eacf:	nop
   4ead0:	mov    rsi,r12
   4ead3:	mov    rdi,rbp
   4ead6:	call   27f50 <g_str_equal@plt+0x1ac90>
   4eadb:	jmp    4ea9a <g_str_equal@plt+0x417da>
   4eadd:	call   cd30 <__stack_chk_fail@plt>
   4eae2:	nop    DWORD PTR [rax+0x0]
   4eae6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4eaf0:	push   r13
   4eaf2:	push   r12
   4eaf4:	mov    r13,rcx
   4eaf7:	push   rbp
   4eaf8:	push   rbx
   4eaf9:	mov    ecx,0x40
   4eafe:	mov    rbp,rdi
   4eb01:	mov    rbx,rdx
   4eb04:	sub    rsp,0x18
   4eb08:	mov    r12,rsp
   4eb0b:	mov    QWORD PTR [rsp],0x0
   4eb13:	mov    r8,r12
   4eb16:	mov    rax,QWORD PTR fs:0x28
   4eb1f:	mov    QWORD PTR [rsp+0x8],rax
   4eb24:	xor    eax,eax
   4eb26:	call   27da0 <g_str_equal@plt+0x1aae0>
   4eb2b:	mov    rsi,QWORD PTR [rsp]
   4eb2f:	test   rsi,rsi
   4eb32:	je     4eb60 <g_str_equal@plt+0x418a0>
   4eb34:	mov    rdi,r13
   4eb37:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4eb3c:	mov    rax,QWORD PTR [rsp+0x8]
   4eb41:	xor    rax,QWORD PTR fs:0x28
   4eb4a:	jne    4ebbd <g_str_equal@plt+0x418fd>
   4eb4c:	add    rsp,0x18
   4eb50:	pop    rbx
   4eb51:	pop    rbp
   4eb52:	pop    r12
   4eb54:	pop    r13
   4eb56:	ret    
   4eb57:	nop    WORD PTR [rax+rax*1+0x0]
   4eb60:	mov    rsi,QWORD PTR [rbx]
   4eb63:	test   rsi,rsi
   4eb66:	je     4eb7a <g_str_equal@plt+0x418ba>
   4eb68:	mov    rdx,r12
   4eb6b:	mov    rdi,rbp
   4eb6e:	call   4e6e0 <g_str_equal@plt+0x41420>
   4eb73:	cmp    QWORD PTR [rsp],0x0
   4eb78:	je     4ebb0 <g_str_equal@plt+0x418f0>
   4eb7a:	mov    rsi,rbx
   4eb7d:	mov    rdi,rbp
   4eb80:	call   28000 <g_str_equal@plt+0x1ad40>
   4eb85:	mov    rsi,QWORD PTR [rsp]
   4eb89:	test   rsi,rsi
   4eb8c:	je     4eb34 <g_str_equal@plt+0x41874>
   4eb8e:	mov    rdi,rbp
   4eb91:	call   28770 <g_str_equal@plt+0x1b4b0>
   4eb96:	test   al,al
   4eb98:	je     4eba9 <g_str_equal@plt+0x418e9>
   4eb9a:	mov    rdi,QWORD PTR [rbx]
   4eb9d:	call   45970 <g_str_equal@plt+0x386b0>
   4eba2:	mov    QWORD PTR [rbx],0x0
   4eba9:	mov    rsi,QWORD PTR [rsp]
   4ebad:	jmp    4eb34 <g_str_equal@plt+0x41874>
   4ebaf:	nop
   4ebb0:	mov    rsi,r12
   4ebb3:	mov    rdi,rbp
   4ebb6:	call   27f50 <g_str_equal@plt+0x1ac90>
   4ebbb:	jmp    4eb7a <g_str_equal@plt+0x418ba>
   4ebbd:	call   cd30 <__stack_chk_fail@plt>
   4ebc2:	nop    DWORD PTR [rax+0x0]
   4ebc6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4ebd0:	push   r13
   4ebd2:	push   r12
   4ebd4:	mov    r13,rdx
   4ebd7:	push   rbp
   4ebd8:	push   rbx
   4ebd9:	mov    rdx,rsi
   4ebdc:	mov    rbx,rsi
   4ebdf:	lea    rsi,[rip+0x1694e]        # 65534 <_fini@@Base+0x12de0>
   4ebe6:	mov    rbp,rdi
   4ebe9:	sub    rsp,0x28
   4ebed:	lea    r12,[rsp+0x10]
   4ebf2:	mov    QWORD PTR [rsp+0x10],0x0
   4ebfb:	mov    rax,QWORD PTR fs:0x28
   4ec04:	mov    QWORD PTR [rsp+0x18],rax
   4ec09:	xor    eax,eax
   4ec0b:	mov    rcx,r12
   4ec0e:	call   28780 <g_str_equal@plt+0x1b4c0>
   4ec13:	mov    rsi,QWORD PTR [rsp+0x10]
   4ec18:	test   rsi,rsi
   4ec1b:	je     4ec48 <g_str_equal@plt+0x41988>
   4ec1d:	mov    rdi,r13
   4ec20:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4ec25:	mov    rax,QWORD PTR [rsp+0x18]
   4ec2a:	xor    rax,QWORD PTR fs:0x28
   4ec33:	jne    4ed41 <g_str_equal@plt+0x41a81>
   4ec39:	add    rsp,0x28
   4ec3d:	pop    rbx
   4ec3e:	pop    rbp
   4ec3f:	pop    r12
   4ec41:	pop    r13
   4ec43:	ret    
   4ec44:	nop    DWORD PTR [rax+0x0]
   4ec48:	lea    rsi,[rip+0x16dc3]        # 65a12 <_fini@@Base+0x132be>
   4ec4f:	lea    rdx,[rbx+0x8]
   4ec53:	mov    rcx,r12
   4ec56:	mov    rdi,rbp
   4ec59:	call   29120 <g_str_equal@plt+0x1be60>
   4ec5e:	mov    rsi,QWORD PTR [rsp+0x10]
   4ec63:	test   rsi,rsi
   4ec66:	jne    4ec1d <g_str_equal@plt+0x4195d>
   4ec68:	lea    rsi,[rip+0x16dab]        # 65a1a <_fini@@Base+0x132c6>
   4ec6f:	lea    rdx,[rbx+0x9]
   4ec73:	mov    rcx,r12
   4ec76:	mov    rdi,rbp
   4ec79:	call   29120 <g_str_equal@plt+0x1be60>
   4ec7e:	mov    rsi,QWORD PTR [rsp+0x10]
   4ec83:	test   rsi,rsi
   4ec86:	jne    4ec1d <g_str_equal@plt+0x4195d>
   4ec88:	lea    rsi,[rip+0x16d92]        # 65a21 <_fini@@Base+0x132cd>
   4ec8f:	lea    rdx,[rbx+0x10]
   4ec93:	mov    rcx,r12
   4ec96:	mov    rdi,rbp
   4ec99:	call   29210 <g_str_equal@plt+0x1bf50>
   4ec9e:	mov    rsi,QWORD PTR [rsp+0x10]
   4eca3:	test   rsi,rsi
   4eca6:	jne    4ec1d <g_str_equal@plt+0x4195d>
   4ecac:	lea    rsi,[rip+0x16d77]        # 65a2a <_fini@@Base+0x132d6>
   4ecb3:	lea    rdx,[rbx+0x18]
   4ecb7:	mov    rcx,r12
   4ecba:	mov    rdi,rbp
   4ecbd:	call   28780 <g_str_equal@plt+0x1b4c0>
   4ecc2:	mov    rsi,QWORD PTR [rsp+0x10]
   4ecc7:	test   rsi,rsi
   4ecca:	jne    4ec1d <g_str_equal@plt+0x4195d>
   4ecd0:	lea    rdx,[rbx+0x20]
   4ecd4:	lea    rsi,[rip+0x16b6f]        # 6584a <_fini@@Base+0x130f6>
   4ecdb:	mov    rdi,rbp
   4ecde:	call   286a0 <g_str_equal@plt+0x1b3e0>
   4ece3:	test   al,al
   4ece5:	je     4ed0b <g_str_equal@plt+0x41a4b>
   4ece7:	lea    rsi,[rip+0x16b5c]        # 6584a <_fini@@Base+0x130f6>
   4ecee:	lea    rdx,[rbx+0x28]
   4ecf2:	mov    rcx,r12
   4ecf5:	mov    rdi,rbp
   4ecf8:	call   4eaf0 <g_str_equal@plt+0x41830>
   4ecfd:	mov    rsi,QWORD PTR [rsp+0x10]
   4ed02:	test   rsi,rsi
   4ed05:	jne    4ec1d <g_str_equal@plt+0x4195d>
   4ed0b:	mov    eax,DWORD PTR [rbx+0x30]
   4ed0e:	lea    rsi,[rip+0x16be4]        # 658f9 <_fini@@Base+0x131a5>
   4ed15:	lea    rdx,[rsp+0xc]
   4ed1a:	lea    rcx,[rip+0x23236f]        # 281090 <_fini@@Base+0x22e93c>
   4ed21:	mov    r8,r12
   4ed24:	mov    rdi,rbp
   4ed27:	mov    DWORD PTR [rsp+0xc],eax
   4ed2b:	call   296a0 <g_str_equal@plt+0x1c3e0>
   4ed30:	mov    eax,DWORD PTR [rsp+0xc]
   4ed34:	mov    rsi,QWORD PTR [rsp+0x10]
   4ed39:	mov    DWORD PTR [rbx+0x30],eax
   4ed3c:	jmp    4ec1d <g_str_equal@plt+0x4195d>
   4ed41:	call   cd30 <__stack_chk_fail@plt>
   4ed46:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4ed50:	push   r13
   4ed52:	push   r12
   4ed54:	mov    r12,rdi
   4ed57:	push   rbp
   4ed58:	push   rbx
   4ed59:	mov    rbp,rdx
   4ed5c:	mov    rbx,rsi
   4ed5f:	sub    rsp,0x18
   4ed63:	mov    r13,rsp
   4ed66:	mov    QWORD PTR [rsp],0x0
   4ed6e:	mov    rdx,r13
   4ed71:	mov    rax,QWORD PTR fs:0x28
   4ed7a:	mov    QWORD PTR [rsp+0x8],rax
   4ed7f:	xor    eax,eax
   4ed81:	call   4ebd0 <g_str_equal@plt+0x41910>
   4ed86:	mov    rsi,QWORD PTR [rsp]
   4ed8a:	test   rsi,rsi
   4ed8d:	jne    4edc8 <g_str_equal@plt+0x41b08>
   4ed8f:	cmp    DWORD PTR [rbx+0x30],0x7
   4ed93:	ja     4ee8d <g_str_equal@plt+0x41bcd>
   4ed99:	mov    eax,DWORD PTR [rbx+0x30]
   4ed9c:	lea    rdx,[rip+0x16d01]        # 65aa4 <_fini@@Base+0x13350>
   4eda3:	movsxd rax,DWORD PTR [rdx+rax*4]
   4eda7:	add    rax,rdx
   4edaa:	jmp    rax
   4edac:	nop    DWORD PTR [rax+0x0]
   4edb0:	lea    rsi,[rbx+0x38]
   4edb4:	mov    rdx,r13
   4edb7:	mov    rdi,r12
   4edba:	call   46fe0 <g_str_equal@plt+0x39d20>
   4edbf:	mov    rsi,QWORD PTR [rsp]
   4edc3:	nop    DWORD PTR [rax+rax*1+0x0]
   4edc8:	mov    rdi,rbp
   4edcb:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4edd0:	mov    rax,QWORD PTR [rsp+0x8]
   4edd5:	xor    rax,QWORD PTR fs:0x28
   4edde:	jne    4ee88 <g_str_equal@plt+0x41bc8>
   4ede4:	add    rsp,0x18
   4ede8:	pop    rbx
   4ede9:	pop    rbp
   4edea:	pop    r12
   4edec:	pop    r13
   4edee:	ret    
   4edef:	nop
   4edf0:	lea    rsi,[rbx+0x38]
   4edf4:	mov    rdx,r13
   4edf7:	mov    rdi,r12
   4edfa:	call   47660 <g_str_equal@plt+0x3a3a0>
   4edff:	mov    rsi,QWORD PTR [rsp]
   4ee03:	jmp    4edc8 <g_str_equal@plt+0x41b08>
   4ee05:	nop    DWORD PTR [rax]
   4ee08:	lea    rsi,[rbx+0x38]
   4ee0c:	mov    rdx,r13
   4ee0f:	mov    rdi,r12
   4ee12:	call   47120 <g_str_equal@plt+0x39e60>
   4ee17:	mov    rsi,QWORD PTR [rsp]
   4ee1b:	jmp    4edc8 <g_str_equal@plt+0x41b08>
   4ee1d:	nop    DWORD PTR [rax]
   4ee20:	lea    rsi,[rbx+0x38]
   4ee24:	mov    rdx,r13
   4ee27:	mov    rdi,r12
   4ee2a:	call   472a0 <g_str_equal@plt+0x39fe0>
   4ee2f:	mov    rsi,QWORD PTR [rsp]
   4ee33:	jmp    4edc8 <g_str_equal@plt+0x41b08>
   4ee35:	nop    DWORD PTR [rax]
   4ee38:	lea    rsi,[rbx+0x38]
   4ee3c:	mov    rdx,r13
   4ee3f:	mov    rdi,r12
   4ee42:	call   473e0 <g_str_equal@plt+0x3a120>
   4ee47:	mov    rsi,QWORD PTR [rsp]
   4ee4b:	jmp    4edc8 <g_str_equal@plt+0x41b08>
   4ee50:	lea    rsi,[rbx+0x38]
   4ee54:	mov    rdx,r13
   4ee57:	mov    rdi,r12
   4ee5a:	call   47520 <g_str_equal@plt+0x3a260>
   4ee5f:	mov    rsi,QWORD PTR [rsp]
   4ee63:	jmp    4edc8 <g_str_equal@plt+0x41b08>
   4ee68:	nop    DWORD PTR [rax+rax*1+0x0]
   4ee70:	lea    rsi,[rbx+0x38]
   4ee74:	mov    rdx,r13
   4ee77:	mov    rdi,r12
   4ee7a:	call   47800 <g_str_equal@plt+0x3a540>
   4ee7f:	mov    rsi,QWORD PTR [rsp]
   4ee83:	jmp    4edc8 <g_str_equal@plt+0x41b08>
   4ee88:	call   cd30 <__stack_chk_fail@plt>
   4ee8d:	call   c270 <abort@plt>
   4ee92:	nop    DWORD PTR [rax+0x0]
   4ee96:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4eea0:	push   r13
   4eea2:	push   r12
   4eea4:	mov    r13,rcx
   4eea7:	push   rbp
   4eea8:	push   rbx
   4eea9:	mov    ecx,0x48
   4eeae:	mov    rbp,rdi
   4eeb1:	mov    rbx,rdx
   4eeb4:	sub    rsp,0x18
   4eeb8:	mov    r12,rsp
   4eebb:	mov    QWORD PTR [rsp],0x0
   4eec3:	mov    r8,r12
   4eec6:	mov    rax,QWORD PTR fs:0x28
   4eecf:	mov    QWORD PTR [rsp+0x8],rax
   4eed4:	xor    eax,eax
   4eed6:	call   27da0 <g_str_equal@plt+0x1aae0>
   4eedb:	mov    rsi,QWORD PTR [rsp]
   4eedf:	test   rsi,rsi
   4eee2:	je     4ef10 <g_str_equal@plt+0x41c50>
   4eee4:	mov    rdi,r13
   4eee7:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4eeec:	mov    rax,QWORD PTR [rsp+0x8]
   4eef1:	xor    rax,QWORD PTR fs:0x28
   4eefa:	jne    4ef6d <g_str_equal@plt+0x41cad>
   4eefc:	add    rsp,0x18
   4ef00:	pop    rbx
   4ef01:	pop    rbp
   4ef02:	pop    r12
   4ef04:	pop    r13
   4ef06:	ret    
   4ef07:	nop    WORD PTR [rax+rax*1+0x0]
   4ef10:	mov    rsi,QWORD PTR [rbx]
   4ef13:	test   rsi,rsi
   4ef16:	je     4ef2a <g_str_equal@plt+0x41c6a>
   4ef18:	mov    rdx,r12
   4ef1b:	mov    rdi,rbp
   4ef1e:	call   4ed50 <g_str_equal@plt+0x41a90>
   4ef23:	cmp    QWORD PTR [rsp],0x0
   4ef28:	je     4ef60 <g_str_equal@plt+0x41ca0>
   4ef2a:	mov    rsi,rbx
   4ef2d:	mov    rdi,rbp
   4ef30:	call   28000 <g_str_equal@plt+0x1ad40>
   4ef35:	mov    rsi,QWORD PTR [rsp]
   4ef39:	test   rsi,rsi
   4ef3c:	je     4eee4 <g_str_equal@plt+0x41c24>
   4ef3e:	mov    rdi,rbp
   4ef41:	call   28770 <g_str_equal@plt+0x1b4b0>
   4ef46:	test   al,al
   4ef48:	je     4ef59 <g_str_equal@plt+0x41c99>
   4ef4a:	mov    rdi,QWORD PTR [rbx]
   4ef4d:	call   44870 <g_str_equal@plt+0x375b0>
   4ef52:	mov    QWORD PTR [rbx],0x0
   4ef59:	mov    rsi,QWORD PTR [rsp]
   4ef5d:	jmp    4eee4 <g_str_equal@plt+0x41c24>
   4ef5f:	nop
   4ef60:	mov    rsi,r12
   4ef63:	mov    rdi,rbp
   4ef66:	call   27f50 <g_str_equal@plt+0x1ac90>
   4ef6b:	jmp    4ef2a <g_str_equal@plt+0x41c6a>
   4ef6d:	call   cd30 <__stack_chk_fail@plt>
   4ef72:	nop    DWORD PTR [rax+0x0]
   4ef76:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4ef80:	push   r14
   4ef82:	push   r13
   4ef84:	mov    r14,rcx
   4ef87:	push   r12
   4ef89:	push   rbp
   4ef8a:	mov    ecx,0x10
   4ef8f:	push   rbx
   4ef90:	mov    rbp,rdi
   4ef93:	mov    r13,rdx
   4ef96:	sub    rsp,0x10
   4ef9a:	mov    r12,rsp
   4ef9d:	mov    QWORD PTR [rsp],0x0
   4efa5:	mov    r8,r12
   4efa8:	mov    rax,QWORD PTR fs:0x28
   4efb1:	mov    QWORD PTR [rsp+0x8],rax
   4efb6:	xor    eax,eax
   4efb8:	call   280a0 <g_str_equal@plt+0x1ade0>
   4efbd:	mov    rsi,QWORD PTR [rsp]
   4efc1:	test   rsi,rsi
   4efc4:	je     4eff0 <g_str_equal@plt+0x41d30>
   4efc6:	mov    rdi,r14
   4efc9:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4efce:	mov    rax,QWORD PTR [rsp+0x8]
   4efd3:	xor    rax,QWORD PTR fs:0x28
   4efdc:	jne    4f084 <g_str_equal@plt+0x41dc4>
   4efe2:	add    rsp,0x10
   4efe6:	pop    rbx
   4efe7:	pop    rbp
   4efe8:	pop    r12
   4efea:	pop    r13
   4efec:	pop    r14
   4efee:	ret    
   4efef:	nop
   4eff0:	mov    rbx,QWORD PTR [r13+0x0]
   4eff4:	test   rbx,rbx
   4eff7:	jne    4f018 <g_str_equal@plt+0x41d58>
   4eff9:	jmp    4f077 <g_str_equal@plt+0x41db7>
   4effb:	nop    DWORD PTR [rax+rax*1+0x0]
   4f000:	mov    rsi,rbx
   4f003:	mov    edx,0x10
   4f008:	mov    rdi,rbp
   4f00b:	call   281f0 <g_str_equal@plt+0x1af30>
   4f010:	test   rax,rax
   4f013:	mov    rbx,rax
   4f016:	je     4f070 <g_str_equal@plt+0x41db0>
   4f018:	lea    rdx,[rbx+0x8]
   4f01c:	xor    esi,esi
   4f01e:	mov    rcx,r12
   4f021:	mov    rdi,rbp
   4f024:	call   4eea0 <g_str_equal@plt+0x41be0>
   4f029:	cmp    QWORD PTR [rsp],0x0
   4f02e:	je     4f000 <g_str_equal@plt+0x41d40>
   4f030:	mov    rsi,r13
   4f033:	mov    rdi,rbp
   4f036:	call   28390 <g_str_equal@plt+0x1b0d0>
   4f03b:	mov    rsi,QWORD PTR [rsp]
   4f03f:	test   rsi,rsi
   4f042:	je     4efc6 <g_str_equal@plt+0x41d06>
   4f044:	mov    rdi,rbp
   4f047:	call   28770 <g_str_equal@plt+0x1b4b0>
   4f04c:	test   al,al
   4f04e:	je     4f061 <g_str_equal@plt+0x41da1>
   4f050:	mov    rdi,QWORD PTR [r13+0x0]
   4f054:	call   44a70 <g_str_equal@plt+0x377b0>
   4f059:	mov    QWORD PTR [r13+0x0],0x0
   4f061:	mov    rsi,QWORD PTR [rsp]
   4f065:	jmp    4efc6 <g_str_equal@plt+0x41d06>
   4f06a:	nop    WORD PTR [rax+rax*1+0x0]
   4f070:	cmp    QWORD PTR [rsp],0x0
   4f075:	jne    4f030 <g_str_equal@plt+0x41d70>
   4f077:	mov    rsi,r12
   4f07a:	mov    rdi,rbp
   4f07d:	call   282e0 <g_str_equal@plt+0x1b020>
   4f082:	jmp    4f030 <g_str_equal@plt+0x41d70>
   4f084:	call   cd30 <__stack_chk_fail@plt>
   4f089:	nop    DWORD PTR [rax+0x0]
   4f090:	push   r13
   4f092:	push   r12
   4f094:	mov    r13,rdx
   4f097:	push   rbp
   4f098:	push   rbx
   4f099:	mov    rdx,rsi
   4f09c:	mov    rbx,rsi
   4f09f:	lea    rsi,[rip+0x1672f]        # 657d5 <_fini@@Base+0x13081>
   4f0a6:	mov    rbp,rdi
   4f0a9:	sub    rsp,0x28
   4f0ad:	lea    r12,[rsp+0x10]
   4f0b2:	mov    QWORD PTR [rsp+0x10],0x0
   4f0bb:	mov    rax,QWORD PTR fs:0x28
   4f0c4:	mov    QWORD PTR [rsp+0x18],rax
   4f0c9:	xor    eax,eax
   4f0cb:	mov    rcx,r12
   4f0ce:	call   28780 <g_str_equal@plt+0x1b4c0>
   4f0d3:	mov    rsi,QWORD PTR [rsp+0x10]
   4f0d8:	test   rsi,rsi
   4f0db:	je     4f108 <g_str_equal@plt+0x41e48>
   4f0dd:	mov    rdi,r13
   4f0e0:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4f0e5:	mov    rax,QWORD PTR [rsp+0x18]
   4f0ea:	xor    rax,QWORD PTR fs:0x28
   4f0f3:	jne    4f1dd <g_str_equal@plt+0x41f1d>
   4f0f9:	add    rsp,0x28
   4f0fd:	pop    rbx
   4f0fe:	pop    rbp
   4f0ff:	pop    r12
   4f101:	pop    r13
   4f103:	ret    
   4f104:	nop    DWORD PTR [rax+0x0]
   4f108:	lea    rsi,[rip+0x16925]        # 65a34 <_fini@@Base+0x132e0>
   4f10f:	lea    rdx,[rbx+0x8]
   4f113:	mov    rcx,r12
   4f116:	mov    rdi,rbp
   4f119:	call   29210 <g_str_equal@plt+0x1bf50>
   4f11e:	mov    rsi,QWORD PTR [rsp+0x10]
   4f123:	test   rsi,rsi
   4f126:	jne    4f0dd <g_str_equal@plt+0x41e1d>
   4f128:	lea    rsi,[rip+0x165ab]        # 656da <_fini@@Base+0x12f86>
   4f12f:	lea    rdx,[rbx+0x10]
   4f133:	mov    rcx,r12
   4f136:	mov    rdi,rbp
   4f139:	call   28780 <g_str_equal@plt+0x1b4c0>
   4f13e:	mov    rsi,QWORD PTR [rsp+0x10]
   4f143:	test   rsi,rsi
   4f146:	jne    4f0dd <g_str_equal@plt+0x41e1d>
   4f148:	lea    rdx,[rbx+0x18]
   4f14c:	lea    rsi,[rip+0x166f7]        # 6584a <_fini@@Base+0x130f6>
   4f153:	mov    rdi,rbp
   4f156:	call   286a0 <g_str_equal@plt+0x1b3e0>
   4f15b:	test   al,al
   4f15d:	je     4f183 <g_str_equal@plt+0x41ec3>
   4f15f:	lea    rsi,[rip+0x166e4]        # 6584a <_fini@@Base+0x130f6>
   4f166:	lea    rdx,[rbx+0x20]
   4f16a:	mov    rcx,r12
   4f16d:	mov    rdi,rbp
   4f170:	call   4eaf0 <g_str_equal@plt+0x41830>
   4f175:	mov    rsi,QWORD PTR [rsp+0x10]
   4f17a:	test   rsi,rsi
   4f17d:	jne    4f0dd <g_str_equal@plt+0x41e1d>
   4f183:	mov    eax,DWORD PTR [rbx+0x28]
   4f186:	lea    rsi,[rip+0x1676c]        # 658f9 <_fini@@Base+0x131a5>
   4f18d:	lea    rdx,[rsp+0xc]
   4f192:	lea    rcx,[rip+0x231ef7]        # 281090 <_fini@@Base+0x22e93c>
   4f199:	mov    r8,r12
   4f19c:	mov    rdi,rbp
   4f19f:	mov    DWORD PTR [rsp+0xc],eax
   4f1a3:	call   296a0 <g_str_equal@plt+0x1c3e0>
   4f1a8:	mov    rsi,QWORD PTR [rsp+0x10]
   4f1ad:	mov    eax,DWORD PTR [rsp+0xc]
   4f1b1:	test   rsi,rsi
   4f1b4:	mov    DWORD PTR [rbx+0x28],eax
   4f1b7:	jne    4f0dd <g_str_equal@plt+0x41e1d>
   4f1bd:	lea    rsi,[rip+0x1663d]        # 65801 <_fini@@Base+0x130ad>
   4f1c4:	lea    rdx,[rbx+0x2c]
   4f1c8:	mov    rcx,r12
   4f1cb:	mov    rdi,rbp
   4f1ce:	call   45fc0 <g_str_equal@plt+0x38d00>
   4f1d3:	mov    rsi,QWORD PTR [rsp+0x10]
   4f1d8:	jmp    4f0dd <g_str_equal@plt+0x41e1d>
   4f1dd:	call   cd30 <__stack_chk_fail@plt>
   4f1e2:	nop    DWORD PTR [rax+0x0]
   4f1e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4f1f0:	push   r13
   4f1f2:	push   r12
   4f1f4:	mov    r13,rdx
   4f1f7:	push   rbp
   4f1f8:	push   rbx
   4f1f9:	mov    rbp,rdi
   4f1fc:	mov    rbx,rsi
   4f1ff:	sub    rsp,0x18
   4f203:	mov    r12,rsp
   4f206:	mov    QWORD PTR [rsp],0x0
   4f20e:	mov    rdx,r12
   4f211:	mov    rax,QWORD PTR fs:0x28
   4f21a:	mov    QWORD PTR [rsp+0x8],rax
   4f21f:	xor    eax,eax
   4f221:	call   4f090 <g_str_equal@plt+0x41dd0>
   4f226:	mov    rsi,QWORD PTR [rsp]
   4f22a:	test   rsi,rsi
   4f22d:	jne    4f260 <g_str_equal@plt+0x41fa0>
   4f22f:	mov    ecx,DWORD PTR [rbx+0x2c]
   4f232:	cmp    ecx,0x1f
   4f235:	ja     4f288 <g_str_equal@plt+0x41fc8>
   4f237:	mov    eax,0x1
   4f23c:	shl    rax,cl
   4f23f:	test   eax,0xffbfffff
   4f244:	jne    4f260 <g_str_equal@plt+0x41fa0>
   4f246:	test   eax,0x400000
   4f24b:	je     4f288 <g_str_equal@plt+0x41fc8>
   4f24d:	lea    rsi,[rbx+0x30]
   4f251:	mov    rdx,r12
   4f254:	mov    rdi,rbp
   4f257:	call   47800 <g_str_equal@plt+0x3a540>
   4f25c:	mov    rsi,QWORD PTR [rsp]
   4f260:	mov    rdi,r13
   4f263:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4f268:	mov    rax,QWORD PTR [rsp+0x8]
   4f26d:	xor    rax,QWORD PTR fs:0x28
   4f276:	jne    4f283 <g_str_equal@plt+0x41fc3>
   4f278:	add    rsp,0x18
   4f27c:	pop    rbx
   4f27d:	pop    rbp
   4f27e:	pop    r12
   4f280:	pop    r13
   4f282:	ret    
   4f283:	call   cd30 <__stack_chk_fail@plt>
   4f288:	call   c270 <abort@plt>
   4f28d:	nop    DWORD PTR [rax]
   4f290:	push   r13
   4f292:	push   r12
   4f294:	mov    r13,rcx
   4f297:	push   rbp
   4f298:	push   rbx
   4f299:	mov    ecx,0x38
   4f29e:	mov    rbp,rdi
   4f2a1:	mov    rbx,rdx
   4f2a4:	sub    rsp,0x18
   4f2a8:	mov    r12,rsp
   4f2ab:	mov    QWORD PTR [rsp],0x0
   4f2b3:	mov    r8,r12
   4f2b6:	mov    rax,QWORD PTR fs:0x28
   4f2bf:	mov    QWORD PTR [rsp+0x8],rax
   4f2c4:	xor    eax,eax
   4f2c6:	call   27da0 <g_str_equal@plt+0x1aae0>
   4f2cb:	mov    rsi,QWORD PTR [rsp]
   4f2cf:	test   rsi,rsi
   4f2d2:	je     4f300 <g_str_equal@plt+0x42040>
   4f2d4:	mov    rdi,r13
   4f2d7:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4f2dc:	mov    rax,QWORD PTR [rsp+0x8]
   4f2e1:	xor    rax,QWORD PTR fs:0x28
   4f2ea:	jne    4f35d <g_str_equal@plt+0x4209d>
   4f2ec:	add    rsp,0x18
   4f2f0:	pop    rbx
   4f2f1:	pop    rbp
   4f2f2:	pop    r12
   4f2f4:	pop    r13
   4f2f6:	ret    
   4f2f7:	nop    WORD PTR [rax+rax*1+0x0]
   4f300:	mov    rsi,QWORD PTR [rbx]
   4f303:	test   rsi,rsi
   4f306:	je     4f31a <g_str_equal@plt+0x4205a>
   4f308:	mov    rdx,r12
   4f30b:	mov    rdi,rbp
   4f30e:	call   4f1f0 <g_str_equal@plt+0x41f30>
   4f313:	cmp    QWORD PTR [rsp],0x0
   4f318:	je     4f350 <g_str_equal@plt+0x42090>
   4f31a:	mov    rsi,rbx
   4f31d:	mov    rdi,rbp
   4f320:	call   28000 <g_str_equal@plt+0x1ad40>
   4f325:	mov    rsi,QWORD PTR [rsp]
   4f329:	test   rsi,rsi
   4f32c:	je     4f2d4 <g_str_equal@plt+0x42014>
   4f32e:	mov    rdi,rbp
   4f331:	call   28770 <g_str_equal@plt+0x1b4b0>
   4f336:	test   al,al
   4f338:	je     4f349 <g_str_equal@plt+0x42089>
   4f33a:	mov    rdi,QWORD PTR [rbx]
   4f33d:	call   44ab0 <g_str_equal@plt+0x377f0>
   4f342:	mov    QWORD PTR [rbx],0x0
   4f349:	mov    rsi,QWORD PTR [rsp]
   4f34d:	jmp    4f2d4 <g_str_equal@plt+0x42014>
   4f34f:	nop
   4f350:	mov    rsi,r12
   4f353:	mov    rdi,rbp
   4f356:	call   27f50 <g_str_equal@plt+0x1ac90>
   4f35b:	jmp    4f31a <g_str_equal@plt+0x4205a>
   4f35d:	call   cd30 <__stack_chk_fail@plt>
   4f362:	nop    DWORD PTR [rax+0x0]
   4f366:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4f370:	push   r14
   4f372:	push   r13
   4f374:	mov    r14,rcx
   4f377:	push   r12
   4f379:	push   rbp
   4f37a:	mov    ecx,0x10
   4f37f:	push   rbx
   4f380:	mov    rbp,rdi
   4f383:	mov    r13,rdx
   4f386:	sub    rsp,0x10
   4f38a:	mov    r12,rsp
   4f38d:	mov    QWORD PTR [rsp],0x0
   4f395:	mov    r8,r12
   4f398:	mov    rax,QWORD PTR fs:0x28
   4f3a1:	mov    QWORD PTR [rsp+0x8],rax
   4f3a6:	xor    eax,eax
   4f3a8:	call   280a0 <g_str_equal@plt+0x1ade0>
   4f3ad:	mov    rsi,QWORD PTR [rsp]
   4f3b1:	test   rsi,rsi
   4f3b4:	je     4f3e0 <g_str_equal@plt+0x42120>
   4f3b6:	mov    rdi,r14
   4f3b9:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4f3be:	mov    rax,QWORD PTR [rsp+0x8]
   4f3c3:	xor    rax,QWORD PTR fs:0x28
   4f3cc:	jne    4f474 <g_str_equal@plt+0x421b4>
   4f3d2:	add    rsp,0x10
   4f3d6:	pop    rbx
   4f3d7:	pop    rbp
   4f3d8:	pop    r12
   4f3da:	pop    r13
   4f3dc:	pop    r14
   4f3de:	ret    
   4f3df:	nop
   4f3e0:	mov    rbx,QWORD PTR [r13+0x0]
   4f3e4:	test   rbx,rbx
   4f3e7:	jne    4f408 <g_str_equal@plt+0x42148>
   4f3e9:	jmp    4f467 <g_str_equal@plt+0x421a7>
   4f3eb:	nop    DWORD PTR [rax+rax*1+0x0]
   4f3f0:	mov    rsi,rbx
   4f3f3:	mov    edx,0x10
   4f3f8:	mov    rdi,rbp
   4f3fb:	call   281f0 <g_str_equal@plt+0x1af30>
   4f400:	test   rax,rax
   4f403:	mov    rbx,rax
   4f406:	je     4f460 <g_str_equal@plt+0x421a0>
   4f408:	lea    rdx,[rbx+0x8]
   4f40c:	xor    esi,esi
   4f40e:	mov    rcx,r12
   4f411:	mov    rdi,rbp
   4f414:	call   4f290 <g_str_equal@plt+0x41fd0>
   4f419:	cmp    QWORD PTR [rsp],0x0
   4f41e:	je     4f3f0 <g_str_equal@plt+0x42130>
   4f420:	mov    rsi,r13
   4f423:	mov    rdi,rbp
   4f426:	call   28390 <g_str_equal@plt+0x1b0d0>
   4f42b:	mov    rsi,QWORD PTR [rsp]
   4f42f:	test   rsi,rsi
   4f432:	je     4f3b6 <g_str_equal@plt+0x420f6>
   4f434:	mov    rdi,rbp
   4f437:	call   28770 <g_str_equal@plt+0x1b4b0>
   4f43c:	test   al,al
   4f43e:	je     4f451 <g_str_equal@plt+0x42191>
   4f440:	mov    rdi,QWORD PTR [r13+0x0]
   4f444:	call   44af0 <g_str_equal@plt+0x37830>
   4f449:	mov    QWORD PTR [r13+0x0],0x0
   4f451:	mov    rsi,QWORD PTR [rsp]
   4f455:	jmp    4f3b6 <g_str_equal@plt+0x420f6>
   4f45a:	nop    WORD PTR [rax+rax*1+0x0]
   4f460:	cmp    QWORD PTR [rsp],0x0
   4f465:	jne    4f420 <g_str_equal@plt+0x42160>
   4f467:	mov    rsi,r12
   4f46a:	mov    rdi,rbp
   4f46d:	call   282e0 <g_str_equal@plt+0x1b020>
   4f472:	jmp    4f420 <g_str_equal@plt+0x42160>
   4f474:	call   cd30 <__stack_chk_fail@plt>
   4f479:	nop    DWORD PTR [rax+0x0]
   4f480:	push   r13
   4f482:	push   r12
   4f484:	mov    r13,rdx
   4f487:	push   rbp
   4f488:	push   rbx
   4f489:	mov    rdx,rsi
   4f48c:	mov    rbx,rsi
   4f48f:	lea    rsi,[rip+0xe92a]        # 5ddc0 <_fini@@Base+0xb66c>
   4f496:	mov    rbp,rdi
   4f499:	sub    rsp,0x18
   4f49d:	mov    r12,rsp
   4f4a0:	mov    QWORD PTR [rsp],0x0
   4f4a8:	mov    rcx,r12
   4f4ab:	mov    rax,QWORD PTR fs:0x28
   4f4b4:	mov    QWORD PTR [rsp+0x8],rax
   4f4b9:	xor    eax,eax
   4f4bb:	call   29210 <g_str_equal@plt+0x1bf50>
   4f4c0:	mov    rsi,QWORD PTR [rsp]
   4f4c4:	test   rsi,rsi
   4f4c7:	je     4f4f0 <g_str_equal@plt+0x42230>
   4f4c9:	mov    rdi,r13
   4f4cc:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4f4d1:	mov    rax,QWORD PTR [rsp+0x8]
   4f4d6:	xor    rax,QWORD PTR fs:0x28
   4f4df:	jne    4f564 <g_str_equal@plt+0x422a4>
   4f4e5:	add    rsp,0x18
   4f4e9:	pop    rbx
   4f4ea:	pop    rbp
   4f4eb:	pop    r12
   4f4ed:	pop    r13
   4f4ef:	ret    
   4f4f0:	lea    rsi,[rip+0x16546]        # 65a3d <_fini@@Base+0x132e9>
   4f4f7:	lea    rdx,[rbx+0x8]
   4f4fb:	mov    rcx,r12
   4f4fe:	mov    rdi,rbp
   4f501:	call   28780 <g_str_equal@plt+0x1b4c0>
   4f506:	mov    rsi,QWORD PTR [rsp]
   4f50a:	test   rsi,rsi
   4f50d:	jne    4f4c9 <g_str_equal@plt+0x42209>
   4f50f:	lea    rsi,[rip+0x16334]        # 6584a <_fini@@Base+0x130f6>
   4f516:	lea    rdx,[rbx+0x10]
   4f51a:	mov    rcx,r12
   4f51d:	mov    rdi,rbp
   4f520:	call   4eaf0 <g_str_equal@plt+0x41830>
   4f525:	mov    rsi,QWORD PTR [rsp]
   4f529:	test   rsi,rsi
   4f52c:	jne    4f4c9 <g_str_equal@plt+0x42209>
   4f52e:	lea    rdx,[rbx+0x18]
   4f532:	lea    rsi,[rip+0x164fb]        # 65a34 <_fini@@Base+0x132e0>
   4f539:	mov    rdi,rbp
   4f53c:	call   286a0 <g_str_equal@plt+0x1b3e0>
   4f541:	test   al,al
   4f543:	je     4f55b <g_str_equal@plt+0x4229b>
   4f545:	lea    rdx,[rbx+0x20]
   4f549:	lea    rsi,[rip+0x164e4]        # 65a34 <_fini@@Base+0x132e0>
   4f550:	mov    rcx,r12
   4f553:	mov    rdi,rbp
   4f556:	call   29210 <g_str_equal@plt+0x1bf50>
   4f55b:	mov    rsi,QWORD PTR [rsp]
   4f55f:	jmp    4f4c9 <g_str_equal@plt+0x42209>
   4f564:	call   cd30 <__stack_chk_fail@plt>
   4f569:	nop    DWORD PTR [rax+0x0]
   4f570:	push   r13
   4f572:	push   r12
   4f574:	mov    r13,rcx
   4f577:	push   rbp
   4f578:	push   rbx
   4f579:	mov    ecx,0x28
   4f57e:	mov    rbp,rdi
   4f581:	mov    rbx,rdx
   4f584:	sub    rsp,0x18
   4f588:	mov    r12,rsp
   4f58b:	mov    QWORD PTR [rsp],0x0
   4f593:	mov    r8,r12
   4f596:	mov    rax,QWORD PTR fs:0x28
   4f59f:	mov    QWORD PTR [rsp+0x8],rax
   4f5a4:	xor    eax,eax
   4f5a6:	call   27da0 <g_str_equal@plt+0x1aae0>
   4f5ab:	mov    rsi,QWORD PTR [rsp]
   4f5af:	test   rsi,rsi
   4f5b2:	je     4f5e0 <g_str_equal@plt+0x42320>
   4f5b4:	mov    rdi,r13
   4f5b7:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4f5bc:	mov    rax,QWORD PTR [rsp+0x8]
   4f5c1:	xor    rax,QWORD PTR fs:0x28
   4f5ca:	jne    4f63d <g_str_equal@plt+0x4237d>
   4f5cc:	add    rsp,0x18
   4f5d0:	pop    rbx
   4f5d1:	pop    rbp
   4f5d2:	pop    r12
   4f5d4:	pop    r13
   4f5d6:	ret    
   4f5d7:	nop    WORD PTR [rax+rax*1+0x0]
   4f5e0:	mov    rsi,QWORD PTR [rbx]
   4f5e3:	test   rsi,rsi
   4f5e6:	je     4f5fa <g_str_equal@plt+0x4233a>
   4f5e8:	mov    rdx,r12
   4f5eb:	mov    rdi,rbp
   4f5ee:	call   4f480 <g_str_equal@plt+0x421c0>
   4f5f3:	cmp    QWORD PTR [rsp],0x0
   4f5f8:	je     4f630 <g_str_equal@plt+0x42370>
   4f5fa:	mov    rsi,rbx
   4f5fd:	mov    rdi,rbp
   4f600:	call   28000 <g_str_equal@plt+0x1ad40>
   4f605:	mov    rsi,QWORD PTR [rsp]
   4f609:	test   rsi,rsi
   4f60c:	je     4f5b4 <g_str_equal@plt+0x422f4>
   4f60e:	mov    rdi,rbp
   4f611:	call   28770 <g_str_equal@plt+0x1b4b0>
   4f616:	test   al,al
   4f618:	je     4f629 <g_str_equal@plt+0x42369>
   4f61a:	mov    rdi,QWORD PTR [rbx]
   4f61d:	call   459b0 <g_str_equal@plt+0x386f0>
   4f622:	mov    QWORD PTR [rbx],0x0
   4f629:	mov    rsi,QWORD PTR [rsp]
   4f62d:	jmp    4f5b4 <g_str_equal@plt+0x422f4>
   4f62f:	nop
   4f630:	mov    rsi,r12
   4f633:	mov    rdi,rbp
   4f636:	call   27f50 <g_str_equal@plt+0x1ac90>
   4f63b:	jmp    4f5fa <g_str_equal@plt+0x4233a>
   4f63d:	call   cd30 <__stack_chk_fail@plt>
   4f642:	nop    DWORD PTR [rax+0x0]
   4f646:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4f650:	push   r14
   4f652:	push   r13
   4f654:	mov    r14,rcx
   4f657:	push   r12
   4f659:	push   rbp
   4f65a:	mov    ecx,0x10
   4f65f:	push   rbx
   4f660:	mov    rbp,rdi
   4f663:	mov    r13,rdx
   4f666:	sub    rsp,0x10
   4f66a:	mov    r12,rsp
   4f66d:	mov    QWORD PTR [rsp],0x0
   4f675:	mov    r8,r12
   4f678:	mov    rax,QWORD PTR fs:0x28
   4f681:	mov    QWORD PTR [rsp+0x8],rax
   4f686:	xor    eax,eax
   4f688:	call   280a0 <g_str_equal@plt+0x1ade0>
   4f68d:	mov    rsi,QWORD PTR [rsp]
   4f691:	test   rsi,rsi
   4f694:	je     4f6c0 <g_str_equal@plt+0x42400>
   4f696:	mov    rdi,r14
   4f699:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4f69e:	mov    rax,QWORD PTR [rsp+0x8]
   4f6a3:	xor    rax,QWORD PTR fs:0x28
   4f6ac:	jne    4f754 <g_str_equal@plt+0x42494>
   4f6b2:	add    rsp,0x10
   4f6b6:	pop    rbx
   4f6b7:	pop    rbp
   4f6b8:	pop    r12
   4f6ba:	pop    r13
   4f6bc:	pop    r14
   4f6be:	ret    
   4f6bf:	nop
   4f6c0:	mov    rbx,QWORD PTR [r13+0x0]
   4f6c4:	test   rbx,rbx
   4f6c7:	jne    4f6e8 <g_str_equal@plt+0x42428>
   4f6c9:	jmp    4f747 <g_str_equal@plt+0x42487>
   4f6cb:	nop    DWORD PTR [rax+rax*1+0x0]
   4f6d0:	mov    rsi,rbx
   4f6d3:	mov    edx,0x10
   4f6d8:	mov    rdi,rbp
   4f6db:	call   281f0 <g_str_equal@plt+0x1af30>
   4f6e0:	test   rax,rax
   4f6e3:	mov    rbx,rax
   4f6e6:	je     4f740 <g_str_equal@plt+0x42480>
   4f6e8:	lea    rdx,[rbx+0x8]
   4f6ec:	xor    esi,esi
   4f6ee:	mov    rcx,r12
   4f6f1:	mov    rdi,rbp
   4f6f4:	call   4f570 <g_str_equal@plt+0x422b0>
   4f6f9:	cmp    QWORD PTR [rsp],0x0
   4f6fe:	je     4f6d0 <g_str_equal@plt+0x42410>
   4f700:	mov    rsi,r13
   4f703:	mov    rdi,rbp
   4f706:	call   28390 <g_str_equal@plt+0x1b0d0>
   4f70b:	mov    rsi,QWORD PTR [rsp]
   4f70f:	test   rsi,rsi
   4f712:	je     4f696 <g_str_equal@plt+0x423d6>
   4f714:	mov    rdi,rbp
   4f717:	call   28770 <g_str_equal@plt+0x1b4b0>
   4f71c:	test   al,al
   4f71e:	je     4f731 <g_str_equal@plt+0x42471>
   4f720:	mov    rdi,QWORD PTR [r13+0x0]
   4f724:	call   459f0 <g_str_equal@plt+0x38730>
   4f729:	mov    QWORD PTR [r13+0x0],0x0
   4f731:	mov    rsi,QWORD PTR [rsp]
   4f735:	jmp    4f696 <g_str_equal@plt+0x423d6>
   4f73a:	nop    WORD PTR [rax+rax*1+0x0]
   4f740:	cmp    QWORD PTR [rsp],0x0
   4f745:	jne    4f700 <g_str_equal@plt+0x42440>
   4f747:	mov    rsi,r12
   4f74a:	mov    rdi,rbp
   4f74d:	call   282e0 <g_str_equal@plt+0x1b020>
   4f752:	jmp    4f700 <g_str_equal@plt+0x42440>
   4f754:	call   cd30 <__stack_chk_fail@plt>
   4f759:	nop    DWORD PTR [rax+0x0]
   4f760:	push   rbx
   4f761:	mov    rbx,rdx
   4f764:	mov    rdx,rsi
   4f767:	lea    rsi,[rip+0x162db]        # 65a49 <_fini@@Base+0x132f5>
   4f76e:	sub    rsp,0x10
   4f772:	mov    rcx,rsp
   4f775:	mov    QWORD PTR [rsp],0x0
   4f77d:	mov    rax,QWORD PTR fs:0x28
   4f786:	mov    QWORD PTR [rsp+0x8],rax
   4f78b:	xor    eax,eax
   4f78d:	call   29210 <g_str_equal@plt+0x1bf50>
   4f792:	mov    rsi,QWORD PTR [rsp]
   4f796:	mov    rdi,rbx
   4f799:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4f79e:	mov    rax,QWORD PTR [rsp+0x8]
   4f7a3:	xor    rax,QWORD PTR fs:0x28
   4f7ac:	jne    4f7b4 <g_str_equal@plt+0x424f4>
   4f7ae:	add    rsp,0x10
   4f7b2:	pop    rbx
   4f7b3:	ret    
   4f7b4:	call   cd30 <__stack_chk_fail@plt>
   4f7b9:	nop    DWORD PTR [rax+0x0]
   4f7c0:	push   r13
   4f7c2:	push   r12
   4f7c4:	mov    r13,rcx
   4f7c7:	push   rbp
   4f7c8:	push   rbx
   4f7c9:	mov    ecx,0x8
   4f7ce:	mov    rbp,rdi
   4f7d1:	mov    rbx,rdx
   4f7d4:	sub    rsp,0x18
   4f7d8:	mov    r12,rsp
   4f7db:	mov    QWORD PTR [rsp],0x0
   4f7e3:	mov    r8,r12
   4f7e6:	mov    rax,QWORD PTR fs:0x28
   4f7ef:	mov    QWORD PTR [rsp+0x8],rax
   4f7f4:	xor    eax,eax
   4f7f6:	call   27da0 <g_str_equal@plt+0x1aae0>
   4f7fb:	mov    rsi,QWORD PTR [rsp]
   4f7ff:	test   rsi,rsi
   4f802:	je     4f830 <g_str_equal@plt+0x42570>
   4f804:	mov    rdi,r13
   4f807:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4f80c:	mov    rax,QWORD PTR [rsp+0x8]
   4f811:	xor    rax,QWORD PTR fs:0x28
   4f81a:	jne    4f88d <g_str_equal@plt+0x425cd>
   4f81c:	add    rsp,0x18
   4f820:	pop    rbx
   4f821:	pop    rbp
   4f822:	pop    r12
   4f824:	pop    r13
   4f826:	ret    
   4f827:	nop    WORD PTR [rax+rax*1+0x0]
   4f830:	mov    rsi,QWORD PTR [rbx]
   4f833:	test   rsi,rsi
   4f836:	je     4f84a <g_str_equal@plt+0x4258a>
   4f838:	mov    rdx,r12
   4f83b:	mov    rdi,rbp
   4f83e:	call   4f760 <g_str_equal@plt+0x424a0>
   4f843:	cmp    QWORD PTR [rsp],0x0
   4f848:	je     4f880 <g_str_equal@plt+0x425c0>
   4f84a:	mov    rsi,rbx
   4f84d:	mov    rdi,rbp
   4f850:	call   28000 <g_str_equal@plt+0x1ad40>
   4f855:	mov    rsi,QWORD PTR [rsp]
   4f859:	test   rsi,rsi
   4f85c:	je     4f804 <g_str_equal@plt+0x42544>
   4f85e:	mov    rdi,rbp
   4f861:	call   28770 <g_str_equal@plt+0x1b4b0>
   4f866:	test   al,al
   4f868:	je     4f879 <g_str_equal@plt+0x425b9>
   4f86a:	mov    rdi,QWORD PTR [rbx]
   4f86d:	call   45a30 <g_str_equal@plt+0x38770>
   4f872:	mov    QWORD PTR [rbx],0x0
   4f879:	mov    rsi,QWORD PTR [rsp]
   4f87d:	jmp    4f804 <g_str_equal@plt+0x42544>
   4f87f:	nop
   4f880:	mov    rsi,r12
   4f883:	mov    rdi,rbp
   4f886:	call   27f50 <g_str_equal@plt+0x1ac90>
   4f88b:	jmp    4f84a <g_str_equal@plt+0x4258a>
   4f88d:	call   cd30 <__stack_chk_fail@plt>
   4f892:	nop    DWORD PTR [rax+0x0]
   4f896:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4f8a0:	push   rbx
   4f8a1:	mov    r8,rcx
   4f8a4:	mov    rbx,rdx
   4f8a7:	lea    rcx,[rip+0x2314f2]        # 280da0 <_fini@@Base+0x22e64c>
   4f8ae:	sub    rsp,0x10
   4f8b2:	mov    rax,QWORD PTR fs:0x28
   4f8bb:	mov    QWORD PTR [rsp+0x8],rax
   4f8c0:	xor    eax,eax
   4f8c2:	mov    eax,DWORD PTR [rdx]
   4f8c4:	lea    rdx,[rsp+0x4]
   4f8c9:	mov    DWORD PTR [rsp+0x4],eax
   4f8cd:	call   296a0 <g_str_equal@plt+0x1c3e0>
   4f8d2:	mov    eax,DWORD PTR [rsp+0x4]
   4f8d6:	mov    DWORD PTR [rbx],eax
   4f8d8:	mov    rax,QWORD PTR [rsp+0x8]
   4f8dd:	xor    rax,QWORD PTR fs:0x28
   4f8e6:	jne    4f8ee <g_str_equal@plt+0x4262e>
   4f8e8:	add    rsp,0x10
   4f8ec:	pop    rbx
   4f8ed:	ret    
   4f8ee:	call   cd30 <__stack_chk_fail@plt>
   4f8f3:	nop    DWORD PTR [rax]
   4f8f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4f900:	push   r13
   4f902:	push   r12
   4f904:	mov    r13,rdx
   4f907:	push   rbp
   4f908:	push   rbx
   4f909:	mov    rdx,rsi
   4f90c:	mov    rbx,rsi
   4f90f:	lea    rsi,[rip+0x10fb9]        # 608cf <_fini@@Base+0xe17b>
   4f916:	mov    rbp,rdi
   4f919:	sub    rsp,0x28
   4f91d:	lea    r12,[rsp+0x10]
   4f922:	mov    QWORD PTR [rsp+0x10],0x0
   4f92b:	mov    rax,QWORD PTR fs:0x28
   4f934:	mov    QWORD PTR [rsp+0x18],rax
   4f939:	xor    eax,eax
   4f93b:	mov    rcx,r12
   4f93e:	call   29120 <g_str_equal@plt+0x1be60>
   4f943:	mov    rsi,QWORD PTR [rsp+0x10]
   4f948:	test   rsi,rsi
   4f94b:	je     4f978 <g_str_equal@plt+0x426b8>
   4f94d:	mov    rdi,r13
   4f950:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4f955:	mov    rax,QWORD PTR [rsp+0x18]
   4f95a:	xor    rax,QWORD PTR fs:0x28
   4f963:	jne    4fa5a <g_str_equal@plt+0x4279a>
   4f969:	add    rsp,0x28
   4f96d:	pop    rbx
   4f96e:	pop    rbp
   4f96f:	pop    r12
   4f971:	pop    r13
   4f973:	ret    
   4f974:	nop    DWORD PTR [rax+0x0]
   4f978:	lea    rsi,[rip+0x160cf]        # 65a4e <_fini@@Base+0x132fa>
   4f97f:	lea    rdx,[rbx+0x1]
   4f983:	mov    rcx,r12
   4f986:	mov    rdi,rbp
   4f989:	call   28870 <g_str_equal@plt+0x1b5b0>
   4f98e:	mov    rsi,QWORD PTR [rsp+0x10]
   4f993:	test   rsi,rsi
   4f996:	jne    4f94d <g_str_equal@plt+0x4268d>
   4f998:	lea    rsi,[rip+0x160b9]        # 65a58 <_fini@@Base+0x13304>
   4f99f:	lea    rdx,[rbx+0x2]
   4f9a3:	mov    rcx,r12
   4f9a6:	mov    rdi,rbp
   4f9a9:	call   28870 <g_str_equal@plt+0x1b5b0>
   4f9ae:	mov    rsi,QWORD PTR [rsp+0x10]
   4f9b3:	test   rsi,rsi
   4f9b6:	jne    4f94d <g_str_equal@plt+0x4268d>
   4f9b8:	lea    rsi,[rip+0x160a3]        # 65a62 <_fini@@Base+0x1330e>
   4f9bf:	lea    rdx,[rbx+0x3]
   4f9c3:	mov    rcx,r12
   4f9c6:	mov    rdi,rbp
   4f9c9:	call   28870 <g_str_equal@plt+0x1b5b0>
   4f9ce:	mov    rsi,QWORD PTR [rsp+0x10]
   4f9d3:	test   rsi,rsi
   4f9d6:	jne    4f94d <g_str_equal@plt+0x4268d>
   4f9dc:	lea    rsi,[rip+0x15fd3]        # 659b6 <_fini@@Base+0x13262>
   4f9e3:	lea    rdx,[rbx+0x4]
   4f9e7:	mov    rcx,r12
   4f9ea:	mov    rdi,rbp
   4f9ed:	call   28a50 <g_str_equal@plt+0x1b790>
   4f9f2:	mov    rsi,QWORD PTR [rsp+0x10]
   4f9f7:	test   rsi,rsi
   4f9fa:	jne    4f94d <g_str_equal@plt+0x4268d>
   4fa00:	mov    eax,DWORD PTR [rbx+0x8]
   4fa03:	lea    rsi,[rip+0x15cca]        # 656d4 <_fini@@Base+0x12f80>
   4fa0a:	lea    rdx,[rsp+0xc]
   4fa0f:	lea    rcx,[rip+0x23138a]        # 280da0 <_fini@@Base+0x22e64c>
   4fa16:	mov    r8,r12
   4fa19:	mov    rdi,rbp
   4fa1c:	mov    DWORD PTR [rsp+0xc],eax
   4fa20:	call   296a0 <g_str_equal@plt+0x1c3e0>
   4fa25:	mov    rsi,QWORD PTR [rsp+0x10]
   4fa2a:	mov    eax,DWORD PTR [rsp+0xc]
   4fa2e:	test   rsi,rsi
   4fa31:	mov    DWORD PTR [rbx+0x8],eax
   4fa34:	jne    4f94d <g_str_equal@plt+0x4268d>
   4fa3a:	lea    rsi,[rip+0x1602a]        # 65a6b <_fini@@Base+0x13317>
   4fa41:	lea    rdx,[rbx+0xc]
   4fa45:	mov    rcx,r12
   4fa48:	mov    rdi,rbp
   4fa4b:	call   28a50 <g_str_equal@plt+0x1b790>
   4fa50:	mov    rsi,QWORD PTR [rsp+0x10]
   4fa55:	jmp    4f94d <g_str_equal@plt+0x4268d>
   4fa5a:	call   cd30 <__stack_chk_fail@plt>
   4fa5f:	nop
   4fa60:	push   r13
   4fa62:	push   r12
   4fa64:	mov    r13,rcx
   4fa67:	push   rbp
   4fa68:	push   rbx
   4fa69:	mov    ecx,0x10
   4fa6e:	mov    rbp,rdi
   4fa71:	mov    rbx,rdx
   4fa74:	sub    rsp,0x18
   4fa78:	mov    r12,rsp
   4fa7b:	mov    QWORD PTR [rsp],0x0
   4fa83:	mov    r8,r12
   4fa86:	mov    rax,QWORD PTR fs:0x28
   4fa8f:	mov    QWORD PTR [rsp+0x8],rax
   4fa94:	xor    eax,eax
   4fa96:	call   27da0 <g_str_equal@plt+0x1aae0>
   4fa9b:	mov    rsi,QWORD PTR [rsp]
   4fa9f:	test   rsi,rsi
   4faa2:	je     4fad0 <g_str_equal@plt+0x42810>
   4faa4:	mov    rdi,r13
   4faa7:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4faac:	mov    rax,QWORD PTR [rsp+0x8]
   4fab1:	xor    rax,QWORD PTR fs:0x28
   4faba:	jne    4fb2d <g_str_equal@plt+0x4286d>
   4fabc:	add    rsp,0x18
   4fac0:	pop    rbx
   4fac1:	pop    rbp
   4fac2:	pop    r12
   4fac4:	pop    r13
   4fac6:	ret    
   4fac7:	nop    WORD PTR [rax+rax*1+0x0]
   4fad0:	mov    rsi,QWORD PTR [rbx]
   4fad3:	test   rsi,rsi
   4fad6:	je     4faea <g_str_equal@plt+0x4282a>
   4fad8:	mov    rdx,r12
   4fadb:	mov    rdi,rbp
   4fade:	call   4f900 <g_str_equal@plt+0x42640>
   4fae3:	cmp    QWORD PTR [rsp],0x0
   4fae8:	je     4fb20 <g_str_equal@plt+0x42860>
   4faea:	mov    rsi,rbx
   4faed:	mov    rdi,rbp
   4faf0:	call   28000 <g_str_equal@plt+0x1ad40>
   4faf5:	mov    rsi,QWORD PTR [rsp]
   4faf9:	test   rsi,rsi
   4fafc:	je     4faa4 <g_str_equal@plt+0x427e4>
   4fafe:	mov    rdi,rbp
   4fb01:	call   28770 <g_str_equal@plt+0x1b4b0>
   4fb06:	test   al,al
   4fb08:	je     4fb19 <g_str_equal@plt+0x42859>
   4fb0a:	mov    rdi,QWORD PTR [rbx]
   4fb0d:	call   45a70 <g_str_equal@plt+0x387b0>
   4fb12:	mov    QWORD PTR [rbx],0x0
   4fb19:	mov    rsi,QWORD PTR [rsp]
   4fb1d:	jmp    4faa4 <g_str_equal@plt+0x427e4>
   4fb1f:	nop
   4fb20:	mov    rsi,r12
   4fb23:	mov    rdi,rbp
   4fb26:	call   27f50 <g_str_equal@plt+0x1ac90>
   4fb2b:	jmp    4faea <g_str_equal@plt+0x4282a>
   4fb2d:	call   cd30 <__stack_chk_fail@plt>
   4fb32:	nop    DWORD PTR [rax+0x0]
   4fb36:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4fb40:	push   rbx
   4fb41:	mov    rbx,rdx
   4fb44:	mov    rdx,rsi
   4fb47:	lea    rsi,[rip+0x9ad5]        # 59623 <_fini@@Base+0x6ecf>
   4fb4e:	sub    rsp,0x10
   4fb52:	mov    rcx,rsp
   4fb55:	mov    QWORD PTR [rsp],0x0
   4fb5d:	mov    rax,QWORD PTR fs:0x28
   4fb66:	mov    QWORD PTR [rsp+0x8],rax
   4fb6b:	xor    eax,eax
   4fb6d:	call   29210 <g_str_equal@plt+0x1bf50>
   4fb72:	mov    rsi,QWORD PTR [rsp]
   4fb76:	mov    rdi,rbx
   4fb79:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4fb7e:	mov    rax,QWORD PTR [rsp+0x8]
   4fb83:	xor    rax,QWORD PTR fs:0x28
   4fb8c:	jne    4fb94 <g_str_equal@plt+0x428d4>
   4fb8e:	add    rsp,0x10
   4fb92:	pop    rbx
   4fb93:	ret    
   4fb94:	call   cd30 <__stack_chk_fail@plt>
   4fb99:	nop    DWORD PTR [rax+0x0]
   4fba0:	push   r13
   4fba2:	push   r12
   4fba4:	mov    r13,rcx
   4fba7:	push   rbp
   4fba8:	push   rbx
   4fba9:	mov    ecx,0x8
   4fbae:	mov    rbp,rdi
   4fbb1:	mov    rbx,rdx
   4fbb4:	sub    rsp,0x18
   4fbb8:	mov    r12,rsp
   4fbbb:	mov    QWORD PTR [rsp],0x0
   4fbc3:	mov    r8,r12
   4fbc6:	mov    rax,QWORD PTR fs:0x28
   4fbcf:	mov    QWORD PTR [rsp+0x8],rax
   4fbd4:	xor    eax,eax
   4fbd6:	call   27da0 <g_str_equal@plt+0x1aae0>
   4fbdb:	mov    rsi,QWORD PTR [rsp]
   4fbdf:	test   rsi,rsi
   4fbe2:	je     4fc10 <g_str_equal@plt+0x42950>
   4fbe4:	mov    rdi,r13
   4fbe7:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4fbec:	mov    rax,QWORD PTR [rsp+0x8]
   4fbf1:	xor    rax,QWORD PTR fs:0x28
   4fbfa:	jne    4fc6d <g_str_equal@plt+0x429ad>
   4fbfc:	add    rsp,0x18
   4fc00:	pop    rbx
   4fc01:	pop    rbp
   4fc02:	pop    r12
   4fc04:	pop    r13
   4fc06:	ret    
   4fc07:	nop    WORD PTR [rax+rax*1+0x0]
   4fc10:	mov    rsi,QWORD PTR [rbx]
   4fc13:	test   rsi,rsi
   4fc16:	je     4fc2a <g_str_equal@plt+0x4296a>
   4fc18:	mov    rdx,r12
   4fc1b:	mov    rdi,rbp
   4fc1e:	call   4fb40 <g_str_equal@plt+0x42880>
   4fc23:	cmp    QWORD PTR [rsp],0x0
   4fc28:	je     4fc60 <g_str_equal@plt+0x429a0>
   4fc2a:	mov    rsi,rbx
   4fc2d:	mov    rdi,rbp
   4fc30:	call   28000 <g_str_equal@plt+0x1ad40>
   4fc35:	mov    rsi,QWORD PTR [rsp]
   4fc39:	test   rsi,rsi
   4fc3c:	je     4fbe4 <g_str_equal@plt+0x42924>
   4fc3e:	mov    rdi,rbp
   4fc41:	call   28770 <g_str_equal@plt+0x1b4b0>
   4fc46:	test   al,al
   4fc48:	je     4fc59 <g_str_equal@plt+0x42999>
   4fc4a:	mov    rdi,QWORD PTR [rbx]
   4fc4d:	call   45ab0 <g_str_equal@plt+0x387f0>
   4fc52:	mov    QWORD PTR [rbx],0x0
   4fc59:	mov    rsi,QWORD PTR [rsp]
   4fc5d:	jmp    4fbe4 <g_str_equal@plt+0x42924>
   4fc5f:	nop
   4fc60:	mov    rsi,r12
   4fc63:	mov    rdi,rbp
   4fc66:	call   27f50 <g_str_equal@plt+0x1ac90>
   4fc6b:	jmp    4fc2a <g_str_equal@plt+0x4296a>
   4fc6d:	call   cd30 <__stack_chk_fail@plt>
   4fc72:	nop    DWORD PTR [rax+0x0]
   4fc76:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4fc80:	push   r13
   4fc82:	push   r12
   4fc84:	mov    r13,rdx
   4fc87:	push   rbp
   4fc88:	push   rbx
   4fc89:	mov    rdx,rsi
   4fc8c:	mov    rbx,rsi
   4fc8f:	lea    rsi,[rip+0x15ddc]        # 65a72 <_fini@@Base+0x1331e>
   4fc96:	mov    rbp,rdi
   4fc99:	sub    rsp,0x18
   4fc9d:	mov    r12,rsp
   4fca0:	mov    QWORD PTR [rsp],0x0
   4fca8:	mov    rcx,r12
   4fcab:	mov    rax,QWORD PTR fs:0x28
   4fcb4:	mov    QWORD PTR [rsp+0x8],rax
   4fcb9:	xor    eax,eax
   4fcbb:	call   29210 <g_str_equal@plt+0x1bf50>
   4fcc0:	mov    rsi,QWORD PTR [rsp]
   4fcc4:	test   rsi,rsi
   4fcc7:	je     4fcf0 <g_str_equal@plt+0x42a30>
   4fcc9:	mov    rdi,r13
   4fccc:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4fcd1:	mov    rax,QWORD PTR [rsp+0x8]
   4fcd6:	xor    rax,QWORD PTR fs:0x28
   4fcdf:	jne    4fd4d <g_str_equal@plt+0x42a8d>
   4fce1:	add    rsp,0x18
   4fce5:	pop    rbx
   4fce6:	pop    rbp
   4fce7:	pop    r12
   4fce9:	pop    r13
   4fceb:	ret    
   4fcec:	nop    DWORD PTR [rax+0x0]
   4fcf0:	lea    rsi,[rip+0x15d7f]        # 65a76 <_fini@@Base+0x13322>
   4fcf7:	lea    rdx,[rbx+0x8]
   4fcfb:	mov    rcx,r12
   4fcfe:	mov    rdi,rbp
   4fd01:	call   29210 <g_str_equal@plt+0x1bf50>
   4fd06:	mov    rsi,QWORD PTR [rsp]
   4fd0a:	test   rsi,rsi
   4fd0d:	jne    4fcc9 <g_str_equal@plt+0x42a09>
   4fd0f:	lea    rsi,[rip+0x15d6b]        # 65a81 <_fini@@Base+0x1332d>
   4fd16:	lea    rdx,[rbx+0x10]
   4fd1a:	mov    rcx,r12
   4fd1d:	mov    rdi,rbp
   4fd20:	call   28780 <g_str_equal@plt+0x1b4c0>
   4fd25:	mov    rsi,QWORD PTR [rsp]
   4fd29:	test   rsi,rsi
   4fd2c:	jne    4fcc9 <g_str_equal@plt+0x42a09>
   4fd2e:	lea    rsi,[rip+0x15d54]        # 65a89 <_fini@@Base+0x13335>
   4fd35:	lea    rdx,[rbx+0x18]
   4fd39:	mov    rcx,r12
   4fd3c:	mov    rdi,rbp
   4fd3f:	call   28780 <g_str_equal@plt+0x1b4c0>
   4fd44:	mov    rsi,QWORD PTR [rsp]
   4fd48:	jmp    4fcc9 <g_str_equal@plt+0x42a09>
   4fd4d:	call   cd30 <__stack_chk_fail@plt>
   4fd52:	nop    DWORD PTR [rax+0x0]
   4fd56:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4fd60:	push   r13
   4fd62:	push   r12
   4fd64:	mov    r13,rcx
   4fd67:	push   rbp
   4fd68:	push   rbx
   4fd69:	mov    ecx,0x20
   4fd6e:	mov    rbp,rdi
   4fd71:	mov    rbx,rdx
   4fd74:	sub    rsp,0x18
   4fd78:	mov    r12,rsp
   4fd7b:	mov    QWORD PTR [rsp],0x0
   4fd83:	mov    r8,r12
   4fd86:	mov    rax,QWORD PTR fs:0x28
   4fd8f:	mov    QWORD PTR [rsp+0x8],rax
   4fd94:	xor    eax,eax
   4fd96:	call   27da0 <g_str_equal@plt+0x1aae0>
   4fd9b:	mov    rsi,QWORD PTR [rsp]
   4fd9f:	test   rsi,rsi
   4fda2:	je     4fdd0 <g_str_equal@plt+0x42b10>
   4fda4:	mov    rdi,r13
   4fda7:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4fdac:	mov    rax,QWORD PTR [rsp+0x8]
   4fdb1:	xor    rax,QWORD PTR fs:0x28
   4fdba:	jne    4fe2d <g_str_equal@plt+0x42b6d>
   4fdbc:	add    rsp,0x18
   4fdc0:	pop    rbx
   4fdc1:	pop    rbp
   4fdc2:	pop    r12
   4fdc4:	pop    r13
   4fdc6:	ret    
   4fdc7:	nop    WORD PTR [rax+rax*1+0x0]
   4fdd0:	mov    rsi,QWORD PTR [rbx]
   4fdd3:	test   rsi,rsi
   4fdd6:	je     4fdea <g_str_equal@plt+0x42b2a>
   4fdd8:	mov    rdx,r12
   4fddb:	mov    rdi,rbp
   4fdde:	call   4fc80 <g_str_equal@plt+0x429c0>
   4fde3:	cmp    QWORD PTR [rsp],0x0
   4fde8:	je     4fe20 <g_str_equal@plt+0x42b60>
   4fdea:	mov    rsi,rbx
   4fded:	mov    rdi,rbp
   4fdf0:	call   28000 <g_str_equal@plt+0x1ad40>
   4fdf5:	mov    rsi,QWORD PTR [rsp]
   4fdf9:	test   rsi,rsi
   4fdfc:	je     4fda4 <g_str_equal@plt+0x42ae4>
   4fdfe:	mov    rdi,rbp
   4fe01:	call   28770 <g_str_equal@plt+0x1b4b0>
   4fe06:	test   al,al
   4fe08:	je     4fe19 <g_str_equal@plt+0x42b59>
   4fe0a:	mov    rdi,QWORD PTR [rbx]
   4fe0d:	call   45af0 <g_str_equal@plt+0x38830>
   4fe12:	mov    QWORD PTR [rbx],0x0
   4fe19:	mov    rsi,QWORD PTR [rsp]
   4fe1d:	jmp    4fda4 <g_str_equal@plt+0x42ae4>
   4fe1f:	nop
   4fe20:	mov    rsi,r12
   4fe23:	mov    rdi,rbp
   4fe26:	call   27f50 <g_str_equal@plt+0x1ac90>
   4fe2b:	jmp    4fdea <g_str_equal@plt+0x42b2a>
   4fe2d:	call   cd30 <__stack_chk_fail@plt>
   4fe32:	nop    DWORD PTR [rax+0x0]
   4fe36:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4fe40:	push   rbx
   4fe41:	mov    r8,rcx
   4fe44:	mov    rbx,rdx
   4fe47:	lea    rcx,[rip+0x230f32]        # 280d80 <_fini@@Base+0x22e62c>
   4fe4e:	sub    rsp,0x10
   4fe52:	mov    rax,QWORD PTR fs:0x28
   4fe5b:	mov    QWORD PTR [rsp+0x8],rax
   4fe60:	xor    eax,eax
   4fe62:	mov    eax,DWORD PTR [rdx]
   4fe64:	lea    rdx,[rsp+0x4]
   4fe69:	mov    DWORD PTR [rsp+0x4],eax
   4fe6d:	call   296a0 <g_str_equal@plt+0x1c3e0>
   4fe72:	mov    eax,DWORD PTR [rsp+0x4]
   4fe76:	mov    DWORD PTR [rbx],eax
   4fe78:	mov    rax,QWORD PTR [rsp+0x8]
   4fe7d:	xor    rax,QWORD PTR fs:0x28
   4fe86:	jne    4fe8e <g_str_equal@plt+0x42bce>
   4fe88:	add    rsp,0x10
   4fe8c:	pop    rbx
   4fe8d:	ret    
   4fe8e:	call   cd30 <__stack_chk_fail@plt>
   4fe93:	nop    DWORD PTR [rax]
   4fe96:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4fea0:	push   r13
   4fea2:	push   r12
   4fea4:	mov    r13,rdx
   4fea7:	push   rbp
   4fea8:	push   rbx
   4fea9:	mov    rdx,rsi
   4feac:	mov    rbx,rsi
   4feaf:	lea    rsi,[rip+0x1582b]        # 656e1 <_fini@@Base+0x12f8d>
   4feb6:	mov    rbp,rdi
   4feb9:	sub    rsp,0x28
   4febd:	lea    r12,[rsp+0x10]
   4fec2:	mov    QWORD PTR [rsp+0x10],0x0
   4fecb:	mov    rax,QWORD PTR fs:0x28
   4fed4:	mov    QWORD PTR [rsp+0x18],rax
   4fed9:	xor    eax,eax
   4fedb:	mov    rcx,r12
   4fede:	call   29450 <g_str_equal@plt+0x1c190>
   4fee3:	mov    rsi,QWORD PTR [rsp+0x10]
   4fee8:	test   rsi,rsi
   4feeb:	je     4ff10 <g_str_equal@plt+0x42c50>
   4feed:	mov    rdi,r13
   4fef0:	call   3a4c0 <g_str_equal@plt+0x2d200>
   4fef5:	mov    rax,QWORD PTR [rsp+0x18]
   4fefa:	xor    rax,QWORD PTR fs:0x28
   4ff03:	jne    4ff43 <g_str_equal@plt+0x42c83>
   4ff05:	add    rsp,0x28
   4ff09:	pop    rbx
   4ff0a:	pop    rbp
   4ff0b:	pop    r12
   4ff0d:	pop    r13
   4ff0f:	ret    
   4ff10:	mov    eax,DWORD PTR [rbx+0x8]
   4ff13:	lea    rsi,[rip+0x15b81]        # 65a9b <_fini@@Base+0x13347>
   4ff1a:	lea    rdx,[rsp+0xc]
   4ff1f:	lea    rcx,[rip+0x230e5a]        # 280d80 <_fini@@Base+0x22e62c>
   4ff26:	mov    r8,r12
   4ff29:	mov    rdi,rbp
   4ff2c:	mov    DWORD PTR [rsp+0xc],eax
   4ff30:	call   296a0 <g_str_equal@plt+0x1c3e0>
   4ff35:	mov    eax,DWORD PTR [rsp+0xc]
   4ff39:	mov    rsi,QWORD PTR [rsp+0x10]
   4ff3e:	mov    DWORD PTR [rbx+0x8],eax
   4ff41:	jmp    4feed <g_str_equal@plt+0x42c2d>
   4ff43:	call   cd30 <__stack_chk_fail@plt>
   4ff48:	nop    DWORD PTR [rax+rax*1+0x0]
   4ff50:	push   r15
   4ff52:	push   r14
   4ff54:	mov    r14d,esi
   4ff57:	push   r13
   4ff59:	push   r12
   4ff5b:	push   rbp
   4ff5c:	push   rbx
   4ff5d:	mov    rbx,rdi
   4ff60:	sub    rsp,0x18
   4ff64:	cmp    sil,0xa
   4ff68:	mov    BYTE PTR [rsp+0x7],dl
   4ff6c:	je     500f0 <g_str_equal@plt+0x42e30>
   4ff72:	add    DWORD PTR [rdi+0x18],0x1
   4ff76:	movsxd rax,DWORD PTR [rbx+0x8]
   4ff7a:	lea    r13,[rip+0x15bdf]        # 65b60 <_fini@@Base+0x1340c>
   4ff81:	movzx  r12d,r14b
   4ff85:	cmp    eax,0x1e
   4ff88:	ja     50100 <g_str_equal@plt+0x42e40>
   4ff8e:	shl    rax,0x8
   4ff92:	add    rax,r13
   4ff95:	movzx  r10d,BYTE PTR [rax+r12*1]
   4ff9a:	movzx  ebp,BYTE PTR [rax]
   4ff9d:	cmp    r10b,bpl
   4ffa0:	mov    r15d,r10d
   4ffa3:	mov    r11d,r10d
   4ffa6:	je     50030 <g_str_equal@plt+0x42d70>
   4ffac:	mov    rdi,QWORD PTR [rbx+0x10]
   4ffb0:	mov    rax,QWORD PTR [rdi+0x8]
   4ffb4:	lea    rdx,[rax+0x1]
   4ffb8:	cmp    rdx,QWORD PTR [rdi+0x10]
   4ffbc:	jae    50090 <g_str_equal@plt+0x42dd0>
   4ffc2:	mov    rcx,QWORD PTR [rdi]
   4ffc5:	mov    QWORD PTR [rdi+0x8],rdx
   4ffc9:	cmp    r15b,0x6e
   4ffcd:	mov    BYTE PTR [rcx+rax*1],r14b
   4ffd1:	mov    rdx,QWORD PTR [rdi]
   4ffd4:	mov    rax,QWORD PTR [rdi+0x8]
   4ffd8:	mov    BYTE PTR [rdx+rax*1],0x0
   4ffdc:	ja     500be <g_str_equal@plt+0x42dfe>
   4ffe2:	cmp    r15b,0x64
   4ffe6:	jae    50060 <g_str_equal@plt+0x42da0>
   4ffe8:	test   r15b,r15b
   4ffeb:	jne    500c4 <g_str_equal@plt+0x42e04>
   4fff1:	mov    ecx,DWORD PTR [rbx+0x18]
   4fff4:	mov    rsi,QWORD PTR [rbx+0x10]
   4fff8:	mov    edx,0x70
   4fffd:	mov    r8d,DWORD PTR [rbx+0x1c]
   50001:	mov    rdi,rbx
   50004:	call   QWORD PTR [rbx]
   50006:	mov    rdi,QWORD PTR [rbx+0x10]
   5000a:	xor    esi,esi
   5000c:	call   cf10 <g_string_truncate@plt>
   50011:	mov    DWORD PTR [rbx+0x8],0x1d
   50018:	add    rsp,0x18
   5001c:	xor    eax,eax
   5001e:	pop    rbx
   5001f:	pop    rbp
   50020:	pop    r12
   50022:	pop    r13
   50024:	pop    r14
   50026:	pop    r15
   50028:	ret    
   50029:	nop    DWORD PTR [rax+0x0]
   50030:	cmp    r10b,0x6e
   50034:	ja     50088 <g_str_equal@plt+0x42dc8>
   50036:	cmp    r10b,0x64
   5003a:	jae    50060 <g_str_equal@plt+0x42da0>
   5003c:	test   r10b,r10b
   5003f:	je     4fff1 <g_str_equal@plt+0x42d31>
   50041:	movsxd rax,r10d
   50044:	cmp    r15b,bpl
   50047:	mov    DWORD PTR [rbx+0x8],eax
   5004a:	jne    50057 <g_str_equal@plt+0x42d97>
   5004c:	cmp    BYTE PTR [rsp+0x7],0x1
   50051:	jne    4ff85 <g_str_equal@plt+0x42cc5>
   50057:	mov    r11d,eax
   5005a:	jmp    500c8 <g_str_equal@plt+0x42e08>
   5005c:	nop    DWORD PTR [rax+0x0]
   50060:	mov    ecx,DWORD PTR [rbx+0x18]
   50063:	mov    rsi,QWORD PTR [rbx+0x10]
   50067:	mov    edx,r10d
   5006a:	mov    r8d,DWORD PTR [rbx+0x1c]
   5006e:	mov    rdi,rbx
   50071:	call   QWORD PTR [rbx]
   50073:	mov    rdi,QWORD PTR [rbx+0x10]
   50077:	xor    esi,esi
   50079:	call   cf10 <g_string_truncate@plt>
   5007e:	mov    eax,0x1d
   50083:	jmp    50044 <g_str_equal@plt+0x42d84>
   50085:	nop    DWORD PTR [rax]
   50088:	cmp    r10b,0x6f
   5008c:	jne    50041 <g_str_equal@plt+0x42d81>
   5008e:	jmp    50073 <g_str_equal@plt+0x42db3>
   50090:	movsx  edx,r14b
   50094:	mov    rsi,0xffffffffffffffff
   5009b:	mov    DWORD PTR [rsp+0xc],r10d
   500a0:	mov    DWORD PTR [rsp+0x8],r10d
   500a5:	call   ce20 <g_string_insert_c@plt>
   500aa:	cmp    r15b,0x6e
   500ae:	mov    r11d,DWORD PTR [rsp+0x8]
   500b3:	mov    r10d,DWORD PTR [rsp+0xc]
   500b8:	jbe    4ffe2 <g_str_equal@plt+0x42d22>
   500be:	cmp    r15b,0x6f
   500c2:	je     50073 <g_str_equal@plt+0x42db3>
   500c4:	mov    DWORD PTR [rbx+0x8],r10d
   500c8:	mov    rsi,QWORD PTR [rbx+0x10]
   500cc:	cmp    QWORD PTR [rsi+0x8],0x4000000
   500d4:	jbe    50018 <g_str_equal@plt+0x42d58>
   500da:	mov    ecx,DWORD PTR [rbx+0x18]
   500dd:	mov    r8d,DWORD PTR [rbx+0x1c]
   500e1:	mov    edx,r11d
   500e4:	jmp    50001 <g_str_equal@plt+0x42d41>
   500e9:	nop    DWORD PTR [rax+0x0]
   500f0:	mov    DWORD PTR [rdi+0x18],0x0
   500f7:	add    DWORD PTR [rdi+0x1c],0x1
   500fb:	jmp    4ff76 <g_str_equal@plt+0x42cb6>
   50100:	lea    rcx,[rip+0x15a39]        # 65b40 <_fini@@Base+0x133ec>
   50107:	lea    rsi,[rip+0x159ba]        # 65ac8 <_fini@@Base+0x13374>
   5010e:	lea    rdi,[rip+0x159f3]        # 65b08 <_fini@@Base+0x133b4>
   50115:	mov    edx,0x130
   5011a:	call   c390 <__assert_fail@plt>
   5011f:	nop
   50120:	push   rbx
   50121:	mov    rbx,rdi
   50124:	mov    QWORD PTR [rdi],rsi
   50127:	mov    DWORD PTR [rdi+0x8],0x1d
   5012e:	mov    edi,0x3
   50133:	call   c600 <g_string_sized_new@plt>
   50138:	mov    QWORD PTR [rbx+0x18],0x0
   50140:	mov    QWORD PTR [rbx+0x10],rax
   50144:	pop    rbx
   50145:	ret    
   50146:	nop    WORD PTR cs:[rax+rax*1+0x0]
   50150:	test   rdx,rdx
   50153:	je     501a0 <g_str_equal@plt+0x42ee0>
   50155:	push   r12
   50157:	mov    r12,rdi
   5015a:	push   rbp
   5015b:	lea    rbp,[rsi+rdx*1]
   5015f:	push   rbx
   50160:	mov    rbx,rsi
   50163:	jmp    50171 <g_str_equal@plt+0x42eb1>
   50165:	nop    DWORD PTR [rax]
   50168:	add    rbx,0x1
   5016c:	cmp    rbx,rbp
   5016f:	je     50190 <g_str_equal@plt+0x42ed0>
   50171:	movsx  esi,BYTE PTR [rbx]
   50174:	xor    edx,edx
   50176:	mov    rdi,r12
   50179:	call   4ff50 <g_str_equal@plt+0x42c90>
   5017e:	test   eax,eax
   50180:	jns    50168 <g_str_equal@plt+0x42ea8>
   50182:	pop    rbx
   50183:	pop    rbp
   50184:	pop    r12
   50186:	ret    
   50187:	nop    WORD PTR [rax+rax*1+0x0]
   50190:	pop    rbx
   50191:	xor    eax,eax
   50193:	pop    rbp
   50194:	pop    r12
   50196:	ret    
   50197:	nop    WORD PTR [rax+rax*1+0x0]
   501a0:	xor    eax,eax
   501a2:	ret    
   501a3:	nop    DWORD PTR [rax]
   501a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   501b0:	cmp    DWORD PTR [rdi+0x8],0x1d
   501b4:	je     501c8 <g_str_equal@plt+0x42f08>
   501b6:	mov    edx,0x1
   501bb:	xor    esi,esi
   501bd:	jmp    4ff50 <g_str_equal@plt+0x42c90>
   501c2:	nop    WORD PTR [rax+rax*1+0x0]
   501c8:	xor    eax,eax
   501ca:	ret    
   501cb:	nop    DWORD PTR [rax+rax*1+0x0]
   501d0:	mov    rdi,QWORD PTR [rdi+0x10]
   501d4:	mov    esi,0x1
   501d9:	jmp    c7a0 <g_string_free@plt>
   501de:	xchg   ax,ax
   501e0:	push   r13
   501e2:	push   r12
   501e4:	mov    r13,rsi
   501e7:	push   rbp
   501e8:	push   rbx
   501e9:	mov    r12,rdi
   501ec:	sub    rsp,0x8
   501f0:	call   2f0b0 <g_str_equal@plt+0x21df0>
   501f5:	test   rax,rax
   501f8:	je     50252 <g_str_equal@plt+0x42f92>
   501fa:	mov    rbx,rax
   501fd:	xor    ebp,ebp
   501ff:	nop
   50200:	mov    rdi,QWORD PTR [rbx]
   50203:	xor    edx,edx
   50205:	mov    rsi,r13
   50208:	call   32ab0 <g_str_equal@plt+0x257f0>
   5020d:	test   eax,eax
   5020f:	je     5021c <g_str_equal@plt+0x42f5c>
   50211:	cmp    ebp,0x7fffffff
   50217:	je     50240 <g_str_equal@plt+0x42f80>
   50219:	add    ebp,0x1
   5021c:	mov    rsi,rbx
   5021f:	mov    rdi,r12
   50222:	call   2f0e0 <g_str_equal@plt+0x21e20>
   50227:	test   rax,rax
   5022a:	mov    rbx,rax
   5022d:	jne    50200 <g_str_equal@plt+0x42f40>
   5022f:	add    rsp,0x8
   50233:	mov    eax,ebp
   50235:	pop    rbx
   50236:	pop    rbp
   50237:	pop    r12
   50239:	pop    r13
   5023b:	ret    
   5023c:	nop    DWORD PTR [rax+0x0]
   50240:	add    rsp,0x8
   50244:	mov    ebp,0xffffffde
   50249:	pop    rbx
   5024a:	mov    eax,ebp
   5024c:	pop    rbp
   5024d:	pop    r12
   5024f:	pop    r13
   50251:	ret    
   50252:	xor    ebp,ebp
   50254:	jmp    5022f <g_str_equal@plt+0x42f6f>
   50256:	nop    WORD PTR cs:[rax+rax*1+0x0]
   50260:	lea    rcx,[rip+0x179c1]        # 67c28 <_fini@@Base+0x154d4>
   50267:	lea    rsi,[rip+0xd42a]        # 5d698 <_fini@@Base+0xaf44>
   5026e:	lea    rdi,[rip+0xd46b]        # 5d6e0 <_fini@@Base+0xaf8c>
   50275:	sub    rsp,0x8
   50279:	mov    edx,0x7f
   5027e:	call   c390 <__assert_fail@plt>
   50283:	nop    DWORD PTR [rax]
   50286:	nop    WORD PTR cs:[rax+rax*1+0x0]
   50290:	push   r15
   50292:	push   r14
   50294:	push   r13
   50296:	push   r12
   50298:	push   rbp
   50299:	push   rbx
   5029a:	sub    rsp,0x28
   5029e:	mov    QWORD PTR [rsp],rdi
   502a2:	mov    QWORD PTR [rsp+0x10],rsi
   502a7:	mov    QWORD PTR [rsp+0x8],rdx
   502ac:	call   2f0b0 <g_str_equal@plt+0x21df0>
   502b1:	test   rax,rax
   502b4:	je     5042d <g_str_equal@plt+0x4316d>
   502ba:	mov    rbx,rax
   502bd:	jmp    5038f <g_str_equal@plt+0x430cf>
   502c2:	nop    WORD PTR [rax+rax*1+0x0]
   502c8:	mov    eax,DWORD PTR [rax]
   502ca:	lea    edx,[rax-0x1]
   502cd:	cmp    edx,0x5
   502d0:	ja     5047b <g_str_equal@plt+0x431bb>
   502d6:	cmp    eax,0x4
   502d9:	je     503d0 <g_str_equal@plt+0x43110>
   502df:	cmp    eax,0x5
   502e2:	mov    ebp,0x0
   502e7:	mov    rsi,QWORD PTR [rbx]
   502ea:	cmove  rbp,r12
   502ee:	xor    r13d,r13d
   502f1:	cmp    QWORD PTR [rsp+0x8],0x0
   502f7:	je     50440 <g_str_equal@plt+0x43180>
   502fd:	mov    rdx,rsi
   50300:	mov    rsi,QWORD PTR [rsp+0x8]
   50305:	lea    rdi,[rip+0x1779b]        # 67aa7 <_fini@@Base+0x15353>
   5030c:	xor    eax,eax
   5030e:	call   c740 <g_strdup_printf@plt>
   50313:	test   r13,r13
   50316:	mov    rsi,rax
   50319:	mov    r15,rax
   5031c:	je     50339 <g_str_equal@plt+0x43079>
   5031e:	mov    rdi,r13
   50321:	mov    QWORD PTR [rsp+0x18],rsi
   50326:	call   2ee00 <g_str_equal@plt+0x21b40>
   5032b:	test   rax,rax
   5032e:	mov    rsi,QWORD PTR [rsp+0x18]
   50333:	jne    50450 <g_str_equal@plt+0x43190>
   50339:	test   rbp,rbp
   5033c:	je     50358 <g_str_equal@plt+0x43098>
   5033e:	mov    rdi,rbp
   50341:	mov    QWORD PTR [rsp+0x18],rsi
   50346:	call   2f710 <g_str_equal@plt+0x22450>
   5034b:	test   eax,eax
   5034d:	mov    rsi,QWORD PTR [rsp+0x18]
   50352:	je     503f0 <g_str_equal@plt+0x43130>
   50358:	mov    rcx,QWORD PTR [rsp+0x10]
   5035d:	cmp    QWORD PTR [rsp],rcx
   50361:	je     5037b <g_str_equal@plt+0x430bb>
   50363:	test   r12,r12
   50366:	je     5036e <g_str_equal@plt+0x430ae>
   50368:	add    QWORD PTR [r12+0x8],0x1
   5036e:	mov    rdi,QWORD PTR [rsp+0x10]
   50373:	mov    rdx,r12
   50376:	call   2eb90 <g_str_equal@plt+0x218d0>
   5037b:	mov    rdi,r15
   5037e:	mov    rbx,r14
   50381:	call   d2b0 <g_free@plt>
   50386:	test   r14,r14
   50389:	je     5042d <g_str_equal@plt+0x4316d>
   5038f:	mov    rdi,QWORD PTR [rsp]
   50393:	mov    rsi,rbx
   50396:	call   2f0e0 <g_str_equal@plt+0x21e20>
   5039b:	mov    rdi,rbx
   5039e:	mov    r14,rax
   503a1:	call   2eb70 <g_str_equal@plt+0x218b0>
   503a6:	test   rax,rax
   503a9:	mov    r12,rax
   503ac:	jne    502c8 <g_str_equal@plt+0x43008>
   503b2:	xor    r15d,r15d
   503b5:	cmp    QWORD PTR [rsp+0x8],0x0
   503bb:	mov    rsi,QWORD PTR [rbx]
   503be:	je     50358 <g_str_equal@plt+0x43098>
   503c0:	xor    r13d,r13d
   503c3:	xor    ebp,ebp
   503c5:	jmp    502fd <g_str_equal@plt+0x4303d>
   503ca:	nop    WORD PTR [rax+rax*1+0x0]
   503d0:	xor    ebp,ebp
   503d2:	cmp    QWORD PTR [rsp+0x8],0x0
   503d8:	mov    rsi,QWORD PTR [rbx]
   503db:	mov    r13,r12
   503de:	jne    502fd <g_str_equal@plt+0x4303d>
   503e4:	xor    r15d,r15d
   503e7:	jmp    5031e <g_str_equal@plt+0x4305e>
   503ec:	nop    DWORD PTR [rax+0x0]
   503f0:	mov    r13,QWORD PTR [rsp+0x10]
   503f5:	mov    rdx,rsi
   503f8:	mov    rdi,rbp
   503fb:	mov    rsi,r13
   503fe:	call   504a0 <g_str_equal@plt+0x431e0>
   50403:	cmp    QWORD PTR [rsp],r13
   50407:	jne    5037b <g_str_equal@plt+0x430bb>
   5040d:	mov    rsi,QWORD PTR [rbx]
   50410:	mov    rdi,QWORD PTR [rsp]
   50414:	call   2f1e0 <g_str_equal@plt+0x21f20>
   50419:	mov    rdi,r15
   5041c:	mov    rbx,r14
   5041f:	call   d2b0 <g_free@plt>
   50424:	test   r14,r14
   50427:	jne    5038f <g_str_equal@plt+0x430cf>
   5042d:	add    rsp,0x28
   50431:	pop    rbx
   50432:	pop    rbp
   50433:	pop    r12
   50435:	pop    r13
   50437:	pop    r14
   50439:	pop    r15
   5043b:	ret    
   5043c:	nop    DWORD PTR [rax+0x0]
   50440:	xor    r15d,r15d
   50443:	jmp    50339 <g_str_equal@plt+0x43079>
   50448:	nop    DWORD PTR [rax+rax*1+0x0]
   50450:	mov    rbp,QWORD PTR [rsp+0x10]
   50455:	mov    rdx,rsi
   50458:	mov    rdi,r13
   5045b:	mov    rsi,rbp
   5045e:	call   50290 <g_str_equal@plt+0x42fd0>
   50463:	cmp    QWORD PTR [rsp],rbp
   50467:	jne    5037b <g_str_equal@plt+0x430bb>
   5046d:	mov    rsi,QWORD PTR [rbx]
   50470:	mov    rdi,QWORD PTR [rsp]
   50474:	call   2f1e0 <g_str_equal@plt+0x21f20>
   50479:	jmp    50419 <g_str_equal@plt+0x43159>
   5047b:	lea    rcx,[rip+0x177a6]        # 67c28 <_fini@@Base+0x154d4>
   50482:	lea    rsi,[rip+0xd20f]        # 5d698 <_fini@@Base+0xaf44>
   50489:	lea    rdi,[rip+0xd250]        # 5d6e0 <_fini@@Base+0xaf8c>
   50490:	mov    edx,0x7f
   50495:	call   c390 <__assert_fail@plt>
   5049a:	nop    WORD PTR [rax+rax*1+0x0]
   504a0:	push   r15
   504a2:	push   r14
   504a4:	push   r13
   504a6:	push   r12
   504a8:	push   rbp
   504a9:	push   rbx
   504aa:	sub    rsp,0x18
   504ae:	test   rdx,rdx
   504b1:	mov    QWORD PTR [rsp+0x8],rsi
   504b6:	je     505ee <g_str_equal@plt+0x4332e>
   504bc:	mov    rbx,QWORD PTR [rdi+0x10]
   504c0:	test   rbx,rbx
   504c3:	je     505c0 <g_str_equal@plt+0x43300>
   504c9:	mov    r13,rdx
   504cc:	xor    ebp,ebp
   504ce:	lea    r14,[rip+0x175df]        # 67ab4 <_fini@@Base+0x15360>
   504d5:	jmp    5053f <g_str_equal@plt+0x4327f>
   504d7:	nop    WORD PTR [rax+rax*1+0x0]
   504e0:	mov    eax,DWORD PTR [r15]
   504e3:	lea    edx,[rax-0x1]
   504e6:	cmp    edx,0x5
   504e9:	ja     505cf <g_str_equal@plt+0x4330f>
   504ef:	cmp    eax,0x4
   504f2:	mov    edx,ebp
   504f4:	mov    rsi,r13
   504f7:	mov    rdi,r14
   504fa:	je     50560 <g_str_equal@plt+0x432a0>
   504fc:	cmp    eax,0x5
   504ff:	mov    eax,0x0
   50504:	je     50590 <g_str_equal@plt+0x432d0>
   5050a:	call   c740 <g_strdup_printf@plt>
   5050f:	mov    r12,rax
   50512:	add    QWORD PTR [r15+0x8],0x1
   50517:	mov    rdi,QWORD PTR [rsp+0x8]
   5051c:	mov    rdx,r15
   5051f:	mov    rsi,r12
   50522:	call   2eb90 <g_str_equal@plt+0x218d0>
   50527:	mov    rdi,r12
   5052a:	add    ebp,0x1
   5052d:	call   d2b0 <g_free@plt>
   50532:	mov    rbx,QWORD PTR [rbx+0x8]
   50536:	test   rbx,rbx
   50539:	je     505c0 <g_str_equal@plt+0x43300>
   5053f:	mov    r15,QWORD PTR [rbx]
   50542:	test   r15,r15
   50545:	jne    504e0 <g_str_equal@plt+0x43220>
   50547:	mov    edx,ebp
   50549:	mov    rsi,r13
   5054c:	mov    rdi,r14
   5054f:	xor    eax,eax
   50551:	call   c740 <g_strdup_printf@plt>
   50556:	mov    r12,rax
   50559:	jmp    50517 <g_str_equal@plt+0x43257>
   5055b:	nop    DWORD PTR [rax+rax*1+0x0]
   50560:	xor    eax,eax
   50562:	call   c740 <g_strdup_printf@plt>
   50567:	mov    rdi,r15
   5056a:	mov    r12,rax
   5056d:	call   2ee00 <g_str_equal@plt+0x21b40>
   50572:	test   rax,rax
   50575:	je     50512 <g_str_equal@plt+0x43252>
   50577:	mov    rsi,QWORD PTR [rsp+0x8]
   5057c:	mov    rdx,r12
   5057f:	mov    rdi,r15
   50582:	call   50290 <g_str_equal@plt+0x42fd0>
   50587:	jmp    50527 <g_str_equal@plt+0x43267>
   50589:	nop    DWORD PTR [rax+0x0]
   50590:	call   c740 <g_strdup_printf@plt>
   50595:	mov    rdi,r15
   50598:	mov    r12,rax
   5059b:	call   2f710 <g_str_equal@plt+0x22450>
   505a0:	test   eax,eax
   505a2:	jne    50512 <g_str_equal@plt+0x43252>
   505a8:	mov    rsi,QWORD PTR [rsp+0x8]
   505ad:	mov    rdx,r12
   505b0:	mov    rdi,r15
   505b3:	call   504a0 <g_str_equal@plt+0x431e0>
   505b8:	jmp    50527 <g_str_equal@plt+0x43267>
   505bd:	nop    DWORD PTR [rax]
   505c0:	add    rsp,0x18
   505c4:	pop    rbx
   505c5:	pop    rbp
   505c6:	pop    r12
   505c8:	pop    r13
   505ca:	pop    r14
   505cc:	pop    r15
   505ce:	ret    
   505cf:	lea    rcx,[rip+0x17652]        # 67c28 <_fini@@Base+0x154d4>
   505d6:	lea    rsi,[rip+0xd0bb]        # 5d698 <_fini@@Base+0xaf44>
   505dd:	lea    rdi,[rip+0xd0fc]        # 5d6e0 <_fini@@Base+0xaf8c>
   505e4:	mov    edx,0x7f
   505e9:	call   c390 <__assert_fail@plt>
   505ee:	lea    rcx,[rip+0x1761b]        # 67c10 <_fini@@Base+0x154bc>
   505f5:	lea    rsi,[rip+0x17364]        # 67960 <_fini@@Base+0x1520c>
   505fc:	lea    rdi,[rip+0x174aa]        # 67aad <_fini@@Base+0x15359>
   50603:	mov    edx,0x44
   50608:	call   c390 <__assert_fail@plt>
   5060d:	nop    DWORD PTR [rax]
   50610:	push   r12
   50612:	push   rbp
   50613:	mov    r12,rsi
   50616:	push   rbx
   50617:	mov    rsi,rdx
   5061a:	mov    rbp,rdi
   5061d:	mov    rbx,rdx
   50620:	call   2eda0 <g_str_equal@plt+0x21ae0>
   50625:	test   eax,eax
   50627:	je     50630 <g_str_equal@plt+0x43370>
   50629:	pop    rbx
   5062a:	pop    rbp
   5062b:	pop    r12
   5062d:	ret    
   5062e:	xchg   ax,ax
   50630:	mov    rsi,rbx
   50633:	mov    rdi,r12
   50636:	call   2ed40 <g_str_equal@plt+0x21a80>
   5063b:	test   rax,rax
   5063e:	je     50629 <g_str_equal@plt+0x43369>
   50640:	add    QWORD PTR [rax+0x8],0x1
   50645:	mov    rsi,rbx
   50648:	mov    rdi,rbp
   5064b:	pop    rbx
   5064c:	pop    rbp
   5064d:	pop    r12
   5064f:	mov    rdx,rax
   50652:	jmp    2eb90 <g_str_equal@plt+0x218d0>
   50657:	nop    WORD PTR [rax+rax*1+0x0]
   50660:	push   r12
   50662:	push   rbp
   50663:	mov    r12,rdx
   50666:	push   rbx
   50667:	mov    rbp,rsi
   5066a:	mov    rbx,rdi
   5066d:	call   2eda0 <g_str_equal@plt+0x21ae0>
   50672:	test   eax,eax
   50674:	je     50680 <g_str_equal@plt+0x433c0>
   50676:	pop    rbx
   50677:	pop    rbp
   50678:	pop    r12
   5067a:	ret    
   5067b:	nop    DWORD PTR [rax+rax*1+0x0]
   50680:	mov    rdx,r12
   50683:	mov    rsi,rbp
   50686:	mov    rdi,rbx
   50689:	pop    rbx
   5068a:	pop    rbp
   5068b:	pop    r12
   5068d:	jmp    2ecf0 <g_str_equal@plt+0x21a30>
   50692:	nop    DWORD PTR [rax+0x0]
   50696:	nop    WORD PTR cs:[rax+rax*1+0x0]
   506a0:	xor    edx,edx
   506a2:	mov    rsi,rdi
   506a5:	jmp    50290 <g_str_equal@plt+0x42fd0>
   506aa:	nop    WORD PTR [rax+rax*1+0x0]
   506b0:	push   r15
   506b2:	push   r14
   506b4:	mov    r15,rsi
   506b7:	push   r13
   506b9:	push   r12
   506bb:	mov    r12,rdi
   506be:	push   rbp
   506bf:	push   rbx
   506c0:	mov    r13,rdx
   506c3:	sub    rsp,0x18
   506c7:	mov    rax,QWORD PTR fs:0x28
   506d0:	mov    QWORD PTR [rsp+0x8],rax
   506d5:	xor    eax,eax
   506d7:	call   2eb40 <g_str_equal@plt+0x21880>
   506dc:	mov    rdi,r12
   506df:	mov    QWORD PTR [r15],rax
   506e2:	call   2f0b0 <g_str_equal@plt+0x21df0>
   506e7:	test   rax,rax
   506ea:	je     50745 <g_str_equal@plt+0x43485>
   506ec:	mov    rbx,rax
   506ef:	mov    r14,rsp
   506f2:	nop    WORD PTR [rax+rax*1+0x0]
   506f8:	mov    rsi,rbx
   506fb:	mov    rdi,r12
   506fe:	call   2f0e0 <g_str_equal@plt+0x21e20>
   50703:	mov    rdi,QWORD PTR [rbx]
   50706:	mov    rdx,r14
   50709:	mov    rsi,r13
   5070c:	mov    rbp,rax
   5070f:	call   32ab0 <g_str_equal@plt+0x257f0>
   50714:	test   eax,eax
   50716:	je     5073d <g_str_equal@plt+0x4347d>
   50718:	mov    rdx,QWORD PTR [rbx+0x8]
   5071c:	test   rdx,rdx
   5071f:	je     50726 <g_str_equal@plt+0x43466>
   50721:	add    QWORD PTR [rdx+0x8],0x1
   50726:	mov    rsi,QWORD PTR [rsp]
   5072a:	mov    rdi,QWORD PTR [r15]
   5072d:	call   2eb90 <g_str_equal@plt+0x218d0>
   50732:	mov    rsi,QWORD PTR [rbx]
   50735:	mov    rdi,r12
   50738:	call   2f1e0 <g_str_equal@plt+0x21f20>
   5073d:	test   rbp,rbp
   50740:	mov    rbx,rbp
   50743:	jne    506f8 <g_str_equal@plt+0x43438>
   50745:	mov    rax,QWORD PTR [rsp+0x8]
   5074a:	xor    rax,QWORD PTR fs:0x28
   50753:	jne    50764 <g_str_equal@plt+0x434a4>
   50755:	add    rsp,0x18
   50759:	pop    rbx
   5075a:	pop    rbp
   5075b:	pop    r12
   5075d:	pop    r13
   5075f:	pop    r14
   50761:	pop    r15
   50763:	ret    
   50764:	call   cd30 <__stack_chk_fail@plt>
   50769:	nop    DWORD PTR [rax+0x0]
   50770:	push   r15
   50772:	push   r14
   50774:	mov    r14,rsi
   50777:	push   r13
   50779:	push   r12
   5077b:	push   rbp
   5077c:	push   rbx
   5077d:	mov    rbp,rdi
   50780:	xor    ebx,ebx
   50782:	sub    rsp,0x78
   50786:	mov    rax,QWORD PTR fs:0x28
   5078f:	mov    QWORD PTR [rsp+0x68],rax
   50794:	xor    eax,eax
   50796:	call   2f420 <g_str_equal@plt+0x22160>
   5079b:	mov    QWORD PTR [r14],rax
   5079e:	lea    rax,[rsp+0x18]
   507a3:	lea    r12,[rsp+0x20]
   507a8:	lea    r13,[rsp+0x40]
   507ad:	mov    QWORD PTR [rsp+0x8],rax
   507b2:	jmp    507ed <g_str_equal@plt+0x4352d>
   507b4:	nop    DWORD PTR [rax+0x0]
   507b8:	test   r15,r15
   507bb:	je     507c2 <g_str_equal@plt+0x43502>
   507bd:	add    QWORD PTR [r15+0x8],0x1
   507c2:	mov    rsi,r12
   507c5:	mov    rdi,rbp
   507c8:	call   2f1e0 <g_str_equal@plt+0x21f20>
   507cd:	test   r15,r15
   507d0:	je     508a8 <g_str_equal@plt+0x435e8>
   507d6:	mov    rdi,QWORD PTR [r14]
   507d9:	mov    rsi,r15
   507dc:	add    ebx,0x1
   507df:	call   2f4f0 <g_str_equal@plt+0x22230>
   507e4:	cmp    ebx,0xffffffff
   507e7:	je     508b8 <g_str_equal@plt+0x435f8>
   507ed:	lea    r8,[rip+0x11883]        # 62077 <_fini@@Base+0xf923>
   507f4:	mov    r9d,ebx
   507f7:	mov    ecx,0x20
   507fc:	mov    edx,0x1
   50801:	mov    esi,0x20
   50806:	mov    rdi,r12
   50809:	xor    eax,eax
   5080b:	call   cfe0 <__snprintf_chk@plt>
   50810:	mov    rsi,r12
   50813:	mov    rdi,rbp
   50816:	call   2ed40 <g_str_equal@plt+0x21a80>
   5081b:	lea    r8,[rip+0x1730f]        # 67b31 <_fini@@Base+0x153dd>
   50822:	mov    ecx,0x20
   50827:	mov    edx,0x1
   5082c:	mov    r15,rax
   5082f:	mov    r9d,ebx
   50832:	mov    esi,0x20
   50837:	mov    rdi,r13
   5083a:	xor    eax,eax
   5083c:	call   cfe0 <__snprintf_chk@plt>
   50841:	mov    rsi,r13
   50844:	mov    rdi,rbp
   50847:	call   501e0 <g_str_equal@plt+0x42f20>
   5084c:	test   r15,r15
   5084f:	sete   cl
   50852:	test   eax,eax
   50854:	sete   dl
   50857:	cmp    cl,dl
   50859:	je     508b8 <g_str_equal@plt+0x435f8>
   5085b:	test   eax,eax
   5085d:	je     507b8 <g_str_equal@plt+0x434f8>
   50863:	mov    rsi,QWORD PTR [rsp+0x8]
   50868:	mov    rdx,r13
   5086b:	mov    rdi,rbp
   5086e:	call   506b0 <g_str_equal@plt+0x433f0>
   50873:	mov    rdi,QWORD PTR [rsp+0x18]
   50878:	call   2ee00 <g_str_equal@plt+0x21b40>
   5087d:	test   rax,rax
   50880:	jne    507cd <g_str_equal@plt+0x4350d>
   50886:	lea    rcx,[rip+0x17363]        # 67bf0 <_fini@@Base+0x1549c>
   5088d:	lea    rsi,[rip+0x170cc]        # 67960 <_fini@@Base+0x1520c>
   50894:	lea    rdi,[rip+0x1721f]        # 67aba <_fini@@Base+0x15366>
   5089b:	mov    edx,0xf8
   508a0:	call   c390 <__assert_fail@plt>
   508a5:	nop    DWORD PTR [rax]
   508a8:	mov    r15,QWORD PTR [rsp+0x18]
   508ad:	jmp    507d6 <g_str_equal@plt+0x43516>
   508b2:	nop    WORD PTR [rax+rax*1+0x0]
   508b8:	mov    rax,QWORD PTR [rsp+0x68]
   508bd:	xor    rax,QWORD PTR fs:0x28
   508c6:	jne    508d7 <g_str_equal@plt+0x43617>
   508c8:	add    rsp,0x78
   508cc:	pop    rbx
   508cd:	pop    rbp
   508ce:	pop    r12
   508d0:	pop    r13
   508d2:	pop    r14
   508d4:	pop    r15
   508d6:	ret    
   508d7:	call   cd30 <__stack_chk_fail@plt>
   508dc:	nop    DWORD PTR [rax+0x0]
   508e0:	push   r15
   508e2:	push   r14
   508e4:	mov    r14,rdi
   508e7:	push   r13
   508e9:	push   r12
   508eb:	mov    r12,rsi
   508ee:	push   rbp
   508ef:	push   rbx
   508f0:	sub    rsp,0x28
   508f4:	mov    rax,QWORD PTR fs:0x28
   508fd:	mov    QWORD PTR [rsp+0x18],rax
   50902:	xor    eax,eax
   50904:	call   2eb40 <g_str_equal@plt+0x21880>
   50909:	mov    rdi,r14
   5090c:	mov    r13,rax
   5090f:	call   2f0b0 <g_str_equal@plt+0x21df0>
   50914:	test   rax,rax
   50917:	je     50b64 <g_str_equal@plt+0x438a4>
   5091d:	mov    rbp,rax
   50920:	mov    rdi,QWORD PTR [rbp+0x8]
   50924:	test   rdi,rdi
   50927:	je     50950 <g_str_equal@plt+0x43690>
   50929:	mov    eax,DWORD PTR [rdi]
   5092b:	lea    edx,[rax-0x1]
   5092e:	cmp    edx,0x5
   50931:	ja     50f1f <g_str_equal@plt+0x43c5f>
   50937:	cmp    eax,0x4
   5093a:	je     50c10 <g_str_equal@plt+0x43950>
   50940:	cmp    eax,0x5
   50943:	je     50ad0 <g_str_equal@plt+0x43810>
   50949:	nop    DWORD PTR [rax+0x0]
   50950:	mov    rbx,QWORD PTR [rbp+0x0]
   50954:	mov    rdi,rbx
   50957:	jmp    50964 <g_str_equal@plt+0x436a4>
   50959:	nop    DWORD PTR [rax+0x0]
   50960:	lea    rdi,[r15+0x2]
   50964:	mov    esi,0x2e
   50969:	call   cc00 <strchr@plt>
   5096e:	test   rax,rax
   50971:	mov    r15,rax
   50974:	je     50bf0 <g_str_equal@plt+0x43930>
   5097a:	cmp    BYTE PTR [rax+0x1],0x2e
   5097e:	je     50960 <g_str_equal@plt+0x436a0>
   50980:	mov    rsi,rax
   50983:	mov    rdi,rbx
   50986:	add    r15,0x1
   5098a:	sub    rsi,rbx
   5098d:	call   c640 <g_strndup@plt>
   50992:	mov    rbx,rax
   50995:	movzx  ecx,BYTE PTR [rbx]
   50998:	test   cl,cl
   5099a:	je     50c06 <g_str_equal@plt+0x43946>
   509a0:	xor    edx,edx
   509a2:	xor    eax,eax
   509a4:	jmp    509c5 <g_str_equal@plt+0x43705>
   509a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   509b0:	movzx  ecx,BYTE PTR [rbx+rax*1]
   509b4:	mov    rax,rdi
   509b7:	mov    BYTE PTR [rbx+rdx*1],cl
   509ba:	movzx  ecx,BYTE PTR [rsi]
   509bd:	add    rdx,0x1
   509c1:	test   cl,cl
   509c3:	je     509f4 <g_str_equal@plt+0x43734>
   509c5:	lea    rdi,[rax+0x1]
   509c9:	cmp    cl,0x2e
   509cc:	lea    rsi,[rbx+rdi*1]
   509d0:	jne    509b0 <g_str_equal@plt+0x436f0>
   509d2:	movzx  ecx,BYTE PTR [rsi]
   509d5:	cmp    cl,0x2e
   509d8:	jne    50f00 <g_str_equal@plt+0x43c40>
   509de:	add    rax,0x2
   509e2:	mov    BYTE PTR [rbx+rdx*1],cl
   509e5:	add    rdx,0x1
   509e9:	lea    rsi,[rbx+rax*1]
   509ed:	movzx  ecx,BYTE PTR [rsi]
   509f0:	test   cl,cl
   509f2:	jne    509c5 <g_str_equal@plt+0x43705>
   509f4:	add    rdx,rbx
   509f7:	mov    BYTE PTR [rdx],0x0
   509fa:	mov    rsi,rbx
   509fd:	mov    rdi,r13
   50a00:	call   2ed40 <g_str_equal@plt+0x21a80>
   50a05:	test   rax,rax
   50a08:	je     50c28 <g_str_equal@plt+0x43968>
   50a0e:	mov    edx,DWORD PTR [rax]
   50a10:	lea    ecx,[rdx-0x1]
   50a13:	cmp    ecx,0x5
   50a16:	ja     50f1f <g_str_equal@plt+0x43c5f>
   50a1c:	cmp    edx,0x4
   50a1f:	jne    50a2a <g_str_equal@plt+0x4376a>
   50a21:	test   r15,r15
   50a24:	jne    50b2c <g_str_equal@plt+0x4386c>
   50a2a:	lea    r8,[rip+0x16f6f]        # 679a0 <_fini@@Base+0x1524c>
   50a31:	lea    rcx,[rip+0x171a0]        # 67bd8 <_fini@@Base+0x15484>
   50a38:	lea    rsi,[rip+0x16f21]        # 67960 <_fini@@Base+0x1520c>
   50a3f:	mov    rdi,r12
   50a42:	mov    edx,0x1c5
   50a47:	xor    eax,eax
   50a49:	call   3a090 <g_str_equal@plt+0x2cdd0>
   50a4e:	mov    rdi,rbx
   50a51:	call   d2b0 <g_free@plt>
   50a56:	xor    r14d,r14d
   50a59:	test   r13,r13
   50a5c:	je     50a9f <g_str_equal@plt+0x437df>
   50a5e:	mov    rax,QWORD PTR [r13+0x8]
   50a62:	test   rax,rax
   50a65:	je     50f99 <g_str_equal@plt+0x43cd9>
   50a6b:	sub    rax,0x1
   50a6f:	test   rax,rax
   50a72:	mov    QWORD PTR [r13+0x8],rax
   50a76:	je     50c5c <g_str_equal@plt+0x4399c>
   50a7c:	test   r14,r14
   50a7f:	je     50a9f <g_str_equal@plt+0x437df>
   50a81:	mov    rax,QWORD PTR [r14+0x8]
   50a85:	test   rax,rax
   50a88:	je     50f99 <g_str_equal@plt+0x43cd9>
   50a8e:	sub    rax,0x1
   50a92:	test   rax,rax
   50a95:	mov    QWORD PTR [r14+0x8],rax
   50a99:	je     50c4f <g_str_equal@plt+0x4398f>
   50a9f:	xor    ebx,ebx
   50aa1:	mov    rdx,QWORD PTR [rsp+0x18]
   50aa6:	xor    rdx,QWORD PTR fs:0x28
   50aaf:	mov    rax,rbx
   50ab2:	jne    50f94 <g_str_equal@plt+0x43cd4>
   50ab8:	add    rsp,0x28
   50abc:	pop    rbx
   50abd:	pop    rbp
   50abe:	pop    r12
   50ac0:	pop    r13
   50ac2:	pop    r14
   50ac4:	pop    r15
   50ac6:	ret    
   50ac7:	nop    WORD PTR [rax+rax*1+0x0]
   50ad0:	call   2f710 <g_str_equal@plt+0x22450>
   50ad5:	test   eax,eax
   50ad7:	jne    50950 <g_str_equal@plt+0x43690>
   50add:	mov    r9,QWORD PTR [rbp+0x0]
   50ae1:	lea    r8,[rip+0x16feb]        # 67ad3 <_fini@@Base+0x1537f>
   50ae8:	lea    rcx,[rip+0x170e9]        # 67bd8 <_fini@@Base+0x15484>
   50aef:	lea    rsi,[rip+0x16e6a]        # 67960 <_fini@@Base+0x1520c>
   50af6:	mov    rdi,r12
   50af9:	mov    edx,0x1b6
   50afe:	xor    eax,eax
   50b00:	call   3a090 <g_str_equal@plt+0x2cdd0>
   50b05:	xor    edi,edi
   50b07:	call   d2b0 <g_free@plt>
   50b0c:	jmp    50a56 <g_str_equal@plt+0x43796>
   50b11:	call   2eb40 <g_str_equal@plt+0x21880>
   50b16:	mov    rsi,rbx
   50b19:	mov    rdx,rax
   50b1c:	mov    rdi,r13
   50b1f:	mov    QWORD PTR [rsp],rax
   50b23:	call   2eb90 <g_str_equal@plt+0x218d0>
   50b28:	mov    rax,QWORD PTR [rsp]
   50b2c:	mov    rdx,QWORD PTR [rbp+0x8]
   50b30:	test   rdx,rdx
   50b33:	je     50b3a <g_str_equal@plt+0x4387a>
   50b35:	add    QWORD PTR [rdx+0x8],0x1
   50b3a:	mov    rsi,r15
   50b3d:	mov    rdi,rax
   50b40:	call   2eb90 <g_str_equal@plt+0x218d0>
   50b45:	mov    rdi,rbx
   50b48:	call   d2b0 <g_free@plt>
   50b4d:	mov    rsi,rbp
   50b50:	mov    rdi,r14
   50b53:	call   2f0e0 <g_str_equal@plt+0x21e20>
   50b58:	test   rax,rax
   50b5b:	mov    rbp,rax
   50b5e:	jne    50920 <g_str_equal@plt+0x43660>
   50b64:	call   2eb40 <g_str_equal@plt+0x21880>
   50b69:	mov    rdi,r13
   50b6c:	mov    rbx,rax
   50b6f:	call   2f0b0 <g_str_equal@plt+0x21df0>
   50b74:	test   rax,rax
   50b77:	mov    rbp,rax
   50b7a:	jne    50bb0 <g_str_equal@plt+0x438f0>
   50b7c:	jmp    50c69 <g_str_equal@plt+0x439a9>
   50b81:	nop    DWORD PTR [rax+0x0]
   50b88:	add    QWORD PTR [rdx+0x8],0x1
   50b8d:	mov    rsi,QWORD PTR [rbp+0x0]
   50b91:	mov    rdi,rbx
   50b94:	call   2eb90 <g_str_equal@plt+0x218d0>
   50b99:	mov    rsi,rbp
   50b9c:	mov    rdi,r13
   50b9f:	call   2f0e0 <g_str_equal@plt+0x21e20>
   50ba4:	test   rax,rax
   50ba7:	mov    rbp,rax
   50baa:	je     50c69 <g_str_equal@plt+0x439a9>
   50bb0:	mov    rdx,QWORD PTR [rbp+0x8]
   50bb4:	test   rdx,rdx
   50bb7:	je     50b8d <g_str_equal@plt+0x438cd>
   50bb9:	mov    eax,DWORD PTR [rdx]
   50bbb:	lea    ecx,[rax-0x1]
   50bbe:	cmp    ecx,0x5
   50bc1:	ja     50f3e <g_str_equal@plt+0x43c7e>
   50bc7:	cmp    eax,0x4
   50bca:	jne    50b88 <g_str_equal@plt+0x438c8>
   50bcc:	mov    rdi,rdx
   50bcf:	mov    QWORD PTR [rsp],rdx
   50bd3:	call   2ee00 <g_str_equal@plt+0x21b40>
   50bd8:	test   rax,rax
   50bdb:	mov    rdx,QWORD PTR [rsp]
   50bdf:	jne    50e28 <g_str_equal@plt+0x43b68>
   50be5:	mov    rdx,QWORD PTR [rbp+0x8]
   50be9:	test   rdx,rdx
   50bec:	jne    50b88 <g_str_equal@plt+0x438c8>
   50bee:	jmp    50b8d <g_str_equal@plt+0x438cd>
   50bf0:	mov    rdi,rbx
   50bf3:	call   c370 <g_strdup@plt>
   50bf8:	mov    rbx,rax
   50bfb:	movzx  ecx,BYTE PTR [rbx]
   50bfe:	test   cl,cl
   50c00:	jne    509a0 <g_str_equal@plt+0x436e0>
   50c06:	mov    rdx,rbx
   50c09:	jmp    509f7 <g_str_equal@plt+0x43737>
   50c0e:	xchg   ax,ax
   50c10:	call   2ee00 <g_str_equal@plt+0x21b40>
   50c15:	test   rax,rax
   50c18:	je     50950 <g_str_equal@plt+0x43690>
   50c1e:	jmp    50add <g_str_equal@plt+0x4381d>
   50c23:	nop    DWORD PTR [rax+rax*1+0x0]
   50c28:	test   r15,r15
   50c2b:	jne    50b11 <g_str_equal@plt+0x43851>
   50c31:	mov    rdx,QWORD PTR [rbp+0x8]
   50c35:	test   rdx,rdx
   50c38:	je     50c3f <g_str_equal@plt+0x4397f>
   50c3a:	add    QWORD PTR [rdx+0x8],0x1
   50c3f:	mov    rsi,rbx
   50c42:	mov    rdi,r13
   50c45:	call   2eb90 <g_str_equal@plt+0x218d0>
   50c4a:	jmp    50b45 <g_str_equal@plt+0x43885>
   50c4f:	mov    rdi,r14
   50c52:	call   30300 <g_str_equal@plt+0x23040>
   50c57:	jmp    50a9f <g_str_equal@plt+0x437df>
   50c5c:	mov    rdi,r13
   50c5f:	call   30300 <g_str_equal@plt+0x23040>
   50c64:	jmp    50a7c <g_str_equal@plt+0x437bc>
   50c69:	test   r13,r13
   50c6c:	je     50c8c <g_str_equal@plt+0x439cc>
   50c6e:	mov    rax,QWORD PTR [r13+0x8]
   50c72:	test   rax,rax
   50c75:	je     50f99 <g_str_equal@plt+0x43cd9>
   50c7b:	sub    rax,0x1
   50c7f:	test   rax,rax
   50c82:	mov    QWORD PTR [r13+0x8],rax
   50c86:	je     50d80 <g_str_equal@plt+0x43ac0>
   50c8c:	mov    rdi,rbx
   50c8f:	call   2f0b0 <g_str_equal@plt+0x21df0>
   50c94:	test   rax,rax
   50c97:	mov    r14,rax
   50c9a:	je     50ebf <g_str_equal@plt+0x43bff>
   50ca0:	lea    r15,[rsp+0x10]
   50ca5:	mov    rdi,QWORD PTR [rax]
   50ca8:	xor    esi,esi
   50caa:	mov    edx,0xa
   50caf:	mov    rbp,0xffffffffffffffff
   50cb6:	mov    rcx,r15
   50cb9:	call   331d0 <g_str_equal@plt+0x25f10>
   50cbe:	test   eax,eax
   50cc0:	mov    DWORD PTR [rsp+0xc],eax
   50cc4:	sete   BYTE PTR [rsp]
   50cc8:	movzx  eax,BYTE PTR [rsp]
   50ccc:	xor    r13d,r13d
   50ccf:	test   al,al
   50cd1:	je     50ce3 <g_str_equal@plt+0x43a23>
   50cd3:	mov    rax,QWORD PTR [rsp+0x10]
   50cd8:	add    r13,0x1
   50cdc:	cmp    rbp,rax
   50cdf:	cmovl  rbp,rax
   50ce3:	mov    rsi,r14
   50ce6:	mov    rdi,rbx
   50ce9:	call   2f0e0 <g_str_equal@plt+0x21e20>
   50cee:	test   rax,rax
   50cf1:	mov    r14,rax
   50cf4:	je     50d8d <g_str_equal@plt+0x43acd>
   50cfa:	mov    rdi,QWORD PTR [r14]
   50cfd:	xor    esi,esi
   50cff:	mov    rcx,r15
   50d02:	mov    edx,0xa
   50d07:	call   331d0 <g_str_equal@plt+0x25f10>
   50d0c:	test   eax,eax
   50d0e:	sete   al
   50d11:	cmp    al,BYTE PTR [rsp]
   50d14:	je     50ccf <g_str_equal@plt+0x43a0f>
   50d16:	lea    r8,[rip+0x16cab]        # 679c8 <_fini@@Base+0x15274>
   50d1d:	lea    rcx,[rip+0x16e84]        # 67ba8 <_fini@@Base+0x15454>
   50d24:	lea    rsi,[rip+0x16c35]        # 67960 <_fini@@Base+0x1520c>
   50d2b:	mov    edx,0x15b
   50d30:	mov    rdi,r12
   50d33:	xor    eax,eax
   50d35:	call   3a090 <g_str_equal@plt+0x2cdd0>
   50d3a:	xor    edi,edi
   50d3c:	xor    r14d,r14d
   50d3f:	xor    r13d,r13d
   50d42:	call   d2b0 <g_free@plt>
   50d47:	test   rbx,rbx
   50d4a:	je     50a9f <g_str_equal@plt+0x437df>
   50d50:	mov    rax,QWORD PTR [rbx+0x8]
   50d54:	test   rax,rax
   50d57:	je     50f99 <g_str_equal@plt+0x43cd9>
   50d5d:	sub    rax,0x1
   50d61:	test   rax,rax
   50d64:	mov    QWORD PTR [rbx+0x8],rax
   50d68:	jne    50d72 <g_str_equal@plt+0x43ab2>
   50d6a:	mov    rdi,rbx
   50d6d:	call   30300 <g_str_equal@plt+0x23040>
   50d72:	test   r13,r13
   50d75:	jne    50a5e <g_str_equal@plt+0x4379e>
   50d7b:	jmp    50a7c <g_str_equal@plt+0x437bc>
   50d80:	mov    rdi,r13
   50d83:	call   30300 <g_str_equal@plt+0x23040>
   50d88:	jmp    50c8c <g_str_equal@plt+0x439cc>
   50d8d:	lea    rax,[rbp+0x1]
   50d91:	cmp    rax,r13
   50d94:	jne    50f61 <g_str_equal@plt+0x43ca1>
   50d9a:	mov    eax,DWORD PTR [rsp+0xc]
   50d9e:	test   eax,eax
   50da0:	jne    50aa1 <g_str_equal@plt+0x437e1>
   50da6:	call   2f420 <g_str_equal@plt+0x22160>
   50dab:	xor    r13d,r13d
   50dae:	mov    r14,rax
   50db1:	jmp    50dda <g_str_equal@plt+0x43b1a>
   50db3:	mov    eax,DWORD PTR [r14]
   50db6:	lea    edx,[rax-0x1]
   50db9:	cmp    edx,0x5
   50dbc:	ja     50f3e <g_str_equal@plt+0x43c7e>
   50dc2:	cmp    eax,0x5
   50dc5:	mov    edi,0x0
   50dca:	cmove  rdi,r14
   50dce:	mov    rsi,rbp
   50dd1:	add    r13,0x1
   50dd5:	call   2f4f0 <g_str_equal@plt+0x22230>
   50dda:	mov    rdi,rbx
   50ddd:	call   2ee00 <g_str_equal@plt+0x21b40>
   50de2:	cmp    rax,r13
   50de5:	jbe    50e98 <g_str_equal@plt+0x43bd8>
   50deb:	lea    rdi,[rip+0x7aca]        # 588bc <_fini@@Base+0x6168>
   50df2:	mov    rsi,r13
   50df5:	xor    eax,eax
   50df7:	call   c740 <g_strdup_printf@plt>
   50dfc:	mov    rdi,rbx
   50dff:	mov    r15,rax
   50e02:	mov    rsi,rax
   50e05:	call   2ed40 <g_str_equal@plt+0x21a80>
   50e0a:	mov    rdi,r15
   50e0d:	mov    rbp,rax
   50e10:	call   d2b0 <g_free@plt>
   50e15:	test   rbp,rbp
   50e18:	je     50e53 <g_str_equal@plt+0x43b93>
   50e1a:	add    QWORD PTR [rbp+0x8],0x1
   50e1f:	test   r14,r14
   50e22:	jne    50db3 <g_str_equal@plt+0x43af3>
   50e24:	xor    edi,edi
   50e26:	jmp    50dce <g_str_equal@plt+0x43b0e>
   50e28:	mov    rsi,r12
   50e2b:	mov    rdi,rdx
   50e2e:	call   508e0 <g_str_equal@plt+0x43620>
   50e33:	test   rax,rax
   50e36:	mov    r14,rax
   50e39:	je     50f43 <g_str_equal@plt+0x43c83>
   50e3f:	mov    rsi,QWORD PTR [rbp+0x0]
   50e43:	mov    rdx,rax
   50e46:	mov    rdi,rbx
   50e49:	call   2eb90 <g_str_equal@plt+0x218d0>
   50e4e:	jmp    50b99 <g_str_equal@plt+0x438d9>
   50e53:	lea    r8,[rip+0x16cbe]        # 67b18 <_fini@@Base+0x153c4>
   50e5a:	lea    rcx,[rip+0x16d77]        # 67bd8 <_fini@@Base+0x15484>
   50e61:	lea    rsi,[rip+0x16af8]        # 67960 <_fini@@Base+0x1520c>
   50e68:	mov    r9,r13
   50e6b:	xor    eax,eax
   50e6d:	mov    edx,0x1fc
   50e72:	mov    rdi,r12
   50e75:	xor    r13d,r13d
   50e78:	call   3a090 <g_str_equal@plt+0x2cdd0>
   50e7d:	xor    edi,edi
   50e7f:	call   d2b0 <g_free@plt>
   50e84:	test   rbx,rbx
   50e87:	jne    50d50 <g_str_equal@plt+0x43a90>
   50e8d:	jmp    50a7c <g_str_equal@plt+0x437bc>
   50e92:	nop    WORD PTR [rax+rax*1+0x0]
   50e98:	test   rbx,rbx
   50e9b:	je     50eb7 <g_str_equal@plt+0x43bf7>
   50e9d:	mov    rax,QWORD PTR [rbx+0x8]
   50ea1:	test   rax,rax
   50ea4:	je     50f99 <g_str_equal@plt+0x43cd9>
   50eaa:	sub    rax,0x1
   50eae:	test   rax,rax
   50eb1:	mov    QWORD PTR [rbx+0x8],rax
   50eb5:	je     50ef0 <g_str_equal@plt+0x43c30>
   50eb7:	mov    rbx,r14
   50eba:	jmp    50aa1 <g_str_equal@plt+0x437e1>
   50ebf:	mov    rdi,rbx
   50ec2:	call   2ee00 <g_str_equal@plt+0x21b40>
   50ec7:	test   rax,rax
   50eca:	je     50aa1 <g_str_equal@plt+0x437e1>
   50ed0:	lea    rcx,[rip+0x16cc1]        # 67b98 <_fini@@Base+0x15444>
   50ed7:	lea    rsi,[rip+0x16a82]        # 67960 <_fini@@Base+0x1520c>
   50ede:	lea    rdi,[rip+0x16c1b]        # 67b00 <_fini@@Base+0x153ac>
   50ee5:	mov    edx,0x168
   50eea:	call   c390 <__assert_fail@plt>
   50eef:	nop
   50ef0:	mov    rdi,rbx
   50ef3:	mov    rbx,r14
   50ef6:	call   30300 <g_str_equal@plt+0x23040>
   50efb:	jmp    50aa1 <g_str_equal@plt+0x437e1>
   50f00:	lea    rcx,[rip+0x16cb9]        # 67bc0 <_fini@@Base+0x1546c>
   50f07:	lea    rsi,[rip+0x16a52]        # 67960 <_fini@@Base+0x1520c>
   50f0e:	lea    rdi,[rip+0x16bd3]        # 67ae8 <_fini@@Base+0x15394>
   50f15:	mov    edx,0x135
   50f1a:	call   c390 <__assert_fail@plt>
   50f1f:	lea    rcx,[rip+0x16d02]        # 67c28 <_fini@@Base+0x154d4>
   50f26:	lea    rsi,[rip+0xc76b]        # 5d698 <_fini@@Base+0xaf44>
   50f2d:	lea    rdi,[rip+0xc7ac]        # 5d6e0 <_fini@@Base+0xaf8c>
   50f34:	mov    edx,0x7f
   50f39:	call   c390 <__assert_fail@plt>
   50f3e:	call   50260 <g_str_equal@plt+0x42fa0>
   50f43:	xor    edi,edi
   50f45:	call   d2b0 <g_free@plt>
   50f4a:	test   rbx,rbx
   50f4d:	jne    50d50 <g_str_equal@plt+0x43a90>
   50f53:	test   r13,r13
   50f56:	jne    50a5e <g_str_equal@plt+0x4379e>
   50f5c:	jmp    50a9f <g_str_equal@plt+0x437df>
   50f61:	sub    rsp,0x8
   50f65:	lea    rcx,[rip+0x16c3c]        # 67ba8 <_fini@@Base+0x15454>
   50f6c:	lea    r8,[rip+0x16a7d]        # 679f0 <_fini@@Base+0x1529c>
   50f73:	push   rbp
   50f74:	lea    rsi,[rip+0x169e5]        # 67960 <_fini@@Base+0x1520c>
   50f7b:	mov    edx,0x174
   50f80:	mov    r9,r13
   50f83:	mov    rdi,r12
   50f86:	xor    eax,eax
   50f88:	call   3a090 <g_str_equal@plt+0x2cdd0>
   50f8d:	pop    rdx
   50f8e:	pop    rcx
   50f8f:	jmp    50d3a <g_str_equal@plt+0x43a7a>
   50f94:	call   cd30 <__stack_chk_fail@plt>
   50f99:	call   d5ec <g_str_equal@plt+0x32c>
   50f9e:	xchg   ax,ax
   50fa0:	push   r15
   50fa2:	push   r14
   50fa4:	push   r13
   50fa6:	push   r12
   50fa8:	mov    r13,rdi
   50fab:	push   rbp
   50fac:	push   rbx
   50fad:	mov    rdi,rsi
   50fb0:	mov    rbx,rsi
   50fb3:	sub    rsp,0x18
   50fb7:	mov    QWORD PTR [rsp+0x8],rsi
   50fbc:	call   c720 <strlen@plt>
   50fc1:	test   rax,rax
   50fc4:	je     50fd1 <g_str_equal@plt+0x43d11>
   50fc6:	cmp    BYTE PTR [rbx+rax*1-0x1],0x2e
   50fcb:	jne    510cf <g_str_equal@plt+0x43e0f>
   50fd1:	xor    r12d,r12d
   50fd4:	xor    r15d,r15d
   50fd7:	jmp    51010 <g_str_equal@plt+0x43d50>
   50fd9:	nop    DWORD PTR [rax+0x0]
   50fe0:	test   r14,r14
   50fe3:	je     50fed <g_str_equal@plt+0x43d2d>
   50fe5:	test   ebx,ebx
   50fe7:	jne    510c8 <g_str_equal@plt+0x43e08>
   50fed:	test   r14,r14
   50ff0:	jne    50ff6 <g_str_equal@plt+0x43d36>
   50ff2:	test   ebx,ebx
   50ff4:	je     51070 <g_str_equal@plt+0x43db0>
   50ff6:	test   ebx,ebx
   50ff8:	mov    eax,0x1
   50ffd:	cmove  ebx,eax
   51000:	add    r15d,0x1
   51004:	add    r12d,ebx
   51007:	cmp    r15d,0x7fffffff
   5100e:	je     51070 <g_str_equal@plt+0x43db0>
   51010:	mov    rsi,QWORD PTR [rsp+0x8]
   51015:	lea    rdi,[rip+0x16b13]        # 67b2f <_fini@@Base+0x153db>
   5101c:	mov    edx,r15d
   5101f:	xor    eax,eax
   51021:	call   c740 <g_strdup_printf@plt>
   51026:	mov    rdi,r13
   51029:	mov    rbp,rax
   5102c:	mov    rsi,rax
   5102f:	call   501e0 <g_str_equal@plt+0x42f20>
   51034:	mov    rdi,rbp
   51037:	mov    ebx,eax
   51039:	call   c720 <strlen@plt>
   5103e:	mov    rsi,rbp
   51041:	mov    rdi,r13
   51044:	mov    BYTE PTR [rbp+rax*1-0x1],0x0
   51049:	call   2ed40 <g_str_equal@plt+0x21a80>
   5104e:	mov    rdi,rbp
   51051:	mov    r14,rax
   51054:	call   d2b0 <g_free@plt>
   51059:	test   ebx,ebx
   5105b:	jns    50fe0 <g_str_equal@plt+0x43d20>
   5105d:	add    rsp,0x18
   51061:	mov    eax,ebx
   51063:	pop    rbx
   51064:	pop    rbp
   51065:	pop    r12
   51067:	pop    r13
   51069:	pop    r14
   5106b:	pop    r15
   5106d:	ret    
   5106e:	xchg   ax,ax
   51070:	mov    rdi,r13
   51073:	call   2f0b0 <g_str_equal@plt+0x21df0>
   51078:	test   rax,rax
   5107b:	mov    rbx,rax
   5107e:	je     510b1 <g_str_equal@plt+0x43df1>
   51080:	mov    rdi,rbx
   51083:	call   2eb80 <g_str_equal@plt+0x218c0>
   51088:	mov    rsi,QWORD PTR [rsp+0x8]
   5108d:	xor    edx,edx
   5108f:	mov    rdi,rax
   51092:	call   32ab0 <g_str_equal@plt+0x257f0>
   51097:	mov    rsi,rbx
   5109a:	cmp    eax,0x1
   5109d:	mov    rdi,r13
   510a0:	adc    r12d,0x0
   510a4:	call   2f0e0 <g_str_equal@plt+0x21e20>
   510a9:	test   rax,rax
   510ac:	mov    rbx,rax
   510af:	jne    51080 <g_str_equal@plt+0x43dc0>
   510b1:	mov    rdi,r13
   510b4:	call   2ee00 <g_str_equal@plt+0x21b40>
   510b9:	cmp    rax,r12
   510bc:	jne    510c8 <g_str_equal@plt+0x43e08>
   510be:	mov    ebx,r15d
   510c1:	jmp    5105d <g_str_equal@plt+0x43d9d>
   510c3:	nop    DWORD PTR [rax+rax*1+0x0]
   510c8:	mov    ebx,0xffffffea
   510cd:	jmp    5105d <g_str_equal@plt+0x43d9d>
   510cf:	lea    rcx,[rip+0x16a8a]        # 67b60 <_fini@@Base+0x1540c>
   510d6:	lea    rsi,[rip+0x16883]        # 67960 <_fini@@Base+0x1520c>
   510dd:	lea    rdi,[rip+0x16954]        # 67a38 <_fini@@Base+0x152e4>
   510e4:	mov    edx,0x256
   510e9:	call   c390 <__assert_fail@plt>
   510ee:	xchg   ax,ax
   510f0:	push   r14
   510f2:	push   r13
   510f4:	mov    r14,rdi
   510f7:	push   r12
   510f9:	push   rbp
   510fa:	mov    rdi,rsi
   510fd:	push   rbx
   510fe:	mov    rbp,rsi
   51101:	mov    r13d,edx
   51104:	call   2f0b0 <g_str_equal@plt+0x21df0>
   51109:	test   rax,rax
   5110c:	je     5116e <g_str_equal@plt+0x43eae>
   5110e:	mov    rbx,rax
   51111:	jmp    51144 <g_str_equal@plt+0x43e84>
   51113:	nop    DWORD PTR [rax+rax*1+0x0]
   51118:	mov    rdx,QWORD PTR [rbx+0x8]
   5111c:	test   rdx,rdx
   5111f:	je     51126 <g_str_equal@plt+0x43e66>
   51121:	add    QWORD PTR [rdx+0x8],0x1
   51126:	mov    rsi,QWORD PTR [rbx]
   51129:	mov    rdi,r14
   5112c:	call   2eb90 <g_str_equal@plt+0x218d0>
   51131:	mov    rsi,QWORD PTR [rbx]
   51134:	mov    rdi,rbp
   51137:	mov    rbx,r12
   5113a:	call   2f1e0 <g_str_equal@plt+0x21f20>
   5113f:	test   r12,r12
   51142:	je     5116e <g_str_equal@plt+0x43eae>
   51144:	mov    rsi,rbx
   51147:	mov    rdi,rbp
   5114a:	call   2f0e0 <g_str_equal@plt+0x21e20>
   5114f:	test   r13b,r13b
   51152:	mov    r12,rax
   51155:	jne    51118 <g_str_equal@plt+0x43e58>
   51157:	mov    rsi,QWORD PTR [rbx]
   5115a:	mov    rdi,r14
   5115d:	call   2eda0 <g_str_equal@plt+0x21ae0>
   51162:	test   eax,eax
   51164:	je     51118 <g_str_equal@plt+0x43e58>
   51166:	test   r12,r12
   51169:	mov    rbx,r12
   5116c:	jne    51144 <g_str_equal@plt+0x43e84>
   5116e:	pop    rbx
   5116f:	pop    rbp
   51170:	pop    r12
   51172:	pop    r13
   51174:	pop    r14
   51176:	ret    
   51177:	nop    WORD PTR [rax+rax*1+0x0]
   51180:	push   r12
   51182:	push   rbp
   51183:	push   rbx
   51184:	mov    rbx,rsi
   51187:	mov    rsi,QWORD PTR [rsi]
   5118a:	test   rsi,rsi
   5118d:	je     51204 <g_str_equal@plt+0x43f44>
   5118f:	mov    rbp,rdi
   51192:	mov    r12,rdx
   51195:	jmp    511ac <g_str_equal@plt+0x43eec>
   51197:	nop    WORD PTR [rax+rax*1+0x0]
   511a0:	add    rbx,0x10
   511a4:	mov    rsi,QWORD PTR [rbx]
   511a7:	test   rsi,rsi
   511aa:	je     51204 <g_str_equal@plt+0x43f44>
   511ac:	mov    rdi,rbp
   511af:	call   2eda0 <g_str_equal@plt+0x21ae0>
   511b4:	test   eax,eax
   511b6:	je     511a0 <g_str_equal@plt+0x43ee0>
   511b8:	mov    rsi,QWORD PTR [rbx+0x8]
   511bc:	mov    rdi,rbp
   511bf:	call   2eda0 <g_str_equal@plt+0x21ae0>
   511c4:	test   eax,eax
   511c6:	jne    51210 <g_str_equal@plt+0x43f50>
   511c8:	mov    rsi,QWORD PTR [rbx]
   511cb:	mov    rdi,rbp
   511ce:	call   2ed40 <g_str_equal@plt+0x21a80>
   511d3:	test   rax,rax
   511d6:	je     511dd <g_str_equal@plt+0x43f1d>
   511d8:	add    QWORD PTR [rax+0x8],0x1
   511dd:	mov    rsi,QWORD PTR [rbx+0x8]
   511e1:	mov    rdx,rax
   511e4:	mov    rdi,rbp
   511e7:	add    rbx,0x10
   511eb:	call   2eb90 <g_str_equal@plt+0x218d0>
   511f0:	mov    rsi,QWORD PTR [rbx-0x10]
   511f4:	mov    rdi,rbp
   511f7:	call   2f1e0 <g_str_equal@plt+0x21f20>
   511fc:	mov    rsi,QWORD PTR [rbx]
   511ff:	test   rsi,rsi
   51202:	jne    511ac <g_str_equal@plt+0x43eec>
   51204:	pop    rbx
   51205:	mov    eax,0x1
   5120a:	pop    rbp
   5120b:	pop    r12
   5120d:	ret    
   5120e:	xchg   ax,ax
   51210:	mov    r9,QWORD PTR [rbx+0x8]
   51214:	sub    rsp,0x8
   51218:	lea    r8,[rip+0x16851]        # 67a70 <_fini@@Base+0x1531c>
   5121f:	push   QWORD PTR [rbx]
   51221:	lea    rcx,[rip+0x16918]        # 67b40 <_fini@@Base+0x153ec>
   51228:	lea    rsi,[rip+0x16731]        # 67960 <_fini@@Base+0x1520c>
   5122f:	mov    edx,0x2b8
   51234:	mov    rdi,r12
   51237:	xor    eax,eax
   51239:	call   3a090 <g_str_equal@plt+0x2cdd0>
   5123e:	pop    rax
   5123f:	xor    eax,eax
   51241:	pop    rdx
   51242:	pop    rbx
   51243:	pop    rbp
   51244:	pop    r12
   51246:	ret    
   51247:	nop    WORD PTR [rax+rax*1+0x0]
   51250:	push   r15
   51252:	push   r14
   51254:	push   r13
   51256:	push   r12
   51258:	mov    r12,rdi
   5125b:	push   rbp
   5125c:	push   rbx
   5125d:	sub    rsp,0x18
   51261:	mov    QWORD PTR [rsp+0x8],rsi
   51266:	call   2f0b0 <g_str_equal@plt+0x21df0>
   5126b:	test   rax,rax
   5126e:	je     513e0 <g_str_equal@plt+0x44120>
   51274:	mov    rdi,QWORD PTR [rax+0x8]
   51278:	mov    r15,rax
   5127b:	mov    eax,DWORD PTR [rdi]
   5127d:	lea    edx,[rax-0x1]
   51280:	cmp    edx,0x5
   51283:	ja     513f5 <g_str_equal@plt+0x44135>
   51289:	xor    ebx,ebx
   5128b:	lea    r14,[rip+0x113a6]        # 62638 <_fini@@Base+0xfee4>
   51292:	lea    r13,[rip+0x113a3]        # 6263c <_fini@@Base+0xfee8>
   51299:	jmp    512fd <g_str_equal@plt+0x4403d>
   5129b:	nop    DWORD PTR [rax+rax*1+0x0]
   512a0:	cmp    eax,0x6
   512a3:	jne    512d8 <g_str_equal@plt+0x44018>
   512a5:	call   2f940 <g_str_equal@plt+0x22680>
   512aa:	mov    rdx,r13
   512ad:	test   al,al
   512af:	cmovne rdx,r14
   512b3:	xor    ebp,ebp
   512b5:	test   rbx,rbx
   512b8:	je     51312 <g_str_equal@plt+0x44052>
   512ba:	mov    rdi,rdx
   512bd:	call   2e7b0 <g_str_equal@plt+0x214f0>
   512c2:	mov    rsi,QWORD PTR [r15]
   512c5:	mov    rdi,rbx
   512c8:	mov    rdx,rax
   512cb:	call   2eb90 <g_str_equal@plt+0x218d0>
   512d0:	mov    rdi,rbp
   512d3:	call   d2b0 <g_free@plt>
   512d8:	mov    rsi,r15
   512db:	mov    rdi,r12
   512de:	call   2f0e0 <g_str_equal@plt+0x21e20>
   512e3:	test   rax,rax
   512e6:	mov    r15,rax
   512e9:	je     51330 <g_str_equal@plt+0x44070>
   512eb:	mov    rdi,QWORD PTR [r15+0x8]
   512ef:	mov    eax,DWORD PTR [rdi]
   512f1:	lea    edx,[rax-0x1]
   512f4:	cmp    edx,0x5
   512f7:	ja     513f5 <g_str_equal@plt+0x44135>
   512fd:	cmp    eax,0x2
   51300:	jne    512a0 <g_str_equal@plt+0x43fe0>
   51302:	call   2e3b0 <g_str_equal@plt+0x210f0>
   51307:	test   rbx,rbx
   5130a:	mov    rbp,rax
   5130d:	mov    rdx,rax
   51310:	jne    512ba <g_str_equal@plt+0x43ffa>
   51312:	mov    rdi,r12
   51315:	mov    QWORD PTR [rsp],rdx
   51319:	call   2f150 <g_str_equal@plt+0x21e90>
   5131e:	mov    rdx,QWORD PTR [rsp]
   51322:	mov    rbx,rax
   51325:	jmp    512ba <g_str_equal@plt+0x43ffa>
   51327:	nop    WORD PTR [rax+rax*1+0x0]
   51330:	test   rbx,rbx
   51333:	je     513e0 <g_str_equal@plt+0x44120>
   51339:	mov    rsi,QWORD PTR [rsp+0x8]
   5133e:	mov    rdi,rbx
   51341:	call   508e0 <g_str_equal@plt+0x43620>
   51346:	mov    rbp,rax
   51349:	mov    rax,QWORD PTR [rbx+0x8]
   5134d:	test   rax,rax
   51350:	je     51414 <g_str_equal@plt+0x44154>
   51356:	sub    rax,0x1
   5135a:	test   rax,rax
   5135d:	mov    QWORD PTR [rbx+0x8],rax
   51361:	je     513a0 <g_str_equal@plt+0x440e0>
   51363:	test   rbp,rbp
   51366:	je     513ad <g_str_equal@plt+0x440ed>
   51368:	mov    rdi,rbp
   5136b:	call   2b0f0 <g_str_equal@plt+0x1de30>
   51370:	mov    rdx,QWORD PTR [rbp+0x8]
   51374:	test   rdx,rdx
   51377:	je     51414 <g_str_equal@plt+0x44154>
   5137d:	sub    rdx,0x1
   51381:	test   rdx,rdx
   51384:	mov    QWORD PTR [rbp+0x8],rdx
   51388:	je     513c0 <g_str_equal@plt+0x44100>
   5138a:	add    rsp,0x18
   5138e:	pop    rbx
   5138f:	pop    rbp
   51390:	pop    r12
   51392:	pop    r13
   51394:	pop    r14
   51396:	pop    r15
   51398:	ret    
   51399:	nop    DWORD PTR [rax+0x0]
   513a0:	mov    rdi,rbx
   513a3:	call   30300 <g_str_equal@plt+0x23040>
   513a8:	test   rbp,rbp
   513ab:	jne    51368 <g_str_equal@plt+0x440a8>
   513ad:	add    rsp,0x18
   513b1:	xor    eax,eax
   513b3:	pop    rbx
   513b4:	pop    rbp
   513b5:	pop    r12
   513b7:	pop    r13
   513b9:	pop    r14
   513bb:	pop    r15
   513bd:	ret    
   513be:	xchg   ax,ax
   513c0:	mov    rdi,rbp
   513c3:	mov    QWORD PTR [rsp],rax
   513c7:	call   30300 <g_str_equal@plt+0x23040>
   513cc:	mov    rax,QWORD PTR [rsp]
   513d0:	add    rsp,0x18
   513d4:	pop    rbx
   513d5:	pop    rbp
   513d6:	pop    r12
   513d8:	pop    r13
   513da:	pop    r14
   513dc:	pop    r15
   513de:	ret    
   513df:	nop
   513e0:	mov    rsi,QWORD PTR [rsp+0x8]
   513e5:	mov    rdi,r12
   513e8:	call   508e0 <g_str_equal@plt+0x43620>
   513ed:	mov    rbp,rax
   513f0:	jmp    51363 <g_str_equal@plt+0x440a3>
   513f5:	lea    rcx,[rip+0x1682c]        # 67c28 <_fini@@Base+0x154d4>
   513fc:	lea    rsi,[rip+0xc295]        # 5d698 <_fini@@Base+0xaf44>
   51403:	lea    rdi,[rip+0xc2d6]        # 5d6e0 <_fini@@Base+0xaf8c>
   5140a:	mov    edx,0x7f
   5140f:	call   c390 <__assert_fail@plt>
   51414:	call   d5ec <g_str_equal@plt+0x32c>
   51419:	nop    DWORD PTR [rax+0x0]
   51420:	cmp    rsi,0x7
   51424:	jbe    514b8 <g_str_equal@plt+0x441f8>
   5142a:	lea    rcx,[rdi+0x8]
   5142e:	lea    r8,[rdi+rsi*1]
   51432:	mov    rax,QWORD PTR [rdi]
   51435:	and    rcx,0xfffffffffffffff8
   51439:	and    r8,0xfffffffffffffff8
   5143d:	lea    rdx,[rcx+0x40]
   51441:	cmp    rdx,r8
   51444:	ja     514d8 <g_str_equal@plt+0x44218>
   5144a:	test   rax,rax
   5144d:	prefetcht0 BYTE PTR [rdx]
   51450:	je     51463 <g_str_equal@plt+0x441a3>
   51452:	jmp    514b0 <g_str_equal@plt+0x441f0>
   51454:	nop    DWORD PTR [rax+0x0]
   51458:	test   rax,rax
   5145b:	prefetcht0 BYTE PTR [rcx]
   5145e:	mov    rdx,rcx
   51461:	jne    514b0 <g_str_equal@plt+0x441f0>
   51463:	mov    rax,QWORD PTR [rdx-0x40]
   51467:	or     rax,QWORD PTR [rdx-0x38]
   5146b:	lea    rcx,[rdx+0x40]
   5146f:	or     rax,QWORD PTR [rdx-0x30]
   51473:	or     rax,QWORD PTR [rdx-0x28]
   51477:	or     rax,QWORD PTR [rdx-0x20]
   5147b:	or     rax,QWORD PTR [rdx-0x18]
   5147f:	or     rax,QWORD PTR [rdx-0x10]
   51483:	or     rax,QWORD PTR [rdx-0x8]
   51487:	cmp    rcx,r8
   5148a:	jbe    51458 <g_str_equal@plt+0x44198>
   5148c:	jmp    51498 <g_str_equal@plt+0x441d8>
   5148e:	xchg   ax,ax
   51490:	add    rdx,0x8
   51494:	or     rax,QWORD PTR [rdx-0x8]
   51498:	cmp    r8,rdx
   5149b:	ja     51490 <g_str_equal@plt+0x441d0>
   5149d:	or     rax,QWORD PTR [rdi+rsi*1-0x8]
   514a2:	sete   al
   514a5:	ret    
   514a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   514b0:	xor    eax,eax
   514b2:	ret    
   514b3:	nop    DWORD PTR [rax+rax*1+0x0]
   514b8:	add    rsi,rdi
   514bb:	xor    eax,eax
   514bd:	nop    DWORD PTR [rax]
   514c0:	add    rdi,0x1
   514c4:	or     al,BYTE PTR [rdi-0x1]
   514c7:	cmp    rsi,rdi
   514ca:	ja     514c0 <g_str_equal@plt+0x44200>
   514cc:	test   al,al
   514ce:	sete   al
   514d1:	ret    
   514d2:	nop    WORD PTR [rax+rax*1+0x0]
   514d8:	mov    rdx,rcx
   514db:	jmp    51498 <g_str_equal@plt+0x441d8>
   514dd:	nop    DWORD PTR [rax]
   514e0:	vmovdqu xmm1,XMMWORD PTR [rdi]
   514e4:	lea    rax,[rdi+0xa0]
   514eb:	lea    rdx,[rdi+rsi*1]
   514ef:	vinserti128 ymm1,ymm1,XMMWORD PTR [rdi+0x10],0x1
   514f6:	and    rax,0xffffffffffffffe0
   514fa:	and    rdx,0xffffffffffffffe0
   514fe:	cmp    rax,rdx
   51501:	vmovdqa ymm0,ymm1
   51505:	jbe    51536 <g_str_equal@plt+0x44276>
   51507:	jmp    51550 <g_str_equal@plt+0x44290>
   51509:	nop    DWORD PTR [rax+0x0]
   51510:	vmovdqa ymm0,YMMWORD PTR [rax-0x80]
   51515:	sub    rax,0xffffffffffffff80
   51519:	vpor   ymm0,ymm0,YMMWORD PTR [rax-0xe0]
   51521:	vpor   ymm0,ymm0,YMMWORD PTR [rax-0xc0]
   51529:	vpor   ymm0,ymm0,YMMWORD PTR [rax-0xa0]
   51531:	cmp    rdx,rax
   51534:	jb     51570 <g_str_equal@plt+0x442b0>
   51536:	vptest ymm0,ymm0
   5153b:	prefetcht0 BYTE PTR [rax]
   5153e:	je     51510 <g_str_equal@plt+0x44250>
   51540:	xor    eax,eax
   51542:	vzeroupper 
   51545:	ret    
   51546:	nop    WORD PTR cs:[rax+rax*1+0x0]
   51550:	vmovdqu xmm0,XMMWORD PTR [rdi+0x20]
   51555:	cmp    rsi,0x80
   5155c:	vinserti128 ymm0,ymm0,XMMWORD PTR [rdi+0x30],0x1
   51563:	vpor   ymm0,ymm0,ymm1
   51567:	jbe    51594 <g_str_equal@plt+0x442d4>
   51569:	nop    DWORD PTR [rax+0x0]
   51570:	vmovdqu xmm1,XMMWORD PTR [rdi+rsi*1-0x80]
   51576:	vinserti128 ymm2,ymm1,XMMWORD PTR [rdi+rsi*1-0x70],0x1
   5157e:	vmovdqu xmm1,XMMWORD PTR [rdi+rsi*1-0x60]
   51584:	vinserti128 ymm1,ymm1,XMMWORD PTR [rdi+rsi*1-0x50],0x1
   5158c:	vpor   ymm1,ymm1,ymm2
   51590:	vpor   ymm0,ymm0,ymm1
   51594:	vmovdqu xmm1,XMMWORD PTR [rdi+rsi*1-0x40]
   5159a:	vinserti128 ymm2,ymm1,XMMWORD PTR [rdi+rsi*1-0x30],0x1
   515a2:	vmovdqu xmm1,XMMWORD PTR [rdi+rsi*1-0x20]
   515a8:	vinserti128 ymm1,ymm1,XMMWORD PTR [rdi+rsi*1-0x10],0x1
   515b0:	vpor   ymm1,ymm1,ymm2
   515b4:	vpor   ymm0,ymm1,ymm0
   515b8:	vptest ymm0,ymm0
   515bd:	sete   al
   515c0:	vzeroupper 
   515c3:	ret    
   515c4:	xchg   ax,ax
   515c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   515d0:	lea    rax,[rdi+0x50]
   515d4:	lea    rdx,[rdi+rsi*1]
   515d8:	movdqu xmm1,XMMWORD PTR [rdi]
   515dc:	and    rax,0xfffffffffffffff0
   515e0:	and    rdx,0xfffffffffffffff0
   515e4:	cmp    rax,rdx
   515e7:	movdqa xmm0,xmm1
   515eb:	ja     51627 <g_str_equal@plt+0x44367>
   515ed:	ptest  xmm1,xmm1
   515f2:	prefetcht0 BYTE PTR [rax]
   515f5:	je     5160a <g_str_equal@plt+0x4434a>
   515f7:	jmp    51650 <g_str_equal@plt+0x44390>
   515f9:	nop    DWORD PTR [rax+0x0]
   51600:	ptest  xmm0,xmm0
   51605:	prefetcht0 BYTE PTR [rax]
   51608:	jne    51650 <g_str_equal@plt+0x44390>
   5160a:	movdqa xmm0,XMMWORD PTR [rax-0x40]
   5160f:	add    rax,0x40
   51613:	por    xmm0,XMMWORD PTR [rax-0x70]
   51618:	por    xmm0,XMMWORD PTR [rax-0x60]
   5161d:	por    xmm0,XMMWORD PTR [rax-0x50]
   51622:	cmp    rdx,rax
   51625:	jae    51600 <g_str_equal@plt+0x44340>
   51627:	movdqa xmm1,XMMWORD PTR [rdx-0x30]
   5162c:	por    xmm1,XMMWORD PTR [rdx-0x20]
   51631:	movdqu xmm2,XMMWORD PTR [rdi+rsi*1-0x10]
   51637:	por    xmm1,xmm2
   5163b:	por    xmm1,XMMWORD PTR [rdx-0x10]
   51640:	por    xmm0,xmm1
   51644:	ptest  xmm0,xmm0
   51649:	sete   al
   5164c:	ret    
   5164d:	nop    DWORD PTR [rax]
   51650:	xor    eax,eax
   51652:	ret    
   51653:	nop    DWORD PTR [rax]
   51656:	nop    WORD PTR cs:[rax+rax*1+0x0]
   51660:	lea    rdx,[rdi+0x50]
   51664:	lea    rcx,[rdi+rsi*1]
   51668:	movdqu xmm1,XMMWORD PTR [rdi]
   5166c:	and    rdx,0xfffffffffffffff0
   51670:	and    rcx,0xfffffffffffffff0
   51674:	cmp    rdx,rcx
   51677:	movdqa xmm0,xmm1
   5167b:	ja     516cf <g_str_equal@plt+0x4440f>
   5167d:	pxor   xmm0,xmm0
   51681:	prefetcht0 BYTE PTR [rdx]
   51684:	pcmpeqb xmm1,xmm0
   51688:	pmovmskb eax,xmm1
   5168c:	cmp    eax,0xffff
   51691:	jne    51708 <g_str_equal@plt+0x44448>
   51693:	movdqa xmm1,xmm0
   51697:	jmp    516b2 <g_str_equal@plt+0x443f2>
   51699:	nop    DWORD PTR [rax+0x0]
   516a0:	pcmpeqb xmm0,xmm1
   516a4:	prefetcht0 BYTE PTR [rdx]
   516a7:	pmovmskb eax,xmm0
   516ab:	cmp    eax,0xffff
   516b0:	jne    51708 <g_str_equal@plt+0x44448>
   516b2:	movdqa xmm0,XMMWORD PTR [rdx-0x40]
   516b7:	add    rdx,0x40
   516bb:	por    xmm0,XMMWORD PTR [rdx-0x70]
   516c0:	por    xmm0,XMMWORD PTR [rdx-0x60]
   516c5:	por    xmm0,XMMWORD PTR [rdx-0x50]
   516ca:	cmp    rcx,rdx
   516cd:	jae    516a0 <g_str_equal@plt+0x443e0>
   516cf:	movdqa xmm2,XMMWORD PTR [rcx-0x30]
   516d4:	por    xmm2,XMMWORD PTR [rcx-0x20]
   516d9:	movdqu xmm1,XMMWORD PTR [rdi+rsi*1-0x10]
   516df:	por    xmm1,xmm2
   516e3:	por    xmm1,XMMWORD PTR [rcx-0x10]
   516e8:	por    xmm0,xmm1
   516ec:	pxor   xmm1,xmm1
   516f0:	pcmpeqb xmm0,xmm1
   516f4:	pmovmskb eax,xmm0
   516f8:	cmp    eax,0xffff
   516fd:	sete   al
   51700:	ret    
   51701:	nop    DWORD PTR [rax+0x0]
   51708:	xor    eax,eax
   5170a:	ret    
   5170b:	nop    DWORD PTR [rax+rax*1+0x0]
   51710:	mov    ecx,DWORD PTR [rip+0x23598a]        # 2870a0 <stdout@@GLIBC_2.2.5+0x2758>
   51716:	xor    eax,eax
   51718:	test   ecx,ecx
   5171a:	je     51764 <g_str_equal@plt+0x444a4>
   5171c:	lea    edx,[rcx-0x1]
   5171f:	lea    rax,[rip+0xfffffffffffffcfa]        # 51420 <g_str_equal@plt+0x44160>
   51726:	and    edx,ecx
   51728:	lea    rcx,[rip+0xffffffffffffff31]        # 51660 <g_str_equal@plt+0x443a0>
   5172f:	test   dl,0x4
   51732:	mov    DWORD PTR [rip+0x235968],edx        # 2870a0 <stdout@@GLIBC_2.2.5+0x2758>
   51738:	cmovne rax,rcx
   5173c:	lea    rcx,[rip+0xfffffffffffffe8d]        # 515d0 <g_str_equal@plt+0x44310>
   51743:	test   dl,0x2
   51746:	cmovne rax,rcx
   5174a:	and    edx,0x1
   5174d:	lea    rdx,[rip+0xfffffffffffffd8c]        # 514e0 <g_str_equal@plt+0x44220>
   51754:	cmovne rax,rdx
   51758:	mov    QWORD PTR [rip+0x2331a1],rax        # 284900 <g_test_config_vars+0x3540>
   5175f:	mov    eax,0x1
   51764:	repz ret 
   51766:	nop    WORD PTR cs:[rax+rax*1+0x0]
   51770:	test   rsi,rsi
   51773:	je     51788 <g_str_equal@plt+0x444c8>
   51775:	cmp    rsi,0x3f
   51779:	prefetcht0 BYTE PTR [rdi]
   5177c:	jbe    51790 <g_str_equal@plt+0x444d0>
   5177e:	jmp    QWORD PTR [rip+0x23317c]        # 284900 <g_test_config_vars+0x3540>
   51784:	nop    DWORD PTR [rax+0x0]
   51788:	mov    eax,0x1
   5178d:	ret    
   5178e:	xchg   ax,ax
   51790:	jmp    51420 <g_str_equal@plt+0x44160>
   51795:	nop    WORD PTR cs:[rax+rax*1+0x0]
   5179f:	nop
   517a0:	push   r12
   517a2:	push   rbp
   517a3:	push   rbx
   517a4:	mov    rbx,rdi
   517a7:	sub    rsp,0x20
   517ab:	mov    ecx,DWORD PTR [rip+0x233327]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   517b1:	mov    rax,QWORD PTR fs:0x28
   517ba:	mov    QWORD PTR [rsp+0x18],rax
   517bf:	xor    eax,eax
   517c1:	test   ecx,ecx
   517c3:	jne    51808 <g_str_equal@plt+0x44548>
   517c5:	sub    rsp,0x8
   517c9:	xor    r9d,r9d
   517cc:	xor    r8d,r8d
   517cf:	push   0x0
   517d1:	mov    edx,0x1
   517d6:	xor    eax,eax
   517d8:	mov    ecx,0x1
   517dd:	mov    rsi,rbx
   517e0:	mov    edi,0xca
   517e5:	call   c8e0 <syscall@plt>
   517ea:	pop    rax
   517eb:	pop    rdx
   517ec:	mov    rax,QWORD PTR [rsp+0x18]
   517f1:	xor    rax,QWORD PTR fs:0x28
   517fa:	jne    51851 <g_str_equal@plt+0x44591>
   517fc:	add    rsp,0x20
   51800:	pop    rbx
   51801:	pop    rbp
   51802:	pop    r12
   51804:	ret    
   51805:	nop    DWORD PTR [rax]
   51808:	cmp    WORD PTR [rip+0x235834],0x0        # 287044 <stdout@@GLIBC_2.2.5+0x26fc>
   51810:	je     517c5 <g_str_equal@plt+0x44505>
   51812:	test   BYTE PTR [rip+0x234688],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   51819:	je     517c5 <g_str_equal@plt+0x44505>
   5181b:	mov    rdi,rsp
   5181e:	xor    esi,esi
   51820:	call   c3e0 <gettimeofday@plt>
   51825:	mov    r12,QWORD PTR [rsp+0x8]
   5182a:	mov    rbp,QWORD PTR [rsp]
   5182e:	call   c5b0 <getpid@plt>
   51833:	lea    rdi,[rip+0x163fe]        # 67c38 <_fini@@Base+0x154e4>
   5183a:	mov    esi,eax
   5183c:	mov    r8,rbx
   5183f:	mov    rcx,r12
   51842:	mov    rdx,rbp
   51845:	xor    eax,eax
   51847:	call   431a0 <g_str_equal@plt+0x35ee0>
   5184c:	jmp    517c5 <g_str_equal@plt+0x44505>
   51851:	call   cd30 <__stack_chk_fail@plt>
   51856:	nop    WORD PTR cs:[rax+rax*1+0x0]
   51860:	push   r15
   51862:	push   r14
   51864:	push   r13
   51866:	push   r12
   51868:	mov    r13,rcx
   5186b:	push   rbp
   5186c:	push   rbx
   5186d:	mov    rbp,rdi
   51870:	mov    r12,rsi
   51873:	sub    rsp,0x38
   51877:	mov    ebx,DWORD PTR [rsi]
   51879:	mov    rax,QWORD PTR fs:0x28
   51882:	mov    QWORD PTR [rsp+0x28],rax
   51887:	xor    eax,eax
   51889:	test   bl,0x3
   5188c:	je     51a60 <g_str_equal@plt+0x447a0>
   51892:	lea    r14,[rsp+0x10]
   51897:	nop    WORD PTR [rax+rax*1+0x0]
   518a0:	mov    eax,ebx
   518a2:	and    eax,0x3
   518a5:	je     51990 <g_str_equal@plt+0x446d0>
   518ab:	cmp    eax,0x1
   518ae:	je     519b8 <g_str_equal@plt+0x446f8>
   518b4:	cmp    eax,0x2
   518b7:	jne    51b71 <g_str_equal@plt+0x448b1>
   518bd:	mov    BYTE PTR [r13+0x0],0x1
   518c2:	mov    r15d,DWORD PTR [rip+0x23320f]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   518c9:	mov    ebx,DWORD PTR [r12]
   518cd:	test   r15d,r15d
   518d0:	jne    519e8 <g_str_equal@plt+0x44728>
   518d6:	sub    rsp,0x8
   518da:	xor    r9d,r9d
   518dd:	xor    r8d,r8d
   518e0:	push   0x0
   518e2:	xor    edx,edx
   518e4:	xor    eax,eax
   518e6:	mov    ecx,ebx
   518e8:	mov    rsi,rbp
   518eb:	mov    edi,0xca
   518f0:	call   c8e0 <syscall@plt>
   518f5:	test   rax,rax
   518f8:	pop    r10
   518fa:	pop    r11
   518fc:	je     51913 <g_str_equal@plt+0x44653>
   518fe:	call   cc80 <__errno_location@plt>
   51903:	mov    eax,DWORD PTR [rax]
   51905:	cmp    eax,0x4
   51908:	je     518d6 <g_str_equal@plt+0x44616>
   5190a:	cmp    eax,0xb
   5190d:	jne    51b71 <g_str_equal@plt+0x448b1>
   51913:	mov    ebx,DWORD PTR [rbp+0x0]
   51916:	mov    DWORD PTR [r12],ebx
   5191a:	mov    r9d,DWORD PTR [rip+0x2331b7]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   51921:	test   r9d,r9d
   51924:	je     518a0 <g_str_equal@plt+0x445e0>
   5192a:	cmp    WORD PTR [rip+0x235714],0x0        # 287046 <stdout@@GLIBC_2.2.5+0x26fe>
   51932:	je     518a0 <g_str_equal@plt+0x445e0>
   51938:	test   BYTE PTR [rip+0x234562],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   5193f:	je     518a0 <g_str_equal@plt+0x445e0>
   51945:	xor    esi,esi
   51947:	mov    rdi,r14
   5194a:	call   c3e0 <gettimeofday@plt>
   5194f:	mov    rcx,QWORD PTR [rsp+0x18]
   51954:	mov    r15,QWORD PTR [rsp+0x10]
   51959:	mov    QWORD PTR [rsp],rcx
   5195d:	call   c5b0 <getpid@plt>
   51962:	mov    rcx,QWORD PTR [rsp]
   51966:	lea    rdi,[rip+0x163a3]        # 67d10 <_fini@@Base+0x155bc>
   5196d:	mov    r9d,ebx
   51970:	mov    esi,eax
   51972:	mov    r8,rbp
   51975:	xor    eax,eax
   51977:	mov    rdx,r15
   5197a:	call   431a0 <g_str_equal@plt+0x35ee0>
   5197f:	mov    ebx,DWORD PTR [r12]
   51983:	mov    eax,ebx
   51985:	and    eax,0x3
   51988:	jne    518ab <g_str_equal@plt+0x445eb>
   5198e:	xchg   ax,ax
   51990:	xor    eax,eax
   51992:	mov    rdx,QWORD PTR [rsp+0x28]
   51997:	xor    rdx,QWORD PTR fs:0x28
   519a0:	jne    51bd5 <g_str_equal@plt+0x44915>
   519a6:	add    rsp,0x38
   519aa:	pop    rbx
   519ab:	pop    rbp
   519ac:	pop    r12
   519ae:	pop    r13
   519b0:	pop    r14
   519b2:	pop    r15
   519b4:	ret    
   519b5:	nop    DWORD PTR [rax]
   519b8:	mov    ecx,DWORD PTR [rip+0x23311a]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   519be:	lea    r15d,[rbx+0x1]
   519c2:	test   ecx,ecx
   519c4:	jne    51a8a <g_str_equal@plt+0x447ca>
   519ca:	mov    eax,ebx
   519cc:	lock cmpxchg DWORD PTR [rbp+0x0],r15d
   519d2:	cmp    eax,ebx
   519d4:	je     51a50 <g_str_equal@plt+0x44790>
   519d6:	mov    DWORD PTR [r12],eax
   519da:	mov    ebx,eax
   519dc:	jmp    518a0 <g_str_equal@plt+0x445e0>
   519e1:	nop    DWORD PTR [rax+0x0]
   519e8:	cmp    WORD PTR [rip+0x235658],0x0        # 287048 <stdout@@GLIBC_2.2.5+0x2700>
   519f0:	je     518d6 <g_str_equal@plt+0x44616>
   519f6:	test   BYTE PTR [rip+0x2344a4],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   519fd:	je     518d6 <g_str_equal@plt+0x44616>
   51a03:	xor    esi,esi
   51a05:	mov    rdi,r14
   51a08:	call   c3e0 <gettimeofday@plt>
   51a0d:	mov    rcx,QWORD PTR [rsp+0x18]
   51a12:	mov    r15,QWORD PTR [rsp+0x10]
   51a17:	mov    QWORD PTR [rsp],rcx
   51a1b:	call   c5b0 <getpid@plt>
   51a20:	mov    rcx,QWORD PTR [rsp]
   51a24:	lea    rdi,[rip+0x162a5]        # 67cd0 <_fini@@Base+0x1557c>
   51a2b:	mov    r9d,ebx
   51a2e:	mov    esi,eax
   51a30:	mov    r8,rbp
   51a33:	mov    rdx,r15
   51a36:	xor    eax,eax
   51a38:	call   431a0 <g_str_equal@plt+0x35ee0>
   51a3d:	mov    ebx,DWORD PTR [r12]
   51a41:	jmp    518d6 <g_str_equal@plt+0x44616>
   51a46:	nop    WORD PTR cs:[rax+rax*1+0x0]
   51a50:	mov    DWORD PTR [r12],r15d
   51a54:	mov    ebx,r15d
   51a57:	jmp    518a0 <g_str_equal@plt+0x445e0>
   51a5c:	nop    DWORD PTR [rax+0x0]
   51a60:	mov    r8d,DWORD PTR [rip+0x233071]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   51a67:	mov    r14d,edx
   51a6a:	test   r8d,r8d
   51a6d:	jne    51b0c <g_str_equal@plt+0x4484c>
   51a73:	mov    eax,ebx
   51a75:	lock cmpxchg DWORD PTR [rbp+0x0],r14d
   51a7b:	cmp    ebx,eax
   51a7d:	mov    DWORD PTR [r12],eax
   51a81:	je     51af4 <g_str_equal@plt+0x44834>
   51a83:	mov    ebx,eax
   51a85:	jmp    51892 <g_str_equal@plt+0x445d2>
   51a8a:	cmp    WORD PTR [rip+0x2355b8],0x0        # 28704a <stdout@@GLIBC_2.2.5+0x2702>
   51a92:	je     519ca <g_str_equal@plt+0x4470a>
   51a98:	test   BYTE PTR [rip+0x234402],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   51a9f:	je     519ca <g_str_equal@plt+0x4470a>
   51aa5:	xor    esi,esi
   51aa7:	mov    rdi,r14
   51aaa:	call   c3e0 <gettimeofday@plt>
   51aaf:	mov    rcx,QWORD PTR [rsp+0x18]
   51ab4:	mov    rdx,QWORD PTR [rsp+0x10]
   51ab9:	mov    QWORD PTR [rsp+0x8],rcx
   51abe:	mov    QWORD PTR [rsp],rdx
   51ac2:	call   c5b0 <getpid@plt>
   51ac7:	sub    rsp,0x8
   51acb:	lea    rdi,[rip+0x161ae]        # 67c80 <_fini@@Base+0x1552c>
   51ad2:	mov    esi,eax
   51ad4:	push   r15
   51ad6:	mov    rcx,QWORD PTR [rsp+0x18]
   51adb:	mov    r9d,ebx
   51ade:	mov    rdx,QWORD PTR [rsp+0x10]
   51ae3:	mov    r8,rbp
   51ae6:	xor    eax,eax
   51ae8:	call   431a0 <g_str_equal@plt+0x35ee0>
   51aed:	pop    rax
   51aee:	pop    rdx
   51aef:	jmp    519ca <g_str_equal@plt+0x4470a>
   51af4:	mov    ecx,DWORD PTR [rip+0x232fde]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   51afa:	test   ecx,ecx
   51afc:	jne    51b76 <g_str_equal@plt+0x448b6>
   51afe:	mov    DWORD PTR [r12],r14d
   51b02:	mov    eax,0x1
   51b07:	jmp    51992 <g_str_equal@plt+0x446d2>
   51b0c:	cmp    WORD PTR [rip+0x23553e],0x0        # 287052 <stdout@@GLIBC_2.2.5+0x270a>
   51b14:	je     51a73 <g_str_equal@plt+0x447b3>
   51b1a:	test   BYTE PTR [rip+0x234380],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   51b21:	je     51a73 <g_str_equal@plt+0x447b3>
   51b27:	lea    rdi,[rsp+0x10]
   51b2c:	xor    esi,esi
   51b2e:	call   c3e0 <gettimeofday@plt>
   51b33:	mov    rcx,QWORD PTR [rsp+0x18]
   51b38:	mov    r15,QWORD PTR [rsp+0x10]
   51b3d:	mov    QWORD PTR [rsp],rcx
   51b41:	call   c5b0 <getpid@plt>
   51b46:	sub    rsp,0x8
   51b4a:	lea    rdi,[rip+0x16207]        # 67d58 <_fini@@Base+0x15604>
   51b51:	mov    esi,eax
   51b53:	push   r14
   51b55:	mov    rcx,QWORD PTR [rsp+0x10]
   51b5a:	mov    r9d,ebx
   51b5d:	mov    r8,rbp
   51b60:	mov    rdx,r15
   51b63:	xor    eax,eax
   51b65:	call   431a0 <g_str_equal@plt+0x35ee0>
   51b6a:	pop    rsi
   51b6b:	pop    rdi
   51b6c:	jmp    51a73 <g_str_equal@plt+0x447b3>
   51b71:	call   c270 <abort@plt>
   51b76:	cmp    WORD PTR [rip+0x2354d2],0x0        # 287050 <stdout@@GLIBC_2.2.5+0x2708>
   51b7e:	je     51afe <g_str_equal@plt+0x4483e>
   51b84:	test   BYTE PTR [rip+0x234316],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   51b8b:	je     51afe <g_str_equal@plt+0x4483e>
   51b91:	lea    rdi,[rsp+0x10]
   51b96:	xor    esi,esi
   51b98:	call   c3e0 <gettimeofday@plt>
   51b9d:	mov    r15,QWORD PTR [rsp+0x18]
   51ba2:	mov    r13,QWORD PTR [rsp+0x10]
   51ba7:	call   c5b0 <getpid@plt>
   51bac:	sub    rsp,0x8
   51bb0:	lea    rdi,[rip+0x161e9]        # 67da0 <_fini@@Base+0x1564c>
   51bb7:	mov    esi,eax
   51bb9:	push   r14
   51bbb:	mov    rdx,r13
   51bbe:	mov    r9d,ebx
   51bc1:	mov    r8,rbp
   51bc4:	mov    rcx,r15
   51bc7:	xor    eax,eax
   51bc9:	call   431a0 <g_str_equal@plt+0x35ee0>
   51bce:	pop    rax
   51bcf:	pop    rdx
   51bd0:	jmp    51afe <g_str_equal@plt+0x4483e>
   51bd5:	call   cd30 <__stack_chk_fail@plt>
   51bda:	nop    WORD PTR [rax+rax*1+0x0]
   51be0:	mov    DWORD PTR [rdi],0x0
   51be6:	ret    
   51be7:	nop    WORD PTR [rax+rax*1+0x0]
   51bf0:	repz ret 
   51bf2:	nop    DWORD PTR [rax+0x0]
   51bf6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   51c00:	push   r12
   51c02:	push   rbp
   51c03:	push   rbx
   51c04:	mov    rbx,rdi
   51c07:	sub    rsp,0x10
   51c0b:	mov    rax,QWORD PTR fs:0x28
   51c14:	mov    QWORD PTR [rsp+0x8],rax
   51c19:	xor    eax,eax
   51c1b:	mov    edx,DWORD PTR [rdi]
   51c1d:	lea    r12,[rsp+0x3]
   51c22:	mov    BYTE PTR [rsp+0x3],0x0
   51c27:	lea    rbp,[rsp+0x4]
   51c2c:	cmp    edx,0x3
   51c2f:	mov    DWORD PTR [rsp+0x4],edx
   51c33:	jle    51c50 <g_str_equal@plt+0x44990>
   51c35:	nop    DWORD PTR [rax]
   51c38:	lea    ecx,[rdx+0x4]
   51c3b:	mov    eax,edx
   51c3d:	lock cmpxchg DWORD PTR [rbx],ecx
   51c41:	cmp    eax,edx
   51c43:	mov    DWORD PTR [rsp+0x4],eax
   51c47:	je     51c70 <g_str_equal@plt+0x449b0>
   51c49:	mov    edx,eax
   51c4b:	cmp    edx,0x3
   51c4e:	jg     51c38 <g_str_equal@plt+0x44978>
   51c50:	mov    rcx,r12
   51c53:	mov    edx,0x4
   51c58:	mov    rsi,rbp
   51c5b:	mov    rdi,rbx
   51c5e:	call   51860 <g_str_equal@plt+0x445a0>
   51c63:	test   al,al
   51c65:	jne    51c70 <g_str_equal@plt+0x449b0>
   51c67:	mov    eax,DWORD PTR [rsp+0x4]
   51c6b:	mov    edx,eax
   51c6d:	jmp    51c4b <g_str_equal@plt+0x4498b>
   51c6f:	nop
   51c70:	cmp    BYTE PTR [rsp+0x3],0x0
   51c75:	je     51c7f <g_str_equal@plt+0x449bf>
   51c77:	mov    rdi,rbx
   51c7a:	call   517a0 <g_str_equal@plt+0x444e0>
   51c7f:	mov    rax,QWORD PTR [rsp+0x8]
   51c84:	xor    rax,QWORD PTR fs:0x28
   51c8d:	jne    51c98 <g_str_equal@plt+0x449d8>
   51c8f:	add    rsp,0x10
   51c93:	pop    rbx
   51c94:	pop    rbp
   51c95:	pop    r12
   51c97:	ret    
   51c98:	call   cd30 <__stack_chk_fail@plt>
   51c9d:	nop    DWORD PTR [rax]
   51ca0:	lock sub DWORD PTR [rdi],0x4
   51ca4:	ret    
   51ca5:	nop
   51ca6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   51cb0:	push   r14
   51cb2:	push   r13
   51cb4:	mov    r14d,0x1
   51cba:	push   r12
   51cbc:	push   rbp
   51cbd:	mov    r13,rdi
   51cc0:	push   rbx
   51cc1:	mov    r12d,0x2
   51cc7:	sub    rsp,0x10
   51ccb:	mov    rax,QWORD PTR fs:0x28
   51cd4:	mov    QWORD PTR [rsp+0x8],rax
   51cd9:	xor    eax,eax
   51cdb:	mov    edx,DWORD PTR [rdi]
   51cdd:	lea    rbp,[rsp+0x3]
   51ce2:	mov    BYTE PTR [rsp+0x3],0x0
   51ce7:	lea    rbx,[rsp+0x4]
   51cec:	cmp    edx,0x7
   51cef:	mov    DWORD PTR [rsp+0x4],edx
   51cf3:	jle    51d12 <g_str_equal@plt+0x44a52>
   51cf5:	nop    DWORD PTR [rax]
   51cf8:	lea    ecx,[rdx-0x4]
   51cfb:	mov    eax,edx
   51cfd:	lock cmpxchg DWORD PTR [r13+0x0],ecx
   51d03:	cmp    eax,edx
   51d05:	mov    DWORD PTR [rsp+0x4],eax
   51d09:	je     51d40 <g_str_equal@plt+0x44a80>
   51d0b:	mov    edx,eax
   51d0d:	cmp    edx,0x7
   51d10:	jg     51cf8 <g_str_equal@plt+0x44a38>
   51d12:	mov    rcx,rbp
   51d15:	mov    edx,r14d
   51d18:	mov    rsi,rbx
   51d1b:	mov    rdi,r13
   51d1e:	call   51860 <g_str_equal@plt+0x445a0>
   51d23:	test   al,al
   51d25:	jne    51d49 <g_str_equal@plt+0x44a89>
   51d27:	cmp    BYTE PTR [rsp+0x3],0x0
   51d2c:	mov    eax,DWORD PTR [rsp+0x4]
   51d30:	mov    edx,eax
   51d32:	cmovne r14d,r12d
   51d36:	jmp    51d0d <g_str_equal@plt+0x44a4d>
   51d38:	nop    DWORD PTR [rax+rax*1+0x0]
   51d40:	movzx  eax,BYTE PTR [rsp+0x3]
   51d45:	test   al,al
   51d47:	jne    51d70 <g_str_equal@plt+0x44ab0>
   51d49:	mov    rsi,QWORD PTR [rsp+0x8]
   51d4e:	xor    rsi,QWORD PTR fs:0x28
   51d57:	jne    51d7c <g_str_equal@plt+0x44abc>
   51d59:	add    rsp,0x10
   51d5d:	pop    rbx
   51d5e:	pop    rbp
   51d5f:	pop    r12
   51d61:	pop    r13
   51d63:	pop    r14
   51d65:	ret    
   51d66:	nop    WORD PTR cs:[rax+rax*1+0x0]
   51d70:	mov    rdi,r13
   51d73:	call   517a0 <g_str_equal@plt+0x444e0>
   51d78:	xor    eax,eax
   51d7a:	jmp    51d49 <g_str_equal@plt+0x44a89>
   51d7c:	call   cd30 <__stack_chk_fail@plt>
   51d81:	nop    DWORD PTR [rax+rax*1+0x0]
   51d86:	nop    WORD PTR cs:[rax+rax*1+0x0]
   51d90:	push   r14
   51d92:	push   r13
   51d94:	mov    r14d,0x2
   51d9a:	push   r12
   51d9c:	push   rbp
   51d9d:	mov    rbp,rdi
   51da0:	push   rbx
   51da1:	mov    ebx,0x1
   51da6:	sub    rsp,0x10
   51daa:	mov    rax,QWORD PTR fs:0x28
   51db3:	mov    QWORD PTR [rsp+0x8],rax
   51db8:	xor    eax,eax
   51dba:	mov    eax,DWORD PTR [rdi]
   51dbc:	lea    r13,[rsp+0x3]
   51dc1:	mov    BYTE PTR [rsp+0x3],0x0
   51dc6:	lea    r12,[rsp+0x4]
   51dcb:	mov    DWORD PTR [rsp+0x4],eax
   51dcf:	jmp    51df9 <g_str_equal@plt+0x44b39>
   51dd1:	nop    DWORD PTR [rax+0x0]
   51dd8:	mov    rcx,r13
   51ddb:	mov    edx,ebx
   51ddd:	mov    rsi,r12
   51de0:	mov    rdi,rbp
   51de3:	call   51860 <g_str_equal@plt+0x445a0>
   51de8:	test   al,al
   51dea:	jne    51e07 <g_str_equal@plt+0x44b47>
   51dec:	cmp    BYTE PTR [rsp+0x3],0x0
   51df1:	mov    eax,DWORD PTR [rsp+0x4]
   51df5:	cmovne ebx,r14d
   51df9:	cmp    eax,0x7
   51dfc:	jle    51dd8 <g_str_equal@plt+0x44b18>
   51dfe:	movzx  eax,BYTE PTR [rsp+0x3]
   51e03:	test   al,al
   51e05:	jne    51e28 <g_str_equal@plt+0x44b68>
   51e07:	mov    rdx,QWORD PTR [rsp+0x8]
   51e0c:	xor    rdx,QWORD PTR fs:0x28
   51e15:	jne    51e34 <g_str_equal@plt+0x44b74>
   51e17:	add    rsp,0x10
   51e1b:	pop    rbx
   51e1c:	pop    rbp
   51e1d:	pop    r12
   51e1f:	pop    r13
   51e21:	pop    r14
   51e23:	ret    
   51e24:	nop    DWORD PTR [rax+0x0]
   51e28:	mov    rdi,rbp
   51e2b:	call   517a0 <g_str_equal@plt+0x444e0>
   51e30:	xor    eax,eax
   51e32:	jmp    51e07 <g_str_equal@plt+0x44b47>
   51e34:	call   cd30 <__stack_chk_fail@plt>
   51e39:	nop    DWORD PTR [rax+0x0]
   51e40:	push   r14
   51e42:	push   r13
   51e44:	mov    r14d,0x1
   51e4a:	push   r12
   51e4c:	push   rbp
   51e4d:	mov    r13d,0x2
   51e53:	push   rbx
   51e54:	mov    rbx,rdi
   51e57:	sub    rsp,0x10
   51e5b:	mov    rax,QWORD PTR fs:0x28
   51e64:	mov    QWORD PTR [rsp+0x8],rax
   51e69:	xor    eax,eax
   51e6b:	mov    edx,DWORD PTR [rdi]
   51e6d:	lea    r12,[rsp+0x3]
   51e72:	mov    BYTE PTR [rsp+0x3],0x0
   51e77:	lea    rbp,[rsp+0x4]
   51e7c:	mov    DWORD PTR [rsp+0x4],edx
   51e80:	jmp    51e95 <g_str_equal@plt+0x44bd5>
   51e82:	nop    WORD PTR [rax+rax*1+0x0]
   51e88:	cmp    BYTE PTR [rsp+0x3],0x0
   51e8d:	mov    edx,DWORD PTR [rsp+0x4]
   51e91:	cmovne r14d,r13d
   51e95:	add    edx,r14d
   51e98:	mov    rcx,r12
   51e9b:	mov    rsi,rbp
   51e9e:	mov    rdi,rbx
   51ea1:	call   51860 <g_str_equal@plt+0x445a0>
   51ea6:	test   al,al
   51ea8:	je     51e88 <g_str_equal@plt+0x44bc8>
   51eaa:	mov    rax,QWORD PTR [rsp+0x8]
   51eaf:	xor    rax,QWORD PTR fs:0x28
   51eb8:	jne    51ec7 <g_str_equal@plt+0x44c07>
   51eba:	add    rsp,0x10
   51ebe:	pop    rbx
   51ebf:	pop    rbp
   51ec0:	pop    r12
   51ec2:	pop    r13
   51ec4:	pop    r14
   51ec6:	ret    
   51ec7:	call   cd30 <__stack_chk_fail@plt>
   51ecc:	nop    DWORD PTR [rax+0x0]
   51ed0:	push   r15
   51ed2:	push   r14
   51ed4:	push   r13
   51ed6:	push   r12
   51ed8:	mov    r12,rdi
   51edb:	push   rbp
   51edc:	push   rbx
   51edd:	sub    rsp,0x28
   51ee1:	mov    rax,QWORD PTR fs:0x28
   51eea:	mov    QWORD PTR [rsp+0x18],rax
   51eef:	xor    eax,eax
   51ef1:	mov    r13,rsp
   51ef4:	mov    ebx,DWORD PTR [rdi]
   51ef6:	jmp    51f02 <g_str_equal@plt+0x44c42>
   51ef8:	nop    DWORD PTR [rax+rax*1+0x0]
   51f00:	mov    ebx,eax
   51f02:	mov    r8d,DWORD PTR [rip+0x232bcf]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   51f09:	lea    ebp,[rbx+0x4]
   51f0c:	and    ebp,0xfffffffc
   51f0f:	test   r8d,r8d
   51f12:	jne    51f60 <g_str_equal@plt+0x44ca0>
   51f14:	mov    eax,ebx
   51f16:	lock cmpxchg DWORD PTR [r12],ebp
   51f1c:	cmp    ebx,eax
   51f1e:	jne    51f00 <g_str_equal@plt+0x44c40>
   51f20:	mov    ecx,DWORD PTR [rip+0x232bb2]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   51f26:	test   ecx,ecx
   51f28:	jne    51fb8 <g_str_equal@plt+0x44cf8>
   51f2e:	and    ebx,0x2
   51f31:	je     51f3b <g_str_equal@plt+0x44c7b>
   51f33:	mov    rdi,r12
   51f36:	call   517a0 <g_str_equal@plt+0x444e0>
   51f3b:	mov    rax,QWORD PTR [rsp+0x18]
   51f40:	xor    rax,QWORD PTR fs:0x28
   51f49:	jne    52013 <g_str_equal@plt+0x44d53>
   51f4f:	add    rsp,0x28
   51f53:	pop    rbx
   51f54:	pop    rbp
   51f55:	pop    r12
   51f57:	pop    r13
   51f59:	pop    r14
   51f5b:	pop    r15
   51f5d:	ret    
   51f5e:	xchg   ax,ax
   51f60:	cmp    WORD PTR [rip+0x2350e6],0x0        # 28704e <stdout@@GLIBC_2.2.5+0x2706>
   51f68:	je     51f14 <g_str_equal@plt+0x44c54>
   51f6a:	test   BYTE PTR [rip+0x233f30],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   51f71:	je     51f14 <g_str_equal@plt+0x44c54>
   51f73:	xor    esi,esi
   51f75:	mov    rdi,r13
   51f78:	call   c3e0 <gettimeofday@plt>
   51f7d:	mov    r15,QWORD PTR [rsp+0x8]
   51f82:	mov    r14,QWORD PTR [rsp]
   51f86:	call   c5b0 <getpid@plt>
   51f8b:	sub    rsp,0x8
   51f8f:	lea    rdi,[rip+0x15e5a]        # 67df0 <_fini@@Base+0x1569c>
   51f96:	mov    esi,eax
   51f98:	push   rbp
   51f99:	mov    r9d,ebx
   51f9c:	mov    r8,r12
   51f9f:	mov    rcx,r15
   51fa2:	mov    rdx,r14
   51fa5:	xor    eax,eax
   51fa7:	call   431a0 <g_str_equal@plt+0x35ee0>
   51fac:	pop    rsi
   51fad:	pop    rdi
   51fae:	jmp    51f14 <g_str_equal@plt+0x44c54>
   51fb3:	nop    DWORD PTR [rax+rax*1+0x0]
   51fb8:	cmp    WORD PTR [rip+0x23508c],0x0        # 28704c <stdout@@GLIBC_2.2.5+0x2704>
   51fc0:	je     51f2e <g_str_equal@plt+0x44c6e>
   51fc6:	test   BYTE PTR [rip+0x233ed4],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   51fcd:	je     51f2e <g_str_equal@plt+0x44c6e>
   51fd3:	mov    rdi,rsp
   51fd6:	xor    esi,esi
   51fd8:	call   c3e0 <gettimeofday@plt>
   51fdd:	mov    r14,QWORD PTR [rsp+0x8]
   51fe2:	mov    r13,QWORD PTR [rsp]
   51fe6:	call   c5b0 <getpid@plt>
   51feb:	sub    rsp,0x8
   51fef:	lea    rdi,[rip+0x15e3a]        # 67e30 <_fini@@Base+0x156dc>
   51ff6:	mov    esi,eax
   51ff8:	push   rbp
   51ff9:	mov    rdx,r13
   51ffc:	mov    r9d,ebx
   51fff:	mov    r8,r12
   52002:	mov    rcx,r14
   52005:	xor    eax,eax
   52007:	call   431a0 <g_str_equal@plt+0x35ee0>
   5200c:	pop    rax
   5200d:	pop    rdx
   5200e:	jmp    51f2e <g_str_equal@plt+0x44c6e>
   52013:	call   cd30 <__stack_chk_fail@plt>
   52018:	nop    DWORD PTR [rax+rax*1+0x0]
   52020:	push   r15
   52022:	push   r14
   52024:	push   r13
   52026:	push   r12
   52028:	push   rbp
   52029:	push   rbx
   5202a:	mov    rbp,rdi
   5202d:	sub    rsp,0x28
   52031:	mov    rax,QWORD PTR fs:0x28
   5203a:	mov    QWORD PTR [rsp+0x18],rax
   5203f:	xor    eax,eax
   52041:	mov    r13,rsp
   52044:	mov    ebx,DWORD PTR [rdi]
   52046:	jmp    52052 <g_str_equal@plt+0x44d92>
   52048:	nop    DWORD PTR [rax+rax*1+0x0]
   52050:	mov    ebx,eax
   52052:	mov    r8d,DWORD PTR [rip+0x232a7f]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   52059:	mov    r12d,ebx
   5205c:	and    r12d,0xfffffffc
   52060:	test   r8d,r8d
   52063:	jne    520b0 <g_str_equal@plt+0x44df0>
   52065:	mov    eax,ebx
   52067:	lock cmpxchg DWORD PTR [rbp+0x0],r12d
   5206d:	cmp    ebx,eax
   5206f:	jne    52050 <g_str_equal@plt+0x44d90>
   52071:	mov    ecx,DWORD PTR [rip+0x232a61]        # 284ad8 <stdout@@GLIBC_2.2.5+0x190>
   52077:	test   ecx,ecx
   52079:	jne    52108 <g_str_equal@plt+0x44e48>
   5207f:	and    ebx,0x2
   52082:	je     5208c <g_str_equal@plt+0x44dcc>
   52084:	mov    rdi,rbp
   52087:	call   517a0 <g_str_equal@plt+0x444e0>
   5208c:	mov    rax,QWORD PTR [rsp+0x18]
   52091:	xor    rax,QWORD PTR fs:0x28
   5209a:	jne    52164 <g_str_equal@plt+0x44ea4>
   520a0:	add    rsp,0x28
   520a4:	pop    rbx
   520a5:	pop    rbp
   520a6:	pop    r12
   520a8:	pop    r13
   520aa:	pop    r14
   520ac:	pop    r15
   520ae:	ret    
   520af:	nop
   520b0:	cmp    WORD PTR [rip+0x234f96],0x0        # 28704e <stdout@@GLIBC_2.2.5+0x2706>
   520b8:	je     52065 <g_str_equal@plt+0x44da5>
   520ba:	test   BYTE PTR [rip+0x233de0],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   520c1:	je     52065 <g_str_equal@plt+0x44da5>
   520c3:	xor    esi,esi
   520c5:	mov    rdi,r13
   520c8:	call   c3e0 <gettimeofday@plt>
   520cd:	mov    r15,QWORD PTR [rsp+0x8]
   520d2:	mov    r14,QWORD PTR [rsp]
   520d6:	call   c5b0 <getpid@plt>
   520db:	sub    rsp,0x8
   520df:	lea    rdi,[rip+0x15d0a]        # 67df0 <_fini@@Base+0x1569c>
   520e6:	mov    esi,eax
   520e8:	push   r12
   520ea:	mov    r9d,ebx
   520ed:	mov    r8,rbp
   520f0:	mov    rcx,r15
   520f3:	mov    rdx,r14
   520f6:	xor    eax,eax
   520f8:	call   431a0 <g_str_equal@plt+0x35ee0>
   520fd:	pop    rsi
   520fe:	pop    rdi
   520ff:	jmp    52065 <g_str_equal@plt+0x44da5>
   52104:	nop    DWORD PTR [rax+0x0]
   52108:	cmp    WORD PTR [rip+0x234f3c],0x0        # 28704c <stdout@@GLIBC_2.2.5+0x2704>
   52110:	je     5207f <g_str_equal@plt+0x44dbf>
   52116:	test   BYTE PTR [rip+0x233d84],0x80        # 285ea1 <stdout@@GLIBC_2.2.5+0x1559>
   5211d:	je     5207f <g_str_equal@plt+0x44dbf>
   52123:	mov    rdi,rsp
   52126:	xor    esi,esi
   52128:	call   c3e0 <gettimeofday@plt>
   5212d:	mov    r14,QWORD PTR [rsp+0x8]
   52132:	mov    r13,QWORD PTR [rsp]
   52136:	call   c5b0 <getpid@plt>
   5213b:	sub    rsp,0x8
   5213f:	lea    rdi,[rip+0x15cea]        # 67e30 <_fini@@Base+0x156dc>
   52146:	mov    esi,eax
   52148:	push   r12
   5214a:	mov    rdx,r13
   5214d:	mov    r9d,ebx
   52150:	mov    r8,rbp
   52153:	mov    rcx,r14
   52156:	xor    eax,eax
   52158:	call   431a0 <g_str_equal@plt+0x35ee0>
   5215d:	pop    rax
   5215e:	pop    rdx
   5215f:	jmp    5207f <g_str_equal@plt+0x44dbf>
   52164:	call   cd30 <__stack_chk_fail@plt>
   52169:	nop    DWORD PTR [rax+0x0]
   52170:	mov    eax,DWORD PTR [rdi]
   52172:	shr    eax,0x2
   52175:	ret    
   52176:	nop    WORD PTR cs:[rax+rax*1+0x0]
   52180:	push   r13
   52182:	push   r12
   52184:	mov    r13,rsi
   52187:	push   rbp
   52188:	push   rbx
   52189:	mov    rbx,rdi
   5218c:	mov    r12,rdx
   5218f:	mov    rbp,rcx
   52192:	sub    rsp,0x8
   52196:	mov    rdi,QWORD PTR [rdi+0x10]
   5219a:	call   c500 <g_malloc@plt>
   5219f:	mov    QWORD PTR [rax],rbx
   521a2:	mov    QWORD PTR [rax+0x8],r13
   521a6:	mov    QWORD PTR [rax+0x10],r12
   521aa:	mov    QWORD PTR [rax+0x18],rbp
   521ae:	mov    DWORD PTR [rax+0x20],0x1
   521b5:	add    rsp,0x8
   521b9:	pop    rbx
   521ba:	pop    rbp
   521bb:	pop    r12
   521bd:	pop    r13
   521bf:	ret    
   521c0:	add    DWORD PTR [rdi+0x20],0x1
   521c4:	ret    
   521c5:	nop
   521c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   521d0:	mov    eax,DWORD PTR [rdi+0x20]
   521d3:	test   eax,eax
   521d5:	jle    521ed <g_str_equal@plt+0x44f2d>
   521d7:	sub    eax,0x1
   521da:	test   eax,eax
   521dc:	mov    DWORD PTR [rdi+0x20],eax
   521df:	je     521e8 <g_str_equal@plt+0x44f28>
   521e1:	repz ret 
   521e3:	nop    DWORD PTR [rax+rax*1+0x0]
   521e8:	jmp    d2b0 <g_free@plt>
   521ed:	lea    rcx,[rip+0x15ccc]        # 67ec0 <_fini@@Base+0x1576c>
   521f4:	lea    rsi,[rip+0x15c7d]        # 67e78 <_fini@@Base+0x15724>
   521fb:	lea    rdi,[rip+0x15cac]        # 67eae <_fini@@Base+0x1575a>
   52202:	sub    rsp,0x8
   52206:	mov    edx,0x33
   5220b:	call   c390 <__assert_fail@plt>
   52210:	push   rbp
   52211:	push   rbx
   52212:	sub    rsp,0x88
   52219:	mov    rax,QWORD PTR fs:0x28
   52222:	mov    QWORD PTR [rsp+0x78],rax
   52227:	xor    eax,eax
   52229:	cmp    edi,0xffffffff
   5222c:	je     5225b <g_str_equal@plt+0x44f9b>
   5222e:	mov    ebx,edi
   52230:	mov    rbp,rsp
   52233:	jmp    52242 <g_str_equal@plt+0x44f82>
   52235:	nop    DWORD PTR [rax]
   52238:	call   cc80 <__errno_location@plt>
   5223d:	cmp    DWORD PTR [rax],0x4
   52240:	jne    5225b <g_str_equal@plt+0x44f9b>
   52242:	mov    rsi,rbp
   52245:	mov    edi,ebx
   52247:	call   c1b0 <fstatfs64@plt>
   5224c:	test   eax,eax
   5224e:	jne    52238 <g_str_equal@plt+0x44f78>
   52250:	mov    eax,0x958458f6
   52255:	cmp    QWORD PTR [rsp],rax
   52259:	je     52280 <g_str_equal@plt+0x44fc0>
   5225b:	call   c900 <getpagesize@plt>
   52260:	cdqe   
   52262:	mov    rdx,QWORD PTR [rsp+0x78]
   52267:	xor    rdx,QWORD PTR fs:0x28
   52270:	jne    52287 <g_str_equal@plt+0x44fc7>
   52272:	add    rsp,0x88
   52279:	pop    rbx
   5227a:	pop    rbp
   5227b:	ret    
   5227c:	nop    DWORD PTR [rax+0x0]
   52280:	mov    rax,QWORD PTR [rsp+0x8]
   52285:	jmp    52262 <g_str_equal@plt+0x44fa2>
   52287:	call   cd30 <__stack_chk_fail@plt>
   5228c:	nop    DWORD PTR [rax+0x0]
   52290:	push   rbp
   52291:	push   rbx
   52292:	sub    rsp,0x88
   52299:	mov    rax,QWORD PTR fs:0x28
   522a2:	mov    QWORD PTR [rsp+0x78],rax
   522a7:	xor    eax,eax
   522a9:	test   rdi,rdi
   522ac:	je     522e6 <g_str_equal@plt+0x45026>
   522ae:	mov    rbx,rdi
   522b1:	mov    rbp,rsp
   522b4:	jmp    522cc <g_str_equal@plt+0x4500c>
   522b6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   522c0:	call   cc80 <__errno_location@plt>
   522c5:	mov    edi,DWORD PTR [rax]
   522c7:	cmp    edi,0x4
   522ca:	jne    52320 <g_str_equal@plt+0x45060>
   522cc:	mov    rsi,rbp
   522cf:	mov    rdi,rbx
   522d2:	call   c910 <statfs64@plt>
   522d7:	test   eax,eax
   522d9:	jne    522c0 <g_str_equal@plt+0x45000>
   522db:	mov    eax,0x958458f6
   522e0:	cmp    QWORD PTR [rsp],rax
   522e4:	je     52310 <g_str_equal@plt+0x45050>
   522e6:	call   c900 <getpagesize@plt>
   522eb:	cdqe   
   522ed:	mov    rdx,QWORD PTR [rsp+0x78]
   522f2:	xor    rdx,QWORD PTR fs:0x28
   522fb:	jne    5234c <g_str_equal@plt+0x4508c>
   522fd:	add    rsp,0x88
   52304:	pop    rbx
   52305:	pop    rbp
   52306:	ret    
   52307:	nop    WORD PTR [rax+rax*1+0x0]
   52310:	mov    rax,QWORD PTR [rsp+0x8]
   52315:	jmp    522ed <g_str_equal@plt+0x4502d>
   52317:	nop    WORD PTR [rax+rax*1+0x0]
   52320:	call   ca10 <strerror@plt>
   52325:	mov    rdi,QWORD PTR [rip+0x232614]        # 284940 <stderr@@GLIBC_2.2.5>
   5232c:	lea    rdx,[rip+0x15b9d]        # 67ed0 <_fini@@Base+0x1577c>
   52333:	mov    rcx,rax
   52336:	mov    esi,0x1
   5233b:	xor    eax,eax
   5233d:	call   c2b0 <__fprintf_chk@plt>
   52342:	mov    edi,0x1
   52347:	call   c360 <exit@plt>
   5234c:	call   cd30 <__stack_chk_fail@plt>
   52351:	nop    DWORD PTR [rax+rax*1+0x0]
   52356:	nop    WORD PTR cs:[rax+rax*1+0x0]
   52360:	push   r15
   52362:	push   r14
   52364:	xor    r9d,r9d
   52367:	push   r13
   52369:	push   r12
   5236b:	lea    r12,[rsi+rdx*1]
   5236f:	push   rbp
   52370:	push   rbx
   52371:	mov    r14d,edi
   52374:	mov    r13,rsi
   52377:	xor    edi,edi
   52379:	mov    rbx,rdx
   5237c:	sub    rsp,0x18
   52380:	xor    edx,edx
   52382:	mov    r8d,0xffffffff
   52388:	mov    DWORD PTR [rsp],ecx
   5238b:	mov    rsi,r12
   5238e:	mov    ecx,0x22
   52393:	call   c210 <mmap64@plt>
   52398:	cmp    rax,0xffffffffffffffff
   5239c:	mov    r15,rax
   5239f:	je     52490 <g_str_equal@plt+0x451d0>
   523a5:	test   rbx,rbx
   523a8:	je     524a5 <g_str_equal@plt+0x451e5>
   523ae:	lea    rbp,[rbx-0x1]
   523b2:	test   rbx,rbp
   523b5:	jne    524a5 <g_str_equal@plt+0x451e5>
   523bb:	call   c900 <getpagesize@plt>
   523c0:	movsxd r11,eax
   523c3:	cmp    r11,rbx
   523c6:	ja     524c4 <g_str_equal@plt+0x45204>
   523cc:	lea    rax,[r15+rbp*1]
   523d0:	xor    edx,edx
   523d2:	mov    ecx,0x10
   523d7:	mov    r8d,r14d
   523da:	mov    rsi,r13
   523dd:	mov    QWORD PTR [rsp+0x8],r11
   523e2:	div    rbx
   523e5:	mov    edx,0x3
   523ea:	imul   rax,rbx
   523ee:	sub    rax,r15
   523f1:	cmp    r14d,0xffffffff
   523f5:	mov    rbx,rax
   523f8:	mov    eax,0x30
   523fd:	cmove  ecx,eax
   52400:	xor    eax,eax
   52402:	cmp    BYTE PTR [rsp],0x0
   52406:	lea    rdi,[r15+rbx*1]
   5240a:	sete   al
   5240d:	xor    r9d,r9d
   52410:	add    eax,0x1
   52413:	or     ecx,eax
   52415:	call   c210 <mmap64@plt>
   5241a:	cmp    rax,0xffffffffffffffff
   5241e:	mov    rbp,rax
   52421:	mov    r11,QWORD PTR [rsp+0x8]
   52426:	je     52498 <g_str_equal@plt+0x451d8>
   52428:	test   rbx,rbx
   5242b:	jne    52468 <g_str_equal@plt+0x451a8>
   5242d:	lea    rdi,[r11+r13*1]
   52431:	sub    r12,rbx
   52434:	cmp    rdi,r12
   52437:	jb     52450 <g_str_equal@plt+0x45190>
   52439:	add    rsp,0x18
   5243d:	mov    rax,rbp
   52440:	pop    rbx
   52441:	pop    rbp
   52442:	pop    r12
   52444:	pop    r13
   52446:	pop    r14
   52448:	pop    r15
   5244a:	ret    
   5244b:	nop    DWORD PTR [rax+rax*1+0x0]
   52450:	sub    r12,r13
   52453:	add    rdi,rbp
   52456:	mov    rsi,r12
   52459:	sub    rsi,r11
   5245c:	call   ce50 <munmap@plt>
   52461:	jmp    52439 <g_str_equal@plt+0x45179>
   52463:	nop    DWORD PTR [rax+rax*1+0x0]
   52468:	mov    rdi,r15
   5246b:	mov    rsi,rbx
   5246e:	mov    QWORD PTR [rsp],r11
   52472:	call   ce50 <munmap@plt>
   52477:	mov    r11,QWORD PTR [rsp]
   5247b:	sub    r12,rbx
   5247e:	lea    rdi,[r11+r13*1]
   52482:	cmp    rdi,r12
   52485:	jae    52439 <g_str_equal@plt+0x45179>
   52487:	jmp    52450 <g_str_equal@plt+0x45190>
   52489:	nop    DWORD PTR [rax+0x0]
   52490:	mov    rbp,rax
   52493:	jmp    52439 <g_str_equal@plt+0x45179>
   52495:	nop    DWORD PTR [rax]
   52498:	mov    rsi,r12
   5249b:	mov    rdi,r15
   5249e:	call   ce50 <munmap@plt>
   524a3:	jmp    52439 <g_str_equal@plt+0x45179>
   524a5:	lea    rcx,[rip+0x15ab4]        # 67f60 <_fini@@Base+0x1580c>
   524ac:	lea    rsi,[rip+0x15a45]        # 67ef8 <_fini@@Base+0x157a4>
   524b3:	lea    rdi,[rip+0x15a79]        # 67f33 <_fini@@Base+0x157df>
   524ba:	mov    edx,0x6b
   524bf:	call   c390 <__assert_fail@plt>
   524c4:	lea    rcx,[rip+0x15a95]        # 67f60 <_fini@@Base+0x1580c>
   524cb:	lea    rsi,[rip+0x15a26]        # 67ef8 <_fini@@Base+0x157a4>
   524d2:	lea    rdi,[rip+0x15a6f]        # 67f48 <_fini@@Base+0x157f4>
   524d9:	mov    edx,0x6d
   524de:	call   c390 <__assert_fail@plt>
   524e3:	nop    DWORD PTR [rax]
   524e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   524f0:	test   rdi,rdi
   524f3:	je     52520 <g_str_equal@plt+0x45260>
   524f5:	push   rbp
   524f6:	push   rbx
   524f7:	mov    rbp,rsi
   524fa:	mov    rbx,rdi
   524fd:	sub    rsp,0x8
   52501:	call   c900 <getpagesize@plt>
   52506:	add    rsp,0x8
   5250a:	cdqe   
   5250c:	mov    rdi,rbx
   5250f:	lea    rsi,[rax+rbp*1]
   52513:	pop    rbx
   52514:	pop    rbp
   52515:	jmp    ce50 <munmap@plt>
   5251a:	nop    WORD PTR [rax+rax*1+0x0]
   52520:	repz ret 
   52522:	nop    WORD PTR cs:[rax+rax*1+0x0]
   5252c:	nop    DWORD PTR [rax+0x0]
   52530:	push   r13
   52532:	push   r12
   52534:	mov    r12,rdi
   52537:	push   rbp
   52538:	push   rbx
   52539:	sub    rsp,0x8
   5253d:	call   c800 <__ctype_b_loc@plt>
   52542:	movzx  edx,BYTE PTR [r12]
   52547:	mov    r13,QWORD PTR [rax]
   5254a:	xor    eax,eax
   5254c:	test   BYTE PTR [r13+rdx*2+0x1],0x4
   52552:	je     525a2 <g_str_equal@plt+0x452e2>
   52554:	movzx  esi,BYTE PTR [r12+0x1]
   5255a:	test   sil,sil
   5255d:	je     5259d <g_str_equal@plt+0x452dd>
   5255f:	lea    rbp,[rip+0x15a08]        # 67f6e <_fini@@Base+0x1581a>
   52566:	mov    ebx,0x1
   5256b:	nop    DWORD PTR [rax+rax*1+0x0]
   52570:	movzx  eax,sil
   52574:	test   BYTE PTR [r13+rax*2+0x0],0x8
   5257a:	jne    5258d <g_str_equal@plt+0x452cd>
   5257c:	movsx  esi,sil
   52580:	mov    rdi,rbp
   52583:	call   cc00 <strchr@plt>
   52588:	test   rax,rax
   5258b:	je     525b0 <g_str_equal@plt+0x452f0>
   5258d:	add    ebx,0x1
   52590:	movsxd rax,ebx
   52593:	movzx  esi,BYTE PTR [r12+rax*1]
   52598:	test   sil,sil
   5259b:	jne    52570 <g_str_equal@plt+0x452b0>
   5259d:	mov    eax,0x1
   525a2:	add    rsp,0x8
   525a6:	pop    rbx
   525a7:	pop    rbp
   525a8:	pop    r12
   525aa:	pop    r13
   525ac:	ret    
   525ad:	nop    DWORD PTR [rax]
   525b0:	add    rsp,0x8
   525b4:	xor    eax,eax
   525b6:	pop    rbx
   525b7:	pop    rbp
   525b8:	pop    r12
   525ba:	pop    r13
   525bc:	ret    
   525bd:	nop    DWORD PTR [rax]
   525c0:	push   rbp
   525c1:	push   rbx
   525c2:	sub    rsp,0x8
   525c6:	cmp    edi,0x1
   525c9:	ja     5261b <g_str_equal@plt+0x4535b>
   525cb:	lea    rax,[rip+0x22eb6e]        # 281140 <_fini@@Base+0x22e9ec>
   525d2:	mov    ebx,edi
   525d4:	mov    rbp,QWORD PTR [rax+rbx*8]
   525d8:	test   rbp,rbp
   525db:	je     5263a <g_str_equal@plt+0x4537a>
   525dd:	mov    esi,0x64
   525e2:	xor    edi,edi
   525e4:	call   cdc0 <g_random_int_range@plt>
   525e9:	lea    rdx,[rip+0x234ac0]        # 2870b0 <stdout@@GLIBC_2.2.5+0x2768>
   525f0:	mov    r8d,eax
   525f3:	lea    rdi,[rip+0x1598a]        # 67f84 <_fini@@Base+0x15830>
   525fa:	mov    esi,0x23
   525ff:	mov    rcx,QWORD PTR [rdx+rbx*8]
   52603:	lea    rax,[rcx+0x1]
   52607:	mov    QWORD PTR [rdx+rbx*8],rax
   5260b:	add    rsp,0x8
   5260f:	mov    rdx,rbp
   52612:	pop    rbx
   52613:	pop    rbp
   52614:	xor    eax,eax
   52616:	jmp    c740 <g_strdup_printf@plt>
   5261b:	lea    rcx,[rip+0x159d6]        # 67ff8 <_fini@@Base+0x158a4>
   52622:	lea    rsi,[rip+0x15977]        # 67fa0 <_fini@@Base+0x1584c>
   52629:	lea    rdi,[rip+0x159a8]        # 67fd8 <_fini@@Base+0x15884>
   52630:	mov    edx,0x3a
   52635:	call   c390 <__assert_fail@plt>
   5263a:	lea    rcx,[rip+0x159b7]        # 67ff8 <_fini@@Base+0x158a4>
   52641:	lea    rsi,[rip+0x15958]        # 67fa0 <_fini@@Base+0x1584c>
   52648:	lea    rdi,[rip+0x15923]        # 67f72 <_fini@@Base+0x1581e>
   5264f:	mov    edx,0x3b
   52654:	call   c390 <__assert_fail@plt>
   52659:	nop    DWORD PTR [rax+0x0]
   52660:	push   rbx
   52661:	sub    rsp,0x10
   52665:	test   rdi,rdi
   52668:	mov    QWORD PTR [rsp+0x8],rdi
   5266d:	je     52690 <g_str_equal@plt+0x453d0>
   5266f:	call   29a40 <g_str_equal@plt+0x1c780>
   52674:	lea    rdx,[rsp+0x8]
   52679:	mov    rbx,rax
   5267c:	mov    rdi,rax
   5267f:	xor    ecx,ecx
   52681:	xor    esi,esi
   52683:	call   45d10 <g_str_equal@plt+0x38a50>
   52688:	mov    rdi,rbx
   5268b:	call   27d00 <g_str_equal@plt+0x1aa40>
   52690:	add    rsp,0x10
   52694:	pop    rbx
   52695:	ret    
   52696:	nop    WORD PTR cs:[rax+rax*1+0x0]
   526a0:	push   rbx
   526a1:	sub    rsp,0x10
   526a5:	test   rdi,rdi
   526a8:	mov    QWORD PTR [rsp+0x8],rdi
   526ad:	je     526d0 <g_str_equal@plt+0x45410>
   526af:	call   29a40 <g_str_equal@plt+0x1c780>
   526b4:	lea    rdx,[rsp+0x8]
   526b9:	mov    rbx,rax
   526bc:	mov    rdi,rax
   526bf:	xor    ecx,ecx
   526c1:	xor    esi,esi
   526c3:	call   45df0 <g_str_equal@plt+0x38b30>
   526c8:	mov    rdi,rbx
   526cb:	call   27d00 <g_str_equal@plt+0x1aa40>
   526d0:	add    rsp,0x10
   526d4:	pop    rbx
   526d5:	ret    
   526d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   526e0:	push   r15
   526e2:	push   r14
   526e4:	mov    r15,rdx
   526e7:	push   r13
   526e9:	push   r12
   526eb:	lea    r12,[rip+0x22d20e]        # 27f900 <_fini@@Base+0x22d1ac>
   526f2:	push   rbp
   526f3:	lea    rbp,[rip+0x22d2de]        # 27f9d8 <_fini@@Base+0x22d284>
   526fa:	push   rbx
   526fb:	mov    r13d,edi
   526fe:	mov    r14,rsi
   52701:	sub    rbp,r12
   52704:	sub    rsp,0x8
   52708:	sar    rbp,0x3
   5270c:	call   c098 <_init@@Base>
   52711:	test   rbp,rbp
   52714:	je     52736 <g_str_equal@plt+0x45476>
   52716:	xor    ebx,ebx
   52718:	nop    DWORD PTR [rax+rax*1+0x0]
   52720:	mov    rdx,r15
   52723:	mov    rsi,r14
   52726:	mov    edi,r13d
   52729:	call   QWORD PTR [r12+rbx*8]
   5272d:	add    rbx,0x1
   52731:	cmp    rbp,rbx
   52734:	jne    52720 <g_str_equal@plt+0x45460>
   52736:	add    rsp,0x8
   5273a:	pop    rbx
   5273b:	pop    rbp
   5273c:	pop    r12
   5273e:	pop    r13
   52740:	pop    r14
   52742:	pop    r15
   52744:	ret    
   52745:	nop
   52746:	nop    WORD PTR cs:[rax+rax*1+0x0]
   52750:	repz ret 

Disassembly of section .fini:

0000000000052754 <_fini@@Base>:
   52754:	sub    rsp,0x8
   52758:	add    rsp,0x8
   5275c:	ret    
