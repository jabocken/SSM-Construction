
libxl-save-helper:     file format elf64-x86-64


Disassembly of section .init:

0000000000000d28 <_init>:
 d28:	sub    rsp,0x8
 d2c:	mov    rax,QWORD PTR [rip+0x2032b5]        # 203fe8 <__gmon_start__>
 d33:	test   rax,rax
 d36:	je     d3a <_init+0x12>
 d38:	call   rax
 d3a:	add    rsp,0x8
 d3e:	ret    

Disassembly of section .plt:

0000000000000d40 <.plt>:
 d40:	push   QWORD PTR [rip+0x2031a2]        # 203ee8 <_GLOBAL_OFFSET_TABLE_+0x8>
 d46:	jmp    QWORD PTR [rip+0x2031a4]        # 203ef0 <_GLOBAL_OFFSET_TABLE_+0x10>
 d4c:	nop    DWORD PTR [rax+0x0]

0000000000000d50 <sigprocmask@plt>:
 d50:	jmp    QWORD PTR [rip+0x2031a2]        # 203ef8 <sigprocmask@GLIBC_2.2.5>
 d56:	push   0x0
 d5b:	jmp    d40 <.plt>

0000000000000d60 <free@plt>:
 d60:	jmp    QWORD PTR [rip+0x20319a]        # 203f00 <free@GLIBC_2.2.5>
 d66:	push   0x1
 d6b:	jmp    d40 <.plt>

0000000000000d70 <abort@plt>:
 d70:	jmp    QWORD PTR [rip+0x203192]        # 203f08 <abort@GLIBC_2.2.5>
 d76:	push   0x2
 d7b:	jmp    d40 <.plt>

0000000000000d80 <__errno_location@plt>:
 d80:	jmp    QWORD PTR [rip+0x20318a]        # 203f10 <__errno_location@GLIBC_2.2.5>
 d86:	push   0x3
 d8b:	jmp    d40 <.plt>

0000000000000d90 <xc_domain_restore@plt>:
 d90:	jmp    QWORD PTR [rip+0x203182]        # 203f18 <xc_domain_restore>
 d96:	push   0x4
 d9b:	jmp    d40 <.plt>

0000000000000da0 <sigaction@plt>:
 da0:	jmp    QWORD PTR [rip+0x20317a]        # 203f20 <sigaction@GLIBC_2.2.5>
 da6:	push   0x5
 dab:	jmp    d40 <.plt>

0000000000000db0 <write@plt>:
 db0:	jmp    QWORD PTR [rip+0x203172]        # 203f28 <write@GLIBC_2.2.5>
 db6:	push   0x6
 dbb:	jmp    d40 <.plt>

0000000000000dc0 <xc_interface_open@plt>:
 dc0:	jmp    QWORD PTR [rip+0x20316a]        # 203f30 <xc_interface_open>
 dc6:	push   0x7
 dcb:	jmp    d40 <.plt>

0000000000000dd0 <strlen@plt>:
 dd0:	jmp    QWORD PTR [rip+0x203162]        # 203f38 <strlen@GLIBC_2.2.5>
 dd6:	push   0x8
 ddb:	jmp    d40 <.plt>

0000000000000de0 <__stack_chk_fail@plt>:
 de0:	jmp    QWORD PTR [rip+0x20315a]        # 203f40 <__stack_chk_fail@GLIBC_2.4>
 de6:	push   0x9
 deb:	jmp    d40 <.plt>

0000000000000df0 <dup2@plt>:
 df0:	jmp    QWORD PTR [rip+0x203152]        # 203f48 <dup2@GLIBC_2.2.5>
 df6:	push   0xa
 dfb:	jmp    d40 <.plt>

0000000000000e00 <__assert_fail@plt>:
 e00:	jmp    QWORD PTR [rip+0x20314a]        # 203f50 <__assert_fail@GLIBC_2.2.5>
 e06:	push   0xb
 e0b:	jmp    d40 <.plt>

0000000000000e10 <xc_interface_close@plt>:
 e10:	jmp    QWORD PTR [rip+0x203142]        # 203f58 <xc_interface_close>
 e16:	push   0xc
 e1b:	jmp    d40 <.plt>

0000000000000e20 <read@plt>:
 e20:	jmp    QWORD PTR [rip+0x20313a]        # 203f60 <read@GLIBC_2.2.5>
 e26:	push   0xd
 e2b:	jmp    d40 <.plt>

0000000000000e30 <xtl_logv@plt>:
 e30:	jmp    QWORD PTR [rip+0x203132]        # 203f68 <xtl_logv@VERS_1.0>
 e36:	push   0xe
 e3b:	jmp    d40 <.plt>

0000000000000e40 <strcmp@plt>:
 e40:	jmp    QWORD PTR [rip+0x20312a]        # 203f70 <strcmp@GLIBC_2.2.5>
 e46:	push   0xf
 e4b:	jmp    d40 <.plt>

0000000000000e50 <xtl_log@plt>:
 e50:	jmp    QWORD PTR [rip+0x203122]        # 203f78 <xtl_log@VERS_1.0>
 e56:	push   0x10
 e5b:	jmp    d40 <.plt>

0000000000000e60 <sigemptyset@plt>:
 e60:	jmp    QWORD PTR [rip+0x20311a]        # 203f80 <sigemptyset@GLIBC_2.2.5>
 e66:	push   0x11
 e6b:	jmp    d40 <.plt>

0000000000000e70 <strtol@plt>:
 e70:	jmp    QWORD PTR [rip+0x203112]        # 203f88 <strtol@GLIBC_2.2.5>
 e76:	push   0x12
 e7b:	jmp    d40 <.plt>

0000000000000e80 <memcpy@plt>:
 e80:	jmp    QWORD PTR [rip+0x20310a]        # 203f90 <memcpy@GLIBC_2.14>
 e86:	push   0x13
 e8b:	jmp    d40 <.plt>

0000000000000e90 <malloc@plt>:
 e90:	jmp    QWORD PTR [rip+0x203102]        # 203f98 <malloc@GLIBC_2.2.5>
 e96:	push   0x14
 e9b:	jmp    d40 <.plt>

0000000000000ea0 <__vasprintf_chk@plt>:
 ea0:	jmp    QWORD PTR [rip+0x2030fa]        # 203fa0 <__vasprintf_chk@GLIBC_2.8>
 ea6:	push   0x15
 eab:	jmp    d40 <.plt>

0000000000000eb0 <open@plt>:
 eb0:	jmp    QWORD PTR [rip+0x2030f2]        # 203fa8 <open@GLIBC_2.2.5>
 eb6:	push   0x16
 ebb:	jmp    d40 <.plt>

0000000000000ec0 <perror@plt>:
 ec0:	jmp    QWORD PTR [rip+0x2030ea]        # 203fb0 <perror@GLIBC_2.2.5>
 ec6:	push   0x17
 ecb:	jmp    d40 <.plt>

0000000000000ed0 <xc_domain_save@plt>:
 ed0:	jmp    QWORD PTR [rip+0x2030e2]        # 203fb8 <xc_domain_save>
 ed6:	push   0x18
 edb:	jmp    d40 <.plt>

0000000000000ee0 <strtoul@plt>:
 ee0:	jmp    QWORD PTR [rip+0x2030da]        # 203fc0 <strtoul@GLIBC_2.2.5>
 ee6:	push   0x19
 eeb:	jmp    d40 <.plt>

0000000000000ef0 <exit@plt>:
 ef0:	jmp    QWORD PTR [rip+0x2030d2]        # 203fc8 <exit@GLIBC_2.2.5>
 ef6:	push   0x1a
 efb:	jmp    d40 <.plt>

0000000000000f00 <sigaddset@plt>:
 f00:	jmp    QWORD PTR [rip+0x2030ca]        # 203fd0 <sigaddset@GLIBC_2.2.5>
 f06:	push   0x1b
 f0b:	jmp    d40 <.plt>

Disassembly of section .plt.got:

0000000000000f10 <__cxa_finalize@plt>:
 f10:	jmp    QWORD PTR [rip+0x2030e2]        # 203ff8 <__cxa_finalize@GLIBC_2.2.5>
 f16:	xchg   ax,ax

Disassembly of section .text:

0000000000000f20 <fail>:
     f20:	sub    rsp,0xd8
     f27:	test   al,al
     f29:	mov    QWORD PTR [rsp+0x30],rdx
     f2e:	mov    QWORD PTR [rsp+0x38],rcx
     f33:	mov    QWORD PTR [rsp+0x40],r8
     f38:	mov    QWORD PTR [rsp+0x48],r9
     f3d:	je     f76 <fail+0x56>
     f3f:	movaps XMMWORD PTR [rsp+0x50],xmm0
     f44:	movaps XMMWORD PTR [rsp+0x60],xmm1
     f49:	movaps XMMWORD PTR [rsp+0x70],xmm2
     f4e:	movaps XMMWORD PTR [rsp+0x80],xmm3
     f56:	movaps XMMWORD PTR [rsp+0x90],xmm4
     f5e:	movaps XMMWORD PTR [rsp+0xa0],xmm5
     f66:	movaps XMMWORD PTR [rsp+0xb0],xmm6
     f6e:	movaps XMMWORD PTR [rsp+0xc0],xmm7
     f76:	mov    rax,QWORD PTR fs:0x28
     f7f:	mov    QWORD PTR [rsp+0x18],rax
     f84:	xor    eax,eax
     f86:	lea    rax,[rsp+0xe0]
     f8e:	mov    edx,edi
     f90:	lea    rcx,[rip+0x1b6d]        # 2b04 <_IO_stdin_used+0x4>
     f97:	lea    rdi,[rip+0x203072]        # 204010 <logger>
     f9e:	mov    r8,rsi
     fa1:	mov    r9,rsp
     fa4:	mov    QWORD PTR [rsp+0x8],rax
     fa9:	lea    rax,[rsp+0x20]
     fae:	mov    esi,0x8
     fb3:	mov    DWORD PTR [rsp],0x10
     fba:	mov    DWORD PTR [rsp+0x4],0x30
     fc2:	mov    QWORD PTR [rsp+0x10],rax
     fc7:	call   e30 <xtl_logv@plt>
     fcc:	or     edi,0xffffffff
     fcf:	call   ef0 <exit@plt>
     fd4:	nop    WORD PTR cs:[rax+rax*1+0x0]
     fde:	xchg   ax,ax

0000000000000fe0 <main>:
     fe0:	push   r15
     fe2:	push   r14
     fe4:	push   r13
     fe6:	push   r12
     fe8:	push   rbp
     fe9:	push   rbx
     fea:	sub    rsp,0x58
     fee:	mov    rdx,QWORD PTR [rsi+0x8]
     ff2:	mov    rax,QWORD PTR fs:0x28
     ffb:	mov    QWORD PTR [rsp+0x48],rax
    1000:	xor    eax,eax
    1002:	test   rdx,rdx
    1005:	je     12d5 <main+0x2f5>
    100b:	lea    rdi,[rip+0x1bc7]        # 2bd9 <_IO_stdin_used+0xd9>
    1012:	mov    r15,rsi
    1015:	mov    ecx,0xe
    101a:	mov    rsi,rdx
    101d:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
    101f:	seta   al
    1022:	sbb    al,0x0
    1024:	test   al,al
    1026:	jne    111a <main+0x13a>
    102c:	mov    rdi,QWORD PTR [r15+0x10]
    1030:	test   rdi,rdi
    1033:	je     1313 <main+0x333>
    1039:	xor    esi,esi
    103b:	mov    edx,0xa
    1040:	call   e70 <strtol@plt>
    1045:	mov    rdi,QWORD PTR [r15+0x18]
    1049:	mov    DWORD PTR [rip+0x20308d],eax        # 2040dc <io_fd>
    104f:	test   rdi,rdi
    1052:	je     1332 <main+0x352>
    1058:	xor    esi,esi
    105a:	mov    edx,0xa
    105f:	call   e70 <strtol@plt>
    1064:	mov    rdi,QWORD PTR [r15+0x20]
    1068:	mov    rbx,rax
    106b:	test   rdi,rdi
    106e:	je     12b6 <main+0x2d6>
    1074:	xor    esi,esi
    1076:	mov    edx,0xa
    107b:	call   ee0 <strtoul@plt>
    1080:	mov    rdi,QWORD PTR [r15+0x28]
    1084:	mov    rbp,rax
    1087:	test   rdi,rdi
    108a:	je     13ae <main+0x3ce>
    1090:	xor    esi,esi
    1092:	mov    edx,0xa
    1097:	call   ee0 <strtoul@plt>
    109c:	mov    rdi,QWORD PTR [r15+0x30]
    10a0:	mov    r12,rax
    10a3:	test   rdi,rdi
    10a6:	je     13ec <main+0x40c>
    10ac:	xor    esi,esi
    10ae:	mov    edx,0xa
    10b3:	call   e70 <strtol@plt>
    10b8:	mov    rdi,QWORD PTR [r15+0x38]
    10bc:	mov    r13,rax
    10bf:	test   rdi,rdi
    10c2:	je     1370 <main+0x390>
    10c8:	xor    esi,esi
    10ca:	mov    edx,0xa
    10cf:	call   ee0 <strtoul@plt>
    10d4:	mov    rdi,QWORD PTR [r15+0x40]
    10d8:	mov    r14,rax
    10db:	test   rdi,rdi
    10de:	je     142a <main+0x44a>
    10e4:	xor    esi,esi
    10e6:	mov    edx,0xa
    10eb:	call   ee0 <strtoul@plt>
    10f0:	cmp    QWORD PTR [r15+0x48],0x0
    10f5:	je     1468 <main+0x488>
    10fb:	lea    rcx,[rip+0x1b7e]        # 2c80 <__PRETTY_FUNCTION__.16013>
    1102:	lea    rsi,[rip+0x1a21]        # 2b2a <_IO_stdin_used+0x2a>
    1109:	lea    rdi,[rip+0x1add]        # 2bed <_IO_stdin_used+0xed>
    1110:	mov    edx,0x102
    1115:	call   e00 <__assert_fail@plt>
    111a:	lea    rsi,[rip+0x1ada]        # 2bfb <_IO_stdin_used+0xfb>
    1121:	mov    rdi,rdx
    1124:	call   e40 <strcmp@plt>
    1129:	test   eax,eax
    112b:	jne    12f4 <main+0x314>
    1131:	mov    rdi,QWORD PTR [r15+0x10]
    1135:	test   rdi,rdi
    1138:	je     1297 <main+0x2b7>
    113e:	xor    esi,esi
    1140:	mov    edx,0xa
    1145:	call   e70 <strtol@plt>
    114a:	mov    rdi,QWORD PTR [r15+0x18]
    114e:	mov    DWORD PTR [rip+0x202f88],eax        # 2040dc <io_fd>
    1154:	test   rdi,rdi
    1157:	je     1351 <main+0x371>
    115d:	xor    esi,esi
    115f:	mov    edx,0xa
    1164:	call   e70 <strtol@plt>
    1169:	mov    rdi,QWORD PTR [r15+0x20]
    116d:	mov    rbx,rax
    1170:	test   rdi,rdi
    1173:	je     13cd <main+0x3ed>
    1179:	xor    esi,esi
    117b:	mov    edx,0xa
    1180:	call   ee0 <strtoul@plt>
    1185:	mov    rdi,QWORD PTR [r15+0x28]
    1189:	mov    rbp,rax
    118c:	test   rdi,rdi
    118f:	je     140b <main+0x42b>
    1195:	xor    esi,esi
    1197:	mov    edx,0xa
    119c:	call   ee0 <strtoul@plt>
    11a1:	mov    rdi,QWORD PTR [r15+0x30]
    11a5:	mov    r12,rax
    11a8:	test   rdi,rdi
    11ab:	je     138f <main+0x3af>
    11b1:	xor    esi,esi
    11b3:	mov    edx,0xa
    11b8:	call   ee0 <strtoul@plt>
    11bd:	mov    rdi,QWORD PTR [r15+0x38]
    11c1:	mov    r13,rax
    11c4:	test   rdi,rdi
    11c7:	je     1449 <main+0x469>
    11cd:	xor    esi,esi
    11cf:	mov    edx,0xa
    11d4:	call   ee0 <strtoul@plt>
    11d9:	mov    rdi,QWORD PTR [r15+0x40]
    11dd:	mov    r14,rax
    11e0:	test   rdi,rdi
    11e3:	je     14c3 <main+0x4e3>
    11e9:	xor    esi,esi
    11eb:	mov    edx,0xa
    11f0:	call   ee0 <strtoul@plt>
    11f5:	mov    rdi,QWORD PTR [r15+0x48]
    11f9:	mov    QWORD PTR [rsp+0x8],rax
    11fe:	test   rdi,rdi
    1201:	je     14e2 <main+0x502>
    1207:	xor    esi,esi
    1209:	mov    edx,0xa
    120e:	call   ee0 <strtoul@plt>
    1213:	mov    rdi,QWORD PTR [r15+0x50]
    1217:	mov    QWORD PTR [rsp+0x10],rax
    121c:	test   rdi,rdi
    121f:	je     1501 <main+0x521>
    1225:	xor    esi,esi
    1227:	mov    edx,0xa
    122c:	call   ee0 <strtoul@plt>
    1231:	mov    rdi,QWORD PTR [r15+0x58]
    1235:	mov    QWORD PTR [rsp+0x18],rax
    123a:	test   rdi,rdi
    123d:	je     1520 <main+0x540>
    1243:	xor    esi,esi
    1245:	mov    edx,0xa
    124a:	call   ee0 <strtoul@plt>
    124f:	mov    rdi,QWORD PTR [r15+0x60]
    1253:	mov    QWORD PTR [rsp+0x20],rax
    1258:	test   rdi,rdi
    125b:	je     153f <main+0x55f>
    1261:	xor    esi,esi
    1263:	mov    edx,0xa
    1268:	call   ee0 <strtoul@plt>
    126d:	cmp    QWORD PTR [r15+0x68],0x0
    1272:	je     155e <main+0x57e>
    1278:	lea    rcx,[rip+0x1a01]        # 2c80 <__PRETTY_FUNCTION__.16013>
    127f:	lea    rsi,[rip+0x18a4]        # 2b2a <_IO_stdin_used+0x2a>
    1286:	lea    rdi,[rip+0x1960]        # 2bed <_IO_stdin_used+0xed>
    128d:	mov    edx,0x11a
    1292:	call   e00 <__assert_fail@plt>
    1297:	lea    rcx,[rip+0x19e2]        # 2c80 <__PRETTY_FUNCTION__.16013>
    129e:	lea    rsi,[rip+0x1885]        # 2b2a <_IO_stdin_used+0x2a>
    12a5:	lea    rdi,[rip+0x193b]        # 2be7 <_IO_stdin_used+0xe7>
    12ac:	mov    edx,0x10f
    12b1:	call   e00 <__assert_fail@plt>
    12b6:	lea    rcx,[rip+0x19c3]        # 2c80 <__PRETTY_FUNCTION__.16013>
    12bd:	lea    rsi,[rip+0x1866]        # 2b2a <_IO_stdin_used+0x2a>
    12c4:	lea    rdi,[rip+0x191c]        # 2be7 <_IO_stdin_used+0xe7>
    12cb:	mov    edx,0xfd
    12d0:	call   e00 <__assert_fail@plt>
    12d5:	lea    rcx,[rip+0x19a4]        # 2c80 <__PRETTY_FUNCTION__.16013>
    12dc:	lea    rsi,[rip+0x1847]        # 2b2a <_IO_stdin_used+0x2a>
    12e3:	lea    rdi,[rip+0x18ea]        # 2bd4 <_IO_stdin_used+0xd4>
    12ea:	mov    edx,0xf7
    12ef:	call   e00 <__assert_fail@plt>
    12f4:	lea    rcx,[rip+0x1985]        # 2c80 <__PRETTY_FUNCTION__.16013>
    12fb:	lea    rsi,[rip+0x1828]        # 2b2a <_IO_stdin_used+0x2a>
    1302:	lea    rdi,[rip+0x190b]        # 2c14 <_IO_stdin_used+0x114>
    1309:	mov    edx,0x12d
    130e:	call   e00 <__assert_fail@plt>
    1313:	lea    rcx,[rip+0x1966]        # 2c80 <__PRETTY_FUNCTION__.16013>
    131a:	lea    rsi,[rip+0x1809]        # 2b2a <_IO_stdin_used+0x2a>
    1321:	lea    rdi,[rip+0x18bf]        # 2be7 <_IO_stdin_used+0xe7>
    1328:	mov    edx,0xfb
    132d:	call   e00 <__assert_fail@plt>
    1332:	lea    rcx,[rip+0x1947]        # 2c80 <__PRETTY_FUNCTION__.16013>
    1339:	lea    rsi,[rip+0x17ea]        # 2b2a <_IO_stdin_used+0x2a>
    1340:	lea    rdi,[rip+0x18a0]        # 2be7 <_IO_stdin_used+0xe7>
    1347:	mov    edx,0xfc
    134c:	call   e00 <__assert_fail@plt>
    1351:	lea    rcx,[rip+0x1928]        # 2c80 <__PRETTY_FUNCTION__.16013>
    1358:	lea    rsi,[rip+0x17cb]        # 2b2a <_IO_stdin_used+0x2a>
    135f:	lea    rdi,[rip+0x1881]        # 2be7 <_IO_stdin_used+0xe7>
    1366:	mov    edx,0x110
    136b:	call   e00 <__assert_fail@plt>
    1370:	lea    rcx,[rip+0x1909]        # 2c80 <__PRETTY_FUNCTION__.16013>
    1377:	lea    rsi,[rip+0x17ac]        # 2b2a <_IO_stdin_used+0x2a>
    137e:	lea    rdi,[rip+0x1862]        # 2be7 <_IO_stdin_used+0xe7>
    1385:	mov    edx,0x100
    138a:	call   e00 <__assert_fail@plt>
    138f:	lea    rcx,[rip+0x18ea]        # 2c80 <__PRETTY_FUNCTION__.16013>
    1396:	lea    rsi,[rip+0x178d]        # 2b2a <_IO_stdin_used+0x2a>
    139d:	lea    rdi,[rip+0x1843]        # 2be7 <_IO_stdin_used+0xe7>
    13a4:	mov    edx,0x113
    13a9:	call   e00 <__assert_fail@plt>
    13ae:	lea    rcx,[rip+0x18cb]        # 2c80 <__PRETTY_FUNCTION__.16013>
    13b5:	lea    rsi,[rip+0x176e]        # 2b2a <_IO_stdin_used+0x2a>
    13bc:	lea    rdi,[rip+0x1824]        # 2be7 <_IO_stdin_used+0xe7>
    13c3:	mov    edx,0xfe
    13c8:	call   e00 <__assert_fail@plt>
    13cd:	lea    rcx,[rip+0x18ac]        # 2c80 <__PRETTY_FUNCTION__.16013>
    13d4:	lea    rsi,[rip+0x174f]        # 2b2a <_IO_stdin_used+0x2a>
    13db:	lea    rdi,[rip+0x1805]        # 2be7 <_IO_stdin_used+0xe7>
    13e2:	mov    edx,0x111
    13e7:	call   e00 <__assert_fail@plt>
    13ec:	lea    rcx,[rip+0x188d]        # 2c80 <__PRETTY_FUNCTION__.16013>
    13f3:	lea    rsi,[rip+0x1730]        # 2b2a <_IO_stdin_used+0x2a>
    13fa:	lea    rdi,[rip+0x17e6]        # 2be7 <_IO_stdin_used+0xe7>
    1401:	mov    edx,0xff
    1406:	call   e00 <__assert_fail@plt>
    140b:	lea    rcx,[rip+0x186e]        # 2c80 <__PRETTY_FUNCTION__.16013>
    1412:	lea    rsi,[rip+0x1711]        # 2b2a <_IO_stdin_used+0x2a>
    1419:	lea    rdi,[rip+0x17c7]        # 2be7 <_IO_stdin_used+0xe7>
    1420:	mov    edx,0x112
    1425:	call   e00 <__assert_fail@plt>
    142a:	lea    rcx,[rip+0x184f]        # 2c80 <__PRETTY_FUNCTION__.16013>
    1431:	lea    rsi,[rip+0x16f2]        # 2b2a <_IO_stdin_used+0x2a>
    1438:	lea    rdi,[rip+0x17a8]        # 2be7 <_IO_stdin_used+0xe7>
    143f:	mov    edx,0x101
    1444:	call   e00 <__assert_fail@plt>
    1449:	lea    rcx,[rip+0x1830]        # 2c80 <__PRETTY_FUNCTION__.16013>
    1450:	lea    rsi,[rip+0x16d3]        # 2b2a <_IO_stdin_used+0x2a>
    1457:	lea    rdi,[rip+0x1789]        # 2be7 <_IO_stdin_used+0xe7>
    145e:	mov    edx,0x114
    1463:	call   e00 <__assert_fail@plt>
    1468:	lea    rdi,[rip+0x202c31]        # 2040a0 <helper_save_callbacks>
    146f:	mov    esi,r14d
    1472:	mov    QWORD PTR [rsp+0x8],rax
    1477:	call   2800 <helper_setcallbacks_save>
    147c:	lea    rdi,[rip+0x1773]        # 2bf6 <_IO_stdin_used+0xf6>
    1483:	call   18e0 <startup>
    1488:	lea    rdi,[rip+0x281]        # 1710 <save_signal_handler>
    148f:	call   1950 <setup_signals>
    1494:	push   rbx
    1495:	mov    rax,QWORD PTR [rsp+0x10]
    149a:	lea    r8,[rip+0x202bff]        # 2040a0 <helper_save_callbacks>
    14a1:	mov    rdi,QWORD PTR [rip+0x202c38]        # 2040e0 <xch>
    14a8:	mov    esi,DWORD PTR [rip+0x202c2e]        # 2040dc <io_fd>
    14ae:	mov    r9d,r13d
    14b1:	mov    ecx,r12d
    14b4:	mov    edx,ebp
    14b6:	push   rax
    14b7:	call   ed0 <xc_domain_save@plt>
    14bc:	mov    edi,eax
    14be:	call   1780 <complete>
    14c3:	lea    rcx,[rip+0x17b6]        # 2c80 <__PRETTY_FUNCTION__.16013>
    14ca:	lea    rsi,[rip+0x1659]        # 2b2a <_IO_stdin_used+0x2a>
    14d1:	lea    rdi,[rip+0x170f]        # 2be7 <_IO_stdin_used+0xe7>
    14d8:	mov    edx,0x115
    14dd:	call   e00 <__assert_fail@plt>
    14e2:	lea    rcx,[rip+0x1797]        # 2c80 <__PRETTY_FUNCTION__.16013>
    14e9:	lea    rsi,[rip+0x163a]        # 2b2a <_IO_stdin_used+0x2a>
    14f0:	lea    rdi,[rip+0x16f0]        # 2be7 <_IO_stdin_used+0xe7>
    14f7:	mov    edx,0x116
    14fc:	call   e00 <__assert_fail@plt>
    1501:	lea    rcx,[rip+0x1778]        # 2c80 <__PRETTY_FUNCTION__.16013>
    1508:	lea    rsi,[rip+0x161b]        # 2b2a <_IO_stdin_used+0x2a>
    150f:	lea    rdi,[rip+0x16d1]        # 2be7 <_IO_stdin_used+0xe7>
    1516:	mov    edx,0x117
    151b:	call   e00 <__assert_fail@plt>
    1520:	lea    rcx,[rip+0x1759]        # 2c80 <__PRETTY_FUNCTION__.16013>
    1527:	lea    rsi,[rip+0x15fc]        # 2b2a <_IO_stdin_used+0x2a>
    152e:	lea    rdi,[rip+0x16b2]        # 2be7 <_IO_stdin_used+0xe7>
    1535:	mov    edx,0x118
    153a:	call   e00 <__assert_fail@plt>
    153f:	lea    rcx,[rip+0x173a]        # 2c80 <__PRETTY_FUNCTION__.16013>
    1546:	lea    rsi,[rip+0x15dd]        # 2b2a <_IO_stdin_used+0x2a>
    154d:	lea    rdi,[rip+0x1693]        # 2be7 <_IO_stdin_used+0xe7>
    1554:	mov    edx,0x119
    1559:	call   e00 <__assert_fail@plt>
    155e:	mov    esi,DWORD PTR [rsp+0x20]
    1562:	lea    rdi,[rip+0x202af7]        # 204060 <helper_restore_callbacks>
    1569:	mov    QWORD PTR [rsp+0x28],rax
    156e:	call   2870 <helper_setcallbacks_restore>
    1573:	lea    rdi,[rip+0x1692]        # 2c0c <_IO_stdin_used+0x10c>
    157a:	mov    QWORD PTR [rsp+0x38],0x0
    1583:	mov    QWORD PTR [rsp+0x40],0x0
    158c:	call   18e0 <startup>
    1591:	xor    edi,edi
    1593:	call   1950 <setup_signals>
    1598:	lea    rax,[rip+0x202ac1]        # 204060 <helper_restore_callbacks>
    159f:	push   rbx
    15a0:	mov    esi,DWORD PTR [rip+0x202b36]        # 2040dc <io_fd>
    15a6:	mov    rdi,QWORD PTR [rip+0x202b33]        # 2040e0 <xch>
    15ad:	movzx  r9d,r13w
    15b1:	mov    ecx,r12d
    15b4:	push   rax
    15b5:	mov    rax,QWORD PTR [rsp+0x38]
    15ba:	mov    edx,ebp
    15bc:	push   rax
    15bd:	mov    eax,DWORD PTR [rsp+0x30]
    15c1:	push   rax
    15c2:	mov    eax,DWORD PTR [rsp+0x30]
    15c6:	push   rax
    15c7:	movzx  r15d,WORD PTR [rsp+0x30]
    15cd:	push   r15
    15cf:	lea    rax,[rsp+0x70]
    15d4:	push   rax
    15d5:	push   r14
    15d7:	lea    r8,[rsp+0x78]
    15dc:	call   d90 <xc_domain_restore@plt>
    15e1:	add    rsp,0x40
    15e5:	mov    rdi,QWORD PTR [rsp+0x38]
    15ea:	mov    rsi,QWORD PTR [rsp+0x40]
    15ef:	mov    ebx,eax
    15f1:	xor    edx,edx
    15f3:	call   1c30 <helper_stub_restore_results>
    15f8:	mov    edi,ebx
    15fa:	call   1780 <complete>
    15ff:	nop

0000000000001600 <_start>:
    1600:	xor    ebp,ebp
    1602:	mov    r9,rdx
    1605:	pop    rsi
    1606:	mov    rdx,rsp
    1609:	and    rsp,0xfffffffffffffff0
    160d:	push   rax
    160e:	push   rsp
    160f:	lea    r8,[rip+0x14da]        # 2af0 <__libc_csu_fini>
    1616:	lea    rcx,[rip+0x1463]        # 2a80 <__libc_csu_init>
    161d:	lea    rdi,[rip+0xfffffffffffff9bc]        # fe0 <main>
    1624:	call   QWORD PTR [rip+0x2029b6]        # 203fe0 <__libc_start_main@GLIBC_2.2.5>
    162a:	hlt    
    162b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000001630 <deregister_tm_clones>:
    1630:	lea    rdi,[rip+0x2029f1]        # 204028 <__TMC_END__>
    1637:	push   rbp
    1638:	lea    rax,[rip+0x2029e9]        # 204028 <__TMC_END__>
    163f:	cmp    rax,rdi
    1642:	mov    rbp,rsp
    1645:	je     1660 <deregister_tm_clones+0x30>
    1647:	mov    rax,QWORD PTR [rip+0x20298a]        # 203fd8 <_ITM_deregisterTMCloneTable>
    164e:	test   rax,rax
    1651:	je     1660 <deregister_tm_clones+0x30>
    1653:	pop    rbp
    1654:	jmp    rax
    1656:	nop    WORD PTR cs:[rax+rax*1+0x0]
    1660:	pop    rbp
    1661:	ret    
    1662:	nop    DWORD PTR [rax+0x0]
    1666:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000001670 <register_tm_clones>:
    1670:	lea    rdi,[rip+0x2029b1]        # 204028 <__TMC_END__>
    1677:	lea    rsi,[rip+0x2029aa]        # 204028 <__TMC_END__>
    167e:	push   rbp
    167f:	sub    rsi,rdi
    1682:	mov    rbp,rsp
    1685:	sar    rsi,0x3
    1689:	mov    rax,rsi
    168c:	shr    rax,0x3f
    1690:	add    rsi,rax
    1693:	sar    rsi,1
    1696:	je     16b0 <register_tm_clones+0x40>
    1698:	mov    rax,QWORD PTR [rip+0x202951]        # 203ff0 <_ITM_registerTMCloneTable>
    169f:	test   rax,rax
    16a2:	je     16b0 <register_tm_clones+0x40>
    16a4:	pop    rbp
    16a5:	jmp    rax
    16a7:	nop    WORD PTR [rax+rax*1+0x0]
    16b0:	pop    rbp
    16b1:	ret    
    16b2:	nop    DWORD PTR [rax+0x0]
    16b6:	nop    WORD PTR cs:[rax+rax*1+0x0]

00000000000016c0 <__do_global_dtors_aux>:
    16c0:	cmp    BYTE PTR [rip+0x202979],0x0        # 204040 <completed.7697>
    16c7:	jne    16f8 <__do_global_dtors_aux+0x38>
    16c9:	cmp    QWORD PTR [rip+0x202927],0x0        # 203ff8 <__cxa_finalize@GLIBC_2.2.5>
    16d1:	push   rbp
    16d2:	mov    rbp,rsp
    16d5:	je     16e3 <__do_global_dtors_aux+0x23>
    16d7:	mov    rdi,QWORD PTR [rip+0x20292a]        # 204008 <__dso_handle>
    16de:	call   f10 <__cxa_finalize@plt>
    16e3:	call   1630 <deregister_tm_clones>
    16e8:	mov    BYTE PTR [rip+0x202951],0x1        # 204040 <completed.7697>
    16ef:	pop    rbp
    16f0:	ret    
    16f1:	nop    DWORD PTR [rax+0x0]
    16f8:	repz ret 
    16fa:	nop    WORD PTR [rax+rax*1+0x0]

0000000000001700 <frame_dummy>:
    1700:	push   rbp
    1701:	mov    rbp,rsp
    1704:	pop    rbp
    1705:	jmp    1670 <register_tm_clones>
    170a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000001710 <save_signal_handler>:
    1710:	push   r12
    1712:	push   rbp
    1713:	push   rbx
    1714:	call   d80 <__errno_location@plt>
    1719:	mov    ebx,DWORD PTR [rip+0x2029bd]        # 2040dc <io_fd>
    171f:	mov    edi,DWORD PTR [rip+0x2029b3]        # 2040d8 <unwriteable_fd>
    1725:	mov    rbp,rax
    1728:	mov    r12d,DWORD PTR [rax]
    172b:	mov    esi,ebx
    172d:	call   df0 <dup2@plt>
    1732:	cmp    ebx,eax
    1734:	jne    173f <save_signal_handler+0x2f>
    1736:	mov    DWORD PTR [rbp+0x0],r12d
    173a:	pop    rbx
    173b:	pop    rbp
    173c:	pop    r12
    173e:	ret    
    173f:	call   d70 <abort@plt>
    1744:	xchg   ax,ax
    1746:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000001750 <tellparent_destroy>:
    1750:	sub    rsp,0x8
    1754:	call   d70 <abort@plt>
    1759:	nop    DWORD PTR [rax+0x0]

0000000000001760 <tellparent_progress>:
    1760:	mov    rdi,rsi
    1763:	mov    rcx,r9
    1766:	mov    rsi,rdx
    1769:	mov    rdx,r8
    176c:	xor    r8d,r8d
    176f:	jmp    2620 <helper_stub_progress>
    1774:	xchg   ax,ax
    1776:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000001780 <complete>:
    1780:	push   rbp
    1781:	push   rbx
    1782:	xor    ebp,ebp
    1784:	mov    ebx,edi
    1786:	sub    rsp,0x8
    178a:	test   edi,edi
    178c:	je     1795 <complete+0x15>
    178e:	call   d80 <__errno_location@plt>
    1793:	mov    ebp,DWORD PTR [rax]
    1795:	lea    r8,[rip+0x137a]        # 2b16 <_IO_stdin_used+0x16>
    179c:	lea    rcx,[rip+0x1361]        # 2b04 <_IO_stdin_used+0x4>
    17a3:	lea    rdi,[rip+0x202866]        # 204010 <logger>
    17aa:	mov    r9d,ebx
    17ad:	mov    edx,ebp
    17af:	mov    esi,0x1
    17b4:	xor    eax,eax
    17b6:	call   e50 <xtl_log@plt>
    17bb:	xor    edx,edx
    17bd:	mov    esi,ebp
    17bf:	mov    edi,ebx
    17c1:	call   28e0 <helper_stub_complete>
    17c6:	mov    rdi,QWORD PTR [rip+0x202913]        # 2040e0 <xch>
    17cd:	call   e10 <xc_interface_close@plt>
    17d2:	xor    edi,edi
    17d4:	call   ef0 <exit@plt>
    17d9:	nop    DWORD PTR [rax+0x0]

00000000000017e0 <transmit.isra.0>:
    17e0:	test   esi,esi
    17e2:	je     1819 <transmit.isra.0+0x39>
    17e4:	push   rbp
    17e5:	push   rbx
    17e6:	mov    rbp,rdi
    17e9:	mov    ebx,esi
    17eb:	sub    rsp,0x8
    17ef:	nop
    17f0:	movsxd rdx,ebx
    17f3:	mov    rsi,rbp
    17f6:	mov    edi,0x1
    17fb:	call   db0 <write@plt>
    1800:	test   eax,eax
    1802:	js     181b <transmit.isra.0+0x3b>
    1804:	cmp    eax,ebx
    1806:	jg     1831 <transmit.isra.0+0x51>
    1808:	movsxd rdx,eax
    180b:	add    rbp,rdx
    180e:	sub    ebx,eax
    1810:	jne    17f0 <transmit.isra.0+0x10>
    1812:	add    rsp,0x8
    1816:	pop    rbx
    1817:	pop    rbp
    1818:	ret    
    1819:	repz ret 
    181b:	lea    rdi,[rip+0x1302]        # 2b24 <_IO_stdin_used+0x24>
    1822:	call   ec0 <perror@plt>
    1827:	mov    edi,0xffffffff
    182c:	call   ef0 <exit@plt>
    1831:	lea    rcx,[rip+0x1460]        # 2c98 <__PRETTY_FUNCTION__.15980>
    1838:	lea    rsi,[rip+0x12eb]        # 2b2a <_IO_stdin_used+0x2a>
    183f:	lea    rdi,[rip+0x12f8]        # 2b3e <_IO_stdin_used+0x3e>
    1846:	mov    edx,0xc3
    184b:	call   e00 <__assert_fail@plt>

0000000000001850 <tellparent_vmessage>:
    1850:	push   r12
    1852:	push   rbp
    1853:	mov    r12,rcx
    1856:	push   rbx
    1857:	mov    ebp,edx
    1859:	mov    ebx,esi
    185b:	mov    rcx,r9
    185e:	mov    rdx,r8
    1861:	mov    esi,0x1
    1866:	sub    rsp,0x10
    186a:	mov    rdi,rsp
    186d:	mov    rax,QWORD PTR fs:0x28
    1876:	mov    QWORD PTR [rsp+0x8],rax
    187b:	xor    eax,eax
    187d:	call   ea0 <__vasprintf_chk@plt>
    1882:	test   eax,eax
    1884:	js     18bb <tellparent_vmessage+0x6b>
    1886:	mov    rcx,QWORD PTR [rsp]
    188a:	xor    r8d,r8d
    188d:	mov    rdx,r12
    1890:	mov    esi,ebp
    1892:	mov    edi,ebx
    1894:	call   2440 <helper_stub_log>
    1899:	mov    rdi,QWORD PTR [rsp]
    189d:	call   d60 <free@plt>
    18a2:	mov    rax,QWORD PTR [rsp+0x8]
    18a7:	xor    rax,QWORD PTR fs:0x28
    18b0:	jne    18cf <tellparent_vmessage+0x7f>
    18b2:	add    rsp,0x10
    18b6:	pop    rbx
    18b7:	pop    rbp
    18b8:	pop    r12
    18ba:	ret    
    18bb:	lea    rdi,[rip+0x136e]        # 2c30 <_IO_stdin_used+0x130>
    18c2:	call   ec0 <perror@plt>
    18c7:	or     edi,0xffffffff
    18ca:	call   ef0 <exit@plt>
    18cf:	call   de0 <__stack_chk_fail@plt>
    18d4:	xchg   ax,ax
    18d6:	nop    WORD PTR cs:[rax+rax*1+0x0]

00000000000018e0 <startup>:
    18e0:	mov    r9,rdi
    18e3:	lea    r8,[rip+0x125d]        # 2b47 <_IO_stdin_used+0x47>
    18ea:	lea    rcx,[rip+0x1213]        # 2b04 <_IO_stdin_used+0x4>
    18f1:	lea    rdi,[rip+0x202718]        # 204010 <logger>
    18f8:	sub    rsp,0x8
    18fc:	xor    edx,edx
    18fe:	xor    eax,eax
    1900:	mov    esi,0x1
    1905:	call   e50 <xtl_log@plt>
    190a:	lea    rsi,[rip+0x2026ff]        # 204010 <logger>
    1911:	xor    edx,edx
    1913:	mov    rdi,rsi
    1916:	call   dc0 <xc_interface_open@plt>
    191b:	test   rax,rax
    191e:	mov    QWORD PTR [rip+0x2027bb],rax        # 2040e0 <xch>
    1925:	je     192c <startup+0x4c>
    1927:	add    rsp,0x8
    192b:	ret    
    192c:	call   d80 <__errno_location@plt>
    1931:	mov    edi,DWORD PTR [rax]
    1933:	lea    rsi,[rip+0x1219]        # 2b53 <_IO_stdin_used+0x53>
    193a:	xor    eax,eax
    193c:	call   f20 <fail>
    1941:	nop    DWORD PTR [rax+rax*1+0x0]
    1946:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000001950 <setup_signals>:
    1950:	push   rbp
    1951:	push   rbx
    1952:	mov    rbp,rdi
    1955:	lea    rdi,[rip+0x1210]        # 2b6c <_IO_stdin_used+0x6c>
    195c:	xor    esi,esi
    195e:	sub    rsp,0x128
    1965:	mov    rax,QWORD PTR fs:0x28
    196e:	mov    QWORD PTR [rsp+0x118],rax
    1976:	xor    eax,eax
    1978:	call   eb0 <open@plt>
    197d:	test   eax,eax
    197f:	mov    DWORD PTR [rip+0x202753],eax        # 2040d8 <unwriteable_fd>
    1985:	js     1a13 <setup_signals+0xc3>
    198b:	lea    rdx,[rsp+0x88]
    1993:	xor    eax,eax
    1995:	mov    ecx,0x12
    199a:	lea    rbx,[rsp+0x80]
    19a2:	mov    QWORD PTR [rsp+0x80],rbp
    19aa:	mov    rdi,rdx
    19ad:	rep stos QWORD PTR es:[rdi],rax
    19b0:	mov    rdi,rdx
    19b3:	call   e60 <sigemptyset@plt>
    19b8:	xor    edx,edx
    19ba:	mov    rsi,rbx
    19bd:	mov    edi,0xf
    19c2:	call   da0 <sigaction@plt>
    19c7:	test   eax,eax
    19c9:	jne    1a42 <setup_signals+0xf2>
    19cb:	mov    rbx,rsp
    19ce:	mov    rdi,rbx
    19d1:	call   e60 <sigemptyset@plt>
    19d6:	mov    esi,0xf
    19db:	mov    rdi,rbx
    19de:	call   f00 <sigaddset@plt>
    19e3:	xor    edx,edx
    19e5:	mov    rsi,rbx
    19e8:	mov    edi,0x1
    19ed:	call   d50 <sigprocmask@plt>
    19f2:	test   eax,eax
    19f4:	jne    1a2d <setup_signals+0xdd>
    19f6:	mov    rax,QWORD PTR [rsp+0x118]
    19fe:	xor    rax,QWORD PTR fs:0x28
    1a07:	jne    1a28 <setup_signals+0xd8>
    1a09:	add    rsp,0x128
    1a10:	pop    rbx
    1a11:	pop    rbp
    1a12:	ret    
    1a13:	call   d80 <__errno_location@plt>
    1a18:	mov    edi,DWORD PTR [rax]
    1a1a:	lea    rsi,[rip+0x1155]        # 2b76 <_IO_stdin_used+0x76>
    1a21:	xor    eax,eax
    1a23:	call   f20 <fail>
    1a28:	call   de0 <__stack_chk_fail@plt>
    1a2d:	call   d80 <__errno_location@plt>
    1a32:	mov    edi,DWORD PTR [rax]
    1a34:	lea    rsi,[rip+0x121d]        # 2c58 <_IO_stdin_used+0x158>
    1a3b:	xor    eax,eax
    1a3d:	call   f20 <fail>
    1a42:	call   d80 <__errno_location@plt>
    1a47:	mov    edi,DWORD PTR [rax]
    1a49:	lea    rsi,[rip+0x1141]        # 2b91 <_IO_stdin_used+0x91>
    1a50:	xor    eax,eax
    1a52:	call   f20 <fail>
    1a57:	nop    WORD PTR [rax+rax*1+0x0]

0000000000001a60 <helper_allocbuf>:
    1a60:	movsxd rdi,edi
    1a63:	test   rdi,rdi
    1a66:	je     1a80 <helper_allocbuf+0x20>
    1a68:	sub    rsp,0x8
    1a6c:	call   e90 <malloc@plt>
    1a71:	test   rax,rax
    1a74:	je     1a83 <helper_allocbuf+0x23>
    1a76:	add    rsp,0x8
    1a7a:	ret    
    1a7b:	nop    DWORD PTR [rax+rax*1+0x0]
    1a80:	xor    eax,eax
    1a82:	ret    
    1a83:	lea    rdi,[rip+0x1120]        # 2baa <_IO_stdin_used+0xaa>
    1a8a:	call   ec0 <perror@plt>
    1a8f:	or     edi,0xffffffff
    1a92:	call   ef0 <exit@plt>
    1a97:	nop    WORD PTR [rax+rax*1+0x0]

0000000000001aa0 <helper_transmitmsg>:
    1aa0:	push   rbx
    1aa1:	sub    rsp,0x10
    1aa5:	mov    rax,QWORD PTR fs:0x28
    1aae:	mov    QWORD PTR [rsp+0x8],rax
    1ab3:	xor    eax,eax
    1ab5:	cmp    esi,0xffff
    1abb:	jg     1afe <helper_transmitmsg+0x5e>
    1abd:	mov    rbx,rdi
    1ac0:	lea    rdi,[rsp+0x6]
    1ac5:	mov    WORD PTR [rsp+0x6],si
    1aca:	mov    esi,0x2
    1acf:	call   17e0 <transmit.isra.0>
    1ad4:	movzx  esi,WORD PTR [rsp+0x6]
    1ad9:	mov    rdi,rbx
    1adc:	call   17e0 <transmit.isra.0>
    1ae1:	mov    rax,QWORD PTR [rsp+0x8]
    1ae6:	xor    rax,QWORD PTR fs:0x28
    1aef:	jne    1b1d <helper_transmitmsg+0x7d>
    1af1:	add    rsp,0x10
    1af5:	mov    rdi,rbx
    1af8:	pop    rbx
    1af9:	jmp    d60 <free@plt>
    1afe:	lea    rcx,[rip+0x11ab]        # 2cb0 <__PRETTY_FUNCTION__.15989>
    1b05:	lea    rsi,[rip+0x101e]        # 2b2a <_IO_stdin_used+0x2a>
    1b0c:	lea    rdi,[rip+0x10b0]        # 2bc3 <_IO_stdin_used+0xc3>
    1b13:	mov    edx,0xcb
    1b18:	call   e00 <__assert_fail@plt>
    1b1d:	call   de0 <__stack_chk_fail@plt>
    1b22:	nop    DWORD PTR [rax+0x0]
    1b26:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000001b30 <helper_getreply>:
    1b30:	push   rbp
    1b31:	push   rbx
    1b32:	mov    ebx,0x4
    1b37:	sub    rsp,0x18
    1b3b:	mov    rax,QWORD PTR fs:0x28
    1b44:	mov    QWORD PTR [rsp+0x8],rax
    1b49:	xor    eax,eax
    1b4b:	lea    rbp,[rsp+0x4]
    1b50:	xor    edi,edi
    1b52:	mov    rdx,rbx
    1b55:	mov    rsi,rbp
    1b58:	call   e20 <read@plt>
    1b5d:	test   rax,rax
    1b60:	jle    1b90 <helper_getreply+0x60>
    1b62:	cmp    rax,rbx
    1b65:	ja     1ba0 <helper_getreply+0x70>
    1b67:	add    rbp,rax
    1b6a:	sub    rbx,rax
    1b6d:	jne    1b50 <helper_getreply+0x20>
    1b6f:	mov    rcx,QWORD PTR [rsp+0x8]
    1b74:	xor    rcx,QWORD PTR fs:0x28
    1b7d:	mov    eax,DWORD PTR [rsp+0x4]
    1b81:	jne    1bbf <helper_getreply+0x8f>
    1b83:	add    rsp,0x18
    1b87:	pop    rbx
    1b88:	pop    rbp
    1b89:	ret    
    1b8a:	nop    WORD PTR [rax+rax*1+0x0]
    1b90:	test   eax,eax
    1b92:	jg     1b6f <helper_getreply+0x3f>
    1b94:	mov    edi,0xfffffffe
    1b99:	call   ef0 <exit@plt>
    1b9e:	xchg   ax,ax
    1ba0:	lea    rcx,[rip+0x10e1]        # 2c88 <__PRETTY_FUNCTION__.15949>
    1ba7:	lea    rsi,[rip+0xf7c]        # 2b2a <_IO_stdin_used+0x2a>
    1bae:	lea    rdi,[rip+0xf89]        # 2b3e <_IO_stdin_used+0x3e>
    1bb5:	mov    edx,0x70
    1bba:	call   e00 <__assert_fail@plt>
    1bbf:	call   de0 <__stack_chk_fail@plt>
    1bc4:	nop    WORD PTR cs:[rax+rax*1+0x0]
    1bce:	xchg   ax,ax

0000000000001bd0 <bytes_put>:
    1bd0:	push   rbp
    1bd1:	push   rbx
    1bd2:	mov    ebx,ecx
    1bd4:	mov    eax,0x3fffffff
    1bd9:	mov    rbp,rsi
    1bdc:	sub    rsp,0x8
    1be0:	movsxd rcx,DWORD PTR [rsi]
    1be3:	sub    eax,ecx
    1be5:	cmp    eax,ebx
    1be7:	jle    1c0b <bytes_put+0x3b>
    1be9:	test   rdi,rdi
    1bec:	je     1bff <bytes_put+0x2f>
    1bee:	mov    rsi,rdx
    1bf1:	add    rdi,rcx
    1bf4:	movsxd rdx,ebx
    1bf7:	call   e80 <memcpy@plt>
    1bfc:	mov    ecx,DWORD PTR [rbp+0x0]
    1bff:	add    ebx,ecx
    1c01:	mov    DWORD PTR [rbp+0x0],ebx
    1c04:	add    rsp,0x8
    1c08:	pop    rbx
    1c09:	pop    rbp
    1c0a:	ret    
    1c0b:	lea    rcx,[rip+0x1226]        # 2e38 <__PRETTY_FUNCTION__.10307>
    1c12:	lea    rsi,[rip+0x10aa]        # 2cc3 <__PRETTY_FUNCTION__.15989+0x13>
    1c19:	lea    rdi,[rip+0x10bd]        # 2cdd <__PRETTY_FUNCTION__.15989+0x2d>
    1c20:	mov    edx,0x11
    1c25:	call   e00 <__assert_fail@plt>
    1c2a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000001c30 <helper_stub_restore_results>:
    1c30:	push   r15
    1c32:	push   r14
    1c34:	mov    r15,rdi
    1c37:	push   r13
    1c39:	push   r12
    1c3b:	xor    edi,edi
    1c3d:	push   rbp
    1c3e:	push   rbx
    1c3f:	mov    rbp,rdx
    1c42:	mov    r13,rsi
    1c45:	mov    ecx,0x2
    1c4a:	sub    rsp,0x48
    1c4e:	lea    r8,[rsp+0x22]
    1c53:	lea    rbx,[rsp+0x24]
    1c58:	mov    QWORD PTR [rsp+0x10],rdx
    1c5d:	lea    r14,[rsp+0x30]
    1c62:	mov    edx,0x8
    1c67:	mov    DWORD PTR [rsp+0x24],0x0
    1c6f:	mov    WORD PTR [rsp+0x22],dx
    1c74:	mov    rsi,rbx
    1c77:	mov    rdx,r8
    1c7a:	mov    QWORD PTR [rsp+0x18],r8
    1c7f:	mov    rax,QWORD PTR fs:0x28
    1c88:	mov    QWORD PTR [rsp+0x38],rax
    1c8d:	xor    eax,eax
    1c8f:	call   1bd0 <bytes_put>
    1c94:	xor    edi,edi
    1c96:	mov    ecx,0x8
    1c9b:	mov    rdx,r14
    1c9e:	mov    rsi,rbx
    1ca1:	mov    QWORD PTR [rsp+0x30],r15
    1ca6:	call   1bd0 <bytes_put>
    1cab:	lea    rax,[rsp+0x28]
    1cb0:	xor    edi,edi
    1cb2:	mov    ecx,0x8
    1cb7:	mov    rsi,rbx
    1cba:	mov    QWORD PTR [rsp+0x28],r13
    1cbf:	mov    rdx,rax
    1cc2:	mov    QWORD PTR [rsp+0x8],rax
    1cc7:	call   1bd0 <bytes_put>
    1ccc:	mov    edi,DWORD PTR [rsp+0x24]
    1cd0:	mov    rsi,rbp
    1cd3:	call   1a60 <helper_allocbuf>
    1cd8:	test   rax,rax
    1cdb:	mov    r8,QWORD PTR [rsp+0x18]
    1ce0:	je     1d7a <helper_stub_restore_results+0x14a>
    1ce6:	mov    rbp,rax
    1ce9:	mov    rdx,r8
    1cec:	mov    eax,0x8
    1cf1:	mov    ecx,0x2
    1cf6:	mov    rsi,rbx
    1cf9:	mov    rdi,rbp
    1cfc:	mov    r12d,DWORD PTR [rsp+0x24]
    1d01:	mov    WORD PTR [rsp+0x22],ax
    1d06:	mov    DWORD PTR [rsp+0x24],0x0
    1d0e:	call   1bd0 <bytes_put>
    1d13:	mov    ecx,0x8
    1d18:	mov    rdx,r14
    1d1b:	mov    rsi,rbx
    1d1e:	mov    rdi,rbp
    1d21:	mov    QWORD PTR [rsp+0x30],r15
    1d26:	call   1bd0 <bytes_put>
    1d2b:	mov    rdx,QWORD PTR [rsp+0x8]
    1d30:	mov    rsi,rbx
    1d33:	mov    ecx,0x8
    1d38:	mov    rdi,rbp
    1d3b:	mov    QWORD PTR [rsp+0x28],r13
    1d40:	call   1bd0 <bytes_put>
    1d45:	mov    esi,DWORD PTR [rsp+0x24]
    1d49:	cmp    esi,r12d
    1d4c:	jne    1d9e <helper_stub_restore_results+0x16e>
    1d4e:	mov    rdx,QWORD PTR [rsp+0x10]
    1d53:	mov    rdi,rbp
    1d56:	call   1aa0 <helper_transmitmsg>
    1d5b:	mov    rax,QWORD PTR [rsp+0x38]
    1d60:	xor    rax,QWORD PTR fs:0x28
    1d69:	jne    1d99 <helper_stub_restore_results+0x169>
    1d6b:	add    rsp,0x48
    1d6f:	pop    rbx
    1d70:	pop    rbp
    1d71:	pop    r12
    1d73:	pop    r13
    1d75:	pop    r14
    1d77:	pop    r15
    1d79:	ret    
    1d7a:	lea    rcx,[rip+0xfbf]        # 2d40 <__PRETTY_FUNCTION__.10446>
    1d81:	lea    rsi,[rip+0xf3b]        # 2cc3 <__PRETTY_FUNCTION__.15989+0x13>
    1d88:	lea    rdi,[rip+0xf66]        # 2cf5 <__PRETTY_FUNCTION__.15989+0x45>
    1d8f:	mov    edx,0xf5
    1d94:	call   e00 <__assert_fail@plt>
    1d99:	call   de0 <__stack_chk_fail@plt>
    1d9e:	lea    rcx,[rip+0xf9b]        # 2d40 <__PRETTY_FUNCTION__.10446>
    1da5:	lea    rsi,[rip+0xf17]        # 2cc3 <__PRETTY_FUNCTION__.15989+0x13>
    1dac:	lea    rdi,[rip+0xf46]        # 2cf9 <__PRETTY_FUNCTION__.15989+0x49>
    1db3:	mov    edx,0xf9
    1db8:	call   e00 <__assert_fail@plt>
    1dbd:	nop    DWORD PTR [rax]

0000000000001dc0 <helper_stub_switch_qemu_logdirty>:
    1dc0:	push   r15
    1dc2:	push   r14
    1dc4:	mov    r15d,edi
    1dc7:	push   r13
    1dc9:	push   r12
    1dcb:	xor    edi,edi
    1dcd:	push   rbp
    1dce:	push   rbx
    1dcf:	mov    rbp,rdx
    1dd2:	mov    r13d,esi
    1dd5:	mov    ecx,0x2
    1dda:	sub    rsp,0x48
    1dde:	lea    r8,[rsp+0x2a]
    1de3:	lea    rbx,[rsp+0x2c]
    1de8:	mov    QWORD PTR [rsp+0x10],rdx
    1ded:	lea    r14,[rsp+0x34]
    1df2:	mov    edx,0x7
    1df7:	mov    DWORD PTR [rsp+0x2c],0x0
    1dff:	mov    WORD PTR [rsp+0x2a],dx
    1e04:	mov    rsi,rbx
    1e07:	mov    rdx,r8
    1e0a:	mov    QWORD PTR [rsp+0x18],r8
    1e0f:	mov    rax,QWORD PTR fs:0x28
    1e18:	mov    QWORD PTR [rsp+0x38],rax
    1e1d:	xor    eax,eax
    1e1f:	call   1bd0 <bytes_put>
    1e24:	xor    edi,edi
    1e26:	mov    ecx,0x4
    1e2b:	mov    rdx,r14
    1e2e:	mov    rsi,rbx
    1e31:	mov    DWORD PTR [rsp+0x34],r15d
    1e36:	call   1bd0 <bytes_put>
    1e3b:	lea    rax,[rsp+0x30]
    1e40:	xor    edi,edi
    1e42:	mov    ecx,0x4
    1e47:	mov    rsi,rbx
    1e4a:	mov    DWORD PTR [rsp+0x30],r13d
    1e4f:	mov    rdx,rax
    1e52:	mov    QWORD PTR [rsp+0x8],rax
    1e57:	call   1bd0 <bytes_put>
    1e5c:	mov    edi,DWORD PTR [rsp+0x2c]
    1e60:	mov    rsi,rbp
    1e63:	call   1a60 <helper_allocbuf>
    1e68:	test   rax,rax
    1e6b:	mov    r8,QWORD PTR [rsp+0x18]
    1e70:	je     1f15 <helper_stub_switch_qemu_logdirty+0x155>
    1e76:	mov    rbp,rax
    1e79:	mov    rdx,r8
    1e7c:	mov    eax,0x7
    1e81:	mov    ecx,0x2
    1e86:	mov    rsi,rbx
    1e89:	mov    rdi,rbp
    1e8c:	mov    r12d,DWORD PTR [rsp+0x2c]
    1e91:	mov    WORD PTR [rsp+0x2a],ax
    1e96:	mov    DWORD PTR [rsp+0x2c],0x0
    1e9e:	call   1bd0 <bytes_put>
    1ea3:	mov    ecx,0x4
    1ea8:	mov    rdx,r14
    1eab:	mov    rsi,rbx
    1eae:	mov    rdi,rbp
    1eb1:	mov    DWORD PTR [rsp+0x34],r15d
    1eb6:	call   1bd0 <bytes_put>
    1ebb:	mov    rdx,QWORD PTR [rsp+0x8]
    1ec0:	mov    rsi,rbx
    1ec3:	mov    ecx,0x4
    1ec8:	mov    rdi,rbp
    1ecb:	mov    DWORD PTR [rsp+0x30],r13d
    1ed0:	call   1bd0 <bytes_put>
    1ed5:	mov    esi,DWORD PTR [rsp+0x2c]
    1ed9:	cmp    esi,r12d
    1edc:	jne    1f39 <helper_stub_switch_qemu_logdirty+0x179>
    1ede:	mov    rbx,QWORD PTR [rsp+0x10]
    1ee3:	mov    rdi,rbp
    1ee6:	mov    rdx,rbx
    1ee9:	call   1aa0 <helper_transmitmsg>
    1eee:	mov    rdi,rbx
    1ef1:	call   1b30 <helper_getreply>
    1ef6:	mov    rcx,QWORD PTR [rsp+0x38]
    1efb:	xor    rcx,QWORD PTR fs:0x28
    1f04:	jne    1f34 <helper_stub_switch_qemu_logdirty+0x174>
    1f06:	add    rsp,0x48
    1f0a:	pop    rbx
    1f0b:	pop    rbp
    1f0c:	pop    r12
    1f0e:	pop    r13
    1f10:	pop    r14
    1f12:	pop    r15
    1f14:	ret    
    1f15:	lea    rcx,[rip+0xe44]        # 2d60 <__PRETTY_FUNCTION__.10434>
    1f1c:	lea    rsi,[rip+0xda0]        # 2cc3 <__PRETTY_FUNCTION__.15989+0x13>
    1f23:	lea    rdi,[rip+0xdcb]        # 2cf5 <__PRETTY_FUNCTION__.15989+0x45>
    1f2a:	mov    edx,0xe0
    1f2f:	call   e00 <__assert_fail@plt>
    1f34:	call   de0 <__stack_chk_fail@plt>
    1f39:	lea    rcx,[rip+0xe20]        # 2d60 <__PRETTY_FUNCTION__.10434>
    1f40:	lea    rsi,[rip+0xd7c]        # 2cc3 <__PRETTY_FUNCTION__.15989+0x13>
    1f47:	lea    rdi,[rip+0xdab]        # 2cf9 <__PRETTY_FUNCTION__.15989+0x49>
    1f4e:	mov    edx,0xe4
    1f53:	call   e00 <__assert_fail@plt>
    1f58:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000001f60 <STRING_put>:
    1f60:	push   r13
    1f62:	push   r12
    1f64:	mov    r12,rdi
    1f67:	push   rbp
    1f68:	push   rbx
    1f69:	mov    rdi,rdx
    1f6c:	mov    r13,rsi
    1f6f:	mov    rbp,rdx
    1f72:	sub    rsp,0x18
    1f76:	mov    rax,QWORD PTR fs:0x28
    1f7f:	mov    QWORD PTR [rsp+0x8],rax
    1f84:	xor    eax,eax
    1f86:	call   dd0 <strlen@plt>
    1f8b:	cmp    rax,0x1ffffffe
    1f91:	ja     1fda <STRING_put+0x7a>
    1f93:	lea    ebx,[rax+0x1]
    1f96:	lea    rdx,[rsp+0x4]
    1f9b:	mov    ecx,0x4
    1fa0:	mov    rsi,r13
    1fa3:	mov    rdi,r12
    1fa6:	mov    DWORD PTR [rsp+0x4],ebx
    1faa:	call   1bd0 <bytes_put>
    1faf:	mov    ecx,ebx
    1fb1:	mov    rdx,rbp
    1fb4:	mov    rsi,r13
    1fb7:	mov    rdi,r12
    1fba:	call   1bd0 <bytes_put>
    1fbf:	mov    rax,QWORD PTR [rsp+0x8]
    1fc4:	xor    rax,QWORD PTR fs:0x28
    1fcd:	jne    1ff9 <STRING_put+0x99>
    1fcf:	add    rsp,0x18
    1fd3:	pop    rbx
    1fd4:	pop    rbp
    1fd5:	pop    r12
    1fd7:	pop    r13
    1fd9:	ret    
    1fda:	lea    rcx,[rip+0xe47]        # 2e28 <__PRETTY_FUNCTION__.10350>
    1fe1:	lea    rsi,[rip+0xcdb]        # 2cc3 <__PRETTY_FUNCTION__.15989+0x13>
    1fe8:	lea    rdi,[rip+0xd18]        # 2d07 <__PRETTY_FUNCTION__.15989+0x57>
    1fef:	mov    edx,0x48
    1ff4:	call   e00 <__assert_fail@plt>
    1ff9:	call   de0 <__stack_chk_fail@plt>
    1ffe:	xchg   ax,ax

0000000000002000 <helper_stub_suspend>:
    2000:	push   r14
    2002:	push   r13
    2004:	mov    edx,0x3
    2009:	push   r12
    200b:	push   rbp
    200c:	mov    r14,rdi
    200f:	push   rbx
    2010:	xor    edi,edi
    2012:	mov    ecx,0x2
    2017:	sub    rsp,0x10
    201b:	lea    r13,[rsp+0x2]
    2020:	lea    r12,[rsp+0x4]
    2025:	mov    WORD PTR [rsp+0x2],dx
    202a:	mov    rax,QWORD PTR fs:0x28
    2033:	mov    QWORD PTR [rsp+0x8],rax
    2038:	xor    eax,eax
    203a:	mov    rdx,r13
    203d:	mov    rsi,r12
    2040:	mov    DWORD PTR [rsp+0x4],0x0
    2048:	call   1bd0 <bytes_put>
    204d:	mov    edi,DWORD PTR [rsp+0x4]
    2051:	mov    rsi,r14
    2054:	call   1a60 <helper_allocbuf>
    2059:	test   rax,rax
    205c:	je     20c2 <helper_stub_suspend+0xc2>
    205e:	mov    rbp,rax
    2061:	mov    rsi,r12
    2064:	mov    eax,0x3
    2069:	mov    ecx,0x2
    206e:	mov    rdx,r13
    2071:	mov    rdi,rbp
    2074:	mov    ebx,DWORD PTR [rsp+0x4]
    2078:	mov    WORD PTR [rsp+0x2],ax
    207d:	mov    DWORD PTR [rsp+0x4],0x0
    2085:	call   1bd0 <bytes_put>
    208a:	mov    esi,DWORD PTR [rsp+0x4]
    208e:	cmp    esi,ebx
    2090:	jne    20e6 <helper_stub_suspend+0xe6>
    2092:	mov    rdx,r14
    2095:	mov    rdi,rbp
    2098:	call   1aa0 <helper_transmitmsg>
    209d:	mov    rdi,r14
    20a0:	call   1b30 <helper_getreply>
    20a5:	mov    rcx,QWORD PTR [rsp+0x8]
    20aa:	xor    rcx,QWORD PTR fs:0x28
    20b3:	jne    20e1 <helper_stub_suspend+0xe1>
    20b5:	add    rsp,0x10
    20b9:	pop    rbx
    20ba:	pop    rbp
    20bb:	pop    r12
    20bd:	pop    r13
    20bf:	pop    r14
    20c1:	ret    
    20c2:	lea    rcx,[rip+0xd27]        # 2df0 <__PRETTY_FUNCTION__.10384>
    20c9:	lea    rsi,[rip+0xbf3]        # 2cc3 <__PRETTY_FUNCTION__.15989+0x13>
    20d0:	lea    rdi,[rip+0xc1e]        # 2cf5 <__PRETTY_FUNCTION__.15989+0x45>
    20d7:	mov    edx,0x80
    20dc:	call   e00 <__assert_fail@plt>
    20e1:	call   de0 <__stack_chk_fail@plt>
    20e6:	lea    rcx,[rip+0xd03]        # 2df0 <__PRETTY_FUNCTION__.10384>
    20ed:	lea    rsi,[rip+0xbcf]        # 2cc3 <__PRETTY_FUNCTION__.15989+0x13>
    20f4:	lea    rdi,[rip+0xbfe]        # 2cf9 <__PRETTY_FUNCTION__.15989+0x49>
    20fb:	mov    edx,0x84
    2100:	call   e00 <__assert_fail@plt>
    2105:	nop
    2106:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000002110 <helper_stub_postcopy>:
    2110:	push   r14
    2112:	push   r13
    2114:	mov    edx,0x4
    2119:	push   r12
    211b:	push   rbp
    211c:	mov    r14,rdi
    211f:	push   rbx
    2120:	xor    edi,edi
    2122:	mov    ecx,0x2
    2127:	sub    rsp,0x10
    212b:	lea    r13,[rsp+0x2]
    2130:	lea    r12,[rsp+0x4]
    2135:	mov    WORD PTR [rsp+0x2],dx
    213a:	mov    rax,QWORD PTR fs:0x28
    2143:	mov    QWORD PTR [rsp+0x8],rax
    2148:	xor    eax,eax
    214a:	mov    rdx,r13
    214d:	mov    rsi,r12
    2150:	mov    DWORD PTR [rsp+0x4],0x0
    2158:	call   1bd0 <bytes_put>
    215d:	mov    edi,DWORD PTR [rsp+0x4]
    2161:	mov    rsi,r14
    2164:	call   1a60 <helper_allocbuf>
    2169:	test   rax,rax
    216c:	je     21d2 <helper_stub_postcopy+0xc2>
    216e:	mov    rbp,rax
    2171:	mov    rsi,r12
    2174:	mov    eax,0x4
    2179:	mov    ecx,0x2
    217e:	mov    rdx,r13
    2181:	mov    rdi,rbp
    2184:	mov    ebx,DWORD PTR [rsp+0x4]
    2188:	mov    WORD PTR [rsp+0x2],ax
    218d:	mov    DWORD PTR [rsp+0x4],0x0
    2195:	call   1bd0 <bytes_put>
    219a:	mov    esi,DWORD PTR [rsp+0x4]
    219e:	cmp    esi,ebx
    21a0:	jne    21f6 <helper_stub_postcopy+0xe6>
    21a2:	mov    rdx,r14
    21a5:	mov    rdi,rbp
    21a8:	call   1aa0 <helper_transmitmsg>
    21ad:	mov    rdi,r14
    21b0:	call   1b30 <helper_getreply>
    21b5:	mov    rcx,QWORD PTR [rsp+0x8]
    21ba:	xor    rcx,QWORD PTR fs:0x28
    21c3:	jne    21f1 <helper_stub_postcopy+0xe1>
    21c5:	add    rsp,0x10
    21c9:	pop    rbx
    21ca:	pop    rbp
    21cb:	pop    r12
    21cd:	pop    r13
    21cf:	pop    r14
    21d1:	ret    
    21d2:	lea    rcx,[rip+0xbf7]        # 2dd0 <__PRETTY_FUNCTION__.10402>
    21d9:	lea    rsi,[rip+0xae3]        # 2cc3 <__PRETTY_FUNCTION__.15989+0x13>
    21e0:	lea    rdi,[rip+0xb0e]        # 2cf5 <__PRETTY_FUNCTION__.15989+0x45>
    21e7:	mov    edx,0xa5
    21ec:	call   e00 <__assert_fail@plt>
    21f1:	call   de0 <__stack_chk_fail@plt>
    21f6:	lea    rcx,[rip+0xbd3]        # 2dd0 <__PRETTY_FUNCTION__.10402>
    21fd:	lea    rsi,[rip+0xabf]        # 2cc3 <__PRETTY_FUNCTION__.15989+0x13>
    2204:	lea    rdi,[rip+0xaee]        # 2cf9 <__PRETTY_FUNCTION__.15989+0x49>
    220b:	mov    edx,0xa9
    2210:	call   e00 <__assert_fail@plt>
    2215:	nop
    2216:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000002220 <helper_stub_checkpoint>:
    2220:	push   r14
    2222:	push   r13
    2224:	mov    edx,0x5
    2229:	push   r12
    222b:	push   rbp
    222c:	mov    r14,rdi
    222f:	push   rbx
    2230:	xor    edi,edi
    2232:	mov    ecx,0x2
    2237:	sub    rsp,0x10
    223b:	lea    r13,[rsp+0x2]
    2240:	lea    r12,[rsp+0x4]
    2245:	mov    WORD PTR [rsp+0x2],dx
    224a:	mov    rax,QWORD PTR fs:0x28
    2253:	mov    QWORD PTR [rsp+0x8],rax
    2258:	xor    eax,eax
    225a:	mov    rdx,r13
    225d:	mov    rsi,r12
    2260:	mov    DWORD PTR [rsp+0x4],0x0
    2268:	call   1bd0 <bytes_put>
    226d:	mov    edi,DWORD PTR [rsp+0x4]
    2271:	mov    rsi,r14
    2274:	call   1a60 <helper_allocbuf>
    2279:	test   rax,rax
    227c:	je     22e2 <helper_stub_checkpoint+0xc2>
    227e:	mov    rbp,rax
    2281:	mov    rsi,r12
    2284:	mov    eax,0x5
    2289:	mov    ecx,0x2
    228e:	mov    rdx,r13
    2291:	mov    rdi,rbp
    2294:	mov    ebx,DWORD PTR [rsp+0x4]
    2298:	mov    WORD PTR [rsp+0x2],ax
    229d:	mov    DWORD PTR [rsp+0x4],0x0
    22a5:	call   1bd0 <bytes_put>
    22aa:	mov    esi,DWORD PTR [rsp+0x4]
    22ae:	cmp    esi,ebx
    22b0:	jne    2306 <helper_stub_checkpoint+0xe6>
    22b2:	mov    rdx,r14
    22b5:	mov    rdi,rbp
    22b8:	call   1aa0 <helper_transmitmsg>
    22bd:	mov    rdi,r14
    22c0:	call   1b30 <helper_getreply>
    22c5:	mov    rcx,QWORD PTR [rsp+0x8]
    22ca:	xor    rcx,QWORD PTR fs:0x28
    22d3:	jne    2301 <helper_stub_checkpoint+0xe1>
    22d5:	add    rsp,0x10
    22d9:	pop    rbx
    22da:	pop    rbp
    22db:	pop    r12
    22dd:	pop    r13
    22df:	pop    r14
    22e1:	ret    
    22e2:	lea    rcx,[rip+0xac7]        # 2db0 <__PRETTY_FUNCTION__.10412>
    22e9:	lea    rsi,[rip+0x9d3]        # 2cc3 <__PRETTY_FUNCTION__.15989+0x13>
    22f0:	lea    rdi,[rip+0x9fe]        # 2cf5 <__PRETTY_FUNCTION__.15989+0x45>
    22f7:	mov    edx,0xb8
    22fc:	call   e00 <__assert_fail@plt>
    2301:	call   de0 <__stack_chk_fail@plt>
    2306:	lea    rcx,[rip+0xaa3]        # 2db0 <__PRETTY_FUNCTION__.10412>
    230d:	lea    rsi,[rip+0x9af]        # 2cc3 <__PRETTY_FUNCTION__.15989+0x13>
    2314:	lea    rdi,[rip+0x9de]        # 2cf9 <__PRETTY_FUNCTION__.15989+0x49>
    231b:	mov    edx,0xbc
    2320:	call   e00 <__assert_fail@plt>
    2325:	nop
    2326:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000002330 <helper_stub_wait_checkpoint>:
    2330:	push   r14
    2332:	push   r13
    2334:	mov    edx,0x6
    2339:	push   r12
    233b:	push   rbp
    233c:	mov    r14,rdi
    233f:	push   rbx
    2340:	xor    edi,edi
    2342:	mov    ecx,0x2
    2347:	sub    rsp,0x10
    234b:	lea    r13,[rsp+0x2]
    2350:	lea    r12,[rsp+0x4]
    2355:	mov    WORD PTR [rsp+0x2],dx
    235a:	mov    rax,QWORD PTR fs:0x28
    2363:	mov    QWORD PTR [rsp+0x8],rax
    2368:	xor    eax,eax
    236a:	mov    rdx,r13
    236d:	mov    rsi,r12
    2370:	mov    DWORD PTR [rsp+0x4],0x0
    2378:	call   1bd0 <bytes_put>
    237d:	mov    edi,DWORD PTR [rsp+0x4]
    2381:	mov    rsi,r14
    2384:	call   1a60 <helper_allocbuf>
    2389:	test   rax,rax
    238c:	je     23f2 <helper_stub_wait_checkpoint+0xc2>
    238e:	mov    rbp,rax
    2391:	mov    rsi,r12
    2394:	mov    eax,0x6
    2399:	mov    ecx,0x2
    239e:	mov    rdx,r13
    23a1:	mov    rdi,rbp
    23a4:	mov    ebx,DWORD PTR [rsp+0x4]
    23a8:	mov    WORD PTR [rsp+0x2],ax
    23ad:	mov    DWORD PTR [rsp+0x4],0x0
    23b5:	call   1bd0 <bytes_put>
    23ba:	mov    esi,DWORD PTR [rsp+0x4]
    23be:	cmp    esi,ebx
    23c0:	jne    2416 <helper_stub_wait_checkpoint+0xe6>
    23c2:	mov    rdx,r14
    23c5:	mov    rdi,rbp
    23c8:	call   1aa0 <helper_transmitmsg>
    23cd:	mov    rdi,r14
    23d0:	call   1b30 <helper_getreply>
    23d5:	mov    rcx,QWORD PTR [rsp+0x8]
    23da:	xor    rcx,QWORD PTR fs:0x28
    23e3:	jne    2411 <helper_stub_wait_checkpoint+0xe1>
    23e5:	add    rsp,0x10
    23e9:	pop    rbx
    23ea:	pop    rbp
    23eb:	pop    r12
    23ed:	pop    r13
    23ef:	pop    r14
    23f1:	ret    
    23f2:	lea    rcx,[rip+0x997]        # 2d90 <__PRETTY_FUNCTION__.10422>
    23f9:	lea    rsi,[rip+0x8c3]        # 2cc3 <__PRETTY_FUNCTION__.15989+0x13>
    2400:	lea    rdi,[rip+0x8ee]        # 2cf5 <__PRETTY_FUNCTION__.15989+0x45>
    2407:	mov    edx,0xcb
    240c:	call   e00 <__assert_fail@plt>
    2411:	call   de0 <__stack_chk_fail@plt>
    2416:	lea    rcx,[rip+0x973]        # 2d90 <__PRETTY_FUNCTION__.10422>
    241d:	lea    rsi,[rip+0x89f]        # 2cc3 <__PRETTY_FUNCTION__.15989+0x13>
    2424:	lea    rdi,[rip+0x8ce]        # 2cf9 <__PRETTY_FUNCTION__.15989+0x49>
    242b:	mov    edx,0xcf
    2430:	call   e00 <__assert_fail@plt>
    2435:	nop
    2436:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000002440 <helper_stub_log>:
    2440:	push   r15
    2442:	push   r14
    2444:	mov    r15d,edi
    2447:	push   r13
    2449:	push   r12
    244b:	xor    edi,edi
    244d:	push   rbp
    244e:	push   rbx
    244f:	mov    rbp,r8
    2452:	mov    r13d,esi
    2455:	mov    r12,rcx
    2458:	sub    rsp,0x58
    245c:	lea    rbx,[rsp+0x3c]
    2461:	mov    QWORD PTR [rsp+0x20],r8
    2466:	lea    r8,[rsp+0x3a]
    246b:	mov    QWORD PTR [rsp+0x8],rdx
    2470:	lea    r14,[rsp+0x44]
    2475:	mov    edx,0x1
    247a:	mov    QWORD PTR [rsp+0x10],rcx
    247f:	mov    WORD PTR [rsp+0x3a],dx
    2484:	mov    ecx,0x2
    2489:	mov    rdx,r8
    248c:	mov    rsi,rbx
    248f:	mov    QWORD PTR [rsp+0x28],r8
    2494:	mov    rax,QWORD PTR fs:0x28
    249d:	mov    QWORD PTR [rsp+0x48],rax
    24a2:	xor    eax,eax
    24a4:	mov    DWORD PTR [rsp+0x3c],0x0
    24ac:	call   1bd0 <bytes_put>
    24b1:	xor    edi,edi
    24b3:	mov    ecx,0x4
    24b8:	mov    rdx,r14
    24bb:	mov    rsi,rbx
    24be:	mov    DWORD PTR [rsp+0x44],r15d
    24c3:	call   1bd0 <bytes_put>
    24c8:	lea    rax,[rsp+0x40]
    24cd:	mov    ecx,0x4
    24d2:	xor    edi,edi
    24d4:	mov    rsi,rbx
    24d7:	mov    DWORD PTR [rsp+0x40],r13d
    24dc:	mov    rdx,rax
    24df:	mov    QWORD PTR [rsp+0x18],rax
    24e4:	call   1bd0 <bytes_put>
    24e9:	mov    rdx,QWORD PTR [rsp+0x8]
    24ee:	xor    edi,edi
    24f0:	mov    rsi,rbx
    24f3:	call   1f60 <STRING_put>
    24f8:	xor    edi,edi
    24fa:	mov    rdx,r12
    24fd:	mov    rsi,rbx
    2500:	call   1f60 <STRING_put>
    2505:	mov    edi,DWORD PTR [rsp+0x3c]
    2509:	mov    rsi,rbp
    250c:	call   1a60 <helper_allocbuf>
    2511:	test   rax,rax
    2514:	mov    r8,QWORD PTR [rsp+0x28]
    2519:	je     25d3 <helper_stub_log+0x193>
    251f:	mov    rbp,rax
    2522:	mov    rdx,r8
    2525:	mov    eax,0x1
    252a:	mov    ecx,0x2
    252f:	mov    rsi,rbx
    2532:	mov    rdi,rbp
    2535:	mov    WORD PTR [rsp+0x3a],ax
    253a:	mov    r12d,DWORD PTR [rsp+0x3c]
    253f:	mov    DWORD PTR [rsp+0x3c],0x0
    2547:	call   1bd0 <bytes_put>
    254c:	mov    ecx,0x4
    2551:	mov    rdx,r14
    2554:	mov    rsi,rbx
    2557:	mov    rdi,rbp
    255a:	mov    DWORD PTR [rsp+0x44],r15d
    255f:	call   1bd0 <bytes_put>
    2564:	mov    rdx,QWORD PTR [rsp+0x18]
    2569:	mov    ecx,0x4
    256e:	mov    rsi,rbx
    2571:	mov    rdi,rbp
    2574:	mov    DWORD PTR [rsp+0x40],r13d
    2579:	call   1bd0 <bytes_put>
    257e:	mov    rdx,QWORD PTR [rsp+0x8]
    2583:	mov    rsi,rbx
    2586:	mov    rdi,rbp
    2589:	call   1f60 <STRING_put>
    258e:	mov    rdx,QWORD PTR [rsp+0x10]
    2593:	mov    rsi,rbx
    2596:	mov    rdi,rbp
    2599:	call   1f60 <STRING_put>
    259e:	mov    esi,DWORD PTR [rsp+0x3c]
    25a2:	cmp    esi,r12d
    25a5:	jne    25f7 <helper_stub_log+0x1b7>
    25a7:	mov    rdx,QWORD PTR [rsp+0x20]
    25ac:	mov    rdi,rbp
    25af:	call   1aa0 <helper_transmitmsg>
    25b4:	mov    rax,QWORD PTR [rsp+0x48]
    25b9:	xor    rax,QWORD PTR fs:0x28
    25c2:	jne    25f2 <helper_stub_log+0x1b2>
    25c4:	add    rsp,0x58
    25c8:	pop    rbx
    25c9:	pop    rbp
    25ca:	pop    r12
    25cc:	pop    r13
    25ce:	pop    r14
    25d0:	pop    r15
    25d2:	ret    
    25d3:	lea    rcx,[rip+0x876]        # 2e50 <__PRETTY_FUNCTION__.10362>
    25da:	lea    rsi,[rip+0x6e2]        # 2cc3 <__PRETTY_FUNCTION__.15989+0x13>
    25e1:	lea    rdi,[rip+0x70d]        # 2cf5 <__PRETTY_FUNCTION__.15989+0x45>
    25e8:	mov    edx,0x5a
    25ed:	call   e00 <__assert_fail@plt>
    25f2:	call   de0 <__stack_chk_fail@plt>
    25f7:	lea    rcx,[rip+0x852]        # 2e50 <__PRETTY_FUNCTION__.10362>
    25fe:	lea    rsi,[rip+0x6be]        # 2cc3 <__PRETTY_FUNCTION__.15989+0x13>
    2605:	lea    rdi,[rip+0x6ed]        # 2cf9 <__PRETTY_FUNCTION__.15989+0x49>
    260c:	mov    edx,0x5e
    2611:	call   e00 <__assert_fail@plt>
    2616:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000002620 <helper_stub_progress>:
    2620:	push   r15
    2622:	push   r14
    2624:	mov    r14,rdx
    2627:	push   r13
    2629:	push   r12
    262b:	mov    edx,0x2
    2630:	push   rbp
    2631:	push   rbx
    2632:	mov    rbp,r8
    2635:	mov    r15,rdi
    2638:	mov    r12,rsi
    263b:	xor    edi,edi
    263d:	sub    rsp,0x58
    2641:	mov    r13,rcx
    2644:	mov    ecx,0x2
    2649:	lea    rbx,[rsp+0x34]
    264e:	mov    QWORD PTR [rsp+0x20],r8
    2653:	lea    r8,[rsp+0x32]
    2658:	mov    QWORD PTR [rsp+0x8],rsi
    265d:	mov    WORD PTR [rsp+0x32],dx
    2662:	mov    rsi,rbx
    2665:	mov    rdx,r8
    2668:	mov    QWORD PTR [rsp+0x28],r8
    266d:	mov    rax,QWORD PTR fs:0x28
    2676:	mov    QWORD PTR [rsp+0x48],rax
    267b:	xor    eax,eax
    267d:	mov    DWORD PTR [rsp+0x34],0x0
    2685:	call   1bd0 <bytes_put>
    268a:	xor    edi,edi
    268c:	mov    rdx,r15
    268f:	mov    rsi,rbx
    2692:	call   1f60 <STRING_put>
    2697:	xor    edi,edi
    2699:	mov    rdx,r12
    269c:	mov    rsi,rbx
    269f:	call   1f60 <STRING_put>
    26a4:	lea    rax,[rsp+0x40]
    26a9:	xor    edi,edi
    26ab:	mov    ecx,0x8
    26b0:	mov    rsi,rbx
    26b3:	mov    QWORD PTR [rsp+0x40],r14
    26b8:	mov    rdx,rax
    26bb:	mov    QWORD PTR [rsp+0x10],rax
    26c0:	call   1bd0 <bytes_put>
    26c5:	lea    rax,[rsp+0x38]
    26ca:	xor    edi,edi
    26cc:	mov    ecx,0x8
    26d1:	mov    rsi,rbx
    26d4:	mov    QWORD PTR [rsp+0x38],r13
    26d9:	mov    rdx,rax
    26dc:	mov    QWORD PTR [rsp+0x18],rax
    26e1:	call   1bd0 <bytes_put>
    26e6:	mov    edi,DWORD PTR [rsp+0x34]
    26ea:	mov    rsi,rbp
    26ed:	call   1a60 <helper_allocbuf>
    26f2:	test   rax,rax
    26f5:	mov    r8,QWORD PTR [rsp+0x28]
    26fa:	je     27b4 <helper_stub_progress+0x194>
    2700:	mov    rbp,rax
    2703:	mov    rdx,r8
    2706:	mov    eax,0x2
    270b:	mov    ecx,0x2
    2710:	mov    rsi,rbx
    2713:	mov    rdi,rbp
    2716:	mov    WORD PTR [rsp+0x32],ax
    271b:	mov    r12d,DWORD PTR [rsp+0x34]
    2720:	mov    DWORD PTR [rsp+0x34],0x0
    2728:	call   1bd0 <bytes_put>
    272d:	mov    rdx,r15
    2730:	mov    rsi,rbx
    2733:	mov    rdi,rbp
    2736:	call   1f60 <STRING_put>
    273b:	mov    rdx,QWORD PTR [rsp+0x8]
    2740:	mov    rsi,rbx
    2743:	mov    rdi,rbp
    2746:	call   1f60 <STRING_put>
    274b:	mov    rdx,QWORD PTR [rsp+0x10]
    2750:	mov    ecx,0x8
    2755:	mov    rsi,rbx
    2758:	mov    rdi,rbp
    275b:	mov    QWORD PTR [rsp+0x40],r14
    2760:	call   1bd0 <bytes_put>
    2765:	mov    rdx,QWORD PTR [rsp+0x18]
    276a:	mov    rsi,rbx
    276d:	mov    ecx,0x8
    2772:	mov    rdi,rbp
    2775:	mov    QWORD PTR [rsp+0x38],r13
    277a:	call   1bd0 <bytes_put>
    277f:	mov    esi,DWORD PTR [rsp+0x34]
    2783:	cmp    esi,r12d
    2786:	jne    27d8 <helper_stub_progress+0x1b8>
    2788:	mov    rdx,QWORD PTR [rsp+0x20]
    278d:	mov    rdi,rbp
    2790:	call   1aa0 <helper_transmitmsg>
    2795:	mov    rax,QWORD PTR [rsp+0x48]
    279a:	xor    rax,QWORD PTR fs:0x28
    27a3:	jne    27d3 <helper_stub_progress+0x1b3>
    27a5:	add    rsp,0x58
    27a9:	pop    rbx
    27aa:	pop    rbp
    27ab:	pop    r12
    27ad:	pop    r13
    27af:	pop    r14
    27b1:	pop    r15
    27b3:	ret    
    27b4:	lea    rcx,[rip+0x655]        # 2e10 <__PRETTY_FUNCTION__.10375>
    27bb:	lea    rsi,[rip+0x501]        # 2cc3 <__PRETTY_FUNCTION__.15989+0x13>
    27c2:	lea    rdi,[rip+0x52c]        # 2cf5 <__PRETTY_FUNCTION__.15989+0x45>
    27c9:	mov    edx,0x6f
    27ce:	call   e00 <__assert_fail@plt>
    27d3:	call   de0 <__stack_chk_fail@plt>
    27d8:	lea    rcx,[rip+0x631]        # 2e10 <__PRETTY_FUNCTION__.10375>
    27df:	lea    rsi,[rip+0x4dd]        # 2cc3 <__PRETTY_FUNCTION__.15989+0x13>
    27e6:	lea    rdi,[rip+0x50c]        # 2cf9 <__PRETTY_FUNCTION__.15989+0x49>
    27ed:	mov    edx,0x73
    27f2:	call   e00 <__assert_fail@plt>
    27f7:	nop    WORD PTR [rax+rax*1+0x0]

0000000000002800 <helper_setcallbacks_save>:
    2800:	xor    eax,eax
    2802:	test   sil,0x8
    2806:	je     280f <helper_setcallbacks_save+0xf>
    2808:	lea    rax,[rip+0xfffffffffffff7f1]        # 2000 <helper_stub_suspend>
    280f:	mov    QWORD PTR [rdi],rax
    2812:	xor    eax,eax
    2814:	test   sil,0x10
    2818:	je     2821 <helper_setcallbacks_save+0x21>
    281a:	lea    rax,[rip+0xfffffffffffff8ef]        # 2110 <helper_stub_postcopy>
    2821:	mov    QWORD PTR [rdi+0x10],rax
    2825:	xor    eax,eax
    2827:	test   sil,0x20
    282b:	je     2834 <helper_setcallbacks_save+0x34>
    282d:	lea    rax,[rip+0xfffffffffffff9ec]        # 2220 <helper_stub_checkpoint>
    2834:	mov    QWORD PTR [rdi+0x18],rax
    2838:	xor    eax,eax
    283a:	test   sil,0x40
    283e:	je     2847 <helper_setcallbacks_save+0x47>
    2840:	lea    rax,[rip+0xfffffffffffffae9]        # 2330 <helper_stub_wait_checkpoint>
    2847:	and    esi,0x80
    284d:	mov    QWORD PTR [rdi+0x20],rax
    2851:	jne    2860 <helper_setcallbacks_save+0x60>
    2853:	xor    eax,eax
    2855:	mov    QWORD PTR [rdi+0x28],rax
    2859:	ret    
    285a:	nop    WORD PTR [rax+rax*1+0x0]
    2860:	lea    rax,[rip+0xfffffffffffff559]        # 1dc0 <helper_stub_switch_qemu_logdirty>
    2867:	mov    QWORD PTR [rdi+0x28],rax
    286b:	ret    
    286c:	nop    DWORD PTR [rax+0x0]

0000000000002870 <helper_setcallbacks_restore>:
    2870:	xor    eax,eax
    2872:	test   sil,0x8
    2876:	je     287f <helper_setcallbacks_restore+0xf>
    2878:	lea    rax,[rip+0xfffffffffffff781]        # 2000 <helper_stub_suspend>
    287f:	mov    QWORD PTR [rdi],rax
    2882:	xor    eax,eax
    2884:	test   sil,0x10
    2888:	je     2891 <helper_setcallbacks_restore+0x21>
    288a:	lea    rax,[rip+0xfffffffffffff87f]        # 2110 <helper_stub_postcopy>
    2891:	mov    QWORD PTR [rdi+0x8],rax
    2895:	xor    eax,eax
    2897:	test   sil,0x20
    289b:	je     28a4 <helper_setcallbacks_restore+0x34>
    289d:	lea    rax,[rip+0xfffffffffffff97c]        # 2220 <helper_stub_checkpoint>
    28a4:	mov    QWORD PTR [rdi+0x10],rax
    28a8:	xor    eax,eax
    28aa:	test   sil,0x40
    28ae:	je     28b7 <helper_setcallbacks_restore+0x47>
    28b0:	lea    rax,[rip+0xfffffffffffffa79]        # 2330 <helper_stub_wait_checkpoint>
    28b7:	and    esi,0x100
    28bd:	mov    QWORD PTR [rdi+0x18],rax
    28c1:	jne    28d0 <helper_setcallbacks_restore+0x60>
    28c3:	xor    eax,eax
    28c5:	mov    QWORD PTR [rdi+0x20],rax
    28c9:	ret    
    28ca:	nop    WORD PTR [rax+rax*1+0x0]
    28d0:	lea    rax,[rip+0xfffffffffffff359]        # 1c30 <helper_stub_restore_results>
    28d7:	mov    QWORD PTR [rdi+0x20],rax
    28db:	ret    
    28dc:	nop    DWORD PTR [rax+0x0]

00000000000028e0 <helper_stub_complete>:
    28e0:	push   r15
    28e2:	push   r14
    28e4:	mov    r15d,edi
    28e7:	push   r13
    28e9:	push   r12
    28eb:	xor    edi,edi
    28ed:	push   rbp
    28ee:	push   rbx
    28ef:	mov    rbp,rdx
    28f2:	mov    r13d,esi
    28f5:	mov    ecx,0x2
    28fa:	sub    rsp,0x48
    28fe:	lea    r8,[rsp+0x2a]
    2903:	lea    rbx,[rsp+0x2c]
    2908:	mov    QWORD PTR [rsp+0x10],rdx
    290d:	lea    r14,[rsp+0x34]
    2912:	mov    edx,0x9
    2917:	mov    DWORD PTR [rsp+0x2c],0x0
    291f:	mov    WORD PTR [rsp+0x2a],dx
    2924:	mov    rsi,rbx
    2927:	mov    rdx,r8
    292a:	mov    QWORD PTR [rsp+0x18],r8
    292f:	mov    rax,QWORD PTR fs:0x28
    2938:	mov    QWORD PTR [rsp+0x38],rax
    293d:	xor    eax,eax
    293f:	call   1bd0 <bytes_put>
    2944:	xor    edi,edi
    2946:	mov    ecx,0x4
    294b:	mov    rdx,r14
    294e:	mov    rsi,rbx
    2951:	mov    DWORD PTR [rsp+0x34],r15d
    2956:	call   1bd0 <bytes_put>
    295b:	lea    rax,[rsp+0x30]
    2960:	xor    edi,edi
    2962:	mov    ecx,0x4
    2967:	mov    rsi,rbx
    296a:	mov    DWORD PTR [rsp+0x30],r13d
    296f:	mov    rdx,rax
    2972:	mov    QWORD PTR [rsp+0x8],rax
    2977:	call   1bd0 <bytes_put>
    297c:	mov    edi,DWORD PTR [rsp+0x2c]
    2980:	mov    rsi,rbp
    2983:	call   1a60 <helper_allocbuf>
    2988:	test   rax,rax
    298b:	mov    r8,QWORD PTR [rsp+0x18]
    2990:	je     2a35 <helper_stub_complete+0x155>
    2996:	mov    rbp,rax
    2999:	mov    rdx,r8
    299c:	mov    eax,0x9
    29a1:	mov    ecx,0x2
    29a6:	mov    rsi,rbx
    29a9:	mov    rdi,rbp
    29ac:	mov    r12d,DWORD PTR [rsp+0x2c]
    29b1:	mov    WORD PTR [rsp+0x2a],ax
    29b6:	mov    DWORD PTR [rsp+0x2c],0x0
    29be:	call   1bd0 <bytes_put>
    29c3:	mov    ecx,0x4
    29c8:	mov    rdx,r14
    29cb:	mov    rsi,rbx
    29ce:	mov    rdi,rbp
    29d1:	mov    DWORD PTR [rsp+0x34],r15d
    29d6:	call   1bd0 <bytes_put>
    29db:	mov    rdx,QWORD PTR [rsp+0x8]
    29e0:	mov    rsi,rbx
    29e3:	mov    ecx,0x4
    29e8:	mov    rdi,rbp
    29eb:	mov    DWORD PTR [rsp+0x30],r13d
    29f0:	call   1bd0 <bytes_put>
    29f5:	mov    esi,DWORD PTR [rsp+0x2c]
    29f9:	cmp    esi,r12d
    29fc:	jne    2a59 <helper_stub_complete+0x179>
    29fe:	mov    rbx,QWORD PTR [rsp+0x10]
    2a03:	mov    rdi,rbp
    2a06:	mov    rdx,rbx
    2a09:	call   1aa0 <helper_transmitmsg>
    2a0e:	mov    rdi,rbx
    2a11:	call   1b30 <helper_getreply>
    2a16:	mov    rcx,QWORD PTR [rsp+0x38]
    2a1b:	xor    rcx,QWORD PTR fs:0x28
    2a24:	jne    2a54 <helper_stub_complete+0x174>
    2a26:	add    rsp,0x48
    2a2a:	pop    rbx
    2a2b:	pop    rbp
    2a2c:	pop    r12
    2a2e:	pop    r13
    2a30:	pop    r14
    2a32:	pop    r15
    2a34:	ret    
    2a35:	lea    rcx,[rip+0x2e4]        # 2d20 <__PRETTY_FUNCTION__.10457>
    2a3c:	lea    rsi,[rip+0x280]        # 2cc3 <__PRETTY_FUNCTION__.15989+0x13>
    2a43:	lea    rdi,[rip+0x2ab]        # 2cf5 <__PRETTY_FUNCTION__.15989+0x45>
    2a4a:	mov    edx,0x108
    2a4f:	call   e00 <__assert_fail@plt>
    2a54:	call   de0 <__stack_chk_fail@plt>
    2a59:	lea    rcx,[rip+0x2c0]        # 2d20 <__PRETTY_FUNCTION__.10457>
    2a60:	lea    rsi,[rip+0x25c]        # 2cc3 <__PRETTY_FUNCTION__.15989+0x13>
    2a67:	lea    rdi,[rip+0x28b]        # 2cf9 <__PRETTY_FUNCTION__.15989+0x49>
    2a6e:	mov    edx,0x10c
    2a73:	call   e00 <__assert_fail@plt>
    2a78:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000002a80 <__libc_csu_init>:
    2a80:	push   r15
    2a82:	push   r14
    2a84:	mov    r15,rdx
    2a87:	push   r13
    2a89:	push   r12
    2a8b:	lea    r12,[rip+0x20120e]        # 203ca0 <__frame_dummy_init_array_entry>
    2a92:	push   rbp
    2a93:	lea    rbp,[rip+0x20120e]        # 203ca8 <__init_array_end>
    2a9a:	push   rbx
    2a9b:	mov    r13d,edi
    2a9e:	mov    r14,rsi
    2aa1:	sub    rbp,r12
    2aa4:	sub    rsp,0x8
    2aa8:	sar    rbp,0x3
    2aac:	call   d28 <_init>
    2ab1:	test   rbp,rbp
    2ab4:	je     2ad6 <__libc_csu_init+0x56>
    2ab6:	xor    ebx,ebx
    2ab8:	nop    DWORD PTR [rax+rax*1+0x0]
    2ac0:	mov    rdx,r15
    2ac3:	mov    rsi,r14
    2ac6:	mov    edi,r13d
    2ac9:	call   QWORD PTR [r12+rbx*8]
    2acd:	add    rbx,0x1
    2ad1:	cmp    rbp,rbx
    2ad4:	jne    2ac0 <__libc_csu_init+0x40>
    2ad6:	add    rsp,0x8
    2ada:	pop    rbx
    2adb:	pop    rbp
    2adc:	pop    r12
    2ade:	pop    r13
    2ae0:	pop    r14
    2ae2:	pop    r15
    2ae4:	ret    
    2ae5:	nop
    2ae6:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000002af0 <__libc_csu_fini>:
    2af0:	repz ret 

Disassembly of section .fini:

0000000000002af4 <_fini>:
    2af4:	sub    rsp,0x8
    2af8:	add    rsp,0x8
    2afc:	ret    
