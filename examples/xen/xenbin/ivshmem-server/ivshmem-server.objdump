
ivshmem-server:     file format elf64-x86-64


Disassembly of section .init:

0000000000007848 <_init@@Base>:
    7848:	sub    rsp,0x8
    784c:	mov    rax,QWORD PTR [rip+0x236765]        # 23dfb8 <__gmon_start__>
    7853:	test   rax,rax
    7856:	je     785a <_init@@Base+0x12>
    7858:	call   rax
    785a:	add    rsp,0x8
    785e:	ret    

Disassembly of section .plt:

0000000000007860 <daemon@plt-0x10>:
    7860:	push   QWORD PTR [rip+0x23619a]        # 23da00 <g_test_config_vars+0x2e0>
    7866:	jmp    QWORD PTR [rip+0x23619c]        # 23da08 <g_test_config_vars+0x2e8>
    786c:	nop    DWORD PTR [rax+0x0]

0000000000007870 <daemon@plt>:
    7870:	jmp    QWORD PTR [rip+0x23619a]        # 23da10 <daemon@GLIBC_2.2.5>
    7876:	push   0x0
    787b:	jmp    7860 <_init@@Base+0x18>

0000000000007880 <g_free@plt>:
    7880:	jmp    QWORD PTR [rip+0x236192]        # 23da18 <g_free>
    7886:	push   0x1
    788b:	jmp    7860 <_init@@Base+0x18>

0000000000007890 <tcsetattr@plt>:
    7890:	jmp    QWORD PTR [rip+0x23618a]        # 23da20 <tcsetattr@GLIBC_2.2.5>
    7896:	push   0x2
    789b:	jmp    7860 <_init@@Base+0x18>

00000000000078a0 <mprotect@plt>:
    78a0:	jmp    QWORD PTR [rip+0x236182]        # 23da28 <mprotect@GLIBC_2.2.5>
    78a6:	push   0x3
    78ab:	jmp    7860 <_init@@Base+0x18>

00000000000078b0 <pipe2@plt>:
    78b0:	jmp    QWORD PTR [rip+0x23617a]        # 23da30 <pipe2@GLIBC_2.9>
    78b6:	push   0x4
    78bb:	jmp    7860 <_init@@Base+0x18>

00000000000078c0 <sem_wait@plt>:
    78c0:	jmp    QWORD PTR [rip+0x236172]        # 23da38 <sem_wait@GLIBC_2.2.5>
    78c6:	push   0x5
    78cb:	jmp    7860 <_init@@Base+0x18>

00000000000078d0 <fileno@plt>:
    78d0:	jmp    QWORD PTR [rip+0x23616a]        # 23da40 <fileno@GLIBC_2.2.5>
    78d6:	push   0x6
    78db:	jmp    7860 <_init@@Base+0x18>

00000000000078e0 <pthread_getspecific@plt>:
    78e0:	jmp    QWORD PTR [rip+0x236162]        # 23da48 <pthread_getspecific@GLIBC_2.2.5>
    78e6:	push   0x7
    78eb:	jmp    7860 <_init@@Base+0x18>

00000000000078f0 <dup2@plt>:
    78f0:	jmp    QWORD PTR [rip+0x23615a]        # 23da50 <dup2@GLIBC_2.2.5>
    78f6:	push   0x8
    78fb:	jmp    7860 <_init@@Base+0x18>

0000000000007900 <pthread_cond_destroy@plt>:
    7900:	jmp    QWORD PTR [rip+0x236152]        # 23da58 <pthread_cond_destroy@GLIBC_2.3.2>
    7906:	push   0x9
    790b:	jmp    7860 <_init@@Base+0x18>

0000000000007910 <g_path_get_dirname@plt>:
    7910:	jmp    QWORD PTR [rip+0x23614a]        # 23da60 <g_path_get_dirname>
    7916:	push   0xa
    791b:	jmp    7860 <_init@@Base+0x18>

0000000000007920 <frexp@plt>:
    7920:	jmp    QWORD PTR [rip+0x236142]        # 23da68 <frexp@GLIBC_2.2.5>
    7926:	push   0xb
    792b:	jmp    7860 <_init@@Base+0x18>

0000000000007930 <fstatfs64@plt>:
    7930:	jmp    QWORD PTR [rip+0x23613a]        # 23da70 <fstatfs64@GLIBC_2.2.5>
    7936:	push   0xc
    793b:	jmp    7860 <_init@@Base+0x18>

0000000000007940 <memset@plt>:
    7940:	jmp    QWORD PTR [rip+0x236132]        # 23da78 <memset@GLIBC_2.2.5>
    7946:	push   0xd
    794b:	jmp    7860 <_init@@Base+0x18>

0000000000007950 <g_queue_push_tail@plt>:
    7950:	jmp    QWORD PTR [rip+0x23612a]        # 23da80 <g_queue_push_tail>
    7956:	push   0xe
    795b:	jmp    7860 <_init@@Base+0x18>

0000000000007960 <snprintf@plt>:
    7960:	jmp    QWORD PTR [rip+0x236122]        # 23da88 <snprintf@GLIBC_2.2.5>
    7966:	push   0xf
    796b:	jmp    7860 <_init@@Base+0x18>

0000000000007970 <g_string_prepend@plt>:
    7970:	jmp    QWORD PTR [rip+0x23611a]        # 23da90 <g_string_prepend>
    7976:	push   0x10
    797b:	jmp    7860 <_init@@Base+0x18>

0000000000007980 <mmap64@plt>:
    7980:	jmp    QWORD PTR [rip+0x236112]        # 23da98 <mmap64@GLIBC_2.2.5>
    7986:	push   0x11
    798b:	jmp    7860 <_init@@Base+0x18>

0000000000007990 <posix_memalign@plt>:
    7990:	jmp    QWORD PTR [rip+0x23610a]        # 23daa0 <posix_memalign@GLIBC_2.2.5>
    7996:	push   0x12
    799b:	jmp    7860 <_init@@Base+0x18>

00000000000079a0 <close@plt>:
    79a0:	jmp    QWORD PTR [rip+0x236102]        # 23daa8 <close@GLIBC_2.2.5>
    79a6:	push   0x13
    79ab:	jmp    7860 <_init@@Base+0x18>

00000000000079b0 <__longjmp_chk@plt>:
    79b0:	jmp    QWORD PTR [rip+0x2360fa]        # 23dab0 <__longjmp_chk@GLIBC_2.11>
    79b6:	push   0x14
    79bb:	jmp    7860 <_init@@Base+0x18>

00000000000079c0 <abort@plt>:
    79c0:	jmp    QWORD PTR [rip+0x2360f2]        # 23dab8 <abort@GLIBC_2.2.5>
    79c6:	push   0x15
    79cb:	jmp    7860 <_init@@Base+0x18>

00000000000079d0 <pthread_setspecific@plt>:
    79d0:	jmp    QWORD PTR [rip+0x2360ea]        # 23dac0 <pthread_setspecific@GLIBC_2.2.5>
    79d6:	push   0x16
    79db:	jmp    7860 <_init@@Base+0x18>

00000000000079e0 <__fprintf_chk@plt>:
    79e0:	jmp    QWORD PTR [rip+0x2360e2]        # 23dac8 <__fprintf_chk@GLIBC_2.3.4>
    79e6:	push   0x17
    79eb:	jmp    7860 <_init@@Base+0x18>

00000000000079f0 <sem_destroy@plt>:
    79f0:	jmp    QWORD PTR [rip+0x2360da]        # 23dad0 <sem_destroy@GLIBC_2.2.5>
    79f6:	push   0x18
    79fb:	jmp    7860 <_init@@Base+0x18>

0000000000007a00 <puts@plt>:
    7a00:	jmp    QWORD PTR [rip+0x2360d2]        # 23dad8 <puts@GLIBC_2.2.5>
    7a06:	push   0x19
    7a0b:	jmp    7860 <_init@@Base+0x18>

0000000000007a10 <g_test_message@plt>:
    7a10:	jmp    QWORD PTR [rip+0x2360ca]        # 23dae0 <g_test_message>
    7a16:	push   0x1a
    7a1b:	jmp    7860 <_init@@Base+0x18>

0000000000007a20 <pthread_cond_signal@plt>:
    7a20:	jmp    QWORD PTR [rip+0x2360c2]        # 23dae8 <pthread_cond_signal@GLIBC_2.3.2>
    7a26:	push   0x1b
    7a2b:	jmp    7860 <_init@@Base+0x18>

0000000000007a30 <select@plt>:
    7a30:	jmp    QWORD PTR [rip+0x2360ba]        # 23daf0 <select@GLIBC_2.2.5>
    7a36:	push   0x1c
    7a3b:	jmp    7860 <_init@@Base+0x18>

0000000000007a40 <exit@plt>:
    7a40:	jmp    QWORD PTR [rip+0x2360b2]        # 23daf8 <exit@GLIBC_2.2.5>
    7a46:	push   0x1d
    7a4b:	jmp    7860 <_init@@Base+0x18>

0000000000007a50 <g_strdup@plt>:
    7a50:	jmp    QWORD PTR [rip+0x2360aa]        # 23db00 <g_strdup>
    7a56:	push   0x1e
    7a5b:	jmp    7860 <_init@@Base+0x18>

0000000000007a60 <pthread_mutexattr_destroy@plt>:
    7a60:	jmp    QWORD PTR [rip+0x2360a2]        # 23db08 <pthread_mutexattr_destroy@GLIBC_2.2.5>
    7a66:	push   0x1f
    7a6b:	jmp    7860 <_init@@Base+0x18>

0000000000007a70 <__assert_fail@plt>:
    7a70:	jmp    QWORD PTR [rip+0x23609a]        # 23db10 <__assert_fail@GLIBC_2.2.5>
    7a76:	push   0x20
    7a7b:	jmp    7860 <_init@@Base+0x18>

0000000000007a80 <__printf_chk@plt>:
    7a80:	jmp    QWORD PTR [rip+0x236092]        # 23db18 <__printf_chk@GLIBC_2.3.4>
    7a86:	push   0x21
    7a8b:	jmp    7860 <_init@@Base+0x18>

0000000000007a90 <gettimeofday@plt>:
    7a90:	jmp    QWORD PTR [rip+0x23608a]        # 23db20 <gettimeofday@GLIBC_2.2.5>
    7a96:	push   0x22
    7a9b:	jmp    7860 <_init@@Base+0x18>

0000000000007aa0 <setvbuf@plt>:
    7aa0:	jmp    QWORD PTR [rip+0x236082]        # 23db28 <setvbuf@GLIBC_2.2.5>
    7aa6:	push   0x23
    7aab:	jmp    7860 <_init@@Base+0x18>

0000000000007ab0 <getopt@plt>:
    7ab0:	jmp    QWORD PTR [rip+0x23607a]        # 23db30 <getopt@GLIBC_2.2.5>
    7ab6:	push   0x24
    7abb:	jmp    7860 <_init@@Base+0x18>

0000000000007ac0 <g_hash_table_insert@plt>:
    7ac0:	jmp    QWORD PTR [rip+0x236072]        # 23db38 <g_hash_table_insert>
    7ac6:	push   0x25
    7acb:	jmp    7860 <_init@@Base+0x18>

0000000000007ad0 <sem_trywait@plt>:
    7ad0:	jmp    QWORD PTR [rip+0x23606a]        # 23db40 <sem_trywait@GLIBC_2.2.5>
    7ad6:	push   0x26
    7adb:	jmp    7860 <_init@@Base+0x18>

0000000000007ae0 <g_realloc_n@plt>:
    7ae0:	jmp    QWORD PTR [rip+0x236062]        # 23db48 <g_realloc_n>
    7ae6:	push   0x27
    7aeb:	jmp    7860 <_init@@Base+0x18>

0000000000007af0 <read@plt>:
    7af0:	jmp    QWORD PTR [rip+0x23605a]        # 23db50 <read@GLIBC_2.2.5>
    7af6:	push   0x28
    7afb:	jmp    7860 <_init@@Base+0x18>

0000000000007b00 <sigfillset@plt>:
    7b00:	jmp    QWORD PTR [rip+0x236052]        # 23db58 <sigfillset@GLIBC_2.2.5>
    7b06:	push   0x29
    7b0b:	jmp    7860 <_init@@Base+0x18>

0000000000007b10 <pthread_setname_np@plt>:
    7b10:	jmp    QWORD PTR [rip+0x23604a]        # 23db60 <pthread_setname_np@GLIBC_2.12>
    7b16:	push   0x2a
    7b1b:	jmp    7860 <_init@@Base+0x18>

0000000000007b20 <unlink@plt>:
    7b20:	jmp    QWORD PTR [rip+0x236042]        # 23db68 <unlink@GLIBC_2.2.5>
    7b26:	push   0x2b
    7b2b:	jmp    7860 <_init@@Base+0x18>

0000000000007b30 <g_array_unref@plt>:
    7b30:	jmp    QWORD PTR [rip+0x23603a]        # 23db70 <g_array_unref>
    7b36:	push   0x2c
    7b3b:	jmp    7860 <_init@@Base+0x18>

0000000000007b40 <_exit@plt>:
    7b40:	jmp    QWORD PTR [rip+0x236032]        # 23db78 <_exit@GLIBC_2.2.5>
    7b46:	push   0x2d
    7b4b:	jmp    7860 <_init@@Base+0x18>

0000000000007b50 <g_malloc@plt>:
    7b50:	jmp    QWORD PTR [rip+0x23602a]        # 23db80 <g_malloc>
    7b56:	push   0x2e
    7b5b:	jmp    7860 <_init@@Base+0x18>

0000000000007b60 <__memcpy_chk@plt>:
    7b60:	jmp    QWORD PTR [rip+0x236022]        # 23db88 <__memcpy_chk@GLIBC_2.3.4>
    7b66:	push   0x2f
    7b6b:	jmp    7860 <_init@@Base+0x18>

0000000000007b70 <shm_open@plt>:
    7b70:	jmp    QWORD PTR [rip+0x23601a]        # 23db90 <shm_open@GLIBC_2.2.5>
    7b76:	push   0x30
    7b7b:	jmp    7860 <_init@@Base+0x18>

0000000000007b80 <g_string_new@plt>:
    7b80:	jmp    QWORD PTR [rip+0x236012]        # 23db98 <g_string_new>
    7b86:	push   0x31
    7b8b:	jmp    7860 <_init@@Base+0x18>

0000000000007b90 <setsockopt@plt>:
    7b90:	jmp    QWORD PTR [rip+0x23600a]        # 23dba0 <setsockopt@GLIBC_2.2.5>
    7b96:	push   0x32
    7b9b:	jmp    7860 <_init@@Base+0x18>

0000000000007ba0 <g_hash_table_remove@plt>:
    7ba0:	jmp    QWORD PTR [rip+0x236002]        # 23dba8 <g_hash_table_remove>
    7ba6:	push   0x33
    7bab:	jmp    7860 <_init@@Base+0x18>

0000000000007bb0 <eventfd@plt>:
    7bb0:	jmp    QWORD PTR [rip+0x235ffa]        # 23dbb0 <eventfd@GLIBC_2.7>
    7bb6:	push   0x34
    7bbb:	jmp    7860 <_init@@Base+0x18>

0000000000007bc0 <sysconf@plt>:
    7bc0:	jmp    QWORD PTR [rip+0x235ff2]        # 23dbb8 <sysconf@GLIBC_2.2.5>
    7bc6:	push   0x35
    7bcb:	jmp    7860 <_init@@Base+0x18>

0000000000007bd0 <g_queue_free@plt>:
    7bd0:	jmp    QWORD PTR [rip+0x235fea]        # 23dbc0 <g_queue_free>
    7bd6:	push   0x36
    7bdb:	jmp    7860 <_init@@Base+0x18>

0000000000007be0 <strchrnul@plt>:
    7be0:	jmp    QWORD PTR [rip+0x235fe2]        # 23dbc8 <strchrnul@GLIBC_2.2.5>
    7be6:	push   0x37
    7beb:	jmp    7860 <_init@@Base+0x18>

0000000000007bf0 <getpid@plt>:
    7bf0:	jmp    QWORD PTR [rip+0x235fda]        # 23dbd0 <getpid@GLIBC_2.2.5>
    7bf6:	push   0x38
    7bfb:	jmp    7860 <_init@@Base+0x18>

0000000000007c00 <pthread_mutex_init@plt>:
    7c00:	jmp    QWORD PTR [rip+0x235fd2]        # 23dbd8 <pthread_mutex_init@GLIBC_2.2.5>
    7c06:	push   0x39
    7c0b:	jmp    7860 <_init@@Base+0x18>

0000000000007c10 <fgets@plt>:
    7c10:	jmp    QWORD PTR [rip+0x235fca]        # 23dbe0 <fgets@GLIBC_2.2.5>
    7c16:	push   0x3a
    7c1b:	jmp    7860 <_init@@Base+0x18>

0000000000007c20 <__vsnprintf_chk@plt>:
    7c20:	jmp    QWORD PTR [rip+0x235fc2]        # 23dbe8 <__vsnprintf_chk@GLIBC_2.3.4>
    7c26:	push   0x3b
    7c2b:	jmp    7860 <_init@@Base+0x18>

0000000000007c30 <g_string_sized_new@plt>:
    7c30:	jmp    QWORD PTR [rip+0x235fba]        # 23dbf0 <g_string_sized_new>
    7c36:	push   0x3c
    7c3b:	jmp    7860 <_init@@Base+0x18>

0000000000007c40 <g_strndup@plt>:
    7c40:	jmp    QWORD PTR [rip+0x235fb2]        # 23dbf8 <g_strndup>
    7c46:	push   0x3d
    7c4b:	jmp    7860 <_init@@Base+0x18>

0000000000007c50 <pthread_attr_destroy@plt>:
    7c50:	jmp    QWORD PTR [rip+0x235faa]        # 23dc00 <pthread_attr_destroy@GLIBC_2.2.5>
    7c56:	push   0x3e
    7c5b:	jmp    7860 <_init@@Base+0x18>

0000000000007c60 <__fxstat64@plt>:
    7c60:	jmp    QWORD PTR [rip+0x235fa2]        # 23dc08 <__fxstat64@GLIBC_2.2.5>
    7c66:	push   0x3f
    7c6b:	jmp    7860 <_init@@Base+0x18>

0000000000007c70 <g_strv_length@plt>:
    7c70:	jmp    QWORD PTR [rip+0x235f9a]        # 23dc10 <g_strv_length>
    7c76:	push   0x40
    7c7b:	jmp    7860 <_init@@Base+0x18>

0000000000007c80 <g_malloc0_n@plt>:
    7c80:	jmp    QWORD PTR [rip+0x235f92]        # 23dc18 <g_malloc0_n>
    7c86:	push   0x41
    7c8b:	jmp    7860 <_init@@Base+0x18>

0000000000007c90 <__ctype_toupper_loc@plt>:
    7c90:	jmp    QWORD PTR [rip+0x235f8a]        # 23dc20 <__ctype_toupper_loc@GLIBC_2.3>
    7c96:	push   0x42
    7c9b:	jmp    7860 <_init@@Base+0x18>

0000000000007ca0 <g_assertion_message_expr@plt>:
    7ca0:	jmp    QWORD PTR [rip+0x235f82]        # 23dc28 <g_assertion_message_expr>
    7ca6:	push   0x43
    7cab:	jmp    7860 <_init@@Base+0x18>

0000000000007cb0 <fputc@plt>:
    7cb0:	jmp    QWORD PTR [rip+0x235f7a]        # 23dc30 <fputc@GLIBC_2.2.5>
    7cb6:	push   0x44
    7cbb:	jmp    7860 <_init@@Base+0x18>

0000000000007cc0 <free@plt>:
    7cc0:	jmp    QWORD PTR [rip+0x235f72]        # 23dc38 <free@GLIBC_2.2.5>
    7cc6:	push   0x45
    7ccb:	jmp    7860 <_init@@Base+0x18>

0000000000007cd0 <strlen@plt>:
    7cd0:	jmp    QWORD PTR [rip+0x235f6a]        # 23dc40 <strlen@GLIBC_2.2.5>
    7cd6:	push   0x46
    7cdb:	jmp    7860 <_init@@Base+0x18>

0000000000007ce0 <g_strdup_printf@plt>:
    7ce0:	jmp    QWORD PTR [rip+0x235f62]        # 23dc48 <g_strdup_printf>
    7ce6:	push   0x47
    7ceb:	jmp    7860 <_init@@Base+0x18>

0000000000007cf0 <ferror@plt>:
    7cf0:	jmp    QWORD PTR [rip+0x235f5a]        # 23dc50 <ferror@GLIBC_2.2.5>
    7cf6:	push   0x48
    7cfb:	jmp    7860 <_init@@Base+0x18>

0000000000007d00 <pthread_create@plt>:
    7d00:	jmp    QWORD PTR [rip+0x235f52]        # 23dc58 <pthread_create@GLIBC_2.2.5>
    7d06:	push   0x49
    7d0b:	jmp    7860 <_init@@Base+0x18>

0000000000007d10 <pthread_cond_init@plt>:
    7d10:	jmp    QWORD PTR [rip+0x235f4a]        # 23dc60 <pthread_cond_init@GLIBC_2.3.2>
    7d16:	push   0x4a
    7d1b:	jmp    7860 <_init@@Base+0x18>

0000000000007d20 <g_string_free@plt>:
    7d20:	jmp    QWORD PTR [rip+0x235f42]        # 23dc68 <g_string_free>
    7d26:	push   0x4b
    7d2b:	jmp    7860 <_init@@Base+0x18>

0000000000007d30 <__vfprintf_chk@plt>:
    7d30:	jmp    QWORD PTR [rip+0x235f3a]        # 23dc70 <__vfprintf_chk@GLIBC_2.3.4>
    7d36:	push   0x4c
    7d3b:	jmp    7860 <_init@@Base+0x18>

0000000000007d40 <mkstemp64@plt>:
    7d40:	jmp    QWORD PTR [rip+0x235f32]        # 23dc78 <mkstemp64@GLIBC_2.2.5>
    7d46:	push   0x4d
    7d4b:	jmp    7860 <_init@@Base+0x18>

0000000000007d50 <listen@plt>:
    7d50:	jmp    QWORD PTR [rip+0x235f2a]        # 23dc80 <listen@GLIBC_2.2.5>
    7d56:	push   0x4e
    7d5b:	jmp    7860 <_init@@Base+0x18>

0000000000007d60 <__ctype_b_loc@plt>:
    7d60:	jmp    QWORD PTR [rip+0x235f22]        # 23dc88 <__ctype_b_loc@GLIBC_2.3>
    7d66:	push   0x4f
    7d6b:	jmp    7860 <_init@@Base+0x18>

0000000000007d70 <g_hash_table_new@plt>:
    7d70:	jmp    QWORD PTR [rip+0x235f1a]        # 23dc90 <g_hash_table_new>
    7d76:	push   0x50
    7d7b:	jmp    7860 <_init@@Base+0x18>

0000000000007d80 <g_hash_table_iter_next@plt>:
    7d80:	jmp    QWORD PTR [rip+0x235f12]        # 23dc98 <g_hash_table_iter_next>
    7d86:	push   0x51
    7d8b:	jmp    7860 <_init@@Base+0x18>

0000000000007d90 <g_hash_table_iter_init@plt>:
    7d90:	jmp    QWORD PTR [rip+0x235f0a]        # 23dca0 <g_hash_table_iter_init>
    7d96:	push   0x52
    7d9b:	jmp    7860 <_init@@Base+0x18>

0000000000007da0 <g_time_val_to_iso8601@plt>:
    7da0:	jmp    QWORD PTR [rip+0x235f02]        # 23dca8 <g_time_val_to_iso8601>
    7da6:	push   0x53
    7dab:	jmp    7860 <_init@@Base+0x18>

0000000000007db0 <fdatasync@plt>:
    7db0:	jmp    QWORD PTR [rip+0x235efa]        # 23dcb0 <fdatasync@GLIBC_2.2.5>
    7db6:	push   0x54
    7dbb:	jmp    7860 <_init@@Base+0x18>

0000000000007dc0 <fgetc@plt>:
    7dc0:	jmp    QWORD PTR [rip+0x235ef2]        # 23dcb8 <fgetc@GLIBC_2.2.5>
    7dc6:	push   0x55
    7dcb:	jmp    7860 <_init@@Base+0x18>

0000000000007dd0 <sem_timedwait@plt>:
    7dd0:	jmp    QWORD PTR [rip+0x235eea]        # 23dcc0 <sem_timedwait@GLIBC_2.2.5>
    7dd6:	push   0x56
    7ddb:	jmp    7860 <_init@@Base+0x18>

0000000000007de0 <strrchr@plt>:
    7de0:	jmp    QWORD PTR [rip+0x235ee2]        # 23dcc8 <strrchr@GLIBC_2.2.5>
    7de6:	push   0x57
    7deb:	jmp    7860 <_init@@Base+0x18>

0000000000007df0 <syscall@plt>:
    7df0:	jmp    QWORD PTR [rip+0x235eda]        # 23dcd0 <syscall@GLIBC_2.2.5>
    7df6:	push   0x58
    7dfb:	jmp    7860 <_init@@Base+0x18>

0000000000007e00 <getpagesize@plt>:
    7e00:	jmp    QWORD PTR [rip+0x235ed2]        # 23dcd8 <getpagesize@GLIBC_2.2.5>
    7e06:	push   0x59
    7e0b:	jmp    7860 <_init@@Base+0x18>

0000000000007e10 <statfs64@plt>:
    7e10:	jmp    QWORD PTR [rip+0x235eca]        # 23dce0 <statfs64@GLIBC_2.2.5>
    7e16:	push   0x5a
    7e1b:	jmp    7860 <_init@@Base+0x18>

0000000000007e20 <sscanf@plt>:
    7e20:	jmp    QWORD PTR [rip+0x235ec2]        # 23dce8 <sscanf@GLIBC_2.2.5>
    7e26:	push   0x5b
    7e2b:	jmp    7860 <_init@@Base+0x18>

0000000000007e30 <pipe@plt>:
    7e30:	jmp    QWORD PTR [rip+0x235eba]        # 23dcf0 <pipe@GLIBC_2.2.5>
    7e36:	push   0x5c
    7e3b:	jmp    7860 <_init@@Base+0x18>

0000000000007e40 <pthread_self@plt>:
    7e40:	jmp    QWORD PTR [rip+0x235eb2]        # 23dcf8 <pthread_self@GLIBC_2.2.5>
    7e46:	push   0x5d
    7e4b:	jmp    7860 <_init@@Base+0x18>

0000000000007e50 <g_strdup_vprintf@plt>:
    7e50:	jmp    QWORD PTR [rip+0x235eaa]        # 23dd00 <g_strdup_vprintf>
    7e56:	push   0x5e
    7e5b:	jmp    7860 <_init@@Base+0x18>

0000000000007e60 <sendmsg@plt>:
    7e60:	jmp    QWORD PTR [rip+0x235ea2]        # 23dd08 <sendmsg@GLIBC_2.2.5>
    7e66:	push   0x5f
    7e6b:	jmp    7860 <_init@@Base+0x18>

0000000000007e70 <pthread_join@plt>:
    7e70:	jmp    QWORD PTR [rip+0x235e9a]        # 23dd10 <pthread_join@GLIBC_2.2.5>
    7e76:	push   0x60
    7e7b:	jmp    7860 <_init@@Base+0x18>

0000000000007e80 <pthread_mutex_trylock@plt>:
    7e80:	jmp    QWORD PTR [rip+0x235e92]        # 23dd18 <pthread_mutex_trylock@GLIBC_2.2.5>
    7e86:	push   0x61
    7e8b:	jmp    7860 <_init@@Base+0x18>

0000000000007e90 <strerror@plt>:
    7e90:	jmp    QWORD PTR [rip+0x235e8a]        # 23dd20 <strerror@GLIBC_2.2.5>
    7e96:	push   0x62
    7e9b:	jmp    7860 <_init@@Base+0x18>

0000000000007ea0 <open64@plt>:
    7ea0:	jmp    QWORD PTR [rip+0x235e82]        # 23dd28 <open64@GLIBC_2.2.5>
    7ea6:	push   0x63
    7eab:	jmp    7860 <_init@@Base+0x18>

0000000000007eb0 <strstr@plt>:
    7eb0:	jmp    QWORD PTR [rip+0x235e7a]        # 23dd30 <strstr@GLIBC_2.2.5>
    7eb6:	push   0x64
    7ebb:	jmp    7860 <_init@@Base+0x18>

0000000000007ec0 <sigaction@plt>:
    7ec0:	jmp    QWORD PTR [rip+0x235e72]        # 23dd38 <sigaction@GLIBC_2.2.5>
    7ec6:	push   0x65
    7ecb:	jmp    7860 <_init@@Base+0x18>

0000000000007ed0 <g_string_erase@plt>:
    7ed0:	jmp    QWORD PTR [rip+0x235e6a]        # 23dd40 <g_string_erase>
    7ed6:	push   0x66
    7edb:	jmp    7860 <_init@@Base+0x18>

0000000000007ee0 <pthread_exit@plt>:
    7ee0:	jmp    QWORD PTR [rip+0x235e62]        # 23dd48 <pthread_exit@GLIBC_2.2.5>
    7ee6:	push   0x67
    7eeb:	jmp    7860 <_init@@Base+0x18>

0000000000007ef0 <g_string_vprintf@plt>:
    7ef0:	jmp    QWORD PTR [rip+0x235e5a]        # 23dd50 <g_string_vprintf>
    7ef6:	push   0x68
    7efb:	jmp    7860 <_init@@Base+0x18>

0000000000007f00 <strtol@plt>:
    7f00:	jmp    QWORD PTR [rip+0x235e52]        # 23dd58 <strtol@GLIBC_2.2.5>
    7f06:	push   0x69
    7f0b:	jmp    7860 <_init@@Base+0x18>

0000000000007f10 <ftruncate64@plt>:
    7f10:	jmp    QWORD PTR [rip+0x235e4a]        # 23dd60 <ftruncate64@GLIBC_2.2.5>
    7f16:	push   0x6a
    7f1b:	jmp    7860 <_init@@Base+0x18>

0000000000007f20 <readlink@plt>:
    7f20:	jmp    QWORD PTR [rip+0x235e42]        # 23dd68 <readlink@GLIBC_2.2.5>
    7f26:	push   0x6b
    7f2b:	jmp    7860 <_init@@Base+0x18>

0000000000007f30 <g_test_subprocess@plt>:
    7f30:	jmp    QWORD PTR [rip+0x235e3a]        # 23dd70 <g_test_subprocess>
    7f36:	push   0x6c
    7f3b:	jmp    7860 <_init@@Base+0x18>

0000000000007f40 <g_queue_foreach@plt>:
    7f40:	jmp    QWORD PTR [rip+0x235e32]        # 23dd78 <g_queue_foreach>
    7f46:	push   0x6d
    7f4b:	jmp    7860 <_init@@Base+0x18>

0000000000007f50 <g_string_prepend_c@plt>:
    7f50:	jmp    QWORD PTR [rip+0x235e2a]        # 23dd80 <g_string_prepend_c>
    7f56:	push   0x6e
    7f5b:	jmp    7860 <_init@@Base+0x18>

0000000000007f60 <tcgetattr@plt>:
    7f60:	jmp    QWORD PTR [rip+0x235e22]        # 23dd88 <tcgetattr@GLIBC_2.2.5>
    7f66:	push   0x6f
    7f6b:	jmp    7860 <_init@@Base+0x18>

0000000000007f70 <g_array_sized_new@plt>:
    7f70:	jmp    QWORD PTR [rip+0x235e1a]        # 23dd90 <g_array_sized_new>
    7f76:	push   0x70
    7f7b:	jmp    7860 <_init@@Base+0x18>

0000000000007f80 <memmove@plt>:
    7f80:	jmp    QWORD PTR [rip+0x235e12]        # 23dd98 <memmove@GLIBC_2.2.5>
    7f86:	push   0x71
    7f8b:	jmp    7860 <_init@@Base+0x18>

0000000000007f90 <strchr@plt>:
    7f90:	jmp    QWORD PTR [rip+0x235e0a]        # 23dda0 <strchr@GLIBC_2.2.5>
    7f96:	push   0x72
    7f9b:	jmp    7860 <_init@@Base+0x18>

0000000000007fa0 <socket@plt>:
    7fa0:	jmp    QWORD PTR [rip+0x235e02]        # 23dda8 <socket@GLIBC_2.2.5>
    7fa6:	push   0x73
    7fab:	jmp    7860 <_init@@Base+0x18>

0000000000007fb0 <getenv@plt>:
    7fb0:	jmp    QWORD PTR [rip+0x235dfa]        # 23ddb0 <getenv@GLIBC_2.2.5>
    7fb6:	push   0x74
    7fbb:	jmp    7860 <_init@@Base+0x18>

0000000000007fc0 <g_str_has_prefix@plt>:
    7fc0:	jmp    QWORD PTR [rip+0x235df2]        # 23ddb8 <g_str_has_prefix>
    7fc6:	push   0x75
    7fcb:	jmp    7860 <_init@@Base+0x18>

0000000000007fd0 <__errno_location@plt>:
    7fd0:	jmp    QWORD PTR [rip+0x235dea]        # 23ddc0 <__errno_location@GLIBC_2.2.5>
    7fd6:	push   0x76
    7fdb:	jmp    7860 <_init@@Base+0x18>

0000000000007fe0 <g_string_append_vprintf@plt>:
    7fe0:	jmp    QWORD PTR [rip+0x235de2]        # 23ddc8 <g_string_append_vprintf>
    7fe6:	push   0x77
    7feb:	jmp    7860 <_init@@Base+0x18>

0000000000007ff0 <madvise@plt>:
    7ff0:	jmp    QWORD PTR [rip+0x235dda]        # 23ddd0 <madvise@GLIBC_2.2.5>
    7ff6:	push   0x78
    7ffb:	jmp    7860 <_init@@Base+0x18>

0000000000008000 <accept4@plt>:
    8000:	jmp    QWORD PTR [rip+0x235dd2]        # 23ddd8 <accept4@GLIBC_2.10>
    8006:	push   0x79
    800b:	jmp    7860 <_init@@Base+0x18>

0000000000008010 <g_realloc@plt>:
    8010:	jmp    QWORD PTR [rip+0x235dca]        # 23dde0 <g_realloc>
    8016:	push   0x7a
    801b:	jmp    7860 <_init@@Base+0x18>

0000000000008020 <sigaddset@plt>:
    8020:	jmp    QWORD PTR [rip+0x235dc2]        # 23dde8 <sigaddset@GLIBC_2.2.5>
    8026:	push   0x7b
    802b:	jmp    7860 <_init@@Base+0x18>

0000000000008030 <sem_init@plt>:
    8030:	jmp    QWORD PTR [rip+0x235dba]        # 23ddf0 <sem_init@GLIBC_2.2.5>
    8036:	push   0x7c
    803b:	jmp    7860 <_init@@Base+0x18>

0000000000008040 <pthread_mutexattr_settype@plt>:
    8040:	jmp    QWORD PTR [rip+0x235db2]        # 23ddf8 <pthread_mutexattr_settype@GLIBC_2.2.5>
    8046:	push   0x7d
    804b:	jmp    7860 <_init@@Base+0x18>

0000000000008050 <__stack_chk_fail@plt>:
    8050:	jmp    QWORD PTR [rip+0x235daa]        # 23de00 <__stack_chk_fail@GLIBC_2.4>
    8056:	push   0x7e
    805b:	jmp    7860 <_init@@Base+0x18>

0000000000008060 <strcmp@plt>:
    8060:	jmp    QWORD PTR [rip+0x235da2]        # 23de08 <strcmp@GLIBC_2.2.5>
    8066:	push   0x7f
    806b:	jmp    7860 <_init@@Base+0x18>

0000000000008070 <sem_post@plt>:
    8070:	jmp    QWORD PTR [rip+0x235d9a]        # 23de10 <sem_post@GLIBC_2.2.5>
    8076:	push   0x80
    807b:	jmp    7860 <_init@@Base+0x18>

0000000000008080 <g_strsplit@plt>:
    8080:	jmp    QWORD PTR [rip+0x235d92]        # 23de18 <g_strsplit>
    8086:	push   0x81
    808b:	jmp    7860 <_init@@Base+0x18>

0000000000008090 <g_random_int_range@plt>:
    8090:	jmp    QWORD PTR [rip+0x235d8a]        # 23de20 <g_random_int_range>
    8096:	push   0x82
    809b:	jmp    7860 <_init@@Base+0x18>

00000000000080a0 <g_queue_get_length@plt>:
    80a0:	jmp    QWORD PTR [rip+0x235d82]        # 23de28 <g_queue_get_length>
    80a6:	push   0x83
    80ab:	jmp    7860 <_init@@Base+0x18>

00000000000080b0 <pthread_cond_wait@plt>:
    80b0:	jmp    QWORD PTR [rip+0x235d7a]        # 23de30 <pthread_cond_wait@GLIBC_2.3.2>
    80b6:	push   0x84
    80bb:	jmp    7860 <_init@@Base+0x18>

00000000000080c0 <g_malloc0@plt>:
    80c0:	jmp    QWORD PTR [rip+0x235d72]        # 23de38 <g_malloc0>
    80c6:	push   0x85
    80cb:	jmp    7860 <_init@@Base+0x18>

00000000000080d0 <g_string_insert_c@plt>:
    80d0:	jmp    QWORD PTR [rip+0x235d6a]        # 23de40 <g_string_insert_c>
    80d6:	push   0x86
    80db:	jmp    7860 <_init@@Base+0x18>

00000000000080e0 <g_queue_peek_head@plt>:
    80e0:	jmp    QWORD PTR [rip+0x235d62]        # 23de48 <g_queue_peek_head>
    80e6:	push   0x87
    80eb:	jmp    7860 <_init@@Base+0x18>

00000000000080f0 <munmap@plt>:
    80f0:	jmp    QWORD PTR [rip+0x235d5a]        # 23de50 <munmap@GLIBC_2.2.5>
    80f6:	push   0x88
    80fb:	jmp    7860 <_init@@Base+0x18>

0000000000008100 <g_file_get_contents@plt>:
    8100:	jmp    QWORD PTR [rip+0x235d52]        # 23de58 <g_file_get_contents>
    8106:	push   0x89
    810b:	jmp    7860 <_init@@Base+0x18>

0000000000008110 <fclose@plt>:
    8110:	jmp    QWORD PTR [rip+0x235d4a]        # 23de60 <fclose@GLIBC_2.2.5>
    8116:	push   0x8a
    811b:	jmp    7860 <_init@@Base+0x18>

0000000000008120 <g_queue_is_empty@plt>:
    8120:	jmp    QWORD PTR [rip+0x235d42]        # 23de68 <g_queue_is_empty>
    8126:	push   0x8b
    812b:	jmp    7860 <_init@@Base+0x18>

0000000000008130 <strncpy@plt>:
    8130:	jmp    QWORD PTR [rip+0x235d3a]        # 23de70 <strncpy@GLIBC_2.2.5>
    8136:	push   0x8c
    813b:	jmp    7860 <_init@@Base+0x18>

0000000000008140 <pthread_attr_init@plt>:
    8140:	jmp    QWORD PTR [rip+0x235d32]        # 23de78 <pthread_attr_init@GLIBC_2.2.5>
    8146:	push   0x8d
    814b:	jmp    7860 <_init@@Base+0x18>

0000000000008150 <g_string_truncate@plt>:
    8150:	jmp    QWORD PTR [rip+0x235d2a]        # 23de80 <g_string_truncate>
    8156:	push   0x8e
    815b:	jmp    7860 <_init@@Base+0x18>

0000000000008160 <strtoull@plt>:
    8160:	jmp    QWORD PTR [rip+0x235d22]        # 23de88 <strtoull@GLIBC_2.2.5>
    8166:	push   0x8f
    816b:	jmp    7860 <_init@@Base+0x18>

0000000000008170 <g_hash_table_unref@plt>:
    8170:	jmp    QWORD PTR [rip+0x235d1a]        # 23de90 <g_hash_table_unref>
    8176:	push   0x90
    817b:	jmp    7860 <_init@@Base+0x18>

0000000000008180 <strcspn@plt>:
    8180:	jmp    QWORD PTR [rip+0x235d12]        # 23de98 <strcspn@GLIBC_2.2.5>
    8186:	push   0x91
    818b:	jmp    7860 <_init@@Base+0x18>

0000000000008190 <__realpath_chk@plt>:
    8190:	jmp    QWORD PTR [rip+0x235d0a]        # 23dea0 <__realpath_chk@GLIBC_2.4>
    8196:	push   0x92
    819b:	jmp    7860 <_init@@Base+0x18>

00000000000081a0 <g_get_current_time@plt>:
    81a0:	jmp    QWORD PTR [rip+0x235d02]        # 23dea8 <g_get_current_time>
    81a6:	push   0x93
    81ab:	jmp    7860 <_init@@Base+0x18>

00000000000081b0 <__snprintf_chk@plt>:
    81b0:	jmp    QWORD PTR [rip+0x235cfa]        # 23deb0 <__snprintf_chk@GLIBC_2.3.4>
    81b6:	push   0x94
    81bb:	jmp    7860 <_init@@Base+0x18>

00000000000081c0 <fork@plt>:
    81c0:	jmp    QWORD PTR [rip+0x235cf2]        # 23deb8 <fork@GLIBC_2.2.5>
    81c6:	push   0x95
    81cb:	jmp    7860 <_init@@Base+0x18>

00000000000081d0 <sigemptyset@plt>:
    81d0:	jmp    QWORD PTR [rip+0x235cea]        # 23dec0 <sigemptyset@GLIBC_2.2.5>
    81d6:	push   0x96
    81db:	jmp    7860 <_init@@Base+0x18>

00000000000081e0 <modf@plt>:
    81e0:	jmp    QWORD PTR [rip+0x235ce2]        # 23dec8 <modf@GLIBC_2.2.5>
    81e6:	push   0x97
    81eb:	jmp    7860 <_init@@Base+0x18>

00000000000081f0 <g_strfreev@plt>:
    81f0:	jmp    QWORD PTR [rip+0x235cda]        # 23ded0 <g_strfreev>
    81f6:	push   0x98
    81fb:	jmp    7860 <_init@@Base+0x18>

0000000000008200 <pthread_sigmask@plt>:
    8200:	jmp    QWORD PTR [rip+0x235cd2]        # 23ded8 <pthread_sigmask@GLIBC_2.2.5>
    8206:	push   0x99
    820b:	jmp    7860 <_init@@Base+0x18>

0000000000008210 <fopen64@plt>:
    8210:	jmp    QWORD PTR [rip+0x235cca]        # 23dee0 <fopen64@GLIBC_2.2.5>
    8216:	push   0x9a
    821b:	jmp    7860 <_init@@Base+0x18>

0000000000008220 <strtoll@plt>:
    8220:	jmp    QWORD PTR [rip+0x235cc2]        # 23dee8 <strtoll@GLIBC_2.2.5>
    8226:	push   0x9b
    822b:	jmp    7860 <_init@@Base+0x18>

0000000000008230 <bind@plt>:
    8230:	jmp    QWORD PTR [rip+0x235cba]        # 23def0 <bind@GLIBC_2.2.5>
    8236:	push   0x9c
    823b:	jmp    7860 <_init@@Base+0x18>

0000000000008240 <fwrite@plt>:
    8240:	jmp    QWORD PTR [rip+0x235cb2]        # 23def8 <fwrite@GLIBC_2.2.5>
    8246:	push   0x9d
    824b:	jmp    7860 <_init@@Base+0x18>

0000000000008250 <pthread_mutex_lock@plt>:
    8250:	jmp    QWORD PTR [rip+0x235caa]        # 23df00 <pthread_mutex_lock@GLIBC_2.2.5>
    8256:	push   0x9e
    825b:	jmp    7860 <_init@@Base+0x18>

0000000000008260 <perror@plt>:
    8260:	jmp    QWORD PTR [rip+0x235ca2]        # 23df08 <perror@GLIBC_2.2.5>
    8266:	push   0x9f
    826b:	jmp    7860 <_init@@Base+0x18>

0000000000008270 <pthread_mutexattr_init@plt>:
    8270:	jmp    QWORD PTR [rip+0x235c9a]        # 23df10 <pthread_mutexattr_init@GLIBC_2.2.5>
    8276:	push   0xa0
    827b:	jmp    7860 <_init@@Base+0x18>

0000000000008280 <__sigsetjmp@plt>:
    8280:	jmp    QWORD PTR [rip+0x235c92]        # 23df18 <__sigsetjmp@GLIBC_2.2.5>
    8286:	push   0xa1
    828b:	jmp    7860 <_init@@Base+0x18>

0000000000008290 <pthread_key_create@plt>:
    8290:	jmp    QWORD PTR [rip+0x235c8a]        # 23df20 <pthread_key_create@GLIBC_2.2.5>
    8296:	push   0xa2
    829b:	jmp    7860 <_init@@Base+0x18>

00000000000082a0 <pthread_mutex_destroy@plt>:
    82a0:	jmp    QWORD PTR [rip+0x235c82]        # 23df28 <pthread_mutex_destroy@GLIBC_2.2.5>
    82a6:	push   0xa3
    82ab:	jmp    7860 <_init@@Base+0x18>

00000000000082b0 <write@plt>:
    82b0:	jmp    QWORD PTR [rip+0x235c7a]        # 23df30 <write@GLIBC_2.2.5>
    82b6:	push   0xa4
    82bb:	jmp    7860 <_init@@Base+0x18>

00000000000082c0 <pthread_cond_broadcast@plt>:
    82c0:	jmp    QWORD PTR [rip+0x235c72]        # 23df38 <pthread_cond_broadcast@GLIBC_2.3.2>
    82c6:	push   0xa5
    82cb:	jmp    7860 <_init@@Base+0x18>

00000000000082d0 <accept@plt>:
    82d0:	jmp    QWORD PTR [rip+0x235c6a]        # 23df40 <accept@GLIBC_2.2.5>
    82d6:	push   0xa6
    82db:	jmp    7860 <_init@@Base+0x18>

00000000000082e0 <strtoul@plt>:
    82e0:	jmp    QWORD PTR [rip+0x235c62]        # 23df48 <strtoul@GLIBC_2.2.5>
    82e6:	push   0xa7
    82eb:	jmp    7860 <_init@@Base+0x18>

00000000000082f0 <g_queue_new@plt>:
    82f0:	jmp    QWORD PTR [rip+0x235c5a]        # 23df50 <g_queue_new>
    82f6:	push   0xa8
    82fb:	jmp    7860 <_init@@Base+0x18>

0000000000008300 <g_array_append_vals@plt>:
    8300:	jmp    QWORD PTR [rip+0x235c52]        # 23df58 <g_array_append_vals>
    8306:	push   0xa9
    830b:	jmp    7860 <_init@@Base+0x18>

0000000000008310 <g_string_append@plt>:
    8310:	jmp    QWORD PTR [rip+0x235c4a]        # 23df60 <g_string_append>
    8316:	push   0xaa
    831b:	jmp    7860 <_init@@Base+0x18>

0000000000008320 <pthread_mutex_unlock@plt>:
    8320:	jmp    QWORD PTR [rip+0x235c42]        # 23df68 <pthread_mutex_unlock@GLIBC_2.2.5>
    8326:	push   0xab
    832b:	jmp    7860 <_init@@Base+0x18>

0000000000008330 <memcpy@plt>:
    8330:	jmp    QWORD PTR [rip+0x235c3a]        # 23df70 <memcpy@GLIBC_2.14>
    8336:	push   0xac
    833b:	jmp    7860 <_init@@Base+0x18>

0000000000008340 <fcntl@plt>:
    8340:	jmp    QWORD PTR [rip+0x235c32]        # 23df78 <fcntl@GLIBC_2.2.5>
    8346:	push   0xad
    834b:	jmp    7860 <_init@@Base+0x18>

0000000000008350 <strtod@plt>:
    8350:	jmp    QWORD PTR [rip+0x235c2a]        # 23df80 <strtod@GLIBC_2.2.5>
    8356:	push   0xae
    835b:	jmp    7860 <_init@@Base+0x18>

0000000000008360 <__fdelt_chk@plt>:
    8360:	jmp    QWORD PTR [rip+0x235c22]        # 23df88 <__fdelt_chk@GLIBC_2.15>
    8366:	push   0xaf
    836b:	jmp    7860 <_init@@Base+0x18>

0000000000008370 <_IO_putc@plt>:
    8370:	jmp    QWORD PTR [rip+0x235c1a]        # 23df90 <_IO_putc@GLIBC_2.2.5>
    8376:	push   0xb0
    837b:	jmp    7860 <_init@@Base+0x18>

0000000000008380 <fflush@plt>:
    8380:	jmp    QWORD PTR [rip+0x235c12]        # 23df98 <fflush@GLIBC_2.2.5>
    8386:	push   0xb1
    838b:	jmp    7860 <_init@@Base+0x18>

0000000000008390 <g_queue_pop_head@plt>:
    8390:	jmp    QWORD PTR [rip+0x235c0a]        # 23dfa0 <g_queue_pop_head>
    8396:	push   0xb2
    839b:	jmp    7860 <_init@@Base+0x18>

00000000000083a0 <pthread_attr_setdetachstate@plt>:
    83a0:	jmp    QWORD PTR [rip+0x235c02]        # 23dfa8 <pthread_attr_setdetachstate@GLIBC_2.2.5>
    83a6:	push   0xb3
    83ab:	jmp    7860 <_init@@Base+0x18>

Disassembly of section .plt.got:

00000000000083b0 <__cxa_finalize@plt>:
    83b0:	jmp    QWORD PTR [rip+0x235c22]        # 23dfd8 <__cxa_finalize@GLIBC_2.2.5>
    83b6:	xchg   ax,ax

00000000000083b8 <g_str_equal@plt>:
    83b8:	jmp    QWORD PTR [rip+0x235c22]        # 23dfe0 <g_str_equal>
    83be:	xchg   ax,ax

Disassembly of section .text:

00000000000083c0 <.text>:
    83c0:	sub    rsp,0x8
    83c4:	call   7fd0 <__errno_location@plt>
    83c9:	mov    edi,DWORD PTR [rax]
    83cb:	call   7e90 <strerror@plt>
    83d0:	mov    rdi,QWORD PTR [rip+0x2378c9]        # 23fca0 <stderr@@GLIBC_2.2.5>
    83d7:	lea    rdx,[rip+0x2190a]        # 29ce8 <_fini@@Base+0xa64>
    83de:	mov    rcx,rax
    83e1:	mov    esi,0x1
    83e6:	xor    eax,eax
    83e8:	call   79e0 <__fprintf_chk@plt>
    83ed:	call   79c0 <abort@plt>
    83f2:	push   rbx
    83f3:	mov    rbx,rsi
    83f6:	call   7e90 <strerror@plt>
    83fb:	mov    rdi,QWORD PTR [rip+0x23789e]        # 23fca0 <stderr@@GLIBC_2.2.5>
    8402:	lea    rdx,[rip+0x21c3d]        # 2a046 <_fini@@Base+0xdc2>
    8409:	mov    r8,rax
    840c:	mov    rcx,rbx
    840f:	mov    esi,0x1
    8414:	xor    eax,eax
    8416:	call   79e0 <__fprintf_chk@plt>
    841b:	call   79c0 <abort@plt>
    8420:	lea    rcx,[rip+0x23381]        # 2b7a8 <_fini@@Base+0x2524>
    8427:	lea    rsi,[rip+0x2246a]        # 2a898 <_fini@@Base+0x1614>
    842e:	lea    rdi,[rip+0x224ab]        # 2a8e0 <_fini@@Base+0x165c>
    8435:	sub    rsp,0x8
    8439:	mov    edx,0x7f
    843e:	call   7a70 <__assert_fail@plt>
    8443:	lea    rcx,[rip+0x234be]        # 2b908 <_fini@@Base+0x2684>
    844a:	lea    rsi,[rip+0x22447]        # 2a898 <_fini@@Base+0x1614>
    8451:	lea    rdi,[rip+0x22488]        # 2a8e0 <_fini@@Base+0x165c>
    8458:	sub    rsp,0x8
    845c:	mov    edx,0x7f
    8461:	call   7a70 <__assert_fail@plt>
    8466:	lea    rcx,[rip+0x2358b]        # 2b9f8 <_fini@@Base+0x2774>
    846d:	lea    rsi,[rip+0x22424]        # 2a898 <_fini@@Base+0x1614>
    8474:	lea    rdi,[rip+0x22465]        # 2a8e0 <_fini@@Base+0x165c>
    847b:	sub    rsp,0x8
    847f:	mov    edx,0x7f
    8484:	call   7a70 <__assert_fail@plt>
    8489:	lea    rcx,[rip+0x23580]        # 2ba10 <_fini@@Base+0x278c>
    8490:	lea    rsi,[rip+0x22401]        # 2a898 <_fini@@Base+0x1614>
    8497:	lea    rdi,[rip+0x234f3]        # 2b991 <_fini@@Base+0x270d>
    849e:	sub    rsp,0x8
    84a2:	mov    edx,0x62
    84a7:	call   7a70 <__assert_fail@plt>
    84ac:	lea    rcx,[rip+0x235d5]        # 2ba88 <_fini@@Base+0x2804>
    84b3:	lea    rsi,[rip+0x223de]        # 2a898 <_fini@@Base+0x1614>
    84ba:	lea    rdi,[rip+0x2241f]        # 2a8e0 <_fini@@Base+0x165c>
    84c1:	sub    rsp,0x8
    84c5:	mov    edx,0x7f
    84ca:	call   7a70 <__assert_fail@plt>
    84cf:	lea    rcx,[rip+0x23ffa]        # 2c4d0 <_fini@@Base+0x324c>
    84d6:	lea    rsi,[rip+0x223bb]        # 2a898 <_fini@@Base+0x1614>
    84dd:	lea    rdi,[rip+0x234ad]        # 2b991 <_fini@@Base+0x270d>
    84e4:	sub    rsp,0x8
    84e8:	mov    edx,0x62
    84ed:	call   7a70 <__assert_fail@plt>
    84f2:	lea    rcx,[rip+0x256a7]        # 2dba0 <_fini@@Base+0x491c>
    84f9:	lea    rsi,[rip+0x22398]        # 2a898 <_fini@@Base+0x1614>
    8500:	lea    rdi,[rip+0x2348a]        # 2b991 <_fini@@Base+0x270d>
    8507:	sub    rsp,0x8
    850b:	mov    edx,0x62
    8510:	call   7a70 <__assert_fail@plt>
    8515:	lea    rcx,[rip+0x257cc]        # 2dce8 <_fini@@Base+0x4a64>
    851c:	lea    rsi,[rip+0x22375]        # 2a898 <_fini@@Base+0x1614>
    8523:	lea    rdi,[rip+0x223b6]        # 2a8e0 <_fini@@Base+0x165c>
    852a:	sub    rsp,0x8
    852e:	mov    edx,0x7f
    8533:	call   7a70 <__assert_fail@plt>
    8538:	lea    rcx,[rip+0x259d1]        # 2df10 <_fini@@Base+0x4c8c>
    853f:	lea    rsi,[rip+0x22352]        # 2a898 <_fini@@Base+0x1614>
    8546:	lea    rdi,[rip+0x23444]        # 2b991 <_fini@@Base+0x270d>
    854d:	sub    rsp,0x8
    8551:	mov    edx,0x62
    8556:	call   7a70 <__assert_fail@plt>
    855b:	lea    rcx,[rip+0x2618e]        # 2e6f0 <_fini@@Base+0x546c>
    8562:	lea    rsi,[rip+0x2232f]        # 2a898 <_fini@@Base+0x1614>
    8569:	lea    rdi,[rip+0x23421]        # 2b991 <_fini@@Base+0x270d>
    8570:	sub    rsp,0x8
    8574:	mov    edx,0x62
    8579:	call   7a70 <__assert_fail@plt>
    857e:	lea    rcx,[rip+0x26393]        # 2e918 <_fini@@Base+0x5694>
    8585:	lea    rsi,[rip+0x2230c]        # 2a898 <_fini@@Base+0x1614>
    858c:	lea    rdi,[rip+0x2234d]        # 2a8e0 <_fini@@Base+0x165c>
    8593:	sub    rsp,0x8
    8597:	mov    edx,0x7f
    859c:	call   7a70 <__assert_fail@plt>
    85a1:	lea    rcx,[rip+0x267c8]        # 2ed70 <_fini@@Base+0x5aec>
    85a8:	lea    rsi,[rip+0x222e9]        # 2a898 <_fini@@Base+0x1614>
    85af:	lea    rdi,[rip+0x233db]        # 2b991 <_fini@@Base+0x270d>
    85b6:	sub    rsp,0x8
    85ba:	mov    edx,0x62
    85bf:	call   7a70 <__assert_fail@plt>
    85c4:	lea    rcx,[rip+0x26a25]        # 2eff0 <_fini@@Base+0x5d6c>
    85cb:	lea    rsi,[rip+0x222c6]        # 2a898 <_fini@@Base+0x1614>
    85d2:	lea    rdi,[rip+0x233b8]        # 2b991 <_fini@@Base+0x270d>
    85d9:	sub    rsp,0x8
    85dd:	mov    edx,0x62
    85e2:	call   7a70 <__assert_fail@plt>
    85e7:	nop    WORD PTR [rax+rax*1+0x0]
    85f0:	push   r14
    85f2:	push   r13
    85f4:	push   r12
    85f6:	push   rbp
    85f7:	mov    r12d,edi
    85fa:	push   rbx
    85fb:	lea    rdi,[rip+0x21006]        # 29608 <_fini@@Base+0x384>
    8602:	lea    rbx,[rip+0x2137b]        # 29984 <_fini@@Base+0x700>
    8609:	mov    rbp,rsi
    860c:	sub    rsp,0x2260
    8613:	mov    rax,QWORD PTR fs:0x28
    861c:	mov    QWORD PTR [rsp+0x2258],rax
    8624:	xor    eax,eax
    8626:	lea    rax,[rip+0x20ef3]        # 29520 <_fini@@Base+0x29c>
    862d:	lea    r14,[rsp+0x10]
    8632:	lea    r13,[rsp+0x48]
    8637:	mov    BYTE PTR [rsp+0x20],0x0
    863c:	mov    BYTE PTR [rsp+0x21],0x0
    8641:	mov    QWORD PTR [rsp+0x28],rax
    8646:	lea    rax,[rip+0x20eef]        # 2953c <_fini@@Base+0x2b8>
    864d:	mov    BYTE PTR [rsp+0x40],0x1
    8652:	mov    QWORD PTR [rsp+0x48],0x400000
    865b:	mov    DWORD PTR [rsp+0x50],0x1
    8663:	mov    QWORD PTR [rsp+0x30],rax
    8668:	lea    rax,[rip+0x20ee1]        # 29550 <_fini@@Base+0x2cc>
    866f:	mov    QWORD PTR [rsp+0x38],rax
    8674:	call   7a00 <puts@plt>
    8679:	mov    QWORD PTR [rsp+0x18],0x0
    8682:	nop    WORD PTR [rax+rax*1+0x0]
    8688:	lea    rdx,[rip+0x20eea]        # 29579 <_fini@@Base+0x2f5>
    868f:	mov    rsi,rbp
    8692:	mov    edi,r12d
    8695:	call   7ab0 <getopt@plt>
    869a:	cmp    eax,0xffffffff
    869d:	je     87d2 <g_str_equal@plt+0x41a>
    86a3:	lea    edx,[rax-0x46]
    86a6:	cmp    edx,0x30
    86a9:	ja     8a36 <g_str_equal@plt+0x67e>
    86af:	movsxd rdx,DWORD PTR [rbx+rdx*4]
    86b3:	add    rdx,rbx
    86b6:	jmp    rdx
    86b8:	nop    DWORD PTR [rax+rax*1+0x0]
    86c0:	mov    BYTE PTR [rsp+0x20],0x1
    86c5:	jmp    8688 <g_str_equal@plt+0x2d0>
    86c7:	nop    WORD PTR [rax+rax*1+0x0]
    86d0:	mov    rax,QWORD PTR [rip+0x2375a9]        # 23fc80 <optarg@@GLIBC_2.2.5>
    86d7:	mov    QWORD PTR [rsp+0x28],rax
    86dc:	jmp    8688 <g_str_equal@plt+0x2d0>
    86de:	xchg   ax,ax
    86e0:	mov    rdi,QWORD PTR [rip+0x237599]        # 23fc80 <optarg@@GLIBC_2.2.5>
    86e7:	xor    edx,edx
    86e9:	mov    rsi,r14
    86ec:	call   b230 <g_str_equal@plt+0x2e78>
    86f1:	test   eax,eax
    86f3:	js     8b37 <g_str_equal@plt+0x77f>
    86f9:	mov    rax,QWORD PTR [rsp+0x10]
    86fe:	mov    DWORD PTR [rsp+0x50],eax
    8702:	jmp    8688 <g_str_equal@plt+0x2d0>
    8704:	nop    DWORD PTR [rax+0x0]
    8708:	mov    rsi,QWORD PTR [rip+0x237571]        # 23fc80 <optarg@@GLIBC_2.2.5>
    870f:	lea    rdi,[rip+0x20e42]        # 29558 <_fini@@Base+0x2d4>
    8716:	lea    rcx,[rsp+0x18]
    871b:	mov    rdx,r13
    871e:	call   ecf0 <g_str_equal@plt+0x6938>
    8723:	mov    rdi,QWORD PTR [rsp+0x18]
    8728:	test   rdi,rdi
    872b:	je     8688 <g_str_equal@plt+0x2d0>
    8731:	call   d8a0 <g_str_equal@plt+0x54e8>
    8736:	mov    rdi,QWORD PTR [rip+0x237563]        # 23fca0 <stderr@@GLIBC_2.2.5>
    873d:	mov    rcx,QWORD PTR [rbp+0x0]
    8741:	lea    rdx,[rip+0x21148]        # 29890 <_fini@@Base+0x60c>
    8748:	mov    esi,0x1
    874d:	xor    eax,eax
    874f:	call   79e0 <__fprintf_chk@plt>
    8754:	mov    edi,0x1
    8759:	call   7a40 <exit@plt>
    875e:	xchg   ax,ax
    8760:	mov    rdx,QWORD PTR [rbp+0x0]
    8764:	lea    rsi,[rip+0x20ecd]        # 29638 <_fini@@Base+0x3b4>
    876b:	mov    edi,0x1
    8770:	mov    r8d,0x1
    8776:	mov    ecx,0x400000
    877b:	xor    eax,eax
    877d:	call   7a80 <__printf_chk@plt>
    8782:	xor    edi,edi
    8784:	call   7a40 <exit@plt>
    8789:	nop    DWORD PTR [rax+0x0]
    8790:	mov    rax,QWORD PTR [rip+0x2374e9]        # 23fc80 <optarg@@GLIBC_2.2.5>
    8797:	mov    QWORD PTR [rsp+0x30],rax
    879c:	jmp    8688 <g_str_equal@plt+0x2d0>
    87a1:	nop    DWORD PTR [rax+0x0]
    87a8:	mov    rdx,QWORD PTR [rip+0x2374d1]        # 23fc80 <optarg@@GLIBC_2.2.5>
    87af:	cmp    eax,0x4d
    87b2:	sete   BYTE PTR [rsp+0x40]
    87b7:	mov    QWORD PTR [rsp+0x38],rdx
    87bc:	jmp    8688 <g_str_equal@plt+0x2d0>
    87c1:	nop    DWORD PTR [rax+0x0]
    87c8:	mov    BYTE PTR [rsp+0x21],0x1
    87cd:	jmp    8688 <g_str_equal@plt+0x2d0>
    87d2:	cmp    DWORD PTR [rsp+0x50],0x40
    87d7:	ja     8b73 <g_str_equal@plt+0x7bb>
    87dd:	cmp    BYTE PTR [rsp+0x20],0x0
    87e2:	je     87ef <g_str_equal@plt+0x437>
    87e4:	cmp    BYTE PTR [rsp+0x21],0x0
    87e9:	je     8b59 <g_str_equal@plt+0x7a1>
    87ef:	lea    rbx,[rsp+0xe0]
    87f7:	mov    QWORD PTR [rsp+0xe0],0x1
    8803:	mov    DWORD PTR [rsp+0x168],0x0
    880e:	lea    rdi,[rbx+0x8]
    8812:	call   81d0 <sigemptyset@plt>
    8817:	add    eax,0x1
    881a:	je     89eb <g_str_equal@plt+0x633>
    8820:	xor    edx,edx
    8822:	mov    rsi,rbx
    8825:	mov    edi,0xd
    882a:	call   7ec0 <sigaction@plt>
    882f:	add    eax,0x1
    8832:	je     89eb <g_str_equal@plt+0x633>
    8838:	lea    rbx,[rsp+0x180]
    8840:	lea    rax,[rip+0x1379]        # 9bc0 <g_str_equal@plt+0x1808>
    8847:	mov    DWORD PTR [rsp+0x208],0x0
    8852:	lea    rdi,[rbx+0x8]
    8856:	mov    QWORD PTR [rsp+0x180],rax
    885e:	call   81d0 <sigemptyset@plt>
    8863:	add    eax,0x1
    8866:	je     8a23 <g_str_equal@plt+0x66b>
    886c:	xor    edx,edx
    886e:	mov    rsi,rbx
    8871:	mov    edi,0xf
    8876:	call   7ec0 <sigaction@plt>
    887b:	add    eax,0x1
    887e:	je     8a23 <g_str_equal@plt+0x66b>
    8884:	movzx  ecx,BYTE PTR [rsp+0x40]
    8889:	lea    rbp,[rsp+0x220]
    8891:	sub    rsp,0x8
    8895:	movzx  eax,BYTE PTR [rsp+0x28]
    889a:	mov    rdi,rbp
    889d:	push   rax
    889e:	mov    r9d,DWORD PTR [rsp+0x60]
    88a3:	mov    r8,QWORD PTR [rsp+0x58]
    88a8:	mov    rdx,QWORD PTR [rsp+0x48]
    88ad:	mov    rsi,QWORD PTR [rsp+0x40]
    88b2:	call   8f20 <g_str_equal@plt+0xb68>
    88b7:	test   eax,eax
    88b9:	pop    rdx
    88ba:	pop    rcx
    88bb:	js     8a99 <g_str_equal@plt+0x6e1>
    88c1:	mov    rdi,rbp
    88c4:	call   9040 <g_str_equal@plt+0xc88>
    88c9:	test   eax,eax
    88cb:	js     8ac0 <g_str_equal@plt+0x708>
    88d1:	cmp    BYTE PTR [rsp+0x21],0x0
    88d6:	jne    8931 <g_str_equal@plt+0x579>
    88d8:	mov    esi,0x1
    88dd:	mov    edi,0x1
    88e2:	call   b9a0 <g_str_equal@plt+0x35e8>
    88e7:	test   eax,eax
    88e9:	js     8ae7 <g_str_equal@plt+0x72f>
    88ef:	mov    rdi,QWORD PTR [rsp+0x28]
    88f4:	lea    rsi,[rip+0x244e8]        # 2cde3 <_fini@@Base+0x3b5f>
    88fb:	call   8210 <fopen64@plt>
    8900:	test   rax,rax
    8903:	mov    rbx,rax
    8906:	je     8b1a <g_str_equal@plt+0x762>
    890c:	call   7bf0 <getpid@plt>
    8911:	lea    rdx,[rip+0x20a88]        # 293a0 <_fini@@Base+0x11c>
    8918:	mov    ecx,eax
    891a:	mov    rdi,rbx
    891d:	mov    esi,0x1
    8922:	xor    eax,eax
    8924:	call   79e0 <__fprintf_chk@plt>
    8929:	mov    rdi,rbx
    892c:	call   8110 <fclose@plt>
    8931:	lea    rbx,[rsp+0x60]
    8936:	lea    r14,[rsp+0x18]
    893b:	xor    r12d,r12d
    893e:	mov    r13d,0x10
    8944:	cmp    DWORD PTR [rip+0x237369],0x0        # 23fcb4 <stdout@@GLIBC_2.2.5+0xc>
    894b:	jne    89ba <g_str_equal@plt+0x602>
    894d:	mov    rcx,r13
    8950:	mov    rdi,rbx
    8953:	mov    eax,r12d
    8956:	cld    
    8957:	rep stos QWORD PTR es:[rdi],rax
    895a:	mov    rdx,r14
    895d:	mov    rsi,rbx
    8960:	mov    rdi,rbp
    8963:	mov    DWORD PTR [rsp+0x18],r12d
    8968:	call   9490 <g_str_equal@plt+0x10d8>
    896d:	mov    edi,DWORD PTR [rsp+0x18]
    8971:	xor    r8d,r8d
    8974:	xor    ecx,ecx
    8976:	xor    edx,edx
    8978:	mov    rsi,rbx
    897b:	call   7a30 <select@plt>
    8980:	test   eax,eax
    8982:	js     8a62 <g_str_equal@plt+0x6aa>
    8988:	je     8944 <g_str_equal@plt+0x58c>
    898a:	mov    edx,DWORD PTR [rsp+0x18]
    898e:	mov    rsi,rbx
    8991:	mov    rdi,rbp
    8994:	call   9570 <g_str_equal@plt+0x11b8>
    8999:	test   eax,eax
    899b:	jns    8944 <g_str_equal@plt+0x58c>
    899d:	mov    rcx,QWORD PTR [rip+0x2372fc]        # 23fca0 <stderr@@GLIBC_2.2.5>
    89a4:	lea    rdi,[rip+0x20fb5]        # 29960 <_fini@@Base+0x6dc>
    89ab:	mov    edx,0x23
    89b0:	mov    esi,0x1
    89b5:	call   8240 <fwrite@plt>
    89ba:	mov    rcx,QWORD PTR [rip+0x2372e7]        # 23fca8 <stdout@@GLIBC_2.2.5>
    89c1:	lea    rdi,[rip+0x20c25]        # 295ed <_fini@@Base+0x369>
    89c8:	mov    edx,0x14
    89cd:	mov    esi,0x1
    89d2:	call   8240 <fwrite@plt>
    89d7:	xor    eax,eax
    89d9:	mov    rdi,rbp
    89dc:	mov    DWORD PTR [rsp+0xc],eax
    89e0:	call   9410 <g_str_equal@plt+0x1058>
    89e5:	mov    eax,DWORD PTR [rsp+0xc]
    89e9:	jmp    89fc <g_str_equal@plt+0x644>
    89eb:	lea    rdi,[rip+0x20f16]        # 29908 <_fini@@Base+0x684>
    89f2:	call   8260 <perror@plt>
    89f7:	mov    eax,0x1
    89fc:	mov    rcx,QWORD PTR [rsp+0x2258]
    8a04:	xor    rcx,QWORD PTR fs:0x28
    8a0d:	jne    8b32 <g_str_equal@plt+0x77a>
    8a13:	add    rsp,0x2260
    8a1a:	pop    rbx
    8a1b:	pop    rbp
    8a1c:	pop    r12
    8a1e:	pop    r13
    8a20:	pop    r14
    8a22:	ret    
    8a23:	lea    rdi,[rip+0x20f06]        # 29930 <_fini@@Base+0x6ac>
    8a2a:	call   8260 <perror@plt>
    8a2f:	mov    eax,0x1
    8a34:	jmp    89fc <g_str_equal@plt+0x644>
    8a36:	mov    rdx,QWORD PTR [rbp+0x0]
    8a3a:	lea    rsi,[rip+0x20bf7]        # 29638 <_fini@@Base+0x3b4>
    8a41:	mov    edi,0x1
    8a46:	mov    r8d,0x1
    8a4c:	mov    ecx,0x400000
    8a51:	xor    eax,eax
    8a53:	call   7a80 <__printf_chk@plt>
    8a58:	mov    edi,0x1
    8a5d:	call   7a40 <exit@plt>
    8a62:	call   7fd0 <__errno_location@plt>
    8a67:	mov    edi,DWORD PTR [rax]
    8a69:	cmp    edi,0x4
    8a6c:	je     8944 <g_str_equal@plt+0x58c>
    8a72:	call   7e90 <strerror@plt>
    8a77:	mov    rdi,QWORD PTR [rip+0x237222]        # 23fca0 <stderr@@GLIBC_2.2.5>
    8a7e:	lea    rdx,[rip+0x20b56]        # 295db <_fini@@Base+0x357>
    8a85:	mov    rcx,rax
    8a88:	mov    esi,0x1
    8a8d:	xor    eax,eax
    8a8f:	call   79e0 <__fprintf_chk@plt>
    8a94:	jmp    89ba <g_str_equal@plt+0x602>
    8a99:	mov    rcx,QWORD PTR [rip+0x237200]        # 23fca0 <stderr@@GLIBC_2.2.5>
    8aa0:	lea    rdi,[rip+0x20ae2]        # 29589 <_fini@@Base+0x305>
    8aa7:	mov    edx,0x13
    8aac:	mov    esi,0x1
    8ab1:	call   8240 <fwrite@plt>
    8ab6:	mov    eax,0x1
    8abb:	jmp    89fc <g_str_equal@plt+0x644>
    8ac0:	mov    rcx,QWORD PTR [rip+0x2371d9]        # 23fca0 <stderr@@GLIBC_2.2.5>
    8ac7:	lea    rdi,[rip+0x20acf]        # 2959d <_fini@@Base+0x319>
    8ace:	mov    edx,0xc
    8ad3:	mov    esi,0x1
    8ad8:	call   8240 <fwrite@plt>
    8add:	mov    eax,0x1
    8ae2:	jmp    89fc <g_str_equal@plt+0x644>
    8ae7:	call   7fd0 <__errno_location@plt>
    8aec:	mov    edi,DWORD PTR [rax]
    8aee:	call   7e90 <strerror@plt>
    8af3:	lea    rdx,[rip+0x20ab0]        # 295aa <_fini@@Base+0x326>
    8afa:	mov    rcx,rax
    8afd:	mov    rdi,QWORD PTR [rip+0x23719c]        # 23fca0 <stderr@@GLIBC_2.2.5>
    8b04:	mov    esi,0x1
    8b09:	xor    eax,eax
    8b0b:	call   79e0 <__fprintf_chk@plt>
    8b10:	mov    eax,0x1
    8b15:	jmp    89d9 <g_str_equal@plt+0x621>
    8b1a:	call   7fd0 <__errno_location@plt>
    8b1f:	mov    edi,DWORD PTR [rax]
    8b21:	call   7e90 <strerror@plt>
    8b26:	lea    rdx,[rip+0x20a93]        # 295c0 <_fini@@Base+0x33c>
    8b2d:	mov    rcx,rax
    8b30:	jmp    8afd <g_str_equal@plt+0x745>
    8b32:	call   8050 <__stack_chk_fail@plt>
    8b37:	mov    rcx,QWORD PTR [rip+0x237162]        # 23fca0 <stderr@@GLIBC_2.2.5>
    8b3e:	lea    rdi,[rip+0x20a1c]        # 29561 <_fini@@Base+0x2dd>
    8b45:	mov    edx,0x17
    8b4a:	mov    esi,0x1
    8b4f:	call   8240 <fwrite@plt>
    8b54:	jmp    8736 <g_str_equal@plt+0x37e>
    8b59:	mov    rcx,QWORD PTR [rip+0x237140]        # 23fca0 <stderr@@GLIBC_2.2.5>
    8b60:	mov    edx,0x22
    8b65:	mov    esi,0x1
    8b6a:	lea    rdi,[rip+0x20d6f]        # 298e0 <_fini@@Base+0x65c>
    8b71:	jmp    8b4f <g_str_equal@plt+0x797>
    8b73:	mov    rdi,QWORD PTR [rip+0x237126]        # 23fca0 <stderr@@GLIBC_2.2.5>
    8b7a:	lea    rdx,[rip+0x20d37]        # 298b8 <_fini@@Base+0x634>
    8b81:	mov    ecx,0x40
    8b86:	mov    esi,0x1
    8b8b:	xor    eax,eax
    8b8d:	call   79e0 <__fprintf_chk@plt>
    8b92:	jmp    8736 <g_str_equal@plt+0x37e>
    8b97:	nop    WORD PTR [rax+rax*1+0x0]
    8ba0:	lea    rsi,[rip+0x3b19]        # c6c0 <g_str_equal@plt+0x4308>
    8ba7:	lea    rdi,[rip+0x238142]        # 240cf0 <stdout@@GLIBC_2.2.5+0x1048>
    8bae:	jmp    8290 <pthread_key_create@plt>
    8bb3:	nop    WORD PTR cs:[rax+rax*1+0x0]
    8bbd:	nop    DWORD PTR [rax]
    8bc0:	sub    rsp,0x8
    8bc4:	call   7e00 <getpagesize@plt>
    8bc9:	cdqe   
    8bcb:	mov    QWORD PTR [rip+0x2391b6],rax        # 241d88 <stdout@@GLIBC_2.2.5+0x20e0>
    8bd2:	neg    rax
    8bd5:	mov    QWORD PTR [rip+0x2391a4],rax        # 241d80 <stdout@@GLIBC_2.2.5+0x20d8>
    8bdc:	add    rsp,0x8
    8be0:	ret    
    8be1:	nop    WORD PTR cs:[rax+rax*1+0x0]
    8beb:	nop    DWORD PTR [rax+rax*1+0x0]
    8bf0:	lea    rdi,[rip+0x8839]        # 11430 <g_str_equal@plt+0x9078>
    8bf7:	mov    esi,0x3
    8bfc:	jmp    135e0 <g_str_equal@plt+0xb228>
    8c01:	nop    WORD PTR cs:[rax+rax*1+0x0]
    8c0b:	nop    DWORD PTR [rax+rax*1+0x0]
    8c10:	lea    rdi,[rip+0xbbf9]        # 14810 <g_str_equal@plt+0xc458>
    8c17:	mov    esi,0x3
    8c1c:	jmp    135e0 <g_str_equal@plt+0xb228>
    8c21:	nop    WORD PTR cs:[rax+rax*1+0x0]
    8c2b:	nop    DWORD PTR [rax+rax*1+0x0]
    8c30:	lea    rdi,[rip+0x1ab19]        # 23750 <g_str_equal@plt+0x1b398>
    8c37:	mov    esi,0x3
    8c3c:	jmp    135e0 <g_str_equal@plt+0xb228>
    8c41:	nop    WORD PTR cs:[rax+rax*1+0x0]
    8c4b:	nop    DWORD PTR [rax+rax*1+0x0]
    8c50:	xor    ebp,ebp
    8c52:	mov    r9,rdx
    8c55:	pop    rsi
    8c56:	mov    rdx,rsp
    8c59:	and    rsp,0xfffffffffffffff0
    8c5d:	push   rax
    8c5e:	push   rsp
    8c5f:	lea    r8,[rip+0x2061a]        # 29280 <g_str_equal@plt+0x20ec8>
    8c66:	lea    rcx,[rip+0x205a3]        # 29210 <g_str_equal@plt+0x20e58>
    8c6d:	lea    rdi,[rip+0xfffffffffffff97c]        # 85f0 <g_str_equal@plt+0x238>
    8c74:	call   QWORD PTR [rip+0x235346]        # 23dfc0 <__libc_start_main@GLIBC_2.2.5>
    8c7a:	hlt    
    8c7b:	nop    DWORD PTR [rax+rax*1+0x0]
    8c80:	lea    rdi,[rip+0x236ff9]        # 23fc80 <optarg@@GLIBC_2.2.5>
    8c87:	push   rbp
    8c88:	lea    rax,[rip+0x236ff1]        # 23fc80 <optarg@@GLIBC_2.2.5>
    8c8f:	cmp    rax,rdi
    8c92:	mov    rbp,rsp
    8c95:	je     8cb0 <g_str_equal@plt+0x8f8>
    8c97:	mov    rax,QWORD PTR [rip+0x23532a]        # 23dfc8 <_ITM_deregisterTMCloneTable>
    8c9e:	test   rax,rax
    8ca1:	je     8cb0 <g_str_equal@plt+0x8f8>
    8ca3:	pop    rbp
    8ca4:	jmp    rax
    8ca6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    8cb0:	pop    rbp
    8cb1:	ret    
    8cb2:	nop    DWORD PTR [rax+0x0]
    8cb6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    8cc0:	lea    rdi,[rip+0x236fb9]        # 23fc80 <optarg@@GLIBC_2.2.5>
    8cc7:	lea    rsi,[rip+0x236fb2]        # 23fc80 <optarg@@GLIBC_2.2.5>
    8cce:	push   rbp
    8ccf:	sub    rsi,rdi
    8cd2:	mov    rbp,rsp
    8cd5:	sar    rsi,0x3
    8cd9:	mov    rax,rsi
    8cdc:	shr    rax,0x3f
    8ce0:	add    rsi,rax
    8ce3:	sar    rsi,1
    8ce6:	je     8d00 <g_str_equal@plt+0x948>
    8ce8:	mov    rax,QWORD PTR [rip+0x2352e1]        # 23dfd0 <_ITM_registerTMCloneTable>
    8cef:	test   rax,rax
    8cf2:	je     8d00 <g_str_equal@plt+0x948>
    8cf4:	pop    rbp
    8cf5:	jmp    rax
    8cf7:	nop    WORD PTR [rax+rax*1+0x0]
    8d00:	pop    rbp
    8d01:	ret    
    8d02:	nop    DWORD PTR [rax+0x0]
    8d06:	nop    WORD PTR cs:[rax+rax*1+0x0]
    8d10:	cmp    BYTE PTR [rip+0x236f99],0x0        # 23fcb0 <stdout@@GLIBC_2.2.5+0x8>
    8d17:	jne    8d48 <g_str_equal@plt+0x990>
    8d19:	cmp    QWORD PTR [rip+0x2352b7],0x0        # 23dfd8 <__cxa_finalize@GLIBC_2.2.5>
    8d21:	push   rbp
    8d22:	mov    rbp,rsp
    8d25:	je     8d33 <g_str_equal@plt+0x97b>
    8d27:	mov    rdi,QWORD PTR [rip+0x2352da]        # 23e008 <g_test_config_vars+0x8e8>
    8d2e:	call   83b0 <__cxa_finalize@plt>
    8d33:	call   8c80 <g_str_equal@plt+0x8c8>
    8d38:	mov    BYTE PTR [rip+0x236f71],0x1        # 23fcb0 <stdout@@GLIBC_2.2.5+0x8>
    8d3f:	pop    rbp
    8d40:	ret    
    8d41:	nop    DWORD PTR [rax+0x0]
    8d48:	repz ret 
    8d4a:	nop    WORD PTR [rax+rax*1+0x0]
    8d50:	push   rbp
    8d51:	mov    rbp,rsp
    8d54:	pop    rbp
    8d55:	jmp    8cc0 <g_str_equal@plt+0x908>
    8d5a:	nop    WORD PTR [rax+rax*1+0x0]
    8d60:	sub    rsp,0x88
    8d67:	pxor   xmm0,xmm0
    8d6b:	mov    rax,QWORD PTR fs:0x28
    8d74:	mov    QWORD PTR [rsp+0x78],rax
    8d79:	xor    eax,eax
    8d7b:	lea    rax,[rsp+0x8]
    8d80:	test   edx,edx
    8d82:	mov    QWORD PTR [rsp+0x8],rsi
    8d87:	mov    QWORD PTR [rsp+0x58],0x8
    8d90:	mov    QWORD PTR [rsp+0x40],0x0
    8d99:	mov    QWORD PTR [rsp+0x50],rax
    8d9e:	lea    rax,[rsp+0x50]
    8da3:	mov    QWORD PTR [rsp+0x28],0x1
    8dac:	movaps XMMWORD PTR [rsp+0x10],xmm0
    8db1:	mov    QWORD PTR [rsp+0x20],rax
    8db6:	movaps XMMWORD PTR [rsp+0x30],xmm0
    8dbb:	js     8df4 <g_str_equal@plt+0xa3c>
    8dbd:	lea    rax,[rsp+0x60]
    8dc2:	mov    QWORD PTR [rsp+0x30],rax
    8dc7:	movabs rax,0x100000001
    8dd1:	mov    DWORD PTR [rsp+0x74],0x0
    8dd9:	mov    QWORD PTR [rsp+0x38],0x18
    8de2:	mov    QWORD PTR [rsp+0x60],0x14
    8deb:	mov    QWORD PTR [rsp+0x68],rax
    8df0:	mov    DWORD PTR [rsp+0x70],edx
    8df4:	lea    rsi,[rsp+0x10]
    8df9:	xor    edx,edx
    8dfb:	call   7e60 <sendmsg@plt>
    8e00:	test   eax,eax
    8e02:	setle  al
    8e05:	movzx  eax,al
    8e08:	neg    eax
    8e0a:	mov    rcx,QWORD PTR [rsp+0x78]
    8e0f:	xor    rcx,QWORD PTR fs:0x28
    8e18:	jne    8e22 <g_str_equal@plt+0xa6a>
    8e1a:	add    rsp,0x88
    8e21:	ret    
    8e22:	call   8050 <__stack_chk_fail@plt>
    8e27:	nop    WORD PTR [rax+rax*1+0x0]
    8e30:	push   r12
    8e32:	push   rbp
    8e33:	mov    rbp,rdi
    8e36:	push   rbx
    8e37:	cmp    BYTE PTR [rdi+0x201a],0x0
    8e3e:	mov    rbx,rsi
    8e41:	jne    8ee0 <g_str_equal@plt+0xb28>
    8e47:	mov    edi,DWORD PTR [rbx+0x10]
    8e4a:	call   79a0 <close@plt>
    8e4f:	mov    rax,QWORD PTR [rbx]
    8e52:	test   rax,rax
    8e55:	je     8f0b <g_str_equal@plt+0xb53>
    8e5b:	mov    rdx,QWORD PTR [rbx+0x8]
    8e5f:	mov    QWORD PTR [rax+0x8],rdx
    8e63:	mov    rax,QWORD PTR [rbx+0x8]
    8e67:	mov    rdx,QWORD PTR [rbx]
    8e6a:	mov    QWORD PTR [rax],rdx
    8e6d:	mov    QWORD PTR [rbx+0x8],0x0
    8e75:	mov    rbp,QWORD PTR [rbp+0x2020]
    8e7c:	test   rbp,rbp
    8e7f:	je     8ea8 <g_str_equal@plt+0xaf0>
    8e81:	mov    r12d,0xffffffff
    8e87:	nop    WORD PTR [rax+rax*1+0x0]
    8e90:	mov    edi,DWORD PTR [rbp+0x10]
    8e93:	mov    rsi,QWORD PTR [rbx+0x18]
    8e97:	mov    edx,r12d
    8e9a:	call   8d60 <g_str_equal@plt+0x9a8>
    8e9f:	mov    rbp,QWORD PTR [rbp+0x0]
    8ea3:	test   rbp,rbp
    8ea6:	jne    8e90 <g_str_equal@plt+0xad8>
    8ea8:	mov    eax,DWORD PTR [rbx+0x220]
    8eae:	test   eax,eax
    8eb0:	je     8ecf <g_str_equal@plt+0xb17>
    8eb2:	xor    ebp,ebp
    8eb4:	nop    DWORD PTR [rax+0x0]
    8eb8:	mov    eax,ebp
    8eba:	add    ebp,0x1
    8ebd:	lea    rdi,[rbx+rax*8+0x20]
    8ec2:	call   b5e0 <g_str_equal@plt+0x3228>
    8ec7:	cmp    DWORD PTR [rbx+0x220],ebp
    8ecd:	ja     8eb8 <g_str_equal@plt+0xb00>
    8ecf:	mov    rdi,rbx
    8ed2:	pop    rbx
    8ed3:	pop    rbp
    8ed4:	pop    r12
    8ed6:	jmp    7880 <g_free@plt>
    8edb:	nop    DWORD PTR [rax+rax*1+0x0]
    8ee0:	mov    rdx,QWORD PTR [rsi+0x18]
    8ee4:	lea    rsi,[rip+0x203b9]        # 292a4 <_fini@@Base+0x20>
    8eeb:	mov    edi,0x1
    8ef0:	xor    eax,eax
    8ef2:	call   7a80 <__printf_chk@plt>
    8ef7:	mov    edi,DWORD PTR [rbx+0x10]
    8efa:	call   79a0 <close@plt>
    8eff:	mov    rax,QWORD PTR [rbx]
    8f02:	test   rax,rax
    8f05:	jne    8e5b <g_str_equal@plt+0xaa3>
    8f0b:	mov    rax,QWORD PTR [rbx+0x8]
    8f0f:	mov    QWORD PTR [rbp+0x2028],rax
    8f16:	jmp    8e63 <g_str_equal@plt+0xaab>
    8f1b:	nop    DWORD PTR [rax+rax*1+0x0]
    8f20:	push   r15
    8f22:	push   r14
    8f24:	mov    r15,rsi
    8f27:	push   r13
    8f29:	push   r12
    8f2b:	xor    esi,esi
    8f2d:	push   rbp
    8f2e:	push   rbx
    8f2f:	mov    rbp,rdx
    8f32:	mov    edx,0x2030
    8f37:	mov    rbx,rdi
    8f3a:	mov    r14d,ecx
    8f3d:	sub    rsp,0x18
    8f41:	mov    r13,r8
    8f44:	mov    r12d,DWORD PTR [rsp+0x50]
    8f49:	mov    DWORD PTR [rsp+0xc],r9d
    8f4e:	call   7940 <memset@plt>
    8f53:	lea    rdx,[rip+0x25a00]        # 2e95a <_fini@@Base+0x56d6>
    8f5a:	xor    eax,eax
    8f5c:	mov    rcx,r15
    8f5f:	mov    BYTE PTR [rbx+0x201a],r12b
    8f66:	mov    esi,0x1000
    8f6b:	mov    rdi,rbx
    8f6e:	call   7960 <snprintf@plt>
    8f73:	cmp    eax,0xfff
    8f78:	jbe    8fb0 <g_str_equal@plt+0xbf8>
    8f7a:	cmp    BYTE PTR [rbx+0x201a],0x0
    8f81:	jne    8fa0 <g_str_equal@plt+0xbe8>
    8f83:	mov    eax,0xffffffff
    8f88:	add    rsp,0x18
    8f8c:	pop    rbx
    8f8d:	pop    rbp
    8f8e:	pop    r12
    8f90:	pop    r13
    8f92:	pop    r14
    8f94:	pop    r15
    8f96:	ret    
    8f97:	nop    WORD PTR [rax+rax*1+0x0]
    8fa0:	lea    rdi,[rip+0x204c9]        # 29470 <_fini@@Base+0x1ec>
    8fa7:	call   7a00 <puts@plt>
    8fac:	jmp    8f83 <g_str_equal@plt+0xbcb>
    8fae:	xchg   ax,ax
    8fb0:	lea    rdi,[rbx+0x1004]
    8fb7:	lea    rdx,[rip+0x2599c]        # 2e95a <_fini@@Base+0x56d6>
    8fbe:	xor    eax,eax
    8fc0:	mov    rcx,rbp
    8fc3:	mov    esi,0x1000
    8fc8:	call   7960 <snprintf@plt>
    8fcd:	cmp    eax,0xfff
    8fd2:	jbe    8ff0 <g_str_equal@plt+0xc38>
    8fd4:	cmp    BYTE PTR [rbx+0x201a],0x0
    8fdb:	je     8f83 <g_str_equal@plt+0xbcb>
    8fdd:	lea    rdi,[rip+0x202cf]        # 292b3 <_fini@@Base+0x2f>
    8fe4:	call   7a00 <puts@plt>
    8fe9:	mov    eax,0xffffffff
    8fee:	jmp    8f88 <g_str_equal@plt+0xbd0>
    8ff0:	mov    eax,DWORD PTR [rsp+0xc]
    8ff4:	mov    BYTE PTR [rbx+0x2004],r14b
    8ffb:	mov    QWORD PTR [rbx+0x2008],r13
    9002:	mov    QWORD PTR [rbx+0x2020],0x0
    900d:	mov    DWORD PTR [rbx+0x2014],eax
    9013:	lea    rax,[rbx+0x2020]
    901a:	mov    QWORD PTR [rbx+0x2028],rax
    9021:	add    rsp,0x18
    9025:	xor    eax,eax
    9027:	pop    rbx
    9028:	pop    rbp
    9029:	pop    r12
    902b:	pop    r13
    902d:	pop    r14
    902f:	pop    r15
    9031:	ret    
    9032:	nop    DWORD PTR [rax+0x0]
    9036:	nop    WORD PTR cs:[rax+rax*1+0x0]
    9040:	push   r15
    9042:	push   r14
    9044:	lea    r14,[rdi+0x1004]
    904b:	push   r13
    904d:	push   r12
    904f:	push   rbp
    9050:	push   rbx
    9051:	mov    rbp,rdi
    9054:	sub    rsp,0xa8
    905b:	mov    rax,QWORD PTR fs:0x28
    9064:	mov    QWORD PTR [rsp+0x98],rax
    906c:	xor    eax,eax
    906e:	cmp    BYTE PTR [rdi+0x2004],0x0
    9075:	je     9260 <g_str_equal@plt+0xea8>
    907b:	cmp    BYTE PTR [rdi+0x201a],0x0
    9082:	jne    91a0 <g_str_equal@plt+0xde8>
    9088:	mov    edx,0x1c0
    908d:	mov    esi,0x42
    9092:	mov    rdi,r14
    9095:	call   7b70 <shm_open@plt>
    909a:	mov    r12d,eax
    909d:	test   r12d,r12d
    90a0:	js     9392 <g_str_equal@plt+0xfda>
    90a6:	mov    eax,DWORD PTR [rbp+0x2008]
    90ac:	mov    rcx,rax
    90af:	sub    rcx,0x1
    90b3:	jne    9178 <g_str_equal@plt+0xdc0>
    90b9:	mov    ebx,0x1
    90be:	mov    r13d,0x1
    90c4:	mov    r15,rsp
    90c7:	mov    esi,r12d
    90ca:	mov    edi,0x1
    90cf:	mov    rdx,r15
    90d2:	call   7c60 <__fxstat64@plt>
    90d7:	cmp    eax,0xffffffff
    90da:	je     9104 <g_str_equal@plt+0xd4c>
    90dc:	mov    r13d,r13d
    90df:	cmp    QWORD PTR [rsp+0x30],r13
    90e4:	jne    9104 <g_str_equal@plt+0xd4c>
    90e6:	jmp    91c0 <g_str_equal@plt+0xe08>
    90eb:	nop    DWORD PTR [rax+rax*1+0x0]
    90f0:	mov    esi,ebx
    90f2:	mov    edi,r12d
    90f5:	call   7f10 <ftruncate64@plt>
    90fa:	test   eax,eax
    90fc:	je     91c0 <g_str_equal@plt+0xe08>
    9102:	add    ebx,ebx
    9104:	cmp    ebx,0x40000000
    910a:	jbe    90f0 <g_str_equal@plt+0xd38>
    910c:	call   7fd0 <__errno_location@plt>
    9111:	mov    edi,DWORD PTR [rax]
    9113:	call   7e90 <strerror@plt>
    9118:	mov    rdi,QWORD PTR [rip+0x236b81]        # 23fca0 <stderr@@GLIBC_2.2.5>
    911f:	lea    rdx,[rip+0x20236]        # 2935c <_fini@@Base+0xd8>
    9126:	mov    r8,rax
    9129:	mov    rcx,r14
    912c:	mov    esi,0x1
    9131:	xor    eax,eax
    9133:	call   79e0 <__fprintf_chk@plt>
    9138:	mov    edi,r12d
    913b:	call   79a0 <close@plt>
    9140:	mov    eax,0xffffffff
    9145:	nop    DWORD PTR [rax]
    9148:	mov    rdx,QWORD PTR [rsp+0x98]
    9150:	xor    rdx,QWORD PTR fs:0x28
    9159:	jne    93fc <g_str_equal@plt+0x1044>
    915f:	add    rsp,0xa8
    9166:	pop    rbx
    9167:	pop    rbp
    9168:	pop    r12
    916a:	pop    r13
    916c:	pop    r14
    916e:	pop    r15
    9170:	ret    
    9171:	nop    DWORD PTR [rax+0x0]
    9178:	bsr    rcx,rcx
    917c:	xor    rcx,0x3f
    9180:	test   ecx,ecx
    9182:	je     92c0 <g_str_equal@plt+0xf08>
    9188:	sub    ecx,0x1
    918b:	movabs r13,0x8000000000000000
    9195:	shr    r13,cl
    9198:	mov    ebx,r13d
    919b:	jmp    90c4 <g_str_equal@plt+0xd0c>
    91a0:	lea    rsi,[rip+0x202e9]        # 29490 <_fini@@Base+0x20c>
    91a7:	mov    rdx,r14
    91aa:	mov    edi,0x1
    91af:	call   7a80 <__printf_chk@plt>
    91b4:	jmp    9088 <g_str_equal@plt+0xcd0>
    91b9:	nop    DWORD PTR [rax+0x0]
    91c0:	cmp    BYTE PTR [rbp+0x201a],0x0
    91c7:	jne    92a0 <g_str_equal@plt+0xee8>
    91cd:	xor    edx,edx
    91cf:	mov    esi,0x1
    91d4:	mov    edi,0x1
    91d9:	call   7fa0 <socket@plt>
    91de:	test   eax,eax
    91e0:	mov    ebx,eax
    91e2:	js     9320 <g_str_equal@plt+0xf68>
    91e8:	lea    r13,[r15+0x2]
    91ec:	mov    eax,0x1
    91f1:	lea    rdx,[rip+0x25762]        # 2e95a <_fini@@Base+0x56d6>
    91f8:	mov    WORD PTR [rsp],ax
    91fc:	mov    rcx,rbp
    91ff:	xor    eax,eax
    9201:	mov    esi,0x6c
    9206:	mov    rdi,r13
    9209:	call   7960 <snprintf@plt>
    920e:	cmp    eax,0x6b
    9211:	jg     930b <g_str_equal@plt+0xf53>
    9217:	mov    edx,0x6e
    921c:	mov    rsi,r15
    921f:	mov    edi,ebx
    9221:	call   8230 <bind@plt>
    9226:	test   eax,eax
    9228:	js     9354 <g_str_equal@plt+0xf9c>
    922e:	mov    esi,0xa
    9233:	mov    edi,ebx
    9235:	call   7d50 <listen@plt>
    923a:	test   eax,eax
    923c:	js     93c8 <g_str_equal@plt+0x1010>
    9242:	mov    DWORD PTR [rbp+0x1000],ebx
    9248:	mov    DWORD PTR [rbp+0x2010],r12d
    924f:	xor    eax,eax
    9251:	jmp    9148 <g_str_equal@plt+0xd90>
    9256:	nop    WORD PTR cs:[rax+rax*1+0x0]
    9260:	lea    rdi,[rip+0x20064]        # 292cb <_fini@@Base+0x47>
    9267:	xor    eax,eax
    9269:	mov    rsi,r14
    926c:	call   7ce0 <g_strdup_printf@plt>
    9271:	cmp    BYTE PTR [rbp+0x201a],0x0
    9278:	mov    rbx,rax
    927b:	jne    92f0 <g_str_equal@plt+0xf38>
    927d:	mov    rdi,rbx
    9280:	call   7d40 <mkstemp64@plt>
    9285:	mov    rdi,rbx
    9288:	mov    r12d,eax
    928b:	call   7b20 <unlink@plt>
    9290:	mov    rdi,rbx
    9293:	call   7880 <g_free@plt>
    9298:	jmp    909d <g_str_equal@plt+0xce5>
    929d:	nop    DWORD PTR [rax]
    92a0:	lea    rsi,[rip+0x20053]        # 292fa <_fini@@Base+0x76>
    92a7:	mov    rdx,rbp
    92aa:	mov    edi,0x1
    92af:	xor    eax,eax
    92b1:	call   7a80 <__printf_chk@plt>
    92b6:	jmp    91cd <g_str_equal@plt+0xe15>
    92bb:	nop    DWORD PTR [rax+rax*1+0x0]
    92c0:	mov    r15,rsp
    92c3:	test   rax,rax
    92c6:	mov    esi,r12d
    92c9:	mov    rdx,r15
    92cc:	mov    edi,0x1
    92d1:	sete   bl
    92d4:	call   7c60 <__fxstat64@plt>
    92d9:	cmp    eax,0xffffffff
    92dc:	movzx  r13d,bl
    92e0:	movzx  ebx,bl
    92e3:	jne    90dc <g_str_equal@plt+0xd24>
    92e9:	jmp    90f0 <g_str_equal@plt+0xd38>
    92ee:	xchg   ax,ax
    92f0:	lea    rsi,[rip+0x201b9]        # 294b0 <_fini@@Base+0x22c>
    92f7:	mov    rdx,r14
    92fa:	mov    edi,0x1
    92ff:	xor    eax,eax
    9301:	call   7a80 <__printf_chk@plt>
    9306:	jmp    927d <g_str_equal@plt+0xec5>
    930b:	cmp    BYTE PTR [rbp+0x201a],0x0
    9312:	jne    9384 <g_str_equal@plt+0xfcc>
    9314:	mov    edi,ebx
    9316:	call   79a0 <close@plt>
    931b:	jmp    9138 <g_str_equal@plt+0xd80>
    9320:	cmp    BYTE PTR [rbp+0x201a],0x0
    9327:	je     9138 <g_str_equal@plt+0xd80>
    932d:	call   7fd0 <__errno_location@plt>
    9332:	mov    edi,DWORD PTR [rax]
    9334:	call   7e90 <strerror@plt>
    9339:	lea    rsi,[rip+0x1ffd3]        # 29313 <_fini@@Base+0x8f>
    9340:	mov    rdx,rax
    9343:	mov    edi,0x1
    9348:	xor    eax,eax
    934a:	call   7a80 <__printf_chk@plt>
    934f:	jmp    9138 <g_str_equal@plt+0xd80>
    9354:	cmp    BYTE PTR [rbp+0x201a],0x0
    935b:	je     9314 <g_str_equal@plt+0xf5c>
    935d:	call   7fd0 <__errno_location@plt>
    9362:	mov    edi,DWORD PTR [rax]
    9364:	call   7e90 <strerror@plt>
    9369:	lea    rsi,[rip+0x1ffbd]        # 2932d <_fini@@Base+0xa9>
    9370:	mov    rcx,rax
    9373:	mov    rdx,r13
    9376:	mov    edi,0x1
    937b:	xor    eax,eax
    937d:	call   7a80 <__printf_chk@plt>
    9382:	jmp    9314 <g_str_equal@plt+0xf5c>
    9384:	lea    rdi,[rip+0x200e5]        # 29470 <_fini@@Base+0x1ec>
    938b:	call   7a00 <puts@plt>
    9390:	jmp    9314 <g_str_equal@plt+0xf5c>
    9392:	call   7fd0 <__errno_location@plt>
    9397:	mov    edi,DWORD PTR [rax]
    9399:	call   7e90 <strerror@plt>
    939e:	mov    rdi,QWORD PTR [rip+0x2368fb]        # 23fca0 <stderr@@GLIBC_2.2.5>
    93a5:	lea    rdx,[rip+0x1ff31]        # 292dd <_fini@@Base+0x59>
    93ac:	mov    r8,rax
    93af:	mov    rcx,r14
    93b2:	mov    esi,0x1
    93b7:	xor    eax,eax
    93b9:	call   79e0 <__fprintf_chk@plt>
    93be:	mov    eax,0xffffffff
    93c3:	jmp    9148 <g_str_equal@plt+0xd90>
    93c8:	cmp    BYTE PTR [rbp+0x201a],0x0
    93cf:	je     9314 <g_str_equal@plt+0xf5c>
    93d5:	call   7fd0 <__errno_location@plt>
    93da:	mov    edi,DWORD PTR [rax]
    93dc:	call   7e90 <strerror@plt>
    93e1:	lea    rsi,[rip+0x1ff5f]        # 29347 <_fini@@Base+0xc3>
    93e8:	mov    rdx,rax
    93eb:	mov    edi,0x1
    93f0:	xor    eax,eax
    93f2:	call   7a80 <__printf_chk@plt>
    93f7:	jmp    9314 <g_str_equal@plt+0xf5c>
    93fc:	call   8050 <__stack_chk_fail@plt>
    9401:	nop    DWORD PTR [rax+rax*1+0x0]
    9406:	nop    WORD PTR cs:[rax+rax*1+0x0]
    9410:	push   rbp
    9411:	push   rbx
    9412:	mov    rbx,rdi
    9415:	sub    rsp,0x8
    9419:	cmp    BYTE PTR [rdi+0x201a],0x0
    9420:	jne    9480 <g_str_equal@plt+0x10c8>
    9422:	mov    rsi,QWORD PTR [rbx+0x2020]
    9429:	test   rsi,rsi
    942c:	je     9443 <g_str_equal@plt+0x108b>
    942e:	xchg   ax,ax
    9430:	mov    rbp,QWORD PTR [rsi]
    9433:	mov    rdi,rbx
    9436:	call   8e30 <g_str_equal@plt+0xa78>
    943b:	test   rbp,rbp
    943e:	mov    rsi,rbp
    9441:	jne    9430 <g_str_equal@plt+0x1078>
    9443:	mov    rdi,rbx
    9446:	call   7b20 <unlink@plt>
    944b:	mov    edi,DWORD PTR [rbx+0x1000]
    9451:	call   79a0 <close@plt>
    9456:	mov    edi,DWORD PTR [rbx+0x2010]
    945c:	call   79a0 <close@plt>
    9461:	mov    DWORD PTR [rbx+0x1000],0xffffffff
    946b:	mov    DWORD PTR [rbx+0x2010],0xffffffff
    9475:	add    rsp,0x8
    9479:	pop    rbx
    947a:	pop    rbp
    947b:	ret    
    947c:	nop    DWORD PTR [rax+0x0]
    9480:	lea    rdi,[rip+0x1feef]        # 29376 <_fini@@Base+0xf2>
    9487:	call   7a00 <puts@plt>
    948c:	jmp    9422 <g_str_equal@plt+0x106a>
    948e:	xchg   ax,ax
    9490:	mov    eax,DWORD PTR [rdi+0x1000]
    9496:	cmp    eax,0xffffffff
    9499:	je     9560 <g_str_equal@plt+0x11a8>
    949f:	push   r13
    94a1:	push   r12
    94a3:	mov    r13,rsi
    94a6:	push   rbp
    94a7:	push   rbx
    94a8:	mov    rbp,rdi
    94ab:	movsxd rdi,eax
    94ae:	mov    rbx,rdx
    94b1:	sub    rsp,0x8
    94b5:	call   8360 <__fdelt_chk@plt>
    94ba:	mov    edx,DWORD PTR [rbp+0x1000]
    94c0:	mov    esi,edx
    94c2:	sar    esi,0x1f
    94c5:	shr    esi,0x1a
    94c8:	lea    ecx,[rdx+rsi*1]
    94cb:	mov    edx,0x1
    94d0:	and    ecx,0x3f
    94d3:	sub    ecx,esi
    94d5:	shl    rdx,cl
    94d8:	or     QWORD PTR [r13+rax*8+0x0],rdx
    94dd:	mov    eax,DWORD PTR [rbp+0x1000]
    94e3:	cmp    eax,DWORD PTR [rbx]
    94e5:	jge    9550 <g_str_equal@plt+0x1198>
    94e7:	mov    r12,QWORD PTR [rbp+0x2020]
    94ee:	test   r12,r12
    94f1:	je     9540 <g_str_equal@plt+0x1188>
    94f3:	mov    ebp,0x1
    94f8:	nop    DWORD PTR [rax+rax*1+0x0]
    9500:	movsxd rdi,DWORD PTR [r12+0x10]
    9505:	call   8360 <__fdelt_chk@plt>
    950a:	mov    ecx,DWORD PTR [r12+0x10]
    950f:	mov    edx,ecx
    9511:	sar    edx,0x1f
    9514:	shr    edx,0x1a
    9517:	add    ecx,edx
    9519:	and    ecx,0x3f
    951c:	sub    ecx,edx
    951e:	mov    rdx,rbp
    9521:	shl    rdx,cl
    9524:	or     QWORD PTR [r13+rax*8+0x0],rdx
    9529:	mov    eax,DWORD PTR [r12+0x10]
    952e:	cmp    eax,DWORD PTR [rbx]
    9530:	jl     9537 <g_str_equal@plt+0x117f>
    9532:	add    eax,0x1
    9535:	mov    DWORD PTR [rbx],eax
    9537:	mov    r12,QWORD PTR [r12]
    953b:	test   r12,r12
    953e:	jne    9500 <g_str_equal@plt+0x1148>
    9540:	add    rsp,0x8
    9544:	pop    rbx
    9545:	pop    rbp
    9546:	pop    r12
    9548:	pop    r13
    954a:	ret    
    954b:	nop    DWORD PTR [rax+rax*1+0x0]
    9550:	add    eax,0x1
    9553:	mov    DWORD PTR [rbx],eax
    9555:	jmp    94e7 <g_str_equal@plt+0x112f>
    9557:	nop    WORD PTR [rax+rax*1+0x0]
    9560:	repz ret 
    9562:	nop    DWORD PTR [rax+0x0]
    9566:	nop    WORD PTR cs:[rax+rax*1+0x0]
    9570:	push   r15
    9572:	push   r14
    9574:	mov    r14,rsi
    9577:	push   r13
    9579:	push   r12
    957b:	mov    r13d,edx
    957e:	push   rbp
    957f:	push   rbx
    9580:	mov    rbp,rdi
    9583:	sub    rsp,0xa8
    958a:	movsxd rdi,DWORD PTR [rdi+0x1000]
    9591:	mov    rax,QWORD PTR fs:0x28
    959a:	mov    QWORD PTR [rsp+0x98],rax
    95a2:	xor    eax,eax
    95a4:	cmp    edi,edx
    95a6:	jge    95d5 <g_str_equal@plt+0x121d>
    95a8:	call   8360 <__fdelt_chk@plt>
    95ad:	mov    edi,DWORD PTR [rbp+0x1000]
    95b3:	mov    edx,edi
    95b5:	sar    edx,0x1f
    95b8:	shr    edx,0x1a
    95bb:	lea    ecx,[rdi+rdx*1]
    95be:	and    ecx,0x3f
    95c1:	sub    ecx,edx
    95c3:	mov    edx,0x1
    95c8:	shl    rdx,cl
    95cb:	test   QWORD PTR [r14+rax*8],rdx
    95cf:	jne    9690 <g_str_equal@plt+0x12d8>
    95d5:	mov    rbx,QWORD PTR [rbp+0x2020]
    95dc:	mov    r15d,0x1
    95e2:	test   rbx,rbx
    95e5:	jne    9623 <g_str_equal@plt+0x126b>
    95e7:	jmp    9650 <g_str_equal@plt+0x1298>
    95e9:	nop    DWORD PTR [rax+0x0]
    95f0:	cmp    edx,r13d
    95f3:	jge    961b <g_str_equal@plt+0x1263>
    95f5:	movsxd rdi,edx
    95f8:	call   8360 <__fdelt_chk@plt>
    95fd:	mov    ecx,DWORD PTR [rbx+0x10]
    9600:	mov    edx,ecx
    9602:	sar    edx,0x1f
    9605:	shr    edx,0x1a
    9608:	add    ecx,edx
    960a:	and    ecx,0x3f
    960d:	sub    ecx,edx
    960f:	mov    rdx,r15
    9612:	shl    rdx,cl
    9615:	test   QWORD PTR [r14+rax*8],rdx
    9619:	jne    9680 <g_str_equal@plt+0x12c8>
    961b:	test   r12,r12
    961e:	mov    rbx,r12
    9621:	je     9650 <g_str_equal@plt+0x1298>
    9623:	cmp    BYTE PTR [rbp+0x201a],0x0
    962a:	mov    r12,QWORD PTR [rbx]
    962d:	mov    edx,DWORD PTR [rbx+0x10]
    9630:	je     95f0 <g_str_equal@plt+0x1238>
    9632:	lea    rsi,[rip+0x1fe15]        # 2944e <_fini@@Base+0x1ca>
    9639:	mov    edi,0x1
    963e:	xor    eax,eax
    9640:	call   7a80 <__printf_chk@plt>
    9645:	mov    edx,DWORD PTR [rbx+0x10]
    9648:	jmp    95f0 <g_str_equal@plt+0x1238>
    964a:	nop    WORD PTR [rax+rax*1+0x0]
    9650:	xor    eax,eax
    9652:	mov    rsi,QWORD PTR [rsp+0x98]
    965a:	xor    rsi,QWORD PTR fs:0x28
    9663:	jne    9af3 <g_str_equal@plt+0x173b>
    9669:	add    rsp,0xa8
    9670:	pop    rbx
    9671:	pop    rbp
    9672:	pop    r12
    9674:	pop    r13
    9676:	pop    r14
    9678:	pop    r15
    967a:	ret    
    967b:	nop    DWORD PTR [rax+rax*1+0x0]
    9680:	mov    rsi,rbx
    9683:	mov    rdi,rbp
    9686:	call   8e30 <g_str_equal@plt+0xa78>
    968b:	jmp    961b <g_str_equal@plt+0x1263>
    968d:	nop    DWORD PTR [rax]
    9690:	lea    rdx,[rsp+0x1c]
    9695:	lea    rsi,[rsp+0x20]
    969a:	mov    DWORD PTR [rsp+0x1c],0x6e
    96a2:	call   a370 <g_str_equal@plt+0x1fb8>
    96a7:	test   eax,eax
    96a9:	mov    r12d,eax
    96ac:	jns    96e0 <g_str_equal@plt+0x1328>
    96ae:	call   7fd0 <__errno_location@plt>
    96b3:	cmp    BYTE PTR [rbp+0x201a],0x0
    96ba:	mov    rbx,rax
    96bd:	mov    edi,DWORD PTR [rax]
    96bf:	jne    98d8 <g_str_equal@plt+0x1520>
    96c5:	cmp    edi,0x4
    96c8:	je     95d5 <g_str_equal@plt+0x121d>
    96ce:	mov    eax,0xffffffff
    96d3:	jmp    9652 <g_str_equal@plt+0x129a>
    96d8:	nop    DWORD PTR [rax+rax*1+0x0]
    96e0:	mov    edi,eax
    96e2:	call   bd20 <g_str_equal@plt+0x3968>
    96e7:	cmp    BYTE PTR [rbp+0x201a],0x0
    96ee:	je     9706 <g_str_equal@plt+0x134e>
    96f0:	lea    rsi,[rip+0x1fca0]        # 29397 <_fini@@Base+0x113>
    96f7:	mov    edx,r12d
    96fa:	mov    edi,0x1
    96ff:	xor    eax,eax
    9701:	call   7a80 <__printf_chk@plt>
    9706:	mov    edi,0x228
    970b:	call   80c0 <g_malloc0@plt>
    9710:	movzx  ecx,WORD PTR [rbp+0x2018]
    9717:	mov    rsi,QWORD PTR [rbp+0x2020]
    971e:	mov    rbx,rax
    9721:	mov    DWORD PTR [rax+0x10],r12d
    9725:	xor    edi,edi
    9727:	nop    WORD PTR [rax+rax*1+0x0]
    9730:	test   rsi,rsi
    9733:	movzx  edx,cx
    9736:	je     9762 <g_str_equal@plt+0x13aa>
    9738:	cmp    rdx,QWORD PTR [rsi+0x18]
    973c:	je     9840 <g_str_equal@plt+0x1488>
    9742:	mov    rax,rsi
    9745:	jmp    975a <g_str_equal@plt+0x13a2>
    9747:	nop    WORD PTR [rax+rax*1+0x0]
    9750:	cmp    rdx,QWORD PTR [rax+0x18]
    9754:	je     9840 <g_str_equal@plt+0x1488>
    975a:	mov    rax,QWORD PTR [rax]
    975d:	test   rax,rax
    9760:	jne    9750 <g_str_equal@plt+0x1398>
    9762:	mov    r15d,DWORD PTR [rbp+0x2014]
    9769:	add    ecx,0x1
    976c:	mov    QWORD PTR [rbx+0x18],rdx
    9770:	mov    WORD PTR [rbp+0x2018],cx
    9777:	mov    edi,r12d
    977a:	test   r15d,r15d
    977d:	mov    DWORD PTR [rbx+0x220],r15d
    9784:	je     9873 <g_str_equal@plt+0x14bb>
    978a:	xor    r15d,r15d
    978d:	jmp    97a1 <g_str_equal@plt+0x13e9>
    978f:	nop
    9790:	add    r15d,0x1
    9794:	cmp    r15d,DWORD PTR [rbx+0x220]
    979b:	jae    9870 <g_str_equal@plt+0x14b8>
    97a1:	mov    eax,r15d
    97a4:	xor    esi,esi
    97a6:	lea    rdi,[rbx+rax*8+0x20]
    97ab:	call   b680 <g_str_equal@plt+0x32c8>
    97b0:	test   eax,eax
    97b2:	jns    9790 <g_str_equal@plt+0x13d8>
    97b4:	cmp    BYTE PTR [rbp+0x201a],0x0
    97bb:	je     97c9 <g_str_equal@plt+0x1411>
    97bd:	lea    rdi,[rip+0x1fbfe]        # 293c2 <_fini@@Base+0x13e>
    97c4:	call   7a00 <puts@plt>
    97c9:	test   r15d,r15d
    97cc:	lea    eax,[r15-0x1]
    97d0:	je     97f3 <g_str_equal@plt+0x143b>
    97d2:	lea    r15,[rbx+rax*8+0x20]
    97d7:	lea    rax,[rbx+0x18]
    97db:	mov    QWORD PTR [rsp+0x8],rax
    97e0:	mov    rdi,r15
    97e3:	sub    r15,0x8
    97e7:	call   b5e0 <g_str_equal@plt+0x3228>
    97ec:	cmp    QWORD PTR [rsp+0x8],r15
    97f1:	jne    97e0 <g_str_equal@plt+0x1428>
    97f3:	mov    edi,r12d
    97f6:	call   79a0 <close@plt>
    97fb:	mov    rdi,rbx
    97fe:	call   7880 <g_free@plt>
    9803:	call   7fd0 <__errno_location@plt>
    9808:	mov    rbx,rax
    980b:	cmp    DWORD PTR [rbx],0x4
    980e:	je     95d5 <g_str_equal@plt+0x121d>
    9814:	cmp    BYTE PTR [rbp+0x201a],0x0
    981b:	je     96ce <g_str_equal@plt+0x1316>
    9821:	lea    rdi,[rip+0x1fcb0]        # 294d8 <_fini@@Base+0x254>
    9828:	call   7a00 <puts@plt>
    982d:	mov    eax,0xffffffff
    9832:	jmp    9652 <g_str_equal@plt+0x129a>
    9837:	nop    WORD PTR [rax+rax*1+0x0]
    9840:	add    edi,0x1
    9843:	add    ecx,0x1
    9846:	cmp    edi,0xffff
    984c:	mov    WORD PTR [rbp+0x2018],cx
    9853:	jne    9730 <g_str_equal@plt+0x1378>
    9859:	cmp    BYTE PTR [rbp+0x201a],0x0
    9860:	je     97f3 <g_str_equal@plt+0x143b>
    9862:	lea    rdi,[rip+0x1fb3b]        # 293a4 <_fini@@Base+0x120>
    9869:	call   7a00 <puts@plt>
    986e:	jmp    97f3 <g_str_equal@plt+0x143b>
    9870:	mov    edi,DWORD PTR [rbx+0x10]
    9873:	xor    esi,esi
    9875:	mov    edx,0xffffffff
    987a:	call   8d60 <g_str_equal@plt+0x9a8>
    987f:	test   eax,eax
    9881:	jns    98f8 <g_str_equal@plt+0x1540>
    9883:	call   7fd0 <__errno_location@plt>
    9888:	cmp    BYTE PTR [rbp+0x201a],0x0
    988f:	je     97c9 <g_str_equal@plt+0x1411>
    9895:	mov    edi,DWORD PTR [rax]
    9897:	call   7e90 <strerror@plt>
    989c:	lea    rsi,[rip+0x1fb35]        # 293d8 <_fini@@Base+0x154>
    98a3:	mov    rdx,rax
    98a6:	mov    edi,0x1
    98ab:	xor    eax,eax
    98ad:	call   7a80 <__printf_chk@plt>
    98b2:	movzx  eax,BYTE PTR [rbp+0x201a]
    98b9:	test   al,al
    98bb:	je     97c9 <g_str_equal@plt+0x1411>
    98c1:	lea    rdi,[rip+0x1fb5a]        # 29422 <_fini@@Base+0x19e>
    98c8:	call   7a00 <puts@plt>
    98cd:	jmp    97c9 <g_str_equal@plt+0x1411>
    98d2:	nop    WORD PTR [rax+rax*1+0x0]
    98d8:	call   7e90 <strerror@plt>
    98dd:	lea    rsi,[rip+0x1fa9f]        # 29383 <_fini@@Base+0xff>
    98e4:	mov    rdx,rax
    98e7:	mov    edi,0x1
    98ec:	xor    eax,eax
    98ee:	call   7a80 <__printf_chk@plt>
    98f3:	jmp    980b <g_str_equal@plt+0x1453>
    98f8:	mov    rsi,QWORD PTR [rbx+0x18]
    98fc:	mov    edi,DWORD PTR [rbx+0x10]
    98ff:	mov    edx,0xffffffff
    9904:	call   8d60 <g_str_equal@plt+0x9a8>
    9909:	test   eax,eax
    990b:	jns    9948 <g_str_equal@plt+0x1590>
    990d:	call   7fd0 <__errno_location@plt>
    9912:	cmp    BYTE PTR [rbp+0x201a],0x0
    9919:	je     97c9 <g_str_equal@plt+0x1411>
    991f:	mov    edi,DWORD PTR [rax]
    9921:	call   7e90 <strerror@plt>
    9926:	lea    rsi,[rip+0x1fac4]        # 293f1 <_fini@@Base+0x16d>
    992d:	mov    rdx,rax
    9930:	mov    edi,0x1
    9935:	xor    eax,eax
    9937:	call   7a80 <__printf_chk@plt>
    993c:	movzx  eax,BYTE PTR [rbp+0x201a]
    9943:	jmp    98b9 <g_str_equal@plt+0x1501>
    9948:	mov    edx,DWORD PTR [rbp+0x2010]
    994e:	mov    edi,DWORD PTR [rbx+0x10]
    9951:	mov    rsi,0xffffffffffffffff
    9958:	call   8d60 <g_str_equal@plt+0x9a8>
    995d:	test   eax,eax
    995f:	js     9ab8 <g_str_equal@plt+0x1700>
    9965:	mov    r15,QWORD PTR [rbp+0x2020]
    996c:	mov    eax,DWORD PTR [rbx+0x220]
    9972:	test   r15,r15
    9975:	je     9a0a <g_str_equal@plt+0x1652>
    997b:	nop    DWORD PTR [rax+rax*1+0x0]
    9980:	test   eax,eax
    9982:	je     9a93 <g_str_equal@plt+0x16db>
    9988:	mov    r12d,0x1
    998e:	xchg   ax,ax
    9990:	mov    edx,DWORD PTR [rbx+r12*8+0x1c]
    9995:	mov    rsi,QWORD PTR [rbx+0x18]
    9999:	mov    edi,DWORD PTR [r15+0x10]
    999d:	call   8d60 <g_str_equal@plt+0x9a8>
    99a2:	mov    eax,DWORD PTR [rbx+0x220]
    99a8:	mov    edx,r12d
    99ab:	add    r12,0x1
    99af:	cmp    edx,eax
    99b1:	jb     9990 <g_str_equal@plt+0x15d8>
    99b3:	mov    r15,QWORD PTR [r15]
    99b6:	test   r15,r15
    99b9:	jne    9980 <g_str_equal@plt+0x15c8>
    99bb:	mov    r15,QWORD PTR [rbp+0x2020]
    99c2:	test   r15,r15
    99c5:	je     9a0a <g_str_equal@plt+0x1652>
    99c7:	nop    WORD PTR [rax+rax*1+0x0]
    99d0:	test   eax,eax
    99d2:	je     9a85 <g_str_equal@plt+0x16cd>
    99d8:	mov    r12d,0x1
    99de:	xchg   ax,ax
    99e0:	mov    edx,DWORD PTR [r15+r12*8+0x1c]
    99e5:	mov    rsi,QWORD PTR [r15+0x18]
    99e9:	mov    edi,DWORD PTR [rbx+0x10]
    99ec:	call   8d60 <g_str_equal@plt+0x9a8>
    99f1:	mov    eax,DWORD PTR [rbx+0x220]
    99f7:	mov    edx,r12d
    99fa:	add    r12,0x1
    99fe:	cmp    edx,eax
    9a00:	jb     99e0 <g_str_equal@plt+0x1628>
    9a02:	mov    r15,QWORD PTR [r15]
    9a05:	test   r15,r15
    9a08:	jne    99d0 <g_str_equal@plt+0x1618>
    9a0a:	test   eax,eax
    9a0c:	je     9a40 <g_str_equal@plt+0x1688>
    9a0e:	xor    r12d,r12d
    9a11:	nop    DWORD PTR [rax+0x0]
    9a18:	mov    eax,r12d
    9a1b:	add    r12d,0x1
    9a1f:	lea    rdi,[rbx+rax*8+0x20]
    9a24:	call   b610 <g_str_equal@plt+0x3258>
    9a29:	mov    rsi,QWORD PTR [rbx+0x18]
    9a2d:	mov    edi,DWORD PTR [rbx+0x10]
    9a30:	mov    edx,eax
    9a32:	call   8d60 <g_str_equal@plt+0x9a8>
    9a37:	cmp    r12d,DWORD PTR [rbx+0x220]
    9a3e:	jb     9a18 <g_str_equal@plt+0x1660>
    9a40:	mov    rax,QWORD PTR [rbp+0x2028]
    9a47:	mov    QWORD PTR [rbx],0x0
    9a4e:	mov    QWORD PTR [rbx+0x8],rax
    9a52:	mov    QWORD PTR [rax],rbx
    9a55:	cmp    BYTE PTR [rbp+0x201a],0x0
    9a5c:	mov    QWORD PTR [rbp+0x2028],rbx
    9a63:	je     95d5 <g_str_equal@plt+0x121d>
    9a69:	mov    rdx,QWORD PTR [rbx+0x18]
    9a6d:	lea    rsi,[rip+0x1f9c7]        # 2943b <_fini@@Base+0x1b7>
    9a74:	mov    edi,0x1
    9a79:	xor    eax,eax
    9a7b:	call   7a80 <__printf_chk@plt>
    9a80:	jmp    95d5 <g_str_equal@plt+0x121d>
    9a85:	mov    r15,QWORD PTR [r15]
    9a88:	test   r15,r15
    9a8b:	jne    9a02 <g_str_equal@plt+0x164a>
    9a91:	jmp    9a40 <g_str_equal@plt+0x1688>
    9a93:	mov    r15,QWORD PTR [r15]
    9a96:	test   r15,r15
    9a99:	jne    99b3 <g_str_equal@plt+0x15fb>
    9a9f:	mov    r15,QWORD PTR [rbp+0x2020]
    9aa6:	test   r15,r15
    9aa9:	jne    99d0 <g_str_equal@plt+0x1618>
    9aaf:	jmp    9a40 <g_str_equal@plt+0x1688>
    9ab1:	nop    DWORD PTR [rax+0x0]
    9ab8:	call   7fd0 <__errno_location@plt>
    9abd:	cmp    BYTE PTR [rbp+0x201a],0x0
    9ac4:	je     97c9 <g_str_equal@plt+0x1411>
    9aca:	mov    edi,DWORD PTR [rax]
    9acc:	call   7e90 <strerror@plt>
    9ad1:	lea    rsi,[rip+0x1f932]        # 2940a <_fini@@Base+0x186>
    9ad8:	mov    rdx,rax
    9adb:	mov    edi,0x1
    9ae0:	xor    eax,eax
    9ae2:	call   7a80 <__printf_chk@plt>
    9ae7:	movzx  eax,BYTE PTR [rbp+0x201a]
    9aee:	jmp    98b9 <g_str_equal@plt+0x1501>
    9af3:	call   8050 <__stack_chk_fail@plt>
    9af8:	nop    DWORD PTR [rax+rax*1+0x0]
    9b00:	mov    rax,QWORD PTR [rdi+0x2020]
    9b07:	test   rax,rax
    9b0a:	je     9b26 <g_str_equal@plt+0x176e>
    9b0c:	cmp    rsi,QWORD PTR [rax+0x18]
    9b10:	jne    9b1e <g_str_equal@plt+0x1766>
    9b12:	jmp    9b30 <g_str_equal@plt+0x1778>
    9b14:	nop    DWORD PTR [rax+0x0]
    9b18:	cmp    QWORD PTR [rax+0x18],rsi
    9b1c:	je     9b26 <g_str_equal@plt+0x176e>
    9b1e:	mov    rax,QWORD PTR [rax]
    9b21:	test   rax,rax
    9b24:	jne    9b18 <g_str_equal@plt+0x1760>
    9b26:	repz ret 
    9b28:	nop    DWORD PTR [rax+rax*1+0x0]
    9b30:	repz ret 
    9b32:	nop    DWORD PTR [rax+0x0]
    9b36:	nop    WORD PTR cs:[rax+rax*1+0x0]
    9b40:	push   r12
    9b42:	push   rbp
    9b43:	push   rbx
    9b44:	mov    rbp,QWORD PTR [rdi+0x2020]
    9b4b:	test   rbp,rbp
    9b4e:	je     9bbb <g_str_equal@plt+0x1803>
    9b50:	lea    r12,[rip+0x1f9a9]        # 29500 <_fini@@Base+0x27c>
    9b57:	nop    WORD PTR [rax+rax*1+0x0]
    9b60:	mov    rdx,QWORD PTR [rbp+0x18]
    9b64:	lea    rsi,[rip+0x1f8f5]        # 29460 <_fini@@Base+0x1dc>
    9b6b:	xor    eax,eax
    9b6d:	mov    edi,0x1
    9b72:	call   7a80 <__printf_chk@plt>
    9b77:	mov    eax,DWORD PTR [rbp+0x220]
    9b7d:	test   eax,eax
    9b7f:	je     9bb2 <g_str_equal@plt+0x17fa>
    9b81:	xor    ebx,ebx
    9b83:	nop    DWORD PTR [rax+rax*1+0x0]
    9b88:	mov    eax,ebx
    9b8a:	lea    rdi,[rbp+rax*8+0x20]
    9b8f:	call   b610 <g_str_equal@plt+0x3258>
    9b94:	mov    edx,ebx
    9b96:	mov    ecx,eax
    9b98:	mov    rsi,r12
    9b9b:	xor    eax,eax
    9b9d:	mov    edi,0x1
    9ba2:	add    ebx,0x1
    9ba5:	call   7a80 <__printf_chk@plt>
    9baa:	cmp    DWORD PTR [rbp+0x220],ebx
    9bb0:	ja     9b88 <g_str_equal@plt+0x17d0>
    9bb2:	mov    rbp,QWORD PTR [rbp+0x0]
    9bb6:	test   rbp,rbp
    9bb9:	jne    9b60 <g_str_equal@plt+0x17a8>
    9bbb:	pop    rbx
    9bbc:	pop    rbp
    9bbd:	pop    r12
    9bbf:	ret    
    9bc0:	mov    DWORD PTR [rip+0x2360ea],0x1        # 23fcb4 <stdout@@GLIBC_2.2.5+0xc>
    9bca:	ret    
    9bcb:	nop    DWORD PTR [rax+rax*1+0x0]
    9bd0:	sub    rsp,0x8
    9bd4:	mov    rax,QWORD PTR [rip+0x2381a5]        # 241d80 <stdout@@GLIBC_2.2.5+0x20d8>
    9bdb:	not    rax
    9bde:	test   rdi,rax
    9be1:	je     9c08 <g_str_equal@plt+0x1850>
    9be3:	lea    r8,[rip+0x1fe5e]        # 29a48 <_fini@@Base+0x7c4>
    9bea:	lea    rcx,[rip+0x1ff9f]        # 29b90 <_fini@@Base+0x90c>
    9bf1:	lea    rsi,[rip+0x1fe80]        # 29a78 <_fini@@Base+0x7f4>
    9bf8:	mov    edx,0x4e
    9bfd:	xor    edi,edi
    9bff:	call   7ca0 <g_assertion_message_expr@plt>
    9c04:	nop    DWORD PTR [rax+0x0]
    9c08:	test   rax,rsi
    9c0b:	jne    9c20 <g_str_equal@plt+0x1868>
    9c0d:	call   78a0 <mprotect@plt>
    9c12:	test   eax,eax
    9c14:	jne    9c41 <g_str_equal@plt+0x1889>
    9c16:	add    rsp,0x8
    9c1a:	ret    
    9c1b:	nop    DWORD PTR [rax+rax*1+0x0]
    9c20:	lea    r8,[rip+0x1fe89]        # 29ab0 <_fini@@Base+0x82c>
    9c27:	lea    rcx,[rip+0x1ff62]        # 29b90 <_fini@@Base+0x90c>
    9c2e:	lea    rsi,[rip+0x1fe43]        # 29a78 <_fini@@Base+0x7f4>
    9c35:	mov    edx,0x4f
    9c3a:	xor    edi,edi
    9c3c:	call   7ca0 <g_assertion_message_expr@plt>
    9c41:	call   7fd0 <__errno_location@plt>
    9c46:	mov    edi,DWORD PTR [rax]
    9c48:	call   7e90 <strerror@plt>
    9c4d:	lea    rsi,[rip+0x1ff3c]        # 29b90 <_fini@@Base+0x90c>
    9c54:	lea    rdi,[rip+0x1feda]        # 29b35 <_fini@@Base+0x8b1>
    9c5b:	mov    rdx,rax
    9c5e:	xor    eax,eax
    9c60:	call   e520 <g_str_equal@plt+0x6168>
    9c65:	mov    eax,0xffffffff
    9c6a:	jmp    9c16 <g_str_equal@plt+0x185e>
    9c6c:	nop    DWORD PTR [rax+0x0]
    9c70:	push   rbp
    9c71:	push   rbx
    9c72:	sub    rsp,0x38
    9c76:	mov    rax,QWORD PTR fs:0x28
    9c7f:	mov    QWORD PTR [rsp+0x28],rax
    9c84:	xor    eax,eax
    9c86:	cmp    DWORD PTR [rip+0x234387],0xffffffff        # 23e014 <g_test_config_vars+0x8f4>
    9c8d:	je     9cb0 <g_str_equal@plt+0x18f8>
    9c8f:	mov    rax,QWORD PTR [rsp+0x28]
    9c94:	xor    rax,QWORD PTR fs:0x28
    9c9d:	jne    9d91 <g_str_equal@plt+0x19d9>
    9ca3:	add    rsp,0x38
    9ca7:	pop    rbx
    9ca8:	pop    rbp
    9ca9:	ret    
    9caa:	nop    WORD PTR [rax+rax*1+0x0]
    9cb0:	pxor   xmm0,xmm0
    9cb4:	lea    rdi,[rip+0x1fe92]        # 29b4d <_fini@@Base+0x8c9>
    9cbb:	xor    edx,edx
    9cbd:	mov    ecx,0x1
    9cc2:	mov    esi,0x2
    9cc7:	mov    QWORD PTR [rsp+0x12],0x0
    9cd0:	mov    DWORD PTR [rsp+0x1a],0x0
    9cd8:	movups XMMWORD PTR [rsp+0x2],xmm0
    9cdd:	mov    WORD PTR [rsp+0x1e],dx
    9ce2:	mov    WORD PTR [rsp],cx
    9ce6:	call   7ea0 <open64@plt>
    9ceb:	test   eax,eax
    9ced:	mov    ebx,eax
    9cef:	js     9d30 <g_str_equal@plt+0x1978>
    9cf1:	mov    edi,eax
    9cf3:	mov    rdx,rsp
    9cf6:	mov    esi,0x24
    9cfb:	xor    eax,eax
    9cfd:	call   8340 <fcntl@plt>
    9d02:	mov    edi,ebx
    9d04:	mov    ebp,eax
    9d06:	call   79a0 <close@plt>
    9d0b:	test   ebp,ebp
    9d0d:	jne    9d78 <g_str_equal@plt+0x19c0>
    9d0f:	mov    DWORD PTR [rip+0x2342fb],0x25        # 23e014 <g_test_config_vars+0x8f4>
    9d19:	mov    DWORD PTR [rip+0x2342ed],0x24        # 23e010 <g_test_config_vars+0x8f0>
    9d23:	jmp    9c8f <g_str_equal@plt+0x18d7>
    9d28:	nop    DWORD PTR [rax+rax*1+0x0]
    9d30:	call   7fd0 <__errno_location@plt>
    9d35:	mov    edi,DWORD PTR [rax]
    9d37:	call   7e90 <strerror@plt>
    9d3c:	mov    rdi,QWORD PTR [rip+0x235f5d]        # 23fca0 <stderr@@GLIBC_2.2.5>
    9d43:	lea    rdx,[rip+0x1fd8e]        # 29ad8 <_fini@@Base+0x854>
    9d4a:	mov    rcx,rax
    9d4d:	mov    esi,0x1
    9d52:	xor    eax,eax
    9d54:	call   79e0 <__fprintf_chk@plt>
    9d59:	mov    DWORD PTR [rip+0x2342b1],0x6        # 23e014 <g_test_config_vars+0x8f4>
    9d63:	mov    DWORD PTR [rip+0x2342a3],0x5        # 23e010 <g_test_config_vars+0x8f0>
    9d6d:	jmp    9c8f <g_str_equal@plt+0x18d7>
    9d72:	nop    WORD PTR [rax+rax*1+0x0]
    9d78:	mov    DWORD PTR [rip+0x234292],0x6        # 23e014 <g_test_config_vars+0x8f4>
    9d82:	mov    DWORD PTR [rip+0x234284],0x5        # 23e010 <g_test_config_vars+0x8f0>
    9d8c:	jmp    9c8f <g_str_equal@plt+0x18d7>
    9d91:	call   8050 <__stack_chk_fail@plt>
    9d96:	nop    WORD PTR cs:[rax+rax*1+0x0]
    9da0:	push   rbp
    9da1:	push   rbx
    9da2:	mov    ebp,edi
    9da4:	pxor   xmm0,xmm0
    9da8:	sub    rsp,0x38
    9dac:	mov    rax,QWORD PTR fs:0x28
    9db5:	mov    QWORD PTR [rsp+0x28],rax
    9dba:	xor    eax,eax
    9dbc:	xor    eax,eax
    9dbe:	mov    QWORD PTR [rsp+0x12],0x0
    9dc7:	mov    DWORD PTR [rsp+0x1a],0x0
    9dcf:	movups XMMWORD PTR [rsp+0x2],xmm0
    9dd4:	mov    WORD PTR [rsp+0x1e],ax
    9dd9:	mov    WORD PTR [rsp],cx
    9ddd:	mov    rbx,rsp
    9de0:	mov    QWORD PTR [rsp+0x8],rsi
    9de5:	mov    QWORD PTR [rsp+0x10],rdx
    9dea:	call   9c70 <g_str_equal@plt+0x18b8>
    9def:	jmp    9e04 <g_str_equal@plt+0x1a4c>
    9df1:	nop    DWORD PTR [rax+0x0]
    9df8:	call   7fd0 <__errno_location@plt>
    9dfd:	mov    eax,DWORD PTR [rax]
    9dff:	cmp    eax,0x4
    9e02:	jne    9e38 <g_str_equal@plt+0x1a80>
    9e04:	mov    esi,DWORD PTR [rip+0x23420a]        # 23e014 <g_test_config_vars+0x8f4>
    9e0a:	xor    eax,eax
    9e0c:	mov    rdx,rbx
    9e0f:	mov    edi,ebp
    9e11:	call   8340 <fcntl@plt>
    9e16:	cmp    eax,0xffffffff
    9e19:	je     9df8 <g_str_equal@plt+0x1a40>
    9e1b:	xor    eax,eax
    9e1d:	mov    rcx,QWORD PTR [rsp+0x28]
    9e22:	xor    rcx,QWORD PTR fs:0x28
    9e2b:	jne    9e3c <g_str_equal@plt+0x1a84>
    9e2d:	add    rsp,0x38
    9e31:	pop    rbx
    9e32:	pop    rbp
    9e33:	ret    
    9e34:	nop    DWORD PTR [rax+0x0]
    9e38:	neg    eax
    9e3a:	jmp    9e1d <g_str_equal@plt+0x1a65>
    9e3c:	call   8050 <__stack_chk_fail@plt>
    9e41:	nop    DWORD PTR [rax+rax*1+0x0]
    9e46:	nop    WORD PTR cs:[rax+rax*1+0x0]
    9e50:	sub    rsp,0x18
    9e54:	mov    r8d,0x4
    9e5a:	mov    edx,0x3
    9e5f:	lea    rcx,[rsp+0xc]
    9e64:	mov    DWORD PTR [rsp+0xc],esi
    9e68:	mov    esi,0x6
    9e6d:	call   7b90 <setsockopt@plt>
    9e72:	add    rsp,0x18
    9e76:	ret    
    9e77:	nop    WORD PTR [rax+rax*1+0x0]
    9e80:	sub    rsp,0x18
    9e84:	mov    edx,0x1
    9e89:	mov    r8d,0x4
    9e8f:	lea    rcx,[rsp+0x4]
    9e94:	mov    esi,0x6
    9e99:	mov    DWORD PTR [rsp+0x4],0x1
    9ea1:	mov    rax,QWORD PTR fs:0x28
    9eaa:	mov    QWORD PTR [rsp+0x8],rax
    9eaf:	xor    eax,eax
    9eb1:	call   7b90 <setsockopt@plt>
    9eb6:	mov    rdx,QWORD PTR [rsp+0x8]
    9ebb:	xor    rdx,QWORD PTR fs:0x28
    9ec4:	jne    9ecb <g_str_equal@plt+0x1b13>
    9ec6:	add    rsp,0x18
    9eca:	ret    
    9ecb:	call   8050 <__stack_chk_fail@plt>
    9ed0:	cmp    edx,0xffffffff
    9ed3:	je     9ee0 <g_str_equal@plt+0x1b28>
    9ed5:	jmp    7ff0 <madvise@plt>
    9eda:	nop    WORD PTR [rax+rax*1+0x0]
    9ee0:	push   rbx
    9ee1:	mov    ebx,edx
    9ee3:	call   7fd0 <__errno_location@plt>
    9ee8:	mov    DWORD PTR [rax],0x16
    9eee:	mov    eax,ebx
    9ef0:	pop    rbx
    9ef1:	ret    
    9ef2:	nop    DWORD PTR [rax+0x0]
    9ef6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    9f00:	mov    edx,0x7
    9f05:	jmp    9bd0 <g_str_equal@plt+0x1818>
    9f0a:	nop    WORD PTR [rax+rax*1+0x0]
    9f10:	xor    edx,edx
    9f12:	jmp    9bd0 <g_str_equal@plt+0x1818>
    9f17:	nop    WORD PTR [rax+rax*1+0x0]
    9f20:	xor    edx,edx
    9f22:	mov    esi,0x406
    9f27:	xor    eax,eax
    9f29:	jmp    8340 <fcntl@plt>
    9f2e:	xchg   ax,ax
    9f30:	sub    rsp,0x8
    9f34:	call   9c70 <g_str_equal@plt+0x18b8>
    9f39:	cmp    DWORD PTR [rip+0x2340d4],0x25        # 23e014 <g_test_config_vars+0x8f4>
    9f40:	sete   al
    9f43:	add    rsp,0x8
    9f47:	ret    
    9f48:	nop    DWORD PTR [rax+rax*1+0x0]
    9f50:	movzx  ecx,cl
    9f53:	jmp    9da0 <g_str_equal@plt+0x19e8>
    9f58:	nop    DWORD PTR [rax+rax*1+0x0]
    9f60:	mov    ecx,0x2
    9f65:	jmp    9da0 <g_str_equal@plt+0x19e8>
    9f6a:	nop    WORD PTR [rax+rax*1+0x0]
    9f70:	push   rbx
    9f71:	pxor   xmm0,xmm0
    9f75:	movzx  ecx,cl
    9f78:	mov    ebx,edi
    9f7a:	sub    rsp,0x30
    9f7e:	mov    rax,QWORD PTR fs:0x28
    9f87:	mov    QWORD PTR [rsp+0x28],rax
    9f8c:	xor    eax,eax
    9f8e:	xor    eax,eax
    9f90:	mov    QWORD PTR [rsp+0x12],0x0
    9f99:	mov    WORD PTR [rsp],cx
    9f9d:	movups XMMWORD PTR [rsp+0x2],xmm0
    9fa2:	mov    WORD PTR [rsp+0x1e],ax
    9fa7:	mov    QWORD PTR [rsp+0x8],rsi
    9fac:	mov    QWORD PTR [rsp+0x10],rdx
    9fb1:	mov    DWORD PTR [rsp+0x1a],0x0
    9fb9:	call   9c70 <g_str_equal@plt+0x18b8>
    9fbe:	mov    esi,DWORD PTR [rip+0x23404c]        # 23e010 <g_test_config_vars+0x8f0>
    9fc4:	xor    eax,eax
    9fc6:	mov    rdx,rsp
    9fc9:	mov    edi,ebx
    9fcb:	call   8340 <fcntl@plt>
    9fd0:	cmp    eax,0xffffffff
    9fd3:	je     a000 <g_str_equal@plt+0x1c48>
    9fd5:	cmp    WORD PTR [rsp],0x2
    9fda:	mov    eax,0x0
    9fdf:	mov    edx,0xfffffff5
    9fe4:	cmovne eax,edx
    9fe7:	mov    rdi,QWORD PTR [rsp+0x28]
    9fec:	xor    rdi,QWORD PTR fs:0x28
    9ff5:	jne    a00b <g_str_equal@plt+0x1c53>
    9ff7:	add    rsp,0x30
    9ffb:	pop    rbx
    9ffc:	ret    
    9ffd:	nop    DWORD PTR [rax]
    a000:	call   7fd0 <__errno_location@plt>
    a005:	mov    eax,DWORD PTR [rax]
    a007:	neg    eax
    a009:	jmp    9fe7 <g_str_equal@plt+0x1c2f>
    a00b:	call   8050 <__stack_chk_fail@plt>
    a010:	push   r12
    a012:	push   rbp
    a013:	mov    rbp,rdi
    a016:	push   rbx
    a017:	mov    ebx,esi
    a019:	lea    rsi,[rip+0x1fb37]        # 29b57 <_fini@@Base+0x8d3>
    a020:	sub    rsp,0x70
    a024:	mov    QWORD PTR [rsp+0x50],rdx
    a029:	lea    rdx,[rsp+0x18]
    a02e:	mov    rax,QWORD PTR fs:0x28
    a037:	mov    QWORD PTR [rsp+0x38],rax
    a03c:	xor    eax,eax
    a03e:	call   a890 <g_str_equal@plt+0x24d8>
    a043:	test   eax,eax
    a045:	jne    a0f0 <g_str_equal@plt+0x1d38>
    a04b:	mov    edx,ebx
    a04d:	and    edx,0x40
    a050:	jne    a0c0 <g_str_equal@plt+0x1d08>
    a052:	mov    esi,ebx
    a054:	mov    rdi,rbp
    a057:	xor    eax,eax
    a059:	or     esi,0x80000
    a05f:	call   7ea0 <open64@plt>
    a064:	cmp    eax,0xffffffff
    a067:	mov    ebp,eax
    a069:	je     a090 <g_str_equal@plt+0x1cd8>
    a06b:	mov    rcx,QWORD PTR [rsp+0x38]
    a070:	xor    rcx,QWORD PTR fs:0x28
    a079:	mov    eax,ebp
    a07b:	jne    a22e <g_str_equal@plt+0x1e76>
    a081:	add    rsp,0x70
    a085:	pop    rbx
    a086:	pop    rbp
    a087:	pop    r12
    a089:	ret    
    a08a:	nop    WORD PTR [rax+rax*1+0x0]
    a090:	call   7fd0 <__errno_location@plt>
    a095:	cmp    DWORD PTR [rax],0x16
    a098:	mov    r12,rax
    a09b:	jne    a06b <g_str_equal@plt+0x1cb3>
    a09d:	and    bh,0x40
    a0a0:	je     a06b <g_str_equal@plt+0x1cb3>
    a0a2:	lea    rdi,[rip+0x1fa67]        # 29b10 <_fini@@Base+0x88c>
    a0a9:	xor    eax,eax
    a0ab:	call   e520 <g_str_equal@plt+0x6168>
    a0b0:	mov    DWORD PTR [r12],0x16
    a0b8:	jmp    a06b <g_str_equal@plt+0x1cb3>
    a0ba:	nop    WORD PTR [rax+rax*1+0x0]
    a0c0:	lea    rax,[rsp+0x90]
    a0c8:	mov    DWORD PTR [rsp+0x20],0x10
    a0d0:	mov    edx,DWORD PTR [rsp+0x50]
    a0d4:	mov    QWORD PTR [rsp+0x28],rax
    a0d9:	lea    rax,[rsp+0x40]
    a0de:	mov    QWORD PTR [rsp+0x30],rax
    a0e3:	jmp    a052 <g_str_equal@plt+0x1c9a>
    a0e8:	nop    DWORD PTR [rax+rax*1+0x0]
    a0f0:	mov    rdi,QWORD PTR [rsp+0x18]
    a0f5:	call   b2a0 <g_str_equal@plt+0x2ee8>
    a0fa:	movsxd r12,eax
    a0fd:	cmp    r12,0xffffffffffffffff
    a101:	mov    rbp,r12
    a104:	je     a211 <g_str_equal@plt+0x1e59>
    a10a:	mov    rdi,r12
    a10d:	mov    esi,ebx
    a10f:	call   114f0 <g_str_equal@plt+0x9138>
    a114:	test   eax,eax
    a116:	mov    edi,eax
    a118:	js     a1f6 <g_str_equal@plt+0x1e3e>
    a11e:	xor    edx,edx
    a120:	xor    eax,eax
    a122:	mov    esi,0x406
    a127:	call   8340 <fcntl@plt>
    a12c:	cmp    eax,0xffffffff
    a12f:	mov    ebp,eax
    a131:	je     a221 <g_str_equal@plt+0x1e69>
    a137:	mov    edi,eax
    a139:	mov    esi,0x3
    a13e:	xor    eax,eax
    a140:	call   8340 <fcntl@plt>
    a145:	cmp    eax,0xffffffff
    a148:	je     a1be <g_str_equal@plt+0x1e06>
    a14a:	xor    eax,ebx
    a14c:	test   eax,0x101000
    a151:	jne    a1e0 <g_str_equal@plt+0x1e28>
    a157:	xor    eax,eax
    a159:	mov    edx,ebx
    a15b:	mov    esi,0x4
    a160:	mov    edi,ebp
    a162:	call   8340 <fcntl@plt>
    a167:	cmp    eax,0xffffffff
    a16a:	je     a1be <g_str_equal@plt+0x1e06>
    a16c:	test   bh,0x2
    a16f:	jne    a1b0 <g_str_equal@plt+0x1df8>
    a171:	and    ebx,0xc0
    a177:	cmp    ebx,0xc0
    a17d:	je     a1b0 <g_str_equal@plt+0x1df8>
    a17f:	mov    esi,ebp
    a181:	mov    rdi,r12
    a184:	call   114d0 <g_str_equal@plt+0x9118>
    a189:	cmp    eax,0xffffffff
    a18c:	mov    ebx,eax
    a18e:	jne    a06b <g_str_equal@plt+0x1cb3>
    a194:	mov    edi,ebp
    a196:	mov    ebp,ebx
    a198:	call   79a0 <close@plt>
    a19d:	call   7fd0 <__errno_location@plt>
    a1a2:	mov    DWORD PTR [rax],0x16
    a1a8:	jmp    a06b <g_str_equal@plt+0x1cb3>
    a1ad:	nop    DWORD PTR [rax]
    a1b0:	xor    esi,esi
    a1b2:	mov    edi,ebp
    a1b4:	call   7f10 <ftruncate64@plt>
    a1b9:	cmp    eax,0xffffffff
    a1bc:	jne    a17f <g_str_equal@plt+0x1dc7>
    a1be:	call   7fd0 <__errno_location@plt>
    a1c3:	mov    r12d,DWORD PTR [rax]
    a1c6:	mov    rbx,rax
    a1c9:	mov    edi,ebp
    a1cb:	call   79a0 <close@plt>
    a1d0:	mov    DWORD PTR [rbx],r12d
    a1d3:	mov    ebp,0xffffffff
    a1d8:	jmp    a06b <g_str_equal@plt+0x1cb3>
    a1dd:	nop    DWORD PTR [rax]
    a1e0:	call   7fd0 <__errno_location@plt>
    a1e5:	mov    r12d,0x16
    a1eb:	mov    rbx,rax
    a1ee:	mov    DWORD PTR [rax],0x16
    a1f4:	jmp    a1c9 <g_str_equal@plt+0x1e11>
    a1f6:	mov    DWORD PTR [rsp+0xc],eax
    a1fa:	mov    ebp,0xffffffff
    a1ff:	call   7fd0 <__errno_location@plt>
    a204:	mov    edi,DWORD PTR [rsp+0xc]
    a208:	neg    edi
    a20a:	mov    DWORD PTR [rax],edi
    a20c:	jmp    a06b <g_str_equal@plt+0x1cb3>
    a211:	call   7fd0 <__errno_location@plt>
    a216:	mov    DWORD PTR [rax],0x16
    a21c:	jmp    a06b <g_str_equal@plt+0x1cb3>
    a221:	call   7fd0 <__errno_location@plt>
    a226:	mov    rbx,rax
    a229:	mov    r12d,DWORD PTR [rax]
    a22c:	jmp    a1d0 <g_str_equal@plt+0x1e18>
    a22e:	call   8050 <__stack_chk_fail@plt>
    a233:	nop    DWORD PTR [rax]
    a236:	nop    WORD PTR cs:[rax+rax*1+0x0]
    a240:	push   rbx
    a241:	mov    ebx,edi
    a243:	sub    rsp,0x10
    a247:	call   114e0 <g_str_equal@plt+0x9128>
    a24c:	cmp    eax,0xffffffff
    a24f:	mov    edi,ebx
    a251:	je     a280 <g_str_equal@plt+0x1ec8>
    a253:	call   79a0 <close@plt>
    a258:	test   eax,eax
    a25a:	je     a268 <g_str_equal@plt+0x1eb0>
    a25c:	add    rsp,0x10
    a260:	pop    rbx
    a261:	ret    
    a262:	nop    WORD PTR [rax+rax*1+0x0]
    a268:	mov    edi,ebx
    a26a:	mov    DWORD PTR [rsp+0xc],eax
    a26e:	call   11500 <g_str_equal@plt+0x9148>
    a273:	mov    eax,DWORD PTR [rsp+0xc]
    a277:	add    rsp,0x10
    a27b:	pop    rbx
    a27c:	ret    
    a27d:	nop    DWORD PTR [rax]
    a280:	add    rsp,0x10
    a284:	pop    rbx
    a285:	jmp    79a0 <close@plt>
    a28a:	nop    WORD PTR [rax+rax*1+0x0]
    a290:	push   r13
    a292:	push   r12
    a294:	xor    r12d,r12d
    a297:	push   rbp
    a298:	push   rbx
    a299:	mov    r13d,edi
    a29c:	mov    rbp,rsi
    a29f:	mov    rbx,rdx
    a2a2:	sub    rsp,0x8
    a2a6:	test   rdx,rdx
    a2a9:	je     a2c9 <g_str_equal@plt+0x1f11>
    a2ab:	mov    rdx,rbx
    a2ae:	mov    rsi,rbp
    a2b1:	mov    edi,r13d
    a2b4:	call   82b0 <write@plt>
    a2b9:	test   rax,rax
    a2bc:	js     a2e0 <g_str_equal@plt+0x1f28>
    a2be:	add    rbp,rax
    a2c1:	add    r12,rax
    a2c4:	sub    rbx,rax
    a2c7:	jne    a2ab <g_str_equal@plt+0x1ef3>
    a2c9:	add    rsp,0x8
    a2cd:	mov    rax,r12
    a2d0:	pop    rbx
    a2d1:	pop    rbp
    a2d2:	pop    r12
    a2d4:	pop    r13
    a2d6:	ret    
    a2d7:	nop    WORD PTR [rax+rax*1+0x0]
    a2e0:	call   7fd0 <__errno_location@plt>
    a2e5:	cmp    DWORD PTR [rax],0x4
    a2e8:	je     a2ab <g_str_equal@plt+0x1ef3>
    a2ea:	add    rsp,0x8
    a2ee:	mov    rax,r12
    a2f1:	pop    rbx
    a2f2:	pop    rbp
    a2f3:	pop    r12
    a2f5:	pop    r13
    a2f7:	ret    
    a2f8:	nop    DWORD PTR [rax+rax*1+0x0]
    a300:	push   r13
    a302:	push   r12
    a304:	mov    r12d,esi
    a307:	push   rbp
    a308:	push   rbx
    a309:	or     esi,0x80000
    a30f:	mov    ebp,edi
    a311:	mov    r13d,edx
    a314:	sub    rsp,0x8
    a318:	call   7fa0 <socket@plt>
    a31d:	cmp    eax,0xffffffff
    a320:	mov    ebx,eax
    a322:	je     a338 <g_str_equal@plt+0x1f80>
    a324:	add    rsp,0x8
    a328:	mov    eax,ebx
    a32a:	pop    rbx
    a32b:	pop    rbp
    a32c:	pop    r12
    a32e:	pop    r13
    a330:	ret    
    a331:	nop    DWORD PTR [rax+0x0]
    a338:	call   7fd0 <__errno_location@plt>
    a33d:	cmp    DWORD PTR [rax],0x16
    a340:	jne    a324 <g_str_equal@plt+0x1f6c>
    a342:	mov    edx,r13d
    a345:	mov    esi,r12d
    a348:	mov    edi,ebp
    a34a:	call   7fa0 <socket@plt>
    a34f:	test   eax,eax
    a351:	mov    ebx,eax
    a353:	js     a324 <g_str_equal@plt+0x1f6c>
    a355:	mov    edi,eax
    a357:	call   bdd0 <g_str_equal@plt+0x3a18>
    a35c:	add    rsp,0x8
    a360:	mov    eax,ebx
    a362:	pop    rbx
    a363:	pop    rbp
    a364:	pop    r12
    a366:	pop    r13
    a368:	ret    
    a369:	nop    DWORD PTR [rax+0x0]
    a370:	push   r13
    a372:	push   r12
    a374:	mov    ecx,0x80000
    a379:	push   rbp
    a37a:	push   rbx
    a37b:	mov    ebp,edi
    a37d:	mov    r12,rsi
    a380:	mov    r13,rdx
    a383:	sub    rsp,0x8
    a387:	call   8000 <accept4@plt>
    a38c:	cmp    eax,0xffffffff
    a38f:	mov    ebx,eax
    a391:	je     a3a0 <g_str_equal@plt+0x1fe8>
    a393:	add    rsp,0x8
    a397:	mov    eax,ebx
    a399:	pop    rbx
    a39a:	pop    rbp
    a39b:	pop    r12
    a39d:	pop    r13
    a39f:	ret    
    a3a0:	call   7fd0 <__errno_location@plt>
    a3a5:	cmp    DWORD PTR [rax],0x26
    a3a8:	jne    a393 <g_str_equal@plt+0x1fdb>
    a3aa:	mov    rdx,r13
    a3ad:	mov    rsi,r12
    a3b0:	mov    edi,ebp
    a3b2:	call   82d0 <accept@plt>
    a3b7:	test   eax,eax
    a3b9:	mov    ebx,eax
    a3bb:	js     a393 <g_str_equal@plt+0x1fdb>
    a3bd:	mov    edi,eax
    a3bf:	call   bdd0 <g_str_equal@plt+0x3a18>
    a3c4:	add    rsp,0x8
    a3c8:	mov    eax,ebx
    a3ca:	pop    rbx
    a3cb:	pop    rbp
    a3cc:	pop    r12
    a3ce:	pop    r13
    a3d0:	ret    
    a3d1:	nop    DWORD PTR [rax+rax*1+0x0]
    a3d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    a3e0:	mov    QWORD PTR [rip+0x233c31],rdi        # 23e018 <g_test_config_vars+0x8f8>
    a3e7:	ret    
    a3e8:	nop    DWORD PTR [rax+rax*1+0x0]
    a3f0:	mov    rax,QWORD PTR [rip+0x233c21]        # 23e018 <g_test_config_vars+0x8f8>
    a3f7:	ret    
    a3f8:	nop    DWORD PTR [rax+rax*1+0x0]
    a400:	test   dil,dil
    a403:	jne    a410 <g_str_equal@plt+0x2058>
    a405:	repz ret 
    a407:	nop    WORD PTR [rax+rax*1+0x0]
    a410:	push   rbx
    a411:	lea    rsi,[rip+0x24499]        # 2e8b1 <_fini@@Base+0x562d>
    a418:	lea    rdi,[rip+0x1f744]        # 29b63 <_fini@@Base+0x8df>
    a41f:	call   8210 <fopen64@plt>
    a424:	test   rax,rax
    a427:	mov    rbx,rax
    a42a:	je     a450 <g_str_equal@plt+0x2098>
    a42c:	mov    rdi,rax
    a42f:	call   7dc0 <fgetc@plt>
    a434:	mov    rdi,rbx
    a437:	cmp    eax,0x31
    a43a:	pop    rbx
    a43b:	sete   BYTE PTR [rip+0x235876]        # 23fcb8 <stdout@@GLIBC_2.2.5+0x10>
    a442:	jmp    8110 <fclose@plt>
    a447:	nop    WORD PTR [rax+rax*1+0x0]
    a450:	pop    rbx
    a451:	ret    
    a452:	nop    DWORD PTR [rax+0x0]
    a456:	nop    WORD PTR cs:[rax+rax*1+0x0]
    a460:	movzx  eax,BYTE PTR [rip+0x235851]        # 23fcb8 <stdout@@GLIBC_2.2.5+0x10>
    a467:	ret    
    a468:	nop    DWORD PTR [rax+rax*1+0x0]
    a470:	xor    eax,eax
    a472:	ret    
    a473:	nop    WORD PTR cs:[rax+rax*1+0x0]
    a47d:	nop    DWORD PTR [rax]
    a480:	push   rbp
    a481:	push   rbx
    a482:	mov    rbp,rsi
    a485:	movzx  ebx,dil
    a489:	sub    rsp,0x8
    a48d:	call   7c90 <__ctype_toupper_loc@plt>
    a492:	mov    rax,QWORD PTR [rax]
    a495:	mov    edx,DWORD PTR [rax+rbx*4]
    a498:	sub    edx,0x42
    a49b:	cmp    edx,0x12
    a49e:	ja     a540 <g_str_equal@plt+0x2188>
    a4a4:	lea    rcx,[rip+0x1f705]        # 29bb0 <_fini@@Base+0x92c>
    a4ab:	movsxd rax,DWORD PTR [rcx+rdx*4]
    a4af:	add    rax,rcx
    a4b2:	jmp    rax
    a4b4:	nop    DWORD PTR [rax+0x0]
    a4b8:	mov    rax,rbp
    a4bb:	imul   rax,rbp
    a4bf:	imul   rbp,rax
    a4c3:	mov    rax,rbp
    a4c6:	add    rsp,0x8
    a4ca:	imul   rax,rbp
    a4ce:	pop    rbx
    a4cf:	pop    rbp
    a4d0:	ret    
    a4d1:	nop    DWORD PTR [rax+0x0]
    a4d8:	add    rsp,0x8
    a4dc:	mov    eax,0x1
    a4e1:	pop    rbx
    a4e2:	pop    rbp
    a4e3:	ret    
    a4e4:	nop    DWORD PTR [rax+0x0]
    a4e8:	mov    rax,rbp
    a4eb:	add    rsp,0x8
    a4ef:	imul   rax,rbp
    a4f3:	pop    rbx
    a4f4:	imul   rax,rax
    a4f8:	imul   rax,rbp
    a4fc:	pop    rbp
    a4fd:	ret    
    a4fe:	xchg   ax,ax
    a500:	imul   rbp,rbp
    a504:	add    rsp,0x8
    a508:	pop    rbx
    a509:	mov    rax,rbp
    a50c:	imul   rax,rbp
    a510:	pop    rbp
    a511:	ret    
    a512:	nop    WORD PTR [rax+rax*1+0x0]
    a518:	add    rsp,0x8
    a51c:	mov    rax,rbp
    a51f:	pop    rbx
    a520:	pop    rbp
    a521:	ret    
    a522:	nop    WORD PTR [rax+rax*1+0x0]
    a528:	mov    rax,rbp
    a52b:	add    rsp,0x8
    a52f:	imul   rax,rbp
    a533:	pop    rbx
    a534:	imul   rax,rbp
    a538:	pop    rbp
    a539:	ret    
    a53a:	nop    WORD PTR [rax+rax*1+0x0]
    a540:	add    rsp,0x8
    a544:	mov    rax,0xffffffffffffffff
    a54b:	pop    rbx
    a54c:	pop    rbp
    a54d:	ret    
    a54e:	xchg   ax,ax
    a550:	push   r15
    a552:	push   r14
    a554:	mov    r14,r8
    a557:	push   r13
    a559:	push   r12
    a55b:	mov    r13,rsi
    a55e:	push   rbp
    a55f:	push   rbx
    a560:	mov    r12,rcx
    a563:	mov    rbx,rdi
    a566:	sub    rsp,0x38
    a56a:	mov    DWORD PTR [rsp+0x4],edx
    a56e:	mov    rax,QWORD PTR fs:0x28
    a577:	mov    QWORD PTR [rsp+0x28],rax
    a57c:	xor    eax,eax
    a57e:	call   7fd0 <__errno_location@plt>
    a583:	lea    rsi,[rsp+0x18]
    a588:	mov    DWORD PTR [rax],0x0
    a58e:	mov    rdi,rbx
    a591:	mov    r15,rax
    a594:	call   8350 <strtod@plt>
    a599:	ucomisd xmm0,xmm0
    a59d:	mov    rbp,QWORD PTR [rsp+0x18]
    a5a2:	jp     a5b0 <g_str_equal@plt+0x21f8>
    a5a4:	cmp    rbp,rbx
    a5a7:	je     a5b0 <g_str_equal@plt+0x21f8>
    a5a9:	mov    ebx,DWORD PTR [r15]
    a5ac:	test   ebx,ebx
    a5ae:	je     a5f0 <g_str_equal@plt+0x2238>
    a5b0:	mov    ebx,0xffffffea
    a5b5:	test   r13,r13
    a5b8:	je     a6b0 <g_str_equal@plt+0x22f8>
    a5be:	mov    QWORD PTR [r13+0x0],rbp
    a5c2:	mov    rcx,QWORD PTR [rsp+0x28]
    a5c7:	xor    rcx,QWORD PTR fs:0x28
    a5d0:	mov    eax,ebx
    a5d2:	jne    a74e <g_str_equal@plt+0x2396>
    a5d8:	add    rsp,0x38
    a5dc:	pop    rbx
    a5dd:	pop    rbp
    a5de:	pop    r12
    a5e0:	pop    r13
    a5e2:	pop    r14
    a5e4:	pop    r15
    a5e6:	ret    
    a5e7:	nop    WORD PTR [rax+rax*1+0x0]
    a5f0:	lea    rdi,[rsp+0x20]
    a5f5:	movsd  QWORD PTR [rsp+0x8],xmm0
    a5fb:	call   81e0 <modf@plt>
    a600:	pxor   xmm3,xmm3
    a604:	movsx  edi,BYTE PTR [rbp+0x0]
    a608:	mov    eax,0x1
    a60d:	mov    rsi,r12
    a610:	ucomisd xmm0,xmm3
    a614:	setp   r15b
    a618:	cmovne r15d,eax
    a61c:	call   a480 <g_str_equal@plt+0x20c8>
    a621:	pxor   xmm0,xmm0
    a625:	pxor   xmm5,xmm5
    a629:	movsd  xmm1,QWORD PTR [rsp+0x8]
    a62f:	cvtsi2sd xmm0,rax
    a634:	ucomisd xmm0,xmm5
    a638:	jb     a6c8 <g_str_equal@plt+0x2310>
    a63e:	add    rbp,0x1
    a642:	mov    QWORD PTR [rsp+0x18],rbp
    a647:	movsd  xmm2,QWORD PTR [rip+0x1f671]        # 29cc0 <_fini@@Base+0xa3c>
    a64f:	mov    edx,0x0
    a654:	ucomisd xmm0,xmm2
    a658:	setnp  al
    a65b:	cmovne eax,edx
    a65e:	test   al,al
    a660:	je     a66b <g_str_equal@plt+0x22b3>
    a662:	test   r15b,r15b
    a665:	jne    a5b0 <g_str_equal@plt+0x21f8>
    a66b:	mulsd  xmm0,xmm1
    a66f:	ucomisd xmm0,QWORD PTR [rip+0x1f651]        # 29cc8 <_fini@@Base+0xa44>
    a677:	jae    a720 <g_str_equal@plt+0x2368>
    a67d:	pxor   xmm7,xmm7
    a681:	ucomisd xmm7,xmm1
    a685:	ja     a720 <g_str_equal@plt+0x2368>
    a68b:	movsd  xmm1,QWORD PTR [rip+0x1f63d]        # 29cd0 <_fini@@Base+0xa4c>
    a693:	ucomisd xmm0,xmm1
    a697:	jae    a730 <g_str_equal@plt+0x2378>
    a69d:	cvttsd2si rax,xmm0
    a6a2:	mov    QWORD PTR [r14],rax
    a6a5:	jmp    a5b5 <g_str_equal@plt+0x21fd>
    a6aa:	nop    WORD PTR [rax+rax*1+0x0]
    a6b0:	cmp    BYTE PTR [rbp+0x0],0x0
    a6b4:	mov    eax,0xffffffea
    a6b9:	cmovne ebx,eax
    a6bc:	jmp    a5c2 <g_str_equal@plt+0x220a>
    a6c1:	nop    DWORD PTR [rax+0x0]
    a6c8:	movsx  edi,BYTE PTR [rsp+0x4]
    a6cd:	mov    rsi,r12
    a6d0:	movsd  QWORD PTR [rsp+0x8],xmm1
    a6d6:	call   a480 <g_str_equal@plt+0x20c8>
    a6db:	pxor   xmm0,xmm0
    a6df:	pxor   xmm6,xmm6
    a6e3:	movsd  xmm1,QWORD PTR [rsp+0x8]
    a6e9:	cvtsi2sd xmm0,rax
    a6ee:	ucomisd xmm0,xmm6
    a6f2:	jae    a647 <g_str_equal@plt+0x228f>
    a6f8:	lea    rcx,[rip+0x1f519]        # 29c18 <_fini@@Base+0x994>
    a6ff:	lea    rsi,[rip+0x1f522]        # 29c28 <_fini@@Base+0x9a4>
    a706:	lea    rdi,[rip+0x1f552]        # 29c5f <_fini@@Base+0x9db>
    a70d:	mov    edx,0xeb
    a712:	call   7a70 <__assert_fail@plt>
    a717:	nop    WORD PTR [rax+rax*1+0x0]
    a720:	mov    ebx,0xffffffde
    a725:	jmp    a5b5 <g_str_equal@plt+0x21fd>
    a72a:	nop    WORD PTR [rax+rax*1+0x0]
    a730:	subsd  xmm0,xmm1
    a734:	cvttsd2si rax,xmm0
    a739:	mov    QWORD PTR [r14],rax
    a73c:	movabs rax,0x8000000000000000
    a746:	xor    QWORD PTR [r14],rax
    a749:	jmp    a5b5 <g_str_equal@plt+0x21fd>
    a74e:	call   8050 <__stack_chk_fail@plt>
    a753:	nop    DWORD PTR [rax]
    a756:	nop    WORD PTR cs:[rax+rax*1+0x0]
    a760:	push   r12
    a762:	push   rbp
    a763:	mov    ebp,ecx
    a765:	push   rbx
    a766:	mov    ebx,esi
    a768:	mov    rsi,rdx
    a76b:	test   ebx,ebx
    a76d:	jle    a7c0 <g_str_equal@plt+0x2408>
    a76f:	cmp    BYTE PTR [rdx],0x0
    a772:	je     a7c0 <g_str_equal@plt+0x2408>
    a774:	lea    r8d,[rbx-0x1]
    a778:	mov    edx,0x1
    a77d:	add    r8,0x1
    a781:	jmp    a796 <g_str_equal@plt+0x23de>
    a783:	nop    DWORD PTR [rax+rax*1+0x0]
    a788:	lea    rax,[rdx+0x1]
    a78c:	cmp    BYTE PTR [rsi+rax*1-0x1],0x0
    a791:	je     a79d <g_str_equal@plt+0x23e5>
    a793:	mov    rdx,rax
    a796:	cmp    rdx,r8
    a799:	mov    ecx,edx
    a79b:	jne    a788 <g_str_equal@plt+0x23d0>
    a79d:	lea    r12,[rdi+rdx*1]
    a7a1:	sub    ebx,ecx
    a7a3:	call   8330 <memcpy@plt>
    a7a8:	movsxd rdx,ebx
    a7ab:	movsx  esi,bpl
    a7af:	mov    rdi,r12
    a7b2:	pop    rbx
    a7b3:	pop    rbp
    a7b4:	pop    r12
    a7b6:	jmp    7940 <memset@plt>
    a7bb:	nop    DWORD PTR [rax+rax*1+0x0]
    a7c0:	mov    r12,rdi
    a7c3:	xor    edx,edx
    a7c5:	jmp    a7a3 <g_str_equal@plt+0x23eb>
    a7c7:	nop    WORD PTR [rax+rax*1+0x0]
    a7d0:	test   esi,esi
    a7d2:	jle    a81b <g_str_equal@plt+0x2463>
    a7d4:	movzx  ecx,BYTE PTR [rdx]
    a7d7:	lea    rax,[rdx+0x1]
    a7db:	test   cl,cl
    a7dd:	je     a818 <g_str_equal@plt+0x2460>
    a7df:	movsxd rsi,esi
    a7e2:	lea    rsi,[rdi+rsi*1-0x1]
    a7e7:	cmp    rdi,rsi
    a7ea:	jae    a818 <g_str_equal@plt+0x2460>
    a7ec:	sub    rsi,rdi
    a7ef:	lea    rdx,[rdx+rsi*1+0x1]
    a7f4:	jmp    a805 <g_str_equal@plt+0x244d>
    a7f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    a800:	cmp    rax,rdx
    a803:	je     a818 <g_str_equal@plt+0x2460>
    a805:	add    rdi,0x1
    a809:	add    rax,0x1
    a80d:	mov    BYTE PTR [rdi-0x1],cl
    a810:	movzx  ecx,BYTE PTR [rax-0x1]
    a814:	test   cl,cl
    a816:	jne    a800 <g_str_equal@plt+0x2448>
    a818:	mov    BYTE PTR [rdi],0x0
    a81b:	repz ret 
    a81d:	nop    DWORD PTR [rax]
    a820:	push   r12
    a822:	push   rbp
    a823:	mov    r12,rdi
    a826:	push   rbx
    a827:	mov    ebx,esi
    a829:	mov    rbp,rdx
    a82c:	call   7cd0 <strlen@plt>
    a831:	cmp    eax,ebx
    a833:	jge    a885 <g_str_equal@plt+0x24cd>
    a835:	sub    ebx,eax
    a837:	test   ebx,ebx
    a839:	jle    a885 <g_str_equal@plt+0x24cd>
    a83b:	movzx  edi,BYTE PTR [rbp+0x0]
    a83f:	cdqe   
    a841:	lea    rcx,[rbp+0x1]
    a845:	add    rax,r12
    a848:	test   dil,dil
    a84b:	je     a882 <g_str_equal@plt+0x24ca>
    a84d:	movsxd rbx,ebx
    a850:	lea    rdx,[rax+rbx*1-0x1]
    a855:	cmp    rax,rdx
    a858:	jae    a882 <g_str_equal@plt+0x24ca>
    a85a:	sub    rdx,rax
    a85d:	lea    rdx,[rbp+rdx*1+0x1]
    a862:	jmp    a86d <g_str_equal@plt+0x24b5>
    a864:	nop    DWORD PTR [rax+0x0]
    a868:	cmp    rcx,rdx
    a86b:	je     a882 <g_str_equal@plt+0x24ca>
    a86d:	add    rax,0x1
    a871:	add    rcx,0x1
    a875:	mov    BYTE PTR [rax-0x1],dil
    a879:	movzx  edi,BYTE PTR [rcx-0x1]
    a87d:	test   dil,dil
    a880:	jne    a868 <g_str_equal@plt+0x24b0>
    a882:	mov    BYTE PTR [rax],0x0
    a885:	mov    rax,r12
    a888:	pop    rbx
    a889:	pop    rbp
    a88a:	pop    r12
    a88c:	ret    
    a88d:	nop    DWORD PTR [rax]
    a890:	jmp    a8a4 <g_str_equal@plt+0x24ec>
    a892:	nop    WORD PTR [rax+rax*1+0x0]
    a898:	cmp    BYTE PTR [rdi],al
    a89a:	jne    a8c0 <g_str_equal@plt+0x2508>
    a89c:	add    rdi,0x1
    a8a0:	add    rsi,0x1
    a8a4:	movzx  eax,BYTE PTR [rsi]
    a8a7:	test   al,al
    a8a9:	jne    a898 <g_str_equal@plt+0x24e0>
    a8ab:	test   rdx,rdx
    a8ae:	mov    eax,0x1
    a8b3:	je     a8c2 <g_str_equal@plt+0x250a>
    a8b5:	mov    QWORD PTR [rdx],rdi
    a8b8:	ret    
    a8b9:	nop    DWORD PTR [rax+0x0]
    a8c0:	xor    eax,eax
    a8c2:	repz ret 
    a8c4:	xchg   ax,ax
    a8c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    a8d0:	push   r13
    a8d2:	push   r12
    a8d4:	mov    r13,rdx
    a8d7:	push   rbp
    a8d8:	push   rbx
    a8d9:	mov    r12,rdi
    a8dc:	sub    rsp,0x8
    a8e0:	movzx  ebx,BYTE PTR [rsi]
    a8e3:	test   bl,bl
    a8e5:	je     a928 <g_str_equal@plt+0x2570>
    a8e7:	mov    rbp,rsi
    a8ea:	call   7c90 <__ctype_toupper_loc@plt>
    a8ef:	mov    rax,QWORD PTR [rax]
    a8f2:	jmp    a908 <g_str_equal@plt+0x2550>
    a8f4:	nop    DWORD PTR [rax+0x0]
    a8f8:	add    rbp,0x1
    a8fc:	movzx  ebx,BYTE PTR [rbp+0x0]
    a900:	add    r12,0x1
    a904:	test   bl,bl
    a906:	je     a928 <g_str_equal@plt+0x2570>
    a908:	movzx  ecx,BYTE PTR [r12]
    a90d:	mov    edx,DWORD PTR [rax+rbx*4]
    a910:	cmp    DWORD PTR [rax+rcx*4],edx
    a913:	je     a8f8 <g_str_equal@plt+0x2540>
    a915:	xor    eax,eax
    a917:	add    rsp,0x8
    a91b:	pop    rbx
    a91c:	pop    rbp
    a91d:	pop    r12
    a91f:	pop    r13
    a921:	ret    
    a922:	nop    WORD PTR [rax+rax*1+0x0]
    a928:	test   r13,r13
    a92b:	mov    eax,0x1
    a930:	je     a917 <g_str_equal@plt+0x255f>
    a932:	mov    QWORD PTR [r13+0x0],r12
    a936:	add    rsp,0x8
    a93a:	pop    rbx
    a93b:	pop    rbp
    a93c:	pop    r12
    a93e:	pop    r13
    a940:	ret    
    a941:	nop    DWORD PTR [rax+rax*1+0x0]
    a946:	nop    WORD PTR cs:[rax+rax*1+0x0]
    a950:	test   esi,esi
    a952:	jle    a980 <g_str_equal@plt+0x25c8>
    a954:	cmp    BYTE PTR [rdi],0x0
    a957:	je     a980 <g_str_equal@plt+0x25c8>
    a959:	add    rdi,0x1
    a95d:	xor    eax,eax
    a95f:	jmp    a972 <g_str_equal@plt+0x25ba>
    a961:	nop    DWORD PTR [rax+0x0]
    a968:	add    rdi,0x1
    a96c:	cmp    BYTE PTR [rdi-0x1],0x0
    a970:	je     a982 <g_str_equal@plt+0x25ca>
    a972:	add    eax,0x1
    a975:	cmp    esi,eax
    a977:	jne    a968 <g_str_equal@plt+0x25b0>
    a979:	repz ret 
    a97b:	nop    DWORD PTR [rax+rax*1+0x0]
    a980:	xor    eax,eax
    a982:	repz ret 
    a984:	xchg   ax,ax
    a986:	nop    WORD PTR cs:[rax+rax*1+0x0]
    a990:	push   r13
    a992:	push   r12
    a994:	push   rbp
    a995:	push   rbx
    a996:	sub    rsp,0x8
    a99a:	mov    r12,QWORD PTR [rdi]
    a99d:	test   r12,r12
    a9a0:	je     a9e4 <g_str_equal@plt+0x262c>
    a9a2:	mov    rbp,rsi
    a9a5:	movsx  esi,BYTE PTR [r12]
    a9aa:	mov    r13,rdi
    a9ad:	test   sil,sil
    a9b0:	je     a9f8 <g_str_equal@plt+0x2640>
    a9b2:	mov    rbx,r12
    a9b5:	jmp    a9cc <g_str_equal@plt+0x2614>
    a9b7:	nop    WORD PTR [rax+rax*1+0x0]
    a9c0:	movsx  esi,BYTE PTR [rbx+0x1]
    a9c4:	mov    rbx,rdx
    a9c7:	test   sil,sil
    a9ca:	je     a9f8 <g_str_equal@plt+0x2640>
    a9cc:	mov    rdi,rbp
    a9cf:	call   7f90 <strchr@plt>
    a9d4:	test   rax,rax
    a9d7:	lea    rdx,[rbx+0x1]
    a9db:	je     a9c0 <g_str_equal@plt+0x2608>
    a9dd:	mov    BYTE PTR [rbx],0x0
    a9e0:	mov    QWORD PTR [r13+0x0],rdx
    a9e4:	add    rsp,0x8
    a9e8:	mov    rax,r12
    a9eb:	pop    rbx
    a9ec:	pop    rbp
    a9ed:	pop    r12
    a9ef:	pop    r13
    a9f1:	ret    
    a9f2:	nop    WORD PTR [rax+rax*1+0x0]
    a9f8:	mov    QWORD PTR [r13+0x0],0x0
    aa00:	add    rsp,0x8
    aa04:	mov    rax,r12
    aa07:	pop    rbx
    aa08:	pop    rbp
    aa09:	pop    r12
    aa0b:	pop    r13
    aa0d:	ret    
    aa0e:	xchg   ax,ax
    aa10:	mov    eax,DWORD PTR [rdi+0x10]
    aa13:	mov    r8d,DWORD PTR [rdi+0x14]
    aa17:	mov    edx,DWORD PTR [rdi+0xc]
    aa1a:	lea    r9d,[rax+0x1]
    aa1e:	cmp    r9d,0x2
    aa22:	jg     aac0 <g_str_equal@plt+0x2708>
    aa28:	lea    r9d,[rax+0xd]
    aa2c:	add    r8d,0x76b
    aa33:	imul   eax,r8d,0x16d
    aa3a:	lea    esi,[r8+0x3]
    aa3e:	test   r8d,r8d
    aa41:	cmovns esi,r8d
    aa45:	lea    edx,[rdx+rax*1-0xafa6d]
    aa4c:	sar    esi,0x2
    aa4f:	mov    eax,r8d
    aa52:	imul   r9d,r9d,0x99
    aa59:	sar    r8d,0x1f
    aa5d:	add    esi,edx
    aa5f:	mov    edx,0x51eb851f
    aa64:	mov    ecx,r8d
    aa67:	imul   edx
    aa69:	sub    r9d,0x1c9
    aa70:	mov    eax,edx
    aa72:	sar    edx,0x7
    aa75:	sar    eax,0x5
    aa78:	sub    edx,r8d
    aa7b:	sub    ecx,eax
    aa7d:	mov    eax,r9d
    aa80:	sar    r9d,0x1f
    aa84:	add    esi,ecx
    aa86:	lea    ecx,[rsi+rdx*1]
    aa89:	mov    edx,0x66666667
    aa8e:	imul   edx
    aa90:	mov    eax,edx
    aa92:	sar    eax,1
    aa94:	sub    eax,r9d
    aa97:	add    eax,ecx
    aa99:	imul   edx,DWORD PTR [rdi+0x4],0x3c
    aa9d:	imul   ecx,DWORD PTR [rdi+0x8],0xe10
    aaa4:	cdqe   
    aaa6:	imul   rax,rax,0x15180
    aaad:	add    ecx,edx
    aaaf:	add    ecx,DWORD PTR [rdi]
    aab1:	movsxd rcx,ecx
    aab4:	add    rax,rcx
    aab7:	ret    
    aab8:	nop    DWORD PTR [rax+rax*1+0x0]
    aac0:	add    r8d,0x76c
    aac7:	jmp    aa33 <g_str_equal@plt+0x267b>
    aacc:	nop    DWORD PTR [rax+0x0]
    aad0:	jmp    7db0 <fdatasync@plt>
    aad5:	nop
    aad6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    aae0:	push   rbp
    aae1:	push   rbx
    aae2:	xor    eax,eax
    aae4:	mov    ebp,esi
    aae6:	mov    esi,0x3
    aaeb:	mov    ebx,edi
    aaed:	sub    rsp,0x8
    aaf1:	call   8340 <fcntl@plt>
    aaf6:	cmp    eax,0xffffffff
    aaf9:	je     ab20 <g_str_equal@plt+0x2768>
    aafb:	or     eax,ebp
    aafd:	mov    esi,0x4
    ab02:	mov    edi,ebx
    ab04:	mov    edx,eax
    ab06:	xor    eax,eax
    ab08:	call   8340 <fcntl@plt>
    ab0d:	mov    edx,eax
    ab0f:	xor    eax,eax
    ab11:	cmp    edx,0xffffffff
    ab14:	je     ab20 <g_str_equal@plt+0x2768>
    ab16:	add    rsp,0x8
    ab1a:	pop    rbx
    ab1b:	pop    rbp
    ab1c:	ret    
    ab1d:	nop    DWORD PTR [rax]
    ab20:	call   7fd0 <__errno_location@plt>
    ab25:	mov    eax,DWORD PTR [rax]
    ab27:	add    rsp,0x8
    ab2b:	pop    rbx
    ab2c:	pop    rbp
    ab2d:	neg    eax
    ab2f:	ret    
    ab30:	mov    r8,rdx
    ab33:	mov    ecx,0x400
    ab38:	mov    edx,0x42
    ab3d:	jmp    a550 <g_str_equal@plt+0x2198>
    ab42:	nop    DWORD PTR [rax+0x0]
    ab46:	nop    WORD PTR cs:[rax+rax*1+0x0]
    ab50:	mov    r8,rdx
    ab53:	mov    ecx,0x400
    ab58:	mov    edx,0x4d
    ab5d:	jmp    a550 <g_str_equal@plt+0x2198>
    ab62:	nop    DWORD PTR [rax+0x0]
    ab66:	nop    WORD PTR cs:[rax+rax*1+0x0]
    ab70:	mov    r8,rdx
    ab73:	mov    ecx,0x3e8
    ab78:	mov    edx,0x42
    ab7d:	jmp    a550 <g_str_equal@plt+0x2198>
    ab82:	nop    DWORD PTR [rax+0x0]
    ab86:	nop    WORD PTR cs:[rax+rax*1+0x0]
    ab90:	push   r13
    ab92:	push   r12
    ab94:	push   rbp
    ab95:	push   rbx
    ab96:	mov    rbx,rsi
    ab99:	sub    rsp,0x28
    ab9d:	mov    rax,QWORD PTR fs:0x28
    aba6:	mov    QWORD PTR [rsp+0x18],rax
    abab:	xor    eax,eax
    abad:	test   rdi,rdi
    abb0:	je     ac48 <g_str_equal@plt+0x2890>
    abb6:	mov    rbp,rdi
    abb9:	mov    r13,rcx
    abbc:	mov    DWORD PTR [rsp+0xc],edx
    abc0:	call   7fd0 <__errno_location@plt>
    abc5:	mov    edx,DWORD PTR [rsp+0xc]
    abc9:	lea    rsi,[rsp+0x10]
    abce:	mov    DWORD PTR [rax],0x0
    abd4:	mov    rdi,rbp
    abd7:	mov    r12,rax
    abda:	call   8220 <strtoll@plt>
    abdf:	cmp    rax,0xffffffff80000000
    abe5:	jge    ac18 <g_str_equal@plt+0x2860>
    abe7:	test   rbx,rbx
    abea:	mov    DWORD PTR [r13+0x0],0x80000000
    abf2:	mov    rdx,QWORD PTR [rsp+0x10]
    abf7:	mov    DWORD PTR [r12],0x22
    abff:	je     aca0 <g_str_equal@plt+0x28e8>
    ac05:	mov    QWORD PTR [rbx],rdx
    ac08:	mov    eax,0x22
    ac0d:	neg    eax
    ac0f:	jmp    ac59 <g_str_equal@plt+0x28a1>
    ac11:	nop    DWORD PTR [rax+0x0]
    ac18:	cmp    rax,0x7fffffff
    ac1e:	mov    rdx,QWORD PTR [rsp+0x10]
    ac23:	jle    ac78 <g_str_equal@plt+0x28c0>
    ac25:	test   rbx,rbx
    ac28:	mov    DWORD PTR [r13+0x0],0x7fffffff
    ac30:	mov    DWORD PTR [r12],0x22
    ac38:	je     aca0 <g_str_equal@plt+0x28e8>
    ac3a:	mov    QWORD PTR [rbx],rdx
    ac3d:	mov    eax,0xffffffde
    ac42:	jmp    ac59 <g_str_equal@plt+0x28a1>
    ac44:	nop    DWORD PTR [rax+0x0]
    ac48:	test   rsi,rsi
    ac4b:	je     ac54 <g_str_equal@plt+0x289c>
    ac4d:	mov    QWORD PTR [rsi],0x0
    ac54:	mov    eax,0xffffffea
    ac59:	mov    rcx,QWORD PTR [rsp+0x18]
    ac5e:	xor    rcx,QWORD PTR fs:0x28
    ac67:	jne    acba <g_str_equal@plt+0x2902>
    ac69:	add    rsp,0x28
    ac6d:	pop    rbx
    ac6e:	pop    rbp
    ac6f:	pop    r12
    ac71:	pop    r13
    ac73:	ret    
    ac74:	nop    DWORD PTR [rax+0x0]
    ac78:	cmp    rbp,rdx
    ac7b:	mov    DWORD PTR [r13+0x0],eax
    ac7f:	mov    eax,DWORD PTR [r12]
    ac83:	sete   cl
    ac86:	test   rbx,rbx
    ac89:	je     acb0 <g_str_equal@plt+0x28f8>
    ac8b:	test   eax,eax
    ac8d:	mov    QWORD PTR [rbx],rdx
    ac90:	jne    ac0d <g_str_equal@plt+0x2855>
    ac96:	test   cl,cl
    ac98:	jne    ac54 <g_str_equal@plt+0x289c>
    ac9a:	neg    eax
    ac9c:	jmp    ac59 <g_str_equal@plt+0x28a1>
    ac9e:	xchg   ax,ax
    aca0:	mov    eax,0x22
    aca5:	cmp    BYTE PTR [rdx],0x0
    aca8:	jne    ac54 <g_str_equal@plt+0x289c>
    acaa:	neg    eax
    acac:	jmp    ac59 <g_str_equal@plt+0x28a1>
    acae:	xchg   ax,ax
    acb0:	test   eax,eax
    acb2:	jne    aca5 <g_str_equal@plt+0x28ed>
    acb4:	test   cl,cl
    acb6:	je     aca5 <g_str_equal@plt+0x28ed>
    acb8:	jmp    ac54 <g_str_equal@plt+0x289c>
    acba:	call   8050 <__stack_chk_fail@plt>
    acbf:	nop
    acc0:	push   r13
    acc2:	push   r12
    acc4:	push   rbp
    acc5:	push   rbx
    acc6:	mov    rbp,rsi
    acc9:	sub    rsp,0x28
    accd:	mov    rax,QWORD PTR fs:0x28
    acd6:	mov    QWORD PTR [rsp+0x18],rax
    acdb:	xor    eax,eax
    acdd:	test   rdi,rdi
    ace0:	je     ad58 <g_str_equal@plt+0x29a0>
    ace2:	mov    rbx,rdi
    ace5:	mov    r13,rcx
    ace8:	mov    DWORD PTR [rsp+0xc],edx
    acec:	call   7fd0 <__errno_location@plt>
    acf1:	mov    edx,DWORD PTR [rsp+0xc]
    acf5:	lea    rsi,[rsp+0x10]
    acfa:	mov    r12,rax
    acfd:	mov    DWORD PTR [rax],0x0
    ad03:	mov    rdi,rbx
    ad06:	call   8160 <strtoull@plt>
    ad0b:	cmp    DWORD PTR [r12],0x22
    ad10:	je     ad90 <g_str_equal@plt+0x29d8>
    ad12:	mov    ecx,0xffffffff
    ad17:	mov    rdx,QWORD PTR [rsp+0x10]
    ad1c:	cmp    rax,rcx
    ad1f:	jg     adc0 <g_str_equal@plt+0x2a08>
    ad25:	cmp    rax,0xffffffff80000000
    ad2b:	jge    ae00 <g_str_equal@plt+0x2a48>
    ad31:	test   rbp,rbp
    ad34:	mov    DWORD PTR [r13+0x0],0xffffffff
    ad3c:	mov    DWORD PTR [r12],0x22
    ad44:	je     ae10 <g_str_equal@plt+0x2a58>
    ad4a:	mov    QWORD PTR [rbp+0x0],rdx
    ad4e:	mov    eax,0xffffffde
    ad53:	jmp    ad69 <g_str_equal@plt+0x29b1>
    ad55:	nop    DWORD PTR [rax]
    ad58:	test   rsi,rsi
    ad5b:	je     ad64 <g_str_equal@plt+0x29ac>
    ad5d:	mov    QWORD PTR [rsi],0x0
    ad64:	mov    eax,0xffffffea
    ad69:	mov    rdi,QWORD PTR [rsp+0x18]
    ad6e:	xor    rdi,QWORD PTR fs:0x28
    ad77:	jne    ae17 <g_str_equal@plt+0x2a5f>
    ad7d:	add    rsp,0x28
    ad81:	pop    rbx
    ad82:	pop    rbp
    ad83:	pop    r12
    ad85:	pop    r13
    ad87:	ret    
    ad88:	nop    DWORD PTR [rax+rax*1+0x0]
    ad90:	mov    rdx,QWORD PTR [rsp+0x10]
    ad95:	mov    DWORD PTR [r13+0x0],0xffffffff
    ad9d:	mov    eax,DWORD PTR [r12]
    ada1:	cmp    rbx,rdx
    ada4:	sete   cl
    ada7:	test   eax,eax
    ada9:	sete   sil
    adad:	and    ecx,esi
    adaf:	test   rbp,rbp
    adb2:	je     ade8 <g_str_equal@plt+0x2a30>
    adb4:	test   cl,cl
    adb6:	mov    QWORD PTR [rbp+0x0],rdx
    adba:	jne    ad64 <g_str_equal@plt+0x29ac>
    adbc:	neg    eax
    adbe:	jmp    ad69 <g_str_equal@plt+0x29b1>
    adc0:	test   rbp,rbp
    adc3:	mov    DWORD PTR [r13+0x0],0xffffffff
    adcb:	mov    DWORD PTR [r12],0x22
    add3:	je     ae10 <g_str_equal@plt+0x2a58>
    add5:	mov    eax,0x22
    adda:	mov    QWORD PTR [rbp+0x0],rdx
    adde:	neg    eax
    ade0:	jmp    ad69 <g_str_equal@plt+0x29b1>
    ade2:	nop    WORD PTR [rax+rax*1+0x0]
    ade8:	test   cl,cl
    adea:	jne    ad64 <g_str_equal@plt+0x29ac>
    adf0:	cmp    BYTE PTR [rdx],0x0
    adf3:	jne    ad64 <g_str_equal@plt+0x29ac>
    adf9:	neg    eax
    adfb:	jmp    ad69 <g_str_equal@plt+0x29b1>
    ae00:	mov    DWORD PTR [r13+0x0],eax
    ae04:	jmp    ad9d <g_str_equal@plt+0x29e5>
    ae06:	nop    WORD PTR cs:[rax+rax*1+0x0]
    ae10:	mov    eax,0x22
    ae15:	jmp    adf0 <g_str_equal@plt+0x2a38>
    ae17:	call   8050 <__stack_chk_fail@plt>
    ae1c:	nop    DWORD PTR [rax+0x0]
    ae20:	push   r13
    ae22:	push   r12
    ae24:	push   rbp
    ae25:	push   rbx
    ae26:	mov    rbp,rsi
    ae29:	sub    rsp,0x28
    ae2d:	mov    rax,QWORD PTR fs:0x28
    ae36:	mov    QWORD PTR [rsp+0x18],rax
    ae3b:	xor    eax,eax
    ae3d:	test   rdi,rdi
    ae40:	je     aeb0 <g_str_equal@plt+0x2af8>
    ae42:	mov    r13,rcx
    ae45:	mov    rbx,rdi
    ae48:	mov    DWORD PTR [rsp+0xc],edx
    ae4c:	call   7fd0 <__errno_location@plt>
    ae51:	mov    edx,DWORD PTR [rsp+0xc]
    ae55:	lea    rsi,[rsp+0x10]
    ae5a:	mov    DWORD PTR [rax],0x0
    ae60:	mov    rdi,rbx
    ae63:	mov    r12,rax
    ae66:	call   7f00 <strtol@plt>
    ae6b:	test   rbp,rbp
    ae6e:	mov    QWORD PTR [r13+0x0],rax
    ae72:	mov    rdx,QWORD PTR [rsp+0x10]
    ae77:	mov    eax,DWORD PTR [r12]
    ae7b:	je     aec8 <g_str_equal@plt+0x2b10>
    ae7d:	test   eax,eax
    ae7f:	mov    QWORD PTR [rbp+0x0],rdx
    ae83:	jne    ae8a <g_str_equal@plt+0x2ad2>
    ae85:	cmp    rdx,rbx
    ae88:	je     aebc <g_str_equal@plt+0x2b04>
    ae8a:	neg    eax
    ae8c:	mov    rcx,QWORD PTR [rsp+0x18]
    ae91:	xor    rcx,QWORD PTR fs:0x28
    ae9a:	jne    aed8 <g_str_equal@plt+0x2b20>
    ae9c:	add    rsp,0x28
    aea0:	pop    rbx
    aea1:	pop    rbp
    aea2:	pop    r12
    aea4:	pop    r13
    aea6:	ret    
    aea7:	nop    WORD PTR [rax+rax*1+0x0]
    aeb0:	test   rsi,rsi
    aeb3:	je     aebc <g_str_equal@plt+0x2b04>
    aeb5:	mov    QWORD PTR [rsi],0x0
    aebc:	mov    eax,0xffffffea
    aec1:	jmp    ae8c <g_str_equal@plt+0x2ad4>
    aec3:	nop    DWORD PTR [rax+rax*1+0x0]
    aec8:	test   eax,eax
    aeca:	jne    aed1 <g_str_equal@plt+0x2b19>
    aecc:	cmp    rdx,rbx
    aecf:	je     aebc <g_str_equal@plt+0x2b04>
    aed1:	cmp    BYTE PTR [rdx],0x0
    aed4:	je     ae8a <g_str_equal@plt+0x2ad2>
    aed6:	jmp    aebc <g_str_equal@plt+0x2b04>
    aed8:	call   8050 <__stack_chk_fail@plt>
    aedd:	nop    DWORD PTR [rax]
    aee0:	push   r13
    aee2:	push   r12
    aee4:	push   rbp
    aee5:	push   rbx
    aee6:	mov    rbp,rsi
    aee9:	sub    rsp,0x28
    aeed:	mov    rax,QWORD PTR fs:0x28
    aef6:	mov    QWORD PTR [rsp+0x18],rax
    aefb:	xor    eax,eax
    aefd:	test   rdi,rdi
    af00:	je     af80 <g_str_equal@plt+0x2bc8>
    af02:	mov    r13,rcx
    af05:	mov    rbx,rdi
    af08:	mov    DWORD PTR [rsp+0xc],edx
    af0c:	call   7fd0 <__errno_location@plt>
    af11:	mov    edx,DWORD PTR [rsp+0xc]
    af15:	lea    rsi,[rsp+0x10]
    af1a:	mov    r12,rax
    af1d:	mov    DWORD PTR [rax],0x0
    af23:	mov    rdi,rbx
    af26:	call   82e0 <strtoul@plt>
    af2b:	mov    QWORD PTR [r13+0x0],rax
    af2f:	cmp    DWORD PTR [r12],0x22
    af34:	mov    rdx,0xffffffffffffffff
    af3b:	cmove  rax,rdx
    af3f:	mov    rdx,QWORD PTR [rsp+0x10]
    af44:	mov    QWORD PTR [r13+0x0],rax
    af48:	mov    eax,DWORD PTR [r12]
    af4c:	cmp    rdx,rbx
    af4f:	sete   cl
    af52:	test   rbp,rbp
    af55:	je     af98 <g_str_equal@plt+0x2be0>
    af57:	test   eax,eax
    af59:	mov    QWORD PTR [rbp+0x0],rdx
    af5d:	jne    af63 <g_str_equal@plt+0x2bab>
    af5f:	test   cl,cl
    af61:	jne    af8c <g_str_equal@plt+0x2bd4>
    af63:	neg    eax
    af65:	mov    rdi,QWORD PTR [rsp+0x18]
    af6a:	xor    rdi,QWORD PTR fs:0x28
    af73:	jne    afa7 <g_str_equal@plt+0x2bef>
    af75:	add    rsp,0x28
    af79:	pop    rbx
    af7a:	pop    rbp
    af7b:	pop    r12
    af7d:	pop    r13
    af7f:	ret    
    af80:	test   rsi,rsi
    af83:	je     af8c <g_str_equal@plt+0x2bd4>
    af85:	mov    QWORD PTR [rsi],0x0
    af8c:	mov    eax,0xffffffea
    af91:	jmp    af65 <g_str_equal@plt+0x2bad>
    af93:	nop    DWORD PTR [rax+rax*1+0x0]
    af98:	test   eax,eax
    af9a:	jne    afa0 <g_str_equal@plt+0x2be8>
    af9c:	test   cl,cl
    af9e:	jne    af8c <g_str_equal@plt+0x2bd4>
    afa0:	cmp    BYTE PTR [rdx],0x0
    afa3:	je     af63 <g_str_equal@plt+0x2bab>
    afa5:	jmp    af8c <g_str_equal@plt+0x2bd4>
    afa7:	call   8050 <__stack_chk_fail@plt>
    afac:	nop    DWORD PTR [rax+0x0]
    afb0:	push   r13
    afb2:	push   r12
    afb4:	push   rbp
    afb5:	push   rbx
    afb6:	mov    rbp,rsi
    afb9:	sub    rsp,0x28
    afbd:	mov    rax,QWORD PTR fs:0x28
    afc6:	mov    QWORD PTR [rsp+0x18],rax
    afcb:	xor    eax,eax
    afcd:	test   rdi,rdi
    afd0:	je     b040 <g_str_equal@plt+0x2c88>
    afd2:	mov    r13,rcx
    afd5:	mov    rbx,rdi
    afd8:	mov    DWORD PTR [rsp+0xc],edx
    afdc:	call   7fd0 <__errno_location@plt>
    afe1:	mov    edx,DWORD PTR [rsp+0xc]
    afe5:	lea    rsi,[rsp+0x10]
    afea:	mov    DWORD PTR [rax],0x0
    aff0:	mov    rdi,rbx
    aff3:	mov    r12,rax
    aff6:	call   8220 <strtoll@plt>
    affb:	test   rbp,rbp
    affe:	mov    QWORD PTR [r13+0x0],rax
    b002:	mov    rdx,QWORD PTR [rsp+0x10]
    b007:	mov    eax,DWORD PTR [r12]
    b00b:	je     b058 <g_str_equal@plt+0x2ca0>
    b00d:	test   eax,eax
    b00f:	mov    QWORD PTR [rbp+0x0],rdx
    b013:	jne    b01a <g_str_equal@plt+0x2c62>
    b015:	cmp    rdx,rbx
    b018:	je     b04c <g_str_equal@plt+0x2c94>
    b01a:	neg    eax
    b01c:	mov    rcx,QWORD PTR [rsp+0x18]
    b021:	xor    rcx,QWORD PTR fs:0x28
    b02a:	jne    b068 <g_str_equal@plt+0x2cb0>
    b02c:	add    rsp,0x28
    b030:	pop    rbx
    b031:	pop    rbp
    b032:	pop    r12
    b034:	pop    r13
    b036:	ret    
    b037:	nop    WORD PTR [rax+rax*1+0x0]
    b040:	test   rsi,rsi
    b043:	je     b04c <g_str_equal@plt+0x2c94>
    b045:	mov    QWORD PTR [rsi],0x0
    b04c:	mov    eax,0xffffffea
    b051:	jmp    b01c <g_str_equal@plt+0x2c64>
    b053:	nop    DWORD PTR [rax+rax*1+0x0]
    b058:	test   eax,eax
    b05a:	jne    b061 <g_str_equal@plt+0x2ca9>
    b05c:	cmp    rdx,rbx
    b05f:	je     b04c <g_str_equal@plt+0x2c94>
    b061:	cmp    BYTE PTR [rdx],0x0
    b064:	je     b01a <g_str_equal@plt+0x2c62>
    b066:	jmp    b04c <g_str_equal@plt+0x2c94>
    b068:	call   8050 <__stack_chk_fail@plt>
    b06d:	nop    DWORD PTR [rax]
    b070:	push   r13
    b072:	push   r12
    b074:	push   rbp
    b075:	push   rbx
    b076:	mov    rbp,rsi
    b079:	sub    rsp,0x28
    b07d:	mov    rax,QWORD PTR fs:0x28
    b086:	mov    QWORD PTR [rsp+0x18],rax
    b08b:	xor    eax,eax
    b08d:	test   rdi,rdi
    b090:	je     b110 <g_str_equal@plt+0x2d58>
    b092:	mov    r13,rcx
    b095:	mov    rbx,rdi
    b098:	mov    DWORD PTR [rsp+0xc],edx
    b09c:	call   7fd0 <__errno_location@plt>
    b0a1:	mov    edx,DWORD PTR [rsp+0xc]
    b0a5:	lea    rsi,[rsp+0x10]
    b0aa:	mov    r12,rax
    b0ad:	mov    DWORD PTR [rax],0x0
    b0b3:	mov    rdi,rbx
    b0b6:	call   8160 <strtoull@plt>
    b0bb:	mov    QWORD PTR [r13+0x0],rax
    b0bf:	cmp    DWORD PTR [r12],0x22
    b0c4:	mov    rdx,0xffffffffffffffff
    b0cb:	cmove  rax,rdx
    b0cf:	mov    rdx,QWORD PTR [rsp+0x10]
    b0d4:	mov    QWORD PTR [r13+0x0],rax
    b0d8:	mov    eax,DWORD PTR [r12]
    b0dc:	cmp    rdx,rbx
    b0df:	sete   cl
    b0e2:	test   rbp,rbp
    b0e5:	je     b128 <g_str_equal@plt+0x2d70>
    b0e7:	test   eax,eax
    b0e9:	mov    QWORD PTR [rbp+0x0],rdx
    b0ed:	jne    b0f3 <g_str_equal@plt+0x2d3b>
    b0ef:	test   cl,cl
    b0f1:	jne    b11c <g_str_equal@plt+0x2d64>
    b0f3:	neg    eax
    b0f5:	mov    rdi,QWORD PTR [rsp+0x18]
    b0fa:	xor    rdi,QWORD PTR fs:0x28
    b103:	jne    b137 <g_str_equal@plt+0x2d7f>
    b105:	add    rsp,0x28
    b109:	pop    rbx
    b10a:	pop    rbp
    b10b:	pop    r12
    b10d:	pop    r13
    b10f:	ret    
    b110:	test   rsi,rsi
    b113:	je     b11c <g_str_equal@plt+0x2d64>
    b115:	mov    QWORD PTR [rsi],0x0
    b11c:	mov    eax,0xffffffea
    b121:	jmp    b0f5 <g_str_equal@plt+0x2d3d>
    b123:	nop    DWORD PTR [rax+rax*1+0x0]
    b128:	test   eax,eax
    b12a:	jne    b130 <g_str_equal@plt+0x2d78>
    b12c:	test   cl,cl
    b12e:	jne    b11c <g_str_equal@plt+0x2d64>
    b130:	cmp    BYTE PTR [rdx],0x0
    b133:	je     b0f3 <g_str_equal@plt+0x2d3b>
    b135:	jmp    b11c <g_str_equal@plt+0x2d64>
    b137:	call   8050 <__stack_chk_fail@plt>
    b13c:	nop    DWORD PTR [rax+0x0]
    b140:	push   r15
    b142:	push   r14
    b144:	push   r13
    b146:	push   r12
    b148:	mov    r13,rsi
    b14b:	push   rbp
    b14c:	push   rbx
    b14d:	mov    r12,rdx
    b150:	sub    rsp,0x18
    b154:	mov    rax,QWORD PTR fs:0x28
    b15d:	mov    QWORD PTR [rsp+0x8],rax
    b162:	xor    eax,eax
    b164:	test   rdi,rdi
    b167:	mov    QWORD PTR [rsp],rdi
    b16b:	je     b208 <g_str_equal@plt+0x2e50>
    b171:	mov    r14d,ecx
    b174:	mov    rbx,rdi
    b177:	call   7fd0 <__errno_location@plt>
    b17c:	mov    edx,r14d
    b17f:	mov    rbp,rax
    b182:	mov    DWORD PTR [rax],0x0
    b188:	mov    rsi,rsp
    b18b:	mov    rdi,rbx
    b18e:	call   8160 <strtoull@plt>
    b193:	mov    ebp,DWORD PTR [rbp+0x0]
    b196:	mov    r14,rax
    b199:	test   ebp,ebp
    b19b:	jne    b200 <g_str_equal@plt+0x2e48>
    b19d:	mov    r15,QWORD PTR [rsp]
    b1a1:	cmp    r15,rbx
    b1a4:	je     b215 <g_str_equal@plt+0x2e5d>
    b1a6:	call   7d60 <__ctype_b_loc@plt>
    b1ab:	mov    rcx,QWORD PTR [rax]
    b1ae:	jmp    b1b4 <g_str_equal@plt+0x2dfc>
    b1b0:	add    rbx,0x1
    b1b4:	movzx  edx,BYTE PTR [rbx]
    b1b7:	test   BYTE PTR [rcx+rdx*2+0x1],0x20
    b1bc:	jne    b1b0 <g_str_equal@plt+0x2df8>
    b1be:	cmp    dl,0x2d
    b1c1:	mov    eax,0xffffffde
    b1c6:	mov    edx,0x0
    b1cb:	cmove  r14,rdx
    b1cf:	cmove  ebp,eax
    b1d2:	mov    rdi,QWORD PTR [rsp+0x8]
    b1d7:	xor    rdi,QWORD PTR fs:0x28
    b1e0:	mov    QWORD PTR [r13+0x0],r14
    b1e4:	mov    eax,ebp
    b1e6:	mov    QWORD PTR [r12],r15
    b1ea:	jne    b21c <g_str_equal@plt+0x2e64>
    b1ec:	add    rsp,0x18
    b1f0:	pop    rbx
    b1f1:	pop    rbp
    b1f2:	pop    r12
    b1f4:	pop    r13
    b1f6:	pop    r14
    b1f8:	pop    r15
    b1fa:	ret    
    b1fb:	nop    DWORD PTR [rax+rax*1+0x0]
    b200:	neg    ebp
    b202:	mov    r15,QWORD PTR [rsp]
    b206:	jmp    b1d2 <g_str_equal@plt+0x2e1a>
    b208:	xor    r15d,r15d
    b20b:	xor    r14d,r14d
    b20e:	mov    ebp,0xffffffea
    b213:	jmp    b1d2 <g_str_equal@plt+0x2e1a>
    b215:	mov    ebp,0xffffffea
    b21a:	jmp    b1d2 <g_str_equal@plt+0x2e1a>
    b21c:	call   8050 <__stack_chk_fail@plt>
    b221:	nop    DWORD PTR [rax+rax*1+0x0]
    b226:	nop    WORD PTR cs:[rax+rax*1+0x0]
    b230:	push   rbx
    b231:	mov    ecx,edx
    b233:	mov    rbx,rsi
    b236:	sub    rsp,0x10
    b23a:	mov    rax,QWORD PTR fs:0x28
    b243:	mov    QWORD PTR [rsp+0x8],rax
    b248:	xor    eax,eax
    b24a:	mov    rax,rsp
    b24d:	mov    rdx,rax
    b250:	call   b140 <g_str_equal@plt+0x2d88>
    b255:	test   eax,eax
    b257:	js     b264 <g_str_equal@plt+0x2eac>
    b259:	mov    rax,QWORD PTR [rsp]
    b25d:	cmp    BYTE PTR [rax],0x0
    b260:	jne    b280 <g_str_equal@plt+0x2ec8>
    b262:	xor    eax,eax
    b264:	mov    rcx,QWORD PTR [rsp+0x8]
    b269:	xor    rcx,QWORD PTR fs:0x28
    b272:	jne    b28e <g_str_equal@plt+0x2ed6>
    b274:	add    rsp,0x10
    b278:	pop    rbx
    b279:	ret    
    b27a:	nop    WORD PTR [rax+rax*1+0x0]
    b280:	mov    QWORD PTR [rbx],0x0
    b287:	mov    eax,0xffffffea
    b28c:	jmp    b264 <g_str_equal@plt+0x2eac>
    b28e:	call   8050 <__stack_chk_fail@plt>
    b293:	nop    DWORD PTR [rax]
    b296:	nop    WORD PTR cs:[rax+rax*1+0x0]
    b2a0:	push   rbp
    b2a1:	push   rbx
    b2a2:	mov    rbx,rdi
    b2a5:	sub    rsp,0x18
    b2a9:	mov    rax,QWORD PTR fs:0x28
    b2b2:	mov    QWORD PTR [rsp+0x8],rax
    b2b7:	xor    eax,eax
    b2b9:	call   7fd0 <__errno_location@plt>
    b2be:	mov    edx,0xa
    b2c3:	mov    DWORD PTR [rax],0x0
    b2c9:	mov    rsi,rsp
    b2cc:	mov    rdi,rbx
    b2cf:	mov    rbp,rax
    b2d2:	call   7f00 <strtol@plt>
    b2d7:	mov    rdx,QWORD PTR [rsp]
    b2db:	cmp    rdx,rbx
    b2de:	je     b318 <g_str_equal@plt+0x2f60>
    b2e0:	mov    ecx,DWORD PTR [rbp+0x0]
    b2e3:	test   ecx,ecx
    b2e5:	jne    b318 <g_str_equal@plt+0x2f60>
    b2e7:	cmp    BYTE PTR [rdx],0x0
    b2ea:	jne    b318 <g_str_equal@plt+0x2f60>
    b2ec:	cmp    rax,0x7fffffff
    b2f2:	mov    edx,0xffffffff
    b2f7:	cmova  eax,edx
    b2fa:	mov    rcx,QWORD PTR [rsp+0x8]
    b2ff:	xor    rcx,QWORD PTR fs:0x28
    b308:	jne    b31f <g_str_equal@plt+0x2f67>
    b30a:	add    rsp,0x18
    b30e:	pop    rbx
    b30f:	pop    rbp
    b310:	ret    
    b311:	nop    DWORD PTR [rax+0x0]
    b318:	mov    eax,0xffffffff
    b31d:	jmp    b2fa <g_str_equal@plt+0x2f42>
    b31f:	call   8050 <__stack_chk_fail@plt>
    b324:	xchg   ax,ax
    b326:	nop    WORD PTR cs:[rax+rax*1+0x0]
    b330:	cmp    esi,0x3fff
    b336:	jbe    b360 <g_str_equal@plt+0x2fa8>
    b338:	lea    r8,[rip+0x1e929]        # 29c68 <_fini@@Base+0x9e4>
    b33f:	lea    rcx,[rip+0x1e8ba]        # 29c00 <_fini@@Base+0x97c>
    b346:	lea    rsi,[rip+0x1e8db]        # 29c28 <_fini@@Base+0x9a4>
    b34d:	sub    rsp,0x8
    b351:	mov    edx,0x2ac
    b356:	xor    edi,edi
    b358:	call   7ca0 <g_assertion_message_expr@plt>
    b35d:	nop    DWORD PTR [rax]
    b360:	cmp    esi,0x7f
    b363:	ja     b370 <g_str_equal@plt+0x2fb8>
    b365:	mov    BYTE PTR [rdi],sil
    b368:	mov    eax,0x1
    b36d:	ret    
    b36e:	xchg   ax,ax
    b370:	mov    eax,esi
    b372:	shr    esi,0x7
    b375:	or     eax,0xffffff80
    b378:	mov    BYTE PTR [rdi+0x1],sil
    b37c:	mov    BYTE PTR [rdi],al
    b37e:	mov    eax,0x2
    b383:	ret    
    b384:	xchg   ax,ax
    b386:	nop    WORD PTR cs:[rax+rax*1+0x0]
    b390:	movzx  eax,BYTE PTR [rdi]
    b393:	test   al,al
    b395:	js     b3a0 <g_str_equal@plt+0x2fe8>
    b397:	mov    DWORD PTR [rsi],eax
    b399:	mov    eax,0x1
    b39e:	ret    
    b39f:	nop
    b3a0:	and    eax,0x7f
    b3a3:	mov    DWORD PTR [rsi],eax
    b3a5:	movzx  edx,BYTE PTR [rdi+0x1]
    b3a9:	test   dl,dl
    b3ab:	js     b3ba <g_str_equal@plt+0x3002>
    b3ad:	shl    edx,0x7
    b3b0:	or     eax,edx
    b3b2:	mov    DWORD PTR [rsi],eax
    b3b4:	mov    eax,0x2
    b3b9:	ret    
    b3ba:	mov    eax,0xffffffff
    b3bf:	ret    
    b3c0:	push   r14
    b3c2:	push   r13
    b3c4:	mov    r13d,esi
    b3c7:	push   r12
    b3c9:	push   rbp
    b3ca:	mov    r12d,edx
    b3cd:	push   rbx
    b3ce:	mov    rbp,rdi
    b3d1:	sub    rsp,0x10
    b3d5:	mov    rax,QWORD PTR fs:0x28
    b3de:	mov    QWORD PTR [rsp+0x8],rax
    b3e3:	xor    eax,eax
    b3e5:	call   7fb0 <getenv@plt>
    b3ea:	test   rax,rax
    b3ed:	mov    QWORD PTR [rsp],0x0
    b3f5:	je     b446 <g_str_equal@plt+0x308e>
    b3f7:	mov    rbx,rax
    b3fa:	call   7fd0 <__errno_location@plt>
    b3ff:	mov    rsi,rsp
    b402:	mov    DWORD PTR [rax],0x0
    b408:	mov    edx,0xa
    b40d:	mov    rdi,rbx
    b410:	mov    r14,rax
    b413:	call   7f00 <strtol@plt>
    b418:	cmp    QWORD PTR [rsp],rbx
    b41c:	je     b446 <g_str_equal@plt+0x308e>
    b41e:	test   rax,rax
    b421:	js     b432 <g_str_equal@plt+0x307a>
    b423:	movsxd rdx,r13d
    b426:	cmp    rdx,rax
    b429:	jl     b432 <g_str_equal@plt+0x307a>
    b42b:	mov    edx,DWORD PTR [r14]
    b42e:	test   edx,edx
    b430:	je     b449 <g_str_equal@plt+0x3091>
    b432:	lea    rdi,[rip+0x1e83b]        # 29c74 <_fini@@Base+0x9f0>
    b439:	mov    edx,r13d
    b43c:	mov    rsi,rbp
    b43f:	xor    eax,eax
    b441:	call   e5e0 <g_str_equal@plt+0x6228>
    b446:	mov    eax,r12d
    b449:	mov    rcx,QWORD PTR [rsp+0x8]
    b44e:	xor    rcx,QWORD PTR fs:0x28
    b457:	jne    b466 <g_str_equal@plt+0x30ae>
    b459:	add    rsp,0x10
    b45d:	pop    rbx
    b45e:	pop    rbp
    b45f:	pop    r12
    b461:	pop    r13
    b463:	pop    r14
    b465:	ret    
    b466:	call   8050 <__stack_chk_fail@plt>
    b46b:	nop    DWORD PTR [rax+rax*1+0x0]
    b470:	sub    rsp,0x10
    b474:	movzx  eax,BYTE PTR [rdi+0x5]
    b478:	lea    r8,[rip+0x1e807]        # 29c86 <_fini@@Base+0xa02>
    b47f:	mov    ecx,0x12
    b484:	mov    edx,0x1
    b489:	mov    esi,0x12
    b48e:	push   rax
    b48f:	movzx  eax,BYTE PTR [rdi+0x4]
    b493:	push   rax
    b494:	movzx  eax,BYTE PTR [rdi+0x3]
    b498:	push   rax
    b499:	movzx  eax,BYTE PTR [rdi+0x2]
    b49d:	push   rax
    b49e:	movzx  eax,BYTE PTR [rdi+0x1]
    b4a2:	push   rax
    b4a3:	movzx  r9d,BYTE PTR [rdi]
    b4a7:	lea    rdi,[rip+0x234812]        # 23fcc0 <stdout@@GLIBC_2.2.5+0x18>
    b4ae:	xor    eax,eax
    b4b0:	call   81b0 <__snprintf_chk@plt>
    b4b5:	lea    rax,[rip+0x234804]        # 23fcc0 <stdout@@GLIBC_2.2.5+0x18>
    b4bc:	add    rsp,0x38
    b4c0:	ret    
    b4c1:	nop    DWORD PTR [rax+rax*1+0x0]
    b4c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    b4d0:	sub    rsp,0x28
    b4d4:	mov    rax,QWORD PTR fs:0x28
    b4dd:	mov    QWORD PTR [rsp+0x18],rax
    b4e2:	xor    eax,eax
    b4e4:	test   rdi,rdi
    b4e7:	js     b590 <g_str_equal@plt+0x31d8>
    b4ed:	pxor   xmm1,xmm1
    b4f1:	cvtsi2sd xmm1,rdi
    b4f6:	movapd xmm0,xmm1
    b4fa:	lea    rdi,[rsp+0x14]
    b4ff:	movsd  QWORD PTR [rsp+0x8],xmm1
    b505:	divsd  xmm0,QWORD PTR [rip+0x1e7cb]        # 29cd8 <_fini@@Base+0xa54>
    b50d:	call   7920 <frexp@plt>
    b512:	mov    eax,DWORD PTR [rsp+0x14]
    b516:	mov    edx,0x66666667
    b51b:	movsd  xmm1,QWORD PTR [rsp+0x8]
    b521:	lea    ecx,[rax-0x1]
    b524:	mov    eax,ecx
    b526:	sar    ecx,0x1f
    b529:	imul   edx
    b52b:	sar    edx,0x2
    b52e:	sub    edx,ecx
    b530:	mov    rax,QWORD PTR [rsp+0x18]
    b535:	xor    rax,QWORD PTR fs:0x28
    b53e:	jne    b5cb <g_str_equal@plt+0x3213>
    b544:	lea    rax,[rip+0x231955]        # 23cea0 <_fini@@Base+0x213c1c>
    b54b:	movsxd rcx,edx
    b54e:	mov    rsi,QWORD PTR [rax+rcx*8]
    b552:	lea    ecx,[rdx+rdx*4]
    b555:	mov    eax,0x1
    b55a:	add    ecx,ecx
    b55c:	shl    rax,cl
    b55f:	test   rax,rax
    b562:	js     b5b0 <g_str_equal@plt+0x31f8>
    b564:	pxor   xmm0,xmm0
    b568:	cvtsi2sd xmm0,rax
    b56d:	divsd  xmm1,xmm0
    b571:	lea    rdi,[rip+0x1e72c]        # 29ca4 <_fini@@Base+0xa20>
    b578:	mov    eax,0x1
    b57d:	add    rsp,0x28
    b581:	movapd xmm0,xmm1
    b585:	jmp    7ce0 <g_strdup_printf@plt>
    b58a:	nop    WORD PTR [rax+rax*1+0x0]
    b590:	mov    rax,rdi
    b593:	pxor   xmm1,xmm1
    b597:	shr    rax,1
    b59a:	and    edi,0x1
    b59d:	or     rax,rdi
    b5a0:	cvtsi2sd xmm1,rax
    b5a5:	addsd  xmm1,xmm1
    b5a9:	jmp    b4f6 <g_str_equal@plt+0x313e>
    b5ae:	xchg   ax,ax
    b5b0:	mov    rdx,rax
    b5b3:	pxor   xmm0,xmm0
    b5b7:	shr    rdx,1
    b5ba:	and    eax,0x1
    b5bd:	or     rdx,rax
    b5c0:	cvtsi2sd xmm0,rdx
    b5c5:	addsd  xmm0,xmm0
    b5c9:	jmp    b56d <g_str_equal@plt+0x31b5>
    b5cb:	call   8050 <__stack_chk_fail@plt>
    b5d0:	mov    DWORD PTR [rdi],esi
    b5d2:	mov    DWORD PTR [rdi+0x4],esi
    b5d5:	ret    
    b5d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    b5e0:	push   rbx
    b5e1:	mov    rbx,rdi
    b5e4:	mov    eax,DWORD PTR [rdi]
    b5e6:	mov    edi,DWORD PTR [rdi+0x4]
    b5e9:	cmp    eax,edi
    b5eb:	je     b5fd <g_str_equal@plt+0x3245>
    b5ed:	mov    edi,eax
    b5ef:	call   79a0 <close@plt>
    b5f4:	mov    edi,DWORD PTR [rbx+0x4]
    b5f7:	mov    DWORD PTR [rbx],0xffffffff
    b5fd:	call   79a0 <close@plt>
    b602:	mov    DWORD PTR [rbx+0x4],0xffffffff
    b609:	pop    rbx
    b60a:	ret    
    b60b:	nop    DWORD PTR [rax+rax*1+0x0]
    b610:	mov    eax,DWORD PTR [rdi]
    b612:	ret    
    b613:	nop    DWORD PTR [rax]
    b616:	nop    WORD PTR cs:[rax+rax*1+0x0]
    b620:	push   rbp
    b621:	push   rbx
    b622:	mov    rbp,rdi
    b625:	lea    rbx,[rip+0x1e6b4]        # 29ce0 <_fini@@Base+0xa5c>
    b62c:	sub    rsp,0x8
    b630:	jmp    b644 <g_str_equal@plt+0x328c>
    b632:	nop    WORD PTR [rax+rax*1+0x0]
    b638:	call   7fd0 <__errno_location@plt>
    b63d:	mov    edx,DWORD PTR [rax]
    b63f:	cmp    edx,0x4
    b642:	jne    b668 <g_str_equal@plt+0x32b0>
    b644:	mov    edi,DWORD PTR [rbp+0x4]
    b647:	mov    edx,0x8
    b64c:	mov    rsi,rbx
    b64f:	call   82b0 <write@plt>
    b654:	test   rax,rax
    b657:	js     b638 <g_str_equal@plt+0x3280>
    b659:	add    rsp,0x8
    b65d:	xor    eax,eax
    b65f:	pop    rbx
    b660:	pop    rbp
    b661:	ret    
    b662:	nop    WORD PTR [rax+rax*1+0x0]
    b668:	mov    eax,edx
    b66a:	neg    eax
    b66c:	cmp    edx,0xb
    b66f:	mov    edx,0x0
    b674:	cmove  eax,edx
    b677:	add    rsp,0x8
    b67b:	pop    rbx
    b67c:	pop    rbp
    b67d:	ret    
    b67e:	xchg   ax,ax
    b680:	push   r13
    b682:	push   r12
    b684:	mov    r12d,esi
    b687:	push   rbp
    b688:	push   rbx
    b689:	mov    rbp,rdi
    b68c:	mov    esi,0x80800
    b691:	xor    edi,edi
    b693:	sub    rsp,0x18
    b697:	mov    rax,QWORD PTR fs:0x28
    b6a0:	mov    QWORD PTR [rsp+0x8],rax
    b6a5:	xor    eax,eax
    b6a7:	call   7bb0 <eventfd@plt>
    b6ac:	test   eax,eax
    b6ae:	js     b6f0 <g_str_equal@plt+0x3338>
    b6b0:	mov    DWORD PTR [rbp+0x4],eax
    b6b3:	mov    DWORD PTR [rbp+0x0],eax
    b6b6:	xor    ebx,ebx
    b6b8:	test   r12d,r12d
    b6bb:	jne    b6e0 <g_str_equal@plt+0x3328>
    b6bd:	mov    rdx,QWORD PTR [rsp+0x8]
    b6c2:	xor    rdx,QWORD PTR fs:0x28
    b6cb:	mov    eax,ebx
    b6cd:	jne    b77c <g_str_equal@plt+0x33c4>
    b6d3:	add    rsp,0x18
    b6d7:	pop    rbx
    b6d8:	pop    rbp
    b6d9:	pop    r12
    b6db:	pop    r13
    b6dd:	ret    
    b6de:	xchg   ax,ax
    b6e0:	mov    rdi,rbp
    b6e3:	call   b620 <g_str_equal@plt+0x3268>
    b6e8:	jmp    b6bd <g_str_equal@plt+0x3305>
    b6ea:	nop    WORD PTR [rax+rax*1+0x0]
    b6f0:	call   7fd0 <__errno_location@plt>
    b6f5:	mov    ebx,DWORD PTR [rax]
    b6f7:	mov    r13,rax
    b6fa:	cmp    ebx,0x26
    b6fd:	je     b708 <g_str_equal@plt+0x3350>
    b6ff:	neg    ebx
    b701:	jmp    b6bd <g_str_equal@plt+0x3305>
    b703:	nop    DWORD PTR [rax+rax*1+0x0]
    b708:	mov    rdi,rsp
    b70b:	call   be40 <g_str_equal@plt+0x3a88>
    b710:	test   eax,eax
    b712:	js     b748 <g_str_equal@plt+0x3390>
    b714:	mov    edi,DWORD PTR [rsp]
    b717:	mov    esi,0x800
    b71c:	call   aae0 <g_str_equal@plt+0x2728>
    b721:	test   eax,eax
    b723:	jns    b758 <g_str_equal@plt+0x33a0>
    b725:	mov    edi,DWORD PTR [rsp]
    b728:	mov    ebx,DWORD PTR [r13+0x0]
    b72c:	call   79a0 <close@plt>
    b731:	mov    edi,DWORD PTR [rsp+0x4]
    b735:	neg    ebx
    b737:	call   79a0 <close@plt>
    b73c:	jmp    b6bd <g_str_equal@plt+0x3305>
    b741:	nop    DWORD PTR [rax+0x0]
    b748:	mov    ebx,DWORD PTR [r13+0x0]
    b74c:	neg    ebx
    b74e:	jmp    b6bd <g_str_equal@plt+0x3305>
    b753:	nop    DWORD PTR [rax+rax*1+0x0]
    b758:	mov    edi,DWORD PTR [rsp+0x4]
    b75c:	mov    esi,0x800
    b761:	call   aae0 <g_str_equal@plt+0x2728>
    b766:	test   eax,eax
    b768:	js     b725 <g_str_equal@plt+0x336d>
    b76a:	mov    eax,DWORD PTR [rsp]
    b76d:	mov    DWORD PTR [rbp+0x0],eax
    b770:	mov    eax,DWORD PTR [rsp+0x4]
    b774:	mov    DWORD PTR [rbp+0x4],eax
    b777:	jmp    b6b6 <g_str_equal@plt+0x32fe>
    b77c:	call   8050 <__stack_chk_fail@plt>
    b781:	nop    DWORD PTR [rax+rax*1+0x0]
    b786:	nop    WORD PTR cs:[rax+rax*1+0x0]
    b790:	push   r12
    b792:	push   rbp
    b793:	mov    r12,rdi
    b796:	push   rbx
    b797:	xor    ebx,ebx
    b799:	sub    rsp,0x210
    b7a0:	mov    rax,QWORD PTR fs:0x28
    b7a9:	mov    QWORD PTR [rsp+0x208],rax
    b7b1:	xor    eax,eax
    b7b3:	mov    rbp,rsp
    b7b6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    b7c0:	mov    edi,DWORD PTR [r12]
    b7c4:	mov    edx,0x200
    b7c9:	mov    rsi,rbp
    b7cc:	call   7af0 <read@plt>
    b7d1:	xor    edx,edx
    b7d3:	test   rax,rax
    b7d6:	setg   dl
    b7d9:	or     ebx,edx
    b7db:	cmp    rax,0xffffffffffffffff
    b7df:	je     b7f0 <g_str_equal@plt+0x3438>
    b7e1:	cmp    rax,0x200
    b7e7:	je     b7c0 <g_str_equal@plt+0x3408>
    b7e9:	jmp    b7fa <g_str_equal@plt+0x3442>
    b7eb:	nop    DWORD PTR [rax+rax*1+0x0]
    b7f0:	call   7fd0 <__errno_location@plt>
    b7f5:	cmp    DWORD PTR [rax],0x4
    b7f8:	je     b7c0 <g_str_equal@plt+0x3408>
    b7fa:	mov    rcx,QWORD PTR [rsp+0x208]
    b802:	xor    rcx,QWORD PTR fs:0x28
    b80b:	mov    eax,ebx
    b80d:	jne    b81b <g_str_equal@plt+0x3463>
    b80f:	add    rsp,0x210
    b816:	pop    rbx
    b817:	pop    rbp
    b818:	pop    r12
    b81a:	ret    
    b81b:	call   8050 <__stack_chk_fail@plt>
    b820:	push   r14
    b822:	push   rbx
    b823:	mov    r14,rdi
    b826:	sub    rsp,0x128
    b82d:	lea    rbx,[rsp+0x10]
    b832:	mov    QWORD PTR [rsp+0x8],rdi
    b837:	mov    rax,QWORD PTR fs:0x28
    b840:	mov    QWORD PTR [rsp+0x118],rax
    b848:	xor    eax,eax
    b84a:	mov    rdi,rbx
    b84d:	call   81d0 <sigemptyset@plt>
    b852:	mov    rdi,rbx
    b855:	mov    esi,0x7
    b85a:	call   8020 <sigaddset@plt>
    b85f:	lea    rdx,[rsp+0x90]
    b867:	mov    rsi,rbx
    b86a:	mov    edi,0x1
    b86f:	call   8200 <pthread_sigmask@plt>
    b874:	lea    rdi,[r14+0x20]
    b878:	mov    esi,0x1
    b87d:	call   8280 <__sigsetjmp@plt>
    b882:	test   eax,eax
    b884:	jne    b8e8 <g_str_equal@plt+0x3530>
    b886:	mov    rbx,QWORD PTR [rsp+0x8]
    b88b:	mov    rsi,QWORD PTR [rbx+0x8]
    b88f:	mov    rax,QWORD PTR [rbx]
    b892:	mov    rdi,QWORD PTR [rbx+0x10]
    b896:	test   rsi,rsi
    b899:	je     b8b1 <g_str_equal@plt+0x34f9>
    b89b:	xor    edx,edx
    b89d:	nop    DWORD PTR [rax]
    b8a0:	movzx  ecx,BYTE PTR [rax]
    b8a3:	add    rdx,0x1
    b8a7:	mov    BYTE PTR [rax],cl
    b8a9:	add    rax,rdi
    b8ac:	cmp    rsi,rdx
    b8af:	jne    b8a0 <g_str_equal@plt+0x34e8>
    b8b1:	lea    rsi,[rsp+0x90]
    b8b9:	xor    edx,edx
    b8bb:	mov    edi,0x2
    b8c0:	call   8200 <pthread_sigmask@plt>
    b8c5:	xor    eax,eax
    b8c7:	mov    rcx,QWORD PTR [rsp+0x118]
    b8cf:	xor    rcx,QWORD PTR fs:0x28
    b8d8:	jne    b8f1 <g_str_equal@plt+0x3539>
    b8da:	add    rsp,0x128
    b8e1:	pop    rbx
    b8e2:	pop    r14
    b8e4:	ret    
    b8e5:	nop    DWORD PTR [rax]
    b8e8:	mov    BYTE PTR [rip+0x2353f1],0x1        # 240ce0 <stdout@@GLIBC_2.2.5+0x1038>
    b8ef:	jmp    b8b1 <g_str_equal@plt+0x34f9>
    b8f1:	call   8050 <__stack_chk_fail@plt>
    b8f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    b900:	mov    rax,QWORD PTR [rip+0x2353e1]        # 240ce8 <stdout@@GLIBC_2.2.5+0x1040>
    b907:	test   rax,rax
    b90a:	je     b958 <g_str_equal@plt+0x35a0>
    b90c:	mov    edx,DWORD PTR [rip+0x2353d2]        # 240ce4 <stdout@@GLIBC_2.2.5+0x103c>
    b912:	test   edx,edx
    b914:	jle    b958 <g_str_equal@plt+0x35a0>
    b916:	push   rbp
    b917:	push   rbx
    b918:	xor    ebx,ebx
    b91a:	sub    rsp,0x8
    b91e:	jmp    b927 <g_str_equal@plt+0x356f>
    b920:	mov    rax,QWORD PTR [rip+0x2353c1]        # 240ce8 <stdout@@GLIBC_2.2.5+0x1040>
    b927:	movsxd rbp,ebx
    b92a:	imul   rbp,rbp,0xe8
    b931:	lea    rdi,[rax+rbp*1+0x18]
    b936:	call   d4d0 <g_str_equal@plt+0x5118>
    b93b:	test   al,al
    b93d:	jne    b95a <g_str_equal@plt+0x35a2>
    b93f:	add    ebx,0x1
    b942:	cmp    ebx,DWORD PTR [rip+0x23539c]        # 240ce4 <stdout@@GLIBC_2.2.5+0x103c>
    b948:	jl     b920 <g_str_equal@plt+0x3568>
    b94a:	add    rsp,0x8
    b94e:	pop    rbx
    b94f:	pop    rbp
    b950:	ret    
    b951:	nop    DWORD PTR [rax+0x0]
    b958:	repz ret 
    b95a:	mov    rdi,QWORD PTR [rip+0x235387]        # 240ce8 <stdout@@GLIBC_2.2.5+0x1040>
    b961:	mov    esi,0x1
    b966:	add    rdi,rbp
    b969:	add    rdi,0x20
    b96d:	call   79b0 <__longjmp_chk@plt>
    b972:	nop    DWORD PTR [rax+0x0]
    b976:	nop    WORD PTR cs:[rax+rax*1+0x0]
    b980:	sub    rsp,0x8
    b984:	mov    edi,0xba
    b989:	xor    eax,eax
    b98b:	call   7df0 <syscall@plt>
    b990:	add    rsp,0x8
    b994:	ret    
    b995:	nop
    b996:	nop    WORD PTR cs:[rax+rax*1+0x0]
    b9a0:	jmp    7870 <daemon@plt>
    b9a5:	nop
    b9a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    b9b0:	test   rdi,rdi
    b9b3:	je     b9b9 <g_str_equal@plt+0x3601>
    b9b5:	mov    rax,rdi
    b9b8:	ret    
    b9b9:	sub    rsp,0x8
    b9bd:	call   83c0 <g_str_equal@plt+0x8>
    b9c2:	nop    DWORD PTR [rax+0x0]
    b9c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    b9d0:	push   r14
    b9d2:	push   r13
    b9d4:	mov    rdx,rsi
    b9d7:	push   r12
    b9d9:	push   rbp
    b9da:	mov    r12,rsi
    b9dd:	push   rbx
    b9de:	mov    ebx,0x8
    b9e3:	sub    rsp,0x30
    b9e7:	mov    rax,QWORD PTR fs:0x28
    b9f0:	mov    QWORD PTR [rsp+0x28],rax
    b9f5:	xor    eax,eax
    b9f7:	cmp    rdi,0x8
    b9fb:	cmovae rbx,rdi
    b9ff:	lea    rdi,[rsp+0x8]
    ba04:	mov    rsi,rbx
    ba07:	call   7990 <posix_memalign@plt>
    ba0c:	test   eax,eax
    ba0e:	jne    ba40 <g_str_equal@plt+0x3688>
    ba10:	mov    ecx,DWORD PTR [rip+0x2363e2]        # 241df8 <stdout@@GLIBC_2.2.5+0x2150>
    ba16:	mov    rbp,QWORD PTR [rsp+0x8]
    ba1b:	test   ecx,ecx
    ba1d:	jne    ba55 <g_str_equal@plt+0x369d>
    ba1f:	mov    rcx,QWORD PTR [rsp+0x28]
    ba24:	xor    rcx,QWORD PTR fs:0x28
    ba2d:	mov    rax,rbp
    ba30:	jne    baab <g_str_equal@plt+0x36f3>
    ba32:	add    rsp,0x30
    ba36:	pop    rbx
    ba37:	pop    rbp
    ba38:	pop    r12
    ba3a:	pop    r13
    ba3c:	pop    r14
    ba3e:	ret    
    ba3f:	nop
    ba40:	mov    ebp,eax
    ba42:	call   7fd0 <__errno_location@plt>
    ba47:	mov    DWORD PTR [rax],ebp
    ba49:	mov    ecx,DWORD PTR [rip+0x2363a9]        # 241df8 <stdout@@GLIBC_2.2.5+0x2150>
    ba4f:	xor    ebp,ebp
    ba51:	test   ecx,ecx
    ba53:	je     ba1f <g_str_equal@plt+0x3667>
    ba55:	cmp    WORD PTR [rip+0x236367],0x0        # 241dc4 <stdout@@GLIBC_2.2.5+0x211c>
    ba5d:	je     ba1f <g_str_equal@plt+0x3667>
    ba5f:	test   BYTE PTR [rip+0x2352db],0x80        # 240d41 <stdout@@GLIBC_2.2.5+0x1099>
    ba66:	je     ba1f <g_str_equal@plt+0x3667>
    ba68:	lea    rdi,[rsp+0x10]
    ba6d:	xor    esi,esi
    ba6f:	call   7a90 <gettimeofday@plt>
    ba74:	mov    r14,QWORD PTR [rsp+0x18]
    ba79:	mov    r13,QWORD PTR [rsp+0x10]
    ba7e:	call   7bf0 <getpid@plt>
    ba83:	sub    rsp,0x8
    ba87:	lea    rdi,[rip+0x1e27a]        # 29d08 <_fini@@Base+0xa84>
    ba8e:	mov    esi,eax
    ba90:	push   rbp
    ba91:	mov    rdx,r13
    ba94:	mov    r9,r12
    ba97:	mov    r8,rbx
    ba9a:	mov    rcx,r14
    ba9d:	xor    eax,eax
    ba9f:	call   10b60 <g_str_equal@plt+0x87a8>
    baa4:	pop    rax
    baa5:	pop    rdx
    baa6:	jmp    ba1f <g_str_equal@plt+0x3667>
    baab:	call   8050 <__stack_chk_fail@plt>
    bab0:	sub    rsp,0x8
    bab4:	call   b9d0 <g_str_equal@plt+0x3618>
    bab9:	test   rax,rax
    babc:	je     bac3 <g_str_equal@plt+0x370b>
    babe:	add    rsp,0x8
    bac2:	ret    
    bac3:	call   83c0 <g_str_equal@plt+0x8>
    bac8:	nop    DWORD PTR [rax+rax*1+0x0]
    bad0:	push   r13
    bad2:	push   r12
    bad4:	movzx  ecx,dl
    bad7:	push   rbp
    bad8:	push   rbx
    bad9:	mov    r12,rdi
    badc:	mov    rbp,rsi
    badf:	mov    edx,0x200000
    bae4:	mov    rsi,rdi
    bae7:	sub    rsp,0x28
    baeb:	mov    edi,0xffffffff
    baf0:	mov    rax,QWORD PTR fs:0x28
    baf9:	mov    QWORD PTR [rsp+0x18],rax
    bafe:	xor    eax,eax
    bb00:	call   13390 <g_str_equal@plt+0xafd8>
    bb05:	cmp    rax,0xffffffffffffffff
    bb09:	je     bba0 <g_str_equal@plt+0x37e8>
    bb0f:	test   rbp,rbp
    bb12:	mov    rbx,rax
    bb15:	je     bb1f <g_str_equal@plt+0x3767>
    bb17:	mov    QWORD PTR [rbp+0x0],0x200000
    bb1f:	mov    eax,DWORD PTR [rip+0x2362d3]        # 241df8 <stdout@@GLIBC_2.2.5+0x2150>
    bb25:	test   eax,eax
    bb27:	jne    bb50 <g_str_equal@plt+0x3798>
    bb29:	mov    rsi,QWORD PTR [rsp+0x18]
    bb2e:	xor    rsi,QWORD PTR fs:0x28
    bb37:	mov    rax,rbx
    bb3a:	jne    bba4 <g_str_equal@plt+0x37ec>
    bb3c:	add    rsp,0x28
    bb40:	pop    rbx
    bb41:	pop    rbp
    bb42:	pop    r12
    bb44:	pop    r13
    bb46:	ret    
    bb47:	nop    WORD PTR [rax+rax*1+0x0]
    bb50:	cmp    WORD PTR [rip+0x23626a],0x0        # 241dc2 <stdout@@GLIBC_2.2.5+0x211a>
    bb58:	je     bb29 <g_str_equal@plt+0x3771>
    bb5a:	test   BYTE PTR [rip+0x2351e0],0x80        # 240d41 <stdout@@GLIBC_2.2.5+0x1099>
    bb61:	je     bb29 <g_str_equal@plt+0x3771>
    bb63:	mov    rdi,rsp
    bb66:	xor    esi,esi
    bb68:	call   7a90 <gettimeofday@plt>
    bb6d:	mov    r13,QWORD PTR [rsp+0x8]
    bb72:	mov    rbp,QWORD PTR [rsp]
    bb76:	call   7bf0 <getpid@plt>
    bb7b:	lea    rdi,[rip+0x1e1c6]        # 29d48 <_fini@@Base+0xac4>
    bb82:	mov    esi,eax
    bb84:	mov    r9,rbx
    bb87:	mov    r8,r12
    bb8a:	mov    rcx,r13
    bb8d:	mov    rdx,rbp
    bb90:	xor    eax,eax
    bb92:	call   10b60 <g_str_equal@plt+0x87a8>
    bb97:	jmp    bb29 <g_str_equal@plt+0x3771>
    bb99:	nop    DWORD PTR [rax+0x0]
    bba0:	xor    ebx,ebx
    bba2:	jmp    bb29 <g_str_equal@plt+0x3771>
    bba4:	call   8050 <__stack_chk_fail@plt>
    bba9:	nop    DWORD PTR [rax+0x0]
    bbb0:	push   r12
    bbb2:	push   rbp
    bbb3:	push   rbx
    bbb4:	mov    rbx,rdi
    bbb7:	sub    rsp,0x20
    bbbb:	mov    rax,QWORD PTR fs:0x28
    bbc4:	mov    QWORD PTR [rsp+0x18],rax
    bbc9:	xor    eax,eax
    bbcb:	mov    eax,DWORD PTR [rip+0x236227]        # 241df8 <stdout@@GLIBC_2.2.5+0x2150>
    bbd1:	test   eax,eax
    bbd3:	jne    bbf8 <g_str_equal@plt+0x3840>
    bbd5:	mov    rax,QWORD PTR [rsp+0x18]
    bbda:	xor    rax,QWORD PTR fs:0x28
    bbe3:	jne    bc3e <g_str_equal@plt+0x3886>
    bbe5:	add    rsp,0x20
    bbe9:	mov    rdi,rbx
    bbec:	pop    rbx
    bbed:	pop    rbp
    bbee:	pop    r12
    bbf0:	jmp    7cc0 <free@plt>
    bbf5:	nop    DWORD PTR [rax]
    bbf8:	cmp    WORD PTR [rip+0x2361c0],0x0        # 241dc0 <stdout@@GLIBC_2.2.5+0x2118>
    bc00:	je     bbd5 <g_str_equal@plt+0x381d>
    bc02:	test   BYTE PTR [rip+0x235138],0x80        # 240d41 <stdout@@GLIBC_2.2.5+0x1099>
    bc09:	je     bbd5 <g_str_equal@plt+0x381d>
    bc0b:	mov    rdi,rsp
    bc0e:	xor    esi,esi
    bc10:	call   7a90 <gettimeofday@plt>
    bc15:	mov    r12,QWORD PTR [rsp+0x8]
    bc1a:	mov    rbp,QWORD PTR [rsp]
    bc1e:	call   7bf0 <getpid@plt>
    bc23:	lea    rdi,[rip+0x1e156]        # 29d80 <_fini@@Base+0xafc>
    bc2a:	mov    esi,eax
    bc2c:	mov    r8,rbx
    bc2f:	mov    rcx,r12
    bc32:	mov    rdx,rbp
    bc35:	xor    eax,eax
    bc37:	call   10b60 <g_str_equal@plt+0x87a8>
    bc3c:	jmp    bbd5 <g_str_equal@plt+0x381d>
    bc3e:	call   8050 <__stack_chk_fail@plt>
    bc43:	nop    DWORD PTR [rax]
    bc46:	nop    WORD PTR cs:[rax+rax*1+0x0]
    bc50:	push   r13
    bc52:	push   r12
    bc54:	push   rbp
    bc55:	push   rbx
    bc56:	mov    rbp,rsi
    bc59:	mov    rbx,rdi
    bc5c:	sub    rsp,0x28
    bc60:	mov    rax,QWORD PTR fs:0x28
    bc69:	mov    QWORD PTR [rsp+0x18],rax
    bc6e:	xor    eax,eax
    bc70:	mov    eax,DWORD PTR [rip+0x236182]        # 241df8 <stdout@@GLIBC_2.2.5+0x2150>
    bc76:	test   eax,eax
    bc78:	jne    bca0 <g_str_equal@plt+0x38e8>
    bc7a:	mov    rsi,rbp
    bc7d:	mov    rdi,rbx
    bc80:	call   13520 <g_str_equal@plt+0xb168>
    bc85:	mov    rax,QWORD PTR [rsp+0x18]
    bc8a:	xor    rax,QWORD PTR fs:0x28
    bc93:	jne    bce9 <g_str_equal@plt+0x3931>
    bc95:	add    rsp,0x28
    bc99:	pop    rbx
    bc9a:	pop    rbp
    bc9b:	pop    r12
    bc9d:	pop    r13
    bc9f:	ret    
    bca0:	cmp    WORD PTR [rip+0x236116],0x0        # 241dbe <stdout@@GLIBC_2.2.5+0x2116>
    bca8:	je     bc7a <g_str_equal@plt+0x38c2>
    bcaa:	test   BYTE PTR [rip+0x235090],0x80        # 240d41 <stdout@@GLIBC_2.2.5+0x1099>
    bcb1:	je     bc7a <g_str_equal@plt+0x38c2>
    bcb3:	mov    rdi,rsp
    bcb6:	xor    esi,esi
    bcb8:	call   7a90 <gettimeofday@plt>
    bcbd:	mov    r13,QWORD PTR [rsp+0x8]
    bcc2:	mov    r12,QWORD PTR [rsp]
    bcc6:	call   7bf0 <getpid@plt>
    bccb:	lea    rdi,[rip+0x1e0ce]        # 29da0 <_fini@@Base+0xb1c>
    bcd2:	mov    esi,eax
    bcd4:	mov    r9,rbp
    bcd7:	mov    r8,rbx
    bcda:	mov    rcx,r13
    bcdd:	mov    rdx,r12
    bce0:	xor    eax,eax
    bce2:	call   10b60 <g_str_equal@plt+0x87a8>
    bce7:	jmp    bc7a <g_str_equal@plt+0x38c2>
    bce9:	call   8050 <__stack_chk_fail@plt>
    bcee:	xchg   ax,ax
    bcf0:	push   rbx
    bcf1:	mov    esi,0x3
    bcf6:	mov    ebx,edi
    bcf8:	xor    eax,eax
    bcfa:	call   8340 <fcntl@plt>
    bcff:	mov    edi,ebx
    bd01:	and    ah,0xf7
    bd04:	mov    esi,0x4
    bd09:	pop    rbx
    bd0a:	mov    edx,eax
    bd0c:	xor    eax,eax
    bd0e:	jmp    8340 <fcntl@plt>
    bd13:	nop    DWORD PTR [rax]
    bd16:	nop    WORD PTR cs:[rax+rax*1+0x0]
    bd20:	push   rbx
    bd21:	mov    esi,0x3
    bd26:	mov    ebx,edi
    bd28:	xor    eax,eax
    bd2a:	call   8340 <fcntl@plt>
    bd2f:	mov    edi,ebx
    bd31:	or     ah,0x8
    bd34:	mov    esi,0x4
    bd39:	pop    rbx
    bd3a:	mov    edx,eax
    bd3c:	xor    eax,eax
    bd3e:	jmp    8340 <fcntl@plt>
    bd43:	nop    DWORD PTR [rax]
    bd46:	nop    WORD PTR cs:[rax+rax*1+0x0]
    bd50:	sub    rsp,0x18
    bd54:	mov    r8d,0x4
    bd5a:	mov    edx,0x2
    bd5f:	lea    rcx,[rsp+0x4]
    bd64:	mov    esi,0x1
    bd69:	mov    DWORD PTR [rsp+0x4],0x1
    bd71:	mov    rax,QWORD PTR fs:0x28
    bd7a:	mov    QWORD PTR [rsp+0x8],rax
    bd7f:	xor    eax,eax
    bd81:	call   7b90 <setsockopt@plt>
    bd86:	test   eax,eax
    bd88:	jne    bda1 <g_str_equal@plt+0x39e9>
    bd8a:	xor    eax,eax
    bd8c:	mov    rdx,QWORD PTR [rsp+0x8]
    bd91:	xor    rdx,QWORD PTR fs:0x28
    bd9a:	jne    bdc0 <g_str_equal@plt+0x3a08>
    bd9c:	add    rsp,0x18
    bda0:	ret    
    bda1:	lea    rcx,[rip+0x1e288]        # 2a030 <_fini@@Base+0xdac>
    bda8:	lea    rsi,[rip+0x1e029]        # 29dd8 <_fini@@Base+0xb54>
    bdaf:	lea    rdi,[rip+0x1e174]        # 29f2a <_fini@@Base+0xca6>
    bdb6:	mov    edx,0xb4
    bdbb:	call   7a70 <__assert_fail@plt>
    bdc0:	call   8050 <__stack_chk_fail@plt>
    bdc5:	nop
    bdc6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    bdd0:	push   rbx
    bdd1:	xor    eax,eax
    bdd3:	mov    esi,0x1
    bdd8:	mov    ebx,edi
    bdda:	call   8340 <fcntl@plt>
    bddf:	cmp    eax,0xffffffff
    bde2:	je     bdfe <g_str_equal@plt+0x3a46>
    bde4:	or     eax,0x1
    bde7:	mov    esi,0x2
    bdec:	mov    edi,ebx
    bdee:	mov    edx,eax
    bdf0:	xor    eax,eax
    bdf2:	call   8340 <fcntl@plt>
    bdf7:	cmp    eax,0xffffffff
    bdfa:	je     be1d <g_str_equal@plt+0x3a65>
    bdfc:	pop    rbx
    bdfd:	ret    
    bdfe:	lea    rcx,[rip+0x1e20b]        # 2a010 <_fini@@Base+0xd8c>
    be05:	lea    rsi,[rip+0x1dfcc]        # 29dd8 <_fini@@Base+0xb54>
    be0c:	lea    rdi,[rip+0x1e120]        # 29f33 <_fini@@Base+0xcaf>
    be13:	mov    edx,0xbd
    be18:	call   7a70 <__assert_fail@plt>
    be1d:	lea    rcx,[rip+0x1e1ec]        # 2a010 <_fini@@Base+0xd8c>
    be24:	lea    rsi,[rip+0x1dfad]        # 29dd8 <_fini@@Base+0xb54>
    be2b:	lea    rdi,[rip+0x1e101]        # 29f33 <_fini@@Base+0xcaf>
    be32:	mov    edx,0xbf
    be37:	call   7a70 <__assert_fail@plt>
    be3c:	nop    DWORD PTR [rax+0x0]
    be40:	push   rbp
    be41:	push   rbx
    be42:	mov    esi,0x80000
    be47:	mov    rbp,rdi
    be4a:	sub    rsp,0x8
    be4e:	call   78b0 <pipe2@plt>
    be53:	cmp    eax,0xffffffff
    be56:	mov    ebx,eax
    be58:	je     be68 <g_str_equal@plt+0x3ab0>
    be5a:	add    rsp,0x8
    be5e:	mov    eax,ebx
    be60:	pop    rbx
    be61:	pop    rbp
    be62:	ret    
    be63:	nop    DWORD PTR [rax+rax*1+0x0]
    be68:	call   7fd0 <__errno_location@plt>
    be6d:	cmp    DWORD PTR [rax],0x26
    be70:	jne    be5a <g_str_equal@plt+0x3aa2>
    be72:	mov    rdi,rbp
    be75:	call   7e30 <pipe@plt>
    be7a:	test   eax,eax
    be7c:	mov    ebx,eax
    be7e:	jne    be5a <g_str_equal@plt+0x3aa2>
    be80:	mov    edi,DWORD PTR [rbp+0x0]
    be83:	call   bdd0 <g_str_equal@plt+0x3a18>
    be88:	mov    edi,DWORD PTR [rbp+0x4]
    be8b:	call   bdd0 <g_str_equal@plt+0x3a18>
    be90:	add    rsp,0x8
    be94:	mov    eax,ebx
    be96:	pop    rbx
    be97:	pop    rbp
    be98:	ret    
    be99:	nop    DWORD PTR [rax+0x0]
    bea0:	mov    rdx,rdi
    bea3:	lea    rsi,[rip+0x1e091]        # 29f3b <_fini@@Base+0xcb7>
    beaa:	lea    rdi,[rip+0x1e08f]        # 29f40 <_fini@@Base+0xcbc>
    beb1:	xor    eax,eax
    beb3:	jmp    7ce0 <g_strdup_printf@plt>
    beb8:	nop    DWORD PTR [rax+rax*1+0x0]
    bec0:	push   r12
    bec2:	push   rbp
    bec3:	mov    r12d,esi
    bec6:	push   rbx
    bec7:	mov    ebx,edi
    bec9:	sub    rsp,0x50
    becd:	mov    rbp,rsp
    bed0:	mov    rsi,rbp
    bed3:	mov    rax,QWORD PTR fs:0x28
    bedc:	mov    QWORD PTR [rsp+0x48],rax
    bee1:	xor    eax,eax
    bee3:	call   7f60 <tcgetattr@plt>
    bee8:	test   r12b,r12b
    beeb:	jne    bf20 <g_str_equal@plt+0x3b68>
    beed:	and    DWORD PTR [rsp+0xc],0xffff7fb5
    bef5:	xor    esi,esi
    bef7:	mov    rdx,rbp
    befa:	mov    edi,ebx
    befc:	call   7890 <tcsetattr@plt>
    bf01:	mov    rax,QWORD PTR [rsp+0x48]
    bf06:	xor    rax,QWORD PTR fs:0x28
    bf0f:	jne    bf2a <g_str_equal@plt+0x3b72>
    bf11:	add    rsp,0x50
    bf15:	pop    rbx
    bf16:	pop    rbp
    bf17:	pop    r12
    bf19:	ret    
    bf1a:	nop    WORD PTR [rax+rax*1+0x0]
    bf20:	or     DWORD PTR [rsp+0xc],0x804a
    bf28:	jmp    bef5 <g_str_equal@plt+0x3b3d>
    bf2a:	call   8050 <__stack_chk_fail@plt>
    bf2f:	nop
    bf30:	push   rbp
    bf31:	push   rbx
    bf32:	sub    rsp,0x1018
    bf39:	mov    rax,QWORD PTR fs:0x28
    bf42:	mov    QWORD PTR [rsp+0x1008],rax
    bf4a:	xor    eax,eax
    bf4c:	cmp    BYTE PTR [rip+0x233d8d],0x0        # 23fce0 <stdout@@GLIBC_2.2.5+0x38>
    bf53:	jne    bfec <g_str_equal@plt+0x3c34>
    bf59:	mov    rbp,rdi
    bf5c:	mov    rbx,rsp
    bf5f:	lea    rdi,[rip+0x1dfed]        # 29f53 <_fini@@Base+0xccf>
    bf66:	mov    edx,0xfff
    bf6b:	mov    rsi,rbx
    bf6e:	call   7f20 <readlink@plt>
    bf73:	test   eax,eax
    bf75:	jle    bfc8 <g_str_equal@plt+0x3c10>
    bf77:	cdqe   
    bf79:	mov    rdi,rbx
    bf7c:	mov    BYTE PTR [rsp+rax*1],0x0
    bf80:	call   7910 <g_path_get_dirname@plt>
    bf85:	lea    rdi,[rip+0x233d54]        # 23fce0 <stdout@@GLIBC_2.2.5+0x38>
    bf8c:	mov    rbx,rax
    bf8f:	mov    rdx,rax
    bf92:	mov    esi,0x1000
    bf97:	call   a7d0 <g_str_equal@plt+0x2418>
    bf9c:	mov    rdi,rbx
    bf9f:	call   7880 <g_free@plt>
    bfa4:	mov    rax,QWORD PTR [rsp+0x1008]
    bfac:	xor    rax,QWORD PTR fs:0x28
    bfb5:	jne    bfe7 <g_str_equal@plt+0x3c2f>
    bfb7:	add    rsp,0x1018
    bfbe:	pop    rbx
    bfbf:	pop    rbp
    bfc0:	ret    
    bfc1:	nop    DWORD PTR [rax+0x0]
    bfc8:	test   rbp,rbp
    bfcb:	je     bfa4 <g_str_equal@plt+0x3bec>
    bfcd:	mov    rdi,rbp
    bfd0:	mov    edx,0x1000
    bfd5:	mov    rsi,rbx
    bfd8:	call   8190 <__realpath_chk@plt>
    bfdd:	test   rax,rax
    bfe0:	mov    rdi,rax
    bfe3:	jne    bf80 <g_str_equal@plt+0x3bc8>
    bfe5:	jmp    bfa4 <g_str_equal@plt+0x3bec>
    bfe7:	call   8050 <__stack_chk_fail@plt>
    bfec:	lea    rcx,[rip+0x1dffd]        # 29ff0 <_fini@@Base+0xd6c>
    bff3:	lea    rsi,[rip+0x1ddde]        # 29dd8 <_fini@@Base+0xb54>
    bffa:	lea    rdi,[rip+0x1df45]        # 29f46 <_fini@@Base+0xcc2>
    c001:	mov    edx,0xf6
    c006:	call   7a70 <__assert_fail@plt>
    c00b:	nop    DWORD PTR [rax+rax*1+0x0]
    c010:	lea    rdi,[rip+0x233cc9]        # 23fce0 <stdout@@GLIBC_2.2.5+0x38>
    c017:	jmp    7a50 <g_strdup@plt>
    c01c:	nop    DWORD PTR [rax+0x0]
    c020:	push   r15
    c022:	push   r14
    c024:	mov    r15,r8
    c027:	push   r13
    c029:	push   r12
    c02b:	mov    r13,rdx
    c02e:	push   rbp
    c02f:	push   rbx
    c030:	mov    rbp,rsi
    c033:	movsxd r14,ecx
    c036:	sub    rsp,0x168
    c03d:	mov    QWORD PTR [rsp+0x18],r8
    c042:	mov    rax,QWORD PTR fs:0x28
    c04b:	mov    QWORD PTR [rsp+0x158],rax
    c053:	xor    eax,eax
    c055:	call   13240 <g_str_equal@plt+0xae88>
    c05a:	lea    rsi,[rsp+0x20]
    c05f:	mov    r12,rax
    c062:	mov    ecx,0x12
    c067:	xor    eax,eax
    c069:	lea    rdx,[rsi+0x8]
    c06d:	mov    rdi,rdx
    c070:	rep stos QWORD PTR es:[rdi],rax
    c073:	lea    rax,[rip+0xfffffffffffff886]        # b900 <g_str_equal@plt+0x3548>
    c07a:	mov    edi,0x7
    c07f:	mov    QWORD PTR [rsp+0x20],rax
    c084:	lea    rax,[rsp+0xc0]
    c08c:	mov    rdx,rax
    c08f:	mov    QWORD PTR [rsp+0x10],rax
    c094:	call   7ec0 <sigaction@plt>
    c099:	test   eax,eax
    c09b:	jne    c220 <g_str_equal@plt+0x3e68>
    c0a1:	mov    edi,0x54
    c0a6:	mov    ebx,eax
    c0a8:	mov    BYTE PTR [rip+0x234c31],0x0        # 240ce0 <stdout@@GLIBC_2.2.5+0x1038>
    c0af:	call   7bc0 <sysconf@plt>
    c0b4:	test   rax,rax
    c0b7:	jle    c250 <g_str_equal@plt+0x3e98>
    c0bd:	cmp    r14,0x10
    c0c1:	mov    edx,0x10
    c0c6:	cmovg  r14,rdx
    c0ca:	cmp    r14,rax
    c0cd:	cmovle rax,r14
    c0d1:	mov    rdi,rax
    c0d4:	mov    ecx,eax
    c0d6:	lea    rax,[r12+r13*1-0x1]
    c0db:	xor    edx,edx
    c0dd:	mov    esi,0xe8
    c0e2:	mov    DWORD PTR [rip+0x234bfc],ecx        # 240ce4 <stdout@@GLIBC_2.2.5+0x103c>
    c0e8:	div    r12
    c0eb:	mov    r14,rax
    c0ee:	call   7c80 <g_malloc0_n@plt>
    c0f3:	movsxd rcx,DWORD PTR [rip+0x234bea]        # 240ce4 <stdout@@GLIBC_2.2.5+0x103c>
    c0fa:	xor    edx,edx
    c0fc:	mov    rdi,rax
    c0ff:	mov    QWORD PTR [rip+0x234be2],rax        # 240ce8 <stdout@@GLIBC_2.2.5+0x1040>
    c106:	mov    rax,r14
    c109:	div    rcx
    c10c:	mov    rsi,rcx
    c10f:	mov    r13,rax
    c112:	mov    rax,r12
    c115:	imul   rax,r13
    c119:	test   ecx,ecx
    c11b:	mov    QWORD PTR [rsp+0x8],rax
    c120:	jle    c1be <g_str_equal@plt+0x3e06>
    c126:	xor    r15d,r15d
    c129:	nop    DWORD PTR [rax+0x0]
    c130:	movsxd rcx,r15d
    c133:	sub    esi,0x1
    c136:	mov    rdx,r13
    c139:	imul   rcx,rcx,0xe8
    c140:	add    rcx,rdi
    c143:	cmp    esi,r15d
    c146:	lea    rsi,[rip+0x1de15]        # 29f62 <_fini@@Base+0xcde>
    c14d:	cmove  rdx,r14
    c151:	lea    rdi,[rcx+0x18]
    c155:	mov    QWORD PTR [rcx],rbp
    c158:	mov    QWORD PTR [rcx+0x8],rdx
    c15c:	lea    rdx,[rip+0xfffffffffffff6bd]        # b820 <g_str_equal@plt+0x3468>
    c163:	xor    r8d,r8d
    c166:	mov    QWORD PTR [rcx+0x10],r12
    c16a:	add    r15d,0x1
    c16e:	sub    r14,r13
    c171:	call   d3a0 <g_str_equal@plt+0x4fe8>
    c176:	mov    esi,DWORD PTR [rip+0x234b68]        # 240ce4 <stdout@@GLIBC_2.2.5+0x103c>
    c17c:	add    rbp,QWORD PTR [rsp+0x8]
    c181:	mov    rdi,QWORD PTR [rip+0x234b60]        # 240ce8 <stdout@@GLIBC_2.2.5+0x1040>
    c188:	cmp    esi,r15d
    c18b:	jg     c130 <g_str_equal@plt+0x3d78>
    c18d:	test   esi,esi
    c18f:	jle    c1be <g_str_equal@plt+0x3e06>
    c191:	nop    DWORD PTR [rax+0x0]
    c198:	movsxd rax,ebx
    c19b:	add    ebx,0x1
    c19e:	imul   rax,rax,0xe8
    c1a5:	lea    rdi,[rdi+rax*1+0x18]
    c1aa:	call   d500 <g_str_equal@plt+0x5148>
    c1af:	cmp    ebx,DWORD PTR [rip+0x234b2f]        # 240ce4 <stdout@@GLIBC_2.2.5+0x103c>
    c1b5:	mov    rdi,QWORD PTR [rip+0x234b2c]        # 240ce8 <stdout@@GLIBC_2.2.5+0x1040>
    c1bc:	jl     c198 <g_str_equal@plt+0x3de0>
    c1be:	call   7880 <g_free@plt>
    c1c3:	cmp    BYTE PTR [rip+0x234b16],0x0        # 240ce0 <stdout@@GLIBC_2.2.5+0x1038>
    c1ca:	mov    QWORD PTR [rip+0x234b13],0x0        # 240ce8 <stdout@@GLIBC_2.2.5+0x1040>
    c1d5:	jne    c260 <g_str_equal@plt+0x3ea8>
    c1db:	mov    rsi,QWORD PTR [rsp+0x10]
    c1e0:	xor    edx,edx
    c1e2:	mov    edi,0x7
    c1e7:	call   7ec0 <sigaction@plt>
    c1ec:	test   eax,eax
    c1ee:	jne    c290 <g_str_equal@plt+0x3ed8>
    c1f4:	mov    rax,QWORD PTR [rsp+0x158]
    c1fc:	xor    rax,QWORD PTR fs:0x28
    c205:	jne    c28b <g_str_equal@plt+0x3ed3>
    c20b:	add    rsp,0x168
    c212:	pop    rbx
    c213:	pop    rbp
    c214:	pop    r12
    c216:	pop    r13
    c218:	pop    r14
    c21a:	pop    r15
    c21c:	ret    
    c21d:	nop    DWORD PTR [rax]
    c220:	call   7fd0 <__errno_location@plt>
    c225:	mov    r8d,DWORD PTR [rax]
    c228:	lea    r9,[rip+0x1dbe9]        # 29e18 <_fini@@Base+0xb94>
    c22f:	lea    rcx,[rip+0x1ddaa]        # 29fe0 <_fini@@Base+0xd5c>
    c236:	lea    rsi,[rip+0x1db9b]        # 29dd8 <_fini@@Base+0xb54>
    c23d:	mov    edx,0x198
    c242:	mov    rdi,r15
    c245:	xor    eax,eax
    c247:	call   dbb0 <g_str_equal@plt+0x57f8>
    c24c:	jmp    c1f4 <g_str_equal@plt+0x3e3c>
    c24e:	xchg   ax,ax
    c250:	mov    edi,0x1
    c255:	mov    ecx,0x1
    c25a:	jmp    c0d6 <g_str_equal@plt+0x3d1e>
    c25f:	nop
    c260:	mov    rdi,QWORD PTR [rsp+0x18]
    c265:	lea    r8,[rip+0x1dbe4]        # 29e50 <_fini@@Base+0xbcc>
    c26c:	lea    rcx,[rip+0x1dd6d]        # 29fe0 <_fini@@Base+0xd5c>
    c273:	lea    rsi,[rip+0x1db5e]        # 29dd8 <_fini@@Base+0xb54>
    c27a:	mov    edx,0x19f
    c27f:	xor    eax,eax
    c281:	call   db00 <g_str_equal@plt+0x5748>
    c286:	jmp    c1db <g_str_equal@plt+0x3e23>
    c28b:	call   8050 <__stack_chk_fail@plt>
    c290:	lea    rdi,[rip+0x1dc11]        # 29ea8 <_fini@@Base+0xc24>
    c297:	call   8260 <perror@plt>
    c29c:	mov    edi,0x1
    c2a1:	call   7a40 <exit@plt>
    c2a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    c2b0:	push   rbx
    c2b1:	mov    esi,edi
    c2b3:	lea    rdi,[rip+0x1dcb4]        # 29f6e <_fini@@Base+0xcea>
    c2ba:	sub    rsp,0x20
    c2be:	mov    rax,QWORD PTR fs:0x28
    c2c7:	mov    QWORD PTR [rsp+0x18],rax
    c2cc:	xor    eax,eax
    c2ce:	mov    QWORD PTR [rsp+0x8],0x0
    c2d7:	call   7ce0 <g_strdup_printf@plt>
    c2dc:	lea    rdx,[rsp+0x10]
    c2e1:	lea    rsi,[rsp+0x8]
    c2e6:	xor    ecx,ecx
    c2e8:	mov    rbx,rax
    c2eb:	mov    rdi,rax
    c2ee:	call   8100 <g_file_get_contents@plt>
    c2f3:	mov    rdi,rbx
    c2f6:	call   7880 <g_free@plt>
    c2fb:	mov    rcx,QWORD PTR [rsp+0x18]
    c300:	xor    rcx,QWORD PTR fs:0x28
    c309:	mov    rax,QWORD PTR [rsp+0x8]
    c30e:	jne    c316 <g_str_equal@plt+0x3f5e>
    c310:	add    rsp,0x20
    c314:	pop    rbx
    c315:	ret    
    c316:	call   8050 <__stack_chk_fail@plt>
    c31b:	nop    DWORD PTR [rax+rax*1+0x0]
    c320:	push   r15
    c322:	push   r14
    c324:	mov    r15,rdi
    c327:	push   r13
    c329:	push   r12
    c32b:	push   rbp
    c32c:	push   rbx
    c32d:	sub    rsp,0x1b8
    c334:	lea    r12,[rsp+0x90]
    c33c:	lea    rbx,[rsp+0x10]
    c341:	mov    rax,QWORD PTR fs:0x28
    c34a:	mov    QWORD PTR [rsp+0x1a8],rax
    c352:	xor    eax,eax
    c354:	mov    rdi,r12
    c357:	call   7b00 <sigfillset@plt>
    c35c:	mov    rdx,rbx
    c35f:	mov    rsi,r12
    c362:	mov    edi,0x2
    c367:	call   8200 <pthread_sigmask@plt>
    c36c:	mov    ebp,eax
    c36e:	call   7fd0 <__errno_location@plt>
    c373:	test   ebp,ebp
    c375:	mov    r14,rax
    c378:	jne    c441 <g_str_equal@plt+0x4089>
    c37e:	call   81c0 <fork@plt>
    c383:	test   eax,eax
    c385:	mov    r13d,eax
    c388:	js     c470 <g_str_equal@plt+0x40b8>
    c38e:	jne    c430 <g_str_equal@plt+0x4078>
    c394:	lea    rbp,[rsp+0x110]
    c39c:	mov    ebx,0x1
    c3a1:	mov    QWORD PTR [rsp+0x110],0x0
    c3ad:	mov    DWORD PTR [rsp+0x198],0x0
    c3b8:	lea    rdi,[rbp+0x8]
    c3bc:	call   81d0 <sigemptyset@plt>
    c3c1:	nop    DWORD PTR [rax+0x0]
    c3c8:	xor    edx,edx
    c3ca:	mov    edi,ebx
    c3cc:	mov    rsi,rbp
    c3cf:	add    rbx,0x1
    c3d3:	call   7ec0 <sigaction@plt>
    c3d8:	cmp    rbx,0x41
    c3dc:	jne    c3c8 <g_str_equal@plt+0x4010>
    c3de:	mov    rdi,r12
    c3e1:	call   81d0 <sigemptyset@plt>
    c3e6:	xor    edx,edx
    c3e8:	mov    rsi,r12
    c3eb:	mov    edi,0x2
    c3f0:	call   8200 <pthread_sigmask@plt>
    c3f5:	test   eax,eax
    c3f7:	jne    c4bc <g_str_equal@plt+0x4104>
    c3fd:	mov    rcx,QWORD PTR [rsp+0x1a8]
    c405:	xor    rcx,QWORD PTR fs:0x28
    c40e:	mov    eax,r13d
    c411:	jne    c4b7 <g_str_equal@plt+0x40ff>
    c417:	add    rsp,0x1b8
    c41e:	pop    rbx
    c41f:	pop    rbp
    c420:	pop    r12
    c422:	pop    r13
    c424:	pop    r14
    c426:	pop    r15
    c428:	ret    
    c429:	nop    DWORD PTR [rax+0x0]
    c430:	xor    edx,edx
    c432:	mov    rsi,rbx
    c435:	mov    edi,0x2
    c43a:	call   8200 <pthread_sigmask@plt>
    c43f:	jmp    c3fd <g_str_equal@plt+0x4045>
    c441:	mov    r8d,DWORD PTR [rax]
    c444:	lea    r9,[rip+0x1db34]        # 29f7f <_fini@@Base+0xcfb>
    c44b:	lea    rcx,[rip+0x1db7e]        # 29fd0 <_fini@@Base+0xd4c>
    c452:	lea    rsi,[rip+0x1d97f]        # 29dd8 <_fini@@Base+0xb54>
    c459:	mov    edx,0x1d3
    c45e:	mov    rdi,r15
    c461:	xor    eax,eax
    c463:	mov    r13d,0xffffffff
    c469:	call   dbb0 <g_str_equal@plt+0x57f8>
    c46e:	jmp    c3fd <g_str_equal@plt+0x4045>
    c470:	mov    ebp,DWORD PTR [r14]
    c473:	xor    edx,edx
    c475:	mov    rsi,rbx
    c478:	mov    edi,0x2
    c47d:	mov    r13d,0xffffffff
    c483:	call   8200 <pthread_sigmask@plt>
    c488:	lea    r9,[rip+0x1db05]        # 29f94 <_fini@@Base+0xd10>
    c48f:	lea    rcx,[rip+0x1db3a]        # 29fd0 <_fini@@Base+0xd4c>
    c496:	lea    rsi,[rip+0x1d93b]        # 29dd8 <_fini@@Base+0xb54>
    c49d:	mov    r8d,ebp
    c4a0:	mov    edx,0x1df
    c4a5:	mov    rdi,r15
    c4a8:	xor    eax,eax
    c4aa:	call   dbb0 <g_str_equal@plt+0x57f8>
    c4af:	mov    DWORD PTR [r14],ebp
    c4b2:	jmp    c3fd <g_str_equal@plt+0x4045>
    c4b7:	call   8050 <__stack_chk_fail@plt>
    c4bc:	mov    r8d,DWORD PTR [r14]
    c4bf:	lea    rdi,[rsp+0x8]
    c4c4:	lea    r9,[rip+0x1dae3]        # 29fae <_fini@@Base+0xd2a>
    c4cb:	lea    rcx,[rip+0x1dafe]        # 29fd0 <_fini@@Base+0xd4c>
    c4d2:	lea    rsi,[rip+0x1d8ff]        # 29dd8 <_fini@@Base+0xb54>
    c4d9:	mov    edx,0x203
    c4de:	xor    eax,eax
    c4e0:	mov    QWORD PTR [rsp+0x8],0x0
    c4e9:	call   dbb0 <g_str_equal@plt+0x57f8>
    c4ee:	mov    rdi,QWORD PTR [rsp+0x8]
    c4f3:	call   d8a0 <g_str_equal@plt+0x54e8>
    c4f8:	mov    edi,0x1
    c4fd:	call   7b40 <_exit@plt>
    c502:	nop    DWORD PTR [rax+0x0]
    c506:	nop    WORD PTR cs:[rax+rax*1+0x0]
    c510:	push   rbp
    c511:	push   rbx
    c512:	mov    rbp,rdi
    c515:	sub    rsp,0x8
    c519:	call   7e00 <getpagesize@plt>
    c51e:	mov    edi,0x4b
    c523:	movsxd rbx,eax
    c526:	call   7bc0 <sysconf@plt>
    c52b:	mov    edx,0x0
    c530:	test   rax,rax
    c533:	mov    r8d,0xffffffff
    c539:	cmovs  rax,rdx
    c53d:	cmp    QWORD PTR [rbp+0x0],rax
    c541:	mov    ecx,0x22
    c546:	cmovae rax,QWORD PTR [rbp+0x0]
    c54b:	mov    edx,0x3
    c550:	xor    r9d,r9d
    c553:	xor    edi,edi
    c555:	lea    rsi,[rbx+rax*1-0x1]
    c55a:	mov    rax,rbx
    c55d:	neg    rax
    c560:	and    rsi,rax
    c563:	add    rsi,rbx
    c566:	mov    QWORD PTR [rbp+0x0],rsi
    c56a:	call   7980 <mmap64@plt>
    c56f:	cmp    rax,0xffffffffffffffff
    c573:	je     c593 <g_str_equal@plt+0x41db>
    c575:	xor    edx,edx
    c577:	mov    rsi,rbx
    c57a:	mov    rdi,rax
    c57d:	mov    rbp,rax
    c580:	call   78a0 <mprotect@plt>
    c585:	test   eax,eax
    c587:	jne    c5a4 <g_str_equal@plt+0x41ec>
    c589:	add    rsp,0x8
    c58d:	mov    rax,rbp
    c590:	pop    rbx
    c591:	pop    rbp
    c592:	ret    
    c593:	lea    rdi,[rip+0x1d946]        # 29ee0 <_fini@@Base+0xc5c>
    c59a:	call   8260 <perror@plt>
    c59f:	call   79c0 <abort@plt>
    c5a4:	lea    rdi,[rip+0x1d95d]        # 29f08 <_fini@@Base+0xc84>
    c5ab:	call   8260 <perror@plt>
    c5b0:	call   79c0 <abort@plt>
    c5b5:	nop
    c5b6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    c5c0:	jmp    80f0 <munmap@plt>
    c5c5:	nop
    c5c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    c5d0:	sub    rsp,0x98
    c5d7:	mov    r8,rdi
    c5da:	lea    rdi,[rsp+0x14]
    c5df:	lea    rcx,[rsp+0xc]
    c5e4:	mov    QWORD PTR [rsp+0xc],0x0
    c5ed:	mov    rax,QWORD PTR fs:0x28
    c5f6:	mov    QWORD PTR [rsp+0x88],rax
    c5fe:	xor    eax,eax
    c600:	and    rdi,0xfffffffffffffff8
    c604:	mov    QWORD PTR [rsp+0x78],0x0
    c60d:	sub    rcx,rdi
    c610:	add    ecx,0x74
    c613:	shr    ecx,0x3
    c616:	rep stos QWORD PTR es:[rdi],rax
    c619:	mov    eax,DWORD PTR [rsi+0x4]
    c61c:	mov    edi,DWORD PTR [rsi]
    c61e:	mov    DWORD PTR [rsp+0x4],eax
    c622:	mov    eax,DWORD PTR [rsi+0x8]
    c625:	mov    DWORD PTR [rsp],edi
    c628:	lea    edx,[rax+0x1]
    c62b:	mov    DWORD PTR [rsp+0x8],eax
    c62f:	cmp    edx,0x1
    c632:	jbe    c660 <g_str_equal@plt+0x42a8>
    c634:	test   eax,eax
    c636:	jle    c660 <g_str_equal@plt+0x42a8>
    c638:	cmp    edi,0xb
    c63b:	jbe    c698 <g_str_equal@plt+0x42e0>
    c63d:	cmp    edi,0x11
    c640:	jne    c66e <g_str_equal@plt+0x42b6>
    c642:	mov    eax,DWORD PTR [rsi+0xc]
    c645:	mov    DWORD PTR [rsp+0x10],eax
    c649:	mov    eax,DWORD PTR [rsi+0x28]
    c64c:	mov    DWORD PTR [rsp+0x18],eax
    c650:	mov    eax,DWORD PTR [rsi+0x10]
    c653:	mov    DWORD PTR [rsp+0x14],eax
    c657:	jmp    c66e <g_str_equal@plt+0x42b6>
    c659:	nop    DWORD PTR [rax+0x0]
    c660:	mov    eax,DWORD PTR [rsi+0xc]
    c663:	mov    DWORD PTR [rsp+0x10],eax
    c667:	mov    eax,DWORD PTR [rsi+0x10]
    c66a:	mov    DWORD PTR [rsp+0x14],eax
    c66e:	xor    edx,edx
    c670:	mov    rsi,rsp
    c673:	call   QWORD PTR [r8]
    c676:	mov    rax,QWORD PTR [rsp+0x88]
    c67e:	xor    rax,QWORD PTR fs:0x28
    c687:	jne    c6ae <g_str_equal@plt+0x42f6>
    c689:	add    rsp,0x98
    c690:	ret    
    c691:	nop    DWORD PTR [rax+0x0]
    c698:	mov    eax,0x990
    c69d:	bt     rax,rdi
    c6a1:	jae    c66e <g_str_equal@plt+0x42b6>
    c6a3:	mov    rax,QWORD PTR [rsi+0x48]
    c6a7:	mov    QWORD PTR [rsp+0x10],rax
    c6ac:	jmp    c66e <g_str_equal@plt+0x42b6>
    c6ae:	call   8050 <__stack_chk_fail@plt>
    c6b3:	nop    WORD PTR cs:[rax+rax*1+0x0]
    c6bd:	nop    DWORD PTR [rax]
    c6c0:	sub    rsp,0x18
    c6c4:	xor    esi,esi
    c6c6:	mov    QWORD PTR [rsp],rdi
    c6ca:	mov    rdi,rsp
    c6cd:	mov    rax,QWORD PTR fs:0x28
    c6d6:	mov    QWORD PTR [rsp+0x8],rax
    c6db:	xor    eax,eax
    c6dd:	call   e7b0 <g_str_equal@plt+0x63f8>
    c6e2:	mov    rax,QWORD PTR [rsp+0x8]
    c6e7:	xor    rax,QWORD PTR fs:0x28
    c6f0:	jne    c6f7 <g_str_equal@plt+0x433f>
    c6f2:	add    rsp,0x18
    c6f6:	ret    
    c6f7:	call   8050 <__stack_chk_fail@plt>
    c6fc:	nop    DWORD PTR [rax+0x0]
    c700:	push   r13
    c702:	push   r12
    c704:	push   rbx
    c705:	mov    rbx,rdi
    c708:	sub    rsp,0x10
    c70c:	cmp    BYTE PTR [rip+0x2345e1],0x0        # 240cf4 <stdout@@GLIBC_2.2.5+0x104c>
    c713:	mov    r12,QWORD PTR [rdi]
    c716:	mov    r13,QWORD PTR [rdi+0x8]
    c71a:	mov    rdi,QWORD PTR [rdi+0x10]
    c71e:	je     c743 <g_str_equal@plt+0x438b>
    c720:	test   rdi,rdi
    c723:	je     c743 <g_str_equal@plt+0x438b>
    c725:	mov    QWORD PTR [rsp+0x8],rdi
    c72a:	call   7e40 <pthread_self@plt>
    c72f:	mov    rdi,QWORD PTR [rsp+0x8]
    c734:	mov    rsi,rdi
    c737:	mov    rdi,rax
    c73a:	call   7b10 <pthread_setname_np@plt>
    c73f:	mov    rdi,QWORD PTR [rbx+0x10]
    c743:	call   7880 <g_free@plt>
    c748:	mov    rdi,rbx
    c74b:	call   7880 <g_free@plt>
    c750:	add    rsp,0x10
    c754:	mov    rdi,r13
    c757:	mov    rax,r12
    c75a:	pop    rbx
    c75b:	pop    r12
    c75d:	pop    r13
    c75f:	jmp    rax
    c761:	nop    DWORD PTR [rax+rax*1+0x0]
    c766:	nop    WORD PTR cs:[rax+rax*1+0x0]
    c770:	mov    BYTE PTR [rip+0x23457d],dil        # 240cf4 <stdout@@GLIBC_2.2.5+0x104c>
    c777:	ret    
    c778:	nop    DWORD PTR [rax+rax*1+0x0]
    c780:	push   rbx
    c781:	xor    esi,esi
    c783:	mov    rbx,rdi
    c786:	call   7c00 <pthread_mutex_init@plt>
    c78b:	test   eax,eax
    c78d:	jne    c795 <g_str_equal@plt+0x43dd>
    c78f:	mov    BYTE PTR [rbx+0x28],0x1
    c793:	pop    rbx
    c794:	ret    
    c795:	lea    rsi,[rip+0x1dda4]        # 2a540 <_fini@@Base+0x12bc>
    c79c:	mov    edi,eax
    c79e:	call   83f2 <g_str_equal@plt+0x3a>
    c7a3:	nop    DWORD PTR [rax]
    c7a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    c7b0:	sub    rsp,0x8
    c7b4:	cmp    BYTE PTR [rdi+0x28],0x0
    c7b8:	je     c7cc <g_str_equal@plt+0x4414>
    c7ba:	mov    BYTE PTR [rdi+0x28],0x0
    c7be:	call   82a0 <pthread_mutex_destroy@plt>
    c7c3:	test   eax,eax
    c7c5:	jne    c7eb <g_str_equal@plt+0x4433>
    c7c7:	add    rsp,0x8
    c7cb:	ret    
    c7cc:	lea    rcx,[rip+0x1dd4d]        # 2a520 <_fini@@Base+0x129c>
    c7d3:	lea    rsi,[rip+0x1d8c6]        # 2a0a0 <_fini@@Base+0xe1c>
    c7da:	lea    rdi,[rip+0x1d873]        # 2a054 <_fini@@Base+0xdd0>
    c7e1:	mov    edx,0x35
    c7e6:	call   7a70 <__assert_fail@plt>
    c7eb:	lea    rsi,[rip+0x1dd0e]        # 2a500 <_fini@@Base+0x127c>
    c7f2:	mov    edi,eax
    c7f4:	call   83f2 <g_str_equal@plt+0x3a>
    c7f9:	nop    DWORD PTR [rax+0x0]
    c800:	push   r14
    c802:	push   r13
    c804:	push   r12
    c806:	push   rbp
    c807:	push   rbx
    c808:	sub    rsp,0x20
    c80c:	mov    rax,QWORD PTR fs:0x28
    c815:	mov    QWORD PTR [rsp+0x18],rax
    c81a:	xor    eax,eax
    c81c:	cmp    BYTE PTR [rdi+0x28],0x0
    c820:	je     c934 <g_str_equal@plt+0x457c>
    c826:	mov    r8d,DWORD PTR [rip+0x2355cb]        # 241df8 <stdout@@GLIBC_2.2.5+0x2150>
    c82d:	mov    rbx,rdi
    c830:	mov    rbp,rsi
    c833:	mov    r12d,edx
    c836:	test   r8d,r8d
    c839:	jne    c880 <g_str_equal@plt+0x44c8>
    c83b:	mov    rdi,rbx
    c83e:	call   8250 <pthread_mutex_lock@plt>
    c843:	test   eax,eax
    c845:	jne    c958 <g_str_equal@plt+0x45a0>
    c84b:	mov    ecx,DWORD PTR [rip+0x2355a7]        # 241df8 <stdout@@GLIBC_2.2.5+0x2150>
    c851:	test   ecx,ecx
    c853:	jne    c8d8 <g_str_equal@plt+0x4520>
    c859:	mov    rax,QWORD PTR [rsp+0x18]
    c85e:	xor    rax,QWORD PTR fs:0x28
    c867:	jne    c953 <g_str_equal@plt+0x459b>
    c86d:	add    rsp,0x20
    c871:	pop    rbx
    c872:	pop    rbp
    c873:	pop    r12
    c875:	pop    r13
    c877:	pop    r14
    c879:	ret    
    c87a:	nop    WORD PTR [rax+rax*1+0x0]
    c880:	cmp    WORD PTR [rip+0x23551e],0x0        # 241da6 <stdout@@GLIBC_2.2.5+0x20fe>
    c888:	je     c83b <g_str_equal@plt+0x4483>
    c88a:	test   BYTE PTR [rip+0x2344b0],0x80        # 240d41 <stdout@@GLIBC_2.2.5+0x1099>
    c891:	je     c83b <g_str_equal@plt+0x4483>
    c893:	mov    rdi,rsp
    c896:	xor    esi,esi
    c898:	call   7a90 <gettimeofday@plt>
    c89d:	mov    r14,QWORD PTR [rsp+0x8]
    c8a2:	mov    r13,QWORD PTR [rsp]
    c8a6:	call   7bf0 <getpid@plt>
    c8ab:	sub    rsp,0x8
    c8af:	lea    rdi,[rip+0x1d832]        # 2a0e8 <_fini@@Base+0xe64>
    c8b6:	mov    esi,eax
    c8b8:	push   r12
    c8ba:	mov    r9,rbp
    c8bd:	mov    r8,rbx
    c8c0:	mov    rcx,r14
    c8c3:	mov    rdx,r13
    c8c6:	xor    eax,eax
    c8c8:	call   10b60 <g_str_equal@plt+0x87a8>
    c8cd:	pop    rsi
    c8ce:	pop    rdi
    c8cf:	jmp    c83b <g_str_equal@plt+0x4483>
    c8d4:	nop    DWORD PTR [rax+0x0]
    c8d8:	cmp    WORD PTR [rip+0x2354c4],0x0        # 241da4 <stdout@@GLIBC_2.2.5+0x20fc>
    c8e0:	je     c859 <g_str_equal@plt+0x44a1>
    c8e6:	test   BYTE PTR [rip+0x234454],0x80        # 240d41 <stdout@@GLIBC_2.2.5+0x1099>
    c8ed:	je     c859 <g_str_equal@plt+0x44a1>
    c8f3:	mov    rdi,rsp
    c8f6:	xor    esi,esi
    c8f8:	call   7a90 <gettimeofday@plt>
    c8fd:	mov    r14,QWORD PTR [rsp+0x8]
    c902:	mov    r13,QWORD PTR [rsp]
    c906:	call   7bf0 <getpid@plt>
    c90b:	sub    rsp,0x8
    c90f:	lea    rdi,[rip+0x1d812]        # 2a128 <_fini@@Base+0xea4>
    c916:	mov    esi,eax
    c918:	push   r12
    c91a:	mov    rdx,r13
    c91d:	mov    r9,rbp
    c920:	mov    r8,rbx
    c923:	mov    rcx,r14
    c926:	xor    eax,eax
    c928:	call   10b60 <g_str_equal@plt+0x87a8>
    c92d:	pop    rax
    c92e:	pop    rdx
    c92f:	jmp    c859 <g_str_equal@plt+0x44a1>
    c934:	lea    rcx,[rip+0x1dba5]        # 2a4e0 <_fini@@Base+0x125c>
    c93b:	lea    rsi,[rip+0x1d75e]        # 2a0a0 <_fini@@Base+0xe1c>
    c942:	lea    rdi,[rip+0x1d70b]        # 2a054 <_fini@@Base+0xdd0>
    c949:	mov    edx,0x40
    c94e:	call   7a70 <__assert_fail@plt>
    c953:	call   8050 <__stack_chk_fail@plt>
    c958:	lea    rsi,[rip+0x1db61]        # 2a4c0 <_fini@@Base+0x123c>
    c95f:	mov    edi,eax
    c961:	call   83f2 <g_str_equal@plt+0x3a>
    c966:	nop    WORD PTR cs:[rax+rax*1+0x0]
    c970:	push   r14
    c972:	push   r13
    c974:	push   r12
    c976:	push   rbp
    c977:	push   rbx
    c978:	sub    rsp,0x20
    c97c:	mov    rax,QWORD PTR fs:0x28
    c985:	mov    QWORD PTR [rsp+0x18],rax
    c98a:	xor    eax,eax
    c98c:	cmp    BYTE PTR [rdi+0x28],0x0
    c990:	je     ca46 <g_str_equal@plt+0x468e>
    c996:	mov    rbx,rdi
    c999:	mov    rbp,rsi
    c99c:	mov    r12d,edx
    c99f:	call   7e80 <pthread_mutex_trylock@plt>
    c9a4:	test   eax,eax
    c9a6:	je     c9e0 <g_str_equal@plt+0x4628>
    c9a8:	cmp    eax,0x10
    c9ab:	jne    ca6a <g_str_equal@plt+0x46b2>
    c9b1:	mov    eax,0xfffffff0
    c9b6:	mov    rcx,QWORD PTR [rsp+0x18]
    c9bb:	xor    rcx,QWORD PTR fs:0x28
    c9c4:	jne    ca65 <g_str_equal@plt+0x46ad>
    c9ca:	add    rsp,0x20
    c9ce:	pop    rbx
    c9cf:	pop    rbp
    c9d0:	pop    r12
    c9d2:	pop    r13
    c9d4:	pop    r14
    c9d6:	ret    
    c9d7:	nop    WORD PTR [rax+rax*1+0x0]
    c9e0:	mov    eax,DWORD PTR [rip+0x235412]        # 241df8 <stdout@@GLIBC_2.2.5+0x2150>
    c9e6:	test   eax,eax
    c9e8:	je     c9b6 <g_str_equal@plt+0x45fe>
    c9ea:	xor    eax,eax
    c9ec:	cmp    WORD PTR [rip+0x2353b0],0x0        # 241da4 <stdout@@GLIBC_2.2.5+0x20fc>
    c9f4:	je     c9b6 <g_str_equal@plt+0x45fe>
    c9f6:	mov    eax,DWORD PTR [rip+0x234344]        # 240d40 <stdout@@GLIBC_2.2.5+0x1098>
    c9fc:	and    eax,0x8000
    ca01:	je     c9b6 <g_str_equal@plt+0x45fe>
    ca03:	mov    rdi,rsp
    ca06:	xor    esi,esi
    ca08:	call   7a90 <gettimeofday@plt>
    ca0d:	mov    r14,QWORD PTR [rsp+0x8]
    ca12:	mov    r13,QWORD PTR [rsp]
    ca16:	call   7bf0 <getpid@plt>
    ca1b:	sub    rsp,0x8
    ca1f:	lea    rdi,[rip+0x1d702]        # 2a128 <_fini@@Base+0xea4>
    ca26:	mov    esi,eax
    ca28:	push   r12
    ca2a:	mov    rdx,r13
    ca2d:	mov    r9,rbp
    ca30:	mov    r8,rbx
    ca33:	mov    rcx,r14
    ca36:	xor    eax,eax
    ca38:	call   10b60 <g_str_equal@plt+0x87a8>
    ca3d:	pop    rax
    ca3e:	xor    eax,eax
    ca40:	pop    rdx
    ca41:	jmp    c9b6 <g_str_equal@plt+0x45fe>
    ca46:	lea    rcx,[rip+0x1da53]        # 2a4a0 <_fini@@Base+0x121c>
    ca4d:	lea    rsi,[rip+0x1d64c]        # 2a0a0 <_fini@@Base+0xe1c>
    ca54:	lea    rdi,[rip+0x1d5f9]        # 2a054 <_fini@@Base+0xdd0>
    ca5b:	mov    edx,0x4c
    ca60:	call   7a70 <__assert_fail@plt>
    ca65:	call   8050 <__stack_chk_fail@plt>
    ca6a:	lea    rsi,[rip+0x1da0f]        # 2a480 <_fini@@Base+0x11fc>
    ca71:	mov    edi,eax
    ca73:	call   83f2 <g_str_equal@plt+0x3a>
    ca78:	nop    DWORD PTR [rax+rax*1+0x0]
    ca80:	push   r13
    ca82:	push   r12
    ca84:	push   rbp
    ca85:	push   rbx
    ca86:	sub    rsp,0x38
    ca8a:	mov    rax,QWORD PTR fs:0x28
    ca93:	mov    QWORD PTR [rsp+0x28],rax
    ca98:	xor    eax,eax
    ca9a:	cmp    BYTE PTR [rdi+0x28],0x0
    ca9e:	je     cb41 <g_str_equal@plt+0x4789>
    caa4:	mov    ecx,DWORD PTR [rip+0x23534e]        # 241df8 <stdout@@GLIBC_2.2.5+0x2150>
    caaa:	mov    rbx,rdi
    caad:	test   ecx,ecx
    caaf:	jne    cae0 <g_str_equal@plt+0x4728>
    cab1:	mov    rdi,rbx
    cab4:	call   8320 <pthread_mutex_unlock@plt>
    cab9:	test   eax,eax
    cabb:	jne    cb65 <g_str_equal@plt+0x47ad>
    cac1:	mov    rax,QWORD PTR [rsp+0x28]
    cac6:	xor    rax,QWORD PTR fs:0x28
    cacf:	jne    cb60 <g_str_equal@plt+0x47a8>
    cad5:	add    rsp,0x38
    cad9:	pop    rbx
    cada:	pop    rbp
    cadb:	pop    r12
    cadd:	pop    r13
    cadf:	ret    
    cae0:	cmp    WORD PTR [rip+0x2352ba],0x0        # 241da2 <stdout@@GLIBC_2.2.5+0x20fa>
    cae8:	je     cab1 <g_str_equal@plt+0x46f9>
    caea:	test   BYTE PTR [rip+0x234250],0x80        # 240d41 <stdout@@GLIBC_2.2.5+0x1099>
    caf1:	je     cab1 <g_str_equal@plt+0x46f9>
    caf3:	lea    rdi,[rsp+0x10]
    caf8:	mov    rbp,rsi
    cafb:	xor    esi,esi
    cafd:	mov    DWORD PTR [rsp+0xc],edx
    cb01:	call   7a90 <gettimeofday@plt>
    cb06:	mov    r13,QWORD PTR [rsp+0x18]
    cb0b:	mov    r12,QWORD PTR [rsp+0x10]
    cb10:	call   7bf0 <getpid@plt>
    cb15:	sub    rsp,0x8
    cb19:	lea    rdi,[rip+0x1d640]        # 2a160 <_fini@@Base+0xedc>
    cb20:	mov    esi,eax
    cb22:	mov    edx,DWORD PTR [rsp+0x14]
    cb26:	mov    r9,rbp
    cb29:	mov    r8,rbx
    cb2c:	mov    rcx,r13
    cb2f:	xor    eax,eax
    cb31:	push   rdx
    cb32:	mov    rdx,r12
    cb35:	call   10b60 <g_str_equal@plt+0x87a8>
    cb3a:	pop    rax
    cb3b:	pop    rdx
    cb3c:	jmp    cab1 <g_str_equal@plt+0x46f9>
    cb41:	lea    rcx,[rip+0x1d918]        # 2a460 <_fini@@Base+0x11dc>
    cb48:	lea    rsi,[rip+0x1d551]        # 2a0a0 <_fini@@Base+0xe1c>
    cb4f:	lea    rdi,[rip+0x1d4fe]        # 2a054 <_fini@@Base+0xdd0>
    cb56:	mov    edx,0x5c
    cb5b:	call   7a70 <__assert_fail@plt>
    cb60:	call   8050 <__stack_chk_fail@plt>
    cb65:	lea    rsi,[rip+0x1d8d4]        # 2a440 <_fini@@Base+0x11bc>
    cb6c:	mov    edi,eax
    cb6e:	call   83f2 <g_str_equal@plt+0x3a>
    cb73:	nop    DWORD PTR [rax]
    cb76:	nop    WORD PTR cs:[rax+rax*1+0x0]
    cb80:	push   r12
    cb82:	push   rbp
    cb83:	mov    rbp,rdi
    cb86:	push   rbx
    cb87:	sub    rsp,0x10
    cb8b:	lea    rbx,[rsp+0x4]
    cb90:	mov    rax,QWORD PTR fs:0x28
    cb99:	mov    QWORD PTR [rsp+0x8],rax
    cb9e:	xor    eax,eax
    cba0:	mov    rdi,rbx
    cba3:	call   8270 <pthread_mutexattr_init@plt>
    cba8:	mov    esi,0x1
    cbad:	mov    rdi,rbx
    cbb0:	call   8040 <pthread_mutexattr_settype@plt>
    cbb5:	mov    rsi,rbx
    cbb8:	mov    rdi,rbp
    cbbb:	call   7c00 <pthread_mutex_init@plt>
    cbc0:	mov    rdi,rbx
    cbc3:	mov    r12d,eax
    cbc6:	call   7a60 <pthread_mutexattr_destroy@plt>
    cbcb:	test   r12d,r12d
    cbce:	jne    cbed <g_str_equal@plt+0x4835>
    cbd0:	mov    rax,QWORD PTR [rsp+0x8]
    cbd5:	xor    rax,QWORD PTR fs:0x28
    cbde:	mov    BYTE PTR [rbp+0x28],0x1
    cbe2:	jne    cbfc <g_str_equal@plt+0x4844>
    cbe4:	add    rsp,0x10
    cbe8:	pop    rbx
    cbe9:	pop    rbp
    cbea:	pop    r12
    cbec:	ret    
    cbed:	lea    rsi,[rip+0x1d82c]        # 2a420 <_fini@@Base+0x119c>
    cbf4:	mov    edi,r12d
    cbf7:	call   83f2 <g_str_equal@plt+0x3a>
    cbfc:	call   8050 <__stack_chk_fail@plt>
    cc01:	nop    DWORD PTR [rax+rax*1+0x0]
    cc06:	nop    WORD PTR cs:[rax+rax*1+0x0]
    cc10:	push   rbx
    cc11:	xor    esi,esi
    cc13:	mov    rbx,rdi
    cc16:	call   7d10 <pthread_cond_init@plt>
    cc1b:	test   eax,eax
    cc1d:	jne    cc25 <g_str_equal@plt+0x486d>
    cc1f:	mov    BYTE PTR [rbx+0x30],0x1
    cc23:	pop    rbx
    cc24:	ret    
    cc25:	lea    rsi,[rip+0x1d7dc]        # 2a408 <_fini@@Base+0x1184>
    cc2c:	mov    edi,eax
    cc2e:	call   83f2 <g_str_equal@plt+0x3a>
    cc33:	nop    DWORD PTR [rax]
    cc36:	nop    WORD PTR cs:[rax+rax*1+0x0]
    cc40:	sub    rsp,0x8
    cc44:	cmp    BYTE PTR [rdi+0x30],0x0
    cc48:	je     cc5c <g_str_equal@plt+0x48a4>
    cc4a:	mov    BYTE PTR [rdi+0x30],0x0
    cc4e:	call   7900 <pthread_cond_destroy@plt>
    cc53:	test   eax,eax
    cc55:	jne    cc7b <g_str_equal@plt+0x48c3>
    cc57:	add    rsp,0x8
    cc5b:	ret    
    cc5c:	lea    rcx,[rip+0x1d78d]        # 2a3f0 <_fini@@Base+0x116c>
    cc63:	lea    rsi,[rip+0x1d436]        # 2a0a0 <_fini@@Base+0xe1c>
    cc6a:	lea    rdi,[rip+0x1d3f6]        # 2a067 <_fini@@Base+0xde3>
    cc71:	mov    edx,0x80
    cc76:	call   7a70 <__assert_fail@plt>
    cc7b:	lea    rsi,[rip+0x1d74e]        # 2a3d0 <_fini@@Base+0x114c>
    cc82:	mov    edi,eax
    cc84:	call   83f2 <g_str_equal@plt+0x3a>
    cc89:	nop    DWORD PTR [rax+0x0]
    cc90:	sub    rsp,0x8
    cc94:	cmp    BYTE PTR [rdi+0x30],0x0
    cc98:	je     cca8 <g_str_equal@plt+0x48f0>
    cc9a:	call   7a20 <pthread_cond_signal@plt>
    cc9f:	test   eax,eax
    cca1:	jne    ccc7 <g_str_equal@plt+0x490f>
    cca3:	add    rsp,0x8
    cca7:	ret    
    cca8:	lea    rcx,[rip+0x1d701]        # 2a3b0 <_fini@@Base+0x112c>
    ccaf:	lea    rsi,[rip+0x1d3ea]        # 2a0a0 <_fini@@Base+0xe1c>
    ccb6:	lea    rdi,[rip+0x1d3aa]        # 2a067 <_fini@@Base+0xde3>
    ccbd:	mov    edx,0x8b
    ccc2:	call   7a70 <__assert_fail@plt>
    ccc7:	lea    rsi,[rip+0x1d6c2]        # 2a390 <_fini@@Base+0x110c>
    ccce:	mov    edi,eax
    ccd0:	call   83f2 <g_str_equal@plt+0x3a>
    ccd5:	nop
    ccd6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    cce0:	sub    rsp,0x8
    cce4:	cmp    BYTE PTR [rdi+0x30],0x0
    cce8:	je     ccf8 <g_str_equal@plt+0x4940>
    ccea:	call   82c0 <pthread_cond_broadcast@plt>
    ccef:	test   eax,eax
    ccf1:	jne    cd17 <g_str_equal@plt+0x495f>
    ccf3:	add    rsp,0x8
    ccf7:	ret    
    ccf8:	lea    rcx,[rip+0x1d671]        # 2a370 <_fini@@Base+0x10ec>
    ccff:	lea    rsi,[rip+0x1d39a]        # 2a0a0 <_fini@@Base+0xe1c>
    cd06:	lea    rdi,[rip+0x1d35a]        # 2a067 <_fini@@Base+0xde3>
    cd0d:	mov    edx,0x95
    cd12:	call   7a70 <__assert_fail@plt>
    cd17:	lea    rsi,[rip+0x1d632]        # 2a350 <_fini@@Base+0x10cc>
    cd1e:	mov    edi,eax
    cd20:	call   83f2 <g_str_equal@plt+0x3a>
    cd25:	nop
    cd26:	nop    WORD PTR cs:[rax+rax*1+0x0]
    cd30:	push   r15
    cd32:	push   r14
    cd34:	push   r13
    cd36:	push   r12
    cd38:	push   rbp
    cd39:	push   rbx
    cd3a:	sub    rsp,0x28
    cd3e:	mov    rax,QWORD PTR fs:0x28
    cd47:	mov    QWORD PTR [rsp+0x18],rax
    cd4c:	xor    eax,eax
    cd4e:	cmp    BYTE PTR [rdi+0x30],0x0
    cd52:	je     ce74 <g_str_equal@plt+0x4abc>
    cd58:	mov    r8d,DWORD PTR [rip+0x235099]        # 241df8 <stdout@@GLIBC_2.2.5+0x2150>
    cd5f:	mov    rbx,rdi
    cd62:	mov    rbp,rsi
    cd65:	mov    r12,rdx
    cd68:	mov    r13d,ecx
    cd6b:	test   r8d,r8d
    cd6e:	jne    cdc0 <g_str_equal@plt+0x4a08>
    cd70:	mov    rdi,rbx
    cd73:	mov    rsi,rbp
    cd76:	call   80b0 <pthread_cond_wait@plt>
    cd7b:	mov    ecx,DWORD PTR [rip+0x235077]        # 241df8 <stdout@@GLIBC_2.2.5+0x2150>
    cd81:	mov    ebx,eax
    cd83:	test   ecx,ecx
    cd85:	jne    ce18 <g_str_equal@plt+0x4a60>
    cd8b:	test   ebx,ebx
    cd8d:	jne    ce98 <g_str_equal@plt+0x4ae0>
    cd93:	mov    rax,QWORD PTR [rsp+0x18]
    cd98:	xor    rax,QWORD PTR fs:0x28
    cda1:	jne    ce93 <g_str_equal@plt+0x4adb>
    cda7:	add    rsp,0x28
    cdab:	pop    rbx
    cdac:	pop    rbp
    cdad:	pop    r12
    cdaf:	pop    r13
    cdb1:	pop    r14
    cdb3:	pop    r15
    cdb5:	ret    
    cdb6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    cdc0:	cmp    WORD PTR [rip+0x234fda],0x0        # 241da2 <stdout@@GLIBC_2.2.5+0x20fa>
    cdc8:	je     cd70 <g_str_equal@plt+0x49b8>
    cdca:	test   BYTE PTR [rip+0x233f70],0x80        # 240d41 <stdout@@GLIBC_2.2.5+0x1099>
    cdd1:	je     cd70 <g_str_equal@plt+0x49b8>
    cdd3:	mov    rdi,rsp
    cdd6:	xor    esi,esi
    cdd8:	call   7a90 <gettimeofday@plt>
    cddd:	mov    r15,QWORD PTR [rsp+0x8]
    cde2:	mov    r14,QWORD PTR [rsp]
    cde6:	call   7bf0 <getpid@plt>
    cdeb:	sub    rsp,0x8
    cdef:	lea    rdi,[rip+0x1d36a]        # 2a160 <_fini@@Base+0xedc>
    cdf6:	mov    esi,eax
    cdf8:	push   r13
    cdfa:	mov    r9,r12
    cdfd:	mov    r8,rbp
    ce00:	mov    rcx,r15
    ce03:	mov    rdx,r14
    ce06:	xor    eax,eax
    ce08:	call   10b60 <g_str_equal@plt+0x87a8>
    ce0d:	pop    rsi
    ce0e:	pop    rdi
    ce0f:	jmp    cd70 <g_str_equal@plt+0x49b8>
    ce14:	nop    DWORD PTR [rax+0x0]
    ce18:	cmp    WORD PTR [rip+0x234f84],0x0        # 241da4 <stdout@@GLIBC_2.2.5+0x20fc>
    ce20:	je     cd8b <g_str_equal@plt+0x49d3>
    ce26:	test   BYTE PTR [rip+0x233f14],0x80        # 240d41 <stdout@@GLIBC_2.2.5+0x1099>
    ce2d:	je     cd8b <g_str_equal@plt+0x49d3>
    ce33:	mov    rdi,rsp
    ce36:	xor    esi,esi
    ce38:	call   7a90 <gettimeofday@plt>
    ce3d:	mov    r15,QWORD PTR [rsp+0x8]
    ce42:	mov    r14,QWORD PTR [rsp]
    ce46:	call   7bf0 <getpid@plt>
    ce4b:	sub    rsp,0x8
    ce4f:	lea    rdi,[rip+0x1d2d2]        # 2a128 <_fini@@Base+0xea4>
    ce56:	mov    esi,eax
    ce58:	push   r13
    ce5a:	mov    rdx,r14
    ce5d:	mov    r9,r12
    ce60:	mov    r8,rbp
    ce63:	mov    rcx,r15
    ce66:	xor    eax,eax
    ce68:	call   10b60 <g_str_equal@plt+0x87a8>
    ce6d:	pop    rax
    ce6e:	pop    rdx
    ce6f:	jmp    cd8b <g_str_equal@plt+0x49d3>
    ce74:	lea    rcx,[rip+0x1d4b5]        # 2a330 <_fini@@Base+0x10ac>
    ce7b:	lea    rsi,[rip+0x1d21e]        # 2a0a0 <_fini@@Base+0xe1c>
    ce82:	lea    rdi,[rip+0x1d1de]        # 2a067 <_fini@@Base+0xde3>
    ce89:	mov    edx,0x9f
    ce8e:	call   7a70 <__assert_fail@plt>
    ce93:	call   8050 <__stack_chk_fail@plt>
    ce98:	lea    rsi,[rip+0x1d471]        # 2a310 <_fini@@Base+0x108c>
    ce9f:	mov    edi,ebx
    cea1:	call   83f2 <g_str_equal@plt+0x3a>
    cea6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    ceb0:	push   rbx
    ceb1:	mov    edx,esi
    ceb3:	xor    esi,esi
    ceb5:	mov    rbx,rdi
    ceb8:	call   8030 <sem_init@plt>
    cebd:	test   eax,eax
    cebf:	js     cec7 <g_str_equal@plt+0x4b0f>
    cec1:	mov    BYTE PTR [rbx+0x20],0x1
    cec5:	pop    rbx
    cec6:	ret    
    cec7:	call   7fd0 <__errno_location@plt>
    cecc:	mov    edi,DWORD PTR [rax]
    cece:	lea    rsi,[rip+0x1d423]        # 2a2f8 <_fini@@Base+0x1074>
    ced5:	call   83f2 <g_str_equal@plt+0x3a>
    ceda:	nop    WORD PTR [rax+rax*1+0x0]
    cee0:	sub    rsp,0x8
    cee4:	cmp    BYTE PTR [rdi+0x20],0x0
    cee8:	je     cefc <g_str_equal@plt+0x4b44>
    ceea:	mov    BYTE PTR [rdi+0x20],0x0
    ceee:	call   79f0 <sem_destroy@plt>
    cef3:	test   eax,eax
    cef5:	js     cf1b <g_str_equal@plt+0x4b63>
    cef7:	add    rsp,0x8
    cefb:	ret    
    cefc:	lea    rcx,[rip+0x1d3dd]        # 2a2e0 <_fini@@Base+0x105c>
    cf03:	lea    rsi,[rip+0x1d196]        # 2a0a0 <_fini@@Base+0xe1c>
    cf0a:	lea    rdi,[rip+0x1d168]        # 2a079 <_fini@@Base+0xdf5>
    cf11:	mov    edx,0xc5
    cf16:	call   7a70 <__assert_fail@plt>
    cf1b:	call   7fd0 <__errno_location@plt>
    cf20:	mov    edi,DWORD PTR [rax]
    cf22:	lea    rsi,[rip+0x1d397]        # 2a2c0 <_fini@@Base+0x103c>
    cf29:	call   83f2 <g_str_equal@plt+0x3a>
    cf2e:	xchg   ax,ax
    cf30:	sub    rsp,0x8
    cf34:	cmp    BYTE PTR [rdi+0x20],0x0
    cf38:	je     cf48 <g_str_equal@plt+0x4b90>
    cf3a:	call   8070 <sem_post@plt>
    cf3f:	test   eax,eax
    cf41:	js     cf67 <g_str_equal@plt+0x4baf>
    cf43:	add    rsp,0x8
    cf47:	ret    
    cf48:	lea    rcx,[rip+0x1d359]        # 2a2a8 <_fini@@Base+0x1024>
    cf4f:	lea    rsi,[rip+0x1d14a]        # 2a0a0 <_fini@@Base+0xe1c>
    cf56:	lea    rdi,[rip+0x1d11c]        # 2a079 <_fini@@Base+0xdf5>
    cf5d:	mov    edx,0xdc
    cf62:	call   7a70 <__assert_fail@plt>
    cf67:	call   7fd0 <__errno_location@plt>
    cf6c:	mov    edi,DWORD PTR [rax]
    cf6e:	lea    rsi,[rip+0x1d323]        # 2a298 <_fini@@Base+0x1014>
    cf75:	call   83f2 <g_str_equal@plt+0x3a>
    cf7a:	nop    WORD PTR [rax+rax*1+0x0]
    cf80:	push   rbp
    cf81:	push   rbx
    cf82:	sub    rsp,0x38
    cf86:	mov    rax,QWORD PTR fs:0x28
    cf8f:	mov    QWORD PTR [rsp+0x28],rax
    cf94:	xor    eax,eax
    cf96:	cmp    BYTE PTR [rdi+0x20],0x0
    cf9a:	je     d0c6 <g_str_equal@plt+0x4d0e>
    cfa0:	test   esi,esi
    cfa2:	mov    rbx,rdi
    cfa5:	mov    ebp,esi
    cfa7:	jle    cfc0 <g_str_equal@plt+0x4c08>
    cfa9:	jmp    cff8 <g_str_equal@plt+0x4c40>
    cfab:	nop    DWORD PTR [rax+rax*1+0x0]
    cfb0:	call   7fd0 <__errno_location@plt>
    cfb5:	mov    edi,DWORD PTR [rax]
    cfb7:	cmp    edi,0x4
    cfba:	jne    d090 <g_str_equal@plt+0x4cd8>
    cfc0:	mov    rdi,rbx
    cfc3:	call   7ad0 <sem_trywait@plt>
    cfc8:	cmp    eax,0xffffffff
    cfcb:	je     cfb0 <g_str_equal@plt+0x4bf8>
    cfcd:	test   eax,eax
    cfcf:	js     d0ea <g_str_equal@plt+0x4d32>
    cfd5:	xor    eax,eax
    cfd7:	mov    rcx,QWORD PTR [rsp+0x28]
    cfdc:	xor    rcx,QWORD PTR fs:0x28
    cfe5:	jne    d0e5 <g_str_equal@plt+0x4d2d>
    cfeb:	add    rsp,0x38
    cfef:	pop    rbx
    cff0:	pop    rbp
    cff1:	ret    
    cff2:	nop    WORD PTR [rax+rax*1+0x0]
    cff8:	lea    rdi,[rsp+0x10]
    cffd:	xor    esi,esi
    cfff:	call   7a90 <gettimeofday@plt>
    d004:	mov    eax,ebp
    d006:	mov    edx,0x10624dd3
    d00b:	imul   edx
    d00d:	mov    eax,ebp
    d00f:	sar    eax,0x1f
    d012:	imul   rcx,QWORD PTR [rsp+0x18],0x3e8
    d01b:	sar    edx,0x6
    d01e:	sub    edx,eax
    d020:	imul   eax,edx,0x3e8
    d026:	movsxd rdx,edx
    d029:	add    rdx,QWORD PTR [rsp+0x10]
    d02e:	sub    ebp,eax
    d030:	imul   ebp,ebp,0xf4240
    d036:	movsxd rbp,ebp
    d039:	add    rbp,rcx
    d03c:	cmp    rbp,0x3b9ac9ff
    d043:	mov    QWORD PTR [rsp+0x8],rbp
    d048:	jle    d0c0 <g_str_equal@plt+0x4d08>
    d04a:	add    rdx,0x1
    d04e:	sub    rbp,0x3b9aca00
    d055:	mov    QWORD PTR [rsp],rdx
    d059:	mov    QWORD PTR [rsp+0x8],rbp
    d05e:	mov    rbp,rsp
    d061:	jmp    d074 <g_str_equal@plt+0x4cbc>
    d063:	nop    DWORD PTR [rax+rax*1+0x0]
    d068:	call   7fd0 <__errno_location@plt>
    d06d:	mov    edi,DWORD PTR [rax]
    d06f:	cmp    edi,0x4
    d072:	jne    d0a8 <g_str_equal@plt+0x4cf0>
    d074:	mov    rsi,rbp
    d077:	mov    rdi,rbx
    d07a:	call   7dd0 <sem_timedwait@plt>
    d07f:	cmp    eax,0xffffffff
    d082:	je     d068 <g_str_equal@plt+0x4cb0>
    d084:	jmp    cfcd <g_str_equal@plt+0x4c15>
    d089:	nop    DWORD PTR [rax+0x0]
    d090:	cmp    edi,0xb
    d093:	je     d0ad <g_str_equal@plt+0x4cf5>
    d095:	lea    rsi,[rip+0x1d1c4]        # 2a260 <_fini@@Base+0xfdc>
    d09c:	call   83f2 <g_str_equal@plt+0x3a>
    d0a1:	nop    DWORD PTR [rax+0x0]
    d0a8:	cmp    edi,0x6e
    d0ab:	jne    d095 <g_str_equal@plt+0x4cdd>
    d0ad:	mov    eax,0xffffffff
    d0b2:	jmp    cfd7 <g_str_equal@plt+0x4c1f>
    d0b7:	nop    WORD PTR [rax+rax*1+0x0]
    d0c0:	mov    QWORD PTR [rsp],rdx
    d0c4:	jmp    d05e <g_str_equal@plt+0x4ca6>
    d0c6:	lea    rcx,[rip+0x1d1b3]        # 2a280 <_fini@@Base+0xffc>
    d0cd:	lea    rsi,[rip+0x1cfcc]        # 2a0a0 <_fini@@Base+0xe1c>
    d0d4:	lea    rdi,[rip+0x1cf9e]        # 2a079 <_fini@@Base+0xdf5>
    d0db:	mov    edx,0x102
    d0e0:	call   7a70 <__assert_fail@plt>
    d0e5:	call   8050 <__stack_chk_fail@plt>
    d0ea:	call   7fd0 <__errno_location@plt>
    d0ef:	mov    edi,DWORD PTR [rax]
    d0f1:	jmp    d095 <g_str_equal@plt+0x4cdd>
    d0f3:	nop    DWORD PTR [rax]
    d0f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    d100:	push   rbx
    d101:	cmp    BYTE PTR [rdi+0x20],0x0
    d105:	je     d12f <g_str_equal@plt+0x4d77>
    d107:	mov    rbx,rdi
    d10a:	jmp    d11c <g_str_equal@plt+0x4d64>
    d10c:	nop    DWORD PTR [rax+0x0]
    d110:	call   7fd0 <__errno_location@plt>
    d115:	mov    edi,DWORD PTR [rax]
    d117:	cmp    edi,0x4
    d11a:	jne    d155 <g_str_equal@plt+0x4d9d>
    d11c:	mov    rdi,rbx
    d11f:	call   78c0 <sem_wait@plt>
    d124:	cmp    eax,0xffffffff
    d127:	je     d110 <g_str_equal@plt+0x4d58>
    d129:	test   eax,eax
    d12b:	js     d14e <g_str_equal@plt+0x4d96>
    d12d:	pop    rbx
    d12e:	ret    
    d12f:	lea    rcx,[rip+0x1d112]        # 2a248 <_fini@@Base+0xfc4>
    d136:	lea    rsi,[rip+0x1cf63]        # 2a0a0 <_fini@@Base+0xe1c>
    d13d:	lea    rdi,[rip+0x1cf35]        # 2a079 <_fini@@Base+0xdf5>
    d144:	mov    edx,0x132
    d149:	call   7a70 <__assert_fail@plt>
    d14e:	call   7fd0 <__errno_location@plt>
    d153:	mov    edi,DWORD PTR [rax]
    d155:	lea    rsi,[rip+0x1d0dc]        # 2a238 <_fini@@Base+0xfb4>
    d15c:	call   83f2 <g_str_equal@plt+0x3a>
    d161:	nop    DWORD PTR [rax+rax*1+0x0]
    d166:	nop    WORD PTR cs:[rax+rax*1+0x0]
    d170:	xor    esi,0x1
    d173:	mov    BYTE PTR [rdi+0x4],0x1
    d177:	movzx  esi,sil
    d17b:	mov    DWORD PTR [rdi],esi
    d17d:	ret    
    d17e:	xchg   ax,ax
    d180:	cmp    BYTE PTR [rdi+0x4],0x0
    d184:	je     d18b <g_str_equal@plt+0x4dd3>
    d186:	mov    BYTE PTR [rdi+0x4],0x0
    d18a:	ret    
    d18b:	lea    rcx,[rip+0x1d08e]        # 2a220 <_fini@@Base+0xf9c>
    d192:	lea    rsi,[rip+0x1cf07]        # 2a0a0 <_fini@@Base+0xe1c>
    d199:	lea    rdi,[rip+0x1ceea]        # 2a08a <_fini@@Base+0xe06>
    d1a0:	sub    rsp,0x8
    d1a4:	mov    edx,0x180
    d1a9:	call   7a70 <__assert_fail@plt>
    d1ae:	xchg   ax,ax
    d1b0:	sub    rsp,0x8
    d1b4:	cmp    BYTE PTR [rdi+0x4],0x0
    d1b8:	je     d202 <g_str_equal@plt+0x4e4a>
    d1ba:	mfence 
    d1bd:	mov    eax,DWORD PTR [rdi]
    d1bf:	test   eax,eax
    d1c1:	jne    d1d0 <g_str_equal@plt+0x4e18>
    d1c3:	add    rsp,0x8
    d1c7:	ret    
    d1c8:	nop    DWORD PTR [rax+rax*1+0x0]
    d1d0:	xor    eax,eax
    d1d2:	xchg   DWORD PTR [rdi],eax
    d1d4:	cmp    eax,0xffffffff
    d1d7:	jne    d1c3 <g_str_equal@plt+0x4e0b>
    d1d9:	sub    rsp,0x8
    d1dd:	mov    edx,0x1
    d1e2:	mov    rsi,rdi
    d1e5:	push   0x0
    d1e7:	xor    r9d,r9d
    d1ea:	xor    r8d,r8d
    d1ed:	mov    ecx,0x7fffffff
    d1f2:	mov    edi,0xca
    d1f7:	xor    eax,eax
    d1f9:	call   7df0 <syscall@plt>
    d1fe:	pop    rax
    d1ff:	pop    rdx
    d200:	jmp    d1c3 <g_str_equal@plt+0x4e0b>
    d202:	lea    rcx,[rip+0x1cfff]        # 2a208 <_fini@@Base+0xf84>
    d209:	lea    rsi,[rip+0x1ce90]        # 2a0a0 <_fini@@Base+0xe1c>
    d210:	lea    rdi,[rip+0x1ce73]        # 2a08a <_fini@@Base+0xe06>
    d217:	mov    edx,0x18d
    d21c:	call   7a70 <__assert_fail@plt>
    d221:	nop    DWORD PTR [rax+rax*1+0x0]
    d226:	nop    WORD PTR cs:[rax+rax*1+0x0]
    d230:	cmp    BYTE PTR [rdi+0x4],0x0
    d234:	je     d245 <g_str_equal@plt+0x4e8d>
    d236:	mov    eax,DWORD PTR [rdi]
    d238:	test   eax,eax
    d23a:	je     d240 <g_str_equal@plt+0x4e88>
    d23c:	repz ret 
    d23e:	xchg   ax,ax
    d240:	lock or DWORD PTR [rdi],0x1
    d244:	ret    
    d245:	lea    rcx,[rip+0x1cfa4]        # 2a1f0 <_fini@@Base+0xf6c>
    d24c:	lea    rsi,[rip+0x1ce4d]        # 2a0a0 <_fini@@Base+0xe1c>
    d253:	lea    rdi,[rip+0x1ce30]        # 2a08a <_fini@@Base+0xe06>
    d25a:	sub    rsp,0x8
    d25e:	mov    edx,0x19b
    d263:	call   7a70 <__assert_fail@plt>
    d268:	nop    DWORD PTR [rax+rax*1+0x0]
    d270:	push   rbp
    d271:	push   rbx
    d272:	sub    rsp,0x8
    d276:	cmp    BYTE PTR [rdi+0x4],0x0
    d27a:	je     d2df <g_str_equal@plt+0x4f27>
    d27c:	mov    rbx,rdi
    d27f:	mov    eax,DWORD PTR [rdi]
    d281:	test   eax,eax
    d283:	je     d2d3 <g_str_equal@plt+0x4f1b>
    d285:	cmp    eax,0x1
    d288:	jne    d297 <g_str_equal@plt+0x4edf>
    d28a:	mov    edx,0xffffffff
    d28f:	lock cmpxchg DWORD PTR [rdi],edx
    d293:	test   eax,eax
    d295:	je     d2d3 <g_str_equal@plt+0x4f1b>
    d297:	mov    ebp,0xffffffff
    d29c:	sub    rsp,0x8
    d2a0:	xor    edx,edx
    d2a2:	xor    r9d,r9d
    d2a5:	push   0x0
    d2a7:	xor    r8d,r8d
    d2aa:	mov    ecx,ebp
    d2ac:	xor    eax,eax
    d2ae:	mov    rsi,rbx
    d2b1:	mov    edi,0xca
    d2b6:	call   7df0 <syscall@plt>
    d2bb:	test   rax,rax
    d2be:	pop    rdx
    d2bf:	pop    rcx
    d2c0:	je     d2d3 <g_str_equal@plt+0x4f1b>
    d2c2:	call   7fd0 <__errno_location@plt>
    d2c7:	mov    eax,DWORD PTR [rax]
    d2c9:	cmp    eax,0x4
    d2cc:	je     d29c <g_str_equal@plt+0x4ee4>
    d2ce:	cmp    eax,0xb
    d2d1:	jne    d2da <g_str_equal@plt+0x4f22>
    d2d3:	add    rsp,0x8
    d2d7:	pop    rbx
    d2d8:	pop    rbp
    d2d9:	ret    
    d2da:	call   79c0 <abort@plt>
    d2df:	lea    rcx,[rip+0x1cefa]        # 2a1e0 <_fini@@Base+0xf5c>
    d2e6:	lea    rsi,[rip+0x1cdb3]        # 2a0a0 <_fini@@Base+0xe1c>
    d2ed:	lea    rdi,[rip+0x1cd96]        # 2a08a <_fini@@Base+0xe06>
    d2f4:	mov    edx,0x1ab
    d2f9:	call   7a70 <__assert_fail@plt>
    d2fe:	xchg   ax,ax
    d300:	push   rbx
    d301:	mov    rbx,rdi
    d304:	sub    rsp,0x10
    d308:	mov    edi,DWORD PTR [rip+0x2339e2]        # 240cf0 <stdout@@GLIBC_2.2.5+0x1048>
    d30e:	mov    rax,QWORD PTR fs:0x28
    d317:	mov    QWORD PTR [rsp+0x8],rax
    d31c:	xor    eax,eax
    d31e:	call   78e0 <pthread_getspecific@plt>
    d323:	mov    rdi,rsp
    d326:	mov    rsi,rbx
    d329:	mov    QWORD PTR [rsp],rax
    d32d:	call   e770 <g_str_equal@plt+0x63b8>
    d332:	mov    rsi,QWORD PTR [rsp]
    d336:	mov    edi,DWORD PTR [rip+0x2339b4]        # 240cf0 <stdout@@GLIBC_2.2.5+0x1048>
    d33c:	call   79d0 <pthread_setspecific@plt>
    d341:	mov    rax,QWORD PTR [rsp+0x8]
    d346:	xor    rax,QWORD PTR fs:0x28
    d34f:	jne    d357 <g_str_equal@plt+0x4f9f>
    d351:	add    rsp,0x10
    d355:	pop    rbx
    d356:	ret    
    d357:	call   8050 <__stack_chk_fail@plt>
    d35c:	nop    DWORD PTR [rax+0x0]
    d360:	push   rbp
    d361:	push   rbx
    d362:	mov    rbp,rdi
    d365:	sub    rsp,0x8
    d369:	mov    edi,DWORD PTR [rip+0x233981]        # 240cf0 <stdout@@GLIBC_2.2.5+0x1048>
    d36f:	call   78e0 <pthread_getspecific@plt>
    d374:	mov    rdi,rbp
    d377:	mov    rbx,rax
    d37a:	call   e790 <g_str_equal@plt+0x63d8>
    d37f:	mov    edi,DWORD PTR [rip+0x23396b]        # 240cf0 <stdout@@GLIBC_2.2.5+0x1048>
    d385:	add    rsp,0x8
    d389:	mov    rsi,rbx
    d38c:	pop    rbx
    d38d:	pop    rbp
    d38e:	jmp    79d0 <pthread_setspecific@plt>
    d393:	nop    DWORD PTR [rax]
    d396:	nop    WORD PTR cs:[rax+rax*1+0x0]
    d3a0:	push   r15
    d3a2:	push   r14
    d3a4:	mov    r15,rsi
    d3a7:	push   r13
    d3a9:	push   r12
    d3ab:	mov    r14,rdx
    d3ae:	push   rbp
    d3af:	push   rbx
    d3b0:	mov    r13,rcx
    d3b3:	mov    ebx,r8d
    d3b6:	sub    rsp,0x168
    d3bd:	lea    rbp,[rsp+0x10]
    d3c2:	mov    QWORD PTR [rsp+0x8],rdi
    d3c7:	mov    rax,QWORD PTR fs:0x28
    d3d0:	mov    QWORD PTR [rsp+0x158],rax
    d3d8:	xor    eax,eax
    d3da:	mov    rdi,rbp
    d3dd:	call   8140 <pthread_attr_init@plt>
    d3e2:	test   eax,eax
    d3e4:	jne    d4a2 <g_str_equal@plt+0x50ea>
    d3ea:	cmp    ebx,0x1
    d3ed:	je     d490 <g_str_equal@plt+0x50d8>
    d3f3:	lea    rbx,[rsp+0x50]
    d3f8:	lea    r12,[rsp+0xd0]
    d400:	mov    rdi,rbx
    d403:	call   7b00 <sigfillset@plt>
    d408:	mov    rsi,rbx
    d40b:	mov    rdx,r12
    d40e:	mov    edi,0x2
    d413:	call   8200 <pthread_sigmask@plt>
    d418:	mov    edi,0x18
    d41d:	call   80c0 <g_malloc0@plt>
    d422:	mov    rdi,r15
    d425:	mov    rbx,rax
    d428:	call   7a50 <g_strdup@plt>
    d42d:	mov    rdi,QWORD PTR [rsp+0x8]
    d432:	lea    rdx,[rip+0xfffffffffffff2c7]        # c700 <g_str_equal@plt+0x4348>
    d439:	mov    QWORD PTR [rbx+0x10],rax
    d43d:	mov    QWORD PTR [rbx],r14
    d440:	mov    QWORD PTR [rbx+0x8],r13
    d444:	mov    rcx,rbx
    d447:	mov    rsi,rbp
    d44a:	call   7d00 <pthread_create@plt>
    d44f:	test   eax,eax
    d451:	jne    d4a2 <g_str_equal@plt+0x50ea>
    d453:	xor    edx,edx
    d455:	mov    rsi,r12
    d458:	mov    edi,0x2
    d45d:	call   8200 <pthread_sigmask@plt>
    d462:	mov    rdi,rbp
    d465:	call   7c50 <pthread_attr_destroy@plt>
    d46a:	mov    rax,QWORD PTR [rsp+0x158]
    d472:	xor    rax,QWORD PTR fs:0x28
    d47b:	jne    d4b0 <g_str_equal@plt+0x50f8>
    d47d:	add    rsp,0x168
    d484:	pop    rbx
    d485:	pop    rbp
    d486:	pop    r12
    d488:	pop    r13
    d48a:	pop    r14
    d48c:	pop    r15
    d48e:	ret    
    d48f:	nop
    d490:	mov    esi,0x1
    d495:	mov    rdi,rbp
    d498:	call   83a0 <pthread_attr_setdetachstate@plt>
    d49d:	jmp    d3f3 <g_str_equal@plt+0x503b>
    d4a2:	lea    rsi,[rip+0x1cd17]        # 2a1c0 <_fini@@Base+0xf3c>
    d4a9:	mov    edi,eax
    d4ab:	call   83f2 <g_str_equal@plt+0x3a>
    d4b0:	call   8050 <__stack_chk_fail@plt>
    d4b5:	nop
    d4b6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    d4c0:	push   rbx
    d4c1:	mov    rbx,rdi
    d4c4:	call   7e40 <pthread_self@plt>
    d4c9:	mov    QWORD PTR [rbx],rax
    d4cc:	pop    rbx
    d4cd:	ret    
    d4ce:	xchg   ax,ax
    d4d0:	push   rbx
    d4d1:	mov    rbx,rdi
    d4d4:	call   7e40 <pthread_self@plt>
    d4d9:	cmp    QWORD PTR [rbx],rax
    d4dc:	pop    rbx
    d4dd:	sete   al
    d4e0:	ret    
    d4e1:	nop    DWORD PTR [rax+rax*1+0x0]
    d4e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    d4f0:	sub    rsp,0x8
    d4f4:	call   7ee0 <pthread_exit@plt>
    d4f9:	nop    DWORD PTR [rax+0x0]
    d500:	sub    rsp,0x18
    d504:	mov    rdi,QWORD PTR [rdi]
    d507:	mov    rsi,rsp
    d50a:	mov    rax,QWORD PTR fs:0x28
    d513:	mov    QWORD PTR [rsp+0x8],rax
    d518:	xor    eax,eax
    d51a:	call   7e70 <pthread_join@plt>
    d51f:	test   eax,eax
    d521:	jne    d53c <g_str_equal@plt+0x5184>
    d523:	mov    rdx,QWORD PTR [rsp+0x8]
    d528:	xor    rdx,QWORD PTR fs:0x28
    d531:	mov    rax,QWORD PTR [rsp]
    d535:	jne    d54a <g_str_equal@plt+0x5192>
    d537:	add    rsp,0x18
    d53b:	ret    
    d53c:	lea    rsi,[rip+0x1cc5d]        # 2a1a0 <_fini@@Base+0xf1c>
    d543:	mov    edi,eax
    d545:	call   83f2 <g_str_equal@plt+0x3a>
    d54a:	call   8050 <__stack_chk_fail@plt>
    d54f:	nop
    d550:	push   r13
    d552:	push   r12
    d554:	mov    r13,rdx
    d557:	push   rbp
    d558:	push   rbx
    d559:	mov    rbp,rdi
    d55c:	mov    r12,rsi
    d55f:	xor    edi,edi
    d561:	sub    rsp,0x8
    d565:	call   7b80 <g_string_new@plt>
    d56a:	mov    rdx,r13
    d56d:	mov    rsi,r12
    d570:	mov    rdi,rax
    d573:	mov    rbx,rax
    d576:	call   7ef0 <g_string_vprintf@plt>
    d57b:	mov    rax,QWORD PTR [rbp+0x0]
    d57f:	mov    rdi,rbx
    d582:	mov    rsi,QWORD PTR [rax]
    d585:	call   8310 <g_string_append@plt>
    d58a:	mov    rax,QWORD PTR [rbp+0x0]
    d58e:	mov    rdi,QWORD PTR [rax]
    d591:	call   7880 <g_free@plt>
    d596:	mov    rbp,QWORD PTR [rbp+0x0]
    d59a:	mov    rdi,rbx
    d59d:	xor    esi,esi
    d59f:	call   7d20 <g_string_free@plt>
    d5a4:	mov    QWORD PTR [rbp+0x0],rax
    d5a8:	add    rsp,0x8
    d5ac:	pop    rbx
    d5ad:	pop    rbp
    d5ae:	pop    r12
    d5b0:	pop    r13
    d5b2:	ret    
    d5b3:	nop    DWORD PTR [rax]
    d5b6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    d5c0:	push   rbx
    d5c1:	mov    rbx,rdi
    d5c4:	mov    rdi,QWORD PTR [rdi]
    d5c7:	call   7880 <g_free@plt>
    d5cc:	mov    rdi,QWORD PTR [rbx+0x28]
    d5d0:	test   rdi,rdi
    d5d3:	je     d5df <g_str_equal@plt+0x5227>
    d5d5:	mov    esi,0x1
    d5da:	call   7d20 <g_string_free@plt>
    d5df:	mov    rdi,rbx
    d5e2:	pop    rbx
    d5e3:	jmp    7880 <g_free@plt>
    d5e8:	nop    DWORD PTR [rax+rax*1+0x0]
    d5f0:	test   rdi,rdi
    d5f3:	je     d600 <g_str_equal@plt+0x5248>
    d5f5:	jmp    d550 <g_str_equal@plt+0x5198>
    d5fa:	nop    WORD PTR [rax+rax*1+0x0]
    d600:	repz ret 
    d602:	nop    DWORD PTR [rax+0x0]
    d606:	nop    WORD PTR cs:[rax+rax*1+0x0]
    d610:	sub    rsp,0xd8
    d617:	test   al,al
    d619:	mov    QWORD PTR [rsp+0x30],rdx
    d61e:	mov    QWORD PTR [rsp+0x38],rcx
    d623:	mov    QWORD PTR [rsp+0x40],r8
    d628:	mov    QWORD PTR [rsp+0x48],r9
    d62d:	je     d666 <g_str_equal@plt+0x52ae>
    d62f:	movaps XMMWORD PTR [rsp+0x50],xmm0
    d634:	movaps XMMWORD PTR [rsp+0x60],xmm1
    d639:	movaps XMMWORD PTR [rsp+0x70],xmm2
    d63e:	movaps XMMWORD PTR [rsp+0x80],xmm3
    d646:	movaps XMMWORD PTR [rsp+0x90],xmm4
    d64e:	movaps XMMWORD PTR [rsp+0xa0],xmm5
    d656:	movaps XMMWORD PTR [rsp+0xb0],xmm6
    d65e:	movaps XMMWORD PTR [rsp+0xc0],xmm7
    d666:	mov    rax,QWORD PTR fs:0x28
    d66f:	mov    QWORD PTR [rsp+0x18],rax
    d674:	xor    eax,eax
    d676:	lea    rax,[rsp+0xe0]
    d67e:	test   rdi,rdi
    d681:	mov    QWORD PTR [rsp+0x8],rax
    d686:	lea    rax,[rsp+0x20]
    d68b:	mov    DWORD PTR [rsp],0x10
    d692:	mov    DWORD PTR [rsp+0x4],0x30
    d69a:	mov    QWORD PTR [rsp+0x10],rax
    d69f:	je     d6a9 <g_str_equal@plt+0x52f1>
    d6a1:	mov    rdx,rsp
    d6a4:	call   d550 <g_str_equal@plt+0x5198>
    d6a9:	mov    rax,QWORD PTR [rsp+0x18]
    d6ae:	xor    rax,QWORD PTR fs:0x28
    d6b7:	jne    d6c1 <g_str_equal@plt+0x5309>
    d6b9:	add    rsp,0xd8
    d6c0:	ret    
    d6c1:	call   8050 <__stack_chk_fail@plt>
    d6c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    d6d0:	push   r13
    d6d2:	push   r12
    d6d4:	mov    r13,rsi
    d6d7:	push   rbp
    d6d8:	push   rbx
    d6d9:	mov    rbx,rdi
    d6dc:	sub    rsp,0xd8
    d6e3:	test   al,al
    d6e5:	mov    QWORD PTR [rsp+0x30],rdx
    d6ea:	mov    QWORD PTR [rsp+0x38],rcx
    d6ef:	mov    QWORD PTR [rsp+0x40],r8
    d6f4:	mov    QWORD PTR [rsp+0x48],r9
    d6f9:	je     d732 <g_str_equal@plt+0x537a>
    d6fb:	movaps XMMWORD PTR [rsp+0x50],xmm0
    d700:	movaps XMMWORD PTR [rsp+0x60],xmm1
    d705:	movaps XMMWORD PTR [rsp+0x70],xmm2
    d70a:	movaps XMMWORD PTR [rsp+0x80],xmm3
    d712:	movaps XMMWORD PTR [rsp+0x90],xmm4
    d71a:	movaps XMMWORD PTR [rsp+0xa0],xmm5
    d722:	movaps XMMWORD PTR [rsp+0xb0],xmm6
    d72a:	movaps XMMWORD PTR [rsp+0xc0],xmm7
    d732:	mov    rax,QWORD PTR fs:0x28
    d73b:	mov    QWORD PTR [rsp+0x18],rax
    d740:	xor    eax,eax
    d742:	call   7fd0 <__errno_location@plt>
    d747:	test   rbx,rbx
    d74a:	mov    r12,rax
    d74d:	je     d7b9 <g_str_equal@plt+0x5401>
    d74f:	lea    rax,[rip+0x2335a2]        # 240cf8 <stdout@@GLIBC_2.2.5+0x1050>
    d756:	mov    rbp,QWORD PTR [rbx]
    d759:	cmp    rbx,rax
    d75c:	lea    rax,[rip+0x23359d]        # 240d00 <stdout@@GLIBC_2.2.5+0x1058>
    d763:	setne  dl
    d766:	cmp    rbx,rax
    d769:	setne  al
    d76c:	test   dl,al
    d76e:	je     d7ed <g_str_equal@plt+0x5435>
    d770:	test   rbp,rbp
    d773:	je     d7ed <g_str_equal@plt+0x5435>
    d775:	cmp    QWORD PTR [rbp+0x28],0x0
    d77a:	mov    ebx,DWORD PTR [r12]
    d77e:	je     d7e0 <g_str_equal@plt+0x5428>
    d780:	lea    rax,[rsp+0x100]
    d788:	mov    rdi,QWORD PTR [rbp+0x28]
    d78c:	mov    rdx,rsp
    d78f:	mov    rsi,r13
    d792:	mov    DWORD PTR [rsp],0x10
    d799:	mov    DWORD PTR [rsp+0x4],0x30
    d7a1:	mov    QWORD PTR [rsp+0x8],rax
    d7a6:	lea    rax,[rsp+0x20]
    d7ab:	mov    QWORD PTR [rsp+0x10],rax
    d7b0:	call   7fe0 <g_string_append_vprintf@plt>
    d7b5:	mov    DWORD PTR [r12],ebx
    d7b9:	mov    rax,QWORD PTR [rsp+0x18]
    d7be:	xor    rax,QWORD PTR fs:0x28
    d7c7:	jne    d80c <g_str_equal@plt+0x5454>
    d7c9:	add    rsp,0xd8
    d7d0:	pop    rbx
    d7d1:	pop    rbp
    d7d2:	pop    r12
    d7d4:	pop    r13
    d7d6:	ret    
    d7d7:	nop    WORD PTR [rax+rax*1+0x0]
    d7e0:	xor    edi,edi
    d7e2:	call   7b80 <g_string_new@plt>
    d7e7:	mov    QWORD PTR [rbp+0x28],rax
    d7eb:	jmp    d780 <g_str_equal@plt+0x53c8>
    d7ed:	lea    rcx,[rip+0x1ce4c]        # 2a640 <_fini@@Base+0x13bc>
    d7f4:	lea    rsi,[rip+0x1cd55]        # 2a550 <_fini@@Base+0x12cc>
    d7fb:	lea    rdi,[rip+0x1cd86]        # 2a588 <_fini@@Base+0x1304>
    d802:	mov    edx,0xa0
    d807:	call   7a70 <__assert_fail@plt>
    d80c:	call   8050 <__stack_chk_fail@plt>
    d811:	nop    DWORD PTR [rax+rax*1+0x0]
    d816:	nop    WORD PTR cs:[rax+rax*1+0x0]
    d820:	push   rbp
    d821:	push   rbx
    d822:	mov    rbp,rdi
    d825:	mov    edi,0x30
    d82a:	sub    rsp,0x8
    d82e:	call   80c0 <g_malloc0@plt>
    d833:	mov    rdi,QWORD PTR [rbp+0x0]
    d837:	mov    rbx,rax
    d83a:	call   7a50 <g_strdup@plt>
    d83f:	mov    QWORD PTR [rbx],rax
    d842:	mov    eax,DWORD PTR [rbp+0x8]
    d845:	mov    DWORD PTR [rbx+0x8],eax
    d848:	mov    rax,QWORD PTR [rbp+0x10]
    d84c:	mov    QWORD PTR [rbx+0x10],rax
    d850:	mov    eax,DWORD PTR [rbp+0x20]
    d853:	mov    DWORD PTR [rbx+0x20],eax
    d856:	mov    rax,QWORD PTR [rbp+0x18]
    d85a:	mov    QWORD PTR [rbx+0x18],rax
    d85e:	mov    rax,QWORD PTR [rbp+0x28]
    d862:	test   rax,rax
    d865:	je     d873 <g_str_equal@plt+0x54bb>
    d867:	mov    rdi,QWORD PTR [rax]
    d86a:	call   7b80 <g_string_new@plt>
    d86f:	mov    QWORD PTR [rbx+0x28],rax
    d873:	add    rsp,0x8
    d877:	mov    rax,rbx
    d87a:	pop    rbx
    d87b:	pop    rbp
    d87c:	ret    
    d87d:	nop    DWORD PTR [rax]
    d880:	mov    eax,DWORD PTR [rdi+0x8]
    d883:	ret    
    d884:	xchg   ax,ax
    d886:	nop    WORD PTR cs:[rax+rax*1+0x0]
    d890:	mov    rax,QWORD PTR [rdi]
    d893:	ret    
    d894:	xchg   ax,ax
    d896:	nop    WORD PTR cs:[rax+rax*1+0x0]
    d8a0:	push   rbx
    d8a1:	mov    rsi,QWORD PTR [rdi]
    d8a4:	mov    rbx,rdi
    d8a7:	lea    rdi,[rip+0x210ac]        # 2e95a <_fini@@Base+0x56d6>
    d8ae:	xor    eax,eax
    d8b0:	call   e520 <g_str_equal@plt+0x6168>
    d8b5:	mov    rax,QWORD PTR [rbx+0x28]
    d8b9:	test   rax,rax
    d8bc:	je     d8cf <g_str_equal@plt+0x5517>
    d8be:	mov    rsi,QWORD PTR [rax]
    d8c1:	lea    rdi,[rip+0x21092]        # 2e95a <_fini@@Base+0x56d6>
    d8c8:	xor    eax,eax
    d8ca:	call   e250 <g_str_equal@plt+0x5e98>
    d8cf:	mov    rdi,rbx
    d8d2:	pop    rbx
    d8d3:	jmp    d5c0 <g_str_equal@plt+0x5208>
    d8d8:	nop    DWORD PTR [rax+rax*1+0x0]
    d8e0:	lea    rax,[rip+0x233419]        # 240d00 <stdout@@GLIBC_2.2.5+0x1058>
    d8e7:	push   rbx
    d8e8:	mov    rbx,rsi
    d8eb:	cmp    rdi,rax
    d8ee:	je     d8fe <g_str_equal@plt+0x5546>
    d8f0:	lea    rax,[rip+0x233401]        # 240cf8 <stdout@@GLIBC_2.2.5+0x1050>
    d8f7:	cmp    rdi,rax
    d8fa:	je     d931 <g_str_equal@plt+0x5579>
    d8fc:	pop    rbx
    d8fd:	ret    
    d8fe:	mov    rcx,QWORD PTR [rsi+0x18]
    d902:	mov    r9d,DWORD PTR [rsi+0x20]
    d906:	lea    rdx,[rip+0x1ccb3]        # 2a5c0 <_fini@@Base+0x133c>
    d90d:	mov    r8,QWORD PTR [rsi+0x10]
    d911:	mov    rdi,QWORD PTR [rip+0x232388]        # 23fca0 <stderr@@GLIBC_2.2.5>
    d918:	mov    esi,0x1
    d91d:	xor    eax,eax
    d91f:	call   79e0 <__fprintf_chk@plt>
    d924:	mov    rdi,rbx
    d927:	call   d8a0 <g_str_equal@plt+0x54e8>
    d92c:	call   79c0 <abort@plt>
    d931:	mov    rdi,rsi
    d934:	call   d8a0 <g_str_equal@plt+0x54e8>
    d939:	mov    edi,0x1
    d93e:	call   7a40 <exit@plt>
    d943:	nop    DWORD PTR [rax]
    d946:	nop    WORD PTR cs:[rax+rax*1+0x0]
    d950:	push   r15
    d952:	push   r14
    d954:	mov    r15d,r8d
    d957:	push   r13
    d959:	push   r12
    d95b:	mov    r14,rsi
    d95e:	push   rbp
    d95f:	push   rbx
    d960:	mov    rbx,rdi
    d963:	mov    r13d,edx
    d966:	sub    rsp,0x28
    d96a:	mov    QWORD PTR [rsp+0x8],rcx
    d96f:	mov    QWORD PTR [rsp+0x10],r9
    d974:	call   7fd0 <__errno_location@plt>
    d979:	test   rbx,rbx
    d97c:	je     da17 <g_str_equal@plt+0x565f>
    d982:	cmp    QWORD PTR [rbx],0x0
    d986:	jne    da26 <g_str_equal@plt+0x566e>
    d98c:	mov    rbp,rax
    d98f:	mov    eax,DWORD PTR [rax]
    d991:	mov    edi,0x30
    d996:	mov    DWORD PTR [rsp+0x1c],eax
    d99a:	call   80c0 <g_malloc0@plt>
    d99f:	mov    rsi,QWORD PTR [rsp+0x60]
    d9a4:	mov    rdi,QWORD PTR [rsp+0x10]
    d9a9:	mov    r12,rax
    d9ac:	call   7e50 <g_strdup_vprintf@plt>
    d9b1:	cmp    QWORD PTR [rsp+0x68],0x0
    d9b7:	mov    QWORD PTR [r12],rax
    d9bb:	je     d9e9 <g_str_equal@plt+0x5631>
    d9bd:	mov    rdx,QWORD PTR [rsp+0x68]
    d9c2:	lea    rdi,[rip+0x1cc29]        # 2a5f2 <_fini@@Base+0x136e>
    d9c9:	mov    rsi,rax
    d9cc:	mov    QWORD PTR [rsp+0x10],rax
    d9d1:	xor    eax,eax
    d9d3:	call   7ce0 <g_strdup_printf@plt>
    d9d8:	mov    r8,QWORD PTR [rsp+0x10]
    d9dd:	mov    QWORD PTR [r12],rax
    d9e1:	mov    rdi,r8
    d9e4:	call   7880 <g_free@plt>
    d9e9:	mov    rax,QWORD PTR [rsp+0x8]
    d9ee:	mov    rsi,r12
    d9f1:	mov    rdi,rbx
    d9f4:	mov    DWORD PTR [r12+0x8],r15d
    d9f9:	mov    QWORD PTR [r12+0x10],r14
    d9fe:	mov    DWORD PTR [r12+0x20],r13d
    da03:	mov    QWORD PTR [r12+0x18],rax
    da08:	call   d8e0 <g_str_equal@plt+0x5528>
    da0d:	mov    eax,DWORD PTR [rsp+0x1c]
    da11:	mov    QWORD PTR [rbx],r12
    da14:	mov    DWORD PTR [rbp+0x0],eax
    da17:	add    rsp,0x28
    da1b:	pop    rbx
    da1c:	pop    rbp
    da1d:	pop    r12
    da1f:	pop    r13
    da21:	pop    r14
    da23:	pop    r15
    da25:	ret    
    da26:	lea    rcx,[rip+0x1cc2b]        # 2a658 <_fini@@Base+0x13d4>
    da2d:	lea    rsi,[rip+0x1cb1c]        # 2a550 <_fini@@Base+0x12cc>
    da34:	lea    rdi,[rip+0x1cba9]        # 2a5e4 <_fini@@Base+0x1360>
    da3b:	mov    edx,0x39
    da40:	call   7a70 <__assert_fail@plt>
    da45:	nop
    da46:	nop    WORD PTR cs:[rax+rax*1+0x0]
    da50:	sub    rsp,0xd8
    da57:	test   al,al
    da59:	je     da92 <g_str_equal@plt+0x56da>
    da5b:	movaps XMMWORD PTR [rsp+0x50],xmm0
    da60:	movaps XMMWORD PTR [rsp+0x60],xmm1
    da65:	movaps XMMWORD PTR [rsp+0x70],xmm2
    da6a:	movaps XMMWORD PTR [rsp+0x80],xmm3
    da72:	movaps XMMWORD PTR [rsp+0x90],xmm4
    da7a:	movaps XMMWORD PTR [rsp+0xa0],xmm5
    da82:	movaps XMMWORD PTR [rsp+0xb0],xmm6
    da8a:	movaps XMMWORD PTR [rsp+0xc0],xmm7
    da92:	mov    rax,QWORD PTR fs:0x28
    da9b:	mov    QWORD PTR [rsp+0x18],rax
    daa0:	xor    eax,eax
    daa2:	lea    rax,[rsp+0xe0]
    daaa:	mov    QWORD PTR [rsp+0x8],rax
    daaf:	lea    rax,[rsp+0x20]
    dab4:	mov    DWORD PTR [rsp],0x30
    dabb:	mov    DWORD PTR [rsp+0x4],0x30
    dac3:	mov    QWORD PTR [rsp+0x10],rax
    dac8:	push   0x0
    daca:	lea    rax,[rsp+0x8]
    dacf:	push   rax
    dad0:	call   d950 <g_str_equal@plt+0x5598>
    dad5:	pop    rax
    dad6:	pop    rdx
    dad7:	mov    rax,QWORD PTR [rsp+0x18]
    dadc:	xor    rax,QWORD PTR fs:0x28
    dae5:	jne    daef <g_str_equal@plt+0x5737>
    dae7:	add    rsp,0xd8
    daee:	ret    
    daef:	call   8050 <__stack_chk_fail@plt>
    daf4:	xchg   ax,ax
    daf6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    db00:	sub    rsp,0xd8
    db07:	test   al,al
    db09:	mov    QWORD PTR [rsp+0x48],r9
    db0e:	je     db47 <g_str_equal@plt+0x578f>
    db10:	movaps XMMWORD PTR [rsp+0x50],xmm0
    db15:	movaps XMMWORD PTR [rsp+0x60],xmm1
    db1a:	movaps XMMWORD PTR [rsp+0x70],xmm2
    db1f:	movaps XMMWORD PTR [rsp+0x80],xmm3
    db27:	movaps XMMWORD PTR [rsp+0x90],xmm4
    db2f:	movaps XMMWORD PTR [rsp+0xa0],xmm5
    db37:	movaps XMMWORD PTR [rsp+0xb0],xmm6
    db3f:	movaps XMMWORD PTR [rsp+0xc0],xmm7
    db47:	mov    rax,QWORD PTR fs:0x28
    db50:	mov    QWORD PTR [rsp+0x18],rax
    db55:	xor    eax,eax
    db57:	lea    rax,[rsp+0xe0]
    db5f:	mov    r9,r8
    db62:	xor    r8d,r8d
    db65:	mov    QWORD PTR [rsp+0x8],rax
    db6a:	lea    rax,[rsp+0x20]
    db6f:	mov    DWORD PTR [rsp],0x28
    db76:	mov    DWORD PTR [rsp+0x4],0x30
    db7e:	mov    QWORD PTR [rsp+0x10],rax
    db83:	push   0x0
    db85:	lea    rax,[rsp+0x8]
    db8a:	push   rax
    db8b:	call   d950 <g_str_equal@plt+0x5598>
    db90:	pop    rax
    db91:	pop    rdx
    db92:	mov    rax,QWORD PTR [rsp+0x18]
    db97:	xor    rax,QWORD PTR fs:0x28
    dba0:	jne    dbaa <g_str_equal@plt+0x57f2>
    dba2:	add    rsp,0xd8
    dba9:	ret    
    dbaa:	call   8050 <__stack_chk_fail@plt>
    dbaf:	nop
    dbb0:	push   r15
    dbb2:	push   r14
    dbb4:	mov    r14,rcx
    dbb7:	push   r13
    dbb9:	push   r12
    dbbb:	mov    r13d,edx
    dbbe:	push   rbp
    dbbf:	push   rbx
    dbc0:	mov    r12,rsi
    dbc3:	mov    rbx,rdi
    dbc6:	mov    ebp,r8d
    dbc9:	sub    rsp,0xe8
    dbd0:	test   al,al
    dbd2:	je     dc0e <g_str_equal@plt+0x5856>
    dbd4:	movaps XMMWORD PTR [rsp+0x60],xmm0
    dbd9:	movaps XMMWORD PTR [rsp+0x70],xmm1
    dbde:	movaps XMMWORD PTR [rsp+0x80],xmm2
    dbe6:	movaps XMMWORD PTR [rsp+0x90],xmm3
    dbee:	movaps XMMWORD PTR [rsp+0xa0],xmm4
    dbf6:	movaps XMMWORD PTR [rsp+0xb0],xmm5
    dbfe:	movaps XMMWORD PTR [rsp+0xc0],xmm6
    dc06:	movaps XMMWORD PTR [rsp+0xd0],xmm7
    dc0e:	mov    rax,QWORD PTR fs:0x28
    dc17:	mov    QWORD PTR [rsp+0x28],rax
    dc1c:	xor    eax,eax
    dc1e:	mov    QWORD PTR [rsp],r9
    dc22:	call   7fd0 <__errno_location@plt>
    dc27:	test   rbx,rbx
    dc2a:	mov    r15,rax
    dc2d:	je     dc8a <g_str_equal@plt+0x58d2>
    dc2f:	mov    eax,DWORD PTR [rax]
    dc31:	mov    DWORD PTR [rsp+0x10],0x30
    dc39:	mov    DWORD PTR [rsp+0x14],0x30
    dc41:	mov    r9,QWORD PTR [rsp]
    dc45:	mov    DWORD PTR [rsp+0xc],eax
    dc49:	lea    rax,[rsp+0x120]
    dc51:	mov    QWORD PTR [rsp+0x18],rax
    dc56:	lea    rax,[rsp+0x30]
    dc5b:	mov    QWORD PTR [rsp+0x20],rax
    dc60:	xor    eax,eax
    dc62:	test   ebp,ebp
    dc64:	jne    dcb0 <g_str_equal@plt+0x58f8>
    dc66:	push   rax
    dc67:	mov    edx,r13d
    dc6a:	xor    r8d,r8d
    dc6d:	mov    rcx,r14
    dc70:	mov    rsi,r12
    dc73:	mov    rdi,rbx
    dc76:	lea    rax,[rsp+0x18]
    dc7b:	push   rax
    dc7c:	call   d950 <g_str_equal@plt+0x5598>
    dc81:	mov    eax,DWORD PTR [rsp+0x1c]
    dc85:	mov    DWORD PTR [r15],eax
    dc88:	pop    rax
    dc89:	pop    rdx
    dc8a:	mov    rax,QWORD PTR [rsp+0x28]
    dc8f:	xor    rax,QWORD PTR fs:0x28
    dc98:	jne    dcbd <g_str_equal@plt+0x5905>
    dc9a:	add    rsp,0xe8
    dca1:	pop    rbx
    dca2:	pop    rbp
    dca3:	pop    r12
    dca5:	pop    r13
    dca7:	pop    r14
    dca9:	pop    r15
    dcab:	ret    
    dcac:	nop    DWORD PTR [rax+0x0]
    dcb0:	mov    edi,ebp
    dcb2:	call   7e90 <strerror@plt>
    dcb7:	mov    r9,QWORD PTR [rsp]
    dcbb:	jmp    dc66 <g_str_equal@plt+0x58ae>
    dcbd:	call   8050 <__stack_chk_fail@plt>
    dcc2:	nop    DWORD PTR [rax+0x0]
    dcc6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    dcd0:	sub    rsp,0x10
    dcd4:	xor    eax,eax
    dcd6:	push   r9
    dcd8:	lea    r9,[rip+0x1c91a]        # 2a5f9 <_fini@@Base+0x1375>
    dcdf:	call   dbb0 <g_str_equal@plt+0x57f8>
    dce4:	add    rsp,0x18
    dce8:	ret    
    dce9:	nop    DWORD PTR [rax+0x0]
    dcf0:	push   rbx
    dcf1:	mov    rsi,QWORD PTR [rdi]
    dcf4:	mov    rbx,rdi
    dcf7:	lea    rdi,[rip+0x20c5c]        # 2e95a <_fini@@Base+0x56d6>
    dcfe:	xor    eax,eax
    dd00:	call   e5e0 <g_str_equal@plt+0x6228>
    dd05:	mov    rax,QWORD PTR [rbx+0x28]
    dd09:	test   rax,rax
    dd0c:	je     dd1f <g_str_equal@plt+0x5967>
    dd0e:	mov    rsi,QWORD PTR [rax]
    dd11:	lea    rdi,[rip+0x20c42]        # 2e95a <_fini@@Base+0x56d6>
    dd18:	xor    eax,eax
    dd1a:	call   e250 <g_str_equal@plt+0x5e98>
    dd1f:	mov    rdi,rbx
    dd22:	pop    rbx
    dd23:	jmp    d5c0 <g_str_equal@plt+0x5208>
    dd28:	nop    DWORD PTR [rax+rax*1+0x0]
    dd30:	sub    rsp,0xe8
    dd37:	test   al,al
    dd39:	mov    QWORD PTR [rsp+0x8],rdi
    dd3e:	mov    QWORD PTR [rsp+0x40],rdx
    dd43:	mov    QWORD PTR [rsp+0x48],rcx
    dd48:	mov    QWORD PTR [rsp+0x50],r8
    dd4d:	mov    QWORD PTR [rsp+0x58],r9
    dd52:	je     dd8e <g_str_equal@plt+0x59d6>
    dd54:	movaps XMMWORD PTR [rsp+0x60],xmm0
    dd59:	movaps XMMWORD PTR [rsp+0x70],xmm1
    dd5e:	movaps XMMWORD PTR [rsp+0x80],xmm2
    dd66:	movaps XMMWORD PTR [rsp+0x90],xmm3
    dd6e:	movaps XMMWORD PTR [rsp+0xa0],xmm4
    dd76:	movaps XMMWORD PTR [rsp+0xb0],xmm5
    dd7e:	movaps XMMWORD PTR [rsp+0xc0],xmm6
    dd86:	movaps XMMWORD PTR [rsp+0xd0],xmm7
    dd8e:	mov    rax,QWORD PTR fs:0x28
    dd97:	mov    QWORD PTR [rsp+0x28],rax
    dd9c:	xor    eax,eax
    dd9e:	lea    rax,[rsp+0xf0]
    dda6:	lea    rdx,[rsp+0x10]
    ddab:	lea    rdi,[rsp+0x8]
    ddb0:	mov    QWORD PTR [rsp+0x18],rax
    ddb5:	lea    rax,[rsp+0x30]
    ddba:	mov    DWORD PTR [rsp+0x10],0x10
    ddc2:	mov    DWORD PTR [rsp+0x14],0x30
    ddca:	mov    QWORD PTR [rsp+0x20],rax
    ddcf:	call   d550 <g_str_equal@plt+0x5198>
    ddd4:	mov    rdi,QWORD PTR [rsp+0x8]
    ddd9:	call   d8a0 <g_str_equal@plt+0x54e8>
    ddde:	mov    rax,QWORD PTR [rsp+0x28]
    dde3:	xor    rax,QWORD PTR fs:0x28
    ddec:	jne    ddf6 <g_str_equal@plt+0x5a3e>
    ddee:	add    rsp,0xe8
    ddf5:	ret    
    ddf6:	call   8050 <__stack_chk_fail@plt>
    ddfb:	nop    DWORD PTR [rax+rax*1+0x0]
    de00:	sub    rsp,0xe8
    de07:	test   al,al
    de09:	mov    QWORD PTR [rsp+0x8],rdi
    de0e:	mov    QWORD PTR [rsp+0x40],rdx
    de13:	mov    QWORD PTR [rsp+0x48],rcx
    de18:	mov    QWORD PTR [rsp+0x50],r8
    de1d:	mov    QWORD PTR [rsp+0x58],r9
    de22:	je     de5e <g_str_equal@plt+0x5aa6>
    de24:	movaps XMMWORD PTR [rsp+0x60],xmm0
    de29:	movaps XMMWORD PTR [rsp+0x70],xmm1
    de2e:	movaps XMMWORD PTR [rsp+0x80],xmm2
    de36:	movaps XMMWORD PTR [rsp+0x90],xmm3
    de3e:	movaps XMMWORD PTR [rsp+0xa0],xmm4
    de46:	movaps XMMWORD PTR [rsp+0xb0],xmm5
    de4e:	movaps XMMWORD PTR [rsp+0xc0],xmm6
    de56:	movaps XMMWORD PTR [rsp+0xd0],xmm7
    de5e:	mov    rax,QWORD PTR fs:0x28
    de67:	mov    QWORD PTR [rsp+0x28],rax
    de6c:	xor    eax,eax
    de6e:	lea    rax,[rsp+0xf0]
    de76:	lea    rdx,[rsp+0x10]
    de7b:	lea    rdi,[rsp+0x8]
    de80:	mov    QWORD PTR [rsp+0x18],rax
    de85:	lea    rax,[rsp+0x30]
    de8a:	mov    DWORD PTR [rsp+0x10],0x10
    de92:	mov    DWORD PTR [rsp+0x14],0x30
    de9a:	mov    QWORD PTR [rsp+0x20],rax
    de9f:	call   d550 <g_str_equal@plt+0x5198>
    dea4:	mov    rdi,QWORD PTR [rsp+0x8]
    dea9:	call   dcf0 <g_str_equal@plt+0x5938>
    deae:	mov    rax,QWORD PTR [rsp+0x28]
    deb3:	xor    rax,QWORD PTR fs:0x28
    debc:	jne    dec6 <g_str_equal@plt+0x5b0e>
    debe:	add    rsp,0xe8
    dec5:	ret    
    dec6:	call   8050 <__stack_chk_fail@plt>
    decb:	nop    DWORD PTR [rax+rax*1+0x0]
    ded0:	test   rdi,rdi
    ded3:	je     dee0 <g_str_equal@plt+0x5b28>
    ded5:	jmp    d5c0 <g_str_equal@plt+0x5208>
    deda:	nop    WORD PTR [rax+rax*1+0x0]
    dee0:	repz ret 
    dee2:	nop    DWORD PTR [rax+0x0]
    dee6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    def0:	test   rdi,rdi
    def3:	push   rbx
    def4:	je     df0f <g_str_equal@plt+0x5b57>
    def6:	mov    rbx,rdi
    def9:	mov    rdi,QWORD PTR [rdi]
    defc:	test   rdi,rdi
    deff:	je     df0f <g_str_equal@plt+0x5b57>
    df01:	call   d5c0 <g_str_equal@plt+0x5208>
    df06:	mov    QWORD PTR [rbx],0x0
    df0d:	pop    rbx
    df0e:	ret    
    df0f:	lea    rcx,[rip+0x1c70a]        # 2a620 <_fini@@Base+0x139c>
    df16:	lea    rsi,[rip+0x1c633]        # 2a550 <_fini@@Base+0x12cc>
    df1d:	lea    rdi,[rip+0x1c6e9]        # 2a60d <_fini@@Base+0x1389>
    df24:	mov    edx,0x116
    df29:	call   7a70 <__assert_fail@plt>
    df2e:	xchg   ax,ax
    df30:	test   rsi,rsi
    df33:	je     df60 <g_str_equal@plt+0x5ba8>
    df35:	push   rbp
    df36:	push   rbx
    df37:	mov    rbp,rdi
    df3a:	mov    rbx,rsi
    df3d:	sub    rsp,0x8
    df41:	call   d8e0 <g_str_equal@plt+0x5528>
    df46:	test   rbp,rbp
    df49:	je     df52 <g_str_equal@plt+0x5b9a>
    df4b:	cmp    QWORD PTR [rbp+0x0],0x0
    df50:	je     df68 <g_str_equal@plt+0x5bb0>
    df52:	add    rsp,0x8
    df56:	mov    rdi,rbx
    df59:	pop    rbx
    df5a:	pop    rbp
    df5b:	jmp    d5c0 <g_str_equal@plt+0x5208>
    df60:	repz ret 
    df62:	nop    WORD PTR [rax+rax*1+0x0]
    df68:	mov    QWORD PTR [rbp+0x0],rbx
    df6c:	add    rsp,0x8
    df70:	pop    rbx
    df71:	pop    rbp
    df72:	ret    
    df73:	nop    WORD PTR cs:[rax+rax*1+0x0]
    df7d:	nop    DWORD PTR [rax]
    df80:	sub    rsp,0xd8
    df87:	test   al,al
    df89:	mov    QWORD PTR [rsp+0x28],rsi
    df8e:	mov    QWORD PTR [rsp+0x30],rdx
    df93:	mov    QWORD PTR [rsp+0x38],rcx
    df98:	mov    QWORD PTR [rsp+0x40],r8
    df9d:	mov    QWORD PTR [rsp+0x48],r9
    dfa2:	je     dfdb <g_str_equal@plt+0x5c23>
    dfa4:	movaps XMMWORD PTR [rsp+0x50],xmm0
    dfa9:	movaps XMMWORD PTR [rsp+0x60],xmm1
    dfae:	movaps XMMWORD PTR [rsp+0x70],xmm2
    dfb3:	movaps XMMWORD PTR [rsp+0x80],xmm3
    dfbb:	movaps XMMWORD PTR [rsp+0x90],xmm4
    dfc3:	movaps XMMWORD PTR [rsp+0xa0],xmm5
    dfcb:	movaps XMMWORD PTR [rsp+0xb0],xmm6
    dfd3:	movaps XMMWORD PTR [rsp+0xc0],xmm7
    dfdb:	mov    rax,QWORD PTR fs:0x28
    dfe4:	mov    QWORD PTR [rsp+0x18],rax
    dfe9:	xor    eax,eax
    dfeb:	lea    rax,[rsp+0xe0]
    dff3:	mov    rsi,rsp
    dff6:	mov    QWORD PTR [rsp+0x8],rax
    dffb:	lea    rax,[rsp+0x20]
    e000:	mov    DWORD PTR [rsp],0x8
    e007:	mov    DWORD PTR [rsp+0x4],0x30
    e00f:	mov    QWORD PTR [rsp+0x10],rax
    e014:	call   11440 <g_str_equal@plt+0x9088>
    e019:	mov    rax,QWORD PTR [rsp+0x18]
    e01e:	xor    rax,QWORD PTR fs:0x28
    e027:	jne    e031 <g_str_equal@plt+0x5c79>
    e029:	add    rsp,0xd8
    e030:	ret    
    e031:	call   8050 <__stack_chk_fail@plt>
    e036:	nop    WORD PTR cs:[rax+rax*1+0x0]
    e040:	push   r15
    e042:	push   r14
    e044:	mov    r15,rdx
    e047:	push   r13
    e049:	push   r12
    e04b:	mov    r14,rsi
    e04e:	push   rbp
    e04f:	push   rbx
    e050:	mov    ebp,edi
    e052:	sub    rsp,0x28
    e056:	mov    rbx,0xfffffffffffffff8
    e05d:	mov    rax,QWORD PTR fs:0x28
    e066:	mov    QWORD PTR [rsp+0x18],rax
    e06b:	xor    eax,eax
    e06d:	cmp    BYTE PTR [rip+0x232c9c],0x0        # 240d10 <stdout@@GLIBC_2.2.5+0x1068>
    e074:	mov    rax,QWORD PTR fs:[rbx]
    e078:	je     e148 <g_str_equal@plt+0x5d90>
    e07e:	test   rax,rax
    e081:	je     e110 <g_str_equal@plt+0x5d58>
    e087:	mov    rax,QWORD PTR [rip+0x22ff92]        # 23e020 <g_test_config_vars+0x900>
    e08e:	lea    rsi,[rip+0x209a9]        # 2ea3e <_fini@@Base+0x57ba>
    e095:	mov    edx,DWORD PTR [rax]
    e097:	cmp    edx,0x1
    e09a:	je     e198 <g_str_equal@plt+0x5de0>
    e0a0:	cmp    edx,0x2
    e0a3:	je     e208 <g_str_equal@plt+0x5e50>
    e0a9:	lea    rdi,[rip+0x208aa]        # 2e95a <_fini@@Base+0x56d6>
    e0b0:	xor    eax,eax
    e0b2:	call   df80 <g_str_equal@plt+0x5bc8>
    e0b7:	cmp    ebp,0x1
    e0ba:	je     e1ee <g_str_equal@plt+0x5e36>
    e0c0:	cmp    ebp,0x2
    e0c3:	jne    e0d3 <g_str_equal@plt+0x5d1b>
    e0c5:	lea    rdi,[rip+0x1c5b2]        # 2a67e <_fini@@Base+0x13fa>
    e0cc:	xor    eax,eax
    e0ce:	call   df80 <g_str_equal@plt+0x5bc8>
    e0d3:	mov    rsi,r15
    e0d6:	mov    rdi,r14
    e0d9:	call   11440 <g_str_equal@plt+0x9088>
    e0de:	lea    rdi,[rip+0x1de3c]        # 2bf21 <_fini@@Base+0x2c9d>
    e0e5:	xor    eax,eax
    e0e7:	call   df80 <g_str_equal@plt+0x5bc8>
    e0ec:	mov    rax,QWORD PTR [rsp+0x18]
    e0f1:	xor    rax,QWORD PTR fs:0x28
    e0fa:	jne    e249 <g_str_equal@plt+0x5e91>
    e100:	add    rsp,0x28
    e104:	pop    rbx
    e105:	pop    rbp
    e106:	pop    r12
    e108:	pop    r13
    e10a:	pop    r14
    e10c:	pop    r15
    e10e:	ret    
    e10f:	nop
    e110:	mov    r12,rsp
    e113:	mov    rdi,r12
    e116:	call   81a0 <g_get_current_time@plt>
    e11b:	mov    rdi,r12
    e11e:	call   7da0 <g_time_val_to_iso8601@plt>
    e123:	lea    rdi,[rip+0x1c539]        # 2a663 <_fini@@Base+0x13df>
    e12a:	mov    rsi,rax
    e12d:	mov    r12,rax
    e130:	xor    eax,eax
    e132:	call   df80 <g_str_equal@plt+0x5bc8>
    e137:	mov    rdi,r12
    e13a:	call   7880 <g_free@plt>
    e13f:	mov    rax,QWORD PTR fs:[rbx]
    e143:	nop    DWORD PTR [rax+rax*1+0x0]
    e148:	test   rax,rax
    e14b:	jne    e087 <g_str_equal@plt+0x5ccf>
    e151:	mov    rcx,QWORD PTR [rip+0x232bc0]        # 240d18 <stdout@@GLIBC_2.2.5+0x1070>
    e158:	test   rcx,rcx
    e15b:	je     e087 <g_str_equal@plt+0x5ccf>
    e161:	mov    rdi,QWORD PTR [rip+0x231b38]        # 23fca0 <stderr@@GLIBC_2.2.5>
    e168:	lea    rdx,[rip+0x1c4f8]        # 2a667 <_fini@@Base+0x13e3>
    e16f:	mov    esi,0x1
    e174:	call   79e0 <__fprintf_chk@plt>
    e179:	mov    rax,QWORD PTR [rip+0x22fea0]        # 23e020 <g_test_config_vars+0x900>
    e180:	lea    rsi,[rip+0x20741]        # 2e8c8 <_fini@@Base+0x5644>
    e187:	mov    edx,DWORD PTR [rax]
    e189:	cmp    edx,0x1
    e18c:	jne    e0a0 <g_str_equal@plt+0x5ce8>
    e192:	nop    WORD PTR [rax+rax*1+0x0]
    e198:	mov    r12,QWORD PTR [rax+0x8]
    e19c:	mov    eax,DWORD PTR [rax+0x4]
    e19f:	test   eax,eax
    e1a1:	jle    e1d7 <g_str_equal@plt+0x5e1f>
    e1a3:	lea    r13,[rip+0x2071e]        # 2e8c8 <_fini@@Base+0x5644>
    e1aa:	xor    ebx,ebx
    e1ac:	nop    DWORD PTR [rax+0x0]
    e1b0:	movsxd rax,ebx
    e1b3:	lea    rdi,[rip+0x1c4b1]        # 2a66b <_fini@@Base+0x13e7>
    e1ba:	add    ebx,0x1
    e1bd:	mov    rdx,QWORD PTR [r12+rax*8]
    e1c1:	xor    eax,eax
    e1c3:	call   df80 <g_str_equal@plt+0x5bc8>
    e1c8:	mov    rax,QWORD PTR [rip+0x22fe51]        # 23e020 <g_test_config_vars+0x900>
    e1cf:	mov    rsi,r13
    e1d2:	cmp    ebx,DWORD PTR [rax+0x4]
    e1d5:	jl     e1b0 <g_str_equal@plt+0x5df8>
    e1d7:	lea    rdi,[rip+0x1c49d]        # 2a67b <_fini@@Base+0x13f7>
    e1de:	xor    eax,eax
    e1e0:	call   df80 <g_str_equal@plt+0x5bc8>
    e1e5:	cmp    ebp,0x1
    e1e8:	jne    e0c0 <g_str_equal@plt+0x5d08>
    e1ee:	lea    rdi,[rip+0x1c47f]        # 2a674 <_fini@@Base+0x13f0>
    e1f5:	xor    eax,eax
    e1f7:	call   df80 <g_str_equal@plt+0x5bc8>
    e1fc:	jmp    e0d3 <g_str_equal@plt+0x5d1b>
    e201:	nop    DWORD PTR [rax+0x0]
    e208:	mov    rsi,QWORD PTR [rax+0x8]
    e20c:	lea    rdi,[rip+0x1c454]        # 2a667 <_fini@@Base+0x13e3>
    e213:	xor    eax,eax
    e215:	call   df80 <g_str_equal@plt+0x5bc8>
    e21a:	mov    rax,QWORD PTR [rip+0x22fdff]        # 23e020 <g_test_config_vars+0x900>
    e221:	mov    esi,DWORD PTR [rax+0x4]
    e224:	test   esi,esi
    e226:	je     e236 <g_str_equal@plt+0x5e7e>
    e228:	lea    rdi,[rip+0x1c441]        # 2a670 <_fini@@Base+0x13ec>
    e22f:	xor    eax,eax
    e231:	call   df80 <g_str_equal@plt+0x5bc8>
    e236:	lea    rdi,[rip+0x2068b]        # 2e8c8 <_fini@@Base+0x5644>
    e23d:	xor    eax,eax
    e23f:	call   df80 <g_str_equal@plt+0x5bc8>
    e244:	jmp    e0b7 <g_str_equal@plt+0x5cff>
    e249:	call   8050 <__stack_chk_fail@plt>
    e24e:	xchg   ax,ax
    e250:	sub    rsp,0xd8
    e257:	test   al,al
    e259:	mov    QWORD PTR [rsp+0x28],rsi
    e25e:	mov    QWORD PTR [rsp+0x30],rdx
    e263:	mov    QWORD PTR [rsp+0x38],rcx
    e268:	mov    QWORD PTR [rsp+0x40],r8
    e26d:	mov    QWORD PTR [rsp+0x48],r9
    e272:	je     e2ab <g_str_equal@plt+0x5ef3>
    e274:	movaps XMMWORD PTR [rsp+0x50],xmm0
    e279:	movaps XMMWORD PTR [rsp+0x60],xmm1
    e27e:	movaps XMMWORD PTR [rsp+0x70],xmm2
    e283:	movaps XMMWORD PTR [rsp+0x80],xmm3
    e28b:	movaps XMMWORD PTR [rsp+0x90],xmm4
    e293:	movaps XMMWORD PTR [rsp+0xa0],xmm5
    e29b:	movaps XMMWORD PTR [rsp+0xb0],xmm6
    e2a3:	movaps XMMWORD PTR [rsp+0xc0],xmm7
    e2ab:	mov    rax,QWORD PTR fs:0x28
    e2b4:	mov    QWORD PTR [rsp+0x18],rax
    e2b9:	xor    eax,eax
    e2bb:	lea    rax,[rsp+0xe0]
    e2c3:	mov    rsi,rsp
    e2c6:	mov    QWORD PTR [rsp+0x8],rax
    e2cb:	lea    rax,[rsp+0x20]
    e2d0:	mov    DWORD PTR [rsp],0x8
    e2d7:	mov    DWORD PTR [rsp+0x4],0x30
    e2df:	mov    QWORD PTR [rsp+0x10],rax
    e2e4:	call   114c0 <g_str_equal@plt+0x9108>
    e2e9:	mov    rax,QWORD PTR [rsp+0x18]
    e2ee:	xor    rax,QWORD PTR fs:0x28
    e2f7:	jne    e301 <g_str_equal@plt+0x5f49>
    e2f9:	add    rsp,0xd8
    e300:	ret    
    e301:	call   8050 <__stack_chk_fail@plt>
    e306:	nop    WORD PTR cs:[rax+rax*1+0x0]
    e310:	cmp    QWORD PTR [rdi+0x10],0x0
    e315:	jne    e32d <g_str_equal@plt+0x5f75>
    e317:	mov    rax,QWORD PTR [rip+0x22fd02]        # 23e020 <g_test_config_vars+0x900>
    e31e:	mov    QWORD PTR [rip+0x22fcfb],rdi        # 23e020 <g_test_config_vars+0x900>
    e325:	mov    QWORD PTR [rdi+0x10],rax
    e329:	mov    rax,rdi
    e32c:	ret    
    e32d:	lea    rcx,[rip+0x1c41c]        # 2a750 <_fini@@Base+0x14cc>
    e334:	lea    rsi,[rip+0x1c375]        # 2a6b0 <_fini@@Base+0x142c>
    e33b:	lea    rdi,[rip+0x1c343]        # 2a685 <_fini@@Base+0x1401>
    e342:	sub    rsp,0x8
    e346:	mov    edx,0x39
    e34b:	call   7a70 <__assert_fail@plt>
    e350:	mov    rdx,QWORD PTR [rip+0x22fcc9]        # 23e020 <g_test_config_vars+0x900>
    e357:	mov    rax,rdi
    e35a:	mov    DWORD PTR [rdi],0x0
    e360:	mov    QWORD PTR [rip+0x22fcb9],rdi        # 23e020 <g_test_config_vars+0x900>
    e367:	mov    QWORD PTR [rdi+0x10],rdx
    e36b:	ret    
    e36c:	nop    DWORD PTR [rax+0x0]
    e370:	mov    rax,QWORD PTR [rip+0x22fca9]        # 23e020 <g_test_config_vars+0x900>
    e377:	cmp    rax,rdi
    e37a:	jne    e395 <g_str_equal@plt+0x5fdd>
    e37c:	mov    rdx,QWORD PTR [rax+0x10]
    e380:	test   rdx,rdx
    e383:	je     e395 <g_str_equal@plt+0x5fdd>
    e385:	mov    QWORD PTR [rip+0x22fc94],rdx        # 23e020 <g_test_config_vars+0x900>
    e38c:	mov    QWORD PTR [rax+0x10],0x0
    e394:	ret    
    e395:	lea    rcx,[rip+0x1c3a4]        # 2a740 <_fini@@Base+0x14bc>
    e39c:	lea    rsi,[rip+0x1c30d]        # 2a6b0 <_fini@@Base+0x142c>
    e3a3:	lea    rdi,[rip+0x1c2e6]        # 2a690 <_fini@@Base+0x140c>
    e3aa:	sub    rsp,0x8
    e3ae:	mov    edx,0x52
    e3b3:	call   7a70 <__assert_fail@plt>
    e3b8:	nop    DWORD PTR [rax+rax*1+0x0]
    e3c0:	mov    rdx,QWORD PTR [rip+0x22fc59]        # 23e020 <g_test_config_vars+0x900>
    e3c7:	mov    rax,rdi
    e3ca:	movdqu xmm0,XMMWORD PTR [rdx]
    e3ce:	mov    QWORD PTR [rdi+0x10],0x0
    e3d6:	movups XMMWORD PTR [rdi],xmm0
    e3d9:	ret    
    e3da:	nop    WORD PTR [rax+rax*1+0x0]
    e3e0:	cmp    QWORD PTR [rdi+0x10],0x0
    e3e5:	mov    rax,QWORD PTR [rip+0x22fc34]        # 23e020 <g_test_config_vars+0x900>
    e3ec:	mov    rdx,QWORD PTR [rax+0x10]
    e3f0:	jne    e3fe <g_str_equal@plt+0x6046>
    e3f2:	movdqu xmm0,XMMWORD PTR [rdi]
    e3f6:	mov    QWORD PTR [rax+0x10],rdx
    e3fa:	movups XMMWORD PTR [rax],xmm0
    e3fd:	ret    
    e3fe:	lea    rcx,[rip+0x1c32b]        # 2a730 <_fini@@Base+0x14ac>
    e405:	lea    rsi,[rip+0x1c2a4]        # 2a6b0 <_fini@@Base+0x142c>
    e40c:	lea    rdi,[rip+0x1c272]        # 2a685 <_fini@@Base+0x1401>
    e413:	sub    rsp,0x8
    e417:	mov    edx,0x68
    e41c:	call   7a70 <__assert_fail@plt>
    e421:	nop    DWORD PTR [rax+rax*1+0x0]
    e426:	nop    WORD PTR cs:[rax+rax*1+0x0]
    e430:	mov    rax,QWORD PTR [rip+0x22fbe9]        # 23e020 <g_test_config_vars+0x900>
    e437:	mov    DWORD PTR [rax],0x0
    e43d:	ret    
    e43e:	xchg   ax,ax
    e440:	mov    rax,QWORD PTR [rip+0x22fbd9]        # 23e020 <g_test_config_vars+0x900>
    e447:	movsxd rsi,esi
    e44a:	mov    DWORD PTR [rax+0x4],edx
    e44d:	lea    rdx,[rdi+rsi*8]
    e451:	mov    DWORD PTR [rax],0x1
    e457:	mov    QWORD PTR [rax+0x8],rdx
    e45b:	ret    
    e45c:	nop    DWORD PTR [rax+0x0]
    e460:	test   rdi,rdi
    e463:	mov    rax,QWORD PTR [rip+0x22fbb6]        # 23e020 <g_test_config_vars+0x900>
    e46a:	je     e480 <g_str_equal@plt+0x60c8>
    e46c:	mov    DWORD PTR [rax],0x2
    e472:	mov    DWORD PTR [rax+0x4],esi
    e475:	mov    QWORD PTR [rax+0x8],rdi
    e479:	ret    
    e47a:	nop    WORD PTR [rax+rax*1+0x0]
    e480:	cmp    DWORD PTR [rax],0x2
    e483:	jne    e489 <g_str_equal@plt+0x60d1>
    e485:	mov    DWORD PTR [rax+0x4],esi
    e488:	ret    
    e489:	lea    rcx,[rip+0x1c290]        # 2a720 <_fini@@Base+0x149c>
    e490:	lea    rsi,[rip+0x1c219]        # 2a6b0 <_fini@@Base+0x142c>
    e497:	lea    rdi,[rip+0x1c252]        # 2a6f0 <_fini@@Base+0x146c>
    e49e:	sub    rsp,0x8
    e4a2:	mov    edx,0x84
    e4a7:	call   7a70 <__assert_fail@plt>
    e4ac:	nop    DWORD PTR [rax+0x0]
    e4b0:	push   rbx
    e4b1:	mov    esi,0x2f
    e4b6:	mov    rbx,rdi
    e4b9:	call   7de0 <strrchr@plt>
    e4be:	lea    rdx,[rax+0x1]
    e4c2:	test   rax,rax
    e4c5:	cmovne rbx,rdx
    e4c9:	mov    QWORD PTR [rip+0x232848],rbx        # 240d18 <stdout@@GLIBC_2.2.5+0x1070>
    e4d0:	pop    rbx
    e4d1:	ret    
    e4d2:	nop    DWORD PTR [rax+0x0]
    e4d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    e4e0:	mov    rax,QWORD PTR [rip+0x232831]        # 240d18 <stdout@@GLIBC_2.2.5+0x1070>
    e4e7:	ret    
    e4e8:	nop    DWORD PTR [rax+rax*1+0x0]
    e4f0:	mov    rdx,rsi
    e4f3:	mov    rsi,rdi
    e4f6:	xor    edi,edi
    e4f8:	jmp    e040 <g_str_equal@plt+0x5c88>
    e4fd:	nop    DWORD PTR [rax]
    e500:	mov    rdx,rsi
    e503:	mov    rsi,rdi
    e506:	mov    edi,0x1
    e50b:	jmp    e040 <g_str_equal@plt+0x5c88>
    e510:	mov    rdx,rsi
    e513:	mov    rsi,rdi
    e516:	mov    edi,0x2
    e51b:	jmp    e040 <g_str_equal@plt+0x5c88>
    e520:	sub    rsp,0xd8
    e527:	test   al,al
    e529:	mov    QWORD PTR [rsp+0x28],rsi
    e52e:	mov    QWORD PTR [rsp+0x30],rdx
    e533:	mov    QWORD PTR [rsp+0x38],rcx
    e538:	mov    QWORD PTR [rsp+0x40],r8
    e53d:	mov    QWORD PTR [rsp+0x48],r9
    e542:	je     e57b <g_str_equal@plt+0x61c3>
    e544:	movaps XMMWORD PTR [rsp+0x50],xmm0
    e549:	movaps XMMWORD PTR [rsp+0x60],xmm1
    e54e:	movaps XMMWORD PTR [rsp+0x70],xmm2
    e553:	movaps XMMWORD PTR [rsp+0x80],xmm3
    e55b:	movaps XMMWORD PTR [rsp+0x90],xmm4
    e563:	movaps XMMWORD PTR [rsp+0xa0],xmm5
    e56b:	movaps XMMWORD PTR [rsp+0xb0],xmm6
    e573:	movaps XMMWORD PTR [rsp+0xc0],xmm7
    e57b:	mov    rax,QWORD PTR fs:0x28
    e584:	mov    QWORD PTR [rsp+0x18],rax
    e589:	xor    eax,eax
    e58b:	lea    rax,[rsp+0xe0]
    e593:	mov    rsi,rdi
    e596:	mov    rdx,rsp
    e599:	xor    edi,edi
    e59b:	mov    QWORD PTR [rsp+0x8],rax
    e5a0:	lea    rax,[rsp+0x20]
    e5a5:	mov    DWORD PTR [rsp],0x8
    e5ac:	mov    DWORD PTR [rsp+0x4],0x30
    e5b4:	mov    QWORD PTR [rsp+0x10],rax
    e5b9:	call   e040 <g_str_equal@plt+0x5c88>
    e5be:	mov    rax,QWORD PTR [rsp+0x18]
    e5c3:	xor    rax,QWORD PTR fs:0x28
    e5cc:	jne    e5d6 <g_str_equal@plt+0x621e>
    e5ce:	add    rsp,0xd8
    e5d5:	ret    
    e5d6:	call   8050 <__stack_chk_fail@plt>
    e5db:	nop    DWORD PTR [rax+rax*1+0x0]
    e5e0:	sub    rsp,0xd8
    e5e7:	test   al,al
    e5e9:	mov    QWORD PTR [rsp+0x28],rsi
    e5ee:	mov    QWORD PTR [rsp+0x30],rdx
    e5f3:	mov    QWORD PTR [rsp+0x38],rcx
    e5f8:	mov    QWORD PTR [rsp+0x40],r8
    e5fd:	mov    QWORD PTR [rsp+0x48],r9
    e602:	je     e63b <g_str_equal@plt+0x6283>
    e604:	movaps XMMWORD PTR [rsp+0x50],xmm0
    e609:	movaps XMMWORD PTR [rsp+0x60],xmm1
    e60e:	movaps XMMWORD PTR [rsp+0x70],xmm2
    e613:	movaps XMMWORD PTR [rsp+0x80],xmm3
    e61b:	movaps XMMWORD PTR [rsp+0x90],xmm4
    e623:	movaps XMMWORD PTR [rsp+0xa0],xmm5
    e62b:	movaps XMMWORD PTR [rsp+0xb0],xmm6
    e633:	movaps XMMWORD PTR [rsp+0xc0],xmm7
    e63b:	mov    rax,QWORD PTR fs:0x28
    e644:	mov    QWORD PTR [rsp+0x18],rax
    e649:	xor    eax,eax
    e64b:	lea    rax,[rsp+0xe0]
    e653:	mov    rsi,rdi
    e656:	mov    rdx,rsp
    e659:	mov    edi,0x1
    e65e:	mov    QWORD PTR [rsp+0x8],rax
    e663:	lea    rax,[rsp+0x20]
    e668:	mov    DWORD PTR [rsp],0x8
    e66f:	mov    DWORD PTR [rsp+0x4],0x30
    e677:	mov    QWORD PTR [rsp+0x10],rax
    e67c:	call   e040 <g_str_equal@plt+0x5c88>
    e681:	mov    rax,QWORD PTR [rsp+0x18]
    e686:	xor    rax,QWORD PTR fs:0x28
    e68f:	jne    e699 <g_str_equal@plt+0x62e1>
    e691:	add    rsp,0xd8
    e698:	ret    
    e699:	call   8050 <__stack_chk_fail@plt>
    e69e:	xchg   ax,ax
    e6a0:	sub    rsp,0xd8
    e6a7:	test   al,al
    e6a9:	mov    QWORD PTR [rsp+0x28],rsi
    e6ae:	mov    QWORD PTR [rsp+0x30],rdx
    e6b3:	mov    QWORD PTR [rsp+0x38],rcx
    e6b8:	mov    QWORD PTR [rsp+0x40],r8
    e6bd:	mov    QWORD PTR [rsp+0x48],r9
    e6c2:	je     e6fb <g_str_equal@plt+0x6343>
    e6c4:	movaps XMMWORD PTR [rsp+0x50],xmm0
    e6c9:	movaps XMMWORD PTR [rsp+0x60],xmm1
    e6ce:	movaps XMMWORD PTR [rsp+0x70],xmm2
    e6d3:	movaps XMMWORD PTR [rsp+0x80],xmm3
    e6db:	movaps XMMWORD PTR [rsp+0x90],xmm4
    e6e3:	movaps XMMWORD PTR [rsp+0xa0],xmm5
    e6eb:	movaps XMMWORD PTR [rsp+0xb0],xmm6
    e6f3:	movaps XMMWORD PTR [rsp+0xc0],xmm7
    e6fb:	mov    rax,QWORD PTR fs:0x28
    e704:	mov    QWORD PTR [rsp+0x18],rax
    e709:	xor    eax,eax
    e70b:	lea    rax,[rsp+0xe0]
    e713:	mov    rsi,rdi
    e716:	mov    rdx,rsp
    e719:	mov    edi,0x2
    e71e:	mov    QWORD PTR [rsp+0x8],rax
    e723:	lea    rax,[rsp+0x20]
    e728:	mov    DWORD PTR [rsp],0x8
    e72f:	mov    DWORD PTR [rsp+0x4],0x30
    e737:	mov    QWORD PTR [rsp+0x10],rax
    e73c:	call   e040 <g_str_equal@plt+0x5c88>
    e741:	mov    rax,QWORD PTR [rsp+0x18]
    e746:	xor    rax,QWORD PTR fs:0x28
    e74f:	jne    e759 <g_str_equal@plt+0x63a1>
    e751:	add    rsp,0xd8
    e758:	ret    
    e759:	call   8050 <__stack_chk_fail@plt>
    e75e:	xchg   ax,ax
    e760:	mov    QWORD PTR [rdi],0x0
    e767:	ret    
    e768:	nop    DWORD PTR [rax+rax*1+0x0]
    e770:	mov    rax,QWORD PTR [rdi]
    e773:	test   rax,rax
    e776:	mov    QWORD PTR [rsi+0x8],rax
    e77a:	je     e787 <g_str_equal@plt+0x63cf>
    e77c:	mov    rax,QWORD PTR [rdi]
    e77f:	lea    rdx,[rsi+0x8]
    e783:	mov    QWORD PTR [rax+0x10],rdx
    e787:	mov    QWORD PTR [rdi],rsi
    e78a:	mov    QWORD PTR [rsi+0x10],rdi
    e78e:	ret    
    e78f:	nop
    e790:	mov    rax,QWORD PTR [rdi+0x8]
    e794:	mov    rdx,QWORD PTR [rdi+0x10]
    e798:	test   rax,rax
    e79b:	je     e7a9 <g_str_equal@plt+0x63f1>
    e79d:	mov    QWORD PTR [rax+0x10],rdx
    e7a1:	mov    rdx,QWORD PTR [rdi+0x10]
    e7a5:	mov    rax,QWORD PTR [rdi+0x8]
    e7a9:	mov    QWORD PTR [rdx],rax
    e7ac:	ret    
    e7ad:	nop    DWORD PTR [rax]
    e7b0:	mov    rax,QWORD PTR [rdi]
    e7b3:	test   rax,rax
    e7b6:	je     e7e8 <g_str_equal@plt+0x6430>
    e7b8:	push   rbp
    e7b9:	push   rbx
    e7ba:	mov    rbp,rsi
    e7bd:	sub    rsp,0x8
    e7c1:	nop    DWORD PTR [rax+0x0]
    e7c8:	mov    rbx,QWORD PTR [rax+0x8]
    e7cc:	mov    rdi,rax
    e7cf:	mov    rsi,rbp
    e7d2:	call   QWORD PTR [rax]
    e7d4:	test   rbx,rbx
    e7d7:	mov    rax,rbx
    e7da:	jne    e7c8 <g_str_equal@plt+0x6410>
    e7dc:	add    rsp,0x8
    e7e0:	pop    rbx
    e7e1:	pop    rbp
    e7e2:	ret    
    e7e3:	nop    DWORD PTR [rax+rax*1+0x0]
    e7e8:	repz ret 
    e7ea:	nop    WORD PTR [rax+rax*1+0x0]
    e7f0:	mov    QWORD PTR [rdi],0x0
    e7f7:	ret    
    e7f8:	nop    DWORD PTR [rax+rax*1+0x0]
    e800:	mov    rax,QWORD PTR [rdi]
    e803:	test   rax,rax
    e806:	mov    QWORD PTR [rsi+0x8],rax
    e80a:	je     e817 <g_str_equal@plt+0x645f>
    e80c:	mov    rax,QWORD PTR [rdi]
    e80f:	lea    rdx,[rsi+0x8]
    e813:	mov    QWORD PTR [rax+0x10],rdx
    e817:	mov    QWORD PTR [rdi],rsi
    e81a:	mov    QWORD PTR [rsi+0x10],rdi
    e81e:	ret    
    e81f:	nop
    e820:	mov    rax,QWORD PTR [rdi+0x8]
    e824:	mov    rdx,QWORD PTR [rdi+0x10]
    e828:	test   rax,rax
    e82b:	je     e839 <g_str_equal@plt+0x6481>
    e82d:	mov    QWORD PTR [rax+0x10],rdx
    e831:	mov    rdx,QWORD PTR [rdi+0x10]
    e835:	mov    rax,QWORD PTR [rdi+0x8]
    e839:	mov    QWORD PTR [rdx],rax
    e83c:	ret    
    e83d:	nop    DWORD PTR [rax]
    e840:	mov    rax,QWORD PTR [rdi]
    e843:	test   rax,rax
    e846:	je     e890 <g_str_equal@plt+0x64d8>
    e848:	push   rbp
    e849:	push   rbx
    e84a:	mov    rbp,rsi
    e84d:	sub    rsp,0x8
    e851:	jmp    e860 <g_str_equal@plt+0x64a8>
    e853:	nop    DWORD PTR [rax+rax*1+0x0]
    e858:	test   rbx,rbx
    e85b:	mov    rax,rbx
    e85e:	je     e880 <g_str_equal@plt+0x64c8>
    e860:	mov    rbx,QWORD PTR [rax+0x8]
    e864:	mov    rsi,rbp
    e867:	mov    rdi,rax
    e86a:	call   QWORD PTR [rax]
    e86c:	test   eax,eax
    e86e:	je     e858 <g_str_equal@plt+0x64a0>
    e870:	add    rsp,0x8
    e874:	pop    rbx
    e875:	pop    rbp
    e876:	ret    
    e877:	nop    WORD PTR [rax+rax*1+0x0]
    e880:	add    rsp,0x8
    e884:	xor    eax,eax
    e886:	pop    rbx
    e887:	pop    rbp
    e888:	ret    
    e889:	nop    DWORD PTR [rax+0x0]
    e890:	xor    eax,eax
    e892:	ret    
    e893:	nop    WORD PTR cs:[rax+rax*1+0x0]
    e89d:	nop    DWORD PTR [rax]
    e8a0:	push   rbx
    e8a1:	mov    rax,QWORD PTR [rdi+0x28]
    e8a5:	mov    rbx,rdi
    e8a8:	mov    rdx,QWORD PTR [rdi+0x30]
    e8ac:	test   rax,rax
    e8af:	jne    e8b5 <g_str_equal@plt+0x64fd>
    e8b1:	mov    rax,QWORD PTR [rdi+0x20]
    e8b5:	mov    QWORD PTR [rax+0x30],rdx
    e8b9:	mov    rax,QWORD PTR [rbx+0x30]
    e8bd:	mov    rdx,QWORD PTR [rbx+0x28]
    e8c1:	mov    QWORD PTR [rax],rdx
    e8c4:	mov    rdi,QWORD PTR [rbx]
    e8c7:	mov    QWORD PTR [rbx+0x30],0x0
    e8cf:	call   7880 <g_free@plt>
    e8d4:	mov    rdi,QWORD PTR [rbx+0x8]
    e8d8:	call   7880 <g_free@plt>
    e8dd:	mov    rdi,rbx
    e8e0:	pop    rbx
    e8e1:	jmp    7880 <g_free@plt>
    e8e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    e8f0:	push   r13
    e8f2:	push   r12
    e8f4:	push   rbp
    e8f5:	push   rbx
    e8f6:	mov    rbp,rdi
    e8f9:	sub    rsp,0x8
    e8fd:	mov    rdi,QWORD PTR [rdi]
    e900:	test   rdi,rdi
    e903:	je     e940 <g_str_equal@plt+0x6588>
    e905:	mov    r12,rsi
    e908:	mov    rbx,rbp
    e90b:	xor    r13d,r13d
    e90e:	jmp    e926 <g_str_equal@plt+0x656e>
    e910:	add    r13d,0x1
    e914:	movsxd rbx,r13d
    e917:	shl    rbx,0x5
    e91b:	add    rbx,rbp
    e91e:	mov    rdi,QWORD PTR [rbx]
    e921:	test   rdi,rdi
    e924:	je     e940 <g_str_equal@plt+0x6588>
    e926:	mov    rsi,r12
    e929:	call   8060 <strcmp@plt>
    e92e:	test   eax,eax
    e930:	jne    e910 <g_str_equal@plt+0x6558>
    e932:	add    rsp,0x8
    e936:	mov    rax,rbx
    e939:	pop    rbx
    e93a:	pop    rbp
    e93b:	pop    r12
    e93d:	pop    r13
    e93f:	ret    
    e940:	add    rsp,0x8
    e944:	xor    ebx,ebx
    e946:	mov    rax,rbx
    e949:	pop    rbx
    e94a:	pop    rbp
    e94b:	pop    r12
    e94d:	pop    r13
    e94f:	ret    
    e950:	push   r13
    e952:	push   r12
    e954:	mov    r13,rdi
    e957:	push   rbp
    e958:	push   rbx
    e959:	mov    rbx,rsi
    e95c:	mov    rbp,rdx
    e95f:	xor    esi,esi
    e961:	xor    edx,edx
    e963:	sub    rsp,0x18
    e967:	mov    r12,rcx
    e96a:	mov    rdi,rbx
    e96d:	mov    rcx,rsp
    e970:	mov    rax,QWORD PTR fs:0x28
    e979:	mov    QWORD PTR [rsp+0x8],rax
    e97e:	xor    eax,eax
    e980:	call   b070 <g_str_equal@plt+0x2cb8>
    e985:	cmp    eax,0xffffffde
    e988:	je     e9f0 <g_str_equal@plt+0x6638>
    e98a:	test   eax,eax
    e98c:	jne    e9b8 <g_str_equal@plt+0x6600>
    e98e:	mov    rax,QWORD PTR [rsp]
    e992:	mov    QWORD PTR [rbp+0x0],rax
    e996:	mov    rax,QWORD PTR [rsp+0x8]
    e99b:	xor    rax,QWORD PTR fs:0x28
    e9a4:	jne    ea0e <g_str_equal@plt+0x6656>
    e9a6:	add    rsp,0x18
    e9aa:	pop    rbx
    e9ab:	pop    rbp
    e9ac:	pop    r12
    e9ae:	pop    r13
    e9b0:	ret    
    e9b1:	nop    DWORD PTR [rax+0x0]
    e9b8:	lea    rax,[rip+0x1c0aa]        # 2aa69 <_fini@@Base+0x17e5>
    e9bf:	sub    rsp,0x8
    e9c3:	lea    r8,[rip+0x1c085]        # 2aa4f <_fini@@Base+0x17cb>
    e9ca:	lea    rcx,[rip+0x1c30f]        # 2ace0 <_fini@@Base+0x1a5c>
    e9d1:	mov    r9,r13
    e9d4:	mov    edx,0x7e
    e9d9:	push   rax
    e9da:	lea    rsi,[rip+0x1bdb7]        # 2a798 <_fini@@Base+0x1514>
    e9e1:	xor    eax,eax
    e9e3:	mov    rdi,r12
    e9e6:	call   db00 <g_str_equal@plt+0x5748>
    e9eb:	pop    rax
    e9ec:	pop    rdx
    e9ed:	jmp    e996 <g_str_equal@plt+0x65de>
    e9ef:	nop
    e9f0:	sub    rsp,0x8
    e9f4:	mov    r9,rbx
    e9f7:	lea    r8,[rip+0x1bd6a]        # 2a768 <_fini@@Base+0x14e4>
    e9fe:	push   r13
    ea00:	lea    rcx,[rip+0x1c2d9]        # 2ace0 <_fini@@Base+0x1a5c>
    ea07:	mov    edx,0x7a
    ea0c:	jmp    e9da <g_str_equal@plt+0x6622>
    ea0e:	call   8050 <__stack_chk_fail@plt>
    ea13:	nop    DWORD PTR [rax]
    ea16:	nop    WORD PTR cs:[rax+rax*1+0x0]
    ea20:	movzx  eax,BYTE PTR [rdi]
    ea23:	test   al,al
    ea25:	je     ea70 <g_str_equal@plt+0x66b8>
    ea27:	push   rbx
    ea28:	mov    rbx,rdi
    ea2b:	jmp    ea43 <g_str_equal@plt+0x668b>
    ea2d:	nop    DWORD PTR [rax]
    ea30:	movsx  edi,BYTE PTR [rbx]
    ea33:	add    rbx,0x1
    ea37:	call   8370 <_IO_putc@plt>
    ea3c:	movzx  eax,BYTE PTR [rbx]
    ea3f:	test   al,al
    ea41:	je     ea68 <g_str_equal@plt+0x66b0>
    ea43:	cmp    al,0x2c
    ea45:	mov    rsi,QWORD PTR [rip+0x23125c]        # 23fca8 <stdout@@GLIBC_2.2.5>
    ea4c:	jne    ea30 <g_str_equal@plt+0x6678>
    ea4e:	mov    edi,0x2c
    ea53:	call   8370 <_IO_putc@plt>
    ea58:	mov    rsi,QWORD PTR [rip+0x231249]        # 23fca8 <stdout@@GLIBC_2.2.5>
    ea5f:	jmp    ea30 <g_str_equal@plt+0x6678>
    ea61:	nop    DWORD PTR [rax+0x0]
    ea68:	pop    rbx
    ea69:	ret    
    ea6a:	nop    WORD PTR [rax+rax*1+0x0]
    ea70:	repz ret 
    ea72:	nop    DWORD PTR [rax+0x0]
    ea76:	nop    WORD PTR cs:[rax+rax*1+0x0]
    ea80:	test   rdi,rdi
    ea83:	je     ead0 <g_str_equal@plt+0x6718>
    ea85:	push   r12
    ea87:	mov    r12,rsi
    ea8a:	push   rbp
    ea8b:	push   rbx
    ea8c:	mov    rbx,rdi
    ea8f:	jmp    eaa0 <g_str_equal@plt+0x66e8>
    ea91:	nop    DWORD PTR [rax+0x0]
    ea98:	test   rbp,rbp
    ea9b:	mov    rbx,rbp
    ea9e:	je     eac3 <g_str_equal@plt+0x670b>
    eaa0:	mov    rdi,QWORD PTR [rbx]
    eaa3:	mov    rsi,r12
    eaa6:	mov    rbp,QWORD PTR [rbx+0x28]
    eaaa:	call   8060 <strcmp@plt>
    eaaf:	test   eax,eax
    eab1:	jne    ea98 <g_str_equal@plt+0x66e0>
    eab3:	mov    rdi,rbx
    eab6:	mov    rbx,rbp
    eab9:	call   e8a0 <g_str_equal@plt+0x64e8>
    eabe:	test   rbp,rbp
    eac1:	jne    eaa0 <g_str_equal@plt+0x66e8>
    eac3:	pop    rbx
    eac4:	pop    rbp
    eac5:	pop    r12
    eac7:	ret    
    eac8:	nop    DWORD PTR [rax+rax*1+0x0]
    ead0:	repz ret 
    ead2:	nop    DWORD PTR [rax+0x0]
    ead6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    eae0:	mov    r9,rdi
    eae3:	lea    rdi,[rip+0x1e6a6]        # 2d190 <_fini@@Base+0x3f0c>
    eaea:	mov    r10,rcx
    eaed:	mov    ecx,0x3
    eaf2:	mov    r8,rsi
    eaf5:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
    eaf7:	seta   al
    eafa:	sbb    al,0x0
    eafc:	test   al,al
    eafe:	je     eb20 <g_str_equal@plt+0x6768>
    eb00:	lea    rdi,[rip+0x1bf6b]        # 2aa72 <_fini@@Base+0x17ee>
    eb07:	mov    ecx,0x4
    eb0c:	mov    rsi,r8
    eb0f:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
    eb11:	seta   al
    eb14:	sbb    al,0x0
    eb16:	test   al,al
    eb18:	jne    eb28 <g_str_equal@plt+0x6770>
    eb1a:	mov    BYTE PTR [rdx],0x0
    eb1d:	ret    
    eb1e:	xchg   ax,ax
    eb20:	mov    BYTE PTR [rdx],0x1
    eb23:	ret    
    eb24:	nop    DWORD PTR [rax+0x0]
    eb28:	lea    rax,[rip+0x1bf47]        # 2aa76 <_fini@@Base+0x17f2>
    eb2f:	sub    rsp,0x10
    eb33:	lea    r8,[rip+0x1bf15]        # 2aa4f <_fini@@Base+0x17cb>
    eb3a:	lea    rcx,[rip+0x1c1df]        # 2ad20 <_fini@@Base+0x1a9c>
    eb41:	lea    rsi,[rip+0x1bc50]        # 2a798 <_fini@@Base+0x1514>
    eb48:	mov    rdi,r10
    eb4b:	push   rax
    eb4c:	mov    edx,0x6d
    eb51:	xor    eax,eax
    eb53:	call   db00 <g_str_equal@plt+0x5748>
    eb58:	add    rsp,0x18
    eb5c:	ret    
    eb5d:	nop    DWORD PTR [rax]
    eb60:	push   r12
    eb62:	push   rbp
    eb63:	mov    r12,rsi
    eb66:	push   rbx
    eb67:	movsx  esi,dl
    eb6a:	mov    rbp,rdi
    eb6d:	call   7f90 <strchr@plt>
    eb72:	test   rax,rax
    eb75:	je     eb98 <g_str_equal@plt+0x67e0>
    eb77:	mov    rsi,rax
    eb7a:	mov    rbx,rax
    eb7d:	mov    rdi,rbp
    eb80:	sub    rsi,rbp
    eb83:	call   7c40 <g_strndup@plt>
    eb88:	mov    QWORD PTR [r12],rax
    eb8c:	mov    rax,rbx
    eb8f:	pop    rbx
    eb90:	pop    rbp
    eb91:	pop    r12
    eb93:	ret    
    eb94:	nop    DWORD PTR [rax+0x0]
    eb98:	mov    rdi,rbp
    eb9b:	call   7a50 <g_strdup@plt>
    eba0:	mov    rdi,rbp
    eba3:	mov    QWORD PTR [r12],rax
    eba7:	call   7cd0 <strlen@plt>
    ebac:	lea    rbx,[rbp+rax*1+0x0]
    ebb1:	mov    rax,rbx
    ebb4:	pop    rbx
    ebb5:	pop    rbp
    ebb6:	pop    r12
    ebb8:	ret    
    ebb9:	nop    DWORD PTR [rax+0x0]
    ebc0:	push   rbx
    ebc1:	mov    rbx,rdi
    ebc4:	mov    rdi,QWORD PTR [rdi+0x28]
    ebc8:	test   rdi,rdi
    ebcb:	je     ebde <g_str_equal@plt+0x6826>
    ebcd:	nop    DWORD PTR [rax]
    ebd0:	call   e8a0 <g_str_equal@plt+0x64e8>
    ebd5:	mov    rdi,QWORD PTR [rbx+0x28]
    ebd9:	test   rdi,rdi
    ebdc:	jne    ebd0 <g_str_equal@plt+0x6818>
    ebde:	mov    rax,QWORD PTR [rbx+0x38]
    ebe2:	mov    rdx,QWORD PTR [rbx+0x40]
    ebe6:	test   rax,rax
    ebe9:	je     ec18 <g_str_equal@plt+0x6860>
    ebeb:	mov    QWORD PTR [rax+0x40],rdx
    ebef:	mov    rax,QWORD PTR [rbx+0x40]
    ebf3:	mov    rdx,QWORD PTR [rbx+0x38]
    ebf7:	mov    QWORD PTR [rax],rdx
    ebfa:	mov    rdi,QWORD PTR [rbx]
    ebfd:	mov    QWORD PTR [rbx+0x40],0x0
    ec05:	call   7880 <g_free@plt>
    ec0a:	mov    rdi,rbx
    ec0d:	pop    rbx
    ec0e:	jmp    7880 <g_free@plt>
    ec13:	nop    DWORD PTR [rax+rax*1+0x0]
    ec18:	mov    rax,QWORD PTR [rbx+0x8]
    ec1c:	mov    QWORD PTR [rax+0x20],rdx
    ec20:	jmp    ebef <g_str_equal@plt+0x6837>
    ec22:	nop    DWORD PTR [rax+0x0]
    ec26:	nop    WORD PTR cs:[rax+rax*1+0x0]
    ec30:	push   r15
    ec32:	push   r14
    ec34:	xor    r14d,r14d
    ec37:	push   r13
    ec39:	push   r12
    ec3b:	mov    r13,rsi
    ec3e:	push   rbp
    ec3f:	push   rbx
    ec40:	mov    rbp,rdi
    ec43:	sub    rsp,0x18
    ec47:	mov    QWORD PTR [rsi],0x0
    ec4e:	mov    QWORD PTR [rsp],0x0
    ec56:	jmp    ec7b <g_str_equal@plt+0x68c3>
    ec58:	nop    DWORD PTR [rax+rax*1+0x0]
    ec60:	cmp    BYTE PTR [rbx+0x1],0x2c
    ec64:	jne    ecde <g_str_equal@plt+0x6926>
    ec66:	mov    r8,QWORD PTR [rsp+0x8]
    ec6b:	mov    rax,QWORD PTR [r13+0x0]
    ec6f:	mov    r14,r15
    ec72:	lea    rbp,[rbp+r8*1+0x2]
    ec77:	mov    QWORD PTR [rsp],rax
    ec7b:	mov    esi,0x2c
    ec80:	mov    rdi,rbp
    ec83:	call   7be0 <strchrnul@plt>
    ec88:	mov    r8,rax
    ec8b:	mov    rbx,rax
    ec8e:	sub    r8,rbp
    ec91:	cmp    BYTE PTR [rax],0x0
    ec94:	mov    r12,r8
    ec97:	je     eca7 <g_str_equal@plt+0x68ef>
    ec99:	xor    r12d,r12d
    ec9c:	cmp    BYTE PTR [rax+0x1],0x2c
    eca0:	sete   r12b
    eca4:	add    r12,r8
    eca7:	lea    r15,[r14+r12*1]
    ecab:	mov    rdi,QWORD PTR [rsp]
    ecaf:	mov    QWORD PTR [rsp+0x8],r8
    ecb4:	lea    rsi,[r15+0x1]
    ecb8:	call   8010 <g_realloc@plt>
    ecbd:	lea    rdi,[rax+r14*1]
    ecc1:	mov    QWORD PTR [r13+0x0],rax
    ecc5:	mov    rdx,r12
    ecc8:	mov    rsi,rbp
    eccb:	call   8130 <strncpy@plt>
    ecd0:	mov    rax,QWORD PTR [r13+0x0]
    ecd4:	mov    BYTE PTR [rax+r15*1],0x0
    ecd9:	cmp    BYTE PTR [rbx],0x0
    ecdc:	jne    ec60 <g_str_equal@plt+0x68a8>
    ecde:	add    rsp,0x18
    ece2:	mov    rax,rbx
    ece5:	pop    rbx
    ece6:	pop    rbp
    ece7:	pop    r12
    ece9:	pop    r13
    eceb:	pop    r14
    eced:	pop    r15
    ecef:	ret    
    ecf0:	push   r13
    ecf2:	push   r12
    ecf4:	mov    r13,rdi
    ecf7:	push   rbp
    ecf8:	push   rbx
    ecf9:	mov    rbx,rsi
    ecfc:	mov    r12,rdx
    ecff:	xor    esi,esi
    ed01:	mov    rdi,rbx
    ed04:	sub    rsp,0x18
    ed08:	mov    rbp,rcx
    ed0b:	mov    rdx,rsp
    ed0e:	mov    rax,QWORD PTR fs:0x28
    ed17:	mov    QWORD PTR [rsp+0x8],rax
    ed1c:	xor    eax,eax
    ed1e:	call   ab30 <g_str_equal@plt+0x2778>
    ed23:	cmp    eax,0xffffffde
    ed26:	je     eda0 <g_str_equal@plt+0x69e8>
    ed28:	test   eax,eax
    ed2a:	jne    ed58 <g_str_equal@plt+0x69a0>
    ed2c:	mov    rax,QWORD PTR [rsp]
    ed30:	mov    QWORD PTR [r12],rax
    ed34:	mov    rax,QWORD PTR [rsp+0x8]
    ed39:	xor    rax,QWORD PTR fs:0x28
    ed42:	jne    edd4 <g_str_equal@plt+0x6a1c>
    ed48:	add    rsp,0x18
    ed4c:	pop    rbx
    ed4d:	pop    rbp
    ed4e:	pop    r12
    ed50:	pop    r13
    ed52:	ret    
    ed53:	nop    DWORD PTR [rax+rax*1+0x0]
    ed58:	lea    rax,[rip+0x1baa9]        # 2a808 <_fini@@Base+0x1584>
    ed5f:	sub    rsp,0x8
    ed63:	lea    r8,[rip+0x1bce5]        # 2aa4f <_fini@@Base+0x17cb>
    ed6a:	lea    rcx,[rip+0x1c00f]        # 2ad80 <_fini@@Base+0x1afc>
    ed71:	lea    rsi,[rip+0x1ba20]        # 2a798 <_fini@@Base+0x1514>
    ed78:	mov    edx,0xa0
    ed7d:	push   rax
    ed7e:	mov    r9,r13
    ed81:	mov    rdi,rbp
    ed84:	xor    eax,eax
    ed86:	call   db00 <g_str_equal@plt+0x5748>
    ed8b:	lea    rsi,[rip+0x1ba9e]        # 2a830 <_fini@@Base+0x15ac>
    ed92:	xor    eax,eax
    ed94:	mov    rdi,rbp
    ed97:	call   d6d0 <g_str_equal@plt+0x5318>
    ed9c:	pop    rax
    ed9d:	pop    rdx
    ed9e:	jmp    ed34 <g_str_equal@plt+0x697c>
    eda0:	sub    rsp,0x8
    eda4:	lea    rcx,[rip+0x1bfd5]        # 2ad80 <_fini@@Base+0x1afc>
    edab:	lea    rsi,[rip+0x1b9e6]        # 2a798 <_fini@@Base+0x1514>
    edb2:	push   r13
    edb4:	lea    r8,[rip+0x1ba1d]        # 2a7d8 <_fini@@Base+0x1554>
    edbb:	mov    r9,rbx
    edbe:	mov    edx,0x9b
    edc3:	mov    rdi,rbp
    edc6:	xor    eax,eax
    edc8:	call   db00 <g_str_equal@plt+0x5748>
    edcd:	pop    rcx
    edce:	pop    rsi
    edcf:	jmp    ed34 <g_str_equal@plt+0x697c>
    edd4:	call   8050 <__stack_chk_fail@plt>
    edd9:	nop    DWORD PTR [rax+0x0]
    ede0:	mov    rax,QWORD PTR [rdi+0x10]
    ede4:	test   rax,rax
    ede7:	je     ee10 <g_str_equal@plt+0x6a58>
    ede9:	mov    eax,DWORD PTR [rax+0x8]
    edec:	cmp    eax,0x1
    edef:	je     ee30 <g_str_equal@plt+0x6a78>
    edf1:	jb     ee10 <g_str_equal@plt+0x6a58>
    edf3:	cmp    eax,0x2
    edf6:	je     ee18 <g_str_equal@plt+0x6a60>
    edf8:	cmp    eax,0x3
    edfb:	jne    ee43 <g_str_equal@plt+0x6a8b>
    edfd:	lea    rdx,[rdi+0x18]
    ee01:	mov    rcx,rsi
    ee04:	mov    rsi,QWORD PTR [rdi+0x8]
    ee08:	mov    rdi,QWORD PTR [rdi]
    ee0b:	jmp    ecf0 <g_str_equal@plt+0x6938>
    ee10:	repz ret 
    ee12:	nop    WORD PTR [rax+rax*1+0x0]
    ee18:	lea    rdx,[rdi+0x18]
    ee1c:	mov    rcx,rsi
    ee1f:	mov    rsi,QWORD PTR [rdi+0x8]
    ee23:	mov    rdi,QWORD PTR [rdi]
    ee26:	jmp    e950 <g_str_equal@plt+0x6598>
    ee2b:	nop    DWORD PTR [rax+rax*1+0x0]
    ee30:	lea    rdx,[rdi+0x18]
    ee34:	mov    rcx,rsi
    ee37:	mov    rsi,QWORD PTR [rdi+0x8]
    ee3b:	mov    rdi,QWORD PTR [rdi]
    ee3e:	jmp    eae0 <g_str_equal@plt+0x6728>
    ee43:	sub    rsp,0x8
    ee47:	call   79c0 <abort@plt>
    ee4c:	nop    DWORD PTR [rax+0x0]
    ee50:	push   r15
    ee52:	push   r14
    ee54:	mov    r14d,ecx
    ee57:	push   r13
    ee59:	push   r12
    ee5b:	mov    r13,rdx
    ee5e:	push   rbp
    ee5f:	push   rbx
    ee60:	mov    rbp,rdi
    ee63:	mov    r12,rsi
    ee66:	sub    rsp,0x28
    ee6a:	mov    rbx,QWORD PTR [rdi+0x8]
    ee6e:	mov    rax,QWORD PTR fs:0x28
    ee77:	mov    QWORD PTR [rsp+0x18],rax
    ee7c:	xor    eax,eax
    ee7e:	mov    QWORD PTR [rsp+0x8],r8
    ee83:	mov    QWORD PTR [rsp+0x10],0x0
    ee8c:	lea    rdi,[rbx+0x28]
    ee90:	call   e8f0 <g_str_equal@plt+0x6538>
    ee95:	test   rax,rax
    ee98:	mov    r15,rax
    ee9b:	je     ef60 <g_str_equal@plt+0x6ba8>
    eea1:	mov    edi,0x38
    eea6:	call   80c0 <g_malloc0@plt>
    eeab:	mov    rdi,r12
    eeae:	mov    rbx,rax
    eeb1:	call   7a50 <g_strdup@plt>
    eeb6:	test   r14b,r14b
    eeb9:	mov    QWORD PTR [rbx],rax
    eebc:	mov    QWORD PTR [rbx+0x20],rbp
    eec0:	jne    ef38 <g_str_equal@plt+0x6b80>
    eec2:	mov    rax,QWORD PTR [rbp+0x30]
    eec6:	mov    QWORD PTR [rbx+0x28],0x0
    eece:	mov    QWORD PTR [rbx+0x30],rax
    eed2:	mov    QWORD PTR [rax],rbx
    eed5:	lea    rax,[rbx+0x28]
    eed9:	mov    QWORD PTR [rbp+0x30],rax
    eedd:	lea    rsi,[rsp+0x10]
    eee2:	mov    QWORD PTR [rbx+0x10],r15
    eee6:	mov    QWORD PTR [rbx+0x8],r13
    eeea:	mov    rdi,rbx
    eeed:	call   ede0 <g_str_equal@plt+0x6a28>
    eef2:	mov    rsi,QWORD PTR [rsp+0x10]
    eef7:	test   rsi,rsi
    eefa:	je     ef0e <g_str_equal@plt+0x6b56>
    eefc:	mov    rdi,QWORD PTR [rsp+0x8]
    ef01:	call   df30 <g_str_equal@plt+0x5b78>
    ef06:	mov    rdi,rbx
    ef09:	call   e8a0 <g_str_equal@plt+0x64e8>
    ef0e:	mov    rax,QWORD PTR [rsp+0x18]
    ef13:	xor    rax,QWORD PTR fs:0x28
    ef1c:	jne    efae <g_str_equal@plt+0x6bf6>
    ef22:	add    rsp,0x28
    ef26:	pop    rbx
    ef27:	pop    rbp
    ef28:	pop    r12
    ef2a:	pop    r13
    ef2c:	pop    r14
    ef2e:	pop    r15
    ef30:	ret    
    ef31:	nop    DWORD PTR [rax+0x0]
    ef38:	mov    rax,QWORD PTR [rbp+0x28]
    ef3c:	lea    rcx,[rbx+0x28]
    ef40:	test   rax,rax
    ef43:	mov    QWORD PTR [rbx+0x28],rax
    ef47:	je     efa8 <g_str_equal@plt+0x6bf0>
    ef49:	mov    QWORD PTR [rax+0x30],rcx
    ef4d:	mov    QWORD PTR [rbp+0x28],rbx
    ef51:	add    rbp,0x28
    ef55:	mov    QWORD PTR [rbx+0x30],rbp
    ef59:	jmp    eedd <g_str_equal@plt+0x6b25>
    ef5b:	nop    DWORD PTR [rax+rax*1+0x0]
    ef60:	cmp    QWORD PTR [rbx+0x28],0x0
    ef65:	je     eea1 <g_str_equal@plt+0x6ae9>
    ef6b:	mov    rdi,r13
    ef6e:	call   7880 <g_free@plt>
    ef73:	mov    rdi,QWORD PTR [rsp+0x8]
    ef78:	lea    r8,[rip+0x1bb05]        # 2aa84 <_fini@@Base+0x1800>
    ef7f:	lea    rcx,[rip+0x1bd22]        # 2aca8 <_fini@@Base+0x1a24>
    ef86:	lea    rsi,[rip+0x1b80b]        # 2a798 <_fini@@Base+0x1514>
    ef8d:	mov    r9,r12
    ef90:	mov    edx,0x1f2
    ef95:	xor    eax,eax
    ef97:	call   db00 <g_str_equal@plt+0x5748>
    ef9c:	jmp    ef0e <g_str_equal@plt+0x6b56>
    efa1:	nop    DWORD PTR [rax+0x0]
    efa8:	mov    QWORD PTR [rbp+0x30],rcx
    efac:	jmp    ef4d <g_str_equal@plt+0x6b95>
    efae:	call   8050 <__stack_chk_fail@plt>
    efb3:	nop    DWORD PTR [rax]
    efb6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    efc0:	push   r15
    efc2:	push   r14
    efc4:	push   r13
    efc6:	push   r12
    efc8:	push   rbp
    efc9:	push   rbx
    efca:	sub    rsp,0x58
    efce:	mov    rax,QWORD PTR fs:0x28
    efd7:	mov    QWORD PTR [rsp+0x48],rax
    efdc:	xor    eax,eax
    efde:	cmp    BYTE PTR [rsi],0x0
    efe1:	mov    QWORD PTR [rsp+0x10],rdi
    efe6:	mov    QWORD PTR [rsp+0x28],r8
    efeb:	mov    BYTE PTR [rsp+0x1f],cl
    efef:	mov    QWORD PTR [rsp+0x30],0x0
    eff8:	mov    QWORD PTR [rsp+0x38],0x0
    f001:	mov    QWORD PTR [rsp+0x40],0x0
    f00a:	je     f230 <g_str_equal@plt+0x6e78>
    f010:	lea    rax,[rsp+0x38]
    f015:	mov    r13,rsi
    f018:	mov    r12,rdx
    f01b:	mov    rbx,rsi
    f01e:	lea    r15,[rsp+0x30]
    f023:	lea    rbp,[rip+0x1a395]        # 293bf <_fini@@Base+0x13b>
    f02a:	mov    QWORD PTR [rsp+0x8],rax
    f02f:	jmp    f075 <g_str_equal@plt+0x6cbd>
    f031:	nop    DWORD PTR [rax+0x0]
    f038:	cmp    BYTE PTR [r14],0x2c
    f03c:	jne    f140 <g_str_equal@plt+0x6d88>
    f042:	mov    rdi,r10
    f045:	lea    rbx,[r14+0x1]
    f049:	call   7880 <g_free@plt>
    f04e:	mov    rdi,QWORD PTR [rsp+0x38]
    f053:	call   7880 <g_free@plt>
    f058:	mov    QWORD PTR [rsp+0x38],0x0
    f061:	mov    QWORD PTR [rsp+0x30],0x0
    f06a:	cmp    BYTE PTR [r14+0x1],0x0
    f06f:	je     f230 <g_str_equal@plt+0x6e78>
    f075:	mov    esi,0x3d
    f07a:	mov    rdi,rbx
    f07d:	call   7f90 <strchr@plt>
    f082:	mov    esi,0x2c
    f087:	mov    r14,rax
    f08a:	mov    rdi,rbx
    f08d:	call   7f90 <strchr@plt>
    f092:	test   r14,r14
    f095:	je     f0a9 <g_str_equal@plt+0x6cf1>
    f097:	test   rax,rax
    f09a:	je     f1e8 <g_str_equal@plt+0x6e30>
    f0a0:	cmp    r14,rax
    f0a3:	jbe    f1e8 <g_str_equal@plt+0x6e30>
    f0a9:	cmp    r13,rbx
    f0ac:	jne    f178 <g_str_equal@plt+0x6dc0>
    f0b2:	test   r12,r12
    f0b5:	je     f178 <g_str_equal@plt+0x6dc0>
    f0bb:	mov    rdi,r12
    f0be:	call   7a50 <g_strdup@plt>
    f0c3:	mov    rsi,QWORD PTR [rsp+0x8]
    f0c8:	mov    rdi,rbx
    f0cb:	mov    QWORD PTR [rsp+0x30],rax
    f0d0:	call   ec30 <g_str_equal@plt+0x6878>
    f0d5:	mov    r14,rax
    f0d8:	mov    r10,QWORD PTR [rsp+0x30]
    f0dd:	mov    ecx,0x3
    f0e2:	mov    rdi,rbp
    f0e5:	mov    rsi,r10
    f0e8:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
    f0ea:	seta   al
    f0ed:	sbb    al,0x0
    f0ef:	test   al,al
    f0f1:	je     f038 <g_str_equal@plt+0x6c80>
    f0f7:	movzx  ecx,BYTE PTR [rsp+0x1f]
    f0fc:	mov    rdx,QWORD PTR [rsp+0x38]
    f101:	lea    r8,[rsp+0x40]
    f106:	mov    rdi,QWORD PTR [rsp+0x10]
    f10b:	mov    rsi,r10
    f10e:	call   ee50 <g_str_equal@plt+0x6a98>
    f113:	mov    rsi,QWORD PTR [rsp+0x40]
    f118:	mov    QWORD PTR [rsp+0x38],0x0
    f121:	test   rsi,rsi
    f124:	jne    f240 <g_str_equal@plt+0x6e88>
    f12a:	cmp    BYTE PTR [r14],0x2c
    f12e:	mov    r10,QWORD PTR [rsp+0x30]
    f133:	je     f042 <g_str_equal@plt+0x6c8a>
    f139:	nop    DWORD PTR [rax+0x0]
    f140:	mov    rdi,r10
    f143:	call   7880 <g_free@plt>
    f148:	mov    rdi,QWORD PTR [rsp+0x38]
    f14d:	call   7880 <g_free@plt>
    f152:	mov    rax,QWORD PTR [rsp+0x48]
    f157:	xor    rax,QWORD PTR fs:0x28
    f160:	jne    f273 <g_str_equal@plt+0x6ebb>
    f166:	add    rsp,0x58
    f16a:	pop    rbx
    f16b:	pop    rbp
    f16c:	pop    r12
    f16e:	pop    r13
    f170:	pop    r14
    f172:	pop    r15
    f174:	ret    
    f175:	nop    DWORD PTR [rax]
    f178:	mov    rdi,rbx
    f17b:	mov    rsi,r15
    f17e:	mov    edx,0x2c
    f183:	call   eb60 <g_str_equal@plt+0x67a8>
    f188:	mov    rbx,QWORD PTR [rsp+0x30]
    f18d:	lea    rdi,[rip+0x1b907]        # 2aa9b <_fini@@Base+0x1817>
    f194:	mov    ecx,0x2
    f199:	mov    r14,rax
    f19c:	mov    rsi,rbx
    f19f:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
    f1a1:	seta   al
    f1a4:	sbb    al,0x0
    f1a6:	test   al,al
    f1a8:	jne    f218 <g_str_equal@plt+0x6e60>
    f1aa:	lea    rsi,[rbx+0x2]
    f1ae:	mov    rdi,rsi
    f1b1:	mov    QWORD PTR [rsp+0x20],rsi
    f1b6:	call   7cd0 <strlen@plt>
    f1bb:	mov    rsi,QWORD PTR [rsp+0x20]
    f1c0:	lea    rdx,[rax+0x1]
    f1c4:	mov    rdi,rbx
    f1c7:	call   7f80 <memmove@plt>
    f1cc:	lea    rdi,[rip+0x1b89f]        # 2aa72 <_fini@@Base+0x17ee>
    f1d3:	call   7a50 <g_strdup@plt>
    f1d8:	mov    QWORD PTR [rsp+0x38],rax
    f1dd:	jmp    f0d8 <g_str_equal@plt+0x6d20>
    f1e2:	nop    WORD PTR [rax+rax*1+0x0]
    f1e8:	mov    edx,0x3d
    f1ed:	mov    rsi,r15
    f1f0:	mov    rdi,rbx
    f1f3:	call   eb60 <g_str_equal@plt+0x67a8>
    f1f8:	cmp    BYTE PTR [rax],0x3d
    f1fb:	jne    f254 <g_str_equal@plt+0x6e9c>
    f1fd:	mov    rsi,QWORD PTR [rsp+0x8]
    f202:	lea    rdi,[rax+0x1]
    f206:	call   ec30 <g_str_equal@plt+0x6878>
    f20b:	mov    r14,rax
    f20e:	jmp    f0d8 <g_str_equal@plt+0x6d20>
    f213:	nop    DWORD PTR [rax+rax*1+0x0]
    f218:	lea    rdi,[rip+0x1df71]        # 2d190 <_fini@@Base+0x3f0c>
    f21f:	call   7a50 <g_strdup@plt>
    f224:	mov    QWORD PTR [rsp+0x38],rax
    f229:	jmp    f0d8 <g_str_equal@plt+0x6d20>
    f22e:	xchg   ax,ax
    f230:	xor    r10d,r10d
    f233:	jmp    f140 <g_str_equal@plt+0x6d88>
    f238:	nop    DWORD PTR [rax+rax*1+0x0]
    f240:	mov    rdi,QWORD PTR [rsp+0x28]
    f245:	call   df30 <g_str_equal@plt+0x5b78>
    f24a:	mov    r10,QWORD PTR [rsp+0x30]
    f24f:	jmp    f140 <g_str_equal@plt+0x6d88>
    f254:	lea    rcx,[rip+0x1b9bd]        # 2ac18 <_fini@@Base+0x1994>
    f25b:	lea    rsi,[rip+0x1b536]        # 2a798 <_fini@@Base+0x1514>
    f262:	lea    rdi,[rip+0x1b835]        # 2aa9e <_fini@@Base+0x181a>
    f269:	mov    edx,0x30e
    f26e:	call   7a70 <__assert_fail@plt>
    f273:	call   8050 <__stack_chk_fail@plt>
    f278:	nop    DWORD PTR [rax+rax*1+0x0]
    f280:	push   r13
    f282:	push   r12
    f284:	mov    r8,rsi
    f287:	push   rbp
    f288:	push   rbx
    f289:	mov    rbx,rdi
    f28c:	lea    rdi,[rip+0x1a12c]        # 293bf <_fini@@Base+0x13b>
    f293:	mov    ecx,0x3
    f298:	mov    rsi,rbx
    f29b:	sub    rsp,0x38
    f29f:	mov    rax,QWORD PTR fs:0x28
    f2a8:	mov    QWORD PTR [rsp+0x28],rax
    f2ad:	xor    eax,eax
    f2af:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
    f2b1:	seta   al
    f2b4:	sbb    al,0x0
    f2b6:	test   al,al
    f2b8:	je     f2c7 <g_str_equal@plt+0x6f0f>
    f2ba:	mov    rax,QWORD PTR [rdx+0x8]
    f2be:	mov    rbp,rdx
    f2c1:	cmp    QWORD PTR [rax],0x0
    f2c5:	je     f2f0 <g_str_equal@plt+0x6f38>
    f2c7:	mov    rax,QWORD PTR [rsp+0x28]
    f2cc:	xor    rax,QWORD PTR fs:0x28
    f2d5:	jne    f398 <g_str_equal@plt+0x6fe0>
    f2db:	add    rsp,0x38
    f2df:	pop    rbx
    f2e0:	pop    rbp
    f2e1:	pop    r12
    f2e3:	pop    r13
    f2e5:	ret    
    f2e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    f2f0:	mov    eax,DWORD PTR [r8]
    f2f3:	lea    edx,[rax-0x1]
    f2f6:	cmp    edx,0x5
    f2f9:	ja     f39d <g_str_equal@plt+0x6fe5>
    f2ff:	cmp    eax,0x3
    f302:	je     f388 <g_str_equal@plt+0x6fd0>
    f308:	cmp    eax,0x6
    f30b:	je     f350 <g_str_equal@plt+0x6f98>
    f30d:	cmp    eax,0x2
    f310:	jne    f2c7 <g_str_equal@plt+0x6f0f>
    f312:	mov    rdi,r8
    f315:	call   11810 <g_str_equal@plt+0x9458>
    f31a:	mov    r12,rax
    f31d:	mov    rdi,rax
    f320:	mov    r13,QWORD PTR [rbp+0x8]
    f324:	mov    rbp,QWORD PTR [rbp+0x0]
    f328:	call   7a50 <g_strdup@plt>
    f32d:	xor    ecx,ecx
    f32f:	mov    rdx,rax
    f332:	mov    rsi,rbx
    f335:	mov    rdi,rbp
    f338:	mov    r8,r13
    f33b:	call   ee50 <g_str_equal@plt+0x6a98>
    f340:	mov    rdi,r12
    f343:	call   7880 <g_free@plt>
    f348:	jmp    f2c7 <g_str_equal@plt+0x6f0f>
    f34d:	nop    DWORD PTR [rax]
    f350:	mov    rdi,r8
    f353:	mov    r12,rsp
    f356:	call   128a0 <g_str_equal@plt+0xa4e8>
    f35b:	lea    rdx,[rip+0x1de2e]        # 2d190 <_fini@@Base+0x3f0c>
    f362:	test   al,al
    f364:	lea    rax,[rip+0x1b707]        # 2aa72 <_fini@@Base+0x17ee>
    f36b:	mov    rdi,r12
    f36e:	mov    esi,0x20
    f373:	cmove  rdx,rax
    f377:	call   a7d0 <g_str_equal@plt+0x2418>
    f37c:	mov    rdi,r12
    f37f:	xor    r12d,r12d
    f382:	jmp    f320 <g_str_equal@plt+0x6f68>
    f384:	nop    DWORD PTR [rax+0x0]
    f388:	mov    rdi,r8
    f38b:	xor    r12d,r12d
    f38e:	call   11d40 <g_str_equal@plt+0x9988>
    f393:	mov    rdi,rax
    f396:	jmp    f320 <g_str_equal@plt+0x6f68>
    f398:	call   8050 <__stack_chk_fail@plt>
    f39d:	lea    rcx,[rip+0x1b814]        # 2abb8 <_fini@@Base+0x1934>
    f3a4:	lea    rsi,[rip+0x1b4ed]        # 2a898 <_fini@@Base+0x1614>
    f3ab:	lea    rdi,[rip+0x1b52e]        # 2a8e0 <_fini@@Base+0x165c>
    f3b2:	mov    edx,0x7f
    f3b7:	call   7a70 <__assert_fail@plt>
    f3bc:	nop    DWORD PTR [rax+0x0]
    f3c0:	push   r15
    f3c2:	push   r14
    f3c4:	push   r13
    f3c6:	push   r12
    f3c8:	push   rbp
    f3c9:	push   rbx
    f3ca:	sub    rsp,0x18
    f3ce:	mov    rax,QWORD PTR fs:0x28
    f3d7:	mov    QWORD PTR [rsp+0x8],rax
    f3dc:	xor    eax,eax
    f3de:	cmp    BYTE PTR [rdi],0x0
    f3e1:	je     f4a0 <g_str_equal@plt+0x70e8>
    f3e7:	lea    rbp,[rip+0x1b6ba]        # 2aaa8 <_fini@@Base+0x1824>
    f3ee:	lea    r13,[rip+0x1b6b5]        # 2aaaa <_fini@@Base+0x1826>
    f3f5:	mov    rbx,rdi
    f3f8:	mov    r12,rsp
    f3fb:	mov    rdi,rbx
    f3fe:	mov    rsi,r12
    f401:	call   ec30 <g_str_equal@plt+0x6878>
    f406:	mov    rdx,QWORD PTR [rsp]
    f40a:	cmp    BYTE PTR [rax],0x1
    f40d:	mov    rbx,rax
    f410:	mov    ecx,0x2
    f415:	mov    rdi,rbp
    f418:	mov    rsi,rdx
    f41b:	sbb    rbx,0xffffffffffffffff
    f41f:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
    f421:	seta   al
    f424:	sbb    al,0x0
    f426:	test   al,al
    f428:	je     f468 <g_str_equal@plt+0x70b0>
    f42a:	mov    ecx,0x5
    f42f:	mov    rsi,rdx
    f432:	mov    rdi,r13
    f435:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
    f437:	mov    rdi,rdx
    f43a:	seta   r14b
    f43e:	sbb    r14b,0x0
    f442:	movsx  r14d,r14b
    f446:	test   r14d,r14d
    f449:	sete   r15b
    f44d:	call   7880 <g_free@plt>
    f452:	cmp    BYTE PTR [rbx],0x0
    f455:	je     f476 <g_str_equal@plt+0x70be>
    f457:	test   r14d,r14d
    f45a:	jne    f3fb <g_str_equal@plt+0x7043>
    f45c:	mov    r15d,0x1
    f462:	jmp    f476 <g_str_equal@plt+0x70be>
    f464:	nop    DWORD PTR [rax+0x0]
    f468:	mov    rdi,rdx
    f46b:	mov    r15d,0x1
    f471:	call   7880 <g_free@plt>
    f476:	mov    rcx,QWORD PTR [rsp+0x8]
    f47b:	xor    rcx,QWORD PTR fs:0x28
    f484:	mov    eax,r15d
    f487:	jne    f4a5 <g_str_equal@plt+0x70ed>
    f489:	add    rsp,0x18
    f48d:	pop    rbx
    f48e:	pop    rbp
    f48f:	pop    r12
    f491:	pop    r13
    f493:	pop    r14
    f495:	pop    r15
    f497:	ret    
    f498:	nop    DWORD PTR [rax+rax*1+0x0]
    f4a0:	xor    r15d,r15d
    f4a3:	jmp    f476 <g_str_equal@plt+0x70be>
    f4a5:	call   8050 <__stack_chk_fail@plt>
    f4aa:	nop    WORD PTR [rax+rax*1+0x0]
    f4b0:	push   rbp
    f4b1:	push   rbx
    f4b2:	sub    rsp,0x18
    f4b6:	mov    rax,QWORD PTR fs:0x28
    f4bf:	mov    QWORD PTR [rsp+0x8],rax
    f4c4:	xor    eax,eax
    f4c6:	cmp    BYTE PTR [rdi],0x0
    f4c9:	mov    QWORD PTR [rsp],0x0
    f4d1:	je     f521 <g_str_equal@plt+0x7169>
    f4d3:	mov    rbx,rdi
    f4d6:	mov    rbp,rsp
    f4d9:	nop    DWORD PTR [rax+0x0]
    f4e0:	mov    rdi,rbx
    f4e3:	mov    rsi,rbp
    f4e6:	call   ec30 <g_str_equal@plt+0x6878>
    f4eb:	cmp    BYTE PTR [rax],0x0
    f4ee:	mov    rbx,rax
    f4f1:	je     f500 <g_str_equal@plt+0x7148>
    f4f3:	cmp    BYTE PTR [rbx+0x1],0x0
    f4f7:	lea    rax,[rax+0x1]
    f4fb:	je     f558 <g_str_equal@plt+0x71a0>
    f4fd:	mov    rbx,rax
    f500:	mov    rdi,QWORD PTR [rsp]
    f504:	movzx  eax,BYTE PTR [rdi]
    f507:	test   al,al
    f509:	je     f550 <g_str_equal@plt+0x7198>
    f50b:	cmp    al,0x2c
    f50d:	je     f550 <g_str_equal@plt+0x7198>
    f50f:	call   7880 <g_free@plt>
    f514:	mov    QWORD PTR [rsp],0x0
    f51c:	cmp    BYTE PTR [rbx],0x0
    f51f:	jne    f4e0 <g_str_equal@plt+0x7128>
    f521:	xor    edi,edi
    f523:	mov    ebx,0x1
    f528:	call   7880 <g_free@plt>
    f52d:	mov    rdx,QWORD PTR [rsp+0x8]
    f532:	xor    rdx,QWORD PTR fs:0x28
    f53b:	mov    eax,ebx
    f53d:	jne    f560 <g_str_equal@plt+0x71a8>
    f53f:	add    rsp,0x18
    f543:	pop    rbx
    f544:	pop    rbp
    f545:	ret    
    f546:	nop    WORD PTR cs:[rax+rax*1+0x0]
    f550:	xor    ebx,ebx
    f552:	jmp    f528 <g_str_equal@plt+0x7170>
    f554:	nop    DWORD PTR [rax+0x0]
    f558:	mov    rdi,QWORD PTR [rsp]
    f55c:	xor    ebx,ebx
    f55e:	jmp    f528 <g_str_equal@plt+0x7170>
    f560:	call   8050 <__stack_chk_fail@plt>
    f565:	nop
    f566:	nop    WORD PTR cs:[rax+rax*1+0x0]
    f570:	push   rbp
    f571:	push   rbx
    f572:	sub    rsp,0x8
    f576:	test   rdi,rdi
    f579:	je     f5c3 <g_str_equal@plt+0x720b>
    f57b:	lea    rbx,[rdi+0x28]
    f57f:	lea    rbp,[rip+0x1b529]        # 2aaaf <_fini@@Base+0x182b>
    f586:	nop    WORD PTR cs:[rax+rax*1+0x0]
    f590:	mov    rdx,QWORD PTR [rbx]
    f593:	test   rdx,rdx
    f596:	je     f5bc <g_str_equal@plt+0x7204>
    f598:	mov    rcx,QWORD PTR [rbx+0x10]
    f59c:	lea    rsi,[rip+0x1b525]        # 2aac8 <_fini@@Base+0x1844>
    f5a3:	mov    edi,0x1
    f5a8:	test   rcx,rcx
    f5ab:	cmove  rcx,rbp
    f5af:	xor    eax,eax
    f5b1:	call   7a80 <__printf_chk@plt>
    f5b6:	add    rbx,0x20
    f5ba:	jne    f590 <g_str_equal@plt+0x71d8>
    f5bc:	add    rsp,0x8
    f5c0:	pop    rbx
    f5c1:	pop    rbp
    f5c2:	ret    
    f5c3:	lea    rcx,[rip+0x1b796]        # 2ad60 <_fini@@Base+0x1adc>
    f5ca:	lea    rsi,[rip+0x1b1c7]        # 2a798 <_fini@@Base+0x1514>
    f5d1:	lea    rdi,[rip+0x1f43e]        # 2ea16 <_fini@@Base+0x5792>
    f5d8:	mov    edx,0xd7
    f5dd:	call   7a70 <__assert_fail@plt>
    f5e2:	nop    DWORD PTR [rax+0x0]
    f5e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    f5f0:	push   rbp
    f5f1:	push   rbx
    f5f2:	sub    rsp,0x8
    f5f6:	mov    rax,QWORD PTR [rdi+0x30]
    f5fa:	mov    rax,QWORD PTR [rax+0x8]
    f5fe:	mov    rbx,QWORD PTR [rax]
    f601:	test   rbx,rbx
    f604:	je     f618 <g_str_equal@plt+0x7260>
    f606:	mov    rbp,rsi
    f609:	mov    rdi,QWORD PTR [rbx]
    f60c:	mov    rsi,rbp
    f60f:	call   8060 <strcmp@plt>
    f614:	test   eax,eax
    f616:	jne    f628 <g_str_equal@plt+0x7270>
    f618:	add    rsp,0x8
    f61c:	mov    rax,rbx
    f61f:	pop    rbx
    f620:	pop    rbp
    f621:	ret    
    f622:	nop    WORD PTR [rax+rax*1+0x0]
    f628:	mov    rax,QWORD PTR [rbx+0x30]
    f62c:	mov    rax,QWORD PTR [rax+0x8]
    f630:	mov    rbx,QWORD PTR [rax]
    f633:	test   rbx,rbx
    f636:	jne    f609 <g_str_equal@plt+0x7251>
    f638:	jmp    f618 <g_str_equal@plt+0x7260>
    f63a:	nop    WORD PTR [rax+rax*1+0x0]
    f640:	push   r13
    f642:	push   r12
    f644:	push   rbp
    f645:	push   rbx
    f646:	sub    rsp,0x18
    f64a:	mov    rax,QWORD PTR fs:0x28
    f653:	mov    QWORD PTR [rsp+0x8],rax
    f658:	xor    eax,eax
    f65a:	test   rdi,rdi
    f65d:	mov    BYTE PTR [rsp+0x7],dl
    f661:	je     f6c0 <g_str_equal@plt+0x7308>
    f663:	mov    rbx,rdi
    f666:	mov    rbp,rsi
    f669:	mov    r12d,ecx
    f66c:	mov    r13d,edx
    f66f:	call   f5f0 <g_str_equal@plt+0x7238>
    f674:	test   rax,rax
    f677:	je     f6c8 <g_str_equal@plt+0x7310>
    f679:	mov    rdx,QWORD PTR [rax+0x10]
    f67d:	test   rdx,rdx
    f680:	je     f71e <g_str_equal@plt+0x7366>
    f686:	cmp    DWORD PTR [rdx+0x8],0x1
    f68a:	jne    f71e <g_str_equal@plt+0x7366>
    f690:	movzx  eax,BYTE PTR [rax+0x18]
    f694:	test   r12b,r12b
    f697:	mov    BYTE PTR [rsp+0x7],al
    f69b:	jne    f708 <g_str_equal@plt+0x7350>
    f69d:	mov    rcx,QWORD PTR [rsp+0x8]
    f6a2:	xor    rcx,QWORD PTR fs:0x28
    f6ab:	jne    f73d <g_str_equal@plt+0x7385>
    f6b1:	add    rsp,0x18
    f6b5:	pop    rbx
    f6b6:	pop    rbp
    f6b7:	pop    r12
    f6b9:	pop    r13
    f6bb:	ret    
    f6bc:	nop    DWORD PTR [rax+0x0]
    f6c0:	mov    eax,edx
    f6c2:	jmp    f69d <g_str_equal@plt+0x72e5>
    f6c4:	nop    DWORD PTR [rax+0x0]
    f6c8:	mov    rdi,QWORD PTR [rbx+0x8]
    f6cc:	mov    rsi,rbp
    f6cf:	add    rdi,0x28
    f6d3:	call   e8f0 <g_str_equal@plt+0x6538>
    f6d8:	test   rax,rax
    f6db:	je     f700 <g_str_equal@plt+0x7348>
    f6dd:	mov    rsi,QWORD PTR [rax+0x18]
    f6e1:	test   rsi,rsi
    f6e4:	je     f700 <g_str_equal@plt+0x7348>
    f6e6:	lea    rdx,[rsp+0x7]
    f6eb:	lea    rcx,[rip+0x23160e]        # 240d00 <stdout@@GLIBC_2.2.5+0x1058>
    f6f2:	mov    rdi,rbp
    f6f5:	call   eae0 <g_str_equal@plt+0x6728>
    f6fa:	movzx  r13d,BYTE PTR [rsp+0x7]
    f700:	mov    eax,r13d
    f703:	jmp    f69d <g_str_equal@plt+0x72e5>
    f705:	nop    DWORD PTR [rax]
    f708:	mov    rdi,QWORD PTR [rbx+0x28]
    f70c:	mov    rsi,rbp
    f70f:	call   ea80 <g_str_equal@plt+0x66c8>
    f714:	movzx  eax,BYTE PTR [rsp+0x7]
    f719:	jmp    f69d <g_str_equal@plt+0x72e5>
    f71e:	lea    rcx,[rip+0x1b61b]        # 2ad40 <_fini@@Base+0x1abc>
    f725:	lea    rsi,[rip+0x1b06c]        # 2a798 <_fini@@Base+0x1514>
    f72c:	lea    rdi,[rip+0x1b1ed]        # 2a920 <_fini@@Base+0x169c>
    f733:	mov    edx,0x162
    f738:	call   7a70 <__assert_fail@plt>
    f73d:	call   8050 <__stack_chk_fail@plt>
    f742:	nop    DWORD PTR [rax+0x0]
    f746:	nop    WORD PTR cs:[rax+rax*1+0x0]
    f750:	push   r13
    f752:	push   r12
    f754:	push   rbp
    f755:	push   rbx
    f756:	mov    rbx,rdx
    f759:	sub    rsp,0x18
    f75d:	mov    rax,QWORD PTR fs:0x28
    f766:	mov    QWORD PTR [rsp+0x8],rax
    f76b:	xor    eax,eax
    f76d:	test   rdi,rdi
    f770:	mov    QWORD PTR [rsp],rdx
    f774:	je     f7f8 <g_str_equal@plt+0x7440>
    f77a:	mov    rbp,rdi
    f77d:	mov    r12,rsi
    f780:	mov    r13d,ecx
    f783:	call   f5f0 <g_str_equal@plt+0x7238>
    f788:	test   rax,rax
    f78b:	je     f7c0 <g_str_equal@plt+0x7408>
    f78d:	mov    rdx,QWORD PTR [rax+0x10]
    f791:	test   rdx,rdx
    f794:	je     f81b <g_str_equal@plt+0x7463>
    f79a:	cmp    DWORD PTR [rdx+0x8],0x2
    f79e:	jne    f81b <g_str_equal@plt+0x7463>
    f7a0:	mov    rax,QWORD PTR [rax+0x18]
    f7a4:	test   r13b,r13b
    f7a7:	mov    QWORD PTR [rsp],rax
    f7ab:	je     f7fb <g_str_equal@plt+0x7443>
    f7ad:	mov    rdi,QWORD PTR [rbp+0x28]
    f7b1:	mov    rsi,r12
    f7b4:	call   ea80 <g_str_equal@plt+0x66c8>
    f7b9:	mov    rax,QWORD PTR [rsp]
    f7bd:	jmp    f7fb <g_str_equal@plt+0x7443>
    f7bf:	nop
    f7c0:	mov    rdi,QWORD PTR [rbp+0x8]
    f7c4:	mov    rsi,r12
    f7c7:	add    rdi,0x28
    f7cb:	call   e8f0 <g_str_equal@plt+0x6538>
    f7d0:	test   rax,rax
    f7d3:	je     f7f8 <g_str_equal@plt+0x7440>
    f7d5:	mov    rsi,QWORD PTR [rax+0x18]
    f7d9:	test   rsi,rsi
    f7dc:	je     f7f8 <g_str_equal@plt+0x7440>
    f7de:	lea    rcx,[rip+0x23151b]        # 240d00 <stdout@@GLIBC_2.2.5+0x1058>
    f7e5:	mov    rdx,rsp
    f7e8:	mov    rdi,r12
    f7eb:	call   e950 <g_str_equal@plt+0x6598>
    f7f0:	mov    rbx,QWORD PTR [rsp]
    f7f4:	nop    DWORD PTR [rax+0x0]
    f7f8:	mov    rax,rbx
    f7fb:	mov    rcx,QWORD PTR [rsp+0x8]
    f800:	xor    rcx,QWORD PTR fs:0x28
    f809:	jne    f816 <g_str_equal@plt+0x745e>
    f80b:	add    rsp,0x18
    f80f:	pop    rbx
    f810:	pop    rbp
    f811:	pop    r12
    f813:	pop    r13
    f815:	ret    
    f816:	call   8050 <__stack_chk_fail@plt>
    f81b:	lea    rcx,[rip+0x1b4de]        # 2ad00 <_fini@@Base+0x1a7c>
    f822:	lea    rsi,[rip+0x1af6f]        # 2a798 <_fini@@Base+0x1514>
    f829:	lea    rdi,[rip+0x1b120]        # 2a950 <_fini@@Base+0x16cc>
    f830:	mov    edx,0x186
    f835:	call   7a70 <__assert_fail@plt>
    f83a:	nop    WORD PTR [rax+rax*1+0x0]
    f840:	push   r13
    f842:	push   r12
    f844:	push   rbp
    f845:	push   rbx
    f846:	mov    rbx,rdx
    f849:	sub    rsp,0x18
    f84d:	mov    rax,QWORD PTR fs:0x28
    f856:	mov    QWORD PTR [rsp+0x8],rax
    f85b:	xor    eax,eax
    f85d:	test   rdi,rdi
    f860:	mov    QWORD PTR [rsp],rdx
    f864:	je     f8e8 <g_str_equal@plt+0x7530>
    f86a:	mov    rbp,rdi
    f86d:	mov    r12,rsi
    f870:	mov    r13d,ecx
    f873:	call   f5f0 <g_str_equal@plt+0x7238>
    f878:	test   rax,rax
    f87b:	je     f8b0 <g_str_equal@plt+0x74f8>
    f87d:	mov    rdx,QWORD PTR [rax+0x10]
    f881:	test   rdx,rdx
    f884:	je     f90b <g_str_equal@plt+0x7553>
    f88a:	cmp    DWORD PTR [rdx+0x8],0x3
    f88e:	jne    f90b <g_str_equal@plt+0x7553>
    f890:	mov    rax,QWORD PTR [rax+0x18]
    f894:	test   r13b,r13b
    f897:	mov    QWORD PTR [rsp],rax
    f89b:	je     f8eb <g_str_equal@plt+0x7533>
    f89d:	mov    rdi,QWORD PTR [rbp+0x28]
    f8a1:	mov    rsi,r12
    f8a4:	call   ea80 <g_str_equal@plt+0x66c8>
    f8a9:	mov    rax,QWORD PTR [rsp]
    f8ad:	jmp    f8eb <g_str_equal@plt+0x7533>
    f8af:	nop
    f8b0:	mov    rdi,QWORD PTR [rbp+0x8]
    f8b4:	mov    rsi,r12
    f8b7:	add    rdi,0x28
    f8bb:	call   e8f0 <g_str_equal@plt+0x6538>
    f8c0:	test   rax,rax
    f8c3:	je     f8e8 <g_str_equal@plt+0x7530>
    f8c5:	mov    rsi,QWORD PTR [rax+0x18]
    f8c9:	test   rsi,rsi
    f8cc:	je     f8e8 <g_str_equal@plt+0x7530>
    f8ce:	lea    rcx,[rip+0x23142b]        # 240d00 <stdout@@GLIBC_2.2.5+0x1058>
    f8d5:	mov    rdx,rsp
    f8d8:	mov    rdi,r12
    f8db:	call   ecf0 <g_str_equal@plt+0x6938>
    f8e0:	mov    rbx,QWORD PTR [rsp]
    f8e4:	nop    DWORD PTR [rax+0x0]
    f8e8:	mov    rax,rbx
    f8eb:	mov    rcx,QWORD PTR [rsp+0x8]
    f8f0:	xor    rcx,QWORD PTR fs:0x28
    f8f9:	jne    f906 <g_str_equal@plt+0x754e>
    f8fb:	add    rsp,0x18
    f8ff:	pop    rbx
    f900:	pop    rbp
    f901:	pop    r12
    f903:	pop    r13
    f905:	ret    
    f906:	call   8050 <__stack_chk_fail@plt>
    f90b:	lea    rcx,[rip+0x1b3ae]        # 2acc0 <_fini@@Base+0x1a3c>
    f912:	lea    rsi,[rip+0x1ae7f]        # 2a798 <_fini@@Base+0x1514>
    f919:	lea    rdi,[rip+0x1b060]        # 2a980 <_fini@@Base+0x16fc>
    f920:	mov    edx,0x1ab
    f925:	call   7a70 <__assert_fail@plt>
    f92a:	nop    WORD PTR [rax+rax*1+0x0]
    f930:	test   rdi,rdi
    f933:	je     f988 <g_str_equal@plt+0x75d0>
    f935:	push   rbp
    f936:	push   rbx
    f937:	mov    rbp,rsi
    f93a:	mov    rbx,rdi
    f93d:	sub    rsp,0x8
    f941:	call   f5f0 <g_str_equal@plt+0x7238>
    f946:	test   rax,rax
    f949:	je     f960 <g_str_equal@plt+0x75a8>
    f94b:	mov    rax,QWORD PTR [rax+0x8]
    f94f:	add    rsp,0x8
    f953:	pop    rbx
    f954:	pop    rbp
    f955:	ret    
    f956:	nop    WORD PTR cs:[rax+rax*1+0x0]
    f960:	mov    rdi,QWORD PTR [rbx+0x8]
    f964:	mov    rsi,rbp
    f967:	add    rdi,0x28
    f96b:	call   e8f0 <g_str_equal@plt+0x6538>
    f970:	mov    rdx,rax
    f973:	xor    eax,eax
    f975:	test   rdx,rdx
    f978:	je     f94f <g_str_equal@plt+0x7597>
    f97a:	mov    rax,QWORD PTR [rdx+0x18]
    f97e:	add    rsp,0x8
    f982:	pop    rbx
    f983:	pop    rbp
    f984:	ret    
    f985:	nop    DWORD PTR [rax]
    f988:	xor    eax,eax
    f98a:	ret    
    f98b:	nop    DWORD PTR [rax+rax*1+0x0]
    f990:	mov    QWORD PTR [rdi],rsi
    f993:	mov    rax,QWORD PTR [rsi+0x28]
    f997:	mov    QWORD PTR [rdi+0x10],rdx
    f99b:	mov    QWORD PTR [rdi+0x8],rax
    f99f:	ret    
    f9a0:	push   rbp
    f9a1:	push   rbx
    f9a2:	mov    rbp,rdi
    f9a5:	sub    rsp,0x8
    f9a9:	mov    rbx,QWORD PTR [rdi+0x8]
    f9ad:	mov    rdi,QWORD PTR [rdi+0x10]
    f9b1:	test   rdi,rdi
    f9b4:	je     f9f0 <g_str_equal@plt+0x7638>
    f9b6:	test   rbx,rbx
    f9b9:	jne    f9cd <g_str_equal@plt+0x7615>
    f9bb:	jmp    f9f5 <g_str_equal@plt+0x763d>
    f9bd:	nop    DWORD PTR [rax]
    f9c0:	mov    rbx,QWORD PTR [rbx+0x28]
    f9c4:	test   rbx,rbx
    f9c7:	je     f9f5 <g_str_equal@plt+0x763d>
    f9c9:	mov    rdi,QWORD PTR [rbp+0x10]
    f9cd:	mov    rsi,QWORD PTR [rbx]
    f9d0:	call   83b8 <g_str_equal@plt>
    f9d5:	test   eax,eax
    f9d7:	je     f9c0 <g_str_equal@plt+0x7608>
    f9d9:	mov    rax,QWORD PTR [rbx+0x28]
    f9dd:	mov    QWORD PTR [rbp+0x8],rax
    f9e1:	mov    rax,QWORD PTR [rbx+0x8]
    f9e5:	add    rsp,0x8
    f9e9:	pop    rbx
    f9ea:	pop    rbp
    f9eb:	ret    
    f9ec:	nop    DWORD PTR [rax+0x0]
    f9f0:	test   rbx,rbx
    f9f3:	jne    f9d9 <g_str_equal@plt+0x7621>
    f9f5:	mov    QWORD PTR [rbp+0x8],0x0
    f9fd:	add    rsp,0x8
    fa01:	xor    eax,eax
    fa03:	pop    rbx
    fa04:	pop    rbp
    fa05:	ret    
    fa06:	nop    WORD PTR cs:[rax+rax*1+0x0]
    fa10:	test   rdi,rdi
    fa13:	push   r12
    fa15:	push   rbp
    fa16:	push   rbx
    fa17:	je     fa80 <g_str_equal@plt+0x76c8>
    fa19:	mov    rbp,rsi
    fa1c:	mov    rbx,rdi
    fa1f:	call   f5f0 <g_str_equal@plt+0x7238>
    fa24:	test   rax,rax
    fa27:	je     fa50 <g_str_equal@plt+0x7698>
    fa29:	mov    r12,QWORD PTR [rax+0x8]
    fa2d:	mov    QWORD PTR [rax+0x8],0x0
    fa35:	mov    rsi,rbp
    fa38:	mov    rdi,QWORD PTR [rbx+0x28]
    fa3c:	call   ea80 <g_str_equal@plt+0x66c8>
    fa41:	mov    rax,r12
    fa44:	pop    rbx
    fa45:	pop    rbp
    fa46:	pop    r12
    fa48:	ret    
    fa49:	nop    DWORD PTR [rax+0x0]
    fa50:	mov    rdi,QWORD PTR [rbx+0x8]
    fa54:	mov    rsi,rbp
    fa57:	add    rdi,0x28
    fa5b:	call   e8f0 <g_str_equal@plt+0x6538>
    fa60:	test   rax,rax
    fa63:	je     fa80 <g_str_equal@plt+0x76c8>
    fa65:	mov    rdi,QWORD PTR [rax+0x18]
    fa69:	test   rdi,rdi
    fa6c:	je     fa80 <g_str_equal@plt+0x76c8>
    fa6e:	pop    rbx
    fa6f:	pop    rbp
    fa70:	pop    r12
    fa72:	jmp    7a50 <g_strdup@plt>
    fa77:	nop    WORD PTR [rax+rax*1+0x0]
    fa80:	xor    r12d,r12d
    fa83:	mov    rax,r12
    fa86:	pop    rbx
    fa87:	pop    rbp
    fa88:	pop    r12
    fa8a:	ret    
    fa8b:	nop    DWORD PTR [rax+rax*1+0x0]
    fa90:	mov    rax,QWORD PTR [rdi+0x30]
    fa94:	mov    rax,QWORD PTR [rax+0x8]
    fa98:	mov    rax,QWORD PTR [rax]
    fa9b:	test   rax,rax
    fa9e:	je     fb08 <g_str_equal@plt+0x7750>
    faa0:	lea    r9,[rip+0x1b001]        # 2aaa8 <_fini@@Base+0x1824>
    faa7:	lea    r10,[rip+0x1affc]        # 2aaaa <_fini@@Base+0x1826>
    faae:	jmp    fad7 <g_str_equal@plt+0x771f>
    fab0:	mov    ecx,0x5
    fab5:	mov    rsi,r8
    fab8:	mov    rdi,r10
    fabb:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
    fabd:	seta   dl
    fac0:	sbb    dl,0x0
    fac3:	test   dl,dl
    fac5:	je     faf1 <g_str_equal@plt+0x7739>
    fac7:	mov    rax,QWORD PTR [rax+0x30]
    facb:	mov    rax,QWORD PTR [rax+0x8]
    facf:	mov    rax,QWORD PTR [rax]
    fad2:	test   rax,rax
    fad5:	je     fb00 <g_str_equal@plt+0x7748>
    fad7:	mov    r8,QWORD PTR [rax]
    fada:	mov    ecx,0x2
    fadf:	mov    rdi,r9
    fae2:	mov    rsi,r8
    fae5:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
    fae7:	seta   dl
    faea:	sbb    dl,0x0
    faed:	test   dl,dl
    faef:	jne    fab0 <g_str_equal@plt+0x76f8>
    faf1:	mov    eax,0x1
    faf6:	ret    
    faf7:	nop    WORD PTR [rax+rax*1+0x0]
    fb00:	repz ret 
    fb02:	nop    WORD PTR [rax+rax*1+0x0]
    fb08:	xor    eax,eax
    fb0a:	ret    
    fb0b:	nop    DWORD PTR [rax+rax*1+0x0]
    fb10:	movzx  edx,dl
    fb13:	xor    ecx,ecx
    fb15:	jmp    f640 <g_str_equal@plt+0x7288>
    fb1a:	nop    WORD PTR [rax+rax*1+0x0]
    fb20:	movzx  edx,dl
    fb23:	mov    ecx,0x1
    fb28:	jmp    f640 <g_str_equal@plt+0x7288>
    fb2d:	nop    DWORD PTR [rax]
    fb30:	xor    ecx,ecx
    fb32:	jmp    f750 <g_str_equal@plt+0x7398>
    fb37:	nop    WORD PTR [rax+rax*1+0x0]
    fb40:	mov    ecx,0x1
    fb45:	jmp    f750 <g_str_equal@plt+0x7398>
    fb4a:	nop    WORD PTR [rax+rax*1+0x0]
    fb50:	xor    ecx,ecx
    fb52:	jmp    f840 <g_str_equal@plt+0x7488>
    fb57:	nop    WORD PTR [rax+rax*1+0x0]
    fb60:	mov    ecx,0x1
    fb65:	jmp    f840 <g_str_equal@plt+0x7488>
    fb6a:	nop    WORD PTR [rax+rax*1+0x0]
    fb70:	push   rbx
    fb71:	mov    rbx,rdi
    fb74:	call   f5f0 <g_str_equal@plt+0x7238>
    fb79:	mov    rdx,QWORD PTR [rbx+0x8]
    fb7d:	cmp    QWORD PTR [rdx+0x28],0x0
    fb82:	jne    fb9f <g_str_equal@plt+0x77e7>
    fb84:	test   rax,rax
    fb87:	je     fb98 <g_str_equal@plt+0x77e0>
    fb89:	mov    rdi,rax
    fb8c:	call   e8a0 <g_str_equal@plt+0x64e8>
    fb91:	xor    eax,eax
    fb93:	pop    rbx
    fb94:	ret    
    fb95:	nop    DWORD PTR [rax]
    fb98:	mov    eax,0xffffffff
    fb9d:	pop    rbx
    fb9e:	ret    
    fb9f:	lea    rcx,[rip+0x1b10a]        # 2acb0 <_fini@@Base+0x1a2c>
    fba6:	lea    rsi,[rip+0x1abeb]        # 2a798 <_fini@@Base+0x1514>
    fbad:	lea    rdi,[rip+0x1af1e]        # 2aad2 <_fini@@Base+0x184e>
    fbb4:	mov    edx,0x1de
    fbb9:	call   7a70 <__assert_fail@plt>
    fbbe:	xchg   ax,ax
    fbc0:	push   r12
    fbc2:	push   rbp
    fbc3:	mov    r12,rcx
    fbc6:	push   rbx
    fbc7:	mov    rbp,rsi
    fbca:	mov    rbx,rdi
    fbcd:	mov    rdi,rdx
    fbd0:	call   7a50 <g_strdup@plt>
    fbd5:	mov    r8,r12
    fbd8:	mov    rsi,rbp
    fbdb:	mov    rdi,rbx
    fbde:	pop    rbx
    fbdf:	pop    rbp
    fbe0:	pop    r12
    fbe2:	xor    ecx,ecx
    fbe4:	mov    rdx,rax
    fbe7:	jmp    ee50 <g_str_equal@plt+0x6a98>
    fbec:	nop    DWORD PTR [rax+0x0]
    fbf0:	push   r15
    fbf2:	push   r14
    fbf4:	mov    r15,rcx
    fbf7:	push   r13
    fbf9:	push   r12
    fbfb:	mov    r13,rsi
    fbfe:	push   rbp
    fbff:	push   rbx
    fc00:	mov    rbp,rdi
    fc03:	mov    r14d,edx
    fc06:	sub    rsp,0x8
    fc0a:	mov    rax,QWORD PTR [rdi+0x8]
    fc0e:	mov    edi,0x38
    fc13:	lea    r12,[rax+0x28]
    fc17:	call   80c0 <g_malloc0@plt>
    fc1c:	mov    rsi,r13
    fc1f:	mov    rdi,r12
    fc22:	mov    rbx,rax
    fc25:	call   e8f0 <g_str_equal@plt+0x6538>
    fc2a:	test   rax,rax
    fc2d:	mov    QWORD PTR [rbx+0x10],rax
    fc31:	je     fc90 <g_str_equal@plt+0x78d8>
    fc33:	mov    rdi,r13
    fc36:	call   7a50 <g_strdup@plt>
    fc3b:	lea    rdi,[rip+0x1d54e]        # 2d190 <_fini@@Base+0x3f0c>
    fc42:	mov    QWORD PTR [rbx],rax
    fc45:	lea    rax,[rip+0x1ae26]        # 2aa72 <_fini@@Base+0x17ee>
    fc4c:	test   r14b,r14b
    fc4f:	mov    QWORD PTR [rbx+0x20],rbp
    fc53:	mov    BYTE PTR [rbx+0x18],r14b
    fc57:	cmove  rdi,rax
    fc5b:	call   7a50 <g_strdup@plt>
    fc60:	mov    QWORD PTR [rbx+0x8],rax
    fc64:	mov    rax,QWORD PTR [rbp+0x30]
    fc68:	mov    QWORD PTR [rbx+0x28],0x0
    fc70:	mov    QWORD PTR [rbx+0x30],rax
    fc74:	mov    QWORD PTR [rax],rbx
    fc77:	add    rbx,0x28
    fc7b:	mov    QWORD PTR [rbp+0x30],rbx
    fc7f:	add    rsp,0x8
    fc83:	pop    rbx
    fc84:	pop    rbp
    fc85:	pop    r12
    fc87:	pop    r13
    fc89:	pop    r14
    fc8b:	pop    r15
    fc8d:	ret    
    fc8e:	xchg   ax,ax
    fc90:	mov    rax,QWORD PTR [rbp+0x8]
    fc94:	cmp    QWORD PTR [rax+0x28],0x0
    fc99:	je     fc33 <g_str_equal@plt+0x787b>
    fc9b:	lea    r8,[rip+0x1ade2]        # 2aa84 <_fini@@Base+0x1800>
    fca2:	lea    rcx,[rip+0x1afe7]        # 2ac90 <_fini@@Base+0x1a0c>
    fca9:	lea    rsi,[rip+0x1aae8]        # 2a798 <_fini@@Base+0x1514>
    fcb0:	mov    rdi,r15
    fcb3:	mov    r9,r13
    fcb6:	mov    edx,0x216
    fcbb:	xor    eax,eax
    fcbd:	call   db00 <g_str_equal@plt+0x5748>
    fcc2:	add    rsp,0x8
    fcc6:	mov    rdi,rbx
    fcc9:	pop    rbx
    fcca:	pop    rbp
    fccb:	pop    r12
    fccd:	pop    r13
    fccf:	pop    r14
    fcd1:	pop    r15
    fcd3:	jmp    7880 <g_free@plt>
    fcd8:	nop    DWORD PTR [rax+rax*1+0x0]
    fce0:	push   r15
    fce2:	push   r14
    fce4:	mov    r15,rcx
    fce7:	push   r13
    fce9:	push   r12
    fceb:	mov    r13,rsi
    fcee:	push   rbp
    fcef:	push   rbx
    fcf0:	mov    rbp,rdi
    fcf3:	mov    r14,rdx
    fcf6:	sub    rsp,0x8
    fcfa:	mov    rax,QWORD PTR [rdi+0x8]
    fcfe:	mov    edi,0x38
    fd03:	lea    r12,[rax+0x28]
    fd07:	call   80c0 <g_malloc0@plt>
    fd0c:	mov    rsi,r13
    fd0f:	mov    rdi,r12
    fd12:	mov    rbx,rax
    fd15:	call   e8f0 <g_str_equal@plt+0x6538>
    fd1a:	test   rax,rax
    fd1d:	mov    QWORD PTR [rbx+0x10],rax
    fd21:	je     fd78 <g_str_equal@plt+0x79c0>
    fd23:	mov    rdi,r13
    fd26:	call   7a50 <g_strdup@plt>
    fd2b:	lea    rdi,[rip+0x1ae04]        # 2ab36 <_fini@@Base+0x18b2>
    fd32:	mov    QWORD PTR [rbx],rax
    fd35:	mov    QWORD PTR [rbx+0x20],rbp
    fd39:	mov    QWORD PTR [rbx+0x18],r14
    fd3d:	mov    rsi,r14
    fd40:	xor    eax,eax
    fd42:	call   7ce0 <g_strdup_printf@plt>
    fd47:	mov    QWORD PTR [rbx+0x8],rax
    fd4b:	mov    rax,QWORD PTR [rbp+0x30]
    fd4f:	mov    QWORD PTR [rbx+0x28],0x0
    fd57:	mov    QWORD PTR [rbx+0x30],rax
    fd5b:	mov    QWORD PTR [rax],rbx
    fd5e:	add    rbx,0x28
    fd62:	mov    QWORD PTR [rbp+0x30],rbx
    fd66:	add    rsp,0x8
    fd6a:	pop    rbx
    fd6b:	pop    rbp
    fd6c:	pop    r12
    fd6e:	pop    r13
    fd70:	pop    r14
    fd72:	pop    r15
    fd74:	ret    
    fd75:	nop    DWORD PTR [rax]
    fd78:	mov    rax,QWORD PTR [rbp+0x8]
    fd7c:	cmp    QWORD PTR [rax+0x28],0x0
    fd81:	je     fd23 <g_str_equal@plt+0x796b>
    fd83:	lea    r8,[rip+0x1acfa]        # 2aa84 <_fini@@Base+0x1800>
    fd8a:	lea    rcx,[rip+0x1aedf]        # 2ac70 <_fini@@Base+0x19ec>
    fd91:	lea    rsi,[rip+0x1aa00]        # 2a798 <_fini@@Base+0x1514>
    fd98:	mov    rdi,r15
    fd9b:	mov    r9,r13
    fd9e:	mov    edx,0x22b
    fda3:	xor    eax,eax
    fda5:	call   db00 <g_str_equal@plt+0x5748>
    fdaa:	add    rsp,0x8
    fdae:	mov    rdi,rbx
    fdb1:	pop    rbx
    fdb2:	pop    rbp
    fdb3:	pop    r12
    fdb5:	pop    r13
    fdb7:	pop    r14
    fdb9:	pop    r15
    fdbb:	jmp    7880 <g_free@plt>
    fdc0:	push   r13
    fdc2:	push   r12
    fdc4:	push   rbp
    fdc5:	push   rbx
    fdc6:	sub    rsp,0x8
    fdca:	mov    rbx,QWORD PTR [rdi+0x28]
    fdce:	test   rbx,rbx
    fdd1:	je     fe18 <g_str_equal@plt+0x7a60>
    fdd3:	mov    r13,rsi
    fdd6:	mov    r12,rdx
    fdd9:	mov    rbp,rcx
    fddc:	jmp    fdf5 <g_str_equal@plt+0x7a3d>
    fdde:	xchg   ax,ax
    fde0:	test   rbp,rbp
    fde3:	je     fdec <g_str_equal@plt+0x7a34>
    fde5:	cmp    QWORD PTR [rbp+0x0],0x0
    fdea:	jne    fe25 <g_str_equal@plt+0x7a6d>
    fdec:	mov    rbx,QWORD PTR [rbx+0x28]
    fdf0:	test   rbx,rbx
    fdf3:	je     fe18 <g_str_equal@plt+0x7a60>
    fdf5:	mov    rdx,QWORD PTR [rbx+0x8]
    fdf9:	mov    rcx,rbp
    fdfc:	mov    rsi,QWORD PTR [rbx]
    fdff:	mov    rdi,r12
    fe02:	call   r13
    fe05:	test   eax,eax
    fe07:	je     fde0 <g_str_equal@plt+0x7a28>
    fe09:	add    rsp,0x8
    fe0d:	pop    rbx
    fe0e:	pop    rbp
    fe0f:	pop    r12
    fe11:	pop    r13
    fe13:	ret    
    fe14:	nop    DWORD PTR [rax+0x0]
    fe18:	add    rsp,0x8
    fe1c:	xor    eax,eax
    fe1e:	pop    rbx
    fe1f:	pop    rbp
    fe20:	pop    r12
    fe22:	pop    r13
    fe24:	ret    
    fe25:	lea    rcx,[rip+0x1ae24]        # 2ac50 <_fini@@Base+0x19cc>
    fe2c:	lea    rsi,[rip+0x1a965]        # 2a798 <_fini@@Base+0x1514>
    fe33:	lea    rdi,[rip+0x1acaf]        # 2aae9 <_fini@@Base+0x1865>
    fe3a:	mov    edx,0x248
    fe3f:	call   7a70 <__assert_fail@plt>
    fe44:	xchg   ax,ax
    fe46:	nop    WORD PTR cs:[rax+rax*1+0x0]
    fe50:	push   rbp
    fe51:	push   rbx
    fe52:	sub    rsp,0x8
    fe56:	mov    rbx,QWORD PTR [rdi+0x18]
    fe5a:	test   rbx,rbx
    fe5d:	je     fe8f <g_str_equal@plt+0x7ad7>
    fe5f:	mov    rbp,rsi
    fe62:	jmp    fe82 <g_str_equal@plt+0x7aca>
    fe64:	nop    DWORD PTR [rax+0x0]
    fe68:	test   rbp,rbp
    fe6b:	je     fe79 <g_str_equal@plt+0x7ac1>
    fe6d:	mov    rsi,rbp
    fe70:	call   8060 <strcmp@plt>
    fe75:	test   eax,eax
    fe77:	je     fe8f <g_str_equal@plt+0x7ad7>
    fe79:	mov    rbx,QWORD PTR [rbx+0x38]
    fe7d:	test   rbx,rbx
    fe80:	je     fe8f <g_str_equal@plt+0x7ad7>
    fe82:	mov    rdi,QWORD PTR [rbx]
    fe85:	test   rdi,rdi
    fe88:	jne    fe68 <g_str_equal@plt+0x7ab0>
    fe8a:	test   rbp,rbp
    fe8d:	jne    fe79 <g_str_equal@plt+0x7ac1>
    fe8f:	add    rsp,0x8
    fe93:	mov    rax,rbx
    fe96:	pop    rbx
    fe97:	pop    rbp
    fe98:	ret    
    fe99:	nop    DWORD PTR [rax+0x0]
    fea0:	test   rsi,rsi
    fea3:	push   r14
    fea5:	push   r13
    fea7:	push   r12
    fea9:	mov    r12,rsi
    feac:	push   rbp
    fead:	mov    rbp,rdi
    feb0:	push   rbx
    feb1:	je     ff60 <g_str_equal@plt+0x7ba8>
    feb7:	mov    rdi,rsi
    feba:	mov    r13d,edx
    febd:	mov    r14,rcx
    fec0:	call   13700 <g_str_equal@plt+0xb348>
    fec5:	test   al,al
    fec7:	je     ffa0 <g_str_equal@plt+0x7be8>
    fecd:	mov    rsi,r12
    fed0:	mov    rdi,rbp
    fed3:	call   fe50 <g_str_equal@plt+0x7a98>
    fed8:	test   rax,rax
    fedb:	mov    rbx,rax
    fede:	je     ff00 <g_str_equal@plt+0x7b48>
    fee0:	test   r13d,r13d
    fee3:	je     feef <g_str_equal@plt+0x7b37>
    fee5:	cmp    BYTE PTR [rbp+0x10],0x0
    fee9:	je     fff1 <g_str_equal@plt+0x7c39>
    feef:	mov    rax,rbx
    fef2:	pop    rbx
    fef3:	pop    rbp
    fef4:	pop    r12
    fef6:	pop    r13
    fef8:	pop    r14
    fefa:	ret    
    fefb:	nop    DWORD PTR [rax+rax*1+0x0]
    ff00:	mov    edi,0x48
    ff05:	call   80c0 <g_malloc0@plt>
    ff0a:	mov    rdi,r12
    ff0d:	mov    rbx,rax
    ff10:	call   7a50 <g_strdup@plt>
    ff15:	lea    rdi,[rbx+0x10]
    ff19:	mov    QWORD PTR [rbx+0x8],rbp
    ff1d:	mov    QWORD PTR [rbx],rax
    ff20:	call   e3c0 <g_str_equal@plt+0x6008>
    ff25:	lea    rax,[rbx+0x28]
    ff29:	mov    QWORD PTR [rbx+0x28],0x0
    ff31:	mov    QWORD PTR [rbx+0x38],0x0
    ff39:	mov    QWORD PTR [rbx+0x30],rax
    ff3d:	mov    rax,QWORD PTR [rbp+0x20]
    ff41:	mov    QWORD PTR [rbx+0x40],rax
    ff45:	mov    QWORD PTR [rax],rbx
    ff48:	lea    rax,[rbx+0x38]
    ff4c:	mov    QWORD PTR [rbp+0x20],rax
    ff50:	mov    rax,rbx
    ff53:	pop    rbx
    ff54:	pop    rbp
    ff55:	pop    r12
    ff57:	pop    r13
    ff59:	pop    r14
    ff5b:	ret    
    ff5c:	nop    DWORD PTR [rax+0x0]
    ff60:	cmp    BYTE PTR [rdi+0x10],0x0
    ff64:	je     ff00 <g_str_equal@plt+0x7b48>
    ff66:	mov    rbx,QWORD PTR [rdi+0x18]
    ff6a:	test   rbx,rbx
    ff6d:	jne    ff85 <g_str_equal@plt+0x7bcd>
    ff6f:	jmp    ff00 <g_str_equal@plt+0x7b48>
    ff71:	nop    DWORD PTR [rax+0x0]
    ff78:	mov    rbx,QWORD PTR [rbx+0x38]
    ff7c:	test   rbx,rbx
    ff7f:	je     ff00 <g_str_equal@plt+0x7b48>
    ff85:	cmp    QWORD PTR [rbx],0x0
    ff89:	jne    ff78 <g_str_equal@plt+0x7bc0>
    ff8b:	mov    rax,rbx
    ff8e:	pop    rbx
    ff8f:	pop    rbp
    ff90:	pop    r12
    ff92:	pop    r13
    ff94:	pop    r14
    ff96:	ret    
    ff97:	nop    WORD PTR [rax+rax*1+0x0]
    ffa0:	lea    rax,[rip+0x1ab52]        # 2aaf9 <_fini@@Base+0x1875>
    ffa7:	sub    rsp,0x8
    ffab:	lea    rcx,[rip+0x1ac7e]        # 2ac30 <_fini@@Base+0x19ac>
    ffb2:	lea    r9,[rip+0x19406]        # 293bf <_fini@@Base+0x13b>
    ffb9:	lea    r8,[rip+0x1aa8f]        # 2aa4f <_fini@@Base+0x17cb>
    ffc0:	lea    rsi,[rip+0x1a7d1]        # 2a798 <_fini@@Base+0x1514>
    ffc7:	push   rax
    ffc8:	mov    edx,0x264
    ffcd:	mov    rdi,r14
    ffd0:	xor    eax,eax
    ffd2:	xor    ebx,ebx
    ffd4:	call   db00 <g_str_equal@plt+0x5748>
    ffd9:	lea    rsi,[rip+0x1a9d0]        # 2a9b0 <_fini@@Base+0x172c>
    ffe0:	mov    rdi,r14
    ffe3:	xor    eax,eax
    ffe5:	call   d6d0 <g_str_equal@plt+0x5318>
    ffea:	pop    rcx
    ffeb:	pop    rsi
    ffec:	jmp    feef <g_str_equal@plt+0x7b37>
    fff1:	sub    rsp,0x8
    fff5:	lea    r8,[rip+0x1ab0b]        # 2ab07 <_fini@@Base+0x1883>
    fffc:	push   QWORD PTR [rbp+0x0]
    ffff:	lea    rcx,[rip+0x1ac2a]        # 2ac30 <_fini@@Base+0x19ac>
   10006:	lea    rsi,[rip+0x1a78b]        # 2a798 <_fini@@Base+0x1514>
   1000d:	mov    edx,0x26c
   10012:	xor    eax,eax
   10014:	mov    r9,r12
   10017:	mov    rdi,r14
   1001a:	call   db00 <g_str_equal@plt+0x5748>
   1001f:	xor    ebx,ebx
   10021:	pop    rax
   10022:	pop    rdx
   10023:	jmp    feef <g_str_equal@plt+0x7b37>
   10028:	nop    DWORD PTR [rax+rax*1+0x0]
   10030:	push   r15
   10032:	push   r14
   10034:	mov    r14,r8
   10037:	push   r13
   10039:	push   r12
   1003b:	mov    r12,rsi
   1003e:	push   rbp
   1003f:	push   rbx
   10040:	mov    rbp,rdi
   10043:	mov    ebx,ecx
   10045:	sub    rsp,0x28
   10049:	mov    rax,QWORD PTR fs:0x28
   10052:	mov    QWORD PTR [rsp+0x18],rax
   10057:	xor    eax,eax
   10059:	test   dl,dl
   1005b:	mov    QWORD PTR [rsp+0x8],0x0
   10064:	mov    QWORD PTR [rsp+0x10],0x0
   1006d:	je     10148 <g_str_equal@plt+0x7d90>
   10073:	mov    r13,QWORD PTR [rdi+0x8]
   10077:	test   r13,r13
   1007a:	je     1017c <g_str_equal@plt+0x7dc4>
   10080:	lea    rdi,[rip+0x1aa9a]        # 2ab21 <_fini@@Base+0x189d>
   10087:	mov    ecx,0x3
   1008c:	mov    rsi,r12
   1008f:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   10091:	seta   al
   10094:	sbb    al,0x0
   10096:	test   al,al
   10098:	je     10150 <g_str_equal@plt+0x7d98>
   1009e:	lea    rsi,[rip+0x1aa7b]        # 2ab20 <_fini@@Base+0x189c>
   100a5:	mov    rdi,r12
   100a8:	call   7eb0 <strstr@plt>
   100ad:	test   rax,rax
   100b0:	je     100c0 <g_str_equal@plt+0x7d08>
   100b2:	lea    rsi,[rsp+0x8]
   100b7:	lea    rdi,[rax+0x4]
   100bb:	call   ec30 <g_str_equal@plt+0x6878>
   100c0:	mov    edx,ebx
   100c2:	xor    edx,0x1
   100c5:	test   bl,bl
   100c7:	je     100d3 <g_str_equal@plt+0x7d1b>
   100c9:	cmp    BYTE PTR [rbp+0x10],0x0
   100cd:	je     101b7 <g_str_equal@plt+0x7dff>
   100d3:	mov    rsi,QWORD PTR [rsp+0x8]
   100d8:	lea    r15,[rsp+0x10]
   100dd:	mov    rdi,rbp
   100e0:	movzx  edx,dl
   100e3:	mov    rcx,r15
   100e6:	call   fea0 <g_str_equal@plt+0x7ae8>
   100eb:	mov    rdi,QWORD PTR [rsp+0x8]
   100f0:	mov    rbp,rax
   100f3:	call   7880 <g_free@plt>
   100f8:	test   rbp,rbp
   100fb:	je     101a0 <g_str_equal@plt+0x7de8>
   10101:	mov    rsi,r12
   10104:	movzx  ecx,bl
   10107:	mov    r8,r15
   1010a:	mov    rdx,r13
   1010d:	mov    rdi,rbp
   10110:	call   efc0 <g_str_equal@plt+0x6c08>
   10115:	mov    rsi,QWORD PTR [rsp+0x10]
   1011a:	test   rsi,rsi
   1011d:	jne    10168 <g_str_equal@plt+0x7db0>
   1011f:	mov    rbx,QWORD PTR [rsp+0x18]
   10124:	xor    rbx,QWORD PTR fs:0x28
   1012d:	mov    rax,rbp
   10130:	jne    101b2 <g_str_equal@plt+0x7dfa>
   10136:	add    rsp,0x28
   1013a:	pop    rbx
   1013b:	pop    rbp
   1013c:	pop    r12
   1013e:	pop    r13
   10140:	pop    r14
   10142:	pop    r15
   10144:	ret    
   10145:	nop    DWORD PTR [rax]
   10148:	xor    r13d,r13d
   1014b:	jmp    10080 <g_str_equal@plt+0x7cc8>
   10150:	lea    rsi,[rsp+0x8]
   10155:	lea    rdi,[r12+0x3]
   1015a:	call   ec30 <g_str_equal@plt+0x6878>
   1015f:	jmp    100c0 <g_str_equal@plt+0x7d08>
   10164:	nop    DWORD PTR [rax+0x0]
   10168:	mov    rdi,r14
   1016b:	call   df30 <g_str_equal@plt+0x5b78>
   10170:	mov    rdi,rbp
   10173:	xor    ebp,ebp
   10175:	call   ebc0 <g_str_equal@plt+0x6808>
   1017a:	jmp    1011f <g_str_equal@plt+0x7d67>
   1017c:	lea    rcx,[rip+0x1aa85]        # 2ac08 <_fini@@Base+0x1984>
   10183:	lea    rsi,[rip+0x1a60e]        # 2a798 <_fini@@Base+0x1514>
   1018a:	lea    rdi,[rip+0x1a86f]        # 2aa00 <_fini@@Base+0x177c>
   10191:	mov    edx,0x33d
   10196:	call   7a70 <__assert_fail@plt>
   1019b:	nop    DWORD PTR [rax+rax*1+0x0]
   101a0:	mov    rsi,QWORD PTR [rsp+0x10]
   101a5:	mov    rdi,r14
   101a8:	call   df30 <g_str_equal@plt+0x5b78>
   101ad:	jmp    1011f <g_str_equal@plt+0x7d67>
   101b2:	call   8050 <__stack_chk_fail@plt>
   101b7:	lea    rcx,[rip+0x1aa4a]        # 2ac08 <_fini@@Base+0x1984>
   101be:	lea    rsi,[rip+0x1a5d3]        # 2a798 <_fini@@Base+0x1514>
   101c5:	lea    rdi,[rip+0x1a864]        # 2aa30 <_fini@@Base+0x17ac>
   101cc:	mov    edx,0x34d
   101d1:	call   7a70 <__assert_fail@plt>
   101d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   101e0:	mov    rdi,QWORD PTR [rdi+0x18]
   101e4:	test   rdi,rdi
   101e7:	je     10208 <g_str_equal@plt+0x7e50>
   101e9:	push   rbx
   101ea:	nop    WORD PTR [rax+rax*1+0x0]
   101f0:	mov    rbx,QWORD PTR [rdi+0x38]
   101f4:	call   ebc0 <g_str_equal@plt+0x6808>
   101f9:	test   rbx,rbx
   101fc:	mov    rdi,rbx
   101ff:	jne    101f0 <g_str_equal@plt+0x7e38>
   10201:	pop    rbx
   10202:	ret    
   10203:	nop    DWORD PTR [rax+rax*1+0x0]
   10208:	repz ret 
   1020a:	nop    WORD PTR [rax+rax*1+0x0]
   10210:	add    rdi,0x10
   10214:	jmp    e3e0 <g_str_equal@plt+0x6028>
   10219:	nop    DWORD PTR [rax+0x0]
   10220:	push   r13
   10222:	push   r12
   10224:	mov    r12,r8
   10227:	push   rbp
   10228:	push   rbx
   10229:	mov    rbp,rcx
   1022c:	mov    rbx,rdx
   1022f:	mov    edx,0x1
   10234:	sub    rsp,0x18
   10238:	mov    rcx,rsp
   1023b:	mov    QWORD PTR [rsp],0x0
   10243:	mov    rax,QWORD PTR fs:0x28
   1024c:	mov    QWORD PTR [rsp+0x8],rax
   10251:	xor    eax,eax
   10253:	call   fea0 <g_str_equal@plt+0x7ae8>
   10258:	mov    rsi,QWORD PTR [rsp]
   1025c:	test   rsi,rsi
   1025f:	je     10288 <g_str_equal@plt+0x7ed0>
   10261:	mov    rdi,r12
   10264:	call   df30 <g_str_equal@plt+0x5b78>
   10269:	mov    rax,QWORD PTR [rsp+0x8]
   1026e:	xor    rax,QWORD PTR fs:0x28
   10277:	jne    102a8 <g_str_equal@plt+0x7ef0>
   10279:	add    rsp,0x18
   1027d:	pop    rbx
   1027e:	pop    rbp
   1027f:	pop    r12
   10281:	pop    r13
   10283:	ret    
   10284:	nop    DWORD PTR [rax+0x0]
   10288:	mov    r13,rax
   1028b:	mov    rdi,rbp
   1028e:	call   7a50 <g_strdup@plt>
   10293:	mov    r8,r12
   10296:	xor    ecx,ecx
   10298:	mov    rdx,rax
   1029b:	mov    rsi,rbx
   1029e:	mov    rdi,r13
   102a1:	call   ee50 <g_str_equal@plt+0x6a98>
   102a6:	jmp    10269 <g_str_equal@plt+0x7eb1>
   102a8:	call   8050 <__stack_chk_fail@plt>
   102ad:	nop    DWORD PTR [rax]
   102b0:	mov    rax,QWORD PTR [rdi]
   102b3:	ret    
   102b4:	xchg   ax,ax
   102b6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   102c0:	mov    QWORD PTR [rdi],rsi
   102c3:	ret    
   102c4:	xchg   ax,ax
   102c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   102d0:	test   rdi,rdi
   102d3:	je     102da <g_str_equal@plt+0x7f22>
   102d5:	jmp    ebc0 <g_str_equal@plt+0x6808>
   102da:	ret    
   102db:	nop    DWORD PTR [rax+rax*1+0x0]
   102e0:	push   r15
   102e2:	push   r14
   102e4:	lea    r14,[rip+0x1e753]        # 2ea3e <_fini@@Base+0x57ba>
   102eb:	push   r13
   102ed:	push   r12
   102ef:	mov    r13,rsi
   102f2:	push   rbp
   102f3:	push   rbx
   102f4:	mov    r12,rdi
   102f7:	sub    rsp,0x8
   102fb:	mov    rdx,QWORD PTR [rdi]
   102fe:	mov    rbx,QWORD PTR [rdi+0x8]
   10302:	test   rdx,rdx
   10305:	je     1031d <g_str_equal@plt+0x7f65>
   10307:	lea    rsi,[rip+0x1a817]        # 2ab25 <_fini@@Base+0x18a1>
   1030e:	mov    edi,0x1
   10313:	xor    eax,eax
   10315:	mov    r14,r13
   10318:	call   7a80 <__printf_chk@plt>
   1031d:	mov    rbp,QWORD PTR [rbx+0x28]
   10321:	add    rbx,0x28
   10325:	test   rbp,rbp
   10328:	jne    1037e <g_str_equal@plt+0x7fc6>
   1032a:	jmp    10400 <g_str_equal@plt+0x8048>
   1032f:	nop
   10330:	mov    r15,QWORD PTR [rax+0x8]
   10334:	test   r15,r15
   10337:	je     10370 <g_str_equal@plt+0x7fb8>
   10339:	mov    ecx,DWORD PTR [rbx+0x8]
   1033c:	test   ecx,ecx
   1033e:	je     10398 <g_str_equal@plt+0x7fe0>
   10340:	sub    ecx,0x2
   10343:	cmp    ecx,0x1
   10346:	ja     10351 <g_str_equal@plt+0x7f99>
   10348:	test   rax,rax
   1034b:	jne    103d8 <g_str_equal@plt+0x8020>
   10351:	lea    rsi,[rip+0x1a7e2]        # 2ab3a <_fini@@Base+0x18b6>
   10358:	mov    rdx,r14
   1035b:	mov    r8,r15
   1035e:	mov    rcx,rbp
   10361:	mov    edi,0x1
   10366:	xor    eax,eax
   10368:	mov    r14,r13
   1036b:	call   7a80 <__printf_chk@plt>
   10370:	add    rbx,0x20
   10374:	je     103c2 <g_str_equal@plt+0x800a>
   10376:	mov    rbp,QWORD PTR [rbx]
   10379:	test   rbp,rbp
   1037c:	je     103c2 <g_str_equal@plt+0x800a>
   1037e:	mov    rsi,rbp
   10381:	mov    rdi,r12
   10384:	call   f5f0 <g_str_equal@plt+0x7238>
   10389:	test   rax,rax
   1038c:	jne    10330 <g_str_equal@plt+0x7f78>
   1038e:	mov    r15,QWORD PTR [rbx+0x18]
   10392:	jmp    10334 <g_str_equal@plt+0x7f7c>
   10394:	nop    DWORD PTR [rax+0x0]
   10398:	lea    rsi,[rip+0x1a78c]        # 2ab2b <_fini@@Base+0x18a7>
   1039f:	mov    rdx,r14
   103a2:	mov    rcx,rbp
   103a5:	mov    edi,0x1
   103aa:	xor    eax,eax
   103ac:	mov    r14,r13
   103af:	call   7a80 <__printf_chk@plt>
   103b4:	mov    rdi,r15
   103b7:	call   ea20 <g_str_equal@plt+0x6668>
   103bc:	add    rbx,0x20
   103c0:	jne    10376 <g_str_equal@plt+0x7fbe>
   103c2:	add    rsp,0x8
   103c6:	pop    rbx
   103c7:	pop    rbp
   103c8:	pop    r12
   103ca:	pop    r13
   103cc:	pop    r14
   103ce:	pop    r15
   103d0:	ret    
   103d1:	nop    DWORD PTR [rax+0x0]
   103d8:	mov    r8,QWORD PTR [rax+0x18]
   103dc:	lea    rsi,[rip+0x1a74e]        # 2ab31 <_fini@@Base+0x18ad>
   103e3:	mov    rdx,r14
   103e6:	mov    rcx,rbp
   103e9:	mov    edi,0x1
   103ee:	xor    eax,eax
   103f0:	mov    r14,r13
   103f3:	call   7a80 <__printf_chk@plt>
   103f8:	jmp    10370 <g_str_equal@plt+0x7fb8>
   103fd:	nop    DWORD PTR [rax]
   10400:	mov    rbx,QWORD PTR [r12+0x28]
   10405:	test   rbx,rbx
   10408:	je     103c2 <g_str_equal@plt+0x800a>
   1040a:	nop    WORD PTR [rax+rax*1+0x0]
   10410:	mov    rcx,QWORD PTR [rbx]
   10413:	lea    rsi,[rip+0x1a711]        # 2ab2b <_fini@@Base+0x18a7>
   1041a:	mov    rdx,r14
   1041d:	mov    edi,0x1
   10422:	xor    eax,eax
   10424:	mov    r14,r13
   10427:	call   7a80 <__printf_chk@plt>
   1042c:	mov    rdi,QWORD PTR [rbx+0x8]
   10430:	call   ea20 <g_str_equal@plt+0x6668>
   10435:	mov    rbx,QWORD PTR [rbx+0x28]
   10439:	test   rbx,rbx
   1043c:	jne    10410 <g_str_equal@plt+0x8058>
   1043e:	add    rsp,0x8
   10442:	pop    rbx
   10443:	pop    rbp
   10444:	pop    r12
   10446:	pop    r13
   10448:	pop    r14
   1044a:	pop    r15
   1044c:	ret    
   1044d:	nop    DWORD PTR [rax]
   10450:	mov    r8,rcx
   10453:	xor    ecx,ecx
   10455:	jmp    efc0 <g_str_equal@plt+0x6c08>
   1045a:	nop    WORD PTR [rax+rax*1+0x0]
   10460:	mov    r8,rcx
   10463:	movzx  edx,dl
   10466:	xor    ecx,ecx
   10468:	jmp    10030 <g_str_equal@plt+0x7c78>
   1046d:	nop    DWORD PTR [rax]
   10470:	sub    rsp,0x28
   10474:	xor    ecx,ecx
   10476:	movzx  edx,dl
   10479:	lea    r8,[rsp+0x10]
   1047e:	mov    QWORD PTR [rsp+0x10],0x0
   10487:	mov    rax,QWORD PTR fs:0x28
   10490:	mov    QWORD PTR [rsp+0x18],rax
   10495:	xor    eax,eax
   10497:	call   10030 <g_str_equal@plt+0x7c78>
   1049c:	mov    rdi,QWORD PTR [rsp+0x10]
   104a1:	test   rdi,rdi
   104a4:	je     104b5 <g_str_equal@plt+0x80fd>
   104a6:	mov    QWORD PTR [rsp+0x8],rax
   104ab:	call   d8a0 <g_str_equal@plt+0x54e8>
   104b0:	mov    rax,QWORD PTR [rsp+0x8]
   104b5:	mov    rcx,QWORD PTR [rsp+0x18]
   104ba:	xor    rcx,QWORD PTR fs:0x28
   104c3:	jne    104ca <g_str_equal@plt+0x8112>
   104c5:	add    rsp,0x28
   104c9:	ret    
   104ca:	call   8050 <__stack_chk_fail@plt>
   104cf:	nop
   104d0:	sub    rsp,0x8
   104d4:	test   edx,edx
   104d6:	mov    ecx,0x1
   104db:	setne  dl
   104de:	xor    r8d,r8d
   104e1:	movzx  edx,dl
   104e4:	call   10030 <g_str_equal@plt+0x7c78>
   104e9:	test   rax,rax
   104ec:	je     104f3 <g_str_equal@plt+0x813b>
   104ee:	add    rsp,0x8
   104f2:	ret    
   104f3:	lea    rcx,[rip+0x1a6f6]        # 2abf0 <_fini@@Base+0x196c>
   104fa:	lea    rsi,[rip+0x1a297]        # 2a798 <_fini@@Base+0x1514>
   10501:	lea    rdi,[rip+0x1a63a]        # 2ab42 <_fini@@Base+0x18be>
   10508:	mov    edx,0x387
   1050d:	call   7a70 <__assert_fail@plt>
   10512:	nop    DWORD PTR [rax+0x0]
   10516:	nop    WORD PTR cs:[rax+rax*1+0x0]
   10520:	push   r13
   10522:	push   r12
   10524:	mov    r13,rdx
   10527:	push   rbp
   10528:	push   rbx
   10529:	mov    rbp,rsi
   1052c:	lea    rsi,[rip+0x18e8c]        # 293bf <_fini@@Base+0x13b>
   10533:	mov    rbx,rdi
   10536:	mov    rdi,rbp
   10539:	sub    rsp,0x38
   1053d:	lea    r12,[rsp+0x8]
   10542:	mov    QWORD PTR [rsp+0x8],0x0
   1054b:	mov    rax,QWORD PTR fs:0x28
   10554:	mov    QWORD PTR [rsp+0x28],rax
   10559:	xor    eax,eax
   1055b:	call   12470 <g_str_equal@plt+0xa0b8>
   10560:	mov    rcx,r12
   10563:	mov    rsi,rax
   10566:	mov    edx,0x1
   1056b:	mov    rdi,rbx
   1056e:	call   fea0 <g_str_equal@plt+0x7ae8>
   10573:	mov    rsi,QWORD PTR [rsp+0x8]
   10578:	test   rsi,rsi
   1057b:	jne    105d0 <g_str_equal@plt+0x8218>
   1057d:	test   rax,rax
   10580:	mov    rbx,rax
   10583:	je     105f4 <g_str_equal@plt+0x823c>
   10585:	lea    rsi,[rip+0xffffffffffffecf4]        # f280 <g_str_equal@plt+0x6ec8>
   1058c:	lea    rdx,[rsp+0x10]
   10591:	mov    rdi,rbp
   10594:	mov    QWORD PTR [rsp+0x18],r12
   10599:	mov    QWORD PTR [rsp+0x10],rax
   1059e:	call   124b0 <g_str_equal@plt+0xa0f8>
   105a3:	mov    rsi,QWORD PTR [rsp+0x8]
   105a8:	test   rsi,rsi
   105ab:	jne    105e0 <g_str_equal@plt+0x8228>
   105ad:	mov    rcx,QWORD PTR [rsp+0x28]
   105b2:	xor    rcx,QWORD PTR fs:0x28
   105bb:	mov    rax,rbx
   105be:	jne    10613 <g_str_equal@plt+0x825b>
   105c0:	add    rsp,0x38
   105c4:	pop    rbx
   105c5:	pop    rbp
   105c6:	pop    r12
   105c8:	pop    r13
   105ca:	ret    
   105cb:	nop    DWORD PTR [rax+rax*1+0x0]
   105d0:	mov    rdi,r13
   105d3:	xor    ebx,ebx
   105d5:	call   df30 <g_str_equal@plt+0x5b78>
   105da:	jmp    105ad <g_str_equal@plt+0x81f5>
   105dc:	nop    DWORD PTR [rax+0x0]
   105e0:	mov    rdi,r13
   105e3:	call   df30 <g_str_equal@plt+0x5b78>
   105e8:	mov    rdi,rbx
   105eb:	xor    ebx,ebx
   105ed:	call   ebc0 <g_str_equal@plt+0x6808>
   105f2:	jmp    105ad <g_str_equal@plt+0x81f5>
   105f4:	lea    rcx,[rip+0x1a5d5]        # 2abd0 <_fini@@Base+0x194c>
   105fb:	lea    rsi,[rip+0x1a196]        # 2a798 <_fini@@Base+0x1514>
   10602:	lea    rdi,[rip+0x1a53e]        # 2ab47 <_fini@@Base+0x18c3>
   10609:	mov    edx,0x3c2
   1060e:	call   7a70 <__assert_fail@plt>
   10613:	call   8050 <__stack_chk_fail@plt>
   10618:	nop    DWORD PTR [rax+rax*1+0x0]
   10620:	push   r15
   10622:	push   r14
   10624:	push   r13
   10626:	push   r12
   10628:	mov    r12,rsi
   1062b:	push   rbp
   1062c:	push   rbx
   1062d:	mov    rbx,rdi
   10630:	mov    rdi,rsi
   10633:	sub    rsp,0x48
   10637:	mov    rax,QWORD PTR fs:0x28
   10640:	mov    QWORD PTR [rsp+0x38],rax
   10645:	xor    eax,eax
   10647:	mov    QWORD PTR [rsp+0x8],rdx
   1064c:	call   12510 <g_str_equal@plt+0xa158>
   10651:	test   rax,rax
   10654:	je     106d6 <g_str_equal@plt+0x831e>
   1065a:	mov    r15,rax
   1065d:	lea    rax,[rsp+0x20]
   10662:	lea    r13,[rsp+0x18]
   10667:	mov    QWORD PTR [rsp],rax
   1066b:	nop    DWORD PTR [rax+rax*1+0x0]
   10670:	mov    rsi,r15
   10673:	mov    rdi,r12
   10676:	mov    QWORD PTR [rsp+0x18],0x0
   1067f:	mov    QWORD PTR [rsp+0x20],rbx
   10684:	mov    QWORD PTR [rsp+0x28],r13
   10689:	call   12540 <g_str_equal@plt+0xa188>
   1068e:	mov    rbp,rax
   10691:	mov    rax,QWORD PTR [rbx+0x8]
   10695:	mov    r14,QWORD PTR [r15]
   10698:	lea    rdi,[rax+0x28]
   1069c:	mov    rsi,r14
   1069f:	call   e8f0 <g_str_equal@plt+0x6538>
   106a4:	test   rax,rax
   106a7:	je     106ce <g_str_equal@plt+0x8316>
   106a9:	mov    rsi,QWORD PTR [r15+0x8]
   106ad:	mov    rdx,QWORD PTR [rsp]
   106b1:	mov    rdi,r14
   106b4:	call   f280 <g_str_equal@plt+0x6ec8>
   106b9:	mov    rsi,QWORD PTR [rsp+0x18]
   106be:	test   rsi,rsi
   106c1:	jne    106f8 <g_str_equal@plt+0x8340>
   106c3:	mov    rsi,QWORD PTR [r15]
   106c6:	mov    rdi,r12
   106c9:	call   12640 <g_str_equal@plt+0xa288>
   106ce:	test   rbp,rbp
   106d1:	mov    r15,rbp
   106d4:	jne    10670 <g_str_equal@plt+0x82b8>
   106d6:	mov    rax,QWORD PTR [rsp+0x38]
   106db:	xor    rax,QWORD PTR fs:0x28
   106e4:	jne    10704 <g_str_equal@plt+0x834c>
   106e6:	add    rsp,0x48
   106ea:	pop    rbx
   106eb:	pop    rbp
   106ec:	pop    r12
   106ee:	pop    r13
   106f0:	pop    r14
   106f2:	pop    r15
   106f4:	ret    
   106f5:	nop    DWORD PTR [rax]
   106f8:	mov    rdi,QWORD PTR [rsp+0x8]
   106fd:	call   df30 <g_str_equal@plt+0x5b78>
   10702:	jmp    106d6 <g_str_equal@plt+0x831e>
   10704:	call   8050 <__stack_chk_fail@plt>
   10709:	nop    DWORD PTR [rax+0x0]
   10710:	push   r15
   10712:	push   r14
   10714:	mov    r14,rsi
   10717:	push   r13
   10719:	push   r12
   1071b:	mov    r12,rdx
   1071e:	push   rbp
   1071f:	push   rbx
   10720:	mov    rbx,rdi
   10723:	sub    rsp,0x18
   10727:	test   rsi,rsi
   1072a:	mov    BYTE PTR [rsp+0xf],cl
   1072e:	je     107ea <g_str_equal@plt+0x8432>
   10734:	mov    rdx,QWORD PTR [rbx]
   10737:	test   rdx,rdx
   1073a:	je     1074b <g_str_equal@plt+0x8393>
   1073c:	lea    rsi,[rip+0x18c7c]        # 293bf <_fini@@Base+0x13b>
   10743:	mov    rdi,r14
   10746:	call   12150 <g_str_equal@plt+0x9d98>
   1074b:	mov    rbp,QWORD PTR [rbx+0x28]
   1074f:	test   rbp,rbp
   10752:	je     107b6 <g_str_equal@plt+0x83fe>
   10754:	nop    DWORD PTR [rax+0x0]
   10758:	test   r12,r12
   1075b:	mov    r13,QWORD PTR [rbp+0x28]
   1075f:	je     107d0 <g_str_equal@plt+0x8418>
   10761:	mov    rdi,QWORD PTR [r12+0x28]
   10766:	lea    r15,[r12+0x28]
   1076b:	test   rdi,rdi
   1076e:	je     107ae <g_str_equal@plt+0x83f6>
   10770:	mov    rbx,QWORD PTR [rbp+0x0]
   10774:	jmp    1078c <g_str_equal@plt+0x83d4>
   10776:	nop    WORD PTR cs:[rax+rax*1+0x0]
   10780:	add    r15,0x20
   10784:	mov    rdi,QWORD PTR [r15]
   10787:	test   rdi,rdi
   1078a:	je     107ae <g_str_equal@plt+0x83f6>
   1078c:	mov    rsi,rbx
   1078f:	call   8060 <strcmp@plt>
   10794:	test   eax,eax
   10796:	jne    10780 <g_str_equal@plt+0x83c8>
   10798:	mov    rdx,QWORD PTR [rbp+0x8]
   1079c:	mov    rsi,rbx
   1079f:	mov    rdi,r14
   107a2:	call   12150 <g_str_equal@plt+0x9d98>
   107a7:	cmp    BYTE PTR [rsp+0xf],0x0
   107ac:	jne    107e0 <g_str_equal@plt+0x8428>
   107ae:	test   r13,r13
   107b1:	mov    rbp,r13
   107b4:	jne    10758 <g_str_equal@plt+0x83a0>
   107b6:	add    rsp,0x18
   107ba:	mov    rax,r14
   107bd:	pop    rbx
   107be:	pop    rbp
   107bf:	pop    r12
   107c1:	pop    r13
   107c3:	pop    r14
   107c5:	pop    r15
   107c7:	ret    
   107c8:	nop    DWORD PTR [rax+rax*1+0x0]
   107d0:	mov    rbx,QWORD PTR [rbp+0x0]
   107d4:	jmp    10798 <g_str_equal@plt+0x83e0>
   107d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   107e0:	mov    rdi,rbp
   107e3:	call   e8a0 <g_str_equal@plt+0x64e8>
   107e8:	jmp    107ae <g_str_equal@plt+0x83f6>
   107ea:	call   11fa0 <g_str_equal@plt+0x9be8>
   107ef:	mov    r14,rax
   107f2:	jmp    10734 <g_str_equal@plt+0x837c>
   107f7:	nop    WORD PTR [rax+rax*1+0x0]
   10800:	xor    ecx,ecx
   10802:	xor    edx,edx
   10804:	jmp    10710 <g_str_equal@plt+0x8358>
   10809:	nop    DWORD PTR [rax+0x0]
   10810:	push   r14
   10812:	push   r13
   10814:	push   r12
   10816:	push   rbp
   10817:	push   rbx
   10818:	sub    rsp,0x10
   1081c:	mov    rax,QWORD PTR fs:0x28
   10825:	mov    QWORD PTR [rsp+0x8],rax
   1082a:	xor    eax,eax
   1082c:	mov    rax,QWORD PTR [rdi+0x8]
   10830:	mov    QWORD PTR [rsp],0x0
   10838:	cmp    QWORD PTR [rax+0x28],0x0
   1083d:	jne    108ea <g_str_equal@plt+0x8532>
   10843:	mov    rbx,QWORD PTR [rdi+0x28]
   10847:	test   rbx,rbx
   1084a:	je     108b9 <g_str_equal@plt+0x8501>
   1084c:	mov    r12,rsi
   1084f:	mov    r14,rdx
   10852:	mov    r13,rsp
   10855:	jmp    1087d <g_str_equal@plt+0x84c5>
   10857:	nop    WORD PTR [rax+rax*1+0x0]
   10860:	mov    rsi,r13
   10863:	mov    rdi,rbx
   10866:	call   ede0 <g_str_equal@plt+0x6a28>
   1086b:	mov    rsi,QWORD PTR [rsp]
   1086f:	test   rsi,rsi
   10872:	jne    108e0 <g_str_equal@plt+0x8528>
   10874:	mov    rbx,QWORD PTR [rbx+0x28]
   10878:	test   rbx,rbx
   1087b:	je     108b9 <g_str_equal@plt+0x8501>
   1087d:	mov    rbp,QWORD PTR [rbx]
   10880:	mov    rdi,r12
   10883:	mov    rsi,rbp
   10886:	call   e8f0 <g_str_equal@plt+0x6538>
   1088b:	test   rax,rax
   1088e:	mov    QWORD PTR [rbx+0x10],rax
   10892:	jne    10860 <g_str_equal@plt+0x84a8>
   10894:	lea    r8,[rip+0x1a1e9]        # 2aa84 <_fini@@Base+0x1800>
   1089b:	lea    rcx,[rip+0x1a2de]        # 2ab80 <_fini@@Base+0x18fc>
   108a2:	lea    rsi,[rip+0x19eef]        # 2a798 <_fini@@Base+0x1514>
   108a9:	mov    r9,rbp
   108ac:	mov    edx,0x435
   108b1:	mov    rdi,r14
   108b4:	call   db00 <g_str_equal@plt+0x5748>
   108b9:	mov    rax,QWORD PTR [rsp+0x8]
   108be:	xor    rax,QWORD PTR fs:0x28
   108c7:	jne    10909 <g_str_equal@plt+0x8551>
   108c9:	add    rsp,0x10
   108cd:	pop    rbx
   108ce:	pop    rbp
   108cf:	pop    r12
   108d1:	pop    r13
   108d3:	pop    r14
   108d5:	ret    
   108d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   108e0:	mov    rdi,r14
   108e3:	call   df30 <g_str_equal@plt+0x5b78>
   108e8:	jmp    108b9 <g_str_equal@plt+0x8501>
   108ea:	lea    rcx,[rip+0x1a2af]        # 2aba0 <_fini@@Base+0x191c>
   108f1:	lea    rsi,[rip+0x19ea0]        # 2a798 <_fini@@Base+0x1514>
   108f8:	lea    rdi,[rip+0x1a1d3]        # 2aad2 <_fini@@Base+0x184e>
   108ff:	mov    edx,0x430
   10904:	call   7a70 <__assert_fail@plt>
   10909:	call   8050 <__stack_chk_fail@plt>
   1090e:	xchg   ax,ax
   10910:	push   r15
   10912:	push   r14
   10914:	mov    r14,rsi
   10917:	push   r13
   10919:	push   r12
   1091b:	mov    r13,rdx
   1091e:	push   rbp
   1091f:	push   rbx
   10920:	mov    rbx,rdi
   10923:	mov    rbp,rcx
   10926:	sub    rsp,0x28
   1092a:	mov    r15,rsp
   1092d:	mov    rdi,r15
   10930:	mov    rax,QWORD PTR fs:0x28
   10939:	mov    QWORD PTR [rsp+0x18],rax
   1093e:	xor    eax,eax
   10940:	call   e350 <g_str_equal@plt+0x5f98>
   10945:	mov    rbx,QWORD PTR [rbx+0x18]
   10949:	test   rbx,rbx
   1094c:	jne    10965 <g_str_equal@plt+0x85ad>
   1094e:	jmp    109b0 <g_str_equal@plt+0x85f8>
   10950:	test   rbp,rbp
   10953:	je     1095c <g_str_equal@plt+0x85a4>
   10955:	cmp    QWORD PTR [rbp+0x0],0x0
   1095a:	jne    109b5 <g_str_equal@plt+0x85fd>
   1095c:	mov    rbx,QWORD PTR [rbx+0x38]
   10960:	test   rbx,rbx
   10963:	je     109b0 <g_str_equal@plt+0x85f8>
   10965:	lea    rdi,[rbx+0x10]
   10969:	call   e3e0 <g_str_equal@plt+0x6028>
   1096e:	mov    rdx,rbp
   10971:	mov    rsi,rbx
   10974:	mov    rdi,r13
   10977:	call   r14
   1097a:	test   eax,eax
   1097c:	mov    r12d,eax
   1097f:	je     10950 <g_str_equal@plt+0x8598>
   10981:	mov    rdi,r15
   10984:	call   e370 <g_str_equal@plt+0x5fb8>
   10989:	mov    rcx,QWORD PTR [rsp+0x18]
   1098e:	xor    rcx,QWORD PTR fs:0x28
   10997:	mov    eax,r12d
   1099a:	jne    109d4 <g_str_equal@plt+0x861c>
   1099c:	add    rsp,0x28
   109a0:	pop    rbx
   109a1:	pop    rbp
   109a2:	pop    r12
   109a4:	pop    r13
   109a6:	pop    r14
   109a8:	pop    r15
   109aa:	ret    
   109ab:	nop    DWORD PTR [rax+rax*1+0x0]
   109b0:	xor    r12d,r12d
   109b3:	jmp    10981 <g_str_equal@plt+0x85c9>
   109b5:	lea    rcx,[rip+0x1a1a4]        # 2ab60 <_fini@@Base+0x18dc>
   109bc:	lea    rsi,[rip+0x19dd5]        # 2a798 <_fini@@Base+0x1514>
   109c3:	lea    rdi,[rip+0x1a11f]        # 2aae9 <_fini@@Base+0x1865>
   109ca:	mov    edx,0x456
   109cf:	call   7a70 <__assert_fail@plt>
   109d4:	call   8050 <__stack_chk_fail@plt>
   109d9:	nop    DWORD PTR [rax+0x0]
   109e0:	jmp    7880 <g_free@plt>
   109e5:	nop
   109e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   109f0:	push   r15
   109f2:	push   r14
   109f4:	mov    r14,rdi
   109f7:	push   r13
   109f9:	push   r12
   109fb:	push   rbp
   109fc:	push   rbx
   109fd:	sub    rsp,0x8
   10a01:	test   rsi,rsi
   10a04:	je     10b18 <g_str_equal@plt+0x8760>
   10a0a:	test   rdi,rdi
   10a0d:	je     10b40 <g_str_equal@plt+0x8788>
   10a13:	cmp    QWORD PTR [rdi+0x18],0x0
   10a18:	lea    rax,[rdi+0x28]
   10a1c:	sete   bpl
   10a20:	xor    r13d,r13d
   10a23:	jmp    10a2b <g_str_equal@plt+0x8673>
   10a25:	nop    DWORD PTR [rax]
   10a28:	mov    r13,r15
   10a2b:	cmp    QWORD PTR [rax],0x0
   10a2f:	lea    r15,[r13+0x1]
   10a33:	mov    rcx,r15
   10a36:	je     10b30 <g_str_equal@plt+0x8778>
   10a3c:	add    rax,0x20
   10a40:	jne    10a28 <g_str_equal@plt+0x8670>
   10a42:	lea    rcx,[r13+0x2]
   10a46:	mov    r13,r15
   10a49:	lea    r15,[r15+0x1]
   10a4d:	xor    r12d,r12d
   10a50:	lea    rbx,[rsi+0x28]
   10a54:	xor    edx,edx
   10a56:	mov    rax,rbx
   10a59:	nop    DWORD PTR [rax+0x0]
   10a60:	cmp    QWORD PTR [rax],0x0
   10a64:	je     10a70 <g_str_equal@plt+0x86b8>
   10a66:	add    rdx,0x1
   10a6a:	add    rax,0x20
   10a6e:	jne    10a60 <g_str_equal@plt+0x86a8>
   10a70:	lea    rsi,[rdx+rcx*1]
   10a74:	mov    rdx,rsi
   10a77:	shl    rdx,0x5
   10a7b:	lea    rsi,[rdx+0x28]
   10a7f:	call   8010 <g_realloc@plt>
   10a84:	test   r12b,r12b
   10a87:	mov    r14,rax
   10a8a:	je     10a9f <g_str_equal@plt+0x86e7>
   10a8c:	mov    QWORD PTR [rax],0x0
   10a93:	mov    QWORD PTR [rax+0x8],0x0
   10a9b:	mov    BYTE PTR [rax+0x10],0x0
   10a9f:	test   bpl,bpl
   10aa2:	je     10ab4 <g_str_equal@plt+0x86fc>
   10aa4:	lea    rax,[r14+0x18]
   10aa8:	mov    QWORD PTR [r14+0x18],0x0
   10ab0:	mov    QWORD PTR [r14+0x20],rax
   10ab4:	shl    r15,0x5
   10ab8:	lea    rbp,[r14+0x28]
   10abc:	mov    QWORD PTR [r14+r15*1+0x8],0x0
   10ac5:	jmp    10ad6 <g_str_equal@plt+0x871e>
   10ac7:	nop    WORD PTR [rax+rax*1+0x0]
   10ad0:	add    rbx,0x20
   10ad4:	je     10b18 <g_str_equal@plt+0x8760>
   10ad6:	mov    rsi,QWORD PTR [rbx]
   10ad9:	test   rsi,rsi
   10adc:	je     10b18 <g_str_equal@plt+0x8760>
   10ade:	mov    rdi,rbp
   10ae1:	call   e8f0 <g_str_equal@plt+0x6538>
   10ae6:	test   rax,rax
   10ae9:	jne    10ad0 <g_str_equal@plt+0x8718>
   10aeb:	mov    rax,r13
   10aee:	movdqu xmm0,XMMWORD PTR [rbx]
   10af2:	shl    rax,0x5
   10af6:	add    r13,0x1
   10afa:	add    rax,r14
   10afd:	movups XMMWORD PTR [rax+0x28],xmm0
   10b01:	movdqu xmm0,XMMWORD PTR [rbx+0x10]
   10b06:	add    rbx,0x20
   10b0a:	mov    QWORD PTR [rax+0x48],0x0
   10b12:	movups XMMWORD PTR [rax+0x38],xmm0
   10b16:	jne    10ad6 <g_str_equal@plt+0x871e>
   10b18:	add    rsp,0x8
   10b1c:	mov    rax,r14
   10b1f:	pop    rbx
   10b20:	pop    rbp
   10b21:	pop    r12
   10b23:	pop    r13
   10b25:	pop    r14
   10b27:	pop    r15
   10b29:	ret    
   10b2a:	nop    WORD PTR [rax+rax*1+0x0]
   10b30:	xor    r12d,r12d
   10b33:	jmp    10a50 <g_str_equal@plt+0x8698>
   10b38:	nop    DWORD PTR [rax+rax*1+0x0]
   10b40:	mov    ecx,0x1
   10b45:	mov    ebp,0x1
   10b4a:	mov    r12d,0x1
   10b50:	xor    r13d,r13d
   10b53:	mov    r15d,0x1
   10b59:	jmp    10a50 <g_str_equal@plt+0x8698>
   10b5e:	xchg   ax,ax
   10b60:	push   rbx
   10b61:	sub    rsp,0xd0
   10b68:	test   al,al
   10b6a:	mov    QWORD PTR [rsp+0x28],rsi
   10b6f:	mov    QWORD PTR [rsp+0x30],rdx
   10b74:	mov    QWORD PTR [rsp+0x38],rcx
   10b79:	mov    QWORD PTR [rsp+0x40],r8
   10b7e:	mov    QWORD PTR [rsp+0x48],r9
   10b83:	je     10bbc <g_str_equal@plt+0x8804>
   10b85:	movaps XMMWORD PTR [rsp+0x50],xmm0
   10b8a:	movaps XMMWORD PTR [rsp+0x60],xmm1
   10b8f:	movaps XMMWORD PTR [rsp+0x70],xmm2
   10b94:	movaps XMMWORD PTR [rsp+0x80],xmm3
   10b9c:	movaps XMMWORD PTR [rsp+0x90],xmm4
   10ba4:	movaps XMMWORD PTR [rsp+0xa0],xmm5
   10bac:	movaps XMMWORD PTR [rsp+0xb0],xmm6
   10bb4:	movaps XMMWORD PTR [rsp+0xc0],xmm7
   10bbc:	mov    rax,QWORD PTR fs:0x28
   10bc5:	mov    QWORD PTR [rsp+0x18],rax
   10bca:	xor    eax,eax
   10bcc:	xor    ebx,ebx
   10bce:	cmp    QWORD PTR [rip+0x230172],0x0        # 240d48 <stdout@@GLIBC_2.2.5+0x10a0>
   10bd6:	je     10c1a <g_str_equal@plt+0x8862>
   10bd8:	lea    rax,[rsp+0xe0]
   10be0:	mov    rdx,rdi
   10be3:	mov    rdi,QWORD PTR [rip+0x23015e]        # 240d48 <stdout@@GLIBC_2.2.5+0x10a0>
   10bea:	mov    rcx,rsp
   10bed:	mov    esi,0x1
   10bf2:	mov    DWORD PTR [rsp],0x8
   10bf9:	mov    QWORD PTR [rsp+0x8],rax
   10bfe:	lea    rax,[rsp+0x20]
   10c03:	mov    DWORD PTR [rsp+0x4],0x30
   10c0b:	mov    QWORD PTR [rsp+0x10],rax
   10c10:	call   7d30 <__vfprintf_chk@plt>
   10c15:	test   eax,eax
   10c17:	cmovns ebx,eax
   10c1a:	mov    rdx,QWORD PTR [rsp+0x18]
   10c1f:	xor    rdx,QWORD PTR fs:0x28
   10c28:	mov    eax,ebx
   10c2a:	jne    10c35 <g_str_equal@plt+0x887d>
   10c2c:	add    rsp,0xd0
   10c33:	pop    rbx
   10c34:	ret    
   10c35:	call   8050 <__stack_chk_fail@plt>
   10c3a:	nop    WORD PTR [rax+rax*1+0x0]
   10c40:	mov    BYTE PTR [rip+0x231119],0x1        # 241d60 <stdout@@GLIBC_2.2.5+0x20b8>
   10c47:	ret    
   10c48:	nop    DWORD PTR [rax+rax*1+0x0]
   10c50:	mov    rax,QWORD PTR [rip+0x231111]        # 241d68 <stdout@@GLIBC_2.2.5+0x20c0>
   10c57:	test   rax,rax
   10c5a:	je     10c85 <g_str_equal@plt+0x88cd>
   10c5c:	mov    ecx,DWORD PTR [rax+0x8]
   10c5f:	test   ecx,ecx
   10c61:	je     10c97 <g_str_equal@plt+0x88df>
   10c63:	mov    rsi,QWORD PTR [rax]
   10c66:	xor    edx,edx
   10c68:	nop    DWORD PTR [rax+rax*1+0x0]
   10c70:	movsxd rax,edx
   10c73:	shl    rax,0x4
   10c77:	add    rax,rsi
   10c7a:	cmp    rdi,QWORD PTR [rax]
   10c7d:	jb     10c90 <g_str_equal@plt+0x88d8>
   10c7f:	cmp    rdi,QWORD PTR [rax+0x8]
   10c83:	ja     10c90 <g_str_equal@plt+0x88d8>
   10c85:	mov    eax,0x1
   10c8a:	ret    
   10c8b:	nop    DWORD PTR [rax+rax*1+0x0]
   10c90:	add    edx,0x1
   10c93:	cmp    edx,ecx
   10c95:	jne    10c70 <g_str_equal@plt+0x88b8>
   10c97:	xor    eax,eax
   10c99:	ret    
   10c9a:	nop    WORD PTR [rax+rax*1+0x0]
   10ca0:	push   r15
   10ca2:	push   r14
   10ca4:	xor    edx,edx
   10ca6:	push   r13
   10ca8:	push   r12
   10caa:	push   rbp
   10cab:	push   rbx
   10cac:	sub    rsp,0x68
   10cb0:	mov    QWORD PTR [rsp+0x18],rsi
   10cb5:	lea    rsi,[rip+0x1e1f3]        # 2eeaf <_fini@@Base+0x5c2b>
   10cbc:	mov    rax,QWORD PTR fs:0x28
   10cc5:	mov    QWORD PTR [rsp+0x58],rax
   10cca:	xor    eax,eax
   10ccc:	call   8080 <g_strsplit@plt>
   10cd1:	mov    rdi,QWORD PTR [rip+0x231090]        # 241d68 <stdout@@GLIBC_2.2.5+0x20c0>
   10cd8:	mov    r12,rax
   10cdb:	test   rdi,rdi
   10cde:	je     10cf0 <g_str_equal@plt+0x8938>
   10ce0:	call   7b30 <g_array_unref@plt>
   10ce5:	mov    QWORD PTR [rip+0x231078],0x0        # 241d68 <stdout@@GLIBC_2.2.5+0x20c0>
   10cf0:	mov    rdi,r12
   10cf3:	xor    ebx,ebx
   10cf5:	call   7c70 <g_strv_length@plt>
   10cfa:	xor    esi,esi
   10cfc:	xor    edi,edi
   10cfe:	mov    ecx,eax
   10d00:	mov    edx,0x10
   10d05:	call   7f70 <g_array_sized_new@plt>
   10d0a:	mov    r13,QWORD PTR [r12]
   10d0e:	mov    QWORD PTR [rip+0x231053],rax        # 241d68 <stdout@@GLIBC_2.2.5+0x20c0>
   10d15:	test   r13,r13
   10d18:	je     10e20 <g_str_equal@plt+0x8a68>
   10d1e:	lea    rax,[rsp+0x28]
   10d23:	lea    r14,[rsp+0x30]
   10d28:	mov    QWORD PTR [rsp],rax
   10d2c:	lea    rax,[rsp+0x38]
   10d31:	mov    QWORD PTR [rsp+0x8],rax
   10d36:	lea    rax,[rsp+0x40]
   10d3b:	mov    QWORD PTR [rsp+0x10],rax
   10d40:	mov    esi,0x2d
   10d45:	mov    rdi,r13
   10d48:	call   7f90 <strchr@plt>
   10d4d:	test   rax,rax
   10d50:	mov    r15,rax
   10d53:	lea    rbp,[rax+0x1]
   10d57:	je     10eb0 <g_str_equal@plt+0x8af8>
   10d5d:	mov    rsi,QWORD PTR [rsp]
   10d61:	xor    edx,edx
   10d63:	mov    rcx,r14
   10d66:	mov    rdi,r13
   10d69:	call   b070 <g_str_equal@plt+0x2cb8>
   10d6e:	test   eax,eax
   10d70:	jne    10f20 <g_str_equal@plt+0x8b68>
   10d76:	cmp    QWORD PTR [rsp+0x28],r15
   10d7b:	jne    10f20 <g_str_equal@plt+0x8b68>
   10d81:	mov    rcx,QWORD PTR [rsp+0x8]
   10d86:	xor    edx,edx
   10d88:	xor    esi,esi
   10d8a:	mov    rdi,rbp
   10d8d:	call   b070 <g_str_equal@plt+0x2cb8>
   10d92:	test   eax,eax
   10d94:	jne    10f60 <g_str_equal@plt+0x8ba8>
   10d9a:	movzx  eax,BYTE PTR [r15]
   10d9e:	cmp    al,0x2d
   10da0:	je     10dd0 <g_str_equal@plt+0x8a18>
   10da2:	cmp    al,0x2e
   10da4:	je     10e98 <g_str_equal@plt+0x8ae0>
   10daa:	cmp    al,0x2b
   10dac:	je     10e50 <g_str_equal@plt+0x8a98>
   10db2:	lea    rcx,[rip+0x1a4a7]        # 2b260 <_fini@@Base+0x1fdc>
   10db9:	lea    rsi,[rip+0x1a0d8]        # 2ae98 <_fini@@Base+0x1c14>
   10dc0:	xor    r8d,r8d
   10dc3:	mov    edx,0xd4
   10dc8:	xor    edi,edi
   10dca:	call   7ca0 <g_assertion_message_expr@plt>
   10dcf:	nop
   10dd0:	mov    rax,QWORD PTR [rsp+0x30]
   10dd5:	lea    rdx,[rax+0x1]
   10dd9:	sub    rdx,QWORD PTR [rsp+0x38]
   10dde:	cmp    rdx,rax
   10de1:	ja     10e6a <g_str_equal@plt+0x8ab2>
   10de7:	mov    rsi,QWORD PTR [rsp+0x10]
   10dec:	mov    rdi,QWORD PTR [rip+0x230f75]        # 241d68 <stdout@@GLIBC_2.2.5+0x20c0>
   10df3:	add    ebx,0x1
   10df6:	mov    QWORD PTR [rsp+0x40],rdx
   10dfb:	mov    edx,0x1
   10e00:	mov    QWORD PTR [rsp+0x48],rax
   10e05:	call   8300 <g_array_append_vals@plt>
   10e0a:	movsxd rax,ebx
   10e0d:	mov    r13,QWORD PTR [r12+rax*8]
   10e11:	test   r13,r13
   10e14:	jne    10d40 <g_str_equal@plt+0x8988>
   10e1a:	nop    WORD PTR [rax+rax*1+0x0]
   10e20:	mov    rdi,r12
   10e23:	call   81f0 <g_strfreev@plt>
   10e28:	mov    rax,QWORD PTR [rsp+0x58]
   10e2d:	xor    rax,QWORD PTR fs:0x28
   10e36:	jne    10f81 <g_str_equal@plt+0x8bc9>
   10e3c:	add    rsp,0x68
   10e40:	pop    rbx
   10e41:	pop    rbp
   10e42:	pop    r12
   10e44:	pop    r13
   10e46:	pop    r14
   10e48:	pop    r15
   10e4a:	ret    
   10e4b:	nop    DWORD PTR [rax+rax*1+0x0]
   10e50:	mov    rdx,QWORD PTR [rsp+0x30]
   10e55:	mov    rax,QWORD PTR [rsp+0x38]
   10e5a:	add    rax,rdx
   10e5d:	sub    rax,0x1
   10e61:	cmp    rdx,rax
   10e64:	jbe    10de7 <g_str_equal@plt+0x8a2f>
   10e6a:	mov    rdi,QWORD PTR [rsp+0x18]
   10e6f:	lea    r8,[rip+0x19f1c]        # 2ad92 <_fini@@Base+0x1b0e>
   10e76:	lea    rcx,[rip+0x1a3e3]        # 2b260 <_fini@@Base+0x1fdc>
   10e7d:	lea    rsi,[rip+0x1a014]        # 2ae98 <_fini@@Base+0x1c14>
   10e84:	mov    edx,0xd7
   10e89:	xor    eax,eax
   10e8b:	call   db00 <g_str_equal@plt+0x5748>
   10e90:	jmp    10e20 <g_str_equal@plt+0x8a68>
   10e92:	nop    WORD PTR [rax+rax*1+0x0]
   10e98:	mov    rdx,QWORD PTR [rsp+0x30]
   10e9d:	mov    rax,QWORD PTR [rsp+0x38]
   10ea2:	jmp    10dde <g_str_equal@plt+0x8a26>
   10ea7:	nop    WORD PTR [rax+rax*1+0x0]
   10eb0:	mov    esi,0x2b
   10eb5:	mov    rdi,r13
   10eb8:	call   7f90 <strchr@plt>
   10ebd:	test   rax,rax
   10ec0:	mov    r15,rax
   10ec3:	lea    rbp,[rax+0x1]
   10ec7:	jne    10d5d <g_str_equal@plt+0x89a5>
   10ecd:	lea    rsi,[rip+0x19ecc]        # 2ada0 <_fini@@Base+0x1b1c>
   10ed4:	mov    rdi,r13
   10ed7:	call   7eb0 <strstr@plt>
   10edc:	test   rax,rax
   10edf:	mov    r15,rax
   10ee2:	je     10ef0 <g_str_equal@plt+0x8b38>
   10ee4:	lea    rbp,[r15+0x2]
   10ee8:	jmp    10d5d <g_str_equal@plt+0x89a5>
   10eed:	nop    DWORD PTR [rax]
   10ef0:	mov    rdi,QWORD PTR [rsp+0x18]
   10ef5:	lea    r8,[rip+0x19ea7]        # 2ada3 <_fini@@Base+0x1b1f>
   10efc:	lea    rcx,[rip+0x1a35d]        # 2b260 <_fini@@Base+0x1fdc>
   10f03:	lea    rsi,[rip+0x19f8e]        # 2ae98 <_fini@@Base+0x1c14>
   10f0a:	mov    edx,0xb6
   10f0f:	xor    eax,eax
   10f11:	call   db00 <g_str_equal@plt+0x5748>
   10f16:	jmp    10e20 <g_str_equal@plt+0x8a68>
   10f1b:	nop    DWORD PTR [rax+rax*1+0x0]
   10f20:	sub    rsp,0x8
   10f24:	mov    r9d,ebp
   10f27:	lea    r8,[rip+0x19f42]        # 2ae70 <_fini@@Base+0x1bec>
   10f2e:	push   r15
   10f30:	lea    rcx,[rip+0x1a329]        # 2b260 <_fini@@Base+0x1fdc>
   10f37:	sub    r9d,r15d
   10f3a:	mov    edx,0xbd
   10f3f:	mov    rdi,QWORD PTR [rsp+0x28]
   10f44:	lea    rsi,[rip+0x19f4d]        # 2ae98 <_fini@@Base+0x1c14>
   10f4b:	xor    eax,eax
   10f4d:	call   db00 <g_str_equal@plt+0x5748>
   10f52:	pop    rax
   10f53:	pop    rdx
   10f54:	jmp    10e20 <g_str_equal@plt+0x8a68>
   10f59:	nop    DWORD PTR [rax+0x0]
   10f60:	sub    rsp,0x8
   10f64:	mov    r9d,ebp
   10f67:	lea    r8,[rip+0x19f62]        # 2aed0 <_fini@@Base+0x1c4c>
   10f6e:	push   r15
   10f70:	sub    r9d,r15d
   10f73:	lea    rcx,[rip+0x1a2e6]        # 2b260 <_fini@@Base+0x1fdc>
   10f7a:	mov    edx,0xc2
   10f7f:	jmp    10f3f <g_str_equal@plt+0x8b87>
   10f81:	call   8050 <__stack_chk_fail@plt>
   10f86:	nop    WORD PTR cs:[rax+rax*1+0x0]
   10f90:	mov    rdi,QWORD PTR [rip+0x22fdb1]        # 240d48 <stdout@@GLIBC_2.2.5+0x10a0>
   10f97:	jmp    8380 <fflush@plt>
   10f9c:	nop    DWORD PTR [rax+0x0]
   10fa0:	mov    rdi,QWORD PTR [rip+0x22fda1]        # 240d48 <stdout@@GLIBC_2.2.5+0x10a0>
   10fa7:	test   rdi,rdi
   10faa:	je     10fe0 <g_str_equal@plt+0x8c28>
   10fac:	cmp    rdi,QWORD PTR [rip+0x22eced]        # 23fca0 <stderr@@GLIBC_2.2.5>
   10fb3:	je     10fd0 <g_str_equal@plt+0x8c18>
   10fb5:	sub    rsp,0x8
   10fb9:	call   8110 <fclose@plt>
   10fbe:	mov    QWORD PTR [rip+0x22fd7f],0x0        # 240d48 <stdout@@GLIBC_2.2.5+0x10a0>
   10fc9:	add    rsp,0x8
   10fcd:	ret    
   10fce:	xchg   ax,ax
   10fd0:	mov    QWORD PTR [rip+0x22fd6d],0x0        # 240d48 <stdout@@GLIBC_2.2.5+0x10a0>
   10fdb:	ret    
   10fdc:	nop    DWORD PTR [rax+0x0]
   10fe0:	repz ret 
   10fe2:	nop    DWORD PTR [rax+0x0]
   10fe6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   10ff0:	sub    rsp,0x8
   10ff4:	or     edi,0x8000
   10ffa:	cmp    QWORD PTR [rip+0x22fd46],0x0        # 240d48 <stdout@@GLIBC_2.2.5+0x10a0>
   11002:	mov    DWORD PTR [rip+0x22fd38],edi        # 240d40 <stdout@@GLIBC_2.2.5+0x1098>
   11008:	je     11050 <g_str_equal@plt+0x8c98>
   1100a:	call   11510 <g_str_equal@plt+0x9158>
   1100f:	test   al,al
   11011:	jne    11030 <g_str_equal@plt+0x8c78>
   11013:	mov    eax,DWORD PTR [rip+0x22fd27]        # 240d40 <stdout@@GLIBC_2.2.5+0x1098>
   11019:	test   eax,eax
   1101b:	sete   al
   1101e:	test   al,al
   11020:	jne    1103f <g_str_equal@plt+0x8c87>
   11022:	add    rsp,0x8
   11026:	ret    
   11027:	nop    WORD PTR [rax+rax*1+0x0]
   11030:	cmp    QWORD PTR [rip+0x230d40],0x0        # 241d78 <stdout@@GLIBC_2.2.5+0x20d0>
   11038:	sete   al
   1103b:	test   al,al
   1103d:	je     11022 <g_str_equal@plt+0x8c6a>
   1103f:	add    rsp,0x8
   11043:	jmp    10fa0 <g_str_equal@plt+0x8be8>
   11048:	nop    DWORD PTR [rax+rax*1+0x0]
   11050:	call   11510 <g_str_equal@plt+0x9158>
   11055:	test   al,al
   11057:	je     110f0 <g_str_equal@plt+0x8d38>
   1105d:	cmp    QWORD PTR [rip+0x230d13],0x0        # 241d78 <stdout@@GLIBC_2.2.5+0x20d0>
   11065:	setne  al
   11068:	test   al,al
   1106a:	je     110da <g_str_equal@plt+0x8d22>
   1106c:	mov    rdi,QWORD PTR [rip+0x230d05]        # 241d78 <stdout@@GLIBC_2.2.5+0x20d0>
   11073:	test   rdi,rdi
   11076:	je     11150 <g_str_equal@plt+0x8d98>
   1107c:	mov    edx,DWORD PTR [rip+0x230cee]        # 241d70 <stdout@@GLIBC_2.2.5+0x20c8>
   11082:	lea    rax,[rip+0x1e04d]        # 2f0d6 <_fini@@Base+0x5e52>
   11089:	lea    rsi,[rip+0x1bd53]        # 2cde3 <_fini@@Base+0x3b5f>
   11090:	test   edx,edx
   11092:	cmovne rsi,rax
   11096:	call   8210 <fopen64@plt>
   1109b:	test   rax,rax
   1109e:	mov    QWORD PTR [rip+0x22fca3],rax        # 240d48 <stdout@@GLIBC_2.2.5+0x10a0>
   110a5:	je     1116c <g_str_equal@plt+0x8db4>
   110ab:	call   11510 <g_str_equal@plt+0x9158>
   110b0:	test   al,al
   110b2:	mov    rdi,QWORD PTR [rip+0x22fc8f]        # 240d48 <stdout@@GLIBC_2.2.5+0x10a0>
   110b9:	jne    11120 <g_str_equal@plt+0x8d68>
   110bb:	cmp    BYTE PTR [rip+0x230c9e],0x0        # 241d60 <stdout@@GLIBC_2.2.5+0x20b8>
   110c2:	je     11100 <g_str_equal@plt+0x8d48>
   110c4:	lea    rsi,[rip+0x22fc95]        # 240d60 <stdout@@GLIBC_2.2.5+0x10b8>
   110cb:	mov    ecx,0x1000
   110d0:	mov    edx,0x1
   110d5:	call   7aa0 <setvbuf@plt>
   110da:	cmp    QWORD PTR [rip+0x22fc66],0x0        # 240d48 <stdout@@GLIBC_2.2.5+0x10a0>
   110e2:	jne    1100a <g_str_equal@plt+0x8c52>
   110e8:	add    rsp,0x8
   110ec:	ret    
   110ed:	nop    DWORD PTR [rax]
   110f0:	mov    ecx,DWORD PTR [rip+0x22fc4a]        # 240d40 <stdout@@GLIBC_2.2.5+0x1098>
   110f6:	test   ecx,ecx
   110f8:	setne  al
   110fb:	jmp    11068 <g_str_equal@plt+0x8cb0>
   11100:	xor    ecx,ecx
   11102:	mov    edx,0x1
   11107:	xor    esi,esi
   11109:	call   7aa0 <setvbuf@plt>
   1110e:	mov    DWORD PTR [rip+0x230c58],0x1        # 241d70 <stdout@@GLIBC_2.2.5+0x20c8>
   11118:	jmp    110da <g_str_equal@plt+0x8d22>
   1111a:	nop    WORD PTR [rax+rax*1+0x0]
   11120:	call   78d0 <fileno@plt>
   11125:	mov    esi,0x2
   1112a:	mov    edi,eax
   1112c:	call   78f0 <dup2@plt>
   11131:	mov    rdi,QWORD PTR [rip+0x22fc10]        # 240d48 <stdout@@GLIBC_2.2.5+0x10a0>
   11138:	call   8110 <fclose@plt>
   1113d:	mov    rdi,QWORD PTR [rip+0x22eb5c]        # 23fca0 <stderr@@GLIBC_2.2.5>
   11144:	mov    QWORD PTR [rip+0x22fbfd],rdi        # 240d48 <stdout@@GLIBC_2.2.5+0x10a0>
   1114b:	jmp    110bb <g_str_equal@plt+0x8d03>
   11150:	call   11510 <g_str_equal@plt+0x9158>
   11155:	test   al,al
   11157:	jne    11182 <g_str_equal@plt+0x8dca>
   11159:	mov    rdi,QWORD PTR [rip+0x22eb40]        # 23fca0 <stderr@@GLIBC_2.2.5>
   11160:	mov    QWORD PTR [rip+0x22fbe1],rdi        # 240d48 <stdout@@GLIBC_2.2.5+0x10a0>
   11167:	jmp    110bb <g_str_equal@plt+0x8d03>
   1116c:	mov    rdi,QWORD PTR [rip+0x230c05]        # 241d78 <stdout@@GLIBC_2.2.5+0x20d0>
   11173:	call   8260 <perror@plt>
   11178:	mov    edi,0x1
   1117d:	call   7b40 <_exit@plt>
   11182:	lea    rcx,[rip+0x1a10f]        # 2b298 <_fini@@Base+0x2014>
   11189:	lea    rsi,[rip+0x19d08]        # 2ae98 <_fini@@Base+0x1c14>
   11190:	lea    rdi,[rip+0x19c20]        # 2adb7 <_fini@@Base+0x1b33>
   11197:	mov    edx,0x4f
   1119c:	call   7a70 <__assert_fail@plt>
   111a1:	nop    DWORD PTR [rax+rax*1+0x0]
   111a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   111b0:	push   rbp
   111b1:	push   rbx
   111b2:	mov    rbx,rdi
   111b5:	mov    rbp,rsi
   111b8:	sub    rsp,0x8
   111bc:	mov    rdi,QWORD PTR [rip+0x230bb5]        # 241d78 <stdout@@GLIBC_2.2.5+0x20d0>
   111c3:	call   7880 <g_free@plt>
   111c8:	mov    esi,0x25
   111cd:	mov    rdi,rbx
   111d0:	call   7f90 <strchr@plt>
   111d5:	test   rax,rax
   111d8:	je     11250 <g_str_equal@plt+0x8e98>
   111da:	cmp    BYTE PTR [rax+0x1],0x64
   111de:	jne    111f3 <g_str_equal@plt+0x8e3b>
   111e0:	lea    rdi,[rax+0x2]
   111e4:	mov    esi,0x25
   111e9:	call   7f90 <strchr@plt>
   111ee:	test   rax,rax
   111f1:	je     11220 <g_str_equal@plt+0x8e68>
   111f3:	add    rsp,0x8
   111f7:	mov    r9,rbx
   111fa:	mov    rdi,rbp
   111fd:	pop    rbx
   111fe:	pop    rbp
   111ff:	lea    r8,[rip+0x19bc2]        # 2adc8 <_fini@@Base+0x1b44>
   11206:	lea    rcx,[rip+0x1a073]        # 2b280 <_fini@@Base+0x1ffc>
   1120d:	lea    rsi,[rip+0x19c84]        # 2ae98 <_fini@@Base+0x1c14>
   11214:	mov    edx,0x7a
   11219:	xor    eax,eax
   1121b:	jmp    db00 <g_str_equal@plt+0x5748>
   11220:	call   7bf0 <getpid@plt>
   11225:	mov    rdi,rbx
   11228:	mov    esi,eax
   1122a:	xor    eax,eax
   1122c:	call   7ce0 <g_strdup_printf@plt>
   11231:	mov    QWORD PTR [rip+0x230b40],rax        # 241d78 <stdout@@GLIBC_2.2.5+0x20d0>
   11238:	call   10fa0 <g_str_equal@plt+0x8be8>
   1123d:	mov    edi,DWORD PTR [rip+0x22fafd]        # 240d40 <stdout@@GLIBC_2.2.5+0x1098>
   11243:	add    rsp,0x8
   11247:	pop    rbx
   11248:	pop    rbp
   11249:	jmp    10ff0 <g_str_equal@plt+0x8c38>
   1124e:	xchg   ax,ax
   11250:	mov    rdi,rbx
   11253:	call   7a50 <g_strdup@plt>
   11258:	mov    QWORD PTR [rip+0x230b19],rax        # 241d78 <stdout@@GLIBC_2.2.5+0x20d0>
   1125f:	jmp    11238 <g_str_equal@plt+0x8e80>
   11261:	nop    DWORD PTR [rax+rax*1+0x0]
   11266:	nop    WORD PTR cs:[rax+rax*1+0x0]
   11270:	push   r14
   11272:	lea    rsi,[rip+0x1dc36]        # 2eeaf <_fini@@Base+0x5c2b>
   11279:	push   r13
   1127b:	push   r12
   1127d:	push   rbp
   1127e:	xor    edx,edx
   11280:	push   rbx
   11281:	call   8080 <g_strsplit@plt>
   11286:	test   rax,rax
   11289:	mov    r12,rax
   1128c:	je     11385 <g_str_equal@plt+0x8fcd>
   11292:	mov    rdi,QWORD PTR [rax]
   11295:	test   rdi,rdi
   11298:	je     11385 <g_str_equal@plt+0x8fcd>
   1129e:	lea    r13,[rip+0x19b3a]        # 2addf <_fini@@Base+0x1b5b>
   112a5:	mov    rbp,rax
   112a8:	xor    ebx,ebx
   112aa:	lea    rsi,[rip+0x19b9b]        # 2ae4c <_fini@@Base+0x1bc8>
   112b1:	call   83b8 <g_str_equal@plt>
   112b6:	test   eax,eax
   112b8:	je     11308 <g_str_equal@plt+0x8f50>
   112ba:	mov    edx,0x2
   112bf:	lea    rax,[rip+0x22bc1a]        # 23cee0 <_fini@@Base+0x213c5c>
   112c6:	mov    ecx,0x1
   112cb:	jmp    112d5 <g_str_equal@plt+0x8f1d>
   112cd:	nop    DWORD PTR [rax]
   112d0:	mov    ecx,edx
   112d2:	mov    edx,DWORD PTR [rax+0x18]
   112d5:	or     ebx,ecx
   112d7:	add    rax,0x18
   112db:	test   edx,edx
   112dd:	jne    112d0 <g_str_equal@plt+0x8f18>
   112df:	add    rbp,0x8
   112e3:	je     112ee <g_str_equal@plt+0x8f36>
   112e5:	mov    rdi,QWORD PTR [rbp+0x0]
   112e9:	test   rdi,rdi
   112ec:	jne    112aa <g_str_equal@plt+0x8ef2>
   112ee:	mov    rdi,r12
   112f1:	call   81f0 <g_strfreev@plt>
   112f6:	mov    eax,ebx
   112f8:	pop    rbx
   112f9:	pop    rbp
   112fa:	pop    r12
   112fc:	pop    r13
   112fe:	pop    r14
   11300:	ret    
   11301:	nop    DWORD PTR [rax+0x0]
   11308:	mov    rdi,QWORD PTR [rbp+0x0]
   1130c:	lea    rsi,[rip+0x19ad4]        # 2ade7 <_fini@@Base+0x1b63>
   11313:	call   7fc0 <g_str_has_prefix@plt>
   11318:	test   eax,eax
   1131a:	mov    rdi,QWORD PTR [rbp+0x0]
   1131e:	je     11338 <g_str_equal@plt+0x8f80>
   11320:	cmp    BYTE PTR [rdi+0x6],0x0
   11324:	je     11338 <g_str_equal@plt+0x8f80>
   11326:	add    rdi,0x6
   1132a:	or     bh,0x80
   1132d:	call   12d60 <g_str_equal@plt+0xa9a8>
   11332:	jmp    112df <g_str_equal@plt+0x8f27>
   11334:	nop    DWORD PTR [rax+0x0]
   11338:	mov    rsi,r13
   1133b:	lea    r14,[rip+0x22bb9e]        # 23cee0 <_fini@@Base+0x213c5c>
   11342:	jmp    1135b <g_str_equal@plt+0x8fa3>
   11344:	nop    DWORD PTR [rax+0x0]
   11348:	add    r14,0x18
   1134c:	mov    eax,DWORD PTR [r14]
   1134f:	test   eax,eax
   11351:	je     11370 <g_str_equal@plt+0x8fb8>
   11353:	mov    rsi,QWORD PTR [r14+0x8]
   11357:	mov    rdi,QWORD PTR [rbp+0x0]
   1135b:	call   83b8 <g_str_equal@plt>
   11360:	test   eax,eax
   11362:	je     11348 <g_str_equal@plt+0x8f90>
   11364:	or     ebx,DWORD PTR [r14]
   11367:	jmp    112df <g_str_equal@plt+0x8f27>
   1136c:	nop    DWORD PTR [rax+0x0]
   11370:	mov    rdi,r12
   11373:	xor    ebx,ebx
   11375:	call   81f0 <g_strfreev@plt>
   1137a:	mov    eax,ebx
   1137c:	pop    rbx
   1137d:	pop    rbp
   1137e:	pop    r12
   11380:	pop    r13
   11382:	pop    r14
   11384:	ret    
   11385:	xor    ebx,ebx
   11387:	jmp    112ee <g_str_equal@plt+0x8f36>
   1138c:	nop    DWORD PTR [rax+0x0]
   11390:	push   r12
   11392:	mov    rcx,rdi
   11395:	push   rbp
   11396:	mov    rbp,rdi
   11399:	push   rbx
   1139a:	lea    rdi,[rip+0x19a4d]        # 2adee <_fini@@Base+0x1b6a>
   113a1:	mov    edx,0x1d
   113a6:	mov    esi,0x1
   113ab:	lea    rbx,[rip+0x22bb2e]        # 23cee0 <_fini@@Base+0x213c5c>
   113b2:	call   8240 <fwrite@plt>
   113b7:	lea    r12,[rip+0x19a4e]        # 2ae0c <_fini@@Base+0x1b88>
   113be:	lea    rcx,[rip+0x19a1a]        # 2addf <_fini@@Base+0x1b5b>
   113c5:	lea    r8,[rip+0x19b2c]        # 2aef8 <_fini@@Base+0x1c74>
   113cc:	jmp    113d8 <g_str_equal@plt+0x9020>
   113ce:	xchg   ax,ax
   113d0:	mov    r8,QWORD PTR [rbx+0x10]
   113d4:	mov    rcx,QWORD PTR [rbx+0x8]
   113d8:	xor    eax,eax
   113da:	add    rbx,0x18
   113de:	mov    rdx,r12
   113e1:	mov    esi,0x1
   113e6:	mov    rdi,rbp
   113e9:	call   79e0 <__fprintf_chk@plt>
   113ee:	mov    eax,DWORD PTR [rbx]
   113f0:	test   eax,eax
   113f2:	jne    113d0 <g_str_equal@plt+0x9018>
   113f4:	lea    rdi,[rip+0x19b35]        # 2af30 <_fini@@Base+0x1cac>
   113fb:	mov    rcx,rbp
   113fe:	mov    edx,0x24
   11403:	mov    esi,0x1
   11408:	call   8240 <fwrite@plt>
   1140d:	pop    rbx
   1140e:	mov    rcx,rbp
   11411:	lea    rdi,[rip+0x19b40]        # 2af58 <_fini@@Base+0x1cd4>
   11418:	mov    edx,0x35
   1141d:	pop    rbp
   1141e:	pop    r12
   11420:	mov    esi,0x1
   11425:	jmp    8240 <fwrite@plt>
   1142a:	nop    WORD PTR [rax+rax*1+0x0]
   11430:	lea    rdi,[rip+0x22cc09]        # 23e040 <g_test_config_vars+0x920>
   11437:	jmp    12ab0 <g_str_equal@plt+0xa6f8>
   1143c:	nop    DWORD PTR [rax+0x0]
   11440:	push   rbp
   11441:	push   rbx
   11442:	mov    rbp,rsi
   11445:	mov    rbx,rdi
   11448:	sub    rsp,0x8
   1144c:	mov    rax,QWORD PTR [rip+0x22c2cd]        # 23d720 <g_test_config_vars>
   11453:	mov    eax,DWORD PTR [rax]
   11455:	test   eax,eax
   11457:	je     11462 <g_str_equal@plt+0x90aa>
   11459:	call   7f30 <g_test_subprocess@plt>
   1145e:	test   eax,eax
   11460:	je     11480 <g_str_equal@plt+0x90c8>
   11462:	mov    rdi,QWORD PTR [rip+0x22e837]        # 23fca0 <stderr@@GLIBC_2.2.5>
   11469:	add    rsp,0x8
   1146d:	mov    rcx,rbp
   11470:	mov    rdx,rbx
   11473:	mov    esi,0x1
   11478:	pop    rbx
   11479:	pop    rbp
   1147a:	jmp    7d30 <__vfprintf_chk@plt>
   1147f:	nop
   11480:	lea    rdi,[rip+0x1a220]        # 2b6a7 <_fini@@Base+0x2423>
   11487:	call   7fb0 <getenv@plt>
   1148c:	test   rax,rax
   1148f:	je     11462 <g_str_equal@plt+0x90aa>
   11491:	mov    rsi,rbp
   11494:	mov    rdi,rbx
   11497:	call   7e50 <g_strdup_vprintf@plt>
   1149c:	lea    rdi,[rip+0x1d4b7]        # 2e95a <_fini@@Base+0x56d6>
   114a3:	mov    rbx,rax
   114a6:	mov    rsi,rax
   114a9:	xor    eax,eax
   114ab:	call   7a10 <g_test_message@plt>
   114b0:	add    rsp,0x8
   114b4:	mov    rdi,rbx
   114b7:	pop    rbx
   114b8:	pop    rbp
   114b9:	jmp    7880 <g_free@plt>
   114be:	xchg   ax,ax
   114c0:	jmp    11440 <g_str_equal@plt+0x9088>
   114c5:	nop    WORD PTR cs:[rax+rax*1+0x0]
   114cf:	nop
   114d0:	mov    eax,0xffffffff
   114d5:	ret    
   114d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   114e0:	mov    eax,0xffffffff
   114e5:	ret    
   114e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   114f0:	mov    eax,0xfffffffe
   114f5:	ret    
   114f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   11500:	repz ret 
   11502:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1150c:	nop    DWORD PTR [rax+0x0]
   11510:	xor    eax,eax
   11512:	ret    
   11513:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1151d:	nop    DWORD PTR [rax]
   11520:	lea    r8,[rip+0x1a199]        # 2b6c0 <_fini@@Base+0x243c>
   11527:	lea    rcx,[rip+0x1a202]        # 2b730 <_fini@@Base+0x24ac>
   1152e:	lea    rsi,[rip+0x1a1bb]        # 2b6f0 <_fini@@Base+0x246c>
   11535:	sub    rsp,0x8
   11539:	mov    rdi,rdx
   1153c:	xor    eax,eax
   1153e:	mov    edx,0xa
   11543:	call   db00 <g_str_equal@plt+0x5748>
   11548:	mov    eax,0xffffffff
   1154d:	add    rsp,0x8
   11551:	ret    
   11552:	nop    DWORD PTR [rax+0x0]
   11556:	nop    WORD PTR cs:[rax+rax*1+0x0]
   11560:	repz ret 
   11562:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1156c:	nop    DWORD PTR [rax+0x0]
   11570:	push   rbx
   11571:	mov    rbx,rdi
   11574:	mov    edi,0x20
   11579:	call   7b50 <g_malloc@plt>
   1157e:	mov    QWORD PTR [rax+0x8],0x1
   11586:	mov    DWORD PTR [rax],0x2
   1158c:	mov    DWORD PTR [rax+0x10],0x0
   11593:	mov    QWORD PTR [rax+0x18],rbx
   11597:	pop    rbx
   11598:	ret    
   11599:	nop    DWORD PTR [rax+0x0]
   115a0:	push   rbx
   115a1:	mov    rbx,rdi
   115a4:	mov    edi,0x20
   115a9:	call   7b50 <g_malloc@plt>
   115ae:	mov    QWORD PTR [rax+0x8],0x1
   115b6:	mov    DWORD PTR [rax],0x2
   115bc:	mov    DWORD PTR [rax+0x10],0x1
   115c3:	mov    QWORD PTR [rax+0x18],rbx
   115c7:	pop    rbx
   115c8:	ret    
   115c9:	nop    DWORD PTR [rax+0x0]
   115d0:	sub    rsp,0x18
   115d4:	mov    edi,0x20
   115d9:	movsd  QWORD PTR [rsp+0x8],xmm0
   115df:	call   7b50 <g_malloc@plt>
   115e4:	movsd  xmm0,QWORD PTR [rsp+0x8]
   115ea:	mov    QWORD PTR [rax+0x8],0x1
   115f2:	mov    DWORD PTR [rax],0x2
   115f8:	mov    DWORD PTR [rax+0x10],0x2
   115ff:	movsd  QWORD PTR [rax+0x18],xmm0
   11604:	add    rsp,0x18
   11608:	ret    
   11609:	nop    DWORD PTR [rax+0x0]
   11610:	mov    eax,DWORD PTR [rdi+0x10]
   11613:	cmp    eax,0x1
   11616:	je     11638 <g_str_equal@plt+0x9280>
   11618:	jb     11628 <g_str_equal@plt+0x9270>
   1161a:	cmp    eax,0x2
   1161d:	jne    1164c <g_str_equal@plt+0x9294>
   1161f:	xor    eax,eax
   11621:	repz ret 
   11623:	nop    DWORD PTR [rax+rax*1+0x0]
   11628:	mov    rax,QWORD PTR [rdi+0x18]
   1162c:	mov    QWORD PTR [rsi],rax
   1162f:	mov    eax,0x1
   11634:	ret    
   11635:	nop    DWORD PTR [rax]
   11638:	mov    rdx,QWORD PTR [rdi+0x18]
   1163c:	xor    eax,eax
   1163e:	test   rdx,rdx
   11641:	js     11621 <g_str_equal@plt+0x9269>
   11643:	mov    QWORD PTR [rsi],rdx
   11646:	mov    eax,0x1
   1164b:	ret    
   1164c:	lea    rcx,[rip+0x1a1cd]        # 2b820 <_fini@@Base+0x259c>
   11653:	lea    rsi,[rip+0x1a0e6]        # 2b740 <_fini@@Base+0x24bc>
   1165a:	lea    rdi,[rip+0x188d0]        # 29f31 <_fini@@Base+0xcad>
   11661:	sub    rsp,0x8
   11665:	mov    edx,0x58
   1166a:	call   7a70 <__assert_fail@plt>
   1166f:	nop
   11670:	sub    rsp,0x18
   11674:	mov    rsi,rsp
   11677:	mov    rax,QWORD PTR fs:0x28
   11680:	mov    QWORD PTR [rsp+0x8],rax
   11685:	xor    eax,eax
   11687:	call   11610 <g_str_equal@plt+0x9258>
   1168c:	test   al,al
   1168e:	je     116a9 <g_str_equal@plt+0x92f1>
   11690:	mov    rdx,QWORD PTR [rsp+0x8]
   11695:	xor    rdx,QWORD PTR fs:0x28
   1169e:	mov    rax,QWORD PTR [rsp]
   116a2:	jne    116c8 <g_str_equal@plt+0x9310>
   116a4:	add    rsp,0x18
   116a8:	ret    
   116a9:	lea    rcx,[rip+0x1a158]        # 2b808 <_fini@@Base+0x2584>
   116b0:	lea    rsi,[rip+0x1a089]        # 2b740 <_fini@@Base+0x24bc>
   116b7:	lea    rdi,[rip+0x19d8c]        # 2b44a <_fini@@Base+0x21c6>
   116be:	mov    edx,0x65
   116c3:	call   7a70 <__assert_fail@plt>
   116c8:	call   8050 <__stack_chk_fail@plt>
   116cd:	nop    DWORD PTR [rax]
   116d0:	mov    eax,DWORD PTR [rdi+0x10]
   116d3:	cmp    eax,0x1
   116d6:	je     116f1 <g_str_equal@plt+0x9339>
   116d8:	jb     116e8 <g_str_equal@plt+0x9330>
   116da:	cmp    eax,0x2
   116dd:	jne    116fe <g_str_equal@plt+0x9346>
   116df:	xor    eax,eax
   116e1:	repz ret 
   116e3:	nop    DWORD PTR [rax+rax*1+0x0]
   116e8:	xor    eax,eax
   116ea:	cmp    QWORD PTR [rdi+0x18],0x0
   116ef:	js     116e1 <g_str_equal@plt+0x9329>
   116f1:	mov    rax,QWORD PTR [rdi+0x18]
   116f5:	mov    QWORD PTR [rsi],rax
   116f8:	mov    eax,0x1
   116fd:	ret    
   116fe:	lea    rcx,[rip+0x1a0eb]        # 2b7f0 <_fini@@Base+0x256c>
   11705:	lea    rsi,[rip+0x1a034]        # 2b740 <_fini@@Base+0x24bc>
   1170c:	lea    rdi,[rip+0x1881e]        # 29f31 <_fini@@Base+0xcad>
   11713:	sub    rsp,0x8
   11717:	mov    edx,0x7e
   1171c:	call   7a70 <__assert_fail@plt>
   11721:	nop    DWORD PTR [rax+rax*1+0x0]
   11726:	nop    WORD PTR cs:[rax+rax*1+0x0]
   11730:	sub    rsp,0x18
   11734:	mov    rsi,rsp
   11737:	mov    rax,QWORD PTR fs:0x28
   11740:	mov    QWORD PTR [rsp+0x8],rax
   11745:	xor    eax,eax
   11747:	call   116d0 <g_str_equal@plt+0x9318>
   1174c:	test   al,al
   1174e:	je     11769 <g_str_equal@plt+0x93b1>
   11750:	mov    rdx,QWORD PTR [rsp+0x8]
   11755:	xor    rdx,QWORD PTR fs:0x28
   1175e:	mov    rax,QWORD PTR [rsp]
   11762:	jne    11788 <g_str_equal@plt+0x93d0>
   11764:	add    rsp,0x18
   11768:	ret    
   11769:	lea    rcx,[rip+0x1a070]        # 2b7e0 <_fini@@Base+0x255c>
   11770:	lea    rsi,[rip+0x19fc9]        # 2b740 <_fini@@Base+0x24bc>
   11777:	lea    rdi,[rip+0x19ccc]        # 2b44a <_fini@@Base+0x21c6>
   1177e:	mov    edx,0x8b
   11783:	call   7a70 <__assert_fail@plt>
   11788:	call   8050 <__stack_chk_fail@plt>
   1178d:	nop    DWORD PTR [rax]
   11790:	mov    eax,DWORD PTR [rdi+0x10]
   11793:	cmp    eax,0x1
   11796:	je     117b8 <g_str_equal@plt+0x9400>
   11798:	jb     117a8 <g_str_equal@plt+0x93f0>
   1179a:	cmp    eax,0x2
   1179d:	jne    117ea <g_str_equal@plt+0x9432>
   1179f:	movsd  xmm0,QWORD PTR [rdi+0x18]
   117a4:	ret    
   117a5:	nop    DWORD PTR [rax]
   117a8:	pxor   xmm0,xmm0
   117ac:	cvtsi2sd xmm0,QWORD PTR [rdi+0x18]
   117b2:	ret    
   117b3:	nop    DWORD PTR [rax+rax*1+0x0]
   117b8:	mov    rax,QWORD PTR [rdi+0x18]
   117bc:	test   rax,rax
   117bf:	js     117d0 <g_str_equal@plt+0x9418>
   117c1:	pxor   xmm0,xmm0
   117c5:	cvtsi2sd xmm0,rax
   117ca:	ret    
   117cb:	nop    DWORD PTR [rax+rax*1+0x0]
   117d0:	mov    rdx,rax
   117d3:	pxor   xmm0,xmm0
   117d7:	shr    rdx,1
   117da:	and    eax,0x1
   117dd:	or     rdx,rax
   117e0:	cvtsi2sd xmm0,rdx
   117e5:	addsd  xmm0,xmm0
   117e9:	ret    
   117ea:	lea    rcx,[rip+0x19fdf]        # 2b7d0 <_fini@@Base+0x254c>
   117f1:	lea    rsi,[rip+0x19f48]        # 2b740 <_fini@@Base+0x24bc>
   117f8:	lea    rdi,[rip+0x18732]        # 29f31 <_fini@@Base+0xcad>
   117ff:	sub    rsp,0x8
   11803:	mov    edx,0x9f
   11808:	call   7a70 <__assert_fail@plt>
   1180d:	nop    DWORD PTR [rax]
   11810:	mov    eax,DWORD PTR [rdi+0x10]
   11813:	cmp    eax,0x1
   11816:	je     118c8 <g_str_equal@plt+0x9510>
   1181c:	jb     118b0 <g_str_equal@plt+0x94f8>
   11822:	cmp    eax,0x2
   11825:	push   rbx
   11826:	jne    118fe <g_str_equal@plt+0x9546>
   1182c:	movsd  xmm0,QWORD PTR [rdi+0x18]
   11831:	lea    rdi,[rip+0x19f44]        # 2b77c <_fini@@Base+0x24f8>
   11838:	mov    eax,0x1
   1183d:	call   7ce0 <g_strdup_printf@plt>
   11842:	mov    rdi,rax
   11845:	mov    rbx,rax
   11848:	call   7cd0 <strlen@plt>
   1184d:	cmp    eax,0x0
   11850:	mov    edx,eax
   11852:	jle    118e0 <g_str_equal@plt+0x9528>
   11858:	movsxd rsi,eax
   1185b:	lea    r8,[rbx+rsi*1-0x1]
   11860:	movzx  ecx,BYTE PTR [r8]
   11864:	cmp    cl,0x30
   11867:	jne    118f0 <g_str_equal@plt+0x9538>
   1186d:	sub    eax,0x1
   11870:	mov    edi,0x1
   11875:	cdqe   
   11877:	sub    rdi,rbx
   1187a:	lea    rax,[rbx+rax*1-0x1]
   1187f:	jmp    1189c <g_str_equal@plt+0x94e4>
   11881:	nop    DWORD PTR [rax+0x0]
   11888:	lea    rsi,[rdi+rax*1]
   1188c:	mov    r8,rax
   1188f:	sub    rax,0x1
   11893:	movzx  ecx,BYTE PTR [rax+0x1]
   11897:	cmp    cl,0x30
   1189a:	jne    118f0 <g_str_equal@plt+0x9538>
   1189c:	sub    edx,0x1
   1189f:	jne    11888 <g_str_equal@plt+0x94d0>
   118a1:	mov    rsi,rbx
   118a4:	mov    BYTE PTR [rsi],0x0
   118a7:	mov    rax,rbx
   118aa:	pop    rbx
   118ab:	ret    
   118ac:	nop    DWORD PTR [rax+0x0]
   118b0:	mov    rsi,QWORD PTR [rdi+0x18]
   118b4:	lea    rdi,[rip+0x1927b]        # 2ab36 <_fini@@Base+0x18b2>
   118bb:	xor    eax,eax
   118bd:	jmp    7ce0 <g_strdup_printf@plt>
   118c2:	nop    WORD PTR [rax+rax*1+0x0]
   118c8:	mov    rsi,QWORD PTR [rdi+0x18]
   118cc:	lea    rdi,[rip+0x19ea5]        # 2b778 <_fini@@Base+0x24f4>
   118d3:	xor    eax,eax
   118d5:	jmp    7ce0 <g_strdup_printf@plt>
   118da:	nop    WORD PTR [rax+rax*1+0x0]
   118e0:	je     118a1 <g_str_equal@plt+0x94e9>
   118e2:	movsxd rsi,eax
   118e5:	lea    r8,[rbx+rsi*1-0x1]
   118ea:	movzx  ecx,BYTE PTR [r8]
   118ee:	xchg   ax,ax
   118f0:	add    rsi,rbx
   118f3:	cmp    cl,0x2e
   118f6:	jne    118a4 <g_str_equal@plt+0x94ec>
   118f8:	mov    BYTE PTR [r8],0x0
   118fc:	jmp    118a7 <g_str_equal@plt+0x94ef>
   118fe:	lea    rcx,[rip+0x19eb3]        # 2b7b8 <_fini@@Base+0x2534>
   11905:	lea    rsi,[rip+0x19e34]        # 2b740 <_fini@@Base+0x24bc>
   1190c:	lea    rdi,[rip+0x1861e]        # 29f31 <_fini@@Base+0xcad>
   11913:	mov    edx,0xc6
   11918:	call   7a70 <__assert_fail@plt>
   1191d:	nop    DWORD PTR [rax]
   11920:	sub    rsp,0x8
   11924:	xor    r8d,r8d
   11927:	test   rdi,rdi
   1192a:	je     119f0 <g_str_equal@plt+0x9638>
   11930:	mov    eax,DWORD PTR [rdi]
   11932:	lea    edx,[rax-0x1]
   11935:	cmp    edx,0x5
   11938:	ja     11a4c <g_str_equal@plt+0x9694>
   1193e:	cmp    eax,0x2
   11941:	mov    rax,r8
   11944:	cmove  rax,rdi
   11948:	test   rsi,rsi
   1194b:	je     119fb <g_str_equal@plt+0x9643>
   11951:	mov    edx,DWORD PTR [rsi]
   11953:	lea    ecx,[rdx-0x1]
   11956:	cmp    ecx,0x5
   11959:	ja     11a4c <g_str_equal@plt+0x9694>
   1195f:	cmp    edx,0x2
   11962:	mov    rdx,r8
   11965:	cmove  rdx,rsi
   11969:	mov    ecx,DWORD PTR [rax+0x10]
   1196c:	cmp    ecx,0x1
   1196f:	je     119d0 <g_str_equal@plt+0x9618>
   11971:	jb     119b0 <g_str_equal@plt+0x95f8>
   11973:	cmp    ecx,0x2
   11976:	jne    11a47 <g_str_equal@plt+0x968f>
   1197c:	mov    ecx,DWORD PTR [rdx+0x10]
   1197f:	cmp    ecx,0x1
   11982:	jbe    119c3 <g_str_equal@plt+0x960b>
   11984:	cmp    ecx,0x2
   11987:	jne    11a47 <g_str_equal@plt+0x968f>
   1198d:	movsd  xmm0,QWORD PTR [rax+0x18]
   11992:	ucomisd xmm0,QWORD PTR [rdx+0x18]
   11997:	mov    edx,0x0
   1199c:	setnp  al
   1199f:	cmovne eax,edx
   119a2:	add    rsp,0x8
   119a6:	ret    
   119a7:	nop    WORD PTR [rax+rax*1+0x0]
   119b0:	mov    ecx,DWORD PTR [rdx+0x10]
   119b3:	cmp    ecx,0x1
   119b6:	je     11a30 <g_str_equal@plt+0x9678>
   119b8:	jb     11a08 <g_str_equal@plt+0x9650>
   119ba:	cmp    ecx,0x2
   119bd:	jne    11a47 <g_str_equal@plt+0x968f>
   119c3:	xor    eax,eax
   119c5:	add    rsp,0x8
   119c9:	ret    
   119ca:	nop    WORD PTR [rax+rax*1+0x0]
   119d0:	mov    ecx,DWORD PTR [rdx+0x10]
   119d3:	cmp    ecx,0x1
   119d6:	je     11a20 <g_str_equal@plt+0x9668>
   119d8:	jae    119ba <g_str_equal@plt+0x9602>
   119da:	mov    rax,rdi
   119dd:	mov    rdi,rsi
   119e0:	test   rdi,rdi
   119e3:	mov    rsi,rax
   119e6:	jne    11930 <g_str_equal@plt+0x9578>
   119ec:	nop    DWORD PTR [rax+0x0]
   119f0:	xor    eax,eax
   119f2:	test   rsi,rsi
   119f5:	jne    11951 <g_str_equal@plt+0x9599>
   119fb:	xor    edx,edx
   119fd:	jmp    11969 <g_str_equal@plt+0x95b1>
   11a02:	nop    WORD PTR [rax+rax*1+0x0]
   11a08:	mov    rsi,QWORD PTR [rdx+0x18]
   11a0c:	cmp    QWORD PTR [rax+0x18],rsi
   11a10:	sete   al
   11a13:	add    rsp,0x8
   11a17:	ret    
   11a18:	nop    DWORD PTR [rax+rax*1+0x0]
   11a20:	mov    rdi,QWORD PTR [rdx+0x18]
   11a24:	cmp    QWORD PTR [rax+0x18],rdi
   11a28:	sete   al
   11a2b:	add    rsp,0x8
   11a2f:	ret    
   11a30:	mov    rcx,QWORD PTR [rax+0x18]
   11a34:	xor    eax,eax
   11a36:	test   rcx,rcx
   11a39:	js     119c5 <g_str_equal@plt+0x960d>
   11a3b:	cmp    QWORD PTR [rdx+0x18],rcx
   11a3f:	sete   al
   11a42:	jmp    119c5 <g_str_equal@plt+0x960d>
   11a47:	call   79c0 <abort@plt>
   11a4c:	call   8420 <g_str_equal@plt+0x68>
   11a51:	nop    DWORD PTR [rax+rax*1+0x0]
   11a56:	nop    WORD PTR cs:[rax+rax*1+0x0]
   11a60:	sub    rsp,0x8
   11a64:	test   rdi,rdi
   11a67:	je     11a88 <g_str_equal@plt+0x96d0>
   11a69:	mov    eax,DWORD PTR [rdi]
   11a6b:	lea    edx,[rax-0x1]
   11a6e:	cmp    edx,0x5
   11a71:	ja     11aa7 <g_str_equal@plt+0x96ef>
   11a73:	cmp    eax,0x2
   11a76:	mov    eax,0x0
   11a7b:	cmovne rdi,rax
   11a7f:	add    rsp,0x8
   11a83:	jmp    7880 <g_free@plt>
   11a88:	lea    rcx,[rip+0x19d01]        # 2b790 <_fini@@Base+0x250c>
   11a8f:	lea    rsi,[rip+0x19caa]        # 2b740 <_fini@@Base+0x24bc>
   11a96:	lea    rdi,[rip+0x19ce2]        # 2b77f <_fini@@Base+0x24fb>
   11a9d:	mov    edx,0x106
   11aa2:	call   7a70 <__assert_fail@plt>
   11aa7:	call   8420 <g_str_equal@plt+0x68>
   11aac:	nop    DWORD PTR [rax+0x0]
   11ab0:	mov    rdx,QWORD PTR [rdi+0x18]
   11ab4:	mov    rax,QWORD PTR [rdi+0x20]
   11ab8:	add    rdx,rsi
   11abb:	cmp    rax,rdx
   11abe:	jae    11af8 <g_str_equal@plt+0x9740>
   11ac0:	mov    rdx,rax
   11ac3:	push   rbx
   11ac4:	mov    rbx,rdi
   11ac7:	not    rdx
   11aca:	cmp    rdx,rsi
   11acd:	jb     11b19 <g_str_equal@plt+0x9761>
   11acf:	add    rax,rsi
   11ad2:	test   rax,rax
   11ad5:	mov    QWORD PTR [rdi+0x20],rax
   11ad9:	js     11afa <g_str_equal@plt+0x9742>
   11adb:	add    rax,rax
   11ade:	mov    QWORD PTR [rdi+0x20],rax
   11ae2:	mov    rdi,QWORD PTR [rdi+0x10]
   11ae6:	lea    rsi,[rax+0x1]
   11aea:	call   8010 <g_realloc@plt>
   11aef:	mov    QWORD PTR [rbx+0x10],rax
   11af3:	pop    rbx
   11af4:	ret    
   11af5:	nop    DWORD PTR [rax]
   11af8:	repz ret 
   11afa:	lea    rcx,[rip+0x19e1f]        # 2b920 <_fini@@Base+0x269c>
   11b01:	lea    rsi,[rip+0x19d30]        # 2b838 <_fini@@Base+0x25b4>
   11b08:	lea    rdi,[rip+0x19d91]        # 2b8a0 <_fini@@Base+0x261c>
   11b0f:	mov    edx,0x4b
   11b14:	call   7a70 <__assert_fail@plt>
   11b19:	lea    rcx,[rip+0x19e00]        # 2b920 <_fini@@Base+0x269c>
   11b20:	lea    rsi,[rip+0x19d11]        # 2b838 <_fini@@Base+0x25b4>
   11b27:	lea    rdi,[rip+0x19d4a]        # 2b878 <_fini@@Base+0x25f4>
   11b2e:	mov    edx,0x49
   11b33:	call   7a70 <__assert_fail@plt>
   11b38:	nop    DWORD PTR [rax+rax*1+0x0]
   11b40:	mov    rax,QWORD PTR [rdi+0x18]
   11b44:	ret    
   11b45:	nop
   11b46:	nop    WORD PTR cs:[rax+rax*1+0x0]
   11b50:	push   r13
   11b52:	push   r12
   11b54:	push   rbp
   11b55:	push   rbx
   11b56:	sub    rsp,0x8
   11b5a:	cmp    rsi,rdx
   11b5d:	ja     11bc7 <g_str_equal@plt+0x980f>
   11b5f:	mov    r12,rsi
   11b62:	mov    rbx,rdx
   11b65:	mov    r13,rdi
   11b68:	sub    rbx,r12
   11b6b:	mov    edi,0x28
   11b70:	call   7b50 <g_malloc@plt>
   11b75:	cmp    rbx,0xffffffffffffffff
   11b79:	mov    rbp,rax
   11b7c:	mov    QWORD PTR [rax+0x8],0x1
   11b84:	mov    DWORD PTR [rax],0x3
   11b8a:	mov    QWORD PTR [rbp+0x18],rbx
   11b8e:	mov    QWORD PTR [rbp+0x20],rbx
   11b92:	je     11be6 <g_str_equal@plt+0x982e>
   11b94:	lea    rdi,[rbx+0x1]
   11b98:	call   7b50 <g_malloc@plt>
   11b9d:	mov    rbx,QWORD PTR [rbp+0x18]
   11ba1:	lea    rsi,[r13+r12*1+0x0]
   11ba6:	mov    QWORD PTR [rbp+0x10],rax
   11baa:	mov    rdi,rax
   11bad:	mov    rdx,rbx
   11bb0:	call   8330 <memcpy@plt>
   11bb5:	mov    BYTE PTR [rax+rbx*1],0x0
   11bb9:	add    rsp,0x8
   11bbd:	mov    rax,rbp
   11bc0:	pop    rbx
   11bc1:	pop    rbp
   11bc2:	pop    r12
   11bc4:	pop    r13
   11bc6:	ret    
   11bc7:	lea    rcx,[rip+0x19d72]        # 2b940 <_fini@@Base+0x26bc>
   11bce:	lea    rsi,[rip+0x19c63]        # 2b838 <_fini@@Base+0x25b4>
   11bd5:	lea    rdi,[rip+0x19ce6]        # 2b8c2 <_fini@@Base+0x263e>
   11bdc:	mov    edx,0x2c
   11be1:	call   7a70 <__assert_fail@plt>
   11be6:	lea    rcx,[rip+0x19d53]        # 2b940 <_fini@@Base+0x26bc>
   11bed:	lea    rsi,[rip+0x19c44]        # 2b838 <_fini@@Base+0x25b4>
   11bf4:	lea    rdi,[rip+0x19cd4]        # 2b8cf <_fini@@Base+0x264b>
   11bfb:	mov    edx,0x34
   11c00:	call   7a70 <__assert_fail@plt>
   11c05:	nop
   11c06:	nop    WORD PTR cs:[rax+rax*1+0x0]
   11c10:	push   rbx
   11c11:	mov    rbx,rdi
   11c14:	call   7cd0 <strlen@plt>
   11c19:	mov    rdi,rbx
   11c1c:	mov    rdx,rax
   11c1f:	xor    esi,esi
   11c21:	pop    rbx
   11c22:	jmp    11b50 <g_str_equal@plt+0x9798>
   11c27:	nop    WORD PTR [rax+rax*1+0x0]
   11c30:	lea    rdi,[rip+0x1ce07]        # 2ea3e <_fini@@Base+0x57ba>
   11c37:	jmp    11c10 <g_str_equal@plt+0x9858>
   11c39:	nop    DWORD PTR [rax+0x0]
   11c40:	push   r12
   11c42:	push   rbp
   11c43:	mov    rbp,rdi
   11c46:	push   rbx
   11c47:	mov    rdi,rsi
   11c4a:	mov    r12,rsi
   11c4d:	call   7cd0 <strlen@plt>
   11c52:	mov    rdi,rbp
   11c55:	mov    rsi,rax
   11c58:	mov    rbx,rax
   11c5b:	call   11ab0 <g_str_equal@plt+0x96f8>
   11c60:	mov    rdi,QWORD PTR [rbp+0x18]
   11c64:	add    rdi,QWORD PTR [rbp+0x10]
   11c68:	mov    rdx,rbx
   11c6b:	mov    rsi,r12
   11c6e:	call   8330 <memcpy@plt>
   11c73:	add    rbx,QWORD PTR [rbp+0x18]
   11c77:	mov    rax,QWORD PTR [rbp+0x10]
   11c7b:	mov    QWORD PTR [rbp+0x18],rbx
   11c7f:	mov    BYTE PTR [rax+rbx*1],0x0
   11c83:	pop    rbx
   11c84:	pop    rbp
   11c85:	pop    r12
   11c87:	ret    
   11c88:	nop    DWORD PTR [rax+rax*1+0x0]
   11c90:	push   rbp
   11c91:	push   rbx
   11c92:	lea    r8,[rip+0x18e9d]        # 2ab36 <_fini@@Base+0x18b2>
   11c99:	mov    r9,rsi
   11c9c:	mov    rbp,rdi
   11c9f:	mov    ecx,0x20
   11ca4:	sub    rsp,0x38
   11ca8:	mov    edx,0x1
   11cad:	mov    esi,0x20
   11cb2:	mov    rax,QWORD PTR fs:0x28
   11cbb:	mov    QWORD PTR [rsp+0x28],rax
   11cc0:	xor    eax,eax
   11cc2:	mov    rbx,rsp
   11cc5:	mov    rdi,rbx
   11cc8:	call   81b0 <__snprintf_chk@plt>
   11ccd:	mov    rsi,rbx
   11cd0:	mov    rdi,rbp
   11cd3:	call   11c40 <g_str_equal@plt+0x9888>
   11cd8:	mov    rax,QWORD PTR [rsp+0x28]
   11cdd:	xor    rax,QWORD PTR fs:0x28
   11ce6:	jne    11cef <g_str_equal@plt+0x9937>
   11ce8:	add    rsp,0x38
   11cec:	pop    rbx
   11ced:	pop    rbp
   11cee:	ret    
   11cef:	call   8050 <__stack_chk_fail@plt>
   11cf4:	xchg   ax,ax
   11cf6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   11d00:	push   rbp
   11d01:	push   rbx
   11d02:	mov    ebp,esi
   11d04:	mov    rbx,rdi
   11d07:	mov    esi,0x1
   11d0c:	sub    rsp,0x8
   11d10:	call   11ab0 <g_str_equal@plt+0x96f8>
   11d15:	mov    rax,QWORD PTR [rbx+0x18]
   11d19:	mov    rdx,QWORD PTR [rbx+0x10]
   11d1d:	lea    rcx,[rax+0x1]
   11d21:	mov    QWORD PTR [rbx+0x18],rcx
   11d25:	mov    BYTE PTR [rdx+rax*1],bpl
   11d29:	mov    rdx,QWORD PTR [rbx+0x10]
   11d2d:	mov    rax,QWORD PTR [rbx+0x18]
   11d31:	mov    BYTE PTR [rdx+rax*1],0x0
   11d35:	add    rsp,0x8
   11d39:	pop    rbx
   11d3a:	pop    rbp
   11d3b:	ret    
   11d3c:	nop    DWORD PTR [rax+0x0]
   11d40:	mov    rax,QWORD PTR [rdi+0x10]
   11d44:	ret    
   11d45:	nop
   11d46:	nop    WORD PTR cs:[rax+rax*1+0x0]
   11d50:	test   rdi,rdi
   11d53:	je     11d60 <g_str_equal@plt+0x99a8>
   11d55:	mov    rax,QWORD PTR [rdi+0x10]
   11d59:	ret    
   11d5a:	nop    WORD PTR [rax+rax*1+0x0]
   11d60:	xor    eax,eax
   11d62:	ret    
   11d63:	nop    DWORD PTR [rax]
   11d66:	nop    WORD PTR cs:[rax+rax*1+0x0]
   11d70:	test   rdi,rdi
   11d73:	je     11d90 <g_str_equal@plt+0x99d8>
   11d75:	mov    eax,DWORD PTR [rdi]
   11d77:	lea    edx,[rax-0x1]
   11d7a:	cmp    edx,0x5
   11d7d:	ja     11d93 <g_str_equal@plt+0x99db>
   11d7f:	cmp    eax,0x3
   11d82:	jne    11d90 <g_str_equal@plt+0x99d8>
   11d84:	mov    rax,QWORD PTR [rdi+0x10]
   11d88:	ret    
   11d89:	nop    DWORD PTR [rax+0x0]
   11d90:	xor    eax,eax
   11d92:	ret    
   11d93:	sub    rsp,0x8
   11d97:	call   8443 <g_str_equal@plt+0x8b>
   11d9c:	nop    DWORD PTR [rax+0x0]
   11da0:	test   rsi,rsi
   11da3:	je     11e08 <g_str_equal@plt+0x9a50>
   11da5:	sub    rsp,0x8
   11da9:	mov    eax,DWORD PTR [rsi]
   11dab:	lea    edx,[rax-0x1]
   11dae:	cmp    edx,0x5
   11db1:	ja     11e12 <g_str_equal@plt+0x9a5a>
   11db3:	cmp    eax,0x3
   11db6:	je     11dc8 <g_str_equal@plt+0x9a10>
   11db8:	mov    rax,QWORD PTR ds:0x10
   11dc0:	ud2    
   11dc2:	nop    WORD PTR [rax+rax*1+0x0]
   11dc8:	test   rdi,rdi
   11dcb:	mov    rsi,QWORD PTR [rsi+0x10]
   11dcf:	je     11de0 <g_str_equal@plt+0x9a28>
   11dd1:	mov    eax,DWORD PTR [rdi]
   11dd3:	lea    edx,[rax-0x1]
   11dd6:	cmp    edx,0x5
   11dd9:	ja     11e12 <g_str_equal@plt+0x9a5a>
   11ddb:	cmp    eax,0x3
   11dde:	je     11df0 <g_str_equal@plt+0x9a38>
   11de0:	mov    rax,QWORD PTR ds:0x10
   11de8:	ud2    
   11dea:	nop    WORD PTR [rax+rax*1+0x0]
   11df0:	mov    rdi,QWORD PTR [rdi+0x10]
   11df4:	call   8060 <strcmp@plt>
   11df9:	test   eax,eax
   11dfb:	sete   al
   11dfe:	add    rsp,0x8
   11e02:	ret    
   11e03:	nop    DWORD PTR [rax+rax*1+0x0]
   11e08:	mov    rax,QWORD PTR ds:0x10
   11e10:	ud2    
   11e12:	call   8443 <g_str_equal@plt+0x8b>
   11e17:	nop    WORD PTR [rax+rax*1+0x0]
   11e20:	test   rdi,rdi
   11e23:	push   rbx
   11e24:	je     11e5a <g_str_equal@plt+0x9aa2>
   11e26:	mov    eax,DWORD PTR [rdi]
   11e28:	mov    rbx,rdi
   11e2b:	lea    edx,[rax-0x1]
   11e2e:	cmp    edx,0x5
   11e31:	ja     11e79 <g_str_equal@plt+0x9ac1>
   11e33:	cmp    eax,0x3
   11e36:	je     11e48 <g_str_equal@plt+0x9a90>
   11e38:	mov    rax,QWORD PTR ds:0x10
   11e40:	ud2    
   11e42:	nop    WORD PTR [rax+rax*1+0x0]
   11e48:	mov    rdi,QWORD PTR [rdi+0x10]
   11e4c:	call   7880 <g_free@plt>
   11e51:	mov    rdi,rbx
   11e54:	pop    rbx
   11e55:	jmp    7880 <g_free@plt>
   11e5a:	lea    rcx,[rip+0x19a8f]        # 2b8f0 <_fini@@Base+0x266c>
   11e61:	lea    rsi,[rip+0x199d0]        # 2b838 <_fini@@Base+0x25b4>
   11e68:	lea    rdi,[rip+0x19910]        # 2b77f <_fini@@Base+0x24fb>
   11e6f:	mov    edx,0xa1
   11e74:	call   7a70 <__assert_fail@plt>
   11e79:	call   8443 <g_str_equal@plt+0x8b>
   11e7e:	xchg   ax,ax
   11e80:	push   rbx
   11e81:	mov    rbx,rdi
   11e84:	call   7cd0 <strlen@plt>
   11e89:	imul   r8d,eax,0x238f13af
   11e90:	cmp    BYTE PTR [rbx],0x0
   11e93:	je     11ec9 <g_str_equal@plt+0x9b11>
   11e95:	mov    rdx,rbx
   11e98:	xor    esi,esi
   11e9a:	mov    r9d,0xaaaaaaab
   11ea0:	lea    ecx,[rsi+rsi*4]
   11ea3:	movzx  edi,BYTE PTR [rdx]
   11ea6:	mov    eax,ecx
   11ea8:	mul    r9d
   11eab:	shr    edx,0x4
   11eae:	lea    eax,[rdx+rdx*2]
   11eb1:	lea    edx,[rsi+0x1]
   11eb4:	shl    eax,0x3
   11eb7:	mov    rsi,rdx
   11eba:	add    rdx,rbx
   11ebd:	sub    ecx,eax
   11ebf:	shl    edi,cl
   11ec1:	add    r8d,edi
   11ec4:	cmp    BYTE PTR [rdx],0x0
   11ec7:	jne    11ea0 <g_str_equal@plt+0x9ae8>
   11ec9:	imul   eax,r8d,0x41c64e6b
   11ed0:	pop    rbx
   11ed1:	add    eax,0x3039
   11ed6:	ret    
   11ed7:	nop    WORD PTR [rax+rax*1+0x0]
   11ee0:	test   rdi,rdi
   11ee3:	push   rbx
   11ee4:	je     11f75 <g_str_equal@plt+0x9bbd>
   11eea:	cmp    QWORD PTR [rdi],0x0
   11eee:	mov    rbx,rdi
   11ef1:	je     11f56 <g_str_equal@plt+0x9b9e>
   11ef3:	mov    rdi,QWORD PTR [rdi+0x8]
   11ef7:	test   rdi,rdi
   11efa:	je     11f37 <g_str_equal@plt+0x9b7f>
   11efc:	mov    rax,QWORD PTR [rdi+0x8]
   11f00:	test   rax,rax
   11f03:	je     11f94 <g_str_equal@plt+0x9bdc>
   11f09:	sub    rax,0x1
   11f0d:	test   rax,rax
   11f10:	mov    QWORD PTR [rdi+0x8],rax
   11f14:	je     11f30 <g_str_equal@plt+0x9b78>
   11f16:	mov    rdi,QWORD PTR [rbx]
   11f19:	call   7880 <g_free@plt>
   11f1e:	mov    rdi,rbx
   11f21:	pop    rbx
   11f22:	jmp    7880 <g_free@plt>
   11f27:	nop    WORD PTR [rax+rax*1+0x0]
   11f30:	call   12960 <g_str_equal@plt+0xa5a8>
   11f35:	jmp    11f16 <g_str_equal@plt+0x9b5e>
   11f37:	lea    rcx,[rip+0x19aaa]        # 2b9e8 <_fini@@Base+0x2764>
   11f3e:	lea    rsi,[rip+0x19a13]        # 2b958 <_fini@@Base+0x26d4>
   11f45:	lea    rdi,[rip+0x19a6d]        # 2b9b9 <_fini@@Base+0x2735>
   11f4c:	mov    edx,0x181
   11f51:	call   7a70 <__assert_fail@plt>
   11f56:	lea    rcx,[rip+0x19a8b]        # 2b9e8 <_fini@@Base+0x2764>
   11f5d:	lea    rsi,[rip+0x199f4]        # 2b958 <_fini@@Base+0x26d4>
   11f64:	lea    rdi,[rip+0x19a3f]        # 2b9aa <_fini@@Base+0x2726>
   11f6b:	mov    edx,0x180
   11f70:	call   7a70 <__assert_fail@plt>
   11f75:	lea    rcx,[rip+0x19a6c]        # 2b9e8 <_fini@@Base+0x2764>
   11f7c:	lea    rsi,[rip+0x199d5]        # 2b958 <_fini@@Base+0x26d4>
   11f83:	lea    rdi,[rip+0x19d3e]        # 2bcc8 <_fini@@Base+0x2a44>
   11f8a:	mov    edx,0x17f
   11f8f:	call   7a70 <__assert_fail@plt>
   11f94:	call   8489 <g_str_equal@plt+0xd1>
   11f99:	nop    DWORD PTR [rax+0x0]
   11fa0:	sub    rsp,0x8
   11fa4:	mov    edi,0x1018
   11fa9:	call   80c0 <g_malloc0@plt>
   11fae:	mov    QWORD PTR [rax+0x8],0x1
   11fb6:	mov    DWORD PTR [rax],0x4
   11fbc:	add    rsp,0x8
   11fc0:	ret    
   11fc1:	nop    DWORD PTR [rax+rax*1+0x0]
   11fc6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   11fd0:	mov    rax,QWORD PTR [rdi+0x8]
   11fd4:	ret    
   11fd5:	nop
   11fd6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   11fe0:	mov    rax,QWORD PTR [rdi]
   11fe3:	ret    
   11fe4:	xchg   ax,ax
   11fe6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   11ff0:	push   r15
   11ff2:	push   r14
   11ff4:	mov    r14,rdi
   11ff7:	push   r13
   11ff9:	push   r12
   11ffb:	mov    rdi,rsi
   11ffe:	push   rbp
   11fff:	push   rbx
   12000:	mov    rbp,rsi
   12003:	mov    r15,rdx
   12006:	sub    rsp,0x8
   1200a:	call   11e80 <g_str_equal@plt+0x9ac8>
   1200f:	mov    r12d,eax
   12012:	and    r12d,0x1ff
   12019:	lea    r13,[r14+r12*8]
   1201d:	mov    rbx,QWORD PTR [r13+0x18]
   12021:	test   rbx,rbx
   12024:	jne    12039 <g_str_equal@plt+0x9c81>
   12026:	jmp    12080 <g_str_equal@plt+0x9cc8>
   12028:	nop    DWORD PTR [rax+rax*1+0x0]
   12030:	mov    rbx,QWORD PTR [rbx+0x10]
   12034:	test   rbx,rbx
   12037:	je     12080 <g_str_equal@plt+0x9cc8>
   12039:	mov    rdi,QWORD PTR [rbx]
   1203c:	mov    rsi,rbp
   1203f:	call   8060 <strcmp@plt>
   12044:	test   eax,eax
   12046:	jne    12030 <g_str_equal@plt+0x9c78>
   12048:	mov    rdi,QWORD PTR [rbx+0x8]
   1204c:	test   rdi,rdi
   1204f:	je     1206b <g_str_equal@plt+0x9cb3>
   12051:	mov    rax,QWORD PTR [rdi+0x8]
   12055:	test   rax,rax
   12058:	je     120df <g_str_equal@plt+0x9d27>
   1205e:	sub    rax,0x1
   12062:	test   rax,rax
   12065:	mov    QWORD PTR [rdi+0x8],rax
   12069:	je     120d8 <g_str_equal@plt+0x9d20>
   1206b:	mov    QWORD PTR [rbx+0x8],r15
   1206f:	add    rsp,0x8
   12073:	pop    rbx
   12074:	pop    rbp
   12075:	pop    r12
   12077:	pop    r13
   12079:	pop    r14
   1207b:	pop    r15
   1207d:	ret    
   1207e:	xchg   ax,ax
   12080:	mov    edi,0x20
   12085:	call   80c0 <g_malloc0@plt>
   1208a:	mov    rdi,rbp
   1208d:	mov    rbx,rax
   12090:	call   7a50 <g_strdup@plt>
   12095:	mov    QWORD PTR [rbx],rax
   12098:	mov    rax,QWORD PTR [r13+0x18]
   1209c:	mov    QWORD PTR [rbx+0x8],r15
   120a0:	test   rax,rax
   120a3:	mov    QWORD PTR [rbx+0x10],rax
   120a7:	je     120b1 <g_str_equal@plt+0x9cf9>
   120a9:	lea    rdx,[rbx+0x10]
   120ad:	mov    QWORD PTR [rax+0x18],rdx
   120b1:	lea    rax,[r14+r12*8+0x18]
   120b6:	mov    QWORD PTR [r13+0x18],rbx
   120ba:	add    QWORD PTR [r14+0x10],0x1
   120bf:	mov    QWORD PTR [rbx+0x18],rax
   120c3:	add    rsp,0x8
   120c7:	pop    rbx
   120c8:	pop    rbp
   120c9:	pop    r12
   120cb:	pop    r13
   120cd:	pop    r14
   120cf:	pop    r15
   120d1:	ret    
   120d2:	nop    WORD PTR [rax+rax*1+0x0]
   120d8:	call   12960 <g_str_equal@plt+0xa5a8>
   120dd:	jmp    1206b <g_str_equal@plt+0x9cb3>
   120df:	call   8489 <g_str_equal@plt+0xd1>
   120e4:	xchg   ax,ax
   120e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   120f0:	push   rbp
   120f1:	push   rbx
   120f2:	mov    rbx,rdi
   120f5:	mov    rdi,rdx
   120f8:	mov    rbp,rsi
   120fb:	sub    rsp,0x8
   120ff:	call   11570 <g_str_equal@plt+0x91b8>
   12104:	add    rsp,0x8
   12108:	mov    rsi,rbp
   1210b:	mov    rdi,rbx
   1210e:	pop    rbx
   1210f:	pop    rbp
   12110:	mov    rdx,rax
   12113:	jmp    11ff0 <g_str_equal@plt+0x9c38>
   12118:	nop    DWORD PTR [rax+rax*1+0x0]
   12120:	push   rbp
   12121:	push   rbx
   12122:	mov    rbx,rdi
   12125:	movzx  edi,dl
   12128:	mov    rbp,rsi
   1212b:	sub    rsp,0x8
   1212f:	call   12880 <g_str_equal@plt+0xa4c8>
   12134:	add    rsp,0x8
   12138:	mov    rsi,rbp
   1213b:	mov    rdi,rbx
   1213e:	pop    rbx
   1213f:	pop    rbp
   12140:	mov    rdx,rax
   12143:	jmp    11ff0 <g_str_equal@plt+0x9c38>
   12148:	nop    DWORD PTR [rax+rax*1+0x0]
   12150:	push   rbp
   12151:	push   rbx
   12152:	mov    rbx,rdi
   12155:	mov    rdi,rdx
   12158:	mov    rbp,rsi
   1215b:	sub    rsp,0x8
   1215f:	call   11c10 <g_str_equal@plt+0x9858>
   12164:	add    rsp,0x8
   12168:	mov    rsi,rbp
   1216b:	mov    rdi,rbx
   1216e:	pop    rbx
   1216f:	pop    rbp
   12170:	mov    rdx,rax
   12173:	jmp    11ff0 <g_str_equal@plt+0x9c38>
   12178:	nop    DWORD PTR [rax+rax*1+0x0]
   12180:	add    QWORD PTR [rip+0x22d660],0x1        # 23f7e8 <g_test_config_vars+0x20c8>
   12188:	lea    rdx,[rip+0x22d651]        # 23f7e0 <g_test_config_vars+0x20c0>
   1218f:	jmp    11ff0 <g_str_equal@plt+0x9c38>
   12194:	xchg   ax,ax
   12196:	nop    WORD PTR cs:[rax+rax*1+0x0]
   121a0:	push   rbp
   121a1:	push   rbx
   121a2:	mov    rbx,rdi
   121a5:	mov    rdi,rsi
   121a8:	mov    rbp,rsi
   121ab:	sub    rsp,0x8
   121af:	call   11e80 <g_str_equal@plt+0x9ac8>
   121b4:	and    eax,0x1ff
   121b9:	mov    rbx,QWORD PTR [rbx+rax*8+0x18]
   121be:	test   rbx,rbx
   121c1:	jne    121d1 <g_str_equal@plt+0x9e19>
   121c3:	jmp    121f0 <g_str_equal@plt+0x9e38>
   121c5:	nop    DWORD PTR [rax]
   121c8:	mov    rbx,QWORD PTR [rbx+0x10]
   121cc:	test   rbx,rbx
   121cf:	je     121f0 <g_str_equal@plt+0x9e38>
   121d1:	mov    rdi,QWORD PTR [rbx]
   121d4:	mov    rsi,rbp
   121d7:	call   8060 <strcmp@plt>
   121dc:	test   eax,eax
   121de:	jne    121c8 <g_str_equal@plt+0x9e10>
   121e0:	mov    rax,QWORD PTR [rbx+0x8]
   121e4:	add    rsp,0x8
   121e8:	pop    rbx
   121e9:	pop    rbp
   121ea:	ret    
   121eb:	nop    DWORD PTR [rax+rax*1+0x0]
   121f0:	add    rsp,0x8
   121f4:	xor    eax,eax
   121f6:	pop    rbx
   121f7:	pop    rbp
   121f8:	ret    
   121f9:	nop    DWORD PTR [rax+0x0]
   12200:	push   rbp
   12201:	push   rbx
   12202:	mov    rbx,rdi
   12205:	mov    rdi,rsi
   12208:	mov    rbp,rsi
   1220b:	sub    rsp,0x8
   1220f:	call   11e80 <g_str_equal@plt+0x9ac8>
   12214:	and    eax,0x1ff
   12219:	mov    rbx,QWORD PTR [rbx+rax*8+0x18]
   1221e:	test   rbx,rbx
   12221:	jne    12231 <g_str_equal@plt+0x9e79>
   12223:	jmp    12250 <g_str_equal@plt+0x9e98>
   12225:	nop    DWORD PTR [rax]
   12228:	mov    rbx,QWORD PTR [rbx+0x10]
   1222c:	test   rbx,rbx
   1222f:	je     12250 <g_str_equal@plt+0x9e98>
   12231:	mov    rdi,QWORD PTR [rbx]
   12234:	mov    rsi,rbp
   12237:	call   8060 <strcmp@plt>
   1223c:	test   eax,eax
   1223e:	jne    12228 <g_str_equal@plt+0x9e70>
   12240:	add    rsp,0x8
   12244:	mov    eax,0x1
   12249:	pop    rbx
   1224a:	pop    rbp
   1224b:	ret    
   1224c:	nop    DWORD PTR [rax+0x0]
   12250:	add    rsp,0x8
   12254:	xor    eax,eax
   12256:	pop    rbx
   12257:	pop    rbp
   12258:	ret    
   12259:	nop    DWORD PTR [rax+0x0]
   12260:	mov    rax,QWORD PTR [rdi+0x10]
   12264:	ret    
   12265:	nop
   12266:	nop    WORD PTR cs:[rax+rax*1+0x0]
   12270:	sub    rsp,0x8
   12274:	call   121a0 <g_str_equal@plt+0x9de8>
   12279:	test   rax,rax
   1227c:	je     12294 <g_str_equal@plt+0x9edc>
   1227e:	mov    edx,DWORD PTR [rax]
   12280:	lea    ecx,[rdx-0x1]
   12283:	cmp    ecx,0x5
   12286:	ja     122a0 <g_str_equal@plt+0x9ee8>
   12288:	cmp    edx,0x2
   1228b:	mov    edx,0x0
   12290:	cmovne rax,rdx
   12294:	mov    rdi,rax
   12297:	add    rsp,0x8
   1229b:	jmp    11790 <g_str_equal@plt+0x93d8>
   122a0:	call   8466 <g_str_equal@plt+0xae>
   122a5:	nop
   122a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   122b0:	sub    rsp,0x8
   122b4:	call   121a0 <g_str_equal@plt+0x9de8>
   122b9:	test   rax,rax
   122bc:	je     122d4 <g_str_equal@plt+0x9f1c>
   122be:	mov    edx,DWORD PTR [rax]
   122c0:	lea    ecx,[rdx-0x1]
   122c3:	cmp    ecx,0x5
   122c6:	ja     122e0 <g_str_equal@plt+0x9f28>
   122c8:	cmp    edx,0x2
   122cb:	mov    edx,0x0
   122d0:	cmovne rax,rdx
   122d4:	mov    rdi,rax
   122d7:	add    rsp,0x8
   122db:	jmp    11670 <g_str_equal@plt+0x92b8>
   122e0:	call   8466 <g_str_equal@plt+0xae>
   122e5:	nop
   122e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   122f0:	sub    rsp,0x8
   122f4:	call   121a0 <g_str_equal@plt+0x9de8>
   122f9:	test   rax,rax
   122fc:	je     12314 <g_str_equal@plt+0x9f5c>
   122fe:	mov    edx,DWORD PTR [rax]
   12300:	lea    ecx,[rdx-0x1]
   12303:	cmp    ecx,0x5
   12306:	ja     12320 <g_str_equal@plt+0x9f68>
   12308:	cmp    edx,0x6
   1230b:	mov    edx,0x0
   12310:	cmovne rax,rdx
   12314:	mov    rdi,rax
   12317:	add    rsp,0x8
   1231b:	jmp    128a0 <g_str_equal@plt+0xa4e8>
   12320:	call   8466 <g_str_equal@plt+0xae>
   12325:	nop
   12326:	nop    WORD PTR cs:[rax+rax*1+0x0]
   12330:	sub    rsp,0x8
   12334:	call   121a0 <g_str_equal@plt+0x9de8>
   12339:	test   rax,rax
   1233c:	je     12354 <g_str_equal@plt+0x9f9c>
   1233e:	mov    edx,DWORD PTR [rax]
   12340:	lea    ecx,[rdx-0x1]
   12343:	cmp    ecx,0x5
   12346:	ja     12359 <g_str_equal@plt+0x9fa1>
   12348:	cmp    edx,0x5
   1234b:	mov    edx,0x0
   12350:	cmovne rax,rdx
   12354:	add    rsp,0x8
   12358:	ret    
   12359:	call   8466 <g_str_equal@plt+0xae>
   1235e:	xchg   ax,ax
   12360:	sub    rsp,0x8
   12364:	call   121a0 <g_str_equal@plt+0x9de8>
   12369:	test   rax,rax
   1236c:	je     12384 <g_str_equal@plt+0x9fcc>
   1236e:	mov    edx,DWORD PTR [rax]
   12370:	lea    ecx,[rdx-0x1]
   12373:	cmp    ecx,0x5
   12376:	ja     12389 <g_str_equal@plt+0x9fd1>
   12378:	cmp    edx,0x4
   1237b:	mov    edx,0x0
   12380:	cmovne rax,rdx
   12384:	add    rsp,0x8
   12388:	ret    
   12389:	call   8466 <g_str_equal@plt+0xae>
   1238e:	xchg   ax,ax
   12390:	sub    rsp,0x8
   12394:	call   121a0 <g_str_equal@plt+0x9de8>
   12399:	test   rax,rax
   1239c:	je     123b4 <g_str_equal@plt+0x9ffc>
   1239e:	mov    edx,DWORD PTR [rax]
   123a0:	lea    ecx,[rdx-0x1]
   123a3:	cmp    ecx,0x5
   123a6:	ja     123c0 <g_str_equal@plt+0xa008>
   123a8:	cmp    edx,0x3
   123ab:	mov    edx,0x0
   123b0:	cmovne rax,rdx
   123b4:	mov    rdi,rax
   123b7:	add    rsp,0x8
   123bb:	jmp    11d40 <g_str_equal@plt+0x9988>
   123c0:	call   8466 <g_str_equal@plt+0xae>
   123c5:	nop
   123c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   123d0:	push   rbx
   123d1:	mov    rbx,rdx
   123d4:	sub    rsp,0x10
   123d8:	mov    rax,QWORD PTR fs:0x28
   123e1:	mov    QWORD PTR [rsp+0x8],rax
   123e6:	xor    eax,eax
   123e8:	call   121a0 <g_str_equal@plt+0x9de8>
   123ed:	test   rax,rax
   123f0:	je     12401 <g_str_equal@plt+0xa049>
   123f2:	mov    edx,DWORD PTR [rax]
   123f4:	lea    ecx,[rdx-0x1]
   123f7:	cmp    ecx,0x5
   123fa:	ja     1243a <g_str_equal@plt+0xa082>
   123fc:	cmp    edx,0x2
   123ff:	je     12420 <g_str_equal@plt+0xa068>
   12401:	mov    rax,rbx
   12404:	mov    rcx,QWORD PTR [rsp+0x8]
   12409:	xor    rcx,QWORD PTR fs:0x28
   12412:	jne    12435 <g_str_equal@plt+0xa07d>
   12414:	add    rsp,0x10
   12418:	pop    rbx
   12419:	ret    
   1241a:	nop    WORD PTR [rax+rax*1+0x0]
   12420:	mov    rsi,rsp
   12423:	mov    rdi,rax
   12426:	call   11610 <g_str_equal@plt+0x9258>
   1242b:	test   al,al
   1242d:	je     12401 <g_str_equal@plt+0xa049>
   1242f:	mov    rax,QWORD PTR [rsp]
   12433:	jmp    12404 <g_str_equal@plt+0xa04c>
   12435:	call   8050 <__stack_chk_fail@plt>
   1243a:	call   8466 <g_str_equal@plt+0xae>
   1243f:	nop
   12440:	push   rbx
   12441:	mov    ebx,edx
   12443:	call   121a0 <g_str_equal@plt+0x9de8>
   12448:	test   rax,rax
   1244b:	je     1245c <g_str_equal@plt+0xa0a4>
   1244d:	mov    ecx,DWORD PTR [rax]
   1244f:	lea    edx,[rcx-0x1]
   12452:	cmp    edx,0x5
   12455:	ja     12469 <g_str_equal@plt+0xa0b1>
   12457:	cmp    ecx,0x6
   1245a:	je     12460 <g_str_equal@plt+0xa0a8>
   1245c:	mov    eax,ebx
   1245e:	pop    rbx
   1245f:	ret    
   12460:	pop    rbx
   12461:	mov    rdi,rax
   12464:	jmp    128a0 <g_str_equal@plt+0xa4e8>
   12469:	call   8466 <g_str_equal@plt+0xae>
   1246e:	xchg   ax,ax
   12470:	sub    rsp,0x8
   12474:	call   121a0 <g_str_equal@plt+0x9de8>
   12479:	test   rax,rax
   1247c:	je     124a0 <g_str_equal@plt+0xa0e8>
   1247e:	mov    edx,DWORD PTR [rax]
   12480:	lea    ecx,[rdx-0x1]
   12483:	cmp    ecx,0x5
   12486:	ja     124a7 <g_str_equal@plt+0xa0ef>
   12488:	cmp    edx,0x3
   1248b:	jne    124a0 <g_str_equal@plt+0xa0e8>
   1248d:	mov    rdi,rax
   12490:	add    rsp,0x8
   12494:	jmp    11d40 <g_str_equal@plt+0x9988>
   12499:	nop    DWORD PTR [rax+0x0]
   124a0:	xor    eax,eax
   124a2:	add    rsp,0x8
   124a6:	ret    
   124a7:	call   8466 <g_str_equal@plt+0xae>
   124ac:	nop    DWORD PTR [rax+0x0]
   124b0:	push   r14
   124b2:	lea    r14,[rdi+0x1018]
   124b9:	push   r13
   124bb:	lea    r13,[rdi+0x18]
   124bf:	push   r12
   124c1:	push   rbp
   124c2:	push   rbx
   124c3:	mov    r12,rsi
   124c6:	mov    rbp,rdx
   124c9:	nop    DWORD PTR [rax+0x0]
   124d0:	mov    rbx,QWORD PTR [r13+0x0]
   124d4:	test   rbx,rbx
   124d7:	je     124f6 <g_str_equal@plt+0xa13e>
   124d9:	nop    DWORD PTR [rax+0x0]
   124e0:	mov    rsi,QWORD PTR [rbx+0x8]
   124e4:	mov    rdi,QWORD PTR [rbx]
   124e7:	mov    rdx,rbp
   124ea:	call   r12
   124ed:	mov    rbx,QWORD PTR [rbx+0x10]
   124f1:	test   rbx,rbx
   124f4:	jne    124e0 <g_str_equal@plt+0xa128>
   124f6:	add    r13,0x8
   124fa:	cmp    r13,r14
   124fd:	jne    124d0 <g_str_equal@plt+0xa118>
   124ff:	pop    rbx
   12500:	pop    rbp
   12501:	pop    r12
   12503:	pop    r13
   12505:	pop    r14
   12507:	ret    
   12508:	nop    DWORD PTR [rax+rax*1+0x0]
   12510:	lea    rdx,[rdi+0x18]
   12514:	add    rdi,0x1018
   1251b:	jmp    12529 <g_str_equal@plt+0xa171>
   1251d:	nop    DWORD PTR [rax]
   12520:	add    rdx,0x8
   12524:	cmp    rdx,rdi
   12527:	je     12531 <g_str_equal@plt+0xa179>
   12529:	mov    rax,QWORD PTR [rdx]
   1252c:	test   rax,rax
   1252f:	je     12520 <g_str_equal@plt+0xa168>
   12531:	repz ret 
   12533:	nop    DWORD PTR [rax]
   12536:	nop    WORD PTR cs:[rax+rax*1+0x0]
   12540:	push   rbp
   12541:	push   rbx
   12542:	sub    rsp,0x8
   12546:	mov    rbx,QWORD PTR [rsi+0x10]
   1254a:	test   rbx,rbx
   1254d:	je     12560 <g_str_equal@plt+0xa1a8>
   1254f:	add    rsp,0x8
   12553:	mov    rax,rbx
   12556:	pop    rbx
   12557:	pop    rbp
   12558:	ret    
   12559:	nop    DWORD PTR [rax+0x0]
   12560:	mov    rbp,rdi
   12563:	mov    rdi,QWORD PTR [rsi]
   12566:	call   11e80 <g_str_equal@plt+0x9ac8>
   1256b:	and    eax,0x1ff
   12570:	lea    edx,[rax+0x1]
   12573:	cmp    edx,0x200
   12579:	mov    eax,edx
   1257b:	je     1254f <g_str_equal@plt+0xa197>
   1257d:	movsxd rdx,edx
   12580:	mov    rdx,QWORD PTR [rbp+rdx*8+0x18]
   12585:	test   rdx,rdx
   12588:	jne    125a7 <g_str_equal@plt+0xa1ef>
   1258a:	nop    WORD PTR [rax+rax*1+0x0]
   12590:	add    eax,0x1
   12593:	cmp    eax,0x200
   12598:	je     1254f <g_str_equal@plt+0xa197>
   1259a:	movsxd rdx,eax
   1259d:	mov    rdx,QWORD PTR [rbp+rdx*8+0x18]
   125a2:	test   rdx,rdx
   125a5:	je     12590 <g_str_equal@plt+0xa1d8>
   125a7:	mov    rbx,rdx
   125aa:	jmp    1254f <g_str_equal@plt+0xa197>
   125ac:	nop    DWORD PTR [rax+0x0]
   125b0:	push   r13
   125b2:	push   r12
   125b4:	mov    r13,rdi
   125b7:	push   rbp
   125b8:	push   rbx
   125b9:	mov    edi,0x1018
   125be:	lea    r12,[r13+0x18]
   125c2:	add    r13,0x1018
   125c9:	sub    rsp,0x8
   125cd:	call   80c0 <g_malloc0@plt>
   125d2:	mov    rbp,rax
   125d5:	mov    QWORD PTR [rax+0x8],0x1
   125dd:	mov    DWORD PTR [rax],0x4
   125e3:	nop    DWORD PTR [rax+rax*1+0x0]
   125e8:	mov    rbx,QWORD PTR [r12]
   125ec:	test   rbx,rbx
   125ef:	je     1261a <g_str_equal@plt+0xa262>
   125f1:	nop    DWORD PTR [rax+0x0]
   125f8:	mov    rdx,QWORD PTR [rbx+0x8]
   125fc:	test   rdx,rdx
   125ff:	je     12606 <g_str_equal@plt+0xa24e>
   12601:	add    QWORD PTR [rdx+0x8],0x1
   12606:	mov    rsi,QWORD PTR [rbx]
   12609:	mov    rdi,rbp
   1260c:	call   11ff0 <g_str_equal@plt+0x9c38>
   12611:	mov    rbx,QWORD PTR [rbx+0x10]
   12615:	test   rbx,rbx
   12618:	jne    125f8 <g_str_equal@plt+0xa240>
   1261a:	add    r12,0x8
   1261e:	cmp    r12,r13
   12621:	jne    125e8 <g_str_equal@plt+0xa230>
   12623:	add    rsp,0x8
   12627:	mov    rax,rbp
   1262a:	pop    rbx
   1262b:	pop    rbp
   1262c:	pop    r12
   1262e:	pop    r13
   12630:	ret    
   12631:	nop    DWORD PTR [rax+rax*1+0x0]
   12636:	nop    WORD PTR cs:[rax+rax*1+0x0]
   12640:	push   r12
   12642:	push   rbp
   12643:	mov    r12,rdi
   12646:	push   rbx
   12647:	mov    rdi,rsi
   1264a:	mov    rbp,rsi
   1264d:	call   11e80 <g_str_equal@plt+0x9ac8>
   12652:	and    eax,0x1ff
   12657:	mov    rbx,QWORD PTR [r12+rax*8+0x18]
   1265c:	test   rbx,rbx
   1265f:	jne    12670 <g_str_equal@plt+0xa2b8>
   12661:	jmp    126a9 <g_str_equal@plt+0xa2f1>
   12663:	nop    DWORD PTR [rax+rax*1+0x0]
   12668:	test   rdx,rdx
   1266b:	mov    rbx,rdx
   1266e:	je     126a9 <g_str_equal@plt+0xa2f1>
   12670:	mov    rdi,QWORD PTR [rbx]
   12673:	mov    rsi,rbp
   12676:	call   8060 <strcmp@plt>
   1267b:	test   eax,eax
   1267d:	mov    rdx,QWORD PTR [rbx+0x10]
   12681:	jne    12668 <g_str_equal@plt+0xa2b0>
   12683:	test   rdx,rdx
   12686:	mov    rax,QWORD PTR [rbx+0x18]
   1268a:	je     12698 <g_str_equal@plt+0xa2e0>
   1268c:	mov    QWORD PTR [rdx+0x18],rax
   12690:	mov    rax,QWORD PTR [rbx+0x18]
   12694:	mov    rdx,QWORD PTR [rbx+0x10]
   12698:	mov    QWORD PTR [rax],rdx
   1269b:	mov    rdi,rbx
   1269e:	call   11ee0 <g_str_equal@plt+0x9b28>
   126a3:	sub    QWORD PTR [r12+0x10],0x1
   126a9:	pop    rbx
   126aa:	pop    rbp
   126ab:	pop    r12
   126ad:	ret    
   126ae:	xchg   ax,ax
   126b0:	test   rdi,rdi
   126b3:	push   r12
   126b5:	mov    r12,rdi
   126b8:	push   rbp
   126b9:	mov    rbp,rsi
   126bc:	push   rbx
   126bd:	je     126d9 <g_str_equal@plt+0xa321>
   126bf:	mov    eax,DWORD PTR [rdi]
   126c1:	lea    edx,[rax-0x1]
   126c4:	cmp    edx,0x5
   126c7:	ja     127a1 <g_str_equal@plt+0xa3e9>
   126cd:	cmp    eax,0x4
   126d0:	mov    eax,0x0
   126d5:	cmovne r12,rax
   126d9:	test   rbp,rbp
   126dc:	je     126f2 <g_str_equal@plt+0xa33a>
   126de:	mov    eax,DWORD PTR [rbp+0x0]
   126e1:	lea    edx,[rax-0x1]
   126e4:	cmp    edx,0x5
   126e7:	ja     127a1 <g_str_equal@plt+0xa3e9>
   126ed:	cmp    eax,0x4
   126f0:	je     12700 <g_str_equal@plt+0xa348>
   126f2:	mov    rax,QWORD PTR ds:0x10
   126fa:	ud2    
   126fc:	nop    DWORD PTR [rax+0x0]
   12700:	mov    rax,QWORD PTR [rbp+0x10]
   12704:	cmp    QWORD PTR [r12+0x10],rax
   12709:	je     12718 <g_str_equal@plt+0xa360>
   1270b:	pop    rbx
   1270c:	xor    eax,eax
   1270e:	pop    rbp
   1270f:	pop    r12
   12711:	ret    
   12712:	nop    WORD PTR [rax+rax*1+0x0]
   12718:	lea    rax,[r12+0x18]
   1271d:	lea    rdx,[r12+0x1018]
   12725:	jmp    12739 <g_str_equal@plt+0xa381>
   12727:	nop    WORD PTR [rax+rax*1+0x0]
   12730:	add    rax,0x8
   12734:	cmp    rax,rdx
   12737:	je     12797 <g_str_equal@plt+0xa3df>
   12739:	mov    rbx,QWORD PTR [rax]
   1273c:	test   rbx,rbx
   1273f:	je     12730 <g_str_equal@plt+0xa378>
   12741:	jmp    1274b <g_str_equal@plt+0xa393>
   12743:	nop    DWORD PTR [rax+rax*1+0x0]
   12748:	mov    rbx,rdx
   1274b:	mov    rsi,QWORD PTR [rbx]
   1274e:	mov    rdi,rbp
   12751:	call   121a0 <g_str_equal@plt+0x9de8>
   12756:	mov    rdi,QWORD PTR [rbx+0x8]
   1275a:	mov    rsi,rax
   1275d:	call   129d0 <g_str_equal@plt+0xa618>
   12762:	test   al,al
   12764:	je     1270b <g_str_equal@plt+0xa353>
   12766:	mov    rdx,QWORD PTR [rbx+0x10]
   1276a:	test   rdx,rdx
   1276d:	jne    12748 <g_str_equal@plt+0xa390>
   1276f:	mov    rdi,QWORD PTR [rbx]
   12772:	call   11e80 <g_str_equal@plt+0x9ac8>
   12777:	and    eax,0x1ff
   1277c:	jmp    1278d <g_str_equal@plt+0xa3d5>
   1277e:	xchg   ax,ax
   12780:	movsxd rdx,eax
   12783:	mov    rdx,QWORD PTR [r12+rdx*8+0x18]
   12788:	test   rdx,rdx
   1278b:	jne    12748 <g_str_equal@plt+0xa390>
   1278d:	add    eax,0x1
   12790:	cmp    eax,0x200
   12795:	jne    12780 <g_str_equal@plt+0xa3c8>
   12797:	pop    rbx
   12798:	mov    eax,0x1
   1279d:	pop    rbp
   1279e:	pop    r12
   127a0:	ret    
   127a1:	call   8466 <g_str_equal@plt+0xae>
   127a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   127b0:	push   r13
   127b2:	push   r12
   127b4:	push   rbp
   127b5:	push   rbx
   127b6:	sub    rsp,0x8
   127ba:	test   rdi,rdi
   127bd:	je     12851 <g_str_equal@plt+0xa499>
   127c3:	mov    eax,DWORD PTR [rdi]
   127c5:	mov    r13,rdi
   127c8:	lea    edx,[rax-0x1]
   127cb:	cmp    edx,0x5
   127ce:	ja     12870 <g_str_equal@plt+0xa4b8>
   127d4:	cmp    eax,0x4
   127d7:	mov    eax,0x0
   127dc:	cmovne r13,rax
   127e0:	lea    rbp,[r13+0x18]
   127e4:	lea    r12,[r13+0x1018]
   127eb:	nop    DWORD PTR [rax+rax*1+0x0]
   127f0:	mov    rdi,QWORD PTR [rbp+0x0]
   127f4:	test   rdi,rdi
   127f7:	je     12836 <g_str_equal@plt+0xa47e>
   127f9:	mov    rbx,QWORD PTR [rdi+0x10]
   127fd:	mov    rax,QWORD PTR [rdi+0x18]
   12801:	test   rbx,rbx
   12804:	je     1282a <g_str_equal@plt+0xa472>
   12806:	mov    QWORD PTR [rbx+0x18],rax
   1280a:	mov    rax,QWORD PTR [rdi+0x18]
   1280e:	mov    rdx,QWORD PTR [rdi+0x10]
   12812:	mov    QWORD PTR [rax],rdx
   12815:	call   11ee0 <g_str_equal@plt+0x9b28>
   1281a:	mov    rdi,rbx
   1281d:	mov    rbx,QWORD PTR [rdi+0x10]
   12821:	mov    rax,QWORD PTR [rdi+0x18]
   12825:	test   rbx,rbx
   12828:	jne    12806 <g_str_equal@plt+0xa44e>
   1282a:	mov    QWORD PTR [rax],0x0
   12831:	call   11ee0 <g_str_equal@plt+0x9b28>
   12836:	add    rbp,0x8
   1283a:	cmp    rbp,r12
   1283d:	jne    127f0 <g_str_equal@plt+0xa438>
   1283f:	add    rsp,0x8
   12843:	mov    rdi,r13
   12846:	pop    rbx
   12847:	pop    rbp
   12848:	pop    r12
   1284a:	pop    r13
   1284c:	jmp    7880 <g_free@plt>
   12851:	lea    rcx,[rip+0x19178]        # 2b9d0 <_fini@@Base+0x274c>
   12858:	lea    rsi,[rip+0x190f9]        # 2b958 <_fini@@Base+0x26d4>
   1285f:	lea    rdi,[rip+0x18f19]        # 2b77f <_fini@@Base+0x24fb>
   12866:	mov    edx,0x1be
   1286b:	call   7a70 <__assert_fail@plt>
   12870:	call   8466 <g_str_equal@plt+0xae>
   12875:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1287f:	nop
   12880:	push   rbx
   12881:	mov    ebx,edi
   12883:	mov    edi,0x18
   12888:	call   7b50 <g_malloc@plt>
   1288d:	mov    QWORD PTR [rax+0x8],0x1
   12895:	mov    DWORD PTR [rax],0x6
   1289b:	mov    BYTE PTR [rax+0x10],bl
   1289e:	pop    rbx
   1289f:	ret    
   128a0:	movzx  eax,BYTE PTR [rdi+0x10]
   128a4:	ret    
   128a5:	nop
   128a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   128b0:	test   rdi,rdi
   128b3:	je     128c4 <g_str_equal@plt+0xa50c>
   128b5:	mov    eax,DWORD PTR [rdi]
   128b7:	lea    edx,[rax-0x1]
   128ba:	cmp    edx,0x5
   128bd:	ja     128ff <g_str_equal@plt+0xa547>
   128bf:	cmp    eax,0x6
   128c2:	je     128d0 <g_str_equal@plt+0xa518>
   128c4:	movzx  eax,BYTE PTR ds:0x10
   128cc:	ud2    
   128ce:	xchg   ax,ax
   128d0:	test   rsi,rsi
   128d3:	movzx  edx,BYTE PTR [rdi+0x10]
   128d7:	je     128e8 <g_str_equal@plt+0xa530>
   128d9:	mov    eax,DWORD PTR [rsi]
   128db:	lea    ecx,[rax-0x1]
   128de:	cmp    ecx,0x5
   128e1:	ja     128ff <g_str_equal@plt+0xa547>
   128e3:	cmp    eax,0x6
   128e6:	je     128f8 <g_str_equal@plt+0xa540>
   128e8:	movzx  eax,BYTE PTR ds:0x10
   128f0:	ud2    
   128f2:	nop    WORD PTR [rax+rax*1+0x0]
   128f8:	cmp    BYTE PTR [rsi+0x10],dl
   128fb:	sete   al
   128fe:	ret    
   128ff:	sub    rsp,0x8
   12903:	call   84ac <g_str_equal@plt+0xf4>
   12908:	nop    DWORD PTR [rax+rax*1+0x0]
   12910:	sub    rsp,0x8
   12914:	test   rdi,rdi
   12917:	je     12938 <g_str_equal@plt+0xa580>
   12919:	mov    eax,DWORD PTR [rdi]
   1291b:	lea    edx,[rax-0x1]
   1291e:	cmp    edx,0x5
   12921:	ja     12957 <g_str_equal@plt+0xa59f>
   12923:	cmp    eax,0x6
   12926:	mov    eax,0x0
   1292b:	cmovne rdi,rax
   1292f:	add    rsp,0x8
   12933:	jmp    7880 <g_free@plt>
   12938:	lea    rcx,[rip+0x19131]        # 2ba70 <_fini@@Base+0x27ec>
   1293f:	lea    rsi,[rip+0x190e2]        # 2ba28 <_fini@@Base+0x27a4>
   12946:	lea    rdi,[rip+0x18e32]        # 2b77f <_fini@@Base+0x24fb>
   1294d:	mov    edx,0x38
   12952:	call   7a70 <__assert_fail@plt>
   12957:	call   84ac <g_str_equal@plt+0xf4>
   1295c:	nop    DWORD PTR [rax+0x0]
   12960:	sub    rsp,0x8
   12964:	cmp    QWORD PTR [rdi+0x8],0x0
   12969:	jne    12986 <g_str_equal@plt+0xa5ce>
   1296b:	mov    eax,DWORD PTR [rdi]
   1296d:	lea    edx,[rax-0x2]
   12970:	cmp    edx,0x4
   12973:	ja     129a5 <g_str_equal@plt+0xa5ed>
   12975:	lea    rdx,[rip+0x22ae04]        # 23d780 <g_test_config_vars+0x60>
   1297c:	mov    rax,QWORD PTR [rdx+rax*8]
   12980:	add    rsp,0x8
   12984:	jmp    rax
   12986:	lea    rcx,[rip+0x19203]        # 2bb90 <_fini@@Base+0x290c>
   1298d:	lea    rsi,[rip+0x19104]        # 2ba98 <_fini@@Base+0x2814>
   12994:	lea    rdi,[rip+0x191b4]        # 2bb4f <_fini@@Base+0x28cb>
   1299b:	mov    edx,0x28
   129a0:	call   7a70 <__assert_fail@plt>
   129a5:	lea    rcx,[rip+0x191e4]        # 2bb90 <_fini@@Base+0x290c>
   129ac:	lea    rsi,[rip+0x190e5]        # 2ba98 <_fini@@Base+0x2814>
   129b3:	lea    rdi,[rip+0x1911e]        # 2bad8 <_fini@@Base+0x2854>
   129ba:	mov    edx,0x29
   129bf:	call   7a70 <__assert_fail@plt>
   129c4:	xchg   ax,ax
   129c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   129d0:	test   rdi,rdi
   129d3:	sete   cl
   129d6:	test   rsi,rsi
   129d9:	sete   dl
   129dc:	mov    eax,ecx
   129de:	and    al,dl
   129e0:	jne    129ec <g_str_equal@plt+0xa634>
   129e2:	or     cl,dl
   129e4:	jne    129ec <g_str_equal@plt+0xa634>
   129e6:	mov    edx,DWORD PTR [rdi]
   129e8:	cmp    edx,DWORD PTR [rsi]
   129ea:	je     129f0 <g_str_equal@plt+0xa638>
   129ec:	repz ret 
   129ee:	xchg   ax,ax
   129f0:	lea    eax,[rdx-0x1]
   129f3:	cmp    eax,0x5
   129f6:	ja     12a02 <g_str_equal@plt+0xa64a>
   129f8:	lea    rax,[rip+0x22ad41]        # 23d740 <g_test_config_vars+0x20>
   129ff:	jmp    QWORD PTR [rax+rdx*8]
   12a02:	lea    rcx,[rip+0x19167]        # 2bb70 <_fini@@Base+0x28ec>
   12a09:	lea    rsi,[rip+0x19088]        # 2ba98 <_fini@@Base+0x2814>
   12a10:	lea    rdi,[rip+0x19101]        # 2bb18 <_fini@@Base+0x2894>
   12a17:	sub    rsp,0x8
   12a1b:	mov    edx,0x45
   12a20:	call   7a70 <__assert_fail@plt>
   12a25:	nop    WORD PTR cs:[rax+rax*1+0x0]
   12a2f:	nop
   12a30:	push   rbp
   12a31:	push   rbx
   12a32:	mov    rbp,rsi
   12a35:	mov    rbx,rdi
   12a38:	sub    rsp,0x8
   12a3c:	jmp    12a54 <g_str_equal@plt+0xa69c>
   12a3e:	xchg   ax,ax
   12a40:	movzx  edx,BYTE PTR [rbp+0x0]
   12a44:	test   dl,dl
   12a46:	je     12a70 <g_str_equal@plt+0xa6b8>
   12a48:	cmp    al,dl
   12a4a:	jne    12a90 <g_str_equal@plt+0xa6d8>
   12a4c:	add    rbx,0x1
   12a50:	add    rbp,0x1
   12a54:	movzx  eax,BYTE PTR [rbx]
   12a57:	test   al,al
   12a59:	jne    12a40 <g_str_equal@plt+0xa688>
   12a5b:	cmp    BYTE PTR [rbp+0x0],0x0
   12a5f:	sete   al
   12a62:	add    rsp,0x8
   12a66:	pop    rbx
   12a67:	pop    rbp
   12a68:	ret    
   12a69:	nop    DWORD PTR [rax+0x0]
   12a70:	cmp    al,0x2a
   12a72:	jne    12a87 <g_str_equal@plt+0xa6cf>
   12a74:	nop    DWORD PTR [rax+0x0]
   12a78:	add    rbx,0x1
   12a7c:	movzx  eax,BYTE PTR [rbx]
   12a7f:	cmp    al,0x2a
   12a81:	je     12a78 <g_str_equal@plt+0xa6c0>
   12a83:	test   al,al
   12a85:	je     12a5b <g_str_equal@plt+0xa6a3>
   12a87:	add    rsp,0x8
   12a8b:	xor    eax,eax
   12a8d:	pop    rbx
   12a8e:	pop    rbp
   12a8f:	ret    
   12a90:	cmp    al,0x2a
   12a92:	jne    12a87 <g_str_equal@plt+0xa6cf>
   12a94:	lea    rsi,[rbp+0x1]
   12a98:	mov    rdi,rbx
   12a9b:	call   12a30 <g_str_equal@plt+0xa678>
   12aa0:	test   al,al
   12aa2:	jne    12a62 <g_str_equal@plt+0xa6aa>
   12aa4:	add    rbx,0x1
   12aa8:	jmp    12a54 <g_str_equal@plt+0xa69c>
   12aaa:	nop    WORD PTR [rax+rax*1+0x0]
   12ab0:	push   r12
   12ab2:	push   rbp
   12ab3:	mov    rbp,rdi
   12ab6:	push   rbx
   12ab7:	mov    rax,QWORD PTR [rdi]
   12aba:	test   rax,rax
   12abd:	je     12b0d <g_str_equal@plt+0xa755>
   12abf:	lea    r12,[rip+0x190da]        # 2bba0 <_fini@@Base+0x291c>
   12ac6:	mov    rbx,rdi
   12ac9:	nop    DWORD PTR [rax+0x0]
   12ad0:	mov    edx,DWORD PTR [rip+0x22f32a]        # 241e00 <stdout@@GLIBC_2.2.5+0x2158>
   12ad6:	lea    ecx,[rdx+0x1]
   12ad9:	mov    DWORD PTR [rax],edx
   12adb:	mov    rdx,QWORD PTR [rbx]
   12ade:	mov    DWORD PTR [rip+0x22f31c],ecx        # 241e00 <stdout@@GLIBC_2.2.5+0x2158>
   12ae4:	cmp    DWORD PTR [rdx+0x4],0xffffffff
   12ae8:	je     12b01 <g_str_equal@plt+0xa749>
   12aea:	mov    eax,DWORD PTR [rip+0x22f30c]        # 241dfc <stdout@@GLIBC_2.2.5+0x2154>
   12af0:	cmp    eax,0x1f
   12af3:	ja     12b50 <g_str_equal@plt+0xa798>
   12af5:	lea    ecx,[rax+0x1]
   12af8:	mov    DWORD PTR [rdx+0x4],eax
   12afb:	mov    DWORD PTR [rip+0x22f2fb],ecx        # 241dfc <stdout@@GLIBC_2.2.5+0x2154>
   12b01:	add    rbx,0x8
   12b05:	mov    rax,QWORD PTR [rbx]
   12b08:	test   rax,rax
   12b0b:	jne    12ad0 <g_str_equal@plt+0xa718>
   12b0d:	mov    rax,QWORD PTR [rip+0x22f2f4]        # 241e08 <stdout@@GLIBC_2.2.5+0x2160>
   12b14:	mov    rdi,QWORD PTR [rip+0x22f2f5]        # 241e10 <stdout@@GLIBC_2.2.5+0x2168>
   12b1b:	mov    edx,0x8
   12b20:	lea    rsi,[rax+0x1]
   12b24:	call   7ae0 <g_realloc_n@plt>
   12b29:	mov    rdx,QWORD PTR [rip+0x22f2d8]        # 241e08 <stdout@@GLIBC_2.2.5+0x2160>
   12b30:	mov    QWORD PTR [rip+0x22f2d9],rax        # 241e10 <stdout@@GLIBC_2.2.5+0x2168>
   12b37:	mov    QWORD PTR [rax+rdx*8],rbp
   12b3b:	add    rdx,0x1
   12b3f:	pop    rbx
   12b40:	mov    QWORD PTR [rip+0x22f2c1],rdx        # 241e08 <stdout@@GLIBC_2.2.5+0x2160>
   12b47:	pop    rbp
   12b48:	pop    r12
   12b4a:	ret    
   12b4b:	nop    DWORD PTR [rax+rax*1+0x0]
   12b50:	mov    rsi,QWORD PTR [rdx+0x8]
   12b54:	mov    rdi,r12
   12b57:	xor    eax,eax
   12b59:	call   e5e0 <g_str_equal@plt+0x6228>
   12b5e:	jmp    12b01 <g_str_equal@plt+0xa749>
   12b60:	mov    QWORD PTR [rdi],0x0
   12b67:	mov    QWORD PTR [rdi+0x8],0x0
   12b6f:	mov    QWORD PTR [rdi+0x10],rsi
   12b73:	ret    
   12b74:	xchg   ax,ax
   12b76:	nop    WORD PTR cs:[rax+rax*1+0x0]
   12b80:	mov    r9,QWORD PTR [rip+0x22f281]        # 241e08 <stdout@@GLIBC_2.2.5+0x2160>
   12b87:	mov    rdx,QWORD PTR [rdi+0x8]
   12b8b:	mov    rcx,rdi
   12b8e:	mov    r10,QWORD PTR [rip+0x22f27b]        # 241e10 <stdout@@GLIBC_2.2.5+0x2168>
   12b95:	cmp    rdx,r9
   12b98:	jae    12c23 <g_str_equal@plt+0xa86b>
   12b9e:	sub    rsp,0x8
   12ba2:	jmp    12bd6 <g_str_equal@plt+0xa81e>
   12ba4:	nop    DWORD PTR [rax+0x0]
   12ba8:	mov    rdi,QWORD PTR [rcx+0x10]
   12bac:	add    rdx,0x1
   12bb0:	mov    QWORD PTR [rcx],0x0
   12bb7:	mov    QWORD PTR [rcx+0x8],rdx
   12bbb:	test   rdi,rdi
   12bbe:	je     12c0c <g_str_equal@plt+0xa854>
   12bc0:	mov    rsi,QWORD PTR [r8+0x8]
   12bc4:	call   12a30 <g_str_equal@plt+0xa678>
   12bc9:	test   al,al
   12bcb:	jne    12c0c <g_str_equal@plt+0xa854>
   12bcd:	mov    rdx,QWORD PTR [rcx+0x8]
   12bd1:	cmp    rdx,r9
   12bd4:	jae    12c18 <g_str_equal@plt+0xa860>
   12bd6:	lea    rsi,[r10+rdx*8]
   12bda:	mov    rax,QWORD PTR [rcx]
   12bdd:	mov    rdi,QWORD PTR [rsi]
   12be0:	lea    r11,[rax*8+0x0]
   12be8:	mov    r8,QWORD PTR [rdi+rax*8]
   12bec:	test   r8,r8
   12bef:	je     12c0c <g_str_equal@plt+0xa854>
   12bf1:	add    rax,0x1
   12bf5:	mov    QWORD PTR [rcx],rax
   12bf8:	mov    rax,QWORD PTR [rsi]
   12bfb:	cmp    QWORD PTR [rax+r11*1+0x8],0x0
   12c01:	je     12ba8 <g_str_equal@plt+0xa7f0>
   12c03:	mov    rdi,QWORD PTR [rcx+0x10]
   12c07:	test   rdi,rdi
   12c0a:	jne    12bc0 <g_str_equal@plt+0xa808>
   12c0c:	mov    rax,r8
   12c0f:	add    rsp,0x8
   12c13:	ret    
   12c14:	nop    DWORD PTR [rax+0x0]
   12c18:	xor    r8d,r8d
   12c1b:	add    rsp,0x8
   12c1f:	mov    rax,r8
   12c22:	ret    
   12c23:	xor    r8d,r8d
   12c26:	mov    rax,r8
   12c29:	ret    
   12c2a:	nop    WORD PTR [rax+rax*1+0x0]
   12c30:	push   r12
   12c32:	push   rbp
   12c33:	push   rbx
   12c34:	sub    rsp,0x20
   12c38:	mov    rax,QWORD PTR fs:0x28
   12c41:	mov    QWORD PTR [rsp+0x18],rax
   12c46:	xor    eax,eax
   12c48:	test   rdi,rdi
   12c4b:	je     12cac <g_str_equal@plt+0xa8f4>
   12c4d:	mov    rbp,rdi
   12c50:	mov    QWORD PTR [rsp],0x0
   12c58:	mov    QWORD PTR [rsp+0x8],0x0
   12c61:	mov    QWORD PTR [rsp+0x10],0x0
   12c6a:	mov    r12,rsp
   12c6d:	jmp    12c80 <g_str_equal@plt+0xa8c8>
   12c6f:	nop
   12c70:	mov    rdi,QWORD PTR [rbx+0x8]
   12c74:	mov    rsi,rbp
   12c77:	call   8060 <strcmp@plt>
   12c7c:	test   eax,eax
   12c7e:	je     12c90 <g_str_equal@plt+0xa8d8>
   12c80:	mov    rdi,r12
   12c83:	call   12b80 <g_str_equal@plt+0xa7c8>
   12c88:	test   rax,rax
   12c8b:	mov    rbx,rax
   12c8e:	jne    12c70 <g_str_equal@plt+0xa8b8>
   12c90:	mov    rdx,QWORD PTR [rsp+0x18]
   12c95:	xor    rdx,QWORD PTR fs:0x28
   12c9e:	mov    rax,rbx
   12ca1:	jne    12ccb <g_str_equal@plt+0xa913>
   12ca3:	add    rsp,0x20
   12ca7:	pop    rbx
   12ca8:	pop    rbp
   12ca9:	pop    r12
   12cab:	ret    
   12cac:	lea    rcx,[rip+0x1906d]        # 2bd20 <_fini@@Base+0x2a9c>
   12cb3:	lea    rsi,[rip+0x18f16]        # 2bbd0 <_fini@@Base+0x294c>
   12cba:	lea    rdi,[rip+0x19004]        # 2bcc5 <_fini@@Base+0x2a41>
   12cc1:	mov    edx,0x58
   12cc6:	call   7a70 <__assert_fail@plt>
   12ccb:	call   8050 <__stack_chk_fail@plt>
   12cd0:	push   rbp
   12cd1:	push   rbx
   12cd2:	lea    rbp,[rip+0x166ba]        # 29393 <_fini@@Base+0x10f>
   12cd9:	sub    rsp,0x28
   12cdd:	mov    rax,QWORD PTR fs:0x28
   12ce6:	mov    QWORD PTR [rsp+0x18],rax
   12ceb:	xor    eax,eax
   12ced:	mov    QWORD PTR [rsp],0x0
   12cf5:	mov    QWORD PTR [rsp+0x8],0x0
   12cfe:	mov    rbx,rsp
   12d01:	mov    QWORD PTR [rsp+0x10],0x0
   12d0a:	jmp    12d2a <g_str_equal@plt+0xa972>
   12d0c:	nop    DWORD PTR [rax+0x0]
   12d10:	mov    rcx,QWORD PTR [rax+0x8]
   12d14:	mov    rdi,QWORD PTR [rip+0x22cf85]        # 23fca0 <stderr@@GLIBC_2.2.5>
   12d1b:	mov    rdx,rbp
   12d1e:	mov    esi,0x1
   12d23:	xor    eax,eax
   12d25:	call   79e0 <__fprintf_chk@plt>
   12d2a:	mov    rdi,rbx
   12d2d:	call   12b80 <g_str_equal@plt+0xa7c8>
   12d32:	test   rax,rax
   12d35:	jne    12d10 <g_str_equal@plt+0xa958>
   12d37:	mov    rax,QWORD PTR [rsp+0x18]
   12d3c:	xor    rax,QWORD PTR fs:0x28
   12d45:	jne    12d4e <g_str_equal@plt+0xa996>
   12d47:	add    rsp,0x28
   12d4b:	pop    rbx
   12d4c:	pop    rbp
   12d4d:	ret    
   12d4e:	call   8050 <__stack_chk_fail@plt>
   12d53:	nop    DWORD PTR [rax]
   12d56:	nop    WORD PTR cs:[rax+rax*1+0x0]
   12d60:	push   r13
   12d62:	push   r12
   12d64:	mov    ecx,0x2
   12d69:	push   rbp
   12d6a:	push   rbx
   12d6b:	mov    rbx,rdi
   12d6e:	lea    rdi,[rip+0x17d33]        # 2aaa8 <_fini@@Base+0x1824>
   12d75:	mov    rsi,rbx
   12d78:	sub    rsp,0x28
   12d7c:	mov    rax,QWORD PTR fs:0x28
   12d85:	mov    QWORD PTR [rsp+0x18],rax
   12d8a:	xor    eax,eax
   12d8c:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   12d8e:	seta   al
   12d91:	sbb    al,0x0
   12d93:	test   al,al
   12d95:	je     12e20 <g_str_equal@plt+0xaa68>
   12d9b:	lea    rdi,[rip+0x17d08]        # 2aaaa <_fini@@Base+0x1826>
   12da2:	mov    ecx,0x5
   12da7:	mov    rsi,rbx
   12daa:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   12dac:	seta   al
   12daf:	sbb    al,0x0
   12db1:	test   al,al
   12db3:	je     12e20 <g_str_equal@plt+0xaa68>
   12db5:	movzx  eax,BYTE PTR [rbx]
   12db8:	cmp    al,0x2d
   12dba:	setne  bpl
   12dbe:	je     12e68 <g_str_equal@plt+0xaab0>
   12dc4:	mov    esi,0x2a
   12dc9:	mov    rdi,rbx
   12dcc:	mov    r12,rsp
   12dcf:	call   7f90 <strchr@plt>
   12dd4:	movzx  ebp,bpl
   12dd8:	mov    r13,rax
   12ddb:	mov    QWORD PTR [rsp],0x0
   12de3:	mov    QWORD PTR [rsp+0x8],0x0
   12dec:	mov    QWORD PTR [rsp+0x10],rbx
   12df1:	mov    rdi,r12
   12df4:	call   12b80 <g_str_equal@plt+0xa7c8>
   12df9:	test   rax,rax
   12dfc:	je     12ea0 <g_str_equal@plt+0xaae8>
   12e02:	cmp    BYTE PTR [rax+0x10],0x0
   12e06:	jne    12e50 <g_str_equal@plt+0xaa98>
   12e08:	test   r13,r13
   12e0b:	jne    12df1 <g_str_equal@plt+0xaa39>
   12e0d:	lea    rdi,[rip+0x18e44]        # 2bc58 <_fini@@Base+0x29d4>
   12e14:	mov    rsi,rbx
   12e17:	xor    eax,eax
   12e19:	call   e5e0 <g_str_equal@plt+0x6228>
   12e1e:	jmp    12e33 <g_str_equal@plt+0xaa7b>
   12e20:	call   12cd0 <g_str_equal@plt+0xa918>
   12e25:	mov    rax,0xfffffffffffffff8
   12e2c:	cmp    QWORD PTR fs:[rax],0x0
   12e31:	je     12e98 <g_str_equal@plt+0xaae0>
   12e33:	mov    rax,QWORD PTR [rsp+0x18]
   12e38:	xor    rax,QWORD PTR fs:0x28
   12e41:	jne    12eb9 <g_str_equal@plt+0xab01>
   12e43:	add    rsp,0x28
   12e47:	pop    rbx
   12e48:	pop    rbp
   12e49:	pop    r12
   12e4b:	pop    r13
   12e4d:	ret    
   12e4e:	xchg   ax,ax
   12e50:	mov    esi,ebp
   12e52:	mov    rdi,rax
   12e55:	call   14820 <g_str_equal@plt+0xc468>
   12e5a:	test   r13,r13
   12e5d:	jne    12df1 <g_str_equal@plt+0xaa39>
   12e5f:	jmp    12e33 <g_str_equal@plt+0xaa7b>
   12e61:	nop    DWORD PTR [rax+0x0]
   12e68:	add    rbx,0x1
   12e6c:	jne    12dc4 <g_str_equal@plt+0xaa0c>
   12e72:	lea    rcx,[rip+0x18e87]        # 2bd00 <_fini@@Base+0x2a7c>
   12e79:	lea    rsi,[rip+0x18d90]        # 2bc10 <_fini@@Base+0x298c>
   12e80:	lea    rdi,[rip+0x18e4b]        # 2bcd2 <_fini@@Base+0x2a4e>
   12e87:	mov    edx,0x15
   12e8c:	call   7a70 <__assert_fail@plt>
   12e91:	nop    DWORD PTR [rax+0x0]
   12e98:	xor    edi,edi
   12e9a:	call   7a40 <exit@plt>
   12e9f:	nop
   12ea0:	test   r13,r13
   12ea3:	jne    12e33 <g_str_equal@plt+0xaa7b>
   12ea5:	lea    rdi,[rip+0x18dd4]        # 2bc80 <_fini@@Base+0x29fc>
   12eac:	mov    rsi,rbx
   12eaf:	call   e5e0 <g_str_equal@plt+0x6228>
   12eb4:	jmp    12e33 <g_str_equal@plt+0xaa7b>
   12eb9:	call   8050 <__stack_chk_fail@plt>
   12ebe:	xchg   ax,ax
   12ec0:	push   r14
   12ec2:	push   r13
   12ec4:	push   r12
   12ec6:	push   rbp
   12ec7:	push   rbx
   12ec8:	sub    rsp,0x430
   12ecf:	mov    rax,QWORD PTR fs:0x28
   12ed8:	mov    QWORD PTR [rsp+0x428],rax
   12ee0:	xor    eax,eax
   12ee2:	test   rdi,rdi
   12ee5:	je     12fbc <g_str_equal@plt+0xac04>
   12eeb:	mov    r14,rsp
   12eee:	mov    r12,rdi
   12ef1:	mov    rdi,r14
   12ef4:	call   e350 <g_str_equal@plt+0x5f98>
   12ef9:	xor    esi,esi
   12efb:	mov    rdi,r12
   12efe:	call   e460 <g_str_equal@plt+0x60a8>
   12f03:	lea    rsi,[rip+0x1b9a7]        # 2e8b1 <_fini@@Base+0x562d>
   12f0a:	mov    rdi,r12
   12f0d:	call   8210 <fopen64@plt>
   12f12:	test   rax,rax
   12f15:	mov    r13,rax
   12f18:	je     12fe9 <g_str_equal@plt+0xac31>
   12f1e:	lea    rbx,[rsp+0x20]
   12f23:	xor    ebp,ebp
   12f25:	nop    DWORD PTR [rax]
   12f28:	mov    rdx,r13
   12f2b:	mov    esi,0x400
   12f30:	mov    rdi,rbx
   12f33:	call   7c10 <fgets@plt>
   12f38:	test   rax,rax
   12f3b:	je     12fa8 <g_str_equal@plt+0xabf0>
   12f3d:	add    rbp,0x1
   12f41:	mov    rdi,r12
   12f44:	mov    esi,ebp
   12f46:	call   e460 <g_str_equal@plt+0x60a8>
   12f4b:	mov    rdx,rbx
   12f4e:	mov    ecx,DWORD PTR [rdx]
   12f50:	add    rdx,0x4
   12f54:	lea    eax,[rcx-0x1010101]
   12f5a:	not    ecx
   12f5c:	and    eax,ecx
   12f5e:	and    eax,0x80808080
   12f63:	je     12f4e <g_str_equal@plt+0xab96>
   12f65:	mov    ecx,eax
   12f67:	shr    ecx,0x10
   12f6a:	test   eax,0x8080
   12f6f:	cmove  eax,ecx
   12f72:	lea    rcx,[rdx+0x2]
   12f76:	mov    esi,eax
   12f78:	cmove  rdx,rcx
   12f7c:	add    sil,al
   12f7f:	sbb    rdx,0x3
   12f83:	sub    rdx,rbx
   12f86:	cmp    rdx,0x1
   12f8a:	jbe    12f28 <g_str_equal@plt+0xab70>
   12f8c:	mov    BYTE PTR [rsp+rdx*1+0x1f],0x0
   12f91:	cmp    BYTE PTR [rsp+0x20],0x23
   12f96:	je     12f28 <g_str_equal@plt+0xab70>
   12f98:	mov    rdi,rbx
   12f9b:	call   12d60 <g_str_equal@plt+0xa9a8>
   12fa0:	jmp    12f28 <g_str_equal@plt+0xab70>
   12fa2:	nop    WORD PTR [rax+rax*1+0x0]
   12fa8:	mov    rdi,r13
   12fab:	call   8110 <fclose@plt>
   12fb0:	test   eax,eax
   12fb2:	jne    12fdf <g_str_equal@plt+0xac27>
   12fb4:	mov    rdi,r14
   12fb7:	call   e370 <g_str_equal@plt+0x5fb8>
   12fbc:	mov    rax,QWORD PTR [rsp+0x428]
   12fc4:	xor    rax,QWORD PTR fs:0x28
   12fcd:	jne    13010 <g_str_equal@plt+0xac58>
   12fcf:	add    rsp,0x430
   12fd6:	pop    rbx
   12fd7:	pop    rbp
   12fd8:	pop    r12
   12fda:	pop    r13
   12fdc:	pop    r14
   12fde:	ret    
   12fdf:	xor    esi,esi
   12fe1:	mov    rdi,r12
   12fe4:	call   e460 <g_str_equal@plt+0x60a8>
   12fe9:	call   7fd0 <__errno_location@plt>
   12fee:	mov    edi,DWORD PTR [rax]
   12ff0:	call   7e90 <strerror@plt>
   12ff5:	lea    rdi,[rip+0x1b95e]        # 2e95a <_fini@@Base+0x56d6>
   12ffc:	mov    rsi,rax
   12fff:	xor    eax,eax
   13001:	call   e520 <g_str_equal@plt+0x6168>
   13006:	mov    edi,0x1
   1300b:	call   7a40 <exit@plt>
   13010:	call   8050 <__stack_chk_fail@plt>
   13015:	nop
   13016:	nop    WORD PTR cs:[rax+rax*1+0x0]
   13020:	test   rdi,rdi
   13023:	je     13038 <g_str_equal@plt+0xac80>
   13025:	lea    rsi,[rip+0x22dccc]        # 240cf8 <stdout@@GLIBC_2.2.5+0x1050>
   1302c:	jmp    111b0 <g_str_equal@plt+0x8df8>
   13031:	nop    DWORD PTR [rax+0x0]
   13038:	repz ret 
   1303a:	nop    WORD PTR [rax+rax*1+0x0]
   13040:	push   r13
   13042:	push   r12
   13044:	push   rbp
   13045:	push   rbx
   13046:	mov    rbp,rdi
   13049:	sub    rsp,0x28
   1304d:	mov    esi,DWORD PTR [rip+0x22eda5]        # 241df8 <stdout@@GLIBC_2.2.5+0x2150>
   13053:	mov    rax,QWORD PTR fs:0x28
   1305c:	mov    QWORD PTR [rsp+0x18],rax
   13061:	xor    eax,eax
   13063:	mov    rbx,rsp
   13066:	test   esi,esi
   13068:	jne    13108 <g_str_equal@plt+0xad50>
   1306e:	mov    QWORD PTR [rsp],0x0
   13076:	mov    QWORD PTR [rsp+0x8],0x0
   1307f:	mov    QWORD PTR [rsp+0x10],0x0
   13088:	nop    DWORD PTR [rax+rax*1+0x0]
   13090:	mov    rdi,rbx
   13093:	call   12b80 <g_str_equal@plt+0xa7c8>
   13098:	test   rax,rax
   1309b:	je     130e8 <g_str_equal@plt+0xad30>
   1309d:	mov    edx,DWORD PTR [rax+0x4]
   130a0:	cmp    edx,0xffffffff
   130a3:	je     13090 <g_str_equal@plt+0xacd8>
   130a5:	cmp    BYTE PTR [rax+0x10],0x0
   130a9:	je     13090 <g_str_equal@plt+0xacd8>
   130ab:	mov    ecx,DWORD PTR [rip+0x22ed47]        # 241df8 <stdout@@GLIBC_2.2.5+0x2150>
   130b1:	test   ecx,ecx
   130b3:	je     13090 <g_str_equal@plt+0xacd8>
   130b5:	mov    ecx,edx
   130b7:	shr    rcx,0x6
   130bb:	mov    rcx,QWORD PTR [rbp+rcx*8+0x8270]
   130c3:	bt     rcx,rdx
   130c7:	jae    13090 <g_str_equal@plt+0xacd8>
   130c9:	xor    edx,edx
   130cb:	mov    rsi,rax
   130ce:	mov    rdi,rbp
   130d1:	call   148d0 <g_str_equal@plt+0xc518>
   130d6:	mov    rdi,rbx
   130d9:	call   12b80 <g_str_equal@plt+0xa7c8>
   130de:	test   rax,rax
   130e1:	jne    1309d <g_str_equal@plt+0xace5>
   130e3:	nop    DWORD PTR [rax+rax*1+0x0]
   130e8:	mov    rax,QWORD PTR [rsp+0x18]
   130ed:	xor    rax,QWORD PTR fs:0x28
   130f6:	jne    1316a <g_str_equal@plt+0xadb2>
   130f8:	add    rsp,0x28
   130fc:	pop    rbx
   130fd:	pop    rbp
   130fe:	pop    r12
   13100:	pop    r13
   13102:	ret    
   13103:	nop    DWORD PTR [rax+rax*1+0x0]
   13108:	mov    eax,DWORD PTR [rip+0x22bdb6]        # 23eec4 <g_test_config_vars+0x17a4>
   1310e:	mov    rdx,rax
   13111:	shr    rax,0x6
   13115:	mov    rax,QWORD PTR [rdi+rax*8+0x8270]
   1311d:	bt     rax,rdx
   13121:	jae    1306e <g_str_equal@plt+0xacb6>
   13127:	test   BYTE PTR [rip+0x22dc13],0x80        # 240d41 <stdout@@GLIBC_2.2.5+0x1099>
   1312e:	je     1306e <g_str_equal@plt+0xacb6>
   13134:	xor    esi,esi
   13136:	mov    rdi,rbx
   13139:	call   7a90 <gettimeofday@plt>
   1313e:	mov    r13,QWORD PTR [rsp+0x8]
   13143:	mov    r12,QWORD PTR [rsp]
   13147:	call   7bf0 <getpid@plt>
   1314c:	lea    rdi,[rip+0x18b4d]        # 2bca0 <_fini@@Base+0x2a1c>
   13153:	mov    esi,eax
   13155:	mov    r8,rbp
   13158:	mov    rcx,r13
   1315b:	mov    rdx,r12
   1315e:	xor    eax,eax
   13160:	call   10b60 <g_str_equal@plt+0x87a8>
   13165:	jmp    1306e <g_str_equal@plt+0xacb6>
   1316a:	call   8050 <__stack_chk_fail@plt>
   1316f:	nop
   13170:	mov    eax,0x1
   13175:	ret    
   13176:	nop    WORD PTR cs:[rax+rax*1+0x0]
   13180:	push   rbp
   13181:	push   rbx
   13182:	mov    rbx,rdi
   13185:	lea    rdi,[rip+0x18b52]        # 2bcde <_fini@@Base+0x2a5a>
   1318c:	sub    rsp,0x8
   13190:	call   13a80 <g_str_equal@plt+0xb6c8>
   13195:	mov    edx,0x1
   1319a:	mov    rsi,rbx
   1319d:	mov    rdi,rax
   131a0:	call   10470 <g_str_equal@plt+0x80b8>
   131a5:	test   rax,rax
   131a8:	je     1321b <g_str_equal@plt+0xae63>
   131aa:	lea    rsi,[rip+0x18b33]        # 2bce4 <_fini@@Base+0x2a60>
   131b1:	mov    rdi,rax
   131b4:	mov    rbx,rax
   131b7:	call   f930 <g_str_equal@plt+0x7578>
   131bc:	test   rax,rax
   131bf:	je     131d8 <g_str_equal@plt+0xae20>
   131c1:	lea    rsi,[rip+0x18b1c]        # 2bce4 <_fini@@Base+0x2a60>
   131c8:	mov    rdi,rbx
   131cb:	call   f930 <g_str_equal@plt+0x7578>
   131d0:	mov    rdi,rax
   131d3:	call   12d60 <g_str_equal@plt+0xa9a8>
   131d8:	lea    rsi,[rip+0x18b0c]        # 2bceb <_fini@@Base+0x2a67>
   131df:	mov    rdi,rbx
   131e2:	call   f930 <g_str_equal@plt+0x7578>
   131e7:	mov    rdi,rax
   131ea:	call   12ec0 <g_str_equal@plt+0xab08>
   131ef:	lea    rsi,[rip+0x18ebd]        # 2c0b3 <_fini@@Base+0x2e2f>
   131f6:	mov    rdi,rbx
   131f9:	call   f930 <g_str_equal@plt+0x7578>
   131fe:	mov    rdi,rax
   13201:	call   7a50 <g_strdup@plt>
   13206:	mov    rdi,rbx
   13209:	mov    rbp,rax
   1320c:	call   102d0 <g_str_equal@plt+0x7f18>
   13211:	add    rsp,0x8
   13215:	mov    rax,rbp
   13218:	pop    rbx
   13219:	pop    rbp
   1321a:	ret    
   1321b:	mov    edi,0x1
   13220:	call   7a40 <exit@plt>
   13225:	nop
   13226:	nop    WORD PTR cs:[rax+rax*1+0x0]
   13230:	mov    eax,DWORD PTR [rip+0x22ebc6]        # 241dfc <stdout@@GLIBC_2.2.5+0x2154>
   13236:	ret    
   13237:	nop    WORD PTR [rax+rax*1+0x0]
   13240:	push   rbp
   13241:	push   rbx
   13242:	sub    rsp,0x88
   13249:	mov    rax,QWORD PTR fs:0x28
   13252:	mov    QWORD PTR [rsp+0x78],rax
   13257:	xor    eax,eax
   13259:	cmp    edi,0xffffffff
   1325c:	je     1328b <g_str_equal@plt+0xaed3>
   1325e:	mov    ebx,edi
   13260:	mov    rbp,rsp
   13263:	jmp    13272 <g_str_equal@plt+0xaeba>
   13265:	nop    DWORD PTR [rax]
   13268:	call   7fd0 <__errno_location@plt>
   1326d:	cmp    DWORD PTR [rax],0x4
   13270:	jne    1328b <g_str_equal@plt+0xaed3>
   13272:	mov    rsi,rbp
   13275:	mov    edi,ebx
   13277:	call   7930 <fstatfs64@plt>
   1327c:	test   eax,eax
   1327e:	jne    13268 <g_str_equal@plt+0xaeb0>
   13280:	mov    eax,0x958458f6
   13285:	cmp    QWORD PTR [rsp],rax
   13289:	je     132b0 <g_str_equal@plt+0xaef8>
   1328b:	call   7e00 <getpagesize@plt>
   13290:	cdqe   
   13292:	mov    rdx,QWORD PTR [rsp+0x78]
   13297:	xor    rdx,QWORD PTR fs:0x28
   132a0:	jne    132b7 <g_str_equal@plt+0xaeff>
   132a2:	add    rsp,0x88
   132a9:	pop    rbx
   132aa:	pop    rbp
   132ab:	ret    
   132ac:	nop    DWORD PTR [rax+0x0]
   132b0:	mov    rax,QWORD PTR [rsp+0x8]
   132b5:	jmp    13292 <g_str_equal@plt+0xaeda>
   132b7:	call   8050 <__stack_chk_fail@plt>
   132bc:	nop    DWORD PTR [rax+0x0]
   132c0:	push   rbp
   132c1:	push   rbx
   132c2:	sub    rsp,0x88
   132c9:	mov    rax,QWORD PTR fs:0x28
   132d2:	mov    QWORD PTR [rsp+0x78],rax
   132d7:	xor    eax,eax
   132d9:	test   rdi,rdi
   132dc:	je     13316 <g_str_equal@plt+0xaf5e>
   132de:	mov    rbx,rdi
   132e1:	mov    rbp,rsp
   132e4:	jmp    132fc <g_str_equal@plt+0xaf44>
   132e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   132f0:	call   7fd0 <__errno_location@plt>
   132f5:	mov    edi,DWORD PTR [rax]
   132f7:	cmp    edi,0x4
   132fa:	jne    13350 <g_str_equal@plt+0xaf98>
   132fc:	mov    rsi,rbp
   132ff:	mov    rdi,rbx
   13302:	call   7e10 <statfs64@plt>
   13307:	test   eax,eax
   13309:	jne    132f0 <g_str_equal@plt+0xaf38>
   1330b:	mov    eax,0x958458f6
   13310:	cmp    QWORD PTR [rsp],rax
   13314:	je     13340 <g_str_equal@plt+0xaf88>
   13316:	call   7e00 <getpagesize@plt>
   1331b:	cdqe   
   1331d:	mov    rdx,QWORD PTR [rsp+0x78]
   13322:	xor    rdx,QWORD PTR fs:0x28
   1332b:	jne    1337c <g_str_equal@plt+0xafc4>
   1332d:	add    rsp,0x88
   13334:	pop    rbx
   13335:	pop    rbp
   13336:	ret    
   13337:	nop    WORD PTR [rax+rax*1+0x0]
   13340:	mov    rax,QWORD PTR [rsp+0x8]
   13345:	jmp    1331d <g_str_equal@plt+0xaf65>
   13347:	nop    WORD PTR [rax+rax*1+0x0]
   13350:	call   7e90 <strerror@plt>
   13355:	mov    rdi,QWORD PTR [rip+0x22c944]        # 23fca0 <stderr@@GLIBC_2.2.5>
   1335c:	lea    rdx,[rip+0x189d5]        # 2bd38 <_fini@@Base+0x2ab4>
   13363:	mov    rcx,rax
   13366:	mov    esi,0x1
   1336b:	xor    eax,eax
   1336d:	call   79e0 <__fprintf_chk@plt>
   13372:	mov    edi,0x1
   13377:	call   7a40 <exit@plt>
   1337c:	call   8050 <__stack_chk_fail@plt>
   13381:	nop    DWORD PTR [rax+rax*1+0x0]
   13386:	nop    WORD PTR cs:[rax+rax*1+0x0]
   13390:	push   r15
   13392:	push   r14
   13394:	xor    r9d,r9d
   13397:	push   r13
   13399:	push   r12
   1339b:	lea    r12,[rsi+rdx*1]
   1339f:	push   rbp
   133a0:	push   rbx
   133a1:	mov    r14d,edi
   133a4:	mov    r13,rsi
   133a7:	xor    edi,edi
   133a9:	mov    rbx,rdx
   133ac:	sub    rsp,0x18
   133b0:	xor    edx,edx
   133b2:	mov    r8d,0xffffffff
   133b8:	mov    DWORD PTR [rsp],ecx
   133bb:	mov    rsi,r12
   133be:	mov    ecx,0x22
   133c3:	call   7980 <mmap64@plt>
   133c8:	cmp    rax,0xffffffffffffffff
   133cc:	mov    r15,rax
   133cf:	je     134c0 <g_str_equal@plt+0xb108>
   133d5:	test   rbx,rbx
   133d8:	je     134d5 <g_str_equal@plt+0xb11d>
   133de:	lea    rbp,[rbx-0x1]
   133e2:	test   rbx,rbp
   133e5:	jne    134d5 <g_str_equal@plt+0xb11d>
   133eb:	call   7e00 <getpagesize@plt>
   133f0:	movsxd r11,eax
   133f3:	cmp    r11,rbx
   133f6:	ja     134f4 <g_str_equal@plt+0xb13c>
   133fc:	lea    rax,[r15+rbp*1]
   13400:	xor    edx,edx
   13402:	mov    ecx,0x10
   13407:	mov    r8d,r14d
   1340a:	mov    rsi,r13
   1340d:	mov    QWORD PTR [rsp+0x8],r11
   13412:	div    rbx
   13415:	mov    edx,0x3
   1341a:	imul   rax,rbx
   1341e:	sub    rax,r15
   13421:	cmp    r14d,0xffffffff
   13425:	mov    rbx,rax
   13428:	mov    eax,0x30
   1342d:	cmove  ecx,eax
   13430:	xor    eax,eax
   13432:	cmp    BYTE PTR [rsp],0x0
   13436:	lea    rdi,[r15+rbx*1]
   1343a:	sete   al
   1343d:	xor    r9d,r9d
   13440:	add    eax,0x1
   13443:	or     ecx,eax
   13445:	call   7980 <mmap64@plt>
   1344a:	cmp    rax,0xffffffffffffffff
   1344e:	mov    rbp,rax
   13451:	mov    r11,QWORD PTR [rsp+0x8]
   13456:	je     134c8 <g_str_equal@plt+0xb110>
   13458:	test   rbx,rbx
   1345b:	jne    13498 <g_str_equal@plt+0xb0e0>
   1345d:	lea    rdi,[r11+r13*1]
   13461:	sub    r12,rbx
   13464:	cmp    rdi,r12
   13467:	jb     13480 <g_str_equal@plt+0xb0c8>
   13469:	add    rsp,0x18
   1346d:	mov    rax,rbp
   13470:	pop    rbx
   13471:	pop    rbp
   13472:	pop    r12
   13474:	pop    r13
   13476:	pop    r14
   13478:	pop    r15
   1347a:	ret    
   1347b:	nop    DWORD PTR [rax+rax*1+0x0]
   13480:	sub    r12,r13
   13483:	add    rdi,rbp
   13486:	mov    rsi,r12
   13489:	sub    rsi,r11
   1348c:	call   80f0 <munmap@plt>
   13491:	jmp    13469 <g_str_equal@plt+0xb0b1>
   13493:	nop    DWORD PTR [rax+rax*1+0x0]
   13498:	mov    rdi,r15
   1349b:	mov    rsi,rbx
   1349e:	mov    QWORD PTR [rsp],r11
   134a2:	call   80f0 <munmap@plt>
   134a7:	mov    r11,QWORD PTR [rsp]
   134ab:	sub    r12,rbx
   134ae:	lea    rdi,[r11+r13*1]
   134b2:	cmp    rdi,r12
   134b5:	jae    13469 <g_str_equal@plt+0xb0b1>
   134b7:	jmp    13480 <g_str_equal@plt+0xb0c8>
   134b9:	nop    DWORD PTR [rax+0x0]
   134c0:	mov    rbp,rax
   134c3:	jmp    13469 <g_str_equal@plt+0xb0b1>
   134c5:	nop    DWORD PTR [rax]
   134c8:	mov    rsi,r12
   134cb:	mov    rdi,r15
   134ce:	call   80f0 <munmap@plt>
   134d3:	jmp    13469 <g_str_equal@plt+0xb0b1>
   134d5:	lea    rcx,[rip+0x188ec]        # 2bdc8 <_fini@@Base+0x2b44>
   134dc:	lea    rsi,[rip+0x1887d]        # 2bd60 <_fini@@Base+0x2adc>
   134e3:	lea    rdi,[rip+0x188b1]        # 2bd9b <_fini@@Base+0x2b17>
   134ea:	mov    edx,0x6b
   134ef:	call   7a70 <__assert_fail@plt>
   134f4:	lea    rcx,[rip+0x188cd]        # 2bdc8 <_fini@@Base+0x2b44>
   134fb:	lea    rsi,[rip+0x1885e]        # 2bd60 <_fini@@Base+0x2adc>
   13502:	lea    rdi,[rip+0x188a7]        # 2bdb0 <_fini@@Base+0x2b2c>
   13509:	mov    edx,0x6d
   1350e:	call   7a70 <__assert_fail@plt>
   13513:	nop    DWORD PTR [rax]
   13516:	nop    WORD PTR cs:[rax+rax*1+0x0]
   13520:	test   rdi,rdi
   13523:	je     13550 <g_str_equal@plt+0xb198>
   13525:	push   rbp
   13526:	push   rbx
   13527:	mov    rbp,rsi
   1352a:	mov    rbx,rdi
   1352d:	sub    rsp,0x8
   13531:	call   7e00 <getpagesize@plt>
   13536:	add    rsp,0x8
   1353a:	cdqe   
   1353c:	mov    rdi,rbx
   1353f:	lea    rsi,[rax+rbp*1]
   13543:	pop    rbx
   13544:	pop    rbp
   13545:	jmp    80f0 <munmap@plt>
   1354a:	nop    WORD PTR [rax+rax*1+0x0]
   13550:	repz ret 
   13552:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1355c:	nop    DWORD PTR [rax+0x0]
   13560:	lea    rax,[rip+0x22e8d9]        # 241e40 <stdout@@GLIBC_2.2.5+0x2198>
   13567:	mov    QWORD PTR [rip+0x22e8ce],0x0        # 241e40 <stdout@@GLIBC_2.2.5+0x2198>
   13572:	mov    QWORD PTR [rip+0x22e8d3],0x0        # 241e50 <stdout@@GLIBC_2.2.5+0x21a8>
   1357d:	mov    QWORD PTR [rip+0x22e8d8],0x0        # 241e60 <stdout@@GLIBC_2.2.5+0x21b8>
   13588:	mov    QWORD PTR [rip+0x22e8dd],0x0        # 241e70 <stdout@@GLIBC_2.2.5+0x21c8>
   13593:	mov    QWORD PTR [rip+0x22e8ae],rax        # 241e48 <stdout@@GLIBC_2.2.5+0x21a0>
   1359a:	add    rax,0x10
   1359e:	mov    QWORD PTR [rip+0x22e887],0x0        # 241e30 <stdout@@GLIBC_2.2.5+0x2188>
   135a9:	mov    QWORD PTR [rip+0x22e8a8],rax        # 241e58 <stdout@@GLIBC_2.2.5+0x21b0>
   135b0:	add    rax,0x10
   135b4:	mov    DWORD PTR [rip+0x22e862],0x1        # 241e20 <stdout@@GLIBC_2.2.5+0x2178>
   135be:	mov    QWORD PTR [rip+0x22e8a3],rax        # 241e68 <stdout@@GLIBC_2.2.5+0x21c0>
   135c5:	add    rax,0x10
   135c9:	mov    QWORD PTR [rip+0x22e8a8],rax        # 241e78 <stdout@@GLIBC_2.2.5+0x21d0>
   135d0:	lea    rax,[rip+0x22e859]        # 241e30 <stdout@@GLIBC_2.2.5+0x2188>
   135d7:	mov    QWORD PTR [rip+0x22e85a],rax        # 241e38 <stdout@@GLIBC_2.2.5+0x2190>
   135de:	ret    
   135df:	nop
   135e0:	push   rbp
   135e1:	push   rbx
   135e2:	mov    rbp,rdi
   135e5:	mov    edi,0x20
   135ea:	mov    ebx,esi
   135ec:	sub    rsp,0x18
   135f0:	call   80c0 <g_malloc0@plt>
   135f5:	mov    edx,DWORD PTR [rip+0x22e825]        # 241e20 <stdout@@GLIBC_2.2.5+0x2178>
   135fb:	mov    QWORD PTR [rax],rbp
   135fe:	mov    DWORD PTR [rax+0x18],ebx
   13601:	test   edx,edx
   13603:	jne    13614 <g_str_equal@plt+0xb25c>
   13605:	mov    QWORD PTR [rsp+0x8],rax
   1360a:	call   13560 <g_str_equal@plt+0xb1a8>
   1360f:	mov    rax,QWORD PTR [rsp+0x8]
   13614:	lea    rsi,[rip+0x22e825]        # 241e40 <stdout@@GLIBC_2.2.5+0x2198>
   1361b:	shl    rbx,0x4
   1361f:	mov    QWORD PTR [rax+0x8],0x0
   13627:	add    rbx,rsi
   1362a:	mov    rdx,QWORD PTR [rbx+0x8]
   1362e:	mov    QWORD PTR [rax+0x10],rdx
   13632:	mov    QWORD PTR [rdx],rax
   13635:	add    rax,0x8
   13639:	mov    QWORD PTR [rbx+0x8],rax
   1363d:	add    rsp,0x18
   13641:	pop    rbx
   13642:	pop    rbp
   13643:	ret    
   13644:	xchg   ax,ax
   13646:	nop    WORD PTR cs:[rax+rax*1+0x0]
   13650:	push   rbp
   13651:	push   rbx
   13652:	mov    rbp,rdi
   13655:	mov    ebx,esi
   13657:	sub    rsp,0x8
   1365b:	mov    eax,DWORD PTR [rip+0x22e7bf]        # 241e20 <stdout@@GLIBC_2.2.5+0x2178>
   13661:	test   eax,eax
   13663:	jne    1366a <g_str_equal@plt+0xb2b2>
   13665:	call   13560 <g_str_equal@plt+0xb1a8>
   1366a:	mov    edi,0x20
   1366f:	call   80c0 <g_malloc0@plt>
   13674:	mov    rdx,QWORD PTR [rip+0x22e7bd]        # 241e38 <stdout@@GLIBC_2.2.5+0x2190>
   1367b:	mov    QWORD PTR [rax],rbp
   1367e:	mov    DWORD PTR [rax+0x18],ebx
   13681:	mov    QWORD PTR [rax+0x8],0x0
   13689:	mov    QWORD PTR [rax+0x10],rdx
   1368d:	mov    QWORD PTR [rdx],rax
   13690:	add    rax,0x8
   13694:	mov    QWORD PTR [rip+0x22e79d],rax        # 241e38 <stdout@@GLIBC_2.2.5+0x2190>
   1369b:	add    rsp,0x8
   1369f:	pop    rbx
   136a0:	pop    rbp
   136a1:	ret    
   136a2:	nop    DWORD PTR [rax+0x0]
   136a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   136b0:	mov    eax,DWORD PTR [rip+0x22e76a]        # 241e20 <stdout@@GLIBC_2.2.5+0x2178>
   136b6:	push   rbx
   136b7:	test   eax,eax
   136b9:	je     136e8 <g_str_equal@plt+0xb330>
   136bb:	mov    edi,edi
   136bd:	lea    rax,[rip+0x22e77c]        # 241e40 <stdout@@GLIBC_2.2.5+0x2198>
   136c4:	shl    rdi,0x4
   136c8:	mov    rbx,QWORD PTR [rax+rdi*1]
   136cc:	test   rbx,rbx
   136cf:	je     136e3 <g_str_equal@plt+0xb32b>
   136d1:	nop    DWORD PTR [rax+0x0]
   136d8:	call   QWORD PTR [rbx]
   136da:	mov    rbx,QWORD PTR [rbx+0x8]
   136de:	test   rbx,rbx
   136e1:	jne    136d8 <g_str_equal@plt+0xb320>
   136e3:	pop    rbx
   136e4:	ret    
   136e5:	nop    DWORD PTR [rax]
   136e8:	call   13560 <g_str_equal@plt+0xb1a8>
   136ed:	jmp    136bb <g_str_equal@plt+0xb303>
   136ef:	nop
   136f0:	repz ret 
   136f2:	nop    WORD PTR cs:[rax+rax*1+0x0]
   136fc:	nop    DWORD PTR [rax+0x0]
   13700:	push   r13
   13702:	push   r12
   13704:	mov    r12,rdi
   13707:	push   rbp
   13708:	push   rbx
   13709:	sub    rsp,0x8
   1370d:	call   7d60 <__ctype_b_loc@plt>
   13712:	movzx  edx,BYTE PTR [r12]
   13717:	mov    r13,QWORD PTR [rax]
   1371a:	xor    eax,eax
   1371c:	test   BYTE PTR [r13+rdx*2+0x1],0x4
   13722:	je     13772 <g_str_equal@plt+0xb3ba>
   13724:	movzx  esi,BYTE PTR [r12+0x1]
   1372a:	test   sil,sil
   1372d:	je     1376d <g_str_equal@plt+0xb3b5>
   1372f:	lea    rbp,[rip+0x186a0]        # 2bdd6 <_fini@@Base+0x2b52>
   13736:	mov    ebx,0x1
   1373b:	nop    DWORD PTR [rax+rax*1+0x0]
   13740:	movzx  eax,sil
   13744:	test   BYTE PTR [r13+rax*2+0x0],0x8
   1374a:	jne    1375d <g_str_equal@plt+0xb3a5>
   1374c:	movsx  esi,sil
   13750:	mov    rdi,rbp
   13753:	call   7f90 <strchr@plt>
   13758:	test   rax,rax
   1375b:	je     13780 <g_str_equal@plt+0xb3c8>
   1375d:	add    ebx,0x1
   13760:	movsxd rax,ebx
   13763:	movzx  esi,BYTE PTR [r12+rax*1]
   13768:	test   sil,sil
   1376b:	jne    13740 <g_str_equal@plt+0xb388>
   1376d:	mov    eax,0x1
   13772:	add    rsp,0x8
   13776:	pop    rbx
   13777:	pop    rbp
   13778:	pop    r12
   1377a:	pop    r13
   1377c:	ret    
   1377d:	nop    DWORD PTR [rax]
   13780:	add    rsp,0x8
   13784:	xor    eax,eax
   13786:	pop    rbx
   13787:	pop    rbp
   13788:	pop    r12
   1378a:	pop    r13
   1378c:	ret    
   1378d:	nop    DWORD PTR [rax]
   13790:	push   rbp
   13791:	push   rbx
   13792:	sub    rsp,0x8
   13796:	cmp    edi,0x1
   13799:	ja     137eb <g_str_equal@plt+0xb433>
   1379b:	lea    rax,[rip+0x2298de]        # 23d080 <_fini@@Base+0x213dfc>
   137a2:	mov    ebx,edi
   137a4:	mov    rbp,QWORD PTR [rax+rbx*8]
   137a8:	test   rbp,rbp
   137ab:	je     1380a <g_str_equal@plt+0xb452>
   137ad:	mov    esi,0x64
   137b2:	xor    edi,edi
   137b4:	call   8090 <g_random_int_range@plt>
   137b9:	lea    rdx,[rip+0x22e6c0]        # 241e80 <stdout@@GLIBC_2.2.5+0x21d8>
   137c0:	mov    r8d,eax
   137c3:	lea    rdi,[rip+0x18622]        # 2bdec <_fini@@Base+0x2b68>
   137ca:	mov    esi,0x23
   137cf:	mov    rcx,QWORD PTR [rdx+rbx*8]
   137d3:	lea    rax,[rcx+0x1]
   137d7:	mov    QWORD PTR [rdx+rbx*8],rax
   137db:	add    rsp,0x8
   137df:	mov    rdx,rbp
   137e2:	pop    rbx
   137e3:	pop    rbp
   137e4:	xor    eax,eax
   137e6:	jmp    7ce0 <g_strdup_printf@plt>
   137eb:	lea    rcx,[rip+0x1866e]        # 2be60 <_fini@@Base+0x2bdc>
   137f2:	lea    rsi,[rip+0x1860f]        # 2be08 <_fini@@Base+0x2b84>
   137f9:	lea    rdi,[rip+0x18640]        # 2be40 <_fini@@Base+0x2bbc>
   13800:	mov    edx,0x3a
   13805:	call   7a70 <__assert_fail@plt>
   1380a:	lea    rcx,[rip+0x1864f]        # 2be60 <_fini@@Base+0x2bdc>
   13811:	lea    rsi,[rip+0x185f0]        # 2be08 <_fini@@Base+0x2b84>
   13818:	lea    rdi,[rip+0x185bb]        # 2bdda <_fini@@Base+0x2b56>
   1381f:	mov    edx,0x3b
   13824:	call   7a70 <__assert_fail@plt>
   13829:	nop    DWORD PTR [rax+0x0]
   13830:	push   r14
   13832:	push   r13
   13834:	mov    r14,rdx
   13837:	push   r12
   13839:	push   rbp
   1383a:	mov    r12,rdi
   1383d:	push   rbx
   1383e:	mov    rax,QWORD PTR [rdi]
   13841:	mov    r13,rsi
   13844:	mov    rbp,rdi
   13847:	test   rax,rax
   1384a:	je     13880 <g_str_equal@plt+0xb4c8>
   1384c:	xor    ebx,ebx
   1384e:	jmp    13863 <g_str_equal@plt+0xb4ab>
   13850:	add    ebx,0x1
   13853:	movsxd rax,ebx
   13856:	lea    rbp,[r12+rax*8]
   1385a:	mov    rax,QWORD PTR [rbp+0x0]
   1385e:	test   rax,rax
   13861:	je     13880 <g_str_equal@plt+0xb4c8>
   13863:	mov    rdi,QWORD PTR [rax]
   13866:	mov    rsi,r13
   13869:	call   8060 <strcmp@plt>
   1386e:	test   eax,eax
   13870:	jne    13850 <g_str_equal@plt+0xb498>
   13872:	pop    rbx
   13873:	mov    rax,QWORD PTR [rbp+0x0]
   13877:	pop    rbp
   13878:	pop    r12
   1387a:	pop    r13
   1387c:	pop    r14
   1387e:	ret    
   1387f:	nop
   13880:	lea    r8,[rip+0x185e5]        # 2be6c <_fini@@Base+0x2be8>
   13887:	lea    rcx,[rip+0x18cd2]        # 2c560 <_fini@@Base+0x32dc>
   1388e:	lea    rsi,[rip+0x188bb]        # 2c150 <_fini@@Base+0x2ecc>
   13895:	mov    r9,r13
   13898:	mov    rdi,r14
   1389b:	xor    eax,eax
   1389d:	mov    edx,0x19
   138a2:	call   db00 <g_str_equal@plt+0x5748>
   138a7:	pop    rbx
   138a8:	mov    rax,QWORD PTR [rbp+0x0]
   138ac:	pop    rbp
   138ad:	pop    r12
   138af:	pop    r13
   138b1:	pop    r14
   138b3:	ret    
   138b4:	xchg   ax,ax
   138b6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   138c0:	cmp    QWORD PTR [rdi],0x0
   138c4:	je     139b0 <g_str_equal@plt+0xb5f8>
   138ca:	push   r14
   138cc:	xor    r14d,r14d
   138cf:	push   r13
   138d1:	mov    r13,rdi
   138d4:	push   r12
   138d6:	xor    r12d,r12d
   138d9:	push   rbp
   138da:	push   rbx
   138db:	mov    rbx,rdi
   138de:	jmp    1394f <g_str_equal@plt+0xb597>
   138e0:	jb     13980 <g_str_equal@plt+0xb5c8>
   138e6:	cmp    eax,0x2
   138e9:	je     13990 <g_str_equal@plt+0xb5d8>
   138ef:	cmp    eax,0x3
   138f2:	jne    138fb <g_str_equal@plt+0xb543>
   138f4:	mov    DWORD PTR [rbp+0x8],0x3
   138fb:	mov    rdi,QWORD PTR [rbx+0x10]
   138ff:	test   rdi,rdi
   13902:	je     13911 <g_str_equal@plt+0xb559>
   13904:	mov    BYTE PTR [rbp+0xc],0x1
   13908:	call   7a50 <g_strdup@plt>
   1390d:	mov    QWORD PTR [rbp+0x10],rax
   13911:	mov    rdi,QWORD PTR [rbx+0x18]
   13915:	test   rdi,rdi
   13918:	je     13927 <g_str_equal@plt+0xb56f>
   1391a:	mov    BYTE PTR [rbp+0x18],0x1
   1391e:	call   7a50 <g_strdup@plt>
   13923:	mov    QWORD PTR [rbp+0x20],rax
   13927:	add    r12d,0x1
   1392b:	mov    edi,0x10
   13930:	movsxd rbx,r12d
   13933:	shl    rbx,0x5
   13937:	add    rbx,r13
   1393a:	call   80c0 <g_malloc0@plt>
   1393f:	cmp    QWORD PTR [rbx],0x0
   13943:	mov    QWORD PTR [rax],r14
   13946:	mov    r14,rax
   13949:	mov    QWORD PTR [rax+0x8],rbp
   1394d:	je     139a0 <g_str_equal@plt+0xb5e8>
   1394f:	mov    edi,0x28
   13954:	call   80c0 <g_malloc0@plt>
   13959:	mov    rdi,QWORD PTR [rbx]
   1395c:	mov    rbp,rax
   1395f:	call   7a50 <g_strdup@plt>
   13964:	mov    QWORD PTR [rbp+0x0],rax
   13968:	mov    eax,DWORD PTR [rbx+0x8]
   1396b:	cmp    eax,0x1
   1396e:	jne    138e0 <g_str_equal@plt+0xb528>
   13974:	mov    DWORD PTR [rbp+0x8],0x1
   1397b:	jmp    138fb <g_str_equal@plt+0xb543>
   13980:	mov    DWORD PTR [rbp+0x8],0x0
   13987:	jmp    138fb <g_str_equal@plt+0xb543>
   1398c:	nop    DWORD PTR [rax+0x0]
   13990:	mov    DWORD PTR [rbp+0x8],0x2
   13997:	jmp    138fb <g_str_equal@plt+0xb543>
   1399c:	nop    DWORD PTR [rax+0x0]
   139a0:	pop    rbx
   139a1:	pop    rbp
   139a2:	pop    r12
   139a4:	pop    r13
   139a6:	pop    r14
   139a8:	ret    
   139a9:	nop    DWORD PTR [rax+0x0]
   139b0:	xor    eax,eax
   139b2:	ret    
   139b3:	nop    DWORD PTR [rax]
   139b6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   139c0:	sub    rsp,0x8
   139c4:	mov    rdi,QWORD PTR [rdi+0x8]
   139c8:	mov    r8,rdx
   139cb:	lea    rdx,[rip+0x184b8]        # 2be8a <_fini@@Base+0x2c06>
   139d2:	mov    rcx,rsi
   139d5:	xor    eax,eax
   139d7:	mov    esi,0x1
   139dc:	call   79e0 <__fprintf_chk@plt>
   139e1:	xor    eax,eax
   139e3:	add    rsp,0x8
   139e7:	ret    
   139e8:	nop    DWORD PTR [rax+rax*1+0x0]
   139f0:	push   rbp
   139f1:	push   rbx
   139f2:	mov    rbx,rdi
   139f5:	mov    rdi,rsi
   139f8:	mov    rbp,rsi
   139fb:	sub    rsp,0x8
   139ff:	call   102b0 <g_str_equal@plt+0x7ef8>
   13a04:	test   rax,rax
   13a07:	je     13a58 <g_str_equal@plt+0xb6a0>
   13a09:	mov    rdx,QWORD PTR [rbx]
   13a0c:	mov    rdi,QWORD PTR [rbx+0x8]
   13a10:	mov    r8,rax
   13a13:	mov    esi,0x1
   13a18:	xor    eax,eax
   13a1a:	mov    rcx,QWORD PTR [rdx]
   13a1d:	lea    rdx,[rip+0x18473]        # 2be97 <_fini@@Base+0x2c13>
   13a24:	call   79e0 <__fprintf_chk@plt>
   13a29:	lea    rsi,[rip+0xffffffffffffff90]        # 139c0 <g_str_equal@plt+0xb608>
   13a30:	mov    rdx,rbx
   13a33:	mov    rdi,rbp
   13a36:	xor    ecx,ecx
   13a38:	call   fdc0 <g_str_equal@plt+0x7a08>
   13a3d:	mov    rsi,QWORD PTR [rbx+0x8]
   13a41:	mov    edi,0xa
   13a46:	call   7cb0 <fputc@plt>
   13a4b:	add    rsp,0x8
   13a4f:	xor    eax,eax
   13a51:	pop    rbx
   13a52:	pop    rbp
   13a53:	ret    
   13a54:	nop    DWORD PTR [rax+0x0]
   13a58:	mov    rax,QWORD PTR [rbx]
   13a5b:	mov    rdi,QWORD PTR [rbx+0x8]
   13a5f:	lea    rdx,[rip+0x1843c]        # 2bea2 <_fini@@Base+0x2c1e>
   13a66:	mov    esi,0x1
   13a6b:	mov    rcx,QWORD PTR [rax]
   13a6e:	xor    eax,eax
   13a70:	call   79e0 <__fprintf_chk@plt>
   13a75:	jmp    13a29 <g_str_equal@plt+0xb671>
   13a77:	nop    WORD PTR [rax+rax*1+0x0]
   13a80:	sub    rsp,0x28
   13a84:	mov    rsi,rdi
   13a87:	lea    rdi,[rip+0x22e452]        # 241ee0 <stdout@@GLIBC_2.2.5+0x2238>
   13a8e:	lea    rdx,[rsp+0x10]
   13a93:	mov    QWORD PTR [rsp+0x10],0x0
   13a9c:	mov    rax,QWORD PTR fs:0x28
   13aa5:	mov    QWORD PTR [rsp+0x18],rax
   13aaa:	xor    eax,eax
   13aac:	call   13830 <g_str_equal@plt+0xb478>
   13ab1:	mov    rdi,QWORD PTR [rsp+0x10]
   13ab6:	test   rdi,rdi
   13ab9:	je     13aca <g_str_equal@plt+0xb712>
   13abb:	mov    QWORD PTR [rsp+0x8],rax
   13ac0:	call   d8a0 <g_str_equal@plt+0x54e8>
   13ac5:	mov    rax,QWORD PTR [rsp+0x8]
   13aca:	mov    rcx,QWORD PTR [rsp+0x18]
   13acf:	xor    rcx,QWORD PTR fs:0x28
   13ad8:	jne    13adf <g_str_equal@plt+0xb727>
   13ada:	add    rsp,0x28
   13ade:	ret    
   13adf:	call   8050 <__stack_chk_fail@plt>
   13ae4:	xchg   ax,ax
   13ae6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   13af0:	push   rbx
   13af1:	call   13a80 <g_str_equal@plt+0xb6c8>
   13af6:	test   rax,rax
   13af9:	je     13b24 <g_str_equal@plt+0xb76c>
   13afb:	xor    esi,esi
   13afd:	mov    rdi,rax
   13b00:	mov    rbx,rax
   13b03:	call   fe50 <g_str_equal@plt+0x7a98>
   13b08:	test   rax,rax
   13b0b:	je     13b10 <g_str_equal@plt+0xb758>
   13b0d:	pop    rbx
   13b0e:	ret    
   13b0f:	nop
   13b10:	mov    rdi,rbx
   13b13:	lea    rcx,[rip+0x22d1e6]        # 240d00 <stdout@@GLIBC_2.2.5+0x1058>
   13b1a:	xor    edx,edx
   13b1c:	pop    rbx
   13b1d:	xor    esi,esi
   13b1f:	jmp    fea0 <g_str_equal@plt+0x7ae8>
   13b24:	lea    rcx,[rip+0x18a15]        # 2c540 <_fini@@Base+0x32bc>
   13b2b:	lea    rsi,[rip+0x1861e]        # 2c150 <_fini@@Base+0x2ecc>
   13b32:	lea    rdi,[rip+0x1aedd]        # 2ea16 <_fini@@Base+0x5792>
   13b39:	mov    edx,0x31
   13b3e:	call   7a70 <__assert_fail@plt>
   13b43:	nop    DWORD PTR [rax]
   13b46:	nop    WORD PTR cs:[rax+rax*1+0x0]
   13b50:	push   r15
   13b52:	push   r14
   13b54:	push   r13
   13b56:	push   r12
   13b58:	push   rbp
   13b59:	push   rbx
   13b5a:	sub    rsp,0x38
   13b5e:	mov    rax,QWORD PTR [rip+0x22e37b]        # 241ee0 <stdout@@GLIBC_2.2.5+0x2238>
   13b65:	mov    QWORD PTR [rsp+0x20],rsi
   13b6a:	mov    QWORD PTR [rsp+0x28],rdx
   13b6f:	mov    BYTE PTR [rsp+0x1f],dil
   13b74:	test   rax,rax
   13b77:	je     13d6c <g_str_equal@plt+0xb9b4>
   13b7d:	lea    r14,[rip+0x22e35c]        # 241ee0 <stdout@@GLIBC_2.2.5+0x2238>
   13b84:	mov    QWORD PTR [rsp+0x10],0x0
   13b8d:	jmp    13bd5 <g_str_equal@plt+0xb81d>
   13b8f:	nop
   13b90:	lea    rdi,[rip+0x22ad51]        # 23e8e8 <g_test_config_vars+0x11c8>
   13b97:	call   138c0 <g_str_equal@plt+0xb508>
   13b9c:	mov    rcx,QWORD PTR [rsp+0x8]
   13ba1:	mov    QWORD PTR [rcx+0x8],rax
   13ba5:	mov    edi,0x10
   13baa:	call   80c0 <g_malloc0@plt>
   13baf:	mov    rdx,QWORD PTR [rsp+0x10]
   13bb4:	mov    rsi,QWORD PTR [rsp+0x8]
   13bb9:	mov    QWORD PTR [rsp+0x10],rax
   13bbe:	mov    QWORD PTR [rax+0x8],rsi
   13bc2:	mov    QWORD PTR [rax],rdx
   13bc5:	add    r14,0x8
   13bc9:	mov    rax,QWORD PTR [r14]
   13bcc:	test   rax,rax
   13bcf:	je     13d50 <g_str_equal@plt+0xb998>
   13bd5:	cmp    BYTE PTR [rsp+0x1f],0x0
   13bda:	je     13bed <g_str_equal@plt+0xb835>
   13bdc:	mov    rsi,QWORD PTR [rax]
   13bdf:	mov    rdi,QWORD PTR [rsp+0x20]
   13be4:	call   8060 <strcmp@plt>
   13be9:	test   eax,eax
   13beb:	jne    13bc5 <g_str_equal@plt+0xb80d>
   13bed:	mov    edi,0x10
   13bf2:	call   80c0 <g_malloc0@plt>
   13bf7:	mov    rbx,rax
   13bfa:	mov    QWORD PTR [rsp+0x8],rax
   13bff:	mov    rax,QWORD PTR [r14]
   13c02:	mov    rdi,QWORD PTR [rax]
   13c05:	call   7a50 <g_strdup@plt>
   13c0a:	mov    r8,QWORD PTR [r14]
   13c0d:	mov    QWORD PTR [rbx],rax
   13c10:	lea    rsi,[rip+0x18291]        # 2bea8 <_fini@@Base+0x2c24>
   13c17:	mov    ecx,0x6
   13c1c:	mov    rdx,QWORD PTR [r8]
   13c1f:	mov    rdi,rdx
   13c22:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   13c24:	seta   al
   13c27:	sbb    al,0x0
   13c29:	test   al,al
   13c2b:	je     13c68 <g_str_equal@plt+0xb8b0>
   13c2d:	lea    rsi,[rip+0x18399]        # 2bfcd <_fini@@Base+0x2d49>
   13c34:	mov    ecx,0x8
   13c39:	mov    rdi,rdx
   13c3c:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   13c3e:	seta   al
   13c41:	sbb    al,0x0
   13c43:	test   al,al
   13c45:	je     13b90 <g_str_equal@plt+0xb7d8>
   13c4b:	lea    rdi,[r8+0x28]
   13c4f:	call   138c0 <g_str_equal@plt+0xb508>
   13c54:	mov    rcx,QWORD PTR [rsp+0x8]
   13c59:	mov    QWORD PTR [rcx+0x8],rax
   13c5d:	jmp    13ba5 <g_str_equal@plt+0xb7ed>
   13c62:	nop    WORD PTR [rax+rax*1+0x0]
   13c68:	mov    rdi,QWORD PTR [rip+0x22e231]        # 241ea0 <stdout@@GLIBC_2.2.5+0x21f8>
   13c6f:	test   rdi,rdi
   13c72:	je     13d45 <g_str_equal@plt+0xb98d>
   13c78:	lea    rbx,[rip+0x22e221]        # 241ea0 <stdout@@GLIBC_2.2.5+0x21f8>
   13c7f:	xor    r12d,r12d
   13c82:	add    rdi,0x28
   13c86:	test   r12,r12
   13c89:	je     13d38 <g_str_equal@plt+0xb980>
   13c8f:	call   138c0 <g_str_equal@plt+0xb508>
   13c94:	mov    rcx,r12
   13c97:	jmp    13ca3 <g_str_equal@plt+0xb8eb>
   13c99:	nop    DWORD PTR [rax+0x0]
   13ca0:	mov    rcx,rdx
   13ca3:	mov    rdx,QWORD PTR [rcx]
   13ca6:	test   rdx,rdx
   13ca9:	jne    13ca0 <g_str_equal@plt+0xb8e8>
   13cab:	mov    QWORD PTR [rcx],rax
   13cae:	add    rbx,0x8
   13cb2:	mov    rdi,QWORD PTR [rbx]
   13cb5:	test   rdi,rdi
   13cb8:	jne    13c82 <g_str_equal@plt+0xb8ca>
   13cba:	mov    rbx,QWORD PTR [r12]
   13cbe:	mov    r13,r12
   13cc1:	test   rbx,rbx
   13cc4:	je     13d27 <g_str_equal@plt+0xb96f>
   13cc6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   13cd0:	cmp    r12,rbx
   13cd3:	je     13d1a <g_str_equal@plt+0xb962>
   13cd5:	mov    rax,QWORD PTR [rbx+0x8]
   13cd9:	mov    rbp,r12
   13cdc:	mov    r15,QWORD PTR [rax]
   13cdf:	jmp    13cf1 <g_str_equal@plt+0xb939>
   13ce1:	nop    DWORD PTR [rax+0x0]
   13ce8:	mov    rbp,QWORD PTR [rbp+0x0]
   13cec:	cmp    rbp,rbx
   13cef:	je     13d1a <g_str_equal@plt+0xb962>
   13cf1:	mov    rax,QWORD PTR [rbp+0x8]
   13cf5:	mov    rsi,r15
   13cf8:	mov    rdi,QWORD PTR [rax]
   13cfb:	call   8060 <strcmp@plt>
   13d00:	test   eax,eax
   13d02:	jne    13ce8 <g_str_equal@plt+0xb930>
   13d04:	mov    rax,QWORD PTR [rbx]
   13d07:	mov    rdi,rbx
   13d0a:	mov    QWORD PTR [r13+0x0],rax
   13d0e:	mov    QWORD PTR [rbx],0x0
   13d15:	call   157b0 <g_str_equal@plt+0xd3f8>
   13d1a:	mov    r13,QWORD PTR [r13+0x0]
   13d1e:	mov    rbx,QWORD PTR [r13+0x0]
   13d22:	test   rbx,rbx
   13d25:	jne    13cd0 <g_str_equal@plt+0xb918>
   13d27:	mov    rax,QWORD PTR [rsp+0x8]
   13d2c:	mov    QWORD PTR [rax+0x8],r12
   13d30:	jmp    13ba5 <g_str_equal@plt+0xb7ed>
   13d35:	nop    DWORD PTR [rax]
   13d38:	call   138c0 <g_str_equal@plt+0xb508>
   13d3d:	mov    r12,rax
   13d40:	jmp    13cae <g_str_equal@plt+0xb8f6>
   13d45:	mov    rax,QWORD PTR ds:0x0
   13d4d:	ud2    
   13d4f:	nop
   13d50:	cmp    QWORD PTR [rsp+0x10],0x0
   13d56:	je     13d6c <g_str_equal@plt+0xb9b4>
   13d58:	mov    rax,QWORD PTR [rsp+0x10]
   13d5d:	add    rsp,0x38
   13d61:	pop    rbx
   13d62:	pop    rbp
   13d63:	pop    r12
   13d65:	pop    r13
   13d67:	pop    r14
   13d69:	pop    r15
   13d6b:	ret    
   13d6c:	mov    r9,QWORD PTR [rsp+0x20]
   13d71:	mov    rdi,QWORD PTR [rsp+0x28]
   13d76:	lea    r8,[rip+0x18131]        # 2beae <_fini@@Base+0x2c2a>
   13d7d:	lea    rcx,[rip+0x1879c]        # 2c520 <_fini@@Base+0x329c>
   13d84:	lea    rsi,[rip+0x183c5]        # 2c150 <_fini@@Base+0x2ecc>
   13d8b:	mov    edx,0x112
   13d90:	xor    eax,eax
   13d92:	call   db00 <g_str_equal@plt+0x5748>
   13d97:	mov    QWORD PTR [rsp+0x10],0x0
   13da0:	jmp    13d58 <g_str_equal@plt+0xb9a0>
   13da2:	nop    DWORD PTR [rax+0x0]
   13da6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   13db0:	mov    rdx,rsi
   13db3:	mov    rsi,rdi
   13db6:	lea    rdi,[rip+0x22e123]        # 241ee0 <stdout@@GLIBC_2.2.5+0x2238>
   13dbd:	jmp    13830 <g_str_equal@plt+0xb478>
   13dc2:	nop    DWORD PTR [rax+0x0]
   13dc6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   13dd0:	lea    rdx,[rip+0x22e0c9]        # 241ea0 <stdout@@GLIBC_2.2.5+0x21f8>
   13dd7:	xor    eax,eax
   13dd9:	cmp    QWORD PTR [rdx+rax*8],0x0
   13dde:	movsxd rcx,eax
   13de1:	je     13e18 <g_str_equal@plt+0xba60>
   13de3:	add    rax,0x1
   13de7:	cmp    rax,0x4
   13deb:	jne    13dd9 <g_str_equal@plt+0xba21>
   13ded:	sub    rsp,0x8
   13df1:	mov    rcx,QWORD PTR [rip+0x22bea8]        # 23fca0 <stderr@@GLIBC_2.2.5>
   13df8:	lea    rdi,[rip+0x18391]        # 2c190 <_fini@@Base+0x2f0c>
   13dff:	mov    edx,0x27
   13e04:	mov    esi,0x1
   13e09:	call   8240 <fwrite@plt>
   13e0e:	call   79c0 <abort@plt>
   13e13:	nop    DWORD PTR [rax+rax*1+0x0]
   13e18:	mov    QWORD PTR [rdx+rcx*8],rdi
   13e1c:	ret    
   13e1d:	nop    DWORD PTR [rax]
   13e20:	xor    eax,eax
   13e22:	lea    rcx,[rip+0x22e0b7]        # 241ee0 <stdout@@GLIBC_2.2.5+0x2238>
   13e29:	jmp    13e3a <g_str_equal@plt+0xba82>
   13e2b:	nop    DWORD PTR [rax+rax*1+0x0]
   13e30:	add    rax,0x1
   13e34:	cmp    rax,0x2f
   13e38:	je     13e50 <g_str_equal@plt+0xba98>
   13e3a:	cmp    QWORD PTR [rcx+rax*8],0x0
   13e3f:	movsxd rdx,eax
   13e42:	jne    13e30 <g_str_equal@plt+0xba78>
   13e44:	mov    QWORD PTR [rcx+rdx*8],rdi
   13e48:	ret    
   13e49:	nop    DWORD PTR [rax+0x0]
   13e50:	sub    rsp,0x8
   13e54:	mov    rcx,QWORD PTR [rip+0x22be45]        # 23fca0 <stderr@@GLIBC_2.2.5>
   13e5b:	lea    rdi,[rip+0x18356]        # 2c1b8 <_fini@@Base+0x2f34>
   13e62:	mov    edx,0x24
   13e67:	mov    esi,0x1
   13e6c:	call   8240 <fwrite@plt>
   13e71:	call   79c0 <abort@plt>
   13e76:	nop    WORD PTR cs:[rax+rax*1+0x0]
   13e80:	push   r13
   13e82:	push   r12
   13e84:	lea    rsi,[rip+0x1803b]        # 2bec6 <_fini@@Base+0x2c42>
   13e8b:	push   rbp
   13e8c:	push   rbx
   13e8d:	mov    rbx,rdi
   13e90:	sub    rsp,0xe8
   13e97:	lea    r13,[rsp+0x90]
   13e9f:	lea    r12,[rsp+0x50]
   13ea4:	lea    rbp,[rsp+0x10]
   13ea9:	mov    rax,QWORD PTR fs:0x28
   13eb2:	mov    QWORD PTR [rsp+0xd8],rax
   13eba:	xor    eax,eax
   13ebc:	lea    r9,[rsp+0x4]
   13ec1:	mov    r8,r13
   13ec4:	mov    rcx,r12
   13ec7:	mov    rdx,rbp
   13eca:	mov    QWORD PTR [rsp+0x8],0x0
   13ed3:	call   7e20 <sscanf@plt>
   13ed8:	cmp    eax,0x2
   13edb:	jle    13f58 <g_str_equal@plt+0xbba0>
   13edd:	movsxd rax,DWORD PTR [rsp+0x4]
   13ee2:	cmp    BYTE PTR [rbx+rax*1],0x3d
   13ee6:	jne    13f58 <g_str_equal@plt+0xbba0>
   13ee8:	mov    rdi,rbp
   13eeb:	call   13a80 <g_str_equal@plt+0xb6c8>
   13ef0:	test   rax,rax
   13ef3:	mov    rbp,rax
   13ef6:	je     13f80 <g_str_equal@plt+0xbbc8>
   13efc:	mov    rsi,r12
   13eff:	mov    rdi,rax
   13f02:	call   fe50 <g_str_equal@plt+0x7a98>
   13f07:	test   rax,rax
   13f0a:	je     13f87 <g_str_equal@plt+0xbbcf>
   13f0c:	movsxd rdx,DWORD PTR [rsp+0x4]
   13f11:	lea    rcx,[rsp+0x8]
   13f16:	mov    rdi,rax
   13f19:	mov    rsi,r13
   13f1c:	lea    rdx,[rbx+rdx*1+0x1]
   13f21:	call   fbc0 <g_str_equal@plt+0x7808>
   13f26:	mov    rdi,QWORD PTR [rsp+0x8]
   13f2b:	xor    eax,eax
   13f2d:	test   rdi,rdi
   13f30:	jne    13f70 <g_str_equal@plt+0xbbb8>
   13f32:	mov    rsi,QWORD PTR [rsp+0xd8]
   13f3a:	xor    rsi,QWORD PTR fs:0x28
   13f43:	jne    13fa1 <g_str_equal@plt+0xbbe9>
   13f45:	add    rsp,0xe8
   13f4c:	pop    rbx
   13f4d:	pop    rbp
   13f4e:	pop    r12
   13f50:	pop    r13
   13f52:	ret    
   13f53:	nop    DWORD PTR [rax+rax*1+0x0]
   13f58:	lea    rdi,[rip+0x17f81]        # 2bee0 <_fini@@Base+0x2c5c>
   13f5f:	xor    eax,eax
   13f61:	mov    rsi,rbx
   13f64:	call   e520 <g_str_equal@plt+0x6168>
   13f69:	mov    eax,0xffffffff
   13f6e:	jmp    13f32 <g_str_equal@plt+0xbb7a>
   13f70:	call   d8a0 <g_str_equal@plt+0x54e8>
   13f75:	mov    eax,0xffffffff
   13f7a:	jmp    13f32 <g_str_equal@plt+0xbb7a>
   13f7c:	nop    DWORD PTR [rax+0x0]
   13f80:	mov    eax,0xffffffff
   13f85:	jmp    13f32 <g_str_equal@plt+0xbb7a>
   13f87:	mov    rsi,QWORD PTR [rbp+0x0]
   13f8b:	lea    rdi,[rip+0x17f60]        # 2bef2 <_fini@@Base+0x2c6e>
   13f92:	mov    rdx,r12
   13f95:	call   e520 <g_str_equal@plt+0x6168>
   13f9a:	mov    eax,0xffffffff
   13f9f:	jmp    13f32 <g_str_equal@plt+0xbb7a>
   13fa1:	call   8050 <__stack_chk_fail@plt>
   13fa6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   13fb0:	push   r13
   13fb2:	push   r12
   13fb4:	mov    rcx,rdi
   13fb7:	push   rbp
   13fb8:	push   rbx
   13fb9:	mov    edx,0x14
   13fbe:	mov    esi,0x1
   13fc3:	sub    rsp,0x28
   13fc7:	mov    QWORD PTR [rsp+0x8],rdi
   13fcc:	lea    rdi,[rip+0x17f3b]        # 2bf0e <_fini@@Base+0x2c8a>
   13fd3:	mov    QWORD PTR [rsp],0x0
   13fdb:	mov    rax,QWORD PTR fs:0x28
   13fe4:	mov    QWORD PTR [rsp+0x18],rax
   13fe9:	xor    eax,eax
   13feb:	call   8240 <fwrite@plt>
   13ff0:	mov    rdi,QWORD PTR [rip+0x22dee9]        # 241ee0 <stdout@@GLIBC_2.2.5+0x2238>
   13ff7:	test   rdi,rdi
   13ffa:	je     14030 <g_str_equal@plt+0xbc78>
   13ffc:	lea    r12,[rip+0x22dedd]        # 241ee0 <stdout@@GLIBC_2.2.5+0x2238>
   14003:	lea    rbp,[rip+0xfffffffffffff9e6]        # 139f0 <g_str_equal@plt+0xb638>
   1400a:	xor    ebx,ebx
   1400c:	mov    r13,rsp
   1400f:	nop
   14010:	xor    ecx,ecx
   14012:	add    ebx,0x1
   14015:	mov    rdx,r13
   14018:	mov    rsi,rbp
   1401b:	mov    QWORD PTR [rsp],rdi
   1401f:	call   10910 <g_str_equal@plt+0x8558>
   14024:	movsxd rax,ebx
   14027:	mov    rdi,QWORD PTR [r12+rax*8]
   1402b:	test   rdi,rdi
   1402e:	jne    14010 <g_str_equal@plt+0xbc58>
   14030:	mov    rax,QWORD PTR [rsp+0x18]
   14035:	xor    rax,QWORD PTR fs:0x28
   1403e:	jne    1404b <g_str_equal@plt+0xbc93>
   14040:	add    rsp,0x28
   14044:	pop    rbx
   14045:	pop    rbp
   14046:	pop    r12
   14048:	pop    r13
   1404a:	ret    
   1404b:	call   8050 <__stack_chk_fail@plt>
   14050:	push   r15
   14052:	push   r14
   14054:	mov    r14,rdx
   14057:	push   r13
   14059:	push   r12
   1405b:	mov    r13,rdi
   1405e:	push   rbp
   1405f:	push   rbx
   14060:	xor    r15d,r15d
   14063:	xor    ebx,ebx
   14065:	sub    rsp,0x938
   1406c:	mov    rax,QWORD PTR fs:0x28
   14075:	mov    QWORD PTR [rsp+0x928],rax
   1407d:	xor    eax,eax
   1407f:	lea    rax,[rsp+0x40]
   14084:	mov    QWORD PTR [rsp+0x20],rsi
   14089:	mov    QWORD PTR [rsp+0x38],0x0
   14092:	lea    rbp,[rsp+0x120]
   1409a:	lea    r12,[rsp+0x60]
   1409f:	mov    rdi,rax
   140a2:	mov    QWORD PTR [rsp+0x28],rax
   140a7:	call   e350 <g_str_equal@plt+0x5f98>
   140ac:	lea    rax,[rsp+0xa0]
   140b4:	mov    DWORD PTR [rsp+0x1c],0x0
   140bc:	mov    QWORD PTR [rsp],rax
   140c0:	lea    rax,[rsp+0x520]
   140c8:	mov    QWORD PTR [rsp+0x10],rax
   140cd:	lea    rax,[rsp+0xe0]
   140d5:	mov    QWORD PTR [rsp+0x8],rax
   140da:	nop    WORD PTR [rax+rax*1+0x0]
   140e0:	mov    rdx,r13
   140e3:	mov    esi,0x400
   140e8:	mov    rdi,rbp
   140eb:	call   7c10 <fgets@plt>
   140f0:	test   rax,rax
   140f3:	je     142a8 <g_str_equal@plt+0xbef0>
   140f9:	add    ebx,0x1
   140fc:	mov    rdi,r14
   140ff:	mov    esi,ebx
   14101:	call   e460 <g_str_equal@plt+0x60a8>
   14106:	movzx  eax,BYTE PTR [rsp+0x120]
   1410e:	cmp    al,0x23
   14110:	je     140e0 <g_str_equal@plt+0xbd28>
   14112:	cmp    al,0xa
   14114:	je     140e0 <g_str_equal@plt+0xbd28>
   14116:	mov    rcx,QWORD PTR [rsp]
   1411a:	lea    rsi,[rip+0x17e02]        # 2bf23 <_fini@@Base+0x2c9f>
   14121:	xor    eax,eax
   14123:	mov    rdx,r12
   14126:	mov    rdi,rbp
   14129:	call   7e20 <sscanf@plt>
   1412e:	cmp    eax,0x2
   14131:	je     141e0 <g_str_equal@plt+0xbe28>
   14137:	lea    rsi,[rip+0x17df6]        # 2bf34 <_fini@@Base+0x2cb0>
   1413e:	xor    eax,eax
   14140:	mov    rdx,r12
   14143:	mov    rdi,rbp
   14146:	call   7e20 <sscanf@plt>
   1414b:	cmp    eax,0x1
   1414e:	je     14220 <g_str_equal@plt+0xbe68>
   14154:	mov    rcx,QWORD PTR [rsp+0x10]
   14159:	mov    rdx,QWORD PTR [rsp+0x8]
   1415e:	lea    rsi,[rip+0x17dd9]        # 2bf3e <_fini@@Base+0x2cba>
   14165:	xor    eax,eax
   14167:	mov    rdi,rbp
   1416a:	mov    BYTE PTR [rsp+0x520],0x0
   14172:	call   7e20 <sscanf@plt>
   14177:	cmp    eax,0x2
   1417a:	je     1419b <g_str_equal@plt+0xbde3>
   1417c:	mov    rdx,QWORD PTR [rsp+0x8]
   14181:	lea    rsi,[rip+0x17dca]        # 2bf52 <_fini@@Base+0x2cce>
   14188:	xor    eax,eax
   1418a:	mov    rdi,rbp
   1418d:	call   7e20 <sscanf@plt>
   14192:	cmp    eax,0x1
   14195:	jne    142e8 <g_str_equal@plt+0xbf30>
   1419b:	test   r15,r15
   1419e:	je     142d0 <g_str_equal@plt+0xbf18>
   141a4:	mov    rdx,QWORD PTR [rsp+0x10]
   141a9:	mov    rsi,QWORD PTR [rsp+0x8]
   141ae:	lea    rcx,[rsp+0x38]
   141b3:	mov    rdi,r15
   141b6:	call   fbc0 <g_str_equal@plt+0x7808>
   141bb:	mov    rdi,QWORD PTR [rsp+0x38]
   141c0:	test   rdi,rdi
   141c3:	je     140e0 <g_str_equal@plt+0xbd28>
   141c9:	call   d8a0 <g_str_equal@plt+0x54e8>
   141ce:	mov    DWORD PTR [rsp+0x1c],0xffffffea
   141d6:	jmp    14270 <g_str_equal@plt+0xbeb8>
   141db:	nop    DWORD PTR [rax+rax*1+0x0]
   141e0:	mov    rdi,QWORD PTR [rsp+0x20]
   141e5:	lea    rdx,[rsp+0x38]
   141ea:	mov    rsi,r12
   141ed:	call   13830 <g_str_equal@plt+0xb478>
   141f2:	mov    rdx,QWORD PTR [rsp+0x38]
   141f7:	test   rdx,rdx
   141fa:	jne    14260 <g_str_equal@plt+0xbea8>
   141fc:	mov    rsi,QWORD PTR [rsp]
   14200:	xor    ecx,ecx
   14202:	mov    edx,0x1
   14207:	mov    rdi,rax
   1420a:	call   fea0 <g_str_equal@plt+0x7ae8>
   1420f:	add    DWORD PTR [rsp+0x1c],0x1
   14214:	mov    r15,rax
   14217:	jmp    140e0 <g_str_equal@plt+0xbd28>
   1421c:	nop    DWORD PTR [rax+0x0]
   14220:	mov    rdi,QWORD PTR [rsp+0x20]
   14225:	lea    rdx,[rsp+0x38]
   1422a:	mov    rsi,r12
   1422d:	call   13830 <g_str_equal@plt+0xb478>
   14232:	mov    rdx,QWORD PTR [rsp+0x38]
   14237:	test   rdx,rdx
   1423a:	jne    14260 <g_str_equal@plt+0xbea8>
   1423c:	lea    rcx,[rip+0x22cabd]        # 240d00 <stdout@@GLIBC_2.2.5+0x1058>
   14243:	xor    edx,edx
   14245:	xor    esi,esi
   14247:	mov    rdi,rax
   1424a:	call   fea0 <g_str_equal@plt+0x7ae8>
   1424f:	add    DWORD PTR [rsp+0x1c],0x1
   14254:	mov    r15,rax
   14257:	jmp    140e0 <g_str_equal@plt+0xbd28>
   1425c:	nop    DWORD PTR [rax+0x0]
   14260:	mov    rdi,rdx
   14263:	call   d8a0 <g_str_equal@plt+0x54e8>
   14268:	mov    DWORD PTR [rsp+0x1c],0xffffffea
   14270:	mov    rdi,QWORD PTR [rsp+0x28]
   14275:	call   e370 <g_str_equal@plt+0x5fb8>
   1427a:	mov    rcx,QWORD PTR [rsp+0x928]
   14282:	xor    rcx,QWORD PTR fs:0x28
   1428b:	mov    eax,DWORD PTR [rsp+0x1c]
   1428f:	jne    14303 <g_str_equal@plt+0xbf4b>
   14291:	add    rsp,0x938
   14298:	pop    rbx
   14299:	pop    rbp
   1429a:	pop    r12
   1429c:	pop    r13
   1429e:	pop    r14
   142a0:	pop    r15
   142a2:	ret    
   142a3:	nop    DWORD PTR [rax+rax*1+0x0]
   142a8:	mov    rdi,r13
   142ab:	call   7cf0 <ferror@plt>
   142b0:	test   eax,eax
   142b2:	je     14270 <g_str_equal@plt+0xbeb8>
   142b4:	lea    rdi,[rip+0x17cb3]        # 2bf6e <_fini@@Base+0x2cea>
   142bb:	xor    eax,eax
   142bd:	call   e520 <g_str_equal@plt+0x6168>
   142c2:	mov    DWORD PTR [rsp+0x1c],0xffffffea
   142ca:	jmp    14270 <g_str_equal@plt+0xbeb8>
   142cc:	nop    DWORD PTR [rax+0x0]
   142d0:	lea    rdi,[rip+0x17c86]        # 2bf5d <_fini@@Base+0x2cd9>
   142d7:	xor    eax,eax
   142d9:	call   e520 <g_str_equal@plt+0x6168>
   142de:	mov    DWORD PTR [rsp+0x1c],0xffffffea
   142e6:	jmp    14270 <g_str_equal@plt+0xbeb8>
   142e8:	lea    rdi,[rip+0x1a154]        # 2e443 <_fini@@Base+0x51bf>
   142ef:	xor    eax,eax
   142f1:	call   e520 <g_str_equal@plt+0x6168>
   142f6:	mov    DWORD PTR [rsp+0x1c],0xffffffea
   142fe:	jmp    14270 <g_str_equal@plt+0xbeb8>
   14303:	call   8050 <__stack_chk_fail@plt>
   14308:	nop    DWORD PTR [rax+rax*1+0x0]
   14310:	push   rbp
   14311:	push   rbx
   14312:	lea    rsi,[rip+0x1a598]        # 2e8b1 <_fini@@Base+0x562d>
   14319:	mov    rbp,rdi
   1431c:	sub    rsp,0x8
   14320:	call   8210 <fopen64@plt>
   14325:	test   rax,rax
   14328:	je     14358 <g_str_equal@plt+0xbfa0>
   1432a:	lea    rsi,[rip+0x22dbaf]        # 241ee0 <stdout@@GLIBC_2.2.5+0x2238>
   14331:	mov    rbx,rax
   14334:	mov    rdx,rbp
   14337:	mov    rdi,rax
   1433a:	call   14050 <g_str_equal@plt+0xbc98>
   1433f:	mov    rdi,rbx
   14342:	mov    ebp,eax
   14344:	call   8110 <fclose@plt>
   14349:	add    rsp,0x8
   1434d:	mov    eax,ebp
   1434f:	pop    rbx
   14350:	pop    rbp
   14351:	ret    
   14352:	nop    WORD PTR [rax+rax*1+0x0]
   14358:	call   7fd0 <__errno_location@plt>
   1435d:	mov    ebp,DWORD PTR [rax]
   1435f:	add    rsp,0x8
   14363:	pop    rbx
   14364:	neg    ebp
   14366:	mov    eax,ebp
   14368:	pop    rbp
   14369:	ret    
   1436a:	nop    WORD PTR [rax+rax*1+0x0]
   14370:	push   r15
   14372:	push   r14
   14374:	push   r13
   14376:	push   r12
   14378:	push   rbp
   14379:	push   rbx
   1437a:	sub    rsp,0x78
   1437e:	mov    r15,QWORD PTR [rsi]
   14381:	mov    rax,QWORD PTR fs:0x28
   1438a:	mov    QWORD PTR [rsp+0x68],rax
   1438f:	xor    eax,eax
   14391:	mov    QWORD PTR [rsp+0x10],rdx
   14396:	mov    QWORD PTR [rsp+0x48],0x0
   1439f:	test   r15,r15
   143a2:	je     144da <g_str_equal@plt+0xc122>
   143a8:	lea    rax,[rsp+0x60]
   143ad:	mov    r13,rdi
   143b0:	mov    rbp,rsi
   143b3:	xor    ebx,ebx
   143b5:	lea    r14,[rsp+0x50]
   143ba:	mov    QWORD PTR [rsp],rax
   143be:	lea    rax,[rsp+0x58]
   143c3:	mov    QWORD PTR [rsp+0x20],rax
   143c8:	lea    rax,[rsp+0x48]
   143cd:	mov    QWORD PTR [rsp+0x8],rax
   143d2:	jmp    1444c <g_str_equal@plt+0xc094>
   143d4:	nop    DWORD PTR [rax+0x0]
   143d8:	mov    rdi,QWORD PTR [rsp+0x50]
   143dd:	test   rdi,rdi
   143e0:	je     14401 <g_str_equal@plt+0xc049>
   143e2:	mov    rax,QWORD PTR [rdi+0x8]
   143e6:	test   rax,rax
   143e9:	je     147e1 <g_str_equal@plt+0xc429>
   143ef:	sub    rax,0x1
   143f3:	test   rax,rax
   143f6:	mov    QWORD PTR [rdi+0x8],rax
   143fa:	jne    14401 <g_str_equal@plt+0xc049>
   143fc:	call   12960 <g_str_equal@plt+0xa5a8>
   14401:	mov    rdi,QWORD PTR [rsp+0x58]
   14406:	test   rdi,rdi
   14409:	je     1442a <g_str_equal@plt+0xc072>
   1440b:	mov    rax,QWORD PTR [rdi+0x8]
   1440f:	test   rax,rax
   14412:	je     147e1 <g_str_equal@plt+0xc429>
   14418:	sub    rax,0x1
   1441c:	test   rax,rax
   1441f:	mov    QWORD PTR [rdi+0x8],rax
   14423:	jne    1442a <g_str_equal@plt+0xc072>
   14425:	call   12960 <g_str_equal@plt+0xa5a8>
   1442a:	mov    rsi,QWORD PTR [rsp+0x48]
   1442f:	test   rsi,rsi
   14432:	jne    144d0 <g_str_equal@plt+0xc118>
   14438:	add    ebx,0x1
   1443b:	movsxd rax,ebx
   1443e:	mov    r15,QWORD PTR [rbp+rax*8+0x0]
   14443:	test   r15,r15
   14446:	je     144da <g_str_equal@plt+0xc122>
   1444c:	mov    QWORD PTR [rsp+0x58],0x0
   14455:	mov    QWORD PTR [rsp+0x60],0x0
   1445e:	lea    rdi,[rip+0x17b1c]        # 2bf81 <_fini@@Base+0x2cfd>
   14465:	mov    rsi,QWORD PTR [r15]
   14468:	xor    eax,eax
   1446a:	call   7ce0 <g_strdup_printf@plt>
   1446f:	mov    rsi,r14
   14472:	mov    r12,rax
   14475:	mov    rdx,rax
   14478:	mov    rdi,r13
   1447b:	call   229e0 <g_str_equal@plt+0x1a628>
   14480:	mov    rdi,r12
   14483:	call   7880 <g_free@plt>
   14488:	mov    rdi,QWORD PTR [rsp+0x50]
   1448d:	call   12260 <g_str_equal@plt+0x9ea8>
   14492:	test   rax,rax
   14495:	mov    r12,rax
   14498:	je     143d8 <g_str_equal@plt+0xc020>
   1449e:	mov    rcx,QWORD PTR [rsp]
   144a2:	xor    esi,esi
   144a4:	xor    edx,edx
   144a6:	mov    rdi,r15
   144a9:	call   fea0 <g_str_equal@plt+0x7ae8>
   144ae:	mov    rsi,QWORD PTR [rsp+0x60]
   144b3:	test   rsi,rsi
   144b6:	je     14500 <g_str_equal@plt+0xc148>
   144b8:	mov    rdi,QWORD PTR [rsp+0x8]
   144bd:	call   df30 <g_str_equal@plt+0x5b78>
   144c2:	jmp    143d8 <g_str_equal@plt+0xc020>
   144c7:	nop    WORD PTR [rax+rax*1+0x0]
   144d0:	mov    rdi,QWORD PTR [rsp+0x10]
   144d5:	call   df30 <g_str_equal@plt+0x5b78>
   144da:	mov    rax,QWORD PTR [rsp+0x68]
   144df:	xor    rax,QWORD PTR fs:0x28
   144e8:	jne    147e6 <g_str_equal@plt+0xc42e>
   144ee:	add    rsp,0x78
   144f2:	pop    rbx
   144f3:	pop    rbp
   144f4:	pop    r12
   144f6:	pop    r13
   144f8:	pop    r14
   144fa:	pop    r15
   144fc:	ret    
   144fd:	nop    DWORD PTR [rax]
   14500:	mov    rsi,QWORD PTR [rsp+0x50]
   14505:	mov    rdx,QWORD PTR [rsp]
   14509:	mov    rdi,rax
   1450c:	mov    QWORD PTR [rsp+0x18],rax
   14511:	call   10620 <g_str_equal@plt+0x8268>
   14516:	mov    rsi,QWORD PTR [rsp+0x60]
   1451b:	mov    rcx,QWORD PTR [rsp+0x18]
   14520:	test   rsi,rsi
   14523:	jne    144b8 <g_str_equal@plt+0xc100>
   14525:	mov    rdi,QWORD PTR [rsp+0x50]
   1452a:	mov    QWORD PTR [rsp+0x18],rcx
   1452f:	call   12260 <g_str_equal@plt+0x9ea8>
   14534:	cmp    r12,rax
   14537:	mov    rcx,QWORD PTR [rsp+0x18]
   1453c:	jbe    14590 <g_str_equal@plt+0xc1d8>
   1453e:	test   rax,rax
   14541:	je     14590 <g_str_equal@plt+0xc1d8>
   14543:	mov    rdi,QWORD PTR [rsp+0x50]
   14548:	mov    r12,QWORD PTR [r15]
   1454b:	call   12510 <g_str_equal@plt+0xa158>
   14550:	sub    rsp,0x8
   14554:	lea    r8,[rip+0x17a2a]        # 2bf85 <_fini@@Base+0x2d01>
   1455b:	lea    rcx,[rip+0x17f9e]        # 2c500 <_fini@@Base+0x327c>
   14562:	push   r12
   14564:	mov    r9,QWORD PTR [rax]
   14567:	mov    edx,0x200
   1456c:	mov    rdi,QWORD PTR [rsp+0x18]
   14571:	lea    rsi,[rip+0x17bd8]        # 2c150 <_fini@@Base+0x2ecc>
   14578:	xor    eax,eax
   1457a:	call   db00 <g_str_equal@plt+0x5748>
   1457f:	pop    rcx
   14580:	pop    rsi
   14581:	jmp    143d8 <g_str_equal@plt+0xc020>
   14586:	nop    WORD PTR cs:[rax+rax*1+0x0]
   14590:	test   rax,rax
   14593:	je     143d8 <g_str_equal@plt+0xc020>
   14599:	mov    rdi,rcx
   1459c:	call   102d0 <g_str_equal@plt+0x7f18>
   145a1:	mov    rsi,QWORD PTR [rsp+0x20]
   145a6:	mov    rdi,QWORD PTR [rsp+0x50]
   145ab:	call   22aa0 <g_str_equal@plt+0x1a6e8>
   145b0:	mov    rdi,QWORD PTR [rsp+0x50]
   145b5:	call   12260 <g_str_equal@plt+0x9ea8>
   145ba:	test   rax,rax
   145bd:	jne    146f2 <g_str_equal@plt+0xc33a>
   145c3:	mov    rax,QWORD PTR [rsp+0x58]
   145c8:	mov    rax,QWORD PTR [rax+0x10]
   145cc:	test   rax,rax
   145cf:	mov    rcx,rax
   145d2:	je     143d8 <g_str_equal@plt+0xc020>
   145d8:	mov    r12,QWORD PTR [rax]
   145db:	test   r12,r12
   145de:	je     14720 <g_str_equal@plt+0xc368>
   145e4:	mov    eax,DWORD PTR [r12]
   145e8:	lea    edx,[rax-0x1]
   145eb:	cmp    edx,0x5
   145ee:	ja     147eb <g_str_equal@plt+0xc433>
   145f4:	xor    edx,edx
   145f6:	cmp    eax,0x4
   145f9:	jne    14720 <g_str_equal@plt+0xc368>
   145ff:	mov    DWORD PTR [rsp+0x18],ebx
   14603:	mov    QWORD PTR [rsp+0x28],r13
   14608:	mov    rbx,rcx
   1460b:	mov    QWORD PTR [rsp+0x30],rbp
   14610:	mov    QWORD PTR [rsp+0x38],r14
   14615:	nop    DWORD PTR [rax]
   14618:	mov    rsi,QWORD PTR [r15]
   1461b:	lea    rdi,[rip+0x1799c]        # 2bfbe <_fini@@Base+0x2d3a>
   14622:	xor    eax,eax
   14624:	lea    r13d,[rdx+0x1]
   14628:	call   7ce0 <g_strdup_printf@plt>
   1462d:	mov    rcx,QWORD PTR [rsp]
   14631:	mov    rsi,rax
   14634:	mov    r14,rax
   14637:	mov    edx,0x1
   1463c:	mov    rdi,r15
   1463f:	call   fea0 <g_str_equal@plt+0x7ae8>
   14644:	mov    rdi,r14
   14647:	mov    rbp,rax
   1464a:	call   7880 <g_free@plt>
   1464f:	mov    rsi,QWORD PTR [rsp+0x60]
   14654:	test   rsi,rsi
   14657:	jne    147b1 <g_str_equal@plt+0xc3f9>
   1465d:	mov    rdx,QWORD PTR [rsp]
   14661:	mov    rsi,r12
   14664:	mov    rdi,rbp
   14667:	call   10620 <g_str_equal@plt+0x8268>
   1466c:	mov    rsi,QWORD PTR [rsp+0x60]
   14671:	test   rsi,rsi
   14674:	jne    14784 <g_str_equal@plt+0xc3cc>
   1467a:	mov    rdi,r12
   1467d:	call   12260 <g_str_equal@plt+0x9ea8>
   14682:	test   rax,rax
   14685:	jne    14724 <g_str_equal@plt+0xc36c>
   1468b:	mov    rbx,QWORD PTR [rbx+0x8]
   1468f:	test   rbx,rbx
   14692:	je     147c9 <g_str_equal@plt+0xc411>
   14698:	mov    r12,QWORD PTR [rbx]
   1469b:	test   r12,r12
   1469e:	je     146bc <g_str_equal@plt+0xc304>
   146a0:	mov    eax,DWORD PTR [r12]
   146a4:	lea    edx,[rax-0x1]
   146a7:	cmp    edx,0x5
   146aa:	ja     147eb <g_str_equal@plt+0xc433>
   146b0:	cmp    eax,0x4
   146b3:	mov    edx,r13d
   146b6:	je     14618 <g_str_equal@plt+0xc260>
   146bc:	mov    eax,r13d
   146bf:	mov    ebx,DWORD PTR [rsp+0x18]
   146c3:	mov    r13,QWORD PTR [rsp+0x28]
   146c8:	mov    rbp,QWORD PTR [rsp+0x30]
   146cd:	mov    r14,QWORD PTR [rsp+0x38]
   146d2:	sub    rsp,0x8
   146d6:	lea    r8,[rip+0x17b03]        # 2c1e0 <_fini@@Base+0x2f5c>
   146dd:	lea    rcx,[rip+0x17e1c]        # 2c500 <_fini@@Base+0x327c>
   146e4:	push   rax
   146e5:	mov    edx,0x219
   146ea:	mov    r9,QWORD PTR [r15]
   146ed:	jmp    1456c <g_str_equal@plt+0xc1b4>
   146f2:	mov    rdi,QWORD PTR [rsp+0x50]
   146f7:	mov    r12,QWORD PTR [r15]
   146fa:	call   12510 <g_str_equal@plt+0xa158>
   146ff:	sub    rsp,0x8
   14703:	lea    r8,[rip+0x17898]        # 2bfa2 <_fini@@Base+0x2d1e>
   1470a:	lea    rcx,[rip+0x17def]        # 2c500 <_fini@@Base+0x327c>
   14711:	push   r12
   14713:	mov    edx,0x20f
   14718:	mov    r9,QWORD PTR [rax]
   1471b:	jmp    1456c <g_str_equal@plt+0xc1b4>
   14720:	xor    eax,eax
   14722:	jmp    146d2 <g_str_equal@plt+0xc31a>
   14724:	mov    rdi,r12
   14727:	mov    ebx,DWORD PTR [rsp+0x18]
   1472b:	mov    r13,QWORD PTR [rsp+0x28]
   14730:	mov    QWORD PTR [rsp+0x18],rbp
   14735:	mov    r14,QWORD PTR [rsp+0x38]
   1473a:	mov    rbp,QWORD PTR [rsp+0x30]
   1473f:	call   12510 <g_str_equal@plt+0xa158>
   14744:	sub    rsp,0x8
   14748:	push   QWORD PTR [rax]
   1474a:	mov    r9,QWORD PTR [r15]
   1474d:	mov    rdi,QWORD PTR [rsp+0x18]
   14752:	lea    r8,[rip+0x17abf]        # 2c218 <_fini@@Base+0x2f94>
   14759:	lea    rcx,[rip+0x17da0]        # 2c500 <_fini@@Base+0x327c>
   14760:	lea    rsi,[rip+0x179e9]        # 2c150 <_fini@@Base+0x2ecc>
   14767:	mov    edx,0x22e
   1476c:	xor    eax,eax
   1476e:	call   db00 <g_str_equal@plt+0x5748>
   14773:	mov    rdi,QWORD PTR [rsp+0x28]
   14778:	call   102d0 <g_str_equal@plt+0x7f18>
   1477d:	pop    rax
   1477e:	pop    rdx
   1477f:	jmp    143d8 <g_str_equal@plt+0xc020>
   14784:	mov    rdi,QWORD PTR [rsp+0x8]
   14789:	mov    r15,rbp
   1478c:	mov    ebx,DWORD PTR [rsp+0x18]
   14790:	mov    r13,QWORD PTR [rsp+0x28]
   14795:	mov    rbp,QWORD PTR [rsp+0x30]
   1479a:	mov    r14,QWORD PTR [rsp+0x38]
   1479f:	call   df30 <g_str_equal@plt+0x5b78>
   147a4:	mov    rdi,r15
   147a7:	call   102d0 <g_str_equal@plt+0x7f18>
   147ac:	jmp    143d8 <g_str_equal@plt+0xc020>
   147b1:	mov    ebx,DWORD PTR [rsp+0x18]
   147b5:	mov    r13,QWORD PTR [rsp+0x28]
   147ba:	mov    rbp,QWORD PTR [rsp+0x30]
   147bf:	mov    r14,QWORD PTR [rsp+0x38]
   147c4:	jmp    144b8 <g_str_equal@plt+0xc100>
   147c9:	mov    ebx,DWORD PTR [rsp+0x18]
   147cd:	mov    r13,QWORD PTR [rsp+0x28]
   147d2:	mov    rbp,QWORD PTR [rsp+0x30]
   147d7:	mov    r14,QWORD PTR [rsp+0x38]
   147dc:	jmp    143d8 <g_str_equal@plt+0xc020>
   147e1:	call   84cf <g_str_equal@plt+0x117>
   147e6:	call   8050 <__stack_chk_fail@plt>
   147eb:	lea    rcx,[rip+0x17cf6]        # 2c4e8 <_fini@@Base+0x3264>
   147f2:	lea    rsi,[rip+0x1609f]        # 2a898 <_fini@@Base+0x1614>
   147f9:	lea    rdi,[rip+0x160e0]        # 2a8e0 <_fini@@Base+0x165c>
   14800:	mov    edx,0x7f
   14805:	call   7a70 <__assert_fail@plt>
   1480a:	nop    WORD PTR [rax+rax*1+0x0]
   14810:	lea    rdi,[rip+0x22a389]        # 23eba0 <g_test_config_vars+0x1480>
   14817:	jmp    12ab0 <g_str_equal@plt+0xa6f8>
   1481c:	nop    DWORD PTR [rax+0x0]
   14820:	sub    rsp,0x8
   14824:	test   rdi,rdi
   14827:	je     14895 <g_str_equal@plt+0xc4dd>
   14829:	cmp    BYTE PTR [rdi+0x10],0x0
   1482d:	je     14876 <g_str_equal@plt+0xc4be>
   1482f:	mov    rdx,QWORD PTR [rdi+0x18]
   14833:	cmp    WORD PTR [rdx],0x0
   14837:	setne  al
   1483a:	cmp    al,sil
   1483d:	je     14858 <g_str_equal@plt+0xc4a0>
   1483f:	test   sil,sil
   14842:	mov    eax,DWORD PTR [rip+0x22d5b0]        # 241df8 <stdout@@GLIBC_2.2.5+0x2150>
   14848:	jne    14860 <g_str_equal@plt+0xc4a8>
   1484a:	sub    eax,0x1
   1484d:	mov    DWORD PTR [rip+0x22d5a5],eax        # 241df8 <stdout@@GLIBC_2.2.5+0x2150>
   14853:	xor    eax,eax
   14855:	mov    WORD PTR [rdx],ax
   14858:	add    rsp,0x8
   1485c:	ret    
   1485d:	nop    DWORD PTR [rax]
   14860:	add    eax,0x1
   14863:	mov    ecx,0x1
   14868:	mov    DWORD PTR [rip+0x22d58a],eax        # 241df8 <stdout@@GLIBC_2.2.5+0x2150>
   1486e:	mov    WORD PTR [rdx],cx
   14871:	add    rsp,0x8
   14875:	ret    
   14876:	lea    rcx,[rip+0x183b3]        # 2cc30 <_fini@@Base+0x39ac>
   1487d:	lea    rsi,[rip+0x18314]        # 2cb98 <_fini@@Base+0x3914>
   14884:	lea    rdi,[rip+0x1834d]        # 2cbd8 <_fini@@Base+0x3954>
   1488b:	mov    edx,0x16
   14890:	call   7a70 <__assert_fail@plt>
   14895:	lea    rcx,[rip+0x18374]        # 2cc10 <_fini@@Base+0x398c>
   1489c:	lea    rsi,[rip+0x1736d]        # 2bc10 <_fini@@Base+0x298c>
   148a3:	lea    rdi,[rip+0x1834f]        # 2cbf9 <_fini@@Base+0x3975>
   148aa:	mov    edx,0x31
   148af:	call   7a70 <__assert_fail@plt>
   148b4:	xchg   ax,ax
   148b6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   148c0:	movzx  esi,sil
   148c4:	jmp    14820 <g_str_equal@plt+0xc468>
   148c9:	nop    DWORD PTR [rax+0x0]
   148d0:	sub    rsp,0x8
   148d4:	call   79c0 <abort@plt>
   148d9:	nop    DWORD PTR [rax+0x0]
   148e0:	sub    rsp,0x8
   148e4:	call   79c0 <abort@plt>
   148e9:	nop    DWORD PTR [rax+0x0]
   148f0:	push   rbx
   148f1:	sub    rsp,0x10
   148f5:	test   rdi,rdi
   148f8:	mov    QWORD PTR [rsp+0x8],rdi
   148fd:	je     14920 <g_str_equal@plt+0xc568>
   148ff:	call   21d80 <g_str_equal@plt+0x199c8>
   14904:	lea    rdx,[rsp+0x8]
   14909:	mov    rbx,rax
   1490c:	mov    rdi,rax
   1490f:	xor    ecx,ecx
   14911:	xor    esi,esi
   14913:	call   15e30 <g_str_equal@plt+0xda78>
   14918:	mov    rdi,rbx
   1491b:	call   20040 <g_str_equal@plt+0x17c88>
   14920:	add    rsp,0x10
   14924:	pop    rbx
   14925:	ret    
   14926:	nop    WORD PTR cs:[rax+rax*1+0x0]
   14930:	push   rbx
   14931:	sub    rsp,0x10
   14935:	test   rdi,rdi
   14938:	mov    QWORD PTR [rsp+0x8],rdi
   1493d:	je     14960 <g_str_equal@plt+0xc5a8>
   1493f:	call   21d80 <g_str_equal@plt+0x199c8>
   14944:	lea    rdx,[rsp+0x8]
   14949:	mov    rbx,rax
   1494c:	mov    rdi,rax
   1494f:	xor    ecx,ecx
   14951:	xor    esi,esi
   14953:	call   16110 <g_str_equal@plt+0xdd58>
   14958:	mov    rdi,rbx
   1495b:	call   20040 <g_str_equal@plt+0x17c88>
   14960:	add    rsp,0x10
   14964:	pop    rbx
   14965:	ret    
   14966:	nop    WORD PTR cs:[rax+rax*1+0x0]
   14970:	push   rbx
   14971:	sub    rsp,0x10
   14975:	test   rdi,rdi
   14978:	mov    QWORD PTR [rsp+0x8],rdi
   1497d:	je     149a0 <g_str_equal@plt+0xc5e8>
   1497f:	call   21d80 <g_str_equal@plt+0x199c8>
   14984:	lea    rdx,[rsp+0x8]
   14989:	mov    rbx,rax
   1498c:	mov    rdi,rax
   1498f:	xor    ecx,ecx
   14991:	xor    esi,esi
   14993:	call   16290 <g_str_equal@plt+0xded8>
   14998:	mov    rdi,rbx
   1499b:	call   20040 <g_str_equal@plt+0x17c88>
   149a0:	add    rsp,0x10
   149a4:	pop    rbx
   149a5:	ret    
   149a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   149b0:	push   rbx
   149b1:	sub    rsp,0x10
   149b5:	test   rdi,rdi
   149b8:	mov    QWORD PTR [rsp+0x8],rdi
   149bd:	je     149e0 <g_str_equal@plt+0xc628>
   149bf:	call   21d80 <g_str_equal@plt+0x199c8>
   149c4:	lea    rdx,[rsp+0x8]
   149c9:	mov    rbx,rax
   149cc:	mov    rdi,rax
   149cf:	xor    ecx,ecx
   149d1:	xor    esi,esi
   149d3:	call   163d0 <g_str_equal@plt+0xe018>
   149d8:	mov    rdi,rbx
   149db:	call   20040 <g_str_equal@plt+0x17c88>
   149e0:	add    rsp,0x10
   149e4:	pop    rbx
   149e5:	ret    
   149e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   149f0:	push   rbx
   149f1:	sub    rsp,0x10
   149f5:	test   rdi,rdi
   149f8:	mov    QWORD PTR [rsp+0x8],rdi
   149fd:	je     14a20 <g_str_equal@plt+0xc668>
   149ff:	call   21d80 <g_str_equal@plt+0x199c8>
   14a04:	lea    rdx,[rsp+0x8]
   14a09:	mov    rbx,rax
   14a0c:	mov    rdi,rax
   14a0f:	xor    ecx,ecx
   14a11:	xor    esi,esi
   14a13:	call   164b0 <g_str_equal@plt+0xe0f8>
   14a18:	mov    rdi,rbx
   14a1b:	call   20040 <g_str_equal@plt+0x17c88>
   14a20:	add    rsp,0x10
   14a24:	pop    rbx
   14a25:	ret    
   14a26:	nop    WORD PTR cs:[rax+rax*1+0x0]
   14a30:	push   rbx
   14a31:	sub    rsp,0x10
   14a35:	test   rdi,rdi
   14a38:	mov    QWORD PTR [rsp+0x8],rdi
   14a3d:	je     14a60 <g_str_equal@plt+0xc6a8>
   14a3f:	call   21d80 <g_str_equal@plt+0x199c8>
   14a44:	lea    rdx,[rsp+0x8]
   14a49:	mov    rbx,rax
   14a4c:	mov    rdi,rax
   14a4f:	xor    ecx,ecx
   14a51:	xor    esi,esi
   14a53:	call   167a0 <g_str_equal@plt+0xe3e8>
   14a58:	mov    rdi,rbx
   14a5b:	call   20040 <g_str_equal@plt+0x17c88>
   14a60:	add    rsp,0x10
   14a64:	pop    rbx
   14a65:	ret    
   14a66:	nop    WORD PTR cs:[rax+rax*1+0x0]
   14a70:	push   rbx
   14a71:	sub    rsp,0x10
   14a75:	test   rdi,rdi
   14a78:	mov    QWORD PTR [rsp+0x8],rdi
   14a7d:	je     14aa0 <g_str_equal@plt+0xc6e8>
   14a7f:	call   21d80 <g_str_equal@plt+0x199c8>
   14a84:	lea    rdx,[rsp+0x8]
   14a89:	mov    rbx,rax
   14a8c:	mov    rdi,rax
   14a8f:	xor    ecx,ecx
   14a91:	xor    esi,esi
   14a93:	call   16920 <g_str_equal@plt+0xe568>
   14a98:	mov    rdi,rbx
   14a9b:	call   20040 <g_str_equal@plt+0x17c88>
   14aa0:	add    rsp,0x10
   14aa4:	pop    rbx
   14aa5:	ret    
   14aa6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   14ab0:	push   rbx
   14ab1:	sub    rsp,0x10
   14ab5:	test   rdi,rdi
   14ab8:	mov    QWORD PTR [rsp+0x8],rdi
   14abd:	je     14ae0 <g_str_equal@plt+0xc728>
   14abf:	call   21d80 <g_str_equal@plt+0x199c8>
   14ac4:	lea    rdx,[rsp+0x8]
   14ac9:	mov    rbx,rax
   14acc:	mov    rdi,rax
   14acf:	xor    ecx,ecx
   14ad1:	xor    esi,esi
   14ad3:	call   16a60 <g_str_equal@plt+0xe6a8>
   14ad8:	mov    rdi,rbx
   14adb:	call   20040 <g_str_equal@plt+0x17c88>
   14ae0:	add    rsp,0x10
   14ae4:	pop    rbx
   14ae5:	ret    
   14ae6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   14af0:	push   rbx
   14af1:	sub    rsp,0x10
   14af5:	test   rdi,rdi
   14af8:	mov    QWORD PTR [rsp+0x8],rdi
   14afd:	je     14b20 <g_str_equal@plt+0xc768>
   14aff:	call   21d80 <g_str_equal@plt+0x199c8>
   14b04:	lea    rdx,[rsp+0x8]
   14b09:	mov    rbx,rax
   14b0c:	mov    rdi,rax
   14b0f:	xor    ecx,ecx
   14b11:	xor    esi,esi
   14b13:	call   16ba0 <g_str_equal@plt+0xe7e8>
   14b18:	mov    rdi,rbx
   14b1b:	call   20040 <g_str_equal@plt+0x17c88>
   14b20:	add    rsp,0x10
   14b24:	pop    rbx
   14b25:	ret    
   14b26:	nop    WORD PTR cs:[rax+rax*1+0x0]
   14b30:	push   rbx
   14b31:	sub    rsp,0x10
   14b35:	test   rdi,rdi
   14b38:	mov    QWORD PTR [rsp+0x8],rdi
   14b3d:	je     14b60 <g_str_equal@plt+0xc7a8>
   14b3f:	call   21d80 <g_str_equal@plt+0x199c8>
   14b44:	lea    rdx,[rsp+0x8]
   14b49:	mov    rbx,rax
   14b4c:	mov    rdi,rax
   14b4f:	xor    ecx,ecx
   14b51:	xor    esi,esi
   14b53:	call   16c80 <g_str_equal@plt+0xe8c8>
   14b58:	mov    rdi,rbx
   14b5b:	call   20040 <g_str_equal@plt+0x17c88>
   14b60:	add    rsp,0x10
   14b64:	pop    rbx
   14b65:	ret    
   14b66:	nop    WORD PTR cs:[rax+rax*1+0x0]
   14b70:	push   rbx
   14b71:	sub    rsp,0x10
   14b75:	test   rdi,rdi
   14b78:	mov    QWORD PTR [rsp+0x8],rdi
   14b7d:	je     14ba0 <g_str_equal@plt+0xc7e8>
   14b7f:	call   21d80 <g_str_equal@plt+0x199c8>
   14b84:	lea    rdx,[rsp+0x8]
   14b89:	mov    rbx,rax
   14b8c:	mov    rdi,rax
   14b8f:	xor    ecx,ecx
   14b91:	xor    esi,esi
   14b93:	call   1ecb0 <g_str_equal@plt+0x168f8>
   14b98:	mov    rdi,rbx
   14b9b:	call   20040 <g_str_equal@plt+0x17c88>
   14ba0:	add    rsp,0x10
   14ba4:	pop    rbx
   14ba5:	ret    
   14ba6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   14bb0:	push   rbx
   14bb1:	sub    rsp,0x10
   14bb5:	test   rdi,rdi
   14bb8:	mov    QWORD PTR [rsp+0x8],rdi
   14bbd:	je     14be0 <g_str_equal@plt+0xc828>
   14bbf:	call   21d80 <g_str_equal@plt+0x199c8>
   14bc4:	lea    rdx,[rsp+0x8]
   14bc9:	mov    rbx,rax
   14bcc:	mov    rdi,rax
   14bcf:	xor    ecx,ecx
   14bd1:	xor    esi,esi
   14bd3:	call   16e50 <g_str_equal@plt+0xea98>
   14bd8:	mov    rdi,rbx
   14bdb:	call   20040 <g_str_equal@plt+0x17c88>
   14be0:	add    rsp,0x10
   14be4:	pop    rbx
   14be5:	ret    
   14be6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   14bf0:	push   rbx
   14bf1:	sub    rsp,0x10
   14bf5:	test   rdi,rdi
   14bf8:	mov    QWORD PTR [rsp+0x8],rdi
   14bfd:	je     14c20 <g_str_equal@plt+0xc868>
   14bff:	call   21d80 <g_str_equal@plt+0x199c8>
   14c04:	lea    rdx,[rsp+0x8]
   14c09:	mov    rbx,rax
   14c0c:	mov    rdi,rax
   14c0f:	xor    ecx,ecx
   14c11:	xor    esi,esi
   14c13:	call   16fd0 <g_str_equal@plt+0xec18>
   14c18:	mov    rdi,rbx
   14c1b:	call   20040 <g_str_equal@plt+0x17c88>
   14c20:	add    rsp,0x10
   14c24:	pop    rbx
   14c25:	ret    
   14c26:	nop    WORD PTR cs:[rax+rax*1+0x0]
   14c30:	push   rbx
   14c31:	sub    rsp,0x10
   14c35:	test   rdi,rdi
   14c38:	mov    QWORD PTR [rsp+0x8],rdi
   14c3d:	je     14c60 <g_str_equal@plt+0xc8a8>
   14c3f:	call   21d80 <g_str_equal@plt+0x199c8>
   14c44:	lea    rdx,[rsp+0x8]
   14c49:	mov    rbx,rax
   14c4c:	mov    rdi,rax
   14c4f:	xor    ecx,ecx
   14c51:	xor    esi,esi
   14c53:	call   17110 <g_str_equal@plt+0xed58>
   14c58:	mov    rdi,rbx
   14c5b:	call   20040 <g_str_equal@plt+0x17c88>
   14c60:	add    rsp,0x10
   14c64:	pop    rbx
   14c65:	ret    
   14c66:	nop    WORD PTR cs:[rax+rax*1+0x0]
   14c70:	push   rbx
   14c71:	sub    rsp,0x10
   14c75:	test   rdi,rdi
   14c78:	mov    QWORD PTR [rsp+0x8],rdi
   14c7d:	je     14ca0 <g_str_equal@plt+0xc8e8>
   14c7f:	call   21d80 <g_str_equal@plt+0x199c8>
   14c84:	lea    rdx,[rsp+0x8]
   14c89:	mov    rbx,rax
   14c8c:	mov    rdi,rax
   14c8f:	xor    ecx,ecx
   14c91:	xor    esi,esi
   14c93:	call   17250 <g_str_equal@plt+0xee98>
   14c98:	mov    rdi,rbx
   14c9b:	call   20040 <g_str_equal@plt+0x17c88>
   14ca0:	add    rsp,0x10
   14ca4:	pop    rbx
   14ca5:	ret    
   14ca6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   14cb0:	push   rbx
   14cb1:	sub    rsp,0x10
   14cb5:	test   rdi,rdi
   14cb8:	mov    QWORD PTR [rsp+0x8],rdi
   14cbd:	je     14ce0 <g_str_equal@plt+0xc928>
   14cbf:	call   21d80 <g_str_equal@plt+0x199c8>
   14cc4:	lea    rdx,[rsp+0x8]
   14cc9:	mov    rbx,rax
   14ccc:	mov    rdi,rax
   14ccf:	xor    ecx,ecx
   14cd1:	xor    esi,esi
   14cd3:	call   17390 <g_str_equal@plt+0xefd8>
   14cd8:	mov    rdi,rbx
   14cdb:	call   20040 <g_str_equal@plt+0x17c88>
   14ce0:	add    rsp,0x10
   14ce4:	pop    rbx
   14ce5:	ret    
   14ce6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   14cf0:	push   rbx
   14cf1:	sub    rsp,0x10
   14cf5:	test   rdi,rdi
   14cf8:	mov    QWORD PTR [rsp+0x8],rdi
   14cfd:	je     14d20 <g_str_equal@plt+0xc968>
   14cff:	call   21d80 <g_str_equal@plt+0x199c8>
   14d04:	lea    rdx,[rsp+0x8]
   14d09:	mov    rbx,rax
   14d0c:	mov    rdi,rax
   14d0f:	xor    ecx,ecx
   14d11:	xor    esi,esi
   14d13:	call   174d0 <g_str_equal@plt+0xf118>
   14d18:	mov    rdi,rbx
   14d1b:	call   20040 <g_str_equal@plt+0x17c88>
   14d20:	add    rsp,0x10
   14d24:	pop    rbx
   14d25:	ret    
   14d26:	nop    WORD PTR cs:[rax+rax*1+0x0]
   14d30:	push   rbx
   14d31:	sub    rsp,0x10
   14d35:	test   rdi,rdi
   14d38:	mov    QWORD PTR [rsp+0x8],rdi
   14d3d:	je     14d60 <g_str_equal@plt+0xc9a8>
   14d3f:	call   21d80 <g_str_equal@plt+0x199c8>
   14d44:	lea    rdx,[rsp+0x8]
   14d49:	mov    rbx,rax
   14d4c:	mov    rdi,rax
   14d4f:	xor    ecx,ecx
   14d51:	xor    esi,esi
   14d53:	call   17690 <g_str_equal@plt+0xf2d8>
   14d58:	mov    rdi,rbx
   14d5b:	call   20040 <g_str_equal@plt+0x17c88>
   14d60:	add    rsp,0x10
   14d64:	pop    rbx
   14d65:	ret    
   14d66:	nop    WORD PTR cs:[rax+rax*1+0x0]
   14d70:	push   rbx
   14d71:	sub    rsp,0x10
   14d75:	test   rdi,rdi
   14d78:	mov    QWORD PTR [rsp+0x8],rdi
   14d7d:	je     14da0 <g_str_equal@plt+0xc9e8>
   14d7f:	call   21d80 <g_str_equal@plt+0x199c8>
   14d84:	lea    rdx,[rsp+0x8]
   14d89:	mov    rbx,rax
   14d8c:	mov    rdi,rax
   14d8f:	xor    ecx,ecx
   14d91:	xor    esi,esi
   14d93:	call   1ed90 <g_str_equal@plt+0x169d8>
   14d98:	mov    rdi,rbx
   14d9b:	call   20040 <g_str_equal@plt+0x17c88>
   14da0:	add    rsp,0x10
   14da4:	pop    rbx
   14da5:	ret    
   14da6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   14db0:	push   rbx
   14db1:	sub    rsp,0x10
   14db5:	test   rdi,rdi
   14db8:	mov    QWORD PTR [rsp+0x8],rdi
   14dbd:	je     14de0 <g_str_equal@plt+0xca28>
   14dbf:	call   21d80 <g_str_equal@plt+0x199c8>
   14dc4:	lea    rdx,[rsp+0x8]
   14dc9:	mov    rbx,rax
   14dcc:	mov    rdi,rax
   14dcf:	xor    ecx,ecx
   14dd1:	xor    esi,esi
   14dd3:	call   1f0a0 <g_str_equal@plt+0x16ce8>
   14dd8:	mov    rdi,rbx
   14ddb:	call   20040 <g_str_equal@plt+0x17c88>
   14de0:	add    rsp,0x10
   14de4:	pop    rbx
   14de5:	ret    
   14de6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   14df0:	push   rbx
   14df1:	sub    rsp,0x10
   14df5:	test   rdi,rdi
   14df8:	mov    QWORD PTR [rsp+0x8],rdi
   14dfd:	je     14e20 <g_str_equal@plt+0xca68>
   14dff:	call   21d80 <g_str_equal@plt+0x199c8>
   14e04:	lea    rdx,[rsp+0x8]
   14e09:	mov    rbx,rax
   14e0c:	mov    rdi,rax
   14e0f:	xor    ecx,ecx
   14e11:	xor    esi,esi
   14e13:	call   1f180 <g_str_equal@plt+0x16dc8>
   14e18:	mov    rdi,rbx
   14e1b:	call   20040 <g_str_equal@plt+0x17c88>
   14e20:	add    rsp,0x10
   14e24:	pop    rbx
   14e25:	ret    
   14e26:	nop    WORD PTR cs:[rax+rax*1+0x0]
   14e30:	push   rbx
   14e31:	sub    rsp,0x10
   14e35:	test   rdi,rdi
   14e38:	mov    QWORD PTR [rsp+0x8],rdi
   14e3d:	je     14e60 <g_str_equal@plt+0xcaa8>
   14e3f:	call   21d80 <g_str_equal@plt+0x199c8>
   14e44:	lea    rdx,[rsp+0x8]
   14e49:	mov    rbx,rax
   14e4c:	mov    rdi,rax
   14e4f:	xor    ecx,ecx
   14e51:	xor    esi,esi
   14e53:	call   17870 <g_str_equal@plt+0xf4b8>
   14e58:	mov    rdi,rbx
   14e5b:	call   20040 <g_str_equal@plt+0x17c88>
   14e60:	add    rsp,0x10
   14e64:	pop    rbx
   14e65:	ret    
   14e66:	nop    WORD PTR cs:[rax+rax*1+0x0]
   14e70:	push   rbx
   14e71:	sub    rsp,0x10
   14e75:	test   rdi,rdi
   14e78:	mov    QWORD PTR [rsp+0x8],rdi
   14e7d:	je     14ea0 <g_str_equal@plt+0xcae8>
   14e7f:	call   21d80 <g_str_equal@plt+0x199c8>
   14e84:	lea    rdx,[rsp+0x8]
   14e89:	mov    rbx,rax
   14e8c:	mov    rdi,rax
   14e8f:	xor    ecx,ecx
   14e91:	xor    esi,esi
   14e93:	call   17950 <g_str_equal@plt+0xf598>
   14e98:	mov    rdi,rbx
   14e9b:	call   20040 <g_str_equal@plt+0x17c88>
   14ea0:	add    rsp,0x10
   14ea4:	pop    rbx
   14ea5:	ret    
   14ea6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   14eb0:	push   rbx
   14eb1:	sub    rsp,0x10
   14eb5:	test   rdi,rdi
   14eb8:	mov    QWORD PTR [rsp+0x8],rdi
   14ebd:	je     14ee0 <g_str_equal@plt+0xcb28>
   14ebf:	call   21d80 <g_str_equal@plt+0x199c8>
   14ec4:	lea    rdx,[rsp+0x8]
   14ec9:	mov    rbx,rax
   14ecc:	mov    rdi,rax
   14ecf:	xor    ecx,ecx
   14ed1:	xor    esi,esi
   14ed3:	call   17ac0 <g_str_equal@plt+0xf708>
   14ed8:	mov    rdi,rbx
   14edb:	call   20040 <g_str_equal@plt+0x17c88>
   14ee0:	add    rsp,0x10
   14ee4:	pop    rbx
   14ee5:	ret    
   14ee6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   14ef0:	push   rbx
   14ef1:	sub    rsp,0x10
   14ef5:	test   rdi,rdi
   14ef8:	mov    QWORD PTR [rsp+0x8],rdi
   14efd:	je     14f20 <g_str_equal@plt+0xcb68>
   14eff:	call   21d80 <g_str_equal@plt+0x199c8>
   14f04:	lea    rdx,[rsp+0x8]
   14f09:	mov    rbx,rax
   14f0c:	mov    rdi,rax
   14f0f:	xor    ecx,ecx
   14f11:	xor    esi,esi
   14f13:	call   17ca0 <g_str_equal@plt+0xf8e8>
   14f18:	mov    rdi,rbx
   14f1b:	call   20040 <g_str_equal@plt+0x17c88>
   14f20:	add    rsp,0x10
   14f24:	pop    rbx
   14f25:	ret    
   14f26:	nop    WORD PTR cs:[rax+rax*1+0x0]
   14f30:	push   rbx
   14f31:	sub    rsp,0x10
   14f35:	test   rdi,rdi
   14f38:	mov    QWORD PTR [rsp+0x8],rdi
   14f3d:	je     14f60 <g_str_equal@plt+0xcba8>
   14f3f:	call   21d80 <g_str_equal@plt+0x199c8>
   14f44:	lea    rdx,[rsp+0x8]
   14f49:	mov    rbx,rax
   14f4c:	mov    rdi,rax
   14f4f:	xor    ecx,ecx
   14f51:	xor    esi,esi
   14f53:	call   17ed0 <g_str_equal@plt+0xfb18>
   14f58:	mov    rdi,rbx
   14f5b:	call   20040 <g_str_equal@plt+0x17c88>
   14f60:	add    rsp,0x10
   14f64:	pop    rbx
   14f65:	ret    
   14f66:	nop    WORD PTR cs:[rax+rax*1+0x0]
   14f70:	push   rbx
   14f71:	sub    rsp,0x10
   14f75:	test   rdi,rdi
   14f78:	mov    QWORD PTR [rsp+0x8],rdi
   14f7d:	je     14fa0 <g_str_equal@plt+0xcbe8>
   14f7f:	call   21d80 <g_str_equal@plt+0x199c8>
   14f84:	lea    rdx,[rsp+0x8]
   14f89:	mov    rbx,rax
   14f8c:	mov    rdi,rax
   14f8f:	xor    ecx,ecx
   14f91:	xor    esi,esi
   14f93:	call   180d0 <g_str_equal@plt+0xfd18>
   14f98:	mov    rdi,rbx
   14f9b:	call   20040 <g_str_equal@plt+0x17c88>
   14fa0:	add    rsp,0x10
   14fa4:	pop    rbx
   14fa5:	ret    
   14fa6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   14fb0:	push   rbx
   14fb1:	sub    rsp,0x10
   14fb5:	test   rdi,rdi
   14fb8:	mov    QWORD PTR [rsp+0x8],rdi
   14fbd:	je     14fe0 <g_str_equal@plt+0xcc28>
   14fbf:	call   21d80 <g_str_equal@plt+0x199c8>
   14fc4:	lea    rdx,[rsp+0x8]
   14fc9:	mov    rbx,rax
   14fcc:	mov    rdi,rax
   14fcf:	xor    ecx,ecx
   14fd1:	xor    esi,esi
   14fd3:	call   186b0 <g_str_equal@plt+0x102f8>
   14fd8:	mov    rdi,rbx
   14fdb:	call   20040 <g_str_equal@plt+0x17c88>
   14fe0:	add    rsp,0x10
   14fe4:	pop    rbx
   14fe5:	ret    
   14fe6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   14ff0:	push   rbx
   14ff1:	sub    rsp,0x10
   14ff5:	test   rdi,rdi
   14ff8:	mov    QWORD PTR [rsp+0x8],rdi
   14ffd:	je     15020 <g_str_equal@plt+0xcc68>
   14fff:	call   21d80 <g_str_equal@plt+0x199c8>
   15004:	lea    rdx,[rsp+0x8]
   15009:	mov    rbx,rax
   1500c:	mov    rdi,rax
   1500f:	xor    ecx,ecx
   15011:	xor    esi,esi
   15013:	call   18870 <g_str_equal@plt+0x104b8>
   15018:	mov    rdi,rbx
   1501b:	call   20040 <g_str_equal@plt+0x17c88>
   15020:	add    rsp,0x10
   15024:	pop    rbx
   15025:	ret    
   15026:	nop    WORD PTR cs:[rax+rax*1+0x0]
   15030:	push   rbx
   15031:	sub    rsp,0x10
   15035:	test   rdi,rdi
   15038:	mov    QWORD PTR [rsp+0x8],rdi
   1503d:	je     15060 <g_str_equal@plt+0xcca8>
   1503f:	call   21d80 <g_str_equal@plt+0x199c8>
   15044:	lea    rdx,[rsp+0x8]
   15049:	mov    rbx,rax
   1504c:	mov    rdi,rax
   1504f:	xor    ecx,ecx
   15051:	xor    esi,esi
   15053:	call   18260 <g_str_equal@plt+0xfea8>
   15058:	mov    rdi,rbx
   1505b:	call   20040 <g_str_equal@plt+0x17c88>
   15060:	add    rsp,0x10
   15064:	pop    rbx
   15065:	ret    
   15066:	nop    WORD PTR cs:[rax+rax*1+0x0]
   15070:	push   rbx
   15071:	sub    rsp,0x10
   15075:	test   rdi,rdi
   15078:	mov    QWORD PTR [rsp+0x8],rdi
   1507d:	je     150a0 <g_str_equal@plt+0xcce8>
   1507f:	call   21d80 <g_str_equal@plt+0x199c8>
   15084:	lea    rdx,[rsp+0x8]
   15089:	mov    rbx,rax
   1508c:	mov    rdi,rax
   1508f:	xor    ecx,ecx
   15091:	xor    esi,esi
   15093:	call   183e0 <g_str_equal@plt+0x10028>
   15098:	mov    rdi,rbx
   1509b:	call   20040 <g_str_equal@plt+0x17c88>
   150a0:	add    rsp,0x10
   150a4:	pop    rbx
   150a5:	ret    
   150a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   150b0:	push   rbx
   150b1:	sub    rsp,0x10
   150b5:	test   rdi,rdi
   150b8:	mov    QWORD PTR [rsp+0x8],rdi
   150bd:	je     150e0 <g_str_equal@plt+0xcd28>
   150bf:	call   21d80 <g_str_equal@plt+0x199c8>
   150c4:	lea    rdx,[rsp+0x8]
   150c9:	mov    rbx,rax
   150cc:	mov    rdi,rax
   150cf:	xor    ecx,ecx
   150d1:	xor    esi,esi
   150d3:	call   184c0 <g_str_equal@plt+0x10108>
   150d8:	mov    rdi,rbx
   150db:	call   20040 <g_str_equal@plt+0x17c88>
   150e0:	add    rsp,0x10
   150e4:	pop    rbx
   150e5:	ret    
   150e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   150f0:	push   rbx
   150f1:	sub    rsp,0x10
   150f5:	test   rdi,rdi
   150f8:	mov    QWORD PTR [rsp+0x8],rdi
   150fd:	je     15120 <g_str_equal@plt+0xcd68>
   150ff:	call   21d80 <g_str_equal@plt+0x199c8>
   15104:	lea    rdx,[rsp+0x8]
   15109:	mov    rbx,rax
   1510c:	mov    rdi,rax
   1510f:	xor    ecx,ecx
   15111:	xor    esi,esi
   15113:	call   185d0 <g_str_equal@plt+0x10218>
   15118:	mov    rdi,rbx
   1511b:	call   20040 <g_str_equal@plt+0x17c88>
   15120:	add    rsp,0x10
   15124:	pop    rbx
   15125:	ret    
   15126:	nop    WORD PTR cs:[rax+rax*1+0x0]
   15130:	push   rbx
   15131:	sub    rsp,0x10
   15135:	test   rdi,rdi
   15138:	mov    QWORD PTR [rsp+0x8],rdi
   1513d:	je     15160 <g_str_equal@plt+0xcda8>
   1513f:	call   21d80 <g_str_equal@plt+0x199c8>
   15144:	lea    rdx,[rsp+0x8]
   15149:	mov    rbx,rax
   1514c:	mov    rdi,rax
   1514f:	xor    ecx,ecx
   15151:	xor    esi,esi
   15153:	call   18bb0 <g_str_equal@plt+0x107f8>
   15158:	mov    rdi,rbx
   1515b:	call   20040 <g_str_equal@plt+0x17c88>
   15160:	add    rsp,0x10
   15164:	pop    rbx
   15165:	ret    
   15166:	nop    WORD PTR cs:[rax+rax*1+0x0]
   15170:	push   rbx
   15171:	sub    rsp,0x10
   15175:	test   rdi,rdi
   15178:	mov    QWORD PTR [rsp+0x8],rdi
   1517d:	je     151a0 <g_str_equal@plt+0xcde8>
   1517f:	call   21d80 <g_str_equal@plt+0x199c8>
   15184:	lea    rdx,[rsp+0x8]
   15189:	mov    rbx,rax
   1518c:	mov    rdi,rax
   1518f:	xor    ecx,ecx
   15191:	xor    esi,esi
   15193:	call   18c90 <g_str_equal@plt+0x108d8>
   15198:	mov    rdi,rbx
   1519b:	call   20040 <g_str_equal@plt+0x17c88>
   151a0:	add    rsp,0x10
   151a4:	pop    rbx
   151a5:	ret    
   151a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   151b0:	push   rbx
   151b1:	sub    rsp,0x10
   151b5:	test   rdi,rdi
   151b8:	mov    QWORD PTR [rsp+0x8],rdi
   151bd:	je     151e0 <g_str_equal@plt+0xce28>
   151bf:	call   21d80 <g_str_equal@plt+0x199c8>
   151c4:	lea    rdx,[rsp+0x8]
   151c9:	mov    rbx,rax
   151cc:	mov    rdi,rax
   151cf:	xor    ecx,ecx
   151d1:	xor    esi,esi
   151d3:	call   19180 <g_str_equal@plt+0x10dc8>
   151d8:	mov    rdi,rbx
   151db:	call   20040 <g_str_equal@plt+0x17c88>
   151e0:	add    rsp,0x10
   151e4:	pop    rbx
   151e5:	ret    
   151e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   151f0:	push   rbx
   151f1:	sub    rsp,0x10
   151f5:	test   rdi,rdi
   151f8:	mov    QWORD PTR [rsp+0x8],rdi
   151fd:	je     15220 <g_str_equal@plt+0xce68>
   151ff:	call   21d80 <g_str_equal@plt+0x199c8>
   15204:	lea    rdx,[rsp+0x8]
   15209:	mov    rbx,rax
   1520c:	mov    rdi,rax
   1520f:	xor    ecx,ecx
   15211:	xor    esi,esi
   15213:	call   192c0 <g_str_equal@plt+0x10f08>
   15218:	mov    rdi,rbx
   1521b:	call   20040 <g_str_equal@plt+0x17c88>
   15220:	add    rsp,0x10
   15224:	pop    rbx
   15225:	ret    
   15226:	nop    WORD PTR cs:[rax+rax*1+0x0]
   15230:	push   rbx
   15231:	sub    rsp,0x10
   15235:	test   rdi,rdi
   15238:	mov    QWORD PTR [rsp+0x8],rdi
   1523d:	je     15260 <g_str_equal@plt+0xcea8>
   1523f:	call   21d80 <g_str_equal@plt+0x199c8>
   15244:	lea    rdx,[rsp+0x8]
   15249:	mov    rbx,rax
   1524c:	mov    rdi,rax
   1524f:	xor    ecx,ecx
   15251:	xor    esi,esi
   15253:	call   196e0 <g_str_equal@plt+0x11328>
   15258:	mov    rdi,rbx
   1525b:	call   20040 <g_str_equal@plt+0x17c88>
   15260:	add    rsp,0x10
   15264:	pop    rbx
   15265:	ret    
   15266:	nop    WORD PTR cs:[rax+rax*1+0x0]
   15270:	push   rbx
   15271:	sub    rsp,0x10
   15275:	test   rdi,rdi
   15278:	mov    QWORD PTR [rsp+0x8],rdi
   1527d:	je     152a0 <g_str_equal@plt+0xcee8>
   1527f:	call   21d80 <g_str_equal@plt+0x199c8>
   15284:	lea    rdx,[rsp+0x8]
   15289:	mov    rbx,rax
   1528c:	mov    rdi,rax
   1528f:	xor    ecx,ecx
   15291:	xor    esi,esi
   15293:	call   19890 <g_str_equal@plt+0x114d8>
   15298:	mov    rdi,rbx
   1529b:	call   20040 <g_str_equal@plt+0x17c88>
   152a0:	add    rsp,0x10
   152a4:	pop    rbx
   152a5:	ret    
   152a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   152b0:	push   rbx
   152b1:	sub    rsp,0x10
   152b5:	test   rdi,rdi
   152b8:	mov    QWORD PTR [rsp+0x8],rdi
   152bd:	je     152e0 <g_str_equal@plt+0xcf28>
   152bf:	call   21d80 <g_str_equal@plt+0x199c8>
   152c4:	lea    rdx,[rsp+0x8]
   152c9:	mov    rbx,rax
   152cc:	mov    rdi,rax
   152cf:	xor    ecx,ecx
   152d1:	xor    esi,esi
   152d3:	call   19ff0 <g_str_equal@plt+0x11c38>
   152d8:	mov    rdi,rbx
   152db:	call   20040 <g_str_equal@plt+0x17c88>
   152e0:	add    rsp,0x10
   152e4:	pop    rbx
   152e5:	ret    
   152e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   152f0:	push   rbx
   152f1:	sub    rsp,0x10
   152f5:	test   rdi,rdi
   152f8:	mov    QWORD PTR [rsp+0x8],rdi
   152fd:	je     15320 <g_str_equal@plt+0xcf68>
   152ff:	call   21d80 <g_str_equal@plt+0x199c8>
   15304:	lea    rdx,[rsp+0x8]
   15309:	mov    rbx,rax
   1530c:	mov    rdi,rax
   1530f:	xor    ecx,ecx
   15311:	xor    esi,esi
   15313:	call   1a180 <g_str_equal@plt+0x11dc8>
   15318:	mov    rdi,rbx
   1531b:	call   20040 <g_str_equal@plt+0x17c88>
   15320:	add    rsp,0x10
   15324:	pop    rbx
   15325:	ret    
   15326:	nop    WORD PTR cs:[rax+rax*1+0x0]
   15330:	push   rbx
   15331:	sub    rsp,0x10
   15335:	test   rdi,rdi
   15338:	mov    QWORD PTR [rsp+0x8],rdi
   1533d:	je     15360 <g_str_equal@plt+0xcfa8>
   1533f:	call   21d80 <g_str_equal@plt+0x199c8>
   15344:	lea    rdx,[rsp+0x8]
   15349:	mov    rbx,rax
   1534c:	mov    rdi,rax
   1534f:	xor    ecx,ecx
   15351:	xor    esi,esi
   15353:	call   1a330 <g_str_equal@plt+0x11f78>
   15358:	mov    rdi,rbx
   1535b:	call   20040 <g_str_equal@plt+0x17c88>
   15360:	add    rsp,0x10
   15364:	pop    rbx
   15365:	ret    
   15366:	nop    WORD PTR cs:[rax+rax*1+0x0]
   15370:	push   rbx
   15371:	sub    rsp,0x10
   15375:	test   rdi,rdi
   15378:	mov    QWORD PTR [rsp+0x8],rdi
   1537d:	je     153a0 <g_str_equal@plt+0xcfe8>
   1537f:	call   21d80 <g_str_equal@plt+0x199c8>
   15384:	lea    rdx,[rsp+0x8]
   15389:	mov    rbx,rax
   1538c:	mov    rdi,rax
   1538f:	xor    ecx,ecx
   15391:	xor    esi,esi
   15393:	call   1a790 <g_str_equal@plt+0x123d8>
   15398:	mov    rdi,rbx
   1539b:	call   20040 <g_str_equal@plt+0x17c88>
   153a0:	add    rsp,0x10
   153a4:	pop    rbx
   153a5:	ret    
   153a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   153b0:	push   rbx
   153b1:	sub    rsp,0x10
   153b5:	test   rdi,rdi
   153b8:	mov    QWORD PTR [rsp+0x8],rdi
   153bd:	je     153e0 <g_str_equal@plt+0xd028>
   153bf:	call   21d80 <g_str_equal@plt+0x199c8>
   153c4:	lea    rdx,[rsp+0x8]
   153c9:	mov    rbx,rax
   153cc:	mov    rdi,rax
   153cf:	xor    ecx,ecx
   153d1:	xor    esi,esi
   153d3:	call   1a870 <g_str_equal@plt+0x124b8>
   153d8:	mov    rdi,rbx
   153db:	call   20040 <g_str_equal@plt+0x17c88>
   153e0:	add    rsp,0x10
   153e4:	pop    rbx
   153e5:	ret    
   153e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   153f0:	push   rbx
   153f1:	sub    rsp,0x10
   153f5:	test   rdi,rdi
   153f8:	mov    QWORD PTR [rsp+0x8],rdi
   153fd:	je     15420 <g_str_equal@plt+0xd068>
   153ff:	call   21d80 <g_str_equal@plt+0x199c8>
   15404:	lea    rdx,[rsp+0x8]
   15409:	mov    rbx,rax
   1540c:	mov    rdi,rax
   1540f:	xor    ecx,ecx
   15411:	xor    esi,esi
   15413:	call   1aab0 <g_str_equal@plt+0x126f8>
   15418:	mov    rdi,rbx
   1541b:	call   20040 <g_str_equal@plt+0x17c88>
   15420:	add    rsp,0x10
   15424:	pop    rbx
   15425:	ret    
   15426:	nop    WORD PTR cs:[rax+rax*1+0x0]
   15430:	push   rbx
   15431:	sub    rsp,0x10
   15435:	test   rdi,rdi
   15438:	mov    QWORD PTR [rsp+0x8],rdi
   1543d:	je     15460 <g_str_equal@plt+0xd0a8>
   1543f:	call   21d80 <g_str_equal@plt+0x199c8>
   15444:	lea    rdx,[rsp+0x8]
   15449:	mov    rbx,rax
   1544c:	mov    rdi,rax
   1544f:	xor    ecx,ecx
   15451:	xor    esi,esi
   15453:	call   1ac40 <g_str_equal@plt+0x12888>
   15458:	mov    rdi,rbx
   1545b:	call   20040 <g_str_equal@plt+0x17c88>
   15460:	add    rsp,0x10
   15464:	pop    rbx
   15465:	ret    
   15466:	nop    WORD PTR cs:[rax+rax*1+0x0]
   15470:	push   rbx
   15471:	sub    rsp,0x10
   15475:	test   rdi,rdi
   15478:	mov    QWORD PTR [rsp+0x8],rdi
   1547d:	je     154a0 <g_str_equal@plt+0xd0e8>
   1547f:	call   21d80 <g_str_equal@plt+0x199c8>
   15484:	lea    rdx,[rsp+0x8]
   15489:	mov    rbx,rax
   1548c:	mov    rdi,rax
   1548f:	xor    ecx,ecx
   15491:	xor    esi,esi
   15493:	call   1ad20 <g_str_equal@plt+0x12968>
   15498:	mov    rdi,rbx
   1549b:	call   20040 <g_str_equal@plt+0x17c88>
   154a0:	add    rsp,0x10
   154a4:	pop    rbx
   154a5:	ret    
   154a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   154b0:	push   rbx
   154b1:	sub    rsp,0x10
   154b5:	test   rdi,rdi
   154b8:	mov    QWORD PTR [rsp+0x8],rdi
   154bd:	je     154e0 <g_str_equal@plt+0xd128>
   154bf:	call   21d80 <g_str_equal@plt+0x199c8>
   154c4:	lea    rdx,[rsp+0x8]
   154c9:	mov    rbx,rax
   154cc:	mov    rdi,rax
   154cf:	xor    ecx,ecx
   154d1:	xor    esi,esi
   154d3:	call   1aee0 <g_str_equal@plt+0x12b28>
   154d8:	mov    rdi,rbx
   154db:	call   20040 <g_str_equal@plt+0x17c88>
   154e0:	add    rsp,0x10
   154e4:	pop    rbx
   154e5:	ret    
   154e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   154f0:	push   rbx
   154f1:	sub    rsp,0x10
   154f5:	test   rdi,rdi
   154f8:	mov    QWORD PTR [rsp+0x8],rdi
   154fd:	je     15520 <g_str_equal@plt+0xd168>
   154ff:	call   21d80 <g_str_equal@plt+0x199c8>
   15504:	lea    rdx,[rsp+0x8]
   15509:	mov    rbx,rax
   1550c:	mov    rdi,rax
   1550f:	xor    ecx,ecx
   15511:	xor    esi,esi
   15513:	call   1b080 <g_str_equal@plt+0x12cc8>
   15518:	mov    rdi,rbx
   1551b:	call   20040 <g_str_equal@plt+0x17c88>
   15520:	add    rsp,0x10
   15524:	pop    rbx
   15525:	ret    
   15526:	nop    WORD PTR cs:[rax+rax*1+0x0]
   15530:	push   rbx
   15531:	sub    rsp,0x10
   15535:	test   rdi,rdi
   15538:	mov    QWORD PTR [rsp+0x8],rdi
   1553d:	je     15560 <g_str_equal@plt+0xd1a8>
   1553f:	call   21d80 <g_str_equal@plt+0x199c8>
   15544:	lea    rdx,[rsp+0x8]
   15549:	mov    rbx,rax
   1554c:	mov    rdi,rax
   1554f:	xor    ecx,ecx
   15551:	xor    esi,esi
   15553:	call   1b320 <g_str_equal@plt+0x12f68>
   15558:	mov    rdi,rbx
   1555b:	call   20040 <g_str_equal@plt+0x17c88>
   15560:	add    rsp,0x10
   15564:	pop    rbx
   15565:	ret    
   15566:	nop    WORD PTR cs:[rax+rax*1+0x0]
   15570:	push   rbx
   15571:	sub    rsp,0x10
   15575:	test   rdi,rdi
   15578:	mov    QWORD PTR [rsp+0x8],rdi
   1557d:	je     155a0 <g_str_equal@plt+0xd1e8>
   1557f:	call   21d80 <g_str_equal@plt+0x199c8>
   15584:	lea    rdx,[rsp+0x8]
   15589:	mov    rbx,rax
   1558c:	mov    rdi,rax
   1558f:	xor    ecx,ecx
   15591:	xor    esi,esi
   15593:	call   1b500 <g_str_equal@plt+0x13148>
   15598:	mov    rdi,rbx
   1559b:	call   20040 <g_str_equal@plt+0x17c88>
   155a0:	add    rsp,0x10
   155a4:	pop    rbx
   155a5:	ret    
   155a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   155b0:	push   rbx
   155b1:	sub    rsp,0x10
   155b5:	test   rdi,rdi
   155b8:	mov    QWORD PTR [rsp+0x8],rdi
   155bd:	je     155e0 <g_str_equal@plt+0xd228>
   155bf:	call   21d80 <g_str_equal@plt+0x199c8>
   155c4:	lea    rdx,[rsp+0x8]
   155c9:	mov    rbx,rax
   155cc:	mov    rdi,rax
   155cf:	xor    ecx,ecx
   155d1:	xor    esi,esi
   155d3:	call   1b720 <g_str_equal@plt+0x13368>
   155d8:	mov    rdi,rbx
   155db:	call   20040 <g_str_equal@plt+0x17c88>
   155e0:	add    rsp,0x10
   155e4:	pop    rbx
   155e5:	ret    
   155e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   155f0:	push   rbx
   155f1:	sub    rsp,0x10
   155f5:	test   rdi,rdi
   155f8:	mov    QWORD PTR [rsp+0x8],rdi
   155fd:	je     15620 <g_str_equal@plt+0xd268>
   155ff:	call   21d80 <g_str_equal@plt+0x199c8>
   15604:	lea    rdx,[rsp+0x8]
   15609:	mov    rbx,rax
   1560c:	mov    rdi,rax
   1560f:	xor    ecx,ecx
   15611:	xor    esi,esi
   15613:	call   1ba30 <g_str_equal@plt+0x13678>
   15618:	mov    rdi,rbx
   1561b:	call   20040 <g_str_equal@plt+0x17c88>
   15620:	add    rsp,0x10
   15624:	pop    rbx
   15625:	ret    
   15626:	nop    WORD PTR cs:[rax+rax*1+0x0]
   15630:	push   rbx
   15631:	sub    rsp,0x10
   15635:	test   rdi,rdi
   15638:	mov    QWORD PTR [rsp+0x8],rdi
   1563d:	je     15660 <g_str_equal@plt+0xd2a8>
   1563f:	call   21d80 <g_str_equal@plt+0x199c8>
   15644:	lea    rdx,[rsp+0x8]
   15649:	mov    rbx,rax
   1564c:	mov    rdi,rax
   1564f:	xor    ecx,ecx
   15651:	xor    esi,esi
   15653:	call   1bb10 <g_str_equal@plt+0x13758>
   15658:	mov    rdi,rbx
   1565b:	call   20040 <g_str_equal@plt+0x17c88>
   15660:	add    rsp,0x10
   15664:	pop    rbx
   15665:	ret    
   15666:	nop    WORD PTR cs:[rax+rax*1+0x0]
   15670:	push   rbx
   15671:	sub    rsp,0x10
   15675:	test   rdi,rdi
   15678:	mov    QWORD PTR [rsp+0x8],rdi
   1567d:	je     156a0 <g_str_equal@plt+0xd2e8>
   1567f:	call   21d80 <g_str_equal@plt+0x199c8>
   15684:	lea    rdx,[rsp+0x8]
   15689:	mov    rbx,rax
   1568c:	mov    rdi,rax
   1568f:	xor    ecx,ecx
   15691:	xor    esi,esi
   15693:	call   1bcc0 <g_str_equal@plt+0x13908>
   15698:	mov    rdi,rbx
   1569b:	call   20040 <g_str_equal@plt+0x17c88>
   156a0:	add    rsp,0x10
   156a4:	pop    rbx
   156a5:	ret    
   156a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   156b0:	push   rbx
   156b1:	sub    rsp,0x10
   156b5:	test   rdi,rdi
   156b8:	mov    QWORD PTR [rsp+0x8],rdi
   156bd:	je     156e0 <g_str_equal@plt+0xd328>
   156bf:	call   21d80 <g_str_equal@plt+0x199c8>
   156c4:	lea    rdx,[rsp+0x8]
   156c9:	mov    rbx,rax
   156cc:	mov    rdi,rax
   156cf:	xor    ecx,ecx
   156d1:	xor    esi,esi
   156d3:	call   1bda0 <g_str_equal@plt+0x139e8>
   156d8:	mov    rdi,rbx
   156db:	call   20040 <g_str_equal@plt+0x17c88>
   156e0:	add    rsp,0x10
   156e4:	pop    rbx
   156e5:	ret    
   156e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   156f0:	push   rbx
   156f1:	sub    rsp,0x10
   156f5:	test   rdi,rdi
   156f8:	mov    QWORD PTR [rsp+0x8],rdi
   156fd:	je     15720 <g_str_equal@plt+0xd368>
   156ff:	call   21d80 <g_str_equal@plt+0x199c8>
   15704:	lea    rdx,[rsp+0x8]
   15709:	mov    rbx,rax
   1570c:	mov    rdi,rax
   1570f:	xor    ecx,ecx
   15711:	xor    esi,esi
   15713:	call   1bf10 <g_str_equal@plt+0x13b58>
   15718:	mov    rdi,rbx
   1571b:	call   20040 <g_str_equal@plt+0x17c88>
   15720:	add    rsp,0x10
   15724:	pop    rbx
   15725:	ret    
   15726:	nop    WORD PTR cs:[rax+rax*1+0x0]
   15730:	push   rbx
   15731:	sub    rsp,0x10
   15735:	test   rdi,rdi
   15738:	mov    QWORD PTR [rsp+0x8],rdi
   1573d:	je     15760 <g_str_equal@plt+0xd3a8>
   1573f:	call   21d80 <g_str_equal@plt+0x199c8>
   15744:	lea    rdx,[rsp+0x8]
   15749:	mov    rbx,rax
   1574c:	mov    rdi,rax
   1574f:	xor    ecx,ecx
   15751:	xor    esi,esi
   15753:	call   1c270 <g_str_equal@plt+0x13eb8>
   15758:	mov    rdi,rbx
   1575b:	call   20040 <g_str_equal@plt+0x17c88>
   15760:	add    rsp,0x10
   15764:	pop    rbx
   15765:	ret    
   15766:	nop    WORD PTR cs:[rax+rax*1+0x0]
   15770:	push   rbx
   15771:	sub    rsp,0x10
   15775:	test   rdi,rdi
   15778:	mov    QWORD PTR [rsp+0x8],rdi
   1577d:	je     157a0 <g_str_equal@plt+0xd3e8>
   1577f:	call   21d80 <g_str_equal@plt+0x199c8>
   15784:	lea    rdx,[rsp+0x8]
   15789:	mov    rbx,rax
   1578c:	mov    rdi,rax
   1578f:	xor    ecx,ecx
   15791:	xor    esi,esi
   15793:	call   1c4e0 <g_str_equal@plt+0x14128>
   15798:	mov    rdi,rbx
   1579b:	call   20040 <g_str_equal@plt+0x17c88>
   157a0:	add    rsp,0x10
   157a4:	pop    rbx
   157a5:	ret    
   157a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   157b0:	push   rbx
   157b1:	sub    rsp,0x10
   157b5:	test   rdi,rdi
   157b8:	mov    QWORD PTR [rsp+0x8],rdi
   157bd:	je     157e0 <g_str_equal@plt+0xd428>
   157bf:	call   21d80 <g_str_equal@plt+0x199c8>
   157c4:	lea    rdx,[rsp+0x8]
   157c9:	mov    rbx,rax
   157cc:	mov    rdi,rax
   157cf:	xor    ecx,ecx
   157d1:	xor    esi,esi
   157d3:	call   1c5c0 <g_str_equal@plt+0x14208>
   157d8:	mov    rdi,rbx
   157db:	call   20040 <g_str_equal@plt+0x17c88>
   157e0:	add    rsp,0x10
   157e4:	pop    rbx
   157e5:	ret    
   157e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   157f0:	push   rbx
   157f1:	sub    rsp,0x10
   157f5:	test   rdi,rdi
   157f8:	mov    QWORD PTR [rsp+0x8],rdi
   157fd:	je     15820 <g_str_equal@plt+0xd468>
   157ff:	call   21d80 <g_str_equal@plt+0x199c8>
   15804:	lea    rdx,[rsp+0x8]
   15809:	mov    rbx,rax
   1580c:	mov    rdi,rax
   1580f:	xor    ecx,ecx
   15811:	xor    esi,esi
   15813:	call   1c770 <g_str_equal@plt+0x143b8>
   15818:	mov    rdi,rbx
   1581b:	call   20040 <g_str_equal@plt+0x17c88>
   15820:	add    rsp,0x10
   15824:	pop    rbx
   15825:	ret    
   15826:	nop    WORD PTR cs:[rax+rax*1+0x0]
   15830:	push   rbx
   15831:	sub    rsp,0x10
   15835:	test   rdi,rdi
   15838:	mov    QWORD PTR [rsp+0x8],rdi
   1583d:	je     15860 <g_str_equal@plt+0xd4a8>
   1583f:	call   21d80 <g_str_equal@plt+0x199c8>
   15844:	lea    rdx,[rsp+0x8]
   15849:	mov    rbx,rax
   1584c:	mov    rdi,rax
   1584f:	xor    ecx,ecx
   15851:	xor    esi,esi
   15853:	call   1c8d0 <g_str_equal@plt+0x14518>
   15858:	mov    rdi,rbx
   1585b:	call   20040 <g_str_equal@plt+0x17c88>
   15860:	add    rsp,0x10
   15864:	pop    rbx
   15865:	ret    
   15866:	nop    WORD PTR cs:[rax+rax*1+0x0]
   15870:	push   rbx
   15871:	sub    rsp,0x10
   15875:	test   rdi,rdi
   15878:	mov    QWORD PTR [rsp+0x8],rdi
   1587d:	je     158a0 <g_str_equal@plt+0xd4e8>
   1587f:	call   21d80 <g_str_equal@plt+0x199c8>
   15884:	lea    rdx,[rsp+0x8]
   15889:	mov    rbx,rax
   1588c:	mov    rdi,rax
   1588f:	xor    ecx,ecx
   15891:	xor    esi,esi
   15893:	call   1cb50 <g_str_equal@plt+0x14798>
   15898:	mov    rdi,rbx
   1589b:	call   20040 <g_str_equal@plt+0x17c88>
   158a0:	add    rsp,0x10
   158a4:	pop    rbx
   158a5:	ret    
   158a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   158b0:	push   rbx
   158b1:	sub    rsp,0x10
   158b5:	test   rdi,rdi
   158b8:	mov    QWORD PTR [rsp+0x8],rdi
   158bd:	je     158e0 <g_str_equal@plt+0xd528>
   158bf:	call   21d80 <g_str_equal@plt+0x199c8>
   158c4:	lea    rdx,[rsp+0x8]
   158c9:	mov    rbx,rax
   158cc:	mov    rdi,rax
   158cf:	xor    ecx,ecx
   158d1:	xor    esi,esi
   158d3:	call   1cc30 <g_str_equal@plt+0x14878>
   158d8:	mov    rdi,rbx
   158db:	call   20040 <g_str_equal@plt+0x17c88>
   158e0:	add    rsp,0x10
   158e4:	pop    rbx
   158e5:	ret    
   158e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   158f0:	push   rbx
   158f1:	sub    rsp,0x10
   158f5:	test   rdi,rdi
   158f8:	mov    QWORD PTR [rsp+0x8],rdi
   158fd:	je     15920 <g_str_equal@plt+0xd568>
   158ff:	call   21d80 <g_str_equal@plt+0x199c8>
   15904:	lea    rdx,[rsp+0x8]
   15909:	mov    rbx,rax
   1590c:	mov    rdi,rax
   1590f:	xor    ecx,ecx
   15911:	xor    esi,esi
   15913:	call   1cda0 <g_str_equal@plt+0x149e8>
   15918:	mov    rdi,rbx
   1591b:	call   20040 <g_str_equal@plt+0x17c88>
   15920:	add    rsp,0x10
   15924:	pop    rbx
   15925:	ret    
   15926:	nop    WORD PTR cs:[rax+rax*1+0x0]
   15930:	push   rbx
   15931:	sub    rsp,0x10
   15935:	test   rdi,rdi
   15938:	mov    QWORD PTR [rsp+0x8],rdi
   1593d:	je     15960 <g_str_equal@plt+0xd5a8>
   1593f:	call   21d80 <g_str_equal@plt+0x199c8>
   15944:	lea    rdx,[rsp+0x8]
   15949:	mov    rbx,rax
   1594c:	mov    rdi,rax
   1594f:	xor    ecx,ecx
   15951:	xor    esi,esi
   15953:	call   1e740 <g_str_equal@plt+0x16388>
   15958:	mov    rdi,rbx
   1595b:	call   20040 <g_str_equal@plt+0x17c88>
   15960:	add    rsp,0x10
   15964:	pop    rbx
   15965:	ret    
   15966:	nop    WORD PTR cs:[rax+rax*1+0x0]
   15970:	push   rbx
   15971:	sub    rsp,0x10
   15975:	test   rdi,rdi
   15978:	mov    QWORD PTR [rsp+0x8],rdi
   1597d:	je     159a0 <g_str_equal@plt+0xd5e8>
   1597f:	call   21d80 <g_str_equal@plt+0x199c8>
   15984:	lea    rdx,[rsp+0x8]
   15989:	mov    rbx,rax
   1598c:	mov    rdi,rax
   1598f:	xor    ecx,ecx
   15991:	xor    esi,esi
   15993:	call   1d0a0 <g_str_equal@plt+0x14ce8>
   15998:	mov    rdi,rbx
   1599b:	call   20040 <g_str_equal@plt+0x17c88>
   159a0:	add    rsp,0x10
   159a4:	pop    rbx
   159a5:	ret    
   159a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   159b0:	push   rbx
   159b1:	sub    rsp,0x10
   159b5:	test   rdi,rdi
   159b8:	mov    QWORD PTR [rsp+0x8],rdi
   159bd:	je     159e0 <g_str_equal@plt+0xd628>
   159bf:	call   21d80 <g_str_equal@plt+0x199c8>
   159c4:	lea    rdx,[rsp+0x8]
   159c9:	mov    rbx,rax
   159cc:	mov    rdi,rax
   159cf:	xor    ecx,ecx
   159d1:	xor    esi,esi
   159d3:	call   1d230 <g_str_equal@plt+0x14e78>
   159d8:	mov    rdi,rbx
   159db:	call   20040 <g_str_equal@plt+0x17c88>
   159e0:	add    rsp,0x10
   159e4:	pop    rbx
   159e5:	ret    
   159e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   159f0:	push   rbx
   159f1:	sub    rsp,0x10
   159f5:	test   rdi,rdi
   159f8:	mov    QWORD PTR [rsp+0x8],rdi
   159fd:	je     15a20 <g_str_equal@plt+0xd668>
   159ff:	call   21d80 <g_str_equal@plt+0x199c8>
   15a04:	lea    rdx,[rsp+0x8]
   15a09:	mov    rbx,rax
   15a0c:	mov    rdi,rax
   15a0f:	xor    ecx,ecx
   15a11:	xor    esi,esi
   15a13:	call   1e820 <g_str_equal@plt+0x16468>
   15a18:	mov    rdi,rbx
   15a1b:	call   20040 <g_str_equal@plt+0x17c88>
   15a20:	add    rsp,0x10
   15a24:	pop    rbx
   15a25:	ret    
   15a26:	nop    WORD PTR cs:[rax+rax*1+0x0]
   15a30:	push   rbx
   15a31:	sub    rsp,0x10
   15a35:	test   rdi,rdi
   15a38:	mov    QWORD PTR [rsp+0x8],rdi
   15a3d:	je     15a60 <g_str_equal@plt+0xd6a8>
   15a3f:	call   21d80 <g_str_equal@plt+0x199c8>
   15a44:	lea    rdx,[rsp+0x8]
   15a49:	mov    rbx,rax
   15a4c:	mov    rdi,rax
   15a4f:	xor    ecx,ecx
   15a51:	xor    esi,esi
   15a53:	call   1d4f0 <g_str_equal@plt+0x15138>
   15a58:	mov    rdi,rbx
   15a5b:	call   20040 <g_str_equal@plt+0x17c88>
   15a60:	add    rsp,0x10
   15a64:	pop    rbx
   15a65:	ret    
   15a66:	nop    WORD PTR cs:[rax+rax*1+0x0]
   15a70:	push   rbx
   15a71:	sub    rsp,0x10
   15a75:	test   rdi,rdi
   15a78:	mov    QWORD PTR [rsp+0x8],rdi
   15a7d:	je     15aa0 <g_str_equal@plt+0xd6e8>
   15a7f:	call   21d80 <g_str_equal@plt+0x199c8>
   15a84:	lea    rdx,[rsp+0x8]
   15a89:	mov    rbx,rax
   15a8c:	mov    rdi,rax
   15a8f:	xor    ecx,ecx
   15a91:	xor    esi,esi
   15a93:	call   1d5d0 <g_str_equal@plt+0x15218>
   15a98:	mov    rdi,rbx
   15a9b:	call   20040 <g_str_equal@plt+0x17c88>
   15aa0:	add    rsp,0x10
   15aa4:	pop    rbx
   15aa5:	ret    
   15aa6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   15ab0:	push   rbx
   15ab1:	sub    rsp,0x10
   15ab5:	test   rdi,rdi
   15ab8:	mov    QWORD PTR [rsp+0x8],rdi
   15abd:	je     15ae0 <g_str_equal@plt+0xd728>
   15abf:	call   21d80 <g_str_equal@plt+0x199c8>
   15ac4:	lea    rdx,[rsp+0x8]
   15ac9:	mov    rbx,rax
   15acc:	mov    rdi,rax
   15acf:	xor    ecx,ecx
   15ad1:	xor    esi,esi
   15ad3:	call   1d860 <g_str_equal@plt+0x154a8>
   15ad8:	mov    rdi,rbx
   15adb:	call   20040 <g_str_equal@plt+0x17c88>
   15ae0:	add    rsp,0x10
   15ae4:	pop    rbx
   15ae5:	ret    
   15ae6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   15af0:	push   rbx
   15af1:	sub    rsp,0x10
   15af5:	test   rdi,rdi
   15af8:	mov    QWORD PTR [rsp+0x8],rdi
   15afd:	je     15b20 <g_str_equal@plt+0xd768>
   15aff:	call   21d80 <g_str_equal@plt+0x199c8>
   15b04:	lea    rdx,[rsp+0x8]
   15b09:	mov    rbx,rax
   15b0c:	mov    rdi,rax
   15b0f:	xor    ecx,ecx
   15b11:	xor    esi,esi
   15b13:	call   1dab0 <g_str_equal@plt+0x156f8>
   15b18:	mov    rdi,rbx
   15b1b:	call   20040 <g_str_equal@plt+0x17c88>
   15b20:	add    rsp,0x10
   15b24:	pop    rbx
   15b25:	ret    
   15b26:	nop    WORD PTR cs:[rax+rax*1+0x0]
   15b30:	push   rbx
   15b31:	sub    rsp,0x10
   15b35:	test   rdi,rdi
   15b38:	mov    QWORD PTR [rsp+0x8],rdi
   15b3d:	je     15b60 <g_str_equal@plt+0xd7a8>
   15b3f:	call   21d80 <g_str_equal@plt+0x199c8>
   15b44:	lea    rdx,[rsp+0x8]
   15b49:	mov    rbx,rax
   15b4c:	mov    rdi,rax
   15b4f:	xor    ecx,ecx
   15b51:	xor    esi,esi
   15b53:	call   1db90 <g_str_equal@plt+0x157d8>
   15b58:	mov    rdi,rbx
   15b5b:	call   20040 <g_str_equal@plt+0x17c88>
   15b60:	add    rsp,0x10
   15b64:	pop    rbx
   15b65:	ret    
   15b66:	nop    WORD PTR cs:[rax+rax*1+0x0]
   15b70:	push   rbx
   15b71:	sub    rsp,0x10
   15b75:	test   rdi,rdi
   15b78:	mov    QWORD PTR [rsp+0x8],rdi
   15b7d:	je     15ba0 <g_str_equal@plt+0xd7e8>
   15b7f:	call   21d80 <g_str_equal@plt+0x199c8>
   15b84:	lea    rdx,[rsp+0x8]
   15b89:	mov    rbx,rax
   15b8c:	mov    rdi,rax
   15b8f:	xor    ecx,ecx
   15b91:	xor    esi,esi
   15b93:	call   1dee0 <g_str_equal@plt+0x15b28>
   15b98:	mov    rdi,rbx
   15b9b:	call   20040 <g_str_equal@plt+0x17c88>
   15ba0:	add    rsp,0x10
   15ba4:	pop    rbx
   15ba5:	ret    
   15ba6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   15bb0:	push   rbx
   15bb1:	sub    rsp,0x10
   15bb5:	test   rdi,rdi
   15bb8:	mov    QWORD PTR [rsp+0x8],rdi
   15bbd:	je     15be0 <g_str_equal@plt+0xd828>
   15bbf:	call   21d80 <g_str_equal@plt+0x199c8>
   15bc4:	lea    rdx,[rsp+0x8]
   15bc9:	mov    rbx,rax
   15bcc:	mov    rdi,rax
   15bcf:	xor    ecx,ecx
   15bd1:	xor    esi,esi
   15bd3:	call   1dfc0 <g_str_equal@plt+0x15c08>
   15bd8:	mov    rdi,rbx
   15bdb:	call   20040 <g_str_equal@plt+0x17c88>
   15be0:	add    rsp,0x10
   15be4:	pop    rbx
   15be5:	ret    
   15be6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   15bf0:	push   rbx
   15bf1:	sub    rsp,0x10
   15bf5:	test   rdi,rdi
   15bf8:	mov    QWORD PTR [rsp+0x8],rdi
   15bfd:	je     15c20 <g_str_equal@plt+0xd868>
   15bff:	call   21d80 <g_str_equal@plt+0x199c8>
   15c04:	lea    rdx,[rsp+0x8]
   15c09:	mov    rbx,rax
   15c0c:	mov    rdi,rax
   15c0f:	xor    ecx,ecx
   15c11:	xor    esi,esi
   15c13:	call   1e300 <g_str_equal@plt+0x15f48>
   15c18:	mov    rdi,rbx
   15c1b:	call   20040 <g_str_equal@plt+0x17c88>
   15c20:	add    rsp,0x10
   15c24:	pop    rbx
   15c25:	ret    
   15c26:	nop    WORD PTR cs:[rax+rax*1+0x0]
   15c30:	push   rbx
   15c31:	sub    rsp,0x10
   15c35:	test   rdi,rdi
   15c38:	mov    QWORD PTR [rsp+0x8],rdi
   15c3d:	je     15c60 <g_str_equal@plt+0xd8a8>
   15c3f:	call   21d80 <g_str_equal@plt+0x199c8>
   15c44:	lea    rdx,[rsp+0x8]
   15c49:	mov    rbx,rax
   15c4c:	mov    rdi,rax
   15c4f:	xor    ecx,ecx
   15c51:	xor    esi,esi
   15c53:	call   1e3e0 <g_str_equal@plt+0x16028>
   15c58:	mov    rdi,rbx
   15c5b:	call   20040 <g_str_equal@plt+0x17c88>
   15c60:	add    rsp,0x10
   15c64:	pop    rbx
   15c65:	ret    
   15c66:	nop    WORD PTR cs:[rax+rax*1+0x0]
   15c70:	push   rbx
   15c71:	sub    rsp,0x10
   15c75:	test   rdi,rdi
   15c78:	mov    QWORD PTR [rsp+0x8],rdi
   15c7d:	je     15ca0 <g_str_equal@plt+0xd8e8>
   15c7f:	call   21d80 <g_str_equal@plt+0x199c8>
   15c84:	lea    rdx,[rsp+0x8]
   15c89:	mov    rbx,rax
   15c8c:	mov    rdi,rax
   15c8f:	xor    ecx,ecx
   15c91:	xor    esi,esi
   15c93:	call   1e900 <g_str_equal@plt+0x16548>
   15c98:	mov    rdi,rbx
   15c9b:	call   20040 <g_str_equal@plt+0x17c88>
   15ca0:	add    rsp,0x10
   15ca4:	pop    rbx
   15ca5:	ret    
   15ca6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   15cb0:	push   rbx
   15cb1:	sub    rsp,0x10
   15cb5:	test   rdi,rdi
   15cb8:	mov    QWORD PTR [rsp+0x8],rdi
   15cbd:	je     15ce0 <g_str_equal@plt+0xd928>
   15cbf:	call   21d80 <g_str_equal@plt+0x199c8>
   15cc4:	lea    rdx,[rsp+0x8]
   15cc9:	mov    rbx,rax
   15ccc:	mov    rdi,rax
   15ccf:	xor    ecx,ecx
   15cd1:	xor    esi,esi
   15cd3:	call   1f380 <g_str_equal@plt+0x16fc8>
   15cd8:	mov    rdi,rbx
   15cdb:	call   20040 <g_str_equal@plt+0x17c88>
   15ce0:	add    rsp,0x10
   15ce4:	pop    rbx
   15ce5:	ret    
   15ce6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   15cf0:	push   rbx
   15cf1:	sub    rsp,0x10
   15cf5:	test   rdi,rdi
   15cf8:	mov    QWORD PTR [rsp+0x8],rdi
   15cfd:	je     15d20 <g_str_equal@plt+0xd968>
   15cff:	call   21d80 <g_str_equal@plt+0x199c8>
   15d04:	lea    rdx,[rsp+0x8]
   15d09:	mov    rbx,rax
   15d0c:	mov    rdi,rax
   15d0f:	xor    ecx,ecx
   15d11:	xor    esi,esi
   15d13:	call   1f460 <g_str_equal@plt+0x170a8>
   15d18:	mov    rdi,rbx
   15d1b:	call   20040 <g_str_equal@plt+0x17c88>
   15d20:	add    rsp,0x10
   15d24:	pop    rbx
   15d25:	ret    
   15d26:	nop    WORD PTR cs:[rax+rax*1+0x0]
   15d30:	push   rbx
   15d31:	sub    rsp,0x10
   15d35:	test   rdi,rdi
   15d38:	mov    QWORD PTR [rsp+0x8],rdi
   15d3d:	je     15d60 <g_str_equal@plt+0xd9a8>
   15d3f:	call   21d80 <g_str_equal@plt+0x199c8>
   15d44:	lea    rdx,[rsp+0x8]
   15d49:	mov    rbx,rax
   15d4c:	mov    rdi,rax
   15d4f:	xor    ecx,ecx
   15d51:	xor    esi,esi
   15d53:	call   1f5d0 <g_str_equal@plt+0x17218>
   15d58:	mov    rdi,rbx
   15d5b:	call   20040 <g_str_equal@plt+0x17c88>
   15d60:	add    rsp,0x10
   15d64:	pop    rbx
   15d65:	ret    
   15d66:	nop    WORD PTR cs:[rax+rax*1+0x0]
   15d70:	push   rbx
   15d71:	sub    rsp,0x10
   15d75:	test   rdi,rdi
   15d78:	mov    QWORD PTR [rsp+0x8],rdi
   15d7d:	je     15da0 <g_str_equal@plt+0xd9e8>
   15d7f:	call   21d80 <g_str_equal@plt+0x199c8>
   15d84:	lea    rdx,[rsp+0x8]
   15d89:	mov    rbx,rax
   15d8c:	mov    rdi,rax
   15d8f:	xor    ecx,ecx
   15d91:	xor    esi,esi
   15d93:	call   1f870 <g_str_equal@plt+0x174b8>
   15d98:	mov    rdi,rbx
   15d9b:	call   20040 <g_str_equal@plt+0x17c88>
   15da0:	add    rsp,0x10
   15da4:	pop    rbx
   15da5:	ret    
   15da6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   15db0:	push   rbx
   15db1:	sub    rsp,0x10
   15db5:	test   rdi,rdi
   15db8:	mov    QWORD PTR [rsp+0x8],rdi
   15dbd:	je     15de0 <g_str_equal@plt+0xda28>
   15dbf:	call   21d80 <g_str_equal@plt+0x199c8>
   15dc4:	lea    rdx,[rsp+0x8]
   15dc9:	mov    rbx,rax
   15dcc:	mov    rdi,rax
   15dcf:	xor    ecx,ecx
   15dd1:	xor    esi,esi
   15dd3:	call   1f9b0 <g_str_equal@plt+0x175f8>
   15dd8:	mov    rdi,rbx
   15ddb:	call   20040 <g_str_equal@plt+0x17c88>
   15de0:	add    rsp,0x10
   15de4:	pop    rbx
   15de5:	ret    
   15de6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   15df0:	push   rbx
   15df1:	sub    rsp,0x10
   15df5:	test   rdi,rdi
   15df8:	mov    QWORD PTR [rsp+0x8],rdi
   15dfd:	je     15e20 <g_str_equal@plt+0xda68>
   15dff:	call   21d80 <g_str_equal@plt+0x199c8>
   15e04:	lea    rdx,[rsp+0x8]
   15e09:	mov    rbx,rax
   15e0c:	mov    rdi,rax
   15e0f:	xor    ecx,ecx
   15e11:	xor    esi,esi
   15e13:	call   1fb70 <g_str_equal@plt+0x177b8>
   15e18:	mov    rdi,rbx
   15e1b:	call   20040 <g_str_equal@plt+0x17c88>
   15e20:	add    rsp,0x10
   15e24:	pop    rbx
   15e25:	ret    
   15e26:	nop    WORD PTR cs:[rax+rax*1+0x0]
   15e30:	push   r15
   15e32:	push   r14
   15e34:	push   r13
   15e36:	push   r12
   15e38:	mov    r12,rdx
   15e3b:	push   rbp
   15e3c:	push   rbx
   15e3d:	mov    rbx,rdi
   15e40:	sub    rsp,0x38
   15e44:	lea    rbp,[rsp+0x20]
   15e49:	mov    QWORD PTR [rsp+0x8],rcx
   15e4e:	mov    ecx,0x10
   15e53:	mov    rax,QWORD PTR fs:0x28
   15e5c:	mov    QWORD PTR [rsp+0x28],rax
   15e61:	xor    eax,eax
   15e63:	mov    r8,rbp
   15e66:	mov    QWORD PTR [rsp+0x20],0x0
   15e6f:	call   203e0 <g_str_equal@plt+0x18028>
   15e74:	mov    rsi,QWORD PTR [rsp+0x20]
   15e79:	test   rsi,rsi
   15e7c:	je     15eb0 <g_str_equal@plt+0xdaf8>
   15e7e:	mov    rdi,QWORD PTR [rsp+0x8]
   15e83:	call   df30 <g_str_equal@plt+0x5b78>
   15e88:	mov    rax,QWORD PTR [rsp+0x28]
   15e8d:	xor    rax,QWORD PTR fs:0x28
   15e96:	jne    15f6d <g_str_equal@plt+0xdbb5>
   15e9c:	add    rsp,0x38
   15ea0:	pop    rbx
   15ea1:	pop    rbp
   15ea2:	pop    r12
   15ea4:	pop    r13
   15ea6:	pop    r14
   15ea8:	pop    r15
   15eaa:	ret    
   15eab:	nop    DWORD PTR [rax+rax*1+0x0]
   15eb0:	mov    r15,QWORD PTR [r12]
   15eb4:	lea    r14,[rsp+0x1c]
   15eb9:	lea    r13,[rip+0x227580]        # 23d440 <_fini@@Base+0x2141bc>
   15ec0:	test   r15,r15
   15ec3:	jne    15ee8 <g_str_equal@plt+0xdb30>
   15ec5:	jmp    15f60 <g_str_equal@plt+0xdba8>
   15eca:	nop    WORD PTR [rax+rax*1+0x0]
   15ed0:	mov    rsi,r15
   15ed3:	mov    edx,0x10
   15ed8:	mov    rdi,rbx
   15edb:	call   20530 <g_str_equal@plt+0x18178>
   15ee0:	test   rax,rax
   15ee3:	mov    r15,rax
   15ee6:	je     15f58 <g_str_equal@plt+0xdba0>
   15ee8:	mov    edx,DWORD PTR [r15+0x8]
   15eec:	xor    esi,esi
   15eee:	mov    r8,rbp
   15ef1:	mov    rcx,r13
   15ef4:	mov    rdi,rbx
   15ef7:	mov    DWORD PTR [rsp+0x1c],edx
   15efb:	mov    rdx,r14
   15efe:	call   219e0 <g_str_equal@plt+0x19628>
   15f03:	cmp    QWORD PTR [rsp+0x20],0x0
   15f09:	mov    edx,DWORD PTR [rsp+0x1c]
   15f0d:	mov    DWORD PTR [r15+0x8],edx
   15f11:	je     15ed0 <g_str_equal@plt+0xdb18>
   15f13:	mov    rsi,r12
   15f16:	mov    rdi,rbx
   15f19:	call   206d0 <g_str_equal@plt+0x18318>
   15f1e:	mov    rsi,QWORD PTR [rsp+0x20]
   15f23:	test   rsi,rsi
   15f26:	je     15e7e <g_str_equal@plt+0xdac6>
   15f2c:	mov    rdi,rbx
   15f2f:	call   20ab0 <g_str_equal@plt+0x186f8>
   15f34:	test   al,al
   15f36:	je     15f49 <g_str_equal@plt+0xdb91>
   15f38:	mov    rdi,QWORD PTR [r12]
   15f3c:	call   148f0 <g_str_equal@plt+0xc538>
   15f41:	mov    QWORD PTR [r12],0x0
   15f49:	mov    rsi,QWORD PTR [rsp+0x20]
   15f4e:	jmp    15e7e <g_str_equal@plt+0xdac6>
   15f53:	nop    DWORD PTR [rax+rax*1+0x0]
   15f58:	cmp    QWORD PTR [rsp+0x20],0x0
   15f5e:	jne    15f13 <g_str_equal@plt+0xdb5b>
   15f60:	mov    rsi,rbp
   15f63:	mov    rdi,rbx
   15f66:	call   20620 <g_str_equal@plt+0x18268>
   15f6b:	jmp    15f13 <g_str_equal@plt+0xdb5b>
   15f6d:	call   8050 <__stack_chk_fail@plt>
   15f72:	nop    DWORD PTR [rax+0x0]
   15f76:	nop    WORD PTR cs:[rax+rax*1+0x0]
   15f80:	push   r12
   15f82:	push   rbp
   15f83:	mov    r12,rdx
   15f86:	push   rbx
   15f87:	mov    rdx,rsi
   15f8a:	mov    rbx,rsi
   15f8d:	lea    rsi,[rip+0x15d50]        # 2bce4 <_fini@@Base+0x2a60>
   15f94:	mov    rbp,rdi
   15f97:	sub    rsp,0x10
   15f9b:	mov    rax,QWORD PTR fs:0x28
   15fa4:	mov    QWORD PTR [rsp+0x8],rax
   15fa9:	xor    eax,eax
   15fab:	mov    QWORD PTR [rsp],0x0
   15fb3:	call   209e0 <g_str_equal@plt+0x18628>
   15fb8:	test   al,al
   15fba:	je     15fd2 <g_str_equal@plt+0xdc1a>
   15fbc:	lea    rdx,[rbx+0x8]
   15fc0:	lea    rsi,[rip+0x15d1d]        # 2bce4 <_fini@@Base+0x2a60>
   15fc7:	mov    rcx,rsp
   15fca:	mov    rdi,rbp
   15fcd:	call   15e30 <g_str_equal@plt+0xda78>
   15fd2:	mov    rsi,QWORD PTR [rsp]
   15fd6:	mov    rdi,r12
   15fd9:	call   df30 <g_str_equal@plt+0x5b78>
   15fde:	mov    rax,QWORD PTR [rsp+0x8]
   15fe3:	xor    rax,QWORD PTR fs:0x28
   15fec:	jne    15ff7 <g_str_equal@plt+0xdc3f>
   15fee:	add    rsp,0x10
   15ff2:	pop    rbx
   15ff3:	pop    rbp
   15ff4:	pop    r12
   15ff6:	ret    
   15ff7:	call   8050 <__stack_chk_fail@plt>
   15ffc:	nop    DWORD PTR [rax+0x0]
   16000:	push   rbx
   16001:	mov    r8,rcx
   16004:	mov    rbx,rdx
   16007:	lea    rcx,[rip+0x227432]        # 23d440 <_fini@@Base+0x2141bc>
   1600e:	sub    rsp,0x10
   16012:	mov    rax,QWORD PTR fs:0x28
   1601b:	mov    QWORD PTR [rsp+0x8],rax
   16020:	xor    eax,eax
   16022:	mov    eax,DWORD PTR [rdx]
   16024:	lea    rdx,[rsp+0x4]
   16029:	mov    DWORD PTR [rsp+0x4],eax
   1602d:	call   219e0 <g_str_equal@plt+0x19628>
   16032:	mov    eax,DWORD PTR [rsp+0x4]
   16036:	mov    DWORD PTR [rbx],eax
   16038:	mov    rax,QWORD PTR [rsp+0x8]
   1603d:	xor    rax,QWORD PTR fs:0x28
   16046:	jne    1604e <g_str_equal@plt+0xdc96>
   16048:	add    rsp,0x10
   1604c:	pop    rbx
   1604d:	ret    
   1604e:	call   8050 <__stack_chk_fail@plt>
   16053:	nop    DWORD PTR [rax]
   16056:	nop    WORD PTR cs:[rax+rax*1+0x0]
   16060:	push   r13
   16062:	push   r12
   16064:	mov    r13,rdx
   16067:	push   rbp
   16068:	push   rbx
   16069:	mov    rdx,rsi
   1606c:	mov    rbx,rsi
   1606f:	lea    rsi,[rip+0x17180]        # 2d1f6 <_fini@@Base+0x3f72>
   16076:	mov    rbp,rdi
   16079:	sub    rsp,0x18
   1607d:	mov    r12,rsp
   16080:	mov    QWORD PTR [rsp],0x0
   16088:	mov    rcx,r12
   1608b:	mov    rax,QWORD PTR fs:0x28
   16094:	mov    QWORD PTR [rsp+0x8],rax
   16099:	xor    eax,eax
   1609b:	call   20ac0 <g_str_equal@plt+0x18708>
   160a0:	mov    rsi,QWORD PTR [rsp]
   160a4:	test   rsi,rsi
   160a7:	je     160d0 <g_str_equal@plt+0xdd18>
   160a9:	mov    rdi,r13
   160ac:	call   df30 <g_str_equal@plt+0x5b78>
   160b1:	mov    rax,QWORD PTR [rsp+0x8]
   160b6:	xor    rax,QWORD PTR fs:0x28
   160bf:	jne    1610b <g_str_equal@plt+0xdd53>
   160c1:	add    rsp,0x18
   160c5:	pop    rbx
   160c6:	pop    rbp
   160c7:	pop    r12
   160c9:	pop    r13
   160cb:	ret    
   160cc:	nop    DWORD PTR [rax+0x0]
   160d0:	lea    rsi,[rip+0x17129]        # 2d200 <_fini@@Base+0x3f7c>
   160d7:	lea    rdx,[rbx+0x8]
   160db:	mov    rcx,r12
   160de:	mov    rdi,rbp
   160e1:	call   20ac0 <g_str_equal@plt+0x18708>
   160e6:	mov    rsi,QWORD PTR [rsp]
   160ea:	test   rsi,rsi
   160ed:	jne    160a9 <g_str_equal@plt+0xdcf1>
   160ef:	lea    rsi,[rip+0x16cf3]        # 2cde9 <_fini@@Base+0x3b65>
   160f6:	lea    rdx,[rbx+0x10]
   160fa:	mov    rcx,r12
   160fd:	mov    rdi,rbp
   16100:	call   20ac0 <g_str_equal@plt+0x18708>
   16105:	mov    rsi,QWORD PTR [rsp]
   16109:	jmp    160a9 <g_str_equal@plt+0xdcf1>
   1610b:	call   8050 <__stack_chk_fail@plt>
   16110:	push   r13
   16112:	push   r12
   16114:	mov    r13,rcx
   16117:	push   rbp
   16118:	push   rbx
   16119:	mov    ecx,0x18
   1611e:	mov    rbp,rdi
   16121:	mov    rbx,rdx
   16124:	sub    rsp,0x18
   16128:	mov    r12,rsp
   1612b:	mov    QWORD PTR [rsp],0x0
   16133:	mov    r8,r12
   16136:	mov    rax,QWORD PTR fs:0x28
   1613f:	mov    QWORD PTR [rsp+0x8],rax
   16144:	xor    eax,eax
   16146:	call   200e0 <g_str_equal@plt+0x17d28>
   1614b:	mov    rsi,QWORD PTR [rsp]
   1614f:	test   rsi,rsi
   16152:	je     16180 <g_str_equal@plt+0xddc8>
   16154:	mov    rdi,r13
   16157:	call   df30 <g_str_equal@plt+0x5b78>
   1615c:	mov    rax,QWORD PTR [rsp+0x8]
   16161:	xor    rax,QWORD PTR fs:0x28
   1616a:	jne    161dd <g_str_equal@plt+0xde25>
   1616c:	add    rsp,0x18
   16170:	pop    rbx
   16171:	pop    rbp
   16172:	pop    r12
   16174:	pop    r13
   16176:	ret    
   16177:	nop    WORD PTR [rax+rax*1+0x0]
   16180:	mov    rsi,QWORD PTR [rbx]
   16183:	test   rsi,rsi
   16186:	je     1619a <g_str_equal@plt+0xdde2>
   16188:	mov    rdx,r12
   1618b:	mov    rdi,rbp
   1618e:	call   16060 <g_str_equal@plt+0xdca8>
   16193:	cmp    QWORD PTR [rsp],0x0
   16198:	je     161d0 <g_str_equal@plt+0xde18>
   1619a:	mov    rsi,rbx
   1619d:	mov    rdi,rbp
   161a0:	call   20340 <g_str_equal@plt+0x17f88>
   161a5:	mov    rsi,QWORD PTR [rsp]
   161a9:	test   rsi,rsi
   161ac:	je     16154 <g_str_equal@plt+0xdd9c>
   161ae:	mov    rdi,rbp
   161b1:	call   20ab0 <g_str_equal@plt+0x186f8>
   161b6:	test   al,al
   161b8:	je     161c9 <g_str_equal@plt+0xde11>
   161ba:	mov    rdi,QWORD PTR [rbx]
   161bd:	call   14930 <g_str_equal@plt+0xc578>
   161c2:	mov    QWORD PTR [rbx],0x0
   161c9:	mov    rsi,QWORD PTR [rsp]
   161cd:	jmp    16154 <g_str_equal@plt+0xdd9c>
   161cf:	nop
   161d0:	mov    rsi,r12
   161d3:	mov    rdi,rbp
   161d6:	call   20290 <g_str_equal@plt+0x17ed8>
   161db:	jmp    1619a <g_str_equal@plt+0xdde2>
   161dd:	call   8050 <__stack_chk_fail@plt>
   161e2:	nop    DWORD PTR [rax+0x0]
   161e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   161f0:	push   r13
   161f2:	push   r12
   161f4:	mov    r13,rdx
   161f7:	push   rbp
   161f8:	push   rbx
   161f9:	mov    rdx,rsi
   161fc:	mov    rbx,rsi
   161ff:	lea    rsi,[rip+0x16be9]        # 2cdef <_fini@@Base+0x3b6b>
   16206:	mov    rbp,rdi
   16209:	sub    rsp,0x18
   1620d:	mov    r12,rsp
   16210:	mov    QWORD PTR [rsp],0x0
   16218:	mov    rcx,r12
   1621b:	mov    rax,QWORD PTR fs:0x28
   16224:	mov    QWORD PTR [rsp+0x8],rax
   16229:	xor    eax,eax
   1622b:	call   16110 <g_str_equal@plt+0xdd58>
   16230:	mov    rsi,QWORD PTR [rsp]
   16234:	test   rsi,rsi
   16237:	je     16260 <g_str_equal@plt+0xdea8>
   16239:	mov    rdi,r13
   1623c:	call   df30 <g_str_equal@plt+0x5b78>
   16241:	mov    rax,QWORD PTR [rsp+0x8]
   16246:	xor    rax,QWORD PTR fs:0x28
   1624f:	jne    1627c <g_str_equal@plt+0xdec4>
   16251:	add    rsp,0x18
   16255:	pop    rbx
   16256:	pop    rbp
   16257:	pop    r12
   16259:	pop    r13
   1625b:	ret    
   1625c:	nop    DWORD PTR [rax+0x0]
   16260:	lea    rsi,[rip+0x16b8d]        # 2cdf4 <_fini@@Base+0x3b70>
   16267:	lea    rdx,[rbx+0x8]
   1626b:	mov    rcx,r12
   1626e:	mov    rdi,rbp
   16271:	call   21550 <g_str_equal@plt+0x19198>
   16276:	mov    rsi,QWORD PTR [rsp]
   1627a:	jmp    16239 <g_str_equal@plt+0xde81>
   1627c:	call   8050 <__stack_chk_fail@plt>
   16281:	nop    DWORD PTR [rax+rax*1+0x0]
   16286:	nop    WORD PTR cs:[rax+rax*1+0x0]
   16290:	push   r13
   16292:	push   r12
   16294:	mov    r13,rcx
   16297:	push   rbp
   16298:	push   rbx
   16299:	mov    ecx,0x10
   1629e:	mov    rbp,rdi
   162a1:	mov    rbx,rdx
   162a4:	sub    rsp,0x18
   162a8:	mov    r12,rsp
   162ab:	mov    QWORD PTR [rsp],0x0
   162b3:	mov    r8,r12
   162b6:	mov    rax,QWORD PTR fs:0x28
   162bf:	mov    QWORD PTR [rsp+0x8],rax
   162c4:	xor    eax,eax
   162c6:	call   200e0 <g_str_equal@plt+0x17d28>
   162cb:	mov    rsi,QWORD PTR [rsp]
   162cf:	test   rsi,rsi
   162d2:	je     16300 <g_str_equal@plt+0xdf48>
   162d4:	mov    rdi,r13
   162d7:	call   df30 <g_str_equal@plt+0x5b78>
   162dc:	mov    rax,QWORD PTR [rsp+0x8]
   162e1:	xor    rax,QWORD PTR fs:0x28
   162ea:	jne    1635d <g_str_equal@plt+0xdfa5>
   162ec:	add    rsp,0x18
   162f0:	pop    rbx
   162f1:	pop    rbp
   162f2:	pop    r12
   162f4:	pop    r13
   162f6:	ret    
   162f7:	nop    WORD PTR [rax+rax*1+0x0]
   16300:	mov    rsi,QWORD PTR [rbx]
   16303:	test   rsi,rsi
   16306:	je     1631a <g_str_equal@plt+0xdf62>
   16308:	mov    rdx,r12
   1630b:	mov    rdi,rbp
   1630e:	call   161f0 <g_str_equal@plt+0xde38>
   16313:	cmp    QWORD PTR [rsp],0x0
   16318:	je     16350 <g_str_equal@plt+0xdf98>
   1631a:	mov    rsi,rbx
   1631d:	mov    rdi,rbp
   16320:	call   20340 <g_str_equal@plt+0x17f88>
   16325:	mov    rsi,QWORD PTR [rsp]
   16329:	test   rsi,rsi
   1632c:	je     162d4 <g_str_equal@plt+0xdf1c>
   1632e:	mov    rdi,rbp
   16331:	call   20ab0 <g_str_equal@plt+0x186f8>
   16336:	test   al,al
   16338:	je     16349 <g_str_equal@plt+0xdf91>
   1633a:	mov    rdi,QWORD PTR [rbx]
   1633d:	call   14970 <g_str_equal@plt+0xc5b8>
   16342:	mov    QWORD PTR [rbx],0x0
   16349:	mov    rsi,QWORD PTR [rsp]
   1634d:	jmp    162d4 <g_str_equal@plt+0xdf1c>
   1634f:	nop
   16350:	mov    rsi,r12
   16353:	mov    rdi,rbp
   16356:	call   20290 <g_str_equal@plt+0x17ed8>
   1635b:	jmp    1631a <g_str_equal@plt+0xdf62>
   1635d:	call   8050 <__stack_chk_fail@plt>
   16362:	nop    DWORD PTR [rax+0x0]
   16366:	nop    WORD PTR cs:[rax+rax*1+0x0]
   16370:	push   rbx
   16371:	mov    rbx,rdx
   16374:	mov    rdx,rsi
   16377:	lea    rsi,[rip+0x18037]        # 2e3b5 <_fini@@Base+0x5131>
   1637e:	sub    rsp,0x10
   16382:	mov    rcx,rsp
   16385:	mov    QWORD PTR [rsp],0x0
   1638d:	mov    rax,QWORD PTR fs:0x28
   16396:	mov    QWORD PTR [rsp+0x8],rax
   1639b:	xor    eax,eax
   1639d:	call   21550 <g_str_equal@plt+0x19198>
   163a2:	mov    rsi,QWORD PTR [rsp]
   163a6:	mov    rdi,rbx
   163a9:	call   df30 <g_str_equal@plt+0x5b78>
   163ae:	mov    rax,QWORD PTR [rsp+0x8]
   163b3:	xor    rax,QWORD PTR fs:0x28
   163bc:	jne    163c4 <g_str_equal@plt+0xe00c>
   163be:	add    rsp,0x10
   163c2:	pop    rbx
   163c3:	ret    
   163c4:	call   8050 <__stack_chk_fail@plt>
   163c9:	nop    DWORD PTR [rax+0x0]
   163d0:	push   r13
   163d2:	push   r12
   163d4:	mov    r13,rcx
   163d7:	push   rbp
   163d8:	push   rbx
   163d9:	mov    ecx,0x8
   163de:	mov    rbp,rdi
   163e1:	mov    rbx,rdx
   163e4:	sub    rsp,0x18
   163e8:	mov    r12,rsp
   163eb:	mov    QWORD PTR [rsp],0x0
   163f3:	mov    r8,r12
   163f6:	mov    rax,QWORD PTR fs:0x28
   163ff:	mov    QWORD PTR [rsp+0x8],rax
   16404:	xor    eax,eax
   16406:	call   200e0 <g_str_equal@plt+0x17d28>
   1640b:	mov    rsi,QWORD PTR [rsp]
   1640f:	test   rsi,rsi
   16412:	je     16440 <g_str_equal@plt+0xe088>
   16414:	mov    rdi,r13
   16417:	call   df30 <g_str_equal@plt+0x5b78>
   1641c:	mov    rax,QWORD PTR [rsp+0x8]
   16421:	xor    rax,QWORD PTR fs:0x28
   1642a:	jne    1649d <g_str_equal@plt+0xe0e5>
   1642c:	add    rsp,0x18
   16430:	pop    rbx
   16431:	pop    rbp
   16432:	pop    r12
   16434:	pop    r13
   16436:	ret    
   16437:	nop    WORD PTR [rax+rax*1+0x0]
   16440:	mov    rsi,QWORD PTR [rbx]
   16443:	test   rsi,rsi
   16446:	je     1645a <g_str_equal@plt+0xe0a2>
   16448:	mov    rdx,r12
   1644b:	mov    rdi,rbp
   1644e:	call   16370 <g_str_equal@plt+0xdfb8>
   16453:	cmp    QWORD PTR [rsp],0x0
   16458:	je     16490 <g_str_equal@plt+0xe0d8>
   1645a:	mov    rsi,rbx
   1645d:	mov    rdi,rbp
   16460:	call   20340 <g_str_equal@plt+0x17f88>
   16465:	mov    rsi,QWORD PTR [rsp]
   16469:	test   rsi,rsi
   1646c:	je     16414 <g_str_equal@plt+0xe05c>
   1646e:	mov    rdi,rbp
   16471:	call   20ab0 <g_str_equal@plt+0x186f8>
   16476:	test   al,al
   16478:	je     16489 <g_str_equal@plt+0xe0d1>
   1647a:	mov    rdi,QWORD PTR [rbx]
   1647d:	call   149b0 <g_str_equal@plt+0xc5f8>
   16482:	mov    QWORD PTR [rbx],0x0
   16489:	mov    rsi,QWORD PTR [rsp]
   1648d:	jmp    16414 <g_str_equal@plt+0xe05c>
   1648f:	nop
   16490:	mov    rsi,r12
   16493:	mov    rdi,rbp
   16496:	call   20290 <g_str_equal@plt+0x17ed8>
   1649b:	jmp    1645a <g_str_equal@plt+0xe0a2>
   1649d:	call   8050 <__stack_chk_fail@plt>
   164a2:	nop    DWORD PTR [rax+0x0]
   164a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   164b0:	push   r14
   164b2:	push   r13
   164b4:	mov    r14,rcx
   164b7:	push   r12
   164b9:	push   rbp
   164ba:	mov    ecx,0x10
   164bf:	push   rbx
   164c0:	mov    rbp,rdi
   164c3:	mov    r13,rdx
   164c6:	sub    rsp,0x10
   164ca:	mov    r12,rsp
   164cd:	mov    QWORD PTR [rsp],0x0
   164d5:	mov    r8,r12
   164d8:	mov    rax,QWORD PTR fs:0x28
   164e1:	mov    QWORD PTR [rsp+0x8],rax
   164e6:	xor    eax,eax
   164e8:	call   203e0 <g_str_equal@plt+0x18028>
   164ed:	mov    rsi,QWORD PTR [rsp]
   164f1:	test   rsi,rsi
   164f4:	je     16520 <g_str_equal@plt+0xe168>
   164f6:	mov    rdi,r14
   164f9:	call   df30 <g_str_equal@plt+0x5b78>
   164fe:	mov    rax,QWORD PTR [rsp+0x8]
   16503:	xor    rax,QWORD PTR fs:0x28
   1650c:	jne    165b4 <g_str_equal@plt+0xe1fc>
   16512:	add    rsp,0x10
   16516:	pop    rbx
   16517:	pop    rbp
   16518:	pop    r12
   1651a:	pop    r13
   1651c:	pop    r14
   1651e:	ret    
   1651f:	nop
   16520:	mov    rbx,QWORD PTR [r13+0x0]
   16524:	test   rbx,rbx
   16527:	jne    16548 <g_str_equal@plt+0xe190>
   16529:	jmp    165a7 <g_str_equal@plt+0xe1ef>
   1652b:	nop    DWORD PTR [rax+rax*1+0x0]
   16530:	mov    rsi,rbx
   16533:	mov    edx,0x10
   16538:	mov    rdi,rbp
   1653b:	call   20530 <g_str_equal@plt+0x18178>
   16540:	test   rax,rax
   16543:	mov    rbx,rax
   16546:	je     165a0 <g_str_equal@plt+0xe1e8>
   16548:	lea    rdx,[rbx+0x8]
   1654c:	xor    esi,esi
   1654e:	mov    rcx,r12
   16551:	mov    rdi,rbp
   16554:	call   163d0 <g_str_equal@plt+0xe018>
   16559:	cmp    QWORD PTR [rsp],0x0
   1655e:	je     16530 <g_str_equal@plt+0xe178>
   16560:	mov    rsi,r13
   16563:	mov    rdi,rbp
   16566:	call   206d0 <g_str_equal@plt+0x18318>
   1656b:	mov    rsi,QWORD PTR [rsp]
   1656f:	test   rsi,rsi
   16572:	je     164f6 <g_str_equal@plt+0xe13e>
   16574:	mov    rdi,rbp
   16577:	call   20ab0 <g_str_equal@plt+0x186f8>
   1657c:	test   al,al
   1657e:	je     16591 <g_str_equal@plt+0xe1d9>
   16580:	mov    rdi,QWORD PTR [r13+0x0]
   16584:	call   149f0 <g_str_equal@plt+0xc638>
   16589:	mov    QWORD PTR [r13+0x0],0x0
   16591:	mov    rsi,QWORD PTR [rsp]
   16595:	jmp    164f6 <g_str_equal@plt+0xe13e>
   1659a:	nop    WORD PTR [rax+rax*1+0x0]
   165a0:	cmp    QWORD PTR [rsp],0x0
   165a5:	jne    16560 <g_str_equal@plt+0xe1a8>
   165a7:	mov    rsi,r12
   165aa:	mov    rdi,rbp
   165ad:	call   20620 <g_str_equal@plt+0x18268>
   165b2:	jmp    16560 <g_str_equal@plt+0xe1a8>
   165b4:	call   8050 <__stack_chk_fail@plt>
   165b9:	nop    DWORD PTR [rax+0x0]
   165c0:	push   rbx
   165c1:	mov    r8,rcx
   165c4:	mov    rbx,rdx
   165c7:	lea    rcx,[rip+0x226e32]        # 23d400 <_fini@@Base+0x21417c>
   165ce:	sub    rsp,0x10
   165d2:	mov    rax,QWORD PTR fs:0x28
   165db:	mov    QWORD PTR [rsp+0x8],rax
   165e0:	xor    eax,eax
   165e2:	mov    eax,DWORD PTR [rdx]
   165e4:	lea    rdx,[rsp+0x4]
   165e9:	mov    DWORD PTR [rsp+0x4],eax
   165ed:	call   219e0 <g_str_equal@plt+0x19628>
   165f2:	mov    eax,DWORD PTR [rsp+0x4]
   165f6:	mov    DWORD PTR [rbx],eax
   165f8:	mov    rax,QWORD PTR [rsp+0x8]
   165fd:	xor    rax,QWORD PTR fs:0x28
   16606:	jne    1660e <g_str_equal@plt+0xe256>
   16608:	add    rsp,0x10
   1660c:	pop    rbx
   1660d:	ret    
   1660e:	call   8050 <__stack_chk_fail@plt>
   16613:	nop    DWORD PTR [rax]
   16616:	nop    WORD PTR cs:[rax+rax*1+0x0]
   16620:	push   r13
   16622:	push   r12
   16624:	mov    r13,rdx
   16627:	push   rbp
   16628:	push   rbx
   16629:	mov    rdx,rsi
   1662c:	mov    rbx,rsi
   1662f:	lea    rsi,[rip+0x167c6]        # 2cdfc <_fini@@Base+0x3b78>
   16636:	mov    rbp,rdi
   16639:	sub    rsp,0x18
   1663d:	mov    r12,rsp
   16640:	mov    QWORD PTR [rsp],0x0
   16648:	mov    rcx,r12
   1664b:	mov    rax,QWORD PTR fs:0x28
   16654:	mov    QWORD PTR [rsp+0x8],rax
   16659:	xor    eax,eax
   1665b:	call   21550 <g_str_equal@plt+0x19198>
   16660:	mov    rsi,QWORD PTR [rsp]
   16664:	test   rsi,rsi
   16667:	je     16690 <g_str_equal@plt+0xe2d8>
   16669:	mov    rdi,r13
   1666c:	call   df30 <g_str_equal@plt+0x5b78>
   16671:	mov    rax,QWORD PTR [rsp+0x8]
   16676:	xor    rax,QWORD PTR fs:0x28
   1667f:	jne    1671b <g_str_equal@plt+0xe363>
   16685:	add    rsp,0x18
   16689:	pop    rbx
   1668a:	pop    rbp
   1668b:	pop    r12
   1668d:	pop    r13
   1668f:	ret    
   16690:	lea    rsi,[rip+0x1676e]        # 2ce05 <_fini@@Base+0x3b81>
   16697:	lea    rdx,[rbx+0x8]
   1669b:	mov    rcx,r12
   1669e:	mov    rdi,rbp
   166a1:	call   21550 <g_str_equal@plt+0x19198>
   166a6:	mov    rsi,QWORD PTR [rsp]
   166aa:	test   rsi,rsi
   166ad:	jne    16669 <g_str_equal@plt+0xe2b1>
   166af:	lea    rdx,[rbx+0x10]
   166b3:	lea    rsi,[rip+0x16752]        # 2ce0c <_fini@@Base+0x3b88>
   166ba:	mov    rdi,rbp
   166bd:	call   209e0 <g_str_equal@plt+0x18628>
   166c2:	test   al,al
   166c4:	je     166e5 <g_str_equal@plt+0xe32d>
   166c6:	lea    rsi,[rip+0x1673f]        # 2ce0c <_fini@@Base+0x3b88>
   166cd:	lea    rdx,[rbx+0x11]
   166d1:	mov    rcx,r12
   166d4:	mov    rdi,rbp
   166d7:	call   21460 <g_str_equal@plt+0x190a8>
   166dc:	mov    rsi,QWORD PTR [rsp]
   166e0:	test   rsi,rsi
   166e3:	jne    16669 <g_str_equal@plt+0xe2b1>
   166e5:	lea    rdx,[rbx+0x12]
   166e9:	lea    rsi,[rip+0x16725]        # 2ce15 <_fini@@Base+0x3b91>
   166f0:	mov    rdi,rbp
   166f3:	call   209e0 <g_str_equal@plt+0x18628>
   166f8:	test   al,al
   166fa:	je     16712 <g_str_equal@plt+0xe35a>
   166fc:	lea    rdx,[rbx+0x13]
   16700:	lea    rsi,[rip+0x1670e]        # 2ce15 <_fini@@Base+0x3b91>
   16707:	mov    rcx,r12
   1670a:	mov    rdi,rbp
   1670d:	call   21460 <g_str_equal@plt+0x190a8>
   16712:	mov    rsi,QWORD PTR [rsp]
   16716:	jmp    16669 <g_str_equal@plt+0xe2b1>
   1671b:	call   8050 <__stack_chk_fail@plt>
   16720:	push   r12
   16722:	push   rbp
   16723:	mov    r12,rdx
   16726:	push   rbx
   16727:	mov    rdx,rsi
   1672a:	mov    rbx,rsi
   1672d:	lea    rsi,[rip+0x17c81]        # 2e3b5 <_fini@@Base+0x5131>
   16734:	mov    rbp,rdi
   16737:	sub    rsp,0x10
   1673b:	mov    rax,QWORD PTR fs:0x28
   16744:	mov    QWORD PTR [rsp+0x8],rax
   16749:	xor    eax,eax
   1674b:	mov    QWORD PTR [rsp],0x0
   16753:	call   209e0 <g_str_equal@plt+0x18628>
   16758:	test   al,al
   1675a:	je     16772 <g_str_equal@plt+0xe3ba>
   1675c:	lea    rdx,[rbx+0x8]
   16760:	lea    rsi,[rip+0x17c4e]        # 2e3b5 <_fini@@Base+0x5131>
   16767:	mov    rcx,rsp
   1676a:	mov    rdi,rbp
   1676d:	call   21550 <g_str_equal@plt+0x19198>
   16772:	mov    rsi,QWORD PTR [rsp]
   16776:	mov    rdi,r12
   16779:	call   df30 <g_str_equal@plt+0x5b78>
   1677e:	mov    rax,QWORD PTR [rsp+0x8]
   16783:	xor    rax,QWORD PTR fs:0x28
   1678c:	jne    16797 <g_str_equal@plt+0xe3df>
   1678e:	add    rsp,0x10
   16792:	pop    rbx
   16793:	pop    rbp
   16794:	pop    r12
   16796:	ret    
   16797:	call   8050 <__stack_chk_fail@plt>
   1679c:	nop    DWORD PTR [rax+0x0]
   167a0:	push   r13
   167a2:	push   r12
   167a4:	mov    r13,rcx
   167a7:	push   rbp
   167a8:	push   rbx
   167a9:	mov    ecx,0x10
   167ae:	mov    rbp,rdi
   167b1:	mov    rbx,rdx
   167b4:	sub    rsp,0x18
   167b8:	mov    r12,rsp
   167bb:	mov    QWORD PTR [rsp],0x0
   167c3:	mov    r8,r12
   167c6:	mov    rax,QWORD PTR fs:0x28
   167cf:	mov    QWORD PTR [rsp+0x8],rax
   167d4:	xor    eax,eax
   167d6:	call   200e0 <g_str_equal@plt+0x17d28>
   167db:	mov    rsi,QWORD PTR [rsp]
   167df:	test   rsi,rsi
   167e2:	je     16810 <g_str_equal@plt+0xe458>
   167e4:	mov    rdi,r13
   167e7:	call   df30 <g_str_equal@plt+0x5b78>
   167ec:	mov    rax,QWORD PTR [rsp+0x8]
   167f1:	xor    rax,QWORD PTR fs:0x28
   167fa:	jne    1686d <g_str_equal@plt+0xe4b5>
   167fc:	add    rsp,0x18
   16800:	pop    rbx
   16801:	pop    rbp
   16802:	pop    r12
   16804:	pop    r13
   16806:	ret    
   16807:	nop    WORD PTR [rax+rax*1+0x0]
   16810:	mov    rsi,QWORD PTR [rbx]
   16813:	test   rsi,rsi
   16816:	je     1682a <g_str_equal@plt+0xe472>
   16818:	mov    rdx,r12
   1681b:	mov    rdi,rbp
   1681e:	call   16720 <g_str_equal@plt+0xe368>
   16823:	cmp    QWORD PTR [rsp],0x0
   16828:	je     16860 <g_str_equal@plt+0xe4a8>
   1682a:	mov    rsi,rbx
   1682d:	mov    rdi,rbp
   16830:	call   20340 <g_str_equal@plt+0x17f88>
   16835:	mov    rsi,QWORD PTR [rsp]
   16839:	test   rsi,rsi
   1683c:	je     167e4 <g_str_equal@plt+0xe42c>
   1683e:	mov    rdi,rbp
   16841:	call   20ab0 <g_str_equal@plt+0x186f8>
   16846:	test   al,al
   16848:	je     16859 <g_str_equal@plt+0xe4a1>
   1684a:	mov    rdi,QWORD PTR [rbx]
   1684d:	call   14a30 <g_str_equal@plt+0xc678>
   16852:	mov    QWORD PTR [rbx],0x0
   16859:	mov    rsi,QWORD PTR [rsp]
   1685d:	jmp    167e4 <g_str_equal@plt+0xe42c>
   1685f:	nop
   16860:	mov    rsi,r12
   16863:	mov    rdi,rbp
   16866:	call   20290 <g_str_equal@plt+0x17ed8>
   1686b:	jmp    1682a <g_str_equal@plt+0xe472>
   1686d:	call   8050 <__stack_chk_fail@plt>
   16872:	nop    DWORD PTR [rax+0x0]
   16876:	nop    WORD PTR cs:[rax+rax*1+0x0]
   16880:	push   r13
   16882:	push   r12
   16884:	mov    r13,rdx
   16887:	push   rbp
   16888:	push   rbx
   16889:	mov    rdx,rsi
   1688c:	mov    rbx,rsi
   1688f:	lea    rsi,[rip+0x132e3]        # 29b79 <_fini@@Base+0x8f5>
   16896:	mov    rbp,rdi
   16899:	sub    rsp,0x18
   1689d:	mov    r12,rsp
   168a0:	mov    QWORD PTR [rsp],0x0
   168a8:	mov    rcx,r12
   168ab:	mov    rax,QWORD PTR fs:0x28
   168b4:	mov    QWORD PTR [rsp+0x8],rax
   168b9:	xor    eax,eax
   168bb:	call   21460 <g_str_equal@plt+0x190a8>
   168c0:	mov    rsi,QWORD PTR [rsp]
   168c4:	test   rsi,rsi
   168c7:	je     168f0 <g_str_equal@plt+0xe538>
   168c9:	mov    rdi,r13
   168cc:	call   df30 <g_str_equal@plt+0x5b78>
   168d1:	mov    rax,QWORD PTR [rsp+0x8]
   168d6:	xor    rax,QWORD PTR fs:0x28
   168df:	jne    1690c <g_str_equal@plt+0xe554>
   168e1:	add    rsp,0x18
   168e5:	pop    rbx
   168e6:	pop    rbp
   168e7:	pop    r12
   168e9:	pop    r13
   168eb:	ret    
   168ec:	nop    DWORD PTR [rax+0x0]
   168f0:	lea    rsi,[rip+0x16522]        # 2ce19 <_fini@@Base+0x3b95>
   168f7:	lea    rdx,[rbx+0x1]
   168fb:	mov    rcx,r12
   168fe:	mov    rdi,rbp
   16901:	call   21460 <g_str_equal@plt+0x190a8>
   16906:	mov    rsi,QWORD PTR [rsp]
   1690a:	jmp    168c9 <g_str_equal@plt+0xe511>
   1690c:	call   8050 <__stack_chk_fail@plt>
   16911:	nop    DWORD PTR [rax+rax*1+0x0]
   16916:	nop    WORD PTR cs:[rax+rax*1+0x0]
   16920:	push   r13
   16922:	push   r12
   16924:	mov    r13,rcx
   16927:	push   rbp
   16928:	push   rbx
   16929:	mov    ecx,0x2
   1692e:	mov    rbp,rdi
   16931:	mov    rbx,rdx
   16934:	sub    rsp,0x18
   16938:	mov    r12,rsp
   1693b:	mov    QWORD PTR [rsp],0x0
   16943:	mov    r8,r12
   16946:	mov    rax,QWORD PTR fs:0x28
   1694f:	mov    QWORD PTR [rsp+0x8],rax
   16954:	xor    eax,eax
   16956:	call   200e0 <g_str_equal@plt+0x17d28>
   1695b:	mov    rsi,QWORD PTR [rsp]
   1695f:	test   rsi,rsi
   16962:	je     16990 <g_str_equal@plt+0xe5d8>
   16964:	mov    rdi,r13
   16967:	call   df30 <g_str_equal@plt+0x5b78>
   1696c:	mov    rax,QWORD PTR [rsp+0x8]
   16971:	xor    rax,QWORD PTR fs:0x28
   1697a:	jne    169ed <g_str_equal@plt+0xe635>
   1697c:	add    rsp,0x18
   16980:	pop    rbx
   16981:	pop    rbp
   16982:	pop    r12
   16984:	pop    r13
   16986:	ret    
   16987:	nop    WORD PTR [rax+rax*1+0x0]
   16990:	mov    rsi,QWORD PTR [rbx]
   16993:	test   rsi,rsi
   16996:	je     169aa <g_str_equal@plt+0xe5f2>
   16998:	mov    rdx,r12
   1699b:	mov    rdi,rbp
   1699e:	call   16880 <g_str_equal@plt+0xe4c8>
   169a3:	cmp    QWORD PTR [rsp],0x0
   169a8:	je     169e0 <g_str_equal@plt+0xe628>
   169aa:	mov    rsi,rbx
   169ad:	mov    rdi,rbp
   169b0:	call   20340 <g_str_equal@plt+0x17f88>
   169b5:	mov    rsi,QWORD PTR [rsp]
   169b9:	test   rsi,rsi
   169bc:	je     16964 <g_str_equal@plt+0xe5ac>
   169be:	mov    rdi,rbp
   169c1:	call   20ab0 <g_str_equal@plt+0x186f8>
   169c6:	test   al,al
   169c8:	je     169d9 <g_str_equal@plt+0xe621>
   169ca:	mov    rdi,QWORD PTR [rbx]
   169cd:	call   14a70 <g_str_equal@plt+0xc6b8>
   169d2:	mov    QWORD PTR [rbx],0x0
   169d9:	mov    rsi,QWORD PTR [rsp]
   169dd:	jmp    16964 <g_str_equal@plt+0xe5ac>
   169df:	nop
   169e0:	mov    rsi,r12
   169e3:	mov    rdi,rbp
   169e6:	call   20290 <g_str_equal@plt+0x17ed8>
   169eb:	jmp    169aa <g_str_equal@plt+0xe5f2>
   169ed:	call   8050 <__stack_chk_fail@plt>
   169f2:	nop    DWORD PTR [rax+0x0]
   169f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   16a00:	push   rbx
   16a01:	mov    rbx,rdx
   16a04:	mov    rdx,rsi
   16a07:	lea    rsi,[rip+0x16413]        # 2ce21 <_fini@@Base+0x3b9d>
   16a0e:	sub    rsp,0x10
   16a12:	mov    rcx,rsp
   16a15:	mov    QWORD PTR [rsp],0x0
   16a1d:	mov    rax,QWORD PTR fs:0x28
   16a26:	mov    QWORD PTR [rsp+0x8],rax
   16a2b:	xor    eax,eax
   16a2d:	call   21550 <g_str_equal@plt+0x19198>
   16a32:	mov    rsi,QWORD PTR [rsp]
   16a36:	mov    rdi,rbx
   16a39:	call   df30 <g_str_equal@plt+0x5b78>
   16a3e:	mov    rax,QWORD PTR [rsp+0x8]
   16a43:	xor    rax,QWORD PTR fs:0x28
   16a4c:	jne    16a54 <g_str_equal@plt+0xe69c>
   16a4e:	add    rsp,0x10
   16a52:	pop    rbx
   16a53:	ret    
   16a54:	call   8050 <__stack_chk_fail@plt>
   16a59:	nop    DWORD PTR [rax+0x0]
   16a60:	push   r13
   16a62:	push   r12
   16a64:	mov    r13,rcx
   16a67:	push   rbp
   16a68:	push   rbx
   16a69:	mov    ecx,0x8
   16a6e:	mov    rbp,rdi
   16a71:	mov    rbx,rdx
   16a74:	sub    rsp,0x18
   16a78:	mov    r12,rsp
   16a7b:	mov    QWORD PTR [rsp],0x0
   16a83:	mov    r8,r12
   16a86:	mov    rax,QWORD PTR fs:0x28
   16a8f:	mov    QWORD PTR [rsp+0x8],rax
   16a94:	xor    eax,eax
   16a96:	call   200e0 <g_str_equal@plt+0x17d28>
   16a9b:	mov    rsi,QWORD PTR [rsp]
   16a9f:	test   rsi,rsi
   16aa2:	je     16ad0 <g_str_equal@plt+0xe718>
   16aa4:	mov    rdi,r13
   16aa7:	call   df30 <g_str_equal@plt+0x5b78>
   16aac:	mov    rax,QWORD PTR [rsp+0x8]
   16ab1:	xor    rax,QWORD PTR fs:0x28
   16aba:	jne    16b2d <g_str_equal@plt+0xe775>
   16abc:	add    rsp,0x18
   16ac0:	pop    rbx
   16ac1:	pop    rbp
   16ac2:	pop    r12
   16ac4:	pop    r13
   16ac6:	ret    
   16ac7:	nop    WORD PTR [rax+rax*1+0x0]
   16ad0:	mov    rsi,QWORD PTR [rbx]
   16ad3:	test   rsi,rsi
   16ad6:	je     16aea <g_str_equal@plt+0xe732>
   16ad8:	mov    rdx,r12
   16adb:	mov    rdi,rbp
   16ade:	call   16a00 <g_str_equal@plt+0xe648>
   16ae3:	cmp    QWORD PTR [rsp],0x0
   16ae8:	je     16b20 <g_str_equal@plt+0xe768>
   16aea:	mov    rsi,rbx
   16aed:	mov    rdi,rbp
   16af0:	call   20340 <g_str_equal@plt+0x17f88>
   16af5:	mov    rsi,QWORD PTR [rsp]
   16af9:	test   rsi,rsi
   16afc:	je     16aa4 <g_str_equal@plt+0xe6ec>
   16afe:	mov    rdi,rbp
   16b01:	call   20ab0 <g_str_equal@plt+0x186f8>
   16b06:	test   al,al
   16b08:	je     16b19 <g_str_equal@plt+0xe761>
   16b0a:	mov    rdi,QWORD PTR [rbx]
   16b0d:	call   14ab0 <g_str_equal@plt+0xc6f8>
   16b12:	mov    QWORD PTR [rbx],0x0
   16b19:	mov    rsi,QWORD PTR [rsp]
   16b1d:	jmp    16aa4 <g_str_equal@plt+0xe6ec>
   16b1f:	nop
   16b20:	mov    rsi,r12
   16b23:	mov    rdi,rbp
   16b26:	call   20290 <g_str_equal@plt+0x17ed8>
   16b2b:	jmp    16aea <g_str_equal@plt+0xe732>
   16b2d:	call   8050 <__stack_chk_fail@plt>
   16b32:	nop    DWORD PTR [rax+0x0]
   16b36:	nop    WORD PTR cs:[rax+rax*1+0x0]
   16b40:	push   rbx
   16b41:	mov    rbx,rdx
   16b44:	mov    rdx,rsi
   16b47:	lea    rsi,[rip+0x17867]        # 2e3b5 <_fini@@Base+0x5131>
   16b4e:	sub    rsp,0x10
   16b52:	mov    rcx,rsp
   16b55:	mov    QWORD PTR [rsp],0x0
   16b5d:	mov    rax,QWORD PTR fs:0x28
   16b66:	mov    QWORD PTR [rsp+0x8],rax
   16b6b:	xor    eax,eax
   16b6d:	call   21550 <g_str_equal@plt+0x19198>
   16b72:	mov    rsi,QWORD PTR [rsp]
   16b76:	mov    rdi,rbx
   16b79:	call   df30 <g_str_equal@plt+0x5b78>
   16b7e:	mov    rax,QWORD PTR [rsp+0x8]
   16b83:	xor    rax,QWORD PTR fs:0x28
   16b8c:	jne    16b94 <g_str_equal@plt+0xe7dc>
   16b8e:	add    rsp,0x10
   16b92:	pop    rbx
   16b93:	ret    
   16b94:	call   8050 <__stack_chk_fail@plt>
   16b99:	nop    DWORD PTR [rax+0x0]
   16ba0:	push   r13
   16ba2:	push   r12
   16ba4:	mov    r13,rcx
   16ba7:	push   rbp
   16ba8:	push   rbx
   16ba9:	mov    ecx,0x8
   16bae:	mov    rbp,rdi
   16bb1:	mov    rbx,rdx
   16bb4:	sub    rsp,0x18
   16bb8:	mov    r12,rsp
   16bbb:	mov    QWORD PTR [rsp],0x0
   16bc3:	mov    r8,r12
   16bc6:	mov    rax,QWORD PTR fs:0x28
   16bcf:	mov    QWORD PTR [rsp+0x8],rax
   16bd4:	xor    eax,eax
   16bd6:	call   200e0 <g_str_equal@plt+0x17d28>
   16bdb:	mov    rsi,QWORD PTR [rsp]
   16bdf:	test   rsi,rsi
   16be2:	je     16c10 <g_str_equal@plt+0xe858>
   16be4:	mov    rdi,r13
   16be7:	call   df30 <g_str_equal@plt+0x5b78>
   16bec:	mov    rax,QWORD PTR [rsp+0x8]
   16bf1:	xor    rax,QWORD PTR fs:0x28
   16bfa:	jne    16c6d <g_str_equal@plt+0xe8b5>
   16bfc:	add    rsp,0x18
   16c00:	pop    rbx
   16c01:	pop    rbp
   16c02:	pop    r12
   16c04:	pop    r13
   16c06:	ret    
   16c07:	nop    WORD PTR [rax+rax*1+0x0]
   16c10:	mov    rsi,QWORD PTR [rbx]
   16c13:	test   rsi,rsi
   16c16:	je     16c2a <g_str_equal@plt+0xe872>
   16c18:	mov    rdx,r12
   16c1b:	mov    rdi,rbp
   16c1e:	call   16b40 <g_str_equal@plt+0xe788>
   16c23:	cmp    QWORD PTR [rsp],0x0
   16c28:	je     16c60 <g_str_equal@plt+0xe8a8>
   16c2a:	mov    rsi,rbx
   16c2d:	mov    rdi,rbp
   16c30:	call   20340 <g_str_equal@plt+0x17f88>
   16c35:	mov    rsi,QWORD PTR [rsp]
   16c39:	test   rsi,rsi
   16c3c:	je     16be4 <g_str_equal@plt+0xe82c>
   16c3e:	mov    rdi,rbp
   16c41:	call   20ab0 <g_str_equal@plt+0x186f8>
   16c46:	test   al,al
   16c48:	je     16c59 <g_str_equal@plt+0xe8a1>
   16c4a:	mov    rdi,QWORD PTR [rbx]
   16c4d:	call   14af0 <g_str_equal@plt+0xc738>
   16c52:	mov    QWORD PTR [rbx],0x0
   16c59:	mov    rsi,QWORD PTR [rsp]
   16c5d:	jmp    16be4 <g_str_equal@plt+0xe82c>
   16c5f:	nop
   16c60:	mov    rsi,r12
   16c63:	mov    rdi,rbp
   16c66:	call   20290 <g_str_equal@plt+0x17ed8>
   16c6b:	jmp    16c2a <g_str_equal@plt+0xe872>
   16c6d:	call   8050 <__stack_chk_fail@plt>
   16c72:	nop    DWORD PTR [rax+0x0]
   16c76:	nop    WORD PTR cs:[rax+rax*1+0x0]
   16c80:	push   r14
   16c82:	push   r13
   16c84:	mov    r14,rcx
   16c87:	push   r12
   16c89:	push   rbp
   16c8a:	mov    ecx,0x10
   16c8f:	push   rbx
   16c90:	mov    rbp,rdi
   16c93:	mov    r13,rdx
   16c96:	sub    rsp,0x10
   16c9a:	mov    r12,rsp
   16c9d:	mov    QWORD PTR [rsp],0x0
   16ca5:	mov    r8,r12
   16ca8:	mov    rax,QWORD PTR fs:0x28
   16cb1:	mov    QWORD PTR [rsp+0x8],rax
   16cb6:	xor    eax,eax
   16cb8:	call   203e0 <g_str_equal@plt+0x18028>
   16cbd:	mov    rsi,QWORD PTR [rsp]
   16cc1:	test   rsi,rsi
   16cc4:	je     16cf0 <g_str_equal@plt+0xe938>
   16cc6:	mov    rdi,r14
   16cc9:	call   df30 <g_str_equal@plt+0x5b78>
   16cce:	mov    rax,QWORD PTR [rsp+0x8]
   16cd3:	xor    rax,QWORD PTR fs:0x28
   16cdc:	jne    16d84 <g_str_equal@plt+0xe9cc>
   16ce2:	add    rsp,0x10
   16ce6:	pop    rbx
   16ce7:	pop    rbp
   16ce8:	pop    r12
   16cea:	pop    r13
   16cec:	pop    r14
   16cee:	ret    
   16cef:	nop
   16cf0:	mov    rbx,QWORD PTR [r13+0x0]
   16cf4:	test   rbx,rbx
   16cf7:	jne    16d18 <g_str_equal@plt+0xe960>
   16cf9:	jmp    16d77 <g_str_equal@plt+0xe9bf>
   16cfb:	nop    DWORD PTR [rax+rax*1+0x0]
   16d00:	mov    rsi,rbx
   16d03:	mov    edx,0x10
   16d08:	mov    rdi,rbp
   16d0b:	call   20530 <g_str_equal@plt+0x18178>
   16d10:	test   rax,rax
   16d13:	mov    rbx,rax
   16d16:	je     16d70 <g_str_equal@plt+0xe9b8>
   16d18:	lea    rdx,[rbx+0x8]
   16d1c:	xor    esi,esi
   16d1e:	mov    rcx,r12
   16d21:	mov    rdi,rbp
   16d24:	call   16ba0 <g_str_equal@plt+0xe7e8>
   16d29:	cmp    QWORD PTR [rsp],0x0
   16d2e:	je     16d00 <g_str_equal@plt+0xe948>
   16d30:	mov    rsi,r13
   16d33:	mov    rdi,rbp
   16d36:	call   206d0 <g_str_equal@plt+0x18318>
   16d3b:	mov    rsi,QWORD PTR [rsp]
   16d3f:	test   rsi,rsi
   16d42:	je     16cc6 <g_str_equal@plt+0xe90e>
   16d44:	mov    rdi,rbp
   16d47:	call   20ab0 <g_str_equal@plt+0x186f8>
   16d4c:	test   al,al
   16d4e:	je     16d61 <g_str_equal@plt+0xe9a9>
   16d50:	mov    rdi,QWORD PTR [r13+0x0]
   16d54:	call   14b30 <g_str_equal@plt+0xc778>
   16d59:	mov    QWORD PTR [r13+0x0],0x0
   16d61:	mov    rsi,QWORD PTR [rsp]
   16d65:	jmp    16cc6 <g_str_equal@plt+0xe90e>
   16d6a:	nop    WORD PTR [rax+rax*1+0x0]
   16d70:	cmp    QWORD PTR [rsp],0x0
   16d75:	jne    16d30 <g_str_equal@plt+0xe978>
   16d77:	mov    rsi,r12
   16d7a:	mov    rdi,rbp
   16d7d:	call   20620 <g_str_equal@plt+0x18268>
   16d82:	jmp    16d30 <g_str_equal@plt+0xe978>
   16d84:	call   8050 <__stack_chk_fail@plt>
   16d89:	nop    DWORD PTR [rax+0x0]
   16d90:	push   rbx
   16d91:	mov    r8,rcx
   16d94:	mov    rbx,rdx
   16d97:	lea    rcx,[rip+0x226612]        # 23d3b0 <_fini@@Base+0x21412c>
   16d9e:	sub    rsp,0x10
   16da2:	mov    rax,QWORD PTR fs:0x28
   16dab:	mov    QWORD PTR [rsp+0x8],rax
   16db0:	xor    eax,eax
   16db2:	mov    eax,DWORD PTR [rdx]
   16db4:	lea    rdx,[rsp+0x4]
   16db9:	mov    DWORD PTR [rsp+0x4],eax
   16dbd:	call   219e0 <g_str_equal@plt+0x19628>
   16dc2:	mov    eax,DWORD PTR [rsp+0x4]
   16dc6:	mov    DWORD PTR [rbx],eax
   16dc8:	mov    rax,QWORD PTR [rsp+0x8]
   16dcd:	xor    rax,QWORD PTR fs:0x28
   16dd6:	jne    16dde <g_str_equal@plt+0xea26>
   16dd8:	add    rsp,0x10
   16ddc:	pop    rbx
   16ddd:	ret    
   16dde:	call   8050 <__stack_chk_fail@plt>
   16de3:	nop    DWORD PTR [rax]
   16de6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   16df0:	push   rbx
   16df1:	mov    rbx,rdx
   16df4:	mov    rdx,rsi
   16df7:	lea    rsi,[rip+0x16029]        # 2ce27 <_fini@@Base+0x3ba3>
   16dfe:	sub    rsp,0x10
   16e02:	mov    rcx,rsp
   16e05:	mov    QWORD PTR [rsp],0x0
   16e0d:	mov    rax,QWORD PTR fs:0x28
   16e16:	mov    QWORD PTR [rsp+0x8],rax
   16e1b:	xor    eax,eax
   16e1d:	call   20ac0 <g_str_equal@plt+0x18708>
   16e22:	mov    rsi,QWORD PTR [rsp]
   16e26:	mov    rdi,rbx
   16e29:	call   df30 <g_str_equal@plt+0x5b78>
   16e2e:	mov    rax,QWORD PTR [rsp+0x8]
   16e33:	xor    rax,QWORD PTR fs:0x28
   16e3c:	jne    16e44 <g_str_equal@plt+0xea8c>
   16e3e:	add    rsp,0x10
   16e42:	pop    rbx
   16e43:	ret    
   16e44:	call   8050 <__stack_chk_fail@plt>
   16e49:	nop    DWORD PTR [rax+0x0]
   16e50:	push   r13
   16e52:	push   r12
   16e54:	mov    r13,rcx
   16e57:	push   rbp
   16e58:	push   rbx
   16e59:	mov    ecx,0x8
   16e5e:	mov    rbp,rdi
   16e61:	mov    rbx,rdx
   16e64:	sub    rsp,0x18
   16e68:	mov    r12,rsp
   16e6b:	mov    QWORD PTR [rsp],0x0
   16e73:	mov    r8,r12
   16e76:	mov    rax,QWORD PTR fs:0x28
   16e7f:	mov    QWORD PTR [rsp+0x8],rax
   16e84:	xor    eax,eax
   16e86:	call   200e0 <g_str_equal@plt+0x17d28>
   16e8b:	mov    rsi,QWORD PTR [rsp]
   16e8f:	test   rsi,rsi
   16e92:	je     16ec0 <g_str_equal@plt+0xeb08>
   16e94:	mov    rdi,r13
   16e97:	call   df30 <g_str_equal@plt+0x5b78>
   16e9c:	mov    rax,QWORD PTR [rsp+0x8]
   16ea1:	xor    rax,QWORD PTR fs:0x28
   16eaa:	jne    16f1d <g_str_equal@plt+0xeb65>
   16eac:	add    rsp,0x18
   16eb0:	pop    rbx
   16eb1:	pop    rbp
   16eb2:	pop    r12
   16eb4:	pop    r13
   16eb6:	ret    
   16eb7:	nop    WORD PTR [rax+rax*1+0x0]
   16ec0:	mov    rsi,QWORD PTR [rbx]
   16ec3:	test   rsi,rsi
   16ec6:	je     16eda <g_str_equal@plt+0xeb22>
   16ec8:	mov    rdx,r12
   16ecb:	mov    rdi,rbp
   16ece:	call   16df0 <g_str_equal@plt+0xea38>
   16ed3:	cmp    QWORD PTR [rsp],0x0
   16ed8:	je     16f10 <g_str_equal@plt+0xeb58>
   16eda:	mov    rsi,rbx
   16edd:	mov    rdi,rbp
   16ee0:	call   20340 <g_str_equal@plt+0x17f88>
   16ee5:	mov    rsi,QWORD PTR [rsp]
   16ee9:	test   rsi,rsi
   16eec:	je     16e94 <g_str_equal@plt+0xeadc>
   16eee:	mov    rdi,rbp
   16ef1:	call   20ab0 <g_str_equal@plt+0x186f8>
   16ef6:	test   al,al
   16ef8:	je     16f09 <g_str_equal@plt+0xeb51>
   16efa:	mov    rdi,QWORD PTR [rbx]
   16efd:	call   14bb0 <g_str_equal@plt+0xc7f8>
   16f02:	mov    QWORD PTR [rbx],0x0
   16f09:	mov    rsi,QWORD PTR [rsp]
   16f0d:	jmp    16e94 <g_str_equal@plt+0xeadc>
   16f0f:	nop
   16f10:	mov    rsi,r12
   16f13:	mov    rdi,rbp
   16f16:	call   20290 <g_str_equal@plt+0x17ed8>
   16f1b:	jmp    16eda <g_str_equal@plt+0xeb22>
   16f1d:	call   8050 <__stack_chk_fail@plt>
   16f22:	nop    DWORD PTR [rax+0x0]
   16f26:	nop    WORD PTR cs:[rax+rax*1+0x0]
   16f30:	push   r13
   16f32:	push   r12
   16f34:	mov    r13,rdx
   16f37:	push   rbp
   16f38:	push   rbx
   16f39:	mov    rdx,rsi
   16f3c:	mov    rbx,rsi
   16f3f:	lea    rsi,[rip+0x15ee1]        # 2ce27 <_fini@@Base+0x3ba3>
   16f46:	mov    rbp,rdi
   16f49:	sub    rsp,0x18
   16f4d:	mov    r12,rsp
   16f50:	mov    QWORD PTR [rsp],0x0
   16f58:	mov    rcx,r12
   16f5b:	mov    rax,QWORD PTR fs:0x28
   16f64:	mov    QWORD PTR [rsp+0x8],rax
   16f69:	xor    eax,eax
   16f6b:	call   20ac0 <g_str_equal@plt+0x18708>
   16f70:	mov    rsi,QWORD PTR [rsp]
   16f74:	test   rsi,rsi
   16f77:	je     16fa0 <g_str_equal@plt+0xebe8>
   16f79:	mov    rdi,r13
   16f7c:	call   df30 <g_str_equal@plt+0x5b78>
   16f81:	mov    rax,QWORD PTR [rsp+0x8]
   16f86:	xor    rax,QWORD PTR fs:0x28
   16f8f:	jne    16fbc <g_str_equal@plt+0xec04>
   16f91:	add    rsp,0x18
   16f95:	pop    rbx
   16f96:	pop    rbp
   16f97:	pop    r12
   16f99:	pop    r13
   16f9b:	ret    
   16f9c:	nop    DWORD PTR [rax+0x0]
   16fa0:	lea    rsi,[rip+0x15e7f]        # 2ce26 <_fini@@Base+0x3ba2>
   16fa7:	lea    rdx,[rbx+0x8]
   16fab:	mov    rcx,r12
   16fae:	mov    rdi,rbp
   16fb1:	call   20ac0 <g_str_equal@plt+0x18708>
   16fb6:	mov    rsi,QWORD PTR [rsp]
   16fba:	jmp    16f79 <g_str_equal@plt+0xebc1>
   16fbc:	call   8050 <__stack_chk_fail@plt>
   16fc1:	nop    DWORD PTR [rax+rax*1+0x0]
   16fc6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   16fd0:	push   r13
   16fd2:	push   r12
   16fd4:	mov    r13,rcx
   16fd7:	push   rbp
   16fd8:	push   rbx
   16fd9:	mov    ecx,0x10
   16fde:	mov    rbp,rdi
   16fe1:	mov    rbx,rdx
   16fe4:	sub    rsp,0x18
   16fe8:	mov    r12,rsp
   16feb:	mov    QWORD PTR [rsp],0x0
   16ff3:	mov    r8,r12
   16ff6:	mov    rax,QWORD PTR fs:0x28
   16fff:	mov    QWORD PTR [rsp+0x8],rax
   17004:	xor    eax,eax
   17006:	call   200e0 <g_str_equal@plt+0x17d28>
   1700b:	mov    rsi,QWORD PTR [rsp]
   1700f:	test   rsi,rsi
   17012:	je     17040 <g_str_equal@plt+0xec88>
   17014:	mov    rdi,r13
   17017:	call   df30 <g_str_equal@plt+0x5b78>
   1701c:	mov    rax,QWORD PTR [rsp+0x8]
   17021:	xor    rax,QWORD PTR fs:0x28
   1702a:	jne    1709d <g_str_equal@plt+0xece5>
   1702c:	add    rsp,0x18
   17030:	pop    rbx
   17031:	pop    rbp
   17032:	pop    r12
   17034:	pop    r13
   17036:	ret    
   17037:	nop    WORD PTR [rax+rax*1+0x0]
   17040:	mov    rsi,QWORD PTR [rbx]
   17043:	test   rsi,rsi
   17046:	je     1705a <g_str_equal@plt+0xeca2>
   17048:	mov    rdx,r12
   1704b:	mov    rdi,rbp
   1704e:	call   16f30 <g_str_equal@plt+0xeb78>
   17053:	cmp    QWORD PTR [rsp],0x0
   17058:	je     17090 <g_str_equal@plt+0xecd8>
   1705a:	mov    rsi,rbx
   1705d:	mov    rdi,rbp
   17060:	call   20340 <g_str_equal@plt+0x17f88>
   17065:	mov    rsi,QWORD PTR [rsp]
   17069:	test   rsi,rsi
   1706c:	je     17014 <g_str_equal@plt+0xec5c>
   1706e:	mov    rdi,rbp
   17071:	call   20ab0 <g_str_equal@plt+0x186f8>
   17076:	test   al,al
   17078:	je     17089 <g_str_equal@plt+0xecd1>
   1707a:	mov    rdi,QWORD PTR [rbx]
   1707d:	call   14bf0 <g_str_equal@plt+0xc838>
   17082:	mov    QWORD PTR [rbx],0x0
   17089:	mov    rsi,QWORD PTR [rsp]
   1708d:	jmp    17014 <g_str_equal@plt+0xec5c>
   1708f:	nop
   17090:	mov    rsi,r12
   17093:	mov    rdi,rbp
   17096:	call   20290 <g_str_equal@plt+0x17ed8>
   1709b:	jmp    1705a <g_str_equal@plt+0xeca2>
   1709d:	call   8050 <__stack_chk_fail@plt>
   170a2:	nop    DWORD PTR [rax+0x0]
   170a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   170b0:	push   rbx
   170b1:	mov    rbx,rdx
   170b4:	mov    rdx,rsi
   170b7:	lea    rsi,[rip+0x15d6c]        # 2ce2a <_fini@@Base+0x3ba6>
   170be:	sub    rsp,0x10
   170c2:	mov    rcx,rsp
   170c5:	mov    QWORD PTR [rsp],0x0
   170cd:	mov    rax,QWORD PTR fs:0x28
   170d6:	mov    QWORD PTR [rsp+0x8],rax
   170db:	xor    eax,eax
   170dd:	call   20ac0 <g_str_equal@plt+0x18708>
   170e2:	mov    rsi,QWORD PTR [rsp]
   170e6:	mov    rdi,rbx
   170e9:	call   df30 <g_str_equal@plt+0x5b78>
   170ee:	mov    rax,QWORD PTR [rsp+0x8]
   170f3:	xor    rax,QWORD PTR fs:0x28
   170fc:	jne    17104 <g_str_equal@plt+0xed4c>
   170fe:	add    rsp,0x10
   17102:	pop    rbx
   17103:	ret    
   17104:	call   8050 <__stack_chk_fail@plt>
   17109:	nop    DWORD PTR [rax+0x0]
   17110:	push   r13
   17112:	push   r12
   17114:	mov    r13,rcx
   17117:	push   rbp
   17118:	push   rbx
   17119:	mov    ecx,0x8
   1711e:	mov    rbp,rdi
   17121:	mov    rbx,rdx
   17124:	sub    rsp,0x18
   17128:	mov    r12,rsp
   1712b:	mov    QWORD PTR [rsp],0x0
   17133:	mov    r8,r12
   17136:	mov    rax,QWORD PTR fs:0x28
   1713f:	mov    QWORD PTR [rsp+0x8],rax
   17144:	xor    eax,eax
   17146:	call   200e0 <g_str_equal@plt+0x17d28>
   1714b:	mov    rsi,QWORD PTR [rsp]
   1714f:	test   rsi,rsi
   17152:	je     17180 <g_str_equal@plt+0xedc8>
   17154:	mov    rdi,r13
   17157:	call   df30 <g_str_equal@plt+0x5b78>
   1715c:	mov    rax,QWORD PTR [rsp+0x8]
   17161:	xor    rax,QWORD PTR fs:0x28
   1716a:	jne    171dd <g_str_equal@plt+0xee25>
   1716c:	add    rsp,0x18
   17170:	pop    rbx
   17171:	pop    rbp
   17172:	pop    r12
   17174:	pop    r13
   17176:	ret    
   17177:	nop    WORD PTR [rax+rax*1+0x0]
   17180:	mov    rsi,QWORD PTR [rbx]
   17183:	test   rsi,rsi
   17186:	je     1719a <g_str_equal@plt+0xede2>
   17188:	mov    rdx,r12
   1718b:	mov    rdi,rbp
   1718e:	call   170b0 <g_str_equal@plt+0xecf8>
   17193:	cmp    QWORD PTR [rsp],0x0
   17198:	je     171d0 <g_str_equal@plt+0xee18>
   1719a:	mov    rsi,rbx
   1719d:	mov    rdi,rbp
   171a0:	call   20340 <g_str_equal@plt+0x17f88>
   171a5:	mov    rsi,QWORD PTR [rsp]
   171a9:	test   rsi,rsi
   171ac:	je     17154 <g_str_equal@plt+0xed9c>
   171ae:	mov    rdi,rbp
   171b1:	call   20ab0 <g_str_equal@plt+0x186f8>
   171b6:	test   al,al
   171b8:	je     171c9 <g_str_equal@plt+0xee11>
   171ba:	mov    rdi,QWORD PTR [rbx]
   171bd:	call   14c30 <g_str_equal@plt+0xc878>
   171c2:	mov    QWORD PTR [rbx],0x0
   171c9:	mov    rsi,QWORD PTR [rsp]
   171cd:	jmp    17154 <g_str_equal@plt+0xed9c>
   171cf:	nop
   171d0:	mov    rsi,r12
   171d3:	mov    rdi,rbp
   171d6:	call   20290 <g_str_equal@plt+0x17ed8>
   171db:	jmp    1719a <g_str_equal@plt+0xede2>
   171dd:	call   8050 <__stack_chk_fail@plt>
   171e2:	nop    DWORD PTR [rax+0x0]
   171e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   171f0:	push   rbx
   171f1:	mov    rbx,rdx
   171f4:	mov    rdx,rsi
   171f7:	lea    rsi,[rip+0x15c30]        # 2ce2e <_fini@@Base+0x3baa>
   171fe:	sub    rsp,0x10
   17202:	mov    rcx,rsp
   17205:	mov    QWORD PTR [rsp],0x0
   1720d:	mov    rax,QWORD PTR fs:0x28
   17216:	mov    QWORD PTR [rsp+0x8],rax
   1721b:	xor    eax,eax
   1721d:	call   20ac0 <g_str_equal@plt+0x18708>
   17222:	mov    rsi,QWORD PTR [rsp]
   17226:	mov    rdi,rbx
   17229:	call   df30 <g_str_equal@plt+0x5b78>
   1722e:	mov    rax,QWORD PTR [rsp+0x8]
   17233:	xor    rax,QWORD PTR fs:0x28
   1723c:	jne    17244 <g_str_equal@plt+0xee8c>
   1723e:	add    rsp,0x10
   17242:	pop    rbx
   17243:	ret    
   17244:	call   8050 <__stack_chk_fail@plt>
   17249:	nop    DWORD PTR [rax+0x0]
   17250:	push   r13
   17252:	push   r12
   17254:	mov    r13,rcx
   17257:	push   rbp
   17258:	push   rbx
   17259:	mov    ecx,0x8
   1725e:	mov    rbp,rdi
   17261:	mov    rbx,rdx
   17264:	sub    rsp,0x18
   17268:	mov    r12,rsp
   1726b:	mov    QWORD PTR [rsp],0x0
   17273:	mov    r8,r12
   17276:	mov    rax,QWORD PTR fs:0x28
   1727f:	mov    QWORD PTR [rsp+0x8],rax
   17284:	xor    eax,eax
   17286:	call   200e0 <g_str_equal@plt+0x17d28>
   1728b:	mov    rsi,QWORD PTR [rsp]
   1728f:	test   rsi,rsi
   17292:	je     172c0 <g_str_equal@plt+0xef08>
   17294:	mov    rdi,r13
   17297:	call   df30 <g_str_equal@plt+0x5b78>
   1729c:	mov    rax,QWORD PTR [rsp+0x8]
   172a1:	xor    rax,QWORD PTR fs:0x28
   172aa:	jne    1731d <g_str_equal@plt+0xef65>
   172ac:	add    rsp,0x18
   172b0:	pop    rbx
   172b1:	pop    rbp
   172b2:	pop    r12
   172b4:	pop    r13
   172b6:	ret    
   172b7:	nop    WORD PTR [rax+rax*1+0x0]
   172c0:	mov    rsi,QWORD PTR [rbx]
   172c3:	test   rsi,rsi
   172c6:	je     172da <g_str_equal@plt+0xef22>
   172c8:	mov    rdx,r12
   172cb:	mov    rdi,rbp
   172ce:	call   171f0 <g_str_equal@plt+0xee38>
   172d3:	cmp    QWORD PTR [rsp],0x0
   172d8:	je     17310 <g_str_equal@plt+0xef58>
   172da:	mov    rsi,rbx
   172dd:	mov    rdi,rbp
   172e0:	call   20340 <g_str_equal@plt+0x17f88>
   172e5:	mov    rsi,QWORD PTR [rsp]
   172e9:	test   rsi,rsi
   172ec:	je     17294 <g_str_equal@plt+0xeedc>
   172ee:	mov    rdi,rbp
   172f1:	call   20ab0 <g_str_equal@plt+0x186f8>
   172f6:	test   al,al
   172f8:	je     17309 <g_str_equal@plt+0xef51>
   172fa:	mov    rdi,QWORD PTR [rbx]
   172fd:	call   14c70 <g_str_equal@plt+0xc8b8>
   17302:	mov    QWORD PTR [rbx],0x0
   17309:	mov    rsi,QWORD PTR [rsp]
   1730d:	jmp    17294 <g_str_equal@plt+0xeedc>
   1730f:	nop
   17310:	mov    rsi,r12
   17313:	mov    rdi,rbp
   17316:	call   20290 <g_str_equal@plt+0x17ed8>
   1731b:	jmp    172da <g_str_equal@plt+0xef22>
   1731d:	call   8050 <__stack_chk_fail@plt>
   17322:	nop    DWORD PTR [rax+0x0]
   17326:	nop    WORD PTR cs:[rax+rax*1+0x0]
   17330:	push   rbx
   17331:	mov    rbx,rdx
   17334:	mov    rdx,rsi
   17337:	lea    rsi,[rip+0x15af0]        # 2ce2e <_fini@@Base+0x3baa>
   1733e:	sub    rsp,0x10
   17342:	mov    rcx,rsp
   17345:	mov    QWORD PTR [rsp],0x0
   1734d:	mov    rax,QWORD PTR fs:0x28
   17356:	mov    QWORD PTR [rsp+0x8],rax
   1735b:	xor    eax,eax
   1735d:	call   20ac0 <g_str_equal@plt+0x18708>
   17362:	mov    rsi,QWORD PTR [rsp]
   17366:	mov    rdi,rbx
   17369:	call   df30 <g_str_equal@plt+0x5b78>
   1736e:	mov    rax,QWORD PTR [rsp+0x8]
   17373:	xor    rax,QWORD PTR fs:0x28
   1737c:	jne    17384 <g_str_equal@plt+0xefcc>
   1737e:	add    rsp,0x10
   17382:	pop    rbx
   17383:	ret    
   17384:	call   8050 <__stack_chk_fail@plt>
   17389:	nop    DWORD PTR [rax+0x0]
   17390:	push   r13
   17392:	push   r12
   17394:	mov    r13,rcx
   17397:	push   rbp
   17398:	push   rbx
   17399:	mov    ecx,0x8
   1739e:	mov    rbp,rdi
   173a1:	mov    rbx,rdx
   173a4:	sub    rsp,0x18
   173a8:	mov    r12,rsp
   173ab:	mov    QWORD PTR [rsp],0x0
   173b3:	mov    r8,r12
   173b6:	mov    rax,QWORD PTR fs:0x28
   173bf:	mov    QWORD PTR [rsp+0x8],rax
   173c4:	xor    eax,eax
   173c6:	call   200e0 <g_str_equal@plt+0x17d28>
   173cb:	mov    rsi,QWORD PTR [rsp]
   173cf:	test   rsi,rsi
   173d2:	je     17400 <g_str_equal@plt+0xf048>
   173d4:	mov    rdi,r13
   173d7:	call   df30 <g_str_equal@plt+0x5b78>
   173dc:	mov    rax,QWORD PTR [rsp+0x8]
   173e1:	xor    rax,QWORD PTR fs:0x28
   173ea:	jne    1745d <g_str_equal@plt+0xf0a5>
   173ec:	add    rsp,0x18
   173f0:	pop    rbx
   173f1:	pop    rbp
   173f2:	pop    r12
   173f4:	pop    r13
   173f6:	ret    
   173f7:	nop    WORD PTR [rax+rax*1+0x0]
   17400:	mov    rsi,QWORD PTR [rbx]
   17403:	test   rsi,rsi
   17406:	je     1741a <g_str_equal@plt+0xf062>
   17408:	mov    rdx,r12
   1740b:	mov    rdi,rbp
   1740e:	call   17330 <g_str_equal@plt+0xef78>
   17413:	cmp    QWORD PTR [rsp],0x0
   17418:	je     17450 <g_str_equal@plt+0xf098>
   1741a:	mov    rsi,rbx
   1741d:	mov    rdi,rbp
   17420:	call   20340 <g_str_equal@plt+0x17f88>
   17425:	mov    rsi,QWORD PTR [rsp]
   17429:	test   rsi,rsi
   1742c:	je     173d4 <g_str_equal@plt+0xf01c>
   1742e:	mov    rdi,rbp
   17431:	call   20ab0 <g_str_equal@plt+0x186f8>
   17436:	test   al,al
   17438:	je     17449 <g_str_equal@plt+0xf091>
   1743a:	mov    rdi,QWORD PTR [rbx]
   1743d:	call   14cb0 <g_str_equal@plt+0xc8f8>
   17442:	mov    QWORD PTR [rbx],0x0
   17449:	mov    rsi,QWORD PTR [rsp]
   1744d:	jmp    173d4 <g_str_equal@plt+0xf01c>
   1744f:	nop
   17450:	mov    rsi,r12
   17453:	mov    rdi,rbp
   17456:	call   20290 <g_str_equal@plt+0x17ed8>
   1745b:	jmp    1741a <g_str_equal@plt+0xf062>
   1745d:	call   8050 <__stack_chk_fail@plt>
   17462:	nop    DWORD PTR [rax+0x0]
   17466:	nop    WORD PTR cs:[rax+rax*1+0x0]
   17470:	push   rbx
   17471:	mov    rbx,rdx
   17474:	mov    rdx,rsi
   17477:	lea    rsi,[rip+0x159a9]        # 2ce27 <_fini@@Base+0x3ba3>
   1747e:	sub    rsp,0x10
   17482:	mov    rcx,rsp
   17485:	mov    QWORD PTR [rsp],0x0
   1748d:	mov    rax,QWORD PTR fs:0x28
   17496:	mov    QWORD PTR [rsp+0x8],rax
   1749b:	xor    eax,eax
   1749d:	call   20ac0 <g_str_equal@plt+0x18708>
   174a2:	mov    rsi,QWORD PTR [rsp]
   174a6:	mov    rdi,rbx
   174a9:	call   df30 <g_str_equal@plt+0x5b78>
   174ae:	mov    rax,QWORD PTR [rsp+0x8]
   174b3:	xor    rax,QWORD PTR fs:0x28
   174bc:	jne    174c4 <g_str_equal@plt+0xf10c>
   174be:	add    rsp,0x10
   174c2:	pop    rbx
   174c3:	ret    
   174c4:	call   8050 <__stack_chk_fail@plt>
   174c9:	nop    DWORD PTR [rax+0x0]
   174d0:	push   r13
   174d2:	push   r12
   174d4:	mov    r13,rcx
   174d7:	push   rbp
   174d8:	push   rbx
   174d9:	mov    ecx,0x8
   174de:	mov    rbp,rdi
   174e1:	mov    rbx,rdx
   174e4:	sub    rsp,0x18
   174e8:	mov    r12,rsp
   174eb:	mov    QWORD PTR [rsp],0x0
   174f3:	mov    r8,r12
   174f6:	mov    rax,QWORD PTR fs:0x28
   174ff:	mov    QWORD PTR [rsp+0x8],rax
   17504:	xor    eax,eax
   17506:	call   200e0 <g_str_equal@plt+0x17d28>
   1750b:	mov    rsi,QWORD PTR [rsp]
   1750f:	test   rsi,rsi
   17512:	je     17540 <g_str_equal@plt+0xf188>
   17514:	mov    rdi,r13
   17517:	call   df30 <g_str_equal@plt+0x5b78>
   1751c:	mov    rax,QWORD PTR [rsp+0x8]
   17521:	xor    rax,QWORD PTR fs:0x28
   1752a:	jne    1759d <g_str_equal@plt+0xf1e5>
   1752c:	add    rsp,0x18
   17530:	pop    rbx
   17531:	pop    rbp
   17532:	pop    r12
   17534:	pop    r13
   17536:	ret    
   17537:	nop    WORD PTR [rax+rax*1+0x0]
   17540:	mov    rsi,QWORD PTR [rbx]
   17543:	test   rsi,rsi
   17546:	je     1755a <g_str_equal@plt+0xf1a2>
   17548:	mov    rdx,r12
   1754b:	mov    rdi,rbp
   1754e:	call   17470 <g_str_equal@plt+0xf0b8>
   17553:	cmp    QWORD PTR [rsp],0x0
   17558:	je     17590 <g_str_equal@plt+0xf1d8>
   1755a:	mov    rsi,rbx
   1755d:	mov    rdi,rbp
   17560:	call   20340 <g_str_equal@plt+0x17f88>
   17565:	mov    rsi,QWORD PTR [rsp]
   17569:	test   rsi,rsi
   1756c:	je     17514 <g_str_equal@plt+0xf15c>
   1756e:	mov    rdi,rbp
   17571:	call   20ab0 <g_str_equal@plt+0x186f8>
   17576:	test   al,al
   17578:	je     17589 <g_str_equal@plt+0xf1d1>
   1757a:	mov    rdi,QWORD PTR [rbx]
   1757d:	call   14cf0 <g_str_equal@plt+0xc938>
   17582:	mov    QWORD PTR [rbx],0x0
   17589:	mov    rsi,QWORD PTR [rsp]
   1758d:	jmp    17514 <g_str_equal@plt+0xf15c>
   1758f:	nop
   17590:	mov    rsi,r12
   17593:	mov    rdi,rbp
   17596:	call   20290 <g_str_equal@plt+0x17ed8>
   1759b:	jmp    1755a <g_str_equal@plt+0xf1a2>
   1759d:	call   8050 <__stack_chk_fail@plt>
   175a2:	nop    DWORD PTR [rax+0x0]
   175a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   175b0:	push   rbx
   175b1:	mov    r8,rcx
   175b4:	mov    rbx,rdx
   175b7:	lea    rcx,[rip+0x225db2]        # 23d370 <_fini@@Base+0x2140ec>
   175be:	sub    rsp,0x10
   175c2:	mov    rax,QWORD PTR fs:0x28
   175cb:	mov    QWORD PTR [rsp+0x8],rax
   175d0:	xor    eax,eax
   175d2:	mov    eax,DWORD PTR [rdx]
   175d4:	lea    rdx,[rsp+0x4]
   175d9:	mov    DWORD PTR [rsp+0x4],eax
   175dd:	call   219e0 <g_str_equal@plt+0x19628>
   175e2:	mov    eax,DWORD PTR [rsp+0x4]
   175e6:	mov    DWORD PTR [rbx],eax
   175e8:	mov    rax,QWORD PTR [rsp+0x8]
   175ed:	xor    rax,QWORD PTR fs:0x28
   175f6:	jne    175fe <g_str_equal@plt+0xf246>
   175f8:	add    rsp,0x10
   175fc:	pop    rbx
   175fd:	ret    
   175fe:	call   8050 <__stack_chk_fail@plt>
   17603:	nop    DWORD PTR [rax]
   17606:	nop    WORD PTR cs:[rax+rax*1+0x0]
   17610:	push   rbp
   17611:	push   rbx
   17612:	mov    rbp,rdx
   17615:	mov    rbx,rsi
   17618:	lea    rcx,[rip+0x225d51]        # 23d370 <_fini@@Base+0x2140ec>
   1761f:	sub    rsp,0x28
   17623:	mov    rax,QWORD PTR fs:0x28
   1762c:	mov    QWORD PTR [rsp+0x18],rax
   17631:	xor    eax,eax
   17633:	mov    eax,DWORD PTR [rsi]
   17635:	lea    rdx,[rsp+0xc]
   1763a:	lea    r8,[rsp+0x10]
   1763f:	lea    rsi,[rip+0x157eb]        # 2ce31 <_fini@@Base+0x3bad>
   17646:	mov    QWORD PTR [rsp+0x10],0x0
   1764f:	mov    DWORD PTR [rsp+0xc],eax
   17653:	call   219e0 <g_str_equal@plt+0x19628>
   17658:	mov    eax,DWORD PTR [rsp+0xc]
   1765c:	mov    rsi,QWORD PTR [rsp+0x10]
   17661:	mov    rdi,rbp
   17664:	mov    DWORD PTR [rbx],eax
   17666:	call   df30 <g_str_equal@plt+0x5b78>
   1766b:	mov    rax,QWORD PTR [rsp+0x18]
   17670:	xor    rax,QWORD PTR fs:0x28
   17679:	jne    17682 <g_str_equal@plt+0xf2ca>
   1767b:	add    rsp,0x28
   1767f:	pop    rbx
   17680:	pop    rbp
   17681:	ret    
   17682:	call   8050 <__stack_chk_fail@plt>
   17687:	nop    WORD PTR [rax+rax*1+0x0]
   17690:	push   r13
   17692:	push   r12
   17694:	mov    r13,rcx
   17697:	push   rbp
   17698:	push   rbx
   17699:	mov    ecx,0x4
   1769e:	mov    rbp,rdi
   176a1:	mov    rbx,rdx
   176a4:	sub    rsp,0x18
   176a8:	mov    r12,rsp
   176ab:	mov    QWORD PTR [rsp],0x0
   176b3:	mov    r8,r12
   176b6:	mov    rax,QWORD PTR fs:0x28
   176bf:	mov    QWORD PTR [rsp+0x8],rax
   176c4:	xor    eax,eax
   176c6:	call   200e0 <g_str_equal@plt+0x17d28>
   176cb:	mov    rsi,QWORD PTR [rsp]
   176cf:	test   rsi,rsi
   176d2:	je     17700 <g_str_equal@plt+0xf348>
   176d4:	mov    rdi,r13
   176d7:	call   df30 <g_str_equal@plt+0x5b78>
   176dc:	mov    rax,QWORD PTR [rsp+0x8]
   176e1:	xor    rax,QWORD PTR fs:0x28
   176ea:	jne    1775d <g_str_equal@plt+0xf3a5>
   176ec:	add    rsp,0x18
   176f0:	pop    rbx
   176f1:	pop    rbp
   176f2:	pop    r12
   176f4:	pop    r13
   176f6:	ret    
   176f7:	nop    WORD PTR [rax+rax*1+0x0]
   17700:	mov    rsi,QWORD PTR [rbx]
   17703:	test   rsi,rsi
   17706:	je     1771a <g_str_equal@plt+0xf362>
   17708:	mov    rdx,r12
   1770b:	mov    rdi,rbp
   1770e:	call   17610 <g_str_equal@plt+0xf258>
   17713:	cmp    QWORD PTR [rsp],0x0
   17718:	je     17750 <g_str_equal@plt+0xf398>
   1771a:	mov    rsi,rbx
   1771d:	mov    rdi,rbp
   17720:	call   20340 <g_str_equal@plt+0x17f88>
   17725:	mov    rsi,QWORD PTR [rsp]
   17729:	test   rsi,rsi
   1772c:	je     176d4 <g_str_equal@plt+0xf31c>
   1772e:	mov    rdi,rbp
   17731:	call   20ab0 <g_str_equal@plt+0x186f8>
   17736:	test   al,al
   17738:	je     17749 <g_str_equal@plt+0xf391>
   1773a:	mov    rdi,QWORD PTR [rbx]
   1773d:	call   14d30 <g_str_equal@plt+0xc978>
   17742:	mov    QWORD PTR [rbx],0x0
   17749:	mov    rsi,QWORD PTR [rsp]
   1774d:	jmp    176d4 <g_str_equal@plt+0xf31c>
   1774f:	nop
   17750:	mov    rsi,r12
   17753:	mov    rdi,rbp
   17756:	call   20290 <g_str_equal@plt+0x17ed8>
   1775b:	jmp    1771a <g_str_equal@plt+0xf362>
   1775d:	call   8050 <__stack_chk_fail@plt>
   17762:	nop    DWORD PTR [rax+0x0]
   17766:	nop    WORD PTR cs:[rax+rax*1+0x0]
   17770:	push   r13
   17772:	push   r12
   17774:	mov    r13,rdx
   17777:	push   rbp
   17778:	push   rbx
   17779:	mov    rdx,rsi
   1777c:	mov    rbx,rsi
   1777f:	lea    rsi,[rip+0x11c39]        # 293bf <_fini@@Base+0x13b>
   17786:	mov    rbp,rdi
   17789:	sub    rsp,0x18
   1778d:	mov    r12,rsp
   17790:	mov    QWORD PTR [rsp],0x0
   17798:	mov    rcx,r12
   1779b:	mov    rax,QWORD PTR fs:0x28
   177a4:	mov    QWORD PTR [rsp+0x8],rax
   177a9:	xor    eax,eax
   177ab:	call   21550 <g_str_equal@plt+0x19198>
   177b0:	mov    rsi,QWORD PTR [rsp]
   177b4:	test   rsi,rsi
   177b7:	je     177e0 <g_str_equal@plt+0xf428>
   177b9:	mov    rdi,r13
   177bc:	call   df30 <g_str_equal@plt+0x5b78>
   177c1:	mov    rax,QWORD PTR [rsp+0x8]
   177c6:	xor    rax,QWORD PTR fs:0x28
   177cf:	jne    17860 <g_str_equal@plt+0xf4a8>
   177d5:	add    rsp,0x18
   177d9:	pop    rbx
   177da:	pop    rbp
   177db:	pop    r12
   177dd:	pop    r13
   177df:	ret    
   177e0:	lea    rsi,[rip+0x15654]        # 2ce3b <_fini@@Base+0x3bb7>
   177e7:	lea    rdx,[rbx+0x8]
   177eb:	mov    rcx,r12
   177ee:	mov    rdi,rbp
   177f1:	call   20ac0 <g_str_equal@plt+0x18708>
   177f6:	mov    rsi,QWORD PTR [rsp]
   177fa:	test   rsi,rsi
   177fd:	jne    177b9 <g_str_equal@plt+0xf401>
   177ff:	lea    rsi,[rip+0x1563f]        # 2ce45 <_fini@@Base+0x3bc1>
   17806:	lea    rdx,[rbx+0x10]
   1780a:	mov    rcx,r12
   1780d:	mov    rdi,rbp
   17810:	call   20ac0 <g_str_equal@plt+0x18708>
   17815:	mov    rsi,QWORD PTR [rsp]
   17819:	test   rsi,rsi
   1781c:	jne    177b9 <g_str_equal@plt+0xf401>
   1781e:	lea    rsi,[rip+0x1562c]        # 2ce51 <_fini@@Base+0x3bcd>
   17825:	lea    rdx,[rbx+0x18]
   17829:	mov    rcx,r12
   1782c:	mov    rdi,rbp
   1782f:	call   20ac0 <g_str_equal@plt+0x18708>
   17834:	mov    rsi,QWORD PTR [rsp]
   17838:	test   rsi,rsi
   1783b:	jne    177b9 <g_str_equal@plt+0xf401>
   17841:	lea    rsi,[rip+0x15613]        # 2ce5b <_fini@@Base+0x3bd7>
   17848:	lea    rdx,[rbx+0x20]
   1784c:	mov    rcx,r12
   1784f:	mov    rdi,rbp
   17852:	call   20ac0 <g_str_equal@plt+0x18708>
   17857:	mov    rsi,QWORD PTR [rsp]
   1785b:	jmp    177b9 <g_str_equal@plt+0xf401>
   17860:	call   8050 <__stack_chk_fail@plt>
   17865:	nop
   17866:	nop    WORD PTR cs:[rax+rax*1+0x0]
   17870:	push   r13
   17872:	push   r12
   17874:	mov    r13,rcx
   17877:	push   rbp
   17878:	push   rbx
   17879:	mov    ecx,0x28
   1787e:	mov    rbp,rdi
   17881:	mov    rbx,rdx
   17884:	sub    rsp,0x18
   17888:	mov    r12,rsp
   1788b:	mov    QWORD PTR [rsp],0x0
   17893:	mov    r8,r12
   17896:	mov    rax,QWORD PTR fs:0x28
   1789f:	mov    QWORD PTR [rsp+0x8],rax
   178a4:	xor    eax,eax
   178a6:	call   200e0 <g_str_equal@plt+0x17d28>
   178ab:	mov    rsi,QWORD PTR [rsp]
   178af:	test   rsi,rsi
   178b2:	je     178e0 <g_str_equal@plt+0xf528>
   178b4:	mov    rdi,r13
   178b7:	call   df30 <g_str_equal@plt+0x5b78>
   178bc:	mov    rax,QWORD PTR [rsp+0x8]
   178c1:	xor    rax,QWORD PTR fs:0x28
   178ca:	jne    1793d <g_str_equal@plt+0xf585>
   178cc:	add    rsp,0x18
   178d0:	pop    rbx
   178d1:	pop    rbp
   178d2:	pop    r12
   178d4:	pop    r13
   178d6:	ret    
   178d7:	nop    WORD PTR [rax+rax*1+0x0]
   178e0:	mov    rsi,QWORD PTR [rbx]
   178e3:	test   rsi,rsi
   178e6:	je     178fa <g_str_equal@plt+0xf542>
   178e8:	mov    rdx,r12
   178eb:	mov    rdi,rbp
   178ee:	call   17770 <g_str_equal@plt+0xf3b8>
   178f3:	cmp    QWORD PTR [rsp],0x0
   178f8:	je     17930 <g_str_equal@plt+0xf578>
   178fa:	mov    rsi,rbx
   178fd:	mov    rdi,rbp
   17900:	call   20340 <g_str_equal@plt+0x17f88>
   17905:	mov    rsi,QWORD PTR [rsp]
   17909:	test   rsi,rsi
   1790c:	je     178b4 <g_str_equal@plt+0xf4fc>
   1790e:	mov    rdi,rbp
   17911:	call   20ab0 <g_str_equal@plt+0x186f8>
   17916:	test   al,al
   17918:	je     17929 <g_str_equal@plt+0xf571>
   1791a:	mov    rdi,QWORD PTR [rbx]
   1791d:	call   14e30 <g_str_equal@plt+0xca78>
   17922:	mov    QWORD PTR [rbx],0x0
   17929:	mov    rsi,QWORD PTR [rsp]
   1792d:	jmp    178b4 <g_str_equal@plt+0xf4fc>
   1792f:	nop
   17930:	mov    rsi,r12
   17933:	mov    rdi,rbp
   17936:	call   20290 <g_str_equal@plt+0x17ed8>
   1793b:	jmp    178fa <g_str_equal@plt+0xf542>
   1793d:	call   8050 <__stack_chk_fail@plt>
   17942:	nop    DWORD PTR [rax+0x0]
   17946:	nop    WORD PTR cs:[rax+rax*1+0x0]
   17950:	push   r14
   17952:	push   r13
   17954:	mov    r14,rcx
   17957:	push   r12
   17959:	push   rbp
   1795a:	mov    ecx,0x10
   1795f:	push   rbx
   17960:	mov    rbp,rdi
   17963:	mov    r13,rdx
   17966:	sub    rsp,0x10
   1796a:	mov    r12,rsp
   1796d:	mov    QWORD PTR [rsp],0x0
   17975:	mov    r8,r12
   17978:	mov    rax,QWORD PTR fs:0x28
   17981:	mov    QWORD PTR [rsp+0x8],rax
   17986:	xor    eax,eax
   17988:	call   203e0 <g_str_equal@plt+0x18028>
   1798d:	mov    rsi,QWORD PTR [rsp]
   17991:	test   rsi,rsi
   17994:	je     179c0 <g_str_equal@plt+0xf608>
   17996:	mov    rdi,r14
   17999:	call   df30 <g_str_equal@plt+0x5b78>
   1799e:	mov    rax,QWORD PTR [rsp+0x8]
   179a3:	xor    rax,QWORD PTR fs:0x28
   179ac:	jne    17a54 <g_str_equal@plt+0xf69c>
   179b2:	add    rsp,0x10
   179b6:	pop    rbx
   179b7:	pop    rbp
   179b8:	pop    r12
   179ba:	pop    r13
   179bc:	pop    r14
   179be:	ret    
   179bf:	nop
   179c0:	mov    rbx,QWORD PTR [r13+0x0]
   179c4:	test   rbx,rbx
   179c7:	jne    179e8 <g_str_equal@plt+0xf630>
   179c9:	jmp    17a47 <g_str_equal@plt+0xf68f>
   179cb:	nop    DWORD PTR [rax+rax*1+0x0]
   179d0:	mov    rsi,rbx
   179d3:	mov    edx,0x10
   179d8:	mov    rdi,rbp
   179db:	call   20530 <g_str_equal@plt+0x18178>
   179e0:	test   rax,rax
   179e3:	mov    rbx,rax
   179e6:	je     17a40 <g_str_equal@plt+0xf688>
   179e8:	lea    rdx,[rbx+0x8]
   179ec:	xor    esi,esi
   179ee:	mov    rcx,r12
   179f1:	mov    rdi,rbp
   179f4:	call   17870 <g_str_equal@plt+0xf4b8>
   179f9:	cmp    QWORD PTR [rsp],0x0
   179fe:	je     179d0 <g_str_equal@plt+0xf618>
   17a00:	mov    rsi,r13
   17a03:	mov    rdi,rbp
   17a06:	call   206d0 <g_str_equal@plt+0x18318>
   17a0b:	mov    rsi,QWORD PTR [rsp]
   17a0f:	test   rsi,rsi
   17a12:	je     17996 <g_str_equal@plt+0xf5de>
   17a14:	mov    rdi,rbp
   17a17:	call   20ab0 <g_str_equal@plt+0x186f8>
   17a1c:	test   al,al
   17a1e:	je     17a31 <g_str_equal@plt+0xf679>
   17a20:	mov    rdi,QWORD PTR [r13+0x0]
   17a24:	call   14e70 <g_str_equal@plt+0xcab8>
   17a29:	mov    QWORD PTR [r13+0x0],0x0
   17a31:	mov    rsi,QWORD PTR [rsp]
   17a35:	jmp    17996 <g_str_equal@plt+0xf5de>
   17a3a:	nop    WORD PTR [rax+rax*1+0x0]
   17a40:	cmp    QWORD PTR [rsp],0x0
   17a45:	jne    17a00 <g_str_equal@plt+0xf648>
   17a47:	mov    rsi,r12
   17a4a:	mov    rdi,rbp
   17a4d:	call   20620 <g_str_equal@plt+0x18268>
   17a52:	jmp    17a00 <g_str_equal@plt+0xf648>
   17a54:	call   8050 <__stack_chk_fail@plt>
   17a59:	nop    DWORD PTR [rax+0x0]
   17a60:	push   rbx
   17a61:	mov    rbx,rdx
   17a64:	mov    rdx,rsi
   17a67:	lea    rsi,[rip+0x153f9]        # 2ce67 <_fini@@Base+0x3be3>
   17a6e:	sub    rsp,0x10
   17a72:	mov    rcx,rsp
   17a75:	mov    QWORD PTR [rsp],0x0
   17a7d:	mov    rax,QWORD PTR fs:0x28
   17a86:	mov    QWORD PTR [rsp+0x8],rax
   17a8b:	xor    eax,eax
   17a8d:	call   20ac0 <g_str_equal@plt+0x18708>
   17a92:	mov    rsi,QWORD PTR [rsp]
   17a96:	mov    rdi,rbx
   17a99:	call   df30 <g_str_equal@plt+0x5b78>
   17a9e:	mov    rax,QWORD PTR [rsp+0x8]
   17aa3:	xor    rax,QWORD PTR fs:0x28
   17aac:	jne    17ab4 <g_str_equal@plt+0xf6fc>
   17aae:	add    rsp,0x10
   17ab2:	pop    rbx
   17ab3:	ret    
   17ab4:	call   8050 <__stack_chk_fail@plt>
   17ab9:	nop    DWORD PTR [rax+0x0]
   17ac0:	push   r13
   17ac2:	push   r12
   17ac4:	mov    r13,rcx
   17ac7:	push   rbp
   17ac8:	push   rbx
   17ac9:	mov    ecx,0x8
   17ace:	mov    rbp,rdi
   17ad1:	mov    rbx,rdx
   17ad4:	sub    rsp,0x18
   17ad8:	mov    r12,rsp
   17adb:	mov    QWORD PTR [rsp],0x0
   17ae3:	mov    r8,r12
   17ae6:	mov    rax,QWORD PTR fs:0x28
   17aef:	mov    QWORD PTR [rsp+0x8],rax
   17af4:	xor    eax,eax
   17af6:	call   200e0 <g_str_equal@plt+0x17d28>
   17afb:	mov    rsi,QWORD PTR [rsp]
   17aff:	test   rsi,rsi
   17b02:	je     17b30 <g_str_equal@plt+0xf778>
   17b04:	mov    rdi,r13
   17b07:	call   df30 <g_str_equal@plt+0x5b78>
   17b0c:	mov    rax,QWORD PTR [rsp+0x8]
   17b11:	xor    rax,QWORD PTR fs:0x28
   17b1a:	jne    17b8d <g_str_equal@plt+0xf7d5>
   17b1c:	add    rsp,0x18
   17b20:	pop    rbx
   17b21:	pop    rbp
   17b22:	pop    r12
   17b24:	pop    r13
   17b26:	ret    
   17b27:	nop    WORD PTR [rax+rax*1+0x0]
   17b30:	mov    rsi,QWORD PTR [rbx]
   17b33:	test   rsi,rsi
   17b36:	je     17b4a <g_str_equal@plt+0xf792>
   17b38:	mov    rdx,r12
   17b3b:	mov    rdi,rbp
   17b3e:	call   17a60 <g_str_equal@plt+0xf6a8>
   17b43:	cmp    QWORD PTR [rsp],0x0
   17b48:	je     17b80 <g_str_equal@plt+0xf7c8>
   17b4a:	mov    rsi,rbx
   17b4d:	mov    rdi,rbp
   17b50:	call   20340 <g_str_equal@plt+0x17f88>
   17b55:	mov    rsi,QWORD PTR [rsp]
   17b59:	test   rsi,rsi
   17b5c:	je     17b04 <g_str_equal@plt+0xf74c>
   17b5e:	mov    rdi,rbp
   17b61:	call   20ab0 <g_str_equal@plt+0x186f8>
   17b66:	test   al,al
   17b68:	je     17b79 <g_str_equal@plt+0xf7c1>
   17b6a:	mov    rdi,QWORD PTR [rbx]
   17b6d:	call   14eb0 <g_str_equal@plt+0xcaf8>
   17b72:	mov    QWORD PTR [rbx],0x0
   17b79:	mov    rsi,QWORD PTR [rsp]
   17b7d:	jmp    17b04 <g_str_equal@plt+0xf74c>
   17b7f:	nop
   17b80:	mov    rsi,r12
   17b83:	mov    rdi,rbp
   17b86:	call   20290 <g_str_equal@plt+0x17ed8>
   17b8b:	jmp    17b4a <g_str_equal@plt+0xf792>
   17b8d:	call   8050 <__stack_chk_fail@plt>
   17b92:	nop    DWORD PTR [rax+0x0]
   17b96:	nop    WORD PTR cs:[rax+rax*1+0x0]
   17ba0:	push   rbx
   17ba1:	mov    rbx,rdx
   17ba4:	mov    rdx,rsi
   17ba7:	lea    rsi,[rip+0x152b9]        # 2ce67 <_fini@@Base+0x3be3>
   17bae:	sub    rsp,0x10
   17bb2:	mov    rcx,rsp
   17bb5:	mov    QWORD PTR [rsp],0x0
   17bbd:	mov    rax,QWORD PTR fs:0x28
   17bc6:	mov    QWORD PTR [rsp+0x8],rax
   17bcb:	xor    eax,eax
   17bcd:	call   20ac0 <g_str_equal@plt+0x18708>
   17bd2:	mov    rsi,QWORD PTR [rsp]
   17bd6:	mov    rdi,rbx
   17bd9:	call   df30 <g_str_equal@plt+0x5b78>
   17bde:	mov    rax,QWORD PTR [rsp+0x8]
   17be3:	xor    rax,QWORD PTR fs:0x28
   17bec:	jne    17bf4 <g_str_equal@plt+0xf83c>
   17bee:	add    rsp,0x10
   17bf2:	pop    rbx
   17bf3:	ret    
   17bf4:	call   8050 <__stack_chk_fail@plt>
   17bf9:	nop    DWORD PTR [rax+0x0]
   17c00:	push   r13
   17c02:	push   r12
   17c04:	mov    r13,rdx
   17c07:	push   rbp
   17c08:	push   rbx
   17c09:	mov    rdx,rsi
   17c0c:	mov    rbx,rsi
   17c0f:	lea    rsi,[rip+0x15258]        # 2ce6e <_fini@@Base+0x3bea>
   17c16:	mov    rbp,rdi
   17c19:	sub    rsp,0x18
   17c1d:	mov    r12,rsp
   17c20:	mov    QWORD PTR [rsp],0x0
   17c28:	mov    rcx,r12
   17c2b:	mov    rax,QWORD PTR fs:0x28
   17c34:	mov    QWORD PTR [rsp+0x8],rax
   17c39:	xor    eax,eax
   17c3b:	call   20ac0 <g_str_equal@plt+0x18708>
   17c40:	mov    rsi,QWORD PTR [rsp]
   17c44:	test   rsi,rsi
   17c47:	je     17c70 <g_str_equal@plt+0xf8b8>
   17c49:	mov    rdi,r13
   17c4c:	call   df30 <g_str_equal@plt+0x5b78>
   17c51:	mov    rax,QWORD PTR [rsp+0x8]
   17c56:	xor    rax,QWORD PTR fs:0x28
   17c5f:	jne    17c8c <g_str_equal@plt+0xf8d4>
   17c61:	add    rsp,0x18
   17c65:	pop    rbx
   17c66:	pop    rbp
   17c67:	pop    r12
   17c69:	pop    r13
   17c6b:	ret    
   17c6c:	nop    DWORD PTR [rax+0x0]
   17c70:	lea    rsi,[rip+0x151fc]        # 2ce73 <_fini@@Base+0x3bef>
   17c77:	lea    rdx,[rbx+0x8]
   17c7b:	mov    rcx,r12
   17c7e:	mov    rdi,rbp
   17c81:	call   20ac0 <g_str_equal@plt+0x18708>
   17c86:	mov    rsi,QWORD PTR [rsp]
   17c8a:	jmp    17c49 <g_str_equal@plt+0xf891>
   17c8c:	call   8050 <__stack_chk_fail@plt>
   17c91:	nop    DWORD PTR [rax+rax*1+0x0]
   17c96:	nop    WORD PTR cs:[rax+rax*1+0x0]
   17ca0:	push   r13
   17ca2:	push   r12
   17ca4:	mov    r13,rcx
   17ca7:	push   rbp
   17ca8:	push   rbx
   17ca9:	mov    ecx,0x10
   17cae:	mov    rbp,rdi
   17cb1:	mov    rbx,rdx
   17cb4:	sub    rsp,0x18
   17cb8:	mov    r12,rsp
   17cbb:	mov    QWORD PTR [rsp],0x0
   17cc3:	mov    r8,r12
   17cc6:	mov    rax,QWORD PTR fs:0x28
   17ccf:	mov    QWORD PTR [rsp+0x8],rax
   17cd4:	xor    eax,eax
   17cd6:	call   200e0 <g_str_equal@plt+0x17d28>
   17cdb:	mov    rsi,QWORD PTR [rsp]
   17cdf:	test   rsi,rsi
   17ce2:	je     17d10 <g_str_equal@plt+0xf958>
   17ce4:	mov    rdi,r13
   17ce7:	call   df30 <g_str_equal@plt+0x5b78>
   17cec:	mov    rax,QWORD PTR [rsp+0x8]
   17cf1:	xor    rax,QWORD PTR fs:0x28
   17cfa:	jne    17d6d <g_str_equal@plt+0xf9b5>
   17cfc:	add    rsp,0x18
   17d00:	pop    rbx
   17d01:	pop    rbp
   17d02:	pop    r12
   17d04:	pop    r13
   17d06:	ret    
   17d07:	nop    WORD PTR [rax+rax*1+0x0]
   17d10:	mov    rsi,QWORD PTR [rbx]
   17d13:	test   rsi,rsi
   17d16:	je     17d2a <g_str_equal@plt+0xf972>
   17d18:	mov    rdx,r12
   17d1b:	mov    rdi,rbp
   17d1e:	call   17c00 <g_str_equal@plt+0xf848>
   17d23:	cmp    QWORD PTR [rsp],0x0
   17d28:	je     17d60 <g_str_equal@plt+0xf9a8>
   17d2a:	mov    rsi,rbx
   17d2d:	mov    rdi,rbp
   17d30:	call   20340 <g_str_equal@plt+0x17f88>
   17d35:	mov    rsi,QWORD PTR [rsp]
   17d39:	test   rsi,rsi
   17d3c:	je     17ce4 <g_str_equal@plt+0xf92c>
   17d3e:	mov    rdi,rbp
   17d41:	call   20ab0 <g_str_equal@plt+0x186f8>
   17d46:	test   al,al
   17d48:	je     17d59 <g_str_equal@plt+0xf9a1>
   17d4a:	mov    rdi,QWORD PTR [rbx]
   17d4d:	call   14ef0 <g_str_equal@plt+0xcb38>
   17d52:	mov    QWORD PTR [rbx],0x0
   17d59:	mov    rsi,QWORD PTR [rsp]
   17d5d:	jmp    17ce4 <g_str_equal@plt+0xf92c>
   17d5f:	nop
   17d60:	mov    rsi,r12
   17d63:	mov    rdi,rbp
   17d66:	call   20290 <g_str_equal@plt+0x17ed8>
   17d6b:	jmp    17d2a <g_str_equal@plt+0xf972>
   17d6d:	call   8050 <__stack_chk_fail@plt>
   17d72:	nop    DWORD PTR [rax+0x0]
   17d76:	nop    WORD PTR cs:[rax+rax*1+0x0]
   17d80:	push   r13
   17d82:	push   r12
   17d84:	mov    r13,rdx
   17d87:	push   rbp
   17d88:	push   rbx
   17d89:	mov    rdx,rsi
   17d8c:	mov    rbx,rsi
   17d8f:	lea    rsi,[rip+0x150e3]        # 2ce79 <_fini@@Base+0x3bf5>
   17d96:	mov    rbp,rdi
   17d99:	sub    rsp,0x18
   17d9d:	mov    r12,rsp
   17da0:	mov    QWORD PTR [rsp],0x0
   17da8:	mov    rcx,r12
   17dab:	mov    rax,QWORD PTR fs:0x28
   17db4:	mov    QWORD PTR [rsp+0x8],rax
   17db9:	xor    eax,eax
   17dbb:	call   20ac0 <g_str_equal@plt+0x18708>
   17dc0:	mov    rsi,QWORD PTR [rsp]
   17dc4:	test   rsi,rsi
   17dc7:	je     17df0 <g_str_equal@plt+0xfa38>
   17dc9:	mov    rdi,r13
   17dcc:	call   df30 <g_str_equal@plt+0x5b78>
   17dd1:	mov    rax,QWORD PTR [rsp+0x8]
   17dd6:	xor    rax,QWORD PTR fs:0x28
   17ddf:	jne    17ec1 <g_str_equal@plt+0xfb09>
   17de5:	add    rsp,0x18
   17de9:	pop    rbx
   17dea:	pop    rbp
   17deb:	pop    r12
   17ded:	pop    r13
   17def:	ret    
   17df0:	lea    rsi,[rip+0x151e5]        # 2cfdc <_fini@@Base+0x3d58>
   17df7:	lea    rdx,[rbx+0x8]
   17dfb:	mov    rcx,r12
   17dfe:	mov    rdi,rbp
   17e01:	call   21550 <g_str_equal@plt+0x19198>
   17e06:	mov    rsi,QWORD PTR [rsp]
   17e0a:	test   rsi,rsi
   17e0d:	jne    17dc9 <g_str_equal@plt+0xfa11>
   17e0f:	lea    rsi,[rip+0x15067]        # 2ce7d <_fini@@Base+0x3bf9>
   17e16:	lea    rdx,[rbx+0x10]
   17e1a:	mov    rcx,r12
   17e1d:	mov    rdi,rbp
   17e20:	call   20ac0 <g_str_equal@plt+0x18708>
   17e25:	mov    rsi,QWORD PTR [rsp]
   17e29:	test   rsi,rsi
   17e2c:	jne    17dc9 <g_str_equal@plt+0xfa11>
   17e2e:	lea    rsi,[rip+0x141fe]        # 2c033 <_fini@@Base+0x2daf>
   17e35:	lea    rdx,[rbx+0x18]
   17e39:	mov    rcx,r12
   17e3c:	mov    rdi,rbp
   17e3f:	call   20ac0 <g_str_equal@plt+0x18708>
   17e44:	mov    rsi,QWORD PTR [rsp]
   17e48:	test   rsi,rsi
   17e4b:	jne    17dc9 <g_str_equal@plt+0xfa11>
   17e51:	lea    rdx,[rbx+0x20]
   17e55:	lea    rsi,[rip+0x15029]        # 2ce85 <_fini@@Base+0x3c01>
   17e5c:	mov    rdi,rbp
   17e5f:	call   209e0 <g_str_equal@plt+0x18628>
   17e64:	test   al,al
   17e66:	je     17e8b <g_str_equal@plt+0xfad3>
   17e68:	lea    rsi,[rip+0x15016]        # 2ce85 <_fini@@Base+0x3c01>
   17e6f:	lea    rdx,[rbx+0x21]
   17e73:	mov    rcx,r12
   17e76:	mov    rdi,rbp
   17e79:	call   21460 <g_str_equal@plt+0x190a8>
   17e7e:	mov    rsi,QWORD PTR [rsp]
   17e82:	test   rsi,rsi
   17e85:	jne    17dc9 <g_str_equal@plt+0xfa11>
   17e8b:	lea    rdx,[rbx+0x22]
   17e8f:	lea    rsi,[rip+0x14ff8]        # 2ce8e <_fini@@Base+0x3c0a>
   17e96:	mov    rdi,rbp
   17e99:	call   209e0 <g_str_equal@plt+0x18628>
   17e9e:	test   al,al
   17ea0:	je     17eb8 <g_str_equal@plt+0xfb00>
   17ea2:	lea    rdx,[rbx+0x23]
   17ea6:	lea    rsi,[rip+0x14fe1]        # 2ce8e <_fini@@Base+0x3c0a>
   17ead:	mov    rcx,r12
   17eb0:	mov    rdi,rbp
   17eb3:	call   21460 <g_str_equal@plt+0x190a8>
   17eb8:	mov    rsi,QWORD PTR [rsp]
   17ebc:	jmp    17dc9 <g_str_equal@plt+0xfa11>
   17ec1:	call   8050 <__stack_chk_fail@plt>
   17ec6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   17ed0:	push   r13
   17ed2:	push   r12
   17ed4:	mov    r13,rcx
   17ed7:	push   rbp
   17ed8:	push   rbx
   17ed9:	mov    ecx,0x28
   17ede:	mov    rbp,rdi
   17ee1:	mov    rbx,rdx
   17ee4:	sub    rsp,0x18
   17ee8:	mov    r12,rsp
   17eeb:	mov    QWORD PTR [rsp],0x0
   17ef3:	mov    r8,r12
   17ef6:	mov    rax,QWORD PTR fs:0x28
   17eff:	mov    QWORD PTR [rsp+0x8],rax
   17f04:	xor    eax,eax
   17f06:	call   200e0 <g_str_equal@plt+0x17d28>
   17f0b:	mov    rsi,QWORD PTR [rsp]
   17f0f:	test   rsi,rsi
   17f12:	je     17f40 <g_str_equal@plt+0xfb88>
   17f14:	mov    rdi,r13
   17f17:	call   df30 <g_str_equal@plt+0x5b78>
   17f1c:	mov    rax,QWORD PTR [rsp+0x8]
   17f21:	xor    rax,QWORD PTR fs:0x28
   17f2a:	jne    17f9d <g_str_equal@plt+0xfbe5>
   17f2c:	add    rsp,0x18
   17f30:	pop    rbx
   17f31:	pop    rbp
   17f32:	pop    r12
   17f34:	pop    r13
   17f36:	ret    
   17f37:	nop    WORD PTR [rax+rax*1+0x0]
   17f40:	mov    rsi,QWORD PTR [rbx]
   17f43:	test   rsi,rsi
   17f46:	je     17f5a <g_str_equal@plt+0xfba2>
   17f48:	mov    rdx,r12
   17f4b:	mov    rdi,rbp
   17f4e:	call   17d80 <g_str_equal@plt+0xf9c8>
   17f53:	cmp    QWORD PTR [rsp],0x0
   17f58:	je     17f90 <g_str_equal@plt+0xfbd8>
   17f5a:	mov    rsi,rbx
   17f5d:	mov    rdi,rbp
   17f60:	call   20340 <g_str_equal@plt+0x17f88>
   17f65:	mov    rsi,QWORD PTR [rsp]
   17f69:	test   rsi,rsi
   17f6c:	je     17f14 <g_str_equal@plt+0xfb5c>
   17f6e:	mov    rdi,rbp
   17f71:	call   20ab0 <g_str_equal@plt+0x186f8>
   17f76:	test   al,al
   17f78:	je     17f89 <g_str_equal@plt+0xfbd1>
   17f7a:	mov    rdi,QWORD PTR [rbx]
   17f7d:	call   14f30 <g_str_equal@plt+0xcb78>
   17f82:	mov    QWORD PTR [rbx],0x0
   17f89:	mov    rsi,QWORD PTR [rsp]
   17f8d:	jmp    17f14 <g_str_equal@plt+0xfb5c>
   17f8f:	nop
   17f90:	mov    rsi,r12
   17f93:	mov    rdi,rbp
   17f96:	call   20290 <g_str_equal@plt+0x17ed8>
   17f9b:	jmp    17f5a <g_str_equal@plt+0xfba2>
   17f9d:	call   8050 <__stack_chk_fail@plt>
   17fa2:	nop    DWORD PTR [rax+0x0]
   17fa6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   17fb0:	push   r13
   17fb2:	push   r12
   17fb4:	mov    r13,rdx
   17fb7:	push   rbp
   17fb8:	push   rbx
   17fb9:	mov    rdx,rsi
   17fbc:	mov    rbx,rsi
   17fbf:	lea    rsi,[rip+0x12aa5]        # 2aa6b <_fini@@Base+0x17e7>
   17fc6:	mov    rbp,rdi
   17fc9:	sub    rsp,0x18
   17fcd:	mov    r12,rsp
   17fd0:	mov    QWORD PTR [rsp],0x0
   17fd8:	mov    rcx,r12
   17fdb:	mov    rax,QWORD PTR fs:0x28
   17fe4:	mov    QWORD PTR [rsp+0x8],rax
   17fe9:	xor    eax,eax
   17feb:	call   20ac0 <g_str_equal@plt+0x18708>
   17ff0:	mov    rsi,QWORD PTR [rsp]
   17ff4:	test   rsi,rsi
   17ff7:	je     18020 <g_str_equal@plt+0xfc68>
   17ff9:	mov    rdi,r13
   17ffc:	call   df30 <g_str_equal@plt+0x5b78>
   18001:	mov    rax,QWORD PTR [rsp+0x8]
   18006:	xor    rax,QWORD PTR fs:0x28
   1800f:	jne    180c3 <g_str_equal@plt+0xfd0b>
   18015:	add    rsp,0x18
   18019:	pop    rbx
   1801a:	pop    rbp
   1801b:	pop    r12
   1801d:	pop    r13
   1801f:	ret    
   18020:	lea    rsi,[rip+0x14e73]        # 2ce9a <_fini@@Base+0x3c16>
   18027:	lea    rdx,[rbx+0x8]
   1802b:	mov    rcx,r12
   1802e:	mov    rdi,rbp
   18031:	call   20ac0 <g_str_equal@plt+0x18708>
   18036:	mov    rsi,QWORD PTR [rsp]
   1803a:	test   rsi,rsi
   1803d:	jne    17ff9 <g_str_equal@plt+0xfc41>
   1803f:	lea    rsi,[rip+0x14e5e]        # 2cea4 <_fini@@Base+0x3c20>
   18046:	lea    rdx,[rbx+0x10]
   1804a:	mov    rcx,r12
   1804d:	mov    rdi,rbp
   18050:	call   20ac0 <g_str_equal@plt+0x18708>
   18055:	mov    rsi,QWORD PTR [rsp]
   18059:	test   rsi,rsi
   1805c:	jne    17ff9 <g_str_equal@plt+0xfc41>
   1805e:	lea    rsi,[rip+0x14e4b]        # 2ceb0 <_fini@@Base+0x3c2c>
   18065:	lea    rdx,[rbx+0x18]
   18069:	mov    rcx,r12
   1806c:	mov    rdi,rbp
   1806f:	call   17ca0 <g_str_equal@plt+0xf8e8>
   18074:	mov    rsi,QWORD PTR [rsp]
   18078:	test   rsi,rsi
   1807b:	jne    17ff9 <g_str_equal@plt+0xfc41>
   18081:	lea    rsi,[rip+0x14e31]        # 2ceb9 <_fini@@Base+0x3c35>
   18088:	lea    rdx,[rbx+0x20]
   1808c:	mov    rcx,r12
   1808f:	mov    rdi,rbp
   18092:	call   17ca0 <g_str_equal@plt+0xf8e8>
   18097:	mov    rsi,QWORD PTR [rsp]
   1809b:	test   rsi,rsi
   1809e:	jne    17ff9 <g_str_equal@plt+0xfc41>
   180a4:	lea    rsi,[rip+0x14e1b]        # 2cec6 <_fini@@Base+0x3c42>
   180ab:	lea    rdx,[rbx+0x28]
   180af:	mov    rcx,r12
   180b2:	mov    rdi,rbp
   180b5:	call   17ca0 <g_str_equal@plt+0xf8e8>
   180ba:	mov    rsi,QWORD PTR [rsp]
   180be:	jmp    17ff9 <g_str_equal@plt+0xfc41>
   180c3:	call   8050 <__stack_chk_fail@plt>
   180c8:	nop    DWORD PTR [rax+rax*1+0x0]
   180d0:	push   r13
   180d2:	push   r12
   180d4:	mov    r13,rcx
   180d7:	push   rbp
   180d8:	push   rbx
   180d9:	mov    ecx,0x30
   180de:	mov    rbp,rdi
   180e1:	mov    rbx,rdx
   180e4:	sub    rsp,0x18
   180e8:	mov    r12,rsp
   180eb:	mov    QWORD PTR [rsp],0x0
   180f3:	mov    r8,r12
   180f6:	mov    rax,QWORD PTR fs:0x28
   180ff:	mov    QWORD PTR [rsp+0x8],rax
   18104:	xor    eax,eax
   18106:	call   200e0 <g_str_equal@plt+0x17d28>
   1810b:	mov    rsi,QWORD PTR [rsp]
   1810f:	test   rsi,rsi
   18112:	je     18140 <g_str_equal@plt+0xfd88>
   18114:	mov    rdi,r13
   18117:	call   df30 <g_str_equal@plt+0x5b78>
   1811c:	mov    rax,QWORD PTR [rsp+0x8]
   18121:	xor    rax,QWORD PTR fs:0x28
   1812a:	jne    1819d <g_str_equal@plt+0xfde5>
   1812c:	add    rsp,0x18
   18130:	pop    rbx
   18131:	pop    rbp
   18132:	pop    r12
   18134:	pop    r13
   18136:	ret    
   18137:	nop    WORD PTR [rax+rax*1+0x0]
   18140:	mov    rsi,QWORD PTR [rbx]
   18143:	test   rsi,rsi
   18146:	je     1815a <g_str_equal@plt+0xfda2>
   18148:	mov    rdx,r12
   1814b:	mov    rdi,rbp
   1814e:	call   17fb0 <g_str_equal@plt+0xfbf8>
   18153:	cmp    QWORD PTR [rsp],0x0
   18158:	je     18190 <g_str_equal@plt+0xfdd8>
   1815a:	mov    rsi,rbx
   1815d:	mov    rdi,rbp
   18160:	call   20340 <g_str_equal@plt+0x17f88>
   18165:	mov    rsi,QWORD PTR [rsp]
   18169:	test   rsi,rsi
   1816c:	je     18114 <g_str_equal@plt+0xfd5c>
   1816e:	mov    rdi,rbp
   18171:	call   20ab0 <g_str_equal@plt+0x186f8>
   18176:	test   al,al
   18178:	je     18189 <g_str_equal@plt+0xfdd1>
   1817a:	mov    rdi,QWORD PTR [rbx]
   1817d:	call   14f70 <g_str_equal@plt+0xcbb8>
   18182:	mov    QWORD PTR [rbx],0x0
   18189:	mov    rsi,QWORD PTR [rsp]
   1818d:	jmp    18114 <g_str_equal@plt+0xfd5c>
   1818f:	nop
   18190:	mov    rsi,r12
   18193:	mov    rdi,rbp
   18196:	call   20290 <g_str_equal@plt+0x17ed8>
   1819b:	jmp    1815a <g_str_equal@plt+0xfda2>
   1819d:	call   8050 <__stack_chk_fail@plt>
   181a2:	nop    DWORD PTR [rax+0x0]
   181a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   181b0:	push   r13
   181b2:	push   r12
   181b4:	mov    r13,rdx
   181b7:	push   rbp
   181b8:	push   rbx
   181b9:	mov    rdx,rsi
   181bc:	mov    rbx,rsi
   181bf:	lea    rsi,[rip+0x13f5d]        # 2c123 <_fini@@Base+0x2e9f>
   181c6:	mov    rbp,rdi
   181c9:	sub    rsp,0x18
   181cd:	mov    rax,QWORD PTR fs:0x28
   181d6:	mov    QWORD PTR [rsp+0x8],rax
   181db:	xor    eax,eax
   181dd:	mov    QWORD PTR [rsp],0x0
   181e5:	mov    r12,rsp
   181e8:	call   209e0 <g_str_equal@plt+0x18628>
   181ed:	test   al,al
   181ef:	je     18238 <g_str_equal@plt+0xfe80>
   181f1:	lea    rsi,[rip+0x13f2b]        # 2c123 <_fini@@Base+0x2e9f>
   181f8:	lea    rdx,[rbx+0x8]
   181fc:	mov    rcx,r12
   181ff:	mov    rdi,rbp
   18202:	call   21550 <g_str_equal@plt+0x19198>
   18207:	mov    rsi,QWORD PTR [rsp]
   1820b:	test   rsi,rsi
   1820e:	je     18238 <g_str_equal@plt+0xfe80>
   18210:	mov    rdi,r13
   18213:	call   df30 <g_str_equal@plt+0x5b78>
   18218:	mov    rax,QWORD PTR [rsp+0x8]
   1821d:	xor    rax,QWORD PTR fs:0x28
   18226:	jne    18254 <g_str_equal@plt+0xfe9c>
   18228:	add    rsp,0x18
   1822c:	pop    rbx
   1822d:	pop    rbp
   1822e:	pop    r12
   18230:	pop    r13
   18232:	ret    
   18233:	nop    DWORD PTR [rax+rax*1+0x0]
   18238:	lea    rsi,[rip+0x14c9a]        # 2ced9 <_fini@@Base+0x3c55>
   1823f:	lea    rdx,[rbx+0x10]
   18243:	mov    rcx,r12
   18246:	mov    rdi,rbp
   18249:	call   20ac0 <g_str_equal@plt+0x18708>
   1824e:	mov    rsi,QWORD PTR [rsp]
   18252:	jmp    18210 <g_str_equal@plt+0xfe58>
   18254:	call   8050 <__stack_chk_fail@plt>
   18259:	nop    DWORD PTR [rax+0x0]
   18260:	push   r13
   18262:	push   r12
   18264:	mov    r13,rcx
   18267:	push   rbp
   18268:	push   rbx
   18269:	mov    ecx,0x18
   1826e:	mov    rbp,rdi
   18271:	mov    rbx,rdx
   18274:	sub    rsp,0x18
   18278:	mov    r12,rsp
   1827b:	mov    QWORD PTR [rsp],0x0
   18283:	mov    r8,r12
   18286:	mov    rax,QWORD PTR fs:0x28
   1828f:	mov    QWORD PTR [rsp+0x8],rax
   18294:	xor    eax,eax
   18296:	call   200e0 <g_str_equal@plt+0x17d28>
   1829b:	mov    rsi,QWORD PTR [rsp]
   1829f:	test   rsi,rsi
   182a2:	je     182d0 <g_str_equal@plt+0xff18>
   182a4:	mov    rdi,r13
   182a7:	call   df30 <g_str_equal@plt+0x5b78>
   182ac:	mov    rax,QWORD PTR [rsp+0x8]
   182b1:	xor    rax,QWORD PTR fs:0x28
   182ba:	jne    1832d <g_str_equal@plt+0xff75>
   182bc:	add    rsp,0x18
   182c0:	pop    rbx
   182c1:	pop    rbp
   182c2:	pop    r12
   182c4:	pop    r13
   182c6:	ret    
   182c7:	nop    WORD PTR [rax+rax*1+0x0]
   182d0:	mov    rsi,QWORD PTR [rbx]
   182d3:	test   rsi,rsi
   182d6:	je     182ea <g_str_equal@plt+0xff32>
   182d8:	mov    rdx,r12
   182db:	mov    rdi,rbp
   182de:	call   181b0 <g_str_equal@plt+0xfdf8>
   182e3:	cmp    QWORD PTR [rsp],0x0
   182e8:	je     18320 <g_str_equal@plt+0xff68>
   182ea:	mov    rsi,rbx
   182ed:	mov    rdi,rbp
   182f0:	call   20340 <g_str_equal@plt+0x17f88>
   182f5:	mov    rsi,QWORD PTR [rsp]
   182f9:	test   rsi,rsi
   182fc:	je     182a4 <g_str_equal@plt+0xfeec>
   182fe:	mov    rdi,rbp
   18301:	call   20ab0 <g_str_equal@plt+0x186f8>
   18306:	test   al,al
   18308:	je     18319 <g_str_equal@plt+0xff61>
   1830a:	mov    rdi,QWORD PTR [rbx]
   1830d:	call   15030 <g_str_equal@plt+0xcc78>
   18312:	mov    QWORD PTR [rbx],0x0
   18319:	mov    rsi,QWORD PTR [rsp]
   1831d:	jmp    182a4 <g_str_equal@plt+0xfeec>
   1831f:	nop
   18320:	mov    rsi,r12
   18323:	mov    rdi,rbp
   18326:	call   20290 <g_str_equal@plt+0x17ed8>
   1832b:	jmp    182ea <g_str_equal@plt+0xff32>
   1832d:	call   8050 <__stack_chk_fail@plt>
   18332:	nop    DWORD PTR [rax+0x0]
   18336:	nop    WORD PTR cs:[rax+rax*1+0x0]
   18340:	push   r13
   18342:	push   r12
   18344:	mov    r13,rdx
   18347:	push   rbp
   18348:	push   rbx
   18349:	mov    rdx,rsi
   1834c:	mov    rbx,rsi
   1834f:	lea    rsi,[rip+0x14b89]        # 2cedf <_fini@@Base+0x3c5b>
   18356:	mov    rbp,rdi
   18359:	sub    rsp,0x18
   1835d:	mov    r12,rsp
   18360:	mov    QWORD PTR [rsp],0x0
   18368:	mov    rcx,r12
   1836b:	mov    rax,QWORD PTR fs:0x28
   18374:	mov    QWORD PTR [rsp+0x8],rax
   18379:	xor    eax,eax
   1837b:	call   20ac0 <g_str_equal@plt+0x18708>
   18380:	mov    rsi,QWORD PTR [rsp]
   18384:	test   rsi,rsi
   18387:	je     183b0 <g_str_equal@plt+0xfff8>
   18389:	mov    rdi,r13
   1838c:	call   df30 <g_str_equal@plt+0x5b78>
   18391:	mov    rax,QWORD PTR [rsp+0x8]
   18396:	xor    rax,QWORD PTR fs:0x28
   1839f:	jne    183cc <g_str_equal@plt+0x10014>
   183a1:	add    rsp,0x18
   183a5:	pop    rbx
   183a6:	pop    rbp
   183a7:	pop    r12
   183a9:	pop    r13
   183ab:	ret    
   183ac:	nop    DWORD PTR [rax+0x0]
   183b0:	lea    rsi,[rip+0x14b2f]        # 2cee6 <_fini@@Base+0x3c62>
   183b7:	lea    rdx,[rbx+0x8]
   183bb:	mov    rcx,r12
   183be:	mov    rdi,rbp
   183c1:	call   20ac0 <g_str_equal@plt+0x18708>
   183c6:	mov    rsi,QWORD PTR [rsp]
   183ca:	jmp    18389 <g_str_equal@plt+0xffd1>
   183cc:	call   8050 <__stack_chk_fail@plt>
   183d1:	nop    DWORD PTR [rax+rax*1+0x0]
   183d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   183e0:	push   r13
   183e2:	push   r12
   183e4:	mov    r13,rcx
   183e7:	push   rbp
   183e8:	push   rbx
   183e9:	mov    ecx,0x10
   183ee:	mov    rbp,rdi
   183f1:	mov    rbx,rdx
   183f4:	sub    rsp,0x18
   183f8:	mov    r12,rsp
   183fb:	mov    QWORD PTR [rsp],0x0
   18403:	mov    r8,r12
   18406:	mov    rax,QWORD PTR fs:0x28
   1840f:	mov    QWORD PTR [rsp+0x8],rax
   18414:	xor    eax,eax
   18416:	call   200e0 <g_str_equal@plt+0x17d28>
   1841b:	mov    rsi,QWORD PTR [rsp]
   1841f:	test   rsi,rsi
   18422:	je     18450 <g_str_equal@plt+0x10098>
   18424:	mov    rdi,r13
   18427:	call   df30 <g_str_equal@plt+0x5b78>
   1842c:	mov    rax,QWORD PTR [rsp+0x8]
   18431:	xor    rax,QWORD PTR fs:0x28
   1843a:	jne    184ad <g_str_equal@plt+0x100f5>
   1843c:	add    rsp,0x18
   18440:	pop    rbx
   18441:	pop    rbp
   18442:	pop    r12
   18444:	pop    r13
   18446:	ret    
   18447:	nop    WORD PTR [rax+rax*1+0x0]
   18450:	mov    rsi,QWORD PTR [rbx]
   18453:	test   rsi,rsi
   18456:	je     1846a <g_str_equal@plt+0x100b2>
   18458:	mov    rdx,r12
   1845b:	mov    rdi,rbp
   1845e:	call   18340 <g_str_equal@plt+0xff88>
   18463:	cmp    QWORD PTR [rsp],0x0
   18468:	je     184a0 <g_str_equal@plt+0x100e8>
   1846a:	mov    rsi,rbx
   1846d:	mov    rdi,rbp
   18470:	call   20340 <g_str_equal@plt+0x17f88>
   18475:	mov    rsi,QWORD PTR [rsp]
   18479:	test   rsi,rsi
   1847c:	je     18424 <g_str_equal@plt+0x1006c>
   1847e:	mov    rdi,rbp
   18481:	call   20ab0 <g_str_equal@plt+0x186f8>
   18486:	test   al,al
   18488:	je     18499 <g_str_equal@plt+0x100e1>
   1848a:	mov    rdi,QWORD PTR [rbx]
   1848d:	call   15070 <g_str_equal@plt+0xccb8>
   18492:	mov    QWORD PTR [rbx],0x0
   18499:	mov    rsi,QWORD PTR [rsp]
   1849d:	jmp    18424 <g_str_equal@plt+0x1006c>
   1849f:	nop
   184a0:	mov    rsi,r12
   184a3:	mov    rdi,rbp
   184a6:	call   20290 <g_str_equal@plt+0x17ed8>
   184ab:	jmp    1846a <g_str_equal@plt+0x100b2>
   184ad:	call   8050 <__stack_chk_fail@plt>
   184b2:	nop    DWORD PTR [rax+0x0]
   184b6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   184c0:	push   r14
   184c2:	push   r13
   184c4:	mov    r14,rcx
   184c7:	push   r12
   184c9:	push   rbp
   184ca:	mov    ecx,0x10
   184cf:	push   rbx
   184d0:	mov    rbp,rdi
   184d3:	mov    r13,rdx
   184d6:	sub    rsp,0x10
   184da:	mov    r12,rsp
   184dd:	mov    QWORD PTR [rsp],0x0
   184e5:	mov    r8,r12
   184e8:	mov    rax,QWORD PTR fs:0x28
   184f1:	mov    QWORD PTR [rsp+0x8],rax
   184f6:	xor    eax,eax
   184f8:	call   203e0 <g_str_equal@plt+0x18028>
   184fd:	mov    rsi,QWORD PTR [rsp]
   18501:	test   rsi,rsi
   18504:	je     18530 <g_str_equal@plt+0x10178>
   18506:	mov    rdi,r14
   18509:	call   df30 <g_str_equal@plt+0x5b78>
   1850e:	mov    rax,QWORD PTR [rsp+0x8]
   18513:	xor    rax,QWORD PTR fs:0x28
   1851c:	jne    185c4 <g_str_equal@plt+0x1020c>
   18522:	add    rsp,0x10
   18526:	pop    rbx
   18527:	pop    rbp
   18528:	pop    r12
   1852a:	pop    r13
   1852c:	pop    r14
   1852e:	ret    
   1852f:	nop
   18530:	mov    rbx,QWORD PTR [r13+0x0]
   18534:	test   rbx,rbx
   18537:	jne    18558 <g_str_equal@plt+0x101a0>
   18539:	jmp    185b7 <g_str_equal@plt+0x101ff>
   1853b:	nop    DWORD PTR [rax+rax*1+0x0]
   18540:	mov    rsi,rbx
   18543:	mov    edx,0x10
   18548:	mov    rdi,rbp
   1854b:	call   20530 <g_str_equal@plt+0x18178>
   18550:	test   rax,rax
   18553:	mov    rbx,rax
   18556:	je     185b0 <g_str_equal@plt+0x101f8>
   18558:	lea    rdx,[rbx+0x8]
   1855c:	xor    esi,esi
   1855e:	mov    rcx,r12
   18561:	mov    rdi,rbp
   18564:	call   17ed0 <g_str_equal@plt+0xfb18>
   18569:	cmp    QWORD PTR [rsp],0x0
   1856e:	je     18540 <g_str_equal@plt+0x10188>
   18570:	mov    rsi,r13
   18573:	mov    rdi,rbp
   18576:	call   206d0 <g_str_equal@plt+0x18318>
   1857b:	mov    rsi,QWORD PTR [rsp]
   1857f:	test   rsi,rsi
   18582:	je     18506 <g_str_equal@plt+0x1014e>
   18584:	mov    rdi,rbp
   18587:	call   20ab0 <g_str_equal@plt+0x186f8>
   1858c:	test   al,al
   1858e:	je     185a1 <g_str_equal@plt+0x101e9>
   18590:	mov    rdi,QWORD PTR [r13+0x0]
   18594:	call   150b0 <g_str_equal@plt+0xccf8>
   18599:	mov    QWORD PTR [r13+0x0],0x0
   185a1:	mov    rsi,QWORD PTR [rsp]
   185a5:	jmp    18506 <g_str_equal@plt+0x1014e>
   185aa:	nop    WORD PTR [rax+rax*1+0x0]
   185b0:	cmp    QWORD PTR [rsp],0x0
   185b5:	jne    18570 <g_str_equal@plt+0x101b8>
   185b7:	mov    rsi,r12
   185ba:	mov    rdi,rbp
   185bd:	call   20620 <g_str_equal@plt+0x18268>
   185c2:	jmp    18570 <g_str_equal@plt+0x101b8>
   185c4:	call   8050 <__stack_chk_fail@plt>
   185c9:	nop    DWORD PTR [rax+0x0]
   185d0:	push   r13
   185d2:	push   r12
   185d4:	mov    r13,rcx
   185d7:	push   rbp
   185d8:	push   rbx
   185d9:	mov    ecx,0x58
   185de:	mov    rbp,rdi
   185e1:	mov    rbx,rdx
   185e4:	sub    rsp,0x18
   185e8:	mov    r12,rsp
   185eb:	mov    QWORD PTR [rsp],0x0
   185f3:	mov    r8,r12
   185f6:	mov    rax,QWORD PTR fs:0x28
   185ff:	mov    QWORD PTR [rsp+0x8],rax
   18604:	xor    eax,eax
   18606:	call   200e0 <g_str_equal@plt+0x17d28>
   1860b:	mov    rsi,QWORD PTR [rsp]
   1860f:	test   rsi,rsi
   18612:	je     18640 <g_str_equal@plt+0x10288>
   18614:	mov    rdi,r13
   18617:	call   df30 <g_str_equal@plt+0x5b78>
   1861c:	mov    rax,QWORD PTR [rsp+0x8]
   18621:	xor    rax,QWORD PTR fs:0x28
   1862a:	jne    1869d <g_str_equal@plt+0x102e5>
   1862c:	add    rsp,0x18
   18630:	pop    rbx
   18631:	pop    rbp
   18632:	pop    r12
   18634:	pop    r13
   18636:	ret    
   18637:	nop    WORD PTR [rax+rax*1+0x0]
   18640:	mov    rsi,QWORD PTR [rbx]
   18643:	test   rsi,rsi
   18646:	je     1865a <g_str_equal@plt+0x102a2>
   18648:	mov    rdx,r12
   1864b:	mov    rdi,rbp
   1864e:	call   18950 <g_str_equal@plt+0x10598>
   18653:	cmp    QWORD PTR [rsp],0x0
   18658:	je     18690 <g_str_equal@plt+0x102d8>
   1865a:	mov    rsi,rbx
   1865d:	mov    rdi,rbp
   18660:	call   20340 <g_str_equal@plt+0x17f88>
   18665:	mov    rsi,QWORD PTR [rsp]
   18669:	test   rsi,rsi
   1866c:	je     18614 <g_str_equal@plt+0x1025c>
   1866e:	mov    rdi,rbp
   18671:	call   20ab0 <g_str_equal@plt+0x186f8>
   18676:	test   al,al
   18678:	je     18689 <g_str_equal@plt+0x102d1>
   1867a:	mov    rdi,QWORD PTR [rbx]
   1867d:	call   150f0 <g_str_equal@plt+0xcd38>
   18682:	mov    QWORD PTR [rbx],0x0
   18689:	mov    rsi,QWORD PTR [rsp]
   1868d:	jmp    18614 <g_str_equal@plt+0x1025c>
   1868f:	nop
   18690:	mov    rsi,r12
   18693:	mov    rdi,rbp
   18696:	call   20290 <g_str_equal@plt+0x17ed8>
   1869b:	jmp    1865a <g_str_equal@plt+0x102a2>
   1869d:	call   8050 <__stack_chk_fail@plt>
   186a2:	nop    DWORD PTR [rax+0x0]
   186a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   186b0:	push   r14
   186b2:	push   r13
   186b4:	mov    r14,rcx
   186b7:	push   r12
   186b9:	push   rbp
   186ba:	mov    ecx,0x10
   186bf:	push   rbx
   186c0:	mov    rbp,rdi
   186c3:	mov    r13,rdx
   186c6:	sub    rsp,0x10
   186ca:	mov    r12,rsp
   186cd:	mov    QWORD PTR [rsp],0x0
   186d5:	mov    r8,r12
   186d8:	mov    rax,QWORD PTR fs:0x28
   186e1:	mov    QWORD PTR [rsp+0x8],rax
   186e6:	xor    eax,eax
   186e8:	call   203e0 <g_str_equal@plt+0x18028>
   186ed:	mov    rsi,QWORD PTR [rsp]
   186f1:	test   rsi,rsi
   186f4:	je     18720 <g_str_equal@plt+0x10368>
   186f6:	mov    rdi,r14
   186f9:	call   df30 <g_str_equal@plt+0x5b78>
   186fe:	mov    rax,QWORD PTR [rsp+0x8]
   18703:	xor    rax,QWORD PTR fs:0x28
   1870c:	jne    187b4 <g_str_equal@plt+0x103fc>
   18712:	add    rsp,0x10
   18716:	pop    rbx
   18717:	pop    rbp
   18718:	pop    r12
   1871a:	pop    r13
   1871c:	pop    r14
   1871e:	ret    
   1871f:	nop
   18720:	mov    rbx,QWORD PTR [r13+0x0]
   18724:	test   rbx,rbx
   18727:	jne    18748 <g_str_equal@plt+0x10390>
   18729:	jmp    187a7 <g_str_equal@plt+0x103ef>
   1872b:	nop    DWORD PTR [rax+rax*1+0x0]
   18730:	mov    rsi,rbx
   18733:	mov    edx,0x10
   18738:	mov    rdi,rbp
   1873b:	call   20530 <g_str_equal@plt+0x18178>
   18740:	test   rax,rax
   18743:	mov    rbx,rax
   18746:	je     187a0 <g_str_equal@plt+0x103e8>
   18748:	lea    rdx,[rbx+0x8]
   1874c:	xor    esi,esi
   1874e:	mov    rcx,r12
   18751:	mov    rdi,rbp
   18754:	call   185d0 <g_str_equal@plt+0x10218>
   18759:	cmp    QWORD PTR [rsp],0x0
   1875e:	je     18730 <g_str_equal@plt+0x10378>
   18760:	mov    rsi,r13
   18763:	mov    rdi,rbp
   18766:	call   206d0 <g_str_equal@plt+0x18318>
   1876b:	mov    rsi,QWORD PTR [rsp]
   1876f:	test   rsi,rsi
   18772:	je     186f6 <g_str_equal@plt+0x1033e>
   18774:	mov    rdi,rbp
   18777:	call   20ab0 <g_str_equal@plt+0x186f8>
   1877c:	test   al,al
   1877e:	je     18791 <g_str_equal@plt+0x103d9>
   18780:	mov    rdi,QWORD PTR [r13+0x0]
   18784:	call   14fb0 <g_str_equal@plt+0xcbf8>
   18789:	mov    QWORD PTR [r13+0x0],0x0
   18791:	mov    rsi,QWORD PTR [rsp]
   18795:	jmp    186f6 <g_str_equal@plt+0x1033e>
   1879a:	nop    WORD PTR [rax+rax*1+0x0]
   187a0:	cmp    QWORD PTR [rsp],0x0
   187a5:	jne    18760 <g_str_equal@plt+0x103a8>
   187a7:	mov    rsi,r12
   187aa:	mov    rdi,rbp
   187ad:	call   20620 <g_str_equal@plt+0x18268>
   187b2:	jmp    18760 <g_str_equal@plt+0x103a8>
   187b4:	call   8050 <__stack_chk_fail@plt>
   187b9:	nop    DWORD PTR [rax+0x0]
   187c0:	push   r13
   187c2:	push   r12
   187c4:	mov    r13,rdx
   187c7:	push   rbp
   187c8:	push   rbx
   187c9:	mov    rdx,rsi
   187cc:	mov    rbx,rsi
   187cf:	lea    rsi,[rip+0x14717]        # 2ceed <_fini@@Base+0x3c69>
   187d6:	mov    rbp,rdi
   187d9:	sub    rsp,0x18
   187dd:	mov    r12,rsp
   187e0:	mov    QWORD PTR [rsp],0x0
   187e8:	mov    rcx,r12
   187eb:	mov    rax,QWORD PTR fs:0x28
   187f4:	mov    QWORD PTR [rsp+0x8],rax
   187f9:	xor    eax,eax
   187fb:	call   180d0 <g_str_equal@plt+0xfd18>
   18800:	mov    rsi,QWORD PTR [rsp]
   18804:	test   rsi,rsi
   18807:	je     18830 <g_str_equal@plt+0x10478>
   18809:	mov    rdi,r13
   1880c:	call   df30 <g_str_equal@plt+0x5b78>
   18811:	mov    rax,QWORD PTR [rsp+0x8]
   18816:	xor    rax,QWORD PTR fs:0x28
   1881f:	jne    18863 <g_str_equal@plt+0x104ab>
   18821:	add    rsp,0x18
   18825:	pop    rbx
   18826:	pop    rbp
   18827:	pop    r12
   18829:	pop    r13
   1882b:	ret    
   1882c:	nop    DWORD PTR [rax+0x0]
   18830:	lea    rdx,[rbx+0x8]
   18834:	lea    rsi,[rip+0x146b6]        # 2cef1 <_fini@@Base+0x3c6d>
   1883b:	mov    rdi,rbp
   1883e:	call   209e0 <g_str_equal@plt+0x18628>
   18843:	test   al,al
   18845:	je     1885d <g_str_equal@plt+0x104a5>
   18847:	lea    rdx,[rbx+0x10]
   1884b:	lea    rsi,[rip+0x1469f]        # 2cef1 <_fini@@Base+0x3c6d>
   18852:	mov    rcx,r12
   18855:	mov    rdi,rbp
   18858:	call   186b0 <g_str_equal@plt+0x102f8>
   1885d:	mov    rsi,QWORD PTR [rsp]
   18861:	jmp    18809 <g_str_equal@plt+0x10451>
   18863:	call   8050 <__stack_chk_fail@plt>
   18868:	nop    DWORD PTR [rax+rax*1+0x0]
   18870:	push   r13
   18872:	push   r12
   18874:	mov    r13,rcx
   18877:	push   rbp
   18878:	push   rbx
   18879:	mov    ecx,0x18
   1887e:	mov    rbp,rdi
   18881:	mov    rbx,rdx
   18884:	sub    rsp,0x18
   18888:	mov    r12,rsp
   1888b:	mov    QWORD PTR [rsp],0x0
   18893:	mov    r8,r12
   18896:	mov    rax,QWORD PTR fs:0x28
   1889f:	mov    QWORD PTR [rsp+0x8],rax
   188a4:	xor    eax,eax
   188a6:	call   200e0 <g_str_equal@plt+0x17d28>
   188ab:	mov    rsi,QWORD PTR [rsp]
   188af:	test   rsi,rsi
   188b2:	je     188e0 <g_str_equal@plt+0x10528>
   188b4:	mov    rdi,r13
   188b7:	call   df30 <g_str_equal@plt+0x5b78>
   188bc:	mov    rax,QWORD PTR [rsp+0x8]
   188c1:	xor    rax,QWORD PTR fs:0x28
   188ca:	jne    1893d <g_str_equal@plt+0x10585>
   188cc:	add    rsp,0x18
   188d0:	pop    rbx
   188d1:	pop    rbp
   188d2:	pop    r12
   188d4:	pop    r13
   188d6:	ret    
   188d7:	nop    WORD PTR [rax+rax*1+0x0]
   188e0:	mov    rsi,QWORD PTR [rbx]
   188e3:	test   rsi,rsi
   188e6:	je     188fa <g_str_equal@plt+0x10542>
   188e8:	mov    rdx,r12
   188eb:	mov    rdi,rbp
   188ee:	call   187c0 <g_str_equal@plt+0x10408>
   188f3:	cmp    QWORD PTR [rsp],0x0
   188f8:	je     18930 <g_str_equal@plt+0x10578>
   188fa:	mov    rsi,rbx
   188fd:	mov    rdi,rbp
   18900:	call   20340 <g_str_equal@plt+0x17f88>
   18905:	mov    rsi,QWORD PTR [rsp]
   18909:	test   rsi,rsi
   1890c:	je     188b4 <g_str_equal@plt+0x104fc>
   1890e:	mov    rdi,rbp
   18911:	call   20ab0 <g_str_equal@plt+0x186f8>
   18916:	test   al,al
   18918:	je     18929 <g_str_equal@plt+0x10571>
   1891a:	mov    rdi,QWORD PTR [rbx]
   1891d:	call   14ff0 <g_str_equal@plt+0xcc38>
   18922:	mov    QWORD PTR [rbx],0x0
   18929:	mov    rsi,QWORD PTR [rsp]
   1892d:	jmp    188b4 <g_str_equal@plt+0x104fc>
   1892f:	nop
   18930:	mov    rsi,r12
   18933:	mov    rdi,rbp
   18936:	call   20290 <g_str_equal@plt+0x17ed8>
   1893b:	jmp    188fa <g_str_equal@plt+0x10542>
   1893d:	call   8050 <__stack_chk_fail@plt>
   18942:	nop    DWORD PTR [rax+0x0]
   18946:	nop    WORD PTR cs:[rax+rax*1+0x0]
   18950:	push   r13
   18952:	push   r12
   18954:	mov    r13,rdx
   18957:	push   rbp
   18958:	push   rbx
   18959:	mov    rdx,rsi
   1895c:	mov    rbx,rsi
   1895f:	lea    rsi,[rip+0x14587]        # 2ceed <_fini@@Base+0x3c69>
   18966:	mov    rbp,rdi
   18969:	sub    rsp,0x18
   1896d:	mov    r12,rsp
   18970:	mov    QWORD PTR [rsp],0x0
   18978:	mov    rcx,r12
   1897b:	mov    rax,QWORD PTR fs:0x28
   18984:	mov    QWORD PTR [rsp+0x8],rax
   18989:	xor    eax,eax
   1898b:	call   20ac0 <g_str_equal@plt+0x18708>
   18990:	mov    rsi,QWORD PTR [rsp]
   18994:	test   rsi,rsi
   18997:	je     189c0 <g_str_equal@plt+0x10608>
   18999:	mov    rdi,r13
   1899c:	call   df30 <g_str_equal@plt+0x5b78>
   189a1:	mov    rax,QWORD PTR [rsp+0x8]
   189a6:	xor    rax,QWORD PTR fs:0x28
   189af:	jne    18ad7 <g_str_equal@plt+0x1071f>
   189b5:	add    rsp,0x18
   189b9:	pop    rbx
   189ba:	pop    rbp
   189bb:	pop    r12
   189bd:	pop    r13
   189bf:	ret    
   189c0:	lea    rsi,[rip+0x14532]        # 2cef9 <_fini@@Base+0x3c75>
   189c7:	lea    rdx,[rbx+0x8]
   189cb:	mov    rcx,r12
   189ce:	mov    rdi,rbp
   189d1:	call   20ac0 <g_str_equal@plt+0x18708>
   189d6:	mov    rsi,QWORD PTR [rsp]
   189da:	test   rsi,rsi
   189dd:	jne    18999 <g_str_equal@plt+0x105e1>
   189df:	lea    rsi,[rip+0x14518]        # 2cefe <_fini@@Base+0x3c7a>
   189e6:	lea    rdx,[rbx+0x10]
   189ea:	mov    rcx,r12
   189ed:	mov    rdi,rbp
   189f0:	call   20ac0 <g_str_equal@plt+0x18708>
   189f5:	mov    rsi,QWORD PTR [rsp]
   189f9:	test   rsi,rsi
   189fc:	jne    18999 <g_str_equal@plt+0x105e1>
   189fe:	lea    rsi,[rip+0x14502]        # 2cf07 <_fini@@Base+0x3c83>
   18a05:	lea    rdx,[rbx+0x18]
   18a09:	mov    rcx,r12
   18a0c:	mov    rdi,rbp
   18a0f:	call   18260 <g_str_equal@plt+0xfea8>
   18a14:	mov    rsi,QWORD PTR [rsp]
   18a18:	test   rsi,rsi
   18a1b:	jne    18999 <g_str_equal@plt+0x105e1>
   18a21:	lea    rsi,[rip+0x10997]        # 293bf <_fini@@Base+0x13b>
   18a28:	lea    rdx,[rbx+0x20]
   18a2c:	mov    rcx,r12
   18a2f:	mov    rdi,rbp
   18a32:	call   183e0 <g_str_equal@plt+0x10028>
   18a37:	mov    rsi,QWORD PTR [rsp]
   18a3b:	test   rsi,rsi
   18a3e:	jne    18999 <g_str_equal@plt+0x105e1>
   18a44:	lea    rdx,[rbx+0x28]
   18a48:	lea    rsi,[rip+0x144c3]        # 2cf12 <_fini@@Base+0x3c8e>
   18a4f:	mov    rdi,rbp
   18a52:	call   209e0 <g_str_equal@plt+0x18628>
   18a57:	test   al,al
   18a59:	je     18a7e <g_str_equal@plt+0x106c6>
   18a5b:	lea    rsi,[rip+0x144b0]        # 2cf12 <_fini@@Base+0x3c8e>
   18a62:	lea    rdx,[rbx+0x30]
   18a66:	mov    rcx,r12
   18a69:	mov    rdi,rbp
   18a6c:	call   20ac0 <g_str_equal@plt+0x18708>
   18a71:	mov    rsi,QWORD PTR [rsp]
   18a75:	test   rsi,rsi
   18a78:	jne    18999 <g_str_equal@plt+0x105e1>
   18a7e:	lea    rsi,[rip+0x14491]        # 2cf16 <_fini@@Base+0x3c92>
   18a85:	lea    rdx,[rbx+0x38]
   18a89:	mov    rcx,r12
   18a8c:	mov    rdi,rbp
   18a8f:	call   21550 <g_str_equal@plt+0x19198>
   18a94:	mov    rsi,QWORD PTR [rsp]
   18a98:	test   rsi,rsi
   18a9b:	jne    18999 <g_str_equal@plt+0x105e1>
   18aa1:	lea    rdx,[rbx+0x40]
   18aa5:	lea    rsi,[rip+0x14472]        # 2cf1e <_fini@@Base+0x3c9a>
   18aac:	mov    rdi,rbp
   18aaf:	call   209e0 <g_str_equal@plt+0x18628>
   18ab4:	test   al,al
   18ab6:	jne    18adc <g_str_equal@plt+0x10724>
   18ab8:	lea    rsi,[rip+0x1446a]        # 2cf29 <_fini@@Base+0x3ca5>
   18abf:	lea    rdx,[rbx+0x50]
   18ac3:	mov    rcx,r12
   18ac6:	mov    rdi,rbp
   18ac9:	call   184c0 <g_str_equal@plt+0x10108>
   18ace:	mov    rsi,QWORD PTR [rsp]
   18ad2:	jmp    18999 <g_str_equal@plt+0x105e1>
   18ad7:	call   8050 <__stack_chk_fail@plt>
   18adc:	lea    rsi,[rip+0x1443b]        # 2cf1e <_fini@@Base+0x3c9a>
   18ae3:	lea    rdx,[rbx+0x48]
   18ae7:	mov    rcx,r12
   18aea:	mov    rdi,rbp
   18aed:	call   18870 <g_str_equal@plt+0x104b8>
   18af2:	mov    rsi,QWORD PTR [rsp]
   18af6:	test   rsi,rsi
   18af9:	jne    18999 <g_str_equal@plt+0x105e1>
   18aff:	jmp    18ab8 <g_str_equal@plt+0x10700>
   18b01:	nop    DWORD PTR [rax+rax*1+0x0]
   18b06:	nop    WORD PTR cs:[rax+rax*1+0x0]
   18b10:	push   r13
   18b12:	push   r12
   18b14:	mov    r13,rdx
   18b17:	push   rbp
   18b18:	push   rbx
   18b19:	mov    rdx,rsi
   18b1c:	mov    rbx,rsi
   18b1f:	lea    rsi,[rip+0x143c7]        # 2ceed <_fini@@Base+0x3c69>
   18b26:	mov    rbp,rdi
   18b29:	sub    rsp,0x18
   18b2d:	mov    r12,rsp
   18b30:	mov    QWORD PTR [rsp],0x0
   18b38:	mov    rcx,r12
   18b3b:	mov    rax,QWORD PTR fs:0x28
   18b44:	mov    QWORD PTR [rsp+0x8],rax
   18b49:	xor    eax,eax
   18b4b:	call   20ac0 <g_str_equal@plt+0x18708>
   18b50:	mov    rsi,QWORD PTR [rsp]
   18b54:	test   rsi,rsi
   18b57:	je     18b80 <g_str_equal@plt+0x107c8>
   18b59:	mov    rdi,r13
   18b5c:	call   df30 <g_str_equal@plt+0x5b78>
   18b61:	mov    rax,QWORD PTR [rsp+0x8]
   18b66:	xor    rax,QWORD PTR fs:0x28
   18b6f:	jne    18b9c <g_str_equal@plt+0x107e4>
   18b71:	add    rsp,0x18
   18b75:	pop    rbx
   18b76:	pop    rbp
   18b77:	pop    r12
   18b79:	pop    r13
   18b7b:	ret    
   18b7c:	nop    DWORD PTR [rax+0x0]
   18b80:	lea    rsi,[rip+0x1436a]        # 2cef1 <_fini@@Base+0x3c6d>
   18b87:	lea    rdx,[rbx+0x8]
   18b8b:	mov    rcx,r12
   18b8e:	mov    rdi,rbp
   18b91:	call   186b0 <g_str_equal@plt+0x102f8>
   18b96:	mov    rsi,QWORD PTR [rsp]
   18b9a:	jmp    18b59 <g_str_equal@plt+0x107a1>
   18b9c:	call   8050 <__stack_chk_fail@plt>
   18ba1:	nop    DWORD PTR [rax+rax*1+0x0]
   18ba6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   18bb0:	push   r13
   18bb2:	push   r12
   18bb4:	mov    r13,rcx
   18bb7:	push   rbp
   18bb8:	push   rbx
   18bb9:	mov    ecx,0x10
   18bbe:	mov    rbp,rdi
   18bc1:	mov    rbx,rdx
   18bc4:	sub    rsp,0x18
   18bc8:	mov    r12,rsp
   18bcb:	mov    QWORD PTR [rsp],0x0
   18bd3:	mov    r8,r12
   18bd6:	mov    rax,QWORD PTR fs:0x28
   18bdf:	mov    QWORD PTR [rsp+0x8],rax
   18be4:	xor    eax,eax
   18be6:	call   200e0 <g_str_equal@plt+0x17d28>
   18beb:	mov    rsi,QWORD PTR [rsp]
   18bef:	test   rsi,rsi
   18bf2:	je     18c20 <g_str_equal@plt+0x10868>
   18bf4:	mov    rdi,r13
   18bf7:	call   df30 <g_str_equal@plt+0x5b78>
   18bfc:	mov    rax,QWORD PTR [rsp+0x8]
   18c01:	xor    rax,QWORD PTR fs:0x28
   18c0a:	jne    18c7d <g_str_equal@plt+0x108c5>
   18c0c:	add    rsp,0x18
   18c10:	pop    rbx
   18c11:	pop    rbp
   18c12:	pop    r12
   18c14:	pop    r13
   18c16:	ret    
   18c17:	nop    WORD PTR [rax+rax*1+0x0]
   18c20:	mov    rsi,QWORD PTR [rbx]
   18c23:	test   rsi,rsi
   18c26:	je     18c3a <g_str_equal@plt+0x10882>
   18c28:	mov    rdx,r12
   18c2b:	mov    rdi,rbp
   18c2e:	call   18b10 <g_str_equal@plt+0x10758>
   18c33:	cmp    QWORD PTR [rsp],0x0
   18c38:	je     18c70 <g_str_equal@plt+0x108b8>
   18c3a:	mov    rsi,rbx
   18c3d:	mov    rdi,rbp
   18c40:	call   20340 <g_str_equal@plt+0x17f88>
   18c45:	mov    rsi,QWORD PTR [rsp]
   18c49:	test   rsi,rsi
   18c4c:	je     18bf4 <g_str_equal@plt+0x1083c>
   18c4e:	mov    rdi,rbp
   18c51:	call   20ab0 <g_str_equal@plt+0x186f8>
   18c56:	test   al,al
   18c58:	je     18c69 <g_str_equal@plt+0x108b1>
   18c5a:	mov    rdi,QWORD PTR [rbx]
   18c5d:	call   15130 <g_str_equal@plt+0xcd78>
   18c62:	mov    QWORD PTR [rbx],0x0
   18c69:	mov    rsi,QWORD PTR [rsp]
   18c6d:	jmp    18bf4 <g_str_equal@plt+0x1083c>
   18c6f:	nop
   18c70:	mov    rsi,r12
   18c73:	mov    rdi,rbp
   18c76:	call   20290 <g_str_equal@plt+0x17ed8>
   18c7b:	jmp    18c3a <g_str_equal@plt+0x10882>
   18c7d:	call   8050 <__stack_chk_fail@plt>
   18c82:	nop    DWORD PTR [rax+0x0]
   18c86:	nop    WORD PTR cs:[rax+rax*1+0x0]
   18c90:	push   r14
   18c92:	push   r13
   18c94:	mov    r14,rcx
   18c97:	push   r12
   18c99:	push   rbp
   18c9a:	mov    ecx,0x10
   18c9f:	push   rbx
   18ca0:	mov    rbp,rdi
   18ca3:	mov    r13,rdx
   18ca6:	sub    rsp,0x10
   18caa:	mov    r12,rsp
   18cad:	mov    QWORD PTR [rsp],0x0
   18cb5:	mov    r8,r12
   18cb8:	mov    rax,QWORD PTR fs:0x28
   18cc1:	mov    QWORD PTR [rsp+0x8],rax
   18cc6:	xor    eax,eax
   18cc8:	call   203e0 <g_str_equal@plt+0x18028>
   18ccd:	mov    rsi,QWORD PTR [rsp]
   18cd1:	test   rsi,rsi
   18cd4:	je     18d00 <g_str_equal@plt+0x10948>
   18cd6:	mov    rdi,r14
   18cd9:	call   df30 <g_str_equal@plt+0x5b78>
   18cde:	mov    rax,QWORD PTR [rsp+0x8]
   18ce3:	xor    rax,QWORD PTR fs:0x28
   18cec:	jne    18d94 <g_str_equal@plt+0x109dc>
   18cf2:	add    rsp,0x10
   18cf6:	pop    rbx
   18cf7:	pop    rbp
   18cf8:	pop    r12
   18cfa:	pop    r13
   18cfc:	pop    r14
   18cfe:	ret    
   18cff:	nop
   18d00:	mov    rbx,QWORD PTR [r13+0x0]
   18d04:	test   rbx,rbx
   18d07:	jne    18d28 <g_str_equal@plt+0x10970>
   18d09:	jmp    18d87 <g_str_equal@plt+0x109cf>
   18d0b:	nop    DWORD PTR [rax+rax*1+0x0]
   18d10:	mov    rsi,rbx
   18d13:	mov    edx,0x10
   18d18:	mov    rdi,rbp
   18d1b:	call   20530 <g_str_equal@plt+0x18178>
   18d20:	test   rax,rax
   18d23:	mov    rbx,rax
   18d26:	je     18d80 <g_str_equal@plt+0x109c8>
   18d28:	lea    rdx,[rbx+0x8]
   18d2c:	xor    esi,esi
   18d2e:	mov    rcx,r12
   18d31:	mov    rdi,rbp
   18d34:	call   18bb0 <g_str_equal@plt+0x107f8>
   18d39:	cmp    QWORD PTR [rsp],0x0
   18d3e:	je     18d10 <g_str_equal@plt+0x10958>
   18d40:	mov    rsi,r13
   18d43:	mov    rdi,rbp
   18d46:	call   206d0 <g_str_equal@plt+0x18318>
   18d4b:	mov    rsi,QWORD PTR [rsp]
   18d4f:	test   rsi,rsi
   18d52:	je     18cd6 <g_str_equal@plt+0x1091e>
   18d54:	mov    rdi,rbp
   18d57:	call   20ab0 <g_str_equal@plt+0x186f8>
   18d5c:	test   al,al
   18d5e:	je     18d71 <g_str_equal@plt+0x109b9>
   18d60:	mov    rdi,QWORD PTR [r13+0x0]
   18d64:	call   15170 <g_str_equal@plt+0xcdb8>
   18d69:	mov    QWORD PTR [r13+0x0],0x0
   18d71:	mov    rsi,QWORD PTR [rsp]
   18d75:	jmp    18cd6 <g_str_equal@plt+0x1091e>
   18d7a:	nop    WORD PTR [rax+rax*1+0x0]
   18d80:	cmp    QWORD PTR [rsp],0x0
   18d85:	jne    18d40 <g_str_equal@plt+0x10988>
   18d87:	mov    rsi,r12
   18d8a:	mov    rdi,rbp
   18d8d:	call   20620 <g_str_equal@plt+0x18268>
   18d92:	jmp    18d40 <g_str_equal@plt+0x10988>
   18d94:	call   8050 <__stack_chk_fail@plt>
   18d99:	nop    DWORD PTR [rax+0x0]
   18da0:	push   rbx
   18da1:	mov    rbx,rdx
   18da4:	mov    rdx,rsi
   18da7:	lea    rsi,[rip+0x10611]        # 293bf <_fini@@Base+0x13b>
   18dae:	sub    rsp,0x10
   18db2:	mov    rcx,rsp
   18db5:	mov    QWORD PTR [rsp],0x0
   18dbd:	mov    rax,QWORD PTR fs:0x28
   18dc6:	mov    QWORD PTR [rsp+0x8],rax
   18dcb:	xor    eax,eax
   18dcd:	call   20ac0 <g_str_equal@plt+0x18708>
   18dd2:	mov    rsi,QWORD PTR [rsp]
   18dd6:	mov    rdi,rbx
   18dd9:	call   df30 <g_str_equal@plt+0x5b78>
   18dde:	mov    rax,QWORD PTR [rsp+0x8]
   18de3:	xor    rax,QWORD PTR fs:0x28
   18dec:	jne    18df4 <g_str_equal@plt+0x10a3c>
   18dee:	add    rsp,0x10
   18df2:	pop    rbx
   18df3:	ret    
   18df4:	call   8050 <__stack_chk_fail@plt>
   18df9:	nop    DWORD PTR [rax+0x0]
   18e00:	push   r13
   18e02:	push   r12
   18e04:	mov    r13,rdx
   18e07:	push   rbp
   18e08:	push   rbx
   18e09:	mov    rdx,rsi
   18e0c:	mov    rbx,rsi
   18e0f:	lea    rsi,[rip+0x1411b]        # 2cf31 <_fini@@Base+0x3cad>
   18e16:	mov    rbp,rdi
   18e19:	sub    rsp,0x18
   18e1d:	mov    r12,rsp
   18e20:	mov    QWORD PTR [rsp],0x0
   18e28:	mov    rcx,r12
   18e2b:	mov    rax,QWORD PTR fs:0x28
   18e34:	mov    QWORD PTR [rsp+0x8],rax
   18e39:	xor    eax,eax
   18e3b:	call   20ac0 <g_str_equal@plt+0x18708>
   18e40:	mov    rsi,QWORD PTR [rsp]
   18e44:	test   rsi,rsi
   18e47:	je     18e70 <g_str_equal@plt+0x10ab8>
   18e49:	mov    rdi,r13
   18e4c:	call   df30 <g_str_equal@plt+0x5b78>
   18e51:	mov    rax,QWORD PTR [rsp+0x8]
   18e56:	xor    rax,QWORD PTR fs:0x28
   18e5f:	jne    18ee4 <g_str_equal@plt+0x10b2c>
   18e65:	add    rsp,0x18
   18e69:	pop    rbx
   18e6a:	pop    rbp
   18e6b:	pop    r12
   18e6d:	pop    r13
   18e6f:	ret    
   18e70:	lea    rsi,[rip+0x131bc]        # 2c033 <_fini@@Base+0x2daf>
   18e77:	lea    rdx,[rbx+0x8]
   18e7b:	mov    rcx,r12
   18e7e:	mov    rdi,rbp
   18e81:	call   20ac0 <g_str_equal@plt+0x18708>
   18e86:	mov    rsi,QWORD PTR [rsp]
   18e8a:	test   rsi,rsi
   18e8d:	jne    18e49 <g_str_equal@plt+0x10a91>
   18e8f:	lea    rsi,[rip+0x1409f]        # 2cf35 <_fini@@Base+0x3cb1>
   18e96:	lea    rdx,[rbx+0x10]
   18e9a:	mov    rcx,r12
   18e9d:	mov    rdi,rbp
   18ea0:	call   21550 <g_str_equal@plt+0x19198>
   18ea5:	mov    rsi,QWORD PTR [rsp]
   18ea9:	test   rsi,rsi
   18eac:	jne    18e49 <g_str_equal@plt+0x10a91>
   18eae:	lea    rdx,[rbx+0x18]
   18eb2:	lea    rsi,[rip+0x14085]        # 2cf3e <_fini@@Base+0x3cba>
   18eb9:	mov    rdi,rbp
   18ebc:	call   209e0 <g_str_equal@plt+0x18628>
   18ec1:	test   al,al
   18ec3:	je     18edb <g_str_equal@plt+0x10b23>
   18ec5:	lea    rdx,[rbx+0x20]
   18ec9:	lea    rsi,[rip+0x1406e]        # 2cf3e <_fini@@Base+0x3cba>
   18ed0:	mov    rcx,r12
   18ed3:	mov    rdi,rbp
   18ed6:	call   20ac0 <g_str_equal@plt+0x18708>
   18edb:	mov    rsi,QWORD PTR [rsp]
   18edf:	jmp    18e49 <g_str_equal@plt+0x10a91>
   18ee4:	call   8050 <__stack_chk_fail@plt>
   18ee9:	nop    DWORD PTR [rax+0x0]
   18ef0:	push   r13
   18ef2:	push   r12
   18ef4:	mov    r13,rdx
   18ef7:	push   rbp
   18ef8:	push   rbx
   18ef9:	mov    rdx,rsi
   18efc:	mov    rbx,rsi
   18eff:	lea    rsi,[rip+0x1402b]        # 2cf31 <_fini@@Base+0x3cad>
   18f06:	mov    rbp,rdi
   18f09:	sub    rsp,0x18
   18f0d:	mov    r12,rsp
   18f10:	mov    QWORD PTR [rsp],0x0
   18f18:	mov    rcx,r12
   18f1b:	mov    rax,QWORD PTR fs:0x28
   18f24:	mov    QWORD PTR [rsp+0x8],rax
   18f29:	xor    eax,eax
   18f2b:	call   20ac0 <g_str_equal@plt+0x18708>
   18f30:	mov    rsi,QWORD PTR [rsp]
   18f34:	test   rsi,rsi
   18f37:	je     18f60 <g_str_equal@plt+0x10ba8>
   18f39:	mov    rdi,r13
   18f3c:	call   df30 <g_str_equal@plt+0x5b78>
   18f41:	mov    rax,QWORD PTR [rsp+0x8]
   18f46:	xor    rax,QWORD PTR fs:0x28
   18f4f:	jne    18f9b <g_str_equal@plt+0x10be3>
   18f51:	add    rsp,0x18
   18f55:	pop    rbx
   18f56:	pop    rbp
   18f57:	pop    r12
   18f59:	pop    r13
   18f5b:	ret    
   18f5c:	nop    DWORD PTR [rax+0x0]
   18f60:	lea    rsi,[rip+0x130cc]        # 2c033 <_fini@@Base+0x2daf>
   18f67:	lea    rdx,[rbx+0x8]
   18f6b:	mov    rcx,r12
   18f6e:	mov    rdi,rbp
   18f71:	call   20ac0 <g_str_equal@plt+0x18708>
   18f76:	mov    rsi,QWORD PTR [rsp]
   18f7a:	test   rsi,rsi
   18f7d:	jne    18f39 <g_str_equal@plt+0x10b81>
   18f7f:	lea    rsi,[rip+0x13faf]        # 2cf35 <_fini@@Base+0x3cb1>
   18f86:	lea    rdx,[rbx+0x10]
   18f8a:	mov    rcx,r12
   18f8d:	mov    rdi,rbp
   18f90:	call   21550 <g_str_equal@plt+0x19198>
   18f95:	mov    rsi,QWORD PTR [rsp]
   18f99:	jmp    18f39 <g_str_equal@plt+0x10b81>
   18f9b:	call   8050 <__stack_chk_fail@plt>
   18fa0:	push   rbx
   18fa1:	mov    rbx,rdx
   18fa4:	mov    rdx,rsi
   18fa7:	lea    rsi,[rip+0x15a4c]        # 2e9fa <_fini@@Base+0x5776>
   18fae:	sub    rsp,0x10
   18fb2:	mov    rcx,rsp
   18fb5:	mov    QWORD PTR [rsp],0x0
   18fbd:	mov    rax,QWORD PTR fs:0x28
   18fc6:	mov    QWORD PTR [rsp+0x8],rax
   18fcb:	xor    eax,eax
   18fcd:	call   20ac0 <g_str_equal@plt+0x18708>
   18fd2:	mov    rsi,QWORD PTR [rsp]
   18fd6:	mov    rdi,rbx
   18fd9:	call   df30 <g_str_equal@plt+0x5b78>
   18fde:	mov    rax,QWORD PTR [rsp+0x8]
   18fe3:	xor    rax,QWORD PTR fs:0x28
   18fec:	jne    18ff4 <g_str_equal@plt+0x10c3c>
   18fee:	add    rsp,0x10
   18ff2:	pop    rbx
   18ff3:	ret    
   18ff4:	call   8050 <__stack_chk_fail@plt>
   18ff9:	nop    DWORD PTR [rax+0x0]
   19000:	push   r13
   19002:	push   r12
   19004:	mov    r13,rdx
   19007:	push   rbp
   19008:	push   rbx
   19009:	mov    rdx,rsi
   1900c:	mov    rbx,rsi
   1900f:	lea    rsi,[rip+0x13f32]        # 2cf48 <_fini@@Base+0x3cc4>
   19016:	mov    rbp,rdi
   19019:	sub    rsp,0x18
   1901d:	mov    r12,rsp
   19020:	mov    QWORD PTR [rsp],0x0
   19028:	mov    rcx,r12
   1902b:	mov    rax,QWORD PTR fs:0x28
   19034:	mov    QWORD PTR [rsp+0x8],rax
   19039:	xor    eax,eax
   1903b:	call   21550 <g_str_equal@plt+0x19198>
   19040:	mov    rsi,QWORD PTR [rsp]
   19044:	test   rsi,rsi
   19047:	je     19070 <g_str_equal@plt+0x10cb8>
   19049:	mov    rdi,r13
   1904c:	call   df30 <g_str_equal@plt+0x5b78>
   19051:	mov    rax,QWORD PTR [rsp+0x8]
   19056:	xor    rax,QWORD PTR fs:0x28
   1905f:	jne    190a3 <g_str_equal@plt+0x10ceb>
   19061:	add    rsp,0x18
   19065:	pop    rbx
   19066:	pop    rbp
   19067:	pop    r12
   19069:	pop    r13
   1906b:	ret    
   1906c:	nop    DWORD PTR [rax+0x0]
   19070:	lea    rdx,[rbx+0x8]
   19074:	lea    rsi,[rip+0x13ec3]        # 2cf3e <_fini@@Base+0x3cba>
   1907b:	mov    rdi,rbp
   1907e:	call   209e0 <g_str_equal@plt+0x18628>
   19083:	test   al,al
   19085:	je     1909d <g_str_equal@plt+0x10ce5>
   19087:	lea    rdx,[rbx+0x10]
   1908b:	lea    rsi,[rip+0x13eac]        # 2cf3e <_fini@@Base+0x3cba>
   19092:	mov    rcx,r12
   19095:	mov    rdi,rbp
   19098:	call   20ac0 <g_str_equal@plt+0x18708>
   1909d:	mov    rsi,QWORD PTR [rsp]
   190a1:	jmp    19049 <g_str_equal@plt+0x10c91>
   190a3:	call   8050 <__stack_chk_fail@plt>
   190a8:	nop    DWORD PTR [rax+rax*1+0x0]
   190b0:	push   r13
   190b2:	push   r12
   190b4:	mov    r13,rdx
   190b7:	push   rbp
   190b8:	push   rbx
   190b9:	mov    rdx,rsi
   190bc:	mov    rbx,rsi
   190bf:	lea    rsi,[rip+0x152ef]        # 2e3b5 <_fini@@Base+0x5131>
   190c6:	mov    rbp,rdi
   190c9:	sub    rsp,0x18
   190cd:	mov    r12,rsp
   190d0:	mov    QWORD PTR [rsp],0x0
   190d8:	mov    rcx,r12
   190db:	mov    rax,QWORD PTR fs:0x28
   190e4:	mov    QWORD PTR [rsp+0x8],rax
   190e9:	xor    eax,eax
   190eb:	call   21550 <g_str_equal@plt+0x19198>
   190f0:	mov    rsi,QWORD PTR [rsp]
   190f4:	test   rsi,rsi
   190f7:	je     19120 <g_str_equal@plt+0x10d68>
   190f9:	mov    rdi,r13
   190fc:	call   df30 <g_str_equal@plt+0x5b78>
   19101:	mov    rax,QWORD PTR [rsp+0x8]
   19106:	xor    rax,QWORD PTR fs:0x28
   1910f:	jne    19172 <g_str_equal@plt+0x10dba>
   19111:	add    rsp,0x18
   19115:	pop    rbx
   19116:	pop    rbp
   19117:	pop    r12
   19119:	pop    r13
   1911b:	ret    
   1911c:	nop    DWORD PTR [rax+0x0]
   19120:	lea    rsi,[rip+0x13eb5]        # 2cfdc <_fini@@Base+0x3d58>
   19127:	lea    rdx,[rbx+0x8]
   1912b:	mov    rcx,r12
   1912e:	mov    rdi,rbp
   19131:	call   21550 <g_str_equal@plt+0x19198>
   19136:	mov    rsi,QWORD PTR [rsp]
   1913a:	test   rsi,rsi
   1913d:	jne    190f9 <g_str_equal@plt+0x10d41>
   1913f:	lea    rdx,[rbx+0x10]
   19143:	lea    rsi,[rip+0x13e0b]        # 2cf55 <_fini@@Base+0x3cd1>
   1914a:	mov    rdi,rbp
   1914d:	call   209e0 <g_str_equal@plt+0x18628>
   19152:	test   al,al
   19154:	je     1916c <g_str_equal@plt+0x10db4>
   19156:	lea    rdx,[rbx+0x18]
   1915a:	lea    rsi,[rip+0x13df4]        # 2cf55 <_fini@@Base+0x3cd1>
   19161:	mov    rcx,r12
   19164:	mov    rdi,rbp
   19167:	call   21550 <g_str_equal@plt+0x19198>
   1916c:	mov    rsi,QWORD PTR [rsp]
   19170:	jmp    190f9 <g_str_equal@plt+0x10d41>
   19172:	call   8050 <__stack_chk_fail@plt>
   19177:	nop    WORD PTR [rax+rax*1+0x0]
   19180:	push   r13
   19182:	push   r12
   19184:	mov    r13,rcx
   19187:	push   rbp
   19188:	push   rbx
   19189:	mov    ecx,0x20
   1918e:	mov    rbp,rdi
   19191:	mov    rbx,rdx
   19194:	sub    rsp,0x18
   19198:	mov    r12,rsp
   1919b:	mov    QWORD PTR [rsp],0x0
   191a3:	mov    r8,r12
   191a6:	mov    rax,QWORD PTR fs:0x28
   191af:	mov    QWORD PTR [rsp+0x8],rax
   191b4:	xor    eax,eax
   191b6:	call   200e0 <g_str_equal@plt+0x17d28>
   191bb:	mov    rsi,QWORD PTR [rsp]
   191bf:	test   rsi,rsi
   191c2:	je     191f0 <g_str_equal@plt+0x10e38>
   191c4:	mov    rdi,r13
   191c7:	call   df30 <g_str_equal@plt+0x5b78>
   191cc:	mov    rax,QWORD PTR [rsp+0x8]
   191d1:	xor    rax,QWORD PTR fs:0x28
   191da:	jne    1924d <g_str_equal@plt+0x10e95>
   191dc:	add    rsp,0x18
   191e0:	pop    rbx
   191e1:	pop    rbp
   191e2:	pop    r12
   191e4:	pop    r13
   191e6:	ret    
   191e7:	nop    WORD PTR [rax+rax*1+0x0]
   191f0:	mov    rsi,QWORD PTR [rbx]
   191f3:	test   rsi,rsi
   191f6:	je     1920a <g_str_equal@plt+0x10e52>
   191f8:	mov    rdx,r12
   191fb:	mov    rdi,rbp
   191fe:	call   190b0 <g_str_equal@plt+0x10cf8>
   19203:	cmp    QWORD PTR [rsp],0x0
   19208:	je     19240 <g_str_equal@plt+0x10e88>
   1920a:	mov    rsi,rbx
   1920d:	mov    rdi,rbp
   19210:	call   20340 <g_str_equal@plt+0x17f88>
   19215:	mov    rsi,QWORD PTR [rsp]
   19219:	test   rsi,rsi
   1921c:	je     191c4 <g_str_equal@plt+0x10e0c>
   1921e:	mov    rdi,rbp
   19221:	call   20ab0 <g_str_equal@plt+0x186f8>
   19226:	test   al,al
   19228:	je     19239 <g_str_equal@plt+0x10e81>
   1922a:	mov    rdi,QWORD PTR [rbx]
   1922d:	call   151b0 <g_str_equal@plt+0xcdf8>
   19232:	mov    QWORD PTR [rbx],0x0
   19239:	mov    rsi,QWORD PTR [rsp]
   1923d:	jmp    191c4 <g_str_equal@plt+0x10e0c>
   1923f:	nop
   19240:	mov    rsi,r12
   19243:	mov    rdi,rbp
   19246:	call   20290 <g_str_equal@plt+0x17ed8>
   1924b:	jmp    1920a <g_str_equal@plt+0x10e52>
   1924d:	call   8050 <__stack_chk_fail@plt>
   19252:	nop    DWORD PTR [rax+0x0]
   19256:	nop    WORD PTR cs:[rax+rax*1+0x0]
   19260:	push   rbx
   19261:	mov    rbx,rdx
   19264:	mov    rdx,rsi
   19267:	lea    rsi,[rip+0x10058]        # 292c6 <_fini@@Base+0x42>
   1926e:	sub    rsp,0x10
   19272:	mov    rcx,rsp
   19275:	mov    QWORD PTR [rsp],0x0
   1927d:	mov    rax,QWORD PTR fs:0x28
   19286:	mov    QWORD PTR [rsp+0x8],rax
   1928b:	xor    eax,eax
   1928d:	call   21550 <g_str_equal@plt+0x19198>
   19292:	mov    rsi,QWORD PTR [rsp]
   19296:	mov    rdi,rbx
   19299:	call   df30 <g_str_equal@plt+0x5b78>
   1929e:	mov    rax,QWORD PTR [rsp+0x8]
   192a3:	xor    rax,QWORD PTR fs:0x28
   192ac:	jne    192b4 <g_str_equal@plt+0x10efc>
   192ae:	add    rsp,0x10
   192b2:	pop    rbx
   192b3:	ret    
   192b4:	call   8050 <__stack_chk_fail@plt>
   192b9:	nop    DWORD PTR [rax+0x0]
   192c0:	push   r14
   192c2:	push   r13
   192c4:	mov    r14,rcx
   192c7:	push   r12
   192c9:	push   rbp
   192ca:	mov    ecx,0x10
   192cf:	push   rbx
   192d0:	mov    rbp,rdi
   192d3:	mov    r13,rdx
   192d6:	sub    rsp,0x10
   192da:	mov    r12,rsp
   192dd:	mov    QWORD PTR [rsp],0x0
   192e5:	mov    r8,r12
   192e8:	mov    rax,QWORD PTR fs:0x28
   192f1:	mov    QWORD PTR [rsp+0x8],rax
   192f6:	xor    eax,eax
   192f8:	call   203e0 <g_str_equal@plt+0x18028>
   192fd:	mov    rsi,QWORD PTR [rsp]
   19301:	test   rsi,rsi
   19304:	je     19330 <g_str_equal@plt+0x10f78>
   19306:	mov    rdi,r14
   19309:	call   df30 <g_str_equal@plt+0x5b78>
   1930e:	mov    rax,QWORD PTR [rsp+0x8]
   19313:	xor    rax,QWORD PTR fs:0x28
   1931c:	jne    193c4 <g_str_equal@plt+0x1100c>
   19322:	add    rsp,0x10
   19326:	pop    rbx
   19327:	pop    rbp
   19328:	pop    r12
   1932a:	pop    r13
   1932c:	pop    r14
   1932e:	ret    
   1932f:	nop
   19330:	mov    rbx,QWORD PTR [r13+0x0]
   19334:	test   rbx,rbx
   19337:	jne    19358 <g_str_equal@plt+0x10fa0>
   19339:	jmp    193b7 <g_str_equal@plt+0x10fff>
   1933b:	nop    DWORD PTR [rax+rax*1+0x0]
   19340:	mov    rsi,rbx
   19343:	mov    edx,0x10
   19348:	mov    rdi,rbp
   1934b:	call   20530 <g_str_equal@plt+0x18178>
   19350:	test   rax,rax
   19353:	mov    rbx,rax
   19356:	je     193b0 <g_str_equal@plt+0x10ff8>
   19358:	lea    rdx,[rbx+0x8]
   1935c:	xor    esi,esi
   1935e:	mov    rcx,r12
   19361:	mov    rdi,rbp
   19364:	call   19180 <g_str_equal@plt+0x10dc8>
   19369:	cmp    QWORD PTR [rsp],0x0
   1936e:	je     19340 <g_str_equal@plt+0x10f88>
   19370:	mov    rsi,r13
   19373:	mov    rdi,rbp
   19376:	call   206d0 <g_str_equal@plt+0x18318>
   1937b:	mov    rsi,QWORD PTR [rsp]
   1937f:	test   rsi,rsi
   19382:	je     19306 <g_str_equal@plt+0x10f4e>
   19384:	mov    rdi,rbp
   19387:	call   20ab0 <g_str_equal@plt+0x186f8>
   1938c:	test   al,al
   1938e:	je     193a1 <g_str_equal@plt+0x10fe9>
   19390:	mov    rdi,QWORD PTR [r13+0x0]
   19394:	call   151f0 <g_str_equal@plt+0xce38>
   19399:	mov    QWORD PTR [r13+0x0],0x0
   193a1:	mov    rsi,QWORD PTR [rsp]
   193a5:	jmp    19306 <g_str_equal@plt+0x10f4e>
   193aa:	nop    WORD PTR [rax+rax*1+0x0]
   193b0:	cmp    QWORD PTR [rsp],0x0
   193b5:	jne    19370 <g_str_equal@plt+0x10fb8>
   193b7:	mov    rsi,r12
   193ba:	mov    rdi,rbp
   193bd:	call   20620 <g_str_equal@plt+0x18268>
   193c2:	jmp    19370 <g_str_equal@plt+0x10fb8>
   193c4:	call   8050 <__stack_chk_fail@plt>
   193c9:	nop    DWORD PTR [rax+0x0]
   193d0:	push   r13
   193d2:	push   r12
   193d4:	mov    r13,rdx
   193d7:	push   rbp
   193d8:	push   rbx
   193d9:	mov    rdx,rsi
   193dc:	mov    rbx,rsi
   193df:	lea    rsi,[rip+0xfee0]        # 292c6 <_fini@@Base+0x42>
   193e6:	mov    rbp,rdi
   193e9:	sub    rsp,0x18
   193ed:	mov    r12,rsp
   193f0:	mov    QWORD PTR [rsp],0x0
   193f8:	mov    rcx,r12
   193fb:	mov    rax,QWORD PTR fs:0x28
   19404:	mov    QWORD PTR [rsp+0x8],rax
   19409:	xor    eax,eax
   1940b:	call   21550 <g_str_equal@plt+0x19198>
   19410:	mov    rsi,QWORD PTR [rsp]
   19414:	test   rsi,rsi
   19417:	je     19440 <g_str_equal@plt+0x11088>
   19419:	mov    rdi,r13
   1941c:	call   df30 <g_str_equal@plt+0x5b78>
   19421:	mov    rax,QWORD PTR [rsp+0x8]
   19426:	xor    rax,QWORD PTR fs:0x28
   1942f:	jne    1945c <g_str_equal@plt+0x110a4>
   19431:	add    rsp,0x18
   19435:	pop    rbx
   19436:	pop    rbp
   19437:	pop    r12
   19439:	pop    r13
   1943b:	ret    
   1943c:	nop    DWORD PTR [rax+0x0]
   19440:	lea    rsi,[rip+0x13b1a]        # 2cf61 <_fini@@Base+0x3cdd>
   19447:	lea    rdx,[rbx+0x8]
   1944b:	mov    rcx,r12
   1944e:	mov    rdi,rbp
   19451:	call   21550 <g_str_equal@plt+0x19198>
   19456:	mov    rsi,QWORD PTR [rsp]
   1945a:	jmp    19419 <g_str_equal@plt+0x11061>
   1945c:	call   8050 <__stack_chk_fail@plt>
   19461:	nop    DWORD PTR [rax+rax*1+0x0]
   19466:	nop    WORD PTR cs:[rax+rax*1+0x0]
   19470:	push   r13
   19472:	push   r12
   19474:	mov    r13,rdx
   19477:	push   rbp
   19478:	push   rbx
   19479:	mov    rdx,rsi
   1947c:	mov    rbx,rsi
   1947f:	lea    rsi,[rip+0xfe40]        # 292c6 <_fini@@Base+0x42>
   19486:	mov    rbp,rdi
   19489:	sub    rsp,0x18
   1948d:	mov    r12,rsp
   19490:	mov    QWORD PTR [rsp],0x0
   19498:	mov    rcx,r12
   1949b:	mov    rax,QWORD PTR fs:0x28
   194a4:	mov    QWORD PTR [rsp+0x8],rax
   194a9:	xor    eax,eax
   194ab:	call   21550 <g_str_equal@plt+0x19198>
   194b0:	mov    rsi,QWORD PTR [rsp]
   194b4:	test   rsi,rsi
   194b7:	je     194e0 <g_str_equal@plt+0x11128>
   194b9:	mov    rdi,r13
   194bc:	call   df30 <g_str_equal@plt+0x5b78>
   194c1:	mov    rax,QWORD PTR [rsp+0x8]
   194c6:	xor    rax,QWORD PTR fs:0x28
   194cf:	jne    1951b <g_str_equal@plt+0x11163>
   194d1:	add    rsp,0x18
   194d5:	pop    rbx
   194d6:	pop    rbp
   194d7:	pop    r12
   194d9:	pop    r13
   194db:	ret    
   194dc:	nop    DWORD PTR [rax+0x0]
   194e0:	lea    rsi,[rip+0x13a7a]        # 2cf61 <_fini@@Base+0x3cdd>
   194e7:	lea    rdx,[rbx+0x8]
   194eb:	mov    rcx,r12
   194ee:	mov    rdi,rbp
   194f1:	call   21550 <g_str_equal@plt+0x19198>
   194f6:	mov    rsi,QWORD PTR [rsp]
   194fa:	test   rsi,rsi
   194fd:	jne    194b9 <g_str_equal@plt+0x11101>
   194ff:	lea    rsi,[rip+0x154f4]        # 2e9fa <_fini@@Base+0x5776>
   19506:	lea    rdx,[rbx+0x10]
   1950a:	mov    rcx,r12
   1950d:	mov    rdi,rbp
   19510:	call   21790 <g_str_equal@plt+0x193d8>
   19515:	mov    rsi,QWORD PTR [rsp]
   19519:	jmp    194b9 <g_str_equal@plt+0x11101>
   1951b:	call   8050 <__stack_chk_fail@plt>
   19520:	push   r13
   19522:	push   r12
   19524:	mov    r13,rdx
   19527:	push   rbp
   19528:	push   rbx
   19529:	mov    rdx,rsi
   1952c:	mov    rbx,rsi
   1952f:	lea    rsi,[rip+0x139a9]        # 2cedf <_fini@@Base+0x3c5b>
   19536:	mov    rbp,rdi
   19539:	sub    rsp,0x18
   1953d:	mov    r12,rsp
   19540:	mov    QWORD PTR [rsp],0x0
   19548:	mov    rcx,r12
   1954b:	mov    rax,QWORD PTR fs:0x28
   19554:	mov    QWORD PTR [rsp+0x8],rax
   19559:	xor    eax,eax
   1955b:	call   21550 <g_str_equal@plt+0x19198>
   19560:	mov    rsi,QWORD PTR [rsp]
   19564:	test   rsi,rsi
   19567:	je     19590 <g_str_equal@plt+0x111d8>
   19569:	mov    rdi,r13
   1956c:	call   df30 <g_str_equal@plt+0x5b78>
   19571:	mov    rax,QWORD PTR [rsp+0x8]
   19576:	xor    rax,QWORD PTR fs:0x28
   1957f:	jne    195e2 <g_str_equal@plt+0x1122a>
   19581:	add    rsp,0x18
   19585:	pop    rbx
   19586:	pop    rbp
   19587:	pop    r12
   19589:	pop    r13
   1958b:	ret    
   1958c:	nop    DWORD PTR [rax+0x0]
   19590:	lea    rsi,[rip+0x139d3]        # 2cf6a <_fini@@Base+0x3ce6>
   19597:	lea    rdx,[rbx+0x8]
   1959b:	mov    rcx,r12
   1959e:	mov    rdi,rbp
   195a1:	call   21550 <g_str_equal@plt+0x19198>
   195a6:	mov    rsi,QWORD PTR [rsp]
   195aa:	test   rsi,rsi
   195ad:	jne    19569 <g_str_equal@plt+0x111b1>
   195af:	lea    rdx,[rbx+0x10]
   195b3:	lea    rsi,[rip+0x139b7]        # 2cf71 <_fini@@Base+0x3ced>
   195ba:	mov    rdi,rbp
   195bd:	call   209e0 <g_str_equal@plt+0x18628>
   195c2:	test   al,al
   195c4:	je     195dc <g_str_equal@plt+0x11224>
   195c6:	lea    rdx,[rbx+0x18]
   195ca:	lea    rsi,[rip+0x139a0]        # 2cf71 <_fini@@Base+0x3ced>
   195d1:	mov    rcx,r12
   195d4:	mov    rdi,rbp
   195d7:	call   21550 <g_str_equal@plt+0x19198>
   195dc:	mov    rsi,QWORD PTR [rsp]
   195e0:	jmp    19569 <g_str_equal@plt+0x111b1>
   195e2:	call   8050 <__stack_chk_fail@plt>
   195e7:	nop    WORD PTR [rax+rax*1+0x0]
   195f0:	push   r13
   195f2:	push   r12
   195f4:	mov    r13,rdx
   195f7:	push   rbp
   195f8:	push   rbx
   195f9:	mov    rdx,rsi
   195fc:	mov    rbx,rsi
   195ff:	lea    rsi,[rip+0x14daf]        # 2e3b5 <_fini@@Base+0x5131>
   19606:	mov    rbp,rdi
   19609:	sub    rsp,0x18
   1960d:	mov    r12,rsp
   19610:	mov    QWORD PTR [rsp],0x0
   19618:	mov    rcx,r12
   1961b:	mov    rax,QWORD PTR fs:0x28
   19624:	mov    QWORD PTR [rsp+0x8],rax
   19629:	xor    eax,eax
   1962b:	call   21550 <g_str_equal@plt+0x19198>
   19630:	mov    rsi,QWORD PTR [rsp]
   19634:	test   rsi,rsi
   19637:	je     19660 <g_str_equal@plt+0x112a8>
   19639:	mov    rdi,r13
   1963c:	call   df30 <g_str_equal@plt+0x5b78>
   19641:	mov    rax,QWORD PTR [rsp+0x8]
   19646:	xor    rax,QWORD PTR fs:0x28
   1964f:	jne    196cc <g_str_equal@plt+0x11314>
   19651:	add    rsp,0x18
   19655:	pop    rbx
   19656:	pop    rbp
   19657:	pop    r12
   19659:	pop    r13
   1965b:	ret    
   1965c:	nop    DWORD PTR [rax+0x0]
   19660:	lea    rdx,[rbx+0x8]
   19664:	lea    rsi,[rip+0x1390a]        # 2cf75 <_fini@@Base+0x3cf1>
   1966b:	mov    rdi,rbp
   1966e:	call   209e0 <g_str_equal@plt+0x18628>
   19673:	test   al,al
   19675:	je     19696 <g_str_equal@plt+0x112de>
   19677:	lea    rsi,[rip+0x138f7]        # 2cf75 <_fini@@Base+0x3cf1>
   1967e:	lea    rdx,[rbx+0x9]
   19682:	mov    rcx,r12
   19685:	mov    rdi,rbp
   19688:	call   21460 <g_str_equal@plt+0x190a8>
   1968d:	mov    rsi,QWORD PTR [rsp]
   19691:	test   rsi,rsi
   19694:	jne    19639 <g_str_equal@plt+0x11281>
   19696:	lea    rdx,[rbx+0xa]
   1969a:	lea    rsi,[rip+0x138dd]        # 2cf7e <_fini@@Base+0x3cfa>
   196a1:	mov    rdi,rbp
   196a4:	call   209e0 <g_str_equal@plt+0x18628>
   196a9:	test   al,al
   196ab:	je     196c3 <g_str_equal@plt+0x1130b>
   196ad:	lea    rdx,[rbx+0x10]
   196b1:	lea    rsi,[rip+0x138c6]        # 2cf7e <_fini@@Base+0x3cfa>
   196b8:	mov    rcx,r12
   196bb:	mov    rdi,rbp
   196be:	call   21550 <g_str_equal@plt+0x19198>
   196c3:	mov    rsi,QWORD PTR [rsp]
   196c7:	jmp    19639 <g_str_equal@plt+0x11281>
   196cc:	call   8050 <__stack_chk_fail@plt>
   196d1:	nop    DWORD PTR [rax+rax*1+0x0]
   196d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   196e0:	push   r13
   196e2:	push   r12
   196e4:	mov    r13,rcx
   196e7:	push   rbp
   196e8:	push   rbx
   196e9:	mov    ecx,0x18
   196ee:	mov    rbp,rdi
   196f1:	mov    rbx,rdx
   196f4:	sub    rsp,0x18
   196f8:	mov    r12,rsp
   196fb:	mov    QWORD PTR [rsp],0x0
   19703:	mov    r8,r12
   19706:	mov    rax,QWORD PTR fs:0x28
   1970f:	mov    QWORD PTR [rsp+0x8],rax
   19714:	xor    eax,eax
   19716:	call   200e0 <g_str_equal@plt+0x17d28>
   1971b:	mov    rsi,QWORD PTR [rsp]
   1971f:	test   rsi,rsi
   19722:	je     19750 <g_str_equal@plt+0x11398>
   19724:	mov    rdi,r13
   19727:	call   df30 <g_str_equal@plt+0x5b78>
   1972c:	mov    rax,QWORD PTR [rsp+0x8]
   19731:	xor    rax,QWORD PTR fs:0x28
   1973a:	jne    197ad <g_str_equal@plt+0x113f5>
   1973c:	add    rsp,0x18
   19740:	pop    rbx
   19741:	pop    rbp
   19742:	pop    r12
   19744:	pop    r13
   19746:	ret    
   19747:	nop    WORD PTR [rax+rax*1+0x0]
   19750:	mov    rsi,QWORD PTR [rbx]
   19753:	test   rsi,rsi
   19756:	je     1976a <g_str_equal@plt+0x113b2>
   19758:	mov    rdx,r12
   1975b:	mov    rdi,rbp
   1975e:	call   195f0 <g_str_equal@plt+0x11238>
   19763:	cmp    QWORD PTR [rsp],0x0
   19768:	je     197a0 <g_str_equal@plt+0x113e8>
   1976a:	mov    rsi,rbx
   1976d:	mov    rdi,rbp
   19770:	call   20340 <g_str_equal@plt+0x17f88>
   19775:	mov    rsi,QWORD PTR [rsp]
   19779:	test   rsi,rsi
   1977c:	je     19724 <g_str_equal@plt+0x1136c>
   1977e:	mov    rdi,rbp
   19781:	call   20ab0 <g_str_equal@plt+0x186f8>
   19786:	test   al,al
   19788:	je     19799 <g_str_equal@plt+0x113e1>
   1978a:	mov    rdi,QWORD PTR [rbx]
   1978d:	call   15230 <g_str_equal@plt+0xce78>
   19792:	mov    QWORD PTR [rbx],0x0
   19799:	mov    rsi,QWORD PTR [rsp]
   1979d:	jmp    19724 <g_str_equal@plt+0x1136c>
   1979f:	nop
   197a0:	mov    rsi,r12
   197a3:	mov    rdi,rbp
   197a6:	call   20290 <g_str_equal@plt+0x17ed8>
   197ab:	jmp    1976a <g_str_equal@plt+0x113b2>
   197ad:	call   8050 <__stack_chk_fail@plt>
   197b2:	nop    DWORD PTR [rax+0x0]
   197b6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   197c0:	push   r12
   197c2:	push   rbp
   197c3:	mov    r12,rdx
   197c6:	push   rbx
   197c7:	mov    rdx,rsi
   197ca:	mov    rbx,rsi
   197cd:	lea    rsi,[rip+0x137b1]        # 2cf85 <_fini@@Base+0x3d01>
   197d4:	mov    rbp,rdi
   197d7:	sub    rsp,0x10
   197db:	mov    rax,QWORD PTR fs:0x28
   197e4:	mov    QWORD PTR [rsp+0x8],rax
   197e9:	xor    eax,eax
   197eb:	mov    QWORD PTR [rsp],0x0
   197f3:	call   209e0 <g_str_equal@plt+0x18628>
   197f8:	test   al,al
   197fa:	je     19840 <g_str_equal@plt+0x11488>
   197fc:	lea    rsi,[rip+0x13782]        # 2cf85 <_fini@@Base+0x3d01>
   19803:	lea    rdx,[rbx+0x8]
   19807:	mov    rcx,rsp
   1980a:	mov    rdi,rbp
   1980d:	call   21550 <g_str_equal@plt+0x19198>
   19812:	mov    rsi,QWORD PTR [rsp]
   19816:	test   rsi,rsi
   19819:	je     19840 <g_str_equal@plt+0x11488>
   1981b:	mov    rdi,r12
   1981e:	call   df30 <g_str_equal@plt+0x5b78>
   19823:	mov    rax,QWORD PTR [rsp+0x8]
   19828:	xor    rax,QWORD PTR fs:0x28
   19831:	jne    1987c <g_str_equal@plt+0x114c4>
   19833:	add    rsp,0x10
   19837:	pop    rbx
   19838:	pop    rbp
   19839:	pop    r12
   1983b:	ret    
   1983c:	nop    DWORD PTR [rax+0x0]
   19840:	lea    rdx,[rbx+0x10]
   19844:	lea    rsi,[rip+0x1372a]        # 2cf75 <_fini@@Base+0x3cf1>
   1984b:	mov    rdi,rbp
   1984e:	call   209e0 <g_str_equal@plt+0x18628>
   19853:	test   al,al
   19855:	jne    19860 <g_str_equal@plt+0x114a8>
   19857:	mov    rsi,QWORD PTR [rsp]
   1985b:	jmp    1981b <g_str_equal@plt+0x11463>
   1985d:	nop    DWORD PTR [rax]
   19860:	lea    rsi,[rip+0x1370e]        # 2cf75 <_fini@@Base+0x3cf1>
   19867:	lea    rdx,[rbx+0x11]
   1986b:	mov    rcx,rsp
   1986e:	mov    rdi,rbp
   19871:	call   21460 <g_str_equal@plt+0x190a8>
   19876:	mov    rsi,QWORD PTR [rsp]
   1987a:	jmp    1981b <g_str_equal@plt+0x11463>
   1987c:	call   8050 <__stack_chk_fail@plt>
   19881:	nop    DWORD PTR [rax+rax*1+0x0]
   19886:	nop    WORD PTR cs:[rax+rax*1+0x0]
   19890:	push   r14
   19892:	push   r13
   19894:	mov    r14,rcx
   19897:	push   r12
   19899:	push   rbp
   1989a:	mov    ecx,0x10
   1989f:	push   rbx
   198a0:	mov    rbp,rdi
   198a3:	mov    r13,rdx
   198a6:	sub    rsp,0x10
   198aa:	mov    r12,rsp
   198ad:	mov    QWORD PTR [rsp],0x0
   198b5:	mov    r8,r12
   198b8:	mov    rax,QWORD PTR fs:0x28
   198c1:	mov    QWORD PTR [rsp+0x8],rax
   198c6:	xor    eax,eax
   198c8:	call   203e0 <g_str_equal@plt+0x18028>
   198cd:	mov    rsi,QWORD PTR [rsp]
   198d1:	test   rsi,rsi
   198d4:	je     19900 <g_str_equal@plt+0x11548>
   198d6:	mov    rdi,r14
   198d9:	call   df30 <g_str_equal@plt+0x5b78>
   198de:	mov    rax,QWORD PTR [rsp+0x8]
   198e3:	xor    rax,QWORD PTR fs:0x28
   198ec:	jne    19994 <g_str_equal@plt+0x115dc>
   198f2:	add    rsp,0x10
   198f6:	pop    rbx
   198f7:	pop    rbp
   198f8:	pop    r12
   198fa:	pop    r13
   198fc:	pop    r14
   198fe:	ret    
   198ff:	nop
   19900:	mov    rbx,QWORD PTR [r13+0x0]
   19904:	test   rbx,rbx
   19907:	jne    19928 <g_str_equal@plt+0x11570>
   19909:	jmp    19987 <g_str_equal@plt+0x115cf>
   1990b:	nop    DWORD PTR [rax+rax*1+0x0]
   19910:	mov    rsi,rbx
   19913:	mov    edx,0x10
   19918:	mov    rdi,rbp
   1991b:	call   20530 <g_str_equal@plt+0x18178>
   19920:	test   rax,rax
   19923:	mov    rbx,rax
   19926:	je     19980 <g_str_equal@plt+0x115c8>
   19928:	lea    rdx,[rbx+0x8]
   1992c:	xor    esi,esi
   1992e:	mov    rcx,r12
   19931:	mov    rdi,rbp
   19934:	call   196e0 <g_str_equal@plt+0x11328>
   19939:	cmp    QWORD PTR [rsp],0x0
   1993e:	je     19910 <g_str_equal@plt+0x11558>
   19940:	mov    rsi,r13
   19943:	mov    rdi,rbp
   19946:	call   206d0 <g_str_equal@plt+0x18318>
   1994b:	mov    rsi,QWORD PTR [rsp]
   1994f:	test   rsi,rsi
   19952:	je     198d6 <g_str_equal@plt+0x1151e>
   19954:	mov    rdi,rbp
   19957:	call   20ab0 <g_str_equal@plt+0x186f8>
   1995c:	test   al,al
   1995e:	je     19971 <g_str_equal@plt+0x115b9>
   19960:	mov    rdi,QWORD PTR [r13+0x0]
   19964:	call   15270 <g_str_equal@plt+0xceb8>
   19969:	mov    QWORD PTR [r13+0x0],0x0
   19971:	mov    rsi,QWORD PTR [rsp]
   19975:	jmp    198d6 <g_str_equal@plt+0x1151e>
   1997a:	nop    WORD PTR [rax+rax*1+0x0]
   19980:	cmp    QWORD PTR [rsp],0x0
   19985:	jne    19940 <g_str_equal@plt+0x11588>
   19987:	mov    rsi,r12
   1998a:	mov    rdi,rbp
   1998d:	call   20620 <g_str_equal@plt+0x18268>
   19992:	jmp    19940 <g_str_equal@plt+0x11588>
   19994:	call   8050 <__stack_chk_fail@plt>
   19999:	nop    DWORD PTR [rax+0x0]
   199a0:	push   rbx
   199a1:	mov    rbx,rdx
   199a4:	mov    rdx,rsi
   199a7:	lea    rsi,[rip+0x135e2]        # 2cf90 <_fini@@Base+0x3d0c>
   199ae:	sub    rsp,0x10
   199b2:	mov    rcx,rsp
   199b5:	mov    QWORD PTR [rsp],0x0
   199bd:	mov    rax,QWORD PTR fs:0x28
   199c6:	mov    QWORD PTR [rsp+0x8],rax
   199cb:	xor    eax,eax
   199cd:	call   21550 <g_str_equal@plt+0x19198>
   199d2:	mov    rsi,QWORD PTR [rsp]
   199d6:	mov    rdi,rbx
   199d9:	call   df30 <g_str_equal@plt+0x5b78>
   199de:	mov    rax,QWORD PTR [rsp+0x8]
   199e3:	xor    rax,QWORD PTR fs:0x28
   199ec:	jne    199f4 <g_str_equal@plt+0x1163c>
   199ee:	add    rsp,0x10
   199f2:	pop    rbx
   199f3:	ret    
   199f4:	call   8050 <__stack_chk_fail@plt>
   199f9:	nop    DWORD PTR [rax+0x0]
   19a00:	push   rbx
   19a01:	mov    rbx,rdx
   19a04:	mov    rdx,rsi
   19a07:	lea    rsi,[rip+0x13582]        # 2cf90 <_fini@@Base+0x3d0c>
   19a0e:	sub    rsp,0x10
   19a12:	mov    rcx,rsp
   19a15:	mov    QWORD PTR [rsp],0x0
   19a1d:	mov    rax,QWORD PTR fs:0x28
   19a26:	mov    QWORD PTR [rsp+0x8],rax
   19a2b:	xor    eax,eax
   19a2d:	call   21550 <g_str_equal@plt+0x19198>
   19a32:	mov    rsi,QWORD PTR [rsp]
   19a36:	mov    rdi,rbx
   19a39:	call   df30 <g_str_equal@plt+0x5b78>
   19a3e:	mov    rax,QWORD PTR [rsp+0x8]
   19a43:	xor    rax,QWORD PTR fs:0x28
   19a4c:	jne    19a54 <g_str_equal@plt+0x1169c>
   19a4e:	add    rsp,0x10
   19a52:	pop    rbx
   19a53:	ret    
   19a54:	call   8050 <__stack_chk_fail@plt>
   19a59:	nop    DWORD PTR [rax+0x0]
   19a60:	push   rbx
   19a61:	mov    rbx,rdx
   19a64:	mov    rdx,rsi
   19a67:	lea    rsi,[rip+0x12276]        # 2bce4 <_fini@@Base+0x2a60>
   19a6e:	sub    rsp,0x10
   19a72:	mov    rcx,rsp
   19a75:	mov    QWORD PTR [rsp],0x0
   19a7d:	mov    rax,QWORD PTR fs:0x28
   19a86:	mov    QWORD PTR [rsp+0x8],rax
   19a8b:	xor    eax,eax
   19a8d:	call   21460 <g_str_equal@plt+0x190a8>
   19a92:	mov    rsi,QWORD PTR [rsp]
   19a96:	mov    rdi,rbx
   19a99:	call   df30 <g_str_equal@plt+0x5b78>
   19a9e:	mov    rax,QWORD PTR [rsp+0x8]
   19aa3:	xor    rax,QWORD PTR fs:0x28
   19aac:	jne    19ab4 <g_str_equal@plt+0x116fc>
   19aae:	add    rsp,0x10
   19ab2:	pop    rbx
   19ab3:	ret    
   19ab4:	call   8050 <__stack_chk_fail@plt>
   19ab9:	nop    DWORD PTR [rax+0x0]
   19ac0:	push   r13
   19ac2:	push   r12
   19ac4:	mov    r13,rdx
   19ac7:	push   rbp
   19ac8:	push   rbx
   19ac9:	mov    rdx,rsi
   19acc:	mov    rbx,rsi
   19acf:	lea    rsi,[rip+0x134c3]        # 2cf99 <_fini@@Base+0x3d15>
   19ad6:	mov    rbp,rdi
   19ad9:	sub    rsp,0x18
   19add:	mov    r12,rsp
   19ae0:	mov    QWORD PTR [rsp],0x0
   19ae8:	mov    rcx,r12
   19aeb:	mov    rax,QWORD PTR fs:0x28
   19af4:	mov    QWORD PTR [rsp+0x8],rax
   19af9:	xor    eax,eax
   19afb:	call   21550 <g_str_equal@plt+0x19198>
   19b00:	mov    rsi,QWORD PTR [rsp]
   19b04:	test   rsi,rsi
   19b07:	je     19b30 <g_str_equal@plt+0x11778>
   19b09:	mov    rdi,r13
   19b0c:	call   df30 <g_str_equal@plt+0x5b78>
   19b11:	mov    rax,QWORD PTR [rsp+0x8]
   19b16:	xor    rax,QWORD PTR fs:0x28
   19b1f:	jne    19b9c <g_str_equal@plt+0x117e4>
   19b21:	add    rsp,0x18
   19b25:	pop    rbx
   19b26:	pop    rbp
   19b27:	pop    r12
   19b29:	pop    r13
   19b2b:	ret    
   19b2c:	nop    DWORD PTR [rax+0x0]
   19b30:	lea    rdx,[rbx+0x8]
   19b34:	lea    rsi,[rip+0x133b2]        # 2ceed <_fini@@Base+0x3c69>
   19b3b:	mov    rdi,rbp
   19b3e:	call   209e0 <g_str_equal@plt+0x18628>
   19b43:	test   al,al
   19b45:	je     19b66 <g_str_equal@plt+0x117ae>
   19b47:	lea    rsi,[rip+0x1339f]        # 2ceed <_fini@@Base+0x3c69>
   19b4e:	lea    rdx,[rbx+0x10]
   19b52:	mov    rcx,r12
   19b55:	mov    rdi,rbp
   19b58:	call   21550 <g_str_equal@plt+0x19198>
   19b5d:	mov    rsi,QWORD PTR [rsp]
   19b61:	test   rsi,rsi
   19b64:	jne    19b09 <g_str_equal@plt+0x11751>
   19b66:	lea    rdx,[rbx+0x18]
   19b6a:	lea    rsi,[rip+0xf84e]        # 293bf <_fini@@Base+0x13b>
   19b71:	mov    rdi,rbp
   19b74:	call   209e0 <g_str_equal@plt+0x18628>
   19b79:	test   al,al
   19b7b:	je     19b93 <g_str_equal@plt+0x117db>
   19b7d:	lea    rdx,[rbx+0x20]
   19b81:	lea    rsi,[rip+0xf837]        # 293bf <_fini@@Base+0x13b>
   19b88:	mov    rcx,r12
   19b8b:	mov    rdi,rbp
   19b8e:	call   21550 <g_str_equal@plt+0x19198>
   19b93:	mov    rsi,QWORD PTR [rsp]
   19b97:	jmp    19b09 <g_str_equal@plt+0x11751>
   19b9c:	call   8050 <__stack_chk_fail@plt>
   19ba1:	nop    DWORD PTR [rax+rax*1+0x0]
   19ba6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   19bb0:	push   rbx
   19bb1:	mov    rbx,rdx
   19bb4:	mov    rdx,rsi
   19bb7:	lea    rsi,[rip+0xf801]        # 293bf <_fini@@Base+0x13b>
   19bbe:	sub    rsp,0x10
   19bc2:	mov    rcx,rsp
   19bc5:	mov    QWORD PTR [rsp],0x0
   19bcd:	mov    rax,QWORD PTR fs:0x28
   19bd6:	mov    QWORD PTR [rsp+0x8],rax
   19bdb:	xor    eax,eax
   19bdd:	call   21550 <g_str_equal@plt+0x19198>
   19be2:	mov    rsi,QWORD PTR [rsp]
   19be6:	mov    rdi,rbx
   19be9:	call   df30 <g_str_equal@plt+0x5b78>
   19bee:	mov    rax,QWORD PTR [rsp+0x8]
   19bf3:	xor    rax,QWORD PTR fs:0x28
   19bfc:	jne    19c04 <g_str_equal@plt+0x1184c>
   19bfe:	add    rsp,0x10
   19c02:	pop    rbx
   19c03:	ret    
   19c04:	call   8050 <__stack_chk_fail@plt>
   19c09:	nop    DWORD PTR [rax+0x0]
   19c10:	push   r13
   19c12:	push   r12
   19c14:	mov    r13,rdx
   19c17:	push   rbp
   19c18:	push   rbx
   19c19:	mov    rdx,rsi
   19c1c:	mov    rbx,rsi
   19c1f:	lea    rsi,[rip+0x132b9]        # 2cedf <_fini@@Base+0x3c5b>
   19c26:	mov    rbp,rdi
   19c29:	sub    rsp,0x18
   19c2d:	mov    rax,QWORD PTR fs:0x28
   19c36:	mov    QWORD PTR [rsp+0x8],rax
   19c3b:	xor    eax,eax
   19c3d:	mov    QWORD PTR [rsp],0x0
   19c45:	mov    r12,rsp
   19c48:	call   209e0 <g_str_equal@plt+0x18628>
   19c4d:	test   al,al
   19c4f:	je     19c98 <g_str_equal@plt+0x118e0>
   19c51:	lea    rsi,[rip+0x13287]        # 2cedf <_fini@@Base+0x3c5b>
   19c58:	lea    rdx,[rbx+0x8]
   19c5c:	mov    rcx,r12
   19c5f:	mov    rdi,rbp
   19c62:	call   21550 <g_str_equal@plt+0x19198>
   19c67:	mov    rsi,QWORD PTR [rsp]
   19c6b:	test   rsi,rsi
   19c6e:	je     19c98 <g_str_equal@plt+0x118e0>
   19c70:	mov    rdi,r13
   19c73:	call   df30 <g_str_equal@plt+0x5b78>
   19c78:	mov    rax,QWORD PTR [rsp+0x8]
   19c7d:	xor    rax,QWORD PTR fs:0x28
   19c86:	jne    19cb4 <g_str_equal@plt+0x118fc>
   19c88:	add    rsp,0x18
   19c8c:	pop    rbx
   19c8d:	pop    rbp
   19c8e:	pop    r12
   19c90:	pop    r13
   19c92:	ret    
   19c93:	nop    DWORD PTR [rax+rax*1+0x0]
   19c98:	lea    rsi,[rip+0xf627]        # 292c6 <_fini@@Base+0x42>
   19c9f:	lea    rdx,[rbx+0x10]
   19ca3:	mov    rcx,r12
   19ca6:	mov    rdi,rbp
   19ca9:	call   21550 <g_str_equal@plt+0x19198>
   19cae:	mov    rsi,QWORD PTR [rsp]
   19cb2:	jmp    19c70 <g_str_equal@plt+0x118b8>
   19cb4:	call   8050 <__stack_chk_fail@plt>
   19cb9:	nop    DWORD PTR [rax+0x0]
   19cc0:	push   rbx
   19cc1:	mov    r8,rcx
   19cc4:	mov    rbx,rdx
   19cc7:	lea    rcx,[rip+0x223652]        # 23d320 <_fini@@Base+0x21409c>
   19cce:	sub    rsp,0x10
   19cd2:	mov    rax,QWORD PTR fs:0x28
   19cdb:	mov    QWORD PTR [rsp+0x8],rax
   19ce0:	xor    eax,eax
   19ce2:	mov    eax,DWORD PTR [rdx]
   19ce4:	lea    rdx,[rsp+0x4]
   19ce9:	mov    DWORD PTR [rsp+0x4],eax
   19ced:	call   219e0 <g_str_equal@plt+0x19628>
   19cf2:	mov    eax,DWORD PTR [rsp+0x4]
   19cf6:	mov    DWORD PTR [rbx],eax
   19cf8:	mov    rax,QWORD PTR [rsp+0x8]
   19cfd:	xor    rax,QWORD PTR fs:0x28
   19d06:	jne    19d0e <g_str_equal@plt+0x11956>
   19d08:	add    rsp,0x10
   19d0c:	pop    rbx
   19d0d:	ret    
   19d0e:	call   8050 <__stack_chk_fail@plt>
   19d13:	nop    DWORD PTR [rax]
   19d16:	nop    WORD PTR cs:[rax+rax*1+0x0]
   19d20:	push   r13
   19d22:	push   r12
   19d24:	mov    r13,rdx
   19d27:	push   rbp
   19d28:	push   rbx
   19d29:	mov    rdx,rsi
   19d2c:	mov    rbx,rsi
   19d2f:	lea    rsi,[rip+0x1326a]        # 2cfa0 <_fini@@Base+0x3d1c>
   19d36:	mov    rbp,rdi
   19d39:	sub    rsp,0x28
   19d3d:	lea    r12,[rsp+0x10]
   19d42:	mov    QWORD PTR [rsp+0x10],0x0
   19d4b:	mov    rax,QWORD PTR fs:0x28
   19d54:	mov    QWORD PTR [rsp+0x18],rax
   19d59:	xor    eax,eax
   19d5b:	mov    rcx,r12
   19d5e:	call   21460 <g_str_equal@plt+0x190a8>
   19d63:	mov    rsi,QWORD PTR [rsp+0x10]
   19d68:	test   rsi,rsi
   19d6b:	je     19d98 <g_str_equal@plt+0x119e0>
   19d6d:	mov    rdi,r13
   19d70:	call   df30 <g_str_equal@plt+0x5b78>
   19d75:	mov    rax,QWORD PTR [rsp+0x18]
   19d7a:	xor    rax,QWORD PTR fs:0x28
   19d83:	jne    19eb6 <g_str_equal@plt+0x11afe>
   19d89:	add    rsp,0x28
   19d8d:	pop    rbx
   19d8e:	pop    rbp
   19d8f:	pop    r12
   19d91:	pop    r13
   19d93:	ret    
   19d94:	nop    DWORD PTR [rax+0x0]
   19d98:	lea    rsi,[rip+0x1305d]        # 2cdfc <_fini@@Base+0x3b78>
   19d9f:	lea    rdx,[rbx+0x8]
   19da3:	mov    rcx,r12
   19da6:	mov    rdi,rbp
   19da9:	call   21550 <g_str_equal@plt+0x19198>
   19dae:	mov    rsi,QWORD PTR [rsp+0x10]
   19db3:	test   rsi,rsi
   19db6:	jne    19d6d <g_str_equal@plt+0x119b5>
   19db8:	lea    rdx,[rbx+0x10]
   19dbc:	lea    rsi,[rip+0x131e4]        # 2cfa7 <_fini@@Base+0x3d23>
   19dc3:	mov    rdi,rbp
   19dc6:	call   209e0 <g_str_equal@plt+0x18628>
   19dcb:	test   al,al
   19dcd:	je     19df3 <g_str_equal@plt+0x11a3b>
   19dcf:	lea    rsi,[rip+0x131d1]        # 2cfa7 <_fini@@Base+0x3d23>
   19dd6:	lea    rdx,[rbx+0x11]
   19dda:	mov    rcx,r12
   19ddd:	mov    rdi,rbp
   19de0:	call   21460 <g_str_equal@plt+0x190a8>
   19de5:	mov    rsi,QWORD PTR [rsp+0x10]
   19dea:	test   rsi,rsi
   19ded:	jne    19d6d <g_str_equal@plt+0x119b5>
   19df3:	lea    rdx,[rbx+0x12]
   19df7:	lea    rsi,[rip+0x11882]        # 2b680 <_fini@@Base+0x23fc>
   19dfe:	mov    rdi,rbp
   19e01:	call   209e0 <g_str_equal@plt+0x18628>
   19e06:	test   al,al
   19e08:	je     19e2e <g_str_equal@plt+0x11a76>
   19e0a:	lea    rsi,[rip+0x1186f]        # 2b680 <_fini@@Base+0x23fc>
   19e11:	lea    rdx,[rbx+0x18]
   19e15:	mov    rcx,r12
   19e18:	mov    rdi,rbp
   19e1b:	call   20ac0 <g_str_equal@plt+0x18708>
   19e20:	mov    rsi,QWORD PTR [rsp+0x10]
   19e25:	test   rsi,rsi
   19e28:	jne    19d6d <g_str_equal@plt+0x119b5>
   19e2e:	lea    rdx,[rbx+0x20]
   19e32:	lea    rsi,[rip+0x13175]        # 2cfae <_fini@@Base+0x3d2a>
   19e39:	mov    rdi,rbp
   19e3c:	call   209e0 <g_str_equal@plt+0x18628>
   19e41:	test   al,al
   19e43:	je     19e69 <g_str_equal@plt+0x11ab1>
   19e45:	lea    rsi,[rip+0x13162]        # 2cfae <_fini@@Base+0x3d2a>
   19e4c:	lea    rdx,[rbx+0x28]
   19e50:	mov    rcx,r12
   19e53:	mov    rdi,rbp
   19e56:	call   20ac0 <g_str_equal@plt+0x18708>
   19e5b:	mov    rsi,QWORD PTR [rsp+0x10]
   19e60:	test   rsi,rsi
   19e63:	jne    19d6d <g_str_equal@plt+0x119b5>
   19e69:	lea    rdx,[rbx+0x30]
   19e6d:	lea    rsi,[rip+0x13141]        # 2cfb5 <_fini@@Base+0x3d31>
   19e74:	mov    rdi,rbp
   19e77:	call   209e0 <g_str_equal@plt+0x18628>
   19e7c:	test   al,al
   19e7e:	je     19eac <g_str_equal@plt+0x11af4>
   19e80:	mov    eax,DWORD PTR [rbx+0x34]
   19e83:	lea    rdx,[rsp+0xc]
   19e88:	lea    rcx,[rip+0x223491]        # 23d320 <_fini@@Base+0x21409c>
   19e8f:	lea    rsi,[rip+0x1311f]        # 2cfb5 <_fini@@Base+0x3d31>
   19e96:	mov    r8,r12
   19e99:	mov    rdi,rbp
   19e9c:	mov    DWORD PTR [rsp+0xc],eax
   19ea0:	call   219e0 <g_str_equal@plt+0x19628>
   19ea5:	mov    eax,DWORD PTR [rsp+0xc]
   19ea9:	mov    DWORD PTR [rbx+0x34],eax
   19eac:	mov    rsi,QWORD PTR [rsp+0x10]
   19eb1:	jmp    19d6d <g_str_equal@plt+0x119b5>
   19eb6:	call   8050 <__stack_chk_fail@plt>
   19ebb:	nop    DWORD PTR [rax+rax*1+0x0]
   19ec0:	push   rbx
   19ec1:	mov    r8,rcx
   19ec4:	mov    rbx,rdx
   19ec7:	lea    rcx,[rip+0x223412]        # 23d2e0 <_fini@@Base+0x21405c>
   19ece:	sub    rsp,0x10
   19ed2:	mov    rax,QWORD PTR fs:0x28
   19edb:	mov    QWORD PTR [rsp+0x8],rax
   19ee0:	xor    eax,eax
   19ee2:	mov    eax,DWORD PTR [rdx]
   19ee4:	lea    rdx,[rsp+0x4]
   19ee9:	mov    DWORD PTR [rsp+0x4],eax
   19eed:	call   219e0 <g_str_equal@plt+0x19628>
   19ef2:	mov    eax,DWORD PTR [rsp+0x4]
   19ef6:	mov    DWORD PTR [rbx],eax
   19ef8:	mov    rax,QWORD PTR [rsp+0x8]
   19efd:	xor    rax,QWORD PTR fs:0x28
   19f06:	jne    19f0e <g_str_equal@plt+0x11b56>
   19f08:	add    rsp,0x10
   19f0c:	pop    rbx
   19f0d:	ret    
   19f0e:	call   8050 <__stack_chk_fail@plt>
   19f13:	nop    DWORD PTR [rax]
   19f16:	nop    WORD PTR cs:[rax+rax*1+0x0]
   19f20:	push   r13
   19f22:	push   r12
   19f24:	mov    r13,rdx
   19f27:	push   rbp
   19f28:	push   rbx
   19f29:	lea    rcx,[rip+0x2233b0]        # 23d2e0 <_fini@@Base+0x21405c>
   19f30:	mov    rbx,rsi
   19f33:	mov    rbp,rdi
   19f36:	sub    rsp,0x28
   19f3a:	mov    rax,QWORD PTR fs:0x28
   19f43:	mov    QWORD PTR [rsp+0x18],rax
   19f48:	xor    eax,eax
   19f4a:	lea    r12,[rsp+0x10]
   19f4f:	mov    eax,DWORD PTR [rsi]
   19f51:	lea    rdx,[rsp+0xc]
   19f56:	lea    rsi,[rip+0x1305f]        # 2cfbc <_fini@@Base+0x3d38>
   19f5d:	mov    QWORD PTR [rsp+0x10],0x0
   19f66:	mov    r8,r12
   19f69:	mov    DWORD PTR [rsp+0xc],eax
   19f6d:	call   219e0 <g_str_equal@plt+0x19628>
   19f72:	mov    rsi,QWORD PTR [rsp+0x10]
   19f77:	mov    eax,DWORD PTR [rsp+0xc]
   19f7b:	test   rsi,rsi
   19f7e:	mov    DWORD PTR [rbx],eax
   19f80:	je     19fa8 <g_str_equal@plt+0x11bf0>
   19f82:	mov    rdi,r13
   19f85:	call   df30 <g_str_equal@plt+0x5b78>
   19f8a:	mov    rax,QWORD PTR [rsp+0x18]
   19f8f:	xor    rax,QWORD PTR fs:0x28
   19f98:	jne    19fe5 <g_str_equal@plt+0x11c2d>
   19f9a:	add    rsp,0x28
   19f9e:	pop    rbx
   19f9f:	pop    rbp
   19fa0:	pop    r12
   19fa2:	pop    r13
   19fa4:	ret    
   19fa5:	nop    DWORD PTR [rax]
   19fa8:	lea    rsi,[rip+0x126a3]        # 2c652 <_fini@@Base+0x33ce>
   19faf:	lea    rdx,[rbx+0x8]
   19fb3:	mov    rcx,r12
   19fb6:	mov    rdi,rbp
   19fb9:	call   20ac0 <g_str_equal@plt+0x18708>
   19fbe:	mov    rsi,QWORD PTR [rsp+0x10]
   19fc3:	test   rsi,rsi
   19fc6:	jne    19f82 <g_str_equal@plt+0x11bca>
   19fc8:	lea    rsi,[rip+0x12ff4]        # 2cfc3 <_fini@@Base+0x3d3f>
   19fcf:	lea    rdx,[rbx+0x10]
   19fd3:	mov    rcx,r12
   19fd6:	mov    rdi,rbp
   19fd9:	call   20ac0 <g_str_equal@plt+0x18708>
   19fde:	mov    rsi,QWORD PTR [rsp+0x10]
   19fe3:	jmp    19f82 <g_str_equal@plt+0x11bca>
   19fe5:	call   8050 <__stack_chk_fail@plt>
   19fea:	nop    WORD PTR [rax+rax*1+0x0]
   19ff0:	push   r13
   19ff2:	push   r12
   19ff4:	mov    r13,rcx
   19ff7:	push   rbp
   19ff8:	push   rbx
   19ff9:	mov    ecx,0x18
   19ffe:	mov    rbp,rdi
   1a001:	mov    rbx,rdx
   1a004:	sub    rsp,0x18
   1a008:	mov    r12,rsp
   1a00b:	mov    QWORD PTR [rsp],0x0
   1a013:	mov    r8,r12
   1a016:	mov    rax,QWORD PTR fs:0x28
   1a01f:	mov    QWORD PTR [rsp+0x8],rax
   1a024:	xor    eax,eax
   1a026:	call   200e0 <g_str_equal@plt+0x17d28>
   1a02b:	mov    rsi,QWORD PTR [rsp]
   1a02f:	test   rsi,rsi
   1a032:	je     1a060 <g_str_equal@plt+0x11ca8>
   1a034:	mov    rdi,r13
   1a037:	call   df30 <g_str_equal@plt+0x5b78>
   1a03c:	mov    rax,QWORD PTR [rsp+0x8]
   1a041:	xor    rax,QWORD PTR fs:0x28
   1a04a:	jne    1a0bd <g_str_equal@plt+0x11d05>
   1a04c:	add    rsp,0x18
   1a050:	pop    rbx
   1a051:	pop    rbp
   1a052:	pop    r12
   1a054:	pop    r13
   1a056:	ret    
   1a057:	nop    WORD PTR [rax+rax*1+0x0]
   1a060:	mov    rsi,QWORD PTR [rbx]
   1a063:	test   rsi,rsi
   1a066:	je     1a07a <g_str_equal@plt+0x11cc2>
   1a068:	mov    rdx,r12
   1a06b:	mov    rdi,rbp
   1a06e:	call   19f20 <g_str_equal@plt+0x11b68>
   1a073:	cmp    QWORD PTR [rsp],0x0
   1a078:	je     1a0b0 <g_str_equal@plt+0x11cf8>
   1a07a:	mov    rsi,rbx
   1a07d:	mov    rdi,rbp
   1a080:	call   20340 <g_str_equal@plt+0x17f88>
   1a085:	mov    rsi,QWORD PTR [rsp]
   1a089:	test   rsi,rsi
   1a08c:	je     1a034 <g_str_equal@plt+0x11c7c>
   1a08e:	mov    rdi,rbp
   1a091:	call   20ab0 <g_str_equal@plt+0x186f8>
   1a096:	test   al,al
   1a098:	je     1a0a9 <g_str_equal@plt+0x11cf1>
   1a09a:	mov    rdi,QWORD PTR [rbx]
   1a09d:	call   152b0 <g_str_equal@plt+0xcef8>
   1a0a2:	mov    QWORD PTR [rbx],0x0
   1a0a9:	mov    rsi,QWORD PTR [rsp]
   1a0ad:	jmp    1a034 <g_str_equal@plt+0x11c7c>
   1a0af:	nop
   1a0b0:	mov    rsi,r12
   1a0b3:	mov    rdi,rbp
   1a0b6:	call   20290 <g_str_equal@plt+0x17ed8>
   1a0bb:	jmp    1a07a <g_str_equal@plt+0x11cc2>
   1a0bd:	call   8050 <__stack_chk_fail@plt>
   1a0c2:	nop    DWORD PTR [rax+0x0]
   1a0c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1a0d0:	push   r13
   1a0d2:	push   r12
   1a0d4:	mov    r13,rdx
   1a0d7:	push   rbp
   1a0d8:	push   rbx
   1a0d9:	mov    rdx,rsi
   1a0dc:	mov    rbx,rsi
   1a0df:	lea    rsi,[rip+0x12ee3]        # 2cfc9 <_fini@@Base+0x3d45>
   1a0e6:	mov    rbp,rdi
   1a0e9:	sub    rsp,0x18
   1a0ed:	mov    r12,rsp
   1a0f0:	mov    QWORD PTR [rsp],0x0
   1a0f8:	mov    rcx,r12
   1a0fb:	mov    rax,QWORD PTR fs:0x28
   1a104:	mov    QWORD PTR [rsp+0x8],rax
   1a109:	xor    eax,eax
   1a10b:	call   19ff0 <g_str_equal@plt+0x11c38>
   1a110:	mov    rsi,QWORD PTR [rsp]
   1a114:	test   rsi,rsi
   1a117:	je     1a140 <g_str_equal@plt+0x11d88>
   1a119:	mov    rdi,r13
   1a11c:	call   df30 <g_str_equal@plt+0x5b78>
   1a121:	mov    rax,QWORD PTR [rsp+0x8]
   1a126:	xor    rax,QWORD PTR fs:0x28
   1a12f:	jne    1a173 <g_str_equal@plt+0x11dbb>
   1a131:	add    rsp,0x18
   1a135:	pop    rbx
   1a136:	pop    rbp
   1a137:	pop    r12
   1a139:	pop    r13
   1a13b:	ret    
   1a13c:	nop    DWORD PTR [rax+0x0]
   1a140:	lea    rdx,[rbx+0x8]
   1a144:	lea    rsi,[rip+0x142fe]        # 2e449 <_fini@@Base+0x51c5>
   1a14b:	mov    rdi,rbp
   1a14e:	call   209e0 <g_str_equal@plt+0x18628>
   1a153:	test   al,al
   1a155:	je     1a16d <g_str_equal@plt+0x11db5>
   1a157:	lea    rdx,[rbx+0x10]
   1a15b:	lea    rsi,[rip+0x142e7]        # 2e449 <_fini@@Base+0x51c5>
   1a162:	mov    rcx,r12
   1a165:	mov    rdi,rbp
   1a168:	call   21550 <g_str_equal@plt+0x19198>
   1a16d:	mov    rsi,QWORD PTR [rsp]
   1a171:	jmp    1a119 <g_str_equal@plt+0x11d61>
   1a173:	call   8050 <__stack_chk_fail@plt>
   1a178:	nop    DWORD PTR [rax+rax*1+0x0]
   1a180:	push   r15
   1a182:	push   r14
   1a184:	push   r13
   1a186:	push   r12
   1a188:	mov    r12,rdx
   1a18b:	push   rbp
   1a18c:	push   rbx
   1a18d:	mov    rbx,rdi
   1a190:	sub    rsp,0x38
   1a194:	lea    rbp,[rsp+0x20]
   1a199:	mov    QWORD PTR [rsp+0x8],rcx
   1a19e:	mov    ecx,0x10
   1a1a3:	mov    rax,QWORD PTR fs:0x28
   1a1ac:	mov    QWORD PTR [rsp+0x28],rax
   1a1b1:	xor    eax,eax
   1a1b3:	mov    r8,rbp
   1a1b6:	mov    QWORD PTR [rsp+0x20],0x0
   1a1bf:	call   203e0 <g_str_equal@plt+0x18028>
   1a1c4:	mov    rsi,QWORD PTR [rsp+0x20]
   1a1c9:	test   rsi,rsi
   1a1cc:	je     1a200 <g_str_equal@plt+0x11e48>
   1a1ce:	mov    rdi,QWORD PTR [rsp+0x8]
   1a1d3:	call   df30 <g_str_equal@plt+0x5b78>
   1a1d8:	mov    rax,QWORD PTR [rsp+0x28]
   1a1dd:	xor    rax,QWORD PTR fs:0x28
   1a1e6:	jne    1a2bd <g_str_equal@plt+0x11f05>
   1a1ec:	add    rsp,0x38
   1a1f0:	pop    rbx
   1a1f1:	pop    rbp
   1a1f2:	pop    r12
   1a1f4:	pop    r13
   1a1f6:	pop    r14
   1a1f8:	pop    r15
   1a1fa:	ret    
   1a1fb:	nop    DWORD PTR [rax+rax*1+0x0]
   1a200:	mov    r15,QWORD PTR [r12]
   1a204:	lea    r14,[rsp+0x1c]
   1a209:	lea    r13,[rip+0x223110]        # 23d320 <_fini@@Base+0x21409c>
   1a210:	test   r15,r15
   1a213:	jne    1a238 <g_str_equal@plt+0x11e80>
   1a215:	jmp    1a2b0 <g_str_equal@plt+0x11ef8>
   1a21a:	nop    WORD PTR [rax+rax*1+0x0]
   1a220:	mov    rsi,r15
   1a223:	mov    edx,0x10
   1a228:	mov    rdi,rbx
   1a22b:	call   20530 <g_str_equal@plt+0x18178>
   1a230:	test   rax,rax
   1a233:	mov    r15,rax
   1a236:	je     1a2a8 <g_str_equal@plt+0x11ef0>
   1a238:	mov    edx,DWORD PTR [r15+0x8]
   1a23c:	xor    esi,esi
   1a23e:	mov    r8,rbp
   1a241:	mov    rcx,r13
   1a244:	mov    rdi,rbx
   1a247:	mov    DWORD PTR [rsp+0x1c],edx
   1a24b:	mov    rdx,r14
   1a24e:	call   219e0 <g_str_equal@plt+0x19628>
   1a253:	cmp    QWORD PTR [rsp+0x20],0x0
   1a259:	mov    edx,DWORD PTR [rsp+0x1c]
   1a25d:	mov    DWORD PTR [r15+0x8],edx
   1a261:	je     1a220 <g_str_equal@plt+0x11e68>
   1a263:	mov    rsi,r12
   1a266:	mov    rdi,rbx
   1a269:	call   206d0 <g_str_equal@plt+0x18318>
   1a26e:	mov    rsi,QWORD PTR [rsp+0x20]
   1a273:	test   rsi,rsi
   1a276:	je     1a1ce <g_str_equal@plt+0x11e16>
   1a27c:	mov    rdi,rbx
   1a27f:	call   20ab0 <g_str_equal@plt+0x186f8>
   1a284:	test   al,al
   1a286:	je     1a299 <g_str_equal@plt+0x11ee1>
   1a288:	mov    rdi,QWORD PTR [r12]
   1a28c:	call   152f0 <g_str_equal@plt+0xcf38>
   1a291:	mov    QWORD PTR [r12],0x0
   1a299:	mov    rsi,QWORD PTR [rsp+0x20]
   1a29e:	jmp    1a1ce <g_str_equal@plt+0x11e16>
   1a2a3:	nop    DWORD PTR [rax+rax*1+0x0]
   1a2a8:	cmp    QWORD PTR [rsp+0x20],0x0
   1a2ae:	jne    1a263 <g_str_equal@plt+0x11eab>
   1a2b0:	mov    rsi,rbp
   1a2b3:	mov    rdi,rbx
   1a2b6:	call   20620 <g_str_equal@plt+0x18268>
   1a2bb:	jmp    1a263 <g_str_equal@plt+0x11eab>
   1a2bd:	call   8050 <__stack_chk_fail@plt>
   1a2c2:	nop    DWORD PTR [rax+0x0]
   1a2c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1a2d0:	push   rbx
   1a2d1:	mov    rbx,rdx
   1a2d4:	mov    rdx,rsi
   1a2d7:	lea    rsi,[rip+0x12cf2]        # 2cfd0 <_fini@@Base+0x3d4c>
   1a2de:	sub    rsp,0x10
   1a2e2:	mov    rcx,rsp
   1a2e5:	mov    QWORD PTR [rsp],0x0
   1a2ed:	mov    rax,QWORD PTR fs:0x28
   1a2f6:	mov    QWORD PTR [rsp+0x8],rax
   1a2fb:	xor    eax,eax
   1a2fd:	call   1a180 <g_str_equal@plt+0x11dc8>
   1a302:	mov    rsi,QWORD PTR [rsp]
   1a306:	mov    rdi,rbx
   1a309:	call   df30 <g_str_equal@plt+0x5b78>
   1a30e:	mov    rax,QWORD PTR [rsp+0x8]
   1a313:	xor    rax,QWORD PTR fs:0x28
   1a31c:	jne    1a324 <g_str_equal@plt+0x11f6c>
   1a31e:	add    rsp,0x10
   1a322:	pop    rbx
   1a323:	ret    
   1a324:	call   8050 <__stack_chk_fail@plt>
   1a329:	nop    DWORD PTR [rax+0x0]
   1a330:	push   r13
   1a332:	push   r12
   1a334:	mov    r13,rcx
   1a337:	push   rbp
   1a338:	push   rbx
   1a339:	mov    ecx,0x8
   1a33e:	mov    rbp,rdi
   1a341:	mov    rbx,rdx
   1a344:	sub    rsp,0x18
   1a348:	mov    r12,rsp
   1a34b:	mov    QWORD PTR [rsp],0x0
   1a353:	mov    r8,r12
   1a356:	mov    rax,QWORD PTR fs:0x28
   1a35f:	mov    QWORD PTR [rsp+0x8],rax
   1a364:	xor    eax,eax
   1a366:	call   200e0 <g_str_equal@plt+0x17d28>
   1a36b:	mov    rsi,QWORD PTR [rsp]
   1a36f:	test   rsi,rsi
   1a372:	je     1a3a0 <g_str_equal@plt+0x11fe8>
   1a374:	mov    rdi,r13
   1a377:	call   df30 <g_str_equal@plt+0x5b78>
   1a37c:	mov    rax,QWORD PTR [rsp+0x8]
   1a381:	xor    rax,QWORD PTR fs:0x28
   1a38a:	jne    1a3fd <g_str_equal@plt+0x12045>
   1a38c:	add    rsp,0x18
   1a390:	pop    rbx
   1a391:	pop    rbp
   1a392:	pop    r12
   1a394:	pop    r13
   1a396:	ret    
   1a397:	nop    WORD PTR [rax+rax*1+0x0]
   1a3a0:	mov    rsi,QWORD PTR [rbx]
   1a3a3:	test   rsi,rsi
   1a3a6:	je     1a3ba <g_str_equal@plt+0x12002>
   1a3a8:	mov    rdx,r12
   1a3ab:	mov    rdi,rbp
   1a3ae:	call   1a2d0 <g_str_equal@plt+0x11f18>
   1a3b3:	cmp    QWORD PTR [rsp],0x0
   1a3b8:	je     1a3f0 <g_str_equal@plt+0x12038>
   1a3ba:	mov    rsi,rbx
   1a3bd:	mov    rdi,rbp
   1a3c0:	call   20340 <g_str_equal@plt+0x17f88>
   1a3c5:	mov    rsi,QWORD PTR [rsp]
   1a3c9:	test   rsi,rsi
   1a3cc:	je     1a374 <g_str_equal@plt+0x11fbc>
   1a3ce:	mov    rdi,rbp
   1a3d1:	call   20ab0 <g_str_equal@plt+0x186f8>
   1a3d6:	test   al,al
   1a3d8:	je     1a3e9 <g_str_equal@plt+0x12031>
   1a3da:	mov    rdi,QWORD PTR [rbx]
   1a3dd:	call   15330 <g_str_equal@plt+0xcf78>
   1a3e2:	mov    QWORD PTR [rbx],0x0
   1a3e9:	mov    rsi,QWORD PTR [rsp]
   1a3ed:	jmp    1a374 <g_str_equal@plt+0x11fbc>
   1a3ef:	nop
   1a3f0:	mov    rsi,r12
   1a3f3:	mov    rdi,rbp
   1a3f6:	call   20290 <g_str_equal@plt+0x17ed8>
   1a3fb:	jmp    1a3ba <g_str_equal@plt+0x12002>
   1a3fd:	call   8050 <__stack_chk_fail@plt>
   1a402:	nop    DWORD PTR [rax+0x0]
   1a406:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1a410:	push   rbx
   1a411:	mov    rbx,rdx
   1a414:	mov    rdx,rsi
   1a417:	lea    rsi,[rip+0x12b17]        # 2cf35 <_fini@@Base+0x3cb1>
   1a41e:	sub    rsp,0x10
   1a422:	mov    rcx,rsp
   1a425:	mov    QWORD PTR [rsp],0x0
   1a42d:	mov    rax,QWORD PTR fs:0x28
   1a436:	mov    QWORD PTR [rsp+0x8],rax
   1a43b:	xor    eax,eax
   1a43d:	call   21550 <g_str_equal@plt+0x19198>
   1a442:	mov    rsi,QWORD PTR [rsp]
   1a446:	mov    rdi,rbx
   1a449:	call   df30 <g_str_equal@plt+0x5b78>
   1a44e:	mov    rax,QWORD PTR [rsp+0x8]
   1a453:	xor    rax,QWORD PTR fs:0x28
   1a45c:	jne    1a464 <g_str_equal@plt+0x120ac>
   1a45e:	add    rsp,0x10
   1a462:	pop    rbx
   1a463:	ret    
   1a464:	call   8050 <__stack_chk_fail@plt>
   1a469:	nop    DWORD PTR [rax+0x0]
   1a470:	push   r13
   1a472:	push   r12
   1a474:	mov    r13,rdx
   1a477:	push   rbp
   1a478:	push   rbx
   1a479:	mov    rdx,rsi
   1a47c:	mov    rbx,rsi
   1a47f:	lea    rsi,[rip+0x12b52]        # 2cfd8 <_fini@@Base+0x3d54>
   1a486:	mov    rbp,rdi
   1a489:	sub    rsp,0x18
   1a48d:	mov    r12,rsp
   1a490:	mov    QWORD PTR [rsp],0x0
   1a498:	mov    rcx,r12
   1a49b:	mov    rax,QWORD PTR fs:0x28
   1a4a4:	mov    QWORD PTR [rsp+0x8],rax
   1a4a9:	xor    eax,eax
   1a4ab:	call   21550 <g_str_equal@plt+0x19198>
   1a4b0:	mov    rsi,QWORD PTR [rsp]
   1a4b4:	test   rsi,rsi
   1a4b7:	je     1a4e0 <g_str_equal@plt+0x12128>
   1a4b9:	mov    rdi,r13
   1a4bc:	call   df30 <g_str_equal@plt+0x5b78>
   1a4c1:	mov    rax,QWORD PTR [rsp+0x8]
   1a4c6:	xor    rax,QWORD PTR fs:0x28
   1a4cf:	jne    1a532 <g_str_equal@plt+0x1217a>
   1a4d1:	add    rsp,0x18
   1a4d5:	pop    rbx
   1a4d6:	pop    rbp
   1a4d7:	pop    r12
   1a4d9:	pop    r13
   1a4db:	ret    
   1a4dc:	nop    DWORD PTR [rax+0x0]
   1a4e0:	lea    rsi,[rip+0xeed8]        # 293bf <_fini@@Base+0x13b>
   1a4e7:	lea    rdx,[rbx+0x8]
   1a4eb:	mov    rcx,r12
   1a4ee:	mov    rdi,rbp
   1a4f1:	call   21550 <g_str_equal@plt+0x19198>
   1a4f6:	mov    rsi,QWORD PTR [rsp]
   1a4fa:	test   rsi,rsi
   1a4fd:	jne    1a4b9 <g_str_equal@plt+0x12101>
   1a4ff:	lea    rdx,[rbx+0x10]
   1a503:	lea    rsi,[rip+0x12ad7]        # 2cfe1 <_fini@@Base+0x3d5d>
   1a50a:	mov    rdi,rbp
   1a50d:	call   209e0 <g_str_equal@plt+0x18628>
   1a512:	test   al,al
   1a514:	je     1a52c <g_str_equal@plt+0x12174>
   1a516:	lea    rdx,[rbx+0x18]
   1a51a:	lea    rsi,[rip+0x12ac0]        # 2cfe1 <_fini@@Base+0x3d5d>
   1a521:	mov    rcx,r12
   1a524:	mov    rdi,rbp
   1a527:	call   21790 <g_str_equal@plt+0x193d8>
   1a52c:	mov    rsi,QWORD PTR [rsp]
   1a530:	jmp    1a4b9 <g_str_equal@plt+0x12101>
   1a532:	call   8050 <__stack_chk_fail@plt>
   1a537:	nop    WORD PTR [rax+rax*1+0x0]
   1a540:	push   rbx
   1a541:	mov    rbx,rdx
   1a544:	mov    rdx,rsi
   1a547:	lea    rsi,[rip+0xee71]        # 293bf <_fini@@Base+0x13b>
   1a54e:	sub    rsp,0x10
   1a552:	mov    rcx,rsp
   1a555:	mov    QWORD PTR [rsp],0x0
   1a55d:	mov    rax,QWORD PTR fs:0x28
   1a566:	mov    QWORD PTR [rsp+0x8],rax
   1a56b:	xor    eax,eax
   1a56d:	call   21550 <g_str_equal@plt+0x19198>
   1a572:	mov    rsi,QWORD PTR [rsp]
   1a576:	mov    rdi,rbx
   1a579:	call   df30 <g_str_equal@plt+0x5b78>
   1a57e:	mov    rax,QWORD PTR [rsp+0x8]
   1a583:	xor    rax,QWORD PTR fs:0x28
   1a58c:	jne    1a594 <g_str_equal@plt+0x121dc>
   1a58e:	add    rsp,0x10
   1a592:	pop    rbx
   1a593:	ret    
   1a594:	call   8050 <__stack_chk_fail@plt>
   1a599:	nop    DWORD PTR [rax+0x0]
   1a5a0:	push   rbx
   1a5a1:	mov    rbx,rdx
   1a5a4:	mov    rdx,rsi
   1a5a7:	lea    rsi,[rip+0x12857]        # 2ce05 <_fini@@Base+0x3b81>
   1a5ae:	sub    rsp,0x10
   1a5b2:	mov    rcx,rsp
   1a5b5:	mov    QWORD PTR [rsp],0x0
   1a5bd:	mov    rax,QWORD PTR fs:0x28
   1a5c6:	mov    QWORD PTR [rsp+0x8],rax
   1a5cb:	xor    eax,eax
   1a5cd:	call   21550 <g_str_equal@plt+0x19198>
   1a5d2:	mov    rsi,QWORD PTR [rsp]
   1a5d6:	mov    rdi,rbx
   1a5d9:	call   df30 <g_str_equal@plt+0x5b78>
   1a5de:	mov    rax,QWORD PTR [rsp+0x8]
   1a5e3:	xor    rax,QWORD PTR fs:0x28
   1a5ec:	jne    1a5f4 <g_str_equal@plt+0x1223c>
   1a5ee:	add    rsp,0x10
   1a5f2:	pop    rbx
   1a5f3:	ret    
   1a5f4:	call   8050 <__stack_chk_fail@plt>
   1a5f9:	nop    DWORD PTR [rax+0x0]
   1a600:	push   rbx
   1a601:	mov    rbx,rdx
   1a604:	mov    rdx,rsi
   1a607:	lea    rsi,[rip+0x127f7]        # 2ce05 <_fini@@Base+0x3b81>
   1a60e:	sub    rsp,0x10
   1a612:	mov    rcx,rsp
   1a615:	mov    QWORD PTR [rsp],0x0
   1a61d:	mov    rax,QWORD PTR fs:0x28
   1a626:	mov    QWORD PTR [rsp+0x8],rax
   1a62b:	xor    eax,eax
   1a62d:	call   21550 <g_str_equal@plt+0x19198>
   1a632:	mov    rsi,QWORD PTR [rsp]
   1a636:	mov    rdi,rbx
   1a639:	call   df30 <g_str_equal@plt+0x5b78>
   1a63e:	mov    rax,QWORD PTR [rsp+0x8]
   1a643:	xor    rax,QWORD PTR fs:0x28
   1a64c:	jne    1a654 <g_str_equal@plt+0x1229c>
   1a64e:	add    rsp,0x10
   1a652:	pop    rbx
   1a653:	ret    
   1a654:	call   8050 <__stack_chk_fail@plt>
   1a659:	nop    DWORD PTR [rax+0x0]
   1a660:	push   r13
   1a662:	push   r12
   1a664:	mov    r13,rdx
   1a667:	push   rbp
   1a668:	push   rbx
   1a669:	mov    rdx,rsi
   1a66c:	mov    rbx,rsi
   1a66f:	lea    rsi,[rip+0x13d3f]        # 2e3b5 <_fini@@Base+0x5131>
   1a676:	mov    rbp,rdi
   1a679:	sub    rsp,0x18
   1a67d:	mov    r12,rsp
   1a680:	mov    QWORD PTR [rsp],0x0
   1a688:	mov    rcx,r12
   1a68b:	mov    rax,QWORD PTR fs:0x28
   1a694:	mov    QWORD PTR [rsp+0x8],rax
   1a699:	xor    eax,eax
   1a69b:	call   21550 <g_str_equal@plt+0x19198>
   1a6a0:	mov    rsi,QWORD PTR [rsp]
   1a6a4:	test   rsi,rsi
   1a6a7:	je     1a6d0 <g_str_equal@plt+0x12318>
   1a6a9:	mov    rdi,r13
   1a6ac:	call   df30 <g_str_equal@plt+0x5b78>
   1a6b1:	mov    rax,QWORD PTR [rsp+0x8]
   1a6b6:	xor    rax,QWORD PTR fs:0x28
   1a6bf:	jne    1a782 <g_str_equal@plt+0x123ca>
   1a6c5:	add    rsp,0x18
   1a6c9:	pop    rbx
   1a6ca:	pop    rbp
   1a6cb:	pop    r12
   1a6cd:	pop    r13
   1a6cf:	ret    
   1a6d0:	lea    rdx,[rbx+0x8]
   1a6d4:	lea    rsi,[rip+0x1290c]        # 2cfe7 <_fini@@Base+0x3d63>
   1a6db:	mov    rdi,rbp
   1a6de:	call   209e0 <g_str_equal@plt+0x18628>
   1a6e3:	test   al,al
   1a6e5:	je     1a706 <g_str_equal@plt+0x1234e>
   1a6e7:	lea    rsi,[rip+0x128f9]        # 2cfe7 <_fini@@Base+0x3d63>
   1a6ee:	lea    rdx,[rbx+0x10]
   1a6f2:	mov    rcx,r12
   1a6f5:	mov    rdi,rbp
   1a6f8:	call   21550 <g_str_equal@plt+0x19198>
   1a6fd:	mov    rsi,QWORD PTR [rsp]
   1a701:	test   rsi,rsi
   1a704:	jne    1a6a9 <g_str_equal@plt+0x122f1>
   1a706:	lea    rdx,[rbx+0x18]
   1a70a:	lea    rsi,[rip+0x128dc]        # 2cfed <_fini@@Base+0x3d69>
   1a711:	mov    rdi,rbp
   1a714:	call   209e0 <g_str_equal@plt+0x18628>
   1a719:	test   al,al
   1a71b:	je     1a740 <g_str_equal@plt+0x12388>
   1a71d:	lea    rsi,[rip+0x128c9]        # 2cfed <_fini@@Base+0x3d69>
   1a724:	lea    rdx,[rbx+0x19]
   1a728:	mov    rcx,r12
   1a72b:	mov    rdi,rbp
   1a72e:	call   21460 <g_str_equal@plt+0x190a8>
   1a733:	mov    rsi,QWORD PTR [rsp]
   1a737:	test   rsi,rsi
   1a73a:	jne    1a6a9 <g_str_equal@plt+0x122f1>
   1a740:	lea    rsi,[rip+0x128b1]        # 2cff8 <_fini@@Base+0x3d74>
   1a747:	lea    rdx,[rbx+0x20]
   1a74b:	mov    rcx,r12
   1a74e:	mov    rdi,rbp
   1a751:	call   20ac0 <g_str_equal@plt+0x18708>
   1a756:	mov    rsi,QWORD PTR [rsp]
   1a75a:	test   rsi,rsi
   1a75d:	jne    1a6a9 <g_str_equal@plt+0x122f1>
   1a763:	lea    rsi,[rip+0x12896]        # 2d000 <_fini@@Base+0x3d7c>
   1a76a:	lea    rdx,[rbx+0x28]
   1a76e:	mov    rcx,r12
   1a771:	mov    rdi,rbp
   1a774:	call   21460 <g_str_equal@plt+0x190a8>
   1a779:	mov    rsi,QWORD PTR [rsp]
   1a77d:	jmp    1a6a9 <g_str_equal@plt+0x122f1>
   1a782:	call   8050 <__stack_chk_fail@plt>
   1a787:	nop    WORD PTR [rax+rax*1+0x0]
   1a790:	push   r13
   1a792:	push   r12
   1a794:	mov    r13,rcx
   1a797:	push   rbp
   1a798:	push   rbx
   1a799:	mov    ecx,0x30
   1a79e:	mov    rbp,rdi
   1a7a1:	mov    rbx,rdx
   1a7a4:	sub    rsp,0x18
   1a7a8:	mov    r12,rsp
   1a7ab:	mov    QWORD PTR [rsp],0x0
   1a7b3:	mov    r8,r12
   1a7b6:	mov    rax,QWORD PTR fs:0x28
   1a7bf:	mov    QWORD PTR [rsp+0x8],rax
   1a7c4:	xor    eax,eax
   1a7c6:	call   200e0 <g_str_equal@plt+0x17d28>
   1a7cb:	mov    rsi,QWORD PTR [rsp]
   1a7cf:	test   rsi,rsi
   1a7d2:	je     1a800 <g_str_equal@plt+0x12448>
   1a7d4:	mov    rdi,r13
   1a7d7:	call   df30 <g_str_equal@plt+0x5b78>
   1a7dc:	mov    rax,QWORD PTR [rsp+0x8]
   1a7e1:	xor    rax,QWORD PTR fs:0x28
   1a7ea:	jne    1a85d <g_str_equal@plt+0x124a5>
   1a7ec:	add    rsp,0x18
   1a7f0:	pop    rbx
   1a7f1:	pop    rbp
   1a7f2:	pop    r12
   1a7f4:	pop    r13
   1a7f6:	ret    
   1a7f7:	nop    WORD PTR [rax+rax*1+0x0]
   1a800:	mov    rsi,QWORD PTR [rbx]
   1a803:	test   rsi,rsi
   1a806:	je     1a81a <g_str_equal@plt+0x12462>
   1a808:	mov    rdx,r12
   1a80b:	mov    rdi,rbp
   1a80e:	call   1a660 <g_str_equal@plt+0x122a8>
   1a813:	cmp    QWORD PTR [rsp],0x0
   1a818:	je     1a850 <g_str_equal@plt+0x12498>
   1a81a:	mov    rsi,rbx
   1a81d:	mov    rdi,rbp
   1a820:	call   20340 <g_str_equal@plt+0x17f88>
   1a825:	mov    rsi,QWORD PTR [rsp]
   1a829:	test   rsi,rsi
   1a82c:	je     1a7d4 <g_str_equal@plt+0x1241c>
   1a82e:	mov    rdi,rbp
   1a831:	call   20ab0 <g_str_equal@plt+0x186f8>
   1a836:	test   al,al
   1a838:	je     1a849 <g_str_equal@plt+0x12491>
   1a83a:	mov    rdi,QWORD PTR [rbx]
   1a83d:	call   15370 <g_str_equal@plt+0xcfb8>
   1a842:	mov    QWORD PTR [rbx],0x0
   1a849:	mov    rsi,QWORD PTR [rsp]
   1a84d:	jmp    1a7d4 <g_str_equal@plt+0x1241c>
   1a84f:	nop
   1a850:	mov    rsi,r12
   1a853:	mov    rdi,rbp
   1a856:	call   20290 <g_str_equal@plt+0x17ed8>
   1a85b:	jmp    1a81a <g_str_equal@plt+0x12462>
   1a85d:	call   8050 <__stack_chk_fail@plt>
   1a862:	nop    DWORD PTR [rax+0x0]
   1a866:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1a870:	push   r14
   1a872:	push   r13
   1a874:	mov    r14,rcx
   1a877:	push   r12
   1a879:	push   rbp
   1a87a:	mov    ecx,0x10
   1a87f:	push   rbx
   1a880:	mov    rbp,rdi
   1a883:	mov    r13,rdx
   1a886:	sub    rsp,0x10
   1a88a:	mov    r12,rsp
   1a88d:	mov    QWORD PTR [rsp],0x0
   1a895:	mov    r8,r12
   1a898:	mov    rax,QWORD PTR fs:0x28
   1a8a1:	mov    QWORD PTR [rsp+0x8],rax
   1a8a6:	xor    eax,eax
   1a8a8:	call   203e0 <g_str_equal@plt+0x18028>
   1a8ad:	mov    rsi,QWORD PTR [rsp]
   1a8b1:	test   rsi,rsi
   1a8b4:	je     1a8e0 <g_str_equal@plt+0x12528>
   1a8b6:	mov    rdi,r14
   1a8b9:	call   df30 <g_str_equal@plt+0x5b78>
   1a8be:	mov    rax,QWORD PTR [rsp+0x8]
   1a8c3:	xor    rax,QWORD PTR fs:0x28
   1a8cc:	jne    1a974 <g_str_equal@plt+0x125bc>
   1a8d2:	add    rsp,0x10
   1a8d6:	pop    rbx
   1a8d7:	pop    rbp
   1a8d8:	pop    r12
   1a8da:	pop    r13
   1a8dc:	pop    r14
   1a8de:	ret    
   1a8df:	nop
   1a8e0:	mov    rbx,QWORD PTR [r13+0x0]
   1a8e4:	test   rbx,rbx
   1a8e7:	jne    1a908 <g_str_equal@plt+0x12550>
   1a8e9:	jmp    1a967 <g_str_equal@plt+0x125af>
   1a8eb:	nop    DWORD PTR [rax+rax*1+0x0]
   1a8f0:	mov    rsi,rbx
   1a8f3:	mov    edx,0x10
   1a8f8:	mov    rdi,rbp
   1a8fb:	call   20530 <g_str_equal@plt+0x18178>
   1a900:	test   rax,rax
   1a903:	mov    rbx,rax
   1a906:	je     1a960 <g_str_equal@plt+0x125a8>
   1a908:	lea    rdx,[rbx+0x8]
   1a90c:	xor    esi,esi
   1a90e:	mov    rcx,r12
   1a911:	mov    rdi,rbp
   1a914:	call   1a790 <g_str_equal@plt+0x123d8>
   1a919:	cmp    QWORD PTR [rsp],0x0
   1a91e:	je     1a8f0 <g_str_equal@plt+0x12538>
   1a920:	mov    rsi,r13
   1a923:	mov    rdi,rbp
   1a926:	call   206d0 <g_str_equal@plt+0x18318>
   1a92b:	mov    rsi,QWORD PTR [rsp]
   1a92f:	test   rsi,rsi
   1a932:	je     1a8b6 <g_str_equal@plt+0x124fe>
   1a934:	mov    rdi,rbp
   1a937:	call   20ab0 <g_str_equal@plt+0x186f8>
   1a93c:	test   al,al
   1a93e:	je     1a951 <g_str_equal@plt+0x12599>
   1a940:	mov    rdi,QWORD PTR [r13+0x0]
   1a944:	call   153b0 <g_str_equal@plt+0xcff8>
   1a949:	mov    QWORD PTR [r13+0x0],0x0
   1a951:	mov    rsi,QWORD PTR [rsp]
   1a955:	jmp    1a8b6 <g_str_equal@plt+0x124fe>
   1a95a:	nop    WORD PTR [rax+rax*1+0x0]
   1a960:	cmp    QWORD PTR [rsp],0x0
   1a965:	jne    1a920 <g_str_equal@plt+0x12568>
   1a967:	mov    rsi,r12
   1a96a:	mov    rdi,rbp
   1a96d:	call   20620 <g_str_equal@plt+0x18268>
   1a972:	jmp    1a920 <g_str_equal@plt+0x12568>
   1a974:	call   8050 <__stack_chk_fail@plt>
   1a979:	nop    DWORD PTR [rax+0x0]
   1a980:	push   r13
   1a982:	push   r12
   1a984:	mov    r13,rdx
   1a987:	push   rbp
   1a988:	push   rbx
   1a989:	mov    rdx,rsi
   1a98c:	mov    rbx,rsi
   1a98f:	lea    rsi,[rip+0x13a1f]        # 2e3b5 <_fini@@Base+0x5131>
   1a996:	mov    rbp,rdi
   1a999:	sub    rsp,0x18
   1a99d:	mov    r12,rsp
   1a9a0:	mov    QWORD PTR [rsp],0x0
   1a9a8:	mov    rcx,r12
   1a9ab:	mov    rax,QWORD PTR fs:0x28
   1a9b4:	mov    QWORD PTR [rsp+0x8],rax
   1a9b9:	xor    eax,eax
   1a9bb:	call   21550 <g_str_equal@plt+0x19198>
   1a9c0:	mov    rsi,QWORD PTR [rsp]
   1a9c4:	test   rsi,rsi
   1a9c7:	je     1a9f0 <g_str_equal@plt+0x12638>
   1a9c9:	mov    rdi,r13
   1a9cc:	call   df30 <g_str_equal@plt+0x5b78>
   1a9d1:	mov    rax,QWORD PTR [rsp+0x8]
   1a9d6:	xor    rax,QWORD PTR fs:0x28
   1a9df:	jne    1aa9e <g_str_equal@plt+0x126e6>
   1a9e5:	add    rsp,0x18
   1a9e9:	pop    rbx
   1a9ea:	pop    rbp
   1a9eb:	pop    r12
   1a9ed:	pop    r13
   1a9ef:	ret    
   1a9f0:	lea    rdx,[rbx+0x8]
   1a9f4:	lea    rsi,[rip+0x12617]        # 2d012 <_fini@@Base+0x3d8e>
   1a9fb:	mov    rdi,rbp
   1a9fe:	call   209e0 <g_str_equal@plt+0x18628>
   1aa03:	test   al,al
   1aa05:	je     1aa26 <g_str_equal@plt+0x1266e>
   1aa07:	lea    rsi,[rip+0x12604]        # 2d012 <_fini@@Base+0x3d8e>
   1aa0e:	lea    rdx,[rbx+0x9]
   1aa12:	mov    rcx,r12
   1aa15:	mov    rdi,rbp
   1aa18:	call   21460 <g_str_equal@plt+0x190a8>
   1aa1d:	mov    rsi,QWORD PTR [rsp]
   1aa21:	test   rsi,rsi
   1aa24:	jne    1a9c9 <g_str_equal@plt+0x12611>
   1aa26:	lea    rsi,[rip+0x12306]        # 2cd33 <_fini@@Base+0x3aaf>
   1aa2d:	lea    rdx,[rbx+0xa]
   1aa31:	mov    rcx,r12
   1aa34:	mov    rdi,rbp
   1aa37:	call   21460 <g_str_equal@plt+0x190a8>
   1aa3c:	mov    rsi,QWORD PTR [rsp]
   1aa40:	test   rsi,rsi
   1aa43:	jne    1a9c9 <g_str_equal@plt+0x12611>
   1aa45:	lea    rdx,[rbx+0xb]
   1aa49:	lea    rsi,[rip+0x125d1]        # 2d021 <_fini@@Base+0x3d9d>
   1aa50:	mov    rdi,rbp
   1aa53:	call   209e0 <g_str_equal@plt+0x18628>
   1aa58:	test   al,al
   1aa5a:	je     1aa7f <g_str_equal@plt+0x126c7>
   1aa5c:	lea    rsi,[rip+0x125be]        # 2d021 <_fini@@Base+0x3d9d>
   1aa63:	lea    rdx,[rbx+0x10]
   1aa67:	mov    rcx,r12
   1aa6a:	mov    rdi,rbp
   1aa6d:	call   23760 <g_str_equal@plt+0x1b3a8>
   1aa72:	mov    rsi,QWORD PTR [rsp]
   1aa76:	test   rsi,rsi
   1aa79:	jne    1a9c9 <g_str_equal@plt+0x12611>
   1aa7f:	lea    rsi,[rip+0x1250a]        # 2cf90 <_fini@@Base+0x3d0c>
   1aa86:	lea    rdx,[rbx+0x18]
   1aa8a:	mov    rcx,r12
   1aa8d:	mov    rdi,rbp
   1aa90:	call   21550 <g_str_equal@plt+0x19198>
   1aa95:	mov    rsi,QWORD PTR [rsp]
   1aa99:	jmp    1a9c9 <g_str_equal@plt+0x12611>
   1aa9e:	call   8050 <__stack_chk_fail@plt>
   1aaa3:	nop    DWORD PTR [rax]
   1aaa6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1aab0:	push   r13
   1aab2:	push   r12
   1aab4:	mov    r13,rcx
   1aab7:	push   rbp
   1aab8:	push   rbx
   1aab9:	mov    ecx,0x20
   1aabe:	mov    rbp,rdi
   1aac1:	mov    rbx,rdx
   1aac4:	sub    rsp,0x18
   1aac8:	mov    r12,rsp
   1aacb:	mov    QWORD PTR [rsp],0x0
   1aad3:	mov    r8,r12
   1aad6:	mov    rax,QWORD PTR fs:0x28
   1aadf:	mov    QWORD PTR [rsp+0x8],rax
   1aae4:	xor    eax,eax
   1aae6:	call   200e0 <g_str_equal@plt+0x17d28>
   1aaeb:	mov    rsi,QWORD PTR [rsp]
   1aaef:	test   rsi,rsi
   1aaf2:	je     1ab20 <g_str_equal@plt+0x12768>
   1aaf4:	mov    rdi,r13
   1aaf7:	call   df30 <g_str_equal@plt+0x5b78>
   1aafc:	mov    rax,QWORD PTR [rsp+0x8]
   1ab01:	xor    rax,QWORD PTR fs:0x28
   1ab0a:	jne    1ab7d <g_str_equal@plt+0x127c5>
   1ab0c:	add    rsp,0x18
   1ab10:	pop    rbx
   1ab11:	pop    rbp
   1ab12:	pop    r12
   1ab14:	pop    r13
   1ab16:	ret    
   1ab17:	nop    WORD PTR [rax+rax*1+0x0]
   1ab20:	mov    rsi,QWORD PTR [rbx]
   1ab23:	test   rsi,rsi
   1ab26:	je     1ab3a <g_str_equal@plt+0x12782>
   1ab28:	mov    rdx,r12
   1ab2b:	mov    rdi,rbp
   1ab2e:	call   1a980 <g_str_equal@plt+0x125c8>
   1ab33:	cmp    QWORD PTR [rsp],0x0
   1ab38:	je     1ab70 <g_str_equal@plt+0x127b8>
   1ab3a:	mov    rsi,rbx
   1ab3d:	mov    rdi,rbp
   1ab40:	call   20340 <g_str_equal@plt+0x17f88>
   1ab45:	mov    rsi,QWORD PTR [rsp]
   1ab49:	test   rsi,rsi
   1ab4c:	je     1aaf4 <g_str_equal@plt+0x1273c>
   1ab4e:	mov    rdi,rbp
   1ab51:	call   20ab0 <g_str_equal@plt+0x186f8>
   1ab56:	test   al,al
   1ab58:	je     1ab69 <g_str_equal@plt+0x127b1>
   1ab5a:	mov    rdi,QWORD PTR [rbx]
   1ab5d:	call   153f0 <g_str_equal@plt+0xd038>
   1ab62:	mov    QWORD PTR [rbx],0x0
   1ab69:	mov    rsi,QWORD PTR [rsp]
   1ab6d:	jmp    1aaf4 <g_str_equal@plt+0x1273c>
   1ab6f:	nop
   1ab70:	mov    rsi,r12
   1ab73:	mov    rdi,rbp
   1ab76:	call   20290 <g_str_equal@plt+0x17ed8>
   1ab7b:	jmp    1ab3a <g_str_equal@plt+0x12782>
   1ab7d:	call   8050 <__stack_chk_fail@plt>
   1ab82:	nop    DWORD PTR [rax+0x0]
   1ab86:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1ab90:	push   r13
   1ab92:	push   r12
   1ab94:	mov    r13,rdx
   1ab97:	push   rbp
   1ab98:	push   rbx
   1ab99:	mov    rdx,rsi
   1ab9c:	mov    rbx,rsi
   1ab9f:	lea    rsi,[rip+0x12490]        # 2d036 <_fini@@Base+0x3db2>
   1aba6:	mov    rbp,rdi
   1aba9:	sub    rsp,0x18
   1abad:	mov    r12,rsp
   1abb0:	mov    QWORD PTR [rsp],0x0
   1abb8:	mov    rcx,r12
   1abbb:	mov    rax,QWORD PTR fs:0x28
   1abc4:	mov    QWORD PTR [rsp+0x8],rax
   1abc9:	xor    eax,eax
   1abcb:	call   21360 <g_str_equal@plt+0x18fa8>
   1abd0:	mov    rsi,QWORD PTR [rsp]
   1abd4:	test   rsi,rsi
   1abd7:	je     1ac00 <g_str_equal@plt+0x12848>
   1abd9:	mov    rdi,r13
   1abdc:	call   df30 <g_str_equal@plt+0x5b78>
   1abe1:	mov    rax,QWORD PTR [rsp+0x8]
   1abe6:	xor    rax,QWORD PTR fs:0x28
   1abef:	jne    1ac33 <g_str_equal@plt+0x1287b>
   1abf1:	add    rsp,0x18
   1abf5:	pop    rbx
   1abf6:	pop    rbp
   1abf7:	pop    r12
   1abf9:	pop    r13
   1abfb:	ret    
   1abfc:	nop    DWORD PTR [rax+0x0]
   1ac00:	lea    rdx,[rbx+0x8]
   1ac04:	lea    rsi,[rip+0x12437]        # 2d042 <_fini@@Base+0x3dbe>
   1ac0b:	mov    rdi,rbp
   1ac0e:	call   209e0 <g_str_equal@plt+0x18628>
   1ac13:	test   al,al
   1ac15:	je     1ac2d <g_str_equal@plt+0x12875>
   1ac17:	lea    rdx,[rbx+0x10]
   1ac1b:	lea    rsi,[rip+0x12420]        # 2d042 <_fini@@Base+0x3dbe>
   1ac22:	mov    rcx,r12
   1ac25:	mov    rdi,rbp
   1ac28:	call   21360 <g_str_equal@plt+0x18fa8>
   1ac2d:	mov    rsi,QWORD PTR [rsp]
   1ac31:	jmp    1abd9 <g_str_equal@plt+0x12821>
   1ac33:	call   8050 <__stack_chk_fail@plt>
   1ac38:	nop    DWORD PTR [rax+rax*1+0x0]
   1ac40:	push   r13
   1ac42:	push   r12
   1ac44:	mov    r13,rcx
   1ac47:	push   rbp
   1ac48:	push   rbx
   1ac49:	mov    ecx,0x18
   1ac4e:	mov    rbp,rdi
   1ac51:	mov    rbx,rdx
   1ac54:	sub    rsp,0x18
   1ac58:	mov    r12,rsp
   1ac5b:	mov    QWORD PTR [rsp],0x0
   1ac63:	mov    r8,r12
   1ac66:	mov    rax,QWORD PTR fs:0x28
   1ac6f:	mov    QWORD PTR [rsp+0x8],rax
   1ac74:	xor    eax,eax
   1ac76:	call   200e0 <g_str_equal@plt+0x17d28>
   1ac7b:	mov    rsi,QWORD PTR [rsp]
   1ac7f:	test   rsi,rsi
   1ac82:	je     1acb0 <g_str_equal@plt+0x128f8>
   1ac84:	mov    rdi,r13
   1ac87:	call   df30 <g_str_equal@plt+0x5b78>
   1ac8c:	mov    rax,QWORD PTR [rsp+0x8]
   1ac91:	xor    rax,QWORD PTR fs:0x28
   1ac9a:	jne    1ad0d <g_str_equal@plt+0x12955>
   1ac9c:	add    rsp,0x18
   1aca0:	pop    rbx
   1aca1:	pop    rbp
   1aca2:	pop    r12
   1aca4:	pop    r13
   1aca6:	ret    
   1aca7:	nop    WORD PTR [rax+rax*1+0x0]
   1acb0:	mov    rsi,QWORD PTR [rbx]
   1acb3:	test   rsi,rsi
   1acb6:	je     1acca <g_str_equal@plt+0x12912>
   1acb8:	mov    rdx,r12
   1acbb:	mov    rdi,rbp
   1acbe:	call   1ab90 <g_str_equal@plt+0x127d8>
   1acc3:	cmp    QWORD PTR [rsp],0x0
   1acc8:	je     1ad00 <g_str_equal@plt+0x12948>
   1acca:	mov    rsi,rbx
   1accd:	mov    rdi,rbp
   1acd0:	call   20340 <g_str_equal@plt+0x17f88>
   1acd5:	mov    rsi,QWORD PTR [rsp]
   1acd9:	test   rsi,rsi
   1acdc:	je     1ac84 <g_str_equal@plt+0x128cc>
   1acde:	mov    rdi,rbp
   1ace1:	call   20ab0 <g_str_equal@plt+0x186f8>
   1ace6:	test   al,al
   1ace8:	je     1acf9 <g_str_equal@plt+0x12941>
   1acea:	mov    rdi,QWORD PTR [rbx]
   1aced:	call   15430 <g_str_equal@plt+0xd078>
   1acf2:	mov    QWORD PTR [rbx],0x0
   1acf9:	mov    rsi,QWORD PTR [rsp]
   1acfd:	jmp    1ac84 <g_str_equal@plt+0x128cc>
   1acff:	nop
   1ad00:	mov    rsi,r12
   1ad03:	mov    rdi,rbp
   1ad06:	call   20290 <g_str_equal@plt+0x17ed8>
   1ad0b:	jmp    1acca <g_str_equal@plt+0x12912>
   1ad0d:	call   8050 <__stack_chk_fail@plt>
   1ad12:	nop    DWORD PTR [rax+0x0]
   1ad16:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1ad20:	push   r14
   1ad22:	push   r13
   1ad24:	mov    r14,rcx
   1ad27:	push   r12
   1ad29:	push   rbp
   1ad2a:	mov    ecx,0x10
   1ad2f:	push   rbx
   1ad30:	mov    rbp,rdi
   1ad33:	mov    r13,rdx
   1ad36:	sub    rsp,0x10
   1ad3a:	mov    r12,rsp
   1ad3d:	mov    QWORD PTR [rsp],0x0
   1ad45:	mov    r8,r12
   1ad48:	mov    rax,QWORD PTR fs:0x28
   1ad51:	mov    QWORD PTR [rsp+0x8],rax
   1ad56:	xor    eax,eax
   1ad58:	call   203e0 <g_str_equal@plt+0x18028>
   1ad5d:	mov    rsi,QWORD PTR [rsp]
   1ad61:	test   rsi,rsi
   1ad64:	je     1ad90 <g_str_equal@plt+0x129d8>
   1ad66:	mov    rdi,r14
   1ad69:	call   df30 <g_str_equal@plt+0x5b78>
   1ad6e:	mov    rax,QWORD PTR [rsp+0x8]
   1ad73:	xor    rax,QWORD PTR fs:0x28
   1ad7c:	jne    1ae24 <g_str_equal@plt+0x12a6c>
   1ad82:	add    rsp,0x10
   1ad86:	pop    rbx
   1ad87:	pop    rbp
   1ad88:	pop    r12
   1ad8a:	pop    r13
   1ad8c:	pop    r14
   1ad8e:	ret    
   1ad8f:	nop
   1ad90:	mov    rbx,QWORD PTR [r13+0x0]
   1ad94:	test   rbx,rbx
   1ad97:	jne    1adb8 <g_str_equal@plt+0x12a00>
   1ad99:	jmp    1ae17 <g_str_equal@plt+0x12a5f>
   1ad9b:	nop    DWORD PTR [rax+rax*1+0x0]
   1ada0:	mov    rsi,rbx
   1ada3:	mov    edx,0x10
   1ada8:	mov    rdi,rbp
   1adab:	call   20530 <g_str_equal@plt+0x18178>
   1adb0:	test   rax,rax
   1adb3:	mov    rbx,rax
   1adb6:	je     1ae10 <g_str_equal@plt+0x12a58>
   1adb8:	lea    rdx,[rbx+0x8]
   1adbc:	xor    esi,esi
   1adbe:	mov    rcx,r12
   1adc1:	mov    rdi,rbp
   1adc4:	call   1aab0 <g_str_equal@plt+0x126f8>
   1adc9:	cmp    QWORD PTR [rsp],0x0
   1adce:	je     1ada0 <g_str_equal@plt+0x129e8>
   1add0:	mov    rsi,r13
   1add3:	mov    rdi,rbp
   1add6:	call   206d0 <g_str_equal@plt+0x18318>
   1addb:	mov    rsi,QWORD PTR [rsp]
   1addf:	test   rsi,rsi
   1ade2:	je     1ad66 <g_str_equal@plt+0x129ae>
   1ade4:	mov    rdi,rbp
   1ade7:	call   20ab0 <g_str_equal@plt+0x186f8>
   1adec:	test   al,al
   1adee:	je     1ae01 <g_str_equal@plt+0x12a49>
   1adf0:	mov    rdi,QWORD PTR [r13+0x0]
   1adf4:	call   15470 <g_str_equal@plt+0xd0b8>
   1adf9:	mov    QWORD PTR [r13+0x0],0x0
   1ae01:	mov    rsi,QWORD PTR [rsp]
   1ae05:	jmp    1ad66 <g_str_equal@plt+0x129ae>
   1ae0a:	nop    WORD PTR [rax+rax*1+0x0]
   1ae10:	cmp    QWORD PTR [rsp],0x0
   1ae15:	jne    1add0 <g_str_equal@plt+0x12a18>
   1ae17:	mov    rsi,r12
   1ae1a:	mov    rdi,rbp
   1ae1d:	call   20620 <g_str_equal@plt+0x18268>
   1ae22:	jmp    1add0 <g_str_equal@plt+0x12a18>
   1ae24:	call   8050 <__stack_chk_fail@plt>
   1ae29:	nop    DWORD PTR [rax+0x0]
   1ae30:	push   r13
   1ae32:	push   r12
   1ae34:	mov    r13,rdx
   1ae37:	push   rbp
   1ae38:	push   rbx
   1ae39:	mov    rdx,rsi
   1ae3c:	mov    rbx,rsi
   1ae3f:	lea    rsi,[rip+0x1356f]        # 2e3b5 <_fini@@Base+0x5131>
   1ae46:	mov    rbp,rdi
   1ae49:	sub    rsp,0x18
   1ae4d:	mov    r12,rsp
   1ae50:	mov    QWORD PTR [rsp],0x0
   1ae58:	mov    rcx,r12
   1ae5b:	mov    rax,QWORD PTR fs:0x28
   1ae64:	mov    QWORD PTR [rsp+0x8],rax
   1ae69:	xor    eax,eax
   1ae6b:	call   21550 <g_str_equal@plt+0x19198>
   1ae70:	mov    rsi,QWORD PTR [rsp]
   1ae74:	test   rsi,rsi
   1ae77:	je     1aea0 <g_str_equal@plt+0x12ae8>
   1ae79:	mov    rdi,r13
   1ae7c:	call   df30 <g_str_equal@plt+0x5b78>
   1ae81:	mov    rax,QWORD PTR [rsp+0x8]
   1ae86:	xor    rax,QWORD PTR fs:0x28
   1ae8f:	jne    1aed3 <g_str_equal@plt+0x12b1b>
   1ae91:	add    rsp,0x18
   1ae95:	pop    rbx
   1ae96:	pop    rbp
   1ae97:	pop    r12
   1ae99:	pop    r13
   1ae9b:	ret    
   1ae9c:	nop    DWORD PTR [rax+0x0]
   1aea0:	lea    rdx,[rbx+0x8]
   1aea4:	lea    rsi,[rip+0x12136]        # 2cfe1 <_fini@@Base+0x3d5d>
   1aeab:	mov    rdi,rbp
   1aeae:	call   209e0 <g_str_equal@plt+0x18628>
   1aeb3:	test   al,al
   1aeb5:	je     1aecd <g_str_equal@plt+0x12b15>
   1aeb7:	lea    rdx,[rbx+0x10]
   1aebb:	lea    rsi,[rip+0x1211f]        # 2cfe1 <_fini@@Base+0x3d5d>
   1aec2:	mov    rcx,r12
   1aec5:	mov    rdi,rbp
   1aec8:	call   21790 <g_str_equal@plt+0x193d8>
   1aecd:	mov    rsi,QWORD PTR [rsp]
   1aed1:	jmp    1ae79 <g_str_equal@plt+0x12ac1>
   1aed3:	call   8050 <__stack_chk_fail@plt>
   1aed8:	nop    DWORD PTR [rax+rax*1+0x0]
   1aee0:	push   r13
   1aee2:	push   r12
   1aee4:	mov    r13,rcx
   1aee7:	push   rbp
   1aee8:	push   rbx
   1aee9:	mov    ecx,0x18
   1aeee:	mov    rbp,rdi
   1aef1:	mov    rbx,rdx
   1aef4:	sub    rsp,0x18
   1aef8:	mov    r12,rsp
   1aefb:	mov    QWORD PTR [rsp],0x0
   1af03:	mov    r8,r12
   1af06:	mov    rax,QWORD PTR fs:0x28
   1af0f:	mov    QWORD PTR [rsp+0x8],rax
   1af14:	xor    eax,eax
   1af16:	call   200e0 <g_str_equal@plt+0x17d28>
   1af1b:	mov    rsi,QWORD PTR [rsp]
   1af1f:	test   rsi,rsi
   1af22:	je     1af50 <g_str_equal@plt+0x12b98>
   1af24:	mov    rdi,r13
   1af27:	call   df30 <g_str_equal@plt+0x5b78>
   1af2c:	mov    rax,QWORD PTR [rsp+0x8]
   1af31:	xor    rax,QWORD PTR fs:0x28
   1af3a:	jne    1afad <g_str_equal@plt+0x12bf5>
   1af3c:	add    rsp,0x18
   1af40:	pop    rbx
   1af41:	pop    rbp
   1af42:	pop    r12
   1af44:	pop    r13
   1af46:	ret    
   1af47:	nop    WORD PTR [rax+rax*1+0x0]
   1af50:	mov    rsi,QWORD PTR [rbx]
   1af53:	test   rsi,rsi
   1af56:	je     1af6a <g_str_equal@plt+0x12bb2>
   1af58:	mov    rdx,r12
   1af5b:	mov    rdi,rbp
   1af5e:	call   1ae30 <g_str_equal@plt+0x12a78>
   1af63:	cmp    QWORD PTR [rsp],0x0
   1af68:	je     1afa0 <g_str_equal@plt+0x12be8>
   1af6a:	mov    rsi,rbx
   1af6d:	mov    rdi,rbp
   1af70:	call   20340 <g_str_equal@plt+0x17f88>
   1af75:	mov    rsi,QWORD PTR [rsp]
   1af79:	test   rsi,rsi
   1af7c:	je     1af24 <g_str_equal@plt+0x12b6c>
   1af7e:	mov    rdi,rbp
   1af81:	call   20ab0 <g_str_equal@plt+0x186f8>
   1af86:	test   al,al
   1af88:	je     1af99 <g_str_equal@plt+0x12be1>
   1af8a:	mov    rdi,QWORD PTR [rbx]
   1af8d:	call   154b0 <g_str_equal@plt+0xd0f8>
   1af92:	mov    QWORD PTR [rbx],0x0
   1af99:	mov    rsi,QWORD PTR [rsp]
   1af9d:	jmp    1af24 <g_str_equal@plt+0x12b6c>
   1af9f:	nop
   1afa0:	mov    rsi,r12
   1afa3:	mov    rdi,rbp
   1afa6:	call   20290 <g_str_equal@plt+0x17ed8>
   1afab:	jmp    1af6a <g_str_equal@plt+0x12bb2>
   1afad:	call   8050 <__stack_chk_fail@plt>
   1afb2:	nop    DWORD PTR [rax+0x0]
   1afb6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1afc0:	push   rbx
   1afc1:	mov    r8,rcx
   1afc4:	mov    rbx,rdx
   1afc7:	lea    rcx,[rip+0x2222f2]        # 23d2c0 <_fini@@Base+0x21403c>
   1afce:	sub    rsp,0x10
   1afd2:	mov    rax,QWORD PTR fs:0x28
   1afdb:	mov    QWORD PTR [rsp+0x8],rax
   1afe0:	xor    eax,eax
   1afe2:	mov    eax,DWORD PTR [rdx]
   1afe4:	lea    rdx,[rsp+0x4]
   1afe9:	mov    DWORD PTR [rsp+0x4],eax
   1afed:	call   219e0 <g_str_equal@plt+0x19628>
   1aff2:	mov    eax,DWORD PTR [rsp+0x4]
   1aff6:	mov    DWORD PTR [rbx],eax
   1aff8:	mov    rax,QWORD PTR [rsp+0x8]
   1affd:	xor    rax,QWORD PTR fs:0x28
   1b006:	jne    1b00e <g_str_equal@plt+0x12c56>
   1b008:	add    rsp,0x10
   1b00c:	pop    rbx
   1b00d:	ret    
   1b00e:	call   8050 <__stack_chk_fail@plt>
   1b013:	nop    DWORD PTR [rax]
   1b016:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1b020:	push   rbx
   1b021:	mov    rbx,rdx
   1b024:	mov    rdx,rsi
   1b027:	lea    rsi,[rip+0x12023]        # 2d051 <_fini@@Base+0x3dcd>
   1b02e:	sub    rsp,0x10
   1b032:	mov    rcx,rsp
   1b035:	mov    QWORD PTR [rsp],0x0
   1b03d:	mov    rax,QWORD PTR fs:0x28
   1b046:	mov    QWORD PTR [rsp+0x8],rax
   1b04b:	xor    eax,eax
   1b04d:	call   1aee0 <g_str_equal@plt+0x12b28>
   1b052:	mov    rsi,QWORD PTR [rsp]
   1b056:	mov    rdi,rbx
   1b059:	call   df30 <g_str_equal@plt+0x5b78>
   1b05e:	mov    rax,QWORD PTR [rsp+0x8]
   1b063:	xor    rax,QWORD PTR fs:0x28
   1b06c:	jne    1b074 <g_str_equal@plt+0x12cbc>
   1b06e:	add    rsp,0x10
   1b072:	pop    rbx
   1b073:	ret    
   1b074:	call   8050 <__stack_chk_fail@plt>
   1b079:	nop    DWORD PTR [rax+0x0]
   1b080:	push   r13
   1b082:	push   r12
   1b084:	mov    r13,rcx
   1b087:	push   rbp
   1b088:	push   rbx
   1b089:	mov    ecx,0x8
   1b08e:	mov    rbp,rdi
   1b091:	mov    rbx,rdx
   1b094:	sub    rsp,0x18
   1b098:	mov    r12,rsp
   1b09b:	mov    QWORD PTR [rsp],0x0
   1b0a3:	mov    r8,r12
   1b0a6:	mov    rax,QWORD PTR fs:0x28
   1b0af:	mov    QWORD PTR [rsp+0x8],rax
   1b0b4:	xor    eax,eax
   1b0b6:	call   200e0 <g_str_equal@plt+0x17d28>
   1b0bb:	mov    rsi,QWORD PTR [rsp]
   1b0bf:	test   rsi,rsi
   1b0c2:	je     1b0f0 <g_str_equal@plt+0x12d38>
   1b0c4:	mov    rdi,r13
   1b0c7:	call   df30 <g_str_equal@plt+0x5b78>
   1b0cc:	mov    rax,QWORD PTR [rsp+0x8]
   1b0d1:	xor    rax,QWORD PTR fs:0x28
   1b0da:	jne    1b14d <g_str_equal@plt+0x12d95>
   1b0dc:	add    rsp,0x18
   1b0e0:	pop    rbx
   1b0e1:	pop    rbp
   1b0e2:	pop    r12
   1b0e4:	pop    r13
   1b0e6:	ret    
   1b0e7:	nop    WORD PTR [rax+rax*1+0x0]
   1b0f0:	mov    rsi,QWORD PTR [rbx]
   1b0f3:	test   rsi,rsi
   1b0f6:	je     1b10a <g_str_equal@plt+0x12d52>
   1b0f8:	mov    rdx,r12
   1b0fb:	mov    rdi,rbp
   1b0fe:	call   1b020 <g_str_equal@plt+0x12c68>
   1b103:	cmp    QWORD PTR [rsp],0x0
   1b108:	je     1b140 <g_str_equal@plt+0x12d88>
   1b10a:	mov    rsi,rbx
   1b10d:	mov    rdi,rbp
   1b110:	call   20340 <g_str_equal@plt+0x17f88>
   1b115:	mov    rsi,QWORD PTR [rsp]
   1b119:	test   rsi,rsi
   1b11c:	je     1b0c4 <g_str_equal@plt+0x12d0c>
   1b11e:	mov    rdi,rbp
   1b121:	call   20ab0 <g_str_equal@plt+0x186f8>
   1b126:	test   al,al
   1b128:	je     1b139 <g_str_equal@plt+0x12d81>
   1b12a:	mov    rdi,QWORD PTR [rbx]
   1b12d:	call   154f0 <g_str_equal@plt+0xd138>
   1b132:	mov    QWORD PTR [rbx],0x0
   1b139:	mov    rsi,QWORD PTR [rsp]
   1b13d:	jmp    1b0c4 <g_str_equal@plt+0x12d0c>
   1b13f:	nop
   1b140:	mov    rsi,r12
   1b143:	mov    rdi,rbp
   1b146:	call   20290 <g_str_equal@plt+0x17ed8>
   1b14b:	jmp    1b10a <g_str_equal@plt+0x12d52>
   1b14d:	call   8050 <__stack_chk_fail@plt>
   1b152:	nop    DWORD PTR [rax+0x0]
   1b156:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1b160:	push   r13
   1b162:	push   r12
   1b164:	mov    r13,rdx
   1b167:	push   rbp
   1b168:	push   rbx
   1b169:	lea    rcx,[rip+0x222150]        # 23d2c0 <_fini@@Base+0x21403c>
   1b170:	mov    rbx,rsi
   1b173:	mov    rbp,rdi
   1b176:	sub    rsp,0x28
   1b17a:	mov    rax,QWORD PTR fs:0x28
   1b183:	mov    QWORD PTR [rsp+0x18],rax
   1b188:	xor    eax,eax
   1b18a:	lea    r12,[rsp+0x10]
   1b18f:	mov    eax,DWORD PTR [rsi]
   1b191:	lea    rdx,[rsp+0xc]
   1b196:	lea    rsi,[rip+0x11e3f]        # 2cfdc <_fini@@Base+0x3d58>
   1b19d:	mov    QWORD PTR [rsp+0x10],0x0
   1b1a6:	mov    r8,r12
   1b1a9:	mov    DWORD PTR [rsp+0xc],eax
   1b1ad:	call   219e0 <g_str_equal@plt+0x19628>
   1b1b2:	mov    rsi,QWORD PTR [rsp+0x10]
   1b1b7:	mov    eax,DWORD PTR [rsp+0xc]
   1b1bb:	test   rsi,rsi
   1b1be:	mov    DWORD PTR [rbx],eax
   1b1c0:	je     1b1e8 <g_str_equal@plt+0x12e30>
   1b1c2:	mov    rdi,r13
   1b1c5:	call   df30 <g_str_equal@plt+0x5b78>
   1b1ca:	mov    rax,QWORD PTR [rsp+0x18]
   1b1cf:	xor    rax,QWORD PTR fs:0x28
   1b1d8:	jne    1b205 <g_str_equal@plt+0x12e4d>
   1b1da:	add    rsp,0x28
   1b1de:	pop    rbx
   1b1df:	pop    rbp
   1b1e0:	pop    r12
   1b1e2:	pop    r13
   1b1e4:	ret    
   1b1e5:	nop    DWORD PTR [rax]
   1b1e8:	lea    rsi,[rip+0x11e62]        # 2d051 <_fini@@Base+0x3dcd>
   1b1ef:	lea    rdx,[rbx+0x8]
   1b1f3:	mov    rcx,r12
   1b1f6:	mov    rdi,rbp
   1b1f9:	call   1aee0 <g_str_equal@plt+0x12b28>
   1b1fe:	mov    rsi,QWORD PTR [rsp+0x10]
   1b203:	jmp    1b1c2 <g_str_equal@plt+0x12e0a>
   1b205:	call   8050 <__stack_chk_fail@plt>
   1b20a:	nop    WORD PTR [rax+rax*1+0x0]
   1b210:	push   rbx
   1b211:	mov    r8,rcx
   1b214:	mov    rbx,rdx
   1b217:	lea    rcx,[rip+0x222062]        # 23d280 <_fini@@Base+0x213ffc>
   1b21e:	sub    rsp,0x10
   1b222:	mov    rax,QWORD PTR fs:0x28
   1b22b:	mov    QWORD PTR [rsp+0x8],rax
   1b230:	xor    eax,eax
   1b232:	mov    eax,DWORD PTR [rdx]
   1b234:	lea    rdx,[rsp+0x4]
   1b239:	mov    DWORD PTR [rsp+0x4],eax
   1b23d:	call   219e0 <g_str_equal@plt+0x19628>
   1b242:	mov    eax,DWORD PTR [rsp+0x4]
   1b246:	mov    DWORD PTR [rbx],eax
   1b248:	mov    rax,QWORD PTR [rsp+0x8]
   1b24d:	xor    rax,QWORD PTR fs:0x28
   1b256:	jne    1b25e <g_str_equal@plt+0x12ea6>
   1b258:	add    rsp,0x10
   1b25c:	pop    rbx
   1b25d:	ret    
   1b25e:	call   8050 <__stack_chk_fail@plt>
   1b263:	nop    DWORD PTR [rax]
   1b266:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1b270:	push   r13
   1b272:	push   r12
   1b274:	mov    r13,rdx
   1b277:	push   rbp
   1b278:	push   rbx
   1b279:	lea    rcx,[rip+0x222000]        # 23d280 <_fini@@Base+0x213ffc>
   1b280:	mov    rbx,rsi
   1b283:	mov    rbp,rdi
   1b286:	sub    rsp,0x28
   1b28a:	mov    rax,QWORD PTR fs:0x28
   1b293:	mov    QWORD PTR [rsp+0x18],rax
   1b298:	xor    eax,eax
   1b29a:	lea    r12,[rsp+0x10]
   1b29f:	mov    eax,DWORD PTR [rsi]
   1b2a1:	lea    rdx,[rsp+0xc]
   1b2a6:	lea    rsi,[rip+0x11d1c]        # 2cfc9 <_fini@@Base+0x3d45>
   1b2ad:	mov    QWORD PTR [rsp+0x10],0x0
   1b2b6:	mov    r8,r12
   1b2b9:	mov    DWORD PTR [rsp+0xc],eax
   1b2bd:	call   219e0 <g_str_equal@plt+0x19628>
   1b2c2:	mov    rsi,QWORD PTR [rsp+0x10]
   1b2c7:	mov    eax,DWORD PTR [rsp+0xc]
   1b2cb:	test   rsi,rsi
   1b2ce:	mov    DWORD PTR [rbx],eax
   1b2d0:	je     1b2f8 <g_str_equal@plt+0x12f40>
   1b2d2:	mov    rdi,r13
   1b2d5:	call   df30 <g_str_equal@plt+0x5b78>
   1b2da:	mov    rax,QWORD PTR [rsp+0x18]
   1b2df:	xor    rax,QWORD PTR fs:0x28
   1b2e8:	jne    1b315 <g_str_equal@plt+0x12f5d>
   1b2ea:	add    rsp,0x28
   1b2ee:	pop    rbx
   1b2ef:	pop    rbp
   1b2f0:	pop    r12
   1b2f2:	pop    r13
   1b2f4:	ret    
   1b2f5:	nop    DWORD PTR [rax]
   1b2f8:	lea    rsi,[rip+0x11d58]        # 2d057 <_fini@@Base+0x3dd3>
   1b2ff:	lea    rdx,[rbx+0x8]
   1b303:	mov    rcx,r12
   1b306:	mov    rdi,rbp
   1b309:	call   23760 <g_str_equal@plt+0x1b3a8>
   1b30e:	mov    rsi,QWORD PTR [rsp+0x10]
   1b313:	jmp    1b2d2 <g_str_equal@plt+0x12f1a>
   1b315:	call   8050 <__stack_chk_fail@plt>
   1b31a:	nop    WORD PTR [rax+rax*1+0x0]
   1b320:	push   r13
   1b322:	push   r12
   1b324:	mov    r13,rcx
   1b327:	push   rbp
   1b328:	push   rbx
   1b329:	mov    ecx,0x10
   1b32e:	mov    rbp,rdi
   1b331:	mov    rbx,rdx
   1b334:	sub    rsp,0x18
   1b338:	mov    r12,rsp
   1b33b:	mov    QWORD PTR [rsp],0x0
   1b343:	mov    r8,r12
   1b346:	mov    rax,QWORD PTR fs:0x28
   1b34f:	mov    QWORD PTR [rsp+0x8],rax
   1b354:	xor    eax,eax
   1b356:	call   200e0 <g_str_equal@plt+0x17d28>
   1b35b:	mov    rsi,QWORD PTR [rsp]
   1b35f:	test   rsi,rsi
   1b362:	je     1b390 <g_str_equal@plt+0x12fd8>
   1b364:	mov    rdi,r13
   1b367:	call   df30 <g_str_equal@plt+0x5b78>
   1b36c:	mov    rax,QWORD PTR [rsp+0x8]
   1b371:	xor    rax,QWORD PTR fs:0x28
   1b37a:	jne    1b3ed <g_str_equal@plt+0x13035>
   1b37c:	add    rsp,0x18
   1b380:	pop    rbx
   1b381:	pop    rbp
   1b382:	pop    r12
   1b384:	pop    r13
   1b386:	ret    
   1b387:	nop    WORD PTR [rax+rax*1+0x0]
   1b390:	mov    rsi,QWORD PTR [rbx]
   1b393:	test   rsi,rsi
   1b396:	je     1b3aa <g_str_equal@plt+0x12ff2>
   1b398:	mov    rdx,r12
   1b39b:	mov    rdi,rbp
   1b39e:	call   1b270 <g_str_equal@plt+0x12eb8>
   1b3a3:	cmp    QWORD PTR [rsp],0x0
   1b3a8:	je     1b3e0 <g_str_equal@plt+0x13028>
   1b3aa:	mov    rsi,rbx
   1b3ad:	mov    rdi,rbp
   1b3b0:	call   20340 <g_str_equal@plt+0x17f88>
   1b3b5:	mov    rsi,QWORD PTR [rsp]
   1b3b9:	test   rsi,rsi
   1b3bc:	je     1b364 <g_str_equal@plt+0x12fac>
   1b3be:	mov    rdi,rbp
   1b3c1:	call   20ab0 <g_str_equal@plt+0x186f8>
   1b3c6:	test   al,al
   1b3c8:	je     1b3d9 <g_str_equal@plt+0x13021>
   1b3ca:	mov    rdi,QWORD PTR [rbx]
   1b3cd:	call   15530 <g_str_equal@plt+0xd178>
   1b3d2:	mov    QWORD PTR [rbx],0x0
   1b3d9:	mov    rsi,QWORD PTR [rsp]
   1b3dd:	jmp    1b364 <g_str_equal@plt+0x12fac>
   1b3df:	nop
   1b3e0:	mov    rsi,r12
   1b3e3:	mov    rdi,rbp
   1b3e6:	call   20290 <g_str_equal@plt+0x17ed8>
   1b3eb:	jmp    1b3aa <g_str_equal@plt+0x12ff2>
   1b3ed:	call   8050 <__stack_chk_fail@plt>
   1b3f2:	nop    DWORD PTR [rax+0x0]
   1b3f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1b400:	push   r13
   1b402:	push   r12
   1b404:	mov    r13,rdx
   1b407:	push   rbp
   1b408:	push   rbx
   1b409:	mov    rdx,rsi
   1b40c:	mov    rbx,rsi
   1b40f:	lea    rsi,[rip+0x11c58]        # 2d06e <_fini@@Base+0x3dea>
   1b416:	mov    rbp,rdi
   1b419:	sub    rsp,0x18
   1b41d:	mov    r12,rsp
   1b420:	mov    QWORD PTR [rsp],0x0
   1b428:	mov    rcx,r12
   1b42b:	mov    rax,QWORD PTR fs:0x28
   1b434:	mov    QWORD PTR [rsp+0x8],rax
   1b439:	xor    eax,eax
   1b43b:	call   1aee0 <g_str_equal@plt+0x12b28>
   1b440:	mov    rsi,QWORD PTR [rsp]
   1b444:	test   rsi,rsi
   1b447:	je     1b470 <g_str_equal@plt+0x130b8>
   1b449:	mov    rdi,r13
   1b44c:	call   df30 <g_str_equal@plt+0x5b78>
   1b451:	mov    rax,QWORD PTR [rsp+0x8]
   1b456:	xor    rax,QWORD PTR fs:0x28
   1b45f:	jne    1b48c <g_str_equal@plt+0x130d4>
   1b461:	add    rsp,0x18
   1b465:	pop    rbx
   1b466:	pop    rbp
   1b467:	pop    r12
   1b469:	pop    r13
   1b46b:	ret    
   1b46c:	nop    DWORD PTR [rax+0x0]
   1b470:	lea    rsi,[rip+0x11bfe]        # 2d075 <_fini@@Base+0x3df1>
   1b477:	lea    rdx,[rbx+0x8]
   1b47b:	mov    rcx,r12
   1b47e:	mov    rdi,rbp
   1b481:	call   1aee0 <g_str_equal@plt+0x12b28>
   1b486:	mov    rsi,QWORD PTR [rsp]
   1b48a:	jmp    1b449 <g_str_equal@plt+0x13091>
   1b48c:	call   8050 <__stack_chk_fail@plt>
   1b491:	nop    DWORD PTR [rax+rax*1+0x0]
   1b496:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1b4a0:	push   rbx
   1b4a1:	mov    rbx,rdx
   1b4a4:	mov    rdx,rsi
   1b4a7:	lea    rsi,[rip+0x11ba3]        # 2d051 <_fini@@Base+0x3dcd>
   1b4ae:	sub    rsp,0x10
   1b4b2:	mov    rcx,rsp
   1b4b5:	mov    QWORD PTR [rsp],0x0
   1b4bd:	mov    rax,QWORD PTR fs:0x28
   1b4c6:	mov    QWORD PTR [rsp+0x8],rax
   1b4cb:	xor    eax,eax
   1b4cd:	call   1aee0 <g_str_equal@plt+0x12b28>
   1b4d2:	mov    rsi,QWORD PTR [rsp]
   1b4d6:	mov    rdi,rbx
   1b4d9:	call   df30 <g_str_equal@plt+0x5b78>
   1b4de:	mov    rax,QWORD PTR [rsp+0x8]
   1b4e3:	xor    rax,QWORD PTR fs:0x28
   1b4ec:	jne    1b4f4 <g_str_equal@plt+0x1313c>
   1b4ee:	add    rsp,0x10
   1b4f2:	pop    rbx
   1b4f3:	ret    
   1b4f4:	call   8050 <__stack_chk_fail@plt>
   1b4f9:	nop    DWORD PTR [rax+0x0]
   1b500:	push   r13
   1b502:	push   r12
   1b504:	mov    r13,rcx
   1b507:	push   rbp
   1b508:	push   rbx
   1b509:	mov    ecx,0x8
   1b50e:	mov    rbp,rdi
   1b511:	mov    rbx,rdx
   1b514:	sub    rsp,0x18
   1b518:	mov    r12,rsp
   1b51b:	mov    QWORD PTR [rsp],0x0
   1b523:	mov    r8,r12
   1b526:	mov    rax,QWORD PTR fs:0x28
   1b52f:	mov    QWORD PTR [rsp+0x8],rax
   1b534:	xor    eax,eax
   1b536:	call   200e0 <g_str_equal@plt+0x17d28>
   1b53b:	mov    rsi,QWORD PTR [rsp]
   1b53f:	test   rsi,rsi
   1b542:	je     1b570 <g_str_equal@plt+0x131b8>
   1b544:	mov    rdi,r13
   1b547:	call   df30 <g_str_equal@plt+0x5b78>
   1b54c:	mov    rax,QWORD PTR [rsp+0x8]
   1b551:	xor    rax,QWORD PTR fs:0x28
   1b55a:	jne    1b5cd <g_str_equal@plt+0x13215>
   1b55c:	add    rsp,0x18
   1b560:	pop    rbx
   1b561:	pop    rbp
   1b562:	pop    r12
   1b564:	pop    r13
   1b566:	ret    
   1b567:	nop    WORD PTR [rax+rax*1+0x0]
   1b570:	mov    rsi,QWORD PTR [rbx]
   1b573:	test   rsi,rsi
   1b576:	je     1b58a <g_str_equal@plt+0x131d2>
   1b578:	mov    rdx,r12
   1b57b:	mov    rdi,rbp
   1b57e:	call   1b4a0 <g_str_equal@plt+0x130e8>
   1b583:	cmp    QWORD PTR [rsp],0x0
   1b588:	je     1b5c0 <g_str_equal@plt+0x13208>
   1b58a:	mov    rsi,rbx
   1b58d:	mov    rdi,rbp
   1b590:	call   20340 <g_str_equal@plt+0x17f88>
   1b595:	mov    rsi,QWORD PTR [rsp]
   1b599:	test   rsi,rsi
   1b59c:	je     1b544 <g_str_equal@plt+0x1318c>
   1b59e:	mov    rdi,rbp
   1b5a1:	call   20ab0 <g_str_equal@plt+0x186f8>
   1b5a6:	test   al,al
   1b5a8:	je     1b5b9 <g_str_equal@plt+0x13201>
   1b5aa:	mov    rdi,QWORD PTR [rbx]
   1b5ad:	call   15570 <g_str_equal@plt+0xd1b8>
   1b5b2:	mov    QWORD PTR [rbx],0x0
   1b5b9:	mov    rsi,QWORD PTR [rsp]
   1b5bd:	jmp    1b544 <g_str_equal@plt+0x1318c>
   1b5bf:	nop
   1b5c0:	mov    rsi,r12
   1b5c3:	mov    rdi,rbp
   1b5c6:	call   20290 <g_str_equal@plt+0x17ed8>
   1b5cb:	jmp    1b58a <g_str_equal@plt+0x131d2>
   1b5cd:	call   8050 <__stack_chk_fail@plt>
   1b5d2:	nop    DWORD PTR [rax+0x0]
   1b5d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1b5e0:	push   r13
   1b5e2:	push   r12
   1b5e4:	mov    r13,rdx
   1b5e7:	push   rbp
   1b5e8:	push   rbx
   1b5e9:	mov    rdx,rsi
   1b5ec:	mov    rbx,rsi
   1b5ef:	lea    rsi,[rip+0x11a78]        # 2d06e <_fini@@Base+0x3dea>
   1b5f6:	mov    rbp,rdi
   1b5f9:	sub    rsp,0x18
   1b5fd:	mov    r12,rsp
   1b600:	mov    QWORD PTR [rsp],0x0
   1b608:	mov    rcx,r12
   1b60b:	mov    rax,QWORD PTR fs:0x28
   1b614:	mov    QWORD PTR [rsp+0x8],rax
   1b619:	xor    eax,eax
   1b61b:	call   1aee0 <g_str_equal@plt+0x12b28>
   1b620:	mov    rsi,QWORD PTR [rsp]
   1b624:	test   rsi,rsi
   1b627:	je     1b650 <g_str_equal@plt+0x13298>
   1b629:	mov    rdi,r13
   1b62c:	call   df30 <g_str_equal@plt+0x5b78>
   1b631:	mov    rax,QWORD PTR [rsp+0x8]
   1b636:	xor    rax,QWORD PTR fs:0x28
   1b63f:	jne    1b66c <g_str_equal@plt+0x132b4>
   1b641:	add    rsp,0x18
   1b645:	pop    rbx
   1b646:	pop    rbp
   1b647:	pop    r12
   1b649:	pop    r13
   1b64b:	ret    
   1b64c:	nop    DWORD PTR [rax+0x0]
   1b650:	lea    rsi,[rip+0x11a1e]        # 2d075 <_fini@@Base+0x3df1>
   1b657:	lea    rdx,[rbx+0x8]
   1b65b:	mov    rcx,r12
   1b65e:	mov    rdi,rbp
   1b661:	call   1aee0 <g_str_equal@plt+0x12b28>
   1b666:	mov    rsi,QWORD PTR [rsp]
   1b66a:	jmp    1b629 <g_str_equal@plt+0x13271>
   1b66c:	call   8050 <__stack_chk_fail@plt>
   1b671:	nop    DWORD PTR [rax+rax*1+0x0]
   1b676:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1b680:	push   r13
   1b682:	push   r12
   1b684:	mov    r13,rdx
   1b687:	push   rbp
   1b688:	push   rbx
   1b689:	mov    rdx,rsi
   1b68c:	mov    rbx,rsi
   1b68f:	lea    rsi,[rip+0x119e6]        # 2d07c <_fini@@Base+0x3df8>
   1b696:	mov    rbp,rdi
   1b699:	sub    rsp,0x18
   1b69d:	mov    r12,rsp
   1b6a0:	mov    QWORD PTR [rsp],0x0
   1b6a8:	mov    rcx,r12
   1b6ab:	mov    rax,QWORD PTR fs:0x28
   1b6b4:	mov    QWORD PTR [rsp+0x8],rax
   1b6b9:	xor    eax,eax
   1b6bb:	call   20ac0 <g_str_equal@plt+0x18708>
   1b6c0:	mov    rsi,QWORD PTR [rsp]
   1b6c4:	test   rsi,rsi
   1b6c7:	je     1b6f0 <g_str_equal@plt+0x13338>
   1b6c9:	mov    rdi,r13
   1b6cc:	call   df30 <g_str_equal@plt+0x5b78>
   1b6d1:	mov    rax,QWORD PTR [rsp+0x8]
   1b6d6:	xor    rax,QWORD PTR fs:0x28
   1b6df:	jne    1b70c <g_str_equal@plt+0x13354>
   1b6e1:	add    rsp,0x18
   1b6e5:	pop    rbx
   1b6e6:	pop    rbp
   1b6e7:	pop    r12
   1b6e9:	pop    r13
   1b6eb:	ret    
   1b6ec:	nop    DWORD PTR [rax+0x0]
   1b6f0:	lea    rsi,[rip+0xdcde]        # 293d5 <_fini@@Base+0x151>
   1b6f7:	lea    rdx,[rbx+0x8]
   1b6fb:	mov    rcx,r12
   1b6fe:	mov    rdi,rbp
   1b701:	call   20ac0 <g_str_equal@plt+0x18708>
   1b706:	mov    rsi,QWORD PTR [rsp]
   1b70a:	jmp    1b6c9 <g_str_equal@plt+0x13311>
   1b70c:	call   8050 <__stack_chk_fail@plt>
   1b711:	nop    DWORD PTR [rax+rax*1+0x0]
   1b716:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1b720:	push   r13
   1b722:	push   r12
   1b724:	mov    r13,rcx
   1b727:	push   rbp
   1b728:	push   rbx
   1b729:	mov    ecx,0x10
   1b72e:	mov    rbp,rdi
   1b731:	mov    rbx,rdx
   1b734:	sub    rsp,0x18
   1b738:	mov    r12,rsp
   1b73b:	mov    QWORD PTR [rsp],0x0
   1b743:	mov    r8,r12
   1b746:	mov    rax,QWORD PTR fs:0x28
   1b74f:	mov    QWORD PTR [rsp+0x8],rax
   1b754:	xor    eax,eax
   1b756:	call   200e0 <g_str_equal@plt+0x17d28>
   1b75b:	mov    rsi,QWORD PTR [rsp]
   1b75f:	test   rsi,rsi
   1b762:	je     1b790 <g_str_equal@plt+0x133d8>
   1b764:	mov    rdi,r13
   1b767:	call   df30 <g_str_equal@plt+0x5b78>
   1b76c:	mov    rax,QWORD PTR [rsp+0x8]
   1b771:	xor    rax,QWORD PTR fs:0x28
   1b77a:	jne    1b7ed <g_str_equal@plt+0x13435>
   1b77c:	add    rsp,0x18
   1b780:	pop    rbx
   1b781:	pop    rbp
   1b782:	pop    r12
   1b784:	pop    r13
   1b786:	ret    
   1b787:	nop    WORD PTR [rax+rax*1+0x0]
   1b790:	mov    rsi,QWORD PTR [rbx]
   1b793:	test   rsi,rsi
   1b796:	je     1b7aa <g_str_equal@plt+0x133f2>
   1b798:	mov    rdx,r12
   1b79b:	mov    rdi,rbp
   1b79e:	call   1b680 <g_str_equal@plt+0x132c8>
   1b7a3:	cmp    QWORD PTR [rsp],0x0
   1b7a8:	je     1b7e0 <g_str_equal@plt+0x13428>
   1b7aa:	mov    rsi,rbx
   1b7ad:	mov    rdi,rbp
   1b7b0:	call   20340 <g_str_equal@plt+0x17f88>
   1b7b5:	mov    rsi,QWORD PTR [rsp]
   1b7b9:	test   rsi,rsi
   1b7bc:	je     1b764 <g_str_equal@plt+0x133ac>
   1b7be:	mov    rdi,rbp
   1b7c1:	call   20ab0 <g_str_equal@plt+0x186f8>
   1b7c6:	test   al,al
   1b7c8:	je     1b7d9 <g_str_equal@plt+0x13421>
   1b7ca:	mov    rdi,QWORD PTR [rbx]
   1b7cd:	call   155b0 <g_str_equal@plt+0xd1f8>
   1b7d2:	mov    QWORD PTR [rbx],0x0
   1b7d9:	mov    rsi,QWORD PTR [rsp]
   1b7dd:	jmp    1b764 <g_str_equal@plt+0x133ac>
   1b7df:	nop
   1b7e0:	mov    rsi,r12
   1b7e3:	mov    rdi,rbp
   1b7e6:	call   20290 <g_str_equal@plt+0x17ed8>
   1b7eb:	jmp    1b7aa <g_str_equal@plt+0x133f2>
   1b7ed:	call   8050 <__stack_chk_fail@plt>
   1b7f2:	nop    DWORD PTR [rax+0x0]
   1b7f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1b800:	push   r12
   1b802:	push   rbp
   1b803:	mov    r12,rdx
   1b806:	push   rbx
   1b807:	mov    rdx,rsi
   1b80a:	mov    rbx,rsi
   1b80d:	lea    rsi,[rip+0x11868]        # 2d07c <_fini@@Base+0x3df8>
   1b814:	mov    rbp,rdi
   1b817:	sub    rsp,0x10
   1b81b:	mov    rax,QWORD PTR fs:0x28
   1b824:	mov    QWORD PTR [rsp+0x8],rax
   1b829:	xor    eax,eax
   1b82b:	mov    QWORD PTR [rsp],0x0
   1b833:	call   209e0 <g_str_equal@plt+0x18628>
   1b838:	test   al,al
   1b83a:	je     1b880 <g_str_equal@plt+0x134c8>
   1b83c:	lea    rsi,[rip+0x11839]        # 2d07c <_fini@@Base+0x3df8>
   1b843:	lea    rdx,[rbx+0x8]
   1b847:	mov    rcx,rsp
   1b84a:	mov    rdi,rbp
   1b84d:	call   20ac0 <g_str_equal@plt+0x18708>
   1b852:	mov    rsi,QWORD PTR [rsp]
   1b856:	test   rsi,rsi
   1b859:	je     1b880 <g_str_equal@plt+0x134c8>
   1b85b:	mov    rdi,r12
   1b85e:	call   df30 <g_str_equal@plt+0x5b78>
   1b863:	mov    rax,QWORD PTR [rsp+0x8]
   1b868:	xor    rax,QWORD PTR fs:0x28
   1b871:	jne    1b8bc <g_str_equal@plt+0x13504>
   1b873:	add    rsp,0x10
   1b877:	pop    rbx
   1b878:	pop    rbp
   1b879:	pop    r12
   1b87b:	ret    
   1b87c:	nop    DWORD PTR [rax+0x0]
   1b880:	lea    rdx,[rbx+0x10]
   1b884:	lea    rsi,[rip+0x117fa]        # 2d085 <_fini@@Base+0x3e01>
   1b88b:	mov    rdi,rbp
   1b88e:	call   209e0 <g_str_equal@plt+0x18628>
   1b893:	test   al,al
   1b895:	jne    1b8a0 <g_str_equal@plt+0x134e8>
   1b897:	mov    rsi,QWORD PTR [rsp]
   1b89b:	jmp    1b85b <g_str_equal@plt+0x134a3>
   1b89d:	nop    DWORD PTR [rax]
   1b8a0:	lea    rsi,[rip+0x117de]        # 2d085 <_fini@@Base+0x3e01>
   1b8a7:	lea    rdx,[rbx+0x18]
   1b8ab:	mov    rcx,rsp
   1b8ae:	mov    rdi,rbp
   1b8b1:	call   21550 <g_str_equal@plt+0x19198>
   1b8b6:	mov    rsi,QWORD PTR [rsp]
   1b8ba:	jmp    1b85b <g_str_equal@plt+0x134a3>
   1b8bc:	call   8050 <__stack_chk_fail@plt>
   1b8c1:	nop    DWORD PTR [rax+rax*1+0x0]
   1b8c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1b8d0:	push   r13
   1b8d2:	push   r12
   1b8d4:	mov    r13,rdx
   1b8d7:	push   rbp
   1b8d8:	push   rbx
   1b8d9:	mov    rdx,rsi
   1b8dc:	mov    rbx,rsi
   1b8df:	lea    rsi,[rip+0x11796]        # 2d07c <_fini@@Base+0x3df8>
   1b8e6:	mov    rbp,rdi
   1b8e9:	sub    rsp,0x18
   1b8ed:	mov    r12,rsp
   1b8f0:	mov    QWORD PTR [rsp],0x0
   1b8f8:	mov    rcx,r12
   1b8fb:	mov    rax,QWORD PTR fs:0x28
   1b904:	mov    QWORD PTR [rsp+0x8],rax
   1b909:	xor    eax,eax
   1b90b:	call   20ac0 <g_str_equal@plt+0x18708>
   1b910:	mov    rsi,QWORD PTR [rsp]
   1b914:	test   rsi,rsi
   1b917:	je     1b940 <g_str_equal@plt+0x13588>
   1b919:	mov    rdi,r13
   1b91c:	call   df30 <g_str_equal@plt+0x5b78>
   1b921:	mov    rax,QWORD PTR [rsp+0x8]
   1b926:	xor    rax,QWORD PTR fs:0x28
   1b92f:	jne    1b973 <g_str_equal@plt+0x135bb>
   1b931:	add    rsp,0x18
   1b935:	pop    rbx
   1b936:	pop    rbp
   1b937:	pop    r12
   1b939:	pop    r13
   1b93b:	ret    
   1b93c:	nop    DWORD PTR [rax+0x0]
   1b940:	lea    rdx,[rbx+0x8]
   1b944:	lea    rsi,[rip+0xda8a]        # 293d5 <_fini@@Base+0x151>
   1b94b:	mov    rdi,rbp
   1b94e:	call   209e0 <g_str_equal@plt+0x18628>
   1b953:	test   al,al
   1b955:	je     1b96d <g_str_equal@plt+0x135b5>
   1b957:	lea    rdx,[rbx+0x10]
   1b95b:	lea    rsi,[rip+0xda73]        # 293d5 <_fini@@Base+0x151>
   1b962:	mov    rcx,r12
   1b965:	mov    rdi,rbp
   1b968:	call   20ac0 <g_str_equal@plt+0x18708>
   1b96d:	mov    rsi,QWORD PTR [rsp]
   1b971:	jmp    1b919 <g_str_equal@plt+0x13561>
   1b973:	call   8050 <__stack_chk_fail@plt>
   1b978:	nop    DWORD PTR [rax+rax*1+0x0]
   1b980:	push   r13
   1b982:	push   r12
   1b984:	mov    r13,rdx
   1b987:	push   rbp
   1b988:	push   rbx
   1b989:	mov    rdx,rsi
   1b98c:	mov    rbx,rsi
   1b98f:	lea    rsi,[rip+0xda3f]        # 293d5 <_fini@@Base+0x151>
   1b996:	mov    rbp,rdi
   1b999:	sub    rsp,0x18
   1b99d:	mov    r12,rsp
   1b9a0:	mov    QWORD PTR [rsp],0x0
   1b9a8:	mov    rcx,r12
   1b9ab:	mov    rax,QWORD PTR fs:0x28
   1b9b4:	mov    QWORD PTR [rsp+0x8],rax
   1b9b9:	xor    eax,eax
   1b9bb:	call   20ac0 <g_str_equal@plt+0x18708>
   1b9c0:	mov    rsi,QWORD PTR [rsp]
   1b9c4:	test   rsi,rsi
   1b9c7:	je     1b9f0 <g_str_equal@plt+0x13638>
   1b9c9:	mov    rdi,r13
   1b9cc:	call   df30 <g_str_equal@plt+0x5b78>
   1b9d1:	mov    rax,QWORD PTR [rsp+0x8]
   1b9d6:	xor    rax,QWORD PTR fs:0x28
   1b9df:	jne    1ba23 <g_str_equal@plt+0x1366b>
   1b9e1:	add    rsp,0x18
   1b9e5:	pop    rbx
   1b9e6:	pop    rbp
   1b9e7:	pop    r12
   1b9e9:	pop    r13
   1b9eb:	ret    
   1b9ec:	nop    DWORD PTR [rax+0x0]
   1b9f0:	lea    rdx,[rbx+0x8]
   1b9f4:	lea    rsi,[rip+0x1168a]        # 2d085 <_fini@@Base+0x3e01>
   1b9fb:	mov    rdi,rbp
   1b9fe:	call   209e0 <g_str_equal@plt+0x18628>
   1ba03:	test   al,al
   1ba05:	je     1ba1d <g_str_equal@plt+0x13665>
   1ba07:	lea    rdx,[rbx+0x10]
   1ba0b:	lea    rsi,[rip+0x11673]        # 2d085 <_fini@@Base+0x3e01>
   1ba12:	mov    rcx,r12
   1ba15:	mov    rdi,rbp
   1ba18:	call   21550 <g_str_equal@plt+0x19198>
   1ba1d:	mov    rsi,QWORD PTR [rsp]
   1ba21:	jmp    1b9c9 <g_str_equal@plt+0x13611>
   1ba23:	call   8050 <__stack_chk_fail@plt>
   1ba28:	nop    DWORD PTR [rax+rax*1+0x0]
   1ba30:	push   r13
   1ba32:	push   r12
   1ba34:	mov    r13,rcx
   1ba37:	push   rbp
   1ba38:	push   rbx
   1ba39:	mov    ecx,0x18
   1ba3e:	mov    rbp,rdi
   1ba41:	mov    rbx,rdx
   1ba44:	sub    rsp,0x18
   1ba48:	mov    r12,rsp
   1ba4b:	mov    QWORD PTR [rsp],0x0
   1ba53:	mov    r8,r12
   1ba56:	mov    rax,QWORD PTR fs:0x28
   1ba5f:	mov    QWORD PTR [rsp+0x8],rax
   1ba64:	xor    eax,eax
   1ba66:	call   200e0 <g_str_equal@plt+0x17d28>
   1ba6b:	mov    rsi,QWORD PTR [rsp]
   1ba6f:	test   rsi,rsi
   1ba72:	je     1baa0 <g_str_equal@plt+0x136e8>
   1ba74:	mov    rdi,r13
   1ba77:	call   df30 <g_str_equal@plt+0x5b78>
   1ba7c:	mov    rax,QWORD PTR [rsp+0x8]
   1ba81:	xor    rax,QWORD PTR fs:0x28
   1ba8a:	jne    1bafd <g_str_equal@plt+0x13745>
   1ba8c:	add    rsp,0x18
   1ba90:	pop    rbx
   1ba91:	pop    rbp
   1ba92:	pop    r12
   1ba94:	pop    r13
   1ba96:	ret    
   1ba97:	nop    WORD PTR [rax+rax*1+0x0]
   1baa0:	mov    rsi,QWORD PTR [rbx]
   1baa3:	test   rsi,rsi
   1baa6:	je     1baba <g_str_equal@plt+0x13702>
   1baa8:	mov    rdx,r12
   1baab:	mov    rdi,rbp
   1baae:	call   1b980 <g_str_equal@plt+0x135c8>
   1bab3:	cmp    QWORD PTR [rsp],0x0
   1bab8:	je     1baf0 <g_str_equal@plt+0x13738>
   1baba:	mov    rsi,rbx
   1babd:	mov    rdi,rbp
   1bac0:	call   20340 <g_str_equal@plt+0x17f88>
   1bac5:	mov    rsi,QWORD PTR [rsp]
   1bac9:	test   rsi,rsi
   1bacc:	je     1ba74 <g_str_equal@plt+0x136bc>
   1bace:	mov    rdi,rbp
   1bad1:	call   20ab0 <g_str_equal@plt+0x186f8>
   1bad6:	test   al,al
   1bad8:	je     1bae9 <g_str_equal@plt+0x13731>
   1bada:	mov    rdi,QWORD PTR [rbx]
   1badd:	call   155f0 <g_str_equal@plt+0xd238>
   1bae2:	mov    QWORD PTR [rbx],0x0
   1bae9:	mov    rsi,QWORD PTR [rsp]
   1baed:	jmp    1ba74 <g_str_equal@plt+0x136bc>
   1baef:	nop
   1baf0:	mov    rsi,r12
   1baf3:	mov    rdi,rbp
   1baf6:	call   20290 <g_str_equal@plt+0x17ed8>
   1bafb:	jmp    1baba <g_str_equal@plt+0x13702>
   1bafd:	call   8050 <__stack_chk_fail@plt>
   1bb02:	nop    DWORD PTR [rax+0x0]
   1bb06:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1bb10:	push   r14
   1bb12:	push   r13
   1bb14:	mov    r14,rcx
   1bb17:	push   r12
   1bb19:	push   rbp
   1bb1a:	mov    ecx,0x10
   1bb1f:	push   rbx
   1bb20:	mov    rbp,rdi
   1bb23:	mov    r13,rdx
   1bb26:	sub    rsp,0x10
   1bb2a:	mov    r12,rsp
   1bb2d:	mov    QWORD PTR [rsp],0x0
   1bb35:	mov    r8,r12
   1bb38:	mov    rax,QWORD PTR fs:0x28
   1bb41:	mov    QWORD PTR [rsp+0x8],rax
   1bb46:	xor    eax,eax
   1bb48:	call   203e0 <g_str_equal@plt+0x18028>
   1bb4d:	mov    rsi,QWORD PTR [rsp]
   1bb51:	test   rsi,rsi
   1bb54:	je     1bb80 <g_str_equal@plt+0x137c8>
   1bb56:	mov    rdi,r14
   1bb59:	call   df30 <g_str_equal@plt+0x5b78>
   1bb5e:	mov    rax,QWORD PTR [rsp+0x8]
   1bb63:	xor    rax,QWORD PTR fs:0x28
   1bb6c:	jne    1bc14 <g_str_equal@plt+0x1385c>
   1bb72:	add    rsp,0x10
   1bb76:	pop    rbx
   1bb77:	pop    rbp
   1bb78:	pop    r12
   1bb7a:	pop    r13
   1bb7c:	pop    r14
   1bb7e:	ret    
   1bb7f:	nop
   1bb80:	mov    rbx,QWORD PTR [r13+0x0]
   1bb84:	test   rbx,rbx
   1bb87:	jne    1bba8 <g_str_equal@plt+0x137f0>
   1bb89:	jmp    1bc07 <g_str_equal@plt+0x1384f>
   1bb8b:	nop    DWORD PTR [rax+rax*1+0x0]
   1bb90:	mov    rsi,rbx
   1bb93:	mov    edx,0x10
   1bb98:	mov    rdi,rbp
   1bb9b:	call   20530 <g_str_equal@plt+0x18178>
   1bba0:	test   rax,rax
   1bba3:	mov    rbx,rax
   1bba6:	je     1bc00 <g_str_equal@plt+0x13848>
   1bba8:	lea    rdx,[rbx+0x8]
   1bbac:	xor    esi,esi
   1bbae:	mov    rcx,r12
   1bbb1:	mov    rdi,rbp
   1bbb4:	call   1ba30 <g_str_equal@plt+0x13678>
   1bbb9:	cmp    QWORD PTR [rsp],0x0
   1bbbe:	je     1bb90 <g_str_equal@plt+0x137d8>
   1bbc0:	mov    rsi,r13
   1bbc3:	mov    rdi,rbp
   1bbc6:	call   206d0 <g_str_equal@plt+0x18318>
   1bbcb:	mov    rsi,QWORD PTR [rsp]
   1bbcf:	test   rsi,rsi
   1bbd2:	je     1bb56 <g_str_equal@plt+0x1379e>
   1bbd4:	mov    rdi,rbp
   1bbd7:	call   20ab0 <g_str_equal@plt+0x186f8>
   1bbdc:	test   al,al
   1bbde:	je     1bbf1 <g_str_equal@plt+0x13839>
   1bbe0:	mov    rdi,QWORD PTR [r13+0x0]
   1bbe4:	call   15630 <g_str_equal@plt+0xd278>
   1bbe9:	mov    QWORD PTR [r13+0x0],0x0
   1bbf1:	mov    rsi,QWORD PTR [rsp]
   1bbf5:	jmp    1bb56 <g_str_equal@plt+0x1379e>
   1bbfa:	nop    WORD PTR [rax+rax*1+0x0]
   1bc00:	cmp    QWORD PTR [rsp],0x0
   1bc05:	jne    1bbc0 <g_str_equal@plt+0x13808>
   1bc07:	mov    rsi,r12
   1bc0a:	mov    rdi,rbp
   1bc0d:	call   20620 <g_str_equal@plt+0x18268>
   1bc12:	jmp    1bbc0 <g_str_equal@plt+0x13808>
   1bc14:	call   8050 <__stack_chk_fail@plt>
   1bc19:	nop    DWORD PTR [rax+0x0]
   1bc20:	push   r13
   1bc22:	push   r12
   1bc24:	mov    r13,rdx
   1bc27:	push   rbp
   1bc28:	push   rbx
   1bc29:	mov    rdx,rsi
   1bc2c:	mov    rbx,rsi
   1bc2f:	lea    rsi,[rip+0x11446]        # 2d07c <_fini@@Base+0x3df8>
   1bc36:	mov    rbp,rdi
   1bc39:	sub    rsp,0x18
   1bc3d:	mov    r12,rsp
   1bc40:	mov    QWORD PTR [rsp],0x0
   1bc48:	mov    rcx,r12
   1bc4b:	mov    rax,QWORD PTR fs:0x28
   1bc54:	mov    QWORD PTR [rsp+0x8],rax
   1bc59:	xor    eax,eax
   1bc5b:	call   20ac0 <g_str_equal@plt+0x18708>
   1bc60:	mov    rsi,QWORD PTR [rsp]
   1bc64:	test   rsi,rsi
   1bc67:	je     1bc90 <g_str_equal@plt+0x138d8>
   1bc69:	mov    rdi,r13
   1bc6c:	call   df30 <g_str_equal@plt+0x5b78>
   1bc71:	mov    rax,QWORD PTR [rsp+0x8]
   1bc76:	xor    rax,QWORD PTR fs:0x28
   1bc7f:	jne    1bcac <g_str_equal@plt+0x138f4>
   1bc81:	add    rsp,0x18
   1bc85:	pop    rbx
   1bc86:	pop    rbp
   1bc87:	pop    r12
   1bc89:	pop    r13
   1bc8b:	ret    
   1bc8c:	nop    DWORD PTR [rax+0x0]
   1bc90:	lea    rsi,[rip+0x113f5]        # 2d08c <_fini@@Base+0x3e08>
   1bc97:	lea    rdx,[rbx+0x8]
   1bc9b:	mov    rcx,r12
   1bc9e:	mov    rdi,rbp
   1bca1:	call   1bb10 <g_str_equal@plt+0x13758>
   1bca6:	mov    rsi,QWORD PTR [rsp]
   1bcaa:	jmp    1bc69 <g_str_equal@plt+0x138b1>
   1bcac:	call   8050 <__stack_chk_fail@plt>
   1bcb1:	nop    DWORD PTR [rax+rax*1+0x0]
   1bcb6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1bcc0:	push   r13
   1bcc2:	push   r12
   1bcc4:	mov    r13,rcx
   1bcc7:	push   rbp
   1bcc8:	push   rbx
   1bcc9:	mov    ecx,0x10
   1bcce:	mov    rbp,rdi
   1bcd1:	mov    rbx,rdx
   1bcd4:	sub    rsp,0x18
   1bcd8:	mov    r12,rsp
   1bcdb:	mov    QWORD PTR [rsp],0x0
   1bce3:	mov    r8,r12
   1bce6:	mov    rax,QWORD PTR fs:0x28
   1bcef:	mov    QWORD PTR [rsp+0x8],rax
   1bcf4:	xor    eax,eax
   1bcf6:	call   200e0 <g_str_equal@plt+0x17d28>
   1bcfb:	mov    rsi,QWORD PTR [rsp]
   1bcff:	test   rsi,rsi
   1bd02:	je     1bd30 <g_str_equal@plt+0x13978>
   1bd04:	mov    rdi,r13
   1bd07:	call   df30 <g_str_equal@plt+0x5b78>
   1bd0c:	mov    rax,QWORD PTR [rsp+0x8]
   1bd11:	xor    rax,QWORD PTR fs:0x28
   1bd1a:	jne    1bd8d <g_str_equal@plt+0x139d5>
   1bd1c:	add    rsp,0x18
   1bd20:	pop    rbx
   1bd21:	pop    rbp
   1bd22:	pop    r12
   1bd24:	pop    r13
   1bd26:	ret    
   1bd27:	nop    WORD PTR [rax+rax*1+0x0]
   1bd30:	mov    rsi,QWORD PTR [rbx]
   1bd33:	test   rsi,rsi
   1bd36:	je     1bd4a <g_str_equal@plt+0x13992>
   1bd38:	mov    rdx,r12
   1bd3b:	mov    rdi,rbp
   1bd3e:	call   1bc20 <g_str_equal@plt+0x13868>
   1bd43:	cmp    QWORD PTR [rsp],0x0
   1bd48:	je     1bd80 <g_str_equal@plt+0x139c8>
   1bd4a:	mov    rsi,rbx
   1bd4d:	mov    rdi,rbp
   1bd50:	call   20340 <g_str_equal@plt+0x17f88>
   1bd55:	mov    rsi,QWORD PTR [rsp]
   1bd59:	test   rsi,rsi
   1bd5c:	je     1bd04 <g_str_equal@plt+0x1394c>
   1bd5e:	mov    rdi,rbp
   1bd61:	call   20ab0 <g_str_equal@plt+0x186f8>
   1bd66:	test   al,al
   1bd68:	je     1bd79 <g_str_equal@plt+0x139c1>
   1bd6a:	mov    rdi,QWORD PTR [rbx]
   1bd6d:	call   15670 <g_str_equal@plt+0xd2b8>
   1bd72:	mov    QWORD PTR [rbx],0x0
   1bd79:	mov    rsi,QWORD PTR [rsp]
   1bd7d:	jmp    1bd04 <g_str_equal@plt+0x1394c>
   1bd7f:	nop
   1bd80:	mov    rsi,r12
   1bd83:	mov    rdi,rbp
   1bd86:	call   20290 <g_str_equal@plt+0x17ed8>
   1bd8b:	jmp    1bd4a <g_str_equal@plt+0x13992>
   1bd8d:	call   8050 <__stack_chk_fail@plt>
   1bd92:	nop    DWORD PTR [rax+0x0]
   1bd96:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1bda0:	push   r14
   1bda2:	push   r13
   1bda4:	mov    r14,rcx
   1bda7:	push   r12
   1bda9:	push   rbp
   1bdaa:	mov    ecx,0x10
   1bdaf:	push   rbx
   1bdb0:	mov    rbp,rdi
   1bdb3:	mov    r13,rdx
   1bdb6:	sub    rsp,0x10
   1bdba:	mov    r12,rsp
   1bdbd:	mov    QWORD PTR [rsp],0x0
   1bdc5:	mov    r8,r12
   1bdc8:	mov    rax,QWORD PTR fs:0x28
   1bdd1:	mov    QWORD PTR [rsp+0x8],rax
   1bdd6:	xor    eax,eax
   1bdd8:	call   203e0 <g_str_equal@plt+0x18028>
   1bddd:	mov    rsi,QWORD PTR [rsp]
   1bde1:	test   rsi,rsi
   1bde4:	je     1be10 <g_str_equal@plt+0x13a58>
   1bde6:	mov    rdi,r14
   1bde9:	call   df30 <g_str_equal@plt+0x5b78>
   1bdee:	mov    rax,QWORD PTR [rsp+0x8]
   1bdf3:	xor    rax,QWORD PTR fs:0x28
   1bdfc:	jne    1bea4 <g_str_equal@plt+0x13aec>
   1be02:	add    rsp,0x10
   1be06:	pop    rbx
   1be07:	pop    rbp
   1be08:	pop    r12
   1be0a:	pop    r13
   1be0c:	pop    r14
   1be0e:	ret    
   1be0f:	nop
   1be10:	mov    rbx,QWORD PTR [r13+0x0]
   1be14:	test   rbx,rbx
   1be17:	jne    1be38 <g_str_equal@plt+0x13a80>
   1be19:	jmp    1be97 <g_str_equal@plt+0x13adf>
   1be1b:	nop    DWORD PTR [rax+rax*1+0x0]
   1be20:	mov    rsi,rbx
   1be23:	mov    edx,0x10
   1be28:	mov    rdi,rbp
   1be2b:	call   20530 <g_str_equal@plt+0x18178>
   1be30:	test   rax,rax
   1be33:	mov    rbx,rax
   1be36:	je     1be90 <g_str_equal@plt+0x13ad8>
   1be38:	lea    rdx,[rbx+0x8]
   1be3c:	xor    esi,esi
   1be3e:	mov    rcx,r12
   1be41:	mov    rdi,rbp
   1be44:	call   1bcc0 <g_str_equal@plt+0x13908>
   1be49:	cmp    QWORD PTR [rsp],0x0
   1be4e:	je     1be20 <g_str_equal@plt+0x13a68>
   1be50:	mov    rsi,r13
   1be53:	mov    rdi,rbp
   1be56:	call   206d0 <g_str_equal@plt+0x18318>
   1be5b:	mov    rsi,QWORD PTR [rsp]
   1be5f:	test   rsi,rsi
   1be62:	je     1bde6 <g_str_equal@plt+0x13a2e>
   1be64:	mov    rdi,rbp
   1be67:	call   20ab0 <g_str_equal@plt+0x186f8>
   1be6c:	test   al,al
   1be6e:	je     1be81 <g_str_equal@plt+0x13ac9>
   1be70:	mov    rdi,QWORD PTR [r13+0x0]
   1be74:	call   156b0 <g_str_equal@plt+0xd2f8>
   1be79:	mov    QWORD PTR [r13+0x0],0x0
   1be81:	mov    rsi,QWORD PTR [rsp]
   1be85:	jmp    1bde6 <g_str_equal@plt+0x13a2e>
   1be8a:	nop    WORD PTR [rax+rax*1+0x0]
   1be90:	cmp    QWORD PTR [rsp],0x0
   1be95:	jne    1be50 <g_str_equal@plt+0x13a98>
   1be97:	mov    rsi,r12
   1be9a:	mov    rdi,rbp
   1be9d:	call   20620 <g_str_equal@plt+0x18268>
   1bea2:	jmp    1be50 <g_str_equal@plt+0x13a98>
   1bea4:	call   8050 <__stack_chk_fail@plt>
   1bea9:	nop    DWORD PTR [rax+0x0]
   1beb0:	push   rbx
   1beb1:	mov    rbx,rdx
   1beb4:	mov    rdx,rsi
   1beb7:	lea    rsi,[rip+0x111d2]        # 2d090 <_fini@@Base+0x3e0c>
   1bebe:	sub    rsp,0x10
   1bec2:	mov    rcx,rsp
   1bec5:	mov    QWORD PTR [rsp],0x0
   1becd:	mov    rax,QWORD PTR fs:0x28
   1bed6:	mov    QWORD PTR [rsp+0x8],rax
   1bedb:	xor    eax,eax
   1bedd:	call   24c40 <g_str_equal@plt+0x1c888>
   1bee2:	mov    rsi,QWORD PTR [rsp]
   1bee6:	mov    rdi,rbx
   1bee9:	call   df30 <g_str_equal@plt+0x5b78>
   1beee:	mov    rax,QWORD PTR [rsp+0x8]
   1bef3:	xor    rax,QWORD PTR fs:0x28
   1befc:	jne    1bf04 <g_str_equal@plt+0x13b4c>
   1befe:	add    rsp,0x10
   1bf02:	pop    rbx
   1bf03:	ret    
   1bf04:	call   8050 <__stack_chk_fail@plt>
   1bf09:	nop    DWORD PTR [rax+0x0]
   1bf10:	push   r13
   1bf12:	push   r12
   1bf14:	mov    r13,rcx
   1bf17:	push   rbp
   1bf18:	push   rbx
   1bf19:	mov    ecx,0x4
   1bf1e:	mov    rbp,rdi
   1bf21:	mov    rbx,rdx
   1bf24:	sub    rsp,0x18
   1bf28:	mov    r12,rsp
   1bf2b:	mov    QWORD PTR [rsp],0x0
   1bf33:	mov    r8,r12
   1bf36:	mov    rax,QWORD PTR fs:0x28
   1bf3f:	mov    QWORD PTR [rsp+0x8],rax
   1bf44:	xor    eax,eax
   1bf46:	call   200e0 <g_str_equal@plt+0x17d28>
   1bf4b:	mov    rsi,QWORD PTR [rsp]
   1bf4f:	test   rsi,rsi
   1bf52:	je     1bf80 <g_str_equal@plt+0x13bc8>
   1bf54:	mov    rdi,r13
   1bf57:	call   df30 <g_str_equal@plt+0x5b78>
   1bf5c:	mov    rax,QWORD PTR [rsp+0x8]
   1bf61:	xor    rax,QWORD PTR fs:0x28
   1bf6a:	jne    1bfdd <g_str_equal@plt+0x13c25>
   1bf6c:	add    rsp,0x18
   1bf70:	pop    rbx
   1bf71:	pop    rbp
   1bf72:	pop    r12
   1bf74:	pop    r13
   1bf76:	ret    
   1bf77:	nop    WORD PTR [rax+rax*1+0x0]
   1bf80:	mov    rsi,QWORD PTR [rbx]
   1bf83:	test   rsi,rsi
   1bf86:	je     1bf9a <g_str_equal@plt+0x13be2>
   1bf88:	mov    rdx,r12
   1bf8b:	mov    rdi,rbp
   1bf8e:	call   1beb0 <g_str_equal@plt+0x13af8>
   1bf93:	cmp    QWORD PTR [rsp],0x0
   1bf98:	je     1bfd0 <g_str_equal@plt+0x13c18>
   1bf9a:	mov    rsi,rbx
   1bf9d:	mov    rdi,rbp
   1bfa0:	call   20340 <g_str_equal@plt+0x17f88>
   1bfa5:	mov    rsi,QWORD PTR [rsp]
   1bfa9:	test   rsi,rsi
   1bfac:	je     1bf54 <g_str_equal@plt+0x13b9c>
   1bfae:	mov    rdi,rbp
   1bfb1:	call   20ab0 <g_str_equal@plt+0x186f8>
   1bfb6:	test   al,al
   1bfb8:	je     1bfc9 <g_str_equal@plt+0x13c11>
   1bfba:	mov    rdi,QWORD PTR [rbx]
   1bfbd:	call   156f0 <g_str_equal@plt+0xd338>
   1bfc2:	mov    QWORD PTR [rbx],0x0
   1bfc9:	mov    rsi,QWORD PTR [rsp]
   1bfcd:	jmp    1bf54 <g_str_equal@plt+0x13b9c>
   1bfcf:	nop
   1bfd0:	mov    rsi,r12
   1bfd3:	mov    rdi,rbp
   1bfd6:	call   20290 <g_str_equal@plt+0x17ed8>
   1bfdb:	jmp    1bf9a <g_str_equal@plt+0x13be2>
   1bfdd:	call   8050 <__stack_chk_fail@plt>
   1bfe2:	nop    DWORD PTR [rax+0x0]
   1bfe6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1bff0:	push   r12
   1bff2:	push   rbp
   1bff3:	mov    r12,rdx
   1bff6:	push   rbx
   1bff7:	mov    rdx,rsi
   1bffa:	mov    rbx,rsi
   1bffd:	lea    rsi,[rip+0x11091]        # 2d095 <_fini@@Base+0x3e11>
   1c004:	mov    rbp,rdi
   1c007:	sub    rsp,0x10
   1c00b:	mov    rax,QWORD PTR fs:0x28
   1c014:	mov    QWORD PTR [rsp+0x8],rax
   1c019:	xor    eax,eax
   1c01b:	mov    QWORD PTR [rsp],0x0
   1c023:	call   209e0 <g_str_equal@plt+0x18628>
   1c028:	test   al,al
   1c02a:	je     1c070 <g_str_equal@plt+0x13cb8>
   1c02c:	lea    rsi,[rip+0x11062]        # 2d095 <_fini@@Base+0x3e11>
   1c033:	lea    rdx,[rbx+0x8]
   1c037:	mov    rcx,rsp
   1c03a:	mov    rdi,rbp
   1c03d:	call   21550 <g_str_equal@plt+0x19198>
   1c042:	mov    rsi,QWORD PTR [rsp]
   1c046:	test   rsi,rsi
   1c049:	je     1c070 <g_str_equal@plt+0x13cb8>
   1c04b:	mov    rdi,r12
   1c04e:	call   df30 <g_str_equal@plt+0x5b78>
   1c053:	mov    rax,QWORD PTR [rsp+0x8]
   1c058:	xor    rax,QWORD PTR fs:0x28
   1c061:	jne    1c268 <g_str_equal@plt+0x13eb0>
   1c067:	add    rsp,0x10
   1c06b:	pop    rbx
   1c06c:	pop    rbp
   1c06d:	pop    r12
   1c06f:	ret    
   1c070:	lea    rdx,[rbx+0x10]
   1c074:	lea    rsi,[rip+0x11036]        # 2d0b1 <_fini@@Base+0x3e2d>
   1c07b:	mov    rdi,rbp
   1c07e:	call   209e0 <g_str_equal@plt+0x18628>
   1c083:	test   al,al
   1c085:	jne    1c1e0 <g_str_equal@plt+0x13e28>
   1c08b:	lea    rdx,[rbx+0x12]
   1c08f:	lea    rsi,[rip+0x11003]        # 2d099 <_fini@@Base+0x3e15>
   1c096:	mov    rdi,rbp
   1c099:	call   209e0 <g_str_equal@plt+0x18628>
   1c09e:	test   al,al
   1c0a0:	je     1c0c1 <g_str_equal@plt+0x13d09>
   1c0a2:	lea    rsi,[rip+0x10ff0]        # 2d099 <_fini@@Base+0x3e15>
   1c0a9:	lea    rdx,[rbx+0x18]
   1c0ad:	mov    rcx,rsp
   1c0b0:	mov    rdi,rbp
   1c0b3:	call   21550 <g_str_equal@plt+0x19198>
   1c0b8:	mov    rsi,QWORD PTR [rsp]
   1c0bc:	test   rsi,rsi
   1c0bf:	jne    1c04b <g_str_equal@plt+0x13c93>
   1c0c1:	lea    rdx,[rbx+0x20]
   1c0c5:	lea    rsi,[rip+0x10fd4]        # 2d0a0 <_fini@@Base+0x3e1c>
   1c0cc:	mov    rdi,rbp
   1c0cf:	call   209e0 <g_str_equal@plt+0x18628>
   1c0d4:	test   al,al
   1c0d6:	jne    1c210 <g_str_equal@plt+0x13e58>
   1c0dc:	lea    rdx,[rbx+0x30]
   1c0e0:	lea    rsi,[rip+0x10fc6]        # 2d0ad <_fini@@Base+0x3e29>
   1c0e7:	mov    rdi,rbp
   1c0ea:	call   209e0 <g_str_equal@plt+0x18628>
   1c0ef:	test   al,al
   1c0f1:	je     1c116 <g_str_equal@plt+0x13d5e>
   1c0f3:	lea    rsi,[rip+0x10fb3]        # 2d0ad <_fini@@Base+0x3e29>
   1c0fa:	lea    rdx,[rbx+0x34]
   1c0fe:	mov    rcx,rsp
   1c101:	mov    rdi,rbp
   1c104:	call   20d90 <g_str_equal@plt+0x189d8>
   1c109:	mov    rsi,QWORD PTR [rsp]
   1c10d:	test   rsi,rsi
   1c110:	jne    1c04b <g_str_equal@plt+0x13c93>
   1c116:	lea    rdx,[rbx+0x38]
   1c11a:	lea    rsi,[rip+0x10f94]        # 2d0b5 <_fini@@Base+0x3e31>
   1c121:	mov    rdi,rbp
   1c124:	call   209e0 <g_str_equal@plt+0x18628>
   1c129:	test   al,al
   1c12b:	je     1c150 <g_str_equal@plt+0x13d98>
   1c12d:	lea    rsi,[rip+0x10f81]        # 2d0b5 <_fini@@Base+0x3e31>
   1c134:	lea    rdx,[rbx+0x40]
   1c138:	mov    rcx,rsp
   1c13b:	mov    rdi,rbp
   1c13e:	call   21550 <g_str_equal@plt+0x19198>
   1c143:	mov    rsi,QWORD PTR [rsp]
   1c147:	test   rsi,rsi
   1c14a:	jne    1c04b <g_str_equal@plt+0x13c93>
   1c150:	lea    rdx,[rbx+0x48]
   1c154:	lea    rsi,[rip+0x10f6a]        # 2d0c5 <_fini@@Base+0x3e41>
   1c15b:	mov    rdi,rbp
   1c15e:	call   209e0 <g_str_equal@plt+0x18628>
   1c163:	test   al,al
   1c165:	je     1c18a <g_str_equal@plt+0x13dd2>
   1c167:	lea    rsi,[rip+0x10f57]        # 2d0c5 <_fini@@Base+0x3e41>
   1c16e:	lea    rdx,[rbx+0x4c]
   1c172:	mov    rcx,rsp
   1c175:	mov    rdi,rbp
   1c178:	call   20d90 <g_str_equal@plt+0x189d8>
   1c17d:	mov    rsi,QWORD PTR [rsp]
   1c181:	test   rsi,rsi
   1c184:	jne    1c04b <g_str_equal@plt+0x13c93>
   1c18a:	lea    rdx,[rbx+0x50]
   1c18e:	lea    rsi,[rip+0xff1e]        # 2c0b3 <_fini@@Base+0x2e2f>
   1c195:	mov    rdi,rbp
   1c198:	call   209e0 <g_str_equal@plt+0x18628>
   1c19d:	test   al,al
   1c19f:	jne    1c240 <g_str_equal@plt+0x13e88>
   1c1a5:	lea    rdx,[rbx+0x60]
   1c1a9:	lea    rsi,[rip+0x10f26]        # 2d0d6 <_fini@@Base+0x3e52>
   1c1b0:	mov    rdi,rbp
   1c1b3:	call   209e0 <g_str_equal@plt+0x18628>
   1c1b8:	test   al,al
   1c1ba:	je     1c1d2 <g_str_equal@plt+0x13e1a>
   1c1bc:	lea    rdx,[rbx+0x68]
   1c1c0:	lea    rsi,[rip+0x10f0f]        # 2d0d6 <_fini@@Base+0x3e52>
   1c1c7:	mov    rcx,rsp
   1c1ca:	mov    rdi,rbp
   1c1cd:	call   21550 <g_str_equal@plt+0x19198>
   1c1d2:	mov    rsi,QWORD PTR [rsp]
   1c1d6:	jmp    1c04b <g_str_equal@plt+0x13c93>
   1c1db:	nop    DWORD PTR [rax+rax*1+0x0]
   1c1e0:	lea    rsi,[rip+0x10eca]        # 2d0b1 <_fini@@Base+0x3e2d>
   1c1e7:	lea    rdx,[rbx+0x11]
   1c1eb:	mov    rcx,rsp
   1c1ee:	mov    rdi,rbp
   1c1f1:	call   20bb0 <g_str_equal@plt+0x187f8>
   1c1f6:	mov    rsi,QWORD PTR [rsp]
   1c1fa:	test   rsi,rsi
   1c1fd:	jne    1c04b <g_str_equal@plt+0x13c93>
   1c203:	jmp    1c08b <g_str_equal@plt+0x13cd3>
   1c208:	nop    DWORD PTR [rax+rax*1+0x0]
   1c210:	lea    rsi,[rip+0x10e89]        # 2d0a0 <_fini@@Base+0x3e1c>
   1c217:	lea    rdx,[rbx+0x28]
   1c21b:	mov    rcx,rsp
   1c21e:	mov    rdi,rbp
   1c221:	call   21550 <g_str_equal@plt+0x19198>
   1c226:	mov    rsi,QWORD PTR [rsp]
   1c22a:	test   rsi,rsi
   1c22d:	jne    1c04b <g_str_equal@plt+0x13c93>
   1c233:	jmp    1c0dc <g_str_equal@plt+0x13d24>
   1c238:	nop    DWORD PTR [rax+rax*1+0x0]
   1c240:	lea    rsi,[rip+0xfe6c]        # 2c0b3 <_fini@@Base+0x2e2f>
   1c247:	lea    rdx,[rbx+0x58]
   1c24b:	mov    rcx,rsp
   1c24e:	mov    rdi,rbp
   1c251:	call   21550 <g_str_equal@plt+0x19198>
   1c256:	mov    rsi,QWORD PTR [rsp]
   1c25a:	test   rsi,rsi
   1c25d:	jne    1c04b <g_str_equal@plt+0x13c93>
   1c263:	jmp    1c1a5 <g_str_equal@plt+0x13ded>
   1c268:	call   8050 <__stack_chk_fail@plt>
   1c26d:	nop    DWORD PTR [rax]
   1c270:	push   r13
   1c272:	push   r12
   1c274:	mov    r13,rcx
   1c277:	push   rbp
   1c278:	push   rbx
   1c279:	mov    ecx,0x70
   1c27e:	mov    rbp,rdi
   1c281:	mov    rbx,rdx
   1c284:	sub    rsp,0x18
   1c288:	mov    r12,rsp
   1c28b:	mov    QWORD PTR [rsp],0x0
   1c293:	mov    r8,r12
   1c296:	mov    rax,QWORD PTR fs:0x28
   1c29f:	mov    QWORD PTR [rsp+0x8],rax
   1c2a4:	xor    eax,eax
   1c2a6:	call   200e0 <g_str_equal@plt+0x17d28>
   1c2ab:	mov    rsi,QWORD PTR [rsp]
   1c2af:	test   rsi,rsi
   1c2b2:	je     1c2e0 <g_str_equal@plt+0x13f28>
   1c2b4:	mov    rdi,r13
   1c2b7:	call   df30 <g_str_equal@plt+0x5b78>
   1c2bc:	mov    rax,QWORD PTR [rsp+0x8]
   1c2c1:	xor    rax,QWORD PTR fs:0x28
   1c2ca:	jne    1c33d <g_str_equal@plt+0x13f85>
   1c2cc:	add    rsp,0x18
   1c2d0:	pop    rbx
   1c2d1:	pop    rbp
   1c2d2:	pop    r12
   1c2d4:	pop    r13
   1c2d6:	ret    
   1c2d7:	nop    WORD PTR [rax+rax*1+0x0]
   1c2e0:	mov    rsi,QWORD PTR [rbx]
   1c2e3:	test   rsi,rsi
   1c2e6:	je     1c2fa <g_str_equal@plt+0x13f42>
   1c2e8:	mov    rdx,r12
   1c2eb:	mov    rdi,rbp
   1c2ee:	call   1bff0 <g_str_equal@plt+0x13c38>
   1c2f3:	cmp    QWORD PTR [rsp],0x0
   1c2f8:	je     1c330 <g_str_equal@plt+0x13f78>
   1c2fa:	mov    rsi,rbx
   1c2fd:	mov    rdi,rbp
   1c300:	call   20340 <g_str_equal@plt+0x17f88>
   1c305:	mov    rsi,QWORD PTR [rsp]
   1c309:	test   rsi,rsi
   1c30c:	je     1c2b4 <g_str_equal@plt+0x13efc>
   1c30e:	mov    rdi,rbp
   1c311:	call   20ab0 <g_str_equal@plt+0x186f8>
   1c316:	test   al,al
   1c318:	je     1c329 <g_str_equal@plt+0x13f71>
   1c31a:	mov    rdi,QWORD PTR [rbx]
   1c31d:	call   15730 <g_str_equal@plt+0xd378>
   1c322:	mov    QWORD PTR [rbx],0x0
   1c329:	mov    rsi,QWORD PTR [rsp]
   1c32d:	jmp    1c2b4 <g_str_equal@plt+0x13efc>
   1c32f:	nop
   1c330:	mov    rsi,r12
   1c333:	mov    rdi,rbp
   1c336:	call   20290 <g_str_equal@plt+0x17ed8>
   1c33b:	jmp    1c2fa <g_str_equal@plt+0x13f42>
   1c33d:	call   8050 <__stack_chk_fail@plt>
   1c342:	nop    DWORD PTR [rax+0x0]
   1c346:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1c350:	push   rbx
   1c351:	mov    r8,rcx
   1c354:	mov    rbx,rdx
   1c357:	lea    rcx,[rip+0x220ee2]        # 23d240 <_fini@@Base+0x213fbc>
   1c35e:	sub    rsp,0x10
   1c362:	mov    rax,QWORD PTR fs:0x28
   1c36b:	mov    QWORD PTR [rsp+0x8],rax
   1c370:	xor    eax,eax
   1c372:	mov    eax,DWORD PTR [rdx]
   1c374:	lea    rdx,[rsp+0x4]
   1c379:	mov    DWORD PTR [rsp+0x4],eax
   1c37d:	call   219e0 <g_str_equal@plt+0x19628>
   1c382:	mov    eax,DWORD PTR [rsp+0x4]
   1c386:	mov    DWORD PTR [rbx],eax
   1c388:	mov    rax,QWORD PTR [rsp+0x8]
   1c38d:	xor    rax,QWORD PTR fs:0x28
   1c396:	jne    1c39e <g_str_equal@plt+0x13fe6>
   1c398:	add    rsp,0x10
   1c39c:	pop    rbx
   1c39d:	ret    
   1c39e:	call   8050 <__stack_chk_fail@plt>
   1c3a3:	nop    DWORD PTR [rax]
   1c3a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1c3b0:	push   r13
   1c3b2:	push   r12
   1c3b4:	mov    r13,rdx
   1c3b7:	push   rbp
   1c3b8:	push   rbx
   1c3b9:	mov    rdx,rsi
   1c3bc:	mov    rbx,rsi
   1c3bf:	lea    rsi,[rip+0x11fef]        # 2e3b5 <_fini@@Base+0x5131>
   1c3c6:	mov    rbp,rdi
   1c3c9:	sub    rsp,0x28
   1c3cd:	lea    r12,[rsp+0x10]
   1c3d2:	mov    QWORD PTR [rsp+0x10],0x0
   1c3db:	mov    rax,QWORD PTR fs:0x28
   1c3e4:	mov    QWORD PTR [rsp+0x18],rax
   1c3e9:	xor    eax,eax
   1c3eb:	mov    rcx,r12
   1c3ee:	call   21550 <g_str_equal@plt+0x19198>
   1c3f3:	mov    rsi,QWORD PTR [rsp+0x10]
   1c3f8:	test   rsi,rsi
   1c3fb:	je     1c428 <g_str_equal@plt+0x14070>
   1c3fd:	mov    rdi,r13
   1c400:	call   df30 <g_str_equal@plt+0x5b78>
   1c405:	mov    rax,QWORD PTR [rsp+0x18]
   1c40a:	xor    rax,QWORD PTR fs:0x28
   1c413:	jne    1c4d0 <g_str_equal@plt+0x14118>
   1c419:	add    rsp,0x28
   1c41d:	pop    rbx
   1c41e:	pop    rbp
   1c41f:	pop    r12
   1c421:	pop    r13
   1c423:	ret    
   1c424:	nop    DWORD PTR [rax+0x0]
   1c428:	mov    eax,DWORD PTR [rbx+0x8]
   1c42b:	lea    rsi,[rip+0x10baa]        # 2cfdc <_fini@@Base+0x3d58>
   1c432:	lea    rdx,[rsp+0xc]
   1c437:	lea    rcx,[rip+0x220e02]        # 23d240 <_fini@@Base+0x213fbc>
   1c43e:	mov    r8,r12
   1c441:	mov    rdi,rbp
   1c444:	mov    DWORD PTR [rsp+0xc],eax
   1c448:	call   219e0 <g_str_equal@plt+0x19628>
   1c44d:	mov    rsi,QWORD PTR [rsp+0x10]
   1c452:	mov    eax,DWORD PTR [rsp+0xc]
   1c456:	test   rsi,rsi
   1c459:	mov    DWORD PTR [rbx+0x8],eax
   1c45c:	jne    1c3fd <g_str_equal@plt+0x14045>
   1c45e:	lea    rdx,[rbx+0xc]
   1c462:	lea    rsi,[rip+0xe641]        # 2aaaa <_fini@@Base+0x1826>
   1c469:	mov    rdi,rbp
   1c46c:	call   209e0 <g_str_equal@plt+0x18628>
   1c471:	test   al,al
   1c473:	je     1c499 <g_str_equal@plt+0x140e1>
   1c475:	lea    rsi,[rip+0xe62e]        # 2aaaa <_fini@@Base+0x1826>
   1c47c:	lea    rdx,[rbx+0x10]
   1c480:	mov    rcx,r12
   1c483:	mov    rdi,rbp
   1c486:	call   21550 <g_str_equal@plt+0x19198>
   1c48b:	mov    rsi,QWORD PTR [rsp+0x10]
   1c490:	test   rsi,rsi
   1c493:	jne    1c3fd <g_str_equal@plt+0x14045>
   1c499:	lea    rdx,[rbx+0x18]
   1c49d:	lea    rsi,[rip+0x10b4c]        # 2cff0 <_fini@@Base+0x3d6c>
   1c4a4:	mov    rdi,rbp
   1c4a7:	call   209e0 <g_str_equal@plt+0x18628>
   1c4ac:	test   al,al
   1c4ae:	je     1c4c6 <g_str_equal@plt+0x1410e>
   1c4b0:	lea    rdx,[rbx+0x20]
   1c4b4:	lea    rsi,[rip+0x10b35]        # 2cff0 <_fini@@Base+0x3d6c>
   1c4bb:	mov    rcx,r12
   1c4be:	mov    rdi,rbp
   1c4c1:	call   21550 <g_str_equal@plt+0x19198>
   1c4c6:	mov    rsi,QWORD PTR [rsp+0x10]
   1c4cb:	jmp    1c3fd <g_str_equal@plt+0x14045>
   1c4d0:	call   8050 <__stack_chk_fail@plt>
   1c4d5:	nop
   1c4d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1c4e0:	push   r13
   1c4e2:	push   r12
   1c4e4:	mov    r13,rcx
   1c4e7:	push   rbp
   1c4e8:	push   rbx
   1c4e9:	mov    ecx,0x28
   1c4ee:	mov    rbp,rdi
   1c4f1:	mov    rbx,rdx
   1c4f4:	sub    rsp,0x18
   1c4f8:	mov    r12,rsp
   1c4fb:	mov    QWORD PTR [rsp],0x0
   1c503:	mov    r8,r12
   1c506:	mov    rax,QWORD PTR fs:0x28
   1c50f:	mov    QWORD PTR [rsp+0x8],rax
   1c514:	xor    eax,eax
   1c516:	call   200e0 <g_str_equal@plt+0x17d28>
   1c51b:	mov    rsi,QWORD PTR [rsp]
   1c51f:	test   rsi,rsi
   1c522:	je     1c550 <g_str_equal@plt+0x14198>
   1c524:	mov    rdi,r13
   1c527:	call   df30 <g_str_equal@plt+0x5b78>
   1c52c:	mov    rax,QWORD PTR [rsp+0x8]
   1c531:	xor    rax,QWORD PTR fs:0x28
   1c53a:	jne    1c5ad <g_str_equal@plt+0x141f5>
   1c53c:	add    rsp,0x18
   1c540:	pop    rbx
   1c541:	pop    rbp
   1c542:	pop    r12
   1c544:	pop    r13
   1c546:	ret    
   1c547:	nop    WORD PTR [rax+rax*1+0x0]
   1c550:	mov    rsi,QWORD PTR [rbx]
   1c553:	test   rsi,rsi
   1c556:	je     1c56a <g_str_equal@plt+0x141b2>
   1c558:	mov    rdx,r12
   1c55b:	mov    rdi,rbp
   1c55e:	call   1c3b0 <g_str_equal@plt+0x13ff8>
   1c563:	cmp    QWORD PTR [rsp],0x0
   1c568:	je     1c5a0 <g_str_equal@plt+0x141e8>
   1c56a:	mov    rsi,rbx
   1c56d:	mov    rdi,rbp
   1c570:	call   20340 <g_str_equal@plt+0x17f88>
   1c575:	mov    rsi,QWORD PTR [rsp]
   1c579:	test   rsi,rsi
   1c57c:	je     1c524 <g_str_equal@plt+0x1416c>
   1c57e:	mov    rdi,rbp
   1c581:	call   20ab0 <g_str_equal@plt+0x186f8>
   1c586:	test   al,al
   1c588:	je     1c599 <g_str_equal@plt+0x141e1>
   1c58a:	mov    rdi,QWORD PTR [rbx]
   1c58d:	call   15770 <g_str_equal@plt+0xd3b8>
   1c592:	mov    QWORD PTR [rbx],0x0
   1c599:	mov    rsi,QWORD PTR [rsp]
   1c59d:	jmp    1c524 <g_str_equal@plt+0x1416c>
   1c59f:	nop
   1c5a0:	mov    rsi,r12
   1c5a3:	mov    rdi,rbp
   1c5a6:	call   20290 <g_str_equal@plt+0x17ed8>
   1c5ab:	jmp    1c56a <g_str_equal@plt+0x141b2>
   1c5ad:	call   8050 <__stack_chk_fail@plt>
   1c5b2:	nop    DWORD PTR [rax+0x0]
   1c5b6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1c5c0:	push   r14
   1c5c2:	push   r13
   1c5c4:	mov    r14,rcx
   1c5c7:	push   r12
   1c5c9:	push   rbp
   1c5ca:	mov    ecx,0x10
   1c5cf:	push   rbx
   1c5d0:	mov    rbp,rdi
   1c5d3:	mov    r13,rdx
   1c5d6:	sub    rsp,0x10
   1c5da:	mov    r12,rsp
   1c5dd:	mov    QWORD PTR [rsp],0x0
   1c5e5:	mov    r8,r12
   1c5e8:	mov    rax,QWORD PTR fs:0x28
   1c5f1:	mov    QWORD PTR [rsp+0x8],rax
   1c5f6:	xor    eax,eax
   1c5f8:	call   203e0 <g_str_equal@plt+0x18028>
   1c5fd:	mov    rsi,QWORD PTR [rsp]
   1c601:	test   rsi,rsi
   1c604:	je     1c630 <g_str_equal@plt+0x14278>
   1c606:	mov    rdi,r14
   1c609:	call   df30 <g_str_equal@plt+0x5b78>
   1c60e:	mov    rax,QWORD PTR [rsp+0x8]
   1c613:	xor    rax,QWORD PTR fs:0x28
   1c61c:	jne    1c6c4 <g_str_equal@plt+0x1430c>
   1c622:	add    rsp,0x10
   1c626:	pop    rbx
   1c627:	pop    rbp
   1c628:	pop    r12
   1c62a:	pop    r13
   1c62c:	pop    r14
   1c62e:	ret    
   1c62f:	nop
   1c630:	mov    rbx,QWORD PTR [r13+0x0]
   1c634:	test   rbx,rbx
   1c637:	jne    1c658 <g_str_equal@plt+0x142a0>
   1c639:	jmp    1c6b7 <g_str_equal@plt+0x142ff>
   1c63b:	nop    DWORD PTR [rax+rax*1+0x0]
   1c640:	mov    rsi,rbx
   1c643:	mov    edx,0x10
   1c648:	mov    rdi,rbp
   1c64b:	call   20530 <g_str_equal@plt+0x18178>
   1c650:	test   rax,rax
   1c653:	mov    rbx,rax
   1c656:	je     1c6b0 <g_str_equal@plt+0x142f8>
   1c658:	lea    rdx,[rbx+0x8]
   1c65c:	xor    esi,esi
   1c65e:	mov    rcx,r12
   1c661:	mov    rdi,rbp
   1c664:	call   1c4e0 <g_str_equal@plt+0x14128>
   1c669:	cmp    QWORD PTR [rsp],0x0
   1c66e:	je     1c640 <g_str_equal@plt+0x14288>
   1c670:	mov    rsi,r13
   1c673:	mov    rdi,rbp
   1c676:	call   206d0 <g_str_equal@plt+0x18318>
   1c67b:	mov    rsi,QWORD PTR [rsp]
   1c67f:	test   rsi,rsi
   1c682:	je     1c606 <g_str_equal@plt+0x1424e>
   1c684:	mov    rdi,rbp
   1c687:	call   20ab0 <g_str_equal@plt+0x186f8>
   1c68c:	test   al,al
   1c68e:	je     1c6a1 <g_str_equal@plt+0x142e9>
   1c690:	mov    rdi,QWORD PTR [r13+0x0]
   1c694:	call   157b0 <g_str_equal@plt+0xd3f8>
   1c699:	mov    QWORD PTR [r13+0x0],0x0
   1c6a1:	mov    rsi,QWORD PTR [rsp]
   1c6a5:	jmp    1c606 <g_str_equal@plt+0x1424e>
   1c6aa:	nop    WORD PTR [rax+rax*1+0x0]
   1c6b0:	cmp    QWORD PTR [rsp],0x0
   1c6b5:	jne    1c670 <g_str_equal@plt+0x142b8>
   1c6b7:	mov    rsi,r12
   1c6ba:	mov    rdi,rbp
   1c6bd:	call   20620 <g_str_equal@plt+0x18268>
   1c6c2:	jmp    1c670 <g_str_equal@plt+0x142b8>
   1c6c4:	call   8050 <__stack_chk_fail@plt>
   1c6c9:	nop    DWORD PTR [rax+0x0]
   1c6d0:	push   r13
   1c6d2:	push   r12
   1c6d4:	mov    r13,rdx
   1c6d7:	push   rbp
   1c6d8:	push   rbx
   1c6d9:	mov    rdx,rsi
   1c6dc:	mov    rbx,rsi
   1c6df:	lea    rsi,[rip+0x109f5]        # 2d0db <_fini@@Base+0x3e57>
   1c6e6:	mov    rbp,rdi
   1c6e9:	sub    rsp,0x18
   1c6ed:	mov    r12,rsp
   1c6f0:	mov    QWORD PTR [rsp],0x0
   1c6f8:	mov    rcx,r12
   1c6fb:	mov    rax,QWORD PTR fs:0x28
   1c704:	mov    QWORD PTR [rsp+0x8],rax
   1c709:	xor    eax,eax
   1c70b:	call   21550 <g_str_equal@plt+0x19198>
   1c710:	mov    rsi,QWORD PTR [rsp]
   1c714:	test   rsi,rsi
   1c717:	je     1c740 <g_str_equal@plt+0x14388>
   1c719:	mov    rdi,r13
   1c71c:	call   df30 <g_str_equal@plt+0x5b78>
   1c721:	mov    rax,QWORD PTR [rsp+0x8]
   1c726:	xor    rax,QWORD PTR fs:0x28
   1c72f:	jne    1c75c <g_str_equal@plt+0x143a4>
   1c731:	add    rsp,0x18
   1c735:	pop    rbx
   1c736:	pop    rbp
   1c737:	pop    r12
   1c739:	pop    r13
   1c73b:	ret    
   1c73c:	nop    DWORD PTR [rax+0x0]
   1c740:	lea    rsi,[rip+0x1099b]        # 2d0e2 <_fini@@Base+0x3e5e>
   1c747:	lea    rdx,[rbx+0x8]
   1c74b:	mov    rcx,r12
   1c74e:	mov    rdi,rbp
   1c751:	call   1c5c0 <g_str_equal@plt+0x14208>
   1c756:	mov    rsi,QWORD PTR [rsp]
   1c75a:	jmp    1c719 <g_str_equal@plt+0x14361>
   1c75c:	call   8050 <__stack_chk_fail@plt>
   1c761:	nop    DWORD PTR [rax+rax*1+0x0]
   1c766:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1c770:	push   r13
   1c772:	push   r12
   1c774:	mov    r13,rcx
   1c777:	push   rbp
   1c778:	push   rbx
   1c779:	mov    ecx,0x10
   1c77e:	mov    rbp,rdi
   1c781:	mov    rbx,rdx
   1c784:	sub    rsp,0x18
   1c788:	mov    r12,rsp
   1c78b:	mov    QWORD PTR [rsp],0x0
   1c793:	mov    r8,r12
   1c796:	mov    rax,QWORD PTR fs:0x28
   1c79f:	mov    QWORD PTR [rsp+0x8],rax
   1c7a4:	xor    eax,eax
   1c7a6:	call   200e0 <g_str_equal@plt+0x17d28>
   1c7ab:	mov    rsi,QWORD PTR [rsp]
   1c7af:	test   rsi,rsi
   1c7b2:	je     1c7e0 <g_str_equal@plt+0x14428>
   1c7b4:	mov    rdi,r13
   1c7b7:	call   df30 <g_str_equal@plt+0x5b78>
   1c7bc:	mov    rax,QWORD PTR [rsp+0x8]
   1c7c1:	xor    rax,QWORD PTR fs:0x28
   1c7ca:	jne    1c83d <g_str_equal@plt+0x14485>
   1c7cc:	add    rsp,0x18
   1c7d0:	pop    rbx
   1c7d1:	pop    rbp
   1c7d2:	pop    r12
   1c7d4:	pop    r13
   1c7d6:	ret    
   1c7d7:	nop    WORD PTR [rax+rax*1+0x0]
   1c7e0:	mov    rsi,QWORD PTR [rbx]
   1c7e3:	test   rsi,rsi
   1c7e6:	je     1c7fa <g_str_equal@plt+0x14442>
   1c7e8:	mov    rdx,r12
   1c7eb:	mov    rdi,rbp
   1c7ee:	call   1c6d0 <g_str_equal@plt+0x14318>
   1c7f3:	cmp    QWORD PTR [rsp],0x0
   1c7f8:	je     1c830 <g_str_equal@plt+0x14478>
   1c7fa:	mov    rsi,rbx
   1c7fd:	mov    rdi,rbp
   1c800:	call   20340 <g_str_equal@plt+0x17f88>
   1c805:	mov    rsi,QWORD PTR [rsp]
   1c809:	test   rsi,rsi
   1c80c:	je     1c7b4 <g_str_equal@plt+0x143fc>
   1c80e:	mov    rdi,rbp
   1c811:	call   20ab0 <g_str_equal@plt+0x186f8>
   1c816:	test   al,al
   1c818:	je     1c829 <g_str_equal@plt+0x14471>
   1c81a:	mov    rdi,QWORD PTR [rbx]
   1c81d:	call   157f0 <g_str_equal@plt+0xd438>
   1c822:	mov    QWORD PTR [rbx],0x0
   1c829:	mov    rsi,QWORD PTR [rsp]
   1c82d:	jmp    1c7b4 <g_str_equal@plt+0x143fc>
   1c82f:	nop
   1c830:	mov    rsi,r12
   1c833:	mov    rdi,rbp
   1c836:	call   20290 <g_str_equal@plt+0x17ed8>
   1c83b:	jmp    1c7fa <g_str_equal@plt+0x14442>
   1c83d:	call   8050 <__stack_chk_fail@plt>
   1c842:	nop    DWORD PTR [rax+0x0]
   1c846:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1c850:	push   r12
   1c852:	push   rbp
   1c853:	mov    r12,rdx
   1c856:	push   rbx
   1c857:	mov    rdx,rsi
   1c85a:	mov    rbx,rsi
   1c85d:	lea    rsi,[rip+0x10877]        # 2d0db <_fini@@Base+0x3e57>
   1c864:	mov    rbp,rdi
   1c867:	sub    rsp,0x10
   1c86b:	mov    rax,QWORD PTR fs:0x28
   1c874:	mov    QWORD PTR [rsp+0x8],rax
   1c879:	xor    eax,eax
   1c87b:	mov    QWORD PTR [rsp],0x0
   1c883:	call   209e0 <g_str_equal@plt+0x18628>
   1c888:	test   al,al
   1c88a:	je     1c8a2 <g_str_equal@plt+0x144ea>
   1c88c:	lea    rdx,[rbx+0x8]
   1c890:	lea    rsi,[rip+0x10844]        # 2d0db <_fini@@Base+0x3e57>
   1c897:	mov    rcx,rsp
   1c89a:	mov    rdi,rbp
   1c89d:	call   21550 <g_str_equal@plt+0x19198>
   1c8a2:	mov    rsi,QWORD PTR [rsp]
   1c8a6:	mov    rdi,r12
   1c8a9:	call   df30 <g_str_equal@plt+0x5b78>
   1c8ae:	mov    rax,QWORD PTR [rsp+0x8]
   1c8b3:	xor    rax,QWORD PTR fs:0x28
   1c8bc:	jne    1c8c7 <g_str_equal@plt+0x1450f>
   1c8be:	add    rsp,0x10
   1c8c2:	pop    rbx
   1c8c3:	pop    rbp
   1c8c4:	pop    r12
   1c8c6:	ret    
   1c8c7:	call   8050 <__stack_chk_fail@plt>
   1c8cc:	nop    DWORD PTR [rax+0x0]
   1c8d0:	push   r14
   1c8d2:	push   r13
   1c8d4:	mov    r14,rcx
   1c8d7:	push   r12
   1c8d9:	push   rbp
   1c8da:	mov    ecx,0x10
   1c8df:	push   rbx
   1c8e0:	mov    rbp,rdi
   1c8e3:	mov    r13,rdx
   1c8e6:	sub    rsp,0x10
   1c8ea:	mov    r12,rsp
   1c8ed:	mov    QWORD PTR [rsp],0x0
   1c8f5:	mov    r8,r12
   1c8f8:	mov    rax,QWORD PTR fs:0x28
   1c901:	mov    QWORD PTR [rsp+0x8],rax
   1c906:	xor    eax,eax
   1c908:	call   203e0 <g_str_equal@plt+0x18028>
   1c90d:	mov    rsi,QWORD PTR [rsp]
   1c911:	test   rsi,rsi
   1c914:	je     1c940 <g_str_equal@plt+0x14588>
   1c916:	mov    rdi,r14
   1c919:	call   df30 <g_str_equal@plt+0x5b78>
   1c91e:	mov    rax,QWORD PTR [rsp+0x8]
   1c923:	xor    rax,QWORD PTR fs:0x28
   1c92c:	jne    1c9d4 <g_str_equal@plt+0x1461c>
   1c932:	add    rsp,0x10
   1c936:	pop    rbx
   1c937:	pop    rbp
   1c938:	pop    r12
   1c93a:	pop    r13
   1c93c:	pop    r14
   1c93e:	ret    
   1c93f:	nop
   1c940:	mov    rbx,QWORD PTR [r13+0x0]
   1c944:	test   rbx,rbx
   1c947:	jne    1c968 <g_str_equal@plt+0x145b0>
   1c949:	jmp    1c9c7 <g_str_equal@plt+0x1460f>
   1c94b:	nop    DWORD PTR [rax+rax*1+0x0]
   1c950:	mov    rsi,rbx
   1c953:	mov    edx,0x10
   1c958:	mov    rdi,rbp
   1c95b:	call   20530 <g_str_equal@plt+0x18178>
   1c960:	test   rax,rax
   1c963:	mov    rbx,rax
   1c966:	je     1c9c0 <g_str_equal@plt+0x14608>
   1c968:	lea    rdx,[rbx+0x8]
   1c96c:	xor    esi,esi
   1c96e:	mov    rcx,r12
   1c971:	mov    rdi,rbp
   1c974:	call   1c770 <g_str_equal@plt+0x143b8>
   1c979:	cmp    QWORD PTR [rsp],0x0
   1c97e:	je     1c950 <g_str_equal@plt+0x14598>
   1c980:	mov    rsi,r13
   1c983:	mov    rdi,rbp
   1c986:	call   206d0 <g_str_equal@plt+0x18318>
   1c98b:	mov    rsi,QWORD PTR [rsp]
   1c98f:	test   rsi,rsi
   1c992:	je     1c916 <g_str_equal@plt+0x1455e>
   1c994:	mov    rdi,rbp
   1c997:	call   20ab0 <g_str_equal@plt+0x186f8>
   1c99c:	test   al,al
   1c99e:	je     1c9b1 <g_str_equal@plt+0x145f9>
   1c9a0:	mov    rdi,QWORD PTR [r13+0x0]
   1c9a4:	call   15830 <g_str_equal@plt+0xd478>
   1c9a9:	mov    QWORD PTR [r13+0x0],0x0
   1c9b1:	mov    rsi,QWORD PTR [rsp]
   1c9b5:	jmp    1c916 <g_str_equal@plt+0x1455e>
   1c9ba:	nop    WORD PTR [rax+rax*1+0x0]
   1c9c0:	cmp    QWORD PTR [rsp],0x0
   1c9c5:	jne    1c980 <g_str_equal@plt+0x145c8>
   1c9c7:	mov    rsi,r12
   1c9ca:	mov    rdi,rbp
   1c9cd:	call   20620 <g_str_equal@plt+0x18268>
   1c9d2:	jmp    1c980 <g_str_equal@plt+0x145c8>
   1c9d4:	call   8050 <__stack_chk_fail@plt>
   1c9d9:	nop    DWORD PTR [rax+0x0]
   1c9e0:	push   rbx
   1c9e1:	mov    r8,rcx
   1c9e4:	mov    rbx,rdx
   1c9e7:	lea    rcx,[rip+0x220802]        # 23d1f0 <_fini@@Base+0x213f6c>
   1c9ee:	sub    rsp,0x10
   1c9f2:	mov    rax,QWORD PTR fs:0x28
   1c9fb:	mov    QWORD PTR [rsp+0x8],rax
   1ca00:	xor    eax,eax
   1ca02:	mov    eax,DWORD PTR [rdx]
   1ca04:	lea    rdx,[rsp+0x4]
   1ca09:	mov    DWORD PTR [rsp+0x4],eax
   1ca0d:	call   219e0 <g_str_equal@plt+0x19628>
   1ca12:	mov    eax,DWORD PTR [rsp+0x4]
   1ca16:	mov    DWORD PTR [rbx],eax
   1ca18:	mov    rax,QWORD PTR [rsp+0x8]
   1ca1d:	xor    rax,QWORD PTR fs:0x28
   1ca26:	jne    1ca2e <g_str_equal@plt+0x14676>
   1ca28:	add    rsp,0x10
   1ca2c:	pop    rbx
   1ca2d:	ret    
   1ca2e:	call   8050 <__stack_chk_fail@plt>
   1ca33:	nop    DWORD PTR [rax]
   1ca36:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1ca40:	push   r13
   1ca42:	push   r12
   1ca44:	mov    r13,rdx
   1ca47:	push   rbp
   1ca48:	push   rbx
   1ca49:	mov    rdx,rsi
   1ca4c:	mov    rbx,rsi
   1ca4f:	lea    rsi,[rip+0x10697]        # 2d0ed <_fini@@Base+0x3e69>
   1ca56:	mov    rbp,rdi
   1ca59:	sub    rsp,0x28
   1ca5d:	lea    r12,[rsp+0x10]
   1ca62:	mov    QWORD PTR [rsp+0x10],0x0
   1ca6b:	mov    rax,QWORD PTR fs:0x28
   1ca74:	mov    QWORD PTR [rsp+0x18],rax
   1ca79:	xor    eax,eax
   1ca7b:	mov    rcx,r12
   1ca7e:	call   20ac0 <g_str_equal@plt+0x18708>
   1ca83:	mov    rsi,QWORD PTR [rsp+0x10]
   1ca88:	test   rsi,rsi
   1ca8b:	je     1cab8 <g_str_equal@plt+0x14700>
   1ca8d:	mov    rdi,r13
   1ca90:	call   df30 <g_str_equal@plt+0x5b78>
   1ca95:	mov    rax,QWORD PTR [rsp+0x18]
   1ca9a:	xor    rax,QWORD PTR fs:0x28
   1caa3:	jne    1cb49 <g_str_equal@plt+0x14791>
   1caa9:	add    rsp,0x28
   1caad:	pop    rbx
   1caae:	pop    rbp
   1caaf:	pop    r12
   1cab1:	pop    r13
   1cab3:	ret    
   1cab4:	nop    DWORD PTR [rax+0x0]
   1cab8:	lea    rdx,[rbx+0x8]
   1cabc:	lea    rsi,[rip+0x1063a]        # 2d0fd <_fini@@Base+0x3e79>
   1cac3:	mov    rdi,rbp
   1cac6:	call   209e0 <g_str_equal@plt+0x18628>
   1cacb:	test   al,al
   1cacd:	je     1caef <g_str_equal@plt+0x14737>
   1cacf:	lea    rsi,[rip+0x10627]        # 2d0fd <_fini@@Base+0x3e79>
   1cad6:	lea    rdx,[rbx+0x10]
   1cada:	mov    rcx,r12
   1cadd:	mov    rdi,rbp
   1cae0:	call   20ac0 <g_str_equal@plt+0x18708>
   1cae5:	mov    rsi,QWORD PTR [rsp+0x10]
   1caea:	test   rsi,rsi
   1caed:	jne    1ca8d <g_str_equal@plt+0x146d5>
   1caef:	mov    eax,DWORD PTR [rbx+0x18]
   1caf2:	lea    rsi,[rip+0x10614]        # 2d10d <_fini@@Base+0x3e89>
   1caf9:	lea    rdx,[rsp+0xc]
   1cafe:	lea    rcx,[rip+0x2206eb]        # 23d1f0 <_fini@@Base+0x213f6c>
   1cb05:	mov    r8,r12
   1cb08:	mov    rdi,rbp
   1cb0b:	mov    DWORD PTR [rsp+0xc],eax
   1cb0f:	call   219e0 <g_str_equal@plt+0x19628>
   1cb14:	mov    rsi,QWORD PTR [rsp+0x10]
   1cb19:	mov    eax,DWORD PTR [rsp+0xc]
   1cb1d:	test   rsi,rsi
   1cb20:	mov    DWORD PTR [rbx+0x18],eax
   1cb23:	jne    1ca8d <g_str_equal@plt+0x146d5>
   1cb29:	lea    rsi,[rip+0x104fd]        # 2d02d <_fini@@Base+0x3da9>
   1cb30:	lea    rdx,[rbx+0x20]
   1cb34:	mov    rcx,r12
   1cb37:	mov    rdi,rbp
   1cb3a:	call   20ac0 <g_str_equal@plt+0x18708>
   1cb3f:	mov    rsi,QWORD PTR [rsp+0x10]
   1cb44:	jmp    1ca8d <g_str_equal@plt+0x146d5>
   1cb49:	call   8050 <__stack_chk_fail@plt>
   1cb4e:	xchg   ax,ax
   1cb50:	push   r13
   1cb52:	push   r12
   1cb54:	mov    r13,rcx
   1cb57:	push   rbp
   1cb58:	push   rbx
   1cb59:	mov    ecx,0x28
   1cb5e:	mov    rbp,rdi
   1cb61:	mov    rbx,rdx
   1cb64:	sub    rsp,0x18
   1cb68:	mov    r12,rsp
   1cb6b:	mov    QWORD PTR [rsp],0x0
   1cb73:	mov    r8,r12
   1cb76:	mov    rax,QWORD PTR fs:0x28
   1cb7f:	mov    QWORD PTR [rsp+0x8],rax
   1cb84:	xor    eax,eax
   1cb86:	call   200e0 <g_str_equal@plt+0x17d28>
   1cb8b:	mov    rsi,QWORD PTR [rsp]
   1cb8f:	test   rsi,rsi
   1cb92:	je     1cbc0 <g_str_equal@plt+0x14808>
   1cb94:	mov    rdi,r13
   1cb97:	call   df30 <g_str_equal@plt+0x5b78>
   1cb9c:	mov    rax,QWORD PTR [rsp+0x8]
   1cba1:	xor    rax,QWORD PTR fs:0x28
   1cbaa:	jne    1cc1d <g_str_equal@plt+0x14865>
   1cbac:	add    rsp,0x18
   1cbb0:	pop    rbx
   1cbb1:	pop    rbp
   1cbb2:	pop    r12
   1cbb4:	pop    r13
   1cbb6:	ret    
   1cbb7:	nop    WORD PTR [rax+rax*1+0x0]
   1cbc0:	mov    rsi,QWORD PTR [rbx]
   1cbc3:	test   rsi,rsi
   1cbc6:	je     1cbda <g_str_equal@plt+0x14822>
   1cbc8:	mov    rdx,r12
   1cbcb:	mov    rdi,rbp
   1cbce:	call   1ca40 <g_str_equal@plt+0x14688>
   1cbd3:	cmp    QWORD PTR [rsp],0x0
   1cbd8:	je     1cc10 <g_str_equal@plt+0x14858>
   1cbda:	mov    rsi,rbx
   1cbdd:	mov    rdi,rbp
   1cbe0:	call   20340 <g_str_equal@plt+0x17f88>
   1cbe5:	mov    rsi,QWORD PTR [rsp]
   1cbe9:	test   rsi,rsi
   1cbec:	je     1cb94 <g_str_equal@plt+0x147dc>
   1cbee:	mov    rdi,rbp
   1cbf1:	call   20ab0 <g_str_equal@plt+0x186f8>
   1cbf6:	test   al,al
   1cbf8:	je     1cc09 <g_str_equal@plt+0x14851>
   1cbfa:	mov    rdi,QWORD PTR [rbx]
   1cbfd:	call   15870 <g_str_equal@plt+0xd4b8>
   1cc02:	mov    QWORD PTR [rbx],0x0
   1cc09:	mov    rsi,QWORD PTR [rsp]
   1cc0d:	jmp    1cb94 <g_str_equal@plt+0x147dc>
   1cc0f:	nop
   1cc10:	mov    rsi,r12
   1cc13:	mov    rdi,rbp
   1cc16:	call   20290 <g_str_equal@plt+0x17ed8>
   1cc1b:	jmp    1cbda <g_str_equal@plt+0x14822>
   1cc1d:	call   8050 <__stack_chk_fail@plt>
   1cc22:	nop    DWORD PTR [rax+0x0]
   1cc26:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1cc30:	push   r14
   1cc32:	push   r13
   1cc34:	mov    r14,rcx
   1cc37:	push   r12
   1cc39:	push   rbp
   1cc3a:	mov    ecx,0x10
   1cc3f:	push   rbx
   1cc40:	mov    rbp,rdi
   1cc43:	mov    r13,rdx
   1cc46:	sub    rsp,0x10
   1cc4a:	mov    r12,rsp
   1cc4d:	mov    QWORD PTR [rsp],0x0
   1cc55:	mov    r8,r12
   1cc58:	mov    rax,QWORD PTR fs:0x28
   1cc61:	mov    QWORD PTR [rsp+0x8],rax
   1cc66:	xor    eax,eax
   1cc68:	call   203e0 <g_str_equal@plt+0x18028>
   1cc6d:	mov    rsi,QWORD PTR [rsp]
   1cc71:	test   rsi,rsi
   1cc74:	je     1cca0 <g_str_equal@plt+0x148e8>
   1cc76:	mov    rdi,r14
   1cc79:	call   df30 <g_str_equal@plt+0x5b78>
   1cc7e:	mov    rax,QWORD PTR [rsp+0x8]
   1cc83:	xor    rax,QWORD PTR fs:0x28
   1cc8c:	jne    1cd34 <g_str_equal@plt+0x1497c>
   1cc92:	add    rsp,0x10
   1cc96:	pop    rbx
   1cc97:	pop    rbp
   1cc98:	pop    r12
   1cc9a:	pop    r13
   1cc9c:	pop    r14
   1cc9e:	ret    
   1cc9f:	nop
   1cca0:	mov    rbx,QWORD PTR [r13+0x0]
   1cca4:	test   rbx,rbx
   1cca7:	jne    1ccc8 <g_str_equal@plt+0x14910>
   1cca9:	jmp    1cd27 <g_str_equal@plt+0x1496f>
   1ccab:	nop    DWORD PTR [rax+rax*1+0x0]
   1ccb0:	mov    rsi,rbx
   1ccb3:	mov    edx,0x10
   1ccb8:	mov    rdi,rbp
   1ccbb:	call   20530 <g_str_equal@plt+0x18178>
   1ccc0:	test   rax,rax
   1ccc3:	mov    rbx,rax
   1ccc6:	je     1cd20 <g_str_equal@plt+0x14968>
   1ccc8:	lea    rdx,[rbx+0x8]
   1cccc:	xor    esi,esi
   1ccce:	mov    rcx,r12
   1ccd1:	mov    rdi,rbp
   1ccd4:	call   1cb50 <g_str_equal@plt+0x14798>
   1ccd9:	cmp    QWORD PTR [rsp],0x0
   1ccde:	je     1ccb0 <g_str_equal@plt+0x148f8>
   1cce0:	mov    rsi,r13
   1cce3:	mov    rdi,rbp
   1cce6:	call   206d0 <g_str_equal@plt+0x18318>
   1cceb:	mov    rsi,QWORD PTR [rsp]
   1ccef:	test   rsi,rsi
   1ccf2:	je     1cc76 <g_str_equal@plt+0x148be>
   1ccf4:	mov    rdi,rbp
   1ccf7:	call   20ab0 <g_str_equal@plt+0x186f8>
   1ccfc:	test   al,al
   1ccfe:	je     1cd11 <g_str_equal@plt+0x14959>
   1cd00:	mov    rdi,QWORD PTR [r13+0x0]
   1cd04:	call   158b0 <g_str_equal@plt+0xd4f8>
   1cd09:	mov    QWORD PTR [r13+0x0],0x0
   1cd11:	mov    rsi,QWORD PTR [rsp]
   1cd15:	jmp    1cc76 <g_str_equal@plt+0x148be>
   1cd1a:	nop    WORD PTR [rax+rax*1+0x0]
   1cd20:	cmp    QWORD PTR [rsp],0x0
   1cd25:	jne    1cce0 <g_str_equal@plt+0x14928>
   1cd27:	mov    rsi,r12
   1cd2a:	mov    rdi,rbp
   1cd2d:	call   20620 <g_str_equal@plt+0x18268>
   1cd32:	jmp    1cce0 <g_str_equal@plt+0x14928>
   1cd34:	call   8050 <__stack_chk_fail@plt>
   1cd39:	nop    DWORD PTR [rax+0x0]
   1cd40:	push   rbx
   1cd41:	mov    rbx,rdx
   1cd44:	mov    rdx,rsi
   1cd47:	lea    rsi,[rip+0x103ce]        # 2d11c <_fini@@Base+0x3e98>
   1cd4e:	sub    rsp,0x10
   1cd52:	mov    rcx,rsp
   1cd55:	mov    QWORD PTR [rsp],0x0
   1cd5d:	mov    rax,QWORD PTR fs:0x28
   1cd66:	mov    QWORD PTR [rsp+0x8],rax
   1cd6b:	xor    eax,eax
   1cd6d:	call   1cc30 <g_str_equal@plt+0x14878>
   1cd72:	mov    rsi,QWORD PTR [rsp]
   1cd76:	mov    rdi,rbx
   1cd79:	call   df30 <g_str_equal@plt+0x5b78>
   1cd7e:	mov    rax,QWORD PTR [rsp+0x8]
   1cd83:	xor    rax,QWORD PTR fs:0x28
   1cd8c:	jne    1cd94 <g_str_equal@plt+0x149dc>
   1cd8e:	add    rsp,0x10
   1cd92:	pop    rbx
   1cd93:	ret    
   1cd94:	call   8050 <__stack_chk_fail@plt>
   1cd99:	nop    DWORD PTR [rax+0x0]
   1cda0:	push   r13
   1cda2:	push   r12
   1cda4:	mov    r13,rcx
   1cda7:	push   rbp
   1cda8:	push   rbx
   1cda9:	mov    ecx,0x8
   1cdae:	mov    rbp,rdi
   1cdb1:	mov    rbx,rdx
   1cdb4:	sub    rsp,0x18
   1cdb8:	mov    r12,rsp
   1cdbb:	mov    QWORD PTR [rsp],0x0
   1cdc3:	mov    r8,r12
   1cdc6:	mov    rax,QWORD PTR fs:0x28
   1cdcf:	mov    QWORD PTR [rsp+0x8],rax
   1cdd4:	xor    eax,eax
   1cdd6:	call   200e0 <g_str_equal@plt+0x17d28>
   1cddb:	mov    rsi,QWORD PTR [rsp]
   1cddf:	test   rsi,rsi
   1cde2:	je     1ce10 <g_str_equal@plt+0x14a58>
   1cde4:	mov    rdi,r13
   1cde7:	call   df30 <g_str_equal@plt+0x5b78>
   1cdec:	mov    rax,QWORD PTR [rsp+0x8]
   1cdf1:	xor    rax,QWORD PTR fs:0x28
   1cdfa:	jne    1ce6d <g_str_equal@plt+0x14ab5>
   1cdfc:	add    rsp,0x18
   1ce00:	pop    rbx
   1ce01:	pop    rbp
   1ce02:	pop    r12
   1ce04:	pop    r13
   1ce06:	ret    
   1ce07:	nop    WORD PTR [rax+rax*1+0x0]
   1ce10:	mov    rsi,QWORD PTR [rbx]
   1ce13:	test   rsi,rsi
   1ce16:	je     1ce2a <g_str_equal@plt+0x14a72>
   1ce18:	mov    rdx,r12
   1ce1b:	mov    rdi,rbp
   1ce1e:	call   1cd40 <g_str_equal@plt+0x14988>
   1ce23:	cmp    QWORD PTR [rsp],0x0
   1ce28:	je     1ce60 <g_str_equal@plt+0x14aa8>
   1ce2a:	mov    rsi,rbx
   1ce2d:	mov    rdi,rbp
   1ce30:	call   20340 <g_str_equal@plt+0x17f88>
   1ce35:	mov    rsi,QWORD PTR [rsp]
   1ce39:	test   rsi,rsi
   1ce3c:	je     1cde4 <g_str_equal@plt+0x14a2c>
   1ce3e:	mov    rdi,rbp
   1ce41:	call   20ab0 <g_str_equal@plt+0x186f8>
   1ce46:	test   al,al
   1ce48:	je     1ce59 <g_str_equal@plt+0x14aa1>
   1ce4a:	mov    rdi,QWORD PTR [rbx]
   1ce4d:	call   158f0 <g_str_equal@plt+0xd538>
   1ce52:	mov    QWORD PTR [rbx],0x0
   1ce59:	mov    rsi,QWORD PTR [rsp]
   1ce5d:	jmp    1cde4 <g_str_equal@plt+0x14a2c>
   1ce5f:	nop
   1ce60:	mov    rsi,r12
   1ce63:	mov    rdi,rbp
   1ce66:	call   20290 <g_str_equal@plt+0x17ed8>
   1ce6b:	jmp    1ce2a <g_str_equal@plt+0x14a72>
   1ce6d:	call   8050 <__stack_chk_fail@plt>
   1ce72:	nop    DWORD PTR [rax+0x0]
   1ce76:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1ce80:	push   rbx
   1ce81:	mov    r8,rcx
   1ce84:	mov    rbx,rdx
   1ce87:	lea    rcx,[rip+0x220332]        # 23d1c0 <_fini@@Base+0x213f3c>
   1ce8e:	sub    rsp,0x10
   1ce92:	mov    rax,QWORD PTR fs:0x28
   1ce9b:	mov    QWORD PTR [rsp+0x8],rax
   1cea0:	xor    eax,eax
   1cea2:	mov    eax,DWORD PTR [rdx]
   1cea4:	lea    rdx,[rsp+0x4]
   1cea9:	mov    DWORD PTR [rsp+0x4],eax
   1cead:	call   219e0 <g_str_equal@plt+0x19628>
   1ceb2:	mov    eax,DWORD PTR [rsp+0x4]
   1ceb6:	mov    DWORD PTR [rbx],eax
   1ceb8:	mov    rax,QWORD PTR [rsp+0x8]
   1cebd:	xor    rax,QWORD PTR fs:0x28
   1cec6:	jne    1cece <g_str_equal@plt+0x14b16>
   1cec8:	add    rsp,0x10
   1cecc:	pop    rbx
   1cecd:	ret    
   1cece:	call   8050 <__stack_chk_fail@plt>
   1ced3:	nop    DWORD PTR [rax]
   1ced6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1cee0:	push   rbp
   1cee1:	push   rbx
   1cee2:	mov    rbp,rdx
   1cee5:	mov    rbx,rsi
   1cee8:	lea    rcx,[rip+0x2202d1]        # 23d1c0 <_fini@@Base+0x213f3c>
   1ceef:	sub    rsp,0x28
   1cef3:	mov    rax,QWORD PTR fs:0x28
   1cefc:	mov    QWORD PTR [rsp+0x18],rax
   1cf01:	xor    eax,eax
   1cf03:	mov    eax,DWORD PTR [rsi]
   1cf05:	lea    rdx,[rsp+0xc]
   1cf0a:	lea    r8,[rsp+0x10]
   1cf0f:	lea    rsi,[rip+0x100c6]        # 2cfdc <_fini@@Base+0x3d58>
   1cf16:	mov    QWORD PTR [rsp+0x10],0x0
   1cf1f:	mov    DWORD PTR [rsp+0xc],eax
   1cf23:	call   219e0 <g_str_equal@plt+0x19628>
   1cf28:	mov    eax,DWORD PTR [rsp+0xc]
   1cf2c:	mov    rsi,QWORD PTR [rsp+0x10]
   1cf31:	mov    rdi,rbp
   1cf34:	mov    DWORD PTR [rbx],eax
   1cf36:	call   df30 <g_str_equal@plt+0x5b78>
   1cf3b:	mov    rax,QWORD PTR [rsp+0x18]
   1cf40:	xor    rax,QWORD PTR fs:0x28
   1cf49:	jne    1cf52 <g_str_equal@plt+0x14b9a>
   1cf4b:	add    rsp,0x28
   1cf4f:	pop    rbx
   1cf50:	pop    rbp
   1cf51:	ret    
   1cf52:	call   8050 <__stack_chk_fail@plt>
   1cf57:	nop    WORD PTR [rax+rax*1+0x0]
   1cf60:	push   r12
   1cf62:	push   rbp
   1cf63:	mov    r12,rdx
   1cf66:	push   rbx
   1cf67:	mov    rdx,rsi
   1cf6a:	mov    rbx,rsi
   1cf6d:	lea    rsi,[rip+0x101af]        # 2d123 <_fini@@Base+0x3e9f>
   1cf74:	mov    rbp,rdi
   1cf77:	sub    rsp,0x10
   1cf7b:	mov    rax,QWORD PTR fs:0x28
   1cf84:	mov    QWORD PTR [rsp+0x8],rax
   1cf89:	xor    eax,eax
   1cf8b:	mov    QWORD PTR [rsp],0x0
   1cf93:	call   209e0 <g_str_equal@plt+0x18628>
   1cf98:	test   al,al
   1cf9a:	je     1cfe0 <g_str_equal@plt+0x14c28>
   1cf9c:	lea    rsi,[rip+0x10180]        # 2d123 <_fini@@Base+0x3e9f>
   1cfa3:	lea    rdx,[rbx+0x2]
   1cfa7:	mov    rcx,rsp
   1cfaa:	mov    rdi,rbp
   1cfad:	call   20ca0 <g_str_equal@plt+0x188e8>
   1cfb2:	mov    rsi,QWORD PTR [rsp]
   1cfb6:	test   rsi,rsi
   1cfb9:	je     1cfe0 <g_str_equal@plt+0x14c28>
   1cfbb:	mov    rdi,r12
   1cfbe:	call   df30 <g_str_equal@plt+0x5b78>
   1cfc3:	mov    rax,QWORD PTR [rsp+0x8]
   1cfc8:	xor    rax,QWORD PTR fs:0x28
   1cfd1:	jne    1d097 <g_str_equal@plt+0x14cdf>
   1cfd7:	add    rsp,0x10
   1cfdb:	pop    rbx
   1cfdc:	pop    rbp
   1cfdd:	pop    r12
   1cfdf:	ret    
   1cfe0:	lea    rdx,[rbx+0x4]
   1cfe4:	lea    rsi,[rip+0x10022]        # 2d00d <_fini@@Base+0x3d89>
   1cfeb:	mov    rdi,rbp
   1cfee:	call   209e0 <g_str_equal@plt+0x18628>
   1cff3:	test   al,al
   1cff5:	jne    1d050 <g_str_equal@plt+0x14c98>
   1cff7:	lea    rdx,[rbx+0x10]
   1cffb:	lea    rsi,[rip+0xf01e]        # 2c020 <_fini@@Base+0x2d9c>
   1d002:	mov    rdi,rbp
   1d005:	call   209e0 <g_str_equal@plt+0x18628>
   1d00a:	test   al,al
   1d00c:	je     1d02d <g_str_equal@plt+0x14c75>
   1d00e:	lea    rsi,[rip+0xf00b]        # 2c020 <_fini@@Base+0x2d9c>
   1d015:	lea    rdx,[rbx+0x18]
   1d019:	mov    rcx,rsp
   1d01c:	mov    rdi,rbp
   1d01f:	call   21360 <g_str_equal@plt+0x18fa8>
   1d024:	mov    rsi,QWORD PTR [rsp]
   1d028:	test   rsi,rsi
   1d02b:	jne    1cfbb <g_str_equal@plt+0x14c03>
   1d02d:	lea    rdx,[rbx+0x20]
   1d031:	lea    rsi,[rip+0x100f2]        # 2d12a <_fini@@Base+0x3ea6>
   1d038:	mov    rdi,rbp
   1d03b:	call   209e0 <g_str_equal@plt+0x18628>
   1d040:	test   al,al
   1d042:	jne    1d078 <g_str_equal@plt+0x14cc0>
   1d044:	mov    rsi,QWORD PTR [rsp]
   1d048:	jmp    1cfbb <g_str_equal@plt+0x14c03>
   1d04d:	nop    DWORD PTR [rax]
   1d050:	lea    rsi,[rip+0xffb6]        # 2d00d <_fini@@Base+0x3d89>
   1d057:	lea    rdx,[rbx+0x8]
   1d05b:	mov    rcx,rsp
   1d05e:	mov    rdi,rbp
   1d061:	call   23fe0 <g_str_equal@plt+0x1bc28>
   1d066:	mov    rsi,QWORD PTR [rsp]
   1d06a:	test   rsi,rsi
   1d06d:	jne    1cfbb <g_str_equal@plt+0x14c03>
   1d073:	jmp    1cff7 <g_str_equal@plt+0x14c3f>
   1d075:	nop    DWORD PTR [rax]
   1d078:	lea    rsi,[rip+0x100ab]        # 2d12a <_fini@@Base+0x3ea6>
   1d07f:	lea    rdx,[rbx+0x28]
   1d083:	mov    rcx,rsp
   1d086:	mov    rdi,rbp
   1d089:	call   21550 <g_str_equal@plt+0x19198>
   1d08e:	mov    rsi,QWORD PTR [rsp]
   1d092:	jmp    1cfbb <g_str_equal@plt+0x14c03>
   1d097:	call   8050 <__stack_chk_fail@plt>
   1d09c:	nop    DWORD PTR [rax+0x0]
   1d0a0:	push   r13
   1d0a2:	push   r12
   1d0a4:	mov    r13,rcx
   1d0a7:	push   rbp
   1d0a8:	push   rbx
   1d0a9:	mov    ecx,0x30
   1d0ae:	mov    rbp,rdi
   1d0b1:	mov    rbx,rdx
   1d0b4:	sub    rsp,0x18
   1d0b8:	mov    r12,rsp
   1d0bb:	mov    QWORD PTR [rsp],0x0
   1d0c3:	mov    r8,r12
   1d0c6:	mov    rax,QWORD PTR fs:0x28
   1d0cf:	mov    QWORD PTR [rsp+0x8],rax
   1d0d4:	xor    eax,eax
   1d0d6:	call   200e0 <g_str_equal@plt+0x17d28>
   1d0db:	mov    rsi,QWORD PTR [rsp]
   1d0df:	test   rsi,rsi
   1d0e2:	je     1d110 <g_str_equal@plt+0x14d58>
   1d0e4:	mov    rdi,r13
   1d0e7:	call   df30 <g_str_equal@plt+0x5b78>
   1d0ec:	mov    rax,QWORD PTR [rsp+0x8]
   1d0f1:	xor    rax,QWORD PTR fs:0x28
   1d0fa:	jne    1d16d <g_str_equal@plt+0x14db5>
   1d0fc:	add    rsp,0x18
   1d100:	pop    rbx
   1d101:	pop    rbp
   1d102:	pop    r12
   1d104:	pop    r13
   1d106:	ret    
   1d107:	nop    WORD PTR [rax+rax*1+0x0]
   1d110:	mov    rsi,QWORD PTR [rbx]
   1d113:	test   rsi,rsi
   1d116:	je     1d12a <g_str_equal@plt+0x14d72>
   1d118:	mov    rdx,r12
   1d11b:	mov    rdi,rbp
   1d11e:	call   1cf60 <g_str_equal@plt+0x14ba8>
   1d123:	cmp    QWORD PTR [rsp],0x0
   1d128:	je     1d160 <g_str_equal@plt+0x14da8>
   1d12a:	mov    rsi,rbx
   1d12d:	mov    rdi,rbp
   1d130:	call   20340 <g_str_equal@plt+0x17f88>
   1d135:	mov    rsi,QWORD PTR [rsp]
   1d139:	test   rsi,rsi
   1d13c:	je     1d0e4 <g_str_equal@plt+0x14d2c>
   1d13e:	mov    rdi,rbp
   1d141:	call   20ab0 <g_str_equal@plt+0x186f8>
   1d146:	test   al,al
   1d148:	je     1d159 <g_str_equal@plt+0x14da1>
   1d14a:	mov    rdi,QWORD PTR [rbx]
   1d14d:	call   15970 <g_str_equal@plt+0xd5b8>
   1d152:	mov    QWORD PTR [rbx],0x0
   1d159:	mov    rsi,QWORD PTR [rsp]
   1d15d:	jmp    1d0e4 <g_str_equal@plt+0x14d2c>
   1d15f:	nop
   1d160:	mov    rsi,r12
   1d163:	mov    rdi,rbp
   1d166:	call   20290 <g_str_equal@plt+0x17ed8>
   1d16b:	jmp    1d12a <g_str_equal@plt+0x14d72>
   1d16d:	call   8050 <__stack_chk_fail@plt>
   1d172:	nop    DWORD PTR [rax+0x0]
   1d176:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1d180:	push   r13
   1d182:	push   r12
   1d184:	mov    r13,rdx
   1d187:	push   rbp
   1d188:	push   rbx
   1d189:	mov    rdx,rsi
   1d18c:	mov    rbx,rsi
   1d18f:	lea    rsi,[rip+0xff9b]        # 2d131 <_fini@@Base+0x3ead>
   1d196:	mov    rbp,rdi
   1d199:	sub    rsp,0x18
   1d19d:	mov    r12,rsp
   1d1a0:	mov    QWORD PTR [rsp],0x0
   1d1a8:	mov    rcx,r12
   1d1ab:	mov    rax,QWORD PTR fs:0x28
   1d1b4:	mov    QWORD PTR [rsp+0x8],rax
   1d1b9:	xor    eax,eax
   1d1bb:	call   20ca0 <g_str_equal@plt+0x188e8>
   1d1c0:	mov    rsi,QWORD PTR [rsp]
   1d1c4:	test   rsi,rsi
   1d1c7:	je     1d1f0 <g_str_equal@plt+0x14e38>
   1d1c9:	mov    rdi,r13
   1d1cc:	call   df30 <g_str_equal@plt+0x5b78>
   1d1d1:	mov    rax,QWORD PTR [rsp+0x8]
   1d1d6:	xor    rax,QWORD PTR fs:0x28
   1d1df:	jne    1d22b <g_str_equal@plt+0x14e73>
   1d1e1:	add    rsp,0x18
   1d1e5:	pop    rbx
   1d1e6:	pop    rbp
   1d1e7:	pop    r12
   1d1e9:	pop    r13
   1d1eb:	ret    
   1d1ec:	nop    DWORD PTR [rax+0x0]
   1d1f0:	lea    rsi,[rip+0xff3e]        # 2d135 <_fini@@Base+0x3eb1>
   1d1f7:	lea    rdx,[rbx+0x2]
   1d1fb:	mov    rcx,r12
   1d1fe:	mov    rdi,rbp
   1d201:	call   20ca0 <g_str_equal@plt+0x188e8>
   1d206:	mov    rsi,QWORD PTR [rsp]
   1d20a:	test   rsi,rsi
   1d20d:	jne    1d1c9 <g_str_equal@plt+0x14e11>
   1d20f:	lea    rsi,[rip+0xfd1b]        # 2cf31 <_fini@@Base+0x3cad>
   1d216:	lea    rdx,[rbx+0x4]
   1d21a:	mov    rcx,r12
   1d21d:	mov    rdi,rbp
   1d220:	call   20bb0 <g_str_equal@plt+0x187f8>
   1d225:	mov    rsi,QWORD PTR [rsp]
   1d229:	jmp    1d1c9 <g_str_equal@plt+0x14e11>
   1d22b:	call   8050 <__stack_chk_fail@plt>
   1d230:	push   r13
   1d232:	push   r12
   1d234:	mov    r13,rcx
   1d237:	push   rbp
   1d238:	push   rbx
   1d239:	mov    ecx,0x6
   1d23e:	mov    rbp,rdi
   1d241:	mov    rbx,rdx
   1d244:	sub    rsp,0x18
   1d248:	mov    r12,rsp
   1d24b:	mov    QWORD PTR [rsp],0x0
   1d253:	mov    r8,r12
   1d256:	mov    rax,QWORD PTR fs:0x28
   1d25f:	mov    QWORD PTR [rsp+0x8],rax
   1d264:	xor    eax,eax
   1d266:	call   200e0 <g_str_equal@plt+0x17d28>
   1d26b:	mov    rsi,QWORD PTR [rsp]
   1d26f:	test   rsi,rsi
   1d272:	je     1d2a0 <g_str_equal@plt+0x14ee8>
   1d274:	mov    rdi,r13
   1d277:	call   df30 <g_str_equal@plt+0x5b78>
   1d27c:	mov    rax,QWORD PTR [rsp+0x8]
   1d281:	xor    rax,QWORD PTR fs:0x28
   1d28a:	jne    1d2fd <g_str_equal@plt+0x14f45>
   1d28c:	add    rsp,0x18
   1d290:	pop    rbx
   1d291:	pop    rbp
   1d292:	pop    r12
   1d294:	pop    r13
   1d296:	ret    
   1d297:	nop    WORD PTR [rax+rax*1+0x0]
   1d2a0:	mov    rsi,QWORD PTR [rbx]
   1d2a3:	test   rsi,rsi
   1d2a6:	je     1d2ba <g_str_equal@plt+0x14f02>
   1d2a8:	mov    rdx,r12
   1d2ab:	mov    rdi,rbp
   1d2ae:	call   1d180 <g_str_equal@plt+0x14dc8>
   1d2b3:	cmp    QWORD PTR [rsp],0x0
   1d2b8:	je     1d2f0 <g_str_equal@plt+0x14f38>
   1d2ba:	mov    rsi,rbx
   1d2bd:	mov    rdi,rbp
   1d2c0:	call   20340 <g_str_equal@plt+0x17f88>
   1d2c5:	mov    rsi,QWORD PTR [rsp]
   1d2c9:	test   rsi,rsi
   1d2cc:	je     1d274 <g_str_equal@plt+0x14ebc>
   1d2ce:	mov    rdi,rbp
   1d2d1:	call   20ab0 <g_str_equal@plt+0x186f8>
   1d2d6:	test   al,al
   1d2d8:	je     1d2e9 <g_str_equal@plt+0x14f31>
   1d2da:	mov    rdi,QWORD PTR [rbx]
   1d2dd:	call   159b0 <g_str_equal@plt+0xd5f8>
   1d2e2:	mov    QWORD PTR [rbx],0x0
   1d2e9:	mov    rsi,QWORD PTR [rsp]
   1d2ed:	jmp    1d274 <g_str_equal@plt+0x14ebc>
   1d2ef:	nop
   1d2f0:	mov    rsi,r12
   1d2f3:	mov    rdi,rbp
   1d2f6:	call   20290 <g_str_equal@plt+0x17ed8>
   1d2fb:	jmp    1d2ba <g_str_equal@plt+0x14f02>
   1d2fd:	call   8050 <__stack_chk_fail@plt>
   1d302:	nop    DWORD PTR [rax+0x0]
   1d306:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1d310:	push   rbx
   1d311:	mov    r8,rcx
   1d314:	mov    rbx,rdx
   1d317:	lea    rcx,[rip+0x21fe62]        # 23d180 <_fini@@Base+0x213efc>
   1d31e:	sub    rsp,0x10
   1d322:	mov    rax,QWORD PTR fs:0x28
   1d32b:	mov    QWORD PTR [rsp+0x8],rax
   1d330:	xor    eax,eax
   1d332:	mov    eax,DWORD PTR [rdx]
   1d334:	lea    rdx,[rsp+0x4]
   1d339:	mov    DWORD PTR [rsp+0x4],eax
   1d33d:	call   219e0 <g_str_equal@plt+0x19628>
   1d342:	mov    eax,DWORD PTR [rsp+0x4]
   1d346:	mov    DWORD PTR [rbx],eax
   1d348:	mov    rax,QWORD PTR [rsp+0x8]
   1d34d:	xor    rax,QWORD PTR fs:0x28
   1d356:	jne    1d35e <g_str_equal@plt+0x14fa6>
   1d358:	add    rsp,0x10
   1d35c:	pop    rbx
   1d35d:	ret    
   1d35e:	call   8050 <__stack_chk_fail@plt>
   1d363:	nop    DWORD PTR [rax]
   1d366:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1d370:	push   r13
   1d372:	push   r12
   1d374:	mov    r13,rdx
   1d377:	push   rbp
   1d378:	push   rbx
   1d379:	mov    rdx,rsi
   1d37c:	mov    rbx,rsi
   1d37f:	lea    rsi,[rip+0xc039]        # 293bf <_fini@@Base+0x13b>
   1d386:	mov    rbp,rdi
   1d389:	sub    rsp,0x28
   1d38d:	mov    rax,QWORD PTR fs:0x28
   1d396:	mov    QWORD PTR [rsp+0x18],rax
   1d39b:	xor    eax,eax
   1d39d:	mov    QWORD PTR [rsp+0x10],0x0
   1d3a6:	lea    r12,[rsp+0x10]
   1d3ab:	call   209e0 <g_str_equal@plt+0x18628>
   1d3b0:	test   al,al
   1d3b2:	je     1d400 <g_str_equal@plt+0x15048>
   1d3b4:	lea    rsi,[rip+0xc004]        # 293bf <_fini@@Base+0x13b>
   1d3bb:	lea    rdx,[rbx+0x8]
   1d3bf:	mov    rcx,r12
   1d3c2:	mov    rdi,rbp
   1d3c5:	call   21550 <g_str_equal@plt+0x19198>
   1d3ca:	mov    rsi,QWORD PTR [rsp+0x10]
   1d3cf:	test   rsi,rsi
   1d3d2:	je     1d400 <g_str_equal@plt+0x15048>
   1d3d4:	mov    rdi,r13
   1d3d7:	call   df30 <g_str_equal@plt+0x5b78>
   1d3dc:	mov    rax,QWORD PTR [rsp+0x18]
   1d3e1:	xor    rax,QWORD PTR fs:0x28
   1d3ea:	jne    1d4e2 <g_str_equal@plt+0x1512a>
   1d3f0:	add    rsp,0x28
   1d3f4:	pop    rbx
   1d3f5:	pop    rbp
   1d3f6:	pop    r12
   1d3f8:	pop    r13
   1d3fa:	ret    
   1d3fb:	nop    DWORD PTR [rax+rax*1+0x0]
   1d400:	lea    rsi,[rip+0xec2c]        # 2c033 <_fini@@Base+0x2daf>
   1d407:	lea    rdx,[rbx+0x10]
   1d40b:	mov    rcx,r12
   1d40e:	mov    rdi,rbp
   1d411:	call   21360 <g_str_equal@plt+0x18fa8>
   1d416:	mov    rsi,QWORD PTR [rsp+0x10]
   1d41b:	test   rsi,rsi
   1d41e:	jne    1d3d4 <g_str_equal@plt+0x1501c>
   1d420:	lea    rsi,[rip+0xecc9]        # 2c0f0 <_fini@@Base+0x2e6c>
   1d427:	lea    rdx,[rbx+0x18]
   1d42b:	mov    rcx,r12
   1d42e:	mov    rdi,rbp
   1d431:	call   21460 <g_str_equal@plt+0x190a8>
   1d436:	mov    rsi,QWORD PTR [rsp+0x10]
   1d43b:	test   rsi,rsi
   1d43e:	jne    1d3d4 <g_str_equal@plt+0x1501c>
   1d440:	lea    rsi,[rip+0xfcf2]        # 2d139 <_fini@@Base+0x3eb5>
   1d447:	lea    rdx,[rbx+0x19]
   1d44b:	mov    rcx,r12
   1d44e:	mov    rdi,rbp
   1d451:	call   21460 <g_str_equal@plt+0x190a8>
   1d456:	mov    rsi,QWORD PTR [rsp+0x10]
   1d45b:	test   rsi,rsi
   1d45e:	jne    1d3d4 <g_str_equal@plt+0x1501c>
   1d464:	lea    rsi,[rip+0xfcd3]        # 2d13e <_fini@@Base+0x3eba>
   1d46b:	lea    rdx,[rbx+0x1a]
   1d46f:	mov    rcx,r12
   1d472:	mov    rdi,rbp
   1d475:	call   21460 <g_str_equal@plt+0x190a8>
   1d47a:	mov    rsi,QWORD PTR [rsp+0x10]
   1d47f:	test   rsi,rsi
   1d482:	jne    1d3d4 <g_str_equal@plt+0x1501c>
   1d488:	lea    rsi,[rip+0xfcb8]        # 2d147 <_fini@@Base+0x3ec3>
   1d48f:	lea    rdx,[rbx+0x20]
   1d493:	mov    rcx,r12
   1d496:	mov    rdi,rbp
   1d499:	call   23fe0 <g_str_equal@plt+0x1bc28>
   1d49e:	mov    rsi,QWORD PTR [rsp+0x10]
   1d4a3:	test   rsi,rsi
   1d4a6:	jne    1d3d4 <g_str_equal@plt+0x1501c>
   1d4ac:	mov    eax,DWORD PTR [rbx+0x28]
   1d4af:	lea    rsi,[rip+0xfc9c]        # 2d152 <_fini@@Base+0x3ece>
   1d4b6:	lea    rdx,[rsp+0xc]
   1d4bb:	lea    rcx,[rip+0x21fcbe]        # 23d180 <_fini@@Base+0x213efc>
   1d4c2:	mov    r8,r12
   1d4c5:	mov    rdi,rbp
   1d4c8:	mov    DWORD PTR [rsp+0xc],eax
   1d4cc:	call   219e0 <g_str_equal@plt+0x19628>
   1d4d1:	mov    eax,DWORD PTR [rsp+0xc]
   1d4d5:	mov    rsi,QWORD PTR [rsp+0x10]
   1d4da:	mov    DWORD PTR [rbx+0x28],eax
   1d4dd:	jmp    1d3d4 <g_str_equal@plt+0x1501c>
   1d4e2:	call   8050 <__stack_chk_fail@plt>
   1d4e7:	nop    WORD PTR [rax+rax*1+0x0]
   1d4f0:	push   r13
   1d4f2:	push   r12
   1d4f4:	mov    r13,rcx
   1d4f7:	push   rbp
   1d4f8:	push   rbx
   1d4f9:	mov    ecx,0x30
   1d4fe:	mov    rbp,rdi
   1d501:	mov    rbx,rdx
   1d504:	sub    rsp,0x18
   1d508:	mov    r12,rsp
   1d50b:	mov    QWORD PTR [rsp],0x0
   1d513:	mov    r8,r12
   1d516:	mov    rax,QWORD PTR fs:0x28
   1d51f:	mov    QWORD PTR [rsp+0x8],rax
   1d524:	xor    eax,eax
   1d526:	call   200e0 <g_str_equal@plt+0x17d28>
   1d52b:	mov    rsi,QWORD PTR [rsp]
   1d52f:	test   rsi,rsi
   1d532:	je     1d560 <g_str_equal@plt+0x151a8>
   1d534:	mov    rdi,r13
   1d537:	call   df30 <g_str_equal@plt+0x5b78>
   1d53c:	mov    rax,QWORD PTR [rsp+0x8]
   1d541:	xor    rax,QWORD PTR fs:0x28
   1d54a:	jne    1d5bd <g_str_equal@plt+0x15205>
   1d54c:	add    rsp,0x18
   1d550:	pop    rbx
   1d551:	pop    rbp
   1d552:	pop    r12
   1d554:	pop    r13
   1d556:	ret    
   1d557:	nop    WORD PTR [rax+rax*1+0x0]
   1d560:	mov    rsi,QWORD PTR [rbx]
   1d563:	test   rsi,rsi
   1d566:	je     1d57a <g_str_equal@plt+0x151c2>
   1d568:	mov    rdx,r12
   1d56b:	mov    rdi,rbp
   1d56e:	call   1d370 <g_str_equal@plt+0x14fb8>
   1d573:	cmp    QWORD PTR [rsp],0x0
   1d578:	je     1d5b0 <g_str_equal@plt+0x151f8>
   1d57a:	mov    rsi,rbx
   1d57d:	mov    rdi,rbp
   1d580:	call   20340 <g_str_equal@plt+0x17f88>
   1d585:	mov    rsi,QWORD PTR [rsp]
   1d589:	test   rsi,rsi
   1d58c:	je     1d534 <g_str_equal@plt+0x1517c>
   1d58e:	mov    rdi,rbp
   1d591:	call   20ab0 <g_str_equal@plt+0x186f8>
   1d596:	test   al,al
   1d598:	je     1d5a9 <g_str_equal@plt+0x151f1>
   1d59a:	mov    rdi,QWORD PTR [rbx]
   1d59d:	call   15a30 <g_str_equal@plt+0xd678>
   1d5a2:	mov    QWORD PTR [rbx],0x0
   1d5a9:	mov    rsi,QWORD PTR [rsp]
   1d5ad:	jmp    1d534 <g_str_equal@plt+0x1517c>
   1d5af:	nop
   1d5b0:	mov    rsi,r12
   1d5b3:	mov    rdi,rbp
   1d5b6:	call   20290 <g_str_equal@plt+0x17ed8>
   1d5bb:	jmp    1d57a <g_str_equal@plt+0x151c2>
   1d5bd:	call   8050 <__stack_chk_fail@plt>
   1d5c2:	nop    DWORD PTR [rax+0x0]
   1d5c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1d5d0:	push   r14
   1d5d2:	push   r13
   1d5d4:	mov    r14,rcx
   1d5d7:	push   r12
   1d5d9:	push   rbp
   1d5da:	mov    ecx,0x10
   1d5df:	push   rbx
   1d5e0:	mov    rbp,rdi
   1d5e3:	mov    r13,rdx
   1d5e6:	sub    rsp,0x10
   1d5ea:	mov    r12,rsp
   1d5ed:	mov    QWORD PTR [rsp],0x0
   1d5f5:	mov    r8,r12
   1d5f8:	mov    rax,QWORD PTR fs:0x28
   1d601:	mov    QWORD PTR [rsp+0x8],rax
   1d606:	xor    eax,eax
   1d608:	call   203e0 <g_str_equal@plt+0x18028>
   1d60d:	mov    rsi,QWORD PTR [rsp]
   1d611:	test   rsi,rsi
   1d614:	je     1d640 <g_str_equal@plt+0x15288>
   1d616:	mov    rdi,r14
   1d619:	call   df30 <g_str_equal@plt+0x5b78>
   1d61e:	mov    rax,QWORD PTR [rsp+0x8]
   1d623:	xor    rax,QWORD PTR fs:0x28
   1d62c:	jne    1d6d4 <g_str_equal@plt+0x1531c>
   1d632:	add    rsp,0x10
   1d636:	pop    rbx
   1d637:	pop    rbp
   1d638:	pop    r12
   1d63a:	pop    r13
   1d63c:	pop    r14
   1d63e:	ret    
   1d63f:	nop
   1d640:	mov    rbx,QWORD PTR [r13+0x0]
   1d644:	test   rbx,rbx
   1d647:	jne    1d668 <g_str_equal@plt+0x152b0>
   1d649:	jmp    1d6c7 <g_str_equal@plt+0x1530f>
   1d64b:	nop    DWORD PTR [rax+rax*1+0x0]
   1d650:	mov    rsi,rbx
   1d653:	mov    edx,0x10
   1d658:	mov    rdi,rbp
   1d65b:	call   20530 <g_str_equal@plt+0x18178>
   1d660:	test   rax,rax
   1d663:	mov    rbx,rax
   1d666:	je     1d6c0 <g_str_equal@plt+0x15308>
   1d668:	lea    rdx,[rbx+0x8]
   1d66c:	xor    esi,esi
   1d66e:	mov    rcx,r12
   1d671:	mov    rdi,rbp
   1d674:	call   1d4f0 <g_str_equal@plt+0x15138>
   1d679:	cmp    QWORD PTR [rsp],0x0
   1d67e:	je     1d650 <g_str_equal@plt+0x15298>
   1d680:	mov    rsi,r13
   1d683:	mov    rdi,rbp
   1d686:	call   206d0 <g_str_equal@plt+0x18318>
   1d68b:	mov    rsi,QWORD PTR [rsp]
   1d68f:	test   rsi,rsi
   1d692:	je     1d616 <g_str_equal@plt+0x1525e>
   1d694:	mov    rdi,rbp
   1d697:	call   20ab0 <g_str_equal@plt+0x186f8>
   1d69c:	test   al,al
   1d69e:	je     1d6b1 <g_str_equal@plt+0x152f9>
   1d6a0:	mov    rdi,QWORD PTR [r13+0x0]
   1d6a4:	call   15a70 <g_str_equal@plt+0xd6b8>
   1d6a9:	mov    QWORD PTR [r13+0x0],0x0
   1d6b1:	mov    rsi,QWORD PTR [rsp]
   1d6b5:	jmp    1d616 <g_str_equal@plt+0x1525e>
   1d6ba:	nop    WORD PTR [rax+rax*1+0x0]
   1d6c0:	cmp    QWORD PTR [rsp],0x0
   1d6c5:	jne    1d680 <g_str_equal@plt+0x152c8>
   1d6c7:	mov    rsi,r12
   1d6ca:	mov    rdi,rbp
   1d6cd:	call   20620 <g_str_equal@plt+0x18268>
   1d6d2:	jmp    1d680 <g_str_equal@plt+0x152c8>
   1d6d4:	call   8050 <__stack_chk_fail@plt>
   1d6d9:	nop    DWORD PTR [rax+0x0]
   1d6e0:	push   r13
   1d6e2:	push   r12
   1d6e4:	mov    r13,rdx
   1d6e7:	push   rbp
   1d6e8:	push   rbx
   1d6e9:	mov    rdx,rsi
   1d6ec:	mov    rbx,rsi
   1d6ef:	lea    rsi,[rip+0xbcc9]        # 293bf <_fini@@Base+0x13b>
   1d6f6:	mov    rbp,rdi
   1d6f9:	sub    rsp,0x18
   1d6fd:	mov    rax,QWORD PTR fs:0x28
   1d706:	mov    QWORD PTR [rsp+0x8],rax
   1d70b:	xor    eax,eax
   1d70d:	mov    QWORD PTR [rsp],0x0
   1d715:	mov    r12,rsp
   1d718:	call   209e0 <g_str_equal@plt+0x18628>
   1d71d:	test   al,al
   1d71f:	je     1d770 <g_str_equal@plt+0x153b8>
   1d721:	lea    rsi,[rip+0xbc97]        # 293bf <_fini@@Base+0x13b>
   1d728:	lea    rdx,[rbx+0x8]
   1d72c:	mov    rcx,r12
   1d72f:	mov    rdi,rbp
   1d732:	call   21550 <g_str_equal@plt+0x19198>
   1d737:	mov    rsi,QWORD PTR [rsp]
   1d73b:	test   rsi,rsi
   1d73e:	je     1d770 <g_str_equal@plt+0x153b8>
   1d740:	mov    rdi,r13
   1d743:	call   df30 <g_str_equal@plt+0x5b78>
   1d748:	mov    rax,QWORD PTR [rsp+0x8]
   1d74d:	xor    rax,QWORD PTR fs:0x28
   1d756:	jne    1d859 <g_str_equal@plt+0x154a1>
   1d75c:	add    rsp,0x18
   1d760:	pop    rbx
   1d761:	pop    rbp
   1d762:	pop    r12
   1d764:	pop    r13
   1d766:	ret    
   1d767:	nop    WORD PTR [rax+rax*1+0x0]
   1d770:	lea    rsi,[rip+0xf9e2]        # 2d159 <_fini@@Base+0x3ed5>
   1d777:	lea    rdx,[rbx+0x10]
   1d77b:	mov    rcx,r12
   1d77e:	mov    rdi,rbp
   1d781:	call   20ac0 <g_str_equal@plt+0x18708>
   1d786:	mov    rsi,QWORD PTR [rsp]
   1d78a:	test   rsi,rsi
   1d78d:	jne    1d740 <g_str_equal@plt+0x15388>
   1d78f:	lea    rsi,[rip+0xe89d]        # 2c033 <_fini@@Base+0x2daf>
   1d796:	lea    rdx,[rbx+0x18]
   1d79a:	mov    rcx,r12
   1d79d:	mov    rdi,rbp
   1d7a0:	call   20ac0 <g_str_equal@plt+0x18708>
   1d7a5:	mov    rsi,QWORD PTR [rsp]
   1d7a9:	test   rsi,rsi
   1d7ac:	jne    1d740 <g_str_equal@plt+0x15388>
   1d7ae:	lea    rsi,[rip+0xf744]        # 2cef9 <_fini@@Base+0x3c75>
   1d7b5:	lea    rdx,[rbx+0x20]
   1d7b9:	mov    rcx,r12
   1d7bc:	mov    rdi,rbp
   1d7bf:	call   20ac0 <g_str_equal@plt+0x18708>
   1d7c4:	mov    rsi,QWORD PTR [rsp]
   1d7c8:	test   rsi,rsi
   1d7cb:	jne    1d740 <g_str_equal@plt+0x15388>
   1d7d1:	lea    rsi,[rip+0xf502]        # 2ccda <_fini@@Base+0x3a56>
   1d7d8:	lea    rdx,[rbx+0x28]
   1d7dc:	mov    rcx,r12
   1d7df:	mov    rdi,rbp
   1d7e2:	call   20ac0 <g_str_equal@plt+0x18708>
   1d7e7:	mov    rsi,QWORD PTR [rsp]
   1d7eb:	test   rsi,rsi
   1d7ee:	jne    1d740 <g_str_equal@plt+0x15388>
   1d7f4:	lea    rsi,[rip+0xf92f]        # 2d12a <_fini@@Base+0x3ea6>
   1d7fb:	lea    rdx,[rbx+0x30]
   1d7ff:	mov    rcx,r12
   1d802:	mov    rdi,rbp
   1d805:	call   21550 <g_str_equal@plt+0x19198>
   1d80a:	mov    rsi,QWORD PTR [rsp]
   1d80e:	test   rsi,rsi
   1d811:	jne    1d740 <g_str_equal@plt+0x15388>
   1d817:	lea    rsi,[rip+0xf940]        # 2d15e <_fini@@Base+0x3eda>
   1d81e:	lea    rdx,[rbx+0x38]
   1d822:	mov    rcx,r12
   1d825:	mov    rdi,rbp
   1d828:	call   21460 <g_str_equal@plt+0x190a8>
   1d82d:	mov    rsi,QWORD PTR [rsp]
   1d831:	test   rsi,rsi
   1d834:	jne    1d740 <g_str_equal@plt+0x15388>
   1d83a:	lea    rsi,[rip+0xf928]        # 2d169 <_fini@@Base+0x3ee5>
   1d841:	lea    rdx,[rbx+0x39]
   1d845:	mov    rcx,r12
   1d848:	mov    rdi,rbp
   1d84b:	call   21460 <g_str_equal@plt+0x190a8>
   1d850:	mov    rsi,QWORD PTR [rsp]
   1d854:	jmp    1d740 <g_str_equal@plt+0x15388>
   1d859:	call   8050 <__stack_chk_fail@plt>
   1d85e:	xchg   ax,ax
   1d860:	push   r13
   1d862:	push   r12
   1d864:	mov    r13,rcx
   1d867:	push   rbp
   1d868:	push   rbx
   1d869:	mov    ecx,0x40
   1d86e:	mov    rbp,rdi
   1d871:	mov    rbx,rdx
   1d874:	sub    rsp,0x18
   1d878:	mov    r12,rsp
   1d87b:	mov    QWORD PTR [rsp],0x0
   1d883:	mov    r8,r12
   1d886:	mov    rax,QWORD PTR fs:0x28
   1d88f:	mov    QWORD PTR [rsp+0x8],rax
   1d894:	xor    eax,eax
   1d896:	call   200e0 <g_str_equal@plt+0x17d28>
   1d89b:	mov    rsi,QWORD PTR [rsp]
   1d89f:	test   rsi,rsi
   1d8a2:	je     1d8d0 <g_str_equal@plt+0x15518>
   1d8a4:	mov    rdi,r13
   1d8a7:	call   df30 <g_str_equal@plt+0x5b78>
   1d8ac:	mov    rax,QWORD PTR [rsp+0x8]
   1d8b1:	xor    rax,QWORD PTR fs:0x28
   1d8ba:	jne    1d92d <g_str_equal@plt+0x15575>
   1d8bc:	add    rsp,0x18
   1d8c0:	pop    rbx
   1d8c1:	pop    rbp
   1d8c2:	pop    r12
   1d8c4:	pop    r13
   1d8c6:	ret    
   1d8c7:	nop    WORD PTR [rax+rax*1+0x0]
   1d8d0:	mov    rsi,QWORD PTR [rbx]
   1d8d3:	test   rsi,rsi
   1d8d6:	je     1d8ea <g_str_equal@plt+0x15532>
   1d8d8:	mov    rdx,r12
   1d8db:	mov    rdi,rbp
   1d8de:	call   1d6e0 <g_str_equal@plt+0x15328>
   1d8e3:	cmp    QWORD PTR [rsp],0x0
   1d8e8:	je     1d920 <g_str_equal@plt+0x15568>
   1d8ea:	mov    rsi,rbx
   1d8ed:	mov    rdi,rbp
   1d8f0:	call   20340 <g_str_equal@plt+0x17f88>
   1d8f5:	mov    rsi,QWORD PTR [rsp]
   1d8f9:	test   rsi,rsi
   1d8fc:	je     1d8a4 <g_str_equal@plt+0x154ec>
   1d8fe:	mov    rdi,rbp
   1d901:	call   20ab0 <g_str_equal@plt+0x186f8>
   1d906:	test   al,al
   1d908:	je     1d919 <g_str_equal@plt+0x15561>
   1d90a:	mov    rdi,QWORD PTR [rbx]
   1d90d:	call   15ab0 <g_str_equal@plt+0xd6f8>
   1d912:	mov    QWORD PTR [rbx],0x0
   1d919:	mov    rsi,QWORD PTR [rsp]
   1d91d:	jmp    1d8a4 <g_str_equal@plt+0x154ec>
   1d91f:	nop
   1d920:	mov    rsi,r12
   1d923:	mov    rdi,rbp
   1d926:	call   20290 <g_str_equal@plt+0x17ed8>
   1d92b:	jmp    1d8ea <g_str_equal@plt+0x15532>
   1d92d:	call   8050 <__stack_chk_fail@plt>
   1d932:	nop    DWORD PTR [rax+0x0]
   1d936:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1d940:	push   rbx
   1d941:	mov    rbx,rdx
   1d944:	mov    rdx,rsi
   1d947:	lea    rsi,[rip+0xf788]        # 2d0d6 <_fini@@Base+0x3e52>
   1d94e:	sub    rsp,0x10
   1d952:	mov    rcx,rsp
   1d955:	mov    QWORD PTR [rsp],0x0
   1d95d:	mov    rax,QWORD PTR fs:0x28
   1d966:	mov    QWORD PTR [rsp+0x8],rax
   1d96b:	xor    eax,eax
   1d96d:	call   1d860 <g_str_equal@plt+0x154a8>
   1d972:	mov    rsi,QWORD PTR [rsp]
   1d976:	mov    rdi,rbx
   1d979:	call   df30 <g_str_equal@plt+0x5b78>
   1d97e:	mov    rax,QWORD PTR [rsp+0x8]
   1d983:	xor    rax,QWORD PTR fs:0x28
   1d98c:	jne    1d994 <g_str_equal@plt+0x155dc>
   1d98e:	add    rsp,0x10
   1d992:	pop    rbx
   1d993:	ret    
   1d994:	call   8050 <__stack_chk_fail@plt>
   1d999:	nop    DWORD PTR [rax+0x0]
   1d9a0:	push   rbx
   1d9a1:	mov    r8,rcx
   1d9a4:	mov    rbx,rdx
   1d9a7:	lea    rcx,[rip+0x21f7b2]        # 23d160 <_fini@@Base+0x213edc>
   1d9ae:	sub    rsp,0x10
   1d9b2:	mov    rax,QWORD PTR fs:0x28
   1d9bb:	mov    QWORD PTR [rsp+0x8],rax
   1d9c0:	xor    eax,eax
   1d9c2:	mov    eax,DWORD PTR [rdx]
   1d9c4:	lea    rdx,[rsp+0x4]
   1d9c9:	mov    DWORD PTR [rsp+0x4],eax
   1d9cd:	call   219e0 <g_str_equal@plt+0x19628>
   1d9d2:	mov    eax,DWORD PTR [rsp+0x4]
   1d9d6:	mov    DWORD PTR [rbx],eax
   1d9d8:	mov    rax,QWORD PTR [rsp+0x8]
   1d9dd:	xor    rax,QWORD PTR fs:0x28
   1d9e6:	jne    1d9ee <g_str_equal@plt+0x15636>
   1d9e8:	add    rsp,0x10
   1d9ec:	pop    rbx
   1d9ed:	ret    
   1d9ee:	call   8050 <__stack_chk_fail@plt>
   1d9f3:	nop    DWORD PTR [rax]
   1d9f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1da00:	push   r13
   1da02:	push   r12
   1da04:	mov    r13,rdx
   1da07:	push   rbp
   1da08:	push   rbx
   1da09:	lea    rcx,[rip+0x21f750]        # 23d160 <_fini@@Base+0x213edc>
   1da10:	mov    rbx,rsi
   1da13:	mov    rbp,rdi
   1da16:	sub    rsp,0x28
   1da1a:	mov    rax,QWORD PTR fs:0x28
   1da23:	mov    QWORD PTR [rsp+0x18],rax
   1da28:	xor    eax,eax
   1da2a:	lea    r12,[rsp+0x10]
   1da2f:	mov    eax,DWORD PTR [rsi]
   1da31:	lea    rdx,[rsp+0xc]
   1da36:	lea    rsi,[rip+0xf59f]        # 2cfdc <_fini@@Base+0x3d58>
   1da3d:	mov    QWORD PTR [rsp+0x10],0x0
   1da46:	mov    r8,r12
   1da49:	mov    DWORD PTR [rsp+0xc],eax
   1da4d:	call   219e0 <g_str_equal@plt+0x19628>
   1da52:	mov    rsi,QWORD PTR [rsp+0x10]
   1da57:	mov    eax,DWORD PTR [rsp+0xc]
   1da5b:	test   rsi,rsi
   1da5e:	mov    DWORD PTR [rbx],eax
   1da60:	jne    1da7b <g_str_equal@plt+0x156c3>
   1da62:	cmp    eax,0x1
   1da65:	ja     1daa3 <g_str_equal@plt+0x156eb>
   1da67:	lea    rsi,[rbx+0x8]
   1da6b:	mov    rdx,r12
   1da6e:	mov    rdi,rbp
   1da71:	call   1d940 <g_str_equal@plt+0x15588>
   1da76:	mov    rsi,QWORD PTR [rsp+0x10]
   1da7b:	mov    rdi,r13
   1da7e:	call   df30 <g_str_equal@plt+0x5b78>
   1da83:	mov    rax,QWORD PTR [rsp+0x18]
   1da88:	xor    rax,QWORD PTR fs:0x28
   1da91:	jne    1da9e <g_str_equal@plt+0x156e6>
   1da93:	add    rsp,0x28
   1da97:	pop    rbx
   1da98:	pop    rbp
   1da99:	pop    r12
   1da9b:	pop    r13
   1da9d:	ret    
   1da9e:	call   8050 <__stack_chk_fail@plt>
   1daa3:	call   79c0 <abort@plt>
   1daa8:	nop    DWORD PTR [rax+rax*1+0x0]
   1dab0:	push   r13
   1dab2:	push   r12
   1dab4:	mov    r13,rcx
   1dab7:	push   rbp
   1dab8:	push   rbx
   1dab9:	mov    ecx,0x10
   1dabe:	mov    rbp,rdi
   1dac1:	mov    rbx,rdx
   1dac4:	sub    rsp,0x18
   1dac8:	mov    r12,rsp
   1dacb:	mov    QWORD PTR [rsp],0x0
   1dad3:	mov    r8,r12
   1dad6:	mov    rax,QWORD PTR fs:0x28
   1dadf:	mov    QWORD PTR [rsp+0x8],rax
   1dae4:	xor    eax,eax
   1dae6:	call   200e0 <g_str_equal@plt+0x17d28>
   1daeb:	mov    rsi,QWORD PTR [rsp]
   1daef:	test   rsi,rsi
   1daf2:	je     1db20 <g_str_equal@plt+0x15768>
   1daf4:	mov    rdi,r13
   1daf7:	call   df30 <g_str_equal@plt+0x5b78>
   1dafc:	mov    rax,QWORD PTR [rsp+0x8]
   1db01:	xor    rax,QWORD PTR fs:0x28
   1db0a:	jne    1db7d <g_str_equal@plt+0x157c5>
   1db0c:	add    rsp,0x18
   1db10:	pop    rbx
   1db11:	pop    rbp
   1db12:	pop    r12
   1db14:	pop    r13
   1db16:	ret    
   1db17:	nop    WORD PTR [rax+rax*1+0x0]
   1db20:	mov    rsi,QWORD PTR [rbx]
   1db23:	test   rsi,rsi
   1db26:	je     1db3a <g_str_equal@plt+0x15782>
   1db28:	mov    rdx,r12
   1db2b:	mov    rdi,rbp
   1db2e:	call   1da00 <g_str_equal@plt+0x15648>
   1db33:	cmp    QWORD PTR [rsp],0x0
   1db38:	je     1db70 <g_str_equal@plt+0x157b8>
   1db3a:	mov    rsi,rbx
   1db3d:	mov    rdi,rbp
   1db40:	call   20340 <g_str_equal@plt+0x17f88>
   1db45:	mov    rsi,QWORD PTR [rsp]
   1db49:	test   rsi,rsi
   1db4c:	je     1daf4 <g_str_equal@plt+0x1573c>
   1db4e:	mov    rdi,rbp
   1db51:	call   20ab0 <g_str_equal@plt+0x186f8>
   1db56:	test   al,al
   1db58:	je     1db69 <g_str_equal@plt+0x157b1>
   1db5a:	mov    rdi,QWORD PTR [rbx]
   1db5d:	call   15af0 <g_str_equal@plt+0xd738>
   1db62:	mov    QWORD PTR [rbx],0x0
   1db69:	mov    rsi,QWORD PTR [rsp]
   1db6d:	jmp    1daf4 <g_str_equal@plt+0x1573c>
   1db6f:	nop
   1db70:	mov    rsi,r12
   1db73:	mov    rdi,rbp
   1db76:	call   20290 <g_str_equal@plt+0x17ed8>
   1db7b:	jmp    1db3a <g_str_equal@plt+0x15782>
   1db7d:	call   8050 <__stack_chk_fail@plt>
   1db82:	nop    DWORD PTR [rax+0x0]
   1db86:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1db90:	push   r14
   1db92:	push   r13
   1db94:	mov    r14,rcx
   1db97:	push   r12
   1db99:	push   rbp
   1db9a:	mov    ecx,0x10
   1db9f:	push   rbx
   1dba0:	mov    rbp,rdi
   1dba3:	mov    r13,rdx
   1dba6:	sub    rsp,0x10
   1dbaa:	mov    r12,rsp
   1dbad:	mov    QWORD PTR [rsp],0x0
   1dbb5:	mov    r8,r12
   1dbb8:	mov    rax,QWORD PTR fs:0x28
   1dbc1:	mov    QWORD PTR [rsp+0x8],rax
   1dbc6:	xor    eax,eax
   1dbc8:	call   203e0 <g_str_equal@plt+0x18028>
   1dbcd:	mov    rsi,QWORD PTR [rsp]
   1dbd1:	test   rsi,rsi
   1dbd4:	je     1dc00 <g_str_equal@plt+0x15848>
   1dbd6:	mov    rdi,r14
   1dbd9:	call   df30 <g_str_equal@plt+0x5b78>
   1dbde:	mov    rax,QWORD PTR [rsp+0x8]
   1dbe3:	xor    rax,QWORD PTR fs:0x28
   1dbec:	jne    1dc94 <g_str_equal@plt+0x158dc>
   1dbf2:	add    rsp,0x10
   1dbf6:	pop    rbx
   1dbf7:	pop    rbp
   1dbf8:	pop    r12
   1dbfa:	pop    r13
   1dbfc:	pop    r14
   1dbfe:	ret    
   1dbff:	nop
   1dc00:	mov    rbx,QWORD PTR [r13+0x0]
   1dc04:	test   rbx,rbx
   1dc07:	jne    1dc28 <g_str_equal@plt+0x15870>
   1dc09:	jmp    1dc87 <g_str_equal@plt+0x158cf>
   1dc0b:	nop    DWORD PTR [rax+rax*1+0x0]
   1dc10:	mov    rsi,rbx
   1dc13:	mov    edx,0x10
   1dc18:	mov    rdi,rbp
   1dc1b:	call   20530 <g_str_equal@plt+0x18178>
   1dc20:	test   rax,rax
   1dc23:	mov    rbx,rax
   1dc26:	je     1dc80 <g_str_equal@plt+0x158c8>
   1dc28:	lea    rdx,[rbx+0x8]
   1dc2c:	xor    esi,esi
   1dc2e:	mov    rcx,r12
   1dc31:	mov    rdi,rbp
   1dc34:	call   1dab0 <g_str_equal@plt+0x156f8>
   1dc39:	cmp    QWORD PTR [rsp],0x0
   1dc3e:	je     1dc10 <g_str_equal@plt+0x15858>
   1dc40:	mov    rsi,r13
   1dc43:	mov    rdi,rbp
   1dc46:	call   206d0 <g_str_equal@plt+0x18318>
   1dc4b:	mov    rsi,QWORD PTR [rsp]
   1dc4f:	test   rsi,rsi
   1dc52:	je     1dbd6 <g_str_equal@plt+0x1581e>
   1dc54:	mov    rdi,rbp
   1dc57:	call   20ab0 <g_str_equal@plt+0x186f8>
   1dc5c:	test   al,al
   1dc5e:	je     1dc71 <g_str_equal@plt+0x158b9>
   1dc60:	mov    rdi,QWORD PTR [r13+0x0]
   1dc64:	call   15b30 <g_str_equal@plt+0xd778>
   1dc69:	mov    QWORD PTR [r13+0x0],0x0
   1dc71:	mov    rsi,QWORD PTR [rsp]
   1dc75:	jmp    1dbd6 <g_str_equal@plt+0x1581e>
   1dc7a:	nop    WORD PTR [rax+rax*1+0x0]
   1dc80:	cmp    QWORD PTR [rsp],0x0
   1dc85:	jne    1dc40 <g_str_equal@plt+0x15888>
   1dc87:	mov    rsi,r12
   1dc8a:	mov    rdi,rbp
   1dc8d:	call   20620 <g_str_equal@plt+0x18268>
   1dc92:	jmp    1dc40 <g_str_equal@plt+0x15888>
   1dc94:	call   8050 <__stack_chk_fail@plt>
   1dc99:	nop    DWORD PTR [rax+0x0]
   1dca0:	push   r13
   1dca2:	push   r12
   1dca4:	mov    r13,rdx
   1dca7:	push   rbp
   1dca8:	push   rbx
   1dca9:	mov    rdx,rsi
   1dcac:	mov    rbx,rsi
   1dcaf:	lea    rsi,[rip+0xf229]        # 2cedf <_fini@@Base+0x3c5b>
   1dcb6:	mov    rbp,rdi
   1dcb9:	sub    rsp,0x18
   1dcbd:	mov    r12,rsp
   1dcc0:	mov    QWORD PTR [rsp],0x0
   1dcc8:	mov    rcx,r12
   1dccb:	mov    rax,QWORD PTR fs:0x28
   1dcd4:	mov    QWORD PTR [rsp+0x8],rax
   1dcd9:	xor    eax,eax
   1dcdb:	call   21550 <g_str_equal@plt+0x19198>
   1dce0:	mov    rsi,QWORD PTR [rsp]
   1dce4:	test   rsi,rsi
   1dce7:	je     1dd10 <g_str_equal@plt+0x15958>
   1dce9:	mov    rdi,r13
   1dcec:	call   df30 <g_str_equal@plt+0x5b78>
   1dcf1:	mov    rax,QWORD PTR [rsp+0x8]
   1dcf6:	xor    rax,QWORD PTR fs:0x28
   1dcff:	jne    1dd2c <g_str_equal@plt+0x15974>
   1dd01:	add    rsp,0x18
   1dd05:	pop    rbx
   1dd06:	pop    rbp
   1dd07:	pop    r12
   1dd09:	pop    r13
   1dd0b:	ret    
   1dd0c:	nop    DWORD PTR [rax+0x0]
   1dd10:	lea    rsi,[rip+0xf45f]        # 2d176 <_fini@@Base+0x3ef2>
   1dd17:	lea    rdx,[rbx+0x8]
   1dd1b:	mov    rcx,r12
   1dd1e:	mov    rdi,rbp
   1dd21:	call   21550 <g_str_equal@plt+0x19198>
   1dd26:	mov    rsi,QWORD PTR [rsp]
   1dd2a:	jmp    1dce9 <g_str_equal@plt+0x15931>
   1dd2c:	call   8050 <__stack_chk_fail@plt>
   1dd31:	nop    DWORD PTR [rax+rax*1+0x0]
   1dd36:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1dd40:	push   rbx
   1dd41:	mov    r8,rcx
   1dd44:	mov    rbx,rdx
   1dd47:	lea    rcx,[rip+0x21f3f2]        # 23d140 <_fini@@Base+0x213ebc>
   1dd4e:	sub    rsp,0x10
   1dd52:	mov    rax,QWORD PTR fs:0x28
   1dd5b:	mov    QWORD PTR [rsp+0x8],rax
   1dd60:	xor    eax,eax
   1dd62:	mov    eax,DWORD PTR [rdx]
   1dd64:	lea    rdx,[rsp+0x4]
   1dd69:	mov    DWORD PTR [rsp+0x4],eax
   1dd6d:	call   219e0 <g_str_equal@plt+0x19628>
   1dd72:	mov    eax,DWORD PTR [rsp+0x4]
   1dd76:	mov    DWORD PTR [rbx],eax
   1dd78:	mov    rax,QWORD PTR [rsp+0x8]
   1dd7d:	xor    rax,QWORD PTR fs:0x28
   1dd86:	jne    1dd8e <g_str_equal@plt+0x159d6>
   1dd88:	add    rsp,0x10
   1dd8c:	pop    rbx
   1dd8d:	ret    
   1dd8e:	call   8050 <__stack_chk_fail@plt>
   1dd93:	nop    DWORD PTR [rax]
   1dd96:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1dda0:	push   r13
   1dda2:	push   r12
   1dda4:	mov    r13,rdx
   1dda7:	push   rbp
   1dda8:	push   rbx
   1dda9:	mov    rdx,rsi
   1ddac:	mov    rbx,rsi
   1ddaf:	lea    rsi,[rip+0xf129]        # 2cedf <_fini@@Base+0x3c5b>
   1ddb6:	mov    rbp,rdi
   1ddb9:	sub    rsp,0x28
   1ddbd:	mov    rax,QWORD PTR fs:0x28
   1ddc6:	mov    QWORD PTR [rsp+0x18],rax
   1ddcb:	xor    eax,eax
   1ddcd:	mov    QWORD PTR [rsp+0x10],0x0
   1ddd6:	lea    r12,[rsp+0x10]
   1dddb:	call   209e0 <g_str_equal@plt+0x18628>
   1dde0:	test   al,al
   1dde2:	je     1de30 <g_str_equal@plt+0x15a78>
   1dde4:	lea    rsi,[rip+0xf0f4]        # 2cedf <_fini@@Base+0x3c5b>
   1ddeb:	lea    rdx,[rbx+0x8]
   1ddef:	mov    rcx,r12
   1ddf2:	mov    rdi,rbp
   1ddf5:	call   21550 <g_str_equal@plt+0x19198>
   1ddfa:	mov    rsi,QWORD PTR [rsp+0x10]
   1ddff:	test   rsi,rsi
   1de02:	je     1de30 <g_str_equal@plt+0x15a78>
   1de04:	mov    rdi,r13
   1de07:	call   df30 <g_str_equal@plt+0x5b78>
   1de0c:	mov    rax,QWORD PTR [rsp+0x18]
   1de11:	xor    rax,QWORD PTR fs:0x28
   1de1a:	jne    1dece <g_str_equal@plt+0x15b16>
   1de20:	add    rsp,0x28
   1de24:	pop    rbx
   1de25:	pop    rbp
   1de26:	pop    r12
   1de28:	pop    r13
   1de2a:	ret    
   1de2b:	nop    DWORD PTR [rax+rax*1+0x0]
   1de30:	lea    rsi,[rip+0xf0c2]        # 2cef9 <_fini@@Base+0x3c75>
   1de37:	lea    rdx,[rbx+0x10]
   1de3b:	mov    rcx,r12
   1de3e:	mov    rdi,rbp
   1de41:	call   21550 <g_str_equal@plt+0x19198>
   1de46:	mov    rsi,QWORD PTR [rsp+0x10]
   1de4b:	test   rsi,rsi
   1de4e:	jne    1de04 <g_str_equal@plt+0x15a4c>
   1de50:	mov    eax,DWORD PTR [rbx+0x18]
   1de53:	lea    rsi,[rip+0xf320]        # 2d17a <_fini@@Base+0x3ef6>
   1de5a:	lea    rdx,[rsp+0xc]
   1de5f:	lea    rcx,[rip+0x21f2da]        # 23d140 <_fini@@Base+0x213ebc>
   1de66:	mov    r8,r12
   1de69:	mov    rdi,rbp
   1de6c:	mov    DWORD PTR [rsp+0xc],eax
   1de70:	call   219e0 <g_str_equal@plt+0x19628>
   1de75:	mov    rsi,QWORD PTR [rsp+0x10]
   1de7a:	mov    eax,DWORD PTR [rsp+0xc]
   1de7e:	test   rsi,rsi
   1de81:	mov    DWORD PTR [rbx+0x18],eax
   1de84:	jne    1de04 <g_str_equal@plt+0x15a4c>
   1de8a:	lea    rsi,[rip+0xf2f3]        # 2d184 <_fini@@Base+0x3f00>
   1de91:	lea    rdx,[rbx+0x20]
   1de95:	mov    rcx,r12
   1de98:	mov    rdi,rbp
   1de9b:	call   20ac0 <g_str_equal@plt+0x18708>
   1dea0:	mov    rsi,QWORD PTR [rsp+0x10]
   1dea5:	test   rsi,rsi
   1dea8:	jne    1de04 <g_str_equal@plt+0x15a4c>
   1deae:	lea    rsi,[rip+0xf107]        # 2cfbc <_fini@@Base+0x3d38>
   1deb5:	lea    rdx,[rbx+0x28]
   1deb9:	mov    rcx,r12
   1debc:	mov    rdi,rbp
   1debf:	call   20ac0 <g_str_equal@plt+0x18708>
   1dec4:	mov    rsi,QWORD PTR [rsp+0x10]
   1dec9:	jmp    1de04 <g_str_equal@plt+0x15a4c>
   1dece:	call   8050 <__stack_chk_fail@plt>
   1ded3:	nop    DWORD PTR [rax]
   1ded6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1dee0:	push   r13
   1dee2:	push   r12
   1dee4:	mov    r13,rcx
   1dee7:	push   rbp
   1dee8:	push   rbx
   1dee9:	mov    ecx,0x30
   1deee:	mov    rbp,rdi
   1def1:	mov    rbx,rdx
   1def4:	sub    rsp,0x18
   1def8:	mov    r12,rsp
   1defb:	mov    QWORD PTR [rsp],0x0
   1df03:	mov    r8,r12
   1df06:	mov    rax,QWORD PTR fs:0x28
   1df0f:	mov    QWORD PTR [rsp+0x8],rax
   1df14:	xor    eax,eax
   1df16:	call   200e0 <g_str_equal@plt+0x17d28>
   1df1b:	mov    rsi,QWORD PTR [rsp]
   1df1f:	test   rsi,rsi
   1df22:	je     1df50 <g_str_equal@plt+0x15b98>
   1df24:	mov    rdi,r13
   1df27:	call   df30 <g_str_equal@plt+0x5b78>
   1df2c:	mov    rax,QWORD PTR [rsp+0x8]
   1df31:	xor    rax,QWORD PTR fs:0x28
   1df3a:	jne    1dfad <g_str_equal@plt+0x15bf5>
   1df3c:	add    rsp,0x18
   1df40:	pop    rbx
   1df41:	pop    rbp
   1df42:	pop    r12
   1df44:	pop    r13
   1df46:	ret    
   1df47:	nop    WORD PTR [rax+rax*1+0x0]
   1df50:	mov    rsi,QWORD PTR [rbx]
   1df53:	test   rsi,rsi
   1df56:	je     1df6a <g_str_equal@plt+0x15bb2>
   1df58:	mov    rdx,r12
   1df5b:	mov    rdi,rbp
   1df5e:	call   1dda0 <g_str_equal@plt+0x159e8>
   1df63:	cmp    QWORD PTR [rsp],0x0
   1df68:	je     1dfa0 <g_str_equal@plt+0x15be8>
   1df6a:	mov    rsi,rbx
   1df6d:	mov    rdi,rbp
   1df70:	call   20340 <g_str_equal@plt+0x17f88>
   1df75:	mov    rsi,QWORD PTR [rsp]
   1df79:	test   rsi,rsi
   1df7c:	je     1df24 <g_str_equal@plt+0x15b6c>
   1df7e:	mov    rdi,rbp
   1df81:	call   20ab0 <g_str_equal@plt+0x186f8>
   1df86:	test   al,al
   1df88:	je     1df99 <g_str_equal@plt+0x15be1>
   1df8a:	mov    rdi,QWORD PTR [rbx]
   1df8d:	call   15b70 <g_str_equal@plt+0xd7b8>
   1df92:	mov    QWORD PTR [rbx],0x0
   1df99:	mov    rsi,QWORD PTR [rsp]
   1df9d:	jmp    1df24 <g_str_equal@plt+0x15b6c>
   1df9f:	nop
   1dfa0:	mov    rsi,r12
   1dfa3:	mov    rdi,rbp
   1dfa6:	call   20290 <g_str_equal@plt+0x17ed8>
   1dfab:	jmp    1df6a <g_str_equal@plt+0x15bb2>
   1dfad:	call   8050 <__stack_chk_fail@plt>
   1dfb2:	nop    DWORD PTR [rax+0x0]
   1dfb6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1dfc0:	push   r14
   1dfc2:	push   r13
   1dfc4:	mov    r14,rcx
   1dfc7:	push   r12
   1dfc9:	push   rbp
   1dfca:	mov    ecx,0x10
   1dfcf:	push   rbx
   1dfd0:	mov    rbp,rdi
   1dfd3:	mov    r13,rdx
   1dfd6:	sub    rsp,0x10
   1dfda:	mov    r12,rsp
   1dfdd:	mov    QWORD PTR [rsp],0x0
   1dfe5:	mov    r8,r12
   1dfe8:	mov    rax,QWORD PTR fs:0x28
   1dff1:	mov    QWORD PTR [rsp+0x8],rax
   1dff6:	xor    eax,eax
   1dff8:	call   203e0 <g_str_equal@plt+0x18028>
   1dffd:	mov    rsi,QWORD PTR [rsp]
   1e001:	test   rsi,rsi
   1e004:	je     1e030 <g_str_equal@plt+0x15c78>
   1e006:	mov    rdi,r14
   1e009:	call   df30 <g_str_equal@plt+0x5b78>
   1e00e:	mov    rax,QWORD PTR [rsp+0x8]
   1e013:	xor    rax,QWORD PTR fs:0x28
   1e01c:	jne    1e0c4 <g_str_equal@plt+0x15d0c>
   1e022:	add    rsp,0x10
   1e026:	pop    rbx
   1e027:	pop    rbp
   1e028:	pop    r12
   1e02a:	pop    r13
   1e02c:	pop    r14
   1e02e:	ret    
   1e02f:	nop
   1e030:	mov    rbx,QWORD PTR [r13+0x0]
   1e034:	test   rbx,rbx
   1e037:	jne    1e058 <g_str_equal@plt+0x15ca0>
   1e039:	jmp    1e0b7 <g_str_equal@plt+0x15cff>
   1e03b:	nop    DWORD PTR [rax+rax*1+0x0]
   1e040:	mov    rsi,rbx
   1e043:	mov    edx,0x10
   1e048:	mov    rdi,rbp
   1e04b:	call   20530 <g_str_equal@plt+0x18178>
   1e050:	test   rax,rax
   1e053:	mov    rbx,rax
   1e056:	je     1e0b0 <g_str_equal@plt+0x15cf8>
   1e058:	lea    rdx,[rbx+0x8]
   1e05c:	xor    esi,esi
   1e05e:	mov    rcx,r12
   1e061:	mov    rdi,rbp
   1e064:	call   1dee0 <g_str_equal@plt+0x15b28>
   1e069:	cmp    QWORD PTR [rsp],0x0
   1e06e:	je     1e040 <g_str_equal@plt+0x15c88>
   1e070:	mov    rsi,r13
   1e073:	mov    rdi,rbp
   1e076:	call   206d0 <g_str_equal@plt+0x18318>
   1e07b:	mov    rsi,QWORD PTR [rsp]
   1e07f:	test   rsi,rsi
   1e082:	je     1e006 <g_str_equal@plt+0x15c4e>
   1e084:	mov    rdi,rbp
   1e087:	call   20ab0 <g_str_equal@plt+0x186f8>
   1e08c:	test   al,al
   1e08e:	je     1e0a1 <g_str_equal@plt+0x15ce9>
   1e090:	mov    rdi,QWORD PTR [r13+0x0]
   1e094:	call   15bb0 <g_str_equal@plt+0xd7f8>
   1e099:	mov    QWORD PTR [r13+0x0],0x0
   1e0a1:	mov    rsi,QWORD PTR [rsp]
   1e0a5:	jmp    1e006 <g_str_equal@plt+0x15c4e>
   1e0aa:	nop    WORD PTR [rax+rax*1+0x0]
   1e0b0:	cmp    QWORD PTR [rsp],0x0
   1e0b5:	jne    1e070 <g_str_equal@plt+0x15cb8>
   1e0b7:	mov    rsi,r12
   1e0ba:	mov    rdi,rbp
   1e0bd:	call   20620 <g_str_equal@plt+0x18268>
   1e0c2:	jmp    1e070 <g_str_equal@plt+0x15cb8>
   1e0c4:	call   8050 <__stack_chk_fail@plt>
   1e0c9:	nop    DWORD PTR [rax+0x0]
   1e0d0:	push   rbx
   1e0d1:	mov    rbx,rdx
   1e0d4:	mov    rdx,rsi
   1e0d7:	lea    rsi,[rip+0xb358]        # 29436 <_fini@@Base+0x1b2>
   1e0de:	sub    rsp,0x10
   1e0e2:	mov    rcx,rsp
   1e0e5:	mov    QWORD PTR [rsp],0x0
   1e0ed:	mov    rax,QWORD PTR fs:0x28
   1e0f6:	mov    QWORD PTR [rsp+0x8],rax
   1e0fb:	xor    eax,eax
   1e0fd:	call   1dee0 <g_str_equal@plt+0x15b28>
   1e102:	mov    rsi,QWORD PTR [rsp]
   1e106:	mov    rdi,rbx
   1e109:	call   df30 <g_str_equal@plt+0x5b78>
   1e10e:	mov    rax,QWORD PTR [rsp+0x8]
   1e113:	xor    rax,QWORD PTR fs:0x28
   1e11c:	jne    1e124 <g_str_equal@plt+0x15d6c>
   1e11e:	add    rsp,0x10
   1e122:	pop    rbx
   1e123:	ret    
   1e124:	call   8050 <__stack_chk_fail@plt>
   1e129:	nop    DWORD PTR [rax+0x0]
   1e130:	push   rbx
   1e131:	mov    rbx,rdx
   1e134:	mov    rdx,rsi
   1e137:	lea    rsi,[rip+0xe875]        # 2c9b3 <_fini@@Base+0x372f>
   1e13e:	sub    rsp,0x10
   1e142:	mov    rcx,rsp
   1e145:	mov    QWORD PTR [rsp],0x0
   1e14d:	mov    rax,QWORD PTR fs:0x28
   1e156:	mov    QWORD PTR [rsp+0x8],rax
   1e15b:	xor    eax,eax
   1e15d:	call   20ac0 <g_str_equal@plt+0x18708>
   1e162:	mov    rsi,QWORD PTR [rsp]
   1e166:	mov    rdi,rbx
   1e169:	call   df30 <g_str_equal@plt+0x5b78>
   1e16e:	mov    rax,QWORD PTR [rsp+0x8]
   1e173:	xor    rax,QWORD PTR fs:0x28
   1e17c:	jne    1e184 <g_str_equal@plt+0x15dcc>
   1e17e:	add    rsp,0x10
   1e182:	pop    rbx
   1e183:	ret    
   1e184:	call   8050 <__stack_chk_fail@plt>
   1e189:	nop    DWORD PTR [rax+0x0]
   1e190:	push   rbx
   1e191:	mov    r8,rcx
   1e194:	mov    rbx,rdx
   1e197:	lea    rcx,[rip+0x21ef72]        # 23d110 <_fini@@Base+0x213e8c>
   1e19e:	sub    rsp,0x10
   1e1a2:	mov    rax,QWORD PTR fs:0x28
   1e1ab:	mov    QWORD PTR [rsp+0x8],rax
   1e1b0:	xor    eax,eax
   1e1b2:	mov    eax,DWORD PTR [rdx]
   1e1b4:	lea    rdx,[rsp+0x4]
   1e1b9:	mov    DWORD PTR [rsp+0x4],eax
   1e1bd:	call   219e0 <g_str_equal@plt+0x19628>
   1e1c2:	mov    eax,DWORD PTR [rsp+0x4]
   1e1c6:	mov    DWORD PTR [rbx],eax
   1e1c8:	mov    rax,QWORD PTR [rsp+0x8]
   1e1cd:	xor    rax,QWORD PTR fs:0x28
   1e1d6:	jne    1e1de <g_str_equal@plt+0x15e26>
   1e1d8:	add    rsp,0x10
   1e1dc:	pop    rbx
   1e1dd:	ret    
   1e1de:	call   8050 <__stack_chk_fail@plt>
   1e1e3:	nop    DWORD PTR [rax]
   1e1e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1e1f0:	push   rbx
   1e1f1:	mov    rbx,rdx
   1e1f4:	mov    rdx,rsi
   1e1f7:	lea    rsi,[rip+0xed37]        # 2cf35 <_fini@@Base+0x3cb1>
   1e1fe:	sub    rsp,0x10
   1e202:	mov    rcx,rsp
   1e205:	mov    QWORD PTR [rsp],0x0
   1e20d:	mov    rax,QWORD PTR fs:0x28
   1e216:	mov    QWORD PTR [rsp+0x8],rax
   1e21b:	xor    eax,eax
   1e21d:	call   21550 <g_str_equal@plt+0x19198>
   1e222:	mov    rsi,QWORD PTR [rsp]
   1e226:	mov    rdi,rbx
   1e229:	call   df30 <g_str_equal@plt+0x5b78>
   1e22e:	mov    rax,QWORD PTR [rsp+0x8]
   1e233:	xor    rax,QWORD PTR fs:0x28
   1e23c:	jne    1e244 <g_str_equal@plt+0x15e8c>
   1e23e:	add    rsp,0x10
   1e242:	pop    rbx
   1e243:	ret    
   1e244:	call   8050 <__stack_chk_fail@plt>
   1e249:	nop    DWORD PTR [rax+0x0]
   1e250:	push   r13
   1e252:	push   r12
   1e254:	mov    r13,rdx
   1e257:	push   rbp
   1e258:	push   rbx
   1e259:	mov    rdx,rsi
   1e25c:	mov    rbx,rsi
   1e25f:	lea    rsi,[rip+0xef25]        # 2d18b <_fini@@Base+0x3f07>
   1e266:	mov    rbp,rdi
   1e269:	sub    rsp,0x18
   1e26d:	mov    r12,rsp
   1e270:	mov    QWORD PTR [rsp],0x0
   1e278:	mov    rcx,r12
   1e27b:	mov    rax,QWORD PTR fs:0x28
   1e284:	mov    QWORD PTR [rsp+0x8],rax
   1e289:	xor    eax,eax
   1e28b:	call   20ac0 <g_str_equal@plt+0x18708>
   1e290:	mov    rsi,QWORD PTR [rsp]
   1e294:	test   rsi,rsi
   1e297:	je     1e2c0 <g_str_equal@plt+0x15f08>
   1e299:	mov    rdi,r13
   1e29c:	call   df30 <g_str_equal@plt+0x5b78>
   1e2a1:	mov    rax,QWORD PTR [rsp+0x8]
   1e2a6:	xor    rax,QWORD PTR fs:0x28
   1e2af:	jne    1e2fb <g_str_equal@plt+0x15f43>
   1e2b1:	add    rsp,0x18
   1e2b5:	pop    rbx
   1e2b6:	pop    rbp
   1e2b7:	pop    r12
   1e2b9:	pop    r13
   1e2bb:	ret    
   1e2bc:	nop    DWORD PTR [rax+0x0]
   1e2c0:	lea    rsi,[rip+0xeecc]        # 2d193 <_fini@@Base+0x3f0f>
   1e2c7:	lea    rdx,[rbx+0x8]
   1e2cb:	mov    rcx,r12
   1e2ce:	mov    rdi,rbp
   1e2d1:	call   21460 <g_str_equal@plt+0x190a8>
   1e2d6:	mov    rsi,QWORD PTR [rsp]
   1e2da:	test   rsi,rsi
   1e2dd:	jne    1e299 <g_str_equal@plt+0x15ee1>
   1e2df:	lea    rsi,[rip+0xdd52]        # 2c038 <_fini@@Base+0x2db4>
   1e2e6:	lea    rdx,[rbx+0x9]
   1e2ea:	mov    rcx,r12
   1e2ed:	mov    rdi,rbp
   1e2f0:	call   21460 <g_str_equal@plt+0x190a8>
   1e2f5:	mov    rsi,QWORD PTR [rsp]
   1e2f9:	jmp    1e299 <g_str_equal@plt+0x15ee1>
   1e2fb:	call   8050 <__stack_chk_fail@plt>
   1e300:	push   r13
   1e302:	push   r12
   1e304:	mov    r13,rcx
   1e307:	push   rbp
   1e308:	push   rbx
   1e309:	mov    ecx,0x10
   1e30e:	mov    rbp,rdi
   1e311:	mov    rbx,rdx
   1e314:	sub    rsp,0x18
   1e318:	mov    r12,rsp
   1e31b:	mov    QWORD PTR [rsp],0x0
   1e323:	mov    r8,r12
   1e326:	mov    rax,QWORD PTR fs:0x28
   1e32f:	mov    QWORD PTR [rsp+0x8],rax
   1e334:	xor    eax,eax
   1e336:	call   200e0 <g_str_equal@plt+0x17d28>
   1e33b:	mov    rsi,QWORD PTR [rsp]
   1e33f:	test   rsi,rsi
   1e342:	je     1e370 <g_str_equal@plt+0x15fb8>
   1e344:	mov    rdi,r13
   1e347:	call   df30 <g_str_equal@plt+0x5b78>
   1e34c:	mov    rax,QWORD PTR [rsp+0x8]
   1e351:	xor    rax,QWORD PTR fs:0x28
   1e35a:	jne    1e3cd <g_str_equal@plt+0x16015>
   1e35c:	add    rsp,0x18
   1e360:	pop    rbx
   1e361:	pop    rbp
   1e362:	pop    r12
   1e364:	pop    r13
   1e366:	ret    
   1e367:	nop    WORD PTR [rax+rax*1+0x0]
   1e370:	mov    rsi,QWORD PTR [rbx]
   1e373:	test   rsi,rsi
   1e376:	je     1e38a <g_str_equal@plt+0x15fd2>
   1e378:	mov    rdx,r12
   1e37b:	mov    rdi,rbp
   1e37e:	call   1e250 <g_str_equal@plt+0x15e98>
   1e383:	cmp    QWORD PTR [rsp],0x0
   1e388:	je     1e3c0 <g_str_equal@plt+0x16008>
   1e38a:	mov    rsi,rbx
   1e38d:	mov    rdi,rbp
   1e390:	call   20340 <g_str_equal@plt+0x17f88>
   1e395:	mov    rsi,QWORD PTR [rsp]
   1e399:	test   rsi,rsi
   1e39c:	je     1e344 <g_str_equal@plt+0x15f8c>
   1e39e:	mov    rdi,rbp
   1e3a1:	call   20ab0 <g_str_equal@plt+0x186f8>
   1e3a6:	test   al,al
   1e3a8:	je     1e3b9 <g_str_equal@plt+0x16001>
   1e3aa:	mov    rdi,QWORD PTR [rbx]
   1e3ad:	call   15bf0 <g_str_equal@plt+0xd838>
   1e3b2:	mov    QWORD PTR [rbx],0x0
   1e3b9:	mov    rsi,QWORD PTR [rsp]
   1e3bd:	jmp    1e344 <g_str_equal@plt+0x15f8c>
   1e3bf:	nop
   1e3c0:	mov    rsi,r12
   1e3c3:	mov    rdi,rbp
   1e3c6:	call   20290 <g_str_equal@plt+0x17ed8>
   1e3cb:	jmp    1e38a <g_str_equal@plt+0x15fd2>
   1e3cd:	call   8050 <__stack_chk_fail@plt>
   1e3d2:	nop    DWORD PTR [rax+0x0]
   1e3d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1e3e0:	push   r14
   1e3e2:	push   r13
   1e3e4:	mov    r14,rcx
   1e3e7:	push   r12
   1e3e9:	push   rbp
   1e3ea:	mov    ecx,0x10
   1e3ef:	push   rbx
   1e3f0:	mov    rbp,rdi
   1e3f3:	mov    r13,rdx
   1e3f6:	sub    rsp,0x10
   1e3fa:	mov    r12,rsp
   1e3fd:	mov    QWORD PTR [rsp],0x0
   1e405:	mov    r8,r12
   1e408:	mov    rax,QWORD PTR fs:0x28
   1e411:	mov    QWORD PTR [rsp+0x8],rax
   1e416:	xor    eax,eax
   1e418:	call   203e0 <g_str_equal@plt+0x18028>
   1e41d:	mov    rsi,QWORD PTR [rsp]
   1e421:	test   rsi,rsi
   1e424:	je     1e450 <g_str_equal@plt+0x16098>
   1e426:	mov    rdi,r14
   1e429:	call   df30 <g_str_equal@plt+0x5b78>
   1e42e:	mov    rax,QWORD PTR [rsp+0x8]
   1e433:	xor    rax,QWORD PTR fs:0x28
   1e43c:	jne    1e4e4 <g_str_equal@plt+0x1612c>
   1e442:	add    rsp,0x10
   1e446:	pop    rbx
   1e447:	pop    rbp
   1e448:	pop    r12
   1e44a:	pop    r13
   1e44c:	pop    r14
   1e44e:	ret    
   1e44f:	nop
   1e450:	mov    rbx,QWORD PTR [r13+0x0]
   1e454:	test   rbx,rbx
   1e457:	jne    1e478 <g_str_equal@plt+0x160c0>
   1e459:	jmp    1e4d7 <g_str_equal@plt+0x1611f>
   1e45b:	nop    DWORD PTR [rax+rax*1+0x0]
   1e460:	mov    rsi,rbx
   1e463:	mov    edx,0x10
   1e468:	mov    rdi,rbp
   1e46b:	call   20530 <g_str_equal@plt+0x18178>
   1e470:	test   rax,rax
   1e473:	mov    rbx,rax
   1e476:	je     1e4d0 <g_str_equal@plt+0x16118>
   1e478:	lea    rdx,[rbx+0x8]
   1e47c:	xor    esi,esi
   1e47e:	mov    rcx,r12
   1e481:	mov    rdi,rbp
   1e484:	call   1e300 <g_str_equal@plt+0x15f48>
   1e489:	cmp    QWORD PTR [rsp],0x0
   1e48e:	je     1e460 <g_str_equal@plt+0x160a8>
   1e490:	mov    rsi,r13
   1e493:	mov    rdi,rbp
   1e496:	call   206d0 <g_str_equal@plt+0x18318>
   1e49b:	mov    rsi,QWORD PTR [rsp]
   1e49f:	test   rsi,rsi
   1e4a2:	je     1e426 <g_str_equal@plt+0x1606e>
   1e4a4:	mov    rdi,rbp
   1e4a7:	call   20ab0 <g_str_equal@plt+0x186f8>
   1e4ac:	test   al,al
   1e4ae:	je     1e4c1 <g_str_equal@plt+0x16109>
   1e4b0:	mov    rdi,QWORD PTR [r13+0x0]
   1e4b4:	call   15c30 <g_str_equal@plt+0xd878>
   1e4b9:	mov    QWORD PTR [r13+0x0],0x0
   1e4c1:	mov    rsi,QWORD PTR [rsp]
   1e4c5:	jmp    1e426 <g_str_equal@plt+0x1606e>
   1e4ca:	nop    WORD PTR [rax+rax*1+0x0]
   1e4d0:	cmp    QWORD PTR [rsp],0x0
   1e4d5:	jne    1e490 <g_str_equal@plt+0x160d8>
   1e4d7:	mov    rsi,r12
   1e4da:	mov    rdi,rbp
   1e4dd:	call   20620 <g_str_equal@plt+0x18268>
   1e4e2:	jmp    1e490 <g_str_equal@plt+0x160d8>
   1e4e4:	call   8050 <__stack_chk_fail@plt>
   1e4e9:	nop    DWORD PTR [rax+0x0]
   1e4f0:	push   r12
   1e4f2:	push   rbp
   1e4f3:	mov    r12,rdx
   1e4f6:	push   rbx
   1e4f7:	mov    rdx,rsi
   1e4fa:	mov    rbx,rsi
   1e4fd:	lea    rsi,[rip+0xec98]        # 2d19c <_fini@@Base+0x3f18>
   1e504:	mov    rbp,rdi
   1e507:	sub    rsp,0x10
   1e50b:	mov    rax,QWORD PTR fs:0x28
   1e514:	mov    QWORD PTR [rsp+0x8],rax
   1e519:	xor    eax,eax
   1e51b:	mov    QWORD PTR [rsp],0x0
   1e523:	call   209e0 <g_str_equal@plt+0x18628>
   1e528:	test   al,al
   1e52a:	je     1e570 <g_str_equal@plt+0x161b8>
   1e52c:	lea    rsi,[rip+0xec69]        # 2d19c <_fini@@Base+0x3f18>
   1e533:	lea    rdx,[rbx+0x8]
   1e537:	mov    rcx,rsp
   1e53a:	mov    rdi,rbp
   1e53d:	call   20ac0 <g_str_equal@plt+0x18708>
   1e542:	mov    rsi,QWORD PTR [rsp]
   1e546:	test   rsi,rsi
   1e549:	je     1e570 <g_str_equal@plt+0x161b8>
   1e54b:	mov    rdi,r12
   1e54e:	call   df30 <g_str_equal@plt+0x5b78>
   1e553:	mov    rax,QWORD PTR [rsp+0x8]
   1e558:	xor    rax,QWORD PTR fs:0x28
   1e561:	jne    1e627 <g_str_equal@plt+0x1626f>
   1e567:	add    rsp,0x10
   1e56b:	pop    rbx
   1e56c:	pop    rbp
   1e56d:	pop    r12
   1e56f:	ret    
   1e570:	lea    rdx,[rbx+0x10]
   1e574:	lea    rsi,[rip+0xec29]        # 2d1a4 <_fini@@Base+0x3f20>
   1e57b:	mov    rdi,rbp
   1e57e:	call   209e0 <g_str_equal@plt+0x18628>
   1e583:	test   al,al
   1e585:	jne    1e5e0 <g_str_equal@plt+0x16228>
   1e587:	lea    rdx,[rbx+0x20]
   1e58b:	lea    rsi,[rip+0xec1c]        # 2d1ae <_fini@@Base+0x3f2a>
   1e592:	mov    rdi,rbp
   1e595:	call   209e0 <g_str_equal@plt+0x18628>
   1e59a:	test   al,al
   1e59c:	je     1e5bd <g_str_equal@plt+0x16205>
   1e59e:	lea    rsi,[rip+0xec09]        # 2d1ae <_fini@@Base+0x3f2a>
   1e5a5:	lea    rdx,[rbx+0x28]
   1e5a9:	mov    rcx,rsp
   1e5ac:	mov    rdi,rbp
   1e5af:	call   20ac0 <g_str_equal@plt+0x18708>
   1e5b4:	mov    rsi,QWORD PTR [rsp]
   1e5b8:	test   rsi,rsi
   1e5bb:	jne    1e54b <g_str_equal@plt+0x16193>
   1e5bd:	lea    rdx,[rbx+0x30]
   1e5c1:	lea    rsi,[rip+0xe873]        # 2ce3b <_fini@@Base+0x3bb7>
   1e5c8:	mov    rdi,rbp
   1e5cb:	call   209e0 <g_str_equal@plt+0x18628>
   1e5d0:	test   al,al
   1e5d2:	jne    1e608 <g_str_equal@plt+0x16250>
   1e5d4:	mov    rsi,QWORD PTR [rsp]
   1e5d8:	jmp    1e54b <g_str_equal@plt+0x16193>
   1e5dd:	nop    DWORD PTR [rax]
   1e5e0:	lea    rsi,[rip+0xebbd]        # 2d1a4 <_fini@@Base+0x3f20>
   1e5e7:	lea    rdx,[rbx+0x18]
   1e5eb:	mov    rcx,rsp
   1e5ee:	mov    rdi,rbp
   1e5f1:	call   20ac0 <g_str_equal@plt+0x18708>
   1e5f6:	mov    rsi,QWORD PTR [rsp]
   1e5fa:	test   rsi,rsi
   1e5fd:	jne    1e54b <g_str_equal@plt+0x16193>
   1e603:	jmp    1e587 <g_str_equal@plt+0x161cf>
   1e605:	nop    DWORD PTR [rax]
   1e608:	lea    rsi,[rip+0xe82c]        # 2ce3b <_fini@@Base+0x3bb7>
   1e60f:	lea    rdx,[rbx+0x38]
   1e613:	mov    rcx,rsp
   1e616:	mov    rdi,rbp
   1e619:	call   20ac0 <g_str_equal@plt+0x18708>
   1e61e:	mov    rsi,QWORD PTR [rsp]
   1e622:	jmp    1e54b <g_str_equal@plt+0x16193>
   1e627:	call   8050 <__stack_chk_fail@plt>
   1e62c:	nop    DWORD PTR [rax+0x0]
   1e630:	push   rbx
   1e631:	mov    rbx,rdx
   1e634:	sub    rsp,0x10
   1e638:	mov    rdx,rsp
   1e63b:	mov    QWORD PTR [rsp],0x0
   1e643:	mov    rax,QWORD PTR fs:0x28
   1e64c:	mov    QWORD PTR [rsp+0x8],rax
   1e651:	xor    eax,eax
   1e653:	call   1e4f0 <g_str_equal@plt+0x16138>
   1e658:	mov    rsi,QWORD PTR [rsp]
   1e65c:	mov    rdi,rbx
   1e65f:	call   df30 <g_str_equal@plt+0x5b78>
   1e664:	mov    rax,QWORD PTR [rsp+0x8]
   1e669:	xor    rax,QWORD PTR fs:0x28
   1e672:	jne    1e67a <g_str_equal@plt+0x162c2>
   1e674:	add    rsp,0x10
   1e678:	pop    rbx
   1e679:	ret    
   1e67a:	call   8050 <__stack_chk_fail@plt>
   1e67f:	nop
   1e680:	push   r13
   1e682:	push   r12
   1e684:	mov    r12,rdi
   1e687:	push   rbp
   1e688:	push   rbx
   1e689:	mov    rbp,rdx
   1e68c:	mov    rbx,rsi
   1e68f:	sub    rsp,0x18
   1e693:	mov    r13,rsp
   1e696:	mov    QWORD PTR [rsp],0x0
   1e69e:	mov    rdx,r13
   1e6a1:	mov    rax,QWORD PTR fs:0x28
   1e6aa:	mov    QWORD PTR [rsp+0x8],rax
   1e6af:	xor    eax,eax
   1e6b1:	call   1cee0 <g_str_equal@plt+0x14b28>
   1e6b6:	mov    rsi,QWORD PTR [rsp]
   1e6ba:	test   rsi,rsi
   1e6bd:	jne    1e6e0 <g_str_equal@plt+0x16328>
   1e6bf:	mov    eax,DWORD PTR [rbx]
   1e6c1:	cmp    eax,0x1
   1e6c4:	je     1e708 <g_str_equal@plt+0x16350>
   1e6c6:	jb     1e720 <g_str_equal@plt+0x16368>
   1e6c8:	cmp    eax,0x2
   1e6cb:	jne    1e73a <g_str_equal@plt+0x16382>
   1e6cd:	lea    rsi,[rbx+0x8]
   1e6d1:	mov    rdx,r13
   1e6d4:	mov    rdi,r12
   1e6d7:	call   1e630 <g_str_equal@plt+0x16278>
   1e6dc:	mov    rsi,QWORD PTR [rsp]
   1e6e0:	mov    rdi,rbp
   1e6e3:	call   df30 <g_str_equal@plt+0x5b78>
   1e6e8:	mov    rax,QWORD PTR [rsp+0x8]
   1e6ed:	xor    rax,QWORD PTR fs:0x28
   1e6f6:	jne    1e735 <g_str_equal@plt+0x1637d>
   1e6f8:	add    rsp,0x18
   1e6fc:	pop    rbx
   1e6fd:	pop    rbp
   1e6fe:	pop    r12
   1e700:	pop    r13
   1e702:	ret    
   1e703:	nop    DWORD PTR [rax+rax*1+0x0]
   1e708:	lea    rsi,[rbx+0x8]
   1e70c:	mov    rdx,r13
   1e70f:	mov    rdi,r12
   1e712:	call   1d180 <g_str_equal@plt+0x14dc8>
   1e717:	mov    rsi,QWORD PTR [rsp]
   1e71b:	jmp    1e6e0 <g_str_equal@plt+0x16328>
   1e71d:	nop    DWORD PTR [rax]
   1e720:	lea    rsi,[rbx+0x8]
   1e724:	mov    rdx,r13
   1e727:	mov    rdi,r12
   1e72a:	call   1cf60 <g_str_equal@plt+0x14ba8>
   1e72f:	mov    rsi,QWORD PTR [rsp]
   1e733:	jmp    1e6e0 <g_str_equal@plt+0x16328>
   1e735:	call   8050 <__stack_chk_fail@plt>
   1e73a:	call   79c0 <abort@plt>
   1e73f:	nop
   1e740:	push   r13
   1e742:	push   r12
   1e744:	mov    r13,rcx
   1e747:	push   rbp
   1e748:	push   rbx
   1e749:	mov    ecx,0x48
   1e74e:	mov    rbp,rdi
   1e751:	mov    rbx,rdx
   1e754:	sub    rsp,0x18
   1e758:	mov    r12,rsp
   1e75b:	mov    QWORD PTR [rsp],0x0
   1e763:	mov    r8,r12
   1e766:	mov    rax,QWORD PTR fs:0x28
   1e76f:	mov    QWORD PTR [rsp+0x8],rax
   1e774:	xor    eax,eax
   1e776:	call   200e0 <g_str_equal@plt+0x17d28>
   1e77b:	mov    rsi,QWORD PTR [rsp]
   1e77f:	test   rsi,rsi
   1e782:	je     1e7b0 <g_str_equal@plt+0x163f8>
   1e784:	mov    rdi,r13
   1e787:	call   df30 <g_str_equal@plt+0x5b78>
   1e78c:	mov    rax,QWORD PTR [rsp+0x8]
   1e791:	xor    rax,QWORD PTR fs:0x28
   1e79a:	jne    1e80d <g_str_equal@plt+0x16455>
   1e79c:	add    rsp,0x18
   1e7a0:	pop    rbx
   1e7a1:	pop    rbp
   1e7a2:	pop    r12
   1e7a4:	pop    r13
   1e7a6:	ret    
   1e7a7:	nop    WORD PTR [rax+rax*1+0x0]
   1e7b0:	mov    rsi,QWORD PTR [rbx]
   1e7b3:	test   rsi,rsi
   1e7b6:	je     1e7ca <g_str_equal@plt+0x16412>
   1e7b8:	mov    rdx,r12
   1e7bb:	mov    rdi,rbp
   1e7be:	call   1e680 <g_str_equal@plt+0x162c8>
   1e7c3:	cmp    QWORD PTR [rsp],0x0
   1e7c8:	je     1e800 <g_str_equal@plt+0x16448>
   1e7ca:	mov    rsi,rbx
   1e7cd:	mov    rdi,rbp
   1e7d0:	call   20340 <g_str_equal@plt+0x17f88>
   1e7d5:	mov    rsi,QWORD PTR [rsp]
   1e7d9:	test   rsi,rsi
   1e7dc:	je     1e784 <g_str_equal@plt+0x163cc>
   1e7de:	mov    rdi,rbp
   1e7e1:	call   20ab0 <g_str_equal@plt+0x186f8>
   1e7e6:	test   al,al
   1e7e8:	je     1e7f9 <g_str_equal@plt+0x16441>
   1e7ea:	mov    rdi,QWORD PTR [rbx]
   1e7ed:	call   15930 <g_str_equal@plt+0xd578>
   1e7f2:	mov    QWORD PTR [rbx],0x0
   1e7f9:	mov    rsi,QWORD PTR [rsp]
   1e7fd:	jmp    1e784 <g_str_equal@plt+0x163cc>
   1e7ff:	nop
   1e800:	mov    rsi,r12
   1e803:	mov    rdi,rbp
   1e806:	call   20290 <g_str_equal@plt+0x17ed8>
   1e80b:	jmp    1e7ca <g_str_equal@plt+0x16412>
   1e80d:	call   8050 <__stack_chk_fail@plt>
   1e812:	nop    DWORD PTR [rax+0x0]
   1e816:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1e820:	push   r13
   1e822:	push   r12
   1e824:	mov    r13,rcx
   1e827:	push   rbp
   1e828:	push   rbx
   1e829:	mov    ecx,0x40
   1e82e:	mov    rbp,rdi
   1e831:	mov    rbx,rdx
   1e834:	sub    rsp,0x18
   1e838:	mov    r12,rsp
   1e83b:	mov    QWORD PTR [rsp],0x0
   1e843:	mov    r8,r12
   1e846:	mov    rax,QWORD PTR fs:0x28
   1e84f:	mov    QWORD PTR [rsp+0x8],rax
   1e854:	xor    eax,eax
   1e856:	call   200e0 <g_str_equal@plt+0x17d28>
   1e85b:	mov    rsi,QWORD PTR [rsp]
   1e85f:	test   rsi,rsi
   1e862:	je     1e890 <g_str_equal@plt+0x164d8>
   1e864:	mov    rdi,r13
   1e867:	call   df30 <g_str_equal@plt+0x5b78>
   1e86c:	mov    rax,QWORD PTR [rsp+0x8]
   1e871:	xor    rax,QWORD PTR fs:0x28
   1e87a:	jne    1e8ed <g_str_equal@plt+0x16535>
   1e87c:	add    rsp,0x18
   1e880:	pop    rbx
   1e881:	pop    rbp
   1e882:	pop    r12
   1e884:	pop    r13
   1e886:	ret    
   1e887:	nop    WORD PTR [rax+rax*1+0x0]
   1e890:	mov    rsi,QWORD PTR [rbx]
   1e893:	test   rsi,rsi
   1e896:	je     1e8aa <g_str_equal@plt+0x164f2>
   1e898:	mov    rdx,r12
   1e89b:	mov    rdi,rbp
   1e89e:	call   1e630 <g_str_equal@plt+0x16278>
   1e8a3:	cmp    QWORD PTR [rsp],0x0
   1e8a8:	je     1e8e0 <g_str_equal@plt+0x16528>
   1e8aa:	mov    rsi,rbx
   1e8ad:	mov    rdi,rbp
   1e8b0:	call   20340 <g_str_equal@plt+0x17f88>
   1e8b5:	mov    rsi,QWORD PTR [rsp]
   1e8b9:	test   rsi,rsi
   1e8bc:	je     1e864 <g_str_equal@plt+0x164ac>
   1e8be:	mov    rdi,rbp
   1e8c1:	call   20ab0 <g_str_equal@plt+0x186f8>
   1e8c6:	test   al,al
   1e8c8:	je     1e8d9 <g_str_equal@plt+0x16521>
   1e8ca:	mov    rdi,QWORD PTR [rbx]
   1e8cd:	call   159f0 <g_str_equal@plt+0xd638>
   1e8d2:	mov    QWORD PTR [rbx],0x0
   1e8d9:	mov    rsi,QWORD PTR [rsp]
   1e8dd:	jmp    1e864 <g_str_equal@plt+0x164ac>
   1e8df:	nop
   1e8e0:	mov    rsi,r12
   1e8e3:	mov    rdi,rbp
   1e8e6:	call   20290 <g_str_equal@plt+0x17ed8>
   1e8eb:	jmp    1e8aa <g_str_equal@plt+0x164f2>
   1e8ed:	call   8050 <__stack_chk_fail@plt>
   1e8f2:	nop    DWORD PTR [rax+0x0]
   1e8f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1e900:	push   r13
   1e902:	push   r12
   1e904:	mov    r13,rcx
   1e907:	push   rbp
   1e908:	push   rbx
   1e909:	mov    ecx,0x40
   1e90e:	mov    rbp,rdi
   1e911:	mov    rbx,rdx
   1e914:	sub    rsp,0x18
   1e918:	mov    r12,rsp
   1e91b:	mov    QWORD PTR [rsp],0x0
   1e923:	mov    r8,r12
   1e926:	mov    rax,QWORD PTR fs:0x28
   1e92f:	mov    QWORD PTR [rsp+0x8],rax
   1e934:	xor    eax,eax
   1e936:	call   200e0 <g_str_equal@plt+0x17d28>
   1e93b:	mov    rsi,QWORD PTR [rsp]
   1e93f:	test   rsi,rsi
   1e942:	je     1e970 <g_str_equal@plt+0x165b8>
   1e944:	mov    rdi,r13
   1e947:	call   df30 <g_str_equal@plt+0x5b78>
   1e94c:	mov    rax,QWORD PTR [rsp+0x8]
   1e951:	xor    rax,QWORD PTR fs:0x28
   1e95a:	jne    1e9cd <g_str_equal@plt+0x16615>
   1e95c:	add    rsp,0x18
   1e960:	pop    rbx
   1e961:	pop    rbp
   1e962:	pop    r12
   1e964:	pop    r13
   1e966:	ret    
   1e967:	nop    WORD PTR [rax+rax*1+0x0]
   1e970:	mov    rsi,QWORD PTR [rbx]
   1e973:	test   rsi,rsi
   1e976:	je     1e98a <g_str_equal@plt+0x165d2>
   1e978:	mov    rdx,r12
   1e97b:	mov    rdi,rbp
   1e97e:	call   1e4f0 <g_str_equal@plt+0x16138>
   1e983:	cmp    QWORD PTR [rsp],0x0
   1e988:	je     1e9c0 <g_str_equal@plt+0x16608>
   1e98a:	mov    rsi,rbx
   1e98d:	mov    rdi,rbp
   1e990:	call   20340 <g_str_equal@plt+0x17f88>
   1e995:	mov    rsi,QWORD PTR [rsp]
   1e999:	test   rsi,rsi
   1e99c:	je     1e944 <g_str_equal@plt+0x1658c>
   1e99e:	mov    rdi,rbp
   1e9a1:	call   20ab0 <g_str_equal@plt+0x186f8>
   1e9a6:	test   al,al
   1e9a8:	je     1e9b9 <g_str_equal@plt+0x16601>
   1e9aa:	mov    rdi,QWORD PTR [rbx]
   1e9ad:	call   15c70 <g_str_equal@plt+0xd8b8>
   1e9b2:	mov    QWORD PTR [rbx],0x0
   1e9b9:	mov    rsi,QWORD PTR [rsp]
   1e9bd:	jmp    1e944 <g_str_equal@plt+0x1658c>
   1e9bf:	nop
   1e9c0:	mov    rsi,r12
   1e9c3:	mov    rdi,rbp
   1e9c6:	call   20290 <g_str_equal@plt+0x17ed8>
   1e9cb:	jmp    1e98a <g_str_equal@plt+0x165d2>
   1e9cd:	call   8050 <__stack_chk_fail@plt>
   1e9d2:	nop    DWORD PTR [rax+0x0]
   1e9d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1e9e0:	push   r13
   1e9e2:	push   r12
   1e9e4:	mov    r13,rdx
   1e9e7:	push   rbp
   1e9e8:	push   rbx
   1e9e9:	mov    rdx,rsi
   1e9ec:	mov    rbx,rsi
   1e9ef:	lea    rsi,[rip+0xe2bf]        # 2ccb5 <_fini@@Base+0x3a31>
   1e9f6:	mov    rbp,rdi
   1e9f9:	sub    rsp,0x28
   1e9fd:	lea    r12,[rsp+0x10]
   1ea02:	mov    QWORD PTR [rsp+0x10],0x0
   1ea0b:	mov    rax,QWORD PTR fs:0x28
   1ea14:	mov    QWORD PTR [rsp+0x18],rax
   1ea19:	xor    eax,eax
   1ea1b:	mov    rcx,r12
   1ea1e:	call   20ac0 <g_str_equal@plt+0x18708>
   1ea23:	mov    rsi,QWORD PTR [rsp+0x10]
   1ea28:	test   rsi,rsi
   1ea2b:	je     1ea58 <g_str_equal@plt+0x166a0>
   1ea2d:	mov    rdi,r13
   1ea30:	call   df30 <g_str_equal@plt+0x5b78>
   1ea35:	mov    rax,QWORD PTR [rsp+0x18]
   1ea3a:	xor    rax,QWORD PTR fs:0x28
   1ea43:	jne    1eb51 <g_str_equal@plt+0x16799>
   1ea49:	add    rsp,0x28
   1ea4d:	pop    rbx
   1ea4e:	pop    rbp
   1ea4f:	pop    r12
   1ea51:	pop    r13
   1ea53:	ret    
   1ea54:	nop    DWORD PTR [rax+0x0]
   1ea58:	lea    rsi,[rip+0xe757]        # 2d1b6 <_fini@@Base+0x3f32>
   1ea5f:	lea    rdx,[rbx+0x8]
   1ea63:	mov    rcx,r12
   1ea66:	mov    rdi,rbp
   1ea69:	call   21460 <g_str_equal@plt+0x190a8>
   1ea6e:	mov    rsi,QWORD PTR [rsp+0x10]
   1ea73:	test   rsi,rsi
   1ea76:	jne    1ea2d <g_str_equal@plt+0x16675>
   1ea78:	lea    rsi,[rip+0xe73f]        # 2d1be <_fini@@Base+0x3f3a>
   1ea7f:	lea    rdx,[rbx+0x9]
   1ea83:	mov    rcx,r12
   1ea86:	mov    rdi,rbp
   1ea89:	call   21460 <g_str_equal@plt+0x190a8>
   1ea8e:	mov    rsi,QWORD PTR [rsp+0x10]
   1ea93:	test   rsi,rsi
   1ea96:	jne    1ea2d <g_str_equal@plt+0x16675>
   1ea98:	lea    rsi,[rip+0xe726]        # 2d1c5 <_fini@@Base+0x3f41>
   1ea9f:	lea    rdx,[rbx+0x10]
   1eaa3:	mov    rcx,r12
   1eaa6:	mov    rdi,rbp
   1eaa9:	call   21550 <g_str_equal@plt+0x19198>
   1eaae:	mov    rsi,QWORD PTR [rsp+0x10]
   1eab3:	test   rsi,rsi
   1eab6:	jne    1ea2d <g_str_equal@plt+0x16675>
   1eabc:	lea    rsi,[rip+0xe70b]        # 2d1ce <_fini@@Base+0x3f4a>
   1eac3:	lea    rdx,[rbx+0x18]
   1eac7:	mov    rcx,r12
   1eaca:	mov    rdi,rbp
   1eacd:	call   20ac0 <g_str_equal@plt+0x18708>
   1ead2:	mov    rsi,QWORD PTR [rsp+0x10]
   1ead7:	test   rsi,rsi
   1eada:	jne    1ea2d <g_str_equal@plt+0x16675>
   1eae0:	lea    rdx,[rbx+0x20]
   1eae4:	lea    rsi,[rip+0xe4f6]        # 2cfe1 <_fini@@Base+0x3d5d>
   1eaeb:	mov    rdi,rbp
   1eaee:	call   209e0 <g_str_equal@plt+0x18628>
   1eaf3:	test   al,al
   1eaf5:	je     1eb1b <g_str_equal@plt+0x16763>
   1eaf7:	lea    rsi,[rip+0xe4e3]        # 2cfe1 <_fini@@Base+0x3d5d>
   1eafe:	lea    rdx,[rbx+0x28]
   1eb02:	mov    rcx,r12
   1eb05:	mov    rdi,rbp
   1eb08:	call   1e900 <g_str_equal@plt+0x16548>
   1eb0d:	mov    rsi,QWORD PTR [rsp+0x10]
   1eb12:	test   rsi,rsi
   1eb15:	jne    1ea2d <g_str_equal@plt+0x16675>
   1eb1b:	mov    eax,DWORD PTR [rbx+0x30]
   1eb1e:	lea    rsi,[rip+0xe56b]        # 2d090 <_fini@@Base+0x3e0c>
   1eb25:	lea    rdx,[rsp+0xc]
   1eb2a:	lea    rcx,[rip+0x21e87f]        # 23d3b0 <_fini@@Base+0x21412c>
   1eb31:	mov    r8,r12
   1eb34:	mov    rdi,rbp
   1eb37:	mov    DWORD PTR [rsp+0xc],eax
   1eb3b:	call   219e0 <g_str_equal@plt+0x19628>
   1eb40:	mov    eax,DWORD PTR [rsp+0xc]
   1eb44:	mov    rsi,QWORD PTR [rsp+0x10]
   1eb49:	mov    DWORD PTR [rbx+0x30],eax
   1eb4c:	jmp    1ea2d <g_str_equal@plt+0x16675>
   1eb51:	call   8050 <__stack_chk_fail@plt>
   1eb56:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1eb60:	push   r13
   1eb62:	push   r12
   1eb64:	mov    r12,rdi
   1eb67:	push   rbp
   1eb68:	push   rbx
   1eb69:	mov    rbp,rdx
   1eb6c:	mov    rbx,rsi
   1eb6f:	sub    rsp,0x18
   1eb73:	mov    r13,rsp
   1eb76:	mov    QWORD PTR [rsp],0x0
   1eb7e:	mov    rdx,r13
   1eb81:	mov    rax,QWORD PTR fs:0x28
   1eb8a:	mov    QWORD PTR [rsp+0x8],rax
   1eb8f:	xor    eax,eax
   1eb91:	call   1e9e0 <g_str_equal@plt+0x16628>
   1eb96:	mov    rsi,QWORD PTR [rsp]
   1eb9a:	test   rsi,rsi
   1eb9d:	jne    1ebd8 <g_str_equal@plt+0x16820>
   1eb9f:	cmp    DWORD PTR [rbx+0x30],0x7
   1eba3:	ja     1ec9d <g_str_equal@plt+0x168e5>
   1eba9:	mov    eax,DWORD PTR [rbx+0x30]
   1ebac:	lea    rdx,[rip+0xe695]        # 2d248 <_fini@@Base+0x3fc4>
   1ebb3:	movsxd rax,DWORD PTR [rdx+rax*4]
   1ebb7:	add    rax,rdx
   1ebba:	jmp    rax
   1ebbc:	nop    DWORD PTR [rax+0x0]
   1ebc0:	lea    rsi,[rbx+0x38]
   1ebc4:	mov    rdx,r13
   1ebc7:	mov    rdi,r12
   1ebca:	call   16df0 <g_str_equal@plt+0xea38>
   1ebcf:	mov    rsi,QWORD PTR [rsp]
   1ebd3:	nop    DWORD PTR [rax+rax*1+0x0]
   1ebd8:	mov    rdi,rbp
   1ebdb:	call   df30 <g_str_equal@plt+0x5b78>
   1ebe0:	mov    rax,QWORD PTR [rsp+0x8]
   1ebe5:	xor    rax,QWORD PTR fs:0x28
   1ebee:	jne    1ec98 <g_str_equal@plt+0x168e0>
   1ebf4:	add    rsp,0x18
   1ebf8:	pop    rbx
   1ebf9:	pop    rbp
   1ebfa:	pop    r12
   1ebfc:	pop    r13
   1ebfe:	ret    
   1ebff:	nop
   1ec00:	lea    rsi,[rbx+0x38]
   1ec04:	mov    rdx,r13
   1ec07:	mov    rdi,r12
   1ec0a:	call   17470 <g_str_equal@plt+0xf0b8>
   1ec0f:	mov    rsi,QWORD PTR [rsp]
   1ec13:	jmp    1ebd8 <g_str_equal@plt+0x16820>
   1ec15:	nop    DWORD PTR [rax]
   1ec18:	lea    rsi,[rbx+0x38]
   1ec1c:	mov    rdx,r13
   1ec1f:	mov    rdi,r12
   1ec22:	call   16f30 <g_str_equal@plt+0xeb78>
   1ec27:	mov    rsi,QWORD PTR [rsp]
   1ec2b:	jmp    1ebd8 <g_str_equal@plt+0x16820>
   1ec2d:	nop    DWORD PTR [rax]
   1ec30:	lea    rsi,[rbx+0x38]
   1ec34:	mov    rdx,r13
   1ec37:	mov    rdi,r12
   1ec3a:	call   170b0 <g_str_equal@plt+0xecf8>
   1ec3f:	mov    rsi,QWORD PTR [rsp]
   1ec43:	jmp    1ebd8 <g_str_equal@plt+0x16820>
   1ec45:	nop    DWORD PTR [rax]
   1ec48:	lea    rsi,[rbx+0x38]
   1ec4c:	mov    rdx,r13
   1ec4f:	mov    rdi,r12
   1ec52:	call   171f0 <g_str_equal@plt+0xee38>
   1ec57:	mov    rsi,QWORD PTR [rsp]
   1ec5b:	jmp    1ebd8 <g_str_equal@plt+0x16820>
   1ec60:	lea    rsi,[rbx+0x38]
   1ec64:	mov    rdx,r13
   1ec67:	mov    rdi,r12
   1ec6a:	call   17330 <g_str_equal@plt+0xef78>
   1ec6f:	mov    rsi,QWORD PTR [rsp]
   1ec73:	jmp    1ebd8 <g_str_equal@plt+0x16820>
   1ec78:	nop    DWORD PTR [rax+rax*1+0x0]
   1ec80:	lea    rsi,[rbx+0x38]
   1ec84:	mov    rdx,r13
   1ec87:	mov    rdi,r12
   1ec8a:	call   17610 <g_str_equal@plt+0xf258>
   1ec8f:	mov    rsi,QWORD PTR [rsp]
   1ec93:	jmp    1ebd8 <g_str_equal@plt+0x16820>
   1ec98:	call   8050 <__stack_chk_fail@plt>
   1ec9d:	call   79c0 <abort@plt>
   1eca2:	nop    DWORD PTR [rax+0x0]
   1eca6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1ecb0:	push   r13
   1ecb2:	push   r12
   1ecb4:	mov    r13,rcx
   1ecb7:	push   rbp
   1ecb8:	push   rbx
   1ecb9:	mov    ecx,0x48
   1ecbe:	mov    rbp,rdi
   1ecc1:	mov    rbx,rdx
   1ecc4:	sub    rsp,0x18
   1ecc8:	mov    r12,rsp
   1eccb:	mov    QWORD PTR [rsp],0x0
   1ecd3:	mov    r8,r12
   1ecd6:	mov    rax,QWORD PTR fs:0x28
   1ecdf:	mov    QWORD PTR [rsp+0x8],rax
   1ece4:	xor    eax,eax
   1ece6:	call   200e0 <g_str_equal@plt+0x17d28>
   1eceb:	mov    rsi,QWORD PTR [rsp]
   1ecef:	test   rsi,rsi
   1ecf2:	je     1ed20 <g_str_equal@plt+0x16968>
   1ecf4:	mov    rdi,r13
   1ecf7:	call   df30 <g_str_equal@plt+0x5b78>
   1ecfc:	mov    rax,QWORD PTR [rsp+0x8]
   1ed01:	xor    rax,QWORD PTR fs:0x28
   1ed0a:	jne    1ed7d <g_str_equal@plt+0x169c5>
   1ed0c:	add    rsp,0x18
   1ed10:	pop    rbx
   1ed11:	pop    rbp
   1ed12:	pop    r12
   1ed14:	pop    r13
   1ed16:	ret    
   1ed17:	nop    WORD PTR [rax+rax*1+0x0]
   1ed20:	mov    rsi,QWORD PTR [rbx]
   1ed23:	test   rsi,rsi
   1ed26:	je     1ed3a <g_str_equal@plt+0x16982>
   1ed28:	mov    rdx,r12
   1ed2b:	mov    rdi,rbp
   1ed2e:	call   1eb60 <g_str_equal@plt+0x167a8>
   1ed33:	cmp    QWORD PTR [rsp],0x0
   1ed38:	je     1ed70 <g_str_equal@plt+0x169b8>
   1ed3a:	mov    rsi,rbx
   1ed3d:	mov    rdi,rbp
   1ed40:	call   20340 <g_str_equal@plt+0x17f88>
   1ed45:	mov    rsi,QWORD PTR [rsp]
   1ed49:	test   rsi,rsi
   1ed4c:	je     1ecf4 <g_str_equal@plt+0x1693c>
   1ed4e:	mov    rdi,rbp
   1ed51:	call   20ab0 <g_str_equal@plt+0x186f8>
   1ed56:	test   al,al
   1ed58:	je     1ed69 <g_str_equal@plt+0x169b1>
   1ed5a:	mov    rdi,QWORD PTR [rbx]
   1ed5d:	call   14b70 <g_str_equal@plt+0xc7b8>
   1ed62:	mov    QWORD PTR [rbx],0x0
   1ed69:	mov    rsi,QWORD PTR [rsp]
   1ed6d:	jmp    1ecf4 <g_str_equal@plt+0x1693c>
   1ed6f:	nop
   1ed70:	mov    rsi,r12
   1ed73:	mov    rdi,rbp
   1ed76:	call   20290 <g_str_equal@plt+0x17ed8>
   1ed7b:	jmp    1ed3a <g_str_equal@plt+0x16982>
   1ed7d:	call   8050 <__stack_chk_fail@plt>
   1ed82:	nop    DWORD PTR [rax+0x0]
   1ed86:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1ed90:	push   r14
   1ed92:	push   r13
   1ed94:	mov    r14,rcx
   1ed97:	push   r12
   1ed99:	push   rbp
   1ed9a:	mov    ecx,0x10
   1ed9f:	push   rbx
   1eda0:	mov    rbp,rdi
   1eda3:	mov    r13,rdx
   1eda6:	sub    rsp,0x10
   1edaa:	mov    r12,rsp
   1edad:	mov    QWORD PTR [rsp],0x0
   1edb5:	mov    r8,r12
   1edb8:	mov    rax,QWORD PTR fs:0x28
   1edc1:	mov    QWORD PTR [rsp+0x8],rax
   1edc6:	xor    eax,eax
   1edc8:	call   203e0 <g_str_equal@plt+0x18028>
   1edcd:	mov    rsi,QWORD PTR [rsp]
   1edd1:	test   rsi,rsi
   1edd4:	je     1ee00 <g_str_equal@plt+0x16a48>
   1edd6:	mov    rdi,r14
   1edd9:	call   df30 <g_str_equal@plt+0x5b78>
   1edde:	mov    rax,QWORD PTR [rsp+0x8]
   1ede3:	xor    rax,QWORD PTR fs:0x28
   1edec:	jne    1ee94 <g_str_equal@plt+0x16adc>
   1edf2:	add    rsp,0x10
   1edf6:	pop    rbx
   1edf7:	pop    rbp
   1edf8:	pop    r12
   1edfa:	pop    r13
   1edfc:	pop    r14
   1edfe:	ret    
   1edff:	nop
   1ee00:	mov    rbx,QWORD PTR [r13+0x0]
   1ee04:	test   rbx,rbx
   1ee07:	jne    1ee28 <g_str_equal@plt+0x16a70>
   1ee09:	jmp    1ee87 <g_str_equal@plt+0x16acf>
   1ee0b:	nop    DWORD PTR [rax+rax*1+0x0]
   1ee10:	mov    rsi,rbx
   1ee13:	mov    edx,0x10
   1ee18:	mov    rdi,rbp
   1ee1b:	call   20530 <g_str_equal@plt+0x18178>
   1ee20:	test   rax,rax
   1ee23:	mov    rbx,rax
   1ee26:	je     1ee80 <g_str_equal@plt+0x16ac8>
   1ee28:	lea    rdx,[rbx+0x8]
   1ee2c:	xor    esi,esi
   1ee2e:	mov    rcx,r12
   1ee31:	mov    rdi,rbp
   1ee34:	call   1ecb0 <g_str_equal@plt+0x168f8>
   1ee39:	cmp    QWORD PTR [rsp],0x0
   1ee3e:	je     1ee10 <g_str_equal@plt+0x16a58>
   1ee40:	mov    rsi,r13
   1ee43:	mov    rdi,rbp
   1ee46:	call   206d0 <g_str_equal@plt+0x18318>
   1ee4b:	mov    rsi,QWORD PTR [rsp]
   1ee4f:	test   rsi,rsi
   1ee52:	je     1edd6 <g_str_equal@plt+0x16a1e>
   1ee54:	mov    rdi,rbp
   1ee57:	call   20ab0 <g_str_equal@plt+0x186f8>
   1ee5c:	test   al,al
   1ee5e:	je     1ee71 <g_str_equal@plt+0x16ab9>
   1ee60:	mov    rdi,QWORD PTR [r13+0x0]
   1ee64:	call   14d70 <g_str_equal@plt+0xc9b8>
   1ee69:	mov    QWORD PTR [r13+0x0],0x0
   1ee71:	mov    rsi,QWORD PTR [rsp]
   1ee75:	jmp    1edd6 <g_str_equal@plt+0x16a1e>
   1ee7a:	nop    WORD PTR [rax+rax*1+0x0]
   1ee80:	cmp    QWORD PTR [rsp],0x0
   1ee85:	jne    1ee40 <g_str_equal@plt+0x16a88>
   1ee87:	mov    rsi,r12
   1ee8a:	mov    rdi,rbp
   1ee8d:	call   20620 <g_str_equal@plt+0x18268>
   1ee92:	jmp    1ee40 <g_str_equal@plt+0x16a88>
   1ee94:	call   8050 <__stack_chk_fail@plt>
   1ee99:	nop    DWORD PTR [rax+0x0]
   1eea0:	push   r13
   1eea2:	push   r12
   1eea4:	mov    r13,rdx
   1eea7:	push   rbp
   1eea8:	push   rbx
   1eea9:	mov    rdx,rsi
   1eeac:	mov    rbx,rsi
   1eeaf:	lea    rsi,[rip+0xe088]        # 2cf3e <_fini@@Base+0x3cba>
   1eeb6:	mov    rbp,rdi
   1eeb9:	sub    rsp,0x28
   1eebd:	lea    r12,[rsp+0x10]
   1eec2:	mov    QWORD PTR [rsp+0x10],0x0
   1eecb:	mov    rax,QWORD PTR fs:0x28
   1eed4:	mov    QWORD PTR [rsp+0x18],rax
   1eed9:	xor    eax,eax
   1eedb:	mov    rcx,r12
   1eede:	call   20ac0 <g_str_equal@plt+0x18708>
   1eee3:	mov    rsi,QWORD PTR [rsp+0x10]
   1eee8:	test   rsi,rsi
   1eeeb:	je     1ef18 <g_str_equal@plt+0x16b60>
   1eeed:	mov    rdi,r13
   1eef0:	call   df30 <g_str_equal@plt+0x5b78>
   1eef5:	mov    rax,QWORD PTR [rsp+0x18]
   1eefa:	xor    rax,QWORD PTR fs:0x28
   1ef03:	jne    1efed <g_str_equal@plt+0x16c35>
   1ef09:	add    rsp,0x28
   1ef0d:	pop    rbx
   1ef0e:	pop    rbp
   1ef0f:	pop    r12
   1ef11:	pop    r13
   1ef13:	ret    
   1ef14:	nop    DWORD PTR [rax+0x0]
   1ef18:	lea    rsi,[rip+0xe2b9]        # 2d1d8 <_fini@@Base+0x3f54>
   1ef1f:	lea    rdx,[rbx+0x8]
   1ef23:	mov    rcx,r12
   1ef26:	mov    rdi,rbp
   1ef29:	call   21550 <g_str_equal@plt+0x19198>
   1ef2e:	mov    rsi,QWORD PTR [rsp+0x10]
   1ef33:	test   rsi,rsi
   1ef36:	jne    1eeed <g_str_equal@plt+0x16b35>
   1ef38:	lea    rsi,[rip+0xdefc]        # 2ce3b <_fini@@Base+0x3bb7>
   1ef3f:	lea    rdx,[rbx+0x10]
   1ef43:	mov    rcx,r12
   1ef46:	mov    rdi,rbp
   1ef49:	call   20ac0 <g_str_equal@plt+0x18708>
   1ef4e:	mov    rsi,QWORD PTR [rsp+0x10]
   1ef53:	test   rsi,rsi
   1ef56:	jne    1eeed <g_str_equal@plt+0x16b35>
   1ef58:	lea    rdx,[rbx+0x18]
   1ef5c:	lea    rsi,[rip+0xe07e]        # 2cfe1 <_fini@@Base+0x3d5d>
   1ef63:	mov    rdi,rbp
   1ef66:	call   209e0 <g_str_equal@plt+0x18628>
   1ef6b:	test   al,al
   1ef6d:	je     1ef93 <g_str_equal@plt+0x16bdb>
   1ef6f:	lea    rsi,[rip+0xe06b]        # 2cfe1 <_fini@@Base+0x3d5d>
   1ef76:	lea    rdx,[rbx+0x20]
   1ef7a:	mov    rcx,r12
   1ef7d:	mov    rdi,rbp
   1ef80:	call   1e900 <g_str_equal@plt+0x16548>
   1ef85:	mov    rsi,QWORD PTR [rsp+0x10]
   1ef8a:	test   rsi,rsi
   1ef8d:	jne    1eeed <g_str_equal@plt+0x16b35>
   1ef93:	mov    eax,DWORD PTR [rbx+0x28]
   1ef96:	lea    rsi,[rip+0xe0f3]        # 2d090 <_fini@@Base+0x3e0c>
   1ef9d:	lea    rdx,[rsp+0xc]
   1efa2:	lea    rcx,[rip+0x21e407]        # 23d3b0 <_fini@@Base+0x21412c>
   1efa9:	mov    r8,r12
   1efac:	mov    rdi,rbp
   1efaf:	mov    DWORD PTR [rsp+0xc],eax
   1efb3:	call   219e0 <g_str_equal@plt+0x19628>
   1efb8:	mov    rsi,QWORD PTR [rsp+0x10]
   1efbd:	mov    eax,DWORD PTR [rsp+0xc]
   1efc1:	test   rsi,rsi
   1efc4:	mov    DWORD PTR [rbx+0x28],eax
   1efc7:	jne    1eeed <g_str_equal@plt+0x16b35>
   1efcd:	lea    rsi,[rip+0xdf96]        # 2cf6a <_fini@@Base+0x3ce6>
   1efd4:	lea    rdx,[rbx+0x2c]
   1efd8:	mov    rcx,r12
   1efdb:	mov    rdi,rbp
   1efde:	call   24c40 <g_str_equal@plt+0x1c888>
   1efe3:	mov    rsi,QWORD PTR [rsp+0x10]
   1efe8:	jmp    1eeed <g_str_equal@plt+0x16b35>
   1efed:	call   8050 <__stack_chk_fail@plt>
   1eff2:	nop    DWORD PTR [rax+0x0]
   1eff6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1f000:	push   r13
   1f002:	push   r12
   1f004:	mov    r13,rdx
   1f007:	push   rbp
   1f008:	push   rbx
   1f009:	mov    rbp,rdi
   1f00c:	mov    rbx,rsi
   1f00f:	sub    rsp,0x18
   1f013:	mov    r12,rsp
   1f016:	mov    QWORD PTR [rsp],0x0
   1f01e:	mov    rdx,r12
   1f021:	mov    rax,QWORD PTR fs:0x28
   1f02a:	mov    QWORD PTR [rsp+0x8],rax
   1f02f:	xor    eax,eax
   1f031:	call   1eea0 <g_str_equal@plt+0x16ae8>
   1f036:	mov    rsi,QWORD PTR [rsp]
   1f03a:	test   rsi,rsi
   1f03d:	jne    1f070 <g_str_equal@plt+0x16cb8>
   1f03f:	mov    ecx,DWORD PTR [rbx+0x2c]
   1f042:	cmp    ecx,0x1f
   1f045:	ja     1f098 <g_str_equal@plt+0x16ce0>
   1f047:	mov    eax,0x1
   1f04c:	shl    rax,cl
   1f04f:	test   eax,0xffbfffff
   1f054:	jne    1f070 <g_str_equal@plt+0x16cb8>
   1f056:	test   eax,0x400000
   1f05b:	je     1f098 <g_str_equal@plt+0x16ce0>
   1f05d:	lea    rsi,[rbx+0x30]
   1f061:	mov    rdx,r12
   1f064:	mov    rdi,rbp
   1f067:	call   17610 <g_str_equal@plt+0xf258>
   1f06c:	mov    rsi,QWORD PTR [rsp]
   1f070:	mov    rdi,r13
   1f073:	call   df30 <g_str_equal@plt+0x5b78>
   1f078:	mov    rax,QWORD PTR [rsp+0x8]
   1f07d:	xor    rax,QWORD PTR fs:0x28
   1f086:	jne    1f093 <g_str_equal@plt+0x16cdb>
   1f088:	add    rsp,0x18
   1f08c:	pop    rbx
   1f08d:	pop    rbp
   1f08e:	pop    r12
   1f090:	pop    r13
   1f092:	ret    
   1f093:	call   8050 <__stack_chk_fail@plt>
   1f098:	call   79c0 <abort@plt>
   1f09d:	nop    DWORD PTR [rax]
   1f0a0:	push   r13
   1f0a2:	push   r12
   1f0a4:	mov    r13,rcx
   1f0a7:	push   rbp
   1f0a8:	push   rbx
   1f0a9:	mov    ecx,0x38
   1f0ae:	mov    rbp,rdi
   1f0b1:	mov    rbx,rdx
   1f0b4:	sub    rsp,0x18
   1f0b8:	mov    r12,rsp
   1f0bb:	mov    QWORD PTR [rsp],0x0
   1f0c3:	mov    r8,r12
   1f0c6:	mov    rax,QWORD PTR fs:0x28
   1f0cf:	mov    QWORD PTR [rsp+0x8],rax
   1f0d4:	xor    eax,eax
   1f0d6:	call   200e0 <g_str_equal@plt+0x17d28>
   1f0db:	mov    rsi,QWORD PTR [rsp]
   1f0df:	test   rsi,rsi
   1f0e2:	je     1f110 <g_str_equal@plt+0x16d58>
   1f0e4:	mov    rdi,r13
   1f0e7:	call   df30 <g_str_equal@plt+0x5b78>
   1f0ec:	mov    rax,QWORD PTR [rsp+0x8]
   1f0f1:	xor    rax,QWORD PTR fs:0x28
   1f0fa:	jne    1f16d <g_str_equal@plt+0x16db5>
   1f0fc:	add    rsp,0x18
   1f100:	pop    rbx
   1f101:	pop    rbp
   1f102:	pop    r12
   1f104:	pop    r13
   1f106:	ret    
   1f107:	nop    WORD PTR [rax+rax*1+0x0]
   1f110:	mov    rsi,QWORD PTR [rbx]
   1f113:	test   rsi,rsi
   1f116:	je     1f12a <g_str_equal@plt+0x16d72>
   1f118:	mov    rdx,r12
   1f11b:	mov    rdi,rbp
   1f11e:	call   1f000 <g_str_equal@plt+0x16c48>
   1f123:	cmp    QWORD PTR [rsp],0x0
   1f128:	je     1f160 <g_str_equal@plt+0x16da8>
   1f12a:	mov    rsi,rbx
   1f12d:	mov    rdi,rbp
   1f130:	call   20340 <g_str_equal@plt+0x17f88>
   1f135:	mov    rsi,QWORD PTR [rsp]
   1f139:	test   rsi,rsi
   1f13c:	je     1f0e4 <g_str_equal@plt+0x16d2c>
   1f13e:	mov    rdi,rbp
   1f141:	call   20ab0 <g_str_equal@plt+0x186f8>
   1f146:	test   al,al
   1f148:	je     1f159 <g_str_equal@plt+0x16da1>
   1f14a:	mov    rdi,QWORD PTR [rbx]
   1f14d:	call   14db0 <g_str_equal@plt+0xc9f8>
   1f152:	mov    QWORD PTR [rbx],0x0
   1f159:	mov    rsi,QWORD PTR [rsp]
   1f15d:	jmp    1f0e4 <g_str_equal@plt+0x16d2c>
   1f15f:	nop
   1f160:	mov    rsi,r12
   1f163:	mov    rdi,rbp
   1f166:	call   20290 <g_str_equal@plt+0x17ed8>
   1f16b:	jmp    1f12a <g_str_equal@plt+0x16d72>
   1f16d:	call   8050 <__stack_chk_fail@plt>
   1f172:	nop    DWORD PTR [rax+0x0]
   1f176:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1f180:	push   r14
   1f182:	push   r13
   1f184:	mov    r14,rcx
   1f187:	push   r12
   1f189:	push   rbp
   1f18a:	mov    ecx,0x10
   1f18f:	push   rbx
   1f190:	mov    rbp,rdi
   1f193:	mov    r13,rdx
   1f196:	sub    rsp,0x10
   1f19a:	mov    r12,rsp
   1f19d:	mov    QWORD PTR [rsp],0x0
   1f1a5:	mov    r8,r12
   1f1a8:	mov    rax,QWORD PTR fs:0x28
   1f1b1:	mov    QWORD PTR [rsp+0x8],rax
   1f1b6:	xor    eax,eax
   1f1b8:	call   203e0 <g_str_equal@plt+0x18028>
   1f1bd:	mov    rsi,QWORD PTR [rsp]
   1f1c1:	test   rsi,rsi
   1f1c4:	je     1f1f0 <g_str_equal@plt+0x16e38>
   1f1c6:	mov    rdi,r14
   1f1c9:	call   df30 <g_str_equal@plt+0x5b78>
   1f1ce:	mov    rax,QWORD PTR [rsp+0x8]
   1f1d3:	xor    rax,QWORD PTR fs:0x28
   1f1dc:	jne    1f284 <g_str_equal@plt+0x16ecc>
   1f1e2:	add    rsp,0x10
   1f1e6:	pop    rbx
   1f1e7:	pop    rbp
   1f1e8:	pop    r12
   1f1ea:	pop    r13
   1f1ec:	pop    r14
   1f1ee:	ret    
   1f1ef:	nop
   1f1f0:	mov    rbx,QWORD PTR [r13+0x0]
   1f1f4:	test   rbx,rbx
   1f1f7:	jne    1f218 <g_str_equal@plt+0x16e60>
   1f1f9:	jmp    1f277 <g_str_equal@plt+0x16ebf>
   1f1fb:	nop    DWORD PTR [rax+rax*1+0x0]
   1f200:	mov    rsi,rbx
   1f203:	mov    edx,0x10
   1f208:	mov    rdi,rbp
   1f20b:	call   20530 <g_str_equal@plt+0x18178>
   1f210:	test   rax,rax
   1f213:	mov    rbx,rax
   1f216:	je     1f270 <g_str_equal@plt+0x16eb8>
   1f218:	lea    rdx,[rbx+0x8]
   1f21c:	xor    esi,esi
   1f21e:	mov    rcx,r12
   1f221:	mov    rdi,rbp
   1f224:	call   1f0a0 <g_str_equal@plt+0x16ce8>
   1f229:	cmp    QWORD PTR [rsp],0x0
   1f22e:	je     1f200 <g_str_equal@plt+0x16e48>
   1f230:	mov    rsi,r13
   1f233:	mov    rdi,rbp
   1f236:	call   206d0 <g_str_equal@plt+0x18318>
   1f23b:	mov    rsi,QWORD PTR [rsp]
   1f23f:	test   rsi,rsi
   1f242:	je     1f1c6 <g_str_equal@plt+0x16e0e>
   1f244:	mov    rdi,rbp
   1f247:	call   20ab0 <g_str_equal@plt+0x186f8>
   1f24c:	test   al,al
   1f24e:	je     1f261 <g_str_equal@plt+0x16ea9>
   1f250:	mov    rdi,QWORD PTR [r13+0x0]
   1f254:	call   14df0 <g_str_equal@plt+0xca38>
   1f259:	mov    QWORD PTR [r13+0x0],0x0
   1f261:	mov    rsi,QWORD PTR [rsp]
   1f265:	jmp    1f1c6 <g_str_equal@plt+0x16e0e>
   1f26a:	nop    WORD PTR [rax+rax*1+0x0]
   1f270:	cmp    QWORD PTR [rsp],0x0
   1f275:	jne    1f230 <g_str_equal@plt+0x16e78>
   1f277:	mov    rsi,r12
   1f27a:	mov    rdi,rbp
   1f27d:	call   20620 <g_str_equal@plt+0x18268>
   1f282:	jmp    1f230 <g_str_equal@plt+0x16e78>
   1f284:	call   8050 <__stack_chk_fail@plt>
   1f289:	nop    DWORD PTR [rax+0x0]
   1f290:	push   r13
   1f292:	push   r12
   1f294:	mov    r13,rdx
   1f297:	push   rbp
   1f298:	push   rbx
   1f299:	mov    rdx,rsi
   1f29c:	mov    rbx,rsi
   1f29f:	lea    rsi,[rip+0xdd36]        # 2cfdc <_fini@@Base+0x3d58>
   1f2a6:	mov    rbp,rdi
   1f2a9:	sub    rsp,0x18
   1f2ad:	mov    r12,rsp
   1f2b0:	mov    QWORD PTR [rsp],0x0
   1f2b8:	mov    rcx,r12
   1f2bb:	mov    rax,QWORD PTR fs:0x28
   1f2c4:	mov    QWORD PTR [rsp+0x8],rax
   1f2c9:	xor    eax,eax
   1f2cb:	call   21550 <g_str_equal@plt+0x19198>
   1f2d0:	mov    rsi,QWORD PTR [rsp]
   1f2d4:	test   rsi,rsi
   1f2d7:	je     1f300 <g_str_equal@plt+0x16f48>
   1f2d9:	mov    rdi,r13
   1f2dc:	call   df30 <g_str_equal@plt+0x5b78>
   1f2e1:	mov    rax,QWORD PTR [rsp+0x8]
   1f2e6:	xor    rax,QWORD PTR fs:0x28
   1f2ef:	jne    1f374 <g_str_equal@plt+0x16fbc>
   1f2f5:	add    rsp,0x18
   1f2f9:	pop    rbx
   1f2fa:	pop    rbp
   1f2fb:	pop    r12
   1f2fd:	pop    r13
   1f2ff:	ret    
   1f300:	lea    rsi,[rip+0xdeda]        # 2d1e1 <_fini@@Base+0x3f5d>
   1f307:	lea    rdx,[rbx+0x8]
   1f30b:	mov    rcx,r12
   1f30e:	mov    rdi,rbp
   1f311:	call   20ac0 <g_str_equal@plt+0x18708>
   1f316:	mov    rsi,QWORD PTR [rsp]
   1f31a:	test   rsi,rsi
   1f31d:	jne    1f2d9 <g_str_equal@plt+0x16f21>
   1f31f:	lea    rsi,[rip+0xdcbb]        # 2cfe1 <_fini@@Base+0x3d5d>
   1f326:	lea    rdx,[rbx+0x10]
   1f32a:	mov    rcx,r12
   1f32d:	mov    rdi,rbp
   1f330:	call   1e900 <g_str_equal@plt+0x16548>
   1f335:	mov    rsi,QWORD PTR [rsp]
   1f339:	test   rsi,rsi
   1f33c:	jne    1f2d9 <g_str_equal@plt+0x16f21>
   1f33e:	lea    rdx,[rbx+0x18]
   1f342:	lea    rsi,[rip+0xde8f]        # 2d1d8 <_fini@@Base+0x3f54>
   1f349:	mov    rdi,rbp
   1f34c:	call   209e0 <g_str_equal@plt+0x18628>
   1f351:	test   al,al
   1f353:	je     1f36b <g_str_equal@plt+0x16fb3>
   1f355:	lea    rdx,[rbx+0x20]
   1f359:	lea    rsi,[rip+0xde78]        # 2d1d8 <_fini@@Base+0x3f54>
   1f360:	mov    rcx,r12
   1f363:	mov    rdi,rbp
   1f366:	call   21550 <g_str_equal@plt+0x19198>
   1f36b:	mov    rsi,QWORD PTR [rsp]
   1f36f:	jmp    1f2d9 <g_str_equal@plt+0x16f21>
   1f374:	call   8050 <__stack_chk_fail@plt>
   1f379:	nop    DWORD PTR [rax+0x0]
   1f380:	push   r13
   1f382:	push   r12
   1f384:	mov    r13,rcx
   1f387:	push   rbp
   1f388:	push   rbx
   1f389:	mov    ecx,0x28
   1f38e:	mov    rbp,rdi
   1f391:	mov    rbx,rdx
   1f394:	sub    rsp,0x18
   1f398:	mov    r12,rsp
   1f39b:	mov    QWORD PTR [rsp],0x0
   1f3a3:	mov    r8,r12
   1f3a6:	mov    rax,QWORD PTR fs:0x28
   1f3af:	mov    QWORD PTR [rsp+0x8],rax
   1f3b4:	xor    eax,eax
   1f3b6:	call   200e0 <g_str_equal@plt+0x17d28>
   1f3bb:	mov    rsi,QWORD PTR [rsp]
   1f3bf:	test   rsi,rsi
   1f3c2:	je     1f3f0 <g_str_equal@plt+0x17038>
   1f3c4:	mov    rdi,r13
   1f3c7:	call   df30 <g_str_equal@plt+0x5b78>
   1f3cc:	mov    rax,QWORD PTR [rsp+0x8]
   1f3d1:	xor    rax,QWORD PTR fs:0x28
   1f3da:	jne    1f44d <g_str_equal@plt+0x17095>
   1f3dc:	add    rsp,0x18
   1f3e0:	pop    rbx
   1f3e1:	pop    rbp
   1f3e2:	pop    r12
   1f3e4:	pop    r13
   1f3e6:	ret    
   1f3e7:	nop    WORD PTR [rax+rax*1+0x0]
   1f3f0:	mov    rsi,QWORD PTR [rbx]
   1f3f3:	test   rsi,rsi
   1f3f6:	je     1f40a <g_str_equal@plt+0x17052>
   1f3f8:	mov    rdx,r12
   1f3fb:	mov    rdi,rbp
   1f3fe:	call   1f290 <g_str_equal@plt+0x16ed8>
   1f403:	cmp    QWORD PTR [rsp],0x0
   1f408:	je     1f440 <g_str_equal@plt+0x17088>
   1f40a:	mov    rsi,rbx
   1f40d:	mov    rdi,rbp
   1f410:	call   20340 <g_str_equal@plt+0x17f88>
   1f415:	mov    rsi,QWORD PTR [rsp]
   1f419:	test   rsi,rsi
   1f41c:	je     1f3c4 <g_str_equal@plt+0x1700c>
   1f41e:	mov    rdi,rbp
   1f421:	call   20ab0 <g_str_equal@plt+0x186f8>
   1f426:	test   al,al
   1f428:	je     1f439 <g_str_equal@plt+0x17081>
   1f42a:	mov    rdi,QWORD PTR [rbx]
   1f42d:	call   15cb0 <g_str_equal@plt+0xd8f8>
   1f432:	mov    QWORD PTR [rbx],0x0
   1f439:	mov    rsi,QWORD PTR [rsp]
   1f43d:	jmp    1f3c4 <g_str_equal@plt+0x1700c>
   1f43f:	nop
   1f440:	mov    rsi,r12
   1f443:	mov    rdi,rbp
   1f446:	call   20290 <g_str_equal@plt+0x17ed8>
   1f44b:	jmp    1f40a <g_str_equal@plt+0x17052>
   1f44d:	call   8050 <__stack_chk_fail@plt>
   1f452:	nop    DWORD PTR [rax+0x0]
   1f456:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1f460:	push   r14
   1f462:	push   r13
   1f464:	mov    r14,rcx
   1f467:	push   r12
   1f469:	push   rbp
   1f46a:	mov    ecx,0x10
   1f46f:	push   rbx
   1f470:	mov    rbp,rdi
   1f473:	mov    r13,rdx
   1f476:	sub    rsp,0x10
   1f47a:	mov    r12,rsp
   1f47d:	mov    QWORD PTR [rsp],0x0
   1f485:	mov    r8,r12
   1f488:	mov    rax,QWORD PTR fs:0x28
   1f491:	mov    QWORD PTR [rsp+0x8],rax
   1f496:	xor    eax,eax
   1f498:	call   203e0 <g_str_equal@plt+0x18028>
   1f49d:	mov    rsi,QWORD PTR [rsp]
   1f4a1:	test   rsi,rsi
   1f4a4:	je     1f4d0 <g_str_equal@plt+0x17118>
   1f4a6:	mov    rdi,r14
   1f4a9:	call   df30 <g_str_equal@plt+0x5b78>
   1f4ae:	mov    rax,QWORD PTR [rsp+0x8]
   1f4b3:	xor    rax,QWORD PTR fs:0x28
   1f4bc:	jne    1f564 <g_str_equal@plt+0x171ac>
   1f4c2:	add    rsp,0x10
   1f4c6:	pop    rbx
   1f4c7:	pop    rbp
   1f4c8:	pop    r12
   1f4ca:	pop    r13
   1f4cc:	pop    r14
   1f4ce:	ret    
   1f4cf:	nop
   1f4d0:	mov    rbx,QWORD PTR [r13+0x0]
   1f4d4:	test   rbx,rbx
   1f4d7:	jne    1f4f8 <g_str_equal@plt+0x17140>
   1f4d9:	jmp    1f557 <g_str_equal@plt+0x1719f>
   1f4db:	nop    DWORD PTR [rax+rax*1+0x0]
   1f4e0:	mov    rsi,rbx
   1f4e3:	mov    edx,0x10
   1f4e8:	mov    rdi,rbp
   1f4eb:	call   20530 <g_str_equal@plt+0x18178>
   1f4f0:	test   rax,rax
   1f4f3:	mov    rbx,rax
   1f4f6:	je     1f550 <g_str_equal@plt+0x17198>
   1f4f8:	lea    rdx,[rbx+0x8]
   1f4fc:	xor    esi,esi
   1f4fe:	mov    rcx,r12
   1f501:	mov    rdi,rbp
   1f504:	call   1f380 <g_str_equal@plt+0x16fc8>
   1f509:	cmp    QWORD PTR [rsp],0x0
   1f50e:	je     1f4e0 <g_str_equal@plt+0x17128>
   1f510:	mov    rsi,r13
   1f513:	mov    rdi,rbp
   1f516:	call   206d0 <g_str_equal@plt+0x18318>
   1f51b:	mov    rsi,QWORD PTR [rsp]
   1f51f:	test   rsi,rsi
   1f522:	je     1f4a6 <g_str_equal@plt+0x170ee>
   1f524:	mov    rdi,rbp
   1f527:	call   20ab0 <g_str_equal@plt+0x186f8>
   1f52c:	test   al,al
   1f52e:	je     1f541 <g_str_equal@plt+0x17189>
   1f530:	mov    rdi,QWORD PTR [r13+0x0]
   1f534:	call   15cf0 <g_str_equal@plt+0xd938>
   1f539:	mov    QWORD PTR [r13+0x0],0x0
   1f541:	mov    rsi,QWORD PTR [rsp]
   1f545:	jmp    1f4a6 <g_str_equal@plt+0x170ee>
   1f54a:	nop    WORD PTR [rax+rax*1+0x0]
   1f550:	cmp    QWORD PTR [rsp],0x0
   1f555:	jne    1f510 <g_str_equal@plt+0x17158>
   1f557:	mov    rsi,r12
   1f55a:	mov    rdi,rbp
   1f55d:	call   20620 <g_str_equal@plt+0x18268>
   1f562:	jmp    1f510 <g_str_equal@plt+0x17158>
   1f564:	call   8050 <__stack_chk_fail@plt>
   1f569:	nop    DWORD PTR [rax+0x0]
   1f570:	push   rbx
   1f571:	mov    rbx,rdx
   1f574:	mov    rdx,rsi
   1f577:	lea    rsi,[rip+0xdc6f]        # 2d1ed <_fini@@Base+0x3f69>
   1f57e:	sub    rsp,0x10
   1f582:	mov    rcx,rsp
   1f585:	mov    QWORD PTR [rsp],0x0
   1f58d:	mov    rax,QWORD PTR fs:0x28
   1f596:	mov    QWORD PTR [rsp+0x8],rax
   1f59b:	xor    eax,eax
   1f59d:	call   21550 <g_str_equal@plt+0x19198>
   1f5a2:	mov    rsi,QWORD PTR [rsp]
   1f5a6:	mov    rdi,rbx
   1f5a9:	call   df30 <g_str_equal@plt+0x5b78>
   1f5ae:	mov    rax,QWORD PTR [rsp+0x8]
   1f5b3:	xor    rax,QWORD PTR fs:0x28
   1f5bc:	jne    1f5c4 <g_str_equal@plt+0x1720c>
   1f5be:	add    rsp,0x10
   1f5c2:	pop    rbx
   1f5c3:	ret    
   1f5c4:	call   8050 <__stack_chk_fail@plt>
   1f5c9:	nop    DWORD PTR [rax+0x0]
   1f5d0:	push   r13
   1f5d2:	push   r12
   1f5d4:	mov    r13,rcx
   1f5d7:	push   rbp
   1f5d8:	push   rbx
   1f5d9:	mov    ecx,0x8
   1f5de:	mov    rbp,rdi
   1f5e1:	mov    rbx,rdx
   1f5e4:	sub    rsp,0x18
   1f5e8:	mov    r12,rsp
   1f5eb:	mov    QWORD PTR [rsp],0x0
   1f5f3:	mov    r8,r12
   1f5f6:	mov    rax,QWORD PTR fs:0x28
   1f5ff:	mov    QWORD PTR [rsp+0x8],rax
   1f604:	xor    eax,eax
   1f606:	call   200e0 <g_str_equal@plt+0x17d28>
   1f60b:	mov    rsi,QWORD PTR [rsp]
   1f60f:	test   rsi,rsi
   1f612:	je     1f640 <g_str_equal@plt+0x17288>
   1f614:	mov    rdi,r13
   1f617:	call   df30 <g_str_equal@plt+0x5b78>
   1f61c:	mov    rax,QWORD PTR [rsp+0x8]
   1f621:	xor    rax,QWORD PTR fs:0x28
   1f62a:	jne    1f69d <g_str_equal@plt+0x172e5>
   1f62c:	add    rsp,0x18
   1f630:	pop    rbx
   1f631:	pop    rbp
   1f632:	pop    r12
   1f634:	pop    r13
   1f636:	ret    
   1f637:	nop    WORD PTR [rax+rax*1+0x0]
   1f640:	mov    rsi,QWORD PTR [rbx]
   1f643:	test   rsi,rsi
   1f646:	je     1f65a <g_str_equal@plt+0x172a2>
   1f648:	mov    rdx,r12
   1f64b:	mov    rdi,rbp
   1f64e:	call   1f570 <g_str_equal@plt+0x171b8>
   1f653:	cmp    QWORD PTR [rsp],0x0
   1f658:	je     1f690 <g_str_equal@plt+0x172d8>
   1f65a:	mov    rsi,rbx
   1f65d:	mov    rdi,rbp
   1f660:	call   20340 <g_str_equal@plt+0x17f88>
   1f665:	mov    rsi,QWORD PTR [rsp]
   1f669:	test   rsi,rsi
   1f66c:	je     1f614 <g_str_equal@plt+0x1725c>
   1f66e:	mov    rdi,rbp
   1f671:	call   20ab0 <g_str_equal@plt+0x186f8>
   1f676:	test   al,al
   1f678:	je     1f689 <g_str_equal@plt+0x172d1>
   1f67a:	mov    rdi,QWORD PTR [rbx]
   1f67d:	call   15d30 <g_str_equal@plt+0xd978>
   1f682:	mov    QWORD PTR [rbx],0x0
   1f689:	mov    rsi,QWORD PTR [rsp]
   1f68d:	jmp    1f614 <g_str_equal@plt+0x1725c>
   1f68f:	nop
   1f690:	mov    rsi,r12
   1f693:	mov    rdi,rbp
   1f696:	call   20290 <g_str_equal@plt+0x17ed8>
   1f69b:	jmp    1f65a <g_str_equal@plt+0x172a2>
   1f69d:	call   8050 <__stack_chk_fail@plt>
   1f6a2:	nop    DWORD PTR [rax+0x0]
   1f6a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1f6b0:	push   rbx
   1f6b1:	mov    r8,rcx
   1f6b4:	mov    rbx,rdx
   1f6b7:	lea    rcx,[rip+0x21da02]        # 23d0c0 <_fini@@Base+0x213e3c>
   1f6be:	sub    rsp,0x10
   1f6c2:	mov    rax,QWORD PTR fs:0x28
   1f6cb:	mov    QWORD PTR [rsp+0x8],rax
   1f6d0:	xor    eax,eax
   1f6d2:	mov    eax,DWORD PTR [rdx]
   1f6d4:	lea    rdx,[rsp+0x4]
   1f6d9:	mov    DWORD PTR [rsp+0x4],eax
   1f6dd:	call   219e0 <g_str_equal@plt+0x19628>
   1f6e2:	mov    eax,DWORD PTR [rsp+0x4]
   1f6e6:	mov    DWORD PTR [rbx],eax
   1f6e8:	mov    rax,QWORD PTR [rsp+0x8]
   1f6ed:	xor    rax,QWORD PTR fs:0x28
   1f6f6:	jne    1f6fe <g_str_equal@plt+0x17346>
   1f6f8:	add    rsp,0x10
   1f6fc:	pop    rbx
   1f6fd:	ret    
   1f6fe:	call   8050 <__stack_chk_fail@plt>
   1f703:	nop    DWORD PTR [rax]
   1f706:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1f710:	push   r13
   1f712:	push   r12
   1f714:	mov    r13,rdx
   1f717:	push   rbp
   1f718:	push   rbx
   1f719:	mov    rdx,rsi
   1f71c:	mov    rbx,rsi
   1f71f:	lea    rsi,[rip+0xa453]        # 29b79 <_fini@@Base+0x8f5>
   1f726:	mov    rbp,rdi
   1f729:	sub    rsp,0x28
   1f72d:	lea    r12,[rsp+0x10]
   1f732:	mov    QWORD PTR [rsp+0x10],0x0
   1f73b:	mov    rax,QWORD PTR fs:0x28
   1f744:	mov    QWORD PTR [rsp+0x18],rax
   1f749:	xor    eax,eax
   1f74b:	mov    rcx,r12
   1f74e:	call   21460 <g_str_equal@plt+0x190a8>
   1f753:	mov    rsi,QWORD PTR [rsp+0x10]
   1f758:	test   rsi,rsi
   1f75b:	je     1f788 <g_str_equal@plt+0x173d0>
   1f75d:	mov    rdi,r13
   1f760:	call   df30 <g_str_equal@plt+0x5b78>
   1f765:	mov    rax,QWORD PTR [rsp+0x18]
   1f76a:	xor    rax,QWORD PTR fs:0x28
   1f773:	jne    1f86a <g_str_equal@plt+0x174b2>
   1f779:	add    rsp,0x28
   1f77d:	pop    rbx
   1f77e:	pop    rbp
   1f77f:	pop    r12
   1f781:	pop    r13
   1f783:	ret    
   1f784:	nop    DWORD PTR [rax+0x0]
   1f788:	lea    rsi,[rip+0xda63]        # 2d1f2 <_fini@@Base+0x3f6e>
   1f78f:	lea    rdx,[rbx+0x1]
   1f793:	mov    rcx,r12
   1f796:	mov    rdi,rbp
   1f799:	call   20bb0 <g_str_equal@plt+0x187f8>
   1f79e:	mov    rsi,QWORD PTR [rsp+0x10]
   1f7a3:	test   rsi,rsi
   1f7a6:	jne    1f75d <g_str_equal@plt+0x173a5>
   1f7a8:	lea    rsi,[rip+0xda4d]        # 2d1fc <_fini@@Base+0x3f78>
   1f7af:	lea    rdx,[rbx+0x2]
   1f7b3:	mov    rcx,r12
   1f7b6:	mov    rdi,rbp
   1f7b9:	call   20bb0 <g_str_equal@plt+0x187f8>
   1f7be:	mov    rsi,QWORD PTR [rsp+0x10]
   1f7c3:	test   rsi,rsi
   1f7c6:	jne    1f75d <g_str_equal@plt+0x173a5>
   1f7c8:	lea    rsi,[rip+0xda37]        # 2d206 <_fini@@Base+0x3f82>
   1f7cf:	lea    rdx,[rbx+0x3]
   1f7d3:	mov    rcx,r12
   1f7d6:	mov    rdi,rbp
   1f7d9:	call   20bb0 <g_str_equal@plt+0x187f8>
   1f7de:	mov    rsi,QWORD PTR [rsp+0x10]
   1f7e3:	test   rsi,rsi
   1f7e6:	jne    1f75d <g_str_equal@plt+0x173a5>
   1f7ec:	lea    rsi,[rip+0xd95f]        # 2d152 <_fini@@Base+0x3ece>
   1f7f3:	lea    rdx,[rbx+0x4]
   1f7f7:	mov    rcx,r12
   1f7fa:	mov    rdi,rbp
   1f7fd:	call   20d90 <g_str_equal@plt+0x189d8>
   1f802:	mov    rsi,QWORD PTR [rsp+0x10]
   1f807:	test   rsi,rsi
   1f80a:	jne    1f75d <g_str_equal@plt+0x173a5>
   1f810:	mov    eax,DWORD PTR [rbx+0x8]
   1f813:	lea    rsi,[rip+0xd61b]        # 2ce35 <_fini@@Base+0x3bb1>
   1f81a:	lea    rdx,[rsp+0xc]
   1f81f:	lea    rcx,[rip+0x21d89a]        # 23d0c0 <_fini@@Base+0x213e3c>
   1f826:	mov    r8,r12
   1f829:	mov    rdi,rbp
   1f82c:	mov    DWORD PTR [rsp+0xc],eax
   1f830:	call   219e0 <g_str_equal@plt+0x19628>
   1f835:	mov    rsi,QWORD PTR [rsp+0x10]
   1f83a:	mov    eax,DWORD PTR [rsp+0xc]
   1f83e:	test   rsi,rsi
   1f841:	mov    DWORD PTR [rbx+0x8],eax
   1f844:	jne    1f75d <g_str_equal@plt+0x173a5>
   1f84a:	lea    rsi,[rip+0xd9be]        # 2d20f <_fini@@Base+0x3f8b>
   1f851:	lea    rdx,[rbx+0xc]
   1f855:	mov    rcx,r12
   1f858:	mov    rdi,rbp
   1f85b:	call   20d90 <g_str_equal@plt+0x189d8>
   1f860:	mov    rsi,QWORD PTR [rsp+0x10]
   1f865:	jmp    1f75d <g_str_equal@plt+0x173a5>
   1f86a:	call   8050 <__stack_chk_fail@plt>
   1f86f:	nop
   1f870:	push   r13
   1f872:	push   r12
   1f874:	mov    r13,rcx
   1f877:	push   rbp
   1f878:	push   rbx
   1f879:	mov    ecx,0x10
   1f87e:	mov    rbp,rdi
   1f881:	mov    rbx,rdx
   1f884:	sub    rsp,0x18
   1f888:	mov    r12,rsp
   1f88b:	mov    QWORD PTR [rsp],0x0
   1f893:	mov    r8,r12
   1f896:	mov    rax,QWORD PTR fs:0x28
   1f89f:	mov    QWORD PTR [rsp+0x8],rax
   1f8a4:	xor    eax,eax
   1f8a6:	call   200e0 <g_str_equal@plt+0x17d28>
   1f8ab:	mov    rsi,QWORD PTR [rsp]
   1f8af:	test   rsi,rsi
   1f8b2:	je     1f8e0 <g_str_equal@plt+0x17528>
   1f8b4:	mov    rdi,r13
   1f8b7:	call   df30 <g_str_equal@plt+0x5b78>
   1f8bc:	mov    rax,QWORD PTR [rsp+0x8]
   1f8c1:	xor    rax,QWORD PTR fs:0x28
   1f8ca:	jne    1f93d <g_str_equal@plt+0x17585>
   1f8cc:	add    rsp,0x18
   1f8d0:	pop    rbx
   1f8d1:	pop    rbp
   1f8d2:	pop    r12
   1f8d4:	pop    r13
   1f8d6:	ret    
   1f8d7:	nop    WORD PTR [rax+rax*1+0x0]
   1f8e0:	mov    rsi,QWORD PTR [rbx]
   1f8e3:	test   rsi,rsi
   1f8e6:	je     1f8fa <g_str_equal@plt+0x17542>
   1f8e8:	mov    rdx,r12
   1f8eb:	mov    rdi,rbp
   1f8ee:	call   1f710 <g_str_equal@plt+0x17358>
   1f8f3:	cmp    QWORD PTR [rsp],0x0
   1f8f8:	je     1f930 <g_str_equal@plt+0x17578>
   1f8fa:	mov    rsi,rbx
   1f8fd:	mov    rdi,rbp
   1f900:	call   20340 <g_str_equal@plt+0x17f88>
   1f905:	mov    rsi,QWORD PTR [rsp]
   1f909:	test   rsi,rsi
   1f90c:	je     1f8b4 <g_str_equal@plt+0x174fc>
   1f90e:	mov    rdi,rbp
   1f911:	call   20ab0 <g_str_equal@plt+0x186f8>
   1f916:	test   al,al
   1f918:	je     1f929 <g_str_equal@plt+0x17571>
   1f91a:	mov    rdi,QWORD PTR [rbx]
   1f91d:	call   15d70 <g_str_equal@plt+0xd9b8>
   1f922:	mov    QWORD PTR [rbx],0x0
   1f929:	mov    rsi,QWORD PTR [rsp]
   1f92d:	jmp    1f8b4 <g_str_equal@plt+0x174fc>
   1f92f:	nop
   1f930:	mov    rsi,r12
   1f933:	mov    rdi,rbp
   1f936:	call   20290 <g_str_equal@plt+0x17ed8>
   1f93b:	jmp    1f8fa <g_str_equal@plt+0x17542>
   1f93d:	call   8050 <__stack_chk_fail@plt>
   1f942:	nop    DWORD PTR [rax+0x0]
   1f946:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1f950:	push   rbx
   1f951:	mov    rbx,rdx
   1f954:	mov    rdx,rsi
   1f957:	lea    rsi,[rip+0xd778]        # 2d0d6 <_fini@@Base+0x3e52>
   1f95e:	sub    rsp,0x10
   1f962:	mov    rcx,rsp
   1f965:	mov    QWORD PTR [rsp],0x0
   1f96d:	mov    rax,QWORD PTR fs:0x28
   1f976:	mov    QWORD PTR [rsp+0x8],rax
   1f97b:	xor    eax,eax
   1f97d:	call   21550 <g_str_equal@plt+0x19198>
   1f982:	mov    rsi,QWORD PTR [rsp]
   1f986:	mov    rdi,rbx
   1f989:	call   df30 <g_str_equal@plt+0x5b78>
   1f98e:	mov    rax,QWORD PTR [rsp+0x8]
   1f993:	xor    rax,QWORD PTR fs:0x28
   1f99c:	jne    1f9a4 <g_str_equal@plt+0x175ec>
   1f99e:	add    rsp,0x10
   1f9a2:	pop    rbx
   1f9a3:	ret    
   1f9a4:	call   8050 <__stack_chk_fail@plt>
   1f9a9:	nop    DWORD PTR [rax+0x0]
   1f9b0:	push   r13
   1f9b2:	push   r12
   1f9b4:	mov    r13,rcx
   1f9b7:	push   rbp
   1f9b8:	push   rbx
   1f9b9:	mov    ecx,0x8
   1f9be:	mov    rbp,rdi
   1f9c1:	mov    rbx,rdx
   1f9c4:	sub    rsp,0x18
   1f9c8:	mov    r12,rsp
   1f9cb:	mov    QWORD PTR [rsp],0x0
   1f9d3:	mov    r8,r12
   1f9d6:	mov    rax,QWORD PTR fs:0x28
   1f9df:	mov    QWORD PTR [rsp+0x8],rax
   1f9e4:	xor    eax,eax
   1f9e6:	call   200e0 <g_str_equal@plt+0x17d28>
   1f9eb:	mov    rsi,QWORD PTR [rsp]
   1f9ef:	test   rsi,rsi
   1f9f2:	je     1fa20 <g_str_equal@plt+0x17668>
   1f9f4:	mov    rdi,r13
   1f9f7:	call   df30 <g_str_equal@plt+0x5b78>
   1f9fc:	mov    rax,QWORD PTR [rsp+0x8]
   1fa01:	xor    rax,QWORD PTR fs:0x28
   1fa0a:	jne    1fa7d <g_str_equal@plt+0x176c5>
   1fa0c:	add    rsp,0x18
   1fa10:	pop    rbx
   1fa11:	pop    rbp
   1fa12:	pop    r12
   1fa14:	pop    r13
   1fa16:	ret    
   1fa17:	nop    WORD PTR [rax+rax*1+0x0]
   1fa20:	mov    rsi,QWORD PTR [rbx]
   1fa23:	test   rsi,rsi
   1fa26:	je     1fa3a <g_str_equal@plt+0x17682>
   1fa28:	mov    rdx,r12
   1fa2b:	mov    rdi,rbp
   1fa2e:	call   1f950 <g_str_equal@plt+0x17598>
   1fa33:	cmp    QWORD PTR [rsp],0x0
   1fa38:	je     1fa70 <g_str_equal@plt+0x176b8>
   1fa3a:	mov    rsi,rbx
   1fa3d:	mov    rdi,rbp
   1fa40:	call   20340 <g_str_equal@plt+0x17f88>
   1fa45:	mov    rsi,QWORD PTR [rsp]
   1fa49:	test   rsi,rsi
   1fa4c:	je     1f9f4 <g_str_equal@plt+0x1763c>
   1fa4e:	mov    rdi,rbp
   1fa51:	call   20ab0 <g_str_equal@plt+0x186f8>
   1fa56:	test   al,al
   1fa58:	je     1fa69 <g_str_equal@plt+0x176b1>
   1fa5a:	mov    rdi,QWORD PTR [rbx]
   1fa5d:	call   15db0 <g_str_equal@plt+0xd9f8>
   1fa62:	mov    QWORD PTR [rbx],0x0
   1fa69:	mov    rsi,QWORD PTR [rsp]
   1fa6d:	jmp    1f9f4 <g_str_equal@plt+0x1763c>
   1fa6f:	nop
   1fa70:	mov    rsi,r12
   1fa73:	mov    rdi,rbp
   1fa76:	call   20290 <g_str_equal@plt+0x17ed8>
   1fa7b:	jmp    1fa3a <g_str_equal@plt+0x17682>
   1fa7d:	call   8050 <__stack_chk_fail@plt>
   1fa82:	nop    DWORD PTR [rax+0x0]
   1fa86:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1fa90:	push   r13
   1fa92:	push   r12
   1fa94:	mov    r13,rdx
   1fa97:	push   rbp
   1fa98:	push   rbx
   1fa99:	mov    rdx,rsi
   1fa9c:	mov    rbx,rsi
   1fa9f:	lea    rsi,[rip+0xd770]        # 2d216 <_fini@@Base+0x3f92>
   1faa6:	mov    rbp,rdi
   1faa9:	sub    rsp,0x18
   1faad:	mov    r12,rsp
   1fab0:	mov    QWORD PTR [rsp],0x0
   1fab8:	mov    rcx,r12
   1fabb:	mov    rax,QWORD PTR fs:0x28
   1fac4:	mov    QWORD PTR [rsp+0x8],rax
   1fac9:	xor    eax,eax
   1facb:	call   21550 <g_str_equal@plt+0x19198>
   1fad0:	mov    rsi,QWORD PTR [rsp]
   1fad4:	test   rsi,rsi
   1fad7:	je     1fb00 <g_str_equal@plt+0x17748>
   1fad9:	mov    rdi,r13
   1fadc:	call   df30 <g_str_equal@plt+0x5b78>
   1fae1:	mov    rax,QWORD PTR [rsp+0x8]
   1fae6:	xor    rax,QWORD PTR fs:0x28
   1faef:	jne    1fb5d <g_str_equal@plt+0x177a5>
   1faf1:	add    rsp,0x18
   1faf5:	pop    rbx
   1faf6:	pop    rbp
   1faf7:	pop    r12
   1faf9:	pop    r13
   1fafb:	ret    
   1fafc:	nop    DWORD PTR [rax+0x0]
   1fb00:	lea    rsi,[rip+0xd713]        # 2d21a <_fini@@Base+0x3f96>
   1fb07:	lea    rdx,[rbx+0x8]
   1fb0b:	mov    rcx,r12
   1fb0e:	mov    rdi,rbp
   1fb11:	call   21550 <g_str_equal@plt+0x19198>
   1fb16:	mov    rsi,QWORD PTR [rsp]
   1fb1a:	test   rsi,rsi
   1fb1d:	jne    1fad9 <g_str_equal@plt+0x17721>
   1fb1f:	lea    rsi,[rip+0xd6ff]        # 2d225 <_fini@@Base+0x3fa1>
   1fb26:	lea    rdx,[rbx+0x10]
   1fb2a:	mov    rcx,r12
   1fb2d:	mov    rdi,rbp
   1fb30:	call   20ac0 <g_str_equal@plt+0x18708>
   1fb35:	mov    rsi,QWORD PTR [rsp]
   1fb39:	test   rsi,rsi
   1fb3c:	jne    1fad9 <g_str_equal@plt+0x17721>
   1fb3e:	lea    rsi,[rip+0xd6e8]        # 2d22d <_fini@@Base+0x3fa9>
   1fb45:	lea    rdx,[rbx+0x18]
   1fb49:	mov    rcx,r12
   1fb4c:	mov    rdi,rbp
   1fb4f:	call   20ac0 <g_str_equal@plt+0x18708>
   1fb54:	mov    rsi,QWORD PTR [rsp]
   1fb58:	jmp    1fad9 <g_str_equal@plt+0x17721>
   1fb5d:	call   8050 <__stack_chk_fail@plt>
   1fb62:	nop    DWORD PTR [rax+0x0]
   1fb66:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1fb70:	push   r13
   1fb72:	push   r12
   1fb74:	mov    r13,rcx
   1fb77:	push   rbp
   1fb78:	push   rbx
   1fb79:	mov    ecx,0x20
   1fb7e:	mov    rbp,rdi
   1fb81:	mov    rbx,rdx
   1fb84:	sub    rsp,0x18
   1fb88:	mov    r12,rsp
   1fb8b:	mov    QWORD PTR [rsp],0x0
   1fb93:	mov    r8,r12
   1fb96:	mov    rax,QWORD PTR fs:0x28
   1fb9f:	mov    QWORD PTR [rsp+0x8],rax
   1fba4:	xor    eax,eax
   1fba6:	call   200e0 <g_str_equal@plt+0x17d28>
   1fbab:	mov    rsi,QWORD PTR [rsp]
   1fbaf:	test   rsi,rsi
   1fbb2:	je     1fbe0 <g_str_equal@plt+0x17828>
   1fbb4:	mov    rdi,r13
   1fbb7:	call   df30 <g_str_equal@plt+0x5b78>
   1fbbc:	mov    rax,QWORD PTR [rsp+0x8]
   1fbc1:	xor    rax,QWORD PTR fs:0x28
   1fbca:	jne    1fc3d <g_str_equal@plt+0x17885>
   1fbcc:	add    rsp,0x18
   1fbd0:	pop    rbx
   1fbd1:	pop    rbp
   1fbd2:	pop    r12
   1fbd4:	pop    r13
   1fbd6:	ret    
   1fbd7:	nop    WORD PTR [rax+rax*1+0x0]
   1fbe0:	mov    rsi,QWORD PTR [rbx]
   1fbe3:	test   rsi,rsi
   1fbe6:	je     1fbfa <g_str_equal@plt+0x17842>
   1fbe8:	mov    rdx,r12
   1fbeb:	mov    rdi,rbp
   1fbee:	call   1fa90 <g_str_equal@plt+0x176d8>
   1fbf3:	cmp    QWORD PTR [rsp],0x0
   1fbf8:	je     1fc30 <g_str_equal@plt+0x17878>
   1fbfa:	mov    rsi,rbx
   1fbfd:	mov    rdi,rbp
   1fc00:	call   20340 <g_str_equal@plt+0x17f88>
   1fc05:	mov    rsi,QWORD PTR [rsp]
   1fc09:	test   rsi,rsi
   1fc0c:	je     1fbb4 <g_str_equal@plt+0x177fc>
   1fc0e:	mov    rdi,rbp
   1fc11:	call   20ab0 <g_str_equal@plt+0x186f8>
   1fc16:	test   al,al
   1fc18:	je     1fc29 <g_str_equal@plt+0x17871>
   1fc1a:	mov    rdi,QWORD PTR [rbx]
   1fc1d:	call   15df0 <g_str_equal@plt+0xda38>
   1fc22:	mov    QWORD PTR [rbx],0x0
   1fc29:	mov    rsi,QWORD PTR [rsp]
   1fc2d:	jmp    1fbb4 <g_str_equal@plt+0x177fc>
   1fc2f:	nop
   1fc30:	mov    rsi,r12
   1fc33:	mov    rdi,rbp
   1fc36:	call   20290 <g_str_equal@plt+0x17ed8>
   1fc3b:	jmp    1fbfa <g_str_equal@plt+0x17842>
   1fc3d:	call   8050 <__stack_chk_fail@plt>
   1fc42:	nop    DWORD PTR [rax+0x0]
   1fc46:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1fc50:	push   rbx
   1fc51:	mov    r8,rcx
   1fc54:	mov    rbx,rdx
   1fc57:	lea    rcx,[rip+0x21d442]        # 23d0a0 <_fini@@Base+0x213e1c>
   1fc5e:	sub    rsp,0x10
   1fc62:	mov    rax,QWORD PTR fs:0x28
   1fc6b:	mov    QWORD PTR [rsp+0x8],rax
   1fc70:	xor    eax,eax
   1fc72:	mov    eax,DWORD PTR [rdx]
   1fc74:	lea    rdx,[rsp+0x4]
   1fc79:	mov    DWORD PTR [rsp+0x4],eax
   1fc7d:	call   219e0 <g_str_equal@plt+0x19628>
   1fc82:	mov    eax,DWORD PTR [rsp+0x4]
   1fc86:	mov    DWORD PTR [rbx],eax
   1fc88:	mov    rax,QWORD PTR [rsp+0x8]
   1fc8d:	xor    rax,QWORD PTR fs:0x28
   1fc96:	jne    1fc9e <g_str_equal@plt+0x178e6>
   1fc98:	add    rsp,0x10
   1fc9c:	pop    rbx
   1fc9d:	ret    
   1fc9e:	call   8050 <__stack_chk_fail@plt>
   1fca3:	nop    DWORD PTR [rax]
   1fca6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1fcb0:	push   r13
   1fcb2:	push   r12
   1fcb4:	mov    r13,rdx
   1fcb7:	push   rbp
   1fcb8:	push   rbx
   1fcb9:	mov    rdx,rsi
   1fcbc:	mov    rbx,rsi
   1fcbf:	lea    rsi,[rip+0x96f9]        # 293bf <_fini@@Base+0x13b>
   1fcc6:	mov    rbp,rdi
   1fcc9:	sub    rsp,0x28
   1fccd:	lea    r12,[rsp+0x10]
   1fcd2:	mov    QWORD PTR [rsp+0x10],0x0
   1fcdb:	mov    rax,QWORD PTR fs:0x28
   1fce4:	mov    QWORD PTR [rsp+0x18],rax
   1fce9:	xor    eax,eax
   1fceb:	mov    rcx,r12
   1fcee:	call   21790 <g_str_equal@plt+0x193d8>
   1fcf3:	mov    rsi,QWORD PTR [rsp+0x10]
   1fcf8:	test   rsi,rsi
   1fcfb:	je     1fd20 <g_str_equal@plt+0x17968>
   1fcfd:	mov    rdi,r13
   1fd00:	call   df30 <g_str_equal@plt+0x5b78>
   1fd05:	mov    rax,QWORD PTR [rsp+0x18]
   1fd0a:	xor    rax,QWORD PTR fs:0x28
   1fd13:	jne    1fd53 <g_str_equal@plt+0x1799b>
   1fd15:	add    rsp,0x28
   1fd19:	pop    rbx
   1fd1a:	pop    rbp
   1fd1b:	pop    r12
   1fd1d:	pop    r13
   1fd1f:	ret    
   1fd20:	mov    eax,DWORD PTR [rbx+0x8]
   1fd23:	lea    rsi,[rip+0xd515]        # 2d23f <_fini@@Base+0x3fbb>
   1fd2a:	lea    rdx,[rsp+0xc]
   1fd2f:	lea    rcx,[rip+0x21d36a]        # 23d0a0 <_fini@@Base+0x213e1c>
   1fd36:	mov    r8,r12
   1fd39:	mov    rdi,rbp
   1fd3c:	mov    DWORD PTR [rsp+0xc],eax
   1fd40:	call   219e0 <g_str_equal@plt+0x19628>
   1fd45:	mov    eax,DWORD PTR [rsp+0xc]
   1fd49:	mov    rsi,QWORD PTR [rsp+0x10]
   1fd4e:	mov    DWORD PTR [rbx+0x8],eax
   1fd51:	jmp    1fcfd <g_str_equal@plt+0x17945>
   1fd53:	call   8050 <__stack_chk_fail@plt>
   1fd58:	nop    DWORD PTR [rax+rax*1+0x0]
   1fd60:	push   r14
   1fd62:	push   r13
   1fd64:	mov    rax,rdi
   1fd67:	push   r12
   1fd69:	push   rbp
   1fd6a:	mov    r13,rcx
   1fd6d:	push   rbx
   1fd6e:	mov    rbx,rdx
   1fd71:	mov    rbp,rsi
   1fd74:	mov    r14,r8
   1fd77:	mov    r12,r9
   1fd7a:	sub    rsp,0x20
   1fd7e:	mov    rdx,QWORD PTR [rsi]
   1fd81:	mov    rsi,rbx
   1fd84:	mov    rdi,QWORD PTR fs:0x28
   1fd8d:	mov    QWORD PTR [rsp+0x18],rdi
   1fd92:	xor    edi,edi
   1fd94:	mov    QWORD PTR [rsp+0x8],0x0
   1fd9d:	lea    rcx,[rsp+0x8]
   1fda2:	mov    rdi,rax
   1fda5:	mov    QWORD PTR [rsp+0x10],rdx
   1fdaa:	lea    rdx,[rsp+0x10]
   1fdaf:	call   QWORD PTR [rax+0x50]
   1fdb2:	mov    rsi,QWORD PTR [rsp+0x8]
   1fdb7:	test   rsi,rsi
   1fdba:	jne    1fe30 <g_str_equal@plt+0x17a78>
   1fdbc:	mov    rax,QWORD PTR [rsp+0x10]
   1fdc1:	cmp    rax,r13
   1fdc4:	ja     1fdf0 <g_str_equal@plt+0x17a38>
   1fdc6:	mov    QWORD PTR [rbp+0x0],rax
   1fdca:	mov    rax,QWORD PTR [rsp+0x18]
   1fdcf:	xor    rax,QWORD PTR fs:0x28
   1fdd8:	jne    1fe3a <g_str_equal@plt+0x17a82>
   1fdda:	add    rsp,0x20
   1fdde:	pop    rbx
   1fddf:	pop    rbp
   1fde0:	pop    r12
   1fde2:	pop    r13
   1fde4:	pop    r14
   1fde6:	ret    
   1fde7:	nop    WORD PTR [rax+rax*1+0x0]
   1fdf0:	lea    rax,[rip+0x9d5b]        # 29b52 <_fini@@Base+0x8ce>
   1fdf7:	test   rbx,rbx
   1fdfa:	lea    r8,[rip+0xac4e]        # 2aa4f <_fini@@Base+0x17cb>
   1fe01:	lea    rcx,[rip+0xdce8]        # 2daf0 <_fini@@Base+0x486c>
   1fe08:	lea    rsi,[rip+0xd4c1]        # 2d2d0 <_fini@@Base+0x404c>
   1fe0f:	mov    edx,0xa4
   1fe14:	cmove  rbx,rax
   1fe18:	sub    rsp,0x8
   1fe1c:	xor    eax,eax
   1fe1e:	push   r14
   1fe20:	mov    r9,rbx
   1fe23:	mov    rdi,r12
   1fe26:	call   db00 <g_str_equal@plt+0x5748>
   1fe2b:	pop    rax
   1fe2c:	pop    rdx
   1fe2d:	jmp    1fdca <g_str_equal@plt+0x17a12>
   1fe2f:	nop
   1fe30:	mov    rdi,r12
   1fe33:	call   df30 <g_str_equal@plt+0x5b78>
   1fe38:	jmp    1fdca <g_str_equal@plt+0x17a12>
   1fe3a:	call   8050 <__stack_chk_fail@plt>
   1fe3f:	nop
   1fe40:	push   r15
   1fe42:	push   r14
   1fe44:	mov    rax,rdi
   1fe47:	push   r13
   1fe49:	push   r12
   1fe4b:	mov    r15,rsi
   1fe4e:	push   rbp
   1fe4f:	push   rbx
   1fe50:	mov    rbx,rdx
   1fe53:	mov    r13,rcx
   1fe56:	mov    r12,r8
   1fe59:	mov    r14,r9
   1fe5c:	sub    rsp,0x28
   1fe60:	mov    rdx,QWORD PTR [rsi]
   1fe63:	mov    rsi,rbx
   1fe66:	mov    rdi,QWORD PTR fs:0x28
   1fe6f:	mov    QWORD PTR [rsp+0x18],rdi
   1fe74:	xor    edi,edi
   1fe76:	mov    rbp,QWORD PTR [rsp+0x60]
   1fe7b:	mov    QWORD PTR [rsp+0x8],0x0
   1fe84:	lea    rcx,[rsp+0x8]
   1fe89:	mov    QWORD PTR [rsp+0x10],rdx
   1fe8e:	mov    rdi,rax
   1fe91:	lea    rdx,[rsp+0x10]
   1fe96:	call   QWORD PTR [rax+0x48]
   1fe99:	mov    rsi,QWORD PTR [rsp+0x8]
   1fe9e:	test   rsi,rsi
   1fea1:	jne    1ff10 <g_str_equal@plt+0x17b58>
   1fea3:	mov    rax,QWORD PTR [rsp+0x10]
   1fea8:	cmp    rax,r12
   1feab:	jg     1feb2 <g_str_equal@plt+0x17afa>
   1fead:	cmp    rax,r13
   1feb0:	jge    1ff20 <g_str_equal@plt+0x17b68>
   1feb2:	lea    rax,[rip+0x9c99]        # 29b52 <_fini@@Base+0x8ce>
   1feb9:	test   rbx,rbx
   1febc:	lea    r8,[rip+0xab8c]        # 2aa4f <_fini@@Base+0x17cb>
   1fec3:	lea    rcx,[rip+0xdbf6]        # 2dac0 <_fini@@Base+0x483c>
   1feca:	lea    rsi,[rip+0xd3ff]        # 2d2d0 <_fini@@Base+0x404c>
   1fed1:	mov    edx,0xdf
   1fed6:	cmove  rbx,rax
   1feda:	sub    rsp,0x8
   1fede:	xor    eax,eax
   1fee0:	push   r14
   1fee2:	mov    r9,rbx
   1fee5:	mov    rdi,rbp
   1fee8:	call   db00 <g_str_equal@plt+0x5748>
   1feed:	pop    rax
   1feee:	pop    rdx
   1feef:	mov    rax,QWORD PTR [rsp+0x18]
   1fef4:	xor    rax,QWORD PTR fs:0x28
   1fefd:	jne    1ff25 <g_str_equal@plt+0x17b6d>
   1feff:	add    rsp,0x28
   1ff03:	pop    rbx
   1ff04:	pop    rbp
   1ff05:	pop    r12
   1ff07:	pop    r13
   1ff09:	pop    r14
   1ff0b:	pop    r15
   1ff0d:	ret    
   1ff0e:	xchg   ax,ax
   1ff10:	mov    rdi,rbp
   1ff13:	call   df30 <g_str_equal@plt+0x5b78>
   1ff18:	jmp    1feef <g_str_equal@plt+0x17b37>
   1ff1a:	nop    WORD PTR [rax+rax*1+0x0]
   1ff20:	mov    QWORD PTR [r15],rax
   1ff23:	jmp    1feef <g_str_equal@plt+0x17b37>
   1ff25:	call   8050 <__stack_chk_fail@plt>
   1ff2a:	nop    WORD PTR [rax+rax*1+0x0]
   1ff30:	push   r13
   1ff32:	push   r12
   1ff34:	push   rbp
   1ff35:	push   rbx
   1ff36:	mov    rbp,rsi
   1ff39:	mov    rbx,rdi
   1ff3c:	sub    rsp,0x28
   1ff40:	mov    rax,QWORD PTR fs:0x28
   1ff49:	mov    QWORD PTR [rsp+0x18],rax
   1ff4e:	xor    eax,eax
   1ff50:	cmp    DWORD PTR [rdi+0x90],0x2
   1ff57:	jne    1ffa0 <g_str_equal@plt+0x17be8>
   1ff59:	mov    rax,QWORD PTR [rdi+0x98]
   1ff60:	test   rax,rax
   1ff63:	je     20021 <g_str_equal@plt+0x17c69>
   1ff69:	mov    edx,DWORD PTR [rip+0x221e89]        # 241df8 <stdout@@GLIBC_2.2.5+0x2150>
   1ff6f:	test   edx,edx
   1ff71:	jne    1ffc0 <g_str_equal@plt+0x17c08>
   1ff73:	mov    rsi,rbp
   1ff76:	mov    rdi,rbx
   1ff79:	call   rax
   1ff7b:	mov    rax,QWORD PTR [rsp+0x18]
   1ff80:	xor    rax,QWORD PTR fs:0x28
   1ff89:	jne    2001c <g_str_equal@plt+0x17c64>
   1ff8f:	add    rsp,0x28
   1ff93:	pop    rbx
   1ff94:	pop    rbp
   1ff95:	pop    r12
   1ff97:	pop    r13
   1ff99:	ret    
   1ff9a:	nop    WORD PTR [rax+rax*1+0x0]
   1ffa0:	mov    ecx,DWORD PTR [rip+0x221e52]        # 241df8 <stdout@@GLIBC_2.2.5+0x2150>
   1ffa6:	test   ecx,ecx
   1ffa8:	jne    20010 <g_str_equal@plt+0x17c58>
   1ffaa:	mov    rax,QWORD PTR [rbx+0x98]
   1ffb1:	test   rax,rax
   1ffb4:	jne    1ff73 <g_str_equal@plt+0x17bbb>
   1ffb6:	jmp    1ff7b <g_str_equal@plt+0x17bc3>
   1ffb8:	nop    DWORD PTR [rax+rax*1+0x0]
   1ffc0:	cmp    WORD PTR [rip+0x22216a],0x0        # 242132 <stdout@@GLIBC_2.2.5+0x248a>
   1ffc8:	je     1ff73 <g_str_equal@plt+0x17bbb>
   1ffca:	test   BYTE PTR [rip+0x220d70],0x80        # 240d41 <stdout@@GLIBC_2.2.5+0x1099>
   1ffd1:	je     1ffaa <g_str_equal@plt+0x17bf2>
   1ffd3:	mov    rdi,rsp
   1ffd6:	xor    esi,esi
   1ffd8:	call   7a90 <gettimeofday@plt>
   1ffdd:	mov    r13,QWORD PTR [rsp+0x8]
   1ffe2:	mov    r12,QWORD PTR [rsp]
   1ffe6:	call   7bf0 <getpid@plt>
   1ffeb:	lea    rdi,[rip+0xd34e]        # 2d340 <_fini@@Base+0x40bc>
   1fff2:	mov    esi,eax
   1fff4:	mov    r9,rbp
   1fff7:	mov    r8,rbx
   1fffa:	mov    rcx,r13
   1fffd:	mov    rdx,r12
   20000:	xor    eax,eax
   20002:	call   10b60 <g_str_equal@plt+0x87a8>
   20007:	jmp    1ffaa <g_str_equal@plt+0x17bf2>
   20009:	nop    DWORD PTR [rax+0x0]
   20010:	cmp    WORD PTR [rip+0x22211a],0x0        # 242132 <stdout@@GLIBC_2.2.5+0x248a>
   20018:	jne    1ffca <g_str_equal@plt+0x17c12>
   2001a:	jmp    1ffaa <g_str_equal@plt+0x17bf2>
   2001c:	call   8050 <__stack_chk_fail@plt>
   20021:	lea    rcx,[rip+0xdb60]        # 2db88 <_fini@@Base+0x4904>
   20028:	lea    rsi,[rip+0xd2a1]        # 2d2d0 <_fini@@Base+0x404c>
   2002f:	lea    rdi,[rip+0xd2da]        # 2d310 <_fini@@Base+0x408c>
   20036:	mov    edx,0x19
   2003b:	call   7a70 <__assert_fail@plt>
   20040:	push   r12
   20042:	push   rbp
   20043:	push   rbx
   20044:	mov    rbx,rdi
   20047:	sub    rsp,0x20
   2004b:	mov    rax,QWORD PTR fs:0x28
   20054:	mov    QWORD PTR [rsp+0x18],rax
   20059:	xor    eax,eax
   2005b:	mov    eax,DWORD PTR [rip+0x221d97]        # 241df8 <stdout@@GLIBC_2.2.5+0x2150>
   20061:	test   eax,eax
   20063:	jne    20090 <g_str_equal@plt+0x17cd8>
   20065:	test   rbx,rbx
   20068:	je     20073 <g_str_equal@plt+0x17cbb>
   2006a:	mov    rdi,rbx
   2006d:	call   QWORD PTR [rbx+0xa0]
   20073:	mov    rax,QWORD PTR [rsp+0x18]
   20078:	xor    rax,QWORD PTR fs:0x28
   20081:	jne    200d6 <g_str_equal@plt+0x17d1e>
   20083:	add    rsp,0x20
   20087:	pop    rbx
   20088:	pop    rbp
   20089:	pop    r12
   2008b:	ret    
   2008c:	nop    DWORD PTR [rax+0x0]
   20090:	cmp    WORD PTR [rip+0x22209c],0x0        # 242134 <stdout@@GLIBC_2.2.5+0x248c>
   20098:	je     20065 <g_str_equal@plt+0x17cad>
   2009a:	test   BYTE PTR [rip+0x220ca0],0x80        # 240d41 <stdout@@GLIBC_2.2.5+0x1099>
   200a1:	je     20065 <g_str_equal@plt+0x17cad>
   200a3:	mov    rdi,rsp
   200a6:	xor    esi,esi
   200a8:	call   7a90 <gettimeofday@plt>
   200ad:	mov    r12,QWORD PTR [rsp+0x8]
   200b2:	mov    rbp,QWORD PTR [rsp]
   200b6:	call   7bf0 <getpid@plt>
   200bb:	lea    rdi,[rip+0xd1a6]        # 2d268 <_fini@@Base+0x3fe4>
   200c2:	mov    esi,eax
   200c4:	mov    r8,rbx
   200c7:	mov    rcx,r12
   200ca:	mov    rdx,rbp
   200cd:	xor    eax,eax
   200cf:	call   10b60 <g_str_equal@plt+0x87a8>
   200d4:	jmp    20065 <g_str_equal@plt+0x17cad>
   200d6:	call   8050 <__stack_chk_fail@plt>
   200db:	nop    DWORD PTR [rax+rax*1+0x0]
   200e0:	push   r15
   200e2:	push   r14
   200e4:	mov    r14,r8
   200e7:	push   r13
   200e9:	push   r12
   200eb:	mov    r12,rcx
   200ee:	push   rbp
   200ef:	push   rbx
   200f0:	mov    r13,rsi
   200f3:	mov    rbx,rdi
   200f6:	mov    rbp,rdx
   200f9:	sub    rsp,0x48
   200fd:	mov    ecx,DWORD PTR [rip+0x221cf5]        # 241df8 <stdout@@GLIBC_2.2.5+0x2150>
   20103:	mov    rax,QWORD PTR fs:0x28
   2010c:	mov    QWORD PTR [rsp+0x38],rax
   20111:	xor    eax,eax
   20113:	mov    QWORD PTR [rsp+0x18],0x0
   2011c:	test   ecx,ecx
   2011e:	jne    20200 <g_str_equal@plt+0x17e48>
   20124:	test   rbp,rbp
   20127:	jne    20170 <g_str_equal@plt+0x17db8>
   20129:	mov    rsi,r13
   2012c:	lea    r8,[rsp+0x18]
   20131:	mov    rcx,r12
   20134:	xor    edx,edx
   20136:	mov    rdi,rbx
   20139:	call   QWORD PTR [rbx]
   2013b:	mov    rsi,QWORD PTR [rsp+0x18]
   20140:	mov    rdi,r14
   20143:	call   df30 <g_str_equal@plt+0x5b78>
   20148:	mov    rax,QWORD PTR [rsp+0x38]
   2014d:	xor    rax,QWORD PTR fs:0x28
   20156:	jne    20263 <g_str_equal@plt+0x17eab>
   2015c:	add    rsp,0x48
   20160:	pop    rbx
   20161:	pop    rbp
   20162:	pop    r12
   20164:	pop    r13
   20166:	pop    r14
   20168:	pop    r15
   2016a:	ret    
   2016b:	nop    DWORD PTR [rax+rax*1+0x0]
   20170:	test   r12,r12
   20173:	je     20268 <g_str_equal@plt+0x17eb0>
   20179:	test   BYTE PTR [rbx+0x90],0x2
   20180:	jne    201d8 <g_str_equal@plt+0x17e20>
   20182:	mov    rsi,r13
   20185:	lea    r8,[rsp+0x18]
   2018a:	mov    rcx,r12
   2018d:	mov    rdx,rbp
   20190:	mov    rdi,rbx
   20193:	call   QWORD PTR [rbx]
   20195:	test   BYTE PTR [rbx+0x90],0x1
   2019c:	mov    rsi,QWORD PTR [rsp+0x18]
   201a1:	je     20140 <g_str_equal@plt+0x17d88>
   201a3:	test   rsi,rsi
   201a6:	sete   dl
   201a9:	cmp    QWORD PTR [rbp+0x0],0x0
   201ae:	sete   al
   201b1:	cmp    dl,al
   201b3:	jne    20140 <g_str_equal@plt+0x17d88>
   201b5:	lea    rcx,[rip+0xd9b4]        # 2db70 <_fini@@Base+0x48ec>
   201bc:	lea    rsi,[rip+0xd10d]        # 2d2d0 <_fini@@Base+0x404c>
   201c3:	lea    rdi,[rip+0xd0bc]        # 2d286 <_fini@@Base+0x4002>
   201ca:	mov    edx,0x34
   201cf:	call   7a70 <__assert_fail@plt>
   201d4:	nop    DWORD PTR [rax+0x0]
   201d8:	cmp    QWORD PTR [rbp+0x0],0x0
   201dd:	jne    20182 <g_str_equal@plt+0x17dca>
   201df:	lea    rcx,[rip+0xd98a]        # 2db70 <_fini@@Base+0x48ec>
   201e6:	lea    rsi,[rip+0xd0e3]        # 2d2d0 <_fini@@Base+0x404c>
   201ed:	lea    rdi,[rip+0xd1bc]        # 2d3b0 <_fini@@Base+0x412c>
   201f4:	mov    edx,0x30
   201f9:	call   7a70 <__assert_fail@plt>
   201fe:	xchg   ax,ax
   20200:	cmp    WORD PTR [rip+0x221f28],0x0        # 242130 <stdout@@GLIBC_2.2.5+0x2488>
   20208:	je     20124 <g_str_equal@plt+0x17d6c>
   2020e:	test   BYTE PTR [rip+0x220b2c],0x80        # 240d41 <stdout@@GLIBC_2.2.5+0x1099>
   20215:	je     20124 <g_str_equal@plt+0x17d6c>
   2021b:	lea    rdi,[rsp+0x20]
   20220:	xor    esi,esi
   20222:	call   7a90 <gettimeofday@plt>
   20227:	mov    rcx,QWORD PTR [rsp+0x28]
   2022c:	mov    r15,QWORD PTR [rsp+0x20]
   20231:	mov    QWORD PTR [rsp+0x8],rcx
   20236:	call   7bf0 <getpid@plt>
   2023b:	push   r12
   2023d:	push   rbp
   2023e:	lea    rdi,[rip+0xd12b]        # 2d370 <_fini@@Base+0x40ec>
   20245:	mov    rcx,QWORD PTR [rsp+0x18]
   2024a:	mov    rdx,r15
   2024d:	mov    esi,eax
   2024f:	mov    r9,r13
   20252:	mov    r8,rbx
   20255:	xor    eax,eax
   20257:	call   10b60 <g_str_equal@plt+0x87a8>
   2025c:	pop    rax
   2025d:	pop    rdx
   2025e:	jmp    20124 <g_str_equal@plt+0x17d6c>
   20263:	call   8050 <__stack_chk_fail@plt>
   20268:	lea    rcx,[rip+0xd901]        # 2db70 <_fini@@Base+0x48ec>
   2026f:	lea    rsi,[rip+0xd05a]        # 2d2d0 <_fini@@Base+0x404c>
   20276:	lea    rdi,[rip+0xbdb6]        # 2c033 <_fini@@Base+0x2daf>
   2027d:	mov    edx,0x2f
   20282:	call   7a70 <__assert_fail@plt>
   20287:	nop    WORD PTR [rax+rax*1+0x0]
   20290:	push   r13
   20292:	push   r12
   20294:	push   rbp
   20295:	push   rbx
   20296:	mov    rbp,rsi
   20299:	mov    rbx,rdi
   2029c:	sub    rsp,0x28
   202a0:	mov    rax,QWORD PTR fs:0x28
   202a9:	mov    QWORD PTR [rsp+0x18],rax
   202ae:	xor    eax,eax
   202b0:	mov    eax,DWORD PTR [rip+0x221b42]        # 241df8 <stdout@@GLIBC_2.2.5+0x2150>
   202b6:	test   eax,eax
   202b8:	jne    202f0 <g_str_equal@plt+0x17f38>
   202ba:	mov    rax,QWORD PTR [rbx+0x8]
   202be:	test   rax,rax
   202c1:	je     202cb <g_str_equal@plt+0x17f13>
   202c3:	mov    rsi,rbp
   202c6:	mov    rdi,rbx
   202c9:	call   rax
   202cb:	mov    rax,QWORD PTR [rsp+0x18]
   202d0:	xor    rax,QWORD PTR fs:0x28
   202d9:	jne    20336 <g_str_equal@plt+0x17f7e>
   202db:	add    rsp,0x28
   202df:	pop    rbx
   202e0:	pop    rbp
   202e1:	pop    r12
   202e3:	pop    r13
   202e5:	ret    
   202e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   202f0:	cmp    WORD PTR [rip+0x221e36],0x0        # 24212e <stdout@@GLIBC_2.2.5+0x2486>
   202f8:	je     202ba <g_str_equal@plt+0x17f02>
   202fa:	test   BYTE PTR [rip+0x220a40],0x80        # 240d41 <stdout@@GLIBC_2.2.5+0x1099>
   20301:	je     202ba <g_str_equal@plt+0x17f02>
   20303:	mov    rdi,rsp
   20306:	xor    esi,esi
   20308:	call   7a90 <gettimeofday@plt>
   2030d:	mov    r13,QWORD PTR [rsp+0x8]
   20312:	mov    r12,QWORD PTR [rsp]
   20316:	call   7bf0 <getpid@plt>
   2031b:	lea    rdi,[rip+0xd0b6]        # 2d3d8 <_fini@@Base+0x4154>
   20322:	mov    esi,eax
   20324:	mov    r8,rbx
   20327:	mov    rcx,r13
   2032a:	mov    rdx,r12
   2032d:	xor    eax,eax
   2032f:	call   10b60 <g_str_equal@plt+0x87a8>
   20334:	jmp    202ba <g_str_equal@plt+0x17f02>
   20336:	call   8050 <__stack_chk_fail@plt>
   2033b:	nop    DWORD PTR [rax+rax*1+0x0]
   20340:	push   r13
   20342:	push   r12
   20344:	push   rbp
   20345:	push   rbx
   20346:	mov    rbp,rsi
   20349:	mov    rbx,rdi
   2034c:	sub    rsp,0x28
   20350:	mov    rax,QWORD PTR fs:0x28
   20359:	mov    QWORD PTR [rsp+0x18],rax
   2035e:	xor    eax,eax
   20360:	mov    eax,DWORD PTR [rip+0x221a92]        # 241df8 <stdout@@GLIBC_2.2.5+0x2150>
   20366:	test   eax,eax
   20368:	jne    20390 <g_str_equal@plt+0x17fd8>
   2036a:	mov    rsi,rbp
   2036d:	mov    rdi,rbx
   20370:	call   QWORD PTR [rbx+0x10]
   20373:	mov    rax,QWORD PTR [rsp+0x18]
   20378:	xor    rax,QWORD PTR fs:0x28
   20381:	jne    203d9 <g_str_equal@plt+0x18021>
   20383:	add    rsp,0x28
   20387:	pop    rbx
   20388:	pop    rbp
   20389:	pop    r12
   2038b:	pop    r13
   2038d:	ret    
   2038e:	xchg   ax,ax
   20390:	cmp    WORD PTR [rip+0x221d94],0x0        # 24212c <stdout@@GLIBC_2.2.5+0x2484>
   20398:	je     2036a <g_str_equal@plt+0x17fb2>
   2039a:	test   BYTE PTR [rip+0x2209a0],0x80        # 240d41 <stdout@@GLIBC_2.2.5+0x1099>
   203a1:	je     2036a <g_str_equal@plt+0x17fb2>
   203a3:	mov    rdi,rsp
   203a6:	xor    esi,esi
   203a8:	call   7a90 <gettimeofday@plt>
   203ad:	mov    r13,QWORD PTR [rsp+0x8]
   203b2:	mov    r12,QWORD PTR [rsp]
   203b6:	call   7bf0 <getpid@plt>
   203bb:	lea    rdi,[rip+0xd03e]        # 2d400 <_fini@@Base+0x417c>
   203c2:	mov    esi,eax
   203c4:	mov    r9,rbp
   203c7:	mov    r8,rbx
   203ca:	mov    rcx,r13
   203cd:	mov    rdx,r12
   203d0:	xor    eax,eax
   203d2:	call   10b60 <g_str_equal@plt+0x87a8>
   203d7:	jmp    2036a <g_str_equal@plt+0x17fb2>
   203d9:	call   8050 <__stack_chk_fail@plt>
   203de:	xchg   ax,ax
   203e0:	push   r15
   203e2:	push   r14
   203e4:	mov    r14,r8
   203e7:	push   r13
   203e9:	push   r12
   203eb:	mov    r13,rsi
   203ee:	push   rbp
   203ef:	push   rbx
   203f0:	mov    rbp,rdi
   203f3:	mov    rbx,rdx
   203f6:	mov    r12,rcx
   203f9:	sub    rsp,0x48
   203fd:	mov    rax,QWORD PTR fs:0x28
   20406:	mov    QWORD PTR [rsp+0x38],rax
   2040b:	xor    eax,eax
   2040d:	test   rdx,rdx
   20410:	mov    QWORD PTR [rsp+0x18],0x0
   20419:	je     20425 <g_str_equal@plt+0x1806d>
   2041b:	cmp    rcx,0x7
   2041f:	jbe    204eb <g_str_equal@plt+0x18133>
   20425:	mov    ecx,DWORD PTR [rip+0x2219cd]        # 241df8 <stdout@@GLIBC_2.2.5+0x2150>
   2042b:	test   ecx,ecx
   2042d:	jne    20490 <g_str_equal@plt+0x180d8>
   2042f:	mov    rsi,r13
   20432:	lea    r8,[rsp+0x18]
   20437:	mov    rcx,r12
   2043a:	mov    rdx,rbx
   2043d:	mov    rdi,rbp
   20440:	call   QWORD PTR [rbp+0x18]
   20443:	test   rbx,rbx
   20446:	mov    rsi,QWORD PTR [rsp+0x18]
   2044b:	je     20465 <g_str_equal@plt+0x180ad>
   2044d:	test   BYTE PTR [rbp+0x90],0x1
   20454:	je     20465 <g_str_equal@plt+0x180ad>
   20456:	test   rsi,rsi
   20459:	je     20465 <g_str_equal@plt+0x180ad>
   2045b:	cmp    QWORD PTR [rbx],0x0
   2045f:	jne    2050a <g_str_equal@plt+0x18152>
   20465:	mov    rdi,r14
   20468:	call   df30 <g_str_equal@plt+0x5b78>
   2046d:	mov    rax,QWORD PTR [rsp+0x38]
   20472:	xor    rax,QWORD PTR fs:0x28
   2047b:	jne    20529 <g_str_equal@plt+0x18171>
   20481:	add    rsp,0x48
   20485:	pop    rbx
   20486:	pop    rbp
   20487:	pop    r12
   20489:	pop    r13
   2048b:	pop    r14
   2048d:	pop    r15
   2048f:	ret    
   20490:	cmp    WORD PTR [rip+0x221c92],0x0        # 24212a <stdout@@GLIBC_2.2.5+0x2482>
   20498:	je     2042f <g_str_equal@plt+0x18077>
   2049a:	test   BYTE PTR [rip+0x2208a0],0x80        # 240d41 <stdout@@GLIBC_2.2.5+0x1099>
   204a1:	je     2042f <g_str_equal@plt+0x18077>
   204a3:	lea    rdi,[rsp+0x20]
   204a8:	xor    esi,esi
   204aa:	call   7a90 <gettimeofday@plt>
   204af:	mov    rcx,QWORD PTR [rsp+0x28]
   204b4:	mov    r15,QWORD PTR [rsp+0x20]
   204b9:	mov    QWORD PTR [rsp+0x8],rcx
   204be:	call   7bf0 <getpid@plt>
   204c3:	push   r12
   204c5:	push   rbx
   204c6:	lea    rdi,[rip+0xcf8b]        # 2d458 <_fini@@Base+0x41d4>
   204cd:	mov    rcx,QWORD PTR [rsp+0x18]
   204d2:	mov    rdx,r15
   204d5:	mov    esi,eax
   204d7:	mov    r9,r13
   204da:	mov    r8,rbp
   204dd:	xor    eax,eax
   204df:	call   10b60 <g_str_equal@plt+0x87a8>
   204e4:	pop    rax
   204e5:	pop    rdx
   204e6:	jmp    2042f <g_str_equal@plt+0x18077>
   204eb:	lea    rcx,[rip+0xd65e]        # 2db50 <_fini@@Base+0x48cc>
   204f2:	lea    rsi,[rip+0xcdd7]        # 2d2d0 <_fini@@Base+0x404c>
   204f9:	lea    rdi,[rip+0xcf30]        # 2d430 <_fini@@Base+0x41ac>
   20500:	mov    edx,0x4c
   20505:	call   7a70 <__assert_fail@plt>
   2050a:	lea    rcx,[rip+0xd63f]        # 2db50 <_fini@@Base+0x48cc>
   20511:	lea    rsi,[rip+0xcdb8]        # 2d2d0 <_fini@@Base+0x404c>
   20518:	lea    rdi,[rip+0xcd75]        # 2d294 <_fini@@Base+0x4010>
   2051f:	mov    edx,0x50
   20524:	call   7a70 <__assert_fail@plt>
   20529:	call   8050 <__stack_chk_fail@plt>
   2052e:	xchg   ax,ax
   20530:	push   r14
   20532:	push   r13
   20534:	push   r12
   20536:	push   rbp
   20537:	push   rbx
   20538:	sub    rsp,0x20
   2053c:	mov    rax,QWORD PTR fs:0x28
   20545:	mov    QWORD PTR [rsp+0x18],rax
   2054a:	xor    eax,eax
   2054c:	test   rsi,rsi
   2054f:	je     205f1 <g_str_equal@plt+0x18239>
   20555:	cmp    rdx,0x7
   20559:	mov    r12,rdx
   2055c:	jbe    205f1 <g_str_equal@plt+0x18239>
   20562:	mov    ecx,DWORD PTR [rip+0x221890]        # 241df8 <stdout@@GLIBC_2.2.5+0x2150>
   20568:	mov    rbp,rdi
   2056b:	mov    rbx,rsi
   2056e:	test   ecx,ecx
   20570:	jne    205a0 <g_str_equal@plt+0x181e8>
   20572:	mov    rdx,r12
   20575:	mov    rsi,rbx
   20578:	mov    rdi,rbp
   2057b:	call   QWORD PTR [rbp+0x20]
   2057e:	mov    rcx,QWORD PTR [rsp+0x18]
   20583:	xor    rcx,QWORD PTR fs:0x28
   2058c:	jne    20610 <g_str_equal@plt+0x18258>
   20592:	add    rsp,0x20
   20596:	pop    rbx
   20597:	pop    rbp
   20598:	pop    r12
   2059a:	pop    r13
   2059c:	pop    r14
   2059e:	ret    
   2059f:	nop
   205a0:	cmp    WORD PTR [rip+0x221b80],0x0        # 242128 <stdout@@GLIBC_2.2.5+0x2480>
   205a8:	je     20572 <g_str_equal@plt+0x181ba>
   205aa:	test   BYTE PTR [rip+0x220790],0x80        # 240d41 <stdout@@GLIBC_2.2.5+0x1099>
   205b1:	je     20572 <g_str_equal@plt+0x181ba>
   205b3:	mov    rdi,rsp
   205b6:	xor    esi,esi
   205b8:	call   7a90 <gettimeofday@plt>
   205bd:	mov    r14,QWORD PTR [rsp+0x8]
   205c2:	mov    r13,QWORD PTR [rsp]
   205c6:	call   7bf0 <getpid@plt>
   205cb:	sub    rsp,0x8
   205cf:	lea    rdi,[rip+0xceea]        # 2d4c0 <_fini@@Base+0x423c>
   205d6:	mov    esi,eax
   205d8:	push   r12
   205da:	mov    rdx,r13
   205dd:	mov    r9,rbx
   205e0:	mov    r8,rbp
   205e3:	mov    rcx,r14
   205e6:	xor    eax,eax
   205e8:	call   10b60 <g_str_equal@plt+0x87a8>
   205ed:	pop    rax
   205ee:	pop    rdx
   205ef:	jmp    20572 <g_str_equal@plt+0x181ba>
   205f1:	lea    rcx,[rip+0xd548]        # 2db40 <_fini@@Base+0x48bc>
   205f8:	lea    rsi,[rip+0xccd1]        # 2d2d0 <_fini@@Base+0x404c>
   205ff:	lea    rdi,[rip+0xce92]        # 2d498 <_fini@@Base+0x4214>
   20606:	mov    edx,0x57
   2060b:	call   7a70 <__assert_fail@plt>
   20610:	call   8050 <__stack_chk_fail@plt>
   20615:	nop
   20616:	nop    WORD PTR cs:[rax+rax*1+0x0]
   20620:	push   r13
   20622:	push   r12
   20624:	push   rbp
   20625:	push   rbx
   20626:	mov    rbp,rsi
   20629:	mov    rbx,rdi
   2062c:	sub    rsp,0x28
   20630:	mov    rax,QWORD PTR fs:0x28
   20639:	mov    QWORD PTR [rsp+0x18],rax
   2063e:	xor    eax,eax
   20640:	mov    eax,DWORD PTR [rip+0x2217b2]        # 241df8 <stdout@@GLIBC_2.2.5+0x2150>
   20646:	test   eax,eax
   20648:	jne    20680 <g_str_equal@plt+0x182c8>
   2064a:	mov    rax,QWORD PTR [rbx+0x28]
   2064e:	test   rax,rax
   20651:	je     2065b <g_str_equal@plt+0x182a3>
   20653:	mov    rsi,rbp
   20656:	mov    rdi,rbx
   20659:	call   rax
   2065b:	mov    rax,QWORD PTR [rsp+0x18]
   20660:	xor    rax,QWORD PTR fs:0x28
   20669:	jne    206c6 <g_str_equal@plt+0x1830e>
   2066b:	add    rsp,0x28
   2066f:	pop    rbx
   20670:	pop    rbp
   20671:	pop    r12
   20673:	pop    r13
   20675:	ret    
   20676:	nop    WORD PTR cs:[rax+rax*1+0x0]
   20680:	cmp    WORD PTR [rip+0x221a9e],0x0        # 242126 <stdout@@GLIBC_2.2.5+0x247e>
   20688:	je     2064a <g_str_equal@plt+0x18292>
   2068a:	test   BYTE PTR [rip+0x2206b0],0x80        # 240d41 <stdout@@GLIBC_2.2.5+0x1099>
   20691:	je     2064a <g_str_equal@plt+0x18292>
   20693:	mov    rdi,rsp
   20696:	xor    esi,esi
   20698:	call   7a90 <gettimeofday@plt>
   2069d:	mov    r13,QWORD PTR [rsp+0x8]
   206a2:	mov    r12,QWORD PTR [rsp]
   206a6:	call   7bf0 <getpid@plt>
   206ab:	lea    rdi,[rip+0xce46]        # 2d4f8 <_fini@@Base+0x4274>
   206b2:	mov    esi,eax
   206b4:	mov    r8,rbx
   206b7:	mov    rcx,r13
   206ba:	mov    rdx,r12
   206bd:	xor    eax,eax
   206bf:	call   10b60 <g_str_equal@plt+0x87a8>
   206c4:	jmp    2064a <g_str_equal@plt+0x18292>
   206c6:	call   8050 <__stack_chk_fail@plt>
   206cb:	nop    DWORD PTR [rax+rax*1+0x0]
   206d0:	push   r13
   206d2:	push   r12
   206d4:	push   rbp
   206d5:	push   rbx
   206d6:	mov    rbp,rsi
   206d9:	mov    rbx,rdi
   206dc:	sub    rsp,0x28
   206e0:	mov    rax,QWORD PTR fs:0x28
   206e9:	mov    QWORD PTR [rsp+0x18],rax
   206ee:	xor    eax,eax
   206f0:	mov    eax,DWORD PTR [rip+0x221702]        # 241df8 <stdout@@GLIBC_2.2.5+0x2150>
   206f6:	test   eax,eax
   206f8:	jne    20720 <g_str_equal@plt+0x18368>
   206fa:	mov    rsi,rbp
   206fd:	mov    rdi,rbx
   20700:	call   QWORD PTR [rbx+0x30]
   20703:	mov    rax,QWORD PTR [rsp+0x18]
   20708:	xor    rax,QWORD PTR fs:0x28
   20711:	jne    20769 <g_str_equal@plt+0x183b1>
   20713:	add    rsp,0x28
   20717:	pop    rbx
   20718:	pop    rbp
   20719:	pop    r12
   2071b:	pop    r13
   2071d:	ret    
   2071e:	xchg   ax,ax
   20720:	cmp    WORD PTR [rip+0x2219fc],0x0        # 242124 <stdout@@GLIBC_2.2.5+0x247c>
   20728:	je     206fa <g_str_equal@plt+0x18342>
   2072a:	test   BYTE PTR [rip+0x220610],0x80        # 240d41 <stdout@@GLIBC_2.2.5+0x1099>
   20731:	je     206fa <g_str_equal@plt+0x18342>
   20733:	mov    rdi,rsp
   20736:	xor    esi,esi
   20738:	call   7a90 <gettimeofday@plt>
   2073d:	mov    r13,QWORD PTR [rsp+0x8]
   20742:	mov    r12,QWORD PTR [rsp]
   20746:	call   7bf0 <getpid@plt>
   2074b:	lea    rdi,[rip+0xcdce]        # 2d520 <_fini@@Base+0x429c>
   20752:	mov    esi,eax
   20754:	mov    r9,rbp
   20757:	mov    r8,rbx
   2075a:	mov    rcx,r13
   2075d:	mov    rdx,r12
   20760:	xor    eax,eax
   20762:	call   10b60 <g_str_equal@plt+0x87a8>
   20767:	jmp    206fa <g_str_equal@plt+0x18342>
   20769:	call   8050 <__stack_chk_fail@plt>
   2076e:	xchg   ax,ax
   20770:	push   r15
   20772:	push   r14
   20774:	push   r13
   20776:	push   r12
   20778:	push   rbp
   20779:	push   rbx
   2077a:	sub    rsp,0x48
   2077e:	mov    rax,QWORD PTR fs:0x28
   20787:	mov    QWORD PTR [rsp+0x38],rax
   2078c:	xor    eax,eax
   2078e:	test   rdx,rdx
   20791:	mov    QWORD PTR [rsp+0x18],0x0
   2079a:	je     208e2 <g_str_equal@plt+0x1852a>
   207a0:	cmp    rcx,0x3
   207a4:	mov    r12,rcx
   207a7:	jbe    208e2 <g_str_equal@plt+0x1852a>
   207ad:	test   BYTE PTR [rdi+0x90],0x2
   207b4:	mov    rbx,rdi
   207b7:	mov    r14,rsi
   207ba:	mov    rbp,rdx
   207bd:	mov    r13,r8
   207c0:	je     207cc <g_str_equal@plt+0x18414>
   207c2:	cmp    QWORD PTR [rdx],0x0
   207c6:	je     20906 <g_str_equal@plt+0x1854e>
   207cc:	mov    ecx,DWORD PTR [rip+0x221626]        # 241df8 <stdout@@GLIBC_2.2.5+0x2150>
   207d2:	test   ecx,ecx
   207d4:	jne    20860 <g_str_equal@plt+0x184a8>
   207da:	mov    rax,QWORD PTR [rbx+0x38]
   207de:	test   rax,rax
   207e1:	je     20850 <g_str_equal@plt+0x18498>
   207e3:	lea    r8,[rsp+0x18]
   207e8:	mov    rcx,r12
   207eb:	mov    rdx,rbp
   207ee:	mov    rsi,r14
   207f1:	mov    rdi,rbx
   207f4:	call   rax
   207f6:	test   BYTE PTR [rbx+0x90],0x1
   207fd:	je     20859 <g_str_equal@plt+0x184a1>
   207ff:	cmp    QWORD PTR [rbx+0x38],0x0
   20804:	je     208c3 <g_str_equal@plt+0x1850b>
   2080a:	mov    rsi,QWORD PTR [rsp+0x18]
   2080f:	test   rsi,rsi
   20812:	sete   dl
   20815:	cmp    QWORD PTR [rbp+0x0],0x0
   2081a:	sete   al
   2081d:	cmp    dl,al
   2081f:	je     208c3 <g_str_equal@plt+0x1850b>
   20825:	mov    rdi,r13
   20828:	call   df30 <g_str_equal@plt+0x5b78>
   2082d:	mov    rax,QWORD PTR [rsp+0x38]
   20832:	xor    rax,QWORD PTR fs:0x28
   2083b:	jne    20901 <g_str_equal@plt+0x18549>
   20841:	add    rsp,0x48
   20845:	pop    rbx
   20846:	pop    rbp
   20847:	pop    r12
   20849:	pop    r13
   2084b:	pop    r14
   2084d:	pop    r15
   2084f:	ret    
   20850:	test   BYTE PTR [rbx+0x90],0x1
   20857:	jne    208c3 <g_str_equal@plt+0x1850b>
   20859:	mov    rsi,QWORD PTR [rsp+0x18]
   2085e:	jmp    20825 <g_str_equal@plt+0x1846d>
   20860:	cmp    WORD PTR [rip+0x2218ba],0x0        # 242122 <stdout@@GLIBC_2.2.5+0x247a>
   20868:	je     207da <g_str_equal@plt+0x18422>
   2086e:	test   BYTE PTR [rip+0x2204cc],0x80        # 240d41 <stdout@@GLIBC_2.2.5+0x1099>
   20875:	je     207da <g_str_equal@plt+0x18422>
   2087b:	lea    rdi,[rsp+0x20]
   20880:	xor    esi,esi
   20882:	call   7a90 <gettimeofday@plt>
   20887:	mov    rcx,QWORD PTR [rsp+0x28]
   2088c:	mov    r15,QWORD PTR [rsp+0x20]
   20891:	mov    QWORD PTR [rsp+0x8],rcx
   20896:	call   7bf0 <getpid@plt>
   2089b:	push   r12
   2089d:	push   rbp
   2089e:	lea    rdi,[rip+0xccd3]        # 2d578 <_fini@@Base+0x42f4>
   208a5:	mov    rcx,QWORD PTR [rsp+0x18]
   208aa:	mov    rdx,r15
   208ad:	mov    esi,eax
   208af:	mov    r9,r14
   208b2:	mov    r8,rbx
   208b5:	xor    eax,eax
   208b7:	call   10b60 <g_str_equal@plt+0x87a8>
   208bc:	pop    rax
   208bd:	pop    rdx
   208be:	jmp    207da <g_str_equal@plt+0x18422>
   208c3:	lea    rcx,[rip+0xd256]        # 2db20 <_fini@@Base+0x489c>
   208ca:	lea    rsi,[rip+0xc9ff]        # 2d2d0 <_fini@@Base+0x404c>
   208d1:	lea    rdi,[rip+0xcce8]        # 2d5c0 <_fini@@Base+0x433c>
   208d8:	mov    edx,0x77
   208dd:	call   7a70 <__assert_fail@plt>
   208e2:	lea    rcx,[rip+0xd237]        # 2db20 <_fini@@Base+0x489c>
   208e9:	lea    rsi,[rip+0xc9e0]        # 2d2d0 <_fini@@Base+0x404c>
   208f0:	lea    rdi,[rip+0xcc59]        # 2d550 <_fini@@Base+0x42cc>
   208f7:	mov    edx,0x70
   208fc:	call   7a70 <__assert_fail@plt>
   20901:	call   8050 <__stack_chk_fail@plt>
   20906:	lea    rcx,[rip+0xd213]        # 2db20 <_fini@@Base+0x489c>
   2090d:	lea    rsi,[rip+0xc9bc]        # 2d2d0 <_fini@@Base+0x404c>
   20914:	lea    rdi,[rip+0xca95]        # 2d3b0 <_fini@@Base+0x412c>
   2091b:	mov    edx,0x71
   20920:	call   7a70 <__assert_fail@plt>
   20925:	nop
   20926:	nop    WORD PTR cs:[rax+rax*1+0x0]
   20930:	push   r13
   20932:	push   r12
   20934:	push   rbp
   20935:	push   rbx
   20936:	mov    rbp,rsi
   20939:	mov    rbx,rdi
   2093c:	sub    rsp,0x28
   20940:	mov    rax,QWORD PTR fs:0x28
   20949:	mov    QWORD PTR [rsp+0x18],rax
   2094e:	xor    eax,eax
   20950:	mov    eax,DWORD PTR [rip+0x2214a2]        # 241df8 <stdout@@GLIBC_2.2.5+0x2150>
   20956:	test   eax,eax
   20958:	jne    20990 <g_str_equal@plt+0x185d8>
   2095a:	mov    rax,QWORD PTR [rbx+0x40]
   2095e:	test   rax,rax
   20961:	je     2096b <g_str_equal@plt+0x185b3>
   20963:	mov    rsi,rbp
   20966:	mov    rdi,rbx
   20969:	call   rax
   2096b:	mov    rax,QWORD PTR [rsp+0x18]
   20970:	xor    rax,QWORD PTR fs:0x28
   20979:	jne    209d9 <g_str_equal@plt+0x18621>
   2097b:	add    rsp,0x28
   2097f:	pop    rbx
   20980:	pop    rbp
   20981:	pop    r12
   20983:	pop    r13
   20985:	ret    
   20986:	nop    WORD PTR cs:[rax+rax*1+0x0]
   20990:	cmp    WORD PTR [rip+0x221788],0x0        # 242120 <stdout@@GLIBC_2.2.5+0x2478>
   20998:	je     2095a <g_str_equal@plt+0x185a2>
   2099a:	test   BYTE PTR [rip+0x2203a0],0x80        # 240d41 <stdout@@GLIBC_2.2.5+0x1099>
   209a1:	je     2095a <g_str_equal@plt+0x185a2>
   209a3:	mov    rdi,rsp
   209a6:	xor    esi,esi
   209a8:	call   7a90 <gettimeofday@plt>
   209ad:	mov    r13,QWORD PTR [rsp+0x8]
   209b2:	mov    r12,QWORD PTR [rsp]
   209b6:	call   7bf0 <getpid@plt>
   209bb:	lea    rdi,[rip+0xcc26]        # 2d5e8 <_fini@@Base+0x4364>
   209c2:	mov    esi,eax
   209c4:	mov    r9,rbp
   209c7:	mov    r8,rbx
   209ca:	mov    rcx,r13
   209cd:	mov    rdx,r12
   209d0:	xor    eax,eax
   209d2:	call   10b60 <g_str_equal@plt+0x87a8>
   209d7:	jmp    2095a <g_str_equal@plt+0x185a2>
   209d9:	call   8050 <__stack_chk_fail@plt>
   209de:	xchg   ax,ax
   209e0:	push   r14
   209e2:	push   r13
   209e4:	push   r12
   209e6:	push   rbp
   209e7:	mov    r12,rsi
   209ea:	push   rbx
   209eb:	mov    rbp,rdi
   209ee:	mov    rbx,rdx
   209f1:	sub    rsp,0x20
   209f5:	mov    ecx,DWORD PTR [rip+0x2213fd]        # 241df8 <stdout@@GLIBC_2.2.5+0x2150>
   209fb:	mov    rax,QWORD PTR fs:0x28
   20a04:	mov    QWORD PTR [rsp+0x18],rax
   20a09:	xor    eax,eax
   20a0b:	test   ecx,ecx
   20a0d:	jne    20a50 <g_str_equal@plt+0x18698>
   20a0f:	mov    rax,QWORD PTR [rbp+0x88]
   20a16:	test   rax,rax
   20a19:	je     20a26 <g_str_equal@plt+0x1866e>
   20a1b:	mov    rdx,rbx
   20a1e:	mov    rsi,r12
   20a21:	mov    rdi,rbp
   20a24:	call   rax
   20a26:	mov    rcx,QWORD PTR [rsp+0x18]
   20a2b:	xor    rcx,QWORD PTR fs:0x28
   20a34:	movzx  eax,BYTE PTR [rbx]
   20a37:	jne    20aa3 <g_str_equal@plt+0x186eb>
   20a39:	add    rsp,0x20
   20a3d:	pop    rbx
   20a3e:	pop    rbp
   20a3f:	pop    r12
   20a41:	pop    r13
   20a43:	pop    r14
   20a45:	ret    
   20a46:	nop    WORD PTR cs:[rax+rax*1+0x0]
   20a50:	cmp    WORD PTR [rip+0x2216c6],0x0        # 24211e <stdout@@GLIBC_2.2.5+0x2476>
   20a58:	je     20a0f <g_str_equal@plt+0x18657>
   20a5a:	test   BYTE PTR [rip+0x2202e0],0x80        # 240d41 <stdout@@GLIBC_2.2.5+0x1099>
   20a61:	je     20a0f <g_str_equal@plt+0x18657>
   20a63:	mov    rdi,rsp
   20a66:	xor    esi,esi
   20a68:	call   7a90 <gettimeofday@plt>
   20a6d:	mov    r14,QWORD PTR [rsp+0x8]
   20a72:	mov    r13,QWORD PTR [rsp]
   20a76:	call   7bf0 <getpid@plt>
   20a7b:	sub    rsp,0x8
   20a7f:	lea    rdi,[rip+0xcb92]        # 2d618 <_fini@@Base+0x4394>
   20a86:	mov    esi,eax
   20a88:	push   rbx
   20a89:	mov    rdx,r13
   20a8c:	mov    r9,r12
   20a8f:	mov    r8,rbp
   20a92:	mov    rcx,r14
   20a95:	xor    eax,eax
   20a97:	call   10b60 <g_str_equal@plt+0x87a8>
   20a9c:	pop    rax
   20a9d:	pop    rdx
   20a9e:	jmp    20a0f <g_str_equal@plt+0x18657>
   20aa3:	call   8050 <__stack_chk_fail@plt>
   20aa8:	nop    DWORD PTR [rax+rax*1+0x0]
   20ab0:	cmp    DWORD PTR [rdi+0x90],0x1
   20ab7:	sete   al
   20aba:	ret    
   20abb:	nop    DWORD PTR [rax+rax*1+0x0]
   20ac0:	push   r15
   20ac2:	push   r14
   20ac4:	push   r13
   20ac6:	push   r12
   20ac8:	push   rbp
   20ac9:	push   rbx
   20aca:	sub    rsp,0x28
   20ace:	mov    rax,QWORD PTR fs:0x28
   20ad7:	mov    QWORD PTR [rsp+0x18],rax
   20adc:	xor    eax,eax
   20ade:	test   rdx,rdx
   20ae1:	je     20b83 <g_str_equal@plt+0x187cb>
   20ae7:	mov    r13,rcx
   20aea:	mov    ecx,DWORD PTR [rip+0x221308]        # 241df8 <stdout@@GLIBC_2.2.5+0x2150>
   20af0:	mov    rbp,rdi
   20af3:	mov    r12,rsi
   20af6:	mov    rbx,rdx
   20af9:	test   ecx,ecx
   20afb:	jne    20b30 <g_str_equal@plt+0x18778>
   20afd:	mov    rcx,r13
   20b00:	mov    rdx,rbx
   20b03:	mov    rsi,r12
   20b06:	mov    rdi,rbp
   20b09:	call   QWORD PTR [rbp+0x48]
   20b0c:	mov    rax,QWORD PTR [rsp+0x18]
   20b11:	xor    rax,QWORD PTR fs:0x28
   20b1a:	jne    20ba2 <g_str_equal@plt+0x187ea>
   20b20:	add    rsp,0x28
   20b24:	pop    rbx
   20b25:	pop    rbp
   20b26:	pop    r12
   20b28:	pop    r13
   20b2a:	pop    r14
   20b2c:	pop    r15
   20b2e:	ret    
   20b2f:	nop
   20b30:	cmp    WORD PTR [rip+0x2215e2],0x0        # 24211a <stdout@@GLIBC_2.2.5+0x2472>
   20b38:	je     20afd <g_str_equal@plt+0x18745>
   20b3a:	test   BYTE PTR [rip+0x220200],0x80        # 240d41 <stdout@@GLIBC_2.2.5+0x1099>
   20b41:	je     20afd <g_str_equal@plt+0x18745>
   20b43:	mov    rdi,rsp
   20b46:	xor    esi,esi
   20b48:	call   7a90 <gettimeofday@plt>
   20b4d:	mov    r15,QWORD PTR [rsp+0x8]
   20b52:	mov    r14,QWORD PTR [rsp]
   20b56:	call   7bf0 <getpid@plt>
   20b5b:	sub    rsp,0x8
   20b5f:	lea    rdi,[rip+0xcaea]        # 2d650 <_fini@@Base+0x43cc>
   20b66:	mov    esi,eax
   20b68:	push   rbx
   20b69:	mov    rdx,r14
   20b6c:	mov    r9,r12
   20b6f:	mov    r8,rbp
   20b72:	mov    rcx,r15
   20b75:	xor    eax,eax
   20b77:	call   10b60 <g_str_equal@plt+0x87a8>
   20b7c:	pop    rax
   20b7d:	pop    rdx
   20b7e:	jmp    20afd <g_str_equal@plt+0x18745>
   20b83:	lea    rcx,[rip+0xcf7e]        # 2db08 <_fini@@Base+0x4884>
   20b8a:	lea    rsi,[rip+0xc73f]        # 2d2d0 <_fini@@Base+0x404c>
   20b91:	lea    rdi,[rip+0xd836]        # 2e3ce <_fini@@Base+0x514a>
   20b98:	mov    edx,0x94
   20b9d:	call   7a70 <__assert_fail@plt>
   20ba2:	call   8050 <__stack_chk_fail@plt>
   20ba7:	nop    WORD PTR [rax+rax*1+0x0]
   20bb0:	push   r15
   20bb2:	push   r14
   20bb4:	mov    r14,rcx
   20bb7:	push   r13
   20bb9:	push   r12
   20bbb:	mov    r13,rsi
   20bbe:	push   rbp
   20bbf:	push   rbx
   20bc0:	mov    rbp,rdi
   20bc3:	mov    rbx,rdx
   20bc6:	sub    rsp,0x38
   20bca:	mov    ecx,DWORD PTR [rip+0x221228]        # 241df8 <stdout@@GLIBC_2.2.5+0x2150>
   20bd0:	mov    rax,QWORD PTR fs:0x28
   20bd9:	mov    QWORD PTR [rsp+0x28],rax
   20bde:	xor    eax,eax
   20be0:	lea    r12,[rsp+0x10]
   20be5:	test   ecx,ecx
   20be7:	jne    20c38 <g_str_equal@plt+0x18880>
   20be9:	movzx  eax,BYTE PTR [rbx]
   20bec:	lea    r8,[rip+0xc6b1]        # 2d2a4 <_fini@@Base+0x4020>
   20bf3:	mov    r9,r14
   20bf6:	mov    ecx,0xff
   20bfb:	mov    rdx,r13
   20bfe:	mov    rsi,r12
   20c01:	mov    rdi,rbp
   20c04:	mov    QWORD PTR [rsp+0x10],rax
   20c09:	call   1fd60 <g_str_equal@plt+0x179a8>
   20c0e:	mov    rax,QWORD PTR [rsp+0x10]
   20c13:	mov    BYTE PTR [rbx],al
   20c15:	mov    rax,QWORD PTR [rsp+0x28]
   20c1a:	xor    rax,QWORD PTR fs:0x28
   20c23:	jne    20c93 <g_str_equal@plt+0x188db>
   20c25:	add    rsp,0x38
   20c29:	pop    rbx
   20c2a:	pop    rbp
   20c2b:	pop    r12
   20c2d:	pop    r13
   20c2f:	pop    r14
   20c31:	pop    r15
   20c33:	ret    
   20c34:	nop    DWORD PTR [rax+0x0]
   20c38:	cmp    WORD PTR [rip+0x2214d8],0x0        # 242118 <stdout@@GLIBC_2.2.5+0x2470>
   20c40:	je     20be9 <g_str_equal@plt+0x18831>
   20c42:	test   BYTE PTR [rip+0x2200f8],0x80        # 240d41 <stdout@@GLIBC_2.2.5+0x1099>
   20c49:	je     20be9 <g_str_equal@plt+0x18831>
   20c4b:	xor    esi,esi
   20c4d:	mov    rdi,r12
   20c50:	call   7a90 <gettimeofday@plt>
   20c55:	mov    rcx,QWORD PTR [rsp+0x18]
   20c5a:	mov    r15,QWORD PTR [rsp+0x10]
   20c5f:	mov    QWORD PTR [rsp+0x8],rcx
   20c64:	call   7bf0 <getpid@plt>
   20c69:	sub    rsp,0x8
   20c6d:	lea    rdi,[rip+0xca14]        # 2d688 <_fini@@Base+0x4404>
   20c74:	mov    rdx,r15
   20c77:	push   rbx
   20c78:	mov    rcx,QWORD PTR [rsp+0x18]
   20c7d:	mov    esi,eax
   20c7f:	mov    r9,r13
   20c82:	mov    r8,rbp
   20c85:	xor    eax,eax
   20c87:	call   10b60 <g_str_equal@plt+0x87a8>
   20c8c:	pop    rax
   20c8d:	pop    rdx
   20c8e:	jmp    20be9 <g_str_equal@plt+0x18831>
   20c93:	call   8050 <__stack_chk_fail@plt>
   20c98:	nop    DWORD PTR [rax+rax*1+0x0]
   20ca0:	push   r15
   20ca2:	push   r14
   20ca4:	mov    r14,rcx
   20ca7:	push   r13
   20ca9:	push   r12
   20cab:	mov    r13,rsi
   20cae:	push   rbp
   20caf:	push   rbx
   20cb0:	mov    rbp,rdi
   20cb3:	mov    rbx,rdx
   20cb6:	sub    rsp,0x38
   20cba:	mov    ecx,DWORD PTR [rip+0x221138]        # 241df8 <stdout@@GLIBC_2.2.5+0x2150>
   20cc0:	mov    rax,QWORD PTR fs:0x28
   20cc9:	mov    QWORD PTR [rsp+0x28],rax
   20cce:	xor    eax,eax
   20cd0:	lea    r12,[rsp+0x10]
   20cd5:	test   ecx,ecx
   20cd7:	jne    20d28 <g_str_equal@plt+0x18970>
   20cd9:	movzx  eax,WORD PTR [rbx]
   20cdc:	lea    r8,[rip+0xc5c9]        # 2d2ac <_fini@@Base+0x4028>
   20ce3:	mov    r9,r14
   20ce6:	mov    ecx,0xffff
   20ceb:	mov    rdx,r13
   20cee:	mov    rsi,r12
   20cf1:	mov    rdi,rbp
   20cf4:	mov    QWORD PTR [rsp+0x10],rax
   20cf9:	call   1fd60 <g_str_equal@plt+0x179a8>
   20cfe:	mov    rax,QWORD PTR [rsp+0x10]
   20d03:	mov    WORD PTR [rbx],ax
   20d06:	mov    rax,QWORD PTR [rsp+0x28]
   20d0b:	xor    rax,QWORD PTR fs:0x28
   20d14:	jne    20d83 <g_str_equal@plt+0x189cb>
   20d16:	add    rsp,0x38
   20d1a:	pop    rbx
   20d1b:	pop    rbp
   20d1c:	pop    r12
   20d1e:	pop    r13
   20d20:	pop    r14
   20d22:	pop    r15
   20d24:	ret    
   20d25:	nop    DWORD PTR [rax]
   20d28:	cmp    WORD PTR [rip+0x2213e6],0x0        # 242116 <stdout@@GLIBC_2.2.5+0x246e>
   20d30:	je     20cd9 <g_str_equal@plt+0x18921>
   20d32:	test   BYTE PTR [rip+0x220008],0x80        # 240d41 <stdout@@GLIBC_2.2.5+0x1099>
   20d39:	je     20cd9 <g_str_equal@plt+0x18921>
   20d3b:	xor    esi,esi
   20d3d:	mov    rdi,r12
   20d40:	call   7a90 <gettimeofday@plt>
   20d45:	mov    rcx,QWORD PTR [rsp+0x18]
   20d4a:	mov    r15,QWORD PTR [rsp+0x10]
   20d4f:	mov    QWORD PTR [rsp+0x8],rcx
   20d54:	call   7bf0 <getpid@plt>
   20d59:	sub    rsp,0x8
   20d5d:	lea    rdi,[rip+0xc95c]        # 2d6c0 <_fini@@Base+0x443c>
   20d64:	mov    rdx,r15
   20d67:	push   rbx
   20d68:	mov    rcx,QWORD PTR [rsp+0x18]
   20d6d:	mov    esi,eax
   20d6f:	mov    r9,r13
   20d72:	mov    r8,rbp
   20d75:	xor    eax,eax
   20d77:	call   10b60 <g_str_equal@plt+0x87a8>
   20d7c:	pop    rax
   20d7d:	pop    rdx
   20d7e:	jmp    20cd9 <g_str_equal@plt+0x18921>
   20d83:	call   8050 <__stack_chk_fail@plt>
   20d88:	nop    DWORD PTR [rax+rax*1+0x0]
   20d90:	push   r15
   20d92:	push   r14
   20d94:	mov    r14,rcx
   20d97:	push   r13
   20d99:	push   r12
   20d9b:	mov    r13,rsi
   20d9e:	push   rbp
   20d9f:	push   rbx
   20da0:	mov    rbp,rdi
   20da3:	mov    rbx,rdx
   20da6:	sub    rsp,0x38
   20daa:	mov    ecx,DWORD PTR [rip+0x221048]        # 241df8 <stdout@@GLIBC_2.2.5+0x2150>
   20db0:	mov    rax,QWORD PTR fs:0x28
   20db9:	mov    QWORD PTR [rsp+0x28],rax
   20dbe:	xor    eax,eax
   20dc0:	lea    r12,[rsp+0x10]
   20dc5:	test   ecx,ecx
   20dc7:	jne    20e18 <g_str_equal@plt+0x18a60>
   20dc9:	mov    eax,DWORD PTR [rbx]
   20dcb:	lea    r8,[rip+0xc4e3]        # 2d2b5 <_fini@@Base+0x4031>
   20dd2:	mov    r9,r14
   20dd5:	mov    ecx,0xffffffff
   20dda:	mov    rdx,r13
   20ddd:	mov    rsi,r12
   20de0:	mov    rdi,rbp
   20de3:	mov    QWORD PTR [rsp+0x10],rax
   20de8:	call   1fd60 <g_str_equal@plt+0x179a8>
   20ded:	mov    rax,QWORD PTR [rsp+0x10]
   20df2:	mov    DWORD PTR [rbx],eax
   20df4:	mov    rax,QWORD PTR [rsp+0x28]
   20df9:	xor    rax,QWORD PTR fs:0x28
   20e02:	jne    20e73 <g_str_equal@plt+0x18abb>
   20e04:	add    rsp,0x38
   20e08:	pop    rbx
   20e09:	pop    rbp
   20e0a:	pop    r12
   20e0c:	pop    r13
   20e0e:	pop    r14
   20e10:	pop    r15
   20e12:	ret    
   20e13:	nop    DWORD PTR [rax+rax*1+0x0]
   20e18:	cmp    WORD PTR [rip+0x2212f4],0x0        # 242114 <stdout@@GLIBC_2.2.5+0x246c>
   20e20:	je     20dc9 <g_str_equal@plt+0x18a11>
   20e22:	test   BYTE PTR [rip+0x21ff18],0x80        # 240d41 <stdout@@GLIBC_2.2.5+0x1099>
   20e29:	je     20dc9 <g_str_equal@plt+0x18a11>
   20e2b:	xor    esi,esi
   20e2d:	mov    rdi,r12
   20e30:	call   7a90 <gettimeofday@plt>
   20e35:	mov    rcx,QWORD PTR [rsp+0x18]
   20e3a:	mov    r15,QWORD PTR [rsp+0x10]
   20e3f:	mov    QWORD PTR [rsp+0x8],rcx
   20e44:	call   7bf0 <getpid@plt>
   20e49:	sub    rsp,0x8
   20e4d:	lea    rdi,[rip+0xc8a4]        # 2d6f8 <_fini@@Base+0x4474>
   20e54:	mov    rdx,r15
   20e57:	push   rbx
   20e58:	mov    rcx,QWORD PTR [rsp+0x18]
   20e5d:	mov    esi,eax
   20e5f:	mov    r9,r13
   20e62:	mov    r8,rbp
   20e65:	xor    eax,eax
   20e67:	call   10b60 <g_str_equal@plt+0x87a8>
   20e6c:	pop    rax
   20e6d:	pop    rdx
   20e6e:	jmp    20dc9 <g_str_equal@plt+0x18a11>
   20e73:	call   8050 <__stack_chk_fail@plt>
   20e78:	nop    DWORD PTR [rax+rax*1+0x0]
   20e80:	push   r15
   20e82:	push   r14
   20e84:	push   r13
   20e86:	push   r12
   20e88:	push   rbp
   20e89:	push   rbx
   20e8a:	sub    rsp,0x28
   20e8e:	mov    rax,QWORD PTR fs:0x28
   20e97:	mov    QWORD PTR [rsp+0x18],rax
   20e9c:	xor    eax,eax
   20e9e:	test   rdx,rdx
   20ea1:	je     20f43 <g_str_equal@plt+0x18b8b>
   20ea7:	mov    r13,rcx
   20eaa:	mov    ecx,DWORD PTR [rip+0x220f48]        # 241df8 <stdout@@GLIBC_2.2.5+0x2150>
   20eb0:	mov    rbp,rdi
   20eb3:	mov    r12,rsi
   20eb6:	mov    rbx,rdx
   20eb9:	test   ecx,ecx
   20ebb:	jne    20ef0 <g_str_equal@plt+0x18b38>
   20ebd:	mov    rcx,r13
   20ec0:	mov    rdx,rbx
   20ec3:	mov    rsi,r12
   20ec6:	mov    rdi,rbp
   20ec9:	call   QWORD PTR [rbp+0x50]
   20ecc:	mov    rax,QWORD PTR [rsp+0x18]
   20ed1:	xor    rax,QWORD PTR fs:0x28
   20eda:	jne    20f62 <g_str_equal@plt+0x18baa>
   20ee0:	add    rsp,0x28
   20ee4:	pop    rbx
   20ee5:	pop    rbp
   20ee6:	pop    r12
   20ee8:	pop    r13
   20eea:	pop    r14
   20eec:	pop    r15
   20eee:	ret    
   20eef:	nop
   20ef0:	cmp    WORD PTR [rip+0x22121a],0x0        # 242112 <stdout@@GLIBC_2.2.5+0x246a>
   20ef8:	je     20ebd <g_str_equal@plt+0x18b05>
   20efa:	test   BYTE PTR [rip+0x21fe40],0x80        # 240d41 <stdout@@GLIBC_2.2.5+0x1099>
   20f01:	je     20ebd <g_str_equal@plt+0x18b05>
   20f03:	mov    rdi,rsp
   20f06:	xor    esi,esi
   20f08:	call   7a90 <gettimeofday@plt>
   20f0d:	mov    r15,QWORD PTR [rsp+0x8]
   20f12:	mov    r14,QWORD PTR [rsp]
   20f16:	call   7bf0 <getpid@plt>
   20f1b:	sub    rsp,0x8
   20f1f:	lea    rdi,[rip+0xc80a]        # 2d730 <_fini@@Base+0x44ac>
   20f26:	mov    esi,eax
   20f28:	push   rbx
   20f29:	mov    rdx,r14
   20f2c:	mov    r9,r12
   20f2f:	mov    r8,rbp
   20f32:	mov    rcx,r15
   20f35:	xor    eax,eax
   20f37:	call   10b60 <g_str_equal@plt+0x87a8>
   20f3c:	pop    rax
   20f3d:	pop    rdx
   20f3e:	jmp    20ebd <g_str_equal@plt+0x18b05>
   20f43:	lea    rcx,[rip+0xcb86]        # 2dad0 <_fini@@Base+0x484c>
   20f4a:	lea    rsi,[rip+0xc37f]        # 2d2d0 <_fini@@Base+0x404c>
   20f51:	lea    rdi,[rip+0xd476]        # 2e3ce <_fini@@Base+0x514a>
   20f58:	mov    edx,0xce
   20f5d:	call   7a70 <__assert_fail@plt>
   20f62:	call   8050 <__stack_chk_fail@plt>
   20f67:	nop    WORD PTR [rax+rax*1+0x0]
   20f70:	push   r15
   20f72:	push   r14
   20f74:	mov    r14,rcx
   20f77:	push   r13
   20f79:	push   r12
   20f7b:	mov    r13,rsi
   20f7e:	push   rbp
   20f7f:	push   rbx
   20f80:	mov    rbp,rdi
   20f83:	mov    rbx,rdx
   20f86:	sub    rsp,0x38
   20f8a:	mov    edi,DWORD PTR [rip+0x220e68]        # 241df8 <stdout@@GLIBC_2.2.5+0x2150>
   20f90:	mov    rax,QWORD PTR fs:0x28
   20f99:	mov    QWORD PTR [rsp+0x28],rax
   20f9e:	xor    eax,eax
   20fa0:	lea    r12,[rsp+0x10]
   20fa5:	test   edi,edi
   20fa7:	jne    21008 <g_str_equal@plt+0x18c50>
   20fa9:	movsx  rax,BYTE PTR [rbx]
   20fad:	sub    rsp,0x8
   20fb1:	lea    r9,[rip+0xc2ed]        # 2d2a5 <_fini@@Base+0x4021>
   20fb8:	mov    rdx,r13
   20fbb:	mov    r8d,0x7f
   20fc1:	mov    rcx,0xffffffffffffff80
   20fc8:	mov    rsi,r12
   20fcb:	mov    rdi,rbp
   20fce:	mov    QWORD PTR [rsp+0x18],rax
   20fd3:	push   r14
   20fd5:	call   1fe40 <g_str_equal@plt+0x17a88>
   20fda:	mov    rax,QWORD PTR [rsp+0x20]
   20fdf:	mov    BYTE PTR [rbx],al
   20fe1:	pop    rax
   20fe2:	pop    rdx
   20fe3:	mov    rax,QWORD PTR [rsp+0x28]
   20fe8:	xor    rax,QWORD PTR fs:0x28
   20ff1:	jne    21063 <g_str_equal@plt+0x18cab>
   20ff3:	add    rsp,0x38
   20ff7:	pop    rbx
   20ff8:	pop    rbp
   20ff9:	pop    r12
   20ffb:	pop    r13
   20ffd:	pop    r14
   20fff:	pop    r15
   21001:	ret    
   21002:	nop    WORD PTR [rax+rax*1+0x0]
   21008:	cmp    WORD PTR [rip+0x221100],0x0        # 242110 <stdout@@GLIBC_2.2.5+0x2468>
   21010:	je     20fa9 <g_str_equal@plt+0x18bf1>
   21012:	test   BYTE PTR [rip+0x21fd28],0x80        # 240d41 <stdout@@GLIBC_2.2.5+0x1099>
   21019:	je     20fa9 <g_str_equal@plt+0x18bf1>
   2101b:	xor    esi,esi
   2101d:	mov    rdi,r12
   21020:	call   7a90 <gettimeofday@plt>
   21025:	mov    rcx,QWORD PTR [rsp+0x18]
   2102a:	mov    r15,QWORD PTR [rsp+0x10]
   2102f:	mov    QWORD PTR [rsp+0x8],rcx
   21034:	call   7bf0 <getpid@plt>
   21039:	sub    rsp,0x8
   2103d:	lea    rdi,[rip+0xc724]        # 2d768 <_fini@@Base+0x44e4>
   21044:	mov    esi,eax
   21046:	push   rbx
   21047:	mov    rcx,QWORD PTR [rsp+0x18]
   2104c:	mov    r9,r13
   2104f:	mov    r8,rbp
   21052:	mov    rdx,r15
   21055:	xor    eax,eax
   21057:	call   10b60 <g_str_equal@plt+0x87a8>
   2105c:	pop    rcx
   2105d:	pop    rsi
   2105e:	jmp    20fa9 <g_str_equal@plt+0x18bf1>
   21063:	call   8050 <__stack_chk_fail@plt>
   21068:	nop    DWORD PTR [rax+rax*1+0x0]
   21070:	push   r15
   21072:	push   r14
   21074:	mov    r14,rcx
   21077:	push   r13
   21079:	push   r12
   2107b:	mov    r13,rsi
   2107e:	push   rbp
   2107f:	push   rbx
   21080:	mov    rbp,rdi
   21083:	mov    rbx,rdx
   21086:	sub    rsp,0x38
   2108a:	mov    edi,DWORD PTR [rip+0x220d68]        # 241df8 <stdout@@GLIBC_2.2.5+0x2150>
   21090:	mov    rax,QWORD PTR fs:0x28
   21099:	mov    QWORD PTR [rsp+0x28],rax
   2109e:	xor    eax,eax
   210a0:	lea    r12,[rsp+0x10]
   210a5:	test   edi,edi
   210a7:	jne    21108 <g_str_equal@plt+0x18d50>
   210a9:	movsx  rax,WORD PTR [rbx]
   210ad:	sub    rsp,0x8
   210b1:	lea    r9,[rip+0xc1f5]        # 2d2ad <_fini@@Base+0x4029>
   210b8:	mov    rdx,r13
   210bb:	mov    r8d,0x7fff
   210c1:	mov    rcx,0xffffffffffff8000
   210c8:	mov    rsi,r12
   210cb:	mov    rdi,rbp
   210ce:	mov    QWORD PTR [rsp+0x18],rax
   210d3:	push   r14
   210d5:	call   1fe40 <g_str_equal@plt+0x17a88>
   210da:	mov    rax,QWORD PTR [rsp+0x20]
   210df:	mov    WORD PTR [rbx],ax
   210e2:	pop    rax
   210e3:	pop    rdx
   210e4:	mov    rax,QWORD PTR [rsp+0x28]
   210e9:	xor    rax,QWORD PTR fs:0x28
   210f2:	jne    21163 <g_str_equal@plt+0x18dab>
   210f4:	add    rsp,0x38
   210f8:	pop    rbx
   210f9:	pop    rbp
   210fa:	pop    r12
   210fc:	pop    r13
   210fe:	pop    r14
   21100:	pop    r15
   21102:	ret    
   21103:	nop    DWORD PTR [rax+rax*1+0x0]
   21108:	cmp    WORD PTR [rip+0x220ffe],0x0        # 24210e <stdout@@GLIBC_2.2.5+0x2466>
   21110:	je     210a9 <g_str_equal@plt+0x18cf1>
   21112:	test   BYTE PTR [rip+0x21fc28],0x80        # 240d41 <stdout@@GLIBC_2.2.5+0x1099>
   21119:	je     210a9 <g_str_equal@plt+0x18cf1>
   2111b:	xor    esi,esi
   2111d:	mov    rdi,r12
   21120:	call   7a90 <gettimeofday@plt>
   21125:	mov    rcx,QWORD PTR [rsp+0x18]
   2112a:	mov    r15,QWORD PTR [rsp+0x10]
   2112f:	mov    QWORD PTR [rsp+0x8],rcx
   21134:	call   7bf0 <getpid@plt>
   21139:	sub    rsp,0x8
   2113d:	lea    rdi,[rip+0xc65c]        # 2d7a0 <_fini@@Base+0x451c>
   21144:	mov    esi,eax
   21146:	push   rbx
   21147:	mov    rcx,QWORD PTR [rsp+0x18]
   2114c:	mov    r9,r13
   2114f:	mov    r8,rbp
   21152:	mov    rdx,r15
   21155:	xor    eax,eax
   21157:	call   10b60 <g_str_equal@plt+0x87a8>
   2115c:	pop    rcx
   2115d:	pop    rsi
   2115e:	jmp    210a9 <g_str_equal@plt+0x18cf1>
   21163:	call   8050 <__stack_chk_fail@plt>
   21168:	nop    DWORD PTR [rax+rax*1+0x0]
   21170:	push   r15
   21172:	push   r14
   21174:	mov    r14,rcx
   21177:	push   r13
   21179:	push   r12
   2117b:	mov    r13,rsi
   2117e:	push   rbp
   2117f:	push   rbx
   21180:	mov    rbp,rdi
   21183:	mov    rbx,rdx
   21186:	sub    rsp,0x38
   2118a:	mov    edi,DWORD PTR [rip+0x220c68]        # 241df8 <stdout@@GLIBC_2.2.5+0x2150>
   21190:	mov    rax,QWORD PTR fs:0x28
   21199:	mov    QWORD PTR [rsp+0x28],rax
   2119e:	xor    eax,eax
   211a0:	lea    r12,[rsp+0x10]
   211a5:	test   edi,edi
   211a7:	jne    21208 <g_str_equal@plt+0x18e50>
   211a9:	movsxd rax,DWORD PTR [rbx]
   211ac:	sub    rsp,0x8
   211b0:	lea    r9,[rip+0xc0ff]        # 2d2b6 <_fini@@Base+0x4032>
   211b7:	mov    rdx,r13
   211ba:	mov    r8d,0x7fffffff
   211c0:	mov    rcx,0xffffffff80000000
   211c7:	mov    rsi,r12
   211ca:	mov    rdi,rbp
   211cd:	mov    QWORD PTR [rsp+0x18],rax
   211d2:	push   r14
   211d4:	call   1fe40 <g_str_equal@plt+0x17a88>
   211d9:	mov    rax,QWORD PTR [rsp+0x20]
   211de:	mov    DWORD PTR [rbx],eax
   211e0:	pop    rax
   211e1:	pop    rdx
   211e2:	mov    rax,QWORD PTR [rsp+0x28]
   211e7:	xor    rax,QWORD PTR fs:0x28
   211f0:	jne    21263 <g_str_equal@plt+0x18eab>
   211f2:	add    rsp,0x38
   211f6:	pop    rbx
   211f7:	pop    rbp
   211f8:	pop    r12
   211fa:	pop    r13
   211fc:	pop    r14
   211fe:	pop    r15
   21200:	ret    
   21201:	nop    DWORD PTR [rax+0x0]
   21208:	cmp    WORD PTR [rip+0x220efc],0x0        # 24210c <stdout@@GLIBC_2.2.5+0x2464>
   21210:	je     211a9 <g_str_equal@plt+0x18df1>
   21212:	test   BYTE PTR [rip+0x21fb28],0x80        # 240d41 <stdout@@GLIBC_2.2.5+0x1099>
   21219:	je     211a9 <g_str_equal@plt+0x18df1>
   2121b:	xor    esi,esi
   2121d:	mov    rdi,r12
   21220:	call   7a90 <gettimeofday@plt>
   21225:	mov    rcx,QWORD PTR [rsp+0x18]
   2122a:	mov    r15,QWORD PTR [rsp+0x10]
   2122f:	mov    QWORD PTR [rsp+0x8],rcx
   21234:	call   7bf0 <getpid@plt>
   21239:	sub    rsp,0x8
   2123d:	lea    rdi,[rip+0xc594]        # 2d7d8 <_fini@@Base+0x4554>
   21244:	mov    esi,eax
   21246:	push   rbx
   21247:	mov    rcx,QWORD PTR [rsp+0x18]
   2124c:	mov    r9,r13
   2124f:	mov    r8,rbp
   21252:	mov    rdx,r15
   21255:	xor    eax,eax
   21257:	call   10b60 <g_str_equal@plt+0x87a8>
   2125c:	pop    rcx
   2125d:	pop    rsi
   2125e:	jmp    211a9 <g_str_equal@plt+0x18df1>
   21263:	call   8050 <__stack_chk_fail@plt>
   21268:	nop    DWORD PTR [rax+rax*1+0x0]
   21270:	push   r15
   21272:	push   r14
   21274:	push   r13
   21276:	push   r12
   21278:	push   rbp
   21279:	push   rbx
   2127a:	sub    rsp,0x28
   2127e:	mov    rax,QWORD PTR fs:0x28
   21287:	mov    QWORD PTR [rsp+0x18],rax
   2128c:	xor    eax,eax
   2128e:	test   rdx,rdx
   21291:	je     21333 <g_str_equal@plt+0x18f7b>
   21297:	mov    r13,rcx
   2129a:	mov    ecx,DWORD PTR [rip+0x220b58]        # 241df8 <stdout@@GLIBC_2.2.5+0x2150>
   212a0:	mov    rbp,rdi
   212a3:	mov    r12,rsi
   212a6:	mov    rbx,rdx
   212a9:	test   ecx,ecx
   212ab:	jne    212e0 <g_str_equal@plt+0x18f28>
   212ad:	mov    rcx,r13
   212b0:	mov    rdx,rbx
   212b3:	mov    rsi,r12
   212b6:	mov    rdi,rbp
   212b9:	call   QWORD PTR [rbp+0x48]
   212bc:	mov    rax,QWORD PTR [rsp+0x18]
   212c1:	xor    rax,QWORD PTR fs:0x28
   212ca:	jne    21352 <g_str_equal@plt+0x18f9a>
   212d0:	add    rsp,0x28
   212d4:	pop    rbx
   212d5:	pop    rbp
   212d6:	pop    r12
   212d8:	pop    r13
   212da:	pop    r14
   212dc:	pop    r15
   212de:	ret    
   212df:	nop
   212e0:	cmp    WORD PTR [rip+0x220e22],0x0        # 24210a <stdout@@GLIBC_2.2.5+0x2462>
   212e8:	je     212ad <g_str_equal@plt+0x18ef5>
   212ea:	test   BYTE PTR [rip+0x21fa50],0x80        # 240d41 <stdout@@GLIBC_2.2.5+0x1099>
   212f1:	je     212ad <g_str_equal@plt+0x18ef5>
   212f3:	mov    rdi,rsp
   212f6:	xor    esi,esi
   212f8:	call   7a90 <gettimeofday@plt>
   212fd:	mov    r15,QWORD PTR [rsp+0x8]
   21302:	mov    r14,QWORD PTR [rsp]
   21306:	call   7bf0 <getpid@plt>
   2130b:	sub    rsp,0x8
   2130f:	lea    rdi,[rip+0xc4fa]        # 2d810 <_fini@@Base+0x458c>
   21316:	mov    esi,eax
   21318:	push   rbx
   21319:	mov    rdx,r14
   2131c:	mov    r9,r12
   2131f:	mov    r8,rbp
   21322:	mov    rcx,r15
   21325:	xor    eax,eax
   21327:	call   10b60 <g_str_equal@plt+0x87a8>
   2132c:	pop    rax
   2132d:	pop    rdx
   2132e:	jmp    212ad <g_str_equal@plt+0x18ef5>
   21333:	lea    rcx,[rip+0xc766]        # 2daa0 <_fini@@Base+0x481c>
   2133a:	lea    rsi,[rip+0xbf8f]        # 2d2d0 <_fini@@Base+0x404c>
   21341:	lea    rdi,[rip+0xd086]        # 2e3ce <_fini@@Base+0x514a>
   21348:	mov    edx,0x108
   2134d:	call   7a70 <__assert_fail@plt>
   21352:	call   8050 <__stack_chk_fail@plt>
   21357:	nop    WORD PTR [rax+rax*1+0x0]
   21360:	push   r15
   21362:	push   r14
   21364:	push   r13
   21366:	push   r12
   21368:	push   rbp
   21369:	push   rbx
   2136a:	sub    rsp,0x28
   2136e:	mov    rax,QWORD PTR fs:0x28
   21377:	mov    QWORD PTR [rsp+0x18],rax
   2137c:	xor    eax,eax
   2137e:	test   rdx,rdx
   21381:	je     2143b <g_str_equal@plt+0x19083>
   21387:	mov    r13,rcx
   2138a:	mov    ecx,DWORD PTR [rip+0x220a68]        # 241df8 <stdout@@GLIBC_2.2.5+0x2150>
   21390:	mov    rbx,rdi
   21393:	mov    r12,rsi
   21396:	mov    rbp,rdx
   21399:	test   ecx,ecx
   2139b:	jne    213e8 <g_str_equal@plt+0x19030>
   2139d:	mov    rax,QWORD PTR [rbx+0x58]
   213a1:	mov    rcx,r13
   213a4:	mov    rdx,rbp
   213a7:	mov    rsi,r12
   213aa:	mov    rdi,rbx
   213ad:	test   rax,rax
   213b0:	je     213e0 <g_str_equal@plt+0x19028>
   213b2:	call   rax
   213b4:	mov    rax,QWORD PTR [rsp+0x18]
   213b9:	xor    rax,QWORD PTR fs:0x28
   213c2:	jne    2145a <g_str_equal@plt+0x190a2>
   213c8:	add    rsp,0x28
   213cc:	pop    rbx
   213cd:	pop    rbp
   213ce:	pop    r12
   213d0:	pop    r13
   213d2:	pop    r14
   213d4:	pop    r15
   213d6:	ret    
   213d7:	nop    WORD PTR [rax+rax*1+0x0]
   213e0:	call   QWORD PTR [rbx+0x50]
   213e3:	jmp    213b4 <g_str_equal@plt+0x18ffc>
   213e5:	nop    DWORD PTR [rax]
   213e8:	cmp    WORD PTR [rip+0x220d18],0x0        # 242108 <stdout@@GLIBC_2.2.5+0x2460>
   213f0:	je     2139d <g_str_equal@plt+0x18fe5>
   213f2:	test   BYTE PTR [rip+0x21f948],0x80        # 240d41 <stdout@@GLIBC_2.2.5+0x1099>
   213f9:	je     2139d <g_str_equal@plt+0x18fe5>
   213fb:	mov    rdi,rsp
   213fe:	xor    esi,esi
   21400:	call   7a90 <gettimeofday@plt>
   21405:	mov    r15,QWORD PTR [rsp+0x8]
   2140a:	mov    r14,QWORD PTR [rsp]
   2140e:	call   7bf0 <getpid@plt>
   21413:	sub    rsp,0x8
   21417:	lea    rdi,[rip+0xc42a]        # 2d848 <_fini@@Base+0x45c4>
   2141e:	mov    esi,eax
   21420:	push   rbp
   21421:	mov    rdx,r14
   21424:	mov    r9,r12
   21427:	mov    r8,rbx
   2142a:	mov    rcx,r15
   2142d:	xor    eax,eax
   2142f:	call   10b60 <g_str_equal@plt+0x87a8>
   21434:	pop    rax
   21435:	pop    rdx
   21436:	jmp    2139d <g_str_equal@plt+0x18fe5>
   2143b:	lea    rcx,[rip+0xc64e]        # 2da90 <_fini@@Base+0x480c>
   21442:	lea    rsi,[rip+0xbe87]        # 2d2d0 <_fini@@Base+0x404c>
   21449:	lea    rdi,[rip+0xcf7e]        # 2e3ce <_fini@@Base+0x514a>
   21450:	mov    edx,0x110
   21455:	call   7a70 <__assert_fail@plt>
   2145a:	call   8050 <__stack_chk_fail@plt>
   2145f:	nop
   21460:	push   r15
   21462:	push   r14
   21464:	push   r13
   21466:	push   r12
   21468:	push   rbp
   21469:	push   rbx
   2146a:	sub    rsp,0x28
   2146e:	mov    rax,QWORD PTR fs:0x28
   21477:	mov    QWORD PTR [rsp+0x18],rax
   2147c:	xor    eax,eax
   2147e:	test   rdx,rdx
   21481:	je     21523 <g_str_equal@plt+0x1916b>
   21487:	mov    r13,rcx
   2148a:	mov    ecx,DWORD PTR [rip+0x220968]        # 241df8 <stdout@@GLIBC_2.2.5+0x2150>
   21490:	mov    rbp,rdi
   21493:	mov    r12,rsi
   21496:	mov    rbx,rdx
   21499:	test   ecx,ecx
   2149b:	jne    214d0 <g_str_equal@plt+0x19118>
   2149d:	mov    rcx,r13
   214a0:	mov    rdx,rbx
   214a3:	mov    rsi,r12
   214a6:	mov    rdi,rbp
   214a9:	call   QWORD PTR [rbp+0x60]
   214ac:	mov    rax,QWORD PTR [rsp+0x18]
   214b1:	xor    rax,QWORD PTR fs:0x28
   214ba:	jne    21542 <g_str_equal@plt+0x1918a>
   214c0:	add    rsp,0x28
   214c4:	pop    rbx
   214c5:	pop    rbp
   214c6:	pop    r12
   214c8:	pop    r13
   214ca:	pop    r14
   214cc:	pop    r15
   214ce:	ret    
   214cf:	nop
   214d0:	cmp    WORD PTR [rip+0x220c2e],0x0        # 242106 <stdout@@GLIBC_2.2.5+0x245e>
   214d8:	je     2149d <g_str_equal@plt+0x190e5>
   214da:	test   BYTE PTR [rip+0x21f860],0x80        # 240d41 <stdout@@GLIBC_2.2.5+0x1099>
   214e1:	je     2149d <g_str_equal@plt+0x190e5>
   214e3:	mov    rdi,rsp
   214e6:	xor    esi,esi
   214e8:	call   7a90 <gettimeofday@plt>
   214ed:	mov    r15,QWORD PTR [rsp+0x8]
   214f2:	mov    r14,QWORD PTR [rsp]
   214f6:	call   7bf0 <getpid@plt>
   214fb:	sub    rsp,0x8
   214ff:	lea    rdi,[rip+0xc37a]        # 2d880 <_fini@@Base+0x45fc>
   21506:	mov    esi,eax
   21508:	push   rbx
   21509:	mov    rdx,r14
   2150c:	mov    r9,r12
   2150f:	mov    r8,rbp
   21512:	mov    rcx,r15
   21515:	xor    eax,eax
   21517:	call   10b60 <g_str_equal@plt+0x87a8>
   2151c:	pop    rax
   2151d:	pop    rdx
   2151e:	jmp    2149d <g_str_equal@plt+0x190e5>
   21523:	lea    rcx,[rip+0xc556]        # 2da80 <_fini@@Base+0x47fc>
   2152a:	lea    rsi,[rip+0xbd9f]        # 2d2d0 <_fini@@Base+0x404c>
   21531:	lea    rdi,[rip+0xce96]        # 2e3ce <_fini@@Base+0x514a>
   21538:	mov    edx,0x11b
   2153d:	call   7a70 <__assert_fail@plt>
   21542:	call   8050 <__stack_chk_fail@plt>
   21547:	nop    WORD PTR [rax+rax*1+0x0]
   21550:	push   r15
   21552:	push   r14
   21554:	push   r13
   21556:	push   r12
   21558:	push   rbp
   21559:	push   rbx
   2155a:	sub    rsp,0x38
   2155e:	mov    rax,QWORD PTR fs:0x28
   21567:	mov    QWORD PTR [rsp+0x28],rax
   2156c:	xor    eax,eax
   2156e:	test   rdx,rdx
   21571:	mov    QWORD PTR [rsp+0x8],0x0
   2157a:	je     21656 <g_str_equal@plt+0x1929e>
   21580:	mov    r13,rcx
   21583:	mov    ecx,DWORD PTR [rip+0x22086f]        # 241df8 <stdout@@GLIBC_2.2.5+0x2150>
   21589:	mov    rbx,rdi
   2158c:	mov    r12,rsi
   2158f:	mov    rbp,rdx
   21592:	test   ecx,ecx
   21594:	jne    21600 <g_str_equal@plt+0x19248>
   21596:	mov    rsi,r12
   21599:	lea    rcx,[rsp+0x8]
   2159e:	mov    rdx,rbp
   215a1:	mov    rdi,rbx
   215a4:	call   QWORD PTR [rbx+0x68]
   215a7:	test   BYTE PTR [rbx+0x90],0x1
   215ae:	mov    rsi,QWORD PTR [rsp+0x8]
   215b3:	je     215cb <g_str_equal@plt+0x19213>
   215b5:	test   rsi,rsi
   215b8:	sete   dl
   215bb:	cmp    QWORD PTR [rbp+0x0],0x0
   215c0:	sete   al
   215c3:	cmp    dl,al
   215c5:	je     2167a <g_str_equal@plt+0x192c2>
   215cb:	mov    rdi,r13
   215ce:	call   df30 <g_str_equal@plt+0x5b78>
   215d3:	mov    rax,QWORD PTR [rsp+0x28]
   215d8:	xor    rax,QWORD PTR fs:0x28
   215e1:	jne    21675 <g_str_equal@plt+0x192bd>
   215e7:	add    rsp,0x38
   215eb:	pop    rbx
   215ec:	pop    rbp
   215ed:	pop    r12
   215ef:	pop    r13
   215f1:	pop    r14
   215f3:	pop    r15
   215f5:	ret    
   215f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   21600:	cmp    WORD PTR [rip+0x220afc],0x0        # 242104 <stdout@@GLIBC_2.2.5+0x245c>
   21608:	je     21596 <g_str_equal@plt+0x191de>
   2160a:	test   BYTE PTR [rip+0x21f730],0x80        # 240d41 <stdout@@GLIBC_2.2.5+0x1099>
   21611:	je     21596 <g_str_equal@plt+0x191de>
   21613:	lea    rdi,[rsp+0x10]
   21618:	xor    esi,esi
   2161a:	call   7a90 <gettimeofday@plt>
   2161f:	mov    r15,QWORD PTR [rsp+0x18]
   21624:	mov    r14,QWORD PTR [rsp+0x10]
   21629:	call   7bf0 <getpid@plt>
   2162e:	sub    rsp,0x8
   21632:	lea    rdi,[rip+0xc27f]        # 2d8b8 <_fini@@Base+0x4634>
   21639:	mov    esi,eax
   2163b:	push   rbp
   2163c:	mov    rdx,r14
   2163f:	mov    r9,r12
   21642:	mov    r8,rbx
   21645:	mov    rcx,r15
   21648:	xor    eax,eax
   2164a:	call   10b60 <g_str_equal@plt+0x87a8>
   2164f:	pop    rax
   21650:	pop    rdx
   21651:	jmp    21596 <g_str_equal@plt+0x191de>
   21656:	lea    rcx,[rip+0xc40b]        # 2da68 <_fini@@Base+0x47e4>
   2165d:	lea    rsi,[rip+0xbc6c]        # 2d2d0 <_fini@@Base+0x404c>
   21664:	lea    rdi,[rip+0xcd63]        # 2e3ce <_fini@@Base+0x514a>
   2166b:	mov    edx,0x124
   21670:	call   7a70 <__assert_fail@plt>
   21675:	call   8050 <__stack_chk_fail@plt>
   2167a:	lea    rcx,[rip+0xc3e7]        # 2da68 <_fini@@Base+0x47e4>
   21681:	lea    rsi,[rip+0xbc48]        # 2d2d0 <_fini@@Base+0x404c>
   21688:	lea    rdi,[rip+0xbbf7]        # 2d286 <_fini@@Base+0x4002>
   2168f:	mov    edx,0x12c
   21694:	call   7a70 <__assert_fail@plt>
   21699:	nop    DWORD PTR [rax+0x0]
   216a0:	push   r15
   216a2:	push   r14
   216a4:	push   r13
   216a6:	push   r12
   216a8:	push   rbp
   216a9:	push   rbx
   216aa:	sub    rsp,0x28
   216ae:	mov    rax,QWORD PTR fs:0x28
   216b7:	mov    QWORD PTR [rsp+0x18],rax
   216bc:	xor    eax,eax
   216be:	test   rdx,rdx
   216c1:	je     21763 <g_str_equal@plt+0x193ab>
   216c7:	mov    r13,rcx
   216ca:	mov    ecx,DWORD PTR [rip+0x220728]        # 241df8 <stdout@@GLIBC_2.2.5+0x2150>
   216d0:	mov    rbp,rdi
   216d3:	mov    r12,rsi
   216d6:	mov    rbx,rdx
   216d9:	test   ecx,ecx
   216db:	jne    21710 <g_str_equal@plt+0x19358>
   216dd:	mov    rcx,r13
   216e0:	mov    rdx,rbx
   216e3:	mov    rsi,r12
   216e6:	mov    rdi,rbp
   216e9:	call   QWORD PTR [rbp+0x70]
   216ec:	mov    rax,QWORD PTR [rsp+0x18]
   216f1:	xor    rax,QWORD PTR fs:0x28
   216fa:	jne    21782 <g_str_equal@plt+0x193ca>
   21700:	add    rsp,0x28
   21704:	pop    rbx
   21705:	pop    rbp
   21706:	pop    r12
   21708:	pop    r13
   2170a:	pop    r14
   2170c:	pop    r15
   2170e:	ret    
   2170f:	nop
   21710:	cmp    WORD PTR [rip+0x2209ea],0x0        # 242102 <stdout@@GLIBC_2.2.5+0x245a>
   21718:	je     216dd <g_str_equal@plt+0x19325>
   2171a:	test   BYTE PTR [rip+0x21f620],0x80        # 240d41 <stdout@@GLIBC_2.2.5+0x1099>
   21721:	je     216dd <g_str_equal@plt+0x19325>
   21723:	mov    rdi,rsp
   21726:	xor    esi,esi
   21728:	call   7a90 <gettimeofday@plt>
   2172d:	mov    r15,QWORD PTR [rsp+0x8]
   21732:	mov    r14,QWORD PTR [rsp]
   21736:	call   7bf0 <getpid@plt>
   2173b:	sub    rsp,0x8
   2173f:	lea    rdi,[rip+0xc1aa]        # 2d8f0 <_fini@@Base+0x466c>
   21746:	mov    esi,eax
   21748:	push   rbx
   21749:	mov    rdx,r14
   2174c:	mov    r9,r12
   2174f:	mov    r8,rbp
   21752:	mov    rcx,r15
   21755:	xor    eax,eax
   21757:	call   10b60 <g_str_equal@plt+0x87a8>
   2175c:	pop    rax
   2175d:	pop    rdx
   2175e:	jmp    216dd <g_str_equal@plt+0x19325>
   21763:	lea    rcx,[rip+0xc2e6]        # 2da50 <_fini@@Base+0x47cc>
   2176a:	lea    rsi,[rip+0xbb5f]        # 2d2d0 <_fini@@Base+0x404c>
   21771:	lea    rdi,[rip+0xcc56]        # 2e3ce <_fini@@Base+0x514a>
   21778:	mov    edx,0x134
   2177d:	call   7a70 <__assert_fail@plt>
   21782:	call   8050 <__stack_chk_fail@plt>
   21787:	nop    WORD PTR [rax+rax*1+0x0]
   21790:	push   r15
   21792:	push   r14
   21794:	push   r13
   21796:	push   r12
   21798:	push   rbp
   21799:	push   rbx
   2179a:	sub    rsp,0x38
   2179e:	mov    rax,QWORD PTR fs:0x28
   217a7:	mov    QWORD PTR [rsp+0x28],rax
   217ac:	xor    eax,eax
   217ae:	test   rdx,rdx
   217b1:	mov    QWORD PTR [rsp+0x8],0x0
   217ba:	je     218a6 <g_str_equal@plt+0x194ee>
   217c0:	cmp    DWORD PTR [rdi+0x90],0x2
   217c7:	mov    rbx,rdi
   217ca:	mov    r12,rsi
   217cd:	mov    rbp,rdx
   217d0:	mov    r13,rcx
   217d3:	jne    217df <g_str_equal@plt+0x19427>
   217d5:	cmp    QWORD PTR [rdx],0x0
   217d9:	je     218ca <g_str_equal@plt+0x19512>
   217df:	mov    ecx,DWORD PTR [rip+0x220613]        # 241df8 <stdout@@GLIBC_2.2.5+0x2150>
   217e5:	test   ecx,ecx
   217e7:	jne    21850 <g_str_equal@plt+0x19498>
   217e9:	mov    rsi,r12
   217ec:	lea    rcx,[rsp+0x8]
   217f1:	mov    rdx,rbp
   217f4:	mov    rdi,rbx
   217f7:	call   QWORD PTR [rbx+0x78]
   217fa:	cmp    DWORD PTR [rbx+0x90],0x1
   21801:	mov    rsi,QWORD PTR [rsp+0x8]
   21806:	jne    2181e <g_str_equal@plt+0x19466>
   21808:	test   rsi,rsi
   2180b:	sete   dl
   2180e:	cmp    QWORD PTR [rbp+0x0],0x0
   21813:	sete   al
   21816:	cmp    dl,al
   21818:	je     218e9 <g_str_equal@plt+0x19531>
   2181e:	mov    rdi,r13
   21821:	call   df30 <g_str_equal@plt+0x5b78>
   21826:	mov    rax,QWORD PTR [rsp+0x28]
   2182b:	xor    rax,QWORD PTR fs:0x28
   21834:	jne    218c5 <g_str_equal@plt+0x1950d>
   2183a:	add    rsp,0x38
   2183e:	pop    rbx
   2183f:	pop    rbp
   21840:	pop    r12
   21842:	pop    r13
   21844:	pop    r14
   21846:	pop    r15
   21848:	ret    
   21849:	nop    DWORD PTR [rax+0x0]
   21850:	cmp    WORD PTR [rip+0x2208a8],0x0        # 242100 <stdout@@GLIBC_2.2.5+0x2458>
   21858:	je     217e9 <g_str_equal@plt+0x19431>
   2185a:	test   BYTE PTR [rip+0x21f4e0],0x80        # 240d41 <stdout@@GLIBC_2.2.5+0x1099>
   21861:	je     217e9 <g_str_equal@plt+0x19431>
   21863:	lea    rdi,[rsp+0x10]
   21868:	xor    esi,esi
   2186a:	call   7a90 <gettimeofday@plt>
   2186f:	mov    r15,QWORD PTR [rsp+0x18]
   21874:	mov    r14,QWORD PTR [rsp+0x10]
   21879:	call   7bf0 <getpid@plt>
   2187e:	sub    rsp,0x8
   21882:	lea    rdi,[rip+0xc0c7]        # 2d950 <_fini@@Base+0x46cc>
   21889:	mov    esi,eax
   2188b:	push   rbp
   2188c:	mov    rdx,r14
   2188f:	mov    r9,r12
   21892:	mov    r8,rbx
   21895:	mov    rcx,r15
   21898:	xor    eax,eax
   2189a:	call   10b60 <g_str_equal@plt+0x87a8>
   2189f:	pop    rax
   218a0:	pop    rdx
   218a1:	jmp    217e9 <g_str_equal@plt+0x19431>
   218a6:	lea    rcx,[rip+0xc193]        # 2da40 <_fini@@Base+0x47bc>
   218ad:	lea    rsi,[rip+0xba1c]        # 2d2d0 <_fini@@Base+0x404c>
   218b4:	lea    rdi,[rip+0xcb13]        # 2e3ce <_fini@@Base+0x514a>
   218bb:	mov    edx,0x13d
   218c0:	call   7a70 <__assert_fail@plt>
   218c5:	call   8050 <__stack_chk_fail@plt>
   218ca:	lea    rcx,[rip+0xc16f]        # 2da40 <_fini@@Base+0x47bc>
   218d1:	lea    rsi,[rip+0xb9f8]        # 2d2d0 <_fini@@Base+0x404c>
   218d8:	lea    rdi,[rip+0xc049]        # 2d928 <_fini@@Base+0x46a4>
   218df:	mov    edx,0x13e
   218e4:	call   7a70 <__assert_fail@plt>
   218e9:	lea    rcx,[rip+0xc150]        # 2da40 <_fini@@Base+0x47bc>
   218f0:	lea    rsi,[rip+0xb9d9]        # 2d2d0 <_fini@@Base+0x404c>
   218f7:	lea    rdi,[rip+0xb988]        # 2d286 <_fini@@Base+0x4002>
   218fe:	mov    edx,0x142
   21903:	call   7a70 <__assert_fail@plt>
   21908:	nop    DWORD PTR [rax+rax*1+0x0]
   21910:	push   r15
   21912:	push   r14
   21914:	push   r13
   21916:	push   r12
   21918:	mov    r13,rcx
   2191b:	push   rbp
   2191c:	push   rbx
   2191d:	mov    rbp,rsi
   21920:	mov    rbx,rdi
   21923:	mov    r12,rdx
   21926:	sub    rsp,0x28
   2192a:	mov    ecx,DWORD PTR [rip+0x2204c8]        # 241df8 <stdout@@GLIBC_2.2.5+0x2150>
   21930:	mov    rax,QWORD PTR fs:0x28
   21939:	mov    QWORD PTR [rsp+0x18],rax
   2193e:	xor    eax,eax
   21940:	test   ecx,ecx
   21942:	jne    21978 <g_str_equal@plt+0x195c0>
   21944:	mov    rcx,r13
   21947:	mov    rdx,r12
   2194a:	mov    rsi,rbp
   2194d:	mov    rdi,rbx
   21950:	call   QWORD PTR [rbx+0x80]
   21956:	mov    rax,QWORD PTR [rsp+0x18]
   2195b:	xor    rax,QWORD PTR fs:0x28
   21964:	jne    219cc <g_str_equal@plt+0x19614>
   21966:	add    rsp,0x28
   2196a:	pop    rbx
   2196b:	pop    rbp
   2196c:	pop    r12
   2196e:	pop    r13
   21970:	pop    r14
   21972:	pop    r15
   21974:	ret    
   21975:	nop    DWORD PTR [rax]
   21978:	cmp    WORD PTR [rip+0x22077e],0x0        # 2420fe <stdout@@GLIBC_2.2.5+0x2456>
   21980:	je     21944 <g_str_equal@plt+0x1958c>
   21982:	test   BYTE PTR [rip+0x21f3b8],0x80        # 240d41 <stdout@@GLIBC_2.2.5+0x1099>
   21989:	je     21944 <g_str_equal@plt+0x1958c>
   2198b:	mov    rdi,rsp
   2198e:	xor    esi,esi
   21990:	call   7a90 <gettimeofday@plt>
   21995:	mov    r15,QWORD PTR [rsp+0x8]
   2199a:	mov    r14,QWORD PTR [rsp]
   2199e:	call   7bf0 <getpid@plt>
   219a3:	sub    rsp,0x8
   219a7:	lea    rdi,[rip+0xbfda]        # 2d988 <_fini@@Base+0x4704>
   219ae:	mov    esi,eax
   219b0:	push   r12
   219b2:	mov    rdx,r14
   219b5:	mov    r9,rbp
   219b8:	mov    r8,rbx
   219bb:	mov    rcx,r15
   219be:	xor    eax,eax
   219c0:	call   10b60 <g_str_equal@plt+0x87a8>
   219c5:	pop    rax
   219c6:	pop    rdx
   219c7:	jmp    21944 <g_str_equal@plt+0x1958c>
   219cc:	call   8050 <__stack_chk_fail@plt>
   219d1:	nop    DWORD PTR [rax+rax*1+0x0]
   219d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   219e0:	push   r15
   219e2:	push   r14
   219e4:	push   r13
   219e6:	push   r12
   219e8:	push   rbp
   219e9:	push   rbx
   219ea:	sub    rsp,0x48
   219ee:	mov    rax,QWORD PTR fs:0x28
   219f7:	mov    QWORD PTR [rsp+0x38],rax
   219fc:	xor    eax,eax
   219fe:	test   rdx,rdx
   21a01:	je     21bd8 <g_str_equal@plt+0x19820>
   21a07:	test   rcx,rcx
   21a0a:	mov    r12,rcx
   21a0d:	je     21bd8 <g_str_equal@plt+0x19820>
   21a13:	mov    ecx,DWORD PTR [rip+0x2203df]        # 241df8 <stdout@@GLIBC_2.2.5+0x2150>
   21a19:	mov    rbx,rdi
   21a1c:	mov    r13,rsi
   21a1f:	mov    rbp,rdx
   21a22:	mov    r14,r8
   21a25:	test   ecx,ecx
   21a27:	jne    21b08 <g_str_equal@plt+0x19750>
   21a2d:	mov    eax,DWORD PTR [rbx+0x90]
   21a33:	cmp    eax,0x1
   21a36:	je     21aa8 <g_str_equal@plt+0x196f0>
   21a38:	cmp    eax,0x2
   21a3b:	jne    21a81 <g_str_equal@plt+0x196c9>
   21a3d:	mov    esi,DWORD PTR [rbp+0x0]
   21a40:	test   esi,esi
   21a42:	js     21a4f <g_str_equal@plt+0x19697>
   21a44:	cmp    esi,DWORD PTR [r12+0x8]
   21a49:	jl     21ae0 <g_str_equal@plt+0x19728>
   21a4f:	lea    r9,[rip+0x80fc]        # 29b52 <_fini@@Base+0x8ce>
   21a56:	test   r13,r13
   21a59:	lea    r8,[rip+0x9024]        # 2aa84 <_fini@@Base+0x1800>
   21a60:	lea    rcx,[rip+0xbf99]        # 2da00 <_fini@@Base+0x477c>
   21a67:	lea    rsi,[rip+0xb862]        # 2d2d0 <_fini@@Base+0x404c>
   21a6e:	mov    edx,0x159
   21a73:	cmovne r9,r13
   21a77:	mov    rdi,r14
   21a7a:	xor    eax,eax
   21a7c:	call   db00 <g_str_equal@plt+0x5748>
   21a81:	mov    rax,QWORD PTR [rsp+0x38]
   21a86:	xor    rax,QWORD PTR fs:0x28
   21a8f:	jne    21bf7 <g_str_equal@plt+0x1983f>
   21a95:	add    rsp,0x48
   21a99:	pop    rbx
   21a9a:	pop    rbp
   21a9b:	pop    r12
   21a9d:	pop    r13
   21a9f:	pop    r14
   21aa1:	pop    r15
   21aa3:	ret    
   21aa4:	nop    DWORD PTR [rax+0x0]
   21aa8:	lea    rcx,[rsp+0x18]
   21aad:	lea    rdx,[rsp+0x20]
   21ab2:	mov    rsi,r13
   21ab5:	mov    rdi,rbx
   21ab8:	mov    QWORD PTR [rsp+0x18],0x0
   21ac1:	call   21550 <g_str_equal@plt+0x19198>
   21ac6:	mov    rsi,QWORD PTR [rsp+0x18]
   21acb:	test   rsi,rsi
   21ace:	je     21b70 <g_str_equal@plt+0x197b8>
   21ad4:	mov    rdi,r14
   21ad7:	call   df30 <g_str_equal@plt+0x5b78>
   21adc:	jmp    21a81 <g_str_equal@plt+0x196c9>
   21ade:	xchg   ax,ax
   21ae0:	mov    rdi,r12
   21ae3:	call   21e50 <g_str_equal@plt+0x19a98>
   21ae8:	lea    rdx,[rsp+0x20]
   21aed:	mov    rcx,r14
   21af0:	mov    rsi,r13
   21af3:	mov    rdi,rbx
   21af6:	mov    QWORD PTR [rsp+0x20],rax
   21afb:	call   21550 <g_str_equal@plt+0x19198>
   21b00:	jmp    21a81 <g_str_equal@plt+0x196c9>
   21b05:	nop    DWORD PTR [rax]
   21b08:	cmp    WORD PTR [rip+0x22060c],0x0        # 24211c <stdout@@GLIBC_2.2.5+0x2474>
   21b10:	je     21a2d <g_str_equal@plt+0x19675>
   21b16:	test   BYTE PTR [rip+0x21f224],0x80        # 240d41 <stdout@@GLIBC_2.2.5+0x1099>
   21b1d:	je     21a2d <g_str_equal@plt+0x19675>
   21b23:	lea    rdi,[rsp+0x20]
   21b28:	xor    esi,esi
   21b2a:	call   7a90 <gettimeofday@plt>
   21b2f:	mov    rcx,QWORD PTR [rsp+0x28]
   21b34:	mov    r15,QWORD PTR [rsp+0x20]
   21b39:	mov    QWORD PTR [rsp+0x8],rcx
   21b3e:	call   7bf0 <getpid@plt>
   21b43:	sub    rsp,0x8
   21b47:	lea    rdi,[rip+0xbe72]        # 2d9c0 <_fini@@Base+0x473c>
   21b4e:	mov    rdx,r15
   21b51:	push   rbp
   21b52:	mov    rcx,QWORD PTR [rsp+0x18]
   21b57:	mov    esi,eax
   21b59:	mov    r9,r13
   21b5c:	mov    r8,rbx
   21b5f:	xor    eax,eax
   21b61:	call   10b60 <g_str_equal@plt+0x87a8>
   21b66:	pop    rax
   21b67:	pop    rdx
   21b68:	jmp    21a2d <g_str_equal@plt+0x19675>
   21b6d:	nop    DWORD PTR [rax]
   21b70:	mov    rsi,QWORD PTR [rsp+0x20]
   21b75:	xor    ecx,ecx
   21b77:	mov    edx,0xffffffff
   21b7c:	mov    rdi,r12
   21b7f:	call   21e90 <g_str_equal@plt+0x19ad8>
   21b84:	test   eax,eax
   21b86:	mov    ebx,eax
   21b88:	js     21ba0 <g_str_equal@plt+0x197e8>
   21b8a:	mov    rdi,QWORD PTR [rsp+0x20]
   21b8f:	call   7880 <g_free@plt>
   21b94:	mov    DWORD PTR [rbp+0x0],ebx
   21b97:	jmp    21a81 <g_str_equal@plt+0x196c9>
   21b9c:	nop    DWORD PTR [rax+0x0]
   21ba0:	mov    r9,QWORD PTR [rsp+0x20]
   21ba5:	lea    r8,[rip+0x8ed8]        # 2aa84 <_fini@@Base+0x1800>
   21bac:	lea    rcx,[rip+0xbe6d]        # 2da20 <_fini@@Base+0x479c>
   21bb3:	lea    rsi,[rip+0xb716]        # 2d2d0 <_fini@@Base+0x404c>
   21bba:	mov    rdi,r14
   21bbd:	mov    edx,0x170
   21bc2:	xor    eax,eax
   21bc4:	call   db00 <g_str_equal@plt+0x5748>
   21bc9:	mov    rdi,QWORD PTR [rsp+0x20]
   21bce:	call   7880 <g_free@plt>
   21bd3:	jmp    21a81 <g_str_equal@plt+0x196c9>
   21bd8:	lea    rcx,[rip+0xbe51]        # 2da30 <_fini@@Base+0x47ac>
   21bdf:	lea    rsi,[rip+0xb6ea]        # 2d2d0 <_fini@@Base+0x404c>
   21be6:	lea    rdi,[rip+0xb6d1]        # 2d2be <_fini@@Base+0x403a>
   21bed:	mov    edx,0x17c
   21bf2:	call   7a70 <__assert_fail@plt>
   21bf7:	call   8050 <__stack_chk_fail@plt>
   21bfc:	nop    DWORD PTR [rax+0x0]
   21c00:	repz ret 
   21c02:	nop    DWORD PTR [rax+0x0]
   21c06:	nop    WORD PTR cs:[rax+rax*1+0x0]
   21c10:	repz ret 
   21c12:	nop    DWORD PTR [rax+0x0]
   21c16:	nop    WORD PTR cs:[rax+rax*1+0x0]
   21c20:	repz ret 
   21c22:	nop    DWORD PTR [rax+0x0]
   21c26:	nop    WORD PTR cs:[rax+rax*1+0x0]
   21c30:	jmp    7880 <g_free@plt>
   21c35:	nop
   21c36:	nop    WORD PTR cs:[rax+rax*1+0x0]
   21c40:	test   rdx,rdx
   21c43:	je     21c50 <g_str_equal@plt+0x19898>
   21c45:	mov    rdi,QWORD PTR [rdx]
   21c48:	jmp    7880 <g_free@plt>
   21c4d:	nop    DWORD PTR [rax]
   21c50:	repz ret 
   21c52:	nop    DWORD PTR [rax+0x0]
   21c56:	nop    WORD PTR cs:[rax+rax*1+0x0]
   21c60:	push   rbx
   21c61:	mov    rbx,QWORD PTR [rsi]
   21c64:	mov    rdi,rsi
   21c67:	call   7880 <g_free@plt>
   21c6c:	mov    rax,rbx
   21c6f:	pop    rbx
   21c70:	ret    
   21c71:	nop    DWORD PTR [rax+rax*1+0x0]
   21c76:	nop    WORD PTR cs:[rax+rax*1+0x0]
   21c80:	test   rsi,rsi
   21c83:	je     21c90 <g_str_equal@plt+0x198d8>
   21c85:	mov    rdi,QWORD PTR [rsi]
   21c88:	jmp    7880 <g_free@plt>
   21c8d:	nop    DWORD PTR [rax]
   21c90:	repz ret 
   21c92:	nop    DWORD PTR [rax+0x0]
   21c96:	nop    WORD PTR cs:[rax+rax*1+0x0]
   21ca0:	jmp    21c80 <g_str_equal@plt+0x198c8>
   21ca2:	nop    DWORD PTR [rax+0x0]
   21ca6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   21cb0:	test   rdx,rdx
   21cb3:	je     21cd3 <g_str_equal@plt+0x1991b>
   21cb5:	mov    rdi,QWORD PTR [rdx]
   21cb8:	test   rdi,rdi
   21cbb:	je     21cd3 <g_str_equal@plt+0x1991b>
   21cbd:	mov    rax,QWORD PTR [rdi+0x8]
   21cc1:	test   rax,rax
   21cc4:	je     21cdd <g_str_equal@plt+0x19925>
   21cc6:	sub    rax,0x1
   21cca:	test   rax,rax
   21ccd:	mov    QWORD PTR [rdi+0x8],rax
   21cd1:	je     21cd8 <g_str_equal@plt+0x19920>
   21cd3:	repz ret 
   21cd5:	nop    DWORD PTR [rax]
   21cd8:	jmp    12960 <g_str_equal@plt+0xa5a8>
   21cdd:	sub    rsp,0x8
   21ce1:	call   84f2 <g_str_equal@plt+0x13a>
   21ce6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   21cf0:	repz ret 
   21cf2:	nop    DWORD PTR [rax+0x0]
   21cf6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   21d00:	repz ret 
   21d02:	nop    DWORD PTR [rax+0x0]
   21d06:	nop    WORD PTR cs:[rax+rax*1+0x0]
   21d10:	repz ret 
   21d12:	nop    DWORD PTR [rax+0x0]
   21d16:	nop    WORD PTR cs:[rax+rax*1+0x0]
   21d20:	repz ret 
   21d22:	nop    DWORD PTR [rax+0x0]
   21d26:	nop    WORD PTR cs:[rax+rax*1+0x0]
   21d30:	repz ret 
   21d32:	nop    DWORD PTR [rax+0x0]
   21d36:	nop    WORD PTR cs:[rax+rax*1+0x0]
   21d40:	test   rdx,rdx
   21d43:	je     21d63 <g_str_equal@plt+0x199ab>
   21d45:	mov    rdi,QWORD PTR [rdx]
   21d48:	test   rdi,rdi
   21d4b:	je     21d63 <g_str_equal@plt+0x199ab>
   21d4d:	mov    rax,QWORD PTR [rdi+0x8]
   21d51:	test   rax,rax
   21d54:	je     21d6d <g_str_equal@plt+0x199b5>
   21d56:	sub    rax,0x1
   21d5a:	test   rax,rax
   21d5d:	mov    QWORD PTR [rdi+0x8],rax
   21d61:	je     21d68 <g_str_equal@plt+0x199b0>
   21d63:	repz ret 
   21d65:	nop    DWORD PTR [rax]
   21d68:	jmp    12960 <g_str_equal@plt+0xa5a8>
   21d6d:	sub    rsp,0x8
   21d71:	call   84f2 <g_str_equal@plt+0x13a>
   21d76:	nop    WORD PTR cs:[rax+rax*1+0x0]
   21d80:	sub    rsp,0x8
   21d84:	mov    edi,0xa8
   21d89:	call   80c0 <g_malloc0@plt>
   21d8e:	lea    rdx,[rip+0xfffffffffffffe6b]        # 21c00 <g_str_equal@plt+0x19848>
   21d95:	lea    rcx,[rip+0xfffffffffffffee4]        # 21c80 <g_str_equal@plt+0x198c8>
   21d9c:	lea    rsi,[rip+0xffffffffffffff5d]        # 21d00 <g_str_equal@plt+0x19948>
   21da3:	lea    rdi,[rip+0xfffffffffffffef6]        # 21ca0 <g_str_equal@plt+0x198e8>
   21daa:	mov    DWORD PTR [rax+0x90],0x4
   21db4:	mov    QWORD PTR [rax],rdx
   21db7:	mov    QWORD PTR [rax+0x10],rcx
   21dbb:	lea    rdx,[rip+0xffffffffffffff4e]        # 21d10 <g_str_equal@plt+0x19958>
   21dc2:	mov    QWORD PTR [rax+0x38],rsi
   21dc6:	lea    rcx,[rip+0xfffffffffffffe93]        # 21c60 <g_str_equal@plt+0x198a8>
   21dcd:	lea    rsi,[rip+0xfffffffffffffe3c]        # 21c10 <g_str_equal@plt+0x19858>
   21dd4:	mov    QWORD PTR [rax+0x40],rdi
   21dd8:	mov    QWORD PTR [rax+0x18],rdx
   21ddc:	lea    rdi,[rip+0xfffffffffffffe3d]        # 21c20 <g_str_equal@plt+0x19868>
   21de3:	mov    QWORD PTR [rax+0x20],rcx
   21de7:	mov    QWORD PTR [rax+0x30],rsi
   21deb:	lea    rdx,[rip+0xfffffffffffffefe]        # 21cf0 <g_str_equal@plt+0x19938>
   21df2:	lea    rcx,[rip+0xffffffffffffff27]        # 21d20 <g_str_equal@plt+0x19968>
   21df9:	lea    rsi,[rip+0xfffffffffffffe40]        # 21c40 <g_str_equal@plt+0x19888>
   21e00:	mov    QWORD PTR [rax+0x48],rdi
   21e04:	mov    QWORD PTR [rax+0x50],rdx
   21e08:	lea    rdi,[rip+0xffffffffffffff21]        # 21d30 <g_str_equal@plt+0x19978>
   21e0f:	lea    rdx,[rip+0xffffffffffffff2a]        # 21d40 <g_str_equal@plt+0x19988>
   21e16:	mov    QWORD PTR [rax+0x60],rcx
   21e1a:	mov    QWORD PTR [rax+0x68],rsi
   21e1e:	lea    rcx,[rip+0xfffffffffffffe8b]        # 21cb0 <g_str_equal@plt+0x198f8>
   21e25:	lea    rsi,[rip+0xfffffffffffffe04]        # 21c30 <g_str_equal@plt+0x19878>
   21e2c:	mov    QWORD PTR [rax+0x70],rdi
   21e30:	mov    QWORD PTR [rax+0x78],rdx
   21e34:	mov    QWORD PTR [rax+0x80],rcx
   21e3b:	mov    QWORD PTR [rax+0xa0],rsi
   21e42:	add    rsp,0x8
   21e46:	ret    
   21e47:	nop    WORD PTR [rax+rax*1+0x0]
   21e50:	test   esi,esi
   21e52:	js     21e64 <g_str_equal@plt+0x19aac>
   21e54:	cmp    DWORD PTR [rdi+0x8],esi
   21e57:	jle    21e64 <g_str_equal@plt+0x19aac>
   21e59:	mov    rax,QWORD PTR [rdi]
   21e5c:	movsxd rsi,esi
   21e5f:	mov    rax,QWORD PTR [rax+rsi*8]
   21e63:	ret    
   21e64:	lea    rcx,[rip+0xbde5]        # 2dc50 <_fini@@Base+0x49cc>
   21e6b:	lea    rsi,[rip+0xbd46]        # 2dbb8 <_fini@@Base+0x4934>
   21e72:	lea    rdi,[rip+0xbd7f]        # 2dbf8 <_fini@@Base+0x4974>
   21e79:	sub    rsp,0x8
   21e7d:	mov    edx,0x13
   21e82:	call   7a70 <__assert_fail@plt>
   21e87:	nop    WORD PTR [rax+rax*1+0x0]
   21e90:	push   r15
   21e92:	push   r14
   21e94:	push   r13
   21e96:	push   r12
   21e98:	mov    r12d,edx
   21e9b:	push   rbp
   21e9c:	push   rbx
   21e9d:	sub    rsp,0x18
   21ea1:	test   rsi,rsi
   21ea4:	je     21eec <g_str_equal@plt+0x19b34>
   21ea6:	mov    eax,DWORD PTR [rdi+0x8]
   21ea9:	mov    r15,rcx
   21eac:	mov    DWORD PTR [rsp+0xc],edx
   21eb0:	mov    rbp,rsi
   21eb3:	test   eax,eax
   21eb5:	jle    21f00 <g_str_equal@plt+0x19b48>
   21eb7:	lea    r13d,[rax-0x1]
   21ebb:	mov    r14,QWORD PTR [rdi]
   21ebe:	xor    ebx,ebx
   21ec0:	add    r13,0x1
   21ec4:	jmp    21ed9 <g_str_equal@plt+0x19b21>
   21ec6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   21ed0:	add    rbx,0x1
   21ed4:	cmp    rbx,r13
   21ed7:	je     21f00 <g_str_equal@plt+0x19b48>
   21ed9:	mov    rsi,QWORD PTR [r14+rbx*8]
   21edd:	mov    rdi,rbp
   21ee0:	mov    r12d,ebx
   21ee3:	call   8060 <strcmp@plt>
   21ee8:	test   eax,eax
   21eea:	jne    21ed0 <g_str_equal@plt+0x19b18>
   21eec:	add    rsp,0x18
   21ef0:	mov    eax,r12d
   21ef3:	pop    rbx
   21ef4:	pop    rbp
   21ef5:	pop    r12
   21ef7:	pop    r13
   21ef9:	pop    r14
   21efb:	pop    r15
   21efd:	ret    
   21efe:	xchg   ax,ax
   21f00:	lea    r8,[rip+0xbd10]        # 2dc17 <_fini@@Base+0x4993>
   21f07:	lea    rcx,[rip+0xbd32]        # 2dc40 <_fini@@Base+0x49bc>
   21f0e:	lea    rsi,[rip+0xbca3]        # 2dbb8 <_fini@@Base+0x4934>
   21f15:	mov    r9,rbp
   21f18:	mov    edx,0x27
   21f1d:	mov    rdi,r15
   21f20:	xor    eax,eax
   21f22:	call   db00 <g_str_equal@plt+0x5748>
   21f27:	mov    r12d,DWORD PTR [rsp+0xc]
   21f2c:	jmp    21eec <g_str_equal@plt+0x19b34>
   21f2e:	xchg   ax,ax
   21f30:	push   r14
   21f32:	push   r13
   21f34:	push   r12
   21f36:	movzx  r12d,BYTE PTR [rdi]
   21f3a:	push   rbp
   21f3b:	mov    ebp,esi
   21f3d:	push   rbx
   21f3e:	mov    rbx,rdi
   21f41:	cmp    r12b,0x5f
   21f45:	je     21fa0 <g_str_equal@plt+0x19be8>
   21f47:	call   7d60 <__ctype_b_loc@plt>
   21f4c:	mov    rsi,QWORD PTR [rax]
   21f4f:	mov    rdx,rbx
   21f52:	test   BYTE PTR [rsi+r12*2+0x1],0x4
   21f58:	je     21fdc <g_str_equal@plt+0x19c24>
   21f5e:	xchg   ax,ax
   21f60:	add    rdx,0x1
   21f64:	movzx  eax,BYTE PTR [rdx]
   21f67:	test   al,al
   21f69:	je     21f8c <g_str_equal@plt+0x19bd4>
   21f6b:	movzx  ecx,al
   21f6e:	test   BYTE PTR [rsi+rcx*2],0x8
   21f72:	jne    21f60 <g_str_equal@plt+0x19ba8>
   21f74:	cmp    al,0x2d
   21f76:	setne  cl
   21f79:	cmp    al,0x5f
   21f7b:	setne  al
   21f7e:	test   cl,al
   21f80:	je     21f60 <g_str_equal@plt+0x19ba8>
   21f82:	test   bpl,bpl
   21f85:	mov    eax,0xffffffff
   21f8a:	jne    21f90 <g_str_equal@plt+0x19bd8>
   21f8c:	mov    eax,edx
   21f8e:	sub    eax,ebx
   21f90:	pop    rbx
   21f91:	pop    rbp
   21f92:	pop    r12
   21f94:	pop    r13
   21f96:	pop    r14
   21f98:	ret    
   21f99:	nop    DWORD PTR [rax+0x0]
   21fa0:	cmp    BYTE PTR [rdi+0x1],0x5f
   21fa4:	lea    r13,[rdi+0x1]
   21fa8:	je     21fce <g_str_equal@plt+0x19c16>
   21faa:	jmp    21fdc <g_str_equal@plt+0x19c24>
   21fac:	nop    DWORD PTR [rax+0x0]
   21fb0:	call   7d60 <__ctype_b_loc@plt>
   21fb5:	mov    rsi,QWORD PTR [rax]
   21fb8:	movzx  eax,r12b
   21fbc:	test   BYTE PTR [rsi+rax*2],0x8
   21fc0:	jne    21fcb <g_str_equal@plt+0x19c13>
   21fc2:	lea    eax,[r12-0x2d]
   21fc7:	cmp    al,0x1
   21fc9:	ja     21fea <g_str_equal@plt+0x19c32>
   21fcb:	mov    r13,r14
   21fce:	movzx  r12d,BYTE PTR [r13+0x1]
   21fd3:	lea    r14,[r13+0x1]
   21fd7:	test   r12b,r12b
   21fda:	jne    21fb0 <g_str_equal@plt+0x19bf8>
   21fdc:	pop    rbx
   21fdd:	mov    eax,0xffffffff
   21fe2:	pop    rbp
   21fe3:	pop    r12
   21fe5:	pop    r13
   21fe7:	pop    r14
   21fe9:	ret    
   21fea:	cmp    r12b,0x5f
   21fee:	jne    21fdc <g_str_equal@plt+0x19c24>
   21ff0:	lea    rdx,[r13+0x2]
   21ff4:	movzx  r12d,BYTE PTR [r13+0x2]
   21ff9:	jmp    21f52 <g_str_equal@plt+0x19b9a>
   21ffe:	xchg   ax,ax
   22000:	mov    eax,0x1
   22005:	ret    
   22006:	nop    WORD PTR cs:[rax+rax*1+0x0]
   22010:	sub    rsp,0x8
   22014:	mov    edi,0x20
   22019:	call   7b50 <g_malloc@plt>
   2201e:	lea    rdx,[rax+0x10]
   22022:	mov    QWORD PTR [rax+0x8],0x1
   2202a:	mov    DWORD PTR [rax],0x5
   22030:	mov    QWORD PTR [rax+0x10],0x0
   22038:	mov    QWORD PTR [rax+0x18],rdx
   2203c:	add    rsp,0x8
   22040:	ret    
   22041:	nop    DWORD PTR [rax+rax*1+0x0]
   22046:	nop    WORD PTR cs:[rax+rax*1+0x0]
   22050:	push   r12
   22052:	push   rbp
   22053:	push   rbx
   22054:	mov    rbx,rdi
   22057:	mov    edi,0x20
   2205c:	call   7b50 <g_malloc@plt>
   22061:	mov    rbp,QWORD PTR [rbx+0x10]
   22065:	mov    QWORD PTR [rax+0x8],0x1
   2206d:	mov    r12,rax
   22070:	mov    DWORD PTR [rax],0x5
   22076:	mov    QWORD PTR [rax+0x10],0x0
   2207e:	add    rax,0x10
   22082:	mov    QWORD PTR [r12+0x18],rax
   22087:	test   rbp,rbp
   2208a:	je     220d1 <g_str_equal@plt+0x19d19>
   2208c:	nop    DWORD PTR [rax+0x0]
   22090:	mov    rbx,QWORD PTR [rbp+0x0]
   22094:	test   rbx,rbx
   22097:	je     2209e <g_str_equal@plt+0x19ce6>
   22099:	add    QWORD PTR [rbx+0x8],0x1
   2209e:	mov    edi,0x18
   220a3:	call   7b50 <g_malloc@plt>
   220a8:	mov    rdx,QWORD PTR [r12+0x18]
   220ad:	mov    QWORD PTR [rax],rbx
   220b0:	mov    QWORD PTR [rax+0x8],0x0
   220b8:	mov    QWORD PTR [rax+0x10],rdx
   220bc:	mov    QWORD PTR [rdx],rax
   220bf:	add    rax,0x8
   220c3:	mov    QWORD PTR [r12+0x18],rax
   220c8:	mov    rbp,QWORD PTR [rbp+0x8]
   220cc:	test   rbp,rbp
   220cf:	jne    22090 <g_str_equal@plt+0x19cd8>
   220d1:	mov    rax,r12
   220d4:	pop    rbx
   220d5:	pop    rbp
   220d6:	pop    r12
   220d8:	ret    
   220d9:	nop    DWORD PTR [rax+0x0]
   220e0:	push   rbp
   220e1:	push   rbx
   220e2:	mov    rbx,rdi
   220e5:	mov    edi,0x18
   220ea:	mov    rbp,rsi
   220ed:	sub    rsp,0x8
   220f1:	call   7b50 <g_malloc@plt>
   220f6:	mov    rdx,QWORD PTR [rbx+0x18]
   220fa:	mov    QWORD PTR [rax],rbp
   220fd:	mov    QWORD PTR [rax+0x8],0x0
   22105:	mov    QWORD PTR [rax+0x10],rdx
   22109:	mov    QWORD PTR [rdx],rax
   2210c:	add    rax,0x8
   22110:	mov    QWORD PTR [rbx+0x18],rax
   22114:	add    rsp,0x8
   22118:	pop    rbx
   22119:	pop    rbp
   2211a:	ret    
   2211b:	nop    DWORD PTR [rax+rax*1+0x0]
   22120:	push   rbp
   22121:	push   rbx
   22122:	mov    rbx,rdi
   22125:	mov    rdi,rsi
   22128:	sub    rsp,0x8
   2212c:	call   11570 <g_str_equal@plt+0x91b8>
   22131:	mov    edi,0x18
   22136:	mov    rbp,rax
   22139:	call   7b50 <g_malloc@plt>
   2213e:	mov    rdx,QWORD PTR [rbx+0x18]
   22142:	mov    QWORD PTR [rax],rbp
   22145:	mov    QWORD PTR [rax+0x8],0x0
   2214d:	mov    QWORD PTR [rax+0x10],rdx
   22151:	mov    QWORD PTR [rdx],rax
   22154:	add    rax,0x8
   22158:	mov    QWORD PTR [rbx+0x18],rax
   2215c:	add    rsp,0x8
   22160:	pop    rbx
   22161:	pop    rbp
   22162:	ret    
   22163:	nop    DWORD PTR [rax]
   22166:	nop    WORD PTR cs:[rax+rax*1+0x0]
   22170:	push   rbp
   22171:	push   rbx
   22172:	mov    rbx,rdi
   22175:	movzx  edi,sil
   22179:	sub    rsp,0x8
   2217d:	call   12880 <g_str_equal@plt+0xa4c8>
   22182:	mov    edi,0x18
   22187:	mov    rbp,rax
   2218a:	call   7b50 <g_malloc@plt>
   2218f:	mov    rdx,QWORD PTR [rbx+0x18]
   22193:	mov    QWORD PTR [rax],rbp
   22196:	mov    QWORD PTR [rax+0x8],0x0
   2219e:	mov    QWORD PTR [rax+0x10],rdx
   221a2:	mov    QWORD PTR [rdx],rax
   221a5:	add    rax,0x8
   221a9:	mov    QWORD PTR [rbx+0x18],rax
   221ad:	add    rsp,0x8
   221b1:	pop    rbx
   221b2:	pop    rbp
   221b3:	ret    
   221b4:	xchg   ax,ax
   221b6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   221c0:	push   rbp
   221c1:	push   rbx
   221c2:	mov    rbx,rdi
   221c5:	mov    rdi,rsi
   221c8:	sub    rsp,0x8
   221cc:	call   11c10 <g_str_equal@plt+0x9858>
   221d1:	mov    edi,0x18
   221d6:	mov    rbp,rax
   221d9:	call   7b50 <g_malloc@plt>
   221de:	mov    rdx,QWORD PTR [rbx+0x18]
   221e2:	mov    QWORD PTR [rax],rbp
   221e5:	mov    QWORD PTR [rax+0x8],0x0
   221ed:	mov    QWORD PTR [rax+0x10],rdx
   221f1:	mov    QWORD PTR [rdx],rax
   221f4:	add    rax,0x8
   221f8:	mov    QWORD PTR [rbx+0x18],rax
   221fc:	add    rsp,0x8
   22200:	pop    rbx
   22201:	pop    rbp
   22202:	ret    
   22203:	nop    DWORD PTR [rax]
   22206:	nop    WORD PTR cs:[rax+rax*1+0x0]
   22210:	push   rbx
   22211:	mov    rbx,rdi
   22214:	mov    edi,0x18
   22219:	add    QWORD PTR [rip+0x21d5c7],0x1        # 23f7e8 <g_test_config_vars+0x20c8>
   22221:	call   7b50 <g_malloc@plt>
   22226:	mov    rdx,QWORD PTR [rbx+0x18]
   2222a:	lea    rcx,[rip+0x21d5af]        # 23f7e0 <g_test_config_vars+0x20c0>
   22231:	mov    QWORD PTR [rax+0x8],0x0
   22239:	mov    QWORD PTR [rax],rcx
   2223c:	mov    QWORD PTR [rax+0x10],rdx
   22240:	mov    QWORD PTR [rdx],rax
   22243:	add    rax,0x8
   22247:	mov    QWORD PTR [rbx+0x18],rax
   2224b:	pop    rbx
   2224c:	ret    
   2224d:	nop    DWORD PTR [rax]
   22250:	push   r12
   22252:	push   rbp
   22253:	push   rbx
   22254:	mov    rbx,QWORD PTR [rdi+0x10]
   22258:	test   rbx,rbx
   2225b:	je     2227a <g_str_equal@plt+0x19ec2>
   2225d:	mov    r12,rsi
   22260:	mov    rbp,rdx
   22263:	nop    DWORD PTR [rax+rax*1+0x0]
   22268:	mov    rdi,QWORD PTR [rbx]
   2226b:	mov    rsi,rbp
   2226e:	call   r12
   22271:	mov    rbx,QWORD PTR [rbx+0x8]
   22275:	test   rbx,rbx
   22278:	jne    22268 <g_str_equal@plt+0x19eb0>
   2227a:	pop    rbx
   2227b:	pop    rbp
   2227c:	pop    r12
   2227e:	ret    
   2227f:	nop
   22280:	test   rdi,rdi
   22283:	push   rbx
   22284:	je     222d0 <g_str_equal@plt+0x19f18>
   22286:	mov    rdx,QWORD PTR [rdi+0x10]
   2228a:	test   rdx,rdx
   2228d:	je     222d0 <g_str_equal@plt+0x19f18>
   2228f:	mov    rax,QWORD PTR [rdx+0x8]
   22293:	mov    rcx,QWORD PTR [rdx+0x10]
   22297:	test   rax,rax
   2229a:	je     222c8 <g_str_equal@plt+0x19f10>
   2229c:	mov    QWORD PTR [rax+0x10],rcx
   222a0:	mov    rax,QWORD PTR [rdx+0x10]
   222a4:	mov    rcx,QWORD PTR [rdx+0x8]
   222a8:	mov    rdi,rdx
   222ab:	mov    QWORD PTR [rax],rcx
   222ae:	mov    QWORD PTR [rdx+0x10],0x0
   222b6:	mov    rbx,QWORD PTR [rdx]
   222b9:	call   7880 <g_free@plt>
   222be:	mov    rax,rbx
   222c1:	pop    rbx
   222c2:	ret    
   222c3:	nop    DWORD PTR [rax+rax*1+0x0]
   222c8:	mov    QWORD PTR [rdi+0x18],rcx
   222cc:	jmp    222a0 <g_str_equal@plt+0x19ee8>
   222ce:	xchg   ax,ax
   222d0:	xor    ebx,ebx
   222d2:	jmp    222be <g_str_equal@plt+0x19f06>
   222d4:	xchg   ax,ax
   222d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   222e0:	test   rdi,rdi
   222e3:	je     222f8 <g_str_equal@plt+0x19f40>
   222e5:	mov    rax,QWORD PTR [rdi+0x10]
   222e9:	test   rax,rax
   222ec:	je     222f8 <g_str_equal@plt+0x19f40>
   222ee:	mov    rax,QWORD PTR [rax]
   222f1:	ret    
   222f2:	nop    WORD PTR [rax+rax*1+0x0]
   222f8:	xor    eax,eax
   222fa:	ret    
   222fb:	nop    DWORD PTR [rax+rax*1+0x0]
   22300:	xor    eax,eax
   22302:	cmp    QWORD PTR [rdi+0x10],0x0
   22307:	sete   al
   2230a:	ret    
   2230b:	nop    DWORD PTR [rax+rax*1+0x0]
   22310:	mov    rdx,QWORD PTR [rdi+0x10]
   22314:	xor    eax,eax
   22316:	test   rdx,rdx
   22319:	je     22330 <g_str_equal@plt+0x19f78>
   2231b:	nop    DWORD PTR [rax+rax*1+0x0]
   22320:	mov    rdx,QWORD PTR [rdx+0x8]
   22324:	add    rax,0x1
   22328:	test   rdx,rdx
   2232b:	jne    22320 <g_str_equal@plt+0x19f68>
   2232d:	repz ret 
   2232f:	nop
   22330:	repz ret 
   22332:	nop    DWORD PTR [rax+0x0]
   22336:	nop    WORD PTR cs:[rax+rax*1+0x0]
   22340:	push   rbp
   22341:	push   rbx
   22342:	sub    rsp,0x8
   22346:	test   rdi,rdi
   22349:	je     22365 <g_str_equal@plt+0x19fad>
   2234b:	mov    eax,DWORD PTR [rdi]
   2234d:	lea    edx,[rax-0x1]
   22350:	cmp    edx,0x5
   22353:	ja     223e5 <g_str_equal@plt+0x1a02d>
   22359:	cmp    eax,0x5
   2235c:	mov    eax,0x0
   22361:	cmovne rdi,rax
   22365:	test   rsi,rsi
   22368:	je     22379 <g_str_equal@plt+0x19fc1>
   2236a:	mov    eax,DWORD PTR [rsi]
   2236c:	lea    edx,[rax-0x1]
   2236f:	cmp    edx,0x5
   22372:	ja     223e5 <g_str_equal@plt+0x1a02d>
   22374:	cmp    eax,0x5
   22377:	je     22388 <g_str_equal@plt+0x19fd0>
   22379:	mov    rax,QWORD PTR ds:0x10
   22381:	ud2    
   22383:	nop    DWORD PTR [rax+rax*1+0x0]
   22388:	mov    rbx,QWORD PTR [rdi+0x10]
   2238c:	mov    rbp,QWORD PTR [rsi+0x10]
   22390:	test   rbx,rbx
   22393:	je     223d0 <g_str_equal@plt+0x1a018>
   22395:	test   rbp,rbp
   22398:	jne    223b8 <g_str_equal@plt+0x1a000>
   2239a:	jmp    223d0 <g_str_equal@plt+0x1a018>
   2239c:	nop    DWORD PTR [rax+0x0]
   223a0:	mov    rbx,QWORD PTR [rbx+0x8]
   223a4:	mov    rbp,QWORD PTR [rbp+0x8]
   223a8:	test   rbx,rbx
   223ab:	setne  dl
   223ae:	test   rbp,rbp
   223b1:	setne  al
   223b4:	test   dl,al
   223b6:	je     223d0 <g_str_equal@plt+0x1a018>
   223b8:	mov    rsi,QWORD PTR [rbp+0x0]
   223bc:	mov    rdi,QWORD PTR [rbx]
   223bf:	call   129d0 <g_str_equal@plt+0xa618>
   223c4:	test   al,al
   223c6:	jne    223a0 <g_str_equal@plt+0x19fe8>
   223c8:	add    rsp,0x8
   223cc:	pop    rbx
   223cd:	pop    rbp
   223ce:	ret    
   223cf:	nop
   223d0:	test   rbx,rbx
   223d3:	sete   al
   223d6:	test   rbp,rbp
   223d9:	sete   dl
   223dc:	add    rsp,0x8
   223e0:	and    eax,edx
   223e2:	pop    rbx
   223e3:	pop    rbp
   223e4:	ret    
   223e5:	call   8515 <g_str_equal@plt+0x15d>
   223ea:	nop    WORD PTR [rax+rax*1+0x0]
   223f0:	test   rdi,rdi
   223f3:	push   r12
   223f5:	push   rbp
   223f6:	push   rbx
   223f7:	je     224ee <g_str_equal@plt+0x1a136>
   223fd:	mov    eax,DWORD PTR [rdi]
   223ff:	mov    r12,rdi
   22402:	lea    edx,[rax-0x1]
   22405:	cmp    edx,0x5
   22408:	ja     224e9 <g_str_equal@plt+0x1a131>
   2240e:	cmp    eax,0x5
   22411:	je     22420 <g_str_equal@plt+0x1a068>
   22413:	mov    rax,QWORD PTR ds:0x10
   2241b:	ud2    
   2241d:	nop    DWORD PTR [rax]
   22420:	mov    rbx,QWORD PTR [rdi+0x10]
   22424:	test   rbx,rbx
   22427:	jne    2247a <g_str_equal@plt+0x1a0c2>
   22429:	jmp    224af <g_str_equal@plt+0x1a0f7>
   2242e:	xchg   ax,ax
   22430:	mov    QWORD PTR [rbp+0x10],rax
   22434:	mov    rax,QWORD PTR [rbx+0x10]
   22438:	mov    rdx,QWORD PTR [rbx+0x8]
   2243c:	mov    QWORD PTR [rax],rdx
   2243f:	mov    rdi,QWORD PTR [rbx]
   22442:	mov    QWORD PTR [rbx+0x10],0x0
   2244a:	test   rdi,rdi
   2244d:	je     224c0 <g_str_equal@plt+0x1a108>
   2244f:	mov    rax,QWORD PTR [rdi+0x8]
   22453:	test   rax,rax
   22456:	je     224ca <g_str_equal@plt+0x1a112>
   22458:	sub    rax,0x1
   2245c:	test   rax,rax
   2245f:	mov    QWORD PTR [rdi+0x8],rax
   22463:	jne    2246a <g_str_equal@plt+0x1a0b2>
   22465:	call   12960 <g_str_equal@plt+0xa5a8>
   2246a:	mov    rdi,rbx
   2246d:	call   7880 <g_free@plt>
   22472:	test   rbp,rbp
   22475:	je     224af <g_str_equal@plt+0x1a0f7>
   22477:	mov    rbx,rbp
   2247a:	mov    rbp,QWORD PTR [rbx+0x8]
   2247e:	mov    rax,QWORD PTR [rbx+0x10]
   22482:	test   rbp,rbp
   22485:	jne    22430 <g_str_equal@plt+0x1a078>
   22487:	mov    QWORD PTR [r12+0x18],rax
   2248c:	mov    rax,QWORD PTR [rbx+0x10]
   22490:	mov    rdx,QWORD PTR [rbx+0x8]
   22494:	mov    QWORD PTR [rax],rdx
   22497:	mov    rdi,QWORD PTR [rbx]
   2249a:	mov    QWORD PTR [rbx+0x10],0x0
   224a2:	test   rdi,rdi
   224a5:	jne    2244f <g_str_equal@plt+0x1a097>
   224a7:	mov    rdi,rbx
   224aa:	call   7880 <g_free@plt>
   224af:	pop    rbx
   224b0:	mov    rdi,r12
   224b3:	pop    rbp
   224b4:	pop    r12
   224b6:	jmp    7880 <g_free@plt>
   224bb:	nop    DWORD PTR [rax+rax*1+0x0]
   224c0:	mov    rdi,rbx
   224c3:	call   7880 <g_free@plt>
   224c8:	jmp    22477 <g_str_equal@plt+0x1a0bf>
   224ca:	lea    rcx,[rip+0xb7df]        # 2dcb0 <_fini@@Base+0x4a2c>
   224d1:	lea    rsi,[rip+0x83c0]        # 2a898 <_fini@@Base+0x1614>
   224d8:	lea    rdi,[rip+0x94b2]        # 2b991 <_fini@@Base+0x270d>
   224df:	mov    edx,0x62
   224e4:	call   7a70 <__assert_fail@plt>
   224e9:	call   8515 <g_str_equal@plt+0x15d>
   224ee:	lea    rcx,[rip+0xb7db]        # 2dcd0 <_fini@@Base+0x4a4c>
   224f5:	lea    rsi,[rip+0xb76c]        # 2dc68 <_fini@@Base+0x49e4>
   224fc:	lea    rdi,[rip+0x927c]        # 2b77f <_fini@@Base+0x24fb>
   22503:	mov    edx,0xc2
   22508:	call   7a70 <__assert_fail@plt>
   2250d:	nop    DWORD PTR [rax]
   22510:	push   r13
   22512:	push   r12
   22514:	mov    r13,rsi
   22517:	push   rbp
   22518:	push   rbx
   22519:	mov    r12,rdi
   2251c:	sub    rsp,0x8
   22520:	call   12510 <g_str_equal@plt+0xa158>
   22525:	test   rax,rax
   22528:	je     22582 <g_str_equal@plt+0x1a1ca>
   2252a:	mov    rbx,rax
   2252d:	xor    ebp,ebp
   2252f:	nop
   22530:	mov    rdi,QWORD PTR [rbx]
   22533:	xor    edx,edx
   22535:	mov    rsi,r13
   22538:	call   a890 <g_str_equal@plt+0x24d8>
   2253d:	test   eax,eax
   2253f:	je     2254c <g_str_equal@plt+0x1a194>
   22541:	cmp    ebp,0x7fffffff
   22547:	je     22570 <g_str_equal@plt+0x1a1b8>
   22549:	add    ebp,0x1
   2254c:	mov    rsi,rbx
   2254f:	mov    rdi,r12
   22552:	call   12540 <g_str_equal@plt+0xa188>
   22557:	test   rax,rax
   2255a:	mov    rbx,rax
   2255d:	jne    22530 <g_str_equal@plt+0x1a178>
   2255f:	add    rsp,0x8
   22563:	mov    eax,ebp
   22565:	pop    rbx
   22566:	pop    rbp
   22567:	pop    r12
   22569:	pop    r13
   2256b:	ret    
   2256c:	nop    DWORD PTR [rax+0x0]
   22570:	add    rsp,0x8
   22574:	mov    ebp,0xffffffde
   22579:	pop    rbx
   2257a:	mov    eax,ebp
   2257c:	pop    rbp
   2257d:	pop    r12
   2257f:	pop    r13
   22581:	ret    
   22582:	xor    ebp,ebp
   22584:	jmp    2255f <g_str_equal@plt+0x1a1a7>
   22586:	nop    WORD PTR cs:[rax+rax*1+0x0]
   22590:	lea    rcx,[rip+0xba21]        # 2dfb8 <_fini@@Base+0x4d34>
   22597:	lea    rsi,[rip+0x82fa]        # 2a898 <_fini@@Base+0x1614>
   2259e:	lea    rdi,[rip+0x833b]        # 2a8e0 <_fini@@Base+0x165c>
   225a5:	sub    rsp,0x8
   225a9:	mov    edx,0x7f
   225ae:	call   7a70 <__assert_fail@plt>
   225b3:	nop    DWORD PTR [rax]
   225b6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   225c0:	push   r15
   225c2:	push   r14
   225c4:	push   r13
   225c6:	push   r12
   225c8:	push   rbp
   225c9:	push   rbx
   225ca:	sub    rsp,0x28
   225ce:	mov    QWORD PTR [rsp],rdi
   225d2:	mov    QWORD PTR [rsp+0x10],rsi
   225d7:	mov    QWORD PTR [rsp+0x8],rdx
   225dc:	call   12510 <g_str_equal@plt+0xa158>
   225e1:	test   rax,rax
   225e4:	je     2275d <g_str_equal@plt+0x1a3a5>
   225ea:	mov    rbx,rax
   225ed:	jmp    226bf <g_str_equal@plt+0x1a307>
   225f2:	nop    WORD PTR [rax+rax*1+0x0]
   225f8:	mov    eax,DWORD PTR [rax]
   225fa:	lea    edx,[rax-0x1]
   225fd:	cmp    edx,0x5
   22600:	ja     227ab <g_str_equal@plt+0x1a3f3>
   22606:	cmp    eax,0x4
   22609:	je     22700 <g_str_equal@plt+0x1a348>
   2260f:	cmp    eax,0x5
   22612:	mov    ebp,0x0
   22617:	mov    rsi,QWORD PTR [rbx]
   2261a:	cmove  rbp,r12
   2261e:	xor    r13d,r13d
   22621:	cmp    QWORD PTR [rsp+0x8],0x0
   22627:	je     22770 <g_str_equal@plt+0x1a3b8>
   2262d:	mov    rdx,rsi
   22630:	mov    rsi,QWORD PTR [rsp+0x8]
   22635:	lea    rdi,[rip+0xb803]        # 2de3f <_fini@@Base+0x4bbb>
   2263c:	xor    eax,eax
   2263e:	call   7ce0 <g_strdup_printf@plt>
   22643:	test   r13,r13
   22646:	mov    rsi,rax
   22649:	mov    r15,rax
   2264c:	je     22669 <g_str_equal@plt+0x1a2b1>
   2264e:	mov    rdi,r13
   22651:	mov    QWORD PTR [rsp+0x18],rsi
   22656:	call   12260 <g_str_equal@plt+0x9ea8>
   2265b:	test   rax,rax
   2265e:	mov    rsi,QWORD PTR [rsp+0x18]
   22663:	jne    22780 <g_str_equal@plt+0x1a3c8>
   22669:	test   rbp,rbp
   2266c:	je     22688 <g_str_equal@plt+0x1a2d0>
   2266e:	mov    rdi,rbp
   22671:	mov    QWORD PTR [rsp+0x18],rsi
   22676:	call   22300 <g_str_equal@plt+0x19f48>
   2267b:	test   eax,eax
   2267d:	mov    rsi,QWORD PTR [rsp+0x18]
   22682:	je     22720 <g_str_equal@plt+0x1a368>
   22688:	mov    rcx,QWORD PTR [rsp+0x10]
   2268d:	cmp    QWORD PTR [rsp],rcx
   22691:	je     226ab <g_str_equal@plt+0x1a2f3>
   22693:	test   r12,r12
   22696:	je     2269e <g_str_equal@plt+0x1a2e6>
   22698:	add    QWORD PTR [r12+0x8],0x1
   2269e:	mov    rdi,QWORD PTR [rsp+0x10]
   226a3:	mov    rdx,r12
   226a6:	call   11ff0 <g_str_equal@plt+0x9c38>
   226ab:	mov    rdi,r15
   226ae:	mov    rbx,r14
   226b1:	call   7880 <g_free@plt>
   226b6:	test   r14,r14
   226b9:	je     2275d <g_str_equal@plt+0x1a3a5>
   226bf:	mov    rdi,QWORD PTR [rsp]
   226c3:	mov    rsi,rbx
   226c6:	call   12540 <g_str_equal@plt+0xa188>
   226cb:	mov    rdi,rbx
   226ce:	mov    r14,rax
   226d1:	call   11fd0 <g_str_equal@plt+0x9c18>
   226d6:	test   rax,rax
   226d9:	mov    r12,rax
   226dc:	jne    225f8 <g_str_equal@plt+0x1a240>
   226e2:	xor    r15d,r15d
   226e5:	cmp    QWORD PTR [rsp+0x8],0x0
   226eb:	mov    rsi,QWORD PTR [rbx]
   226ee:	je     22688 <g_str_equal@plt+0x1a2d0>
   226f0:	xor    r13d,r13d
   226f3:	xor    ebp,ebp
   226f5:	jmp    2262d <g_str_equal@plt+0x1a275>
   226fa:	nop    WORD PTR [rax+rax*1+0x0]
   22700:	xor    ebp,ebp
   22702:	cmp    QWORD PTR [rsp+0x8],0x0
   22708:	mov    rsi,QWORD PTR [rbx]
   2270b:	mov    r13,r12
   2270e:	jne    2262d <g_str_equal@plt+0x1a275>
   22714:	xor    r15d,r15d
   22717:	jmp    2264e <g_str_equal@plt+0x1a296>
   2271c:	nop    DWORD PTR [rax+0x0]
   22720:	mov    r13,QWORD PTR [rsp+0x10]
   22725:	mov    rdx,rsi
   22728:	mov    rdi,rbp
   2272b:	mov    rsi,r13
   2272e:	call   227d0 <g_str_equal@plt+0x1a418>
   22733:	cmp    QWORD PTR [rsp],r13
   22737:	jne    226ab <g_str_equal@plt+0x1a2f3>
   2273d:	mov    rsi,QWORD PTR [rbx]
   22740:	mov    rdi,QWORD PTR [rsp]
   22744:	call   12640 <g_str_equal@plt+0xa288>
   22749:	mov    rdi,r15
   2274c:	mov    rbx,r14
   2274f:	call   7880 <g_free@plt>
   22754:	test   r14,r14
   22757:	jne    226bf <g_str_equal@plt+0x1a307>
   2275d:	add    rsp,0x28
   22761:	pop    rbx
   22762:	pop    rbp
   22763:	pop    r12
   22765:	pop    r13
   22767:	pop    r14
   22769:	pop    r15
   2276b:	ret    
   2276c:	nop    DWORD PTR [rax+0x0]
   22770:	xor    r15d,r15d
   22773:	jmp    22669 <g_str_equal@plt+0x1a2b1>
   22778:	nop    DWORD PTR [rax+rax*1+0x0]
   22780:	mov    rbp,QWORD PTR [rsp+0x10]
   22785:	mov    rdx,rsi
   22788:	mov    rdi,r13
   2278b:	mov    rsi,rbp
   2278e:	call   225c0 <g_str_equal@plt+0x1a208>
   22793:	cmp    QWORD PTR [rsp],rbp
   22797:	jne    226ab <g_str_equal@plt+0x1a2f3>
   2279d:	mov    rsi,QWORD PTR [rbx]
   227a0:	mov    rdi,QWORD PTR [rsp]
   227a4:	call   12640 <g_str_equal@plt+0xa288>
   227a9:	jmp    22749 <g_str_equal@plt+0x1a391>
   227ab:	lea    rcx,[rip+0xb806]        # 2dfb8 <_fini@@Base+0x4d34>
   227b2:	lea    rsi,[rip+0x80df]        # 2a898 <_fini@@Base+0x1614>
   227b9:	lea    rdi,[rip+0x8120]        # 2a8e0 <_fini@@Base+0x165c>
   227c0:	mov    edx,0x7f
   227c5:	call   7a70 <__assert_fail@plt>
   227ca:	nop    WORD PTR [rax+rax*1+0x0]
   227d0:	push   r15
   227d2:	push   r14
   227d4:	push   r13
   227d6:	push   r12
   227d8:	push   rbp
   227d9:	push   rbx
   227da:	sub    rsp,0x18
   227de:	test   rdx,rdx
   227e1:	mov    QWORD PTR [rsp+0x8],rsi
   227e6:	je     2291e <g_str_equal@plt+0x1a566>
   227ec:	mov    rbx,QWORD PTR [rdi+0x10]
   227f0:	test   rbx,rbx
   227f3:	je     228f0 <g_str_equal@plt+0x1a538>
   227f9:	mov    r13,rdx
   227fc:	xor    ebp,ebp
   227fe:	lea    r14,[rip+0xb647]        # 2de4c <_fini@@Base+0x4bc8>
   22805:	jmp    2286f <g_str_equal@plt+0x1a4b7>
   22807:	nop    WORD PTR [rax+rax*1+0x0]
   22810:	mov    eax,DWORD PTR [r15]
   22813:	lea    edx,[rax-0x1]
   22816:	cmp    edx,0x5
   22819:	ja     228ff <g_str_equal@plt+0x1a547>
   2281f:	cmp    eax,0x4
   22822:	mov    edx,ebp
   22824:	mov    rsi,r13
   22827:	mov    rdi,r14
   2282a:	je     22890 <g_str_equal@plt+0x1a4d8>
   2282c:	cmp    eax,0x5
   2282f:	mov    eax,0x0
   22834:	je     228c0 <g_str_equal@plt+0x1a508>
   2283a:	call   7ce0 <g_strdup_printf@plt>
   2283f:	mov    r12,rax
   22842:	add    QWORD PTR [r15+0x8],0x1
   22847:	mov    rdi,QWORD PTR [rsp+0x8]
   2284c:	mov    rdx,r15
   2284f:	mov    rsi,r12
   22852:	call   11ff0 <g_str_equal@plt+0x9c38>
   22857:	mov    rdi,r12
   2285a:	add    ebp,0x1
   2285d:	call   7880 <g_free@plt>
   22862:	mov    rbx,QWORD PTR [rbx+0x8]
   22866:	test   rbx,rbx
   22869:	je     228f0 <g_str_equal@plt+0x1a538>
   2286f:	mov    r15,QWORD PTR [rbx]
   22872:	test   r15,r15
   22875:	jne    22810 <g_str_equal@plt+0x1a458>
   22877:	mov    edx,ebp
   22879:	mov    rsi,r13
   2287c:	mov    rdi,r14
   2287f:	xor    eax,eax
   22881:	call   7ce0 <g_strdup_printf@plt>
   22886:	mov    r12,rax
   22889:	jmp    22847 <g_str_equal@plt+0x1a48f>
   2288b:	nop    DWORD PTR [rax+rax*1+0x0]
   22890:	xor    eax,eax
   22892:	call   7ce0 <g_strdup_printf@plt>
   22897:	mov    rdi,r15
   2289a:	mov    r12,rax
   2289d:	call   12260 <g_str_equal@plt+0x9ea8>
   228a2:	test   rax,rax
   228a5:	je     22842 <g_str_equal@plt+0x1a48a>
   228a7:	mov    rsi,QWORD PTR [rsp+0x8]
   228ac:	mov    rdx,r12
   228af:	mov    rdi,r15
   228b2:	call   225c0 <g_str_equal@plt+0x1a208>
   228b7:	jmp    22857 <g_str_equal@plt+0x1a49f>
   228b9:	nop    DWORD PTR [rax+0x0]
   228c0:	call   7ce0 <g_strdup_printf@plt>
   228c5:	mov    rdi,r15
   228c8:	mov    r12,rax
   228cb:	call   22300 <g_str_equal@plt+0x19f48>
   228d0:	test   eax,eax
   228d2:	jne    22842 <g_str_equal@plt+0x1a48a>
   228d8:	mov    rsi,QWORD PTR [rsp+0x8]
   228dd:	mov    rdx,r12
   228e0:	mov    rdi,r15
   228e3:	call   227d0 <g_str_equal@plt+0x1a418>
   228e8:	jmp    22857 <g_str_equal@plt+0x1a49f>
   228ed:	nop    DWORD PTR [rax]
   228f0:	add    rsp,0x18
   228f4:	pop    rbx
   228f5:	pop    rbp
   228f6:	pop    r12
   228f8:	pop    r13
   228fa:	pop    r14
   228fc:	pop    r15
   228fe:	ret    
   228ff:	lea    rcx,[rip+0xb6b2]        # 2dfb8 <_fini@@Base+0x4d34>
   22906:	lea    rsi,[rip+0x7f8b]        # 2a898 <_fini@@Base+0x1614>
   2290d:	lea    rdi,[rip+0x7fcc]        # 2a8e0 <_fini@@Base+0x165c>
   22914:	mov    edx,0x7f
   22919:	call   7a70 <__assert_fail@plt>
   2291e:	lea    rcx,[rip+0xb67b]        # 2dfa0 <_fini@@Base+0x4d1c>
   22925:	lea    rsi,[rip+0xb3cc]        # 2dcf8 <_fini@@Base+0x4a74>
   2292c:	lea    rdi,[rip+0xb512]        # 2de45 <_fini@@Base+0x4bc1>
   22933:	mov    edx,0x44
   22938:	call   7a70 <__assert_fail@plt>
   2293d:	nop    DWORD PTR [rax]
   22940:	push   r12
   22942:	push   rbp
   22943:	mov    r12,rsi
   22946:	push   rbx
   22947:	mov    rsi,rdx
   2294a:	mov    rbp,rdi
   2294d:	mov    rbx,rdx
   22950:	call   12200 <g_str_equal@plt+0x9e48>
   22955:	test   eax,eax
   22957:	je     22960 <g_str_equal@plt+0x1a5a8>
   22959:	pop    rbx
   2295a:	pop    rbp
   2295b:	pop    r12
   2295d:	ret    
   2295e:	xchg   ax,ax
   22960:	mov    rsi,rbx
   22963:	mov    rdi,r12
   22966:	call   121a0 <g_str_equal@plt+0x9de8>
   2296b:	test   rax,rax
   2296e:	je     22959 <g_str_equal@plt+0x1a5a1>
   22970:	add    QWORD PTR [rax+0x8],0x1
   22975:	mov    rsi,rbx
   22978:	mov    rdi,rbp
   2297b:	pop    rbx
   2297c:	pop    rbp
   2297d:	pop    r12
   2297f:	mov    rdx,rax
   22982:	jmp    11ff0 <g_str_equal@plt+0x9c38>
   22987:	nop    WORD PTR [rax+rax*1+0x0]
   22990:	push   r12
   22992:	push   rbp
   22993:	mov    r12,rdx
   22996:	push   rbx
   22997:	mov    rbp,rsi
   2299a:	mov    rbx,rdi
   2299d:	call   12200 <g_str_equal@plt+0x9e48>
   229a2:	test   eax,eax
   229a4:	je     229b0 <g_str_equal@plt+0x1a5f8>
   229a6:	pop    rbx
   229a7:	pop    rbp
   229a8:	pop    r12
   229aa:	ret    
   229ab:	nop    DWORD PTR [rax+rax*1+0x0]
   229b0:	mov    rdx,r12
   229b3:	mov    rsi,rbp
   229b6:	mov    rdi,rbx
   229b9:	pop    rbx
   229ba:	pop    rbp
   229bb:	pop    r12
   229bd:	jmp    12150 <g_str_equal@plt+0x9d98>
   229c2:	nop    DWORD PTR [rax+0x0]
   229c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   229d0:	xor    edx,edx
   229d2:	mov    rsi,rdi
   229d5:	jmp    225c0 <g_str_equal@plt+0x1a208>
   229da:	nop    WORD PTR [rax+rax*1+0x0]
   229e0:	push   r15
   229e2:	push   r14
   229e4:	mov    r15,rsi
   229e7:	push   r13
   229e9:	push   r12
   229eb:	mov    r12,rdi
   229ee:	push   rbp
   229ef:	push   rbx
   229f0:	mov    r13,rdx
   229f3:	sub    rsp,0x18
   229f7:	mov    rax,QWORD PTR fs:0x28
   22a00:	mov    QWORD PTR [rsp+0x8],rax
   22a05:	xor    eax,eax
   22a07:	call   11fa0 <g_str_equal@plt+0x9be8>
   22a0c:	mov    rdi,r12
   22a0f:	mov    QWORD PTR [r15],rax
   22a12:	call   12510 <g_str_equal@plt+0xa158>
   22a17:	test   rax,rax
   22a1a:	je     22a75 <g_str_equal@plt+0x1a6bd>
   22a1c:	mov    rbx,rax
   22a1f:	mov    r14,rsp
   22a22:	nop    WORD PTR [rax+rax*1+0x0]
   22a28:	mov    rsi,rbx
   22a2b:	mov    rdi,r12
   22a2e:	call   12540 <g_str_equal@plt+0xa188>
   22a33:	mov    rdi,QWORD PTR [rbx]
   22a36:	mov    rdx,r14
   22a39:	mov    rsi,r13
   22a3c:	mov    rbp,rax
   22a3f:	call   a890 <g_str_equal@plt+0x24d8>
   22a44:	test   eax,eax
   22a46:	je     22a6d <g_str_equal@plt+0x1a6b5>
   22a48:	mov    rdx,QWORD PTR [rbx+0x8]
   22a4c:	test   rdx,rdx
   22a4f:	je     22a56 <g_str_equal@plt+0x1a69e>
   22a51:	add    QWORD PTR [rdx+0x8],0x1
   22a56:	mov    rsi,QWORD PTR [rsp]
   22a5a:	mov    rdi,QWORD PTR [r15]
   22a5d:	call   11ff0 <g_str_equal@plt+0x9c38>
   22a62:	mov    rsi,QWORD PTR [rbx]
   22a65:	mov    rdi,r12
   22a68:	call   12640 <g_str_equal@plt+0xa288>
   22a6d:	test   rbp,rbp
   22a70:	mov    rbx,rbp
   22a73:	jne    22a28 <g_str_equal@plt+0x1a670>
   22a75:	mov    rax,QWORD PTR [rsp+0x8]
   22a7a:	xor    rax,QWORD PTR fs:0x28
   22a83:	jne    22a94 <g_str_equal@plt+0x1a6dc>
   22a85:	add    rsp,0x18
   22a89:	pop    rbx
   22a8a:	pop    rbp
   22a8b:	pop    r12
   22a8d:	pop    r13
   22a8f:	pop    r14
   22a91:	pop    r15
   22a93:	ret    
   22a94:	call   8050 <__stack_chk_fail@plt>
   22a99:	nop    DWORD PTR [rax+0x0]
   22aa0:	push   r15
   22aa2:	push   r14
   22aa4:	mov    r14,rsi
   22aa7:	push   r13
   22aa9:	push   r12
   22aab:	push   rbp
   22aac:	push   rbx
   22aad:	mov    rbp,rdi
   22ab0:	xor    ebx,ebx
   22ab2:	sub    rsp,0x78
   22ab6:	mov    rax,QWORD PTR fs:0x28
   22abf:	mov    QWORD PTR [rsp+0x68],rax
   22ac4:	xor    eax,eax
   22ac6:	call   22010 <g_str_equal@plt+0x19c58>
   22acb:	mov    QWORD PTR [r14],rax
   22ace:	lea    rax,[rsp+0x18]
   22ad3:	lea    r12,[rsp+0x20]
   22ad8:	lea    r13,[rsp+0x40]
   22add:	mov    QWORD PTR [rsp+0x8],rax
   22ae2:	jmp    22b1d <g_str_equal@plt+0x1a765>
   22ae4:	nop    DWORD PTR [rax+0x0]
   22ae8:	test   r15,r15
   22aeb:	je     22af2 <g_str_equal@plt+0x1a73a>
   22aed:	add    QWORD PTR [r15+0x8],0x1
   22af2:	mov    rsi,r12
   22af5:	mov    rdi,rbp
   22af8:	call   12640 <g_str_equal@plt+0xa288>
   22afd:	test   r15,r15
   22b00:	je     22bd8 <g_str_equal@plt+0x1a820>
   22b06:	mov    rdi,QWORD PTR [r14]
   22b09:	mov    rsi,r15
   22b0c:	add    ebx,0x1
   22b0f:	call   220e0 <g_str_equal@plt+0x19d28>
   22b14:	cmp    ebx,0xffffffff
   22b17:	je     22be8 <g_str_equal@plt+0x1a830>
   22b1d:	lea    r8,[rip+0x949d]        # 2bfc1 <_fini@@Base+0x2d3d>
   22b24:	mov    r9d,ebx
   22b27:	mov    ecx,0x20
   22b2c:	mov    edx,0x1
   22b31:	mov    esi,0x20
   22b36:	mov    rdi,r12
   22b39:	xor    eax,eax
   22b3b:	call   81b0 <__snprintf_chk@plt>
   22b40:	mov    rsi,r12
   22b43:	mov    rdi,rbp
   22b46:	call   121a0 <g_str_equal@plt+0x9de8>
   22b4b:	lea    r8,[rip+0xb377]        # 2dec9 <_fini@@Base+0x4c45>
   22b52:	mov    ecx,0x20
   22b57:	mov    edx,0x1
   22b5c:	mov    r15,rax
   22b5f:	mov    r9d,ebx
   22b62:	mov    esi,0x20
   22b67:	mov    rdi,r13
   22b6a:	xor    eax,eax
   22b6c:	call   81b0 <__snprintf_chk@plt>
   22b71:	mov    rsi,r13
   22b74:	mov    rdi,rbp
   22b77:	call   22510 <g_str_equal@plt+0x1a158>
   22b7c:	test   r15,r15
   22b7f:	sete   cl
   22b82:	test   eax,eax
   22b84:	sete   dl
   22b87:	cmp    cl,dl
   22b89:	je     22be8 <g_str_equal@plt+0x1a830>
   22b8b:	test   eax,eax
   22b8d:	je     22ae8 <g_str_equal@plt+0x1a730>
   22b93:	mov    rsi,QWORD PTR [rsp+0x8]
   22b98:	mov    rdx,r13
   22b9b:	mov    rdi,rbp
   22b9e:	call   229e0 <g_str_equal@plt+0x1a628>
   22ba3:	mov    rdi,QWORD PTR [rsp+0x18]
   22ba8:	call   12260 <g_str_equal@plt+0x9ea8>
   22bad:	test   rax,rax
   22bb0:	jne    22afd <g_str_equal@plt+0x1a745>
   22bb6:	lea    rcx,[rip+0xb3c3]        # 2df80 <_fini@@Base+0x4cfc>
   22bbd:	lea    rsi,[rip+0xb134]        # 2dcf8 <_fini@@Base+0x4a74>
   22bc4:	lea    rdi,[rip+0xb287]        # 2de52 <_fini@@Base+0x4bce>
   22bcb:	mov    edx,0xf8
   22bd0:	call   7a70 <__assert_fail@plt>
   22bd5:	nop    DWORD PTR [rax]
   22bd8:	mov    r15,QWORD PTR [rsp+0x18]
   22bdd:	jmp    22b06 <g_str_equal@plt+0x1a74e>
   22be2:	nop    WORD PTR [rax+rax*1+0x0]
   22be8:	mov    rax,QWORD PTR [rsp+0x68]
   22bed:	xor    rax,QWORD PTR fs:0x28
   22bf6:	jne    22c07 <g_str_equal@plt+0x1a84f>
   22bf8:	add    rsp,0x78
   22bfc:	pop    rbx
   22bfd:	pop    rbp
   22bfe:	pop    r12
   22c00:	pop    r13
   22c02:	pop    r14
   22c04:	pop    r15
   22c06:	ret    
   22c07:	call   8050 <__stack_chk_fail@plt>
   22c0c:	nop    DWORD PTR [rax+0x0]
   22c10:	push   r15
   22c12:	push   r14
   22c14:	mov    r14,rdi
   22c17:	push   r13
   22c19:	push   r12
   22c1b:	mov    r12,rsi
   22c1e:	push   rbp
   22c1f:	push   rbx
   22c20:	sub    rsp,0x28
   22c24:	mov    rax,QWORD PTR fs:0x28
   22c2d:	mov    QWORD PTR [rsp+0x18],rax
   22c32:	xor    eax,eax
   22c34:	call   11fa0 <g_str_equal@plt+0x9be8>
   22c39:	mov    rdi,r14
   22c3c:	mov    r13,rax
   22c3f:	call   12510 <g_str_equal@plt+0xa158>
   22c44:	test   rax,rax
   22c47:	je     22e94 <g_str_equal@plt+0x1aadc>
   22c4d:	mov    rbp,rax
   22c50:	mov    rdi,QWORD PTR [rbp+0x8]
   22c54:	test   rdi,rdi
   22c57:	je     22c80 <g_str_equal@plt+0x1a8c8>
   22c59:	mov    eax,DWORD PTR [rdi]
   22c5b:	lea    edx,[rax-0x1]
   22c5e:	cmp    edx,0x5
   22c61:	ja     2324f <g_str_equal@plt+0x1ae97>
   22c67:	cmp    eax,0x4
   22c6a:	je     22f40 <g_str_equal@plt+0x1ab88>
   22c70:	cmp    eax,0x5
   22c73:	je     22e00 <g_str_equal@plt+0x1aa48>
   22c79:	nop    DWORD PTR [rax+0x0]
   22c80:	mov    rbx,QWORD PTR [rbp+0x0]
   22c84:	mov    rdi,rbx
   22c87:	jmp    22c94 <g_str_equal@plt+0x1a8dc>
   22c89:	nop    DWORD PTR [rax+0x0]
   22c90:	lea    rdi,[r15+0x2]
   22c94:	mov    esi,0x2e
   22c99:	call   7f90 <strchr@plt>
   22c9e:	test   rax,rax
   22ca1:	mov    r15,rax
   22ca4:	je     22f20 <g_str_equal@plt+0x1ab68>
   22caa:	cmp    BYTE PTR [rax+0x1],0x2e
   22cae:	je     22c90 <g_str_equal@plt+0x1a8d8>
   22cb0:	mov    rsi,rax
   22cb3:	mov    rdi,rbx
   22cb6:	add    r15,0x1
   22cba:	sub    rsi,rbx
   22cbd:	call   7c40 <g_strndup@plt>
   22cc2:	mov    rbx,rax
   22cc5:	movzx  ecx,BYTE PTR [rbx]
   22cc8:	test   cl,cl
   22cca:	je     22f36 <g_str_equal@plt+0x1ab7e>
   22cd0:	xor    edx,edx
   22cd2:	xor    eax,eax
   22cd4:	jmp    22cf5 <g_str_equal@plt+0x1a93d>
   22cd6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   22ce0:	movzx  ecx,BYTE PTR [rbx+rax*1]
   22ce4:	mov    rax,rdi
   22ce7:	mov    BYTE PTR [rbx+rdx*1],cl
   22cea:	movzx  ecx,BYTE PTR [rsi]
   22ced:	add    rdx,0x1
   22cf1:	test   cl,cl
   22cf3:	je     22d24 <g_str_equal@plt+0x1a96c>
   22cf5:	lea    rdi,[rax+0x1]
   22cf9:	cmp    cl,0x2e
   22cfc:	lea    rsi,[rbx+rdi*1]
   22d00:	jne    22ce0 <g_str_equal@plt+0x1a928>
   22d02:	movzx  ecx,BYTE PTR [rsi]
   22d05:	cmp    cl,0x2e
   22d08:	jne    23230 <g_str_equal@plt+0x1ae78>
   22d0e:	add    rax,0x2
   22d12:	mov    BYTE PTR [rbx+rdx*1],cl
   22d15:	add    rdx,0x1
   22d19:	lea    rsi,[rbx+rax*1]
   22d1d:	movzx  ecx,BYTE PTR [rsi]
   22d20:	test   cl,cl
   22d22:	jne    22cf5 <g_str_equal@plt+0x1a93d>
   22d24:	add    rdx,rbx
   22d27:	mov    BYTE PTR [rdx],0x0
   22d2a:	mov    rsi,rbx
   22d2d:	mov    rdi,r13
   22d30:	call   121a0 <g_str_equal@plt+0x9de8>
   22d35:	test   rax,rax
   22d38:	je     22f58 <g_str_equal@plt+0x1aba0>
   22d3e:	mov    edx,DWORD PTR [rax]
   22d40:	lea    ecx,[rdx-0x1]
   22d43:	cmp    ecx,0x5
   22d46:	ja     2324f <g_str_equal@plt+0x1ae97>
   22d4c:	cmp    edx,0x4
   22d4f:	jne    22d5a <g_str_equal@plt+0x1a9a2>
   22d51:	test   r15,r15
   22d54:	jne    22e5c <g_str_equal@plt+0x1aaa4>
   22d5a:	lea    r8,[rip+0xafd7]        # 2dd38 <_fini@@Base+0x4ab4>
   22d61:	lea    rcx,[rip+0xb200]        # 2df68 <_fini@@Base+0x4ce4>
   22d68:	lea    rsi,[rip+0xaf89]        # 2dcf8 <_fini@@Base+0x4a74>
   22d6f:	mov    rdi,r12
   22d72:	mov    edx,0x1c5
   22d77:	xor    eax,eax
   22d79:	call   db00 <g_str_equal@plt+0x5748>
   22d7e:	mov    rdi,rbx
   22d81:	call   7880 <g_free@plt>
   22d86:	xor    r14d,r14d
   22d89:	test   r13,r13
   22d8c:	je     22dcf <g_str_equal@plt+0x1aa17>
   22d8e:	mov    rax,QWORD PTR [r13+0x8]
   22d92:	test   rax,rax
   22d95:	je     232c9 <g_str_equal@plt+0x1af11>
   22d9b:	sub    rax,0x1
   22d9f:	test   rax,rax
   22da2:	mov    QWORD PTR [r13+0x8],rax
   22da6:	je     22f8c <g_str_equal@plt+0x1abd4>
   22dac:	test   r14,r14
   22daf:	je     22dcf <g_str_equal@plt+0x1aa17>
   22db1:	mov    rax,QWORD PTR [r14+0x8]
   22db5:	test   rax,rax
   22db8:	je     232c9 <g_str_equal@plt+0x1af11>
   22dbe:	sub    rax,0x1
   22dc2:	test   rax,rax
   22dc5:	mov    QWORD PTR [r14+0x8],rax
   22dc9:	je     22f7f <g_str_equal@plt+0x1abc7>
   22dcf:	xor    ebx,ebx
   22dd1:	mov    rdx,QWORD PTR [rsp+0x18]
   22dd6:	xor    rdx,QWORD PTR fs:0x28
   22ddf:	mov    rax,rbx
   22de2:	jne    232c4 <g_str_equal@plt+0x1af0c>
   22de8:	add    rsp,0x28
   22dec:	pop    rbx
   22ded:	pop    rbp
   22dee:	pop    r12
   22df0:	pop    r13
   22df2:	pop    r14
   22df4:	pop    r15
   22df6:	ret    
   22df7:	nop    WORD PTR [rax+rax*1+0x0]
   22e00:	call   22300 <g_str_equal@plt+0x19f48>
   22e05:	test   eax,eax
   22e07:	jne    22c80 <g_str_equal@plt+0x1a8c8>
   22e0d:	mov    r9,QWORD PTR [rbp+0x0]
   22e11:	lea    r8,[rip+0xb053]        # 2de6b <_fini@@Base+0x4be7>
   22e18:	lea    rcx,[rip+0xb149]        # 2df68 <_fini@@Base+0x4ce4>
   22e1f:	lea    rsi,[rip+0xaed2]        # 2dcf8 <_fini@@Base+0x4a74>
   22e26:	mov    rdi,r12
   22e29:	mov    edx,0x1b6
   22e2e:	xor    eax,eax
   22e30:	call   db00 <g_str_equal@plt+0x5748>
   22e35:	xor    edi,edi
   22e37:	call   7880 <g_free@plt>
   22e3c:	jmp    22d86 <g_str_equal@plt+0x1a9ce>
   22e41:	call   11fa0 <g_str_equal@plt+0x9be8>
   22e46:	mov    rsi,rbx
   22e49:	mov    rdx,rax
   22e4c:	mov    rdi,r13
   22e4f:	mov    QWORD PTR [rsp],rax
   22e53:	call   11ff0 <g_str_equal@plt+0x9c38>
   22e58:	mov    rax,QWORD PTR [rsp]
   22e5c:	mov    rdx,QWORD PTR [rbp+0x8]
   22e60:	test   rdx,rdx
   22e63:	je     22e6a <g_str_equal@plt+0x1aab2>
   22e65:	add    QWORD PTR [rdx+0x8],0x1
   22e6a:	mov    rsi,r15
   22e6d:	mov    rdi,rax
   22e70:	call   11ff0 <g_str_equal@plt+0x9c38>
   22e75:	mov    rdi,rbx
   22e78:	call   7880 <g_free@plt>
   22e7d:	mov    rsi,rbp
   22e80:	mov    rdi,r14
   22e83:	call   12540 <g_str_equal@plt+0xa188>
   22e88:	test   rax,rax
   22e8b:	mov    rbp,rax
   22e8e:	jne    22c50 <g_str_equal@plt+0x1a898>
   22e94:	call   11fa0 <g_str_equal@plt+0x9be8>
   22e99:	mov    rdi,r13
   22e9c:	mov    rbx,rax
   22e9f:	call   12510 <g_str_equal@plt+0xa158>
   22ea4:	test   rax,rax
   22ea7:	mov    rbp,rax
   22eaa:	jne    22ee0 <g_str_equal@plt+0x1ab28>
   22eac:	jmp    22f99 <g_str_equal@plt+0x1abe1>
   22eb1:	nop    DWORD PTR [rax+0x0]
   22eb8:	add    QWORD PTR [rdx+0x8],0x1
   22ebd:	mov    rsi,QWORD PTR [rbp+0x0]
   22ec1:	mov    rdi,rbx
   22ec4:	call   11ff0 <g_str_equal@plt+0x9c38>
   22ec9:	mov    rsi,rbp
   22ecc:	mov    rdi,r13
   22ecf:	call   12540 <g_str_equal@plt+0xa188>
   22ed4:	test   rax,rax
   22ed7:	mov    rbp,rax
   22eda:	je     22f99 <g_str_equal@plt+0x1abe1>
   22ee0:	mov    rdx,QWORD PTR [rbp+0x8]
   22ee4:	test   rdx,rdx
   22ee7:	je     22ebd <g_str_equal@plt+0x1ab05>
   22ee9:	mov    eax,DWORD PTR [rdx]
   22eeb:	lea    ecx,[rax-0x1]
   22eee:	cmp    ecx,0x5
   22ef1:	ja     2326e <g_str_equal@plt+0x1aeb6>
   22ef7:	cmp    eax,0x4
   22efa:	jne    22eb8 <g_str_equal@plt+0x1ab00>
   22efc:	mov    rdi,rdx
   22eff:	mov    QWORD PTR [rsp],rdx
   22f03:	call   12260 <g_str_equal@plt+0x9ea8>
   22f08:	test   rax,rax
   22f0b:	mov    rdx,QWORD PTR [rsp]
   22f0f:	jne    23158 <g_str_equal@plt+0x1ada0>
   22f15:	mov    rdx,QWORD PTR [rbp+0x8]
   22f19:	test   rdx,rdx
   22f1c:	jne    22eb8 <g_str_equal@plt+0x1ab00>
   22f1e:	jmp    22ebd <g_str_equal@plt+0x1ab05>
   22f20:	mov    rdi,rbx
   22f23:	call   7a50 <g_strdup@plt>
   22f28:	mov    rbx,rax
   22f2b:	movzx  ecx,BYTE PTR [rbx]
   22f2e:	test   cl,cl
   22f30:	jne    22cd0 <g_str_equal@plt+0x1a918>
   22f36:	mov    rdx,rbx
   22f39:	jmp    22d27 <g_str_equal@plt+0x1a96f>
   22f3e:	xchg   ax,ax
   22f40:	call   12260 <g_str_equal@plt+0x9ea8>
   22f45:	test   rax,rax
   22f48:	je     22c80 <g_str_equal@plt+0x1a8c8>
   22f4e:	jmp    22e0d <g_str_equal@plt+0x1aa55>
   22f53:	nop    DWORD PTR [rax+rax*1+0x0]
   22f58:	test   r15,r15
   22f5b:	jne    22e41 <g_str_equal@plt+0x1aa89>
   22f61:	mov    rdx,QWORD PTR [rbp+0x8]
   22f65:	test   rdx,rdx
   22f68:	je     22f6f <g_str_equal@plt+0x1abb7>
   22f6a:	add    QWORD PTR [rdx+0x8],0x1
   22f6f:	mov    rsi,rbx
   22f72:	mov    rdi,r13
   22f75:	call   11ff0 <g_str_equal@plt+0x9c38>
   22f7a:	jmp    22e75 <g_str_equal@plt+0x1aabd>
   22f7f:	mov    rdi,r14
   22f82:	call   12960 <g_str_equal@plt+0xa5a8>
   22f87:	jmp    22dcf <g_str_equal@plt+0x1aa17>
   22f8c:	mov    rdi,r13
   22f8f:	call   12960 <g_str_equal@plt+0xa5a8>
   22f94:	jmp    22dac <g_str_equal@plt+0x1a9f4>
   22f99:	test   r13,r13
   22f9c:	je     22fbc <g_str_equal@plt+0x1ac04>
   22f9e:	mov    rax,QWORD PTR [r13+0x8]
   22fa2:	test   rax,rax
   22fa5:	je     232c9 <g_str_equal@plt+0x1af11>
   22fab:	sub    rax,0x1
   22faf:	test   rax,rax
   22fb2:	mov    QWORD PTR [r13+0x8],rax
   22fb6:	je     230b0 <g_str_equal@plt+0x1acf8>
   22fbc:	mov    rdi,rbx
   22fbf:	call   12510 <g_str_equal@plt+0xa158>
   22fc4:	test   rax,rax
   22fc7:	mov    r14,rax
   22fca:	je     231ef <g_str_equal@plt+0x1ae37>
   22fd0:	lea    r15,[rsp+0x10]
   22fd5:	mov    rdi,QWORD PTR [rax]
   22fd8:	xor    esi,esi
   22fda:	mov    edx,0xa
   22fdf:	mov    rbp,0xffffffffffffffff
   22fe6:	mov    rcx,r15
   22fe9:	call   afb0 <g_str_equal@plt+0x2bf8>
   22fee:	test   eax,eax
   22ff0:	mov    DWORD PTR [rsp+0xc],eax
   22ff4:	sete   BYTE PTR [rsp]
   22ff8:	movzx  eax,BYTE PTR [rsp]
   22ffc:	xor    r13d,r13d
   22fff:	test   al,al
   23001:	je     23013 <g_str_equal@plt+0x1ac5b>
   23003:	mov    rax,QWORD PTR [rsp+0x10]
   23008:	add    r13,0x1
   2300c:	cmp    rbp,rax
   2300f:	cmovl  rbp,rax
   23013:	mov    rsi,r14
   23016:	mov    rdi,rbx
   23019:	call   12540 <g_str_equal@plt+0xa188>
   2301e:	test   rax,rax
   23021:	mov    r14,rax
   23024:	je     230bd <g_str_equal@plt+0x1ad05>
   2302a:	mov    rdi,QWORD PTR [r14]
   2302d:	xor    esi,esi
   2302f:	mov    rcx,r15
   23032:	mov    edx,0xa
   23037:	call   afb0 <g_str_equal@plt+0x2bf8>
   2303c:	test   eax,eax
   2303e:	sete   al
   23041:	cmp    al,BYTE PTR [rsp]
   23044:	je     22fff <g_str_equal@plt+0x1ac47>
   23046:	lea    r8,[rip+0xad13]        # 2dd60 <_fini@@Base+0x4adc>
   2304d:	lea    rcx,[rip+0xaee4]        # 2df38 <_fini@@Base+0x4cb4>
   23054:	lea    rsi,[rip+0xac9d]        # 2dcf8 <_fini@@Base+0x4a74>
   2305b:	mov    edx,0x15b
   23060:	mov    rdi,r12
   23063:	xor    eax,eax
   23065:	call   db00 <g_str_equal@plt+0x5748>
   2306a:	xor    edi,edi
   2306c:	xor    r14d,r14d
   2306f:	xor    r13d,r13d
   23072:	call   7880 <g_free@plt>
   23077:	test   rbx,rbx
   2307a:	je     22dcf <g_str_equal@plt+0x1aa17>
   23080:	mov    rax,QWORD PTR [rbx+0x8]
   23084:	test   rax,rax
   23087:	je     232c9 <g_str_equal@plt+0x1af11>
   2308d:	sub    rax,0x1
   23091:	test   rax,rax
   23094:	mov    QWORD PTR [rbx+0x8],rax
   23098:	jne    230a2 <g_str_equal@plt+0x1acea>
   2309a:	mov    rdi,rbx
   2309d:	call   12960 <g_str_equal@plt+0xa5a8>
   230a2:	test   r13,r13
   230a5:	jne    22d8e <g_str_equal@plt+0x1a9d6>
   230ab:	jmp    22dac <g_str_equal@plt+0x1a9f4>
   230b0:	mov    rdi,r13
   230b3:	call   12960 <g_str_equal@plt+0xa5a8>
   230b8:	jmp    22fbc <g_str_equal@plt+0x1ac04>
   230bd:	lea    rax,[rbp+0x1]
   230c1:	cmp    rax,r13
   230c4:	jne    23291 <g_str_equal@plt+0x1aed9>
   230ca:	mov    eax,DWORD PTR [rsp+0xc]
   230ce:	test   eax,eax
   230d0:	jne    22dd1 <g_str_equal@plt+0x1aa19>
   230d6:	call   22010 <g_str_equal@plt+0x19c58>
   230db:	xor    r13d,r13d
   230de:	mov    r14,rax
   230e1:	jmp    2310a <g_str_equal@plt+0x1ad52>
   230e3:	mov    eax,DWORD PTR [r14]
   230e6:	lea    edx,[rax-0x1]
   230e9:	cmp    edx,0x5
   230ec:	ja     2326e <g_str_equal@plt+0x1aeb6>
   230f2:	cmp    eax,0x5
   230f5:	mov    edi,0x0
   230fa:	cmove  rdi,r14
   230fe:	mov    rsi,rbp
   23101:	add    r13,0x1
   23105:	call   220e0 <g_str_equal@plt+0x19d28>
   2310a:	mov    rdi,rbx
   2310d:	call   12260 <g_str_equal@plt+0x9ea8>
   23112:	cmp    rax,r13
   23115:	jbe    231c8 <g_str_equal@plt+0x1ae10>
   2311b:	lea    rdi,[rip+0xada1]        # 2dec3 <_fini@@Base+0x4c3f>
   23122:	mov    rsi,r13
   23125:	xor    eax,eax
   23127:	call   7ce0 <g_strdup_printf@plt>
   2312c:	mov    rdi,rbx
   2312f:	mov    r15,rax
   23132:	mov    rsi,rax
   23135:	call   121a0 <g_str_equal@plt+0x9de8>
   2313a:	mov    rdi,r15
   2313d:	mov    rbp,rax
   23140:	call   7880 <g_free@plt>
   23145:	test   rbp,rbp
   23148:	je     23183 <g_str_equal@plt+0x1adcb>
   2314a:	add    QWORD PTR [rbp+0x8],0x1
   2314f:	test   r14,r14
   23152:	jne    230e3 <g_str_equal@plt+0x1ad2b>
   23154:	xor    edi,edi
   23156:	jmp    230fe <g_str_equal@plt+0x1ad46>
   23158:	mov    rsi,r12
   2315b:	mov    rdi,rdx
   2315e:	call   22c10 <g_str_equal@plt+0x1a858>
   23163:	test   rax,rax
   23166:	mov    r14,rax
   23169:	je     23273 <g_str_equal@plt+0x1aebb>
   2316f:	mov    rsi,QWORD PTR [rbp+0x0]
   23173:	mov    rdx,rax
   23176:	mov    rdi,rbx
   23179:	call   11ff0 <g_str_equal@plt+0x9c38>
   2317e:	jmp    22ec9 <g_str_equal@plt+0x1ab11>
   23183:	lea    r8,[rip+0xad26]        # 2deb0 <_fini@@Base+0x4c2c>
   2318a:	lea    rcx,[rip+0xadd7]        # 2df68 <_fini@@Base+0x4ce4>
   23191:	lea    rsi,[rip+0xab60]        # 2dcf8 <_fini@@Base+0x4a74>
   23198:	mov    r9,r13
   2319b:	xor    eax,eax
   2319d:	mov    edx,0x1fc
   231a2:	mov    rdi,r12
   231a5:	xor    r13d,r13d
   231a8:	call   db00 <g_str_equal@plt+0x5748>
   231ad:	xor    edi,edi
   231af:	call   7880 <g_free@plt>
   231b4:	test   rbx,rbx
   231b7:	jne    23080 <g_str_equal@plt+0x1acc8>
   231bd:	jmp    22dac <g_str_equal@plt+0x1a9f4>
   231c2:	nop    WORD PTR [rax+rax*1+0x0]
   231c8:	test   rbx,rbx
   231cb:	je     231e7 <g_str_equal@plt+0x1ae2f>
   231cd:	mov    rax,QWORD PTR [rbx+0x8]
   231d1:	test   rax,rax
   231d4:	je     232c9 <g_str_equal@plt+0x1af11>
   231da:	sub    rax,0x1
   231de:	test   rax,rax
   231e1:	mov    QWORD PTR [rbx+0x8],rax
   231e5:	je     23220 <g_str_equal@plt+0x1ae68>
   231e7:	mov    rbx,r14
   231ea:	jmp    22dd1 <g_str_equal@plt+0x1aa19>
   231ef:	mov    rdi,rbx
   231f2:	call   12260 <g_str_equal@plt+0x9ea8>
   231f7:	test   rax,rax
   231fa:	je     22dd1 <g_str_equal@plt+0x1aa19>
   23200:	lea    rcx,[rip+0xad21]        # 2df28 <_fini@@Base+0x4ca4>
   23207:	lea    rsi,[rip+0xaaea]        # 2dcf8 <_fini@@Base+0x4a74>
   2320e:	lea    rdi,[rip+0xac83]        # 2de98 <_fini@@Base+0x4c14>
   23215:	mov    edx,0x168
   2321a:	call   7a70 <__assert_fail@plt>
   2321f:	nop
   23220:	mov    rdi,rbx
   23223:	mov    rbx,r14
   23226:	call   12960 <g_str_equal@plt+0xa5a8>
   2322b:	jmp    22dd1 <g_str_equal@plt+0x1aa19>
   23230:	lea    rcx,[rip+0xad19]        # 2df50 <_fini@@Base+0x4ccc>
   23237:	lea    rsi,[rip+0xaaba]        # 2dcf8 <_fini@@Base+0x4a74>
   2323e:	lea    rdi,[rip+0xac3b]        # 2de80 <_fini@@Base+0x4bfc>
   23245:	mov    edx,0x135
   2324a:	call   7a70 <__assert_fail@plt>
   2324f:	lea    rcx,[rip+0xad62]        # 2dfb8 <_fini@@Base+0x4d34>
   23256:	lea    rsi,[rip+0x763b]        # 2a898 <_fini@@Base+0x1614>
   2325d:	lea    rdi,[rip+0x767c]        # 2a8e0 <_fini@@Base+0x165c>
   23264:	mov    edx,0x7f
   23269:	call   7a70 <__assert_fail@plt>
   2326e:	call   22590 <g_str_equal@plt+0x1a1d8>
   23273:	xor    edi,edi
   23275:	call   7880 <g_free@plt>
   2327a:	test   rbx,rbx
   2327d:	jne    23080 <g_str_equal@plt+0x1acc8>
   23283:	test   r13,r13
   23286:	jne    22d8e <g_str_equal@plt+0x1a9d6>
   2328c:	jmp    22dcf <g_str_equal@plt+0x1aa17>
   23291:	sub    rsp,0x8
   23295:	lea    rcx,[rip+0xac9c]        # 2df38 <_fini@@Base+0x4cb4>
   2329c:	lea    r8,[rip+0xaae5]        # 2dd88 <_fini@@Base+0x4b04>
   232a3:	push   rbp
   232a4:	lea    rsi,[rip+0xaa4d]        # 2dcf8 <_fini@@Base+0x4a74>
   232ab:	mov    edx,0x174
   232b0:	mov    r9,r13
   232b3:	mov    rdi,r12
   232b6:	xor    eax,eax
   232b8:	call   db00 <g_str_equal@plt+0x5748>
   232bd:	pop    rdx
   232be:	pop    rcx
   232bf:	jmp    2306a <g_str_equal@plt+0x1acb2>
   232c4:	call   8050 <__stack_chk_fail@plt>
   232c9:	call   8538 <g_str_equal@plt+0x180>
   232ce:	xchg   ax,ax
   232d0:	push   r15
   232d2:	push   r14
   232d4:	push   r13
   232d6:	push   r12
   232d8:	mov    r13,rdi
   232db:	push   rbp
   232dc:	push   rbx
   232dd:	mov    rdi,rsi
   232e0:	mov    rbx,rsi
   232e3:	sub    rsp,0x18
   232e7:	mov    QWORD PTR [rsp+0x8],rsi
   232ec:	call   7cd0 <strlen@plt>
   232f1:	test   rax,rax
   232f4:	je     23301 <g_str_equal@plt+0x1af49>
   232f6:	cmp    BYTE PTR [rbx+rax*1-0x1],0x2e
   232fb:	jne    233ff <g_str_equal@plt+0x1b047>
   23301:	xor    r12d,r12d
   23304:	xor    r15d,r15d
   23307:	jmp    23340 <g_str_equal@plt+0x1af88>
   23309:	nop    DWORD PTR [rax+0x0]
   23310:	test   r14,r14
   23313:	je     2331d <g_str_equal@plt+0x1af65>
   23315:	test   ebx,ebx
   23317:	jne    233f8 <g_str_equal@plt+0x1b040>
   2331d:	test   r14,r14
   23320:	jne    23326 <g_str_equal@plt+0x1af6e>
   23322:	test   ebx,ebx
   23324:	je     233a0 <g_str_equal@plt+0x1afe8>
   23326:	test   ebx,ebx
   23328:	mov    eax,0x1
   2332d:	cmove  ebx,eax
   23330:	add    r15d,0x1
   23334:	add    r12d,ebx
   23337:	cmp    r15d,0x7fffffff
   2333e:	je     233a0 <g_str_equal@plt+0x1afe8>
   23340:	mov    rsi,QWORD PTR [rsp+0x8]
   23345:	lea    rdi,[rip+0xab7b]        # 2dec7 <_fini@@Base+0x4c43>
   2334c:	mov    edx,r15d
   2334f:	xor    eax,eax
   23351:	call   7ce0 <g_strdup_printf@plt>
   23356:	mov    rdi,r13
   23359:	mov    rbp,rax
   2335c:	mov    rsi,rax
   2335f:	call   22510 <g_str_equal@plt+0x1a158>
   23364:	mov    rdi,rbp
   23367:	mov    ebx,eax
   23369:	call   7cd0 <strlen@plt>
   2336e:	mov    rsi,rbp
   23371:	mov    rdi,r13
   23374:	mov    BYTE PTR [rbp+rax*1-0x1],0x0
   23379:	call   121a0 <g_str_equal@plt+0x9de8>
   2337e:	mov    rdi,rbp
   23381:	mov    r14,rax
   23384:	call   7880 <g_free@plt>
   23389:	test   ebx,ebx
   2338b:	jns    23310 <g_str_equal@plt+0x1af58>
   2338d:	add    rsp,0x18
   23391:	mov    eax,ebx
   23393:	pop    rbx
   23394:	pop    rbp
   23395:	pop    r12
   23397:	pop    r13
   23399:	pop    r14
   2339b:	pop    r15
   2339d:	ret    
   2339e:	xchg   ax,ax
   233a0:	mov    rdi,r13
   233a3:	call   12510 <g_str_equal@plt+0xa158>
   233a8:	test   rax,rax
   233ab:	mov    rbx,rax
   233ae:	je     233e1 <g_str_equal@plt+0x1b029>
   233b0:	mov    rdi,rbx
   233b3:	call   11fe0 <g_str_equal@plt+0x9c28>
   233b8:	mov    rsi,QWORD PTR [rsp+0x8]
   233bd:	xor    edx,edx
   233bf:	mov    rdi,rax
   233c2:	call   a890 <g_str_equal@plt+0x24d8>
   233c7:	mov    rsi,rbx
   233ca:	cmp    eax,0x1
   233cd:	mov    rdi,r13
   233d0:	adc    r12d,0x0
   233d4:	call   12540 <g_str_equal@plt+0xa188>
   233d9:	test   rax,rax
   233dc:	mov    rbx,rax
   233df:	jne    233b0 <g_str_equal@plt+0x1aff8>
   233e1:	mov    rdi,r13
   233e4:	call   12260 <g_str_equal@plt+0x9ea8>
   233e9:	cmp    rax,r12
   233ec:	jne    233f8 <g_str_equal@plt+0x1b040>
   233ee:	mov    ebx,r15d
   233f1:	jmp    2338d <g_str_equal@plt+0x1afd5>
   233f3:	nop    DWORD PTR [rax+rax*1+0x0]
   233f8:	mov    ebx,0xffffffea
   233fd:	jmp    2338d <g_str_equal@plt+0x1afd5>
   233ff:	lea    rcx,[rip+0xaaea]        # 2def0 <_fini@@Base+0x4c6c>
   23406:	lea    rsi,[rip+0xa8eb]        # 2dcf8 <_fini@@Base+0x4a74>
   2340d:	lea    rdi,[rip+0xa9bc]        # 2ddd0 <_fini@@Base+0x4b4c>
   23414:	mov    edx,0x256
   23419:	call   7a70 <__assert_fail@plt>
   2341e:	xchg   ax,ax
   23420:	push   r14
   23422:	push   r13
   23424:	mov    r14,rdi
   23427:	push   r12
   23429:	push   rbp
   2342a:	mov    rdi,rsi
   2342d:	push   rbx
   2342e:	mov    rbp,rsi
   23431:	mov    r13d,edx
   23434:	call   12510 <g_str_equal@plt+0xa158>
   23439:	test   rax,rax
   2343c:	je     2349e <g_str_equal@plt+0x1b0e6>
   2343e:	mov    rbx,rax
   23441:	jmp    23474 <g_str_equal@plt+0x1b0bc>
   23443:	nop    DWORD PTR [rax+rax*1+0x0]
   23448:	mov    rdx,QWORD PTR [rbx+0x8]
   2344c:	test   rdx,rdx
   2344f:	je     23456 <g_str_equal@plt+0x1b09e>
   23451:	add    QWORD PTR [rdx+0x8],0x1
   23456:	mov    rsi,QWORD PTR [rbx]
   23459:	mov    rdi,r14
   2345c:	call   11ff0 <g_str_equal@plt+0x9c38>
   23461:	mov    rsi,QWORD PTR [rbx]
   23464:	mov    rdi,rbp
   23467:	mov    rbx,r12
   2346a:	call   12640 <g_str_equal@plt+0xa288>
   2346f:	test   r12,r12
   23472:	je     2349e <g_str_equal@plt+0x1b0e6>
   23474:	mov    rsi,rbx
   23477:	mov    rdi,rbp
   2347a:	call   12540 <g_str_equal@plt+0xa188>
   2347f:	test   r13b,r13b
   23482:	mov    r12,rax
   23485:	jne    23448 <g_str_equal@plt+0x1b090>
   23487:	mov    rsi,QWORD PTR [rbx]
   2348a:	mov    rdi,r14
   2348d:	call   12200 <g_str_equal@plt+0x9e48>
   23492:	test   eax,eax
   23494:	je     23448 <g_str_equal@plt+0x1b090>
   23496:	test   r12,r12
   23499:	mov    rbx,r12
   2349c:	jne    23474 <g_str_equal@plt+0x1b0bc>
   2349e:	pop    rbx
   2349f:	pop    rbp
   234a0:	pop    r12
   234a2:	pop    r13
   234a4:	pop    r14
   234a6:	ret    
   234a7:	nop    WORD PTR [rax+rax*1+0x0]
   234b0:	push   r12
   234b2:	push   rbp
   234b3:	push   rbx
   234b4:	mov    rbx,rsi
   234b7:	mov    rsi,QWORD PTR [rsi]
   234ba:	test   rsi,rsi
   234bd:	je     23534 <g_str_equal@plt+0x1b17c>
   234bf:	mov    rbp,rdi
   234c2:	mov    r12,rdx
   234c5:	jmp    234dc <g_str_equal@plt+0x1b124>
   234c7:	nop    WORD PTR [rax+rax*1+0x0]
   234d0:	add    rbx,0x10
   234d4:	mov    rsi,QWORD PTR [rbx]
   234d7:	test   rsi,rsi
   234da:	je     23534 <g_str_equal@plt+0x1b17c>
   234dc:	mov    rdi,rbp
   234df:	call   12200 <g_str_equal@plt+0x9e48>
   234e4:	test   eax,eax
   234e6:	je     234d0 <g_str_equal@plt+0x1b118>
   234e8:	mov    rsi,QWORD PTR [rbx+0x8]
   234ec:	mov    rdi,rbp
   234ef:	call   12200 <g_str_equal@plt+0x9e48>
   234f4:	test   eax,eax
   234f6:	jne    23540 <g_str_equal@plt+0x1b188>
   234f8:	mov    rsi,QWORD PTR [rbx]
   234fb:	mov    rdi,rbp
   234fe:	call   121a0 <g_str_equal@plt+0x9de8>
   23503:	test   rax,rax
   23506:	je     2350d <g_str_equal@plt+0x1b155>
   23508:	add    QWORD PTR [rax+0x8],0x1
   2350d:	mov    rsi,QWORD PTR [rbx+0x8]
   23511:	mov    rdx,rax
   23514:	mov    rdi,rbp
   23517:	add    rbx,0x10
   2351b:	call   11ff0 <g_str_equal@plt+0x9c38>
   23520:	mov    rsi,QWORD PTR [rbx-0x10]
   23524:	mov    rdi,rbp
   23527:	call   12640 <g_str_equal@plt+0xa288>
   2352c:	mov    rsi,QWORD PTR [rbx]
   2352f:	test   rsi,rsi
   23532:	jne    234dc <g_str_equal@plt+0x1b124>
   23534:	pop    rbx
   23535:	mov    eax,0x1
   2353a:	pop    rbp
   2353b:	pop    r12
   2353d:	ret    
   2353e:	xchg   ax,ax
   23540:	mov    r9,QWORD PTR [rbx+0x8]
   23544:	sub    rsp,0x8
   23548:	lea    r8,[rip+0xa8b9]        # 2de08 <_fini@@Base+0x4b84>
   2354f:	push   QWORD PTR [rbx]
   23551:	lea    rcx,[rip+0xa978]        # 2ded0 <_fini@@Base+0x4c4c>
   23558:	lea    rsi,[rip+0xa799]        # 2dcf8 <_fini@@Base+0x4a74>
   2355f:	mov    edx,0x2b8
   23564:	mov    rdi,r12
   23567:	xor    eax,eax
   23569:	call   db00 <g_str_equal@plt+0x5748>
   2356e:	pop    rax
   2356f:	xor    eax,eax
   23571:	pop    rdx
   23572:	pop    rbx
   23573:	pop    rbp
   23574:	pop    r12
   23576:	ret    
   23577:	nop    WORD PTR [rax+rax*1+0x0]
   23580:	push   r15
   23582:	push   r14
   23584:	push   r13
   23586:	push   r12
   23588:	mov    r12,rdi
   2358b:	push   rbp
   2358c:	push   rbx
   2358d:	sub    rsp,0x18
   23591:	mov    QWORD PTR [rsp+0x8],rsi
   23596:	call   12510 <g_str_equal@plt+0xa158>
   2359b:	test   rax,rax
   2359e:	je     23710 <g_str_equal@plt+0x1b358>
   235a4:	mov    rdi,QWORD PTR [rax+0x8]
   235a8:	mov    r15,rax
   235ab:	mov    eax,DWORD PTR [rdi]
   235ad:	lea    edx,[rax-0x1]
   235b0:	cmp    edx,0x5
   235b3:	ja     23725 <g_str_equal@plt+0x1b36d>
   235b9:	xor    ebx,ebx
   235bb:	lea    r14,[rip+0x9bce]        # 2d190 <_fini@@Base+0x3f0c>
   235c2:	lea    r13,[rip+0x74a9]        # 2aa72 <_fini@@Base+0x17ee>
   235c9:	jmp    2362d <g_str_equal@plt+0x1b275>
   235cb:	nop    DWORD PTR [rax+rax*1+0x0]
   235d0:	cmp    eax,0x6
   235d3:	jne    23608 <g_str_equal@plt+0x1b250>
   235d5:	call   128a0 <g_str_equal@plt+0xa4e8>
   235da:	mov    rdx,r13
   235dd:	test   al,al
   235df:	cmovne rdx,r14
   235e3:	xor    ebp,ebp
   235e5:	test   rbx,rbx
   235e8:	je     23642 <g_str_equal@plt+0x1b28a>
   235ea:	mov    rdi,rdx
   235ed:	call   11c10 <g_str_equal@plt+0x9858>
   235f2:	mov    rsi,QWORD PTR [r15]
   235f5:	mov    rdi,rbx
   235f8:	mov    rdx,rax
   235fb:	call   11ff0 <g_str_equal@plt+0x9c38>
   23600:	mov    rdi,rbp
   23603:	call   7880 <g_free@plt>
   23608:	mov    rsi,r15
   2360b:	mov    rdi,r12
   2360e:	call   12540 <g_str_equal@plt+0xa188>
   23613:	test   rax,rax
   23616:	mov    r15,rax
   23619:	je     23660 <g_str_equal@plt+0x1b2a8>
   2361b:	mov    rdi,QWORD PTR [r15+0x8]
   2361f:	mov    eax,DWORD PTR [rdi]
   23621:	lea    edx,[rax-0x1]
   23624:	cmp    edx,0x5
   23627:	ja     23725 <g_str_equal@plt+0x1b36d>
   2362d:	cmp    eax,0x2
   23630:	jne    235d0 <g_str_equal@plt+0x1b218>
   23632:	call   11810 <g_str_equal@plt+0x9458>
   23637:	test   rbx,rbx
   2363a:	mov    rbp,rax
   2363d:	mov    rdx,rax
   23640:	jne    235ea <g_str_equal@plt+0x1b232>
   23642:	mov    rdi,r12
   23645:	mov    QWORD PTR [rsp],rdx
   23649:	call   125b0 <g_str_equal@plt+0xa1f8>
   2364e:	mov    rdx,QWORD PTR [rsp]
   23652:	mov    rbx,rax
   23655:	jmp    235ea <g_str_equal@plt+0x1b232>
   23657:	nop    WORD PTR [rax+rax*1+0x0]
   23660:	test   rbx,rbx
   23663:	je     23710 <g_str_equal@plt+0x1b358>
   23669:	mov    rsi,QWORD PTR [rsp+0x8]
   2366e:	mov    rdi,rbx
   23671:	call   22c10 <g_str_equal@plt+0x1a858>
   23676:	mov    rbp,rax
   23679:	mov    rax,QWORD PTR [rbx+0x8]
   2367d:	test   rax,rax
   23680:	je     23744 <g_str_equal@plt+0x1b38c>
   23686:	sub    rax,0x1
   2368a:	test   rax,rax
   2368d:	mov    QWORD PTR [rbx+0x8],rax
   23691:	je     236d0 <g_str_equal@plt+0x1b318>
   23693:	test   rbp,rbp
   23696:	je     236dd <g_str_equal@plt+0x1b325>
   23698:	mov    rdi,rbp
   2369b:	call   26280 <g_str_equal@plt+0x1dec8>
   236a0:	mov    rdx,QWORD PTR [rbp+0x8]
   236a4:	test   rdx,rdx
   236a7:	je     23744 <g_str_equal@plt+0x1b38c>
   236ad:	sub    rdx,0x1
   236b1:	test   rdx,rdx
   236b4:	mov    QWORD PTR [rbp+0x8],rdx
   236b8:	je     236f0 <g_str_equal@plt+0x1b338>
   236ba:	add    rsp,0x18
   236be:	pop    rbx
   236bf:	pop    rbp
   236c0:	pop    r12
   236c2:	pop    r13
   236c4:	pop    r14
   236c6:	pop    r15
   236c8:	ret    
   236c9:	nop    DWORD PTR [rax+0x0]
   236d0:	mov    rdi,rbx
   236d3:	call   12960 <g_str_equal@plt+0xa5a8>
   236d8:	test   rbp,rbp
   236db:	jne    23698 <g_str_equal@plt+0x1b2e0>
   236dd:	add    rsp,0x18
   236e1:	xor    eax,eax
   236e3:	pop    rbx
   236e4:	pop    rbp
   236e5:	pop    r12
   236e7:	pop    r13
   236e9:	pop    r14
   236eb:	pop    r15
   236ed:	ret    
   236ee:	xchg   ax,ax
   236f0:	mov    rdi,rbp
   236f3:	mov    QWORD PTR [rsp],rax
   236f7:	call   12960 <g_str_equal@plt+0xa5a8>
   236fc:	mov    rax,QWORD PTR [rsp]
   23700:	add    rsp,0x18
   23704:	pop    rbx
   23705:	pop    rbp
   23706:	pop    r12
   23708:	pop    r13
   2370a:	pop    r14
   2370c:	pop    r15
   2370e:	ret    
   2370f:	nop
   23710:	mov    rsi,QWORD PTR [rsp+0x8]
   23715:	mov    rdi,r12
   23718:	call   22c10 <g_str_equal@plt+0x1a858>
   2371d:	mov    rbp,rax
   23720:	jmp    23693 <g_str_equal@plt+0x1b2db>
   23725:	lea    rcx,[rip+0xa88c]        # 2dfb8 <_fini@@Base+0x4d34>
   2372c:	lea    rsi,[rip+0x7165]        # 2a898 <_fini@@Base+0x1614>
   23733:	lea    rdi,[rip+0x71a6]        # 2a8e0 <_fini@@Base+0x165c>
   2373a:	mov    edx,0x7f
   2373f:	call   7a70 <__assert_fail@plt>
   23744:	call   8538 <g_str_equal@plt+0x180>
   23749:	nop    DWORD PTR [rax+0x0]
   23750:	lea    rdi,[rip+0x21c0a9]        # 23f800 <g_test_config_vars+0x20e0>
   23757:	jmp    12ab0 <g_str_equal@plt+0xa6f8>
   2375c:	nop    DWORD PTR [rax+0x0]
   23760:	push   r14
   23762:	push   r13
   23764:	mov    r14,rcx
   23767:	push   r12
   23769:	push   rbp
   2376a:	mov    ecx,0x10
   2376f:	push   rbx
   23770:	mov    rbp,rdi
   23773:	mov    r13,rdx
   23776:	sub    rsp,0x10
   2377a:	mov    r12,rsp
   2377d:	mov    QWORD PTR [rsp],0x0
   23785:	mov    r8,r12
   23788:	mov    rax,QWORD PTR fs:0x28
   23791:	mov    QWORD PTR [rsp+0x8],rax
   23796:	xor    eax,eax
   23798:	call   203e0 <g_str_equal@plt+0x18028>
   2379d:	mov    rsi,QWORD PTR [rsp]
   237a1:	test   rsi,rsi
   237a4:	je     237d0 <g_str_equal@plt+0x1b418>
   237a6:	mov    rdi,r14
   237a9:	call   df30 <g_str_equal@plt+0x5b78>
   237ae:	mov    rax,QWORD PTR [rsp+0x8]
   237b3:	xor    rax,QWORD PTR fs:0x28
   237bc:	jne    23864 <g_str_equal@plt+0x1b4ac>
   237c2:	add    rsp,0x10
   237c6:	pop    rbx
   237c7:	pop    rbp
   237c8:	pop    r12
   237ca:	pop    r13
   237cc:	pop    r14
   237ce:	ret    
   237cf:	nop
   237d0:	mov    rbx,QWORD PTR [r13+0x0]
   237d4:	test   rbx,rbx
   237d7:	jne    237f8 <g_str_equal@plt+0x1b440>
   237d9:	jmp    23857 <g_str_equal@plt+0x1b49f>
   237db:	nop    DWORD PTR [rax+rax*1+0x0]
   237e0:	mov    rsi,rbx
   237e3:	mov    edx,0x10
   237e8:	mov    rdi,rbp
   237eb:	call   20530 <g_str_equal@plt+0x18178>
   237f0:	test   rax,rax
   237f3:	mov    rbx,rax
   237f6:	je     23850 <g_str_equal@plt+0x1b498>
   237f8:	lea    rdx,[rbx+0x8]
   237fc:	xor    esi,esi
   237fe:	mov    rcx,r12
   23801:	mov    rdi,rbp
   23804:	call   21550 <g_str_equal@plt+0x19198>
   23809:	cmp    QWORD PTR [rsp],0x0
   2380e:	je     237e0 <g_str_equal@plt+0x1b428>
   23810:	mov    rsi,r13
   23813:	mov    rdi,rbp
   23816:	call   206d0 <g_str_equal@plt+0x18318>
   2381b:	mov    rsi,QWORD PTR [rsp]
   2381f:	test   rsi,rsi
   23822:	je     237a6 <g_str_equal@plt+0x1b3ee>
   23824:	mov    rdi,rbp
   23827:	call   20ab0 <g_str_equal@plt+0x186f8>
   2382c:	test   al,al
   2382e:	je     23841 <g_str_equal@plt+0x1b489>
   23830:	mov    rdi,QWORD PTR [r13+0x0]
   23834:	call   28b40 <g_str_equal@plt+0x20788>
   23839:	mov    QWORD PTR [r13+0x0],0x0
   23841:	mov    rsi,QWORD PTR [rsp]
   23845:	jmp    237a6 <g_str_equal@plt+0x1b3ee>
   2384a:	nop    WORD PTR [rax+rax*1+0x0]
   23850:	cmp    QWORD PTR [rsp],0x0
   23855:	jne    23810 <g_str_equal@plt+0x1b458>
   23857:	mov    rsi,r12
   2385a:	mov    rdi,rbp
   2385d:	call   20620 <g_str_equal@plt+0x18268>
   23862:	jmp    23810 <g_str_equal@plt+0x1b458>
   23864:	call   8050 <__stack_chk_fail@plt>
   23869:	nop    DWORD PTR [rax+0x0]
   23870:	push   r14
   23872:	push   r13
   23874:	mov    r14,rcx
   23877:	push   r12
   23879:	push   rbp
   2387a:	mov    ecx,0x10
   2387f:	push   rbx
   23880:	mov    rbp,rdi
   23883:	mov    r13,rdx
   23886:	sub    rsp,0x10
   2388a:	mov    r12,rsp
   2388d:	mov    QWORD PTR [rsp],0x0
   23895:	mov    r8,r12
   23898:	mov    rax,QWORD PTR fs:0x28
   238a1:	mov    QWORD PTR [rsp+0x8],rax
   238a6:	xor    eax,eax
   238a8:	call   203e0 <g_str_equal@plt+0x18028>
   238ad:	mov    rsi,QWORD PTR [rsp]
   238b1:	test   rsi,rsi
   238b4:	je     238e0 <g_str_equal@plt+0x1b528>
   238b6:	mov    rdi,r14
   238b9:	call   df30 <g_str_equal@plt+0x5b78>
   238be:	mov    rax,QWORD PTR [rsp+0x8]
   238c3:	xor    rax,QWORD PTR fs:0x28
   238cc:	jne    23974 <g_str_equal@plt+0x1b5bc>
   238d2:	add    rsp,0x10
   238d6:	pop    rbx
   238d7:	pop    rbp
   238d8:	pop    r12
   238da:	pop    r13
   238dc:	pop    r14
   238de:	ret    
   238df:	nop
   238e0:	mov    rbx,QWORD PTR [r13+0x0]
   238e4:	test   rbx,rbx
   238e7:	jne    23908 <g_str_equal@plt+0x1b550>
   238e9:	jmp    23967 <g_str_equal@plt+0x1b5af>
   238eb:	nop    DWORD PTR [rax+rax*1+0x0]
   238f0:	mov    rsi,rbx
   238f3:	mov    edx,0x10
   238f8:	mov    rdi,rbp
   238fb:	call   20530 <g_str_equal@plt+0x18178>
   23900:	test   rax,rax
   23903:	mov    rbx,rax
   23906:	je     23960 <g_str_equal@plt+0x1b5a8>
   23908:	lea    rdx,[rbx+0x8]
   2390c:	xor    esi,esi
   2390e:	mov    rcx,r12
   23911:	mov    rdi,rbp
   23914:	call   216a0 <g_str_equal@plt+0x192e8>
   23919:	cmp    QWORD PTR [rsp],0x0
   2391e:	je     238f0 <g_str_equal@plt+0x1b538>
   23920:	mov    rsi,r13
   23923:	mov    rdi,rbp
   23926:	call   206d0 <g_str_equal@plt+0x18318>
   2392b:	mov    rsi,QWORD PTR [rsp]
   2392f:	test   rsi,rsi
   23932:	je     238b6 <g_str_equal@plt+0x1b4fe>
   23934:	mov    rdi,rbp
   23937:	call   20ab0 <g_str_equal@plt+0x186f8>
   2393c:	test   al,al
   2393e:	je     23951 <g_str_equal@plt+0x1b599>
   23940:	mov    rdi,QWORD PTR [r13+0x0]
   23944:	call   28b80 <g_str_equal@plt+0x207c8>
   23949:	mov    QWORD PTR [r13+0x0],0x0
   23951:	mov    rsi,QWORD PTR [rsp]
   23955:	jmp    238b6 <g_str_equal@plt+0x1b4fe>
   2395a:	nop    WORD PTR [rax+rax*1+0x0]
   23960:	cmp    QWORD PTR [rsp],0x0
   23965:	jne    23920 <g_str_equal@plt+0x1b568>
   23967:	mov    rsi,r12
   2396a:	mov    rdi,rbp
   2396d:	call   20620 <g_str_equal@plt+0x18268>
   23972:	jmp    23920 <g_str_equal@plt+0x1b568>
   23974:	call   8050 <__stack_chk_fail@plt>
   23979:	nop    DWORD PTR [rax+0x0]
   23980:	push   r14
   23982:	push   r13
   23984:	mov    r14,rcx
   23987:	push   r12
   23989:	push   rbp
   2398a:	mov    ecx,0x10
   2398f:	push   rbx
   23990:	mov    rbp,rdi
   23993:	mov    r13,rdx
   23996:	sub    rsp,0x10
   2399a:	mov    r12,rsp
   2399d:	mov    QWORD PTR [rsp],0x0
   239a5:	mov    r8,r12
   239a8:	mov    rax,QWORD PTR fs:0x28
   239b1:	mov    QWORD PTR [rsp+0x8],rax
   239b6:	xor    eax,eax
   239b8:	call   203e0 <g_str_equal@plt+0x18028>
   239bd:	mov    rsi,QWORD PTR [rsp]
   239c1:	test   rsi,rsi
   239c4:	je     239f0 <g_str_equal@plt+0x1b638>
   239c6:	mov    rdi,r14
   239c9:	call   df30 <g_str_equal@plt+0x5b78>
   239ce:	mov    rax,QWORD PTR [rsp+0x8]
   239d3:	xor    rax,QWORD PTR fs:0x28
   239dc:	jne    23a84 <g_str_equal@plt+0x1b6cc>
   239e2:	add    rsp,0x10
   239e6:	pop    rbx
   239e7:	pop    rbp
   239e8:	pop    r12
   239ea:	pop    r13
   239ec:	pop    r14
   239ee:	ret    
   239ef:	nop
   239f0:	mov    rbx,QWORD PTR [r13+0x0]
   239f4:	test   rbx,rbx
   239f7:	jne    23a18 <g_str_equal@plt+0x1b660>
   239f9:	jmp    23a77 <g_str_equal@plt+0x1b6bf>
   239fb:	nop    DWORD PTR [rax+rax*1+0x0]
   23a00:	mov    rsi,rbx
   23a03:	mov    edx,0x10
   23a08:	mov    rdi,rbp
   23a0b:	call   20530 <g_str_equal@plt+0x18178>
   23a10:	test   rax,rax
   23a13:	mov    rbx,rax
   23a16:	je     23a70 <g_str_equal@plt+0x1b6b8>
   23a18:	lea    rdx,[rbx+0x8]
   23a1c:	xor    esi,esi
   23a1e:	mov    rcx,r12
   23a21:	mov    rdi,rbp
   23a24:	call   20ac0 <g_str_equal@plt+0x18708>
   23a29:	cmp    QWORD PTR [rsp],0x0
   23a2e:	je     23a00 <g_str_equal@plt+0x1b648>
   23a30:	mov    rsi,r13
   23a33:	mov    rdi,rbp
   23a36:	call   206d0 <g_str_equal@plt+0x18318>
   23a3b:	mov    rsi,QWORD PTR [rsp]
   23a3f:	test   rsi,rsi
   23a42:	je     239c6 <g_str_equal@plt+0x1b60e>
   23a44:	mov    rdi,rbp
   23a47:	call   20ab0 <g_str_equal@plt+0x186f8>
   23a4c:	test   al,al
   23a4e:	je     23a61 <g_str_equal@plt+0x1b6a9>
   23a50:	mov    rdi,QWORD PTR [r13+0x0]
   23a54:	call   28bc0 <g_str_equal@plt+0x20808>
   23a59:	mov    QWORD PTR [r13+0x0],0x0
   23a61:	mov    rsi,QWORD PTR [rsp]
   23a65:	jmp    239c6 <g_str_equal@plt+0x1b60e>
   23a6a:	nop    WORD PTR [rax+rax*1+0x0]
   23a70:	cmp    QWORD PTR [rsp],0x0
   23a75:	jne    23a30 <g_str_equal@plt+0x1b678>
   23a77:	mov    rsi,r12
   23a7a:	mov    rdi,rbp
   23a7d:	call   20620 <g_str_equal@plt+0x18268>
   23a82:	jmp    23a30 <g_str_equal@plt+0x1b678>
   23a84:	call   8050 <__stack_chk_fail@plt>
   23a89:	nop    DWORD PTR [rax+0x0]
   23a90:	push   r14
   23a92:	push   r13
   23a94:	mov    r14,rcx
   23a97:	push   r12
   23a99:	push   rbp
   23a9a:	mov    ecx,0x10
   23a9f:	push   rbx
   23aa0:	mov    rbp,rdi
   23aa3:	mov    r13,rdx
   23aa6:	sub    rsp,0x10
   23aaa:	mov    r12,rsp
   23aad:	mov    QWORD PTR [rsp],0x0
   23ab5:	mov    r8,r12
   23ab8:	mov    rax,QWORD PTR fs:0x28
   23ac1:	mov    QWORD PTR [rsp+0x8],rax
   23ac6:	xor    eax,eax
   23ac8:	call   203e0 <g_str_equal@plt+0x18028>
   23acd:	mov    rsi,QWORD PTR [rsp]
   23ad1:	test   rsi,rsi
   23ad4:	je     23b00 <g_str_equal@plt+0x1b748>
   23ad6:	mov    rdi,r14
   23ad9:	call   df30 <g_str_equal@plt+0x5b78>
   23ade:	mov    rax,QWORD PTR [rsp+0x8]
   23ae3:	xor    rax,QWORD PTR fs:0x28
   23aec:	jne    23b94 <g_str_equal@plt+0x1b7dc>
   23af2:	add    rsp,0x10
   23af6:	pop    rbx
   23af7:	pop    rbp
   23af8:	pop    r12
   23afa:	pop    r13
   23afc:	pop    r14
   23afe:	ret    
   23aff:	nop
   23b00:	mov    rbx,QWORD PTR [r13+0x0]
   23b04:	test   rbx,rbx
   23b07:	jne    23b28 <g_str_equal@plt+0x1b770>
   23b09:	jmp    23b87 <g_str_equal@plt+0x1b7cf>
   23b0b:	nop    DWORD PTR [rax+rax*1+0x0]
   23b10:	mov    rsi,rbx
   23b13:	mov    edx,0x10
   23b18:	mov    rdi,rbp
   23b1b:	call   20530 <g_str_equal@plt+0x18178>
   23b20:	test   rax,rax
   23b23:	mov    rbx,rax
   23b26:	je     23b80 <g_str_equal@plt+0x1b7c8>
   23b28:	lea    rdx,[rbx+0x8]
   23b2c:	xor    esi,esi
   23b2e:	mov    rcx,r12
   23b31:	mov    rdi,rbp
   23b34:	call   20f70 <g_str_equal@plt+0x18bb8>
   23b39:	cmp    QWORD PTR [rsp],0x0
   23b3e:	je     23b10 <g_str_equal@plt+0x1b758>
   23b40:	mov    rsi,r13
   23b43:	mov    rdi,rbp
   23b46:	call   206d0 <g_str_equal@plt+0x18318>
   23b4b:	mov    rsi,QWORD PTR [rsp]
   23b4f:	test   rsi,rsi
   23b52:	je     23ad6 <g_str_equal@plt+0x1b71e>
   23b54:	mov    rdi,rbp
   23b57:	call   20ab0 <g_str_equal@plt+0x186f8>
   23b5c:	test   al,al
   23b5e:	je     23b71 <g_str_equal@plt+0x1b7b9>
   23b60:	mov    rdi,QWORD PTR [r13+0x0]
   23b64:	call   28c00 <g_str_equal@plt+0x20848>
   23b69:	mov    QWORD PTR [r13+0x0],0x0
   23b71:	mov    rsi,QWORD PTR [rsp]
   23b75:	jmp    23ad6 <g_str_equal@plt+0x1b71e>
   23b7a:	nop    WORD PTR [rax+rax*1+0x0]
   23b80:	cmp    QWORD PTR [rsp],0x0
   23b85:	jne    23b40 <g_str_equal@plt+0x1b788>
   23b87:	mov    rsi,r12
   23b8a:	mov    rdi,rbp
   23b8d:	call   20620 <g_str_equal@plt+0x18268>
   23b92:	jmp    23b40 <g_str_equal@plt+0x1b788>
   23b94:	call   8050 <__stack_chk_fail@plt>
   23b99:	nop    DWORD PTR [rax+0x0]
   23ba0:	push   r14
   23ba2:	push   r13
   23ba4:	mov    r14,rcx
   23ba7:	push   r12
   23ba9:	push   rbp
   23baa:	mov    ecx,0x10
   23baf:	push   rbx
   23bb0:	mov    rbp,rdi
   23bb3:	mov    r13,rdx
   23bb6:	sub    rsp,0x10
   23bba:	mov    r12,rsp
   23bbd:	mov    QWORD PTR [rsp],0x0
   23bc5:	mov    r8,r12
   23bc8:	mov    rax,QWORD PTR fs:0x28
   23bd1:	mov    QWORD PTR [rsp+0x8],rax
   23bd6:	xor    eax,eax
   23bd8:	call   203e0 <g_str_equal@plt+0x18028>
   23bdd:	mov    rsi,QWORD PTR [rsp]
   23be1:	test   rsi,rsi
   23be4:	je     23c10 <g_str_equal@plt+0x1b858>
   23be6:	mov    rdi,r14
   23be9:	call   df30 <g_str_equal@plt+0x5b78>
   23bee:	mov    rax,QWORD PTR [rsp+0x8]
   23bf3:	xor    rax,QWORD PTR fs:0x28
   23bfc:	jne    23ca4 <g_str_equal@plt+0x1b8ec>
   23c02:	add    rsp,0x10
   23c06:	pop    rbx
   23c07:	pop    rbp
   23c08:	pop    r12
   23c0a:	pop    r13
   23c0c:	pop    r14
   23c0e:	ret    
   23c0f:	nop
   23c10:	mov    rbx,QWORD PTR [r13+0x0]
   23c14:	test   rbx,rbx
   23c17:	jne    23c38 <g_str_equal@plt+0x1b880>
   23c19:	jmp    23c97 <g_str_equal@plt+0x1b8df>
   23c1b:	nop    DWORD PTR [rax+rax*1+0x0]
   23c20:	mov    rsi,rbx
   23c23:	mov    edx,0x10
   23c28:	mov    rdi,rbp
   23c2b:	call   20530 <g_str_equal@plt+0x18178>
   23c30:	test   rax,rax
   23c33:	mov    rbx,rax
   23c36:	je     23c90 <g_str_equal@plt+0x1b8d8>
   23c38:	lea    rdx,[rbx+0x8]
   23c3c:	xor    esi,esi
   23c3e:	mov    rcx,r12
   23c41:	mov    rdi,rbp
   23c44:	call   21070 <g_str_equal@plt+0x18cb8>
   23c49:	cmp    QWORD PTR [rsp],0x0
   23c4e:	je     23c20 <g_str_equal@plt+0x1b868>
   23c50:	mov    rsi,r13
   23c53:	mov    rdi,rbp
   23c56:	call   206d0 <g_str_equal@plt+0x18318>
   23c5b:	mov    rsi,QWORD PTR [rsp]
   23c5f:	test   rsi,rsi
   23c62:	je     23be6 <g_str_equal@plt+0x1b82e>
   23c64:	mov    rdi,rbp
   23c67:	call   20ab0 <g_str_equal@plt+0x186f8>
   23c6c:	test   al,al
   23c6e:	je     23c81 <g_str_equal@plt+0x1b8c9>
   23c70:	mov    rdi,QWORD PTR [r13+0x0]
   23c74:	call   28c40 <g_str_equal@plt+0x20888>
   23c79:	mov    QWORD PTR [r13+0x0],0x0
   23c81:	mov    rsi,QWORD PTR [rsp]
   23c85:	jmp    23be6 <g_str_equal@plt+0x1b82e>
   23c8a:	nop    WORD PTR [rax+rax*1+0x0]
   23c90:	cmp    QWORD PTR [rsp],0x0
   23c95:	jne    23c50 <g_str_equal@plt+0x1b898>
   23c97:	mov    rsi,r12
   23c9a:	mov    rdi,rbp
   23c9d:	call   20620 <g_str_equal@plt+0x18268>
   23ca2:	jmp    23c50 <g_str_equal@plt+0x1b898>
   23ca4:	call   8050 <__stack_chk_fail@plt>
   23ca9:	nop    DWORD PTR [rax+0x0]
   23cb0:	push   r14
   23cb2:	push   r13
   23cb4:	mov    r14,rcx
   23cb7:	push   r12
   23cb9:	push   rbp
   23cba:	mov    ecx,0x10
   23cbf:	push   rbx
   23cc0:	mov    rbp,rdi
   23cc3:	mov    r13,rdx
   23cc6:	sub    rsp,0x10
   23cca:	mov    r12,rsp
   23ccd:	mov    QWORD PTR [rsp],0x0
   23cd5:	mov    r8,r12
   23cd8:	mov    rax,QWORD PTR fs:0x28
   23ce1:	mov    QWORD PTR [rsp+0x8],rax
   23ce6:	xor    eax,eax
   23ce8:	call   203e0 <g_str_equal@plt+0x18028>
   23ced:	mov    rsi,QWORD PTR [rsp]
   23cf1:	test   rsi,rsi
   23cf4:	je     23d20 <g_str_equal@plt+0x1b968>
   23cf6:	mov    rdi,r14
   23cf9:	call   df30 <g_str_equal@plt+0x5b78>
   23cfe:	mov    rax,QWORD PTR [rsp+0x8]
   23d03:	xor    rax,QWORD PTR fs:0x28
   23d0c:	jne    23db4 <g_str_equal@plt+0x1b9fc>
   23d12:	add    rsp,0x10
   23d16:	pop    rbx
   23d17:	pop    rbp
   23d18:	pop    r12
   23d1a:	pop    r13
   23d1c:	pop    r14
   23d1e:	ret    
   23d1f:	nop
   23d20:	mov    rbx,QWORD PTR [r13+0x0]
   23d24:	test   rbx,rbx
   23d27:	jne    23d48 <g_str_equal@plt+0x1b990>
   23d29:	jmp    23da7 <g_str_equal@plt+0x1b9ef>
   23d2b:	nop    DWORD PTR [rax+rax*1+0x0]
   23d30:	mov    rsi,rbx
   23d33:	mov    edx,0x10
   23d38:	mov    rdi,rbp
   23d3b:	call   20530 <g_str_equal@plt+0x18178>
   23d40:	test   rax,rax
   23d43:	mov    rbx,rax
   23d46:	je     23da0 <g_str_equal@plt+0x1b9e8>
   23d48:	lea    rdx,[rbx+0x8]
   23d4c:	xor    esi,esi
   23d4e:	mov    rcx,r12
   23d51:	mov    rdi,rbp
   23d54:	call   21170 <g_str_equal@plt+0x18db8>
   23d59:	cmp    QWORD PTR [rsp],0x0
   23d5e:	je     23d30 <g_str_equal@plt+0x1b978>
   23d60:	mov    rsi,r13
   23d63:	mov    rdi,rbp
   23d66:	call   206d0 <g_str_equal@plt+0x18318>
   23d6b:	mov    rsi,QWORD PTR [rsp]
   23d6f:	test   rsi,rsi
   23d72:	je     23cf6 <g_str_equal@plt+0x1b93e>
   23d74:	mov    rdi,rbp
   23d77:	call   20ab0 <g_str_equal@plt+0x186f8>
   23d7c:	test   al,al
   23d7e:	je     23d91 <g_str_equal@plt+0x1b9d9>
   23d80:	mov    rdi,QWORD PTR [r13+0x0]
   23d84:	call   28c80 <g_str_equal@plt+0x208c8>
   23d89:	mov    QWORD PTR [r13+0x0],0x0
   23d91:	mov    rsi,QWORD PTR [rsp]
   23d95:	jmp    23cf6 <g_str_equal@plt+0x1b93e>
   23d9a:	nop    WORD PTR [rax+rax*1+0x0]
   23da0:	cmp    QWORD PTR [rsp],0x0
   23da5:	jne    23d60 <g_str_equal@plt+0x1b9a8>
   23da7:	mov    rsi,r12
   23daa:	mov    rdi,rbp
   23dad:	call   20620 <g_str_equal@plt+0x18268>
   23db2:	jmp    23d60 <g_str_equal@plt+0x1b9a8>
   23db4:	call   8050 <__stack_chk_fail@plt>
   23db9:	nop    DWORD PTR [rax+0x0]
   23dc0:	push   r14
   23dc2:	push   r13
   23dc4:	mov    r14,rcx
   23dc7:	push   r12
   23dc9:	push   rbp
   23dca:	mov    ecx,0x10
   23dcf:	push   rbx
   23dd0:	mov    rbp,rdi
   23dd3:	mov    r13,rdx
   23dd6:	sub    rsp,0x10
   23dda:	mov    r12,rsp
   23ddd:	mov    QWORD PTR [rsp],0x0
   23de5:	mov    r8,r12
   23de8:	mov    rax,QWORD PTR fs:0x28
   23df1:	mov    QWORD PTR [rsp+0x8],rax
   23df6:	xor    eax,eax
   23df8:	call   203e0 <g_str_equal@plt+0x18028>
   23dfd:	mov    rsi,QWORD PTR [rsp]
   23e01:	test   rsi,rsi
   23e04:	je     23e30 <g_str_equal@plt+0x1ba78>
   23e06:	mov    rdi,r14
   23e09:	call   df30 <g_str_equal@plt+0x5b78>
   23e0e:	mov    rax,QWORD PTR [rsp+0x8]
   23e13:	xor    rax,QWORD PTR fs:0x28
   23e1c:	jne    23ec4 <g_str_equal@plt+0x1bb0c>
   23e22:	add    rsp,0x10
   23e26:	pop    rbx
   23e27:	pop    rbp
   23e28:	pop    r12
   23e2a:	pop    r13
   23e2c:	pop    r14
   23e2e:	ret    
   23e2f:	nop
   23e30:	mov    rbx,QWORD PTR [r13+0x0]
   23e34:	test   rbx,rbx
   23e37:	jne    23e58 <g_str_equal@plt+0x1baa0>
   23e39:	jmp    23eb7 <g_str_equal@plt+0x1baff>
   23e3b:	nop    DWORD PTR [rax+rax*1+0x0]
   23e40:	mov    rsi,rbx
   23e43:	mov    edx,0x10
   23e48:	mov    rdi,rbp
   23e4b:	call   20530 <g_str_equal@plt+0x18178>
   23e50:	test   rax,rax
   23e53:	mov    rbx,rax
   23e56:	je     23eb0 <g_str_equal@plt+0x1baf8>
   23e58:	lea    rdx,[rbx+0x8]
   23e5c:	xor    esi,esi
   23e5e:	mov    rcx,r12
   23e61:	mov    rdi,rbp
   23e64:	call   21270 <g_str_equal@plt+0x18eb8>
   23e69:	cmp    QWORD PTR [rsp],0x0
   23e6e:	je     23e40 <g_str_equal@plt+0x1ba88>
   23e70:	mov    rsi,r13
   23e73:	mov    rdi,rbp
   23e76:	call   206d0 <g_str_equal@plt+0x18318>
   23e7b:	mov    rsi,QWORD PTR [rsp]
   23e7f:	test   rsi,rsi
   23e82:	je     23e06 <g_str_equal@plt+0x1ba4e>
   23e84:	mov    rdi,rbp
   23e87:	call   20ab0 <g_str_equal@plt+0x186f8>
   23e8c:	test   al,al
   23e8e:	je     23ea1 <g_str_equal@plt+0x1bae9>
   23e90:	mov    rdi,QWORD PTR [r13+0x0]
   23e94:	call   28cc0 <g_str_equal@plt+0x20908>
   23e99:	mov    QWORD PTR [r13+0x0],0x0
   23ea1:	mov    rsi,QWORD PTR [rsp]
   23ea5:	jmp    23e06 <g_str_equal@plt+0x1ba4e>
   23eaa:	nop    WORD PTR [rax+rax*1+0x0]
   23eb0:	cmp    QWORD PTR [rsp],0x0
   23eb5:	jne    23e70 <g_str_equal@plt+0x1bab8>
   23eb7:	mov    rsi,r12
   23eba:	mov    rdi,rbp
   23ebd:	call   20620 <g_str_equal@plt+0x18268>
   23ec2:	jmp    23e70 <g_str_equal@plt+0x1bab8>
   23ec4:	call   8050 <__stack_chk_fail@plt>
   23ec9:	nop    DWORD PTR [rax+0x0]
   23ed0:	push   r14
   23ed2:	push   r13
   23ed4:	mov    r14,rcx
   23ed7:	push   r12
   23ed9:	push   rbp
   23eda:	mov    ecx,0x10
   23edf:	push   rbx
   23ee0:	mov    rbp,rdi
   23ee3:	mov    r13,rdx
   23ee6:	sub    rsp,0x10
   23eea:	mov    r12,rsp
   23eed:	mov    QWORD PTR [rsp],0x0
   23ef5:	mov    r8,r12
   23ef8:	mov    rax,QWORD PTR fs:0x28
   23f01:	mov    QWORD PTR [rsp+0x8],rax
   23f06:	xor    eax,eax
   23f08:	call   203e0 <g_str_equal@plt+0x18028>
   23f0d:	mov    rsi,QWORD PTR [rsp]
   23f11:	test   rsi,rsi
   23f14:	je     23f40 <g_str_equal@plt+0x1bb88>
   23f16:	mov    rdi,r14
   23f19:	call   df30 <g_str_equal@plt+0x5b78>
   23f1e:	mov    rax,QWORD PTR [rsp+0x8]
   23f23:	xor    rax,QWORD PTR fs:0x28
   23f2c:	jne    23fd4 <g_str_equal@plt+0x1bc1c>
   23f32:	add    rsp,0x10
   23f36:	pop    rbx
   23f37:	pop    rbp
   23f38:	pop    r12
   23f3a:	pop    r13
   23f3c:	pop    r14
   23f3e:	ret    
   23f3f:	nop
   23f40:	mov    rbx,QWORD PTR [r13+0x0]
   23f44:	test   rbx,rbx
   23f47:	jne    23f68 <g_str_equal@plt+0x1bbb0>
   23f49:	jmp    23fc7 <g_str_equal@plt+0x1bc0f>
   23f4b:	nop    DWORD PTR [rax+rax*1+0x0]
   23f50:	mov    rsi,rbx
   23f53:	mov    edx,0x10
   23f58:	mov    rdi,rbp
   23f5b:	call   20530 <g_str_equal@plt+0x18178>
   23f60:	test   rax,rax
   23f63:	mov    rbx,rax
   23f66:	je     23fc0 <g_str_equal@plt+0x1bc08>
   23f68:	lea    rdx,[rbx+0x8]
   23f6c:	xor    esi,esi
   23f6e:	mov    rcx,r12
   23f71:	mov    rdi,rbp
   23f74:	call   20bb0 <g_str_equal@plt+0x187f8>
   23f79:	cmp    QWORD PTR [rsp],0x0
   23f7e:	je     23f50 <g_str_equal@plt+0x1bb98>
   23f80:	mov    rsi,r13
   23f83:	mov    rdi,rbp
   23f86:	call   206d0 <g_str_equal@plt+0x18318>
   23f8b:	mov    rsi,QWORD PTR [rsp]
   23f8f:	test   rsi,rsi
   23f92:	je     23f16 <g_str_equal@plt+0x1bb5e>
   23f94:	mov    rdi,rbp
   23f97:	call   20ab0 <g_str_equal@plt+0x186f8>
   23f9c:	test   al,al
   23f9e:	je     23fb1 <g_str_equal@plt+0x1bbf9>
   23fa0:	mov    rdi,QWORD PTR [r13+0x0]
   23fa4:	call   28d00 <g_str_equal@plt+0x20948>
   23fa9:	mov    QWORD PTR [r13+0x0],0x0
   23fb1:	mov    rsi,QWORD PTR [rsp]
   23fb5:	jmp    23f16 <g_str_equal@plt+0x1bb5e>
   23fba:	nop    WORD PTR [rax+rax*1+0x0]
   23fc0:	cmp    QWORD PTR [rsp],0x0
   23fc5:	jne    23f80 <g_str_equal@plt+0x1bbc8>
   23fc7:	mov    rsi,r12
   23fca:	mov    rdi,rbp
   23fcd:	call   20620 <g_str_equal@plt+0x18268>
   23fd2:	jmp    23f80 <g_str_equal@plt+0x1bbc8>
   23fd4:	call   8050 <__stack_chk_fail@plt>
   23fd9:	nop    DWORD PTR [rax+0x0]
   23fe0:	push   r14
   23fe2:	push   r13
   23fe4:	mov    r14,rcx
   23fe7:	push   r12
   23fe9:	push   rbp
   23fea:	mov    ecx,0x10
   23fef:	push   rbx
   23ff0:	mov    rbp,rdi
   23ff3:	mov    r13,rdx
   23ff6:	sub    rsp,0x10
   23ffa:	mov    r12,rsp
   23ffd:	mov    QWORD PTR [rsp],0x0
   24005:	mov    r8,r12
   24008:	mov    rax,QWORD PTR fs:0x28
   24011:	mov    QWORD PTR [rsp+0x8],rax
   24016:	xor    eax,eax
   24018:	call   203e0 <g_str_equal@plt+0x18028>
   2401d:	mov    rsi,QWORD PTR [rsp]
   24021:	test   rsi,rsi
   24024:	je     24050 <g_str_equal@plt+0x1bc98>
   24026:	mov    rdi,r14
   24029:	call   df30 <g_str_equal@plt+0x5b78>
   2402e:	mov    rax,QWORD PTR [rsp+0x8]
   24033:	xor    rax,QWORD PTR fs:0x28
   2403c:	jne    240e4 <g_str_equal@plt+0x1bd2c>
   24042:	add    rsp,0x10
   24046:	pop    rbx
   24047:	pop    rbp
   24048:	pop    r12
   2404a:	pop    r13
   2404c:	pop    r14
   2404e:	ret    
   2404f:	nop
   24050:	mov    rbx,QWORD PTR [r13+0x0]
   24054:	test   rbx,rbx
   24057:	jne    24078 <g_str_equal@plt+0x1bcc0>
   24059:	jmp    240d7 <g_str_equal@plt+0x1bd1f>
   2405b:	nop    DWORD PTR [rax+rax*1+0x0]
   24060:	mov    rsi,rbx
   24063:	mov    edx,0x10
   24068:	mov    rdi,rbp
   2406b:	call   20530 <g_str_equal@plt+0x18178>
   24070:	test   rax,rax
   24073:	mov    rbx,rax
   24076:	je     240d0 <g_str_equal@plt+0x1bd18>
   24078:	lea    rdx,[rbx+0x8]
   2407c:	xor    esi,esi
   2407e:	mov    rcx,r12
   24081:	mov    rdi,rbp
   24084:	call   20ca0 <g_str_equal@plt+0x188e8>
   24089:	cmp    QWORD PTR [rsp],0x0
   2408e:	je     24060 <g_str_equal@plt+0x1bca8>
   24090:	mov    rsi,r13
   24093:	mov    rdi,rbp
   24096:	call   206d0 <g_str_equal@plt+0x18318>
   2409b:	mov    rsi,QWORD PTR [rsp]
   2409f:	test   rsi,rsi
   240a2:	je     24026 <g_str_equal@plt+0x1bc6e>
   240a4:	mov    rdi,rbp
   240a7:	call   20ab0 <g_str_equal@plt+0x186f8>
   240ac:	test   al,al
   240ae:	je     240c1 <g_str_equal@plt+0x1bd09>
   240b0:	mov    rdi,QWORD PTR [r13+0x0]
   240b4:	call   28d40 <g_str_equal@plt+0x20988>
   240b9:	mov    QWORD PTR [r13+0x0],0x0
   240c1:	mov    rsi,QWORD PTR [rsp]
   240c5:	jmp    24026 <g_str_equal@plt+0x1bc6e>
   240ca:	nop    WORD PTR [rax+rax*1+0x0]
   240d0:	cmp    QWORD PTR [rsp],0x0
   240d5:	jne    24090 <g_str_equal@plt+0x1bcd8>
   240d7:	mov    rsi,r12
   240da:	mov    rdi,rbp
   240dd:	call   20620 <g_str_equal@plt+0x18268>
   240e2:	jmp    24090 <g_str_equal@plt+0x1bcd8>
   240e4:	call   8050 <__stack_chk_fail@plt>
   240e9:	nop    DWORD PTR [rax+0x0]
   240f0:	push   r14
   240f2:	push   r13
   240f4:	mov    r14,rcx
   240f7:	push   r12
   240f9:	push   rbp
   240fa:	mov    ecx,0x10
   240ff:	push   rbx
   24100:	mov    rbp,rdi
   24103:	mov    r13,rdx
   24106:	sub    rsp,0x10
   2410a:	mov    r12,rsp
   2410d:	mov    QWORD PTR [rsp],0x0
   24115:	mov    r8,r12
   24118:	mov    rax,QWORD PTR fs:0x28
   24121:	mov    QWORD PTR [rsp+0x8],rax
   24126:	xor    eax,eax
   24128:	call   203e0 <g_str_equal@plt+0x18028>
   2412d:	mov    rsi,QWORD PTR [rsp]
   24131:	test   rsi,rsi
   24134:	je     24160 <g_str_equal@plt+0x1bda8>
   24136:	mov    rdi,r14
   24139:	call   df30 <g_str_equal@plt+0x5b78>
   2413e:	mov    rax,QWORD PTR [rsp+0x8]
   24143:	xor    rax,QWORD PTR fs:0x28
   2414c:	jne    241f4 <g_str_equal@plt+0x1be3c>
   24152:	add    rsp,0x10
   24156:	pop    rbx
   24157:	pop    rbp
   24158:	pop    r12
   2415a:	pop    r13
   2415c:	pop    r14
   2415e:	ret    
   2415f:	nop
   24160:	mov    rbx,QWORD PTR [r13+0x0]
   24164:	test   rbx,rbx
   24167:	jne    24188 <g_str_equal@plt+0x1bdd0>
   24169:	jmp    241e7 <g_str_equal@plt+0x1be2f>
   2416b:	nop    DWORD PTR [rax+rax*1+0x0]
   24170:	mov    rsi,rbx
   24173:	mov    edx,0x10
   24178:	mov    rdi,rbp
   2417b:	call   20530 <g_str_equal@plt+0x18178>
   24180:	test   rax,rax
   24183:	mov    rbx,rax
   24186:	je     241e0 <g_str_equal@plt+0x1be28>
   24188:	lea    rdx,[rbx+0x8]
   2418c:	xor    esi,esi
   2418e:	mov    rcx,r12
   24191:	mov    rdi,rbp
   24194:	call   20d90 <g_str_equal@plt+0x189d8>
   24199:	cmp    QWORD PTR [rsp],0x0
   2419e:	je     24170 <g_str_equal@plt+0x1bdb8>
   241a0:	mov    rsi,r13
   241a3:	mov    rdi,rbp
   241a6:	call   206d0 <g_str_equal@plt+0x18318>
   241ab:	mov    rsi,QWORD PTR [rsp]
   241af:	test   rsi,rsi
   241b2:	je     24136 <g_str_equal@plt+0x1bd7e>
   241b4:	mov    rdi,rbp
   241b7:	call   20ab0 <g_str_equal@plt+0x186f8>
   241bc:	test   al,al
   241be:	je     241d1 <g_str_equal@plt+0x1be19>
   241c0:	mov    rdi,QWORD PTR [r13+0x0]
   241c4:	call   28d80 <g_str_equal@plt+0x209c8>
   241c9:	mov    QWORD PTR [r13+0x0],0x0
   241d1:	mov    rsi,QWORD PTR [rsp]
   241d5:	jmp    24136 <g_str_equal@plt+0x1bd7e>
   241da:	nop    WORD PTR [rax+rax*1+0x0]
   241e0:	cmp    QWORD PTR [rsp],0x0
   241e5:	jne    241a0 <g_str_equal@plt+0x1bde8>
   241e7:	mov    rsi,r12
   241ea:	mov    rdi,rbp
   241ed:	call   20620 <g_str_equal@plt+0x18268>
   241f2:	jmp    241a0 <g_str_equal@plt+0x1bde8>
   241f4:	call   8050 <__stack_chk_fail@plt>
   241f9:	nop    DWORD PTR [rax+0x0]
   24200:	push   r14
   24202:	push   r13
   24204:	mov    r14,rcx
   24207:	push   r12
   24209:	push   rbp
   2420a:	mov    ecx,0x10
   2420f:	push   rbx
   24210:	mov    rbp,rdi
   24213:	mov    r13,rdx
   24216:	sub    rsp,0x10
   2421a:	mov    r12,rsp
   2421d:	mov    QWORD PTR [rsp],0x0
   24225:	mov    r8,r12
   24228:	mov    rax,QWORD PTR fs:0x28
   24231:	mov    QWORD PTR [rsp+0x8],rax
   24236:	xor    eax,eax
   24238:	call   203e0 <g_str_equal@plt+0x18028>
   2423d:	mov    rsi,QWORD PTR [rsp]
   24241:	test   rsi,rsi
   24244:	je     24270 <g_str_equal@plt+0x1beb8>
   24246:	mov    rdi,r14
   24249:	call   df30 <g_str_equal@plt+0x5b78>
   2424e:	mov    rax,QWORD PTR [rsp+0x8]
   24253:	xor    rax,QWORD PTR fs:0x28
   2425c:	jne    24304 <g_str_equal@plt+0x1bf4c>
   24262:	add    rsp,0x10
   24266:	pop    rbx
   24267:	pop    rbp
   24268:	pop    r12
   2426a:	pop    r13
   2426c:	pop    r14
   2426e:	ret    
   2426f:	nop
   24270:	mov    rbx,QWORD PTR [r13+0x0]
   24274:	test   rbx,rbx
   24277:	jne    24298 <g_str_equal@plt+0x1bee0>
   24279:	jmp    242f7 <g_str_equal@plt+0x1bf3f>
   2427b:	nop    DWORD PTR [rax+rax*1+0x0]
   24280:	mov    rsi,rbx
   24283:	mov    edx,0x10
   24288:	mov    rdi,rbp
   2428b:	call   20530 <g_str_equal@plt+0x18178>
   24290:	test   rax,rax
   24293:	mov    rbx,rax
   24296:	je     242f0 <g_str_equal@plt+0x1bf38>
   24298:	lea    rdx,[rbx+0x8]
   2429c:	xor    esi,esi
   2429e:	mov    rcx,r12
   242a1:	mov    rdi,rbp
   242a4:	call   20e80 <g_str_equal@plt+0x18ac8>
   242a9:	cmp    QWORD PTR [rsp],0x0
   242ae:	je     24280 <g_str_equal@plt+0x1bec8>
   242b0:	mov    rsi,r13
   242b3:	mov    rdi,rbp
   242b6:	call   206d0 <g_str_equal@plt+0x18318>
   242bb:	mov    rsi,QWORD PTR [rsp]
   242bf:	test   rsi,rsi
   242c2:	je     24246 <g_str_equal@plt+0x1be8e>
   242c4:	mov    rdi,rbp
   242c7:	call   20ab0 <g_str_equal@plt+0x186f8>
   242cc:	test   al,al
   242ce:	je     242e1 <g_str_equal@plt+0x1bf29>
   242d0:	mov    rdi,QWORD PTR [r13+0x0]
   242d4:	call   28dc0 <g_str_equal@plt+0x20a08>
   242d9:	mov    QWORD PTR [r13+0x0],0x0
   242e1:	mov    rsi,QWORD PTR [rsp]
   242e5:	jmp    24246 <g_str_equal@plt+0x1be8e>
   242ea:	nop    WORD PTR [rax+rax*1+0x0]
   242f0:	cmp    QWORD PTR [rsp],0x0
   242f5:	jne    242b0 <g_str_equal@plt+0x1bef8>
   242f7:	mov    rsi,r12
   242fa:	mov    rdi,rbp
   242fd:	call   20620 <g_str_equal@plt+0x18268>
   24302:	jmp    242b0 <g_str_equal@plt+0x1bef8>
   24304:	call   8050 <__stack_chk_fail@plt>
   24309:	nop    DWORD PTR [rax+0x0]
   24310:	push   r14
   24312:	push   r13
   24314:	mov    r14,rcx
   24317:	push   r12
   24319:	push   rbp
   2431a:	mov    ecx,0x10
   2431f:	push   rbx
   24320:	mov    rbp,rdi
   24323:	mov    r13,rdx
   24326:	sub    rsp,0x10
   2432a:	mov    r12,rsp
   2432d:	mov    QWORD PTR [rsp],0x0
   24335:	mov    r8,r12
   24338:	mov    rax,QWORD PTR fs:0x28
   24341:	mov    QWORD PTR [rsp+0x8],rax
   24346:	xor    eax,eax
   24348:	call   203e0 <g_str_equal@plt+0x18028>
   2434d:	mov    rsi,QWORD PTR [rsp]
   24351:	test   rsi,rsi
   24354:	je     24380 <g_str_equal@plt+0x1bfc8>
   24356:	mov    rdi,r14
   24359:	call   df30 <g_str_equal@plt+0x5b78>
   2435e:	mov    rax,QWORD PTR [rsp+0x8]
   24363:	xor    rax,QWORD PTR fs:0x28
   2436c:	jne    24414 <g_str_equal@plt+0x1c05c>
   24372:	add    rsp,0x10
   24376:	pop    rbx
   24377:	pop    rbp
   24378:	pop    r12
   2437a:	pop    r13
   2437c:	pop    r14
   2437e:	ret    
   2437f:	nop
   24380:	mov    rbx,QWORD PTR [r13+0x0]
   24384:	test   rbx,rbx
   24387:	jne    243a8 <g_str_equal@plt+0x1bff0>
   24389:	jmp    24407 <g_str_equal@plt+0x1c04f>
   2438b:	nop    DWORD PTR [rax+rax*1+0x0]
   24390:	mov    rsi,rbx
   24393:	mov    edx,0x10
   24398:	mov    rdi,rbp
   2439b:	call   20530 <g_str_equal@plt+0x18178>
   243a0:	test   rax,rax
   243a3:	mov    rbx,rax
   243a6:	je     24400 <g_str_equal@plt+0x1c048>
   243a8:	lea    rdx,[rbx+0x8]
   243ac:	xor    esi,esi
   243ae:	mov    rcx,r12
   243b1:	mov    rdi,rbp
   243b4:	call   21360 <g_str_equal@plt+0x18fa8>
   243b9:	cmp    QWORD PTR [rsp],0x0
   243be:	je     24390 <g_str_equal@plt+0x1bfd8>
   243c0:	mov    rsi,r13
   243c3:	mov    rdi,rbp
   243c6:	call   206d0 <g_str_equal@plt+0x18318>
   243cb:	mov    rsi,QWORD PTR [rsp]
   243cf:	test   rsi,rsi
   243d2:	je     24356 <g_str_equal@plt+0x1bf9e>
   243d4:	mov    rdi,rbp
   243d7:	call   20ab0 <g_str_equal@plt+0x186f8>
   243dc:	test   al,al
   243de:	je     243f1 <g_str_equal@plt+0x1c039>
   243e0:	mov    rdi,QWORD PTR [r13+0x0]
   243e4:	call   28e00 <g_str_equal@plt+0x20a48>
   243e9:	mov    QWORD PTR [r13+0x0],0x0
   243f1:	mov    rsi,QWORD PTR [rsp]
   243f5:	jmp    24356 <g_str_equal@plt+0x1bf9e>
   243fa:	nop    WORD PTR [rax+rax*1+0x0]
   24400:	cmp    QWORD PTR [rsp],0x0
   24405:	jne    243c0 <g_str_equal@plt+0x1c008>
   24407:	mov    rsi,r12
   2440a:	mov    rdi,rbp
   2440d:	call   20620 <g_str_equal@plt+0x18268>
   24412:	jmp    243c0 <g_str_equal@plt+0x1c008>
   24414:	call   8050 <__stack_chk_fail@plt>
   24419:	nop    DWORD PTR [rax+0x0]
   24420:	push   r14
   24422:	push   r13
   24424:	mov    r14,rcx
   24427:	push   r12
   24429:	push   rbp
   2442a:	mov    ecx,0x10
   2442f:	push   rbx
   24430:	mov    rbp,rdi
   24433:	mov    r13,rdx
   24436:	sub    rsp,0x10
   2443a:	mov    r12,rsp
   2443d:	mov    QWORD PTR [rsp],0x0
   24445:	mov    r8,r12
   24448:	mov    rax,QWORD PTR fs:0x28
   24451:	mov    QWORD PTR [rsp+0x8],rax
   24456:	xor    eax,eax
   24458:	call   203e0 <g_str_equal@plt+0x18028>
   2445d:	mov    rsi,QWORD PTR [rsp]
   24461:	test   rsi,rsi
   24464:	je     24490 <g_str_equal@plt+0x1c0d8>
   24466:	mov    rdi,r14
   24469:	call   df30 <g_str_equal@plt+0x5b78>
   2446e:	mov    rax,QWORD PTR [rsp+0x8]
   24473:	xor    rax,QWORD PTR fs:0x28
   2447c:	jne    24524 <g_str_equal@plt+0x1c16c>
   24482:	add    rsp,0x10
   24486:	pop    rbx
   24487:	pop    rbp
   24488:	pop    r12
   2448a:	pop    r13
   2448c:	pop    r14
   2448e:	ret    
   2448f:	nop
   24490:	mov    rbx,QWORD PTR [r13+0x0]
   24494:	test   rbx,rbx
   24497:	jne    244b8 <g_str_equal@plt+0x1c100>
   24499:	jmp    24517 <g_str_equal@plt+0x1c15f>
   2449b:	nop    DWORD PTR [rax+rax*1+0x0]
   244a0:	mov    rsi,rbx
   244a3:	mov    edx,0x10
   244a8:	mov    rdi,rbp
   244ab:	call   20530 <g_str_equal@plt+0x18178>
   244b0:	test   rax,rax
   244b3:	mov    rbx,rax
   244b6:	je     24510 <g_str_equal@plt+0x1c158>
   244b8:	lea    rdx,[rbx+0x8]
   244bc:	xor    esi,esi
   244be:	mov    rcx,r12
   244c1:	mov    rdi,rbp
   244c4:	call   21460 <g_str_equal@plt+0x190a8>
   244c9:	cmp    QWORD PTR [rsp],0x0
   244ce:	je     244a0 <g_str_equal@plt+0x1c0e8>
   244d0:	mov    rsi,r13
   244d3:	mov    rdi,rbp
   244d6:	call   206d0 <g_str_equal@plt+0x18318>
   244db:	mov    rsi,QWORD PTR [rsp]
   244df:	test   rsi,rsi
   244e2:	je     24466 <g_str_equal@plt+0x1c0ae>
   244e4:	mov    rdi,rbp
   244e7:	call   20ab0 <g_str_equal@plt+0x186f8>
   244ec:	test   al,al
   244ee:	je     24501 <g_str_equal@plt+0x1c149>
   244f0:	mov    rdi,QWORD PTR [r13+0x0]
   244f4:	call   28e40 <g_str_equal@plt+0x20a88>
   244f9:	mov    QWORD PTR [r13+0x0],0x0
   24501:	mov    rsi,QWORD PTR [rsp]
   24505:	jmp    24466 <g_str_equal@plt+0x1c0ae>
   2450a:	nop    WORD PTR [rax+rax*1+0x0]
   24510:	cmp    QWORD PTR [rsp],0x0
   24515:	jne    244d0 <g_str_equal@plt+0x1c118>
   24517:	mov    rsi,r12
   2451a:	mov    rdi,rbp
   2451d:	call   20620 <g_str_equal@plt+0x18268>
   24522:	jmp    244d0 <g_str_equal@plt+0x1c118>
   24524:	call   8050 <__stack_chk_fail@plt>
   24529:	nop    DWORD PTR [rax+0x0]
   24530:	push   r14
   24532:	push   r13
   24534:	mov    r14,rcx
   24537:	push   r12
   24539:	push   rbp
   2453a:	mov    ecx,0x10
   2453f:	push   rbx
   24540:	mov    rbp,rdi
   24543:	mov    r13,rdx
   24546:	sub    rsp,0x10
   2454a:	mov    r12,rsp
   2454d:	mov    QWORD PTR [rsp],0x0
   24555:	mov    r8,r12
   24558:	mov    rax,QWORD PTR fs:0x28
   24561:	mov    QWORD PTR [rsp+0x8],rax
   24566:	xor    eax,eax
   24568:	call   203e0 <g_str_equal@plt+0x18028>
   2456d:	mov    rsi,QWORD PTR [rsp]
   24571:	test   rsi,rsi
   24574:	je     245a0 <g_str_equal@plt+0x1c1e8>
   24576:	mov    rdi,r14
   24579:	call   df30 <g_str_equal@plt+0x5b78>
   2457e:	mov    rax,QWORD PTR [rsp+0x8]
   24583:	xor    rax,QWORD PTR fs:0x28
   2458c:	jne    24634 <g_str_equal@plt+0x1c27c>
   24592:	add    rsp,0x10
   24596:	pop    rbx
   24597:	pop    rbp
   24598:	pop    r12
   2459a:	pop    r13
   2459c:	pop    r14
   2459e:	ret    
   2459f:	nop
   245a0:	mov    rbx,QWORD PTR [r13+0x0]
   245a4:	test   rbx,rbx
   245a7:	jne    245c8 <g_str_equal@plt+0x1c210>
   245a9:	jmp    24627 <g_str_equal@plt+0x1c26f>
   245ab:	nop    DWORD PTR [rax+rax*1+0x0]
   245b0:	mov    rsi,rbx
   245b3:	mov    edx,0x10
   245b8:	mov    rdi,rbp
   245bb:	call   20530 <g_str_equal@plt+0x18178>
   245c0:	test   rax,rax
   245c3:	mov    rbx,rax
   245c6:	je     24620 <g_str_equal@plt+0x1c268>
   245c8:	lea    rdx,[rbx+0x8]
   245cc:	xor    esi,esi
   245ce:	mov    rcx,r12
   245d1:	mov    rdi,rbp
   245d4:	call   21790 <g_str_equal@plt+0x193d8>
   245d9:	cmp    QWORD PTR [rsp],0x0
   245de:	je     245b0 <g_str_equal@plt+0x1c1f8>
   245e0:	mov    rsi,r13
   245e3:	mov    rdi,rbp
   245e6:	call   206d0 <g_str_equal@plt+0x18318>
   245eb:	mov    rsi,QWORD PTR [rsp]
   245ef:	test   rsi,rsi
   245f2:	je     24576 <g_str_equal@plt+0x1c1be>
   245f4:	mov    rdi,rbp
   245f7:	call   20ab0 <g_str_equal@plt+0x186f8>
   245fc:	test   al,al
   245fe:	je     24611 <g_str_equal@plt+0x1c259>
   24600:	mov    rdi,QWORD PTR [r13+0x0]
   24604:	call   28e80 <g_str_equal@plt+0x20ac8>
   24609:	mov    QWORD PTR [r13+0x0],0x0
   24611:	mov    rsi,QWORD PTR [rsp]
   24615:	jmp    24576 <g_str_equal@plt+0x1c1be>
   2461a:	nop    WORD PTR [rax+rax*1+0x0]
   24620:	cmp    QWORD PTR [rsp],0x0
   24625:	jne    245e0 <g_str_equal@plt+0x1c228>
   24627:	mov    rsi,r12
   2462a:	mov    rdi,rbp
   2462d:	call   20620 <g_str_equal@plt+0x18268>
   24632:	jmp    245e0 <g_str_equal@plt+0x1c228>
   24634:	call   8050 <__stack_chk_fail@plt>
   24639:	nop    DWORD PTR [rax+0x0]
   24640:	push   r14
   24642:	push   r13
   24644:	mov    r14,rcx
   24647:	push   r12
   24649:	push   rbp
   2464a:	mov    ecx,0x10
   2464f:	push   rbx
   24650:	mov    rbp,rdi
   24653:	mov    r13,rdx
   24656:	sub    rsp,0x10
   2465a:	mov    r12,rsp
   2465d:	mov    QWORD PTR [rsp],0x0
   24665:	mov    r8,r12
   24668:	mov    rax,QWORD PTR fs:0x28
   24671:	mov    QWORD PTR [rsp+0x8],rax
   24676:	xor    eax,eax
   24678:	call   203e0 <g_str_equal@plt+0x18028>
   2467d:	mov    rsi,QWORD PTR [rsp]
   24681:	test   rsi,rsi
   24684:	je     246b0 <g_str_equal@plt+0x1c2f8>
   24686:	mov    rdi,r14
   24689:	call   df30 <g_str_equal@plt+0x5b78>
   2468e:	mov    rax,QWORD PTR [rsp+0x8]
   24693:	xor    rax,QWORD PTR fs:0x28
   2469c:	jne    24744 <g_str_equal@plt+0x1c38c>
   246a2:	add    rsp,0x10
   246a6:	pop    rbx
   246a7:	pop    rbp
   246a8:	pop    r12
   246aa:	pop    r13
   246ac:	pop    r14
   246ae:	ret    
   246af:	nop
   246b0:	mov    rbx,QWORD PTR [r13+0x0]
   246b4:	test   rbx,rbx
   246b7:	jne    246d8 <g_str_equal@plt+0x1c320>
   246b9:	jmp    24737 <g_str_equal@plt+0x1c37f>
   246bb:	nop    DWORD PTR [rax+rax*1+0x0]
   246c0:	mov    rsi,rbx
   246c3:	mov    edx,0x10
   246c8:	mov    rdi,rbp
   246cb:	call   20530 <g_str_equal@plt+0x18178>
   246d0:	test   rax,rax
   246d3:	mov    rbx,rax
   246d6:	je     24730 <g_str_equal@plt+0x1c378>
   246d8:	lea    rdx,[rbx+0x8]
   246dc:	xor    esi,esi
   246de:	mov    rcx,r12
   246e1:	mov    rdi,rbp
   246e4:	call   21910 <g_str_equal@plt+0x19558>
   246e9:	cmp    QWORD PTR [rsp],0x0
   246ee:	je     246c0 <g_str_equal@plt+0x1c308>
   246f0:	mov    rsi,r13
   246f3:	mov    rdi,rbp
   246f6:	call   206d0 <g_str_equal@plt+0x18318>
   246fb:	mov    rsi,QWORD PTR [rsp]
   246ff:	test   rsi,rsi
   24702:	je     24686 <g_str_equal@plt+0x1c2ce>
   24704:	mov    rdi,rbp
   24707:	call   20ab0 <g_str_equal@plt+0x186f8>
   2470c:	test   al,al
   2470e:	je     24721 <g_str_equal@plt+0x1c369>
   24710:	mov    rdi,QWORD PTR [r13+0x0]
   24714:	call   28ec0 <g_str_equal@plt+0x20b08>
   24719:	mov    QWORD PTR [r13+0x0],0x0
   24721:	mov    rsi,QWORD PTR [rsp]
   24725:	jmp    24686 <g_str_equal@plt+0x1c2ce>
   2472a:	nop    WORD PTR [rax+rax*1+0x0]
   24730:	cmp    QWORD PTR [rsp],0x0
   24735:	jne    246f0 <g_str_equal@plt+0x1c338>
   24737:	mov    rsi,r12
   2473a:	mov    rdi,rbp
   2473d:	call   20620 <g_str_equal@plt+0x18268>
   24742:	jmp    246f0 <g_str_equal@plt+0x1c338>
   24744:	call   8050 <__stack_chk_fail@plt>
   24749:	nop    DWORD PTR [rax+0x0]
   24750:	push   rbx
   24751:	mov    r8,rcx
   24754:	mov    rbx,rdx
   24757:	lea    rcx,[rip+0x218d02]        # 23d460 <_fini@@Base+0x2141dc>
   2475e:	sub    rsp,0x10
   24762:	mov    rax,QWORD PTR fs:0x28
   2476b:	mov    QWORD PTR [rsp+0x8],rax
   24770:	xor    eax,eax
   24772:	mov    eax,DWORD PTR [rdx]
   24774:	lea    rdx,[rsp+0x4]
   24779:	mov    DWORD PTR [rsp+0x4],eax
   2477d:	call   219e0 <g_str_equal@plt+0x19628>
   24782:	mov    eax,DWORD PTR [rsp+0x4]
   24786:	mov    DWORD PTR [rbx],eax
   24788:	mov    rax,QWORD PTR [rsp+0x8]
   2478d:	xor    rax,QWORD PTR fs:0x28
   24796:	jne    2479e <g_str_equal@plt+0x1c3e6>
   24798:	add    rsp,0x10
   2479c:	pop    rbx
   2479d:	ret    
   2479e:	call   8050 <__stack_chk_fail@plt>
   247a3:	nop    WORD PTR cs:[rax+rax*1+0x0]
   247ad:	nop    DWORD PTR [rax]
   247b0:	push   rbx
   247b1:	mov    r8,rcx
   247b4:	mov    rbx,rdx
   247b7:	lea    rcx,[rip+0x218f02]        # 23d6c0 <_fini@@Base+0x21443c>
   247be:	sub    rsp,0x10
   247c2:	mov    rax,QWORD PTR fs:0x28
   247cb:	mov    QWORD PTR [rsp+0x8],rax
   247d0:	xor    eax,eax
   247d2:	mov    eax,DWORD PTR [rdx]
   247d4:	lea    rdx,[rsp+0x4]
   247d9:	mov    DWORD PTR [rsp+0x4],eax
   247dd:	call   219e0 <g_str_equal@plt+0x19628>
   247e2:	mov    eax,DWORD PTR [rsp+0x4]
   247e6:	mov    DWORD PTR [rbx],eax
   247e8:	mov    rax,QWORD PTR [rsp+0x8]
   247ed:	xor    rax,QWORD PTR fs:0x28
   247f6:	jne    247fe <g_str_equal@plt+0x1c446>
   247f8:	add    rsp,0x10
   247fc:	pop    rbx
   247fd:	ret    
   247fe:	call   8050 <__stack_chk_fail@plt>
   24803:	nop    DWORD PTR [rax]
   24806:	nop    WORD PTR cs:[rax+rax*1+0x0]
   24810:	push   rbx
   24811:	mov    r8,rcx
   24814:	mov    rbx,rdx
   24817:	lea    rcx,[rip+0x218e82]        # 23d6a0 <_fini@@Base+0x21441c>
   2481e:	sub    rsp,0x10
   24822:	mov    rax,QWORD PTR fs:0x28
   2482b:	mov    QWORD PTR [rsp+0x8],rax
   24830:	xor    eax,eax
   24832:	mov    eax,DWORD PTR [rdx]
   24834:	lea    rdx,[rsp+0x4]
   24839:	mov    DWORD PTR [rsp+0x4],eax
   2483d:	call   219e0 <g_str_equal@plt+0x19628>
   24842:	mov    eax,DWORD PTR [rsp+0x4]
   24846:	mov    DWORD PTR [rbx],eax
   24848:	mov    rax,QWORD PTR [rsp+0x8]
   2484d:	xor    rax,QWORD PTR fs:0x28
   24856:	jne    2485e <g_str_equal@plt+0x1c4a6>
   24858:	add    rsp,0x10
   2485c:	pop    rbx
   2485d:	ret    
   2485e:	call   8050 <__stack_chk_fail@plt>
   24863:	nop    DWORD PTR [rax]
   24866:	nop    WORD PTR cs:[rax+rax*1+0x0]
   24870:	push   rbx
   24871:	mov    r8,rcx
   24874:	mov    rbx,rdx
   24877:	lea    rcx,[rip+0x218df2]        # 23d670 <_fini@@Base+0x2143ec>
   2487e:	sub    rsp,0x10
   24882:	mov    rax,QWORD PTR fs:0x28
   2488b:	mov    QWORD PTR [rsp+0x8],rax
   24890:	xor    eax,eax
   24892:	mov    eax,DWORD PTR [rdx]
   24894:	lea    rdx,[rsp+0x4]
   24899:	mov    DWORD PTR [rsp+0x4],eax
   2489d:	call   219e0 <g_str_equal@plt+0x19628>
   248a2:	mov    eax,DWORD PTR [rsp+0x4]
   248a6:	mov    DWORD PTR [rbx],eax
   248a8:	mov    rax,QWORD PTR [rsp+0x8]
   248ad:	xor    rax,QWORD PTR fs:0x28
   248b6:	jne    248be <g_str_equal@plt+0x1c506>
   248b8:	add    rsp,0x10
   248bc:	pop    rbx
   248bd:	ret    
   248be:	call   8050 <__stack_chk_fail@plt>
   248c3:	nop    DWORD PTR [rax]
   248c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   248d0:	push   rbx
   248d1:	mov    r8,rcx
   248d4:	mov    rbx,rdx
   248d7:	lea    rcx,[rip+0x218d62]        # 23d640 <_fini@@Base+0x2143bc>
   248de:	sub    rsp,0x10
   248e2:	mov    rax,QWORD PTR fs:0x28
   248eb:	mov    QWORD PTR [rsp+0x8],rax
   248f0:	xor    eax,eax
   248f2:	mov    eax,DWORD PTR [rdx]
   248f4:	lea    rdx,[rsp+0x4]
   248f9:	mov    DWORD PTR [rsp+0x4],eax
   248fd:	call   219e0 <g_str_equal@plt+0x19628>
   24902:	mov    eax,DWORD PTR [rsp+0x4]
   24906:	mov    DWORD PTR [rbx],eax
   24908:	mov    rax,QWORD PTR [rsp+0x8]
   2490d:	xor    rax,QWORD PTR fs:0x28
   24916:	jne    2491e <g_str_equal@plt+0x1c566>
   24918:	add    rsp,0x10
   2491c:	pop    rbx
   2491d:	ret    
   2491e:	call   8050 <__stack_chk_fail@plt>
   24923:	nop    DWORD PTR [rax]
   24926:	nop    WORD PTR cs:[rax+rax*1+0x0]
   24930:	push   rbx
   24931:	mov    rbx,rdx
   24934:	mov    rdx,rsi
   24937:	lea    rsi,[rip+0x96c3]        # 2e001 <_fini@@Base+0x4d7d>
   2493e:	sub    rsp,0x10
   24942:	mov    rcx,rsp
   24945:	mov    QWORD PTR [rsp],0x0
   2494d:	mov    rax,QWORD PTR fs:0x28
   24956:	mov    QWORD PTR [rsp+0x8],rax
   2495b:	xor    eax,eax
   2495d:	call   21550 <g_str_equal@plt+0x19198>
   24962:	mov    rsi,QWORD PTR [rsp]
   24966:	mov    rdi,rbx
   24969:	call   df30 <g_str_equal@plt+0x5b78>
   2496e:	mov    rax,QWORD PTR [rsp+0x8]
   24973:	xor    rax,QWORD PTR fs:0x28
   2497c:	jne    24984 <g_str_equal@plt+0x1c5cc>
   2497e:	add    rsp,0x10
   24982:	pop    rbx
   24983:	ret    
   24984:	call   8050 <__stack_chk_fail@plt>
   24989:	nop    DWORD PTR [rax+0x0]
   24990:	push   r13
   24992:	push   r12
   24994:	mov    r13,rcx
   24997:	push   rbp
   24998:	push   rbx
   24999:	mov    ecx,0x8
   2499e:	mov    rbp,rdi
   249a1:	mov    rbx,rdx
   249a4:	sub    rsp,0x18
   249a8:	mov    r12,rsp
   249ab:	mov    QWORD PTR [rsp],0x0
   249b3:	mov    r8,r12
   249b6:	mov    rax,QWORD PTR fs:0x28
   249bf:	mov    QWORD PTR [rsp+0x8],rax
   249c4:	xor    eax,eax
   249c6:	call   200e0 <g_str_equal@plt+0x17d28>
   249cb:	mov    rsi,QWORD PTR [rsp]
   249cf:	test   rsi,rsi
   249d2:	je     24a00 <g_str_equal@plt+0x1c648>
   249d4:	mov    rdi,r13
   249d7:	call   df30 <g_str_equal@plt+0x5b78>
   249dc:	mov    rax,QWORD PTR [rsp+0x8]
   249e1:	xor    rax,QWORD PTR fs:0x28
   249ea:	jne    24a5d <g_str_equal@plt+0x1c6a5>
   249ec:	add    rsp,0x18
   249f0:	pop    rbx
   249f1:	pop    rbp
   249f2:	pop    r12
   249f4:	pop    r13
   249f6:	ret    
   249f7:	nop    WORD PTR [rax+rax*1+0x0]
   24a00:	mov    rsi,QWORD PTR [rbx]
   24a03:	test   rsi,rsi
   24a06:	je     24a1a <g_str_equal@plt+0x1c662>
   24a08:	mov    rdx,r12
   24a0b:	mov    rdi,rbp
   24a0e:	call   24930 <g_str_equal@plt+0x1c578>
   24a13:	cmp    QWORD PTR [rsp],0x0
   24a18:	je     24a50 <g_str_equal@plt+0x1c698>
   24a1a:	mov    rsi,rbx
   24a1d:	mov    rdi,rbp
   24a20:	call   20340 <g_str_equal@plt+0x17f88>
   24a25:	mov    rsi,QWORD PTR [rsp]
   24a29:	test   rsi,rsi
   24a2c:	je     249d4 <g_str_equal@plt+0x1c61c>
   24a2e:	mov    rdi,rbp
   24a31:	call   20ab0 <g_str_equal@plt+0x186f8>
   24a36:	test   al,al
   24a38:	je     24a49 <g_str_equal@plt+0x1c691>
   24a3a:	mov    rdi,QWORD PTR [rbx]
   24a3d:	call   28f00 <g_str_equal@plt+0x20b48>
   24a42:	mov    QWORD PTR [rbx],0x0
   24a49:	mov    rsi,QWORD PTR [rsp]
   24a4d:	jmp    249d4 <g_str_equal@plt+0x1c61c>
   24a4f:	nop
   24a50:	mov    rsi,r12
   24a53:	mov    rdi,rbp
   24a56:	call   20290 <g_str_equal@plt+0x17ed8>
   24a5b:	jmp    24a1a <g_str_equal@plt+0x1c662>
   24a5d:	call   8050 <__stack_chk_fail@plt>
   24a62:	nop    DWORD PTR [rax+0x0]
   24a66:	nop    WORD PTR cs:[rax+rax*1+0x0]
   24a70:	push   r14
   24a72:	push   r13
   24a74:	mov    r14,rcx
   24a77:	push   r12
   24a79:	push   rbp
   24a7a:	mov    ecx,0x10
   24a7f:	push   rbx
   24a80:	mov    r12,rsi
   24a83:	mov    rbp,rdi
   24a86:	mov    rbx,rdx
   24a89:	sub    rsp,0x10
   24a8d:	mov    r13,rsp
   24a90:	mov    QWORD PTR [rsp],0x0
   24a98:	mov    r8,r13
   24a9b:	mov    rax,QWORD PTR fs:0x28
   24aa4:	mov    QWORD PTR [rsp+0x8],rax
   24aa9:	xor    eax,eax
   24aab:	call   20770 <g_str_equal@plt+0x183b8>
   24ab0:	mov    rsi,QWORD PTR [rsp]
   24ab4:	test   rsi,rsi
   24ab7:	jne    24b18 <g_str_equal@plt+0x1c760>
   24ab9:	mov    rdx,QWORD PTR [rbx]
   24abc:	test   rdx,rdx
   24abf:	je     24ae9 <g_str_equal@plt+0x1c731>
   24ac1:	mov    eax,DWORD PTR [rdx]
   24ac3:	cmp    eax,0x1
   24ac6:	je     24bb0 <g_str_equal@plt+0x1c7f8>
   24acc:	jb     24bcc <g_str_equal@plt+0x1c814>
   24ad2:	cmp    eax,0x3
   24ad5:	jne    24b48 <g_str_equal@plt+0x1c790>
   24ad7:	add    rdx,0x8
   24adb:	mov    rcx,r13
   24ade:	mov    rsi,r12
   24ae1:	mov    rdi,rbp
   24ae4:	call   21550 <g_str_equal@plt+0x19198>
   24ae9:	mov    rsi,rbx
   24aec:	mov    rdi,rbp
   24aef:	call   20930 <g_str_equal@plt+0x18578>
   24af4:	mov    rsi,QWORD PTR [rsp]
   24af8:	test   rsi,rsi
   24afb:	je     24b18 <g_str_equal@plt+0x1c760>
   24afd:	mov    rdi,rbp
   24b00:	call   20ab0 <g_str_equal@plt+0x186f8>
   24b05:	test   al,al
   24b07:	jne    24b90 <g_str_equal@plt+0x1c7d8>
   24b0d:	mov    rsi,QWORD PTR [rsp]
   24b11:	nop    DWORD PTR [rax+0x0]
   24b18:	mov    rdi,r14
   24b1b:	call   df30 <g_str_equal@plt+0x5b78>
   24b20:	mov    rax,QWORD PTR [rsp+0x8]
   24b25:	xor    rax,QWORD PTR fs:0x28
   24b2e:	jne    24bc7 <g_str_equal@plt+0x1c80f>
   24b34:	add    rsp,0x10
   24b38:	pop    rbx
   24b39:	pop    rbp
   24b3a:	pop    r12
   24b3c:	pop    r13
   24b3e:	pop    r14
   24b40:	ret    
   24b41:	nop    DWORD PTR [rax+0x0]
   24b48:	lea    rax,[rip+0x5003]        # 29b52 <_fini@@Base+0x8ce>
   24b4f:	test   r12,r12
   24b52:	lea    r8,[rip+0x9667]        # 2e1c0 <_fini@@Base+0x4f3c>
   24b59:	lea    rcx,[rip+0x9690]        # 2e1f0 <_fini@@Base+0x4f6c>
   24b60:	lea    rsi,[rip+0x9632]        # 2e199 <_fini@@Base+0x4f15>
   24b67:	mov    edx,0x6d
   24b6c:	cmove  r12,rax
   24b70:	lea    rax,[rip+0x963b]        # 2e1b2 <_fini@@Base+0x4f2e>
   24b77:	sub    rsp,0x8
   24b7b:	mov    r9,r12
   24b7e:	mov    rdi,r13
   24b81:	push   rax
   24b82:	xor    eax,eax
   24b84:	call   db00 <g_str_equal@plt+0x5748>
   24b89:	pop    rax
   24b8a:	pop    rdx
   24b8b:	jmp    24ae9 <g_str_equal@plt+0x1c731>
   24b90:	mov    rdi,QWORD PTR [rbx]
   24b93:	call   28f40 <g_str_equal@plt+0x20b88>
   24b98:	mov    QWORD PTR [rbx],0x0
   24b9f:	mov    rsi,QWORD PTR [rsp]
   24ba3:	jmp    24b18 <g_str_equal@plt+0x1c760>
   24ba8:	nop    DWORD PTR [rax+rax*1+0x0]
   24bb0:	add    rdx,0x8
   24bb4:	mov    rcx,r13
   24bb7:	mov    rsi,r12
   24bba:	mov    rdi,rbp
   24bbd:	call   21910 <g_str_equal@plt+0x19558>
   24bc2:	jmp    24ae9 <g_str_equal@plt+0x1c731>
   24bc7:	call   8050 <__stack_chk_fail@plt>
   24bcc:	call   79c0 <abort@plt>
   24bd1:	nop    DWORD PTR [rax+rax*1+0x0]
   24bd6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   24be0:	push   rbx
   24be1:	mov    r8,rcx
   24be4:	mov    rbx,rdx
   24be7:	lea    rcx,[rip+0x2189f2]        # 23d5e0 <_fini@@Base+0x21435c>
   24bee:	sub    rsp,0x10
   24bf2:	mov    rax,QWORD PTR fs:0x28
   24bfb:	mov    QWORD PTR [rsp+0x8],rax
   24c00:	xor    eax,eax
   24c02:	mov    eax,DWORD PTR [rdx]
   24c04:	lea    rdx,[rsp+0x4]
   24c09:	mov    DWORD PTR [rsp+0x4],eax
   24c0d:	call   219e0 <g_str_equal@plt+0x19628>
   24c12:	mov    eax,DWORD PTR [rsp+0x4]
   24c16:	mov    DWORD PTR [rbx],eax
   24c18:	mov    rax,QWORD PTR [rsp+0x8]
   24c1d:	xor    rax,QWORD PTR fs:0x28
   24c26:	jne    24c2e <g_str_equal@plt+0x1c876>
   24c28:	add    rsp,0x10
   24c2c:	pop    rbx
   24c2d:	ret    
   24c2e:	call   8050 <__stack_chk_fail@plt>
   24c33:	nop    DWORD PTR [rax]
   24c36:	nop    WORD PTR cs:[rax+rax*1+0x0]
   24c40:	push   rbx
   24c41:	mov    r8,rcx
   24c44:	mov    rbx,rdx
   24c47:	lea    rcx,[rip+0x218872]        # 23d4c0 <_fini@@Base+0x21423c>
   24c4e:	sub    rsp,0x10
   24c52:	mov    rax,QWORD PTR fs:0x28
   24c5b:	mov    QWORD PTR [rsp+0x8],rax
   24c60:	xor    eax,eax
   24c62:	mov    eax,DWORD PTR [rdx]
   24c64:	lea    rdx,[rsp+0x4]
   24c69:	mov    DWORD PTR [rsp+0x4],eax
   24c6d:	call   219e0 <g_str_equal@plt+0x19628>
   24c72:	mov    eax,DWORD PTR [rsp+0x4]
   24c76:	mov    DWORD PTR [rbx],eax
   24c78:	mov    rax,QWORD PTR [rsp+0x8]
   24c7d:	xor    rax,QWORD PTR fs:0x28
   24c86:	jne    24c8e <g_str_equal@plt+0x1c8d6>
   24c88:	add    rsp,0x10
   24c8c:	pop    rbx
   24c8d:	ret    
   24c8e:	call   8050 <__stack_chk_fail@plt>
   24c93:	nop    WORD PTR cs:[rax+rax*1+0x0]
   24c9d:	nop    DWORD PTR [rax]
   24ca0:	mov    rsi,rdi
   24ca3:	mov    rdi,rdx
   24ca6:	xor    edx,edx
   24ca8:	jmp    7ac0 <g_hash_table_insert@plt>
   24cad:	nop    DWORD PTR [rax]
   24cb0:	lea    rcx,[rip+0x9b29]        # 2e7e0 <_fini@@Base+0x555c>
   24cb7:	lea    rsi,[rip+0x5bda]        # 2a898 <_fini@@Base+0x1614>
   24cbe:	lea    rdi,[rip+0x5c1b]        # 2a8e0 <_fini@@Base+0x165c>
   24cc5:	sub    rsp,0x8
   24cc9:	mov    edx,0x7f
   24cce:	call   7a70 <__assert_fail@plt>
   24cd3:	nop    DWORD PTR [rax]
   24cd6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   24ce0:	push   r12
   24ce2:	push   rbp
   24ce3:	push   rbx
   24ce4:	sub    rsp,0x10
   24ce8:	mov    rbx,QWORD PTR [rdi+0xb8]
   24cef:	test   rbx,rbx
   24cf2:	je     24dc0 <g_str_equal@plt+0x1ca08>
   24cf8:	mov    rdi,QWORD PTR [rbx+0x8]
   24cfc:	test   rdi,rdi
   24cff:	je     24dff <g_str_equal@plt+0x1ca47>
   24d05:	mov    eax,DWORD PTR [rdi]
   24d07:	lea    ecx,[rax-0x1]
   24d0a:	cmp    ecx,0x5
   24d0d:	ja     24e1e <g_str_equal@plt+0x1ca66>
   24d13:	cmp    eax,0x4
   24d16:	mov    r12,rsi
   24d19:	je     24d60 <g_str_equal@plt+0x1c9a8>
   24d1b:	cmp    eax,0x5
   24d1e:	jne    24e42 <g_str_equal@plt+0x1ca8a>
   24d24:	test   rsi,rsi
   24d27:	jne    24e23 <g_str_equal@plt+0x1ca6b>
   24d2d:	mov    rax,QWORD PTR [rbx+0x20]
   24d31:	test   rax,rax
   24d34:	je     24df0 <g_str_equal@plt+0x1ca38>
   24d3a:	test   dl,dl
   24d3c:	mov    rbp,QWORD PTR [rax]
   24d3f:	je     24d4d <g_str_equal@plt+0x1c995>
   24d41:	mov    rax,QWORD PTR [rax+0x8]
   24d45:	mov    QWORD PTR [rbx+0x20],rax
   24d49:	add    DWORD PTR [rbx+0x28],0x1
   24d4d:	add    rsp,0x10
   24d51:	mov    rax,rbp
   24d54:	pop    rbx
   24d55:	pop    rbp
   24d56:	pop    r12
   24d58:	ret    
   24d59:	nop    DWORD PTR [rax+0x0]
   24d60:	test   rsi,rsi
   24d63:	je     24e61 <g_str_equal@plt+0x1caa9>
   24d69:	mov    DWORD PTR [rsp+0xc],edx
   24d6d:	call   121a0 <g_str_equal@plt+0x9de8>
   24d72:	mov    rdi,QWORD PTR [rbx+0x18]
   24d76:	mov    rbp,rax
   24d79:	test   rdi,rdi
   24d7c:	je     24d4d <g_str_equal@plt+0x1c995>
   24d7e:	test   rax,rax
   24d81:	je     24d4d <g_str_equal@plt+0x1c995>
   24d83:	mov    edx,DWORD PTR [rsp+0xc]
   24d87:	test   dl,dl
   24d89:	je     24d4d <g_str_equal@plt+0x1c995>
   24d8b:	mov    rsi,r12
   24d8e:	call   7ba0 <g_hash_table_remove@plt>
   24d93:	test   eax,eax
   24d95:	jne    24d4d <g_str_equal@plt+0x1c995>
   24d97:	lea    rcx,[rip+0x9a52]        # 2e7f0 <_fini@@Base+0x556c>
   24d9e:	lea    rsi,[rip+0x9463]        # 2e208 <_fini@@Base+0x4f84>
   24da5:	lea    rdi,[rip+0x658f]        # 2b33b <_fini@@Base+0x20b7>
   24dac:	mov    edx,0x8f
   24db1:	call   7a70 <__assert_fail@plt>
   24db6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   24dc0:	mov    rbp,QWORD PTR [rdi+0xa8]
   24dc7:	test   rbp,rbp
   24dca:	jne    24d4d <g_str_equal@plt+0x1c995>
   24dcc:	lea    rcx,[rip+0x9a1d]        # 2e7f0 <_fini@@Base+0x556c>
   24dd3:	lea    rsi,[rip+0x942e]        # 2e208 <_fini@@Base+0x4f84>
   24dda:	lea    rdi,[rip+0x95c4]        # 2e3a5 <_fini@@Base+0x5121>
   24de1:	mov    edx,0x81
   24de6:	call   7a70 <__assert_fail@plt>
   24deb:	nop    DWORD PTR [rax+rax*1+0x0]
   24df0:	xor    ebp,ebp
   24df2:	test   dl,dl
   24df4:	jne    24d49 <g_str_equal@plt+0x1c991>
   24dfa:	jmp    24d4d <g_str_equal@plt+0x1c995>
   24dff:	lea    rcx,[rip+0x99ea]        # 2e7f0 <_fini@@Base+0x556c>
   24e06:	lea    rsi,[rip+0x93fb]        # 2e208 <_fini@@Base+0x4f84>
   24e0d:	lea    rdi,[rip+0x959b]        # 2e3af <_fini@@Base+0x512b>
   24e14:	mov    edx,0x88
   24e19:	call   7a70 <__assert_fail@plt>
   24e1e:	call   24cb0 <g_str_equal@plt+0x1c8f8>
   24e23:	lea    rcx,[rip+0x99c6]        # 2e7f0 <_fini@@Base+0x556c>
   24e2a:	lea    rsi,[rip+0x93d7]        # 2e208 <_fini@@Base+0x4f84>
   24e31:	lea    rdi,[rip+0x957c]        # 2e3b4 <_fini@@Base+0x5130>
   24e38:	mov    edx,0x93
   24e3d:	call   7a70 <__assert_fail@plt>
   24e42:	lea    rcx,[rip+0x99a7]        # 2e7f0 <_fini@@Base+0x556c>
   24e49:	lea    rsi,[rip+0x93b8]        # 2e208 <_fini@@Base+0x4f84>
   24e50:	lea    rdi,[rip+0x93f9]        # 2e250 <_fini@@Base+0x4fcc>
   24e57:	mov    edx,0x92
   24e5c:	call   7a70 <__assert_fail@plt>
   24e61:	lea    rcx,[rip+0x9988]        # 2e7f0 <_fini@@Base+0x556c>
   24e68:	lea    rsi,[rip+0x9399]        # 2e208 <_fini@@Base+0x4f84>
   24e6f:	lea    rdi,[rip+0x953f]        # 2e3b5 <_fini@@Base+0x5131>
   24e76:	mov    edx,0x8b
   24e7b:	call   7a70 <__assert_fail@plt>
   24e80:	push   rbx
   24e81:	mov    rbx,rdx
   24e84:	xor    edx,edx
   24e86:	call   24ce0 <g_str_equal@plt+0x1c928>
   24e8b:	test   rax,rax
   24e8e:	setne  BYTE PTR [rbx]
   24e91:	pop    rbx
   24e92:	ret    
   24e93:	nop    DWORD PTR [rax]
   24e96:	nop    WORD PTR cs:[rax+rax*1+0x0]
   24ea0:	push   rbx
   24ea1:	mov    rbx,rdi
   24ea4:	mov    edi,0xc8
   24ea9:	call   80c0 <g_malloc0@plt>
   24eae:	test   rbx,rbx
   24eb1:	je     24f42 <g_str_equal@plt+0x1cb8a>
   24eb7:	lea    rdx,[rip+0xe32]        # 25cf0 <g_str_equal@plt+0x1d938>
   24ebe:	lea    rcx,[rip+0xefb]        # 25dc0 <g_str_equal@plt+0x1da08>
   24ec5:	lea    rsi,[rip+0x1d4]        # 250a0 <g_str_equal@plt+0x1cce8>
   24ecc:	lea    rdi,[rip+0x16d]        # 25040 <g_str_equal@plt+0x1cc88>
   24ed3:	mov    DWORD PTR [rax+0x90],0x1
   24edd:	add    QWORD PTR [rbx+0x8],0x1
   24ee2:	mov    QWORD PTR [rax],rdx
   24ee5:	mov    QWORD PTR [rax+0x8],rcx
   24ee9:	lea    rdx,[rip+0xd20]        # 25c10 <g_str_equal@plt+0x1d858>
   24ef0:	mov    QWORD PTR [rax+0x10],rsi
   24ef4:	lea    rcx,[rip+0x75]        # 24f70 <g_str_equal@plt+0x1cbb8>
   24efb:	lea    rsi,[rip+0x7be]        # 256c0 <g_str_equal@plt+0x1d308>
   24f02:	mov    QWORD PTR [rax+0x18],rdx
   24f06:	lea    rdx,[rip+0x693]        # 255a0 <g_str_equal@plt+0x1d1e8>
   24f0d:	mov    QWORD PTR [rax+0x20],rcx
   24f11:	lea    rcx,[rip+0xffffffffffffff68]        # 24e80 <g_str_equal@plt+0x1cac8>
   24f18:	mov    QWORD PTR [rax+0x28],rsi
   24f1c:	lea    rsi,[rip+0x2ed]        # 25210 <g_str_equal@plt+0x1ce58>
   24f23:	mov    QWORD PTR [rax+0x30],rdi
   24f27:	mov    QWORD PTR [rax+0x38],rdx
   24f2b:	mov    QWORD PTR [rax+0x88],rcx
   24f32:	mov    QWORD PTR [rax+0xa0],rsi
   24f39:	mov    QWORD PTR [rax+0xa8],rbx
   24f40:	pop    rbx
   24f41:	ret    
   24f42:	lea    rcx,[rip+0x97c7]        # 2e710 <_fini@@Base+0x548c>
   24f49:	lea    rsi,[rip+0x92b8]        # 2e208 <_fini@@Base+0x4f84>
   24f50:	lea    rdi,[rip+0x9477]        # 2e3ce <_fini@@Base+0x514a>
   24f57:	mov    edx,0x299
   24f5c:	call   7a70 <__assert_fail@plt>
   24f61:	nop    DWORD PTR [rax+rax*1+0x0]
   24f66:	nop    WORD PTR cs:[rax+rax*1+0x0]
   24f70:	push   rbx
   24f71:	mov    rax,QWORD PTR [rdi+0xb8]
   24f78:	test   rax,rax
   24f7b:	je     24fb4 <g_str_equal@plt+0x1cbfc>
   24f7d:	mov    rcx,QWORD PTR [rax+0x8]
   24f81:	test   rcx,rcx
   24f84:	je     24fb4 <g_str_equal@plt+0x1cbfc>
   24f86:	mov    ecx,DWORD PTR [rcx]
   24f88:	lea    r8d,[rcx-0x1]
   24f8c:	cmp    r8d,0x5
   24f90:	ja     24fd3 <g_str_equal@plt+0x1cc1b>
   24f92:	cmp    ecx,0x5
   24f95:	jne    24fb4 <g_str_equal@plt+0x1cbfc>
   24f97:	cmp    QWORD PTR [rax+0x20],0x0
   24f9c:	je     24fb0 <g_str_equal@plt+0x1cbf8>
   24f9e:	mov    rbx,rsi
   24fa1:	mov    rdi,rdx
   24fa4:	call   80c0 <g_malloc0@plt>
   24fa9:	mov    QWORD PTR [rbx],rax
   24fac:	pop    rbx
   24fad:	ret    
   24fae:	xchg   ax,ax
   24fb0:	xor    eax,eax
   24fb2:	pop    rbx
   24fb3:	ret    
   24fb4:	lea    rcx,[rip+0x9695]        # 2e650 <_fini@@Base+0x53cc>
   24fbb:	lea    rsi,[rip+0x9246]        # 2e208 <_fini@@Base+0x4f84>
   24fc2:	lea    rdi,[rip+0x92af]        # 2e278 <_fini@@Base+0x4ff4>
   24fc9:	mov    edx,0x156
   24fce:	call   7a70 <__assert_fail@plt>
   24fd3:	call   24cb0 <g_str_equal@plt+0x1c8f8>
   24fd8:	nop    DWORD PTR [rax+rax*1+0x0]
   24fe0:	push   rbx
   24fe1:	mov    rbx,QWORD PTR [rdi+0xb8]
   24fe8:	test   rbx,rbx
   24feb:	je     25015 <g_str_equal@plt+0x1cc5d>
   24fed:	cmp    QWORD PTR [rbx+0x10],rsi
   24ff1:	jne    25015 <g_str_equal@plt+0x1cc5d>
   24ff3:	mov    rax,QWORD PTR [rbx+0x30]
   24ff7:	mov    QWORD PTR [rdi+0xb8],rax
   24ffe:	mov    rdi,QWORD PTR [rbx+0x18]
   25002:	test   rdi,rdi
   25005:	je     2500c <g_str_equal@plt+0x1cc54>
   25007:	call   8170 <g_hash_table_unref@plt>
   2500c:	mov    rdi,rbx
   2500f:	pop    rbx
   25010:	jmp    7880 <g_free@plt>
   25015:	lea    rcx,[rip+0x9694]        # 2e6b0 <_fini@@Base+0x542c>
   2501c:	lea    rsi,[rip+0x91e5]        # 2e208 <_fini@@Base+0x4f84>
   25023:	lea    rdi,[rip+0x9390]        # 2e3ba <_fini@@Base+0x5136>
   2502a:	mov    edx,0x10e
   2502f:	call   7a70 <__assert_fail@plt>
   25034:	xchg   ax,ax
   25036:	nop    WORD PTR cs:[rax+rax*1+0x0]
   25040:	sub    rsp,0x8
   25044:	mov    rax,QWORD PTR [rdi+0xb8]
   2504b:	mov    rdx,QWORD PTR [rax+0x8]
   2504f:	mov    edx,DWORD PTR [rdx]
   25051:	lea    ecx,[rdx-0x1]
   25054:	cmp    ecx,0x5
   25057:	ja     2508d <g_str_equal@plt+0x1ccd5>
   25059:	cmp    edx,0x5
   2505c:	jne    2506e <g_str_equal@plt+0x1ccb6>
   2505e:	cmp    QWORD PTR [rax+0x18],0x0
   25063:	jne    2506e <g_str_equal@plt+0x1ccb6>
   25065:	add    rsp,0x8
   25069:	jmp    24fe0 <g_str_equal@plt+0x1cc28>
   2506e:	lea    rcx,[rip+0x965b]        # 2e6d0 <_fini@@Base+0x544c>
   25075:	lea    rsi,[rip+0x918c]        # 2e208 <_fini@@Base+0x4f84>
   2507c:	lea    rdi,[rip+0x921d]        # 2e2a0 <_fini@@Base+0x501c>
   25083:	mov    edx,0x171
   25088:	call   7a70 <__assert_fail@plt>
   2508d:	call   24cb0 <g_str_equal@plt+0x1c8f8>
   25092:	nop    DWORD PTR [rax+0x0]
   25096:	nop    WORD PTR cs:[rax+rax*1+0x0]
   250a0:	sub    rsp,0x8
   250a4:	mov    rax,QWORD PTR [rdi+0xb8]
   250ab:	mov    rdx,QWORD PTR [rax+0x8]
   250af:	mov    edx,DWORD PTR [rdx]
   250b1:	lea    ecx,[rdx-0x1]
   250b4:	cmp    ecx,0x5
   250b7:	ja     250ed <g_str_equal@plt+0x1cd35>
   250b9:	cmp    edx,0x4
   250bc:	jne    250ce <g_str_equal@plt+0x1cd16>
   250be:	cmp    QWORD PTR [rax+0x18],0x0
   250c3:	je     250ce <g_str_equal@plt+0x1cd16>
   250c5:	add    rsp,0x8
   250c9:	jmp    24fe0 <g_str_equal@plt+0x1cc28>
   250ce:	lea    rcx,[rip+0x951b]        # 2e5f0 <_fini@@Base+0x536c>
   250d5:	lea    rsi,[rip+0x912c]        # 2e208 <_fini@@Base+0x4f84>
   250dc:	lea    rdi,[rip+0x91f5]        # 2e2d8 <_fini@@Base+0x5054>
   250e3:	mov    edx,0x131
   250e8:	call   7a70 <__assert_fail@plt>
   250ed:	call   24cb0 <g_str_equal@plt+0x1c8f8>
   250f2:	nop    DWORD PTR [rax+0x0]
   250f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   25100:	push   r14
   25102:	push   r13
   25104:	mov    r14,rsi
   25107:	push   r12
   25109:	push   rbp
   2510a:	mov    r12,rdi
   2510d:	push   rbx
   2510e:	mov    rbp,rdx
   25111:	mov    edi,0x38
   25116:	mov    r13,rcx
   25119:	call   80c0 <g_malloc0@plt>
   2511e:	test   rbp,rbp
   25121:	je     251ce <g_str_equal@plt+0x1ce16>
   25127:	mov    rbx,rax
   2512a:	mov    QWORD PTR [rax],r14
   2512d:	mov    QWORD PTR [rax+0x8],rbp
   25131:	mov    QWORD PTR [rax+0x10],r13
   25135:	mov    eax,DWORD PTR [rbp+0x0]
   25138:	lea    edx,[rax-0x1]
   2513b:	cmp    edx,0x5
   2513e:	ja     251c9 <g_str_equal@plt+0x1ce11>
   25144:	cmp    eax,0x4
   25147:	je     25180 <g_str_equal@plt+0x1cdc8>
   25149:	cmp    eax,0x5
   2514c:	jne    251ed <g_str_equal@plt+0x1ce35>
   25152:	mov    rax,QWORD PTR [rbp+0x10]
   25156:	mov    DWORD PTR [rbx+0x28],0xffffffff
   2515d:	mov    QWORD PTR [rbx+0x20],rax
   25161:	mov    rdx,QWORD PTR [r12]
   25165:	mov    QWORD PTR [r12],rbx
   25169:	mov    QWORD PTR [rbx+0x30],rdx
   2516d:	pop    rbx
   2516e:	pop    rbp
   2516f:	pop    r12
   25171:	pop    r13
   25173:	pop    r14
   25175:	ret    
   25176:	nop    WORD PTR cs:[rax+rax*1+0x0]
   25180:	mov    rsi,QWORD PTR [rip+0x218e59]        # 23dfe0 <g_str_equal>
   25187:	mov    rdi,QWORD PTR [rip+0x218e22]        # 23dfb0 <g_str_hash>
   2518e:	call   7d70 <g_hash_table_new@plt>
   25193:	mov    r13,rax
   25196:	mov    eax,DWORD PTR [rbp+0x0]
   25199:	lea    edx,[rax-0x1]
   2519c:	cmp    edx,0x5
   2519f:	ja     251c9 <g_str_equal@plt+0x1ce11>
   251a1:	cmp    eax,0x4
   251a4:	mov    eax,0x0
   251a9:	lea    rsi,[rip+0xfffffffffffffaf0]        # 24ca0 <g_str_equal@plt+0x1c8e8>
   251b0:	cmovne rbp,rax
   251b4:	mov    rdx,r13
   251b7:	mov    rdi,rbp
   251ba:	call   124b0 <g_str_equal@plt+0xa0f8>
   251bf:	mov    QWORD PTR [rbx+0x18],r13
   251c3:	mov    rax,QWORD PTR [rbx+0x20]
   251c7:	jmp    25161 <g_str_equal@plt+0x1cda9>
   251c9:	call   24cb0 <g_str_equal@plt+0x1c8f8>
   251ce:	lea    rcx,[rip+0x943b]        # 2e610 <_fini@@Base+0x538c>
   251d5:	lea    rsi,[rip+0x902c]        # 2e208 <_fini@@Base+0x4f84>
   251dc:	lea    rdi,[rip+0x91eb]        # 2e3ce <_fini@@Base+0x514a>
   251e3:	mov    edx,0xdc
   251e8:	call   7a70 <__assert_fail@plt>
   251ed:	lea    rcx,[rip+0x941c]        # 2e610 <_fini@@Base+0x538c>
   251f4:	lea    rsi,[rip+0x900d]        # 2e208 <_fini@@Base+0x4f84>
   251fb:	lea    rdi,[rip+0x9106]        # 2e308 <_fini@@Base+0x5084>
   25202:	mov    edx,0xe6
   25207:	call   7a70 <__assert_fail@plt>
   2520c:	nop    DWORD PTR [rax+0x0]
   25210:	push   rbp
   25211:	push   rbx
   25212:	mov    rbp,rdi
   25215:	sub    rsp,0x8
   25219:	mov    rbx,QWORD PTR [rdi+0xb8]
   25220:	test   rbx,rbx
   25223:	je     25255 <g_str_equal@plt+0x1ce9d>
   25225:	nop    DWORD PTR [rax]
   25228:	mov    rax,QWORD PTR [rbx+0x30]
   2522c:	mov    QWORD PTR [rbp+0xb8],rax
   25233:	mov    rdi,QWORD PTR [rbx+0x18]
   25237:	test   rdi,rdi
   2523a:	je     25241 <g_str_equal@plt+0x1ce89>
   2523c:	call   8170 <g_hash_table_unref@plt>
   25241:	mov    rdi,rbx
   25244:	call   7880 <g_free@plt>
   25249:	mov    rbx,QWORD PTR [rbp+0xb8]
   25250:	test   rbx,rbx
   25253:	jne    25228 <g_str_equal@plt+0x1ce70>
   25255:	mov    rdi,QWORD PTR [rbp+0xa8]
   2525c:	test   rdi,rdi
   2525f:	je     25277 <g_str_equal@plt+0x1cebf>
   25261:	mov    rax,QWORD PTR [rdi+0x8]
   25265:	test   rax,rax
   25268:	je     252a7 <g_str_equal@plt+0x1ceef>
   2526a:	sub    rax,0x1
   2526e:	test   rax,rax
   25271:	mov    QWORD PTR [rdi+0x8],rax
   25275:	je     252a0 <g_str_equal@plt+0x1cee8>
   25277:	mov    rdi,QWORD PTR [rbp+0xc0]
   2527e:	test   rdi,rdi
   25281:	je     2528d <g_str_equal@plt+0x1ced5>
   25283:	mov    esi,0x1
   25288:	call   7d20 <g_string_free@plt>
   2528d:	add    rsp,0x8
   25291:	mov    rdi,rbp
   25294:	pop    rbx
   25295:	pop    rbp
   25296:	jmp    7880 <g_free@plt>
   2529b:	nop    DWORD PTR [rax+rax*1+0x0]
   252a0:	call   12960 <g_str_equal@plt+0xa5a8>
   252a5:	jmp    25277 <g_str_equal@plt+0x1cebf>
   252a7:	call   855b <g_str_equal@plt+0x1a3>
   252ac:	nop    DWORD PTR [rax+0x0]
   252b0:	push   r15
   252b2:	push   r14
   252b4:	push   r13
   252b6:	push   r12
   252b8:	mov    r12d,edx
   252bb:	push   rbp
   252bc:	push   rbx
   252bd:	mov    rbp,rdi
   252c0:	sub    rsp,0x48
   252c4:	mov    rdi,QWORD PTR [rdi+0xc0]
   252cb:	mov    rax,QWORD PTR fs:0x28
   252d4:	mov    QWORD PTR [rsp+0x38],rax
   252d9:	xor    eax,eax
   252db:	mov    QWORD PTR [rsp+0x8],rsi
   252e0:	test   rdi,rdi
   252e3:	je     25450 <g_str_equal@plt+0x1d098>
   252e9:	xor    esi,esi
   252eb:	call   8150 <g_string_truncate@plt>
   252f0:	mov    rcx,QWORD PTR [rsp+0x8]
   252f5:	mov    rbx,QWORD PTR [rbp+0xb8]
   252fc:	test   rbx,rbx
   252ff:	je     25490 <g_str_equal@plt+0x1d0d8>
   25305:	test   r12d,r12d
   25308:	je     25316 <g_str_equal@plt+0x1cf5e>
   2530a:	mov    rcx,QWORD PTR [rbx]
   2530d:	mov    rbx,QWORD PTR [rbx+0x30]
   25311:	test   rbx,rbx
   25314:	je     25391 <g_str_equal@plt+0x1cfd9>
   25316:	lea    r14,[rip+0x90c1]        # 2e3de <_fini@@Base+0x515a>
   2531d:	lea    r13,[rip+0x6c9c]        # 2bfc0 <_fini@@Base+0x2d3c>
   25324:	lea    r12,[rsp+0x10]
   25329:	lea    r15,[rip+0x90a2]        # 2e3d2 <_fini@@Base+0x514e>
   25330:	mov    rax,QWORD PTR [rbx+0x8]
   25334:	mov    eax,DWORD PTR [rax]
   25336:	lea    edx,[rax-0x1]
   25339:	cmp    edx,0x5
   2533c:	ja     254c0 <g_str_equal@plt+0x1d108>
   25342:	cmp    eax,0x4
   25345:	je     253e0 <g_str_equal@plt+0x1d028>
   2534b:	cmp    BYTE PTR [rbp+0xb0],0x0
   25352:	mov    r9d,DWORD PTR [rbx+0x28]
   25356:	mov    r8,r13
   25359:	mov    ecx,0x20
   2535e:	mov    edx,0x1
   25363:	mov    esi,0x20
   25368:	mov    rdi,r12
   2536b:	cmove  r8,r14
   2536f:	xor    eax,eax
   25371:	call   81b0 <__snprintf_chk@plt>
   25376:	mov    rdi,QWORD PTR [rbp+0xc0]
   2537d:	mov    rsi,r12
   25380:	call   7970 <g_string_prepend@plt>
   25385:	mov    rcx,QWORD PTR [rbx]
   25388:	mov    rbx,QWORD PTR [rbx+0x30]
   2538c:	test   rbx,rbx
   2538f:	jne    25330 <g_str_equal@plt+0x1cf78>
   25391:	test   rcx,rcx
   25394:	mov    rdi,QWORD PTR [rbp+0xc0]
   2539b:	je     25430 <g_str_equal@plt+0x1d078>
   253a1:	mov    rsi,rcx
   253a4:	call   7970 <g_string_prepend@plt>
   253a9:	mov    rax,QWORD PTR [rbp+0xc0]
   253b0:	mov    rax,QWORD PTR [rax]
   253b3:	mov    rsi,QWORD PTR [rsp+0x38]
   253b8:	xor    rsi,QWORD PTR fs:0x28
   253c1:	jne    254df <g_str_equal@plt+0x1d127>
   253c7:	add    rsp,0x48
   253cb:	pop    rbx
   253cc:	pop    rbp
   253cd:	pop    r12
   253cf:	pop    r13
   253d1:	pop    r14
   253d3:	pop    r15
   253d5:	ret    
   253d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   253e0:	test   rcx,rcx
   253e3:	mov    rdi,QWORD PTR [rbp+0xc0]
   253ea:	cmove  rcx,r15
   253ee:	mov    rsi,rcx
   253f1:	call   7970 <g_string_prepend@plt>
   253f6:	mov    rdi,QWORD PTR [rbp+0xc0]
   253fd:	mov    esi,0x2e
   25402:	call   7f50 <g_string_prepend_c@plt>
   25407:	mov    rcx,QWORD PTR [rbx]
   2540a:	mov    rbx,QWORD PTR [rbx+0x30]
   2540e:	test   rbx,rbx
   25411:	jne    25330 <g_str_equal@plt+0x1cf78>
   25417:	test   rcx,rcx
   2541a:	mov    rdi,QWORD PTR [rbp+0xc0]
   25421:	jne    253a1 <g_str_equal@plt+0x1cfe9>
   25427:	nop    WORD PTR [rax+rax*1+0x0]
   25430:	mov    rax,QWORD PTR [rdi]
   25433:	movzx  edx,BYTE PTR [rax]
   25436:	cmp    dl,0x2e
   25439:	je     25470 <g_str_equal@plt+0x1d0b8>
   2543b:	test   dl,dl
   2543d:	lea    rdx,[rip+0x8f8e]        # 2e3d2 <_fini@@Base+0x514e>
   25444:	cmove  rax,rdx
   25448:	jmp    253b3 <g_str_equal@plt+0x1cffb>
   2544d:	nop    DWORD PTR [rax]
   25450:	lea    rdi,[rip+0x95e7]        # 2ea3e <_fini@@Base+0x57ba>
   25457:	call   7b80 <g_string_new@plt>
   2545c:	mov    rcx,QWORD PTR [rsp+0x8]
   25461:	mov    QWORD PTR [rbp+0xc0],rax
   25468:	jmp    252f5 <g_str_equal@plt+0x1cf3d>
   2546d:	nop    DWORD PTR [rax]
   25470:	mov    edx,0x1
   25475:	xor    esi,esi
   25477:	call   7ed0 <g_string_erase@plt>
   2547c:	mov    rax,QWORD PTR [rbp+0xc0]
   25483:	mov    rax,QWORD PTR [rax]
   25486:	jmp    253b3 <g_str_equal@plt+0x1cffb>
   2548b:	nop    DWORD PTR [rax+rax*1+0x0]
   25490:	test   r12d,r12d
   25493:	je     25391 <g_str_equal@plt+0x1cfd9>
   25499:	lea    rcx,[rip+0x9330]        # 2e7d0 <_fini@@Base+0x554c>
   254a0:	lea    rsi,[rip+0x8d61]        # 2e208 <_fini@@Base+0x4f84>
   254a7:	lea    rdi,[rip+0x8f35]        # 2e3e3 <_fini@@Base+0x515f>
   254ae:	mov    edx,0x65
   254b3:	call   7a70 <__assert_fail@plt>
   254b8:	nop    DWORD PTR [rax+rax*1+0x0]
   254c0:	lea    rcx,[rip+0x9319]        # 2e7e0 <_fini@@Base+0x555c>
   254c7:	lea    rsi,[rip+0x53ca]        # 2a898 <_fini@@Base+0x1614>
   254ce:	lea    rdi,[rip+0x540b]        # 2a8e0 <_fini@@Base+0x165c>
   254d5:	mov    edx,0x7f
   254da:	call   7a70 <__assert_fail@plt>
   254df:	call   8050 <__stack_chk_fail@plt>
   254e4:	xchg   ax,ax
   254e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   254f0:	push   r13
   254f2:	push   r12
   254f4:	movzx  edx,dl
   254f7:	push   rbp
   254f8:	push   rbx
   254f9:	mov    rbp,rdi
   254fc:	mov    r12,rsi
   254ff:	mov    r13,rcx
   25502:	sub    rsp,0x8
   25506:	call   24ce0 <g_str_equal@plt+0x1c928>
   2550b:	test   rax,rax
   2550e:	mov    rbx,rax
   25511:	je     25528 <g_str_equal@plt+0x1d170>
   25513:	add    rsp,0x8
   25517:	mov    rax,rbx
   2551a:	pop    rbx
   2551b:	pop    rbp
   2551c:	pop    r12
   2551e:	pop    r13
   25520:	ret    
   25521:	nop    DWORD PTR [rax+0x0]
   25528:	mov    rsi,r12
   2552b:	mov    rdi,rbp
   2552e:	xor    edx,edx
   25530:	call   252b0 <g_str_equal@plt+0x1cef8>
   25535:	lea    r8,[rip+0x8eaa]        # 2e3e6 <_fini@@Base+0x5162>
   2553c:	lea    rcx,[rip+0x92cd]        # 2e810 <_fini@@Base+0x558c>
   25543:	lea    rsi,[rip+0x8cbe]        # 2e208 <_fini@@Base+0x4f84>
   2554a:	mov    r9,rax
   2554d:	mov    rdi,r13
   25550:	xor    eax,eax
   25552:	mov    edx,0xab
   25557:	call   db00 <g_str_equal@plt+0x5748>
   2555c:	add    rsp,0x8
   25560:	mov    rax,rbx
   25563:	pop    rbx
   25564:	pop    rbp
   25565:	pop    r12
   25567:	pop    r13
   25569:	ret    
   2556a:	nop    WORD PTR [rax+rax*1+0x0]
   25570:	push   rbx
   25571:	mov    rbx,rdx
   25574:	mov    edx,0x1
   25579:	call   254f0 <g_str_equal@plt+0x1d138>
   2557e:	test   rax,rax
   25581:	mov    QWORD PTR [rbx],0x0
   25588:	je     25592 <g_str_equal@plt+0x1d1da>
   2558a:	add    QWORD PTR [rax+0x8],0x1
   2558f:	mov    QWORD PTR [rbx],rax
   25592:	pop    rbx
   25593:	ret    
   25594:	xchg   ax,ax
   25596:	nop    WORD PTR cs:[rax+rax*1+0x0]
   255a0:	push   r12
   255a2:	push   rbp
   255a3:	mov    r12,rcx
   255a6:	push   rbx
   255a7:	mov    rbp,rdx
   255aa:	mov    rcx,r8
   255ad:	xor    edx,edx
   255af:	call   254f0 <g_str_equal@plt+0x1d138>
   255b4:	test   rax,rax
   255b7:	je     255e0 <g_str_equal@plt+0x1d228>
   255b9:	mov    rbx,rax
   255bc:	mov    rdi,r12
   255bf:	call   80c0 <g_malloc0@plt>
   255c4:	mov    QWORD PTR [rbp+0x0],rax
   255c8:	mov    edx,DWORD PTR [rbx]
   255ca:	lea    ecx,[rdx-0x1]
   255cd:	cmp    ecx,0x5
   255d0:	ja     255ed <g_str_equal@plt+0x1d235>
   255d2:	mov    DWORD PTR [rax],edx
   255d4:	pop    rbx
   255d5:	pop    rbp
   255d6:	pop    r12
   255d8:	ret    
   255d9:	nop    DWORD PTR [rax+0x0]
   255e0:	mov    QWORD PTR [rbp+0x0],0x0
   255e8:	pop    rbx
   255e9:	pop    rbp
   255ea:	pop    r12
   255ec:	ret    
   255ed:	call   24cb0 <g_str_equal@plt+0x1c8f8>
   255f2:	nop    DWORD PTR [rax+0x0]
   255f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   25600:	push   r13
   25602:	push   r12
   25604:	mov    r13,rsi
   25607:	push   rbp
   25608:	push   rbx
   25609:	mov    rbx,rdx
   2560c:	mov    edx,0x1
   25611:	mov    r12,rdi
   25614:	mov    rbp,rcx
   25617:	sub    rsp,0x8
   2561b:	call   254f0 <g_str_equal@plt+0x1d138>
   25620:	test   rax,rax
   25623:	mov    QWORD PTR [rbx],0x0
   2562a:	je     2564d <g_str_equal@plt+0x1d295>
   2562c:	mov    eax,DWORD PTR [rax]
   2562e:	lea    edx,[rax-0x1]
   25631:	cmp    edx,0x5
   25634:	ja     256ad <g_str_equal@plt+0x1d2f5>
   25636:	cmp    eax,0x1
   25639:	jne    25660 <g_str_equal@plt+0x1d2a8>
   2563b:	lea    rax,[rip+0x21a19e]        # 23f7e0 <g_test_config_vars+0x20c0>
   25642:	add    QWORD PTR [rip+0x21a19e],0x1        # 23f7e8 <g_test_config_vars+0x20c8>
   2564a:	mov    QWORD PTR [rbx],rax
   2564d:	add    rsp,0x8
   25651:	pop    rbx
   25652:	pop    rbp
   25653:	pop    r12
   25655:	pop    r13
   25657:	ret    
   25658:	nop    DWORD PTR [rax+rax*1+0x0]
   25660:	mov    rsi,r13
   25663:	mov    rdi,r12
   25666:	xor    edx,edx
   25668:	call   252b0 <g_str_equal@plt+0x1cef8>
   2566d:	mov    r9,rax
   25670:	lea    rax,[rip+0x44db]        # 29b52 <_fini@@Base+0x8ce>
   25677:	sub    rsp,0x8
   2567b:	lea    r8,[rip+0x8b3e]        # 2e1c0 <_fini@@Base+0x4f3c>
   25682:	lea    rcx,[rip+0x91a7]        # 2e830 <_fini@@Base+0x55ac>
   25689:	lea    rsi,[rip+0x8b78]        # 2e208 <_fini@@Base+0x4f84>
   25690:	push   rax
   25691:	mov    edx,0x25f
   25696:	mov    rdi,rbp
   25699:	xor    eax,eax
   2569b:	call   db00 <g_str_equal@plt+0x5748>
   256a0:	pop    rax
   256a1:	pop    rdx
   256a2:	add    rsp,0x8
   256a6:	pop    rbx
   256a7:	pop    rbp
   256a8:	pop    r12
   256aa:	pop    r13
   256ac:	ret    
   256ad:	call   24cb0 <g_str_equal@plt+0x1c8f8>
   256b2:	nop    DWORD PTR [rax+0x0]
   256b6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   256c0:	push   rbp
   256c1:	push   rbx
   256c2:	sub    rsp,0x8
   256c6:	mov    rbx,QWORD PTR [rdi+0xb8]
   256cd:	test   rbx,rbx
   256d0:	je     25739 <g_str_equal@plt+0x1d381>
   256d2:	mov    rax,QWORD PTR [rbx+0x8]
   256d6:	test   rax,rax
   256d9:	je     25739 <g_str_equal@plt+0x1d381>
   256db:	mov    eax,DWORD PTR [rax]
   256dd:	lea    edx,[rax-0x1]
   256e0:	cmp    edx,0x5
   256e3:	ja     25758 <g_str_equal@plt+0x1d3a0>
   256e5:	cmp    eax,0x5
   256e8:	jne    25739 <g_str_equal@plt+0x1d381>
   256ea:	cmp    QWORD PTR [rbx+0x20],0x0
   256ef:	je     25732 <g_str_equal@plt+0x1d37a>
   256f1:	mov    rbp,rsi
   256f4:	mov    edx,0x1
   256f9:	xor    esi,esi
   256fb:	call   252b0 <g_str_equal@plt+0x1cef8>
   25700:	mov    edx,DWORD PTR [rbx+0x28]
   25703:	sub    rsp,0x8
   25707:	lea    r8,[rip+0x8c22]        # 2e330 <_fini@@Base+0x50ac>
   2570e:	push   rax
   2570f:	lea    rcx,[rip+0x8f5a]        # 2e670 <_fini@@Base+0x53ec>
   25716:	lea    rsi,[rip+0x8aeb]        # 2e208 <_fini@@Base+0x4f84>
   2571d:	xor    eax,eax
   2571f:	mov    rdi,rbp
   25722:	lea    r9d,[rdx+0x1]
   25726:	mov    edx,0x168
   2572b:	call   db00 <g_str_equal@plt+0x5748>
   25730:	pop    rax
   25731:	pop    rdx
   25732:	add    rsp,0x8
   25736:	pop    rbx
   25737:	pop    rbp
   25738:	ret    
   25739:	lea    rcx,[rip+0x8f50]        # 2e690 <_fini@@Base+0x540c>
   25740:	lea    rsi,[rip+0x8ac1]        # 2e208 <_fini@@Base+0x4f84>
   25747:	lea    rdi,[rip+0x8b2a]        # 2e278 <_fini@@Base+0x4ff4>
   2574e:	mov    edx,0x164
   25753:	call   7a70 <__assert_fail@plt>
   25758:	call   24cb0 <g_str_equal@plt+0x1c8f8>
   2575d:	nop    DWORD PTR [rax]
   25760:	push   r13
   25762:	push   r12
   25764:	mov    r13,rdx
   25767:	push   rbp
   25768:	push   rbx
   25769:	mov    edx,0x1
   2576e:	mov    rbp,rdi
   25771:	mov    r12,rsi
   25774:	mov    rbx,rcx
   25777:	sub    rsp,0x8
   2577b:	call   254f0 <g_str_equal@plt+0x1d138>
   25780:	test   rax,rax
   25783:	je     257d6 <g_str_equal@plt+0x1d41e>
   25785:	mov    edx,DWORD PTR [rax]
   25787:	lea    ecx,[rdx-0x1]
   2578a:	cmp    ecx,0x5
   2578d:	ja     25801 <g_str_equal@plt+0x1d449>
   2578f:	cmp    edx,0x2
   25792:	je     257e8 <g_str_equal@plt+0x1d430>
   25794:	xor    edx,edx
   25796:	mov    rsi,r12
   25799:	mov    rdi,rbp
   2579c:	call   252b0 <g_str_equal@plt+0x1cef8>
   257a1:	mov    r9,rax
   257a4:	lea    rax,[rip+0x52c0]        # 2aa6b <_fini@@Base+0x17e7>
   257ab:	sub    rsp,0x8
   257af:	lea    r8,[rip+0x8a0a]        # 2e1c0 <_fini@@Base+0x4f3c>
   257b6:	lea    rcx,[rip+0x8ff3]        # 2e7b0 <_fini@@Base+0x552c>
   257bd:	lea    rsi,[rip+0x8a44]        # 2e208 <_fini@@Base+0x4f84>
   257c4:	push   rax
   257c5:	mov    edx,0x229
   257ca:	xor    eax,eax
   257cc:	mov    rdi,rbx
   257cf:	call   db00 <g_str_equal@plt+0x5748>
   257d4:	pop    rax
   257d5:	pop    rdx
   257d6:	add    rsp,0x8
   257da:	pop    rbx
   257db:	pop    rbp
   257dc:	pop    r12
   257de:	pop    r13
   257e0:	ret    
   257e1:	nop    DWORD PTR [rax+0x0]
   257e8:	mov    rdi,rax
   257eb:	call   11790 <g_str_equal@plt+0x93d8>
   257f0:	movsd  QWORD PTR [r13+0x0],xmm0
   257f6:	add    rsp,0x8
   257fa:	pop    rbx
   257fb:	pop    rbp
   257fc:	pop    r12
   257fe:	pop    r13
   25800:	ret    
   25801:	call   24cb0 <g_str_equal@plt+0x1c8f8>
   25806:	nop    WORD PTR cs:[rax+rax*1+0x0]
   25810:	push   r12
   25812:	push   rbp
   25813:	mov    rcx,rdx
   25816:	push   rbx
   25817:	mov    rbx,rdx
   2581a:	mov    edx,0x1
   2581f:	mov    rbp,rdi
   25822:	mov    r12,rsi
   25825:	call   254f0 <g_str_equal@plt+0x1d138>
   2582a:	test   rax,rax
   2582d:	je     25885 <g_str_equal@plt+0x1d4cd>
   2582f:	mov    edx,DWORD PTR [rax]
   25831:	lea    ecx,[rdx-0x1]
   25834:	cmp    ecx,0x5
   25837:	ja     258d4 <g_str_equal@plt+0x1d51c>
   2583d:	cmp    edx,0x3
   25840:	je     258c8 <g_str_equal@plt+0x1d510>
   25846:	sub    edx,0x4
   25849:	mov    rsi,r12
   2584c:	mov    rdi,rbp
   2584f:	cmp    edx,0x1
   25852:	mov    edx,0x0
   25857:	jbe    25890 <g_str_equal@plt+0x1d4d8>
   25859:	call   252b0 <g_str_equal@plt+0x1cef8>
   2585e:	lea    r8,[rip+0x8b1b]        # 2e380 <_fini@@Base+0x50fc>
   25865:	lea    rcx,[rip+0x8ce4]        # 2e550 <_fini@@Base+0x52cc>
   2586c:	lea    rsi,[rip+0x8995]        # 2e208 <_fini@@Base+0x4f84>
   25873:	mov    r9,rax
   25876:	mov    edx,0xc7
   2587b:	mov    rdi,rbx
   2587e:	xor    eax,eax
   25880:	call   db00 <g_str_equal@plt+0x5748>
   25885:	pop    rbx
   25886:	xor    eax,eax
   25888:	pop    rbp
   25889:	pop    r12
   2588b:	ret    
   2588c:	nop    DWORD PTR [rax+0x0]
   25890:	call   252b0 <g_str_equal@plt+0x1cef8>
   25895:	lea    r8,[rip+0x8abc]        # 2e358 <_fini@@Base+0x50d4>
   2589c:	lea    rcx,[rip+0x8cad]        # 2e550 <_fini@@Base+0x52cc>
   258a3:	lea    rsi,[rip+0x895e]        # 2e208 <_fini@@Base+0x4f84>
   258aa:	mov    r9,rax
   258ad:	mov    rdi,rbx
   258b0:	xor    eax,eax
   258b2:	mov    edx,0xc2
   258b7:	call   db00 <g_str_equal@plt+0x5748>
   258bc:	pop    rbx
   258bd:	xor    eax,eax
   258bf:	pop    rbp
   258c0:	pop    r12
   258c2:	ret    
   258c3:	nop    DWORD PTR [rax+rax*1+0x0]
   258c8:	pop    rbx
   258c9:	pop    rbp
   258ca:	pop    r12
   258cc:	mov    rdi,rax
   258cf:	jmp    11d40 <g_str_equal@plt+0x9988>
   258d4:	call   24cb0 <g_str_equal@plt+0x1c8f8>
   258d9:	nop    DWORD PTR [rax+0x0]
   258e0:	push   rbx
   258e1:	mov    rbx,rdx
   258e4:	mov    rdx,rcx
   258e7:	call   25810 <g_str_equal@plt+0x1d458>
   258ec:	mov    rdi,rax
   258ef:	call   7a50 <g_strdup@plt>
   258f4:	mov    QWORD PTR [rbx],rax
   258f7:	pop    rbx
   258f8:	ret    
   258f9:	nop    DWORD PTR [rax+0x0]
   25900:	push   r13
   25902:	push   r12
   25904:	mov    r13,rdx
   25907:	push   rbp
   25908:	push   rbx
   25909:	mov    edx,0x1
   2590e:	mov    rbp,rdi
   25911:	mov    r12,rsi
   25914:	mov    rbx,rcx
   25917:	sub    rsp,0x8
   2591b:	call   254f0 <g_str_equal@plt+0x1d138>
   25920:	test   rax,rax
   25923:	mov    QWORD PTR [r13+0x0],0x0
   2592b:	je     2597e <g_str_equal@plt+0x1d5c6>
   2592d:	mov    edx,DWORD PTR [rax]
   2592f:	lea    ecx,[rdx-0x1]
   25932:	cmp    ecx,0x5
   25935:	ja     259af <g_str_equal@plt+0x1d5f7>
   25937:	cmp    edx,0x3
   2593a:	je     25990 <g_str_equal@plt+0x1d5d8>
   2593c:	xor    edx,edx
   2593e:	mov    rsi,r12
   25941:	mov    rdi,rbp
   25944:	call   252b0 <g_str_equal@plt+0x1cef8>
   25949:	mov    r9,rax
   2594c:	lea    rax,[rip+0x975e]        # 2f0b1 <_fini@@Base+0x5e2d>
   25953:	sub    rsp,0x8
   25957:	lea    r8,[rip+0x8862]        # 2e1c0 <_fini@@Base+0x4f3c>
   2595e:	lea    rcx,[rip+0x8e2b]        # 2e790 <_fini@@Base+0x550c>
   25965:	lea    rsi,[rip+0x889c]        # 2e208 <_fini@@Base+0x4f84>
   2596c:	push   rax
   2596d:	mov    edx,0x20c
   25972:	xor    eax,eax
   25974:	mov    rdi,rbx
   25977:	call   db00 <g_str_equal@plt+0x5748>
   2597c:	pop    rax
   2597d:	pop    rdx
   2597e:	add    rsp,0x8
   25982:	pop    rbx
   25983:	pop    rbp
   25984:	pop    r12
   25986:	pop    r13
   25988:	ret    
   25989:	nop    DWORD PTR [rax+0x0]
   25990:	mov    rdi,rax
   25993:	call   11d40 <g_str_equal@plt+0x9988>
   25998:	mov    rdi,rax
   2599b:	call   7a50 <g_strdup@plt>
   259a0:	mov    QWORD PTR [r13+0x0],rax
   259a4:	add    rsp,0x8
   259a8:	pop    rbx
   259a9:	pop    rbp
   259aa:	pop    r12
   259ac:	pop    r13
   259ae:	ret    
   259af:	call   24cb0 <g_str_equal@plt+0x1c8f8>
   259b4:	xchg   ax,ax
   259b6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   259c0:	push   r13
   259c2:	push   r12
   259c4:	mov    r13,rdx
   259c7:	push   rbp
   259c8:	push   rbx
   259c9:	mov    edx,0x1
   259ce:	mov    rbp,rdi
   259d1:	mov    r12,rsi
   259d4:	mov    rbx,rcx
   259d7:	sub    rsp,0x8
   259db:	call   254f0 <g_str_equal@plt+0x1d138>
   259e0:	test   rax,rax
   259e3:	je     25a36 <g_str_equal@plt+0x1d67e>
   259e5:	mov    edx,DWORD PTR [rax]
   259e7:	lea    ecx,[rdx-0x1]
   259ea:	cmp    ecx,0x5
   259ed:	ja     25a5f <g_str_equal@plt+0x1d6a7>
   259ef:	cmp    edx,0x6
   259f2:	je     25a48 <g_str_equal@plt+0x1d690>
   259f4:	xor    edx,edx
   259f6:	mov    rsi,r12
   259f9:	mov    rdi,rbp
   259fc:	call   252b0 <g_str_equal@plt+0x1cef8>
   25a01:	mov    r9,rax
   25a04:	lea    rax,[rip+0x72f9]        # 2cd04 <_fini@@Base+0x3a80>
   25a0b:	sub    rsp,0x8
   25a0f:	lea    r8,[rip+0x87aa]        # 2e1c0 <_fini@@Base+0x4f3c>
   25a16:	lea    rcx,[rip+0x8d53]        # 2e770 <_fini@@Base+0x54ec>
   25a1d:	lea    rsi,[rip+0x87e4]        # 2e208 <_fini@@Base+0x4f84>
   25a24:	push   rax
   25a25:	mov    edx,0x1e3
   25a2a:	xor    eax,eax
   25a2c:	mov    rdi,rbx
   25a2f:	call   db00 <g_str_equal@plt+0x5748>
   25a34:	pop    rax
   25a35:	pop    rdx
   25a36:	add    rsp,0x8
   25a3a:	pop    rbx
   25a3b:	pop    rbp
   25a3c:	pop    r12
   25a3e:	pop    r13
   25a40:	ret    
   25a41:	nop    DWORD PTR [rax+0x0]
   25a48:	mov    rdi,rax
   25a4b:	call   128a0 <g_str_equal@plt+0xa4e8>
   25a50:	mov    BYTE PTR [r13+0x0],al
   25a54:	add    rsp,0x8
   25a58:	pop    rbx
   25a59:	pop    rbp
   25a5a:	pop    r12
   25a5c:	pop    r13
   25a5e:	ret    
   25a5f:	call   24cb0 <g_str_equal@plt+0x1c8f8>
   25a64:	xchg   ax,ax
   25a66:	nop    WORD PTR cs:[rax+rax*1+0x0]
   25a70:	push   r14
   25a72:	push   r13
   25a74:	mov    r14,rdx
   25a77:	push   r12
   25a79:	push   rbp
   25a7a:	mov    edx,0x1
   25a7f:	push   rbx
   25a80:	mov    r12,rdi
   25a83:	mov    r13,rsi
   25a86:	mov    rbp,rcx
   25a89:	sub    rsp,0x10
   25a8d:	mov    rax,QWORD PTR fs:0x28
   25a96:	mov    QWORD PTR [rsp+0x8],rax
   25a9b:	xor    eax,eax
   25a9d:	call   254f0 <g_str_equal@plt+0x1d138>
   25aa2:	test   rax,rax
   25aa5:	je     25aff <g_str_equal@plt+0x1d747>
   25aa7:	mov    rbx,rax
   25aaa:	mov    eax,DWORD PTR [rax]
   25aac:	lea    edx,[rax-0x1]
   25aaf:	cmp    edx,0x5
   25ab2:	ja     25b50 <g_str_equal@plt+0x1d798>
   25ab8:	cmp    eax,0x2
   25abb:	je     25b20 <g_str_equal@plt+0x1d768>
   25abd:	xor    edx,edx
   25abf:	mov    rsi,r13
   25ac2:	mov    rdi,r12
   25ac5:	call   252b0 <g_str_equal@plt+0x1cef8>
   25aca:	mov    r9,rax
   25acd:	lea    rax,[rip+0x859f]        # 2e073 <_fini@@Base+0x4def>
   25ad4:	sub    rsp,0x8
   25ad8:	lea    r8,[rip+0x4f70]        # 2aa4f <_fini@@Base+0x17cb>
   25adf:	lea    rcx,[rip+0x8c6a]        # 2e750 <_fini@@Base+0x54cc>
   25ae6:	lea    rsi,[rip+0x871b]        # 2e208 <_fini@@Base+0x4f84>
   25aed:	push   rax
   25aee:	mov    edx,0x1c2
   25af3:	xor    eax,eax
   25af5:	mov    rdi,rbp
   25af8:	call   db00 <g_str_equal@plt+0x5748>
   25afd:	pop    rax
   25afe:	pop    rdx
   25aff:	mov    rax,QWORD PTR [rsp+0x8]
   25b04:	xor    rax,QWORD PTR fs:0x28
   25b0d:	jne    25b4b <g_str_equal@plt+0x1d793>
   25b0f:	add    rsp,0x10
   25b13:	pop    rbx
   25b14:	pop    rbp
   25b15:	pop    r12
   25b17:	pop    r13
   25b19:	pop    r14
   25b1b:	ret    
   25b1c:	nop    DWORD PTR [rax+0x0]
   25b20:	mov    rsi,r14
   25b23:	mov    rdi,rbx
   25b26:	call   116d0 <g_str_equal@plt+0x9318>
   25b2b:	test   al,al
   25b2d:	jne    25aff <g_str_equal@plt+0x1d747>
   25b2f:	mov    rsi,rsp
   25b32:	mov    rdi,rbx
   25b35:	call   11610 <g_str_equal@plt+0x9258>
   25b3a:	test   al,al
   25b3c:	je     25abd <g_str_equal@plt+0x1d705>
   25b42:	mov    rax,QWORD PTR [rsp]
   25b46:	mov    QWORD PTR [r14],rax
   25b49:	jmp    25aff <g_str_equal@plt+0x1d747>
   25b4b:	call   8050 <__stack_chk_fail@plt>
   25b50:	call   24cb0 <g_str_equal@plt+0x1c8f8>
   25b55:	nop
   25b56:	nop    WORD PTR cs:[rax+rax*1+0x0]
   25b60:	push   r13
   25b62:	push   r12
   25b64:	mov    r13,rdx
   25b67:	push   rbp
   25b68:	push   rbx
   25b69:	mov    edx,0x1
   25b6e:	mov    rbx,rdi
   25b71:	mov    rbp,rsi
   25b74:	mov    r12,rcx
   25b77:	sub    rsp,0x8
   25b7b:	call   254f0 <g_str_equal@plt+0x1d138>
   25b80:	test   rax,rax
   25b83:	je     25bd6 <g_str_equal@plt+0x1d81e>
   25b85:	mov    edx,DWORD PTR [rax]
   25b87:	lea    ecx,[rdx-0x1]
   25b8a:	cmp    ecx,0x5
   25b8d:	ja     25c02 <g_str_equal@plt+0x1d84a>
   25b8f:	cmp    edx,0x2
   25b92:	je     25be8 <g_str_equal@plt+0x1d830>
   25b94:	xor    edx,edx
   25b96:	mov    rsi,rbp
   25b99:	mov    rdi,rbx
   25b9c:	call   252b0 <g_str_equal@plt+0x1cef8>
   25ba1:	mov    r9,rax
   25ba4:	lea    rax,[rip+0x8855]        # 2e400 <_fini@@Base+0x517c>
   25bab:	sub    rsp,0x8
   25baf:	lea    r8,[rip+0x860a]        # 2e1c0 <_fini@@Base+0x4f3c>
   25bb6:	lea    rcx,[rip+0x8b73]        # 2e730 <_fini@@Base+0x54ac>
   25bbd:	lea    rsi,[rip+0x8644]        # 2e208 <_fini@@Base+0x4f84>
   25bc4:	push   rax
   25bc5:	mov    edx,0x191
   25bca:	xor    eax,eax
   25bcc:	mov    rdi,r12
   25bcf:	call   db00 <g_str_equal@plt+0x5748>
   25bd4:	pop    rax
   25bd5:	pop    rdx
   25bd6:	add    rsp,0x8
   25bda:	pop    rbx
   25bdb:	pop    rbp
   25bdc:	pop    r12
   25bde:	pop    r13
   25be0:	ret    
   25be1:	nop    DWORD PTR [rax+0x0]
   25be8:	mov    rsi,r13
   25beb:	mov    rdi,rax
   25bee:	call   11610 <g_str_equal@plt+0x9258>
   25bf3:	test   al,al
   25bf5:	je     25b94 <g_str_equal@plt+0x1d7dc>
   25bf7:	add    rsp,0x8
   25bfb:	pop    rbx
   25bfc:	pop    rbp
   25bfd:	pop    r12
   25bff:	pop    r13
   25c01:	ret    
   25c02:	call   24cb0 <g_str_equal@plt+0x1c8f8>
   25c07:	nop    WORD PTR [rax+rax*1+0x0]
   25c10:	push   r14
   25c12:	push   r13
   25c14:	mov    r13,rcx
   25c17:	push   r12
   25c19:	push   rbp
   25c1a:	mov    rcx,r8
   25c1d:	push   rbx
   25c1e:	mov    rbp,rdx
   25c21:	mov    edx,0x1
   25c26:	mov    rbx,rdi
   25c29:	mov    r12,rsi
   25c2c:	mov    r14,r8
   25c2f:	call   254f0 <g_str_equal@plt+0x1d138>
   25c34:	test   rbp,rbp
   25c37:	je     25c41 <g_str_equal@plt+0x1d889>
   25c39:	mov    QWORD PTR [rbp+0x0],0x0
   25c41:	test   rax,rax
   25c44:	je     25c9b <g_str_equal@plt+0x1d8e3>
   25c46:	mov    edx,DWORD PTR [rax]
   25c48:	lea    ecx,[rdx-0x1]
   25c4b:	cmp    ecx,0x5
   25c4e:	ja     25cdc <g_str_equal@plt+0x1d924>
   25c54:	cmp    edx,0x5
   25c57:	je     25ca8 <g_str_equal@plt+0x1d8f0>
   25c59:	xor    edx,edx
   25c5b:	mov    rsi,r12
   25c5e:	mov    rdi,rbx
   25c61:	call   252b0 <g_str_equal@plt+0x1cef8>
   25c66:	mov    r9,rax
   25c69:	lea    rax,[rip+0x8798]        # 2e408 <_fini@@Base+0x5184>
   25c70:	sub    rsp,0x8
   25c74:	lea    r8,[rip+0x8545]        # 2e1c0 <_fini@@Base+0x4f3c>
   25c7b:	lea    rcx,[rip+0x89ae]        # 2e630 <_fini@@Base+0x53ac>
   25c82:	lea    rsi,[rip+0x857f]        # 2e208 <_fini@@Base+0x4f84>
   25c89:	push   rax
   25c8a:	mov    edx,0x146
   25c8f:	xor    eax,eax
   25c91:	mov    rdi,r14
   25c94:	call   db00 <g_str_equal@plt+0x5748>
   25c99:	pop    rax
   25c9a:	pop    rdx
   25c9b:	pop    rbx
   25c9c:	pop    rbp
   25c9d:	pop    r12
   25c9f:	pop    r13
   25ca1:	pop    r14
   25ca3:	ret    
   25ca4:	nop    DWORD PTR [rax+0x0]
   25ca8:	lea    rdi,[rbx+0xb8]
   25caf:	mov    rcx,rbp
   25cb2:	mov    rdx,rax
   25cb5:	mov    rsi,r12
   25cb8:	call   25100 <g_str_equal@plt+0x1cd48>
   25cbd:	test   rax,rax
   25cc0:	je     25c9b <g_str_equal@plt+0x1d8e3>
   25cc2:	test   rbp,rbp
   25cc5:	je     25c9b <g_str_equal@plt+0x1d8e3>
   25cc7:	mov    rdi,r13
   25cca:	call   80c0 <g_malloc0@plt>
   25ccf:	mov    QWORD PTR [rbp+0x0],rax
   25cd3:	pop    rbx
   25cd4:	pop    rbp
   25cd5:	pop    r12
   25cd7:	pop    r13
   25cd9:	pop    r14
   25cdb:	ret    
   25cdc:	call   24cb0 <g_str_equal@plt+0x1c8f8>
   25ce1:	nop    DWORD PTR [rax+rax*1+0x0]
   25ce6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   25cf0:	push   r14
   25cf2:	push   r13
   25cf4:	mov    r13,rcx
   25cf7:	push   r12
   25cf9:	push   rbp
   25cfa:	mov    rcx,r8
   25cfd:	push   rbx
   25cfe:	mov    rbx,rdx
   25d01:	mov    edx,0x1
   25d06:	mov    rbp,rdi
   25d09:	mov    r12,rsi
   25d0c:	mov    r14,r8
   25d0f:	call   254f0 <g_str_equal@plt+0x1d138>
   25d14:	test   rbx,rbx
   25d17:	je     25d20 <g_str_equal@plt+0x1d968>
   25d19:	mov    QWORD PTR [rbx],0x0
   25d20:	test   rax,rax
   25d23:	je     25d76 <g_str_equal@plt+0x1d9be>
   25d25:	mov    edx,DWORD PTR [rax]
   25d27:	lea    ecx,[rdx-0x1]
   25d2a:	cmp    ecx,0x5
   25d2d:	ja     25dae <g_str_equal@plt+0x1d9f6>
   25d2f:	cmp    edx,0x4
   25d32:	je     25d80 <g_str_equal@plt+0x1d9c8>
   25d34:	xor    edx,edx
   25d36:	mov    rsi,r12
   25d39:	mov    rdi,rbp
   25d3c:	call   252b0 <g_str_equal@plt+0x1cef8>
   25d41:	mov    r9,rax
   25d44:	lea    rax,[rip+0x8c54]        # 2e99f <_fini@@Base+0x571b>
   25d4b:	sub    rsp,0x8
   25d4f:	lea    r8,[rip+0x846a]        # 2e1c0 <_fini@@Base+0x4f3c>
   25d56:	lea    rcx,[rip+0x8833]        # 2e590 <_fini@@Base+0x530c>
   25d5d:	lea    rsi,[rip+0x84a4]        # 2e208 <_fini@@Base+0x4f84>
   25d64:	push   rax
   25d65:	mov    edx,0x121
   25d6a:	xor    eax,eax
   25d6c:	mov    rdi,r14
   25d6f:	call   db00 <g_str_equal@plt+0x5748>
   25d74:	pop    rax
   25d75:	pop    rdx
   25d76:	pop    rbx
   25d77:	pop    rbp
   25d78:	pop    r12
   25d7a:	pop    r13
   25d7c:	pop    r14
   25d7e:	ret    
   25d7f:	nop
   25d80:	lea    rdi,[rbp+0xb8]
   25d87:	mov    rcx,rbx
   25d8a:	mov    rdx,rax
   25d8d:	mov    rsi,r12
   25d90:	call   25100 <g_str_equal@plt+0x1cd48>
   25d95:	test   rbx,rbx
   25d98:	je     25d76 <g_str_equal@plt+0x1d9be>
   25d9a:	mov    rdi,r13
   25d9d:	call   80c0 <g_malloc0@plt>
   25da2:	mov    QWORD PTR [rbx],rax
   25da5:	pop    rbx
   25da6:	pop    rbp
   25da7:	pop    r12
   25da9:	pop    r13
   25dab:	pop    r14
   25dad:	ret    
   25dae:	call   24cb0 <g_str_equal@plt+0x1c8f8>
   25db3:	nop    DWORD PTR [rax]
   25db6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   25dc0:	push   r12
   25dc2:	push   rbp
   25dc3:	push   rbx
   25dc4:	sub    rsp,0x40
   25dc8:	mov    rax,QWORD PTR fs:0x28
   25dd1:	mov    QWORD PTR [rsp+0x38],rax
   25dd6:	xor    eax,eax
   25dd8:	mov    rax,QWORD PTR [rdi+0xb8]
   25ddf:	test   rax,rax
   25de2:	je     25e68 <g_str_equal@plt+0x1dab0>
   25de8:	cmp    QWORD PTR [rax+0x20],0x0
   25ded:	jne    25e68 <g_str_equal@plt+0x1dab0>
   25def:	lea    rbx,[rsp+0x10]
   25df4:	mov    r12,rsi
   25df7:	mov    rsi,QWORD PTR [rax+0x18]
   25dfb:	mov    rbp,rdi
   25dfe:	mov    rdi,rbx
   25e01:	call   7d90 <g_hash_table_iter_init@plt>
   25e06:	lea    rsi,[rsp+0x8]
   25e0b:	xor    edx,edx
   25e0d:	mov    rdi,rbx
   25e10:	call   7d80 <g_hash_table_iter_next@plt>
   25e15:	test   eax,eax
   25e17:	je     25e4f <g_str_equal@plt+0x1da97>
   25e19:	mov    rsi,QWORD PTR [rsp+0x8]
   25e1e:	xor    edx,edx
   25e20:	mov    rdi,rbp
   25e23:	call   252b0 <g_str_equal@plt+0x1cef8>
   25e28:	lea    r8,[rip+0x85f2]        # 2e421 <_fini@@Base+0x519d>
   25e2f:	lea    rcx,[rip+0x877a]        # 2e5b0 <_fini@@Base+0x532c>
   25e36:	lea    rsi,[rip+0x83cb]        # 2e208 <_fini@@Base+0x4f84>
   25e3d:	mov    r9,rax
   25e40:	mov    edx,0xfc
   25e45:	mov    rdi,r12
   25e48:	xor    eax,eax
   25e4a:	call   db00 <g_str_equal@plt+0x5748>
   25e4f:	mov    rax,QWORD PTR [rsp+0x38]
   25e54:	xor    rax,QWORD PTR fs:0x28
   25e5d:	jne    25e87 <g_str_equal@plt+0x1dacf>
   25e5f:	add    rsp,0x40
   25e63:	pop    rbx
   25e64:	pop    rbp
   25e65:	pop    r12
   25e67:	ret    
   25e68:	lea    rcx,[rip+0x8761]        # 2e5d0 <_fini@@Base+0x534c>
   25e6f:	lea    rsi,[rip+0x8392]        # 2e208 <_fini@@Base+0x4f84>
   25e76:	lea    rdi,[rip+0x8591]        # 2e40e <_fini@@Base+0x518a>
   25e7d:	mov    edx,0xf7
   25e82:	call   7a70 <__assert_fail@plt>
   25e87:	call   8050 <__stack_chk_fail@plt>
   25e8c:	nop    DWORD PTR [rax+0x0]
   25e90:	push   r13
   25e92:	push   r12
   25e94:	mov    r13,rdx
   25e97:	push   rbp
   25e98:	push   rbx
   25e99:	mov    rdx,rcx
   25e9c:	mov    rbp,rdi
   25e9f:	mov    r12,rsi
   25ea2:	mov    rbx,rcx
   25ea5:	sub    rsp,0x8
   25ea9:	call   25810 <g_str_equal@plt+0x1d458>
   25eae:	test   rax,rax
   25eb1:	je     25ec4 <g_str_equal@plt+0x1db0c>
   25eb3:	xor    esi,esi
   25eb5:	mov    rdx,r13
   25eb8:	mov    rdi,rax
   25ebb:	call   ab30 <g_str_equal@plt+0x2778>
   25ec0:	test   eax,eax
   25ec2:	js     25ed0 <g_str_equal@plt+0x1db18>
   25ec4:	add    rsp,0x8
   25ec8:	pop    rbx
   25ec9:	pop    rbp
   25eca:	pop    r12
   25ecc:	pop    r13
   25ece:	ret    
   25ecf:	nop
   25ed0:	mov    rsi,r12
   25ed3:	mov    rdi,rbp
   25ed6:	xor    edx,edx
   25ed8:	call   252b0 <g_str_equal@plt+0x1cef8>
   25edd:	mov    r9,rax
   25ee0:	lea    rax,[rip+0x614c]        # 2c033 <_fini@@Base+0x2daf>
   25ee7:	sub    rsp,0x8
   25eeb:	lea    r8,[rip+0x4b5d]        # 2aa4f <_fini@@Base+0x17cb>
   25ef2:	lea    rcx,[rip+0x8677]        # 2e570 <_fini@@Base+0x52ec>
   25ef9:	lea    rsi,[rip+0x8308]        # 2e208 <_fini@@Base+0x4f84>
   25f00:	push   rax
   25f01:	mov    edx,0x272
   25f06:	mov    rdi,rbx
   25f09:	xor    eax,eax
   25f0b:	call   db00 <g_str_equal@plt+0x5748>
   25f10:	pop    rax
   25f11:	pop    rdx
   25f12:	add    rsp,0x8
   25f16:	pop    rbx
   25f17:	pop    rbp
   25f18:	pop    r12
   25f1a:	pop    r13
   25f1c:	ret    
   25f1d:	nop    DWORD PTR [rax]
   25f20:	push   r15
   25f22:	push   r14
   25f24:	mov    r15,rdx
   25f27:	push   r13
   25f29:	push   r12
   25f2b:	mov    rdx,rcx
   25f2e:	push   rbp
   25f2f:	push   rbx
   25f30:	mov    r12,rdi
   25f33:	mov    r13,rsi
   25f36:	mov    rbp,rcx
   25f39:	sub    rsp,0x18
   25f3d:	mov    rax,QWORD PTR fs:0x28
   25f46:	mov    QWORD PTR [rsp+0x8],rax
   25f4b:	xor    eax,eax
   25f4d:	call   25810 <g_str_equal@plt+0x1d458>
   25f52:	test   rax,rax
   25f55:	je     25fcf <g_str_equal@plt+0x1dc17>
   25f57:	mov    rbx,rax
   25f5a:	call   7fd0 <__errno_location@plt>
   25f5f:	mov    rsi,rsp
   25f62:	mov    r14,rax
   25f65:	mov    DWORD PTR [rax],0x0
   25f6b:	mov    rdi,rbx
   25f6e:	call   8350 <strtod@plt>
   25f73:	movsd  QWORD PTR [r15],xmm0
   25f78:	mov    ecx,DWORD PTR [r14]
   25f7b:	test   ecx,ecx
   25f7d:	jne    25f8d <g_str_equal@plt+0x1dbd5>
   25f7f:	mov    rax,QWORD PTR [rsp]
   25f83:	cmp    rax,rbx
   25f86:	je     25f8d <g_str_equal@plt+0x1dbd5>
   25f88:	cmp    BYTE PTR [rax],0x0
   25f8b:	je     25ff0 <g_str_equal@plt+0x1dc38>
   25f8d:	xor    edx,edx
   25f8f:	mov    rsi,r13
   25f92:	mov    rdi,r12
   25f95:	call   252b0 <g_str_equal@plt+0x1cef8>
   25f9a:	mov    r9,rax
   25f9d:	lea    rax,[rip+0x4ac7]        # 2aa6b <_fini@@Base+0x17e7>
   25fa4:	sub    rsp,0x8
   25fa8:	lea    r8,[rip+0x8211]        # 2e1c0 <_fini@@Base+0x4f3c>
   25faf:	lea    rcx,[rip+0x856a]        # 2e520 <_fini@@Base+0x529c>
   25fb6:	lea    rsi,[rip+0x824b]        # 2e208 <_fini@@Base+0x4f84>
   25fbd:	push   rax
   25fbe:	mov    edx,0x240
   25fc3:	xor    eax,eax
   25fc5:	mov    rdi,rbp
   25fc8:	call   db00 <g_str_equal@plt+0x5748>
   25fcd:	pop    rax
   25fce:	pop    rdx
   25fcf:	mov    rax,QWORD PTR [rsp+0x8]
   25fd4:	xor    rax,QWORD PTR fs:0x28
   25fdd:	jne    26008 <g_str_equal@plt+0x1dc50>
   25fdf:	add    rsp,0x18
   25fe3:	pop    rbx
   25fe4:	pop    rbp
   25fe5:	pop    r12
   25fe7:	pop    r13
   25fe9:	pop    r14
   25feb:	pop    r15
   25fed:	ret    
   25fee:	xchg   ax,ax
   25ff0:	andpd  xmm0,XMMWORD PTR [rip+0x8858]        # 2e850 <_fini@@Base+0x55cc>
   25ff8:	movsd  xmm1,QWORD PTR [rip+0x8860]        # 2e860 <_fini@@Base+0x55dc>
   26000:	ucomisd xmm1,xmm0
   26004:	jb     25f8d <g_str_equal@plt+0x1dbd5>
   26006:	jmp    25fcf <g_str_equal@plt+0x1dc17>
   26008:	call   8050 <__stack_chk_fail@plt>
   2600d:	nop    DWORD PTR [rax]
   26010:	push   r13
   26012:	push   r12
   26014:	mov    r13,rdx
   26017:	push   rbp
   26018:	push   rbx
   26019:	mov    rdx,rcx
   2601c:	mov    rbp,rdi
   2601f:	mov    r12,rsi
   26022:	mov    rbx,rcx
   26025:	sub    rsp,0x8
   26029:	call   25810 <g_str_equal@plt+0x1d458>
   2602e:	test   rax,rax
   26031:	je     2606d <g_str_equal@plt+0x1dcb5>
   26033:	lea    rdi,[rip+0x7156]        # 2d190 <_fini@@Base+0x3f0c>
   2603a:	mov    ecx,0x3
   2603f:	mov    rsi,rax
   26042:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   26044:	seta   dl
   26047:	sbb    dl,0x0
   2604a:	test   dl,dl
   2604c:	je     26080 <g_str_equal@plt+0x1dcc8>
   2604e:	lea    rdi,[rip+0x4a1d]        # 2aa72 <_fini@@Base+0x17ee>
   26055:	mov    rsi,rax
   26058:	mov    ecx,0x4
   2605d:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   2605f:	seta   al
   26062:	sbb    al,0x0
   26064:	test   al,al
   26066:	jne    26090 <g_str_equal@plt+0x1dcd8>
   26068:	mov    BYTE PTR [r13+0x0],0x0
   2606d:	add    rsp,0x8
   26071:	pop    rbx
   26072:	pop    rbp
   26073:	pop    r12
   26075:	pop    r13
   26077:	ret    
   26078:	nop    DWORD PTR [rax+rax*1+0x0]
   26080:	mov    BYTE PTR [r13+0x0],0x1
   26085:	add    rsp,0x8
   26089:	pop    rbx
   2608a:	pop    rbp
   2608b:	pop    r12
   2608d:	pop    r13
   2608f:	ret    
   26090:	mov    rsi,r12
   26093:	mov    rdi,rbp
   26096:	xor    edx,edx
   26098:	call   252b0 <g_str_equal@plt+0x1cef8>
   2609d:	mov    r9,rax
   260a0:	lea    rax,[rip+0x49cf]        # 2aa76 <_fini@@Base+0x17f2>
   260a7:	sub    rsp,0x8
   260ab:	lea    r8,[rip+0x499d]        # 2aa4f <_fini@@Base+0x17cb>
   260b2:	lea    rcx,[rip+0x8437]        # 2e4f0 <_fini@@Base+0x526c>
   260b9:	lea    rsi,[rip+0x8148]        # 2e208 <_fini@@Base+0x4f84>
   260c0:	push   rax
   260c1:	mov    edx,0x1fa
   260c6:	mov    rdi,rbx
   260c9:	xor    eax,eax
   260cb:	call   db00 <g_str_equal@plt+0x5748>
   260d0:	pop    rax
   260d1:	pop    rdx
   260d2:	add    rsp,0x8
   260d6:	pop    rbx
   260d7:	pop    rbp
   260d8:	pop    r12
   260da:	pop    r13
   260dc:	ret    
   260dd:	nop    DWORD PTR [rax]
   260e0:	push   r13
   260e2:	push   r12
   260e4:	mov    r13,rdx
   260e7:	push   rbp
   260e8:	push   rbx
   260e9:	mov    rdx,rcx
   260ec:	mov    rbp,rdi
   260ef:	mov    r12,rsi
   260f2:	mov    rbx,rcx
   260f5:	sub    rsp,0x8
   260f9:	call   25810 <g_str_equal@plt+0x1d458>
   260fe:	test   rax,rax
   26101:	je     26116 <g_str_equal@plt+0x1dd5e>
   26103:	xor    edx,edx
   26105:	xor    esi,esi
   26107:	mov    rcx,r13
   2610a:	mov    rdi,rax
   2610d:	call   b070 <g_str_equal@plt+0x2cb8>
   26112:	test   eax,eax
   26114:	js     26128 <g_str_equal@plt+0x1dd70>
   26116:	add    rsp,0x8
   2611a:	pop    rbx
   2611b:	pop    rbp
   2611c:	pop    r12
   2611e:	pop    r13
   26120:	ret    
   26121:	nop    DWORD PTR [rax+0x0]
   26128:	mov    rsi,r12
   2612b:	mov    rdi,rbp
   2612e:	xor    edx,edx
   26130:	call   252b0 <g_str_equal@plt+0x1cef8>
   26135:	mov    r9,rax
   26138:	lea    rax,[rip+0x82c1]        # 2e400 <_fini@@Base+0x517c>
   2613f:	sub    rsp,0x8
   26143:	lea    r8,[rip+0x4905]        # 2aa4f <_fini@@Base+0x17cb>
   2614a:	lea    rcx,[rip+0x836f]        # 2e4c0 <_fini@@Base+0x523c>
   26151:	lea    rsi,[rip+0x80b0]        # 2e208 <_fini@@Base+0x4f84>
   26158:	push   rax
   26159:	mov    edx,0x1d2
   2615e:	mov    rdi,rbx
   26161:	xor    eax,eax
   26163:	call   db00 <g_str_equal@plt+0x5748>
   26168:	pop    rax
   26169:	pop    rdx
   2616a:	add    rsp,0x8
   2616e:	pop    rbx
   2616f:	pop    rbp
   26170:	pop    r12
   26172:	pop    r13
   26174:	ret    
   26175:	nop
   26176:	nop    WORD PTR cs:[rax+rax*1+0x0]
   26180:	push   r13
   26182:	push   r12
   26184:	mov    r13,rdx
   26187:	push   rbp
   26188:	push   rbx
   26189:	mov    rdx,rcx
   2618c:	mov    rbp,rdi
   2618f:	mov    r12,rsi
   26192:	mov    rbx,rcx
   26195:	sub    rsp,0x8
   26199:	call   25810 <g_str_equal@plt+0x1d458>
   2619e:	test   rax,rax
   261a1:	je     261b6 <g_str_equal@plt+0x1ddfe>
   261a3:	xor    edx,edx
   261a5:	xor    esi,esi
   261a7:	mov    rcx,r13
   261aa:	mov    rdi,rax
   261ad:	call   afb0 <g_str_equal@plt+0x2bf8>
   261b2:	test   eax,eax
   261b4:	js     261c8 <g_str_equal@plt+0x1de10>
   261b6:	add    rsp,0x8
   261ba:	pop    rbx
   261bb:	pop    rbp
   261bc:	pop    r12
   261be:	pop    r13
   261c0:	ret    
   261c1:	nop    DWORD PTR [rax+0x0]
   261c8:	mov    rsi,r12
   261cb:	mov    rdi,rbp
   261ce:	xor    edx,edx
   261d0:	call   252b0 <g_str_equal@plt+0x1cef8>
   261d5:	mov    r9,rax
   261d8:	lea    rax,[rip+0x8221]        # 2e400 <_fini@@Base+0x517c>
   261df:	sub    rsp,0x8
   261e3:	lea    r8,[rip+0x4865]        # 2aa4f <_fini@@Base+0x17cb>
   261ea:	lea    rcx,[rip+0x82af]        # 2e4a0 <_fini@@Base+0x521c>
   261f1:	lea    rsi,[rip+0x8010]        # 2e208 <_fini@@Base+0x4f84>
   261f8:	push   rax
   261f9:	mov    edx,0x1a2
   261fe:	mov    rdi,rbx
   26201:	xor    eax,eax
   26203:	call   db00 <g_str_equal@plt+0x5748>
   26208:	pop    rax
   26209:	pop    rdx
   2620a:	add    rsp,0x8
   2620e:	pop    rbx
   2620f:	pop    rbp
   26210:	pop    r12
   26212:	pop    r13
   26214:	ret    
   26215:	nop
   26216:	nop    WORD PTR cs:[rax+rax*1+0x0]
   26220:	sub    rsp,0x8
   26224:	call   24ea0 <g_str_equal@plt+0x1cae8>
   26229:	lea    rdx,[rip+0xfffffffffffff930]        # 25b60 <g_str_equal@plt+0x1d7a8>
   26230:	lea    rcx,[rip+0xfffffffffffff839]        # 25a70 <g_str_equal@plt+0x1d6b8>
   26237:	lea    rsi,[rip+0xfffffffffffff782]        # 259c0 <g_str_equal@plt+0x1d608>
   2623e:	mov    QWORD PTR [rax+0x48],rdx
   26242:	lea    rdx,[rip+0xfffffffffffff6b7]        # 25900 <g_str_equal@plt+0x1d548>
   26249:	mov    QWORD PTR [rax+0x50],rcx
   2624d:	mov    QWORD PTR [rax+0x60],rsi
   26251:	lea    rcx,[rip+0xfffffffffffff508]        # 25760 <g_str_equal@plt+0x1d3a8>
   26258:	lea    rsi,[rip+0xfffffffffffff311]        # 25570 <g_str_equal@plt+0x1d1b8>
   2625f:	mov    QWORD PTR [rax+0x68],rdx
   26263:	lea    rdx,[rip+0xfffffffffffff396]        # 25600 <g_str_equal@plt+0x1d248>
   2626a:	mov    QWORD PTR [rax+0x70],rcx
   2626e:	mov    QWORD PTR [rax+0x78],rsi
   26272:	mov    QWORD PTR [rax+0x80],rdx
   26279:	add    rsp,0x8
   2627d:	ret    
   2627e:	xchg   ax,ax
   26280:	sub    rsp,0x8
   26284:	call   24ea0 <g_str_equal@plt+0x1cae8>
   26289:	lea    rdx,[rip+0xfffffffffffffef0]        # 26180 <g_str_equal@plt+0x1ddc8>
   26290:	lea    rcx,[rip+0xfffffffffffffe49]        # 260e0 <g_str_equal@plt+0x1dd28>
   26297:	lea    rsi,[rip+0xfffffffffffffd72]        # 26010 <g_str_equal@plt+0x1dc58>
   2629e:	mov    BYTE PTR [rax+0xb0],0x1
   262a5:	mov    QWORD PTR [rax+0x48],rdx
   262a9:	mov    QWORD PTR [rax+0x50],rcx
   262ad:	lea    rdx,[rip+0xfffffffffffff62c]        # 258e0 <g_str_equal@plt+0x1d528>
   262b4:	lea    rcx,[rip+0xfffffffffffffc65]        # 25f20 <g_str_equal@plt+0x1db68>
   262bb:	mov    QWORD PTR [rax+0x60],rsi
   262bf:	lea    rsi,[rip+0xfffffffffffff2aa]        # 25570 <g_str_equal@plt+0x1d1b8>
   262c6:	mov    QWORD PTR [rax+0x68],rdx
   262ca:	lea    rdx,[rip+0xfffffffffffff32f]        # 25600 <g_str_equal@plt+0x1d248>
   262d1:	mov    QWORD PTR [rax+0x70],rcx
   262d5:	lea    rcx,[rip+0xfffffffffffffbb4]        # 25e90 <g_str_equal@plt+0x1dad8>
   262dc:	mov    QWORD PTR [rax+0x78],rsi
   262e0:	mov    QWORD PTR [rax+0x80],rdx
   262e7:	mov    QWORD PTR [rax+0x58],rcx
   262eb:	add    rsp,0x8
   262ef:	ret    
   262f0:	push   rbp
   262f1:	push   rbx
   262f2:	mov    rbp,rdx
   262f5:	sub    rsp,0x18
   262f9:	cmp    BYTE PTR [rdi],0x7b
   262fc:	je     26340 <g_str_equal@plt+0x1df88>
   262fe:	call   28640 <g_str_equal@plt+0x20288>
   26303:	test   rax,rax
   26306:	mov    rbx,rax
   26309:	je     26420 <g_str_equal@plt+0x1e068>
   2630f:	mov    rdi,rax
   26312:	call   26280 <g_str_equal@plt+0x1dec8>
   26317:	mov    rdx,QWORD PTR [rbx+0x8]
   2631b:	test   rdx,rdx
   2631e:	je     26429 <g_str_equal@plt+0x1e071>
   26324:	sub    rdx,0x1
   26328:	test   rdx,rdx
   2632b:	mov    QWORD PTR [rbx+0x8],rdx
   2632f:	je     263d0 <g_str_equal@plt+0x1e018>
   26335:	add    rsp,0x18
   26339:	pop    rbx
   2633a:	pop    rbp
   2633b:	ret    
   2633c:	nop    DWORD PTR [rax+0x0]
   26340:	mov    rsi,rdx
   26343:	call   26b30 <g_str_equal@plt+0x1e778>
   26348:	test   rax,rax
   2634b:	mov    rbx,rax
   2634e:	je     263f0 <g_str_equal@plt+0x1e038>
   26354:	mov    eax,DWORD PTR [rax]
   26356:	lea    edx,[rax-0x1]
   26359:	cmp    edx,0x5
   2635c:	ja     2642e <g_str_equal@plt+0x1e076>
   26362:	cmp    eax,0x4
   26365:	jne    26433 <g_str_equal@plt+0x1e07b>
   2636b:	mov    rdi,rbx
   2636e:	call   24ea0 <g_str_equal@plt+0x1cae8>
   26373:	lea    rcx,[rip+0xfffffffffffff7e6]        # 25b60 <g_str_equal@plt+0x1d7a8>
   2637a:	mov    QWORD PTR [rax+0x48],rcx
   2637e:	lea    rcx,[rip+0xfffffffffffff6eb]        # 25a70 <g_str_equal@plt+0x1d6b8>
   26385:	mov    QWORD PTR [rax+0x50],rcx
   26389:	lea    rcx,[rip+0xfffffffffffff630]        # 259c0 <g_str_equal@plt+0x1d608>
   26390:	mov    QWORD PTR [rax+0x60],rcx
   26394:	lea    rcx,[rip+0xfffffffffffff565]        # 25900 <g_str_equal@plt+0x1d548>
   2639b:	mov    QWORD PTR [rax+0x68],rcx
   2639f:	lea    rcx,[rip+0xfffffffffffff3ba]        # 25760 <g_str_equal@plt+0x1d3a8>
   263a6:	mov    QWORD PTR [rax+0x70],rcx
   263aa:	lea    rcx,[rip+0xfffffffffffff1bf]        # 25570 <g_str_equal@plt+0x1d1b8>
   263b1:	mov    QWORD PTR [rax+0x78],rcx
   263b5:	lea    rcx,[rip+0xfffffffffffff244]        # 25600 <g_str_equal@plt+0x1d248>
   263bc:	mov    QWORD PTR [rax+0x80],rcx
   263c3:	jmp    26317 <g_str_equal@plt+0x1df5f>
   263c8:	nop    DWORD PTR [rax+rax*1+0x0]
   263d0:	mov    rdi,rbx
   263d3:	mov    QWORD PTR [rsp+0x8],rax
   263d8:	call   12960 <g_str_equal@plt+0xa5a8>
   263dd:	mov    rax,QWORD PTR [rsp+0x8]
   263e2:	add    rsp,0x18
   263e6:	pop    rbx
   263e7:	pop    rbp
   263e8:	ret    
   263e9:	nop    DWORD PTR [rax+0x0]
   263f0:	test   rbp,rbp
   263f3:	je     26420 <g_str_equal@plt+0x1e068>
   263f5:	cmp    QWORD PTR [rbp+0x0],0x0
   263fa:	jne    26420 <g_str_equal@plt+0x1e068>
   263fc:	lea    r8,[rip+0x803b]        # 2e43e <_fini@@Base+0x51ba>
   26403:	lea    rcx,[rip+0x8076]        # 2e480 <_fini@@Base+0x51fc>
   2640a:	lea    rsi,[rip+0x7df7]        # 2e208 <_fini@@Base+0x4f84>
   26411:	mov    edx,0x2da
   26416:	mov    rdi,rbp
   26419:	xor    eax,eax
   2641b:	call   db00 <g_str_equal@plt+0x5748>
   26420:	add    rsp,0x18
   26424:	xor    eax,eax
   26426:	pop    rbx
   26427:	pop    rbp
   26428:	ret    
   26429:	call   855b <g_str_equal@plt+0x1a3>
   2642e:	call   24cb0 <g_str_equal@plt+0x1c8f8>
   26433:	lea    rcx,[rip+0x8026]        # 2e460 <_fini@@Base+0x51dc>
   2643a:	lea    rsi,[rip+0x7dc7]        # 2e208 <_fini@@Base+0x4f84>
   26441:	lea    rdi,[rip+0x8007]        # 2e44f <_fini@@Base+0x51cb>
   26448:	mov    edx,0x2e0
   2644d:	call   7a70 <__assert_fail@plt>
   26452:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2645c:	nop    DWORD PTR [rax+0x0]
   26460:	push   rbx
   26461:	mov    rbx,rdi
   26464:	mov    rdi,rsi
   26467:	mov    rsi,QWORD PTR [rbx+0x40]
   2646b:	lea    rdx,[rbx+0x50]
   2646f:	call   27ec0 <g_str_equal@plt+0x1fb08>
   26474:	mov    QWORD PTR [rbx+0x48],rax
   26478:	pop    rbx
   26479:	ret    
   2647a:	nop    WORD PTR [rax+rax*1+0x0]
   26480:	push   r13
   26482:	push   r12
   26484:	mov    r13d,edx
   26487:	push   rbp
   26488:	push   rbx
   26489:	sub    rsp,0x48
   2648d:	mov    rax,QWORD PTR fs:0x28
   26496:	mov    QWORD PTR [rsp+0x38],rax
   2649b:	xor    eax,eax
   2649d:	mov    eax,DWORD PTR [rdi]
   2649f:	lea    edx,[rax-0x1]
   264a2:	cmp    edx,0x5
   264a5:	ja     268bb <g_str_equal@plt+0x1e503>
   264ab:	cmp    eax,0x6
   264ae:	mov    rbx,rsi
   264b1:	ja     26550 <g_str_equal@plt+0x1e198>
   264b7:	lea    rdx,[rip+0x8422]        # 2e8e0 <_fini@@Base+0x565c>
   264be:	mov    rbp,rdi
   264c1:	mov    r12d,ecx
   264c4:	movsxd rax,DWORD PTR [rdx+rax*4]
   264c8:	add    rax,rdx
   264cb:	jmp    rax
   264cd:	nop    DWORD PTR [rax]
   264d0:	lea    eax,[rcx+0x1]
   264d3:	mov    QWORD PTR [rsp+0x10],rsi
   264d8:	lea    rsi,[rip+0x83ed]        # 2e8cc <_fini@@Base+0x5648>
   264df:	mov    rdi,rbx
   264e2:	mov    DWORD PTR [rsp+0x8],0x0
   264ea:	mov    DWORD PTR [rsp+0x4],r13d
   264ef:	mov    DWORD PTR [rsp],eax
   264f2:	call   11c40 <g_str_equal@plt+0x9888>
   264f7:	lea    rsi,[rip+0x3c2]        # 268c0 <g_str_equal@plt+0x1e508>
   264fe:	mov    rdx,rsp
   26501:	mov    rdi,rbp
   26504:	call   22250 <g_str_equal@plt+0x19e98>
   26509:	test   r13d,r13d
   2650c:	jne    267c0 <g_str_equal@plt+0x1e408>
   26512:	lea    rsi,[rip+0x5a19]        # 2bf32 <_fini@@Base+0x2cae>
   26519:	mov    rdi,rbx
   2651c:	call   11c40 <g_str_equal@plt+0x9888>
   26521:	nop    DWORD PTR [rax+0x0]
   26528:	mov    rax,QWORD PTR [rsp+0x38]
   2652d:	xor    rax,QWORD PTR fs:0x28
   26536:	jne    268b6 <g_str_equal@plt+0x1e4fe>
   2653c:	add    rsp,0x48
   26540:	pop    rbx
   26541:	pop    rbp
   26542:	pop    r12
   26544:	pop    r13
   26546:	ret    
   26547:	nop    WORD PTR [rax+rax*1+0x0]
   26550:	lea    rsi,[rip+0x35fb]        # 29b52 <_fini@@Base+0x8ce>
   26557:	mov    rdi,rbx
   2655a:	call   11c40 <g_str_equal@plt+0x9888>
   2655f:	jmp    26528 <g_str_equal@plt+0x1e170>
   26561:	nop    DWORD PTR [rax+0x0]
   26568:	call   11d40 <g_str_equal@plt+0x9988>
   2656d:	lea    rsi,[rip+0x59e7]        # 2bf5b <_fini@@Base+0x2cd7>
   26574:	mov    r13,rax
   26577:	mov    rdi,rbx
   2657a:	call   11c40 <g_str_equal@plt+0x9888>
   2657f:	cmp    BYTE PTR [r13+0x0],0x0
   26584:	je     26650 <g_str_equal@plt+0x1e298>
   2658a:	mov    rbp,rsp
   2658d:	lea    r12,[rsp+0x20]
   26592:	jmp    265fb <g_str_equal@plt+0x1e243>
   26594:	nop    DWORD PTR [rax+0x0]
   26598:	cmp    eax,0x9
   2659b:	je     26760 <g_str_equal@plt+0x1e3a8>
   265a1:	cmp    eax,0xa
   265a4:	je     26748 <g_str_equal@plt+0x1e390>
   265aa:	cmp    eax,0x8
   265ad:	je     26730 <g_str_equal@plt+0x1e378>
   265b3:	test   eax,eax
   265b5:	js     26840 <g_str_equal@plt+0x1e488>
   265bb:	cmp    eax,0xffff
   265c0:	jg     26870 <g_str_equal@plt+0x1e4b8>
   265c6:	lea    edx,[rax-0x20]
   265c9:	cmp    edx,0x5e
   265cc:	ja     26845 <g_str_equal@plt+0x1e48d>
   265d2:	mov    BYTE PTR [rsp+0x20],al
   265d6:	mov    BYTE PTR [rsp+0x21],0x0
   265db:	mov    rsi,r12
   265de:	mov    rdi,rbx
   265e1:	call   11c40 <g_str_equal@plt+0x9888>
   265e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   265f0:	mov    r13,QWORD PTR [rsp]
   265f4:	cmp    BYTE PTR [r13+0x0],0x0
   265f9:	je     26650 <g_str_equal@plt+0x1e298>
   265fb:	mov    rdx,rbp
   265fe:	mov    esi,0x6
   26603:	mov    rdi,r13
   26606:	call   27f70 <g_str_equal@plt+0x1fbb8>
   2660b:	cmp    eax,0xc
   2660e:	je     26718 <g_str_equal@plt+0x1e360>
   26614:	jle    26598 <g_str_equal@plt+0x1e1e0>
   26616:	cmp    eax,0x22
   26619:	je     26790 <g_str_equal@plt+0x1e3d8>
   2661f:	cmp    eax,0x5c
   26622:	je     26778 <g_str_equal@plt+0x1e3c0>
   26628:	cmp    eax,0xd
   2662b:	jne    265b3 <g_str_equal@plt+0x1e1fb>
   2662d:	lea    rsi,[rip+0x827c]        # 2e8b0 <_fini@@Base+0x562c>
   26634:	mov    rdi,rbx
   26637:	call   11c40 <g_str_equal@plt+0x9888>
   2663c:	mov    r13,QWORD PTR [rsp]
   26640:	cmp    BYTE PTR [r13+0x0],0x0
   26645:	jne    265fb <g_str_equal@plt+0x1e243>
   26647:	nop    WORD PTR [rax+rax*1+0x0]
   26650:	lea    rsi,[rip+0x5904]        # 2bf5b <_fini@@Base+0x2cd7>
   26657:	mov    rdi,rbx
   2665a:	call   11c40 <g_str_equal@plt+0x9888>
   2665f:	jmp    26528 <g_str_equal@plt+0x1e170>
   26664:	nop    DWORD PTR [rax+0x0]
   26668:	call   11810 <g_str_equal@plt+0x9458>
   2666d:	mov    rdi,rbx
   26670:	mov    rbp,rax
   26673:	mov    rsi,rax
   26676:	call   11c40 <g_str_equal@plt+0x9888>
   2667b:	mov    rdi,rbp
   2667e:	call   7880 <g_free@plt>
   26683:	jmp    26528 <g_str_equal@plt+0x1e170>
   26688:	nop    DWORD PTR [rax+rax*1+0x0]
   26690:	lea    eax,[rcx+0x1]
   26693:	mov    QWORD PTR [rsp+0x10],rsi
   26698:	lea    rsi,[rip+0x8224]        # 2e8c3 <_fini@@Base+0x563f>
   2669f:	mov    rdi,rbx
   266a2:	mov    DWORD PTR [rsp+0x8],0x0
   266aa:	mov    DWORD PTR [rsp+0x4],r13d
   266af:	mov    DWORD PTR [rsp],eax
   266b2:	call   11c40 <g_str_equal@plt+0x9888>
   266b7:	lea    rsi,[rip+0x2a2]        # 26960 <g_str_equal@plt+0x1e5a8>
   266be:	mov    rdx,rsp
   266c1:	mov    rdi,rbp
   266c4:	call   124b0 <g_str_equal@plt+0xa0f8>
   266c9:	test   r13d,r13d
   266cc:	jne    26800 <g_str_equal@plt+0x1e448>
   266d2:	lea    rsi,[rip+0x81f1]        # 2e8ca <_fini@@Base+0x5646>
   266d9:	mov    rdi,rbx
   266dc:	call   11c40 <g_str_equal@plt+0x9888>
   266e1:	jmp    26528 <g_str_equal@plt+0x1e170>
   266e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   266f0:	call   128a0 <g_str_equal@plt+0xa4e8>
   266f5:	test   al,al
   266f7:	je     267a8 <g_str_equal@plt+0x1e3f0>
   266fd:	lea    rsi,[rip+0x81ca]        # 2e8ce <_fini@@Base+0x564a>
   26704:	mov    rdi,rbx
   26707:	call   11c40 <g_str_equal@plt+0x9888>
   2670c:	jmp    26528 <g_str_equal@plt+0x1e170>
   26711:	nop    DWORD PTR [rax+0x0]
   26718:	lea    rsi,[rip+0x818b]        # 2e8aa <_fini@@Base+0x5626>
   2671f:	mov    rdi,rbx
   26722:	call   11c40 <g_str_equal@plt+0x9888>
   26727:	jmp    265f0 <g_str_equal@plt+0x1e238>
   2672c:	nop    DWORD PTR [rax+0x0]
   26730:	lea    rsi,[rip+0x8170]        # 2e8a7 <_fini@@Base+0x5623>
   26737:	mov    rdi,rbx
   2673a:	call   11c40 <g_str_equal@plt+0x9888>
   2673f:	jmp    265f0 <g_str_equal@plt+0x1e238>
   26744:	nop    DWORD PTR [rax+0x0]
   26748:	lea    rsi,[rip+0x815e]        # 2e8ad <_fini@@Base+0x5629>
   2674f:	mov    rdi,rbx
   26752:	call   11c40 <g_str_equal@plt+0x9888>
   26757:	jmp    265f0 <g_str_equal@plt+0x1e238>
   2675c:	nop    DWORD PTR [rax+0x0]
   26760:	lea    rsi,[rip+0x814c]        # 2e8b3 <_fini@@Base+0x562f>
   26767:	mov    rdi,rbx
   2676a:	call   11c40 <g_str_equal@plt+0x9888>
   2676f:	jmp    265f0 <g_str_equal@plt+0x1e238>
   26774:	nop    DWORD PTR [rax+0x0]
   26778:	lea    rsi,[rip+0x8125]        # 2e8a4 <_fini@@Base+0x5620>
   2677f:	mov    rdi,rbx
   26782:	call   11c40 <g_str_equal@plt+0x9888>
   26787:	jmp    265f0 <g_str_equal@plt+0x1e238>
   2678c:	nop    DWORD PTR [rax+0x0]
   26790:	lea    rsi,[rip+0x810a]        # 2e8a1 <_fini@@Base+0x561d>
   26797:	mov    rdi,rbx
   2679a:	call   11c40 <g_str_equal@plt+0x9888>
   2679f:	jmp    265f0 <g_str_equal@plt+0x1e238>
   267a4:	nop    DWORD PTR [rax+0x0]
   267a8:	lea    rsi,[rip+0x8124]        # 2e8d3 <_fini@@Base+0x564f>
   267af:	mov    rdi,rbx
   267b2:	call   11c40 <g_str_equal@plt+0x9888>
   267b7:	jmp    26528 <g_str_equal@plt+0x1e170>
   267bc:	nop    DWORD PTR [rax+0x0]
   267c0:	lea    rsi,[rip+0x575a]        # 2bf21 <_fini@@Base+0x2c9d>
   267c7:	mov    rdi,rbx
   267ca:	call   11c40 <g_str_equal@plt+0x9888>
   267cf:	test   r12d,r12d
   267d2:	jle    26512 <g_str_equal@plt+0x1e15a>
   267d8:	lea    r13,[rip+0x80e6]        # 2e8c5 <_fini@@Base+0x5641>
   267df:	xor    ebp,ebp
   267e1:	nop    DWORD PTR [rax+0x0]
   267e8:	mov    rsi,r13
   267eb:	mov    rdi,rbx
   267ee:	add    ebp,0x1
   267f1:	call   11c40 <g_str_equal@plt+0x9888>
   267f6:	cmp    r12d,ebp
   267f9:	jne    267e8 <g_str_equal@plt+0x1e430>
   267fb:	jmp    26512 <g_str_equal@plt+0x1e15a>
   26800:	lea    rsi,[rip+0x571a]        # 2bf21 <_fini@@Base+0x2c9d>
   26807:	mov    rdi,rbx
   2680a:	call   11c40 <g_str_equal@plt+0x9888>
   2680f:	test   r12d,r12d
   26812:	jle    266d2 <g_str_equal@plt+0x1e31a>
   26818:	lea    r13,[rip+0x80a6]        # 2e8c5 <_fini@@Base+0x5641>
   2681f:	xor    ebp,ebp
   26821:	nop    DWORD PTR [rax+0x0]
   26828:	mov    rsi,r13
   2682b:	mov    rdi,rbx
   2682e:	add    ebp,0x1
   26831:	call   11c40 <g_str_equal@plt+0x9888>
   26836:	cmp    r12d,ebp
   26839:	jne    26828 <g_str_equal@plt+0x1e470>
   2683b:	jmp    266d2 <g_str_equal@plt+0x1e31a>
   26840:	mov    eax,0xfffd
   26845:	lea    r8,[rip+0x8070]        # 2e8bc <_fini@@Base+0x5638>
   2684c:	mov    r9d,eax
   2684f:	mov    ecx,0x10
   26854:	mov    edx,0x1
   26859:	mov    esi,0x10
   2685e:	mov    rdi,r12
   26861:	xor    eax,eax
   26863:	call   81b0 <__snprintf_chk@plt>
   26868:	jmp    265db <g_str_equal@plt+0x1e223>
   2686d:	nop    DWORD PTR [rax]
   26870:	lea    edx,[rax-0x10000]
   26876:	and    eax,0x3ff
   2687b:	sub    rsp,0x8
   2687f:	add    eax,0xdc00
   26884:	lea    r8,[rip+0x802b]        # 2e8b6 <_fini@@Base+0x5632>
   2688b:	mov    ecx,0x10
   26890:	sar    edx,0xa
   26893:	push   rax
   26894:	mov    esi,0x10
   26899:	lea    r9d,[rdx+0xd800]
   268a0:	mov    rdi,r12
   268a3:	mov    edx,0x1
   268a8:	xor    eax,eax
   268aa:	call   81b0 <__snprintf_chk@plt>
   268af:	pop    rax
   268b0:	pop    rdx
   268b1:	jmp    265db <g_str_equal@plt+0x1e223>
   268b6:	call   8050 <__stack_chk_fail@plt>
   268bb:	call   857e <g_str_equal@plt+0x1c6>
   268c0:	push   r13
   268c2:	push   r12
   268c4:	mov    r12,rdi
   268c7:	push   rbp
   268c8:	push   rbx
   268c9:	mov    rbx,rsi
   268cc:	sub    rsp,0x8
   268d0:	mov    eax,DWORD PTR [rsi+0x8]
   268d3:	mov    edx,DWORD PTR [rsi+0x4]
   268d6:	test   eax,eax
   268d8:	je     268fa <g_str_equal@plt+0x1e542>
   268da:	lea    rax,[rip+0x7ff8]        # 2e8d9 <_fini@@Base+0x5655>
   268e1:	lea    rsi,[rip+0x85c7]        # 2eeaf <_fini@@Base+0x5c2b>
   268e8:	mov    rdi,QWORD PTR [rbx+0x10]
   268ec:	test   edx,edx
   268ee:	cmove  rsi,rax
   268f2:	call   11c40 <g_str_equal@plt+0x9888>
   268f7:	mov    edx,DWORD PTR [rbx+0x4]
   268fa:	test   edx,edx
   268fc:	mov    rdi,QWORD PTR [rbx+0x10]
   26900:	jne    26920 <g_str_equal@plt+0x1e568>
   26902:	mov    ecx,DWORD PTR [rbx]
   26904:	mov    rsi,rdi
   26907:	mov    rdi,r12
   2690a:	call   26480 <g_str_equal@plt+0x1e0c8>
   2690f:	add    DWORD PTR [rbx+0x8],0x1
   26913:	add    rsp,0x8
   26917:	pop    rbx
   26918:	pop    rbp
   26919:	pop    r12
   2691b:	pop    r13
   2691d:	ret    
   2691e:	xchg   ax,ax
   26920:	lea    rsi,[rip+0x55fa]        # 2bf21 <_fini@@Base+0x2c9d>
   26927:	xor    ebp,ebp
   26929:	lea    r13,[rip+0x7f95]        # 2e8c5 <_fini@@Base+0x5641>
   26930:	call   11c40 <g_str_equal@plt+0x9888>
   26935:	mov    ecx,DWORD PTR [rbx]
   26937:	test   ecx,ecx
   26939:	jle    26955 <g_str_equal@plt+0x1e59d>
   2693b:	nop    DWORD PTR [rax+rax*1+0x0]
   26940:	mov    rdi,QWORD PTR [rbx+0x10]
   26944:	mov    rsi,r13
   26947:	add    ebp,0x1
   2694a:	call   11c40 <g_str_equal@plt+0x9888>
   2694f:	mov    ecx,DWORD PTR [rbx]
   26951:	cmp    ecx,ebp
   26953:	jg     26940 <g_str_equal@plt+0x1e588>
   26955:	mov    edx,DWORD PTR [rbx+0x4]
   26958:	mov    rdi,QWORD PTR [rbx+0x10]
   2695c:	jmp    26904 <g_str_equal@plt+0x1e54c>
   2695e:	xchg   ax,ax
   26960:	push   r14
   26962:	push   r13
   26964:	mov    r14,rdi
   26967:	push   r12
   26969:	push   rbp
   2696a:	mov    r12,rsi
   2696d:	push   rbx
   2696e:	mov    rbx,rdx
   26971:	mov    eax,DWORD PTR [rdx+0x4]
   26974:	mov    edx,DWORD PTR [rdx+0x8]
   26977:	test   edx,edx
   26979:	je     2699b <g_str_equal@plt+0x1e5e3>
   2697b:	test   eax,eax
   2697d:	lea    rsi,[rip+0x852b]        # 2eeaf <_fini@@Base+0x5c2b>
   26984:	lea    rax,[rip+0x7f4e]        # 2e8d9 <_fini@@Base+0x5655>
   2698b:	mov    rdi,QWORD PTR [rbx+0x10]
   2698f:	cmove  rsi,rax
   26993:	call   11c40 <g_str_equal@plt+0x9888>
   26998:	mov    eax,DWORD PTR [rbx+0x4]
   2699b:	test   eax,eax
   2699d:	jne    26a30 <g_str_equal@plt+0x1e678>
   269a3:	mov    rdi,r14
   269a6:	call   11c10 <g_str_equal@plt+0x9858>
   269ab:	test   rax,rax
   269ae:	mov    rbp,rax
   269b1:	mov    ecx,DWORD PTR [rbx]
   269b3:	mov    edx,DWORD PTR [rbx+0x4]
   269b6:	mov    rsi,QWORD PTR [rbx+0x10]
   269ba:	je     26a20 <g_str_equal@plt+0x1e668>
   269bc:	mov    rdi,rax
   269bf:	call   26480 <g_str_equal@plt+0x1e0c8>
   269c4:	mov    rax,QWORD PTR [rbp+0x8]
   269c8:	test   rax,rax
   269cb:	je     26a70 <g_str_equal@plt+0x1e6b8>
   269d1:	sub    rax,0x1
   269d5:	test   rax,rax
   269d8:	mov    QWORD PTR [rbp+0x8],rax
   269dc:	je     26a10 <g_str_equal@plt+0x1e658>
   269de:	mov    rdi,QWORD PTR [rbx+0x10]
   269e2:	lea    rsi,[rip+0x3c92]        # 2a67b <_fini@@Base+0x13f7>
   269e9:	call   11c40 <g_str_equal@plt+0x9888>
   269ee:	mov    edx,DWORD PTR [rbx+0x4]
   269f1:	mov    rsi,QWORD PTR [rbx+0x10]
   269f5:	mov    rdi,r12
   269f8:	mov    ecx,DWORD PTR [rbx]
   269fa:	call   26480 <g_str_equal@plt+0x1e0c8>
   269ff:	add    DWORD PTR [rbx+0x8],0x1
   26a03:	pop    rbx
   26a04:	pop    rbp
   26a05:	pop    r12
   26a07:	pop    r13
   26a09:	pop    r14
   26a0b:	ret    
   26a0c:	nop    DWORD PTR [rax+0x0]
   26a10:	mov    rdi,rbp
   26a13:	call   12960 <g_str_equal@plt+0xa5a8>
   26a18:	jmp    269de <g_str_equal@plt+0x1e626>
   26a1a:	nop    WORD PTR [rax+rax*1+0x0]
   26a20:	xor    edi,edi
   26a22:	call   26480 <g_str_equal@plt+0x1e0c8>
   26a27:	jmp    269de <g_str_equal@plt+0x1e626>
   26a29:	nop    DWORD PTR [rax+0x0]
   26a30:	mov    rdi,QWORD PTR [rbx+0x10]
   26a34:	lea    rsi,[rip+0x54e6]        # 2bf21 <_fini@@Base+0x2c9d>
   26a3b:	call   11c40 <g_str_equal@plt+0x9888>
   26a40:	mov    eax,DWORD PTR [rbx]
   26a42:	test   eax,eax
   26a44:	jle    269a3 <g_str_equal@plt+0x1e5eb>
   26a4a:	lea    r13,[rip+0x7e74]        # 2e8c5 <_fini@@Base+0x5641>
   26a51:	xor    ebp,ebp
   26a53:	nop    DWORD PTR [rax+rax*1+0x0]
   26a58:	mov    rdi,QWORD PTR [rbx+0x10]
   26a5c:	mov    rsi,r13
   26a5f:	add    ebp,0x1
   26a62:	call   11c40 <g_str_equal@plt+0x9888>
   26a67:	cmp    DWORD PTR [rbx],ebp
   26a69:	jg     26a58 <g_str_equal@plt+0x1e6a0>
   26a6b:	jmp    269a3 <g_str_equal@plt+0x1e5eb>
   26a70:	lea    rcx,[rip+0x7e89]        # 2e900 <_fini@@Base+0x567c>
   26a77:	lea    rsi,[rip+0x3e1a]        # 2a898 <_fini@@Base+0x1614>
   26a7e:	lea    rdi,[rip+0x4f0c]        # 2b991 <_fini@@Base+0x270d>
   26a85:	mov    edx,0x62
   26a8a:	call   7a70 <__assert_fail@plt>
   26a8f:	nop
   26a90:	push   r12
   26a92:	push   rbp
   26a93:	mov    ecx,0xb
   26a98:	push   rbx
   26a99:	mov    rbp,rdi
   26a9c:	mov    r12,rdx
   26a9f:	sub    rsp,0x60
   26aa3:	mov    rax,QWORD PTR fs:0x28
   26aac:	mov    QWORD PTR [rsp+0x58],rax
   26ab1:	xor    eax,eax
   26ab3:	mov    rdi,rsp
   26ab6:	mov    rbx,rsp
   26ab9:	rep stos QWORD PTR es:[rdi],rax
   26abc:	mov    QWORD PTR [rsp+0x40],rsi
   26ac1:	lea    rsi,[rip+0xfffffffffffff998]        # 26460 <g_str_equal@plt+0x1e0a8>
   26ac8:	mov    rdi,rbx
   26acb:	call   26f10 <g_str_equal@plt+0x1eb58>
   26ad0:	mov    rdi,rbp
   26ad3:	call   7cd0 <strlen@plt>
   26ad8:	mov    rsi,rbp
   26adb:	mov    rdx,rax
   26ade:	mov    rdi,rbx
   26ae1:	call   26f50 <g_str_equal@plt+0x1eb98>
   26ae6:	mov    rdi,rbx
   26ae9:	call   26f60 <g_str_equal@plt+0x1eba8>
   26aee:	mov    rdi,rbx
   26af1:	call   26f70 <g_str_equal@plt+0x1ebb8>
   26af6:	mov    rsi,QWORD PTR [rsp+0x50]
   26afb:	mov    rdi,r12
   26afe:	call   df30 <g_str_equal@plt+0x5b78>
   26b03:	mov    rdx,QWORD PTR [rsp+0x58]
   26b08:	xor    rdx,QWORD PTR fs:0x28
   26b11:	mov    rax,QWORD PTR [rsp+0x48]
   26b16:	jne    26b21 <g_str_equal@plt+0x1e769>
   26b18:	add    rsp,0x60
   26b1c:	pop    rbx
   26b1d:	pop    rbp
   26b1e:	pop    r12
   26b20:	ret    
   26b21:	call   8050 <__stack_chk_fail@plt>
   26b26:	nop    WORD PTR cs:[rax+rax*1+0x0]
   26b30:	mov    rdx,rsi
   26b33:	xor    esi,esi
   26b35:	jmp    26a90 <g_str_equal@plt+0x1e6d8>
   26b3a:	nop    WORD PTR [rax+rax*1+0x0]
   26b40:	sub    rsp,0xd8
   26b47:	test   al,al
   26b49:	mov    QWORD PTR [rsp+0x28],rsi
   26b4e:	mov    QWORD PTR [rsp+0x30],rdx
   26b53:	mov    QWORD PTR [rsp+0x38],rcx
   26b58:	mov    QWORD PTR [rsp+0x40],r8
   26b5d:	mov    QWORD PTR [rsp+0x48],r9
   26b62:	je     26b9b <g_str_equal@plt+0x1e7e3>
   26b64:	movaps XMMWORD PTR [rsp+0x50],xmm0
   26b69:	movaps XMMWORD PTR [rsp+0x60],xmm1
   26b6e:	movaps XMMWORD PTR [rsp+0x70],xmm2
   26b73:	movaps XMMWORD PTR [rsp+0x80],xmm3
   26b7b:	movaps XMMWORD PTR [rsp+0x90],xmm4
   26b83:	movaps XMMWORD PTR [rsp+0xa0],xmm5
   26b8b:	movaps XMMWORD PTR [rsp+0xb0],xmm6
   26b93:	movaps XMMWORD PTR [rsp+0xc0],xmm7
   26b9b:	mov    rax,QWORD PTR fs:0x28
   26ba4:	mov    QWORD PTR [rsp+0x18],rax
   26ba9:	xor    eax,eax
   26bab:	lea    rax,[rsp+0xe0]
   26bb3:	lea    rdx,[rip+0x21a146]        # 240d00 <stdout@@GLIBC_2.2.5+0x1058>
   26bba:	mov    rsi,rsp
   26bbd:	mov    QWORD PTR [rsp+0x8],rax
   26bc2:	lea    rax,[rsp+0x20]
   26bc7:	mov    DWORD PTR [rsp],0x8
   26bce:	mov    DWORD PTR [rsp+0x4],0x30
   26bd6:	mov    QWORD PTR [rsp+0x10],rax
   26bdb:	call   26a90 <g_str_equal@plt+0x1e6d8>
   26be0:	mov    rcx,QWORD PTR [rsp+0x18]
   26be5:	xor    rcx,QWORD PTR fs:0x28
   26bee:	jne    26bf8 <g_str_equal@plt+0x1e840>
   26bf0:	add    rsp,0xd8
   26bf7:	ret    
   26bf8:	call   8050 <__stack_chk_fail@plt>
   26bfd:	nop    DWORD PTR [rax]
   26c00:	sub    rsp,0xd8
   26c07:	test   al,al
   26c09:	mov    QWORD PTR [rsp+0x28],rsi
   26c0e:	mov    QWORD PTR [rsp+0x30],rdx
   26c13:	mov    QWORD PTR [rsp+0x38],rcx
   26c18:	mov    QWORD PTR [rsp+0x40],r8
   26c1d:	mov    QWORD PTR [rsp+0x48],r9
   26c22:	je     26c5b <g_str_equal@plt+0x1e8a3>
   26c24:	movaps XMMWORD PTR [rsp+0x50],xmm0
   26c29:	movaps XMMWORD PTR [rsp+0x60],xmm1
   26c2e:	movaps XMMWORD PTR [rsp+0x70],xmm2
   26c33:	movaps XMMWORD PTR [rsp+0x80],xmm3
   26c3b:	movaps XMMWORD PTR [rsp+0x90],xmm4
   26c43:	movaps XMMWORD PTR [rsp+0xa0],xmm5
   26c4b:	movaps XMMWORD PTR [rsp+0xb0],xmm6
   26c53:	movaps XMMWORD PTR [rsp+0xc0],xmm7
   26c5b:	mov    rax,QWORD PTR fs:0x28
   26c64:	mov    QWORD PTR [rsp+0x18],rax
   26c69:	xor    eax,eax
   26c6b:	lea    rax,[rsp+0xe0]
   26c73:	lea    rdx,[rip+0x21a086]        # 240d00 <stdout@@GLIBC_2.2.5+0x1058>
   26c7a:	mov    rsi,rsp
   26c7d:	mov    QWORD PTR [rsp+0x8],rax
   26c82:	lea    rax,[rsp+0x20]
   26c87:	mov    DWORD PTR [rsp],0x8
   26c8e:	mov    DWORD PTR [rsp+0x4],0x30
   26c96:	mov    QWORD PTR [rsp+0x10],rax
   26c9b:	call   26a90 <g_str_equal@plt+0x1e6d8>
   26ca0:	test   rax,rax
   26ca3:	je     26ccc <g_str_equal@plt+0x1e914>
   26ca5:	mov    edx,DWORD PTR [rax]
   26ca7:	lea    ecx,[rdx-0x1]
   26caa:	cmp    ecx,0x5
   26cad:	ja     26cf0 <g_str_equal@plt+0x1e938>
   26caf:	cmp    edx,0x4
   26cb2:	jne    26ccc <g_str_equal@plt+0x1e914>
   26cb4:	mov    rcx,QWORD PTR [rsp+0x18]
   26cb9:	xor    rcx,QWORD PTR fs:0x28
   26cc2:	jne    26ceb <g_str_equal@plt+0x1e933>
   26cc4:	add    rsp,0xd8
   26ccb:	ret    
   26ccc:	lea    rcx,[rip+0x7c5d]        # 2e930 <_fini@@Base+0x56ac>
   26cd3:	lea    rsi,[rip+0x7b8e]        # 2e868 <_fini@@Base+0x55e4>
   26cda:	lea    rdi,[rip+0x76ed]        # 2e3ce <_fini@@Base+0x514a>
   26ce1:	mov    edx,0x58
   26ce6:	call   7a70 <__assert_fail@plt>
   26ceb:	call   8050 <__stack_chk_fail@plt>
   26cf0:	call   857e <g_str_equal@plt+0x1c6>
   26cf5:	nop
   26cf6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   26d00:	push   rbp
   26d01:	push   rbx
   26d02:	mov    rbp,rdi
   26d05:	sub    rsp,0x8
   26d09:	call   11c30 <g_str_equal@plt+0x9878>
   26d0e:	mov    rdi,rbp
   26d11:	mov    rsi,rax
   26d14:	xor    ecx,ecx
   26d16:	xor    edx,edx
   26d18:	mov    rbx,rax
   26d1b:	call   26480 <g_str_equal@plt+0x1e0c8>
   26d20:	add    rsp,0x8
   26d24:	mov    rax,rbx
   26d27:	pop    rbx
   26d28:	pop    rbp
   26d29:	ret    
   26d2a:	nop    WORD PTR [rax+rax*1+0x0]
   26d30:	push   rbp
   26d31:	push   rbx
   26d32:	mov    rbp,rdi
   26d35:	sub    rsp,0x8
   26d39:	call   11c30 <g_str_equal@plt+0x9878>
   26d3e:	mov    rdi,rbp
   26d41:	mov    rsi,rax
   26d44:	xor    ecx,ecx
   26d46:	mov    edx,0x1
   26d4b:	mov    rbx,rax
   26d4e:	call   26480 <g_str_equal@plt+0x1e0c8>
   26d53:	add    rsp,0x8
   26d57:	mov    rax,rbx
   26d5a:	pop    rbx
   26d5b:	pop    rbp
   26d5c:	ret    
   26d5d:	nop    DWORD PTR [rax]
   26d60:	jmp    7880 <g_free@plt>
   26d65:	nop
   26d66:	nop    WORD PTR cs:[rax+rax*1+0x0]
   26d70:	mov    rax,QWORD PTR [rdi]
   26d73:	test   rax,rax
   26d76:	je     26da0 <g_str_equal@plt+0x1e9e8>
   26d78:	push   rbx
   26d79:	lea    rsi,[rip+0xffffffffffffffe0]        # 26d60 <g_str_equal@plt+0x1e9a8>
   26d80:	mov    rbx,rdi
   26d83:	xor    edx,edx
   26d85:	mov    rdi,rax
   26d88:	call   7f40 <g_queue_foreach@plt>
   26d8d:	mov    rdi,QWORD PTR [rbx]
   26d90:	call   7bd0 <g_queue_free@plt>
   26d95:	mov    QWORD PTR [rbx],0x0
   26d9c:	pop    rbx
   26d9d:	ret    
   26d9e:	xchg   ax,ax
   26da0:	repz ret 
   26da2:	nop    DWORD PTR [rax+0x0]
   26da6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   26db0:	push   r15
   26db2:	push   r14
   26db4:	lea    r15,[rdi-0x8]
   26db8:	push   r13
   26dba:	push   r12
   26dbc:	mov    r14,rsi
   26dbf:	push   rbp
   26dc0:	push   rbx
   26dc1:	mov    r12d,edx
   26dc4:	mov    rbx,rdi
   26dc7:	sub    rsp,0x18
   26dcb:	cmp    edx,0x65
   26dce:	je     26ef8 <g_str_equal@plt+0x1eb40>
   26dd4:	jbe    26ee0 <g_str_equal@plt+0x1eb28>
   26dda:	cmp    edx,0x66
   26ddd:	je     26e98 <g_str_equal@plt+0x1eae0>
   26de3:	cmp    edx,0x67
   26de6:	jne    26dec <g_str_equal@plt+0x1ea34>
   26de8:	sub    DWORD PTR [rdi+0x24],0x1
   26dec:	mov    rax,QWORD PTR [r14+0x8]
   26df0:	mov    DWORD PTR [rsp+0xc],r8d
   26df5:	mov    DWORD PTR [rsp+0x8],ecx
   26df9:	lea    rdi,[rax+0xd]
   26dfd:	call   7b50 <g_malloc@plt>
   26e02:	mov    r13,QWORD PTR [r14+0x8]
   26e06:	mov    rsi,QWORD PTR [r14]
   26e09:	lea    rdi,[rax+0xc]
   26e0d:	mov    DWORD PTR [rax],r12d
   26e10:	mov    rbp,rax
   26e13:	mov    rdx,r13
   26e16:	call   8330 <memcpy@plt>
   26e1b:	mov    ecx,DWORD PTR [rsp+0x8]
   26e1f:	mov    r8d,DWORD PTR [rsp+0xc]
   26e24:	mov    rsi,rbp
   26e27:	add    QWORD PTR [rbx+0x30],r13
   26e2b:	mov    rdi,QWORD PTR [rbx+0x28]
   26e2f:	mov    BYTE PTR [rbp+r13*1+0xc],0x0
   26e35:	mov    DWORD PTR [rbp+0x4],ecx
   26e38:	mov    DWORD PTR [rbp+0x8],r8d
   26e3c:	call   7950 <g_queue_push_tail@plt>
   26e41:	cmp    r12d,0x70
   26e45:	je     26ed0 <g_str_equal@plt+0x1eb18>
   26e4b:	mov    edx,DWORD PTR [rbx+0x20]
   26e4e:	test   edx,edx
   26e50:	js     26e60 <g_str_equal@plt+0x1eaa8>
   26e52:	mov    eax,DWORD PTR [rbx+0x24]
   26e55:	test   eax,eax
   26e57:	js     26e60 <g_str_equal@plt+0x1eaa8>
   26e59:	cmp    QWORD PTR [rbx+0x20],0x0
   26e5e:	jne    26ea8 <g_str_equal@plt+0x1eaf0>
   26e60:	mov    rbp,QWORD PTR [rbx+0x28]
   26e64:	mov    QWORD PTR [rbx+0x20],0x0
   26e6c:	call   82f0 <g_queue_new@plt>
   26e71:	mov    rdi,r15
   26e74:	mov    QWORD PTR [rbx+0x28],rax
   26e78:	mov    rsi,rbp
   26e7b:	call   QWORD PTR [rbx-0x8]
   26e7e:	mov    QWORD PTR [rbx+0x30],0x0
   26e86:	add    rsp,0x18
   26e8a:	pop    rbx
   26e8b:	pop    rbp
   26e8c:	pop    r12
   26e8e:	pop    r13
   26e90:	pop    r14
   26e92:	pop    r15
   26e94:	ret    
   26e95:	nop    DWORD PTR [rax]
   26e98:	add    DWORD PTR [rdi+0x24],0x1
   26e9c:	jmp    26dec <g_str_equal@plt+0x1ea34>
   26ea1:	nop    DWORD PTR [rax+0x0]
   26ea8:	cmp    QWORD PTR [rbx+0x30],0x4000000
   26eb0:	ja     26ed0 <g_str_equal@plt+0x1eb18>
   26eb2:	mov    rdi,QWORD PTR [rbx+0x28]
   26eb6:	call   80a0 <g_queue_get_length@plt>
   26ebb:	cmp    eax,0x200000
   26ec0:	ja     26ed0 <g_str_equal@plt+0x1eb18>
   26ec2:	mov    eax,DWORD PTR [rbx+0x20]
   26ec5:	add    eax,DWORD PTR [rbx+0x24]
   26ec8:	cmp    eax,0x400
   26ecd:	jbe    26e86 <g_str_equal@plt+0x1eace>
   26ecf:	nop
   26ed0:	lea    rdi,[rbx+0x28]
   26ed4:	call   26d70 <g_str_equal@plt+0x1e9b8>
   26ed9:	jmp    26e60 <g_str_equal@plt+0x1eaa8>
   26edb:	nop    DWORD PTR [rax+rax*1+0x0]
   26ee0:	cmp    edx,0x64
   26ee3:	jne    26dec <g_str_equal@plt+0x1ea34>
   26ee9:	add    DWORD PTR [rdi+0x20],0x1
   26eed:	jmp    26dec <g_str_equal@plt+0x1ea34>
   26ef2:	nop    WORD PTR [rax+rax*1+0x0]
   26ef8:	sub    DWORD PTR [rdi+0x20],0x1
   26efc:	jmp    26dec <g_str_equal@plt+0x1ea34>
   26f01:	nop    DWORD PTR [rax+rax*1+0x0]
   26f06:	nop    WORD PTR cs:[rax+rax*1+0x0]
   26f10:	push   rbx
   26f11:	mov    rbx,rdi
   26f14:	mov    QWORD PTR [rdi],rsi
   26f17:	mov    QWORD PTR [rdi+0x28],0x0
   26f1f:	call   82f0 <g_queue_new@plt>
   26f24:	mov    QWORD PTR [rbx+0x38],0x0
   26f2c:	mov    QWORD PTR [rbx+0x30],rax
   26f30:	lea    rdi,[rbx+0x8]
   26f34:	pop    rbx
   26f35:	lea    rsi,[rip+0xfffffffffffffe74]        # 26db0 <g_str_equal@plt+0x1e9f8>
   26f3c:	jmp    29150 <g_str_equal@plt+0x20d98>
   26f41:	nop    DWORD PTR [rax+rax*1+0x0]
   26f46:	nop    WORD PTR cs:[rax+rax*1+0x0]
   26f50:	add    rdi,0x8
   26f54:	jmp    29180 <g_str_equal@plt+0x20dc8>
   26f59:	nop    DWORD PTR [rax+0x0]
   26f60:	add    rdi,0x8
   26f64:	jmp    291e0 <g_str_equal@plt+0x20e28>
   26f69:	nop    DWORD PTR [rax+0x0]
   26f70:	push   rbx
   26f71:	mov    rbx,rdi
   26f74:	lea    rdi,[rdi+0x8]
   26f78:	call   29200 <g_str_equal@plt+0x20e48>
   26f7d:	lea    rdi,[rbx+0x30]
   26f81:	pop    rbx
   26f82:	jmp    26d70 <g_str_equal@plt+0x1e9b8>
   26f87:	nop    WORD PTR [rax+rax*1+0x0]
   26f90:	push   rbp
   26f91:	push   rbx
   26f92:	mov    rbx,rdi
   26f95:	sub    rsp,0x4e8
   26f9c:	test   al,al
   26f9e:	mov    QWORD PTR [rsp+0x448],rcx
   26fa6:	mov    QWORD PTR [rsp+0x450],r8
   26fae:	mov    QWORD PTR [rsp+0x458],r9
   26fb6:	je     26ff8 <g_str_equal@plt+0x1ec40>
   26fb8:	movaps XMMWORD PTR [rsp+0x460],xmm0
   26fc0:	movaps XMMWORD PTR [rsp+0x470],xmm1
   26fc8:	movaps XMMWORD PTR [rsp+0x480],xmm2
   26fd0:	movaps XMMWORD PTR [rsp+0x490],xmm3
   26fd8:	movaps XMMWORD PTR [rsp+0x4a0],xmm4
   26fe0:	movaps XMMWORD PTR [rsp+0x4b0],xmm5
   26fe8:	movaps XMMWORD PTR [rsp+0x4c0],xmm6
   26ff0:	movaps XMMWORD PTR [rsp+0x4d0],xmm7
   26ff8:	mov    rax,QWORD PTR fs:0x28
   27001:	mov    QWORD PTR [rsp+0x428],rax
   27009:	xor    eax,eax
   2700b:	lea    rax,[rsp+0x500]
   27013:	lea    rbp,[rsp+0x20]
   27018:	lea    r9,[rsp+0x8]
   2701d:	mov    r8,rdx
   27020:	mov    ecx,0x400
   27025:	mov    edx,0x1
   2702a:	mov    QWORD PTR [rsp+0x10],rax
   2702f:	lea    rax,[rsp+0x430]
   27037:	mov    rdi,rbp
   2703a:	mov    esi,0x400
   2703f:	mov    DWORD PTR [rsp+0x8],0x18
   27047:	mov    DWORD PTR [rsp+0xc],0x30
   2704f:	mov    QWORD PTR [rsp+0x18],rax
   27054:	call   7c20 <__vsnprintf_chk@plt>
   27059:	mov    rdi,QWORD PTR [rbx]
   2705c:	test   rdi,rdi
   2705f:	je     2706d <g_str_equal@plt+0x1ecb5>
   27061:	call   ded0 <g_str_equal@plt+0x5b18>
   27066:	mov    QWORD PTR [rbx],0x0
   2706d:	lea    r8,[rip+0x78d4]        # 2e948 <_fini@@Base+0x56c4>
   27074:	lea    rcx,[rip+0x7ca5]        # 2ed20 <_fini@@Base+0x5a9c>
   2707b:	lea    rsi,[rip+0x79ee]        # 2ea70 <_fini@@Base+0x57ec>
   27082:	xor    eax,eax
   27084:	mov    r9,rbp
   27087:	mov    edx,0x3f
   2708c:	mov    rdi,rbx
   2708f:	call   db00 <g_str_equal@plt+0x5748>
   27094:	mov    rax,QWORD PTR [rsp+0x428]
   2709c:	xor    rax,QWORD PTR fs:0x28
   270a5:	jne    270b1 <g_str_equal@plt+0x1ecf9>
   270a7:	add    rsp,0x4e8
   270ae:	pop    rbx
   270af:	pop    rbp
   270b0:	ret    
   270b1:	call   8050 <__stack_chk_fail@plt>
   270b6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   270c0:	push   rbx
   270c1:	mov    rbx,rdi
   270c4:	mov    rdi,QWORD PTR [rdi]
   270c7:	call   8120 <g_queue_is_empty@plt>
   270cc:	test   eax,eax
   270ce:	jne    270d9 <g_str_equal@plt+0x1ed21>
   270d0:	mov    rdi,QWORD PTR [rbx]
   270d3:	pop    rbx
   270d4:	jmp    80e0 <g_queue_peek_head@plt>
   270d9:	lea    rcx,[rip+0x7cf0]        # 2edd0 <_fini@@Base+0x5b4c>
   270e0:	lea    rsi,[rip+0x7989]        # 2ea70 <_fini@@Base+0x57ec>
   270e7:	lea    rdi,[rip+0x786f]        # 2e95d <_fini@@Base+0x56d9>
   270ee:	mov    edx,0xf3
   270f3:	call   7a70 <__assert_fail@plt>
   270f8:	nop    DWORD PTR [rax+rax*1+0x0]
   27100:	push   rbp
   27101:	push   rbx
   27102:	mov    rbx,rdi
   27105:	mov    rbp,rsi
   27108:	sub    rsp,0x8
   2710c:	mov    rdi,QWORD PTR [rdi]
   2710f:	call   7880 <g_free@plt>
   27114:	mov    rdi,QWORD PTR [rbp+0x0]
   27118:	call   8120 <g_queue_is_empty@plt>
   2711d:	test   eax,eax
   2711f:	jne    27134 <g_str_equal@plt+0x1ed7c>
   27121:	mov    rdi,QWORD PTR [rbp+0x0]
   27125:	call   8390 <g_queue_pop_head@plt>
   2712a:	mov    QWORD PTR [rbx],rax
   2712d:	add    rsp,0x8
   27131:	pop    rbx
   27132:	pop    rbp
   27133:	ret    
   27134:	lea    rcx,[rip+0x7c55]        # 2ed90 <_fini@@Base+0x5b0c>
   2713b:	lea    rsi,[rip+0x792e]        # 2ea70 <_fini@@Base+0x57ec>
   27142:	lea    rdi,[rip+0x7814]        # 2e95d <_fini@@Base+0x56d9>
   27149:	mov    edx,0xec
   2714e:	call   7a70 <__assert_fail@plt>
   27153:	nop    DWORD PTR [rax]
   27156:	nop    WORD PTR cs:[rax+rax*1+0x0]
   27160:	push   r15
   27162:	push   r14
   27164:	mov    r14,rsi
   27167:	push   r13
   27169:	push   r12
   2716b:	lea    r12,[rdi+0x10]
   2716f:	push   rbp
   27170:	push   rbx
   27171:	mov    rbp,rdi
   27174:	mov    rdi,r12
   27177:	mov    r13,rdx
   2717a:	sub    rsp,0x18
   2717e:	call   270c0 <g_str_equal@plt+0x1ed08>
   27183:	test   rax,rax
   27186:	je     272ce <g_str_equal@plt+0x1ef16>
   2718c:	mov    rsi,r13
   2718f:	mov    rdi,rbp
   27192:	mov    r15,rax
   27195:	call   27340 <g_str_equal@plt+0x1ef88>
   2719a:	test   rax,rax
   2719d:	mov    rbx,rax
   271a0:	je     272b0 <g_str_equal@plt+0x1eef8>
   271a6:	mov    eax,DWORD PTR [rax]
   271a8:	lea    edx,[rax-0x1]
   271ab:	cmp    edx,0x5
   271ae:	ja     2731c <g_str_equal@plt+0x1ef64>
   271b4:	cmp    eax,0x3
   271b7:	jne    272b0 <g_str_equal@plt+0x1eef8>
   271bd:	lea    rdi,[rbp+0x8]
   271c1:	mov    rsi,r12
   271c4:	call   27100 <g_str_equal@plt+0x1ed48>
   271c9:	test   rax,rax
   271cc:	mov    r12,rax
   271cf:	je     27304 <g_str_equal@plt+0x1ef4c>
   271d5:	cmp    DWORD PTR [rax],0x68
   271d8:	jne    27260 <g_str_equal@plt+0x1eea8>
   271de:	mov    rsi,r13
   271e1:	mov    rdi,rbp
   271e4:	call   27340 <g_str_equal@plt+0x1ef88>
   271e9:	test   rax,rax
   271ec:	mov    r13,rax
   271ef:	je     272eb <g_str_equal@plt+0x1ef33>
   271f5:	mov    rdi,rbx
   271f8:	call   11d40 <g_str_equal@plt+0x9988>
   271fd:	mov    rdx,r13
   27200:	mov    rsi,rax
   27203:	mov    rdi,r14
   27206:	call   11ff0 <g_str_equal@plt+0x9c38>
   2720b:	mov    rax,QWORD PTR [rbx+0x8]
   2720f:	test   rax,rax
   27212:	je     2733b <g_str_equal@plt+0x1ef83>
   27218:	lea    rdx,[rax-0x1]
   2721c:	xor    eax,eax
   2721e:	test   rdx,rdx
   27221:	mov    QWORD PTR [rbx+0x8],rdx
   27225:	je     27240 <g_str_equal@plt+0x1ee88>
   27227:	add    rsp,0x18
   2722b:	pop    rbx
   2722c:	pop    rbp
   2722d:	pop    r12
   2722f:	pop    r13
   27231:	pop    r14
   27233:	pop    r15
   27235:	ret    
   27236:	nop    WORD PTR cs:[rax+rax*1+0x0]
   27240:	mov    rdi,rbx
   27243:	mov    DWORD PTR [rsp+0xc],eax
   27247:	call   12960 <g_str_equal@plt+0xa5a8>
   2724c:	mov    eax,DWORD PTR [rsp+0xc]
   27250:	add    rsp,0x18
   27254:	pop    rbx
   27255:	pop    rbp
   27256:	pop    r12
   27258:	pop    r13
   2725a:	pop    r14
   2725c:	pop    r15
   2725e:	ret    
   2725f:	nop
   27260:	lea    rdx,[rip+0x773f]        # 2e9a6 <_fini@@Base+0x5722>
   27267:	mov    rsi,rax
   2726a:	mov    rdi,rbp
   2726d:	xor    eax,eax
   2726f:	call   26f90 <g_str_equal@plt+0x1ebd8>
   27274:	mov    rax,QWORD PTR [rbx+0x8]
   27278:	test   rax,rax
   2727b:	je     2733b <g_str_equal@plt+0x1ef83>
   27281:	sub    rax,0x1
   27285:	test   rax,rax
   27288:	mov    QWORD PTR [rbx+0x8],rax
   2728c:	je     27298 <g_str_equal@plt+0x1eee0>
   2728e:	mov    eax,0xffffffff
   27293:	jmp    27227 <g_str_equal@plt+0x1ee6f>
   27295:	nop    DWORD PTR [rax]
   27298:	mov    rdi,rbx
   2729b:	call   12960 <g_str_equal@plt+0xa5a8>
   272a0:	mov    eax,0xffffffff
   272a5:	jmp    27227 <g_str_equal@plt+0x1ee6f>
   272aa:	nop    WORD PTR [rax+rax*1+0x0]
   272b0:	lea    rdx,[rip+0x76d1]        # 2e988 <_fini@@Base+0x5704>
   272b7:	xor    eax,eax
   272b9:	mov    rsi,r15
   272bc:	mov    rdi,rbp
   272bf:	call   26f90 <g_str_equal@plt+0x1ebd8>
   272c4:	mov    eax,0xffffffff
   272c9:	jmp    27227 <g_str_equal@plt+0x1ee6f>
   272ce:	lea    rdx,[rip+0x76a5]        # 2e97a <_fini@@Base+0x56f6>
   272d5:	xor    eax,eax
   272d7:	xor    esi,esi
   272d9:	mov    rdi,rbp
   272dc:	call   26f90 <g_str_equal@plt+0x1ebd8>
   272e1:	mov    eax,0xffffffff
   272e6:	jmp    27227 <g_str_equal@plt+0x1ee6f>
   272eb:	lea    rdx,[rip+0x76cd]        # 2e9bf <_fini@@Base+0x573b>
   272f2:	mov    rsi,r12
   272f5:	mov    rdi,rbp
   272f8:	xor    eax,eax
   272fa:	call   26f90 <g_str_equal@plt+0x1ebd8>
   272ff:	jmp    27274 <g_str_equal@plt+0x1eebc>
   27304:	lea    rdx,[rip+0x766f]        # 2e97a <_fini@@Base+0x56f6>
   2730b:	xor    esi,esi
   2730d:	mov    rdi,rbp
   27310:	xor    eax,eax
   27312:	call   26f90 <g_str_equal@plt+0x1ebd8>
   27317:	jmp    27274 <g_str_equal@plt+0x1eebc>
   2731c:	lea    rcx,[rip+0x7a8d]        # 2edb0 <_fini@@Base+0x5b2c>
   27323:	lea    rsi,[rip+0x356e]        # 2a898 <_fini@@Base+0x1614>
   2732a:	lea    rdi,[rip+0x35af]        # 2a8e0 <_fini@@Base+0x165c>
   27331:	mov    edx,0x7f
   27336:	call   7a70 <__assert_fail@plt>
   2733b:	call   85a1 <g_str_equal@plt+0x1e9>
   27340:	push   r15
   27342:	push   r14
   27344:	push   r13
   27346:	push   r12
   27348:	lea    r12,[rdi+0x10]
   2734c:	push   rbp
   2734d:	push   rbx
   2734e:	mov    rbx,rdi
   27351:	mov    rdi,r12
   27354:	mov    r13,rsi
   27357:	sub    rsp,0x38
   2735b:	mov    rax,QWORD PTR fs:0x28
   27364:	mov    QWORD PTR [rsp+0x28],rax
   27369:	xor    eax,eax
   2736b:	call   270c0 <g_str_equal@plt+0x1ed08>
   27370:	test   rax,rax
   27373:	je     27b18 <g_str_equal@plt+0x1f760>
   27379:	mov    ecx,DWORD PTR [rax]
   2737b:	lea    edx,[rcx-0x64]
   2737e:	cmp    edx,0xa
   27381:	ja     27710 <g_str_equal@plt+0x1f358>
   27387:	lea    rcx,[rip+0x7812]        # 2eba0 <_fini@@Base+0x591c>
   2738e:	movsxd rdx,DWORD PTR [rcx+rdx*4]
   27392:	add    rdx,rcx
   27395:	jmp    rdx
   27397:	nop    WORD PTR [rax+rax*1+0x0]
   273a0:	test   r13,r13
   273a3:	je     2755b <g_str_equal@plt+0x1f1a3>
   273a9:	lea    rdi,[rbx+0x8]
   273ad:	mov    rsi,r12
   273b0:	call   27100 <g_str_equal@plt+0x1ed48>
   273b5:	test   rax,rax
   273b8:	je     27d61 <g_str_equal@plt+0x1f9a9>
   273be:	cmp    DWORD PTR [rax],0x6e
   273c1:	jne    27d61 <g_str_equal@plt+0x1f9a9>
   273c7:	add    rax,0xc
   273cb:	lea    rdi,[rip+0x7649]        # 2ea1b <_fini@@Base+0x5797>
   273d2:	mov    ecx,0x3
   273d7:	mov    rsi,rax
   273da:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   273dc:	seta   dl
   273df:	sbb    dl,0x0
   273e2:	test   dl,dl
   273e4:	je     27de3 <g_str_equal@plt+0x1fa2b>
   273ea:	lea    rdi,[rip+0x6a5e]        # 2de4f <_fini@@Base+0x4bcb>
   273f1:	mov    ecx,0x3
   273f6:	mov    rsi,rax
   273f9:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   273fb:	seta   dl
   273fe:	sbb    dl,0x0
   27401:	test   dl,dl
   27403:	je     27e06 <g_str_equal@plt+0x1fa4e>
   27409:	lea    rdi,[rip+0x760e]        # 2ea1e <_fini@@Base+0x579a>
   27410:	mov    ecx,0x3
   27415:	mov    rsi,rax
   27418:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   2741a:	seta   dl
   2741d:	sbb    dl,0x0
   27420:	test   dl,dl
   27422:	je     27a62 <g_str_equal@plt+0x1f6aa>
   27428:	lea    rdi,[rip+0x3707]        # 2ab36 <_fini@@Base+0x18b2>
   2742f:	mov    ecx,0x4
   27434:	mov    rsi,rax
   27437:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   27439:	seta   dl
   2743c:	sbb    dl,0x0
   2743f:	test   dl,dl
   27441:	je     2747d <g_str_equal@plt+0x1f0c5>
   27443:	lea    rdi,[rip+0x75d7]        # 2ea21 <_fini@@Base+0x579d>
   2744a:	mov    ecx,0x5
   2744f:	mov    rsi,rax
   27452:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   27454:	seta   dl
   27457:	sbb    dl,0x0
   2745a:	test   dl,dl
   2745c:	je     2747d <g_str_equal@plt+0x1f0c5>
   2745e:	lea    rdi,[rip+0x75c1]        # 2ea26 <_fini@@Base+0x57a2>
   27465:	mov    ecx,0x6
   2746a:	mov    rsi,rax
   2746d:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   2746f:	seta   dl
   27472:	sbb    dl,0x0
   27475:	test   dl,dl
   27477:	jne    27b47 <g_str_equal@plt+0x1f78f>
   2747d:	mov    edx,DWORD PTR [r13+0x0]
   27481:	cmp    edx,0x2f
   27484:	ja     27da5 <g_str_equal@plt+0x1f9ed>
   2748a:	mov    eax,edx
   2748c:	add    rax,QWORD PTR [r13+0x10]
   27490:	add    edx,0x8
   27493:	mov    DWORD PTR [r13+0x0],edx
   27497:	mov    rdi,QWORD PTR [rax]
   2749a:	call   11570 <g_str_equal@plt+0x91b8>
   2749f:	mov    rbp,rax
   274a2:	jmp    276e0 <g_str_equal@plt+0x1f328>
   274a7:	nop    WORD PTR [rax+rax*1+0x0]
   274b0:	lea    r14,[rbx+0x8]
   274b4:	mov    rsi,r12
   274b7:	mov    rdi,r14
   274ba:	call   27100 <g_str_equal@plt+0x1ed48>
   274bf:	test   rax,rax
   274c2:	je     27ce5 <g_str_equal@plt+0x1f92d>
   274c8:	cmp    DWORD PTR [rax],0x64
   274cb:	jne    27ce5 <g_str_equal@plt+0x1f92d>
   274d1:	call   11fa0 <g_str_equal@plt+0x9be8>
   274d6:	mov    rdi,r12
   274d9:	mov    rbp,rax
   274dc:	call   270c0 <g_str_equal@plt+0x1ed08>
   274e1:	test   rax,rax
   274e4:	je     277c0 <g_str_equal@plt+0x1f408>
   274ea:	cmp    DWORD PTR [rax],0x65
   274ed:	jne    27520 <g_str_equal@plt+0x1f168>
   274ef:	jmp    27890 <g_str_equal@plt+0x1f4d8>
   274f4:	nop    DWORD PTR [rax+0x0]
   274f8:	mov    rsi,r12
   274fb:	mov    rdi,r14
   274fe:	call   27100 <g_str_equal@plt+0x1ed48>
   27503:	test   rax,rax
   27506:	je     277c0 <g_str_equal@plt+0x1f408>
   2750c:	mov    edx,DWORD PTR [rax]
   2750e:	cmp    edx,0x65
   27511:	je     276e0 <g_str_equal@plt+0x1f328>
   27517:	cmp    edx,0x69
   2751a:	jne    27af8 <g_str_equal@plt+0x1f740>
   27520:	mov    rdx,r13
   27523:	mov    rsi,rbp
   27526:	mov    rdi,rbx
   27529:	call   27160 <g_str_equal@plt+0x1eda8>
   2752e:	cmp    eax,0xffffffff
   27531:	jne    274f8 <g_str_equal@plt+0x1f140>
   27533:	nop    DWORD PTR [rax+rax*1+0x0]
   27538:	test   rbp,rbp
   2753b:	je     2755b <g_str_equal@plt+0x1f1a3>
   2753d:	mov    rax,QWORD PTR [rbp+0x8]
   27541:	test   rax,rax
   27544:	je     27e01 <g_str_equal@plt+0x1fa49>
   2754a:	sub    rax,0x1
   2754e:	test   rax,rax
   27551:	mov    QWORD PTR [rbp+0x8],rax
   27555:	je     27730 <g_str_equal@plt+0x1f378>
   2755b:	xor    ebp,ebp
   2755d:	jmp    276e0 <g_str_equal@plt+0x1f328>
   27562:	nop    WORD PTR [rax+rax*1+0x0]
   27568:	lea    r15,[rbx+0x8]
   2756c:	mov    rsi,r12
   2756f:	mov    rdi,r15
   27572:	call   27100 <g_str_equal@plt+0x1ed48>
   27577:	test   rax,rax
   2757a:	mov    r14,rax
   2757d:	je     27d23 <g_str_equal@plt+0x1f96b>
   27583:	cmp    DWORD PTR [rax],0x66
   27586:	jne    27d23 <g_str_equal@plt+0x1f96b>
   2758c:	call   22010 <g_str_equal@plt+0x19c58>
   27591:	mov    rdi,r12
   27594:	mov    rbp,rax
   27597:	call   270c0 <g_str_equal@plt+0x1ed08>
   2759c:	test   rax,rax
   2759f:	je     277c0 <g_str_equal@plt+0x1f408>
   275a5:	cmp    DWORD PTR [rax],0x67
   275a8:	jne    275e6 <g_str_equal@plt+0x1f22e>
   275aa:	jmp    278a0 <g_str_equal@plt+0x1f4e8>
   275af:	nop
   275b0:	mov    rsi,rax
   275b3:	mov    rdi,rbp
   275b6:	call   220e0 <g_str_equal@plt+0x19d28>
   275bb:	mov    rsi,r12
   275be:	mov    rdi,r15
   275c1:	call   27100 <g_str_equal@plt+0x1ed48>
   275c6:	test   rax,rax
   275c9:	mov    r14,rax
   275cc:	je     277c0 <g_str_equal@plt+0x1f408>
   275d2:	mov    eax,DWORD PTR [rax]
   275d4:	cmp    eax,0x67
   275d7:	je     276e0 <g_str_equal@plt+0x1f328>
   275dd:	cmp    eax,0x69
   275e0:	jne    27ad8 <g_str_equal@plt+0x1f720>
   275e6:	mov    rsi,r13
   275e9:	mov    rdi,rbx
   275ec:	call   27340 <g_str_equal@plt+0x1ef88>
   275f1:	test   rax,rax
   275f4:	jne    275b0 <g_str_equal@plt+0x1f1f8>
   275f6:	lea    rdx,[rip+0x73f3]        # 2e9f0 <_fini@@Base+0x576c>
   275fd:	mov    rsi,r14
   27600:	mov    rdi,rbx
   27603:	call   26f90 <g_str_equal@plt+0x1ebd8>
   27608:	jmp    27538 <g_str_equal@plt+0x1f180>
   2760d:	nop    DWORD PTR [rax]
   27610:	lea    rdi,[rbx+0x8]
   27614:	mov    rsi,r12
   27617:	call   27100 <g_str_equal@plt+0x1ed48>
   2761c:	test   rax,rax
   2761f:	mov    r12,rax
   27622:	je     27d42 <g_str_equal@plt+0x1f98a>
   27628:	mov    eax,DWORD PTR [rax]
   2762a:	cmp    eax,0x6b
   2762d:	je     27870 <g_str_equal@plt+0x1f4b8>
   27633:	cmp    eax,0x6d
   27636:	je     277e0 <g_str_equal@plt+0x1f428>
   2763c:	cmp    eax,0x6a
   2763f:	je     27740 <g_str_equal@plt+0x1f388>
   27645:	call   79c0 <abort@plt>
   2764a:	nop    WORD PTR [rax+rax*1+0x0]
   27650:	lea    rdi,[rbx+0x8]
   27654:	mov    rsi,r12
   27657:	call   27100 <g_str_equal@plt+0x1ed48>
   2765c:	test   rax,rax
   2765f:	je     27d04 <g_str_equal@plt+0x1f94c>
   27665:	cmp    DWORD PTR [rax],0x6c
   27668:	jne    27d04 <g_str_equal@plt+0x1f94c>
   2766e:	lea    r8,[rax+0xc]
   27672:	lea    rdi,[rip+0x7255]        # 2e8ce <_fini@@Base+0x564a>
   27679:	mov    ecx,0x5
   2767e:	mov    rsi,r8
   27681:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   27683:	seta   dl
   27686:	sbb    dl,0x0
   27689:	test   dl,dl
   2768b:	je     278b0 <g_str_equal@plt+0x1f4f8>
   27691:	lea    rdi,[rip+0x723b]        # 2e8d3 <_fini@@Base+0x564f>
   27698:	mov    ecx,0x6
   2769d:	mov    rsi,r8
   276a0:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   276a2:	seta   dl
   276a5:	sbb    dl,0x0
   276a8:	test   dl,dl
   276aa:	je     27ab0 <g_str_equal@plt+0x1f6f8>
   276b0:	lea    rdi,[rip+0x249b]        # 29b52 <_fini@@Base+0x8ce>
   276b7:	mov    ecx,0x5
   276bc:	mov    rsi,r8
   276bf:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   276c1:	seta   dl
   276c4:	sbb    dl,0x0
   276c7:	test   dl,dl
   276c9:	jne    27c5e <g_str_equal@plt+0x1f8a6>
   276cf:	add    QWORD PTR [rip+0x218111],0x1        # 23f7e8 <g_test_config_vars+0x20c8>
   276d7:	lea    rbp,[rip+0x218102]        # 23f7e0 <g_test_config_vars+0x20c0>
   276de:	xchg   ax,ax
   276e0:	mov    rbx,QWORD PTR [rsp+0x28]
   276e5:	xor    rbx,QWORD PTR fs:0x28
   276ee:	mov    rax,rbp
   276f1:	jne    27ce0 <g_str_equal@plt+0x1f928>
   276f7:	add    rsp,0x38
   276fb:	pop    rbx
   276fc:	pop    rbp
   276fd:	pop    r12
   276ff:	pop    r13
   27701:	pop    r14
   27703:	pop    r15
   27705:	ret    
   27706:	nop    WORD PTR cs:[rax+rax*1+0x0]
   27710:	lea    rdx,[rip+0x72d9]        # 2e9f0 <_fini@@Base+0x576c>
   27717:	mov    rsi,rax
   2771a:	mov    rdi,rbx
   2771d:	xor    eax,eax
   2771f:	xor    ebp,ebp
   27721:	call   26f90 <g_str_equal@plt+0x1ebd8>
   27726:	jmp    276e0 <g_str_equal@plt+0x1f328>
   27728:	nop    DWORD PTR [rax+rax*1+0x0]
   27730:	mov    rdi,rbp
   27733:	xor    ebp,ebp
   27735:	call   12960 <g_str_equal@plt+0xa5a8>
   2773a:	jmp    276e0 <g_str_equal@plt+0x1f328>
   2773c:	nop    DWORD PTR [rax+0x0]
   27740:	lea    rbx,[r12+0xc]
   27745:	lea    rcx,[rsp+0x10]
   2774a:	xor    esi,esi
   2774c:	mov    edx,0xa
   27751:	mov    rdi,rbx
   27754:	call   afb0 <g_str_equal@plt+0x2bf8>
   27759:	test   eax,eax
   2775b:	je     27a50 <g_str_equal@plt+0x1f698>
   27761:	cmp    eax,0xffffffde
   27764:	jne    27dc4 <g_str_equal@plt+0x1fa0c>
   2776a:	cmp    BYTE PTR [r12+0xc],0x2d
   27770:	je     27875 <g_str_equal@plt+0x1f4bd>
   27776:	lea    rcx,[rsp+0x18]
   2777b:	xor    esi,esi
   2777d:	mov    edx,0xa
   27782:	mov    rdi,rbx
   27785:	call   b070 <g_str_equal@plt+0x2cb8>
   2778a:	test   eax,eax
   2778c:	je     27c0f <g_str_equal@plt+0x1f857>
   27792:	cmp    eax,0xffffffde
   27795:	je     27875 <g_str_equal@plt+0x1f4bd>
   2779b:	lea    rcx,[rip+0x759e]        # 2ed40 <_fini@@Base+0x5abc>
   277a2:	lea    rsi,[rip+0x72c7]        # 2ea70 <_fini@@Base+0x57ec>
   277a9:	lea    rdi,[rip+0x7295]        # 2ea45 <_fini@@Base+0x57c1>
   277b0:	mov    edx,0x217
   277b5:	call   7a70 <__assert_fail@plt>
   277ba:	nop    WORD PTR [rax+rax*1+0x0]
   277c0:	lea    rdx,[rip+0x71b3]        # 2e97a <_fini@@Base+0x56f6>
   277c7:	xor    esi,esi
   277c9:	mov    rdi,rbx
   277cc:	xor    eax,eax
   277ce:	call   26f90 <g_str_equal@plt+0x1ebd8>
   277d3:	jmp    27538 <g_str_equal@plt+0x1f180>
   277d8:	nop    DWORD PTR [rax+rax*1+0x0]
   277e0:	movzx  r13d,BYTE PTR [r12+0xc]
   277e6:	lea    r15,[r12+0xd]
   277eb:	lea    r14,[rip+0x73da]        # 2ebcc <_fini@@Base+0x5948>
   277f2:	call   11c30 <g_str_equal@plt+0x9878>
   277f7:	mov    rbp,rax
   277fa:	lea    rax,[rsp+0x24]
   277ff:	mov    QWORD PTR [rsp+0x8],rax
   27804:	nop    DWORD PTR [rax+0x0]
   27808:	movzx  eax,BYTE PTR [r15]
   2780c:	test   al,al
   2780e:	je     276e0 <g_str_equal@plt+0x1f328>
   27814:	cmp    r13b,0x22
   27818:	jne    27848 <g_str_equal@plt+0x1f490>
   2781a:	cmp    al,0x22
   2781c:	je     276e0 <g_str_equal@plt+0x1f328>
   27822:	cmp    al,0x5c
   27824:	jne    27854 <g_str_equal@plt+0x1f49c>
   27826:	movzx  eax,BYTE PTR [r15+0x1]
   2782b:	sub    eax,0x22
   2782e:	cmp    al,0x53
   27830:	ja     27a90 <g_str_equal@plt+0x1f6d8>
   27836:	movzx  eax,al
   27839:	movsxd rax,DWORD PTR [r14+rax*4]
   2783d:	add    rax,r14
   27840:	jmp    rax
   27842:	nop    WORD PTR [rax+rax*1+0x0]
   27848:	cmp    al,0x27
   2784a:	je     276e0 <g_str_equal@plt+0x1f328>
   27850:	cmp    al,0x5c
   27852:	je     27826 <g_str_equal@plt+0x1f46e>
   27854:	add    r15,0x1
   27858:	mov    BYTE PTR [rsp+0x24],al
   2785c:	mov    BYTE PTR [rsp+0x25],0x0
   27861:	mov    rsi,QWORD PTR [rsp+0x8]
   27866:	mov    rdi,rbp
   27869:	call   11c40 <g_str_equal@plt+0x9888>
   2786e:	jmp    27808 <g_str_equal@plt+0x1f450>
   27870:	lea    rbx,[r12+0xc]
   27875:	xor    esi,esi
   27877:	mov    rdi,rbx
   2787a:	call   8350 <strtod@plt>
   2787f:	call   115d0 <g_str_equal@plt+0x9218>
   27884:	mov    rbp,rax
   27887:	jmp    276e0 <g_str_equal@plt+0x1f328>
   2788c:	nop    DWORD PTR [rax+0x0]
   27890:	mov    rsi,r12
   27893:	mov    rdi,r14
   27896:	call   27100 <g_str_equal@plt+0x1ed48>
   2789b:	jmp    276e0 <g_str_equal@plt+0x1f328>
   278a0:	mov    rsi,r12
   278a3:	mov    rdi,r15
   278a6:	call   27100 <g_str_equal@plt+0x1ed48>
   278ab:	jmp    276e0 <g_str_equal@plt+0x1f328>
   278b0:	mov    edi,0x1
   278b5:	call   12880 <g_str_equal@plt+0xa4c8>
   278ba:	mov    rbp,rax
   278bd:	jmp    276e0 <g_str_equal@plt+0x1f328>
   278c2:	nop    WORD PTR [rax+rax*1+0x0]
   278c8:	call   7d60 <__ctype_b_loc@plt>
   278cd:	mov    r8,QWORD PTR [rax]
   278d0:	add    r15,0x2
   278d4:	mov    ecx,0xc
   278d9:	xor    edi,edi
   278db:	movzx  eax,BYTE PTR [r15]
   278df:	test   BYTE PTR [r8+rax*2+0x1],0x10
   278e5:	mov    rsi,rax
   278e8:	je     27c21 <g_str_equal@plt+0x1f869>
   278ee:	lea    r9d,[rsi-0x30]
   278f2:	movsx  eax,al
   278f5:	cmp    r9b,0x9
   278f9:	ja     27ac0 <g_str_equal@plt+0x1f708>
   278ff:	sub    eax,0x30
   27902:	shl    eax,cl
   27904:	sub    ecx,0x4
   27907:	add    r15,0x1
   2790b:	or     edi,eax
   2790d:	cmp    ecx,0xfffffffc
   27910:	jne    278db <g_str_equal@plt+0x1f523>
   27912:	cmp    di,0x7f
   27916:	ja     27be5 <g_str_equal@plt+0x1f82d>
   2791c:	mov    BYTE PTR [rsp+0x24],dil
   27921:	mov    BYTE PTR [rsp+0x25],0x0
   27926:	jmp    27861 <g_str_equal@plt+0x1f4a9>
   2792b:	nop    DWORD PTR [rax+rax*1+0x0]
   27930:	lea    rsi,[rip+0x710c]        # 2ea43 <_fini@@Base+0x57bf>
   27937:	mov    rdi,rbp
   2793a:	add    r15,0x2
   2793e:	call   11c40 <g_str_equal@plt+0x9888>
   27943:	jmp    27808 <g_str_equal@plt+0x1f450>
   27948:	nop    DWORD PTR [rax+rax*1+0x0]
   27950:	lea    rsi,[rip+0x45ca]        # 2bf21 <_fini@@Base+0x2c9d>
   27957:	mov    rdi,rbp
   2795a:	add    r15,0x2
   2795e:	call   11c40 <g_str_equal@plt+0x9888>
   27963:	jmp    27808 <g_str_equal@plt+0x1f450>
   27968:	nop    DWORD PTR [rax+rax*1+0x0]
   27970:	lea    rsi,[rip+0x70c8]        # 2ea3f <_fini@@Base+0x57bb>
   27977:	mov    rdi,rbp
   2797a:	add    r15,0x2
   2797e:	call   11c40 <g_str_equal@plt+0x9888>
   27983:	jmp    27808 <g_str_equal@plt+0x1f450>
   27988:	nop    DWORD PTR [rax+rax*1+0x0]
   27990:	lea    rsi,[rip+0x70a6]        # 2ea3d <_fini@@Base+0x57b9>
   27997:	mov    rdi,rbp
   2799a:	add    r15,0x2
   2799e:	call   11c40 <g_str_equal@plt+0x9888>
   279a3:	jmp    27808 <g_str_equal@plt+0x1f450>
   279a8:	nop    DWORD PTR [rax+rax*1+0x0]
   279b0:	lea    rsi,[rip+0x6eee]        # 2e8a5 <_fini@@Base+0x5621>
   279b7:	mov    rdi,rbp
   279ba:	add    r15,0x2
   279be:	call   11c40 <g_str_equal@plt+0x9888>
   279c3:	jmp    27808 <g_str_equal@plt+0x1f450>
   279c8:	nop    DWORD PTR [rax+rax*1+0x0]
   279d0:	lea    rsi,[rip+0x218a]        # 29b61 <_fini@@Base+0x8dd>
   279d7:	mov    rdi,rbp
   279da:	add    r15,0x2
   279de:	call   11c40 <g_str_equal@plt+0x9888>
   279e3:	jmp    27808 <g_str_equal@plt+0x1f450>
   279e8:	nop    DWORD PTR [rax+rax*1+0x0]
   279f0:	lea    rsi,[rip+0x649f]        # 2de96 <_fini@@Base+0x4c12>
   279f7:	mov    rdi,rbp
   279fa:	add    r15,0x2
   279fe:	call   11c40 <g_str_equal@plt+0x9888>
   27a03:	jmp    27808 <g_str_equal@plt+0x1f450>
   27a08:	nop    DWORD PTR [rax+rax*1+0x0]
   27a10:	lea    rsi,[rip+0x4544]        # 2bf5b <_fini@@Base+0x2cd7>
   27a17:	mov    rdi,rbp
   27a1a:	add    r15,0x2
   27a1e:	call   11c40 <g_str_equal@plt+0x9888>
   27a23:	jmp    27808 <g_str_equal@plt+0x1f450>
   27a28:	nop    DWORD PTR [rax+rax*1+0x0]
   27a30:	lea    rsi,[rip+0x700a]        # 2ea41 <_fini@@Base+0x57bd>
   27a37:	mov    rdi,rbp
   27a3a:	add    r15,0x2
   27a3e:	call   11c40 <g_str_equal@plt+0x9888>
   27a43:	jmp    27808 <g_str_equal@plt+0x1f450>
   27a48:	nop    DWORD PTR [rax+rax*1+0x0]
   27a50:	mov    rdi,QWORD PTR [rsp+0x10]
   27a55:	call   11570 <g_str_equal@plt+0x91b8>
   27a5a:	mov    rbp,rax
   27a5d:	jmp    276e0 <g_str_equal@plt+0x1f328>
   27a62:	mov    edx,DWORD PTR [r13+0x0]
   27a66:	cmp    edx,0x2f
   27a69:	ja     27e4f <g_str_equal@plt+0x1fa97>
   27a6f:	mov    eax,edx
   27a71:	add    rax,QWORD PTR [r13+0x10]
   27a75:	add    edx,0x8
   27a78:	mov    DWORD PTR [r13+0x0],edx
   27a7c:	movsxd rdi,DWORD PTR [rax]
   27a7f:	call   11570 <g_str_equal@plt+0x91b8>
   27a84:	mov    rbp,rax
   27a87:	jmp    276e0 <g_str_equal@plt+0x1f328>
   27a8c:	nop    DWORD PTR [rax+0x0]
   27a90:	lea    rdx,[rip+0x70b9]        # 2eb50 <_fini@@Base+0x58cc>
   27a97:	mov    rsi,r12
   27a9a:	mov    rdi,rbx
   27a9d:	xor    eax,eax
   27a9f:	call   26f90 <g_str_equal@plt+0x1ebd8>
   27aa4:	jmp    27538 <g_str_equal@plt+0x1f180>
   27aa9:	nop    DWORD PTR [rax+0x0]
   27ab0:	xor    edi,edi
   27ab2:	call   12880 <g_str_equal@plt+0xa4c8>
   27ab7:	mov    rbp,rax
   27aba:	jmp    276e0 <g_str_equal@plt+0x1f328>
   27abf:	nop
   27ac0:	lea    r9d,[rsi-0x61]
   27ac4:	cmp    r9b,0x5
   27ac8:	ja     27b30 <g_str_equal@plt+0x1f778>
   27aca:	sub    eax,0x57
   27acd:	jmp    27902 <g_str_equal@plt+0x1f54a>
   27ad2:	nop    WORD PTR [rax+rax*1+0x0]
   27ad8:	lea    rdx,[rip+0x6f21]        # 2ea00 <_fini@@Base+0x577c>
   27adf:	mov    rsi,r14
   27ae2:	mov    rdi,rbx
   27ae5:	xor    eax,eax
   27ae7:	call   26f90 <g_str_equal@plt+0x1ebd8>
   27aec:	jmp    27538 <g_str_equal@plt+0x1f180>
   27af1:	nop    DWORD PTR [rax+0x0]
   27af8:	lea    rdx,[rip+0x6ed6]        # 2e9d5 <_fini@@Base+0x5751>
   27aff:	mov    rsi,rax
   27b02:	mov    rdi,rbx
   27b05:	xor    eax,eax
   27b07:	call   26f90 <g_str_equal@plt+0x1ebd8>
   27b0c:	jmp    27538 <g_str_equal@plt+0x1f180>
   27b11:	nop    DWORD PTR [rax+0x0]
   27b18:	lea    rdx,[rip+0x6e5b]        # 2e97a <_fini@@Base+0x56f6>
   27b1f:	xor    esi,esi
   27b21:	mov    rdi,rbx
   27b24:	xor    ebp,ebp
   27b26:	call   26f90 <g_str_equal@plt+0x1ebd8>
   27b2b:	jmp    276e0 <g_str_equal@plt+0x1f328>
   27b30:	sub    esi,0x41
   27b33:	sub    eax,0x37
   27b36:	cmp    sil,0x6
   27b3a:	mov    esi,0xffffffff
   27b3f:	cmovae eax,esi
   27b42:	jmp    27902 <g_str_equal@plt+0x1f54a>
   27b47:	lea    rdi,[rip+0x4473]        # 2bfc1 <_fini@@Base+0x2d3d>
   27b4e:	mov    ecx,0x3
   27b53:	mov    rsi,rax
   27b56:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   27b58:	seta   dl
   27b5b:	sbb    dl,0x0
   27b5e:	test   dl,dl
   27b60:	je     27d80 <g_str_equal@plt+0x1f9c8>
   27b66:	lea    rdi,[rip+0x3c0b]        # 2b778 <_fini@@Base+0x24f4>
   27b6d:	mov    ecx,0x4
   27b72:	mov    rsi,rax
   27b75:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   27b77:	seta   dl
   27b7a:	sbb    dl,0x0
   27b7d:	test   dl,dl
   27b7f:	je     27bbb <g_str_equal@plt+0x1f803>
   27b81:	lea    rdi,[rip+0x6ea4]        # 2ea2c <_fini@@Base+0x57a8>
   27b88:	mov    ecx,0x5
   27b8d:	mov    rsi,rax
   27b90:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   27b92:	seta   dl
   27b95:	sbb    dl,0x0
   27b98:	test   dl,dl
   27b9a:	je     27bbb <g_str_equal@plt+0x1f803>
   27b9c:	lea    rdi,[rip+0x6e8e]        # 2ea31 <_fini@@Base+0x57ad>
   27ba3:	mov    ecx,0x6
   27ba8:	mov    rsi,rax
   27bab:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   27bad:	seta   dl
   27bb0:	sbb    dl,0x0
   27bb3:	test   dl,dl
   27bb5:	jne    27c7c <g_str_equal@plt+0x1f8c4>
   27bbb:	mov    edx,DWORD PTR [r13+0x0]
   27bbf:	cmp    edx,0x2f
   27bc2:	ja     27e60 <g_str_equal@plt+0x1faa8>
   27bc8:	mov    eax,edx
   27bca:	add    rax,QWORD PTR [r13+0x10]
   27bce:	add    edx,0x8
   27bd1:	mov    DWORD PTR [r13+0x0],edx
   27bd5:	mov    rdi,QWORD PTR [rax]
   27bd8:	call   115a0 <g_str_equal@plt+0x91e8>
   27bdd:	mov    rbp,rax
   27be0:	jmp    276e0 <g_str_equal@plt+0x1f328>
   27be5:	mov    ecx,edi
   27be7:	mov    eax,edi
   27be9:	and    ecx,0x3f
   27bec:	shr    ax,0x6
   27bf0:	or     ecx,0xffffff80
   27bf3:	cmp    di,0x7ff
   27bf8:	ja     27c3a <g_str_equal@plt+0x1f882>
   27bfa:	or     eax,0xffffffc0
   27bfd:	mov    BYTE PTR [rsp+0x25],cl
   27c01:	mov    BYTE PTR [rsp+0x26],0x0
   27c06:	mov    BYTE PTR [rsp+0x24],al
   27c0a:	jmp    27861 <g_str_equal@plt+0x1f4a9>
   27c0f:	mov    rdi,QWORD PTR [rsp+0x18]
   27c14:	call   115a0 <g_str_equal@plt+0x91e8>
   27c19:	mov    rbp,rax
   27c1c:	jmp    276e0 <g_str_equal@plt+0x1f328>
   27c21:	lea    rdx,[rip+0x6f00]        # 2eb28 <_fini@@Base+0x58a4>
   27c28:	mov    rsi,r12
   27c2b:	mov    rdi,rbx
   27c2e:	xor    eax,eax
   27c30:	call   26f90 <g_str_equal@plt+0x1ebd8>
   27c35:	jmp    27538 <g_str_equal@plt+0x1f180>
   27c3a:	shr    di,0xc
   27c3e:	and    eax,0x3f
   27c41:	mov    BYTE PTR [rsp+0x26],cl
   27c45:	or     edi,0xffffffe0
   27c48:	or     eax,0xffffff80
   27c4b:	mov    BYTE PTR [rsp+0x27],0x0
   27c50:	mov    BYTE PTR [rsp+0x24],dil
   27c55:	mov    BYTE PTR [rsp+0x25],al
   27c59:	jmp    27861 <g_str_equal@plt+0x1f4a9>
   27c5e:	lea    rdx,[rip+0x6def]        # 2ea54 <_fini@@Base+0x57d0>
   27c65:	mov    rsi,rax
   27c68:	mov    rcx,r8
   27c6b:	mov    rdi,rbx
   27c6e:	xor    eax,eax
   27c70:	xor    ebp,ebp
   27c72:	call   26f90 <g_str_equal@plt+0x1ebd8>
   27c77:	jmp    276e0 <g_str_equal@plt+0x1f328>
   27c7c:	lea    rdi,[rip+0x6cd7]        # 2e95a <_fini@@Base+0x56d6>
   27c83:	mov    ecx,0x3
   27c88:	mov    rsi,rax
   27c8b:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   27c8d:	seta   dl
   27c90:	sbb    dl,0x0
   27c93:	test   dl,dl
   27c95:	je     27e82 <g_str_equal@plt+0x1faca>
   27c9b:	lea    rsi,[rip+0x3ada]        # 2b77c <_fini@@Base+0x24f8>
   27ca2:	mov    rdi,rax
   27ca5:	call   8060 <strcmp@plt>
   27caa:	test   eax,eax
   27cac:	jne    2755b <g_str_equal@plt+0x1f1a3>
   27cb2:	mov    edx,DWORD PTR [r13+0x4]
   27cb6:	cmp    edx,0xaf
   27cbc:	ja     27e71 <g_str_equal@plt+0x1fab9>
   27cc2:	mov    eax,edx
   27cc4:	add    rax,QWORD PTR [r13+0x10]
   27cc8:	add    edx,0x10
   27ccb:	mov    DWORD PTR [r13+0x4],edx
   27ccf:	movsd  xmm0,QWORD PTR [rax]
   27cd3:	call   115d0 <g_str_equal@plt+0x9218>
   27cd8:	mov    rbp,rax
   27cdb:	jmp    276e0 <g_str_equal@plt+0x1f328>
   27ce0:	call   8050 <__stack_chk_fail@plt>
   27ce5:	lea    rcx,[rip+0x70d4]        # 2edc0 <_fini@@Base+0x5b3c>
   27cec:	lea    rsi,[rip+0x6d7d]        # 2ea70 <_fini@@Base+0x57ec>
   27cf3:	lea    rdi,[rip+0x6db6]        # 2eab0 <_fini@@Base+0x582c>
   27cfa:	mov    edx,0x14a
   27cff:	call   7a70 <__assert_fail@plt>
   27d04:	lea    rcx,[rip+0x7025]        # 2ed30 <_fini@@Base+0x5aac>
   27d0b:	lea    rsi,[rip+0x6d5e]        # 2ea70 <_fini@@Base+0x57ec>
   27d12:	lea    rdi,[rip+0x6e5f]        # 2eb78 <_fini@@Base+0x58f4>
   27d19:	mov    edx,0x1bf
   27d1e:	call   7a70 <__assert_fail@plt>
   27d23:	lea    rcx,[rip+0x7036]        # 2ed60 <_fini@@Base+0x5adc>
   27d2a:	lea    rsi,[rip+0x6d3f]        # 2ea70 <_fini@@Base+0x57ec>
   27d31:	lea    rdi,[rip+0x6da0]        # 2ead8 <_fini@@Base+0x5854>
   27d38:	mov    edx,0x180
   27d3d:	call   7a70 <__assert_fail@plt>
   27d42:	lea    rcx,[rip+0x6ff7]        # 2ed40 <_fini@@Base+0x5abc>
   27d49:	lea    rsi,[rip+0x6d20]        # 2ea70 <_fini@@Base+0x57ec>
   27d50:	lea    rdi,[rip+0x6ce0]        # 2ea37 <_fini@@Base+0x57b3>
   27d57:	mov    edx,0x1f6
   27d5c:	call   7a70 <__assert_fail@plt>
   27d61:	lea    rcx,[rip+0x6fe8]        # 2ed50 <_fini@@Base+0x5acc>
   27d68:	lea    rsi,[rip+0x6d01]        # 2ea70 <_fini@@Base+0x57ec>
   27d6f:	lea    rdi,[rip+0x6d8a]        # 2eb00 <_fini@@Base+0x587c>
   27d76:	mov    edx,0x1d5
   27d7b:	call   7a70 <__assert_fail@plt>
   27d80:	mov    edx,DWORD PTR [r13+0x0]
   27d84:	cmp    edx,0x2f
   27d87:	ja     27db6 <g_str_equal@plt+0x1f9fe>
   27d89:	mov    eax,edx
   27d8b:	add    rax,QWORD PTR [r13+0x10]
   27d8f:	add    edx,0x8
   27d92:	mov    DWORD PTR [r13+0x0],edx
   27d96:	mov    edi,DWORD PTR [rax]
   27d98:	call   115a0 <g_str_equal@plt+0x91e8>
   27d9d:	mov    rbp,rax
   27da0:	jmp    276e0 <g_str_equal@plt+0x1f328>
   27da5:	mov    rax,QWORD PTR [r13+0x8]
   27da9:	lea    rdx,[rax+0x8]
   27dad:	mov    QWORD PTR [r13+0x8],rdx
   27db1:	jmp    27497 <g_str_equal@plt+0x1f0df>
   27db6:	mov    rax,QWORD PTR [r13+0x8]
   27dba:	lea    rdx,[rax+0x8]
   27dbe:	mov    QWORD PTR [r13+0x8],rdx
   27dc2:	jmp    27d96 <g_str_equal@plt+0x1f9de>
   27dc4:	lea    rcx,[rip+0x6f75]        # 2ed40 <_fini@@Base+0x5abc>
   27dcb:	lea    rsi,[rip+0x6c9e]        # 2ea70 <_fini@@Base+0x57ec>
   27dd2:	lea    rdi,[rip+0x6c6c]        # 2ea45 <_fini@@Base+0x57c1>
   27dd9:	mov    edx,0x210
   27dde:	call   7a70 <__assert_fail@plt>
   27de3:	mov    edx,DWORD PTR [r13+0x0]
   27de7:	cmp    edx,0x2f
   27dea:	ja     27e33 <g_str_equal@plt+0x1fa7b>
   27dec:	mov    eax,edx
   27dee:	add    rax,QWORD PTR [r13+0x10]
   27df2:	add    edx,0x8
   27df5:	mov    DWORD PTR [r13+0x0],edx
   27df9:	mov    rbp,QWORD PTR [rax]
   27dfc:	jmp    276e0 <g_str_equal@plt+0x1f328>
   27e01:	call   85a1 <g_str_equal@plt+0x1e9>
   27e06:	mov    edx,DWORD PTR [r13+0x0]
   27e0a:	cmp    edx,0x2f
   27e0d:	ja     27e41 <g_str_equal@plt+0x1fa89>
   27e0f:	mov    eax,edx
   27e11:	add    rax,QWORD PTR [r13+0x10]
   27e15:	add    edx,0x8
   27e18:	mov    DWORD PTR [r13+0x0],edx
   27e1c:	mov    eax,DWORD PTR [rax]
   27e1e:	xor    edi,edi
   27e20:	test   eax,eax
   27e22:	setne  dil
   27e26:	call   12880 <g_str_equal@plt+0xa4c8>
   27e2b:	mov    rbp,rax
   27e2e:	jmp    276e0 <g_str_equal@plt+0x1f328>
   27e33:	mov    rax,QWORD PTR [r13+0x8]
   27e37:	lea    rdx,[rax+0x8]
   27e3b:	mov    QWORD PTR [r13+0x8],rdx
   27e3f:	jmp    27df9 <g_str_equal@plt+0x1fa41>
   27e41:	mov    rax,QWORD PTR [r13+0x8]
   27e45:	lea    rdx,[rax+0x8]
   27e49:	mov    QWORD PTR [r13+0x8],rdx
   27e4d:	jmp    27e1c <g_str_equal@plt+0x1fa64>
   27e4f:	mov    rax,QWORD PTR [r13+0x8]
   27e53:	lea    rdx,[rax+0x8]
   27e57:	mov    QWORD PTR [r13+0x8],rdx
   27e5b:	jmp    27a7c <g_str_equal@plt+0x1f6c4>
   27e60:	mov    rax,QWORD PTR [r13+0x8]
   27e64:	lea    rdx,[rax+0x8]
   27e68:	mov    QWORD PTR [r13+0x8],rdx
   27e6c:	jmp    27bd5 <g_str_equal@plt+0x1f81d>
   27e71:	mov    rax,QWORD PTR [r13+0x8]
   27e75:	lea    rdx,[rax+0x8]
   27e79:	mov    QWORD PTR [r13+0x8],rdx
   27e7d:	jmp    27ccf <g_str_equal@plt+0x1f917>
   27e82:	mov    edx,DWORD PTR [r13+0x0]
   27e86:	cmp    edx,0x2f
   27e89:	ja     27ea8 <g_str_equal@plt+0x1faf0>
   27e8b:	mov    eax,edx
   27e8d:	add    rax,QWORD PTR [r13+0x10]
   27e91:	add    edx,0x8
   27e94:	mov    DWORD PTR [r13+0x0],edx
   27e98:	mov    rdi,QWORD PTR [rax]
   27e9b:	call   11c10 <g_str_equal@plt+0x9858>
   27ea0:	mov    rbp,rax
   27ea3:	jmp    276e0 <g_str_equal@plt+0x1f328>
   27ea8:	mov    rax,QWORD PTR [r13+0x8]
   27eac:	lea    rdx,[rax+0x8]
   27eb0:	mov    QWORD PTR [r13+0x8],rdx
   27eb4:	jmp    27e98 <g_str_equal@plt+0x1fae0>
   27eb6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   27ec0:	push   r13
   27ec2:	push   r12
   27ec4:	push   rbp
   27ec5:	push   rbx
   27ec6:	sub    rsp,0x8
   27eca:	test   rdi,rdi
   27ecd:	je     27f58 <g_str_equal@plt+0x1fba0>
   27ed3:	mov    r13,rsi
   27ed6:	mov    rbp,rdi
   27ed9:	mov    edi,0x18
   27ede:	mov    r12,rdx
   27ee1:	call   80c0 <g_malloc0@plt>
   27ee6:	mov    rsi,r13
   27ee9:	mov    rbx,rax
   27eec:	mov    QWORD PTR [rax+0x10],rbp
   27ef0:	mov    rdi,rax
   27ef3:	lea    rbp,[rbx+0x10]
   27ef7:	call   27340 <g_str_equal@plt+0x1ef88>
   27efc:	mov    rsi,QWORD PTR [rbx]
   27eff:	mov    rdi,r12
   27f02:	mov    r13,rax
   27f05:	call   df30 <g_str_equal@plt+0x5b78>
   27f0a:	jmp    27f1c <g_str_equal@plt+0x1fb64>
   27f0c:	nop    DWORD PTR [rax+0x0]
   27f10:	lea    rdi,[rbx+0x8]
   27f14:	mov    rsi,rbp
   27f17:	call   27100 <g_str_equal@plt+0x1ed48>
   27f1c:	mov    rdi,QWORD PTR [rbx+0x10]
   27f20:	call   8120 <g_queue_is_empty@plt>
   27f25:	test   eax,eax
   27f27:	je     27f10 <g_str_equal@plt+0x1fb58>
   27f29:	mov    rdi,QWORD PTR [rbx+0x8]
   27f2d:	call   7880 <g_free@plt>
   27f32:	mov    rdi,QWORD PTR [rbx+0x10]
   27f36:	call   7bd0 <g_queue_free@plt>
   27f3b:	mov    rdi,rbx
   27f3e:	call   7880 <g_free@plt>
   27f43:	add    rsp,0x8
   27f47:	mov    rax,r13
   27f4a:	pop    rbx
   27f4b:	pop    rbp
   27f4c:	pop    r12
   27f4e:	pop    r13
   27f50:	ret    
   27f51:	nop    DWORD PTR [rax+0x0]
   27f58:	xor    r13d,r13d
   27f5b:	jmp    27f43 <g_str_equal@plt+0x1fb8b>
   27f5d:	nop    DWORD PTR [rax]
   27f60:	xor    edx,edx
   27f62:	jmp    27ec0 <g_str_equal@plt+0x1fb08>
   27f67:	nop    WORD PTR [rax+rax*1+0x0]
   27f70:	test   rsi,rsi
   27f73:	je     28078 <g_str_equal@plt+0x1fcc0>
   27f79:	movzx  ecx,BYTE PTR [rdi]
   27f7c:	test   cl,cl
   27f7e:	je     28078 <g_str_equal@plt+0x1fcc0>
   27f84:	test   cl,cl
   27f86:	lea    r10,[rdi+0x1]
   27f8a:	jns    28018 <g_str_equal@plt+0x1fc60>
   27f90:	cmp    cl,0xfd
   27f93:	push   rbx
   27f94:	movzx  ebx,cl
   27f97:	ja     2800b <g_str_equal@plt+0x1fc53>
   27f99:	and    ecx,0x40
   27f9c:	je     2800b <g_str_equal@plt+0x1fc53>
   27f9e:	xor    r9d,r9d
   27fa1:	mov    r8d,0x80
   27fa7:	jmp    27fb3 <g_str_equal@plt+0x1fbfb>
   27fa9:	nop    DWORD PTR [rax+0x0]
   27fb0:	mov    r9d,r11d
   27fb3:	shr    r8d,1
   27fb6:	lea    r11d,[r9+0x1]
   27fba:	test   ebx,r8d
   27fbd:	jne    27fb0 <g_str_equal@plt+0x1fbf8>
   27fbf:	sub    r9d,0x1
   27fc3:	cmp    r9d,0x4
   27fc7:	ja     28081 <g_str_equal@plt+0x1fcc9>
   27fcd:	lea    eax,[r8-0x1]
   27fd1:	add    rdi,rsi
   27fd4:	mov    r8d,0x1
   27fda:	and    eax,ebx
   27fdc:	jmp    28006 <g_str_equal@plt+0x1fc4e>
   27fde:	xchg   ax,ax
   27fe0:	movzx  ecx,BYTE PTR [r10]
   27fe4:	mov    esi,ecx
   27fe6:	and    esi,0xffffffc0
   27fe9:	cmp    sil,0x80
   27fed:	jne    2800b <g_str_equal@plt+0x1fc53>
   27fef:	mov    esi,ecx
   27ff1:	shl    eax,0x6
   27ff4:	add    r8d,0x1
   27ff8:	and    esi,0x3f
   27ffb:	add    r10,0x1
   27fff:	or     eax,esi
   28001:	cmp    r8d,r11d
   28004:	jae    28020 <g_str_equal@plt+0x1fc68>
   28006:	cmp    rdi,r10
   28009:	jne    27fe0 <g_str_equal@plt+0x1fc28>
   2800b:	mov    eax,0xffffffff
   28010:	mov    QWORD PTR [rdx],r10
   28013:	pop    rbx
   28014:	ret    
   28015:	nop    DWORD PTR [rax]
   28018:	movzx  eax,cl
   2801b:	mov    QWORD PTR [rdx],r10
   2801e:	ret    
   2801f:	nop
   28020:	cmp    eax,0x10ffff
   28025:	jg     2800b <g_str_equal@plt+0x1fc53>
   28027:	lea    ecx,[rax-0xfdd0]
   2802d:	cmp    ecx,0x1f
   28030:	jbe    2800b <g_str_equal@plt+0x1fc53>
   28032:	mov    ecx,eax
   28034:	and    ecx,0xfffe
   2803a:	cmp    ecx,0xfffe
   28040:	je     2800b <g_str_equal@plt+0x1fc53>
   28042:	lea    ecx,[rax-0xd800]
   28048:	cmp    ecx,0x7ff
   2804e:	jbe    2800b <g_str_equal@plt+0x1fc53>
   28050:	lea    rcx,[rip+0x6de9]        # 2ee40 <_fini@@Base+0x5bbc>
   28057:	cmp    DWORD PTR [rcx+r9*4],eax
   2805b:	jle    28010 <g_str_equal@plt+0x1fc58>
   2805d:	test   eax,eax
   2805f:	setne  al
   28062:	cmp    r11d,0x2
   28066:	setne  cl
   28069:	or     eax,ecx
   2806b:	movzx  eax,al
   2806e:	neg    eax
   28070:	jmp    28010 <g_str_equal@plt+0x1fc58>
   28072:	nop    WORD PTR [rax+rax*1+0x0]
   28078:	mov    QWORD PTR [rdx],rdi
   2807b:	mov    eax,0xffffffff
   28080:	ret    
   28081:	lea    rcx,[rip+0x6dd8]        # 2ee60 <_fini@@Base+0x5bdc>
   28088:	lea    rsi,[rip+0x6d61]        # 2edf0 <_fini@@Base+0x5b6c>
   2808f:	lea    rdi,[rip+0x6d92]        # 2ee28 <_fini@@Base+0x5ba4>
   28096:	mov    edx,0x4a
   2809b:	call   7a70 <__assert_fail@plt>
   280a0:	sub    rsp,0x18
   280a4:	mov    rax,QWORD PTR fs:0x28
   280ad:	mov    QWORD PTR [rsp+0x8],rax
   280b2:	xor    eax,eax
   280b4:	movzx  eax,BYTE PTR [rdi]
   280b7:	sub    eax,0x30
   280ba:	cmp    al,0x9
   280bc:	ja     28110 <g_str_equal@plt+0x1fd58>
   280be:	mov    rcx,rsp
   280c1:	mov    edx,0xa
   280c6:	call   aee0 <g_str_equal@plt+0x2b28>
   280cb:	test   eax,eax
   280cd:	jne    28100 <g_str_equal@plt+0x1fd48>
   280cf:	cmp    QWORD PTR [rsp],0x7fffffff
   280d7:	mov    eax,0x7fffffff
   280dc:	cmovbe rax,QWORD PTR [rsp]
   280e1:	mov    rdx,QWORD PTR [rsp+0x8]
   280e6:	xor    rdx,QWORD PTR fs:0x28
   280ef:	jne    28117 <g_str_equal@plt+0x1fd5f>
   280f1:	add    rsp,0x18
   280f5:	ret    
   280f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   28100:	cmp    eax,0xffffffde
   28103:	mov    edx,0x7fffffff
   28108:	cmove  eax,edx
   2810b:	jmp    280e1 <g_str_equal@plt+0x1fd29>
   2810d:	nop    DWORD PTR [rax]
   28110:	mov    eax,0xffffffea
   28115:	jmp    280e1 <g_str_equal@plt+0x1fd29>
   28117:	call   8050 <__stack_chk_fail@plt>
   2811c:	nop    DWORD PTR [rax+0x0]
   28120:	push   rbp
   28121:	push   rbx
   28122:	mov    rbx,rdi
   28125:	lea    rdi,[rip+0x6912]        # 2ea3e <_fini@@Base+0x57ba>
   2812c:	sub    rsp,0x8
   28130:	call   7b80 <g_string_new@plt>
   28135:	test   rbx,rbx
   28138:	mov    rbp,rax
   2813b:	je     28161 <g_str_equal@plt+0x1fda9>
   2813d:	nop    DWORD PTR [rax]
   28140:	mov    esi,0x2e
   28145:	mov    rdi,rbp
   28148:	call   7f50 <g_string_prepend_c@plt>
   2814d:	mov    rsi,QWORD PTR [rbx]
   28150:	mov    rdi,rbp
   28153:	call   7970 <g_string_prepend@plt>
   28158:	mov    rbx,QWORD PTR [rbx+0x8]
   2815c:	test   rbx,rbx
   2815f:	jne    28140 <g_str_equal@plt+0x1fd88>
   28161:	add    rsp,0x8
   28165:	mov    rdi,rbp
   28168:	xor    esi,esi
   2816a:	pop    rbx
   2816b:	pop    rbp
   2816c:	jmp    7d20 <g_string_free@plt>
   28171:	nop    DWORD PTR [rax+rax*1+0x0]
   28176:	nop    WORD PTR cs:[rax+rax*1+0x0]
   28180:	push   r15
   28182:	push   r14
   28184:	mov    r15,r9
   28187:	push   r13
   28189:	push   r12
   2818b:	mov    r13,rsi
   2818e:	push   rbp
   2818f:	push   rbx
   28190:	mov    r12,rdi
   28193:	mov    rbp,rdx
   28196:	mov    r14,rcx
   28199:	sub    rsp,0x18
   2819d:	mov    QWORD PTR [rsp+0x8],r8
   281a2:	call   121a0 <g_str_equal@plt+0x9de8>
   281a7:	test   rax,rax
   281aa:	je     28240 <g_str_equal@plt+0x1fe88>
   281b0:	mov    rbx,rax
   281b3:	mov    eax,DWORD PTR [rax]
   281b5:	mov    r8,QWORD PTR [rsp+0x8]
   281ba:	lea    edx,[rax-0x1]
   281bd:	cmp    edx,0x5
   281c0:	ja     282bf <g_str_equal@plt+0x1ff07>
   281c6:	test   rbp,rbp
   281c9:	je     28200 <g_str_equal@plt+0x1fe48>
   281cb:	cmp    eax,0x3
   281ce:	mov    rbx,rbp
   281d1:	jne    28260 <g_str_equal@plt+0x1fea8>
   281d7:	mov    rdx,rbx
   281da:	mov    rsi,r13
   281dd:	mov    rdi,r12
   281e0:	call   11ff0 <g_str_equal@plt+0x9c38>
   281e5:	add    rsp,0x18
   281e9:	mov    rax,rbx
   281ec:	pop    rbx
   281ed:	pop    rbp
   281ee:	pop    r12
   281f0:	pop    r13
   281f2:	pop    r14
   281f4:	pop    r15
   281f6:	ret    
   281f7:	nop    WORD PTR [rax+rax*1+0x0]
   28200:	cmp    eax,0x4
   28203:	je     281e5 <g_str_equal@plt+0x1fe2d>
   28205:	sub    rsp,0x8
   28209:	mov    r9d,r8d
   2820c:	lea    rsi,[rip+0x6d2d]        # 2ef40 <_fini@@Base+0x5cbc>
   28213:	push   r14
   28215:	lea    r8,[rip+0x6cfc]        # 2ef18 <_fini@@Base+0x5c94>
   2821c:	lea    rcx,[rip+0x6e0d]        # 2f030 <_fini@@Base+0x5dac>
   28223:	mov    rdi,r15
   28226:	sub    r9d,r14d
   28229:	mov    edx,0x91
   2822e:	xor    eax,eax
   28230:	xor    ebx,ebx
   28232:	call   db00 <g_str_equal@plt+0x5748>
   28237:	pop    rsi
   28238:	pop    rdi
   28239:	jmp    281e5 <g_str_equal@plt+0x1fe2d>
   2823b:	nop    DWORD PTR [rax+rax*1+0x0]
   28240:	test   rbp,rbp
   28243:	je     28250 <g_str_equal@plt+0x1fe98>
   28245:	mov    rbx,rbp
   28248:	jmp    281d7 <g_str_equal@plt+0x1fe1f>
   2824a:	nop    WORD PTR [rax+rax*1+0x0]
   28250:	call   11fa0 <g_str_equal@plt+0x9be8>
   28255:	mov    rbx,rax
   28258:	jmp    281d7 <g_str_equal@plt+0x1fe1f>
   2825d:	nop    DWORD PTR [rax]
   28260:	sub    rsp,0x8
   28264:	mov    r9d,r8d
   28267:	lea    rcx,[rip+0x6dc2]        # 2f030 <_fini@@Base+0x5dac>
   2826e:	push   r14
   28270:	lea    r8,[rip+0x6ca1]        # 2ef18 <_fini@@Base+0x5c94>
   28277:	lea    rsi,[rip+0x6cc2]        # 2ef40 <_fini@@Base+0x5cbc>
   2827e:	xor    eax,eax
   28280:	sub    r9d,r14d
   28283:	mov    edx,0x91
   28288:	mov    rdi,r15
   2828b:	call   db00 <g_str_equal@plt+0x5748>
   28290:	mov    rax,QWORD PTR [rbp+0x8]
   28294:	pop    rdx
   28295:	pop    rcx
   28296:	test   rax,rax
   28299:	je     282de <g_str_equal@plt+0x1ff26>
   2829b:	sub    rax,0x1
   2829f:	test   rax,rax
   282a2:	mov    QWORD PTR [rbx+0x8],rax
   282a6:	je     282b0 <g_str_equal@plt+0x1fef8>
   282a8:	xor    ebx,ebx
   282aa:	jmp    281e5 <g_str_equal@plt+0x1fe2d>
   282af:	nop
   282b0:	mov    rdi,rbx
   282b3:	xor    ebx,ebx
   282b5:	call   12960 <g_str_equal@plt+0xa5a8>
   282ba:	jmp    281e5 <g_str_equal@plt+0x1fe2d>
   282bf:	lea    rcx,[rip+0x6d82]        # 2f048 <_fini@@Base+0x5dc4>
   282c6:	lea    rsi,[rip+0x25cb]        # 2a898 <_fini@@Base+0x1614>
   282cd:	lea    rdi,[rip+0x260c]        # 2a8e0 <_fini@@Base+0x165c>
   282d4:	mov    edx,0x7f
   282d9:	call   7a70 <__assert_fail@plt>
   282de:	call   85c4 <g_str_equal@plt+0x20c>
   282e3:	nop    DWORD PTR [rax]
   282e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   282f0:	push   r15
   282f2:	push   r14
   282f4:	mov    r15,rsi
   282f7:	push   r13
   282f9:	push   r12
   282fb:	push   rbp
   282fc:	push   rbx
   282fd:	mov    rbx,rdi
   28300:	sub    rsp,0x38
   28304:	mov    rax,QWORD PTR fs:0x28
   2830d:	mov    QWORD PTR [rsp+0x28],rax
   28312:	xor    eax,eax
   28314:	mov    QWORD PTR [rsp],rdx
   28318:	mov    QWORD PTR [rsp+0x18],rsi
   2831d:	call   12510 <g_str_equal@plt+0xa158>
   28322:	mov    r14,rax
   28325:	lea    rax,[rsp+0x10]
   2832a:	test   r14,r14
   2832d:	mov    QWORD PTR [rsp+0x8],rax
   28332:	je     2844a <g_str_equal@plt+0x20092>
   28338:	xor    r12d,r12d
   2833b:	xor    ebp,ebp
   2833d:	mov    r13d,0x1
   28343:	jmp    2835f <g_str_equal@plt+0x1ffa7>
   28345:	nop    DWORD PTR [rax]
   28348:	mov    rsi,r14
   2834b:	mov    rdi,rbx
   2834e:	call   12540 <g_str_equal@plt+0xa188>
   28353:	test   rax,rax
   28356:	mov    r14,rax
   28359:	je     28470 <g_str_equal@plt+0x200b8>
   2835f:	mov    rdi,QWORD PTR [r14]
   28362:	xor    esi,esi
   28364:	call   280a0 <g_str_equal@plt+0x1fce8>
   28369:	mov    rdi,QWORD PTR [r14+0x8]
   2836d:	test   eax,eax
   2836f:	cmovs  r12d,r13d
   28373:	cmovns ebp,r13d
   28377:	test   rdi,rdi
   2837a:	je     28348 <g_str_equal@plt+0x1ff90>
   2837c:	mov    eax,DWORD PTR [rdi]
   2837e:	lea    edx,[rax-0x1]
   28381:	cmp    edx,0x5
   28384:	ja     285f0 <g_str_equal@plt+0x20238>
   2838a:	cmp    eax,0x4
   2838d:	jne    28348 <g_str_equal@plt+0x1ff90>
   2838f:	mov    rax,QWORD PTR [r14]
   28392:	mov    rdx,QWORD PTR [rsp]
   28396:	mov    rsi,QWORD PTR [rsp+0x8]
   2839b:	mov    QWORD PTR [rsp+0x10],rax
   283a0:	call   282f0 <g_str_equal@plt+0x1ff38>
   283a5:	test   rax,rax
   283a8:	je     28448 <g_str_equal@plt+0x20090>
   283ae:	cmp    QWORD PTR [r14+0x8],rax
   283b2:	je     28348 <g_str_equal@plt+0x1ff90>
   283b4:	mov    rsi,QWORD PTR [r14]
   283b7:	mov    rdx,rax
   283ba:	mov    rdi,rbx
   283bd:	call   11ff0 <g_str_equal@plt+0x9c38>
   283c2:	jmp    28348 <g_str_equal@plt+0x1ff90>
   283c4:	xor    r13d,r13d
   283c7:	nop    WORD PTR [rax+rax*1+0x0]
   283d0:	mov    rdi,r15
   283d3:	call   28120 <g_str_equal@plt+0x1fd68>
   283d8:	sub    rsp,0x8
   283dc:	lea    r8,[rip+0x6aa8]        # 2ee8b <_fini@@Base+0x5c07>
   283e3:	lea    rcx,[rip+0x6c2e]        # 2f018 <_fini@@Base+0x5d94>
   283ea:	push   r13
   283ec:	mov    rdi,QWORD PTR [rsp+0x10]
   283f1:	lea    rsi,[rip+0x6b48]        # 2ef40 <_fini@@Base+0x5cbc>
   283f8:	mov    r9,rax
   283fb:	mov    edx,0x177
   28400:	mov    rbp,rax
   28403:	xor    eax,eax
   28405:	call   db00 <g_str_equal@plt+0x5748>
   2840a:	mov    rdi,rbp
   2840d:	call   7880 <g_free@plt>
   28412:	mov    rdi,r12
   28415:	call   7880 <g_free@plt>
   2841a:	test   rbx,rbx
   2841d:	pop    rax
   2841e:	pop    rdx
   2841f:	je     28448 <g_str_equal@plt+0x20090>
   28421:	mov    rax,QWORD PTR [rbx+0x8]
   28425:	test   rax,rax
   28428:	je     2862e <g_str_equal@plt+0x20276>
   2842e:	sub    rax,0x1
   28432:	test   rax,rax
   28435:	mov    QWORD PTR [rbx+0x8],rax
   28439:	jne    28448 <g_str_equal@plt+0x20090>
   2843b:	mov    rdi,rbx
   2843e:	call   12960 <g_str_equal@plt+0xa5a8>
   28443:	nop    DWORD PTR [rax+rax*1+0x0]
   28448:	xor    ebx,ebx
   2844a:	mov    rcx,QWORD PTR [rsp+0x28]
   2844f:	xor    rcx,QWORD PTR fs:0x28
   28458:	mov    rax,rbx
   2845b:	jne    28633 <g_str_equal@plt+0x2027b>
   28461:	add    rsp,0x38
   28465:	pop    rbx
   28466:	pop    rbp
   28467:	pop    r12
   28469:	pop    r13
   2846b:	pop    r14
   2846d:	pop    r15
   2846f:	ret    
   28470:	test   bpl,bpl
   28473:	je     2844a <g_str_equal@plt+0x20092>
   28475:	test   r12b,r12b
   28478:	jne    28579 <g_str_equal@plt+0x201c1>
   2847e:	mov    rdi,rbx
   28481:	call   12260 <g_str_equal@plt+0x9ea8>
   28486:	mov    r13,rax
   28489:	lea    rax,[rax+0x1]
   2848d:	mov    esi,0x8
   28492:	mov    rdi,rax
   28495:	mov    QWORD PTR [rsp+0x8],rax
   2849a:	call   7c80 <g_malloc0_n@plt>
   2849f:	mov    rdi,rbx
   284a2:	mov    r12,rax
   284a5:	call   12510 <g_str_equal@plt+0xa158>
   284aa:	test   rax,rax
   284ad:	mov    r14,rax
   284b0:	je     285bb <g_str_equal@plt+0x20203>
   284b6:	mov    ebp,0xffffffff
   284bb:	nop    DWORD PTR [rax+rax*1+0x0]
   284c0:	mov    rdi,QWORD PTR [r14]
   284c3:	xor    esi,esi
   284c5:	call   280a0 <g_str_equal@plt+0x1fce8>
   284ca:	test   eax,eax
   284cc:	js     2860f <g_str_equal@plt+0x20257>
   284d2:	cmp    ebp,eax
   284d4:	cmovl  ebp,eax
   284d7:	cdqe   
   284d9:	cmp    r13,rax
   284dc:	jbe    284e6 <g_str_equal@plt+0x2012e>
   284de:	mov    rcx,QWORD PTR [r14+0x8]
   284e2:	mov    QWORD PTR [r12+rax*8],rcx
   284e6:	mov    rsi,r14
   284e9:	mov    rdi,rbx
   284ec:	call   12540 <g_str_equal@plt+0xa188>
   284f1:	test   rax,rax
   284f4:	mov    r14,rax
   284f7:	jne    284c0 <g_str_equal@plt+0x20108>
   284f9:	call   22010 <g_str_equal@plt+0x19c58>
   284fe:	mov    rbx,rax
   28501:	mov    rax,QWORD PTR [rsp+0x8]
   28506:	cmp    QWORD PTR [r12+rax*8-0x8],0x0
   2850c:	jne    285d0 <g_str_equal@plt+0x20218>
   28512:	add    ebp,0x1
   28515:	movsxd rbp,ebp
   28518:	cmp    rbp,rax
   2851b:	cmova  rbp,rax
   2851f:	test   rbp,rbp
   28522:	je     2856c <g_str_equal@plt+0x201b4>
   28524:	mov    rax,QWORD PTR [r12]
   28528:	test   rax,rax
   2852b:	je     283c4 <g_str_equal@plt+0x2000c>
   28531:	mov    rdx,r12
   28534:	xor    r13d,r13d
   28537:	jmp    28550 <g_str_equal@plt+0x20198>
   28539:	nop    DWORD PTR [rax+0x0]
   28540:	lea    rdx,[r12+rax*8]
   28544:	mov    rax,QWORD PTR [rdx]
   28547:	test   rax,rax
   2854a:	je     283d0 <g_str_equal@plt+0x20018>
   28550:	add    QWORD PTR [rax+0x8],0x1
   28555:	add    r13d,0x1
   28559:	mov    rdi,rbx
   2855c:	mov    rsi,QWORD PTR [rdx]
   2855f:	call   220e0 <g_str_equal@plt+0x19d28>
   28564:	movsxd rax,r13d
   28567:	cmp    rax,rbp
   2856a:	jb     28540 <g_str_equal@plt+0x20188>
   2856c:	mov    rdi,r12
   2856f:	call   7880 <g_free@plt>
   28574:	jmp    2844a <g_str_equal@plt+0x20092>
   28579:	mov    rdi,r15
   2857c:	call   28120 <g_str_equal@plt+0x1fd68>
   28581:	mov    rdi,QWORD PTR [rsp]
   28585:	lea    r8,[rip+0x69ec]        # 2ef78 <_fini@@Base+0x5cf4>
   2858c:	lea    rcx,[rip+0x6a85]        # 2f018 <_fini@@Base+0x5d94>
   28593:	lea    rsi,[rip+0x69a6]        # 2ef40 <_fini@@Base+0x5cbc>
   2859a:	mov    rbx,rax
   2859d:	mov    r9,rax
   285a0:	mov    edx,0x14e
   285a5:	xor    eax,eax
   285a7:	call   db00 <g_str_equal@plt+0x5748>
   285ac:	mov    rdi,rbx
   285af:	xor    ebx,ebx
   285b1:	call   7880 <g_free@plt>
   285b6:	jmp    2844a <g_str_equal@plt+0x20092>
   285bb:	call   22010 <g_str_equal@plt+0x19c58>
   285c0:	mov    rbx,rax
   285c3:	mov    rax,QWORD PTR [rsp+0x8]
   285c8:	cmp    QWORD PTR [r12+rax*8-0x8],0x0
   285ce:	je     2856c <g_str_equal@plt+0x201b4>
   285d0:	lea    rcx,[rip+0x6a31]        # 2f008 <_fini@@Base+0x5d84>
   285d7:	lea    rsi,[rip+0x6962]        # 2ef40 <_fini@@Base+0x5cbc>
   285de:	lea    rdi,[rip+0x6899]        # 2ee7e <_fini@@Base+0x5bfa>
   285e5:	mov    edx,0x173
   285ea:	call   7a70 <__assert_fail@plt>
   285ef:	nop
   285f0:	lea    rcx,[rip+0x6a51]        # 2f048 <_fini@@Base+0x5dc4>
   285f7:	lea    rsi,[rip+0x229a]        # 2a898 <_fini@@Base+0x1614>
   285fe:	lea    rdi,[rip+0x22db]        # 2a8e0 <_fini@@Base+0x165c>
   28605:	mov    edx,0x7f
   2860a:	call   7a70 <__assert_fail@plt>
   2860f:	lea    rcx,[rip+0x69f2]        # 2f008 <_fini@@Base+0x5d84>
   28616:	lea    rsi,[rip+0x6923]        # 2ef40 <_fini@@Base+0x5cbc>
   2861d:	lea    rdi,[rip+0x684f]        # 2ee73 <_fini@@Base+0x5bef>
   28624:	mov    edx,0x15c
   28629:	call   7a70 <__assert_fail@plt>
   2862e:	call   85c4 <g_str_equal@plt+0x20c>
   28633:	call   8050 <__stack_chk_fail@plt>
   28638:	nop    DWORD PTR [rax+rax*1+0x0]
   28640:	push   r15
   28642:	push   r14
   28644:	push   r13
   28646:	push   r12
   28648:	push   rbp
   28649:	push   rbx
   2864a:	sub    rsp,0xe8
   28651:	mov    rax,QWORD PTR fs:0x28
   2865a:	mov    QWORD PTR [rsp+0xd8],rax
   28662:	xor    eax,eax
   28664:	mov    QWORD PTR [rsp+0x20],rdi
   28669:	mov    QWORD PTR [rsp+0x28],rsi
   2866e:	mov    QWORD PTR [rsp+0x10],rdx
   28673:	call   11fa0 <g_str_equal@plt+0x9be8>
   28678:	mov    QWORD PTR [rsp+0x30],rax
   2867d:	lea    rax,[rsp+0x48]
   28682:	mov    QWORD PTR [rsp+0x18],rax
   28687:	lea    rax,[rsp+0x50]
   2868c:	mov    QWORD PTR [rsp+0x8],rax
   28691:	mov    rax,QWORD PTR [rsp+0x20]
   28696:	cmp    BYTE PTR [rax],0x0
   28699:	je     289a8 <g_str_equal@plt+0x205f0>
   2869f:	mov    rbp,QWORD PTR [rsp+0x20]
   286a4:	lea    rsi,[rip+0x6803]        # 2eeae <_fini@@Base+0x5c2a>
   286ab:	mov    rdi,rbp
   286ae:	mov    r13,rbp
   286b1:	call   8180 <strcspn@plt>
   286b6:	mov    rcx,QWORD PTR [rsp+0x28]
   286bb:	add    r13,rax
   286be:	mov    QWORD PTR [rsp+0x38],rax
   286c3:	test   rcx,rcx
   286c6:	je     287e0 <g_str_equal@plt+0x20428>
   286cc:	test   rax,rax
   286cf:	je     287e0 <g_str_equal@plt+0x20428>
   286d5:	cmp    BYTE PTR [r13+0x0],0x3d
   286da:	je     286f2 <g_str_equal@plt+0x2033a>
   286dc:	mov    rbp,rcx
   286df:	mov    rdi,rcx
   286e2:	mov    r13,rbp
   286e5:	call   7cd0 <strlen@plt>
   286ea:	mov    QWORD PTR [rsp+0x38],rax
   286ef:	add    r13,rax
   286f2:	mov    r12,QWORD PTR [rsp+0x30]
   286f7:	mov    r14,rbp
   286fa:	jmp    287b9 <g_str_equal@plt+0x20401>
   286ff:	nop
   28700:	mov    rsi,QWORD PTR [rsp+0x18]
   28705:	mov    rdi,r14
   28708:	call   280a0 <g_str_equal@plt+0x1fce8>
   2870d:	test   eax,eax
   2870f:	js     287c2 <g_str_equal@plt+0x2040a>
   28715:	mov    rbx,QWORD PTR [rsp+0x48]
   2871a:	sub    rbx,r14
   2871d:	lea    r15,[r14+rbx*1]
   28721:	cmp    r15,r13
   28724:	ja     28a9b <g_str_equal@plt+0x206e3>
   2872a:	test   rbx,rbx
   2872d:	je     287f0 <g_str_equal@plt+0x20438>
   28733:	cmp    r15,r13
   28736:	jae    28742 <g_str_equal@plt+0x2038a>
   28738:	cmp    BYTE PTR [r15],0x2e
   2873c:	jne    287f0 <g_str_equal@plt+0x20438>
   28742:	cmp    rbx,0x7f
   28746:	ja     28898 <g_str_equal@plt+0x204e0>
   2874c:	cmp    rbp,r14
   2874f:	je     2878f <g_str_equal@plt+0x203d7>
   28751:	mov    r9,QWORD PTR [rsp+0x10]
   28756:	mov    rsi,QWORD PTR [rsp+0x8]
   2875b:	lea    r8,[r14-0x1]
   2875f:	xor    edx,edx
   28761:	mov    rdi,r12
   28764:	mov    rcx,rbp
   28767:	call   28180 <g_str_equal@plt+0x1fdc8>
   2876c:	test   rax,rax
   2876f:	mov    r12,rax
   28772:	je     2882d <g_str_equal@plt+0x20475>
   28778:	mov    eax,DWORD PTR [rax]
   2877a:	lea    edx,[rax-0x1]
   2877d:	cmp    edx,0x5
   28780:	ja     28aba <g_str_equal@plt+0x20702>
   28786:	cmp    eax,0x4
   28789:	jne    28ad9 <g_str_equal@plt+0x20721>
   2878f:	mov    rdi,QWORD PTR [rsp+0x8]
   28794:	mov    ecx,0x80
   28799:	mov    rdx,rbx
   2879c:	mov    rsi,r14
   2879f:	call   7b60 <__memcpy_chk@plt>
   287a4:	movzx  eax,BYTE PTR [r15]
   287a8:	mov    BYTE PTR [rsp+rbx*1+0x50],0x0
   287ad:	cmp    al,0x2e
   287af:	jne    288f0 <g_str_equal@plt+0x20538>
   287b5:	lea    r14,[r15+0x1]
   287b9:	cmp    rbp,r14
   287bc:	jne    28700 <g_str_equal@plt+0x20348>
   287c2:	xor    esi,esi
   287c4:	mov    rdi,r14
   287c7:	mov    ebx,0x0
   287cc:	call   21f30 <g_str_equal@plt+0x19b78>
   287d1:	test   eax,eax
   287d3:	cmovs  eax,ebx
   287d6:	movsxd rbx,eax
   287d9:	jmp    2871d <g_str_equal@plt+0x20365>
   287de:	xchg   ax,ax
   287e0:	mov    rbp,QWORD PTR [rsp+0x20]
   287e5:	jmp    286f2 <g_str_equal@plt+0x2033a>
   287ea:	nop    WORD PTR [rax+rax*1+0x0]
   287f0:	cmp    QWORD PTR [rsp+0x28],rbp
   287f5:	je     28b1c <g_str_equal@plt+0x20764>
   287fb:	sub    rsp,0x8
   287ff:	lea    r8,[rip+0x66d1]        # 2eed7 <_fini@@Base+0x5c53>
   28806:	lea    rcx,[rip+0x6853]        # 2f060 <_fini@@Base+0x5ddc>
   2880d:	push   rbp
   2880e:	mov    r9d,DWORD PTR [rsp+0x48]
   28813:	mov    edx,0xcf
   28818:	mov    rdi,QWORD PTR [rsp+0x20]
   2881d:	lea    rsi,[rip+0x671c]        # 2ef40 <_fini@@Base+0x5cbc>
   28824:	xor    eax,eax
   28826:	call   db00 <g_str_equal@plt+0x5748>
   2882b:	pop    rax
   2882c:	pop    rdx
   2882d:	mov    rax,QWORD PTR [rsp+0x30]
   28832:	test   rax,rax
   28835:	je     2885a <g_str_equal@plt+0x204a2>
   28837:	mov    rax,QWORD PTR [rax+0x8]
   2883b:	test   rax,rax
   2883e:	je     28b3b <g_str_equal@plt+0x20783>
   28844:	mov    rcx,QWORD PTR [rsp+0x30]
   28849:	sub    rax,0x1
   2884d:	test   rax,rax
   28850:	mov    QWORD PTR [rcx+0x8],rax
   28854:	je     28a60 <g_str_equal@plt+0x206a8>
   2885a:	mov    QWORD PTR [rsp+0x30],0x0
   28863:	mov    rcx,QWORD PTR [rsp+0xd8]
   2886b:	xor    rcx,QWORD PTR fs:0x28
   28874:	mov    rax,QWORD PTR [rsp+0x30]
   28879:	jne    28b17 <g_str_equal@plt+0x2075f>
   2887f:	add    rsp,0xe8
   28886:	pop    rbx
   28887:	pop    rbp
   28888:	pop    r12
   2888a:	pop    r13
   2888c:	pop    r14
   2888e:	pop    r15
   28890:	ret    
   28891:	nop    DWORD PTR [rax+0x0]
   28898:	cmp    QWORD PTR [rsp+0x28],rbp
   2889d:	je     28af8 <g_str_equal@plt+0x20740>
   288a3:	cmp    rbp,r14
   288a6:	jne    288b4 <g_str_equal@plt+0x204fc>
   288a8:	cmp    r15,r13
   288ab:	lea    r9,[rip+0x618c]        # 2ea3e <_fini@@Base+0x57ba>
   288b2:	je     288bb <g_str_equal@plt+0x20503>
   288b4:	lea    r9,[rip+0x65e9]        # 2eea4 <_fini@@Base+0x5c20>
   288bb:	push   r14
   288bd:	push   rbx
   288be:	lea    rcx,[rip+0x679b]        # 2f060 <_fini@@Base+0x5ddc>
   288c5:	mov    rdi,QWORD PTR [rsp+0x20]
   288ca:	lea    rsi,[rip+0x666f]        # 2ef40 <_fini@@Base+0x5cbc>
   288d1:	lea    r8,[rip+0x66c8]        # 2efa0 <_fini@@Base+0x5d1c>
   288d8:	mov    edx,0xd6
   288dd:	xor    eax,eax
   288df:	call   db00 <g_str_equal@plt+0x5748>
   288e4:	pop    rcx
   288e5:	pop    rsi
   288e6:	jmp    2882d <g_str_equal@plt+0x20475>
   288eb:	nop    DWORD PTR [rax+rax*1+0x0]
   288f0:	cmp    QWORD PTR [rsp+0x28],rbp
   288f5:	je     28a2f <g_str_equal@plt+0x20677>
   288fb:	cmp    al,0x3d
   288fd:	jne    28a78 <g_str_equal@plt+0x206c0>
   28903:	lea    rax,[r15+0x1]
   28907:	mov    QWORD PTR [rsp+0x20],rax
   2890c:	call   11c30 <g_str_equal@plt+0x9878>
   28911:	mov    r15,QWORD PTR [rsp+0x20]
   28916:	mov    rbx,rax
   28919:	movzx  eax,BYTE PTR [r15]
   2891d:	test   al,al
   2891f:	jne    28946 <g_str_equal@plt+0x2058e>
   28921:	jmp    2896d <g_str_equal@plt+0x205b5>
   28923:	nop    DWORD PTR [rax+rax*1+0x0]
   28928:	mov    rax,r14
   2892b:	movsx  esi,BYTE PTR [r15]
   2892f:	mov    r14,r15
   28932:	mov    r15,rax
   28935:	mov    rdi,rbx
   28938:	call   11d00 <g_str_equal@plt+0x9948>
   2893d:	movzx  eax,BYTE PTR [r14+0x1]
   28942:	test   al,al
   28944:	je     28968 <g_str_equal@plt+0x205b0>
   28946:	cmp    al,0x2c
   28948:	lea    r14,[r15+0x1]
   2894c:	jne    28928 <g_str_equal@plt+0x20570>
   2894e:	movsx  esi,BYTE PTR [r15+0x1]
   28953:	cmp    sil,0x2c
   28957:	jne    289f8 <g_str_equal@plt+0x20640>
   2895d:	add    r15,0x2
   28961:	jmp    28935 <g_str_equal@plt+0x2057d>
   28963:	nop    DWORD PTR [rax+rax*1+0x0]
   28968:	mov    QWORD PTR [rsp+0x20],r15
   2896d:	mov    r9,QWORD PTR [rsp+0x10]
   28972:	mov    rsi,QWORD PTR [rsp+0x8]
   28977:	mov    r8,r13
   2897a:	mov    rcx,rbp
   2897d:	mov    rdx,rbx
   28980:	mov    rdi,r12
   28983:	call   28180 <g_str_equal@plt+0x1fdc8>
   28988:	test   rax,rax
   2898b:	je     2882d <g_str_equal@plt+0x20475>
   28991:	mov    rax,QWORD PTR [rsp+0x20]
   28996:	mov    QWORD PTR [rsp+0x28],0x0
   2899f:	cmp    BYTE PTR [rax],0x0
   289a2:	jne    2869f <g_str_equal@plt+0x202e7>
   289a8:	mov    rdx,QWORD PTR [rsp+0x10]
   289ad:	mov    rdi,QWORD PTR [rsp+0x30]
   289b2:	xor    esi,esi
   289b4:	call   282f0 <g_str_equal@plt+0x1ff38>
   289b9:	test   rax,rax
   289bc:	je     2882d <g_str_equal@plt+0x20475>
   289c2:	mov    rcx,QWORD PTR [rsp+0x30]
   289c7:	test   rcx,rcx
   289ca:	je     289d5 <g_str_equal@plt+0x2061d>
   289cc:	cmp    rax,rcx
   289cf:	je     28863 <g_str_equal@plt+0x204ab>
   289d5:	lea    rcx,[rip+0x66bc]        # 2f098 <_fini@@Base+0x5e14>
   289dc:	lea    rsi,[rip+0x655d]        # 2ef40 <_fini@@Base+0x5cbc>
   289e3:	lea    rdi,[rip+0x650e]        # 2eef8 <_fini@@Base+0x5c74>
   289ea:	mov    edx,0x1a2
   289ef:	call   7a70 <__assert_fail@plt>
   289f4:	nop    DWORD PTR [rax+0x0]
   289f8:	mov    r9,QWORD PTR [rsp+0x10]
   289fd:	mov    rsi,QWORD PTR [rsp+0x8]
   28a02:	mov    r8,r13
   28a05:	mov    rcx,rbp
   28a08:	mov    rdx,rbx
   28a0b:	mov    rdi,r12
   28a0e:	call   28180 <g_str_equal@plt+0x1fdc8>
   28a13:	test   rax,rax
   28a16:	je     2882d <g_str_equal@plt+0x20475>
   28a1c:	test   r14,r14
   28a1f:	je     2882d <g_str_equal@plt+0x20475>
   28a25:	mov    QWORD PTR [rsp+0x20],r14
   28a2a:	jmp    28991 <g_str_equal@plt+0x205d9>
   28a2f:	test   al,al
   28a31:	je     2890c <g_str_equal@plt+0x20554>
   28a37:	lea    rcx,[rip+0x6642]        # 2f080 <_fini@@Base+0x5dfc>
   28a3e:	lea    rsi,[rip+0x64fb]        # 2ef40 <_fini@@Base+0x5cbc>
   28a45:	lea    rdi,[rip+0x64a8]        # 2eef4 <_fini@@Base+0x5c70>
   28a4c:	mov    edx,0xef
   28a51:	call   7a70 <__assert_fail@plt>
   28a56:	nop    WORD PTR cs:[rax+rax*1+0x0]
   28a60:	mov    rdi,QWORD PTR [rsp+0x30]
   28a65:	call   12960 <g_str_equal@plt+0xa5a8>
   28a6a:	mov    QWORD PTR [rsp+0x30],0x0
   28a73:	jmp    28863 <g_str_equal@plt+0x204ab>
   28a78:	sub    rsp,0x8
   28a7c:	mov    r9d,r15d
   28a7f:	lea    r8,[rip+0x653a]        # 2efc0 <_fini@@Base+0x5d3c>
   28a86:	push   rbp
   28a87:	sub    r9d,ebp
   28a8a:	lea    rcx,[rip+0x65cf]        # 2f060 <_fini@@Base+0x5ddc>
   28a91:	mov    edx,0xf4
   28a96:	jmp    28818 <g_str_equal@plt+0x20460>
   28a9b:	lea    rcx,[rip+0x65de]        # 2f080 <_fini@@Base+0x5dfc>
   28aa2:	lea    rsi,[rip+0x6497]        # 2ef40 <_fini@@Base+0x5cbc>
   28aa9:	lea    rdi,[rip+0x6401]        # 2eeb1 <_fini@@Base+0x5c2d>
   28ab0:	mov    edx,0xcb
   28ab5:	call   7a70 <__assert_fail@plt>
   28aba:	lea    rcx,[rip+0x6587]        # 2f048 <_fini@@Base+0x5dc4>
   28ac1:	lea    rsi,[rip+0x1dd0]        # 2a898 <_fini@@Base+0x1614>
   28ac8:	lea    rdi,[rip+0x1e11]        # 2a8e0 <_fini@@Base+0x165c>
   28acf:	mov    edx,0x7f
   28ad4:	call   7a70 <__assert_fail@plt>
   28ad9:	lea    rcx,[rip+0x65a0]        # 2f080 <_fini@@Base+0x5dfc>
   28ae0:	lea    rsi,[rip+0x6459]        # 2ef40 <_fini@@Base+0x5cbc>
   28ae7:	lea    rdi,[rip+0x6402]        # 2eef0 <_fini@@Base+0x5c6c>
   28aee:	mov    edx,0xe1
   28af3:	call   7a70 <__assert_fail@plt>
   28af8:	lea    rcx,[rip+0x6581]        # 2f080 <_fini@@Base+0x5dfc>
   28aff:	lea    rsi,[rip+0x643a]        # 2ef40 <_fini@@Base+0x5cbc>
   28b06:	lea    rdi,[rip+0x63b7]        # 2eec4 <_fini@@Base+0x5c40>
   28b0d:	mov    edx,0xd3
   28b12:	call   7a70 <__assert_fail@plt>
   28b17:	call   8050 <__stack_chk_fail@plt>
   28b1c:	lea    rcx,[rip+0x655d]        # 2f080 <_fini@@Base+0x5dfc>
   28b23:	lea    rsi,[rip+0x6416]        # 2ef40 <_fini@@Base+0x5cbc>
   28b2a:	lea    rdi,[rip+0x6393]        # 2eec4 <_fini@@Base+0x5c40>
   28b31:	mov    edx,0xcd
   28b36:	call   7a70 <__assert_fail@plt>
   28b3b:	call   85c4 <g_str_equal@plt+0x20c>
   28b40:	push   rbx
   28b41:	sub    rsp,0x10
   28b45:	test   rdi,rdi
   28b48:	mov    QWORD PTR [rsp+0x8],rdi
   28b4d:	je     28b70 <g_str_equal@plt+0x207b8>
   28b4f:	call   21d80 <g_str_equal@plt+0x199c8>
   28b54:	lea    rdx,[rsp+0x8]
   28b59:	mov    rbx,rax
   28b5c:	mov    rdi,rax
   28b5f:	xor    ecx,ecx
   28b61:	xor    esi,esi
   28b63:	call   23760 <g_str_equal@plt+0x1b3a8>
   28b68:	mov    rdi,rbx
   28b6b:	call   20040 <g_str_equal@plt+0x17c88>
   28b70:	add    rsp,0x10
   28b74:	pop    rbx
   28b75:	ret    
   28b76:	nop    WORD PTR cs:[rax+rax*1+0x0]
   28b80:	push   rbx
   28b81:	sub    rsp,0x10
   28b85:	test   rdi,rdi
   28b88:	mov    QWORD PTR [rsp+0x8],rdi
   28b8d:	je     28bb0 <g_str_equal@plt+0x207f8>
   28b8f:	call   21d80 <g_str_equal@plt+0x199c8>
   28b94:	lea    rdx,[rsp+0x8]
   28b99:	mov    rbx,rax
   28b9c:	mov    rdi,rax
   28b9f:	xor    ecx,ecx
   28ba1:	xor    esi,esi
   28ba3:	call   23870 <g_str_equal@plt+0x1b4b8>
   28ba8:	mov    rdi,rbx
   28bab:	call   20040 <g_str_equal@plt+0x17c88>
   28bb0:	add    rsp,0x10
   28bb4:	pop    rbx
   28bb5:	ret    
   28bb6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   28bc0:	push   rbx
   28bc1:	sub    rsp,0x10
   28bc5:	test   rdi,rdi
   28bc8:	mov    QWORD PTR [rsp+0x8],rdi
   28bcd:	je     28bf0 <g_str_equal@plt+0x20838>
   28bcf:	call   21d80 <g_str_equal@plt+0x199c8>
   28bd4:	lea    rdx,[rsp+0x8]
   28bd9:	mov    rbx,rax
   28bdc:	mov    rdi,rax
   28bdf:	xor    ecx,ecx
   28be1:	xor    esi,esi
   28be3:	call   23980 <g_str_equal@plt+0x1b5c8>
   28be8:	mov    rdi,rbx
   28beb:	call   20040 <g_str_equal@plt+0x17c88>
   28bf0:	add    rsp,0x10
   28bf4:	pop    rbx
   28bf5:	ret    
   28bf6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   28c00:	push   rbx
   28c01:	sub    rsp,0x10
   28c05:	test   rdi,rdi
   28c08:	mov    QWORD PTR [rsp+0x8],rdi
   28c0d:	je     28c30 <g_str_equal@plt+0x20878>
   28c0f:	call   21d80 <g_str_equal@plt+0x199c8>
   28c14:	lea    rdx,[rsp+0x8]
   28c19:	mov    rbx,rax
   28c1c:	mov    rdi,rax
   28c1f:	xor    ecx,ecx
   28c21:	xor    esi,esi
   28c23:	call   23a90 <g_str_equal@plt+0x1b6d8>
   28c28:	mov    rdi,rbx
   28c2b:	call   20040 <g_str_equal@plt+0x17c88>
   28c30:	add    rsp,0x10
   28c34:	pop    rbx
   28c35:	ret    
   28c36:	nop    WORD PTR cs:[rax+rax*1+0x0]
   28c40:	push   rbx
   28c41:	sub    rsp,0x10
   28c45:	test   rdi,rdi
   28c48:	mov    QWORD PTR [rsp+0x8],rdi
   28c4d:	je     28c70 <g_str_equal@plt+0x208b8>
   28c4f:	call   21d80 <g_str_equal@plt+0x199c8>
   28c54:	lea    rdx,[rsp+0x8]
   28c59:	mov    rbx,rax
   28c5c:	mov    rdi,rax
   28c5f:	xor    ecx,ecx
   28c61:	xor    esi,esi
   28c63:	call   23ba0 <g_str_equal@plt+0x1b7e8>
   28c68:	mov    rdi,rbx
   28c6b:	call   20040 <g_str_equal@plt+0x17c88>
   28c70:	add    rsp,0x10
   28c74:	pop    rbx
   28c75:	ret    
   28c76:	nop    WORD PTR cs:[rax+rax*1+0x0]
   28c80:	push   rbx
   28c81:	sub    rsp,0x10
   28c85:	test   rdi,rdi
   28c88:	mov    QWORD PTR [rsp+0x8],rdi
   28c8d:	je     28cb0 <g_str_equal@plt+0x208f8>
   28c8f:	call   21d80 <g_str_equal@plt+0x199c8>
   28c94:	lea    rdx,[rsp+0x8]
   28c99:	mov    rbx,rax
   28c9c:	mov    rdi,rax
   28c9f:	xor    ecx,ecx
   28ca1:	xor    esi,esi
   28ca3:	call   23cb0 <g_str_equal@plt+0x1b8f8>
   28ca8:	mov    rdi,rbx
   28cab:	call   20040 <g_str_equal@plt+0x17c88>
   28cb0:	add    rsp,0x10
   28cb4:	pop    rbx
   28cb5:	ret    
   28cb6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   28cc0:	push   rbx
   28cc1:	sub    rsp,0x10
   28cc5:	test   rdi,rdi
   28cc8:	mov    QWORD PTR [rsp+0x8],rdi
   28ccd:	je     28cf0 <g_str_equal@plt+0x20938>
   28ccf:	call   21d80 <g_str_equal@plt+0x199c8>
   28cd4:	lea    rdx,[rsp+0x8]
   28cd9:	mov    rbx,rax
   28cdc:	mov    rdi,rax
   28cdf:	xor    ecx,ecx
   28ce1:	xor    esi,esi
   28ce3:	call   23dc0 <g_str_equal@plt+0x1ba08>
   28ce8:	mov    rdi,rbx
   28ceb:	call   20040 <g_str_equal@plt+0x17c88>
   28cf0:	add    rsp,0x10
   28cf4:	pop    rbx
   28cf5:	ret    
   28cf6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   28d00:	push   rbx
   28d01:	sub    rsp,0x10
   28d05:	test   rdi,rdi
   28d08:	mov    QWORD PTR [rsp+0x8],rdi
   28d0d:	je     28d30 <g_str_equal@plt+0x20978>
   28d0f:	call   21d80 <g_str_equal@plt+0x199c8>
   28d14:	lea    rdx,[rsp+0x8]
   28d19:	mov    rbx,rax
   28d1c:	mov    rdi,rax
   28d1f:	xor    ecx,ecx
   28d21:	xor    esi,esi
   28d23:	call   23ed0 <g_str_equal@plt+0x1bb18>
   28d28:	mov    rdi,rbx
   28d2b:	call   20040 <g_str_equal@plt+0x17c88>
   28d30:	add    rsp,0x10
   28d34:	pop    rbx
   28d35:	ret    
   28d36:	nop    WORD PTR cs:[rax+rax*1+0x0]
   28d40:	push   rbx
   28d41:	sub    rsp,0x10
   28d45:	test   rdi,rdi
   28d48:	mov    QWORD PTR [rsp+0x8],rdi
   28d4d:	je     28d70 <g_str_equal@plt+0x209b8>
   28d4f:	call   21d80 <g_str_equal@plt+0x199c8>
   28d54:	lea    rdx,[rsp+0x8]
   28d59:	mov    rbx,rax
   28d5c:	mov    rdi,rax
   28d5f:	xor    ecx,ecx
   28d61:	xor    esi,esi
   28d63:	call   23fe0 <g_str_equal@plt+0x1bc28>
   28d68:	mov    rdi,rbx
   28d6b:	call   20040 <g_str_equal@plt+0x17c88>
   28d70:	add    rsp,0x10
   28d74:	pop    rbx
   28d75:	ret    
   28d76:	nop    WORD PTR cs:[rax+rax*1+0x0]
   28d80:	push   rbx
   28d81:	sub    rsp,0x10
   28d85:	test   rdi,rdi
   28d88:	mov    QWORD PTR [rsp+0x8],rdi
   28d8d:	je     28db0 <g_str_equal@plt+0x209f8>
   28d8f:	call   21d80 <g_str_equal@plt+0x199c8>
   28d94:	lea    rdx,[rsp+0x8]
   28d99:	mov    rbx,rax
   28d9c:	mov    rdi,rax
   28d9f:	xor    ecx,ecx
   28da1:	xor    esi,esi
   28da3:	call   240f0 <g_str_equal@plt+0x1bd38>
   28da8:	mov    rdi,rbx
   28dab:	call   20040 <g_str_equal@plt+0x17c88>
   28db0:	add    rsp,0x10
   28db4:	pop    rbx
   28db5:	ret    
   28db6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   28dc0:	push   rbx
   28dc1:	sub    rsp,0x10
   28dc5:	test   rdi,rdi
   28dc8:	mov    QWORD PTR [rsp+0x8],rdi
   28dcd:	je     28df0 <g_str_equal@plt+0x20a38>
   28dcf:	call   21d80 <g_str_equal@plt+0x199c8>
   28dd4:	lea    rdx,[rsp+0x8]
   28dd9:	mov    rbx,rax
   28ddc:	mov    rdi,rax
   28ddf:	xor    ecx,ecx
   28de1:	xor    esi,esi
   28de3:	call   24200 <g_str_equal@plt+0x1be48>
   28de8:	mov    rdi,rbx
   28deb:	call   20040 <g_str_equal@plt+0x17c88>
   28df0:	add    rsp,0x10
   28df4:	pop    rbx
   28df5:	ret    
   28df6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   28e00:	push   rbx
   28e01:	sub    rsp,0x10
   28e05:	test   rdi,rdi
   28e08:	mov    QWORD PTR [rsp+0x8],rdi
   28e0d:	je     28e30 <g_str_equal@plt+0x20a78>
   28e0f:	call   21d80 <g_str_equal@plt+0x199c8>
   28e14:	lea    rdx,[rsp+0x8]
   28e19:	mov    rbx,rax
   28e1c:	mov    rdi,rax
   28e1f:	xor    ecx,ecx
   28e21:	xor    esi,esi
   28e23:	call   24310 <g_str_equal@plt+0x1bf58>
   28e28:	mov    rdi,rbx
   28e2b:	call   20040 <g_str_equal@plt+0x17c88>
   28e30:	add    rsp,0x10
   28e34:	pop    rbx
   28e35:	ret    
   28e36:	nop    WORD PTR cs:[rax+rax*1+0x0]
   28e40:	push   rbx
   28e41:	sub    rsp,0x10
   28e45:	test   rdi,rdi
   28e48:	mov    QWORD PTR [rsp+0x8],rdi
   28e4d:	je     28e70 <g_str_equal@plt+0x20ab8>
   28e4f:	call   21d80 <g_str_equal@plt+0x199c8>
   28e54:	lea    rdx,[rsp+0x8]
   28e59:	mov    rbx,rax
   28e5c:	mov    rdi,rax
   28e5f:	xor    ecx,ecx
   28e61:	xor    esi,esi
   28e63:	call   24420 <g_str_equal@plt+0x1c068>
   28e68:	mov    rdi,rbx
   28e6b:	call   20040 <g_str_equal@plt+0x17c88>
   28e70:	add    rsp,0x10
   28e74:	pop    rbx
   28e75:	ret    
   28e76:	nop    WORD PTR cs:[rax+rax*1+0x0]
   28e80:	push   rbx
   28e81:	sub    rsp,0x10
   28e85:	test   rdi,rdi
   28e88:	mov    QWORD PTR [rsp+0x8],rdi
   28e8d:	je     28eb0 <g_str_equal@plt+0x20af8>
   28e8f:	call   21d80 <g_str_equal@plt+0x199c8>
   28e94:	lea    rdx,[rsp+0x8]
   28e99:	mov    rbx,rax
   28e9c:	mov    rdi,rax
   28e9f:	xor    ecx,ecx
   28ea1:	xor    esi,esi
   28ea3:	call   24530 <g_str_equal@plt+0x1c178>
   28ea8:	mov    rdi,rbx
   28eab:	call   20040 <g_str_equal@plt+0x17c88>
   28eb0:	add    rsp,0x10
   28eb4:	pop    rbx
   28eb5:	ret    
   28eb6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   28ec0:	push   rbx
   28ec1:	sub    rsp,0x10
   28ec5:	test   rdi,rdi
   28ec8:	mov    QWORD PTR [rsp+0x8],rdi
   28ecd:	je     28ef0 <g_str_equal@plt+0x20b38>
   28ecf:	call   21d80 <g_str_equal@plt+0x199c8>
   28ed4:	lea    rdx,[rsp+0x8]
   28ed9:	mov    rbx,rax
   28edc:	mov    rdi,rax
   28edf:	xor    ecx,ecx
   28ee1:	xor    esi,esi
   28ee3:	call   24640 <g_str_equal@plt+0x1c288>
   28ee8:	mov    rdi,rbx
   28eeb:	call   20040 <g_str_equal@plt+0x17c88>
   28ef0:	add    rsp,0x10
   28ef4:	pop    rbx
   28ef5:	ret    
   28ef6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   28f00:	push   rbx
   28f01:	sub    rsp,0x10
   28f05:	test   rdi,rdi
   28f08:	mov    QWORD PTR [rsp+0x8],rdi
   28f0d:	je     28f30 <g_str_equal@plt+0x20b78>
   28f0f:	call   21d80 <g_str_equal@plt+0x199c8>
   28f14:	lea    rdx,[rsp+0x8]
   28f19:	mov    rbx,rax
   28f1c:	mov    rdi,rax
   28f1f:	xor    ecx,ecx
   28f21:	xor    esi,esi
   28f23:	call   24990 <g_str_equal@plt+0x1c5d8>
   28f28:	mov    rdi,rbx
   28f2b:	call   20040 <g_str_equal@plt+0x17c88>
   28f30:	add    rsp,0x10
   28f34:	pop    rbx
   28f35:	ret    
   28f36:	nop    WORD PTR cs:[rax+rax*1+0x0]
   28f40:	push   rbx
   28f41:	sub    rsp,0x10
   28f45:	test   rdi,rdi
   28f48:	mov    QWORD PTR [rsp+0x8],rdi
   28f4d:	je     28f70 <g_str_equal@plt+0x20bb8>
   28f4f:	call   21d80 <g_str_equal@plt+0x199c8>
   28f54:	lea    rdx,[rsp+0x8]
   28f59:	mov    rbx,rax
   28f5c:	mov    rdi,rax
   28f5f:	xor    ecx,ecx
   28f61:	xor    esi,esi
   28f63:	call   24a70 <g_str_equal@plt+0x1c6b8>
   28f68:	mov    rdi,rbx
   28f6b:	call   20040 <g_str_equal@plt+0x17c88>
   28f70:	add    rsp,0x10
   28f74:	pop    rbx
   28f75:	ret    
   28f76:	nop    WORD PTR cs:[rax+rax*1+0x0]
   28f80:	push   r15
   28f82:	push   r14
   28f84:	mov    r14d,esi
   28f87:	push   r13
   28f89:	push   r12
   28f8b:	push   rbp
   28f8c:	push   rbx
   28f8d:	mov    rbx,rdi
   28f90:	sub    rsp,0x18
   28f94:	cmp    sil,0xa
   28f98:	mov    BYTE PTR [rsp+0x7],dl
   28f9c:	je     29120 <g_str_equal@plt+0x20d68>
   28fa2:	add    DWORD PTR [rdi+0x18],0x1
   28fa6:	movsxd rax,DWORD PTR [rbx+0x8]
   28faa:	lea    r13,[rip+0x62ef]        # 2f2a0 <_fini@@Base+0x601c>
   28fb1:	movzx  r12d,r14b
   28fb5:	cmp    eax,0x1e
   28fb8:	ja     29130 <g_str_equal@plt+0x20d78>
   28fbe:	shl    rax,0x8
   28fc2:	add    rax,r13
   28fc5:	movzx  r10d,BYTE PTR [rax+r12*1]
   28fca:	movzx  ebp,BYTE PTR [rax]
   28fcd:	cmp    r10b,bpl
   28fd0:	mov    r15d,r10d
   28fd3:	mov    r11d,r10d
   28fd6:	je     29060 <g_str_equal@plt+0x20ca8>
   28fdc:	mov    rdi,QWORD PTR [rbx+0x10]
   28fe0:	mov    rax,QWORD PTR [rdi+0x8]
   28fe4:	lea    rdx,[rax+0x1]
   28fe8:	cmp    rdx,QWORD PTR [rdi+0x10]
   28fec:	jae    290c0 <g_str_equal@plt+0x20d08>
   28ff2:	mov    rcx,QWORD PTR [rdi]
   28ff5:	mov    QWORD PTR [rdi+0x8],rdx
   28ff9:	cmp    r15b,0x6e
   28ffd:	mov    BYTE PTR [rcx+rax*1],r14b
   29001:	mov    rdx,QWORD PTR [rdi]
   29004:	mov    rax,QWORD PTR [rdi+0x8]
   29008:	mov    BYTE PTR [rdx+rax*1],0x0
   2900c:	ja     290ee <g_str_equal@plt+0x20d36>
   29012:	cmp    r15b,0x64
   29016:	jae    29090 <g_str_equal@plt+0x20cd8>
   29018:	test   r15b,r15b
   2901b:	jne    290f4 <g_str_equal@plt+0x20d3c>
   29021:	mov    ecx,DWORD PTR [rbx+0x18]
   29024:	mov    rsi,QWORD PTR [rbx+0x10]
   29028:	mov    edx,0x70
   2902d:	mov    r8d,DWORD PTR [rbx+0x1c]
   29031:	mov    rdi,rbx
   29034:	call   QWORD PTR [rbx]
   29036:	mov    rdi,QWORD PTR [rbx+0x10]
   2903a:	xor    esi,esi
   2903c:	call   8150 <g_string_truncate@plt>
   29041:	mov    DWORD PTR [rbx+0x8],0x1d
   29048:	add    rsp,0x18
   2904c:	xor    eax,eax
   2904e:	pop    rbx
   2904f:	pop    rbp
   29050:	pop    r12
   29052:	pop    r13
   29054:	pop    r14
   29056:	pop    r15
   29058:	ret    
   29059:	nop    DWORD PTR [rax+0x0]
   29060:	cmp    r10b,0x6e
   29064:	ja     290b8 <g_str_equal@plt+0x20d00>
   29066:	cmp    r10b,0x64
   2906a:	jae    29090 <g_str_equal@plt+0x20cd8>
   2906c:	test   r10b,r10b
   2906f:	je     29021 <g_str_equal@plt+0x20c69>
   29071:	movsxd rax,r10d
   29074:	cmp    r15b,bpl
   29077:	mov    DWORD PTR [rbx+0x8],eax
   2907a:	jne    29087 <g_str_equal@plt+0x20ccf>
   2907c:	cmp    BYTE PTR [rsp+0x7],0x1
   29081:	jne    28fb5 <g_str_equal@plt+0x20bfd>
   29087:	mov    r11d,eax
   2908a:	jmp    290f8 <g_str_equal@plt+0x20d40>
   2908c:	nop    DWORD PTR [rax+0x0]
   29090:	mov    ecx,DWORD PTR [rbx+0x18]
   29093:	mov    rsi,QWORD PTR [rbx+0x10]
   29097:	mov    edx,r10d
   2909a:	mov    r8d,DWORD PTR [rbx+0x1c]
   2909e:	mov    rdi,rbx
   290a1:	call   QWORD PTR [rbx]
   290a3:	mov    rdi,QWORD PTR [rbx+0x10]
   290a7:	xor    esi,esi
   290a9:	call   8150 <g_string_truncate@plt>
   290ae:	mov    eax,0x1d
   290b3:	jmp    29074 <g_str_equal@plt+0x20cbc>
   290b5:	nop    DWORD PTR [rax]
   290b8:	cmp    r10b,0x6f
   290bc:	jne    29071 <g_str_equal@plt+0x20cb9>
   290be:	jmp    290a3 <g_str_equal@plt+0x20ceb>
   290c0:	movsx  edx,r14b
   290c4:	mov    rsi,0xffffffffffffffff
   290cb:	mov    DWORD PTR [rsp+0xc],r10d
   290d0:	mov    DWORD PTR [rsp+0x8],r10d
   290d5:	call   80d0 <g_string_insert_c@plt>
   290da:	cmp    r15b,0x6e
   290de:	mov    r11d,DWORD PTR [rsp+0x8]
   290e3:	mov    r10d,DWORD PTR [rsp+0xc]
   290e8:	jbe    29012 <g_str_equal@plt+0x20c5a>
   290ee:	cmp    r15b,0x6f
   290f2:	je     290a3 <g_str_equal@plt+0x20ceb>
   290f4:	mov    DWORD PTR [rbx+0x8],r10d
   290f8:	mov    rsi,QWORD PTR [rbx+0x10]
   290fc:	cmp    QWORD PTR [rsi+0x8],0x4000000
   29104:	jbe    29048 <g_str_equal@plt+0x20c90>
   2910a:	mov    ecx,DWORD PTR [rbx+0x18]
   2910d:	mov    r8d,DWORD PTR [rbx+0x1c]
   29111:	mov    edx,r11d
   29114:	jmp    29031 <g_str_equal@plt+0x20c79>
   29119:	nop    DWORD PTR [rax+0x0]
   29120:	mov    DWORD PTR [rdi+0x18],0x0
   29127:	add    DWORD PTR [rdi+0x1c],0x1
   2912b:	jmp    28fa6 <g_str_equal@plt+0x20bee>
   29130:	lea    rcx,[rip+0x6149]        # 2f280 <_fini@@Base+0x5ffc>
   29137:	lea    rsi,[rip+0x60c2]        # 2f200 <_fini@@Base+0x5f7c>
   2913e:	lea    rdi,[rip+0x60fb]        # 2f240 <_fini@@Base+0x5fbc>
   29145:	mov    edx,0x130
   2914a:	call   7a70 <__assert_fail@plt>
   2914f:	nop
   29150:	push   rbx
   29151:	mov    rbx,rdi
   29154:	mov    QWORD PTR [rdi],rsi
   29157:	mov    DWORD PTR [rdi+0x8],0x1d
   2915e:	mov    edi,0x3
   29163:	call   7c30 <g_string_sized_new@plt>
   29168:	mov    QWORD PTR [rbx+0x18],0x0
   29170:	mov    QWORD PTR [rbx+0x10],rax
   29174:	pop    rbx
   29175:	ret    
   29176:	nop    WORD PTR cs:[rax+rax*1+0x0]
   29180:	test   rdx,rdx
   29183:	je     291d0 <g_str_equal@plt+0x20e18>
   29185:	push   r12
   29187:	mov    r12,rdi
   2918a:	push   rbp
   2918b:	lea    rbp,[rsi+rdx*1]
   2918f:	push   rbx
   29190:	mov    rbx,rsi
   29193:	jmp    291a1 <g_str_equal@plt+0x20de9>
   29195:	nop    DWORD PTR [rax]
   29198:	add    rbx,0x1
   2919c:	cmp    rbx,rbp
   2919f:	je     291c0 <g_str_equal@plt+0x20e08>
   291a1:	movsx  esi,BYTE PTR [rbx]
   291a4:	xor    edx,edx
   291a6:	mov    rdi,r12
   291a9:	call   28f80 <g_str_equal@plt+0x20bc8>
   291ae:	test   eax,eax
   291b0:	jns    29198 <g_str_equal@plt+0x20de0>
   291b2:	pop    rbx
   291b3:	pop    rbp
   291b4:	pop    r12
   291b6:	ret    
   291b7:	nop    WORD PTR [rax+rax*1+0x0]
   291c0:	pop    rbx
   291c1:	xor    eax,eax
   291c3:	pop    rbp
   291c4:	pop    r12
   291c6:	ret    
   291c7:	nop    WORD PTR [rax+rax*1+0x0]
   291d0:	xor    eax,eax
   291d2:	ret    
   291d3:	nop    DWORD PTR [rax]
   291d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   291e0:	cmp    DWORD PTR [rdi+0x8],0x1d
   291e4:	je     291f8 <g_str_equal@plt+0x20e40>
   291e6:	mov    edx,0x1
   291eb:	xor    esi,esi
   291ed:	jmp    28f80 <g_str_equal@plt+0x20bc8>
   291f2:	nop    WORD PTR [rax+rax*1+0x0]
   291f8:	xor    eax,eax
   291fa:	ret    
   291fb:	nop    DWORD PTR [rax+rax*1+0x0]
   29200:	mov    rdi,QWORD PTR [rdi+0x10]
   29204:	mov    esi,0x1
   29209:	jmp    7d20 <g_string_free@plt>
   2920e:	xchg   ax,ax
   29210:	push   r15
   29212:	push   r14
   29214:	mov    r15,rdx
   29217:	push   r13
   29219:	push   r12
   2921b:	lea    r12,[rip+0x213c46]        # 23ce68 <_fini@@Base+0x213be4>
   29222:	push   rbp
   29223:	lea    rbp,[rip+0x213c6e]        # 23ce98 <_fini@@Base+0x213c14>
   2922a:	push   rbx
   2922b:	mov    r13d,edi
   2922e:	mov    r14,rsi
   29231:	sub    rbp,r12
   29234:	sub    rsp,0x8
   29238:	sar    rbp,0x3
   2923c:	call   7848 <_init@@Base>
   29241:	test   rbp,rbp
   29244:	je     29266 <g_str_equal@plt+0x20eae>
   29246:	xor    ebx,ebx
   29248:	nop    DWORD PTR [rax+rax*1+0x0]
   29250:	mov    rdx,r15
   29253:	mov    rsi,r14
   29256:	mov    edi,r13d
   29259:	call   QWORD PTR [r12+rbx*8]
   2925d:	add    rbx,0x1
   29261:	cmp    rbp,rbx
   29264:	jne    29250 <g_str_equal@plt+0x20e98>
   29266:	add    rsp,0x8
   2926a:	pop    rbx
   2926b:	pop    rbp
   2926c:	pop    r12
   2926e:	pop    r13
   29270:	pop    r14
   29272:	pop    r15
   29274:	ret    
   29275:	nop
   29276:	nop    WORD PTR cs:[rax+rax*1+0x0]
   29280:	repz ret 

Disassembly of section .fini:

0000000000029284 <_fini@@Base>:
   29284:	sub    rsp,0x8
   29288:	add    rsp,0x8
   2928c:	ret    
