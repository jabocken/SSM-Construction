Number of assembly instructions     = 82
Number of indirect branches         = 1
Number of unresolved indirect jumps = 0: 
Number of unresolved indirect calls = 0: 
Number of symbolic states (representative of non-determinism): 87
Number of edges: 98

1480 (False): 0

d00: PUSH Reg R15 2
d02: PUSH Reg R14 2
d04: PUSH Reg R13 2
d06: PUSH Reg R12 2
d08: PUSH Reg RBP 1
d09: PUSH Reg RBX 1
d0a: SUB Reg RSP, Immediate 216 7
d11: MOV Reg RAX, Address (SizeDir 64 (AddrPlus (FromReg FS) (AddrImm 40))) 9
d1a: MOV Address (SizeDir 64 (AddrPlus (FromReg RSP) (AddrImm 200))), Reg RAX 8
d22: XOR Reg EAX, Reg EAX 2
d24: CMP Reg EDI, Immediate 1 3
d27: JLE ea3 (resolved immediate)
  |
  `- d2d,ea3
d2d: LEA Reg EAX, Address (AddrMinus (FromReg RDI) (AddrImm 2)) 3
d30: LEA Reg RBP, Address (AddrPlus (FromReg RSI) (AddrImm 8)) 4
d34: XOR Reg EBX, Reg EBX 2
d36: XOR Reg R12D, Reg R12D 3
d39: MOV Reg R8D, Immediate 4294967295 6
d3f: LEA Reg R15, Address (AddrPlus (FromReg RIP) (AddrImm 3115)) 7
d46: LEA Reg R14, Address (AddrPlus (AddrPlus (FromReg RSI) (AddrTimes (AddrImm 8) (FromReg RAX))) (AddrImm 16)) 5
d4b: LEA Reg R13, Address (AddrPlus (FromReg RIP) (AddrImm 3114)) 7
d52: JMP d80 (resolved immediate)
  |
  `- d80
d58: MOV Reg ECX, Immediate 5 5
d5d: MOV Reg RSI, Reg RAX 3
d60: MOV Reg RDI, Reg R13 3
d63: REPZ CMPSB  2
d65: SETA Reg DL 3
d68: SBB Reg DL, Immediate 0 3
d6b: TEST Reg DL, Reg DL 2
d6d: JNZ e70 (resolved immediate)
  |
  `- e70
d80: MOV Reg RAX, Address (SizeDir 64 (AddrPlus (FromReg RBP) (AddrImm 0))) 4
d84: MOV Reg ECX, Immediate 11 5
d89: MOV Reg RDI, Reg R15 3
d8c: MOV Reg RSI, Reg RAX 3
d8f: REPZ CMPSB  2
d91: SETA Reg DL 3
d94: SBB Reg DL, Immediate 0 3
d97: TEST Reg DL, Reg DL 2
d99: JNZ d58 (resolved immediate)
  |
  `- d58,d9b
d9b: ADD Reg RBP, Immediate 8 4
d9f: MOV Reg R12D, Immediate 1 6
da5: CMP Reg RBP, Reg R14 3
da8: JNZ d80 (resolved immediate)
  |
  `- d80,daa
daa: TEST Reg RBX, Reg RBX 3
dad: JZ ea3 (resolved immediate)
  |
  `- ea3
e70: LEA Reg RDI, Address (AddrPlus (FromReg RIP) (AddrImm 2827)) 7
e77: MOV Reg ECX, Immediate 5 5
e7c: MOV Reg RSI, Reg RAX 3
e7f: REPZ CMPSB  2
e81: SETA Reg DL 3
e84: SBB Reg DL, Immediate 0 3
e87: TEST Reg DL, Reg DL 2
e89: JNZ ea3 (resolved immediate)
  |
  `- ea3
ea3: MOV Reg RCX, Address (SizeDir 64 (AddrPlus (FromReg RIP) (AddrImm 2105718))) 7
eaa: LEA Reg RDI, Address (AddrPlus (FromReg RIP) (AddrImm 2823)) 7
eb1: MOV Reg EDX, Immediate 63 5
eb6: MOV Reg ESI, Immediate 1 5
ebb: MOV Reg R12D, Immediate 1 6
ec1: CALL fwrite (external)
ec6: MOV Reg RBX, Address (SizeDir 64 (AddrPlus (FromReg RSP) (AddrImm 200))) 8
ece: XOR Reg RBX, Address (SizeDir 64 (AddrPlus (FromReg FS) (AddrImm 40))) 9
ed7: MOV Reg EAX, Reg R12D 3
eda: JNZ 145d (resolved immediate)
  |
  `- ee0,145d
ee0: ADD Reg RSP, Immediate 216 7
ee7: POP Reg RBX 1
ee8: POP Reg RBP 1
ee9: POP Reg R12 2
eeb: POP Reg R13 2
eed: POP Reg R14 2
eef: POP Reg R15 2
ef1: RET  1
  |
  `- 
145d: CALL __stack_chk_fail (external)
  |
  `- 
1480: XOR Reg EBP, Reg EBP 2
1482: MOV Reg R9, Reg RDX 3
1485: POP Reg RSI 1
1486: MOV Reg RDX, Reg RSP 3
1489: AND Reg RSP, Immediate 18446744073709551600 4
148d: PUSH Reg RAX 1
148e: PUSH Reg RSP 1
148f: LEA Reg R8, Address (AddrPlus (FromReg RIP) (AddrImm 1146)) 7
1496: LEA Reg RCX, Address (AddrPlus (FromReg RIP) (AddrImm 1027)) 7
149d: LEA Reg RDI, Address (AddrMinus (FromReg RIP) (AddrImm 1956)) 7
14a4: CALL __libc_start_main (external)
  |
  `- d00
