Number of assembly instructions     = 85
Number of indirect branches         = 0
Number of unresolved indirect jumps = 0: 
Number of unresolved indirect calls = 0: 
Number of symbolic states (representative of non-determinism): 85
Number of edges: 84

a00 (False): 0

a00: PUSH Reg R15 2
a02: PUSH Reg R14 2
a04: PUSH Reg R13 2
a06: PUSH Reg R12 2
a08: PUSH Reg RBP 1
a09: PUSH Reg RBX 1
a0a: MOV Reg RBX, Reg RDI 3
a0d: MOV Reg EBP, Reg ESI 2
a0f: SUB Reg RSP, Immediate 8 4
a13: CALL fsig_file_buf (external)
a18: MOV Reg RDI, Reg RBX 3
a1b: MOV Reg R12D, Address (SizeDir 32 (AddrPlus (FromReg RAX) (AddrImm 8380))) 7
a22: CALL fsig_file_buf (external)
a27: XOR Reg EDX, Reg EDX 2
a29: MOV Reg RSI, Reg RAX 3
a2c: MOV Reg EAX, Reg EBP 2
a2e: DIV Address (SizeDir 32 (AddrPlus (FromReg RSI) (AddrImm 8376))) 6
a34: MOV Reg RDI, Reg RBX 3
a37: MOV Reg R13D, Reg EAX 3
a3a: CALL fsig_file_buf (external)
a3f: MOV Reg RDI, Reg RBX 3
a42: MOV Reg R14D, Address (SizeDir 32 (AddrPlus (FromReg RAX) (AddrImm 8216))) 7
a49: CALL fsig_file_buf (external)
a4e: XOR Reg EDX, Reg EDX 2
a50: MOV Reg RSI, Reg RAX 3
a53: MOV Reg EAX, Reg EBP 2
a55: DIV Address (SizeDir 32 (AddrPlus (FromReg RSI) (AddrImm 8376))) 6
a5b: MOV Reg RDI, Reg RBX 3
a5e: MOV Reg R15D, Reg EAX 3
a61: CALL fsig_file_buf (external)
a66: MOV Reg RDI, Reg RBX 3
a69: IMUL Reg R13D, Reg R12D 4
a6d: MOV Reg R12D, Address (SizeDir 32 (AddrPlus (FromReg RAX) (AddrImm 8220))) 7
a74: CALL fsig_file_buf (external)
a79: MOV Reg RDI, Reg RBX 3
a7c: ADD Reg R13D, Address (SizeDir 32 (AddrPlus (FromReg RAX) (AddrImm 8208))) 7
a83: CALL fsig_file_buf (external)
a88: XOR Reg EDX, Reg EDX 2
a8a: MOV Reg RCX, Reg RAX 3
a8d: MOV Reg EAX, Reg EBP 2
a8f: DIV Address (SizeDir 32 (AddrPlus (FromReg RCX) (AddrImm 8376))) 6
a95: NOT Reg R12D 3
a98: MOV Reg RDI, Reg RBX 3
a9b: AND Reg R12D, Reg R15D 3
a9e: IMUL Reg R12D, Reg R14D 4
aa2: ADD Reg R13D, Reg R12D 3
aa5: MOV Reg R12D, Reg EDX 3
aa8: CALL fsig_file_buf (external)
aad: XOR Reg EDX, Reg EDX 2
aaf: MOV Reg RSI, Reg RAX 3
ab2: MOV Reg EAX, Reg R12D 3
ab5: DIV Address (SizeDir 32 (AddrPlus (FromReg RSI) (AddrImm 8312))) 6
abb: MOV Reg RDI, Reg RBX 3
abe: MOV Reg R12D, Reg EAX 3
ac1: CALL fsig_file_buf (external)
ac6: MOV Reg ECX, Address (SizeDir 32 (AddrPlus (FromReg RAX) (AddrImm 8288))) 6
acc: MOV Reg RDI, Reg RBX 3
acf: SHL Reg R12D, Reg CL 3
ad2: CALL fsig_file_buf (external)
ad7: MOV Reg ECX, Address (SizeDir 32 (AddrPlus (FromReg RAX) (AddrImm 8292))) 6
add: ADD Reg R12D, Reg R13D 3
ae0: MOV Reg RDI, Reg RBX 3
ae3: SHL Reg R12D, Reg CL 3
ae6: CALL fsig_file_buf (external)
aeb: XOR Reg EDX, Reg EDX 2
aed: MOV Reg RCX, Reg RAX 3
af0: MOV Reg EAX, Reg EBP 2
af2: DIV Address (SizeDir 32 (AddrPlus (FromReg RCX) (AddrImm 8312))) 6
af8: MOV Reg RDI, Reg RBX 3
afb: MOV Reg EBP, Reg EDX 2
afd: SHL Reg EBP, Immediate 7 3
b00: CALL fsig_file_buf (external)
b05: ADD Reg RSP, Immediate 8 4
b09: MOV Reg EDX, Reg EBP 2
b0b: MOV Reg ESI, Reg R12D 3
b0e: MOV Reg RDI, Reg RBX 3
b11: LEA Reg R8, Address (AddrPlus (FromReg RAX) (AddrImm 4096)) 7
b18: MOV Reg ECX, Immediate 128 5
b1d: POP Reg RBX 1
b1e: POP Reg RBP 1
b1f: POP Reg R12 2
b21: POP Reg R13 2
b23: POP Reg R14 2
b25: POP Reg R15 2
b27: JMP fsig_devread (jmp to external function)
  |
  `- 
