Number of assembly instructions     = 90
Number of indirect branches         = 2
Number of unresolved indirect jumps = 0: 
Number of unresolved indirect calls = 1: ed5
Number of symbolic states (representative of non-determinism): 95
Number of edges: 107

f20 (False): 0

df0: PUSH Reg R15 2
df2: PUSH Reg R14 2
df4: PUSH Reg R13 2
df6: PUSH Reg R12 2
df8: PUSH Reg RBP 1
df9: PUSH Reg RBX 1
dfa: SUB Reg RSP, Immediate 24 4
dfe: CMP Reg EDI, Immediate 1 3
e01: MOV Address (SizeDir 64 (AddrPlus (FromReg RSP) (AddrImm 8))), Reg RSI 5
e06: JLE e93 (resolved immediate)
  |
  `- e0c,e93
e0c: XOR Reg EDX, Reg EDX 2
e0e: XOR Reg ESI, Reg ESI 2
e10: MOV Reg R13D, Reg EDI 3
e13: XOR Reg EDI, Reg EDI 2
e15: CALL xc_interface_open (external)
e1a: TEST Reg RAX, Reg RAX 3
e1d: MOV Address (SizeDir 64 (AddrPlus (FromReg RIP) (AddrImm 2105964))), Reg RAX 7
e24: JE ef1 (resolved immediate)
  |
  `- e2a,ef1
e2a: MOV Reg RAX, Address (SizeDir 64 (AddrPlus (FromReg RSP) (AddrImm 8))) 5
e2f: OR Reg RCX, Immediate 18446744073709551615 4
e33: LEA Reg R14, Address (SizeDir 64 (AddrPlus (FromReg RIP) (AddrImm 2105830))) 7
e3a: XOR Reg R15D, Reg R15D 3
e3d: MOV Reg R12, Address (SizeDir 64 (AddrPlus (FromReg RAX) (AddrImm 8))) 4
e41: XOR Reg EAX, Reg EAX 2
e43: MOV Reg RDI, Reg R12 3
e46: REPNZ SCASB Reg AL, Address (SizeDir 8 (FromReg RDI)) 2
e48: NOT Reg RCX 3
e4b: LEA Reg RBX, Address (SizeDir 64 (AddrMinus (FromReg RCX) (AddrImm 1))) 4
e4f: MOV Reg RAX, Reg R15 3
e52: MOV Reg RDX, Reg RBX 3
e55: MOV Reg RSI, Reg R12 3
e58: SHL Reg RAX, Immediate 4 4
e5c: MOVSXD Reg RBP, Reg R15D 3
e5f: MOV Reg RDI, Address (SizeDir 64 (AddrPlus (FromReg R14) (AddrTimes (AddrImm 1) (FromReg RAX)))) 4
e63: CALL strncmp (external)
e68: TEST Reg EAX, Reg EAX 2
e6a: JE ec4 (resolved immediate)
  |
  `- e6c,ec4
e6c: ADD Reg R15, Immediate 1 4
e70: CMP Reg R15, Immediate 6 4
e74: JNE e4f (resolved immediate)
  |
  `- e4f,e76
e76: MOV Reg RDI, Address (SizeDir 64 (AddrPlus (FromReg RIP) (AddrImm 2105859))) 7
e7d: LEA Reg RDX, Address (SizeDir 64 (AddrPlus (FromReg RIP) (AddrImm 5875))) 7
e84: MOV Reg RCX, Reg R12 3
e87: MOV Reg ESI, Immediate 1 5
e8c: XOR Reg EAX, Reg EAX 2
e8e: CALL __fprintf_chk (external)
e93: MOV Reg RCX, Address (SizeDir 64 (AddrPlus (FromReg RIP) (AddrImm 2105830))) 7
e9a: LEA Reg RDI, Address (SizeDir 64 (AddrPlus (FromReg RIP) (AddrImm 4343))) 7
ea1: MOV Reg EDX, Immediate 389 5
ea6: MOV Reg ESI, Immediate 1 5
eab: CALL fwrite (external)
eb0: MOV Reg EAX, Immediate 1 5
eb5: ADD Reg RSP, Immediate 24 4
eb9: POP Reg RBX 1
eba: POP Reg RBP 1
ebb: POP Reg R12 2
ebd: POP Reg R13 2
ebf: POP Reg R14 2
ec1: POP Reg R15 2
ec3: RET  1
  |
  `- 
ec4: MOV Reg RSI, Address (SizeDir 64 (AddrPlus (FromReg RSP) (AddrImm 8))) 5
ec9: SHL Reg RBP, Immediate 4 4
ecd: LEA Reg EDI, Address (SizeDir 32 (AddrMinus (FromReg R13) (AddrImm 2))) 4
ed1: ADD Reg RSI, Immediate 16 4
ed5: CALL Address (SizeDir 64 (AddrPlus (AddrPlus (FromReg R14) (AddrTimes (AddrImm 1) (FromReg RBP))) (AddrImm 8))) 5
eda: MOV Reg RDI, Address (SizeDir 64 (AddrPlus (FromReg RIP) (AddrImm 2105775))) 7
ee1: MOV Reg EBX, Reg EAX 2
ee3: CALL xc_interface_close (external)
ee8: XOR Reg EAX, Reg EAX 2
eea: TEST Reg EBX, Reg EBX 2
eec: SETNE Reg AL 3
eef: JMP eb5 (resolved immediate)
  |
  `- eb5
ef1: MOV Reg RCX, Address (SizeDir 64 (AddrPlus (FromReg RIP) (AddrImm 2105736))) 7
ef8: LEA Reg RDI, Address (SizeDir 64 (AddrPlus (FromReg RIP) (AddrImm 5723))) 7
eff: MOV Reg EDX, Immediate 28 5
f04: MOV Reg ESI, Immediate 1 5
f09: CALL fwrite (external)
f0e: MOV Reg EAX, Immediate 1 5
f13: JMP eb5 (resolved immediate)
  |
  `- eb5
f20: XOR Reg EBP, Reg EBP 2
f22: MOV Reg R9, Reg RDX 3
f25: POP Reg RSI 1
f26: MOV Reg RDX, Reg RSP 3
f29: AND Reg RSP, Immediate 18446744073709551600 4
f2d: PUSH Reg RAX 1
f2e: PUSH Reg RSP 1
f2f: LEA Reg R8, Address (SizeDir 64 (AddrPlus (FromReg RIP) (AddrImm 4170))) 7
f36: LEA Reg RCX, Address (SizeDir 64 (AddrPlus (FromReg RIP) (AddrImm 4051))) 7
f3d: LEA Reg RDI, Address (SizeDir 64 (AddrMinus (FromReg RIP) (AddrImm 340))) 7
f44: CALL __libc_start_main (external)
  |
  `- df0
