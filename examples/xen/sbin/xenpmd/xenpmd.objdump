
xenpmd:     file format elf64-x86-64


Disassembly of section .init:

0000000000000c00 <_init>:
 c00:	sub    rsp,0x8
 c04:	mov    rax,QWORD PTR [rip+0x2023dd]        # 202fe8 <__gmon_start__>
 c0b:	test   rax,rax
 c0e:	je     c12 <_init+0x12>
 c10:	call   rax
 c12:	add    rsp,0x8
 c16:	ret    

Disassembly of section .plt:

0000000000000c20 <.plt>:
 c20:	push   QWORD PTR [rip+0x2022ca]        # 202ef0 <_GLOBAL_OFFSET_TABLE_+0x8>
 c26:	jmp    QWORD PTR [rip+0x2022cc]        # 202ef8 <_GLOBAL_OFFSET_TABLE_+0x10>
 c2c:	nop    DWORD PTR [rax+0x0]

0000000000000c30 <__snprintf_chk@plt>:
 c30:	jmp    QWORD PTR [rip+0x2022ca]        # 202f00 <__snprintf_chk@GLIBC_2.3.4>
 c36:	push   0x0
 c3b:	jmp    c20 <.plt>

0000000000000c40 <xs_read_watch@plt>:
 c40:	jmp    QWORD PTR [rip+0x2022c2]        # 202f08 <xs_read_watch>
 c46:	push   0x1
 c4b:	jmp    c20 <.plt>

0000000000000c50 <strncpy@plt>:
 c50:	jmp    QWORD PTR [rip+0x2022ba]        # 202f10 <strncpy@GLIBC_2.2.5>
 c56:	push   0x2
 c5b:	jmp    c20 <.plt>

0000000000000c60 <xs_watch@plt>:
 c60:	jmp    QWORD PTR [rip+0x2022b2]        # 202f18 <xs_watch>
 c66:	push   0x3
 c6b:	jmp    c20 <.plt>

0000000000000c70 <xs_daemon_close@plt>:
 c70:	jmp    QWORD PTR [rip+0x2022aa]        # 202f20 <xs_daemon_close>
 c76:	push   0x4
 c7b:	jmp    c20 <.plt>

0000000000000c80 <fclose@plt>:
 c80:	jmp    QWORD PTR [rip+0x2022a2]        # 202f28 <fclose@GLIBC_2.2.5>
 c86:	push   0x5
 c8b:	jmp    c20 <.plt>

0000000000000c90 <opendir@plt>:
 c90:	jmp    QWORD PTR [rip+0x20229a]        # 202f30 <opendir@GLIBC_2.2.5>
 c96:	push   0x6
 c9b:	jmp    c20 <.plt>

0000000000000ca0 <strlen@plt>:
 ca0:	jmp    QWORD PTR [rip+0x202292]        # 202f38 <strlen@GLIBC_2.2.5>
 ca6:	push   0x7
 cab:	jmp    c20 <.plt>

0000000000000cb0 <chdir@plt>:
 cb0:	jmp    QWORD PTR [rip+0x20228a]        # 202f40 <chdir@GLIBC_2.2.5>
 cb6:	push   0x8
 cbb:	jmp    c20 <.plt>

0000000000000cc0 <__stack_chk_fail@plt>:
 cc0:	jmp    QWORD PTR [rip+0x202282]        # 202f48 <__stack_chk_fail@GLIBC_2.4>
 cc6:	push   0x9
 ccb:	jmp    c20 <.plt>

0000000000000cd0 <strchr@plt>:
 cd0:	jmp    QWORD PTR [rip+0x20227a]        # 202f50 <strchr@GLIBC_2.2.5>
 cd6:	push   0xa
 cdb:	jmp    c20 <.plt>

0000000000000ce0 <__assert_fail@plt>:
 ce0:	jmp    QWORD PTR [rip+0x202272]        # 202f58 <__assert_fail@GLIBC_2.2.5>
 ce6:	push   0xb
 ceb:	jmp    c20 <.plt>

0000000000000cf0 <setsid@plt>:
 cf0:	jmp    QWORD PTR [rip+0x20226a]        # 202f60 <setsid@GLIBC_2.2.5>
 cf6:	push   0xc
 cfb:	jmp    c20 <.plt>

0000000000000d00 <closedir@plt>:
 d00:	jmp    QWORD PTR [rip+0x202262]        # 202f68 <closedir@GLIBC_2.2.5>
 d06:	push   0xd
 d0b:	jmp    c20 <.plt>

0000000000000d10 <fgets@plt>:
 d10:	jmp    QWORD PTR [rip+0x20225a]        # 202f70 <fgets@GLIBC_2.2.5>
 d16:	push   0xe
 d1b:	jmp    c20 <.plt>

0000000000000d20 <strtoull@plt>:
 d20:	jmp    QWORD PTR [rip+0x202252]        # 202f78 <strtoull@GLIBC_2.2.5>
 d26:	push   0xf
 d2b:	jmp    c20 <.plt>

0000000000000d30 <xs_daemon_open@plt>:
 d30:	jmp    QWORD PTR [rip+0x20224a]        # 202f80 <xs_daemon_open>
 d36:	push   0x10
 d3b:	jmp    c20 <.plt>

0000000000000d40 <umask@plt>:
 d40:	jmp    QWORD PTR [rip+0x202242]        # 202f88 <umask@GLIBC_2.2.5>
 d46:	push   0x11
 d4b:	jmp    c20 <.plt>

0000000000000d50 <readdir@plt>:
 d50:	jmp    QWORD PTR [rip+0x20223a]        # 202f90 <readdir@GLIBC_2.2.5>
 d56:	push   0x12
 d5b:	jmp    c20 <.plt>

0000000000000d60 <xs_mkdir@plt>:
 d60:	jmp    QWORD PTR [rip+0x202232]        # 202f98 <xs_mkdir>
 d66:	push   0x13
 d6b:	jmp    c20 <.plt>

0000000000000d70 <__strncpy_chk@plt>:
 d70:	jmp    QWORD PTR [rip+0x20222a]        # 202fa0 <__strncpy_chk@GLIBC_2.3.4>
 d76:	push   0x14
 d7b:	jmp    c20 <.plt>

0000000000000d80 <fopen@plt>:
 d80:	jmp    QWORD PTR [rip+0x202222]        # 202fa8 <fopen@GLIBC_2.2.5>
 d86:	push   0x15
 d8b:	jmp    c20 <.plt>

0000000000000d90 <exit@plt>:
 d90:	jmp    QWORD PTR [rip+0x20221a]        # 202fb0 <exit@GLIBC_2.2.5>
 d96:	push   0x16
 d9b:	jmp    c20 <.plt>

0000000000000da0 <__strncat_chk@plt>:
 da0:	jmp    QWORD PTR [rip+0x202212]        # 202fb8 <__strncat_chk@GLIBC_2.3.4>
 da6:	push   0x17
 dab:	jmp    c20 <.plt>

0000000000000db0 <fork@plt>:
 db0:	jmp    QWORD PTR [rip+0x20220a]        # 202fc0 <fork@GLIBC_2.2.5>
 db6:	push   0x18
 dbb:	jmp    c20 <.plt>

0000000000000dc0 <strstr@plt>:
 dc0:	jmp    QWORD PTR [rip+0x202202]        # 202fc8 <strstr@GLIBC_2.2.5>
 dc6:	push   0x19
 dcb:	jmp    c20 <.plt>

0000000000000dd0 <xs_write@plt>:
 dd0:	jmp    QWORD PTR [rip+0x2021fa]        # 202fd0 <xs_write>
 dd6:	push   0x1a
 ddb:	jmp    c20 <.plt>

Disassembly of section .plt.got:

0000000000000de0 <__cxa_finalize@plt>:
 de0:	jmp    QWORD PTR [rip+0x202212]        # 202ff8 <__cxa_finalize@GLIBC_2.2.5>
 de6:	xchg   ax,ax

Disassembly of section .text:

0000000000000df0 <main>:
     df0:	sub    rsp,0x8
     df4:	call   db0 <fork@plt>
     df9:	test   eax,eax
     dfb:	js     e7d <main+0x8d>
     e01:	jne    e60 <main+0x70>
     e03:	call   cf0 <setsid@plt>
     e08:	call   db0 <fork@plt>
     e0d:	test   eax,eax
     e0f:	js     e7d <main+0x8d>
     e11:	jne    e60 <main+0x70>
     e13:	lea    rdi,[rip+0xfc3]        # 1ddd <_IO_stdin_used+0x1dd>
     e1a:	call   cb0 <chdir@plt>
     e1f:	add    eax,0x1
     e22:	je     e7d <main+0x8d>
     e24:	xor    edi,edi
     e26:	call   d40 <umask@plt>
     e2b:	call   d30 <xs_daemon_open@plt>
     e30:	test   rax,rax
     e33:	mov    QWORD PTR [rip+0x2021de],rax        # 203018 <xs>
     e3a:	je     e78 <main+0x88>
     e3c:	call   1920 <write_one_time_battery_info>
     e41:	test   eax,eax
     e43:	je     e67 <main+0x77>
     e45:	call   1aa0 <wait_for_and_update_battery_status_request>
     e4a:	mov    rdi,QWORD PTR [rip+0x2021c7]        # 203018 <xs>
     e51:	call   c70 <xs_daemon_close@plt>
     e56:	xor    eax,eax
     e58:	add    rsp,0x8
     e5c:	ret    
     e5d:	nop    DWORD PTR [rax]
     e60:	xor    edi,edi
     e62:	call   d90 <exit@plt>
     e67:	mov    rdi,QWORD PTR [rip+0x2021aa]        # 203018 <xs>
     e6e:	call   c70 <xs_daemon_close@plt>
     e73:	or     eax,0xffffffff
     e76:	jmp    e58 <main+0x68>
     e78:	or     eax,0xffffffff
     e7b:	jmp    e58 <main+0x68>
     e7d:	mov    edi,0x1
     e82:	call   d90 <exit@plt>
     e87:	nop    WORD PTR [rax+rax*1+0x0]

0000000000000e90 <_start>:
     e90:	xor    ebp,ebp
     e92:	mov    r9,rdx
     e95:	pop    rsi
     e96:	mov    rdx,rsp
     e99:	and    rsp,0xfffffffffffffff0
     e9d:	push   rax
     e9e:	push   rsp
     e9f:	lea    r8,[rip+0xd4a]        # 1bf0 <__libc_csu_fini>
     ea6:	lea    rcx,[rip+0xcd3]        # 1b80 <__libc_csu_init>
     ead:	lea    rdi,[rip+0xffffffffffffff3c]        # df0 <main>
     eb4:	call   QWORD PTR [rip+0x202126]        # 202fe0 <__libc_start_main@GLIBC_2.2.5>
     eba:	hlt    
     ebb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000000ec0 <deregister_tm_clones>:
     ec0:	lea    rdi,[rip+0x202149]        # 203010 <__TMC_END__>
     ec7:	push   rbp
     ec8:	lea    rax,[rip+0x202141]        # 203010 <__TMC_END__>
     ecf:	cmp    rax,rdi
     ed2:	mov    rbp,rsp
     ed5:	je     ef0 <deregister_tm_clones+0x30>
     ed7:	mov    rax,QWORD PTR [rip+0x2020fa]        # 202fd8 <_ITM_deregisterTMCloneTable>
     ede:	test   rax,rax
     ee1:	je     ef0 <deregister_tm_clones+0x30>
     ee3:	pop    rbp
     ee4:	jmp    rax
     ee6:	nop    WORD PTR cs:[rax+rax*1+0x0]
     ef0:	pop    rbp
     ef1:	ret    
     ef2:	nop    DWORD PTR [rax+0x0]
     ef6:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000000f00 <register_tm_clones>:
     f00:	lea    rdi,[rip+0x202109]        # 203010 <__TMC_END__>
     f07:	lea    rsi,[rip+0x202102]        # 203010 <__TMC_END__>
     f0e:	push   rbp
     f0f:	sub    rsi,rdi
     f12:	mov    rbp,rsp
     f15:	sar    rsi,0x3
     f19:	mov    rax,rsi
     f1c:	shr    rax,0x3f
     f20:	add    rsi,rax
     f23:	sar    rsi,1
     f26:	je     f40 <register_tm_clones+0x40>
     f28:	mov    rax,QWORD PTR [rip+0x2020c1]        # 202ff0 <_ITM_registerTMCloneTable>
     f2f:	test   rax,rax
     f32:	je     f40 <register_tm_clones+0x40>
     f34:	pop    rbp
     f35:	jmp    rax
     f37:	nop    WORD PTR [rax+rax*1+0x0]
     f40:	pop    rbp
     f41:	ret    
     f42:	nop    DWORD PTR [rax+0x0]
     f46:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000000f50 <__do_global_dtors_aux>:
     f50:	cmp    BYTE PTR [rip+0x2020b9],0x0        # 203010 <__TMC_END__>
     f57:	jne    f88 <__do_global_dtors_aux+0x38>
     f59:	cmp    QWORD PTR [rip+0x202097],0x0        # 202ff8 <__cxa_finalize@GLIBC_2.2.5>
     f61:	push   rbp
     f62:	mov    rbp,rsp
     f65:	je     f73 <__do_global_dtors_aux+0x23>
     f67:	mov    rdi,QWORD PTR [rip+0x20209a]        # 203008 <__dso_handle>
     f6e:	call   de0 <__cxa_finalize@plt>
     f73:	call   ec0 <deregister_tm_clones>
     f78:	mov    BYTE PTR [rip+0x202091],0x1        # 203010 <__TMC_END__>
     f7f:	pop    rbp
     f80:	ret    
     f81:	nop    DWORD PTR [rax+0x0]
     f88:	repz ret 
     f8a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000000f90 <frame_dummy>:
     f90:	push   rbp
     f91:	mov    rbp,rsp
     f94:	pop    rbp
     f95:	jmp    f00 <register_tm_clones>
     f9a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000000fa0 <get_next_battery_file>:
     fa0:	push   r13
     fa2:	push   r12
     fa4:	mov    r13d,esi
     fa7:	push   rbp
     fa8:	push   rbx
     fa9:	mov    r12,rdi
     fac:	sub    rsp,0x138
     fb3:	mov    rax,QWORD PTR fs:0x28
     fbc:	mov    QWORD PTR [rsp+0x128],rax
     fc4:	xor    eax,eax
     fc6:	mov    rbp,rsp
     fc9:	nop    DWORD PTR [rax+0x0]
     fd0:	mov    rdi,r12
     fd3:	call   d50 <readdir@plt>
     fd8:	test   rax,rax
     fdb:	je     1058 <get_next_battery_file+0xb8>
     fdd:	lea    rbx,[rax+0x13]
     fe1:	mov    rdi,rbx
     fe4:	call   ca0 <strlen@plt>
     fe9:	cmp    rax,0x3
     fed:	jbe    fd0 <get_next_battery_file+0x30>
     fef:	test   r13d,r13d
     ff2:	mov    r9,rbx
     ff5:	lea    r8,[rip+0xc08]        # 1c04 <_IO_stdin_used+0x4>
     ffc:	je     1005 <get_next_battery_file+0x65>
     ffe:	lea    r8,[rip+0xc14]        # 1c19 <_IO_stdin_used+0x19>
    1005:	mov    ecx,0x11c
    100a:	mov    edx,0x1
    100f:	mov    esi,0x11c
    1014:	mov    rdi,rbp
    1017:	xor    eax,eax
    1019:	call   c30 <__snprintf_chk@plt>
    101e:	lea    rsi,[rip+0xcdb]        # 1d00 <_IO_stdin_used+0x100>
    1025:	mov    rdi,rbp
    1028:	call   d80 <fopen@plt>
    102d:	test   rax,rax
    1030:	je     fd0 <get_next_battery_file+0x30>
    1032:	mov    rdx,QWORD PTR [rsp+0x128]
    103a:	xor    rdx,QWORD PTR fs:0x28
    1043:	jne    105c <get_next_battery_file+0xbc>
    1045:	add    rsp,0x138
    104c:	pop    rbx
    104d:	pop    rbp
    104e:	pop    r12
    1050:	pop    r13
    1052:	ret    
    1053:	nop    DWORD PTR [rax+rax*1+0x0]
    1058:	xor    eax,eax
    105a:	jmp    1032 <get_next_battery_file+0x92>
    105c:	call   cc0 <__stack_chk_fail@plt>
    1061:	nop    DWORD PTR [rax+rax*1+0x0]
    1066:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000001070 <set_attribute_battery_info>:
    1070:	push   r12
    1072:	push   rbp
    1073:	mov    rbp,rsi
    1076:	push   rbx
    1077:	lea    rsi,[rip+0xbb1]        # 1c2f <_IO_stdin_used+0x2f>
    107e:	mov    rbx,rdi
    1081:	mov    r12,rdx
    1084:	call   dc0 <strstr@plt>
    1089:	test   rax,rax
    108c:	je     10b0 <set_attribute_battery_info+0x40>
    108e:	lea    rsi,[rip+0xba2]        # 1c37 <_IO_stdin_used+0x37>
    1095:	mov    rdi,rbp
    1098:	call   dc0 <strstr@plt>
    109d:	test   rax,rax
    10a0:	je     10aa <set_attribute_battery_info+0x3a>
    10a2:	mov    DWORD PTR [r12],0x1
    10aa:	pop    rbx
    10ab:	pop    rbp
    10ac:	pop    r12
    10ae:	ret    
    10af:	nop
    10b0:	lea    rsi,[rip+0xb84]        # 1c3b <_IO_stdin_used+0x3b>
    10b7:	mov    rdi,rbx
    10ba:	call   dc0 <strstr@plt>
    10bf:	test   rax,rax
    10c2:	jne    10f0 <set_attribute_battery_info+0x80>
    10c4:	lea    rsi,[rip+0xb88]        # 1c53 <_IO_stdin_used+0x53>
    10cb:	mov    rdi,rbx
    10ce:	call   dc0 <strstr@plt>
    10d3:	test   rax,rax
    10d6:	je     1110 <set_attribute_battery_info+0xa0>
    10d8:	mov    edx,0xa
    10dd:	xor    esi,esi
    10df:	mov    rdi,rbp
    10e2:	call   d20 <strtoull@plt>
    10e7:	mov    QWORD PTR [r12+0x30],rax
    10ec:	jmp    10aa <set_attribute_battery_info+0x3a>
    10ee:	xchg   ax,ax
    10f0:	mov    rdi,rbp
    10f3:	mov    edx,0xa
    10f8:	xor    esi,esi
    10fa:	call   d20 <strtoull@plt>
    10ff:	pop    rbx
    1100:	mov    QWORD PTR [r12+0x28],rax
    1105:	pop    rbp
    1106:	pop    r12
    1108:	ret    
    1109:	nop    DWORD PTR [rax+0x0]
    1110:	lea    rsi,[rip+0xb50]        # 1c67 <_IO_stdin_used+0x67>
    1117:	mov    rdi,rbx
    111a:	call   dc0 <strstr@plt>
    111f:	test   rax,rax
    1122:	jne    1158 <set_attribute_battery_info+0xe8>
    1124:	lea    rsi,[rip+0xb4c]        # 1c77 <_IO_stdin_used+0x77>
    112b:	mov    rdi,rbx
    112e:	call   dc0 <strstr@plt>
    1133:	test   rax,rax
    1136:	je     1178 <set_attribute_battery_info+0x108>
    1138:	mov    edx,0xa
    113d:	xor    esi,esi
    113f:	mov    rdi,rbp
    1142:	call   d20 <strtoull@plt>
    1147:	mov    QWORD PTR [r12+0x10],rax
    114c:	jmp    10aa <set_attribute_battery_info+0x3a>
    1151:	nop    DWORD PTR [rax+0x0]
    1158:	mov    edx,0xa
    115d:	xor    esi,esi
    115f:	mov    rdi,rbp
    1162:	call   d20 <strtoull@plt>
    1167:	mov    QWORD PTR [r12+0x8],rax
    116c:	jmp    10aa <set_attribute_battery_info+0x3a>
    1171:	nop    DWORD PTR [rax+0x0]
    1178:	lea    rsi,[rip+0xb0b]        # 1c8a <_IO_stdin_used+0x8a>
    117f:	mov    rdi,rbx
    1182:	call   dc0 <strstr@plt>
    1187:	test   rax,rax
    118a:	je     11a5 <set_attribute_battery_info+0x135>
    118c:	mov    edx,0xa
    1191:	xor    esi,esi
    1193:	mov    rdi,rbp
    1196:	call   d20 <strtoull@plt>
    119b:	mov    QWORD PTR [r12+0x20],rax
    11a0:	jmp    10aa <set_attribute_battery_info+0x3a>
    11a5:	lea    rsi,[rip+0xaed]        # 1c99 <_IO_stdin_used+0x99>
    11ac:	mov    rdi,rbx
    11af:	call   dc0 <strstr@plt>
    11b4:	test   rax,rax
    11b7:	je     11d2 <set_attribute_battery_info+0x162>
    11b9:	mov    edx,0xa
    11be:	xor    esi,esi
    11c0:	mov    rdi,rbp
    11c3:	call   d20 <strtoull@plt>
    11c8:	mov    QWORD PTR [r12+0x38],rax
    11cd:	jmp    10aa <set_attribute_battery_info+0x3a>
    11d2:	lea    rsi,[rip+0xad7]        # 1cb0 <_IO_stdin_used+0xb0>
    11d9:	mov    rdi,rbx
    11dc:	call   dc0 <strstr@plt>
    11e1:	test   rax,rax
    11e4:	je     11ff <set_attribute_battery_info+0x18f>
    11e6:	mov    edx,0xa
    11eb:	xor    esi,esi
    11ed:	mov    rdi,rbp
    11f0:	call   d20 <strtoull@plt>
    11f5:	mov    QWORD PTR [r12+0x40],rax
    11fa:	jmp    10aa <set_attribute_battery_info+0x3a>
    11ff:	lea    rsi,[rip+0xac1]        # 1cc7 <_IO_stdin_used+0xc7>
    1206:	mov    rdi,rbx
    1209:	call   dc0 <strstr@plt>
    120e:	test   rax,rax
    1211:	je     123b <set_attribute_battery_info+0x1cb>
    1213:	lea    rdi,[rip+0xac0]        # 1cda <_IO_stdin_used+0xda>
    121a:	mov    ecx,0xc
    121f:	mov    rsi,rbp
    1222:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
    1224:	seta   al
    1227:	sbb    al,0x0
    1229:	test   al,al
    122b:	sete   al
    122e:	movzx  eax,al
    1231:	mov    DWORD PTR [r12+0x18],eax
    1236:	jmp    10aa <set_attribute_battery_info+0x3a>
    123b:	lea    rsi,[rip+0xaa5]        # 1ce7 <_IO_stdin_used+0xe7>
    1242:	mov    rdi,rbx
    1245:	call   dc0 <strstr@plt>
    124a:	test   rax,rax
    124d:	je     126c <set_attribute_battery_info+0x1fc>
    124f:	lea    rdi,[r12+0x48]
    1254:	mov    edx,0x1f
    1259:	mov    rsi,rbp
    125c:	call   c50 <strncpy@plt>
    1261:	mov    BYTE PTR [r12+0x67],0x0
    1267:	jmp    10aa <set_attribute_battery_info+0x3a>
    126c:	lea    rsi,[rip+0xa81]        # 1cf4 <_IO_stdin_used+0xf4>
    1273:	mov    rdi,rbx
    1276:	call   dc0 <strstr@plt>
    127b:	test   rax,rax
    127e:	je     12a0 <set_attribute_battery_info+0x230>
    1280:	lea    rdi,[r12+0x68]
    1285:	mov    edx,0x1f
    128a:	mov    rsi,rbp
    128d:	call   c50 <strncpy@plt>
    1292:	mov    BYTE PTR [r12+0x87],0x0
    129b:	jmp    10aa <set_attribute_battery_info+0x3a>
    12a0:	lea    rsi,[rip+0xa5b]        # 1d02 <_IO_stdin_used+0x102>
    12a7:	mov    rdi,rbx
    12aa:	call   dc0 <strstr@plt>
    12af:	test   rax,rax
    12b2:	je     12d7 <set_attribute_battery_info+0x267>
    12b4:	lea    rdi,[r12+0x88]
    12bc:	mov    edx,0x1f
    12c1:	mov    rsi,rbp
    12c4:	call   c50 <strncpy@plt>
    12c9:	mov    BYTE PTR [r12+0xa7],0x0
    12d2:	jmp    10aa <set_attribute_battery_info+0x3a>
    12d7:	lea    rsi,[rip+0xa31]        # 1d0f <_IO_stdin_used+0x10f>
    12de:	mov    rdi,rbx
    12e1:	call   dc0 <strstr@plt>
    12e6:	test   rax,rax
    12e9:	je     10aa <set_attribute_battery_info+0x3a>
    12ef:	lea    rdi,[r12+0xa8]
    12f7:	mov    edx,0x1f
    12fc:	mov    rsi,rbp
    12ff:	call   c50 <strncpy@plt>
    1304:	mov    BYTE PTR [r12+0xc7],0x0
    130d:	jmp    10aa <set_attribute_battery_info+0x3a>
    1312:	nop    DWORD PTR [rax+0x0]
    1316:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000001320 <set_attribute_battery_status>:
    1320:	push   r12
    1322:	push   rbp
    1323:	mov    rbp,rsi
    1326:	push   rbx
    1327:	lea    rsi,[rip+0x9ea]        # 1d18 <_IO_stdin_used+0x118>
    132e:	mov    rbx,rdi
    1331:	mov    r12,rdx
    1334:	call   dc0 <strstr@plt>
    1339:	test   rax,rax
    133c:	je     1360 <set_attribute_battery_status+0x40>
    133e:	lea    rsi,[rip+0x9e2]        # 1d27 <_IO_stdin_used+0x127>
    1345:	mov    rdi,rbp
    1348:	call   dc0 <strstr@plt>
    134d:	test   rax,rax
    1350:	sete   al
    1353:	movzx  eax,al
    1356:	mov    QWORD PTR [r12+0x8],rax
    135b:	pop    rbx
    135c:	pop    rbp
    135d:	pop    r12
    135f:	ret    
    1360:	lea    rsi,[rip+0x9c8]        # 1d2f <_IO_stdin_used+0x12f>
    1367:	mov    rdi,rbx
    136a:	call   dc0 <strstr@plt>
    136f:	test   rax,rax
    1372:	jne    13a0 <set_attribute_battery_status+0x80>
    1374:	lea    rsi,[rip+0x9c1]        # 1d3c <_IO_stdin_used+0x13c>
    137b:	mov    rdi,rbx
    137e:	call   dc0 <strstr@plt>
    1383:	test   rax,rax
    1386:	je     13c0 <set_attribute_battery_status+0xa0>
    1388:	mov    edx,0xa
    138d:	xor    esi,esi
    138f:	mov    rdi,rbp
    1392:	call   d20 <strtoull@plt>
    1397:	mov    QWORD PTR [r12+0x18],rax
    139c:	jmp    135b <set_attribute_battery_status+0x3b>
    139e:	xchg   ax,ax
    13a0:	mov    rdi,rbp
    13a3:	mov    edx,0xa
    13a8:	xor    esi,esi
    13aa:	call   d20 <strtoull@plt>
    13af:	pop    rbx
    13b0:	mov    QWORD PTR [r12+0x10],rax
    13b5:	pop    rbp
    13b6:	pop    r12
    13b8:	ret    
    13b9:	nop    DWORD PTR [rax+0x0]
    13c0:	lea    rsi,[rip+0x988]        # 1d4f <_IO_stdin_used+0x14f>
    13c7:	mov    rdi,rbx
    13ca:	call   dc0 <strstr@plt>
    13cf:	test   rax,rax
    13d2:	jne    1418 <set_attribute_battery_status+0xf8>
    13d4:	lea    rsi,[rip+0x854]        # 1c2f <_IO_stdin_used+0x2f>
    13db:	mov    rdi,rbx
    13de:	call   dc0 <strstr@plt>
    13e3:	test   rax,rax
    13e6:	je     135b <set_attribute_battery_status+0x3b>
    13ec:	lea    rsi,[rip+0x844]        # 1c37 <_IO_stdin_used+0x37>
    13f3:	mov    rdi,rbp
    13f6:	call   dc0 <strstr@plt>
    13fb:	test   rax,rax
    13fe:	je     135b <set_attribute_battery_status+0x3b>
    1404:	mov    DWORD PTR [r12],0x1
    140c:	jmp    135b <set_attribute_battery_status+0x3b>
    1411:	nop    DWORD PTR [rax+0x0]
    1418:	mov    edx,0xa
    141d:	xor    esi,esi
    141f:	mov    rdi,rbp
    1422:	call   d20 <strtoull@plt>
    1427:	mov    QWORD PTR [r12+0x20],rax
    142c:	jmp    135b <set_attribute_battery_status+0x3b>
    1431:	nop    DWORD PTR [rax+rax*1+0x0]
    1436:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000001440 <parse_battery_info_or_status>:
    1440:	push   r15
    1442:	push   r14
    1444:	mov    r14,rdx
    1447:	push   r13
    1449:	push   r12
    144b:	mov    r12,rdi
    144e:	push   rbp
    144f:	push   rbx
    1450:	mov    r13d,esi
    1453:	sub    rsp,0xd8
    145a:	mov    rax,QWORD PTR fs:0x28
    1463:	mov    QWORD PTR [rsp+0xc8],rax
    146b:	xor    eax,eax
    146d:	call   ca0 <strlen@plt>
    1472:	mov    esi,0x3a
    1477:	mov    rdi,r12
    147a:	mov    rbp,rax
    147d:	call   cd0 <strchr@plt>
    1482:	test   rax,rax
    1485:	je     1500 <parse_battery_info_or_status+0xc0>
    1487:	cmp    r12,rax
    148a:	mov    rbx,rax
    148d:	je     1500 <parse_battery_info_or_status+0xc0>
    148f:	add    rbp,r12
    1492:	cmp    rbp,rax
    1495:	je     1500 <parse_battery_info_or_status+0xc0>
    1497:	lea    r15,[rsp+0x40]
    149c:	mov    rdx,rax
    149f:	mov    ecx,0x80
    14a4:	sub    rdx,r12
    14a7:	mov    rsi,r12
    14aa:	mov    rdi,r15
    14ad:	call   d70 <__strncpy_chk@plt>
    14b2:	jmp    14c4 <parse_battery_info_or_status+0x84>
    14b4:	nop    DWORD PTR [rax+0x0]
    14b8:	lea    rax,[rsi+0x1]
    14bc:	mov    rbx,rsi
    14bf:	cmp    rbp,rax
    14c2:	je     1500 <parse_battery_info_or_status+0xc0>
    14c4:	cmp    BYTE PTR [rbx+0x1],0x20
    14c8:	lea    rsi,[rbx+0x1]
    14cc:	je     14b8 <parse_battery_info_or_status+0x78>
    14ce:	mov    r8,rsp
    14d1:	mov    rdx,rbp
    14d4:	mov    ecx,0x40
    14d9:	sub    rdx,rbx
    14dc:	mov    rdi,r8
    14df:	call   d70 <__strncpy_chk@plt>
    14e4:	test   r13d,r13d
    14e7:	mov    rdx,r14
    14ea:	mov    rsi,rax
    14ed:	mov    rdi,r15
    14f0:	je     1528 <parse_battery_info_or_status+0xe8>
    14f2:	call   1320 <set_attribute_battery_status>
    14f7:	nop    WORD PTR [rax+rax*1+0x0]
    1500:	mov    rax,QWORD PTR [rsp+0xc8]
    1508:	xor    rax,QWORD PTR fs:0x28
    1511:	jne    152f <parse_battery_info_or_status+0xef>
    1513:	add    rsp,0xd8
    151a:	pop    rbx
    151b:	pop    rbp
    151c:	pop    r12
    151e:	pop    r13
    1520:	pop    r14
    1522:	pop    r15
    1524:	ret    
    1525:	nop    DWORD PTR [rax]
    1528:	call   1070 <set_attribute_battery_info>
    152d:	jmp    1500 <parse_battery_info_or_status+0xc0>
    152f:	call   cc0 <__stack_chk_fail@plt>
    1534:	xchg   ax,ax
    1536:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000001540 <get_next_battery_info_or_status>:
    1540:	push   r13
    1542:	push   r12
    1544:	push   rbp
    1545:	push   rbx
    1546:	sub    rsp,0x118
    154d:	mov    rax,QWORD PTR fs:0x28
    1556:	mov    QWORD PTR [rsp+0x108],rax
    155e:	xor    eax,eax
    1560:	test   rdx,rdx
    1563:	je     1640 <get_next_battery_info_or_status+0x100>
    1569:	test   esi,esi
    156b:	mov    r8,rdi
    156e:	mov    r13d,esi
    1571:	mov    rbx,rdx
    1574:	je     1608 <get_next_battery_info_or_status+0xc8>
    157a:	pxor   xmm0,xmm0
    157e:	mov    QWORD PTR [rdx+0x20],0x0
    1586:	movups XMMWORD PTR [rdx],xmm0
    1589:	movups XMMWORD PTR [rdx+0x10],xmm0
    158d:	mov    esi,r13d
    1590:	mov    rdi,r8
    1593:	mov    rbp,rsp
    1596:	call   fa0 <get_next_battery_file>
    159b:	test   rax,rax
    159e:	mov    r12,rax
    15a1:	jne    15be <get_next_battery_info_or_status+0x7e>
    15a3:	jmp    1640 <get_next_battery_info_or_status+0x100>
    15a8:	nop    DWORD PTR [rax+rax*1+0x0]
    15b0:	mov    rdx,rbx
    15b3:	mov    esi,r13d
    15b6:	mov    rdi,rbp
    15b9:	call   1440 <parse_battery_info_or_status>
    15be:	mov    rdx,r12
    15c1:	mov    esi,0x100
    15c6:	mov    rdi,rbp
    15c9:	call   d10 <fgets@plt>
    15ce:	test   rax,rax
    15d1:	jne    15b0 <get_next_battery_info_or_status+0x70>
    15d3:	mov    rdi,r12
    15d6:	call   c80 <fclose@plt>
    15db:	mov    eax,0x1
    15e0:	mov    rcx,QWORD PTR [rsp+0x108]
    15e8:	xor    rcx,QWORD PTR fs:0x28
    15f1:	jne    1644 <get_next_battery_info_or_status+0x104>
    15f3:	add    rsp,0x118
    15fa:	pop    rbx
    15fb:	pop    rbp
    15fc:	pop    r12
    15fe:	pop    r13
    1600:	ret    
    1601:	nop    DWORD PTR [rax+0x0]
    1608:	lea    rdi,[rdx+0x8]
    160c:	mov    rcx,rdx
    160f:	xor    eax,eax
    1611:	mov    QWORD PTR [rdx],0x0
    1618:	mov    QWORD PTR [rdx+0xc0],0x0
    1623:	and    rdi,0xfffffffffffffff8
    1627:	sub    rcx,rdi
    162a:	add    ecx,0xc8
    1630:	shr    ecx,0x3
    1633:	rep stos QWORD PTR es:[rdi],rax
    1636:	jmp    158d <get_next_battery_info_or_status+0x4d>
    163b:	nop    DWORD PTR [rax+rax*1+0x0]
    1640:	xor    eax,eax
    1642:	jmp    15e0 <get_next_battery_info_or_status+0xa0>
    1644:	call   cc0 <__stack_chk_fail@plt>
    1649:	nop    DWORD PTR [rax+0x0]

0000000000001650 <write_ulong_lsb_first>:
    1650:	mov    eax,esi
    1652:	sub    rsp,0x10
    1656:	lea    r8,[rip+0x702]        # 1d5f <_IO_stdin_used+0x15f>
    165d:	shr    eax,0x18
    1660:	movzx  r9d,sil
    1664:	mov    rcx,0xffffffffffffffff
    166b:	push   rax
    166c:	mov    eax,esi
    166e:	mov    edx,0x1
    1673:	shr    eax,0x10
    1676:	movzx  eax,al
    1679:	push   rax
    167a:	mov    eax,esi
    167c:	mov    esi,0x9
    1681:	movzx  eax,ah
    1684:	push   rax
    1685:	xor    eax,eax
    1687:	call   c30 <__snprintf_chk@plt>
    168c:	add    rsp,0x28
    1690:	ret    
    1691:	nop    DWORD PTR [rax+rax*1+0x0]
    1696:	nop    WORD PTR cs:[rax+rax*1+0x0]

00000000000016a0 <write_battery_info_to_xenstore>:
    16a0:	push   r15
    16a2:	push   r14
    16a4:	lea    rdx,[rip+0x6c5]        # 1d70 <_IO_stdin_used+0x170>
    16ab:	push   r13
    16ad:	push   r12
    16af:	xor    esi,esi
    16b1:	push   rbp
    16b2:	push   rbx
    16b3:	mov    rbp,rdi
    16b6:	lea    r15,[rbp+0x48]
    16ba:	lea    r14,[rbp+0x68]
    16be:	lea    r13,[rbp+0x88]
    16c5:	sub    rsp,0x538
    16cc:	mov    rdi,QWORD PTR [rip+0x201945]        # 203018 <xs>
    16d3:	lea    r12,[rbp+0xa8]
    16da:	lea    rbx,[rsp+0x120]
    16e2:	mov    rax,QWORD PTR fs:0x28
    16eb:	mov    QWORD PTR [rsp+0x528],rax
    16f3:	xor    eax,eax
    16f5:	call   d60 <xs_mkdir@plt>
    16fa:	xor    eax,eax
    16fc:	mov    ecx,0x80
    1701:	mov    rdi,rbx
    1704:	rep stos QWORD PTR es:[rdi],rax
    1707:	lea    rdi,[rsp+0x20]
    170c:	mov    ecx,0x20
    1711:	mov    QWORD PTR [rsp+0x18],rdi
    1716:	rep stos QWORD PTR es:[rdi],rax
    1719:	mov    rdi,r15
    171c:	call   ca0 <strlen@plt>
    1721:	mov    rdi,r14
    1724:	mov    QWORD PTR [rsp+0x10],rax
    1729:	call   ca0 <strlen@plt>
    172e:	mov    rdi,r13
    1731:	mov    QWORD PTR [rsp+0x8],rax
    1736:	call   ca0 <strlen@plt>
    173b:	mov    rdi,r12
    173e:	mov    QWORD PTR [rsp],rax
    1742:	call   ca0 <strlen@plt>
    1747:	mov    rdx,QWORD PTR [rsp+0x8]
    174c:	mov    rcx,QWORD PTR [rsp+0x10]
    1751:	lea    r9d,[rcx+rdx*1+0x28]
    1756:	add    r9d,DWORD PTR [rsp]
    175a:	add    r9d,eax
    175d:	cmp    r9d,0xfe
    1764:	ja     18f5 <write_battery_info_to_xenstore+0x255>
    176a:	lea    r8,[rip+0x5fa]        # 1d6b <_IO_stdin_used+0x16b>
    1771:	mov    ecx,0x400
    1776:	mov    edx,0x1
    177b:	mov    esi,0x3
    1780:	mov    rdi,rbx
    1783:	xor    eax,eax
    1785:	call   c30 <__snprintf_chk@plt>
    178a:	mov    esi,DWORD PTR [rbp+0x0]
    178d:	lea    rdi,[rbx+0x2]
    1791:	call   1650 <write_ulong_lsb_first>
    1796:	mov    rsi,QWORD PTR [rbp+0x8]
    179a:	lea    rdi,[rbx+0xa]
    179e:	call   1650 <write_ulong_lsb_first>
    17a3:	mov    rsi,QWORD PTR [rbp+0x10]
    17a7:	lea    rdi,[rbx+0x12]
    17ab:	call   1650 <write_ulong_lsb_first>
    17b0:	mov    esi,DWORD PTR [rbp+0x18]
    17b3:	lea    rdi,[rbx+0x1a]
    17b7:	call   1650 <write_ulong_lsb_first>
    17bc:	mov    rsi,QWORD PTR [rbp+0x20]
    17c0:	lea    rdi,[rbx+0x22]
    17c4:	call   1650 <write_ulong_lsb_first>
    17c9:	mov    rsi,QWORD PTR [rbp+0x28]
    17cd:	lea    rdi,[rbx+0x2a]
    17d1:	call   1650 <write_ulong_lsb_first>
    17d6:	mov    rsi,QWORD PTR [rbp+0x30]
    17da:	lea    rdi,[rbx+0x32]
    17de:	call   1650 <write_ulong_lsb_first>
    17e3:	mov    rsi,QWORD PTR [rbp+0x38]
    17e7:	lea    rdi,[rbx+0x3a]
    17eb:	call   1650 <write_ulong_lsb_first>
    17f0:	mov    rsi,QWORD PTR [rbp+0x40]
    17f4:	lea    rdi,[rbx+0x42]
    17f8:	call   1650 <write_ulong_lsb_first>
    17fd:	mov    rdi,r12
    1800:	call   ca0 <strlen@plt>
    1805:	mov    rdi,r13
    1808:	mov    QWORD PTR [rsp+0x8],rax
    180d:	call   ca0 <strlen@plt>
    1812:	mov    rdi,r14
    1815:	mov    QWORD PTR [rsp],rax
    1819:	call   ca0 <strlen@plt>
    181e:	mov    rdi,r15
    1821:	mov    rbp,rax
    1824:	call   ca0 <strlen@plt>
    1829:	sub    rsp,0x8
    182d:	lea    r8,[rip+0x553]        # 1d87 <_IO_stdin_used+0x187>
    1834:	mov    r9d,eax
    1837:	push   r12
    1839:	mov    rcx,QWORD PTR [rsp+0x18]
    183e:	mov    esi,0x100
    1843:	xor    eax,eax
    1845:	push   rcx
    1846:	push   r13
    1848:	mov    ecx,0x100
    184d:	mov    rdx,QWORD PTR [rsp+0x20]
    1852:	push   rdx
    1853:	push   r14
    1855:	mov    edx,0x1
    185a:	push   rbp
    185b:	push   r15
    185d:	mov    rbp,QWORD PTR [rsp+0x58]
    1862:	mov    rdi,rbp
    1865:	call   c30 <__snprintf_chk@plt>
    186a:	lea    rdi,[rbx+0x49]
    186e:	add    rsp,0x40
    1872:	mov    rsi,rbp
    1875:	mov    ecx,0x3b7
    187a:	mov    edx,0x3b6
    187f:	call   da0 <__strncat_chk@plt>
    1884:	mov    rdi,r15
    1887:	call   ca0 <strlen@plt>
    188c:	mov    rdi,r14
    188f:	mov    r15,rax
    1892:	call   ca0 <strlen@plt>
    1897:	mov    rdi,r13
    189a:	mov    r14,rax
    189d:	call   ca0 <strlen@plt>
    18a2:	mov    rdi,r12
    18a5:	mov    rbp,rax
    18a8:	call   ca0 <strlen@plt>
    18ad:	lea    edx,[r15+r14*1+0x52]
    18b2:	mov    rdi,QWORD PTR [rip+0x20175f]        # 203018 <xs>
    18b9:	xor    esi,esi
    18bb:	mov    rcx,rbx
    18be:	add    edx,ebp
    18c0:	lea    r8d,[rdx+rax*1]
    18c4:	lea    rdx,[rip+0x4d5]        # 1da0 <_IO_stdin_used+0x1a0>
    18cb:	call   dd0 <xs_write@plt>
    18d0:	mov    rax,QWORD PTR [rsp+0x528]
    18d8:	xor    rax,QWORD PTR fs:0x28
    18e1:	jne    1914 <write_battery_info_to_xenstore+0x274>
    18e3:	add    rsp,0x538
    18ea:	pop    rbx
    18eb:	pop    rbp
    18ec:	pop    r12
    18ee:	pop    r13
    18f0:	pop    r14
    18f2:	pop    r15
    18f4:	ret    
    18f5:	lea    rcx,[rip+0x4e4]        # 1de0 <__PRETTY_FUNCTION__.4778>
    18fc:	lea    rsi,[rip+0x471]        # 1d74 <_IO_stdin_used+0x174>
    1903:	lea    rdi,[rip+0x473]        # 1d7d <_IO_stdin_used+0x17d>
    190a:	mov    edx,0x166
    190f:	call   ce0 <__assert_fail@plt>
    1914:	call   cc0 <__stack_chk_fail@plt>
    1919:	nop    DWORD PTR [rax+0x0]

0000000000001920 <write_one_time_battery_info>:
    1920:	push   r12
    1922:	push   rbp
    1923:	lea    rdi,[rip+0x47e]        # 1da8 <_IO_stdin_used+0x1a8>
    192a:	push   rbx
    192b:	xor    ebx,ebx
    192d:	sub    rsp,0xd0
    1934:	mov    rax,QWORD PTR fs:0x28
    193d:	mov    QWORD PTR [rsp+0xc8],rax
    1945:	xor    eax,eax
    1947:	call   c90 <opendir@plt>
    194c:	test   rax,rax
    194f:	je     1981 <write_one_time_battery_info+0x61>
    1951:	mov    rbp,rax
    1954:	mov    r12,rsp
    1957:	jmp    1966 <write_one_time_battery_info+0x46>
    1959:	nop    DWORD PTR [rax+0x0]
    1960:	cmp    DWORD PTR [rsp],0x1
    1964:	je     19a8 <write_one_time_battery_info+0x88>
    1966:	xor    esi,esi
    1968:	mov    rdx,r12
    196b:	mov    rdi,rbp
    196e:	call   1540 <get_next_battery_info_or_status>
    1973:	test   eax,eax
    1975:	mov    ebx,eax
    1977:	jne    1960 <write_one_time_battery_info+0x40>
    1979:	mov    rdi,rbp
    197c:	call   d00 <closedir@plt>
    1981:	mov    rcx,QWORD PTR [rsp+0xc8]
    1989:	xor    rcx,QWORD PTR fs:0x28
    1992:	mov    eax,ebx
    1994:	jne    19b7 <write_one_time_battery_info+0x97>
    1996:	add    rsp,0xd0
    199d:	pop    rbx
    199e:	pop    rbp
    199f:	pop    r12
    19a1:	ret    
    19a2:	nop    WORD PTR [rax+rax*1+0x0]
    19a8:	mov    rdi,r12
    19ab:	mov    ebx,0x1
    19b0:	call   16a0 <write_battery_info_to_xenstore>
    19b5:	jmp    1979 <write_one_time_battery_info+0x59>
    19b7:	call   cc0 <__stack_chk_fail@plt>
    19bc:	nop    DWORD PTR [rax+0x0]

00000000000019c0 <write_battery_status_to_xenstore>:
    19c0:	push   rbp
    19c1:	push   rbx
    19c2:	mov    rbp,rdi
    19c5:	lea    rdx,[rip+0x3a4]        # 1d70 <_IO_stdin_used+0x170>
    19cc:	xor    esi,esi
    19ce:	sub    rsp,0x38
    19d2:	mov    rdi,QWORD PTR [rip+0x20163f]        # 203018 <xs>
    19d9:	mov    rax,QWORD PTR fs:0x28
    19e2:	mov    QWORD PTR [rsp+0x28],rax
    19e7:	xor    eax,eax
    19e9:	mov    rbx,rsp
    19ec:	call   d60 <xs_mkdir@plt>
    19f1:	pxor   xmm0,xmm0
    19f5:	lea    r8,[rip+0x36f]        # 1d6b <_IO_stdin_used+0x16b>
    19fc:	xor    eax,eax
    19fe:	mov    r9d,0x10
    1a04:	mov    ecx,0x23
    1a09:	mov    edx,0x1
    1a0e:	mov    WORD PTR [rsp+0x20],ax
    1a13:	mov    esi,0x3
    1a18:	mov    rdi,rbx
    1a1b:	xor    eax,eax
    1a1d:	mov    BYTE PTR [rsp+0x22],0x0
    1a22:	movaps XMMWORD PTR [rsp],xmm0
    1a26:	movaps XMMWORD PTR [rsp+0x10],xmm0
    1a2b:	call   c30 <__snprintf_chk@plt>
    1a30:	lea    rdi,[rbx+0x2]
    1a34:	mov    rsi,QWORD PTR [rbp+0x8]
    1a38:	call   1650 <write_ulong_lsb_first>
    1a3d:	mov    rsi,QWORD PTR [rbp+0x10]
    1a41:	lea    rdi,[rbx+0xa]
    1a45:	call   1650 <write_ulong_lsb_first>
    1a4a:	mov    rsi,QWORD PTR [rbp+0x18]
    1a4e:	lea    rdi,[rbx+0x12]
    1a52:	call   1650 <write_ulong_lsb_first>
    1a57:	mov    rsi,QWORD PTR [rbp+0x20]
    1a5b:	lea    rdi,[rbx+0x1a]
    1a5f:	call   1650 <write_ulong_lsb_first>
    1a64:	mov    rdi,QWORD PTR [rip+0x2015ad]        # 203018 <xs>
    1a6b:	lea    rdx,[rip+0x343]        # 1db5 <_IO_stdin_used+0x1b5>
    1a72:	xor    esi,esi
    1a74:	mov    r8d,0x23
    1a7a:	mov    rcx,rbx
    1a7d:	call   dd0 <xs_write@plt>
    1a82:	mov    rax,QWORD PTR [rsp+0x28]
    1a87:	xor    rax,QWORD PTR fs:0x28
    1a90:	jne    1a99 <write_battery_status_to_xenstore+0xd9>
    1a92:	add    rsp,0x38
    1a96:	pop    rbx
    1a97:	pop    rbp
    1a98:	ret    
    1a99:	call   cc0 <__stack_chk_fail@plt>
    1a9e:	xchg   ax,ax

0000000000001aa0 <wait_for_and_update_battery_status_request>:
    1aa0:	push   r14
    1aa2:	push   r13
    1aa4:	lea    r14,[rip+0x312]        # 1dbd <_IO_stdin_used+0x1bd>
    1aab:	push   r12
    1aad:	lea    r12,[rip+0x2f4]        # 1da8 <_IO_stdin_used+0x1a8>
    1ab4:	push   rbp
    1ab5:	push   rbx
    1ab6:	mov    rdi,r12
    1ab9:	sub    rsp,0x40
    1abd:	mov    rax,QWORD PTR fs:0x28
    1ac6:	mov    QWORD PTR [rsp+0x38],rax
    1acb:	xor    eax,eax
    1acd:	call   c90 <opendir@plt>
    1ad2:	test   rax,rax
    1ad5:	lea    rbp,[rsp+0x10]
    1ada:	lea    r13,[rsp+0xc]
    1adf:	mov    rbx,rax
    1ae2:	jne    1af7 <wait_for_and_update_battery_status_request+0x57>
    1ae4:	jmp    1b48 <wait_for_and_update_battery_status_request+0xa8>
    1ae6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    1af0:	cmp    DWORD PTR [rsp+0x10],0x1
    1af5:	je     1b70 <wait_for_and_update_battery_status_request+0xd0>
    1af7:	mov    rdx,rbp
    1afa:	mov    esi,0x1
    1aff:	mov    rdi,rbx
    1b02:	call   1540 <get_next_battery_info_or_status>
    1b07:	test   eax,eax
    1b09:	jne    1af0 <wait_for_and_update_battery_status_request+0x50>
    1b0b:	mov    rdi,rbx
    1b0e:	call   d00 <closedir@plt>
    1b13:	mov    rdi,QWORD PTR [rip+0x2014fe]        # 203018 <xs>
    1b1a:	lea    rsi,[rip+0x2b1]        # 1dd2 <_IO_stdin_used+0x1d2>
    1b21:	mov    rdx,r14
    1b24:	call   c60 <xs_watch@plt>
    1b29:	mov    rdi,QWORD PTR [rip+0x2014e8]        # 203018 <xs>
    1b30:	mov    rsi,r13
    1b33:	call   c40 <xs_read_watch@plt>
    1b38:	mov    rdi,r12
    1b3b:	call   c90 <opendir@plt>
    1b40:	test   rax,rax
    1b43:	mov    rbx,rax
    1b46:	jne    1af7 <wait_for_and_update_battery_status_request+0x57>
    1b48:	xor    eax,eax
    1b4a:	mov    rcx,QWORD PTR [rsp+0x38]
    1b4f:	xor    rcx,QWORD PTR fs:0x28
    1b58:	jne    1b7a <wait_for_and_update_battery_status_request+0xda>
    1b5a:	add    rsp,0x40
    1b5e:	pop    rbx
    1b5f:	pop    rbp
    1b60:	pop    r12
    1b62:	pop    r13
    1b64:	pop    r14
    1b66:	ret    
    1b67:	nop    WORD PTR [rax+rax*1+0x0]
    1b70:	mov    rdi,rbp
    1b73:	call   19c0 <write_battery_status_to_xenstore>
    1b78:	jmp    1b0b <wait_for_and_update_battery_status_request+0x6b>
    1b7a:	call   cc0 <__stack_chk_fail@plt>
    1b7f:	nop

0000000000001b80 <__libc_csu_init>:
    1b80:	push   r15
    1b82:	push   r14
    1b84:	mov    r15,rdx
    1b87:	push   r13
    1b89:	push   r12
    1b8b:	lea    r12,[rip+0x201146]        # 202cd8 <__frame_dummy_init_array_entry>
    1b92:	push   rbp
    1b93:	lea    rbp,[rip+0x201146]        # 202ce0 <__init_array_end>
    1b9a:	push   rbx
    1b9b:	mov    r13d,edi
    1b9e:	mov    r14,rsi
    1ba1:	sub    rbp,r12
    1ba4:	sub    rsp,0x8
    1ba8:	sar    rbp,0x3
    1bac:	call   c00 <_init>
    1bb1:	test   rbp,rbp
    1bb4:	je     1bd6 <__libc_csu_init+0x56>
    1bb6:	xor    ebx,ebx
    1bb8:	nop    DWORD PTR [rax+rax*1+0x0]
    1bc0:	mov    rdx,r15
    1bc3:	mov    rsi,r14
    1bc6:	mov    edi,r13d
    1bc9:	call   QWORD PTR [r12+rbx*8]
    1bcd:	add    rbx,0x1
    1bd1:	cmp    rbp,rbx
    1bd4:	jne    1bc0 <__libc_csu_init+0x40>
    1bd6:	add    rsp,0x8
    1bda:	pop    rbx
    1bdb:	pop    rbp
    1bdc:	pop    r12
    1bde:	pop    r13
    1be0:	pop    r14
    1be2:	pop    r15
    1be4:	ret    
    1be5:	nop
    1be6:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000001bf0 <__libc_csu_fini>:
    1bf0:	repz ret 

Disassembly of section .fini:

0000000000001bf4 <_fini>:
    1bf4:	sub    rsp,0x8
    1bf8:	add    rsp,0x8
    1bfc:	ret    
